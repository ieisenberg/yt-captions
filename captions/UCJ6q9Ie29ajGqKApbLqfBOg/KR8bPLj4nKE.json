[
  {
    "text": "[Music]",
    "start": "1180",
    "end": "12960"
  },
  {
    "text": "okay welcome to our talk all you ever wanted to know about the amd platform security processor and we're afraid to",
    "start": "12960",
    "end": "18800"
  },
  {
    "text": "emulate in this talk we present pcbmu an emulator for the amd psp",
    "start": "18800",
    "end": "24720"
  },
  {
    "text": "so this is alex here and i'm robert and alex is doing his master thesis at the technical universitat in berlin",
    "start": "24720",
    "end": "31359"
  },
  {
    "text": "and i'm his supervising phd student today i'm going to talk about the",
    "start": "31359",
    "end": "38239"
  },
  {
    "text": "platform security processor and what it's used for and why we would want to emulate it",
    "start": "38239",
    "end": "44079"
  },
  {
    "text": "and then alex will tell you about how we emulated the psp and what you can do with the emulator",
    "start": "44079",
    "end": "51280"
  },
  {
    "text": "so let's start with a brief overview on the amd psp so this is a slide i've took from",
    "start": "51280",
    "end": "59280"
  },
  {
    "text": "an amd slide deck and amd says here that the amd secure processor is an",
    "start": "59280",
    "end": "64720"
  },
  {
    "text": "integrated microcontroller integrated into the x86 slc",
    "start": "64720",
    "end": "69920"
  },
  {
    "text": "there's an arm cortex f5 and it's present on both epic and ryzen cpus",
    "start": "69920",
    "end": "77520"
  },
  {
    "text": "actually it has been integrated since 2013 but for our chalk we only concentrate on",
    "start": "77520",
    "end": "83680"
  },
  {
    "text": "the psp of zen and later generation of amd cpus",
    "start": "83680",
    "end": "89200"
  },
  {
    "text": "so it runs an undocumented and proprietary firmware provided by amd and the psp is the root of trust for the",
    "start": "89200",
    "end": "96000"
  },
  {
    "text": "whole x86 slc so why would we want to emulate this",
    "start": "96000",
    "end": "102479"
  },
  {
    "text": "device well it runs privileged software at a very high privilege level it is the root of trust and we can",
    "start": "102479",
    "end": "109840"
  },
  {
    "text": "analystically analyze its firmware but that is time consuming and from my",
    "start": "109840",
    "end": "115680"
  },
  {
    "text": "point of view also a bit boring and it's only good for a single firmware version if at one point in time amd",
    "start": "115680",
    "end": "121920"
  },
  {
    "text": "decides to completely rewrite their embedded firmware code for the psp",
    "start": "121920",
    "end": "127600"
  },
  {
    "text": "we would have to start over again and analyze the binaries however if we would be able to emulate",
    "start": "127600",
    "end": "133920"
  },
  {
    "text": "the psp itself we could just execute the emulator with the new firmware",
    "start": "133920",
    "end": "139360"
  },
  {
    "text": "and analyze it at runtime which is way easier than plain static analysis",
    "start": "139360",
    "end": "145200"
  },
  {
    "text": "now before we start emulate writing the emulator we need to have the firmware and the amd psp framework",
    "start": "145200",
    "end": "153040"
  },
  {
    "text": "can be found within the padding of uefi images so if you download a new",
    "start": "153040",
    "end": "158080"
  },
  {
    "text": "image update for a motherboard you will find a padding section and within that padding section",
    "start": "158080",
    "end": "163920"
  },
  {
    "text": "you will find the psp firmware code and the psp has its own file system",
    "start": "163920",
    "end": "170160"
  },
  {
    "text": "and we wrote a tool called psp tool which you can use to dump the content of that file system i'm",
    "start": "170160",
    "end": "176879"
  },
  {
    "text": "not going to go into details about this file system during this talk but you can have a look",
    "start": "176879",
    "end": "182959"
  },
  {
    "text": "at our previous talk which we have given at the cares communication congress back in 2019 where we explain more about",
    "start": "182959",
    "end": "190080"
  },
  {
    "text": "the firmware file system structure and a little bit of background of the psp",
    "start": "190080",
    "end": "195280"
  },
  {
    "text": "today i'm going to talk again about how the pcp boot process is working as i said the",
    "start": "195280",
    "end": "202400"
  },
  {
    "text": "psp is the root of trust for the amd soc so the psp actually boots before",
    "start": "202400",
    "end": "208560"
  },
  {
    "text": "the x86 course and on the psp there is a component called the on-chip bootloader",
    "start": "208560",
    "end": "214080"
  },
  {
    "text": "which is the first component which boots and the on-chip bootloader is an bootloader which is embedded in",
    "start": "214080",
    "end": "221599"
  },
  {
    "text": "read-only rom memory now the responsibilities of this onshore bootloader are to",
    "start": "221599",
    "end": "227440"
  },
  {
    "text": "load and verify an off-chip bootloader which is stored on the sbi flash",
    "start": "227440",
    "end": "233760"
  },
  {
    "text": "now if the binary of the offshore bootloader could be verified using a public key",
    "start": "233760",
    "end": "239439"
  },
  {
    "text": "the offshoot builder is executed and the office of boot order will initialize the system",
    "start": "239439",
    "end": "244720"
  },
  {
    "text": "and it's to do so it will load various applications in a static order",
    "start": "244720",
    "end": "252239"
  },
  {
    "text": "and from these applications you can see that there is an abl zero stage which",
    "start": "252239",
    "end": "257840"
  },
  {
    "text": "has embedded multiple abl one to six stages and these are the stages that actually configure and initialize",
    "start": "257840",
    "end": "265680"
  },
  {
    "text": "the x86 soc and this includes the training for the drim for example",
    "start": "265680",
    "end": "271120"
  },
  {
    "text": "when this is finished and dram is available the psp will load and verify an uefa image into",
    "start": "271120",
    "end": "276880"
  },
  {
    "text": "the dram and then release the x86 cores from reset and only now",
    "start": "276880",
    "end": "282080"
  },
  {
    "text": "the system or the main x86 cores boot up now on the epic server variant of amd",
    "start": "282080",
    "end": "289759"
  },
  {
    "text": "cpus when the system is fully booted and we have for example linux running on the x86 course",
    "start": "289759",
    "end": "295600"
  },
  {
    "text": "linux can issue a request to the psp which will then load the firmware for the secure encrypted",
    "start": "295600",
    "end": "302000"
  },
  {
    "text": "virtualization technology from amd again i refer you to our previous talk",
    "start": "302000",
    "end": "308639"
  },
  {
    "text": "if you want to have a bit more background or details on this part of the amd psp",
    "start": "308639",
    "end": "315280"
  },
  {
    "text": "now if we look at the ryzen cpus the boot process is somewhat similar except for the last",
    "start": "315280",
    "end": "321759"
  },
  {
    "text": "step when the x86 scores are load released from reset the psp will",
    "start": "321759",
    "end": "330080"
  },
  {
    "text": "overwrite its own sram memory with another operating system and this is the",
    "start": "330080",
    "end": "336639"
  },
  {
    "text": "secure s which is provided by trustonic it's a kinebi tee and the whole sram is replaced with",
    "start": "336639",
    "end": "343600"
  },
  {
    "text": "that operating system and this os is responsible for example to",
    "start": "343600",
    "end": "349520"
  },
  {
    "text": "host a firmware tpm so if you have a amd mainboard and there is an option to use",
    "start": "349520",
    "end": "355120"
  },
  {
    "text": "a firmware tpm that firmware tpm is actually running on the psp",
    "start": "355120",
    "end": "360720"
  },
  {
    "text": "now the secure s will divide the psp again into a non-secure and secure",
    "start": "360720",
    "end": "367840"
  },
  {
    "text": "site using armed trusts on technology so so much for the boot process let's",
    "start": "367840",
    "end": "375199"
  },
  {
    "text": "have a look at the hardware of the psp itself now the psp as mentioned is an arm",
    "start": "375199",
    "end": "380560"
  },
  {
    "text": "cortex f5 so that means it has a 32-bit address space and at the top of this address space or at",
    "start": "380560",
    "end": "387520"
  },
  {
    "text": "the bottom the way depending on the way you look at it we have the local sram and the sram is either 256 kilobytes or",
    "start": "387520",
    "end": "395199"
  },
  {
    "text": "for then one cpus or 384 kilobytes for the n2 cpus and this is the whole memory which",
    "start": "395199",
    "end": "402880"
  },
  {
    "text": "is used to uh store and execute the offshore bootloader and",
    "start": "402880",
    "end": "408000"
  },
  {
    "text": "all its applications now at the arm high vectors page at the end of the address",
    "start": "408000",
    "end": "413039"
  },
  {
    "text": "space we have the rom bootloader this is present at the fixed memory location",
    "start": "413039",
    "end": "418479"
  },
  {
    "text": "and this is the start of the boot process now in between we have a dedicated mmio",
    "start": "418479",
    "end": "426800"
  },
  {
    "text": "region which contains various devices such as nike controller a timer crypto",
    "start": "426800",
    "end": "432639"
  },
  {
    "text": "accelerator and x86 and smn slot controllers",
    "start": "432639",
    "end": "437680"
  },
  {
    "text": "and the rest of the memory space is essentially divided between the smn so the system management network",
    "start": "437680",
    "end": "443360"
  },
  {
    "text": "slots and x86 slots so what is what are these slots a slot",
    "start": "443360",
    "end": "449919"
  },
  {
    "text": "is a view into another address space and this is required because the psp has",
    "start": "449919",
    "end": "454960"
  },
  {
    "text": "not only access to its own address space but also access to various other address",
    "start": "454960",
    "end": "460080"
  },
  {
    "text": "spaces so the psp has access to the system management network this is another 32-bit address space",
    "start": "460080",
    "end": "467599"
  },
  {
    "text": "which has various devices present so for example the memory controller",
    "start": "467599",
    "end": "474639"
  },
  {
    "text": "of the x86 soc is part of the system management network and when the psp wants to",
    "start": "474639",
    "end": "480319"
  },
  {
    "text": "configure encryption keys for the memory controller it will talk to the memory controller via the system",
    "start": "480319",
    "end": "486319"
  },
  {
    "text": "management network we can also find some fuses there and the",
    "start": "486319",
    "end": "491440"
  },
  {
    "text": "spi flash is also part of the system management network now this system management network is",
    "start": "491440",
    "end": "498400"
  },
  {
    "text": "completely undocumented so there are probably a lot more various devices there which we have not figured",
    "start": "498400",
    "end": "504080"
  },
  {
    "text": "out yet now the psp has access to this address space and the way this works is",
    "start": "504080",
    "end": "509599"
  },
  {
    "text": "that the psp one can map certain parts of this address space into its own address space",
    "start": "509599",
    "end": "515919"
  },
  {
    "text": "so for example if it wants to access this green part of the sbi region it will tell a dedicated",
    "start": "515919",
    "end": "521599"
  },
  {
    "text": "controller within the mmio space to map this region into its address space as a fixed slot",
    "start": "521599",
    "end": "528480"
  },
  {
    "text": "slot so the hardware then will ensure that the same system management region as configured",
    "start": "528480",
    "end": "535120"
  },
  {
    "text": "is visible within the pcb address space now for x86 there's a similar mechanism",
    "start": "535120",
    "end": "542880"
  },
  {
    "text": "the x86 address space is 48 bits wide and it's partially documented",
    "start": "542880",
    "end": "548560"
  },
  {
    "text": "you can google for the amd processor programming references references and they will yield some",
    "start": "548560",
    "end": "555440"
  },
  {
    "text": "information about various devices which are present in the x86 address space and the psp has access to all of them",
    "start": "555440",
    "end": "561839"
  },
  {
    "text": "using the same similar mechanism as explained previously so for example the psp can access the",
    "start": "561839",
    "end": "568080"
  },
  {
    "text": "complete dram by mapping parts of the dram into its own address space and then performing a simple read operation",
    "start": "568080",
    "end": "576880"
  },
  {
    "text": "another interesting device which is present on the pcb itself is the crypto accelerator the psp",
    "start": "576880",
    "end": "583680"
  },
  {
    "text": "has a cryptographic co-processor version 5 or ccp descriptor accelerator has support for",
    "start": "583680",
    "end": "590640"
  },
  {
    "text": "various algorithms such as sha rsa aes ecc zlib or even provide",
    "start": "590640",
    "end": "596240"
  },
  {
    "text": "support for true random numbers now the psp makes extensive use of this",
    "start": "596240",
    "end": "602000"
  },
  {
    "text": "device and it also uses this device as a simple dmi copy engine it uses it also for",
    "start": "602000",
    "end": "609360"
  },
  {
    "text": "to verify signatures or to decompress firmware files",
    "start": "609360",
    "end": "614560"
  },
  {
    "text": "there is no official documentation available for this device but there's a linux kernel driver and",
    "start": "614560",
    "end": "621360"
  },
  {
    "text": "this is extremely valuable for us because that allowed us to really understand how the pcp performs",
    "start": "621360",
    "end": "628399"
  },
  {
    "text": "certain actions such as signature verification or decompressing binaries",
    "start": "628399",
    "end": "633680"
  },
  {
    "text": "now alex will continue and talk about how to emulate those devices i just told you",
    "start": "633680",
    "end": "640079"
  },
  {
    "text": "earlier about thanks robot so how did we approach the",
    "start": "640079",
    "end": "645120"
  },
  {
    "text": "actual emulation well the easiest approach of course is to just start executing the firmware and",
    "start": "645120",
    "end": "650320"
  },
  {
    "text": "see for how it gets for that task we have chosen unicorn because it has an easy to use api",
    "start": "650320",
    "end": "655360"
  },
  {
    "text": "and we thought it is perfect for that kind of task so at some point the firmware will hang or unicorn will throw an error because",
    "start": "655360",
    "end": "662240"
  },
  {
    "text": "an unmapped region is accessed for example we then analyzed the fold and the code was executed before trying to make sense",
    "start": "662240",
    "end": "668880"
  },
  {
    "text": "of it and get an idea what the emulator was missing at last we've implemented and debugged the missing functionality and then",
    "start": "668880",
    "end": "675279"
  },
  {
    "text": "started at the execute step again and continued with the next round",
    "start": "675279",
    "end": "680560"
  },
  {
    "text": "this approach brought us pretty far so after about two months the emulator was able to execute the",
    "start": "681519",
    "end": "686560"
  },
  {
    "text": "on-chip bootloader we've gathered from various cpus previously and the on-chip bootloader was able to",
    "start": "686560",
    "end": "693040"
  },
  {
    "text": "load and execute the offchip bootloader from the emulated spi flash using the emulated cryptographic coprocessor",
    "start": "693040",
    "end": "700560"
  },
  {
    "text": "the offshore bootloader was also able to load and execute the first two applications we as of today still don't know what they're actually",
    "start": "700560",
    "end": "706800"
  },
  {
    "text": "used for this required working signature checking zlip decompression inside the ccp among other",
    "start": "706800",
    "end": "713200"
  },
  {
    "text": "things the offchip bootloader also started executing the base ajisa code for",
    "start": "713200",
    "end": "718560"
  },
  {
    "text": "bootstrapping the whole platform but at this point the code was hanging trying to communicate with some device",
    "start": "718560",
    "end": "724720"
  },
  {
    "text": "there we had to stop with our so far successful approach because trying to emulate all devices to some",
    "start": "724720",
    "end": "729920"
  },
  {
    "text": "extent would be a daunting and almost impossible task without knowing anything just think of possible side effects",
    "start": "729920",
    "end": "735519"
  },
  {
    "text": "certain accesses might have on other registers and devices in the system",
    "start": "735519",
    "end": "740880"
  },
  {
    "text": "here you see a part of the trace from the emulator for an emulator run of the firmware the psp has a register in mmio space",
    "start": "740880",
    "end": "749120"
  },
  {
    "text": "which is used by the firmware to store postcodes to it when it reaches a certain point in the boot process",
    "start": "749120",
    "end": "755440"
  },
  {
    "text": "and you can actually see that it successfully started up that it read and initialized the data from the",
    "start": "755440",
    "end": "762079"
  },
  {
    "text": "spi rom and also that it executed the first two applications the debug unlock app",
    "start": "762079",
    "end": "767839"
  },
  {
    "text": "and the security gasket application and the last status you see here is that it also started loading and executing",
    "start": "767839",
    "end": "774320"
  },
  {
    "text": "the gisa0 application",
    "start": "774320",
    "end": "779120"
  },
  {
    "text": "so we had to choose a different approach and because we already had code execution on the psp for",
    "start": "780639",
    "end": "786000"
  },
  {
    "text": "quite some time we quickly came to the conclusion to leverage that and try to pass through hardware accesses the",
    "start": "786000",
    "end": "791279"
  },
  {
    "text": "firmware makes from the psp emulator to the real hardware for that the real psp will run a stop",
    "start": "791279",
    "end": "797680"
  },
  {
    "text": "forwarding those requests from a generic proxy component in the emulator this component will capture all accesses",
    "start": "797680",
    "end": "804240"
  },
  {
    "text": "to regions which are not being used by configured emulated devices like the emulator flash for example",
    "start": "804240",
    "end": "810000"
  },
  {
    "text": "and forward it to the stop running on the real psp where it communicates with the device and return the result back to the",
    "start": "810000",
    "end": "816079"
  },
  {
    "text": "emulator robert will talk about the vulnerability we've exploited a bit later on in this",
    "start": "816079",
    "end": "821199"
  },
  {
    "text": "talk so proxy mode was born but the biggest question was",
    "start": "821199",
    "end": "826320"
  },
  {
    "text": "the communication channel to use as the whole system wasn't initialized when we wanted to take control over it",
    "start": "826320",
    "end": "831920"
  },
  {
    "text": "which is right after the onshore bootloader tries to hand over execution to the offshore bootloader so not even a",
    "start": "831920",
    "end": "837920"
  },
  {
    "text": "simple device like the serial port was working and because the whole system is still mostly black box to us",
    "start": "837920",
    "end": "843440"
  },
  {
    "text": "was making it even more difficult so the only interface we knew about and",
    "start": "843440",
    "end": "851199"
  },
  {
    "text": "had access to was the spi flash interface the psp contains a flash controller",
    "start": "851199",
    "end": "856720"
  },
  {
    "text": "which maps the content of the spi flash into the smn address space and if the psp firmware reads or writes",
    "start": "856720",
    "end": "863040"
  },
  {
    "text": "to or from the spi flash region it will generate the necessary spi commands on the on the spi bus",
    "start": "863040",
    "end": "869519"
  },
  {
    "text": "so the university bought an spi flash emulator which was hooked up to the system the",
    "start": "869519",
    "end": "875600"
  },
  {
    "text": "good thing is that it also has an open source utility to configure it and read the spi trace later on",
    "start": "875600",
    "end": "880959"
  },
  {
    "text": "so we could modify it the idea was to let our stop",
    "start": "880959",
    "end": "886000"
  },
  {
    "text": "read or write a magic location in the flash area which then the controller translate to the necessary",
    "start": "886000",
    "end": "891279"
  },
  {
    "text": "spi commands and the flash emulator would then capture the tool on the host would then read out",
    "start": "891279",
    "end": "898480"
  },
  {
    "text": "the the trace pars it and extract the data inside the the data when it recognizes the",
    "start": "898480",
    "end": "905760"
  },
  {
    "text": "magic location the extracted data would be then made available over a simple network socket",
    "start": "905760",
    "end": "910880"
  },
  {
    "text": "to a psp emulator likewise it would also take the data from the socket and reprogram the flash",
    "start": "910880",
    "end": "916320"
  },
  {
    "text": "so the stub has access to the data when it tries to read it this sounds simple but was made",
    "start": "916320",
    "end": "921600"
  },
  {
    "text": "complicated by the flash emulator itself because you have to disable spi emulation on the flash emulator when you",
    "start": "921600",
    "end": "928079"
  },
  {
    "text": "up want to update the content of the spi flash image in ram which is obviously a bad",
    "start": "928079",
    "end": "935680"
  },
  {
    "text": "idea if the stuff is accessing the flash at the same time so we had to put some sort of locking protocol on top of it to prevent the",
    "start": "935680",
    "end": "942000"
  },
  {
    "text": "tool from disabling the flash emulator at an unconvenient time when the stop is actually accessing the flash",
    "start": "942000",
    "end": "948720"
  },
  {
    "text": "um the problem here is that is everything got rather slow we had a stable communication",
    "start": "948720",
    "end": "954639"
  },
  {
    "text": "using that method but we could only do two to three register accesses per second using this method",
    "start": "954639",
    "end": "960880"
  },
  {
    "text": "for example it took about 20 minutes for the onship bootloader to complete its run in the emulator",
    "start": "960880",
    "end": "966160"
  },
  {
    "text": "even though it wasn't accessing a whole lot of regions inside the smn or mmi address space",
    "start": "966160",
    "end": "974879"
  },
  {
    "text": "so and it of course still requires an expensive flash emulator um",
    "start": "975199",
    "end": "982320"
  },
  {
    "text": "at this point we started looking into getting the uid initialized and working so we had something hopefully faster and",
    "start": "982320",
    "end": "988880"
  },
  {
    "text": "not requiring an expensive flash emulator robert already mentioned that we then came across the processor programming",
    "start": "988880",
    "end": "995360"
  },
  {
    "text": "reference manuals which are freely available for everyone and in there we found a description of",
    "start": "995360",
    "end": "1000399"
  },
  {
    "text": "an low level spi controller interface allowing the bios oe file on the x86 site to send",
    "start": "1000399",
    "end": "1007199"
  },
  {
    "text": "arbitrary commands to the attached spi flash we've also found some code in the psp firmware",
    "start": "1007199",
    "end": "1013600"
  },
  {
    "text": "earlier which we thought would do the same but we were never able to recreate it in our startup to execute arbitrary spi",
    "start": "1013600",
    "end": "1019440"
  },
  {
    "text": "commands so with the described spi flash interface residing in x86 mmo space and",
    "start": "1019440",
    "end": "1025839"
  },
  {
    "text": "the smn address from the psp firmware we hope that the register interface described for the x86 site is actually just the",
    "start": "1025839",
    "end": "1032000"
  },
  {
    "text": "same than what's behind the smn address and it actually worked so now we were able to send arbitrary",
    "start": "1032000",
    "end": "1038720"
  },
  {
    "text": "spi commands directly to the spi flash which enables us to use this communication side channel inside inside",
    "start": "1038720",
    "end": "1045678"
  },
  {
    "text": "the spi flash emulator so we could exchange data",
    "start": "1045679",
    "end": "1051200"
  },
  {
    "text": "at a much much greater speed than previously so after implementing a proper transport",
    "start": "1051200",
    "end": "1056799"
  },
  {
    "text": "packet in our stop and modifying the flash emulator tool to forward the data using this side",
    "start": "1056799",
    "end": "1062400"
  },
  {
    "text": "channel we had a really fast and reliable communication channel to work with",
    "start": "1062400",
    "end": "1067440"
  },
  {
    "text": "it however still requires um an expensive flash emulator unfortunately so to put this in",
    "start": "1067440",
    "end": "1073600"
  },
  {
    "text": "perspective um with the running the off chip offshore bootloader inside the emulator it now",
    "start": "1073600",
    "end": "1080320"
  },
  {
    "text": "took only about five minutes for the complete bootstrapping process to complete whereas before only",
    "start": "1080320",
    "end": "1086000"
  },
  {
    "text": "the on-chip bootloader would already take over 20 minutes",
    "start": "1086000",
    "end": "1090640"
  },
  {
    "text": "so because we still need an expensive flash emulator and we",
    "start": "1092080",
    "end": "1097440"
  },
  {
    "text": "wanted to make it easier for others to fully use our code so we still wanted to get the serial",
    "start": "1097440",
    "end": "1102640"
  },
  {
    "text": "port working it would be much slower than the spi channel but it would be a very low cost solution um",
    "start": "1102640",
    "end": "1111039"
  },
  {
    "text": "legacy serial ports on almost all consumer members today are handled by a so-called super io chip which sole purpose is to provide legacy",
    "start": "1111039",
    "end": "1118080"
  },
  {
    "text": "i o like a keyboard mouse controller a parallel and serial ports among others and these",
    "start": "1118080",
    "end": "1124400"
  },
  {
    "text": "super io chips are attached via the so called low pin count bus directly to the amd soc",
    "start": "1124400",
    "end": "1132000"
  },
  {
    "text": "however these superior chips need to be configured to enable serial ports and the configuration sequence depends",
    "start": "1132080",
    "end": "1138640"
  },
  {
    "text": "on the chip being used this is usually done by the bios earlier e5 firmware",
    "start": "1138640",
    "end": "1143679"
  },
  {
    "text": "and to complicate matters most of these chips like the ite one on our main board have no public reference manual so we had to get at the",
    "start": "1143679",
    "end": "1151440"
  },
  {
    "text": "initialization sequence for the urge somehow for that we hooked up a logic analyzer to the lpc bus",
    "start": "1151440",
    "end": "1157440"
  },
  {
    "text": "and captured everything going on there using the stock firmware image the resulting captcha file was then",
    "start": "1157440",
    "end": "1162640"
  },
  {
    "text": "processed by a self-written tool called lpc decoder to make analysis easier after extracting the necessary",
    "start": "1162640",
    "end": "1170000"
  },
  {
    "text": "sequence from the capture and implementing that in our step however the uride was still not working and after a lot of trial and error it",
    "start": "1170000",
    "end": "1176640"
  },
  {
    "text": "turns out that one has to flip a single bit in a register living in the system management network space to either turn",
    "start": "1176640",
    "end": "1181840"
  },
  {
    "text": "on the superior chip or bring it out of reset but with that in place we also now have a slow but low cost solution to",
    "start": "1181840",
    "end": "1188000"
  },
  {
    "text": "communicate with the code running on the psp before the platform is initialized however depending on the super io chip",
    "start": "1188000",
    "end": "1194720"
  },
  {
    "text": "being used for a particular main board one might to have adapt this initialization sequence a bit",
    "start": "1194720",
    "end": "1201279"
  },
  {
    "text": "so and before continuing with the an overview of the psp emulator i will hand back to",
    "start": "1202799",
    "end": "1207840"
  },
  {
    "text": "robert who will talk about the security vulnerability we've leveraged to gain actual code",
    "start": "1207840",
    "end": "1212960"
  },
  {
    "text": "execution on the psp okay thanks alex now let's talk about",
    "start": "1212960",
    "end": "1219360"
  },
  {
    "text": "how we can inject our own stop code so we can use the proxy mode",
    "start": "1219360",
    "end": "1224559"
  },
  {
    "text": "now as explained previously when the psp boots up the first thing that's happening is that the onshore",
    "start": "1224559",
    "end": "1230559"
  },
  {
    "text": "bootloader is executing and the on chipboard is executing from non-writable rom",
    "start": "1230559",
    "end": "1236880"
  },
  {
    "text": "memory so that means before the onshore bootloader can do anything it needs to map certain parts of the",
    "start": "1236880",
    "end": "1243200"
  },
  {
    "text": "address space for its stack and that's what's happening so part of the sram now is reserved for the on-chip",
    "start": "1243200",
    "end": "1249520"
  },
  {
    "text": "boot or stack and then we need to load and verify the object boot order which is",
    "start": "1249520",
    "end": "1254640"
  },
  {
    "text": "stored on the spi flash so then the next step for the onshore booter is to",
    "start": "1254640",
    "end": "1260000"
  },
  {
    "text": "load to map the spi flash and then the onto bootloader will load",
    "start": "1260000",
    "end": "1266400"
  },
  {
    "text": "and verify an amd public key which is present in the spi flash the public key is placed into the",
    "start": "1266400",
    "end": "1273440"
  },
  {
    "text": "sram once that is finished the onshore bootloader will load and",
    "start": "1273440",
    "end": "1278559"
  },
  {
    "text": "verify the offshore. the object bootloader is part of the sbi flash and it will copy the binary into the",
    "start": "1278559",
    "end": "1284640"
  },
  {
    "text": "local sram now you can see that there's a red line between",
    "start": "1284640",
    "end": "1290000"
  },
  {
    "text": "the offshore butter and the butter stack of course this copy operation must not cross that line",
    "start": "1290000",
    "end": "1296000"
  },
  {
    "text": "so we have a certain maximum size that the off-chip bootloader can occupy and this size is smaller than the s-ramp",
    "start": "1296000",
    "end": "1302840"
  },
  {
    "text": "size so the onshore bootloader needs to validate the size of the offshore boot",
    "start": "1302840",
    "end": "1307919"
  },
  {
    "text": "order before the cop operation takes place now how do we get the size of the option",
    "start": "1307919",
    "end": "1314000"
  },
  {
    "text": "off to bootloader now if we look at the firmware file system we see a structure like this",
    "start": "1314000",
    "end": "1320000"
  },
  {
    "text": "we have a directories and we have entries in directories and these entries point to files the object boot order is one of",
    "start": "1320000",
    "end": "1326799"
  },
  {
    "text": "those files and each file has a header a body and a signature now if you look at the",
    "start": "1326799",
    "end": "1332799"
  },
  {
    "text": "header content we see that there are two different values of interest right now so first of",
    "start": "1332799",
    "end": "1339520"
  },
  {
    "text": "all at offset hex 14 we have the body size so this is the size of the off-chip",
    "start": "1339520",
    "end": "1345679"
  },
  {
    "text": "bootloader in the spi flash and then we have a load address and this load address is the",
    "start": "1345679",
    "end": "1350880"
  },
  {
    "text": "target where this offshore bootloader wants to be placed in the sram now the on-chip bootloader",
    "start": "1350880",
    "end": "1358960"
  },
  {
    "text": "needs to copy the octa-putter into the sram and only then its signature can be",
    "start": "1358960",
    "end": "1364640"
  },
  {
    "text": "verified this is because the onshore boot order must avoid any talk to attacks",
    "start": "1364640",
    "end": "1370240"
  },
  {
    "text": "where the attacker switches the content of the sbi flash for example after it has been validated so",
    "start": "1370240",
    "end": "1377679"
  },
  {
    "text": "this header i talked about is processed before the signature check is validated or the",
    "start": "1377679",
    "end": "1383760"
  },
  {
    "text": "signature check is carried out so that means the onshore bootloader needs to validate",
    "start": "1383760",
    "end": "1389120"
  },
  {
    "text": "the header values uh carefully so let's have a look at the function",
    "start": "1389120",
    "end": "1395280"
  },
  {
    "text": "that does this validation now first thing the entropy",
    "start": "1395280",
    "end": "1400320"
  },
  {
    "text": "does it compares the load address from the header plus the body size for also from the",
    "start": "1400320",
    "end": "1406880"
  },
  {
    "text": "header against the fixed threshold which is the start of the bootload stack but it does not take the values as they",
    "start": "1406880",
    "end": "1413120"
  },
  {
    "text": "are stored in the spi flash instead it takes the absolute of those values",
    "start": "1413120",
    "end": "1418320"
  },
  {
    "text": "so it masks out the sign bit the highest bit so if we calculate now this value you",
    "start": "1418320",
    "end": "1426159"
  },
  {
    "text": "see that we have an absolute of x 100 plus the absolute of hex c 640 and the result is",
    "start": "1426159",
    "end": "1433600"
  },
  {
    "text": "c 740 in hex and if that value does not cross the",
    "start": "1433600",
    "end": "1439520"
  },
  {
    "text": "beginning of the boot order stack we can safely place the offshore bootloader here",
    "start": "1439520",
    "end": "1445200"
  },
  {
    "text": "now the copy operation that's doing our actual copy part looks like this so we copy to the load",
    "start": "1445200",
    "end": "1452559"
  },
  {
    "text": "address from the spi source address and we copy body size",
    "start": "1452559",
    "end": "1458000"
  },
  {
    "text": "time size now let's have a look at those values you can see for the check we use the",
    "start": "1458000",
    "end": "1464799"
  },
  {
    "text": "absolute body size however for the copy operation we use the body size as is so that means let's say we",
    "start": "1464799",
    "end": "1472880"
  },
  {
    "text": "take the body size in the spi flash and we flip the highest bit making it either a negative number or",
    "start": "1472880",
    "end": "1481440"
  },
  {
    "text": "a very large if interpreted as an unsigned integer now if we do the check again we see it",
    "start": "1481440",
    "end": "1489120"
  },
  {
    "text": "calculates to the same value so it doesn't matter if we flip the highest",
    "start": "1489120",
    "end": "1495200"
  },
  {
    "text": "bit for the security check the resulting value is still small",
    "start": "1495200",
    "end": "1500320"
  },
  {
    "text": "enough for the cop operation to take place but the cop operation actually uses the size",
    "start": "1500320",
    "end": "1505760"
  },
  {
    "text": "as is so we have now a mismatch between the size that it's validated and the size that is used for copy",
    "start": "1505760",
    "end": "1512320"
  },
  {
    "text": "and actually this size now here is way larger than the whole sram of this psp so if we use that copy",
    "start": "1512320",
    "end": "1520320"
  },
  {
    "text": "operation right now we would copy over the whole sram content of the psp including the onshore",
    "start": "1520320",
    "end": "1526480"
  },
  {
    "text": "bootloader stack so let's do that to insert our stop",
    "start": "1526480",
    "end": "1532240"
  },
  {
    "text": "so we place our step within the spi flash and we append it with return addresses",
    "start": "1532240",
    "end": "1538240"
  },
  {
    "text": "and these addresses start to the beginning of our stop a point to the beginning of our step",
    "start": "1538240",
    "end": "1544080"
  },
  {
    "text": "now then we flip the sine bit of the body size and the resulting copy operation will",
    "start": "1544080",
    "end": "1550400"
  },
  {
    "text": "happily copy over the whole sram and the data which is",
    "start": "1550400",
    "end": "1555520"
  },
  {
    "text": "copied is our data which we put into the spi flash so that means in the end our stop is",
    "start": "1555520",
    "end": "1562480"
  },
  {
    "text": "copied into the sram the return addresses are the whole stack of the onshore boot order",
    "start": "1562480",
    "end": "1568880"
  },
  {
    "text": "is replaced with our return addresses with which then point to our psp step",
    "start": "1568880",
    "end": "1575120"
  },
  {
    "text": "and as soon as the copy operation inside the onshore bootloader returns we execute our stop immediately and this",
    "start": "1575120",
    "end": "1581840"
  },
  {
    "text": "all happens before any signature is validated so that means the fact that we cannot create a valid",
    "start": "1581840",
    "end": "1588640"
  },
  {
    "text": "signature for the pcb stop doesn't really matter at all",
    "start": "1588640",
    "end": "1593679"
  },
  {
    "text": "now if we use the same setup inside the emulator you would see",
    "start": "1593679",
    "end": "1599919"
  },
  {
    "text": "something like this this is an output of the emulator which shows the",
    "start": "1599919",
    "end": "1605679"
  },
  {
    "text": "ccp request this is the copy operation which i talked about earlier now the psp",
    "start": "1605679",
    "end": "1612480"
  },
  {
    "text": "firmware uses the ccp for larger mem copy operations so in our case when copying the offshore",
    "start": "1612480",
    "end": "1620080"
  },
  {
    "text": "boot order from the spi flash to the sram not a simple map copy is used but the ccp is used to copy the data",
    "start": "1620080",
    "end": "1627039"
  },
  {
    "text": "and this is the printout of the corresponding request and here we can see the ccp request",
    "start": "1627039",
    "end": "1634320"
  },
  {
    "text": "uses a very large size value to copy the data and the target address is a low address",
    "start": "1634320",
    "end": "1640240"
  },
  {
    "text": "into the sram this is the target address which is specified in the sbi flash in the header",
    "start": "1640240",
    "end": "1645279"
  },
  {
    "text": "of the off-chip bootloader now this way we can insert our own code directly after the on-chip boot order",
    "start": "1645279",
    "end": "1652840"
  },
  {
    "text": "executed now to summarize this this feature",
    "start": "1652840",
    "end": "1658640"
  },
  {
    "text": "um we've tried this on several systems and from the best of our knowledge all zen",
    "start": "1658640",
    "end": "1664640"
  },
  {
    "text": "and then plus cpus are affected we confirmed this on the ryzen 1700 and epic",
    "start": "1664640",
    "end": "1673559"
  },
  {
    "text": "7281 and the zen plus cpu it's a ryzen pro 3500u",
    "start": "1673559",
    "end": "1679919"
  },
  {
    "text": "and ryzen 5 2600.",
    "start": "1679919",
    "end": "1684799"
  },
  {
    "text": "we've looked at zen 2 we don't think it's affected but we don't know for sure actually",
    "start": "1684960",
    "end": "1692399"
  },
  {
    "text": "of course we reported this to amd we were reported this in the end of february this year and",
    "start": "1692399",
    "end": "1699840"
  },
  {
    "text": "well it took some time for amd to respond at all so they responded in the beginning of",
    "start": "1699840",
    "end": "1706720"
  },
  {
    "text": "may and what they said was basically our all right this is a known bug it has been reported by others so we're",
    "start": "1706720",
    "end": "1713919"
  },
  {
    "text": "obviously not the first one to discover this and they have developed mitigations in",
    "start": "1713919",
    "end": "1719440"
  },
  {
    "text": "various products where appropriate so i don't think there's any meaningful mitigation",
    "start": "1719440",
    "end": "1726559"
  },
  {
    "text": "besides replacing the actual hardware because this is a bug in the rom bootloader code but what do i know",
    "start": "1726559",
    "end": "1733600"
  },
  {
    "text": "maybe amd has some magic that actually fixes this now i'm going to hand over again to alex",
    "start": "1733600",
    "end": "1740080"
  },
  {
    "text": "for you to show you how you can use the emulator to analyze your own firmware which you downloaded maybe from",
    "start": "1740080",
    "end": "1746960"
  },
  {
    "text": "a motherboard update so next we will go over the most basic command line arguments and features you",
    "start": "1746960",
    "end": "1753039"
  },
  {
    "text": "will encounter when working with the emulator yourself so first you have to set the starting point in the boot process where you want",
    "start": "1753039",
    "end": "1759039"
  },
  {
    "text": "to begin emulating the shown example starts executing the on-chip bootloader",
    "start": "1759039",
    "end": "1764159"
  },
  {
    "text": "but we also have modes to execute the offshoot bootloader or even the securis directly",
    "start": "1764159",
    "end": "1769919"
  },
  {
    "text": "the second argument selects the flash image to use for the emulated spi flash image and as we've selected to start emulating",
    "start": "1769919",
    "end": "1776559"
  },
  {
    "text": "with the onshore bootloader we also have to load that one as well if you decide to start with the offshoot",
    "start": "1776559",
    "end": "1782320"
  },
  {
    "text": "bootloader or the securis you have to use different arguments to load that one into sram",
    "start": "1782320",
    "end": "1789120"
  },
  {
    "text": "then you set the destination of the trace log so everything which is deemed important by the emulator will be locked",
    "start": "1789360",
    "end": "1795520"
  },
  {
    "text": "to the trace log like i o reads and writes and so on and because most of the time it will be",
    "start": "1795520",
    "end": "1800720"
  },
  {
    "text": "interesting to see the interaction between the various user mode modules and the supervisor mode code you should also enable",
    "start": "1800720",
    "end": "1805919"
  },
  {
    "text": "this call tracing so every score being made along with its arguments will be locked to the aforementioned trace log",
    "start": "1805919",
    "end": "1812399"
  },
  {
    "text": "the last argument in this example will enable the gdb stop at the to listen at the specified port",
    "start": "1812399",
    "end": "1818799"
  },
  {
    "text": "so you can hook up gdb to the psp emulator and then use breakpoints and watch points to control",
    "start": "1818799",
    "end": "1825840"
  },
  {
    "text": "the execution of the loaded binary and analyze it so this is a basic",
    "start": "1825840",
    "end": "1833039"
  },
  {
    "text": "workflow of when using the emulator",
    "start": "1833039",
    "end": "1837840"
  },
  {
    "text": "next i will give a brief overview about the architecture of the psp emulator so at the core we use a",
    "start": "1838399",
    "end": "1844240"
  },
  {
    "text": "heavily patched unicorn which gets wrapped by our own psp core abstraction layer which takes care",
    "start": "1844240",
    "end": "1849520"
  },
  {
    "text": "of mmi related things handling svc calls from user space like doing the transition to supervisor",
    "start": "1849520",
    "end": "1855279"
  },
  {
    "text": "mode code and back for example and other stuff because it turns out unicorn wasn't made to be used as a",
    "start": "1855279",
    "end": "1861120"
  },
  {
    "text": "complete system emulator after all then the pspiom i o manager handles all",
    "start": "1861120",
    "end": "1866799"
  },
  {
    "text": "mmi oh smn and x86 access is being made from the firmware and forwards them to the appropriate",
    "start": "1866799",
    "end": "1872240"
  },
  {
    "text": "devices therefore it emulates the um",
    "start": "1872240",
    "end": "1878399"
  },
  {
    "text": "smn and x86 slot registers robert already talked about in the first",
    "start": "1878399",
    "end": "1883440"
  },
  {
    "text": "part of this talk everything is then wrapped by the psp cct component which",
    "start": "1883440",
    "end": "1889120"
  },
  {
    "text": "represents a single ccd and therefore psp instance in a real system below all that there is a tracing",
    "start": "1889120",
    "end": "1895519"
  },
  {
    "text": "component which is responsible for generating the trace log and capturing information about i o reads and writes and svc calls for example",
    "start": "1895519",
    "end": "1903200"
  },
  {
    "text": "and our gd debugging component is based up on our own libgdb stuff so you can",
    "start": "1903200",
    "end": "1908559"
  },
  {
    "text": "debug the firmware with gdb or even ida pro for example and if you have written your own code you also get",
    "start": "1908559",
    "end": "1914399"
  },
  {
    "text": "source level debugging for free we've used that to debug certain parts of our stub and for debugging the",
    "start": "1914399",
    "end": "1919840"
  },
  {
    "text": "exploit for example it also gives access to special commands",
    "start": "1919840",
    "end": "1924880"
  },
  {
    "text": "when using gdb's monitor command so you can access certain features of the emulator for example to",
    "start": "1924880",
    "end": "1930880"
  },
  {
    "text": "read or write to devices on real hardware when proxy mode is used the proxy mode component is based upon",
    "start": "1930880",
    "end": "1937440"
  },
  {
    "text": "the psp proxy which gives access to the real hardware using the",
    "start": "1937440",
    "end": "1944240"
  },
  {
    "text": "aforementioned methods like the uart or spi flash emulator",
    "start": "1944240",
    "end": "1949840"
  },
  {
    "text": "the gdb monitor command also gives access to the built-in coverage tracer so",
    "start": "1951120",
    "end": "1959039"
  },
  {
    "text": "the coverage tracer generates coverage traces of either the complete run of the",
    "start": "1959039",
    "end": "1964320"
  },
  {
    "text": "firmware or just a certain part of the code you are interested in and the coverage trace is compatible to",
    "start": "1964320",
    "end": "1969440"
  },
  {
    "text": "the archive and can be loaded into github for example using the dragon dragon dance extension",
    "start": "1969440",
    "end": "1974880"
  },
  {
    "text": "and also recently psp gained the feature to record all i o reads and writes into",
    "start": "1974880",
    "end": "1980480"
  },
  {
    "text": "a certain log file and replay that later on so you can recreate a specific run of",
    "start": "1980480",
    "end": "1986640"
  },
  {
    "text": "the firmware when you don't have access to the real hardware",
    "start": "1986640",
    "end": "1991840"
  },
  {
    "text": "and with that our emulator can already do quite a bit for example what we can do is bootstrap",
    "start": "1992880",
    "end": "2000159"
  },
  {
    "text": "the real hardware when in proxy mode up to the point where dram is initialized and the ue5 firmware starts",
    "start": "2000159",
    "end": "2005600"
  },
  {
    "text": "executing on the x86 cores however the wifi firmware will then",
    "start": "2005600",
    "end": "2011919"
  },
  {
    "text": "detect an error and will go into a recovery recovery mode and won't continue with",
    "start": "2011919",
    "end": "2017120"
  },
  {
    "text": "booting the system further and also this is all for a ryzen 1700x",
    "start": "2017120",
    "end": "2023039"
  },
  {
    "text": "which is first gen zen and we didn't try that yet on zen plus or zen ii systems",
    "start": "2023039",
    "end": "2028320"
  },
  {
    "text": "also cpus which have multiple ccds and therefore multiple piece piece won't work right now but we also have",
    "start": "2028320",
    "end": "2035840"
  },
  {
    "text": "the stable communication channel with the psp for further exploration you can use the uart or the fast spi flash emulator",
    "start": "2035840",
    "end": "2044880"
  },
  {
    "text": "we also have a basic tool chain for writing and debugging your own code running on the psp and the i o log record and replay",
    "start": "2044880",
    "end": "2052079"
  },
  {
    "text": "feature doesn't require access to real hardware for first steps",
    "start": "2052079",
    "end": "2057118"
  },
  {
    "text": "last we also have a basic micro python port which runs on the psp so all the python fans out there can run",
    "start": "2057119",
    "end": "2062800"
  },
  {
    "text": "python and embedded arm cpu inside their amd cpu",
    "start": "2062800",
    "end": "2068320"
  },
  {
    "text": "so we still have a lot of room for improvement though our final goal is getting the real hardware to fully boot",
    "start": "2068560",
    "end": "2074320"
  },
  {
    "text": "using our emulator for that we have to understand securis on ryzen",
    "start": "2074320",
    "end": "2079919"
  },
  {
    "text": "and getting it to run properly in the emulator also for most cpus we have to emulate",
    "start": "2079919",
    "end": "2085760"
  },
  {
    "text": "multiple ccds and psps which also require support in our staff to handle that on real",
    "start": "2085760",
    "end": "2091440"
  },
  {
    "text": "hardware as well and we also want to investigate security as further looking for more security",
    "start": "2091440",
    "end": "2097040"
  },
  {
    "text": "vulnerabilities also what we want to get working is",
    "start": "2097040",
    "end": "2103440"
  },
  {
    "text": "the emulator working with zen plus and then two systems and last but not least then three is",
    "start": "2103440",
    "end": "2109119"
  },
  {
    "text": "about to be released end of this year and we will see what kind of surprises it brings with it",
    "start": "2109119",
    "end": "2116400"
  },
  {
    "text": "so if you are interested in getting yourself familiar with the emulator and want to run your own code",
    "start": "2116400",
    "end": "2121680"
  },
  {
    "text": "here are all the main repositories of the components required everything is either mit or gpl",
    "start": "2121680",
    "end": "2128240"
  },
  {
    "text": "and with that we thank you for your attention and should hopefully be open for questions now",
    "start": "2128240",
    "end": "2134319"
  },
  {
    "text": "hi there",
    "start": "2136800",
    "end": "2139200"
  },
  {
    "text": "hi um just a quick starters update before we start answering questions um so because",
    "start": "2142640",
    "end": "2149520"
  },
  {
    "text": "the talk was pre-recorded uh we had some time to develop the pc emulator further",
    "start": "2149520",
    "end": "2155040"
  },
  {
    "text": "and right now uh we also added the mode where we can run the uefi image for example inside of virtualbox and forward",
    "start": "2155040",
    "end": "2161119"
  },
  {
    "text": "all the x86 hardware accesses through the psp emulator um to the real",
    "start": "2161119",
    "end": "2166160"
  },
  {
    "text": "hardware so we can also examine the ua5 firmware",
    "start": "2166160",
    "end": "2171359"
  },
  {
    "text": "and how it interacts with the psp",
    "start": "2171359",
    "end": "2175039"
  },
  {
    "text": "so feel free to ask any questions if you have so for the question is a proprietary",
    "start": "2176960",
    "end": "2183119"
  },
  {
    "text": "operating system running in psp the offship bootloader is so everything is proprietary the offshore bootloader",
    "start": "2183119",
    "end": "2189280"
  },
  {
    "text": "is not the real operating system in the usual sense because it has no scheduling and no",
    "start": "2189280",
    "end": "2194960"
  },
  {
    "text": "um virtual memory uh and memory protection features as you",
    "start": "2194960",
    "end": "2200400"
  },
  {
    "text": "would normally find in an operating system um the secures on risen is kinibe",
    "start": "2200400",
    "end": "2206400"
  },
  {
    "text": "so it is a full-fledged trusted trust zone based operating system but we couldn't",
    "start": "2206400",
    "end": "2214240"
  },
  {
    "text": "uh have a deeper look into it right now",
    "start": "2214240",
    "end": "2218560"
  },
  {
    "text": "okay no questions",
    "start": "2221760",
    "end": "2229839"
  },
  {
    "text": "um the onshore bootloader we got through uh the security bug which we explained",
    "start": "2239280",
    "end": "2245839"
  },
  {
    "text": "in the cows communication communication congress talk from last year and we got into it using the offshoot",
    "start": "2245839",
    "end": "2252720"
  },
  {
    "text": "bootloader and then we're able to just read out the high the last 64 kilobytes",
    "start": "2252720",
    "end": "2259040"
  },
  {
    "text": "of the four gigabyte address space to to get at the bootloader because there's not apparently no protection",
    "start": "2259040",
    "end": "2265119"
  },
  {
    "text": "there again screening it",
    "start": "2265119",
    "end": "2271839"
  },
  {
    "text": "um",
    "start": "2282839",
    "end": "2285839"
  },
  {
    "text": "so yeah the the presentation was started i guess",
    "start": "2300160",
    "end": "2305200"
  },
  {
    "text": "probably 10 minutes too early so that was a technical issue and uh sorry for that",
    "start": "2305200",
    "end": "2311839"
  },
  {
    "text": "the talk will be available on demand so if you want to get into the first 10 minutes or so you can",
    "start": "2311839",
    "end": "2318000"
  },
  {
    "text": "find them later on the cortex used inside the amd",
    "start": "2318000",
    "end": "2325200"
  },
  {
    "text": "cpu is a cortex a5",
    "start": "2325200",
    "end": "2341838"
  },
  {
    "text": "um so when the psp is booting it won't make use of any trust and",
    "start": "2392079",
    "end": "2398960"
  },
  {
    "text": "features features at all so that was not an issue for emulation of course later on when the uh secure os",
    "start": "2398960",
    "end": "2406160"
  },
  {
    "text": "takes over that one uses the trust on features and that was some technical problems",
    "start": "2406160",
    "end": "2412640"
  },
  {
    "text": "that we have to had to overcome because our emulator is based on unicorn",
    "start": "2412640",
    "end": "2417680"
  },
  {
    "text": "and it's not made to be a full system",
    "start": "2417680",
    "end": "2422480"
  },
  {
    "text": "emulator",
    "start": "2422839",
    "end": "2425839"
  },
  {
    "text": "not sure what you mean by work with amd i mean we reported the issues we found",
    "start": "2448560",
    "end": "2455520"
  },
  {
    "text": "but that's about it we didn't have any further contact with amd regarding our",
    "start": "2455520",
    "end": "2461839"
  },
  {
    "text": "work so regarding the proxy mode um it",
    "start": "2461839",
    "end": "2467760"
  },
  {
    "text": "accesses the the psp emulator through the spi flash interface currently we have an um spi flash emulator which also has a",
    "start": "2467760",
    "end": "2476000"
  },
  {
    "text": "call feature called hyper terminal so you can essentially exchange data between the spi",
    "start": "2476000",
    "end": "2482560"
  },
  {
    "text": "uh master and and the the spi flash emulator itself and that is used as the",
    "start": "2482560",
    "end": "2488480"
  },
  {
    "text": "communication channel because the psp also has access to the x86 device and mmi oh space that also can",
    "start": "2488480",
    "end": "2495520"
  },
  {
    "text": "access the legacy uart so we can also use the legacy ui and serial port to access the",
    "start": "2495520",
    "end": "2501839"
  },
  {
    "text": "stop running on the psp itself",
    "start": "2501839",
    "end": "2509839"
  },
  {
    "text": "what's going on",
    "start": "2532319",
    "end": "2537839"
  },
  {
    "text": "so yeah the torque was uh run 10 minutes",
    "start": "2576839",
    "end": "2582480"
  },
  {
    "text": "too early so it's not your fault that you missed any of it",
    "start": "2582480",
    "end": "2593838"
  },
  {
    "text": "yes we are still using the emulator right now because it's uh much faster so",
    "start": "2599760",
    "end": "2604960"
  },
  {
    "text": "we're using the emulator to get to the uh initialized dram stage we it takes a bit over five minutes and",
    "start": "2604960",
    "end": "2611280"
  },
  {
    "text": "with the serial port we have already almost 45 minutes and so the flash emulator is much faster",
    "start": "2611280",
    "end": "2619520"
  },
  {
    "text": "if you change something then to test it but the the serial port is as stable as",
    "start": "2619520",
    "end": "2626319"
  },
  {
    "text": "the flash emulator because there are apparently no critical timeouts",
    "start": "2626319",
    "end": "2632319"
  },
  {
    "text": "during the initialization stage of the off chipboard loader",
    "start": "2632319",
    "end": "2649839"
  },
  {
    "text": "so for zen 2 um the overall firmware structure is",
    "start": "2652000",
    "end": "2658160"
  },
  {
    "text": "essentially the same it looks like it's an uh the same code base as used for first generation",
    "start": "2658160",
    "end": "2665359"
  },
  {
    "text": "zen but the amd tightened up the security a lot so they're not too many issues",
    "start": "2665359",
    "end": "2674160"
  },
  {
    "text": "for example for for epic systems we did not find any uh exploitable security issues so far um",
    "start": "2674160",
    "end": "2682400"
  },
  {
    "text": "for verizon um it's a bit different there are some issues um but um",
    "start": "2682400",
    "end": "2690160"
  },
  {
    "text": "not that many as we found in the first generation zen cpus overall the uh",
    "start": "2690160",
    "end": "2697359"
  },
  {
    "text": "security measures are much harder much more but much better",
    "start": "2697359",
    "end": "2703119"
  },
  {
    "text": "implemented by amd than for first generation zen cpus but the firmware itself is",
    "start": "2703119",
    "end": "2708400"
  },
  {
    "text": "pretty much the same",
    "start": "2708400",
    "end": "2711279"
  },
  {
    "text": "[Music] okay so because i the the poll close and",
    "start": "2714880",
    "end": "2720560"
  },
  {
    "text": "there were two persons who said that they want to see a demo i hope you can see my screen right",
    "start": "2720560",
    "end": "2726079"
  },
  {
    "text": "now so what we have here is the emulator itself running with all the",
    "start": "2726079",
    "end": "2731200"
  },
  {
    "text": "arguments required so what we will showcase is our exploit taking over the psp in this case the",
    "start": "2731200",
    "end": "2736720"
  },
  {
    "text": "emulated psp and executing the psp stuff below you have the gdp attached to the",
    "start": "2736720",
    "end": "2743760"
  },
  {
    "text": "emulator and on the right hand side you will see the um the trace log which is generated",
    "start": "2743760",
    "end": "2748800"
  },
  {
    "text": "while the uh emulator executes the code and we set a breakpoint to hex 100 so that is",
    "start": "2748800",
    "end": "2755280"
  },
  {
    "text": "the offship bootloader entry point and we will just go with continue",
    "start": "2755280",
    "end": "2760640"
  },
  {
    "text": "and then at some point you will see a lot of output which is a bit double because you",
    "start": "2760640",
    "end": "2766079"
  },
  {
    "text": "need a bit wider a window for that but you see here below we are in our",
    "start": "2766079",
    "end": "2771760"
  },
  {
    "text": "code we can then set a breakpoint to the main for example",
    "start": "2771760",
    "end": "2778400"
  },
  {
    "text": "so and it will execute um it's a bit slow because it's single stepping okay so and now we also",
    "start": "2778480",
    "end": "2786000"
  },
  {
    "text": "have source code debugging we can do next for example we can show register sorry not show",
    "start": "2786000",
    "end": "2793119"
  },
  {
    "text": "info registers um you can see the call stack and then we can evaluate the firmware so",
    "start": "2793119",
    "end": "2800480"
  },
  {
    "text": "with the normal film you of course have no source code access but uh you can step through the disassembly and so on and do",
    "start": "2800480",
    "end": "2806720"
  },
  {
    "text": "all kinds of things like changing registers and changing memory and we also have a quite",
    "start": "2806720",
    "end": "2812160"
  },
  {
    "text": "a few uh special uh commands for the debugger",
    "start": "2812160",
    "end": "2817839"
  },
  {
    "text": "which is accessible through the monitor uh gb command for uh for uh",
    "start": "2817839",
    "end": "2822880"
  },
  {
    "text": "yeah which is specific to the uh psp itself so and if you're on proxy",
    "start": "2822880",
    "end": "2828160"
  },
  {
    "text": "mode you can also have a lot of more a few more commands when you can for example from gdp access the smn network",
    "start": "2828160",
    "end": "2834480"
  },
  {
    "text": "directly or mmi o space or the x86 um address based",
    "start": "2834480",
    "end": "2841280"
  },
  {
    "text": "on the real hardware itself so",
    "start": "2841280",
    "end": "2847039"
  },
  {
    "text": "so maybe um this is what what was also shown in the",
    "start": "2849440",
    "end": "2854480"
  },
  {
    "text": "in the presentation so this is where our exploit kicks in when the uh onshore bootloader tri while the um",
    "start": "2854480",
    "end": "2862240"
  },
  {
    "text": "the entry bootloader passes the header and then tries to copy the offshore buddha into sram and just uses our our own size and then it",
    "start": "2862240",
    "end": "2870720"
  },
  {
    "text": "overwrites the on-chip bootloader stack with our return address which is the entry point to our",
    "start": "2870720",
    "end": "2876960"
  },
  {
    "text": "stop which then takes over the execution on the psp",
    "start": "2876960",
    "end": "2882240"
  },
  {
    "text": "for the proxy mode demo we apparently won't have the time right now because it takes a moment to set up everything",
    "start": "2883760",
    "end": "2901838"
  },
  {
    "text": "[Music]",
    "start": "2964910",
    "end": "2968219"
  },
  {
    "text": "well uh regarding that question if we can take control we could also then just patch the",
    "start": "2975119",
    "end": "2981839"
  },
  {
    "text": "offshore bootloader for example to do whatever we want so it might continue and then we we might be",
    "start": "2981839",
    "end": "2990400"
  },
  {
    "text": "able at least on on epic systems for example to to then uh look be uh in the background and that",
    "start": "2990400",
    "end": "2997280"
  },
  {
    "text": "respond maybe to a special write and dram and then do some stuff if the x86 cpus uh",
    "start": "2997280",
    "end": "3004720"
  },
  {
    "text": "poke that specific address on on risen it's a bit harder because uh the cqrs takes over the sram and we",
    "start": "3004720",
    "end": "3011760"
  },
  {
    "text": "don't have that much knowledge about securis right now",
    "start": "3011760",
    "end": "3018160"
  },
  {
    "text": "yeah but as for security measures as we have now code execution on the psp itself uh in theory there's nothing that",
    "start": "3020000",
    "end": "3027280"
  },
  {
    "text": "can stop us from doing anything we want with the system because the psp is the root of trust for",
    "start": "3027280",
    "end": "3032559"
  },
  {
    "text": "the whole amd cpu so if that is taken over it's game over for any security feature later",
    "start": "3032559",
    "end": "3039359"
  },
  {
    "text": "on",
    "start": "3039359",
    "end": "3041838"
  },
  {
    "text": "so regarding the evil mate attack um yeah you just need to flash the spi",
    "start": "3046240",
    "end": "3052400"
  },
  {
    "text": "image onto onto the on on the main board and then you can get access to the psp",
    "start": "3052400",
    "end": "3057680"
  },
  {
    "text": "at least for the uh first generation zen and um also zen plus systems uh",
    "start": "3057680",
    "end": "3064400"
  },
  {
    "text": "so yeah you could put some backdoor onto the psp",
    "start": "3064400",
    "end": "3072240"
  },
  {
    "text": "[Music]",
    "start": "3075920",
    "end": "3079209"
  },
  {
    "text": "we didn't had a look at the tegra exploit for the nintendo switch actually yeah but thanks for for the hint uh",
    "start": "3081599",
    "end": "3089280"
  },
  {
    "text": "we can we will have a look at this later and then see what kind of similarities they share",
    "start": "3089280",
    "end": "3097838"
  },
  {
    "text": "[Music] similar attacks for amd cpus or in",
    "start": "3100000",
    "end": "3105359"
  },
  {
    "text": "general i mean probably in general there are similar bugs but",
    "start": "3105359",
    "end": "3110480"
  },
  {
    "text": "intel me for example had bucks in the past which allowed third parties to gain code",
    "start": "3110480",
    "end": "3117200"
  },
  {
    "text": "execution on on their embedded me engine and for a lot of smartphone trust zones",
    "start": "3117200",
    "end": "3126319"
  },
  {
    "text": "um which are which are mostly based on arm and there were also a lot of similar",
    "start": "3126319",
    "end": "3132160"
  },
  {
    "text": "things in the past where you could take over the boot process and then put your own code and into the the trusted uh context of the",
    "start": "3132160",
    "end": "3139440"
  },
  {
    "text": "cpu uh the spi flash is actually on the mainboard because the the motherboard",
    "start": "3139440",
    "end": "3146079"
  },
  {
    "text": "vendor has to supply their own uefi image because they tailor towards their own hardware they",
    "start": "3146079",
    "end": "3152880"
  },
  {
    "text": "build on the main board um but the uh the offshore bootloader",
    "start": "3152880",
    "end": "3158960"
  },
  {
    "text": "and the on-chip boot uh so the entrepreneur is baked into the cpu itself so that is always vulnerable if",
    "start": "3158960",
    "end": "3165040"
  },
  {
    "text": "you have an affected cpu and the offshoot booth is supplied by amd through their igesa",
    "start": "3165040",
    "end": "3171200"
  },
  {
    "text": "code blob and is then integrated by the firmware window so if you have a bug there you will",
    "start": "3171200",
    "end": "3177520"
  },
  {
    "text": "probably have a bug in all the other main boards which share the same version of the giza code",
    "start": "3177520",
    "end": "3195839"
  },
  {
    "text": "so so i think our time is almost up um but uh alex and i will be",
    "start": "3204160",
    "end": "3211839"
  },
  {
    "text": "reachable through the black cat system i believe so if you have any further questions feel free to to ask us",
    "start": "3211839",
    "end": "3218480"
  },
  {
    "text": "and if you try out i mean emulator um and find any issues please file a report on github that",
    "start": "3218480",
    "end": "3224319"
  },
  {
    "text": "would really help us in developing this emulator further",
    "start": "3224319",
    "end": "3237839"
  },
  {
    "text": "so the the thing is the spi um has to be what we do is we flash our",
    "start": "3238640",
    "end": "3246160"
  },
  {
    "text": "own code on the spi attached flash chip now if you can protect it put it in the",
    "start": "3246160",
    "end": "3252559"
  },
  {
    "text": "case or something well there is some protection there but it's a physical projection right if you",
    "start": "3252559",
    "end": "3258240"
  },
  {
    "text": "can again access the sbi bus which is used by the cpu then you can",
    "start": "3258240",
    "end": "3264960"
  },
  {
    "text": "mount this uh exploit and there is no rollback prevention for the firmware as",
    "start": "3264960",
    "end": "3270559"
  },
  {
    "text": "of zen and zen plus for the zen 2 also i'm not too sure i don't think so actually",
    "start": "3270559",
    "end": "3276240"
  },
  {
    "text": "so so you can always flash a vulnerable version of the agiza code and then get access on the psp itself",
    "start": "3276240",
    "end": "3293838"
  },
  {
    "text": "okay so thanks again for joining our talk and if you as robert already",
    "start": "3311040",
    "end": "3316799"
  },
  {
    "text": "mentioned if you have any questions uh feel free to contact us through the blackhead",
    "start": "3316799",
    "end": "3321839"
  },
  {
    "text": "website and we will then respond",
    "start": "3321839",
    "end": "3328559"
  }
]