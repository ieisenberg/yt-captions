[
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14480"
  },
  {
    "text": "hello and welcome to our talk breaking network segregation using esoteric commander control channels",
    "start": "14480",
    "end": "20880"
  },
  {
    "text": "a quick introduction my name is james coote i'm a senior consultant at f-secure here in the uk and likewise i'm",
    "start": "20880",
    "end": "26800"
  },
  {
    "text": "matthew champion and i too am a senior consultant we've got quite a packed agenda for you today so we're going to jump into the",
    "start": "26800",
    "end": "32398"
  },
  {
    "text": "technical details quite quickly first we're going to quickly talk about why care about esoteric commander",
    "start": "32399",
    "end": "38160"
  },
  {
    "text": "control i'm going to be talking about this from both the perspective of a blue team and a red team i'm going to introduce you to the lab environment",
    "start": "38160",
    "end": "44719"
  },
  {
    "text": "we've created to contextualize these techniques and also introduce you to c3 which is f-secure's command control",
    "start": "44719",
    "end": "51199"
  },
  {
    "text": "framework and then we'll be going through four channels today vmware using vmware tools",
    "start": "51199",
    "end": "56960"
  },
  {
    "text": "printers or specifically print jobs rdp map drives and then ldap attributes all to transfer archery data between two",
    "start": "56960",
    "end": "63520"
  },
  {
    "text": "hosts we'll be looking at both the operational considerations so as a red team what we're going to be doing and then blue team as well um kind of things",
    "start": "63520",
    "end": "70880"
  },
  {
    "text": "we might be able to detect upon in terms of why we care about this blue team perspective ultimately what we're",
    "start": "70880",
    "end": "75920"
  },
  {
    "text": "trying to do here today is challenge some of those assumptions around network boundaries where we think there are um",
    "start": "75920",
    "end": "81119"
  },
  {
    "text": "some really tightly segregated networks that maybe there are shared services or boundary systems um that could be used",
    "start": "81119",
    "end": "87200"
  },
  {
    "text": "to pivot through those networks and achieve as we'll see here peer-to-peer and c2 communication and for a red team",
    "start": "87200",
    "end": "93520"
  },
  {
    "text": "obviously we want to keep our tradecraft up to date we're going to bypass this network segregation and ultimately",
    "start": "93520",
    "end": "98560"
  },
  {
    "text": "achieve our objective whilst evading detection so very briefly then the lab environment",
    "start": "98560",
    "end": "104799"
  },
  {
    "text": "we've got a single forest mwr.com and a single child within that forest uk.mwl.com",
    "start": "104799",
    "end": "110399"
  },
  {
    "text": "we've got two workstations within that domain workstation one workstation two and",
    "start": "110399",
    "end": "115759"
  },
  {
    "text": "these are virtualized assets on an esxi server that's managed by vcenter and",
    "start": "115759",
    "end": "121119"
  },
  {
    "text": "this is joined to this the uk.underwear.com domain and relies on that for authentication and",
    "start": "121119",
    "end": "126840"
  },
  {
    "text": "authorization to make this a bit more realistic we're going to be using c3s slack external c2 channel um so we're",
    "start": "126840",
    "end": "134239"
  },
  {
    "text": "going to have a foothold on workstation one it's going to be talking via slack back to the c3 infrastructure hosted on",
    "start": "134239",
    "end": "140400"
  },
  {
    "text": "aws and connected to c3 is going to be a cobalt strike team server so using",
    "start": "140400",
    "end": "146160"
  },
  {
    "text": "cobalt strikes external t2 and then from a detection standpoint we're going to be using a few things so",
    "start": "146160",
    "end": "151840"
  },
  {
    "text": "firstly sysmon and that's going to be using the swift on security configuration in the link at the bottom",
    "start": "151840",
    "end": "157040"
  },
  {
    "text": "and we're also going to be using uh ruben boone and silk etw to uh to get some additional telemetry from our endpoints and then all of that is going",
    "start": "157040",
    "end": "163840"
  },
  {
    "text": "to make its way into helk roberto rodriguez the elastic and cabana instance there so we can look through",
    "start": "163840",
    "end": "170560"
  },
  {
    "text": "and query the data that we're collecting there so very briefly then c3 is f-secure's",
    "start": "170560",
    "end": "176800"
  },
  {
    "text": "command-control framework it supports integration with kerbal strike beacons and covenant grunts and",
    "start": "176800",
    "end": "183040"
  },
  {
    "text": "allows you to stage those respectively through your",
    "start": "183040",
    "end": "188640"
  },
  {
    "text": "the relays so c3 operates on some arbitrary sort of c2 medium so this externally could be",
    "start": "188640",
    "end": "195599"
  },
  {
    "text": "slack it could be dropbox etcetera internally it could be any of the channels that we're going to describe",
    "start": "195599",
    "end": "200959"
  },
  {
    "text": "today in c3 land you have this concept of relays so these are the payloads",
    "start": "200959",
    "end": "206400"
  },
  {
    "text": "essentially and this is what communicates from the target to the c2 medium right to pack it to this this medium",
    "start": "206400",
    "end": "214239"
  },
  {
    "text": "c3 will then pick that up interpret it write a response back to the medium where the relay will then pick it up",
    "start": "214239",
    "end": "220560"
  },
  {
    "text": "in the scenario where you've commanded your relay to stage a beacon you'll then get the beacon appear in your",
    "start": "220560",
    "end": "227200"
  },
  {
    "text": "cobblestrike team server from the target machine we'll quickly grasp as we go through",
    "start": "227200",
    "end": "233760"
  },
  {
    "text": "these techniques and what we've experienced like operationally when we when we've been doing our red teams",
    "start": "233760",
    "end": "239519"
  },
  {
    "text": "etcetera if you can read write and delete to an arbitrary service the chances are you",
    "start": "239519",
    "end": "244720"
  },
  {
    "text": "can leverage it for command and control there's a few operational considerations like api rate limiting etc but largely",
    "start": "244720",
    "end": "252159"
  },
  {
    "text": "read write and delete that's enough for commander control so let's dive into our first technique",
    "start": "252159",
    "end": "257759"
  },
  {
    "text": "so this is vmware so this is how we're using vcenter's api to upload download",
    "start": "257759",
    "end": "263759"
  },
  {
    "text": "files and execute arbitrary commands inside a virtual machine managed by vcenter when we have no network",
    "start": "263759",
    "end": "270240"
  },
  {
    "text": "connectivity that target machine or indeed that target machine doesn't even necessarily need to have any network",
    "start": "270240",
    "end": "276800"
  },
  {
    "text": "connectivity at all or even a network adapter so the scenarios workstation one has no",
    "start": "276800",
    "end": "283120"
  },
  {
    "text": "direct network connectivity to workstation two however we've been able to compromise",
    "start": "283120",
    "end": "288320"
  },
  {
    "text": "legitimate credentials to the vcenter server where workstation two",
    "start": "288320",
    "end": "293919"
  },
  {
    "text": "is a virtualized it's a virtual machine managed by that vcenter there's a couple of limitations before",
    "start": "293919",
    "end": "300320"
  },
  {
    "text": "we jump into um you know how to actually use this in practice you need to have valid credentials and a certain number",
    "start": "300320",
    "end": "306400"
  },
  {
    "text": "of guest operations privileges within vcenter to interact with the guest os",
    "start": "306400",
    "end": "311680"
  },
  {
    "text": "you also need to have valid credentials unfortunately for the target vm so they don't necessarily need to be an",
    "start": "311680",
    "end": "317280"
  },
  {
    "text": "administrator but any account no if you're sitting physically in front of that machine you could you could log in so this can",
    "start": "317280",
    "end": "323840"
  },
  {
    "text": "be local or domain credentials and the tiger vm also needs vmware tools because this is how the upload and downloaded",
    "start": "323840",
    "end": "330320"
  },
  {
    "text": "files and the arbitrary code execution actually happens the data flow relies not just for the",
    "start": "330320",
    "end": "337520"
  },
  {
    "text": "vmware for actually most of the channels we're going to talk about on c3's unc share file channel so at its core this",
    "start": "337520",
    "end": "344880"
  },
  {
    "text": "involves writing files to a shared network drive so both workstation 1",
    "start": "344880",
    "end": "350160"
  },
  {
    "text": "workstation 2 uses the same arbitrary network share to read and write c3",
    "start": "350160",
    "end": "356080"
  },
  {
    "text": "packets we're going to be using in a slightly unintended scenario",
    "start": "356080",
    "end": "361199"
  },
  {
    "text": "where workstation one workstation two will be reading and writing these c3 files to its own local directory so",
    "start": "361199",
    "end": "368880"
  },
  {
    "text": "we're choosing cuse as public but it could be any arbitrary file on that file system any directory rather where you've",
    "start": "368880",
    "end": "374240"
  },
  {
    "text": "got read and write privileges and we're going to use a tool that i've written called sharpsphere to sit in the",
    "start": "374240",
    "end": "380240"
  },
  {
    "text": "middle and manually transfer c3 packets from workstation 1 to workstation 2 and",
    "start": "380240",
    "end": "386479"
  },
  {
    "text": "vice versa so in practice what this looks like you execute your relay and workstation 2",
    "start": "386479",
    "end": "393039"
  },
  {
    "text": "that's going to write a packet to its own c users public sharp 2 is going to grab that move it across the workstation",
    "start": "393039",
    "end": "398720"
  },
  {
    "text": "1 where it's going to get interpreted by c3 response generated and written to workstation 1. see use the public",
    "start": "398720",
    "end": "405600"
  },
  {
    "text": "sharpshow is then going to take that file move it across to workstation 2 where it's going to be interpreted on",
    "start": "405600",
    "end": "412240"
  },
  {
    "text": "workstation 2. so the rough workflow is you find a vcenter great channel to see through and download and relay for that",
    "start": "412240",
    "end": "417680"
  },
  {
    "text": "channel upload it to target so this is workstation 2. so you need sharp sphere for this",
    "start": "417680",
    "end": "423599"
  },
  {
    "text": "execute the relay again you need sharp sphere to execute the arbitrary commands within workstation 2 and then lastly you",
    "start": "423599",
    "end": "430000"
  },
  {
    "text": "use sharp sphere's c2 functionality to establish that command control channel",
    "start": "430000",
    "end": "435919"
  },
  {
    "text": "just a quick note to find the vcenter you can obviously use any internal wiki pages sharepoint asset lists all of that",
    "start": "435919",
    "end": "443440"
  },
  {
    "text": "in our experience we've also had some success with ldap crews so if they're using vcenter appliance operating system",
    "start": "443440",
    "end": "449919"
  },
  {
    "text": "service pack would be unknown so you can use that to filter results and also the name can be vcenter virtual center vcsa",
    "start": "449919",
    "end": "457840"
  },
  {
    "text": "variations on the above so you know we have some success with that the first thing you want to do is create",
    "start": "457840",
    "end": "463919"
  },
  {
    "text": "a channel i appreciate this is probably the first time many of you have seen c3 which is on the right hand side so this",
    "start": "463919",
    "end": "469680"
  },
  {
    "text": "is what the c3 web ui looks like and this is what's hosted in your attacker controlled infrastructure and you'll see",
    "start": "469680",
    "end": "475919"
  },
  {
    "text": "our existing slack relay with an associated cobble strike beacon hanging",
    "start": "475919",
    "end": "481440"
  },
  {
    "text": "off the the side of that relay so what we're going to do is create this unc share file and we're going to tell",
    "start": "481440",
    "end": "488879"
  },
  {
    "text": "it so this is workstation one this is what executed on workstation one so we're going to tell it to use c uses",
    "start": "488879",
    "end": "494879"
  },
  {
    "text": "public as its uh arbitrary directory to read and write data from make sure you take a note of",
    "start": "494879",
    "end": "500879"
  },
  {
    "text": "the input and output ideas you'll need that for a later step",
    "start": "500879",
    "end": "506120"
  },
  {
    "text": "what we then want to do is use the sharp sphere aggressor script to list",
    "start": "506240",
    "end": "512640"
  },
  {
    "text": "the virtual machines so the vcenter api so you know you found your vcenter you're going to use the",
    "start": "512640",
    "end": "519518"
  },
  {
    "text": "vcenter url to query the api to retrieve a list of all of the virtual machines that that",
    "start": "519519",
    "end": "526080"
  },
  {
    "text": "vcenter manages so we're hoping in these responses to see workstation 2 as a",
    "start": "526080",
    "end": "531839"
  },
  {
    "text": "managed virtual asset you'll see here as well i've just done a quick check-in because of the way c3 works and the way",
    "start": "531839",
    "end": "538399"
  },
  {
    "text": "the beacon receives its output sometimes you just need to do a quick check-in to get the full results",
    "start": "538399",
    "end": "543680"
  },
  {
    "text": "so you'll see there workstation two so just make a note of this ip address because this is the machine that we're",
    "start": "543680",
    "end": "549360"
  },
  {
    "text": "actually going to target for subsequent steps so once you've got your relay you've",
    "start": "549360",
    "end": "556080"
  },
  {
    "text": "generated your relay executable we we now need to upload that to the target",
    "start": "556080",
    "end": "561279"
  },
  {
    "text": "host so again you're going to use sharpsphere and and sharps is just using the vsphere apis the legitimate",
    "start": "561279",
    "end": "568399"
  },
  {
    "text": "functionality within the api to upload this file so source file upload destination",
    "start": "568399",
    "end": "574320"
  },
  {
    "text": "pretty self-explanatory the guest username password so these are credentials that have legitimate access",
    "start": "574320",
    "end": "579920"
  },
  {
    "text": "to workstation 2. so these are the local or domain credentials the source file is respective to",
    "start": "579920",
    "end": "586640"
  },
  {
    "text": "workstation 1 and the destination file is where you want to place that on workstation 2. so for simplicity's sake",
    "start": "586640",
    "end": "593120"
  },
  {
    "text": "we just put it all um in c user public um so that we know where to reference it",
    "start": "593120",
    "end": "599680"
  },
  {
    "text": "from later and so all being well you'll see sharpsville telling you this uploaded",
    "start": "599680",
    "end": "604800"
  },
  {
    "text": "the file to a certain destination so just worth making a note of where it's uploaded to so that in this next step",
    "start": "604800",
    "end": "611360"
  },
  {
    "text": "where we execute the relay you know what you're trying to execute so using the",
    "start": "611360",
    "end": "616399"
  },
  {
    "text": "aggressive script again fill in all the relevant details and the command",
    "start": "616399",
    "end": "622320"
  },
  {
    "text": "is the relay executable that you just uploaded this is going to start the relay on workstation 2 and this relay is",
    "start": "622320",
    "end": "629200"
  },
  {
    "text": "going to be continually polling sea uses public for",
    "start": "629200",
    "end": "634320"
  },
  {
    "text": "files associated with c3 what's worth pointing out is",
    "start": "634320",
    "end": "640399"
  },
  {
    "text": "that's not going to get anywhere at the moment because it's just referencing its local directory and nothing else can",
    "start": "640399",
    "end": "645680"
  },
  {
    "text": "talk to it so we need something in the middle we need sharp sphere to actually transfer those files across",
    "start": "645680",
    "end": "652880"
  },
  {
    "text": "so just to note in the beacon output you'll see that the process has started and has returned you the period of the",
    "start": "652880",
    "end": "658800"
  },
  {
    "text": "running process so you're reasonably confident that relay is now running on workstation two",
    "start": "658800",
    "end": "665600"
  },
  {
    "text": "the last step then is to establish the commander control so again with sharp sphere you want to do c2",
    "start": "665680",
    "end": "673760"
  },
  {
    "text": "fill in the relevant details put in the input id and the output id that you made a note of before the local file",
    "start": "673760",
    "end": "680160"
  },
  {
    "text": "directory and the remote the guest file directory is see uses public so this is",
    "start": "680160",
    "end": "686160"
  },
  {
    "text": "what c3 is using on workstation one and workstation two respectively as its uh",
    "start": "686160",
    "end": "692320"
  },
  {
    "text": "local directory to read and write c3 packets too all being well that sharps will just",
    "start": "692320",
    "end": "698399"
  },
  {
    "text": "stay in the background as a as a running process to transfer those files manually and you'll",
    "start": "698399",
    "end": "705040"
  },
  {
    "text": "see that it's now checked in within c3 so at this point commander controls established",
    "start": "705040",
    "end": "710880"
  },
  {
    "text": "from an operator's perspective you know it's probably not as usable as it could be at this point so we're just going to",
    "start": "710880",
    "end": "716000"
  },
  {
    "text": "stage a beacon through the relay that's running on workstation 2.",
    "start": "716000",
    "end": "722240"
  },
  {
    "text": "sharpshooter is still running in the background so workstation 1 is going to put its files in to see you as a public",
    "start": "722240",
    "end": "728160"
  },
  {
    "text": "sharksville is going to copy that across workstations who's going to receive it it's going to keep doing that and you can see the beacon is now checked in",
    "start": "728160",
    "end": "736320"
  },
  {
    "text": "so from an operator's perspective this is quite a seamless experience and you can use the",
    "start": "736320",
    "end": "742480"
  },
  {
    "text": "the beacon as you would normally so from a prevention perspective before",
    "start": "742480",
    "end": "747519"
  },
  {
    "text": "we move on detection restricted network access to vcenter to your known admin host so if you've got",
    "start": "747519",
    "end": "752880"
  },
  {
    "text": "privileged access workstations limit access to any of those machines vcenter supports quite granular",
    "start": "752880",
    "end": "758880"
  },
  {
    "text": "permission levels so implement the principle of least privilege there's been some research in the link",
    "start": "758880",
    "end": "764160"
  },
  {
    "text": "below about disabling specific api methods you know if you still need access to the api legitimately perhaps",
    "start": "764160",
    "end": "769600"
  },
  {
    "text": "just disable the ones that you don't need and also when you come to install vmware tools uh perhaps remove the",
    "start": "769600",
    "end": "775519"
  },
  {
    "text": "non-essential parts of vmware tools that would allow this sort of",
    "start": "775519",
    "end": "780639"
  },
  {
    "text": "functionality to take place awesome thanks so detection then how can",
    "start": "780639",
    "end": "787600"
  },
  {
    "text": "we see this it's quite a convoluted channel i think end-to-end so let's take a look at how we might see this taking place there's a few different areas we",
    "start": "787600",
    "end": "793600"
  },
  {
    "text": "can look at as we go through this not just this one but the other channels as well we're going to be looking at both a tool",
    "start": "793600",
    "end": "798880"
  },
  {
    "text": "specific detection and then more broadly around the technique as well to kind of give a bit of a balance there so tooling",
    "start": "798880",
    "end": "806000"
  },
  {
    "text": "wise we're looking at obviously.net post exploitation tooling sharpsphere running in memory has to run continuously to",
    "start": "806000",
    "end": "812880"
  },
  {
    "text": "shuttle those files and kind of synchronize the two directions as we saw and we can use a yara rule such as that",
    "start": "812880",
    "end": "818560"
  },
  {
    "text": "on the right hand side and the strings that are present within short sphere to identify it running within memory",
    "start": "818560",
    "end": "824079"
  },
  {
    "text": "we can also make use of etw there so you can see the microsoft runtime provider and then quite clearly",
    "start": "824079",
    "end": "830399"
  },
  {
    "text": "we can see run dll32 quite anonymously um loading the shout out program into memory there and there's just a snippet",
    "start": "830399",
    "end": "836720"
  },
  {
    "text": "um to use with silk utw as i mentioned um to facilitate this etw logging",
    "start": "836720",
    "end": "843519"
  },
  {
    "text": "c3 usage there's a couple of things here both as a binary and in memory firstly the the lower um yara rule you can see",
    "start": "843519",
    "end": "849760"
  },
  {
    "text": "there for identifying c3 binaries including the dlls that kind of make the magic happen as it were and on the right",
    "start": "849760",
    "end": "856079"
  },
  {
    "text": "hand side we can see another yara rule that detects the specific strings that are part of the reflected dll loading",
    "start": "856079",
    "end": "861920"
  },
  {
    "text": "that c3 uses for its shell code so you can also detect that in memory as well",
    "start": "861920",
    "end": "867600"
  },
  {
    "text": "network connections are probably one of the most anomalous features here aside from the vcenter apis so here we can see",
    "start": "867600",
    "end": "873040"
  },
  {
    "text": "our net sharp sphere here is loaded within run dll32 and that is making a series of",
    "start": "873040",
    "end": "879680"
  },
  {
    "text": "network connections to the known ip address of a vcenter server on 443 so we can see that as well",
    "start": "879680",
    "end": "885680"
  },
  {
    "text": "obviously with the beacon running within our relay that is spawning our what is called a spawn two process within cobalt",
    "start": "885680",
    "end": "891680"
  },
  {
    "text": "strike and that is run dll and that's making those connections process creations then for the execution",
    "start": "891680",
    "end": "898320"
  },
  {
    "text": "step there so whenever we execute a command through sharpsphere like our relay or any other command",
    "start": "898320",
    "end": "903839"
  },
  {
    "text": "we're using a very specific command line argument and it's all spawning from vm tools d so you can see within the code",
    "start": "903839",
    "end": "909199"
  },
  {
    "text": "there at the bottom um we've got a hard-coded path to see users public and a randomized file name so we end up with",
    "start": "909199",
    "end": "915120"
  },
  {
    "text": "something along the lines of as you can see there cmd c the command we're running so who am i and then it will be",
    "start": "915120",
    "end": "920480"
  },
  {
    "text": "put into public and then cleared up afterwards kind of similar to something like impact it's wmi exec if you're familiar with that",
    "start": "920480",
    "end": "926720"
  },
  {
    "text": "where we have no um output required so example when james is running his relay um we can see the exact same thing here",
    "start": "926720",
    "end": "933360"
  },
  {
    "text": "the cmd slash c and then the command itself but then we won't have any file rights as a result of that but still any",
    "start": "933360",
    "end": "939360"
  },
  {
    "text": "anomalous and child processes of vmtools d dot actually is gonna be worth investigating",
    "start": "939360",
    "end": "945040"
  },
  {
    "text": "and then the api usage logs if we turn our attention to the actual code for sharpsville we can see",
    "start": "945040",
    "end": "950480"
  },
  {
    "text": "the execution of commands is achieved through starting a program on the host listing process ids until the process id",
    "start": "950480",
    "end": "957120"
  },
  {
    "text": "is is is removed i.e the process has finished executing we download the output file we put in to",
    "start": "957120",
    "end": "963199"
  },
  {
    "text": "see users public and then we delete the file to clean up afterwards looking within the at the api logs on",
    "start": "963199",
    "end": "968480"
  },
  {
    "text": "the vcenter server so this is vpxd.log you can see quite clearly the initial",
    "start": "968480",
    "end": "973519"
  },
  {
    "text": "login and we can find our vm by ip as we saw james do and we authenticate to our guest and",
    "start": "973519",
    "end": "979920"
  },
  {
    "text": "start our program but be that relay or who am i or otherwise and then we list our processes repeatedly until that that",
    "start": "979920",
    "end": "986000"
  },
  {
    "text": "we've seen what we need in our process is terminated and then obviously we initiate the file transfer to retrieve",
    "start": "986000",
    "end": "991600"
  },
  {
    "text": "the output and then delete it afterwards what you'll notice is there's no indication here of who is performing",
    "start": "991600",
    "end": "996959"
  },
  {
    "text": "this activity nor from where what we can do is take the gui there that's provided if you look through each",
    "start": "996959",
    "end": "1002560"
  },
  {
    "text": "line of that api log you'll see the same guide present for all of them that's essentially a",
    "start": "1002560",
    "end": "1008079"
  },
  {
    "text": "session id and if we look into another log on the vcenter server with vpxt profiler.log you can see that that",
    "start": "1008079",
    "end": "1014160"
  },
  {
    "text": "corresponds um to the administrator account there the local administrator account and it's coming from the dot 200",
    "start": "1014160",
    "end": "1020079"
  },
  {
    "text": "address which is our workstation one c2 very similar stories a different set",
    "start": "1020079",
    "end": "1026160"
  },
  {
    "text": "of ips here so you can see the initial login find ip but then list files is the api call that's effectively our",
    "start": "1026160",
    "end": "1032000"
  },
  {
    "text": "beaconing functionality that sharpsphere reaching out to the vcenter api to say what's in this directory is there",
    "start": "1032000",
    "end": "1037360"
  },
  {
    "text": "anything i need to start shuttling back and forth um to facilitate c2 and then the file rights themselves that",
    "start": "1037360",
    "end": "1044079"
  },
  {
    "text": "are the unc share file in action so we can see firstly our workstation one is writing files to a given location i'm",
    "start": "1044079",
    "end": "1050160"
  },
  {
    "text": "using downloads folder here but obviously public is just as relevant workstation 2 we see vm tools is the one",
    "start": "1050160",
    "end": "1057039"
  },
  {
    "text": "that's actually producing those files on the workstation 2 endpoint we can then see our other relay on",
    "start": "1057039",
    "end": "1062240"
  },
  {
    "text": "workstation 2 is writing in response to those files and then we can see on workstation one",
    "start": "1062240",
    "end": "1068000"
  },
  {
    "text": "our run dll32 which of course is is sharp sphere in memory and is then",
    "start": "1068000",
    "end": "1073200"
  },
  {
    "text": "producing files as well back from the workstation two back to the originating source",
    "start": "1073200",
    "end": "1079200"
  },
  {
    "text": "and then finally windows event logs obviously this api is performing a series of calls",
    "start": "1079200",
    "end": "1084480"
  },
  {
    "text": "to facilitate c2 and there's no stateful connection here so every time we make an api call",
    "start": "1084480",
    "end": "1090480"
  },
  {
    "text": "we're logging in again essentially we're authenticating authenticating again to the workstation so here you can see over",
    "start": "1090480",
    "end": "1096400"
  },
  {
    "text": "a period of um kind of maybe a second there's four or five different instances",
    "start": "1096400",
    "end": "1101919"
  },
  {
    "text": "of authentication so our four six two fours and our four six five ratios we connect with a batch logon type",
    "start": "1101919",
    "end": "1107280"
  },
  {
    "text": "interestingly at the bottom if you don't have the ability to log on with a batch log on type you will also see a 4625 as",
    "start": "1107280",
    "end": "1112799"
  },
  {
    "text": "it tries to do that initial connection so worth bearing in mind the volume of log on events that you're going to produce",
    "start": "1112799",
    "end": "1118320"
  },
  {
    "text": "now onto printers great thank you so that's the biggest one biggest channel out the way",
    "start": "1118320",
    "end": "1123520"
  },
  {
    "text": "we're now going to move on to number two of four and this is using arbitrary network printers for command control so",
    "start": "1123520",
    "end": "1130000"
  },
  {
    "text": "a lot simpler conceptually as well similar scenario workstation one no network connectivity to workstation 2",
    "start": "1130000",
    "end": "1136480"
  },
  {
    "text": "but it does however both have network connectivity to a shared printer so mx470",
    "start": "1136480",
    "end": "1142720"
  },
  {
    "text": "in this case and we can use print jobs to transfer data between the two",
    "start": "1142720",
    "end": "1148240"
  },
  {
    "text": "a couple of limitations on this one as well both sides need network access to the same print server so smb",
    "start": "1148240",
    "end": "1155280"
  },
  {
    "text": "also ideally they both be executing under the context of the same user account on both sides or at least one of",
    "start": "1155280",
    "end": "1161360"
  },
  {
    "text": "them needs to be an administrator this is so that it can delete print jobs that were started by another user",
    "start": "1161360",
    "end": "1167679"
  },
  {
    "text": "you'll see in the ui unlimited print jobs are supported operationally for us this has been slightly less stable so",
    "start": "1167679",
    "end": "1173440"
  },
  {
    "text": "i'd suggest limiting print jobs to one slightly less throughput but much more stable",
    "start": "1173440",
    "end": "1179200"
  },
  {
    "text": "each print job as well because we're storing the the data in the print job name uh can support a transfer size of",
    "start": "1179200",
    "end": "1185120"
  },
  {
    "text": "one megabyte so it's not huge but operationally it's still enough to",
    "start": "1185120",
    "end": "1191280"
  },
  {
    "text": "to perform what you need to do unless massive data excel is necessary",
    "start": "1191280",
    "end": "1196799"
  },
  {
    "text": "so the workflow is is pretty basic workstation one has direct network connectivity to mx470 and it's going to",
    "start": "1196799",
    "end": "1203919"
  },
  {
    "text": "read and write packets via print jobs and workstation 2 is going to be doing the same thing",
    "start": "1203919",
    "end": "1211760"
  },
  {
    "text": "first of all we need to find a target printer so you can use ldap here",
    "start": "1211760",
    "end": "1216960"
  },
  {
    "text": "you can also use powershell to query a remote machine or if you want to find a princess for the machine for instance workstation one",
    "start": "1216960",
    "end": "1223600"
  },
  {
    "text": "you can use wmic as well to to list the the local printers already mapped to that machine once you've found that",
    "start": "1223600",
    "end": "1229840"
  },
  {
    "text": "printer the next step is to create the channel within c3 so there's a particular channel type called channel",
    "start": "1229840",
    "end": "1235760"
  },
  {
    "text": "print you can leave everything default except printer address which is the printer",
    "start": "1235760",
    "end": "1241120"
  },
  {
    "text": "that you identified in the previous step and the outbound job limit print number of print jobs to create so default zero",
    "start": "1241120",
    "end": "1248320"
  },
  {
    "text": "i'd suggest setting it to one just for stability",
    "start": "1248320",
    "end": "1253360"
  },
  {
    "text": "you then need to execute that relay so we're assuming for this scenario that you've got some out of band execution",
    "start": "1253600",
    "end": "1259840"
  },
  {
    "text": "path and for us we've got remote desktop up in the top right hand side so this is the workstation two so we can",
    "start": "1259840",
    "end": "1266400"
  },
  {
    "text": "execute the reload and workstation two and you'll see in the bottom left hand side the print queue so you'll see jobs",
    "start": "1266400",
    "end": "1272080"
  },
  {
    "text": "being created in a pause state and then deleted as they're processed",
    "start": "1272080",
    "end": "1277679"
  },
  {
    "text": "and you'll see this continue happen as workstation 1 and workstation 2 transfer",
    "start": "1277679",
    "end": "1282720"
  },
  {
    "text": "data and then you'll see your relay check in so at this point command and control has been established despite",
    "start": "1282720",
    "end": "1288799"
  },
  {
    "text": "workstation 1 and workstation 2 having no direct network connectivity with each other",
    "start": "1288799",
    "end": "1294159"
  },
  {
    "text": "we can then stage a beacon through this and because a beacon is typically larger than one megabyte you'll see",
    "start": "1294159",
    "end": "1300799"
  },
  {
    "text": "in the print queue in the bottom left-hand side multiple print jobs being created so print job we create in a pause state be",
    "start": "1300799",
    "end": "1307600"
  },
  {
    "text": "interpreted then deleted and then another one will be created as well and you'll see actually what this looks",
    "start": "1307600",
    "end": "1314080"
  },
  {
    "text": "like in practice because we're storing in the document name the way c3 transfers its data is it will encrypt",
    "start": "1314080",
    "end": "1319919"
  },
  {
    "text": "the packet and then base64 encode it and that's what you're seeing in the document name",
    "start": "1319919",
    "end": "1325679"
  },
  {
    "text": "and there you can see the beacon checking in and we can begin to use that operationally as we would normally with",
    "start": "1325679",
    "end": "1331919"
  },
  {
    "text": "any other beacon type awesome thank you so detection opportunities so there's a",
    "start": "1331919",
    "end": "1338799"
  },
  {
    "text": "little bit a little bit different here so there's less of that obviously the net and post exploitation totally needed",
    "start": "1338799",
    "end": "1343840"
  },
  {
    "text": "for this obviously we're just using our relays directly to talk to the printer but we still have a series of things that we can look at here first thing to",
    "start": "1343840",
    "end": "1350000"
  },
  {
    "text": "bear in mind actually is quite an interesting one is the endpoint ui the way you're interacting with it so if you're running in the context of a",
    "start": "1350000",
    "end": "1356159"
  },
  {
    "text": "user's session and you interact with a printer that has low ink low paper there's a jam the printer's offline",
    "start": "1356159",
    "end": "1361679"
  },
  {
    "text": "something like that typically those areas will be presented to the user as a balloon notification as",
    "start": "1361679",
    "end": "1367360"
  },
  {
    "text": "you can see there so if they're not doing any print jobs it might be something that raises suspicion that could potentially burn",
    "start": "1367360",
    "end": "1373200"
  },
  {
    "text": "the whole operation there you can disable those notifications with some of the registry entries there as i've",
    "start": "1373200",
    "end": "1378240"
  },
  {
    "text": "listed but just worth bearing in mind of course the the operational considerations that they could have as well",
    "start": "1378240",
    "end": "1384320"
  },
  {
    "text": "i think the best place to see this taking place as a defender to alert upon it is using our print server event log",
    "start": "1384320",
    "end": "1389440"
  },
  {
    "text": "so here you can see on the left hand side we can enable um the job name being present in the event log and on the",
    "start": "1389440",
    "end": "1395120"
  },
  {
    "text": "right hand side and just zoom in a bit you can see that very long base64 encoded file name",
    "start": "1395120",
    "end": "1400799"
  },
  {
    "text": "which is of course the data itself and we can see that in a series of 308 which is queuing the job and the 310 which is",
    "start": "1400799",
    "end": "1406240"
  },
  {
    "text": "the job being deleted in quick succession as that file transfer or the data transfer takes place",
    "start": "1406240",
    "end": "1411679"
  },
  {
    "text": "similarly module loads here so to facilitate the interaction with the printers as a series of dlls we're using",
    "start": "1411679",
    "end": "1418720"
  },
  {
    "text": "most notably every time we're queuing adding a job um the print workflow proxy dll and the print folder dll are both",
    "start": "1418720",
    "end": "1425039"
  },
  {
    "text": "being loaded each time one thing to note actually on the top right you can see me attempting to print",
    "start": "1425039",
    "end": "1430480"
  },
  {
    "text": "through microsoft word interactively with the ui and the dialog boxes that come up when you're using this programmatically",
    "start": "1430480",
    "end": "1437200"
  },
  {
    "text": "there's no ui it's all done through the relay and its apis you won't see that print ui dlr coming up so it's probably",
    "start": "1437200",
    "end": "1442720"
  },
  {
    "text": "worth investigating other instances of that programmatic printing taking place",
    "start": "1442720",
    "end": "1448559"
  },
  {
    "text": "network connections as we've already seen there has to be some kind of beaconing taking place to facilitate",
    "start": "1448559",
    "end": "1453679"
  },
  {
    "text": "this connection how do i know when there's jobs for me and read them and then subsequently obviously reply as a response and this smb connection here to",
    "start": "1453679",
    "end": "1460720"
  },
  {
    "text": "the spool service name pipe using the open printer x api call is what achieves that and that",
    "start": "1460720",
    "end": "1466000"
  },
  {
    "text": "is our beaconing behavior again and again over time and to check if there's any jobs destined for our relay",
    "start": "1466000",
    "end": "1471440"
  },
  {
    "text": "you go off the deep end and start looking at rpc and there's a couple of rpc methods here the enum jobs and the",
    "start": "1471440",
    "end": "1476559"
  },
  {
    "text": "ad job which is optin on 4 and 24 respectively and if we start logging this we do get some as you might expect well",
    "start": "1476559",
    "end": "1483679"
  },
  {
    "text": "high volume telemetry and also some really good granularity here which allows us to see the process id so which",
    "start": "1483679",
    "end": "1489440"
  },
  {
    "text": "process is actually initiating these jobs and we can see them interacting with the print service there using the",
    "start": "1489440",
    "end": "1494720"
  },
  {
    "text": "the interface uid and then lastly we can see the op number to say it's this process that's interacting with the ms",
    "start": "1494720",
    "end": "1500960"
  },
  {
    "text": "rprn interface and to add print jobs and delete and obviously list as well",
    "start": "1500960",
    "end": "1507279"
  },
  {
    "text": "cool rdp great so on to our third of four channels so this is using remote desktop",
    "start": "1507279",
    "end": "1514240"
  },
  {
    "text": "map drives for commander control so conceptually this is even even simpler than the previous two",
    "start": "1514240",
    "end": "1520559"
  },
  {
    "text": "workstation one has only inbound three three at nine so remote desktop access to workstation two there's no other",
    "start": "1520559",
    "end": "1526720"
  },
  {
    "text": "network connectivity so we need to use some functionality of remote desktop in order for command control to take place",
    "start": "1526720",
    "end": "1534559"
  },
  {
    "text": "a couple of limitations here you obviously need map drives to be enabled so by default it is but we have",
    "start": "1534559",
    "end": "1540960"
  },
  {
    "text": "worked on some restrictive environments where it's explicitly disabled by group policy so worth checking that",
    "start": "1540960",
    "end": "1546880"
  },
  {
    "text": "and also for this example in the scenario and most likely operationally you'll be using sharp rdp",
    "start": "1546880",
    "end": "1553840"
  },
  {
    "text": "to do everything through a beacon if you are using sharp rdp it's got a couple of limitations so the target's keyboard",
    "start": "1553840",
    "end": "1559840"
  },
  {
    "text": "must be set to us english and also there can't be any special characters in the command you're executing so the the",
    "start": "1559840",
    "end": "1566000"
  },
  {
    "text": "default relay name has underscores so you just need to change your relay name if you're doing this hands-on keyboard",
    "start": "1566000",
    "end": "1571360"
  },
  {
    "text": "like manually through a remote desktop session these restrictions don't apply but it's worth bearing in mind as",
    "start": "1571360",
    "end": "1577039"
  },
  {
    "text": "chances are you will be using sharp idp the data flow is quite simple so",
    "start": "1577039",
    "end": "1582159"
  },
  {
    "text": "workstation one will be using uh c users public so it's again it's using the unc",
    "start": "1582159",
    "end": "1588000"
  },
  {
    "text": "share file channel that we talked about before so it's going to be reading and writing packets to see users public",
    "start": "1588000",
    "end": "1594240"
  },
  {
    "text": "workstation 2 is also going to be reading writing to see users public except from the perspective of",
    "start": "1594240",
    "end": "1599520"
  },
  {
    "text": "workstation 2 the network path is slightly different so it's the terminal of services client backslash c backslash",
    "start": "1599520",
    "end": "1606240"
  },
  {
    "text": "users access to public so it's reading right in the same directory but just bear in mind that the",
    "start": "1606240",
    "end": "1612400"
  },
  {
    "text": "the target directory is slightly different when you're generating the relay",
    "start": "1612400",
    "end": "1619278"
  },
  {
    "text": "so first thing to do is create the channel so you can see here we're using the book standard unc share file and",
    "start": "1619840",
    "end": "1626080"
  },
  {
    "text": "we're specifying c users public so workstation one is going to use that directory we'll need to download the",
    "start": "1626080",
    "end": "1631360"
  },
  {
    "text": "relay and we can keep everything the same except the target directory so from",
    "start": "1631360",
    "end": "1637279"
  },
  {
    "text": "the perspective of workstation 2 this is again the the ts client see users public so it's going to use the map drive that",
    "start": "1637279",
    "end": "1643919"
  },
  {
    "text": "sharp idp is going to create to to expose see users public on workstation one two workstation two",
    "start": "1643919",
    "end": "1652799"
  },
  {
    "text": "so to execute the relay we can also make use of sharp idp we don't actually need to upload the the payload to workstation",
    "start": "1653600",
    "end": "1661520"
  },
  {
    "text": "2 we can put it in the map drive and we can execute command there with two really important flags so",
    "start": "1661520",
    "end": "1667760"
  },
  {
    "text": "connect drive equal true so this is going to connect the map drive and allow you to access that",
    "start": "1667760",
    "end": "1673039"
  },
  {
    "text": "payload and ultimately access cs public to transfer the files",
    "start": "1673039",
    "end": "1678399"
  },
  {
    "text": "and x equals force so this tells sharp rdp that once you've successfully",
    "start": "1678399",
    "end": "1683440"
  },
  {
    "text": "executed this relay keep the session alive don't exit so this is going to",
    "start": "1683440",
    "end": "1688480"
  },
  {
    "text": "keep that map drive exposed to workstation 2. so once we've done that you can see that it's already checked in",
    "start": "1688480",
    "end": "1694080"
  },
  {
    "text": "in c3 on the right hand side so we can now stage a beacon as we've done before",
    "start": "1694080",
    "end": "1699600"
  },
  {
    "text": "through this and this is going to be writing its files to c users public",
    "start": "1699600",
    "end": "1706000"
  },
  {
    "text": "which is already exposed because sharp idp is still running in the beacon and you can see",
    "start": "1706000",
    "end": "1712320"
  },
  {
    "text": "hopefully the b can check in c3 on the right hand side and also in the team server on the left",
    "start": "1712320",
    "end": "1721120"
  },
  {
    "text": "nice cool so from a detection angle then so of course we've got our relay process",
    "start": "1722960",
    "end": "1728159"
  },
  {
    "text": "in the the workstation one and that's going to be using.net tooling just as we saw from saw from sharpsphere",
    "start": "1728159",
    "end": "1733840"
  },
  {
    "text": "in this case sharp rdp ox13's post exploitation tooling is now running in our spawn to process run dlr32",
    "start": "1733840",
    "end": "1740559"
  },
  {
    "text": "that's making network connections over onto our workstation two where we have our new relay running and then both of",
    "start": "1740559",
    "end": "1746320"
  },
  {
    "text": "those relays are then communicating back effectively to see users public on workstation one so what can we look for",
    "start": "1746320",
    "end": "1752399"
  },
  {
    "text": "here well a series of different things really let's take a look firstly dot net tooling we've seen this",
    "start": "1752399",
    "end": "1757760"
  },
  {
    "text": "kind of principle before using ecw we can see our assembly loads within run dl32 so we can see quite clearly sharp",
    "start": "1757760",
    "end": "1764000"
  },
  {
    "text": "rdp is running and we can also see some of the dlls that actually facilitate this as well",
    "start": "1764000",
    "end": "1769200"
  },
  {
    "text": "so using our effectively headless rdp session we're making use of the dll",
    "start": "1769200",
    "end": "1774279"
  },
  {
    "text": "mstscax.dll which is the activex client rdp dll using etw or you can see in process",
    "start": "1774279",
    "end": "1780159"
  },
  {
    "text": "hacker for example we can see that that dll has been loaded obviously as james says that needs to be running to",
    "start": "1780159",
    "end": "1785600"
  },
  {
    "text": "initiate the connection and then map the drive and allow that to stay open so that's what we're seeing there we can see that the the module",
    "start": "1785600",
    "end": "1791440"
  },
  {
    "text": "load taking place and then of course just as we saw before i run dll32 our spawn two process is",
    "start": "1791440",
    "end": "1797520"
  },
  {
    "text": "making a very anomalous connection to our second workstation on 3389 to actually establish our rdp session",
    "start": "1797520",
    "end": "1804159"
  },
  {
    "text": "um also here just as a note and when we're doing that beacon staging we're going to see a burst of package with a larger",
    "start": "1804159",
    "end": "1811120"
  },
  {
    "text": "size there those udp packets that are actually going to enable us to transfer that data over and achieve",
    "start": "1811120",
    "end": "1816480"
  },
  {
    "text": "the beacon running within workstation 2's relay and finally elder brilliant so the last",
    "start": "1816480",
    "end": "1822559"
  },
  {
    "text": "channel we're going to talk about is ldap so this is using ldap attributes to transmit data between workstation 1 and",
    "start": "1822559",
    "end": "1828640"
  },
  {
    "text": "workstation 2 ultimately for command control scenario workstation 1 has again no network connectivity to workstation",
    "start": "1828640",
    "end": "1835360"
  },
  {
    "text": "2. however they can both talk ldap to the same domain controller and so we can use these ldap attributes to transfer",
    "start": "1835360",
    "end": "1842399"
  },
  {
    "text": "data between the two there's a couple of limitations and i would highly encourage you to check out the references listed below because all",
    "start": "1842399",
    "end": "1849200"
  },
  {
    "text": "of this channel is entirely built on the research from from these two in particular uh",
    "start": "1849200",
    "end": "1855279"
  },
  {
    "text": "so please please check them out um you know kudos to them this wouldn't have happened without the research they put",
    "start": "1855279",
    "end": "1861200"
  },
  {
    "text": "out so both sides need to communicate with the same domain controller ideally otherwise it becomes operationally um",
    "start": "1861200",
    "end": "1868240"
  },
  {
    "text": "very restrictive because you have to wait for the attributes to sync across the main controllers both sides need to be able to modify the",
    "start": "1868240",
    "end": "1873840"
  },
  {
    "text": "same user's attributes and you're also limited by the the",
    "start": "1873840",
    "end": "1879200"
  },
  {
    "text": "target attribute that you choose so the size of data type and again in those references there's some research which",
    "start": "1879200",
    "end": "1884640"
  },
  {
    "text": "data which attributes are appropriate to use uh and we've simply used that use that research already",
    "start": "1884640",
    "end": "1890840"
  },
  {
    "text": "so from a data flow perspective it's very similar to before",
    "start": "1890840",
    "end": "1896080"
  },
  {
    "text": "except there's a difference but there's a lock attribute and a data attribute so these are the two different ldap",
    "start": "1896080",
    "end": "1901200"
  },
  {
    "text": "attributes that you are you are reading and writing to so workstation one is going to use the lock",
    "start": "1901200",
    "end": "1907039"
  },
  {
    "text": "attribute to set the destination id that the data attribute should be read by so",
    "start": "1907039",
    "end": "1913279"
  },
  {
    "text": "workstation one is gonna write to the lock attribute that the",
    "start": "1913279",
    "end": "1918720"
  },
  {
    "text": "information in the data attribute is destined for workstation 2 right so it's going to write to the lock attribute",
    "start": "1918720",
    "end": "1924000"
  },
  {
    "text": "first and it's going to write the actual data to the data attribute you've specified",
    "start": "1924000",
    "end": "1929440"
  },
  {
    "text": "workstation 2 is going to check what's in the lock attribute and say is it destined for me great it is",
    "start": "1929440",
    "end": "1935200"
  },
  {
    "text": "so it's going to take that and it's going to clear both attributes ready to be used again by another relay",
    "start": "1935200",
    "end": "1941600"
  },
  {
    "text": "so we're going to create a channel and there's a channel ldap in c3 just to drive a bit deeper into what each one of",
    "start": "1941600",
    "end": "1948000"
  },
  {
    "text": "these means the data attribute so this is where the bulk of the data is stored we use msmq science certificates there",
    "start": "1948000",
    "end": "1954799"
  },
  {
    "text": "are others available if you check out that research that we linked before but msmq science certificates mean you",
    "start": "1954799",
    "end": "1960159"
  },
  {
    "text": "can any domain users can modify their own attribute here and it can also support one makeup data",
    "start": "1960159",
    "end": "1966559"
  },
  {
    "text": "so it gets the best throughput block attribute is less important that's just where you're storing the",
    "start": "1966559",
    "end": "1972320"
  },
  {
    "text": "where the data attribute is actually destined for maximum packet size if you're not changing it don't need to",
    "start": "1972320",
    "end": "1978320"
  },
  {
    "text": "worry about it if you are check out the research because not all of them support this much data",
    "start": "1978320",
    "end": "1984159"
  },
  {
    "text": "username and password that's for an account that has the ability to or the permissions to modify the target",
    "start": "1984159",
    "end": "1989840"
  },
  {
    "text": "attributes if you're running under the context of the user here who owns the attribute then you don't",
    "start": "1989840",
    "end": "1996799"
  },
  {
    "text": "need to worry about this but if you need to operate it under a different user's context you'll need to specify the username and password explicitly",
    "start": "1996799",
    "end": "2004799"
  },
  {
    "text": "so in practice on workstation 2 you've got your outbound connection you can execute your",
    "start": "2004799",
    "end": "2010080"
  },
  {
    "text": "relay this is going to start writing data to the data and the lock attributes",
    "start": "2010080",
    "end": "2017279"
  },
  {
    "text": "and all being well you should see uh in your c3 on the right hand side your relay",
    "start": "2017279",
    "end": "2024720"
  },
  {
    "text": "should check in as it uses those attributes for for transfer",
    "start": "2024720",
    "end": "2031399"
  },
  {
    "text": "there we go you can see that the relay is checked in so commando control via those attributes has been established",
    "start": "2034399",
    "end": "2040799"
  },
  {
    "text": "and again we can add a peripheral beacon as before",
    "start": "2040799",
    "end": "2046679"
  },
  {
    "text": "nice thanks so last one then detection opportunities here well there's there's several here again",
    "start": "2047360",
    "end": "2053440"
  },
  {
    "text": "obviously the old app queries network connections and the windows event logs that are servicing from our domain",
    "start": "2053440",
    "end": "2058878"
  },
  {
    "text": "controllers as well so let's take a look firstly network connections just as we saw there needs to be some kind of",
    "start": "2058879",
    "end": "2064320"
  },
  {
    "text": "constructive beaconing taking place here and as we can see in our in this case plain text ldap implementation we can",
    "start": "2064320",
    "end": "2070560"
  },
  {
    "text": "see this continuous polling against the isdn number um attribute which is our lock attribute to see if there's",
    "start": "2070560",
    "end": "2076480"
  },
  {
    "text": "anything there that's destined for us and our relay if we like take a little bit of a dive",
    "start": "2076480",
    "end": "2082398"
  },
  {
    "text": "into the code here we can see how the receiving logic looks firstly we check the lock attribute is it destined for us is this",
    "start": "2082399",
    "end": "2089200"
  },
  {
    "text": "stuff that we should care about if not no further action if it's us writing to the channel we",
    "start": "2089200",
    "end": "2094960"
  },
  {
    "text": "check the lock attribute again but this time just to make sure it's clear we're not going to be overwriting some other packets and start interrupting other",
    "start": "2094960",
    "end": "2100720"
  },
  {
    "text": "communications and then when we're happy there we've written to that we can then write to our data attribute with the data that's then",
    "start": "2100720",
    "end": "2106720"
  },
  {
    "text": "going to be passed on to our destination again using etw for the ldap queries here there's a little snippet there for",
    "start": "2106720",
    "end": "2112960"
  },
  {
    "text": "the config we can take a look at that and quite clearly we can see our two relays making",
    "start": "2112960",
    "end": "2118079"
  },
  {
    "text": "these queries to the primary international sdn number and to the scientific attribute as well",
    "start": "2118079",
    "end": "2123839"
  },
  {
    "text": "interestingly we can use um directory service change events so 5136 and this is surface through the use of a sacl or",
    "start": "2123839",
    "end": "2130480"
  },
  {
    "text": "a sacko against those attributes as well so every time they're changed we will see um",
    "start": "2130480",
    "end": "2135760"
  },
  {
    "text": "the surface of 5.36 and here you can see on the very right hand side",
    "start": "2135760",
    "end": "2141119"
  },
  {
    "text": "that unique attribute value being set and then further down you can see another attribute and the the same",
    "start": "2141119",
    "end": "2147280"
  },
  {
    "text": "attribute set with a different value another another value there and if we take a look in c3 and kind of compare them side by side we can see that these",
    "start": "2147280",
    "end": "2154240"
  },
  {
    "text": "values actually match up with the output id and the input id for their respective",
    "start": "2154240",
    "end": "2159520"
  },
  {
    "text": "relay so just as james described what we're doing here is writing to this and say this is destined for this relay and",
    "start": "2159520",
    "end": "2165599"
  },
  {
    "text": "this is destined in response to that as well and then as well as that we can also see",
    "start": "2165599",
    "end": "2171599"
  },
  {
    "text": "the sign certificates actually being changed as well with bike content which is of course is the contents of our data",
    "start": "2171599",
    "end": "2176800"
  },
  {
    "text": "that's being sent then we can also use access events directory service access event so this",
    "start": "2176800",
    "end": "2182400"
  },
  {
    "text": "is 4662 this is a little bit different and obviously by design more noisy basically",
    "start": "2182400",
    "end": "2188000"
  },
  {
    "text": "and because rather than just the change events we're looking at every time a user accesses this attribute as well um",
    "start": "2188000",
    "end": "2193280"
  },
  {
    "text": "if we look at the object properties there you can see these guides and using the microsoft documentation we can relay",
    "start": "2193280",
    "end": "2198640"
  },
  {
    "text": "that back um to the relevant attributes so the science certificates attributes um and the primary international isdn",
    "start": "2198640",
    "end": "2204320"
  },
  {
    "text": "number as well there and quite usefully we can see the access mask as well there so you can see read property and right",
    "start": "2204320",
    "end": "2211119"
  },
  {
    "text": "property are being used there so we can kind of infer what's happening where we're writing and reading from those as we need to to achieve um c2 so finally",
    "start": "2211119",
    "end": "2218960"
  },
  {
    "text": "conclusions brilliant thank you so if you made it this far then well done uh if there was",
    "start": "2218960",
    "end": "2224320"
  },
  {
    "text": "three things i want you to walk away from this talk with right it's the importance of reviewing the trust boundaries between critical networks you",
    "start": "2224320",
    "end": "2230480"
  },
  {
    "text": "know confirm that are they really as air-gapped as you think look for possible data flows that could",
    "start": "2230480",
    "end": "2236160"
  },
  {
    "text": "be exploited in this sort of fashion and then also look at how they could be mitigated so can i completely be eliminated or can you include the the",
    "start": "2236160",
    "end": "2243520"
  },
  {
    "text": "prevention and detection controls that we've discussed here to prevent an attacker abusing these",
    "start": "2243520",
    "end": "2249839"
  },
  {
    "text": "channels and more broadly can you preemptively reduce your attack surface by looking at the internal external",
    "start": "2249839",
    "end": "2256640"
  },
  {
    "text": "services that could be used and abused for c2 and preemptively blocking them",
    "start": "2256640",
    "end": "2262480"
  },
  {
    "text": "yeah absolutely and then just one last thing to say the link in the bottom there is to the c3",
    "start": "2262480",
    "end": "2267760"
  },
  {
    "text": "tooling on github it's open source openly available so please do check it out and then also we're we're very active on",
    "start": "2267760",
    "end": "2273520"
  },
  {
    "text": "bloodhound slack as well in the c3 channel so if you want to talk to us uh or indeed the developers that maintain c3 um then please join there and we can",
    "start": "2273520",
    "end": "2280320"
  },
  {
    "text": "we can have a chat but otherwise thank you and thanks for joining thanks everyone",
    "start": "2280320",
    "end": "2285838"
  }
]