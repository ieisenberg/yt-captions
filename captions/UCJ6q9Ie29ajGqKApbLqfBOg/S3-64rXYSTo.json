[
  {
    "text": "[Music] VGA splitter yet so um we'll have to wait for that I'm sorry everybody got up",
    "start": "80",
    "end": "6279"
  },
  {
    "text": "so early and um we're not starting we take a few minutes I",
    "start": "6279",
    "end": "13480"
  },
  {
    "text": "guess what this bit understandable on the far right side obviously",
    "start": "20119",
    "end": "28320"
  },
  {
    "text": "not okay",
    "start": "28359",
    "end": "31960"
  },
  {
    "text": "test 1 two 3 okay good good morning whoa good morning",
    "start": "33559",
    "end": "42440"
  },
  {
    "text": "everybody thanks for being here um I'll start in a few",
    "start": "42440",
    "end": "48480"
  },
  {
    "text": "minutes sorry start now well people on the right side will not see anything so that's oh just start and I'll get this",
    "start": "52760",
    "end": "59039"
  },
  {
    "text": "spit okay okay well but at least I didn't have to",
    "start": "59039",
    "end": "65600"
  },
  {
    "text": "break this hotel myself good um good morning my name is",
    "start": "65600",
    "end": "71200"
  },
  {
    "text": "harar I'm a reverse engineer and I'm going to speak a little bit about graph-based binary analysis",
    "start": "71200",
    "end": "78758"
  },
  {
    "text": "here before I start I'd like to give a short overview about what I'm going to [Music]",
    "start": "79920",
    "end": "86000"
  },
  {
    "text": "cover um the speech is going to be well consist of four more or less independent",
    "start": "86000",
    "end": "91119"
  },
  {
    "text": "Parts first off I'll speak a little bit about what graphs are um which is not going to take long then I'll try to",
    "start": "91119",
    "end": "98200"
  },
  {
    "text": "explain why I like graphs and um then I'll get to actually using graphs for something useful I'll",
    "start": "98200",
    "end": "105600"
  },
  {
    "text": "speak a little bit about um simple flow graphing basically generating flow graphs from assembly or disassembly of",
    "start": "105600",
    "end": "112560"
  },
  {
    "text": "applications I'll speak a little bit about problems you run into when you're dealing with Microsoft optimized binaries speak a little bit about how to",
    "start": "112560",
    "end": "120159"
  },
  {
    "text": "use these flow graphs for manual decompilation and um then I'll show how",
    "start": "120159",
    "end": "125719"
  },
  {
    "text": "flow graphs can be used to evaluate how good a f fast tester or some kind of",
    "start": "125719",
    "end": "131000"
  },
  {
    "text": "stress testing tool is um well afterwards I'll speak about structure object",
    "start": "131000",
    "end": "137319"
  },
  {
    "text": "reconstruction basically um well explaining what pointer control graphing",
    "start": "137319",
    "end": "142959"
  },
  {
    "text": "is is something I'll do in that part and um I'll explain what buffer definition graphing is in the fourth part",
    "start": "142959",
    "end": "148840"
  },
  {
    "text": "afterwards before I before I start I have to give a little word of warning this is a reverse",
    "start": "148840",
    "end": "155120"
  },
  {
    "text": "engineering speech so it's not strictly security Center I will not announce any cool new zero day",
    "start": "155120",
    "end": "161920"
  },
  {
    "text": "today um at least not in this speech um there'll be no new vulnerabilities and some people might",
    "start": "161920",
    "end": "169159"
  },
  {
    "text": "ask why this is relevant for a security conference then the reason why I think it's relevant is because um well reverse",
    "start": "169159",
    "end": "175800"
  },
  {
    "text": "engineering does have many applications in the security world and the part about code understanding and manual",
    "start": "175800",
    "end": "181280"
  },
  {
    "text": "decompilation will come in very handy if you've ever in the sit if you're ever faced with a situation of having to",
    "start": "181280",
    "end": "187000"
  },
  {
    "text": "audit binaries manually like finding bugs and binaries and secondly it'll help a lot if you ever have to decompile",
    "start": "187000",
    "end": "193239"
  },
  {
    "text": "a bit of code for example I don't know a heap implementation if you want to like",
    "start": "193239",
    "end": "198440"
  },
  {
    "text": "exploit a metoc override and you don't know what the Heap is doing and it's all in binary you have to get a decent",
    "start": "198440",
    "end": "204400"
  },
  {
    "text": "decompile or a decent understanding of what's going on part three is um very useful for",
    "start": "204400",
    "end": "210720"
  },
  {
    "text": "speeding up manual audits because structure reconstruction takes forever if done",
    "start": "210720",
    "end": "216439"
  },
  {
    "text": "manually and um some of the concepts in the this the third part are applicable",
    "start": "216439",
    "end": "222360"
  },
  {
    "text": "to a lot of other problems um when it comes to finding bugs automatically so",
    "start": "222360",
    "end": "228040"
  },
  {
    "text": "um the the general principle of um the third part can be applied to many many other",
    "start": "228040",
    "end": "234640"
  },
  {
    "text": "fields um the fourth part is yet another way to speed up manual audits you can",
    "start": "234640",
    "end": "239959"
  },
  {
    "text": "see that I have to audit quite a lot and I'm quite lazy because my speech is all about saving work and some of the things",
    "start": "239959",
    "end": "246920"
  },
  {
    "text": "that are being shown in part four will or do have the implication that they can",
    "start": "246920",
    "end": "252040"
  },
  {
    "text": "Aid a lot in automated binary auditing like finding bugs",
    "start": "252040",
    "end": "256879"
  },
  {
    "text": "semi-automatically so what is a graph um a graph consists of nodes and",
    "start": "257759",
    "end": "262880"
  },
  {
    "text": "links um that's pretty much how much I'm going to say about this um we're dealing with computer code so we have a directed",
    "start": "262880",
    "end": "269840"
  },
  {
    "text": "graph meaning that links only go into One Direction and um yeah just to give",
    "start": "269840",
    "end": "275720"
  },
  {
    "text": "everybody an idea of what a graph is oh the VGA",
    "start": "275720",
    "end": "280960"
  },
  {
    "text": "splitter sorry you have power here uh yeah I still have",
    "start": "282160",
    "end": "287400"
  },
  {
    "text": "[Music]",
    "start": "291070",
    "end": "294570"
  },
  {
    "text": "one for [Music]",
    "start": "298639",
    "end": "303889"
  },
  {
    "text": "[Music]",
    "start": "317280",
    "end": "325190"
  },
  {
    "text": "very [Music]",
    "start": "348759",
    "end": "352198"
  },
  {
    "text": "nice all right everybody can see something everybody can hear something MH",
    "start": "356360",
    "end": "364319"
  },
  {
    "text": "good um now why choose graphs uh there are many many reasons why I personally",
    "start": "364319",
    "end": "369479"
  },
  {
    "text": "like graphs first off graphs make code understanding a whole lot easier um just",
    "start": "369479",
    "end": "375280"
  },
  {
    "text": "well I'll demonstrate it at some point",
    "start": "375280",
    "end": "380440"
  },
  {
    "text": "um just compare looking at all this disassembly",
    "start": "383080",
    "end": "388599"
  },
  {
    "text": "and understanding it to looking at a large flowchart of this",
    "start": "388599",
    "end": "395080"
  },
  {
    "text": "disassembly um well probably this function was a bit too",
    "start": "395080",
    "end": "400880"
  },
  {
    "text": "large um okay this this flow charart looks scary at first s but it is a lot",
    "start": "400880",
    "end": "406360"
  },
  {
    "text": "nicer and a lot easier to understand than the original code as you get controlled structures",
    "start": "406360",
    "end": "412160"
  },
  {
    "text": "and you can see that well certain blocks interact with certain other blocks in certain ways so",
    "start": "412160",
    "end": "419280"
  },
  {
    "text": "code understanding really is simplified by graphs secondly um complex complex",
    "start": "419280",
    "end": "425000"
  },
  {
    "text": "issues like I don't know nested Loops um complex switches and so on are really",
    "start": "425000",
    "end": "430759"
  },
  {
    "text": "really nasty to trace through in in the binary like if you don't have graphs and graphs will structure this nicely and",
    "start": "430759",
    "end": "436879"
  },
  {
    "text": "you have a nice picture you can print out and put on your wall and then look at it and try to understand what's going on the next good thing about graphs is",
    "start": "436879",
    "end": "443759"
  },
  {
    "text": "they're pretty much the only valid abstraction for computer code and as we want to analyze Compu computer code",
    "start": "443759",
    "end": "450039"
  },
  {
    "text": "automatically in some way we need to abstract it first so graphs are well the underlying principle that goes into any",
    "start": "450039",
    "end": "456440"
  },
  {
    "text": "kind of automated code analysis um another Advantage is that graphs have been studied extensively in",
    "start": "456440",
    "end": "461840"
  },
  {
    "text": "abstract mathematics so you have a whole bunch of efficient algorithms a whole bunch of proofs and a whole bunch of",
    "start": "461840",
    "end": "468560"
  },
  {
    "text": "methods for doing certain things when it comes to graphs just get a graph Theory Book Read for a while and it should have",
    "start": "468560",
    "end": "475159"
  },
  {
    "text": "the answer and graphs are really easy to generate and you can use off the shell of tools from I don't know um like",
    "start": "475159",
    "end": "482280"
  },
  {
    "text": "there's there's tools to generate graphs or to to display graphs like the wind graph 321 I showed so there's a lot of",
    "start": "482280",
    "end": "487840"
  },
  {
    "text": "off-the-shelf tools which can display graphs and I don't know modify graphs and so on so you don't have to write",
    "start": "487840",
    "end": "494319"
  },
  {
    "text": "your own I don't know display program and so on okay um structuring code as a",
    "start": "494319",
    "end": "501879"
  },
  {
    "text": "directed graph is beneficial for both manual and automated analysis that's basically the reason why I like graphs",
    "start": "501879",
    "end": "508199"
  },
  {
    "text": "and they're so nice and visual okay applications for simple flow graphs",
    "start": "508199",
    "end": "514680"
  },
  {
    "text": "I mentioned before that flow graphs will simplify code understanding by quite a bit but clarified code interdependence",
    "start": "514680",
    "end": "520479"
  },
  {
    "text": "and they allow for manual gradual decompilation or gradual manual decompilation um another thing is that",
    "start": "520479",
    "end": "528000"
  },
  {
    "text": "whenever you're going to try to analyze code automatically or in a more sophisticated manner flow graphs are the",
    "start": "528000",
    "end": "534120"
  },
  {
    "text": "basic building blocks because if you ever try for example to follow a variable through a function or through an entire call tree for like that",
    "start": "534120",
    "end": "542000"
  },
  {
    "text": "variable will go into different locations depending on the structure of the flow graph so flow graphs are like",
    "start": "542000",
    "end": "548600"
  },
  {
    "text": "the first building block of everything that's going to come and Ida 4.17 includes a built-in",
    "start": "548600",
    "end": "555240"
  },
  {
    "text": "graphing plugin which I just showed or buil-in graphing functionality it does have a few disadvantages namely that um",
    "start": "555240",
    "end": "563000"
  },
  {
    "text": "ID while data rescue doesn't give you a way of accessing the graph description so you can display the graph but you're",
    "start": "563000",
    "end": "568680"
  },
  {
    "text": "not allowed to modify in a way it's stored in temporary file and you have to go to Great length to retrieve that file",
    "start": "568680",
    "end": "574160"
  },
  {
    "text": "and it really is not fun and um another problem is that well",
    "start": "574160",
    "end": "581279"
  },
  {
    "text": "the Ida provided flow grapher can't handle certain things Microsoft does to the",
    "start": "581279",
    "end": "586560"
  },
  {
    "text": "binaries building a function flow graph is pretty simple you just start tracing the code at the very beginning and you",
    "start": "586560",
    "end": "592560"
  },
  {
    "text": "trace the code downwards and as soon as you hit a branch like a conditional Branch you split the graph so you have",
    "start": "592560",
    "end": "599399"
  },
  {
    "text": "you have a consecutive code block of I don't know 50 instructions then there's a comparison and conditional Branch like",
    "start": "599399",
    "end": "605519"
  },
  {
    "text": "jump zero jump not zero whatever so at that point you split the graph and then you recurse for every splitted part and",
    "start": "605519",
    "end": "612680"
  },
  {
    "text": "you just continue this until you find a note which has no further down links which like terminates with a return So",
    "start": "612680",
    "end": "619680"
  },
  {
    "text": "at the end of that you'll have a nice well structureal representation of the function that's really easy to build and",
    "start": "619680",
    "end": "625839"
  },
  {
    "text": "really fun um I mentioned before that Microsoft does some strange stuff to their",
    "start": "625839",
    "end": "631399"
  },
  {
    "text": "binaries what they're doing basically is after they've built the entire binary or the entire like they've compiled and",
    "start": "631399",
    "end": "636880"
  },
  {
    "text": "linked it and everything they start running the program and they have um well a code analysis tool that analyzes",
    "start": "636880",
    "end": "644680"
  },
  {
    "text": "graphs of their own functions apparently um now a regular function would be a continuous block of memory like in this",
    "start": "644680",
    "end": "651040"
  },
  {
    "text": "case we have begin up at the very top then some error Handler which which is usually not executed but skipped then",
    "start": "651040",
    "end": "657360"
  },
  {
    "text": "you have the regular code of the function and then the return now um you see in those dashed arrows that normally",
    "start": "657360",
    "end": "665560"
  },
  {
    "text": "these branches don't get taken like in normal operation only the regular flow will be executed so Microsoft starts executing",
    "start": "665560",
    "end": "672880"
  },
  {
    "text": "the program and testing it and Records which are the regular code paths and then they start optimizing the memory",
    "start": "672880",
    "end": "679360"
  },
  {
    "text": "usage by moving The Irregular code paths to another page so um you only have the",
    "start": "679360",
    "end": "686000"
  },
  {
    "text": "code that's actually being executed in 99% of all cases on one page and that minimizes the working set you need in",
    "start": "686000",
    "end": "691880"
  },
  {
    "text": "memory at once so you have a smaller footprint for the application in memory and um this will help a lot when it",
    "start": "691880",
    "end": "697959"
  },
  {
    "text": "comes to prefetching too apparently otherwise I wouldn't understand why people go to that great length just to",
    "start": "697959",
    "end": "703959"
  },
  {
    "text": "save a few kilobytes but um problem with this is it makes or it breaks the Ida",
    "start": "703959",
    "end": "709600"
  },
  {
    "text": "internal phow grapher completely because for Ida internal a function has to be a continuous block of memory now um I",
    "start": "709600",
    "end": "717480"
  },
  {
    "text": "spent quite a bit of time in Microsoft binary so the ID flow grapher is pretty much useless to me and um due to that reason",
    "start": "717480",
    "end": "724880"
  },
  {
    "text": "I've built my own flow grapher which is unfortunately x86 specific um I due to",
    "start": "724880",
    "end": "730480"
  },
  {
    "text": "an unfortunate accident I lost all my CPU independent code recently but nonetheless for x86 you can um generate",
    "start": "730480",
    "end": "739120"
  },
  {
    "text": "nice graphs from fragmented functions too I'll demonstrate last in a",
    "start": "739120",
    "end": "745120"
  },
  {
    "text": "second okay now here we have RTL free Heap in ndl now if you look at it the Ida generated",
    "start": "745120",
    "end": "751920"
  },
  {
    "text": "flow graph has a lot of loose ends here at the",
    "start": "751920",
    "end": "755920"
  },
  {
    "text": "end here and normally a correctly graphed function should have a diamond",
    "start": "759040",
    "end": "764160"
  },
  {
    "text": "shape meaning it starts out at one deterministic location branches out widely and then collapses again to one",
    "start": "764160",
    "end": "769880"
  },
  {
    "text": "deterministic end so um we can see here that this flow graph obviously is not correctly",
    "start": "769880",
    "end": "775639"
  },
  {
    "text": "generated and when we try to read this flow graph we'll constantly end up in some dead end where well idea has lost",
    "start": "775639",
    "end": "781760"
  },
  {
    "text": "track so by comparison if I use my own tool um I",
    "start": "781760",
    "end": "786880"
  },
  {
    "text": "just move it to the beginning of the function hit alt n and then I have to open it",
    "start": "786880",
    "end": "793450"
  },
  {
    "text": "[Music]",
    "start": "793450",
    "end": "796559"
  },
  {
    "text": "whoops we will get a nice and complete Flor graph of the",
    "start": "801920",
    "end": "807040"
  },
  {
    "text": "function you can even beautify this a bit there should be an unsorted one okay now the problem is with those",
    "start": "807040",
    "end": "817120"
  },
  {
    "text": "Microsoft binaries that the return instruction can up end up well above the",
    "start": "817120",
    "end": "823240"
  },
  {
    "text": "the original beginning of the function due to the way they rearranged the function so the flow graph is not really beautiful yet because it's not",
    "start": "823240",
    "end": "829000"
  },
  {
    "text": "completely lay well ideally we would want the graph to be laid out in a way that the function beginning is at the",
    "start": "829000",
    "end": "834120"
  },
  {
    "text": "very top and the function end is at the very bottom so now we'll still have to manually edit this file I'll add some",
    "start": "834120",
    "end": "841320"
  },
  {
    "text": "functionality for this that one day but I don't feel like it right",
    "start": "841320",
    "end": "847440"
  },
  {
    "text": "now so we search for the return and then we assign it the vertical",
    "start": "848680",
    "end": "854199"
  },
  {
    "text": "order of I don't know 100 and then we reload the graph and it's nicely lay out laid",
    "start": "854199",
    "end": "862240"
  },
  {
    "text": "out we can use this graph for well understanding what is going on I'll get",
    "start": "863360",
    "end": "868720"
  },
  {
    "text": "into that a bit more in a minute um well these graphs help with",
    "start": "868720",
    "end": "874959"
  },
  {
    "text": "manual decompilation and manual decompilation is not fun usually because um well you",
    "start": "874959",
    "end": "882519"
  },
  {
    "text": "have this huge function there at times and you have to read it all understand it all and then you have to generate",
    "start": "882519",
    "end": "888399"
  },
  {
    "text": "working C code from it it takes forever and it's very frustrating because you don't really see how much you've",
    "start": "888399",
    "end": "893600"
  },
  {
    "text": "proceeded and you get lost easily because you're like um there's one branch which you look at and you say",
    "start": "893600",
    "end": "898680"
  },
  {
    "text": "okay I'll look at that later and you forget about it you miss like an entire code branch of the decompiled version so",
    "start": "898680",
    "end": "904279"
  },
  {
    "text": "um it's very easy to scrub and decompiling a large function because a small mistake will screw you badly and",
    "start": "904279",
    "end": "910880"
  },
  {
    "text": "if you ever quit decompiling for a day or two like this function and you come back to it you're like oh damn where was",
    "start": "910880",
    "end": "916920"
  },
  {
    "text": "I again so um well it is useful to have some kind of way of keeping track of how",
    "start": "916920",
    "end": "924279"
  },
  {
    "text": "much code you've covered which ones you have like which part you've understood and um",
    "start": "924279",
    "end": "929720"
  },
  {
    "text": "than knowing what you've missed what you haven't missed and so on so personally when I decompile I use graphs as a",
    "start": "929720",
    "end": "936560"
  },
  {
    "text": "visual aid whenever I've analyzed a node I'll color it in the graph and um well",
    "start": "936560",
    "end": "942399"
  },
  {
    "text": "as I'll start working my way from the outer layer of the graph inwards so basically if you see up here the",
    "start": "942399",
    "end": "949399"
  },
  {
    "text": "beginning of the function and then the outer branch is here you can see that these are most likely some kind of error",
    "start": "949399",
    "end": "955000"
  },
  {
    "text": "checks like if something then return one if something then return to so you start",
    "start": "955000",
    "end": "962240"
  },
  {
    "text": "with those outermost layers and slowly peel them away like peeling an orange or whatever just layer by layer it's more",
    "start": "962240",
    "end": "968800"
  },
  {
    "text": "an onion than an orange so um you you slowly reduce the graph more and more",
    "start": "968800",
    "end": "974319"
  },
  {
    "text": "until it becomes simple cuz right now there's a few internal Loops in here which I wouldn't like understand directly from looking at the",
    "start": "974319",
    "end": "980680"
  },
  {
    "text": "graph now all theory is gray here we have the nice graph of AAL",
    "start": "980680",
    "end": "987199"
  },
  {
    "text": "free Heap and the first note mode here just does some standard setting up and",
    "start": "987199",
    "end": "992319"
  },
  {
    "text": "initializes a few variables and then you can see at the very bottom that the pointer to the",
    "start": "992319",
    "end": "997680"
  },
  {
    "text": "block where freeing is moved into edx that is being checked to be zero or not",
    "start": "997680",
    "end": "1002880"
  },
  {
    "text": "and if it is zero it branches out to the far right",
    "start": "1002880",
    "end": "1008000"
  },
  {
    "text": "here and moves one into e and then it returns so um a rough decompile of this",
    "start": "1008000",
    "end": "1015480"
  },
  {
    "text": "without the variable initial initialization would look like this",
    "start": "1015480",
    "end": "1020839"
  },
  {
    "text": "so we color that in and remove it and then there's well we'll probably want to",
    "start": "1021880",
    "end": "1027319"
  },
  {
    "text": "do this in the file to be more [Music] visual so we've",
    "start": "1027319",
    "end": "1033798"
  },
  {
    "text": "colored covered this node and this",
    "start": "1033880",
    "end": "1038839"
  },
  {
    "text": "node these two and now we want to remove the topmost node we may not yet remove",
    "start": "1039160",
    "end": "1044720"
  },
  {
    "text": "the smaller node because that still has a link from elsewhere so we'll just uncolor it again and that'll be rearranged in the in the graph so um",
    "start": "1044720",
    "end": "1053679"
  },
  {
    "text": "obviously the note on the left side there um on the left side of the top node like the white one that will be the",
    "start": "1053679",
    "end": "1059360"
  },
  {
    "text": "new top node so we zoom in on",
    "start": "1059360",
    "end": "1064480"
  },
  {
    "text": "it assign it the vertical order of 1 778 CB",
    "start": "1064480",
    "end": "1070960"
  },
  {
    "text": "670 okay",
    "start": "1075679",
    "end": "1079679"
  },
  {
    "text": "and then we remove the topmost node and the two edges it",
    "start": "1084159",
    "end": "1089799"
  },
  {
    "text": "has and we relay out the graph and we kind of have to remove this color here",
    "start": "1092919",
    "end": "1100600"
  },
  {
    "text": "too so we have simplified the graph by a little bit and now we look at the next",
    "start": "1101559",
    "end": "1109240"
  },
  {
    "text": "part these two nodes here here in the graph um here we see that something is",
    "start": "1109240",
    "end": "1116960"
  },
  {
    "text": "being moved or the the flags argument to RL free Heap is being moved into ebx and",
    "start": "1116960",
    "end": "1122159"
  },
  {
    "text": "then that is being ored with some Flags value from the Heap structure and um that is being tested",
    "start": "1122159",
    "end": "1129480"
  },
  {
    "text": "against some bit mask and if that any of um these bits are set this Branch here",
    "start": "1129480",
    "end": "1135960"
  },
  {
    "text": "is being taken and then the function returns so the decompiled version of these two",
    "start": "1135960",
    "end": "1141360"
  },
  {
    "text": "nodes would look like this after the block like after checking whether the block is zero and",
    "start": "1141360",
    "end": "1147559"
  },
  {
    "text": "if it is zero returning zero or returning one um it checks for these flags being set and if they are set it",
    "start": "1147559",
    "end": "1154799"
  },
  {
    "text": "returns RTL free Heap slowly so we can scrape away the next",
    "start": "1154799",
    "end": "1162120"
  },
  {
    "text": "layer and we can continue this until we're all the way through with that function and this has the advantage of",
    "start": "1166159",
    "end": "1171440"
  },
  {
    "text": "that we always know that we've covered every little branch in that function we're not missing anything and we know",
    "start": "1171440",
    "end": "1177840"
  },
  {
    "text": "exactly where we were so we can pick up on it like a day later or weeks later and know what we're",
    "start": "1177840",
    "end": "1183080"
  },
  {
    "text": "doing just well the the advantages of this approach are first of you see progress",
    "start": "1183080",
    "end": "1189880"
  },
  {
    "text": "that is a huge motivation boost that shouldn't be underestimated because if you spend a few days in large function",
    "start": "1189880",
    "end": "1195760"
  },
  {
    "text": "you sit there and well is this ever going to be done if you see the graph you can actually sit there oh great only",
    "start": "1195760",
    "end": "1201880"
  },
  {
    "text": "50 notes to go only 20 notes to go and so on and so on this is really well it helps me at least cuz um I tend to get",
    "start": "1201880",
    "end": "1208600"
  },
  {
    "text": "frustrated at times and um another thing it helps you to be more thorough in your approach in",
    "start": "1208600",
    "end": "1214480"
  },
  {
    "text": "terms of you are sure you haven't missed any node um cuz having a decompile of",
    "start": "1214480",
    "end": "1220080"
  },
  {
    "text": "something and then figuring out you forgot a code branch and this thing behaves differently than you thought it would that sucks really",
    "start": "1220080",
    "end": "1226640"
  },
  {
    "text": "badly um another good thing about this graph management is when somebody asks you what the hell you're doing you can show it to management and they'll",
    "start": "1226640",
    "end": "1232600"
  },
  {
    "text": "understand you know I'm decompiling here are some funny colored graphs um I can",
    "start": "1232600",
    "end": "1238760"
  },
  {
    "text": "even show them in PowerPoint so um it does have its",
    "start": "1238760",
    "end": "1245039"
  },
  {
    "text": "merits um another not to be forgotten point is that sometimes you have situations which are too complex at",
    "start": "1245039",
    "end": "1251559"
  },
  {
    "text": "first glance Now by peeling away layer by layer the situation gets simpler so um while you're burning out the problem",
    "start": "1251559",
    "end": "1258240"
  },
  {
    "text": "gets simp simp and less intimidating which is a good thing as well for example when I decompiled RTL",
    "start": "1258240",
    "end": "1264120"
  },
  {
    "text": "fre Heap um I first well looked at everything that's colored in red here and then I couldn't understand one of",
    "start": "1264120",
    "end": "1269960"
  },
  {
    "text": "the inner Loops so I start reducing and reducing and reducing at this point the",
    "start": "1269960",
    "end": "1276559"
  },
  {
    "text": "inner loop became quite clear to me and um well I was",
    "start": "1276559",
    "end": "1282960"
  },
  {
    "text": "done um any questions concerning the manual decompilation part",
    "start": "1283440",
    "end": "1289760"
  },
  {
    "text": "no good okay so um another thing you can do with flow graphs is fuz coverage",
    "start": "1289760",
    "end": "1297960"
  },
  {
    "text": "analysis um we all know that fuss testing really is lame and we all know",
    "start": "1300679",
    "end": "1305960"
  },
  {
    "text": "that F testing really is inefficient because a minor desynchronization between what the program like like the",
    "start": "1305960",
    "end": "1311000"
  },
  {
    "text": "protocol the program speaks and the protocol your fuz tester speaks will perhaps lead to entire parts of the",
    "start": "1311000",
    "end": "1317000"
  },
  {
    "text": "program not being fuzzed at all so you can run your father for 2 days and always runs into the first error message and returns great you've covered a lot",
    "start": "1317000",
    "end": "1323159"
  },
  {
    "text": "of code um then you can't really cover like fuzz undocumented features so if some mail server implements some strange",
    "start": "1323159",
    "end": "1329440"
  },
  {
    "text": "command which isn't even in the RFC you have no way of fuzzing that one and you will not even know it's there and um",
    "start": "1329440",
    "end": "1337440"
  },
  {
    "text": "well another problem is it's hard to impossible to estimate how good a f tester is and with all the industry advertising their um artificial",
    "start": "1337440",
    "end": "1345200"
  },
  {
    "text": "intelligent common hacking attacking methods um ninja Kung Fu I don't know",
    "start": "1345200",
    "end": "1350799"
  },
  {
    "text": "fuss tester with artificial",
    "start": "1350799",
    "end": "1354720"
  },
  {
    "text": "intelligence microphone's off it's it's",
    "start": "1356559",
    "end": "1362679"
  },
  {
    "text": "on good well this one is",
    "start": "1364080",
    "end": "1369240"
  },
  {
    "text": "on while I'm attacking an entire industry here",
    "start": "1373559",
    "end": "1379440"
  },
  {
    "text": "don't you hate Wednesday",
    "start": "1386039",
    "end": "1388879"
  },
  {
    "text": "mornings very good um well the light is so low that it seems that the battery",
    "start": "1393640",
    "end": "1398679"
  },
  {
    "text": "will maybe the battery empty I I'll [Music]",
    "start": "1398679",
    "end": "1409760"
  },
  {
    "text": "good I already had a leash yesterday all day in class because they weren't giving me a wireless microphone either",
    "start": "1409760",
    "end": "1416159"
  },
  {
    "text": "so good um well a good anal a good uh",
    "start": "1416159",
    "end": "1421679"
  },
  {
    "text": "all right uh a good analogy for fuz testing is trying to shoot bats in a dark",
    "start": "1421679",
    "end": "1427080"
  },
  {
    "text": "apartment and um well if you sit there all day and shoot wildly you'll eventually hit a bat and that's pretty",
    "start": "1427080",
    "end": "1435080"
  },
  {
    "text": "much how um all the I bugs have been found and um well",
    "start": "1435080",
    "end": "1442240"
  },
  {
    "text": "yeah okay so um graphs can be a visual eight here because you can use them to",
    "start": "1442240",
    "end": "1447400"
  },
  {
    "text": "estimate how much code you've covered and um this will work by",
    "start": "1447400",
    "end": "1452919"
  },
  {
    "text": "generating a flow graph of a function or of an entire application and then loading that into a mini debugger that",
    "start": "1452919",
    "end": "1458720"
  },
  {
    "text": "debugger will attach to the other process and set a breakpoint on every beginning of the node like of every",
    "start": "1458720",
    "end": "1464480"
  },
  {
    "text": "graph node now then you start frust testing the program and whenever one of the break points is hit remove the break",
    "start": "1464480",
    "end": "1470200"
  },
  {
    "text": "point and color that node so afterwards you have a nicely colored graph and you can see which branches have been missed",
    "start": "1470200",
    "end": "1476240"
  },
  {
    "text": "and they can go there and see what has happened there and why this hasn't been fuzzed this can be used for fuzzer",
    "start": "1476240",
    "end": "1481279"
  },
  {
    "text": "benchmarking for example okay now um we can actually say um I don't know retina",
    "start": "1481279",
    "end": "1487000"
  },
  {
    "text": "fuzz is better than um Pearl or um I",
    "start": "1487000",
    "end": "1492640"
  },
  {
    "text": "don't know so you can compare well compare fuz testers",
    "start": "1492640",
    "end": "1500039"
  },
  {
    "text": "um well it does have major advant advantages over conventional fuzz because you can measure the amount of",
    "start": "1502080",
    "end": "1507320"
  },
  {
    "text": "code you've covered you can make sure you cover a lot more code than before and um well most most F testers are",
    "start": "1507320",
    "end": "1514600"
  },
  {
    "text": "scriptable in some way so by looking at the flow graphs and the the decisions being made in that graph like if you see",
    "start": "1514600",
    "end": "1520559"
  },
  {
    "text": "the entire graph being blue and just one one like cod path and it being white you just look at the very beginning of the",
    "start": "1520559",
    "end": "1526080"
  },
  {
    "text": "Cod path and you immediately know where to look in order to find why the branch wasn't taken and so on so you can adjust",
    "start": "1526080",
    "end": "1532679"
  },
  {
    "text": "your fuzz tester in a way that it'll well fuzz that graph too so um the",
    "start": "1532679",
    "end": "1539039"
  },
  {
    "text": "analogy of this is um well shooting bats in a dark apartment but at least having",
    "start": "1539039",
    "end": "1545039"
  },
  {
    "text": "a map of the apartment to know you've been in every room so you don't stand in front of a wall all day",
    "start": "1545039",
    "end": "1551440"
  },
  {
    "text": "and right uh I think I'll have to demonstrate that",
    "start": "1551440",
    "end": "1557120"
  },
  {
    "text": "I don't really have a fast tester so I'll just demonstrate how this would work in [Music]",
    "start": "1561600",
    "end": "1573679"
  },
  {
    "text": "general okay now here we have uh a main user input Handler in um well for an SMTP server and I load",
    "start": "1573679",
    "end": "1583640"
  },
  {
    "text": "it into my small program [Music]",
    "start": "1583640",
    "end": "1599989"
  },
  {
    "text": "[Music]",
    "start": "1602990",
    "end": "1617400"
  },
  {
    "text": "um the program does have a small bug it converts all links to be blue but I'll fix that",
    "start": "1617440",
    "end": "1624200"
  },
  {
    "text": "perhaps so what we can see here is we have the entire graph damn it what we",
    "start": "1624200",
    "end": "1629279"
  },
  {
    "text": "can see here is we have the entire graph it's all white nothing has been done yet our debugger has debugger has",
    "start": "1629279",
    "end": "1634840"
  },
  {
    "text": "attached and we'll now connect to the sppp server and issue a command",
    "start": "1634840",
    "end": "1641840"
  },
  {
    "text": "[Music]",
    "start": "1643470",
    "end": "1653880"
  },
  {
    "text": "hello here we go now this is the code path that has been taken by this help",
    "start": "1654480",
    "end": "1660600"
  },
  {
    "text": "apparently and we can follow that through well and",
    "start": "1660600",
    "end": "1667039"
  },
  {
    "text": "apparently well we've covered this code here now we issue another command",
    "start": "1667039",
    "end": "1674518"
  },
  {
    "text": "[Music]",
    "start": "1675210",
    "end": "1679890"
  },
  {
    "text": "and we see other parts of the graph being colored",
    "start": "1681720",
    "end": "1685640"
  },
  {
    "text": "[Music]",
    "start": "1689090",
    "end": "1698470"
  },
  {
    "text": "[Music] blue for",
    "start": "1704290",
    "end": "1711120"
  },
  {
    "text": "[Music]",
    "start": "1714540",
    "end": "1721459"
  },
  {
    "text": "[Music]",
    "start": "1726620",
    "end": "1751570"
  },
  {
    "text": "well that's pretty much",
    "start": "1754720",
    "end": "1757480"
  },
  {
    "text": "it um the code should be up for grbs on the blackhead website I don't know today or tomorrow or next week or whenever",
    "start": "1763440",
    "end": "1769559"
  },
  {
    "text": "it's being put",
    "start": "1769559",
    "end": "1772000"
  },
  {
    "text": "[Music] online any questions concerning the part about single simple flow graphing and",
    "start": "1774760",
    "end": "1781080"
  },
  {
    "text": "playing with them",
    "start": "1781080",
    "end": "1787519"
  },
  {
    "text": "okay okay so let's get into the more experimental Parts um structure and class",
    "start": "1787519",
    "end": "1793720"
  },
  {
    "text": "reconstruction um all information about structures and classes and the layout of the structure internally and so on gets",
    "start": "1793720",
    "end": "1800240"
  },
  {
    "text": "lost in the compilation process so whenever you're auditing binaries you really have no clue at all how large",
    "start": "1800240",
    "end": "1805360"
  },
  {
    "text": "those structure members are so you have a buffer inside of a structure of like I don't know 150 chars um and you have a",
    "start": "1805360",
    "end": "1812760"
  },
  {
    "text": "string copy into that buffer of I don't know thousand chars you really don't know how large the buffer is so before",
    "start": "1812760",
    "end": "1819240"
  },
  {
    "text": "you haven't reconstructed the entire structure you can't really estimate whether that string copy is going to be any danger or not so um well this entire",
    "start": "1819240",
    "end": "1828880"
  },
  {
    "text": "structure reconstruction thing came out of the fact that I used to rebuild structures manually which worked by um",
    "start": "1828880",
    "end": "1835799"
  },
  {
    "text": "manually identifying one of the pointers which points to a structure and then going through the entire application and",
    "start": "1835799",
    "end": "1841120"
  },
  {
    "text": "seeing whenever this pointer is being accessed when it's being passed into a sub function or passed into another",
    "start": "1841120",
    "end": "1846320"
  },
  {
    "text": "register tracing all the way down whenever it is being accessed with an offset from it add some like add a new",
    "start": "1846320",
    "end": "1853000"
  },
  {
    "text": "member to the structure and so on and it took forever and ever and was highly",
    "start": "1853000",
    "end": "1858880"
  },
  {
    "text": "annoying and um it is made incredibly or especially annoying by the fact that",
    "start": "1858880",
    "end": "1864440"
  },
  {
    "text": "it's very very repetitive it's really stupid it's nothing that has anything to do with thinking it's just like stupid",
    "start": "1864440",
    "end": "1870600"
  },
  {
    "text": "monkey work um so at some point I thought that A specialized graph might help because",
    "start": "1870600",
    "end": "1876880"
  },
  {
    "text": "you could perhaps potentially trace the entire flow of the pointer through the entire",
    "start": "1876880",
    "end": "1882480"
  },
  {
    "text": "application so um if you follow the pointer through the entire code you can find and all accesses to it so if you",
    "start": "1882679",
    "end": "1890039"
  },
  {
    "text": "find the location where the pointer is being assigned a value for example if you have a pointer to a large structure and that's being Malo like the the",
    "start": "1890039",
    "end": "1897279"
  },
  {
    "text": "pointer is being taken from the return value of a maloc then you identify the point and then you start tracing the",
    "start": "1897279",
    "end": "1903279"
  },
  {
    "text": "pointer all the way through the code and once you're done you pretty much have an exact specification of all like of all",
    "start": "1903279",
    "end": "1909399"
  },
  {
    "text": "buffer boundaries because you've reconstructed all the structure",
    "start": "1909399",
    "end": "1914398"
  },
  {
    "text": "members so um building such a point control graph is not hard um again you",
    "start": "1915240",
    "end": "1921720"
  },
  {
    "text": "start tracing at some location downwards and you keep in mind that well you tracing some kind of",
    "start": "1921720",
    "end": "1927360"
  },
  {
    "text": "register so um you start tracing code at the location Trace down Trace down until",
    "start": "1927360",
    "end": "1932519"
  },
  {
    "text": "you either encounter a local branch or a write access to your variable or a read access to your variable or um optionally",
    "start": "1932519",
    "end": "1940679"
  },
  {
    "text": "if you want to go into the sub functions to a far Branch like a call so when you hit one of those situ",
    "start": "1940679",
    "end": "1948039"
  },
  {
    "text": "ation like a local branch well for a local branch you'll just behave as if you're doing a flow graph you just split",
    "start": "1948039",
    "end": "1953720"
  },
  {
    "text": "the graph as before now if somebody writes to the register you're tracking you can quit working there because",
    "start": "1953720",
    "end": "1959760"
  },
  {
    "text": "obviously somebody doesn't need this pointer anymore and is overriding it whenever there's a read access to this",
    "start": "1959760",
    "end": "1965159"
  },
  {
    "text": "variable you have to split the graph again so if your pointer in E for example E points to structure that's",
    "start": "1965159",
    "end": "1971440"
  },
  {
    "text": "being moved into ebx you have to split the graph at that location and then Trace both registers downwards",
    "start": "1971440",
    "end": "1978120"
  },
  {
    "text": "and um if you have a non-local branch like a call you can decide to recurse into sub functions and well see what's",
    "start": "1978120",
    "end": "1985039"
  },
  {
    "text": "going on there um what is tricky on x86 though is if you decide to recurse and",
    "start": "1985039",
    "end": "1990799"
  },
  {
    "text": "somebody's pushing the pointer on the stack you have to well know oh my pointer is on the stack now and the next",
    "start": "1990799",
    "end": "1997480"
  },
  {
    "text": "function will probably take it as argument and so on um the code to do that is really really ugly but um you",
    "start": "1997480",
    "end": "2004600"
  },
  {
    "text": "won't have these kind of problems on spark or mips or whatever",
    "start": "2004600",
    "end": "2009518"
  },
  {
    "text": "okay so we look at um a simple Constructor for the is HTTP",
    "start": "2009720",
    "end": "2016290"
  },
  {
    "text": "[Music] request",
    "start": "2016290",
    "end": "2022150"
  },
  {
    "text": "[Music]",
    "start": "2022150",
    "end": "2033120"
  },
  {
    "text": "um all right um in visual C compiled code you usually have the this pointer the pointer to the object that you're",
    "start": "2033120",
    "end": "2039240"
  },
  {
    "text": "currently well dealing with in ECX so what we see here is ECX gets into this",
    "start": "2039240",
    "end": "2045440"
  },
  {
    "text": "Constructor is moved into ESI and then well there's one structure",
    "start": "2045440",
    "end": "2051638"
  },
  {
    "text": "member being accessed here and then there's a structure member being accessed here and",
    "start": "2051639",
    "end": "2058480"
  },
  {
    "text": "here and down here again and so on and we can also see that this is a",
    "start": "2058480",
    "end": "2064638"
  },
  {
    "text": "derived class basically because we see that this Constructor is directly calling another Constructor with the",
    "start": "2064639",
    "end": "2071000"
  },
  {
    "text": "same this pointer so for now we'll just generate a pointer control flow graph for this",
    "start": "2071000",
    "end": "2077240"
  },
  {
    "text": "function without going into any of the recursion crap for this I've built a small plugin um here we",
    "start": "2077240",
    "end": "2085690"
  },
  {
    "text": "[Music]",
    "start": "2085690",
    "end": "2091560"
  },
  {
    "text": "are and and you can see all the the structure offsets have been converted to",
    "start": "2091560",
    "end": "2097040"
  },
  {
    "text": "structure numbers or",
    "start": "2097040",
    "end": "2100520"
  },
  {
    "text": "variables the small generated graph for this function looks like this basically",
    "start": "2102440",
    "end": "2107839"
  },
  {
    "text": "um you have the beginning of the function where the value is still in",
    "start": "2107839",
    "end": "2114680"
  },
  {
    "text": "ECX this block here as the force block on the very top and then the graph is",
    "start": "2116760",
    "end": "2122440"
  },
  {
    "text": "being split because there's a read access to ECX so the graph continues with with ESI",
    "start": "2122440",
    "end": "2128520"
  },
  {
    "text": "and ECX left and right um ECX is apparently not being",
    "start": "2128520",
    "end": "2134320"
  },
  {
    "text": "read from again so that node goes all the way down through the entire function and then you have on the right side",
    "start": "2134320",
    "end": "2139560"
  },
  {
    "text": "another split in the graph where um ESI is being moved into eax again at location 65 f2a uh",
    "start": "2139560",
    "end": "2149359"
  },
  {
    "text": "whatever down here in order to be a return value",
    "start": "2152240",
    "end": "2158040"
  },
  {
    "text": "so um this is not terribly useful",
    "start": "2159760",
    "end": "2164680"
  },
  {
    "text": "yet thanks a damn",
    "start": "2166760",
    "end": "2172800"
  },
  {
    "text": "it have to repeat something [Music]",
    "start": "2172800",
    "end": "2194280"
  },
  {
    "text": "okay now what we see here is that apparently this function here only",
    "start": "2195079",
    "end": "2202359"
  },
  {
    "text": "accesses these members here now um You might ask what that huge buffer in the beginning is that is the",
    "start": "2202359",
    "end": "2209280"
  },
  {
    "text": "original class from which this one was derived so basically you can by using this this object reconstructor in a",
    "start": "2209280",
    "end": "2215680"
  },
  {
    "text": "Smart Way see how well which object members have or which class members have",
    "start": "2215680",
    "end": "2221319"
  },
  {
    "text": "been added in a derived object in comparison to the original object from the binary and um what you can do too is",
    "start": "2221319",
    "end": "2228160"
  },
  {
    "text": "you can automatically find uninitialized um well class members completely automatically by first reconstructing",
    "start": "2228160",
    "end": "2235240"
  },
  {
    "text": "all the like the structure well well running this thing against the Constructor of an object and then",
    "start": "2235240",
    "end": "2241000"
  },
  {
    "text": "running this thing against um well all other functions but like all other methods but the Constructor and then you",
    "start": "2241000",
    "end": "2248040"
  },
  {
    "text": "compare the two generated structures and if there's any member in the structure which you've generated from all other",
    "start": "2248040",
    "end": "2253640"
  },
  {
    "text": "functions but the Constructor which is not in the structure generated from The Constructor obviously they have members",
    "start": "2253640",
    "end": "2259760"
  },
  {
    "text": "in their class which they're not properly initializing and wherever or if you have ever coded C++ you really know that",
    "start": "2259760",
    "end": "2266400"
  },
  {
    "text": "analized class members can screw you pretty badly",
    "start": "2266400",
    "end": "2271599"
  },
  {
    "text": "[Music] somewhere so as we seen this has not",
    "start": "2271670",
    "end": "2278560"
  },
  {
    "text": "this has not been terribly useful yet because we've only covered a very very small bit of code and have only like reconstructed five members in a class",
    "start": "2278560",
    "end": "2285599"
  },
  {
    "text": "which is I don't know huge so um completely recursing into all subs and",
    "start": "2285599",
    "end": "2291319"
  },
  {
    "text": "tracing through the entire call tree not only through one function is Gravely needed um well my plug-in has a feature",
    "start": "2291319",
    "end": "2298359"
  },
  {
    "text": "for that too the only problem is that the graphs being generated with this are",
    "start": "2298359",
    "end": "2304040"
  },
  {
    "text": "um not very visual anymore for",
    "start": "2304040",
    "end": "2310480"
  },
  {
    "text": "[Music]",
    "start": "2314140",
    "end": "2343078"
  },
  {
    "text": "I've wanted to automate this for a long time",
    "start": "2349839",
    "end": "2354319"
  },
  {
    "text": "[Music]",
    "start": "2355110",
    "end": "2390300"
  },
  {
    "text": "all right now as you can see we have a fairly accurate and fairly well fairly complete",
    "start": "2391839",
    "end": "2398040"
  },
  {
    "text": "representation of the HTTP request structure or of the its internal data layout we have an array of um of",
    "start": "2398040",
    "end": "2404800"
  },
  {
    "text": "structures or buffers here um we have sizes that would show up normally like we have these huge amounts of pointers",
    "start": "2404800",
    "end": "2410520"
  },
  {
    "text": "to um all the buffer classes that this um this Constructor or this object or",
    "start": "2410520",
    "end": "2416200"
  },
  {
    "text": "class uses and um now if we ever see a Sprint into a buffer or anything else",
    "start": "2416200",
    "end": "2421359"
  },
  {
    "text": "which could be dangerous into a buffer we can see whether that would actually be dangerous because we can now estimate the buffer sizes so um this has saved us",
    "start": "2421359",
    "end": "2429200"
  },
  {
    "text": "about I don't know four days of",
    "start": "2429200",
    "end": "2433240"
  },
  {
    "text": "work um the next thing you can do with with the object reconstruction thing is vtable pausing now a class isn't much",
    "start": "2435240",
    "end": "2442319"
  },
  {
    "text": "more than a structure with a bunch of methods Associated to it and a v table is a table full of methods or virtual",
    "start": "2442319",
    "end": "2448880"
  },
  {
    "text": "methods of that class so a v table is really convenient for any kind of reverse engineering because you get a",
    "start": "2448880",
    "end": "2455000"
  },
  {
    "text": "bunch of functions all associated with the same structure and if you have a bunch of functions all associated with the same structure you",
    "start": "2455000",
    "end": "2460760"
  },
  {
    "text": "can get a very very accurate representation because the more code you have which deals with the structure the",
    "start": "2460760",
    "end": "2466240"
  },
  {
    "text": "more accurate your presentation will be so we'll look for a v table in this this",
    "start": "2466240",
    "end": "2471480"
  },
  {
    "text": "application",
    "start": "2471480",
    "end": "2474480"
  },
  {
    "text": "[Music]",
    "start": "2476750",
    "end": "2480090"
  },
  {
    "text": "[Music]",
    "start": "2482160",
    "end": "2496299"
  },
  {
    "text": "okay um here for example we have the the vtable for HTTP request base so um well",
    "start": "2497400",
    "end": "2505800"
  },
  {
    "text": "we've already reconstructed HTP request we're going to look for something else",
    "start": "2505800",
    "end": "2511200"
  },
  {
    "text": "[Music]",
    "start": "2511810",
    "end": "2529030"
  },
  {
    "text": "boring okay um this hasn't been rehearsed so if my code crashes forgive me but um if we well we're trying to",
    "start": "2529119",
    "end": "2536119"
  },
  {
    "text": "reconstruct um W3 is service object from its V table and basically you just run",
    "start": "2536119",
    "end": "2541960"
  },
  {
    "text": "the plug-in um behave as before",
    "start": "2541960",
    "end": "2546920"
  },
  {
    "text": "[Music]",
    "start": "2548710",
    "end": "2552260"
  },
  {
    "text": "and this time you just have to check this nice checkpoint here uh check box not point and it'll run through and",
    "start": "2556720",
    "end": "2564720"
  },
  {
    "text": "basically call itself for every function in that V table with the same this pointer and uh that'll give you a pretty",
    "start": "2564720",
    "end": "2570520"
  },
  {
    "text": "good representation of the structure",
    "start": "2570520",
    "end": "2574480"
  },
  {
    "text": "[Music]",
    "start": "2577080",
    "end": "2580199"
  },
  {
    "text": "I'll not B you with this now all right",
    "start": "2586480",
    "end": "2592079"
  },
  {
    "text": "um so to sum things up structured data layouts can be automatically reconstructed from the binary um by just",
    "start": "2592079",
    "end": "2599559"
  },
  {
    "text": "generating a graph from like a point of control flow graph and following it through through the entire application",
    "start": "2599559",
    "end": "2605280"
  },
  {
    "text": "um by the way this can be used too for Tain graphing for seeing which um parts of the application are being touched by",
    "start": "2605280",
    "end": "2610559"
  },
  {
    "text": "user data if you just follow the pointer through the entire application but that's um something else um you can",
    "start": "2610559",
    "end": "2617000"
  },
  {
    "text": "automatically reconstruct data layouts um by pausing V tables um large graphs",
    "start": "2617000",
    "end": "2623319"
  },
  {
    "text": "can be ugly and um something that um I haven't mentioned before about RPC interfaces",
    "start": "2623319",
    "end": "2629119"
  },
  {
    "text": "such as like object RPC like such as um com com plus dcom help us because they",
    "start": "2629119",
    "end": "2635720"
  },
  {
    "text": "publicly export V tabls I mean um if anyone has ever dealt with that nightmare that's called Comm they have",
    "start": "2635720",
    "end": "2643160"
  },
  {
    "text": "something called interfaces interfaces are nothing but a pointer to a v table so um you get an interface you have the",
    "start": "2643160",
    "end": "2649599"
  },
  {
    "text": "V table first element of that V table will most likely be a Constructor then go through there and um the nice part is",
    "start": "2649599",
    "end": "2657200"
  },
  {
    "text": "you even get um like some kind of prototype for that function because all these object RPC things export um well",
    "start": "2657200",
    "end": "2665160"
  },
  {
    "text": "prototypes for all methods um this automated structure reconstruction speeds up binary analysis",
    "start": "2665160",
    "end": "2672319"
  },
  {
    "text": "by a large Factor actually I doubt it's it's feasible to analyze binaries manually without having an object",
    "start": "2672319",
    "end": "2678599"
  },
  {
    "text": "reconstructor if you're dealing with OP code without an object reconstructor you'll get old because for example with",
    "start": "2678599",
    "end": "2684559"
  },
  {
    "text": "IIs you need to reconstruct all those classes manually so by the time you finish that there will be um well two",
    "start": "2684559",
    "end": "2691720"
  },
  {
    "text": "new versions of Windows out and a new licensing new licensing scheme too",
    "start": "2691720",
    "end": "2697720"
  },
  {
    "text": "um something that I still wanted to add to this at some point um is automatic",
    "start": "2697720",
    "end": "2702880"
  },
  {
    "text": "type reconstruction basically after the Reconstruction of the structure is done I would iterate through the entire",
    "start": "2702880",
    "end": "2708520"
  },
  {
    "text": "application and see wherever it's referenced and for example if I see um while one of the structures members",
    "start": "2708520",
    "end": "2714680"
  },
  {
    "text": "being passed into a receive call as a socket handle I'd automatically reconstruct the type for this and say",
    "start": "2714680",
    "end": "2720200"
  },
  {
    "text": "this is a socket handle if I see a string copy into a buffer I'd automatically reconstruct the type and say hey this is um well a CH buffer if I",
    "start": "2720200",
    "end": "2728440"
  },
  {
    "text": "see a Constructor for another class returning a member of this structure I could say it's a class pointer and so on",
    "start": "2728440",
    "end": "2735000"
  },
  {
    "text": "and so on um I'm not going to do that anytime soon because I'm trying or I'm going to rewrite this to be CPU",
    "start": "2735000",
    "end": "2741559"
  },
  {
    "text": "independent sometime like for next year um and then I might add the type",
    "start": "2741559",
    "end": "2748520"
  },
  {
    "text": "engine too any questions concerning object and type reconstruction",
    "start": "2748520",
    "end": "2755599"
  },
  {
    "text": "[Music] all right I'll quickly have to check",
    "start": "2755780",
    "end": "2760839"
  },
  {
    "text": "what the time is minus 3 you said",
    "start": "2760839",
    "end": "2766400"
  },
  {
    "text": "okay okay buffer definition graphs um I'll have to drink some",
    "start": "2766839",
    "end": "2774400"
  },
  {
    "text": "water all right many problematic functions are not dangerous if the target buffer is large enough to hold all the data of course um but sometimes",
    "start": "2776760",
    "end": "2784640"
  },
  {
    "text": "you have the situation where you have a string copy which doesn't take like u a direct pointer to a CH buffer but just a",
    "start": "2784640",
    "end": "2790400"
  },
  {
    "text": "CH pointer it has gotten from a function layer more outwards so um if you're in",
    "start": "2790400",
    "end": "2795520"
  },
  {
    "text": "the disassembly and you spot one of those things you have to trace where this pointer came from and um the reason",
    "start": "2795520",
    "end": "2801480"
  },
  {
    "text": "why I wrote this this tool is because I spent two days um one time cuz I had found a a strange situation in a fairly",
    "start": "2801480",
    "end": "2808079"
  },
  {
    "text": "lar construnction I started tracing it upwards where that pointer came from I traced and I traced and I traced and",
    "start": "2808079",
    "end": "2814960"
  },
  {
    "text": "after 4 hours I realized it's a recursive function so that was",
    "start": "2814960",
    "end": "2822000"
  },
  {
    "text": "bad um so at that point I decided that there needs to be some way to automate",
    "start": "2822000",
    "end": "2827880"
  },
  {
    "text": "this and um again specialized graphs will help",
    "start": "2827880",
    "end": "2833680"
  },
  {
    "text": "you basically to generate one of those graphs is you identify the location from which you want to trace upwards and then",
    "start": "2834599",
    "end": "2840800"
  },
  {
    "text": "you trace the code upwards until one of the following things happens the current instruction is the target of a branch",
    "start": "2840800",
    "end": "2847079"
  },
  {
    "text": "the current register is written to from another register the current register is loaded with something or the current",
    "start": "2847079",
    "end": "2852839"
  },
  {
    "text": "register is a return value from a function if that happens you do the",
    "start": "2852839",
    "end": "2858760"
  },
  {
    "text": "following the current instruction well if the current instruction was the target of a branch you have to",
    "start": "2858760",
    "end": "2864000"
  },
  {
    "text": "multisplit the graph for example if there's 10 branches all leading to the same location you have to split the",
    "start": "2864000",
    "end": "2870280"
  },
  {
    "text": "graph into 10 different locations and go upwards from there so for example if you have a function which is called from",
    "start": "2870280",
    "end": "2875599"
  },
  {
    "text": "well many locations split quite a bit and um if the current register is overwritten from another register",
    "start": "2875599",
    "end": "2881760"
  },
  {
    "text": "variable you have to start tracing that variable instead now because the pointer obviously comes from this variable if",
    "start": "2881760",
    "end": "2887920"
  },
  {
    "text": "you have e being overwritten with ebx you start tracing ebx afterwards um if the current register is",
    "start": "2887920",
    "end": "2895280"
  },
  {
    "text": "loaded with some something you'll have to analyze the situation if you can determine it's a buffer load then um",
    "start": "2895280",
    "end": "2901359"
  },
  {
    "text": "this plug-in will color the node blue and return and just say Okay um this is Alpha code hardly ever",
    "start": "2901359",
    "end": "2907800"
  },
  {
    "text": "works and um if the current register is the return value from another function",
    "start": "2907800",
    "end": "2913480"
  },
  {
    "text": "like from a maloc or from another function do which does AOC you can well you can decide in the future to either",
    "start": "2913480",
    "end": "2920640"
  },
  {
    "text": "well go into that function and see what's being done there right now the the plugin will just scream and say oh I",
    "start": "2920640",
    "end": "2926200"
  },
  {
    "text": "can't figure this out and color the not red um such a pointer control graph",
    "start": "2926200",
    "end": "2933680"
  },
  {
    "text": "would or such a buffer definition graph would look something or somewhat like",
    "start": "2933680",
    "end": "2939520"
  },
  {
    "text": "[Music]",
    "start": "2942620",
    "end": "2947610"
  },
  {
    "text": "this all [Music] right so in this case we have um well a",
    "start": "2950720",
    "end": "2959079"
  },
  {
    "text": "bounded string copy but we don't really care for this because this is just a demonstration and it takes as a source",
    "start": "2959079",
    "end": "2965799"
  },
  {
    "text": "buffer um a pointer to a buffer and we don't really",
    "start": "2965799",
    "end": "2971319"
  },
  {
    "text": "know where that comes from it's um a local variable we could now go up here",
    "start": "2971319",
    "end": "2977400"
  },
  {
    "text": "and try to find out where this variable was being written to was being read from here um was being read from here uh I'll",
    "start": "2977400",
    "end": "2984640"
  },
  {
    "text": "take forever",
    "start": "2984640",
    "end": "2988520"
  },
  {
    "text": "oops or we use this plugin that I've written hit alt8",
    "start": "2991240",
    "end": "2997000"
  },
  {
    "text": "select register tracing because we're tracing e enter that name and hit",
    "start": "2997000",
    "end": "3003480"
  },
  {
    "text": "[Music]",
    "start": "3005410",
    "end": "3015280"
  },
  {
    "text": "enter and we'll get a nice graph which at the end has a buffer [Music]",
    "start": "3015280",
    "end": "3020720"
  },
  {
    "text": "definition black can't need to be the bad guy TR to keep the SS on track so",
    "start": "3020720",
    "end": "3025960"
  },
  {
    "text": "probably got three or four minutes three or four minutes all right yeah I was just told that um I got",
    "start": "3025960",
    "end": "3033200"
  },
  {
    "text": "another three or 4 minutes all right so my plug-in has",
    "start": "3033200",
    "end": "3040200"
  },
  {
    "text": "found the buffer definition at address 41429",
    "start": "3040200",
    "end": "3045040"
  },
  {
    "text": "[Music] e and here we are that's quite elsewhere",
    "start": "3048060",
    "end": "3053720"
  },
  {
    "text": "in the code and then we can check what the size of of this buffers and it's 1,24",
    "start": "3053720",
    "end": "3059480"
  },
  {
    "text": "bytes so we jump back and we see the target buffer is",
    "start": "3059480",
    "end": "3064839"
  },
  {
    "text": "only 256 bytes and if this was not a bounded swing copy somebody would be",
    "start": "3064839",
    "end": "3070359"
  },
  {
    "text": "screwed um all right I can demonstrate some more since I still have",
    "start": "3074079",
    "end": "3079280"
  },
  {
    "text": "time um same thing here we have another pointer [Music]",
    "start": "3079280",
    "end": "3086808"
  },
  {
    "text": "the graph looks a bit different this time because we have multiple places where it might be",
    "start": "3095920",
    "end": "3100920"
  },
  {
    "text": "[Music]",
    "start": "3102450",
    "end": "3109160"
  },
  {
    "text": "defined in this case we have a local structure like buffer inside a structure",
    "start": "3109160",
    "end": "3116400"
  },
  {
    "text": "[Music]",
    "start": "3117500",
    "end": "3120809"
  },
  {
    "text": "and here we can see it complains because the pointer is a return value from an S strr",
    "start": "3124760",
    "end": "3130640"
  },
  {
    "text": "CHR and we could just um basically patch some code into this to recall itself for",
    "start": "3130640",
    "end": "3136960"
  },
  {
    "text": "the first argument to S strr CHR and Patch the two graphs together and then we could just go all the way",
    "start": "3136960",
    "end": "3143359"
  },
  {
    "text": "through and the cool thing about this is you um you find all possible buffer",
    "start": "3143359",
    "end": "3148440"
  },
  {
    "text": "definitions which go into a certain function so um for example if you have a buggy logging function somewhere and you",
    "start": "3148440",
    "end": "3155960"
  },
  {
    "text": "want to know whether there's any location at all where you can put data in there you generate a graph and then you iterate through that graph and um",
    "start": "3155960",
    "end": "3162599"
  },
  {
    "text": "for every buffer definition you check the size so out of a sudden you can do constraints you say oh if this function",
    "start": "3162599",
    "end": "3168079"
  },
  {
    "text": "re receives a buffer of more than thousand bytes I'll be or the the programmer or the the guy who's running",
    "start": "3168079",
    "end": "3173160"
  },
  {
    "text": "that software will be screwed so um you write a small program which will check",
    "start": "3173160",
    "end": "3178480"
  },
  {
    "text": "all inputs for this function in that program whether it's going to be that size or not that's pretty useful and um",
    "start": "3178480",
    "end": "3186480"
  },
  {
    "text": "we'll open you a lot of doors and um I think the three or four minutes are",
    "start": "3186480",
    "end": "3191960"
  },
  {
    "text": "over any questions yes can you",
    "start": "3191960",
    "end": "3198560"
  },
  {
    "text": "[Music] track well um in a way if you have a maloc of",
    "start": "3198560",
    "end": "3204640"
  },
  {
    "text": "course oh the the question was whether I can track Heap allocated buffers and right now right now this thing colors",
    "start": "3204640",
    "end": "3210680"
  },
  {
    "text": "the graph red because it can't deal with Malo yet but it's trivial to add code to see okay if the it's readed and the call",
    "start": "3210680",
    "end": "3217119"
  },
  {
    "text": "is amalog then please take the first argument and deal with that so tracking Heap allocated buffers is no problem at",
    "start": "3217119",
    "end": "3223240"
  },
  {
    "text": "all any other questions yes can you go over quickly",
    "start": "3223240",
    "end": "3228480"
  },
  {
    "text": "the main this can be used from the standpoint of security analysis",
    "start": "3228480",
    "end": "3234160"
  },
  {
    "text": "of um have not done that or the question was whether I could quickly go over this how this can be used for security",
    "start": "3234160",
    "end": "3240440"
  },
  {
    "text": "analysis uh it can be used to find bugs and speed up that process very much in terms of um well before it was",
    "start": "3240440",
    "end": "3248160"
  },
  {
    "text": "infeasible to or almost infeasible to audit binaries by hand or very very time",
    "start": "3248160",
    "end": "3253400"
  },
  {
    "text": "consuming and now this is so practical that when I audit Source I frequently compile it with GBU symbols and use",
    "start": "3253400",
    "end": "3259640"
  },
  {
    "text": "these these tools on them to verify situations so it helps you with finding bugs and opening computers",
    "start": "3259640",
    "end": "3267200"
  },
  {
    "text": "any other questions joey yes you morning I don't",
    "start": "3267200",
    "end": "3275520"
  },
  {
    "text": "know those people that have followed my speech last year probably know now that I'm not a very funny guy in the",
    "start": "3275520",
    "end": "3280839"
  },
  {
    "text": "morning all right if there's no more questions if if there's no more",
    "start": "3280839",
    "end": "3286240"
  },
  {
    "text": "questions thanks a lot",
    "start": "3286240",
    "end": "3290040"
  },
  {
    "text": "[Applause]",
    "start": "3292300",
    "end": "3296260"
  },
  {
    "text": "sorry about that I got assigned to your room after you started I would have talked to you about that",
    "start": "3306119",
    "end": "3312720"
  },
  {
    "text": "beforehand that was awesome thanks thanks",
    "start": "3312720",
    "end": "3318240"
  },
  {
    "text": "y",
    "start": "3325319",
    "end": "3328319"
  },
  {
    "text": "e",
    "start": "3355240",
    "end": "3358240"
  },
  {
    "text": "e",
    "start": "3385240",
    "end": "3388240"
  },
  {
    "text": "e",
    "start": "3415240",
    "end": "3418240"
  },
  {
    "text": "e",
    "start": "3445160",
    "end": "3448160"
  },
  {
    "text": "e",
    "start": "3475119",
    "end": "3478119"
  },
  {
    "text": "e",
    "start": "3505119",
    "end": "3508119"
  },
  {
    "text": "e",
    "start": "3535039",
    "end": "3538039"
  },
  {
    "text": "e",
    "start": "3565039",
    "end": "3568039"
  },
  {
    "text": "e e",
    "start": "3595039",
    "end": "3599039"
  }
]