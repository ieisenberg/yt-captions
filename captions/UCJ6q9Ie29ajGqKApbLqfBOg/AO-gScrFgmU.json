[
  {
    "start": "0",
    "end": "28000"
  },
  {
    "text": "hi everyone thanks so much for coming today I'm gonna give a talk entitled the origin of our a simple species how",
    "start": "0",
    "end": "7020"
  },
  {
    "text": "standards drive bugs in script engines I'm Natalie Savannah vich and I'm a security researcher on Google's project",
    "start": "7020",
    "end": "13200"
  },
  {
    "text": "zero for the past year or so I've been looking at JavaScript engines and JavaScript like languages and it found a",
    "start": "13200",
    "end": "19619"
  },
  {
    "text": "lot of vulnerabilities in them so today I want to share with you a bit about what I've learned both about JavaScript",
    "start": "19619",
    "end": "25199"
  },
  {
    "text": "and the underlying standard so there's a lot of talks at blackhat about bugs and",
    "start": "25199",
    "end": "31740"
  },
  {
    "start": "28000",
    "end": "59000"
  },
  {
    "text": "most of them are about where there are bugs or how to find bugs or how to exploit bugs but today I'm going to talk",
    "start": "31740",
    "end": "38250"
  },
  {
    "text": "about something a little bit different I'm gonna talk about why there are bugs one of my most frequently asked",
    "start": "38250",
    "end": "43950"
  },
  {
    "text": "questions is why are there so many bugs in JavaScript or why do you think there",
    "start": "43950",
    "end": "49559"
  },
  {
    "text": "are so many bugs in flash and there's a lot of different reasons but one of them is the underlying standard and the",
    "start": "49559",
    "end": "55829"
  },
  {
    "text": "features that the standard ask developers to implement so to start off I'm going to talk a little bit about the",
    "start": "55829",
    "end": "62280"
  },
  {
    "start": "59000",
    "end": "79000"
  },
  {
    "text": "JavaScript standard in its history and then I'll talk a bit about how standards in general can lead to security issues",
    "start": "62280",
    "end": "68159"
  },
  {
    "text": "and finally I'll give some examples of bugs and especially bugs that are very similar that occurred in different",
    "start": "68159",
    "end": "73979"
  },
  {
    "text": "implementations of JavaScript and explain how they relate to the underlying standard so what is aekta",
    "start": "73979",
    "end": "80640"
  },
  {
    "text": "script Okuma script is the JavaScript standard it's what developers implement when they want to create a JavaScript",
    "start": "80640",
    "end": "86670"
  },
  {
    "text": "engine and javascript has a bit of a storied history so the first JavaScript engine was",
    "start": "86670",
    "end": "92579"
  },
  {
    "text": "created by Brendan Eich in 1995 it was originally called mocha and then live",
    "start": "92579",
    "end": "97710"
  },
  {
    "text": "script and then finally JavaScript and then in 1996 Internet Explorer implemented a JavaScript like language",
    "start": "97710",
    "end": "104250"
  },
  {
    "text": "called J script in 1997 there were calls to standardized JavaScript and the first",
    "start": "104250",
    "end": "111119"
  },
  {
    "text": "ACMA script scattered was released and in the two subsequent years two more versions were released generally reached",
    "start": "111119",
    "end": "117990"
  },
  {
    "text": "a gap in the history of the specification what happened here was atma script four and that kind of script",
    "start": "117990",
    "end": "123750"
  },
  {
    "text": "for was a bit of a departure from ACMA script three I think the most important difference was that it was strictly",
    "start": "123750",
    "end": "129090"
  },
  {
    "text": "typed so in JavaScript right now if creative area you know you can change it to be a",
    "start": "129090",
    "end": "134799"
  },
  {
    "text": "different type no problem but I can my for didn't allow this and I come before I never really took off and it was ten",
    "start": "134799",
    "end": "141250"
  },
  {
    "text": "years later in 2009 when the next version of a chemist script was was created and this long gap is actually",
    "start": "141250",
    "end": "148000"
  },
  {
    "text": "had a few consequences for the language which I'll explain later then in the years after that 2011 2015-2016 more",
    "start": "148000",
    "end": "156310"
  },
  {
    "text": "versions have been really released and they continued to work on it I could script now so there's a couple of things",
    "start": "156310",
    "end": "162489"
  },
  {
    "start": "160000",
    "end": "204000"
  },
  {
    "text": "I want you to realize about this first I have this picture of what I think the early JavaScript developers were wearing",
    "start": "162489",
    "end": "168310"
  },
  {
    "text": "in 1995 and I have a picture of the Internet in 1995 and I have this rack",
    "start": "168310",
    "end": "174370"
  },
  {
    "text": "article smashing the stack for fun and profit which was released in 1996 so one",
    "start": "174370",
    "end": "179889"
  },
  {
    "text": "year after the first JavaScript engine was created so let something to realize JavaScript was started before people",
    "start": "179889",
    "end": "186129"
  },
  {
    "text": "even knew that memory corruption could cause code execution so I want to be clear you know I'm not trying to be down",
    "start": "186129",
    "end": "192250"
  },
  {
    "text": "on anyone who worked on early JavaScript but I do think that there's a lot we can learn from what happened with JavaScript",
    "start": "192250",
    "end": "197530"
  },
  {
    "text": "about how to design languages and how specifications can impact the security",
    "start": "197530",
    "end": "202659"
  },
  {
    "text": "of a product the other thing to realize is that specifications are difficult not",
    "start": "202659",
    "end": "208780"
  },
  {
    "start": "204000",
    "end": "230000"
  },
  {
    "text": "just because you have to think of features it's also sometimes difficult to agree on the features and there are",
    "start": "208780",
    "end": "214329"
  },
  {
    "text": "definitely features that went into JavaScript not because anyone thought they were the best idea but it because it was what they could agree on and I'm",
    "start": "214329",
    "end": "220659"
  },
  {
    "text": "not going to talk about that today I'm going to focus on the features of the specification but there definitely is",
    "start": "220659",
    "end": "226030"
  },
  {
    "text": "more to creating a specification than coming up with a lot of good features so",
    "start": "226030",
    "end": "231220"
  },
  {
    "start": "230000",
    "end": "257000"
  },
  {
    "text": "what are the implementations of Eknath script the main ones are in browsers there's one in every main browser in",
    "start": "231220",
    "end": "237549"
  },
  {
    "text": "edge in chrome in Firefox and in Safari and then the other big player in the ACMA script space is Adobe Flash Adobe",
    "start": "237549",
    "end": "244959"
  },
  {
    "text": "Flash actually has two implementations of akima script there's the ActionScript 2 engine which is aekta 3 compliant more",
    "start": "244959",
    "end": "251500"
  },
  {
    "text": "or less and there is the ActionScript 3 VM which is echinus script 4",
    "start": "251500",
    "end": "257220"
  },
  {
    "start": "257000",
    "end": "340000"
  },
  {
    "text": "so how do standards lead to vulnerabilities well there's a few different ways the simplest is sometimes",
    "start": "257220",
    "end": "263380"
  },
  {
    "text": "there's a vulnerability in the standard and this doesn't happen with JavaScript very often but it has",
    "start": "263380",
    "end": "268389"
  },
  {
    "text": "happened with other Lange other specifications for example in the 802 dot 11 standard there was something",
    "start": "268389",
    "end": "274479"
  },
  {
    "text": "called a DDoS attack and pretty much what that was is you can send a D off frame to an access point and it would be",
    "start": "274479",
    "end": "280690"
  },
  {
    "text": "authenticate a person until they weren't connected anymore and this was a great way to prank your friends and was also",
    "start": "280690",
    "end": "285970"
  },
  {
    "text": "useful to attackers and the reason this happened was this is what the spec said that you didn't have to authenticate",
    "start": "285970",
    "end": "291130"
  },
  {
    "text": "this frame and there was no way that a developer could fix that that's what the spec said but what happens more often is",
    "start": "291130",
    "end": "297970"
  },
  {
    "text": "that specifications have features that lend themselves to security problems for example sometimes there's unnecessary",
    "start": "297970",
    "end": "304419"
  },
  {
    "text": "features that are poorly used sometimes there's overly complex features that would be less vulnerable if they were",
    "start": "304419",
    "end": "310240"
  },
  {
    "text": "simplified sometimes features are poorly specified and the lack of clarity leads to security issues and sometimes updates",
    "start": "310240",
    "end": "317680"
  },
  {
    "text": "the features caused problems and this happens in a quite a bit just because of that big ten-year gap if you imagine",
    "start": "317680",
    "end": "324340"
  },
  {
    "text": "there was code written ten years ago and then someone has to add all these changes to it it's probably not the same",
    "start": "324340",
    "end": "329590"
  },
  {
    "text": "person and even if it was they've probably forgot all the assumptions they made so a lot of vulnerabilities can",
    "start": "329590",
    "end": "335169"
  },
  {
    "text": "happen when really core functionality has to be changed in certain ways so what are the vulnerable features of",
    "start": "335169",
    "end": "342190"
  },
  {
    "text": "JavaScript I'm going to talk about a few today I'll start off by talking about weak typing and then prototype fallback",
    "start": "342190",
    "end": "348370"
  },
  {
    "text": "a reason objects typed arrays and function dot color so javascript is",
    "start": "348370",
    "end": "354250"
  },
  {
    "start": "353000",
    "end": "421000"
  },
  {
    "text": "weakly typed to explain what this means you've got this variable here variable a and it can be a number it can be a",
    "start": "354250",
    "end": "361240"
  },
  {
    "text": "string it can be an object it can be a function it can basically be anything so",
    "start": "361240",
    "end": "366760"
  },
  {
    "text": "that's pretty simple but something that people don't always expect is this is true about classing too so you have this",
    "start": "366760",
    "end": "372460"
  },
  {
    "text": "object with a property my prop that can be seven and that can be string and most languages that support classes support",
    "start": "372460",
    "end": "378940"
  },
  {
    "text": "having a member of a specific type but javascript doesn't support this in JavaScript any member can be any type",
    "start": "378940",
    "end": "385020"
  },
  {
    "text": "but what's even more interesting is this even applies to this object so if you",
    "start": "385020",
    "end": "390789"
  },
  {
    "text": "make a call with a call to a method on an object that this object does not need",
    "start": "390789",
    "end": "397060"
  },
  {
    "text": "to be of the right type so to give an example here we have this variable a and then we're",
    "start": "397060",
    "end": "402940"
  },
  {
    "text": "taking the method array dot join off of it so that's what we'll convert an array to a string that's printable and then if",
    "start": "402940",
    "end": "409569"
  },
  {
    "text": "you use this method called B dot call and then make this object seven this to string function for the array will",
    "start": "409569",
    "end": "416410"
  },
  {
    "text": "actually be called an integer and I think a lot of people don't expect that that's possible so to give an example of",
    "start": "416410",
    "end": "423490"
  },
  {
    "start": "421000",
    "end": "495000"
  },
  {
    "text": "a bug that was caused by this functionality this is a vulnerability that me and Tavis Ormandy found in the",
    "start": "423490",
    "end": "429550"
  },
  {
    "text": "Microsoft MP engine and this is a component of Windows Defender that scans files on your file system to determine",
    "start": "429550",
    "end": "435729"
  },
  {
    "text": "whether or not they're malicious and it tries to execute scripts to see if their malicious sometimes and the scanning",
    "start": "435729",
    "end": "442030"
  },
  {
    "text": "part had this vulnerability so you create this error object and then you create another object with a member",
    "start": "442030",
    "end": "448659"
  },
  {
    "text": "called message with a value of seven and then you look you take the to string",
    "start": "448659",
    "end": "453849"
  },
  {
    "text": "method off of this error object and you make it this variable F and that just",
    "start": "453849",
    "end": "459159"
  },
  {
    "text": "pulls the function off the object and then you call F call on the other object and what said ends up happening here is",
    "start": "459159",
    "end": "466509"
  },
  {
    "text": "it will try and convert this oo object to a string and when it does that it",
    "start": "466509",
    "end": "471729"
  },
  {
    "text": "will pull the message property out of it and try and convert it to a string but",
    "start": "471729",
    "end": "476740"
  },
  {
    "text": "it's not a string so it ends up treating the integer like an absolute pointer and you can start calling into V tables that",
    "start": "476740",
    "end": "483580"
  },
  {
    "text": "you can define so this is a highly exploitable issue and it's due to the sort of unexpected behavior that you can",
    "start": "483580",
    "end": "489310"
  },
  {
    "text": "change this object and the type of a property of an object so here's another",
    "start": "489310",
    "end": "495639"
  },
  {
    "start": "495000",
    "end": "533000"
  },
  {
    "text": "example this is in a different engine this is an Adobe Flash and it's a",
    "start": "495639",
    "end": "500710"
  },
  {
    "text": "different class but it's basically the same bug so there's this class called microphone and it has a property called",
    "start": "500710",
    "end": "506860"
  },
  {
    "text": "codec and that properties supposed to be a string but you can set it to an integer of course and when you do it",
    "start": "506860",
    "end": "513399"
  },
  {
    "text": "assumes that that is a string and once again it casts it to a string pointer and starts causing V tables and this is",
    "start": "513399",
    "end": "519250"
  },
  {
    "text": "another highly exploitable issue so we have here two issues that are fairly similar in different engines I would say",
    "start": "519250",
    "end": "526300"
  },
  {
    "text": "basically every engine is full of these issues or was full of these issues at one point before they were all found in",
    "start": "526300",
    "end": "532900"
  },
  {
    "text": "fish and this happens just because of fundamentally what implementing a weekly",
    "start": "532900",
    "end": "538730"
  },
  {
    "start": "533000",
    "end": "575000"
  },
  {
    "text": "type language means it means that your engine when you do a native call has to check the type of everything on the",
    "start": "538730",
    "end": "544160"
  },
  {
    "text": "stack manually and it's really easy to forget to do that or do that wrong because you have to do it in every",
    "start": "544160",
    "end": "549860"
  },
  {
    "text": "single function and to give a comparison here flash actually has two engines one",
    "start": "549860",
    "end": "556490"
  },
  {
    "text": "which is second before so it's strongly typed and one which is aekta 3 which is weakly typed and the ACMA 3 engine has",
    "start": "556490",
    "end": "563420"
  },
  {
    "text": "probably had hundreds of type confusion vulnerabilities in it due to these types of issues meanwhile the ACMA 4 engine",
    "start": "563420",
    "end": "570110"
  },
  {
    "text": "has probably had about 10 it really makes a huge difference and preventing this type of issue so another thing",
    "start": "570110",
    "end": "576650"
  },
  {
    "start": "575000",
    "end": "643000"
  },
  {
    "text": "that's interesting about javascript is how classing works and I've got a diagram here basically you have this",
    "start": "576650",
    "end": "583820"
  },
  {
    "text": "object called my string and then it has some members like it has a length and",
    "start": "583820",
    "end": "589670"
  },
  {
    "text": "then it will have like native properties that have the string in it but it also has this prototype object and this prototype object contains classing",
    "start": "589670",
    "end": "596450"
  },
  {
    "text": "information so you go up the proto chain and you have this string prototype object and this has all the class",
    "start": "596450",
    "end": "603290"
  },
  {
    "text": "information for a string so it has the methods like slice and join which I",
    "start": "603290",
    "end": "608540"
  },
  {
    "text": "showed you in the example earlier but then this string prototype is also an object so it has its own prototype which",
    "start": "608540",
    "end": "616310"
  },
  {
    "text": "is this object prototype and this is what has all the object properties of the object so in JavaScript string",
    "start": "616310",
    "end": "623750"
  },
  {
    "text": "extends object so um you can go up the chain here but another thing that's kind",
    "start": "623750",
    "end": "629090"
  },
  {
    "text": "of strange is you can actually change what the prototypes to and you can do this whenever you want you can do this",
    "start": "629090",
    "end": "635180"
  },
  {
    "text": "inside a constructor you can do this you know inside a callback you can do this whenever and it can lead to a lot of",
    "start": "635180",
    "end": "641840"
  },
  {
    "text": "vulnerabilities so to give some examples of how this can cause confusion so we",
    "start": "641840",
    "end": "647780"
  },
  {
    "start": "643000",
    "end": "720000"
  },
  {
    "text": "have this variable a which is an object with a property test and then you set the prototype to an object with the",
    "start": "647780",
    "end": "653780"
  },
  {
    "text": "property test2 well this is kind of correct simple usage you call a dot test2 and you get to that property ok",
    "start": "653780",
    "end": "661640"
  },
  {
    "text": "good but now let's see what happens here what happens if the prototype is the same property well it turns out",
    "start": "661640",
    "end": "669429"
  },
  {
    "text": "you get the one that's lower in the chain because JavaScript always goes up the chain but sometimes that can get a",
    "start": "669429",
    "end": "674860"
  },
  {
    "text": "bit confusing but what's even weirder is look at this let's say you have an",
    "start": "674860",
    "end": "680199"
  },
  {
    "text": "object a and then you have a property test and then you set the property test",
    "start": "680199",
    "end": "685869"
  },
  {
    "text": "on the object to three now if you take the property test off the prototype is",
    "start": "685869",
    "end": "690999"
  },
  {
    "text": "it three or is it two it turns out it's two which is a little unexpected you know if you get a",
    "start": "690999",
    "end": "697029"
  },
  {
    "text": "property it goes up the prototype chain but if you set a property it doesn't so that's a symmetric but let's say you now",
    "start": "697029",
    "end": "705549"
  },
  {
    "text": "don't have a property on the proto chain you have a setter on the proto chain well in that case you actually do call",
    "start": "705549",
    "end": "711850"
  },
  {
    "text": "the setter up the proto chain so that's a symmetric - if you said it and it's the setter it gets cold but if you said",
    "start": "711850",
    "end": "718239"
  },
  {
    "text": "it and it's a property it doesn't so here's an example that is of a bug that's caused by prototyping so let's",
    "start": "718239",
    "end": "726189"
  },
  {
    "start": "720000",
    "end": "781000"
  },
  {
    "text": "say you have this object B and this is in flash and then you create an object called a net connection and then you",
    "start": "726189",
    "end": "732220"
  },
  {
    "text": "make the prototype of the BB the net connection and then you call this function connect what ends up happening",
    "start": "732220",
    "end": "738129"
  },
  {
    "text": "is it will cast this MB object to a net connection and that's once again a type confusion vulnerability but the reason",
    "start": "738129",
    "end": "745509"
  },
  {
    "text": "this really happened is that even though EICMA script engines implement a cue script they are all implemented in C++",
    "start": "745509",
    "end": "752439"
  },
  {
    "text": "and classing is very different in C++ so in C++ you create an object it remains",
    "start": "752439",
    "end": "760569"
  },
  {
    "text": "that object type its entire life and there's a few different ways you can check its type but none of them are going up the prototype chain and in this",
    "start": "760569",
    "end": "767230"
  },
  {
    "text": "situation the code basically checked the type in a hekima script paradigm it",
    "start": "767230",
    "end": "773319"
  },
  {
    "text": "checked the type by going up the prototype chain even though it doesn't necessarily have to agree with what the",
    "start": "773319",
    "end": "778480"
  },
  {
    "text": "object really is I'm starting to type confusion and that type of confusion is",
    "start": "778480",
    "end": "783970"
  },
  {
    "start": "781000",
    "end": "852000"
  },
  {
    "text": "actually fairly common in bugs because how class inheritance works in JavaScript first - C++ is so different",
    "start": "783970",
    "end": "790959"
  },
  {
    "text": "and sometimes makes handling classing in an engine fairly complex the usual",
    "start": "790959",
    "end": "796990"
  },
  {
    "text": "implementation is that there's some sort of shadow class sure in every object because if you think about it if you can change the",
    "start": "796990",
    "end": "803500"
  },
  {
    "text": "prototype of it any object then that can change at any time and you won't know what type your original object was so",
    "start": "803500",
    "end": "809200"
  },
  {
    "text": "there has to also kind of be a real type that the object has so you know so that",
    "start": "809200",
    "end": "814390"
  },
  {
    "text": "can lead to bugs and confusion on how to check tight also there's many many ways to get incentive property now if you",
    "start": "814390",
    "end": "821590"
  },
  {
    "text": "want to get it do you get the real object or do you get the prototype of the object or do you go up the chain",
    "start": "821590",
    "end": "828010"
  },
  {
    "text": "I mean confusion between these things can also cause a lot of bugs and of course functions like sorting and",
    "start": "828010",
    "end": "834010"
  },
  {
    "text": "reversing in some situations can become a nightmare right so imagine you've got all your elements you want to sort",
    "start": "834010",
    "end": "839620"
  },
  {
    "text": "somewhere on this object and summer on the proto and somewhere on the proto's proto then it can get really complicated",
    "start": "839620",
    "end": "845170"
  },
  {
    "text": "pulling them all down and sorting them and I'll give some examples of bugs that that causes later so now I'm going to",
    "start": "845170",
    "end": "853360"
  },
  {
    "text": "talk a bit about arrays arrays are kind of the foundational object of JavaScript",
    "start": "853360",
    "end": "858460"
  },
  {
    "text": "alongside objects I think everyone who's even done a little bit of JavaScript has created an array and a reducer that sort of thing",
    "start": "858460",
    "end": "865720"
  },
  {
    "text": "that sounds simple but then when you get into it it gets really really complex very quickly so to start off we have an",
    "start": "865720",
    "end": "873340"
  },
  {
    "start": "871000",
    "end": "883000"
  },
  {
    "text": "array and this is the simplest type of an array it's an integer array it only has integers in it I think about 80%",
    "start": "873340",
    "end": "880420"
  },
  {
    "text": "probably more of arrays on the internet or like this but arrays can do a lot more an array can have a string in it an",
    "start": "880420",
    "end": "887650"
  },
  {
    "start": "883000",
    "end": "913000"
  },
  {
    "text": "array can have mixed types this array B has a number a string a regex pinnate",
    "start": "887650",
    "end": "892990"
  },
  {
    "text": "you can even have VAR c an array of arrays of arrays and for D is a very",
    "start": "892990",
    "end": "898660"
  },
  {
    "text": "very special array it's called a sparse array so basically the first three elements are defined and then the",
    "start": "898660",
    "end": "904420"
  },
  {
    "text": "10,000th element is defined and there's nothing in the middle so that makes it a sparse array because it's missing",
    "start": "904420",
    "end": "909520"
  },
  {
    "text": "elements and the missing elements are usually called holes but there's even more you can do with an array for",
    "start": "909520",
    "end": "916480"
  },
  {
    "start": "913000",
    "end": "942000"
  },
  {
    "text": "example arrays can have properties so most arrays have elements elements are",
    "start": "916480",
    "end": "921610"
  },
  {
    "text": "members of an object whose names are numbers and properties are members whose names are words and usually in an array",
    "start": "921610",
    "end": "927940"
  },
  {
    "text": "you just have members whose names are numbers but you can add as many property",
    "start": "927940",
    "end": "933880"
  },
  {
    "text": "as you want whose names are words so you can have a sub banana or a dot great it's once again not often typical usage",
    "start": "933880",
    "end": "940150"
  },
  {
    "text": "but it does have to be supported but you know it gets even weirder so starting in",
    "start": "940150",
    "end": "946090"
  },
  {
    "start": "942000",
    "end": "973000"
  },
  {
    "text": "Emma five you can do configuration so to start off you can make an array",
    "start": "946090",
    "end": "951490"
  },
  {
    "text": "read-only and not only can you make the array read-only you can make one element of the array read-only and you can write",
    "start": "951490",
    "end": "958510"
  },
  {
    "text": "the rest and also another way this happens is you can do something called freezing so you can make it so you can't",
    "start": "958510",
    "end": "964420"
  },
  {
    "text": "add any elements and KN can't change any elements in an array so once again this is kind of another weird property that",
    "start": "964420",
    "end": "970510"
  },
  {
    "text": "an echo script engine has to deal with but it gets weirder so you can also put",
    "start": "970510",
    "end": "976930"
  },
  {
    "start": "973000",
    "end": "1000000"
  },
  {
    "text": "a getter or a setter on an index of an array so in this array once you've done",
    "start": "976930",
    "end": "982000"
  },
  {
    "text": "this define own property thing when you try and access element 0 it will call into this function so that's a little",
    "start": "982000",
    "end": "989080"
  },
  {
    "text": "bit unexpected and this is such an interesting feature that has caused so many security problems that it actually",
    "start": "989080",
    "end": "994390"
  },
  {
    "text": "has its own name I get her a setter that is on and index is called an array index interceptor but it gets weirder so to",
    "start": "994390",
    "end": "1002820"
  },
  {
    "start": "1000000",
    "end": "1030000"
  },
  {
    "text": "start off prototypes apply two arrays as well so if you have a sparse array like",
    "start": "1002820",
    "end": "1007950"
  },
  {
    "text": "this one and then you have a prototype that's an array then if you access a missing element it will go up the proto",
    "start": "1007950",
    "end": "1014480"
  },
  {
    "text": "but the proto can also be a getter or a setter so in this example if you access",
    "start": "1014480",
    "end": "1020670"
  },
  {
    "text": "the missing element it will execute the code in func even you know if you've",
    "start": "1020670",
    "end": "1026188"
  },
  {
    "text": "checked the array itself and it doesn't have any array index interceptors but this is even weirder so let's say you",
    "start": "1026189",
    "end": "1032790"
  },
  {
    "start": "1030000",
    "end": "1070000"
  },
  {
    "text": "create an array by default and you don't change the proto well it has a default prototype which is a radon prototype now",
    "start": "1032790",
    "end": "1040020"
  },
  {
    "text": "if you put an interceptor on that every single array you've created in the past and every single array you will create",
    "start": "1040020",
    "end": "1046740"
  },
  {
    "text": "in the future will have an interceptor on it so okay look at this so then you do var",
    "start": "1046740",
    "end": "1052170"
  },
  {
    "text": "a and then you do alert a and that will call into the Interceptor even though",
    "start": "1052170",
    "end": "1057420"
  },
  {
    "text": "you created the array after you've made this call so that's very unexpected I think most developers would think that",
    "start": "1057420",
    "end": "1063510"
  },
  {
    "text": "if you do var a is a new array that that is not going to have any in it even though it could so another",
    "start": "1063510",
    "end": "1071169"
  },
  {
    "text": "thing to keep in mind here is that every year a method has to support this stuff so it's not just you know accessing the",
    "start": "1071169",
    "end": "1078070"
  },
  {
    "text": "array you know sort has to handle having a read-only element you know splice has to handle having elements on the proto",
    "start": "1078070",
    "end": "1084940"
  },
  {
    "text": "so implementing these functions suddenly becomes very difficult so what ends up",
    "start": "1084940",
    "end": "1089980"
  },
  {
    "start": "1089000",
    "end": "1112000"
  },
  {
    "text": "happening and this is how every browser works is you have array promotion and this is because most arrays are simple",
    "start": "1089980",
    "end": "1096519"
  },
  {
    "text": "the vast majority only have integers in them and after that the vast majority of them are non sparse don't have getters",
    "start": "1096519",
    "end": "1102610"
  },
  {
    "text": "or setters that sort of thing so they need to make it so that most of the time you can have arrays that are efficient",
    "start": "1102610",
    "end": "1108760"
  },
  {
    "text": "but sometimes you can support these wild and crazy arrays to give an example of",
    "start": "1108760",
    "end": "1113830"
  },
  {
    "start": "1112000",
    "end": "1151000"
  },
  {
    "text": "how this works um this example is chakra but most browsers are similar an array will start its life as an integer and",
    "start": "1113830",
    "end": "1120429"
  },
  {
    "text": "then if you add a float it will become a float array and then if you add an object it will become a var array and",
    "start": "1120429",
    "end": "1126610"
  },
  {
    "text": "then if you can figure it let's say you make it read-only or you add a getter or a setter it then becomes a nekima v",
    "start": "1126610",
    "end": "1132370"
  },
  {
    "text": "array and I would say chakra probably has the simplest flowchart here another thing that's very typical is that sparse",
    "start": "1132370",
    "end": "1138639"
  },
  {
    "text": "will be another dimension so that becomes sparse it will also move on this flowchart so some browsers have ten or",
    "start": "1138639",
    "end": "1145419"
  },
  {
    "text": "more different classes and basically a flowchart of how they move depending on how the array changes so let's talk a",
    "start": "1145419",
    "end": "1152289"
  },
  {
    "start": "1151000",
    "end": "1173000"
  },
  {
    "text": "little bit about objects now objects are similar to arrays but they're optimized for properties instead of elements and",
    "start": "1152289",
    "end": "1158769"
  },
  {
    "text": "they tend to have less bugs just because well an array can have ten thousand elements and really needs optimization",
    "start": "1158769",
    "end": "1164620"
  },
  {
    "text": "objects it's rare for them to have like ten or more properties so just due to the lack of optimization objects are a",
    "start": "1164620",
    "end": "1170590"
  },
  {
    "text": "bit safer but they still have bugs so to give some examples of what objects can do so we have an object and it has a",
    "start": "1170590",
    "end": "1178269"
  },
  {
    "start": "1173000",
    "end": "1183000"
  },
  {
    "text": "property and then I have the other notation down at the bottom so that's a simple object that objects can also like",
    "start": "1178269",
    "end": "1185440"
  },
  {
    "start": "1183000",
    "end": "1205000"
  },
  {
    "text": "an array have mixed types and they can also have elements right there's no reason that you can't say object sub",
    "start": "1185440",
    "end": "1191080"
  },
  {
    "text": "zero equals something so like arrays they can have properties whose names our numbers they can also",
    "start": "1191080",
    "end": "1196330"
  },
  {
    "text": "have you know objects and objects and objects and they're also configurable so you can freeze an object you can put",
    "start": "1196330",
    "end": "1203289"
  },
  {
    "text": "together or a setter on it all that stuff so here's a fun question let's say",
    "start": "1203289",
    "end": "1209019"
  },
  {
    "start": "1205000",
    "end": "1254000"
  },
  {
    "text": "you have an array that just has four elements and you have an object which",
    "start": "1209019",
    "end": "1214240"
  },
  {
    "text": "has the same four elements plus its length set correctly the length will be automatically set on the array and let's",
    "start": "1214240",
    "end": "1220749"
  },
  {
    "text": "say you get rid of the prototype so you make each prototype equal no how can you tell one object from the other if I gave",
    "start": "1220749",
    "end": "1227499"
  },
  {
    "text": "you oh and a and said you can run any JavaScript you wanted on them how can you tell them apart based on how they",
    "start": "1227499",
    "end": "1233080"
  },
  {
    "text": "behave and one answer you might give is oh well you can call array methods on",
    "start": "1233080",
    "end": "1238179"
  },
  {
    "text": "the array but that's actually not true they come from the proto and actually you can call array methods on an object",
    "start": "1238179",
    "end": "1243850"
  },
  {
    "text": "right you're totally allowed to do that and if it has elements it will act exactly like an array so how do you",
    "start": "1243850",
    "end": "1249909"
  },
  {
    "text": "actually tell them apart and the only way I know to do this other than looking at performance is that you set the",
    "start": "1249909",
    "end": "1257200"
  },
  {
    "start": "1254000",
    "end": "1278000"
  },
  {
    "text": "length to banana if you set the length of an object to banana that's fine if you set the length of an array to banana",
    "start": "1257200",
    "end": "1263169"
  },
  {
    "text": "it will throw a range error but this is just an example of you know how difficult it ends up being implementing",
    "start": "1263169",
    "end": "1269740"
  },
  {
    "text": "a JavaScript engine because objects can be so much like arrays and arrays can be so much like objects that you can't even",
    "start": "1269740",
    "end": "1276519"
  },
  {
    "text": "tell them apart so you end up getting once again is all browsers have fast",
    "start": "1276519",
    "end": "1283419"
  },
  {
    "start": "1278000",
    "end": "1342000"
  },
  {
    "text": "paths and slow paths so most of the time when you call array dot slice you're slicing an array of numbers that's not",
    "start": "1283419",
    "end": "1290289"
  },
  {
    "text": "sparse that's not actually an object that has no bananas in it so in that case you'll follow the fast path which",
    "start": "1290289",
    "end": "1296169"
  },
  {
    "text": "is an optimised path and browsers can have multiple fast paths you know they",
    "start": "1296169",
    "end": "1301960"
  },
  {
    "text": "can have one for mixed types they can have one for just integers sometimes",
    "start": "1301960",
    "end": "1307059"
  },
  {
    "text": "they have ones for sparse arrays and these can sometimes cause bugs because well they're supposed to only run on",
    "start": "1307059",
    "end": "1313840"
  },
  {
    "text": "certain situations you know erase that have been checked to be exactly in a certain state that's not always true",
    "start": "1313840",
    "end": "1319330"
  },
  {
    "text": "sometimes they forget some checks and then I flip side there's the slow path and that's the base case that's the case",
    "start": "1319330",
    "end": "1326830"
  },
  {
    "text": "that is supposed to handle every array you can imagine and handle it safely and correctly and these rarely have",
    "start": "1326830",
    "end": "1334279"
  },
  {
    "text": "sometimes they're even implemented in JavaScript but they do sometimes sometimes even you know when they're",
    "start": "1334279",
    "end": "1339289"
  },
  {
    "text": "trying to do a base case they forget a few cases so now to give some examples of bugs so this bug is in chakra and",
    "start": "1339289",
    "end": "1348379"
  },
  {
    "start": "1342000",
    "end": "1404000"
  },
  {
    "text": "it's an example of a fast path bug so you create this array and it's an",
    "start": "1348379",
    "end": "1353929"
  },
  {
    "text": "integer array and then you create an array index interceptor on it and then",
    "start": "1353929",
    "end": "1359570"
  },
  {
    "text": "you call the function join and this is an optimized function if your array is",
    "start": "1359570",
    "end": "1365029"
  },
  {
    "text": "only integers it will just you know go through the integers in memory and convert them to strings and then return",
    "start": "1365029",
    "end": "1370669"
  },
  {
    "text": "the string but it didn't correctly check for an array index interceptor so when",
    "start": "1370669",
    "end": "1376309"
  },
  {
    "text": "it goes through it will grab this first element or the second element and then it will call the Interceptor and then",
    "start": "1376309",
    "end": "1382759"
  },
  {
    "text": "this will change the type of the array it'll cause there a promotion to happen and then make it into a mixed type mixed",
    "start": "1382759",
    "end": "1389389"
  },
  {
    "text": "type array but then the function keeps going just like it's an integer array and it ends up pulling the pointers out",
    "start": "1389389",
    "end": "1395119"
  },
  {
    "text": "of this array and into memory and this ends up being an info leak because now",
    "start": "1395119",
    "end": "1400249"
  },
  {
    "text": "you have an integer array that is full of pointers so here's another example of",
    "start": "1400249",
    "end": "1405679"
  },
  {
    "text": "a similar bug this one's a bit more complicated but it points to a few other interesting parts of the standard so",
    "start": "1405679",
    "end": "1412960"
  },
  {
    "text": "once again you could actually don't create array up front you start off by",
    "start": "1412960",
    "end": "1418909"
  },
  {
    "text": "defining the array prototype and this is the default array prototype so now every single array unless you've changed the",
    "start": "1418909",
    "end": "1425299"
  },
  {
    "text": "prototype has a array index interceptor on it on the zeroeth index and now you",
    "start": "1425299",
    "end": "1431629"
  },
  {
    "text": "call this function bind and what this function does is it will store",
    "start": "1431629",
    "end": "1436969"
  },
  {
    "text": "parameters for a function so if you call dummy dot bind it will allocate an array and then put all the parameters of the",
    "start": "1436969",
    "end": "1444019"
  },
  {
    "text": "function into it and then store it on this object F that it returns so that when you call the function you have all",
    "start": "1444019",
    "end": "1450049"
  },
  {
    "text": "your parameters but because you've because you've defined this interceptor",
    "start": "1450049",
    "end": "1455089"
  },
  {
    "text": "what happens is when it tries to set this internal array it will I'm calling",
    "start": "1455089",
    "end": "1460309"
  },
  {
    "text": "to the Interceptor and then you can get a reference to this internal array which otherwise you would have no way to get a",
    "start": "1460309",
    "end": "1465979"
  },
  {
    "text": "reference to and you can change the lengths and then when you call the function what ends up",
    "start": "1465979",
    "end": "1471139"
  },
  {
    "text": "happening is this is optimized because it created the array and it knows what the array should look like so it will",
    "start": "1471139",
    "end": "1476980"
  },
  {
    "text": "assume that all the elements are allocated even though they're not and then go out of bounds and this ends up",
    "start": "1476980",
    "end": "1482450"
  },
  {
    "text": "being a type confusion vulnerability because it makes type it takes type assumptions based on the out of bounds",
    "start": "1482450",
    "end": "1488899"
  },
  {
    "text": "values that are not true so this is quite an exploitable issue and it's due",
    "start": "1488899",
    "end": "1494119"
  },
  {
    "text": "to array index interceptors but it's also a little bit interesting this function bind when we were fixing this",
    "start": "1494119",
    "end": "1502129"
  },
  {
    "text": "bug you know we're kind of talking about so that internal array what should it be and if you look in the specification you",
    "start": "1502129",
    "end": "1509149"
  },
  {
    "text": "know it doesn't say that it can be an array and it doesn't say that it can't be an array and we looked at what the",
    "start": "1509149",
    "end": "1514309"
  },
  {
    "text": "other browsers did and they all basically used an array that had the prototype chopped off so that you",
    "start": "1514309",
    "end": "1519830"
  },
  {
    "text": "couldn't use array index interceptors but that was a little unclear so this is a situation where both being able to do",
    "start": "1519830",
    "end": "1527149"
  },
  {
    "text": "interceptors and lack of clarity led to this bug so another bug on this one's in",
    "start": "1527149",
    "end": "1533809"
  },
  {
    "text": "chakra again you start off with an array and then you set the length of it so",
    "start": "1533809",
    "end": "1539690"
  },
  {
    "text": "this is a sparse array and then you create a prototype and you put an array index interceptor on it and then you set",
    "start": "1539690",
    "end": "1547159"
  },
  {
    "text": "the prototype of the object to be this thing with an interceptor on it and then you call reverse and what",
    "start": "1547159",
    "end": "1554269"
  },
  {
    "text": "happens here is it will first store some information about this array it will store whether it's sparse it will store",
    "start": "1554269",
    "end": "1560600"
  },
  {
    "text": "the length and then it will get everything out of the prototype because the way this is implemented in chakra is",
    "start": "1560600",
    "end": "1567980"
  },
  {
    "text": "it will just pull everything out of the probe prototype into the array before it reverses it just to avoid the nightmare",
    "start": "1567980",
    "end": "1574759"
  },
  {
    "text": "of having to deal with getting stuff out of the prototype later on so it does this but in this case it calls the array",
    "start": "1574759",
    "end": "1581269"
  },
  {
    "text": "index interceptor which then changes the nature of the array so now it is a non sparse array that has a different length",
    "start": "1581269",
    "end": "1587779"
  },
  {
    "text": "and what you end up getting back is an array that doesn't really have consistent properties you know it thinks",
    "start": "1587779",
    "end": "1594019"
  },
  {
    "text": "it's a non sparse array but it's actually sparse and when you try to access different elements of it they're",
    "start": "1594019",
    "end": "1600080"
  },
  {
    "text": "not always allocated so this is a highly exploitable bug as well and it's once again related to",
    "start": "1600080",
    "end": "1605959"
  },
  {
    "text": "array index interceptors and just the difficulty of implementing something like reverse when you have to go up the",
    "start": "1605959",
    "end": "1612200"
  },
  {
    "text": "prototype chain so that's the real issue here um one thing I will say is that",
    "start": "1612200",
    "end": "1618409"
  },
  {
    "text": "array index interceptors have caused a vast vast number of vulnerabilities I think every single engine has had",
    "start": "1618409",
    "end": "1624769"
  },
  {
    "text": "problems because an array index interceptor happens sometime that it's",
    "start": "1624769",
    "end": "1630200"
  },
  {
    "text": "unexpected and changes the states so that memory gets corrupted it's also",
    "start": "1630200",
    "end": "1635209"
  },
  {
    "text": "fairly unusual for this to be used legitimately it's very very infrequently",
    "start": "1635209",
    "end": "1640669"
  },
  {
    "text": "used it also requires a large amount of code and I would say Safari U has an especially large amount of code to",
    "start": "1640669",
    "end": "1646549"
  },
  {
    "text": "handle this but every browser has quite a lot of code to handle the fact that the array prototype can change and now",
    "start": "1646549",
    "end": "1653570"
  },
  {
    "text": "suddenly you can't optimize a single array in your entire engine because you",
    "start": "1653570",
    "end": "1659299"
  },
  {
    "text": "now have to go up this prototype change so this is an example of I think poorly",
    "start": "1659299",
    "end": "1665869"
  },
  {
    "text": "used feature that causes a lot of vulnerabilities so you know how I told you I told you everything weird about",
    "start": "1665869",
    "end": "1672289"
  },
  {
    "start": "1668000",
    "end": "2184000"
  },
  {
    "text": "arrays well I sort of lied there is one even weirder thing about arrays so",
    "start": "1672289",
    "end": "1677479"
  },
  {
    "text": "there's this thing called array simple species and what this does is so let's",
    "start": "1677479",
    "end": "1683570"
  },
  {
    "text": "say you're calling a method on an array but it's a subclass of an array and this method returns another array so like",
    "start": "1683570",
    "end": "1691309"
  },
  {
    "text": "let's say it's slice which is sub array which returns an array well now it's the",
    "start": "1691309",
    "end": "1696349"
  },
  {
    "text": "thing it returns an array or is it a sub array and of course with a JavaScript",
    "start": "1696349",
    "end": "1701570"
  },
  {
    "text": "standard it says is why don't we do both and now you have symbol dot species and",
    "start": "1701570",
    "end": "1707359"
  },
  {
    "text": "this will return the constructor you want used if you call a function that returns an array and it's easily",
    "start": "1707359",
    "end": "1714440"
  },
  {
    "text": "implemented by inserting a call into script in every single native call",
    "start": "1714440",
    "end": "1720409"
  },
  {
    "text": "related to arrays so this caused a number of vulnerabilities so here's an",
    "start": "1720409",
    "end": "1726259"
  },
  {
    "text": "example of one bug this was in chakra and so you create a mixed type of array",
    "start": "1726259",
    "end": "1733009"
  },
  {
    "text": "that is a sub array with she's defined and then you create you call filter and filter is a function",
    "start": "1733009",
    "end": "1739720"
  },
  {
    "text": "that goes through every element of the array and if the function returns true",
    "start": "1739720",
    "end": "1745659"
  },
  {
    "text": "it puts it into a new array so this requires a new array but what type is the new array well let's call species so",
    "start": "1745659",
    "end": "1752110"
  },
  {
    "text": "it does this and it returns the constructor which gets called but this returns an array which is not a mixed",
    "start": "1752110",
    "end": "1760029"
  },
  {
    "text": "type of array it's in integer array so this ends up being type confusion where",
    "start": "1760029",
    "end": "1765039"
  },
  {
    "text": "it will copy all these pointer elements into this integer array so it's so you",
    "start": "1765039",
    "end": "1770799"
  },
  {
    "text": "can read out the pointers this is also an overflow issue because pointers are wider than integers so this is an",
    "start": "1770799",
    "end": "1776950"
  },
  {
    "text": "example of how I think originally and filled the filter function you know you",
    "start": "1776950",
    "end": "1782260"
  },
  {
    "text": "would never end up in a situation where the array you were copying to was a different type than the one you were",
    "start": "1782260",
    "end": "1788230"
  },
  {
    "text": "copying from but now this can happen and it led to the smaller ability so here's",
    "start": "1788230",
    "end": "1795190"
  },
  {
    "text": "another example this was a PRP submission to Chrome by Brendan tesca and this is another example of bug",
    "start": "1795190",
    "end": "1803260"
  },
  {
    "text": "caused by simple dot species so you create this object called a proxy and",
    "start": "1803260",
    "end": "1808690"
  },
  {
    "text": "then you get a reference to this defined property method I'll explain why in a sec and then you create a subclass of an",
    "start": "1808690",
    "end": "1815770"
  },
  {
    "text": "array that has species defined then you define the getter of this defined property I'm the same when you got the",
    "start": "1815770",
    "end": "1821890"
  },
  {
    "text": "reference to and then you call array dot concat so this will call into species so",
    "start": "1821890",
    "end": "1827799"
  },
  {
    "text": "it has an array it can cat into and this will return this proxy and this is kind of a complicated type this will get you",
    "start": "1827799",
    "end": "1833649"
  },
  {
    "text": "on the slowest of slow paths of caen cat that is implemented in JavaScript so what ends up happening is it will",
    "start": "1833649",
    "end": "1840130"
  },
  {
    "text": "continue to concatenate tries to concatenate and when it does it calls",
    "start": "1840130",
    "end": "1847539"
  },
  {
    "text": "into the getter you defined and that will call this function e which will",
    "start": "1847539",
    "end": "1853240"
  },
  {
    "text": "change the length of the array and then this will cause basically copies into or",
    "start": "1853240",
    "end": "1858820"
  },
  {
    "text": "copies from memory that is no longer allocated so this is once again an out",
    "start": "1858820",
    "end": "1864130"
  },
  {
    "text": "of bound read and it ends up being type confusion because of the memories unallocated you could be copying anything into your",
    "start": "1864130",
    "end": "1869960"
  },
  {
    "text": "array I'm so this is an example of another bug that's caused by array",
    "start": "1869960",
    "end": "1875870"
  },
  {
    "text": "symbol species so once again this is a very uncommon lis used feature that has",
    "start": "1875870",
    "end": "1882679"
  },
  {
    "text": "led to many vulnerabilities so here's another feature that leads to a lot of",
    "start": "1882679",
    "end": "1888529"
  },
  {
    "text": "vulnerabilities so this is a typed array and the way typed arrays work is you",
    "start": "1888529",
    "end": "1895909"
  },
  {
    "text": "have the typed array and then you create this worker which is basically another thread in JavaScript and then you can",
    "start": "1895909",
    "end": "1901460"
  },
  {
    "text": "call post message and some browsers also support a function called transfer and what this will do is it will put this in",
    "start": "1901460",
    "end": "1907970"
  },
  {
    "text": "the new thread for you and then free all the memory so um this is useful but when",
    "start": "1907970",
    "end": "1915350"
  },
  {
    "text": "you free the memory which is called neutering or detachment sometimes I'm engines forget that the",
    "start": "1915350",
    "end": "1920840"
  },
  {
    "text": "memory has been freed so there's this bug in Safari so you create the array",
    "start": "1920840",
    "end": "1927140"
  },
  {
    "text": "buffer and then you create this object and this calls into a method called value uh",
    "start": "1927140",
    "end": "1932929"
  },
  {
    "text": "or has a property value of with a function called F and then you create the typed array and then you call this",
    "start": "1932929",
    "end": "1939799"
  },
  {
    "text": "method copy within and what this does is it tries to copy within the typed array",
    "start": "1939799",
    "end": "1945770"
  },
  {
    "text": "so it does this but then it tries to convert this index o into an integer and",
    "start": "1945770",
    "end": "1952549"
  },
  {
    "text": "in that case it will basically free this array and then the copy continues the",
    "start": "1952549",
    "end": "1959210"
  },
  {
    "text": "array memory will now be 0 but these indexes can be treated like pointers so this is kind of an absolute right you",
    "start": "1959210",
    "end": "1964880"
  },
  {
    "text": "can do another type array issue is this",
    "start": "1964880",
    "end": "1971990"
  },
  {
    "text": "one in chakra so once again you create your typed array and then you call sword",
    "start": "1971990",
    "end": "1977690"
  },
  {
    "text": "on it and sort calls into a function that will return to where false and then",
    "start": "1977690",
    "end": "1984890"
  },
  {
    "text": "this is used to sort your array but what happens here is so it calls into this compare function and then it will check",
    "start": "1984890",
    "end": "1992059"
  },
  {
    "text": "whether it's detached the standards has to do this but then it will convert it ooh an integer and when it does you can",
    "start": "1992059",
    "end": "1998090"
  },
  {
    "text": "free the array in there and this once again is another use after free that is",
    "start": "1998090",
    "end": "2004090"
  },
  {
    "text": "caused by a array detachment so this is",
    "start": "2004090",
    "end": "2013810"
  },
  {
    "text": "an interesting set of bugs and this is a feature I do think gets used a lot quite a few people used typed arrays and",
    "start": "2013810",
    "end": "2019000"
  },
  {
    "text": "they can be memory efficient but they've also caused a lot of vulnerabilities and there's two reasons here one is once",
    "start": "2019000",
    "end": "2025150"
  },
  {
    "text": "again they are a little bit poorly specified so there are like tons and tons of warnings in the Yakama script",
    "start": "2025150",
    "end": "2030910"
  },
  {
    "text": "standard about detachment and place easy to check it's detached and to look out for bugs but these two specific",
    "start": "2030910",
    "end": "2037680"
  },
  {
    "text": "functions in the standard did not have warnings in particular in copy with in",
    "start": "2037680",
    "end": "2043110"
  },
  {
    "text": "it does not tell you to check for detachment after doing the conversion in fact it doesn't say what to do at all if",
    "start": "2043110",
    "end": "2049629"
  },
  {
    "text": "the function you call doesn't return an integer and also same thing with the",
    "start": "2049630",
    "end": "2055300"
  },
  {
    "text": "compare compare actually sorry now I have that backwards for compare it it",
    "start": "2055300",
    "end": "2061929"
  },
  {
    "text": "does tell you what to do but it doesn't tell you what to do if the function doesn't return true or false I mean",
    "start": "2061929",
    "end": "2067510"
  },
  {
    "text": "while copy within it says that you should do it just like an array with no warnings at all and that led to the",
    "start": "2067510",
    "end": "2074590"
  },
  {
    "text": "vulnerability in that one so now one last example here this is kind of a fun",
    "start": "2074590",
    "end": "2082060"
  },
  {
    "text": "one so there's this feature function dot collar and what it does is so you've got",
    "start": "2082060",
    "end": "2089260"
  },
  {
    "text": "this function that calls a function and then if you call function caller it will",
    "start": "2089260",
    "end": "2096190"
  },
  {
    "text": "tell you who called you so in this case if you did alert function caller it",
    "start": "2096190",
    "end": "2101650"
  },
  {
    "text": "would get function G it basically lets you go through the call stack so if you wanted you could kind of write a JavaScript debugger in JavaScript so",
    "start": "2101650",
    "end": "2109750"
  },
  {
    "text": "here's a bug involving this so you create surprise surprise an array index",
    "start": "2109750",
    "end": "2117190"
  },
  {
    "text": "an interceptor on the array prototype and then you call array docking cat and",
    "start": "2117190",
    "end": "2122710"
  },
  {
    "text": "then this will call into the Interceptor and then you call function caller and",
    "start": "2122710",
    "end": "2129160"
  },
  {
    "text": "this give you the caller well what's interesting here is specifically in Safari this is implemented in JavaScript",
    "start": "2129160",
    "end": "2135579"
  },
  {
    "text": "and then it calls into some native functions in JavaScript and these functions are unsafe all the text they",
    "start": "2135579",
    "end": "2141640"
  },
  {
    "text": "need to read to make the function safe occur in JavaScript so this actually allows you to strip the JavaScript from",
    "start": "2141640",
    "end": "2147970"
  },
  {
    "text": "them and call them directly so this was a memory corruption vulnerability but what I really like about this one is",
    "start": "2147970",
    "end": "2153700"
  },
  {
    "text": "that people were worried about this 16 years ago 16 years ago they were",
    "start": "2153700",
    "end": "2158920"
  },
  {
    "text": "discussing should we put this in what now will be ekam a 5 before the ACMA 4 thing happened and 14 years ago they",
    "start": "2158920",
    "end": "2165790"
  },
  {
    "text": "were like no that'll make internal methods accessible and cause vulnerabilities but with that big gap",
    "start": "2165790",
    "end": "2172150"
  },
  {
    "text": "before the next specification you know everyone forgot about this and then the future went in and surprise surprise",
    "start": "2172150",
    "end": "2178690"
  },
  {
    "text": "there is this vulnerability that was predicted in like the year 2000 so um",
    "start": "2178690",
    "end": "2185349"
  },
  {
    "start": "2184000",
    "end": "2319000"
  },
  {
    "text": "what can we learn from this well I think there is a lot of different things there's a lot to learn if you're a",
    "start": "2185349",
    "end": "2190930"
  },
  {
    "text": "designer I think it's important to consider future usage and complexity sometimes features are complex and can",
    "start": "2190930",
    "end": "2198130"
  },
  {
    "text": "be error-prone but I think it's important that these are the very useful features that provide a lot of value",
    "start": "2198130",
    "end": "2203440"
  },
  {
    "text": "it's obviously not great a feature that doesn't provide value causes a lot of risk also some design decisions are",
    "start": "2203440",
    "end": "2210400"
  },
  {
    "text": "permanent and there's kind of two ways this has happened with ACMA script one is that you know the early design",
    "start": "2210400",
    "end": "2217000"
  },
  {
    "text": "decisions and these are in the prototype one and the weakly typed one even by a",
    "start": "2217000",
    "end": "2222220"
  },
  {
    "text": "comma for it was so entrenched that it was hard to change that and as time has gone on these you know early decisions",
    "start": "2222220",
    "end": "2228670"
  },
  {
    "text": "that were made before anyone even knew memory corruption cause code execution",
    "start": "2228670",
    "end": "2233890"
  },
  {
    "text": "have now lasted forever and are still out there causing phones likewise especially in web stuff because",
    "start": "2233890",
    "end": "2241089"
  },
  {
    "text": "everyone uses the web and creates websites it's very hard to take stuff back so it's also very difficult to",
    "start": "2241089",
    "end": "2247210"
  },
  {
    "text": "deprecate a feature that's not being used because on the wide internet you know a very small number of sites are",
    "start": "2247210",
    "end": "2253059"
  },
  {
    "text": "going to be using it also features especially new features can affect others in unexpected ways and this is",
    "start": "2253059",
    "end": "2260380"
  },
  {
    "text": "what's happened both with array dot species and index interceptors and I'm talking about",
    "start": "2260380",
    "end": "2265810"
  },
  {
    "text": "security but this is also functional functional problem - these have caused",
    "start": "2265810",
    "end": "2271000"
  },
  {
    "text": "many many errors there's lots of inconsistencies between browsers and how they're implemented lots of other",
    "start": "2271000",
    "end": "2276970"
  },
  {
    "text": "abilities and there are lots of things that I think weren't really understood until people actually started",
    "start": "2276970",
    "end": "2283450"
  },
  {
    "text": "implementing I started realizing you know for example a discussion I saw recently is so let's say you call array",
    "start": "2283450",
    "end": "2289810"
  },
  {
    "text": "dot push and there's an array index interceptor you know does that have to fire and of course it's inconsistent",
    "start": "2289810",
    "end": "2295390"
  },
  {
    "text": "between browsers and also it's a good idea to completely specify security",
    "start": "2295390",
    "end": "2300490"
  },
  {
    "text": "sensitive features and there's definitely been some attempts at this in Equus crypt but there still are missing",
    "start": "2300490",
    "end": "2306910"
  },
  {
    "text": "checks and it's not always clear how things should be implemented and I think this can lead to vulnerabilities if",
    "start": "2306910",
    "end": "2315970"
  },
  {
    "text": "people don't quite understand what the standard says now if there's a developer if you're a developer there's a lot to",
    "start": "2315970",
    "end": "2322030"
  },
  {
    "start": "2319000",
    "end": "2394000"
  },
  {
    "text": "learn here too one thing is if one thing is clear be cautious when implementing",
    "start": "2322030",
    "end": "2327400"
  },
  {
    "text": "standards it's easy to go on autopilot and you know not really think about the features if you know you're copying out",
    "start": "2327400",
    "end": "2333550"
  },
  {
    "text": "of a standard but it's important to think about features as if you thought about thought of them yourself",
    "start": "2333550",
    "end": "2338620"
  },
  {
    "text": "and you know think about you know is this really a good idea also it's a good idea to learn about vulnerabilities and",
    "start": "2338620",
    "end": "2344680"
  },
  {
    "text": "other implementations if you relate to the game you have a big benefit of being able to look at other implementations",
    "start": "2344680",
    "end": "2350710"
  },
  {
    "text": "and see what bugs they've had and make sure that you don't implement them - also it's a good idea if you can to test",
    "start": "2350710",
    "end": "2359770"
  },
  {
    "text": "bugs and one implementation and other implementations because they often have the same bugs and also it's a good idea",
    "start": "2359770",
    "end": "2367180"
  },
  {
    "text": "to evaluate how new features affect existing code and if you can't do that at least you know help future developer",
    "start": "2367180",
    "end": "2373390"
  },
  {
    "text": "you from having these problems make sure to clearly document assumptions anam browser is one good way",
    "start": "2373390",
    "end": "2379210"
  },
  {
    "text": "to do this is with asserts if you make sure that you assert every assumption you're making even if you're sure it's",
    "start": "2379210",
    "end": "2385030"
  },
  {
    "text": "going to be true now that'll help you or someone else when they try and add new features and hit the asserts then",
    "start": "2385030",
    "end": "2391900"
  },
  {
    "text": "they'll realize we're violating your assumptions now a security research there's a lot we can learn too to start",
    "start": "2391900",
    "end": "2399080"
  },
  {
    "start": "2394000",
    "end": "2446000"
  },
  {
    "text": "off reading the standard can help find bugs I know it's boring but you know this is how you find out about all the",
    "start": "2399080",
    "end": "2405200"
  },
  {
    "text": "wild and wacky features that lead to vulnerabilities also variants of vulnerabilities and one thing often",
    "start": "2405200",
    "end": "2411320"
  },
  {
    "text": "effect another I didn't really believe this up front and I was quite surprised by just how many similar bugs they were",
    "start": "2411320",
    "end": "2418190"
  },
  {
    "text": "and different implementations of the same thing and finally be more involved",
    "start": "2418190",
    "end": "2423920"
  },
  {
    "text": "in design a lot of security people like to wait until code is written and not and get involved until later but really",
    "start": "2423920",
    "end": "2431120"
  },
  {
    "text": "think about what would have happened if early on in JavaScript some more security people had been involved think",
    "start": "2431120",
    "end": "2437240"
  },
  {
    "text": "of how different the world could be involved think of how different the world could be with regards to how many",
    "start": "2437240",
    "end": "2443000"
  },
  {
    "text": "vulnerabilities there were in JavaScript so that's it thanks a lot and I think I",
    "start": "2443000",
    "end": "2449630"
  },
  {
    "start": "2446000",
    "end": "2658000"
  },
  {
    "text": "have some time for questions [Applause] [Music]",
    "start": "2449630",
    "end": "2457480"
  },
  {
    "text": "I first of all thank you for your",
    "start": "2457480",
    "end": "2469270"
  },
  {
    "text": "informative presentation so my first question is you know while these bugs exist what is the frequency in which",
    "start": "2469270",
    "end": "2476670"
  },
  {
    "text": "developers are people actually using them to expose these types of vulnerabilities sorry what do you mean",
    "start": "2476670",
    "end": "2484080"
  },
  {
    "text": "also so you show different code samples yeah right and I was looking at them and",
    "start": "2484080",
    "end": "2489910"
  },
  {
    "text": "it looked quite complex and I was wondering how often like these things that people actually use these features in this way to expose these",
    "start": "2489910",
    "end": "2496390"
  },
  {
    "text": "vulnerabilities um well like you know browser you know frequency of use",
    "start": "2496390",
    "end": "2501460"
  },
  {
    "text": "doesn't matter for the vulnerability you know if you're an attacker you'll write the JavaScript you need to exploit the",
    "start": "2501460",
    "end": "2506890"
  },
  {
    "text": "vulnerability regardless of how often people are using it with regards to some",
    "start": "2506890",
    "end": "2512980"
  },
  {
    "text": "of these features I've done some like you know very poor web scans of how often they're used and I know it's",
    "start": "2512980",
    "end": "2518080"
  },
  {
    "text": "specifically the array dot species I found like two large websites using it and then the rest were kind of websites",
    "start": "2518080",
    "end": "2524380"
  },
  {
    "text": "about JavaScript so that's like very infrequently used",
    "start": "2524380",
    "end": "2529650"
  },
  {
    "text": "many more questions yeah can you get go",
    "start": "2535470",
    "end": "2541260"
  },
  {
    "text": "to the night please oh isn't it so do you think they should start putting types in JavaScript write the script I",
    "start": "2541260",
    "end": "2548310"
  },
  {
    "text": "mean that's a very complicated question like as a pure security person I think",
    "start": "2548310",
    "end": "2553410"
  },
  {
    "text": "it would reduce a lot of vulnerabilities I think it would make engines faster yeah I think it would make code better",
    "start": "2553410",
    "end": "2560070"
  },
  {
    "text": "but unfortunately it would mean like vastly tearing the guts out of every engine the difference between a strictly",
    "start": "2560070",
    "end": "2566550"
  },
  {
    "text": "typed and non strictly typed and in terms of implantation is quite different and it would be a lot of effort sorry I",
    "start": "2566550",
    "end": "2575940"
  },
  {
    "text": "have a question here thank you for presentation it's very excited and",
    "start": "2575940",
    "end": "2582750"
  },
  {
    "text": "actually I have a question about the technique for analyzing such box do you",
    "start": "2582750",
    "end": "2589109"
  },
  {
    "text": "did you find it by using some other techniques or you just analyzed the",
    "start": "2589109",
    "end": "2594960"
  },
  {
    "text": "standard and source code of engine yeah I found all of these with source code analysis okay thank you",
    "start": "2594960",
    "end": "2603470"
  },
  {
    "text": "especially based on the low usage of some of these features is there any appetite for just ripping it out of the",
    "start": "2603830",
    "end": "2609300"
  },
  {
    "text": "spec yeah honestly I'm not sure I have seen in the past that specifications I'm",
    "start": "2609300",
    "end": "2616619"
  },
  {
    "text": "HTML 5 in particular have removed some of these I'm commonly used few features so I am hopeful that maybe one day in",
    "start": "2616619",
    "end": "2623010"
  },
  {
    "text": "the future they will disappear Natalie do you foresee in any of the upcoming up",
    "start": "2623010",
    "end": "2630630"
  },
  {
    "text": "ACMA script standards areas that might be troublesome in terms of security that might get a little hairy 3 at least I'm",
    "start": "2630630",
    "end": "2639570"
  },
  {
    "text": "not sure I'm ekam it came out fairly recently and I'm not done reading it yet",
    "start": "2639570",
    "end": "2645140"
  },
  {
    "text": "so last chance for questions I guess",
    "start": "2650140",
    "end": "2656259"
  },
  {
    "text": "that's it then thanks a lot [Applause] [Music]",
    "start": "2656259",
    "end": "2660849"
  }
]