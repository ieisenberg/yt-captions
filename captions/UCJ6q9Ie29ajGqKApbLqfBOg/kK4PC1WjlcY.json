[
  {
    "text": "hello everyone my name is Christopher Wade and today yes we're indeed going to be talking about physical attacks against smartphones so the Crux of this",
    "start": "2520",
    "end": "9440"
  },
  {
    "text": "talk is that modern smartphones employ a high number of very strong security measures in order to protect the boot",
    "start": "9440",
    "end": "14679"
  },
  {
    "text": "flow the high level OS and everything around it obviously these can still be compromised but you're largely seeing",
    "start": "14679",
    "end": "19720"
  },
  {
    "text": "very complex attacks to bypass these uh protections rather than simple straight",
    "start": "19720",
    "end": "25199"
  },
  {
    "text": "um instantaneous exploits um for this talk I wanted to find two exploits that",
    "start": "25199",
    "end": "31640"
  },
  {
    "text": "were very simple and easy to exploit and fun that would compromise the physical security of two of my own phones and see",
    "start": "31640",
    "end": "37440"
  },
  {
    "text": "what happened um so there's going to be two case stes the first is going to be gaining rout access to a smartphone",
    "start": "37440",
    "end": "42559"
  },
  {
    "text": "where all of the bootloader unlocking had been disabled so the standard method for getting root had been disabled and",
    "start": "42559",
    "end": "48480"
  },
  {
    "text": "then the second is going to be a full secure boot bypass on a modern Samsung phone so rooting on a lock boot loader",
    "start": "48480",
    "end": "56559"
  },
  {
    "text": "essentially I had my old smartphone and wanted to root it so so I can test mobile applications on it and see what",
    "start": "56559",
    "end": "61960"
  },
  {
    "text": "the hardware is doing um on most devices this indeed has a standard approach which is bootloader unlocking you reboot",
    "start": "61960",
    "end": "67799"
  },
  {
    "text": "to fast boot say fast boot OEM unlock and then the device will reboot and allow you to uh um modify the firmware",
    "start": "67799",
    "end": "74439"
  },
  {
    "text": "as you want to um while some do Place restrictions on the list like requiring their own special applications to",
    "start": "74439",
    "end": "80240"
  },
  {
    "text": "connect to the phone to do this the phone itself had disabled it completely so you could never boot into that mode and the attack service of the USB on the",
    "start": "80240",
    "end": "86799"
  },
  {
    "text": "secondary boot loader was just gone the target device was a smartphone from a Chinese OEM released in 2019 and used an",
    "start": "86799",
    "end": "93799"
  },
  {
    "text": "oem developed Fork of Android which has own system services and additional security protections to try and Harden it more than the standard Android",
    "start": "93799",
    "end": "101320"
  },
  {
    "text": "approach um the disabled bootload unlock um actually used a special engineering",
    "start": "101320",
    "end": "106640"
  },
  {
    "text": "app that you could only get via contacting the manufacturer or some other means that would store a special",
    "start": "106640",
    "end": "112280"
  },
  {
    "text": "signature within a hidden partition on the device which was inacessible to other applications and standard users um",
    "start": "112280",
    "end": "118520"
  },
  {
    "text": "and would also require you to log in and provide some personal information which are lots of different steps I didn't",
    "start": "118520",
    "end": "123600"
  },
  {
    "text": "particularly want to do on this um so when bootload and locking in this manner isn't available but you",
    "start": "123600",
    "end": "129640"
  },
  {
    "text": "still want to get Road access um you'll have to use an exploit you would like you would on a standard compromise of a smart device um with no direct access to",
    "start": "129640",
    "end": "137120"
  },
  {
    "text": "the bootloader USB interface which is the greatest attack Vector for when you're trying to um escalate privileges",
    "start": "137120",
    "end": "142280"
  },
  {
    "text": "on on the physical Hardware of the phone um I decided to find a vulnerability in the Android Fork that had been developed",
    "start": "142280",
    "end": "148120"
  },
  {
    "text": "for this phone um the Android Fork itself contained a huge number of additional services at the system and",
    "start": "148120",
    "end": "153879"
  },
  {
    "text": "Route level um to facilitate different Hardware components that have been added as well as other security features that",
    "start": "153879",
    "end": "159120"
  },
  {
    "text": "had been added and I was fairly sure to be able to find a compromise in one of those that would allow me to escalate to rout on the",
    "start": "159120",
    "end": "165280"
  },
  {
    "text": "device so the Android Fork had a service running as route which was called by System level applications for the",
    "start": "165280",
    "end": "171280"
  },
  {
    "text": "purpose of um archiving and backing up application data so it can be transferred to other phones for backup",
    "start": "171280",
    "end": "177200"
  },
  {
    "text": "purposes and also up to the cloud um this would require higher privileges than a standard application would",
    "start": "177200",
    "end": "183239"
  },
  {
    "text": "because it needs to go into the app data of individual applications which are partitioned off from each other on the",
    "start": "183239",
    "end": "188799"
  },
  {
    "text": "Android ecosystem um a brief analysis of the binary after I pulled it out of an OTA update image found in immediate command",
    "start": "188799",
    "end": "194840"
  },
  {
    "text": "injection vulnerability in the file names of files in in the application so when you would um a service call be made",
    "start": "194840",
    "end": "201720"
  },
  {
    "text": "to this service if it was a service call which contained a file name with back ticks in it you could actually execute",
    "start": "201720",
    "end": "207560"
  },
  {
    "text": "shell command as route unfortunately SC Linux was in place on",
    "start": "207560",
    "end": "212840"
  },
  {
    "text": "the Android device as it is on almost all Android devices Um this can be used to prevent a process with root um access",
    "start": "212840",
    "end": "220680"
  },
  {
    "text": "from accessing other Cod po of the system and keeping it in the context that's been provided so this root",
    "start": "220680",
    "end": "227000"
  },
  {
    "text": "command injection vulnerability allowed me to have access to all the application data on the device but literally nothing else and it was very strongly in",
    "start": "227000",
    "end": "233560"
  },
  {
    "text": "place um because it was configured so well throughout the OS I decided that this was a dead end and that I would try",
    "start": "233560",
    "end": "238720"
  },
  {
    "text": "to avoid the hlos as much as possible because the um boot loader was um out of",
    "start": "238720",
    "end": "243799"
  },
  {
    "text": "the question and the high level OS was out of the question I decided to go for the next available Target recovery",
    "start": "243799",
    "end": "250040"
  },
  {
    "text": "mode so on Android devices if you hold down a volume button and um Power it on",
    "start": "250040",
    "end": "255560"
  },
  {
    "text": "you can usually get into the recovery mode which is for rolling back OTA update images or factory resetting the",
    "start": "255560",
    "end": "260639"
  },
  {
    "text": "device and that sort of thing it's usually a very standard basic um uh set of options which are controlled using",
    "start": "260639",
    "end": "266919"
  },
  {
    "text": "volume up and volume down buttons as well as the power key to select them however the custom Android operating",
    "start": "266919",
    "end": "272080"
  },
  {
    "text": "system that had been added to the device had actually expanded this to have access to the touchscreen access to the",
    "start": "272080",
    "end": "277520"
  },
  {
    "text": "Wi-Fi card and access to all the storage on SD cards for the purposes of",
    "start": "277520",
    "end": "282639"
  },
  {
    "text": "expanding the functionality and making it look a bit better than the standard Android one um in order to find a vulnerability",
    "start": "282639",
    "end": "291199"
  },
  {
    "text": "in this recovery mode however a firmware image would be really useful so no OTA update image I downloaded every otaa",
    "start": "291199",
    "end": "297120"
  },
  {
    "text": "update image for the Target phone I was looking at and found that none none of them contained a recovery image whatsoever so I wouldn't be able to",
    "start": "297120",
    "end": "303240"
  },
  {
    "text": "reverse engineer anything from this device or from the recovery mode rather because there was nothing available for",
    "start": "303240",
    "end": "308440"
  },
  {
    "text": "me to look at directly and I couldn't dump it off the phone because I didn't have the privilege of access",
    "start": "308440",
    "end": "313880"
  },
  {
    "text": "um with no recovery image to reverse engineer I decided to go for very basic attacks and see if I could replicate",
    "start": "313880",
    "end": "319440"
  },
  {
    "text": "what I did on the high level OS um I saw that it had an option to install from storage or from SD card or from usbg and",
    "start": "319440",
    "end": "326400"
  },
  {
    "text": "encrypted update and the OEM had added encryption on top of the standard OT update format for Android which I",
    "start": "326400",
    "end": "332720"
  },
  {
    "text": "thought would be the most easy to exploited possible because I'd already found command injection in the high level OS so as I'd found it before in a file",
    "start": "332720",
    "end": "340400"
  },
  {
    "text": "name I decided to instantly try another command injection on a file name and",
    "start": "340400",
    "end": "345520"
  },
  {
    "text": "took a legitimate OTA update image and rename renamed it backtick sleep 30,000",
    "start": "345520",
    "end": "351120"
  },
  {
    "text": "back.zip and then tried to load it from the file system what this did is make the phone sit there all day trying to",
    "start": "351120",
    "end": "358800"
  },
  {
    "text": "perform the update meaning that it would hit a command injection somewhere within the binary and it would just sat there sleeping the",
    "start": "358800",
    "end": "364960"
  },
  {
    "text": "entire time I disclosed both these command injection vulnerabilities at this point",
    "start": "364960",
    "end": "370000"
  },
  {
    "text": "because they're both kind of basic but quite high risk um but they were very swiftly remediated by the O and new",
    "start": "370000",
    "end": "376080"
  },
  {
    "text": "versions of the software for released very quickly but as I now had command injection at root level in recovery mode",
    "start": "376080",
    "end": "382360"
  },
  {
    "text": "I thought I'd be able I'd be able to use that to escalate further into the device and gain more prived",
    "start": "382360",
    "end": "388199"
  },
  {
    "text": "access so so first I started with some root cause analysis because I had root access into the recovery mode I could",
    "start": "388199",
    "end": "394840"
  },
  {
    "text": "then reenable ADB and things like that which we'll be going on to a second but what I did to do this was see where in",
    "start": "394840",
    "end": "400080"
  },
  {
    "text": "the binary for the recovery binary this was occurring and what I actually found was that when it goes through the update",
    "start": "400080",
    "end": "406560"
  },
  {
    "text": "process it takes a show on sum of the OTA update image that's being used just using the standard exact command to do",
    "start": "406560",
    "end": "412039"
  },
  {
    "text": "this and they had Sprint the name of the file named directly into the command meaning that there was no escaping",
    "start": "412039",
    "end": "417240"
  },
  {
    "text": "whatsoever so a very basic easy command injection vulnerability um as there was this",
    "start": "417240",
    "end": "424360"
  },
  {
    "text": "command injection vulnerability I could probably use this to execute a more complex script if I adapted the file",
    "start": "424360",
    "end": "429599"
  },
  {
    "text": "name a bit more so by altering the name to include a basic4 encoded string um and then decoding that and running it",
    "start": "429599",
    "end": "435919"
  },
  {
    "text": "through sh as a very long file name I could probably use this to load a script from the file system and do things like",
    "start": "435919",
    "end": "442560"
  },
  {
    "text": "enable USB enable ADB that sort of thing which is my plan unfortunately the file system used",
    "start": "442560",
    "end": "448960"
  },
  {
    "text": "by Android user data which is where these um files were stored um does not support all special characters so things",
    "start": "448960",
    "end": "454639"
  },
  {
    "text": "like pipes um were not allowed by the file system luckily for me another update the OEM had added was allowing",
    "start": "454639",
    "end": "461000"
  },
  {
    "text": "exd4 file systems to be mounted um to load the update images from so I took a",
    "start": "461000",
    "end": "466319"
  },
  {
    "text": "Micro SD card form formatted it to exd 4 and added my command injection file name",
    "start": "466319",
    "end": "471960"
  },
  {
    "text": "directly into the device what I wanted to do was gather more information about how much access I",
    "start": "471960",
    "end": "478199"
  },
  {
    "text": "now have to the device through recovery mode I was assuming that SC Linux would still be there because it was on the Android side but it was also possible",
    "start": "478199",
    "end": "485280"
  },
  {
    "text": "that because the recovery binary drives everything within recovery mode it would have high enough privileges for me to",
    "start": "485280",
    "end": "490520"
  },
  {
    "text": "disable it if I wanted to um which turned out to be correct so what I did was first I um run the ID command into a",
    "start": "490520",
    "end": "496120"
  },
  {
    "text": "file so that I could see if I was running as root or not which was very important and then disable SC Linux with",
    "start": "496120",
    "end": "501520"
  },
  {
    "text": "the set in force zero command and then check it wasn't enforcing anymore and then enable ADB on the device giving me",
    "start": "501520",
    "end": "508199"
  },
  {
    "text": "full root check into the device of our USB in recovery mode which is very",
    "start": "508199",
    "end": "513399"
  },
  {
    "text": "powerful now having rout access into recovery mode is quite exciting if you want to poke around what the device is",
    "start": "513399",
    "end": "519599"
  },
  {
    "text": "doing but you're now not attacking an Android device you're attacking the recovery mode um so what I wanted to do",
    "start": "519599",
    "end": "525920"
  },
  {
    "text": "is find a way for me to laterally move from recovery to Android without rebooting the device or touching boot in",
    "start": "525920",
    "end": "531160"
  },
  {
    "text": "any way um so essentially switching from one user space to another without",
    "start": "531160",
    "end": "536320"
  },
  {
    "text": "bypassing all the um setup of disabling SE L side done the first option would have been to use K exac which is a",
    "start": "536320",
    "end": "543040"
  },
  {
    "text": "standard module on Linux devices which allows you to load in a new kernel and execute it from userspace you send it",
    "start": "543040",
    "end": "548560"
  },
  {
    "text": "the kernel file and then it will basically start it from the uh instance you're in without ever rebooting or",
    "start": "548560",
    "end": "554480"
  },
  {
    "text": "anything like that unfortunately the phone itself did not have this module enabled because it wouldn't there it's a",
    "start": "554480",
    "end": "560519"
  },
  {
    "text": "security risk to have it there um and so I tried to load as a custom built kernel",
    "start": "560519",
    "end": "565959"
  },
  {
    "text": "module but sadly that didn't function because they' added signature protection to their kernel modules which was the right idea so I decided to go for a user",
    "start": "565959",
    "end": "573760"
  },
  {
    "text": "space only approach which is using p trce now p trce is a system call that allows another process a process to call",
    "start": "573760",
    "end": "581320"
  },
  {
    "text": "into another process looking at its memory debugging it pausing it rolling it back it needs to and things like that",
    "start": "581320",
    "end": "587240"
  },
  {
    "text": "typically this is used for debugging purposes and for certain other tracing things like using the strace command um",
    "start": "587240",
    "end": "593519"
  },
  {
    "text": "however it's extremely uh useful for exploitation and modifying running processes as well even um depth enabled",
    "start": "593519",
    "end": "600720"
  },
  {
    "text": "memory can still be uh modified if needed um what I wanted to do using",
    "start": "600720",
    "end": "606079"
  },
  {
    "text": "Petra was hook into the init process of Android which is the first process that runs and modify it and poke into it to",
    "start": "606079",
    "end": "615079"
  },
  {
    "text": "switch into Android from recovery um P trce can be configured to",
    "start": "615079",
    "end": "620360"
  },
  {
    "text": "immediately P pause the process and then you can modify the subsequent operations um to run commands and if I use the exx",
    "start": "620360",
    "end": "627880"
  },
  {
    "text": "v v command I could essentially swap out what in it was with a whole new process",
    "start": "627880",
    "end": "633120"
  },
  {
    "text": "by itself without affecting the device whatsoever um so the commands here are",
    "start": "633120",
    "end": "638399"
  },
  {
    "text": "just a few lines of assembly which essentially um load in a um uh execv",
    "start": "638399",
    "end": "644320"
  },
  {
    "text": "command um and then performs the service call for the service call XV",
    "start": "644320",
    "end": "650000"
  },
  {
    "text": "um switch root um is used to switch to new file system on boot on standard Android and Linux devices you switch",
    "start": "650000",
    "end": "656480"
  },
  {
    "text": "from usually and init ramfs and then switch it to um a standard um higher",
    "start": "656480",
    "end": "661760"
  },
  {
    "text": "level mounted one that's mounted by the inet ram FS um what I wanted to do was use this functionality to switch route",
    "start": "661760",
    "end": "668560"
  },
  {
    "text": "again from the init ramfs of recovery to the init ramfs of Android and then allow Android to boot essentially switching",
    "start": "668560",
    "end": "675480"
  },
  {
    "text": "from init ramfs to in ramfs to the Android operating system rather than what usually happens which is loading in",
    "start": "675480",
    "end": "680959"
  },
  {
    "text": "ramfs and then going straight to Android and what my plan was was to essentially take the init process which",
    "start": "680959",
    "end": "686880"
  },
  {
    "text": "is usually in it and then in it set up Linux and then in its second stage and then inject into it and switch rout into",
    "start": "686880",
    "end": "694480"
  },
  {
    "text": "Androids in it and execute that instead restarting everything restarting all the services so that we could restart the",
    "start": "694480",
    "end": "700639"
  },
  {
    "text": "whole process without ever rebooting the device um there are a few caveats to",
    "start": "700639",
    "end": "706079"
  },
  {
    "text": "this however because it was um not something that's intended to be done on",
    "start": "706079",
    "end": "711399"
  },
  {
    "text": "an Android device at any point um the first one was an issue with shared amounts so when you boot up an Android",
    "start": "711399",
    "end": "717519"
  },
  {
    "text": "Linux device it sets up you know devpro and in this instance they'd be set up as shared um mounts which means",
    "start": "717519",
    "end": "724519"
  },
  {
    "text": "that they will stay in the same place um as the file system moves around unfortunately because I needed to jump into a new file system I couldn't keep",
    "start": "724519",
    "end": "731399"
  },
  {
    "text": "them shared I needed them to move to the new location and I could force this by just dumping proc One Mount info",
    "start": "731399",
    "end": "737160"
  },
  {
    "text": "grapping for all the shared um mounts and then removing the shared and making them private which means they could be",
    "start": "737160",
    "end": "742480"
  },
  {
    "text": "moved around as a needers um I then needed to pass out all the um patch out of the s SE Linux",
    "start": "742480",
    "end": "749440"
  },
  {
    "text": "checks so during the init process init will check if the prop command line which is from the kernel um is wanting",
    "start": "749440",
    "end": "756440"
  },
  {
    "text": "the device to be booting in N Linux enforcing mode if it does it if it is disabled when this happens it forcibly",
    "start": "756440",
    "end": "762839"
  },
  {
    "text": "re-enables it and makes sure all the SE Linux contacts are set up um which in my case caused the phone to hang and we",
    "start": "762839",
    "end": "768720"
  },
  {
    "text": "have to do a force restart because nothing about what I was doing was anywhere near what the SE Linux configuration was doing um what I did",
    "start": "768720",
    "end": "776360"
  },
  {
    "text": "was take P trce again override all system calls for file reads and if it was reading from the prop command line",
    "start": "776360",
    "end": "782760"
  },
  {
    "text": "modify prop command line in transit to remove the SE Linux checks and make it",
    "start": "782760",
    "end": "787880"
  },
  {
    "text": "permissive throughout um in it also introd um executes a large number ofrc scripts",
    "start": "787880",
    "end": "794360"
  },
  {
    "text": "with it are the init scripts for hardware and services um because IID restarted this whole process these RC",
    "start": "794360",
    "end": "801320"
  },
  {
    "text": "scripts were being executed a second time after they had been done on recovery unfortunately reinitializing",
    "start": "801320",
    "end": "806519"
  },
  {
    "text": "some Hardware components a second time in Linux causes kernel panics because it doesn't know what to do with the process it doesn't know what's going on um",
    "start": "806519",
    "end": "813160"
  },
  {
    "text": "luckily this could be avoided just by taking that same um P trce read override and making any hardware initializations",
    "start": "813160",
    "end": "820440"
  },
  {
    "text": "just have an empty file there instead of a long complex file with all the configuration and service",
    "start": "820440",
    "end": "826519"
  },
  {
    "text": "installations um also once this process had completed um there would be a lot of",
    "start": "826519",
    "end": "831759"
  },
  {
    "text": "services that would still be running in the recovery context um rather than the Android context so there would be um",
    "start": "831759",
    "end": "837399"
  },
  {
    "text": "things like QT um the te Etc um running in a",
    "start": "837399",
    "end": "843000"
  },
  {
    "text": "um the wrong recovery context um this would prevent things like pin unlocking from working and getting access to the",
    "start": "843000",
    "end": "849519"
  },
  {
    "text": "rest of the device um but this could trivy be resolved by killing the processes before the newer version of init",
    "start": "849519",
    "end": "855079"
  },
  {
    "text": "starters um the system partition of the Android OS uses um DM Varity for mounting things like the system part um",
    "start": "855079",
    "end": "861120"
  },
  {
    "text": "the system partition which needs to be readon and not modified but is also still an ext4 um operating system um",
    "start": "861120",
    "end": "868199"
  },
  {
    "text": "because wanted to modify the system files I decided to find a way to um",
    "start": "868199",
    "end": "874160"
  },
  {
    "text": "override them temporarily on boot um what I did was use the mouse D- bind command which allows you to override one",
    "start": "874160",
    "end": "881000"
  },
  {
    "text": "um file with another essentially temporarily um which allowed me to disable all the system Services things like root detection and security and",
    "start": "881000",
    "end": "888120"
  },
  {
    "text": "replace some core apps and framework so I had really granular but temporary control over the device that would be",
    "start": "888120",
    "end": "893360"
  },
  {
    "text": "removed after I rebooted um so we're going to do a quick demo now of this whole process um I will",
    "start": "893360",
    "end": "899560"
  },
  {
    "text": "warn you is slightly a bridge way you be standing here for five minutes as I we watch a phone boot um but there's me",
    "start": "899560",
    "end": "905680"
  },
  {
    "text": "executing the command then tries to perform an OTA update and then",
    "start": "905680",
    "end": "912720"
  },
  {
    "text": "um you'll see the screen go off when all the recovery services Etc have been killed and the Android process is",
    "start": "912720",
    "end": "918880"
  },
  {
    "text": "restarting um so now Android has started up from the recovery instance without ever having to reboot and at this point",
    "start": "918880",
    "end": "925839"
  },
  {
    "text": "I found that I had to restart the screen to get the uh touch screen to work again but after I did so I could go into phone",
    "start": "925839",
    "end": "932440"
  },
  {
    "text": "go into ConnectBot and at this point I had added a telet back door into the device with full root",
    "start": "932440",
    "end": "938240"
  },
  {
    "text": "access um so I had a very interesting observation from this um which I was",
    "start": "938240",
    "end": "943720"
  },
  {
    "text": "really quite excited about was the fact that when I booted into Android the recovery file system and context was",
    "start": "943720",
    "end": "950519"
  },
  {
    "text": "still there and still accessible so for debugging purposes I'd added a telnet server into that so I could see what was",
    "start": "950519",
    "end": "956040"
  },
  {
    "text": "going on and i' found it was still running at this point so there was an entire file system that",
    "start": "956040",
    "end": "961920"
  },
  {
    "text": "Android had no idea about and really couldn't do much with by um the only difference was that um switch root had",
    "start": "961920",
    "end": "968199"
  },
  {
    "text": "deleted a lot of the files within the file system because they weren't necessary anymore and it was trying to save space but these could be",
    "start": "968199",
    "end": "973519"
  },
  {
    "text": "repopulated just using buy box again um the recovery Ram disk was",
    "start": "973519",
    "end": "978800"
  },
  {
    "text": "hidden from Android entirely but the recovery Ram disk could still access Android by going through proc one rout",
    "start": "978800",
    "end": "984839"
  },
  {
    "text": "which is taking you to the root file system for process one this meant that I could log into the recovery context mess",
    "start": "984839",
    "end": "991639"
  },
  {
    "text": "with Android but Android really didn't have much idea about it apart from maybe seeing processes that didn't quite understand um I decided to expand this",
    "start": "991639",
    "end": "998680"
  },
  {
    "text": "and add a whole Debian root file system into the device and use the same idea to give me uh very like granular control",
    "start": "998680",
    "end": "1005839"
  },
  {
    "text": "over what was happening in Android without Android really having an idea of what I was doing um root access by this method was",
    "start": "1005839",
    "end": "1013040"
  },
  {
    "text": "found to work consistently so the tool manipulating in it ran constantly throughout this and stayed connected to",
    "start": "1013040",
    "end": "1018240"
  },
  {
    "text": "in it nonstop because it was required for a lot of the different interaction that was going on um but I found that I",
    "start": "1018240",
    "end": "1023720"
  },
  {
    "text": "never had a crash from this there were no real problems and I could leave the phone on for days without any issues um but also I could just reboot the phone",
    "start": "1023720",
    "end": "1030600"
  },
  {
    "text": "if I wanted to and have no will effects and it would reboot with no rout access whatsoever no n disabling or anything",
    "start": "1030600",
    "end": "1037240"
  },
  {
    "text": "and it could be used as a standard phone again with the phone having no idea about the fact that it' been manipulated in this way which is quite",
    "start": "1037240",
    "end": "1043839"
  },
  {
    "text": "exciting now we're going to on the uh slightly more technical one which is going to be exploiting the second freeb loader in an exos based based phone so",
    "start": "1043839",
    "end": "1052679"
  },
  {
    "text": "exos based devices um have had significant research placed on them on their download mode which is their prepar um Samsung's Preparatory protocol",
    "start": "1052679",
    "end": "1059840"
  },
  {
    "text": "for deploying um new OT update or new updates of the thing or recovering them from um irreversible errors um this all",
    "start": "1059840",
    "end": "1067160"
  },
  {
    "text": "focused on the high level download protocol however and not on the USB stack underneath and I really want to",
    "start": "1067160",
    "end": "1072559"
  },
  {
    "text": "see if I could find a um vulnerability in the core USB stack because in there I would not only have um a vulnerability",
    "start": "1072559",
    "end": "1079559"
  },
  {
    "text": "in their download mode but also their fast boot mode which is used for other Administration so the target device in",
    "start": "1079559",
    "end": "1085600"
  },
  {
    "text": "this instance was the Samsung Galaxy a4s released in August 2022 um which used the exos 850 chipset which is also a",
    "start": "1085600",
    "end": "1092880"
  },
  {
    "text": "fairly recent chipset but it's not a highend one compared to the latest and greatest Samsung phones um the secondary boot loader in",
    "start": "1092880",
    "end": "1100440"
  },
  {
    "text": "um Samsung is called uh s boot um which has multiple different modes and features the first being standard boot",
    "start": "1100440",
    "end": "1106440"
  },
  {
    "text": "which just takes up to the high level Android High Lev Android operating system download mode which was already",
    "start": "1106440",
    "end": "1111600"
  },
  {
    "text": "mentioned fast boot mode and then upload mode which is a mode which is used for",
    "start": "1111600",
    "end": "1117520"
  },
  {
    "text": "administrating the device when it's in a very very broken State essentially um this is all incused in a single firmware",
    "start": "1117520",
    "end": "1124159"
  },
  {
    "text": "binary called es boot.bin um stored in the file system um but if I'd found a",
    "start": "1124159",
    "end": "1129640"
  },
  {
    "text": "vulnerability in the USB protocol I would have a vulnerability in all three of the sections so download fast Mo and",
    "start": "1129640",
    "end": "1137039"
  },
  {
    "text": "upload um so so the core part of the USB stack is USB control transfers which are",
    "start": "1137039",
    "end": "1142320"
  },
  {
    "text": "in every USB device and they use some standard parameters which are BM request type B request W value W index a buffer",
    "start": "1142320",
    "end": "1149200"
  },
  {
    "text": "and then a buffer size um which is a 16bit value um it's very basic but it's",
    "start": "1149200",
    "end": "1154280"
  },
  {
    "text": "also the core component of how USB works for Samsung uh for all USB",
    "start": "1154280",
    "end": "1159960"
  },
  {
    "text": "devices um additionally fuzzing control transfers is very very simple because",
    "start": "1159960",
    "end": "1166080"
  },
  {
    "text": "control transfers are not usually part of of the um core protocols being used by a device um they can just be randomly",
    "start": "1166080",
    "end": "1174039"
  },
  {
    "text": "um attacked using just Rand in every single parameter including the buffer and seeing what happens unsuccessful",
    "start": "1174039",
    "end": "1179440"
  },
  {
    "text": "requests will usually be rejected by the device that you're targeting giving you a really really like granular control",
    "start": "1179440",
    "end": "1185159"
  },
  {
    "text": "over knowing which requests are doing something and which aren't um as you can see there I have a function call which",
    "start": "1185159",
    "end": "1190280"
  },
  {
    "text": "is the basis of the fuzzer which got me to a full um secure boot bypass and as you can see it's not very",
    "start": "1190280",
    "end": "1197120"
  },
  {
    "text": "complex um um so initial fuzzing attempts with this um sending purely random data from per purely random",
    "start": "1197120",
    "end": "1202440"
  },
  {
    "text": "parameters caused the device to reboot into a failure mode um which said that the update that was being performed had",
    "start": "1202440",
    "end": "1207679"
  },
  {
    "text": "failed completely this occurred when an ox F6 value was sent as the B request parameter which didn't really mean much",
    "start": "1207679",
    "end": "1214080"
  },
  {
    "text": "to me but I um tried this a few times and saw the same thing luckily I could get out of this failure mode by um using",
    "start": "1214080",
    "end": "1220960"
  },
  {
    "text": "a command line tool called hle which is used for um uh uh updating via this download protocol which allowed it to",
    "start": "1220960",
    "end": "1227520"
  },
  {
    "text": "reboot back into to the standard L mode without any issues so I continued fuzzing filtering",
    "start": "1227520",
    "end": "1233840"
  },
  {
    "text": "out the O F6 command because I didn't want to keep soft breaking my phone and I found one that would crash the phone",
    "start": "1233840",
    "end": "1240600"
  },
  {
    "text": "and cause it to reboot back into the operating system to in Android um This",
    "start": "1240600",
    "end": "1245919"
  },
  {
    "text": "was um born from a single seed which was then just repeated over and over again to make sure that it did the same thing every time and I cut out transfers in",
    "start": "1245919",
    "end": "1253000"
  },
  {
    "text": "the sequence that was being performed until I found what the root cause was one transform uh transfer was s send in",
    "start": "1253000",
    "end": "1258559"
  },
  {
    "text": "a get descripted request but sending in the wrong direction trans transmitting data instead of receiving it and the",
    "start": "1258559",
    "end": "1264320"
  },
  {
    "text": "second was a valid get descripted request which was receiving get descript stuff and then causing it to",
    "start": "1264320",
    "end": "1269679"
  },
  {
    "text": "crash so we come on to probably the biggest vulnerability you'll ever see on a USB device um ever because it is at",
    "start": "1269679",
    "end": "1277120"
  },
  {
    "text": "the control transfer level and this is descript overwrites so control transfers",
    "start": "1277120",
    "end": "1282520"
  },
  {
    "text": "have things like get descriptor set address Etc which have very specific directions for the data and get",
    "start": "1282520",
    "end": "1288559"
  },
  {
    "text": "descriptor is only ever meant to receive back to the host um this includes information about um the device itself",
    "start": "1288559",
    "end": "1295600"
  },
  {
    "text": "like um it's vendor ID it's product ID some string data and that sort of thing as well as a length that is stored as",
    "start": "1295600",
    "end": "1300679"
  },
  {
    "text": "the first bite of the data so that you can read a little bit of the descriptor see how big it's going to be and then",
    "start": "1300679",
    "end": "1305840"
  },
  {
    "text": "create um spre spread out your buffer as needed um if you can overwrite this you",
    "start": "1305840",
    "end": "1311640"
  },
  {
    "text": "can overwrite the first bite of it and give yourself expanded access to the memory within the chip so instead of",
    "start": "1311640",
    "end": "1317799"
  },
  {
    "text": "just having the descriptor you can see all the memory next to it um which usually includes um pointers to other",
    "start": "1317799",
    "end": "1324679"
  },
  {
    "text": "descriptors so if you can overwrite them you can overwrite where the memory is for other descriptors um which means",
    "start": "1324679",
    "end": "1331279"
  },
  {
    "text": "that you'll have an arbit memory readwrite within the device so what's interesting to me is",
    "start": "1331279",
    "end": "1338080"
  },
  {
    "text": "that most USB Stacks don't actually check this controls transfer Direction appropriately um essentially you're",
    "start": "1338080",
    "end": "1344480"
  },
  {
    "text": "meant to check with an if statement whether the direction is correct on the that's being sent to you so if it's a get descriptor request you should",
    "start": "1344480",
    "end": "1351039"
  },
  {
    "text": "definitely be checking if it's actually trying to receive data and start to send it what I found though is that in most targets rather than them checking",
    "start": "1351039",
    "end": "1358039"
  },
  {
    "text": "explicitly their Hardware is explicitly going for sends and receipts rather than being agnostic in that sense for",
    "start": "1358039",
    "end": "1364200"
  },
  {
    "text": "instance in this example from the stm32 usbd stack which is quite well written and easy to understand um it has the",
    "start": "1364200",
    "end": "1370919"
  },
  {
    "text": "request for receiving a device descriptor um and then there's no checks for the direction however it sends a",
    "start": "1370919",
    "end": "1377080"
  },
  {
    "text": "send data request EST within it Hardware rather than just doing a transfer request of any kind in this case however",
    "start": "1377080",
    "end": "1382960"
  },
  {
    "text": "on the exos device it wasn't checking what the direction was that was going on so what I wanted to do was overwrite",
    "start": "1382960",
    "end": "1391400"
  },
  {
    "text": "that first bite which was the size bite and then give me um a full view of the memory adjacent to the descriptor within",
    "start": "1391400",
    "end": "1397760"
  },
  {
    "text": "memory um this was ineffective however and it seems that the me the data side was actually being stored in a separate",
    "start": "1397760",
    "end": "1403440"
  },
  {
    "text": "parameter somewhere within the boot loader um luckily for me however there was just buffer over flow within this",
    "start": "1403440",
    "end": "1409559"
  },
  {
    "text": "anyway so I could overwrite all of the data next to the descriptor just as I wanted to because there were no checks",
    "start": "1409559",
    "end": "1415080"
  },
  {
    "text": "on the size against it because of this I could then start brute forcing memory to find out what",
    "start": "1415080",
    "end": "1422039"
  },
  {
    "text": "data was next to it rather than having it directly I would have to find out for myself so I found the size of a buffer",
    "start": "1422039",
    "end": "1429159"
  },
  {
    "text": "that would cause the device to crash in the same way and then I would do I would change that final bite and I would",
    "start": "1429159",
    "end": "1435559"
  },
  {
    "text": "increment it by one and until I found found a bite that was accurate that was the same as what was already in memory",
    "start": "1435559",
    "end": "1441480"
  },
  {
    "text": "the device would keep rebooting and keep rebooting but if I hit one that allowed the device to continue working it can",
    "start": "1441480",
    "end": "1446520"
  },
  {
    "text": "move on to the next bite and do the same thing until it built up a big list of pointers which were pointers to other things within the USB St so as you can",
    "start": "1446520",
    "end": "1453480"
  },
  {
    "text": "see there's f941 AO e0 which is a pointer to another descriptor being able",
    "start": "1453480",
    "end": "1458640"
  },
  {
    "text": "to modify these pointers and then read and write the other descriptors they were pointing to meant that hi had full",
    "start": "1458640",
    "end": "1464200"
  },
  {
    "text": "access to the entire memory of el1 without ever having to pull any of a form of exploitation I could read and",
    "start": "1464200",
    "end": "1469520"
  },
  {
    "text": "write any memory on the chip as long as it was within the context of the um secondary",
    "start": "1469520",
    "end": "1474600"
  },
  {
    "text": "bootloader um I used this to jump memory so um in the device um I saw that most",
    "start": "1474600",
    "end": "1480520"
  },
  {
    "text": "of the memory pointers I were looking at between F9 and 6 Z and Fa and 6 zos so I decided to create a memory dumper just a",
    "start": "1480520",
    "end": "1486720"
  },
  {
    "text": "bit before that assuming that before that would be the actual code for the secondary boot loader and I was correct",
    "start": "1486720",
    "end": "1492799"
  },
  {
    "text": "finding that the secondary boot loader code started at f88 and 5 Z followed by the ram content contents and then the",
    "start": "1492799",
    "end": "1498720"
  },
  {
    "text": "frame buffer which is fa and 6 Z and I wrote just a nice little program that would just dump that memory what was",
    "start": "1498720",
    "end": "1504760"
  },
  {
    "text": "interesting is if I wanted to I could also use this for a cold boot attack this is an attack where you reboot a phone and then dump the memory that",
    "start": "1504760",
    "end": "1511600"
  },
  {
    "text": "hasn't been cleaned off from the reboot giving you access to um the data on the device without ever having to uh get do",
    "start": "1511600",
    "end": "1517279"
  },
  {
    "text": "a PIN bypass and that sort of thing I was a bit concerned about exploiting this further because most um",
    "start": "1517279",
    "end": "1523880"
  },
  {
    "text": "devices nowadays use dep which is data execution prevention meaning you can't overr right code that is going to be run",
    "start": "1523880",
    "end": "1530559"
  },
  {
    "text": "um so as the boot load was running in Ram I thought they maybe hadn't configured it properly but they had meaning that I couldn't overwrite the",
    "start": "1530559",
    "end": "1537279"
  },
  {
    "text": "running secondary boot loader um because the phone would just hang saying you don't have access to that memory the mmu",
    "start": "1537279",
    "end": "1543360"
  },
  {
    "text": "blocked you however if I tried to execute code within unused sections of ram which just hadn't been allocated at",
    "start": "1543360",
    "end": "1549159"
  },
  {
    "text": "all I had full read WR access and full execution access meaning I could write any code I wanted to into it and do",
    "start": "1549159",
    "end": "1554760"
  },
  {
    "text": "whatever I wanted um what I wanted to do is patch in some new functionality um essentially",
    "start": "1554760",
    "end": "1560440"
  },
  {
    "text": "what I wanted to do was use this to get myself into a position where I could modify the kernel within memory and then",
    "start": "1560440",
    "end": "1565840"
  },
  {
    "text": "start that kernel giving me access to the device um bypassing nox protections and that sort of thing um so I like to",
    "start": "1565840",
    "end": "1572799"
  },
  {
    "text": "do these things in C so I um write my code in C and then use GCC static no standard lip meaning that it will just",
    "start": "1572799",
    "end": "1578600"
  },
  {
    "text": "give you a raw um sub routings compiled out um which you can then use object copy to then turn into binaries that",
    "start": "1578600",
    "end": "1584960"
  },
  {
    "text": "then could be dumped into memory with this exploit um I wanted to use fast boot mode for",
    "start": "1584960",
    "end": "1590840"
  },
  {
    "text": "this because fast boot uses string based commands which are usually stored within a table within Ram one pointer points to",
    "start": "1590840",
    "end": "1597360"
  },
  {
    "text": "the function name and the other pointer points to the function itself um this would allow me to essentially run a",
    "start": "1597360",
    "end": "1603080"
  },
  {
    "text": "command um execute some code see what happened and then run it again and do quite a lot more debugging than I'd have",
    "start": "1603080",
    "end": "1609000"
  },
  {
    "text": "usually and I just chose the get variable command for this because I only had to get variable and reboot in a fast boot instance and I didn't want to keep",
    "start": "1609000",
    "end": "1615840"
  },
  {
    "text": "rebooting the phone by accident so the table usually looks like this so you have the string reboot then the reboot",
    "start": "1615840",
    "end": "1622000"
  },
  {
    "text": "function call and then getvar and then the fun getvar function call so very simple and very easy to modify if",
    "start": "1622000",
    "end": "1628159"
  },
  {
    "text": "needed um what I wanted to do as I said was reimplement boot so this allow me to",
    "start": "1628159",
    "end": "1633679"
  },
  {
    "text": "um modify the um kernel after it been verified by all of the lower level systems meaning that things like",
    "start": "1633679",
    "end": "1639480"
  },
  {
    "text": "signature verification have been completed exraction have been completed and that sort of thing and if I could",
    "start": "1639480",
    "end": "1645120"
  },
  {
    "text": "modify it after this been done I could do what whatever I wanted to the kernel the file system whatever rout it if I",
    "start": "1645120",
    "end": "1650520"
  },
  {
    "text": "wanted to without hitting knocks hopefully um what I found however was that no USB based mode on the device had",
    "start": "1650520",
    "end": "1657200"
  },
  {
    "text": "a way to just start booting the phone usually fast boot which is the um protocol we're using on other devices",
    "start": "1657200",
    "end": "1663159"
  },
  {
    "text": "allows you to boot from memory um in certain instances however in this instance there was no capability for",
    "start": "1663159",
    "end": "1668679"
  },
  {
    "text": "that and calling into the um standard boot functions that were used by the standard boot mode just caused the",
    "start": "1668679",
    "end": "1673919"
  },
  {
    "text": "device to hang for reasons unknown to me um there are two options for me",
    "start": "1673919",
    "end": "1679240"
  },
  {
    "text": "reimplementing boot um the first thing I could do was copy the entirety of the running memory into a section of memory",
    "start": "1679240",
    "end": "1685679"
  },
  {
    "text": "where depth hadn't been enabled so I could just rewrite it as I wanted to and do whatever I wanted or I could",
    "start": "1685679",
    "end": "1691240"
  },
  {
    "text": "reimplement the boot functionality from scratch um I decided to go for the latter because there wasn't really enough memory available for me to um",
    "start": "1691240",
    "end": "1698799"
  },
  {
    "text": "reboot uh or to overwrite as much memory as I really needed to perform that so functions in the bootloader",
    "start": "1698799",
    "end": "1706120"
  },
  {
    "text": "could be just trivially addressed by absolute addresses and I would just literally point to them and then execute",
    "start": "1706120",
    "end": "1711600"
  },
  {
    "text": "them Point them execute them knowing what the parameters were and sometimes modifying things like whether it wanted to perform certain checks and I could",
    "start": "1711600",
    "end": "1717919"
  },
  {
    "text": "also check if those functions were absolutely necessary for the boot process or if they were",
    "start": "1717919",
    "end": "1723559"
  },
  {
    "text": "Superfluous um I could also debug this quite nicely because I had a full memory dump of a successful kernel boot um and",
    "start": "1723559",
    "end": "1732080"
  },
  {
    "text": "I could literally um take this and then compare it against the failed Boot and see wherever a print print F there were",
    "start": "1732080",
    "end": "1738000"
  },
  {
    "text": "loads of print FS within the uh the um boot loader and just see which ones were incorrect in different ways and which",
    "start": "1738000",
    "end": "1744720"
  },
  {
    "text": "functions weren't working correctly which was really nice meaning I could do a onetoone comparison until I got to the point where the thing was",
    "start": "1744720",
    "end": "1751880"
  },
  {
    "text": "booting um at the end of the whole process um I would um directly call into the kernel and then execute it um which",
    "start": "1751880",
    "end": "1759240"
  },
  {
    "text": "included KLR um which meant the kernel Base address wasn't always in the same place luckily the pointer to it was",
    "start": "1759240",
    "end": "1765559"
  },
  {
    "text": "stored statically within memory so so I could just get that pointer and then start executing which was very nice um",
    "start": "1765559",
    "end": "1772320"
  },
  {
    "text": "after patching in however all of the appropriate functions um the kernel load",
    "start": "1772320",
    "end": "1777399"
  },
  {
    "text": "um was loaded into my be executed however it hung and never started Android with the boot logo just staying",
    "start": "1777399",
    "end": "1782799"
  },
  {
    "text": "there completely nothing happening no interaction whatsoever and causing me to have to reboot the phone by hand um",
    "start": "1782799",
    "end": "1789480"
  },
  {
    "text": "however I decided that if I could debug the secondary boot loer I could debug the kernel in the same way so I would",
    "start": "1789480",
    "end": "1796120"
  },
  {
    "text": "take the kernel and by patching out and knocking out different function calls I would see what was causing the hang and",
    "start": "1796120",
    "end": "1801519"
  },
  {
    "text": "get my way all the way back to see what was happening so I found that the device froze after the kernel reinitialized the",
    "start": "1801519",
    "end": "1808480"
  },
  {
    "text": "mmu um so usually um on kernel boot it will take a lot of the um um system",
    "start": "1808480",
    "end": "1814279"
  },
  {
    "text": "control registers and modify them so that they match the high level OS instead of the secondary boot loader um",
    "start": "1814279",
    "end": "1821000"
  },
  {
    "text": "because it was hanging at this point it implied that there was things still going on the bootloader that I didn't know about that were causing um code to",
    "start": "1821000",
    "end": "1827840"
  },
  {
    "text": "tried to be executed in memory that was no longer accessible to it so the most reason likely reason for this was that",
    "start": "1827840",
    "end": "1832880"
  },
  {
    "text": "the boot loader was using threads of certain kind which is very unusual for a bootloader um so most Android",
    "start": "1832880",
    "end": "1839039"
  },
  {
    "text": "bootloaders just use a single thread for their functionality and then sometimes use interrupts for things like the USB",
    "start": "1839039",
    "end": "1844279"
  },
  {
    "text": "communication um but I found that es was found using an OS of some kind which was",
    "start": "1844279",
    "end": "1849880"
  },
  {
    "text": "facilitating multiple threads within the device um which were still running even though I had Co execution into one of",
    "start": "1849880",
    "end": "1856320"
  },
  {
    "text": "them as I found out um and as the kernel altered the mmu page tables they were attempting to",
    "start": "1856320",
    "end": "1861519"
  },
  {
    "text": "execute memory that was no longer mapped and no longer accessible so three threads were identified on the device there was the",
    "start": "1861519",
    "end": "1867600"
  },
  {
    "text": "background tasks which are things like um just checking the status updating the screen and that sort of thing there were",
    "start": "1867600",
    "end": "1873039"
  },
  {
    "text": "the USB control transfers which was what I was messing with and the high level USB communication which was the fast boot communication and the download",
    "start": "1873039",
    "end": "1879159"
  },
  {
    "text": "communication each one of these was constantly running and I didn't really have a trivial way to just pause them or stop them executing so I wanted to do",
    "start": "1879159",
    "end": "1885320"
  },
  {
    "text": "something very lazy um the simplest solution for disabling all threads would",
    "start": "1885320",
    "end": "1890679"
  },
  {
    "text": "be to throw an exception this would cause the device to want to go into that exception do whatever was needed and",
    "start": "1890679",
    "end": "1896600"
  },
  {
    "text": "then if it needs to return from it the the threads could continue again however if I put my boot code into an exception",
    "start": "1896600",
    "end": "1904159"
  },
  {
    "text": "then the kernel would boot without the threads ever being able to restart again and the device could start up and just continue working um and recovering from",
    "start": "1904159",
    "end": "1911000"
  },
  {
    "text": "the exception would never be required um so I could just dump the whole bootstrapping code I'd put up in at this",
    "start": "1911000",
    "end": "1916039"
  },
  {
    "text": "point into a um a Vectra based address register table and be fine and it should",
    "start": "1916039",
    "end": "1922480"
  },
  {
    "text": "execute sorry so in arm 64 um exceptions are stored in vbar e now because we're",
    "start": "1922480",
    "end": "1928919"
  },
  {
    "text": "in exception level one it was el1 um and it points to a vector address bace register table which includes functions",
    "start": "1928919",
    "end": "1935399"
  },
  {
    "text": "which all at maximum 128 bytes long for each exception what I decid to do is not",
    "start": "1935399",
    "end": "1941120"
  },
  {
    "text": "try and work out what exception was what and just have a knop sled throughout all of the exceptions down to my boot code",
    "start": "1941120",
    "end": "1946559"
  },
  {
    "text": "which would ha uh which would then execute if any exception was called um I found that this would",
    "start": "1946559",
    "end": "1953760"
  },
  {
    "text": "actually let the kernel boot meaning that um I got slightly further but found",
    "start": "1953760",
    "end": "1958840"
  },
  {
    "text": "that it would revert to recovery mode halfway through and tell me that there was a problem mounting the file systems",
    "start": "1958840",
    "end": "1964039"
  },
  {
    "text": "this er um error message FS manager Mount all um suggested that it wasn't being able to decrypt the user data",
    "start": "1964039",
    "end": "1970000"
  },
  {
    "text": "partition was which is encrypted by default meaning that probably some of the more security conscious um",
    "start": "1970000",
    "end": "1975880"
  },
  {
    "text": "components weren't being Ena correctly what I found was looking at my",
    "start": "1975880",
    "end": "1981440"
  },
  {
    "text": "logs that um key storage and Tess which are two components of the boot process were being called twice once by the",
    "start": "1981440",
    "end": "1988639"
  },
  {
    "text": "standard boot functionality and once by me during my exploit um these were what",
    "start": "1988639",
    "end": "1994600"
  },
  {
    "text": "this second initialization was causing the rest of the state machine of these particular components to fail meaning",
    "start": "1994600",
    "end": "2000399"
  },
  {
    "text": "I'd need to stop myself executing them twice luckily this could be done just by reimplementing the function that was",
    "start": "2000399",
    "end": "2006480"
  },
  {
    "text": "calling them completely and just knopping out those sections which was very simple and meant that the device",
    "start": "2006480",
    "end": "2011919"
  },
  {
    "text": "could then get fully all the way from uh the boot loader all the way to a high",
    "start": "2011919",
    "end": "2016960"
  },
  {
    "text": "level OS Android so we're going to do a demo now so as you can see we're starting in fast boot mode at this point",
    "start": "2016960",
    "end": "2023399"
  },
  {
    "text": "and immediately it will switch to the boot screen and then to the Samsung Galaxy screen saying secured by nox um",
    "start": "2023399",
    "end": "2030679"
  },
  {
    "text": "at this point you may see a tiny flicker um which is when it's switching from the bootloader to the kernel which is still",
    "start": "2030679",
    "end": "2036200"
  },
  {
    "text": "wanting to use that image and at this point it was still possible that the device would uh potentially reboot into",
    "start": "2036200",
    "end": "2042000"
  },
  {
    "text": "recovery mode and say it failed if I had messed something up in this process however because the um nox um message",
    "start": "2042000",
    "end": "2049118"
  },
  {
    "text": "disappeared it meant they we now into the Android file system and it was starting the services it was starting",
    "start": "2049119",
    "end": "2054800"
  },
  {
    "text": "things like um you know loading the um root the root file system making sure that it could connect the internet making sure there were no um other boot",
    "start": "2054800",
    "end": "2061800"
  },
  {
    "text": "level checks it was checking and in a few seconds hopefully you will see it then boot into my kernel which won't be",
    "start": "2061800",
    "end": "2068560"
  },
  {
    "text": "very interesting but we'll show that we could boot into Android from Fast boot mode um because I really want to mess",
    "start": "2068560",
    "end": "2076638"
  },
  {
    "text": "with the kernel more than anything else because I'd been modifying in such a granular embedded OS way from the boot loader I decided to keep it very simple",
    "start": "2076639",
    "end": "2083320"
  },
  {
    "text": "for my demonstrations today and just show the word hacked within the version string of the kernel however because I",
    "start": "2083320",
    "end": "2089320"
  },
  {
    "text": "could rewrite any part of the kernel and as long as I was careful I could modify any component I wanted and hopefully not",
    "start": "2089320",
    "end": "2095000"
  },
  {
    "text": "trigger nox now it was still like ly that I would at some point if I got a bit too lace fair with things but during",
    "start": "2095000",
    "end": "2101040"
  },
  {
    "text": "this whole process I modified things like SE L check slightly and haven't yet triggered KN which was very nice so",
    "start": "2101040",
    "end": "2108200"
  },
  {
    "text": "there's some final notes on this um as the export can now be triggered us an exception any boot mode so download fast",
    "start": "2108200",
    "end": "2113920"
  },
  {
    "text": "boot Etc um could be used I could reimplement this for download mode I can",
    "start": "2113920",
    "end": "2118960"
  },
  {
    "text": "reimplement it in any way I wanted and it should boot consistently um this meant even rable Samsung devices without",
    "start": "2118960",
    "end": "2125079"
  },
  {
    "text": "fast boot mode could be exploited in the same way because fast boot mode is only used on some of them um there was always",
    "start": "2125079",
    "end": "2131079"
  },
  {
    "text": "going to be a risk of triggering knock with this but at this point I hadn't seen it um the initial vulnerabilities",
    "start": "2131079",
    "end": "2137200"
  },
  {
    "text": "were disclosed to Samsung in December of 2022 um and Samsung provided constant updates on progress and uh queried",
    "start": "2137200",
    "end": "2143400"
  },
  {
    "text": "things when they needed to and patched the finding within three months which was extremely good of them for something that was so pervasive um the target",
    "start": "2143400",
    "end": "2150000"
  },
  {
    "text": "device was updated and found to no longer be vulnerable to the descript overright vulnerability so there was no code execution there anymore um I will",
    "start": "2150000",
    "end": "2157079"
  },
  {
    "text": "releasing tools for this um which you'll be able to see soon um in conclusion uh most devices",
    "start": "2157079",
    "end": "2163520"
  },
  {
    "text": "will still have simply exploitable vulnerabilities despite the resources used to mitigate against them and even",
    "start": "2163520",
    "end": "2168640"
  },
  {
    "text": "with basic vulnerabilities the effort required to go from a proof of concept to a full exploit can be extremely rewarding and lastly even on targets",
    "start": "2168640",
    "end": "2176000"
  },
  {
    "text": "which have had a huge amount of research performed on them there will still be a vector that no one else has tried thank you very",
    "start": "2176000",
    "end": "2182960"
  },
  {
    "text": "much",
    "start": "2185720",
    "end": "2188720"
  }
]