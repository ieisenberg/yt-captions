[
  {
    "text": "thank you for attending this presentation and I'd like to thank Black Hat for the opportunity to present our",
    "start": "149",
    "end": "5250"
  },
  {
    "text": "work here now before we begin I'd like to know just how many of you are",
    "start": "5250",
    "end": "11040"
  },
  {
    "text": "actually familiar with the second version of the HTTP protocol you could raise your hand okay second question how",
    "start": "11040",
    "end": "19410"
  },
  {
    "text": "many of you have actually got to implement it as part of I don't know you had to write a client or software thank",
    "start": "19410",
    "end": "26490"
  },
  {
    "text": "you and one last question is how many of you have actually done a passive client fingerprinting or any sort of client",
    "start": "26490",
    "end": "33120"
  },
  {
    "text": "fingerprinting okay thank you so this is the agendas for today's presentation I'm",
    "start": "33120",
    "end": "40920"
  },
  {
    "text": "going to walk you through some of it we're going to look at the research data and how we gathered it for this http/2",
    "start": "40920",
    "end": "46860"
  },
  {
    "text": "research then I'm going to do a quick overview of the http/2 protocol by the",
    "start": "46860",
    "end": "53340"
  },
  {
    "text": "end of which I hope all of you would be quite familiar with the key elements of the protocol especially the ones we've",
    "start": "53340",
    "end": "59550"
  },
  {
    "text": "used for the fingerprinting and the key differences between the second version",
    "start": "59550",
    "end": "64710"
  },
  {
    "text": "of the protocol and the prior versions once we once we've established that",
    "start": "64710",
    "end": "70710"
  },
  {
    "text": "we're going to go through the concept of passive clan fingerprinting and more specifically how we propose to do it on",
    "start": "70710",
    "end": "77759"
  },
  {
    "text": "the HTTP to protocol and last but not least the bonus slide of the threat",
    "start": "77759",
    "end": "83310"
  },
  {
    "text": "landscape we will cover for so just a little bit about me I work at Akamai i",
    "start": "83310",
    "end": "91049"
  },
  {
    "text": "fairly enjoy big data and single malt whiskies so if you got any or do you want to take some after the presentation",
    "start": "91049",
    "end": "97140"
  },
  {
    "text": "I'd be happy to meet with you some acknowledgments are due this",
    "start": "97140",
    "end": "102380"
  },
  {
    "text": "presentation is based on a white paper that we've published a few months ago and I invite you to go search it and",
    "start": "102380",
    "end": "108600"
  },
  {
    "text": "read the full white paper the research was led by two other researchers Ori",
    "start": "108600",
    "end": "113640"
  },
  {
    "text": "Seagal which is the director and manager of the threat research team and by another security researcher called Aaron",
    "start": "113640",
    "end": "120960"
  },
  {
    "text": "Freedman so acknowledgments to them so let's talk about some data collections",
    "start": "120960",
    "end": "126829"
  },
  {
    "text": "this is the research data corpus for this white paper for the work we've done",
    "start": "126829",
    "end": "131849"
  },
  {
    "text": "we've actually looked at ten million different http/2 connections and I'll explain shortly what http/2",
    "start": "131849",
    "end": "139260"
  },
  {
    "text": "connection mean and we reviewed more than 40,000 unique user agents which",
    "start": "139260",
    "end": "145019"
  },
  {
    "text": "cover hundreds of different actually http/2 implementations the data was",
    "start": "145019",
    "end": "152760"
  },
  {
    "text": "covered was sorry the data was a group from Akuma is",
    "start": "152760",
    "end": "158879"
  },
  {
    "text": "intelligent platform for those of you do not know Akamai Akamai is a leading CDN and we have a very deployed network two",
    "start": "158879",
    "end": "168359"
  },
  {
    "text": "hundred and twenty thousand eight servers which are deployed worldwide in 129 countries we are essentially 90",
    "start": "168359",
    "end": "175170"
  },
  {
    "text": "percent away one hop away from ninety percent of the Internet users and we",
    "start": "175170",
    "end": "181560"
  },
  {
    "text": "actually provide the content for some of the biggest hosts and web sites in the world and we estimate that we deliver",
    "start": "181560",
    "end": "188129"
  },
  {
    "text": "about fifteen to thirty percent of all the web traffic so this is the the platform that was used to gather in this",
    "start": "188129",
    "end": "194280"
  },
  {
    "text": "data so I think it's a fairly it's a first sample that would show what is",
    "start": "194280",
    "end": "200160"
  },
  {
    "text": "going on in the real world when we get to the threat landscape one of the",
    "start": "200160",
    "end": "205739"
  },
  {
    "text": "things that we do analyze and collect on this platform is web attacks and we see a lot of those attempts so that was used",
    "start": "205739",
    "end": "212370"
  },
  {
    "text": "for depicting the lamp thread scape as well some statistics about h2 that we",
    "start": "212370",
    "end": "218370"
  },
  {
    "text": "see on the platform I know that from time to time there are some adoption rate statistics in the",
    "start": "218370",
    "end": "224819"
  },
  {
    "text": "internet the latest one that I've seen or from I think September and they are talking about 17% of h2 adoption which",
    "start": "224819",
    "end": "231720"
  },
  {
    "text": "is quite high we currently see on our platform about 1 billion requests per day and we see 27 million IPs using HTTP",
    "start": "231720",
    "end": "240569"
  },
  {
    "text": "2 and more than 15,000 hosts supporting that that's a lot of a lot of numbers",
    "start": "240569",
    "end": "246209"
  },
  {
    "text": "overall you can say that 10% of the entire traffic going on the platform is",
    "start": "246209",
    "end": "252030"
  },
  {
    "text": "on h2 and you should keep that in mind and correlate it with the numbers of 17",
    "start": "252030",
    "end": "257880"
  },
  {
    "text": "adoption rate % of adoption rate that that is published in various sites so",
    "start": "257880",
    "end": "263849"
  },
  {
    "text": "let's do a deep dive into the h2 and overview of the protocol I would start with a simple HTTP one",
    "start": "263849",
    "end": "270479"
  },
  {
    "text": "request and have you keep it in mind for those of you who doesn't know HTTP this",
    "start": "270479",
    "end": "277560"
  },
  {
    "text": "is a simple request this is a text protocol version 1 and 1.1 of the protocol was a text protocol first line",
    "start": "277560",
    "end": "284699"
  },
  {
    "text": "we get the method the resource in this in this case it's a get method to",
    "start": "284699",
    "end": "289710"
  },
  {
    "text": "index.html we have the protocol version and some of the hosts that depict",
    "start": "289710",
    "end": "295310"
  },
  {
    "text": "information about this request keep that in mind and let's start doing the HTTP 2",
    "start": "295310",
    "end": "302610"
  },
  {
    "text": "overview HTTP 2 is based on a protocol called speedy that was developed by Google and",
    "start": "302610",
    "end": "307830"
  },
  {
    "text": "it was actually formalized late 2015 into RFC's 1 dealing with the actual",
    "start": "307830",
    "end": "313710"
  },
  {
    "text": "protocol and the second one is dealing with a header compression mechanism called H pack now as opposed to the",
    "start": "313710",
    "end": "321560"
  },
  {
    "text": "version 1 and 1.1 of the protocol this is a binary protocol and we'll see what",
    "start": "321560",
    "end": "327120"
  },
  {
    "text": "does that mean later on it can be submitted either over clear text or over",
    "start": "327120",
    "end": "333870"
  },
  {
    "text": "an encrypted Channel though I have not seen up until today a single implementation which is being",
    "start": "333870",
    "end": "340199"
  },
  {
    "text": "transmitted over a TCP clear text all of the implementations that we witnessed are using TLS and last but not least its",
    "start": "340199",
    "end": "350010"
  },
  {
    "text": "purpose is to address some of the challenges mainly around performance that prior versions of the protocol did",
    "start": "350010",
    "end": "357570"
  },
  {
    "text": "have so what are the challenges the first one is concurrency and in order to",
    "start": "357570",
    "end": "364139"
  },
  {
    "text": "achieve concurrency in the first versions of the protocol you had to do multiple TCP connections can anybody",
    "start": "364139",
    "end": "370740"
  },
  {
    "text": "think why is that not such a good idea in terms of performance",
    "start": "370740",
    "end": "375710"
  },
  {
    "text": "well TCP has a mechanism called slow start it's part of it flow control",
    "start": "376400",
    "end": "382020"
  },
  {
    "text": "mechanism where it starts very slow and exponentially brings up the paste until it's understanding rate until until it",
    "start": "382020",
    "end": "390740"
  },
  {
    "text": "encounters the fill the first loss and if you do multiple TCP connections and",
    "start": "390740",
    "end": "396510"
  },
  {
    "text": "you keep opening those TCP connections and closing them you are actually getting a hit a performance hit by the slow start",
    "start": "396510",
    "end": "402360"
  },
  {
    "text": "mechanism of TCP in version 1.1 1.0 of",
    "start": "402360",
    "end": "408900"
  },
  {
    "text": "the HTTP protocol you can have only one standing requests on each TCP connection",
    "start": "408900",
    "end": "414150"
  },
  {
    "text": "in version 1.1 and new mechanism was introduced called request pipelining",
    "start": "414150",
    "end": "419850"
  },
  {
    "text": "where you could actually pipeline several requests on the same TCP connection but the downside is that if",
    "start": "419850",
    "end": "426539"
  },
  {
    "text": "you had one big request or one big response to was ahead of line blocking it wasn't so efficient",
    "start": "426539",
    "end": "433099"
  },
  {
    "text": "the second challenge here is the header compression as you've all seen in the",
    "start": "433099",
    "end": "438509"
  },
  {
    "text": "slide about the first request in HTTP 1 the headers are very verbose and and",
    "start": "438509",
    "end": "444690"
  },
  {
    "text": "they are tend to be a very repetitive some of the headers go back and force in each request or in each response and",
    "start": "444690",
    "end": "451320"
  },
  {
    "text": "this is an ideal ground for compression and no such compression mechanism was introduced for the headers in Prior",
    "start": "451320",
    "end": "457349"
  },
  {
    "text": "versions of the protocol last but not least the passive server concept in h1",
    "start": "457349",
    "end": "464840"
  },
  {
    "text": "actually the the server could not initiate any sending of data to the client without having the client first",
    "start": "464840",
    "end": "471479"
  },
  {
    "text": "request that data and you might wonder why is that important why should the server want to proactively send data",
    "start": "471479",
    "end": "477659"
  },
  {
    "text": "where there are a lot of situation in which the server can know ahead of time in a very high level of probability that",
    "start": "477659",
    "end": "484380"
  },
  {
    "text": "the client is going to ask for several resources the classic example is when you download the main page HTML page and",
    "start": "484380",
    "end": "490169"
  },
  {
    "text": "the client starts to parse it and it's quite obvious that the next step is going to generate more requests for the",
    "start": "490169",
    "end": "495840"
  },
  {
    "text": "static content for the CSS and the JavaScript file if we could have the server send those file to him with the",
    "start": "495840",
    "end": "502259"
  },
  {
    "text": "initial request we could save a lot of time and as I've said these are performance seats that the second",
    "start": "502259",
    "end": "508199"
  },
  {
    "text": "version of the protocol is trying to actually address so in terms of",
    "start": "508199",
    "end": "515099"
  },
  {
    "text": "concurrency we no longer have multiple TCP connection HTTP 2 uses a single TCP",
    "start": "515099",
    "end": "521010"
  },
  {
    "text": "connection and everything is multiplexed on this connection for compression we",
    "start": "521010",
    "end": "528360"
  },
  {
    "text": "now have h-back ii RFC that was published along with the RFC for the protocol",
    "start": "528360",
    "end": "533580"
  },
  {
    "text": "which now compresses the headers and that is much more efficient and a new",
    "start": "533580",
    "end": "539130"
  },
  {
    "text": "concept for serverpush was introduced in an industry protocol and if any of you",
    "start": "539130",
    "end": "544590"
  },
  {
    "text": "is feeling uncomfortable with the fact that the server could be proactive there is a way for the client to opt out of it",
    "start": "544590",
    "end": "551100"
  },
  {
    "text": "at the beginning of connection and say not interested in you pushing me anything okay so we have a single TCP",
    "start": "551100",
    "end": "560100"
  },
  {
    "text": "connection in which the data flows and that connection is divided into logical",
    "start": "560100",
    "end": "567720"
  },
  {
    "text": "conversations or we can grouped into some kind of conversations called streams these streams are numbered going",
    "start": "567720",
    "end": "574860"
  },
  {
    "text": "from 0 and up where essentially even number strings are according to the RFC",
    "start": "574860",
    "end": "582210"
  },
  {
    "text": "should be our streams that were initiated by the server and odd-numbered streams are initiated by the client",
    "start": "582210",
    "end": "588680"
  },
  {
    "text": "stream 0 is the only stream which is dealing with the parameters for the",
    "start": "588680",
    "end": "594660"
  },
  {
    "text": "entire connections and we'll see that later so this is the definition of a stream according to the RFC it's an",
    "start": "594660",
    "end": "601830"
  },
  {
    "text": "independent independent bi-directional sequence of frames exchanged between the",
    "start": "601830",
    "end": "606900"
  },
  {
    "text": "client and the server so now we are going to see the most important unit of communication in the h2 protocol and",
    "start": "606900",
    "end": "613050"
  },
  {
    "text": "that's the frames and each frame which is going over the over the wire between",
    "start": "613050",
    "end": "618270"
  },
  {
    "text": "the two peers is allocated to a certain stream in this case it's stream 93 and",
    "start": "618270",
    "end": "623750"
  },
  {
    "text": "these frames are actually the basic unit of communication in this protocol now",
    "start": "623750",
    "end": "630300"
  },
  {
    "text": "just as a HTTP message in version 1 protocol could have two sections a header section and the actual body of",
    "start": "630300",
    "end": "637530"
  },
  {
    "text": "the message or it could have only a single section a get request with nothing in the body would only have",
    "start": "637530",
    "end": "643590"
  },
  {
    "text": "headers so we group streams which are logically can be mapped into requests or",
    "start": "643590",
    "end": "649050"
  },
  {
    "text": "responses and for example a request would have a headers frame and a data frame just as a regular HTTP message",
    "start": "649050",
    "end": "656190"
  },
  {
    "text": "will have them I don't know why you are seeing them as white but okay",
    "start": "656190",
    "end": "662210"
  },
  {
    "text": "so these are the key elements we've spoken about friends and we'll elaborate",
    "start": "663150",
    "end": "668880"
  },
  {
    "text": "about them shortly and we have spoken about streams and we've mentioned that",
    "start": "668880",
    "end": "674160"
  },
  {
    "text": "each stream should have a unique stream ID and it could have a priority set to him and a message would be a sequence of",
    "start": "674160",
    "end": "681180"
  },
  {
    "text": "frame which will be logical logically mapped into requests or responses so let's talk about frames",
    "start": "681180",
    "end": "689430"
  },
  {
    "text": "this this is the most important unity in the protocol the RFC defines ten types of frames and they can be mapped into",
    "start": "689430",
    "end": "696300"
  },
  {
    "text": "three logical groups first of all the frames which deal with the actual messaging and there are two types of",
    "start": "696300",
    "end": "701730"
  },
  {
    "text": "them the headers frame and the data frame the other frame are dealing either",
    "start": "701730",
    "end": "707040"
  },
  {
    "text": "with flow control of the protocol adjusting the windows update for example or adjusting the priority or with",
    "start": "707040",
    "end": "714390"
  },
  {
    "text": "anything that has to do with tree management those streams that we saw on the single TCP connection can be opened",
    "start": "714390",
    "end": "720930"
  },
  {
    "text": "and closed and there are some frames that deal with this overhead of stream management so I've mentioned that HTTP 2",
    "start": "720930",
    "end": "731850"
  },
  {
    "text": "is a binary protocol and that means that everything is getting packed into a binary structure and this is the layout",
    "start": "731850",
    "end": "739260"
  },
  {
    "text": "of a frame according to the RFC where the frame might change but the headers",
    "start": "739260",
    "end": "744390"
  },
  {
    "text": "of the frame are constant you have the free the first nine octet of a frame the",
    "start": "744390",
    "end": "750690"
  },
  {
    "text": "first 24 bit is an unsigned integer that we denote the length of the payload next",
    "start": "750690",
    "end": "756029"
  },
  {
    "text": "you have one byte or eight bits that denote the type of the frame if it's a header frame a data frame and so on so",
    "start": "756029",
    "end": "761850"
  },
  {
    "text": "forth next we have 8 bits for frame flags another reserved bit which",
    "start": "761850",
    "end": "768779"
  },
  {
    "text": "currently has no functionality assigned to it and the rest of the 31 bits would be 31 bit unsigned integer for the",
    "start": "768779",
    "end": "776850"
  },
  {
    "text": "stream ID let's look at an actual example so as I've said the first 24 bits would",
    "start": "776850",
    "end": "784050"
  },
  {
    "text": "denote the length of the payload the next byte or 8 bits would show that this",
    "start": "784050",
    "end": "789390"
  },
  {
    "text": "is a herald frame in this case hex notation of 1",
    "start": "789390",
    "end": "794660"
  },
  {
    "text": "the next 8-bit we have some flags turn gene and herders priority and so on so",
    "start": "794660",
    "end": "801179"
  },
  {
    "text": "forth reserve beat the stream ID and this is",
    "start": "801179",
    "end": "806519"
  },
  {
    "text": "the actual frame payload I'm sorry you can see the gray background keep in mind",
    "start": "806519",
    "end": "814049"
  },
  {
    "text": "this is the headers frame and I've mentioned that errors in HTTP 2 are not going as a string representations there",
    "start": "814049",
    "end": "821639"
  },
  {
    "text": "will be compressed using H back and then packed into this binary formation but I've left them on just for you know so",
    "start": "821639",
    "end": "829529"
  },
  {
    "text": "you can have a better look at what is going on notice that the first four",
    "start": "829529",
    "end": "834569"
  },
  {
    "text": "headers are starting with a colon these are not regular HTTP headers HTTP 2 has",
    "start": "834569",
    "end": "840029"
  },
  {
    "text": "introduced a new concept which is called pseudo headers and those are the four",
    "start": "840029",
    "end": "845129"
  },
  {
    "text": "headers that start with colons I'll talk about them later so to do a small recap",
    "start": "845129",
    "end": "853369"
  },
  {
    "text": "we have a single TCP connection and on top of that connection we have different",
    "start": "853369",
    "end": "858899"
  },
  {
    "text": "frames each of them allocated to different streams map to conversation so get request using the hello stream could",
    "start": "858899",
    "end": "866669"
  },
  {
    "text": "be user I'm sorry using the Adams headers frame could be sent on a single stream and the",
    "start": "866669",
    "end": "872610"
  },
  {
    "text": "server would respond on the same stream meanwhile another get request could be sent on a different stream and the",
    "start": "872610",
    "end": "878489"
  },
  {
    "text": "server will respond to that now I have a small video here of demonstration you",
    "start": "878489",
    "end": "884189"
  },
  {
    "text": "can look go and search for Akamai HTTP 2 demo well we see the same image being pulled up first in HTTP 1.1 and the",
    "start": "884189",
    "end": "892589"
  },
  {
    "text": "second one the same is images pulled up in version 2 of the protocol and in this",
    "start": "892589",
    "end": "898769"
  },
  {
    "text": "case it was twice as fast I think I recorded it in an internet cafe with some internet late latency but if you'll",
    "start": "898769",
    "end": "904769"
  },
  {
    "text": "do that at your office's or back at home you would see a speed increase of up to 4 times or five times more faster using",
    "start": "904769",
    "end": "912029"
  },
  {
    "text": "the the h2 method a few things we have",
    "start": "912029",
    "end": "917459"
  },
  {
    "text": "to keep in mind when we are trying to analyze this protocol and inspect the content and see the conversations first",
    "start": "917459",
    "end": "924089"
  },
  {
    "text": "this is a binary protocol you can just use that cut and draft the traffic and see",
    "start": "924089",
    "end": "929220"
  },
  {
    "text": "what's going on it's it's not so simple second of all if you add to that that",
    "start": "929220",
    "end": "934380"
  },
  {
    "text": "all implementations that I've seen are using TLS the content is encrypted and",
    "start": "934380",
    "end": "941240"
  },
  {
    "text": "most of the intercepting proxies we are agreat we are using currently in the web",
    "start": "941269",
    "end": "946980"
  },
  {
    "text": "application security feel like burp fiddler still don't support h2 so if you",
    "start": "946980",
    "end": "952889"
  },
  {
    "text": "would like to intercept a request that becomes not so trivial so which tools can we use to watch these",
    "start": "952889",
    "end": "960350"
  },
  {
    "text": "conversations well on the server side I'm using the ng HTTP 2 server logs",
    "start": "960350",
    "end": "966480"
  },
  {
    "text": "these are verbose logs debug logs and we'll dive into them and see exactly",
    "start": "966480",
    "end": "971639"
  },
  {
    "text": "what goes on in these conversations if we're on the client side I urge you to",
    "start": "971639",
    "end": "977790"
  },
  {
    "text": "use Chrome chrome has the net internals where you can actually look at all the HTTP 2 sessions you're having and see a",
    "start": "977790",
    "end": "984779"
  },
  {
    "text": "complete verbose log of anything that goes in that session so let's get",
    "start": "984779",
    "end": "991110"
  },
  {
    "text": "familiarized with with the logs this is a snippet from the server log so keep in",
    "start": "991110",
    "end": "998310"
  },
  {
    "text": "mind whenever you see sent or receive this is the server side and I just want to bring you two examples to see how we",
    "start": "998310",
    "end": "1005630"
  },
  {
    "text": "can read those logs so in the first example we see that the server is sending a settings settings frame over",
    "start": "1005630",
    "end": "1011510"
  },
  {
    "text": "stream ID 0 and within that frame there is a single setting which is the maximum",
    "start": "1011510",
    "end": "1017600"
  },
  {
    "text": "current streams that the server is willing to handle in this connection as the general settings frame a give each",
    "start": "1017600",
    "end": "1025040"
  },
  {
    "text": "view of the connection can express some of its characteristics and limitations and the other side of the connection",
    "start": "1025040",
    "end": "1031250"
  },
  {
    "text": "must respect them next the server receives the settings frame from the",
    "start": "1031250",
    "end": "1036500"
  },
  {
    "text": "client which has three different settings the maximum side of the header size what is the initial window size and",
    "start": "1036500",
    "end": "1043520"
  },
  {
    "text": "the maximum frame side that the client is willing to digest this is a typical",
    "start": "1043520",
    "end": "1051500"
  },
  {
    "text": "conversation in this case it's a get request that didn't include the headers because of a slight real-estate but we",
    "start": "1051500",
    "end": "1058400"
  },
  {
    "text": "have a hydros frame sent over stream ID 15 can see that on the right corner this is essentially a catch request with no body",
    "start": "1058400",
    "end": "1065410"
  },
  {
    "text": "payload next to client sends a Windows Update frame which would increase the",
    "start": "1065410",
    "end": "1071410"
  },
  {
    "text": "window size for this particular stream this is sent over stream ID 15 you can see it up there on the corner and there",
    "start": "1071410",
    "end": "1078910"
  },
  {
    "text": "December the server would response in a server in a response probably I think",
    "start": "1078910",
    "end": "1083980"
  },
  {
    "text": "this was a 404 with no content over the same stream ID so this should give you a",
    "start": "1083980",
    "end": "1090730"
  },
  {
    "text": "roughly a good idea of how does an h2 conversation look like first the",
    "start": "1090730",
    "end": "1096490"
  },
  {
    "text": "connection is established and there are some negotiations now as I've said the RFC does allow communication over to",
    "start": "1096490",
    "end": "1104650"
  },
  {
    "text": "your text but I won't go into that because it's not really prevalent if the communication is done over TLS than the",
    "start": "1104650",
    "end": "1111309"
  },
  {
    "text": "first stage in the TLS when the client sends the first message of the handshake that the client allow there is a TLS",
    "start": "1111309",
    "end": "1118480"
  },
  {
    "text": "extension called a LPN the application level protocol negotiation in which the",
    "start": "1118480",
    "end": "1124809"
  },
  {
    "text": "client states that he is willing to communicate either in h2 or an HTTP 1.1 if the server supports h2 that protocol",
    "start": "1124809",
    "end": "1133059"
  },
  {
    "text": "is negotiated and from that part on the client and the server continue to to",
    "start": "1133059",
    "end": "1139870"
  },
  {
    "text": "conversate the conversation in the h2 protocol next there is a settings",
    "start": "1139870",
    "end": "1145540"
  },
  {
    "text": "exchange now the RFC mandates both side of the connection to send a settings frame as",
    "start": "1145540",
    "end": "1152260"
  },
  {
    "text": "the first frame in every HTTP 2 connection this is mandatory it could be",
    "start": "1152260",
    "end": "1157809"
  },
  {
    "text": "an empty settings frame but the first frame growing on a new connection has to be a settings frame and as I've",
    "start": "1157809",
    "end": "1164559"
  },
  {
    "text": "mentioned settings frame I don't deal with specific stream they deal with characteristics of the entire connection",
    "start": "1164559",
    "end": "1170110"
  },
  {
    "text": "and therefore they are always allocated with stream ID 0 so connection was",
    "start": "1170110",
    "end": "1176110"
  },
  {
    "text": "established we've we've exchanged some settings frame now we can do the request",
    "start": "1176110",
    "end": "1181809"
  },
  {
    "text": "this is a full snippet of a request as you can see this is a get request which",
    "start": "1181809",
    "end": "1187720"
  },
  {
    "text": "is sent in a headers frame over stream ID 1 and the server can now",
    "start": "1187720",
    "end": "1194250"
  },
  {
    "text": "with its own server response in this case the response has both the headers frame and data frame for the actual body",
    "start": "1194250",
    "end": "1202169"
  },
  {
    "text": "payload of the message so hopefully by now you have a fairly good understanding",
    "start": "1202169",
    "end": "1207750"
  },
  {
    "text": "and I'll do just a quick recap these are the key differences between the two versions of the protocol first protocol",
    "start": "1207750",
    "end": "1215070"
  },
  {
    "text": "I'm sorry I don't know why you can see the car so well it should be orange but",
    "start": "1215070",
    "end": "1220289"
  },
  {
    "text": "I'll try to read that out to you the first version of the protocol is a",
    "start": "1220289",
    "end": "1225480"
  },
  {
    "text": "text-based protocol where a second version is a binary protocol both of the",
    "start": "1225480",
    "end": "1230700"
  },
  {
    "text": "work of both of the protocols either version 2 version 1 could be transmitted over clear text TCP or over an encrypted",
    "start": "1230700",
    "end": "1236850"
  },
  {
    "text": "Channel as for concurrency first versions of the protocol use multiple",
    "start": "1236850",
    "end": "1242159"
  },
  {
    "text": "TCP connections and request pipelining that would it introduced in HTTP 1.1 whereas HTTP 2 uses a single TCP",
    "start": "1242159",
    "end": "1250110"
  },
  {
    "text": "connection and does request multiplexing and last but not least you have two new",
    "start": "1250110",
    "end": "1255390"
  },
  {
    "text": "mechanisms that were introduced to the protocol the H pack header compression and the server push concept and that's a",
    "start": "1255390",
    "end": "1263850"
  },
  {
    "text": "neat image I saw from the ng Ingenix documentation where you have the first",
    "start": "1263850",
    "end": "1270960"
  },
  {
    "text": "request in HTTP 1 and the binary representation of HTTP 2 requests so now",
    "start": "1270960",
    "end": "1279510"
  },
  {
    "text": "that you have a fairly good understanding of H 2 let's talk about passive client fingerprinting now as the",
    "start": "1279510",
    "end": "1286679"
  },
  {
    "text": "name suggests this is a passive form of fingerprinting we do not inject anything to the client we do not execute or run",
    "start": "1286679",
    "end": "1293610"
  },
  {
    "text": "anything on the client side all we do is simply observe the behavior of the client and from that we are trying to",
    "start": "1293610",
    "end": "1300990"
  },
  {
    "text": "expose some consistent unique behavior that would differentiate this client from other clients",
    "start": "1300990",
    "end": "1307789"
  },
  {
    "text": "where would we look to see such behaviour well we can do that in any of the layers of the communication so we",
    "start": "1307789",
    "end": "1314370"
  },
  {
    "text": "can do that on the transport layer looking at the TCP characteristics we can do that in the session we're looking",
    "start": "1314370",
    "end": "1321059"
  },
  {
    "text": "at the TLS implementation or like we do in the h2 can look at the application layer actually derive this behavior from their",
    "start": "1321059",
    "end": "1329880"
  },
  {
    "text": "who are we trying to fingerprint I just want to make sure we are not trying to fingerprint end-users and either if we",
    "start": "1329880",
    "end": "1336910"
  },
  {
    "text": "want if even if we were trying to fingerprint end-users we we cannot do that using passive transfigure pin all",
    "start": "1336910",
    "end": "1343180"
  },
  {
    "text": "we do is look at the software the way a certain client is implementing a certain protocol and by that we can infer",
    "start": "1343180",
    "end": "1350770"
  },
  {
    "text": "something on that client why do we do that well we want you to do something maybe",
    "start": "1350770",
    "end": "1356050"
  },
  {
    "text": "about the uptime of the client the running OS maybe about the running version of these particular clients and",
    "start": "1356050",
    "end": "1362770"
  },
  {
    "text": "all of these information would allow us to depreciate this client form other clients now specifically for actually P",
    "start": "1362770",
    "end": "1371560"
  },
  {
    "text": "2 we are going to observe the way clients behave when they are established in connection and it seems that there",
    "start": "1371560",
    "end": "1378490"
  },
  {
    "text": "are a lot of consistent behaviors when you do that on HTTP 2 we are going to look into the way that the initial",
    "start": "1378490",
    "end": "1384610"
  },
  {
    "text": "connection settings are being sent and the actual parameters we are going to look at the way that clients handled",
    "start": "1384610",
    "end": "1390670"
  },
  {
    "text": "flow controls and priority and last but not least we are going to look at at pseudo headers I've mentioned before now",
    "start": "1390670",
    "end": "1399130"
  },
  {
    "text": "you should if you remember this slide these are the ten types of frames which are defined in the RFC and for the",
    "start": "1399130",
    "end": "1405280"
  },
  {
    "text": "fingerprinting we are only going to use four of them the settings frame the Windows Update frame priority and the",
    "start": "1405280",
    "end": "1411700"
  },
  {
    "text": "pseudo headers so let's deep dive into them first one is the settings frame",
    "start": "1411700",
    "end": "1417420"
  },
  {
    "text": "well as I've mentioned the settings friend should convey configuration parameters from the entire connection",
    "start": "1417420",
    "end": "1424750"
  },
  {
    "text": "and they must always be sent by both endpoints of the connection at the start of any connection now we would actually",
    "start": "1424750",
    "end": "1432100"
  },
  {
    "text": "look at the default parameters and harvest them for our fingerprint in",
    "start": "1432100",
    "end": "1437530"
  },
  {
    "text": "general the RFC defines six type of parameters that can be used and each of",
    "start": "1437530",
    "end": "1443920"
  },
  {
    "text": "them is assigned with a unique ID and some of them deal with server push the",
    "start": "1443920",
    "end": "1449980"
  },
  {
    "text": "frame size the headers table and we would look at the ones which are being",
    "start": "1449980",
    "end": "1455350"
  },
  {
    "text": "sent this is an example for Firefox 55 which sends upon any new connection",
    "start": "1455350",
    "end": "1460440"
  },
  {
    "text": "these exact settings it would say exactly three parameter settings each of",
    "start": "1460440",
    "end": "1465810"
  },
  {
    "text": "them with those exact parameters so we just look at that and we harvest that into our fingerprint Safari for example",
    "start": "1465810",
    "end": "1474780"
  },
  {
    "text": "we'd send different set of parameters and for each parameters it would have a different type of values and I've added",
    "start": "1474780",
    "end": "1481110"
  },
  {
    "text": "some examples for edge and for chrome and taking all these settings and",
    "start": "1481110",
    "end": "1486990"
  },
  {
    "text": "putting them in one table was the first step towards the fingerprint you can start I'm sorry don't see that very well",
    "start": "1486990",
    "end": "1493080"
  },
  {
    "text": "but you can see all of the one or all of those six parameters here and you can see that for different clients like for",
    "start": "1493080",
    "end": "1499380"
  },
  {
    "text": "Firefox 52 on Android 6 sends different parameters then Android you know my",
    "start": "1499380",
    "end": "1505910"
  },
  {
    "text": "Chrome on my Android pixel Excel so we started plotting out this table and next",
    "start": "1505910",
    "end": "1513720"
  },
  {
    "text": "we moved on in to forging a fingerprint so for the settings part we take the",
    "start": "1513720",
    "end": "1519330"
  },
  {
    "text": "parameter ID and the value and we start to concatenate them this is for an edge",
    "start": "1519330",
    "end": "1527240"
  },
  {
    "text": "the same example can be made for Firefox we take those three parameters and parameters ID and we start to",
    "start": "1527240",
    "end": "1533790"
  },
  {
    "text": "concatenate them but that wasn't enough that did not give us enough entropy to",
    "start": "1533790",
    "end": "1539190"
  },
  {
    "text": "differentiate and distinguish between a large number of clients so we moved on",
    "start": "1539190",
    "end": "1545370"
  },
  {
    "text": "to the Windows Update now apparently some of the clients and a lot of them when establishing a new connection does",
    "start": "1545370",
    "end": "1552810"
  },
  {
    "text": "not only stand a Settings frame they also say a Windows Update frame and the value which is included within that",
    "start": "1552810",
    "end": "1560370"
  },
  {
    "text": "frame is quite consistent now as I've mentioned the windows update frame deals",
    "start": "1560370",
    "end": "1565740"
  },
  {
    "text": "with flow control there is an initial Windows which is could be set implicitly or explicitly there is a default size",
    "start": "1565740",
    "end": "1573750"
  },
  {
    "text": "mentioned in the RFC and clients can use a settings frame to set the initial window size so we take the value from",
    "start": "1573750",
    "end": "1582990"
  },
  {
    "text": "the windows update frame and we add it to our fingerprint now if there was no",
    "start": "1582990",
    "end": "1588590"
  },
  {
    "text": "value sent we would just put 0 so the first part of the fingerprint would be composed of the settings frame",
    "start": "1588590",
    "end": "1595230"
  },
  {
    "text": "the second part would be composed of the value of the windows increment size in the Windows Update frame and if there",
    "start": "1595230",
    "end": "1601980"
  },
  {
    "text": "was no value or no frame sent we would add 0 to it still not enough entropy so",
    "start": "1601980",
    "end": "1610410"
  },
  {
    "text": "we look further and we cut the research and we found that we can use the priority frame mechanism and this is",
    "start": "1610410",
    "end": "1617160"
  },
  {
    "text": "actually quite an interesting mechanism in the protocol now http/2 allows to set",
    "start": "1617160",
    "end": "1623910"
  },
  {
    "text": "a dependency tree between frames I'm sorry you cannot see everything here well if you look at the left side from",
    "start": "1623910",
    "end": "1635520"
  },
  {
    "text": "your perspective of the frame you see five stream stream Dec a and B where",
    "start": "1635520",
    "end": "1641960"
  },
  {
    "text": "stream a and C are dependent on stream D and stream a and B are dependent on",
    "start": "1641960",
    "end": "1648150"
  },
  {
    "text": "stream on stream C now each parent",
    "start": "1648150",
    "end": "1654600"
  },
  {
    "text": "stream the stream on which others depend on is called a parent stream and the",
    "start": "1654600",
    "end": "1660750"
  },
  {
    "text": "streams below it are called dependent stream so what does that mean the RFC",
    "start": "1660750",
    "end": "1666330"
  },
  {
    "text": "allows the client to express its preferences of how the server should",
    "start": "1666330",
    "end": "1671790"
  },
  {
    "text": "allocate resources in case it doesn't have enough resource to send all the data now this is just a suggestion the",
    "start": "1671790",
    "end": "1680280"
  },
  {
    "text": "server does not have to comply to the client preferences but never the same the client can express those preferences",
    "start": "1680280",
    "end": "1686010"
  },
  {
    "text": "and each of these streams have weights below them for example in this example",
    "start": "1686010",
    "end": "1692160"
  },
  {
    "text": "the client is telling the server listen if you have some kind of a resource limitations please use your resources",
    "start": "1692160",
    "end": "1698580"
  },
  {
    "text": "first on stream D once you are done with D use your resources for stream E and C",
    "start": "1698580",
    "end": "1704880"
  },
  {
    "text": "and each of them has the weight of 8 that means that the resources between them should be speed 50 percent and 50",
    "start": "1704880",
    "end": "1711360"
  },
  {
    "text": "percent once you are done with stream C please allocate your resources to stream",
    "start": "1711360",
    "end": "1716760"
  },
  {
    "text": "a and B and if the weights are 12 and 4 we can surmise that the resources should",
    "start": "1716760",
    "end": "1722400"
  },
  {
    "text": "be distributed as 70 75% of the research should go to stream a and 4% and 25% should go to stream B",
    "start": "1722400",
    "end": "1731830"
  },
  {
    "text": "so we found out that some of the some of the clients actually does not only send",
    "start": "1731830",
    "end": "1738590"
  },
  {
    "text": "a settings frame and the windows update frame but immediately after that they start sending priority frames and this",
    "start": "1738590",
    "end": "1745940"
  },
  {
    "text": "is a live example for Firefox Firefox would send a settings frame we would set an windows update frame and right after",
    "start": "1745940",
    "end": "1753590"
  },
  {
    "text": "that five or six priority frames and can anyone think why would Firefox do that",
    "start": "1753590",
    "end": "1759440"
  },
  {
    "text": "why would he create this dependency tree well essentially there are three lines",
    "start": "1759440",
    "end": "1765350"
  },
  {
    "text": "he has the high priority frame over there and stream number three he has the normal priority stream numbers five and",
    "start": "1765350",
    "end": "1771260"
  },
  {
    "text": "low priority stream number seven so we collect all of the data which is sent in",
    "start": "1771260",
    "end": "1777169"
  },
  {
    "text": "the priority strand the dependent the dependent tree the weights and another exclusivity bit and we've actually",
    "start": "1777169",
    "end": "1785150"
  },
  {
    "text": "looked into that this is a snippet from the from the comments in the source code",
    "start": "1785150",
    "end": "1790760"
  },
  {
    "text": "of five Firefox and this is actually hard-coded the behavior which are depicted up until now the set of the",
    "start": "1790760",
    "end": "1797090"
  },
  {
    "text": "sending of settings frame next standing of a Windows Update frame and the standing of the priority frames and the",
    "start": "1797090",
    "end": "1802820"
  },
  {
    "text": "values would be hard-coded so those are consistent and would differentiate Firefox from other browsers that don't",
    "start": "1802820",
    "end": "1809059"
  },
  {
    "text": "behave in that manner so now we have a small recap this is all of the three",
    "start": "1809059",
    "end": "1818570"
  },
  {
    "text": "elements we've picked up apple till now and you can start seeing that we can now differentiate between a Chrome browser",
    "start": "1818570",
    "end": "1825470"
  },
  {
    "text": "on Mac OS 6 between a request sent by ok HTTP library in a Java library or the",
    "start": "1825470",
    "end": "1831919"
  },
  {
    "text": "curl library a curl client or the ng HTTP 2 client each of them has different",
    "start": "1831919",
    "end": "1836990"
  },
  {
    "text": "signature and this is awesome well we",
    "start": "1836990",
    "end": "1842090"
  },
  {
    "text": "are almost there one last element this was did not this was really nice but he did not generate",
    "start": "1842090",
    "end": "1847640"
  },
  {
    "text": "enough entropy we needed another component that would help us further",
    "start": "1847640",
    "end": "1852650"
  },
  {
    "text": "this distinguish between clients because there were there were a lot of clients that that step that stage that still had",
    "start": "1852650",
    "end": "1859920"
  },
  {
    "text": "similar characteristics so we've introduced the pseudo headers now what",
    "start": "1859920",
    "end": "1865200"
  },
  {
    "text": "are the pseudo headers the pseudo the RFC defines a closed set of pseudo headers one for the response and four",
    "start": "1865200",
    "end": "1872430"
  },
  {
    "text": "for each request now if you think about it in terms of HTTP 1.1 some of the",
    "start": "1872430",
    "end": "1879810"
  },
  {
    "text": "headers the data in the headers is the data that was included in the request line you can see the method to get the",
    "start": "1879810",
    "end": "1888210"
  },
  {
    "text": "path the resource which is requested the authority used to be sent in the prior",
    "start": "1888210",
    "end": "1893880"
  },
  {
    "text": "versions of the protocol in the host header and there was we added the scheme those are the four pseudo header does a",
    "start": "1893880",
    "end": "1901260"
  },
  {
    "text": "closed list no one can add to it if someone would actually try to add to these headers the protocol would mandate",
    "start": "1901260",
    "end": "1908250"
  },
  {
    "text": "that it would be considered as the protocol error and the connection would be broken so what was interesting about",
    "start": "1908250",
    "end": "1916620"
  },
  {
    "text": "these headers and of course from the client perspective we only we're only interested in the request pseudo headers",
    "start": "1916620",
    "end": "1921810"
  },
  {
    "text": "is that if you look at different clients each of them send those hairs in a",
    "start": "1921810",
    "end": "1927990"
  },
  {
    "text": "different order like one would send method authorities scheme and path whereas Safari would do method scheme",
    "start": "1927990",
    "end": "1936210"
  },
  {
    "text": "path and ass or an authority so if you look at that you can once again use that",
    "start": "1936210",
    "end": "1941520"
  },
  {
    "text": "and differentiate I don't know the gorge TDP client from the JDL HTTP client",
    "start": "1941520",
    "end": "1948049"
  },
  {
    "text": "looking into a chrome source code actually validates the assumption that",
    "start": "1949100",
    "end": "1954240"
  },
  {
    "text": "this is consistent the the structure in which the headers the pseudo headers are",
    "start": "1954240",
    "end": "1959610"
  },
  {
    "text": "sent is a constant and it would not change for Chrome so now we get to the",
    "start": "1959610",
    "end": "1965700"
  },
  {
    "text": "final fingerprint we've reviewed all of the elements the first element would be collecting the settings parameters the",
    "start": "1965700",
    "end": "1972090"
  },
  {
    "text": "IDS and the parameter values next we would collect the windows update third",
    "start": "1972090",
    "end": "1978210"
  },
  {
    "text": "we would look at the priority frame and if there is no windows update or priority we would actually",
    "start": "1978210",
    "end": "1985750"
  },
  {
    "text": "zero there and the fourth element is encoding those four pseudo headers and",
    "start": "1985750",
    "end": "1990850"
  },
  {
    "text": "looking at the order in which they appear now the fourth element is a bit different from the previous one because",
    "start": "1990850",
    "end": "1997270"
  },
  {
    "text": "we actually have to wait for the first response I'm sorry for the first request to collect the pseudo headers but",
    "start": "1997270",
    "end": "2003780"
  },
  {
    "text": "initially every connection is usually being created in order to send requests",
    "start": "2003780",
    "end": "2010260"
  },
  {
    "text": "so this is the only difference the key difference between the fourth element and the other three so what are the use",
    "start": "2010260",
    "end": "2019320"
  },
  {
    "text": "cases can any of you think about nice use cases for these fingerprints I know",
    "start": "2019320",
    "end": "2027840"
  },
  {
    "text": "3:30 it's hard well there are several use cases for this first of all it's",
    "start": "2027840",
    "end": "2033780"
  },
  {
    "text": "positive security if someone if if a request is coming from a browser which",
    "start": "2033780",
    "end": "2039690"
  },
  {
    "text": "asserts to be a certain version of Chrome associated with a certain operating system you can validate that you can",
    "start": "2039690",
    "end": "2046410"
  },
  {
    "text": "look at the fingerprint and see if it matches the print the fingerprint that we have recorded for this particular",
    "start": "2046410",
    "end": "2051898"
  },
  {
    "text": "version and for this particular operating system that would allow us to intact to detect browser impersonator we",
    "start": "2051899",
    "end": "2058440"
  },
  {
    "text": "can detect search engine impersonators we can detect all sorts of other tools",
    "start": "2058440",
    "end": "2063990"
  },
  {
    "text": "and the last thing we can do is that if we see an IP address from which a very",
    "start": "2063990",
    "end": "2071730"
  },
  {
    "text": "large amount of distinct finger prints are originating from and these",
    "start": "2071730",
    "end": "2077040"
  },
  {
    "text": "fingerprints are attributed to different operating systems and different versions and we can try and use that data to",
    "start": "2077040",
    "end": "2084388"
  },
  {
    "text": "surmise that this is some kind of a shared IP it could be a corporate gateway and if the amounts are really",
    "start": "2084389",
    "end": "2090210"
  },
  {
    "text": "big it could be an anonymous proxy or a VPN so for any of you who is interested",
    "start": "2090210",
    "end": "2095580"
  },
  {
    "text": "in those capabilities it can be used for detection of such IPS as well now the",
    "start": "2095580",
    "end": "2101310"
  },
  {
    "text": "last comment I included is very important for everyone was doing fingerprinting it is always to get",
    "start": "2101310",
    "end": "2107010"
  },
  {
    "text": "optimal results it is always best to combine fingerprinting from different",
    "start": "2107010",
    "end": "2112590"
  },
  {
    "text": "players if you can fingerprint everything look at the at the",
    "start": "2112590",
    "end": "2118320"
  },
  {
    "text": "at the session there and look at the application there look at the transport layer combine the TCP with the HTTP",
    "start": "2118320",
    "end": "2125040"
  },
  {
    "text": "version and if you're doing some active client fingerprinting I don't know you're doing some JavaScript",
    "start": "2125040",
    "end": "2130290"
  },
  {
    "text": "fingerprinting combine that as well so you get the whole picture for each client and you'll be you have a lot more",
    "start": "2130290",
    "end": "2136230"
  },
  {
    "text": "to go by in differentiating those clients well I thought that every",
    "start": "2136230",
    "end": "2145770"
  },
  {
    "text": "lecture about h2 in blackhat should at least address the threat landscape for",
    "start": "2145770",
    "end": "2150900"
  },
  {
    "text": "h2 and as I've said in Akamai we see huge amounts of traffic's and a lot of",
    "start": "2150900",
    "end": "2157050"
  },
  {
    "text": "this traffic is attack traffic and we can differentiate and plot a visualization of what would the threat",
    "start": "2157050",
    "end": "2163170"
  },
  {
    "text": "landscape for h2 look like and before making this presentation and the",
    "start": "2163170",
    "end": "2168180"
  },
  {
    "text": "research I've gone and and queried our system and our logs to see how does the",
    "start": "2168180",
    "end": "2173940"
  },
  {
    "text": "threat landscape for h2 looks and it looks like and there you have it it's a",
    "start": "2173940",
    "end": "2181710"
  },
  {
    "text": "complete desert actually there's not a lot of attacks over h2 especially if you",
    "start": "2181710",
    "end": "2189720"
  },
  {
    "text": "if you compare that to HTTP 1 and and that got me thinking why is that why is",
    "start": "2189720",
    "end": "2196620"
  },
  {
    "text": "that the case why why should that be the case I mean it's a faster protocol to new protocol which has been around for",
    "start": "2196620",
    "end": "2202530"
  },
  {
    "text": "almost two years now why don't we see attacks for the h2 protocol well there",
    "start": "2202530",
    "end": "2209010"
  },
  {
    "text": "are several reasons first of all most",
    "start": "2209010",
    "end": "2214440"
  },
  {
    "text": "security tools the tools of the trade that most of you know still does not support h2 you have some decent names up",
    "start": "2214440",
    "end": "2222240"
  },
  {
    "text": "there I don't know if you can see it burp Fidler tone doesn't support h2 that",
    "start": "2222240",
    "end": "2230310"
  },
  {
    "text": "or wasp zap scanners like a kinetic scanners net sparker apps can don't",
    "start": "2230310",
    "end": "2238530"
  },
  {
    "text": "support H to attack tools you have up there which are usually used for a penetration testing and for other",
    "start": "2238530",
    "end": "2244980"
  },
  {
    "text": "purposes still do not support h2 your SQL map Hydra century NBA for credential abuse",
    "start": "2244980",
    "end": "2252050"
  },
  {
    "text": "all of these does not support h2 why is that so first of all there's not enough",
    "start": "2252050",
    "end": "2259700"
  },
  {
    "text": "incentive for attackers to do that most of the servers if not all of the servers",
    "start": "2259700",
    "end": "2265940"
  },
  {
    "text": "that I've encountered don't support solely h2 they have a fallback to h1 to",
    "start": "2265940",
    "end": "2271040"
  },
  {
    "text": "be compatible with most browsers in the internet and if you take in the fact that most HTTP libraries are not so",
    "start": "2271040",
    "end": "2278480"
  },
  {
    "text": "Commons I mean all of the large programming languages do have them but they are not so mature and so easy to",
    "start": "2278480",
    "end": "2284900"
  },
  {
    "text": "use as the ones you have in the HTTP one wall so essentially taking the cost of",
    "start": "2284900",
    "end": "2290630"
  },
  {
    "text": "taking your existing code and porting it to to work with this new binary protocol just exceeds the game if at the end of",
    "start": "2290630",
    "end": "2297920"
  },
  {
    "text": "the day all you want to do is take your payload and make sure that the application gets it you can use HTTP 1",
    "start": "2297920",
    "end": "2303740"
  },
  {
    "text": "for that the messaging layer is not really important and though you can gain some performance the cost of porting the",
    "start": "2303740",
    "end": "2310100"
  },
  {
    "text": "code would be quite big I would like to mention that in 2016 there were some",
    "start": "2310100",
    "end": "2315830"
  },
  {
    "text": "server implementation flaws that were found by researchers I think for my Imperva those are not flaws in the",
    "start": "2315830",
    "end": "2322490"
  },
  {
    "text": "protocol no flaws has been found for the h2 protocol those are flaws that were found in the way that certain servers",
    "start": "2322490",
    "end": "2329320"
  },
  {
    "text": "implement the protocol and more specifically the way they handle stream management and the header compressions",
    "start": "2329320",
    "end": "2337569"
  },
  {
    "text": "so what are my key takeaways from you guys I hope that by now you have a",
    "start": "2339520",
    "end": "2345380"
  },
  {
    "text": "fairly good understanding of how HTTP 2 works and more specifically of its key",
    "start": "2345380",
    "end": "2352460"
  },
  {
    "text": "elements that we've covered and the key differences between prior versions of the protocol I hope that by now you",
    "start": "2352460",
    "end": "2359060"
  },
  {
    "text": "should have a good understanding of what passive client fingerprinting is and more specifically of the fingerprint we",
    "start": "2359060",
    "end": "2364220"
  },
  {
    "text": "proposed for h2 and last but not least you are now well aware of the lack of",
    "start": "2364220",
    "end": "2370880"
  },
  {
    "text": "threat landscape current landscape in HTTP two questions please",
    "start": "2370880",
    "end": "2379960"
  },
  {
    "text": "yep oh there's a mic okay she'll get you",
    "start": "2383840",
    "end": "2390840"
  },
  {
    "text": "yeah can you there we go so you mentioned that clients can opt out if the sort of",
    "start": "2390840",
    "end": "2399300"
  },
  {
    "text": "proactive push from server do you have any idea of what percentage of them",
    "start": "2399300",
    "end": "2406290"
  },
  {
    "text": "bother to do that I don't have that statistics ready-made I don't throw you",
    "start": "2406290",
    "end": "2416670"
  },
  {
    "text": "a wrong number I don't wanna throw you know okay there are quite a few that does take care that does take advantage of that",
    "start": "2416670",
    "end": "2422340"
  },
  {
    "text": "and allow don't if you've seen if you remember the slide I think about Safari",
    "start": "2422340",
    "end": "2428400"
  },
  {
    "text": "Safari is opting out of it at every initial communication and that's a large",
    "start": "2428400",
    "end": "2433770"
  },
  {
    "text": "portion of you know usage that won't a lot of users from these browsers won't",
    "start": "2433770",
    "end": "2439320"
  },
  {
    "text": "be able to enjoy that currently okay and presumably there's a performance impact",
    "start": "2439320",
    "end": "2444950"
  },
  {
    "text": "associated with with opting else is there because you said the h2 is about four times faster normally and I'm",
    "start": "2444950",
    "end": "2451830"
  },
  {
    "text": "guessing the server's can't sort of push stuff they expect you to need that's going to drop off pretty significantly",
    "start": "2451830",
    "end": "2458160"
  },
  {
    "text": "yeah the whole point of doing a server pushes to improve your performance so human performance drop in terms of the",
    "start": "2458160",
    "end": "2465480"
  },
  {
    "text": "server performance yeah oh yes if I were browsing and I opted out of server push",
    "start": "2465480",
    "end": "2474050"
  },
  {
    "text": "is there still going to be a performance gain at the end of the day from using HTTP tools or does it become sort of",
    "start": "2474050",
    "end": "2479400"
  },
  {
    "text": "pointless at that point absolutely just a mere fact that you're using now single TCP connection and there are like",
    "start": "2479400",
    "end": "2486180"
  },
  {
    "text": "headers is being compressed and send you know you know you don't have a connection which is waiting for a",
    "start": "2486180",
    "end": "2491610"
  },
  {
    "text": "response to send another request everything is multiplexed and compressed even without the server push you will",
    "start": "2491610",
    "end": "2497430"
  },
  {
    "text": "have a significant performance improvements okay thanks",
    "start": "2497430",
    "end": "2504800"
  },
  {
    "text": "thanks for the talk thank you so they're working yeah I have",
    "start": "2513530",
    "end": "2518849"
  },
  {
    "text": "a question regarding basic understanding of HP Zhu and server push yes which is",
    "start": "2518849",
    "end": "2524390"
  },
  {
    "text": "if the server wants to take advantage of the server push and pushing for example",
    "start": "2524390",
    "end": "2529500"
  },
  {
    "text": "CSS and JavaScript contents to the client doesn't the server have to parse the HTML document in order to do that",
    "start": "2529500",
    "end": "2536450"
  },
  {
    "text": "well is this yes absolutely yes and this is up to the server to know",
    "start": "2536450",
    "end": "2544770"
  },
  {
    "text": "which resources to push and it depends on the server implementation but the",
    "start": "2544770",
    "end": "2551280"
  },
  {
    "text": "answer is yes so parsing is needed for that yeah it would have to be done beforehand",
    "start": "2551280",
    "end": "2557730"
  },
  {
    "text": "so the server would know what to push and not just push everything okay it's a",
    "start": "2557730",
    "end": "2562770"
  },
  {
    "text": "mechanism which is enabled so the RFC does not exactly you know tell you how to implement that part it just gives you",
    "start": "2562770",
    "end": "2570030"
  },
  {
    "text": "the actual functionality within a protocol and it's up to you the server implemented to decide how you do that do",
    "start": "2570030",
    "end": "2584039"
  },
  {
    "text": "you think that h2 features can be used to fingerprint also servers what server",
    "start": "2584039",
    "end": "2590400"
  },
  {
    "text": "or this is an interesting question we are not in the business of",
    "start": "2590400",
    "end": "2595980"
  },
  {
    "text": "fingerprinting servers but absolutely absolutely because for example if you",
    "start": "2595980",
    "end": "2602520"
  },
  {
    "text": "know that some servers don't never take an adventure advantage of the server",
    "start": "2602520",
    "end": "2608460"
  },
  {
    "text": "push you can look that you can look at the way that the server actually the settings that is sent because both sides",
    "start": "2608460",
    "end": "2613680"
  },
  {
    "text": "of the connections should exchange setting streams so we can fingerprint the server back as well you can look at",
    "start": "2613680",
    "end": "2619770"
  },
  {
    "text": "the default values you can you get the way that the server is managing streams you have some statistics maybe some",
    "start": "2619770",
    "end": "2627359"
  },
  {
    "text": "number about how many servers does implement 82 I told you from what we see",
    "start": "2627359",
    "end": "2632849"
  },
  {
    "text": "we've seen I don't know in terms of servers but we've seen more than",
    "start": "2632849",
    "end": "2638460"
  },
  {
    "text": "I don't know it's the the number was 15,000 700 different hosts which support",
    "start": "2638460",
    "end": "2643680"
  },
  {
    "text": "h2 I don't know how to translate that into actual how much server versions implementation eyes but there's a lot of",
    "start": "2643680",
    "end": "2649020"
  },
  {
    "text": "adoption it's not a negligent number okay thank you very much",
    "start": "2649020",
    "end": "2654890"
  },
  {
    "text": "what someone back there oh you mentioned",
    "start": "2655609",
    "end": "2662880"
  },
  {
    "text": "earlier on in you talked about trying to discover client uptime was that something you managed to get out of the",
    "start": "2662880",
    "end": "2668520"
  },
  {
    "text": "fingerprinting no this is a feature that you can get from TCP fingerprinting and certain operating systems you can deduce",
    "start": "2668520",
    "end": "2675630"
  },
  {
    "text": "things about the uptime of of a certain client not in the HTTP jeweler hi hi are",
    "start": "2675630",
    "end": "2690359"
  },
  {
    "text": "you fingerprinting the the traffic just for the purpose of this talk or do you",
    "start": "2690359",
    "end": "2696390"
  },
  {
    "text": "routinely fingerprint everything that goes through Akamai is Network well this",
    "start": "2696390",
    "end": "2702780"
  },
  {
    "text": "could be like something which is part of certain products like if a customer would want some of our cars are given a",
    "start": "2702780",
    "end": "2711240"
  },
  {
    "text": "concrete example if a customer's wants to leverage a product which is dealing with the mitigation of poor traffic one",
    "start": "2711240",
    "end": "2718290"
  },
  {
    "text": "of the way to identify BOTS from humans without you know doing a collection of",
    "start": "2718290",
    "end": "2723619"
  },
  {
    "text": "biometric attributes or things like that which we currently don't do is actually look at the protocol fingerprinting as",
    "start": "2723619",
    "end": "2730710"
  },
  {
    "text": "I've said this is absolutely passive we do not prod into the client we only",
    "start": "2730710",
    "end": "2736020"
  },
  {
    "text": "observe the way that the client behaves and it does not correlate to any end",
    "start": "2736020",
    "end": "2741059"
  },
  {
    "text": "users because all it says is how this particular piece of software is implementing this particular protocol",
    "start": "2741059",
    "end": "2747630"
  },
  {
    "text": "that's it and keep in mind that",
    "start": "2747630",
    "end": "2753589"
  },
  {
    "text": "sophisticated attackers could fool you I mean if you are writing your own client",
    "start": "2753589",
    "end": "2760430"
  },
  {
    "text": "for HTTP 2 you can you know you can decide to randomize the values for the",
    "start": "2760430",
    "end": "2770190"
  },
  {
    "text": "windows increment you can you can do all sorts of stuff but at the end of the day when you are dealing with",
    "start": "2770190",
    "end": "2775520"
  },
  {
    "text": "a big platform and the big numbers that we see at Akamai you would stand out even more because all of the Chrome's if",
    "start": "2775520",
    "end": "2782809"
  },
  {
    "text": "you try to you know to pass as a legit browsers for a certain version of Firefox for a first pass certain",
    "start": "2782809",
    "end": "2789319"
  },
  {
    "text": "operating systems the big numbers of this particular software you would stand",
    "start": "2789319",
    "end": "2794690"
  },
  {
    "text": "out trying to randomize all kinds of other parameters because you would be the only one doing that yeah I'm sorry I",
    "start": "2794690",
    "end": "2808460"
  },
  {
    "text": "didn't answer just one bit of a question there is some performance hit in terms of running fingerprinting and some cost",
    "start": "2808460",
    "end": "2815000"
  },
  {
    "text": "associated to it so we don't do it for all of the traffic going over Akamai's",
    "start": "2815000",
    "end": "2820089"
  },
  {
    "text": "permutations hi hi what do you think about the quake protocol used recently",
    "start": "2820089",
    "end": "2827030"
  },
  {
    "text": "by Google how this all week quick probably okay yeah well quick is",
    "start": "2827030",
    "end": "2833540"
  },
  {
    "text": "first of all the protocol based on UDP and it's exciting new protocol it's not",
    "start": "2833540",
    "end": "2840799"
  },
  {
    "text": "so new but I think it's a great protocol because in the in today's Internet",
    "start": "2840799",
    "end": "2847329"
  },
  {
    "text": "reliability is not such an issue and it's very fast UDP is very fast it's",
    "start": "2847329",
    "end": "2852500"
  },
  {
    "text": "implemented is its own set of cryptography which is very interesting it's an interesting way I think it's a",
    "start": "2852500",
    "end": "2860599"
  },
  {
    "text": "very interesting subject for exploration",
    "start": "2860599",
    "end": "2864040"
  },
  {
    "text": "if the question was in terms of fingerprinting yeah you know it's",
    "start": "2867579",
    "end": "2872990"
  },
  {
    "text": "absolutely a target for free search it was more mean like do you see quake as",
    "start": "2872990",
    "end": "2879680"
  },
  {
    "text": "something that could compete with h2 absolutely absolutely it's hard to",
    "start": "2879680",
    "end": "2886160"
  },
  {
    "text": "defeat the protocol which runs of over UDP in terms of performance",
    "start": "2886160",
    "end": "2892180"
  },
  {
    "text": "okay thank you very much for taking the time to attend this presentation [Applause]",
    "start": "2896430",
    "end": "2907550"
  }
]