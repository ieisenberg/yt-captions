[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "[Music] good morning and welcome to hb2 the",
    "start": "6360",
    "end": "12080"
  },
  {
    "text": "sequel is always worse this is the only in-person edition of this talk so thanks for coming i hope",
    "start": "12080",
    "end": "18880"
  },
  {
    "text": "you enjoy it have you ever seen something that was so complex it just had to be hackable if",
    "start": "18880",
    "end": "26240"
  },
  {
    "text": "only you had time to understand it http 2 is a beautiful beast but it is",
    "start": "26240",
    "end": "32960"
  },
  {
    "text": "complex and where there's complexity people take shortcuts and things go wrong",
    "start": "32960",
    "end": "38239"
  },
  {
    "text": "in this session i'll show how you can use new features in h2 for a range of high impact attacks and also how those",
    "start": "38239",
    "end": "45039"
  },
  {
    "text": "shed light on a type of request smuggling that has always existed but never really been noticed",
    "start": "45039",
    "end": "52000"
  },
  {
    "text": "complexity causes trouble for me too i first looked at the hb2 spec way back",
    "start": "52000",
    "end": "57600"
  },
  {
    "text": "in 2019 during my http desync attacks research and i loaded up the spec looked at the",
    "start": "57600",
    "end": "64158"
  },
  {
    "text": "size of the browser scroll bar and proceeded to skim read it so fast that i",
    "start": "64159",
    "end": "69520"
  },
  {
    "text": "didn't even read the security considerations my next encounter with h2 was after i",
    "start": "69520",
    "end": "75119"
  },
  {
    "text": "presented that research at blackout usa a member of the audience said did those techniques work against http 2",
    "start": "75119",
    "end": "83119"
  },
  {
    "text": "and my answer was no it's completely secure against that kind of thing and my third encounter was later that",
    "start": "83119",
    "end": "90720"
  },
  {
    "text": "night at a party in vegas somewhere someone basically just walked up to me and told me exactly how you could",
    "start": "90720",
    "end": "95920"
  },
  {
    "text": "actually hack things running hb2 with that style of technique and",
    "start": "95920",
    "end": "102320"
  },
  {
    "text": "what they explained to me sounded really promising but i just spent nine months",
    "start": "102320",
    "end": "107439"
  },
  {
    "text": "exploiting request smuggling and desync attacks and i really didn't want to be doing any more at that moment so instead",
    "start": "107439",
    "end": "114320"
  },
  {
    "text": "i went off and spent a year doing web cache poisoning when i came back though i tried this",
    "start": "114320",
    "end": "120479"
  },
  {
    "text": "technique out and it really worked i could hack all kinds of interesting systems",
    "start": "120479",
    "end": "126159"
  },
  {
    "text": "there was just one fly in the ointment and that was bit bucket",
    "start": "126159",
    "end": "131280"
  },
  {
    "text": "every heuristic that i tried indicated that bit bucket should be vulnerable",
    "start": "131280",
    "end": "136640"
  },
  {
    "text": "but every actual exploit i tried reliably failed and normally when i encounter",
    "start": "136640",
    "end": "143680"
  },
  {
    "text": "something like this i'll spend a couple of days on it maybe a couple of weeks and then give up cut",
    "start": "143680",
    "end": "148879"
  },
  {
    "text": "my losses and move on to researching something else but i'd seen a scenario that was almost",
    "start": "148879",
    "end": "155599"
  },
  {
    "text": "identical to this during my original request smuggling research and i really didn't want to let it escape me a second",
    "start": "155599",
    "end": "161840"
  },
  {
    "text": "time so i kept coming back to this month after month and eventually in january i",
    "start": "161840",
    "end": "167680"
  },
  {
    "text": "found proper evidence that bitbucket genuinely was vulnerable but i still couldn't actually do any",
    "start": "167680",
    "end": "173120"
  },
  {
    "text": "real damage with this technique it like it was definitely vulnerable but there was no realistic exploit path",
    "start": "173120",
    "end": "180400"
  },
  {
    "text": "other than that though things with this research were going really well until march when emil",
    "start": "180400",
    "end": "186080"
  },
  {
    "text": "published the research that he'd been doing at the same time as me on the same topic",
    "start": "186080",
    "end": "191200"
  },
  {
    "text": "and this meant that my presentation was at risk of just not containing anything",
    "start": "191200",
    "end": "196560"
  },
  {
    "text": "very groundbreaking i really needed to find something new fast",
    "start": "196560",
    "end": "202319"
  },
  {
    "text": "so naturally i went back to bitbucket again and this time i finally cracked it",
    "start": "202319",
    "end": "207760"
  },
  {
    "text": "and this led to a cascade of findings including a new more powerful type of",
    "start": "207760",
    "end": "212840"
  },
  {
    "text": "desynchronization technique an entire class of issue that was",
    "start": "212840",
    "end": "218080"
  },
  {
    "text": "formerly useless becoming exploitable at last seen having to log everyone out of jiva worldwide which was quite fun to",
    "start": "218080",
    "end": "225280"
  },
  {
    "text": "monitor on twitter and atlassian getting the computer emergency response team involved and",
    "start": "225280",
    "end": "231840"
  },
  {
    "text": "awarding me triple their maximum bounty so out of that mess i've managed to extract",
    "start": "231840",
    "end": "238640"
  },
  {
    "start": "235000",
    "end": "235000"
  },
  {
    "text": "some information that i hope you'll find really quite useful i'm not going to try and explain this in",
    "start": "238640",
    "end": "245040"
  },
  {
    "text": "chronological order because looking back at it it doesn't make much sense even to me instead first i'll show how you can use",
    "start": "245040",
    "end": "252400"
  },
  {
    "text": "hp2 for request smuggling then i'll focus on request tunneling and show",
    "start": "252400",
    "end": "257440"
  },
  {
    "text": "practical techniques to confirm and exploit it then i'll cover some other kind of miscellaneous hp2 techniques",
    "start": "257440",
    "end": "264800"
  },
  {
    "text": "and some practical considerations and then wrap up with five minutes of questions",
    "start": "264800",
    "end": "271440"
  },
  {
    "text": "although hb2 is complex there's only four key things that you need to",
    "start": "271440",
    "end": "276720"
  },
  {
    "text": "understand in order to effectively use the attacks shown in this presentation so let's get",
    "start": "276720",
    "end": "283280"
  },
  {
    "text": "started what you can see here is an identical request represented in hb1 and hp2",
    "start": "283280",
    "end": "291680"
  },
  {
    "text": "the first key difference is that whereas hp1 has the has the request line containing the method and the path hb2",
    "start": "291680",
    "end": "299120"
  },
  {
    "text": "instead has pseudo headers which just look like normal headers but they start with a colon",
    "start": "299120",
    "end": "305120"
  },
  {
    "text": "the second difference is that hb1 is a plain text protocol so for example if",
    "start": "305120",
    "end": "310240"
  },
  {
    "text": "you look at it on the wire with wireshark or tcp dump you can actually read it and also that means from a server's",
    "start": "310240",
    "end": "317280"
  },
  {
    "text": "point of view parsing http requests is done with string operations like looking",
    "start": "317280",
    "end": "322560"
  },
  {
    "text": "for new lines and that's why it tends to fall apart generally when you attack it",
    "start": "322560",
    "end": "327759"
  },
  {
    "text": "hb2 meanwhile is a binary protocol using fixed offsets and such like more like",
    "start": "327759",
    "end": "333680"
  },
  {
    "text": "say tcp and if you look at it on the wire it just looks like binary junk and so what i'm",
    "start": "333680",
    "end": "340479"
  },
  {
    "text": "showing you whenever i represent a hb2 request on a slide is just a human readable abstraction of it so for",
    "start": "340479",
    "end": "347919"
  },
  {
    "text": "example pseudo headers aren't actually ascii strings to start with a colon that actually mapped in the rfc to predefined",
    "start": "347919",
    "end": "355919"
  },
  {
    "text": "bytes the third difference is the way the two protocols",
    "start": "355919",
    "end": "361919"
  },
  {
    "text": "tell the server what the length of a message is with http one you need the content length or the transfer encoding",
    "start": "361919",
    "end": "368319"
  },
  {
    "text": "header that hopefully you're familiar with uh whereas in hb2 you don't need either of those because the length of",
    "start": "368319",
    "end": "373919"
  },
  {
    "text": "the message is built in at the frame layer so",
    "start": "373919",
    "end": "379440"
  },
  {
    "text": "it's not shown on these slides because it's at a slightly lower level but it's basically impossible to send a hb2",
    "start": "379440",
    "end": "385759"
  },
  {
    "text": "message that is genuinely ambiguous about what the length of it is and that's why i thought request",
    "start": "385759",
    "end": "391680"
  },
  {
    "text": "smuggling against hp2 was impossible",
    "start": "391680",
    "end": "396479"
  },
  {
    "text": "the fourth and final key difference is the way the two protocols handle multiple requests sent over a single",
    "start": "397440",
    "end": "404000"
  },
  {
    "text": "connection on hp1 it's terrible you basically you open your tcp socket and you just whack",
    "start": "404000",
    "end": "409520"
  },
  {
    "text": "the requests down the socket one after the other and you just read them back in order and you use the order that the",
    "start": "409520",
    "end": "416160"
  },
  {
    "text": "response has come back to work out which responses match to which requests and that is going to become quite",
    "start": "416160",
    "end": "422639"
  },
  {
    "text": "significant later on whereas in hb2 they have this concept of",
    "start": "422639",
    "end": "427680"
  },
  {
    "text": "a stream id which is basically a label on every request that lets the browser",
    "start": "427680",
    "end": "433840"
  },
  {
    "text": "and the server correlate requests and responses and means they don't necessarily have to be sent back in",
    "start": "433840",
    "end": "440160"
  },
  {
    "text": "order so now we understand http 2 let's see what",
    "start": "440160",
    "end": "446479"
  },
  {
    "text": "damage we can do as usual all the targets in this section are real websites that had bug bounty",
    "start": "446479",
    "end": "453840"
  },
  {
    "text": "programs uh i found all these vulnerabilities with the automated tool hp request smuggler that i have released",
    "start": "453840",
    "end": "461280"
  },
  {
    "text": "and of any bounties earned 50 have been donated to local charities by my company",
    "start": "461280",
    "end": "466879"
  },
  {
    "text": "and the other half are going to be spent on beer and if you see that squiggle icon at the",
    "start": "466879",
    "end": "472400"
  },
  {
    "text": "bottom that means that there's a live online replica of that vulnerability on our website that you",
    "start": "472400",
    "end": "479039"
  },
  {
    "text": "can spin up for free and practice this hacking technique for yourself",
    "start": "479039",
    "end": "484479"
  },
  {
    "text": "uh just to get familiar with it in a safe environment that won't affect any real people",
    "start": "484479",
    "end": "492240"
  },
  {
    "start": "492000",
    "end": "492000"
  },
  {
    "text": "so why is request smuggling possible against hp2 because the majority of servers that",
    "start": "492240",
    "end": "498960"
  },
  {
    "text": "speak hb2 to clients are actually rewriting these hb2 requests as http1",
    "start": "498960",
    "end": "504879"
  },
  {
    "text": "and then forwarding them to the backend server this behavior which i call http",
    "start": "504879",
    "end": "510319"
  },
  {
    "text": "downgrading is ridiculously common in fact on some front-end servers you can't even disable",
    "start": "510319",
    "end": "516240"
  },
  {
    "text": "this it's not even possible to use http 2 end to end",
    "start": "516240",
    "end": "521440"
  },
  {
    "text": "what hdb downgrading does is it basically dodges all the security benefits that you should be getting from",
    "start": "521440",
    "end": "528000"
  },
  {
    "text": "using hb2 in fact it arguably makes things worse because",
    "start": "528000",
    "end": "533200"
  },
  {
    "text": "with classic request muggling it happens because the front end or the back end normally uh disagree about whether to",
    "start": "533200",
    "end": "540080"
  },
  {
    "text": "use the content length header or the transfer encoding header to know the length of the message",
    "start": "540080",
    "end": "546000"
  },
  {
    "text": "but if you're doing hb2 downgrading well the back end doesn't know the hb2",
    "start": "546000",
    "end": "551519"
  },
  {
    "text": "message length that information isn't directly accessible accessible to it so it has to rely on this translation step",
    "start": "551519",
    "end": "558000"
  },
  {
    "text": "that the front-end dots and if that sounds like a bit of a mess that's because it is if you take your",
    "start": "558000",
    "end": "564399"
  },
  {
    "text": "front end and you turn on hb2 support via downgrading you've basically doubled the",
    "start": "564399",
    "end": "570160"
  },
  {
    "text": "number of ways that you may be vulnerable to request smuggling",
    "start": "570160",
    "end": "576279"
  },
  {
    "text": "so let's start with a really simple case study the hb2 rfc says",
    "start": "576720",
    "end": "583600"
  },
  {
    "text": "although the content length header is not required in hb2 because of the frame length you're actually allowed to send",
    "start": "583600",
    "end": "590080"
  },
  {
    "text": "the content length header provided it's correct and netflix used the front end which",
    "start": "590080",
    "end": "595760"
  },
  {
    "text": "forgot to verify that the content length was correct so when they did downgrading the",
    "start": "595760",
    "end": "602320"
  },
  {
    "text": "the back end would interpret the resulting request as 1.5 messages",
    "start": "602320",
    "end": "607440"
  },
  {
    "text": "and the data shown in orange would be append appended to the start of the next user's request to hit that website",
    "start": "607440",
    "end": "615920"
  },
  {
    "text": "and here i've i've crafted the orange data so it will trigger that user to get redirected to my website",
    "start": "615920",
    "end": "623440"
  },
  {
    "text": "so by sending that in real time i could redirect random requests and with a bit of luck redirect",
    "start": "623440",
    "end": "629440"
  },
  {
    "text": "some javascript in imports and gain persistent control of other live netflix",
    "start": "629440",
    "end": "634800"
  },
  {
    "text": "users accounts stealing passwords and credit card details and the like",
    "start": "634800",
    "end": "639839"
  },
  {
    "text": "for that uh i got a 20k bounty off netflix which was nice and they also",
    "start": "639839",
    "end": "645360"
  },
  {
    "text": "tracked the root cause of this vulnerability back to the neti java library",
    "start": "645360",
    "end": "651839"
  },
  {
    "text": "after that motivating start let's move on to something teeny bit more complex the hb2",
    "start": "651839",
    "end": "657680"
  },
  {
    "start": "652000",
    "end": "652000"
  },
  {
    "text": "rfc uh it's pretty good in general but it's sometimes it doesn't really explain the",
    "start": "657680",
    "end": "663600"
  },
  {
    "text": "consequences of things so they say any message containing connection specific header fields must be treated",
    "start": "663600",
    "end": "671040"
  },
  {
    "text": "as malformed and maybe that doesn't sound super serious and amazon's application load balancer",
    "start": "671040",
    "end": "677519"
  },
  {
    "text": "ignored that line of the rfc what did that mean well",
    "start": "677519",
    "end": "683279"
  },
  {
    "text": "here we've got oaths law enforcement backdoor portal thing and they're using",
    "start": "683279",
    "end": "689120"
  },
  {
    "text": "application load balancer and one connection specific header field is transfer encoding chunked so they've",
    "start": "689120",
    "end": "696560"
  },
  {
    "text": "downgraded this request which should have been rejected as malformed and once again the back end has become",
    "start": "696560",
    "end": "703040"
  },
  {
    "text": "desynchronized and i've appended some data to the next request shown in orange which once again triggers a redirect to",
    "start": "703040",
    "end": "710399"
  },
  {
    "text": "my server when i reported this they said well it's just a redirect what damage can it do",
    "start": "710399",
    "end": "717200"
  },
  {
    "text": "and i was like are you asking me to exploit some live users and they were like yes so i was like fantastic uh and",
    "start": "717200",
    "end": "723200"
  },
  {
    "text": "i did and what i found was i kept redirecting people who were in the middle of i was logging flows and we're there by leaking",
    "start": "723200",
    "end": "730320"
  },
  {
    "text": "oauth codes via the referral header for that i got 7k off oath",
    "start": "730320",
    "end": "737040"
  },
  {
    "text": "this technique also worked on everything using the imperver cloud web application",
    "start": "737040",
    "end": "742399"
  },
  {
    "text": "firewall which is supposed to make websites more secure",
    "start": "742399",
    "end": "747600"
  },
  {
    "start": "747000",
    "end": "747000"
  },
  {
    "text": "on another site this was another oath target i could once again use the same technique thanks",
    "start": "747600",
    "end": "753760"
  },
  {
    "text": "to application load balancer to trigger redirect to my server and here when i redirected people i saw",
    "start": "753760",
    "end": "760160"
  },
  {
    "text": "something else people kept sending requests to my website that basically said",
    "start": "760160",
    "end": "766639"
  },
  {
    "text": "hey there can i have permission to send you my password so i was like okay sure i wrote up some",
    "start": "766639",
    "end": "771920"
  },
  {
    "text": "code and i said yeah go ahead send me your credentials please uh and they did and i've got a brilliant video taken",
    "start": "771920",
    "end": "778560"
  },
  {
    "text": "with tcp dump showing a stream of credentials being sent to my server in",
    "start": "778560",
    "end": "783600"
  },
  {
    "text": "real time which i really wanted to share but it's impossible to redact uh",
    "start": "783600",
    "end": "789200"
  },
  {
    "text": "so yeah and after that i got 10k off once again",
    "start": "789200",
    "end": "794959"
  },
  {
    "text": "that was the basic stuff hopefully all fairly familiar stuff if you're familiar with request smuggling now things are",
    "start": "795200",
    "end": "800959"
  },
  {
    "text": "going to get a bit more http too one cool thing about h2 is that it's a",
    "start": "800959",
    "end": "807279"
  },
  {
    "text": "binary protocol and as part of that it lets you put arbitrary characters wherever you like and relies on an extra",
    "start": "807279",
    "end": "814959"
  },
  {
    "text": "layer of server logic to say things like actually no you shouldn't put that character in that location",
    "start": "814959",
    "end": "821839"
  },
  {
    "text": "so firefox's start page was powered by the netlify cdn",
    "start": "821839",
    "end": "827440"
  },
  {
    "text": "and they forgot to say that you can't put new lines in hp header values this is something",
    "start": "827440",
    "end": "833199"
  },
  {
    "text": "which is impossible in hp1 and thanks to that we've got the request",
    "start": "833199",
    "end": "838720"
  },
  {
    "text": "header injection vulnerability that i'm exploiting here to trigger request smuggling",
    "start": "838720",
    "end": "843760"
  },
  {
    "text": "and smuggle malicious prefix here because there's a cdn by changing my prefix to have my own",
    "start": "843760",
    "end": "851600"
  },
  {
    "text": "host header i can make requests to firefox's start page i serve content from my own site on the",
    "start": "851600",
    "end": "858800"
  },
  {
    "text": "netlify cdn and also netify would cache that and thereby serve it up persistently so effectively i got full",
    "start": "858800",
    "end": "866160"
  },
  {
    "text": "persistent control over every page on every website using the netlify cdn",
    "start": "866160",
    "end": "872399"
  },
  {
    "text": "and for that i got 2k off mozilla and 2k off netlify",
    "start": "872399",
    "end": "879040"
  },
  {
    "text": "now when i try the same technique on atlassian's jira something unexpected happened",
    "start": "879440",
    "end": "887120"
  },
  {
    "text": "i was expecting to see two different responses coming back uh the normal one and the poison one the",
    "start": "887760",
    "end": "895199"
  },
  {
    "text": "text is probably pretty small but you can probably see we're not getting two responses coming back we're getting a",
    "start": "895199",
    "end": "900240"
  },
  {
    "text": "huge range of responses which i've had to adapt because they're clearly coming from",
    "start": "900240",
    "end": "906240"
  },
  {
    "text": "different jiva deployments they're intended for different people and they contain a huge amount of sensitive",
    "start": "906240",
    "end": "912639"
  },
  {
    "text": "information and i had no idea why that happened uh and eventually i was able to figure",
    "start": "912639",
    "end": "919680"
  },
  {
    "start": "915000",
    "end": "915000"
  },
  {
    "text": "out what the issue was because i could put new lines in headers i decided to try",
    "start": "919680",
    "end": "925440"
  },
  {
    "text": "and put my malicious prefix entirely inside the foo header instead of putting it in the body",
    "start": "925440",
    "end": "931199"
  },
  {
    "text": "just because it kind of seemed easier and i forgot that when a front end does",
    "start": "931199",
    "end": "936800"
  },
  {
    "text": "downgrading it's going to put a couple of new lines on the end of the headers so in my head",
    "start": "936800",
    "end": "943279"
  },
  {
    "text": "i was sending 1.5 requests to the back end but i was actually sending exactly",
    "start": "943279",
    "end": "949680"
  },
  {
    "text": "two requests and when you do that something slightly special happens so",
    "start": "949680",
    "end": "954880"
  },
  {
    "text": "the i got the response to the first request the response to the second smuggled one",
    "start": "954880",
    "end": "960720"
  },
  {
    "text": "went to the next user but then because it perfectly lined up that user's response went to the next",
    "start": "960720",
    "end": "966880"
  },
  {
    "text": "user and so on so this didn't just send incorrect responses to me it sent random",
    "start": "966880",
    "end": "973920"
  },
  {
    "text": "authenticated responses to everybody and thanks to the set cookie header this",
    "start": "973920",
    "end": "979199"
  },
  {
    "text": "was effectively logging random people into random accounts worldwide",
    "start": "979199",
    "end": "985199"
  },
  {
    "text": "and i didn't realize this and i gave this pock to the security team and they were running it without realizing it",
    "start": "985199",
    "end": "991040"
  },
  {
    "text": "and then they realized it and that's why they had to log everyone out of jira",
    "start": "991040",
    "end": "997759"
  },
  {
    "text": "this technique as we saw it worked on netlify it also it worked on jira because they were using the pulse secure",
    "start": "997759",
    "end": "1004800"
  },
  {
    "text": "virtual traffic manager front end you might have heard of pulse secure",
    "start": "1004800",
    "end": "1009920"
  },
  {
    "text": "it also worked on f5's big ip load balancer and it also predictably worked",
    "start": "1009920",
    "end": "1015279"
  },
  {
    "text": "on the imperver web application firewall even after they'd fixed the previous issue",
    "start": "1015279",
    "end": "1020959"
  },
  {
    "text": "the disclosure of that one last one was slightly messy because when they fixed the previous issue they didn't actually",
    "start": "1020959",
    "end": "1026400"
  },
  {
    "text": "tell me that they'd fixed it so when i reported this to them several months before my",
    "start": "1026400",
    "end": "1032000"
  },
  {
    "text": "presentation at blackout usa they didn't reply and i didn't really think anything of it and then the day before my",
    "start": "1032000",
    "end": "1037839"
  },
  {
    "text": "presentation i checked back and they were still vulnerable uh so i had to get in contact with them",
    "start": "1037839",
    "end": "1042959"
  },
  {
    "text": "quite urgently uh but fortunately they were able to deploy a waffle using their own waff to patch",
    "start": "1042959",
    "end": "1050559"
  },
  {
    "text": "their waff and thereby secure their customers while waiting for the post-secure proper",
    "start": "1050559",
    "end": "1058240"
  },
  {
    "text": "fix to this issue atlassian tried out a few hot fixes on joa and it kind of shows some of the things that",
    "start": "1058240",
    "end": "1064720"
  },
  {
    "text": "can some of the variants of these issues that you can find so one issue with it was there were filtering header names but they weren't",
    "start": "1064720",
    "end": "1071360"
  },
  {
    "text": "filtering new lines in head of sorry they were filtering values but not names and by itself you can't do that",
    "start": "1071360",
    "end": "1078480"
  },
  {
    "text": "much with that but by also putting colons in header names you can make that practically exploitable",
    "start": "1078480",
    "end": "1084080"
  },
  {
    "text": "and trigger request monkey also uh they were filtering names and values by this point but they forgot to",
    "start": "1084080",
    "end": "1090559"
  },
  {
    "start": "1086000",
    "end": "1086000"
  },
  {
    "text": "filter studio headers called causing request line injection which could once again cause request smuggling",
    "start": "1090559",
    "end": "1097840"
  },
  {
    "text": "and finally in the path pseudo header only they blocked the slash r slash n sequence but they didn't block slash in",
    "start": "1097840",
    "end": "1103840"
  },
  {
    "text": "by itself which is still sufficient for successful exploitation",
    "start": "1103840",
    "end": "1109760"
  },
  {
    "text": "so there in summary we've seen a range of techniques that you can use to exploit hp2 downgrades and achieve",
    "start": "1109760",
    "end": "1115919"
  },
  {
    "text": "requests smuggling now we're going to take a look at",
    "start": "1115919",
    "end": "1121520"
  },
  {
    "text": "something less flashy and less obvious but still quite dangerous",
    "start": "1121520",
    "end": "1127840"
  },
  {
    "text": "when you find a request smuggling vulnerability the possible attacks that you have available that will actually",
    "start": "1127840",
    "end": "1134480"
  },
  {
    "start": "1128000",
    "end": "1128000"
  },
  {
    "text": "work are affected by how the front end decides whether to reuse an existing",
    "start": "1134480",
    "end": "1139760"
  },
  {
    "text": "connection with the back end server or to create a new one normally there's some kind of shared",
    "start": "1139760",
    "end": "1145120"
  },
  {
    "text": "connection pool when you can exploit random users just fine but sometimes you'll find that you can",
    "start": "1145120",
    "end": "1151200"
  },
  {
    "text": "only affect requests coming from your own ip and when you see that that's because the",
    "start": "1151200",
    "end": "1157760"
  },
  {
    "text": "front end is only is mapping one connect it's creating one connection to the backend server per client ip",
    "start": "1157760",
    "end": "1165919"
  },
  {
    "text": "but that scenario is not that inconvenient because it's still exploitable via cache poisoning and you",
    "start": "1165919",
    "end": "1171120"
  },
  {
    "text": "can still leak internal headers and maybe if you use a vpn you can exploit everyone else using the vpn and so on",
    "start": "1171120",
    "end": "1180399"
  },
  {
    "text": "what bitbucket had was the most extreme scenario where they create a new connection to",
    "start": "1180480",
    "end": "1187760"
  },
  {
    "text": "the back end for every single request they never ever reuse connections to the",
    "start": "1187760",
    "end": "1192880"
  },
  {
    "text": "back end and what i'm going to show you is how to prove this issue really exists and some new exploit paths that let you",
    "start": "1192880",
    "end": "1199360"
  },
  {
    "text": "enable header theft and cache poisoning to basically make this a practical useful issue",
    "start": "1199360",
    "end": "1206640"
  },
  {
    "start": "1206000",
    "end": "1206000"
  },
  {
    "text": "let's visualize what happens here so here we're targeting bitbucket or someone like that and",
    "start": "1206640",
    "end": "1213120"
  },
  {
    "text": "you can see we've successfully smuggled 1.5 requests to the back end but because the front end is never going",
    "start": "1213120",
    "end": "1219520"
  },
  {
    "text": "to reuse this socket it's just being discarded and the data",
    "start": "1219520",
    "end": "1224720"
  },
  {
    "text": "shown in orange is effectively being discarded by the back end or the front end and",
    "start": "1224720",
    "end": "1230000"
  },
  {
    "text": "the request shown in green the victim is completely unaffected by whatever we've tried to do",
    "start": "1230000",
    "end": "1236240"
  },
  {
    "text": "this happens naturally on some server setups and it's also deliberately triggered by amazon's http desync",
    "start": "1236240",
    "end": "1243280"
  },
  {
    "text": "guardian uh whenever it sees a suspicious request i should mention that it didn't regard my hp 2 attacks as",
    "start": "1243280",
    "end": "1250240"
  },
  {
    "text": "being suspicious so this causes a bunch of problems",
    "start": "1250240",
    "end": "1256080"
  },
  {
    "start": "1253000",
    "end": "1253000"
  },
  {
    "text": "the first one is with confirming that there is really a vulnerability present because although",
    "start": "1256080",
    "end": "1261919"
  },
  {
    "text": "the the classic timeout-based technique that you can use to find request smuggling still detects this",
    "start": "1261919",
    "end": "1268240"
  },
  {
    "text": "vulnerability the normal confirmation strategy of sending a bunch of",
    "start": "1268240",
    "end": "1273760"
  },
  {
    "text": "of requests and confirming the earlier requests affect later ones doesn't work so it's easy to mistake",
    "start": "1273760",
    "end": "1280080"
  },
  {
    "text": "this for a false positive report you might think it's quite easy to",
    "start": "1280080",
    "end": "1286640"
  },
  {
    "text": "to detect just smuggle a complete request and see if you get two responses but",
    "start": "1286640",
    "end": "1291919"
  },
  {
    "text": "the response that you can see here doesn't actually show that this target is really vulnerable because that's how",
    "start": "1291919",
    "end": "1298640"
  },
  {
    "text": "hb 1.1 pipelining works so what that tells you is",
    "start": "1298640",
    "end": "1303679"
  },
  {
    "text": "maybe they're vulnerable maybe they're not it's actually basically a useless piece of information",
    "start": "1303679",
    "end": "1310480"
  },
  {
    "text": "fortunately hb 2 fixes this with hp 2",
    "start": "1310480",
    "end": "1315600"
  },
  {
    "text": "if you trigger request tunneling and smuggle our whole request then you'll see a hp 1.1 headers nested inside the",
    "start": "1315600",
    "end": "1323120"
  },
  {
    "text": "body of the hb2 response clearly proving that they are vulnerable",
    "start": "1323120",
    "end": "1328320"
  },
  {
    "text": "to request tunneling the next problem is that request tunneling is often blind",
    "start": "1328320",
    "end": "1335440"
  },
  {
    "start": "1331000",
    "end": "1331000"
  },
  {
    "text": "which means you can't see the second response the reason for that is that the front",
    "start": "1335440",
    "end": "1340640"
  },
  {
    "text": "end often looks at the content length header that it's received from the back end",
    "start": "1340640",
    "end": "1346480"
  },
  {
    "text": "and it only reads that many bytes off the socket before passing the response onto you",
    "start": "1346480",
    "end": "1352400"
  },
  {
    "text": "and that means you can trigger two responses but you won't actually see the second one and this is what bitbucket",
    "start": "1352400",
    "end": "1358960"
  },
  {
    "text": "had i found a solution to this problem by accident i i think sometimes you can",
    "start": "1358960",
    "end": "1364880"
  },
  {
    "text": "make up for not really knowing what you're doing just by spending a huge amount of time on something and that's",
    "start": "1364880",
    "end": "1370640"
  },
  {
    "text": "what happened here so i was hitting loads of endpoints on bitbucket and one of these endpoints was serving some",
    "start": "1370640",
    "end": "1376000"
  },
  {
    "text": "massive file download and the file download was so big that when i hit it in burp repeat it every",
    "start": "1376000",
    "end": "1382559"
  },
  {
    "text": "time it rendered it made the whole of burp lag and it was getting on my nerves so i",
    "start": "1382559",
    "end": "1388880"
  },
  {
    "text": "thought you know what i actually don't need the response body so why don't i just switch the method to",
    "start": "1388880",
    "end": "1394320"
  },
  {
    "text": "head and as soon as i change the method to head i started seeing two responses coming back",
    "start": "1394320",
    "end": "1400720"
  },
  {
    "text": "that's because their front end hadn't special cased head and the back end had still served a content length even",
    "start": "1400720",
    "end": "1406480"
  },
  {
    "text": "though it wasn't actually intending to serve a body because when you receive a head request you don't serve a body",
    "start": "1406480",
    "end": "1412159"
  },
  {
    "text": "so the front hand so the front end had over red into the nested response from",
    "start": "1412159",
    "end": "1417200"
  },
  {
    "text": "the back end and sent it on to me so you can often use this this technique",
    "start": "1417200",
    "end": "1423440"
  },
  {
    "text": "to make request tunneling non-blind the only catch is that typically this is based on some kind of",
    "start": "1423440",
    "end": "1430960"
  },
  {
    "text": "race condition scenario so you may have to find you may have to try this a bunch of",
    "start": "1430960",
    "end": "1436880"
  },
  {
    "text": "times and if your nested request is for a response that takes longer for the",
    "start": "1436880",
    "end": "1442159"
  },
  {
    "text": "back end to generate then this will be less likely to work",
    "start": "1442159",
    "end": "1447679"
  },
  {
    "start": "1447000",
    "end": "1447000"
  },
  {
    "text": "so let's say you've confirmed your request tunneling how can you exploit it well",
    "start": "1447919",
    "end": "1453200"
  },
  {
    "text": "obviously you can't attack other users because connections are not being reused but you can tunnel internal headers",
    "start": "1453200",
    "end": "1460159"
  },
  {
    "text": "which are often used by front ends to do critical site functions such as informing the back end who you're logged",
    "start": "1460159",
    "end": "1467120"
  },
  {
    "text": "in as but to exploit those you need to know what they're called",
    "start": "1467120",
    "end": "1472559"
  },
  {
    "text": "and normal header leaking techniques don't work with request tunneling",
    "start": "1472559",
    "end": "1477679"
  },
  {
    "text": "however if you can inject new lines in headers thanks to hb2 you can cause a",
    "start": "1477679",
    "end": "1483360"
  },
  {
    "text": "different kind of desynchronization that lets you find out",
    "start": "1483360",
    "end": "1488720"
  },
  {
    "text": "normal request smuggling confuses the front end in the back end it makes the front end in the back end disagree",
    "start": "1490240",
    "end": "1496400"
  },
  {
    "text": "about where the body of the message ends but by putting new lines in headers you",
    "start": "1496400",
    "end": "1503440"
  },
  {
    "text": "can cause a different kind of desynchronization which makes the front end in the back end disagree about where",
    "start": "1503440",
    "end": "1509039"
  },
  {
    "text": "the body of the message starts so by doing this here i've effectively led to the front",
    "start": "1509039",
    "end": "1515279"
  },
  {
    "text": "end putting the internal headers on what it thinks is the end of the headers but what the back end is going to is going",
    "start": "1515279",
    "end": "1521760"
  },
  {
    "text": "to treat as part of this s parameter which is just the search parameter on the wordpress back end of this part of",
    "start": "1521760",
    "end": "1530080"
  },
  {
    "text": "bitbucket so wordpress is going to tell me what i search for right and it's going to leak",
    "start": "1530080",
    "end": "1535679"
  },
  {
    "text": "all the internal headers in the process and i found by hitting different",
    "start": "1535679",
    "end": "1540960"
  },
  {
    "text": "endpoints like non-wordpress ones uh it would leak different internal headers including some with secret keys uh for a",
    "start": "1540960",
    "end": "1548080"
  },
  {
    "text": "full end-to-end case study of exploiting systems with internal headers check out the new relic example from my previous",
    "start": "1548080",
    "end": "1555039"
  },
  {
    "text": "hp dating attacks research finally if the stars are aligned you",
    "start": "1555039",
    "end": "1560480"
  },
  {
    "start": "1558000",
    "end": "1558000"
  },
  {
    "text": "might be able to use tunneling for cache poisoning so if they've got a cache and the head technique works and the clf",
    "start": "1560480",
    "end": "1566960"
  },
  {
    "text": "technique works this is worth a try so",
    "start": "1566960",
    "end": "1573039"
  },
  {
    "text": "what this lets you do what the head technique lets you do is mix and match response headers and",
    "start": "1573039",
    "end": "1579919"
  },
  {
    "text": "response bodies so here i have chosen an initial set of response headers that are just",
    "start": "1579919",
    "end": "1585679"
  },
  {
    "text": "from the 404 page and set a content type of text html and then for my nested request i've",
    "start": "1585679",
    "end": "1592880"
  },
  {
    "text": "specified a different endpoint that just does a redirect that puts my query",
    "start": "1592880",
    "end": "1598000"
  },
  {
    "text": "string into the location header without encoding it and by itself that redirect is",
    "start": "1598000",
    "end": "1604480"
  },
  {
    "text": "completely harmless because the location header is not supposed to get rendered as html but by sticking those extra",
    "start": "1604480",
    "end": "1610080"
  },
  {
    "text": "headers on the front i've effectively made that get rendered and i've gained",
    "start": "1610080",
    "end": "1615279"
  },
  {
    "text": "arbitrary javascript execution and thanks to their cache i've got that saved and gained persistent control over",
    "start": "1615279",
    "end": "1622000"
  },
  {
    "text": "every page on their site and for that plus the jury issue we saw earlier i got",
    "start": "1622000",
    "end": "1627440"
  },
  {
    "text": "a triple their max bounty of 15k taking the total earned in this research to 56 grand",
    "start": "1627440",
    "end": "1634080"
  },
  {
    "text": "now i'm going to have a tour of some hb2 odds and ends that you might find useful",
    "start": "1634080",
    "end": "1640320"
  },
  {
    "start": "1640000",
    "end": "1640000"
  },
  {
    "text": "in hb1 you can send duplicate headers and this is the basis of quite a few different",
    "start": "1640320",
    "end": "1645679"
  },
  {
    "text": "types of attack but you can't send duplicate parts because there's only one request line",
    "start": "1645679",
    "end": "1653279"
  },
  {
    "text": "but hb2 introduced pseudoheaders so that means you can send duplicate pods on",
    "start": "1653279",
    "end": "1658399"
  },
  {
    "text": "some servers and i've verified there are real servers out there they do support duplicate paths and they vary in which",
    "start": "1658399",
    "end": "1664880"
  },
  {
    "text": "path they use as the real path of the message so that could",
    "start": "1664880",
    "end": "1670000"
  },
  {
    "text": "lead to some pretty nice access control bypasses and similarly hb2 introduced this colon",
    "start": "1670000",
    "end": "1676720"
  },
  {
    "text": "authority pseudo header which is basically a replacement for the host header but they didn't say that you",
    "start": "1676720",
    "end": "1682480"
  },
  {
    "text": "can't also send the host header so you can send some really ambiguous and confusing messages with h2",
    "start": "1682480",
    "end": "1689360"
  },
  {
    "text": "that may enable some interesting host header attacks they also introduced the colon scheme",
    "start": "1689360",
    "end": "1696960"
  },
  {
    "start": "1694000",
    "end": "1694000"
  },
  {
    "text": "pseudo header which in my opinion was a mistake the value of this pseudo header",
    "start": "1696960",
    "end": "1702000"
  },
  {
    "text": "it's meant to be http or https but",
    "start": "1702000",
    "end": "1707120"
  },
  {
    "text": "you can put whatever you like in it right it's a binary protocol and often developers just trust this value",
    "start": "1707120",
    "end": "1714159"
  },
  {
    "text": "and so they use it for things like building urls so i was able to use this to get some",
    "start": "1714159",
    "end": "1719679"
  },
  {
    "text": "cash poisoning on netlify admittedly it wasn't very high impact and on a different target they were",
    "start": "1719679",
    "end": "1726000"
  },
  {
    "text": "using it to build a url that they would route the request to so you could use this for a limited type of server side",
    "start": "1726000",
    "end": "1733360"
  },
  {
    "text": "request forgery on another site i found i could put",
    "start": "1733360",
    "end": "1739679"
  },
  {
    "start": "1736000",
    "end": "1736000"
  },
  {
    "text": "colons in hp header names but i couldn't put new lines in there and this still",
    "start": "1739679",
    "end": "1745679"
  },
  {
    "text": "enables request smuggling as long as the back end tolerates this trailing colon that you can't get",
    "start": "1745679",
    "end": "1751600"
  },
  {
    "text": "rid of in the transfer and coding header if the back end doesn't like that then",
    "start": "1751600",
    "end": "1756880"
  },
  {
    "text": "your next best option is probably doing a hosted attack because you're expected to have colons",
    "start": "1756880",
    "end": "1763279"
  },
  {
    "text": "in the host header on one side i found yep i could use this to trigger request smuggling and i got",
    "start": "1763279",
    "end": "1770080"
  },
  {
    "text": "halfway through exploitation and then i can't remember what happened but i got distracted by something else and when i",
    "start": "1770080",
    "end": "1777200"
  },
  {
    "text": "came back the vulnerability had disappeared and the server version was reporting",
    "start": "1777200",
    "end": "1783120"
  },
  {
    "text": "that they'd updated apache to the latest version so i thought oh this must be a patched apache vulnerability but i",
    "start": "1783120",
    "end": "1790399"
  },
  {
    "text": "couldn't find any advisory for it so i thought i'll just install the old version maybe they accidentally patched",
    "start": "1790399",
    "end": "1796399"
  },
  {
    "text": "it maybe i can use it for a demo or something and i installed it and i couldn't",
    "start": "1796399",
    "end": "1801760"
  },
  {
    "text": "replicate it i have no idea what was going on then but because i'd installed it i did accidentally find a different",
    "start": "1801760",
    "end": "1807279"
  },
  {
    "text": "vulnerability which was a zero day in apache it also worked on the latest version",
    "start": "1807279",
    "end": "1813520"
  },
  {
    "text": "you could put spaces in the method pseudo header and so as long as the backend server",
    "start": "1813520",
    "end": "1819520"
  },
  {
    "text": "tolerated trailing junk in the request line which some of them sadly do you could use this to do things like bypass",
    "start": "1819520",
    "end": "1826480"
  },
  {
    "text": "block rules on front end servers and generally dance around security restrictions",
    "start": "1826480",
    "end": "1833200"
  },
  {
    "text": "implemented on the front end i reported that to apache and they fixed it in",
    "start": "1833200",
    "end": "1840120"
  },
  {
    "text": "2.4.49 uh you might have heard of that version i would not recommend installing it i'd go for a later version if i were",
    "start": "1840120",
    "end": "1847200"
  },
  {
    "text": "you finally a few practicalities so",
    "start": "1847200",
    "end": "1853039"
  },
  {
    "text": "one thing about hp2 is it uses the same port as http one and thereby a browser",
    "start": "1853039",
    "end": "1861039"
  },
  {
    "text": "needs to be told which protocol it should use so what the server is supposed to do is declare that it",
    "start": "1861039",
    "end": "1866880"
  },
  {
    "text": "supports http 2 during the tls handshake but some servers support hp2 and forget",
    "start": "1866880",
    "end": "1875039"
  },
  {
    "text": "to declare it so that means if you take a casual glance at these websites you'll think",
    "start": "1875039",
    "end": "1880240"
  },
  {
    "text": "they don't support hp2 and you'll miss out on all kinds of valuable attack surface uh but the good news is it's",
    "start": "1880240",
    "end": "1886960"
  },
  {
    "text": "really easy to to detect this you just try and send a hb2 request regardless",
    "start": "1886960",
    "end": "1893600"
  },
  {
    "text": "and you can do that with the extension that i've shared but scanner will do it for you and you can also do it just with",
    "start": "1893600",
    "end": "1899440"
  },
  {
    "text": "curl using these command line flags i found a site that had that behavior",
    "start": "1899440",
    "end": "1905519"
  },
  {
    "text": "and was vulnerable to hp2 based requests of request smuggling uh but there was a",
    "start": "1905519",
    "end": "1910640"
  },
  {
    "text": "catch there which was i could only exploit other people that were using http 2",
    "start": "1910640",
    "end": "1916080"
  },
  {
    "text": "which was nobody because they weren't advertising support for it the tooling situation",
    "start": "1916080",
    "end": "1922240"
  },
  {
    "start": "1920000",
    "end": "1920000"
  },
  {
    "text": "is also a bit of a mess basically existing tooling doesn't work because libraries will",
    "start": "1922240",
    "end": "1928320"
  },
  {
    "text": "refuse to send the kind of malformed requests that we need to send for these attacks and hb 1.1 had that issue too",
    "start": "1928320",
    "end": "1936399"
  },
  {
    "text": "but you could fall back to using things like netcat and open ssl but because hp2 is a binary protocol",
    "start": "1936399",
    "end": "1942880"
  },
  {
    "text": "that's wildly impractical so instead you need to use ml's tool hb 2 smuggle turbo",
    "start": "1942880",
    "end": "1950640"
  },
  {
    "text": "intruder which i've made a custom open source hp 2 stack for or you can use turbo intuitive with",
    "start": "1950640",
    "end": "1957600"
  },
  {
    "text": "burps hp2 stack which is slower but more reliable or book just corbert or the hp request",
    "start": "1957600",
    "end": "1964159"
  },
  {
    "text": "smuggler that i've released uh if you don't like burp please take note you can use turbo intruder as a command line",
    "start": "1964159",
    "end": "1970000"
  },
  {
    "text": "tool it doesn't actually depend on but as far as defense goes i think the most",
    "start": "1970000",
    "end": "1976880"
  },
  {
    "start": "1974000",
    "end": "1974000"
  },
  {
    "text": "important thing is i would advise network architect type people not to use",
    "start": "1976880",
    "end": "1982320"
  },
  {
    "text": "hp2 downgrading ever i would not turn on hb2 on your front-end server until you",
    "start": "1982320",
    "end": "1988399"
  },
  {
    "text": "can have hp2 end to end it's just too dangerous beyond that though uh",
    "start": "1988399",
    "end": "1995120"
  },
  {
    "text": "if you're a server vendor i'd recommend enforcing hp 1.1 limitations like the",
    "start": "1995120",
    "end": "2000320"
  },
  {
    "text": "rfc tells you like not letting people put colons in header names or new lines in silly places",
    "start": "2000320",
    "end": "2006080"
  },
  {
    "text": "and for developers i think over time you'll probably want to drop the",
    "start": "2006080",
    "end": "2011440"
  },
  {
    "text": "assumptions that you that used to be valid in the world of http one for example it used to be safe to put a http",
    "start": "2011440",
    "end": "2019679"
  },
  {
    "text": "header in an email header because email headers are terminated by the same thing that terminates http headers but thanks",
    "start": "2019679",
    "end": "2027039"
  },
  {
    "text": "to hp2 that's no longer true and at one point in time that would have",
    "start": "2027039",
    "end": "2032320"
  },
  {
    "text": "led to a remote an unauthorized code execution in wordpress i believe",
    "start": "2032320",
    "end": "2038080"
  },
  {
    "text": "uh but not anymore don't worry about that uh and also the other thing is don't trust the scheme",
    "start": "2038080",
    "end": "2043840"
  },
  {
    "text": "pseudo header this is a 100 user input it's just not safe",
    "start": "2043840",
    "end": "2048879"
  },
  {
    "start": "2048000",
    "end": "2048000"
  },
  {
    "text": "there's a whole bunch of further reading available uh the main thing that i'd like to draw your attention to is",
    "start": "2049359",
    "end": "2054480"
  },
  {
    "text": "predictably our web security academy where we have more explanations of these",
    "start": "2054480",
    "end": "2060079"
  },
  {
    "text": "of these techniques in a greater level of depth and also interactive labs so you can try them out for yourself",
    "start": "2060079",
    "end": "2066720"
  },
  {
    "text": "uh but the other stuff is there's some useful post exploitation stuff there too",
    "start": "2066720",
    "end": "2072398"
  },
  {
    "text": "and the three key things to take away are the hb2 breaks assumptions at",
    "start": "2072399",
    "end": "2078960"
  },
  {
    "start": "2073000",
    "end": "2073000"
  },
  {
    "text": "multiple different layers of the stack hb2 downgrades are just really hazardous and request",
    "start": "2078960",
    "end": "2085520"
  },
  {
    "text": "tunneling in spite of being a massive pain is a genuine threat i'm going to take five minutes of",
    "start": "2085520",
    "end": "2092240"
  },
  {
    "text": "questions now if you have any more after that feel free to come up and chat to me at the back or chat me an email don't",
    "start": "2092240",
    "end": "2098160"
  },
  {
    "text": "forget to follow me on twitter thank you for listening",
    "start": "2098160",
    "end": "2103320"
  },
  {
    "text": "[Music]",
    "start": "2108010",
    "end": "2111159"
  }
]