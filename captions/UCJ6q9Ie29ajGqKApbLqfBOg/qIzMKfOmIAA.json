[
  {
    "text": "foreign",
    "start": "1979",
    "end": "4159"
  },
  {
    "text": "Park Android puzzles the bad the good and the better introducing Android safer",
    "start": "11360",
    "end": "16800"
  },
  {
    "text": "puzzle my name is Hal I'm a security engineer from Google's Android malware research",
    "start": "16800",
    "end": "22020"
  },
  {
    "text": "team in Android platform security at Google hi my name is Yang I'm a security",
    "start": "22020",
    "end": "28380"
  },
  {
    "text": "engineer at the Google vulnerability reward program",
    "start": "28380",
    "end": "33140"
  },
  {
    "text": "also a special thanks to Maria and Kevin who did great work making this presentation happen",
    "start": "33739",
    "end": "41420"
  },
  {
    "text": "in the next 40 minutes we will walk through the Android puzzle mismatch for problems and cover an overview of known",
    "start": "42360",
    "end": "48780"
  },
  {
    "text": "exploit techniques that abuses possible vulnerabilities including the technique known as bundle feng shui and the noble",
    "start": "48780",
    "end": "55079"
  },
  {
    "text": "exploit chain identified in Android 12's better version that introduces arbitrary code execution in privileged processes",
    "start": "55079",
    "end": "62100"
  },
  {
    "text": "also known as cve 2021-0928 from there we'll share with you how",
    "start": "62100",
    "end": "67799"
  },
  {
    "text": "Google's Android security and privacy AKA ASAP team worked on securing Android from this type of vulnerability the",
    "start": "67799",
    "end": "75000"
  },
  {
    "text": "security hardening changes we made for Android 13 and why after that we will spend some time",
    "start": "75000",
    "end": "80580"
  },
  {
    "text": "sharing insights about our Android vulnerability Rewards program and how we work behind the scenes at the end if",
    "start": "80580",
    "end": "88140"
  },
  {
    "text": "time permits will take a few minutes for questions so first what is possible parcel can be",
    "start": "88140",
    "end": "94560"
  },
  {
    "text": "thought of as a container for sending serialized slash parcel data across processes in another word puzzle is the",
    "start": "94560",
    "end": "102479"
  },
  {
    "text": "container of a message for inter-process communication also known as IPC",
    "start": "102479",
    "end": "107520"
  },
  {
    "text": "the parcel can carry different types of data including common string integer bytes Etc",
    "start": "107520",
    "end": "114060"
  },
  {
    "text": "and besides that possible is a special type of data that can be carried in",
    "start": "114060",
    "end": "119340"
  },
  {
    "text": "puzzles so the usage of possible Works in a way that senders can invoke the method right",
    "start": "119340",
    "end": "125280"
  },
  {
    "text": "to parcel to serialize possible into puzzle while receivers can invoke create",
    "start": "125280",
    "end": "130979"
  },
  {
    "text": "from puzzle to deserialize and construct possible from the data stream",
    "start": "130979",
    "end": "137220"
  },
  {
    "text": "and with impossible there are containers that can carry arbitrary typed data these containers are arrays lists Maps",
    "start": "137220",
    "end": "145319"
  },
  {
    "text": "sparse arrays Etc when digitalization or we can call it as",
    "start": "145319",
    "end": "151620"
  },
  {
    "text": "a read happens on these containers the the reader will visualize everything",
    "start": "151620",
    "end": "156660"
  },
  {
    "text": "within the container that includes any possible or serializable that lived in",
    "start": "156660",
    "end": "161760"
  },
  {
    "text": "the sub containers let's take a look at this example at the bottom so starting the read procedure first it",
    "start": "161760",
    "end": "168599"
  },
  {
    "text": "will visualize you know the string ABC the integer one two three the possible P1 then it will visualize the list L1",
    "start": "168599",
    "end": "176400"
  },
  {
    "text": "list L1 is a possible container I mentioned before and next in turn are whatever within",
    "start": "176400",
    "end": "183180"
  },
  {
    "text": "list L1 it is string XYZ integer three two one Etc what's more list L1 can also",
    "start": "183180",
    "end": "190379"
  },
  {
    "text": "embed other containers in this example we have the map M1 that will also be",
    "start": "190379",
    "end": "195920"
  },
  {
    "text": "deserialized So eventually every entry in this diagram gets deserialized",
    "start": "195920",
    "end": "202379"
  },
  {
    "text": "now what can go wrong in Puzzles now let's take a look at this code snippet it's less than 10 lines of code but it",
    "start": "202379",
    "end": "209819"
  },
  {
    "text": "actually contains an inconspicuous and impactful mistake that could result in a",
    "start": "209819",
    "end": "216000"
  },
  {
    "text": "Possible's right mismatches with its read when integer F1 is less or equal than",
    "start": "216000",
    "end": "222420"
  },
  {
    "text": "zero the if clause on the right hand side in the red box will be no opt no",
    "start": "222420",
    "end": "227700"
  },
  {
    "text": "read write array will be invoked this one simple mismatch would actually",
    "start": "227700",
    "end": "233220"
  },
  {
    "text": "snowball into a sequential Corruption of parcels read take a look at this following diagram when receiver reads",
    "start": "233220",
    "end": "240959"
  },
  {
    "text": "the First Data short will sequentially read all the following data from the wrong offset if there are no crashes or",
    "start": "240959",
    "end": "247440"
  },
  {
    "text": "exception happens next we will have Bernardo to explain the self-changing bundle technique",
    "start": "247440",
    "end": "253799"
  },
  {
    "text": "Bernardo thanks Hal",
    "start": "253799",
    "end": "260340"
  },
  {
    "text": "so the mismatch is that how we introduce can be leveraged into so-called self-changing bundles first bundle is a",
    "start": "260340",
    "end": "267780"
  },
  {
    "text": "serializable map over parcel self-changing bundle is a bundle whose content changes after round",
    "start": "267780",
    "end": "273720"
  },
  {
    "text": "officialization then visualization in this example here B is the original bundle we are serializing B then this",
    "start": "273720",
    "end": "281759"
  },
  {
    "text": "realizing it back and assigning to C simulating sending B over IPC",
    "start": "281759",
    "end": "287520"
  },
  {
    "text": "at the end if the content of B is logically different from the content of C we have a self-changing bundle",
    "start": "287520",
    "end": "295199"
  },
  {
    "text": "so before analyzing the actual exploits let's put the black hat on play the attacker and try to leverage this",
    "start": "295199",
    "end": "301500"
  },
  {
    "text": "mismatch into a self-changing bundle so looking at the vulnerable participle on the right we can see that we read an in",
    "start": "301500",
    "end": "308880"
  },
  {
    "text": "four bytes but we write along eight bytes this was actually one mistake that",
    "start": "308880",
    "end": "314040"
  },
  {
    "text": "we've seen in one of the reports the idea is to leverage this in the following IPC flow involving three",
    "start": "314040",
    "end": "320639"
  },
  {
    "text": "processes a b and c so first a sends the bundle X to b b inspects the bundle X at",
    "start": "320639",
    "end": "328500"
  },
  {
    "text": "the time of check and sends it to C finally C uses X at the time of use",
    "start": "328500",
    "end": "334979"
  },
  {
    "text": "so the challenge is to hide one item in the bundle from B that's going to be revealed to see that item is composed of",
    "start": "334979",
    "end": "342720"
  },
  {
    "text": "the key intent and the value 42 that happens in Android 12.",
    "start": "342720",
    "end": "348180"
  },
  {
    "text": "so this table represents the parcel content of the bundle the left side of the table represents",
    "start": "348180",
    "end": "354600"
  },
  {
    "text": "the data before the first visualization in b b dance realizes that data back",
    "start": "354600",
    "end": "360419"
  },
  {
    "text": "resulting on the right side of that table before the second visualization that happens in C",
    "start": "360419",
    "end": "368419"
  },
  {
    "text": "looking at the left side of the table we're going quickly through the structure we see that the three the first three rows there represents the",
    "start": "368460",
    "end": "375120"
  },
  {
    "text": "bundle header followed by the the key of the first item in yellow followed by the",
    "start": "375120",
    "end": "380639"
  },
  {
    "text": "value of the first item in blue and so forth so the first item of that bundle is the",
    "start": "380639",
    "end": "387479"
  },
  {
    "text": "vulnerable parcel we've seen before notice the zero at the end there we're going to read that zero but we're gonna",
    "start": "387479",
    "end": "394139"
  },
  {
    "text": "write two zeros because remember we are writing along while we read an INT",
    "start": "394139",
    "end": "399600"
  },
  {
    "text": "when reading the right side of that table at the second digitalization we're going",
    "start": "399600",
    "end": "405900"
  },
  {
    "text": "to stop reading the first element at the first zero there leaving the second zero as the beginning of the data for the",
    "start": "405900",
    "end": "412380"
  },
  {
    "text": "next item this will change the entire interpretation of the bundle from that point forward hence the red background",
    "start": "412380",
    "end": "419460"
  },
  {
    "text": "there so the trick to produce the self-changing",
    "start": "419460",
    "end": "425940"
  },
  {
    "text": "bundle is to choose values for X Y and Z such that content that's meaningful to",
    "start": "425940",
    "end": "431220"
  },
  {
    "text": "one digitalization is irrelevant and opaque to the other starting with the hidden element",
    "start": "431220",
    "end": "438500"
  },
  {
    "text": "that's meaningful to the second digitalization we hide that under a byte",
    "start": "438500",
    "end": "444180"
  },
  {
    "text": "array on the left so we choose Z to contain the length of that hidden element I'll leave X and Y as an",
    "start": "444180",
    "end": "451259"
  },
  {
    "text": "exercise to the reader this with Minor Details of media this is the final table of the exploit note at the bottom that",
    "start": "451259",
    "end": "459060"
  },
  {
    "text": "the hidden element is hidden under a byte array on the left but in turn the metadata of that byte array is also",
    "start": "459060",
    "end": "465960"
  },
  {
    "text": "hidden under another byte array but this time on the right I'll skip through the rest of the content",
    "start": "465960",
    "end": "472620"
  },
  {
    "text": "so finally putting all that into code I'll leave the code here as reference but that code is basically constructing",
    "start": "472620",
    "end": "479460"
  },
  {
    "text": "a parcel from the left side of the table from the previous slide at the bottom we",
    "start": "479460",
    "end": "484800"
  },
  {
    "text": "are destroyalizing that parcel into a bundle printing that bundle the bundle a then we are serializing it visualizing",
    "start": "484800",
    "end": "492240"
  },
  {
    "text": "it back to bundle B and then printing bundle B the output is shown on the right as we",
    "start": "492240",
    "end": "498240"
  },
  {
    "text": "can see the hidden element is only displayed in bundle B after the second digitalization while in bundle a we",
    "start": "498240",
    "end": "506039"
  },
  {
    "text": "can't see the hidden element I'll let how continue",
    "start": "506039",
    "end": "513000"
  },
  {
    "text": "thanks Bernardo um so the self-changing bundle technique described by Bernardo can actually turn",
    "start": "513000",
    "end": "518940"
  },
  {
    "text": "into a smart time of check time of use attack against Android's account adding you know Android has this workflow for",
    "start": "518940",
    "end": "525839"
  },
  {
    "text": "an app to add an account that can be simplified by this sequence diagram the",
    "start": "525839",
    "end": "530880"
  },
  {
    "text": "ad account workflow is actually a three-partis business including the application needs to add account and",
    "start": "530880",
    "end": "537120"
  },
  {
    "text": "account manager service and settings app are the one to fulfill the request of adding",
    "start": "537120",
    "end": "542459"
  },
  {
    "text": "the application can kick start and add account operation and implement the",
    "start": "542459",
    "end": "548100"
  },
  {
    "text": "actual ad account method providing a bundle containing information about how to add such account",
    "start": "548100",
    "end": "553980"
  },
  {
    "text": "the interesting part starts from Step number five where the app sends a bundle that is fully constructed by itself to a",
    "start": "553980",
    "end": "561480"
  },
  {
    "text": "complemented service in Step number six in the middle account manager service checks and intent entry within that",
    "start": "561480",
    "end": "568140"
  },
  {
    "text": "bundle and sends it to send that same bundle to settings settings app will not",
    "start": "568140",
    "end": "574080"
  },
  {
    "text": "do the check intent anymore it will just launch the key intent directly",
    "start": "574080",
    "end": "579899"
  },
  {
    "text": "well we saw a bundle came we checked the intent then we launched but this is a",
    "start": "579899",
    "end": "585120"
  },
  {
    "text": "classic time of check time of year scenario where the bundle checked in account manager service could be",
    "start": "585120",
    "end": "591120"
  },
  {
    "text": "different than the bundle visualized by settings due to the self-changing bundle technique described by Fernando earlier",
    "start": "591120",
    "end": "598740"
  },
  {
    "text": "and this eventually contributed to the exploit technique known as launch anywhere where the attacker can have the",
    "start": "598740",
    "end": "605640"
  },
  {
    "text": "privileged app in this case is settings settings app wrong with the shared system uid to launch arbitrary intents",
    "start": "605640",
    "end": "612600"
  },
  {
    "text": "and this can lead to serious problems including silent package installation which was not only used in our campaigns",
    "start": "612600",
    "end": "619560"
  },
  {
    "text": "in the past we will not cover the malware in this talk the launch anywhere exploit has been",
    "start": "619560",
    "end": "625140"
  },
  {
    "text": "very commonly used as a proof of concept impossible which one the impossible mismatched vulnerabilities we received",
    "start": "625140",
    "end": "631620"
  },
  {
    "text": "throughout the years now let's welcome Bernardo on the stage again to talk about how we mitigated",
    "start": "631620",
    "end": "636959"
  },
  {
    "text": "this type of exploit we learned many things from the bond of feng shui let's start with the mismatches we've been",
    "start": "636959",
    "end": "643860"
  },
  {
    "text": "fixing individual read write mismatches for years and will likely continue we should still fix those because",
    "start": "643860",
    "end": "650160"
  },
  {
    "text": "regardless of the other fixes we put in place they are still bugs and there could be other cold paths that leverage",
    "start": "650160",
    "end": "655500"
  },
  {
    "text": "them into exploits however the lesson that we learned there is that only fixing the mismatches simply doesn't",
    "start": "655500",
    "end": "662160"
  },
  {
    "text": "scale we have too many of them so the natural generalization of the figs would be to look into account",
    "start": "662160",
    "end": "668519"
  },
  {
    "text": "manager service which is the code path used by many of those exploits that Hal talked about",
    "start": "668519",
    "end": "674459"
  },
  {
    "text": "so borrowing house diagram from before and focusing between steps number six and seven after the time of check but",
    "start": "674459",
    "end": "681600"
  },
  {
    "text": "before the time of use in system server we're going to simulate",
    "start": "681600",
    "end": "686760"
  },
  {
    "text": "the IPC to settings by serializing and this realizing that bundle then we're",
    "start": "686760",
    "end": "692339"
  },
  {
    "text": "gonna check if the relevant item is the same before and after the simulation if it's not you're gonna fail and log I'm",
    "start": "692339",
    "end": "699540"
  },
  {
    "text": "going to leave the code here as reference now that's good but what about other code paths future code paths we can't",
    "start": "699540",
    "end": "706500"
  },
  {
    "text": "explain expect platform developers to proactively simulate digitalization and",
    "start": "706500",
    "end": "711540"
  },
  {
    "text": "be aware of this issue so we turn our attention to bundle what's wrong with bundle well the first",
    "start": "711540",
    "end": "717839"
  },
  {
    "text": "problem is that the bundle structure is implicitly defined by the items their payloads and the code that this realizes",
    "start": "717839",
    "end": "724320"
  },
  {
    "text": "them this is what allows the creation of the self-changing bundle the second problem is that the digitalization of",
    "start": "724320",
    "end": "730200"
  },
  {
    "text": "bundle is eager upon first retrieval we'll go over these in detail and see how we arrived at the lazy bundle",
    "start": "730200",
    "end": "738180"
  },
  {
    "text": "so the first um the first item there we've seen this when we explored the mismatch",
    "start": "738180",
    "end": "744540"
  },
  {
    "text": "um but let's revisit with a simpler example let's assume we're inserting two Parcels into that bundle P1 and P2 the",
    "start": "744540",
    "end": "752220"
  },
  {
    "text": "cylinder there represents the backing parcel of that bundle the left side represents the read the rights and the",
    "start": "752220",
    "end": "758399"
  },
  {
    "text": "right side represents the reads so after the header we insert the first",
    "start": "758399",
    "end": "763740"
  },
  {
    "text": "key then we insert the bytes of P1 then the second key then the bytes of P2 but",
    "start": "763740",
    "end": "769320"
  },
  {
    "text": "now assume there's a mismatch in the class of P1 such that it reads less than it writes now",
    "start": "769320",
    "end": "775980"
  },
  {
    "text": "at on the right side we read the first after the header we read the first key we read the bytes of P1 but now we we",
    "start": "775980",
    "end": "782820"
  },
  {
    "text": "read last bytes than before so when we start reading the second key we're going to start from the wrong offset and as",
    "start": "782820",
    "end": "790380"
  },
  {
    "text": "we've seen before this will change the entire interpretation of the bundle now this was caused because the boundaries",
    "start": "790380",
    "end": "796019"
  },
  {
    "text": "of the bundle or is the structure was defined by the payload and the code that",
    "start": "796019",
    "end": "801060"
  },
  {
    "text": "this realized it so how do we fix it the idea is to prevent the mismatch from one item to a",
    "start": "801060",
    "end": "808500"
  },
  {
    "text": "from affecting the other item to do that we're going to prefix each item with the number of bytes used",
    "start": "808500",
    "end": "815639"
  },
  {
    "text": "during its serialization so that during this realization we can skip over the",
    "start": "815639",
    "end": "820740"
  },
  {
    "text": "payload and start the read of the next item from the correct offset regardless",
    "start": "820740",
    "end": "826139"
  },
  {
    "text": "of how many bytes we would consume if we were to digitalize the previous item",
    "start": "826139",
    "end": "831959"
  },
  {
    "text": "conceptually this is equivalent to separating the section of each item in",
    "start": "831959",
    "end": "837240"
  },
  {
    "text": "the backing parcel as shown there so in that example even if we read less bytes",
    "start": "837240",
    "end": "842519"
  },
  {
    "text": "for P1 the read of P2 is not affected so the second item the initialization of",
    "start": "842519",
    "end": "849959"
  },
  {
    "text": "one first retrieval previously without blank prefix we'd need to read all the preceding items in",
    "start": "849959",
    "end": "856860"
  },
  {
    "text": "order to know the offset from which to start reading the current item that means that exceptions thrown during",
    "start": "856860",
    "end": "864240"
  },
  {
    "text": "the read of those preceding items would be thrown when pairing the current item",
    "start": "864240",
    "end": "870000"
  },
  {
    "text": "in that example there we have no way of knowing the offset from which to start reading P2 other than reading P1",
    "start": "870000",
    "end": "878880"
  },
  {
    "text": "now with length prefix we can skip those preceding items to figure out the",
    "start": "878880",
    "end": "884459"
  },
  {
    "text": "correct offset from which to start reading the current item that means that those exceptions that could be thrown",
    "start": "884459",
    "end": "890880"
  },
  {
    "text": "during the digitalization of those preceding items won't be thrown when the current item is queried anymore",
    "start": "890880",
    "end": "898519"
  },
  {
    "text": "this reduces system crashes which helps with DOs attacks and system stability",
    "start": "898860",
    "end": "904800"
  },
  {
    "text": "and the other nice obvious side effect of this is that we only read data when we need to this is why it's called the",
    "start": "904800",
    "end": "911760"
  },
  {
    "text": "lazy bundle now let's look under the hood and Android 12 and 13 and see how this is",
    "start": "911760",
    "end": "917940"
  },
  {
    "text": "implemented so the first thing to note is that bundle can be in one of two states in",
    "start": "917940",
    "end": "923100"
  },
  {
    "text": "the parcel form or in the map form in the parcel form bundle holds a reference to the backing parcel that contains the",
    "start": "923100",
    "end": "930360"
  },
  {
    "text": "data for the items in the map form bundle has a map from key to item",
    "start": "930360",
    "end": "936000"
  },
  {
    "text": "now focusing on the difference between Android 12 and Android to your team we see that in Android 12 whenever we query",
    "start": "936000",
    "end": "941880"
  },
  {
    "text": "any item from that bundle the entire bundle is digitalized and the items are",
    "start": "941880",
    "end": "947220"
  },
  {
    "text": "converted into live objects in contrast 2013 in Android 13 when we",
    "start": "947220",
    "end": "953820"
  },
  {
    "text": "query for example the first item only the first item is dclized the other items are held in the in the map as lazy",
    "start": "953820",
    "end": "961680"
  },
  {
    "text": "values lazy values are containers that hold the reference to the backing parcel",
    "start": "961680",
    "end": "967079"
  },
  {
    "text": "and have metadata necessary to visualize each item",
    "start": "967079",
    "end": "973160"
  },
  {
    "text": "so looking at this example we have a bundle with three items the first two are well behaving while the third item",
    "start": "973260",
    "end": "979380"
  },
  {
    "text": "crashes upon this realization so if you look at a code there that code",
    "start": "979380",
    "end": "984839"
  },
  {
    "text": "is retrieving the first item which is supposed to be a well-behaving item in Android 12 even if you're querying the",
    "start": "984839",
    "end": "991380"
  },
  {
    "text": "first item we're going to digitalize the entire bundle which is going to mean that we're gonna throw because the third item crashes in Android 13 that won't",
    "start": "991380",
    "end": "998880"
  },
  {
    "text": "happen anymore because we only destroy the first item the third item is held as a as a lazy value in that map",
    "start": "998880",
    "end": "1006820"
  },
  {
    "text": "and I'm gonna hand back to how thanks Bernardo for explaining how we",
    "start": "1007160",
    "end": "1012860"
  },
  {
    "text": "address the bundle feng shui type exports now among all the possible mismatch issues reported through vrp program",
    "start": "1012860",
    "end": "1019600"
  },
  {
    "text": "besides the majority of them actually use the POC within the bundle feng shui exploits we have received a brilliant",
    "start": "1019600",
    "end": "1026780"
  },
  {
    "text": "novel exploit chain of getting arbitrary code execution in privileged applications processes in 2021 just",
    "start": "1026780",
    "end": "1033319"
  },
  {
    "text": "slightly before Android 12's official release the vulnerability was reported and",
    "start": "1033319",
    "end": "1038780"
  },
  {
    "text": "pocified Mahal banaski who is one of our top security researchers participating",
    "start": "1038780",
    "end": "1044360"
  },
  {
    "text": "in the Android vrp program let's take a look at how it worked",
    "start": "1044360",
    "end": "1050000"
  },
  {
    "text": "to understand the exploit we first need to know some details about the Android inter-process communication scenario one",
    "start": "1050000",
    "end": "1056720"
  },
  {
    "text": "example of Android's IPC is that applications can send broadcasts to a",
    "start": "1056720",
    "end": "1062059"
  },
  {
    "text": "different application but what happens under the hood of the broadcast well it is actually another three-party business",
    "start": "1062059",
    "end": "1070640"
  },
  {
    "text": "including the application sends a broadcast system server resolves such broadcast and it will send to this",
    "start": "1070640",
    "end": "1076880"
  },
  {
    "text": "target application that actually implements the broadcast receiver it can be simplified by this sequence diagram",
    "start": "1076880",
    "end": "1084919"
  },
  {
    "text": "um pay attention to the middle section here the system server deserializes the intent that is received from the sender",
    "start": "1084919",
    "end": "1090980"
  },
  {
    "text": "app after resolving that It prepares another remote procedure called RPC called the schedule receiver with the",
    "start": "1090980",
    "end": "1098600"
  },
  {
    "text": "visualized intent parameter that is Center controllable followed by System server generated parameters including",
    "start": "1098600",
    "end": "1105860"
  },
  {
    "text": "activity info sorry among all the system server",
    "start": "1105860",
    "end": "1111440"
  },
  {
    "text": "prepared parameters the activity info is the most noteworthy one this parameter",
    "start": "1111440",
    "end": "1116660"
  },
  {
    "text": "actually has a source stir value that is supposed to point to the targeted applications app directory which is used",
    "start": "1116660",
    "end": "1123799"
  },
  {
    "text": "to create the target applications class loader so in short if an attacker can",
    "start": "1123799",
    "end": "1128900"
  },
  {
    "text": "tamper with the source dirt value within the activity info param the attacker would be able to have the target",
    "start": "1128900",
    "end": "1134780"
  },
  {
    "text": "application to load and execute arbitrary code in another word the",
    "start": "1134780",
    "end": "1139820"
  },
  {
    "text": "object code execution is all about controlling the activity info parameter and it all originated from this code",
    "start": "1139820",
    "end": "1147200"
  },
  {
    "text": "snippet it's less than it's around five lines of code it may look just like a classic try catch but the inconspicuous",
    "start": "1147200",
    "end": "1155299"
  },
  {
    "text": "problem here is that if there are any exception happens within the try clause uh what does the try Clause do the try",
    "start": "1155299",
    "end": "1162080"
  },
  {
    "text": "Clause is doing the digitalization work that is reading from the Apostle to reconstruct an object",
    "start": "1162080",
    "end": "1167900"
  },
  {
    "text": "now if any exception happens there it this would not crash because the exception is caught but the object the",
    "start": "1167900",
    "end": "1175100"
  },
  {
    "text": "output configuration objects read would abruptly stop right there",
    "start": "1175100",
    "end": "1180799"
  },
  {
    "text": "so this was the expanded code submit snippet for output configurations deserialization it does nothing fancy",
    "start": "1180799",
    "end": "1186919"
  },
  {
    "text": "it's fancy it just reads the object field sequentially note the last field in the snippet is called sensor pixel",
    "start": "1186919",
    "end": "1193700"
  },
  {
    "text": "modes used this Apostle container it's a list if we can trigger an exception in the",
    "start": "1193700",
    "end": "1200059"
  },
  {
    "text": "read list the read would stop right there leaving some left over data at the bottom",
    "start": "1200059",
    "end": "1206240"
  },
  {
    "text": "all right now let's start to put pieces together remember the activity info object is what the attacker goes for and",
    "start": "1206240",
    "end": "1213380"
  },
  {
    "text": "it is read right after the intent object and remember that intent is coming from the user input",
    "start": "1213380",
    "end": "1219860"
  },
  {
    "text": "in previous slides we had this idea of having something to read stop before consuming all the data and if we can",
    "start": "1219860",
    "end": "1226520"
  },
  {
    "text": "have the intense read stop earlier the victim app on the right hand side would read the following parameters starting",
    "start": "1226520",
    "end": "1233179"
  },
  {
    "text": "from the wrong offsite on wrong offset um yeah take a look at the right hand",
    "start": "1233179",
    "end": "1238220"
  },
  {
    "text": "side the activity info is read from the attacker control buffer if that happens",
    "start": "1238220",
    "end": "1243620"
  },
  {
    "text": "and that is how the arbitrary code execution worked out so as a recap system server prepares a",
    "start": "1243620",
    "end": "1251419"
  },
  {
    "text": "possible object for the schedule receiver RPC method with parameters as intent following by activity info when",
    "start": "1251419",
    "end": "1259700"
  },
  {
    "text": "victim app visualizes such parcel received from system server exception happens then intent stop",
    "start": "1259700",
    "end": "1266900"
  },
  {
    "text": "uh intense read stopped earlier remember exception is called digitalization continues the next parameter it reads is",
    "start": "1266900",
    "end": "1275299"
  },
  {
    "text": "active info but from the wrong offset starting in the leftover data section that is attacker controlled next thing",
    "start": "1275299",
    "end": "1282080"
  },
  {
    "text": "that happens is arbitrary code execution to develop such exploit there are two",
    "start": "1282080",
    "end": "1287780"
  },
  {
    "text": "prerequisites first the attacker needs to trigger Inception second the attack the hacker needs to embed the payload",
    "start": "1287780",
    "end": "1294020"
  },
  {
    "text": "which triggers the exception within the intent object for the first prerequisite the POC Mahal",
    "start": "1294020",
    "end": "1300320"
  },
  {
    "text": "banoski developed uses the class not found Exception by embedding a system server specific class",
    "start": "1300320",
    "end": "1307100"
  },
  {
    "text": "and for the second prerequisite building the POC within the intent object this is",
    "start": "1307100",
    "end": "1312679"
  },
  {
    "text": "only made possible by a change introduced in Android 12 which included an activity info field within clip data",
    "start": "1312679",
    "end": "1320840"
  },
  {
    "text": "clip data is another field from intent so this is roughly how the intent object",
    "start": "1320840",
    "end": "1327200"
  },
  {
    "text": "would look like in Android 12. within the intense object it contains a clip data field within clip data it contains",
    "start": "1327200",
    "end": "1334580"
  },
  {
    "text": "an activity info field within that it embedded an application info field that",
    "start": "1334580",
    "end": "1339740"
  },
  {
    "text": "invests a split dependency field well this all sounds complicated object in",
    "start": "1339740",
    "end": "1344840"
  },
  {
    "text": "object in object and object but what's important is that the split dependencies is a sports array and now if you",
    "start": "1344840",
    "end": "1352400"
  },
  {
    "text": "remember Sports array is one of the possible containers that can contain arbitrary typed data and they all get",
    "start": "1352400",
    "end": "1359360"
  },
  {
    "text": "visualized in the read we have to Omit a few details due to the",
    "start": "1359360",
    "end": "1365059"
  },
  {
    "text": "time constraint but the final PLC intent look like this a package manager exception bomb is embedded within the",
    "start": "1365059",
    "end": "1372860"
  },
  {
    "text": "payload that is nested within the split dependencies the password container we saw in the previous slides",
    "start": "1372860",
    "end": "1379400"
  },
  {
    "text": "so visualizing such intents within the victim applications process would trigger exception and exception is",
    "start": "1379400",
    "end": "1386480"
  },
  {
    "text": "called so this the read would stop right there when the victim app you know the target",
    "start": "1386480",
    "end": "1392419"
  },
  {
    "text": "application with the broadcast receiver reads this it reads the first red box as",
    "start": "1392419",
    "end": "1397700"
  },
  {
    "text": "the first param intent then it would reconstruct the second param the activity info from the wrong offset and",
    "start": "1397700",
    "end": "1404600"
  },
  {
    "text": "so on the POC eventually would leave some data in the end not red",
    "start": "1404600",
    "end": "1410539"
  },
  {
    "text": "more details about this POC can also be found at Mahal banaski's GitHub repository linked at the bottom",
    "start": "1410539",
    "end": "1417740"
  },
  {
    "text": "now let's welcome Bernardo again to talk about what we learned from this this exploit and how we fix the problems well",
    "start": "1417740",
    "end": "1424700"
  },
  {
    "text": "there are many things to unpack here how do we fix all that so first we start by applying the",
    "start": "1424700",
    "end": "1430520"
  },
  {
    "text": "targeted fixes so you fix the exceptions following we fixed the mismatch between the read list and the inter-ray and",
    "start": "1430520",
    "end": "1436580"
  },
  {
    "text": "remove the activity info from clip data from the internet but now let's try to generalize The",
    "start": "1436580",
    "end": "1442460"
  },
  {
    "text": "Fakes the first thing to notice here is that lazy bundle doesn't help because the new exploit doesn't involve bundle",
    "start": "1442460",
    "end": "1449720"
  },
  {
    "text": "so let's look into each exploit and see their differences and similarities so looking at the legend on the left side",
    "start": "1449720",
    "end": "1456080"
  },
  {
    "text": "here um a blue rectangle means trusted data a light red rectangle means untrusted data",
    "start": "1456080",
    "end": "1463340"
  },
  {
    "text": "a bright red rectangle means untrusted data that's assumed to be trusted and",
    "start": "1463340",
    "end": "1468620"
  },
  {
    "text": "that's the problem in both exploits and the yellow rectangle just means system server trusted process so in the bundle",
    "start": "1468620",
    "end": "1476000"
  },
  {
    "text": "feng shui we see that the bundle has always been attacker controlled however the system checks that bundle for",
    "start": "1476000",
    "end": "1482539"
  },
  {
    "text": "verification after the bundle passes that check it's considered to be trusted",
    "start": "1482539",
    "end": "1488120"
  },
  {
    "text": "but the problem is when we hand off that bundle to settings the mismatch inside the bundle is able",
    "start": "1488120",
    "end": "1495020"
  },
  {
    "text": "to change the bundle because it becomes a self-changing bundle now the data",
    "start": "1495020",
    "end": "1500419"
  },
  {
    "text": "changes and is untrusted but settings assumes that the data is trusted and that creates the problem here",
    "start": "1500419",
    "end": "1507200"
  },
  {
    "text": "in the novel exploit the parameter 0 has always been an attacker controlled and",
    "start": "1507200",
    "end": "1512840"
  },
  {
    "text": "assumed to be untrusted even in the app the problem is the parameter 1 originated from a trusted object inside",
    "start": "1512840",
    "end": "1520159"
  },
  {
    "text": "the system the problem is when that IPC happens and both parameters are put together the",
    "start": "1520159",
    "end": "1526940"
  },
  {
    "text": "mismatch in parameter 0 allows the attacker to taint parameter 1. so the",
    "start": "1526940",
    "end": "1532760"
  },
  {
    "text": "app assumed that parameter 1 was trusted but in fact the content changed so it's",
    "start": "1532760",
    "end": "1538220"
  },
  {
    "text": "untrusted now and that creates the problem there so despite the differences there are",
    "start": "1538220",
    "end": "1543860"
  },
  {
    "text": "some similarities here similarities the similarity is that a mismatch in one element affect the",
    "start": "1543860",
    "end": "1551900"
  },
  {
    "text": "next element and in bundle that happens across the bundle items in the novel",
    "start": "1551900",
    "end": "1557600"
  },
  {
    "text": "exploit that happens across IPC parameters so a natural idea would be to prefix the",
    "start": "1557600",
    "end": "1564200"
  },
  {
    "text": "length of IPC parameters or prefix the length of every parcel Bolt",
    "start": "1564200",
    "end": "1570260"
  },
  {
    "text": "and this is actually where we started before the lazy bundle so can we prefix every parcelable or IPC",
    "start": "1570260",
    "end": "1577159"
  },
  {
    "text": "parameter well in most binder apcs in Android that",
    "start": "1577159",
    "end": "1582799"
  },
  {
    "text": "involves a manually written IPC interface whose Java code is automatically generated for us",
    "start": "1582799",
    "end": "1589760"
  },
  {
    "text": "um the code inside that red rectangle there is responsible for serializing",
    "start": "1589760",
    "end": "1594820"
  },
  {
    "text": "industrializing in that case it's only digitalizing the parameters the IPC parameters of that interface according",
    "start": "1594820",
    "end": "1601279"
  },
  {
    "text": "to their types the mapping between type and code involved into their serialization in",
    "start": "1601279",
    "end": "1607880"
  },
  {
    "text": "digitalization can't be changed in a backwards compact way",
    "start": "1607880",
    "end": "1613640"
  },
  {
    "text": "the methods write to parcel and create from parcel are part of that mapping and",
    "start": "1613640",
    "end": "1619279"
  },
  {
    "text": "those methods are the methods designed to be overridden by possible implementations that means that we don't",
    "start": "1619279",
    "end": "1625640"
  },
  {
    "text": "have available hooks to prefix the length one solution out of this backward combat",
    "start": "1625640",
    "end": "1632779"
  },
  {
    "text": "problem would be to make this change obtain but making this change obtained would severely reduce its impact",
    "start": "1632779",
    "end": "1639380"
  },
  {
    "text": "and on top of that their performance considerations into prefixing every possible nipc parameters across the",
    "start": "1639380",
    "end": "1647240"
  },
  {
    "text": "entire platform so because of that this fix is not feasible in practice",
    "start": "1647240",
    "end": "1653659"
  },
  {
    "text": "so we turn our attention to validation across domain specific code and infrastructure code we weren't doing",
    "start": "1653659",
    "end": "1660500"
  },
  {
    "text": "enough validation for example in domain specific parcelables often the create",
    "start": "1660500",
    "end": "1667279"
  },
  {
    "text": "from parcel method assume that the data was produced by the rights of parcel method but that's not necessarily true",
    "start": "1667279",
    "end": "1674360"
  },
  {
    "text": "incoming data should be considered untrusted and properly validated",
    "start": "1674360",
    "end": "1679880"
  },
  {
    "text": "and an infrastructure code we were missing stuff too for example let's look at the parcel",
    "start": "1679880",
    "end": "1686000"
  },
  {
    "text": "class remember when Hal talked about the arbitrary decilization parcel container I'm bringing here an excerpt of a piece",
    "start": "1686000",
    "end": "1694220"
  },
  {
    "text": "of code from the Nova exploit even if the caller expects the list of a",
    "start": "1694220",
    "end": "1700640"
  },
  {
    "text": "certain item type nothing prevents items of another type from being visualized",
    "start": "1700640",
    "end": "1706640"
  },
  {
    "text": "out of that list in the first example there in application info which I wrote with three p's there",
    "start": "1706640",
    "end": "1713240"
  },
  {
    "text": "should be only two the split dependencies field is a sparse array of interrays but the attacker is able to",
    "start": "1713240",
    "end": "1719480"
  },
  {
    "text": "insert a Zen policy item there looking at that in more detail the first",
    "start": "1719480",
    "end": "1725360"
  },
  {
    "text": "item there in the first sorry in the first line of code we happily digitalize in policy as an item but we know that",
    "start": "1725360",
    "end": "1732080"
  },
  {
    "text": "split dependency in Split dependencies only holds into arrays in the worst case",
    "start": "1732080",
    "end": "1738020"
  },
  {
    "text": "this enables attacks like this cve but even in the best case the no malicious case this will likely cause exceptions",
    "start": "1738020",
    "end": "1743900"
  },
  {
    "text": "later on when the code assumes to be dealing with interface it's likely it's likely going to throw Class cast",
    "start": "1743900",
    "end": "1750200"
  },
  {
    "text": "exceptions or other Pro create other problems so the idea is to validate the type that",
    "start": "1750200",
    "end": "1756559"
  },
  {
    "text": "we are about to digitalize make sure that that type is expected by the caller",
    "start": "1756559",
    "end": "1763159"
  },
  {
    "text": "so due to Java generics type Erasure we",
    "start": "1763159",
    "end": "1768200"
  },
  {
    "text": "introduce wholesale replacements for across parcel bundling intent apis the new apis take an extra class parameter",
    "start": "1768200",
    "end": "1775640"
  },
  {
    "text": "that represents the type we're going to use that class parameter to validate the type that we are about to digitalize is",
    "start": "1775640",
    "end": "1782240"
  },
  {
    "text": "expected by the caller and we deprecated the old apis",
    "start": "1782240",
    "end": "1787640"
  },
  {
    "text": "now we need to migrate a good chunk of code in the platform in order to benefit",
    "start": "1787640",
    "end": "1792740"
  },
  {
    "text": "from those new apis and protect the platform so how do we migrate almost 700 call sites well for",
    "start": "1792740",
    "end": "1800059"
  },
  {
    "text": "each call site you need to infer this static type by surrounding code then replace the call with the calls the new",
    "start": "1800059",
    "end": "1806720"
  },
  {
    "text": "API with the added class parameter in order to do that at scale without",
    "start": "1806720",
    "end": "1812720"
  },
  {
    "text": "menu intervention we leverage Android lint we wrote a checker and after moving",
    "start": "1812720",
    "end": "1817760"
  },
  {
    "text": "some files around we were able to migrate close to 700 call sites reducing the attack surface of vulnerable",
    "start": "1817760",
    "end": "1824120"
  },
  {
    "text": "possibles in the platform that's good the other check the other",
    "start": "1824120",
    "end": "1830360"
  },
  {
    "text": "change that we implemented in infrastructure code is the parcel and the file check in IPC interfaces as we",
    "start": "1830360",
    "end": "1838159"
  },
  {
    "text": "can see as you saw before we can't enforce boundaries in IPC parameters but there is one relatively cheap fix that",
    "start": "1838159",
    "end": "1845120"
  },
  {
    "text": "we can do and that is to verify that the parcel was fully consumed after",
    "start": "1845120",
    "end": "1850880"
  },
  {
    "text": "unpacking IPC parameters before calling into the IPC method this is not a strong",
    "start": "1850880",
    "end": "1856700"
  },
  {
    "text": "mitigation because depending on the cold path the attacker could craft a parcel",
    "start": "1856700",
    "end": "1862520"
  },
  {
    "text": "that seeks to the end of the data after unpacking parameters but this is a cheap check it's a correctness check and",
    "start": "1862520",
    "end": "1869539"
  },
  {
    "text": "depending on the code path that could be helpful and this also uncovers mismatch",
    "start": "1869539",
    "end": "1874700"
  },
  {
    "text": "and security issues along with non-security bugs as well as we've seen during the development of Android 13.",
    "start": "1874700",
    "end": "1883279"
  },
  {
    "text": "so borrowing house diagram again looking at the right cylinder which is in the",
    "start": "1883279",
    "end": "1888980"
  },
  {
    "text": "attack scenario we can see that if we finish unpacking parameters at the red",
    "start": "1888980",
    "end": "1894740"
  },
  {
    "text": "line there but to leave leftover data the idea is to check that there's no",
    "start": "1894740",
    "end": "1899899"
  },
  {
    "text": "leftover data there so this is a Java generated code from",
    "start": "1899899",
    "end": "1905720"
  },
  {
    "text": "that IPC interface um the code inside the red rectangle is unpacking the parameters on the incoming",
    "start": "1905720",
    "end": "1912559"
  },
  {
    "text": "parcel right after that code we're calling enforce no data Avail that's the",
    "start": "1912559",
    "end": "1917960"
  },
  {
    "text": "euf check we're talking about so looking at the diagram on the right there the cylinder on the left",
    "start": "1917960",
    "end": "1924080"
  },
  {
    "text": "ends after unpacking parameters so that passes the check while the cylinder on",
    "start": "1924080",
    "end": "1930200"
  },
  {
    "text": "the right still has leftover data after unpacking parameters so in that case we throw so it's worth noting here that we",
    "start": "1930200",
    "end": "1937220"
  },
  {
    "text": "are throwing more than before with this change and when we talked about lazy bundle we said that we reduce system",
    "start": "1937220",
    "end": "1942740"
  },
  {
    "text": "crashes because those helped the reducing system crashes help with DRS attacks the difference here is",
    "start": "1942740",
    "end": "1950120"
  },
  {
    "text": "that leftover data in the parcel is indicative of either an attack or corrupt data both of which are worse",
    "start": "1950120",
    "end": "1958399"
  },
  {
    "text": "than failing early and crashing early so the last mitigation we put in place",
    "start": "1958399",
    "end": "1964820"
  },
  {
    "text": "was mismatch detection at runtime and we leveraged the lazy bundle to do that since now we have the link prefix to be",
    "start": "1964820",
    "end": "1971179"
  },
  {
    "text": "able to check so to recap we apply the targeted fixes",
    "start": "1971179",
    "end": "1976279"
  },
  {
    "text": "we looked at validation domain specific code and infrastructure code we introduce wholesale replacements for",
    "start": "1976279",
    "end": "1982580"
  },
  {
    "text": "across parcel boundary and intent apis that take an extra class parameter migrated a good chunk of the platform we",
    "start": "1982580",
    "end": "1989539"
  },
  {
    "text": "introduced the parceland of file check and IPC interfaces and we implemented mismatch detection at runtime",
    "start": "1989539",
    "end": "1996799"
  },
  {
    "text": "now Yang's gonna talk about vrp uh thank you Bernardo thank you before",
    "start": "1996799",
    "end": "2003399"
  },
  {
    "text": "we conclude this talk let's look at the history of personal mismatch where the problem started and how creative has",
    "start": "2003399",
    "end": "2010659"
  },
  {
    "text": "been from the ecosystem perspective the first report on parcel mismatch was",
    "start": "2010659",
    "end": "2015940"
  },
  {
    "text": "received by Google back in September 2014. and it was before the Android",
    "start": "2015940",
    "end": "2021519"
  },
  {
    "text": "vulnerability reward program was established his first it was reported by",
    "start": "2021519",
    "end": "2027100"
  },
  {
    "text": "mihal badenowski and his first report already contains the bangle feng shui",
    "start": "2027100",
    "end": "2032260"
  },
  {
    "text": "how entrepreneur explained earlier in 2016 the Android viability reward",
    "start": "2032260",
    "end": "2038620"
  },
  {
    "text": "program established since then more than 28 exploitable parcel mismatch was",
    "start": "2038620",
    "end": "2044140"
  },
  {
    "text": "reported to the program was reported to the program five years",
    "start": "2044140",
    "end": "2049839"
  },
  {
    "text": "later now we still seeing report in this area and in fact this year we have a six",
    "start": "2049839",
    "end": "2056800"
  },
  {
    "text": "exploitable parcel mismatch hopefully the safe password work will put an end unless a eight-year long long",
    "start": "2056800",
    "end": "2066280"
  },
  {
    "text": "lived exploitation by making the parcel and bundle serialization safer",
    "start": "2066280",
    "end": "2072158"
  },
  {
    "text": "please also note process mismatch is not theoretical concern just like how",
    "start": "2072159",
    "end": "2077740"
  },
  {
    "text": "mentioned earlier we have seen some vulnerability was built in the malware the malware can certainly to update your",
    "start": "2077740",
    "end": "2085000"
  },
  {
    "text": "update package without any interaction",
    "start": "2085000",
    "end": "2089520"
  },
  {
    "text": "Eternal research report are one of the input to Android vulnerability queue we",
    "start": "2092619",
    "end": "2098200"
  },
  {
    "text": "also have other findings as you see on the chart on the left through the writing engagement continuous fasting",
    "start": "2098200",
    "end": "2104619"
  },
  {
    "text": "and automation Etc we triage thousands of reports each year we provide security",
    "start": "2104619",
    "end": "2110980"
  },
  {
    "text": "reading that are taking into account the consequence of the exploit and real user",
    "start": "2110980",
    "end": "2116619"
  },
  {
    "text": "risk based on what severity reading all the",
    "start": "2116619",
    "end": "2122140"
  },
  {
    "text": "exploitable person mismatch has been readed as a high because of because it's",
    "start": "2122140",
    "end": "2128020"
  },
  {
    "text": "allowed to launch arbitrary activity as a system user system user with UI",
    "start": "2128020",
    "end": "2133359"
  },
  {
    "text": "demands out that is about the most privileged user on the platform it could be used to install the arbitrary package",
    "start": "2133359",
    "end": "2139720"
  },
  {
    "text": "or reset the lock screen password Etc",
    "start": "2139720",
    "end": "2144540"
  },
  {
    "text": "so as many of you know are probably contribute the Android operator",
    "start": "2144880",
    "end": "2150820"
  },
  {
    "text": "evaluated reward program on top of that we also have four exploitation reward",
    "start": "2150820",
    "end": "2156220"
  },
  {
    "text": "program me house amazing work on novel exploration was qualified into the",
    "start": "2156220",
    "end": "2161380"
  },
  {
    "text": "arbitrary code execution in the privilege process the reward amount can up to a hundred thousand US dollars that",
    "start": "2161380",
    "end": "2169240"
  },
  {
    "text": "amount may be adjusted based on the initial attack Vector reliability of attack the attack is the only targeting",
    "start": "2169240",
    "end": "2176380"
  },
  {
    "text": "to the specific view of across the whole ecosystem",
    "start": "2176380",
    "end": "2181740"
  },
  {
    "text": "so I also want to take this opportunity to give you a peek behind the curtain",
    "start": "2182619",
    "end": "2187660"
  },
  {
    "text": "how vulnerability like a person which might make his way from the researcher right up to the security updated Android",
    "start": "2187660",
    "end": "2194200"
  },
  {
    "text": "device once you receive the report we first go through the reproduction process where",
    "start": "2194200",
    "end": "2200200"
  },
  {
    "text": "we want to validate the proof of concept code is provided we produce the same as research reported we want to make sure",
    "start": "2200200",
    "end": "2207640"
  },
  {
    "text": "when we do the security analysis we see the same things as researcher is foreign",
    "start": "2207640",
    "end": "2214740"
  },
  {
    "text": "activity as system user once the reproductions are done Android",
    "start": "2216660",
    "end": "2221800"
  },
  {
    "text": "security engineer will analyze a write-up and the reason recollection log and click any necessary information to",
    "start": "2221800",
    "end": "2229480"
  },
  {
    "text": "determine the severity reading whether it's a critical High moderate low",
    "start": "2229480",
    "end": "2234700"
  },
  {
    "text": "another security issue that we including the security update once the fixed the severity reading",
    "start": "2234700",
    "end": "2242380"
  },
  {
    "text": "according to determines research reward amount and also the uh and also how we",
    "start": "2242380",
    "end": "2247960"
  },
  {
    "text": "prioritize the fixed and release once the fix is developed and we could",
    "start": "2247960",
    "end": "2253780"
  },
  {
    "text": "we need to make sure the fix going to be shipped to all the Android partner Cloud",
    "start": "2253780",
    "end": "2259119"
  },
  {
    "text": "ecosystem High severity back like a parcel mismatch will be shipped in the next",
    "start": "2259119",
    "end": "2266140"
  },
  {
    "text": "available security bulletin we release the security bulletin once a month with a collection of security patches of the",
    "start": "2266140",
    "end": "2273940"
  },
  {
    "text": "Android OEM will take and ship to their user so during the triage process if we",
    "start": "2273940",
    "end": "2280119"
  },
  {
    "text": "identify the issue is potential exploitable we'll work closely with the malware team see whether we can create",
    "start": "2280119",
    "end": "2286900"
  },
  {
    "text": "some detection on the Play Store in parallel to the back fix and also in addition to do the target",
    "start": "2286900",
    "end": "2294520"
  },
  {
    "text": "effects as the venerative report it is we also look at the nature of the issue and the trend of the report uh try to",
    "start": "2294520",
    "end": "2301900"
  },
  {
    "text": "identify any systematic way to improve Android security such as through the API",
    "start": "2301900",
    "end": "2307839"
  },
  {
    "text": "hardening system mitigation with the target fighting Target like even Loop",
    "start": "2307839",
    "end": "2313420"
  },
  {
    "text": "into the writing to do like a in-depth review of the critical software component",
    "start": "2313420",
    "end": "2320920"
  },
  {
    "text": "so by reporting your vulnerability our exploitation to our program you not only",
    "start": "2320920",
    "end": "2326320"
  },
  {
    "text": "help protect the whole Android ecosystem make some money and get cve you also",
    "start": "2326320",
    "end": "2332560"
  },
  {
    "text": "have a chance opportunity to influence the direction of the Android security so",
    "start": "2332560",
    "end": "2337900"
  },
  {
    "text": "please join our program and have feedback hunting thank you I think we only have 10",
    "start": "2337900",
    "end": "2343780"
  },
  {
    "text": "seconds okay so we'll off we'll answer the question offline we'll be here",
    "start": "2343780",
    "end": "2350560"
  },
  {
    "text": "thank you thank you everyone [Applause] [Music]",
    "start": "2350560",
    "end": "2358530"
  },
  {
    "text": "[Music]",
    "start": "2362380",
    "end": "2365479"
  }
]