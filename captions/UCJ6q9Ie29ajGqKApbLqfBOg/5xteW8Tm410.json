[
  {
    "text": "good morning or hi good afternoon rather",
    "start": "2340",
    "end": "4560"
  },
  {
    "text": "uh welcome to my talk uh PPL dump is PPL",
    "start": "4560",
    "end": "8160"
  },
  {
    "text": "dump is dead Long Live PPL dump I'm Gabe",
    "start": "8160",
    "end": "11580"
  },
  {
    "text": "Landau I'm a principal at elastic uh you",
    "start": "11580",
    "end": "13799"
  },
  {
    "text": "may know me for my work on process",
    "start": "13799",
    "end": "15120"
  },
  {
    "text": "ghosting anti-malware sandboxing and my",
    "start": "15120",
    "end": "17820"
  },
  {
    "text": "black hat talk about kernel mode threats",
    "start": "17820",
    "end": "19320"
  },
  {
    "text": "and practical defenses or my recent",
    "start": "19320",
    "end": "21060"
  },
  {
    "text": "smoocon talk on mitigating physical",
    "start": "21060",
    "end": "22500"
  },
  {
    "text": "memory credential dumping attacks well I",
    "start": "22500",
    "end": "24960"
  },
  {
    "text": "used to wear red these days I wear blue",
    "start": "24960",
    "end": "28740"
  },
  {
    "text": "we're going to start with background on",
    "start": "28740",
    "end": "30359"
  },
  {
    "text": "protected processes then cover a variety",
    "start": "30359",
    "end": "32520"
  },
  {
    "text": "of historical and current attacks then",
    "start": "32520",
    "end": "34620"
  },
  {
    "text": "move on to novel research that I've done",
    "start": "34620",
    "end": "37559"
  },
  {
    "text": "so protected processes were introduced",
    "start": "37559",
    "end": "39360"
  },
  {
    "text": "in Windows 8 likely to address demands",
    "start": "39360",
    "end": "41640"
  },
  {
    "text": "of the content industry for things like",
    "start": "41640",
    "end": "43320"
  },
  {
    "text": "Blu-ray playback protected processes are",
    "start": "43320",
    "end": "45960"
  },
  {
    "text": "hardened against dumping and tampering",
    "start": "45960",
    "end": "47760"
  },
  {
    "text": "they'll only load specifically signed",
    "start": "47760",
    "end": "49620"
  },
  {
    "text": "executable images which are exes and",
    "start": "49620",
    "end": "52020"
  },
  {
    "text": "dlls",
    "start": "52020",
    "end": "53460"
  },
  {
    "text": "this mechanism also protects the system",
    "start": "53460",
    "end": "55440"
  },
  {
    "text": "and registry processes on many modern",
    "start": "55440",
    "end": "57800"
  },
  {
    "text": "windows from tampering",
    "start": "57800",
    "end": "61140"
  },
  {
    "text": "so protected process light or PPL are an",
    "start": "61140",
    "end": "63660"
  },
  {
    "text": "extension of the protected process",
    "start": "63660",
    "end": "65158"
  },
  {
    "text": "mechanism designed to broaden the",
    "start": "65159",
    "end": "66900"
  },
  {
    "text": "umbrella of things that can be protected",
    "start": "66900",
    "end": "68280"
  },
  {
    "text": "they have lower security but better",
    "start": "68280",
    "end": "70080"
  },
  {
    "text": "performance PPL have similar tamper",
    "start": "70080",
    "end": "72659"
  },
  {
    "text": "protections as protected processes the",
    "start": "72659",
    "end": "75119"
  },
  {
    "text": "PPL mechanism protects core Windows",
    "start": "75119",
    "end": "76860"
  },
  {
    "text": "internals such as the client server",
    "start": "76860",
    "end": "78600"
  },
  {
    "text": "runtime subsystem or csrss",
    "start": "78600",
    "end": "81360"
  },
  {
    "text": "the local security Authority subsystem",
    "start": "81360",
    "end": "83280"
  },
  {
    "text": "or lsas",
    "start": "83280",
    "end": "84840"
  },
  {
    "text": "the service control manager or",
    "start": "84840",
    "end": "86520"
  },
  {
    "text": "services.exe",
    "start": "86520",
    "end": "89100"
  },
  {
    "text": "the PPL mechanism also protects your",
    "start": "89100",
    "end": "91020"
  },
  {
    "text": "antivirus preventing malware from",
    "start": "91020",
    "end": "92820"
  },
  {
    "text": "instantly terminating it and then",
    "start": "92820",
    "end": "94080"
  },
  {
    "text": "running a muck on your system the rest",
    "start": "94080",
    "end": "96000"
  },
  {
    "text": "of this talk is going to be focusing on",
    "start": "96000",
    "end": "97380"
  },
  {
    "text": "PPL",
    "start": "97380",
    "end": "99798"
  },
  {
    "text": "so Windows tracks process protection",
    "start": "100140",
    "end": "101759"
  },
  {
    "text": "within the e-process kernel structure",
    "start": "101759",
    "end": "103500"
  },
  {
    "text": "via two key Fields the type and the",
    "start": "103500",
    "end": "105600"
  },
  {
    "text": "signer type can be either none meaning",
    "start": "105600",
    "end": "108119"
  },
  {
    "text": "it's not a protected process",
    "start": "108119",
    "end": "110119"
  },
  {
    "text": "full or light lights being PPL",
    "start": "110119",
    "end": "114960"
  },
  {
    "text": "signers are somewhat hierarchical and",
    "start": "114960",
    "end": "116820"
  },
  {
    "text": "shown here on the right generally higher",
    "start": "116820",
    "end": "119579"
  },
  {
    "text": "level signers are protected against",
    "start": "119579",
    "end": "120780"
  },
  {
    "text": "access from lower level signers the most",
    "start": "120780",
    "end": "123360"
  },
  {
    "text": "trusted level is known as win TCB which",
    "start": "123360",
    "end": "125640"
  },
  {
    "text": "stands for trusted Computing base",
    "start": "125640",
    "end": "127280"
  },
  {
    "text": "followed by Windows below them lie LSA",
    "start": "127280",
    "end": "130920"
  },
  {
    "text": "anti-malware",
    "start": "130920",
    "end": "132780"
  },
  {
    "text": "and code gen as peers which are isolated",
    "start": "132780",
    "end": "134879"
  },
  {
    "text": "from each other",
    "start": "134879",
    "end": "135900"
  },
  {
    "text": "note that this is a simplified diagram",
    "start": "135900",
    "end": "137760"
  },
  {
    "text": "and omits details that are not relevant",
    "start": "137760",
    "end": "139680"
  },
  {
    "text": "to this talk",
    "start": "139680",
    "end": "142219"
  },
  {
    "text": "Windows determines whether a process can",
    "start": "142260",
    "end": "144000"
  },
  {
    "text": "run as PPL and at what level via the",
    "start": "144000",
    "end": "146700"
  },
  {
    "text": "signature on its executable",
    "start": "146700",
    "end": "148940"
  },
  {
    "text": "images that can run as PPL are signed",
    "start": "148940",
    "end": "151620"
  },
  {
    "text": "with different certificates which",
    "start": "151620",
    "end": "152640"
  },
  {
    "text": "contain object identifiers indicating",
    "start": "152640",
    "end": "154500"
  },
  {
    "text": "protection type and signer",
    "start": "154500",
    "end": "156660"
  },
  {
    "text": "on the left here you can see the system",
    "start": "156660",
    "end": "158400"
  },
  {
    "text": "guard runtime broker executable which",
    "start": "158400",
    "end": "160500"
  },
  {
    "text": "can run as win TCB full",
    "start": "160500",
    "end": "162420"
  },
  {
    "text": "in the middle you can see service host",
    "start": "162420",
    "end": "164220"
  },
  {
    "text": "which can run as Windows Lite and on the",
    "start": "164220",
    "end": "166800"
  },
  {
    "text": "right you can see csrss which can run as",
    "start": "166800",
    "end": "169319"
  },
  {
    "text": "wind TCB light",
    "start": "169319",
    "end": "171720"
  },
  {
    "text": "in addition to the type and signer",
    "start": "171720",
    "end": "173400"
  },
  {
    "text": "Windows sets a minimum signature level",
    "start": "173400",
    "end": "175260"
  },
  {
    "text": "in the e-process structure restricting",
    "start": "175260",
    "end": "177360"
  },
  {
    "text": "dlls that the process is allowed to load",
    "start": "177360",
    "end": "179879"
  },
  {
    "text": "for the type column two means full",
    "start": "179879",
    "end": "183000"
  },
  {
    "text": "one is light",
    "start": "183000",
    "end": "184739"
  },
  {
    "text": "sine or six means wind TCB third from",
    "start": "184739",
    "end": "187620"
  },
  {
    "text": "the bottom here you can see the elastic",
    "start": "187620",
    "end": "189420"
  },
  {
    "text": "endpoint with a signer level of 3 which",
    "start": "189420",
    "end": "191280"
  },
  {
    "text": "stands for anti-malware",
    "start": "191280",
    "end": "192959"
  },
  {
    "text": "this signature level requirement",
    "start": "192959",
    "end": "194340"
  },
  {
    "text": "prevents dll side loading attacks into",
    "start": "194340",
    "end": "196140"
  },
  {
    "text": "protected processes",
    "start": "196140",
    "end": "198540"
  },
  {
    "text": "PPL are protected against process and",
    "start": "198540",
    "end": "200519"
  },
  {
    "text": "thread level attacks by restricting the",
    "start": "200519",
    "end": "202080"
  },
  {
    "text": "rights that are granted via apis like",
    "start": "202080",
    "end": "203819"
  },
  {
    "text": "open process and open thread",
    "start": "203819",
    "end": "206580"
  },
  {
    "text": "for example you can't get process",
    "start": "206580",
    "end": "208319"
  },
  {
    "text": "terminate to kill your antivirus you",
    "start": "208319",
    "end": "210599"
  },
  {
    "text": "can't get process VM read to dump lsas",
    "start": "210599",
    "end": "212819"
  },
  {
    "text": "you can't get process dupe handle to",
    "start": "212819",
    "end": "215459"
  },
  {
    "text": "steal handles from csrss there's no",
    "start": "215459",
    "end": "217860"
  },
  {
    "text": "exceptions for SC debug privilege",
    "start": "217860",
    "end": "220440"
  },
  {
    "text": "in order to keep windows functional",
    "start": "220440",
    "end": "222000"
  },
  {
    "text": "Microsoft created new access rights to",
    "start": "222000",
    "end": "224099"
  },
  {
    "text": "allow limited interaction with protected",
    "start": "224099",
    "end": "225780"
  },
  {
    "text": "processes such as process query limited",
    "start": "225780",
    "end": "228180"
  },
  {
    "text": "information",
    "start": "228180",
    "end": "229980"
  },
  {
    "text": "here's a quick example where we can see",
    "start": "229980",
    "end": "231840"
  },
  {
    "text": "the system user running with the system",
    "start": "231840",
    "end": "233879"
  },
  {
    "text": "as system Integrity they have the",
    "start": "233879",
    "end": "235980"
  },
  {
    "text": "trusted installer group in their token",
    "start": "235980",
    "end": "237659"
  },
  {
    "text": "and SC debug privilege is enabled this",
    "start": "237659",
    "end": "240239"
  },
  {
    "text": "is a very privileged token on Windows",
    "start": "240239",
    "end": "242040"
  },
  {
    "text": "and yet they still cannot get access to",
    "start": "242040",
    "end": "244620"
  },
  {
    "text": "services.exe they cannot get a full",
    "start": "244620",
    "end": "246360"
  },
  {
    "text": "handle for Lexus handle the same request",
    "start": "246360",
    "end": "248760"
  },
  {
    "text": "succeeds if we drop that requested",
    "start": "248760",
    "end": "250379"
  },
  {
    "text": "access to only process query limited",
    "start": "250379",
    "end": "252120"
  },
  {
    "text": "information",
    "start": "252120",
    "end": "254280"
  },
  {
    "text": "the tokens and protected processes",
    "start": "254280",
    "end": "255900"
  },
  {
    "text": "include an attribute called a trust",
    "start": "255900",
    "end": "257459"
  },
  {
    "text": "level here we can see explorer.exe has",
    "start": "257459",
    "end": "259919"
  },
  {
    "text": "no trust level set yet services.exe",
    "start": "259919",
    "end": "263280"
  },
  {
    "text": "has a win TCB Lite trust level",
    "start": "263280",
    "end": "266220"
  },
  {
    "text": "trust levels are checked against",
    "start": "266220",
    "end": "268919"
  },
  {
    "text": "trust labels trust labels are system",
    "start": "268919",
    "end": "271380"
  },
  {
    "text": "Access Control list component which",
    "start": "271380",
    "end": "274139"
  },
  {
    "text": "allows trust level to be tested during",
    "start": "274139",
    "end": "275940"
  },
  {
    "text": "any access check for example the known",
    "start": "275940",
    "end": "278220"
  },
  {
    "text": "dlls cache is protected by a win TCB",
    "start": "278220",
    "end": "281280"
  },
  {
    "text": "light trust label preventing",
    "start": "281280",
    "end": "282840"
  },
  {
    "text": "modification even by malicious",
    "start": "282840",
    "end": "284699"
  },
  {
    "text": "administrators",
    "start": "284699",
    "end": "285900"
  },
  {
    "text": "another example in response to my work",
    "start": "285900",
    "end": "287880"
  },
  {
    "text": "last year demonstrating how anti-malware",
    "start": "287880",
    "end": "289680"
  },
  {
    "text": "processes can be forcefully sandboxed by",
    "start": "289680",
    "end": "291900"
  },
  {
    "text": "malicious administrators Microsoft added",
    "start": "291900",
    "end": "294479"
  },
  {
    "text": "trust labels to the tokens of protected",
    "start": "294479",
    "end": "296280"
  },
  {
    "text": "processes",
    "start": "296280",
    "end": "298620"
  },
  {
    "text": "now let's talk about some historical",
    "start": "298620",
    "end": "300120"
  },
  {
    "text": "attacks there's a lot to cover here and",
    "start": "300120",
    "end": "301860"
  },
  {
    "text": "not a lot of time so I'm going to be",
    "start": "301860",
    "end": "303060"
  },
  {
    "text": "moving quickly most of this is prior art",
    "start": "303060",
    "end": "305100"
  },
  {
    "text": "from a talk by Alex aionescu and James",
    "start": "305100",
    "end": "307020"
  },
  {
    "text": "Forshaw titled Unknown Known dlls and",
    "start": "307020",
    "end": "309000"
  },
  {
    "text": "other code Integrity trust violations",
    "start": "309000",
    "end": "310500"
  },
  {
    "text": "you'll see citations at the bottom of",
    "start": "310500",
    "end": "312180"
  },
  {
    "text": "every slide",
    "start": "312180",
    "end": "314160"
  },
  {
    "text": "so the process of checking a digital",
    "start": "314160",
    "end": "315840"
  },
  {
    "text": "signature is both CPU and I O intensive",
    "start": "315840",
    "end": "318000"
  },
  {
    "text": "when code Integrity checks the signature",
    "start": "318000",
    "end": "319800"
  },
  {
    "text": "of a file and finds those signing level",
    "start": "319800",
    "end": "321840"
  },
  {
    "text": "oids we talked about before it saves",
    "start": "321840",
    "end": "324900"
  },
  {
    "text": "this information in an on-disk cache to",
    "start": "324900",
    "end": "326639"
  },
  {
    "text": "avoid having to do it again in the",
    "start": "326639",
    "end": "327840"
  },
  {
    "text": "future",
    "start": "327840",
    "end": "328620"
  },
  {
    "text": "well there was a race condition in this",
    "start": "328620",
    "end": "330300"
  },
  {
    "text": "process where it was possible to modify",
    "start": "330300",
    "end": "332580"
  },
  {
    "text": "the file after it's verified but before",
    "start": "332580",
    "end": "334680"
  },
  {
    "text": "the cached entry was written this",
    "start": "334680",
    "end": "336720"
  },
  {
    "text": "allowed an attacker to have an arbitrary",
    "start": "336720",
    "end": "338220"
  },
  {
    "text": "files with trusted cash signing levels",
    "start": "338220",
    "end": "342380"
  },
  {
    "text": "for performance reasons when Windows",
    "start": "342900",
    "end": "344759"
  },
  {
    "text": "starts it preloads several commonly used",
    "start": "344759",
    "end": "346680"
  },
  {
    "text": "dlls creating a cache called known dlls",
    "start": "346680",
    "end": "349440"
  },
  {
    "text": "this cache resides at a known location",
    "start": "349440",
    "end": "351360"
  },
  {
    "text": "at the root of the object manager",
    "start": "351360",
    "end": "353100"
  },
  {
    "text": "namespace and can is considered",
    "start": "353100",
    "end": "354660"
  },
  {
    "text": "pre-verified and trusted by PPL",
    "start": "354660",
    "end": "357479"
  },
  {
    "text": "PPL will load dlls from it without",
    "start": "357479",
    "end": "359520"
  },
  {
    "text": "further verification",
    "start": "359520",
    "end": "361080"
  },
  {
    "text": "when Windows added support for",
    "start": "361080",
    "end": "362639"
  },
  {
    "text": "containers or silos similar to docker",
    "start": "362639",
    "end": "366300"
  },
  {
    "text": "I included the ability to create what a",
    "start": "366300",
    "end": "368639"
  },
  {
    "text": "kind of a true root jail",
    "start": "368639",
    "end": "370380"
  },
  {
    "text": "which assigned a new root object manager",
    "start": "370380",
    "end": "373139"
  },
  {
    "text": "namespace for that process",
    "start": "373139",
    "end": "375180"
  },
  {
    "text": "this means that all named objects",
    "start": "375180",
    "end": "376860"
  },
  {
    "text": "including drives Network shares events",
    "start": "376860",
    "end": "379139"
  },
  {
    "text": "mutexes named pipes Etc are in a new",
    "start": "379139",
    "end": "381900"
  },
  {
    "text": "namespace away from the rest of the OS",
    "start": "381900",
    "end": "383699"
  },
  {
    "text": "while an attacker can't modify the",
    "start": "383699",
    "end": "386100"
  },
  {
    "text": "existing known dlls directory due to the",
    "start": "386100",
    "end": "388440"
  },
  {
    "text": "aforementioned trust label they can use",
    "start": "388440",
    "end": "390660"
  },
  {
    "text": "this to root capability to create a new",
    "start": "390660",
    "end": "392699"
  },
  {
    "text": "namespace with a top level counterfeit",
    "start": "392699",
    "end": "394919"
  },
  {
    "text": "known dlls containing any dll of their",
    "start": "394919",
    "end": "396960"
  },
  {
    "text": "choosing this uh PPL inside such a true",
    "start": "396960",
    "end": "401340"
  },
  {
    "text": "root jail will load and honor this known",
    "start": "401340",
    "end": "404160"
  },
  {
    "text": "dlls directory Microsoft removed no dll",
    "start": "404160",
    "end": "407160"
  },
  {
    "text": "support for PPL in July of last year",
    "start": "407160",
    "end": "409319"
  },
  {
    "text": "fixing this vulnerability",
    "start": "409319",
    "end": "412380"
  },
  {
    "text": "some script interpreter dlls will",
    "start": "412380",
    "end": "414000"
  },
  {
    "text": "automatically load a user configurable",
    "start": "414000",
    "end": "415560"
  },
  {
    "text": "script using a tool called.net to JS an",
    "start": "415560",
    "end": "418560"
  },
  {
    "text": "attacker can convert a.net payload into",
    "start": "418560",
    "end": "420900"
  },
  {
    "text": "jscript and then set some registry keys",
    "start": "420900",
    "end": "423539"
  },
  {
    "text": "to hijack any com object that was",
    "start": "423539",
    "end": "426060"
  },
  {
    "text": "already being used by a PPL",
    "start": "426060",
    "end": "428819"
  },
  {
    "text": "when that PPL runs and tries to use the",
    "start": "428819",
    "end": "431520"
  },
  {
    "text": "com object it will instead load the",
    "start": "431520",
    "end": "433560"
  },
  {
    "text": "attacker's specified script interpreter",
    "start": "433560",
    "end": "435600"
  },
  {
    "text": "dll",
    "start": "435600",
    "end": "436919"
  },
  {
    "text": "and hence the attacker's jscript",
    "start": "436919",
    "end": "440160"
  },
  {
    "text": "granting the attacker arbitrary.net code",
    "start": "440160",
    "end": "442500"
  },
  {
    "text": "execution within the PPL this was fixed",
    "start": "442500",
    "end": "445680"
  },
  {
    "text": "in 1803 by disallowing Script",
    "start": "445680",
    "end": "447479"
  },
  {
    "text": "interpreters within PPL",
    "start": "447479",
    "end": "450300"
  },
  {
    "text": "the Windows error reporting process",
    "start": "450300",
    "end": "451979"
  },
  {
    "text": "memory dumper or were fault secure",
    "start": "451979",
    "end": "453720"
  },
  {
    "text": "creates encrypted memory dumps to",
    "start": "453720",
    "end": "455340"
  },
  {
    "text": "protect the confidentiality of memory",
    "start": "455340",
    "end": "457199"
  },
  {
    "text": "within within protected processes and",
    "start": "457199",
    "end": "459419"
  },
  {
    "text": "PPL",
    "start": "459419",
    "end": "460500"
  },
  {
    "text": "for example you don't want somebody to",
    "start": "460500",
    "end": "463080"
  },
  {
    "text": "be able to use warfault secure to dump",
    "start": "463080",
    "end": "464400"
  },
  {
    "text": "lsas",
    "start": "464400",
    "end": "465840"
  },
  {
    "text": "in 2014 Alex eineski found a bug in",
    "start": "465840",
    "end": "468660"
  },
  {
    "text": "Windows 8.1 builds of where fault secure",
    "start": "468660",
    "end": "470639"
  },
  {
    "text": "that can lead to the creation of",
    "start": "470639",
    "end": "471900"
  },
  {
    "text": "unencrypted dumps Microsoft fixed this",
    "start": "471900",
    "end": "474360"
  },
  {
    "text": "issue in 2014 but an old pre-patch",
    "start": "474360",
    "end": "477380"
  },
  {
    "text": "vulnerable build can still run as when",
    "start": "477380",
    "end": "480120"
  },
  {
    "text": "TCB full on Modern Windows 11. their",
    "start": "480120",
    "end": "483720"
  },
  {
    "text": "signatures are still honored and valid",
    "start": "483720",
    "end": "486419"
  },
  {
    "text": "these executables can be used to dump",
    "start": "486419",
    "end": "488400"
  },
  {
    "text": "any protected process and this serves as",
    "start": "488400",
    "end": "490380"
  },
  {
    "text": "a partial lsas Run sppl defeat",
    "start": "490380",
    "end": "494580"
  },
  {
    "text": "James Forshaw demonstrated that an",
    "start": "494580",
    "end": "496319"
  },
  {
    "text": "undocumented com interface can be used",
    "start": "496319",
    "end": "499199"
  },
  {
    "text": "to call any function within a com",
    "start": "499199",
    "end": "501300"
  },
  {
    "text": "processes address space warfault secure",
    "start": "501300",
    "end": "503699"
  },
  {
    "text": "is vulnerable to such an attack",
    "start": "503699",
    "end": "506699"
  },
  {
    "text": "normally this is benign for pivot",
    "start": "506699",
    "end": "508199"
  },
  {
    "text": "escalation because you need 128-bit",
    "start": "508199",
    "end": "510180"
  },
  {
    "text": "secret that only resides within that",
    "start": "510180",
    "end": "511800"
  },
  {
    "text": "processor's address space however you",
    "start": "511800",
    "end": "514740"
  },
  {
    "text": "can use one instance of War fault secure",
    "start": "514740",
    "end": "516419"
  },
  {
    "text": "to dump the memory of another instance",
    "start": "516419",
    "end": "518399"
  },
  {
    "text": "of War fault secure",
    "start": "518399",
    "end": "520320"
  },
  {
    "text": "uh learning its secret and then",
    "start": "520320",
    "end": "522060"
  },
  {
    "text": "achieving arbitrary code execution",
    "start": "522060",
    "end": "523680"
  },
  {
    "text": "within that second instance",
    "start": "523680",
    "end": "526740"
  },
  {
    "text": "so in order to run as anti-malware light",
    "start": "526740",
    "end": "529680"
  },
  {
    "text": "vendors must sign antivirus vendors or",
    "start": "529680",
    "end": "532560"
  },
  {
    "text": "anti-malware vendors must assign binding",
    "start": "532560",
    "end": "534540"
  },
  {
    "text": "legal documents and create an early",
    "start": "534540",
    "end": "536040"
  },
  {
    "text": "launch anti-malware driver which",
    "start": "536040",
    "end": "538080"
  },
  {
    "text": "Microsoft will then sign",
    "start": "538080",
    "end": "540600"
  },
  {
    "text": "this driver contains a list of",
    "start": "540600",
    "end": "542160"
  },
  {
    "text": "certificate hashes intended to allow",
    "start": "542160",
    "end": "544200"
  },
  {
    "text": "that AV vendor to sign new builds",
    "start": "544200",
    "end": "546839"
  },
  {
    "text": "without going through Microsoft every",
    "start": "546839",
    "end": "548700"
  },
  {
    "text": "time",
    "start": "548700",
    "end": "550019"
  },
  {
    "text": "once this Elam driver is loaded by code",
    "start": "550019",
    "end": "552240"
  },
  {
    "text": "Integrity any executables signed by the",
    "start": "552240",
    "end": "555060"
  },
  {
    "text": "certificates in that list are allowed to",
    "start": "555060",
    "end": "557160"
  },
  {
    "text": "run as anti-malware light",
    "start": "557160",
    "end": "559920"
  },
  {
    "text": "Matt Graver discovered that several AV",
    "start": "559920",
    "end": "562260"
  },
  {
    "text": "vendors created Elam drivers which",
    "start": "562260",
    "end": "564060"
  },
  {
    "text": "include intermediate Cas for very large",
    "start": "564060",
    "end": "567180"
  },
  {
    "text": "Cas including Microsoft Commodore and",
    "start": "567180",
    "end": "570600"
  },
  {
    "text": "semantic allowing millions of files to",
    "start": "570600",
    "end": "572940"
  },
  {
    "text": "run as anti-malware light that shouldn't",
    "start": "572940",
    "end": "574800"
  },
  {
    "text": "be running as anti-malware light",
    "start": "574800",
    "end": "576899"
  },
  {
    "text": "Graber released a tool called",
    "start": "576899",
    "end": "578339"
  },
  {
    "text": "anti-malware blight",
    "start": "578339",
    "end": "581279"
  },
  {
    "text": "that leverages an overly permissive Elam",
    "start": "581279",
    "end": "583560"
  },
  {
    "text": "driver to allow you to run arbitrary",
    "start": "583560",
    "end": "585120"
  },
  {
    "text": "Powershell commands as anti-malware",
    "start": "585120",
    "end": "587160"
  },
  {
    "text": "light",
    "start": "587160",
    "end": "587940"
  },
  {
    "text": "even though",
    "start": "587940",
    "end": "589620"
  },
  {
    "text": "it's one of the lower levels of PPL such",
    "start": "589620",
    "end": "592740"
  },
  {
    "text": "processes are still unkillable by",
    "start": "592740",
    "end": "594779"
  },
  {
    "text": "traditional administrative tools",
    "start": "594779",
    "end": "597120"
  },
  {
    "text": "and they may be able to tamper with the",
    "start": "597120",
    "end": "598920"
  },
  {
    "text": "system security software Microsoft can't",
    "start": "598920",
    "end": "601440"
  },
  {
    "text": "just revoke these certificates for fear",
    "start": "601440",
    "end": "603060"
  },
  {
    "text": "of breaking existing machines it's kind",
    "start": "603060",
    "end": "605040"
  },
  {
    "text": "of a mess",
    "start": "605040",
    "end": "607380"
  },
  {
    "text": "so this one's probably the best known",
    "start": "607380",
    "end": "608760"
  },
  {
    "text": "bug",
    "start": "608760",
    "end": "609959"
  },
  {
    "text": "the Define dos device API defines",
    "start": "609959",
    "end": "612720"
  },
  {
    "text": "redefines or deletes an MS-DOS device",
    "start": "612720",
    "end": "615660"
  },
  {
    "text": "name Dash Drive letters such as C colon",
    "start": "615660",
    "end": "618600"
  },
  {
    "text": "are just symbolic links in the object",
    "start": "618600",
    "end": "620459"
  },
  {
    "text": "manager namespace definedos devices",
    "start": "620459",
    "end": "622740"
  },
  {
    "text": "exported by kernel 32 but really it's an",
    "start": "622740",
    "end": "624899"
  },
  {
    "text": "RPC call over to csrss which does the",
    "start": "624899",
    "end": "627660"
  },
  {
    "text": "real Sim link work",
    "start": "627660",
    "end": "629580"
  },
  {
    "text": "a time of check time of use",
    "start": "629580",
    "end": "631200"
  },
  {
    "text": "vulnerability and its implementation",
    "start": "631200",
    "end": "633000"
  },
  {
    "text": "allows an attacker to inject entries",
    "start": "633000",
    "end": "634980"
  },
  {
    "text": "into the known dll's cache and all of",
    "start": "634980",
    "end": "637500"
  },
  {
    "text": "the aforementioned fund that entails",
    "start": "637500",
    "end": "641120"
  },
  {
    "text": "uh James Forshaw publicly described this",
    "start": "641399",
    "end": "643560"
  },
  {
    "text": "in 2018 in a blog post however Microsoft",
    "start": "643560",
    "end": "646200"
  },
  {
    "text": "didn't act on it until cremorna bro",
    "start": "646200",
    "end": "648540"
  },
  {
    "text": "released a turnkey implementation in",
    "start": "648540",
    "end": "651300"
  },
  {
    "text": "2021 which he called PPL dump",
    "start": "651300",
    "end": "654300"
  },
  {
    "text": "Microsoft removed no dll support in July",
    "start": "654300",
    "end": "657120"
  },
  {
    "text": "of last year fixing this vulnerability",
    "start": "657120",
    "end": "660980"
  },
  {
    "text": "so the final attack involves the use of",
    "start": "661019",
    "end": "663000"
  },
  {
    "text": "custom type libraries or tlb files that",
    "start": "663000",
    "end": "665760"
  },
  {
    "text": "are intentionally crafted to trigger",
    "start": "665760",
    "end": "667440"
  },
  {
    "text": "type confusion within a com server",
    "start": "667440",
    "end": "669959"
  },
  {
    "text": "this leads to memory corruption and can",
    "start": "669959",
    "end": "671880"
  },
  {
    "text": "enable an attacker to install a known",
    "start": "671880",
    "end": "673620"
  },
  {
    "text": "dll's handle value of their choosing",
    "start": "673620",
    "end": "675839"
  },
  {
    "text": "choosing within a protected process or",
    "start": "675839",
    "end": "678360"
  },
  {
    "text": "PPL",
    "start": "678360",
    "end": "679620"
  },
  {
    "text": "well originally documented by James",
    "start": "679620",
    "end": "681360"
  },
  {
    "text": "Forshaw and Alexi nescue in 2018 a",
    "start": "681360",
    "end": "684360"
  },
  {
    "text": "variant of this was released in March of",
    "start": "684360",
    "end": "687240"
  },
  {
    "text": "this year by the author of PPL dump K",
    "start": "687240",
    "end": "690959"
  },
  {
    "text": "manga bro as a turnkey tool that he",
    "start": "690959",
    "end": "693720"
  },
  {
    "text": "calls PPL medic",
    "start": "693720",
    "end": "695100"
  },
  {
    "text": "Microsoft said that they are working on",
    "start": "695100",
    "end": "697079"
  },
  {
    "text": "a mitigation for this for known dll",
    "start": "697079",
    "end": "698940"
  },
  {
    "text": "handle tampering and it's going to be",
    "start": "698940",
    "end": "700620"
  },
  {
    "text": "shipping in June or July of this year",
    "start": "700620",
    "end": "704700"
  },
  {
    "text": "so now I want to talk you through how I",
    "start": "704700",
    "end": "706440"
  },
  {
    "text": "found a novel path to code execution",
    "start": "706440",
    "end": "708000"
  },
  {
    "text": "within PPL",
    "start": "708000",
    "end": "710959"
  },
  {
    "text": "so one day while using process monitor I",
    "start": "711120",
    "end": "713700"
  },
  {
    "text": "observed services.exe paging in dlls",
    "start": "713700",
    "end": "716160"
  },
  {
    "text": "from disk and it got me thinking if I",
    "start": "716160",
    "end": "718500"
  },
  {
    "text": "can control the device hosting a dll can",
    "start": "718500",
    "end": "720540"
  },
  {
    "text": "I perform a bait and switch attack and",
    "start": "720540",
    "end": "722700"
  },
  {
    "text": "inject my executable code into a",
    "start": "722700",
    "end": "724560"
  },
  {
    "text": "protected process such an attack is",
    "start": "724560",
    "end": "726779"
  },
  {
    "text": "called a time of check time of use or a",
    "start": "726779",
    "end": "728640"
  },
  {
    "text": "talk to",
    "start": "728640",
    "end": "731060"
  },
  {
    "text": "at a high level the attack is going to",
    "start": "731100",
    "end": "733019"
  },
  {
    "text": "go like this",
    "start": "733019",
    "end": "734700"
  },
  {
    "text": "we're going to set up a PPL process to",
    "start": "734700",
    "end": "736380"
  },
  {
    "text": "load a dll from a storage device that we",
    "start": "736380",
    "end": "738240"
  },
  {
    "text": "control code Integrity which runs in the",
    "start": "738240",
    "end": "740880"
  },
  {
    "text": "kernel",
    "start": "740880",
    "end": "742079"
  },
  {
    "text": "will verify the signature on the dll and",
    "start": "742079",
    "end": "744240"
  },
  {
    "text": "then the kernel will map it into the",
    "start": "744240",
    "end": "745980"
  },
  {
    "text": "process this is normal",
    "start": "745980",
    "end": "748200"
  },
  {
    "text": "at some point later the PPL will execute",
    "start": "748200",
    "end": "751079"
  },
  {
    "text": "a portion of that dll we're going to",
    "start": "751079",
    "end": "753060"
  },
  {
    "text": "force a page fault which will trigger a",
    "start": "753060",
    "end": "755220"
  },
  {
    "text": "second read of that file's contents from",
    "start": "755220",
    "end": "757260"
  },
  {
    "text": "our storage device which will then",
    "start": "757260",
    "end": "758880"
  },
  {
    "text": "return a payload instead of the original",
    "start": "758880",
    "end": "760560"
  },
  {
    "text": "file",
    "start": "760560",
    "end": "761640"
  },
  {
    "text": "that's the plan let's try to make it",
    "start": "761640",
    "end": "763920"
  },
  {
    "text": "happen",
    "start": "763920",
    "end": "765660"
  },
  {
    "text": "so when you digitally sign a file you",
    "start": "765660",
    "end": "767639"
  },
  {
    "text": "can choose to add page hashes which are",
    "start": "767639",
    "end": "769560"
  },
  {
    "text": "hashes of each individual four kilobyte",
    "start": "769560",
    "end": "771660"
  },
  {
    "text": "page within the file",
    "start": "771660",
    "end": "773880"
  },
  {
    "text": "these granular hashes allow the memory",
    "start": "773880",
    "end": "775680"
  },
  {
    "text": "manager to verify each Page's Integrity",
    "start": "775680",
    "end": "777540"
  },
  {
    "text": "as it's paged in from disk",
    "start": "777540",
    "end": "779940"
  },
  {
    "text": "compare this to regular authenticode",
    "start": "779940",
    "end": "781680"
  },
  {
    "text": "signatures which requires processing the",
    "start": "781680",
    "end": "783360"
  },
  {
    "text": "entire file as a monolithic entity page",
    "start": "783360",
    "end": "786060"
  },
  {
    "text": "hashes are protected by a file's digital",
    "start": "786060",
    "end": "787740"
  },
  {
    "text": "signature so they are resistant to",
    "start": "787740",
    "end": "789180"
  },
  {
    "text": "tampering at rest here we can see sine",
    "start": "789180",
    "end": "791220"
  },
  {
    "text": "tool output",
    "start": "791220",
    "end": "792480"
  },
  {
    "text": "showing page hashes for services.exe",
    "start": "792480",
    "end": "794760"
  },
  {
    "text": "note that eventaggregation.dll",
    "start": "794760",
    "end": "798060"
  },
  {
    "text": "does not have any page hashes and this",
    "start": "798060",
    "end": "800279"
  },
  {
    "text": "makes it a candidate for our attack",
    "start": "800279",
    "end": "803579"
  },
  {
    "text": "to start let's run a protected process",
    "start": "803579",
    "end": "806760"
  },
  {
    "text": "I pick services.exe because it can run",
    "start": "806760",
    "end": "808920"
  },
  {
    "text": "as wind TCB Lite which is the highest",
    "start": "808920",
    "end": "810600"
  },
  {
    "text": "level of PPL",
    "start": "810600",
    "end": "812459"
  },
  {
    "text": "here we can see a file being opened",
    "start": "812459",
    "end": "814320"
  },
  {
    "text": "mapped and loaded but not read or paged",
    "start": "814320",
    "end": "817139"
  },
  {
    "text": "from",
    "start": "817139",
    "end": "818880"
  },
  {
    "text": "that's not good enough we need to go",
    "start": "818880",
    "end": "820680"
  },
  {
    "text": "deeper",
    "start": "820680",
    "end": "823040"
  },
  {
    "text": "maybe adding some complexity to the i o",
    "start": "824220",
    "end": "826079"
  },
  {
    "text": "stack will give us more capabilities for",
    "start": "826079",
    "end": "827579"
  },
  {
    "text": "hackery so let's replace event",
    "start": "827579",
    "end": "829200"
  },
  {
    "text": "aggregation with a symbolic link to the",
    "start": "829200",
    "end": "831300"
  },
  {
    "text": "loopback SMB interface SMB stands for",
    "start": "831300",
    "end": "834060"
  },
  {
    "text": "when server message Block it's another",
    "start": "834060",
    "end": "835980"
  },
  {
    "text": "name for Windows file sharing what we",
    "start": "835980",
    "end": "838320"
  },
  {
    "text": "see here in backslash backslash 127001",
    "start": "838320",
    "end": "841079"
  },
  {
    "text": "backslash T dollar sign is Windows",
    "start": "841079",
    "end": "843360"
  },
  {
    "text": "default share of the C drive",
    "start": "843360",
    "end": "845579"
  },
  {
    "text": "rerunning services.exe we can see a",
    "start": "845579",
    "end": "847680"
  },
  {
    "text": "paging read which I highlighted here in",
    "start": "847680",
    "end": "849180"
  },
  {
    "text": "blue followed immediately by a regular",
    "start": "849180",
    "end": "851160"
  },
  {
    "text": "read",
    "start": "851160",
    "end": "852120"
  },
  {
    "text": "when I dug into the stacks for these two",
    "start": "852120",
    "end": "853800"
  },
  {
    "text": "operations I saw the paging read was i o",
    "start": "853800",
    "end": "855720"
  },
  {
    "text": "issued by the memory manager to the",
    "start": "855720",
    "end": "857040"
  },
  {
    "text": "network redirector SMB",
    "start": "857040",
    "end": "859079"
  },
  {
    "text": "which then issued a regular read to the",
    "start": "859079",
    "end": "861420"
  },
  {
    "text": "local file system they're basically two",
    "start": "861420",
    "end": "863339"
  },
  {
    "text": "parts of the same operation so it's a",
    "start": "863339",
    "end": "865440"
  },
  {
    "text": "start but it's not enough",
    "start": "865440",
    "end": "867540"
  },
  {
    "text": "we need more paging reads",
    "start": "867540",
    "end": "871459"
  },
  {
    "text": "we justwatched services.exe read event",
    "start": "872880",
    "end": "874980"
  },
  {
    "text": "aggregation but in order to do a time of",
    "start": "874980",
    "end": "876959"
  },
  {
    "text": "check time of use we needed to occur as",
    "start": "876959",
    "end": "878940"
  },
  {
    "text": "multiple reads",
    "start": "878940",
    "end": "880440"
  },
  {
    "text": "perhaps we can slow this process down",
    "start": "880440",
    "end": "882240"
  },
  {
    "text": "using an opportunistic lock or op block",
    "start": "882240",
    "end": "884160"
  },
  {
    "text": "an op-lock is a feature built into NTFS",
    "start": "884160",
    "end": "886920"
  },
  {
    "text": "and SMB that enables non-cooperative",
    "start": "886920",
    "end": "889500"
  },
  {
    "text": "locking of files",
    "start": "889500",
    "end": "891000"
  },
  {
    "text": "when a file is locked using an op-lock",
    "start": "891000",
    "end": "892980"
  },
  {
    "text": "any other attempts to open that file",
    "start": "892980",
    "end": "895019"
  },
  {
    "text": "will be suspended until the op block is",
    "start": "895019",
    "end": "897060"
  },
  {
    "text": "released",
    "start": "897060",
    "end": "898320"
  },
  {
    "text": "to look for op-block targets let's zoom",
    "start": "898320",
    "end": "900839"
  },
  {
    "text": "in on file open operations or create",
    "start": "900839",
    "end": "903000"
  },
  {
    "text": "file operations another word for just",
    "start": "903000",
    "end": "905339"
  },
  {
    "text": "create file operations that you'll see",
    "start": "905339",
    "end": "906660"
  },
  {
    "text": "in that list",
    "start": "906660",
    "end": "907620"
  },
  {
    "text": "how about devops.dll here which we can",
    "start": "907620",
    "end": "910500"
  },
  {
    "text": "see here loaded in Blue on one thread",
    "start": "910500",
    "end": "912540"
  },
  {
    "text": "while event aggregation at the same time",
    "start": "912540",
    "end": "914579"
  },
  {
    "text": "is being loaded in red on a different",
    "start": "914579",
    "end": "916500"
  },
  {
    "text": "thread",
    "start": "916500",
    "end": "918600"
  },
  {
    "text": "so setting an OP block on devops.dll we",
    "start": "918600",
    "end": "921420"
  },
  {
    "text": "can see the i o operation has no result",
    "start": "921420",
    "end": "923040"
  },
  {
    "text": "it's still pending",
    "start": "923040",
    "end": "926000"
  },
  {
    "text": "switching over to our kernel debugger we",
    "start": "926579",
    "end": "929040"
  },
  {
    "text": "can see the thread attempting to load",
    "start": "929040",
    "end": "930540"
  },
  {
    "text": "devops dll is hung on NTFS wait for",
    "start": "930540",
    "end": "933660"
  },
  {
    "text": "opblock completion event",
    "start": "933660",
    "end": "935160"
  },
  {
    "text": "once we release the app lock the",
    "start": "935160",
    "end": "937019"
  },
  {
    "text": "operation completes",
    "start": "937019",
    "end": "938639"
  },
  {
    "text": "we just successfully suspended a PPL mid",
    "start": "938639",
    "end": "940860"
  },
  {
    "text": "startup",
    "start": "940860",
    "end": "943279"
  },
  {
    "text": "so where do we go from here",
    "start": "943860",
    "end": "945600"
  },
  {
    "text": "we froze in a PPL we're aiming to do a",
    "start": "945600",
    "end": "948000"
  },
  {
    "text": "time of check time of use with paging",
    "start": "948000",
    "end": "950220"
  },
  {
    "text": "but all the pages are resident",
    "start": "950220",
    "end": "952920"
  },
  {
    "text": "so to push those pages out of memory I",
    "start": "952920",
    "end": "955199"
  },
  {
    "text": "considered the empty working set API",
    "start": "955199",
    "end": "957000"
  },
  {
    "text": "however it's out of the question because",
    "start": "957000",
    "end": "959279"
  },
  {
    "text": "it requires the process set quota access",
    "start": "959279",
    "end": "961560"
  },
  {
    "text": "right which is a right privilege and you",
    "start": "961560",
    "end": "964260"
  },
  {
    "text": "cannot get that right to a PPL",
    "start": "964260",
    "end": "968279"
  },
  {
    "text": "as an administrator however we have the",
    "start": "968279",
    "end": "970380"
  },
  {
    "text": "SC profile single process privilege",
    "start": "970380",
    "end": "972300"
  },
  {
    "text": "which allows us to empty the working",
    "start": "972300",
    "end": "973920"
  },
  {
    "text": "stat and standby list for the entire",
    "start": "973920",
    "end": "975540"
  },
  {
    "text": "system",
    "start": "975540",
    "end": "977699"
  },
  {
    "text": "by emptying the system's working set",
    "start": "977699",
    "end": "979320"
  },
  {
    "text": "after services.exe breaks our op-lock we",
    "start": "979320",
    "end": "982139"
  },
  {
    "text": "can see a lot of paging i o here I left",
    "start": "982139",
    "end": "984779"
  },
  {
    "text": "the op blog hung for about 30 seconds so",
    "start": "984779",
    "end": "987060"
  },
  {
    "text": "there's a clear delineation above and",
    "start": "987060",
    "end": "988860"
  },
  {
    "text": "below that red line if you look in the",
    "start": "988860",
    "end": "990779"
  },
  {
    "text": "left column you can see the time jumps",
    "start": "990779",
    "end": "992459"
  },
  {
    "text": "from 17 seconds to 51 seconds that",
    "start": "992459",
    "end": "995160"
  },
  {
    "text": "that's that's when I chose to release",
    "start": "995160",
    "end": "997079"
  },
  {
    "text": "the op block",
    "start": "997079",
    "end": "999680"
  },
  {
    "text": "and all the paging I occurs after the",
    "start": "1000320",
    "end": "1002899"
  },
  {
    "text": "app lock is released",
    "start": "1002899",
    "end": "1005360"
  },
  {
    "text": "so now that we can reliably force page",
    "start": "1005360",
    "end": "1007220"
  },
  {
    "text": "faults for a dll inside of a PPL let's",
    "start": "1007220",
    "end": "1010160"
  },
  {
    "text": "try to inject some code",
    "start": "1010160",
    "end": "1011899"
  },
  {
    "text": "we're going to disable the local SMB",
    "start": "1011899",
    "end": "1013699"
  },
  {
    "text": "server which is hosted by the landman",
    "start": "1013699",
    "end": "1015980"
  },
  {
    "text": "server service and then restart the",
    "start": "1015980",
    "end": "1017779"
  },
  {
    "text": "machine to free up that Port because the",
    "start": "1017779",
    "end": "1019880"
  },
  {
    "text": "port does not get released one",
    "start": "1019880",
    "end": "1021320"
  },
  {
    "text": "immediately when you stop the server it",
    "start": "1021320",
    "end": "1023120"
  },
  {
    "text": "it's just an implementation detail of",
    "start": "1023120",
    "end": "1025339"
  },
  {
    "text": "windows so we have to restart the",
    "start": "1025339",
    "end": "1027199"
  },
  {
    "text": "machine and then we're going to launch",
    "start": "1027199",
    "end": "1028699"
  },
  {
    "text": "our own python SMB server based on",
    "start": "1028699",
    "end": "1031339"
  },
  {
    "text": "impact it it's going to serve up the",
    "start": "1031339",
    "end": "1033140"
  },
  {
    "text": "original dll for the first time it's",
    "start": "1033140",
    "end": "1035000"
  },
  {
    "text": "queried for code Integrity to to appease",
    "start": "1035000",
    "end": "1037819"
  },
  {
    "text": "code integrity and then it's going to",
    "start": "1037819",
    "end": "1039860"
  },
  {
    "text": "add some special sauce on subsequent",
    "start": "1039860",
    "end": "1041959"
  },
  {
    "text": "times that that dll has served",
    "start": "1041959",
    "end": "1044660"
  },
  {
    "text": "the payload starts with a cc",
    "start": "1044660",
    "end": "1046760"
  },
  {
    "text": "and then it has some hex 90 knobs and",
    "start": "1046760",
    "end": "1050240"
  },
  {
    "text": "then it has Cafe code which is just",
    "start": "1050240",
    "end": "1051980"
  },
  {
    "text": "something unique to it that we can",
    "start": "1051980",
    "end": "1053360"
  },
  {
    "text": "identify",
    "start": "1053360",
    "end": "1055400"
  },
  {
    "text": "so running this we get a break into our",
    "start": "1055400",
    "end": "1057260"
  },
  {
    "text": "kernel debugger the instruction point is",
    "start": "1057260",
    "end": "1059179"
  },
  {
    "text": "the instruction pointer is add a cc",
    "start": "1059179",
    "end": "1061220"
  },
  {
    "text": "software breakpoint followed by hex 90",
    "start": "1061220",
    "end": "1063140"
  },
  {
    "text": "knobs and hex Cafe code which is matches",
    "start": "1063140",
    "end": "1066500"
  },
  {
    "text": "our payload",
    "start": "1066500",
    "end": "1068419"
  },
  {
    "text": "we can see the current process of",
    "start": "1068419",
    "end": "1069940"
  },
  {
    "text": "services.exe the protection type is one",
    "start": "1069940",
    "end": "1072500"
  },
  {
    "text": "and the signer is six we just",
    "start": "1072500",
    "end": "1074900"
  },
  {
    "text": "successfully achieved code execution as",
    "start": "1074900",
    "end": "1077240"
  },
  {
    "text": "win CCB Lite",
    "start": "1077240",
    "end": "1080260"
  },
  {
    "text": "so great we got code execution but can",
    "start": "1080780",
    "end": "1083539"
  },
  {
    "text": "we get rid of that noisy reboot",
    "start": "1083539",
    "end": "1085760"
  },
  {
    "text": "landman server takes the port and",
    "start": "1085760",
    "end": "1087440"
  },
  {
    "text": "doesn't give it back without a reboot so",
    "start": "1087440",
    "end": "1089299"
  },
  {
    "text": "I don't want to use SMB",
    "start": "1089299",
    "end": "1091160"
  },
  {
    "text": "webdav which is another type of network",
    "start": "1091160",
    "end": "1093500"
  },
  {
    "text": "redirector on Windows based on HTTP sort",
    "start": "1093500",
    "end": "1096500"
  },
  {
    "text": "of uh",
    "start": "1096500",
    "end": "1099640"
  },
  {
    "text": "it allows you to use any port you want",
    "start": "1101299",
    "end": "1103160"
  },
  {
    "text": "but it doesn't exhibit the paging",
    "start": "1103160",
    "end": "1105860"
  },
  {
    "text": "behavior that we want so that one's out",
    "start": "1105860",
    "end": "1108500"
  },
  {
    "text": "I Googled around and stumbled across an",
    "start": "1108500",
    "end": "1110480"
  },
  {
    "text": "excellent article by James Forshaw",
    "start": "1110480",
    "end": "1112220"
  },
  {
    "text": "titled trapping virtual memory access",
    "start": "1112220",
    "end": "1114100"
  },
  {
    "text": "which describes his work on problems",
    "start": "1114100",
    "end": "1116539"
  },
  {
    "text": "similar to what I'm facing",
    "start": "1116539",
    "end": "1118400"
  },
  {
    "text": "to summarize he describes how to use the",
    "start": "1118400",
    "end": "1120740"
  },
  {
    "text": "windows Cloud filter API combined with",
    "start": "1120740",
    "end": "1122960"
  },
  {
    "text": "the loopback SMB adapter to trap file",
    "start": "1122960",
    "end": "1125120"
  },
  {
    "text": "axis in a granular manner the cloud",
    "start": "1125120",
    "end": "1127340"
  },
  {
    "text": "filter API allows OneDrive and similar",
    "start": "1127340",
    "end": "1129980"
  },
  {
    "text": "apps to create stub files on your",
    "start": "1129980",
    "end": "1132380"
  },
  {
    "text": "machine that represent much larger files",
    "start": "1132380",
    "end": "1134179"
  },
  {
    "text": "in the cloud when the file is accessed a",
    "start": "1134179",
    "end": "1137059"
  },
  {
    "text": "callback gets invoked a rehydration",
    "start": "1137059",
    "end": "1139340"
  },
  {
    "text": "callback gets invoked which and then an",
    "start": "1139340",
    "end": "1141620"
  },
  {
    "text": "application can like maybe reach out to",
    "start": "1141620",
    "end": "1143360"
  },
  {
    "text": "the cloud to download the file's",
    "start": "1143360",
    "end": "1144679"
  },
  {
    "text": "contents or some something along those",
    "start": "1144679",
    "end": "1146299"
  },
  {
    "text": "lines",
    "start": "1146299",
    "end": "1148120"
  },
  {
    "text": "uh so and and this is called a",
    "start": "1148120",
    "end": "1150620"
  },
  {
    "text": "rehydration callback so as a bonus",
    "start": "1150620",
    "end": "1152900"
  },
  {
    "text": "fourshaw provided working sample code",
    "start": "1152900",
    "end": "1156880"
  },
  {
    "text": "so integrating the cloud filter API into",
    "start": "1157100",
    "end": "1159740"
  },
  {
    "text": "the attack the final exploit looks like",
    "start": "1159740",
    "end": "1161960"
  },
  {
    "text": "this number one use cloudfilter to",
    "start": "1161960",
    "end": "1164780"
  },
  {
    "text": "create an empty placeholder file with a",
    "start": "1164780",
    "end": "1166760"
  },
  {
    "text": "callback function that we control",
    "start": "1166760",
    "end": "1168559"
  },
  {
    "text": "next we're going to sim Link Event",
    "start": "1168559",
    "end": "1170299"
  },
  {
    "text": "aggregation to the placeholder file",
    "start": "1170299",
    "end": "1172280"
  },
  {
    "text": "through the loopback SMB interface next",
    "start": "1172280",
    "end": "1175280"
  },
  {
    "text": "we're going to set the op block as I",
    "start": "1175280",
    "end": "1177140"
  },
  {
    "text": "described before",
    "start": "1177140",
    "end": "1178820"
  },
  {
    "text": "next we are going to run services.exe",
    "start": "1178820",
    "end": "1181940"
  },
  {
    "text": "which then attempts to load event",
    "start": "1181940",
    "end": "1183799"
  },
  {
    "text": "aggregation",
    "start": "1183799",
    "end": "1186200"
  },
  {
    "text": "event aggregation is a Sim link goes",
    "start": "1186200",
    "end": "1189380"
  },
  {
    "text": "over the loopback SMB adapter to the the",
    "start": "1189380",
    "end": "1192020"
  },
  {
    "text": "placeholder file which ends up leading",
    "start": "1192020",
    "end": "1194240"
  },
  {
    "text": "to our rehydration getting invoked our",
    "start": "1194240",
    "end": "1196700"
  },
  {
    "text": "Cloud filter rehydration callback",
    "start": "1196700",
    "end": "1198500"
  },
  {
    "text": "at this point we serve the original",
    "start": "1198500",
    "end": "1200419"
  },
  {
    "text": "event aggregation.dll to for code",
    "start": "1200419",
    "end": "1203059"
  },
  {
    "text": "Integrity verification we page",
    "start": "1203059",
    "end": "1205160"
  },
  {
    "text": "everything out by emptying the working",
    "start": "1205160",
    "end": "1206539"
  },
  {
    "text": "set and standby lists",
    "start": "1206539",
    "end": "1208760"
  },
  {
    "text": "next we release the op block to allow",
    "start": "1208760",
    "end": "1210860"
  },
  {
    "text": "services to continue executing",
    "start": "1210860",
    "end": "1213380"
  },
  {
    "text": "the services resumes and this leads to",
    "start": "1213380",
    "end": "1216679"
  },
  {
    "text": "paging reads over SMB which are",
    "start": "1216679",
    "end": "1218900"
  },
  {
    "text": "forwarded to the placeholder just like",
    "start": "1218900",
    "end": "1220400"
  },
  {
    "text": "before",
    "start": "1220400",
    "end": "1221600"
  },
  {
    "text": "however this time our when our callback",
    "start": "1221600",
    "end": "1223880"
  },
  {
    "text": "fires we serve a a specially Sauced",
    "start": "1223880",
    "end": "1228140"
  },
  {
    "text": "version of event aggregation",
    "start": "1228140",
    "end": "1230179"
  },
  {
    "text": "uh I we add our pick payload into the",
    "start": "1230179",
    "end": "1234799"
  },
  {
    "text": "version of dll that's being served uh",
    "start": "1234799",
    "end": "1238039"
  },
  {
    "text": "pick is positioned independent code it's",
    "start": "1238039",
    "end": "1239419"
  },
  {
    "text": "like Shell Code and uh and that Shell",
    "start": "1239419",
    "end": "1242780"
  },
  {
    "text": "Code runs inside services.exe as win TCB",
    "start": "1242780",
    "end": "1245360"
  },
  {
    "text": "Lite this particular payload dumps the",
    "start": "1245360",
    "end": "1247460"
  },
  {
    "text": "process of your choosing and this is PPL",
    "start": "1247460",
    "end": "1249679"
  },
  {
    "text": "fault",
    "start": "1249679",
    "end": "1252100"
  },
  {
    "text": "all right so what we have here is",
    "start": "1254480",
    "end": "1258080"
  },
  {
    "text": "uh Windows 11 Insider I've recorded this",
    "start": "1258080",
    "end": "1261500"
  },
  {
    "text": "demo at the end of March but it still",
    "start": "1261500",
    "end": "1264799"
  },
  {
    "text": "works and what I want to point out is",
    "start": "1264799",
    "end": "1269440"
  },
  {
    "text": "sorry demo didn't work properly okay so",
    "start": "1269840",
    "end": "1273080"
  },
  {
    "text": "we have Windows 11 Insider here",
    "start": "1273080",
    "end": "1275840"
  },
  {
    "text": "and it was fully up to date as when I",
    "start": "1275840",
    "end": "1278000"
  },
  {
    "text": "recorded this I also tested this last",
    "start": "1278000",
    "end": "1279380"
  },
  {
    "text": "week and the same exploit still works",
    "start": "1279380",
    "end": "1281720"
  },
  {
    "text": "we have lsas here running as a PPL LSA",
    "start": "1281720",
    "end": "1285919"
  },
  {
    "text": "and you can see the same information",
    "start": "1285919",
    "end": "1287059"
  },
  {
    "text": "here on the console on the shell that",
    "start": "1287059",
    "end": "1289100"
  },
  {
    "text": "was running as LSA we run proc dump on",
    "start": "1289100",
    "end": "1291380"
  },
  {
    "text": "that process we can see access is denied",
    "start": "1291380",
    "end": "1293240"
  },
  {
    "text": "so PPL is doing its thing next we run",
    "start": "1293240",
    "end": "1296600"
  },
  {
    "text": "PPL fault I pass Dash V for verbose",
    "start": "1296600",
    "end": "1298820"
  },
  {
    "text": "output and I want to point out two",
    "start": "1298820",
    "end": "1300799"
  },
  {
    "text": "things in this output the first one is",
    "start": "1300799",
    "end": "1302720"
  },
  {
    "text": "that the rehydration Callback is invoked",
    "start": "1302720",
    "end": "1304760"
  },
  {
    "text": "and it serves the original file",
    "start": "1304760",
    "end": "1307460"
  },
  {
    "text": "and then the rehydration and callback is",
    "start": "1307460",
    "end": "1310580"
  },
  {
    "text": "invoked again and we add the payload to",
    "start": "1310580",
    "end": "1312860"
  },
  {
    "text": "it to make sure that the dump is",
    "start": "1312860",
    "end": "1315740"
  },
  {
    "text": "actually intact we're going to open it",
    "start": "1315740",
    "end": "1317179"
  },
  {
    "text": "up in windebug and take a look",
    "start": "1317179",
    "end": "1320320"
  },
  {
    "text": "so opening up the dump we're going to",
    "start": "1320780",
    "end": "1322580"
  },
  {
    "text": "check the PEB and make sure it's just a",
    "start": "1322580",
    "end": "1324740"
  },
  {
    "text": "sanity check it we didn't make sure we",
    "start": "1324740",
    "end": "1326780"
  },
  {
    "text": "didn't like create an empty file or",
    "start": "1326780",
    "end": "1327980"
  },
  {
    "text": "something so here we can see lsas in the",
    "start": "1327980",
    "end": "1330860"
  },
  {
    "text": "PEB",
    "start": "1330860",
    "end": "1331760"
  },
  {
    "text": "the module list",
    "start": "1331760",
    "end": "1334600"
  },
  {
    "text": "so when PPL dump was patched Austin",
    "start": "1337760",
    "end": "1339919"
  },
  {
    "text": "Hudson released an exploit chain that he",
    "start": "1339919",
    "end": "1341659"
  },
  {
    "text": "had written and had been privately used",
    "start": "1341659",
    "end": "1343159"
  },
  {
    "text": "and called Angry Orchard",
    "start": "1343159",
    "end": "1345200"
  },
  {
    "text": "because PPL dump the PPL dump patch had",
    "start": "1345200",
    "end": "1348440"
  },
  {
    "text": "broken it",
    "start": "1348440",
    "end": "1350059"
  },
  {
    "text": "in a Angry Orchard exploits a bug in",
    "start": "1350059",
    "end": "1353120"
  },
  {
    "text": "anti-user hard error control which is a",
    "start": "1353120",
    "end": "1354980"
  },
  {
    "text": "system call that allows csrss to perform",
    "start": "1354980",
    "end": "1357559"
  },
  {
    "text": "an arbitrary decrement in kernel memory",
    "start": "1357559",
    "end": "1360980"
  },
  {
    "text": "Angry Orchard uses this to decrement",
    "start": "1360980",
    "end": "1363460"
  },
  {
    "text": "k-thread.previus mode from one to zero",
    "start": "1363460",
    "end": "1365720"
  },
  {
    "text": "meaning it decrements the the threads",
    "start": "1365720",
    "end": "1368840"
  },
  {
    "text": "mode from user mode to Kernel mode",
    "start": "1368840",
    "end": "1371900"
  },
  {
    "text": "sometimes referred to as a god mode",
    "start": "1371900",
    "end": "1373760"
  },
  {
    "text": "exploit this previous mode manipulation",
    "start": "1373760",
    "end": "1375919"
  },
  {
    "text": "makes the kernel treat your thread as a",
    "start": "1375919",
    "end": "1378799"
  },
  {
    "text": "kernel system worker thread",
    "start": "1378799",
    "end": "1381140"
  },
  {
    "text": "this can lead to some weird results",
    "start": "1381140",
    "end": "1385039"
  },
  {
    "text": "pointers are not checked",
    "start": "1385039",
    "end": "1387020"
  },
  {
    "text": "access checks are skipped and you can do",
    "start": "1387020",
    "end": "1389240"
  },
  {
    "text": "crazy things like write process memory",
    "start": "1389240",
    "end": "1391220"
  },
  {
    "text": "to Kernel addresses",
    "start": "1391220",
    "end": "1392720"
  },
  {
    "text": "or open things that are normally",
    "start": "1392720",
    "end": "1394159"
  },
  {
    "text": "completely inaccessible to user mode",
    "start": "1394159",
    "end": "1395720"
  },
  {
    "text": "such as the physical memory device",
    "start": "1395720",
    "end": "1398600"
  },
  {
    "text": "or in the system process",
    "start": "1398600",
    "end": "1401480"
  },
  {
    "text": "by chaining PPL fault with the ntuser",
    "start": "1401480",
    "end": "1403700"
  },
  {
    "text": "hardware control exploit we can get full",
    "start": "1403700",
    "end": "1405620"
  },
  {
    "text": "access handle to the physical memory",
    "start": "1405620",
    "end": "1407179"
  },
  {
    "text": "device giving us the ability to modify",
    "start": "1407179",
    "end": "1409100"
  },
  {
    "text": "physical memory arbitrarily",
    "start": "1409100",
    "end": "1412480"
  },
  {
    "text": "I call this this exploit chain God fault",
    "start": "1412940",
    "end": "1417399"
  },
  {
    "text": "all right so what we have here is a",
    "start": "1421580",
    "end": "1423500"
  },
  {
    "text": "Windows 11 VM and uh I have God fault",
    "start": "1423500",
    "end": "1427760"
  },
  {
    "text": "inside of it I've modified this build of",
    "start": "1427760",
    "end": "1429559"
  },
  {
    "text": "God fault slightly to add a debug",
    "start": "1429559",
    "end": "1432020"
  },
  {
    "text": "breakpoint this VM is actually running",
    "start": "1432020",
    "end": "1434059"
  },
  {
    "text": "under a kernel debugger so I can show",
    "start": "1434059",
    "end": "1436039"
  },
  {
    "text": "you some things from kernel mode that",
    "start": "1436039",
    "end": "1437299"
  },
  {
    "text": "are not visible from user mode so I'm",
    "start": "1437299",
    "end": "1439940"
  },
  {
    "text": "going run the exploit and it's going to",
    "start": "1439940",
    "end": "1441380"
  },
  {
    "text": "break into the kernel debugger in just a",
    "start": "1441380",
    "end": "1443000"
  },
  {
    "text": "second",
    "start": "1443000",
    "end": "1444799"
  },
  {
    "text": "and the first thing we're going to do is",
    "start": "1444799",
    "end": "1446780"
  },
  {
    "text": "we're going to look at the previous mode",
    "start": "1446780",
    "end": "1448340"
  },
  {
    "text": "of the current thread",
    "start": "1448340",
    "end": "1449840"
  },
  {
    "text": "we can see here the thread is running",
    "start": "1449840",
    "end": "1451580"
  },
  {
    "text": "the godfault exploit which is actually",
    "start": "1451580",
    "end": "1453380"
  },
  {
    "text": "user mode code so the previous mode on",
    "start": "1453380",
    "end": "1455780"
  },
  {
    "text": "this thread should be one which stands",
    "start": "1455780",
    "end": "1457700"
  },
  {
    "text": "for user mode but in fact it's zero",
    "start": "1457700",
    "end": "1459919"
  },
  {
    "text": "standing which stands for kernel mode",
    "start": "1459919",
    "end": "1463779"
  },
  {
    "text": "um so the first thing that this thread",
    "start": "1465260",
    "end": "1466700"
  },
  {
    "text": "does after the exploit is successful is",
    "start": "1466700",
    "end": "1468740"
  },
  {
    "text": "it opens the physical memory device for",
    "start": "1468740",
    "end": "1470900"
  },
  {
    "text": "sectional access which means read and",
    "start": "1470900",
    "end": "1472520"
  },
  {
    "text": "write",
    "start": "1472520",
    "end": "1473419"
  },
  {
    "text": "and it's so it saves that handle in a",
    "start": "1473419",
    "end": "1476720"
  },
  {
    "text": "local variable called H section",
    "start": "1476720",
    "end": "1479980"
  },
  {
    "text": "the handle value here is one BC so we're",
    "start": "1480140",
    "end": "1482659"
  },
  {
    "text": "going to run bang handle on that and we",
    "start": "1482659",
    "end": "1484940"
  },
  {
    "text": "can see here that it is in fact the",
    "start": "1484940",
    "end": "1487220"
  },
  {
    "text": "physical memory device so we were able",
    "start": "1487220",
    "end": "1489080"
  },
  {
    "text": "to to open the physical memory device",
    "start": "1489080",
    "end": "1490460"
  },
  {
    "text": "from user mode",
    "start": "1490460",
    "end": "1492440"
  },
  {
    "text": "next thing we're going to do is we're",
    "start": "1492440",
    "end": "1494900"
  },
  {
    "text": "going to open the system process",
    "start": "1494900",
    "end": "1497120"
  },
  {
    "text": "for process all access",
    "start": "1497120",
    "end": "1499100"
  },
  {
    "text": "and",
    "start": "1499100",
    "end": "1500720"
  },
  {
    "text": "so and the value is saved in this local",
    "start": "1500720",
    "end": "1502880"
  },
  {
    "text": "variable H system process with a handle",
    "start": "1502880",
    "end": "1504919"
  },
  {
    "text": "value of 1d0",
    "start": "1504919",
    "end": "1507500"
  },
  {
    "text": "so bang handle 1d0 and then I have to do",
    "start": "1507500",
    "end": "1510380"
  },
  {
    "text": "one more step to actually see the",
    "start": "1510380",
    "end": "1511700"
  },
  {
    "text": "processor's name so I'm going to do bang",
    "start": "1511700",
    "end": "1513500"
  },
  {
    "text": "process here",
    "start": "1513500",
    "end": "1516080"
  },
  {
    "text": "and we can see it's in fact the system",
    "start": "1516080",
    "end": "1517760"
  },
  {
    "text": "process and the granted access is one",
    "start": "1517760",
    "end": "1520340"
  },
  {
    "text": "ffff which is process all access",
    "start": "1520340",
    "end": "1524620"
  },
  {
    "text": "so the root of the problem here is a",
    "start": "1527600",
    "end": "1529940"
  },
  {
    "text": "time of check time of use where",
    "start": "1529940",
    "end": "1531620"
  },
  {
    "text": "signature validation is decoupled from",
    "start": "1531620",
    "end": "1533720"
  },
  {
    "text": "paging",
    "start": "1533720",
    "end": "1534980"
  },
  {
    "text": "if only Windows had some way to validate",
    "start": "1534980",
    "end": "1538580"
  },
  {
    "text": "the hashes of pages",
    "start": "1538580",
    "end": "1542019"
  },
  {
    "text": "so I work on the elastic endpoint which",
    "start": "1544940",
    "end": "1547100"
  },
  {
    "text": "is an antivirus in EDR so I'm interested",
    "start": "1547100",
    "end": "1549500"
  },
  {
    "text": "in mitigations how do we stop this",
    "start": "1549500",
    "end": "1552320"
  },
  {
    "text": "well AV vendors can't modify the memory",
    "start": "1552320",
    "end": "1554539"
  },
  {
    "text": "manager's Behavior to require page",
    "start": "1554539",
    "end": "1556400"
  },
  {
    "text": "hashes but we can Target other points in",
    "start": "1556400",
    "end": "1559400"
  },
  {
    "text": "PPL fault exploit chain",
    "start": "1559400",
    "end": "1562900"
  },
  {
    "text": "Windows includes an exploit mitigation",
    "start": "1563059",
    "end": "1564860"
  },
  {
    "text": "that can prevent a process from loading",
    "start": "1564860",
    "end": "1566659"
  },
  {
    "text": "dlls over the network originally",
    "start": "1566659",
    "end": "1568580"
  },
  {
    "text": "intended to make payload delivery for",
    "start": "1568580",
    "end": "1570500"
  },
  {
    "text": "things like browser and office",
    "start": "1570500",
    "end": "1572419"
  },
  {
    "text": "exploitation this feature is also useful",
    "start": "1572419",
    "end": "1575120"
  },
  {
    "text": "here because PPL fault uses SMB to",
    "start": "1575120",
    "end": "1577820"
  },
  {
    "text": "achieve the desired paging Behavior a",
    "start": "1577820",
    "end": "1580100"
  },
  {
    "text": "naive approach would be to use the set",
    "start": "1580100",
    "end": "1582140"
  },
  {
    "text": "process mitigation Powershell commandlet",
    "start": "1582140",
    "end": "1583940"
  },
  {
    "text": "however that just sets a registry key",
    "start": "1583940",
    "end": "1586340"
  },
  {
    "text": "and if your attacker is an admin they",
    "start": "1586340",
    "end": "1588260"
  },
  {
    "text": "can just change the registry key",
    "start": "1588260",
    "end": "1590600"
  },
  {
    "text": "instead I wrote a driver which I'm",
    "start": "1590600",
    "end": "1592580"
  },
  {
    "text": "calling no fault that forcibly enables",
    "start": "1592580",
    "end": "1595340"
  },
  {
    "text": "the no remote images mitigation early in",
    "start": "1595340",
    "end": "1597679"
  },
  {
    "text": "the life cycle of all PPL",
    "start": "1597679",
    "end": "1600500"
  },
  {
    "text": "and here's no fault in action",
    "start": "1600500",
    "end": "1604000"
  },
  {
    "text": "so I'm going to be running a PPL fault",
    "start": "1606799",
    "end": "1609740"
  },
  {
    "text": "exploit against the uh real quick and",
    "start": "1609740",
    "end": "1613520"
  },
  {
    "text": "then I'm going to start the no fault",
    "start": "1613520",
    "end": "1615140"
  },
  {
    "text": "driver",
    "start": "1615140",
    "end": "1615980"
  },
  {
    "text": "and then I'm going to rerun the exploit",
    "start": "1615980",
    "end": "1617659"
  },
  {
    "text": "and it's going to fail",
    "start": "1617659",
    "end": "1619220"
  },
  {
    "text": "and just to prove I'm going to stop the",
    "start": "1619220",
    "end": "1621559"
  },
  {
    "text": "no fault driver now and I'm going to",
    "start": "1621559",
    "end": "1623240"
  },
  {
    "text": "rerun the same exact command and it",
    "start": "1623240",
    "end": "1625100"
  },
  {
    "text": "succeeds",
    "start": "1625100",
    "end": "1626720"
  },
  {
    "text": "and that's it",
    "start": "1626720",
    "end": "1629380"
  },
  {
    "text": "so as far as timelines go",
    "start": "1631039",
    "end": "1632960"
  },
  {
    "text": "I reported PPL fault and godfault along",
    "start": "1632960",
    "end": "1635600"
  },
  {
    "text": "with their source code to msrc in",
    "start": "1635600",
    "end": "1637880"
  },
  {
    "text": "September",
    "start": "1637880",
    "end": "1639140"
  },
  {
    "text": "I also informed them of the Angry",
    "start": "1639140",
    "end": "1640700"
  },
  {
    "text": "Orchard exploit",
    "start": "1640700",
    "end": "1642020"
  },
  {
    "text": "about a month later after a few ignored",
    "start": "1642020",
    "end": "1644600"
  },
  {
    "text": "follow-up emails I ping them on Twitter",
    "start": "1644600",
    "end": "1646760"
  },
  {
    "text": "and they close the case stating that",
    "start": "1646760",
    "end": "1648679"
  },
  {
    "text": "there would be no further action",
    "start": "1648679",
    "end": "1650779"
  },
  {
    "text": "when I announced this talk on Twitter in",
    "start": "1650779",
    "end": "1652580"
  },
  {
    "text": "February the defender team reached out",
    "start": "1652580",
    "end": "1654200"
  },
  {
    "text": "to me a few hours later asking to learn",
    "start": "1654200",
    "end": "1655760"
  },
  {
    "text": "more so I directed them to my then",
    "start": "1655760",
    "end": "1657559"
  },
  {
    "text": "five-month-old msrc report",
    "start": "1657559",
    "end": "1660320"
  },
  {
    "text": "I don't know how msrc Works internally",
    "start": "1660320",
    "end": "1662360"
  },
  {
    "text": "but their triage process left the",
    "start": "1662360",
    "end": "1664640"
  },
  {
    "text": "defender team in the dark about",
    "start": "1664640",
    "end": "1666200"
  },
  {
    "text": "vulnerabilities pertinent to Defender",
    "start": "1666200",
    "end": "1669559"
  },
  {
    "text": "this is actually the second such",
    "start": "1669559",
    "end": "1671179"
  },
  {
    "text": "experience I've had with msrc",
    "start": "1671179",
    "end": "1673700"
  },
  {
    "text": "given this sequence of events maybe the",
    "start": "1673700",
    "end": "1676100"
  },
  {
    "text": "msrc process a triage process should be",
    "start": "1676100",
    "end": "1678679"
  },
  {
    "text": "Revisited",
    "start": "1678679",
    "end": "1681220"
  },
  {
    "text": "in conclusion",
    "start": "1681799",
    "end": "1683240"
  },
  {
    "text": "it's really hard to defend against an",
    "start": "1683240",
    "end": "1685159"
  },
  {
    "text": "admin who can modify the operating",
    "start": "1685159",
    "end": "1686600"
  },
  {
    "text": "system",
    "start": "1686600",
    "end": "1687559"
  },
  {
    "text": "admins have a lot of power and attack",
    "start": "1687559",
    "end": "1689900"
  },
  {
    "text": "surface next remember that UAC is really",
    "start": "1689900",
    "end": "1693620"
  },
  {
    "text": "just a gentleman's agreement as is PPL",
    "start": "1693620",
    "end": "1697340"
  },
  {
    "text": "and the admin kernel boundary",
    "start": "1697340",
    "end": "1699440"
  },
  {
    "text": "these defense in-depth measures are",
    "start": "1699440",
    "end": "1701419"
  },
  {
    "text": "often just security through obscurity if",
    "start": "1701419",
    "end": "1703580"
  },
  {
    "text": "you know the right sequence of actions",
    "start": "1703580",
    "end": "1705260"
  },
  {
    "text": "or API calls you can walk right past",
    "start": "1705260",
    "end": "1707179"
  },
  {
    "text": "open sesame",
    "start": "1707179",
    "end": "1709880"
  },
  {
    "text": "driver signing an hvci make it seem as",
    "start": "1709880",
    "end": "1712460"
  },
  {
    "text": "though Microsoft has an interest in",
    "start": "1712460",
    "end": "1713840"
  },
  {
    "text": "protecting the kernel from admins but",
    "start": "1713840",
    "end": "1715880"
  },
  {
    "text": "when I recently demonstrated a violation",
    "start": "1715880",
    "end": "1717559"
  },
  {
    "text": "of this msrc just Shrugged",
    "start": "1717559",
    "end": "1720320"
  },
  {
    "text": "next if msrc doesn't take you seriously",
    "start": "1720320",
    "end": "1722960"
  },
  {
    "text": "try reaching out via other channels such",
    "start": "1722960",
    "end": "1724940"
  },
  {
    "text": "as MBI collaborate if you're an MBI",
    "start": "1724940",
    "end": "1726799"
  },
  {
    "text": "member or contact a member of the",
    "start": "1726799",
    "end": "1728840"
  },
  {
    "text": "defender team on Twitter",
    "start": "1728840",
    "end": "1730580"
  },
  {
    "text": "if all that fails and you really want",
    "start": "1730580",
    "end": "1732500"
  },
  {
    "text": "your bug fixed",
    "start": "1732500",
    "end": "1734360"
  },
  {
    "text": "Microsoft has de facto proven that you",
    "start": "1734360",
    "end": "1736400"
  },
  {
    "text": "must escalate it to the point of active",
    "start": "1736400",
    "end": "1738020"
  },
  {
    "text": "abuse so write an exploit make it very",
    "start": "1738020",
    "end": "1741020"
  },
  {
    "text": "easy to use and put it on GitHub",
    "start": "1741020",
    "end": "1744919"
  },
  {
    "text": "I want to take a quick moment to give a",
    "start": "1744919",
    "end": "1747320"
  },
  {
    "text": "shout out to Apple for defending their",
    "start": "1747320",
    "end": "1748640"
  },
  {
    "text": "Colonels against malicious admins I",
    "start": "1748640",
    "end": "1750799"
  },
  {
    "text": "often see iOS patch notes like this and",
    "start": "1750799",
    "end": "1753140"
  },
  {
    "text": "I hope that someday Microsoft follows",
    "start": "1753140",
    "end": "1755059"
  },
  {
    "text": "suit",
    "start": "1755059",
    "end": "1756200"
  },
  {
    "text": "maybe starting with angry orchard",
    "start": "1756200",
    "end": "1759760"
  },
  {
    "text": "once again I'm Gabe Landau",
    "start": "1760159",
    "end": "1762620"
  },
  {
    "text": "I work at elastic security any opinions",
    "start": "1762620",
    "end": "1765200"
  },
  {
    "text": "here expressed are my own",
    "start": "1765200",
    "end": "1767299"
  },
  {
    "text": "you'll be able to find the code for all",
    "start": "1767299",
    "end": "1769279"
  },
  {
    "text": "the tools I disclosed here on my GitHub",
    "start": "1769279",
    "end": "1771980"
  },
  {
    "text": "later today",
    "start": "1771980",
    "end": "1773720"
  },
  {
    "text": "uh I'm out of time but I'll happily take",
    "start": "1773720",
    "end": "1775880"
  },
  {
    "text": "any questions you may have out in the",
    "start": "1775880",
    "end": "1777320"
  },
  {
    "text": "hall or you can hit me up on Twitter",
    "start": "1777320",
    "end": "1779059"
  },
  {
    "text": "thank you",
    "start": "1779059",
    "end": "1781080"
  },
  {
    "text": "[Applause]",
    "start": "1781080",
    "end": "1785440"
  }
]