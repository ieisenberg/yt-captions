[
  {
    "start": "0",
    "end": "147000"
  },
  {
    "text": "all right so our talk's gonna be about hacking like in the movies you know when you're sitting down and you see that person",
    "start": "80",
    "end": "6960"
  },
  {
    "text": "logging into terminal and everything's kind of shooting by there's collars there's 3d animations and you think i wish",
    "start": "6960",
    "end": "15040"
  },
  {
    "text": "hacking was that way so we actually try to do some visualization of page tables um like in the movies with fancy",
    "start": "15040",
    "end": "21119"
  },
  {
    "text": "graphics not so fancy at the end though um and try to see if we get any interesting results out of that",
    "start": "21119",
    "end": "26560"
  },
  {
    "text": "um so i'm supposed to be alex radocha he was supposed to give this talk he's",
    "start": "26560",
    "end": "32880"
  },
  {
    "text": "romanian he worked at apple he works at crowdstrike he's in san francisco i'm romanian i worked at apple i work at",
    "start": "32880",
    "end": "38719"
  },
  {
    "text": "crash track i'm in san francisco so they thought i'd be a good replacement so i'm not actually alex radocha i'm actually",
    "start": "38719",
    "end": "45360"
  },
  {
    "text": "accianescu close enough i guess so i used to work on react os for a long while",
    "start": "45360",
    "end": "51199"
  },
  {
    "text": "which is a project that tries to re-implement windows 9t from the ground up so there's a lot of windows internals i",
    "start": "51199",
    "end": "56719"
  },
  {
    "text": "may have read the windows internals books they're big bulk and heavy co-authored those with mark and david",
    "start": "56719",
    "end": "62079"
  },
  {
    "text": "doing a bunch of courses ironically what do you do when you reverse windows your entire life you go",
    "start": "62079",
    "end": "68479"
  },
  {
    "text": "work an apple so i did that for a few years worked on the kernel of ios and os 10",
    "start": "68479",
    "end": "74960"
  },
  {
    "text": "and then i moved on to cross strike where i'm currently chief architect i'm here with bjorg",
    "start": "74960",
    "end": "82720"
  },
  {
    "text": "all right i'm here so i was announcing and i am actually here uh alex could be",
    "start": "82720",
    "end": "88880"
  },
  {
    "text": "here but we've got another alex right that's good enough uh i work at crossfire x2 i'm a good researcher there and yeah i do pretty",
    "start": "88880",
    "end": "94799"
  },
  {
    "text": "much like all low-level stuff x86 arm reverse engineering and you know binary fun stuff like binary",
    "start": "94799",
    "end": "100079"
  },
  {
    "text": "exploitation uh but mostly malware analysis if i exploit stuff then it's you know to learn",
    "start": "100079",
    "end": "105520"
  },
  {
    "text": "the techniques of the evil guys and develop mitigations against those uh yeah that's my twitter and blog but",
    "start": "105520",
    "end": "111520"
  },
  {
    "text": "yeah that's pretty good so i'll give it back to alex to actually do the intro thank you so",
    "start": "111520",
    "end": "116799"
  },
  {
    "text": "quick little intro paging is basically the mechanism through which modern processors",
    "start": "116799",
    "end": "122560"
  },
  {
    "text": "can give you a virtual address that maps to a physical address we don't want things touching physical memory we want",
    "start": "122560",
    "end": "128239"
  },
  {
    "text": "to have protection we want to have sharing we want to pay the exactly this so most processors implement what's called the mmu which lets you translate",
    "start": "128239",
    "end": "134879"
  },
  {
    "text": "a virtual address which is specific to a process and can have certain permissions into a physical address that's on your machine",
    "start": "134879",
    "end": "141360"
  },
  {
    "text": "that actually corresponds to memory cell on ram so you probably already know that",
    "start": "141360",
    "end": "146800"
  },
  {
    "text": "now most implementations try to pick a page size some unit of allocation",
    "start": "146800",
    "end": "152640"
  },
  {
    "start": "147000",
    "end": "147000"
  },
  {
    "text": "that makes sense how much what chunk of virtual memory should be translated to how much physical memory uh that can be four kilobytes eight",
    "start": "152640",
    "end": "159200"
  },
  {
    "text": "kilobytes two megs depending on what's called the page size most cpus also implement uh translation",
    "start": "159200",
    "end": "164640"
  },
  {
    "text": "leukocyte buffers so once we've done a translation from physical to virtual we don't have some from virtually",
    "start": "164640",
    "end": "169760"
  },
  {
    "text": "physical we don't have to keep doing it again and again and again now we're going to be talking about um three different architectures we're",
    "start": "169760",
    "end": "175920"
  },
  {
    "text": "going to talk about arm x86 and x64 most of what we've done",
    "start": "175920",
    "end": "181680"
  },
  {
    "text": "is only on arm and x6 x64 but i'll mention a little bit about x86 this paging as well in all these",
    "start": "181680",
    "end": "187920"
  },
  {
    "text": "architectures you have a nested or hierarchical system that lets you translate",
    "start": "187920",
    "end": "193360"
  },
  {
    "text": "a virtual address to physical address and this is basically based on different levels of of translation so",
    "start": "193360",
    "end": "200800"
  },
  {
    "text": "after this translation is done or during the translation we also have protection that can be applied things that say for example this page",
    "start": "200800",
    "end": "207519"
  },
  {
    "text": "this kilobyte or this four kilobyte is read only or read write or executable or read write",
    "start": "207519",
    "end": "213280"
  },
  {
    "text": "executable and also we can say if user mode can access it so if applications can touch it or if kernel can access it if",
    "start": "213280",
    "end": "219599"
  },
  {
    "text": "supervisor level applications drivers and so on uh can affect it and then there's additional technologies",
    "start": "219599",
    "end": "225120"
  },
  {
    "text": "that have been added on just like smep pxn you can google all these terms basically processors trying to be",
    "start": "225120",
    "end": "230959"
  },
  {
    "text": "smarter and smarter about protecting access to regions of memory so just to give you a quick little intro",
    "start": "230959",
    "end": "237040"
  },
  {
    "start": "235000",
    "end": "235000"
  },
  {
    "text": "for those of you who are not too familiar how paging works on the top here we've got a virtual address that's going to be",
    "start": "237040",
    "end": "243280"
  },
  {
    "text": "let's say 32 bits on 32-bit x86 what happens is you break up this",
    "start": "243280",
    "end": "249200"
  },
  {
    "text": "address into different selectors and the processor has a register called cr3",
    "start": "249200",
    "end": "255200"
  },
  {
    "text": "cr3 is a physical address that the process that the c that the os programmed into the",
    "start": "255200",
    "end": "260959"
  },
  {
    "text": "processor and this corresponds was called the page directory this will represent all the virtual addresses in that process",
    "start": "260959",
    "end": "266960"
  },
  {
    "text": "so cr3 tells us where to tell the cpu where the page directory is inside that page directory we've got",
    "start": "266960",
    "end": "272360"
  },
  {
    "text": "1024 entries the first bits in the virtual address tell us which one of those 1024 entries",
    "start": "272360",
    "end": "279120"
  },
  {
    "text": "are going to pick up and that entry points us to another table now we go to the second level",
    "start": "279120",
    "end": "284240"
  },
  {
    "text": "which is called the page table now that we have a page table it also has 1024 entries and we know which one to pick",
    "start": "284240",
    "end": "290960"
  },
  {
    "text": "by taking the next bits in the virtual address now we know which page table entry to look at which points",
    "start": "290960",
    "end": "298080"
  },
  {
    "text": "us to a four kilobyte page now we have the four kilobyte in memory and the last 12 bits in the address tell",
    "start": "298080",
    "end": "304240"
  },
  {
    "text": "us which byte in that four kilobyte region should we access and other than this of course we also",
    "start": "304240",
    "end": "310240"
  },
  {
    "text": "have the permissions that are going to be mapped in there so that's how we can go from 0x something something to an actual page",
    "start": "310240",
    "end": "315520"
  },
  {
    "text": "in memory and we also have what are called large pages if you think about you have 20 megabytes",
    "start": "315520",
    "end": "320639"
  },
  {
    "text": "of data that are all read write and as you're scanning through this 20 megabytes you're constantly doing this",
    "start": "320639",
    "end": "325919"
  },
  {
    "text": "conversion conversion conversion version well if you're gonna have a large piece of memory that has the same permission you can set what's called a large page",
    "start": "325919",
    "end": "332240"
  },
  {
    "text": "and a large page is an entry into page directory that directly points to physical memory and how much physical",
    "start": "332240",
    "end": "339440"
  },
  {
    "text": "memory does it point to well if you think about it a page table",
    "start": "339440",
    "end": "344720"
  },
  {
    "text": "has a thousand twenty four entries each entry describes four kilobytes so a page table describes",
    "start": "344720",
    "end": "350320"
  },
  {
    "text": "four megs so then a large page describes four mags directly without having to break it up in little chunks",
    "start": "350320",
    "end": "356720"
  },
  {
    "text": "now if a page entry here describes four megabytes and i've got 1024 here",
    "start": "356720",
    "end": "362479"
  },
  {
    "text": "that means the page directory describes four gigs which makes sense because we're talking about x86",
    "start": "362479",
    "end": "367840"
  },
  {
    "text": "and 32 bits so four gigs of address space which is what we have is described by one page directory",
    "start": "367840",
    "end": "373759"
  },
  {
    "text": "now intel also developed what's called pa physical azure extension with pae you can address more physical",
    "start": "373759",
    "end": "380560"
  },
  {
    "text": "memory because there's more bits for physical memory and you can have a bit that's marked as non-executable so now you can have",
    "start": "380560",
    "end": "386560"
  },
  {
    "text": "pages that are executable or non-executable in the original system they never thought of this they said",
    "start": "386560",
    "end": "391680"
  },
  {
    "text": "read write that's all we care about execute shouldn't mean anything now we know that's different the interesting thing that happens there",
    "start": "391680",
    "end": "397199"
  },
  {
    "text": "is to add that one extra bit they have to make all these entries bigger",
    "start": "397199",
    "end": "402400"
  },
  {
    "text": "and you can't just add an entry one bit because this is a 32-bit structure you don't want to have a bit structure",
    "start": "402400",
    "end": "407919"
  },
  {
    "text": "that's kind of weird so they made these 64 bits well now a page table can't fit 1024",
    "start": "407919",
    "end": "415039"
  },
  {
    "text": "entries if there's 64 bits it can only fit 512 entries and so now a page table only describes",
    "start": "415039",
    "end": "422319"
  },
  {
    "text": "two mechs so page directory would now only have a thousand twenty four entries describing two magazines so it only described two",
    "start": "422319",
    "end": "428880"
  },
  {
    "text": "gigs but the page directory entries themselves are also 64-bit now so i've only got 512 entries",
    "start": "428880",
    "end": "435120"
  },
  {
    "text": "in other words a page directory on pae when you have no execute support turned on only describes one gig so you actually",
    "start": "435120",
    "end": "441520"
  },
  {
    "text": "have another level further up which now describes which page directory you want to use and each",
    "start": "441520",
    "end": "447840"
  },
  {
    "text": "entry describes one gig and i mentioned that because as you go on 64-bit that just keeps going on",
    "start": "447840",
    "end": "453360"
  },
  {
    "text": "further and further now 64-bit we have that with those one gigs that are described in 512 entries which gives",
    "start": "453360",
    "end": "458880"
  },
  {
    "text": "us 512 gigs we have a 64-bit address space that's not enough so we have another directory",
    "start": "458880",
    "end": "464800"
  },
  {
    "text": "which describes terabytes of memory and so on and so forth in fact this is starting to get so complicated that amd gave up",
    "start": "464800",
    "end": "470080"
  },
  {
    "text": "so we don't want to do 64 bits so they captured a 48 even the most modern 64-bit processor",
    "start": "470080",
    "end": "475919"
  },
  {
    "text": "only uses 48 bits of address space because they didn't want to implement the other levels it's getting just too messy maybe one day",
    "start": "475919",
    "end": "481840"
  },
  {
    "text": "they will so what we did for the stock is to basically visualize these structures and you're just going to talk",
    "start": "481840",
    "end": "487120"
  },
  {
    "text": "more about that in terms of finding out what are all the mappings and what are the permissions behind those mappings so i'll let your",
    "start": "487120",
    "end": "494080"
  },
  {
    "text": "take off all right so as you can see alex is a",
    "start": "494080",
    "end": "499680"
  },
  {
    "text": "technical guy right he knows a lot of very technical stuff and um yeah the idea is right you know we",
    "start": "499680",
    "end": "504800"
  },
  {
    "text": "have this complicated stuff we turn it into very very pretty pictures that we can look at um and then understand it so what does a",
    "start": "504800",
    "end": "511280"
  },
  {
    "text": "hacker from a movie actually look for right i mean in the movie you just see them at looking at these pretty pictures but",
    "start": "511280",
    "end": "516399"
  },
  {
    "text": "what are they looking for in those pictures so um if they are visualizing page tables they're probably looking for",
    "start": "516399",
    "end": "522240"
  },
  {
    "text": "mappings that have constant addresses so you take the picture not only once but you take a couple of these pictures",
    "start": "522240",
    "end": "528160"
  },
  {
    "text": "and you compare them right and if the same things appear at the same place in these pictures all the time that means",
    "start": "528160",
    "end": "533680"
  },
  {
    "text": "they're always at the same address and that means basically when they're always at the same virtual address that",
    "start": "533680",
    "end": "538800"
  },
  {
    "text": "is an asl bypass because this piece of memory is actually not being randomized it's at a static fixed location",
    "start": "538800",
    "end": "544800"
  },
  {
    "text": "if it is a constant physical address it means it's always on the same you know physical chip in the ram and",
    "start": "544800",
    "end": "551200"
  },
  {
    "text": "that can be interesting for example if you do some stuff like firewire or thunderbolt attacks like you know these",
    "start": "551200",
    "end": "556720"
  },
  {
    "text": "dma attacks where you capture the physical memory if you can because those work on physical addresses so it's interesting to be able to",
    "start": "556720",
    "end": "563120"
  },
  {
    "text": "predict physical addresses and most asl aren't operating systems these days there are no mystery virtual addresses but as alex will actually show",
    "start": "563120",
    "end": "569680"
  },
  {
    "text": "later there's some stuff that sometimes on some architectures always it's the same physical location",
    "start": "569680",
    "end": "574959"
  },
  {
    "text": "and then also besides you know comparing pictures and looking for stuff that's at the same place we also look at the actual fancy colors",
    "start": "574959",
    "end": "581279"
  },
  {
    "text": "things have and these colors describe the actual protections so if there is mappings that have",
    "start": "581279",
    "end": "587040"
  },
  {
    "text": "unexpected protections that could be you know very interesting as well for example if there's an",
    "start": "587040",
    "end": "592080"
  },
  {
    "text": "uh mapping that is readable writable and executable that means i don't actually need to do return oriented",
    "start": "592080",
    "end": "598160"
  },
  {
    "text": "programming right i can take my shell code put it in the mapping and jump right there and you do the casual knobs",
    "start": "598160",
    "end": "603519"
  },
  {
    "text": "thing from the 90s um and yeah then we're also looking at you know dma memory and you know what drivers are",
    "start": "603519",
    "end": "609519"
  },
  {
    "text": "actually doing because um one of the things why we actually visualize the page tables and didn't just ask operating system hey what",
    "start": "609519",
    "end": "615839"
  },
  {
    "text": "memory is mapped how is that drivers sometimes you know depending on how they implement it they",
    "start": "615839",
    "end": "621600"
  },
  {
    "text": "don't tell the operating system we're allocating this memory here they just reserve it directly uh from the dma engine for example and",
    "start": "621600",
    "end": "628079"
  },
  {
    "text": "then you get actually different results asking the operating system or visualizing directly the data so we did",
    "start": "628079",
    "end": "634000"
  },
  {
    "start": "632000",
    "end": "632000"
  },
  {
    "text": "a lot of data collection of these page tables uh every time we wrote some you know custom hacker code so that's why that's",
    "start": "634000",
    "end": "640160"
  },
  {
    "text": "not you know awesome tool that we can release because it's architecture specific and we collected the data directly as i",
    "start": "640160",
    "end": "646000"
  },
  {
    "text": "just said from the hardware so we you know didn't ask the operating system so on android what we did to collect the",
    "start": "646000",
    "end": "651440"
  },
  {
    "text": "data is um that i both tried buying building a custom custom kernel so for the flagship",
    "start": "651440",
    "end": "657279"
  },
  {
    "text": "devices that google supports it's fairly easy to get a working source for the kernel and build a working kernel yourself",
    "start": "657279",
    "end": "663200"
  },
  {
    "text": "and we use the modified kernel collector's data from the hardware directly because you need to have the right privileges to talk to the",
    "start": "663200",
    "end": "670079"
  },
  {
    "text": "hardware in this way right and also what we did for a couple of other devices is that we uh weaponize a",
    "start": "670079",
    "end": "675839"
  },
  {
    "text": "local exploit to actually collect this data in the kernel shell code because uh for some of the devices the",
    "start": "675839",
    "end": "682720"
  },
  {
    "text": "vendors give users in the spirit of the gpl they give you a top ball of the source but it's next impossible",
    "start": "682720",
    "end": "688079"
  },
  {
    "text": "to actually build the source and deploy on the device right it's the compiler's license not not for actually building",
    "start": "688079",
    "end": "693360"
  },
  {
    "text": "your own kernel um for ios alex rat who's not here wrote a custom driver for jailbroken",
    "start": "693360",
    "end": "699600"
  },
  {
    "text": "device so he took an iphone took a public jailbreak and then wrote a custom driver to collect this data from the kernel",
    "start": "699600",
    "end": "705200"
  },
  {
    "text": "directly on x64 linux we did the custom kernel module on axis for",
    "start": "705200",
    "end": "711839"
  },
  {
    "text": "x64 os 10 we also did a custom kernel extension to collect this data and um for the windows architectures",
    "start": "711839",
    "end": "719360"
  },
  {
    "text": "actually alex worked with crash dumps so um anna for 64 bit did you actually use the custom",
    "start": "719360",
    "end": "725600"
  },
  {
    "text": "driver at some point you get physical yeah the physical stuff right so the crash times i had a custom driver there",
    "start": "725600",
    "end": "731200"
  },
  {
    "text": "so as you can see we did a lot of driver development code writing and so on and that's how we grabbed all the data",
    "start": "731200",
    "end": "737600"
  },
  {
    "text": "so how did we visualize it we used hilbert curves so what's a hilbert curve a helper curve is a so-called space",
    "start": "737600",
    "end": "743519"
  },
  {
    "text": "filling curve and you might be actually very familiar with them from visualizing the internet",
    "start": "743519",
    "end": "748800"
  },
  {
    "text": "address space right so what a hilbert curve and i'll show you some so it's easier to understand",
    "start": "748800",
    "end": "754320"
  },
  {
    "text": "it's basically just a visualization of the whole address space and in one picture and instead of you know as other people",
    "start": "754320",
    "end": "760399"
  },
  {
    "text": "for example use it to visualize ip address space we use that to visualize uh the memory address space",
    "start": "760399",
    "end": "766480"
  },
  {
    "text": "and we actually used a public implementation from a guy called aldo courtesy that's his web size and we adapted his",
    "start": "766480",
    "end": "773440"
  },
  {
    "text": "s-curve which is you know space curves and use his hilbert curve code we adapted that to um to actually visualize",
    "start": "773440",
    "end": "780079"
  },
  {
    "text": "uh the memory and had some simple data parsing to parse the data output from our data collection tools",
    "start": "780079",
    "end": "785279"
  },
  {
    "text": "so that's the basic methodology so i'm actually going to introduce a legend here in one slide so",
    "start": "785279",
    "end": "791360"
  },
  {
    "start": "786000",
    "end": "786000"
  },
  {
    "text": "i'm always referencing this what you're probably interested in is the rwx protection that you see there right um",
    "start": "791360",
    "end": "801600"
  },
  {
    "text": "so that is uh that's this one here and this one here",
    "start": "801600",
    "end": "810480"
  },
  {
    "text": "um so basically pink and uh strong blue are the interesting one because if somebody something is",
    "start": "810480",
    "end": "816399"
  },
  {
    "text": "writable and executable as i said you can just drop your shell code there and jump to it right you don't need to",
    "start": "816399",
    "end": "821519"
  },
  {
    "text": "do return on the programming so those bright colors are probably interesting what's also interesting is stuff in the",
    "start": "821519",
    "end": "827440"
  },
  {
    "text": "kernel that's read invitable right because the kernel is really interesting attack target and if something is readable and",
    "start": "827440",
    "end": "833600"
  },
  {
    "text": "writable um you can place the data in the kernel which is you know interesting if there's other",
    "start": "833600",
    "end": "838720"
  },
  {
    "text": "stuff read about writable that is not only just the heap something like this there right so this is the general colors and you",
    "start": "838720",
    "end": "844000"
  },
  {
    "text": "know the least interesting here probably is user read only well you know you can only read the data it's in user space",
    "start": "844000",
    "end": "851120"
  },
  {
    "text": "yeah so uh that's just a general methodology the really interesting stuff is looking at the pretty pictures right",
    "start": "853920",
    "end": "859600"
  },
  {
    "text": "i mean that's what everybody's here for for the pretty pictures and that's what movie hackers do as well they'll get pictures",
    "start": "859600",
    "end": "864720"
  },
  {
    "text": "um so the first set of case studies now for android operating system i guess everybody knows what that is",
    "start": "864720",
    "end": "870399"
  },
  {
    "text": "and then alex is going to take some more case studies later so um the first thing as i said is of",
    "start": "870399",
    "end": "875920"
  },
  {
    "text": "course take a couple of pictures and uh compare them with each other so what you see here is",
    "start": "875920",
    "end": "882160"
  },
  {
    "text": "what i just talked about this is the hilbert curve right so let me explain it a little bit more what you see here is add receiver right",
    "start": "882160",
    "end": "888720"
  },
  {
    "text": "and this is actually the inner process on the phone so there's not much to see here there's almost nothing here in user space",
    "start": "888720",
    "end": "894560"
  },
  {
    "text": "and recall that android is actually in linux right so on linux you have a three gigabyte one gigabyte",
    "start": "894560",
    "end": "900079"
  },
  {
    "text": "split so the lower three gigabyte are a reserve for user space and the upper gigabyte is where the actual chrome",
    "start": "900079",
    "end": "906320"
  },
  {
    "text": "is and that's talking virtual memory addresses so what you see here there's almost nothing in user space there's like you know some",
    "start": "906320",
    "end": "912880"
  },
  {
    "text": "mappings here but uh yeah that's not",
    "start": "912880",
    "end": "918240"
  },
  {
    "text": "aha so you see there's like some small mappings here so these pickled pixels there can you",
    "start": "919600",
    "end": "925120"
  },
  {
    "text": "actually even see them right so there's some stuff there",
    "start": "925120",
    "end": "932240"
  },
  {
    "text": "um but as i said right and there's like a little bit stuff here um but that's that's really it like",
    "start": "932240",
    "end": "937920"
  },
  {
    "text": "there's not really much to see and this is actually from the collection program or another actually from the internet program",
    "start": "937920",
    "end": "943519"
  },
  {
    "text": "you can see already this is blue there's something that's right about an executable right but you know nobody's going to attack in it",
    "start": "943519",
    "end": "948720"
  },
  {
    "text": "so it doesn't really matter and the thing that is you know almost fully populated is the actually the",
    "start": "948720",
    "end": "954800"
  },
  {
    "text": "kernel space because yeah it doesn't matter which process you're looking at the co always is the same",
    "start": "954800",
    "end": "960079"
  },
  {
    "text": "the memory space and you see all the kind of stuff in there so let's compare this with a fancy",
    "start": "960079",
    "end": "965680"
  },
  {
    "text": "animation to another process um this is now dhcpd right this is also on",
    "start": "965680",
    "end": "970959"
  },
  {
    "text": "the running on the phone so it's issuing dhcp request you see there's a little bit more stuff up here right",
    "start": "970959",
    "end": "976720"
  },
  {
    "text": "there's some more allocations here some stuff and yeah notice again how this is blue right",
    "start": "976720",
    "end": "982800"
  },
  {
    "text": "writable and executable but yeah some some mappings that are read only some are read only execute",
    "start": "982800",
    "end": "988079"
  },
  {
    "text": "only so it's a little bit mixed there which is already interesting because dhcp is a network demon all right why",
    "start": "988079",
    "end": "993759"
  },
  {
    "start": "990000",
    "end": "990000"
  },
  {
    "text": "by some stuff uh variable and executable there so let's compare this further um this is actually a zygote the zygote",
    "start": "993759",
    "end": "1001120"
  },
  {
    "text": "on android is a process it's like kind of the mothership process for all the java processes so every time you spin up",
    "start": "1001120",
    "end": "1008160"
  },
  {
    "text": "a new app you open a new app it's actually fogged off the cycle process and",
    "start": "1008160",
    "end": "1013519"
  },
  {
    "text": "that has an interesting effect because if you now compare these mappings here if i go to the to the next one which is",
    "start": "1013519",
    "end": "1018720"
  },
  {
    "text": "my email that's actually my actual phone if you compare these two you see that a lot of",
    "start": "1018720",
    "end": "1024319"
  },
  {
    "text": "stuff is staying in the same place right you know it's generally not so well randomized it's not spread all over the",
    "start": "1024319",
    "end": "1030000"
  },
  {
    "text": "place if you compare these two there there's a lot of stuff um here in",
    "start": "1030000",
    "end": "1035038"
  },
  {
    "text": "in in that region here that's staying at the same it's the same place right and that's a known problem actually for",
    "start": "1035039",
    "end": "1040480"
  },
  {
    "text": "android android has user space aslr and they randomize almost everything",
    "start": "1040480",
    "end": "1046079"
  },
  {
    "text": "almost um but it's always at the same addresses uh during one boot for the java apps",
    "start": "1046079",
    "end": "1052480"
  },
  {
    "text": "because they all fought from zygote and if you're familiar with linux fork means that they retain the same virtual",
    "start": "1052480",
    "end": "1057840"
  },
  {
    "text": "address space for efficiency right it you know saves you some memory but it's all in the same space right so that's",
    "start": "1057840",
    "end": "1062880"
  },
  {
    "text": "that's an interesting finding for a movie hacker we have aslr but if we're running in one process that is",
    "start": "1062880",
    "end": "1068799"
  },
  {
    "text": "fork from zygote we actually know the exact addresses that stuff will have in another process",
    "start": "1068799",
    "end": "1074480"
  },
  {
    "text": "right and then there's another interesting finding here whoops",
    "start": "1074480",
    "end": "1081200"
  },
  {
    "text": "um which is actually ah i was getting my own legend wrong the blue stuff is really really execute the pink stuff is",
    "start": "1081200",
    "end": "1087840"
  },
  {
    "text": "so interesting stuff right um so the interesting stuff is that he sees actually some java jit going on",
    "start": "1087840",
    "end": "1094320"
  },
  {
    "text": "right and that's another finding the stuff that that uh dalvik is doing it's writable and executable",
    "start": "1094320",
    "end": "1100480"
  },
  {
    "text": "so if you can predict the address of the jit in one process you know you can just place your shot up there and dump there",
    "start": "1100480",
    "end": "1106799"
  },
  {
    "text": "and now if you compare this further um to sandbox process zero which actually belongs to chrome",
    "start": "1106799",
    "end": "1112240"
  },
  {
    "text": "so chrome has a sandbox on uh android which is not really a sandbox",
    "start": "1112240",
    "end": "1117520"
  },
  {
    "text": "um it simply drops a uid um and that also forks on the chrome process and the chrome processors actually java",
    "start": "1117520",
    "end": "1123600"
  },
  {
    "text": "process work from zygote so even chrome uh has you know some stuff in the same areas",
    "start": "1123600",
    "end": "1130000"
  },
  {
    "text": "and you see the kernel stuff is always the same it's always at the same addresses i mean you know some of the kernel mappings change a",
    "start": "1130000",
    "end": "1136720"
  },
  {
    "text": "little bit if you look there in the left there but that's just you know because it's not exactly at the same time",
    "start": "1136720",
    "end": "1141760"
  },
  {
    "text": "all right so that's generally comparing android systems android processors and the first finding there is aslr on one single device",
    "start": "1141760",
    "end": "1149200"
  },
  {
    "text": "um as it is known for zygote or due to zygote does not really work",
    "start": "1149200",
    "end": "1154240"
  },
  {
    "text": "okay um let's look at a galaxy nexus capture node and this is actually the",
    "start": "1154240",
    "end": "1159600"
  },
  {
    "text": "user line process is not interesting but what is interesting about this here is the kernel um this is from another device right and",
    "start": "1159600",
    "end": "1166320"
  },
  {
    "text": "what you if you compare these two here um you see that for example here there's some stuff that's actually",
    "start": "1166320",
    "end": "1172320"
  },
  {
    "text": "not writable right if you now go to this other device the galaxy nexus device you suddenly see there's a huge section",
    "start": "1172320",
    "end": "1178720"
  },
  {
    "text": "here that's writable and executable right the section down here is writable and executable and",
    "start": "1178720",
    "end": "1184559"
  },
  {
    "text": "that's the kernel text segment so what does that mean that means basically if you do a local attack",
    "start": "1184559",
    "end": "1189600"
  },
  {
    "text": "against the kernel right for example to do a jailbreak or to just escape the sandbox from chrome",
    "start": "1189600",
    "end": "1195039"
  },
  {
    "text": "anything to get root on the local phone it's not really hard because the entire text",
    "start": "1195039",
    "end": "1200559"
  },
  {
    "text": "segment on this specific device the galaxy nexus will be writable and executable and",
    "start": "1200559",
    "end": "1206640"
  },
  {
    "text": "actually if you look at um uh geohot's active s4 exploits that's actually what",
    "start": "1206640",
    "end": "1213200"
  },
  {
    "text": "he did he used the bug that is very hard to normally use which is basically the primitive that",
    "start": "1213200",
    "end": "1219760"
  },
  {
    "text": "you gain from the bug is incrementing a single address and what he did is he",
    "start": "1219760",
    "end": "1224960"
  },
  {
    "text": "directly incremented code itself so he changed an instruction by incrementing",
    "start": "1224960",
    "end": "1230000"
  },
  {
    "text": "its representation in memory and that was only possible uh because the the kernel memory is writable and",
    "start": "1230000",
    "end": "1235679"
  },
  {
    "text": "executable so if you compare this with another device now the nexus 7 has the same issue and",
    "start": "1235679",
    "end": "1243039"
  },
  {
    "text": "there's a lot of more writable and executable code here right all of this is valuable and executable",
    "start": "1243039",
    "end": "1248480"
  },
  {
    "text": "so um nexus 7 is a tegra device right nvidia tegra is a specific chipset",
    "start": "1248480",
    "end": "1253600"
  },
  {
    "text": "and the galaxy nexus is a samsung device with a samsung chipset in there now if",
    "start": "1253600",
    "end": "1259840"
  },
  {
    "text": "you compare these devices now to the galaxy s4 which is running android 4.2.2 on an msm chipset",
    "start": "1259840",
    "end": "1268080"
  },
  {
    "text": "you will see now that actually it's a little bit better there because you have a little bit of code",
    "start": "1268080",
    "end": "1273760"
  },
  {
    "text": "here that is uh read only execute and i mean there's",
    "start": "1273760",
    "end": "1278960"
  },
  {
    "text": "all these writable executable pages all here you can still drop your shotgun barrier and jump there but the actual kernel code this year",
    "start": "1278960",
    "end": "1285679"
  },
  {
    "text": "down here is the actual kernel code this cannot be written directly to so they have the",
    "start": "1285679",
    "end": "1290960"
  },
  {
    "text": "msm kernel has a little bit better security than the other kernels and that's really",
    "start": "1290960",
    "end": "1296480"
  },
  {
    "text": "an interesting finding because why does a specific chipset have other protections than other kernels right why",
    "start": "1296480",
    "end": "1302720"
  },
  {
    "text": "is it harder to own a qualcomm chipset on a device than on say you know nvidia",
    "start": "1302720",
    "end": "1308000"
  },
  {
    "text": "attack red chipset um that's very simple to answer though",
    "start": "1308000",
    "end": "1313919"
  },
  {
    "text": "um so oh yeah and one thing i forgot um there's one thing that's really hard",
    "start": "1313919",
    "end": "1319520"
  },
  {
    "text": "to see but uh and to overlook and forget but android hackers have you know zooming capabilities",
    "start": "1319520",
    "end": "1328240"
  },
  {
    "text": "there's something here you see the the blue pixel there right and the sort of blue pixel below it's",
    "start": "1328240",
    "end": "1334080"
  },
  {
    "text": "actually an artifact from the image compressions to ignore that so um you see the one blue pixel there",
    "start": "1334080",
    "end": "1340159"
  },
  {
    "text": "right okay so that is that is actually on the nexus 7 the tegra device and then let's let's look at the galaxy",
    "start": "1340159",
    "end": "1346799"
  },
  {
    "text": "s4 right again",
    "start": "1346799",
    "end": "1352000"
  },
  {
    "text": "there's this blue wow giant crosshair and a blue pixel there right and um let's go back to one of the user",
    "start": "1352000",
    "end": "1360159"
  },
  {
    "text": "lens stuff we did and let's zoom in on that",
    "start": "1360159",
    "end": "1365039"
  },
  {
    "text": "somehow i'm not really familiar with alex awesome zooming tool",
    "start": "1365600",
    "end": "1371520"
  },
  {
    "text": "okay there's a blue pixel there right and what did i say earlier we compare pictures and there's a blue pixel that",
    "start": "1372640",
    "end": "1378880"
  },
  {
    "text": "is always at the same location so what does this blue mean you all recall from the",
    "start": "1378880",
    "end": "1384640"
  },
  {
    "text": "legend the blue stuff is user land read execute right so what does that mean we have a",
    "start": "1384640",
    "end": "1390400"
  },
  {
    "text": "user land read execute mapping that is always at the same position that might be interesting right but",
    "start": "1390400",
    "end": "1396240"
  },
  {
    "text": "what's more interesting is that you know as i said earlier the whole this gigabyte here is the kernel",
    "start": "1396240",
    "end": "1402000"
  },
  {
    "text": "space but there's a page in here that's user executable in deep inside the kernel address range",
    "start": "1402000",
    "end": "1408159"
  },
  {
    "text": "that's kind of weird right so i looked into that after you know spotting this little pixel there",
    "start": "1408159",
    "end": "1413600"
  },
  {
    "text": "it's a little bit easier if you know have a have a bigger screen right so what's that uh android observer",
    "start": "1413600",
    "end": "1419200"
  },
  {
    "start": "1416000",
    "end": "1416000"
  },
  {
    "text": "observations we have this fixed re-execute mapping at this one address so just believe me that this one blue",
    "start": "1419200",
    "end": "1424320"
  },
  {
    "text": "pixel is at the specific address there ffff00 and it's always at the same location and",
    "start": "1424320",
    "end": "1430720"
  },
  {
    "text": "it's readable and executable by user space so what is this page normally right you you",
    "start": "1430720",
    "end": "1435840"
  },
  {
    "text": "look into the architecture manuals understand what is this magic address right it looks kind of magic already",
    "start": "1435840",
    "end": "1442080"
  },
  {
    "text": "so if you read that up it's actually the arm exception vector-based address so on the arm architecture it's like a",
    "start": "1442080",
    "end": "1448320"
  },
  {
    "text": "processor and a processors have interrupts and interrupts and triggered by hardware events for example",
    "start": "1448320",
    "end": "1453600"
  },
  {
    "text": "um interrupts are triggered soft interrupts are triggered by the normal user space program to issue a system call to the",
    "start": "1453600",
    "end": "1459520"
  },
  {
    "text": "kernel and every time there's an interrupt on the arm architecture it goes to this vector page table and",
    "start": "1459520",
    "end": "1465120"
  },
  {
    "text": "and to look up the handler address for this interrupt right so why is that executable for the user",
    "start": "1465120",
    "end": "1470960"
  },
  {
    "text": "space though because this is stuff that runs and you know interrupt handling is an operating system task and user space doesn't need",
    "start": "1470960",
    "end": "1476559"
  },
  {
    "text": "to execute there well the kernel developers of linux bought arm is an amadore architecture right so",
    "start": "1476559",
    "end": "1482720"
  },
  {
    "text": "let's save some memory and um cram all we can all we need that",
    "start": "1482720",
    "end": "1487840"
  },
  {
    "text": "needs to be executable for the user space on the same page so uh what they did is basically they took some helper",
    "start": "1487840",
    "end": "1494400"
  },
  {
    "text": "code that is accessible by per the api per definition to user space and put it in the same page and because",
    "start": "1494400",
    "end": "1501760"
  },
  {
    "text": "they put it in the same page and it's you know code that's supposed to be called by user space the page must be executable user space",
    "start": "1501760",
    "end": "1508880"
  },
  {
    "text": "well but long story short what is this is an aslr bypass for android because you have",
    "start": "1508880",
    "end": "1514000"
  },
  {
    "text": "always code that you can predict the address for and then as i said earlier the kernel",
    "start": "1514000",
    "end": "1519760"
  },
  {
    "text": "text section is writable and executable on almost all kernels there is a kernel configuration setting",
    "start": "1519760",
    "end": "1526400"
  },
  {
    "text": "that's called like config underscore debug underscore read-only data but it's not set in the actual uh vendor",
    "start": "1526400",
    "end": "1532960"
  },
  {
    "text": "configurations right when you get a vendor kernel on the phone because you just bought the phone and don't flash a custom kernel like i think 99",
    "start": "1532960",
    "end": "1539840"
  },
  {
    "text": "of the population um then this is not set so you have a variable in executable kernel",
    "start": "1539840",
    "end": "1545679"
  },
  {
    "text": "the only exception was this 3.4 msm kernel which has a read-only text section and that's actually because qualcomm did",
    "start": "1545679",
    "end": "1552240"
  },
  {
    "text": "a really good job so i want to call them all for being awesome they have a custom kernel patch which is called which adds a config setting that",
    "start": "1552240",
    "end": "1558960"
  },
  {
    "text": "says config strict memory rwx which was written by qualcomm engineers and that is why the qualcomm kernels",
    "start": "1558960",
    "end": "1566159"
  },
  {
    "text": "have non-writable attacks non-writable kernel code they kind of overlooked two megabytes",
    "start": "1566159",
    "end": "1574000"
  },
  {
    "text": "that are still writable and executable though do you see them here in this picture",
    "start": "1574000",
    "end": "1579600"
  },
  {
    "text": "right this is all right this is writable and executable here right you see that",
    "start": "1579600",
    "end": "1585200"
  },
  {
    "text": "these these two blobs there are one megabyte each and again they have a fixed address",
    "start": "1585200",
    "end": "1590960"
  },
  {
    "text": "right this one this right down there this is address c 0 0 0 and so on it's where the the kernel",
    "start": "1590960",
    "end": "1596480"
  },
  {
    "text": "actually starts and that's writable next rule again so again on qualcomm kernels you can you know just drop your shell code in there",
    "start": "1596480",
    "end": "1603200"
  },
  {
    "text": "uh write it and execute it directly so um you don't need to do any return onto programming in the kernel even on",
    "start": "1603200",
    "end": "1609360"
  },
  {
    "text": "qualcomm but you cannot directly modify the original code okay so um i introduced all these",
    "start": "1609360",
    "end": "1616080"
  },
  {
    "start": "1614000",
    "end": "1614000"
  },
  {
    "text": "findings now how do we actually practically bypass aslr on android when i wrote",
    "start": "1616080",
    "end": "1621360"
  },
  {
    "text": "these slides i looked at android 4.2.2 i briefly verified that it's still the case for 4.3 so this is really like",
    "start": "1621360",
    "end": "1627760"
  },
  {
    "text": "you know latest android version asr bypass so there's a couple of interesting gadgets that they put in",
    "start": "1627760",
    "end": "1633360"
  },
  {
    "text": "this page that are you know used for helping the user space there's one gadget that is called k user",
    "start": "1633360",
    "end": "1638399"
  },
  {
    "text": "compare exchange and it always has this one very specific address there",
    "start": "1638399",
    "end": "1643919"
  },
  {
    "text": "and what it basically does is if and only if the value pointed to by register 2 is",
    "start": "1643919",
    "end": "1650320"
  },
  {
    "text": "the same as the value contained in register 0 then it actually assigns to this memory location the",
    "start": "1650320",
    "end": "1655760"
  },
  {
    "text": "value of r1 or in other words you know you give it two registers that contains values and one pointer and if the um well you add",
    "start": "1655760",
    "end": "1663600"
  },
  {
    "text": "the pointer is the one that you give the first you know that's a compare part it actually exchanges this to the other value you",
    "start": "1663600",
    "end": "1669279"
  },
  {
    "text": "gave right it's useful if you do like uh atomic you know unlocked walking off linked list in a",
    "start": "1669279",
    "end": "1674880"
  },
  {
    "text": "thread safe manner for example so one of one of the uses for this gadget would be for example if you can",
    "start": "1674880",
    "end": "1680720"
  },
  {
    "text": "invoke a code like you say you have a v table pointer over write bug um if you can invoke this code and",
    "start": "1680720",
    "end": "1686159"
  },
  {
    "text": "control these registers which is very very common because these firs are the first three parameters passive function",
    "start": "1686159",
    "end": "1692399"
  },
  {
    "text": "then you can repeatedly invoke this and brute force the address of a function and you know without having any info leak you can create an info",
    "start": "1692399",
    "end": "1699200"
  },
  {
    "text": "in this way from code execution or because it's at a fixed address and you know",
    "start": "1699200",
    "end": "1704480"
  },
  {
    "text": "this is composed of multiple instructions this gadget you can just jump past the equality check pass the compare part",
    "start": "1704480",
    "end": "1710960"
  },
  {
    "text": "and actually just use what's called the exchange part and turn this into an arbitrary write gadget which is again useful you",
    "start": "1710960",
    "end": "1717200"
  },
  {
    "text": "know if you want to write to stuff there's a another gadget that does exactly the same thing for 64-bit values",
    "start": "1717200",
    "end": "1724799"
  },
  {
    "text": "so it actually compares two machine words and also has a fixed location and",
    "start": "1724799",
    "end": "1730720"
  },
  {
    "text": "um there's another interesting piece in there and that is the actual interrupt handler for the software",
    "start": "1730720",
    "end": "1736880"
  },
  {
    "text": "interrupts which is depicted here which loads well the value to branch to so this is a bit",
    "start": "1736880",
    "end": "1742880"
  },
  {
    "text": "of arm assembly right it says load into the pc the the program counter register the value at program",
    "start": "1742880",
    "end": "1748880"
  },
  {
    "text": "counter register plus something so it dereferences another address which is here on the right oh yeah you can see if i'm putting with",
    "start": "1748880",
    "end": "1755600"
  },
  {
    "text": "my hand on my own screen so this is the actual address it's loading the value from as you can see this is still on the same",
    "start": "1755600",
    "end": "1761039"
  },
  {
    "text": "page so we can load this value and this is the destination address this is jumping too what does that mean",
    "start": "1761039",
    "end": "1766240"
  },
  {
    "text": "it means this is a kernel information leak and it licks the actual code address of the system",
    "start": "1766240",
    "end": "1771440"
  },
  {
    "text": "call handler so if we are using a local attacker who wants to do a jailbreak who wants to elevate the route",
    "start": "1771440",
    "end": "1777200"
  },
  {
    "text": "and we we don't have you know information about the kernel we can get actually the address of the system called handler from this",
    "start": "1777200",
    "end": "1783600"
  },
  {
    "text": "information leak and in combination with the information we have before that on many kernels and",
    "start": "1783600",
    "end": "1789200"
  },
  {
    "text": "many devices the actual kernel is writable as well we can now get the address of the system call handler and we can dial it",
    "start": "1789200",
    "end": "1795600"
  },
  {
    "text": "directly right to it so we can actually modify the code of the system called handler to do you know whatever give us",
    "start": "1795600",
    "end": "1801120"
  },
  {
    "text": "the route okay so that's actually the asodb bypass and",
    "start": "1801120",
    "end": "1806320"
  },
  {
    "text": "yeah because we're good guys we try to responsibly disclose this um so we because arm linux",
    "start": "1806320",
    "end": "1814720"
  },
  {
    "text": "mostly affects android these days i mean you know another people use uh linux on arm but yeah 99",
    "start": "1814720",
    "end": "1821600"
  },
  {
    "text": "of the linux installations on arm are really android we talked to google who put us in touch with you know a",
    "start": "1821600",
    "end": "1826720"
  },
  {
    "text": "couple of peoples and it was a very very quick patch from russell king from arm who i want to call out",
    "start": "1826720",
    "end": "1832240"
  },
  {
    "text": "nice job i reported this and three days later he came with an actual kernel patch which adds some intra page randomization",
    "start": "1832240",
    "end": "1840880"
  },
  {
    "text": "very nice idea the problem is that this is only a partial solution",
    "start": "1840880",
    "end": "1846159"
  },
  {
    "text": "for the because the user space helpers still need to have this fixed address because of backward compatibility right",
    "start": "1846159",
    "end": "1853440"
  },
  {
    "text": "if you look at bionic the lip c on android it actually relies on this hard coded address so um",
    "start": "1853440",
    "end": "1859200"
  },
  {
    "text": "you know the actual user land on android kind of relies on this aslr bypass versus fixed code location in their own",
    "start": "1859200",
    "end": "1864880"
  },
  {
    "text": "code and it also modified the vector handlers to branch into an adjacent",
    "start": "1864880",
    "end": "1870480"
  },
  {
    "text": "page so that you can actually that is not mapped readable to user space anymore so you kind of leak kernel addresses that way at least and",
    "start": "1870480",
    "end": "1876720"
  },
  {
    "text": "then instead of being filled with knobs editors right now the page is actually filled with undefined instructions with",
    "start": "1876720",
    "end": "1882320"
  },
  {
    "text": "which will generate an exception if you branch to them so you know you cannot like if you just randomize it right now when",
    "start": "1882320",
    "end": "1888399"
  },
  {
    "text": "it's filled with knobs you just jump into kind of what is sled placed there by the operating system but with that nice modification",
    "start": "1888399",
    "end": "1894559"
  },
  {
    "text": "you can actually generate an exception and it's really nice it took only three days and i was like wow",
    "start": "1894559",
    "end": "1900000"
  },
  {
    "text": "they patched up fast um but actually it's still not patched why is it not patch why is that patch",
    "start": "1900000",
    "end": "1906000"
  },
  {
    "text": "available well i mean even if it was available it probably would take years until you really find it on a device",
    "start": "1906000",
    "end": "1911440"
  },
  {
    "text": "because that's android right but even they didn't make the patch available yet because they use the entropy the random number",
    "start": "1911440",
    "end": "1918480"
  },
  {
    "text": "generator in the kernel to do the randomization of the addresses and if you boot a phone it doesn't have",
    "start": "1918480",
    "end": "1923919"
  },
  {
    "text": "any sources of entropy to see the random number generator so what that means is that if you turn on the phone it always is at the",
    "start": "1923919",
    "end": "1931200"
  },
  {
    "text": "same random location so i mean the location isn't static anymore but",
    "start": "1931200",
    "end": "1936880"
  },
  {
    "text": "the random number is always the same so the patch is awesome but kind of ineffective",
    "start": "1936880",
    "end": "1942640"
  },
  {
    "text": "um and so what you know there's no huge back and forth between security at kernel.org and this arm developer which",
    "start": "1942640",
    "end": "1948640"
  },
  {
    "text": "was you know really fun and um hopefully this patch will make it like soon is there a direct remark to",
    "start": "1948640",
    "end": "1957360"
  },
  {
    "text": "that yeah generally yes but um the the whole",
    "start": "1960840",
    "end": "1968159"
  },
  {
    "text": "the whole discussion now that goes on on this mailing list is basically this is an early init call and this is a",
    "start": "1968159",
    "end": "1974320"
  },
  {
    "text": "late init call and you know it's all about any calls and at that point you can't read the block devices yet so the vector",
    "start": "1974320",
    "end": "1981360"
  },
  {
    "text": "page is being randomized so early in the boot process that the saved entropy is not available so there was some ideas we should save",
    "start": "1981360",
    "end": "1987360"
  },
  {
    "text": "some entropy in the bootloader to pass a boot argument and all fancy ideas but in the end it was a very amusing back",
    "start": "1987360",
    "end": "1993120"
  },
  {
    "text": "and forth for one month between kernel people saying each other like yeah we suck at security and uh you know we need to be",
    "start": "1993120",
    "end": "1999679"
  },
  {
    "text": "more effective all right that's that's my my little bashing on linux and yeah",
    "start": "1999679",
    "end": "2004880"
  },
  {
    "text": "thank you all right so the next case study um alex it was some dumps um is a surface",
    "start": "2004880",
    "end": "2010320"
  },
  {
    "text": "rt so we'll actually talk about surface rt now and then windows eight six six four bits so some",
    "start": "2010320",
    "end": "2016480"
  },
  {
    "text": "of the stuff we're to see here is going to be 32-bit and arm and then we're going to go to x64 so",
    "start": "2016480",
    "end": "2022320"
  },
  {
    "text": "some of the issues here are going to be arm specific some of the other issues are going to be 32-bit specific um so starting with vista windows has",
    "start": "2022320",
    "end": "2028720"
  },
  {
    "start": "2026000",
    "end": "2026000"
  },
  {
    "text": "what's called a kernel virtual address space allocator that basically picks a available location using a",
    "start": "2028720",
    "end": "2035200"
  },
  {
    "text": "random allocator every time anyone in the kernel needs a memory so if you want some heap you want some stack you want you want to load a driver",
    "start": "2035200",
    "end": "2041600"
  },
  {
    "text": "there is no fixed address like there used to be an xp and xp and windows internals we had two pages that told you every",
    "start": "2041600",
    "end": "2047440"
  },
  {
    "text": "single address and what was going to be there on every machine in the world um which was nice for hackers so investing later it's all",
    "start": "2047440",
    "end": "2053839"
  },
  {
    "text": "kind of randomized by virtue that there's an allocator that always picks a page so it's quite fragmented um now",
    "start": "2053839",
    "end": "2061280"
  },
  {
    "text": "however the issue was that even though the locations were getting randomized they were all read write and execute and so you had",
    "start": "2061280",
    "end": "2067520"
  },
  {
    "text": "these large chunks where yes i might not know what's in that chunk but i know three dot execute and that could be useful already in",
    "start": "2067520",
    "end": "2074240"
  },
  {
    "text": "windows 8 they did a lot of work to not only randomize these regions of 32-bit but also to make sure that",
    "start": "2074240",
    "end": "2080480"
  },
  {
    "text": "they're not read write execute because there's no reason for them to be read write execute in many cases this is a slide i bought i",
    "start": "2080480",
    "end": "2087280"
  },
  {
    "text": "borrowed from matt miller's presentation at black hat i think last year uh if not two years ago i think last",
    "start": "2087280",
    "end": "2093919"
  },
  {
    "text": "year about the changes they had done in windows 8 regarding this issue um and if you see",
    "start": "2093919",
    "end": "2099520"
  },
  {
    "text": "here on 64-bit windows 7 all of this was executable and it all",
    "start": "2099520",
    "end": "2106960"
  },
  {
    "text": "became non-executable um the other thing they did in windows 8 was to add this non-paged pool that's also",
    "start": "2106960",
    "end": "2113680"
  },
  {
    "text": "non-executable so they added a separate subtype um and that's not executable and then on",
    "start": "2113680",
    "end": "2118720"
  },
  {
    "text": "arm the default so executable non-page full still exists but the default is",
    "start": "2118720",
    "end": "2124000"
  },
  {
    "text": "non-executable non-payable on x64 drivers have to opt in for it though um but still the end result of this was",
    "start": "2124000",
    "end": "2129760"
  },
  {
    "text": "that almost everything well everything except was supposed to be executable on windows 8 is non-executable but we'll see there's",
    "start": "2129760",
    "end": "2136079"
  },
  {
    "text": "actually some small piece here that was actually missed um and there are things that are supposed to be executable and are they",
    "start": "2136079",
    "end": "2142480"
  },
  {
    "text": "static so that's what i try to look for number one were there things that this missed were the things that were still",
    "start": "2142480",
    "end": "2147680"
  },
  {
    "text": "executable and number two were the things that are supposed to be executable but are not getting acellard properly so we either",
    "start": "2147680",
    "end": "2153040"
  },
  {
    "text": "have an aclr failure or we have a failure to mark a region non-executable when it doesn't need to",
    "start": "2153040",
    "end": "2158400"
  },
  {
    "text": "be so surface rt runs the windows 8 32-bit kernel very locked down though compared to a",
    "start": "2158400",
    "end": "2164640"
  },
  {
    "text": "regular 32-bit kernel so you're not allowed running anything else but microsoft signed binaries",
    "start": "2164640",
    "end": "2169680"
  },
  {
    "text": "or store applications which also have to be signed and they run a sandbox so you can only run sandbox apps",
    "start": "2169680",
    "end": "2175200"
  },
  {
    "text": "or microsoft apps or microsoft or their partner drivers it's a cortex a9 processor and one of",
    "start": "2175200",
    "end": "2181920"
  },
  {
    "text": "the nice things that microsoft did is when they decided they were going to join the arm game they went and joined",
    "start": "2181920",
    "end": "2187520"
  },
  {
    "text": "the arm architecture board um and well they're already there because of c but they pushed harder and they actually helped add a lot of",
    "start": "2187520",
    "end": "2193839"
  },
  {
    "text": "security to arm one of the things they did is that vector page that york talked about at fff zero zero",
    "start": "2193839",
    "end": "2199440"
  },
  {
    "text": "well microsoft sat down and said wait so you guys have a page that's always fixed and user read execute that sounds",
    "start": "2199440",
    "end": "2205599"
  },
  {
    "text": "like a bad idea um so the cortex a9 for example actually has a register where you can say i don't",
    "start": "2205599",
    "end": "2210880"
  },
  {
    "text": "want it at fff zero zero i'm going to reprogram the processor to put that vector page somewhere else so they do a",
    "start": "2210880",
    "end": "2215920"
  },
  {
    "text": "lot of these a lot of interesting functionality on the chip to actually be more secure than your vanilla linux arm",
    "start": "2215920",
    "end": "2222560"
  },
  {
    "text": "kernel for example but nothing is nothing's perfect one of the things that they helped arm do is",
    "start": "2222560",
    "end": "2227920"
  },
  {
    "text": "introduce a new mirror management model so there's actually an access bit on um that's used on surface in linux",
    "start": "2227920",
    "end": "2234720"
  },
  {
    "text": "you have to do in software unless you're running on new architecture they also have no execute support so they they do",
    "start": "2234720",
    "end": "2240960"
  },
  {
    "text": "use a lot of things and for reference i just put how pte looks like in windows on arm you get a few",
    "start": "2240960",
    "end": "2246079"
  },
  {
    "text": "bits that you can use for yourself in an os um so there's a dirty bit there's a global bit etc there's one feature that",
    "start": "2246079",
    "end": "2252880"
  },
  {
    "text": "arm has which is called privileged execute never which is so much a smap on x64 familiar with it that one's not",
    "start": "2252880",
    "end": "2259040"
  },
  {
    "text": "used on surface because the chip doesn't support it but other than that it is pretty much",
    "start": "2259040",
    "end": "2264640"
  },
  {
    "text": "just like the same thing you'd see on x86 in terms of features like no execute and randomization so you've got a standard split on",
    "start": "2264640",
    "end": "2271520"
  },
  {
    "start": "2265000",
    "end": "2265000"
  },
  {
    "text": "windows which unlike linux which uses three gigs and one gigs on windows we have two gigs and two gigs",
    "start": "2271520",
    "end": "2276960"
  },
  {
    "text": "so if you look at this picture i'm gonna make a little separator here",
    "start": "2276960",
    "end": "2282160"
  },
  {
    "text": "what's above this green line is basically going to be your one gig user space in your other gig of user space",
    "start": "2282160",
    "end": "2287359"
  },
  {
    "text": "um if you're familiar with the windows os you'll recognize this region as being the region where dlls usually load",
    "start": "2287359",
    "end": "2292880"
  },
  {
    "text": "microsoft dlls always load in yeah 0x6000 and higher so that's all user executable pages and then below",
    "start": "2292880",
    "end": "2300720"
  },
  {
    "text": "this green line we have in here this is all the heap and the stack so uh non-executable memory and you can see",
    "start": "2300720",
    "end": "2307119"
  },
  {
    "text": "pretty much i mean i could zoom in but pretty much all of it is not executable as you'd expect down here we have the kernel and so we",
    "start": "2307119",
    "end": "2313920"
  },
  {
    "text": "have things like the heap the page pool the stacks and then the colored areas that are bright are",
    "start": "2313920",
    "end": "2320160"
  },
  {
    "text": "going to be kernel code driver code and then the blobs that are here these are going to be",
    "start": "2320160",
    "end": "2325440"
  },
  {
    "text": "writable and executable ask will these blocks here and of course they're the same thing and try to see",
    "start": "2325440",
    "end": "2332000"
  },
  {
    "text": "are there regions that are that are identical and so what we've observed is that there's",
    "start": "2332000",
    "end": "2338240"
  },
  {
    "text": "randomization in terms of what piece of data goes in each region but the actual regions because",
    "start": "2338240",
    "end": "2345119"
  },
  {
    "text": "they're 32-bit are quite similar so if i can go to this slide for a second",
    "start": "2345119",
    "end": "2350400"
  },
  {
    "text": "this is one machine this is another machine and in the middle we",
    "start": "2350400",
    "end": "2356240"
  },
  {
    "text": "have the end of that picture so basically putting the two pictures together and keeping only where we're the same and you can",
    "start": "2356240",
    "end": "2362320"
  },
  {
    "text": "see that everything that you see there in the middle is identical across both machines now two machines isn't isn't isn't great",
    "start": "2362320",
    "end": "2367760"
  },
  {
    "text": "for sample size um but if you took 10 20 machines you'd find a slightly smaller region but they still would be",
    "start": "2367760",
    "end": "2373599"
  },
  {
    "text": "regions that match and what you're basically seeing is you're seeing non-page pool which is a heap or page which is also to keep be the",
    "start": "2373599",
    "end": "2379760"
  },
  {
    "text": "same place but yes the pool is at the same place but the contents are still randomized so the",
    "start": "2379760",
    "end": "2385200"
  },
  {
    "text": "heap allocator will pick different addresses within that blob for a new allocation so likely you're not going to find static",
    "start": "2385200",
    "end": "2392000"
  },
  {
    "text": "data but you're going to find static regions where data can be found and so if all you're looking for in your",
    "start": "2392000",
    "end": "2397200"
  },
  {
    "text": "exploit is i need a place to dump some code um so i don't need to do a rob slab but i just",
    "start": "2397200",
    "end": "2402320"
  },
  {
    "text": "need to basically write somewhere where i where i know it's going to be writable you can still leverage that fact the data that's there is not going to be",
    "start": "2402320",
    "end": "2408720"
  },
  {
    "text": "constant but if you don't care about the data just that you have a location that's definitely useful",
    "start": "2408720",
    "end": "2414720"
  },
  {
    "text": "um the other thing that was interesting is that the vector page the one that york mentioned ffff000",
    "start": "2414720",
    "end": "2422240"
  },
  {
    "text": "is actually uh read and execute which is interesting because i just said",
    "start": "2422240",
    "end": "2427280"
  },
  {
    "text": "windows doesn't use that windows has a fancy other feature so why is it there we'll see in a second the other thing is that iospace mappings",
    "start": "2427280",
    "end": "2433599"
  },
  {
    "text": "so things like the frame buffer things like the registers that belong to different devices they're actually",
    "start": "2433599",
    "end": "2438640"
  },
  {
    "text": "mapped read write execute in many many cases now in windows 8 the security team added",
    "start": "2438640",
    "end": "2443680"
  },
  {
    "text": "a flag that lets you make the i o mappings non-executable it's kind of hacky where you have to",
    "start": "2443680",
    "end": "2449040"
  },
  {
    "text": "orient a flag in a place where you're not supposed to put in flags but they did it that way for backward compatibility so it's likely that some",
    "start": "2449040",
    "end": "2455599"
  },
  {
    "text": "of the vendors like nvidia for example that wrote a lot of drivers for surface didn't use that flag and so a lot of the",
    "start": "2455599",
    "end": "2461680"
  },
  {
    "text": "iospace mappings are read write execute on the other hand you're talking about device memory so the fact that you can",
    "start": "2461680",
    "end": "2467200"
  },
  {
    "text": "write into you know the vga buy it well not biased because it's surface but the fact you can you know override efi or write something like",
    "start": "2467200",
    "end": "2473839"
  },
  {
    "text": "that may not be necessarily interesting um so",
    "start": "2473839",
    "end": "2478880"
  },
  {
    "text": "the other thing we saw um was that in userlined everything was always random we didn't",
    "start": "2478880",
    "end": "2486000"
  },
  {
    "text": "get any picture where i mean of course we only had a few devices but we didn't get any picture where there was anything similar in user",
    "start": "2486000",
    "end": "2492160"
  },
  {
    "text": "mode so in user mode from one device to another from one boot to another um everything was was was randomized now",
    "start": "2492160",
    "end": "2498240"
  },
  {
    "text": "obviously with through a thousand devices there would have been some mappings that are similar um but a much much better job in the",
    "start": "2498240",
    "end": "2503599"
  },
  {
    "text": "current all those iospace mappings um were causing an issue there",
    "start": "2503599",
    "end": "2509440"
  },
  {
    "text": "so all those places that i mentioned which are constant so the data is not constant but the fact that the read",
    "start": "2509440",
    "end": "2515040"
  },
  {
    "text": "write is constant are places where you could drop in a payload and some of those areas are read write execute constant and so you know you can always",
    "start": "2515040",
    "end": "2521760"
  },
  {
    "text": "drop a payload in there um the other thing that was interesting which is not really a security issue but",
    "start": "2521760",
    "end": "2527440"
  },
  {
    "text": "it's kind of odd is that that little dot that blue dot it's there in windows 2 which is weird because the vectors are",
    "start": "2527440",
    "end": "2534880"
  },
  {
    "text": "supposed to be the v bar register so what microsoft does is they put the vector table in the kernel and because they randomize the kernel",
    "start": "2534880",
    "end": "2540800"
  },
  {
    "text": "the v bar the virtual base at the vector based address is always different if for whatever reason maybe",
    "start": "2540800",
    "end": "2546880"
  },
  {
    "text": "some leftover code who knows zero 0x ffff000 exists and it is readable and executable",
    "start": "2546880",
    "end": "2553839"
  },
  {
    "text": "but there's nothing there it's all zeros so probably leftover something i actually need to check if 8.1 fixes but",
    "start": "2553839",
    "end": "2560960"
  },
  {
    "text": "it's it's a naughty so you can't write to it it's not useful and you can execute zeros which don't really mean anything",
    "start": "2560960",
    "end": "2566240"
  },
  {
    "text": "on our physical memory again we took two devices and in the middle",
    "start": "2566240",
    "end": "2572160"
  },
  {
    "text": "we ended um and again what you're seeing is device memory here so of course device",
    "start": "2572160",
    "end": "2578240"
  },
  {
    "text": "memory is going to be equal it's always going to be the same physical address on every machine um and then here's where you see the",
    "start": "2578240",
    "end": "2585760"
  },
  {
    "text": "um what we call the case xero mapping so the windows bootloader always puts the boot images and its",
    "start": "2585760",
    "end": "2591119"
  },
  {
    "text": "allocations very very at the beginning of physical memory so that it can map easily to virtual memory",
    "start": "2591119",
    "end": "2596319"
  },
  {
    "text": "um so there are some mappings that are always constant but within that mapping region which drivers that got loaded aware are",
    "start": "2596319",
    "end": "2602079"
  },
  {
    "text": "randomized so you know that in ram at that location there's going to be a driver there but you don't necessarily",
    "start": "2602079",
    "end": "2607359"
  },
  {
    "text": "know um which one um in terms of user mode again we looked at ie for example",
    "start": "2607359",
    "end": "2613359"
  },
  {
    "text": "and there was no obvious jit region there was no obvious thing that was static across one machine to to another",
    "start": "2613359",
    "end": "2621200"
  },
  {
    "text": "so the other thing we do is look at the windows 8 64-bit so on 64-bit unlike that dynamic",
    "start": "2621200",
    "end": "2628240"
  },
  {
    "text": "allocator which picks a page every time for away needs to go when the design is certificate address",
    "start": "2628240",
    "end": "2633599"
  },
  {
    "text": "space they say well let's just do it expedited and hard code addresses because we have such a gigantically large address space",
    "start": "2633599",
    "end": "2641520"
  },
  {
    "text": "to 128 terabytes um that we don't really need to start allocating bits and",
    "start": "2641520",
    "end": "2646960"
  },
  {
    "text": "it's going to fragment and make it too much of a mess so we'll just pick some large regions and make them static but the order in which we allocate",
    "start": "2646960",
    "end": "2652960"
  },
  {
    "text": "things in those regions will change so the idea is that yes i know that drivers always start at ffff something",
    "start": "2652960",
    "end": "2659040"
  },
  {
    "text": "but which drivers there will always be will always be different so most there's these chunks of memory",
    "start": "2659040",
    "end": "2664319"
  },
  {
    "text": "and they're all about 128 gigs or 512 gigs or a terabyte depending on what what's needed to",
    "start": "2664319",
    "end": "2670960"
  },
  {
    "text": "what's the right space there so i'm not going to bore you with going over to stable but basically this",
    "start": "2670960",
    "end": "2677440"
  },
  {
    "text": "you know you'll have the slides this is an entire address-based map of what the 64-bit kernel of windows has so um you know",
    "start": "2677440",
    "end": "2684560"
  },
  {
    "text": "there's this thing called hyperspace for example and hyperspace is always going to be 512 gigs between these memory ranges there's a",
    "start": "2684560",
    "end": "2691440"
  },
  {
    "text": "system share data page which is four kilobytes and it's always going to be at this address",
    "start": "2691440",
    "end": "2697119"
  },
  {
    "text": "um drivers are always going to be inside this 512 gig region kernel stacks boot loaded drivers",
    "start": "2697119",
    "end": "2705760"
  },
  {
    "text": "post boot loader drivers i o mappings kernel stacks always going to be in this region the page type always",
    "start": "2705760",
    "end": "2711200"
  },
  {
    "text": "going to be this region or a little bit over it if it gets too big um with sys and and all the graphics system",
    "start": "2711200",
    "end": "2718240"
  },
  {
    "text": "driver is always going to be in this region um your cache system files are all going to be in this region and so on and so",
    "start": "2718240",
    "end": "2723359"
  },
  {
    "text": "forth now where which file goes where again is supposed to be uh random",
    "start": "2723359",
    "end": "2728480"
  },
  {
    "text": "so these are eight dumps um of eight different machines and statically it's hard to see exactly",
    "start": "2728480",
    "end": "2734880"
  },
  {
    "text": "how much they change so i've got a little slideshow just to show you that it's it's quite varied",
    "start": "2734880",
    "end": "2742240"
  },
  {
    "text": "so i'm going to use the windows slideshow feature and it kind of almost looks like uh the game of life",
    "start": "2742480",
    "end": "2749119"
  },
  {
    "text": "so there might be the same you know color to place but what it's in that color is always going to change and if you look at the drivers",
    "start": "2750800",
    "end": "2757520"
  },
  {
    "text": "it's hard to see this projector but those purple dots over there kind of changing all the time it's also",
    "start": "2757520",
    "end": "2763359"
  },
  {
    "text": "funny to see how the randomization algorithms work you can't see it on projector but there's a pixel that actually has almost",
    "start": "2763359",
    "end": "2770800"
  },
  {
    "text": "an orbit so basically orbits because it's picking random points probably with a modulo",
    "start": "2770800",
    "end": "2776240"
  },
  {
    "text": "and each time it's going somewhere else so fairly uh different except",
    "start": "2776240",
    "end": "2782400"
  },
  {
    "text": "this little that's dotted just at the bottom so you won't be able to see it which is gonna which is called",
    "start": "2782400",
    "end": "2788720"
  },
  {
    "text": "the hal heap but that's not executable so it's not the end of the world but we noticed by basically going over",
    "start": "2788720",
    "end": "2794560"
  },
  {
    "text": "the actual data and this is the physical dump again it's very hard to see because it's a lot of pixels",
    "start": "2794560",
    "end": "2800640"
  },
  {
    "text": "but physical memory also was quite different so what we noticed that there were some",
    "start": "2800640",
    "end": "2806640"
  },
  {
    "start": "2805000",
    "end": "2805000"
  },
  {
    "text": "small purple dots so some small read write and execute dots that were at",
    "start": "2806640",
    "end": "2811680"
  },
  {
    "text": "fixed locations one of them for example was fffs",
    "start": "2811680",
    "end": "2817280"
  },
  {
    "text": "user it seems random it's in the hyperspace range um and if you pick up your handy windows",
    "start": "2817280",
    "end": "2823520"
  },
  {
    "text": "in charles book it's where the per process working set list is now i'm not going to mention what the working set list is",
    "start": "2823520",
    "end": "2828960"
  },
  {
    "text": "but it's basically a memory management structure that's used by uh the kernel and every process it's",
    "start": "2828960",
    "end": "2834720"
  },
  {
    "text": "written in the book it's not a bug always has the same address fff7001 but what's interesting is that for",
    "start": "2834720",
    "end": "2840960"
  },
  {
    "text": "whatever reason it's marked executable this is just data there's no reason why the working settlers should be executable",
    "start": "2840960",
    "end": "2846000"
  },
  {
    "text": "this is likely something that just got forgotten when they did the windows 8 cleanup now i actually looked over the data and",
    "start": "2846000",
    "end": "2852720"
  },
  {
    "text": "in some cases on some machines you could actually get useful rob gadgets out of it so it so happened that some working said list entry had just",
    "start": "2852720",
    "end": "2860319"
  },
  {
    "text": "the right hexadecimal data that it corresponded to a call rdx red instruction or another working cell",
    "start": "2860319",
    "end": "2866480"
  },
  {
    "text": "list entry correspondent to you know add eax 1 rent but every machine is going to have",
    "start": "2866480",
    "end": "2872160"
  },
  {
    "text": "different working set so unless you're exploiting a process that you know how its working set is going to look",
    "start": "2872160",
    "end": "2877359"
  },
  {
    "text": "like and you're sure that your exploit's executing in the context of that machine um you're likely not going to be able to",
    "start": "2877359",
    "end": "2883359"
  },
  {
    "text": "predict what where rob gadget is going to be it's probably going to be useful rob gadgets somewhere but it's going to depend on what the",
    "start": "2883359",
    "end": "2888720"
  },
  {
    "text": "working set list looks like because it's not code it's data that could be misinterpreted as code if you get lucky but still something",
    "start": "2888720",
    "end": "2895280"
  },
  {
    "text": "that should not be executable we also found a 7ff ffff780",
    "start": "2895280",
    "end": "2902160"
  },
  {
    "text": "1000 782 80 million and 781 which correspond to the other three",
    "start": "2902160",
    "end": "2907680"
  },
  {
    "text": "working sets so that every process has a working set the system caches are working set a page full has a working set the file system",
    "start": "2907680",
    "end": "2913200"
  },
  {
    "text": "caches are working all of these were all mapped probably the same helper code in the kernel and they all ended up rwx",
    "start": "2913200",
    "end": "2920960"
  },
  {
    "text": "so there's if there's certain machines that have particular page full semantics that cost",
    "start": "2920960",
    "end": "2926000"
  },
  {
    "text": "particular page for working set list entries you could kind of maybe on some machines somewhat",
    "start": "2926000",
    "end": "2931680"
  },
  {
    "text": "reliably thing that is a rob gadget summer but again it's not a big deal",
    "start": "2931680",
    "end": "2936720"
  },
  {
    "text": "it's just something that should be fixed to you know secure system a little bit more we also found some less reliable",
    "start": "2936720",
    "end": "2942160"
  },
  {
    "text": "observations so there were two other ranges um that we found were rwx and these were in the what's called the system pte",
    "start": "2942160",
    "end": "2948240"
  },
  {
    "text": "region um which is where io space mappings go so we actually looked at what physical",
    "start": "2948240",
    "end": "2954720"
  },
  {
    "text": "memory this corresponded to and one of the blobs corresponding to a000 which you might recognize as a vj",
    "start": "2954720",
    "end": "2960640"
  },
  {
    "text": "frame buffer vj bios and vga rom and the bios from so these",
    "start": "2960640",
    "end": "2966000"
  },
  {
    "text": "are basically physical device mappings and the iospace allocator",
    "start": "2966000",
    "end": "2971760"
  },
  {
    "text": "doesn't have that a good randomization plus these apis are called very early in boot so there might not be a lot of entropy",
    "start": "2971760",
    "end": "2977839"
  },
  {
    "text": "um and so on eight out of ten dumps on different machines they always ended up at one of those",
    "start": "2977839",
    "end": "2984240"
  },
  {
    "text": "two addresses now again this is device memory so it's not necessarily useful um there could be 16-bit code in the",
    "start": "2984240",
    "end": "2990240"
  },
  {
    "text": "bias though or maybe 32-bit code if you have efi that you might be able to jump into if there's a red so could be useful but",
    "start": "2990240",
    "end": "2996640"
  },
  {
    "text": "again not fully reliable because not all machines do this so then we also look um just a few days",
    "start": "2996640",
    "end": "3004240"
  },
  {
    "text": "before windows blue windows 8.1 to see if anything had actually changed there one of the main things that",
    "start": "3004240",
    "end": "3010960"
  },
  {
    "text": "changed in blue is actually completely re-architected what the kernel virtual address space looks like",
    "start": "3010960",
    "end": "3016079"
  },
  {
    "text": "so a bunch of the regions that were not used are now used um and the system cache is now 32 terabytes instead of one",
    "start": "3016079",
    "end": "3022079"
  },
  {
    "text": "terabyte kernel stacks and system pt are now 16 terabytes a non-page full can be as big as 20 2.5 terabytes",
    "start": "3022079",
    "end": "3028720"
  },
  {
    "text": "um and so a lot of things became bigger so now obviously that means there's more entropy for kernel stacks now they've got a",
    "start": "3028720",
    "end": "3034400"
  },
  {
    "text": "32 terabyte region where they can drop kernel stacks not just a 512 gigabyte region and by moving things",
    "start": "3034400",
    "end": "3040960"
  },
  {
    "text": "around this also gave them an extra 120 gigs of page full so now the heap can be up to half a terabyte again that",
    "start": "3040960",
    "end": "3047359"
  },
  {
    "text": "gives more entropy for for heap allocations um the other thing we noted when we did",
    "start": "3047359",
    "end": "3052720"
  },
  {
    "text": "the physical dump if i can go see where the other one was so if you look at these physical dumps the top",
    "start": "3052720",
    "end": "3059599"
  },
  {
    "text": "is very very busy the bottom it's almost all black but in windows blue that it's a lot more",
    "start": "3059599",
    "end": "3067359"
  },
  {
    "text": "distributed um so it looks like the physical memory allocator is a little bit better distributing",
    "start": "3067359",
    "end": "3072559"
  },
  {
    "text": "physical allocations so these are some architectural things we noticed we also went of course and looked at the",
    "start": "3072559",
    "end": "3080000"
  },
  {
    "text": "pages we had found were fixed in windows 8 and all the working set pages",
    "start": "3080000",
    "end": "3085359"
  },
  {
    "text": "are actually now map read only so those working set lists they're no longer read write execute on windows 8.1",
    "start": "3085359",
    "end": "3091280"
  },
  {
    "text": "they're only read and execute all the iospace mappings we found they're they're still not randomized that well",
    "start": "3091280",
    "end": "3097760"
  },
  {
    "text": "but they were no longer execute either so now they're just um read and",
    "start": "3097760",
    "end": "3103119"
  },
  {
    "text": "write so we looked only at a few windows 8.1 dumps but we could not find a single",
    "start": "3103119",
    "end": "3109040"
  },
  {
    "text": "static location which had rwx pages um and and static data that you could jump into",
    "start": "3109040",
    "end": "3115680"
  },
  {
    "text": "so for raw purposes in 8.1 um you know i i'll put my reputation on",
    "start": "3115680",
    "end": "3122240"
  },
  {
    "text": "microsoft's line here and say it is the most random kernel and the most secure random address space that i've seen in any os",
    "start": "3122240",
    "end": "3129040"
  },
  {
    "text": "that we've analyzed there doesn't seem to be any fixed location with any code that you could reliably jump into so",
    "start": "3129040",
    "end": "3135760"
  },
  {
    "text": "kudos microsoft now alex also took a look at ios 6",
    "start": "3135760",
    "end": "3142319"
  },
  {
    "text": "and fortunately did not really give me a lot of information about what he found so all i'm really going to do is kind of",
    "start": "3142319",
    "end": "3149440"
  },
  {
    "text": "go over a little bit of what the slides say and basically what he found was that there is a vector",
    "start": "3149440",
    "end": "3156400"
  },
  {
    "text": "page but unlike linux it's execute supervisor read only so",
    "start": "3156400",
    "end": "3161680"
  },
  {
    "text": "not writable not executable from user mode so not very useful um found a page fff 1000",
    "start": "3161680",
    "end": "3169680"
  },
  {
    "text": "that is user readable supervisor writable available in every process and has some performance counters",
    "start": "3169680",
    "end": "3175920"
  },
  {
    "text": "but it's not executable so he thought maybe the perf counters could be used for a side channel attack",
    "start": "3175920",
    "end": "3180960"
  },
  {
    "text": "if you know the perf counter will increment when something happens um there could be something there but nothing that he was able to exploit in",
    "start": "3180960",
    "end": "3187200"
  },
  {
    "text": "any way he did some kslr some some kernel address space dumps",
    "start": "3187200",
    "end": "3192240"
  },
  {
    "text": "and noticed that um they were fairly different but they did have the issue that a lot of the stuff was",
    "start": "3192240",
    "end": "3197440"
  },
  {
    "text": "uh there were some regions that were there we'd write execute but not necessarily static um physical memory don't look identical",
    "start": "3197440",
    "end": "3203760"
  },
  {
    "text": "across all three machines so in terms of ram uh randomization it doesn't have the kind of algorithms that",
    "start": "3203760",
    "end": "3209440"
  },
  {
    "text": "windows does and in terms of user mode um he found that there is a jit region that you",
    "start": "3209440",
    "end": "3214800"
  },
  {
    "text": "could identify and for example mobile safari but it doesn't is not fixed so um nothing really that there's a base",
    "start": "3214800",
    "end": "3221599"
  },
  {
    "text": "just going over different regions but you didn't really find anything that was um fixed or useful exploitable in any",
    "start": "3221599",
    "end": "3228559"
  },
  {
    "text": "way like like we did on windows or linux one thing you did find though is that if you jailbreak with the",
    "start": "3228559",
    "end": "3234480"
  },
  {
    "text": "evasion code it'll actually leave the curl mappings as rwx so you actually have to jailbreak",
    "start": "3234480",
    "end": "3240079"
  },
  {
    "text": "and then undo the top flurry they were doing so by jailbreaking your phone you're actually making it",
    "start": "3240079",
    "end": "3245520"
  },
  {
    "text": "less more vulnerable because you're losing the protection that the mdm patch for example has with android so you are",
    "start": "3245520",
    "end": "3251119"
  },
  {
    "text": "going to have writable and executable kernel pages um and as i mentioned on a picture here",
    "start": "3251119",
    "end": "3258720"
  },
  {
    "text": "all the physical pages were at the same place on all the three phones he used um so if",
    "start": "3258720",
    "end": "3263760"
  },
  {
    "text": "you have a jtag attack or dma attack or you know something through usb you know that you have a physical address where",
    "start": "3263760",
    "end": "3269920"
  },
  {
    "text": "you can go on on any on any ios device for mountain lion basically user mode",
    "start": "3269920",
    "end": "3276880"
  },
  {
    "text": "was uh pretty well randomized and in the kernel he basically just",
    "start": "3276880",
    "end": "3282640"
  },
  {
    "text": "mapped we didn't really have a lot of time to find anything useful unfortunately um alex had some family crisis so he",
    "start": "3282640",
    "end": "3288240"
  },
  {
    "text": "kind of had to leave things here um in his initial search he didn't really find",
    "start": "3288240",
    "end": "3293440"
  },
  {
    "text": "anything that was too useful but he did find that the efi runtime services were left there",
    "start": "3293440",
    "end": "3299440"
  },
  {
    "text": "read write and execute and efi runtime services because they're allocated very early",
    "start": "3299440",
    "end": "3304640"
  },
  {
    "text": "are going to be the same address so and all max are you fine machines so that could potentially be a useful address",
    "start": "3304640",
    "end": "3312319"
  },
  {
    "text": "um so in terms of thanks um sean was a guy who helped alex get the rt dumps",
    "start": "3312319",
    "end": "3317440"
  },
  {
    "text": "alex used the jailbreak from evasion of course to this work and uh the binvis tool is useful i think",
    "start": "3317440",
    "end": "3323280"
  },
  {
    "text": "you guys use it for the helper curves do you want to thank anyone else well thanks thanks for uh thanks for the people that have you",
    "start": "3323280",
    "end": "3331040"
  },
  {
    "text": "know worked with us in responsible disclosure even though it didn't get patched but yeah at least we could",
    "start": "3331040",
    "end": "3336960"
  },
  {
    "text": "drop all day that way right um and that's probably it are there any questions yeah any questions",
    "start": "3336960",
    "end": "3349839"
  },
  {
    "text": "you",
    "start": "3352799",
    "end": "3354880"
  }
]