[
  {
    "start": "0",
    "end": "277000"
  },
  {
    "text": "so yeah so this is defuse android kernel driver fuzzing my name is jake carina i",
    "start": "80",
    "end": "5600"
  },
  {
    "text": "am a recent graduate of the master's program at university of california at santa barbara and i'm on team shellfish",
    "start": "5600",
    "end": "12400"
  },
  {
    "text": "and i'm chris and i'm chris salz i'm also i'm currently a phd student at uc santa",
    "start": "12400",
    "end": "18480"
  },
  {
    "text": "barbara and also on the team shellfish all right so uh this is the first talk i've ever",
    "start": "18480",
    "end": "24560"
  },
  {
    "text": "given so if i seem like incredibly nervous or anything it's just because i am um uh so before i actually talk about",
    "start": "24560",
    "end": "31599"
  },
  {
    "text": "the fuse or system uh i'm gonna go through actually a decent amount of background information because i want everybody to understand that the problem",
    "start": "31599",
    "end": "38160"
  },
  {
    "text": "uh the fuse is trying to solve for some of you this may be already known if so i apologize just",
    "start": "38160",
    "end": "45120"
  },
  {
    "text": "bear with me a bit in the beginning here okay so hopefully you have at least some",
    "start": "45120",
    "end": "50719"
  },
  {
    "text": "familiarity with the linux kernel but the general point here is that we have the separation between user space and",
    "start": "50719",
    "end": "56160"
  },
  {
    "text": "kernel space kernel space being more privileged and the interface between the two is",
    "start": "56160",
    "end": "61199"
  },
  {
    "text": "system calls the kernel takes care of a lot of different stuff for us things like process management memory",
    "start": "61199",
    "end": "67360"
  },
  {
    "text": "management file systems device control etc so for the purposes of this talk we're",
    "start": "67360",
    "end": "73360"
  },
  {
    "text": "going to be focusing on device control another thing to note is that the linux",
    "start": "73360",
    "end": "78560"
  },
  {
    "text": "kernel is a monolithic architecture which for our purposes just means things like device control",
    "start": "78560",
    "end": "84400"
  },
  {
    "text": "it has the same privilege level as like anything else running in the kernel which obviously has security",
    "start": "84400",
    "end": "89759"
  },
  {
    "text": "applications as we'll see um and so yeah so device handling is done in the kernel and how does that",
    "start": "89759",
    "end": "95360"
  },
  {
    "text": "happen so it's controlled by things called device drivers which are generally implemented",
    "start": "95360",
    "end": "101520"
  },
  {
    "text": "as linux kernel modules and they have to have some interface that they export to user land right so",
    "start": "101520",
    "end": "106960"
  },
  {
    "text": "if you have some user land program that wants to use like the microphone to record audio it has to have some way to",
    "start": "106960",
    "end": "113040"
  },
  {
    "text": "ask the driver like hey can you can you help me talk to the microphone um and as you might expect this is the",
    "start": "113040",
    "end": "118399"
  },
  {
    "text": "same as the standard interface which we just said with system calls and so how do you do that",
    "start": "118399",
    "end": "124479"
  },
  {
    "text": "so in unix we have this notion that like everything is a file uh and the same holds true for uh devices so it's kind",
    "start": "124479",
    "end": "131680"
  },
  {
    "text": "of weird to think about but to some degree uh like the microphone um is going to be uh",
    "start": "131680",
    "end": "137520"
  },
  {
    "text": "modeled as a file on our system uh it's a special device file on disk",
    "start": "137520",
    "end": "142879"
  },
  {
    "text": "so that's still kind of weird to think about because it's like okay now i have this special file on disk that's supposed to be like representing my",
    "start": "142879",
    "end": "148800"
  },
  {
    "text": "microphone how do i talk to it so before we get into that let's look just like generally at operations on",
    "start": "148800",
    "end": "155599"
  },
  {
    "text": "files are they done um if you consider the case for like a quote unquote normal file so if you do",
    "start": "155599",
    "end": "160879"
  },
  {
    "text": "like touch foo on your command line right and it creates like some empty file say we're talking about linux it's",
    "start": "160879",
    "end": "165920"
  },
  {
    "text": "probably an ext4 file right now if you think about some common sys calls uh that you can use to then",
    "start": "165920",
    "end": "172160"
  },
  {
    "text": "communicate with this file or operate on it things like open read and write um how do those know that this file that",
    "start": "172160",
    "end": "178319"
  },
  {
    "text": "you're dealing with is an ext4 file in particular right how does it handle that",
    "start": "178319",
    "end": "183599"
  },
  {
    "text": "so uh to handle that we have a thing called this file operation structure or flops or f ops for short",
    "start": "183599",
    "end": "190080"
  },
  {
    "text": "um and then as a name its name kind of implies uh it's there to define like okay given a particular type of file how",
    "start": "190080",
    "end": "196800"
  },
  {
    "text": "do i handle the the operations for that file so uh keeping with our example i just",
    "start": "196800",
    "end": "202080"
  },
  {
    "text": "said an ext4 file so here is um the code in the linux kernel for the ext4 file",
    "start": "202080",
    "end": "208480"
  },
  {
    "text": "operation struct so anytime you interact with this file like if we go and call open on this foo file we've just created uh it's actually",
    "start": "208480",
    "end": "215200"
  },
  {
    "text": "going to go down here like down to the the second from the bottom um it's going to say okay i'm calling dot open on this ext4 file and it's going to route",
    "start": "215200",
    "end": "222080"
  },
  {
    "text": "execution to ext4 file open so that's a specific function to open ext4 files and",
    "start": "222080",
    "end": "228640"
  },
  {
    "text": "so that's how this is done um we'll see this is kind of similar or exactly similar to how it's done",
    "start": "228640",
    "end": "235200"
  },
  {
    "text": "for device files so so now that we understand like you know a normal file let's let's go back",
    "start": "235200",
    "end": "240400"
  },
  {
    "text": "and talk about device files so as we said uh device drivers are",
    "start": "240400",
    "end": "245760"
  },
  {
    "text": "generally going to create some special file on disk uh to represent the the physical device that they're driving um",
    "start": "245760",
    "end": "251680"
  },
  {
    "text": "and how is this done so i want to give you some intuition for like okay given like a registration function for a",
    "start": "251680",
    "end": "257919"
  },
  {
    "text": "driver you know how is it creating the file and where is this file operation structure coming into play right so i'm",
    "start": "257919",
    "end": "263199"
  },
  {
    "text": "going to briefly kind of walk you through um some code here this is the registration",
    "start": "263199",
    "end": "269120"
  },
  {
    "text": "function for an isp device that's image signal processor uh this is it's like a camera this is a camera device on a",
    "start": "269120",
    "end": "275120"
  },
  {
    "text": "mediatek phone uh i'm just gonna point out and walk you through some of the some of the relevant functions here uh",
    "start": "275120",
    "end": "281759"
  },
  {
    "start": "277000",
    "end": "380000"
  },
  {
    "text": "the first being alec char dev region so what this function is doing is it's saying like hey i am creating a new",
    "start": "281759",
    "end": "287840"
  },
  {
    "text": "character device um i need you to allocate me like a range of device numbers for my device uh and it's gonna",
    "start": "287840",
    "end": "293919"
  },
  {
    "text": "place them in isp devno that variable i have boxed there and uh furthermore this range that you",
    "start": "293919",
    "end": "299680"
  },
  {
    "text": "allocate to me i want you to associate it with this isp dev name variable",
    "start": "299680",
    "end": "304880"
  },
  {
    "text": "which happens to be pound defined it's just a string it's camera dash isp",
    "start": "304880",
    "end": "310080"
  },
  {
    "text": "okay so next now we've allocated our device region for a device now we're going to call c dev init so it's",
    "start": "310080",
    "end": "316720"
  },
  {
    "text": "initializing our device and what's it initializing it with an isp file opera that's the variable",
    "start": "316720",
    "end": "322800"
  },
  {
    "text": "it is of type file operations so good so now we have some familiarity there we just talked about those",
    "start": "322800",
    "end": "328479"
  },
  {
    "text": "and i'll actually come back to this particular variable and show you uh what it looks like but for now let's finish our device",
    "start": "328479",
    "end": "334880"
  },
  {
    "text": "registration with uh c device add so we've allocated the range for a",
    "start": "334880",
    "end": "340880"
  },
  {
    "text": "device we've initialized it with a file operation structure uh and now we want to add it to the system and so after",
    "start": "340880",
    "end": "347440"
  },
  {
    "text": "this point uh the device is like live you could say so if you go and you look in dev dev hopefully you can see that",
    "start": "347440",
    "end": "355199"
  },
  {
    "text": "and we grep for that name that was associated with our device range we see a file there now camera isp so great",
    "start": "355199",
    "end": "361759"
  },
  {
    "text": "excellent and you can also notice actually on the far left in the file attributes that little lowercase c is",
    "start": "361759",
    "end": "366880"
  },
  {
    "text": "telling you hey this isn't a normal file this is like this is a character device right so that's how you know",
    "start": "366880",
    "end": "372160"
  },
  {
    "text": "now if we go and call open on this where is this call going to get routed well we saw it was initialized with this file",
    "start": "372160",
    "end": "377600"
  },
  {
    "text": "operation struct so let's take a look at that and here it is so uh",
    "start": "377600",
    "end": "382960"
  },
  {
    "text": "one of the first things you may notice is it's a lot smaller than the ext4 file operations um that's fine you don't have",
    "start": "382960",
    "end": "389600"
  },
  {
    "text": "to define every single operation for your file in fact it may not make sense right so we said this is like a camera device",
    "start": "389600",
    "end": "395600"
  },
  {
    "text": "what does it mean if you're like writing to a camera that it may not make sense um however open we see routes to isp",
    "start": "395600",
    "end": "401600"
  },
  {
    "text": "open uh and another one here that maybe not everybody is familiar with is ioctyl or the field is called unlocked i-octyl",
    "start": "401600",
    "end": "409520"
  },
  {
    "text": "so i will briefly introduce what that is ioctal or ioctl some people pronounce it that way",
    "start": "409520",
    "end": "416000"
  },
  {
    "start": "411000",
    "end": "453000"
  },
  {
    "text": "it stands for input output control and it's basically just a system call to allow device operations that aren't well",
    "start": "416000",
    "end": "422319"
  },
  {
    "text": "modeled as like a normal syscall so what do i mean by that so imagine you have some audio device right and uh",
    "start": "422319",
    "end": "428800"
  },
  {
    "text": "maybe it makes sense that if you're reading from that device's special file maybe you're reading in like data from the microphone and maybe if you're",
    "start": "428800",
    "end": "435280"
  },
  {
    "text": "writing to that file maybe it's writing data out to the speakers but you know what happens when you want to like",
    "start": "435280",
    "end": "440960"
  },
  {
    "text": "change the sampling rate there's not really a syscall for that right and this is where i octal comes in it's just kind of a catch-all for like any kind of",
    "start": "440960",
    "end": "447360"
  },
  {
    "text": "feature or functionality that doesn't fit well for for normal syscalls",
    "start": "447360",
    "end": "452880"
  },
  {
    "start": "453000",
    "end": "492000"
  },
  {
    "text": "um so from what i've just said one really important thing i want everybody to note is that we said these device drivers are modular by definition right",
    "start": "453199",
    "end": "460240"
  },
  {
    "text": "they're linux kernel modules more often than not and this is very nice for vendors because you have these vendors",
    "start": "460240",
    "end": "466240"
  },
  {
    "text": "that are adding all this hardware and now they can they can add support for it themselves in software",
    "start": "466240",
    "end": "472319"
  },
  {
    "text": "on the other hand we said due to the monolithic architecture that the code that these vendors are adding uh is",
    "start": "472319",
    "end": "478479"
  },
  {
    "text": "essentially running at the same privilege level as like mainline kernel code which is kind of very scary um",
    "start": "478479",
    "end": "484560"
  },
  {
    "text": "there's a lot of security implications there right uh and this issue or what i'm you know telling you is an issue uh",
    "start": "484560",
    "end": "490560"
  },
  {
    "text": "where is it especially prevalent uh in android as it turns out so android is based on linux it's",
    "start": "490560",
    "end": "497199"
  },
  {
    "start": "492000",
    "end": "550000"
  },
  {
    "text": "currently dominating the smartphone os market uh and why is it especially prevalent here uh if you think about",
    "start": "497199",
    "end": "503120"
  },
  {
    "text": "like your average modern smartphone it probably has like a back camera a front camera nfc chip bluetooth chip wi-fi",
    "start": "503120",
    "end": "510400"
  },
  {
    "text": "chip you know gyro sensors touch screen tons and tons of hardware uh and what do you need to drive all that hardware you",
    "start": "510400",
    "end": "516719"
  },
  {
    "text": "need you need device drivers so it's a big problem on like smartphones and we're looking at android in particular",
    "start": "516719",
    "end": "522719"
  },
  {
    "text": "um and so maybe at this point you're saying all right you know fine whatever are drivers are they really an issue so",
    "start": "522719",
    "end": "527839"
  },
  {
    "text": "i say i say yes they are but you don't have to believe me this is a slide taken from jeffrey vanderstope of android security uh and",
    "start": "527839",
    "end": "534240"
  },
  {
    "text": "what he has here is he has all these bugs all these android kernel bugs collected from january 2014",
    "start": "534240",
    "end": "539760"
  },
  {
    "text": "to april 2016. and what he shows is that 85 percent of them are coming from vendor drivers",
    "start": "539760",
    "end": "546160"
  },
  {
    "text": "so yes so drivers are very much a problem vendor drivers and maybe you're wondering like what you",
    "start": "546160",
    "end": "552080"
  },
  {
    "start": "550000",
    "end": "594000"
  },
  {
    "text": "know why what's the big deal why are these vendor drivers why are they so bad like what's going on here um we saw that you know i showed",
    "start": "552080",
    "end": "559040"
  },
  {
    "text": "you the final operation structure it seems to be a fairly like well-defined clear interface you know like open read",
    "start": "559040",
    "end": "564800"
  },
  {
    "text": "and write seem like they should be fairly straightforward uh you know is any one cisco in particular causing all",
    "start": "564800",
    "end": "570160"
  },
  {
    "text": "these problems and as it turns out as again a slide from jeffrey vanderstope yes so with the same data set he shows",
    "start": "570160",
    "end": "577440"
  },
  {
    "text": "that 63 percent of these kernel bugs are being reached via i-octyl so i-octyl is",
    "start": "577440",
    "end": "583760"
  },
  {
    "text": "a huge problem here so uh you know with this said it's probably prudent let's go back and take a more in-depth look at",
    "start": "583760",
    "end": "590480"
  },
  {
    "text": "eye octals and let's get a sense of why they're causing so many problems so this is the prototype for iactl has",
    "start": "590480",
    "end": "597600"
  },
  {
    "text": "three arguments first one's an intfd so this would be a file descriptor to the special device that you're talking to",
    "start": "597600",
    "end": "603600"
  },
  {
    "text": "next one is uh command so we said i octal is like a catch-all right",
    "start": "603600",
    "end": "608880"
  },
  {
    "text": "that's probably encompassing more than one functionality the one i gave was like changing the sampling rate",
    "start": "608880",
    "end": "614240"
  },
  {
    "text": "maybe another is like changing the speaker volume for your audio device and so that's where that's where command",
    "start": "614240",
    "end": "620000"
  },
  {
    "text": "comes into play is you say like okay i want to change the sampling grader i want to change the speaker volume and then the third and final param there",
    "start": "620000",
    "end": "626640"
  },
  {
    "text": "is param and that then is the data relating to your command so for example maybe your",
    "start": "626640",
    "end": "632160"
  },
  {
    "text": "command would be like hey change speaker volume and your param would be like seven like i want the speaker volume to be set to seven",
    "start": "632160",
    "end": "638000"
  },
  {
    "text": "um and actually more often than not i'll also say is that this param argument",
    "start": "638000",
    "end": "643120"
  },
  {
    "text": "is generally a pointer to data not just like an integer value",
    "start": "643120",
    "end": "648959"
  },
  {
    "text": "so i'm also going to show you an example of what an ioctal handler looks like because they all follow roughly the same",
    "start": "648959",
    "end": "654560"
  },
  {
    "text": "kind of format so we're going to look again at our same device our isp file operations and we",
    "start": "654560",
    "end": "660560"
  },
  {
    "text": "can see here that ispi octal is the function for handling i octals and that looks like this and again this",
    "start": "660560",
    "end": "666880"
  },
  {
    "text": "is a very very common format that you see for iactal handlers you have some big switch statement on",
    "start": "666880",
    "end": "672079"
  },
  {
    "text": "the command and then different cases for the different functionality you're offering so here we see like isp read register",
    "start": "672079",
    "end": "678640"
  },
  {
    "text": "isp write register and isp weight irq and also i've pointed out with arrows",
    "start": "678640",
    "end": "685440"
  },
  {
    "text": "what's happening in each of these cases it's calling copy from user so very very briefly if you're not familiar copy from",
    "start": "685440",
    "end": "690880"
  },
  {
    "text": "user looks like this it's just a function to copy user from userland into kernel land so that the kernel can like",
    "start": "690880",
    "end": "696560"
  },
  {
    "text": "operate on it right and what this telling what this is telling us is that yeah param is indeed",
    "start": "696560",
    "end": "701680"
  },
  {
    "text": "it's expecting it to be a pointer to some data type right some struct type actually if you can see",
    "start": "701680",
    "end": "707839"
  },
  {
    "text": "and another thing to note is that depending on the case it's dealing with whatever command you're giving it it",
    "start": "707839",
    "end": "713680"
  },
  {
    "text": "changes so for the first two isp read register and isp write register it's expecting a struct of type isp reg i o",
    "start": "713680",
    "end": "721519"
  },
  {
    "text": "struct but then for the third one down here isp weight irq well now it's expecting that you should have given it",
    "start": "721519",
    "end": "726959"
  },
  {
    "text": "a pointer to an isp weight irq struct okay and so hopefully you can you can kind of see where the problems are now",
    "start": "726959",
    "end": "733279"
  },
  {
    "text": "um the first being iactyl is a lot more functionality than just read it right it has to encompass",
    "start": "733279",
    "end": "738720"
  },
  {
    "text": "like anything that doesn't fit anywhere else so it's generally a lot the other issue is you're dealing with",
    "start": "738720",
    "end": "744240"
  },
  {
    "text": "um user land data which is always risky um and it's it's in the form of like some comp complex struct okay so these",
    "start": "744240",
    "end": "751120"
  },
  {
    "text": "two things combined it's like a recipe for disaster so this is why uh ioctals present such an issue",
    "start": "751120",
    "end": "757440"
  },
  {
    "text": "and so now that i've hopefully convinced you that ioctals are an issue um what what are some solutions",
    "start": "757440",
    "end": "762720"
  },
  {
    "start": "761000",
    "end": "799000"
  },
  {
    "text": "um so i've kind of split it up into two here the first would be static analysis this would be like a code checker",
    "start": "762720",
    "end": "768880"
  },
  {
    "text": "the problem with this is well first of all there's not a lot of good ones out there but even the good ones they tend to give",
    "start": "768880",
    "end": "773920"
  },
  {
    "text": "you like a ton of false positives all right um and you don't know you have to go through every single warning and be like is this real uh is this reachable i",
    "start": "773920",
    "end": "781040"
  },
  {
    "text": "i don't know um and we don't want to do that we're very lazy that's a huge amount of work i don't want anything to do with it",
    "start": "781040",
    "end": "786800"
  },
  {
    "text": "so the other the other uh alternative then is dynamic analysis uh an example of which would be fuzzing um",
    "start": "786800",
    "end": "793200"
  },
  {
    "text": "and if you can't guess from the title of our talk that's what we went with um fussing uh so okay fuzzing very briefly the",
    "start": "793200",
    "end": "799920"
  },
  {
    "start": "799000",
    "end": "832000"
  },
  {
    "text": "general idea is you send like random data a random input into a program and you hope you trigger a bug",
    "start": "799920",
    "end": "805839"
  },
  {
    "text": "and the really nice thing about fuzzing is you're guaranteed to find real bugs because if you're fuzzing a program right and it crashes okay obviously",
    "start": "805839",
    "end": "812000"
  },
  {
    "text": "there's a bug there somewhere and what's more is that depending on what you're fuzzing and like what",
    "start": "812000",
    "end": "817839"
  },
  {
    "text": "program you're using to fuzz it um more often than not you're also going to have like a pock to go with it or you're",
    "start": "817839",
    "end": "823519"
  },
  {
    "text": "going to have like steps to reproduce the problem that you just saw or just triggered which is very very nice",
    "start": "823519",
    "end": "829600"
  },
  {
    "text": "okay so how is fuzzing then generally applied to the kernel so in general what you do is um you make a model of each",
    "start": "829600",
    "end": "836800"
  },
  {
    "start": "832000",
    "end": "917000"
  },
  {
    "text": "syscall so you say like okay the read syscall it takes three arguments the first is an integer the second is like a",
    "start": "836800",
    "end": "842639"
  },
  {
    "text": "pointer to some buffer and the third is another integer and then you go and then you fuzz it right and hopefully you can",
    "start": "842639",
    "end": "848240"
  },
  {
    "text": "see that this is very very hard for eye octals uh because first of all um you know you don't even know like what's",
    "start": "848240",
    "end": "854079"
  },
  {
    "text": "what's the device name like you have to go and hunt down like where is it where are these special files what are they called what's the path to them um",
    "start": "854079",
    "end": "861279"
  },
  {
    "text": "furthermore uh the command values for one device are certainly not gonna be the command values for another device uh",
    "start": "861279",
    "end": "866880"
  },
  {
    "text": "you know um they're gonna be totally different and third of all um even if you're",
    "start": "866880",
    "end": "872320"
  },
  {
    "text": "focusing on just one specific device as we saw depending on which command you give it the last argument param that's",
    "start": "872320",
    "end": "879279"
  },
  {
    "text": "gonna change it's gonna be expecting different types of data depending on the command so all this together it makes it super super hard to to make a model for",
    "start": "879279",
    "end": "886399"
  },
  {
    "text": "i octal and as as a result of this when kernel fuzzing ioctals often get",
    "start": "886399",
    "end": "892639"
  },
  {
    "text": "neglected because there is this huge amount of manual effort and another thing to note is even with",
    "start": "892639",
    "end": "897920"
  },
  {
    "text": "the recovered interface even if you have all this information some of these uh input parameters that it's expecting are",
    "start": "897920",
    "end": "903040"
  },
  {
    "text": "like pointers to hugely complex structures right they may have substructure pointers to other structs and to instantiate something like this",
    "start": "903040",
    "end": "909600"
  },
  {
    "text": "it's not exactly trivial so even at that point it's still uh still challenging",
    "start": "909600",
    "end": "915199"
  },
  {
    "text": "so with that said um now i'll introduce our tool uh diffuse that attempts to solve this problem automatically so we",
    "start": "915199",
    "end": "920959"
  },
  {
    "text": "don't have to do all this manual analysis uh the fuse kind of like nominally stands for it's like driver interface",
    "start": "920959",
    "end": "927839"
  },
  {
    "text": "fuzzing but then the fuzz sounded kind of stupid so we put an e on the end and it's the fuse so",
    "start": "927839",
    "end": "933279"
  },
  {
    "text": "so this is the general pipeline of our system um you give it kernel source code uh it",
    "start": "933279",
    "end": "940079"
  },
  {
    "text": "does some interface recovery step so it retrieves all the information we just talked about uh it's gonna output that in some xml",
    "start": "940079",
    "end": "946399"
  },
  {
    "text": "specification uh then from that structure generation takes it it says okay i have all this information about",
    "start": "946399",
    "end": "952160"
  },
  {
    "text": "you know the parameters and the command values i'm going to like make instances of these arguments",
    "start": "952160",
    "end": "957199"
  },
  {
    "text": "uh that is output as like a fuzz unit and then that is sent to the on device execution",
    "start": "957199",
    "end": "962800"
  },
  {
    "text": "uh where it is executed and hopefully at the end you get out crashes that's what we like to see",
    "start": "962800",
    "end": "969120"
  },
  {
    "text": "so i'm going to walk you through every step of this right now so starting with interface recovery",
    "start": "969120",
    "end": "975199"
  },
  {
    "text": "the first part of interface recovery is build system instrumentation so the majority of our analyses uh use",
    "start": "975199",
    "end": "982880"
  },
  {
    "start": "979000",
    "end": "1056000"
  },
  {
    "text": "llvm um what this means for us is that we want lvm bit code okay this is a",
    "start": "982880",
    "end": "988079"
  },
  {
    "text": "slight problem because the linux kernel uses gcc to compile and there's actually an ongoing project",
    "start": "988079",
    "end": "994320"
  },
  {
    "text": "to just be able to compile linux kernel with clang luckily for us um the issues that",
    "start": "994320",
    "end": "1000000"
  },
  {
    "text": "they're having uh they come into play like very late in the compilation process uh and it's actually fine to you",
    "start": "1000000",
    "end": "1005839"
  },
  {
    "text": "we can get to the stage where we can emit lvm bit code that's fine uh which is very nice for us so how we do this is we build the kernel",
    "start": "1005839",
    "end": "1012800"
  },
  {
    "text": "with the provided make file and we just like give it the verbose option be like hey tell us everything that you're doing",
    "start": "1012800",
    "end": "1018560"
  },
  {
    "text": "and from here it's going to output like every gcc command it's using to build the kernel and we save this to a file",
    "start": "1018560",
    "end": "1026160"
  },
  {
    "text": "so after this we just have a script that runs through all these commands and it just transforms like the valid gcc",
    "start": "1026160",
    "end": "1031678"
  },
  {
    "text": "commands into clang commands to emit bit code all right and so now we have all this bit code and then finally we try",
    "start": "1031679",
    "end": "1037760"
  },
  {
    "text": "and link bit bit code files together such that we don't have like a million bit code files we have like some semblance of like like a pseudo object",
    "start": "1037760",
    "end": "1044480"
  },
  {
    "text": "file for each device just to make analysis easier",
    "start": "1044480",
    "end": "1049280"
  },
  {
    "text": "so now we have our bit code next we want to find all these ioctal handlers because those are the functions we're interested in",
    "start": "1049520",
    "end": "1056960"
  },
  {
    "start": "1056000",
    "end": "1116000"
  },
  {
    "text": "so before we can actually find the handlers themselves we have to find the definitions of all",
    "start": "1056960",
    "end": "1062080"
  },
  {
    "text": "these operation structures so the one i talked about earlier was a file operation structure turns out",
    "start": "1062080",
    "end": "1068000"
  },
  {
    "text": "there's more than that there's like watchdog operations alarm operations etc there's a whole bunch of them uh we have a list of these",
    "start": "1068000",
    "end": "1074720"
  },
  {
    "text": "and this part's kind of ghetto but we just grip for definitions the definitions of these structures in the includes",
    "start": "1074720",
    "end": "1080480"
  },
  {
    "text": "and then what we're going to do is where we find where it's defined in like the relevant header file we're going to use c to xml",
    "start": "1080480",
    "end": "1086080"
  },
  {
    "text": "c to xml is a tool that's part of sparse it was actually written by linus torvalds",
    "start": "1086080",
    "end": "1091120"
  },
  {
    "text": "and as the name suggests it converts c code into xml and the reason we're doing this is",
    "start": "1091120",
    "end": "1096640"
  },
  {
    "text": "because we want to recover um the unlocked dioctyl field for the structure so we want to be able to say like okay",
    "start": "1096640",
    "end": "1102480"
  },
  {
    "text": "for this particular kernel the file operation structure at offset 8 is where uh the unlocked dioctal field",
    "start": "1102480",
    "end": "1108960"
  },
  {
    "text": "is okay so once we find all these offsets we restore them away and we can start some",
    "start": "1108960",
    "end": "1114000"
  },
  {
    "text": "real analysis right okay so i octal handler recovery so so now we can run the analysis we",
    "start": "1114000",
    "end": "1120400"
  },
  {
    "start": "1116000",
    "end": "1174000"
  },
  {
    "text": "start running some analysis on the actual driver bit code files uh and we're gonna search for all uses of our",
    "start": "1120400",
    "end": "1125600"
  },
  {
    "text": "operation structures that we that we've just talked about and specifically what we're gonna look for is assignments at those offsets",
    "start": "1125600",
    "end": "1132240"
  },
  {
    "text": "we've just recovered so if we said like oh the unlocked dioctyl field is at offset eight and then we see in the code",
    "start": "1132240",
    "end": "1137600"
  },
  {
    "text": "and assignment at that offset okay well whatever is being assigned there is the handler the ioctal handler",
    "start": "1137600",
    "end": "1143440"
  },
  {
    "text": "um and so an example of that would be like this so again this is our",
    "start": "1143440",
    "end": "1148720"
  },
  {
    "text": "isp file operation structure so here you see the unlocked ioctal field and look at that okay it's being assigned ispi",
    "start": "1148720",
    "end": "1155280"
  },
  {
    "text": "octal so we see this in the bit code and we say great okay so for this device for this driver that's our ioctal handler so",
    "start": "1155280",
    "end": "1161360"
  },
  {
    "text": "we can we can grab all of them this way okay um device this is finding the",
    "start": "1161360",
    "end": "1168320"
  },
  {
    "text": "device name this step so you know none of this does this any good if we don't know what the special device file is",
    "start": "1168320",
    "end": "1173679"
  },
  {
    "text": "called so for you know our example was camera isp um so to be totally honest uh the",
    "start": "1173679",
    "end": "1180400"
  },
  {
    "text": "analysis we do for this is pretty boring and i'm gonna skip it i'm more than happy to talk about it at the end if somebody's interested uh but what it",
    "start": "1180400",
    "end": "1186720"
  },
  {
    "text": "boils down to is if the name if it's registered with a static name like in the example we saw we can recover that",
    "start": "1186720",
    "end": "1192799"
  },
  {
    "text": "so we would be able to find like camera isp great at static excellent um unfortunately uh you're gonna have stuff",
    "start": "1192799",
    "end": "1198559"
  },
  {
    "text": "like this where it's a dynamic name so here the name it's it's like s printfng into the name",
    "start": "1198559",
    "end": "1204240"
  },
  {
    "text": "and it's like getting the name it's like indexing into some global table we don't know what this is uh and unfortunately",
    "start": "1204240",
    "end": "1209520"
  },
  {
    "text": "we're gonna have to fall back to manual analysis uh or you can just set an option to be like okay skip anything that we can't find the name for",
    "start": "1209520",
    "end": "1217200"
  },
  {
    "text": "okay so the next big thing is now we have all these ioctal handler functions okay well we want to know what what do",
    "start": "1218000",
    "end": "1223120"
  },
  {
    "text": "we send them right we need to know the command values and the the types that go with those command values",
    "start": "1223120",
    "end": "1229360"
  },
  {
    "start": "1228000",
    "end": "1377000"
  },
  {
    "text": "so this analysis is done in tandem we find both of these things together",
    "start": "1229360",
    "end": "1234400"
  },
  {
    "text": "what we're going to do is because we've recovered these handlers we run our love analysis on the handler function the bit",
    "start": "1234400",
    "end": "1239919"
  },
  {
    "text": "code for it and we know our arguments of interest right so we know that our second argument is the command value and the",
    "start": "1239919",
    "end": "1246080"
  },
  {
    "text": "third argument is param so this is very nice because all we all we have to do is search for any kind of",
    "start": "1246080",
    "end": "1251520"
  },
  {
    "text": "a quality comparison on our command value and if we see it we keep track of that constraint for the given path like",
    "start": "1251520",
    "end": "1257520"
  },
  {
    "text": "where that equality comparison applies and while we're on that path we're then going to look for any uses of copy from",
    "start": "1257520",
    "end": "1263520"
  },
  {
    "text": "user that's using our third argument it's using param and if we see this we're going to look",
    "start": "1263520",
    "end": "1269120"
  },
  {
    "text": "at the first argument to copy from user that's where it's copying data into and we say okay well if we know the type",
    "start": "1269120",
    "end": "1275520"
  },
  {
    "text": "of the of what it's copying it into that's obviously what it's expecting param to point to like a type of that data",
    "start": "1275520",
    "end": "1281600"
  },
  {
    "text": "and additionally this doesn't necessarily happen at the top level of an ioctal handler function",
    "start": "1281600",
    "end": "1287039"
  },
  {
    "text": "and so we're going to follow any function that gets past param and or command and so i know that was a decent",
    "start": "1287039",
    "end": "1292159"
  },
  {
    "text": "amount of text so i have an example here for you uh here's our good friend the isp ioctal",
    "start": "1292159",
    "end": "1297200"
  },
  {
    "text": "handler and what we're going to do is okay here's our switch like we're used to",
    "start": "1297200",
    "end": "1302240"
  },
  {
    "text": "and here's a case all right uh cases they boil down to equality comparisons right this is going to be like in in the",
    "start": "1302240",
    "end": "1308480"
  },
  {
    "text": "assembly it's going to like oh like you know is you know whatever this register is at this value",
    "start": "1308480",
    "end": "1314000"
  },
  {
    "text": "so we keep track of that we make note of it and we continue on this path okay here we see a function call and what's",
    "start": "1314000",
    "end": "1320400"
  },
  {
    "text": "going into this function call param okay well we said that's one of our arguments of interest so we're going to follow the function",
    "start": "1320400",
    "end": "1326159"
  },
  {
    "text": "so we come down here to isp buff control func uh and what do we see in that we see a",
    "start": "1326159",
    "end": "1331200"
  },
  {
    "text": "copy from user and what's it using and copy from user param again our argument of interest",
    "start": "1331200",
    "end": "1337120"
  },
  {
    "text": "so we say great okay let's look at the first argument to this where is it copying it into rtbuff control what is",
    "start": "1337120",
    "end": "1343120"
  },
  {
    "text": "the type of that variable it's an isp buffer control struct so now we have this pairing we have this match we say",
    "start": "1343120",
    "end": "1349760"
  },
  {
    "text": "okay if we give this handler a command value of isp buffer control we",
    "start": "1349760",
    "end": "1355280"
  },
  {
    "text": "should also expect to give it param pointing to a type of isp buffer control struct and now we have these matches",
    "start": "1355280",
    "end": "1361440"
  },
  {
    "text": "this is very nice so we're almost done",
    "start": "1361440",
    "end": "1366960"
  },
  {
    "text": "the last step is that okay just because we know the type that we have to give it doesn't necessarily mean we know what that type looks like right",
    "start": "1366960",
    "end": "1373679"
  },
  {
    "text": "because we need if we're gonna instantiate these we have to know what the type actually looks like so the nice thing is uh we have all",
    "start": "1373679",
    "end": "1380480"
  },
  {
    "text": "these gcc build commands from our first step where we use the make file and we just said hey beaver bose",
    "start": "1380480",
    "end": "1385600"
  },
  {
    "text": "and we know what file we're looking at we know that you know for this given bit code file we're looking at it's like it has this other relevant c file",
    "start": "1385600",
    "end": "1392400"
  },
  {
    "text": "and so all we have to do is go and find the gcc command that was used to build the c file originally and then from",
    "start": "1392400",
    "end": "1398720"
  },
  {
    "text": "there we throw on the dash capital e option to the original bill command that's going to invoke the c preprocessor which means for us um if",
    "start": "1398720",
    "end": "1406960"
  },
  {
    "text": "somewhere in that c file it used this struct it has to like after the preprocessor after it resolves all the",
    "start": "1406960",
    "end": "1412480"
  },
  {
    "text": "dependencies and stuff the definition of that structure should be in the preprocess file somewhere and anything",
    "start": "1412480",
    "end": "1417760"
  },
  {
    "text": "that it relies on so from there we're going to run our good friendship xml on the file we're",
    "start": "1417760",
    "end": "1422960"
  },
  {
    "text": "going to get some equally massive xml file and then we're going to run a series of python passes",
    "start": "1422960",
    "end": "1428240"
  },
  {
    "text": "to extract the struct and any struct dependencies like i said maybe the struct has um you know pointers to other",
    "start": "1428240",
    "end": "1433760"
  },
  {
    "text": "types of structs inside of it if so we need to know the definitions of those as well uh and it's also going to do things like",
    "start": "1433760",
    "end": "1439840"
  },
  {
    "text": "account for padding uh recover enum values etc so just to give you a bit of like a visualization for what this looks",
    "start": "1439840",
    "end": "1445679"
  },
  {
    "text": "like i'm sure this is unreadable this is what c to xml gives you so it's really it's not very useful like for human",
    "start": "1445679",
    "end": "1452400"
  },
  {
    "text": "analysis like if you're just looking at it it's not helpful but it does have a ton of information in it after we run our python passes on this",
    "start": "1452400",
    "end": "1458960"
  },
  {
    "text": "we distill it into something that looks like this so much more digestible much more readable this is a data model for a particular",
    "start": "1458960",
    "end": "1465120"
  },
  {
    "text": "type of struct it looks very similar to peach if some of you are familiar",
    "start": "1465120",
    "end": "1470480"
  },
  {
    "start": "1470000",
    "end": "1564000"
  },
  {
    "text": "okay so that was a whole lot so a quick summary of what i've just discussed we started with the kernel source code uh",
    "start": "1470960",
    "end": "1477200"
  },
  {
    "text": "from there we compiled to llvm bit code from the bit code we recovered the device names and the ioctal handlers",
    "start": "1477200",
    "end": "1484880"
  },
  {
    "text": "from the handlers we got the command values and the argument types and then from the types we went and we found okay",
    "start": "1484880",
    "end": "1490720"
  },
  {
    "text": "what do those types actually look like you know what are their definitions and so those last three things the device names commands and type definitions are",
    "start": "1490720",
    "end": "1497360"
  },
  {
    "text": "going to be pushed into some xml specification describing it as the interface",
    "start": "1497360",
    "end": "1503360"
  },
  {
    "text": "awesome so after all those tape steps which jake has described we are now fully interface aware",
    "start": "1507279",
    "end": "1513520"
  },
  {
    "text": "we know what the device file name is so we know where in such dev what slash dev file we need to open",
    "start": "1513520",
    "end": "1520240"
  },
  {
    "text": "we know what command ids the iacto accepts so what numbers to pass it and we even know for each of those",
    "start": "1520240",
    "end": "1526320"
  },
  {
    "text": "command ids what the argument type is what structure it's expecting is",
    "start": "1526320",
    "end": "1532640"
  },
  {
    "text": "and so the next part of this fuzzing process is we have to generate actual instances",
    "start": "1532640",
    "end": "1537919"
  },
  {
    "text": "of these structures so that we can begin to fuzz the device and exercise its behavior",
    "start": "1537919",
    "end": "1544000"
  },
  {
    "text": "and this all resides in the structure generation component of diffuse",
    "start": "1544000",
    "end": "1549600"
  },
  {
    "text": "and so the structure generation component actually still happens on the computer on the analysis host as we call",
    "start": "1549600",
    "end": "1555120"
  },
  {
    "text": "it not on the android phone itself the structure generation component will output fuzz units as we call them which",
    "start": "1555120",
    "end": "1561360"
  },
  {
    "text": "will be a single invocation of an ioctyl all right so let's think about structure generation if we have a struct type",
    "start": "1561360",
    "end": "1569120"
  },
  {
    "start": "1564000",
    "end": "1734000"
  },
  {
    "text": "one of those buffer control stocks or whatever how are we going to generate an actual",
    "start": "1569120",
    "end": "1574720"
  },
  {
    "text": "instance of it so at first it seems pretty simple each of these the struct will have a bunch of",
    "start": "1574720",
    "end": "1580240"
  },
  {
    "text": "fields integers longs characters etc and we should just generate each of those as",
    "start": "1580240",
    "end": "1585919"
  },
  {
    "text": "we go of course it's not quite so simple there are some more complex cases",
    "start": "1585919",
    "end": "1591039"
  },
  {
    "text": "if we consider what if there is a pointer to another structure what if there's a union or enums we need",
    "start": "1591039",
    "end": "1597679"
  },
  {
    "text": "to handle these as well so let's walk through a simple example",
    "start": "1597679",
    "end": "1602880"
  },
  {
    "text": "of how this works we have this structure isp buffer control struct and we're going to go through each field one at a",
    "start": "1602880",
    "end": "1609120"
  },
  {
    "text": "time and generate the elements it needed so we're first going to handle this",
    "start": "1609120",
    "end": "1615279"
  },
  {
    "text": "field called control which is just an enum so that means when we generate the structure we should pick maybe one of",
    "start": "1615279",
    "end": "1621440"
  },
  {
    "text": "these enum values or maybe something that's not an enum to try to trigger an out of bounds",
    "start": "1621440",
    "end": "1626720"
  },
  {
    "text": "and we're going to go on the next one is also an enum so we're going to grab its definition as",
    "start": "1626720",
    "end": "1632400"
  },
  {
    "text": "well and we go on and this one now is a pointer to another structure so we have",
    "start": "1632400",
    "end": "1638480"
  },
  {
    "text": "to be a little bit more careful here so we have to actually generate this structure as well so we're going to recursively handle each structure we see",
    "start": "1638480",
    "end": "1645679"
  },
  {
    "text": "so we'll see this structure and then we'll go through its fields one at a time handling them creating them and of",
    "start": "1645679",
    "end": "1652240"
  },
  {
    "text": "course these structures can be complex and have structures within them or pointers to other structures as well",
    "start": "1652240",
    "end": "1658240"
  },
  {
    "text": "and after we've generated the second structure we need to point this pointer",
    "start": "1658240",
    "end": "1663279"
  },
  {
    "text": "we've in the first one to it just to have the mappings correct and we'll go through",
    "start": "1663279",
    "end": "1668720"
  },
  {
    "text": "and keep doing this for every element our structure until it's generated now",
    "start": "1668720",
    "end": "1674000"
  },
  {
    "text": "the other component of this is of course what values do we pick for these elements in the structures",
    "start": "1674000",
    "end": "1679440"
  },
  {
    "text": "and we can be pretty small smart here so we know that",
    "start": "1679440",
    "end": "1684640"
  },
  {
    "text": "the type of every single one of these elements we know something's an integer a long we know if it's an enum so for",
    "start": "1684640",
    "end": "1690720"
  },
  {
    "text": "enums we can try to pick values that are correct or incorrect we can intelligently pick integers that",
    "start": "1690720",
    "end": "1697440"
  },
  {
    "text": "might trigger say a better overflow boundary or an off by",
    "start": "1697440",
    "end": "1702480"
  },
  {
    "text": "one so maybe closer to a power of two for character rays or whatever we can",
    "start": "1702480",
    "end": "1707679"
  },
  {
    "text": "try to create both long and short arrays to maybe trigger both buffer overflows and",
    "start": "1707679",
    "end": "1712880"
  },
  {
    "text": "valid functionality and so for each data type we have a few strategies of how we randomly pick",
    "start": "1712880",
    "end": "1718720"
  },
  {
    "text": "values for it and this all makes up the structure generation component of diffuse and the",
    "start": "1718720",
    "end": "1725600"
  },
  {
    "text": "structure generation component as i said earlier is going to output these fuzz units which will go to the on device",
    "start": "1725600",
    "end": "1731039"
  },
  {
    "text": "execution step to be executed all right so the name of the fuzzer",
    "start": "1731039",
    "end": "1737279"
  },
  {
    "start": "1734000",
    "end": "1840000"
  },
  {
    "text": "itself is mango fuzz it's based off peach which is where it gets its name",
    "start": "1737279",
    "end": "1742640"
  },
  {
    "text": "it's a fairly simple fuzzer uh and kinda dumb it's ridden python can only handle",
    "start": "1742640",
    "end": "1748480"
  },
  {
    "text": "eye octals and it consumes these xml spec files which",
    "start": "1748480",
    "end": "1754080"
  },
  {
    "text": "we will create we create during the interface extraction step the xml spec files contain all the information",
    "start": "1754080",
    "end": "1760240"
  },
  {
    "text": "interface information which we need to do a single fuzzing iteration these xml spec files contain",
    "start": "1760240",
    "end": "1767760"
  },
  {
    "text": "the device path all of the command ids that and for each of the command ids",
    "start": "1767760",
    "end": "1773039"
  },
  {
    "text": "what the argument types are and for each of those argument types their definitions so we can actually generate",
    "start": "1773039",
    "end": "1779360"
  },
  {
    "text": "those structures and mango fuzz the on the compute the on device i mean the on the analysis host",
    "start": "1779360",
    "end": "1785840"
  },
  {
    "text": "component will generate binary blobs and then some mappings between the binary blobs so if there's a pointer from one",
    "start": "1785840",
    "end": "1792720"
  },
  {
    "text": "binder blob to the next you'll have a mapping tell you which pointer it needs to fix up on the device itself",
    "start": "1792720",
    "end": "1799760"
  },
  {
    "text": "and an example of this xml spec which i mentioned is shown here as you can see it shows the device name",
    "start": "1799760",
    "end": "1806559"
  },
  {
    "text": "the ioctal id or the command number as well as the target struct expected by",
    "start": "1806559",
    "end": "1811919"
  },
  {
    "text": "that i octal and the for each of the for that structure it will have the structure",
    "start": "1811919",
    "end": "1818240"
  },
  {
    "text": "elements the fields needed down below in the data model and if that structure references any other structures we'll",
    "start": "1818240",
    "end": "1824320"
  },
  {
    "text": "include those as other data models as well",
    "start": "1824320",
    "end": "1828399"
  },
  {
    "text": "and then so mango fuzz the on the computer part the analysis part",
    "start": "1829360",
    "end": "1834640"
  },
  {
    "text": "host part will generate the fuzz units to be sensitive device for the on device execution",
    "start": "1834640",
    "end": "1840799"
  },
  {
    "start": "1840000",
    "end": "1855000"
  },
  {
    "text": "and that happens on the device we need to that's where we need to actually call by octal to trigger the functionality",
    "start": "1840799",
    "end": "1847760"
  },
  {
    "text": "and so we simply connect the computer to the device through adb the android debug bridge",
    "start": "1847760",
    "end": "1853600"
  },
  {
    "text": "where it will run a program called the executor and the executor will",
    "start": "1853600",
    "end": "1859279"
  },
  {
    "start": "1855000",
    "end": "1887000"
  },
  {
    "text": "open a port and listen for data as it receives data it'll map it into memory just call malik for the right size copy",
    "start": "1859279",
    "end": "1866720"
  },
  {
    "text": "the binary data in there and then as needed it will fix up the pointers so that if a one",
    "start": "1866720",
    "end": "1874000"
  },
  {
    "text": "binary blob reference another struct those happen correctly and then it just simply opens the device",
    "start": "1874000",
    "end": "1880320"
  },
  {
    "text": "file calls ioctyl and hopefully triggers some good functionality and maybe triggers some",
    "start": "1880320",
    "end": "1885520"
  },
  {
    "text": "bugs all right so when we get to actual fuzzing it's pretty simple to look for bugs so",
    "start": "1885520",
    "end": "1892559"
  },
  {
    "start": "1887000",
    "end": "1931000"
  },
  {
    "text": "on android if you crash the kernel device will reboot and you'll hear a nice beep or something as",
    "start": "1892559",
    "end": "1899039"
  },
  {
    "text": "it's rebooting letting you know that you might have found something good then the kernel back tracer oops is",
    "start": "1899039",
    "end": "1904320"
  },
  {
    "text": "saved in sis fsp store console ram oops and you can look there to",
    "start": "1904320",
    "end": "1910080"
  },
  {
    "text": "use that for triaging you can also we also save the whole sequence of ioctals and that can be trimmed down to try to",
    "start": "1910080",
    "end": "1917600"
  },
  {
    "text": "triage the crashes a little bit better because if you've done any triaging it can be pretty annoying just to look at the",
    "start": "1917600",
    "end": "1923279"
  },
  {
    "text": "actual inputs so the combination of the ram oops and the back trace of ioctals which we can",
    "start": "1923279",
    "end": "1929440"
  },
  {
    "text": "filter down help a lot and to test our system we ran it on",
    "start": "1929440",
    "end": "1935919"
  },
  {
    "start": "1931000",
    "end": "1956000"
  },
  {
    "text": "seven phones from five major manufacturers including google htc huawei samsung and sony",
    "start": "1935919",
    "end": "1943120"
  },
  {
    "text": "and across these we think we covered four different chip sets and this includes a",
    "start": "1943120",
    "end": "1949440"
  },
  {
    "text": "wide range of devices and drivers and should give us a large number of octal handlers to test",
    "start": "1949440",
    "end": "1957360"
  },
  {
    "start": "1956000",
    "end": "2079000"
  },
  {
    "text": "in total we ended up finding i octal handlers across these seven",
    "start": "1958399",
    "end": "1963919"
  },
  {
    "text": "devices and this resulted and for these 789 handlers we were able to identify the",
    "start": "1963919",
    "end": "1970159"
  },
  {
    "text": "device names for only 469 which is like 60 of them i think this is",
    "start": "1970159",
    "end": "1975440"
  },
  {
    "text": "the worst performing part of our system the part that maybe needs the most manual analysis or",
    "start": "1975440",
    "end": "1982240"
  },
  {
    "text": "future work to make good but still sixty percent of these is a lot of the handlers and most of the",
    "start": "1982240",
    "end": "1988240"
  },
  {
    "text": "misses comes from mainline kernel drivers not from the vendor specific ones for",
    "start": "1988240",
    "end": "1993760"
  },
  {
    "text": "example on mediatek that we specifically found around 90",
    "start": "1993760",
    "end": "1999120"
  },
  {
    "text": "percent of the device names for the vendor specific drivers there so",
    "start": "1999120",
    "end": "2004880"
  },
  {
    "text": "and those ones are often the ones on android that you're looking for for bugs or the ones maybe more likely to be",
    "start": "2004880",
    "end": "2010080"
  },
  {
    "text": "buggy and so we're getting very good coverage there",
    "start": "2010080",
    "end": "2015519"
  },
  {
    "text": "for type and command id recovery we do better uh so we found across those 780 command or",
    "start": "2015519",
    "end": "2023600"
  },
  {
    "text": "or octal handlers we found a total of 3565 command ids",
    "start": "2023600",
    "end": "2029440"
  },
  {
    "text": "and for slightly under 50 percent of them we found that the user argument is not an input pointer meaning it's just",
    "start": "2029440",
    "end": "2036399"
  },
  {
    "text": "used as a c type integer or long and not as an input pointer or it might be used",
    "start": "2036399",
    "end": "2042640"
  },
  {
    "text": "as an output pointer copying the result to you and but for the rest the remaining 53",
    "start": "2042640",
    "end": "2048720"
  },
  {
    "text": "percent we found these were using an input pointer so it was copying data",
    "start": "2048720",
    "end": "2054158"
  },
  {
    "text": "from a structure or from a user data type to the kernel and using it",
    "start": "2054159",
    "end": "2060480"
  },
  {
    "text": "and we did a small random sample to check the accuracy of our tool we've",
    "start": "2060480",
    "end": "2066079"
  },
  {
    "text": "picked five octals for each phones which is a total of 35 handlers",
    "start": "2066079",
    "end": "2071520"
  },
  {
    "text": "and we found that we were accurate for both the command id and the type on 90 of those",
    "start": "2071520",
    "end": "2079599"
  },
  {
    "text": "okay to do the actual fuzzing evaluation we picked four different variants which included various levels of",
    "start": "2080480",
    "end": "2087520"
  },
  {
    "text": "device information or the interface information which we've extracted and we ran this",
    "start": "2087520",
    "end": "2093520"
  },
  {
    "text": "first we use syscaller syscaller is a state of the art linux kernel fuzzer",
    "start": "2093520",
    "end": "2099280"
  },
  {
    "text": "built by a very good team at google and if you give sis card the definition for",
    "start": "2099280",
    "end": "2106000"
  },
  {
    "text": "um a sys call or set of syscalls and how they how to call them correctly it can",
    "start": "2106000",
    "end": "2113440"
  },
  {
    "text": "interface it can fuzz them very well and so we were able to interface with it",
    "start": "2113440",
    "end": "2118480"
  },
  {
    "text": "and so we gave says color just the device path which would just be the device name",
    "start": "2118480",
    "end": "2123520"
  },
  {
    "text": "device name and diactal numbers and then the full device info which would be the device name my myoctal",
    "start": "2123520",
    "end": "2129440"
  },
  {
    "text": "numbers and the structures associated with it and we also ran our fuzzer mango fuzz with the full device in the full",
    "start": "2129440",
    "end": "2136240"
  },
  {
    "text": "interface info and when we were fuzzing we found quite",
    "start": "2136240",
    "end": "2141680"
  },
  {
    "start": "2138000",
    "end": "2219000"
  },
  {
    "text": "a few bugs actually we hit 36 total unique crashes across these seven devices you can see",
    "start": "2141680",
    "end": "2148000"
  },
  {
    "text": "here which for each of the different tests and each of the seven phones what we found",
    "start": "2148000",
    "end": "2154000"
  },
  {
    "text": "the best performing one was sis car with the full information extracted by defuse kind of as expected",
    "start": "2154000",
    "end": "2160720"
  },
  {
    "text": "which got 34 crashes however diffused with mango fuzz are much simpler fuzzer of course only",
    "start": "2160720",
    "end": "2167839"
  },
  {
    "text": "handles eye octals and is significantly slower still was able to find 30 crashes",
    "start": "2167839",
    "end": "2173119"
  },
  {
    "text": "and this to us really shows how important the interface information was",
    "start": "2173119",
    "end": "2178960"
  },
  {
    "text": "because just using this in a kind of hacky and dumb way our fuzz was able to",
    "start": "2178960",
    "end": "2184320"
  },
  {
    "text": "still get 30 crashes and not that many less than a state of the art tool using the same info",
    "start": "2184320",
    "end": "2190960"
  },
  {
    "text": "with just the path you weren't able to get mini crashes just three but when we gave it the path plus the",
    "start": "2191040",
    "end": "2197520"
  },
  {
    "text": "ioctal command numbers we were able to get 22 crashes which is a bit more but still",
    "start": "2197520",
    "end": "2203599"
  },
  {
    "text": "you need the full structure information to get the remaining 50 percent increase the 34 crashes and those ones with",
    "start": "2203599",
    "end": "2209760"
  },
  {
    "text": "destruction those will probably be the deeper and more useful bugs than the ones where you just give it the",
    "start": "2209760",
    "end": "2216480"
  },
  {
    "text": "device and the command numbers oh and one more thing although of course",
    "start": "2216480",
    "end": "2222720"
  },
  {
    "start": "2219000",
    "end": "2247000"
  },
  {
    "text": "some of these were like moldy references and not all exploitable for example on the pixel we have five crashes here",
    "start": "2222720",
    "end": "2229599"
  },
  {
    "text": "two of these were exploitable one of them we wrote an exploit from which could escalate from audio permissions to",
    "start": "2229599",
    "end": "2235760"
  },
  {
    "text": "kernel and we've submitted both these to google unfortunately they're not public yet so i can't talk about those ones",
    "start": "2235760",
    "end": "2241520"
  },
  {
    "text": "specifically but i have some other fun bugs i'm going to talk about in these next few slides",
    "start": "2241520",
    "end": "2247920"
  },
  {
    "start": "2247000",
    "end": "2310000"
  },
  {
    "text": "all right so this first one on mediatek we found it out of bounds right",
    "start": "2247920",
    "end": "2253200"
  },
  {
    "text": "and this one's kind of fun to me because it ends up being the developers put a curly brace in kind of the wrong",
    "start": "2253200",
    "end": "2259200"
  },
  {
    "text": "location so let's look at what happened in the beginning they initialized this free id to negative one now they're",
    "start": "2259200",
    "end": "2265280"
  },
  {
    "text": "going to loop through this for loop just following this this statement and try to find a new",
    "start": "2265280",
    "end": "2270960"
  },
  {
    "text": "free id and if they can't free id will still be negative one and so down here there's this if statement that handles",
    "start": "2270960",
    "end": "2277040"
  },
  {
    "text": "free id negative one but this else statement the same is where",
    "start": "2277040",
    "end": "2282560"
  },
  {
    "text": "they wanted to fix up the free id if it was still negative one and somehow they messed this up and of course this will",
    "start": "2282560",
    "end": "2288560"
  },
  {
    "text": "never happen because free id was day of one it'll go on the if statement not the else statement",
    "start": "2288560",
    "end": "2293680"
  },
  {
    "text": "so you'll get down here free id is still negative one and you end up with an out of rounds right index negative one and",
    "start": "2293680",
    "end": "2299520"
  },
  {
    "text": "this is actually a pretty useful right it overrides something some very useful pointers and we were able to",
    "start": "2299520",
    "end": "2305920"
  },
  {
    "text": "make it export that escalade from any app on this phone to kernel permissions",
    "start": "2305920",
    "end": "2311599"
  },
  {
    "start": "2310000",
    "end": "2430000"
  },
  {
    "text": "all right and then this next bug i really like this one because it's actually a bug in the bug function",
    "start": "2311599",
    "end": "2316800"
  },
  {
    "text": "itself so when we were fuzzing we saw this in the last k message unable to handle",
    "start": "2316800",
    "end": "2323119"
  },
  {
    "text": "kernel paging requests at virtual address zero zero zero zero dead d-e-a-d",
    "start": "2323119",
    "end": "2328480"
  },
  {
    "text": "now that looks like a surf failure or something and of course it was in the bug handler they wrote",
    "start": "2328480",
    "end": "2334720"
  },
  {
    "text": "their own bug handler that just tried writing to ox dead to kill the kernel",
    "start": "2334720",
    "end": "2340079"
  },
  {
    "text": "and of course this is a mistake because you can just end that at ox d000 and",
    "start": "2340079",
    "end": "2346160"
  },
  {
    "text": "then the kernel will try writing there and it'll just work because there's no or on most android phones there's no",
    "start": "2346160",
    "end": "2352560"
  },
  {
    "text": "permission control preventing the kernel from writing to user land and so if you have mapped their head of",
    "start": "2352560",
    "end": "2358640"
  },
  {
    "text": "time you can just bypass these bug or assert macros it's used for all the cert macros in the kernel and so all asserts",
    "start": "2358640",
    "end": "2366480"
  },
  {
    "text": "that became worthless and you could skip them and trigger some memory corruption",
    "start": "2366480",
    "end": "2372400"
  },
  {
    "text": "and then a last bug we found one time while we were fuzzing one device suddenly the fuzz reported couldn't find",
    "start": "2372480",
    "end": "2378720"
  },
  {
    "text": "it we plugged the unplug device plug it back in as usual to try to reset it",
    "start": "2378720",
    "end": "2383760"
  },
  {
    "text": "still doesn't work unplug turn the device off turn it back on plug it in still can't find it we look more closely and the",
    "start": "2383760",
    "end": "2390160"
  },
  {
    "text": "serial numbers changed to that random string there so the device we were fuzzing apparently",
    "start": "2390160",
    "end": "2397119"
  },
  {
    "text": "let you write to nvram which is non-volatile memory and you should never be able to write to",
    "start": "2397119",
    "end": "2403520"
  },
  {
    "text": "nvram as any normal or user or even root on the phone",
    "start": "2403520",
    "end": "2408560"
  },
  {
    "text": "and so i think that also was due to an out of bounds index as well that well",
    "start": "2408560",
    "end": "2414480"
  },
  {
    "text": "you there was some spot they actually intended you to write in there but either way",
    "start": "2414480",
    "end": "2419839"
  },
  {
    "text": "we ended up overriding the serial number you could change all sorts of stuff including like the imei and other",
    "start": "2419839",
    "end": "2424960"
  },
  {
    "text": "important information and permanently damaged device",
    "start": "2424960",
    "end": "2430240"
  },
  {
    "start": "2430000",
    "end": "2494000"
  },
  {
    "text": "all right some of the future work that still needs to happen to make this to to continue finding bugs with this project",
    "start": "2431119",
    "end": "2439359"
  },
  {
    "text": "on most these phones it's very hard to compile with ksan and k coverage ksan is very user useful because it will",
    "start": "2439359",
    "end": "2446560"
  },
  {
    "text": "report crashes much so that sometimes you won't or will report bugs that sometimes might not",
    "start": "2446560",
    "end": "2452960"
  },
  {
    "text": "result in crashes immediately so like if there's a use after free at all it'll detect it and report it to you",
    "start": "2452960",
    "end": "2458960"
  },
  {
    "text": "and you don't have to wait for that use after free to be using a pointer or something else you",
    "start": "2458960",
    "end": "2464839"
  },
  {
    "text": "control k coverage cisco can use the coverage info to try to perform better",
    "start": "2464839",
    "end": "2470480"
  },
  {
    "text": "fuzzing and i guess that's one of his really strong points to perform mutational fuzzing by knowing what",
    "start": "2470480",
    "end": "2476160"
  },
  {
    "text": "functionality is triggered and again it's hard to compile this into most phones i think the only one we've been",
    "start": "2476160",
    "end": "2481920"
  },
  {
    "text": "able to do with k-san and k-cub is the pixel and of course you can run this",
    "start": "2481920",
    "end": "2488079"
  },
  {
    "text": "fuzzing on more phones you can run on standard linux drivers and other devices",
    "start": "2488079",
    "end": "2495040"
  },
  {
    "start": "2494000",
    "end": "2538000"
  },
  {
    "text": "and in conclusion driver fuzzing can yield a lot of bugs as we've shown but one important aspect is that you",
    "start": "2495040",
    "end": "2501920"
  },
  {
    "text": "need to model the interface correctly if you don't model the interface correctly you're going to miss out on most of",
    "start": "2501920",
    "end": "2508560"
  },
  {
    "text": "functionality and you won't be able to hit lots of these bugs but fortunately diffuse our tool",
    "start": "2508560",
    "end": "2515680"
  },
  {
    "text": "automatically extracts this info for you and can be used for to make this fuzzing easy it's available",
    "start": "2515680",
    "end": "2522560"
  },
  {
    "text": "online on github on github.com ucsbseclab defuse you can go try it out",
    "start": "2522560",
    "end": "2529440"
  },
  {
    "text": "and fuzz things yourself awesome thanks for coming to talk and we'll now take questions from the",
    "start": "2529440",
    "end": "2535520"
  },
  {
    "text": "audience",
    "start": "2535520",
    "end": "2537839"
  },
  {
    "start": "2538000",
    "end": "2670000"
  },
  {
    "text": "they're bringing them up",
    "start": "2542240",
    "end": "2545880"
  },
  {
    "text": "austria a quick question on the pixel you were able to compile it with coverage information i'd be very",
    "start": "2558079",
    "end": "2564079"
  },
  {
    "text": "interested on what kind of code coverage level you were able to reach because drivers in my uh my experience are",
    "start": "2564079",
    "end": "2570880"
  },
  {
    "text": "stateful rather than stateless so um some code paths are only triggered if",
    "start": "2570880",
    "end": "2576079"
  },
  {
    "text": "you have some triggered some some other code part before so i would be interested in your results in that area",
    "start": "2576079",
    "end": "2582480"
  },
  {
    "text": "do we have i don't think we have any coverage yeah we actually didn't even we we were getting so many crashes with",
    "start": "2582480",
    "end": "2588240"
  },
  {
    "text": "just k sand we didn't even attempt with kcub it was a bit overwhelming for us we",
    "start": "2588240",
    "end": "2593760"
  },
  {
    "text": "we still have more crashes to get into at this point i don't think we've",
    "start": "2593760",
    "end": "2599760"
  },
  {
    "text": "yeah ever looked into what sort of coverage yeah mostly been fine crash",
    "start": "2599760",
    "end": "2605520"
  },
  {
    "text": "check it often we patch some of the noldie references or whatever and keep looking more crashes of course there's been a lot of phones",
    "start": "2605520",
    "end": "2613200"
  },
  {
    "text": "yeah sorry",
    "start": "2613200",
    "end": "2616440"
  },
  {
    "text": "does any of your work assume things like the device has been rooted or you have root access to do some of these things",
    "start": "2620480",
    "end": "2628079"
  },
  {
    "text": "yeah yeah it does so uh it doesn't have to be but it's the most useful you'll get the most coverage if you're root",
    "start": "2628079",
    "end": "2634319"
  },
  {
    "text": "because you know even though from like uh an exploitation perspective maybe it's not as interesting that you need to",
    "start": "2634319",
    "end": "2639440"
  },
  {
    "text": "have like audio permissions as a starting permission but i mean that's still like a valid bug and so yeah we",
    "start": "2639440",
    "end": "2644560"
  },
  {
    "text": "run his route so that we can touch any driver we want then maybe a suggestion as a follow-up suggestion for the part that you you",
    "start": "2644560",
    "end": "2651599"
  },
  {
    "text": "said that is probably uh the one that you need to work a bit more maybe you can just",
    "start": "2651599",
    "end": "2657280"
  },
  {
    "text": "list the dev files and then try to do a iok tool with a given number on them and",
    "start": "2657280",
    "end": "2662720"
  },
  {
    "text": "see what happens okay yeah yeah yeah that makes sense",
    "start": "2662720",
    "end": "2668400"
  },
  {
    "start": "2670000",
    "end": "2720000"
  },
  {
    "text": "hi did you run any benchmarks about times and minutes hours took for both",
    "start": "2671520",
    "end": "2679200"
  },
  {
    "text": "the static phase and also the fuzzy phase yeah we definitely did i don't remember",
    "start": "2679200",
    "end": "2685280"
  },
  {
    "text": "them off top of my head the static phase doesn't take that long right well i mean it depends on like what kind of machine",
    "start": "2685280",
    "end": "2690319"
  },
  {
    "text": "you're running it on of course right now 40 core machine takes like what under an hour or two hours um yeah it'll vary",
    "start": "2690319",
    "end": "2696480"
  },
  {
    "text": "depending on how many like i octal handlers it finds and stuff uh if you look so this is actually a ccs paper as",
    "start": "2696480",
    "end": "2701680"
  },
  {
    "text": "well so we have all the timing information in the paper itself i don't know enough to have my head i'm sorry",
    "start": "2701680",
    "end": "2708318"
  },
  {
    "text": "next question in the back",
    "start": "2710000",
    "end": "2713800"
  },
  {
    "start": "2720000",
    "end": "3187000"
  },
  {
    "text": "hi my name is bernie good heart um so you've talked about iotals and how",
    "start": "2721040",
    "end": "2728000"
  },
  {
    "text": "you've passed them to get or the parameters and so on and using",
    "start": "2728000",
    "end": "2733680"
  },
  {
    "text": "you use a copy to copy in but you can't use the ioctal until you've opened the devices and in order",
    "start": "2733680",
    "end": "2740480"
  },
  {
    "text": "to open them you need to specify the correct dog vlc and so on",
    "start": "2740480",
    "end": "2746720"
  },
  {
    "text": "um so what i'm saying is is do you pass the uh open as well",
    "start": "2746720",
    "end": "2754079"
  },
  {
    "text": "in order to yeah so some of the interface information we have is like the the path to the device",
    "start": "2754079",
    "end": "2760079"
  },
  {
    "text": "so yeah we can open it i know maybe i've misunderstood the question",
    "start": "2760079",
    "end": "2765200"
  },
  {
    "text": "no i'm just saying like you know once you've opened up the device and you can you can then get to the eye octal yeah",
    "start": "2765200",
    "end": "2770319"
  },
  {
    "text": "you can't get to the article until you've opened up the device right right but in order to open the device",
    "start": "2770319",
    "end": "2776160"
  },
  {
    "text": "um it's not just as simple as saying open slash dev whatever whatever",
    "start": "2776160",
    "end": "2782560"
  },
  {
    "text": "why because a lot of devices",
    "start": "2782560",
    "end": "2787680"
  },
  {
    "text": "will refuse to open unless they've got the full argument structure",
    "start": "2787680",
    "end": "2792800"
  },
  {
    "text": "people are they're already i mean maybe we should talk after",
    "start": "2792800",
    "end": "2798720"
  },
  {
    "text": "because okay as far as i understand it should be fully initial the device has already initialized everything and well",
    "start": "2798720",
    "end": "2804880"
  },
  {
    "text": "yeah i'll talk to you offline i'll talk to you the other i just sorry i've got one other question it seems to me that the magic in this is",
    "start": "2804880",
    "end": "2811520"
  },
  {
    "text": "in the um the uh python",
    "start": "2811520",
    "end": "2817359"
  },
  {
    "text": "uh build that you sorry no in the clang build um",
    "start": "2817359",
    "end": "2822640"
  },
  {
    "text": "and what engine you use there to decipher all the ioctal information and so on",
    "start": "2822640",
    "end": "2828640"
  },
  {
    "text": "um but you're using the source code of the entire mainland tree there or you",
    "start": "2828640",
    "end": "2833839"
  },
  {
    "text": "just of specific device drivers um the the whole tree the whole tree yeah yeah so if you've",
    "start": "2833839",
    "end": "2840240"
  },
  {
    "text": "i'm where i'm getting a bit confused and maybe i missed the point and we should probably talk offline i don't know if anybody else is interested but if you've",
    "start": "2840240",
    "end": "2846560"
  },
  {
    "text": "got the entire source code tree why don't you just pass the actual code",
    "start": "2846560",
    "end": "2852079"
  },
  {
    "text": "proper that's actually a lot harder than than you would think parsing the c code",
    "start": "2852079",
    "end": "2857839"
  },
  {
    "text": "as opposed to well you're just using the preprocessors now so we you just use the c preprocessor",
    "start": "2857839",
    "end": "2865040"
  },
  {
    "text": "and then generate the bit code and then it's pretty easy to parse it",
    "start": "2865040",
    "end": "2870480"
  },
  {
    "text": "inside llvm and i guess you could you can parse it in source code i don't know if that",
    "start": "2870480",
    "end": "2877440"
  },
  {
    "text": "gives you much of advantage over doing llvm yeah",
    "start": "2877440",
    "end": "2882770"
  },
  {
    "text": "[Music] yeah i've done this before long time ago on unix systems so",
    "start": "2882770",
    "end": "2889119"
  },
  {
    "text": "um i'll talk to you anywhere okay thanks",
    "start": "2889119",
    "end": "2894720"
  },
  {
    "text": "what's the next question",
    "start": "2895440",
    "end": "2899078"
  },
  {
    "text": "okay i think i missed something but the in the case of the structures that has a",
    "start": "2912319",
    "end": "2917680"
  },
  {
    "text": "pointer to another structure uh did you as the impedance uh analysis for i mean",
    "start": "2917680",
    "end": "2923440"
  },
  {
    "text": "using economic recursive because recursively to analysis the structure right",
    "start": "2923440",
    "end": "2929920"
  },
  {
    "text": "yeah yeah and how how that's how deep did you go through the structures",
    "start": "2929920",
    "end": "2936880"
  },
  {
    "text": "yeah so we limit recursion yeah if it's okay over cursive field i think we go one level",
    "start": "2936880",
    "end": "2942559"
  },
  {
    "text": "deep and then we just set the next the next recursive field to be null uh",
    "start": "2942559",
    "end": "2948559"
  },
  {
    "text": "sorry it's part of the pardon so what if if it's a recursive structure is that what you're asking about",
    "start": "2948559",
    "end": "2954559"
  },
  {
    "text": "yeah yeah we're right in the case of the structure hasn't has a pointer to another structure yeah i mean sometimes",
    "start": "2954559",
    "end": "2960079"
  },
  {
    "text": "sometimes i'm from my experience some structure has a many level so a recursive pointer to",
    "start": "2960079",
    "end": "2966800"
  },
  {
    "text": "another structure yeah so did you oh did you go always uh go straight till the",
    "start": "2966800",
    "end": "2972319"
  },
  {
    "text": "end of the end of the recursive structure or have some limitation to request for that that",
    "start": "2972319",
    "end": "2978640"
  },
  {
    "text": "we go until it ends unless it loops back around so you get a pointer to if you have like a next pointer and it's",
    "start": "2978640",
    "end": "2984160"
  },
  {
    "text": "a pointer to the same structure that could go forever and so in that case in our fuzzer we limit it",
    "start": "2984160",
    "end": "2989599"
  },
  {
    "text": "i'm sure it's his car might handle a little bit differently and try different levels but we just limit it to if",
    "start": "2989599",
    "end": "2995920"
  },
  {
    "text": "there's a recursive one where it's the exact same structure is reached again in this loop we limit it and do a null structure",
    "start": "2995920",
    "end": "3002559"
  },
  {
    "text": "there thank you next question",
    "start": "3002559",
    "end": "3009720"
  },
  {
    "text": "sure you don't have any more questions",
    "start": "3019760",
    "end": "3023800"
  },
  {
    "text": "uh so since you're already compiling the code have you thought about using this essentially as static code analysis and",
    "start": "3026960",
    "end": "3033440"
  },
  {
    "text": "feeding your um your fossa you said you have some edge cases for integer off by once and so on",
    "start": "3033440",
    "end": "3040319"
  },
  {
    "text": "uh feeding it essentially the code paths that are triggered by some specific uh by some inputs so if you look into in",
    "start": "3040319",
    "end": "3047359"
  },
  {
    "text": "there if this byte is set to this then do this and that all right",
    "start": "3047359",
    "end": "3053520"
  },
  {
    "text": "we haven't really done anything there um i could definitely see ways you could",
    "start": "3053520",
    "end": "3059680"
  },
  {
    "text": "use the actual like instrument or watch which paths are covered here to do",
    "start": "3059680",
    "end": "3065359"
  },
  {
    "text": "further to try to trigger the specific ones or maybe edge cases you're missing",
    "start": "3065359",
    "end": "3070720"
  },
  {
    "text": "and giving sis car cake of information can also hit some of these paths that you're",
    "start": "3070720",
    "end": "3076480"
  },
  {
    "text": "missing okay thank you",
    "start": "3076480",
    "end": "3081240"
  },
  {
    "text": "one more thing to note there also there's like a brother paper to this called dr checker which takes all this",
    "start": "3082559",
    "end": "3087760"
  },
  {
    "text": "llvm bit code and it does just do like just static analysis on it actually so that yeah",
    "start": "3087760",
    "end": "3094000"
  },
  {
    "text": "um have you heard of a python packet called c types gen",
    "start": "3094000",
    "end": "3099119"
  },
  {
    "text": "that generates uh python structures from c structures because it seems that it does what you are",
    "start": "3099119",
    "end": "3105599"
  },
  {
    "text": "you are doing no i have not heard of that okay",
    "start": "3105599",
    "end": "3110880"
  },
  {
    "text": "next question",
    "start": "3114319",
    "end": "3116960"
  },
  {
    "text": "so this is lovely work about 10 years ago i worked on a bindings generator project for",
    "start": "3121280",
    "end": "3128480"
  },
  {
    "text": "dynamically generating interface code between c and c plus plus across a number of different run times",
    "start": "3128480",
    "end": "3134559"
  },
  {
    "text": "it seems like the big problem you have here is the analysis of the linux kernel source and one thing found to provide a",
    "start": "3134559",
    "end": "3140640"
  },
  {
    "text": "lot of mileage was actually using the cdt project from eclipse because it gives you full abstract syntax trees",
    "start": "3140640",
    "end": "3147440"
  },
  {
    "text": "for every bit of c code that it sees and you can search by structures so those oracle calls",
    "start": "3147440",
    "end": "3153280"
  },
  {
    "text": "the structures you'll actually just be able to pull out in about five minutes and it'll give you full",
    "start": "3153280",
    "end": "3159839"
  },
  {
    "text": "take a look at it you might make your life a lot easier over clang well take a look thanks",
    "start": "3159839",
    "end": "3167078"
  },
  {
    "text": "no more questions awesome well thanks for telling us our",
    "start": "3176079",
    "end": "3182800"
  },
  {
    "text": "talk [Applause]",
    "start": "3182800",
    "end": "3189089"
  }
]