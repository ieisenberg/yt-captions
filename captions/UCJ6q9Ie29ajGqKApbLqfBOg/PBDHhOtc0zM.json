[
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14690"
  },
  {
    "text": "hello welcome to this session in the next 40 minutes we will be talking about malware and how we we",
    "start": "14719",
    "end": "21920"
  },
  {
    "text": "evaded the behavioral detection of state-of-the-art anti-virus and endpoint detection and response solutions with",
    "start": "21920",
    "end": "28800"
  },
  {
    "text": "this new flavor of distributed malware rope for rope driven execution",
    "start": "28800",
    "end": "34480"
  },
  {
    "text": "the theme behind this research uh me you might remember me from the last two editions of blackhead europe where i've",
    "start": "34480",
    "end": "41280"
  },
  {
    "text": "been talking about malwa revations with first blue pill this framework for disarming malware",
    "start": "41280",
    "end": "47600"
  },
  {
    "text": "revisions and last year is that with new microarchitectural primitives for",
    "start": "47600",
    "end": "52640"
  },
  {
    "text": "hypervisor detection and this is a joint work with lorenz nvidia lorenzo holds a master degree in",
    "start": "52640",
    "end": "59680"
  },
  {
    "text": "cyber security from my institutions against university of rome and is really passionate about windows internals and",
    "start": "59680",
    "end": "66880"
  },
  {
    "text": "reverse engineering research so together we have been working on the problem of how",
    "start": "66880",
    "end": "73040"
  },
  {
    "text": "av and edr solutions they flag untrusted software as malicious using",
    "start": "73040",
    "end": "79600"
  },
  {
    "text": "behavioral analysis so when you have a an untrusted piece of software what you",
    "start": "79600",
    "end": "85520"
  },
  {
    "text": "can do with an av or adr solution you can scan its code",
    "start": "85520",
    "end": "90880"
  },
  {
    "text": "and try to match it against known signatures for known threats but when",
    "start": "90880",
    "end": "96400"
  },
  {
    "text": "you're facing a new threat what you can do is you can attempt behavioral analysis so",
    "start": "96400",
    "end": "102720"
  },
  {
    "text": "it's what is behavioral really behavioral is a type of analysis that is",
    "start": "102720",
    "end": "108079"
  },
  {
    "text": "dynamic so it will monitor the execution units in your system for actions",
    "start": "108079",
    "end": "113759"
  },
  {
    "text": "involving registry manipulation file system network and so on",
    "start": "113759",
    "end": "119119"
  },
  {
    "text": "and you will try to see if the actions are of a process they will match some",
    "start": "119119",
    "end": "126000"
  },
  {
    "text": "some known patterns some let's say dynamic execution signatures that are typical of malicious behaviors the",
    "start": "126000",
    "end": "132400"
  },
  {
    "text": "moment that you you match such a sequence the av or edr will raise an alert and we'll ask the user typically",
    "start": "132400",
    "end": "139680"
  },
  {
    "text": "what to do and will possibly halt to a grind a new threat so what are the",
    "start": "139680",
    "end": "146959"
  },
  {
    "text": "limits of current approaches to behavioral analysis then and this is what we asked ourselves when we started",
    "start": "146959",
    "end": "153680"
  },
  {
    "text": "this research so in this talk i will cover state of the art what we did to improve",
    "start": "153680",
    "end": "160000"
  },
  {
    "text": "it uh we'll present this concept rob detail its implementation",
    "start": "160000",
    "end": "165200"
  },
  {
    "text": "and two new bypasses which might be of independent interest to get around the mitigations of windows 10 for",
    "start": "165200",
    "end": "173680"
  },
  {
    "text": "the windows defender exploit guard component we will be presenting their experimental results discuss them and",
    "start": "173680",
    "end": "180400"
  },
  {
    "text": "talk about what our directions for further research in this area and what to what we can do to defend ourselves",
    "start": "180400",
    "end": "187680"
  },
  {
    "text": "from these threats first a few more words on behavioral analysis um",
    "start": "187680",
    "end": "193200"
  },
  {
    "text": "so you you have this infamous untrusted piece of software and what you do is you you start executing",
    "start": "193200",
    "end": "199599"
  },
  {
    "text": "it on a typical in a very tight leash so you are uh shepherding every interaction",
    "start": "199599",
    "end": "205440"
  },
  {
    "text": "with the operating system looking for something suspicious but then at some point you have to let",
    "start": "205440",
    "end": "210560"
  },
  {
    "text": "this process go otherwise you're introducing uh expensive slow down so you may be breaking the functionality so",
    "start": "210560",
    "end": "218000"
  },
  {
    "text": "this application will now run pretty much unleashed after the initial stage except that you keep an",
    "start": "218000",
    "end": "224799"
  },
  {
    "text": "eye on it you will be still monitoring relevant actions and to this end you will be using user",
    "start": "224799",
    "end": "231840"
  },
  {
    "text": "space hooks mini filters and other standard means and typically you do this for one",
    "start": "231840",
    "end": "237120"
  },
  {
    "text": "process so at a time so the granularity uh for looking at events is the actions of a",
    "start": "237120",
    "end": "243680"
  },
  {
    "text": "single process or sometimes you can extend this to to its children but in general that's",
    "start": "243680",
    "end": "250000"
  },
  {
    "text": "that's the high level picture and have tried to to get around a",
    "start": "250000",
    "end": "256720"
  },
  {
    "text": "heuristic detection of the behavior by by using this idea of distributed",
    "start": "256720",
    "end": "262320"
  },
  {
    "text": "malware so to present the the the concept of distributed malware a nice",
    "start": "262320",
    "end": "267520"
  },
  {
    "text": "work recent work in the area use the use the title of this novel the",
    "start": "267520",
    "end": "273280"
  },
  {
    "text": "naked sun where robots according to to the first law",
    "start": "273280",
    "end": "279520"
  },
  {
    "text": "in the novel they cannot harm humans they cannot carry a task that will deliberately harm",
    "start": "279520",
    "end": "285600"
  },
  {
    "text": "a human however what happens is that each robot in the end turns out to to to make an",
    "start": "285600",
    "end": "292400"
  },
  {
    "text": "action that on its own doesn't harm a human but if you take the outcome of all the",
    "start": "292400",
    "end": "298160"
  },
  {
    "text": "aggregated actions then something bad occurs and this is what you can do with distributed malware you take a payload",
    "start": "298160",
    "end": "305280"
  },
  {
    "text": "you can dilute the temporal and special footprint of the actions of this payload to multiple cooperating entities",
    "start": "305280",
    "end": "312080"
  },
  {
    "text": "processes for instance and the trick is that no single entity alerts the av or",
    "start": "312080",
    "end": "317199"
  },
  {
    "text": "adr so you manage to stay below the deduction threshold with each unit and you're",
    "start": "317199",
    "end": "323039"
  },
  {
    "text": "fine fine to speak because in the end those solutions the current implementations they",
    "start": "323039",
    "end": "328800"
  },
  {
    "text": "they're still an easy prey of av and edr solutions because they have some conspicuous traits",
    "start": "328800",
    "end": "334880"
  },
  {
    "text": "there are currently two main approaches to distributed malware the first is to",
    "start": "334880",
    "end": "340000"
  },
  {
    "text": "use a set of processes that you create on the spot a doc",
    "start": "340000",
    "end": "345360"
  },
  {
    "text": "and you can even make this process resemble normal applications like mimicry attacks",
    "start": "345360",
    "end": "351840"
  },
  {
    "text": "but to stay undetected in the presence of state-of-the-art solutions you need a very high number of",
    "start": "351840",
    "end": "358160"
  },
  {
    "text": "processes and also to avoid correlation you should make should make sure that each process is",
    "start": "358160",
    "end": "364960"
  },
  {
    "text": "seen as independent of the other but if you are all creating them at once that's that's",
    "start": "364960",
    "end": "370560"
  },
  {
    "text": "a bit difficult to do i believe that a more promising avenue",
    "start": "370560",
    "end": "376240"
  },
  {
    "text": "is the one explored by other researchers that abuse existing processes by taking",
    "start": "376240",
    "end": "382160"
  },
  {
    "text": "a payload chopping this payload in pieces and spreading the pieces of this of this malware along along with",
    "start": "382160",
    "end": "389600"
  },
  {
    "text": "an emulator inside victim processes and these processes are already running on the machine typically processes that",
    "start": "389600",
    "end": "396319"
  },
  {
    "text": "have lots of activity so you are literally interleaving malicious activities in a long long trace of",
    "start": "396319",
    "end": "402960"
  },
  {
    "text": "benign activities problems here are that injecting code is noisy you are introducing or modifying",
    "start": "402960",
    "end": "409599"
  },
  {
    "text": "executable memory and your you have bought the the components of the payload and you have",
    "start": "409599",
    "end": "415680"
  },
  {
    "text": "this emulator that coordinates the execution and you're also introducing quite a",
    "start": "415680",
    "end": "421199"
  },
  {
    "text": "number of memory regions because you are you are retrofitting a normal executable",
    "start": "421199",
    "end": "426240"
  },
  {
    "text": "which uses many regions so does the emulator so you're introducing lots of artifacts",
    "start": "426240",
    "end": "431919"
  },
  {
    "text": "in the address space and plus there is also another problem now",
    "start": "431919",
    "end": "437759"
  },
  {
    "text": "it's the problem is the availability of hardening mitigations in operating",
    "start": "437759",
    "end": "443360"
  },
  {
    "text": "systems to reduce the stock surface of applications against next generation",
    "start": "443360",
    "end": "448560"
  },
  {
    "text": "malware and exploits so there are in the windows defender exploit card uh",
    "start": "448560",
    "end": "455039"
  },
  {
    "text": "wdag system there are a number of mitigations that are obtained for applications like",
    "start": "455039",
    "end": "461440"
  },
  {
    "text": "arbitrary code guard which prevents the allocation or modification of executable",
    "start": "461440",
    "end": "466800"
  },
  {
    "text": "memory you have code integrity guard that essentially allows you to load only",
    "start": "466800",
    "end": "472560"
  },
  {
    "text": "signed modules and con modules and you have mitigations like export and",
    "start": "472560",
    "end": "477599"
  },
  {
    "text": "import address filtering that break the usual lookup sequences that injected",
    "start": "477599",
    "end": "483360"
  },
  {
    "text": "payloads used to locate apis so this is becoming more difficult for",
    "start": "483360",
    "end": "489599"
  },
  {
    "text": "for distributed malware and in the end to to realize a successful",
    "start": "489599",
    "end": "496800"
  },
  {
    "text": "distributed instance of malware you might want to have a design that supports a flexible delivery of payload",
    "start": "496800",
    "end": "504160"
  },
  {
    "text": "that can work with different injection primitives with very limited constraints on the capabilities",
    "start": "504160",
    "end": "511199"
  },
  {
    "text": "of the primitive and at the same time you want to have a very small footprint for the",
    "start": "511199",
    "end": "516880"
  },
  {
    "text": "distributed runtime emulator or any other component that you need to assist",
    "start": "516880",
    "end": "522080"
  },
  {
    "text": "this distributed execution in the coordination otherwise you would you can just fingerprint the emulator",
    "start": "522080",
    "end": "528560"
  },
  {
    "text": "also you may want to comply with arduino mitigations because this those can gain popularity in the next years at the same",
    "start": "528560",
    "end": "535440"
  },
  {
    "text": "time uh once you succeed in this you might also want to keep the code and that of",
    "start": "535440",
    "end": "540959"
  },
  {
    "text": "your distributed payload hidden as much as possible to avoid uh the possibility",
    "start": "540959",
    "end": "546880"
  },
  {
    "text": "of dynamic signatures for it on its code so what we can do well we asked this",
    "start": "546880",
    "end": "554959"
  },
  {
    "text": "this question to ourselves and we we tried to revisit the architecture of an",
    "start": "554959",
    "end": "560880"
  },
  {
    "text": "injection-based distributed malware concept and we we have another component that is in",
    "start": "560880",
    "end": "568080"
  },
  {
    "text": "charge of injecting a number of victim processes and will inject those victims with a",
    "start": "568080",
    "end": "573600"
  },
  {
    "text": "bootstrap component this bootstrap component will set up to distributed execution where we have a payload that",
    "start": "573600",
    "end": "580880"
  },
  {
    "text": "is arranged in chunks and each chunk can be executed by victims but the key",
    "start": "580880",
    "end": "587279"
  },
  {
    "text": "is that each chunk is expressed using code that is already in the victim so we",
    "start": "587279",
    "end": "592480"
  },
  {
    "text": "are not introducing any code and to assist the execution with hosting",
    "start": "592480",
    "end": "597920"
  },
  {
    "text": "this payload hosting the memory so global memory hip memory and all the",
    "start": "597920",
    "end": "604880"
  },
  {
    "text": "mental data that you need for execution coordination we use a single",
    "start": "604880",
    "end": "610079"
  },
  {
    "text": "a single medium we have one medium and one memory region to host",
    "start": "610079",
    "end": "615760"
  },
  {
    "text": "everything at once and for this we use a non-inspectable cover channel in more",
    "start": "615760",
    "end": "621040"
  },
  {
    "text": "detail the the two main ingredients of our architecture are return reader programming",
    "start": "621040",
    "end": "627120"
  },
  {
    "text": "and transactional tfs with this combination we realize a distributed",
    "start": "627120",
    "end": "632160"
  },
  {
    "text": "drop driven execution that we call drop in more detail return oriented",
    "start": "632160",
    "end": "638079"
  },
  {
    "text": "programming well if you don't know return rated programming it's a well-known exploitation technique that",
    "start": "638079",
    "end": "644480"
  },
  {
    "text": "has reassembles code fragments that are in the address space of an application to",
    "start": "644480",
    "end": "650480"
  },
  {
    "text": "carry out the desired semantics for an attacker but you can do a lot more than",
    "start": "650480",
    "end": "655680"
  },
  {
    "text": "exploitation so in our case we use rob to encode the distributed payload using",
    "start": "655680",
    "end": "662000"
  },
  {
    "text": "rob gadgets that are in some code module that all the victims have loaded",
    "start": "662000",
    "end": "668000"
  },
  {
    "text": "and by doing so we avoid the need of having writable and executable memory the same time we will use prop also to",
    "start": "668000",
    "end": "675440"
  },
  {
    "text": "get around some of the mitigations of wdag the other ingredients is transactional",
    "start": "675440",
    "end": "681920"
  },
  {
    "text": "tfs so this is an abstraction available in windows that allows you to perform",
    "start": "681920",
    "end": "687760"
  },
  {
    "text": "transient changes to to the contents of a file on the file system and",
    "start": "687760",
    "end": "694399"
  },
  {
    "text": "unless you commit these changes only processes that have a handle to an mtfs",
    "start": "694399",
    "end": "700800"
  },
  {
    "text": "transaction can see those modifications that you made not even an anti-virus can",
    "start": "700800",
    "end": "706640"
  },
  {
    "text": "so with this we obtain an unexpectable cover channel and in this cover channel we will",
    "start": "706640",
    "end": "712639"
  },
  {
    "text": "place the payload and we will also orchestrate the communications between the entities and this is this is",
    "start": "712639",
    "end": "718639"
  },
  {
    "text": "possible also because we drop the code that we need to write it's just data so",
    "start": "718639",
    "end": "723760"
  },
  {
    "text": "we have one big region inside this txf file",
    "start": "723760",
    "end": "728800"
  },
  {
    "text": "and uh now let's let's analyze each component of the architecture in detail",
    "start": "728800",
    "end": "734240"
  },
  {
    "text": "we have the loader the loader is responsible first of all for selecting suitable victim processes so you may",
    "start": "734240",
    "end": "741839"
  },
  {
    "text": "want to start for instance for picking processes that are active on the",
    "start": "741839",
    "end": "747200"
  },
  {
    "text": "network if you need to exchange information when over the network um",
    "start": "747200",
    "end": "752959"
  },
  {
    "text": "applications that have hyphal system activities so you might follow some criteria then what you do is you",
    "start": "752959",
    "end": "760160"
  },
  {
    "text": "prepare an ntfs transaction so you take some file or you create one you create a",
    "start": "760160",
    "end": "766160"
  },
  {
    "text": "transaction on it we will call this file the ropd xf then you can just empty the any content",
    "start": "766160",
    "end": "773120"
  },
  {
    "text": "that is in there and you will place there the rope chains and the metadata",
    "start": "773120",
    "end": "778160"
  },
  {
    "text": "and then what you do is you will duplicate a handle to the transaction for each victim process so the victim",
    "start": "778160",
    "end": "784560"
  },
  {
    "text": "can look into the this transient content and then in the end once you once you've",
    "start": "784560",
    "end": "790880"
  },
  {
    "text": "achieved all this step you will inject a component in the victim along with a copy of this transacted handle the",
    "start": "790880",
    "end": "798000"
  },
  {
    "text": "specific per victim copy the bootstrap component that you're injecting is in charge of making the",
    "start": "798000",
    "end": "804160"
  },
  {
    "text": "victim load the transacted file the rob txf and the victim will fetch the contents",
    "start": "804160",
    "end": "811760"
  },
  {
    "text": "that are needed from the file to schedule the execution of rob code and",
    "start": "811760",
    "end": "817200"
  },
  {
    "text": "will arrange coordination with other victims when this is necessary and also the the bootstrap component",
    "start": "817200",
    "end": "824079"
  },
  {
    "text": "will help in the covert resolution of the apis that are",
    "start": "824079",
    "end": "829680"
  },
  {
    "text": "needed for the functioning of the malware a few more words on the transacted file",
    "start": "829680",
    "end": "836320"
  },
  {
    "text": "so we are arranging the payload as a sequence of chunk and each chunk can be",
    "start": "836320",
    "end": "842000"
  },
  {
    "text": "executed independently so each victim will execute one or more chunks over time and",
    "start": "842000",
    "end": "848959"
  },
  {
    "text": "chunks are placed in the interrupt xf alongside their memory so program memory",
    "start": "848959",
    "end": "855600"
  },
  {
    "text": "will be part of the transacted file uh global's hip everything will be in there",
    "start": "855600",
    "end": "861360"
  },
  {
    "text": "in there along with metadata for the rope run time so the addresses of the apis that we have",
    "start": "861360",
    "end": "868560"
  },
  {
    "text": "located in a covert manner but also handles that you need for instance when",
    "start": "868560",
    "end": "874880"
  },
  {
    "text": "processes they have to work on the same objects each each process will need to work on its own handle think of a",
    "start": "874880",
    "end": "881760"
  },
  {
    "text": "circuit or a file so you we have we have provisions for that too",
    "start": "881760",
    "end": "887040"
  },
  {
    "text": "and we support two execution modes one we call it continuous and by that we",
    "start": "887040",
    "end": "892399"
  },
  {
    "text": "mean that really any victim can execute any chunk we just need to preserve the",
    "start": "892399",
    "end": "897680"
  },
  {
    "text": "order and the mutual exclusion so that every victim mexic sorry",
    "start": "897680",
    "end": "903040"
  },
  {
    "text": "every chunk gets executed by exactly one victim and so we we provide coordination",
    "start": "903040",
    "end": "908959"
  },
  {
    "text": "we drop and we have a staged mode where uh we can have that sequences of chunks",
    "start": "908959",
    "end": "914959"
  },
  {
    "text": "uh are to be run by specific victims so if you have for instance uh some the",
    "start": "914959",
    "end": "920880"
  },
  {
    "text": "loading phase uh dedicated chunks for the loading stuff for sending stuff to the internet those",
    "start": "920880",
    "end": "927680"
  },
  {
    "text": "might better be run by network active process and in these cases you might also have",
    "start": "927680",
    "end": "934160"
  },
  {
    "text": "that coordination might be dedicated to to the payload or can still be provided",
    "start": "934160",
    "end": "940240"
  },
  {
    "text": "by rob with this design we are getting a number",
    "start": "940240",
    "end": "945600"
  },
  {
    "text": "of advantages we we don't need to allocate or modify executable memory we",
    "start": "945600",
    "end": "951120"
  },
  {
    "text": "we use one just one shared medium for code and data no many regions like",
    "start": "951120",
    "end": "956399"
  },
  {
    "text": "before we comply by design with acg and cig and also we are making in-memory",
    "start": "956399",
    "end": "962560"
  },
  {
    "text": "inspection harder for av and edrs because in the end if they try to look at what we are",
    "start": "962560",
    "end": "969759"
  },
  {
    "text": "what we have injected in those victims they will find a bunch of gadgets addresses and data they will not find",
    "start": "969759",
    "end": "975519"
  },
  {
    "text": "code because rope adds one level of indirection to due to the execution so you need drop",
    "start": "975519",
    "end": "982160"
  },
  {
    "text": "aware analysis to look for actual instructions but now i have to convince you that",
    "start": "982160",
    "end": "988480"
  },
  {
    "text": "this actually works and how we made it work so there are a number of challenges that we should be discussing and we will",
    "start": "988480",
    "end": "995519"
  },
  {
    "text": "start with the injection of the bootstrap component because i i promise that there will be no",
    "start": "995519",
    "end": "1001440"
  },
  {
    "text": "writable and executable memory but also we have to talk about a gadget source so",
    "start": "1001440",
    "end": "1007279"
  },
  {
    "text": "actually we we thought of a way of addressing the first two challenges at once",
    "start": "1007279",
    "end": "1013519"
  },
  {
    "text": "and uh in doing so we in the whole implementation actually we had to come up with two novel bypasses",
    "start": "1013519",
    "end": "1021120"
  },
  {
    "text": "for the mitigations of wdag so i will be covering this now let's start with the first bypass",
    "start": "1021120",
    "end": "1028798"
  },
  {
    "text": "but the the problem that we have to face is that we need to deliver this bootstrap component to victims",
    "start": "1028799",
    "end": "1035600"
  },
  {
    "text": "and at the same time we we need to to make sure that all victims",
    "start": "1035600",
    "end": "1042240"
  },
  {
    "text": "they share a gadget source that is good enough for supporting the execution of our payload",
    "start": "1042240",
    "end": "1048160"
  },
  {
    "text": "so um this has to to meet the following constraints",
    "start": "1048160",
    "end": "1053520"
  },
  {
    "text": "we can only use signed code modules no writable and executable memory and most importantly",
    "start": "1053520",
    "end": "1060400"
  },
  {
    "text": "we should not spook an av or edr with conspicuous actions",
    "start": "1060400",
    "end": "1065679"
  },
  {
    "text": "what we can do well at first we thought of phantom dll hollowing which up to",
    "start": "1065679",
    "end": "1071120"
  },
  {
    "text": "last year was the only documented injection that could",
    "start": "1071120",
    "end": "1076320"
  },
  {
    "text": "get around call integrity guard and the idea of phantom dll lollowing is",
    "start": "1076320",
    "end": "1081440"
  },
  {
    "text": "to take a windows dll create a a transaction on it and then",
    "start": "1081440",
    "end": "1086880"
  },
  {
    "text": "you can change the contents of this dll as you once you want so you can place stuff in there for instance the",
    "start": "1086880",
    "end": "1093840"
  },
  {
    "text": "bootstrap component then you write those changes in a transaction and you create",
    "start": "1093840",
    "end": "1099520"
  },
  {
    "text": "a section object so um you use uh windows primitives for creating a",
    "start": "1099520",
    "end": "1106000"
  },
  {
    "text": "section and then you can force the victim processors to map this section in their memory so you're",
    "start": "1106000",
    "end": "1112080"
  },
  {
    "text": "forcing the victims to load them problem is uh now all the state-of-the-art solutions",
    "start": "1112080",
    "end": "1118480"
  },
  {
    "text": "pretty much stay they're monitoring this kind of behavior we also thought that we could be instead",
    "start": "1118480",
    "end": "1125840"
  },
  {
    "text": "uh creating the dissection directly from the victim because if the",
    "start": "1125840",
    "end": "1130880"
  },
  {
    "text": "victim does that maybe it's it's not that suspicious problem is it uh with the recent updates",
    "start": "1130880",
    "end": "1138160"
  },
  {
    "text": "of from the end of last year to wdag if you try to do anti-create section from",
    "start": "1138160",
    "end": "1144400"
  },
  {
    "text": "uh a process that is cig enabled you will get this error so you will get invalid",
    "start": "1144400",
    "end": "1150240"
  },
  {
    "text": "image and what to do then well",
    "start": "1150240",
    "end": "1155360"
  },
  {
    "text": "we we our bypass works like that we still create a transacted file on a windows",
    "start": "1155360",
    "end": "1161600"
  },
  {
    "text": "dll we change the contents for placing extra stuff in there and we",
    "start": "1161600",
    "end": "1168559"
  },
  {
    "text": "create a section then what we do is we duplicate a handle to the section",
    "start": "1168559",
    "end": "1174400"
  },
  {
    "text": "for our victims and we inject a rock chain in the victim",
    "start": "1174400",
    "end": "1180640"
  },
  {
    "text": "so that the victim will map this section with their own handle",
    "start": "1180640",
    "end": "1186240"
  },
  {
    "text": "and also we are resuming the own activities of the victim so it will be a",
    "start": "1186240",
    "end": "1192240"
  },
  {
    "text": "one-off thing we will quickly interrupt the execution and uh",
    "start": "1192240",
    "end": "1197360"
  },
  {
    "text": "map our transacted dll and resume the normal activities in more detail we use",
    "start": "1197360",
    "end": "1202960"
  },
  {
    "text": "a very simple drop chain in total it's uh five gadgets of one instruction each",
    "start": "1202960",
    "end": "1209520"
  },
  {
    "text": "that uh we'll set up the arguments for empty map view section so we'll call in",
    "start": "1209520",
    "end": "1214799"
  },
  {
    "text": "the map view section from within the apple with the victim on the handle and we'll um",
    "start": "1214799",
    "end": "1221840"
  },
  {
    "text": "we'll parse the output so the the address where this module is loaded",
    "start": "1221840",
    "end": "1228559"
  },
  {
    "text": "and we'll combine this with the offset of the code that we want to run inside the module and what happens actually is",
    "start": "1228559",
    "end": "1235440"
  },
  {
    "text": "that the chain also contains a context object with the cpu registers",
    "start": "1235440",
    "end": "1241120"
  },
  {
    "text": "that that the victim uh yeah that they were a part of the of the own activities of the victim when",
    "start": "1241120",
    "end": "1248320"
  },
  {
    "text": "when we interrupted it and so we will run the decide code and upon return from",
    "start": "1248320",
    "end": "1254080"
  },
  {
    "text": "this code drop chain will take over column t continue and restore this context",
    "start": "1254080",
    "end": "1260240"
  },
  {
    "text": "with this technique we just obtain multiple advantages at once first of all we can add all the gadgets",
    "start": "1260240",
    "end": "1267120"
  },
  {
    "text": "that we want to dll so if we don't have enough gadgets or we want gadgets that",
    "start": "1267120",
    "end": "1272720"
  },
  {
    "text": "are easier to work with we have that we can place the bootstrap component inside the dll",
    "start": "1272720",
    "end": "1279679"
  },
  {
    "text": "so we can use a rope chain or we can even write this as a shell code if we want",
    "start": "1279679",
    "end": "1285360"
  },
  {
    "text": "and uh we will have that uh the victim will be loading",
    "start": "1285360",
    "end": "1290799"
  },
  {
    "text": "this this dll so all the victims can load the same dll and actually the victim will spawn the",
    "start": "1290799",
    "end": "1298159"
  },
  {
    "text": "execution of the payload that we want there will be no remote thread no remote apc we will just have that in the",
    "start": "1298159",
    "end": "1305280"
  },
  {
    "text": "implementation we use the an initial sequence that creates a thread so a",
    "start": "1305280",
    "end": "1310320"
  },
  {
    "text": "normal internal thread and we'll return to the drop chain immediately and",
    "start": "1310320",
    "end": "1315360"
  },
  {
    "text": "with empty continue the execution we resume with that said this is just an",
    "start": "1315360",
    "end": "1320559"
  },
  {
    "text": "implementation shortcut you take any other injection primitive",
    "start": "1320559",
    "end": "1325600"
  },
  {
    "text": "drop should work fine with this we just gained a lot of time in the in the",
    "start": "1325600",
    "end": "1330840"
  },
  {
    "text": "implementation um and we complied with the we met the first few challenges now",
    "start": "1330840",
    "end": "1336960"
  },
  {
    "text": "we also have to comply with drop mitigations because wdag is offering also mitigations for rope you have stuck",
    "start": "1336960",
    "end": "1344480"
  },
  {
    "text": "pivot which checks the the range of the stack pointer when you",
    "start": "1344480",
    "end": "1349919"
  },
  {
    "text": "invoke a sensitive api so what we do is we make api calls from the native stock with which stacks",
    "start": "1349919",
    "end": "1356559"
  },
  {
    "text": "and then there's color check and cmx which validate the call site and the return site of",
    "start": "1356559",
    "end": "1362640"
  },
  {
    "text": "apis here we didn't really invent anything new there are gadgets that break those analysis there's right of",
    "start": "1362640",
    "end": "1369200"
  },
  {
    "text": "passage or in case you use a shell code for the bootstrap component you can issue calls from there and this will be",
    "start": "1369200",
    "end": "1375919"
  },
  {
    "text": "fine for for those mitigations uh we observe that the flow in the w",
    "start": "1375919",
    "end": "1381760"
  },
  {
    "text": "group mitigations is that while they they they shepherd antigrade section or",
    "start": "1381760",
    "end": "1387679"
  },
  {
    "text": "create file mapping those api state they just ignore and team up field section so",
    "start": "1387679",
    "end": "1394159"
  },
  {
    "text": "the in our injection hour bypass for acg and cig will be and will go unnoticed",
    "start": "1394159",
    "end": "1400159"
  },
  {
    "text": "also by drop mitigations of windows fourth challenge we have to deal with",
    "start": "1400159",
    "end": "1406320"
  },
  {
    "text": "drop encoding so we have a malware and we really don't want to write",
    "start": "1406320",
    "end": "1412080"
  },
  {
    "text": "drop code for this malware because it won't scale i mean writing rope code can be fun",
    "start": "1412080",
    "end": "1417440"
  },
  {
    "text": "but if you it's it's demanding and existing tools",
    "start": "1417440",
    "end": "1422640"
  },
  {
    "text": "they're meant for exploitation mostly um they don't bring a",
    "start": "1422640",
    "end": "1428140"
  },
  {
    "text": "[Music] full expressivity for writing programs um we wanted some automation so",
    "start": "1428140",
    "end": "1435600"
  },
  {
    "text": "we obtained some in the end we borrowed some ideas from prior research such as drop injector which was",
    "start": "1435600",
    "end": "1442400"
  },
  {
    "text": "presented at plaquet a few years ago and we used uh the standard visual",
    "start": "1442400",
    "end": "1448080"
  },
  {
    "text": "studio compiler with specific compilation settings to simplify the structure of the code then what we did",
    "start": "1448080",
    "end": "1454880"
  },
  {
    "text": "is since we don't want to to mess with the stock because we have the chain on there",
    "start": "1454880",
    "end": "1460400"
  },
  {
    "text": "we are removing all stack variables and we are promoting them to global variables",
    "start": "1460400",
    "end": "1466480"
  },
  {
    "text": "actually all the global variables will be part of a single big data structure they will be just",
    "start": "1466480",
    "end": "1473039"
  },
  {
    "text": "fields and this works fine as long as you don't have recursion this works fine",
    "start": "1473039",
    "end": "1478320"
  },
  {
    "text": "the reason is that then when we need to to look up this information in memory or in the",
    "start": "1478320",
    "end": "1484880"
  },
  {
    "text": "file we can just do relative displacement we just need to to take the address of this data structure and",
    "start": "1484880",
    "end": "1492400"
  },
  {
    "text": "compute displacements for our access so that's handy we obtain an output that is like a shell",
    "start": "1492400",
    "end": "1498720"
  },
  {
    "text": "code simple shellcode and we we look up basic blocks in there each basic",
    "start": "1498720",
    "end": "1505520"
  },
  {
    "text": "block will become a chunk and we will look up gadgets that are suitable for destruction in every basic block we will",
    "start": "1505520",
    "end": "1512159"
  },
  {
    "text": "build some sorts of chain skeleton that is almost complete and we will complete it by hand",
    "start": "1512159",
    "end": "1519600"
  },
  {
    "text": "for future work we are thinking of using the raindrop obfuscator that recently",
    "start": "1519600",
    "end": "1525279"
  },
  {
    "text": "became available which supports fully automated drop binary of writing so",
    "start": "1525279",
    "end": "1531360"
  },
  {
    "text": "there are some extensions to do like to to comply with the rock mitigations of windows or even to",
    "start": "1531360",
    "end": "1537360"
  },
  {
    "text": "support windows binaries because it's for linux but it's very promising and we will like to to do that for the future",
    "start": "1537360",
    "end": "1545760"
  },
  {
    "text": "and finally one more challenge to to deal with is the lookup of apis",
    "start": "1545760",
    "end": "1552480"
  },
  {
    "text": "in victim processes that are hardened against those lookups and so here it comes our new bypass",
    "start": "1552480",
    "end": "1560159"
  },
  {
    "text": "but looking at ppis is needed both in the bootstrap component",
    "start": "1560159",
    "end": "1565279"
  },
  {
    "text": "and of course in the chunks so the malware my also decide to",
    "start": "1565279",
    "end": "1570799"
  },
  {
    "text": "to use uh yeah all sorts of apis and you need",
    "start": "1570799",
    "end": "1576000"
  },
  {
    "text": "flexibility in this sense if you use get procedure address then you're alerting an av or adr so it's not",
    "start": "1576000",
    "end": "1583279"
  },
  {
    "text": "an option you can say okay i will be importing or",
    "start": "1583279",
    "end": "1588320"
  },
  {
    "text": "solving all the apis from the loader component but this will be suspicious",
    "start": "1588320",
    "end": "1593360"
  },
  {
    "text": "and you will give away lots of information and normally what you do is you know you",
    "start": "1593360",
    "end": "1599760"
  },
  {
    "text": "you deploy you deploy your own get pro coders sequence but there are double deck defense of start prep that break",
    "start": "1599760",
    "end": "1606880"
  },
  {
    "text": "those codes and there's export address filtering and import address filtering",
    "start": "1606880",
    "end": "1613360"
  },
  {
    "text": "those mitigations they they work in very similar manner they monitor accesses",
    "start": "1613360",
    "end": "1619120"
  },
  {
    "text": "that you make to the expert or import address table of rpe module that is loaded in memory they do that by using a",
    "start": "1619120",
    "end": "1626240"
  },
  {
    "text": "guard page so at the moment that an instruction access uh this region you you will you will",
    "start": "1626240",
    "end": "1633039"
  },
  {
    "text": "have an exception the handler will kick in and we will allow the access if this",
    "start": "1633039",
    "end": "1638320"
  },
  {
    "text": "instructions is coming from a legit module legit module",
    "start": "1638320",
    "end": "1644399"
  },
  {
    "text": "well this wouldn't be a black cat talk without a meme so legit module",
    "start": "1644399",
    "end": "1649919"
  },
  {
    "text": "this is where the shoe pinches because what you can do is you can take any legit windows dll which is already",
    "start": "1649919",
    "end": "1657679"
  },
  {
    "text": "in memory and you find a gadget in there that can make an arbitrary read",
    "start": "1657679",
    "end": "1663760"
  },
  {
    "text": "so you need a gadget that just can read from an arbitrary address and what you",
    "start": "1663760",
    "end": "1668799"
  },
  {
    "text": "do every time you have to access a guarded region so for instance the export address table you you use the",
    "start": "1668799",
    "end": "1675600"
  },
  {
    "text": "gadget for the referencing that memory because the moment you do for the guard page handler",
    "start": "1675600",
    "end": "1681600"
  },
  {
    "text": "it will see oh it's from camera 32 so that's fine and so you have your bypass",
    "start": "1681600",
    "end": "1688080"
  },
  {
    "text": "you might also use job for that we did that jump rinded programming we also used that for",
    "start": "1688080",
    "end": "1694559"
  },
  {
    "text": "another proof of concept for import address stable hijacking uh very",
    "start": "1694559",
    "end": "1699679"
  },
  {
    "text": "quickly so if you have your code that for instance is looking up to the list of names what you can do is you can drop",
    "start": "1699679",
    "end": "1706720"
  },
  {
    "text": "the access to the sensitive part here in this c code by by using this",
    "start": "1706720",
    "end": "1713200"
  },
  {
    "text": "this procedure which is really simple you you prepare the address for where you want to read you call the gadget and",
    "start": "1713200",
    "end": "1719200"
  },
  {
    "text": "you read the result it's simple as that so now we have ticked all the boxes for",
    "start": "1719200",
    "end": "1725279"
  },
  {
    "text": "the challenges let's evaluate a rope on state-of-the-art solutions to see if it",
    "start": "1725279",
    "end": "1731039"
  },
  {
    "text": "works and we consider 10 products six antiviruses and four ddrs",
    "start": "1731039",
    "end": "1737200"
  },
  {
    "text": "we consider all the available mitigations that are obtained on wdag plus the system defaults",
    "start": "1737200",
    "end": "1744480"
  },
  {
    "text": "we target victim applications running with medium integrity level and we inject them with payloads that",
    "start": "1744480",
    "end": "1751679"
  },
  {
    "text": "would alert an ev or edr if you run them standalone but in rob",
    "start": "1751679",
    "end": "1757679"
  },
  {
    "text": "they should be protected and we will see if it's the case and we also make a comparison with the time which is the",
    "start": "1757679",
    "end": "1764799"
  },
  {
    "text": "state of the art in uh distributed malware based on injection techniques",
    "start": "1764799",
    "end": "1770559"
  },
  {
    "text": "in more details uh wwe mitigations they have um yeah there are some",
    "start": "1770559",
    "end": "1776880"
  },
  {
    "text": "implementation flaws or incompatibilities we run them in audit mode and we consider different",
    "start": "1776880",
    "end": "1783279"
  },
  {
    "text": "combinations for when a mitigation cannot be used with another but in general our concept is sorry our rope",
    "start": "1783279",
    "end": "1790720"
  },
  {
    "text": "concept is meant to deceive the high level idea so we wanted to see even a perfect",
    "start": "1790720",
    "end": "1796799"
  },
  {
    "text": "implementation of this counter measure and uh we want to do that using uh the smallest",
    "start": "1796799",
    "end": "1804880"
  },
  {
    "text": "number of victims as possible to really stress the approach so with with two victims we are really pushing the",
    "start": "1804880",
    "end": "1812159"
  },
  {
    "text": "boundaries of distributed uh instead of taking many processes for diluting this payload and in particular",
    "start": "1812159",
    "end": "1819919"
  },
  {
    "text": "with us two payloads one for the continuous execution mode and in this",
    "start": "1819919",
    "end": "1825440"
  },
  {
    "text": "case we are either modifying the windows registry to achieve persistence or we",
    "start": "1825440",
    "end": "1830480"
  },
  {
    "text": "play with the boot sequence of windows and in the other case we do the stage mode where we have a download and",
    "start": "1830480",
    "end": "1836399"
  },
  {
    "text": "execute sequence so one victim like browser we download the powershell script and another victim will execute",
    "start": "1836399",
    "end": "1843360"
  },
  {
    "text": "the script and what are we going to get surprise surprise well we received",
    "start": "1843360",
    "end": "1850720"
  },
  {
    "text": "the products 8 out of 10 without triggering any mitigations of wdag",
    "start": "1850720",
    "end": "1857120"
  },
  {
    "text": "for the two products that are no were not completely deceived we",
    "start": "1857120",
    "end": "1862240"
  },
  {
    "text": "noticed that um they blocked our attempt to do open",
    "start": "1862240",
    "end": "1867440"
  },
  {
    "text": "process even though the our process was entitled had the right rights and we also noticed that the",
    "start": "1867440",
    "end": "1875279"
  },
  {
    "text": "these anti-viruses were giving fake outputs to duplicate handles so this is",
    "start": "1875279",
    "end": "1881519"
  },
  {
    "text": "this is not nothing new really for people that do av reverse engineering so",
    "start": "1881519",
    "end": "1887360"
  },
  {
    "text": "and it's you can work around these problems with other off-the-shelf techniques but the",
    "start": "1887360",
    "end": "1893600"
  },
  {
    "text": "important messages here is also that state-of-the-art approaches like the time they are detected by in this case",
    "start": "1893600",
    "end": "1900880"
  },
  {
    "text": "by seven products what we learned uh from our experiments is uh",
    "start": "1900880",
    "end": "1907120"
  },
  {
    "text": "while uh that evading user mode api hooks is not really necessary was necessary only for one product was",
    "start": "1907120",
    "end": "1914399"
  },
  {
    "text": "blocking the injection stage but uh we were able to deceive using the",
    "start": "1914399",
    "end": "1921279"
  },
  {
    "text": "the windows and windows 64 apis we didn't even try the direct system calls",
    "start": "1921279",
    "end": "1926320"
  },
  {
    "text": "for the record and uh only the injection stage is fragile because it's not distributed for",
    "start": "1926320",
    "end": "1932960"
  },
  {
    "text": "the distributed payload we didn't evade the api hooks we also learned that",
    "start": "1932960",
    "end": "1940158"
  },
  {
    "text": "these mitigations like export address filtering or import address filtering they're promising they can break many",
    "start": "1940640",
    "end": "1947200"
  },
  {
    "text": "many injection patterns when they start to the payloads look up uh apis but they",
    "start": "1947200",
    "end": "1952799"
  },
  {
    "text": "can be deceived so we believe there is more work needed there and more importantly we think that rob it's",
    "start": "1952799",
    "end": "1960159"
  },
  {
    "text": "apparently delivered the blind side hit to these products and if you want to",
    "start": "1960159",
    "end": "1965679"
  },
  {
    "text": "mitigate rope by uh fixing individual aspects like i will block rope or i will",
    "start": "1965679",
    "end": "1972159"
  },
  {
    "text": "block transacted files or i will disallow the trade creation you",
    "start": "1972159",
    "end": "1978880"
  },
  {
    "text": "can try other means so other code reuse flavors other covered mediums or instead",
    "start": "1978880",
    "end": "1984399"
  },
  {
    "text": "of creating an internal trade you can schedule an apc there are more opportunities this can be",
    "start": "1984399",
    "end": "1990159"
  },
  {
    "text": "interesting also for fireless research so uh we believe that",
    "start": "1990159",
    "end": "1996080"
  },
  {
    "text": "it's it's necessary for distributed malware to have defenses that see the",
    "start": "1996080",
    "end": "2001600"
  },
  {
    "text": "threat as a whole and not just try to mitigate the individual symptoms",
    "start": "2001600",
    "end": "2007200"
  },
  {
    "text": "to this end we believe that behavioral analysis should strive to correlate",
    "start": "2007200",
    "end": "2012720"
  },
  {
    "text": "execution units this is easier easier say than none because in the end if you try to analyze",
    "start": "2012720",
    "end": "2020480"
  },
  {
    "text": "many processes as a whole well you face scalability issues you might",
    "start": "2020480",
    "end": "2025919"
  },
  {
    "text": "you might face a lot of information that you have to process and to correlate and also to do",
    "start": "2025919",
    "end": "2033039"
  },
  {
    "text": "to understand when processes are related to each other you should keep track of all the injection techniques that keep",
    "start": "2033039",
    "end": "2039519"
  },
  {
    "text": "appearing so what we can what we suggest instead you say is that you can follow",
    "start": "2039519",
    "end": "2044880"
  },
  {
    "text": "the duplication of objects handles and the sharing of object it seems promising",
    "start": "2044880",
    "end": "2050398"
  },
  {
    "text": "because in the m to support a distributed execution you will need to use standard operating system means for",
    "start": "2050399",
    "end": "2058000"
  },
  {
    "text": "handles and objects further duplication so this can be promising also we believe",
    "start": "2058000",
    "end": "2063599"
  },
  {
    "text": "that code reuse aware analysis will be interesting uh an interesting addition for in-memory",
    "start": "2063599",
    "end": "2070398"
  },
  {
    "text": "scanning in memory analysis of anti-viruses there are some works in the academic literature that are promising",
    "start": "2070399",
    "end": "2077919"
  },
  {
    "text": "and we also think that it's important to invest on technologies that allow to robustly",
    "start": "2077919",
    "end": "2086079"
  },
  {
    "text": "intercept and evict or robustly intercept the invocation of sensitive apis that you cannot just bypass the",
    "start": "2086079",
    "end": "2093040"
  },
  {
    "text": "hooks so there are opportunities like event tracing or windows or",
    "start": "2093040",
    "end": "2099599"
  },
  {
    "text": "breakpoints that are implemented using extended page tables there are many opportunities",
    "start": "2099599",
    "end": "2105760"
  },
  {
    "text": "uh i hope you enjoyed our research and enjoyed this talk uh there is also a paper that is",
    "start": "2105760",
    "end": "2112640"
  },
  {
    "text": "detailing our concept if you're interested you you can look at it and",
    "start": "2112640",
    "end": "2117920"
  },
  {
    "text": "most importantly i'm very i would be very happy to take your",
    "start": "2117920",
    "end": "2122960"
  },
  {
    "text": "questions and answer them now thank you for your attention",
    "start": "2122960",
    "end": "2128680"
  }
]