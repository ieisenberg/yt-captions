[
  {
    "text": "all right well it's a pleasure to introduce you to Martin and Ben guys take it away thank",
    "start": "160",
    "end": "7600"
  },
  {
    "text": "you okay thank you so I'm Martin Johns this is Ben stock um this is Joint work",
    "start": "11240",
    "end": "17039"
  },
  {
    "text": "with our colleague uh zebastian liis he's not here so he got the biggest picture on the slide um we work at sa uh",
    "start": "17039",
    "end": "25359"
  },
  {
    "text": "currently Ben Microsoft Sebastian is currently at Google but what we will present today is something that we did",
    "start": "25359",
    "end": "31519"
  },
  {
    "text": "together uh a while ago at sap and uh we also have a join block called kp.org and",
    "start": "31519",
    "end": "40000"
  },
  {
    "text": "uh so if you're interested in the final slides of this talk or any more information on what we doing feel free",
    "start": "40000",
    "end": "45120"
  },
  {
    "text": "to visit us there so what will we be presenting in this hour um we did this",
    "start": "45120",
    "end": "51160"
  },
  {
    "text": "is uh This research is embedded in a a bigger project in which we investigate",
    "start": "51160",
    "end": "57640"
  },
  {
    "text": "or continue investigate this in the current state of crossed scripting and uh we did a large scale on dbas crossed",
    "start": "57640",
    "end": "64320"
  },
  {
    "text": "scripting study there and Ben will tell you about this a little bit and part of",
    "start": "64320",
    "end": "69520"
  },
  {
    "text": "the study was then for us to check what are the current counter measures against crossed scripting and uh one of the",
    "start": "69520",
    "end": "75799"
  },
  {
    "text": "things that we investigated our clients side cross scripting filters and uh",
    "start": "75799",
    "end": "80960"
  },
  {
    "text": "after we saw how they worked and we are security researchers next thing that we were investigating is okay how can we",
    "start": "80960",
    "end": "86759"
  },
  {
    "text": "bypass them and so uh the second half of the talk will be mainly our Insight in how to bypass current state of client",
    "start": "86759",
    "end": "94200"
  },
  {
    "text": "side cross scripting filtering but before we can talk about bypassing crossed scripting filters we have to uh",
    "start": "94200",
    "end": "100320"
  },
  {
    "text": "talk about two technical things for one we have to talk about cross scripting um",
    "start": "100320",
    "end": "105560"
  },
  {
    "text": "giving the nature of this conference and also that you choose to come to this talk I kind of assume that you know pretty much everything about crusted",
    "start": "105560",
    "end": "111360"
  },
  {
    "text": "scripting already so we'll go to through this very very quickly uh but then also we have to talk about a little bit how",
    "start": "111360",
    "end": "116520"
  },
  {
    "text": "does cross scripting filtering on the client side work and so this will also take a little bit of our attention",
    "start": "116520",
    "end": "122039"
  },
  {
    "text": "but first talk about Crosset scripting so when you talk about client side web security there's mainly one question",
    "start": "122039",
    "end": "128720"
  },
  {
    "text": "that you uh want to answer or that is in your mind and this is U when I'm uh",
    "start": "128720",
    "end": "133800"
  },
  {
    "text": "accessing an untrusted website maybe tea.org uh how can it be that aa.org is",
    "start": "133800",
    "end": "139160"
  },
  {
    "text": "not able to access any of the sensible resources on unrelated website for example gmail.com and the answer to this",
    "start": "139160",
    "end": "146440"
  },
  {
    "text": "question is the same aent policy the same aent policy restricts all active content JavaScript or other things that",
    "start": "146440",
    "end": "152360"
  },
  {
    "text": "run on the website two resources that are uh part of the same Orin part of the",
    "start": "152360",
    "end": "157760"
  },
  {
    "text": "same domain and hence uh.org is not able to read your Gmail how do we get around",
    "start": "157760",
    "end": "164120"
  },
  {
    "text": "the same aent policy the main way getting getting around this is called crossed scripting uh in the context of",
    "start": "164120",
    "end": "169720"
  },
  {
    "text": "this talk you only have to remember that crossed scripting is a code injection vulnerability that allows the attacker",
    "start": "169720",
    "end": "175519"
  },
  {
    "text": "to run JavaScript code under the origin of the attacked uh web page or on the",
    "start": "175519",
    "end": "180760"
  },
  {
    "text": "vulnerable web page hence if in this case Gmail would have a crossrip in vulnerability which more or less is a",
    "start": "180760",
    "end": "187519"
  },
  {
    "text": "way of the attacker to inject HTML JavaScript into the Gmail application he",
    "start": "187519",
    "end": "192680"
  },
  {
    "text": "is able to execute JavaScript under the origin of Gmail and the attacker is allowed to read your Gils so what can we",
    "start": "192680",
    "end": "199640"
  },
  {
    "text": "do with cross at scripting if we are an attacker so the main thing that we will see today is you can open an alert box",
    "start": "199640",
    "end": "207599"
  },
  {
    "text": "so this this is a good approve of concept but it's not very convincing in respect to security",
    "start": "207599",
    "end": "214480"
  },
  {
    "text": "but what you actually can do with crossed scripting is quite a bit you can do session hijacking as you're pretty",
    "start": "214480",
    "end": "219799"
  },
  {
    "text": "much aware of already you can alter arbitrary content in the application that is displayed on the client's",
    "start": "219799",
    "end": "226400"
  },
  {
    "text": "browser you can steal passwords from uh the password manager of the browser and",
    "start": "226400",
    "end": "231439"
  },
  {
    "text": "what it boils down to and a successful cross scripting aeka can do pretty much everything with the web application that",
    "start": "231439",
    "end": "238760"
  },
  {
    "text": "you can do yourself but he's able to do it under your identity and your account so uh in",
    "start": "238760",
    "end": "244959"
  },
  {
    "text": "respect to your account a successful cross- scripting exploit is more or less",
    "start": "244959",
    "end": "250239"
  },
  {
    "text": "a full compromise um if you look into the literature or into related research",
    "start": "250239",
    "end": "256040"
  },
  {
    "text": "there are there's a classification of Crosset scripting and the classification usually talks about two big classes it",
    "start": "256040",
    "end": "261680"
  },
  {
    "text": "talks about reflected Crosset scripting which is very very common and sted crossed scripting which exists but is",
    "start": "261680",
    "end": "268919"
  },
  {
    "text": "much harder to find mind uh cross- scripting filtering is only concerned",
    "start": "268919",
    "end": "274919"
  },
  {
    "text": "with reflected crossed scripting so we won't talk about St cross scripting at all because it's out of scope for the",
    "start": "274919",
    "end": "281120"
  },
  {
    "text": "client side filters and therefore there's nothing to bypass for us anyway therefore let's have a quick look how",
    "start": "281120",
    "end": "287240"
  },
  {
    "text": "reflected cross scripting what reflected cross scripting is reflected cross scripting is a vulnerability in which",
    "start": "287240",
    "end": "294400"
  },
  {
    "text": "the web application blindly accepts um a tech payload from the uh malicious",
    "start": "294400",
    "end": "302199"
  },
  {
    "text": "person and incorporates it in the corresponding HDML HTTP response on the",
    "start": "302199",
    "end": "307520"
  },
  {
    "text": "corresponding HTML so you have for example URL containing uh crossed",
    "start": "307520",
    "end": "312600"
  },
  {
    "text": "scripting um ex cross scripting attch U this URL is then server side or client",
    "start": "312600",
    "end": "318960"
  },
  {
    "text": "side processed and uh the payload that you can see in red here is then part of",
    "start": "318960",
    "end": "325240"
  },
  {
    "text": "the hdp response and interpreted by the web browser in a context uh which then",
    "start": "325240",
    "end": "332120"
  },
  {
    "text": "leads to JavaScript uh execution we will come back to the slide later on when we",
    "start": "332120",
    "end": "337720"
  },
  {
    "text": "talk about how to stop this um but now for now only what you should take away",
    "start": "337720",
    "end": "344039"
  },
  {
    "text": "here is uh what can we do again cross scripting so uh if you're this the owner",
    "start": "344039",
    "end": "349880"
  },
  {
    "text": "of the application if you the operator if you're the programmer you have various things that you could do to",
    "start": "349880",
    "end": "356400"
  },
  {
    "text": "combat Crosset scripting you could actually program secur you could try to escape all the attacker provided data",
    "start": "356400",
    "end": "363199"
  },
  {
    "text": "you can try to uh be careful and not allow code injection buties you can also try to use secure Frameworks some of",
    "start": "363199",
    "end": "370520"
  },
  {
    "text": "them work good some of them work not so good so your mileage may vary and you can leverage modern browser features",
    "start": "370520",
    "end": "376440"
  },
  {
    "text": "something like the content security policy or sandboxed iframes to make your application much more secure to use if",
    "start": "376440",
    "end": "384680"
  },
  {
    "text": "you're the user of the web application there's not so much that you can do so you have kind of rely on the",
    "start": "384680",
    "end": "391120"
  },
  {
    "text": "ability of The Operators of the application that they are able to combat crossed scripting and uh as we will see",
    "start": "391120",
    "end": "397800"
  },
  {
    "text": "in a second they are not that good in that you could turn off JavaScript but I",
    "start": "397800",
    "end": "403400"
  },
  {
    "text": "think 95% of all modern web pages simply stop working or you could hope that uh",
    "start": "403400",
    "end": "409319"
  },
  {
    "text": "the current client side cross scripting filters that are deployed with Internet Explorer or Chrome or that are provided",
    "start": "409319",
    "end": "415199"
  },
  {
    "text": "by the no script plug-in help you and this will be again the second half of talk so now hand over to",
    "start": "415199",
    "end": "423199"
  },
  {
    "text": "Ben okay so before we actually go into talking about uh how uh AC cross",
    "start": "423199",
    "end": "428680"
  },
  {
    "text": "scripting Filter Works um I want to tell you a little bit about work we did last year for um CCS um in kind of basically",
    "start": "428680",
    "end": "436879"
  },
  {
    "text": "finding a lot of different uh real world vulnerabilities um that are in the wild and specifically dox has vulnerabilities",
    "start": "436879",
    "end": "444440"
  },
  {
    "text": "so in order to find those um and we wanted to kind of find those at at scale and in a fully automa way so obviously",
    "start": "444440",
    "end": "450759"
  },
  {
    "text": "you can see a certain piece of code and then try to look at what it might be doing and how it might process your input and try to figure out if there's a",
    "start": "450759",
    "end": "457680"
  },
  {
    "text": "way that you can inject your own code um but we were more of the yeah Dynamic analysis guys here so what we did is um",
    "start": "457680",
    "end": "464479"
  },
  {
    "text": "we basically patched Google Chrome chromium which is the open source version to employ Tain tracking meaning",
    "start": "464479",
    "end": "470120"
  },
  {
    "text": "that for each character in a string that is inside the JavaScript engine or the web kit rendering engine it's blink",
    "start": "470120",
    "end": "476199"
  },
  {
    "text": "actually um we attach a tained bite basically soain bit bite sorry yeah so",
    "start": "476199",
    "end": "482319"
  },
  {
    "text": "for each character we can specifically say this is coming from the URL this might be coming from the referral or",
    "start": "482319",
    "end": "487960"
  },
  {
    "text": "this might be benign code stuff that was hardcoded into the website um we paired",
    "start": "487960",
    "end": "493240"
  },
  {
    "text": "this with a with a Chrome extension that allowed us to kind of automatically crawl a large number of websites um and",
    "start": "493240",
    "end": "499720"
  },
  {
    "text": "also kind of is a user interface which I will be showing you in a second um and in doing so we kind of generated these",
    "start": "499720",
    "end": "505960"
  },
  {
    "text": "large uh numbers of of flows so we see for example there's call to document right and we see exactly as I will show",
    "start": "505960",
    "end": "511960"
  },
  {
    "text": "you in a second um which parts are Bine which parts are techer controlled um and using this information we actually built",
    "start": "511960",
    "end": "518760"
  },
  {
    "text": "an a fully automated exploit generator taking this information and then trying to generate a a valid exploit and which",
    "start": "518760",
    "end": "525519"
  },
  {
    "text": "was then afterwards also validated um by our extension again so before I kind of",
    "start": "525519",
    "end": "531519"
  },
  {
    "text": "yeah talk you talk more to you about this this dry part I'm just going to show you a small",
    "start": "531519",
    "end": "537320"
  },
  {
    "text": "demo um so this is um just this so this is um is just an advertisement and",
    "start": "537320",
    "end": "544640"
  },
  {
    "text": "advertisement also one of those things that are often vulnerable to to dbased cross scripting and if I reload this",
    "start": "544640",
    "end": "549959"
  },
  {
    "text": "page right here um this is basically so this is our Tain Tain Chrome um I see this flow down here it's a tainted flow",
    "start": "549959",
    "end": "556560"
  },
  {
    "text": "to document right and in this case to kind of uh have a nice presentation I put everything that is uh user",
    "start": "556560",
    "end": "562720"
  },
  {
    "text": "controlled in black and if you look at the UL I think it's very small up here but basically this is blackhead 2014 is",
    "start": "562720",
    "end": "569519"
  },
  {
    "text": "coming from the URL um and it ends up down there in in this partner um value of of the of the iframe source okay so",
    "start": "569519",
    "end": "577440"
  },
  {
    "text": "in order to kind of from this point um try to see if we can exploit it and this is obviously only doing it manually the",
    "start": "577440",
    "end": "583839"
  },
  {
    "text": "first thing I want to do to now execute a a cross scripting attack is to go ahead and try to break out of that",
    "start": "583839",
    "end": "590440"
  },
  {
    "text": "existing if frame and kind of write a script tag that will at some point uh trigger the vulnerability so let's first",
    "start": "590440",
    "end": "596680"
  },
  {
    "text": "do this here so I kind of only added the um the quote and the the closing brackets and you can see down here the",
    "start": "596680",
    "end": "602760"
  },
  {
    "text": "fact that kind of actually this is now the the end of the I frame um and there's some stuff in the middle um if",
    "start": "602760",
    "end": "610200"
  },
  {
    "text": "you're aware of of HTML passing rules you know that everything that is between an opening iframe tag and en closing",
    "start": "610200",
    "end": "615880"
  },
  {
    "text": "iframe tag is only displayed when the browser does not support framing um in this case obviously yeah Chrome supports",
    "start": "615880",
    "end": "622560"
  },
  {
    "text": "framing so let's do the following so you can actually see that there's something happening here so let's close that I frame as well and now you see down here",
    "start": "622560",
    "end": "630120"
  },
  {
    "text": "this is basically this part was what was originally uh embedded by the website",
    "start": "630120",
    "end": "635880"
  },
  {
    "text": "and we kind of with our Payla that I I um showed you up here in the URL I kind of went ahead and closed the if frame so",
    "start": "635880",
    "end": "642480"
  },
  {
    "text": "at this point I could go ahead and just say okay and I want to script alert",
    "start": "642480",
    "end": "648800"
  },
  {
    "text": "one now actually let's not use alert one alert one is boring so this is a very cat related talk so let's call cat see",
    "start": "648800",
    "end": "656920"
  },
  {
    "text": "what happens oh nothing happen so this is where the the actual the xss",
    "start": "656920",
    "end": "662480"
  },
  {
    "text": "auditor comes into play um this is a very straightforward attack where the whole script is kind of up there in the",
    "start": "662480",
    "end": "668600"
  },
  {
    "text": "UL so it's it's easy for for filter to detect nevertheless this still constitutes a vulnerability because we",
    "start": "668600",
    "end": "675079"
  },
  {
    "text": "got to that point where the JavaScript engine would have been invoked with this call to to cat so in order to show you",
    "start": "675079",
    "end": "680760"
  },
  {
    "text": "that I'm not lying about this actually being vulnerability um I have the second window here of chrome which I started",
    "start": "680760",
    "end": "686399"
  },
  {
    "text": "with the um xss auditor off which is a basically a command line flag and let's see what happens so we have a successful",
    "start": "686399",
    "end": "692839"
  },
  {
    "text": "cat attack uh and now have a different cat that is being shown and obviously as Martin said it before um basically",
    "start": "692839",
    "end": "699680"
  },
  {
    "text": "having Al an alert Box open or in this case showing a cat picture is just arbitrary JavaScript code that we are",
    "start": "699680",
    "end": "704720"
  },
  {
    "text": "able to execute all right okay so now we know",
    "start": "704720",
    "end": "709920"
  },
  {
    "text": "using this information and using these precise um kind of precise Tain Tain bites plus the knowledge of JavaScript",
    "start": "709920",
    "end": "717839"
  },
  {
    "text": "syntax as well as HTML syntax STS we were able to kind of automatically generate um a large number of exploits",
    "start": "717839",
    "end": "723440"
  },
  {
    "text": "and exploit uh one or two sites um actually wasn't just one or two sides so",
    "start": "723440",
    "end": "729000"
  },
  {
    "text": "we run that on the Alexa uh top 5,000 um we did find many many cats I'm sorry xss",
    "start": "729000",
    "end": "735079"
  },
  {
    "text": "um actually on 480 out of s domains which kind of boils down to being roughly 10% which was a huge surprise to",
    "start": "735079",
    "end": "743040"
  },
  {
    "text": "us I have to I have to admit we didn't think that it was that bad um and for recent work and also this is what we are",
    "start": "743040",
    "end": "748680"
  },
  {
    "text": "going to talk about in the rest of this presentation um we then later did it as a little bit larger scale kind of",
    "start": "748680",
    "end": "754160"
  },
  {
    "text": "looking at Alexa top 10,000 but the numbers pretty much align so it's 99.6%",
    "start": "754160",
    "end": "759399"
  },
  {
    "text": "up there and it's 99.58% um for the second set of um of things recalled um and in these cases um",
    "start": "759399",
    "end": "767519"
  },
  {
    "text": "all over those domains you can see that we found uh roughly 1,600 unique vulnerabilities um don't I could spend",
    "start": "767519",
    "end": "774880"
  },
  {
    "text": "like 15 minutes just talking about how we determine uniqueness so I'm going to skip that part right now um if you want",
    "start": "774880",
    "end": "780079"
  },
  {
    "text": "to know more about it find me later um and in order to validate that this is actually vulnerability we said okay",
    "start": "780079",
    "end": "785839"
  },
  {
    "text": "regardless of the fact that the auditor might actually block such an exploit it's still it's still a vulnerability on",
    "start": "785839",
    "end": "791720"
  },
  {
    "text": "the server side or the client side Cote sorry um just the fact that the auditor blocks is it doesn't mean that it's it's",
    "start": "791720",
    "end": "797639"
  },
  {
    "text": "not not a vulnerability so these these numbers are actually coming from the auditor being turned",
    "start": "797639",
    "end": "803519"
  },
  {
    "text": "off so at this point um this was basically kind of the beginning of this",
    "start": "803519",
    "end": "808880"
  },
  {
    "text": "year we had this this large set of of real world EXs vulnerabilities um and",
    "start": "808880",
    "end": "814519"
  },
  {
    "text": "our testing platform was built into chromium and as you saw um the xss auditor is also part of of chromium um",
    "start": "814519",
    "end": "821279"
  },
  {
    "text": "and then we figured okay why not try to find out how well the the Chrome xss a actually protects us from these kinds of",
    "start": "821279",
    "end": "827120"
  },
  {
    "text": "viabilities so what we did is basically took all of the exploits we had validated beforehand and then reran them",
    "start": "827120",
    "end": "833399"
  },
  {
    "text": "with with the auditor um enabled um and big surprise the auditor didn't catch",
    "start": "833399",
    "end": "839440"
  },
  {
    "text": "all of the vulnerabilities um and that's actually motivated the the work we representing right here so we said okay",
    "start": "839440",
    "end": "846519"
  },
  {
    "text": "so why were some of the exploits going through and others weren't going through so let's have a look at the the source code actually um and can we in this kind",
    "start": "846519",
    "end": "853600"
  },
  {
    "text": "of uh try to determine whether um we can actually increase the number of of bypasses of the auditor okay",
    "start": "853600",
    "end": "862519"
  },
  {
    "text": "Martin yeah good so we're sitting on this big pile of real world Crosset",
    "start": "862519",
    "end": "868480"
  },
  {
    "text": "scripting of which some were caught by the auditor and some weren't caught and",
    "start": "868480",
    "end": "874800"
  },
  {
    "text": "as Ben already said so we got a little bit itchy in that okay we can do better than this so let's let's let's go to the",
    "start": "874800",
    "end": "880399"
  },
  {
    "text": "bottom of this how much of this exploit can be modified by modifying the payload",
    "start": "880399",
    "end": "885600"
  },
  {
    "text": "by modifying the injection Vector that we use so that the auditor won't catch it and so so the nice thing about the",
    "start": "885600",
    "end": "892600"
  },
  {
    "text": "auditor is there's a rather good paper written by Adam Bart and other people that give details on how the auditor",
    "start": "892600",
    "end": "898440"
  },
  {
    "text": "works so the design philosophy and it's open source so we sat down and read the code and the auditor itself is not that",
    "start": "898440",
    "end": "905040"
  },
  {
    "text": "much code but every single line of the auditor code is very significant in",
    "start": "905040",
    "end": "910160"
  },
  {
    "text": "respect to its functionality and so while it wasn't very complex it took quite some time to to go through this",
    "start": "910160",
    "end": "916360"
  },
  {
    "text": "but then um so but you need to understand this very very well uh so to",
    "start": "916360",
    "end": "921959"
  },
  {
    "text": "build your bypass we needed to this but let's first uh St take a step back and",
    "start": "921959",
    "end": "927240"
  },
  {
    "text": "uh look how clients at cross scripting filtering Works uh in general because",
    "start": "927240",
    "end": "933720"
  },
  {
    "text": "all three client at Cross scripting filters that currently exist more or less share the same functionality they",
    "start": "933720",
    "end": "940000"
  },
  {
    "text": "all uh combat reflected Crosset scripting therefore I come back to the slide that you already seen where we",
    "start": "940000",
    "end": "945240"
  },
  {
    "text": "showed what cross reflected cross scripting is and um if you look closely",
    "start": "945240",
    "end": "950680"
  },
  {
    "text": "I think you can already see this um the attack vector and the executed code that",
    "start": "950680",
    "end": "957680"
  },
  {
    "text": "is the scripting vulnerability are both present both in the response and the",
    "start": "957680",
    "end": "964360"
  },
  {
    "text": "request so you can in this case in the URL you can see the in the URL the script alert one and in the same script",
    "start": "964360",
    "end": "970519"
  },
  {
    "text": "alert one appears in the corresponding HTML of the corresponding HTM HTTP",
    "start": "970519",
    "end": "976480"
  },
  {
    "text": "response and this is uh that is allows for a very simple matching algorithm in",
    "start": "976480",
    "end": "983360"
  },
  {
    "text": "theory in theory it's very very simple finding reflective cross scripting look at the URL look at your HTML if you have",
    "start": "983360",
    "end": "991279"
  },
  {
    "text": "the same thing in the URL and in the HTML TDA cross scripting shouldn't be so",
    "start": "991279",
    "end": "996680"
  },
  {
    "text": "hard um so uh the the xss auditor which we at least or which is widely",
    "start": "996680",
    "end": "1003680"
  },
  {
    "text": "considered to be the the the most advanced and state-of-the-art in respect to client side cross scripting filtering",
    "start": "1003680",
    "end": "1009240"
  },
  {
    "text": "wasn't the first the first client side crossed scripting mitigation was provided by the no script plugin um",
    "start": "1009240",
    "end": "1017519"
  },
  {
    "text": "which is some reason on some matters a little bit simpler than the other ones because it only looks at the requests so",
    "start": "1017519",
    "end": "1024720"
  },
  {
    "text": "the no script is a very security Centric uh plug-in it's you can also say it's",
    "start": "1024720",
    "end": "1030480"
  },
  {
    "text": "very paranoid therefore everything that it looks a little bit like JavaScript in",
    "start": "1030480",
    "end": "1035520"
  },
  {
    "text": "the request is considered to be an attack and therefore it stops everything that might be insecure which is good for",
    "start": "1035520",
    "end": "1042678"
  },
  {
    "text": "us security people because we all also very paranoid so I think all of you probably is are running no script but",
    "start": "1042679",
    "end": "1048679"
  },
  {
    "text": "it's nothing that my mother could use because and then there would be be this so for every false positive she would be",
    "start": "1048679",
    "end": "1055080"
  },
  {
    "text": "completely lost um Internet Explorer was the first mainstream browser to adopt cross scripting filtering and uh they",
    "start": "1055080",
    "end": "1062120"
  },
  {
    "text": "they apply the methodology that that I have here so they they they look at the outgoing request they build they do some",
    "start": "1062120",
    "end": "1068440"
  },
  {
    "text": "magic they're building some regular Expressions that then are applied to the incoming uh HD response um before uh the",
    "start": "1068440",
    "end": "1077280"
  },
  {
    "text": "response is passed and and uh trying to figure out if there are matches between the URL in this case and and the H",
    "start": "1077280",
    "end": "1084360"
  },
  {
    "text": "response and then this might be a cross scripting problem um it's a it's a very capable thing it uh it's completely lost",
    "start": "1084360",
    "end": "1092280"
  },
  {
    "text": "or mostly lost when it comes to dbas Crosset scripting so this is a weakness of the Internet Explorer and also um",
    "start": "1092280",
    "end": "1098720"
  },
  {
    "text": "this is done before the HTML is passed therefore it might miss some occasions",
    "start": "1098720",
    "end": "1104760"
  },
  {
    "text": "where JavaScript is executed because um they don't replicate the whole HTML passing in the fil that they just",
    "start": "1104760",
    "end": "1110679"
  },
  {
    "text": "approximated and also they might be susceptible to uh uh to officiation",
    "start": "1110679",
    "end": "1117200"
  },
  {
    "text": "attacks for example like this the cross scripting auditor said okay look look so the people that built the cross",
    "start": "1117200",
    "end": "1122960"
  },
  {
    "text": "scripting auditor looked how IE is doing this and said okay we we can do this better right and so they don't look uh",
    "start": "1122960",
    "end": "1130440"
  },
  {
    "text": "they they don't look at the request at all at the beginning and they also don't really look at the responses um the xss",
    "start": "1130440",
    "end": "1136720"
  },
  {
    "text": "audit as part of the HTML paa and uh what the HTML P does is every time it",
    "start": "1136720",
    "end": "1142320"
  },
  {
    "text": "encounters a JavaScript or something that might lead to JavaScript execution only then uh it looks into the the",
    "start": "1142320",
    "end": "1150280"
  },
  {
    "text": "outgoing the cending request so we go now into this uh a little bit deeper and",
    "start": "1150280",
    "end": "1156200"
  },
  {
    "text": "do a step by step uh overview how the xss auditor works so as I told you the",
    "start": "1156200",
    "end": "1162440"
  },
  {
    "text": "xss auditor is part of the passing process so the incoming hdp response is passed by the htpa and every time the HT",
    "start": "1162440",
    "end": "1170440"
  },
  {
    "text": "HTML passer is encountering a construct so this might be either an HTML tag or",
    "start": "1170440",
    "end": "1178280"
  },
  {
    "text": "certain htl HTML attributes that could potentially lead to JavaScript execution",
    "start": "1178280",
    "end": "1184960"
  },
  {
    "text": "um the auditor invoked and then uh if certain uh conditions are true the",
    "start": "1184960",
    "end": "1190960"
  },
  {
    "text": "auditor tries to find uh the the the try to trying to find the JavaScript that",
    "start": "1190960",
    "end": "1196039"
  },
  {
    "text": "you just saw in the request so this conditions are important you have to remember them because they are one of",
    "start": "1196039",
    "end": "1201480"
  },
  {
    "text": "the keys to building the bypasses so the first uh condition is um the auditor",
    "start": "1201480",
    "end": "1207240"
  },
  {
    "text": "only does the the the matching uh process so the looking for the JavaScript in the request if uh the HTML",
    "start": "1207240",
    "end": "1215919"
  },
  {
    "text": "construct that executes JavaScript is encountered in the first main the initial passing process so um you get",
    "start": "1215919",
    "end": "1224240"
  },
  {
    "text": "the HTTP response and then you pass everything that's in the HTM response all the HTML uh there might be more HTML coming into",
    "start": "1224240",
    "end": "1231400"
  },
  {
    "text": "the page using something like inner HTML outer HTML things like that that also",
    "start": "1231400",
    "end": "1236520"
  },
  {
    "text": "invoke the HTML paa these so-called uh document fragments don't invoke the",
    "start": "1236520",
    "end": "1243919"
  },
  {
    "text": "crossed scripting filter the reason for this is uh performance because for for certain applications something like",
    "start": "1243919",
    "end": "1249919"
  },
  {
    "text": "Gmail you have many many many many many assignments to in HTML and there because",
    "start": "1249919",
    "end": "1255400"
  },
  {
    "text": "all the browser currently are in this performance War every single bit of performance is important and there we",
    "start": "1255400",
    "end": "1261559"
  },
  {
    "text": "therefore for in HTML the for example the uh xss auditor is not invoked the",
    "start": "1261559",
    "end": "1267000"
  },
  {
    "text": "other important fact that you have to remember is um the matching process so the looking into the URL if there there",
    "start": "1267000",
    "end": "1273880"
  },
  {
    "text": "there might be the attack payload and that is currently executed only happens if in the URL or in the post body um for",
    "start": "1273880",
    "end": "1282360"
  },
  {
    "text": "H post request um if in the URL in this case are certain dangerous character",
    "start": "1282360",
    "end": "1289440"
  },
  {
    "text": "are included so the philosophy behind this is you for the vast majority of all",
    "start": "1289440",
    "end": "1295240"
  },
  {
    "text": "Crosset scripting attacks you need at least one of the following characters uh",
    "start": "1295240",
    "end": "1300279"
  },
  {
    "text": "to be able to uh to do your injection because you always have to break out a",
    "start": "1300279",
    "end": "1305559"
  },
  {
    "text": "certain syntactic context uh to create your JavaScript context that is executed",
    "start": "1305559",
    "end": "1310640"
  },
  {
    "text": "and uh more prec specifically these four dangerous characters are the the the",
    "start": "1310640",
    "end": "1316240"
  },
  {
    "text": "opening and closing uh what are they called in English you know the the greater sign and lesser sign and the",
    "start": "1316240",
    "end": "1323440"
  },
  {
    "text": "double quotes and single quotes and if if you don't have greater greater lesser signs double quotes or single quotes in",
    "start": "1323440",
    "end": "1328679"
  },
  {
    "text": "url uh The Next Step this step is not invoked if these two the if these two",
    "start": "1328679",
    "end": "1335400"
  },
  {
    "text": "conditions are met so if the auditor uh says both okay here's a",
    "start": "1335400",
    "end": "1341200"
  },
  {
    "text": "JavaScript carrying construct and uh I the preconditions for a potential injection are present then the auditor",
    "start": "1341200",
    "end": "1349320"
  },
  {
    "text": "does the matching process so it takes the JavaScript that that you just found during the the passing process and",
    "start": "1349320",
    "end": "1356799"
  },
  {
    "text": "checks for this JavaScript in the URL and for post requests in the post body",
    "start": "1356799",
    "end": "1362400"
  },
  {
    "text": "and there's the third important fact that you have to remember and I will go into this deeper because again this is some of the uh functionality that allows",
    "start": "1362400",
    "end": "1369360"
  },
  {
    "text": "us to build the bypasses um depending on uh which of the nature of the type of this HTML",
    "start": "1369360",
    "end": "1376799"
  },
  {
    "text": "construct so if it's if it's a if it's attribute or something else the specific matching rules are different and we will",
    "start": "1376799",
    "end": "1385120"
  },
  {
    "text": "need this so and then uh in if we have the situation that we found a JavaScript",
    "start": "1385120",
    "end": "1391960"
  },
  {
    "text": "the the the invocation criterias are have been met and we found a matching uh",
    "start": "1391960",
    "end": "1398200"
  },
  {
    "text": "part of the URL for example that contains this JavaScript the auditor concludes okay this is an active",
    "start": "1398200",
    "end": "1404880"
  },
  {
    "text": "successful Crosset scripting exploit and therefore the JavaScript is uh removed during the passing so the",
    "start": "1404880",
    "end": "1412919"
  },
  {
    "text": "the JavaScript PA itself never sees the the injector JavaScript which worked",
    "start": "1412919",
    "end": "1418400"
  },
  {
    "text": "because as you saw Ben's initial exploit didn't go through so it's it's it's capable to so let's quickly go three",
    "start": "1418400",
    "end": "1426320"
  },
  {
    "text": "slides over the uh matching rules because as I told you they they they differ for the various JavaScript",
    "start": "1426320",
    "end": "1433039"
  },
  {
    "text": "context and they also bases for some of the uh bypasses so the most basic",
    "start": "1433039",
    "end": "1438679"
  },
  {
    "text": "injection is injection of complete script Tex so you you inject script Tex",
    "start": "1438679",
    "end": "1444320"
  },
  {
    "text": "you you inject your JavaScript payload and sometimes you even close the script Tech or actually you most cases you have",
    "start": "1444320",
    "end": "1450440"
  },
  {
    "text": "to close this um if such a script Tech if if any script Tech is found uh during",
    "start": "1450440",
    "end": "1457600"
  },
  {
    "text": "the passing process the corresponding marching rule is that the auditor checks",
    "start": "1457600",
    "end": "1462760"
  },
  {
    "text": "if the content of the script is contained in the request so the script text themselves are not the auditor",
    "start": "1462760",
    "end": "1469640"
  },
  {
    "text": "doesn't look for script text in the U in the request because they they're mandatory for injection anyway it only",
    "start": "1469640",
    "end": "1475919"
  },
  {
    "text": "looks for the JavaScript code itself it skips initial comments in wies spaces",
    "start": "1475919",
    "end": "1481559"
  },
  {
    "text": "this is normalization Step which makes sense and it only checks up the first 100 characters because they are",
    "start": "1481559",
    "end": "1488000"
  },
  {
    "text": "significant enough for identifying if there's a match or if they not a match and um it it checks up up to 100",
    "start": "1488000",
    "end": "1495200"
  },
  {
    "text": "characters but it might terminate earlier uh so the matching process terminates if uh certain terminating",
    "start": "1495200",
    "end": "1503080"
  },
  {
    "text": "characters are met and the most important terminating character in this context are the D is double slashes for",
    "start": "1503080",
    "end": "1509399"
  },
  {
    "text": "the comments because this is usual technique that you use for certain injections uh where you end up and your",
    "start": "1509399",
    "end": "1515240"
  },
  {
    "text": "injection Vector with JavaScript commments the second uh matching rule is",
    "start": "1515240",
    "end": "1520720"
  },
  {
    "text": "for HTML attributes so you you might have there are two classes of HTML attributes that can carry JavaScript for",
    "start": "1520720",
    "end": "1527480"
  },
  {
    "text": "one you have the event handlers something like on error on load uh on something and uh you have attributes",
    "start": "1527480",
    "end": "1534279"
  },
  {
    "text": "that carry URLs because there's the JavaScript uh column uh pseudo URL",
    "start": "1534279",
    "end": "1542600"
  },
  {
    "text": "scheme which causes uh the the browser to execute JavaScript directly so all",
    "start": "1542600",
    "end": "1548760"
  },
  {
    "text": "source and HH refs attributes and all on eror and other event handler attributes",
    "start": "1548760",
    "end": "1554279"
  },
  {
    "text": "invoke the auditor and for all these attributes the auditor checks and this is here's the difference um if uh if the",
    "start": "1554279",
    "end": "1562240"
  },
  {
    "text": "attribute either contains a JavaScript URL um so in this case at the JavaScript Ur surface looked or checked in the",
    "start": "1562240",
    "end": "1570360"
  },
  {
    "text": "request uh or the antenna and so and and the matching rle the is that the",
    "start": "1570360",
    "end": "1575840"
  },
  {
    "text": "complete attribute has to be contained in the request so with with with text we",
    "start": "1575840",
    "end": "1581159"
  },
  {
    "text": "had that only the JavaScript code has to be contained in the request for attributes it is that also the attribute",
    "start": "1581159",
    "end": "1587919"
  },
  {
    "text": "name and in this case the equal sign and the quotes and stuff like that has to be contained in the request so it looks if",
    "start": "1587919",
    "end": "1594760"
  },
  {
    "text": "you have an onload alert one uh the auditor will match uh against Ur in this",
    "start": "1594760",
    "end": "1599840"
  },
  {
    "text": "case also the string on unload alert one the third uh matching rule is for uh",
    "start": "1599840",
    "end": "1608080"
  },
  {
    "text": "HTML elements that can load active content over the network something like scripts script text with a a source",
    "start": "1608080",
    "end": "1617240"
  },
  {
    "text": "attribute which then creates an HTTP request that gets the JavaScript from a",
    "start": "1617240",
    "end": "1622440"
  },
  {
    "text": "remote server or the same is for embed and object and ENT all the text that that uh then then load uh plug-in data",
    "start": "1622440",
    "end": "1630279"
  },
  {
    "text": "from other servers in this case the matching rule is that both the tech name",
    "start": "1630279",
    "end": "1635760"
  },
  {
    "text": "in this case script or object has to be in the URL and also the full complete",
    "start": "1635760",
    "end": "1641880"
  },
  {
    "text": "attribute with attribute name and attribute value has to be so this is the hardest the most strict matching rule um",
    "start": "1641880",
    "end": "1648679"
  },
  {
    "text": "because of I think as false positives so uh to sum up um if you look",
    "start": "1648679",
    "end": "1656039"
  },
  {
    "text": "now in the bird eyes view the auditor Works in three steps there's the invocation phase in which the auditor is",
    "start": "1656039",
    "end": "1663200"
  },
  {
    "text": "invoked and if the three conditions that we talked about are met then there's a",
    "start": "1663200",
    "end": "1668760"
  },
  {
    "text": "matching phase depending on which the HTML construct is that we looking for and then if we have a match there's the",
    "start": "1668760",
    "end": "1675080"
  },
  {
    "text": "blocking phase coming from here it's rather obvious how to build your bypasses because there in this",
    "start": "1675080",
    "end": "1680200"
  },
  {
    "text": "three-step process there are two steps they're interesting so you can either try to build a bypass that avoids the",
    "start": "1680200",
    "end": "1688360"
  },
  {
    "text": "invocation steps so you you build a payload that somehow uh executes JavaScript without meeting uh one of the",
    "start": "1688360",
    "end": "1696480"
  },
  {
    "text": "uh conditions that are need to be present that the xss order to gets",
    "start": "1696480",
    "end": "1703000"
  },
  {
    "text": "reactive or otherwise you try to fool the string matching because this is what it boils down to so so for then this is",
    "start": "1703000",
    "end": "1710200"
  },
  {
    "text": "the reason why I showed you the string and the matching rules and so specifically um there at one point the",
    "start": "1710200",
    "end": "1716080"
  },
  {
    "text": "auditor has to find an equal string both in the HTML and then the request and if",
    "start": "1716080",
    "end": "1722279"
  },
  {
    "text": "we are able to create an injection payload that somehow fools this matching",
    "start": "1722279",
    "end": "1730120"
  },
  {
    "text": "process we again win if we would be the attackers okay and so now Ben will take",
    "start": "1730120",
    "end": "1736080"
  },
  {
    "text": "you through I think four deos if if if I counted correctly where we exemplify a",
    "start": "1736080",
    "end": "1741799"
  },
  {
    "text": "couple of those bypasses that we found um we we found more but at one point demo demo demo gets a little bit tedious",
    "start": "1741799",
    "end": "1748399"
  },
  {
    "text": "and uh so uh if you're more interested we documented all the bypass classes in the white paper that should be available",
    "start": "1748399",
    "end": "1754720"
  },
  {
    "text": "I think over the website so but no H's been all right um so as Martin just said",
    "start": "1754720",
    "end": "1761919"
  },
  {
    "text": "um there are kind of two different ways to um get by the auditor so you can either try to avoid the invocation or",
    "start": "1761919",
    "end": "1767600"
  },
  {
    "text": "you can try to for the string matching um so now I'm going to talk first about how to kind of uh make the",
    "start": "1767600",
    "end": "1774559"
  },
  {
    "text": "auditor not even actually do anything because um you kind of don't match the uh meet the criteria that it means um so",
    "start": "1774559",
    "end": "1782640"
  },
  {
    "text": "the the first and foremost and also quite an obious one um is actually using eval so in our work we found that quite",
    "start": "1782640",
    "end": "1790080"
  },
  {
    "text": "some vulnerabilities um are actually triggered by uh kind of user data that is then used in an eval which is",
    "start": "1790080",
    "end": "1796960"
  },
  {
    "text": "obviously not a good thing but I mean it was was good for us because we found a lot of vulnerabilities um and the",
    "start": "1796960",
    "end": "1802039"
  },
  {
    "text": "problem here is um obviously in in this case um as you can see on the on the right right hand side um this is",
    "start": "1802039",
    "end": "1808799"
  },
  {
    "text": "something that only happens in the JavaScript space so it never actually goes to the HTML poer and thus since the",
    "start": "1808799",
    "end": "1814960"
  },
  {
    "text": "auditor is part of the HTML parer it can never actually see this this payload um so that's why it only works for injected",
    "start": "1814960",
    "end": "1821399"
  },
  {
    "text": "HTML and not for injected JavaScript so to kind of uh show off our prototype once again um I have this",
    "start": "1821399",
    "end": "1828960"
  },
  {
    "text": "other thing here um so this is basically just a demo um so these vulnerabilities",
    "start": "1828960",
    "end": "1834399"
  },
  {
    "text": "or these things that we we're showing to you here are actually not something that we uh kind of came up with but this is",
    "start": "1834399",
    "end": "1840399"
  },
  {
    "text": "kind of stuff that we saw out there in the wild um which is kind of uh yeah um",
    "start": "1840399",
    "end": "1846640"
  },
  {
    "text": "it makes you think about um what what things are wrong with the web um and please excuse these these underscores",
    "start": "1846640",
    "end": "1853159"
  },
  {
    "text": "just to highlight the fact that um this is actually injected um there is",
    "start": "1853159",
    "end": "1858519"
  },
  {
    "text": "formatting aror there so actually the whole URL is actually injected so it's not just the HTTP sorry for that uh",
    "start": "1858519",
    "end": "1864840"
  },
  {
    "text": "nevertheless so there's um something that we saw in the wild where there was a function that was basically called",
    "start": "1864840",
    "end": "1870679"
  },
  {
    "text": "after u in this was with set timeout basically a function that traced whether the user was still there or not um and",
    "start": "1870679",
    "end": "1876880"
  },
  {
    "text": "it was passed the uh the URL of the currently loaded page um as the first",
    "start": "1876880",
    "end": "1882000"
  },
  {
    "text": "parameter and as we can see here in this example um we see that so we have this visited 1 second uh and then the",
    "start": "1882000",
    "end": "1888399"
  },
  {
    "text": "argument is actually completely tainted which is basically the URL that you see up there so again we can now just try",
    "start": "1888399",
    "end": "1895880"
  },
  {
    "text": "and have a look if we can break this or not oh sorry like this um so what we see right",
    "start": "1895880",
    "end": "1902399"
  },
  {
    "text": "now is the fact that um the flow has changed slightly yeah you can see that they we still calling visited 1 second",
    "start": "1902399",
    "end": "1909240"
  },
  {
    "text": "um but this time there is so this is again our injected uh part that I just changed inl obviously this leads to a a",
    "start": "1909240",
    "end": "1916039"
  },
  {
    "text": "parsing error um because so like these these characters over here that that are trailing in this case so to kind of see",
    "start": "1916039",
    "end": "1923720"
  },
  {
    "text": "um that this actually does work we can do like do this but at this point we haven't changed anything right so we're",
    "start": "1923720",
    "end": "1930000"
  },
  {
    "text": "still calling the function that um we initially were calling so let's try again and uh call the function",
    "start": "1930000",
    "end": "1937360"
  },
  {
    "text": "cat which should hopefully work all right so again um we were again able to",
    "start": "1937360",
    "end": "1943559"
  },
  {
    "text": "kind of uh do our arbitrary payload um put it in here and the auditor is not aware of that obviously as it's it's not",
    "start": "1943559",
    "end": "1949279"
  },
  {
    "text": "part of um the JavaScript engine but rather the HTML power then Martin already said it um",
    "start": "1949279",
    "end": "1957120"
  },
  {
    "text": "there are also kind of ways of getting around the uh invocation inside the HTML P itself um and first and foremost as",
    "start": "1957120",
    "end": "1964039"
  },
  {
    "text": "you already said um Google opted to disable the auditor for for these document fragments um which is obviously",
    "start": "1964039",
    "end": "1971880"
  },
  {
    "text": "for performance reasons which makes perfect sense in in my mind um however as we found um there are so many",
    "start": "1971880",
    "end": "1978159"
  },
  {
    "text": "vulnerabilities out there that actually use in that kind of have a flaw when they use inner HTML um which allows an",
    "start": "1978159",
    "end": "1984600"
  },
  {
    "text": "attacker to always bypass these things so that's uh yeah pretty simple so we didn't actually have to generate",
    "start": "1984600",
    "end": "1990760"
  },
  {
    "text": "payloads that were targeting to bypass but rather oh it's an in HTML flow so let's let's exploit that and so it will",
    "start": "1990760",
    "end": "1997200"
  },
  {
    "text": "always pass through through the auditor actually um and the second part is the what Martin just also quickly talked",
    "start": "1997200",
    "end": "2003760"
  },
  {
    "text": "about this So-Cal unquoted attribute injection um so the auditor is disabled",
    "start": "2003760",
    "end": "2008880"
  },
  {
    "text": "if those four characters are not found in the request but depending on the situation you might actually have um and",
    "start": "2008880",
    "end": "2015519"
  },
  {
    "text": "we found a lot of that stuff as well out there um you might have situations where the user input so basically something",
    "start": "2015519",
    "end": "2022000"
  },
  {
    "text": "that's coming from the URL is written it to an attribute without actually using",
    "start": "2022000",
    "end": "2027480"
  },
  {
    "text": "any quotes that means to in order to break out of this attribute I don't need quotes So neither you need the single or",
    "start": "2027480",
    "end": "2033919"
  },
  {
    "text": "the double quote And depending on what kind of attribute it is so it might be a",
    "start": "2033919",
    "end": "2039399"
  },
  {
    "text": "um iframe for example um where I can then um use one of those JavaScript URLs",
    "start": "2039399",
    "end": "2045039"
  },
  {
    "text": "um I don't actually have to break out of that existing tag as well so I don't again I don't need the the Lesser or or",
    "start": "2045039",
    "end": "2050760"
  },
  {
    "text": "greater signs um so there are certain situations um which yeah we can kind of",
    "start": "2050760",
    "end": "2056320"
  },
  {
    "text": "get past the auditor because it's just not involved because of this matching rule um again this is I guess for performance reasons because Google says",
    "start": "2056320",
    "end": "2063280"
  },
  {
    "text": "the likelihood that you will find a vulnerability um that comes out is is",
    "start": "2063280",
    "end": "2068358"
  },
  {
    "text": "able to be executed without um these characters is pretty pretty",
    "start": "2068359",
    "end": "2073560"
  },
  {
    "text": "slim um then are these things that we like to call uh HTML free injections um",
    "start": "2073560",
    "end": "2080320"
  },
  {
    "text": "so again that's something that happens actually in the JavaScript engine uh and the HTML poer again is not involved um",
    "start": "2080320",
    "end": "2087520"
  },
  {
    "text": "first and foremost there are the Dom bindings so you can um access for example an existing script tag from",
    "start": "2087520",
    "end": "2093520"
  },
  {
    "text": "JavaScript you'll get document get element by ID you get that script tag and then say script. source and assign a",
    "start": "2093520",
    "end": "2099599"
  },
  {
    "text": "certain value to it that kind of changes something in the P HTML node so it's",
    "start": "2099599",
    "end": "2105880"
  },
  {
    "text": "kind of in memory this changes the source attribute but it doesn't generate any HTML anymore",
    "start": "2105880",
    "end": "2111760"
  },
  {
    "text": "so it's not parsed and that's why it's actually never going to go through the U through the HTML project um second thing",
    "start": "2111760",
    "end": "2119280"
  },
  {
    "text": "um we didn't actually kind of try to try to find vulnerabilities like that we actually found vulnerability that was",
    "start": "2119280",
    "end": "2125920"
  },
  {
    "text": "that we could exploit because it was a second order Flor um so you have cookies and you have web storage maybe some of",
    "start": "2125920",
    "end": "2131480"
  },
  {
    "text": "you guys know local storage or session storage it's both kind of the two things um and in these cases the actual",
    "start": "2131480",
    "end": "2137720"
  },
  {
    "text": "injection Vector is not found in the request um because the the auditor actually looks as the request body and",
    "start": "2137720",
    "end": "2142880"
  },
  {
    "text": "the URL not the cookies so if the payload is kind of in the cookie already for some reason um then you can kind of",
    "start": "2142880",
    "end": "2149400"
  },
  {
    "text": "uh yeah exploit that and um what we actually found was pretty interesting so we found a flow for which we generated",
    "start": "2149400",
    "end": "2156040"
  },
  {
    "text": "an exploit and when we initially hit that page it didn't work it's like okay well maybe we did something wrong or",
    "start": "2156040",
    "end": "2162079"
  },
  {
    "text": "maybe they use some filtering but then we refreshed the page and all of sudden there was an alert box popping up and we're like okay what what's what's going",
    "start": "2162079",
    "end": "2168240"
  },
  {
    "text": "on now um and what was actually happening is that this site kind of noted the entry URL so the first time",
    "start": "2168240",
    "end": "2174839"
  },
  {
    "text": "you hit that domain it would actually store the URL from which you came which was in The Next Step then used in inside",
    "start": "2174839",
    "end": "2180480"
  },
  {
    "text": "an eval uh in an unsecure way and so kind of the first first you had this flow to the cookie and then once you",
    "start": "2180480",
    "end": "2186800"
  },
  {
    "text": "kind of reloaded that side um it was extracted this value was extracted from the cookie and then all of a sudden we",
    "start": "2186800",
    "end": "2191839"
  },
  {
    "text": "had this alert box um but as I said we didn't kind of Target those but these are definitely vulnerabilities that are",
    "start": "2191839",
    "end": "2197119"
  },
  {
    "text": "also out there um and third there are also alternative data sources so there's with",
    "start": "2197119",
    "end": "2202960"
  },
  {
    "text": "HDM HTML 5 there are these post messages that allow you to kind of um send",
    "start": "2202960",
    "end": "2208440"
  },
  {
    "text": "message send messages across domain boundaries because Martin already said it sem or policy is usually in the way",
    "start": "2208440",
    "end": "2213960"
  },
  {
    "text": "of that um but if you can get a reference to another window you can say window. post message and then you just",
    "start": "2213960",
    "end": "2219119"
  },
  {
    "text": "send those one of those messages again this is not something that is actually an HTP request but it happens completely inside the the browser um so in this",
    "start": "2219119",
    "end": "2227599"
  },
  {
    "text": "case again as the auditor is not looking at this things these things you can't actually find it all right so again to",
    "start": "2227599",
    "end": "2235680"
  },
  {
    "text": "demo this thing would be kind of uh kind of lame um because it's super straightforward um so the second part um",
    "start": "2235680",
    "end": "2242560"
  },
  {
    "text": "the second phase in in which we might be able to kind of fool the auditor is uh is issues related string matching and",
    "start": "2242560",
    "end": "2249720"
  },
  {
    "text": "yeah we kind of want to have a situation where um the xss auditor as we said it once you encounters a for example a a",
    "start": "2249720",
    "end": "2256720"
  },
  {
    "text": "script tag it looks for the whole content in the URL so is are there situations out there where you actually",
    "start": "2256720",
    "end": "2262119"
  },
  {
    "text": "have your malicious payload but it's it's not so the matching um doesn't work",
    "start": "2262119",
    "end": "2267599"
  },
  {
    "text": "and actually lucky us there there is um so you have these things um kind of we",
    "start": "2267599",
    "end": "2272680"
  },
  {
    "text": "like to call partial injections um for example um you can you can hijack an existing tag or an existing attribute um",
    "start": "2272680",
    "end": "2279240"
  },
  {
    "text": "think about a script Source um where the there's an assignment so you have a",
    "start": "2279240",
    "end": "2284400"
  },
  {
    "text": "document right saying script source and then comes the user input um this is a this is the partial injection and as",
    "start": "2284400",
    "end": "2289880"
  },
  {
    "text": "Martin said it already the um for for scripts actually Chrome looks for not",
    "start": "2289880",
    "end": "2295960"
  },
  {
    "text": "only the attributes value but also the name so the name wouldn't be conn't be not would not be contained in the in the",
    "start": "2295960",
    "end": "2302400"
  },
  {
    "text": "request but only the value so this is obviously a bypass um and then there's like a third way of going about it and",
    "start": "2302400",
    "end": "2308680"
  },
  {
    "text": "this is what I going to show you is a small demo um hijack an existing uh script",
    "start": "2308680",
    "end": "2315040"
  },
  {
    "text": "node okay so again let's fire up our Tain browser um we see down here a a",
    "start": "2315040",
    "end": "2321640"
  },
  {
    "text": "flow um again to document right that actually is um kind of an assignment of the variable X in this case it doesn't",
    "start": "2321640",
    "end": "2327920"
  },
  {
    "text": "do anything um but we didn't want to kind of write a lot of code that uh would fill up the the console um so in",
    "start": "2327920",
    "end": "2334680"
  },
  {
    "text": "these cases it's pretty similar to to this eal case that we we saw earlier um again we could be able to do the",
    "start": "2334680",
    "end": "2340920"
  },
  {
    "text": "following so what usually would you would try and do is break out of that existing tag regardless of what kind of",
    "start": "2340920",
    "end": "2347000"
  },
  {
    "text": "tag it is so this gu is a script tag um so let's try that and see what happens so yeah we get an unexpected",
    "start": "2347000",
    "end": "2353640"
  },
  {
    "text": "token that is okay y that is um and now",
    "start": "2353640",
    "end": "2359000"
  },
  {
    "text": "let's try and do this one script alert one I hope it won't work so yeah again",
    "start": "2359000",
    "end": "2367200"
  },
  {
    "text": "the XS auditor refus to execute that script because as you can see up here it's completely contained in the request",
    "start": "2367200",
    "end": "2373119"
  },
  {
    "text": "so but why should we actually go ahead and and try to do it in in such a complicated way if we can just go ahead",
    "start": "2373119",
    "end": "2379319"
  },
  {
    "text": "and finish the assignment here let me just get that down here again so close",
    "start": "2379319",
    "end": "2385040"
  },
  {
    "text": "the um the string with a single quote um to semicolon to yeah kind of end end",
    "start": "2385040",
    "end": "2390680"
  },
  {
    "text": "that statement as as a whole then call again we call Cat we don't call alert one um and then if I do this this would",
    "start": "2390680",
    "end": "2397440"
  },
  {
    "text": "actually fail because you can see it up here um they're actually unexpected",
    "start": "2397440",
    "end": "2402599"
  },
  {
    "text": "tokens so that they're not there and as Martin said it already um we can use SL slash which is basically the JavaScript",
    "start": "2402599",
    "end": "2408800"
  },
  {
    "text": "common and this is what you see a lot of times in in xss payloads and if I hit that again it says again C attack",
    "start": "2408800",
    "end": "2414920"
  },
  {
    "text": "successful and the problem here is um if you kind of if you look at what",
    "start": "2414920",
    "end": "2420040"
  },
  {
    "text": "we just saw in terms of of the flows so we had this this partial uh HTML which is actually called something different",
    "start": "2420040",
    "end": "2426280"
  },
  {
    "text": "but nevertheless so you had the sum value and then you the call to cat and so this is actually so the lower part is",
    "start": "2426280",
    "end": "2432480"
  },
  {
    "text": "actually what's being uh pared by um by the HML poer and Martin said it that the",
    "start": "2432480",
    "end": "2437960"
  },
  {
    "text": "double slashes actually end kind of the matching so the auditor looks for the at",
    "start": "2437960",
    "end": "2443520"
  },
  {
    "text": "least at most sorry 100 characters or if at some point they encounter a double",
    "start": "2443520",
    "end": "2449040"
  },
  {
    "text": "slash that's kind of where they end their their matching um but the problem is in this case that",
    "start": "2449040",
    "end": "2454599"
  },
  {
    "text": "Although our payload up here also ends with um double slashes um we actually",
    "start": "2454599",
    "end": "2460200"
  },
  {
    "text": "don't have this this VAR X um assignment up here so this is why the string matching obviously doesn't work because",
    "start": "2460200",
    "end": "2466319"
  },
  {
    "text": "as it's looking at the whole source of the um of the script it cannot find it in the in the",
    "start": "2466319",
    "end": "2473040"
  },
  {
    "text": "request then something that is uh yeah kind of similar this a class we call trailing",
    "start": "2473040",
    "end": "2480160"
  },
  {
    "text": "content so the idea here is to kind of use existing content that is that is out there in the in that page um to the",
    "start": "2480160",
    "end": "2487520"
  },
  {
    "text": "Auditors so you kind of inject something but there is more stuff behind that um",
    "start": "2487520",
    "end": "2493200"
  },
  {
    "text": "and so the key is you want to be able to kind of have a payload that will be executed so you won't have you don't",
    "start": "2493200",
    "end": "2499680"
  },
  {
    "text": "want to have a passing error but again you don't want to be found as well so let's look at another demo",
    "start": "2499680",
    "end": "2506520"
  },
  {
    "text": "here um so this is um yeah just also something very very small you would again you would think that this is kind",
    "start": "2506520",
    "end": "2512680"
  },
  {
    "text": "of made up but no way actually people that um kind of use this to to to get the size of a of a diff or something um",
    "start": "2512680",
    "end": "2520440"
  },
  {
    "text": "what we can see here um is the fact that U we're inside this this style um and so",
    "start": "2520440",
    "end": "2525680"
  },
  {
    "text": "let's try and break out of that style for now oh sorry oh come on all right so we can",
    "start": "2525680",
    "end": "2533640"
  },
  {
    "text": "actually see um that this this worked out perfectly so what we're going to do now is kind of again as usual we want to",
    "start": "2533640",
    "end": "2540400"
  },
  {
    "text": "call our function cat um and so let's try that image source",
    "start": "2540400",
    "end": "2549119"
  },
  {
    "text": "equals. which should not resolve I hope no let's call r. Fu um all right so",
    "start": "2549119",
    "end": "2556480"
  },
  {
    "text": "let's try the following first again the xss auditor says no way",
    "start": "2556480",
    "end": "2562119"
  },
  {
    "text": "I'm I'm I found a an an error Handler so this this on error I hope you can see it up here it's a pretty let me just get",
    "start": "2562119",
    "end": "2570000"
  },
  {
    "text": "that here all right um so the auditor kind of",
    "start": "2570000",
    "end": "2576119"
  },
  {
    "text": "sees okay there's an on error and it's while it's paring it completely it finds it completely inside the Ur So this is",
    "start": "2576119",
    "end": "2581760"
  },
  {
    "text": "okay no we're not going to we're not going to execute that um but if we look a little closer we can actually see that",
    "start": "2581760",
    "end": "2588400"
  },
  {
    "text": "if you see up here you have this PX and a um and a single code and a closing tag",
    "start": "2588400",
    "end": "2595160"
  },
  {
    "text": "so why should we not just go ahead and kind of make use of that um so what we do is we call Cat and then we just use a",
    "start": "2595160",
    "end": "2604160"
  },
  {
    "text": "semicolon which basically in JavaScript uh yeah takes going separates uh two two",
    "start": "2604160",
    "end": "2610520"
  },
  {
    "text": "um what is it not not attributes what is it so two PES of the execution so",
    "start": "2610520",
    "end": "2616280"
  },
  {
    "text": "basically the next line of code in this case um and so again the the the target for us is to generate a payload that",
    "start": "2616280",
    "end": "2623319"
  },
  {
    "text": "will be executed that is valid JavaScript that will not cause a passing error we don't really care about runtime",
    "start": "2623319",
    "end": "2629040"
  },
  {
    "text": "errors after our payload has been executed so let's go ahead and do that what we can actually see is um again we",
    "start": "2629040",
    "end": "2635240"
  },
  {
    "text": "have the cat so why do we have the cat um we have this on error here and this",
    "start": "2635240",
    "end": "2640680"
  },
  {
    "text": "is so basically the red part is what is also contained in the URL so first we have this call to C and then we have a",
    "start": "2640680",
    "end": "2647359"
  },
  {
    "text": "just a statement that says PX um actually you can see down here there's an uncaught reference error because PX",
    "start": "2647359",
    "end": "2652559"
  },
  {
    "text": "is not defined but we really don't care because our payload has been executed already so this is um this is kind of",
    "start": "2652559",
    "end": "2658319"
  },
  {
    "text": "interesting if you find these situations and there are a lot of those out there so again let's let's briefly recap so",
    "start": "2658319",
    "end": "2664640"
  },
  {
    "text": "this is what's actually happening um we have this image Source down here that um the auditor now finds an onerror Handler",
    "start": "2664640",
    "end": "2671720"
  },
  {
    "text": "it looks for the onerror Handler both the name and the value in the complete Ur in the URL tough luck PX is not",
    "start": "2671720",
    "end": "2679000"
  },
  {
    "text": "contained in the URL so in this case um again we can we can kind of bypass the auditor um similar to that there is um a",
    "start": "2679000",
    "end": "2687000"
  },
  {
    "text": "class we call trailing slash so um if we use if we find a an injection that is",
    "start": "2687000",
    "end": "2693040"
  },
  {
    "text": "followed by a single slash uh in order to kind of generate a payload that is",
    "start": "2693040",
    "end": "2698920"
  },
  {
    "text": "still valid and we want to so so the idea is always to comment out the rest that that is behind your actual payload",
    "start": "2698920",
    "end": "2704000"
  },
  {
    "text": "so what you need to do in these cases is just inject one single slash because the other one is already there and then",
    "start": "2704000",
    "end": "2709160"
  },
  {
    "text": "Chrome will again look at the request find one slash not both and since it goes up until the point where both",
    "start": "2709160",
    "end": "2714720"
  },
  {
    "text": "slashes are um already done that's kind of um where it doesn't work and similar to that there's um trailing SVG um",
    "start": "2714720",
    "end": "2721680"
  },
  {
    "text": "there's actually something in the in the anime tag of SVG way you can kind of you separate um these statements um if you",
    "start": "2721680",
    "end": "2728800"
  },
  {
    "text": "have a semicolon it only executes the first part and then it's um similar to this to this slash but um as Mar already",
    "start": "2728800",
    "end": "2735280"
  },
  {
    "text": "said it um we refer you to the white paper for a more detailed explanation of how that worked okay so uh now for the actually",
    "start": "2735280",
    "end": "2744319"
  },
  {
    "text": "most fun part I think of uh of the injections uh we found in total um what we like to call Double",
    "start": "2744319",
    "end": "2750880"
  },
  {
    "text": "injections so double injections we have three different classes so um let's say",
    "start": "2750880",
    "end": "2755920"
  },
  {
    "text": "we have a single input so maybe the URL but we have multiple injections that means that it's written several times at",
    "start": "2755920",
    "end": "2761599"
  },
  {
    "text": "least twice in this case that's why it's called double injections um and you have the situations where you have a single input say a part of the URL that is",
    "start": "2761599",
    "end": "2769359"
  },
  {
    "text": "written in inside one sync so one document right call just takes part of the UR once and another part of the same",
    "start": "2769359",
    "end": "2775319"
  },
  {
    "text": "part of the UR twice uh for a second time sorry um you might also have multiple inputs with multiple injections",
    "start": "2775319",
    "end": "2781440"
  },
  {
    "text": "so basically taking two different parts of the and putting them in there um and you might actually even have multiple",
    "start": "2781440",
    "end": "2786520"
  },
  {
    "text": "injection points with multiple things but this is this is way too complicated I think um so I'm going of going to try",
    "start": "2786520",
    "end": "2793599"
  },
  {
    "text": "and demo only the the single input uh multi injection okay so let's look what we see",
    "start": "2793599",
    "end": "2801119"
  },
  {
    "text": "here so in the URL we have a parameter called height um and this parameter",
    "start": "2801119",
    "end": "2806160"
  },
  {
    "text": "called height actually ends up in this this is a very constructed case I have to admit um in this assignment to to",
    "start": "2806160",
    "end": "2812960"
  },
  {
    "text": "height of uh of this image so the kind of the the normal blunt way of of going",
    "start": "2812960",
    "end": "2819359"
  },
  {
    "text": "about this would be to try and close the image tag which we don't need to close and then do that which",
    "start": "2819359",
    "end": "2827440"
  },
  {
    "text": "again obviously script alert one is completely contained in the URL so this is not going to execute um so the",
    "start": "2827440",
    "end": "2834200"
  },
  {
    "text": "question is now but as we see we can kind of inject it as such as",
    "start": "2834200",
    "end": "2840240"
  },
  {
    "text": "a as a whole but we know that this the values are actually used at two different points so in the in the string",
    "start": "2840240",
    "end": "2848160"
  },
  {
    "text": "so the idea of of what we're doing here is to kind of put the script the code that we want to be executed in this this",
    "start": "2848160",
    "end": "2855720"
  },
  {
    "text": "part that we control completely but why should we actually not go ahead uh and and try and do that otherwise so let's",
    "start": "2855720",
    "end": "2862200"
  },
  {
    "text": "do the following um what happened if we kind of exchanged this closing script tag with an opening script tag so let's",
    "start": "2862200",
    "end": "2869400"
  },
  {
    "text": "just do that for now and see what",
    "start": "2869400",
    "end": "2874480"
  },
  {
    "text": "happens okay oo unexpected identifier what's up with",
    "start": "2874520",
    "end": "2879880"
  },
  {
    "text": "that um so if we take a closer look you see that this is the image which is closed then we have a closing script tag",
    "start": "2879880",
    "end": "2886440"
  },
  {
    "text": "that has does does nothing basically because we haven't had an open one and then we see an opening script tag but",
    "start": "2886440",
    "end": "2893559"
  },
  {
    "text": "then comes the unexpected identifier namely the single slash uh the single quote I'm sorry so is there a way of",
    "start": "2893559",
    "end": "2899839"
  },
  {
    "text": "kind of going around this and uh you might have guessed so already um there",
    "start": "2899839",
    "end": "2904960"
  },
  {
    "text": "is so what what I want to do here um there is a function in JavaScript called",
    "start": "2904960",
    "end": "2910280"
  },
  {
    "text": "void which takes a parameter and as you might have guessed already does nothing",
    "start": "2910280",
    "end": "2916359"
  },
  {
    "text": "um so let's try and uh start just um just bear with me here just start this",
    "start": "2916359",
    "end": "2922040"
  },
  {
    "text": "call to void and let's see what happens okay so we still get an um unexpected token here but um we can kind",
    "start": "2922040",
    "end": "2930040"
  },
  {
    "text": "of see that so we have an opening opening call to void here then",
    "start": "2930040",
    "end": "2935720"
  },
  {
    "text": "everything that comes until the next closing script tag which is here would be executed as as the JavaScript um but",
    "start": "2935720",
    "end": "2942160"
  },
  {
    "text": "obviously this is not this is not syntactically correct JavaScript so why can't we just see where we are we were",
    "start": "2942160",
    "end": "2949720"
  },
  {
    "text": "actually were at um behind that part so we see again this closing script tag",
    "start": "2949720",
    "end": "2955119"
  },
  {
    "text": "which is if you look at the URL which is up here so why don't we trust just try",
    "start": "2955119",
    "end": "2961280"
  },
  {
    "text": "and do the following let's see if that works okay so now what do we have we",
    "start": "2961280",
    "end": "2967400"
  },
  {
    "text": "have right here in the middle a call with this opening script tag that calls",
    "start": "2967400",
    "end": "2973520"
  },
  {
    "text": "void and then we have a closing script and we lot lot of stuff uh yeah before",
    "start": "2973520",
    "end": "2978640"
  },
  {
    "text": "that and behind that which is kind of causes the the uh the page to look weird is you can see here just this uh this",
    "start": "2978640",
    "end": "2984599"
  },
  {
    "text": "little piece here but what happens if I actually go ahead and instead of just calling void no we don't want to call",
    "start": "2984599",
    "end": "2990400"
  },
  {
    "text": "that let's called cat o cat picture so what we did here is",
    "start": "2990400",
    "end": "2996799"
  },
  {
    "text": "basically um we were not trying to kind of inject our Vector such that it is in",
    "start": "2996799",
    "end": "3002119"
  },
  {
    "text": "the UL at at at uh at a certain point or in in in conse order but rather since we",
    "start": "3002119",
    "end": "3007839"
  },
  {
    "text": "know that it's the value is actually going to be used twice we can just kind of turn the script Tex around and this",
    "start": "3007839",
    "end": "3013400"
  },
  {
    "text": "is um kind of what you see here so this is actually um in red I've kind of marked this the payload we have here um",
    "start": "3013400",
    "end": "3021200"
  },
  {
    "text": "and so this is what it's initially what it initially looks like right you have this image image height and then it's it's kind of broken um but if we go",
    "start": "3021200",
    "end": "3027599"
  },
  {
    "text": "ahead and kind of reformat that to show what is actually being being uh kind of",
    "start": "3027599",
    "end": "3032960"
  },
  {
    "text": "given to the JavaScript engine you actually see the following um this is basic this is exactly the same code I",
    "start": "3032960",
    "end": "3038520"
  },
  {
    "text": "showed you before just uh I changed the the the line breaks uh slightly so again we see we the call to C we have the call",
    "start": "3038520",
    "end": "3045520"
  },
  {
    "text": "to void here which is basically um ended by um the end here so to kind of",
    "start": "3045520",
    "end": "3051920"
  },
  {
    "text": "summarize that um we actually take that part behind there which is um this it's call to cat and the call to void and",
    "start": "3051920",
    "end": "3058680"
  },
  {
    "text": "then since we know that it the the other part is going to be injected in there as well once again we can just take this",
    "start": "3058680",
    "end": "3064119"
  },
  {
    "text": "this from here and as you can probably imagine this would be very hard to find with string magic because what the auditor actually looks for is this and",
    "start": "3064119",
    "end": "3071200"
  },
  {
    "text": "this is not contained in the UL at all so this is there is no way that this could actually ever be caught by the by",
    "start": "3071200",
    "end": "3077040"
  },
  {
    "text": "the auditor okay so now I've talked to you about those bypasses that we found and",
    "start": "3077040",
    "end": "3083400"
  },
  {
    "text": "kind of showed you um how we were able to exploit it um and then we went ahead and kind of having gathered this",
    "start": "3083400",
    "end": "3089319"
  },
  {
    "text": "knowledge um that we uh so on kind of there this set of vulnerabilities and",
    "start": "3089319",
    "end": "3095240"
  },
  {
    "text": "there was this um this knowledge we had about the the auditor's internal uh workings so we kind of went ahead and",
    "start": "3095240",
    "end": "3102720"
  },
  {
    "text": "since we're from Academia we do empirical studies all the time um so we used our existing infrastructure um we",
    "start": "3102720",
    "end": "3109319"
  },
  {
    "text": "had these 1,600 unique vulnerabilities on 598 uh uh 58 sorry 958 so uh domains",
    "start": "3109319",
    "end": "3117760"
  },
  {
    "text": "um and we kind of took our existing expert generator which I didn't show you here because it would be would be way",
    "start": "3117760",
    "end": "3123000"
  },
  {
    "text": "too complex um in this case we kind of took that and added a few if conditionals here and there um to kind",
    "start": "3123000",
    "end": "3129640"
  },
  {
    "text": "of enable us to use these um these vulnerabilities we found and actually we were not targeting the Dom Bindings that",
    "start": "3129640",
    "end": "3135760"
  },
  {
    "text": "I was talking about earlier we not targeting second order flows and we were not targeting these alternative attacks",
    "start": "3135760",
    "end": "3142000"
  },
  {
    "text": "such as post message but still on 776 of of those domains that we had exploits on",
    "start": "3142000",
    "end": "3149400"
  },
  {
    "text": "um um we could sorry out of the 958 domains we had exploits on we could successfully exploit still",
    "start": "3149400",
    "end": "3156920"
  },
  {
    "text": "776 um never mind about the domain count here if you obviously if you build a sum on that it would be way more than a",
    "start": "3156920",
    "end": "3162799"
  },
  {
    "text": "thousand um but that is actually uh because we have um let me say it um so",
    "start": "3162799",
    "end": "3169440"
  },
  {
    "text": "it's it's actually more than the 776 but as I told you before we had multiple vulnerabilities on average side it's",
    "start": "3169440",
    "end": "3175280"
  },
  {
    "text": "like two vulnerabilities per site so we could kind of um exploit domains using in HTML and eval that's why",
    "start": "3175280",
    "end": "3182240"
  },
  {
    "text": "they're up there twice so as you can see here um the was these were the results",
    "start": "3182240",
    "end": "3188119"
  },
  {
    "text": "we found in in the real world top Alexa 10K um which kind of yeah leads me now",
    "start": "3188119",
    "end": "3193960"
  },
  {
    "text": "to our to the conclusion so what should you take away so cross scripting is um",
    "start": "3193960",
    "end": "3200000"
  },
  {
    "text": "still a big problem um with especially with dbased cross scripting with which appears to be not that well understood",
    "start": "3200000",
    "end": "3206280"
  },
  {
    "text": "um compared to like reflected xss so servers reflected xss and we found Dom",
    "start": "3206280",
    "end": "3212200"
  },
  {
    "text": "xss on about 10% of the Alexa top 10K um browsers do deploy counter measures um",
    "start": "3212200",
    "end": "3217799"
  },
  {
    "text": "and chrome argu arguably has the best filter out there and there are several Publications that also kind of make that",
    "start": "3217799",
    "end": "3223200"
  },
  {
    "text": "point but the security analysis of the auditor has shown that there are many by bypasses which kind of are both related",
    "start": "3223200",
    "end": "3229119"
  },
  {
    "text": "to invocation of the auditor and as well as string matching issues that I just discussed with",
    "start": "3229119",
    "end": "3234760"
  },
  {
    "text": "you and what else to take way so we built uh for previous work a fully automated system that allows us to find",
    "start": "3234760",
    "end": "3241480"
  },
  {
    "text": "Dom xss at scale um which is a cool thing uh we then enhanced our uh",
    "start": "3241480",
    "end": "3247680"
  },
  {
    "text": "generator to kind of Target these known issues that we that we found in this work allowing us uh to even exploit more",
    "start": "3247680",
    "end": "3253799"
  },
  {
    "text": "stuff even with the auditor active and we evaluated the the impact of these issues and we found that in total we",
    "start": "3253799",
    "end": "3259040"
  },
  {
    "text": "could bypass 81% the audit on 81% of the domains that had vulnerabilities um in",
    "start": "3259040",
    "end": "3264839"
  },
  {
    "text": "in 73% of all um vulnerabilities in total all right and with that I'd like",
    "start": "3264839",
    "end": "3270119"
  },
  {
    "text": "to thank you very much for your attention and um I'm happy to any questions [Applause]",
    "start": "3270119",
    "end": "3282820"
  }
]