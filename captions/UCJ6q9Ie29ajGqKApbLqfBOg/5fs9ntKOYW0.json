[
  {
    "text": "hello everyone today we will introduce a new code injection attack named B",
    "start": "2639",
    "end": "9480"
  },
  {
    "text": "jju so I'm toi a research scientist with n security Holdings I have rers",
    "start": "9480",
    "end": "16198"
  },
  {
    "text": "engineering CTF and Brazilian Jujitsu as you can see from my outfit and he uto uh",
    "start": "16199",
    "end": "24160"
  },
  {
    "text": "senior researcher and my colleague his research interests include memory",
    "start": "24160",
    "end": "29320"
  },
  {
    "text": "analysis and operating system security okay or you may know Mara",
    "start": "29320",
    "end": "36079"
  },
  {
    "text": "sometimes use code injection it is a technique to inject malicious code into",
    "start": "36079",
    "end": "42000"
  },
  {
    "text": "a big victim process to hide the behavior behind it however it is still",
    "start": "42000",
    "end": "47360"
  },
  {
    "text": "easy to detect because it has to call some suspicious apis such as executable",
    "start": "47360",
    "end": "53280"
  },
  {
    "text": "memory allocation payload writing and execution so what can we do to evade the",
    "start": "53280",
    "end": "59600"
  },
  {
    "text": "detection what if we don't need allocation or",
    "start": "59600",
    "end": "67240"
  },
  {
    "text": "execution actually it's possible if we inject bite",
    "start": "67240",
    "end": "73680"
  },
  {
    "text": "code that is the technique we introduce today a brand new attack",
    "start": "73680",
    "end": "80560"
  },
  {
    "text": "technique its name is bite code Juju bite code juit is a technique for",
    "start": "80560",
    "end": "87280"
  },
  {
    "text": "an injector that chokes and interpret prin to F it execute M bite code like",
    "start": "87280",
    "end": "94079"
  },
  {
    "text": "this picture so this is outline of today's",
    "start": "94079",
    "end": "100280"
  },
  {
    "text": "presentation here UT will talk about the introduction and the overview of",
    "start": "100280",
    "end": "107600"
  },
  {
    "text": "B okay then I'm utki let me start with an introduction of existing Cod",
    "start": "112439",
    "end": "118840"
  },
  {
    "text": "injection techniques Maria usually tries to conceive their",
    "start": "118840",
    "end": "124600"
  },
  {
    "text": "malicious behavior on the target host Cod injection is one of the techniques",
    "start": "124600",
    "end": "130520"
  },
  {
    "text": "to achieve that it brings M Behavior into B one by Hing a process a b process",
    "start": "130520",
    "end": "138040"
  },
  {
    "text": "to execute M code typically Maria opens a b process",
    "start": "138040",
    "end": "143879"
  },
  {
    "text": "allocat a memory write a m code and start start St to execute",
    "start": "143879",
    "end": "152480"
  },
  {
    "text": "that now we are going to look at a few example first of all process",
    "start": "152480",
    "end": "159400"
  },
  {
    "text": "following in this technique Maria firstly creates a suspended process from",
    "start": "159400",
    "end": "165519"
  },
  {
    "text": "A Min executable file before starting its execution Maria",
    "start": "165519",
    "end": "172599"
  },
  {
    "text": "un Maps the executable image from the vitim process at this time the process has no",
    "start": "172599",
    "end": "179239"
  },
  {
    "text": "executable image after that Mar Maria inject the it",
    "start": "179239",
    "end": "186799"
  },
  {
    "text": "mous image as a replacement of the original",
    "start": "186799",
    "end": "192159"
  },
  {
    "text": "image then Maria adjust the instruction point of the process to the entry point",
    "start": "192159",
    "end": "199400"
  },
  {
    "text": "of the mous image finally the process is resumed and",
    "start": "199400",
    "end": "205920"
  },
  {
    "text": "then starts executing the mous image in appearance the process seem to be",
    "start": "205920",
    "end": "213480"
  },
  {
    "text": "executed the B9 file because all information of the process such as",
    "start": "213480",
    "end": "219599"
  },
  {
    "text": "process name or image p f comes from the B9 file however because the content of the",
    "start": "219599",
    "end": "228640"
  },
  {
    "text": "process has been replaced so what is actually executed is the injected",
    "start": "228640",
    "end": "234959"
  },
  {
    "text": "code so that is process following",
    "start": "234959",
    "end": "240159"
  },
  {
    "text": "nowadays process Hing is well known and some variants have",
    "start": "240599",
    "end": "245760"
  },
  {
    "text": "emerged process do ganging and process Haring are example of those the detail",
    "start": "245760",
    "end": "253280"
  },
  {
    "text": "of these techniques are different but both of them can make a",
    "start": "253280",
    "end": "258799"
  },
  {
    "text": "file on the dis remain benign while the in memory image remain modified and and",
    "start": "258799",
    "end": "266240"
  },
  {
    "text": "malicious like a process following process hollowing and its variance a to replace ventive Cod B to",
    "start": "266240",
    "end": "275639"
  },
  {
    "text": "malicias our vit ju is similar to them but each Target is",
    "start": "275639",
    "end": "283639"
  },
  {
    "text": "different now we go we move on to our new techniques B",
    "start": "284000",
    "end": "292440"
  },
  {
    "text": "ju bod jice is Noel technique a code injection attack it injects m b code",
    "start": "292680",
    "end": "299880"
  },
  {
    "text": "into an interpreter process executing A Min script here is a comparison with",
    "start": "299880",
    "end": "307680"
  },
  {
    "text": "existing attack techniques and our B us the injection Target of the existing",
    "start": "307680",
    "end": "314479"
  },
  {
    "text": "techniques is arit process on the other hand B is Target",
    "start": "314479",
    "end": "322080"
  },
  {
    "text": "Target is interpret the existing techniques inject",
    "start": "322080",
    "end": "327319"
  },
  {
    "text": "native code and bra M Behavior into me executable",
    "start": "327319",
    "end": "333360"
  },
  {
    "text": "Behavior B us to inject bod and compromise in be script",
    "start": "333360",
    "end": "340800"
  },
  {
    "text": "Behavior this is the overview of Bal ju there are two phases preparation phase",
    "start": "342120",
    "end": "349319"
  },
  {
    "text": "and attack phase in the preparation phase the left",
    "start": "349319",
    "end": "355680"
  },
  {
    "text": "side in this figure attackers firstly prepare a a m script and a Target script",
    "start": "355680",
    "end": "362560"
  },
  {
    "text": "the M script will be injected into an interpreter process the target script is the benign",
    "start": "362560",
    "end": "369720"
  },
  {
    "text": "script which will be replaced with mous one by injection the attack execute these",
    "start": "369720",
    "end": "377400"
  },
  {
    "text": "scripts once in their own environment and then they extract by code of G",
    "start": "377400",
    "end": "383800"
  },
  {
    "text": "script from The Interpreter processes note that the Target bit code",
    "start": "383800",
    "end": "390919"
  },
  {
    "text": "is used as a signature for memory scan we will explain later about that the in",
    "start": "390919",
    "end": "398560"
  },
  {
    "text": "extracted B is embedded into an",
    "start": "398560",
    "end": "403560"
  },
  {
    "text": "injector in the attack phase the right side in this figure the attacker sends the injector",
    "start": "403880",
    "end": "411560"
  },
  {
    "text": "into a victim environment somehow the injector runs an interpreter",
    "start": "411560",
    "end": "418639"
  },
  {
    "text": "with the target script right after that The Interpreter rolls be B code into its",
    "start": "418639",
    "end": "425560"
  },
  {
    "text": "memory space the injector scans the memory by signature and locates the",
    "start": "425560",
    "end": "431360"
  },
  {
    "text": "target bite code then the injector replace the B",
    "start": "431360",
    "end": "436440"
  },
  {
    "text": "code with m one and finally the in The Interpreter",
    "start": "436440",
    "end": "442840"
  },
  {
    "text": "starts executing M BTO code that is the overview of bode so we",
    "start": "442840",
    "end": "450919"
  },
  {
    "text": "so now you know the concept but you may have a question such attack is truly",
    "start": "450919",
    "end": "457560"
  },
  {
    "text": "realistic or not for realizing that",
    "start": "457560",
    "end": "464039"
  },
  {
    "text": "b the problem is it requires the internal specification of the target",
    "start": "464039",
    "end": "470960"
  },
  {
    "text": "interpreters in order to extract and replace by code we first need to",
    "start": "470960",
    "end": "477360"
  },
  {
    "text": "understand their structures and ation in memory to make things worse some some",
    "start": "477360",
    "end": "485280"
  },
  {
    "text": "interpreters like BB script don't even have their source code publicly",
    "start": "485280",
    "end": "491360"
  },
  {
    "text": "available so does that mean we need to man RSE engineer each and every",
    "start": "491360",
    "end": "497879"
  },
  {
    "text": "interpreter binary so we can can we maybe automate",
    "start": "497879",
    "end": "503759"
  },
  {
    "text": "that process before answering that question",
    "start": "503759",
    "end": "509240"
  },
  {
    "text": "we we are going to dive into the internal of",
    "start": "509240",
    "end": "514800"
  },
  {
    "text": "inter here this is the typical design overview of",
    "start": "516080",
    "end": "521760"
  },
  {
    "text": "interpreters first the input script is converted into B code which will be",
    "start": "521760",
    "end": "527320"
  },
  {
    "text": "stored into B code cache B is B code is just a sequence of",
    "start": "527320",
    "end": "534440"
  },
  {
    "text": "instructions then this this is executed by a virtual machine one by by",
    "start": "534440",
    "end": "540240"
  },
  {
    "text": "one the B machine has a program counter called bpc and also stock and",
    "start": "540240",
    "end": "547079"
  },
  {
    "text": "registers in addition it has something called symbol table which stores",
    "start": "547079",
    "end": "552600"
  },
  {
    "text": "variables in the script and interpreter has the",
    "start": "552600",
    "end": "558440"
  },
  {
    "text": "interpretation function to execute Bal now the execution cycle goes like",
    "start": "558440",
    "end": "565360"
  },
  {
    "text": "this first the feature which is the instruction pointed by the",
    "start": "565360",
    "end": "573320"
  },
  {
    "text": "bpc after decoding and dispatching the instruction handlers",
    "start": "573320",
    "end": "578839"
  },
  {
    "text": "perform the instruction while accessing the stock and registers and simple",
    "start": "578839",
    "end": "585560"
  },
  {
    "text": "tables and then the picture which is the next instruction and so",
    "start": "585560",
    "end": "592760"
  },
  {
    "text": "on Bol cach is usually implemented as an array where each item",
    "start": "593240",
    "end": "600000"
  },
  {
    "text": "is an pair of an OP code and operan for example the this road con",
    "start": "600000",
    "end": "608120"
  },
  {
    "text": "instruction has an operant which is an instruction which is an index for a",
    "start": "608120",
    "end": "615800"
  },
  {
    "text": "symbol table it is not an immediate value as data access instructions also",
    "start": "615800",
    "end": "623720"
  },
  {
    "text": "require one or more indexes for simpol tables in other words B code depends on",
    "start": "623720",
    "end": "631120"
  },
  {
    "text": "symbol tables for data access and our interpreter creates",
    "start": "631120",
    "end": "637680"
  },
  {
    "text": "multiple symbol tables for Global variable and local variable and so",
    "start": "637680",
    "end": "643279"
  },
  {
    "text": "on a symbol table manages values we used in",
    "start": "643279",
    "end": "648560"
  },
  {
    "text": "script typically it compos differences between multiple structures and",
    "start": "648560",
    "end": "654800"
  },
  {
    "text": "arrays let me explain two key data structures around",
    "start": "654800",
    "end": "660440"
  },
  {
    "text": "tables one of them manages references to symbol tables we call it management",
    "start": "660440",
    "end": "669000"
  },
  {
    "text": "structures the other is value object which contains actual data in used in",
    "start": "669000",
    "end": "676040"
  },
  {
    "text": "script execution such as integers strings and so on a symol TBL has differences to",
    "start": "676040",
    "end": "685040"
  },
  {
    "text": "multiple value objects so these data structures",
    "start": "685040",
    "end": "690240"
  },
  {
    "text": "and and the Sim tables are linked by pointer difference",
    "start": "690240",
    "end": "695480"
  },
  {
    "text": "chains in the chains a management structure is the start node and body",
    "start": "695480",
    "end": "701519"
  },
  {
    "text": "objects are the end nodes typically the interpretation",
    "start": "701519",
    "end": "709079"
  },
  {
    "text": "functions arguments include multiple pointers to such management",
    "start": "709079",
    "end": "714480"
  },
  {
    "text": "structures each of management structures has symol tables for each",
    "start": "714480",
    "end": "720440"
  },
  {
    "text": "scope in this example interp is the interpretation",
    "start": "720440",
    "end": "725920"
  },
  {
    "text": "function scrip context info represents the global context and includes the",
    "start": "725920",
    "end": "732399"
  },
  {
    "text": "symbol tables for Global variable F info represents a current",
    "start": "732399",
    "end": "737800"
  },
  {
    "text": "executing function and incude local variable so the execution context of the",
    "start": "737800",
    "end": "745959"
  },
  {
    "text": "interpretation function is a helpful for finding tables and related data",
    "start": "745959",
    "end": "753040"
  },
  {
    "text": "structures that is about the basics of interpret implementation as explained these data",
    "start": "753320",
    "end": "760519"
  },
  {
    "text": "structures are not so simple it is not easy to extract them",
    "start": "760519",
    "end": "767120"
  },
  {
    "text": "because D and symol tables must be kept consistency between",
    "start": "767120",
    "end": "772600"
  },
  {
    "text": "them and interpreters sh this overall design but actually",
    "start": "772600",
    "end": "779519"
  },
  {
    "text": "the concrete implementation details def across",
    "start": "779519",
    "end": "785360"
  },
  {
    "text": "interpreters it is hard to reveal such implementations and data structures by man RSE",
    "start": "785360",
    "end": "791720"
  },
  {
    "text": "engine and for now no existing analysis technique can extract such information",
    "start": "791720",
    "end": "798160"
  },
  {
    "text": "effectively then heavy effort is required from attackers which means by is Not",
    "start": "798160",
    "end": "805880"
  },
  {
    "text": "Practical Maybe actually know we succeed to automate",
    "start": "805880",
    "end": "813839"
  },
  {
    "text": "most of the reverse enging process we will introduce our analysis technique",
    "start": "813839",
    "end": "821079"
  },
  {
    "text": "today here is our actual solution to realy by J our analysis techniques are based on",
    "start": "821480",
    "end": "829800"
  },
  {
    "text": "dynic analysis of interpret binaries we prepare and use testing",
    "start": "829800",
    "end": "835800"
  },
  {
    "text": "script to Ral implementation details especially to reild reference",
    "start": "835800",
    "end": "841320"
  },
  {
    "text": "relationship and data structures our analysis technique track pointer differences and anal memory",
    "start": "841320",
    "end": "850160"
  },
  {
    "text": "accesses okay then warming up is over we will dive into the technical details of",
    "start": "850480",
    "end": "857839"
  },
  {
    "text": "B ju I will pass it over to",
    "start": "857839",
    "end": "862360"
  },
  {
    "text": "toi okay thank you uto so to reveal the structural information of bite code and",
    "start": "864759",
    "end": "871360"
  },
  {
    "text": "symbol TS we first manually write specially crafted scripts called test",
    "start": "871360",
    "end": "877320"
  },
  {
    "text": "script and input them with an interpreter binary to our analysis",
    "start": "877320",
    "end": "882800"
  },
  {
    "text": "technique the technique is based on Dynamic analyses which fast observe the",
    "start": "882800",
    "end": "887880"
  },
  {
    "text": "behavior of The Interpreter binary and generate memory access",
    "start": "887880",
    "end": "893240"
  },
  {
    "text": "LS it then analyzes the logs to extract the",
    "start": "893240",
    "end": "898519"
  },
  {
    "text": "structure information after that we can extract the bite code and symbol tables and",
    "start": "898519",
    "end": "905120"
  },
  {
    "text": "embed them into an injector so we will look into the",
    "start": "905120",
    "end": "910279"
  },
  {
    "text": "overview of our analysis Technique we first find the interpretation function",
    "start": "910279",
    "end": "915839"
  },
  {
    "text": "to determine the starting point of the memory exploration next we find Access Memory",
    "start": "915839",
    "end": "924560"
  },
  {
    "text": "regions because interpreters generally accesses a Lar lar large number of",
    "start": "924560",
    "end": "930600"
  },
  {
    "text": "memory regions analyzing all of them takes much time and we want to decrease",
    "start": "930600",
    "end": "936639"
  },
  {
    "text": "it so this step enables us to narrow down the memory regions to",
    "start": "936639",
    "end": "943480"
  },
  {
    "text": "analyze in the third step we find a value object which is the end point of",
    "start": "943639",
    "end": "950000"
  },
  {
    "text": "the memory exploration now we have interpretation",
    "start": "950000",
    "end": "955240"
  },
  {
    "text": "function and the value objects which are both side of edges we find a difference path between",
    "start": "955240",
    "end": "963360"
  },
  {
    "text": "them in the final step we find the symbol table and identify its data",
    "start": "963880",
    "end": "969519"
  },
  {
    "text": "structure this step eventually enables us to extract shimol",
    "start": "969519",
    "end": "975879"
  },
  {
    "text": "tables so these steps are summarized like this now we will look into each",
    "start": "976759",
    "end": "984040"
  },
  {
    "text": "step in detail first we find the interpretation",
    "start": "984040",
    "end": "992160"
  },
  {
    "text": "function so what do we need to know first to achieve it in our Technique we",
    "start": "992160",
    "end": "999959"
  },
  {
    "text": "detect bpc and bite code cach fast in particular detecting detecting",
    "start": "999959",
    "end": "1007040"
  },
  {
    "text": "the bpc is a key for the detection we make three",
    "start": "1007040",
    "end": "1014160"
  },
  {
    "text": "assumptions first the number of memory leads to the bpc is proportional to the",
    "start": "1014160",
    "end": "1020040"
  },
  {
    "text": "number of statements in the input script second a bite code cache is",
    "start": "1020040",
    "end": "1025959"
  },
  {
    "text": "always pointed by the bpc and at last the interpretation",
    "start": "1025959",
    "end": "1031720"
  },
  {
    "text": "function has repeated memory a memory Le to the",
    "start": "1031720",
    "end": "1037880"
  },
  {
    "text": "bpc so as I said we first detect the bpc",
    "start": "1038160",
    "end": "1043600"
  },
  {
    "text": "by inputting scripts of various lengths and finding a memory region whose number",
    "start": "1043600",
    "end": "1049679"
  },
  {
    "text": "of reads memory leads is proportional to them then we detect bite call cache and",
    "start": "1049679",
    "end": "1055880"
  },
  {
    "text": "interpretation function by using memory access patterns to the",
    "start": "1055880",
    "end": "1061919"
  },
  {
    "text": "bpc next we find the access memory regions now we know the interpretation",
    "start": "1062720",
    "end": "1070480"
  },
  {
    "text": "function and we can we can begin analysis by using the function as a",
    "start": "1070480",
    "end": "1076799"
  },
  {
    "text": "starting point so we first narrow down the memory regions to to be analyzed to those",
    "start": "1076799",
    "end": "1084080"
  },
  {
    "text": "referencing and accessing to symble tables to do so we use pointer tainting",
    "start": "1084080",
    "end": "1091880"
  },
  {
    "text": "that assigns a tag to a pointer propagates it to delivered data and",
    "start": "1091880",
    "end": "1097600"
  },
  {
    "text": "checks whether a memory region is delivered by looking into the the existence of tag the",
    "start": "1097600",
    "end": "1104360"
  },
  {
    "text": "tag so we first assign a tag to the pointer to the management structure",
    "start": "1104360",
    "end": "1110760"
  },
  {
    "text": "which resides in the argument of the interpretation function so during the execution the tag",
    "start": "1110760",
    "end": "1117600"
  },
  {
    "text": "propagates according to the pointer differences by checking whether memory",
    "start": "1117600",
    "end": "1122840"
  },
  {
    "text": "region has tag we can determine the region as",
    "start": "1122840",
    "end": "1127760"
  },
  {
    "text": "accessed so from here g g analysis will focus only on access memory",
    "start": "1127880",
    "end": "1136158"
  },
  {
    "text": "regions so weion find the value object in a symbol table to achieve it we first manually",
    "start": "1136919",
    "end": "1144760"
  },
  {
    "text": "create test scripts that triers Dynamic analysis and make a make a memory State",
    "start": "1144760",
    "end": "1151679"
  },
  {
    "text": "convenient for our analysis so a test script has two",
    "start": "1151679",
    "end": "1157320"
  },
  {
    "text": "features the first is that it assigns a variable in each scope this example is",
    "start": "1157320",
    "end": "1163080"
  },
  {
    "text": "for Global scope and the second is that it uses a characteristic value like 1 2",
    "start": "1163080",
    "end": "1169600"
  },
  {
    "text": "3 4 five six which makes the value searchable in",
    "start": "1169600",
    "end": "1175159"
  },
  {
    "text": "memory so since we input a test script with a searchable memory sear searchable",
    "start": "1175159",
    "end": "1180919"
  },
  {
    "text": "characteristic value we can simply find the value a value object by memory search with that",
    "start": "1180919",
    "end": "1188559"
  },
  {
    "text": "value so from here we find that difference pass from the management structure to the found value",
    "start": "1189039",
    "end": "1197120"
  },
  {
    "text": "objects to prepare for it we explain how a structure member or an array element",
    "start": "1197120",
    "end": "1203799"
  },
  {
    "text": "are differenced in binaries they are differenced by using",
    "start": "1203799",
    "end": "1209120"
  },
  {
    "text": "an offset or index from the base of the structure and array because the base",
    "start": "1209120",
    "end": "1215080"
  },
  {
    "text": "register always points to the base we first find the memory accesses using the",
    "start": "1215080",
    "end": "1220280"
  },
  {
    "text": "register and get the Base address from it so we then get offset or index with",
    "start": "1220280",
    "end": "1228760"
  },
  {
    "text": "the easy mathematics around the memory memory access opans by repeating these steps we can",
    "start": "1228760",
    "end": "1235880"
  },
  {
    "text": "analyze the differences in structures and arrays so using this we analyze the",
    "start": "1235880",
    "end": "1243200"
  },
  {
    "text": "differences path from the management structure to the found value objects so we can achieve this by",
    "start": "1243200",
    "end": "1250039"
  },
  {
    "text": "understanding the differences in structures and arrays on the path I mean",
    "start": "1250039",
    "end": "1255080"
  },
  {
    "text": "difference chains next we find a symbol table and identify",
    "start": "1255080",
    "end": "1262520"
  },
  {
    "text": "its data structure in short we find out a symbol",
    "start": "1262520",
    "end": "1268640"
  },
  {
    "text": "table manages multiple value objects in an array or a structure especially a",
    "start": "1268640",
    "end": "1274559"
  },
  {
    "text": "link list in case of an array a symbol table is the one that exists immediately",
    "start": "1274559",
    "end": "1282080"
  },
  {
    "text": "before the value object in that case only its length varies depending on the number of",
    "start": "1282080",
    "end": "1288600"
  },
  {
    "text": "contained value objects so the structure of differences does not vary and it is",
    "start": "1288600",
    "end": "1294520"
  },
  {
    "text": "easy to identify so and our technique can also handle the case of Link list but we",
    "start": "1294520",
    "end": "1302159"
  },
  {
    "text": "don't H we don't show it here due to time",
    "start": "1302159",
    "end": "1306759"
  },
  {
    "text": "constraints using obtained structure information we can extract bite code and shle",
    "start": "1308039",
    "end": "1314520"
  },
  {
    "text": "tables now we know the structural information so it's time to extract bite",
    "start": "1314520",
    "end": "1320120"
  },
  {
    "text": "code and symbol tables I mean uh preparation",
    "start": "1320120",
    "end": "1325679"
  },
  {
    "text": "phase first we execute a Manisha script that has the behavior you want to",
    "start": "1326640",
    "end": "1332559"
  },
  {
    "text": "inject next suspend the execution at the beginning of the interpretation",
    "start": "1332559",
    "end": "1338159"
  },
  {
    "text": "function after that we explore the structures and arrays from the beginning",
    "start": "1338159",
    "end": "1343640"
  },
  {
    "text": "of the management structure based on the obtained structure information to find the B code and symbol tables in dered",
    "start": "1343640",
    "end": "1351600"
  },
  {
    "text": "chain finally we Le found memory regions to extract",
    "start": "1351600",
    "end": "1358799"
  },
  {
    "text": "them here we will show you how to do bite code juit in the victim victim's",
    "start": "1358799",
    "end": "1366120"
  },
  {
    "text": "environment now we have extracted bite code and symbol TS so we are at the",
    "start": "1366840",
    "end": "1373640"
  },
  {
    "text": "attack phase and it's time to inject them",
    "start": "1373640",
    "end": "1378880"
  },
  {
    "text": "so the final step is to know your victim to inject them to the proper",
    "start": "1378880",
    "end": "1385279"
  },
  {
    "text": "position in recent operating systems memory space memory space layout is",
    "start": "1385279",
    "end": "1391279"
  },
  {
    "text": "generally randomized so the location in memory where we inject them differs from",
    "start": "1391279",
    "end": "1397720"
  },
  {
    "text": "execution to execution however it is difficult to know the internal memory state of The",
    "start": "1397720",
    "end": "1405000"
  },
  {
    "text": "Interpreter in the victim's environment if an injector uses deaca it",
    "start": "1405000",
    "end": "1410640"
  },
  {
    "text": "is too suspicious and easily detected so to inject without being",
    "start": "1410640",
    "end": "1417080"
  },
  {
    "text": "detected we identify the state of of state by memory lead only without using",
    "start": "1417080",
    "end": "1425520"
  },
  {
    "text": "deers to achieve it we first suspend execution of the target interpreter and",
    "start": "1426120",
    "end": "1432120"
  },
  {
    "text": "enumerate all stacks and Heap Memories We then detector management",
    "start": "1432120",
    "end": "1437279"
  },
  {
    "text": "structure by backtrack work from a value object to do so we find a value object",
    "start": "1437279",
    "end": "1443000"
  },
  {
    "text": "by searching a specific value in memory in this slide 1 2 3 4 is a",
    "start": "1443000",
    "end": "1449520"
  },
  {
    "text": "specific value so we can calculate its Base address by subtracting offset from",
    "start": "1449520",
    "end": "1456200"
  },
  {
    "text": "the found value once the Base address is calculated we find the pointer to it",
    "start": "1456200",
    "end": "1462279"
  },
  {
    "text": "with memory search and by repeating the step of calculating the best address and",
    "start": "1462279",
    "end": "1468039"
  },
  {
    "text": "finding the pointer to it we can backtrack the structures comprising the deliverence",
    "start": "1468039",
    "end": "1473799"
  },
  {
    "text": "chain and finally we can find the management structure which is the root of the",
    "start": "1473799",
    "end": "1481158"
  },
  {
    "text": "structures after finding the management structures we Traverse memory region in the forward Direction and right bite",
    "start": "1481640",
    "end": "1489399"
  },
  {
    "text": "code and symbol tables over the VPC to point to bite P entry and resume the",
    "start": "1489399",
    "end": "1495279"
  },
  {
    "text": "execution so to introduce more detailed features",
    "start": "1495279",
    "end": "1502080"
  },
  {
    "text": "and capabilities of bite code juit we conducted some experiments on",
    "start": "1502080",
    "end": "1507799"
  },
  {
    "text": "it in the experiment we used Python and ruer because they are widely used and",
    "start": "1507799",
    "end": "1514720"
  },
  {
    "text": "open source which we can easily verify the result using source",
    "start": "1514720",
    "end": "1520080"
  },
  {
    "text": "code we also use BB script because attackers frequently use it for",
    "start": "1520080",
    "end": "1525600"
  },
  {
    "text": "executing their Marisha script and it has both open source and proprietary",
    "start": "1525600",
    "end": "1532760"
  },
  {
    "text": "versions first we find that our technique could properly work our",
    "start": "1532760",
    "end": "1539919"
  },
  {
    "text": "analysis technique could detect and analyze the bpc by code cache",
    "start": "1539919",
    "end": "1545480"
  },
  {
    "text": "interpretation function symbol tables and value objects in addition we could",
    "start": "1545480",
    "end": "1551760"
  },
  {
    "text": "ex we could extract bite code and symbol tables and our injector could inject",
    "start": "1551760",
    "end": "1557200"
  },
  {
    "text": "them into the proper position finally we verify that the injection could lead to the injected",
    "start": "1557200",
    "end": "1565440"
  },
  {
    "text": "arbitrary code execution so we also evalate the",
    "start": "1565440",
    "end": "1571799"
  },
  {
    "text": "detectability of B code juit we build two types of injectors the first is the",
    "start": "1571799",
    "end": "1578399"
  },
  {
    "text": "one that injects infinite Loop for evaluting the detectability of just the",
    "start": "1578399",
    "end": "1585000"
  },
  {
    "text": "interpretation sorry just injection Behavior the second is that inject downloader",
    "start": "1585000",
    "end": "1592279"
  },
  {
    "text": "malware for evaluating the detectability of behavior including the injected bite",
    "start": "1592279",
    "end": "1599679"
  },
  {
    "text": "code so we evaluated whether each security tools below can detect them we",
    "start": "1599679",
    "end": "1605960"
  },
  {
    "text": "used 74 75 antivirus products on virus total Camp soundbox system monitoring to",
    "start": "1605960",
    "end": "1613520"
  },
  {
    "text": "and volatility with hor find image marind and PT Mar find plin which",
    "start": "1613520",
    "end": "1619720"
  },
  {
    "text": "focuses on detecting existing existing Cod injection",
    "start": "1619720",
    "end": "1625880"
  },
  {
    "text": "attacks so this table shows the detection result many antivirus products could not",
    "start": "1626120",
    "end": "1633399"
  },
  {
    "text": "detect bite code Jujitsu our injector is determined as suspicious only by eight",
    "start": "1633399",
    "end": "1639600"
  },
  {
    "text": "holistic engines since B code jit requires only",
    "start": "1639600",
    "end": "1646840"
  },
  {
    "text": "memory Le and right it is difficult for edrs and sandboxes to detect it on the other hand it could",
    "start": "1646840",
    "end": "1654840"
  },
  {
    "text": "detect malicious behavior of injected bite code based on what they",
    "start": "1654840",
    "end": "1660640"
  },
  {
    "text": "do and existing memory foric tools that detect code injection targets native",
    "start": "1660640",
    "end": "1667200"
  },
  {
    "text": "code by focusing on memory executable permission therefore detecting bite code",
    "start": "1667200",
    "end": "1673960"
  },
  {
    "text": "juit which inject bite code that does not rec execution executable permission is out",
    "start": "1673960",
    "end": "1681480"
  },
  {
    "text": "of their scope and therefore could not detect it so it's time to show you our",
    "start": "1681480",
    "end": "1691039"
  },
  {
    "text": "demo okay in this demo of B code jit we aim to inject the bite code and symbol",
    "start": "1692880",
    "end": "1698519"
  },
  {
    "text": "tables of this malicious. BBS on desktop which simply executes notepad.exe",
    "start": "1698519",
    "end": "1706039"
  },
  {
    "text": "and our our in ction Target is target. BBS on the desktop which simply prints a",
    "start": "1706039",
    "end": "1712559"
  },
  {
    "text": "greeting message H black H fs and slips for a while then we execute the",
    "start": "1712559",
    "end": "1721200"
  },
  {
    "text": "indictor once it is executed it creates a process of cscript.exe with the input",
    "start": "1721200",
    "end": "1727480"
  },
  {
    "text": "of target. BBS and suspend it thread here we attach a debaca to check",
    "start": "1727480",
    "end": "1734399"
  },
  {
    "text": "whether the bite code and symbol tables will really replaced by injection",
    "start": "1734399",
    "end": "1740039"
  },
  {
    "text": "by checking the command line we can see that the G interpreter is truly executing the target. BBS on the",
    "start": "1741960",
    "end": "1750480"
  },
  {
    "text": "desktop for this demo we put a predetermined breakpoint in the interpretation",
    "start": "1750480",
    "end": "1757518"
  },
  {
    "text": "function using the DEA we first show The Bite code before the",
    "start": "1758600",
    "end": "1764080"
  },
  {
    "text": "replacement so give me a minute to navigate there",
    "start": "1764080",
    "end": "1770000"
  },
  {
    "text": "okay this is actually a bite code we take a print screen to check this again",
    "start": "1778320",
    "end": "1783919"
  },
  {
    "text": "later for",
    "start": "1783919",
    "end": "1786960"
  },
  {
    "text": "comparison yes this is is the bite shens of the bite code before the execution I",
    "start": "1796200",
    "end": "1801799"
  },
  {
    "text": "mean this is B9",
    "start": "1801799",
    "end": "1804679"
  },
  {
    "text": "one and this is the symbol table for constants constant strings you can see",
    "start": "1809960",
    "end": "1816039"
  },
  {
    "text": "that it includes the greeting message of H black heart folks okay let's",
    "start": "1816039",
    "end": "1824039"
  },
  {
    "text": "continue so the in injector then looks for an characteristic variable the",
    "start": "1826960",
    "end": "1832200"
  },
  {
    "text": "greeting message in this time and discover the management structure by",
    "start": "1832200",
    "end": "1838240"
  },
  {
    "text": "backtracking from it using this it then find the location",
    "start": "1838240",
    "end": "1844360"
  },
  {
    "text": "of bite code and symbol tables and inject the malicious ones into",
    "start": "1844360",
    "end": "1851600"
  },
  {
    "text": "there finally it overrides the VPC and resumes the execution to force The",
    "start": "1851679",
    "end": "1857120"
  },
  {
    "text": "Interpreter execute the injected bite",
    "start": "1857120",
    "end": "1861960"
  },
  {
    "text": "code so if we check the injected symbol table we can see that there is no longer",
    "start": "1866360",
    "end": "1872440"
  },
  {
    "text": "greeting message and now has notepad.exe that did not exist",
    "start": "1872440",
    "end": "1880279"
  },
  {
    "text": "before of course this happened due to G",
    "start": "1880279",
    "end": "1885600"
  },
  {
    "text": "injection in addition the B code is also replaced so let's compare the ones",
    "start": "1885600",
    "end": "1892120"
  },
  {
    "text": "before and after the injection if you carefully look into the bite bite seens",
    "start": "1892120",
    "end": "1898000"
  },
  {
    "text": "you can find that they are not identical due to the",
    "start": "1898000",
    "end": "1903398"
  },
  {
    "text": "injection okay now we go go back to Deker and let's see what happens once we",
    "start": "1903799",
    "end": "1910279"
  },
  {
    "text": "proceed the execution after the injection so now executing each instruction of the injected P code",
    "start": "1910279",
    "end": "1918639"
  },
  {
    "text": "and eventually notepad.exe is popping up although the although the input script",
    "start": "1918639",
    "end": "1924360"
  },
  {
    "text": "does not have such functionality with system informa we can see that the parent of the notepad.exe",
    "start": "1924360",
    "end": "1931960"
  },
  {
    "text": "process is indeed cscript.exe",
    "start": "1931960",
    "end": "1936240"
  },
  {
    "text": "so we show the B code us can obtain the control of The Interpreter by the",
    "start": "1937679",
    "end": "1943799"
  },
  {
    "text": "injection and it's done without being detected by security product",
    "start": "1943799",
    "end": "1949840"
  },
  {
    "text": "so from here we consider counter measures against B juit from the both aspect of existing security tools and",
    "start": "1954440",
    "end": "1961880"
  },
  {
    "text": "possible future research so we first discuss the",
    "start": "1961880",
    "end": "1967799"
  },
  {
    "text": "possible counter measures using existing security tools first antivirus may be",
    "start": "1967799",
    "end": "1973720"
  },
  {
    "text": "possible to detect to determine an injector as suspicious based on apis used by used for B code",
    "start": "1973720",
    "end": "1981480"
  },
  {
    "text": "unit such as memory reads and rides second edrs and sound boxes can",
    "start": "1981480",
    "end": "1989159"
  },
  {
    "text": "can detect memory rights to an interpreter process and determine whether whether the written data is bite",
    "start": "1989159",
    "end": "1996440"
  },
  {
    "text": "code with signatures or something like that next memory foric tools should",
    "start": "1996440",
    "end": "2003039"
  },
  {
    "text": "analyze analyze the inject injector binary in memory or or detect unnatural",
    "start": "2003039",
    "end": "2009360"
  },
  {
    "text": "parent child relationships around interpreter finally operating systems",
    "start": "2009360",
    "end": "2016120"
  },
  {
    "text": "should protect an interpret process and restrict memory rights to",
    "start": "2016120",
    "end": "2021639"
  },
  {
    "text": "it meanwhile manual analysis is a bit difficult because we we have no bite",
    "start": "2021639",
    "end": "2028440"
  },
  {
    "text": "call specification debers or disassemblers so we discuss possible",
    "start": "2028440",
    "end": "2035600"
  },
  {
    "text": "future research the first is bite code identification which determines whether",
    "start": "2035600",
    "end": "2041360"
  },
  {
    "text": "unknown whether unknown bite sequence is bite code since writing bite code to an",
    "start": "2041360",
    "end": "2047799"
  },
  {
    "text": "interpreter process from the remote process is RAR rarely seen in legitim",
    "start": "2047799",
    "end": "2053320"
  },
  {
    "text": "legitimate Behavior it is a strong signal of bod Juju so this identification applies to",
    "start": "2053320",
    "end": "2060240"
  },
  {
    "text": "security products that dynamically observes the behavior such as edrs and",
    "start": "2060240",
    "end": "2065839"
  },
  {
    "text": "sandboxes the second is malicious bite code identification which additionally",
    "start": "2065839",
    "end": "2072358"
  },
  {
    "text": "determines whether bite code is malicious or not this identification even applies to",
    "start": "2072359",
    "end": "2079079"
  },
  {
    "text": "to security products that statically analyze artifacts such as memory foric",
    "start": "2079079",
    "end": "2085280"
  },
  {
    "text": "tools and to support manual analysis we have to anal analyze",
    "start": "2085280",
    "end": "2091280"
  },
  {
    "text": "instruction set of bite code and build debers and disassemblers so these may be this may",
    "start": "2091280",
    "end": "2098280"
  },
  {
    "text": "be achieved by learning pictures of known bite code but it is still future research",
    "start": "2098280",
    "end": "2105280"
  },
  {
    "text": "issues finally we give takeaways uh Carlos mashad a Brazilian",
    "start": "2105280",
    "end": "2111880"
  },
  {
    "text": "Jud Champion said the ground is my ocean I'm the shark and most people don't even",
    "start": "2111880",
    "end": "2118800"
  },
  {
    "text": "know how to swim and I say interpreters are my ocean I'm the shark and most",
    "start": "2118800",
    "end": "2125000"
  },
  {
    "text": "people don't even know how to swim now I think security researchers should learn",
    "start": "2125000",
    "end": "2131200"
  },
  {
    "text": "how to swim in The Interpreter ocean so utilizing bite code for code",
    "start": "2131200",
    "end": "2137920"
  },
  {
    "text": "injection has not been much discussed before but at now our reverse",
    "start": "2137920",
    "end": "2143000"
  },
  {
    "text": "engineering techniques reveal it to be a realistic threat so you should be more careful",
    "start": "2143000",
    "end": "2149400"
  },
  {
    "text": "about bite code AS injected payload from now on in addition security researchers",
    "start": "2149400",
    "end": "2156119"
  },
  {
    "text": "should discuss further count measures and we wish our Pok will help them and",
    "start": "2156119",
    "end": "2162400"
  },
  {
    "text": "our Pok will be soon available here stay tuned so thank you for the listening",
    "start": "2162400",
    "end": "2170079"
  },
  {
    "text": "here are our contacts if you have any question please send a message or come to the rap room after this",
    "start": "2170079",
    "end": "2178630"
  },
  {
    "text": "[Applause]",
    "start": "2178630",
    "end": "2190518"
  },
  {
    "text": "yeah uh I have a question uh first of all very nice talk and it was it was amazing so thank you and then I have one",
    "start": "2190800",
    "end": "2197240"
  },
  {
    "text": "question about your um PC or the evaluation how about the powers shell so",
    "start": "2197240",
    "end": "2202920"
  },
  {
    "text": "because Powers shell is everywhere and that is like the most Target for the thers and how do you think your",
    "start": "2202920",
    "end": "2208839"
  },
  {
    "text": "Technique can be applicable to the power shell sorry C uh Power shell power shell",
    "start": "2208839",
    "end": "2215520"
  },
  {
    "text": "ah H that's a very nice question uh actually Power share is not a binary but",
    "start": "2215520",
    "end": "2221760"
  },
  {
    "text": "you know net frame based that is executed on NET Framework so it is",
    "start": "2221760",
    "end": "2227640"
  },
  {
    "text": "executed on interpreter and the powers interpreter is executed on the bite v",
    "start": "2227640",
    "end": "2234079"
  },
  {
    "text": "machine of power shell uh sorry v machine of doet framework so how to say it is nested nested v machine so my",
    "start": "2234079",
    "end": "2242040"
  },
  {
    "text": "understanding of your response is that powers shell translate uh the script into the D net",
    "start": "2242040",
    "end": "2248880"
  },
  {
    "text": "bod and that is not The Interpreter based virtual machine yeah yeah yeah okay got it so next it so it's a bit",
    "start": "2248880",
    "end": "2255400"
  },
  {
    "text": "difficult to app apply our technique and we need some uh research on it",
    "start": "2255400",
    "end": "2261599"
  },
  {
    "text": "yeah this is anony yeah uh I want to ask thankful for the talk I want to ask",
    "start": "2261599",
    "end": "2268319"
  },
  {
    "text": "whether you have test the crowd strike crowd strike yeah actually no oh you should find them and test with them uh",
    "start": "2268319",
    "end": "2276079"
  },
  {
    "text": "not test it on because the is lots of people using it so ah okay yeah yeah I",
    "start": "2276079",
    "end": "2281960"
  },
  {
    "text": "will do it I will definitely do it",
    "start": "2281960",
    "end": "2285720"
  },
  {
    "text": "sorry so any questions okay so our session is over",
    "start": "2288480",
    "end": "2294839"
  },
  {
    "text": "and if you have any question please come to the RP room after this and as you can",
    "start": "2294839",
    "end": "2300280"
  },
  {
    "text": "see we have uh outfit and we you can easily search",
    "start": "2300280",
    "end": "2306760"
  },
  {
    "text": "us by looking at um my outfit yeah so thank you",
    "start": "2306760",
    "end": "2314838"
  }
]