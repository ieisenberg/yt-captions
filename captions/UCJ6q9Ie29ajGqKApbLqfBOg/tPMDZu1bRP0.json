[
  {
    "text": "e",
    "start": "28960",
    "end": "31960"
  },
  {
    "text": "all right afternoon everyone I hope you enjoyed your lunch uh the presentation show you it's",
    "start": "54879",
    "end": "60480"
  },
  {
    "text": "changed quite a lot from the one that's in the book there so to pay to go to Black",
    "start": "60480",
    "end": "66720"
  },
  {
    "text": "download in Ence what we're talking about local attacks against window 32",
    "start": "67720",
    "end": "72960"
  },
  {
    "text": "applications that Implement a g thread or message Handler why they become known as The",
    "start": "72960",
    "end": "78600"
  },
  {
    "text": "Shed attacks invol send exploitable messages to",
    "start": "78600",
    "end": "83880"
  },
  {
    "text": "appliations oh that's uh that all right uh before I start discussing details I",
    "start": "83880",
    "end": "89119"
  },
  {
    "text": "just want to talk a little bit about uh how to put the problem into context uh when the first real Shadow",
    "start": "89119",
    "end": "95680"
  },
  {
    "text": "attack became public back in 2002 with the WM timer message it was uh not really taken that seriously as a",
    "start": "95680",
    "end": "101560"
  },
  {
    "text": "vulnerability it was more of a novelty uh this is even by moft",
    "start": "101560",
    "end": "106680"
  },
  {
    "text": "themselves uh if we look at the Windows operating system historically uh it has not really been considered secure enough",
    "start": "106680",
    "end": "112520"
  },
  {
    "text": "to be uh put inside highly protected networks while other operating systems",
    "start": "112520",
    "end": "118280"
  },
  {
    "text": "have already gone through the security vulnerability Discovery phase this was something new to Windows and like any",
    "start": "118280",
    "end": "124159"
  },
  {
    "text": "new system it add holes big enough to drive a bus through historically secure networks",
    "start": "124159",
    "end": "129840"
  },
  {
    "text": "were protected largely by limiting the use of connected computers to trusted",
    "start": "129840",
    "end": "134920"
  },
  {
    "text": "employees and workstations were built using truly secure in tested builds and strip down Hardware to prevent Data",
    "start": "134920",
    "end": "143480"
  },
  {
    "text": "Theft right technical difficulties mean that I can't see the slides here but that's all right now like most new",
    "start": "144480",
    "end": "150680"
  },
  {
    "text": "exploitation methods shatter attacks are maturing and is now acknowledged that they no longer affect only the WM timer",
    "start": "150680",
    "end": "158040"
  },
  {
    "text": "message the scope of the problem is widening we're now starting to see some",
    "start": "158040",
    "end": "163720"
  },
  {
    "text": "very solid moves towards security by Microsoft we' got patch management buil and firewalling and of course XP Service",
    "start": "163720",
    "end": "169760"
  },
  {
    "text": "Pack too with this advance in Window Security there are now more and more windows machines inside secure networks",
    "start": "169760",
    "end": "176319"
  },
  {
    "text": "and as time goes by there will be more and more along with those more trusted employees with access to",
    "start": "176319",
    "end": "183360"
  },
  {
    "text": "these so what's to come shedow tax will continue to widen in scope and during",
    "start": "183360",
    "end": "188879"
  },
  {
    "text": "the presentation we will discuss and demonstrate excuse me some of the directions in which these are heading",
    "start": "188879",
    "end": "194360"
  },
  {
    "text": "secure networks will still have a large number of untrusted employees if not more than four an employee turnaround",
    "start": "194360",
    "end": "199959"
  },
  {
    "text": "will continue to rise it will happen at some stage that the Windows operating system will be",
    "start": "199959",
    "end": "205440"
  },
  {
    "text": "considered secure enough to be deployed everywhere throughout secure Networks",
    "start": "205440",
    "end": "210799"
  },
  {
    "text": "the restrictions put in place on the workstations will be considered secure enough to control access to the network",
    "start": "210799",
    "end": "216400"
  },
  {
    "text": "and data as well as restricting the Privileges and act uh actions that employees can",
    "start": "216400",
    "end": "223040"
  },
  {
    "text": "take now Shadow attacks affect more than just the core operating system and they affect more than just Microsoft products",
    "start": "223239",
    "end": "230280"
  },
  {
    "text": "any third party application service running with elevated privileges may be vulnerable to some kind of",
    "start": "230280",
    "end": "235680"
  },
  {
    "text": "exploitation this means that even if Microsoft patched every vulnerable instance in their products workstations",
    "start": "235680",
    "end": "241360"
  },
  {
    "text": "running the Windows operating system may still be vulnerable to privilege elevation",
    "start": "241360",
    "end": "246879"
  },
  {
    "text": "attacks it is possible that Microsoft will apply a fix to the core of the problem the messaging system but this is",
    "start": "248120",
    "end": "254040"
  },
  {
    "text": "very unlikely and even so it wouldn't be ready anytime",
    "start": "254040",
    "end": "259160"
  },
  {
    "text": "soon so in a real world environment how can Shad attacks affect you okay well privilege escalation is the major impact",
    "start": "262639",
    "end": "269120"
  },
  {
    "text": "of these attacks and in general scope the most important currently there are restricted to local local elevation",
    "start": "269120",
    "end": "277199"
  },
  {
    "text": "attacks uh this of course includes remote desktops cetric VNC stuff like that as well as the possibility of worms",
    "start": "277199",
    "end": "284080"
  },
  {
    "text": "and other Trojans utilizing these attacks to increase their access to a system commonly programmed such as",
    "start": "284080",
    "end": "290919"
  },
  {
    "text": "personal firewalls antivirus systems and other monitoring software uh run with",
    "start": "290919",
    "end": "296000"
  },
  {
    "text": "elevated rights and these have been most of these tested have been found vulnerable to to attack now successful",
    "start": "296000",
    "end": "301720"
  },
  {
    "text": "attack could allow untrusted users to elevate their privileges to a higher level allowing them to install malicious",
    "start": "301720",
    "end": "306960"
  },
  {
    "text": "programs such as key loggers sniffers and remote access",
    "start": "306960",
    "end": "311840"
  },
  {
    "text": "software okay so what can an attacker do now depending on the target application an attack May to do a number of things",
    "start": "312800",
    "end": "318880"
  },
  {
    "text": "uh most obvious is what we just discussed the privilege escalation privilege elevation uh if a Target",
    "start": "318880",
    "end": "324360"
  },
  {
    "text": "application is running with elevated rights normally system rights then an attacker may be able to gain access to",
    "start": "324360",
    "end": "330120"
  },
  {
    "text": "those rights open a command shell etc etc since all windows include default",
    "start": "330120",
    "end": "336080"
  },
  {
    "text": "handling for WM Clos WM quit destroy Etc messages like that it is possible for an",
    "start": "336080",
    "end": "342080"
  },
  {
    "text": "unprivileged user to shut down some applications now this can become important um if a user is able to shut",
    "start": "342080",
    "end": "348680"
  },
  {
    "text": "down an virus software firewall software monitoring software or other software that uh is in use to restrict what the",
    "start": "348680",
    "end": "355440"
  },
  {
    "text": "user is able to do other attacks could could involve the manipulation of controls to allow access",
    "start": "355440",
    "end": "362240"
  },
  {
    "text": "to application areas that could not normally be that should normally be denied we're talking about thck clients",
    "start": "362240",
    "end": "368599"
  },
  {
    "text": "here um if a user is able to send an enable message to a disabled button menu",
    "start": "368599",
    "end": "377080"
  },
  {
    "text": "toolbar then they may be able to gain access to areas of the application that they shouldn't be able",
    "start": "377080",
    "end": "382759"
  },
  {
    "text": "to uh if data from user input or guey dat uh guey text is used uh",
    "start": "382759",
    "end": "390639"
  },
  {
    "text": "insecurely it could lead to SQL injection attacks and F manipulation or textbook buffer",
    "start": "390639",
    "end": "397400"
  },
  {
    "text": "overflows and the Windows operating system uses a mechanism knowing as Windows messaging to communicate events",
    "start": "401919",
    "end": "407759"
  },
  {
    "text": "such as user input excuse me system notification and control information between",
    "start": "407759",
    "end": "414000"
  },
  {
    "text": "Windows unlike the old days when an application would stop and wait for user input uh um Windows messaging allows an",
    "start": "414000",
    "end": "421639"
  },
  {
    "text": "application to process input only when there is input waiting for the",
    "start": "421639",
    "end": "427720"
  },
  {
    "text": "application each window created on the desktop has a unique window handle to identify it within the",
    "start": "427720",
    "end": "433800"
  },
  {
    "text": "system and messages are passed to the system which in turn directs the messages the appropriate window",
    "start": "433800",
    "end": "439560"
  },
  {
    "text": "identified by its window handle the window then processes the",
    "start": "439560",
    "end": "444800"
  },
  {
    "text": "message depending on how it was sent and what parameters it was sent to",
    "start": "444800",
    "end": "449960"
  },
  {
    "text": "every control such as a text box a list box or a form is derived from the base window class so throughout this",
    "start": "449960",
    "end": "456240"
  },
  {
    "text": "presentation when I'm talking about a window I'm referring to any type of gy",
    "start": "456240",
    "end": "461360"
  },
  {
    "text": "control now the problem with this method of sending messages is that the operating system allows any user to send",
    "start": "461360",
    "end": "467440"
  },
  {
    "text": "messages to any application and in most cases the the target application will",
    "start": "467440",
    "end": "472960"
  },
  {
    "text": "blindly accept these messages and act on them accordingly so by exploring knowing",
    "start": "472960",
    "end": "478199"
  },
  {
    "text": "weaknesses in the messaging system system and techer can manipulate applications for an arbitrary",
    "start": "478199",
    "end": "484159"
  },
  {
    "text": "Advantage okay so how does a message get from point A to point B now there are two main API calls used to pass messages",
    "start": "485759",
    "end": "491800"
  },
  {
    "text": "to Windows and various sub messages underneath these all of the functions pass the",
    "start": "491800",
    "end": "497720"
  },
  {
    "text": "message to the system which in turn passes it on to the appropriate Place post message and its related",
    "start": "497720",
    "end": "503840"
  },
  {
    "text": "functions pass the message data to the message CU of the thread that owns the destination window",
    "start": "503840",
    "end": "510400"
  },
  {
    "text": "the sending application then continues executing without awaiting a",
    "start": "510400",
    "end": "515959"
  },
  {
    "text": "response a thread's message Loop constantly pulls the message queue removing and dispatching any messages to",
    "start": "515959",
    "end": "521640"
  },
  {
    "text": "the appropriate window procedure for the window identified by the unique window handle passed through the API",
    "start": "521640",
    "end": "528600"
  },
  {
    "text": "function the send message family of functions passes the message directly to the window procedure of the target",
    "start": "528600",
    "end": "534839"
  },
  {
    "text": "window and after the window procedure processes the message execution of uh sorry process the Miss and returns their",
    "start": "534839",
    "end": "541800"
  },
  {
    "text": "sending application then continues execution the window procedure is where",
    "start": "541800",
    "end": "547760"
  },
  {
    "text": "the message contents are processed it is in this function where the decision is made based on the message type to handle",
    "start": "547760",
    "end": "554600"
  },
  {
    "text": "the message or ignore it and pass it up the the Handler chain every window has a window",
    "start": "554600",
    "end": "561200"
  },
  {
    "text": "procedure which is derived from the base window procedure for the class of the control every thread which uses a GDI",
    "start": "561200",
    "end": "567959"
  },
  {
    "text": "function has a message q and every thread that creates a window has a message through a message CU now we need",
    "start": "567959",
    "end": "574440"
  },
  {
    "text": "to keep this in mind when talking about what applications are vulnerable to these attacks some applications or",
    "start": "574440",
    "end": "579519"
  },
  {
    "text": "Services which do not normally display a window can be enticed to create one which may lead to the exploitation of",
    "start": "579519",
    "end": "584760"
  },
  {
    "text": "the service of course one that really Springs to mind is uh if you go net send",
    "start": "584760",
    "end": "590760"
  },
  {
    "text": "and a message box pops up with a message that message box is then created by the service the Messenger",
    "start": "590760",
    "end": "596920"
  },
  {
    "text": "Service uh your print service when you have a printer error the message Bo pops up it's owned by System the printer",
    "start": "596920",
    "end": "605279"
  },
  {
    "text": "service so it helped the understanding of how message becomes exploitable I broken them down to three",
    "start": "605600",
    "end": "611640"
  },
  {
    "text": "categories now I type one message correctly Marshals the data and behaves as it was designed to these messages can",
    "start": "611640",
    "end": "617959"
  },
  {
    "text": "be used to pass data into a Target application's memory space an example of this be the WM set text",
    "start": "617959",
    "end": "625399"
  },
  {
    "text": "message the pointer to the text string is correctly martial to the reing application and the window text or",
    "start": "625399",
    "end": "632000"
  },
  {
    "text": "caption of the receiver is is set accordingly a type two message does not",
    "start": "632000",
    "end": "637360"
  },
  {
    "text": "need any marshalling the data that is passed is used directly and may result in the sitting of a controls",
    "start": "637360",
    "end": "643560"
  },
  {
    "text": "properties these type of messages can be used sorry can be exploitable in some situations if you think about the WM",
    "start": "643560",
    "end": "649000"
  },
  {
    "text": "timer message uh the pointer that has passed is not Marshal need to be Marshal",
    "start": "649000",
    "end": "654200"
  },
  {
    "text": "but it was still exploitable Now a type three message can be used to over WR arbitrary memory",
    "start": "654200",
    "end": "659959"
  },
  {
    "text": "locations in the Target application it does not go through the marshing process but it",
    "start": "659959",
    "end": "667200"
  },
  {
    "text": "should a value is passed as an offset to a data structure and because it is not",
    "start": "667480",
    "end": "673000"
  },
  {
    "text": "marshalled it allows us to control the memory address that the target application",
    "start": "673000",
    "end": "678399"
  },
  {
    "text": "accesses okay so what is message",
    "start": "678399",
    "end": "682360"
  },
  {
    "text": "marshalling message marshalling is the process of a system taking message parameters from one thread and passing",
    "start": "684720",
    "end": "691360"
  },
  {
    "text": "them to another generally messages are passed between the same application so memory",
    "start": "691360",
    "end": "697720"
  },
  {
    "text": "accessing is not a problem but when messages are passed from one application to another the data needs to be modified",
    "start": "697720",
    "end": "703839"
  },
  {
    "text": "so so that the sending sorry so the the memory address specified is valid in the",
    "start": "703839",
    "end": "710079"
  },
  {
    "text": "receiving application any message with a value less than WM uh user is Marshall",
    "start": "710079",
    "end": "717000"
  },
  {
    "text": "automatically by the system these are system syst defin messages and therefore the system is aware of what the",
    "start": "717000",
    "end": "722320"
  },
  {
    "text": "parameters are and how they should be Marshal not surprisingly though there",
    "start": "722320",
    "end": "728639"
  },
  {
    "text": "are a large number of messages that are not Marshall correctly all of the messages affecting",
    "start": "728639",
    "end": "736120"
  },
  {
    "text": "or used by the the new common controls the list view the uh the tab view etc",
    "start": "736120",
    "end": "742160"
  },
  {
    "text": "etc they all resided above WM user and therefore they can most of them can be used for arbitrary memory overr and one",
    "start": "742160",
    "end": "749040"
  },
  {
    "text": "way or",
    "start": "749040",
    "end": "751279"
  },
  {
    "text": "another for messages with an ID less than WM user marshling depends on the function of the",
    "start": "755600",
    "end": "762279"
  },
  {
    "text": "message if the message is passed a numeric value that is used directly then no",
    "start": "762279",
    "end": "767639"
  },
  {
    "text": "marshling is required a type two message but if the message is passing a block of data such as a text string the block of",
    "start": "767639",
    "end": "774240"
  },
  {
    "text": "data and the relevant pointer need to be managed so that the receiving application can access the data",
    "start": "774240",
    "end": "780839"
  },
  {
    "text": "as you can see here if uh the parameter is used directly as in the WM timer message uh no marshalling is required",
    "start": "781600",
    "end": "788120"
  },
  {
    "text": "whereas the W text message the data from the sending application needs to be put somewhere so that it's valid in the",
    "start": "788120",
    "end": "794320"
  },
  {
    "text": "receiving application's memory space so where does it go",
    "start": "794320",
    "end": "801360"
  },
  {
    "text": "okay the G shared handle table is a block of memory that is shared between all guey",
    "start": "801360",
    "end": "807279"
  },
  {
    "text": "threads this table holds the handles of all opened objects from any goey thread and has enough space for 4,000 GDI table",
    "start": "807279",
    "end": "815519"
  },
  {
    "text": "entry entries a PO to this location can be",
    "start": "815519",
    "end": "821279"
  },
  {
    "text": "found in the process environment block at 7 ffd f94 now 60,000 bytes above this",
    "start": "821279",
    "end": "829959"
  },
  {
    "text": "address is the start of the process mapped Heap it is in this heat block that the",
    "start": "829959",
    "end": "837000"
  },
  {
    "text": "system Marshalls message data 2 now because every goey thread has this memory mapped into their address",
    "start": "837000",
    "end": "845040"
  },
  {
    "text": "space um every guey application is then able to access this this",
    "start": "846519",
    "end": "851800"
  },
  {
    "text": "space to uh to access the data",
    "start": "851800",
    "end": "857759"
  },
  {
    "text": "sorry now what what the system does is it it copies the the data from the sending application into this address",
    "start": "857759",
    "end": "863920"
  },
  {
    "text": "space updates the pointer and passes that to the receiving application",
    "start": "863920",
    "end": "870680"
  },
  {
    "text": "now every gy thread has this memory mapped into his address space but at a different base",
    "start": "872279",
    "end": "877519"
  },
  {
    "text": "location the actual data remains at the same offset within the within the Heap",
    "start": "877519",
    "end": "882880"
  },
  {
    "text": "so the process mapped Heap appears to be mapped at a static location per application allowing us to calculate a",
    "start": "882880",
    "end": "889480"
  },
  {
    "text": "static offset between two applications so by located the data in one application's process map P we know the",
    "start": "889480",
    "end": "896040"
  },
  {
    "text": "exact location in another application this removes any guest work involved in",
    "start": "896040",
    "end": "901639"
  },
  {
    "text": "getting data into a Target application and allows for the exploitation of more complicated",
    "start": "901639",
    "end": "907199"
  },
  {
    "text": "messages so as we can see here on the attacking application the the mapped heat base is at 4900 th000 something",
    "start": "907199",
    "end": "914519"
  },
  {
    "text": "rather whereas on the target applications is 53 blah blah blah so the static difference between that is a0000",
    "start": "914519",
    "end": "920959"
  },
  {
    "text": "z so if we know that our data is at 5238 in our application by adding the a0000",
    "start": "920959",
    "end": "927680"
  },
  {
    "text": "it will give us the exact app and the target",
    "start": "927680",
    "end": "931639"
  },
  {
    "text": "application okay so we'll come back to the process map shortly but first I'll mention some very",
    "start": "934079",
    "end": "940839"
  },
  {
    "text": "brief points on Shell Code when I'm talking about Shell Code I'm referring to any data that has been",
    "start": "940839",
    "end": "947040"
  },
  {
    "text": "used in an in an exploit this can range from a structure block to a text string right through to code that runs a",
    "start": "947040",
    "end": "953240"
  },
  {
    "text": "command shell if the required action is a",
    "start": "953240",
    "end": "959120"
  },
  {
    "text": "command prompt window then the code in most places only has to call the system",
    "start": "959120",
    "end": "964240"
  },
  {
    "text": "API now to make it more robust it could also include code to make sure the correct DLS are mapped first while",
    "start": "964240",
    "end": "970160"
  },
  {
    "text": "making calls to the low Library function because the shell code is executed",
    "start": "970160",
    "end": "976560"
  },
  {
    "text": "locally um any relocatable addresses can be assigned at runtime before sitting the",
    "start": "976560",
    "end": "982279"
  },
  {
    "text": "exploit this removes the need for any address function lookup code that's normally found in remote exploits and",
    "start": "982279",
    "end": "988160"
  },
  {
    "text": "allows attack a craft and exploit that is completely operating system and service back",
    "start": "988160",
    "end": "993800"
  },
  {
    "text": "independent the scour also bypasses protections such as dll rebasing that was discussed last",
    "start": "993800",
    "end": "1001480"
  },
  {
    "text": "year all of the apis used to pass mes messages have wide character or Unicode",
    "start": "1004600",
    "end": "1010959"
  },
  {
    "text": "equivalence this means that complete bite arrays can be passed and in most cases they can contain no",
    "start": "1010959",
    "end": "1017480"
  },
  {
    "text": "values the set window text W function is a wide",
    "start": "1017480",
    "end": "1022880"
  },
  {
    "text": "character wrapper for the send message Api to send the WM set text",
    "start": "1022880",
    "end": "1029120"
  },
  {
    "text": "message this can be used to set the title caption of Windows and is an ideal way to pass our Shell",
    "start": "1029679",
    "end": "1034839"
  },
  {
    "text": "Code of course though the string will be terminated if it's a if a double sorry if a wide character null as shown down",
    "start": "1034839",
    "end": "1042199"
  },
  {
    "text": "here on that side down there is in the string if a white character n is",
    "start": "1042199",
    "end": "1049200"
  },
  {
    "text": "required in the exploit though uh we can create that in the memory space by using multiple calls for",
    "start": "1049200",
    "end": "1055400"
  },
  {
    "text": "the set window text W message multiple calls that use the same address space uh sorry multiple calls",
    "start": "1055400",
    "end": "1061840"
  },
  {
    "text": "will use the same address space if the data pass is is a smaller length than",
    "start": "1061840",
    "end": "1067559"
  },
  {
    "text": "previously so this means if we wanted to create that block there which includes a wi ter",
    "start": "1067559",
    "end": "1073679"
  },
  {
    "text": "n we start first by putting the the parts after the n",
    "start": "1073679",
    "end": "1078960"
  },
  {
    "text": "the threes and then by making subsequent calls to it we write each bit backwards",
    "start": "1078960",
    "end": "1084960"
  },
  {
    "text": "until we end up with our complete B code structure in the address space containing our wide character",
    "start": "1084960",
    "end": "1091480"
  },
  {
    "text": "NS various methods have been used to try and find this uh locate the Shell Code for shadow",
    "start": "1098240",
    "end": "1104320"
  },
  {
    "text": "attacks and while these have all been successful most of them have downfalls and are not ex accurate this guessing of",
    "start": "1104320",
    "end": "1110280"
  },
  {
    "text": "the address technique makes it difficult to exploit messages that require even the simplest of data",
    "start": "1110280",
    "end": "1117000"
  },
  {
    "text": "structures there will be methods such as brute forcing arbitrary bite writing or even arbitrary memory",
    "start": "1117000",
    "end": "1123720"
  },
  {
    "text": "reading sorry all with the same objective of locating the Shell Code in an unknown",
    "start": "1123720",
    "end": "1129840"
  },
  {
    "text": "space now Chris padet noticed that when you create a message box the data is copied into every",
    "start": "1129840",
    "end": "1136679"
  },
  {
    "text": "application what I think he was was actually seeing was what I described before the memory space that's M into",
    "start": "1136679",
    "end": "1142039"
  },
  {
    "text": "everyy thread the process mapped",
    "start": "1142039",
    "end": "1146080"
  },
  {
    "text": "Heap so to use the process mapped Heap to locate the exact position of our Shell Code we first need to find the",
    "start": "1149600",
    "end": "1155919"
  },
  {
    "text": "offset between the process mapped heaps in the two applications for the Target application",
    "start": "1155919",
    "end": "1162520"
  },
  {
    "text": "this can be done by opening the process and reading the address from the PEB the address is then adjusted",
    "start": "1162520",
    "end": "1169320"
  },
  {
    "text": "to give us the Base address of the mapped Heap section of course this method requires",
    "start": "1169320",
    "end": "1174880"
  },
  {
    "text": "the bug rides and is done on a computer under the attacker's control just like when creating a an exploit for for a",
    "start": "1174880",
    "end": "1180600"
  },
  {
    "text": "remote service The Base address for the",
    "start": "1180600",
    "end": "1186600"
  },
  {
    "text": "attacking application can be discovered at runtime by reading the local process environment",
    "start": "1186600",
    "end": "1192000"
  },
  {
    "text": "block and then adjusting the address again the difference between the two",
    "start": "1192000",
    "end": "1197600"
  },
  {
    "text": "gives us the offset to adjust the Shell Code location by giving us the exact location of the of our data in the",
    "start": "1197600",
    "end": "1203880"
  },
  {
    "text": "Target",
    "start": "1203880",
    "end": "1206240"
  },
  {
    "text": "application using sit window text W as an ideal way to place our Shell Code into the map",
    "start": "1211520",
    "end": "1217039"
  },
  {
    "text": "t on this graphic we're shown the set window text W being sent to the Target",
    "start": "1217039",
    "end": "1222280"
  },
  {
    "text": "application now this is not necessary and it's just shown for clarity sake we could in fact send that message to",
    "start": "1222280",
    "end": "1227679"
  },
  {
    "text": "ourselves to set our caption window either way our data will be placed into the process map tap and it be available",
    "start": "1227679",
    "end": "1234320"
  },
  {
    "text": "to any application with a guey thread the attacking application can",
    "start": "1234320",
    "end": "1239960"
  },
  {
    "text": "then search locally to locate the data in its map tap and then by adjusting with the offset that we described in the",
    "start": "1239960",
    "end": "1246080"
  },
  {
    "text": "previous slide where we know the exact location of our data in the Target application's memory",
    "start": "1246080",
    "end": "1251880"
  },
  {
    "text": "space so to recap we've shown that it's now possible to place arbitrary data containing any values into a know of any",
    "start": "1251880",
    "end": "1258840"
  },
  {
    "text": "application with a thread implementing a message Handler now this forms the basis for all",
    "start": "1258840",
    "end": "1264679"
  },
  {
    "text": "message attacks going forwards and allows us to exploit messages that that require even complex data structures",
    "start": "1264679",
    "end": "1271279"
  },
  {
    "text": "containing pointers so let's talk about some of the",
    "start": "1271279",
    "end": "1277039"
  },
  {
    "text": "attacks now the Callback attack is the classic shatter attack was made public back in 2002 uh with the WM timer",
    "start": "1277039",
    "end": "1286279"
  },
  {
    "text": "message these attacks exp messages that pass a pointer to a function the",
    "start": "1286279",
    "end": "1291799"
  },
  {
    "text": "receiving window procedure uses this pointer as a location of a callback function and therefore execution is",
    "start": "1291799",
    "end": "1298559"
  },
  {
    "text": "jumps to the location specified in the message Microsoft finally acknowledged",
    "start": "1298559",
    "end": "1304520"
  },
  {
    "text": "this was a problem and released a patch to address this issue to prevent the WM timer message from executing callback",
    "start": "1304520",
    "end": "1311000"
  },
  {
    "text": "addresses that were not previously registered since then a number of other",
    "start": "1311000",
    "end": "1317000"
  },
  {
    "text": "messages have been found vulnerable to this type of attack and it should be realized that any message that implements or uses a callback function",
    "start": "1317000",
    "end": "1324720"
  },
  {
    "text": "uh may be susceptible to this type of attack so we've listed here a few messages that accept a",
    "start": "1324720",
    "end": "1331919"
  },
  {
    "text": "callback as a parameter and are easily exploitable and a few that accept the Callback within a structure which are",
    "start": "1331919",
    "end": "1337880"
  },
  {
    "text": "now also easily exploitable so the Callback attack",
    "start": "1337880",
    "end": "1343799"
  },
  {
    "text": "starts by getting the Shell Code into the address space of an application we know but that by using the process map",
    "start": "1343799",
    "end": "1349799"
  },
  {
    "text": "Heap we can place our Shell Code into a nonn location in any Target",
    "start": "1349799",
    "end": "1355320"
  },
  {
    "text": "application the Callback message is then sent passing the location of the Shell Code as the Callback function",
    "start": "1355320",
    "end": "1361720"
  },
  {
    "text": "pointer and the target application blindly accepts this and the shell code",
    "start": "1361720",
    "end": "1367240"
  },
  {
    "text": "is",
    "start": "1367240",
    "end": "1369480"
  },
  {
    "text": "executed not too long ago a video Marlo released a package under the name of easy shatter it can be found on security",
    "start": "1373600",
    "end": "1380679"
  },
  {
    "text": "Focus excuse me this allowed him to craft some attacks without the need for locating the Shell",
    "start": "1380679",
    "end": "1387000"
  },
  {
    "text": "Code now he realized that the Callback function for the EM sit",
    "start": "1387000",
    "end": "1394000"
  },
  {
    "text": "word break proc ex message took a pointer to a Tex string as its first parameter and he noticed that the load",
    "start": "1394000",
    "end": "1401080"
  },
  {
    "text": "Library function also took a pointer to a text string for its first parameter so his attack involved typing",
    "start": "1401080",
    "end": "1408320"
  },
  {
    "text": "or pasting the name of a dlll into a text box and then sending the EM word break property X message with the",
    "start": "1408320",
    "end": "1414919"
  },
  {
    "text": "address of the load Library function as the Callback function now this of course meant that",
    "start": "1414919",
    "end": "1420120"
  },
  {
    "text": "whatever dlll had typed into the text box was loaded by the application and any initialization code within the dll",
    "start": "1420120",
    "end": "1427000"
  },
  {
    "text": "was run now this removed the need to find or write any Shell Code into the target application and it's basically",
    "start": "1427000",
    "end": "1434320"
  },
  {
    "text": "the standard returning to lipy exploitation method so if we look for any other apis that",
    "start": "1434320",
    "end": "1440880"
  },
  {
    "text": "fit this mold to that quickly spring to mind our unhandled exception filter and",
    "start": "1440880",
    "end": "1446400"
  },
  {
    "text": "system to exploit the unhandled exception filter it would require pasting the Shell Code into the text box",
    "start": "1446400",
    "end": "1453600"
  },
  {
    "text": "and then sending the EM set word break proc ex message with the address of set unhandled exception filter as the",
    "start": "1453600",
    "end": "1459200"
  },
  {
    "text": "Callback function and then causing an exception in the application which will then cause our Shell Code to be",
    "start": "1459200",
    "end": "1465760"
  },
  {
    "text": "executed the system API would be much easier to use as a returned to liy type export method and would simply involve",
    "start": "1465760",
    "end": "1471880"
  },
  {
    "text": "typing command exe into a text box and then passing the address system API as the Callback",
    "start": "1471880",
    "end": "1479200"
  },
  {
    "text": "function now this is what we've done to exploit the EM streamin",
    "start": "1479200",
    "end": "1485240"
  },
  {
    "text": "message so the EM stream em stream in message takes a pointer to an edit",
    "start": "1486799",
    "end": "1492000"
  },
  {
    "text": "stream structure which holds a cookie value and the address of the Callback function using the set window text W API",
    "start": "1492000",
    "end": "1500240"
  },
  {
    "text": "we're able to create a valid structure in the process map T and find the exact location of",
    "start": "1500240",
    "end": "1505840"
  },
  {
    "text": "it the actual edit stream callback function receives its cook receives the",
    "start": "1505840",
    "end": "1512240"
  },
  {
    "text": "cooking value as its first parameter so by building a structure",
    "start": "1512240",
    "end": "1517960"
  },
  {
    "text": "that contains the pointer to our string as the cooky value and then passing the",
    "start": "1517960",
    "end": "1523679"
  },
  {
    "text": "pointer to sorry passing the address of the system API as the Callback function",
    "start": "1523679",
    "end": "1529120"
  },
  {
    "text": "we can cause the rich text box to call system passing our cookie value which points to our",
    "start": "1529120",
    "end": "1534960"
  },
  {
    "text": "string uh to the system API therefore opening a command shell now the chance of a system",
    "start": "1534960",
    "end": "1541799"
  },
  {
    "text": "application actually having a rich text box is probably about zero but what we're trying to show here is how it's",
    "start": "1541799",
    "end": "1547360"
  },
  {
    "text": "now possible to exploit complex data struct sorry exploit messages that require complex data",
    "start": "1547360",
    "end": "1553640"
  },
  {
    "text": "structures uh including pointers to themselves",
    "start": "1553640",
    "end": "1559679"
  },
  {
    "text": "back in 2003 it was discovered that various Windows messages could be used to write data to an AR arbitrary",
    "start": "1566760",
    "end": "1573000"
  },
  {
    "text": "location in a Target application the exploitable messages",
    "start": "1573000",
    "end": "1578440"
  },
  {
    "text": "revolved around the use of two different types of message the first message needed to be a type two message that could be used to set the uh",
    "start": "1578440",
    "end": "1586279"
  },
  {
    "text": "the size of some gooey object the other message needed to be a type three message",
    "start": "1586279",
    "end": "1591600"
  },
  {
    "text": "that could be used to pass the address of a data structure uh that could then be used to",
    "start": "1591600",
    "end": "1597679"
  },
  {
    "text": "overwrite arbitrary bites in an",
    "start": "1597679",
    "end": "1601278"
  },
  {
    "text": "application researchers discovered that the value passed with the lvm G item W message was not Marshall and could be",
    "start": "1603799",
    "end": "1610640"
  },
  {
    "text": "used to write a w structure to arbitrary locations now this was used in conjunction with lvm set column width",
    "start": "1610640",
    "end": "1617679"
  },
  {
    "text": "function to achieve arbitrary bite writing by setting the width of the",
    "start": "1617679",
    "end": "1623080"
  },
  {
    "text": "second column of a list view it is possible no sorry by S the WID of the First Column of a list CU it is possible",
    "start": "1623080",
    "end": "1630440"
  },
  {
    "text": "to have the left member of the re structure of the",
    "start": "1630440",
    "end": "1635720"
  },
  {
    "text": "second column written to an arbitrary location so what I've tried to show here is that the yellow bits are the re",
    "start": "1635720",
    "end": "1641799"
  },
  {
    "text": "structure the left top right bottom and the purple bit is the address that we pass with the the gar item Rec",
    "start": "1641799",
    "end": "1648960"
  },
  {
    "text": "structure so by sending these two messages we're able to write arbitrary",
    "start": "1648960",
    "end": "1654200"
  },
  {
    "text": "bites to a location of our choosing so by using multiple calls to",
    "start": "1654200",
    "end": "1660240"
  },
  {
    "text": "these messages we can write bites in a sequential manner causing our Shell Code",
    "start": "1660240",
    "end": "1665679"
  },
  {
    "text": "to be written to a location of our of our",
    "start": "1665679",
    "end": "1669399"
  },
  {
    "text": "Chooser so far exploit code has been publicly released for the following",
    "start": "1674840",
    "end": "1680000"
  },
  {
    "text": "messages as can be seen these type of attacks affect numerous controls right",
    "start": "1680000",
    "end": "1685039"
  },
  {
    "text": "down to a basic button if the target application is running on Windows XP using extended",
    "start": "1685039",
    "end": "1692278"
  },
  {
    "text": "Styles so by writing arbitary bites we can place our Shell Code in a KN location but we could have done that",
    "start": "1692640",
    "end": "1698640"
  },
  {
    "text": "using the process mapped heat as explained before so to gain execution control we need to overwrite some",
    "start": "1698640",
    "end": "1704399"
  },
  {
    "text": "important memory addresses such as the top level exception fild so what can we",
    "start": "1704399",
    "end": "1710559"
  },
  {
    "text": "overwrite okay now the top level exception filter or unhandled sorry the top level exception Handler or unhandled",
    "start": "1710559",
    "end": "1718200"
  },
  {
    "text": "unhandled exception filter is commonly used in remote exploits to gain control so we can use that same method",
    "start": "1718200",
    "end": "1725720"
  },
  {
    "text": "locally we write our shell code to a non",
    "start": "1725720",
    "end": "1730120"
  },
  {
    "text": "location and then by overwriting the the top level exception Handler pointer with the location of our Shell Code",
    "start": "1731440",
    "end": "1738440"
  },
  {
    "text": "we can cause our and then causing an exception we can cause our Shell Code to be",
    "start": "1738440",
    "end": "1743720"
  },
  {
    "text": "executed now in some cases the SE method may not work so an attacker can overwrite",
    "start": "1747480",
    "end": "1753679"
  },
  {
    "text": "various other pointers such as the PB locked and unlock pointers under Windows",
    "start": "1753679",
    "end": "1759600"
  },
  {
    "text": "2000 as with the SE method the shell code is written to a known location in the Target right this time it's in the",
    "start": "1760960",
    "end": "1767880"
  },
  {
    "text": "Target application Heap now the PB lock pointer cannot be overwritten bite by bite because it will",
    "start": "1767880",
    "end": "1774080"
  },
  {
    "text": "be called uh in between our our messages so what we can do is we can",
    "start": "1774080",
    "end": "1779960"
  },
  {
    "text": "write out uh the shell code to a location the Heap that contains the lowest significant word of the original",
    "start": "1779960",
    "end": "1785200"
  },
  {
    "text": "PB pointer and then by writing a bite to",
    "start": "1785200",
    "end": "1790880"
  },
  {
    "text": "the third bite of the PB pointer zero will be written to the fourth bite",
    "start": "1790880",
    "end": "1797399"
  },
  {
    "text": "allowing us once again to gain control and",
    "start": "1797399",
    "end": "1801640"
  },
  {
    "text": "execution so we send a message to place our Shell Code somewhere in the Heap that contains at a location that",
    "start": "1803000",
    "end": "1808240"
  },
  {
    "text": "contains the L significant word of the original P pointer and then send a message to",
    "start": "1808240",
    "end": "1815519"
  },
  {
    "text": "overwrite the third bite of the the PB pointer and once again gain execution",
    "start": "1815519",
    "end": "1823519"
  },
  {
    "text": "control okay the sh method fails and the lock pointers don't exist it's possible to overwrite the GDI dispatch Handler",
    "start": "1825960",
    "end": "1834080"
  },
  {
    "text": "table this point is the location of a table of functions and can be overwritten in a similar manner as the",
    "start": "1834080",
    "end": "1839919"
  },
  {
    "text": "PB with one extra",
    "start": "1839919",
    "end": "1843600"
  },
  {
    "text": "step oops try that again okay the shell code is first written to",
    "start": "1846760",
    "end": "1853279"
  },
  {
    "text": "a non-writable location such as up in the PB and then a pointer to the Shell code is",
    "start": "1853279",
    "end": "1859399"
  },
  {
    "text": "placed into the Heap uh because we can't overwrite the GDI dispatch table bite by bite we need to use the same method that",
    "start": "1859399",
    "end": "1865440"
  },
  {
    "text": "we use to override the PB so the pointer to the Shell Code needs to be put into a location containing the lowest",
    "start": "1865440",
    "end": "1871120"
  },
  {
    "text": "significant word and then we overwrite the the GDI dispatch table in the process",
    "start": "1871120",
    "end": "1877080"
  },
  {
    "text": "environment block and it all jumps around the application will look up a",
    "start": "1877080",
    "end": "1882799"
  },
  {
    "text": "pointer from our table which is in the Heap and that points to our Shell Code the sh code is then executed",
    "start": "1882799",
    "end": "1890799"
  },
  {
    "text": "again now see runtime Terminators are very similar to the at Exit pointers on",
    "start": "1894880",
    "end": "1901440"
  },
  {
    "text": "Linux they called from the exit routine on normal or abnormal termination of an",
    "start": "1901440",
    "end": "1907399"
  },
  {
    "text": "application do exit calls in it term to process the Terminator the Terminator list calling each Terminator function in",
    "start": "1907399",
    "end": "1916159"
  },
  {
    "text": "turn so by overwriting a pointer in the termination table and then sending a WM close message or causing an exception it",
    "start": "1916159",
    "end": "1922799"
  },
  {
    "text": "is possible to have our Shell Code executed now as can be seen here these",
    "start": "1922799",
    "end": "1928240"
  },
  {
    "text": "are static location pointers that are passed to in a",
    "start": "1928240",
    "end": "1934039"
  },
  {
    "text": "term so by placing the address of our Shell Code at for example 7803 A14",
    "start": "1934039",
    "end": "1940240"
  },
  {
    "text": "C when the application closes or abnormally terminates it will be",
    "start": "1940240",
    "end": "1945559"
  },
  {
    "text": "run now talking local attacks for any of you people that do uh work on remote",
    "start": "1945559",
    "end": "1951399"
  },
  {
    "text": "exploits these can also be overwritten through with remote exploits if the target application then closes so it's a",
    "start": "1951399",
    "end": "1957799"
  },
  {
    "text": "new pointer or another pointer that can be used to gain execution control so to recap we know it's now",
    "start": "1957799",
    "end": "1964080"
  },
  {
    "text": "possible to place our Shell Code into a n location and we have explained how there",
    "start": "1964080",
    "end": "1969639"
  },
  {
    "text": "are multiple ways of having execution passed to our Shell Code either through callback attacks or arbitrary bite",
    "start": "1969639",
    "end": "1975840"
  },
  {
    "text": "writing locations uh",
    "start": "1975840",
    "end": "1979360"
  },
  {
    "text": "overrides now just like any of the numerous security vulnerabilities caused by the use of unsafe user Supply input",
    "start": "1984159",
    "end": "1990600"
  },
  {
    "text": "input pass through messages needs to be sanitized and check before it is used MSO 3045 proved that even messages",
    "start": "1990600",
    "end": "1998399"
  },
  {
    "text": "that are Marshall correctly may not be safe from exploitable you exploitable",
    "start": "1998399",
    "end": "2004240"
  },
  {
    "text": "condition the buffer overflow and us a 32d could be caused by sending a large directory name to a list box through the",
    "start": "2004240",
    "end": "2011360"
  },
  {
    "text": "LBD message sending this attack against the list box and utility manager allowed an",
    "start": "2011360",
    "end": "2017039"
  },
  {
    "text": "attacker to escalate the Privileges even though the data was mared",
    "start": "2017039",
    "end": "2022080"
  },
  {
    "text": "correctly now writing secure code from Microsoft includes a couple of paragraphs about some dangerous",
    "start": "2022919",
    "end": "2029760"
  },
  {
    "text": "messages it recommends that before calling any of the get text functions that you can see there you should check",
    "start": "2030279",
    "end": "2036080"
  },
  {
    "text": "the the length of the Tex string first now what makes these messages a bit different from the other messages is",
    "start": "2036080",
    "end": "2042120"
  },
  {
    "text": "that you can't pass sorry you can't pass a parameter that restricts the length of",
    "start": "2042120",
    "end": "2047760"
  },
  {
    "text": "the return data so if you've got a buffer that's only 100 bytes because you're only expecting your tool tip to",
    "start": "2047760",
    "end": "2053800"
  },
  {
    "text": "be 100 bytes long but an attacker has changed the the tool tip length string to 200 bytes and then you receive into",
    "start": "2053800",
    "end": "2061158"
  },
  {
    "text": "your buffer youve course got a classic buffer overflow now this is really good advice",
    "start": "2061159",
    "end": "2066960"
  },
  {
    "text": "but as you can see all these messages most of these messages messages reside above WM user and therefore they can",
    "start": "2066960",
    "end": "2073839"
  },
  {
    "text": "most likely be used for arbitrary bite writing anyway this process of requesting the",
    "start": "2073839",
    "end": "2080480"
  },
  {
    "text": "tix land allocating a buffer and then receiving the text could also open your",
    "start": "2080480",
    "end": "2085679"
  },
  {
    "text": "applications up to race condition me what happens if an attacker changes the data between the time of check and the",
    "start": "2085679",
    "end": "2090800"
  },
  {
    "text": "time of use classic buffer overflow",
    "start": "2090800",
    "end": "2095000"
  },
  {
    "text": "stuff now spy Plus+ that's included with Visual Studio is probably the tool that",
    "start": "2095879",
    "end": "2102400"
  },
  {
    "text": "we've used the most during our research it allows you to list all the windows that are open find out all the",
    "start": "2102400",
    "end": "2108359"
  },
  {
    "text": "threads processes that own them and it makes it very easy to discover the window handle of any window",
    "start": "2108359",
    "end": "2114640"
  },
  {
    "text": "and gives you some nice properties of those windows on Windows 2000 task manager",
    "start": "2114640",
    "end": "2121880"
  },
  {
    "text": "doesn't show you uh what use of the application is running under but if it's running under system process then you",
    "start": "2121880",
    "end": "2128160"
  },
  {
    "text": "won't be able it won't allow you to close it using the end process selection of course under Windows XP Task Manager",
    "start": "2128160",
    "end": "2134599"
  },
  {
    "text": "conveniently displays the US of the application is's running under and if you look at that list you can still see a lot of applications running under",
    "start": "2134599",
    "end": "2142359"
  },
  {
    "text": "system now once a Target application sorry a Target window has been acquired",
    "start": "2142359",
    "end": "2147599"
  },
  {
    "text": "a message fuzzer can be executed against it now message fuzzers work just like any other type of fuzzer it iterates",
    "start": "2147599",
    "end": "2155160"
  },
  {
    "text": "through a range of messages sending different types and different lengths of data now there are some messages that",
    "start": "2155160",
    "end": "2161359"
  },
  {
    "text": "you want to avoid um when if you create a fuzzer you of course you don't want to be sending WM close WM quit to the",
    "start": "2161359",
    "end": "2167280"
  },
  {
    "text": "Target application because it will just close and it won't receive any more of your messages now various other messages will",
    "start": "2167280",
    "end": "2174200"
  },
  {
    "text": "also cause uh exceptions local to the fuzzers as it's trying to Marshall invalid data pointers if you send a WM",
    "start": "2174200",
    "end": "2180240"
  },
  {
    "text": "text passing one as the parameter and it tries to Marshal that it will have an invalid access",
    "start": "2180240",
    "end": "2185720"
  },
  {
    "text": "violation after finding a message that causes some kind of error it may need to be reverse",
    "start": "2185720",
    "end": "2191640"
  },
  {
    "text": "engineered to determine how and if it can be",
    "start": "2191640",
    "end": "2195560"
  },
  {
    "text": "exploited now it's possible for applications to Define their own messages for communication and when some",
    "start": "2200280",
    "end": "2206119"
  },
  {
    "text": "applications do Define their own messages they may be opening themselves up for exploitation so application programmers",
    "start": "2206119",
    "end": "2212440"
  },
  {
    "text": "need to be aware of the issues arising from arbitrary messages being posted by other applications",
    "start": "2212440",
    "end": "2218079"
  },
  {
    "text": "users now the next three the next three slides",
    "start": "2218079",
    "end": "2223160"
  },
  {
    "text": "um discuss a problem we found on the windal 32 application so utility manager uh when",
    "start": "2223160",
    "end": "2231599"
  },
  {
    "text": "it displayed a tool tip would load windh help 32 as system so we ran a a message",
    "start": "2231599",
    "end": "2236680"
  },
  {
    "text": "fuzzer against windh help 32 and this is what we found so we kind of try and step through this okay so we",
    "start": "2236680",
    "end": "2244480"
  },
  {
    "text": "ran our fuzzer passing one as the parameter and that first of all calls an exception uh when wind help 32 tried to",
    "start": "2244480",
    "end": "2251240"
  },
  {
    "text": "reference memory at 04 so we created a block of ones up in the process environment",
    "start": "2251240",
    "end": "2257960"
  },
  {
    "text": "block and we pointed EDI to that block and then continued",
    "start": "2257960",
    "end": "2263640"
  },
  {
    "text": "execution this then led to another",
    "start": "2264359",
    "end": "2268318"
  },
  {
    "text": "exception uh where ESI was pointing to to 1111111 okay now what that told us",
    "start": "2269720",
    "end": "2275880"
  },
  {
    "text": "was that ESI had been loaded with a value from our data block so originally we were in control of EDI and we're now",
    "start": "2275880",
    "end": "2282760"
  },
  {
    "text": "in control of ESI so once again we pointed ESI to our data block of ones and continued",
    "start": "2282760",
    "end": "2290079"
  },
  {
    "text": "execution until we came to this first chance exception and as you can see here on the call stack EIP has been set to",
    "start": "2290079",
    "end": "2298640"
  },
  {
    "text": "11111 so if we look back on the call stack and we can see that what's happened is windout 32 has made a call",
    "start": "2298640",
    "end": "2307560"
  },
  {
    "text": "to uh a double word that is pulled out of a block of memory from ESI now",
    "start": "2307560",
    "end": "2313079"
  },
  {
    "text": "because we controlled ESI because we control EDI we now control",
    "start": "2313079",
    "end": "2319040"
  },
  {
    "text": "EIP so this allowed us to create a an exploit",
    "start": "2319400",
    "end": "2325200"
  },
  {
    "text": "structure that started off with a block of pointers pointing to the second block and the second block container block of",
    "start": "2325200",
    "end": "2331119"
  },
  {
    "text": "pointers pointing to our Shell Code we could then send the message passing the",
    "start": "2331119",
    "end": "2336520"
  },
  {
    "text": "address of our me of our structure which EDI would then be set to",
    "start": "2336520",
    "end": "2342480"
  },
  {
    "text": "the address of the poter one block ESI would be loaded with a a value from",
    "start": "2342480",
    "end": "2347680"
  },
  {
    "text": "there and so ESI would then point to the poter two block and of course that meant that ESI plus 36 would point to a",
    "start": "2347680",
    "end": "2354240"
  },
  {
    "text": "pointer to our Shell Code even though there are easier ways",
    "start": "2354240",
    "end": "2359640"
  },
  {
    "text": "to exploit windal 32 we thought this was kind of interesting as it was the exploitation of an undocumented message",
    "start": "2359640",
    "end": "2366000"
  },
  {
    "text": "or an appliation or a custom application",
    "start": "2366000",
    "end": "2370200"
  },
  {
    "text": "message so another thing that programmers need to be aware of is the default Behavior some controls",
    "start": "2373280",
    "end": "2380359"
  },
  {
    "text": "exhibit for example controls such as the list box and combo box will by default accept an lb dur or a CB dur message to",
    "start": "2380359",
    "end": "2387280"
  },
  {
    "text": "load a directory listing the attack you can see here uh is this exploit ATT executed",
    "start": "2387280",
    "end": "2395280"
  },
  {
    "text": "against the list box within U manager so what what this does is it allows any user to send this message to",
    "start": "2395280",
    "end": "2403079"
  },
  {
    "text": "utility manager and it will display a directory listing red as",
    "start": "2403079",
    "end": "2408640"
  },
  {
    "text": "system system apps that show an about screen with a hyperlink they may be vulnerable to then loading a browser",
    "start": "2409880",
    "end": "2415200"
  },
  {
    "text": "with system rights this could lead to execution of command exe with increased",
    "start": "2415200",
    "end": "2421160"
  },
  {
    "text": "privileges this is very similar to system applications that invoke the default help Handler",
    "start": "2421440",
    "end": "2427319"
  },
  {
    "text": "the help viewer is loaded a system and since the viewer contains an ie",
    "start": "2427319",
    "end": "2432640"
  },
  {
    "text": "window uh a user can simply browse the local drive and execute command exe once",
    "start": "2432640",
    "end": "2438000"
  },
  {
    "text": "again with system rights any system application that allows file loading saving through the",
    "start": "2438000",
    "end": "2443920"
  },
  {
    "text": "common file dialogue is of course open themselves up to a user that's selecting open withth",
    "start": "2443920",
    "end": "2449880"
  },
  {
    "text": "command exe and once again obtaining a command a system level command",
    "start": "2449880",
    "end": "2455319"
  },
  {
    "text": "prompt we tested one application recently that tried to avoid this problem by using the",
    "start": "2455319",
    "end": "2461760"
  },
  {
    "text": "older file open file tile file dialog type dialogue",
    "start": "2461760",
    "end": "2467160"
  },
  {
    "text": "box okay we thought this was quite a good theme because these these dialogue boxes don't allow you to right Mouse",
    "start": "2467160",
    "end": "2472680"
  },
  {
    "text": "click and use the open with context menus what they do however allow you to",
    "start": "2472680",
    "end": "2478640"
  },
  {
    "text": "do is Right Mouse click select what's this and of course that tool tip is loaded by windh help 32 so windh help 32",
    "start": "2478640",
    "end": "2485960"
  },
  {
    "text": "is loed a system and as we just saw previously windal 32 was exported World by",
    "start": "2485960",
    "end": "2491880"
  },
  {
    "text": "itself now Caesar cudio has recently publicized a couple of exploits that exploit this scenario using the WM",
    "start": "2491880",
    "end": "2501079"
  },
  {
    "text": "command help message it's very simple with the you send a WM command help",
    "start": "2501079",
    "end": "2506720"
  },
  {
    "text": "message to this dialogue here wind help 32 will will pop up and say we can't",
    "start": "2506720",
    "end": "2512160"
  },
  {
    "text": "find the help file you specified would you like to look for it you go yes you're browsing the drive as per here",
    "start": "2512160",
    "end": "2518839"
  },
  {
    "text": "select Comm open with command exe you once again got a command level uh system level",
    "start": "2518839",
    "end": "2525839"
  },
  {
    "text": "shell so when we mention shed attacks we generally Envision these privilege escalation attacks and and while they",
    "start": "2536200",
    "end": "2541760"
  },
  {
    "text": "are privileged escalation they are only local privilege elevation attacks um they cannot be run through the iwam",
    "start": "2541760",
    "end": "2549319"
  },
  {
    "text": "user account so if someone exploits your I server they cannot use one of these attacks to increase their",
    "start": "2549319",
    "end": "2555599"
  },
  {
    "text": "privileges for an attacker to exploit these attacks they must either be sitting at the machine or have a remote",
    "start": "2555599",
    "end": "2560720"
  },
  {
    "text": "session such as Citrix remot desktop based on this if you think for a",
    "start": "2560720",
    "end": "2567119"
  },
  {
    "text": "moment about what other type of attacks may be possible there are still many thick clients in the in in use",
    "start": "2567119",
    "end": "2574119"
  },
  {
    "text": "today uh mainly around the areas of like accounting packages content customer",
    "start": "2574119",
    "end": "2579160"
  },
  {
    "text": "management Etc so I didn't have time to actually find any exportable examples but what",
    "start": "2579160",
    "end": "2585319"
  },
  {
    "text": "we've got here is one I created now if a thick client application was",
    "start": "2585319",
    "end": "2590640"
  },
  {
    "text": "programmed in this manner that it uh it took the user that was selected asked",
    "start": "2590640",
    "end": "2595839"
  },
  {
    "text": "for their password and then accepted the password and then once again took the user from",
    "start": "2595839",
    "end": "2602200"
  },
  {
    "text": "the list and logged you in as that user if a if a user was able to change that",
    "start": "2602200",
    "end": "2608480"
  },
  {
    "text": "item in between that time that would of course then be logged on with the the Privileges of the the higher level",
    "start": "2608480",
    "end": "2615359"
  },
  {
    "text": "account so if you write fix line applications at all you need to be aware that these type of attacks exist as",
    "start": "2615359",
    "end": "2623240"
  },
  {
    "text": "well so the future of Windows guy attacks or shatter",
    "start": "2627599",
    "end": "2634040"
  },
  {
    "text": "attacks as the research furthers into the area of guey based attacks the scope will",
    "start": "2634040",
    "end": "2640599"
  },
  {
    "text": "widen attacks will become public that no longer depend on these controls and messages exploits will focus on other",
    "start": "2640599",
    "end": "2647599"
  },
  {
    "text": "API calls that are used to manipulate Dey data and window information we have done some research",
    "start": "2647599",
    "end": "2654160"
  },
  {
    "text": "into this area with the aim of trying to discover if an attacker can use a generic Shadow attack to jump from the",
    "start": "2654160",
    "end": "2659200"
  },
  {
    "text": "iwam user account to system currently though we are unaware of any vulnerabilities allowing for",
    "start": "2659200",
    "end": "2665240"
  },
  {
    "text": "applications to this wind station desktop boundaries although IAM user can start",
    "start": "2665240",
    "end": "2672400"
  },
  {
    "text": " based applications it does not have any access to the interactive system processes as",
    "start": "2672400",
    "end": "2678359"
  },
  {
    "text": "these all display on wind station zero but as long as the are accessible Windows running under a higher context",
    "start": "2678359",
    "end": "2684640"
  },
  {
    "text": "there is the possibility of attack now as any parent",
    "start": "2684640",
    "end": "2691920"
  },
  {
    "text": "knows children can be a pain and as any child know parents can be controlling so what happens when a",
    "start": "2691920",
    "end": "2698640"
  },
  {
    "text": "child no longer trust its parent what we have here is an",
    "start": "2698640",
    "end": "2704880"
  },
  {
    "text": "example of an API call that affects guey data that could be used in an insecure",
    "start": "2704880",
    "end": "2710720"
  },
  {
    "text": "way now msdn states that an application can use the set parent function to set the parent window of a popup overlap or",
    "start": "2710720",
    "end": "2717200"
  },
  {
    "text": "child window the new parent and the child window must belong to the same",
    "start": "2717200",
    "end": "2723400"
  },
  {
    "text": "application no now so far we've been unable to exploit",
    "start": "2723520",
    "end": "2729200"
  },
  {
    "text": "this vulnerability in a real world situation but that does not mean that it is not exploitable under certain",
    "start": "2729200",
    "end": "2734640"
  },
  {
    "text": "conditions so we've got here a theoretical attack okay what happens if the exploit becomes the parent of a of a",
    "start": "2734640",
    "end": "2741000"
  },
  {
    "text": "window or control the target application calls get parent to receive its parent",
    "start": "2741000",
    "end": "2747480"
  },
  {
    "text": "and then it asks its parent for some information so if an attacking application can become the parent of a",
    "start": "2747480",
    "end": "2754880"
  },
  {
    "text": "control it can then pass back to the the target corrupt data that may cause",
    "start": "2754880",
    "end": "2760240"
  },
  {
    "text": "exploitable situations now we did say we have been unable to exploit this in a real world",
    "start": "2760240",
    "end": "2766040"
  },
  {
    "text": "situation against system applications we have however been able to exploit this against non-system applications but",
    "start": "2766040",
    "end": "2771960"
  },
  {
    "text": "there's not much point in exploiting an application you already own you're only going to become",
    "start": "2771960",
    "end": "2777000"
  },
  {
    "text": "yourself so this really affects MDI Windows MDI applications owner drawing",
    "start": "2777119",
    "end": "2784800"
  },
  {
    "text": "controls but as research continues it may come out that there are um situations where this API can be",
    "start": "2784800",
    "end": "2793520"
  },
  {
    "text": "used to mon again gain system controls system",
    "start": "2793520",
    "end": "2799240"
  },
  {
    "text": "access every window can store data associated with its application if required the get prop and set prop API",
    "start": "2806680",
    "end": "2813599"
  },
  {
    "text": "calls can be used to manipulate this information now a window property is usually a",
    "start": "2813599",
    "end": "2819040"
  },
  {
    "text": "pointer to some window specific data but it can be any 32-bit",
    "start": "2819040",
    "end": "2824160"
  },
  {
    "text": "value for example an MDI application the programmer might store a unique ID for",
    "start": "2824160",
    "end": "2829240"
  },
  {
    "text": "each window that corresponds to a record in a database the problem once again is that",
    "start": "2829240",
    "end": "2835559"
  },
  {
    "text": "there are no restrictions on retrieving or setting these values so any application can set the window property",
    "start": "2835559",
    "end": "2840880"
  },
  {
    "text": "of another application's window now I like to set par vulnerability we've been unable to",
    "start": "2840880",
    "end": "2847720"
  },
  {
    "text": "exploit any of the core window services but the first third party application we tested was found vulnerable to",
    "start": "2847720",
    "end": "2855040"
  },
  {
    "text": "this MFC automatically subclasses all non- MFC derived Windows this is to handle specific",
    "start": "2855040",
    "end": "2862160"
  },
  {
    "text": "activation issues um and what it does is it stores the original window procedure address in a window",
    "start": "2862160",
    "end": "2869040"
  },
  {
    "text": "property now because it's stored in the property we can set this uh this address to anything we like and this address is",
    "start": "2869040",
    "end": "2876119"
  },
  {
    "text": "then called in turn when some when the subclass window procedure is called so because we can modify this",
    "start": "2876119",
    "end": "2883280"
  },
  {
    "text": "address we can once again gain execution",
    "start": "2883280",
    "end": "2887960"
  },
  {
    "text": "control so there have been various discussions around the use of filters to prevent malicious messages from being",
    "start": "2894079",
    "end": "2899359"
  },
  {
    "text": "processed either through disallowing no and unsafe messages or only allowing no and safe",
    "start": "2899359",
    "end": "2904640"
  },
  {
    "text": "messages how do we know which messages are safe well one of the main problems of",
    "start": "2904640",
    "end": "2910440"
  },
  {
    "text": "this this approach is that we don't know which messages are safe and as we have",
    "start": "2910440",
    "end": "2915720"
  },
  {
    "text": "shown it's not just messages that can be exploited so to prevent privilege",
    "start": "2915720",
    "end": "2920880"
  },
  {
    "text": "escalation attacks no window should be created under the system account while this helps the system",
    "start": "2920880",
    "end": "2927520"
  },
  {
    "text": "application will still have created a gooey thread and can still possibly be attacked through messages such as post",
    "start": "2927520",
    "end": "2932920"
  },
  {
    "text": "post thread message when dropping rights the Creator window",
    "start": "2932920",
    "end": "2938079"
  },
  {
    "text": "it is not enough to just impersonate the currently logged on user a Shell Code can then call revert to self to become system once",
    "start": "2938079",
    "end": "2945480"
  },
  {
    "text": "again if your application uses its own messages for communication care needs to be taken to ensure that the message has",
    "start": "2947240",
    "end": "2954839"
  },
  {
    "text": "passed with valid parameters user input which is what messages contain should not be blindly",
    "start": "2954839",
    "end": "2962520"
  },
  {
    "text": "trusted so if a system service must have an interactive",
    "start": "2964520",
    "end": "2970200"
  },
  {
    "text": "interface the interface should be started under a lower user account such as the logged on user and communication",
    "start": "2970440",
    "end": "2976359"
  },
  {
    "text": "should be done through to the from the service to the guy using RPC name pipes or Sockers this is all documented in",
    "start": "2976359",
    "end": "2983240"
  },
  {
    "text": "msdn under some Michael Howard's Pages it is possible to prevent any service from loading with interactive abilities",
    "start": "2983240",
    "end": "2989720"
  },
  {
    "text": "by setting the no Interactive Services indry",
    "start": "2989720",
    "end": "2997520"
  },
  {
    "text": "setting doing this though will cause a lot of services to not function correctly and in some cases will cause",
    "start": "2997520",
    "end": "3003760"
  },
  {
    "text": "an error box to be displayed loaded with system privileges so above all awareness is the",
    "start": "3003760",
    "end": "3010160"
  },
  {
    "text": "key and by knowing what is possible it allows developers to realize the problems and program their applications",
    "start": "3010160",
    "end": "3015720"
  },
  {
    "text": "with this in mind in reality Windows messages and goey controled data are just another",
    "start": "3015720",
    "end": "3021839"
  },
  {
    "text": "attack Avenue that needs to be handled safely similar to input receive through Network packets or",
    "start": "3021839",
    "end": "3028000"
  },
  {
    "text": "files hopefully this presentation has helped you understand the threat and we'll give you some of the information",
    "start": "3028000",
    "end": "3033359"
  },
  {
    "text": "required to test your applications so that they can be safe from Windows goey",
    "start": "3033359",
    "end": "3038520"
  },
  {
    "text": "attacks and either I talk very fast or my friends watch us slow but um any",
    "start": "3038520",
    "end": "3046040"
  },
  {
    "text": "questions okay the Mr Jing fuzer um is part of the blackhead distribution so it can be",
    "start": "3051720",
    "end": "3057000"
  },
  {
    "text": "downloaded uh what it does you give it a Target handle of a window and it basically runs through all the you know",
    "start": "3057000",
    "end": "3064200"
  },
  {
    "text": "just uh increments and runs and sends every single message possible to the Target window passing I think I've got",
    "start": "3064200",
    "end": "3071119"
  },
  {
    "text": "in there maybe eight different types of uh data it'll pass like 0 one one",
    "start": "3071119",
    "end": "3077400"
  },
  {
    "text": "0011 a pointed to a large text block",
    "start": "3077400",
    "end": "3082720"
  },
  {
    "text": "Etc any other questions",
    "start": "3083079",
    "end": "3087359"
  },
  {
    "text": "that process M yes",
    "start": "3089400",
    "end": "3093240"
  },
  {
    "text": "yeah uh no but I haven't looked but uh yes it's quite possible so that process",
    "start": "3096280",
    "end": "3101520"
  },
  {
    "text": "map te is um read execute so when we first when we first saw it we thought oh",
    "start": "3101520",
    "end": "3107079"
  },
  {
    "text": "this is great we can start writing data that other go threads will read but",
    "start": "3107079",
    "end": "3113920"
  },
  {
    "text": "sorry oh sorry the question was uh inside the process mapped he if I'd ever seen things like passwords and other",
    "start": "3113920",
    "end": "3120480"
  },
  {
    "text": "sensitive",
    "start": "3120480",
    "end": "3122920"
  },
  {
    "text": "data soorry what was that",
    "start": "3127280",
    "end": "3134720"
  },
  {
    "text": "yeah right okay so the question was does the process map Heap span the desktop boundaries no the process map Heap as",
    "start": "3138880",
    "end": "3145000"
  },
  {
    "text": "far as aware is for the desktop that the application is running",
    "start": "3145000",
    "end": "3151960"
  },
  {
    "text": "on no more questions one more",
    "start": "3152559",
    "end": "3157160"
  },
  {
    "text": "yep sorry could you say that",
    "start": "3174240",
    "end": "3181720"
  },
  {
    "text": "again right right right right so the question was you know are we doing any Research into persistent attacks against",
    "start": "3190000",
    "end": "3196280"
  },
  {
    "text": "applications uh no but uh all you're talking about is you're running some sort of Trojan on someone's computer and",
    "start": "3196280",
    "end": "3202839"
  },
  {
    "text": "it constantly polls looking for the title of a vulnerable application uh so",
    "start": "3202839",
    "end": "3208480"
  },
  {
    "text": "for example um an attack against one of the personal firewalls so that when the user opens his firewall the attack the",
    "start": "3208480",
    "end": "3215480"
  },
  {
    "text": "attack launches no but it's completely possible any other",
    "start": "3215480",
    "end": "3221240"
  },
  {
    "text": "questions no okay well I hope you enjoyed",
    "start": "3221240",
    "end": "3225559"
  },
  {
    "text": "that",
    "start": "3234160",
    "end": "3237160"
  },
  {
    "text": "e",
    "start": "3264079",
    "end": "3267079"
  },
  {
    "text": "e",
    "start": "3294079",
    "end": "3297079"
  },
  {
    "text": "e",
    "start": "3324000",
    "end": "3327000"
  },
  {
    "text": "e",
    "start": "3354000",
    "end": "3357000"
  },
  {
    "text": "e",
    "start": "3383920",
    "end": "3386920"
  },
  {
    "text": "e",
    "start": "3413880",
    "end": "3416880"
  },
  {
    "text": "e",
    "start": "3443799",
    "end": "3446799"
  },
  {
    "text": "e",
    "start": "3473799",
    "end": "3476799"
  },
  {
    "text": "e",
    "start": "3503720",
    "end": "3506720"
  },
  {
    "text": "e",
    "start": "3533720",
    "end": "3536720"
  },
  {
    "text": "e",
    "start": "3563640",
    "end": "3566640"
  },
  {
    "text": "e",
    "start": "3593640",
    "end": "3596640"
  },
  {
    "text": "e",
    "start": "3623559",
    "end": "3626559"
  },
  {
    "text": "e",
    "start": "3653520",
    "end": "3656520"
  },
  {
    "text": "e",
    "start": "3683440",
    "end": "3686440"
  },
  {
    "text": "e",
    "start": "3713440",
    "end": "3716440"
  }
]