[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "we have contemporary automatic program analysis with Julian please",
    "start": "80",
    "end": "6838"
  },
  {
    "text": "enjoy thank you it's an honor to speak here at black hat today um I hope you",
    "start": "11360",
    "end": "16720"
  },
  {
    "text": "guys enjoy the talk um so I'm Julian Cohen um aside",
    "start": "16720",
    "end": "22480"
  },
  {
    "start": "19000",
    "end": "101000"
  },
  {
    "text": "from my full-time job doing application security at a large University I uh teach a course at NYU I help run an",
    "start": "22480",
    "end": "29320"
  },
  {
    "text": "event called cyber security Awareness Week at NYU uh I'm an adviser to the",
    "start": "29320",
    "end": "34440"
  },
  {
    "text": "Isis lab which is an offensive research lab at NYU uh I helped run a CTF",
    "start": "34440",
    "end": "39520"
  },
  {
    "text": "competition called Ghost in the Shell Code and I'm a moderator for R netc and R vrd and uh I'm part of a group called",
    "start": "39520",
    "end": "47559"
  },
  {
    "text": "NC which is the New York security meet up which is the New York security uh City SEC",
    "start": "47559",
    "end": "52960"
  },
  {
    "text": "Meetup um just really quickly I want to tell you about this event called seesaw that we run every year I think it's",
    "start": "52960",
    "end": "59680"
  },
  {
    "text": "really special and not a lot of people know about it um it's a student run event at NYU poly it features six",
    "start": "59680",
    "end": "66960"
  },
  {
    "text": "competitions where uh we have over 10,000 uh people from all over the world",
    "start": "66960",
    "end": "72119"
  },
  {
    "text": "compete in a variety of different competitions we have a cyber secur cyber security focused career fair where um",
    "start": "72119",
    "end": "80079"
  },
  {
    "text": "these really great companies come to hire the the finalists from all these competition we have really great Talent",
    "start": "80079",
    "end": "85600"
  },
  {
    "text": "Plus really great uh organizations hiring it uh it's an amazing event we",
    "start": "85600",
    "end": "91040"
  },
  {
    "text": "have a conference this year it's focused on security Automation and for no other reason it's a great excuse to come to",
    "start": "91040",
    "end": "97360"
  },
  {
    "text": "New York City um",
    "start": "97360",
    "end": "102880"
  },
  {
    "start": "101000",
    "end": "188000"
  },
  {
    "text": "so uh program analysis um I always say the first thing you have to do before you have a meaningful conversation about",
    "start": "102880",
    "end": "109119"
  },
  {
    "text": "something is Define what you're talking about so here's some definitions um but",
    "start": "109119",
    "end": "114759"
  },
  {
    "text": "um when I say program analysis what I really mean is just code that analyzes other code and um we're going to talk",
    "start": "114759",
    "end": "122039"
  },
  {
    "text": "about this a lot and this can mean like a whole different a whole lot of things",
    "start": "122039",
    "end": "127360"
  },
  {
    "text": "um and I have this little graph talk which uh shows",
    "start": "127360",
    "end": "132720"
  },
  {
    "text": "um some of the things we're going to be talking about today and where they fall on this",
    "start": "132720",
    "end": "139000"
  },
  {
    "text": "um in between static and dynamic and manual and",
    "start": "139000",
    "end": "144239"
  },
  {
    "text": "automatic um so unfortunately I'm going to have to be am ambiguous",
    "start": "144239",
    "end": "150400"
  },
  {
    "text": "at some parts during this talk and I do this for two reasons um the first reason",
    "start": "150400",
    "end": "155519"
  },
  {
    "text": "is I don't want to give you I don't want to impart too many of my ideas about program analysis into you if this is",
    "start": "155519",
    "end": "162599"
  },
  {
    "text": "like the first time you're hearing about program analysis if you're not famili familiar with program analysis um I",
    "start": "162599",
    "end": "168200"
  },
  {
    "text": "don't want my beliefs to be imparted on you so I will um I'll be ambiguous when",
    "start": "168200",
    "end": "174040"
  },
  {
    "text": "I think being explicit will be detrimental to your thought experiments and I'll be ambiguous when I feel that being explicit would be giving too much",
    "start": "174040",
    "end": "180879"
  },
  {
    "text": "information to the bad guys um so feel free to use your imagination throughout the whole",
    "start": "180879",
    "end": "187400"
  },
  {
    "text": "presentation um so we're talking about using program",
    "start": "187400",
    "end": "193360"
  },
  {
    "start": "188000",
    "end": "275000"
  },
  {
    "text": "analysis to Aid in vulnerability Discovery but vulnerability Discovery is part of um a much bigger process which",
    "start": "193360",
    "end": "199480"
  },
  {
    "text": "we call vulnerability research and I like to break down vulnerability Research into six steps um the first",
    "start": "199480",
    "end": "205280"
  },
  {
    "text": "step is uh reconnaissance so after a Target is picked some Recon is done um looking for information like how the",
    "start": "205280",
    "end": "212120"
  },
  {
    "text": "target is built how does it operate where are potential entry points or weaknesses um then we start looking for",
    "start": "212120",
    "end": "218799"
  },
  {
    "text": "vulnerabilities and that's what we're going to focus on today how we find vulnerabilities um using program",
    "start": "218799",
    "end": "223920"
  },
  {
    "text": "analysis after vulnerability discovered it's typically analyzed um so we're looking for what are the properties of",
    "start": "223920",
    "end": "230080"
  },
  {
    "text": "the vulnerability how long will it take to weaponize the vulnerability how easily fingerprintable is it how",
    "start": "230080",
    "end": "236480"
  },
  {
    "text": "difficult is it to discover and Patch um then an exploit is written uh this uh the development SE",
    "start": "236480",
    "end": "244200"
  },
  {
    "text": "the development stage can also include uh shell code and malware development um",
    "start": "244200",
    "end": "250959"
  },
  {
    "text": "then we deliver the exploit to the Target this step includes everything needed to get code execution on the",
    "start": "250959",
    "end": "256280"
  },
  {
    "text": "target it can also include a fishing email or Watering Hole attack to make sure the exploit lands on the Target and",
    "start": "256280",
    "end": "262440"
  },
  {
    "text": "then the final step post exploitation is when some goal is extracted from the target this can include command and",
    "start": "262440",
    "end": "268520"
  },
  {
    "text": "control lateral movement data exfiltration all this kind of stuff",
    "start": "268520",
    "end": "274560"
  },
  {
    "text": "um so vulnerability discovery which is what we're going to be talking about today uh",
    "start": "274560",
    "end": "281080"
  },
  {
    "start": "275000",
    "end": "344000"
  },
  {
    "text": "there are two main methodologies for vulnerability Discovery manual auditing which is auditing reading code until",
    "start": "281080",
    "end": "287080"
  },
  {
    "text": "vulnerability is found um just reading like either uh",
    "start": "287080",
    "end": "292560"
  },
  {
    "text": "source code or native code or some kind of code until you find a vulnerability or automatic testing which is uh",
    "start": "292560",
    "end": "299280"
  },
  {
    "text": "typically refer to as fuzzing uh until invulnerability is found so you have some kind of automated tool to run the",
    "start": "299280",
    "end": "305280"
  },
  {
    "text": "program with either different inputs or different environments and um you wait till it crashes or you notice some other",
    "start": "305280",
    "end": "312440"
  },
  {
    "text": "external behavior that lets you know that a vulnerability has occurred um but I always like to say the",
    "start": "312440",
    "end": "320000"
  },
  {
    "text": "bet a best approach is a combination of these two you want to let your manual findings feed your automatic testing you",
    "start": "320000",
    "end": "325360"
  },
  {
    "text": "want to let your automatic findings feed your manual testing for example if you find a fun fun that looks a little",
    "start": "325360",
    "end": "330680"
  },
  {
    "text": "complicated while you're manually auditing you want to make sure that your fuzzer can reach that function and if your automatic tools output a false",
    "start": "330680",
    "end": "337759"
  },
  {
    "text": "positive that looks interesting you want to make sure you go and look at that manually to see if there's any other issues",
    "start": "337759",
    "end": "344639"
  },
  {
    "start": "344000",
    "end": "376000"
  },
  {
    "text": "there um so if your job is to find bugs you",
    "start": "344639",
    "end": "350039"
  },
  {
    "text": "probably already use some amount of program analysis um my goal in this",
    "start": "350039",
    "end": "355280"
  },
  {
    "text": "presentation is I want to show you some really simple tricks that you can use to find interesting vulnerability and I want to introduce you to some",
    "start": "355280",
    "end": "361360"
  },
  {
    "text": "program analysis tools techniques methods that you can uh use to make informed decisions um about finding bugs",
    "start": "361360",
    "end": "369919"
  },
  {
    "text": "uh in your organization so let's jump",
    "start": "369919",
    "end": "376160"
  },
  {
    "start": "376000",
    "end": "469000"
  },
  {
    "text": "in um so we're going to start off with medic character injection vulnerabilities um these are really easy",
    "start": "376400",
    "end": "382960"
  },
  {
    "text": "to find in exploit um they're so easy to find finding a couple of them wasn't",
    "start": "382960",
    "end": "388160"
  },
  {
    "text": "good enough uh so uh the first tool we're going to talk",
    "start": "388160",
    "end": "393199"
  },
  {
    "text": "about is a tool called GitHub G.P which I wrote a couple weeks ago and it's a very simple script that just automates",
    "start": "393199",
    "end": "399599"
  },
  {
    "text": "queries to the GitHub code search um the user provides functions input and",
    "start": "399599",
    "end": "404680"
  },
  {
    "text": "security keywords and the script creates queries uh based on those keywords and",
    "start": "404680",
    "end": "412319"
  },
  {
    "text": "sends them get sends them to GitHub uh receives the results and then outputs",
    "start": "412319",
    "end": "417400"
  },
  {
    "text": "how many vulnerabilities each qu each query found and gives you a link to go view them on",
    "start": "417400",
    "end": "424080"
  },
  {
    "text": "GitHub um everyone's seen this kind of thing you know you type RSA private key into",
    "start": "424080",
    "end": "429800"
  },
  {
    "text": "the GitHub search and RSA private Keys pop out because users committed them without thinking um so the reason why we",
    "start": "429800",
    "end": "438560"
  },
  {
    "text": "use the script instead of doing it manually is the gr GitHub code search um",
    "start": "438560",
    "end": "444960"
  },
  {
    "text": "only allows you to have a certain number of modifiers per query so if we build this this really long query string that",
    "start": "444960",
    "end": "451120"
  },
  {
    "text": "we want to send to GitHub code search it'll just return saying um your query is too long or your query has too many",
    "start": "451120",
    "end": "459000"
  },
  {
    "text": "modifiers um so uh this has a low this script has",
    "start": "459000",
    "end": "465080"
  },
  {
    "text": "a low false positive rate because we take into account sanitizer keywords and you'll see what I mean in just a second",
    "start": "465080",
    "end": "470759"
  },
  {
    "start": "469000",
    "end": "601000"
  },
  {
    "text": "um so this is what it looks like when you run the command um when you run the",
    "start": "470759",
    "end": "475879"
  },
  {
    "text": "script you specify a language some functions some sources and sanitizers",
    "start": "475879",
    "end": "483720"
  },
  {
    "text": "so here we're finding command injection vulnerabilities in PHP um there are like",
    "start": "483720",
    "end": "489360"
  },
  {
    "text": "hundreds of ways to execute commands shell commands and PHP but for this this exercise they just opened up one of the",
    "start": "489360",
    "end": "495520"
  },
  {
    "text": "PHP documentation pages and just wrote down like one of the it was like",
    "start": "495520",
    "end": "502120"
  },
  {
    "text": "a you know how to execute shell commands in PHP one of the documentation pages and I just picked all the functions that",
    "start": "502120",
    "end": "508080"
  },
  {
    "text": "they listed put them here pass through shell exac system and Po openen and I picked the obvious sources of input",
    "start": "508080",
    "end": "514479"
  },
  {
    "text": "request the the Global's request get and post and I picked the two sanitization",
    "start": "514479",
    "end": "520120"
  },
  {
    "text": "functions that were also listed on that documentation page which were shell Escape command and shell Escape",
    "start": "520120",
    "end": "526279"
  },
  {
    "text": "AR and then we have this um you know we",
    "start": "526279",
    "end": "532240"
  },
  {
    "text": "have this command that we can run um so this resulted in a Million a million",
    "start": "532240",
    "end": "539880"
  },
  {
    "text": "and a half vulnerabilities um and we know that there's a low false positive rate here because um it's not going to",
    "start": "539880",
    "end": "547640"
  },
  {
    "text": "github's not going to return any results that have shell Escape shell command or Escape shell ARG in the entire source",
    "start": "547640",
    "end": "555040"
  },
  {
    "text": "file that it's searching so all of these results don't have any",
    "start": "555040",
    "end": "561040"
  },
  {
    "text": "sanitization at all in the whole file and we can see this just a sample of some of the",
    "start": "561040",
    "end": "567440"
  },
  {
    "text": "results all obvious um command injection um so here we do the same",
    "start": "567440",
    "end": "574560"
  },
  {
    "text": "thing but we're looking for cross-site scripting in Java um I did the same thing I opened up a documentation page",
    "start": "574560",
    "end": "581000"
  },
  {
    "text": "like one of the request objects and just wrote I just typed in the functions and the sources and the sanitizers that were",
    "start": "581000",
    "end": "587399"
  },
  {
    "text": "listed in that request object and we found 3/4 of a million",
    "start": "587399",
    "end": "593279"
  },
  {
    "text": "vulnerabilities and you can see same thing uh clear crossy script",
    "start": "593279",
    "end": "601200"
  },
  {
    "start": "601000",
    "end": "749000"
  },
  {
    "text": "vulnerabilities um so the next thing I want to talk about is type confusion vulnerabilities um type confusion",
    "start": "601200",
    "end": "607360"
  },
  {
    "text": "vulnerabilities look uh different in different languages but in CN C++ they usually look like this um so what we",
    "start": "607360",
    "end": "614760"
  },
  {
    "text": "have here is a union which is a language construct in C that says that everything",
    "start": "614760",
    "end": "620079"
  },
  {
    "text": "inside of the Union should be stored at the same place in memory so that doesn't mean near each other memory it means in",
    "start": "620079",
    "end": "626360"
  },
  {
    "text": "the same place so an integer and a chart pointer on 30 bit systems are both four bytes long they're actually going to be",
    "start": "626360",
    "end": "631600"
  },
  {
    "text": "stored in the same location in the same four bytes of memory so if we read from the network into",
    "start": "631600",
    "end": "639680"
  },
  {
    "text": "number four bytes and we treat that that's treated as an integer and then we",
    "start": "639680",
    "end": "645120"
  },
  {
    "text": "then reference buffer as a pointer they're going to be the same memory so",
    "start": "645120",
    "end": "651760"
  },
  {
    "text": "the four bytes that we read into number are going to be used as an address to uh",
    "start": "651760",
    "end": "656959"
  },
  {
    "text": "a string in stir end copy and we're going to reading user input into an arbitrary location",
    "start": "656959",
    "end": "663560"
  },
  {
    "text": "for whatever length buffer is sized",
    "start": "663560",
    "end": "669320"
  },
  {
    "text": "um does that make sense okay so we have an arbitrary um we have an arbitrary",
    "start": "669320",
    "end": "676800"
  },
  {
    "text": "right vulnerability here because of the type confusion between the integer and the CH",
    "start": "676800",
    "end": "681959"
  },
  {
    "text": "pointer um this is a vulnerability so this is a",
    "start": "681959",
    "end": "687120"
  },
  {
    "text": "a type confusion vulnerability that Chris rol um one of the guest lectures from my course at NYU found during a",
    "start": "687120",
    "end": "692560"
  },
  {
    "text": "manual audit and here we have um just using grep uh in this in the",
    "start": "692560",
    "end": "701600"
  },
  {
    "text": "file where the vulnerability was found and we can immediately see that it's easy to find and we can also see that",
    "start": "701600",
    "end": "707720"
  },
  {
    "text": "there's probably a problem here because um there's a",
    "start": "707720",
    "end": "713399"
  },
  {
    "text": "pointer uh listed in the union which you want to be careful about um it's it's",
    "start": "713399",
    "end": "718600"
  },
  {
    "text": "easy to find this bug because of the Union construct",
    "start": "718600",
    "end": "723720"
  },
  {
    "text": "um and in this example I just search one file but we can search an entire codebase and look at all the all the",
    "start": "723720",
    "end": "730519"
  },
  {
    "text": "unions that the developers used and see if there are any vulnerabilities in there so using GP has a very high false",
    "start": "730519",
    "end": "736959"
  },
  {
    "text": "positive rate uh it's only effective when you know exactly what you're looking for like a type confusion",
    "start": "736959",
    "end": "742720"
  },
  {
    "text": "vulnerability um but it still can be useful and this is just one example of showing how using grip can be useful",
    "start": "742720",
    "end": "750880"
  },
  {
    "start": "749000",
    "end": "814000"
  },
  {
    "text": "um the next thing I want to talk about is implicit type conversion vulnerabilities uh this is a pretty common thing you see in C and C++",
    "start": "750920",
    "end": "759199"
  },
  {
    "text": "um so here we we do the same thing we read four bytes into size from the user",
    "start": "759199",
    "end": "765399"
  },
  {
    "text": "and um we test size against a constant so if size is less than 100 um we're",
    "start": "765399",
    "end": "771680"
  },
  {
    "text": "going to stir copy into buffer and buffer is 128 so this looks safe right",
    "start": "771680",
    "end": "777880"
  },
  {
    "text": "but the problem is is size is an in is a signed integer 100 is a signed integer",
    "start": "777880",
    "end": "784519"
  },
  {
    "text": "but the third parameter to stir end copy is an unsigned integer so if we pass in",
    "start": "784519",
    "end": "790880"
  },
  {
    "text": "a very large integer if the user passes a very large integer into uh over the",
    "start": "790880",
    "end": "797279"
  },
  {
    "text": "network the signed integer will be casted to an unsigned integer and we're",
    "start": "797279",
    "end": "802880"
  },
  {
    "text": "going to have a very large copy into buffer causing a buffer overflow",
    "start": "802880",
    "end": "809440"
  },
  {
    "text": "that make sense okay so turns out this is also really",
    "start": "809440",
    "end": "816440"
  },
  {
    "start": "814000",
    "end": "875000"
  },
  {
    "text": "easy to find um if you have Source",
    "start": "816440",
    "end": "821639"
  },
  {
    "text": "um most compilers will just spit this out to you if you ask for it um DW",
    "start": "821639",
    "end": "828040"
  },
  {
    "text": "conversion is to show you all implicit type conversions in your source code and um",
    "start": "828040",
    "end": "835120"
  },
  {
    "text": "so in this example implicit Doc is just this code and it",
    "start": "835120",
    "end": "842720"
  },
  {
    "text": "shows us that we see a conversion uh to the unsigned integer which is size T",
    "start": "842720",
    "end": "848360"
  },
  {
    "text": "from the signed integer um size that we got from the user and",
    "start": "848360",
    "end": "855880"
  },
  {
    "text": "um it point it gives us a pointer to the line of source um so on my obuntu VM W",
    "start": "855880",
    "end": "865160"
  },
  {
    "text": "conversion was not included in wall but some someone on Twitter said",
    "start": "865160",
    "end": "870440"
  },
  {
    "text": "that they found it using",
    "start": "870440",
    "end": "873680"
  },
  {
    "start": "875000",
    "end": "900000"
  },
  {
    "text": "wall so the next thing I want to talk about is buffer overflow vulnerabilities",
    "start": "875519",
    "end": "881680"
  },
  {
    "text": "um here we have a very simple example buffer is 128 bytes long and we stir",
    "start": "883000",
    "end": "889759"
  },
  {
    "text": "copy we unbounded stir copy from input into buffer if input is bigger than buffer we'll overwrite we write outside",
    "start": "889759",
    "end": "896279"
  },
  {
    "text": "the bounds of buffer and end up with some kind of issue",
    "start": "896279",
    "end": "901040"
  },
  {
    "start": "900000",
    "end": "1119000"
  },
  {
    "text": "I want to introduce a a tool called rats um you might remember rats I think it's over 15 years old at this point uh Ratz",
    "start": "901639",
    "end": "908639"
  },
  {
    "text": "uses simple static analysis to find potentially vulnerable code uh it analyzes C C++ Pearl PHP Python and it's",
    "start": "908639",
    "end": "917720"
  },
  {
    "text": "they're adding support for Ruby uh the way Ratz works is it parses and to to tokenizes source code and it checks",
    "start": "917720",
    "end": "924880"
  },
  {
    "text": "variables identifiers and comments uh against the set of rules that ships with",
    "start": "924880",
    "end": "930519"
  },
  {
    "text": "rats uh it has a high false positive rate but usually every finding is worth looking into because it has because of",
    "start": "930519",
    "end": "938160"
  },
  {
    "text": "its rule checking so here I'm running Rats on a",
    "start": "938160",
    "end": "944160"
  },
  {
    "text": "library called MZ jpeg which is milla's um fast lib jpeg",
    "start": "944160",
    "end": "950639"
  },
  {
    "text": "Library which is actually forced from libjpeg-turbo and we found there were a lot of results",
    "start": "950639",
    "end": "957839"
  },
  {
    "text": "but we found these two stir copies it took about 5 seconds for rats to run and",
    "start": "957839",
    "end": "964519"
  },
  {
    "text": "print out all these results and it took about 15 minutes for me to go through the results very quickly and uh find the",
    "start": "964519",
    "end": "971519"
  },
  {
    "text": "two V the two vulnerabilities that were output in the results um as I was going through the",
    "start": "971519",
    "end": "977759"
  },
  {
    "text": "source code it became very uh apparent that MZ JPEG and libjpeg-turbo were written very well but when I got to this",
    "start": "977759",
    "end": "984680"
  },
  {
    "text": "piece of code in WR jpeg com. C it was clear that that um very good coding",
    "start": "984680",
    "end": "991959"
  },
  {
    "text": "style um was went away um when I submitted this bug report to libjpeg-turbo they informed me that this",
    "start": "991959",
    "end": "999600"
  },
  {
    "text": "code was directly from came from Upstream which was the reference implementation for JPEG and",
    "start": "999600",
    "end": "1006040"
  },
  {
    "text": "when I sent them an email the quote I got from them was the wjpc com. S.C",
    "start": "1006040",
    "end": "1012279"
  },
  {
    "text": "source file has not been changed since",
    "start": "1012279",
    "end": "1015839"
  },
  {
    "text": "1997 so this is the code I just want us to look at it really quickly uh this is the the two vulnerabilities are right",
    "start": "1017839",
    "end": "1024120"
  },
  {
    "text": "here in these 10 lines of code um this what this code does is it parses the",
    "start": "1024120",
    "end": "1029480"
  },
  {
    "text": "argument that's passed after Dash comment um and",
    "start": "1029480",
    "end": "1034798"
  },
  {
    "text": "so the the first two arrows are the first thir copy vulnerability maxc",
    "start": "1034799",
    "end": "1041558"
  },
  {
    "text": "length is set to 65,000 and then we re then we in we stir",
    "start": "1041559",
    "end": "1049960"
  },
  {
    "text": "copy the argument into common ARG which is 65,000 bytes long and if we Supply a",
    "start": "1049960",
    "end": "1057200"
  },
  {
    "text": "AR if we Supply an argument longer than that we'll have a buffer overflow on the Heap so this particular piece of code",
    "start": "1057200",
    "end": "1064000"
  },
  {
    "text": "was only expected to run on Windows we can force it to run we can force it to run on Linux just",
    "start": "1064000",
    "end": "1071440"
  },
  {
    "text": "by making sure our first character is a quote and that's the if statement right above the first arrow and on Windows 65,000 is the",
    "start": "1071440",
    "end": "1079280"
  },
  {
    "text": "actual max length of an argument but it's not on Linux so the first bug the unbounded copy into comment ARG which is",
    "start": "1079280",
    "end": "1086559"
  },
  {
    "text": "a fix siiz buffer on the Heap and the second bug uh the two stir cats which are unbounded into the same fix siiz",
    "start": "1086559",
    "end": "1093840"
  },
  {
    "text": "buffer on the Heap so what's what's basically going on here",
    "start": "1093840",
    "end": "1099280"
  },
  {
    "text": "in this for Loop is if there are more comments after the dash comment that aren't uh other switches just keep",
    "start": "1099280",
    "end": "1105080"
  },
  {
    "text": "appending them to the same buffer and we can obviously it's a",
    "start": "1105080",
    "end": "1110480"
  },
  {
    "text": "problem but so this is easy to find if we have Source this be easy to find manually auditing it's easy to find with",
    "start": "1110480",
    "end": "1116880"
  },
  {
    "text": "rats but let's say we don't have Source how could we find this vulnerability um I want to introduce Val",
    "start": "1116880",
    "end": "1122679"
  },
  {
    "start": "1119000",
    "end": "1178000"
  },
  {
    "text": "grind mem Che Val grind uses Dynamic binary instrumentation which just means that when the binary is run it opens the",
    "start": "1122679",
    "end": "1130840"
  },
  {
    "text": "binary and does some CH makes some changes to the native code while it's in",
    "start": "1130840",
    "end": "1135880"
  },
  {
    "text": "memory it rewrites in in particular it rewrites this code",
    "start": "1135880",
    "end": "1141240"
  },
  {
    "text": "to instrument memory operations mem Che tries to find all memory operations to make sure that they are safe uh and it",
    "start": "1141240",
    "end": "1149159"
  },
  {
    "text": "reports any invalid memory operations it has a very low F false positive rate because almost",
    "start": "1149159",
    "end": "1155320"
  },
  {
    "text": "every almost every report that it spits out is an invalid memory operation and",
    "start": "1155320",
    "end": "1160600"
  },
  {
    "text": "which means it's a bug um the the main problem with Val grind is that it's pretty",
    "start": "1160600",
    "end": "1166799"
  },
  {
    "text": "slow and the other problem is you need test cases to exercise each vulnerability if you don't have test",
    "start": "1166799",
    "end": "1172600"
  },
  {
    "text": "cases it won't know that the memory operation being it won't it won't know that the memory operation could ever",
    "start": "1172600",
    "end": "1178280"
  },
  {
    "start": "1178000",
    "end": "1293000"
  },
  {
    "text": "happen so This Is Us running Val grind on wrj pegc com and we pass in 70,000",
    "start": "1178280",
    "end": "1186760"
  },
  {
    "text": "A's after a single quote and it exercises the code path we just looked at and it tells us uh we have an invalid",
    "start": "1186760",
    "end": "1194200"
  },
  {
    "text": "right of size one inster copy to this buff ER on the Heap which is at uh Ox 52",
    "start": "1194200",
    "end": "1203240"
  },
  {
    "text": "something which is supposed to be 65,000 bytes long so it knows that the Malo was",
    "start": "1203240",
    "end": "1208559"
  },
  {
    "text": "called with the argument 65,000 and it knows that stir copy is",
    "start": "1208559",
    "end": "1214679"
  },
  {
    "text": "writing bite by bite into that buffer and when it reaches the 65,000 and first",
    "start": "1214679",
    "end": "1219960"
  },
  {
    "text": "character it immediately tells us oh we wrote past the end of this buffer so",
    "start": "1219960",
    "end": "1225000"
  },
  {
    "text": "that's super neat um is the same thing for the second",
    "start": "1225000",
    "end": "1230120"
  },
  {
    "text": "vulnerability here we pass in um a 60,000 byte string of A's plus another",
    "start": "1230120",
    "end": "1237600"
  },
  {
    "text": "10,000 string of A's and so we exercise the the second code bath where it's",
    "start": "1237600",
    "end": "1242760"
  },
  {
    "text": "reading the second argument to the end of the first to the uh appending the second argument to the end of the first",
    "start": "1242760",
    "end": "1248679"
  },
  {
    "text": "argument on the Heap so we see the first we actually see in this iteration we see",
    "start": "1248679",
    "end": "1255000"
  },
  {
    "text": "both stir cats both calls to stir cat um creating",
    "start": "1255000",
    "end": "1260600"
  },
  {
    "text": "creating um output here so flip back",
    "start": "1261520",
    "end": "1266840"
  },
  {
    "text": "really quick so there's two calls to stir cat one with an empty character and one with the whole second argument and",
    "start": "1266840",
    "end": "1274600"
  },
  {
    "text": "we it prints out both of them here so mo more of the same information invalid",
    "start": "1274600",
    "end": "1280480"
  },
  {
    "text": "right of size one because stir cat writes bite by bite and we see both of them and it gives us all the information",
    "start": "1280480",
    "end": "1286520"
  },
  {
    "text": "we need to go find that vulnerability but let's say we don't have test cases for this vulnerability how can we how",
    "start": "1286520",
    "end": "1292799"
  },
  {
    "text": "can we find it so want introduce tool called quick secac uh quick secc is a simple static analysis tool for native",
    "start": "1292799",
    "end": "1299400"
  },
  {
    "start": "1293000",
    "end": "1362000"
  },
  {
    "text": "code it's written in Ida python it's written by Kevin who's sitting right over here student in my class um it's",
    "start": "1299400",
    "end": "1305400"
  },
  {
    "text": "very similar to rats in that it parses and looks for function calls but instead of in source code it looks for it in",
    "start": "1305400",
    "end": "1311080"
  },
  {
    "text": "binaries it also attempts to determine the vulnerability of its findings it'll try to use information provided by the",
    "start": "1311080",
    "end": "1318200"
  },
  {
    "text": "binary by Ida to determine the size of buffers and if the buffers are fixed",
    "start": "1318200",
    "end": "1324120"
  },
  {
    "text": "size um it has a very low fall low false positive rate just like rats and every finding is usually usually worth looking",
    "start": "1324120",
    "end": "1332559"
  },
  {
    "text": "into so when you run quick sec it runs an it runs an Ida it looks like this uh",
    "start": "1332559",
    "end": "1338400"
  },
  {
    "text": "whenever it finds a potential vulnerability it'll uh mark it red and it'll give you an address to go look at",
    "start": "1338400",
    "end": "1344400"
  },
  {
    "text": "it",
    "start": "1344400",
    "end": "1347400"
  },
  {
    "text": "yeah so quick kitten interlude um it's now we're going to get we're going to",
    "start": "1353039",
    "end": "1359279"
  },
  {
    "text": "get some we're get pretty serious now so the next thing I want to talk",
    "start": "1359279",
    "end": "1364480"
  },
  {
    "start": "1362000",
    "end": "1406000"
  },
  {
    "text": "about is used after free vulnerabilities um memory allocators",
    "start": "1364480",
    "end": "1369760"
  },
  {
    "text": "make no guarantees about the state of memory after it's been freed um obviously typically your memory",
    "start": "1369760",
    "end": "1376600"
  },
  {
    "text": "allocator documentation will tell you to EXP that your memory is gone immediately after it's freed but this is rarely the",
    "start": "1376600",
    "end": "1382080"
  },
  {
    "text": "case however after memory's been freed it can be reused by another object so",
    "start": "1382080",
    "end": "1388120"
  },
  {
    "text": "here in this example we free um a pointer and then we call a",
    "start": "1388120",
    "end": "1393799"
  },
  {
    "text": "function on this pointer and if another piece of memory has uh been allocated in",
    "start": "1393799",
    "end": "1400559"
  },
  {
    "text": "the space of free memory this function call can fail or do something",
    "start": "1400559",
    "end": "1405919"
  },
  {
    "text": "unexpected I want to talk about the auror use after free vulnerability in particular uh in 2009 a sponsored group",
    "start": "1405919",
    "end": "1412960"
  },
  {
    "start": "1406000",
    "end": "1523000"
  },
  {
    "text": "used the Aurora vulnerability to break into Google Adobe adobi Juniper Rackspace and a bunch of other",
    "start": "1412960",
    "end": "1420559"
  },
  {
    "text": "organizations and um so from from information that was um from",
    "start": "1420600",
    "end": "1429720"
  },
  {
    "text": "analysis of the Aurora vulnerability it was um simple to tell that what was going on here was a use after free",
    "start": "1429720",
    "end": "1436240"
  },
  {
    "text": "vulnerability and they were calling a function from a c element which or or",
    "start": "1436240",
    "end": "1442360"
  },
  {
    "text": "from a c tree node rather which was which had a reference to it from an",
    "start": "1442360",
    "end": "1448039"
  },
  {
    "text": "event pram and further analysis showed us",
    "start": "1448039",
    "end": "1453480"
  },
  {
    "text": "um that the reason that event pram had a reference to this freed C Tre C tree",
    "start": "1453679",
    "end": "1459760"
  },
  {
    "text": "node was because um the copy Constructor for the event Pam was compiler generated",
    "start": "1459760",
    "end": "1465760"
  },
  {
    "text": "and it was doing a weak copy of every of of the event pram so in the second slide",
    "start": "1465760",
    "end": "1471640"
  },
  {
    "text": "at the bottom we can see that c Tre node has a ref count of two from the event",
    "start": "1471640",
    "end": "1479320"
  },
  {
    "text": "pram pointing to it and from the C element from pointing to it and then we make when we make a copy of the event",
    "start": "1479320",
    "end": "1484760"
  },
  {
    "text": "pram the copy Constructor is called and we we make a third reference but the",
    "start": "1484760",
    "end": "1490360"
  },
  {
    "text": "reference counter isn't incremented and then if we remove the original event",
    "start": "1490360",
    "end": "1495480"
  },
  {
    "text": "pram and the C element then and the C tree node the event or",
    "start": "1495480",
    "end": "1503000"
  },
  {
    "text": "rather we remove the event pram and the C element the ref count of the C Tre node goes to zero the garbage collector",
    "start": "1503000",
    "end": "1509080"
  },
  {
    "text": "cleans it up but we still have a reference to it from the second event param and then we can use that reference",
    "start": "1509080",
    "end": "1515159"
  },
  {
    "text": "to call functions on it and to access memory from a freed location on the",
    "start": "1515159",
    "end": "1521399"
  },
  {
    "start": "1523000",
    "end": "1626000"
  },
  {
    "text": "Heap so the reason this vulnerability exist existed was because of the compiler",
    "start": "1523880",
    "end": "1529880"
  },
  {
    "text": "generate copy Constructor so if we can find all compiler generate copy Constructors we can find vulnerabilities",
    "start": "1529880",
    "end": "1535080"
  },
  {
    "text": "that look like this and that's exactly what Aurora uaf does it looks it checks",
    "start": "1535080",
    "end": "1540399"
  },
  {
    "text": "for compiler generated copy Constructors it uses idop python to find all the copy Constructors in a binary It Dem mangles",
    "start": "1540399",
    "end": "1547360"
  },
  {
    "text": "their names and it looks for um a rep move SD instruction and visual C++ used",
    "start": "1547360",
    "end": "1554480"
  },
  {
    "text": "the rep you the move uh rep move SD and instruction for shallow copy",
    "start": "1554480",
    "end": "1561840"
  },
  {
    "text": "Constructors um it has a low false positive rate but also has a high false negative rate which I'll talk about in a",
    "start": "1562159",
    "end": "1568159"
  },
  {
    "text": "second um oh I'll talk about it right now uh it",
    "start": "1568159",
    "end": "1573640"
  },
  {
    "text": "has a high false positive rate because copy Constructors are often inlined by the visual C++",
    "start": "1573640",
    "end": "1580200"
  },
  {
    "text": "compiler so when you run it on mshtml.dll it looks like this it prints",
    "start": "1580200",
    "end": "1585559"
  },
  {
    "text": "out um all the copy Constructors that it thinks are compiler generated and this",
    "start": "1585559",
    "end": "1591640"
  },
  {
    "text": "is an old version of mshtml.dll so we see the event pram uh",
    "start": "1591640",
    "end": "1597000"
  },
  {
    "text": "show up and it tells us the address of it we can go and inspect it and see that it actually is compiler generated and",
    "start": "1597000",
    "end": "1603440"
  },
  {
    "text": "there's probably something there we should look closer at it's not always perfect but it works",
    "start": "1603440",
    "end": "1609760"
  },
  {
    "text": "and keep in mind that uh a large amount of we missed out on a large amount of copy Constructors because they were",
    "start": "1609760",
    "end": "1615760"
  },
  {
    "text": "inlined by the compiler and if we were to do a wider analysis of",
    "start": "1615760",
    "end": "1623080"
  },
  {
    "text": "the whole binary we might find some more stuff I want to introduce a concept",
    "start": "1623080",
    "end": "1629120"
  },
  {
    "start": "1626000",
    "end": "1751000"
  },
  {
    "text": "called symbolic execution um spend a little while on",
    "start": "1629120",
    "end": "1634200"
  },
  {
    "text": "this slide this is a simplified version of an example I stole from the from Harvard University's Advanced topics in",
    "start": "1634200",
    "end": "1640720"
  },
  {
    "text": "program in programming languages course um the green boxes in the graph are the",
    "start": "1640720",
    "end": "1646159"
  },
  {
    "text": "current state of the program the blue box Es are decision points where we can take where we would take one path if",
    "start": "1646159",
    "end": "1652640"
  },
  {
    "text": "we're doing concrete execution but where we can do take all paths in symbolic execution and at the bottom the orange",
    "start": "1652640",
    "end": "1659120"
  },
  {
    "text": "boxes are the path conditions so this code is pretty simple it we we treat a as symbolic a you can think of a as",
    "start": "1659120",
    "end": "1665960"
  },
  {
    "text": "input to the program and based on the value of a we set X and Y so if a is",
    "start": "1665960",
    "end": "1671519"
  },
  {
    "text": "more than five we set X to 1 if a is less than 12 we set y to 1 and at the bottom we we assert that X Plus Y is not",
    "start": "1671519",
    "end": "1678200"
  },
  {
    "text": "equal to two so um we treat this assertion as if if if the assertion is",
    "start": "1678200",
    "end": "1684919"
  },
  {
    "text": "true um something is wrong like maybe a vulnerability would occur or the program",
    "start": "1684919",
    "end": "1689960"
  },
  {
    "text": "would fail or something like that so we want to see if we can find any values of a which will make this assertion fail so",
    "start": "1689960",
    "end": "1696480"
  },
  {
    "text": "we use symbolic execution to do that and um so we have in the",
    "start": "1696480",
    "end": "1702760"
  },
  {
    "text": "tree when we reach the decision Point uh Alpha is more than five we have two",
    "start": "1702760",
    "end": "1708760"
  },
  {
    "text": "possible paths either Alpha is more than five is true in which case we set X to one and continue or it's false in which",
    "start": "1708760",
    "end": "1715320"
  },
  {
    "text": "case we don't set X to one and continue we do the same thing for a is",
    "start": "1715320",
    "end": "1720519"
  },
  {
    "text": "less than 12 and if if a is more than 5 and less than 12 the most the leftmost",
    "start": "1720519",
    "end": "1727080"
  },
  {
    "text": "path we reach a state where X is equal to 1 and Y is equal to 1 and we reach",
    "start": "1727080",
    "end": "1732559"
  },
  {
    "text": "the path condition which what I just said a is more than five and a is more than is a",
    "start": "1732559",
    "end": "1738919"
  },
  {
    "text": "is less than 12 and the assertion fails and that's",
    "start": "1738919",
    "end": "1743919"
  },
  {
    "text": "interesting any questions",
    "start": "1744760",
    "end": "1752159"
  },
  {
    "start": "1751000",
    "end": "1854000"
  },
  {
    "text": "okay the next thing I want to introduces constraint solving so here we took the path constraint from the previous slide",
    "start": "1752159",
    "end": "1758360"
  },
  {
    "text": "Alpha is more than five and Alpha is less than 12 and we want to do two two things we",
    "start": "1758360",
    "end": "1765880"
  },
  {
    "text": "want to determine if this equation is satisfiable or if it has a valid solution at all and that would tell us",
    "start": "1765880",
    "end": "1771720"
  },
  {
    "text": "if we can ever reach this state of the program where X is equal to 1 and Y is equal to one and the second thing we",
    "start": "1771720",
    "end": "1778000"
  },
  {
    "text": "want to do is we want to find a valid solution which is give which would give us a concrete value for Alpha for a that",
    "start": "1778000",
    "end": "1784159"
  },
  {
    "text": "we would be able to use as input to the program Z3 is a zerum a theorum written",
    "start": "1784159",
    "end": "1791399"
  },
  {
    "text": "by Microsoft it interprets common list s Expressions which are which are these",
    "start": "1791399",
    "end": "1797480"
  },
  {
    "text": "expressions in parentheses um using prefix notation so the operator is the",
    "start": "1797480",
    "end": "1803399"
  },
  {
    "text": "the leftmost um parameter uh there are also python",
    "start": "1803399",
    "end": "1810360"
  },
  {
    "text": "bindings for Z3 which I'm told are very very easy to use so on the left what I do is I I",
    "start": "1810360",
    "end": "1819080"
  },
  {
    "text": "create a Z3 program that defines this equation so we declare a constant a we assert that a",
    "start": "1819080",
    "end": "1826519"
  },
  {
    "text": "is more than five and a is less than 12 and then we want to check the satisfiability and get a model that",
    "start": "1826519",
    "end": "1831880"
  },
  {
    "text": "tells us um that gives us a valid solution so Z3 returns uh that it is",
    "start": "1831880",
    "end": "1838360"
  },
  {
    "text": "satisfiable it returns sat and it gives us a model where a is equal to six which is more than five and less than 12 and",
    "start": "1838360",
    "end": "1845200"
  },
  {
    "text": "we can now run the program with six and it'll reach the assertion and",
    "start": "1845200",
    "end": "1853399"
  },
  {
    "start": "1854000",
    "end": "1936000"
  },
  {
    "text": "crash um so now I want to just introduced a tool called CLE which is written on top of llvm and CLE does",
    "start": "1855360",
    "end": "1862639"
  },
  {
    "text": "exactly what I just described it's an automatic test case generator uh it uses",
    "start": "1862639",
    "end": "1867960"
  },
  {
    "text": "symbolic execution to explore potential Spates states of the program and then it uh solves the constraints that it finds",
    "start": "1867960",
    "end": "1874919"
  },
  {
    "text": "um and generates test cases to increase code coverage C is a is excellent at",
    "start": "1874919",
    "end": "1880799"
  },
  {
    "text": "increasing code coverage it's what it does and generating test cases that you can use to either feed your fuzzer or",
    "start": "1880799",
    "end": "1888519"
  },
  {
    "text": "um just run to see if the program crashes uh CLE requires source code or lvm bit",
    "start": "1888519",
    "end": "1895679"
  },
  {
    "text": "code so here I took the program from a couple slides ago modified",
    "start": "1895679",
    "end": "1900799"
  },
  {
    "text": "it slightly and",
    "start": "1900799",
    "end": "1907519"
  },
  {
    "text": "um um so modified it slightly so we can use it without uh calling aert so we have if X",
    "start": "1908679",
    "end": "1917600"
  },
  {
    "text": "Plus Y = 2 we're going to return -1 and if else we're going to return zero we",
    "start": "1917600",
    "end": "1924279"
  },
  {
    "text": "also use this function called CLE make symbolic which tells CLE that the",
    "start": "1924279",
    "end": "1929840"
  },
  {
    "text": "variable a is input and it should treat as symbolic",
    "start": "1929840",
    "end": "1935080"
  },
  {
    "start": "1936000",
    "end": "1969000"
  },
  {
    "text": "input so when we run CLE it looks like this which I'll show you in a second",
    "start": "1936440",
    "end": "1942320"
  },
  {
    "text": "and it prints out all the test cases that I found so I found three test cases three",
    "start": "1942320",
    "end": "1948760"
  },
  {
    "text": "possible values of a that give you different code paths through the",
    "start": "1948760",
    "end": "1953919"
  },
  {
    "text": "program and here's just an example of the first test case that printed out it tells us a which is an integer four",
    "start": "1954279",
    "end": "1961200"
  },
  {
    "text": "bytes and um if it has the value of zero it has one One path through the program",
    "start": "1961200",
    "end": "1969840"
  },
  {
    "start": "1969000",
    "end": "2108000"
  },
  {
    "text": "so now I'm going to show you uh a demo of using CLE",
    "start": "1969840",
    "end": "1975960"
  },
  {
    "text": "okay so this is the program I just showed you with more new lines in it",
    "start": "1997960",
    "end": "2006000"
  },
  {
    "text": "and here are all the the test cases that CLE generated so",
    "start": "2008279",
    "end": "2016480"
  },
  {
    "text": "the first test case a size four is zero um the second taste second test case a",
    "start": "2016480",
    "end": "2023399"
  },
  {
    "text": "size four is uh 2 billion and the last case a size four is",
    "start": "2023399",
    "end": "2029519"
  },
  {
    "text": "six um actually I'll just run CLE for you real quick so show you see how fast it",
    "start": "2029519",
    "end": "2035799"
  },
  {
    "text": "is obviously it's a very simple program but it's still it's still very",
    "start": "2035799",
    "end": "2041440"
  },
  {
    "text": "fast that's it it's",
    "start": "2042039",
    "end": "2045600"
  },
  {
    "text": "done so we can also use uh CLE to run",
    "start": "2047919",
    "end": "2053480"
  },
  {
    "text": "the program the real program with the input that CLE generated that provides a",
    "start": "2053480",
    "end": "2059280"
  },
  {
    "text": "different code path so what we do here is I just passed a test file that CLE",
    "start": "2059280",
    "end": "2066358"
  },
  {
    "text": "outputs as input to the program and it we can see that the first we know that",
    "start": "2066359",
    "end": "2072040"
  },
  {
    "text": "the first test case was zero and that'll produce that'll make the program return zero and we see that the program returns",
    "start": "2072040",
    "end": "2080440"
  },
  {
    "text": "zero the second test case also return",
    "start": "2080440",
    "end": "2086158"
  },
  {
    "text": "zero and the third test case which was six more than five less than 12 produces",
    "start": "2086560",
    "end": "2093280"
  },
  {
    "text": "negative 1 which is 255",
    "start": "2093280",
    "end": "2097399"
  },
  {
    "text": "that's that's",
    "start": "2101800",
    "end": "2105079"
  },
  {
    "start": "2108000",
    "end": "2245000"
  },
  {
    "text": "that um so there's there's a lot of stuff",
    "start": "2109079",
    "end": "2116200"
  },
  {
    "text": "that I wasn't able to cover today and I want to um I want you guys to know that they",
    "start": "2116200",
    "end": "2122800"
  },
  {
    "text": "exist so you can either look at them on your own time or",
    "start": "2122800",
    "end": "2129640"
  },
  {
    "text": "just know that they exist so uh in terms of symbolic execution engines there are a lot of these um s2e is very",
    "start": "2129800",
    "end": "2138400"
  },
  {
    "text": "popular um the clang uh the cang static analyzer is popular um it's it's the",
    "start": "2138400",
    "end": "2144520"
  },
  {
    "text": "cing static analyzer uh popular for the same reason that CLE",
    "start": "2144520",
    "end": "2150400"
  },
  {
    "text": "is it's built on top of llvm and it and it allows it's it can use all the",
    "start": "2150400",
    "end": "2155920"
  },
  {
    "text": "powerful Insight that CLE is able to to look at um Andrew rof",
    "start": "2155920",
    "end": "2162319"
  },
  {
    "text": "which is who was one of the guest lecturers from my course wrote a sealing static analyzer Checker to find the",
    "start": "2162319",
    "end": "2167760"
  },
  {
    "text": "heart bleed bug in op SSL and um it's open sourced on",
    "start": "2167760",
    "end": "2174119"
  },
  {
    "text": "GitHub immunity debugger also has its uh has a barebone symbolic execution engine",
    "start": "2174359",
    "end": "2180079"
  },
  {
    "text": "built into the python libraries inside of immunity um CLE which you just saw uh",
    "start": "2180079",
    "end": "2186640"
  },
  {
    "text": "fuzzball is built on top of bit Blaze and fuzz grind is uh a fuzzer that uh",
    "start": "2186640",
    "end": "2193319"
  },
  {
    "text": "uses symbolic execution and constraint solving to automatically generate new test cases and uh it's been used to find",
    "start": "2193319",
    "end": "2199960"
  },
  {
    "text": "bugs in Adobe Reader in terms of constraint solvers",
    "start": "2199960",
    "end": "2206200"
  },
  {
    "text": "there are a lot of these too um Cleaver is uh C's constraint solver uh CLE is",
    "start": "2206200",
    "end": "2213440"
  },
  {
    "text": "also written to use uh STP which is um uh another constraint",
    "start": "2213440",
    "end": "2222640"
  },
  {
    "text": "solver people taking",
    "start": "2222640",
    "end": "2226200"
  },
  {
    "text": "pictures uh the next thing binary instumentation engines we talked about Val grind um there's also pin and Dynamo",
    "start": "2228760",
    "end": "2234640"
  },
  {
    "text": "Rio which allow for very powerful Dynamic binary instrumentation change the um the programmatic changing of",
    "start": "2234640",
    "end": "2242119"
  },
  {
    "text": "native code during runtime uh static analysis platforms we",
    "start": "2242119",
    "end": "2248200"
  },
  {
    "start": "2245000",
    "end": "2323000"
  },
  {
    "text": "talked about Ida python but there's also a lot of other powerful static analysis",
    "start": "2248200",
    "end": "2254359"
  },
  {
    "text": "platforms um something that's gaining a lot of popularity is a program is a platform called Bap or binary analysis",
    "start": "2254359",
    "end": "2261160"
  },
  {
    "text": "platform um written by the team at Carnegie melon it has a it has its own",
    "start": "2261160",
    "end": "2266400"
  },
  {
    "text": "intermediate representation has a lot of tools to allow you to uh change code and analyze it in different",
    "start": "2266400",
    "end": "2272400"
  },
  {
    "text": "ways uh insight and Jack stab are similar to Bap um stack is an MIT",
    "start": "2272400",
    "end": "2279520"
  },
  {
    "text": "project it's I think it's fairly new and it's focused on",
    "start": "2279520",
    "end": "2285200"
  },
  {
    "text": "finding um undefined undefined behavior in C",
    "start": "2285200",
    "end": "2291240"
  },
  {
    "text": "programs uh VCC is um is a Microsoft Project and the way it works is you",
    "start": "2291240",
    "end": "2298760"
  },
  {
    "text": "provide prec conditions and post conditions to to different functions of your",
    "start": "2298760",
    "end": "2305960"
  },
  {
    "text": "program and it'll check to make sure that your code matches those preconditions and post conditions and if",
    "start": "2305960",
    "end": "2312079"
  },
  {
    "text": "something doesn't match up it'll tell you during",
    "start": "2312079",
    "end": "2318400"
  },
  {
    "start": "2323000",
    "end": "2363000"
  },
  {
    "text": "compilation so I hope I demonstrated that program",
    "start": "2324520",
    "end": "2329800"
  },
  {
    "text": "analysis is powerful it can uh help you find vulnerabilities very quickly and",
    "start": "2329800",
    "end": "2334960"
  },
  {
    "text": "for not a lot of for at very very low cost um the goal of this talk was to",
    "start": "2334960",
    "end": "2342240"
  },
  {
    "text": "introduce you to this stuff and hopefully now you can follow up on some of the concepts I introduced and play with the software I talked about and uh",
    "start": "2342240",
    "end": "2350319"
  },
  {
    "text": "developed new tools techniques to find vulnerabilities and um improve the way",
    "start": "2350319",
    "end": "2356480"
  },
  {
    "text": "that you find vulnerabilities in your organization",
    "start": "2356480",
    "end": "2360640"
  },
  {
    "start": "2363000",
    "end": "2405000"
  },
  {
    "text": "[Applause]",
    "start": "2363930",
    "end": "2369910"
  },
  {
    "text": "thanks I want to I want to thank a couple people Andrew John Julian and Chris Rolf for guest lecturing my course",
    "start": "2370640",
    "end": "2377839"
  },
  {
    "text": "uh they taught all the parts of the course that I wasn't qualified to teach and without them we wouldn't have had a course at all I also want to thank Jolly",
    "start": "2377839",
    "end": "2385160"
  },
  {
    "text": "Ben Chris Kelly and Jen for uh supporting me while I was writing these slides uh pound Bap on free node for",
    "start": "2385160",
    "end": "2392920"
  },
  {
    "text": "their expertise in trivia and the students of my class who the inspiration for this talk",
    "start": "2392920",
    "end": "2398599"
  },
  {
    "text": "I also want to thank um these folks who I consider um mentors and",
    "start": "2398599",
    "end": "2405200"
  },
  {
    "start": "2405000",
    "end": "2543000"
  },
  {
    "text": "friends and do you have any",
    "start": "2405200",
    "end": "2409318"
  },
  {
    "text": "questions",
    "start": "2411560",
    "end": "2414560"
  },
  {
    "text": "yes no it's oh so the question was um we didn't see City in the list of static",
    "start": "2420720",
    "end": "2426960"
  },
  {
    "text": "analysis tools it definitely counts as static analysis tool just for the purposes of this talk I was trying to focus on open source",
    "start": "2426960",
    "end": "2434040"
  },
  {
    "text": "stuff yep",
    "start": "2434040",
    "end": "2441560"
  },
  {
    "text": "say the question was um trends for higher level languages like",
    "start": "2444040",
    "end": "2449400"
  },
  {
    "text": "C um I would say that all all the all the techniques that we talked about are are",
    "start": "2449400",
    "end": "2456560"
  },
  {
    "text": "applicable to these languages um I know for in particular for the the Microsoft",
    "start": "2456560",
    "end": "2462079"
  },
  {
    "text": "Intermediate Language there are tools like net reflector which will automatically take your compiled C code",
    "start": "2462079",
    "end": "2468640"
  },
  {
    "text": "and bring it back up to C for analysis um in terms of automatically finding vulnerabilities I'm not aware of any",
    "start": "2468640",
    "end": "2474319"
  },
  {
    "text": "tools but I wouldn't be surprised if there were like if there were similar",
    "start": "2474319",
    "end": "2479880"
  },
  {
    "text": "tools yes sorry see it's the question was no love for",
    "start": "2483200",
    "end": "2490040"
  },
  {
    "text": "formal verification um I wanted to put formal verification inside I felt",
    "start": "2490040",
    "end": "2495960"
  },
  {
    "text": "um I felt that it was it was a little heavy for for the talk and I didn't know",
    "start": "2495960",
    "end": "2502680"
  },
  {
    "text": "that I would have all this time at the end I I",
    "start": "2502680",
    "end": "2509240"
  },
  {
    "text": "apologize",
    "start": "2509240",
    "end": "2512240"
  },
  {
    "text": "yes this a black hat not Sands black hat not Sands yes next time",
    "start": "2516240",
    "end": "2523920"
  },
  {
    "text": "I will add formal verification any other",
    "start": "2523920",
    "end": "2531599"
  },
  {
    "text": "questions all right thank you",
    "start": "2536480",
    "end": "2544680"
  }
]