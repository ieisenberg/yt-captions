[
  {
    "text": "hi everybody so researching guy was internals and I was for an abilities is",
    "start": "0",
    "end": "5850"
  },
  {
    "text": "hard right you know what I mean my name is Jonathan effec and welcome to the talk simplifying iOS research",
    "start": "5850",
    "end": "12809"
  },
  {
    "text": "booting the iOS kernel to an interactive bash shell on qmu I'm very excited to be",
    "start": "12809",
    "end": "18449"
  },
  {
    "text": "here and present this project to you I want to thank you all for being here and for attending this talk with me let's",
    "start": "18449",
    "end": "24359"
  },
  {
    "text": "begin in this talk I will present a new",
    "start": "24359",
    "end": "29550"
  },
  {
    "text": "simple way to research iOS before we get to this new way let's review the current research methods so what are the current",
    "start": "29550",
    "end": "36719"
  },
  {
    "text": "research methods researchers use in order to analyze iOS there's a company",
    "start": "36719",
    "end": "43910"
  },
  {
    "text": "there's a company which offers full iOS simulation on the remote servers for",
    "start": "43910",
    "end": "49410"
  },
  {
    "text": "their customers they have full debug capabilities they offer many research features and they have a solution for",
    "start": "49410",
    "end": "55920"
  },
  {
    "text": "many iOS versions on many iOS iOS devices this sounds great right well it",
    "start": "55920",
    "end": "62640"
  },
  {
    "text": "is great but there are a few issues with using it the first one is that you must be invited it is not generally available",
    "start": "62640",
    "end": "69320"
  },
  {
    "text": "but the second issue is that it costs a lot of money to use their services but",
    "start": "69320",
    "end": "74670"
  },
  {
    "text": "most importantly your private research which possibly contains sensitive research details and vulnerabilities is",
    "start": "74670",
    "end": "80460"
  },
  {
    "text": "exposed to anyone who can get access to the servers another method used by",
    "start": "80460",
    "end": "87000"
  },
  {
    "text": "researchers is to use development fuzed iPhones now these are iPhone devices",
    "start": "87000",
    "end": "92100"
  },
  {
    "text": "made by Apple with full debug capabilities used by their own OS developers so they could be able to",
    "start": "92100",
    "end": "98579"
  },
  {
    "text": "debug their code on real iPhone devices recently Apple also announced they're",
    "start": "98579",
    "end": "104250"
  },
  {
    "text": "going to provide such devices to a select few known Apple iOS researchers in order to assist on covering iOS",
    "start": "104250",
    "end": "110790"
  },
  {
    "text": "security vulnerabilities before they are used by offensive hackers this is also",
    "start": "110790",
    "end": "116909"
  },
  {
    "text": "great for research if you can get your hands on such a device but unfortunately it is very much unavailable it is very",
    "start": "116909",
    "end": "122939"
  },
  {
    "text": "hard to get a device and even if you do get one you probably had to do something",
    "start": "122939",
    "end": "128340"
  },
  {
    "text": "illegal or at least make an Apple employee perform a serious breach of contract in order to get one",
    "start": "128340",
    "end": "133990"
  },
  {
    "text": "and the third issue is that it doesn't scale well to use physical devices for",
    "start": "133990",
    "end": "139150"
  },
  {
    "text": "research especially if these devices are very very hard to get another method",
    "start": "139150",
    "end": "145510"
  },
  {
    "text": "used by researchers is to use jailbroken devices now on jailbroken devices you",
    "start": "145510",
    "end": "150970"
  },
  {
    "text": "can execute arbitrary kernel code and recently Brendan Assad and Ian bear published projects which enable debug",
    "start": "150970",
    "end": "157630"
  },
  {
    "text": "capabilities on some iPhones using foreign abilities this is also great for research but unless you use this new",
    "start": "157630",
    "end": "165490"
  },
  {
    "text": "kernel debugger then executing kernel code is far from full debug capabilities on an emulated device you cannot perform",
    "start": "165490",
    "end": "172780"
  },
  {
    "text": "research on multiple iOS versions as these devices can never be downgraded and most of the time you can only",
    "start": "172780",
    "end": "179140"
  },
  {
    "text": "upgrade to the latest iOS version if you want to upgrade at all so it is hard to",
    "start": "179140",
    "end": "184570"
  },
  {
    "text": "conduct a multi version research using this approach it is also more challenging to scale such research while",
    "start": "184570",
    "end": "191410"
  },
  {
    "text": "using physical devices and most importantly it requires a vulnerability to jailbreak the iPhone or teen or to",
    "start": "191410",
    "end": "198160"
  },
  {
    "text": "use this new kernel debugger so in most cases it cannot be used to research the most recent iOS under the most recent",
    "start": "198160",
    "end": "206020"
  },
  {
    "text": "iOS on the most recent iOS device another method used by researchers is to",
    "start": "206020",
    "end": "212260"
  },
  {
    "text": "use regular iPhones non-jailbroken iPhones these iPhones are very easy to get you can just buy them at the store",
    "start": "212260",
    "end": "219090"
  },
  {
    "text": "but they're very limited in their debug and research capabilities in most cases all you have is a crash report that",
    "start": "219090",
    "end": "226300"
  },
  {
    "text": "looks like this now this gives a lot of information regarding the status of the",
    "start": "226300",
    "end": "231370"
  },
  {
    "text": "CPU and the registers when the panic happened or the vulnerability was triggered but it is still very hard to",
    "start": "231370",
    "end": "237940"
  },
  {
    "text": "work with and it is much more difficult than working with the full kernel debugger on an emulated system my goal",
    "start": "237940",
    "end": "245050"
  },
  {
    "text": "in emulating iOS was to create a new open free easy-to-use way to privately research iOS without requiring any",
    "start": "245050",
    "end": "252190"
  },
  {
    "text": "vulnerabilities and it only takes about five minutes to start using it emulation lets you have full debugging abilities",
    "start": "252190",
    "end": "259060"
  },
  {
    "text": "it is easier to develop support for more iOS versions and you can run multiple instance instances easily at scale for",
    "start": "259060",
    "end": "266320"
  },
  {
    "text": "debugging research and fuzzing before we get to this risk",
    "start": "266320",
    "end": "271570"
  },
  {
    "text": "to the research details let me tell you a little bit about myself so my name is",
    "start": "271570",
    "end": "277300"
  },
  {
    "text": "Jonathan effec and I manage the aleph research group at HCL AppScan when I started this role I wanted to start",
    "start": "277300",
    "end": "283750"
  },
  {
    "text": "getting into iOS security research while studying the subject I realized that there was no good public open way to",
    "start": "283750",
    "end": "290680"
  },
  {
    "text": "research iOS internals and for an ability this is when I started looking into emulation I thought that if i OS",
    "start": "290680",
    "end": "297340"
  },
  {
    "text": "could be executed on key mu then I could create such a way and enable such research I looked it up to see if anyone",
    "start": "297340",
    "end": "304240"
  },
  {
    "text": "started working on emulating iOS and found a few very old projects that are not relevant for current versions I also",
    "start": "304240",
    "end": "311710"
  },
  {
    "text": "found another project that started working on executing iOS and key mu and reached some very interesting milestones",
    "start": "311710",
    "end": "319530"
  },
  {
    "text": "now this is the amazing work I found posted on the warp doing badly blog by",
    "start": "319530",
    "end": "324639"
  },
  {
    "text": "mr. Chung so for anyone not familiar with G mu Hume U is a free and open",
    "start": "324639",
    "end": "331330"
  },
  {
    "text": "source emulator that supports emulating arm 64 architectures and it is a great project to start from when trying to",
    "start": "331330",
    "end": "337960"
  },
  {
    "text": "emulate iOS devices before we get to our",
    "start": "337960",
    "end": "343090"
  },
  {
    "text": "research let's see what was achieved by the by mr. Chung's project so they chose",
    "start": "343090",
    "end": "350229"
  },
  {
    "text": "to work on iOS 12 beta 4 for iPhone 10 they were able to extract the kernel",
    "start": "350229",
    "end": "355630"
  },
  {
    "text": "image and the device tree from the software update freely available on Apple servers they were able to patch",
    "start": "355630",
    "end": "361960"
  },
  {
    "text": "the kernel and the device tree and load them both and the kernel boot arguments into the emulated devices memory they",
    "start": "361960",
    "end": "369280"
  },
  {
    "text": "were able to extract around this from the software update and also load it into the emulated devices memory they",
    "start": "369280",
    "end": "376090"
  },
  {
    "text": "were able to emulate a UART serial device connected to the emulated iOS host and achieved serial output only no",
    "start": "376090",
    "end": "383860"
  },
  {
    "text": "serial inputs they were able to boot the kernel on qmu up to the point where it",
    "start": "383860",
    "end": "389440"
  },
  {
    "text": "executed the first user mode application launch D the first user mode process though known No applications that are",
    "start": "389440",
    "end": "397090"
  },
  {
    "text": "not signed by Apple were executed on their system here you can see the system's serial",
    "start": "397090",
    "end": "404230"
  },
  {
    "text": "output and in the output you can see that flange D was actually executed and produced outputs so what were our goals",
    "start": "404230",
    "end": "412990"
  },
  {
    "text": "when starting this product we wanted to boot iOS on qmu without patching the",
    "start": "412990",
    "end": "418780"
  },
  {
    "text": "kernel at all we wanted to support different hardware devices this displayed that sound and everything else",
    "start": "418780",
    "end": "425730"
  },
  {
    "text": "we wanted to support different iOS versions for different iOS devices and",
    "start": "425730",
    "end": "431070"
  },
  {
    "text": "of course the main motivation for starting this all was to conduct iOS security research using this project and",
    "start": "431070",
    "end": "437860"
  },
  {
    "text": "we wanted to learn a lot about iOS and qmu internals while working on the project so what is the current status of",
    "start": "437860",
    "end": "446860"
  },
  {
    "text": "our project we're currently able to boot the secure monitor and the kernel both",
    "start": "446860",
    "end": "452290"
  },
  {
    "text": "unpatched on qmu we're able to execute user-mode processes our own user mode",
    "start": "452290",
    "end": "458979"
  },
  {
    "text": "applications that are not signed by Apple over launch D we're able to run an",
    "start": "458979",
    "end": "464380"
  },
  {
    "text": "interactive bash shell on iOS on qmu and we currently only support iOS 12.1 for",
    "start": "464380",
    "end": "471490"
  },
  {
    "text": "iPhone 6s plus all right then now let's",
    "start": "471490",
    "end": "476710"
  },
  {
    "text": "see a short demonstration of our project before we talk about the research details all right so this is the",
    "start": "476710",
    "end": "485650"
  },
  {
    "text": "command-line we yeah this is the command line we execute in order to execute our",
    "start": "485650",
    "end": "491289"
  },
  {
    "text": "modified qmu to emulate iOS 6s plus so",
    "start": "491289",
    "end": "498220"
  },
  {
    "text": "not let's fire up gdb and attach it to the qmu instance and continue execution",
    "start": "498220",
    "end": "504190"
  },
  {
    "text": "now here you can see the kernel boot messages and we have an interactive bass show now let's update the path environment",
    "start": "504190",
    "end": "510820"
  },
  {
    "text": "variable to play to point where all our executables reside we can see that we",
    "start": "510820",
    "end": "515860"
  },
  {
    "text": "have an interactive bash shell running as root we can extract some host information we can extract information",
    "start": "515860",
    "end": "523000"
  },
  {
    "text": "about the loaded kernel extensions we can extract some virtual memory",
    "start": "523000",
    "end": "529180"
  },
  {
    "text": "statistics we can get some more host information we can extract the full",
    "start": "529180",
    "end": "534610"
  },
  {
    "text": "Oh cute registry but most importantly we can just break the execution of the",
    "start": "534610",
    "end": "541120"
  },
  {
    "text": "colonel in gdb and debug it in gdb with all the familiar and known gdb features",
    "start": "541120",
    "end": "546790"
  },
  {
    "text": "in a regular and known gdb session as you would debug anything else in gdb",
    "start": "546790",
    "end": "554250"
  },
  {
    "text": "alright so we talked about interesting past research research done for",
    "start": "554790",
    "end": "560410"
  },
  {
    "text": "executing iOS and qmu in this talk we're going to walk through some select research stages we had to go through to",
    "start": "560410",
    "end": "566769"
  },
  {
    "text": "achieve iOS execution on qmu we will first talk about how we were able to boot the kernel then talk about how we",
    "start": "566769",
    "end": "573430"
  },
  {
    "text": "were able to run executables that are not signed by Apple on the emulated iOS device after that we will talk about how",
    "start": "573430",
    "end": "580360"
  },
  {
    "text": "we executed bash on iOS and then about how we were able to get interactivity",
    "start": "580360",
    "end": "585550"
  },
  {
    "text": "with the executed bash process and finally we will talk about what lies ahead for this project all right then",
    "start": "585550",
    "end": "594220"
  },
  {
    "text": "how did we put the iOS kernel on GMU we started off with the method used by mr.",
    "start": "594220",
    "end": "599709"
  },
  {
    "text": "Chung's project we loaded the different sections of the kernel into the emulated devices memory and started executing the",
    "start": "599709",
    "end": "605920"
  },
  {
    "text": "kernel at its entry point in exception level 1 but soon enough we hit a crash on the first secure monitor call",
    "start": "605920",
    "end": "613029"
  },
  {
    "text": "instruction so what is a secure monitor somewhat similar to the protection rings",
    "start": "613029",
    "end": "618970"
  },
  {
    "text": "concept in x86 in arm we have for exception levels the user mode code runs",
    "start": "618970",
    "end": "625089"
  },
  {
    "text": "in exception level 0 the kernel runs in exception level 1 we don't have code for",
    "start": "625089",
    "end": "630160"
  },
  {
    "text": "exception level 2 in our system but it is used for hypervisors and the secure Monitor runs in the most privileged mode",
    "start": "630160",
    "end": "636970"
  },
  {
    "text": "exception level 3 then now this is how",
    "start": "636970",
    "end": "642579"
  },
  {
    "text": "the secure monitor works on iOS well the the secure monitor is the first thing",
    "start": "642579",
    "end": "649000"
  },
  {
    "text": "that runs after the bootloader and it started its execution in exception level",
    "start": "649000",
    "end": "654490"
  },
  {
    "text": "3 it resides in a secure mode memory location that is inaccessible from other",
    "start": "654490",
    "end": "660190"
  },
  {
    "text": "exception levels including the kernel the transient exception level 1 it is",
    "start": "660190",
    "end": "665680"
  },
  {
    "text": "used to service secure monitor calls the kernels somewhat similar to how the",
    "start": "665680",
    "end": "670870"
  },
  {
    "text": "kernel services system calls from user mode code it is responsible for kpp",
    "start": "670870",
    "end": "678010"
  },
  {
    "text": "kernel patch protection this is a mechanism that protects the kernel code even if a hacker has an arbitrary right",
    "start": "678010",
    "end": "684910"
  },
  {
    "text": "exploit in the iOS kernel memory then they are not able to override the kernel",
    "start": "684910",
    "end": "690070"
  },
  {
    "text": "code as it is protected by kpp so why",
    "start": "690070",
    "end": "696820"
  },
  {
    "text": "did this approach work for mr. chunks project and not for us why were they able to just load all the different",
    "start": "696820",
    "end": "702670"
  },
  {
    "text": "sections of the kernel and start execution in exception level 1 when we couldn't we we encountered an error",
    "start": "702670",
    "end": "708790"
  },
  {
    "text": "while executing the secure monitor call exception instruction well they actually",
    "start": "708790",
    "end": "714220"
  },
  {
    "text": "used an iOS version for iPhone 10 and iPhone 10 uses a different mechanism to prevent patches it uses KT RR and it",
    "start": "714220",
    "end": "721870"
  },
  {
    "text": "does not use a secure monitor to implement kpp now these mean these this",
    "start": "721870",
    "end": "728260"
  },
  {
    "text": "means that the iOS version for iPhone 10 does not use secure monitor call instructions and therefore they do not",
    "start": "728260",
    "end": "735100"
  },
  {
    "text": "need to execute a secure monitor and in order to service the secure monitor calls now the reason we chose you chose",
    "start": "735100",
    "end": "743440"
  },
  {
    "text": "this iOS version for iPhone 6s plus is that it is the only iOS 12 version that",
    "start": "743440",
    "end": "748780"
  },
  {
    "text": "we know of that Apple released with kernel symbols in it and that makes reverse engineering and working on this",
    "start": "748780",
    "end": "755470"
  },
  {
    "text": "project much simpler all right so we see that the kernel now needs a secure",
    "start": "755470",
    "end": "762670"
  },
  {
    "text": "monitor the kernel needs a super monitor to service its secure monitor calls so any ideas how we can solve this and",
    "start": "762670",
    "end": "769000"
  },
  {
    "text": "continue with kernel execution so what we did was actually extract the secure",
    "start": "769000",
    "end": "776170"
  },
  {
    "text": "monitor image from the software update and load load the secure monitor image",
    "start": "776170",
    "end": "781870"
  },
  {
    "text": "and the secure monitor boot arguments in the emulated device is secured monitor and start executing it in at its entry",
    "start": "781870",
    "end": "789310"
  },
  {
    "text": "point in exception level 3 all right so where we now able to boot the kernel",
    "start": "789310",
    "end": "797610"
  },
  {
    "text": "using this approach well we started executing the secure monitor code but soon enough",
    "start": "797610",
    "end": "805459"
  },
  {
    "text": "we encountered a data aboard exception this happens because the secure monitor in order to implement kpp needs",
    "start": "805459",
    "end": "812180"
  },
  {
    "text": "information about the different kernel sections so it can know what sections need protection and where they are",
    "start": "812180",
    "end": "817999"
  },
  {
    "text": "loaded in memory the secure monitor gets this information from the kernels Maho header but it seems that the secure",
    "start": "817999",
    "end": "824749"
  },
  {
    "text": "monitor looks for this header in location where it is not found and therefore it triggers the data abort",
    "start": "824749",
    "end": "830360"
  },
  {
    "text": "exception now here you can see a snippet of code of the secure monitor code where",
    "start": "830360",
    "end": "836240"
  },
  {
    "text": "it parses the kernels Maho header and searches for a specific kernel section",
    "start": "836240",
    "end": "841459"
  },
  {
    "text": "called text exec so this is the layout of how we loaded the different kernel",
    "start": "841459",
    "end": "847339"
  },
  {
    "text": "sections so we just loaded all the different kernel sections to where they're supposed to be in memory and you",
    "start": "847339",
    "end": "852769"
  },
  {
    "text": "see that we have some kernel sections that are loaded below the kernel mewho header then we have the kernel Maho",
    "start": "852769",
    "end": "858800"
  },
  {
    "text": "header loaded then we have some sections that are loaded above the kuruma header we also have the base address food",
    "start": "858800",
    "end": "864470"
  },
  {
    "text": "argument now we pointed the base address food argument to the lowest loaded kernel address based on the work done by",
    "start": "864470",
    "end": "870170"
  },
  {
    "text": "mr. Chung and it turns out that the secure monitor actually tries to find",
    "start": "870170",
    "end": "875809"
  },
  {
    "text": "the kernel Mahal header based on the base address food argument so this is the place where the secured monitor",
    "start": "875809",
    "end": "880879"
  },
  {
    "text": "tries to find the kernel mahal header and since it currently does not point to the kernel model header then we get this",
    "start": "880879",
    "end": "887569"
  },
  {
    "text": "data board exception all right so we saw that the kernel needs a secure monitor",
    "start": "887569",
    "end": "893240"
  },
  {
    "text": "to service its if your monitor calls so we loaded the secure monitor and started executing it and we saw that the secure",
    "start": "893240",
    "end": "899420"
  },
  {
    "text": "monitor requires the base artist wood argument to point to the kernel mahal header any ideas how we can solve it and",
    "start": "899420",
    "end": "906319"
  },
  {
    "text": "continue with kernel execution so we tried to do a few different approaches and after a few attempts we tried this",
    "start": "906319",
    "end": "913459"
  },
  {
    "text": "solution so this is a basic solution right just make the base our just food argument point to the kernel Maho header",
    "start": "913459",
    "end": "919429"
  },
  {
    "text": "instead of the lowest loaded kernel address so are we now able to boot the",
    "start": "919429",
    "end": "925670"
  },
  {
    "text": "kernel using this approach so it got us a little bit further right now we're",
    "start": "925670",
    "end": "931189"
  },
  {
    "text": "able to to execute the full boot boot sequence in secur monitor and actually get to",
    "start": "931189",
    "end": "937199"
  },
  {
    "text": "Colonel execution in exceptional level 1 but after getting the colonel execution after starting executing the colonel",
    "start": "937199",
    "end": "943559"
  },
  {
    "text": "itself we get to dysfunction now this functions to static v2p gets called a lot in the colonel",
    "start": "943559",
    "end": "949740"
  },
  {
    "text": "it is a kernel function that is used a lot and in the circled up line you can",
    "start": "949740",
    "end": "955230"
  },
  {
    "text": "see that it uses a global variable called G vert base now this G vert base global variable is based on the base",
    "start": "955230",
    "end": "962249"
  },
  {
    "text": "address food argument whatever value we put in the base other's food argument goes into the G vert base global",
    "start": "962249",
    "end": "967889"
  },
  {
    "text": "variable and you can see that if VA the input the input virtual address to this",
    "start": "967889",
    "end": "973740"
  },
  {
    "text": "function is lower than G root base then we get a negative number in this obstruction now if this of this negative",
    "start": "973740",
    "end": "981119"
  },
  {
    "text": "number is treated and as an unsigned integers then it is a very large unsigned integer that is larger than the",
    "start": "981119",
    "end": "987449"
  },
  {
    "text": "physical memory size then therefore this condition is true and we get to the next line which is a panic line and we get a",
    "start": "987449",
    "end": "994410"
  },
  {
    "text": "kernel panic so we need to make sure that this function never gets called with a VA with a virtual address that is",
    "start": "994410",
    "end": "1000470"
  },
  {
    "text": "lower than G vert base so in order to do that we need to make sure the G root",
    "start": "1000470",
    "end": "1005509"
  },
  {
    "text": "base points to the lowest loaded kernel address so we saw that the kernel needs",
    "start": "1005509",
    "end": "1011059"
  },
  {
    "text": "a secure monitored service its secure monitor calls so we loaded the secure Monitor but we now see that the secure",
    "start": "1011059",
    "end": "1017660"
  },
  {
    "text": "Monitor requires the base R this would argument to point to the kernel module header and we have another requirement",
    "start": "1017660",
    "end": "1023240"
  },
  {
    "text": "for the base address good argument we see that it needs to point to the lowest loaded kernel address so and it is how",
    "start": "1023240",
    "end": "1030770"
  },
  {
    "text": "we can solve that and continue with kernel execution so after a few attempts",
    "start": "1030770",
    "end": "1036380"
  },
  {
    "text": "we actually tried this solution so we we stayed with all the loaded different",
    "start": "1036380",
    "end": "1042350"
  },
  {
    "text": "kernel section we just we loaded them to the same place but we also added into the emulator devices memory another copy",
    "start": "1042350",
    "end": "1049850"
  },
  {
    "text": "of the raw kernel file that we extracted from the software update and this raw kernel file begins with the kernel",
    "start": "1049850",
    "end": "1056480"
  },
  {
    "text": "module header so what we did was pick a point the base are the spewed argument to this new copy that is loaded below",
    "start": "1056480",
    "end": "1062570"
  },
  {
    "text": "the lowest loaded kernel section so now we have the base address food argument pointing to the kernel Maho header and",
    "start": "1062570",
    "end": "1068000"
  },
  {
    "text": "we have it pointing to an ADD that is lower than the lowest loaded kernel address and now it works and",
    "start": "1068000",
    "end": "1074120"
  },
  {
    "text": "we're able to boot the kernel up to the point where it executes launch D the first user moon application all right so",
    "start": "1074120",
    "end": "1081230"
  },
  {
    "text": "we're now able to boot the kernel next I want to talk about how we were able to",
    "start": "1081230",
    "end": "1087200"
  },
  {
    "text": "make the iOS kernel execute our own executables right because the iOS kernel",
    "start": "1087200",
    "end": "1093220"
  },
  {
    "text": "doesn't allow execution of executables that are not signed by Apple so let's see how we got the iOS kernel executing",
    "start": "1093220",
    "end": "1100610"
  },
  {
    "text": "our own executables that are not signed by Apple in order to do this we use a trust cache so what is a trust cache",
    "start": "1100610",
    "end": "1107810"
  },
  {
    "text": "trust cache is a list of executable hashes that represent the executables that are allowed execution in iOS",
    "start": "1107810",
    "end": "1113720"
  },
  {
    "text": "without a signature verification only if the executable hash is not in the trust",
    "start": "1113720",
    "end": "1119600"
  },
  {
    "text": "cache than then its signature is checked if it isn't the list then execution is",
    "start": "1119600",
    "end": "1125450"
  },
  {
    "text": "allowed so let's see how this works by a simple example so let's say we try to execute executable one with hash three",
    "start": "1125450",
    "end": "1132320"
  },
  {
    "text": "4cb on the iOS kernel let's say the blue boxes represent the trust cache now the",
    "start": "1132320",
    "end": "1137450"
  },
  {
    "text": "kernel tries to find this executable hash into trust cache and it is unable to find it there and then it tries to",
    "start": "1137450",
    "end": "1143720"
  },
  {
    "text": "verify the executable signature and since it is not signed by Apple then",
    "start": "1143720",
    "end": "1148940"
  },
  {
    "text": "execution is denied now let's say we try to execute executable two with the hash one EC four",
    "start": "1148940",
    "end": "1155060"
  },
  {
    "text": "on the iOS kernel and this time the kernel is is able to find it in the trust cache and therefore execution is",
    "start": "1155060",
    "end": "1161570"
  },
  {
    "text": "allowed now the iOS kernel supports three different types of trust catchers the",
    "start": "1161570",
    "end": "1167720"
  },
  {
    "text": "first one is the list of hard coded hashes that are hard-coded in the kernel code itself now we could actually",
    "start": "1167720",
    "end": "1173090"
  },
  {
    "text": "override this this list with our with our own hashes and make the kernel",
    "start": "1173090",
    "end": "1178400"
  },
  {
    "text": "execute our own executables but we did not want to patch the kernel at all therefore we did not use this approach",
    "start": "1178400",
    "end": "1185200"
  },
  {
    "text": "the second type of trust cache that is supported by the iOS kernel is a dynamic trust cache that can be loaded at",
    "start": "1185200",
    "end": "1191540"
  },
  {
    "text": "runtime now in order to execute the code that actually loads this trust cache from a file we need to first be approved for",
    "start": "1191540",
    "end": "1198680"
  },
  {
    "text": "execution on the iOS system and therefore we cannot use this",
    "start": "1198680",
    "end": "1203710"
  },
  {
    "text": "approach and then the last type of trust cache that is supported by the iOS kernel is a static trust cache that is",
    "start": "1203710",
    "end": "1210580"
  },
  {
    "text": "placed in memory before the boot sequence and it is pointed to from the device tree so what is the device tree",
    "start": "1210580",
    "end": "1219039"
  },
  {
    "text": "device rillettes the bootloader tell the kernel what hardware devices are attached to the host and the",
    "start": "1219039",
    "end": "1224590"
  },
  {
    "text": "specifications of these devices in addition it enables the bootloader to",
    "start": "1224590",
    "end": "1229840"
  },
  {
    "text": "pass to the kernel other pieces of information such as the location in memory of the static trust cache now a",
    "start": "1229840",
    "end": "1236350"
  },
  {
    "text": "raw device tree is available in the software update we do patch the device tree to add the static trust cache to it",
    "start": "1236350",
    "end": "1243130"
  },
  {
    "text": "and we also patch it for different reasons but it is very different from patching the kernel as it is a",
    "start": "1243130",
    "end": "1249250"
  },
  {
    "text": "structured description of devices and it is easier to parse and edit for supporting different iOS versions as",
    "start": "1249250",
    "end": "1255730"
  },
  {
    "text": "opposed to searching for specific code locations in the kernel code to patch that frequently change in different iOS",
    "start": "1255730",
    "end": "1262600"
  },
  {
    "text": "versions now this is the top-level core trust validation code now this code in",
    "start": "1262600",
    "end": "1268899"
  },
  {
    "text": "the iOS kernel is responsible for searching for the executable hash in the three types of trust caches and if it is",
    "start": "1268899",
    "end": "1276250"
  },
  {
    "text": "unable to find it there then it goes on to signature verification and if we dive",
    "start": "1276250",
    "end": "1281890"
  },
  {
    "text": "deeper into the static trust cash lookup we get to this function lookup in static trust cache now if this function is able",
    "start": "1281890",
    "end": "1288220"
  },
  {
    "text": "to find the executable hash in the static trust cache then execution is allowed now using cross references we",
    "start": "1288220",
    "end": "1295840"
  },
  {
    "text": "can see that this is the code that actually builds the the static trust cache that is later used by the lookup",
    "start": "1295840",
    "end": "1301750"
  },
  {
    "text": "function now this code parses the input structure that comes from that is pointed to from the device tree and",
    "start": "1301750",
    "end": "1307750"
  },
  {
    "text": "builds the new structure that will later be used by the lookup function reverse",
    "start": "1307750",
    "end": "1313360"
  },
  {
    "text": "engineering the function that we just saw before reveals that this is the input structure that is expected to be",
    "start": "1313360",
    "end": "1319630"
  },
  {
    "text": "that the static trust cache to be in now we will not go into all the details of this structure but the important thing",
    "start": "1319630",
    "end": "1325630"
  },
  {
    "text": "is to know that it enables us to be able to build our own static trust cache and use our own hashes inside this new",
    "start": "1325630",
    "end": "1332320"
  },
  {
    "text": "static trust cache and therefore make the iOS kernel allow execution of our own executables now using cross",
    "start": "1332320",
    "end": "1341080"
  },
  {
    "text": "references we can see that the memory address of this structure of this input",
    "start": "1341080",
    "end": "1346150"
  },
  {
    "text": "structure is actually read from the device tree and good thing that this code is actually open source so here you",
    "start": "1346150",
    "end": "1351550"
  },
  {
    "text": "can see where the kernel fetches from the device tree the memory address of the static trust cache all right so did",
    "start": "1351550",
    "end": "1360520"
  },
  {
    "text": "that work are we now able to execute to make the iOS kernel execute our own executable well it's sort of words it",
    "start": "1360520",
    "end": "1368470"
  },
  {
    "text": "sort of worked it always worked when we used only one hash in the static trust cache but when we try to use more items",
    "start": "1368470",
    "end": "1375670"
  },
  {
    "text": "in the static trust cache when we put more hashes in the static trust cache then some executables worked and some",
    "start": "1375670",
    "end": "1381400"
  },
  {
    "text": "executables were denied execution now any idea is why this happened or how we",
    "start": "1381400",
    "end": "1386980"
  },
  {
    "text": "can solve it well reverse reverse engineering the lookup in static trust",
    "start": "1386980",
    "end": "1392650"
  },
  {
    "text": "cache function actually revealed that it implements a binary search algorithm and a binary search algorithm",
    "start": "1392650",
    "end": "1398260"
  },
  {
    "text": "expects a sword at least so now all we had to do was assort the hashes in our",
    "start": "1398260",
    "end": "1403840"
  },
  {
    "text": "static trust cache and now it worked now we were able to make the iOS kernel execute our own executables that are not",
    "start": "1403840",
    "end": "1410620"
  },
  {
    "text": "signed by Apple all right so we're now able to put the kernel and we were able",
    "start": "1410620",
    "end": "1415900"
  },
  {
    "text": "to make the iOS kernel execute our own executables now let's see how we made it how we made lunch D that is already",
    "start": "1415900",
    "end": "1422410"
  },
  {
    "text": "executed execute our bash process our bash shell so the method to do that to",
    "start": "1422410",
    "end": "1430810"
  },
  {
    "text": "do this was simple first we we mounted the roundest that we later did is later",
    "start": "1430810",
    "end": "1436750"
  },
  {
    "text": "used for the qmu execution we mounted it on our research computer and we removed",
    "start": "1436750",
    "end": "1442960"
  },
  {
    "text": "all the files from the launch demon's directory now this directory is responsible for holding each one of the",
    "start": "1442960",
    "end": "1449620"
  },
  {
    "text": "files in this directory is responsible for instructing launch D to execute a different process daemon or service on",
    "start": "1449620",
    "end": "1455830"
  },
  {
    "text": "the iOS system and we wanted to just execute the bash shell without interference we didn't want anything",
    "start": "1455830",
    "end": "1462130"
  },
  {
    "text": "else to interfere and we wanted to just execute bath so we removed all all the files that existed in this directory and",
    "start": "1462130",
    "end": "1468910"
  },
  {
    "text": "we added a single file to this directory a file that instructs launch D to execute our bash shell and we copied",
    "start": "1468910",
    "end": "1477880"
  },
  {
    "text": "the bash executable to the ROM disk and we added the bash executable hash to the trust cache and we unmounted round disk",
    "start": "1477880",
    "end": "1485500"
  },
  {
    "text": "and started qmu now this is the file we put in the in the launch the directory",
    "start": "1485500",
    "end": "1493150"
  },
  {
    "text": "that instructs launch D to execute our bash shell now here you can see we",
    "start": "1493150",
    "end": "1498580"
  },
  {
    "text": "instructed launch d2 to start the bash shell interactively and here we pointed",
    "start": "1498580",
    "end": "1504670"
  },
  {
    "text": "launch D to where you can find the bash executable on the run disk and we're here we instructed lunch D to use flash",
    "start": "1504670",
    "end": "1510910"
  },
  {
    "text": "devilish console that which is the serial device as SC out s to the air and esterday in for the bash shell and here",
    "start": "1510910",
    "end": "1518710"
  },
  {
    "text": "we instructed launch D to execute the bash shell as root now the dot work were",
    "start": "1518710",
    "end": "1526450"
  },
  {
    "text": "we able to execute the bash process now well the logs show that there are",
    "start": "1526450",
    "end": "1532870"
  },
  {
    "text": "missing libraries are required in order to execute bash so it did not work at first now any ideas why this happened or",
    "start": "1532870",
    "end": "1540010"
  },
  {
    "text": "how we can solve this well it turns out",
    "start": "1540010",
    "end": "1545320"
  },
  {
    "text": "that the ROM disk image comes without the dynamic loader cache file on it this file holds the most common runtime",
    "start": "1545320",
    "end": "1551080"
  },
  {
    "text": "libraries for iOS and it is required in order to execute a lot of processes",
    "start": "1551080",
    "end": "1556210"
  },
  {
    "text": "including bash so we tried a simple solution we have the full disk image",
    "start": "1556210",
    "end": "1562000"
  },
  {
    "text": "from the software update so we just copied this dynamic loader cache file from the full disk image into the wrong",
    "start": "1562000",
    "end": "1567880"
  },
  {
    "text": "disc at the correct location and execute it again but alas it still did not work",
    "start": "1567880",
    "end": "1574630"
  },
  {
    "text": "we got the same error now any ideas why this happened or how we can solve it so",
    "start": "1574630",
    "end": "1581080"
  },
  {
    "text": "in order to understand this issue we started debugging the dynamic loader which is the user code user load code",
    "start": "1581080",
    "end": "1587890"
  },
  {
    "text": "responsible for loading the dynamic loader cache file now since we have gdb attached to our qmu instance we can",
    "start": "1587890",
    "end": "1595570"
  },
  {
    "text": "actually debug the code that is running on it so good thing that the dynamic",
    "start": "1595570",
    "end": "1600940"
  },
  {
    "text": "loader is open source so we can just start debugging before the the function open shared cache file",
    "start": "1600940",
    "end": "1606830"
  },
  {
    "text": "which is responsible for loading the dynamic loader cache file and stepping",
    "start": "1606830",
    "end": "1612379"
  },
  {
    "text": "through execution we saw that what actually fails is the call to this system called shared reach in map inside",
    "start": "1612379",
    "end": "1618789"
  },
  {
    "text": "now since the project we developed has a kernel debugger then it makes what would",
    "start": "1618789",
    "end": "1623869"
  },
  {
    "text": "otherwise be a great challenge very simple we can just debug the user mode code and continue debugging the kernel",
    "start": "1623869",
    "end": "1629720"
  },
  {
    "text": "through the system call and debugging the system call we see that what actually fails is the is this function",
    "start": "1629720",
    "end": "1636649"
  },
  {
    "text": "call shared region map inside and inside this function call we can see that the condition that fails is this condition",
    "start": "1636649",
    "end": "1642619"
  },
  {
    "text": "and we see that it expects the dynamic loader cache file to be owned by UID 0",
    "start": "1642619",
    "end": "1647840"
  },
  {
    "text": "to be owned by roots so we now see that in order to load the dynamic loader cache file we needed to be owned by root",
    "start": "1647840",
    "end": "1655119"
  },
  {
    "text": "so the solution was simple we just mounted around disk in a different way",
    "start": "1655119",
    "end": "1660259"
  },
  {
    "text": "right because the default weight of mountings around disk on the research computer does not allow permission",
    "start": "1660259",
    "end": "1665450"
  },
  {
    "text": "editing on the underground disk so we mounted it on the research computer in a different way which does allow",
    "start": "1665450",
    "end": "1671210"
  },
  {
    "text": "permission editing and we copied the cache file and only truth and now it",
    "start": "1671210",
    "end": "1676789"
  },
  {
    "text": "works and we have bash executed on our system so we're now able to boot the",
    "start": "1676789",
    "end": "1682429"
  },
  {
    "text": "kernel we're able to make the iOS kernel allow execution of our own executables including bash and we're able to make",
    "start": "1682429",
    "end": "1688879"
  },
  {
    "text": "launch the execute our bash our bash process or by a shell but since we have",
    "start": "1688879",
    "end": "1694879"
  },
  {
    "text": "were based on mr. chunks project and he achieved only a serial output then we",
    "start": "1694879",
    "end": "1700309"
  },
  {
    "text": "now have a bash prompt on the serial output um but we're not able to interact",
    "start": "1700309",
    "end": "1709399"
  },
  {
    "text": "with it right we just see the bash prompt but we're not able to input anything into the bash shell so how did",
    "start": "1709399",
    "end": "1716059"
  },
  {
    "text": "how did we get interactivity with the bash shell how did we enable serial input so reverse engineering the kernel",
    "start": "1716059",
    "end": "1722929"
  },
  {
    "text": "revealed that actually this is the location where serial input is decided upon this this is where if this branch",
    "start": "1722929",
    "end": "1729889"
  },
  {
    "text": "is taken then serial input is enabled so we see that if the w8 register bit number one is on then serial",
    "start": "1729889",
    "end": "1738070"
  },
  {
    "text": "input is enabled and further reverse engineering the kernel actually revealed that the value of w8 Intel in that",
    "start": "1738070",
    "end": "1745090"
  },
  {
    "text": "location comes from the kernel boot argument the kernel serial boot argument",
    "start": "1745090",
    "end": "1750130"
  },
  {
    "text": "so all we had to do was set the serial boot argument to 2 which means bit number 1 is on and then we have serial",
    "start": "1750130",
    "end": "1757750"
  },
  {
    "text": "input and we have an interactive bash oh",
    "start": "1757750",
    "end": "1761940"
  },
  {
    "text": "all right so some of you may be familiar with the voucher swap for an ability",
    "start": "1763380",
    "end": "1769480"
  },
  {
    "text": "research that was published by brandon azad he did an amazing work exploiting this for an ability and it is a subject",
    "start": "1769480",
    "end": "1776020"
  },
  {
    "text": "for a full length stalk on its own this word ability was used to jailbreak ios 12.1 i'm not going to go through all the",
    "start": "1776020",
    "end": "1783310"
  },
  {
    "text": "details of exploitation but i do want to show you as a demonstration of research how simple it is to trigger this for an",
    "start": "1783310",
    "end": "1789580"
  },
  {
    "text": "ability on this project and see exactly what goes on in the kernel while this were an ability is triggered",
    "start": "1789580",
    "end": "1795280"
  },
  {
    "text": "using this project's debug capabilities I will also demonstrate some helpful for",
    "start": "1795280",
    "end": "1801220"
  },
  {
    "text": "research gdb scripts that were written by our very own Aleph security researcher Vera",
    "start": "1801220",
    "end": "1806440"
  },
  {
    "text": "mence alright so this is the the code",
    "start": "1806440",
    "end": "1813190"
  },
  {
    "text": "that we're going to compile and execute the user mode processor we're going to compile and execute on our project in",
    "start": "1813190",
    "end": "1818770"
  },
  {
    "text": "order to trigger the voucher swap for an ability now in order to understand that this vulnerability in this code we need",
    "start": "1818770",
    "end": "1825190"
  },
  {
    "text": "to understand something about vouchers now vouchers are kernel objects that are reference counted when a voucher is",
    "start": "1825190",
    "end": "1831880"
  },
  {
    "text": "created a mock board is also created that references it and therefore it has a reference count of 1 and vouchers can",
    "start": "1831880",
    "end": "1838240"
  },
  {
    "text": "also be assigned to threads so when a voucher is assigned to a thread then the thread also references the voucher and",
    "start": "1838240",
    "end": "1844480"
  },
  {
    "text": "its reference count is increased so what does this code do well first we create a",
    "start": "1844480",
    "end": "1850390"
  },
  {
    "text": "new thread so we have a new thread in this process then we create a voucher and when we carry the voucher we care we",
    "start": "1850390",
    "end": "1857680"
  },
  {
    "text": "also create a mock board that references the voucher so the voucher has a reference count of 1 and then we assign",
    "start": "1857680",
    "end": "1864700"
  },
  {
    "text": "the voucher to the thread so now the voucher has a reference count of 2 right",
    "start": "1864700",
    "end": "1870910"
  },
  {
    "text": "1 from the math port and one reference from the thread then we call the voucher release function now in this function we",
    "start": "1870910",
    "end": "1877280"
  },
  {
    "text": "call the voucher swap function which triggers the vulnerability now this vulnerability actually decreases the",
    "start": "1877280",
    "end": "1883010"
  },
  {
    "text": "reference count of the voucher by one so it now has a reference count of one instead of two but it still has to live",
    "start": "1883010",
    "end": "1890060"
  },
  {
    "text": "references one from the math port and one from the thread so the next thing we do is destroy the mach port so the",
    "start": "1890060",
    "end": "1897470"
  },
  {
    "text": "reference count goes down again from 1 to 0 and the voucher is D allocated and it's memory is freed but it still has a",
    "start": "1897470",
    "end": "1904430"
  },
  {
    "text": "live reference from the thread so the next thing we do is actually try to fetch the voucher from the thread but",
    "start": "1904430",
    "end": "1911600"
  },
  {
    "text": "since the voucher was already allocated the iOS kernel code that fetches the voucher from the thread tries to verify",
    "start": "1911600",
    "end": "1918350"
  },
  {
    "text": "that the voucher is valid because it is no longer valid then we get a kernel",
    "start": "1918350",
    "end": "1923630"
  },
  {
    "text": "panic and we gotta use after free vulnerability triggered here so now",
    "start": "1923630",
    "end": "1929540"
  },
  {
    "text": "let's see this in action",
    "start": "1929540",
    "end": "1932530"
  },
  {
    "text": "all right so we now execute our process the triggers the vulnerability so this",
    "start": "1939120",
    "end": "1945480"
  },
  {
    "text": "is one of the scripts we I talked about this is a script that parses the global threads listing the iOS kernel actually",
    "start": "1945480",
    "end": "1951660"
  },
  {
    "text": "displays all the user mode all the user threads that are currently running in the system we can see that our process",
    "start": "1951660",
    "end": "1957750"
  },
  {
    "text": "is running the voucher swap process is currently running and it is now at thread create at the beginning of the",
    "start": "1957750",
    "end": "1963570"
  },
  {
    "text": "function thread create this is where this is our first breakpoint so let's",
    "start": "1963570",
    "end": "1969840"
  },
  {
    "text": "continue execution and now we're at the end of the function thread create and we",
    "start": "1969840",
    "end": "1976440"
  },
  {
    "text": "can see that actually a new thread was created for our process for the voucher swap process and this is another another",
    "start": "1976440",
    "end": "1987809"
  },
  {
    "text": "very useful script now this script actually parses the struct thread of every of every thread we give to it and",
    "start": "1987809",
    "end": "1994140"
  },
  {
    "text": "displays a lot of useful information about the thread so let's see the information about the newly created",
    "start": "1994140",
    "end": "1999300"
  },
  {
    "text": "thread and here we can see that the ith",
    "start": "1999300",
    "end": "2005150"
  },
  {
    "text": "voucher member is currently 0 right because we stopped just after creating the new thread so it currently",
    "start": "2005150",
    "end": "2010160"
  },
  {
    "text": "references no thread it doesn't reference any thread so the ith voucher member is now 0 now let's continue",
    "start": "2010160",
    "end": "2017690"
  },
  {
    "text": "execution",
    "start": "2017690",
    "end": "2020350"
  },
  {
    "text": "now this breakpoint is just after creating the voucher and assigning it to",
    "start": "2029440",
    "end": "2035120"
  },
  {
    "text": "this thread and now we can see that the thread actually the ith voucher member of the thread is no longer zero it now",
    "start": "2035120",
    "end": "2041540"
  },
  {
    "text": "references the voucher and another",
    "start": "2041540",
    "end": "2048740"
  },
  {
    "text": "useful script is this drift which parses the voucher object itself now if you",
    "start": "2048740",
    "end": "2054050"
  },
  {
    "text": "look at the third member from the top IV Refs you can see the reference count is now 2 as expected right because we have one",
    "start": "2054050",
    "end": "2060740"
  },
  {
    "text": "reference from the map port and one reference from the thread so we have a reference count of two all right so now",
    "start": "2060740",
    "end": "2073460"
  },
  {
    "text": "we're stopped just after triggering the variability and we see that the reference count is now down from 2 to 1",
    "start": "2073460",
    "end": "2079270"
  },
  {
    "text": "now let's continue and we're now stopped",
    "start": "2079270",
    "end": "2089148"
  },
  {
    "text": "just after destroying the mach port so we now see that the reference count is",
    "start": "2089149",
    "end": "2094340"
  },
  {
    "text": "down again from 1 to 0 and the voucher is freed and it's memory is the it's",
    "start": "2094340",
    "end": "2099860"
  },
  {
    "text": "memory is freed and we can see that the first 8 bytes of the voucher are actually now a pointer value that points",
    "start": "2099860",
    "end": "2105950"
  },
  {
    "text": "to the next free buffer in the voucher allocation zone",
    "start": "2105950",
    "end": "2110500"
  },
  {
    "text": "but we can also see in the threat information that even though the voucher was de-allocated the the thread still references the",
    "start": "2117920",
    "end": "2124820"
  },
  {
    "text": "voucher so now when we continue execution and try to fetch the voucher from the thread we expect the kernel",
    "start": "2124820",
    "end": "2131210"
  },
  {
    "text": "panic because the the voucher is no longer valid",
    "start": "2131210",
    "end": "2135880"
  },
  {
    "text": "and indeed we got a kernel panic which has says OS reference count used",
    "start": "2136930",
    "end": "2143360"
  },
  {
    "text": "unsafely when 0 all right so this was a",
    "start": "2143360",
    "end": "2149240"
  },
  {
    "text": "demonstration of how simple it is to research foreign abilities some vulnerabilities using this project so we",
    "start": "2149240",
    "end": "2157040"
  },
  {
    "text": "talked about some select research stages we had to go through in order to implement this project now let's see",
    "start": "2157040",
    "end": "2164450"
  },
  {
    "text": "what's next for this project so one of the things we want to implement is to",
    "start": "2164450",
    "end": "2170510"
  },
  {
    "text": "implement IP communication currently we interact with the guest only through the serial interface but we want to connect",
    "start": "2170510",
    "end": "2177650"
  },
  {
    "text": "to it using SSH for to have a richer shell experience and to be able to copy files to and from the guest system we",
    "start": "2177650",
    "end": "2186020"
  },
  {
    "text": "want to support non RAM disk disks this is because currently the RAM disk that",
    "start": "2186020",
    "end": "2191450"
  },
  {
    "text": "is mounted as the root mount on the guest system is by default mounted by",
    "start": "2191450",
    "end": "2196610"
  },
  {
    "text": "the iOS kernel as read-only and we want to have a read and write route mount and",
    "start": "2196610",
    "end": "2203470"
  },
  {
    "text": "also it is limited in size and we want to have we want to have more data and",
    "start": "2203470",
    "end": "2209390"
  },
  {
    "text": "files on the root on the root mount and also it is very wasteful in resources",
    "start": "2209390",
    "end": "2217190"
  },
  {
    "text": "for the host computer so for these three reasons we want to have non ram disk",
    "start": "2217190",
    "end": "2222260"
  },
  {
    "text": "disk support we want to we also want to have more hardware devices we want to",
    "start": "2222260",
    "end": "2227660"
  },
  {
    "text": "support more hardware devices this string touch sound and everything else we want to load all the regular iOS",
    "start": "2227660",
    "end": "2234650"
  },
  {
    "text": "services that we removed from the launch demons directory right because we just wanted to before we just wanted to",
    "start": "2234650",
    "end": "2239990"
  },
  {
    "text": "execute bash without interference but now we want to have a full iOS system running with all its services so we want",
    "start": "2239990",
    "end": "2246350"
  },
  {
    "text": "to bring them all back we want to support more than a single CPU and then",
    "start": "2246350",
    "end": "2251450"
  },
  {
    "text": "drop controller we want to support more iOS versions and more iOS devices",
    "start": "2251450",
    "end": "2257180"
  },
  {
    "text": "including ones that use kto are in pack but since we made made no kernel patches",
    "start": "2257180",
    "end": "2262520"
  },
  {
    "text": "than we expect that supporting more versions will not be a very big challenge we want to write more gdb",
    "start": "2262520",
    "end": "2268910"
  },
  {
    "text": "scripts and Ghidorah plugins to make the research simpler and the main motivation",
    "start": "2268910",
    "end": "2274550"
  },
  {
    "text": "for starting this all was to conduct security research and we intend to do just that all right so if you found this",
    "start": "2274550",
    "end": "2283940"
  },
  {
    "text": "project interesting and useful you can find it on github and better yet you can contribute code to it on github have a",
    "start": "2283940",
    "end": "2289940"
  },
  {
    "text": "look at the issues to tackle posted on the github repository if you if you",
    "start": "2289940",
    "end": "2295160"
  },
  {
    "text": "indeed found it interesting you can find more research details which I did not have time to present and other research",
    "start": "2295160",
    "end": "2300290"
  },
  {
    "text": "projects on our blog and on Twitter and that brings us to the end I'd like to thank you all for your time and",
    "start": "2300290",
    "end": "2306170"
  },
  {
    "text": "attention today thank you any questions",
    "start": "2306170",
    "end": "2317530"
  },
  {
    "text": "you've mentioned that when mr. Chang ran his emulator on iPhone X he didn't have",
    "start": "2330359",
    "end": "2337240"
  },
  {
    "text": "any SMC calls so does this mean that the sole purpose of the secure is to implement the KDP is there no secure",
    "start": "2337240",
    "end": "2345849"
  },
  {
    "text": "world iPhone well the thing I know about",
    "start": "2345849",
    "end": "2353320"
  },
  {
    "text": "the security monitor that it implements kpp there might be other uses for it that I'm not aware of but this is what I",
    "start": "2353320",
    "end": "2360790"
  },
  {
    "text": "was able to gather about the secure monitor okay thank you",
    "start": "2360790",
    "end": "2368790"
  },
  {
    "text": "thank you for your your token and your work do you expect any legal difficulties with Apple yeah well I",
    "start": "2374200",
    "end": "2384550"
  },
  {
    "text": "don't think so well it's uh I don't think good at what we did was illegal and I don't think",
    "start": "2384550",
    "end": "2391330"
  },
  {
    "text": "they're gonna pursue anything regarding it but I'm basing this because on on the",
    "start": "2391330",
    "end": "2397600"
  },
  {
    "text": "fact that there are a lot of virtualization solutions out there not",
    "start": "2397600",
    "end": "2402820"
  },
  {
    "text": "for iOS but let's say for mac OS right there are a lot of solutions that implement virtualization for mac OS and",
    "start": "2402820",
    "end": "2409120"
  },
  {
    "text": "they're not pursuing an illegal action further for these projects and I wouldn't see why they would do it but",
    "start": "2409120",
    "end": "2416230"
  },
  {
    "text": "what the answer is that I don't know maybe they will",
    "start": "2416230",
    "end": "2421770"
  },
  {
    "text": "I wanted to ask if you have any kind of a timeline when the next steps might be",
    "start": "2436660",
    "end": "2442510"
  },
  {
    "text": "happening so well we're starting to work",
    "start": "2442510",
    "end": "2449200"
  },
  {
    "text": "hard on making this happen but it still involves a lot of research and it's not just like implementing features one",
    "start": "2449200",
    "end": "2455710"
  },
  {
    "text": "after the other we still worse we have a lot of good ideas how to implement this that these new features that I was",
    "start": "2455710",
    "end": "2461470"
  },
  {
    "text": "talking about but since it's a research project and we are not sure what will work and what not then it's hard to say",
    "start": "2461470",
    "end": "2467710"
  },
  {
    "text": "what timeline but I can say that we are working on it and we expect to advance",
    "start": "2467710",
    "end": "2472780"
  },
  {
    "text": "with it soon all right thank you very",
    "start": "2472780",
    "end": "2481660"
  },
  {
    "text": "much [Applause]",
    "start": "2481660",
    "end": "2489909"
  }
]