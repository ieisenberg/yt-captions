[
  {
    "start": "0",
    "end": "21000"
  },
  {
    "text": "hello everyone welcome to one of the first briefings of this year's black hat",
    "start": "30",
    "end": "5759"
  },
  {
    "text": "and we're going to talk to you about three punctuate it's a new exploitations",
    "start": "5759",
    "end": "11849"
  },
  {
    "text": "back sir that we've come up with and a PD stock you will know how you could use",
    "start": "11849",
    "end": "17070"
  },
  {
    "text": "three Fung Shui to break VM isolation using raw hammer before we start I'm",
    "start": "17070",
    "end": "22859"
  },
  {
    "start": "21000",
    "end": "68000"
  },
  {
    "text": "going to briefly mention who we are so my name is kava here is been grass and we're security",
    "start": "22859",
    "end": "29400"
  },
  {
    "text": "researchers in academia and this is a photo of us that you can see this is right after we submitted the flip",
    "start": "29400",
    "end": "35910"
  },
  {
    "text": "function work to use explore the first time and soon you're going to realize why we are so happy it's after a few",
    "start": "35910",
    "end": "41850"
  },
  {
    "text": "weeks of work and yeah and so we are a part of a larger security group in",
    "start": "41850",
    "end": "48390"
  },
  {
    "text": "Amsterdam in about 20 people or so and we publish offensive and defensive security research and also sometimes",
    "start": "48390",
    "end": "54690"
  },
  {
    "text": "software reliability and sometimes they think okay the attacks that we do or",
    "start": "54690",
    "end": "59940"
  },
  {
    "text": "defenses that we do might actually interest people in industry and this seems this we think is one of them we",
    "start": "59940",
    "end": "65338"
  },
  {
    "text": "hope that you think so too at the end of this talk all right so you should if you",
    "start": "65339",
    "end": "70619"
  },
  {
    "text": "were here last year in Amsterdam you might remember me I was here with Antonio sitting there and we're talking",
    "start": "70619",
    "end": "76229"
  },
  {
    "text": "about memory deduplication and how you could use it as a read primitive to select read information from a victim vm",
    "start": "76229",
    "end": "84000"
  },
  {
    "text": "that is on the same horse running with you and we told you how you can use it to break a SLR we are back again this",
    "start": "84000",
    "end": "90119"
  },
  {
    "text": "time it's memory deduplication but this time is physical we're going to show you how you can use memory deduplication to",
    "start": "90119",
    "end": "96020"
  },
  {
    "text": "manipulate physical memory of a victim vm so it could make targeted raw hammer",
    "start": "96020",
    "end": "101189"
  },
  {
    "text": "bit flips and we'll show you how you could use this to compromise OpenSSH so",
    "start": "101189",
    "end": "106579"
  },
  {
    "text": "there are a bunch of things that you're going to show you we're going to show you as I said and OpenSSH compromise",
    "start": "106579",
    "end": "112490"
  },
  {
    "text": "we're going to show you how you could use this pip function method to to",
    "start": "112490",
    "end": "117570"
  },
  {
    "text": "compromise apt-get and for GPG signature so that you know everything vm could install packages without without it",
    "start": "117570",
    "end": "123719"
  },
  {
    "text": "being border that it is not a package that you should install and all of these things that we are going to show you",
    "start": "123719",
    "end": "129239"
  },
  {
    "text": "they don't rely on any software box they only rely on a hardware and they all rely on weak assumptions so",
    "start": "129239",
    "end": "136350"
  },
  {
    "text": "basically if you have a vulnerable team which seems to be quite common about 90% of the themes that are sold today are",
    "start": "136350",
    "end": "142980"
  },
  {
    "text": "vulnerable to raw hammer as shown by the original raw hammer research and if you have memory deduplication turned on then",
    "start": "142980",
    "end": "148920"
  },
  {
    "text": "you're already vulnerable to flip punctuate and and we have been contacted by many companies that are worried about",
    "start": "148920",
    "end": "155220"
  },
  {
    "text": "this because they are using memory duplication and finally we're going to show you a demo we have actually",
    "start": "155220",
    "end": "160440"
  },
  {
    "text": "implemented three punctuate on multiple instances and we're going to show you a demo of one all right this I would like",
    "start": "160440",
    "end": "165959"
  },
  {
    "text": "to give floor to Ben who's going to tell you more about top lip function works great thank you very much Gary hello",
    "start": "165959",
    "end": "171989"
  },
  {
    "start": "171000",
    "end": "312000"
  },
  {
    "text": "everyone okay let me tell you a little bit about the outliner for the rest of this talk so then the first phase is",
    "start": "171989",
    "end": "178920"
  },
  {
    "text": "going to be let's forget about how it actually works and the exact technical details of how it works but let's just",
    "start": "178920",
    "end": "184650"
  },
  {
    "text": "say once it does work what how does this primitive work we've already been told",
    "start": "184650",
    "end": "189750"
  },
  {
    "text": "we can flip it you can we can corrupt memory in a co-hosted victim VM but what",
    "start": "189750",
    "end": "194910"
  },
  {
    "text": "exactly are the conditions under which it works is what how does this right primitive work as we're calling it how",
    "start": "194910",
    "end": "200580"
  },
  {
    "text": "does it work and what do I need to know to do it okay so once we know that let's",
    "start": "200580",
    "end": "206130"
  },
  {
    "text": "go into detail about how it works exactly so which techniques have to come together to make flippin sure you work",
    "start": "206130",
    "end": "212730"
  },
  {
    "text": "and and how come it works that way once",
    "start": "212730",
    "end": "218100"
  },
  {
    "text": "that so once we understand how it works and how we can apply it we're going to show you a whole bunch of interesting",
    "start": "218100",
    "end": "224370"
  },
  {
    "text": "demonstration attacks the first is going to be OpenSSH and we are going to be able to login using open search into a",
    "start": "224370",
    "end": "232290"
  },
  {
    "text": "victim VM given that we know the public key of the target we're going to be able",
    "start": "232290",
    "end": "237900"
  },
  {
    "text": "to generate our own private key and login you know totally according to the rules SH go and let us in because that's",
    "start": "237900",
    "end": "243120"
  },
  {
    "text": "what it's supposed to do when it's presented with the right key and once we're in going to show a couple of",
    "start": "243120",
    "end": "248820"
  },
  {
    "text": "example attacks of how could we then assuming that we're not root in the in the first instance how could we elevate",
    "start": "248820",
    "end": "254880"
  },
  {
    "text": "our privilege higher and what are the what are a number of possible attacks that we could do to do this also using",
    "start": "254880",
    "end": "260700"
  },
  {
    "text": "flipping shuri of course and a final attack is a the",
    "start": "260700",
    "end": "267030"
  },
  {
    "text": "apt-get subversion demo so the apt is apt as in the package management system",
    "start": "267030",
    "end": "272550"
  },
  {
    "text": "not as in the threat but its we're going to show you how we're going to be able to generate a GPG signature that apt-get",
    "start": "272550",
    "end": "279900"
  },
  {
    "text": "will fully accept as a legitimate signature on a on upgraded package",
    "start": "279900",
    "end": "285660"
  },
  {
    "text": "that's going to the victims going to install it just like it was a normal day and all of this we're going to use",
    "start": "285660",
    "end": "290970"
  },
  {
    "text": "accomplished without a software bug but just using this memory corruption primitives that we can tell you about okay Oh finally finally how what is the",
    "start": "290970",
    "end": "302930"
  },
  {
    "text": "disclosure what is the reception bin for this work that was the disclosure bin like and what do we think the takeaway",
    "start": "302930",
    "end": "309000"
  },
  {
    "text": "conclusion should be from this talk okay number one flippin should we add work so",
    "start": "309000",
    "end": "316320"
  },
  {
    "start": "312000",
    "end": "321000"
  },
  {
    "text": "let's forget about how it works for a second and tell you about what are the conditions that you that need to be true",
    "start": "316320",
    "end": "322830"
  },
  {
    "text": "for it to work and then and what can you do with it okay so what we're assuming is that you are and you are two VMs one",
    "start": "322830",
    "end": "331860"
  },
  {
    "text": "is the attacker this is you and one is the victim and we're on the same machine",
    "start": "331860",
    "end": "339330"
  },
  {
    "text": "and we're assuming that memory deduplication is turned on in the host and we're going to talk about that later",
    "start": "339330",
    "end": "345140"
  },
  {
    "text": "so what you are going to be able to do is if you know the contents of a target",
    "start": "345140",
    "end": "351510"
  },
  {
    "text": "page in the target VM you're going to be able to flip one bit almost any bits in",
    "start": "351510",
    "end": "357479"
  },
  {
    "text": "that target page so it's a one bit right primitive in a page you know the",
    "start": "357479",
    "end": "363390"
  },
  {
    "text": "contents of so this goes some way to explaining the name thing she is a",
    "start": "363390",
    "end": "370530"
  },
  {
    "text": "reference to the ancient Chinese philosophy of the harmonious organization of objects the modern",
    "start": "370530",
    "end": "377760"
  },
  {
    "text": "correspondent of Lovette for us is organizing physical memory so that the",
    "start": "377760",
    "end": "383970"
  },
  {
    "text": "ro hammer glitch will occur exactly where and when we wanted to win for that we use this memory organization",
    "start": "383970",
    "end": "390150"
  },
  {
    "text": "technique in this case in this case a memory duplication and the flip is",
    "start": "390150",
    "end": "396240"
  },
  {
    "text": "referenced to the rhymer glitch which flips a single bit so this right primitive is capable as",
    "start": "396240",
    "end": "402550"
  },
  {
    "text": "you can see in this diagram of breaking the isolation of virtualization of the",
    "start": "402550",
    "end": "408610"
  },
  {
    "text": "strongest possible virtualization available to us today isolation this",
    "start": "408610",
    "end": "413830"
  },
  {
    "text": "hardware virtualization so that is one of the significant outcomes of this work",
    "start": "413830",
    "end": "419139"
  },
  {
    "text": "so to take away from the slide should be if you know the contents of a target page in a victim VM you can write a",
    "start": "419139",
    "end": "427750"
  },
  {
    "text": "single bit to it change a single bits so it may be interesting exercise for you given that you want to subvert the",
    "start": "427750",
    "end": "434199"
  },
  {
    "text": "security of a victim vm what is the cleverest technique and the easiest technique you can think of you know",
    "start": "434199",
    "end": "440469"
  },
  {
    "text": "which which pays you know the contents of and which bit can I change that will help me with subverting this security",
    "start": "440469",
    "end": "446069"
  },
  {
    "text": "now we have plenty of nice examples of that but maybe you can think of a better",
    "start": "446069",
    "end": "451300"
  },
  {
    "text": "one how does it work so how does it work",
    "start": "451300",
    "end": "457050"
  },
  {
    "start": "452000",
    "end": "488000"
  },
  {
    "text": "we're assuming with two VMs on the same machine we're assuming that memory deduplication is turned on in the host",
    "start": "457050",
    "end": "462789"
  },
  {
    "text": "so that we can share we were going to share physical memory we assuming that Rho hammer works so going to tell you",
    "start": "462789",
    "end": "469300"
  },
  {
    "text": "about how this memory duplication worked how does how does Rho hammer work how and why you know and we're going to tell",
    "start": "469300",
    "end": "476349"
  },
  {
    "text": "you the basics about the RSA cryptosystem which is not relevant to flipping shuri but is very relevant to",
    "start": "476349",
    "end": "482979"
  },
  {
    "text": "the exam of the example attacks that we have later specifically SSH and GPG so",
    "start": "482979",
    "end": "491830"
  },
  {
    "start": "488000",
    "end": "580000"
  },
  {
    "text": "firstly firstly what is memory - duplication and how does it work and why",
    "start": "491830",
    "end": "498400"
  },
  {
    "text": "would given do it so let's say that we are again two VMs and we're both backed by the say by different our own private",
    "start": "498400",
    "end": "505210"
  },
  {
    "text": "memory so yeah so imagine that this is the virtual address space of one VM this turbocharger space of the other VM these",
    "start": "505210",
    "end": "511990"
  },
  {
    "text": "errors might indicate a virtual memory mapping from virtual to physical memory and so this is the physical backing",
    "start": "511990",
    "end": "518078"
  },
  {
    "text": "memory of the attacker VM this is the physical backing memory of the victim VM and they're totally literally isolated",
    "start": "518079",
    "end": "524890"
  },
  {
    "text": "every possible way now imagine we both store a copy of the Mona Lisa in memory",
    "start": "524890",
    "end": "531250"
  },
  {
    "text": "it's one let's say it's one page on leases there and we both have a copy of Mona Lisa also in our physical memory",
    "start": "531250",
    "end": "537430"
  },
  {
    "text": "now the host could realize this and without any harm to anyone yet it can",
    "start": "537430",
    "end": "543970"
  },
  {
    "text": "duplicate this page that which both sharing the same physical instance of the Mona Lisa so we both the point all",
    "start": "543970",
    "end": "550540"
  },
  {
    "text": "references to the Mona Lisa to the same single physical page nobody's the wiser but we've saved memory so many VM",
    "start": "550540",
    "end": "557200"
  },
  {
    "text": "hosting providers do this to save memory because you know there are many of the same pages if many of the same VMs are running the same operating system we can",
    "start": "557200",
    "end": "563560"
  },
  {
    "text": "save memory and get more customers on the same machine so how do we want to",
    "start": "563560",
    "end": "569860"
  },
  {
    "text": "use this well this is going to help us organize physical memories that we can",
    "start": "569860",
    "end": "575050"
  },
  {
    "text": "use ro hammer to target the damage however so to make no duplication",
    "start": "575050",
    "end": "582400"
  },
  {
    "start": "580000",
    "end": "639000"
  },
  {
    "text": "semantically sound we have to trap writes because if one of those owners of the page says oh right you know say I",
    "start": "582400",
    "end": "588100"
  },
  {
    "text": "want to write the curly mustache on Melissa the victim may not see this of course because he has not done the right",
    "start": "588100",
    "end": "593290"
  },
  {
    "text": "so would not be semantically sound so we have to redo placate this page the attacker I get the Mona Lisa my uncle",
    "start": "593290",
    "end": "600790"
  },
  {
    "text": "his manly side has a mustache the victim does not did not do the right search is the original and that's we call this",
    "start": "600790",
    "end": "607420"
  },
  {
    "text": "copy-on-write so that's the important part of how to",
    "start": "607420",
    "end": "612730"
  },
  {
    "text": "keep memory deduplication sound ok",
    "start": "612730",
    "end": "618630"
  },
  {
    "text": "brohamer so real hammer is a widely",
    "start": "618630",
    "end": "625900"
  },
  {
    "text": "occurring glitch in dim modules if so",
    "start": "625900",
    "end": "631450"
  },
  {
    "text": "let's see about these cells these cells are all this is the way memory is",
    "start": "631450",
    "end": "637090"
  },
  {
    "text": "organized in DRAM chips all of these little balls represent cells they're all",
    "start": "637090",
    "end": "643210"
  },
  {
    "text": "a single bit they represent a single bit and they're in hardware they're just a capacitor and in transistor and the",
    "start": "643210",
    "end": "651580"
  },
  {
    "text": "capacitor stores charge and the charge represents whether the bit is a 0 or a 1 now whenever and they're organized this",
    "start": "651580",
    "end": "657970"
  },
  {
    "text": "way in rows and whenever whenever the RAM controller wants to read from this",
    "start": "657970",
    "end": "663730"
  },
  {
    "text": "DRAM it has to be a row at a time and the source row is going to be copied to the road",
    "start": "663730",
    "end": "669030"
  },
  {
    "text": "buffer and that's where the memory controller can read the can read the data from as a side effect of this and",
    "start": "669030",
    "end": "675990"
  },
  {
    "text": "because the because the capacitors are so small they are leaking all the time and that's why they have to be refreshed",
    "start": "675990",
    "end": "681150"
  },
  {
    "text": "all the time you may have heard of this DRAM refresh time that's what it's doing you have to keep the bits on right now",
    "start": "681150",
    "end": "687510"
  },
  {
    "text": "as a side effect of copying this road to the road buffer the this the source row",
    "start": "687510",
    "end": "693210"
  },
  {
    "text": "is electrically emptied has to be recharged and as a side effect the neighboring rows also leak a little bit",
    "start": "693210",
    "end": "699720"
  },
  {
    "text": "more than otherwise now if you try to maximize this if you try to maximize",
    "start": "699720",
    "end": "705030"
  },
  {
    "text": "this by let's say you know Mona Lisa is stored in the middle row row I and we're",
    "start": "705030",
    "end": "712050"
  },
  {
    "text": "reading from the row above the Mona Lisa and the row below the Mona Lisa like this then a little bit of charge is",
    "start": "712050",
    "end": "717870"
  },
  {
    "text": "going to leak from them on Lisa row see from the middle row so if you do this over and over and over and over again",
    "start": "717870",
    "end": "723950"
  },
  {
    "text": "very quickly faster than the Refresh can happen then it could be that eventually",
    "start": "723950",
    "end": "729240"
  },
  {
    "text": "so much charge will leak from the middle row that a bit will actually change from zero to one because so much charge is",
    "start": "729240",
    "end": "735420"
  },
  {
    "text": "leaked we're interpreting that as a different bit now and then this happens oh my goodness so the model is has been",
    "start": "735420",
    "end": "743010"
  },
  {
    "text": "displaced by this bit flip right now row hammer is an unpredictable thing you",
    "start": "743010",
    "end": "748500"
  },
  {
    "text": "don't know when and where it will happen but we have found that it's quite repeatable it's quite deterministic so",
    "start": "748500",
    "end": "753720"
  },
  {
    "text": "if it happens in one place in a particular way if we do it again the same thing will happen the same bit is",
    "start": "753720",
    "end": "760320"
  },
  {
    "text": "likely to flip and this depends on the physical part of memory it's sort of positioned a space dependent phenomenon",
    "start": "760320",
    "end": "766380"
  },
  {
    "text": "so we find that if we go to a new piece of physical memory we are now in a new",
    "start": "766380",
    "end": "771420"
  },
  {
    "start": "770000",
    "end": "843000"
  },
  {
    "text": "piece of physical memory will do the same row hammer operation let's see you know what kind of damage is going to",
    "start": "771420",
    "end": "776430"
  },
  {
    "text": "occur now and it's the second bit flip in the Mona Lisa's defaced in a different way no the row is caused a",
    "start": "776430",
    "end": "783150"
  },
  {
    "text": "different kind of damage and this is the interpretation of Mona Lisa now imagine that we want a specific kind of damage",
    "start": "783150",
    "end": "789420"
  },
  {
    "text": "to occur which is the curly mustache that we saw earlier now let's go to yet",
    "start": "789420",
    "end": "794820"
  },
  {
    "text": "another piece of physical memory we tried the relevant operation in the same time",
    "start": "794820",
    "end": "800149"
  },
  {
    "text": "the same way and then we get the curly mustache that we wanted so now we know that if you want to cause this kind of",
    "start": "800149",
    "end": "806059"
  },
  {
    "text": "damage we have to do right hammer on this part of physical memory we call this templating we can't be forward but",
    "start": "806059",
    "end": "813110"
  },
  {
    "text": "flip happens but we can find so many different candidates that we can choose where the bit flip happens in within a",
    "start": "813110",
    "end": "819920"
  },
  {
    "text": "page offset and that's the important thing here if we can find within a page offset the right bit slip offset then we can control where the flip will happen",
    "start": "819920",
    "end": "826610"
  },
  {
    "text": "in the target VM and we and this is what we call in the later on this talk we're going to hit is probably more often we",
    "start": "826610",
    "end": "832249"
  },
  {
    "text": "can't all we're looking for the right bit flip that's what we mean by looking for the right bit find the right physical memory where Rho hammer gives a",
    "start": "832249",
    "end": "838699"
  },
  {
    "text": "corruption in the right page offset so let's how run my works now put the two",
    "start": "838699",
    "end": "844040"
  },
  {
    "start": "843000",
    "end": "922000"
  },
  {
    "text": "together and you can start to see how flipping surely works if you've picked a",
    "start": "844040",
    "end": "850329"
  },
  {
    "text": "target page in the victim VM and you've decided which bit you want to flip there then you find a piece of physical memory",
    "start": "850329",
    "end": "856910"
  },
  {
    "text": "that produces the right bit flip with respect to a page offset and then force the victim VM to use that part of",
    "start": "856910",
    "end": "863749"
  },
  {
    "text": "physical memory for his data and you can do this using memory deduplication",
    "start": "863749",
    "end": "870009"
  },
  {
    "text": "that has happened here the victim is storing the Mona Lisa in the same physical page as the attacker is and",
    "start": "870009",
    "end": "878179"
  },
  {
    "text": "we've been able to get we have forced a duplication to happen only after we've decided where we want the physical which",
    "start": "878179",
    "end": "886129"
  },
  {
    "text": "physical memory we wanted to use and we tested this first with Rho hammer now they're using the same physical memory",
    "start": "886129",
    "end": "891709"
  },
  {
    "text": "we do the attacker does Rho hammer in in his own VM and then you get the curly",
    "start": "891709",
    "end": "898069"
  },
  {
    "text": "mustache and of course they're all the same instance so the physical memory also gets the curly mustache and also",
    "start": "898069",
    "end": "903860"
  },
  {
    "text": "the victim therefore gets the query mustache and that's how you can have this reliable one bit right primitive",
    "start": "903860",
    "end": "908990"
  },
  {
    "text": "using low hammer and memory duplication and as you can see flippin Sheree breaks copy-on-write this very important",
    "start": "908990",
    "end": "915860"
  },
  {
    "text": "feature that was needed to make memory duplication semantically sound not to mention for security so there's those",
    "start": "915860",
    "end": "923629"
  },
  {
    "start": "922000",
    "end": "1117000"
  },
  {
    "text": "two things come together okay I would say I'll just recap the basics of RSA",
    "start": "923629",
    "end": "933230"
  },
  {
    "text": "and show you how we're going to use it to cause mischief with urbanization gbg",
    "start": "933230",
    "end": "938450"
  },
  {
    "text": "so RSA is a public key cryptosystem that means that whenever you have encryption",
    "start": "938450",
    "end": "946950"
  },
  {
    "text": "and decryption you use one key to encrypt but that key can only encrypt",
    "start": "946950",
    "end": "952800"
  },
  {
    "text": "and the other key that there in a pair the other care can only decrypt now the one the key that can encrypt you",
    "start": "952800",
    "end": "959250"
  },
  {
    "text": "typically call the public key because the nice property is it's safe to make this encryption key public is very",
    "start": "959250",
    "end": "964830"
  },
  {
    "text": "pleasant vapors property now the decryption key you keep private because",
    "start": "964830",
    "end": "970050"
  },
  {
    "text": "this is the one that can unlock the secrets that people are sending you and vice versa you can sign things with a",
    "start": "970050",
    "end": "975900"
  },
  {
    "text": "private key that can there that can be verified by everyone with the corresponding public key now that's also",
    "start": "975900",
    "end": "980940"
  },
  {
    "text": "very pleasant property because it means that signing things is also a proof of identity because you're the only person",
    "start": "980940",
    "end": "986430"
  },
  {
    "text": "you're supposed to have this private key now our se works using very big numbers",
    "start": "986430",
    "end": "992160"
  },
  {
    "text": "there 2048 let's say it's the could 2048 bit numbers let's say and you can be and",
    "start": "992160",
    "end": "999060"
  },
  {
    "text": "you can compute the private key from a public key by knowing the public keys factorization now of course we normally",
    "start": "999060",
    "end": "1004880"
  },
  {
    "text": "don't know the factorization of 2000 with numbers but during when we generate the key we just pick two very large",
    "start": "1004880",
    "end": "1010250"
  },
  {
    "text": "primes model all together and then we have the factorization of the public key because that's how we generated we can",
    "start": "1010250",
    "end": "1015530"
  },
  {
    "text": "very easily compute the corresponding private key we give the public key to the world go and encrypt and they they",
    "start": "1015530",
    "end": "1021830"
  },
  {
    "text": "can't figure out the private key because they can't factorize it because we generated to be very hard to factorize but we know that between at the private",
    "start": "1021830",
    "end": "1028550"
  },
  {
    "text": "key so that's the essence of our say the security rests in not being able to factorize public keys however if we",
    "start": "1028550",
    "end": "1039110"
  },
  {
    "text": "corrupt a public key using flipping Shoei and one bit is what it takes then the whole",
    "start": "1039110",
    "end": "1044600"
  },
  {
    "text": "world changes for RSA because we find here you see on the x-axis here is how",
    "start": "1044600",
    "end": "1050960"
  },
  {
    "text": "many different variants of the same number can you find so how many bits flips and different locations can you give me to test then if you have 50",
    "start": "1050960",
    "end": "1058580"
  },
  {
    "text": "different ones you're guaranteed for 2048 bit keys you already guaranteed to be able to factorize at least one of",
    "start": "1058580",
    "end": "1064700"
  },
  {
    "text": "them within an hour and one of them is takes we also find that that we can make",
    "start": "1064700",
    "end": "1073290"
  },
  {
    "text": "this cut off for factorization much lower so here is another indication of",
    "start": "1073290",
    "end": "1079140"
  },
  {
    "text": "trade off of so if you make the time at near sixty minutes then eventually you'll be able to factorize practically",
    "start": "1079140",
    "end": "1086150"
  },
  {
    "text": "any any of the variants but if you make the curve much less then it could be it",
    "start": "1086150",
    "end": "1091410"
  },
  {
    "text": "could be one minute or five minutes then you can also factorize practically all of them you just need more variance to",
    "start": "1091410",
    "end": "1098970"
  },
  {
    "text": "to get to one of them that you can so this these experiments made us think",
    "start": "1098970",
    "end": "1104370"
  },
  {
    "text": "well let's not bother too much for the factorization let's focus on getting many different bit tips and the key and eventually we'll get one that we can",
    "start": "1104370",
    "end": "1111390"
  },
  {
    "text": "factorize and therefore generate the corresponding private key colors remember we get to choose which bit we flip that's the nice thing about that",
    "start": "1111390",
    "end": "1118590"
  },
  {
    "text": "okay now that I've told you what about the background of how this flipping shoe is supposed to work and and the",
    "start": "1118590",
    "end": "1124320"
  },
  {
    "text": "important basics of RSA let me hand the floor to Kovac who can tell you all about how to cause mischief in opening",
    "start": "1124320",
    "end": "1130980"
  },
  {
    "text": "stage with this Thank You Ben all right so to recap now Ben told you all about",
    "start": "1130980",
    "end": "1136380"
  },
  {
    "start": "1132000",
    "end": "1157000"
  },
  {
    "text": "sleep Fung Shui and and also told you about RSA that what happens to RSA if",
    "start": "1136380",
    "end": "1141990"
  },
  {
    "text": "you do a bit flip now I want to briefly mention so we went through this thought process of what to what to attack right",
    "start": "1141990",
    "end": "1148050"
  },
  {
    "text": "so there are lots of things that you could attack if you have a targeted bit sleep but but since we have two so like",
    "start": "1148050",
    "end": "1153270"
  },
  {
    "text": "solo hammer doesn't happen so we can add them set to any beat any beat that we",
    "start": "1153270",
    "end": "1158880"
  },
  {
    "start": "1157000",
    "end": "1186000"
  },
  {
    "text": "want so we have to wait to find it bleed a bit sleep that is exploitable for us so we can target we can say I want that",
    "start": "1158880",
    "end": "1165510"
  },
  {
    "text": "it's asleep it's at that offset within a page and that's why we chose our essays because RSA if you if the public is",
    "start": "1165510",
    "end": "1171750"
  },
  {
    "text": "largely not it's going to cover a big part of the page a physical page that would mean that we get lots of",
    "start": "1171750",
    "end": "1176970"
  },
  {
    "text": "opportunities to be sleep if you have a probably key as our target all right",
    "start": "1176970",
    "end": "1182490"
  },
  {
    "text": "with this in mind let me tell you how the OpenSSH attack works so if you have",
    "start": "1182490",
    "end": "1189720"
  },
  {
    "start": "1186000",
    "end": "1355000"
  },
  {
    "text": "an open SSH server and typically probably many of you have done this right so you have an open SSH server and",
    "start": "1189720",
    "end": "1194790"
  },
  {
    "text": "you want to login so you generate you have your public RSA key pair and you take the the DES public",
    "start": "1194790",
    "end": "1200100"
  },
  {
    "text": "of the keypad is ours egg keeper and you're going to put it into this authorized key file of OpenSSH and every",
    "start": "1200100",
    "end": "1207000"
  },
  {
    "text": "time you want to now login using SSH you're going to you're going to use your private key and then the OpenSSH server",
    "start": "1207000",
    "end": "1214740"
  },
  {
    "text": "is going to do a challenge and response to make sure that you are indeed the owner of this public key one important",
    "start": "1214740",
    "end": "1220260"
  },
  {
    "text": "thing that happens during this challenge and response is that the OpenSSH server is going to read this authorized key",
    "start": "1220260",
    "end": "1225900"
  },
  {
    "text": "file from its file system and it's going to bring it into memory it's going to be giving to the page cache now there are a",
    "start": "1225900",
    "end": "1231929"
  },
  {
    "text": "number of nice things about about this this property one of them is that now",
    "start": "1231929",
    "end": "1237390"
  },
  {
    "text": "the authorized key files is in memory and which means that you can target it with three punctuate the other nice",
    "start": "1237390",
    "end": "1245190"
  },
  {
    "text": "property is that page cache is oftentimes page aligned so we don't have to worry about the alignment of this",
    "start": "1245190",
    "end": "1250679"
  },
  {
    "text": "public key so here you can see an example of a public key this is Ben's public key factor Isaac damaged and and",
    "start": "1250679",
    "end": "1260549"
  },
  {
    "text": "and then it is base64 encoding so and then we notice that around 800 or 900",
    "start": "1260549",
    "end": "1266159"
  },
  {
    "text": "which loops between a page becomes exploitable when it is when your public key which is a multiplication of two",
    "start": "1266159",
    "end": "1271770"
  },
  {
    "text": "large number is stored in memory so now",
    "start": "1271770",
    "end": "1277740"
  },
  {
    "text": "what the attack looks like is that the attacker is going to first the assumption is that we know this public",
    "start": "1277740",
    "end": "1283200"
  },
  {
    "text": "key now you seem so how come you know the public key of victim VM well there",
    "start": "1283200",
    "end": "1288510"
  },
  {
    "text": "are many possibilities for you to get this public key so you could for example give up provides this nice interface for",
    "start": "1288510",
    "end": "1293850"
  },
  {
    "text": "you to probe for any public key that you want so this is one way to get a public key and then the attacker will take this",
    "start": "1293850",
    "end": "1300510"
  },
  {
    "text": "public key and write it to its own memory and after a while the memory deduplication is going to see oh after a",
    "start": "1300510",
    "end": "1305880"
  },
  {
    "text": "few minutes there is a duplicate of this information these pages as now try to merge them and if you put this public",
    "start": "1305880",
    "end": "1312030"
  },
  {
    "text": "key in the right location in memory from the attacker point of view then this merging is going to put it in the location that we know there will be a",
    "start": "1312030",
    "end": "1318270"
  },
  {
    "text": "bit sleep that would let us factorize this public key and and once we have done is this bit flip has been showed",
    "start": "1318270",
    "end": "1325679"
  },
  {
    "text": "you with this nice graph it is going to be quite easy to factorize this public key and once you know the factors of",
    "start": "1325679",
    "end": "1330960"
  },
  {
    "text": "this public key is a single mathematical operation to get a private key so now if you want to login with this with this privately",
    "start": "1330960",
    "end": "1338380"
  },
  {
    "text": "new privacy the organization the OpenSSH server now this time is going to read from its page cache and it's going to",
    "start": "1338380",
    "end": "1344410"
  },
  {
    "text": "see the corrupted RS RS a public key which corresponds to our generated",
    "start": "1344410",
    "end": "1349809"
  },
  {
    "text": "privacy and then you can log in nicely so if you want to think about it conceptually so typically if you have so",
    "start": "1349809",
    "end": "1356799"
  },
  {
    "text": "likely the public key the original public as a key so it's really really hard to open this because it requires",
    "start": "1356799",
    "end": "1363190"
  },
  {
    "text": "immense computational power to factorize this public key to is to two primes but",
    "start": "1363190",
    "end": "1368890"
  },
  {
    "text": "once we do this bit flip it becomes quite easy to open this lock so in a sense it becomes quite easy to open this",
    "start": "1368890",
    "end": "1375340"
  },
  {
    "text": "lock and then you can easily log in so if you just replace the mona lisa picture that then was showing you from",
    "start": "1375340",
    "end": "1380890"
  },
  {
    "text": "the beginning with this public key now the same attack the three function attack with word now you might think",
    "start": "1380890",
    "end": "1387190"
  },
  {
    "text": "that you know this is like so like an academic attack and you know there are lots of pieces that need to work out for",
    "start": "1387190",
    "end": "1394000"
  },
  {
    "text": "this attack so we actually went on and implemented this on OpenSSH so here is a success probability graph on the y-axis",
    "start": "1394000",
    "end": "1400840"
  },
  {
    "text": "you can see like so we've implemented and we try this 200 times and on the y-axis you can see how many of these",
    "start": "1400840",
    "end": "1406929"
  },
  {
    "text": "select attacks succeeded over time which is on the x-axis an important thing to",
    "start": "1406929",
    "end": "1412360"
  },
  {
    "text": "notice is that you know after around 5 minutes about around here about 50% of the the attacks",
    "start": "1412360",
    "end": "1418150"
  },
  {
    "text": "successfully finish entrance we could login with our newly generated private key and and the reason for this is that",
    "start": "1418150",
    "end": "1424630"
  },
  {
    "text": "it is not like it's not a zero to one because we try with many different public keys and depending on how lucky",
    "start": "1424630",
    "end": "1429850"
  },
  {
    "text": "we are with the physical memory that we get allocated to then depending on these two factors we could do the entrance",
    "start": "1429850",
    "end": "1435970"
  },
  {
    "text": "attack sooner or later another interesting thing is that around 12 minutes you could see that around 85% of",
    "start": "1435970",
    "end": "1442750"
  },
  {
    "text": "the attack finish successfully from this point on there is no more successful attacks there are some issues with draw",
    "start": "1442750",
    "end": "1447850"
  },
  {
    "text": "hammer so sometimes so we have a reliability check that check for after 5 bit slips it would then choose this as a",
    "start": "1447850",
    "end": "1453549"
  },
  {
    "text": "target but sometimes we can't reproduce the bit slip so because we try again with a new piece of physical memory but",
    "start": "1453549",
    "end": "1460390"
  },
  {
    "text": "they haven't implemented it so but we think that if you spend a little bit more time ID you could make this even more reliable but even so 80% of",
    "start": "1460390",
    "end": "1467380"
  },
  {
    "text": "the 200 trials that is very successful so we think that it is quite the attack is quite real",
    "start": "1467380",
    "end": "1473370"
  },
  {
    "text": "so no no we have done the OpenSSH attack and then we are in the in the vp VM and",
    "start": "1473370",
    "end": "1479590"
  },
  {
    "text": "we're thinking okay what can we do with Lee Fong shui to escalate our privileges from a normal user to a root user and so",
    "start": "1479590",
    "end": "1486400"
  },
  {
    "text": "we came up with a bunch of targets that I'm going to briefly describe for you so the first one was is based on flipping",
    "start": "1486400",
    "end": "1493810"
  },
  {
    "text": "the page tables the keynote edge table pages that that basically map channel pages into the victims address space so",
    "start": "1493810",
    "end": "1500200"
  },
  {
    "text": "if you could manipulate those then it becomes quite easy to basically modify channel memory and once you can easily",
    "start": "1500200",
    "end": "1507040"
  },
  {
    "text": "modify channel memory from user space it becomes quite easy to escalate your privilege to route the other attack",
    "start": "1507040",
    "end": "1513310"
  },
  {
    "text": "relies on on corrupting filesystem information so there are some PI system information and there are some security",
    "start": "1513310",
    "end": "1518530"
  },
  {
    "text": "and sensitive data in there like for example the set UID bit if you could corrupt that bit then it also becomes",
    "start": "1518530",
    "end": "1523630"
  },
  {
    "text": "quite easy to so like target flip punctuate to make binary set UID and",
    "start": "1523630",
    "end": "1528970"
  },
  {
    "text": "then get through easily and more interestingly we think that the more interesting one is select corrupting",
    "start": "1528970",
    "end": "1535570"
  },
  {
    "text": "machine code so if we can select corrupt machine code we could switch some instructions so that we could pack some",
    "start": "1535570",
    "end": "1541840"
  },
  {
    "text": "security check so for example imagine that you have a pseudo binary at some point there's a machine code that gets",
    "start": "1541840",
    "end": "1547270"
  },
  {
    "text": "executed that checks whether your password was successful or not and and here if you could patch that test then",
    "start": "1547270",
    "end": "1553900"
  },
  {
    "text": "it becomes quite easy for us to login with a password which is not correct alright so I'm going to briefly go",
    "start": "1553900",
    "end": "1560230"
  },
  {
    "start": "1560000",
    "end": "1632000"
  },
  {
    "text": "through these so so the first the first attacked with the page tables what what",
    "start": "1560230",
    "end": "1565630"
  },
  {
    "text": "so remember that we three punctuate you need to know the content of the page that you want to target and one nice",
    "start": "1565630",
    "end": "1570940"
  },
  {
    "text": "thing about Linux channel page tables is that they're quite their content is quite predictable so that during early",
    "start": "1570940",
    "end": "1576550"
  },
  {
    "text": "boot cannot allocate some physical pages and this is something this is quite predictable and then it's going to put",
    "start": "1576550",
    "end": "1581740"
  },
  {
    "text": "this information into this data structure that is used for mapping mutual addresses to physical addresses and its content since it is predictable",
    "start": "1581740",
    "end": "1588730"
  },
  {
    "text": "it can be easily targeted by three punctuate so we will mimic a can on page",
    "start": "1588730",
    "end": "1593770"
  },
  {
    "text": "table and and once we want the memory deduplication takes place we do a bit in a location within the page table",
    "start": "1593770",
    "end": "1600450"
  },
  {
    "text": "if you look at the page if you open up the page tables there are a bunch of page table entries that map different locations we think that the between that",
    "start": "1600450",
    "end": "1607409"
  },
  {
    "text": "virtual address to physical addresses now each of these vegetable entries have a bit is called the supervisor bit and",
    "start": "1607409",
    "end": "1613049"
  },
  {
    "text": "so like decide which privilege ring you need to be to be able to manipulate these pages now if we believe that",
    "start": "1613049",
    "end": "1619649"
  },
  {
    "text": "supervisor bit they become quite easy from any user process to basically manipulate channel data and also can",
    "start": "1619649",
    "end": "1627720"
  },
  {
    "text": "mindful each channel data it becomes quite easy to get escalate your privileges the second attack relies on manipulating",
    "start": "1627720",
    "end": "1635970"
  },
  {
    "start": "1632000",
    "end": "1742000"
  },
  {
    "text": "I nodes so if you if you think of five systems like X before the oftentimes has",
    "start": "1635970",
    "end": "1642090"
  },
  {
    "text": "have this data structure that so like Maps has filed to a location between the",
    "start": "1642090",
    "end": "1648419"
  },
  {
    "text": "block device so there is a pointer in there that says this file is at this location within the block device there",
    "start": "1648419",
    "end": "1653759"
  },
  {
    "text": "are also some other information there's like access time like creation date like",
    "start": "1653759",
    "end": "1659039"
  },
  {
    "text": "whether it's su ID permissions and things like that but these are all information that you can instantly get by doing a simple LS on a binary but the",
    "start": "1659039",
    "end": "1667700"
  },
  {
    "text": "information that you don't know and you need to have to be able to do flee puncture is that pointer right and then",
    "start": "1667700",
    "end": "1673769"
  },
  {
    "text": "we notice that if you do an installation of any Ubuntu or Debian system this",
    "start": "1673769",
    "end": "1679320"
  },
  {
    "text": "location of these binaries are so like if you know the size of the disk which is also an information that you have a DF for example you know exactly where",
    "start": "1679320",
    "end": "1685799"
  },
  {
    "text": "that file is going to end up so you can also fabricate an inode and once you have fabricated and I know there are",
    "start": "1685799",
    "end": "1691049"
  },
  {
    "text": "there is like this set UID bits that you can sleep which would then allow your",
    "start": "1691049",
    "end": "1696210"
  },
  {
    "text": "your application to execute things as root so if you don't know set UID is this unique mechanism of like",
    "start": "1696210",
    "end": "1704580"
  },
  {
    "text": "implementing this privilege so that the applications that require routes only take this select privileged select",
    "start": "1704580",
    "end": "1712700"
  },
  {
    "text": "access during a very short period of time so you don't trust the entire binary you only trust a very small part",
    "start": "1712700",
    "end": "1718710"
  },
  {
    "text": "of this binary and programmers often times take extra care when writing is",
    "start": "1718710",
    "end": "1724289"
  },
  {
    "text": "this part so that it wouldn't become vulnerable to to exploit now bit slap on with sleep punctuate we could take any",
    "start": "1724289",
    "end": "1731159"
  },
  {
    "text": "almost any known binary and then we could sleep a bit make it set you I did not imagine if your VI is set UID what could you do can",
    "start": "1731159",
    "end": "1737980"
  },
  {
    "text": "basically do and it's almost anything that you want and easily upgrade your local access finally we also came up",
    "start": "1737980",
    "end": "1744880"
  },
  {
    "start": "1742000",
    "end": "1764000"
  },
  {
    "text": "with this interesting attack which is a bit flipping machine code so here is a sample source code that basically takes",
    "start": "1744880",
    "end": "1751240"
  },
  {
    "text": "as an input a password and checks whether the password is correct or not in this very v function so if you",
    "start": "1751240",
    "end": "1756789"
  },
  {
    "text": "provide secret as your password then the program is going to print okay if not",
    "start": "1756789",
    "end": "1762370"
  },
  {
    "text": "it's going to say fail and this is the original authors of this program it's quite simple right if you use garbage",
    "start": "1762370",
    "end": "1767740"
  },
  {
    "start": "1764000",
    "end": "1773000"
  },
  {
    "text": "it's going to save face but if you give it the correct password it's going to see it's going to say that it's all okay",
    "start": "1767740",
    "end": "1772780"
  },
  {
    "text": "now let's look at the so like the binary representation of this this program and",
    "start": "1772780",
    "end": "1777970"
  },
  {
    "start": "1773000",
    "end": "1982000"
  },
  {
    "text": "its disassembly so you're on the left side you're looking at the hex version of the binary and then here you're",
    "start": "1777970",
    "end": "1784299"
  },
  {
    "text": "looking at the disassembly let's try to bid rip some of these bits so look at line 3 here and I'm going to do a bit",
    "start": "1784299",
    "end": "1795010"
  },
  {
    "text": "flip now and suddenly you can see that the instruction is changing it's becoming an and now now let's do a",
    "start": "1795010",
    "end": "1800679"
  },
  {
    "text": "little bit more so this isn't a select the opcode if you do a little bit more",
    "start": "1800679",
    "end": "1805720"
  },
  {
    "text": "you can see that now the operands I start to change now most of these bits lips are not that good because because",
    "start": "1805720",
    "end": "1812200"
  },
  {
    "text": "they either result in to incorrect behavior or they're going to lead to program crashes but there is this one",
    "start": "1812200",
    "end": "1817929"
  },
  {
    "text": "here that if you manage to beat sleep it changes a Jay Z which is jump jump if 0",
    "start": "1817929",
    "end": "1824679"
  },
  {
    "text": "the result of the test was 0 to jump if the result of the test was not 0 now this is corresponding to that verify",
    "start": "1824679",
    "end": "1830200"
  },
  {
    "text": "function so basically if you do a bit flip at this opcode then suddenly we are reversing the condition of the test that",
    "start": "1830200",
    "end": "1837070"
  },
  {
    "text": "was checking for this password now that would mean that if you have this bill it's only if we pass this secret that",
    "start": "1837070",
    "end": "1842500"
  },
  {
    "text": "the original password is going to say same well if you pass the garbage is going to say ok so basically you could",
    "start": "1842500",
    "end": "1848890"
  },
  {
    "text": "use this this primitive to be trip to patch many of these security sensitive tests that you have in your in your",
    "start": "1848890",
    "end": "1854440"
  },
  {
    "text": "application and for example you could use it on sudo or other application like maybe even OpenSSH so like that bypass",
    "start": "1854440",
    "end": "1861909"
  },
  {
    "text": "the security test and this is also not going to be so easy to fix because most of the other stuff we can probably fix",
    "start": "1861909",
    "end": "1866919"
  },
  {
    "text": "by doing a checksum but this is binary getting executed by the processor and it becomes quite expensive to check this all the time",
    "start": "1866919",
    "end": "1874290"
  },
  {
    "text": "alright so now I've told you about the openness to fetch attack and the privilege escalation attack but one of",
    "start": "1874290",
    "end": "1880930"
  },
  {
    "text": "the requirements that they had and we didn't like was the fact that we needed to know that we needed to know the",
    "start": "1880930",
    "end": "1886390"
  },
  {
    "text": "public key of of the victim VM and you might say that you don't always have this information the public key and may",
    "start": "1886390",
    "end": "1892960"
  },
  {
    "text": "make the attack a little bit more impractical than than it needs to be so we were going through this exercise of",
    "start": "1892960",
    "end": "1899350"
  },
  {
    "text": "thinking can we do an attack that is completely zero knowledge so if you don't know anything about the victim can",
    "start": "1899350",
    "end": "1905410"
  },
  {
    "text": "you still use three punctuate to basically compromise it and when here is going to tell you about how this works",
    "start": "1905410",
    "end": "1912360"
  },
  {
    "text": "thank you thank you okay so in these the",
    "start": "1912360",
    "end": "1919420"
  },
  {
    "text": "the final example text we're gonna include including a video demo is a is",
    "start": "1919420",
    "end": "1929370"
  },
  {
    "text": "going to have the goal is we're going to assume that our victim is running the apt-get package management system so",
    "start": "1929370",
    "end": "1936100"
  },
  {
    "text": "let's say it's in the boot Debian machine or the buta machine and we assume that on a regular basis our",
    "start": "1936100",
    "end": "1944680"
  },
  {
    "text": "victim does you have to get update and apt-get upgrade maybe it's even automatic nightly thing which i think is",
    "start": "1944680",
    "end": "1950800"
  },
  {
    "text": "quite common so using in this scenario we want to make the victim go to our",
    "start": "1950800",
    "end": "1958660"
  },
  {
    "text": "repository fetch the index file repository install our malicious not",
    "start": "1958660",
    "end": "1966250"
  },
  {
    "text": "authentic package we're going to do core utils UN plus 1 backdoor LS and where I",
    "start": "1966250",
    "end": "1972940"
  },
  {
    "text": "have installed and all of these checks are going to have to pass totally normally like it's a totally normal day",
    "start": "1972940",
    "end": "1978990"
  },
  {
    "text": "so let's say let's talk about how how",
    "start": "1978990",
    "end": "1984700"
  },
  {
    "start": "1982000",
    "end": "2032000"
  },
  {
    "text": "apt works a little bit so apt-get has an e-2c app source that list there's this",
    "start": "1984700",
    "end": "1991480"
  },
  {
    "text": "list of repositories that it goes to two URLs it's a list of URLs of repositories",
    "start": "1991480",
    "end": "1999040"
  },
  {
    "text": "where the package indexes are stored so whenever you do an app get update it's going to go through all those URLs",
    "start": "1999040",
    "end": "2006090"
  },
  {
    "text": "to fetch all the new indexes and see what the new packages are or what new versions are referencing and then and",
    "start": "2006090",
    "end": "2011160"
  },
  {
    "text": "then you can upgrade them or move them or whatever you want but this is where that's where the master lists are",
    "start": "2011160",
    "end": "2018920"
  },
  {
    "text": "another important part of Apps get and an important part of its security is this keyring this et Cie apps trusted of",
    "start": "2019970",
    "end": "2027030"
  },
  {
    "text": "GPG is a GPG keyring file that contains public keys that a p2p trusts to",
    "start": "2027030",
    "end": "2033929"
  },
  {
    "start": "2032000",
    "end": "2114000"
  },
  {
    "text": "authenticate packages so it's a very nice end-to-end test that apt is built-in so it's test both of",
    "start": "2033929",
    "end": "2040980"
  },
  {
    "text": "authenticity and of integrity because whenever a package would be produced by",
    "start": "2040980",
    "end": "2046050"
  },
  {
    "text": "a malicious person they of course don't have a key that corresponds to any key in the keyring so they can't make a good",
    "start": "2046050",
    "end": "2051898"
  },
  {
    "text": "signature and if the package were to be damaged in downloading then the things",
    "start": "2051899",
    "end": "2058378"
  },
  {
    "text": "you would also not match that's a very good authenticity and integrity test that deeply is used for and so nice to",
    "start": "2058379",
    "end": "2064590"
  },
  {
    "text": "end-to-end you know it doesn't matter where you got from you might have to test if the repository is trusted or not now you just test with and see the",
    "start": "2064590",
    "end": "2070260"
  },
  {
    "text": "signatures trust or not so that makes it really nice and end-to-end however if",
    "start": "2070260",
    "end": "2075840"
  },
  {
    "text": "you wanna subvert the security then we're going to have to do using flippin Cherie then we find that we can do two",
    "start": "2075840",
    "end": "2082590"
  },
  {
    "text": "bit flips to subvert this security so number one we want to flip a bit in the",
    "start": "2082590",
    "end": "2089340"
  },
  {
    "text": "sources that list file and and using just one bit we're going to able to",
    "start": "2089340",
    "end": "2094860"
  },
  {
    "text": "steer the victim from the real repositories to our malicious repository so in the URL might say HTTP colon slash",
    "start": "2094860",
    "end": "2104040"
  },
  {
    "text": "slash security boon TOCOM slash bla bla location and we're going to change that",
    "start": "2104040",
    "end": "2110160"
  },
  {
    "text": "to exactly the same URL but a different domain name so all of these bit flips all of these domain names that are one",
    "start": "2110160",
    "end": "2116790"
  },
  {
    "start": "2114000",
    "end": "2263000"
  },
  {
    "text": "bit fit away like boom 500 or something I think is one of them and boo-boo comm",
    "start": "2116790",
    "end": "2123270"
  },
  {
    "text": "with registered them by the way just for any other precaution but never launch them so we are none of the real owners",
    "start": "2123270",
    "end": "2131430"
  },
  {
    "text": "want them so we are starting an auction after this lesson half of this book for you know highest",
    "start": "2131430",
    "end": "2137040"
  },
  {
    "text": "bidder gets them so we've we've registered you boo-boo comm if you find",
    "start": "2137040",
    "end": "2143550"
  },
  {
    "text": "the right bit flip we can send the victim to Boone pure calm because we can change the Dominion that's looking for",
    "start": "2143550",
    "end": "2148590"
  },
  {
    "text": "in the in the file system cache and we want to do it this way because then we don't have to write on any funny tricks",
    "start": "2148590",
    "end": "2154110"
  },
  {
    "text": "like no DNS spoofing the connection hijacking no getting lucky with network interception it's just a totally normal",
    "start": "2154110",
    "end": "2159840"
  },
  {
    "text": "DNS lookup totally legitimate DNS lookup to legitimate domain to our malicious repository and that's where they end up",
    "start": "2159840",
    "end": "2166980"
  },
  {
    "text": "them now if we manage to end if we manage to send our victim to our",
    "start": "2166980",
    "end": "2173250"
  },
  {
    "text": "malicious repository that we still can't trick them into inter fetching the malicious package because the GPG",
    "start": "2173250",
    "end": "2179640"
  },
  {
    "text": "signature is not right so what we can do is also flip a bit in the transitive jpg",
    "start": "2179640",
    "end": "2188850"
  },
  {
    "text": "file and just to remind you these files are stock installs right so we're assuming we can it's very easy to",
    "start": "2188850",
    "end": "2194370"
  },
  {
    "text": "predict the contents of these things because they're all the same after installation that's why flipping shuri so applicable",
    "start": "2194370",
    "end": "2200250"
  },
  {
    "text": "here and because it's easier to get the contents of these files now if we flip a",
    "start": "2200250",
    "end": "2206700"
  },
  {
    "text": "bit in the public Keys listed in trusted GPG the 4096 bit keys but still so it's",
    "start": "2206700",
    "end": "2213330"
  },
  {
    "text": "harder to factorize the nest h keys but still 5% of the all the possible bit flips we were able to factorize in the",
    "start": "2213330",
    "end": "2221340"
  },
  {
    "text": "and gate and therefore get the corresponding private keys so if you flip if you manage the bits of any of",
    "start": "2221340",
    "end": "2226860"
  },
  {
    "text": "those we can make a good signature that GPG will totally trust because it's supposed to because the corresponding",
    "start": "2226860",
    "end": "2234360"
  },
  {
    "text": "public key is entrusted out GPG so that's how you can see no bugs of GPG or",
    "start": "2234360",
    "end": "2239460"
  },
  {
    "text": "any other trickery we're involved it's all quite legitimate if you change these things so we can use this computer",
    "start": "2239460",
    "end": "2246270"
  },
  {
    "text": "private key and and because we can we can pre-compute many of the",
    "start": "2246270",
    "end": "2251310"
  },
  {
    "text": "factorizations because the because the public keys are stock stock installs are years old you know boo to archive",
    "start": "2251310",
    "end": "2258750"
  },
  {
    "text": "signing keys and crafting so let me show you the video demo that well of this",
    "start": "2258750",
    "end": "2264810"
  },
  {
    "start": "2263000",
    "end": "2293000"
  },
  {
    "text": "this is a video demo it's it was originally a 20 minutes long but answered down to two half",
    "start": "2264810",
    "end": "2271930"
  },
  {
    "text": "minutes not because we play any tricks but just because treatments too long and we just",
    "start": "2271930",
    "end": "2277809"
  },
  {
    "text": "could've won show you the interesting parts okay",
    "start": "2277809",
    "end": "2285099"
  },
  {
    "text": "I'm going to occasionally interrupt this and talk over the talk over what's",
    "start": "2285099",
    "end": "2291460"
  },
  {
    "text": "happening because it's quite free okay here we go",
    "start": "2291460",
    "end": "2297630"
  },
  {
    "text": "okay can you see here this is the attacker he's doing all these he's doing",
    "start": "2297630",
    "end": "2304509"
  },
  {
    "text": "row hammer this is the victim and the victim is doing totally normal victim things here apt-get update and apt-get",
    "start": "2304509",
    "end": "2310210"
  },
  {
    "text": "upgrade and we're going to show you what's like before during and after the various bits clips that we're going to",
    "start": "2310210",
    "end": "2316239"
  },
  {
    "text": "do ah there's requests to turn down the",
    "start": "2316239",
    "end": "2322150"
  },
  {
    "text": "light step possible thank you is that better yeah okay okay okay so",
    "start": "2322150",
    "end": "2330999"
  },
  {
    "text": "here's the victim so let's first see before we do any funny business we're",
    "start": "2330999",
    "end": "2336670"
  },
  {
    "text": "going to make the victim do normal AB get update and apt-get upgrade and show",
    "start": "2336670",
    "end": "2343059"
  },
  {
    "text": "you that there's nothing going on in the malicious this is our malicious repository this is the web server log of the malicious repository so there's no",
    "start": "2343059",
    "end": "2349569"
  },
  {
    "text": "funny business going on huh so this update happening",
    "start": "2349569",
    "end": "2357170"
  },
  {
    "text": "no activity here here little controller sources properly assisted so the sort of",
    "start": "2357170",
    "end": "2364520"
  },
  {
    "text": "the list presenting admits that now that means that the that the victim is going to be able to be sent to our malicious",
    "start": "2364520",
    "end": "2370670"
  },
  {
    "text": "repository so let's see if that's going to work now the duplication is going to happen with the first lift lift and then when",
    "start": "2370670",
    "end": "2377780"
  },
  {
    "text": "the duplication happens the source of this file is changed so let's see what",
    "start": "2377780",
    "end": "2384380"
  },
  {
    "text": "happens when we do not get update alright so now you have the DVD on our",
    "start": "2384380",
    "end": "2391070"
  },
  {
    "text": "religious repository great now GPG is saying I'm not going I found a funny package the see which is not right I'm",
    "start": "2391070",
    "end": "2397610"
  },
  {
    "text": "not going to install it for us to upgrade and see what happens no package",
    "start": "2397610",
    "end": "2403370"
  },
  {
    "text": "to upgrade it's just as it's supposed to do now the next step is been looking for",
    "start": "2403370",
    "end": "2409550"
  },
  {
    "text": "a bit the G key of the trusted DG keyring because if you could do that to",
    "start": "2409550",
    "end": "2416030"
  },
  {
    "text": "find the right one then you can use one of our pre computed private to use to generate a signature we find a bit",
    "start": "2416030",
    "end": "2421490"
  },
  {
    "text": "deduplication is happening oh my goodness",
    "start": "2421490",
    "end": "2426040"
  },
  {
    "text": "okay the Siletz actually happen now so now we see that in the outfit here",
    "start": "2428940",
    "end": "2434130"
  },
  {
    "text": "you know which that has happened and we select this bit flip here it's a page",
    "start": "2434130",
    "end": "2439990"
  },
  {
    "text": "offset so that our malicious repository knows which private key to pick to sign to sign the package and generate the",
    "start": "2439990",
    "end": "2446590"
  },
  {
    "text": "repository oh my goodness so what happens when we",
    "start": "2446590",
    "end": "2453940"
  },
  {
    "text": "do the update now [Music] I don't know",
    "start": "2453940",
    "end": "2461050"
  },
  {
    "text": "but remember we're going to backdoor LS and we're going back to our core utils and specifically or less so let's show",
    "start": "2461280",
    "end": "2467310"
  },
  {
    "text": "you the normal behavior of SAS here's LS I'm puking widows output let's just say some bunch of random files in someone's",
    "start": "2467310",
    "end": "2473850"
  },
  {
    "text": "home directory but is it going to change that through the upgrade upgrade happens",
    "start": "2473850",
    "end": "2479820"
  },
  {
    "text": "is then except for signature you know my goodness it's good example signature and now if it happens what happens LS its",
    "start": "2479820",
    "end": "2486180"
  },
  {
    "text": "back doors thank you very much ok so",
    "start": "2486180",
    "end": "2500220"
  },
  {
    "text": "that's a demonstration of the up get attack video open search attack and of",
    "start": "2500220",
    "end": "2509130"
  },
  {
    "text": "enough this thing also also the unedited version is available on the website which I'll show you which I'll show you",
    "start": "2509130",
    "end": "2515790"
  },
  {
    "text": "later okay so how has the reception of",
    "start": "2515790",
    "end": "2521540"
  },
  {
    "text": "this work bin the reception the we have",
    "start": "2521540",
    "end": "2527370"
  },
  {
    "text": "been lucky enough that the NCSE is the Dutch not a national cybersecurity center has we have has done disclosure",
    "start": "2527370",
    "end": "2537240"
  },
  {
    "start": "2533000",
    "end": "2584000"
  },
  {
    "text": "first it is a very thorough professional job they content they've contact their counterparts in other countries and they",
    "start": "2537240",
    "end": "2543990"
  },
  {
    "text": "have notified a redhead Oracle's n VMware DB n as the OS vendors sorry",
    "start": "2543990",
    "end": "2550190"
  },
  {
    "text": "redhead or Cosette and VMware as the hypervisor vendors given and able to as the West vendors and open stage and gbgs",
    "start": "2550190",
    "end": "2558780"
  },
  {
    "text": "application vendor so you can see this kind of the software stack which are in are affected by this work and are in the",
    "start": "2558780",
    "end": "2565350"
  },
  {
    "text": "position to do mitigation and GPG they all of the vendors gave an appropriate response before the time that this work",
    "start": "2565350",
    "end": "2573030"
  },
  {
    "text": "became public and gbg was the first to respond with a mitigation commit so of course we're very happy about that so",
    "start": "2573030",
    "end": "2581390"
  },
  {
    "start": "2584000",
    "end": "2956000"
  },
  {
    "text": "what should the conclusion be that we think that you should take away from this work so we see",
    "start": "2584450",
    "end": "2591630"
  },
  {
    "text": "that technique stop recruiting it breaks harder the isolation that hardware-based",
    "start": "2591630",
    "end": "2597870"
  },
  {
    "text": "virtualization is supposed to offer us because the in DRAM and not going to CPU",
    "start": "2597870",
    "end": "2604130"
  },
  {
    "text": "now we always knew we'd long known that co-hosting VMs is risky just like how I",
    "start": "2604130",
    "end": "2610110"
  },
  {
    "text": "showed you in his in his talk last year until we know about many side channels",
    "start": "2610110",
    "end": "2616740"
  },
  {
    "text": "deduplicated deduplication is a source of a side channel CPU cache it acts as a",
    "start": "2616740",
    "end": "2623430"
  },
  {
    "text": "source of sake on that allow you to leak very sensitive information even across VM boundaries intercept VM conditions",
    "start": "2623430",
    "end": "2629940"
  },
  {
    "text": "but this is the first work that shows that you can under these conditions do a reliable have a reliable single bit",
    "start": "2629940",
    "end": "2636390"
  },
  {
    "text": "right primitive in a target VM with which as you can see has a far-reaching",
    "start": "2636390",
    "end": "2642270"
  },
  {
    "text": "security consequences so of course we are recommending that everyone stick to",
    "start": "2642270",
    "end": "2647790"
  },
  {
    "text": "the most straightforward mitigation which is disabling memory deduplication which a couple of Dutch at least that we",
    "start": "2647790",
    "end": "2654360"
  },
  {
    "text": "know of cloud providers have done as a result of this work they weren't happy about it but they take it seriously",
    "start": "2654360",
    "end": "2660030"
  },
  {
    "text": "enough that they did this now this is the URL of our research group Lucic is",
    "start": "2660030",
    "end": "2665730"
  },
  {
    "text": "the free university system security research group in Amsterdam and this URL",
    "start": "2665730",
    "end": "2671820"
  },
  {
    "text": "is the project page for this for this particular project so there's lots of backer information there an academic",
    "start": "2671820",
    "end": "2677220"
  },
  {
    "text": "paper many video demos one minute introduction video and lots of links to",
    "start": "2677220",
    "end": "2683850"
  },
  {
    "text": "how the media has received this work so take a look there if you're interested that's all from us thank you for your",
    "start": "2683850",
    "end": "2689940"
  },
  {
    "text": "attention [Applause]",
    "start": "2689940",
    "end": "2695828"
  },
  {
    "text": "we are available now for questions if you wish you need to shout and repeat",
    "start": "2696540",
    "end": "2708460"
  },
  {
    "text": "the call yeah so unfortunately there's no roving mic but please go ahead",
    "start": "2708460",
    "end": "2714270"
  },
  {
    "text": "it has tits the question that that the victim has to do manually apt-get yes",
    "start": "2725340",
    "end": "2731640"
  },
  {
    "text": "absolutely so we are indeed relying on the fact that the victim is doing the app gets in its own in its own time and",
    "start": "2731640",
    "end": "2739260"
  },
  {
    "text": "gets a upgrade but we're assuming that either we can predict this or we simply do this this probing so often that",
    "start": "2739260",
    "end": "2745980"
  },
  {
    "text": "sooner or later we're going to catch it we have lots of opportunity to do this also like usually in the cron grunt is",
    "start": "2745980",
    "end": "2751860"
  },
  {
    "text": "often updating is run as a cron job so we know already okay yeah it's going to happen sooner or later yes please how",
    "start": "2751860",
    "end": "2769080"
  },
  {
    "text": "much time did it right how much time did it take for companies to respond with",
    "start": "2769080",
    "end": "2774900"
  },
  {
    "text": "the fix to this adequately in the case of GPG that were very fast they're just a few weeks let me think some of the",
    "start": "2774900",
    "end": "2782700"
  },
  {
    "text": "cloud hosting providers they were also quite fast in turning off the duplication all of the hypervisor",
    "start": "2782700",
    "end": "2787770"
  },
  {
    "text": "vendors in the most in some cases they said we've already warned our customers",
    "start": "2787770",
    "end": "2793200"
  },
  {
    "text": "about the danger we're not going to do anything further some of them update the documentation say it's riskier it was risky already",
    "start": "2793200",
    "end": "2800130"
  },
  {
    "text": "now it's even riskier so for the most part we did actually have any vendors",
    "start": "2800130",
    "end": "2805350"
  },
  {
    "text": "we've actually fixed it for real we the hypervisor vendor response for the most",
    "start": "2805350",
    "end": "2811380"
  },
  {
    "text": "part has been change documentation and the OS vendors have said may and application vendors have said for the",
    "start": "2811380",
    "end": "2817800"
  },
  {
    "text": "most part also may so we're already quite happy that they disabled the basically they patched the the GPG to",
    "start": "2817800",
    "end": "2824700"
  },
  {
    "text": "fix it we wanted OpenSSH to also do this but it didn't happen yes please yeah I",
    "start": "2824700",
    "end": "2838579"
  },
  {
    "text": "see what you mean I see what you mean the question is with this templating you can only do one bit of time but how far",
    "start": "2846110",
    "end": "2852600"
  },
  {
    "text": "can you get can you can you corrupt can you completely change the page to whatever you want",
    "start": "2852600",
    "end": "2858860"
  },
  {
    "text": "answer that is a it has with the intricacies of because of the way the duplication works after the duplication",
    "start": "2858860",
    "end": "2865820"
  },
  {
    "text": "happens once the physical address will never change the physical picture will never change again it ends up in the",
    "start": "2865820",
    "end": "2871370"
  },
  {
    "text": "case I'm stable tree and after that the physical page will never change and because of that that's the template",
    "start": "2871370",
    "end": "2878420"
  },
  {
    "text": "we're stuck with so that's why in this particular implementation at least we",
    "start": "2878420",
    "end": "2883940"
  },
  {
    "text": "can only do per page we can only change one way that's the only thing that we rely on at least so but but the offset",
    "start": "2883940",
    "end": "2890090"
  },
  {
    "text": "is basically depends on how vulnerable the DRAM is right so in one of the tests that that we have been noticed that you",
    "start": "2890090",
    "end": "2895700"
  },
  {
    "text": "could almost like flip any bit within the page after like an hour or so yeah",
    "start": "2895700",
    "end": "2904610"
  },
  {
    "text": "so it depends quite a bit on how vulnerable the DRAM is in the sector that we are running we could do like 28,000 Billups of the 32,000 so a page",
    "start": "2904610",
    "end": "2912710"
  },
  {
    "text": "is 4096 bytes 8 bits vector bytes or 32 thousand possibilities about 32 thousand",
    "start": "2912710",
    "end": "2918440"
  },
  {
    "text": "possibilities and we could do 28,000 in this test but that we had but depending on the vulnerability of the deem you",
    "start": "2918440",
    "end": "2924110"
  },
  {
    "text": "could get those much faster or you could get them much much slower or not at all",
    "start": "2924110",
    "end": "2929800"
  },
  {
    "text": "yes please",
    "start": "2930280",
    "end": "2933430"
  },
  {
    "text": "that's right okay so the question so",
    "start": "2935590",
    "end": "2948530"
  },
  {
    "text": "this question is the template pinned on where in physical memory you are right",
    "start": "2948530",
    "end": "2956120"
  },
  {
    "start": "2956000",
    "end": "3032000"
  },
  {
    "text": "and we wait hammer so how did you have you predict where the template all right",
    "start": "2956120",
    "end": "2962270"
  },
  {
    "text": "so do you characterize all of the memory NV in the in your own VM first or how do",
    "start": "2962270",
    "end": "2968270"
  },
  {
    "text": "you do that and the answer is indeed that's that's what we did so we find as soon as we know the page that we want to",
    "start": "2968270",
    "end": "2974600"
  },
  {
    "text": "corrupt and as soon as we know the offset within that page the bit that we want to corrupt then we go and do row",
    "start": "2974600",
    "end": "2980840"
  },
  {
    "text": "hammer in our own VM over over and over and over just and so long as that so",
    "start": "2980840",
    "end": "2986960"
  },
  {
    "text": "long as we need until we find one of the possible offsets often times we want not one particular",
    "start": "2986960",
    "end": "2992650"
  },
  {
    "text": "one but a range of ones and we J we do sort of make a meet in the middle of",
    "start": "2992650",
    "end": "2998760"
  },
  {
    "text": "here here all the bits became corrupt here all the factorizations we can do and as soon as we one meets the other",
    "start": "2998760",
    "end": "3004380"
  },
  {
    "text": "then we indicated OpenSSH we we have your question satisfactory",
    "start": "3004380",
    "end": "3011630"
  },
  {
    "text": "so basically attack ourselves first to see which fits exactly annoyed before actually putting their target data their",
    "start": "3011630",
    "end": "3018030"
  },
  {
    "text": "application to measure do we have time for more we have no time for more I",
    "start": "3018030",
    "end": "3023520"
  },
  {
    "text": "think is it right okay but you can come across in private of course yes thank",
    "start": "3023520",
    "end": "3029550"
  },
  {
    "text": "you for your attention [Applause]",
    "start": "3029550",
    "end": "3034780"
  }
]