[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "[Music]",
    "start": "380",
    "end": "13120"
  },
  {
    "text": "hello everyone thank you for view attending our talk today neil and i will present the results of",
    "start": "13120",
    "end": "18960"
  },
  {
    "text": "our research on automated firmware analysis uh research that we conducted together with these amazing people that you see",
    "start": "18960",
    "end": "25519"
  },
  {
    "text": "listed in this slide why should we analyze firmware well i'm sure that if you attend this",
    "start": "25519",
    "end": "32238"
  },
  {
    "start": "27000",
    "end": "53000"
  },
  {
    "text": "talk i don't need to explain and convince you that iot devices are nowadays extremely popular",
    "start": "32239",
    "end": "37520"
  },
  {
    "text": "and there exists a very large amount of different devices smart toasters smart lights smart",
    "start": "37520",
    "end": "43600"
  },
  {
    "text": "switches and now we also have a smart x-ray it's not clear to me what this is supposed to do",
    "start": "43600",
    "end": "50719"
  },
  {
    "text": "but anyways the common thing is that we have seen that the film we're running on these devices is often",
    "start": "50719",
    "end": "55920"
  },
  {
    "start": "53000",
    "end": "81000"
  },
  {
    "text": "vulnerable and not only these devices contain dangerous vulnerabilities but we have",
    "start": "55920",
    "end": "61440"
  },
  {
    "text": "seen these vulnerabilities being exploited by attackers in the wild and here the most famous",
    "start": "61440",
    "end": "67520"
  },
  {
    "text": "example is probably the mirai botnet where thousands of iot devices were compromised to perform a",
    "start": "67520",
    "end": "75040"
  },
  {
    "text": "large distributed denial of service attack now one interesting thing is that",
    "start": "75040",
    "end": "81920"
  },
  {
    "start": "81000",
    "end": "113000"
  },
  {
    "text": "many of these vulnerabilities that we see in this device are actually quite all types of vulnerabilities",
    "start": "81920",
    "end": "86960"
  },
  {
    "text": "things that we have known for a long time and for which attackers do not really need any sophisticated",
    "start": "86960",
    "end": "93280"
  },
  {
    "text": "exploitation technique and in fact firmware often does not present many of",
    "start": "93280",
    "end": "99680"
  },
  {
    "text": "the protection mechanisms that we are nowadays used to uh in comparison with modern operating",
    "start": "99680",
    "end": "105040"
  },
  {
    "text": "systems so i'm thinking about for instance randomization or control for integrity",
    "start": "105040",
    "end": "110320"
  },
  {
    "text": "but at the same time firmware presents some significant differences when compared to uh for its",
    "start": "110320",
    "end": "116399"
  },
  {
    "start": "113000",
    "end": "164000"
  },
  {
    "text": "desktop applications they make security analysis particularly difficult to apply",
    "start": "116399",
    "end": "122159"
  },
  {
    "text": "so first firmware is very hard dependent and it relies on a lot of peripherals",
    "start": "122159",
    "end": "127840"
  },
  {
    "text": "just think about a smart camera that where the femur is programmed to directly talk to the",
    "start": "127840",
    "end": "132879"
  },
  {
    "text": "camera sensor to retrieve images from the outside world but also firmware lives in a unique and",
    "start": "132879",
    "end": "139920"
  },
  {
    "text": "minimal environment with no standard configurations and indeed for performance reasons",
    "start": "139920",
    "end": "145680"
  },
  {
    "text": "uh firmware does not present many of the advanced features that we are nowadays used to in modern operating system and finally",
    "start": "145680",
    "end": "154160"
  },
  {
    "text": "embedded device relied on different architectures sometimes profitary",
    "start": "154160",
    "end": "159519"
  },
  {
    "text": "and this makes things a little bit more tricky so if you want to analyze a firmware",
    "start": "159519",
    "end": "165040"
  },
  {
    "start": "164000",
    "end": "191000"
  },
  {
    "text": "image what we can do we can try first with dynamic analysis right so we imagine we can emulate a firmware image",
    "start": "165040",
    "end": "172000"
  },
  {
    "text": "and we can run our coverage guided funds well unfortunately dynamic firmware",
    "start": "172000",
    "end": "177120"
  },
  {
    "text": "analysis is particularly difficult and currently not very reliable and there have been",
    "start": "177120",
    "end": "183120"
  },
  {
    "text": "recently some some uh very promising walls in this direction but we're not there yet",
    "start": "183120",
    "end": "188720"
  },
  {
    "text": "and the main reasons again is are that uh femur is heavily utterly dependent so this means",
    "start": "188720",
    "end": "194000"
  },
  {
    "start": "191000",
    "end": "214000"
  },
  {
    "text": "that a proper dynamic analysis environment has to model peripherals as to model interrupts dma but also deal",
    "start": "194000",
    "end": "202800"
  },
  {
    "text": "with shared memory i've coded addresses and sometimes and modern architectures so all these",
    "start": "202800",
    "end": "209200"
  },
  {
    "text": "things are quite complex too design and implement so as an alternative we can try static analysis",
    "start": "209200",
    "end": "216000"
  },
  {
    "start": "214000",
    "end": "229000"
  },
  {
    "text": "that instead does not suffer from many of these limitations and the problem here is that current",
    "start": "216000",
    "end": "221840"
  },
  {
    "text": "approaches do not scale and in fact they produce many false positives",
    "start": "221840",
    "end": "227120"
  },
  {
    "text": "the main reason for this is that firmware is mostly multibinary in fact the vast majority of firmware is",
    "start": "227120",
    "end": "233519"
  },
  {
    "start": "229000",
    "end": "270000"
  },
  {
    "text": "linux based and in practice it consists in a squash file system that contains hundreds of executable",
    "start": "233519",
    "end": "241120"
  },
  {
    "text": "programs so you can see in this example a firmware image that contains 240",
    "start": "241120",
    "end": "247200"
  },
  {
    "text": "executable binaries but on a larger scale we have seen in our data set that contains more than 900 samples that affirmative",
    "start": "247200",
    "end": "254959"
  },
  {
    "text": "image on average contains more than 150 binaries",
    "start": "254959",
    "end": "260639"
  },
  {
    "text": "for of course not all of these binaries are actually needed and used to implement the famous",
    "start": "260639",
    "end": "266840"
  },
  {
    "text": "functionality but some of them do and the typical architecture of an embedded system contains",
    "start": "266840",
    "end": "272720"
  },
  {
    "start": "270000",
    "end": "337000"
  },
  {
    "text": "a binary that we call the border binary that receives a request from the",
    "start": "272720",
    "end": "278800"
  },
  {
    "text": "external world this is typically a web server and that this binary forwards the request to a handle binary",
    "start": "278800",
    "end": "285520"
  },
  {
    "text": "that is that processes the request and returns a result in practice",
    "start": "285520",
    "end": "291440"
  },
  {
    "text": "this is a little bit more complex because we can have many of these and their",
    "start": "291440",
    "end": "297759"
  },
  {
    "text": "binaries and each of them can further interact and share data with additional problems",
    "start": "297759",
    "end": "304639"
  },
  {
    "text": "so now the question becomes which binary should we look at for for a security analysis because clearly",
    "start": "304639",
    "end": "311520"
  },
  {
    "text": "on the one hand if we only look at a subject of these binaries or for instance if we only look at the",
    "start": "311520",
    "end": "316800"
  },
  {
    "text": "web server then we will miss potentially many vulnerabilities so we might have",
    "start": "316800",
    "end": "322800"
  },
  {
    "text": "potentially many force negatives but on the other hand if we apply",
    "start": "322800",
    "end": "328400"
  },
  {
    "text": "current approaches to analyze each of these binaries individually then we will have",
    "start": "328400",
    "end": "333680"
  },
  {
    "text": "a large amount of force positives and we can see an example of this here in in this example that is a",
    "start": "333680",
    "end": "340240"
  },
  {
    "start": "337000",
    "end": "449000"
  },
  {
    "text": "simplified version of a real-world firmware image and you can see here on the right a",
    "start": "340240",
    "end": "345440"
  },
  {
    "text": "program that reads data from two environment variables and if we assume that these two variables represent the input",
    "start": "345440",
    "end": "352000"
  },
  {
    "text": "of this program and this input is controlled by an attacker we clearly see that this program",
    "start": "352000",
    "end": "357360"
  },
  {
    "text": "contains two vulnerabilities so here there are two buffer overflows where this data read from the",
    "start": "357360",
    "end": "364160"
  },
  {
    "text": "environment variables is used in unsafe stream copy without checking the sides of the destination buffer so",
    "start": "364160",
    "end": "371680"
  },
  {
    "text": "easy two buffer overflows but in this specific example in this specific firmware image this binary on the right",
    "start": "371680",
    "end": "378639"
  },
  {
    "text": "is only executed through this binary this program on the left and we can see here that this",
    "start": "378639",
    "end": "383919"
  },
  {
    "text": "program indeed sets the value for these two environment variables and then executes the by the program on",
    "start": "383919",
    "end": "390639"
  },
  {
    "text": "the right and now if we actually look at the at the big picture and we",
    "start": "390639",
    "end": "396639"
  },
  {
    "text": "consider the interaction between these two binary we can see that there is actually only one bug",
    "start": "396639",
    "end": "402160"
  },
  {
    "text": "only one vulnerability and in fact while the value of the query string variable is",
    "start": "402160",
    "end": "408240"
  },
  {
    "text": "potentially unconstrained and can be longer than 128 bytes so producing a",
    "start": "408240",
    "end": "413680"
  },
  {
    "text": "buffer overflow the value of the log path variable is accorded and it's constrained to a",
    "start": "413680",
    "end": "421199"
  },
  {
    "text": "string that is shorter than 128 bytes so shorter than the buffer size and so not producing any buffer overflow",
    "start": "421199",
    "end": "429759"
  },
  {
    "text": "this is just a quick example that shows how false positives may may arise when we",
    "start": "429759",
    "end": "437280"
  },
  {
    "text": "look at binary individually and of course you can imagine that when we scale these up to",
    "start": "437280",
    "end": "442960"
  },
  {
    "text": "uh many binaries and many firmware images the number of false positive will drastically increase so in our research",
    "start": "442960",
    "end": "451039"
  },
  {
    "start": "449000",
    "end": "509000"
  },
  {
    "text": "we started from the observed version that firmware is mostly composed by multiple interacting components multiple",
    "start": "451039",
    "end": "457520"
  },
  {
    "text": "interacting binaries and we investigated this observation and found out that",
    "start": "457520",
    "end": "462960"
  },
  {
    "text": "modeling the interactions between these binaries is essential for an effective analysis we can do this",
    "start": "462960",
    "end": "469039"
  },
  {
    "text": "because programs and processes communicate through a finite set of",
    "start": "469039",
    "end": "474560"
  },
  {
    "text": "methods a finite set of inter-process communication channels that we can model to introduce",
    "start": "474560",
    "end": "480800"
  },
  {
    "text": "static multi-binary tent analysis so multi-binary analysis where data flows and",
    "start": "480800",
    "end": "486000"
  },
  {
    "text": "constraints are not only propagated within one binary but also from one binary to another",
    "start": "486000",
    "end": "492560"
  },
  {
    "text": "we built a prototype on top of this approach caronte and we will show in this presentation that currently is able",
    "start": "492560",
    "end": "497840"
  },
  {
    "text": "to identify unknown security vulnerabilities but at the same time drastically",
    "start": "497840",
    "end": "503440"
  },
  {
    "text": "reducing the amount of false alerts so if we want to look at what karante does",
    "start": "503440",
    "end": "510400"
  },
  {
    "text": "in a nutshell currently takes as input a femur image it unpacks the image and extracts all",
    "start": "510400",
    "end": "516479"
  },
  {
    "text": "the different binaries contained in the image then it identifies what we call the",
    "start": "516479",
    "end": "522000"
  },
  {
    "text": "border binaries so those programs that receive user input from the external world",
    "start": "522000",
    "end": "527279"
  },
  {
    "text": "and once we have these border binaries current starts identifying and tracking the",
    "start": "527279",
    "end": "533120"
  },
  {
    "text": "interactions with additional binaries so we can see in this example that these two binaries intellectual environment",
    "start": "533120",
    "end": "539440"
  },
  {
    "text": "variable so in practice what happens is that these two binaries know the value of the name of this",
    "start": "539440",
    "end": "545839"
  },
  {
    "text": "environment environment variable and we call this the data key of the communication and using this data key",
    "start": "545839",
    "end": "551600"
  },
  {
    "text": "they are able to share data and of course each of this binary can then itself further communicate and",
    "start": "551600",
    "end": "558959"
  },
  {
    "text": "interact with additional binaries as shown in this example so now we have a model all of these",
    "start": "558959",
    "end": "565519"
  },
  {
    "text": "interactions this we have this interaction graph that we call the binary dependency graph",
    "start": "565519",
    "end": "571040"
  },
  {
    "text": "and using this graph we can actually run our multibinary tenth analysis so we start from the border binaries and",
    "start": "571040",
    "end": "578720"
  },
  {
    "text": "retain user input and propagate constraints from one binary to another",
    "start": "578720",
    "end": "584560"
  },
  {
    "text": "in this example we see that all these binaries share data that is up to 512 bytes",
    "start": "584560",
    "end": "590959"
  },
  {
    "text": "but here in the very last binary of of this this path this data is used is scoping into a",
    "start": "590959",
    "end": "597519"
  },
  {
    "text": "buffer that is only 500 bytes so in this case leading to",
    "start": "597519",
    "end": "602800"
  },
  {
    "text": "a buffer overflow so i know that given like this is not probably super clear uh now it's time to dive",
    "start": "602800",
    "end": "609519"
  },
  {
    "text": "into the details and i leave this vitro stage to nilo which is the main author of this research and we'll tell you more about",
    "start": "609519",
    "end": "616320"
  },
  {
    "text": "each step that current performs thanks andrea hi i'm nilo and now i'm",
    "start": "616320",
    "end": "622320"
  },
  {
    "text": "going to talk to you about canon's architecture as you can see in these slides these are the steps of our approach that",
    "start": "622320",
    "end": "629519"
  },
  {
    "start": "625000",
    "end": "639000"
  },
  {
    "text": "andrea uh briefly mentioned before and then now i'm going to explain more in details in the next slides",
    "start": "629519",
    "end": "635600"
  },
  {
    "text": "as input our system takes a firmware which it unpacks it and into multiple",
    "start": "635600",
    "end": "641440"
  },
  {
    "start": "639000",
    "end": "647000"
  },
  {
    "text": "components using the firmware packing tool called bin work once we've extracted all the binaries",
    "start": "641440",
    "end": "648959"
  },
  {
    "start": "647000",
    "end": "704000"
  },
  {
    "text": "we proceed to find those that are called we call the border binaries bullet binaries are those binaries that",
    "start": "648959",
    "end": "656160"
  },
  {
    "text": "interface the functionality of a firmware to the outside world",
    "start": "656160",
    "end": "661360"
  },
  {
    "text": "our intuition is that these banners must contain two type of capabilities they must",
    "start": "661360",
    "end": "667360"
  },
  {
    "text": "receive data from the network and they must contain capabilities to parse this data",
    "start": "667360",
    "end": "673680"
  },
  {
    "text": "to find these binaries we look for these two capabilities and we scan each function for each binary in the",
    "start": "673680",
    "end": "680160"
  },
  {
    "text": "firmware and collect five different features the number of basic blocks the number of memory comparisons the",
    "start": "680160",
    "end": "687279"
  },
  {
    "text": "number of branches the number of network related keywords we look for keywords such as",
    "start": "687279",
    "end": "693600"
  },
  {
    "text": "soap html http and so forth and then we check if there exists a data",
    "start": "693600",
    "end": "699279"
  },
  {
    "text": "flow between a read from socket and a memory comparison",
    "start": "699279",
    "end": "704399"
  },
  {
    "start": "704000",
    "end": "743000"
  },
  {
    "text": "once we collected all these features for each function um we we compute what we called the",
    "start": "705120",
    "end": "710880"
  },
  {
    "text": "parsing score the percy score basically is a weighted sum of these five features",
    "start": "710880",
    "end": "716639"
  },
  {
    "text": "once we get uh this passive score for each functions um we compute the percent score of a",
    "start": "716639",
    "end": "722240"
  },
  {
    "text": "binary as the maximum parsy scores of these of its functions then",
    "start": "722240",
    "end": "728240"
  },
  {
    "text": "we cluster these binaries using their persist scores using the db scan algorithm and we",
    "start": "728240",
    "end": "734079"
  },
  {
    "text": "consider as border banners are the cluster of binaries containing the highest parsing scores once we get",
    "start": "734079",
    "end": "742240"
  },
  {
    "text": "all these border binaries we compute the binary dependency graph or bdg",
    "start": "742240",
    "end": "747600"
  },
  {
    "start": "743000",
    "end": "866000"
  },
  {
    "text": "tbtg basically is a graph that models the data dependency across the different",
    "start": "747600",
    "end": "753279"
  },
  {
    "text": "binaries in the firmware to build this graph we use our static temp engine to obtain data",
    "start": "753279",
    "end": "760320"
  },
  {
    "text": "that is compared against network related keywords in the border binaries and then we run intent analysis to",
    "start": "760320",
    "end": "768000"
  },
  {
    "text": "detect if some data has been shared in particular for this second step we use a set of",
    "start": "768000",
    "end": "774079"
  },
  {
    "text": "modules that we call the cpfs or communication paradigm finders",
    "start": "774079",
    "end": "780800"
  },
  {
    "text": "which basically each one of the cpf analyze each basic block in detailed analysis and understands if",
    "start": "780800",
    "end": "788399"
  },
  {
    "text": "the logic of the basic block suggests that some data has been shared with other binaries",
    "start": "788399",
    "end": "795040"
  },
  {
    "text": "we provide current with a cpf for each ipc paradigm which means that we have a cpf",
    "start": "795440",
    "end": "800880"
  },
  {
    "text": "for socket-based communication sapf for file-based communication and so forth and if a cpf understand",
    "start": "800880",
    "end": "808480"
  },
  {
    "text": "that some data has been shared first it retrieves the data key the data key as andrea",
    "start": "808480",
    "end": "814800"
  },
  {
    "text": "before briefly mentioned is the end point where the data will be available example of data keys might be file names",
    "start": "814800",
    "end": "822800"
  },
  {
    "text": "or names of environment variables and so forth then spf determines what's the flow",
    "start": "822800",
    "end": "829680"
  },
  {
    "text": "direction of the communication it he understands whether the binary is set in data for another binary to be",
    "start": "829680",
    "end": "835920"
  },
  {
    "text": "retrieved in which case we will call the binary setter or if the binary is getting some",
    "start": "835920",
    "end": "841120"
  },
  {
    "text": "data from another binary in which case we will call the binary together",
    "start": "841120",
    "end": "846560"
  },
  {
    "text": "finally the cpf performs a binary sect magnification which means that the cpf",
    "start": "846560",
    "end": "853519"
  },
  {
    "text": "will use the data key to scan the firmware and find other banners that can possibly rely",
    "start": "853519",
    "end": "859600"
  },
  {
    "text": "on the same data key to use some shared data in case of information are not available",
    "start": "859600",
    "end": "866079"
  },
  {
    "start": "866000",
    "end": "891000"
  },
  {
    "text": "such as symbols are not present we provide current with a generic cpf",
    "start": "866079",
    "end": "871600"
  },
  {
    "text": "that we call the semantic cpf the intuition behind this cpf is that some data keys",
    "start": "871600",
    "end": "877920"
  },
  {
    "text": "must be used as index to set or get some data as you can see in this simple example",
    "start": "877920",
    "end": "883760"
  },
  {
    "text": "the data key http request is used to index some global structure",
    "start": "883760",
    "end": "888880"
  },
  {
    "text": "to set some data okay let's see an example of how we",
    "start": "888880",
    "end": "893920"
  },
  {
    "text": "build the bdg as you can see in the function parse your live",
    "start": "893920",
    "end": "899040"
  },
  {
    "text": "we have a scene comparisons of some data against some network related keyword",
    "start": "899040",
    "end": "904240"
  },
  {
    "text": "in this case we would think the variable p and as you can see regardless of the",
    "start": "904240",
    "end": "910480"
  },
  {
    "text": "path that has been followed tainted data is returned by function in this case we we find the color of",
    "start": "910480",
    "end": "917760"
  },
  {
    "text": "this function which is serve request and we continue our tenth analysis",
    "start": "917760",
    "end": "923360"
  },
  {
    "text": "as you can see here data the variable data will contain tinted data which eventually will be",
    "start": "923360",
    "end": "929920"
  },
  {
    "text": "passed to the functions attempt in this case the semantic cpf will",
    "start": "929920",
    "end": "935199"
  },
  {
    "text": "trigger and we'll understand that some data is shared using the environment we'll understand",
    "start": "935199",
    "end": "941040"
  },
  {
    "text": "that this banner is a sector as it's set in some data to be to be consumed and you will understand",
    "start": "941040",
    "end": "946480"
  },
  {
    "text": "that the data key in this case is the is a string query string therefore",
    "start": "946480",
    "end": "952160"
  },
  {
    "text": "we'll use the environment cpf we'll use this data key look into the",
    "start": "952160",
    "end": "957759"
  },
  {
    "text": "firmware and find other binaries that rely on the same data key and we will find that these other binary",
    "start": "957759",
    "end": "964639"
  },
  {
    "text": "indeed use the same data key once we obtain our bdg we analyze each",
    "start": "964639",
    "end": "973199"
  },
  {
    "start": "968000",
    "end": "1032000"
  },
  {
    "text": "binary in the bdg and we collect all the constraints that binaries apply on shared data",
    "start": "973199",
    "end": "980079"
  },
  {
    "text": "and we propagate um this constraint to the successors in the bdg now",
    "start": "980079",
    "end": "986720"
  },
  {
    "text": "a problem in this case is that uh in theory we should consider every parts in every binary that apply",
    "start": "986720",
    "end": "993440"
  },
  {
    "text": "constraints on shared data as this is in the general case impossible what we did is that um we get the",
    "start": "993440",
    "end": "1001440"
  },
  {
    "text": "program points where the data has been set and the data has been shared within the same binary",
    "start": "1001440",
    "end": "1006720"
  },
  {
    "text": "and we analyze every part between these two program points up to a certain time limit and",
    "start": "1006720",
    "end": "1012639"
  },
  {
    "text": "eventually we propagate only the least street set of constraints",
    "start": "1012639",
    "end": "1018720"
  },
  {
    "text": "one might ask why only the least the least strict set of constraints well the reason is that our intuition is",
    "start": "1018720",
    "end": "1024880"
  },
  {
    "text": "that under constrained data is more likely to lead to security vulnerabilities",
    "start": "1024880",
    "end": "1031839"
  },
  {
    "text": "going back to our to our example we know that the variable data is tainted and we",
    "start": "1032079",
    "end": "1038400"
  },
  {
    "text": "know that it counts from the parts from the function parts uri as you can see again in this function",
    "start": "1038400",
    "end": "1044558"
  },
  {
    "text": "there are two possible parts that lead to data out of the function but only one of them",
    "start": "1044559",
    "end": "1051440"
  },
  {
    "text": "don't does not apply constraints on the data as such we consider this part and we",
    "start": "1051679",
    "end": "1057280"
  },
  {
    "text": "propagate the empty set of constraints to the getter binary",
    "start": "1057280",
    "end": "1062799"
  },
  {
    "start": "1063000",
    "end": "1130000"
  },
  {
    "text": "the last module of our system is the insecure interaction detection module where we",
    "start": "1063840",
    "end": "1069760"
  },
  {
    "text": "use our 10 engine to uncover and secure attacker control data flows in current",
    "start": "1069760",
    "end": "1076480"
  },
  {
    "text": "we look for two types of vulnerabilities we look for memory card options such as",
    "start": "1076480",
    "end": "1082799"
  },
  {
    "text": "buffer overflows and we look for denial of service vulnerabilities which means that we find loops whose",
    "start": "1082799",
    "end": "1090799"
  },
  {
    "text": "guards are totally controlled by attackers",
    "start": "1090799",
    "end": "1095840"
  },
  {
    "text": "in particular to find vulnerabilities retain data that is set or received by another binary we run",
    "start": "1096160",
    "end": "1102720"
  },
  {
    "text": "18th analysis and we raise an alert if tainted and under constrained data reaches the sync",
    "start": "1102720",
    "end": "1109600"
  },
  {
    "text": "in our work we consider things mem copy like functions which means that we consider those",
    "start": "1109600",
    "end": "1116320"
  },
  {
    "text": "functions that are semantically equivalent to mem copy functions we consider sync at the reference of",
    "start": "1116320",
    "end": "1122400"
  },
  {
    "text": "attended variable and finally we consider sync a comparison of the entire variable in",
    "start": "1122400",
    "end": "1127520"
  },
  {
    "text": "loop conditions going back to our example we know that",
    "start": "1127520",
    "end": "1133919"
  },
  {
    "start": "1130000",
    "end": "1186000"
  },
  {
    "text": "the variable query is now tainted and unconstrained and we run our data analysis which",
    "start": "1133919",
    "end": "1140640"
  },
  {
    "text": "eventually will lead us in the function process request as you can see here",
    "start": "1140640",
    "end": "1146480"
  },
  {
    "text": "tinted data the variable query is compared against some constant string and the result is set in the variable q",
    "start": "1146480",
    "end": "1153360"
  },
  {
    "text": "which will be tainted as well eventually the variable q will be used in a string of operation",
    "start": "1153360",
    "end": "1160240"
  },
  {
    "text": "and karante will understand that first the variable q is tainted and a constraint and that the variable arg is as big as",
    "start": "1160240",
    "end": "1167960"
  },
  {
    "text": "128 bytes for this reason we raise an alert now another interesting fact in this example",
    "start": "1167960",
    "end": "1175039"
  },
  {
    "text": "is that as you can see the variable lock part is not tainted and therefore the second string copy",
    "start": "1175039",
    "end": "1181120"
  },
  {
    "text": "will not raise a false alert",
    "start": "1181120",
    "end": "1185600"
  },
  {
    "start": "1186000",
    "end": "1211000"
  },
  {
    "text": "okay let's talk about our intention our intention is an improved version of angular synth",
    "start": "1187280",
    "end": "1193440"
  },
  {
    "text": "engine anger is our uh binary analysis framework and we added two features first",
    "start": "1193440",
    "end": "1201520"
  },
  {
    "text": "we prioritize parts that we we find more interesting and second we added what we called 10",
    "start": "1201520",
    "end": "1209120"
  },
  {
    "text": "dependencies let's see these two features um we",
    "start": "1209120",
    "end": "1214400"
  },
  {
    "text": "consider a path more interesting than another path if the first one carries on paint information and the",
    "start": "1214400",
    "end": "1221360"
  },
  {
    "text": "second doesn't let's see an example of this let's assume here that the variable",
    "start": "1221360",
    "end": "1226480"
  },
  {
    "text": "input contain data from the user and let's assume that it's tainted as",
    "start": "1226480",
    "end": "1232960"
  },
  {
    "text": "you can see the variable input is passed to the function parts which contains a loop now in this case",
    "start": "1232960",
    "end": "1239520"
  },
  {
    "text": "this loop might have uh in theory an infinite number of parts but if you see only a subset of them",
    "start": "1239520",
    "end": "1247520"
  },
  {
    "text": "lead the taint out of the function in this case we consider these parts",
    "start": "1247520",
    "end": "1253919"
  },
  {
    "text": "more interesting than the other parts and we prioritize them how do we do this for each function",
    "start": "1253919",
    "end": "1261840"
  },
  {
    "text": "we find the basic blocks that return non-constant data and we follow these returns before",
    "start": "1261840",
    "end": "1267600"
  },
  {
    "text": "considering other parts our second feature is what we call team",
    "start": "1267600",
    "end": "1273679"
  },
  {
    "start": "1271000",
    "end": "1368000"
  },
  {
    "text": "dependencies ten dependencies aims at alleviate overthinking issues proceeding",
    "start": "1273679",
    "end": "1281520"
  },
  {
    "text": "without with our example we know now that the variable cmd is tainted and as you can see the variable",
    "start": "1281520",
    "end": "1287679"
  },
  {
    "text": "cmd is passed to the function string lan now let's assume that the function string length is not",
    "start": "1287679",
    "end": "1294159"
  },
  {
    "text": "analyzed for instance because either the body of this function is not present",
    "start": "1294159",
    "end": "1299280"
  },
  {
    "text": "or because some limitation in the static analysis such as a limited call",
    "start": "1299280",
    "end": "1304480"
  },
  {
    "text": "stack what the tent engine will do is that we'll create another uh 10 tag for the variable n so this",
    "start": "1304480",
    "end": "1312400"
  },
  {
    "text": "means that the variable n and cmd will both be tainted by which two different tags",
    "start": "1312400",
    "end": "1317760"
  },
  {
    "text": "now following the data flow of this program we see that the variable n is constrained between the values 0 and",
    "start": "1317760",
    "end": "1324840"
  },
  {
    "text": "511 in this case the variable n will be untainted but the variable cmd will not",
    "start": "1324840",
    "end": "1330880"
  },
  {
    "text": "which in this case might cause the string copy to raise a false positive now what we can do is",
    "start": "1330880",
    "end": "1338720"
  },
  {
    "text": "that we can create a dependency between the 10 tag of the variable cmd and the 10 tag",
    "start": "1338720",
    "end": "1345440"
  },
  {
    "text": "of the variable n and if n gets untainted we cannot untaint cmd as well in this case the",
    "start": "1345440",
    "end": "1353039"
  },
  {
    "text": "string copy will not generate a false positive we did this encounter and we also",
    "start": "1353039",
    "end": "1359200"
  },
  {
    "text": "automatically find functions that implement stringland semantically equivalent code and create",
    "start": "1359200",
    "end": "1364960"
  },
  {
    "text": "10 tag dependencies okay all of this is very cool but does",
    "start": "1364960",
    "end": "1371039"
  },
  {
    "start": "1368000",
    "end": "1373000"
  },
  {
    "text": "it work we run an in-depth evaluation and um we",
    "start": "1371039",
    "end": "1376320"
  },
  {
    "text": "analyzed 53 devices from several different vendors and we found 46 uh new zero day bugs",
    "start": "1376320",
    "end": "1384240"
  },
  {
    "text": "and we discovered another five now nuroli karonte found a new bugs but",
    "start": "1384240",
    "end": "1391440"
  },
  {
    "text": "uh it decreased the number of generated alerts from more than 100 on average to five per",
    "start": "1391440",
    "end": "1398480"
  },
  {
    "text": "firmware which means that it's a two order it's a reduction of two orders of magnitude",
    "start": "1398480",
    "end": "1405039"
  },
  {
    "text": "and a low false positive rate as you can see in our experiments um we",
    "start": "1405039",
    "end": "1411200"
  },
  {
    "start": "1407000",
    "end": "1483000"
  },
  {
    "text": "analyzed each binary in the firmware independently and this analysis raised",
    "start": "1411200",
    "end": "1416640"
  },
  {
    "text": "more than 36 000 alerts and the whole analysis took 18 days",
    "start": "1416640",
    "end": "1423120"
  },
  {
    "text": "on the other side we're running current our system generated only 74 alerts and the overall analysis",
    "start": "1423120",
    "end": "1431679"
  },
  {
    "text": "completed in 34 hours we also performed a large scale",
    "start": "1431679",
    "end": "1437440"
  },
  {
    "text": "evaluation where we consider 899 firmware samples from 21 different",
    "start": "1437440",
    "end": "1443600"
  },
  {
    "text": "vendors we found that uh 348",
    "start": "1443600",
    "end": "1448720"
  },
  {
    "text": "samples firmware samples contain multibander interactions and current overall generated a few more",
    "start": "1448720",
    "end": "1455200"
  },
  {
    "text": "than 1000 alerts in particular canada generated two alerts per",
    "start": "1455200",
    "end": "1460720"
  },
  {
    "text": "female sample on average and of all these alerts we manually spected 100 of them randomly we found that",
    "start": "1460720",
    "end": "1469039"
  },
  {
    "text": "44 to be true positive and then that thirty of them were",
    "start": "1469039",
    "end": "1474559"
  },
  {
    "text": "actually uh multibanded vulnerabilities which means that we found these vulnerabilities by tracking data flow across different",
    "start": "1474559",
    "end": "1481279"
  },
  {
    "text": "binaries this slide shows all the results that we",
    "start": "1481279",
    "end": "1486320"
  },
  {
    "start": "1483000",
    "end": "1496000"
  },
  {
    "text": "obtain in our large scale evaluation i understand that there's a lot going on on this",
    "start": "1486320",
    "end": "1491360"
  },
  {
    "text": "slide but um i'll summarize these results in the next slides",
    "start": "1491360",
    "end": "1497600"
  },
  {
    "start": "1496000",
    "end": "1518000"
  },
  {
    "text": "first off we looked at the size of the bdg and we found that most bdgs have",
    "start": "1497679",
    "end": "1504640"
  },
  {
    "text": "five binaries but we also found that some bdgs are more complex as as you can see",
    "start": "1504640",
    "end": "1510159"
  },
  {
    "text": "in this example we found one one firmware sample produce a bdg that contained 16 binaries",
    "start": "1510159",
    "end": "1518880"
  },
  {
    "text": "finally uh we measure caronte's performance and as you can see from the from the",
    "start": "1519600",
    "end": "1526159"
  },
  {
    "text": "first two graphs caronte scales well in terms of a number of analyzed paths",
    "start": "1526159",
    "end": "1532240"
  },
  {
    "text": "and numbers or a number of analyzed binaries as you can see from the telegraph",
    "start": "1532240",
    "end": "1537840"
  },
  {
    "text": "caronte in some cases took more than a day to analyze some",
    "start": "1537840",
    "end": "1542880"
  },
  {
    "text": "some firmware we investigated and we found that there were some problems with",
    "start": "1542880",
    "end": "1548320"
  },
  {
    "text": "with anger this problem got fixed and we are applying the fix to current",
    "start": "1548320",
    "end": "1553440"
  },
  {
    "text": "overall we can see the current is scaled well and this is because our system only",
    "start": "1553440",
    "end": "1559039"
  },
  {
    "text": "focuses on what matters only focus of a very small set of binaries instead of considering all of the binaries in a",
    "start": "1559039",
    "end": "1565440"
  },
  {
    "text": "firmware and with this i will leave the virtual stage to andrea that",
    "start": "1565440",
    "end": "1571200"
  },
  {
    "text": "he will show us a demo of our system thank you nero for the detailed",
    "start": "1571200",
    "end": "1577600"
  },
  {
    "text": "explanation now you know how currently works let's see how to run it",
    "start": "1577600",
    "end": "1583600"
  },
  {
    "start": "1583000",
    "end": "1599000"
  },
  {
    "text": "so we released all our code on github you can find it at this url and in the readme of this repository",
    "start": "1583600",
    "end": "1589440"
  },
  {
    "text": "you'll also find instructions on how to pull a docker image that comes with karante already installed and ready to",
    "start": "1589440",
    "end": "1596480"
  },
  {
    "text": "be fired so let's have a look if i uh uh run the uh docker container",
    "start": "1596480",
    "end": "1605440"
  },
  {
    "text": "we can see here we have a folder karante and what you have to do to run our tool is",
    "start": "1606000",
    "end": "1613039"
  },
  {
    "text": "simply preparing a a configuration file this is in json and in the config folder",
    "start": "1613039",
    "end": "1620720"
  },
  {
    "text": "there are some there is both a template but also some example from real world",
    "start": "1620720",
    "end": "1627600"
  },
  {
    "text": "samples we can have a look at one of them actually we can make it nicer",
    "start": "1627600",
    "end": "1641200"
  },
  {
    "text": "okay so here you can see a list of options that can be set",
    "start": "1641200",
    "end": "1647200"
  },
  {
    "text": "actually the very important option is the firmware path and is the only one that really needs to",
    "start": "1647200",
    "end": "1652320"
  },
  {
    "text": "be set and in the vast majority of the cases all the other options can be left empty",
    "start": "1652320",
    "end": "1657919"
  },
  {
    "text": "and currently will deal with that automatically and of course in our gita page you you'll find a proper description for",
    "start": "1657919",
    "end": "1665679"
  },
  {
    "text": "each of these settings and when they should be used set tutura to actually run the tool we can",
    "start": "1665679",
    "end": "1673120"
  },
  {
    "text": "simply pass the path to the configuration file",
    "start": "1673120",
    "end": "1678880"
  },
  {
    "text": "let's do this now",
    "start": "1678880",
    "end": "1683840"
  },
  {
    "text": "okay here it is now current is running and it's starting its analysis as nilo mentioned this",
    "start": "1684720",
    "end": "1692880"
  },
  {
    "text": "can take a couple of hours so we'll not uh wait for this to finish but we can see",
    "start": "1692880",
    "end": "1698480"
  },
  {
    "text": "what happens next at the end of the analysis currently produces a log file uh",
    "start": "1698480",
    "end": "1703600"
  },
  {
    "text": "we we can have a look an example here uh this deal in json and here you'll find",
    "start": "1703600",
    "end": "1710320"
  },
  {
    "text": "all the information the details about the results of the analysis so we can see information",
    "start": "1710320",
    "end": "1715520"
  },
  {
    "text": "about the binary dependency graph how the different binaries interact with additional programs we can",
    "start": "1715520",
    "end": "1722080"
  },
  {
    "text": "see statistics about the execution time and more importantly we",
    "start": "1722080",
    "end": "1728799"
  },
  {
    "text": "can also look at the alerts so the alerted currently produced this is where potentially vulnerabilities my",
    "start": "1728799",
    "end": "1735200"
  },
  {
    "text": "might might lie and again we can see information about the data flow and so on but instead of",
    "start": "1735200",
    "end": "1741679"
  },
  {
    "text": "looking at this text-based log file we recently wrote a",
    "start": "1741679",
    "end": "1747120"
  },
  {
    "text": "very simple user interface nothing extremely fancy",
    "start": "1747120",
    "end": "1752480"
  },
  {
    "text": "but uh if i now run this uh and then we can see uh the results of",
    "start": "1752480",
    "end": "1758559"
  },
  {
    "text": "the analysis in a browser so we can see here uh that for this specific firmware image",
    "start": "1758559",
    "end": "1764240"
  },
  {
    "text": "uh this specific image contains 128 binaries of course and luckily not all of them",
    "start": "1764240",
    "end": "1772480"
  },
  {
    "text": "process user input so we can see a rather simple binary dependency graph shown in this",
    "start": "1772480",
    "end": "1777840"
  },
  {
    "text": "picture the light nodes are the border binaries and we can see how these programs",
    "start": "1777840",
    "end": "1784240"
  },
  {
    "text": "communicate with other binaries so we can see here that these two binaries interact using",
    "start": "1784240",
    "end": "1790640"
  },
  {
    "text": "several data keys and for each of them we can see what are the cpf involved",
    "start": "1790640",
    "end": "1796320"
  },
  {
    "text": "in caronta in the detection of these communications now what we also can do is that we can",
    "start": "1796320",
    "end": "1802240"
  },
  {
    "text": "look at the alerts in this specific example currently generated 12 alerts",
    "start": "1802240",
    "end": "1807600"
  },
  {
    "text": "and if i click on the first one we can see that the path of the alert gets highlighted in the graph",
    "start": "1807600",
    "end": "1813679"
  },
  {
    "text": "and this alert is generated by a data flow that starts in the httpd",
    "start": "1813679",
    "end": "1819200"
  },
  {
    "text": "binary which communicates with the file access.cgi binary",
    "start": "1819200",
    "end": "1824559"
  },
  {
    "text": "specifically they communicate through this content type data key and we can see here the address of the",
    "start": "1824559",
    "end": "1831600"
  },
  {
    "text": "buffer containing containing tainted data but also the address of our c",
    "start": "1831600",
    "end": "1836640"
  },
  {
    "text": "so this is a the final step of our that data flow and this is potentially when the",
    "start": "1836640",
    "end": "1841760"
  },
  {
    "text": "vulnerability might be so now if i uh um",
    "start": "1841760",
    "end": "1847760"
  },
  {
    "text": "click on the very last binary of this path in this alert we integrate this",
    "start": "1847760",
    "end": "1854080"
  },
  {
    "text": "with angus the compiler which will automatically decompile the potentially vulnerable functions where",
    "start": "1854080",
    "end": "1860240"
  },
  {
    "text": "our data flow ends up the compiler in angular is still a work in progress so you can",
    "start": "1860240",
    "end": "1866080"
  },
  {
    "text": "see that the quality of the the compiled code is not excellent but it's still good enough for us to",
    "start": "1866080",
    "end": "1871360"
  },
  {
    "text": "spot a real vulnerability and in fact in this function this function reads tainted data from an",
    "start": "1871360",
    "end": "1877200"
  },
  {
    "text": "environment variable and this data is later on used in an unsafe thin copy without checking",
    "start": "1877200",
    "end": "1885360"
  },
  {
    "text": "any sides of the destination buffer so this was a very simple example of",
    "start": "1885360",
    "end": "1892080"
  },
  {
    "start": "1892000",
    "end": "1980000"
  },
  {
    "text": "what of what karante can do i invited all to check it out on github",
    "start": "1892080",
    "end": "1897200"
  },
  {
    "text": "and of course we disclosed this vulnerability and everything else that we found to the",
    "start": "1897200",
    "end": "1902720"
  },
  {
    "text": "affected vendors we received some cves and many of them already released uh patches for for their for their",
    "start": "1902720",
    "end": "1909919"
  },
  {
    "text": "images so to uh wrap up this presentation what we achieved so far",
    "start": "1909919",
    "end": "1914960"
  },
  {
    "text": "uh we uh observed that firmware is mostly composed by multiple interacting binaries and we",
    "start": "1914960",
    "end": "1921360"
  },
  {
    "text": "introduce static analysis techniques to perform multi-binary taint analysis on top of this approach",
    "start": "1921360",
    "end": "1928000"
  },
  {
    "text": "we show that our prototype current can effectively discover unknown security vulnerabilities but at the same",
    "start": "1928000",
    "end": "1934159"
  },
  {
    "text": "time drastically reducing the number of false alerts and an interesting point",
    "start": "1934159",
    "end": "1939760"
  },
  {
    "text": "of our research is that we found out that despite program analysis a quite complex task even when applied to",
    "start": "1939760",
    "end": "1947039"
  },
  {
    "text": "a single binary scaling program analysis to a multi-binary environment",
    "start": "1947039",
    "end": "1952720"
  },
  {
    "text": "is possible because modeling interactions between these binaries make things actually quite easier",
    "start": "1952720",
    "end": "1959840"
  },
  {
    "text": "okay then thank you again for uh attending our talk uh just a reminder there is an academic",
    "start": "1959840",
    "end": "1965679"
  },
  {
    "text": "paper on this so if you want to read more details check it out and of course we are",
    "start": "1965679",
    "end": "1972000"
  },
  {
    "text": "available and happy to take questions on on the live chat but also feel free to",
    "start": "1972000",
    "end": "1977360"
  },
  {
    "text": "send us an email thank you very much",
    "start": "1977360",
    "end": "1982000"
  }
]