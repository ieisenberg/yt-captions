[
  {
    "start": "0",
    "end": "128000"
  },
  {
    "text": "good morning welcome to tanning with CNG soliciting secrets from s channel with",
    "start": "30",
    "end": "9540"
  },
  {
    "text": "Jake ambach you are sorry that was not the right line so stop by the business",
    "start": "9540",
    "end": "16590"
  },
  {
    "text": "line the business hall located in Bayside AV the black hat Arsenal is on the palm wire on level 3 and and there's",
    "start": "16590",
    "end": "24090"
  },
  {
    "text": "also the Arsenal perception at 5 p.m. if you haven't picked up your merchandise",
    "start": "24090",
    "end": "29550"
  },
  {
    "text": "today it's your last chance to visit the black hat store and in the bookstore as well you can also visit the Kali Linux",
    "start": "29550",
    "end": "37290"
  },
  {
    "text": "Lab in Mandalay Bay a and the last thing we would ask us to put your phone in",
    "start": "37290",
    "end": "42960"
  },
  {
    "text": "silence or vibrate and so without anything else please give a warm welcome",
    "start": "42960",
    "end": "49950"
  },
  {
    "text": "applause for our speaker today Jake kumbhak thank you",
    "start": "49950",
    "end": "54680"
  },
  {
    "text": "all right thanks guys so really quickly before we get going with the talk we're",
    "start": "56510",
    "end": "61980"
  },
  {
    "text": "just gonna launch an RTP session and I",
    "start": "61980",
    "end": "67500"
  },
  {
    "text": "will explain why in a minute",
    "start": "67500",
    "end": "70820"
  },
  {
    "text": "okay cool so you might be wondering why I did that",
    "start": "96619",
    "end": "103850"
  },
  {
    "text": "well today we're here to talk about best Channel and Microsoft's implementation of TLS right RDP is one of the things that uses s",
    "start": "103850",
    "end": "110340"
  },
  {
    "text": "channel so by the end of this talk what we're gonna do is we're gonna take that RDP session that I just captured I'm",
    "start": "110340",
    "end": "116550"
  },
  {
    "text": "gonna be able to replay it uses ephemeral key changes so let's get into how that happens",
    "start": "116550",
    "end": "124369"
  },
  {
    "text": "so what are you gonna get out today well I just mentioned it the big thing is we're gonna be able to decrypt TLS sessions that use ephemeral key",
    "start": "127500",
    "end": "133500"
  },
  {
    "start": "128000",
    "end": "128000"
  },
  {
    "text": "exchanges by analyzing Windows memory the other cool thing we're gonna be able",
    "start": "133500",
    "end": "138900"
  },
  {
    "text": "to do is were able to pull private keys and session ticket keys out of memory and in Windows as well so that's kind of",
    "start": "138900",
    "end": "144870"
  },
  {
    "text": "a kind of kind of neat and then the other thing is from a forensic perspective we're gonna be able to map public certificates and server name",
    "start": "144870",
    "end": "150900"
  },
  {
    "text": "indicators and we'll explain why that's kind of cool and important to process IDs and login sessions logon session IDs",
    "start": "150900",
    "end": "158790"
  },
  {
    "text": "so how are we gonna get there well we're gonna talk about SSL and TLS really quickly just give you a refresher and",
    "start": "158790",
    "end": "164730"
  },
  {
    "text": "then we're gonna go into what s channel and CNG actually are and how they work together and then we're going to talk",
    "start": "164730",
    "end": "169800"
  },
  {
    "text": "about the secret keys that we're gonna be using to decrypt the data and what those look like and how many there are",
    "start": "169800",
    "end": "174900"
  },
  {
    "text": "where they are and then the last thing we're gonna do is talk about that forensic context and and what's the",
    "start": "174900",
    "end": "179940"
  },
  {
    "text": "value of that once we're done with all of those things then we're gonna go to that demo and we'll actually decrypt that session we just saw so really quick",
    "start": "179940",
    "end": "186990"
  },
  {
    "start": "186000",
    "end": "186000"
  },
  {
    "text": "disclaimer not an exploit this is exactly how the spec is intended to work Microsoft hasn't done anything",
    "start": "186990",
    "end": "192390"
  },
  {
    "text": "especially wrong actually for the most part their documentation is fantastic and they follow the spec one thing",
    "start": "192390",
    "end": "197910"
  },
  {
    "text": "though there's a few implementation specific oddities that we'll be talking about that maybe aren't the greatest so",
    "start": "197910",
    "end": "203810"
  },
  {
    "text": "also kind of goes without saying but you know if you're not using s channel then",
    "start": "203810",
    "end": "209220"
  },
  {
    "text": "this isn't gonna affect you so if you're not using windows TLS library if you're loading your own ergo Firefox and Chrome this doesn't",
    "start": "209220",
    "end": "215280"
  },
  {
    "text": "impact those and if you're doing something that's not TLS like TeamViewer this isn't gonna impact that either so",
    "start": "215280",
    "end": "220340"
  },
  {
    "text": "what is it gonna impact models can impact things like Active Directory Skype Internet Explorer",
    "start": "220340",
    "end": "228500"
  },
  {
    "text": "exchange link all those kinds of things and dotnet applications and stuff like",
    "start": "228500",
    "end": "234600"
  },
  {
    "text": "Citrix so GoToMeeting for instance so yeah so background I know that you've",
    "start": "234600",
    "end": "240450"
  },
  {
    "start": "240000",
    "end": "240000"
  },
  {
    "text": "all seen the TLS handshake like a gazillion times and you probably want to hear about it but we're gonna go through it really quick so we can talk about",
    "start": "240450",
    "end": "245580"
  },
  {
    "text": "what actually gets stored in memory so TLS what's the purpose essentially we want to to parties want to exchange",
    "start": "245580",
    "end": "252239"
  },
  {
    "text": "sensitive information over an insecure Channel how do we do that well client says hello sends a hello and says server I want",
    "start": "252239",
    "end": "259410"
  },
  {
    "text": "a secret and he opens up his little trenchcoat full of cipher suites and full of TLS extensions the server gets",
    "start": "259410",
    "end": "265950"
  },
  {
    "text": "that it's like okay if he likes what he sees he says take this number which is gonna be a session ID or a session",
    "start": "265950",
    "end": "272340"
  },
  {
    "text": "ticket depending and the session comes later and he's gonna say here's the",
    "start": "272340",
    "end": "278640"
  },
  {
    "text": "extensions were gonna use and here's the cipher suite we're actually gonna use and then everything else that happens after that it's gonna be dependent upon",
    "start": "278640",
    "end": "283890"
  },
  {
    "text": "those decisions so the kind of certificate that we pass and whether or not there's gonna be a server key change",
    "start": "283890",
    "end": "290250"
  },
  {
    "text": "all or dependent on this cipher suite so what does the cipher suite look like it looks like that thing at the bottom",
    "start": "290250",
    "end": "295560"
  },
  {
    "text": "there so specifies the protocol version TLS right specifies the key exchange so",
    "start": "295560",
    "end": "300960"
  },
  {
    "text": "EC DHE is an example and then the signing mechanism the symmetric key mechanism and then the Mac mechanism so",
    "start": "300960",
    "end": "308330"
  },
  {
    "text": "so once he sends that over we're gonna talk about in this slide just RSA and then we'll move on to talk about DHT and",
    "start": "308330",
    "end": "314880"
  },
  {
    "text": "stuff like that so once he sends it over he says here's my certificate which is my proof of identity my signing cert and",
    "start": "314880",
    "end": "321120"
  },
  {
    "text": "also you're gonna use this then to that public key inside of that certificate to encrypt a bunch of random data that the",
    "start": "321120",
    "end": "327450"
  },
  {
    "text": "client generates and send that over that random data is the premaster key so that's the client key exchange every key",
    "start": "327450",
    "end": "334080"
  },
  {
    "text": "change is gonna have a client key exchange but again specifically in RSA what we're doing is we're generating random data shipping that over now in",
    "start": "334080",
    "end": "341070"
  },
  {
    "text": "theory at this point we both have a shared secret on either side of the connection but because the key changes",
    "start": "341070",
    "end": "346890"
  },
  {
    "text": "are different this is the premaster secret is always gonna look a little bit different so instead we do some special",
    "start": "346890",
    "end": "352680"
  },
  {
    "text": "magic stuff and we get a fixed-length master secret on each side that looks the same every time so that we can then",
    "start": "352680",
    "end": "357840"
  },
  {
    "text": "mix in some public values and then mint ourselves some session keys once we've minted the session keys then we",
    "start": "357840",
    "end": "364080"
  },
  {
    "text": "basically say one two three switch which is the cipher change type respect message and then we start using our",
    "start": "364080",
    "end": "370710"
  },
  {
    "text": "symmetric cipher which is almost always gonna be a es cool so what are we whydid why's that matter well the pre master",
    "start": "370710",
    "end": "377370"
  },
  {
    "text": "key the master key and AES key is going to exist on both sides of the connection that's the big takeaway and there's gonna be these other secrets they're",
    "start": "377370",
    "end": "382980"
  },
  {
    "text": "gonna depend on the type of key change we use so that's all cool and well but one problem is like it takes a long time",
    "start": "382980",
    "end": "389250"
  },
  {
    "text": "and obviously we don't have to do that every single time so wouldn't it be nice if since we've",
    "start": "389250",
    "end": "394780"
  },
  {
    "text": "already exchanged this shared secret if we could just keep it for like just a little while and then next time we",
    "start": "394780",
    "end": "401170"
  },
  {
    "text": "wanted to talk the same client/server want to talk if we start if we stored that session ID or ticket we could then",
    "start": "401170",
    "end": "407440"
  },
  {
    "text": "just reinitiate that connection because we now have a unique identifier for the previous connection and we have those",
    "start": "407440",
    "end": "412570"
  },
  {
    "text": "things in memory and sure enough the guys and they wrote SSL and TLS thought",
    "start": "412570",
    "end": "417910"
  },
  {
    "text": "of that and thought that that was a good idea it's called session resumption so that handshake is basically hey hey okay",
    "start": "417910",
    "end": "424510"
  },
  {
    "text": "let's switch the client sends the identifier for the connection to the server so the server knows who the heck",
    "start": "424510",
    "end": "430030"
  },
  {
    "text": "we're talking about and then they reference that in memory and look up their shared secret that they've stored",
    "start": "430030",
    "end": "435730"
  },
  {
    "text": "or if you're using session tickets the client sends the session ticket over the server then decrypt that and checks that",
    "start": "435730",
    "end": "441100"
  },
  {
    "text": "shared secret and they start their communication again they meant to those session keys and then start that communication so that's all cool and",
    "start": "441100",
    "end": "449740"
  },
  {
    "start": "449000",
    "end": "449000"
  },
  {
    "text": "well you might have noticed that there's like a few potential problems with that first of all talking about RSA again",
    "start": "449740",
    "end": "454780"
  },
  {
    "text": "everybody we've known for a long time like 20 years that there's a problem with RSA which is we're shipping that",
    "start": "454780",
    "end": "460750"
  },
  {
    "text": "private material over the network right and then that private key that was used to decrypt that private material on the",
    "start": "460750",
    "end": "466420"
  },
  {
    "text": "server side gets stored on disk so big problem well we can now essentially after capturing that traffic grab that",
    "start": "466420",
    "end": "472390"
  },
  {
    "text": "private key decrypt it decrypt the session after the fact so Diffie and in his paper into that in 1992 defi",
    "start": "472390",
    "end": "478600"
  },
  {
    "text": "basically said what field if he hey you shouldn't do that we should do this thing called the diffie-hellman key",
    "start": "478600",
    "end": "484000"
  },
  {
    "text": "exchange instead and there's this concept of perfect forward secrecy and that violates perfect forward secrecy because anything that you and I have",
    "start": "484000",
    "end": "490300"
  },
  {
    "text": "done if we've actually been able to establish a secure connection together and exchange that secret at no point in the future should have any be",
    "start": "490300",
    "end": "495820"
  },
  {
    "text": "compromisable we've done it securely now it should stay secure cool so how do we do that",
    "start": "495820",
    "end": "500920"
  },
  {
    "text": "well we don't send secrets over the network right as if you helmet actually uses the communicative powers of of",
    "start": "500920",
    "end": "506620"
  },
  {
    "text": "exponents to do some cool magic stuff than just send public values and on top of that we really shouldn't be using a",
    "start": "506620",
    "end": "512860"
  },
  {
    "text": "key that store persistently on disk for the encryption part we should use that for identity and signing but we should definitely do something a little more",
    "start": "512860",
    "end": "518440"
  },
  {
    "text": "ephemeral so the idea is we're gonna in four perfect forward secrecy hopefully we would just use the key ones throw it",
    "start": "518440",
    "end": "524860"
  },
  {
    "text": "away and then use another one for a different session the reality is that's not what actually happens so what does kill us actually do well we've been talking about sort of",
    "start": "524860",
    "end": "531460"
  },
  {
    "text": "like a private keys but obviously catching that master key is just as bad especially when the spec says you can catch it for while session IDs for up to",
    "start": "531460",
    "end": "537880"
  },
  {
    "text": "24 hours in theory a master key could outlive that if we just change the session ID and keep using that shared secret that's not what actually happens",
    "start": "537880",
    "end": "545020"
  },
  {
    "text": "at windows and we'll talk about that luckily but there are some implementations that even store this on disk so that's not good what else does",
    "start": "545020",
    "end": "551020"
  },
  {
    "text": "TLS do that's potentially bad well the session tickets themselves are basically the same prom with RSA right we're",
    "start": "551020",
    "end": "556930"
  },
  {
    "text": "encrypting the state so the master key we're shipping it to the client so we don't have to think about it and then when the client was to talk to us he",
    "start": "556930",
    "end": "562090"
  },
  {
    "text": "ships it back we decrypt it verify that it's actually what we thought it was and we start that connection again so that's",
    "start": "562090",
    "end": "567310"
  },
  {
    "text": "really cool because then the server doesn't have to worry about storing it and you can do this if you share that session ticket key in the background",
    "start": "567310",
    "end": "572950"
  },
  {
    "text": "multiple servers can actually resume each other sessions that a bad thing is we're now sending that over the network again so we're sending secrets and then",
    "start": "572950",
    "end": "581230"
  },
  {
    "text": "on top of that we have the implementation specific oddities that are bad and one thing that we're going to talk about today is things like I",
    "start": "581230",
    "end": "586510"
  },
  {
    "text": "don't know if storing symmetric key schedules so the key itself is random but the key schedules not and that",
    "start": "586510",
    "end": "592930"
  },
  {
    "text": "creates problems so and the other thing is like okay yeah would be nice if we you know use this ephemeral key once and",
    "start": "592930",
    "end": "598870"
  },
  {
    "text": "then we just you know got rid of it and grab a new one but that's not really performance so maybe we could just reuse",
    "start": "598870",
    "end": "604990"
  },
  {
    "text": "the ephemeral key for a while since it's in memory and that's good enough that's mostly perfect for word secret right",
    "start": "604990",
    "end": "610540"
  },
  {
    "text": "well I guess we're gonna find out so that's channel and CNG name of the talk how do these things come into play again",
    "start": "610540",
    "end": "617290"
  },
  {
    "start": "613000",
    "end": "613000"
  },
  {
    "text": "secure channels Microsoft's TLS library its second place security support provider that has really mean anything",
    "start": "617290",
    "end": "622660"
  },
  {
    "text": "it's a library that gets loaded into the client process and this thing this magical thing called a key isolation process so basically Microsoft doesn't",
    "start": "622660",
    "end": "630010"
  },
  {
    "text": "trust your little c-sharp web server to be touching private keys so instead it's",
    "start": "630010",
    "end": "635050"
  },
  {
    "text": "gonna house everything in this key isolation process and if you've ever done anything with Windows security you",
    "start": "635050",
    "end": "640360"
  },
  {
    "text": "know that the process that houses all the secrets is else ass so that's where it's gonna be storing those well how",
    "start": "640360",
    "end": "646060"
  },
  {
    "text": "does crypto API next generation get in play well it's it's a as we all know if",
    "start": "646060",
    "end": "651190"
  },
  {
    "text": "the next generations always the best generation but uh it was introduced in Vista so there was one good thing that came out of ista and basically what it",
    "start": "651190",
    "end": "657970"
  },
  {
    "text": "does is add support for AES and ECC so as channel the TLS stuff and then all the actual cryptographic stuff gets handled and",
    "start": "657970",
    "end": "663910"
  },
  {
    "text": "decrypt and encrypt in these other libraries that are part of CNG so what a",
    "start": "663910",
    "end": "670000"
  },
  {
    "text": "CNG do it basically does two very distinct functions it stores things and then it encrypts and decrypts things so",
    "start": "670000",
    "end": "676450"
  },
  {
    "text": "encrypting and decrypting is done via the data protection API which actually le burs Burstein who spoke earlier like",
    "start": "676450",
    "end": "683890"
  },
  {
    "text": "yesterday was the guy who did the seminal research on that so we'll talk about that a little bit and then it",
    "start": "683890",
    "end": "688960"
  },
  {
    "text": "stores them with the key of storage providers so does s channel actually use",
    "start": "688960",
    "end": "694330"
  },
  {
    "start": "692000",
    "end": "692000"
  },
  {
    "text": "this perfect forward secrecy thing that we spent some time talking about well it turns out yeah so I took samples based",
    "start": "694330",
    "end": "699490"
  },
  {
    "text": "on again CNG instances of Windows that use it so looking at Vista we still",
    "start": "699490",
    "end": "706210"
  },
  {
    "text": "preferred RSA keys because well we've just introduced this new VCC thing we don't really want to potentially break",
    "start": "706210",
    "end": "711250"
  },
  {
    "text": "that key exchange along with everything else so so we still preferred our se but we supported ephemeral suites and we",
    "start": "711250",
    "end": "718000"
  },
  {
    "text": "supported Krita elliptic curve Suites and then starting with 7i moving forward we actually embrace those and that's",
    "start": "718000",
    "end": "724210"
  },
  {
    "text": "pretty much exclusively what we want to use so the code to actually list what your cipher suite preferences are is available from Microsoft there's a link",
    "start": "724210",
    "end": "730810"
  },
  {
    "text": "at the bottom and then starting with Windows 10 we actually have a PowerShell command look that'll do that for you so you don't have to worry about that so",
    "start": "730810",
    "end": "736690"
  },
  {
    "text": "take away AES is gonna be the symmetric cipher we prefer like by and large and we now",
    "start": "736690",
    "end": "742780"
  },
  {
    "text": "prefer if I'm real Suites with s channel so using that whole RSA key off this thing to decrypt sessions is no longer",
    "start": "742780",
    "end": "748480"
  },
  {
    "text": "really viable what else is do the docs say well ok we can't use the RSA key but",
    "start": "748480",
    "end": "755890"
  },
  {
    "start": "751000",
    "end": "751000"
  },
  {
    "text": "Microsoft does implement that whole caching thing we talked about with TLS recession resumption and they store the",
    "start": "755890",
    "end": "761020"
  },
  {
    "text": "master key the cipher suite and the certificates that's kind of neat right so the other thing that they tell us is",
    "start": "761020",
    "end": "767380"
  },
  {
    "text": "specifically that else has will consume more memory when you enable that cached life to live longer or when you when you",
    "start": "767380",
    "end": "773970"
  },
  {
    "text": "enlarge the size of the maximum cache size by default we're storing 20,000 cash items that's a lot maybe not a lot",
    "start": "773970",
    "end": "780760"
  },
  {
    "text": "for a web server but a lot for a client right so yeah so so now we know we're",
    "start": "780760",
    "end": "785770"
  },
  {
    "text": "targeting LS s we know that we're looking for at encrypt specifically because the docs mentioned the encrypt",
    "start": "785770",
    "end": "791050"
  },
  {
    "text": "is a secret agreement router we'll take a look at that and we're looking at TLS sessions that use ephemeral Suites so this is",
    "start": "791050",
    "end": "797800"
  },
  {
    "start": "796000",
    "end": "796000"
  },
  {
    "text": "Microsoft's this is a pretty fide version of one of the Microsoft diagrams it looks complicated it's not basically",
    "start": "797800",
    "end": "804310"
  },
  {
    "text": "what it says is whenever a client wants what I've told you earlier basically whenever a client wants to do a key",
    "start": "804310",
    "end": "810400"
  },
  {
    "text": "exchange that calls in else a cell cast else actually does the key exchange on both sides of the server in the client",
    "start": "810400",
    "end": "815560"
  },
  {
    "text": "if they're Windows and then L SAS passes back a security context and a credential",
    "start": "815560",
    "end": "822370"
  },
  {
    "text": "handle to the symmetric keys so that the process itself the client process can handle that tunnel because it would be",
    "start": "822370",
    "end": "827890"
  },
  {
    "text": "terribly inefficient for else has to be grabbing application data and shipping it back up to that client so what does",
    "start": "827890",
    "end": "833560"
  },
  {
    "text": "that mean for us that means that the session keys are gonna be stored in the client process everything else is gonna stay in LS s cool well what does it look",
    "start": "833560",
    "end": "841450"
  },
  {
    "start": "841000",
    "end": "841000"
  },
  {
    "text": "like when it's soared in else s there's this is another Microsoft diagram that I prettified it's CNG so more or less it",
    "start": "841450",
    "end": "849430"
  },
  {
    "text": "trickles down there's these things called C key storage providers and then there's blobs that are can get stored and the way that they get stored and and",
    "start": "849430",
    "end": "855790"
  },
  {
    "text": "how that happens is gonna depend on what kind of secret it is so if it's a RSA",
    "start": "855790",
    "end": "860860"
  },
  {
    "text": "secret or if it's a looked a curve key for instance all right cool so in summary for the background we're",
    "start": "860860",
    "end": "868330"
  },
  {
    "start": "866000",
    "end": "866000"
  },
  {
    "text": "gonna look at L SAS we're looking for keys and we're doing that because that's where the handshake happens and because as channel prefers the ephemeral cipher",
    "start": "868330",
    "end": "875050"
  },
  {
    "text": "Suites excellent why do we want to do this well basically we want to be able to try and say well we want to try and",
    "start": "875050",
    "end": "880900"
  },
  {
    "start": "877000",
    "end": "877000"
  },
  {
    "text": "subvert perfect forward secrecy and how its implemented because that would be really cool we can then decrypt sessions after the fact even if we can't do that",
    "start": "880900",
    "end": "887260"
  },
  {
    "text": "we definitely wanna be able to learn more about the the sessions for forensic purposes again being able to map it back",
    "start": "887260",
    "end": "892420"
  },
  {
    "text": "to who said what to whom looking for public keys especially in cases of like if there's any malware that's using s",
    "start": "892420",
    "end": "898750"
  },
  {
    "text": "channel for some reason and then if we are an adversary it would be really neat",
    "start": "898750",
    "end": "903880"
  },
  {
    "text": "if we could grab those things out of the cache and then decrypt sessions that happen in the future right because we cache those and there's a time value on",
    "start": "903880",
    "end": "909670"
  },
  {
    "text": "that and any time we make a new connection we're just going to go back and look at that cache item so that would be really cool or maybe be able to",
    "start": "909670",
    "end": "916120"
  },
  {
    "text": "pull out the private key and if we can do that we can then like the the persistent private key to signing key if",
    "start": "916120",
    "end": "922120"
  },
  {
    "text": "we can do that we can then impersonate the server itself which would also be kind of Awesome it'd be great if we could do that without touching",
    "start": "922120",
    "end": "928290"
  },
  {
    "text": "so secrets right what are these secrets look like well here's all the kinds of secrets we",
    "start": "928290",
    "end": "934119"
  },
  {
    "text": "talked about so far that could exist in a given connection so you got session keys you got the master key the pre",
    "start": "934119",
    "end": "940179"
  },
  {
    "text": "master key and then and those are both on the client and the server and then you have the ephemeral private key the persistent signing key and the session",
    "start": "940179",
    "end": "947350"
  },
  {
    "text": "take a key that could exist and those would be on the server only so what do",
    "start": "947350",
    "end": "953050"
  },
  {
    "start": "953000",
    "end": "953000"
  },
  {
    "text": "they actually get us well the session keys are only a single connection within the long scope cuz",
    "start": "953050",
    "end": "958749"
  },
  {
    "text": "they don't get cashed right they get regenerated and based on you pull on the client random you mix it together you stamp out whatever your whatever your",
    "start": "958749",
    "end": "965350"
  },
  {
    "text": "keys are gonna be your session keys are gonna be from the from the master key so they're only get you sealed connection",
    "start": "965350",
    "end": "970990"
  },
  {
    "text": "the master key and the pre master key in theory will get you the whole session so that means if we make multiple connections back and forth and we're",
    "start": "970990",
    "end": "977050"
  },
  {
    "text": "reusing that master key if you've got it you can decrypt all of those cool what what about the ephemeral key and this in",
    "start": "977050",
    "end": "983050"
  },
  {
    "text": "a session ticket key if we can grab those now we're cross section cross sessions right so if we reuse that",
    "start": "983050",
    "end": "989589"
  },
  {
    "text": "across multiple sessions then we can decrypt all of those as well and then",
    "start": "989589",
    "end": "994720"
  },
  {
    "text": "the private key the persistent private key gives us identity and if we're using RSA it also gets us the same things that",
    "start": "994720",
    "end": "1000149"
  },
  {
    "text": "the that the ephemeral private key gets us so obviously we're focusing on trying",
    "start": "1000149",
    "end": "1005220"
  },
  {
    "text": "to get the master key that's what we're hoping for we know that gets cached it'd be cool if we get the other things but what do we actually get well we got them",
    "start": "1005220",
    "end": "1011579"
  },
  {
    "text": "all we can get out we can pull everything all of those out of alsace essentially the top one the session keys",
    "start": "1011579",
    "end": "1018480"
  },
  {
    "text": "obviously they're purple that that's stored in the in the client process any",
    "start": "1018480",
    "end": "1023819"
  },
  {
    "text": "time that you see a green symbol that means that they're they're sort of unencrypted in memory and then I know",
    "start": "1023819",
    "end": "1029819"
  },
  {
    "text": "you're all looking at that one yellow symbol that's different you're like hey what about that well that's the yeah the private keys sort encrypted memory but",
    "start": "1029819",
    "end": "1035399"
  },
  {
    "text": "don't worry about it we'll talk about it you can actually just crypt that straight out of memory so no big deal the one other thing that's that you see",
    "start": "1035399",
    "end": "1041428"
  },
  {
    "text": "is not on there it's kind of the corner hidden away is the premaster secret we don't need it we'll explain that in a minute - so how do we how do we do this",
    "start": "1041429",
    "end": "1049200"
  },
  {
    "text": "how do we get to the point where we can actually pull all these things out and the other thing is those paths that you're gonna have ask these slides",
    "start": "1049200",
    "end": "1054809"
  },
  {
    "text": "obviously later but those paths or data structures and offsets into those data structures based on symbol names and my own naming conventions and all",
    "start": "1054809",
    "end": "1061140"
  },
  {
    "text": "I'll explain that in a minute - so so how do we get there well I decided to start with session keys because they're",
    "start": "1061140",
    "end": "1066840"
  },
  {
    "start": "1064000",
    "end": "1064000"
  },
  {
    "text": "closest to the to the data itself they're the most ephemeral you're not gonna probably not going to encrypt",
    "start": "1066840",
    "end": "1072360"
  },
  {
    "text": "something that needs to be used for active encryption so the keys are gonna sit memory unencrypted I started with a",
    "start": "1072360",
    "end": "1077970"
  },
  {
    "text": "yes because well that's the preferred cipher for for like everything for the symmetric cipher so um",
    "start": "1077970",
    "end": "1084120"
  },
  {
    "text": "AES keys themselves were random right they're small for the most part compared to memory and they're very random so you",
    "start": "1084120",
    "end": "1090990"
  },
  {
    "text": "should be able to detect him so how do we detect him well the guys over at Princeton published a cold boot paper a",
    "start": "1090990",
    "end": "1096870"
  },
  {
    "text": "while ago where they talked about in fact that a lot of times implementations calculate this key schedule because a es Keys get expanded into into round keys",
    "start": "1096870",
    "end": "1103590"
  },
  {
    "text": "basically and they get stored as a schedule and they've talked about how again for performance we're storing",
    "start": "1103590",
    "end": "1108870"
  },
  {
    "text": "those a lot of times well Microsoft's no exception we do in fact store those so what I did was I just took a tool I",
    "start": "1108870",
    "end": "1113880"
  },
  {
    "text": "didn't wanna write my own so I took one from Jesse Kornblum I scanned the client process in the server process and what",
    "start": "1113880",
    "end": "1118950"
  },
  {
    "text": "you see there are matching keys in both so you might be wondering why are there four matching keys I thought we you know we got an aes key well there's a nice",
    "start": "1118950",
    "end": "1125730"
  },
  {
    "text": "there's a server key and their server right key and a client right key right and on top of that there's also the mac",
    "start": "1125730",
    "end": "1131640"
  },
  {
    "text": "keys but i think that the that i had two connections there so so yeah so at this",
    "start": "1131640",
    "end": "1138480"
  },
  {
    "text": "point we've got the session keys this is what they look like in memory so what",
    "start": "1138480",
    "end": "1143730"
  },
  {
    "text": "you're gonna see for the rest of the talk is gonna see a lot of wind debug and the reason I did that is I gave the full command that I ran at the bottom so",
    "start": "1143730",
    "end": "1149190"
  },
  {
    "text": "that you could basically do this you want you can follow along if you've got when debug run on your machine and then I've got the structures next to the map",
    "start": "1149190",
    "end": "1154590"
  },
  {
    "text": "to it so this is how this works so a session keys around could spend a lot of time on them they're not really that great for us because connections",
    "start": "1154590",
    "end": "1161010"
  },
  {
    "text": "specific we want at least session specific so we can to make something useful so the basic structure is there's",
    "start": "1161010",
    "end": "1169080"
  },
  {
    "text": "a length there's a magic value and then there's the protocol version and again the the cipher suite version and then",
    "start": "1169080",
    "end": "1175830"
  },
  {
    "text": "there's a flag to whether not it's a right key and a pointer to a bcrypt key so again be crypt part of CNG handles",
    "start": "1175830",
    "end": "1183030"
  },
  {
    "text": "all the symmetric cipher well sorry handles all the the cryptographic primitives and you might recognize that",
    "start": "1183030",
    "end": "1188760"
  },
  {
    "text": "because Benjamin Delfy who wrote mini cats did a lot of work with decrypt keys and things like that because a",
    "start": "1188760",
    "end": "1194269"
  },
  {
    "text": "and three are used and encrypting other kinds of secrets so if you go look at the code from any hats you'll see what he calls those I call he calls the the",
    "start": "1194269",
    "end": "1202089"
  },
  {
    "text": "MS symmetric key I think I think he calls that a beaker key and the other thing at peak Kripke handle the reason I call it ms symmetric key is because of",
    "start": "1202089",
    "end": "1208849"
  },
  {
    "text": "the symbols that Microsoft uses and the fact that the the magic value for is MSS",
    "start": "1208849",
    "end": "1215359"
  },
  {
    "text": "K Microsoft symmetric key and it's always a symmetric key so so there you go so we've got those but we're not",
    "start": "1215359",
    "end": "1221450"
  },
  {
    "text": "gonna spend a lot of time on that because the really cool thing that that got us was this magic value sorry three LSS which is actually SSL three it's",
    "start": "1221450",
    "end": "1228200"
  },
  {
    "text": "stored little-endian so SSL three kind of indicative or that we're talking about SSL but I thought maybe it was",
    "start": "1228200",
    "end": "1234859"
  },
  {
    "text": "referring to the protocol version and then I started looking at it and scanning the modules to figure out where those were stored in memory and and in",
    "start": "1234859",
    "end": "1241459"
  },
  {
    "text": "what sort of functions they were they were used and I found quickly that in fact there's a SSL one two three four",
    "start": "1241459",
    "end": "1247999"
  },
  {
    "text": "five six and seven and so they're not actually a friend of the protocol version at all they're referring to the type of secret and they're all they all",
    "start": "1247999",
    "end": "1254359"
  },
  {
    "start": "1253000",
    "end": "1253000"
  },
  {
    "text": "exists inside of this encrypt SSL provider DLL and it has a series of validation functions that were",
    "start": "1254359",
    "end": "1259429"
  },
  {
    "text": "incredibly helpful and they're very simple all they do is they take a pointer they check a length value they check a magic value and then they return",
    "start": "1259429",
    "end": "1266059"
  },
  {
    "text": "that pointer so the really cool thing about that is now that we when we run through those and we have if we have",
    "start": "1266059",
    "end": "1271159"
  },
  {
    "text": "validation functions for all those are named very appropriately so we can tell what those actually are so what does",
    "start": "1271159",
    "end": "1277279"
  },
  {
    "text": "that mean that means that we know now that SSL five is the master key structure you know as the self or is the key pair of",
    "start": "1277279",
    "end": "1282889"
  },
  {
    "text": "structure which is gonna be the private key and we know that SSL 6 is the ephemeral key and there's two of them",
    "start": "1282889",
    "end": "1288169"
  },
  {
    "text": "that didn't really have validation functions that's no big deal SSL three we already talked about that",
    "start": "1288169",
    "end": "1293749"
  },
  {
    "text": "gets used in things like generate TLS session keys and to encrypt and decrypt and again it's storing a s key and it's",
    "start": "1293749",
    "end": "1300079"
  },
  {
    "text": "passing the client we found matching things we know that that is the session key so the other thing is this SSL seven",
    "start": "1300079",
    "end": "1305749"
  },
  {
    "text": "okay what's that well that's this premaster secret that I told you we were gonna talk about the premaster secret",
    "start": "1305749",
    "end": "1312879"
  },
  {
    "start": "1308000",
    "end": "1308000"
  },
  {
    "text": "it's not really functionally useful it doesn't do anything the master secret doesn't do and even though it always",
    "start": "1312879",
    "end": "1318379"
  },
  {
    "text": "exists for every type of connection this specific structure only stores RSA premaster secret and it gets destroyed",
    "start": "1318379",
    "end": "1324019"
  },
  {
    "text": "it's too beautiful to live it gets killed really quickly you never going in memory unless you capture it right at",
    "start": "1324019",
    "end": "1329730"
  },
  {
    "text": "that moment where they were the sessions taking place so not really useful the",
    "start": "1329730",
    "end": "1335400"
  },
  {
    "text": "master secret so this is the Goldilocks secret this is the whole thing where we get multiple connections for a session and we know that we knows cache is this",
    "start": "1335400",
    "end": "1341280"
  },
  {
    "text": "and this is what it looks like basically the great thing about it is incredibly simple it actually stores the master",
    "start": "1341280",
    "end": "1347250"
  },
  {
    "text": "secret directly inside of that structure so because of that we we could really just scan for this ssl five magic value",
    "start": "1347250",
    "end": "1353760"
  },
  {
    "text": "pull all the master secrets out and then brute force the session for a given session ID that we're interested in just",
    "start": "1353760",
    "end": "1359160"
  },
  {
    "text": "to see if we can decrypt it with what we've got that obviously isn't very elegant but in the case that the cache",
    "start": "1359160",
    "end": "1364350"
  },
  {
    "text": "item has already been decommissioned or purged or what-have-you if there's still an ssl master key that's an option for you but what we really want is a unique",
    "start": "1364350",
    "end": "1371280"
  },
  {
    "text": "ID so what does that look like in memory that looks like this that same structure I just showed you there",
    "start": "1371280",
    "end": "1376500"
  },
  {
    "text": "but then parsed out with when debug and then you can see that there's a pointer to also to the to the cipher suite",
    "start": "1376500",
    "end": "1383610"
  },
  {
    "text": "version because we need to know wait for resuming how we're gonna take that master key and admit those into session",
    "start": "1383610",
    "end": "1388650"
  },
  {
    "text": "keys so so yeah so then what do we do well we take that we map it back to a cache item so I was able to figure out",
    "start": "1388650",
    "end": "1395460"
  },
  {
    "start": "1392000",
    "end": "1392000"
  },
  {
    "text": "exactly what cache item looks like what are the elements inside of a cache item and it stores the unique identifier so either a session ID or a pointer to a",
    "start": "1395460",
    "end": "1402679"
  },
  {
    "text": "session ticket and then that also goes and through through similar to how",
    "start": "1402679",
    "end": "1407760"
  },
  {
    "text": "bcrypt works there's an end crypt as a selkie handle that then points to this master key so at this point we now have",
    "start": "1407760",
    "end": "1413490"
  },
  {
    "text": "session cache item ergo unique value mapped to the master key so we can now",
    "start": "1413490",
    "end": "1419400"
  },
  {
    "text": "pull that out and then we can decrypt sessions directly we get houston we have plaintext basically so what does that",
    "start": "1419400",
    "end": "1425520"
  },
  {
    "text": "look like well the easiest way to do this is just a dump this to into a format that Wireshark understands and",
    "start": "1425520",
    "end": "1430790"
  },
  {
    "text": "then you can just load that straight into Wireshark so at this point yeah we've got everything we need but why",
    "start": "1430790",
    "end": "1436200"
  },
  {
    "text": "stop there there's other interesting things to grab so the ephemeral and",
    "start": "1436200",
    "end": "1441809"
  },
  {
    "start": "1438000",
    "end": "1438000"
  },
  {
    "text": "private and persistent private keys right the private certificate in the ephemeral key we saw that those were SSL for and SSL six well they had the same",
    "start": "1441809",
    "end": "1449010"
  },
  {
    "text": "structure which makes a lot of sense they're both private keys they get stored in this with this key storage provider so what happens is we have a",
    "start": "1449010",
    "end": "1456690"
  },
  {
    "text": "ssl key pair sort of struct at the very bottom of that there's this what I call a KPS key KPS key storage",
    "start": "1456690",
    "end": "1464490"
  },
  {
    "text": "provider key pointer k PS k pointer that points to an end Kripke handle which then points to that KP SK structure",
    "start": "1464490",
    "end": "1471419"
  },
  {
    "text": "inside of the KP SK structure we then have a pointer a depending on if it's a femoral T we have a pointer off to this",
    "start": "1471419",
    "end": "1476549"
  },
  {
    "text": "M s KY structure which gives use for the to store the ephemeral key or it points",
    "start": "1476549",
    "end": "1481799"
  },
  {
    "text": "off to a teepee API blob which is sort which is the private key and we'll go through those directly so this is what",
    "start": "1481799",
    "end": "1488940"
  },
  {
    "start": "1488000",
    "end": "1488000"
  },
  {
    "text": "the ephemeral key looks like stored in memory the one thing that tripped me up was the hid it was a it was sort of little onion",
    "start": "1488940",
    "end": "1494340"
  },
  {
    "text": "and nothing else is stored little-endian and in the byte arrays and everything else so it was just wasn't expecting it",
    "start": "1494340",
    "end": "1499740"
  },
  {
    "text": "but Microsoft actually has functions specifically to flip it from a little endian byte array to a scalar so they can use it their calculations so what",
    "start": "1499740",
    "end": "1507450"
  },
  {
    "text": "what I've dumped here is there's this there's this as channel you might have seen from those symbols and I didn't mention it explicitly but it's it's",
    "start": "1507450",
    "end": "1513749"
  },
  {
    "text": "object-oriented right so there's classes so when what we have at the bottom of",
    "start": "1513749",
    "end": "1519299"
  },
  {
    "text": "that when debug thing is I'm looking for a for a V F table of a see of a class",
    "start": "1519299",
    "end": "1526619"
  },
  {
    "text": "essentially the C ephemeral key data and that points to the public key and then points all the way down to this through",
    "start": "1526619",
    "end": "1534149"
  },
  {
    "text": "through that SSL 6 all the way down to this private key this ephemeral private",
    "start": "1534149",
    "end": "1540659"
  },
  {
    "text": "key so what can we do with this well in theory we can actually pull this out run it through something like SSL throw to a PEM format and then decrypt sessions",
    "start": "1540659",
    "end": "1547259"
  },
  {
    "text": "with it Wireshark doesn't currently support that that's something that I actually I'm gonna add as soon as we're done it's just I haven't had a need so",
    "start": "1547259",
    "end": "1552659"
  },
  {
    "text": "far because nobody's pulling ephemeral keys out of memory so but yeah now at that point you can you can encrypt multiple sessions because this gets used",
    "start": "1552659",
    "end": "1558480"
  },
  {
    "text": "across sessions so that's kind of cool yeah so also what you have here the the",
    "start": "1558480",
    "end": "1565679"
  },
  {
    "text": "KPS key structure also soars the nist curve and the curve parameters so that",
    "start": "1565679",
    "end": "1570779"
  },
  {
    "text": "you can generate the public key which is how i verify that this wasn't back the private key because otherwise it looks like again just sort of random data that",
    "start": "1570779",
    "end": "1580230"
  },
  {
    "text": "the MS KY structure that this is stored in by the way gets used elsewhere and I'll talk about that when we get to it",
    "start": "1580230",
    "end": "1585470"
  },
  {
    "text": "but yeah so this point we've got the ephemeral key we've got the master key you got the session key we've got the",
    "start": "1585470",
    "end": "1591600"
  },
  {
    "start": "1587000",
    "end": "1587000"
  },
  {
    "text": "pre master key really kinda we don't really need it and what about that persistent private key can we get that out of memory that",
    "start": "1591600",
    "end": "1597220"
  },
  {
    "text": "was encrypted that was a little yellow lock well yeah we can get that of course we can it's sort of DP API and it's sort",
    "start": "1597220",
    "end": "1603369"
  },
  {
    "text": "of memory now if we wanted we can grab the the DP API master key off of disk",
    "start": "1603369",
    "end": "1608739"
  },
  {
    "text": "and that is that read there that's on the on the when debug screen that's the",
    "start": "1608739",
    "end": "1614889"
  },
  {
    "text": "key gooood for the DPP Ikey so we could actually go find that decrypt it and then have it that way but we don't",
    "start": "1614889",
    "end": "1620080"
  },
  {
    "text": "really want to go to disk I mean that's a lot of work and what if we don't have that what if we've only got the LSS process dump itself well that's no",
    "start": "1620080",
    "end": "1627460"
  },
  {
    "text": "problem because the DP API key itself gets cached the master key gets cached in LSS as well and Benjamin Delfy did a",
    "start": "1627460",
    "end": "1634269"
  },
  {
    "text": "lot of work on this I actually went through and tried reverse it myself or did reverse it myself and then saw that he had done it and felt stupid for not",
    "start": "1634269",
    "end": "1640450"
  },
  {
    "text": "checking his code earlier because he's kind of the man when it comes to LCS but um but anyway so what I'm showing you and that and this and this win debug",
    "start": "1640450",
    "end": "1647559"
  },
  {
    "text": "example is I basically looked at that key gooood and then I scanned the master",
    "start": "1647559",
    "end": "1653619"
  },
  {
    "start": "1653000",
    "end": "1653000"
  },
  {
    "text": "key cache because I know what that structure is I dumped out this single entry that map's that key good so that's the encrypted pre DP API master key and",
    "start": "1653619",
    "end": "1661779"
  },
  {
    "text": "directly above that are the initialization vector and the three DES key that are used to unencrypt at once",
    "start": "1661779",
    "end": "1667509"
  },
  {
    "text": "you have this DP API master key you can then use that on the dapi blob itself to decrypt the private key and you wind up",
    "start": "1667509",
    "end": "1674109"
  },
  {
    "text": "with something like this so on the on the lock side we have the key from disk",
    "start": "1674109",
    "end": "1680529"
  },
  {
    "text": "and the TVPA DP API blob is highlighted in gold and then we have what I pulled out of memory and decrypted which is the",
    "start": "1680529",
    "end": "1686919"
  },
  {
    "text": "RSA and you'll know that it's actually the private key when you've decrypted it properly because it says if it's an RSA key Microsoft stores with RSA 2 so you",
    "start": "1686919",
    "end": "1693609"
  },
  {
    "text": "can see that so at this point we've pulled the private key directly out of memory we didn't have to touch disk to",
    "start": "1693609",
    "end": "1699129"
  },
  {
    "text": "do that and we decrypted it so that's kind of cool so the last thing we have talked about as far as secrets go before",
    "start": "1699129",
    "end": "1704590"
  },
  {
    "text": "we get to the forensic stuff is the such this concept of session tickets and so far microsoft has actually been doing",
    "start": "1704590",
    "end": "1710080"
  },
  {
    "text": "everything by and large correctly I mean the reality is those things are supposed to be short-lived or in memories that",
    "start": "1710080",
    "end": "1715210"
  },
  {
    "text": "you really can't fault them for storing them unencrypted and they do encrypt the the they've keep the public or the",
    "start": "1715210",
    "end": "1720909"
  },
  {
    "text": "private key the persistent web key encrypted in memory until they use it so props to them granted they store the",
    "start": "1720909",
    "end": "1726100"
  },
  {
    "text": "other thing so we can encrypt it all our memory but still but session tickets is kind of where things get a little bit fuzzy and",
    "start": "1726100",
    "end": "1731620"
  },
  {
    "text": "their documentation starts get really bad so session tickets were introduced with Server 2012 but and we and we have",
    "start": "1731620",
    "end": "1738940"
  },
  {
    "text": "these PowerShell modules that will enable a administrator manage session ticket but they don't ever really tell",
    "start": "1738940",
    "end": "1745540"
  },
  {
    "text": "you okay this is how you actually go about enabling them but what you find is in the Windows 8.1 preview release notes",
    "start": "1745540",
    "end": "1751600"
  },
  {
    "text": "are like b-t-dub definitely need to be disabling session tickets by setting this specific registry value to two",
    "start": "1751600",
    "end": "1757120"
  },
  {
    "text": "because if you don't that's gonna break so when you look at that I said okay well twos disabled one is probably",
    "start": "1757120",
    "end": "1763060"
  },
  {
    "text": "enabled it was enabled so if you go through the steps and you actually set up session tickets by creating a new",
    "start": "1763060",
    "end": "1768490"
  },
  {
    "text": "session ticket basically everything I've done in this PowerShell window right here you create a new session ticket you enable a session ticket for the specific",
    "start": "1768490",
    "end": "1774940"
  },
  {
    "text": "user and then you enable this setting that the and the registry to actually",
    "start": "1774940",
    "end": "1780280"
  },
  {
    "text": "naval session tickets then you can actually start using them so there's also this cool nifty little function called export TLS session ticket key and",
    "start": "1780280",
    "end": "1786640"
  },
  {
    "text": "what you what you might notice is that there's a key path so when I'm creating these keys I'm actually creating these session ticket keys on disk this is an",
    "start": "1786640",
    "end": "1793120"
  },
  {
    "text": "in-memory and then I'm enabling them for user and those are getting stored on disk so what does that mean well this is",
    "start": "1793120",
    "end": "1800710"
  },
  {
    "start": "1799000",
    "end": "1799000"
  },
  {
    "text": "what the key file actually looks like on disk so you got the db-api blob at the bottom you have the key good and then",
    "start": "1800710",
    "end": "1806230"
  },
  {
    "text": "the size of the DP I've got deep deep the API blob directly above that and then there's a value that I didn't take the time figure out what it was cuz I",
    "start": "1806230",
    "end": "1811750"
  },
  {
    "text": "didn't need it but it's probably a Mac result or something so what about just",
    "start": "1811750",
    "end": "1818200"
  },
  {
    "text": "doing this straight from memory I don't have to grab this key from disk it's kind of scary that it gets stored on disk what does that mean well luckily it",
    "start": "1818200",
    "end": "1824500"
  },
  {
    "text": "does get loaded directly into memory there's a key derivation function that happens I decrypted this with TPP I pick",
    "start": "1824500",
    "end": "1831010"
  },
  {
    "text": "off from disk looked at it look for that value in memory when I ran through matched them up and said okay here's",
    "start": "1831010",
    "end": "1836740"
  },
  {
    "text": "where it's getting used and then followed the chain and saw that actually gets passed through a key derivation function then we get our magical AES key",
    "start": "1836740",
    "end": "1841990"
  },
  {
    "text": "that we want very cool once you have that AES key that's it straight AES to decrypt the session tickets so an interesting thing",
    "start": "1841990",
    "end": "1850180"
  },
  {
    "text": "there's no random value that gets passed in with that key so having the key from disk basically you can then regen it",
    "start": "1850180",
    "end": "1855850"
  },
  {
    "text": "seems and across reboots that that AES key gets loaded that same AES key gets generated so you can actually",
    "start": "1855850",
    "end": "1861400"
  },
  {
    "text": "take that pass it through the beaker key derivation function and then after you stole that you basically had the same",
    "start": "1861400",
    "end": "1867309"
  },
  {
    "text": "thing as the RSA private key for anything that uses session tickets so there's that so what does the session ticket itself",
    "start": "1867309",
    "end": "1874120"
  },
  {
    "start": "1873000",
    "end": "1873000"
  },
  {
    "text": "look like Microsoft actually followed the spec and improved upon it they use a",
    "start": "1874120",
    "end": "1879610"
  },
  {
    "text": "key they put the key code first they put the IV just like the spec says and then they take the Mac and instead of storing it after the encrypted state they store",
    "start": "1879610",
    "end": "1885430"
  },
  {
    "text": "it before so that if they want to change the length of the encrypted state at any point in the future they don't actually have to go through and change how their",
    "start": "1885430",
    "end": "1890500"
  },
  {
    "text": "pop they parse everything so props for that that's cool they're using AES 256 instead of AES 128 which is what the RFC",
    "start": "1890500",
    "end": "1896770"
  },
  {
    "text": "originally proposed and we're gonna talk about what gets stored inside of it once we show you quickly how you decrypt it",
    "start": "1896770",
    "end": "1903010"
  },
  {
    "text": "which is literally just a yes so the M s key protect stores the that stores this",
    "start": "1903010",
    "end": "1909309"
  },
  {
    "text": "key this session ticket key and in a cache directly inside of the module of",
    "start": "1909309",
    "end": "1914710"
  },
  {
    "text": "memory actually and all you need to there's no symbols for the cache but all",
    "start": "1914710",
    "end": "1919750"
  },
  {
    "text": "you need to do to find it is have the key that key ticket gooood which gets sent with the session ticket itself so",
    "start": "1919750",
    "end": "1924760"
  },
  {
    "text": "if you know what session ticket you want to decrypt you can just grab that given search memory extract that AES key or",
    "start": "1924760",
    "end": "1930940"
  },
  {
    "text": "you could just extract it because it's the only bcrypt key that's really getting pointed to inside of the MSP per text structure and we now know what the",
    "start": "1930940",
    "end": "1936910"
  },
  {
    "text": "magic values for the bcrypt keys look like and then you can decrypt these offline and so decrypted session ticket",
    "start": "1936910",
    "end": "1943120"
  },
  {
    "text": "basically just has the ssl 5 structure the master key structure a timestamp you",
    "start": "1943120",
    "end": "1949000"
  },
  {
    "text": "know the protocol information and stuff like that inside of it so that's what this looks like the the first window is the Wireshark of the session ticket then",
    "start": "1949000",
    "end": "1955030"
  },
  {
    "text": "you have I dumped out the the session the session key entry and then the session key and then I have the",
    "start": "1955030",
    "end": "1961090"
  },
  {
    "text": "decrypted version that I just for visual purposes just passed to some online thing that has AES so you can see it",
    "start": "1961090",
    "end": "1966550"
  },
  {
    "text": "decrypted so so now at this point we have basically decrypted we've we've",
    "start": "1966550",
    "end": "1972429"
  },
  {
    "text": "extracted and decrypted every kind of key that you can possibly have for a TLS session out of Windows memory so that's",
    "start": "1972429",
    "end": "1978190"
  },
  {
    "text": "really cool and all but you might be wondering like well what if I don't have a pcap or what if I don't care about",
    "start": "1978190",
    "end": "1983380"
  },
  {
    "text": "encrypting future sessions because I'm not a guy that bad guy right I'm just a forensic guy I want to know how I can",
    "start": "1983380",
    "end": "1988570"
  },
  {
    "text": "use this for my own purposes well there's a lot of context information that gets stored inside of the",
    "start": "1988570",
    "end": "1995290"
  },
  {
    "start": "1993000",
    "end": "1993000"
  },
  {
    "text": "because cash items so what kind of metadata we have typically for TLS well",
    "start": "1995290",
    "end": "2001800"
  },
  {
    "text": "we have this idea of the server name indicator and this is something that kind of builds on top of the functionality you get out of volatility",
    "start": "2001800",
    "end": "2007230"
  },
  {
    "text": "and out of recall with their con scan right so if you do a connection scan and you see that hey this process reached",
    "start": "2007230",
    "end": "2013680"
  },
  {
    "text": "out to this IP address on 443 that's all you get but the reality is that there could be",
    "start": "2013680",
    "end": "2018720"
  },
  {
    "text": "many virtual servers at that IP address so one of the cool things that TLS does is when it requests sensor to request",
    "start": "2018720",
    "end": "2024450"
  },
  {
    "text": "out it stores this s channel stores the server name indicator that says here by the way is the specific guy that I want",
    "start": "2024450",
    "end": "2030330"
  },
  {
    "text": "to talk to at that IP address and we saw the public search so we can use that as well the other thing is obviously you can use",
    "start": "2030330",
    "end": "2036240"
  },
  {
    "text": "the key gooood and potentially a OPN can kind of tell you what protocol was gonna come next those kinds of things core",
    "start": "2036240",
    "end": "2042300"
  },
  {
    "text": "functionality from from TLS the random values typically start with a timestamp so that's kind of useful if they follow",
    "start": "2042300",
    "end": "2049110"
  },
  {
    "text": "the spec not everybody does and then you can actually fingerprint based on the session ID which is something that",
    "start": "2049110",
    "end": "2054810"
  },
  {
    "text": "somebody discussed in do it there the dual ec paper this is not supposed to happen because in theory a session ID is",
    "start": "2054810",
    "end": "2060960"
  },
  {
    "text": "supposed to be random right well no it suppose to be arbitrary and Microsoft actually has a s channel specifically",
    "start": "2060960",
    "end": "2067110"
  },
  {
    "text": "has a fingerprint because it takes according to this Julie C paper it takes the 20000 value that we saw earlier and",
    "start": "2067110",
    "end": "2073620"
  },
  {
    "text": "it performs an operation on that with the first D word of the session ID and so what you wind up with is two bytes two bytes of random data two bytes of",
    "start": "2073620",
    "end": "2080638"
  },
  {
    "text": "zeros and then the rest is random and it becomes a very obvious pattern to pick out if you're looking at a bunch of TLS",
    "start": "2080639",
    "end": "2086370"
  },
  {
    "text": "sessions you can easily see yep that's s channel so the other thing is we saw that there's variations in the cipher",
    "start": "2086370",
    "end": "2091980"
  },
  {
    "text": "suites that are preferred based on the version of Windows so in theory those get stored temporarily as well with as part of the security context you could",
    "start": "2091980",
    "end": "2099240"
  },
  {
    "text": "actually sort of start to figure out what kind of server they were talking to was it a Windows you know Server 2012 was it Windows Server 2003 or and stuff",
    "start": "2099240",
    "end": "2106830"
  },
  {
    "text": "like that so you can you kind of find out some cool information just by looking at some of that ancillary data from a forensic perspective so how long",
    "start": "2106830",
    "end": "2114090"
  },
  {
    "start": "2113000",
    "end": "2113000"
  },
  {
    "text": "does all this actually get cache we've been talking about this for a while we talked about the keys we talked about this cache and we can extract stuff well",
    "start": "2114090",
    "end": "2119880"
  },
  {
    "text": "by default everything gets cached for 10 hours so not for 24 hours that we were hoping for but 10 hours is really pretty",
    "start": "2119880",
    "end": "2125400"
  },
  {
    "text": "good especially for something like RDP that we did earlier so I haven't stopped that it's still running I'm not gonna sit",
    "start": "2125400",
    "end": "2130980"
  },
  {
    "text": "here and wait 10 hours with you until I actually pull that out we'll do it quickly at the end but um but yeah so that's kind of neat from an incident",
    "start": "2130980",
    "end": "2137250"
  },
  {
    "text": "response perspective these things that memory for quite a long time also we store 20,000 entries and we separate",
    "start": "2137250",
    "end": "2142410"
  },
  {
    "text": "those entries into cache server cache items and client cache items so one kind of cool thing that you can ask yourself is like when it's a client a server",
    "start": "2142410",
    "end": "2148140"
  },
  {
    "text": "well RDP is a case where the client acts as the server but one else should there be server entries and in there for the",
    "start": "2148140",
    "end": "2154440"
  },
  {
    "text": "client maybe there shouldn't so it kind of helped you figure out things about whether or not a host has been",
    "start": "2154440",
    "end": "2159450"
  },
  {
    "text": "compromised and stuff like that so the other thing is by default when it's when",
    "start": "2159450",
    "end": "2165180"
  },
  {
    "text": "a session gets purged there's a cleanup function that runs about every 300 seconds so you might have a window there",
    "start": "2165180",
    "end": "2172289"
  },
  {
    "text": "potentially depending on when that was last purged to or when that last ran to",
    "start": "2172289",
    "end": "2177359"
  },
  {
    "text": "actually extract them after they've been decommissioned and so the only thing - the big caveat to this is as channels",
    "start": "2177359",
    "end": "2184349"
  },
  {
    "text": "the libraries so the process has control if the process wants to purge its own session cache it has full right to do so",
    "start": "2184349",
    "end": "2189990"
  },
  {
    "text": "it says hey else ask get rid of that I'm done with it and LS will comply so so",
    "start": "2189990",
    "end": "2195599"
  },
  {
    "text": "they can do that one example is like is supposedly rotates the ephemeral key every two hours now two hours to decrypt",
    "start": "2195599",
    "end": "2202200"
  },
  {
    "text": "every session that was made in that time period still pretty darn good but at the same time that's something to be aware",
    "start": "2202200",
    "end": "2207569"
  },
  {
    "text": "of and the other thing is when a process terminates and this is the really sad part as channel clears the cache so it",
    "start": "2207569",
    "end": "2214319"
  },
  {
    "text": "may because it's centralized and it's maintaining control of all that for all",
    "start": "2214319",
    "end": "2220529"
  },
  {
    "text": "the different processes it actually stores the process ID which is good right so inside the session cache we have a process ID but when I win that",
    "start": "2220529",
    "end": "2226710"
  },
  {
    "text": "session or when that process dies s channel just purges those so um the good",
    "start": "2226710",
    "end": "2231990"
  },
  {
    "text": "thing is things like RTP run as services so you have to worry about that again most of the things that we're gonna have a server cases it's gonna run as a as a",
    "start": "2231990",
    "end": "2237569"
  },
  {
    "text": "service itself so you will have to worry about that but yeah so what does your s Channel cache actually look like well",
    "start": "2237569",
    "end": "2244079"
  },
  {
    "start": "2241000",
    "end": "2241000"
  },
  {
    "text": "here's an example of a 64-bit s Channel cache and it's a volatility V type so",
    "start": "2244079",
    "end": "2249720"
  },
  {
    "text": "the very first thing is that VF table so I've been if you if you go back and you look at the wound debug stuff you're like why does he keep looking for these",
    "start": "2249720",
    "end": "2255809"
  },
  {
    "text": "VF table symbols well if you're not really terribly familiar with how Microsoft C++ compiler works basically",
    "start": "2255809",
    "end": "2261720"
  },
  {
    "text": "the it the when you have a class the very first things gets stored as a virtual function table if you've got one and so you can",
    "start": "2261720",
    "end": "2268890"
  },
  {
    "text": "actually use that as a heuristic it's not a magic value but and it'll change with every time that the binary gets",
    "start": "2268890",
    "end": "2275430"
  },
  {
    "text": "recompiled but you can actually use that to to then decrypt or you can use that",
    "start": "2275430",
    "end": "2282960"
  },
  {
    "text": "sorry to find the to find the classes so that's really kind of neat so first thing gets towards the F table second",
    "start": "2282960",
    "end": "2288720"
  },
  {
    "text": "things that pointer that master key and then some things to call out are that logon session UID so every time you log",
    "start": "2288720",
    "end": "2295020"
  },
  {
    "text": "onto windows there's a unique identifier that gets generated this isn't your user ID and that gets stored here as well so",
    "start": "2295020",
    "end": "2300060"
  },
  {
    "text": "you now can map back the session ID the logon session ID and the process ID to the specific TLS session which also has",
    "start": "2300060",
    "end": "2307140"
  },
  {
    "text": "public certificates and think certificates and things like that so that's really kind of neat the server",
    "start": "2307140",
    "end": "2312930"
  },
  {
    "text": "cache much smaller and again I haven't there's these are you can see the rough sizes of these I haven't actually gone",
    "start": "2312930",
    "end": "2318720"
  },
  {
    "text": "through and grabbed every field I've grabbed as many as I could in the time period I had and so that's what that",
    "start": "2318720",
    "end": "2324660"
  },
  {
    "text": "looks like and that's that parsed out as well and then Vista because yeah you",
    "start": "2324660",
    "end": "2329670"
  },
  {
    "text": "know everybody loves Vista but this is kind of proto s channel that's before we",
    "start": "2329670",
    "end": "2334859"
  },
  {
    "text": "really did session it's where we really did classes so it's more of just a list entry structure the very first thing is",
    "start": "2334859",
    "end": "2340530"
  },
  {
    "text": "a list entry then you can loop through and find all the other cache items that way so automating it so that's all cool",
    "start": "2340530",
    "end": "2346230"
  },
  {
    "text": "and well but I don't really go through and be messing around when debug all the time how do i how did you make this useful to me well there's a volatility",
    "start": "2346230",
    "end": "2352800"
  },
  {
    "text": "in order call plugin and we'll demonstrate that and the default behavior is just we're just gonna dump out session IDs maps to the master keys",
    "start": "2352800",
    "end": "2360119"
  },
  {
    "text": "in that wire spark format so you can literally and this was really done because i there's not technical people I know that would find this useful so this",
    "start": "2360119",
    "end": "2366480"
  },
  {
    "text": "is done so that you can literally just take that throw it into Wireshark and then you crypt that traffic so cool eventually I'd like to do it live I'd",
    "start": "2366480",
    "end": "2373080"
  },
  {
    "text": "like to I'd like to create a PowerShell module and I'd like to create a or",
    "start": "2373080",
    "end": "2378450"
  },
  {
    "text": "incorporate this into mini cats because I think again this is all else as this is Benjamin delphi's area so I think",
    "start": "2378450",
    "end": "2383670"
  },
  {
    "text": "that if he's amenable we could maybe do something like that so limitations so we're working with",
    "start": "2383670",
    "end": "2390600"
  },
  {
    "start": "2389000",
    "end": "2389000"
  },
  {
    "text": "internal and undocumented structures there's like I think it was fire I put out a like a blog post and early maybe like",
    "start": "2390600",
    "end": "2398589"
  },
  {
    "text": "March of this year and they said hey by the way there's this town great things it happens sometimes with session",
    "start": "2398589",
    "end": "2403930"
  },
  {
    "text": "tickets in an s channel and so it seems that about after that there was an item",
    "start": "2403930",
    "end": "2409119"
  },
  {
    "text": "that was inserted into the cache so not a big deal but the it changes those offsets that we saw right so the problem",
    "start": "2409119",
    "end": "2414640"
  },
  {
    "text": "is well if you have unpatch system and patch systems then you have to do a little extra work if you want to figure out you know how to get to those but it",
    "start": "2414640",
    "end": "2420609"
  },
  {
    "text": "doesn't affect the it's inserted after the session ID so it really only affects session tickets and things like that but",
    "start": "2420609",
    "end": "2426730"
  },
  {
    "text": "anyway the things to be aware of when you're working with internal and undocumented structures is there'll be some limitations like that we're also",
    "start": "2426730",
    "end": "2432160"
  },
  {
    "text": "talking about using symbols right so because we're using symbols Microsoft",
    "start": "2432160",
    "end": "2438609"
  },
  {
    "text": "can take them away they can do it they can say well next time we compile that you're not gonna have those but we can still do things without symbols and in",
    "start": "2438609",
    "end": "2445150"
  },
  {
    "text": "fact we do that without symbols within volatility for instance and it's actually it's not that hard and then the",
    "start": "2445150",
    "end": "2450970"
  },
  {
    "text": "other thing is you need to be able to eat Alsace right so not a problem in 2016 I mean you've seen again many cats",
    "start": "2450970",
    "end": "2456280"
  },
  {
    "text": "is ubiquitous use everywhere but if you can read Alsace memory that basically means you on the system which basically",
    "start": "2456280",
    "end": "2462400"
  },
  {
    "text": "means that you can do a lot of other really bad things and maybe this isn't as big of a deal except for obviously",
    "start": "2462400",
    "end": "2467650"
  },
  {
    "text": "the session take a key in the and a private key cuz then you can impersonate and decrypt after the fact but you know",
    "start": "2467650",
    "end": "2473440"
  },
  {
    "text": "if you own a system you on the system so so that's why it's probably most useful in a forensic context so let's let's go",
    "start": "2473440",
    "end": "2481779"
  },
  {
    "text": "back to that um just quickly and I hope this works so I created that session earlier that",
    "start": "2481779",
    "end": "2488740"
  },
  {
    "text": "RDP session and we can take a look at that",
    "start": "2488740",
    "end": "2493740"
  },
  {
    "text": "yeah yeah so let's look at the server hello really quick and just make sure that this is",
    "start": "2500340",
    "end": "2506920"
  },
  {
    "text": "ephemeral you're gonna notice that that's TLS one not TLS 1.2 and you're gonna say hi he's cheating",
    "start": "2506920",
    "end": "2511990"
  },
  {
    "text": "well RDP replay that which which was which was released for just recently open source I had to modify that and I didn't have",
    "start": "2511990",
    "end": "2517960"
  },
  {
    "text": "time to make it support TLS one on one point one point one at one point two so it's still using an ephemeral key change",
    "start": "2517960",
    "end": "2523779"
  },
  {
    "text": "which is the important part and we can see that right here PC DHE so let's",
    "start": "2523779",
    "end": "2529390"
  },
  {
    "text": "minimize that so we're gonna simulate a acquiring rep Ram from that virtual machine the Windows 10 one that I remote",
    "start": "2529390",
    "end": "2535599"
  },
  {
    "text": "it into and this is gonna take a moment because we're dumping 4 gigs of memory so just bear with me and and then so you",
    "start": "2535599",
    "end": "2544420"
  },
  {
    "text": "saw you saw the screenshot of the volatility plug-in that work so I want to show you the recall things you know that I both of them they both work so",
    "start": "2544420",
    "end": "2550690"
  },
  {
    "text": "I'm gonna go ahead and do that for you really quick nothing up my sleeve kind of stuff it's gonna be angry because",
    "start": "2550690",
    "end": "2556990"
  },
  {
    "text": "can't talk to the internet and then it's gonna dump that out for us now I'll",
    "start": "2556990",
    "end": "2565000"
  },
  {
    "text": "probably take a moment in fact if anybody has questions I don't know how we're doing for time but you can probably queue on those and then",
    "start": "2565000",
    "end": "2573339"
  },
  {
    "text": "it's okay perfect perfect okay so there's the so that's that's the session",
    "start": "2573339",
    "end": "2578710"
  },
  {
    "text": "ID and the master key dumped out so I could actually we'll just do this so",
    "start": "2578710",
    "end": "2586180"
  },
  {
    "text": "dump that into this file and then we're gonna read that a pcap file in and we're",
    "start": "2586180",
    "end": "2593769"
  },
  {
    "text": "gonna read this I think that's very sort it was demo dot txt okay cool and and",
    "start": "2593769",
    "end": "2599769"
  },
  {
    "text": "again this is a modified version of already replay that will actually take the the Wireshark format and at voila",
    "start": "2599769",
    "end": "2606730"
  },
  {
    "text": "we were now replaying an RDP session that was that uses ephemeral cipher Suites so tada",
    "start": "2606730",
    "end": "2613650"
  },
  {
    "text": "you'll see of the things I typed with the dates earlier just to kind of give you a rough idea that I'm not cheating you and then yeah so if there's",
    "start": "2619509",
    "end": "2628519"
  },
  {
    "text": "questions and things like that please come up to the mic and ask me anything you want and also really quickly so",
    "start": "2628519",
    "end": "2638630"
  },
  {
    "text": "that's the end and you can you can ask me questions that you can you can contact me I quit on Twitter as well if",
    "start": "2638630",
    "end": "2644150"
  },
  {
    "text": "you don't ask me questions now so at 10 rabbit and then I just really want to say a special thanks to Anja Doyle who's",
    "start": "2644150",
    "end": "2650930"
  },
  {
    "text": "just a awesome and to John dr. John Ross well while Robbins Dean and Marcus",
    "start": "2650930",
    "end": "2656480"
  },
  {
    "text": "Rogers of the Purdue cyber forensics laboratory and Michael Haley of volatility who I don't know if he's was able to make it today but he was really",
    "start": "2656480",
    "end": "2662509"
  },
  {
    "text": "really nice and looked over my stuff and just generally awesome so and don't let",
    "start": "2662509",
    "end": "2668180"
  },
  {
    "text": "me forget to talk to you on ringgenberg so yeah so that's it thanks very much",
    "start": "2668180",
    "end": "2674319"
  },
  {
    "text": "question ok so have you contributed the",
    "start": "2675130",
    "end": "2680839"
  },
  {
    "text": "art if you replay modifications you made upstream or is that modified version available anywhere yeah yeah yeah no so",
    "start": "2680839",
    "end": "2687980"
  },
  {
    "text": "I haven't yet I am gonna I'd like to I'd like actually like to completely rewrite it but I'll make what I have now",
    "start": "2687980",
    "end": "2693319"
  },
  {
    "text": "available it's just that it was it's compiled with an older version of x3 RTP so but yeah the guys ik in Texas are",
    "start": "2693319",
    "end": "2699799"
  },
  {
    "text": "awesome for open sourcing that and it's yeah really cool so I definitely will contribute that yeah cuz this is so this whole thing is really awesome because",
    "start": "2699799",
    "end": "2705230"
  },
  {
    "text": "I've wanted exactly this for a very long time yeah me too but it's kind of a",
    "start": "2705230",
    "end": "2711140"
  },
  {
    "text": "usability thing do you have any solution to the problem of like if you have like the NSSC log format and you stick into",
    "start": "2711140",
    "end": "2717170"
  },
  {
    "text": "water I can do cups of things you then have to like every time you have a different stream I'm sure you're handed this all the time you've got to go through the thing and change it",
    "start": "2717170",
    "end": "2723680"
  },
  {
    "text": "because there's no way to like pair them together in a way they like you now have a decrypted pcap you're like exists in",
    "start": "2723680",
    "end": "2729950"
  },
  {
    "text": "perpetuity do you have like any solution to that because I've looked around for a long time and I have no idea yeah so again what I'm hoping to do is I'm",
    "start": "2729950",
    "end": "2736519"
  },
  {
    "text": "hoping to go back and look at the SSL utils disguise sector for Wireshark and kind of change that because there's a",
    "start": "2736519",
    "end": "2742279"
  },
  {
    "text": "lot of things like for instance the pre master key once you have that the process of turning that into the master key doesn't matter how long the pre mask",
    "start": "2742279",
    "end": "2748069"
  },
  {
    "text": "use or what looks like yeah is the same so really at that point the there should be a unified interface to be able to do exactly what",
    "start": "2748069",
    "end": "2754160"
  },
  {
    "text": "you're talking about through Wireshark where once you points you can even outside of the kilo forma yeah that's",
    "start": "2754160",
    "end": "2760760"
  },
  {
    "text": "what I'm saying so we'll put my place in the same way to be able to say the key log for my HP we'll take a private key she'll take a federal private key no matter what once you get to that point",
    "start": "2760760",
    "end": "2766730"
  },
  {
    "text": "it's all the same yeah so they can do you can do the encrypted premaster secret and a few other things if you oh yeah encrypted premaster",
    "start": "2766730",
    "end": "2773390"
  },
  {
    "text": "secret and like the session ID it's a weird yeah but I I agree that they only take like four formats there and then",
    "start": "2773390",
    "end": "2780230"
  },
  {
    "text": "but again like not since water sharks awesome so I'm not saying this route wait I just wish that you could save the",
    "start": "2780230",
    "end": "2785240"
  },
  {
    "text": "pcap after you get it yeah yeah thanks yeah no problem anything else all right well cool thanks",
    "start": "2785240",
    "end": "2792770"
  },
  {
    "text": "very much again [Applause]",
    "start": "2792770",
    "end": "2799480"
  }
]