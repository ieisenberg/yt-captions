[
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14699"
  },
  {
    "text": "hi it's good to be back thank you all for being here",
    "start": "20400",
    "end": "25680"
  },
  {
    "text": "without doubt microsoft exchange server is the most widely deployed mail",
    "start": "25680",
    "end": "31439"
  },
  {
    "text": "solution within governments and enterprises it is an integration of their daily",
    "start": "31439",
    "end": "38399"
  },
  {
    "text": "operations and security this january we report a series of",
    "start": "38399",
    "end": "45079"
  },
  {
    "text": "vulnerabilities exchange server to microsoft and name it as proxy logon if you are",
    "start": "45079",
    "end": "52719"
  },
  {
    "text": "paying attention to the industry news you must have heard this name",
    "start": "52719",
    "end": "59280"
  },
  {
    "text": "prasiologan may be the most severe vulnerability in the exchange history",
    "start": "59280",
    "end": "64799"
  },
  {
    "text": "ever however as we went into deep dive on proxy logong",
    "start": "64799",
    "end": "71119"
  },
  {
    "text": "it came to us that it is not just a single bug but a whole new attack service to help",
    "start": "71119",
    "end": "78560"
  },
  {
    "text": "researchers to uncover more vulnerabilities",
    "start": "78560",
    "end": "83840"
  },
  {
    "text": "to unveil the beauty of this attack service we will start from explaining",
    "start": "83840",
    "end": "88960"
  },
  {
    "text": "the architecture analyzing the root cause and ending up",
    "start": "88960",
    "end": "94000"
  },
  {
    "text": "with any vulnerabilities we found by understanding the basics of this new",
    "start": "94000",
    "end": "100720"
  },
  {
    "text": "attack service you won't be surprised why we can pop all your desks easily",
    "start": "100720",
    "end": "109200"
  },
  {
    "text": "let me introduce myself first i'm orange and now the principal",
    "start": "110560",
    "end": "115759"
  },
  {
    "text": "security researcher at deathcore i'm a theodore researcher and focusing",
    "start": "115759",
    "end": "122079"
  },
  {
    "text": "on web and application security my job is to find out the most severe",
    "start": "122079",
    "end": "128560"
  },
  {
    "text": "vulnerabilities that can impact the world ahead of the bad guys and report",
    "start": "128560",
    "end": "134720"
  },
  {
    "text": "them to the vendors directly apart from that and also a speaker ctf",
    "start": "134720",
    "end": "142400"
  },
  {
    "text": "player and buck bounty hunter i got several awards from my researchers",
    "start": "142400",
    "end": "149599"
  },
  {
    "text": "such as the pony awards and the champion of pong to all",
    "start": "149599",
    "end": "155680"
  },
  {
    "text": "if you are interested welcome to follow my twitter and blog",
    "start": "155680",
    "end": "161840"
  },
  {
    "text": "before i get started here is the disclaimer all the cvs mentioned today have been",
    "start": "163519",
    "end": "170480"
  },
  {
    "text": "reported responsibly and have been patched by microsoft",
    "start": "170480",
    "end": "177440"
  },
  {
    "text": "so why were we targeting exchange server in terms of enterprise security",
    "start": "179760",
    "end": "187280"
  },
  {
    "text": "mail servers are high value assets since they are the place to keep corporate",
    "start": "187280",
    "end": "192959"
  },
  {
    "text": "confidentials with that being said if someone controls the mail server they can dominate the",
    "start": "192959",
    "end": "200560"
  },
  {
    "text": "lifeline of the corporation exchange server is the most well-known",
    "start": "200560",
    "end": "206560"
  },
  {
    "text": "and important mail solution in the world with this in mind exchange has also been",
    "start": "206560",
    "end": "212799"
  },
  {
    "text": "the top target for nation stat acres for a long time",
    "start": "212799",
    "end": "218720"
  },
  {
    "text": "based on our research there are more than 400 thousands exchange servers",
    "start": "218720",
    "end": "224480"
  },
  {
    "text": "exposed on the internet every server represents a company you",
    "start": "224480",
    "end": "230159"
  },
  {
    "text": "can imagine how severe it could be when there is a critical vulnerability on",
    "start": "230159",
    "end": "236080"
  },
  {
    "text": "exchange server i will review the existing papers and",
    "start": "236080",
    "end": "243280"
  },
  {
    "text": "box before starting a research another whole exchange history is there",
    "start": "243280",
    "end": "249200"
  },
  {
    "text": "any interesting bug of course also most bugs are based on",
    "start": "249200",
    "end": "255519"
  },
  {
    "text": "known attack service such as the visualization or input validation",
    "start": "255519",
    "end": "261440"
  },
  {
    "text": "there are several bugs that are worth mentioning the most special one is the arsenal from",
    "start": "261440",
    "end": "268720"
  },
  {
    "text": "equation group in 2017 is the only practical and public",
    "start": "268720",
    "end": "274600"
  },
  {
    "text": "pre-osrce in the exchange history unfortunately the arsenal only works on",
    "start": "274600",
    "end": "281919"
  },
  {
    "text": "an ancient exchange server if the arsenal league happened earlier",
    "start": "281919",
    "end": "287680"
  },
  {
    "text": "it could lead to another nuclear labor crisis among all i would say the most",
    "start": "287680",
    "end": "294720"
  },
  {
    "text": "surprising one is cve 2020 real 6aa",
    "start": "294720",
    "end": "300320"
  },
  {
    "text": "the nature of this stock is a hard code crypto key this also shows that exchange is latin",
    "start": "300320",
    "end": "308080"
  },
  {
    "text": "security review it's 2020 now such a common weakness",
    "start": "308080",
    "end": "315039"
  },
  {
    "text": "could still be fine in a crucial software which inspired me to dig more into the",
    "start": "315039",
    "end": "321680"
  },
  {
    "text": "security of exchange",
    "start": "321680",
    "end": "325840"
  },
  {
    "text": "so what have we done we have reviewed exchange security from",
    "start": "328240",
    "end": "333520"
  },
  {
    "text": "the architectural levels and find a new attack service",
    "start": "333520",
    "end": "339120"
  },
  {
    "text": "through this new attack service we uncovered a vulnerabilities and trained",
    "start": "339120",
    "end": "344880"
  },
  {
    "text": "this bugs into three attacking exploits",
    "start": "344880",
    "end": "349919"
  },
  {
    "text": "the first and the most famous one is proxy logo it's a pre-os rce",
    "start": "349919",
    "end": "357280"
  },
  {
    "text": "the second one is proxy oracle xnx3 that can recover any user's",
    "start": "357280",
    "end": "363840"
  },
  {
    "text": "password in plain text format the last one is the proxy show",
    "start": "363840",
    "end": "370080"
  },
  {
    "text": "extra x3 we demonstrate at pong2 on 2021 it's also a pre-os rce",
    "start": "370080",
    "end": "379199"
  },
  {
    "text": "i would like to highlight that all the abilities we've uncovered here are logic",
    "start": "379440",
    "end": "385680"
  },
  {
    "text": "box which means they could be reproduced and exploited easily than any memory",
    "start": "385680",
    "end": "392400"
  },
  {
    "text": "corruption box here is my bath list",
    "start": "392400",
    "end": "398960"
  },
  {
    "text": "the ones in red indicates the bug is related to the attack service directly",
    "start": "398960",
    "end": "405600"
  },
  {
    "text": "and others are the bugs we chant together besides note that we report one more bug",
    "start": "405600",
    "end": "412560"
  },
  {
    "text": "in june since the bug is still patchy we will not share its detail today",
    "start": "412560",
    "end": "421720"
  },
  {
    "text": "for your references there are other bugs relate to this attack service",
    "start": "422400",
    "end": "428479"
  },
  {
    "text": "you can see from this table an essay and nations that hackers are also playing",
    "start": "428479",
    "end": "434479"
  },
  {
    "text": "that which means the attack service we share today is a critical hit for exchange",
    "start": "434479",
    "end": "441360"
  },
  {
    "text": "server exchange is a very sophisticated",
    "start": "441360",
    "end": "446560"
  },
  {
    "text": "application before we cut to the chest let me introduce the architecture first",
    "start": "446560",
    "end": "454000"
  },
  {
    "text": "since 2000 exchange has released a new version every three years",
    "start": "454000",
    "end": "460160"
  },
  {
    "text": "whenever exchange released a new version the architecture changes a lot and",
    "start": "460160",
    "end": "466479"
  },
  {
    "text": "becomes different the change of architecture and iterations make it difficult to upgrade",
    "start": "466479",
    "end": "474960"
  },
  {
    "text": "an exchange server in order to ensure the compatibility",
    "start": "474960",
    "end": "480240"
  },
  {
    "text": "between the new architecture and old ones several design depths were incurred and",
    "start": "480240",
    "end": "486960"
  },
  {
    "text": "led to the new attack service we found",
    "start": "486960",
    "end": "492440"
  },
  {
    "text": "so where did we focus we focused on the client access service",
    "start": "493360",
    "end": "498560"
  },
  {
    "text": "cls cs is a fundamental component in exchange",
    "start": "498560",
    "end": "504960"
  },
  {
    "text": "the official document indicates cas is a phone and that accepts client",
    "start": "504960",
    "end": "511039"
  },
  {
    "text": "connections for all protocol and responsible for routing and proxy in",
    "start": "511039",
    "end": "517360"
  },
  {
    "text": "connections was framed with paid attention to",
    "start": "517360",
    "end": "523360"
  },
  {
    "text": "and further attack service existed because the cs is located at a very",
    "start": "523360",
    "end": "530320"
  },
  {
    "text": "early state of exchange request processing all bugs here are authentication free",
    "start": "530320",
    "end": "537920"
  },
  {
    "text": "you can imagine how dangerous it is when this fundamental service is vulnerable",
    "start": "537920",
    "end": "546160"
  },
  {
    "text": "here is the cns architecture copied from the document as you can see the left side is the",
    "start": "547600",
    "end": "554959"
  },
  {
    "text": "client no matter where the connect connection comes from either http pop3 imap or sntp",
    "start": "554959",
    "end": "565519"
  },
  {
    "text": "cs in the middle part process all connections and proxies to the backend",
    "start": "565519",
    "end": "571760"
  },
  {
    "text": "service on the right side the backend service will continue to",
    "start": "571760",
    "end": "577040"
  },
  {
    "text": "handle further business logics",
    "start": "577040",
    "end": "581279"
  },
  {
    "text": "because i specialize in web security so it works on the web part",
    "start": "582480",
    "end": "590120"
  },
  {
    "text": "the cns web is built on microsoft iis as you can see there are two websites",
    "start": "591279",
    "end": "598959"
  },
  {
    "text": "inside the iis the default website is the front end we mentioned before",
    "start": "598959",
    "end": "605360"
  },
  {
    "text": "and the exchange backhand is where the business logic is",
    "start": "605360",
    "end": "611360"
  },
  {
    "text": "if you look at the configuration carefully you will notice the front end",
    "start": "613360",
    "end": "618480"
  },
  {
    "text": "is listening on post 80 and 443 and the backhand is listening on the post 81 and",
    "start": "618480",
    "end": "626079"
  },
  {
    "text": "444 it should be note that the posts are exposed on all interfaces",
    "start": "626079",
    "end": "634079"
  },
  {
    "text": "you may sense something wrong here all the posts are open to all interfaces",
    "start": "634079",
    "end": "640720"
  },
  {
    "text": "which means you can access the backhand directly wouldn't it be dangerous",
    "start": "640720",
    "end": "647440"
  },
  {
    "text": "please keep this question in mind and we will answer that later",
    "start": "647440",
    "end": "654000"
  },
  {
    "text": "the cs is composed of several is modules applications in front-end include the",
    "start": "654640",
    "end": "662000"
  },
  {
    "text": "proxy module which is responsible for passing all incoming requests",
    "start": "662000",
    "end": "668160"
  },
  {
    "text": "applying protocol-specific settings and forwarding them to the backend",
    "start": "668160",
    "end": "674560"
  },
  {
    "text": "as for the backhand applications include a rehydration module which is taking charge of passing from",
    "start": "674560",
    "end": "682399"
  },
  {
    "text": "any class populating the client information back and continue the business logic",
    "start": "682399",
    "end": "690399"
  },
  {
    "text": "here is a question for you how did the front end and backhand",
    "start": "690399",
    "end": "695760"
  },
  {
    "text": "exchange the information let's synchronize the information and",
    "start": "695760",
    "end": "701600"
  },
  {
    "text": "internal status http haters",
    "start": "701600",
    "end": "706319"
  },
  {
    "text": "for a client request it will first be handled by the front end and the request",
    "start": "707360",
    "end": "713279"
  },
  {
    "text": "will be passed through several is modules such as the filter validation",
    "start": "713279",
    "end": "720160"
  },
  {
    "text": "logging and the last proxy module the proxy module then picks up a handler",
    "start": "720160",
    "end": "727120"
  },
  {
    "text": "based on the current application paths such as the slash owa and slash ecp",
    "start": "727120",
    "end": "734800"
  },
  {
    "text": "the handler will do the proxy work and forward the request to the backend",
    "start": "734800",
    "end": "741600"
  },
  {
    "text": "when the backend receives the request it passes the request to the rehydration",
    "start": "741600",
    "end": "747519"
  },
  {
    "text": "module to restore the original client set and continue the business logics",
    "start": "747519",
    "end": "755279"
  },
  {
    "text": "so our idea is simple could we access the backend intentionally",
    "start": "756720",
    "end": "763680"
  },
  {
    "text": "since the exchange synchronized the information by http haters and it seems",
    "start": "763680",
    "end": "769519"
  },
  {
    "text": "like most of the assets control is done by the front end if we can access the backhand result",
    "start": "769519",
    "end": "776880"
  },
  {
    "text": "restrictions maybe there are several internal apis we can abuse",
    "start": "776880",
    "end": "783600"
  },
  {
    "text": "we all know implementing a proxy isn't easy and the front end things like a real",
    "start": "783600",
    "end": "789760"
  },
  {
    "text": "increment http client if there are some magic tricks to",
    "start": "789760",
    "end": "795519"
  },
  {
    "text": "manipulate the contacts between the front end and backhand it must be fun",
    "start": "795519",
    "end": "803360"
  },
  {
    "text": "in order to abuse the contacts we have to know how the proxy module works first",
    "start": "804560",
    "end": "811760"
  },
  {
    "text": "the proxy request handler is the most important part of the front end",
    "start": "811760",
    "end": "817600"
  },
  {
    "text": "all handlers should inherit this class to implement their messages such as how",
    "start": "817600",
    "end": "824560"
  },
  {
    "text": "to handle the client cookies and and how to proxy the client request to",
    "start": "824560",
    "end": "831120"
  },
  {
    "text": "the backend we separate the messages into three sections",
    "start": "831120",
    "end": "837199"
  },
  {
    "text": "the first is request which will pass and modify the client request",
    "start": "837199",
    "end": "843600"
  },
  {
    "text": "next is proxy section which will proxy and send the http",
    "start": "843600",
    "end": "849279"
  },
  {
    "text": "request to the backend and the last section is response",
    "start": "849279",
    "end": "855279"
  },
  {
    "text": "this section will receive the response from the backend and decide which header",
    "start": "855279",
    "end": "861199"
  },
  {
    "text": "or cookie should be sent back to the client because this handler is important we",
    "start": "861199",
    "end": "868480"
  },
  {
    "text": "will explain the message one by one",
    "start": "868480",
    "end": "872880"
  },
  {
    "text": "the first method of request is copy headers to server request",
    "start": "874320",
    "end": "880000"
  },
  {
    "text": "it will decide which http haters from the client can be sent to the backend",
    "start": "880000",
    "end": "887519"
  },
  {
    "text": "as we said the front end and backhand synchronize information and internal",
    "start": "887519",
    "end": "892800"
  },
  {
    "text": "status by http agents maybe you are thinking i could force the",
    "start": "892800",
    "end": "898720"
  },
  {
    "text": "haters to confuse something this is a nice try but unfortunately you",
    "start": "898720",
    "end": "906160"
  },
  {
    "text": "can see here is the back list in the maze the front and product several http",
    "start": "906160",
    "end": "913279"
  },
  {
    "text": "haters which are used internally please keep in mind that the hader x",
    "start": "913279",
    "end": "920000"
  },
  {
    "text": "common access token is an important one you will learn this later",
    "start": "920000",
    "end": "927639"
  },
  {
    "text": "the second is copy cookies to server request the functionality is the same as the",
    "start": "929279",
    "end": "936480"
  },
  {
    "text": "previous one but it copies cookies instead",
    "start": "936480",
    "end": "942720"
  },
  {
    "text": "the last method of request section is add protocol specific haters to server",
    "start": "944560",
    "end": "951519"
  },
  {
    "text": "requests this method allows a handler to apply customized vocal status",
    "start": "951519",
    "end": "959440"
  },
  {
    "text": "for example if the front and owa would like to pass information to the backend",
    "start": "959440",
    "end": "966560"
  },
  {
    "text": "here is the plus it can insert information to haters",
    "start": "966560",
    "end": "972720"
  },
  {
    "text": "besides the customized protocol settings this method also clones the user",
    "start": "974800",
    "end": "980399"
  },
  {
    "text": "identity to a new http hater the identity is the client",
    "start": "980399",
    "end": "986320"
  },
  {
    "text": "authentication results in iis also consisting of your security",
    "start": "986320",
    "end": "992560"
  },
  {
    "text": "identifier the mesa theorize it to a string and",
    "start": "992560",
    "end": "998079"
  },
  {
    "text": "post it into the haters which will be forwarded to the backend later",
    "start": "998079",
    "end": "1005360"
  },
  {
    "text": "as for now you know how the front end and backhand synchronize your identity",
    "start": "1005360",
    "end": "1012000"
  },
  {
    "text": "they do it by the hater x common access token",
    "start": "1012000",
    "end": "1017839"
  },
  {
    "text": "once the request passing is solved it will lead to the proxy section",
    "start": "1019519",
    "end": "1026160"
  },
  {
    "text": "the proxy first uses the get target backend server url to calculate the url",
    "start": "1026160",
    "end": "1033280"
  },
  {
    "text": "where the front end should send to this method is also a body plus and full",
    "start": "1033280",
    "end": "1040079"
  },
  {
    "text": "of vulnerabilities we will discuss this later",
    "start": "1040079",
    "end": "1046079"
  },
  {
    "text": "the second step of proxy is create server request which first initialize an http client",
    "start": "1046799",
    "end": "1055039"
  },
  {
    "text": "sets up the http message and haters and forwards it to the backend",
    "start": "1055039",
    "end": "1061919"
  },
  {
    "text": "we mentioned that pros in ios are open to anyone and this is dangerous",
    "start": "1061919",
    "end": "1068559"
  },
  {
    "text": "so that's why exchange has a mechanism to avoid the situation",
    "start": "1068559",
    "end": "1075280"
  },
  {
    "text": "while the front end is creating a request it will generate a kerberos",
    "start": "1076320",
    "end": "1081440"
  },
  {
    "text": "sticky and put it in the authorization header this header will be sent to the backend",
    "start": "1081440",
    "end": "1088799"
  },
  {
    "text": "along with the request so how does the backend know which connection is from a valid front end",
    "start": "1088799",
    "end": "1097280"
  },
  {
    "text": "by verifying this kubrow sticky",
    "start": "1097280",
    "end": "1101840"
  },
  {
    "text": "we look into the general kerberos australia and knows that the hater is",
    "start": "1103440",
    "end": "1109360"
  },
  {
    "text": "generated with the http spn of the exchange machine account",
    "start": "1109360",
    "end": "1116640"
  },
  {
    "text": "if you observe the traffic between the front end and backhand you will see two",
    "start": "1118799",
    "end": "1124400"
  },
  {
    "text": "headers shown in the request one is the authorization header which is",
    "start": "1124400",
    "end": "1130000"
  },
  {
    "text": "the kerberos sticky used to indicate you are valid from a",
    "start": "1130000",
    "end": "1135600"
  },
  {
    "text": "the other is the halo x common access token it's a civilized token indicates your",
    "start": "1135600",
    "end": "1142000"
  },
  {
    "text": "identity for example if you log in with the nand orange the hater is the serious result",
    "start": "1142000",
    "end": "1150559"
  },
  {
    "text": "of your security identified",
    "start": "1150559",
    "end": "1154880"
  },
  {
    "text": "after sending the request to the backend the front end receive the response and",
    "start": "1156720",
    "end": "1162720"
  },
  {
    "text": "enter the last section",
    "start": "1162720",
    "end": "1166400"
  },
  {
    "text": "the response section is similar to request it checks the response from the backhand",
    "start": "1167760",
    "end": "1174559"
  },
  {
    "text": "and decide which haters or cookies are allowed to be sent back to the client",
    "start": "1174559",
    "end": "1181679"
  },
  {
    "text": "now you understand how the front end works let's move on to see how the backend",
    "start": "1181679",
    "end": "1188000"
  },
  {
    "text": "process can populate the request from the front end",
    "start": "1188000",
    "end": "1193840"
  },
  {
    "text": "the backhand rehydration module first uses the nasa to check whether the",
    "start": "1194880",
    "end": "1200400"
  },
  {
    "text": "incoming request is authenticated or not it is the time to leverage the kerberos",
    "start": "1200400",
    "end": "1206799"
  },
  {
    "text": "sticky the front end generate by handing over the tikki the backhand",
    "start": "1206799",
    "end": "1212480"
  },
  {
    "text": "knows you are valid from and not the backhand then called the mesa chai",
    "start": "1212480",
    "end": "1219280"
  },
  {
    "text": "get common access token to restore the user's identity from the front end",
    "start": "1219280",
    "end": "1226880"
  },
  {
    "text": "the mesa retrieves the data visualize it back to the original access token and",
    "start": "1228080",
    "end": "1234320"
  },
  {
    "text": "put it in the http context option for later use",
    "start": "1234320",
    "end": "1240240"
  },
  {
    "text": "so far you learn how the front end and backhand synchronize the user's identity",
    "start": "1240240",
    "end": "1246080"
  },
  {
    "text": "and how the header excellent access token plays an important load in the cs",
    "start": "1246080",
    "end": "1252320"
  },
  {
    "text": "architecture since the method just checks if the users are looking or not it doesn't",
    "start": "1252320",
    "end": "1259520"
  },
  {
    "text": "check the identity here comes a question could we ascend",
    "start": "1259520",
    "end": "1264640"
  },
  {
    "text": "cat as a normal user in the backend if we access the backend directory and",
    "start": "1264640",
    "end": "1271520"
  },
  {
    "text": "authenticate with a normal account we can specify whatever values indicator",
    "start": "1271520",
    "end": "1277919"
  },
  {
    "text": "x common as this token and impersonate us any uses",
    "start": "1277919",
    "end": "1284400"
  },
  {
    "text": "the idea is good and actually you can test the iis authentication of the",
    "start": "1286080",
    "end": "1291679"
  },
  {
    "text": "backend but there is one more checkpoint the method is token serialization alone",
    "start": "1291679",
    "end": "1299200"
  },
  {
    "text": "verifies the current log user and rests a rehydration exception if the",
    "start": "1299200",
    "end": "1305440"
  },
  {
    "text": "checkpoint is failed it checks if you have a token",
    "start": "1305440",
    "end": "1312640"
  },
  {
    "text": "serialization right by default only the exchange machine",
    "start": "1312640",
    "end": "1318080"
  },
  {
    "text": "account has this right so that's why the kerberos ticket",
    "start": "1318080",
    "end": "1323200"
  },
  {
    "text": "generated by front end can pass the checkpoint but you will fail even you",
    "start": "1323200",
    "end": "1328720"
  },
  {
    "text": "are using the correct credential",
    "start": "1328720",
    "end": "1333320"
  },
  {
    "text": "here is a quick summary for you when there is the client request the front end is first tries to authenticate",
    "start": "1334720",
    "end": "1342880"
  },
  {
    "text": "a request if it's a c the file ends theorize the user identity and acid into the header",
    "start": "1342880",
    "end": "1350799"
  },
  {
    "text": "that's common as this token the front end then generates a kerberos",
    "start": "1350799",
    "end": "1356320"
  },
  {
    "text": "ticket by this http spn and proceed into the authorization head",
    "start": "1356320",
    "end": "1363280"
  },
  {
    "text": "it will forward these headers along with the colliding class to the backhand",
    "start": "1363280",
    "end": "1369280"
  },
  {
    "text": "the backhand also tries to authenticate the request at the beginning the",
    "start": "1369280",
    "end": "1374480"
  },
  {
    "text": "rehydration module will verify whether the user have the right of token",
    "start": "1374480",
    "end": "1379520"
  },
  {
    "text": "serialization or not since we are using a kerbal sticky generated by the front end we passed",
    "start": "1379520",
    "end": "1388720"
  },
  {
    "text": "lastly the rehydration restored the user identity from the hader x common access",
    "start": "1388720",
    "end": "1394480"
  },
  {
    "text": "token and continues the backend business logic",
    "start": "1394480",
    "end": "1400240"
  },
  {
    "text": "so far we briefly explained the communication between the front end and backhand",
    "start": "1401280",
    "end": "1406960"
  },
  {
    "text": "let's start ahead",
    "start": "1406960",
    "end": "1410000"
  },
  {
    "text": "okay the first exploit x-proxy no gun as introduced before this may be the most",
    "start": "1412480",
    "end": "1418960"
  },
  {
    "text": "severe vulnerability in the exchange history carcinogen is chained with two bugs",
    "start": "1418960",
    "end": "1425600"
  },
  {
    "text": "together ce one is an ssrf on the front end and the other is an archery viral light",
    "start": "1425600",
    "end": "1432799"
  },
  {
    "text": "on the control panel of the backhand so where is the proxy logo",
    "start": "1432799",
    "end": "1440080"
  },
  {
    "text": "the box is mainly located at the proxy section in the front end",
    "start": "1440080",
    "end": "1445279"
  },
  {
    "text": "we mentioned that the front-end handler calculates the back-end url and forwards",
    "start": "1445279",
    "end": "1450720"
  },
  {
    "text": "the request to that url",
    "start": "1450720",
    "end": "1455120"
  },
  {
    "text": "one of the handlers is in charge of processing the static resources",
    "start": "1456080",
    "end": "1461760"
  },
  {
    "text": "it will assign the backhand target from the cookie you will figure out how simple this part",
    "start": "1461760",
    "end": "1469440"
  },
  {
    "text": "is after learning the architecture",
    "start": "1469440",
    "end": "1473840"
  },
  {
    "text": "the front end is the user's supply cookie as the domain name",
    "start": "1475039",
    "end": "1480159"
  },
  {
    "text": "and the domain name will be concatenated as the back-end url",
    "start": "1480159",
    "end": "1485279"
  },
  {
    "text": "we use a bit of passing tricks to enclose the url and force the exchange",
    "start": "1485279",
    "end": "1491520"
  },
  {
    "text": "to fetch example.com the exchange will then return the whole",
    "start": "1491520",
    "end": "1497120"
  },
  {
    "text": "response back to earth so what is the root cause of this",
    "start": "1497120",
    "end": "1504720"
  },
  {
    "text": "arbitrary back-end assignment as we mentioned that the exchange server",
    "start": "1504720",
    "end": "1510000"
  },
  {
    "text": "changed its architecture while releasing new versions this cookie is a quick solution for",
    "start": "1510000",
    "end": "1517039"
  },
  {
    "text": "exchange to make the front end in new architectures to identify where the old",
    "start": "1517039",
    "end": "1523200"
  },
  {
    "text": "backhand is it looks like a design depth to adapt",
    "start": "1523200",
    "end": "1528240"
  },
  {
    "text": "backboard compatibility with this backhand assignment we have a",
    "start": "1528240",
    "end": "1534080"
  },
  {
    "text": "super exercise that can control almost all the requests and get older responses",
    "start": "1534080",
    "end": "1542320"
  },
  {
    "text": "the most impressive is that it will generate a kerberos ticket for us",
    "start": "1542320",
    "end": "1547760"
  },
  {
    "text": "which means even when we are taking a protected and domain joined http service",
    "start": "1547760",
    "end": "1554559"
  },
  {
    "text": "we can still hack with the authentication of exchange machine account",
    "start": "1554559",
    "end": "1561039"
  },
  {
    "text": "thanks to the super ssrf we can leverage the internal api slash proxy logon.ecp",
    "start": "1561039",
    "end": "1568960"
  },
  {
    "text": "to get evaluation to access the control panel the api is also the reason why we called",
    "start": "1568960",
    "end": "1576720"
  },
  {
    "text": "it proxy logo as for the rest of exploitation i",
    "start": "1576720",
    "end": "1583120"
  },
  {
    "text": "believe there are already lots of technical analysis out there",
    "start": "1583120",
    "end": "1588559"
  },
  {
    "text": "we will skip it today for the consideration of time",
    "start": "1588559",
    "end": "1594400"
  },
  {
    "text": "we will not do the demonstration today but if you are interested we'll come to",
    "start": "1595600",
    "end": "1601360"
  },
  {
    "text": "check the demo on our website",
    "start": "1601360",
    "end": "1605679"
  },
  {
    "text": "next i will be sharing details about proxy oracle compared to proxy logon proxy oracle is",
    "start": "1606799",
    "end": "1614400"
  },
  {
    "text": "an interesting exploit with a different approach proxy oracle will allow the attacker to",
    "start": "1614400",
    "end": "1621600"
  },
  {
    "text": "recover the victims plaintext password simply by leading them to a malicious",
    "start": "1621600",
    "end": "1626960"
  },
  {
    "text": "link we use a process gripping and adding oracle to complete the exploit",
    "start": "1626960",
    "end": "1635200"
  },
  {
    "text": "first we would like to explain how the owa or ecp or seneca uses",
    "start": "1636320",
    "end": "1643600"
  },
  {
    "text": "if the negative iis authentication is used an ugly prompt will pop out asking you",
    "start": "1643600",
    "end": "1650559"
  },
  {
    "text": "to enter the password instead of this fancy in the face",
    "start": "1650559",
    "end": "1655760"
  },
  {
    "text": "which means extract is using a certain mechanism to ask you the transformation",
    "start": "1655760",
    "end": "1661760"
  },
  {
    "text": "between the credentials and cookies so let's take a look at how this fancy",
    "start": "1661760",
    "end": "1668799"
  },
  {
    "text": "interface is working with the original architecture",
    "start": "1668799",
    "end": "1674240"
  },
  {
    "text": "let's get back to the cs architecture all the owa and ecp looking mechanism is",
    "start": "1675520",
    "end": "1682640"
  },
  {
    "text": "found by the phone-based authentication module the fba is an authentication module",
    "start": "1682640",
    "end": "1689039"
  },
  {
    "text": "prior to the exchange front-end and responsible for converting the",
    "start": "1689039",
    "end": "1694080"
  },
  {
    "text": "username and password into cookies or translating cookies back to the original",
    "start": "1694080",
    "end": "1700480"
  },
  {
    "text": "credential page the implementation stores your username",
    "start": "1700480",
    "end": "1705520"
  },
  {
    "text": "and password in cookies directly of course cookie is encrypted to avoid",
    "start": "1705520",
    "end": "1711840"
  },
  {
    "text": "bad guys catching your password in plain text on the fly",
    "start": "1711840",
    "end": "1718080"
  },
  {
    "text": "if you read the login traffic carefully you will see several cookies which stand",
    "start": "1719279",
    "end": "1725360"
  },
  {
    "text": "for your identity for the later mail operations you have to attach cookies to identify who you",
    "start": "1725360",
    "end": "1733200"
  },
  {
    "text": "are but not all cookies they are very important ones with the prefix ca data",
    "start": "1733200",
    "end": "1741840"
  },
  {
    "text": "you can see from the screen the seer data contains your encrypted username",
    "start": "1741840",
    "end": "1747679"
  },
  {
    "text": "and password here's the pseudo code for the",
    "start": "1747679",
    "end": "1752720"
  },
  {
    "text": "encryption logic exchange generates to render strings as the iv and key for every station",
    "start": "1752720",
    "end": "1760640"
  },
  {
    "text": "the iv and key will be sent and stored on the client side however to avoid someone stealing the",
    "start": "1760640",
    "end": "1768159"
  },
  {
    "text": "cookies and decrypting with the iv and key exchange uses rsa to encrypt with its",
    "start": "1768159",
    "end": "1775840"
  },
  {
    "text": "private key again before sending extract then use system aes to encrypt",
    "start": "1775840",
    "end": "1782640"
  },
  {
    "text": "your encoded credential with the iv and key and put the result into the qr keys",
    "start": "1782640",
    "end": "1790880"
  },
  {
    "text": "and yes you can cite paid oracle here",
    "start": "1791200",
    "end": "1796080"
  },
  {
    "text": "exchange text the cbc as its fading mode if you are familiar with cryptography",
    "start": "1797840",
    "end": "1804640"
  },
  {
    "text": "you must know that cdc is vulnerable to the painting oracle attack",
    "start": "1804640",
    "end": "1810880"
  },
  {
    "text": "the exchange implementation catches the painting error exception and returns",
    "start": "1810880",
    "end": "1816399"
  },
  {
    "text": "immediately when a logging process fails exchange",
    "start": "1816399",
    "end": "1823039"
  },
  {
    "text": "redirects the http back to the login patch with an error code",
    "start": "1823039",
    "end": "1828399"
  },
  {
    "text": "due to the return we have an oracle here if the encryption fails the error code",
    "start": "1828399",
    "end": "1835120"
  },
  {
    "text": "is 0 which stands for now and if we corrupt the cyber text",
    "start": "1835120",
    "end": "1841279"
  },
  {
    "text": "successfully the exchange will try to login with the conducted credential",
    "start": "1841279",
    "end": "1846880"
  },
  {
    "text": "pattern at this moment the result must be a failure and the error code is 2",
    "start": "1846880",
    "end": "1853679"
  },
  {
    "text": "which stands for invalid credentials by differing from the payroll number we",
    "start": "1853679",
    "end": "1860399"
  },
  {
    "text": "have an oracle to recover the plan text",
    "start": "1860399",
    "end": "1865440"
  },
  {
    "text": "now we know we can decrypt any cookies with the padding oracle but the problem",
    "start": "1866799",
    "end": "1873039"
  },
  {
    "text": "is how to get cookies from the rectangle",
    "start": "1873039",
    "end": "1879440"
  },
  {
    "text": "in order to get a cookie on class we uncover a process with thing to change",
    "start": "1879760",
    "end": "1885600"
  },
  {
    "text": "data but it comes up with another",
    "start": "1885600",
    "end": "1890840"
  },
  {
    "text": "problem in exchange all sensitive cookies are protected by http only",
    "start": "1890840",
    "end": "1898320"
  },
  {
    "text": "so we can't access the cookies by javascript so what can we do",
    "start": "1898320",
    "end": "1906000"
  },
  {
    "text": "since we can ask you arbitrary javascript on client side why don't we just insert the ssi cookie",
    "start": "1906000",
    "end": "1913840"
  },
  {
    "text": "which is used in proxy.gov once we add a cookie to the browser we",
    "start": "1913840",
    "end": "1919919"
  },
  {
    "text": "can save and take over all the user's mail operations request",
    "start": "1919919",
    "end": "1926000"
  },
  {
    "text": "all we need to do is sit on our server and wait for the cookies to come back",
    "start": "1926000",
    "end": "1934518"
  },
  {
    "text": "i will elaborate the process further we first send the malicious link to the",
    "start": "1934559",
    "end": "1940559"
  },
  {
    "text": "victim once the victim triggers our process scripting we insert an ssi cookie to",
    "start": "1940559",
    "end": "1947919"
  },
  {
    "text": "pretend we are the backhand of exchange then the exchange server becomes the",
    "start": "1947919",
    "end": "1954480"
  },
  {
    "text": "proxy between the victim and earns we will take over all the traffic and",
    "start": "1954480",
    "end": "1960399"
  },
  {
    "text": "bypass http only to get encrypted cookies",
    "start": "1960399",
    "end": "1966480"
  },
  {
    "text": "okay the demonstration first we have the victim",
    "start": "1967360",
    "end": "1974080"
  },
  {
    "text": "and we passed his mail address to our explorer the explorer first sent a malicious link",
    "start": "1974080",
    "end": "1981519"
  },
  {
    "text": "to the target once the target triggers our process free key we insert the ssi cookie and",
    "start": "1981519",
    "end": "1989360"
  },
  {
    "text": "wait for the connection back to obtain the encrypted cookies",
    "start": "1989360",
    "end": "1995440"
  },
  {
    "text": "ok we got a connection we can now decrypt the blocks by painting oracle",
    "start": "2001200",
    "end": "2008000"
  },
  {
    "text": "it should be note that all the decryption could be done without the process svp",
    "start": "2008000",
    "end": "2013760"
  },
  {
    "text": "even a user close the browser we can still recover the password",
    "start": "2013760",
    "end": "2020158"
  },
  {
    "text": "with a little bit waiting we recover the password in plain text successfully",
    "start": "2022960",
    "end": "2030360"
  },
  {
    "text": "the last exploit i will share today is proxy's shoe this is the exploit we demonstrate that",
    "start": "2035919",
    "end": "2042799"
  },
  {
    "text": "pawn to all 2021 the result of proxy share is the center's proximal gun",
    "start": "2042799",
    "end": "2049919"
  },
  {
    "text": "and an authenticated attacker can ask you arbitrary commands on the exchange",
    "start": "2049919",
    "end": "2055440"
  },
  {
    "text": "server but the exploit chain is different proxy share is chained with an scl",
    "start": "2055440",
    "end": "2061599"
  },
  {
    "text": "bypass in the front end an elevation of privilege in the exchange powershell",
    "start": "2061599",
    "end": "2067599"
  },
  {
    "text": "backend and an optional firewire to get rce",
    "start": "2067599",
    "end": "2074280"
  },
  {
    "text": "so where is the proxy show the first pre-order spot is also located",
    "start": "2074399",
    "end": "2080079"
  },
  {
    "text": "at the backhand url calculation",
    "start": "2080079",
    "end": "2084720"
  },
  {
    "text": "practice shell begins with a pass confusion exchange has a feature called",
    "start": "2085440",
    "end": "2091720"
  },
  {
    "text": "explicit.com feature this feature is used to display another user's mailbox or calendar in a new",
    "start": "2091720",
    "end": "2099599"
  },
  {
    "text": "browser window of course the displayed mailbox must",
    "start": "2099599",
    "end": "2104640"
  },
  {
    "text": "have to be configured with permission to publish first",
    "start": "2104640",
    "end": "2109839"
  },
  {
    "text": "in order to open with a single get request the url format must be simple",
    "start": "2109839",
    "end": "2116480"
  },
  {
    "text": "and the mailbox edges must be included in the url such as the highlight part in",
    "start": "2116480",
    "end": "2122560"
  },
  {
    "text": "the slide the exchange normalize the spatial url",
    "start": "2122560",
    "end": "2127680"
  },
  {
    "text": "and rewrite it to the existing handles",
    "start": "2127680",
    "end": "2132720"
  },
  {
    "text": "of course the path is not the only way to specify the mailbox agents",
    "start": "2134320",
    "end": "2140320"
  },
  {
    "text": "we find that through a specific test in the auto discovery handle",
    "start": "2140320",
    "end": "2146480"
  },
  {
    "text": "extract will consider address from the query string if the path ends with slash",
    "start": "2146480",
    "end": "2153040"
  },
  {
    "text": "auto discover.json after getting the agents the handler",
    "start": "2153040",
    "end": "2160160"
  },
  {
    "text": "tries to normalize the url you see that exchange won't conduct too",
    "start": "2160160",
    "end": "2165680"
  },
  {
    "text": "much checking on the patent of the removing mailbox edges",
    "start": "2165680",
    "end": "2170720"
  },
  {
    "text": "which led us to use the substring to erase any part of the url",
    "start": "2170720",
    "end": "2177920"
  },
  {
    "text": "as you could see from the slide this is the url we will be visiting",
    "start": "2178640",
    "end": "2184800"
  },
  {
    "text": "and this is the mailbox address we use the query string to specify",
    "start": "2184800",
    "end": "2191599"
  },
  {
    "text": "here is the part will be removed from exchange according to our",
    "start": "2191920",
    "end": "2198319"
  },
  {
    "text": "page with the address this is the actual url the request will",
    "start": "2198839",
    "end": "2206640"
  },
  {
    "text": "be sent to the backend as for now we can access any exchange",
    "start": "2206640",
    "end": "2212720"
  },
  {
    "text": "backend again although this buff is not as powerful as",
    "start": "2212720",
    "end": "2220079"
  },
  {
    "text": "the exercise in proximal gun it's sufficient to access archery",
    "start": "2220079",
    "end": "2225200"
  },
  {
    "text": "because we tries to access the an api in the face to identify our privilege",
    "start": "2225200",
    "end": "2233280"
  },
  {
    "text": "from the screenshot you could see that we did access the backhand with the",
    "start": "2233280",
    "end": "2238880"
  },
  {
    "text": "exchange system privilege again",
    "start": "2238880",
    "end": "2243838"
  },
  {
    "text": "here comes the post exploitation part the approach of original proxy load gun",
    "start": "2244160",
    "end": "2249920"
  },
  {
    "text": "fails because of some in-depth protections so we have to discover a new approach",
    "start": "2249920",
    "end": "2258400"
  },
  {
    "text": "now let's turn the focus to the exchange powershell remote a feature for exchange automations",
    "start": "2258400",
    "end": "2267599"
  },
  {
    "text": "through the define shield commands users can read mail spend mail and even",
    "start": "2267599",
    "end": "2274320"
  },
  {
    "text": "configure savings via command lines the exchange powershell implementation",
    "start": "2274320",
    "end": "2280480"
  },
  {
    "text": "is built upon the powershell api by coding the api exchange could realize",
    "start": "2280480",
    "end": "2286720"
  },
  {
    "text": "a powershell server and uses the wrong space to limit and isolate the command",
    "start": "2286720",
    "end": "2292640"
  },
  {
    "text": "execution all the operations are based on the wing iron protocol",
    "start": "2292640",
    "end": "2299280"
  },
  {
    "text": "and it should be note that also we can access the powershell backhand directory",
    "start": "2299280",
    "end": "2305119"
  },
  {
    "text": "we can still interact with it because we are the system user",
    "start": "2305119",
    "end": "2310640"
  },
  {
    "text": "we will fail the authentication since there is no mailbox for the system user",
    "start": "2310640",
    "end": "2317359"
  },
  {
    "text": "we also can't fault the identity by the x common access token hater due to the",
    "start": "2317359",
    "end": "2323520"
  },
  {
    "text": "backlist in the front end so what should i do",
    "start": "2323520",
    "end": "2328640"
  },
  {
    "text": "we type into the powershell server implementation and find a piece of code",
    "start": "2328640",
    "end": "2334480"
  },
  {
    "text": "that extracts the ss token from the url",
    "start": "2334480",
    "end": "2340280"
  },
  {
    "text": "the code is sitting after the expected authentication and before the",
    "start": "2340560",
    "end": "2345839"
  },
  {
    "text": "rehydration it checks if there is no x common access token the code will code out another",
    "start": "2345839",
    "end": "2353280"
  },
  {
    "text": "method to get access token from url",
    "start": "2353280",
    "end": "2358640"
  },
  {
    "text": "the common access token from url is a short method and retrieves the value of",
    "start": "2360240",
    "end": "2366480"
  },
  {
    "text": "xrps clt from choreography then deserialize it back to the asus",
    "start": "2366480",
    "end": "2372880"
  },
  {
    "text": "token as for now we have an elevation of",
    "start": "2372880",
    "end": "2378320"
  },
  {
    "text": "privilege because we can access the powershell backend and specify the access token directory",
    "start": "2378320",
    "end": "2385280"
  },
  {
    "text": "the intention of this operation is to be a quick proxy for internal exchange",
    "start": "2385280",
    "end": "2390560"
  },
  {
    "text": "powershell communication by abusing this feature we can",
    "start": "2390560",
    "end": "2395599"
  },
  {
    "text": "impersonate a same user here we use this eop to downgrade",
    "start": "2395599",
    "end": "2402160"
  },
  {
    "text": "ourselves from the instant user we saw mailbox to exchange adam",
    "start": "2402160",
    "end": "2409880"
  },
  {
    "text": "now we can ask you to arbitrarily exchange powershell commands as enemy",
    "start": "2410640",
    "end": "2416640"
  },
  {
    "text": "and then the last piece of the puzzle is to find",
    "start": "2416640",
    "end": "2422960"
  },
  {
    "text": "a post of rce to chat everything together because we are adaming and there are",
    "start": "2422960",
    "end": "2429599"
  },
  {
    "text": "hundreds of exchange portion commands out there it's easy to find a post or",
    "start": "2429599",
    "end": "2435440"
  },
  {
    "text": "stroke we abuse the command new mailbox explore",
    "start": "2435440",
    "end": "2440480"
  },
  {
    "text": "request to export a user's mailbox into the webloot to be our webshop",
    "start": "2440480",
    "end": "2448640"
  },
  {
    "text": "we can create files are arbitrarily passed the next problem is how to embed our malicious",
    "start": "2449440",
    "end": "2456400"
  },
  {
    "text": "parallel into the file it's also easy we can deliver our",
    "start": "2456400",
    "end": "2461440"
  },
  {
    "text": "parallel by mail however the exported file is encoded",
    "start": "2461440",
    "end": "2468000"
  },
  {
    "text": "by reading the microsoft document we learned it in pst format and the",
    "start": "2468000",
    "end": "2473440"
  },
  {
    "text": "encoding is just a simple table maybe we can just encode the parallel before",
    "start": "2473440",
    "end": "2479520"
  },
  {
    "text": "sending out while the server tries to set and encode our parallel it turns into the original",
    "start": "2479520",
    "end": "2486640"
  },
  {
    "text": "malicious scope let's turn everything together",
    "start": "2486640",
    "end": "2492800"
  },
  {
    "text": "we first deliver our encoded web ship to the target mailbox",
    "start": "2492800",
    "end": "2498720"
  },
  {
    "text": "we then launch a windows powershell client to connect to our proxy server",
    "start": "2498720",
    "end": "2505119"
  },
  {
    "text": "we use a proxy because we have to modify the wing rn protocol to rewrite the path",
    "start": "2505119",
    "end": "2511680"
  },
  {
    "text": "lead to the vulnerable auto discovery handle which will eventually trigger the past",
    "start": "2511680",
    "end": "2517839"
  },
  {
    "text": "confusion but and add the essence token to the core history",
    "start": "2517839",
    "end": "2524160"
  },
  {
    "text": "once our station has been established we can ask you the power shield command to",
    "start": "2524160",
    "end": "2529520"
  },
  {
    "text": "grant ourselves to the mailbox export law and invoke the mailbox exploited",
    "start": "2529520",
    "end": "2536640"
  },
  {
    "text": "and enjoy the show",
    "start": "2536640",
    "end": "2539920"
  },
  {
    "text": "ok let's go to the demonstration of proxy shoe so this is the exchange server and we",
    "start": "2543040",
    "end": "2551280"
  },
  {
    "text": "run our exploit code the exploit first set our encoded",
    "start": "2551280",
    "end": "2559280"
  },
  {
    "text": "payload to the mailbox and launch the power shell to establish the wing rn",
    "start": "2559280",
    "end": "2564960"
  },
  {
    "text": "connection we use a server to rewrite the traffic to implement our exploit",
    "start": "2564960",
    "end": "2572880"
  },
  {
    "text": "okay our shirt is chopped",
    "start": "2576319",
    "end": "2580760"
  },
  {
    "text": "and you can see we are the sensor",
    "start": "2595599",
    "end": "2599920"
  },
  {
    "text": "let's talk about mitigations since it's an architectural problem it's",
    "start": "2605040",
    "end": "2611200"
  },
  {
    "text": "hard to mitigate a text service with one single action all you can do is keep your exchange up",
    "start": "2611200",
    "end": "2618240"
  },
  {
    "text": "to date and with the support of a firewall or sel to not externally facing",
    "start": "2618240",
    "end": "2624560"
  },
  {
    "text": "the internet microsoft has enhanced the cs",
    "start": "2624560",
    "end": "2630000"
  },
  {
    "text": "architecture in april the authentication part of this attack service has been reduced in the patch",
    "start": "2630000",
    "end": "2638079"
  },
  {
    "text": "if you are lazy please up the apple patch at least",
    "start": "2638079",
    "end": "2643680"
  },
  {
    "text": "and if you are super lazy maybe you can give a shot at office 365.",
    "start": "2643839",
    "end": "2651318"
  },
  {
    "text": "okay conclusion modern province required modern solutions it's hard to find",
    "start": "2652560",
    "end": "2658480"
  },
  {
    "text": "traditional bugs in modern architecture sometimes comprehending the architecture",
    "start": "2658480",
    "end": "2664400"
  },
  {
    "text": "from a higher point of view can help you find new interesting bugs",
    "start": "2664400",
    "end": "2670480"
  },
  {
    "text": "the exchange cs is still a good attack service also microsoft has catched it in",
    "start": "2670480",
    "end": "2676800"
  },
  {
    "text": "apple however in fact we still find a few bugs",
    "start": "2676800",
    "end": "2681920"
  },
  {
    "text": "after the apple patch but since the authentication part of this attack service is reduced",
    "start": "2681920",
    "end": "2689359"
  },
  {
    "text": "the result may not be as powerful as before due to the lack of pre-order box",
    "start": "2689359",
    "end": "2696960"
  },
  {
    "text": "lastly the exchange is still a treasure waiting for you to fight bugs",
    "start": "2696960",
    "end": "2703359"
  },
  {
    "text": "as mentioned even in 2020 a hard code crypto key can",
    "start": "2703359",
    "end": "2708400"
  },
  {
    "text": "still be filed in exchange server i can assure you that microsoft will fix",
    "start": "2708400",
    "end": "2714800"
  },
  {
    "text": "more exchange vulnerabilities in the future but here comes a story a lot",
    "start": "2714800",
    "end": "2722319"
  },
  {
    "text": "even you find a super critical vulnerability like proxy local microsoft",
    "start": "2722319",
    "end": "2728079"
  },
  {
    "text": "will not reward you any bounty because the exchange server on premiums is out",
    "start": "2728079",
    "end": "2734160"
  },
  {
    "text": "of scope so is it was fire hunting box on",
    "start": "2734160",
    "end": "2739200"
  },
  {
    "text": "exchange server you tell me",
    "start": "2739200",
    "end": "2743519"
  },
  {
    "text": "this is the end of my presentation if you have any questions here is my",
    "start": "2744560",
    "end": "2749760"
  },
  {
    "text": "contact information by the way i will post a detailed article on my blog please look forward",
    "start": "2749760",
    "end": "2757280"
  },
  {
    "text": "to that thank you again for being here thanks",
    "start": "2757280",
    "end": "2763960"
  }
]