[
  {
    "text": "uh hello everyone and welcome to my talk uh game of cross catch let's win it in a",
    "start": "2639",
    "end": "8599"
  },
  {
    "text": "more effective way and in this presentation I will talk about how to solve challenges uh in Cross catch",
    "start": "8599",
    "end": "15679"
  },
  {
    "text": "attack and perform cause catch attack more efficiently and my name is l you can",
    "start": "15679",
    "end": "22600"
  },
  {
    "text": "follow me on Twitter and I am the author of dirty page table and in this talk I",
    "start": "22600",
    "end": "28080"
  },
  {
    "text": "will use dirty page table again to to exploit a mpu back on samung",
    "start": "28080",
    "end": "34000"
  },
  {
    "text": "device and here is the agenda of the talk I will briefly introduce the cross",
    "start": "34000",
    "end": "39200"
  },
  {
    "text": "catch teack uh followed by highlighting two challenges in it uh next I will",
    "start": "39200",
    "end": "44480"
  },
  {
    "text": "delve into the most important part of this presentation uh using a specific vulnerability as an example to analyze",
    "start": "44480",
    "end": "51879"
  },
  {
    "text": "how to address the two challenges in uh cross catch Tech then I will demonstrate",
    "start": "51879",
    "end": "58359"
  },
  {
    "text": "how to exploit thei UF with the dir page table on Samsung device uh finally I",
    "start": "58359",
    "end": "65040"
  },
  {
    "text": "will make a summary uh first of all let's take a look at the cross catch attack here is a",
    "start": "65040",
    "end": "71840"
  },
  {
    "text": "simple example of uef and we can trigger the uef to get the victim object a and",
    "start": "71840",
    "end": "78000"
  },
  {
    "text": "then we can reclaim the Vic victim slab to page allocator after that we can let kmap",
    "start": "78000",
    "end": "85960"
  },
  {
    "text": "catch B uh reuse the pages of victim SLB by doing this uh we can make victim",
    "start": "85960",
    "end": "91840"
  },
  {
    "text": "object a to be reallocated as object B now uh if we perform operations on",
    "start": "91840",
    "end": "98640"
  },
  {
    "text": "victim object a uh we will corrupt object B following this we can make use",
    "start": "98640",
    "end": "104799"
  },
  {
    "text": "of uh corrupted object B to get root this is a s simplified process for cross",
    "start": "104799",
    "end": "111880"
  },
  {
    "text": "catch attack uh in in a more General context object a or object B can also be pages",
    "start": "111880",
    "end": "120039"
  },
  {
    "text": "or other types of memory regions uh as we can see that uh cross",
    "start": "120039",
    "end": "126240"
  },
  {
    "text": "catch attack is getting really popular there are a few Reon reasons uh first a",
    "start": "126240",
    "end": "131440"
  },
  {
    "text": "original vulner vulnerable object is not exploitable uh sometimes so we have to",
    "start": "131440",
    "end": "137599"
  },
  {
    "text": "use cross catch attack second uh by cross catch attack we can transform the",
    "start": "137599",
    "end": "143319"
  },
  {
    "text": "unknown vulnerability to well no one to simplify the exploitation third with help of cross",
    "start": "143319",
    "end": "150720"
  },
  {
    "text": "catch attack we can build data only exploitation techniques to defeat growing mitigations for example here are",
    "start": "150720",
    "end": "158519"
  },
  {
    "text": "some widely used exploitation techniques based on the cross catch",
    "start": "158519",
    "end": "164360"
  },
  {
    "text": "attack uh well uh cross catch attack is known as an unstable technique because",
    "start": "164360",
    "end": "170640"
  },
  {
    "text": "it involves many steps and each of them may introduce some uncertainty so we start to think are",
    "start": "170640",
    "end": "178120"
  },
  {
    "text": "there some methods to make the entire process less unstable or in other words",
    "start": "178120",
    "end": "183480"
  },
  {
    "text": "more efficient actually uh this is the the most important reason why I start I want",
    "start": "183480",
    "end": "190159"
  },
  {
    "text": "to delve into Coss catch attack attacks and started this",
    "start": "190159",
    "end": "195840"
  },
  {
    "text": "research uh now let's see the common workflow of of course catch attack",
    "start": "195840",
    "end": "201480"
  },
  {
    "text": "before that we need to know slab allocator a little bit here is a brief view of for slab which we allocate",
    "start": "201480",
    "end": "208920"
  },
  {
    "text": "objects from a slab could consist of multiple pages and there are objects per",
    "start": "208920",
    "end": "215560"
  },
  {
    "text": "slab objects in a slab for a kimm catch both uh objects per slab and Order of",
    "start": "215560",
    "end": "222439"
  },
  {
    "text": "pages are exported through CFS here is the view of kimm catch there",
    "start": "222439",
    "end": "230280"
  },
  {
    "text": "are uh Pro slabs for every CPU for accelerating allocation we need to pay",
    "start": "230280",
    "end": "237640"
  },
  {
    "text": "attention to the partial list which may contain many slabs uh the pro par list",
    "start": "237640",
    "end": "244840"
  },
  {
    "text": "is really important part which we need to manipulate during cross",
    "start": "244840",
    "end": "250360"
  },
  {
    "text": "catch as for the uh paral list there is a deterministic method to put a slab",
    "start": "250360",
    "end": "257359"
  },
  {
    "text": "into it uh the first step is to create a full slab and then pain the uh task on target",
    "start": "257359",
    "end": "266320"
  },
  {
    "text": "CPU for example uh CPU zero after that by releasing and any object on this four",
    "start": "266320",
    "end": "272120"
  },
  {
    "text": "slab we can put this slab into the partial list of cpu0 um this method is really useful for",
    "start": "272120",
    "end": "279759"
  },
  {
    "text": "increasing the length of partial list uh the partial list also has a",
    "start": "279759",
    "end": "285960"
  },
  {
    "text": "flashing feature although it can contain many slabs there is a maximum number of",
    "start": "285960",
    "end": "292080"
  },
  {
    "text": "slabs it can hold know as uh CPU paral which is also exported through CFS",
    "start": "292080",
    "end": "300919"
  },
  {
    "text": "once the number of slabs in partial list exceeds the limit set by CPU partial",
    "start": "300919",
    "end": "306639"
  },
  {
    "text": "flashing for partial list occurs a slab with some inuse objects are moved to",
    "start": "306639",
    "end": "313600"
  },
  {
    "text": "slab slabs per node partial list and the slabs slabs that are empty are freed",
    "start": "313600",
    "end": "320039"
  },
  {
    "text": "back to page allocator uh after knowing the common",
    "start": "320039",
    "end": "325400"
  },
  {
    "text": "knowledge uh let's see the common workflow of course cat attack",
    "start": "325400",
    "end": "330680"
  },
  {
    "text": "uh step one uh pin our task to a single CPU for example CPU zero and uh step to",
    "start": "330680",
    "end": "338160"
  },
  {
    "text": "perform def defragmentation to drain partially free slabs of all their free",
    "start": "338160",
    "end": "345240"
  },
  {
    "text": "objects uh step three allocate about objects per slab times CPU partial plus",
    "start": "345240",
    "end": "351960"
  },
  {
    "text": "one objects for later use uh step four allocate objects for",
    "start": "351960",
    "end": "358120"
  },
  {
    "text": "slab minor minus one objects as preall objects uh step five allocate the victim",
    "start": "358120",
    "end": "366919"
  },
  {
    "text": "object step six trigger the vulnerability to release the victim",
    "start": "366919",
    "end": "373520"
  },
  {
    "text": "object and step seven allocat objects per slab plus one object as post a lock",
    "start": "373520",
    "end": "381080"
  },
  {
    "text": "objects after this we can make the victim victim slab a full",
    "start": "381080",
    "end": "386919"
  },
  {
    "text": "slab and in Step eight uh release all the pre-lock and postal loock objects uh",
    "start": "386919",
    "end": "393360"
  },
  {
    "text": "this step would put the victim slab into partial list and also make sure the uh",
    "start": "393360",
    "end": "399120"
  },
  {
    "text": "victim slab become empty um Step nine a free one object per",
    "start": "399120",
    "end": "406199"
  },
  {
    "text": "slab from the allocation made in step three let's see this process more",
    "start": "406199",
    "end": "411680"
  },
  {
    "text": "carefully if we release CP partial minus one objects uh CP partial minus one",
    "start": "411680",
    "end": "418479"
  },
  {
    "text": "slabs will be put into the pure list the flashing for Pure list won't happen",
    "start": "418479",
    "end": "425000"
  },
  {
    "text": "yet and we and if we release one more object the flashing for p paral would uh",
    "start": "425000",
    "end": "432360"
  },
  {
    "text": "be triggered and the empty victim slab will be reclaimed to page",
    "start": "432360",
    "end": "439000"
  },
  {
    "text": "allocator uh since the victim slab has been reclaimed we need to H three object",
    "start": "439039",
    "end": "445520"
  },
  {
    "text": "B to occupy the victim slab in Step 10 in this step victim object a gets reall",
    "start": "445520",
    "end": "453639"
  },
  {
    "text": "reallocated as object B finally uh in Step 11 we can construct Primitives for",
    "start": "453639",
    "end": "461440"
  },
  {
    "text": "PR privilege escalation after knowing the common workflow of cross cach attack let's see",
    "start": "461440",
    "end": "469120"
  },
  {
    "text": "the two challenges in it uh the first challenge is how to discard the victim",
    "start": "469120",
    "end": "474400"
  },
  {
    "text": "slap on a constrained allocation primitive and the Second Challenge is to",
    "start": "474400",
    "end": "480759"
  },
  {
    "text": "is how to make high order slab reuse the low order uh slab",
    "start": "480759",
    "end": "487199"
  },
  {
    "text": "deterministically let's see the first one uh normally we need to trigger the flashing for partial Le to discard the",
    "start": "487199",
    "end": "493720"
  },
  {
    "text": "victim slab this requires not only the ab ability to allocate a large number of",
    "start": "493720",
    "end": "499680"
  },
  {
    "text": "objects but also the ability to keep them unreleased for a",
    "start": "499680",
    "end": "506159"
  },
  {
    "text": "while however uh these two conditions can hard me sometimes as for the ab",
    "start": "506159",
    "end": "512279"
  },
  {
    "text": "ability to allocate a large number of objects there are some mitigations like random Chim cases Auto slab that prevent",
    "start": "512279",
    "end": "520080"
  },
  {
    "text": "us from finding suitable allocation Primitives as for the ability to keep",
    "start": "520080",
    "end": "526360"
  },
  {
    "text": "the large number of objects un relased for a while there are some temporary Kel",
    "start": "526360",
    "end": "531680"
  },
  {
    "text": "objects which get allocated and then released uh very quickly so we can't",
    "start": "531680",
    "end": "537480"
  },
  {
    "text": "keep such objects unreleased for a long time um the Second Challenge is how to",
    "start": "537480",
    "end": "545680"
  },
  {
    "text": "make high order slab reuse the low slab deterministically uh usually uh if we",
    "start": "545680",
    "end": "551640"
  },
  {
    "text": "are going to cross catch from a bigger slab to a smaller slab we only need to discard the bigger slab and try to hip",
    "start": "551640",
    "end": "558480"
  },
  {
    "text": "spray many smaller slabs to reduse the released bigger slab in theory uh the",
    "start": "558480",
    "end": "565040"
  },
  {
    "text": "reusing would succeed if we HP hip spray enough smaller",
    "start": "565040",
    "end": "570120"
  },
  {
    "text": "slabs but if we uh but what if we cross catch from a smaller slab to a bigger",
    "start": "570120",
    "end": "576399"
  },
  {
    "text": "one uh simply allocating a large number of object B doesn't work uh instead we",
    "start": "576399",
    "end": "583160"
  },
  {
    "text": "need to get low order pages of smaller slabs compacted into the high order",
    "start": "583160",
    "end": "589279"
  },
  {
    "text": "pages of bigger slab and uh this requires H",
    "start": "589279",
    "end": "595120"
  },
  {
    "text": "shaping now let's dive into the main point of this talk advancing towards a",
    "start": "595120",
    "end": "600600"
  },
  {
    "text": "more effective cross cat attack and in this part I will try to solve these two",
    "start": "600600",
    "end": "607880"
  },
  {
    "text": "challenges uh first of all let's take a look at this vulnerability which we will",
    "start": "607880",
    "end": "613120"
  },
  {
    "text": "use to explain the technique details uh this vulnerability is a mpu issue fund",
    "start": "613120",
    "end": "618560"
  },
  {
    "text": "by my colleague I John and and it affects quom 4.14 kernel uh this us",
    "start": "618560",
    "end": "625560"
  },
  {
    "text": "could lead to a UF or double free for more detail please refer our",
    "start": "625560",
    "end": "630760"
  },
  {
    "text": "presentation at blackhead Europe last year uh with this issue we can get an",
    "start": "630760",
    "end": "636680"
  },
  {
    "text": "arbitary Kum catch free primitive uh to use this primitive we",
    "start": "636680",
    "end": "642000"
  },
  {
    "text": "must prepare the content of victim object carefully so this requires us to",
    "start": "642000",
    "end": "648680"
  },
  {
    "text": "perform cross catch attack uh for this issue the victim object is a p network",
    "start": "648680",
    "end": "656920"
  },
  {
    "text": "command object which is allocated from a dedicated km",
    "start": "656920",
    "end": "663760"
  },
  {
    "text": "catch um some basic information about this dedicated km catch is exported",
    "start": "663760",
    "end": "670279"
  },
  {
    "text": "through CFS for example we can know that the order of its slab is zero uh the",
    "start": "670279",
    "end": "677040"
  },
  {
    "text": "object size is 104 bytes there are 39 objects in one slab and the CP partial",
    "start": "677040",
    "end": "684720"
  },
  {
    "text": "is 30 uh we can also know how many slabs in",
    "start": "684720",
    "end": "690680"
  },
  {
    "text": "per CPU paral list for each CPU it turns out that uh this dedicated Kap catch uh",
    "start": "690680",
    "end": "697440"
  },
  {
    "text": "doesn't have much slabs on parure list and uh it's an inactive km catch this",
    "start": "697440",
    "end": "703079"
  },
  {
    "text": "means it can be manipulated easily and not much noise getting",
    "start": "703079",
    "end": "709279"
  },
  {
    "text": "involved and here is my exploit exploit plan for the issue uh first to trigger",
    "start": "709279",
    "end": "717079"
  },
  {
    "text": "the issue to get the victim object and then using cross catch attack",
    "start": "717079",
    "end": "722560"
  },
  {
    "text": "to let file array occupy the released victim object object after that make use",
    "start": "722560",
    "end": "729440"
  },
  {
    "text": "of ab3 K AB ke3 primitive to trigger a",
    "start": "729440",
    "end": "736160"
  },
  {
    "text": "5f uh for this FF we use dir page table to exploit exploit it and get root uh",
    "start": "736160",
    "end": "743839"
  },
  {
    "text": "this whole exploitation is data only however we rely on C catch so heavily",
    "start": "743839",
    "end": "750800"
  },
  {
    "text": "which requires us to perform cross catch attack stab to get a reli reliable",
    "start": "750800",
    "end": "757360"
  },
  {
    "text": "exploit uh so let's see our exploit step by step first trigger the issue and then",
    "start": "757360",
    "end": "763360"
  },
  {
    "text": "start the cross catch attack we choose KCK 8K to allocate f r from uh so this",
    "start": "763360",
    "end": "770560"
  },
  {
    "text": "cross catch attack would cross from the dedicated kimm catch to kimock 8K the",
    "start": "770560",
    "end": "778440"
  },
  {
    "text": "slide size slab size of dedicated kimam catch is order zero while the slab size",
    "start": "778440",
    "end": "784240"
  },
  {
    "text": "of Kim 8K is order three um this cross cut just contains",
    "start": "784240",
    "end": "790519"
  },
  {
    "text": "two challenges we need to solve let's see the first one uh how to discard the victims order zero slab under a",
    "start": "790519",
    "end": "797600"
  },
  {
    "text": "constrained allocation primitive uh the mpu network command",
    "start": "797600",
    "end": "803480"
  },
  {
    "text": "command object is a temporary con object that it quickly allocated and the",
    "start": "803480",
    "end": "810160"
  },
  {
    "text": "released we can trigger the allocation and releasing of this object",
    "start": "810160",
    "end": "815360"
  },
  {
    "text": "by this mpu I control commands this is a really constrained allocation primitive",
    "start": "815360",
    "end": "822120"
  },
  {
    "text": "because we can't allocate a large number of mpu uh Network command objects and",
    "start": "822120",
    "end": "827240"
  },
  {
    "text": "keep them unreleased for a while well we found another con object",
    "start": "827240",
    "end": "834040"
  },
  {
    "text": "sharing the same km catch because of slab mergy but it requires system",
    "start": "834040",
    "end": "839240"
  },
  {
    "text": "privilege to access the cor corresponding driver so we can't discard the victim lab with the old method from",
    "start": "839240",
    "end": "847519"
  },
  {
    "text": "on trust stab uh our plan for solving the first challenge is to discard the Mt slab in a",
    "start": "847519",
    "end": "854360"
  },
  {
    "text": "RIS way uh first we let's see a really interesting slab move uh slab",
    "start": "854360",
    "end": "862079"
  },
  {
    "text": "move move PRI which can move the CPU slab from one CPU to another cpu's par",
    "start": "862079",
    "end": "868680"
  },
  {
    "text": "partially uh for example if want if we want to move CPU partial a CPU slab from CPU one",
    "start": "868680",
    "end": "877279"
  },
  {
    "text": "to cpu0 we need to pin our task on CPU one first and then make uh CPU slab of",
    "start": "877279",
    "end": "885399"
  },
  {
    "text": "cpu1 full by allocating objects per slab objects and then pay our task to cpu0",
    "start": "885399",
    "end": "893440"
  },
  {
    "text": "after that release uh all the objects allocated in step two uh step move move",
    "start": "893440",
    "end": "899279"
  },
  {
    "text": "just happens with this primitive we can put one more slab into the partial list",
    "start": "899279",
    "end": "904959"
  },
  {
    "text": "of Target CPU by allocating objects per slab objects at",
    "start": "904959",
    "end": "911399"
  },
  {
    "text": "most by repeating this slab move primitive we can put controllable number",
    "start": "911800",
    "end": "917600"
  },
  {
    "text": "of slabs into paral list of Target CPU uh by this new way of putting slabs",
    "start": "917600",
    "end": "926000"
  },
  {
    "text": "into pure list we can remove uh the stab three in common workflow of cross catch",
    "start": "926000",
    "end": "932839"
  },
  {
    "text": "dech and the release replace the stab nine with repeating slab move",
    "start": "932839",
    "end": "940000"
  },
  {
    "text": "primitive now we we only need objects per slab objects to finish discarding of",
    "start": "940000",
    "end": "946959"
  },
  {
    "text": "victim slab by repeating slab move primitive however it's not good enough",
    "start": "946959",
    "end": "952319"
  },
  {
    "text": "for this issue because we can only allocate one mpu network command object",
    "start": "952319",
    "end": "957519"
  },
  {
    "text": "and hold it for a very short time so we have to try",
    "start": "957519",
    "end": "963319"
  },
  {
    "text": "harder uh let's see such a risk risk scenario there are n task",
    "start": "963319",
    "end": "969600"
  },
  {
    "text": "tasks n is bigger than objects per slab all of these tasks are pinning to CPU",
    "start": "969600",
    "end": "976839"
  },
  {
    "text": "one and each of them uh keeps on allocating and releasing uh MP Network",
    "start": "976839",
    "end": "983360"
  },
  {
    "text": "command object by calling corresponding mpio control",
    "start": "983360",
    "end": "989040"
  },
  {
    "text": "uh there will come a time when at least objects per slab tasks have have",
    "start": "989040",
    "end": "995480"
  },
  {
    "text": "finished the allocation of objects and still wait for their",
    "start": "995480",
    "end": "1001800"
  },
  {
    "text": "release since there are objects per slab allocations happening at the same time",
    "start": "1001800",
    "end": "1007079"
  },
  {
    "text": "that must lead to a full slab getting created on CPU one so if we just switch any of these",
    "start": "1007079",
    "end": "1014680"
  },
  {
    "text": "tasks to cpu0 a release will happen on cpu0 uh this triggers uh slap move PR",
    "start": "1014680",
    "end": "1021720"
  },
  {
    "text": "primitive so as a result this full slab would be moved from cpu1 to the partial",
    "start": "1021720",
    "end": "1028400"
  },
  {
    "text": "list of cpu0 and we call this whole process a risk style uh slab move",
    "start": "1028400",
    "end": "1037160"
  },
  {
    "text": "primitive and here is the actual model for risk style PR slab move primitive as",
    "start": "1037439",
    "end": "1044160"
  },
  {
    "text": "we can see there are unas tasks uh repeat allocation and release on cpu0",
    "start": "1044160",
    "end": "1050360"
  },
  {
    "text": "and another single task is used for constantly switch some of these tasks to",
    "start": "1050360",
    "end": "1057880"
  },
  {
    "text": "cpu0 uh with this model we can manage to put some slabs into the partial list of",
    "start": "1057880",
    "end": "1066080"
  },
  {
    "text": "cpu0 by adjusting the number of risk tasks the number of tasks being switched",
    "start": "1066640",
    "end": "1073520"
  },
  {
    "text": "and the risk time we can move a relatively stable number of slabs into",
    "start": "1073520",
    "end": "1079159"
  },
  {
    "text": "the partial list of cpu0 so finally we uh with this risk style slab slab move",
    "start": "1079159",
    "end": "1086000"
  },
  {
    "text": "permit we can add enough slabs into partial list and uh then succeed in",
    "start": "1086000",
    "end": "1091960"
  },
  {
    "text": "discarding the empty slab with a really constraint",
    "start": "1091960",
    "end": "1097200"
  },
  {
    "text": "allocation uh with the new method for discard uh discarding the victim slab we",
    "start": "1097320",
    "end": "1103520"
  },
  {
    "text": "have a new optimized workflow for the cross catch tech for this issue uh the",
    "start": "1103520",
    "end": "1109039"
  },
  {
    "text": "step one uh perform defragmentation with the rest style slab move primitive to create a new",
    "start": "1109039",
    "end": "1115919"
  },
  {
    "text": "slab step two allocate the victim object step three uh trigger the vulnerability",
    "start": "1115919",
    "end": "1121600"
  },
  {
    "text": "to release the victim object and step four uh move the spum",
    "start": "1121600",
    "end": "1128159"
  },
  {
    "text": "slab to the partial list of cpu1 don't trigger the flashing of partial list of",
    "start": "1128159",
    "end": "1133240"
  },
  {
    "text": "cp1 yet uh step five uh move the victim slab",
    "start": "1133240",
    "end": "1138440"
  },
  {
    "text": "from the partial list of cpu1 to cpu0 uh trigger the flashing of the partial list",
    "start": "1138440",
    "end": "1145120"
  },
  {
    "text": "of CPU zero step six HPS three file arrays to occupy the victim",
    "start": "1145120",
    "end": "1153039"
  },
  {
    "text": "SLB uh now we have solved the first challenge let's see the second",
    "start": "1153400",
    "end": "1160080"
  },
  {
    "text": "one uh which is how to make order three slab reuse the order zero slab",
    "start": "1160559",
    "end": "1166720"
  },
  {
    "text": "deterministically uh first of all let's get some pre knowledge of uh page allocator here is",
    "start": "1166720",
    "end": "1174400"
  },
  {
    "text": "simplified view of page allocator for Android devices with uh single PG data",
    "start": "1174400",
    "end": "1180159"
  },
  {
    "text": "and single zone as you can see Zone normal H has several different Migra",
    "start": "1180159",
    "end": "1186080"
  },
  {
    "text": "migration types of free area in the free area there are many different orders of",
    "start": "1186080",
    "end": "1191640"
  },
  {
    "text": "pages especially the percp structure PCP list is created to accelerate the",
    "start": "1191640",
    "end": "1199679"
  },
  {
    "text": "allocation and releasing of other zero Pages uh normally uh konos space would",
    "start": "1199679",
    "end": "1206400"
  },
  {
    "text": "would allocate pages from unmovable free area by API allock Pages while uh user",
    "start": "1206400",
    "end": "1213159"
  },
  {
    "text": "space would allocate pages from movable free area by",
    "start": "1213159",
    "end": "1218679"
  },
  {
    "text": "map and some information of page allocator is exported to user space",
    "start": "1218720",
    "end": "1223840"
  },
  {
    "text": "through procfs for example by reading the file page type info we can get",
    "start": "1223840",
    "end": "1230400"
  },
  {
    "text": "detailed information about uh the number of pages in in the free area however the this uh page type info",
    "start": "1230400",
    "end": "1239080"
  },
  {
    "text": "file is unreadable by untrust apps uh by reading file Zone info we can",
    "start": "1239080",
    "end": "1246840"
  },
  {
    "text": "know uh what marks of each uh Zone and E and even the number of pages in on each",
    "start": "1246840",
    "end": "1253880"
  },
  {
    "text": "PCP list as you can see here we can we can know how high order marks of a Zone",
    "start": "1253880",
    "end": "1260440"
  },
  {
    "text": "the current number of order zero Pages uh in PCP list and the maximum number of",
    "start": "1260440",
    "end": "1266120"
  },
  {
    "text": "order order zero pages that can be catched in PCP list and the specific",
    "start": "1266120",
    "end": "1272400"
  },
  {
    "text": "number of order zero Pages for PCP uh shrink or bu Pro",
    "start": "1272400",
    "end": "1279520"
  },
  {
    "text": "operations as for uh PCP list there are some characteristics to note first",
    "start": "1279520",
    "end": "1285760"
  },
  {
    "text": "allocation and the releasing of order zero pages always use PCP list first and",
    "start": "1285760",
    "end": "1291480"
  },
  {
    "text": "it's designed in a stack like manner a second PCP list would flush the",
    "start": "1291480",
    "end": "1297600"
  },
  {
    "text": "pages that add tail if there are too many pages in it and there is another important",
    "start": "1297600",
    "end": "1305120"
  },
  {
    "text": "feature we need to note page allocator intends to merge low order pages to high order pages when low order pages are",
    "start": "1305120",
    "end": "1312760"
  },
  {
    "text": "reclaimed into free area now that we have some basic",
    "start": "1312760",
    "end": "1318240"
  },
  {
    "text": "knowledge about the p allocator uh let's start to see how to solve challenge two step by step the",
    "start": "1318240",
    "end": "1325640"
  },
  {
    "text": "step one is pay hour task on CPU Zer step two allocate many order zero Pages",
    "start": "1325640",
    "end": "1332760"
  },
  {
    "text": "for triggering the flashing of uh PCP list later which choose to use pipe to",
    "start": "1332760",
    "end": "1339559"
  },
  {
    "text": "do the allocation uh step three allocate a few hundreds of physically continuous order",
    "start": "1339559",
    "end": "1347440"
  },
  {
    "text": "Z order zero pay pages from uh unmovable free area just like uh",
    "start": "1347440",
    "end": "1353919"
  },
  {
    "text": "this well we still use pipe to allocate the these order zero",
    "start": "1354200",
    "end": "1361360"
  },
  {
    "text": "pages and here are some details for how to allocate in order zero pages with",
    "start": "1362640",
    "end": "1368760"
  },
  {
    "text": "pipe in step four we create order zero page page holds by uh releasing one",
    "start": "1368760",
    "end": "1376000"
  },
  {
    "text": "order zero page for every reate all zero",
    "start": "1376000",
    "end": "1382159"
  },
  {
    "text": "Pages after step four the pp list of cpu0 would be like this uh as you can",
    "start": "1383039",
    "end": "1389279"
  },
  {
    "text": "see there are many other zero page hold hes in P",
    "start": "1389279",
    "end": "1394679"
  },
  {
    "text": "list in step five we trigger the step one in the new optimized workflow of",
    "start": "1394679",
    "end": "1400760"
  },
  {
    "text": "cross catch attack as you can see here this Mt slab would come from the order",
    "start": "1400760",
    "end": "1406840"
  },
  {
    "text": "zero uh page hold that we have just",
    "start": "1406840",
    "end": "1412080"
  },
  {
    "text": "created after the step five the memory area would be like this one of the page",
    "start": "1413080",
    "end": "1419799"
  },
  {
    "text": "hole has been reused as the new uh slab which is also the victim",
    "start": "1419799",
    "end": "1426480"
  },
  {
    "text": "slab in Step six we occupy all the other order zero page hostes this time we",
    "start": "1426919",
    "end": "1432720"
  },
  {
    "text": "choose ion to do the page allocation and the memory area would be like like uh",
    "start": "1432720",
    "end": "1438159"
  },
  {
    "text": "this no more page holes left in the memory",
    "start": "1438159",
    "end": "1443520"
  },
  {
    "text": "area in Step seven we need to uh finish the step two to step five of new",
    "start": "1443520",
    "end": "1451559"
  },
  {
    "text": "optimized workflow of cross cach to discard the victim slab as you can see that the page of",
    "start": "1451559",
    "end": "1458440"
  },
  {
    "text": "victim slab has been reclaimed to page",
    "start": "1458440",
    "end": "1463600"
  },
  {
    "text": "allocator in Step eight we release all the pages is allocated in step three",
    "start": "1465159",
    "end": "1470480"
  },
  {
    "text": "except those pages has been reoccupied by ion after this there must be one and",
    "start": "1470480",
    "end": "1477640"
  },
  {
    "text": "only one other the three pages here and the releas and the released",
    "start": "1477640",
    "end": "1482840"
  },
  {
    "text": "victim slab must be in it in Step n release all the pages",
    "start": "1482840",
    "end": "1490960"
  },
  {
    "text": "created in step two to force the flashing of PCP list after this because",
    "start": "1490960",
    "end": "1497279"
  },
  {
    "text": "uh victim slap and other order zero pages are pages are reclaimed into free",
    "start": "1497279",
    "end": "1502880"
  },
  {
    "text": "area page mergin will happen because deterministic page",
    "start": "1502880",
    "end": "1508159"
  },
  {
    "text": "merging since the order zero page of victim slab has been merged into our",
    "start": "1508159",
    "end": "1513600"
  },
  {
    "text": "order three page we can help spr lots of file arrays to occupy these order three",
    "start": "1513600",
    "end": "1519640"
  },
  {
    "text": "pages and finish the cross",
    "start": "1519640",
    "end": "1524520"
  },
  {
    "text": "sketch uh in in actual practice is the success rate of the entire exploitation",
    "start": "1525480",
    "end": "1531399"
  },
  {
    "text": "largely depends on the step three and there is a really important problem",
    "start": "1531399",
    "end": "1536720"
  },
  {
    "text": "problem we haven't solved how to allocate hundreds of physically continuous all zero page pages from un",
    "start": "1536720",
    "end": "1544480"
  },
  {
    "text": "movable free area uh luckily we F I found a new",
    "start": "1544480",
    "end": "1550679"
  },
  {
    "text": "technique with with which we can detect the status of the page allocator in a",
    "start": "1550679",
    "end": "1556080"
  },
  {
    "text": "side Channel way let's see a really interesting pattern of page allocator if",
    "start": "1556080",
    "end": "1561600"
  },
  {
    "text": "we keep uh allocating order zero page pages with the K swapd reclaim flag",
    "start": "1561600",
    "end": "1568640"
  },
  {
    "text": "enabled from the unmovable free area the page alligator would go through several",
    "start": "1568640",
    "end": "1574600"
  },
  {
    "text": "States uh the first state the order zero page would be allocated uh directly from",
    "start": "1574600",
    "end": "1581159"
  },
  {
    "text": "PCP list and in St state state two because the pist has becomes empty the",
    "start": "1581159",
    "end": "1589840"
  },
  {
    "text": "moveable the unmovable free area would be used to allocate the",
    "start": "1589840",
    "end": "1596880"
  },
  {
    "text": "pages and if we continue the allocation the uh page allocator would enter state",
    "start": "1596880",
    "end": "1604080"
  },
  {
    "text": "three the unmovable free area would become empty and other migration type",
    "start": "1604080",
    "end": "1610399"
  },
  {
    "text": "free areas will be used for allocation according to the fullback list and we",
    "start": "1610399",
    "end": "1616679"
  },
  {
    "text": "need to note that when fullback happens Q swapd would be W woken up uh for",
    "start": "1616679",
    "end": "1623360"
  },
  {
    "text": "reclaiming Pages if the number of three pages is below the high high water",
    "start": "1623360",
    "end": "1630640"
  },
  {
    "text": "Watermark and if other Mig migration migration type free areas become empty",
    "start": "1630640",
    "end": "1638159"
  },
  {
    "text": "uh the page alligator would uh enter slow path for allocation uh this is a",
    "start": "1638159",
    "end": "1645039"
  },
  {
    "text": "state four and there are several actions taken can by kernel to reclaim free",
    "start": "1645039",
    "end": "1650480"
  },
  {
    "text": "Pages including waking up KY swapd to reclaim pages and direct uh reclaim and",
    "start": "1650480",
    "end": "1657600"
  },
  {
    "text": "so on uh normally Kel would reclaim pages",
    "start": "1657600",
    "end": "1664159"
  },
  {
    "text": "from several fixed locations which includes four LR lru list and shrinker",
    "start": "1664159",
    "end": "1672840"
  },
  {
    "text": "list and luckily the number of pages in each of these lists are all exported by",
    "start": "1674720",
    "end": "1682120"
  },
  {
    "text": "the file proog M info and PR and the M info file is accessible from uh on trust",
    "start": "1682120",
    "end": "1691720"
  },
  {
    "text": "apps so as a result if we OB observe the values in the pr M info while while",
    "start": "1691720",
    "end": "1699960"
  },
  {
    "text": "keeping on allocating all the zero Pages we will see uh these five values get uh",
    "start": "1699960",
    "end": "1706600"
  },
  {
    "text": "reduced frequently at very time point if this happens uh the page alligator might",
    "start": "1706600",
    "end": "1713480"
  },
  {
    "text": "be in state three or state four which means our movable free area is almost",
    "start": "1713480",
    "end": "1720600"
  },
  {
    "text": "empty and here is a test result on a device with kernel 4.14 as you can see",
    "start": "1720600",
    "end": "1728200"
  },
  {
    "text": "uh we can detect the status of pitch allocator and know the exact time when a",
    "start": "1728200",
    "end": "1734320"
  },
  {
    "text": "moveable free area is uh almost empty",
    "start": "1734320",
    "end": "1739600"
  },
  {
    "text": "so here is the Strate strategy for allocating a few hundreds of physical",
    "start": "1741080",
    "end": "1746559"
  },
  {
    "text": "physically continuous order zero Pages um from a moveable free area step one",
    "start": "1746559",
    "end": "1753720"
  },
  {
    "text": "reserve a a dozen of high order pages with the I on step to create and detect",
    "start": "1753720",
    "end": "1759519"
  },
  {
    "text": "empty state of un mobal free area with a the technique we mentioned step three release the high",
    "start": "1759519",
    "end": "1767000"
  },
  {
    "text": "order Pages result in step one and step four allocate some order zero pages to",
    "start": "1767000",
    "end": "1774000"
  },
  {
    "text": "reduce noise step five allocate a few handles of physically continuous other zero pages from a mobile free",
    "start": "1774000",
    "end": "1782519"
  },
  {
    "text": "area under this condition order zero Pages come from this plating of high",
    "start": "1782519",
    "end": "1789519"
  },
  {
    "text": "order Pages this guarantees though this order zero pages will be physically",
    "start": "1789519",
    "end": "1796440"
  },
  {
    "text": "continuous so we just solve the Second",
    "start": "1796440",
    "end": "1801799"
  },
  {
    "text": "Challenge uh after we succeed in the first stage cross catch we we get a FF",
    "start": "1802679",
    "end": "1809880"
  },
  {
    "text": "it's time to exploit FF with the DAT page table and this time we use the old",
    "start": "1809880",
    "end": "1815320"
  },
  {
    "text": "method to discard the victim file P slab and occupy the released victim file P",
    "start": "1815320",
    "end": "1822279"
  },
  {
    "text": "slab with a user page table by hiping spraying many user page tables",
    "start": "1822279",
    "end": "1829639"
  },
  {
    "text": "to improve the success rate of cross catch uh we use the me mentioned method",
    "start": "1829679",
    "end": "1835519"
  },
  {
    "text": "to make the unmovable free area become almost empty in the first",
    "start": "1835519",
    "end": "1841679"
  },
  {
    "text": "step and at last year uh we have",
    "start": "1842039",
    "end": "1847279"
  },
  {
    "text": "demonstrated how to rout several Android devices with do page table but we",
    "start": "1847279",
    "end": "1852799"
  },
  {
    "text": "haven't demonstrated how to rout Sam Samsung device with to pitball yet",
    "start": "1852799",
    "end": "1858639"
  },
  {
    "text": "so this time let's do this for sson device it has has some mitigation such",
    "start": "1858639",
    "end": "1864559"
  },
  {
    "text": "as physical KLR read only CH text uh which prevent us from constructing",
    "start": "1864559",
    "end": "1871279"
  },
  {
    "text": "physical a w with 30 page table but we still uh can choose to",
    "start": "1871279",
    "end": "1878519"
  },
  {
    "text": "corrupt con object to construct aw here we can easily get this scene by",
    "start": "1878519",
    "end": "1885600"
  },
  {
    "text": "dat page table as you can see we control a valid pte which which corresponding to",
    "start": "1885600",
    "end": "1893320"
  },
  {
    "text": "a physical page owned by ion uh this physical page can be accessed with a",
    "start": "1893320",
    "end": "1899559"
  },
  {
    "text": "user virtual address from user space and we choose to corrupt pip",
    "start": "1899559",
    "end": "1906320"
  },
  {
    "text": "buffer to construct a w to finish that we need to make the page of pip buffer",
    "start": "1906320",
    "end": "1912679"
  },
  {
    "text": "follow the page owned by I own this can be done by using mention technique for",
    "start": "1912679",
    "end": "1918639"
  },
  {
    "text": "allocating physically continuous order zero pages and then we add Ox 1000 to uh this",
    "start": "1918639",
    "end": "1927919"
  },
  {
    "text": "victim pte by by doing so we can totally control the pipe buffer and it will be",
    "start": "1927919",
    "end": "1934440"
  },
  {
    "text": "easy to use uh pipe primitive to construct",
    "start": "1934440",
    "end": "1939440"
  },
  {
    "text": "aw and uh for to bypass s Linux in Samsung device we choose to attack the",
    "start": "1940480",
    "end": "1947399"
  },
  {
    "text": "global data used in security comput AV function uh which is used to compute the",
    "start": "1947399",
    "end": "1956120"
  },
  {
    "text": "avd and finally we won the game of cross catch we removed the requirement for",
    "start": "1958159",
    "end": "1964360"
  },
  {
    "text": "system privilege and improve the success rate of uh exploit to about uh 60",
    "start": "1964360",
    "end": "1974720"
  },
  {
    "text": "5% uh as for meeting ating cross catch attacks uh there are actually many techn",
    "start": "1975880",
    "end": "1982159"
  },
  {
    "text": "Tech Technic available uh the slab vure is a really powerful one which basically",
    "start": "1982159",
    "end": "1988399"
  },
  {
    "text": "kill the game and here is the",
    "start": "1988399",
    "end": "1993960"
  },
  {
    "text": "summary in this talk I solved two challenges in Cross catch attack and",
    "start": "1993960",
    "end": "2000159"
  },
  {
    "text": "adapt 30 page table to Samsung device and uh thanks joh and teacher J",
    "start": "2000159",
    "end": "2007639"
  },
  {
    "text": "for for helping me with my slides and the talk and thank you all for attending my",
    "start": "2007639",
    "end": "2016159"
  },
  {
    "text": "presentation so is there some",
    "start": "2018840",
    "end": "2023760"
  },
  {
    "text": "questions okay okay thank you all",
    "start": "2031559",
    "end": "2036518"
  }
]