[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "[Music] for attending our talk about chaos db an account takeover vulnerability we found",
    "start": "6360",
    "end": "12320"
  },
  {
    "text": "in one of azure most popular databases solution cosmos divi so just a quick huawei before we begin",
    "start": "12320",
    "end": "18560"
  },
  {
    "text": "my name is segee and here with me is neil hey we're both security researchers from with research team and our team",
    "start": "18560",
    "end": "24560"
  },
  {
    "start": "20000",
    "end": "20000"
  },
  {
    "text": "vision is to uncover new attack vectors in the cloud our team also presented in the last black hat and defcon events and these",
    "start": "24560",
    "end": "31279"
  },
  {
    "text": "are the talks that we gave and generally we do cloud security research and publish our findings on our",
    "start": "31279",
    "end": "36960"
  },
  {
    "text": "blog and here are a couple of our most recent publications note that we are also planning to",
    "start": "36960",
    "end": "43120"
  },
  {
    "text": "disclose more vulnerabilities soon so stay tuned about our blog okay so in august 2021 we reported",
    "start": "43120",
    "end": "50719"
  },
  {
    "text": "microsoft across account vulnerability that we found in its cosmos db service exploiting this vulnerability",
    "start": "50719",
    "end": "56960"
  },
  {
    "text": "essentially allows any attacker to completely compromise cosmos db databases of other customers",
    "start": "56960",
    "end": "63440"
  },
  {
    "text": "this vulnerability got a lot of attention and today for the very first time we are going to disclose all of the",
    "start": "63440",
    "end": "69600"
  },
  {
    "text": "technical information behind this vulnerability including how we even managed to get some access to azure",
    "start": "69600",
    "end": "74799"
  },
  {
    "text": "internal infrastructure but before we dive into the technical details let's go over the agenda for",
    "start": "74799",
    "end": "80720"
  },
  {
    "text": "today so we will first talk about what is cosmos db and our motivation for this research",
    "start": "80720",
    "end": "86880"
  },
  {
    "text": "then we'll walk you through the technical details of the first two bugs that we found in the service",
    "start": "86880",
    "end": "92000"
  },
  {
    "text": "then we will uncover some new information regarding an azure internal component called the wire server",
    "start": "92000",
    "end": "97759"
  },
  {
    "text": "and with this new information in mind we'll discuss the third bag and how we chained all of these bugs together for",
    "start": "97759",
    "end": "103280"
  },
  {
    "text": "an account takeover vulnerability then we'll show you a demonstration of our full exploit from unauthorized",
    "start": "103280",
    "end": "109759"
  },
  {
    "text": "tackle to a complete database compromise and we'll finish up with a summary regarding everything that we've learned",
    "start": "109759",
    "end": "115280"
  },
  {
    "text": "during this research and our conclusions hopefully by the end of this talk you",
    "start": "115280",
    "end": "120399"
  },
  {
    "text": "will have a better understanding of azure architecture in general and cosmos db specifically and you will also",
    "start": "120399",
    "end": "126000"
  },
  {
    "text": "understand how we exploited multiple flaws in this architecture in order to achieve an account takeover vulnerability",
    "start": "126000",
    "end": "132800"
  },
  {
    "text": "okay so let's talk about our motivation and why did they choose to research cosmos db specifically",
    "start": "132800",
    "end": "138640"
  },
  {
    "start": "134000",
    "end": "134000"
  },
  {
    "text": "so cosmos db is a managed database solution offered by azure this means that if you are an azure customer and",
    "start": "138640",
    "end": "144640"
  },
  {
    "text": "you need a database for your application you will most likely use cosmos db and turns out that this service is very",
    "start": "144640",
    "end": "150720"
  },
  {
    "text": "popular among your customers you can see in this picture that there are some very big companies that are using cosmos db",
    "start": "150720",
    "end": "158239"
  },
  {
    "text": "being a popular database solution this makes cosmos db the holy grail for attackers everything an attacker wants from your",
    "start": "158239",
    "end": "164560"
  },
  {
    "text": "organization is usually stored in some sort of a database and for that reason we thought that if we will find the",
    "start": "164560",
    "end": "170239"
  },
  {
    "text": "vulnerability in cosmos db it will have a lot of impact but if we are being completely honest we",
    "start": "170239",
    "end": "177280"
  },
  {
    "text": "didn't even intend to find a vulnerability in cosmos db we were originally looking for common misconfigurations that a customer can",
    "start": "177280",
    "end": "185040"
  },
  {
    "text": "make when they set up the cosmos db account so that we at least will be able to alert our customers regarding such",
    "start": "185040",
    "end": "191519"
  },
  {
    "text": "misconfigurations okay so as i mentioned before at this point we are not looking for",
    "start": "191519",
    "end": "197120"
  },
  {
    "text": "vulnerabilities we were simply scanning the features that this service has to offer to see what can be misconfigured",
    "start": "197120",
    "end": "204159"
  },
  {
    "text": "we quickly noticed that cosmos db comes bundled with another product called jupyter notebook and for those of you",
    "start": "204159",
    "end": "210080"
  },
  {
    "text": "who don't know what jupiter notebook is it looks something like this generally jupyter notebook is a web",
    "start": "210080",
    "end": "215760"
  },
  {
    "text": "application that lets you represent your data using code and cosmos db users use these jupyter notebooks in order to",
    "start": "215760",
    "end": "222239"
  },
  {
    "text": "explore and analyze their data because we were already familiar with",
    "start": "222239",
    "end": "227280"
  },
  {
    "start": "227000",
    "end": "227000"
  },
  {
    "text": "jupiter notebook we knew that it lets its users execute arbitrary code in different programming languages and this",
    "start": "227280",
    "end": "233360"
  },
  {
    "text": "raised multiple questions for us like where is this code actually running and who owns the machine that this codes",
    "start": "233360",
    "end": "239040"
  },
  {
    "text": "runs on maybe this machine is shared across users or it may be able to access",
    "start": "239040",
    "end": "244239"
  },
  {
    "text": "some interesting resources so let's talk about the first bug that we found in the service",
    "start": "244239",
    "end": "251680"
  },
  {
    "text": "we started digging into the jupiter notebook feature and we quickly found out that we are actually running inside",
    "start": "251680",
    "end": "256799"
  },
  {
    "start": "253000",
    "end": "253000"
  },
  {
    "text": "the docker container using a low privileged user named cosmos user and you can see in that picture that it has",
    "start": "256799",
    "end": "262320"
  },
  {
    "text": "the uad of 9000 and gid of 9000 now this service even offers a more",
    "start": "262320",
    "end": "267600"
  },
  {
    "text": "comfortable way for executing code in the form of an embedded web terminal and you can see that unfortunately we",
    "start": "267600",
    "end": "274320"
  },
  {
    "text": "are still running as the slow privileged user there now we did perform some basic recon",
    "start": "274320",
    "end": "279520"
  },
  {
    "text": "using this user but there were still a lot of things that we wanted to access but couldn't and this got us wondering",
    "start": "279520",
    "end": "286639"
  },
  {
    "text": "how hard would it actually be to obtain wood privileges on this machine",
    "start": "286639",
    "end": "291759"
  },
  {
    "text": "so after clicking on enough in buttons in the web interface we actually found a way to elevate our",
    "start": "291759",
    "end": "297840"
  },
  {
    "text": "privileges to roots turns out that all we had to do in order to obtain good privileges was to simply",
    "start": "297840",
    "end": "303520"
  },
  {
    "text": "switch the programming language from python 3 the default to csharp and any",
    "start": "303520",
    "end": "308720"
  },
  {
    "text": "code that is executed via the cshop notebook actually runs without privileges now this has an explanation",
    "start": "308720",
    "end": "315919"
  },
  {
    "text": "in the backend every programming language has its own host process and while the host process for the python 3",
    "start": "315919",
    "end": "322320"
  },
  {
    "text": "programming language runs with the expected cosmos user the host process for the seashore",
    "start": "322320",
    "end": "327919"
  },
  {
    "text": "programming language specifically runs with good privileges and we can abuse this feature by executing this local privilege",
    "start": "327919",
    "end": "334880"
  },
  {
    "text": "escalation payload which edits the atc password file and append an entry for the root number two user which will have",
    "start": "334880",
    "end": "341680"
  },
  {
    "text": "the uid and jd of zero effectively granting us what privileges inside this container",
    "start": "341680",
    "end": "347840"
  },
  {
    "text": "okay so let's see this bag in action",
    "start": "347840",
    "end": "353160"
  },
  {
    "text": "okay so what you can now see on screen is me setting up a jupiter notebook and executing the id command in the in the",
    "start": "358479",
    "end": "365600"
  },
  {
    "text": "embedded web terminal and you can see that we are running as cosmos user i will also execute the id command via",
    "start": "365600",
    "end": "372319"
  },
  {
    "text": "the python 3 programming language and you can see that we are still running as this cosmos user",
    "start": "372319",
    "end": "380759"
  },
  {
    "text": "and all we have to do in order to elevate our privileges to root is to simply click on this menu switch the",
    "start": "382639",
    "end": "388240"
  },
  {
    "text": "programming language to c help and any code that will be executed in this context will actually run without",
    "start": "388240",
    "end": "394160"
  },
  {
    "text": "privileges so we paste our local privilege escalation payload execute it",
    "start": "394160",
    "end": "399520"
  },
  {
    "text": "and now we can return back to the embedded web terminal in order to obtain our privileges by simply switching to",
    "start": "399520",
    "end": "405759"
  },
  {
    "text": "the root number two user so let's do just that",
    "start": "405759",
    "end": "410960"
  },
  {
    "text": "and we have what privileges inside our container",
    "start": "413280",
    "end": "417440"
  },
  {
    "text": "okay so now that we are done with bag number one let's continue to the next bug",
    "start": "418639",
    "end": "425199"
  },
  {
    "text": "since we are now having wood privileges inside this container this means that we can perform a more extensive recon and",
    "start": "425199",
    "end": "431759"
  },
  {
    "start": "427000",
    "end": "427000"
  },
  {
    "text": "try to answer some of our unanswered questions from earlier so one of the comments that we issued",
    "start": "431759",
    "end": "436800"
  },
  {
    "text": "was the iptables.nvl command in order to view the local firewall rules configured on this machine which may indicate with",
    "start": "436800",
    "end": "443520"
  },
  {
    "text": "which network resources we can access and which we shouldn't be able to and you can see that there are a couple of interesting rules here so let's talk",
    "start": "443520",
    "end": "450319"
  },
  {
    "text": "about them the first tool is this wall which should prevent us from accessing the imds also",
    "start": "450319",
    "end": "456479"
  },
  {
    "text": "known as the metadata service now for those of you who are not familiar with the mds it is actually a service that",
    "start": "456479",
    "end": "462160"
  },
  {
    "text": "you can query using http in order to retrieve metadata information regarding your vm instance",
    "start": "462160",
    "end": "467520"
  },
  {
    "text": "and for some reason the developers of the jupyter notebook feature do not actually want us to access it",
    "start": "467520",
    "end": "474160"
  },
  {
    "text": "another interesting goal here is that is this tool that prevents us from accessing the 10.06",
    "start": "474160",
    "end": "480479"
  },
  {
    "text": "now at this point of this research we have no idea what this summit is all we know about it is that this is a subnet",
    "start": "480479",
    "end": "486560"
  },
  {
    "text": "of internal ip addresses and that we shouldn't be able to access it finally there is this rule that",
    "start": "486560",
    "end": "493440"
  },
  {
    "text": "prevents us from accessing this very specific ip address now same as before we have no idea what this ip address",
    "start": "493440",
    "end": "499680"
  },
  {
    "text": "actually is all we know about it is that the developers do not want us to access it but the good thing is is that these are",
    "start": "499680",
    "end": "506720"
  },
  {
    "text": "local firewall rules that were configured using ip tables and we are now running with what privileges this",
    "start": "506720",
    "end": "512320"
  },
  {
    "text": "means that there is nothing that prevents us from actually removing these rules and accessing these network",
    "start": "512320",
    "end": "517518"
  },
  {
    "text": "resources and as you can see by simply issuing iptables-f we completely remove",
    "start": "517519",
    "end": "522560"
  },
  {
    "text": "these rules and now we can explore these resources now as an attacker this makes me quite",
    "start": "522560",
    "end": "527680"
  },
  {
    "text": "excited we just removed the one thing that prevented us from accessing network resources that we know for a fact that",
    "start": "527680",
    "end": "534080"
  },
  {
    "text": "the developers of the service explicitly tried to forbid us from accessing",
    "start": "534080",
    "end": "539440"
  },
  {
    "text": "and in our opinion these rules should be enforced outside of the container where a privileged attacker",
    "start": "539440",
    "end": "546080"
  },
  {
    "text": "can't even touch them or remove them okay so now that we remove the local",
    "start": "546080",
    "end": "552080"
  },
  {
    "start": "551000",
    "end": "551000"
  },
  {
    "text": "firewall rules this means that we can access the mds and given we are not supposed to access the mdf we want to",
    "start": "552080",
    "end": "557839"
  },
  {
    "text": "see why so this is a squaring the mds and the response that we got back and there are",
    "start": "557839",
    "end": "563440"
  },
  {
    "text": "a couple of interesting things here first our azure environment is set to azure public cloud and the subscription",
    "start": "563440",
    "end": "569200"
  },
  {
    "text": "id is not a subscription id that we own now this may indicate that we are running in some sort of a shared",
    "start": "569200",
    "end": "574880"
  },
  {
    "text": "environment and that we are not the one paying for this virtual machine another interesting thing here is that",
    "start": "574880",
    "end": "581519"
  },
  {
    "text": "our os type is set to windows now this is strange we are obviously running linux commands in a linux terminal so",
    "start": "581519",
    "end": "588959"
  },
  {
    "text": "why is it set to windows after digging a bit more into our environment we actually concluded that",
    "start": "588959",
    "end": "594560"
  },
  {
    "text": "we are acquiring our host machine metadata service and not the metadata service of our container and that our",
    "start": "594560",
    "end": "600720"
  },
  {
    "text": "host machine is actually a windows virtual machine hosting this container using hyperlink",
    "start": "600720",
    "end": "606959"
  },
  {
    "text": "the last thing that you cannot see in this picture is that according to the mds we also have an ip address in the",
    "start": "607040",
    "end": "612519"
  },
  {
    "text": "10.06 in subnet and just to remind you this is the same subnet we shouldn't be",
    "start": "612519",
    "end": "617600"
  },
  {
    "text": "able to access according to the local firewall rules we just removed",
    "start": "617600",
    "end": "622640"
  },
  {
    "text": "okay so let's quickly recap everything that we achieved so far first we set up a jupyter notebook",
    "start": "623440",
    "end": "628640"
  },
  {
    "text": "container for our cosmos db account and we jailbreak it by obtaining good privileges in it and removing the local",
    "start": "628640",
    "end": "634399"
  },
  {
    "text": "firewalls then we query the mds and learn two things the first thing",
    "start": "634399",
    "end": "640880"
  },
  {
    "text": "the first thing is that this virtual machine is also the natural in in most likely in some sort of a shared",
    "start": "641040",
    "end": "646720"
  },
  {
    "text": "environment and the other thing is that our host machine is a windows virtual machine and we can query its resources",
    "start": "646720",
    "end": "654079"
  },
  {
    "text": "i will now hand it over to neil to continue explaining about our recon environment thank you",
    "start": "654079",
    "end": "660399"
  },
  {
    "text": "let's continue on our network icon if we'll have another look at the machine iptv rules there's",
    "start": "660399",
    "end": "666720"
  },
  {
    "start": "663000",
    "end": "663000"
  },
  {
    "text": "that mysterious ip address what is this ip address when we searched this ipr on google we",
    "start": "666720",
    "end": "672800"
  },
  {
    "text": "found this msdn article according to this article this is a virtual api bus that exists on every",
    "start": "672800",
    "end": "679360"
  },
  {
    "text": "azure virtual machine and it has a name the wire server so what does the microsoft documentation",
    "start": "679360",
    "end": "685760"
  },
  {
    "text": "say about this mysterious endpoint called the wild server first we know it's a server that is",
    "start": "685760",
    "end": "691200"
  },
  {
    "text": "accessible in http and that this server manages the extensions of every azure virtual",
    "start": "691200",
    "end": "696800"
  },
  {
    "text": "machine extensions are just software applications that azure manages they can be first-party software like",
    "start": "696800",
    "end": "703279"
  },
  {
    "text": "azure's logo analytics agent or third-party software that azure supports for example data logo",
    "start": "703279",
    "end": "710160"
  },
  {
    "text": "whenever a customer installs an extension via the azure portal the wire server instructs the virtual machine's",
    "start": "710160",
    "end": "716399"
  },
  {
    "text": "agent to install the extension supplying the appropriate configuration that configuration may even include",
    "start": "716399",
    "end": "723200"
  },
  {
    "text": "sensitive information and any information we can extract from the wire server will help us to better understand",
    "start": "723200",
    "end": "729440"
  },
  {
    "text": "the underlying virtual machine and the environment we are running in but after looking at all of the",
    "start": "729440",
    "end": "735519"
  },
  {
    "text": "documentation that microsoft has to offer about the wire server what is most evident is that this server has little",
    "start": "735519",
    "end": "742160"
  },
  {
    "text": "to no documentation but there's a silver lining the wire server has two clients designed",
    "start": "742160",
    "end": "748800"
  },
  {
    "text": "to install and configure extensions based on the information fetched from this server",
    "start": "748800",
    "end": "754079"
  },
  {
    "text": "the linux and windows virtual machine agents the linux agent also known as the",
    "start": "754079",
    "end": "760000"
  },
  {
    "text": "wa agent or the wa linux agent is an open source project hosted on",
    "start": "760000",
    "end": "765760"
  },
  {
    "text": "github maybe by reading the source code of the linux agent will be able to learn something about the web server",
    "start": "765760",
    "end": "771920"
  },
  {
    "text": "functionalities it is also worth mentioning that some of our server research is based on the work",
    "start": "771920",
    "end": "778320"
  },
  {
    "text": "of another security researcher paul litvak from intizo paul already conducted in high quality",
    "start": "778320",
    "end": "784720"
  },
  {
    "text": "research regarding this topic and detailed it in a great blog post so to recap we can think about about the",
    "start": "784720",
    "end": "791680"
  },
  {
    "text": "wire server as the backend of the wa agent the linux virtual machine agent it",
    "start": "791680",
    "end": "796880"
  },
  {
    "text": "is used to supply the agent all the information it need in order to function properly",
    "start": "796880",
    "end": "802160"
  },
  {
    "text": "so with that in mind let's examine how the wa agent gets its extension information from the wire server",
    "start": "802160",
    "end": "810160"
  },
  {
    "text": "before the agent can retrieve any configurations let alone extension configuration it must first fetch",
    "start": "810240",
    "end": "816800"
  },
  {
    "start": "812000",
    "end": "812000"
  },
  {
    "text": "something called the goal state the goal state is among other things is a phonebook of endpoints that the agents",
    "start": "816800",
    "end": "823839"
  },
  {
    "text": "need to contact in order to fetch different configuration settings note that you can download any azure",
    "start": "823839",
    "end": "829920"
  },
  {
    "text": "virtual machine goal state by executing the following crl command and get all the configuration endpoints",
    "start": "829920",
    "end": "836480"
  },
  {
    "text": "specific for your azure virtual machine now here's the response we got executing",
    "start": "836480",
    "end": "841920"
  },
  {
    "text": "the crgl command on our azure linux virtual machine we set up for testing",
    "start": "841920",
    "end": "847120"
  },
  {
    "text": "here you can see that it contains a bunch of different urls but the url we care about is the extension",
    "start": "847120",
    "end": "853040"
  },
  {
    "text": "configuration url that contains all the configuration settings of the virtual machine's extension",
    "start": "853040",
    "end": "860079"
  },
  {
    "text": "now we will initially forbidden from accessing the wire server because of the local file rules but now we can start",
    "start": "860079",
    "end": "866720"
  },
  {
    "text": "fetching information let's try to execute the exact same crl command on the jupiter notebook",
    "start": "866720",
    "end": "871839"
  },
  {
    "text": "container and get back the underlying virtual machine's goal state including its extension configuration",
    "start": "871839",
    "end": "877839"
  },
  {
    "text": "url now after getting back the extension configuration url let's try to access it",
    "start": "877839",
    "end": "884000"
  },
  {
    "text": "as well okay so here's an example of an",
    "start": "884000",
    "end": "890000"
  },
  {
    "start": "889000",
    "end": "889000"
  },
  {
    "text": "extensions configuration from a linux based virtual machine specifically the linux diagnostic",
    "start": "890000",
    "end": "895760"
  },
  {
    "text": "extension each extension has two main configuration parts thus the public settings section which",
    "start": "895760",
    "end": "902320"
  },
  {
    "text": "is now highlighted in red which contains public data without any sensitive information",
    "start": "902320",
    "end": "908320"
  },
  {
    "text": "and there's also a protected settings section which is encrypted and therefore we suspect it might contain sensitive",
    "start": "908320",
    "end": "914639"
  },
  {
    "text": "information shown on screen is the linux diagnostic base64 encoded encrypted protected",
    "start": "914639",
    "end": "921279"
  },
  {
    "text": "settings now let's try to get the underlying azure virtual machine",
    "start": "921279",
    "end": "927600"
  },
  {
    "text": "extension information remember that although we're running inside of a linux environment",
    "start": "927600",
    "end": "935279"
  },
  {
    "text": "the the extension information we are pulling of the oi server is of the host windows virtual machine",
    "start": "935279",
    "end": "940959"
  },
  {
    "text": "and here you can see that our host windows virtual machine has the dsms for windows extension",
    "start": "940959",
    "end": "946160"
  },
  {
    "text": "which also has a protected settings section and as i mentioned before the protected",
    "start": "946160",
    "end": "951440"
  },
  {
    "text": "settings are encrypted and therefore we suspect that it might contain sensitive information so we decided to try and",
    "start": "951440",
    "end": "958079"
  },
  {
    "text": "equip them let's see how the agent itself decrypts the protected settings",
    "start": "958079",
    "end": "965759"
  },
  {
    "text": "where does the agent get the decryption key form well similar to the extension configuration endpoint there is a",
    "start": "966079",
    "end": "972000"
  },
  {
    "start": "968000",
    "end": "968000"
  },
  {
    "text": "certificate endpoint that the agent needs to contact in order to fetch the keys required for decryption",
    "start": "972000",
    "end": "978399"
  },
  {
    "text": "this endpoint also can be found in the machine's goal state we fetched earlier",
    "start": "978399",
    "end": "983519"
  },
  {
    "text": "now these certificates are the golden key used to decrypt all sensitive protected",
    "start": "983519",
    "end": "988560"
  },
  {
    "text": "settings making them themselves sensitive information you will transfer them in unencrypted",
    "start": "988560",
    "end": "994320"
  },
  {
    "text": "communication right the way the agent protects these secrets while still using http is by encrypting",
    "start": "994320",
    "end": "1002000"
  },
  {
    "text": "them using a self-signed certificate it generates and supplies this certificate is not validated by the",
    "start": "1002000",
    "end": "1009040"
  },
  {
    "text": "server meaning we can generate our own self-signed certificate and retrieve the certificate at the encryption keys from",
    "start": "1009040",
    "end": "1015279"
  },
  {
    "text": "the certificate's endpoint this can be done without relying on the certificate that the agent originally",
    "start": "1015279",
    "end": "1021600"
  },
  {
    "text": "generated the certificate is passed in the xms",
    "start": "1021600",
    "end": "1026640"
  },
  {
    "text": "guest agent public x 509 cell which is a mouthful of a header and here's the ceo command with that",
    "start": "1026640",
    "end": "1032959"
  },
  {
    "text": "notorious setter that can be used in order to fetch the encryption keys from the certificate endpoint",
    "start": "1032959",
    "end": "1039120"
  },
  {
    "text": "now here's the response we got executing the crl command on our azure linux test virtual machine",
    "start": "1039120",
    "end": "1045280"
  },
  {
    "text": "and here's the response from the jupiter noble container and wait there is subtle difference can you spot",
    "start": "1045280",
    "end": "1051919"
  },
  {
    "text": "it the format is different on our azure linux virtual machine what we got back",
    "start": "1051919",
    "end": "1057520"
  },
  {
    "text": "is an encrypted pk cs7 blob which we encrypted and decoded using a handful",
    "start": "1057520",
    "end": "1062720"
  },
  {
    "text": "open ssl commands but using the exact same open ssl commands on the certificates bond",
    "start": "1062720",
    "end": "1067840"
  },
  {
    "text": "package got us nothing so what is the certificate's word package format anyways",
    "start": "1067840",
    "end": "1074480"
  },
  {
    "text": "the first thing we did researching the certificates bond package format was to consult google",
    "start": "1074480",
    "end": "1079760"
  },
  {
    "start": "1076000",
    "end": "1076000"
  },
  {
    "text": "we didn't have any answers and then we thought okay maybe somewhat microsoft will have the answer so we",
    "start": "1079760",
    "end": "1085840"
  },
  {
    "text": "consulted bingo we didn't know the answer either but then we thought",
    "start": "1085840",
    "end": "1091679"
  },
  {
    "text": "the wa agent is the client of the wire server it must have some kind of reference to this mysterious format",
    "start": "1091679",
    "end": "1098559"
  },
  {
    "text": "right well wrong zero references",
    "start": "1098559",
    "end": "1103760"
  },
  {
    "text": "but then we remembered that according to the imds although we are running inside of a linux environment our host machine",
    "start": "1103760",
    "end": "1110000"
  },
  {
    "text": "is actually a windows virtual machine meaning that all the responses that we get back from the web server are meant",
    "start": "1110000",
    "end": "1116000"
  },
  {
    "text": "to be treated by the windows agent not the linux one unlike the wa agent the windows agent",
    "start": "1116000",
    "end": "1122960"
  },
  {
    "text": "also known as the windows azure guest agent is not open source but fortunately it's written in c-sharp",
    "start": "1122960",
    "end": "1130000"
  },
  {
    "text": "meaning it can be decompiled to something that resembles source code fairly easily",
    "start": "1130000",
    "end": "1135280"
  },
  {
    "text": "this can be done using a variety of the compilers we choose ielts pie",
    "start": "1135280",
    "end": "1141520"
  },
  {
    "text": "and finally here's the first reference we've seen to the certificate's bond package format",
    "start": "1141520",
    "end": "1146880"
  },
  {
    "text": "along with its handling code shown on screen is a small",
    "start": "1146880",
    "end": "1152880"
  },
  {
    "text": "c sharp script we wrote to mimic the agent's certificate's bond package decoding",
    "start": "1152880",
    "end": "1158799"
  },
  {
    "text": "now when we executed the script we expected to get just one certificate with corresponding private key",
    "start": "1158799",
    "end": "1164880"
  },
  {
    "text": "so you can imagine a reaction when in reality we got back 25 certificates with",
    "start": "1164880",
    "end": "1170559"
  },
  {
    "text": "their corresponding private keys some with very intriguing names keep in mind these three as we'll",
    "start": "1170559",
    "end": "1176240"
  },
  {
    "text": "encounter them later on in our journey it is also worth mentioning that one of",
    "start": "1176240",
    "end": "1181600"
  },
  {
    "text": "the certificates and private key we got is for the astrix notebook cosmos azure com domain",
    "start": "1181600",
    "end": "1188240"
  },
  {
    "text": "this alone already lets us to intercept encrypted ssl traffic to the jupiter notebook servers",
    "start": "1188240",
    "end": "1195039"
  },
  {
    "text": "this is the this is a signed certificate by microsoft that we have a private key for after the wire server simply dumped",
    "start": "1195039",
    "end": "1201919"
  },
  {
    "text": "it on us at this point we knew we were onto something",
    "start": "1201919",
    "end": "1207840"
  },
  {
    "text": "so we got a bunch of certificates we probably shouldn't have which made us wonder",
    "start": "1208799",
    "end": "1214480"
  },
  {
    "text": "what's the legitimate purpose for these certificates at this point we chose to have another",
    "start": "1214480",
    "end": "1219600"
  },
  {
    "text": "look at the extension configuration we got back from the wireless server",
    "start": "1219600",
    "end": "1224480"
  },
  {
    "text": "shown on screen is one of the entries in the extension configuration specifically the service public node",
    "start": "1225840",
    "end": "1231679"
  },
  {
    "text": "extension the service public node extension had some very interesting information in size of its public settings",
    "start": "1231679",
    "end": "1239039"
  },
  {
    "text": "as you can see it has an entry called cluster endpoint which contained some kind of url",
    "start": "1239039",
    "end": "1244799"
  },
  {
    "text": "and in a certificate entry that contained a certificate a certificate that we happen to have",
    "start": "1244799",
    "end": "1250640"
  },
  {
    "text": "the fabric west us-1 certificate when we access the cluster endpoint via",
    "start": "1250640",
    "end": "1257360"
  },
  {
    "start": "1256000",
    "end": "1256000"
  },
  {
    "text": "google chrome an authentication prompt popped up requesting for an authentication certificate",
    "start": "1257360",
    "end": "1262799"
  },
  {
    "text": "our best bet was to supply the certificate mentioned in the extension configuration the fabric rescue s1",
    "start": "1262799",
    "end": "1268799"
  },
  {
    "text": "certificate we obtained earlier from the wire server",
    "start": "1268799",
    "end": "1274159"
  },
  {
    "text": "so we had our fingers crossed and bam what we got back is a huge xml",
    "start": "1274159",
    "end": "1279679"
  },
  {
    "text": "manifest file containing bunch of cluster information let's highlight some interesting points",
    "start": "1279679",
    "end": "1285280"
  },
  {
    "text": "first there is another reference to the fabric virtus one certificate which made us",
    "start": "1285280",
    "end": "1290799"
  },
  {
    "text": "believe that this certificate does have some kind of significance in the context of a cluster",
    "start": "1290799",
    "end": "1297919"
  },
  {
    "text": "and it also mentioned in https port port 19080",
    "start": "1297919",
    "end": "1303760"
  },
  {
    "text": "another reference to that strange keyword service fabric what is service fabric",
    "start": "1303760",
    "end": "1311120"
  },
  {
    "text": "at this point of our research we had no idea what service fabric actually is so naturally we googled it",
    "start": "1311120",
    "end": "1317679"
  },
  {
    "text": "and then we encountered this msdn article according to this article service fabric is a container",
    "start": "1317679",
    "end": "1323840"
  },
  {
    "text": "orchestration solution but from this point until the end of our research we treated it as",
    "start": "1323840",
    "end": "1330559"
  },
  {
    "text": "kubernetes although this is not the perfect comparison it was good enough for our purposes",
    "start": "1330559",
    "end": "1337600"
  },
  {
    "text": "so the manifest file mentions port 9080 which according to the documentation is",
    "start": "1337600",
    "end": "1342640"
  },
  {
    "text": "a service public management port and it also mentions a few ip addresses in the 10.0016 subnet",
    "start": "1342640",
    "end": "1350080"
  },
  {
    "text": "and according to the ibs we're actually inside of the 10.0.0 subnet",
    "start": "1350080",
    "end": "1355200"
  },
  {
    "text": "and after flashing the ipad table rules we can access other endpoints inside of our subnet",
    "start": "1355200",
    "end": "1361840"
  },
  {
    "text": "a portscan showed that some of the endpoints in our subnet are listening in port 19080",
    "start": "1362240",
    "end": "1367360"
  },
  {
    "text": "the service fabric management port we can use the service fabric linux command line tool sfctl to try and",
    "start": "1367360",
    "end": "1374240"
  },
  {
    "text": "connect these management ports the authentication process requires a certificate",
    "start": "1374240",
    "end": "1379760"
  },
  {
    "text": "and there seems to be that one certificate that has all the answers the fabric west us1 certificate so we",
    "start": "1379760",
    "end": "1385760"
  },
  {
    "text": "decided to try it here are the two commands used to authenticate and list all the application instances in our cluster",
    "start": "1385760",
    "end": "1393679"
  },
  {
    "text": "we issued the last comment and wondered will it work well it worked",
    "start": "1393679",
    "end": "1400640"
  },
  {
    "text": "the application list command yielded more than 500 cosmos db ground in a regional cluster and for each cosmos db",
    "start": "1400640",
    "end": "1407200"
  },
  {
    "start": "1404000",
    "end": "1404000"
  },
  {
    "text": "account we got a bunch of encrypted authentication tokens but as i just said",
    "start": "1407200",
    "end": "1412480"
  },
  {
    "text": "all these all of these authentication tokens are encrypted they're useless for us",
    "start": "1412480",
    "end": "1418159"
  },
  {
    "text": "no endpoint will receive my encrypted authentication token but let me remind you that to this point",
    "start": "1418159",
    "end": "1424640"
  },
  {
    "text": "we only used a fraction of the certificates we obtained from the wire server so maybe one of these certificates are",
    "start": "1424640",
    "end": "1430960"
  },
  {
    "text": "the one used to equip the authentication tokens so after brute forcing each and every",
    "start": "1430960",
    "end": "1436080"
  },
  {
    "text": "one of the certificate with each and every one of the authentication tokens we feel a little dumb now knowing that the encryption",
    "start": "1436080",
    "end": "1442159"
  },
  {
    "text": "certificate had a pretty indicative name the fabric secret certificate was just the one certificate used to encrypt all",
    "start": "1442159",
    "end": "1449520"
  },
  {
    "text": "of the authentication talkers in our cluster just one certificate to encrypt all cost",
    "start": "1449520",
    "end": "1454720"
  },
  {
    "text": "tenant sensitive authentication tokens decrypting the cosmos db account",
    "start": "1454720",
    "end": "1459840"
  },
  {
    "text": "key resulted in us gaining the primary key for all cosmos db accounts in our cluster",
    "start": "1459840",
    "end": "1466000"
  },
  {
    "text": "this key is equivalent to the root password for the database allowing for full unrestricted data",
    "start": "1466000",
    "end": "1471840"
  },
  {
    "text": "access and manipulation i will now hand over the presentation back to sagi to domestic you the",
    "start": "1471840",
    "end": "1477440"
  },
  {
    "text": "complete express chain thank you neil so",
    "start": "1477440",
    "end": "1483360"
  },
  {
    "text": "unfortunately we cannot show you a live demo of this exploit because this vulnerability is now patched but luckily",
    "start": "1483360",
    "end": "1489760"
  },
  {
    "text": "we're smart enough to record one in advance so let's view it",
    "start": "1489760",
    "end": "1495320"
  },
  {
    "text": "okay so what you can now see on screen is that the screen is splitted into two parts the right part is our research",
    "start": "1501679",
    "end": "1507120"
  },
  {
    "text": "account which we will perform the attack from and the left part is the victim cosmos db count this is the cosmos db",
    "start": "1507120",
    "end": "1514000"
  },
  {
    "text": "account that we want to take over you can see that these two accounts have nothing in common as they belong to two",
    "start": "1514000",
    "end": "1520559"
  },
  {
    "text": "different organizations and we will also inspect the access control rules to verify that the",
    "start": "1520559",
    "end": "1526240"
  },
  {
    "text": "research account does not have any special privileges over the victim account",
    "start": "1526240",
    "end": "1531840"
  },
  {
    "text": "okay so what what we have to do now is to set up a jupyter notebook container and jailbreak it and",
    "start": "1531840",
    "end": "1537679"
  },
  {
    "text": "we will we will continue from the part where we already have wood privileges inside this container because we've already seen it",
    "start": "1537679",
    "end": "1543360"
  },
  {
    "text": "so what we have to do now is to remove the local firewall rules and this can simply be done by executing ib tables.f",
    "start": "1543360",
    "end": "1551120"
  },
  {
    "text": "so let's do just that and at this point with the network restriction gun we can actually access",
    "start": "1551120",
    "end": "1557760"
  },
  {
    "text": "the local service fabric cluster so we will execute our exploit script and you can see that our export script",
    "start": "1557760",
    "end": "1564480"
  },
  {
    "text": "requires the name of the account that we want to take over i want to emphasize that this is not a requirement by the vulnerability this is",
    "start": "1564480",
    "end": "1571520"
  },
  {
    "text": "actually just a precaution that we took while developing this exploit in order to make sure we do not access any data",
    "start": "1571520",
    "end": "1577039"
  },
  {
    "text": "that is not our own even by mistake the vulnerability itself actually lets you list all of the accounts in your cluster",
    "start": "1577039",
    "end": "1583279"
  },
  {
    "text": "and you can simply pick and choose which account you want to take over so once the exploit finishes running you",
    "start": "1583279",
    "end": "1589520"
  },
  {
    "text": "can see that it dumps on you the plaintext key of the cosmos db account and if we'll compare it with the key",
    "start": "1589520",
    "end": "1595679"
  },
  {
    "text": "that you can find in the management panel you can see that they are identical",
    "start": "1595679",
    "end": "1601360"
  },
  {
    "text": "okay so let's quickly recap everything that happens behind the scene in this video first we set up a jupyter notebook",
    "start": "1603840",
    "end": "1609600"
  },
  {
    "start": "1606000",
    "end": "1606000"
  },
  {
    "text": "container and jailbreak it by obtaining good privileges on it and removing the network restrictions",
    "start": "1609600",
    "end": "1615200"
  },
  {
    "text": "then we query the wire server in order to obtain two main things the first thing is the extension config which we",
    "start": "1615200",
    "end": "1620960"
  },
  {
    "text": "can extract the cluster manifest from and the second thing is the certificate's endpoint which we can",
    "start": "1620960",
    "end": "1626240"
  },
  {
    "text": "extract a bunch of certificates from one is used to connect to the local service hobby cluster and the other one is used",
    "start": "1626240",
    "end": "1632799"
  },
  {
    "text": "to decrypt the encrypted authentication tokens we get from the local service public cluster",
    "start": "1632799",
    "end": "1638559"
  },
  {
    "text": "so you would think that we'll be done by now because we already achieved so much but we didn't stop here",
    "start": "1638559",
    "end": "1645360"
  },
  {
    "text": "we only used a fraction of the information that the wire server dumped on us so let's see what else we can find",
    "start": "1645360",
    "end": "1651039"
  },
  {
    "text": "we had another look on the extension config and the cluster manifest and this is a snippet from the cluster manifest",
    "start": "1651039",
    "end": "1657039"
  },
  {
    "text": "and you can see that we have a couple of connection strings here to some azure storage accounts but this is your",
    "start": "1657039",
    "end": "1662320"
  },
  {
    "text": "storage account these connection strings still require some sort of a key so we were looking for this key and we",
    "start": "1662320",
    "end": "1668399"
  },
  {
    "text": "actually ended up finding it inside the protected settings of one of our extensions and these are the open ssl",
    "start": "1668399",
    "end": "1674000"
  },
  {
    "text": "commands that we used in order to decrypt these protected settings and as you can see here is the plaintext",
    "start": "1674000",
    "end": "1679279"
  },
  {
    "text": "key so we now have four connections links to different azure storage accounts and",
    "start": "1679279",
    "end": "1685120"
  },
  {
    "text": "these are the accounts now since these these are usual storage accounts it only makes sense to explore them using azure",
    "start": "1685120",
    "end": "1691360"
  },
  {
    "text": "storage explorer so let's do just that this is what the storage explorer interface looks like when you connect",
    "start": "1691360",
    "end": "1697520"
  },
  {
    "text": "using these connection strings and generally we found there like hundreds",
    "start": "1697520",
    "end": "1703200"
  },
  {
    "text": "of gigabytes of metadata regarding customer environments but the most interesting interesting things that we",
    "start": "1703200",
    "end": "1709600"
  },
  {
    "text": "found there was actually a log file that indicated that the ip addresses in the 10. the total slash 6 in subnet may have",
    "start": "1709600",
    "end": "1716960"
  },
  {
    "text": "an external interface a public ip address that you can access from the internet",
    "start": "1716960",
    "end": "1722080"
  },
  {
    "text": "now we thought this might be reasonable perhaps microsoft had their design where this makes sense",
    "start": "1722080",
    "end": "1727840"
  },
  {
    "text": "but in any case access to this ip address must be allowed listed right",
    "start": "1727840",
    "end": "1733600"
  },
  {
    "text": "i mean there should be absolutely no reason that i will be able to access this ip address for my office right",
    "start": "1733600",
    "end": "1740799"
  },
  {
    "text": "well wrong turns out that we were able to authenticate to this public ip address",
    "start": "1740799",
    "end": "1746320"
  },
  {
    "text": "from our office over the internet and view the underlying service fabric management panel and this is what it",
    "start": "1746320",
    "end": "1751919"
  },
  {
    "text": "looks like now just to make sure we all understand this is some internal azure",
    "start": "1751919",
    "end": "1758000"
  },
  {
    "text": "infrastructure that we can access from our office over the internet",
    "start": "1758000",
    "end": "1763278"
  },
  {
    "text": "at this point we're thinking this can be the only end point that is accessible from the internet and that",
    "start": "1763440",
    "end": "1768720"
  },
  {
    "text": "there must be more endpoints like this so we decided to scan the internet for the service having management port which",
    "start": "1768720",
    "end": "1774000"
  },
  {
    "text": "is 90 080 and see how many service public instances would let us authenticate using our favorite",
    "start": "1774000",
    "end": "1780080"
  },
  {
    "text": "certificate the fabric.west us-1 certificate and to our surprise over 100 service",
    "start": "1780080",
    "end": "1786399"
  },
  {
    "text": "fabric actually let us authenticate using death certificate and even though we used the west us-1 region certificate",
    "start": "1786399",
    "end": "1793600"
  },
  {
    "text": "we actually managed to authenticate to different regions and even different services",
    "start": "1793600",
    "end": "1798880"
  },
  {
    "text": "now at this point we think that service fabric is the core component inside azure and is used to do a lot of things",
    "start": "1798880",
    "end": "1805039"
  },
  {
    "text": "behind the scenes i will now hand it over back to nil to summarize our findings thank you",
    "start": "1805039",
    "end": "1812320"
  },
  {
    "text": "let's talk about what we found and what is the impact we managed to retrieve multiple kinds of authentication tokens",
    "start": "1812640",
    "end": "1818480"
  },
  {
    "text": "that allows us to access and manipulate customer data in multiple access vectors the first one is the cosmos db account",
    "start": "1818480",
    "end": "1825200"
  },
  {
    "text": "key which after decryption is identical to the primary key of the cosmos db account",
    "start": "1825200",
    "end": "1831279"
  },
  {
    "text": "as you can see this is the key from our exploit output which is identical to the primary key found in the management",
    "start": "1831279",
    "end": "1837440"
  },
  {
    "text": "panel and as i said before this key is equivalent to the root password for",
    "start": "1837440",
    "end": "1842640"
  },
  {
    "text": "database another authentication token that we have is the notebook of token",
    "start": "1842640",
    "end": "1848480"
  },
  {
    "text": "we can use this token in order to gain arbitrary code execution on the jupyter notebook container",
    "start": "1848480",
    "end": "1854159"
  },
  {
    "text": "and after using this access we can extract the database secrets from there",
    "start": "1854159",
    "end": "1859679"
  },
  {
    "text": "the as you can see this is how we executed the id command on the jupiter notebook container using that token",
    "start": "1859679",
    "end": "1867519"
  },
  {
    "text": "the last token that we'll talk about is the notebook storage account key we can use this token in order to",
    "start": "1867760",
    "end": "1872960"
  },
  {
    "text": "manipulate existing saved notebooks potentially making the victim executing queries on the database without even",
    "start": "1872960",
    "end": "1879360"
  },
  {
    "text": "knowing we confirmed that all of the authentication tokens can be used in",
    "start": "1879360",
    "end": "1884960"
  },
  {
    "text": "order to access the databases of thousands of virtual customers including numerous fortune 500 companies along the",
    "start": "1884960",
    "end": "1892399"
  },
  {
    "text": "way we also received microsoft science certificate that allows us to intercept ssl traffic to the jupiter",
    "start": "1892399",
    "end": "1898799"
  },
  {
    "text": "network servers and we retrieve connection strings for two internal azure storage accounts that",
    "start": "1898799",
    "end": "1905840"
  },
  {
    "text": "may contain customers environment metadata overall we believe it proved in high",
    "start": "1905840",
    "end": "1911440"
  },
  {
    "text": "degree of control over the entire service especially when this access can be maintained without accessing the",
    "start": "1911440",
    "end": "1917279"
  },
  {
    "text": "vulnerable environment but instead from the internet so let's quickly overview the disclosure",
    "start": "1917279",
    "end": "1924880"
  },
  {
    "start": "1924000",
    "end": "1924000"
  },
  {
    "text": "timeline and our work with microsoft on august night we first managed to explore this vulnerability",
    "start": "1924880",
    "end": "1930399"
  },
  {
    "text": "and three days later we already sent the advisory to microsoft we understood that this is a very severe",
    "start": "1930399",
    "end": "1936720"
  },
  {
    "text": "vulnerability and we wanted to let microsoft know as soon as possible two days after that we noticed that",
    "start": "1936720",
    "end": "1943360"
  },
  {
    "text": "microsoft has already mitigated the issue the way microsoft chose to address this issue is by removing the jupyter",
    "start": "1943360",
    "end": "1950000"
  },
  {
    "text": "notebook feature altogether this is an extremely fast patch",
    "start": "1950000",
    "end": "1955760"
  },
  {
    "text": "less than 48 hours after initial report until the jupyter notebook service was disabled to all cosmos db customers",
    "start": "1955760",
    "end": "1963360"
  },
  {
    "text": "two days after that we first held back from microsoft confirming our reported vulnerability and on the same day we",
    "start": "1963360",
    "end": "1969840"
  },
  {
    "text": "started seeing that some of the obtained credentials will obtain during our research things like certificates or",
    "start": "1969840",
    "end": "1975519"
  },
  {
    "text": "passwords are starting to be revoked and a day after that microsoft awarded",
    "start": "1975519",
    "end": "1980799"
  },
  {
    "text": "us with the maximum bounty available for azure forty thousand dollars [Applause]",
    "start": "1980799",
    "end": "1989279"
  },
  {
    "text": "which we plan to donate this is the fastest bounty we've ever seen from microsoft only five days after",
    "start": "1989279",
    "end": "1996240"
  },
  {
    "text": "our initial report which was on a friday on august 23rd we had a great teams meeting with the microsoft team where",
    "start": "1996240",
    "end": "2002960"
  },
  {
    "text": "they can where we discuss mitigations and they confirm to us that there are several thousands of customers that are",
    "start": "2002960",
    "end": "2008159"
  },
  {
    "text": "impacted by this vulnerability and on august 26th microsoft emailed all unbelievably and deniably affected",
    "start": "2008159",
    "end": "2014720"
  },
  {
    "text": "customers instructing them to regenerate their access keys this is unusual in the cloud security",
    "start": "2014720",
    "end": "2020480"
  },
  {
    "text": "world one of the reasons that customers choose cloud solutions is because the security is managed by the vendor but in this",
    "start": "2020480",
    "end": "2027120"
  },
  {
    "text": "case customers have to take manual actions in order to make sure that fully mitigated from this issue",
    "start": "2027120",
    "end": "2033840"
  },
  {
    "text": "and i mentioned that microsoft only emailed undeniably affected customers what do i mean by that",
    "start": "2033840",
    "end": "2039919"
  },
  {
    "text": "microsoft chose to email only customers that had the jupiter notebook feature enabled during a research period which",
    "start": "2039919",
    "end": "2046480"
  },
  {
    "text": "lasted like less than a week and we think that microsoft should have emailed all potentially impacted",
    "start": "2046480",
    "end": "2052560"
  },
  {
    "text": "customers because although this vulnerability is now patched you can never be sure that",
    "start": "2052560",
    "end": "2057599"
  },
  {
    "text": "this vulnerability wasn't exploited prior to our engagement",
    "start": "2057599",
    "end": "2062638"
  },
  {
    "text": "so just a quick ldr of our entire engagement against the cosmos db service we first jailbroke the jupiter noble",
    "start": "2062639",
    "end": "2069040"
  },
  {
    "start": "2065000",
    "end": "2065000"
  },
  {
    "text": "container by elevating our privileges toward and then removing all network restrictions",
    "start": "2069040",
    "end": "2074800"
  },
  {
    "text": "we then use that this unrestricted network access to contact our host machine wire server and obtain 25",
    "start": "2074800",
    "end": "2080638"
  },
  {
    "text": "certificates which we only use a small portion of we then use some of these certificates",
    "start": "2080639",
    "end": "2086398"
  },
  {
    "text": "in order to authenticate to our local service public cluster and list all the cosmos db accounts in our cluster",
    "start": "2086399",
    "end": "2092240"
  },
  {
    "text": "including the credentials we then proceeded to use the same certificates in order to connect to",
    "start": "2092240",
    "end": "2098480"
  },
  {
    "text": "other cosmos db related service fabrics over the internet",
    "start": "2098480",
    "end": "2103520"
  },
  {
    "text": "and after less than a week of intensive research and with this kind of level of access we felt like we had to report our",
    "start": "2103520",
    "end": "2109920"
  },
  {
    "text": "findings to microsoft but all in all we think that this is as close as it gets to a service takeover",
    "start": "2109920",
    "end": "2118160"
  },
  {
    "text": "so yeah this is the story of ksdb the vulnerability that allowed us to hack the databases of thousands of job",
    "start": "2118160",
    "end": "2123760"
  },
  {
    "text": "customers thank you",
    "start": "2123760",
    "end": "2128280"
  },
  {
    "text": "are there any questions",
    "start": "2133599",
    "end": "2136480"
  },
  {
    "text": "did they uh",
    "start": "2141680",
    "end": "2145078"
  },
  {
    "text": "requested that any question would be taken from the microphone in the back the microphone is over here sorry it's",
    "start": "2147599",
    "end": "2153200"
  },
  {
    "text": "taken nice that's another one over there",
    "start": "2153200",
    "end": "2158960"
  },
  {
    "text": "yes we can battle over them nice findings would you be able to assess in any way",
    "start": "2158960",
    "end": "2167520"
  },
  {
    "text": "what kind of business data you were looking at for those",
    "start": "2167520",
    "end": "2173119"
  },
  {
    "text": "companies the fortune 500 companies what kind of or would we be talking about",
    "start": "2173119",
    "end": "2178720"
  },
  {
    "text": "everything game over uh so we really tried hard not to access any data",
    "start": "2178720",
    "end": "2184240"
  },
  {
    "text": "which is not which you can think about all the data you can",
    "start": "2184240",
    "end": "2190160"
  },
  {
    "text": "find in your everyday database everything that you can imagine can be you like can be found in these databases",
    "start": "2190160",
    "end": "2198560"
  },
  {
    "text": "yes so let it be noted i think the bounty you received",
    "start": "2198560",
    "end": "2204320"
  },
  {
    "text": "should have been per each affected for fortune 500 customers",
    "start": "2204320",
    "end": "2210359"
  },
  {
    "text": "hi uh did microsoft give you any feedback about how they changed the authentication",
    "start": "2217920",
    "end": "2223119"
  },
  {
    "text": "afterwards to stop one certificate being so powerful for example so we only saw that our certificate was revoked and",
    "start": "2223119",
    "end": "2230000"
  },
  {
    "text": "cannot be used anymore and we weren't able to obtain new certificates because",
    "start": "2230000",
    "end": "2235119"
  },
  {
    "text": "they disabled the jupiter notebook feature completely so we have no idea if they change the mechanism behind the",
    "start": "2235119",
    "end": "2241280"
  },
  {
    "text": "scenes but this is how it worked back then and there's no indication that they're",
    "start": "2241280",
    "end": "2247359"
  },
  {
    "text": "going to reinstate that jupiter notebook functionality",
    "start": "2247359",
    "end": "2253200"
  },
  {
    "text": "another thing i",
    "start": "2253200",
    "end": "2256960"
  },
  {
    "text": "first of all thanks for this interesting and also entertaining talk um i wondered um",
    "start": "2269119",
    "end": "2277599"
  },
  {
    "text": "like when you did the privilege escalation from the container do you know whether microsoft",
    "start": "2277760",
    "end": "2284560"
  },
  {
    "text": "noticed this somehow or monitored it because i know that it's possible to",
    "start": "2284560",
    "end": "2289599"
  },
  {
    "text": "monitor for example azure containers also in azure security center so wouldn't it make sense for microsoft to",
    "start": "2289599",
    "end": "2296720"
  },
  {
    "text": "monitor for such kind of jailbreaks so yeah the the container itself had the",
    "start": "2296720",
    "end": "2303280"
  },
  {
    "text": "no monitoring systems inside of it we can only speculate what happened like the outside of the container but there",
    "start": "2303280",
    "end": "2309119"
  },
  {
    "text": "is no like any additional microsoft solutions that monitor such a situation as you suggested",
    "start": "2309119",
    "end": "2315440"
  },
  {
    "text": "if so probably not okay thanks",
    "start": "2315440",
    "end": "2320838"
  },
  {
    "text": "okay i think we're done thank you thank you very much",
    "start": "2328480",
    "end": "2333480"
  },
  {
    "text": "[Music]",
    "start": "2338150",
    "end": "2344459"
  },
  {
    "text": "you",
    "start": "2344960",
    "end": "2347040"
  }
]