[
  {
    "start": "0",
    "end": "150000"
  },
  {
    "text": "welcome to black hat briefings held November 21st through the 22nd 2001 in Amsterdam this is videotape number 16",
    "start": "20600",
    "end": "28400"
  },
  {
    "text": "IDs evasion design trip for buffer overflow",
    "start": "28400",
    "end": "33198"
  },
  {
    "text": "exploit on to this um the last uh presentation the last session of",
    "start": "34640",
    "end": "39680"
  },
  {
    "text": "blackets Europe uh I'm Anders and this is Ian we're from Stockholm Sweden and",
    "start": "39680",
    "end": "45640"
  },
  {
    "text": "we are working at a company named I ex security we're going to uh present to",
    "start": "45640",
    "end": "51520"
  },
  {
    "text": "you a couple of U design tricks for rioting buffer overflow exploits and",
    "start": "51520",
    "end": "56719"
  },
  {
    "text": "these have a side effect of um evading some um some kind of in intrusion",
    "start": "56719",
    "end": "62960"
  },
  {
    "text": "detection",
    "start": "62960",
    "end": "65479"
  },
  {
    "text": "systems okay so why would anyone be interested in buffer overflows at all",
    "start": "68960",
    "end": "74119"
  },
  {
    "text": "well I think there are plenty of reasons for that and one of them is that buff",
    "start": "74119",
    "end": "79360"
  },
  {
    "text": "flow vulnerabilities have been the most common problem for the past 10 years",
    "start": "79360",
    "end": "84520"
  },
  {
    "text": "another reason is that they um these vulnerabilities um offer attackers very",
    "start": "84520",
    "end": "89920"
  },
  {
    "text": "very effective methods of breaking into systems the reason for people to be",
    "start": "89920",
    "end": "96439"
  },
  {
    "text": "interested in these design tricks are to add the number of possible",
    "start": "96439",
    "end": "102000"
  },
  {
    "text": "exploitations um to get around mismanaged bounce checks and as as I already mentioned to um as a side effect",
    "start": "102000",
    "end": "110079"
  },
  {
    "text": "or as a bonus to evade um some um some",
    "start": "110079",
    "end": "115320"
  },
  {
    "text": "sorts of both network-based intrusion detection systems and host based ones too as I'm going to show you",
    "start": "115320",
    "end": "124399"
  },
  {
    "text": "now I'm going toh try to follow this uh agenda where I will start with some",
    "start": "124399",
    "end": "130479"
  },
  {
    "text": "Theory and then I go into the details of um an example",
    "start": "130480",
    "end": "135640"
  },
  {
    "text": "implementation that you find on your CD and then I will finish by uh discussing",
    "start": "135640",
    "end": "141360"
  },
  {
    "text": "a little bit about the possible counter measures um well to counter attacks attacks based",
    "start": "141360",
    "end": "148959"
  },
  {
    "text": "on these design tricks for those of you that might want a brief",
    "start": "148959",
    "end": "154239"
  },
  {
    "start": "150000",
    "end": "150000"
  },
  {
    "text": "reminder of um the general concept of a stack Overflow I have made a simple",
    "start": "154239",
    "end": "160840"
  },
  {
    "start": "159000",
    "end": "159000"
  },
  {
    "text": "illustration the first graphical animation uh this is the stack and when",
    "start": "160840",
    "end": "166599"
  },
  {
    "text": "a um function is being called the return address is stored on the stack and then",
    "start": "166599",
    "end": "173120"
  },
  {
    "text": "when the called function starts to execute it gets um some gets a a buff of reserved memory",
    "start": "173120",
    "end": "180840"
  },
  {
    "text": "for its internal variable um local variables and so on welcome",
    "start": "180840",
    "end": "187400"
  },
  {
    "text": "YouTube and then when um this called function excuse me is writing if this C",
    "start": "187400",
    "end": "195080"
  },
  {
    "text": "function is writing data to these local variables that are um that",
    "start": "195080",
    "end": "200760"
  },
  {
    "text": "have are writing data to these local variables without doing any verification of the sizes it might be possible for an",
    "start": "200760",
    "end": "208040"
  },
  {
    "text": "attacker to write write out side of the reserved buffer and then the attacker",
    "start": "208040",
    "end": "213760"
  },
  {
    "text": "might be able to overwrite the stored return address and then it will look like this so when the cold function um is",
    "start": "213760",
    "end": "222239"
  },
  {
    "text": "finished and wants to return it will uh use the stored what it believes to be the stored return address and return to",
    "start": "222239",
    "end": "230080"
  },
  {
    "text": "somewhere um to some address in memory that the attacker has overwritten and",
    "start": "230080",
    "end": "235280"
  },
  {
    "text": "for as a simple example the attacker might want to supply an address that",
    "start": "235280",
    "end": "240599"
  },
  {
    "text": "point that takes the program execution into the buffer he just supplied like",
    "start": "240599",
    "end": "247239"
  },
  {
    "start": "247000",
    "end": "247000"
  },
  {
    "text": "this okay so I said I said if um data is being written",
    "start": "247319",
    "end": "254040"
  },
  {
    "text": "to these um any of these local variables or this buffer without any any of the sizes being U",
    "start": "254040",
    "end": "261120"
  },
  {
    "text": "verified then it might be possible for an attacker to write outside of the reserved memory buffer and overwrite the",
    "start": "261120",
    "end": "268479"
  },
  {
    "text": "um return address but as um as awareness of of this",
    "start": "268479",
    "end": "273960"
  },
  {
    "text": "problem grows among programmers uh more and more programmers fortunately start",
    "start": "273960",
    "end": "279120"
  },
  {
    "text": "to do um start to try to verify the sizes of the different buffers start to try to do bounce checks within the",
    "start": "279120",
    "end": "286440"
  },
  {
    "text": "programs but there is still plenty of room for mistakes to be made uh let's",
    "start": "286440",
    "end": "291600"
  },
  {
    "text": "for example say that a server verifies or performs a bounds check while while",
    "start": "291600",
    "end": "297160"
  },
  {
    "text": "it receives data from a client but not later on when it when it's executing or",
    "start": "297160",
    "end": "302400"
  },
  {
    "text": "let's say the programmers use string copy function but um that they have uh",
    "start": "302400",
    "end": "307680"
  },
  {
    "text": "made a miscalculation of the number of bytes and so on then it might still be",
    "start": "307680",
    "end": "313080"
  },
  {
    "text": "possible for an attacker to inject and um also as uh as halver showed us",
    "start": "313080",
    "end": "319840"
  },
  {
    "text": "yesterday in his excellent presentation for those of you that saw it there are plenty of",
    "start": "319840",
    "end": "326800"
  },
  {
    "text": "more more and really sophisticated ways of for different attackers to get",
    "start": "326800",
    "end": "332199"
  },
  {
    "text": "control of the execution but let's say we have a situation where an attacker is able to",
    "start": "332199",
    "end": "339880"
  },
  {
    "start": "336000",
    "end": "336000"
  },
  {
    "text": "to make an injection to get control of the execution although there might still be some kind of mismanaged Bounce checks",
    "start": "339880",
    "end": "347520"
  },
  {
    "text": "then this attacker will most probably have to deal with uh with um a set of",
    "start": "347520",
    "end": "353120"
  },
  {
    "text": "size restrictions if he's lucky he have different buffers to play with for um",
    "start": "353120",
    "end": "358720"
  },
  {
    "text": "the injection for for taking control over of the execution and for",
    "start": "358720",
    "end": "364319"
  },
  {
    "text": "um for his payload for the instruction he wants to execute when he is in control if the attacker is unlucky then",
    "start": "364319",
    "end": "372960"
  },
  {
    "text": "he might uh be forced to use the same buffer and then most certainly the size",
    "start": "372960",
    "end": "379160"
  },
  {
    "text": "restriction will um apply to to that entire buffer both to the injector and",
    "start": "379160",
    "end": "386199"
  },
  {
    "text": "payload um then the attacker has two options Maybe he can accept the size restrictions and try to do his thing",
    "start": "386199",
    "end": "393240"
  },
  {
    "text": "using only the available number of bytes or and that's a little naive but it's",
    "start": "393240",
    "end": "399560"
  },
  {
    "text": "okay if it works otherwise the attacker can um take another approach and use another",
    "start": "399560",
    "end": "406639"
  },
  {
    "text": "option and change his design concept and do something that I call a double injection which which I'm going to um",
    "start": "406639",
    "end": "413639"
  },
  {
    "text": "present in detail to you here now but first let's say if the attacker shows us the first simp Le naive way of",
    "start": "413639",
    "end": "420840"
  },
  {
    "text": "just using the um available number of bytes in a in some buffer with some size",
    "start": "420840",
    "end": "427440"
  },
  {
    "text": "restriction then you got to keep um the number of libraries low going to uh mind",
    "start": "427440",
    "end": "432720"
  },
  {
    "text": "the number of functions calls and um just plain and simple try to keep his C",
    "start": "432720",
    "end": "438280"
  },
  {
    "text": "code um as small as possible we did some um research on this a year",
    "start": "438280",
    "end": "445039"
  },
  {
    "start": "441000",
    "end": "441000"
  },
  {
    "text": "ago uh while trying to U prove a concept and exploit a particular um server",
    "start": "445039",
    "end": "451960"
  },
  {
    "text": "application and we came up with a solution that we then thought was pretty small using 250 bytes for a some kind of",
    "start": "451960",
    "end": "460080"
  },
  {
    "text": "simple small remote shell we used windsock in kernel 32 libraries we used",
    "start": "460080",
    "end": "465759"
  },
  {
    "text": "the datagram socket and we basically did a loop over over a uh receive receive",
    "start": "465759",
    "end": "471240"
  },
  {
    "text": "from call and um call to win win XC in colel 32 this um this is a ailable on",
    "start": "471240",
    "end": "480120"
  },
  {
    "text": "the security Focus uh website and you have the address on your hard copies and on this slide if you want to have a look",
    "start": "480120",
    "end": "486720"
  },
  {
    "text": "at it as I said that was a little naive but it did the work so it's it's okay a better approach",
    "start": "486720",
    "end": "495159"
  },
  {
    "start": "488000",
    "end": "488000"
  },
  {
    "text": "a better design would be to use a double injection and with a double by a double injection I mean that the attacker uses",
    "start": "495159",
    "end": "502360"
  },
  {
    "text": "his first payload to upload a second payload and execute it",
    "start": "502360",
    "end": "508599"
  },
  {
    "text": "this will have two benefits for the attacker he's able to write a very small",
    "start": "511720",
    "end": "517240"
  },
  {
    "text": "payload just 40 bytes instead of 250 or even more and the second benefit of",
    "start": "517240",
    "end": "523760"
  },
  {
    "text": "having no size restrictions almost on the second part of the payload to",
    "start": "523760",
    "end": "530880"
  },
  {
    "start": "530000",
    "end": "530000"
  },
  {
    "text": "um illustrate this I have tried to made another fabulous animation with colors and arrows and stuff um where and it",
    "start": "530880",
    "end": "539480"
  },
  {
    "text": "works like this the client um connects to the server and",
    "start": "539480",
    "end": "544600"
  },
  {
    "text": "sends a sends a message to the server the server receives it maybe performs a",
    "start": "544600",
    "end": "550000"
  },
  {
    "text": "bounce check and calls an internal function in in a library then this internal function",
    "start": "550000",
    "end": "557440"
  },
  {
    "text": "performs a string copy operation which uh which happens to be fatal for the execution and the attacker gets",
    "start": "557440",
    "end": "564000"
  },
  {
    "text": "controlled then when the attacker is in control when the attacker is executing uh within its first page payload that",
    "start": "564000",
    "end": "571800"
  },
  {
    "text": "um the first payload uh does another call to the receive function and receive",
    "start": "571800",
    "end": "577200"
  },
  {
    "text": "its second part which it stores higher up in free memory somewhere and then",
    "start": "577200",
    "end": "582440"
  },
  {
    "text": "finish by uh jumping up to the second part of the",
    "start": "582440",
    "end": "587639"
  },
  {
    "text": "payload so that's basically the concept an illustration of the concept of a",
    "start": "588079",
    "end": "593360"
  },
  {
    "text": "double injection which has which I'm going to uh into the",
    "start": "593360",
    "end": "599839"
  },
  {
    "text": "details of of the code later what the what the attacker can send or what the",
    "start": "599839",
    "end": "605560"
  },
  {
    "text": "attacker wants to send a second time could be anything and um more on the attacker",
    "start": "605560",
    "end": "612880"
  },
  {
    "text": "does not need to mind doing exor protection of null byes the second the",
    "start": "612880",
    "end": "619040"
  },
  {
    "text": "second time because he's sending raw data over socket and the exor protection is for string",
    "start": "619040",
    "end": "625079"
  },
  {
    "text": "copy in the proof of concept implementation that that I have given you",
    "start": "625079",
    "end": "630240"
  },
  {
    "text": "uh the second payload is all is only confirming its success by sending a small message back to the client it's",
    "start": "630240",
    "end": "637040"
  },
  {
    "text": "not doing any really fancy shell stuff or anything but it proves the concept so",
    "start": "637040",
    "end": "643000"
  },
  {
    "text": "this is seems nice I hope and but how to",
    "start": "643000",
    "end": "648320"
  },
  {
    "text": "um how can the attacker do to um minimize the code needed for the first",
    "start": "648320",
    "end": "654440"
  },
  {
    "text": "payload well there are at least two things the attacker can do he can reuse jump table of the vul vulnerable server",
    "start": "654440",
    "end": "662040"
  },
  {
    "text": "application and he can reuse the socket descriptor and the uh the socket",
    "start": "662040",
    "end": "668560"
  },
  {
    "text": "descriptor uh represents the existing network connection of course to re reuse",
    "start": "668560",
    "end": "673639"
  },
  {
    "text": "the socket descriptor he has to find it and to find the socket descriptor uh an attacker can put a",
    "start": "673639",
    "end": "680519"
  },
  {
    "start": "676000",
    "end": "676000"
  },
  {
    "text": "break point in on the accept call in the server application and look what happens when",
    "start": "680519",
    "end": "687639"
  },
  {
    "text": "the accept call returns because um the return value from the accept call is a",
    "start": "687639",
    "end": "692800"
  },
  {
    "text": "socket descriptor and it stores somewhere probably on the stack frame of the U main function of the of the main",
    "start": "692800",
    "end": "700320"
  },
  {
    "text": "function in this case to find um where to to find the",
    "start": "700320",
    "end": "705639"
  },
  {
    "text": "address of where to set the break point uh the attacker can do a disassembly of the server application and there's lots",
    "start": "705639",
    "end": "713000"
  },
  {
    "text": "of freeware disassemblers on the internet and there's also a very good",
    "start": "713000",
    "end": "718760"
  },
  {
    "text": "disassem from data rescue called interactive disassembler which I suppose uh most of you are using",
    "start": "718760",
    "end": "726160"
  },
  {
    "text": "frequently uh I have a detailed example of uh how to um of what this",
    "start": "726160",
    "end": "734680"
  },
  {
    "text": "might look like in the disassembly on a actually on slide 38 although the slides",
    "start": "734680",
    "end": "739880"
  },
  {
    "text": "aren't numbered well um it comes up",
    "start": "739880",
    "end": "746000"
  },
  {
    "text": "later okay so by using uh by reusing the jump table the",
    "start": "746000",
    "end": "752519"
  },
  {
    "text": "attacker um has the Ben gets the benefit of um fewer bytes and by using the same",
    "start": "752519",
    "end": "758839"
  },
  {
    "text": "network connection and the socket descriptor um the attacker gets the benefit of evading those network-based",
    "start": "758839",
    "end": "765800"
  },
  {
    "text": "intrusion detection system that looks for new TCP handshakes or Elite hexor",
    "start": "765800",
    "end": "771639"
  },
  {
    "text": "ports ports over the network",
    "start": "771639",
    "end": "775959"
  },
  {
    "text": "but there's even more benefits if the attacker succeeds in writing a very",
    "start": "780199",
    "end": "785440"
  },
  {
    "text": "minimal um injector first payload then the stack frame below is not going to be",
    "start": "785440",
    "end": "791880"
  },
  {
    "text": "disrupted and it might be possible for the attacker to perform a clean return when he has finished doing his",
    "start": "791880",
    "end": "798000"
  },
  {
    "text": "things and a c if he succeeds to do a clean return it will have another benefit namely it will uh evade those uh",
    "start": "798000",
    "end": "806040"
  },
  {
    "text": "host based intrusion detection systems too that are are looking for suspicious log entries like access violation or uh",
    "start": "806040",
    "end": "814160"
  },
  {
    "text": "un unsuspected termination of process or something like",
    "start": "814160",
    "end": "820399"
  },
  {
    "text": "that okay those of you that U paid really paid attention on the last slide noticed that I said might be possible",
    "start": "821160",
    "end": "828120"
  },
  {
    "start": "822000",
    "end": "822000"
  },
  {
    "text": "because there are at least two more conditions that um has to be met in",
    "start": "828120",
    "end": "833399"
  },
  {
    "text": "order for the attacker to be able to do a clean return like I said first the attacker got to find",
    "start": "833399",
    "end": "839759"
  },
  {
    "text": "the um the correct return address and then the attacker also might need to",
    "start": "839759",
    "end": "846240"
  },
  {
    "text": "restore some internal register values like the state of the function called",
    "start": "846240",
    "end": "852360"
  },
  {
    "start": "852000",
    "end": "852000"
  },
  {
    "text": "before so there are two conditions uh at least two conditions uh the first",
    "start": "852360",
    "end": "858199"
  },
  {
    "text": "condition of finding the correct return address that's because of the original",
    "start": "858199",
    "end": "863560"
  },
  {
    "text": "original return address is overwritten that's that's how the attacker gets control in the first place and there's",
    "start": "863560",
    "end": "870160"
  },
  {
    "text": "um two options again for the attacker to handle this uh to meet this first",
    "start": "870160",
    "end": "876240"
  },
  {
    "text": "condition requirement um maybe he can calculate the return address manually which I'm",
    "start": "876240",
    "end": "883040"
  },
  {
    "text": "going to show you later or maybe he can cheat and pop another stack frame if he",
    "start": "883040",
    "end": "889240"
  },
  {
    "start": "889000",
    "end": "889000"
  },
  {
    "text": "choses to cheat then he can uh pop another stack frame and return to another function let's say let's say we",
    "start": "889240",
    "end": "895320"
  },
  {
    "text": "have three functions we have a main function which calls a first first function in the library and then this",
    "start": "895320",
    "end": "901040"
  },
  {
    "text": "first function calls a second function in the library maybe the attacker if if",
    "start": "901040",
    "end": "906440"
  },
  {
    "text": "if there is a um if the second function is the one",
    "start": "906440",
    "end": "911519"
  },
  {
    "text": "that is being exploited maybe the attacker when he has finished can return back to the uh not the first function",
    "start": "911519",
    "end": "917079"
  },
  {
    "text": "but the main function and he's cheating in some",
    "start": "917079",
    "end": "922320"
  },
  {
    "text": "sense uh I made an illustration of this two of course here's the first function call here's the second here's the uh",
    "start": "922320",
    "end": "928560"
  },
  {
    "start": "923000",
    "end": "923000"
  },
  {
    "text": "over right overrun and when the attacker has finished maybe I can use this return",
    "start": "928560",
    "end": "934600"
  },
  {
    "text": "address just pop another stack frame and return back to",
    "start": "934600",
    "end": "939079"
  },
  {
    "start": "938000",
    "end": "938000"
  },
  {
    "text": "main oh I'm sorry funny noise otherwise if the attacker doesn't want to cheat",
    "start": "942120",
    "end": "948120"
  },
  {
    "text": "but do want to um calculate the correct the very correct return address he can",
    "start": "948120",
    "end": "953759"
  },
  {
    "text": "um follow the execution path reverse manually but",
    "start": "953759",
    "end": "959600"
  },
  {
    "text": "because um if you look at the stack memory so below the stack frame of the",
    "start": "959600",
    "end": "965160"
  },
  {
    "text": "first function in my example the attacker will find the return address back to the main function and a fixed",
    "start": "965160",
    "end": "971639"
  },
  {
    "text": "distance from there is the a fixed distance from that fun from that address",
    "start": "971639",
    "end": "977639"
  },
  {
    "text": "is the um is the call address into function number one and a fixed address",
    "start": "977639",
    "end": "983079"
  },
  {
    "text": "down the library uh address from function number one is the call to function number two",
    "start": "983079",
    "end": "989279"
  },
  {
    "text": "what did I just say did anyone get it did all of you get it",
    "start": "989279",
    "end": "994880"
  },
  {
    "text": "maybe um for those of you that might not have got it right away let's have a look at function calls",
    "start": "994880",
    "end": "1002360"
  },
  {
    "start": "1001000",
    "end": "1001000"
  },
  {
    "text": "they look like this um let's say main wants to call a function in a",
    "start": "1002360",
    "end": "1008319"
  },
  {
    "text": "dynamically loaded library then we have a call operate uh call instruction followed by a jump instruction into the",
    "start": "1008319",
    "end": "1015079"
  },
  {
    "text": "dll and the reason why they look like these this",
    "start": "1015079",
    "end": "1020839"
  },
  {
    "start": "1016000",
    "end": "1016000"
  },
  {
    "text": "is for the operating system uh to only need to patch uh one",
    "start": "1022240",
    "end": "1028120"
  },
  {
    "text": "place in the code and not every call and also so that the operating system does not need to know how to generate",
    "start": "1028120",
    "end": "1034880"
  },
  {
    "text": "complete valid uh jump instructions but rather patching a simple address into",
    "start": "1034880",
    "end": "1040678"
  },
  {
    "text": "into the code so now I'm going to try and uh",
    "start": "1040679",
    "end": "1046600"
  },
  {
    "text": "illustrate what I just said three slides to go um in a better",
    "start": "1046600",
    "end": "1052160"
  },
  {
    "text": "way just below stack frame number one which is marked in red we have the",
    "start": "1052160",
    "end": "1058240"
  },
  {
    "text": "return address back to um back to where the",
    "start": "1058240",
    "end": "1063760"
  },
  {
    "text": "program um would return into the main function when it has finished and a",
    "start": "1063760",
    "end": "1070200"
  },
  {
    "text": "fixed distance down the code segment in the main function is the jump table",
    "start": "1070200",
    "end": "1076080"
  },
  {
    "text": "which the operating system has patched uh um for the correct address to where",
    "start": "1076080",
    "end": "1081480"
  },
  {
    "text": "the dynamically loaded library is currently being placed and this um uh address of course",
    "start": "1081480",
    "end": "1089600"
  },
  {
    "text": "points into the um uh function number one in the library in the loow in the",
    "start": "1089600",
    "end": "1097320"
  },
  {
    "text": "dll um and then a fixed distance down from the entry point in the dll of",
    "start": "1097520",
    "end": "1104320"
  },
  {
    "text": "function number one is the call to function number two in my my example",
    "start": "1104320",
    "end": "1110760"
  },
  {
    "text": "and this fixed distance um plus four is the desired return",
    "start": "1111480",
    "end": "1119159"
  },
  {
    "text": "address for a clean return back to function number",
    "start": "1119159",
    "end": "1125559"
  },
  {
    "text": "one now everyone got it right beautiful and",
    "start": "1133520",
    "end": "1139840"
  },
  {
    "text": "everything okay so if you remember I said there were uh two conditions that",
    "start": "1139840",
    "end": "1145400"
  },
  {
    "text": "the attacker had to meet in order to be able to do a clean return well we have taken care of at least theoretically the",
    "start": "1145400",
    "end": "1151679"
  },
  {
    "text": "first condition how to find or calculate um the correct return address and now we",
    "start": "1151679",
    "end": "1158159"
  },
  {
    "text": "have the second um uh second condition or requirement that needs to be taken care of in order to do a clean return",
    "start": "1158159",
    "end": "1165400"
  },
  {
    "text": "namely the attacker H might need to restore some internal register",
    "start": "1165400",
    "end": "1171039"
  },
  {
    "text": "values because normally when function one calls function two and function two",
    "start": "1171039",
    "end": "1176720"
  },
  {
    "text": "starts to execute it saves uh the value of uh some internal",
    "start": "1176720",
    "end": "1183280"
  },
  {
    "text": "registers which function two is going to use and then nor in a normal situation",
    "start": "1183280",
    "end": "1188440"
  },
  {
    "text": "when function two is about to finish it will restore this uh restore the state to restore these um uh values of these",
    "start": "1188440",
    "end": "1197520"
  },
  {
    "text": "internal registers but when the attacker gains control uh thanks to the override um he overwrites",
    "start": "1197520",
    "end": "1206039"
  },
  {
    "text": "both the um all of the uh internal register value the stored values and of",
    "start": "1206039",
    "end": "1211280"
  },
  {
    "text": "course the uh return address and it looks like this U this is",
    "start": "1211280",
    "end": "1216799"
  },
  {
    "text": "an illustration of the stack and when the attacker uh overrides he will override both the values of the internal",
    "start": "1216799",
    "end": "1224080"
  },
  {
    "text": "registers and the return address to get control and but then he'll get to the problem of uh re restoring the state in",
    "start": "1224080",
    "end": "1232360"
  },
  {
    "text": "order to do a clean return the second condition and this this might be tricky",
    "start": "1232360",
    "end": "1239520"
  },
  {
    "start": "1236000",
    "end": "1236000"
  },
  {
    "text": "and this will definitely um defer and depend on the particular function the particular",
    "start": "1239520",
    "end": "1246080"
  },
  {
    "text": "application that um you or someone else is trying to",
    "start": "1246080",
    "end": "1252200"
  },
  {
    "text": "exploit and um from the attacker's point of view if we can do a normal Trace to a",
    "start": "1252200",
    "end": "1259480"
  },
  {
    "text": "normal execution and do a proper debugging he can deduce what of the",
    "start": "1259480",
    "end": "1265360"
  },
  {
    "text": "which of the internal registers that he will have to restore properly in order",
    "start": "1265360",
    "end": "1270559"
  },
  {
    "text": "to do a clean return and then he have will have different um uh challenge",
    "start": "1270559",
    "end": "1276640"
  },
  {
    "text": "every time to um or a different challenge for every application to maybe predict these",
    "start": "1276640",
    "end": "1283960"
  },
  {
    "text": "values maybe they are static or maybe they are possible to calculate from",
    "start": "1283960",
    "end": "1289120"
  },
  {
    "text": "other information that is U",
    "start": "1289120",
    "end": "1293640"
  },
  {
    "text": "untouched okay so I hope this sounds cool now and I have um provided a proof",
    "start": "1302600",
    "end": "1310039"
  },
  {
    "text": "of concept implementation of a um server and client with the full source code of",
    "start": "1310039",
    "end": "1315360"
  },
  {
    "text": "course uh which is included on your CD or I believe it to be included on your CD",
    "start": "1315360",
    "end": "1321039"
  },
  {
    "text": "although I didn't get a CD myself um otherwise it will of course be available on the black hat website",
    "start": "1321039",
    "end": "1328440"
  },
  {
    "text": "afterwards have anyone looked on the CD are the examples great so you can have a",
    "start": "1328440",
    "end": "1335159"
  },
  {
    "text": "look at them I've also tried to make good comments in code about what I do",
    "start": "1335159",
    "end": "1344080"
  },
  {
    "start": "1343000",
    "end": "1343000"
  },
  {
    "text": "okay so the server I have implemented has um the functionality of accepting",
    "start": "1349799",
    "end": "1355000"
  },
  {
    "text": "connections um commands some um um",
    "start": "1355000",
    "end": "1360039"
  },
  {
    "text": "simulated commands or something from the client and then uh responding in two different ways and the server performs a",
    "start": "1360039",
    "end": "1367200"
  },
  {
    "text": "bounce check uh while it receives data from the client but not later on when",
    "start": "1367200",
    "end": "1373000"
  },
  {
    "text": "it's doing um actually it performs bounce check but",
    "start": "1373000",
    "end": "1379240"
  },
  {
    "text": "I have made a purposely a miscalculation using string",
    "start": "1379240",
    "end": "1384600"
  },
  {
    "text": "copy uh the server when it receives a connection receives a command from the client it calls an internal function",
    "start": "1384600",
    "end": "1390760"
  },
  {
    "text": "calls called par and execute in a dynamically loaded Library uh called par and execute DL and",
    "start": "1390760",
    "end": "1397919"
  },
  {
    "text": "then this par and execute function calls another function called internal which contains the stack Overflow",
    "start": "1397919",
    "end": "1404600"
  },
  {
    "text": "vulnerability just uh as I have already given this example of two function",
    "start": "1404600",
    "end": "1411120"
  },
  {
    "start": "1410000",
    "end": "1410000"
  },
  {
    "text": "calls yeah in this uh in the example I get um",
    "start": "1411960",
    "end": "1418720"
  },
  {
    "text": "I the attacker gained control by overwriting the instruction pointer in such a way that it points to a return",
    "start": "1418720",
    "end": "1425000"
  },
  {
    "text": "instruction in the main uh server uh application code I use a n terminated",
    "start": "1425000",
    "end": "1432440"
  },
  {
    "text": "injector as you can and you can see the address there um by doing a double",
    "start": "1432440",
    "end": "1439200"
  },
  {
    "text": "return like this the program will jump to the address which is just below where the stack pointer points when um in the",
    "start": "1439200",
    "end": "1447200"
  },
  {
    "text": "function internal believes it is finished and this has the effect of",
    "start": "1447200",
    "end": "1452440"
  },
  {
    "text": "um getting ex execution into the first buffer which happens to be the argument to the function uh",
    "start": "1452440",
    "end": "1461039"
  },
  {
    "start": "1461000",
    "end": "1461000"
  },
  {
    "text": "internal okay in my implementation the first payload performs these tasks it finds",
    "start": "1461679",
    "end": "1469120"
  },
  {
    "text": "the socket descriptor it finds the address in the jump table of the receive function uh that the server uses it",
    "start": "1469120",
    "end": "1476600"
  },
  {
    "text": "performs a call to the receive function and it stores a second payload somewhere in free memory just a bit higher up on",
    "start": "1476600",
    "end": "1483520"
  },
  {
    "text": "the stack and then it jumps to the second payload which it had just",
    "start": "1483520",
    "end": "1489679"
  },
  {
    "text": "received and here's some",
    "start": "1489679",
    "end": "1493320"
  },
  {
    "start": "1490000",
    "end": "1490000"
  },
  {
    "text": "code to find the socket descriptor I had debug the server application and look",
    "start": "1495320",
    "end": "1500840"
  },
  {
    "text": "for the accept call and put a break point here and then when the server has performed the break has perform the",
    "start": "1500840",
    "end": "1506840"
  },
  {
    "text": "accept call and the breakpoint um triggers I look where the result from",
    "start": "1506840",
    "end": "1513559"
  },
  {
    "text": "the accept call is being stored and this happens to be a fix of course a fixed distance from the base pointer the the",
    "start": "1513559",
    "end": "1520440"
  },
  {
    "text": "base of the stack frame then this is important",
    "start": "1520440",
    "end": "1527640"
  },
  {
    "start": "1523000",
    "end": "1523000"
  },
  {
    "text": "when uh when the client exploits This Server it has no idea of where in memory",
    "start": "1529159",
    "end": "1534880"
  },
  {
    "text": "the stack frames are being placed this me this um their me their memory address might",
    "start": "1534880",
    "end": "1543000"
  },
  {
    "text": "change you don't know where the stack frames are uh in memory but you do know as you could see on the last slides last",
    "start": "1543000",
    "end": "1550840"
  },
  {
    "text": "Slide the sockets position within the stack frame so the attacker does not need to know where the stack frame is as",
    "start": "1550840",
    "end": "1557960"
  },
  {
    "text": "long as he knows um where in the stack frame the socket descriptor is uh is being stored and this is all always on a",
    "start": "1557960",
    "end": "1565799"
  },
  {
    "text": "fixed distance from uh from the base",
    "start": "1565799",
    "end": "1573520"
  },
  {
    "text": "yeah this is explaining the the last slide maybe I should switch order the the socket descriptor in h in my example",
    "start": "1574200",
    "end": "1582159"
  },
  {
    "text": "happens to be happens to always be placed 32 bytes away from where the",
    "start": "1582159",
    "end": "1587880"
  },
  {
    "text": "stack pointer points to just after the attacker has gained control and 32 bytes",
    "start": "1587880",
    "end": "1594039"
  },
  {
    "text": "decimal is 20 bytes x and the stack pointer happens to point",
    "start": "1594039",
    "end": "1599080"
  },
  {
    "text": "one bite down the stack frame of par and execute function in the code um that the",
    "start": "1599080",
    "end": "1607559"
  },
  {
    "text": "um in the code of the assembly code of the first payload it looks like this I move the stack pointer to the base",
    "start": "1607559",
    "end": "1613760"
  },
  {
    "text": "pointer and then I reference the socket descriptor uh with a the fixed distance",
    "start": "1613760",
    "end": "1620000"
  },
  {
    "text": "20 hex's 32 decimal from the base okay so now by doing that the um",
    "start": "1620000",
    "end": "1627520"
  },
  {
    "text": "first payload has found the circuit descriptor okay and then the first",
    "start": "1627520",
    "end": "1633960"
  },
  {
    "text": "payload wants to reuse the jump table of the server application and it happens to",
    "start": "1633960",
    "end": "1639159"
  },
  {
    "text": "look like this the receive function is down here and this is the address to",
    "start": "1639159",
    "end": "1644520"
  },
  {
    "text": "use okay and then I made another fabulous um animation of uh of what the",
    "start": "1644520",
    "end": "1650600"
  },
  {
    "text": "first payload does when it gets in control it moves the um the base and",
    "start": "1650600",
    "end": "1658000"
  },
  {
    "text": "stack pointer a little bit then it starts pushing the arguments for the receive call uh onto uh its",
    "start": "1658000",
    "end": "1667039"
  },
  {
    "text": "stack the flags the length of the buffer a pointer to the buffer where it will",
    "start": "1667039",
    "end": "1672440"
  },
  {
    "text": "will the first where the first payload will store the second payload and I just",
    "start": "1672440",
    "end": "1678399"
  },
  {
    "text": "happened to show the this location and then of course a reference to the socket descriptor or the socket descriptor",
    "start": "1678399",
    "end": "1685360"
  },
  {
    "text": "itself and then the first payload performs the receive call and stores the second payload uh where the um buff",
    "start": "1685360",
    "end": "1693279"
  },
  {
    "text": "argument point and then it jumps up there and continues to execute the second payload the second payload",
    "start": "1693279",
    "end": "1700760"
  },
  {
    "start": "1698000",
    "end": "1698000"
  },
  {
    "text": "I I have uh provided in my example is uh sending a short message back to the",
    "start": "1700760",
    "end": "1707799"
  },
  {
    "text": "client just to confirm that it is executing and to confirm that it can",
    "start": "1707799",
    "end": "1713159"
  },
  {
    "text": "still use the same socket descriptor and still use the jump",
    "start": "1713159",
    "end": "1718519"
  },
  {
    "text": "table then the second payload calculates uh the correct return address back to um",
    "start": "1719080",
    "end": "1727600"
  },
  {
    "text": "the first function of three um the one I call the person execute",
    "start": "1727600",
    "end": "1732840"
  },
  {
    "text": "function restores uh all the necessary um internal register all the values of",
    "start": "1732840",
    "end": "1739000"
  },
  {
    "text": "the necessary internal registers and performs a clean return just to proof a",
    "start": "1739000",
    "end": "1744159"
  },
  {
    "text": "concept and then the server it works just like usual you can connect to it again with uh with netcat and U and send",
    "start": "1744159",
    "end": "1752919"
  },
  {
    "text": "real",
    "start": "1752919",
    "end": "1755240"
  },
  {
    "text": "commands to use the um to reuse the jump table again",
    "start": "1763360",
    "end": "1768600"
  },
  {
    "text": "the second payload has to find the send function and it happens to be down here and the address to use happens to be",
    "start": "1768600",
    "end": "1774760"
  },
  {
    "text": "this one and it looks like this and I'm still",
    "start": "1774760",
    "end": "1781000"
  },
  {
    "start": "1776000",
    "end": "1776000"
  },
  {
    "text": "using the second payload is still using the same socket and it's using it by",
    "start": "1781000",
    "end": "1787279"
  },
  {
    "text": "referencing it in this way the same same way as um as",
    "start": "1787279",
    "end": "1793320"
  },
  {
    "start": "1793000",
    "end": "1793000"
  },
  {
    "text": "before yeah well and then the second payload calculates the return address again as I have said by following the",
    "start": "1796519",
    "end": "1803880"
  },
  {
    "text": "execution path um backwards manually and it looks like",
    "start": "1803880",
    "end": "1809240"
  },
  {
    "text": "this pretty similar to um to the example I have already given uh the second payLo",
    "start": "1809240",
    "end": "1816200"
  },
  {
    "text": "looks uh just below stack frame number one for the address into back into the main function it",
    "start": "1816200",
    "end": "1823399"
  },
  {
    "text": "um um it looks a fixed distance away from there for the address into the start the entry point of the par and",
    "start": "1823399",
    "end": "1829840"
  },
  {
    "text": "execute function and then so basically it's using these two",
    "start": "1829840",
    "end": "1835919"
  },
  {
    "text": "uh offset values fix offset values and they they don't depend in any way o um",
    "start": "1835919",
    "end": "1842600"
  },
  {
    "text": "on where the um uh par and execute library has been placed uh currently but",
    "start": "1842600",
    "end": "1850720"
  },
  {
    "text": "this is is um the second payload is is also dynamic in this uh Manner and this",
    "start": "1850720",
    "end": "1858080"
  },
  {
    "text": "is of course the correct return address the desired return address that the attacker wants to use to be able to do",
    "start": "1858080",
    "end": "1863320"
  },
  {
    "text": "this clean return and U the code for this looks",
    "start": "1863320",
    "end": "1868720"
  },
  {
    "start": "1865000",
    "end": "1865000"
  },
  {
    "text": "looks like this here I have the fix offset uh in the main function and the fix ofet in",
    "start": "1868720",
    "end": "1875360"
  },
  {
    "text": "the person execute library to restore the internal",
    "start": "1875360",
    "end": "1882159"
  },
  {
    "start": "1878000",
    "end": "1878000"
  },
  {
    "text": "registers um I happen to know that the stack pointer should point to the top of the stack frame and the base point",
    "start": "1882159",
    "end": "1888159"
  },
  {
    "text": "should point to the base of the stack frame I have um and of course the size just as",
    "start": "1888159",
    "end": "1896760"
  },
  {
    "text": "before I don't know and I don't need to know where at what address the stack frame is being placed but I know that",
    "start": "1896760",
    "end": "1903440"
  },
  {
    "text": "the size of the stack frame will um in this example always be the same so I can just uh add the value and then the",
    "start": "1903440",
    "end": "1910639"
  },
  {
    "text": "register ebx if you do a debug of the server application in a normal situation you",
    "start": "1910639",
    "end": "1916880"
  },
  {
    "text": "see that the register ebx shall point to a specific variable within the stack",
    "start": "1916880",
    "end": "1922320"
  },
  {
    "text": "frame and again it doesn't matter where the stack frame is you just um need to know uh the fixed distance from either",
    "start": "1922320",
    "end": "1930399"
  },
  {
    "text": "the top or the bottom of the stack frame and U uh and just add it to get the um",
    "start": "1930399",
    "end": "1938360"
  },
  {
    "text": "to get the address of where ebx should point in order to be able to do this clean",
    "start": "1938360",
    "end": "1944120"
  },
  {
    "text": "return and it looks like this in the code",
    "start": "1944120",
    "end": "1949639"
  },
  {
    "text": "okay so basically um those were the design tricks that I'm suggesting and uh",
    "start": "1953039",
    "end": "1959279"
  },
  {
    "text": "to give you a summary the last couple of minutes and I will give you a summary",
    "start": "1959279",
    "end": "1965720"
  },
  {
    "start": "1963000",
    "end": "1963000"
  },
  {
    "text": "this the last couple of minutes I suggest a um design trick call",
    "start": "1965720",
    "end": "1973360"
  },
  {
    "text": "that I call Double injection where I use where I let the first injector payload upload a second",
    "start": "1973360",
    "end": "1980480"
  },
  {
    "text": "one and I also suggest um a design trick where an attacker triy to use and reuse",
    "start": "1980480",
    "end": "1987320"
  },
  {
    "text": "an existing network connection by finding and reusing the socket descriptor and",
    "start": "1987320",
    "end": "1994559"
  },
  {
    "text": "um and also I suggest to a design trick of uh reusing the jump table it should",
    "start": "1995000",
    "end": "2001080"
  },
  {
    "text": "be a little more to the left they're actually on the sline the benefits of doing like this is that an exploit",
    "start": "2001080",
    "end": "2008639"
  },
  {
    "start": "2004000",
    "end": "2004000"
  },
  {
    "text": "implemented with these design tricks in mind will uh evade those network-based",
    "start": "2008639",
    "end": "2014600"
  },
  {
    "text": "intrusion detection system that looks for uh elite unrecognized elite ports",
    "start": "2014600",
    "end": "2019760"
  },
  {
    "text": "over the network and it will evade those intrusion detection mechanisms that will look for um new TCP three-step",
    "start": "2019760",
    "end": "2027440"
  },
  {
    "text": "handshakes and it will also evade those host-based intrusion detection system that looks for maybe looks for new",
    "start": "2027440",
    "end": "2033519"
  },
  {
    "text": "connections or maybe looks for uh suspicious log entries of a uh access violation for example because the clean",
    "start": "2033519",
    "end": "2040519"
  },
  {
    "text": "return doesn't generate any any",
    "start": "2040519",
    "end": "2045679"
  },
  {
    "text": "crash okay so now I'm going to now now I have um done the theory part and the",
    "start": "2051159",
    "end": "2059240"
  },
  {
    "text": "implementation example um um dissection and now I'm going to finish by",
    "start": "2059240",
    "end": "2065599"
  },
  {
    "text": "mentioning a few words about the possib counter measures for from an network-based",
    "start": "2065599",
    "end": "2072679"
  },
  {
    "start": "2069000",
    "end": "2069000"
  },
  {
    "text": "intrusion detection systems point of view it might",
    "start": "2072679",
    "end": "2078158"
  },
  {
    "text": "be uh an exploit with these design tricks in mind might be uh countered by",
    "start": "2078159",
    "end": "2085839"
  },
  {
    "text": "having the network-based intrusion detection system to interpret the actual application protocol that the client and",
    "start": "2085839",
    "end": "2092000"
  },
  {
    "text": "server are supposed to uh to use and then of course the",
    "start": "2092000",
    "end": "2098240"
  },
  {
    "text": "uh a counter counter measure would be for for the attacker to U uh make",
    "start": "2098240",
    "end": "2104960"
  },
  {
    "text": "um the make the um the connect um communication of the the first and",
    "start": "2104960",
    "end": "2110560"
  },
  {
    "text": "second payload to uh to use fake headers according to this uh specific",
    "start": "2110560",
    "end": "2115720"
  },
  {
    "text": "application protocol or maybe if if application protocol",
    "start": "2115720",
    "end": "2121000"
  },
  {
    "text": "interpretation means checking whether or not the Chara whether or not the data being sent is binary data our aski data",
    "start": "2121000",
    "end": "2128800"
  },
  {
    "text": "maybe it's a a good enough counter counter measure for an attacker to to use ASI",
    "start": "2128800",
    "end": "2135760"
  },
  {
    "text": "encoding um also it's important to um to think a",
    "start": "2135760",
    "end": "2142320"
  },
  {
    "text": "little bit about complexity because application protocol interpretation will probably add to the",
    "start": "2142320",
    "end": "2149079"
  },
  {
    "text": "complexity of the intrusion detection system and also session session encryption might uh might um might make",
    "start": "2149079",
    "end": "2156680"
  },
  {
    "text": "it hard to implement this another thing besides uh protocol interpretation is",
    "start": "2156680",
    "end": "2163200"
  },
  {
    "text": "for the network based intrusion detection system to perform pattern matching of attack signatures of course",
    "start": "2163200",
    "end": "2171160"
  },
  {
    "text": "and and of course this this will always work as a countermeasure as long as the attack signatures are valid for the",
    "start": "2171160",
    "end": "2177880"
  },
  {
    "text": "particular exploit that the particular uh attacker is using at the particular",
    "start": "2177880",
    "end": "2183640"
  },
  {
    "text": "time for um host based uh IDs you could add some kind of strange",
    "start": "2183640",
    "end": "2191359"
  },
  {
    "text": "Behavior awareness functionality and uh for example the the",
    "start": "2191359",
    "end": "2196680"
  },
  {
    "text": "session an attack session might be statistically longer than a normal session but um again strange strange",
    "start": "2196680",
    "end": "2205000"
  },
  {
    "text": "Behavior awareness is will definitely add to the complexity requirements of a",
    "start": "2205000",
    "end": "2210200"
  },
  {
    "text": "host-based ideas so it's not it's not it will probably not be very easy",
    "start": "2210200",
    "end": "2217800"
  },
  {
    "start": "2217000",
    "end": "2217000"
  },
  {
    "text": "other counter counter measures um besides specific IDs counter measures um",
    "start": "2217800",
    "end": "2225000"
  },
  {
    "text": "is for example to prohibit execution on the stack because in what I'm doing here",
    "start": "2225000",
    "end": "2230560"
  },
  {
    "text": "is executing code executing instructions on the stack and you can simply provide",
    "start": "2230560",
    "end": "2236079"
  },
  {
    "text": "a prohibit uh execution there and you can prohibit execution everywhere in",
    "start": "2236079",
    "end": "2243319"
  },
  {
    "text": "memory besides of of the the proper place another possible counter measure could",
    "start": "2243319",
    "end": "2249800"
  },
  {
    "text": "be to uh uh put a reverse application proxy in front of the server and let the",
    "start": "2249800",
    "end": "2256079"
  },
  {
    "text": "reverse uh application proxy perform like sanity checks of every request and",
    "start": "2256079",
    "end": "2261440"
  },
  {
    "text": "response that uh that are going between the server and different clients but then you also have to be aware of uh um",
    "start": "2261440",
    "end": "2269359"
  },
  {
    "text": "the possibility that there might be vulnerabilities within this application proxy and um this is a very real um I",
    "start": "2269359",
    "end": "2278000"
  },
  {
    "text": "think very real threat because we have we have seen very large vendors um",
    "start": "2278000",
    "end": "2284800"
  },
  {
    "text": "marketing reverse Proxes with with problems in themselves so they",
    "start": "2284800",
    "end": "2290280"
  },
  {
    "text": "added problem to the solution rather than fixing",
    "start": "2290280",
    "end": "2295560"
  },
  {
    "start": "2295000",
    "end": "2295000"
  },
  {
    "text": "them okay so basically I'm finished right now and U actually I got 3 minutes",
    "start": "2295560",
    "end": "2302880"
  },
  {
    "text": "uh left so if anyone of you have any questions please feel free to ask me now or",
    "start": "2302880",
    "end": "2308079"
  },
  {
    "text": "just afterwards or well I was uh initially I was scheduled to speak",
    "start": "2308079",
    "end": "2313560"
  },
  {
    "text": "yesterday so C catch us during the conference well the conference will go",
    "start": "2313560",
    "end": "2319079"
  },
  {
    "text": "on for 20 more minutes so but we'll still be here um until tomorrow and as I",
    "start": "2319079",
    "end": "2325359"
  },
  {
    "text": "have written you can all of course always uh send us email yeah so uh if",
    "start": "2325359",
    "end": "2330520"
  },
  {
    "text": "you don't have any questions yeah",
    "start": "2330520",
    "end": "2336160"
  },
  {
    "text": "I'm not sure I I got that yes I'm using a number of fix off sets that comes from",
    "start": "2347160",
    "end": "2354280"
  },
  {
    "text": "the specific server application that I am exploiting so this uh the exploits in",
    "start": "2354280",
    "end": "2361160"
  },
  {
    "text": "the proof of concept implementation will of course always only work with this specific uh with a specific server I",
    "start": "2361160",
    "end": "2368520"
  },
  {
    "text": "have provided and the specific yeah the specific version of of the server but I",
    "start": "2368520",
    "end": "2375440"
  },
  {
    "text": "don't think I will write another version of that one uh did I answer your question or",
    "start": "2375440",
    "end": "2382400"
  },
  {
    "text": "yeah I did okay thanks okay thank you everyone very [Applause]",
    "start": "2382400",
    "end": "2393030"
  },
  {
    "text": "much e",
    "start": "2396319",
    "end": "2400359"
  }
]