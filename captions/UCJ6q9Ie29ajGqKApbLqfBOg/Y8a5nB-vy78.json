[
  {
    "start": "0",
    "end": "143000"
  },
  {
    "text": "good morning welcome to the Jasmine Ballroom we have the a journey from J&D",
    "start": "80",
    "end": "5200"
  },
  {
    "text": "ldap manipulation to remote control a remote code execution Dreamland before",
    "start": "5200",
    "end": "10240"
  },
  {
    "text": "we begin I've got a few notes for you stop by the business Hall located in Bayside a b during the day for welcome",
    "start": "10240",
    "end": "16520"
  },
  {
    "text": "reception at 1730 to 1900 tonight the black hat Arsenal is in the Palm forier",
    "start": "16520",
    "end": "22680"
  },
  {
    "text": "on L level three and join join us for the pony Awards in manderlay Bay BC and",
    "start": "22680",
    "end": "28760"
  },
  {
    "text": "D at 1830 and thank you all for putting your phone on vibrate your ringtone is not as cool",
    "start": "28760",
    "end": "34960"
  },
  {
    "text": "as either of these twos thanks guys okay thank you um so welcome to our",
    "start": "34960",
    "end": "42360"
  },
  {
    "text": "talk and our names are well my name is Alber M I'm principal security",
    "start": "42360",
    "end": "47600"
  },
  {
    "text": "researcher with hp45 I'm known as pester in Twitter and IRC and here with me my",
    "start": "47600",
    "end": "53559"
  },
  {
    "text": "colleague Alexander MOS that is senior Q engineer also with the HB 45 team so we have a brief about packed",
    "start": "53559",
    "end": "60800"
  },
  {
    "text": "agenda for today we're going to introduce uh first of all the basic concepts around jdi the Java naming and",
    "start": "60800",
    "end": "67000"
  },
  {
    "text": "directory interface that is going to be the foundation for two new types of vulnerabilities that we are presenting today the first one being jdi injection",
    "start": "67000",
    "end": "74479"
  },
  {
    "text": "and the second one being L up entry poisoning so we will be presenting different vectors for exploiting these",
    "start": "74479",
    "end": "80200"
  },
  {
    "text": "vulnerabilities and also some demos on real world application um to show you",
    "start": "80200",
    "end": "85240"
  },
  {
    "text": "how they look like in in the real world so last year uh the NATO and the White",
    "start": "85240",
    "end": "90759"
  },
  {
    "text": "House were hacked or attacked as part of the pon storm operation and this operation basically used a bunch of Z",
    "start": "90759",
    "end": "97119"
  },
  {
    "text": "days and among them they use a z dat to bypass the Oracle um Java uplet click to",
    "start": "97119",
    "end": "103159"
  },
  {
    "text": "play Click to play protection so basically they were able to um serve a",
    "start": "103159",
    "end": "109040"
  },
  {
    "text": "malicious website that when the these NATO and White House employees visited this sites they were able to trigger the",
    "start": "109040",
    "end": "116320"
  },
  {
    "text": "execution of the of the Java applet without the employees having to uh explicitly click in on the applet so for",
    "start": "116320",
    "end": "124320"
  },
  {
    "text": "that they use several tricks and several exploitation techniques and one of them was some jndi features that we found",
    "start": "124320",
    "end": "131200"
  },
  {
    "text": "very interesting and so we decided to re uh research on this jdi uh technology",
    "start": "131200",
    "end": "136280"
  },
  {
    "text": "and see what we could get with them so first of all we are going to introduce a very brief introduction to jdi the",
    "start": "136280",
    "end": "143040"
  },
  {
    "start": "143000",
    "end": "143000"
  },
  {
    "text": "enough so that you can understand the basics of these vulnerabilities so jdi is stands for Java naming and directory",
    "start": "143040",
    "end": "150120"
  },
  {
    "text": "interface and it's basically a common interface to interact with different naming and directory providers so naming",
    "start": "150120",
    "end": "157080"
  },
  {
    "text": "uh provider naming service is basically um a system that binds a name to a given",
    "start": "157080",
    "end": "162920"
  },
  {
    "text": "value or a given object right so you're probably familiar with naming services",
    "start": "162920",
    "end": "168120"
  },
  {
    "text": "like DNS where we bind the IP addresses to the host names or for example with a",
    "start": "168120",
    "end": "173280"
  },
  {
    "text": "file system that binds the file name to the file itself so directory Services is",
    "start": "173280",
    "end": "179040"
  },
  {
    "text": "a special type type of uh naming service where we are basically binding a special",
    "start": "179040",
    "end": "184840"
  },
  {
    "text": "type of object that is known as a directory object and directory object is nothing else that a collection of",
    "start": "184840",
    "end": "191239"
  },
  {
    "text": "attributes so you're probably familiar with uh elab as an implementation of a directory service and in naab normally",
    "start": "191239",
    "end": "198400"
  },
  {
    "text": "we store things like the employee records with all the collection of attributes like what's the name of the employee what is the email address the",
    "start": "198400",
    "end": "205159"
  },
  {
    "text": "last name the first name and so on so the jdi architect is very simple",
    "start": "205159",
    "end": "210640"
  },
  {
    "start": "208000",
    "end": "208000"
  },
  {
    "text": "it's compound of three different layers the first one is the API that exposes the methods to bind names to to values",
    "start": "210640",
    "end": "218920"
  },
  {
    "text": "for example methods to look up or search for these uh names also methods to",
    "start": "218920",
    "end": "224799"
  },
  {
    "text": "rename a binding or delete a binding and so on then we have the naming manager that is like the core layer of the",
    "start": "224799",
    "end": "231360"
  },
  {
    "text": "architecture that Clues everything together and then we have the J&D SPI the service provider interface and",
    "start": "231360",
    "end": "237680"
  },
  {
    "text": "here's where the uh developers can actually plug different providers they can actually um plug for example a",
    "start": "237680",
    "end": "244439"
  },
  {
    "text": "nailab u Plugin or a DNS or for example RMI or corba so basically jdi will give",
    "start": "244439",
    "end": "251519"
  },
  {
    "text": "access to all these naming and directory Services through the same common interface right so because I go the",
    "start": "251519",
    "end": "259199"
  },
  {
    "start": "258000",
    "end": "258000"
  },
  {
    "text": "snippet is worth a thousand words uh this is a very simple introduction and example of how to use how to use jndi so",
    "start": "259199",
    "end": "266680"
  },
  {
    "text": "in the first lines uh here we have the configuration of the jdi context we are",
    "start": "266680",
    "end": "271720"
  },
  {
    "text": "basically saying that we are going to interact with an RMI registry that is a naming service but where we bind a name",
    "start": "271720",
    "end": "278800"
  },
  {
    "text": "to a given Java object and then that this provider this RMI registry is located at the local host at this given",
    "start": "278800",
    "end": "285479"
  },
  {
    "text": "Port so then we will be able to initialize the jdi initial context and",
    "start": "285479",
    "end": "290560"
  },
  {
    "text": "then from that moment on we can actually bind different um names to objects and",
    "start": "290560",
    "end": "295960"
  },
  {
    "text": "then recover them using the lookup operation we can do that from the very same jbm or different jbms and as we",
    "start": "295960",
    "end": "301960"
  },
  {
    "text": "said before jdi is not just for RMI registry you can actually use any provider type with any provid a URL like",
    "start": "301960",
    "end": "308600"
  },
  {
    "text": "for example in this example down here we are using",
    "start": "308600",
    "end": "313520"
  },
  {
    "text": "ltab so um if we want to bind Java objects to a naming service or D",
    "start": "313880",
    "end": "320280"
  },
  {
    "start": "315000",
    "end": "315000"
  },
  {
    "text": "directory service we can use first of all like a Serial Ser serialization of",
    "start": "320280",
    "end": "326120"
  },
  {
    "text": "the Java objects and we're basically serializing the objects and binding the binary representation of the object to",
    "start": "326120",
    "end": "332880"
  },
  {
    "text": "the given name that we want to give him and as a second option if for example",
    "start": "332880",
    "end": "338120"
  },
  {
    "text": "the objects that we want to bind are not serializable or for example if the binary representation is too large to",
    "start": "338120",
    "end": "344520"
  },
  {
    "text": "fit the naming service we can also use something that jdi introduced that is",
    "start": "344520",
    "end": "349560"
  },
  {
    "text": "called as naming references so we have basically two types of naming references",
    "start": "349560",
    "end": "354639"
  },
  {
    "text": "the first one is refer reference address that is basically the final address of",
    "start": "354639",
    "end": "359800"
  },
  {
    "text": "the of the object that we are that we want to bind to the um naming service so",
    "start": "359800",
    "end": "365960"
  },
  {
    "text": "when we perform the lookup operation we will receive the jndi reference the naming manager will decode this naming",
    "start": "365960",
    "end": "373039"
  },
  {
    "text": "uh reference we'll get the address and then we'll use the address to fetch the final object and return that to the",
    "start": "373039",
    "end": "378240"
  },
  {
    "text": "application code the second type of jdi reference is a remote Factory J&D",
    "start": "378240",
    "end": "384199"
  },
  {
    "text": "reference in this case instead of um pointing to a remote object we are basically pointing to a remote Factory",
    "start": "384199",
    "end": "391120"
  },
  {
    "text": "class that uh needs to be used to actually instantiate the final object that needs to be returned so we again we",
    "start": "391120",
    "end": "398120"
  },
  {
    "text": "perform the lookup we receive the jdi reference we uhct the factory name the",
    "start": "398120",
    "end": "403440"
  },
  {
    "text": "Factory location we fetch that remote class from the remote location and then",
    "start": "403440",
    "end": "409240"
  },
  {
    "text": "we instantiate that factory in order to generate our object so when we are talking about uh loading classes from",
    "start": "409240",
    "end": "416960"
  },
  {
    "start": "416000",
    "end": "416000"
  },
  {
    "text": "remote code bases from a remote location we are normally expecting some kind of",
    "start": "416960",
    "end": "422440"
  },
  {
    "text": "security controls because otherwise attackers are going to be able to provide a random or arbitrary class with",
    "start": "422440",
    "end": "429120"
  },
  {
    "text": "some payload in its Constructor or static initializer for example so we found that within the J&D um stack the",
    "start": "429120",
    "end": "438879"
  },
  {
    "text": "approach to protect this remote class loading is not consistent at all so in the SPI layer we have for example that",
    "start": "438879",
    "end": "445879"
  },
  {
    "text": "for RMI there is a jbm property that needs to be en enbl in order to allow",
    "start": "445879",
    "end": "450919"
  },
  {
    "text": "the remote class loading and this property is normally disable is is disabled by default so even if you",
    "start": "450919",
    "end": "456879"
  },
  {
    "text": "enable this property then a security manager will be enforced to be installed",
    "start": "456879",
    "end": "462319"
  },
  {
    "text": "to protect uh where these classes are being loaded from what kind of code these classes can run and so on so for",
    "start": "462319",
    "end": "469639"
  },
  {
    "text": "ldap is similar but we only have the jbm property there is no security manager enforcement so once that the developers",
    "start": "469639",
    "end": "476360"
  },
  {
    "text": "has um enabled this property the code can actually load remote classes without",
    "start": "476360",
    "end": "481960"
  },
  {
    "text": "any security manager enforcement for Corva there is a security manager enforcement that is always uh enforced",
    "start": "481960",
    "end": "488520"
  },
  {
    "text": "but there is no jbm property and the most interesting part is for the naming manager layer that if you remember is",
    "start": "488520",
    "end": "495520"
  },
  {
    "text": "the layer that is going to decode the jdi references so it's the one that is going to fetch this remote Factory",
    "start": "495520",
    "end": "501599"
  },
  {
    "text": "classes that I mentioned so for the nameing manager there is no jbm property to actually enable or disable is always",
    "start": "501599",
    "end": "508280"
  },
  {
    "text": "enabled and then there is no security manager enforcement to control where we are loading this remote classes from and",
    "start": "508280",
    "end": "514839"
  },
  {
    "text": "so on so this is uh the ideal scenario for an attacker he can actually provide any class and there's not going to be",
    "start": "514839",
    "end": "521640"
  },
  {
    "text": "any specific um control here so that's the introduction to jdi um and now we",
    "start": "521640",
    "end": "528880"
  },
  {
    "text": "are going to see the two new types of vulnerabilities the first one being jdi injection that is simply an input",
    "start": "528880",
    "end": "534839"
  },
  {
    "text": "representation or validation vulnerability where we are uh developers are actually taking un trusted data into",
    "start": "534839",
    "end": "540959"
  },
  {
    "text": "a jdi lookup method and if that's the case the attackers may be able to gain remote code",
    "start": "540959",
    "end": "547240"
  },
  {
    "text": "execution so the attack process resembles the following the attacker first need to bind the payload to the um",
    "start": "547240",
    "end": "555120"
  },
  {
    "start": "548000",
    "end": "548000"
  },
  {
    "text": "naming or directory service of his choice and then once that he finds a vulnerable application he's going to",
    "start": "555120",
    "end": "562680"
  },
  {
    "text": "send the exploit that is basically a a name that when uh looka is going to",
    "start": "562680",
    "end": "568519"
  },
  {
    "text": "point to his own server so he can actually return the malicious payload and run and Trigger the payload in the",
    "start": "568519",
    "end": "576000"
  },
  {
    "start": "576000",
    "end": "576000"
  },
  {
    "text": "server so we said before that when we start when the when we",
    "start": "576000",
    "end": "582279"
  },
  {
    "text": "initialize a jdi context we configure it to work with a given provider type and",
    "start": "582279",
    "end": "588440"
  },
  {
    "text": "with a given provider URL right so in this case for example we are working with RMI registry and with this secure",
    "start": "588440",
    "end": "595120"
  },
  {
    "text": "server at this port so if we perform a lookup this operation should be resolved in a",
    "start": "595120",
    "end": "602720"
  },
  {
    "text": "relatively to this uh provider type and provider URL however this is not true",
    "start": "602720",
    "end": "607880"
  },
  {
    "text": "and the reason is that um jdi implements something that we call internally Dynamic protocol switching and if the",
    "start": "607880",
    "end": "613920"
  },
  {
    "text": "attacker is capable of providing an absolute URL they will be able to overwrite the default um provider type",
    "start": "613920",
    "end": "621600"
  },
  {
    "text": "and also the default provider URL so with that they will be able to point the lookup operation to their own server and",
    "start": "621600",
    "end": "628240"
  },
  {
    "text": "then return the the J anddr reference to trigger the remote code execution uh",
    "start": "628240",
    "end": "634320"
  },
  {
    "text": "payload so attackers can actually provide or use different uh as we saw",
    "start": "634320",
    "end": "640680"
  },
  {
    "start": "637000",
    "end": "637000"
  },
  {
    "text": "before jndi can interact with different naming and directory services like for example RMI ldap Corva and so on so by",
    "start": "640680",
    "end": "649320"
  },
  {
    "text": "providing URLs like the ones on the top of the slide they can actually point to their",
    "start": "649320",
    "end": "654839"
  },
  {
    "text": "own control server using RMI ldap Corva or other protocols so amongst all the uh",
    "start": "654839",
    "end": "663560"
  },
  {
    "text": "protocols that they can use we found that three of them allow attackers to actually gain remote code execution the",
    "start": "663560",
    "end": "669880"
  },
  {
    "text": "first one is using the remote method invocation RMI through the usage of the jdi references or remote objects that we",
    "start": "669880",
    "end": "677720"
  },
  {
    "text": "don't have time to cover during this talk but is uh covered in the white paper that will be released later today",
    "start": "677720",
    "end": "684399"
  },
  {
    "text": "also using Corva uh using the uh interoperable object reference parsing",
    "start": "684399",
    "end": "690639"
  },
  {
    "text": "and also using ldb through serialized objects J anddr reference or remote locations that again we can don't have",
    "start": "690639",
    "end": "697440"
  },
  {
    "text": "time to cover today but is explained in the white paper so let's see how we can gain",
    "start": "697440",
    "end": "704600"
  },
  {
    "text": "remote code execution using the RMI Vector so basically the attacker needs to uh set up his RMI registry and then",
    "start": "704600",
    "end": "712160"
  },
  {
    "text": "bind a jndi reference using a remote Factory so he will be setting like a jdi",
    "start": "712160",
    "end": "718360"
  },
  {
    "text": "reference with any class name and then a factory name and a factory code base that is nothing else that the location",
    "start": "718360",
    "end": "724040"
  },
  {
    "text": "of this Factory class so when the actual code in the jdk that gets this jndi",
    "start": "724040",
    "end": "730560"
  },
  {
    "text": "reference and try to decode this reference oh sorry um they will uh",
    "start": "730560",
    "end": "736279"
  },
  {
    "start": "735000",
    "end": "735000"
  },
  {
    "text": "actually extract the factory class and the Factory location from the uh from",
    "start": "736279",
    "end": "741480"
  },
  {
    "text": "the reference from the J&D reference and then they will be uh loading this class from this remote location if you",
    "start": "741480",
    "end": "748360"
  },
  {
    "text": "remember for the naming manager there is no jbm property to disable this remote class loading and there is no security",
    "start": "748360",
    "end": "754279"
  },
  {
    "text": "manager enforcement so here an attacker can actually provide any class and if there's no security te manager uh they",
    "start": "754279",
    "end": "761079"
  },
  {
    "text": "will succeed on loading this class and then the class is instantiated so the attacker that can provide this remote",
    "start": "761079",
    "end": "767440"
  },
  {
    "text": "Factory they will be able to put the payload in the Constructor or the static",
    "start": "767440",
    "end": "773800"
  },
  {
    "start": "774000",
    "end": "774000"
  },
  {
    "text": "initializer so over to Alex thank you anaro uh the detailed information about",
    "start": "774040",
    "end": "781000"
  },
  {
    "text": "this click to play bypass attack can be found in uh block of Trend Micro a link",
    "start": "781000",
    "end": "786279"
  },
  {
    "text": "you can see on the bottom for our slide here we just try to summarize process of this attack first of all attacker",
    "start": "786279",
    "end": "792480"
  },
  {
    "text": "prepares own uh web server with some HTML page this page contain a pled tag",
    "start": "792480",
    "end": "799120"
  },
  {
    "text": "with J jlmp files that files defines",
    "start": "799120",
    "end": "804519"
  },
  {
    "text": "initial in context as progress class and when victim open this HTML page a new",
    "start": "804519",
    "end": "811560"
  },
  {
    "text": "instance of initial cont context will be created with properties from our uh web",
    "start": "811560",
    "end": "818480"
  },
  {
    "text": "server and at the end of its initialization victim will look up",
    "start": "818480",
    "end": "826320"
  },
  {
    "text": "object from our RMI server RMI server sends uh J ndi reference and uh victim",
    "start": "826320",
    "end": "835160"
  },
  {
    "text": "jvm will ask our server to provide Factory class and attacker is able to",
    "start": "835160",
    "end": "842199"
  },
  {
    "text": "put any Java code in Constructor of this Factory class and it will be executed on a victim's machine it's nice example but",
    "start": "842199",
    "end": "851839"
  },
  {
    "text": "it's not only one attack where J Andi lookup trick is used other example can",
    "start": "851839",
    "end": "858839"
  },
  {
    "start": "852000",
    "end": "852000"
  },
  {
    "text": "be a final gadgets for Java distalization attack we provided a few",
    "start": "858839",
    "end": "864800"
  },
  {
    "text": "already known gadets for example spring framework uh libraries",
    "start": "864800",
    "end": "871680"
  },
  {
    "text": "uh Gadget founded by the thinking a second one is from rtj and used by uh",
    "start": "871680",
    "end": "880160"
  },
  {
    "text": "Maas Kaiser in his Areno uh distalization chain in open J car 7 we",
    "start": "880160",
    "end": "886920"
  },
  {
    "text": "also have found a few interesting gadgets uh first one is a connection",
    "start": "886920",
    "end": "893440"
  },
  {
    "text": "it's from AR jar 2 and very similar to previous one and Setter of statistic",
    "start": "893440",
    "end": "899839"
  },
  {
    "text": "service class from hibernate",
    "start": "899839",
    "end": "904519"
  },
  {
    "text": "libraries as we C lookup J&D lookup method can lead to",
    "start": "905480",
    "end": "913639"
  },
  {
    "text": "remote code execution but in previous attacks uh an attacker was able to",
    "start": "913639",
    "end": "920360"
  },
  {
    "text": "provide code Gadget with this lookup calls what about J ndi injection when",
    "start": "920360",
    "end": "928000"
  },
  {
    "text": "trusted data is directly passed to look up we have found examples of this",
    "start": "928000",
    "end": "935600"
  },
  {
    "text": "vulnerability in the in the wild and we would like to share details about one of",
    "start": "935600",
    "end": "941160"
  },
  {
    "text": "them this vulnerability affects two products topling and Eclipse link they",
    "start": "941160",
    "end": "946600"
  },
  {
    "text": "both are sharing the same core core component because Oracle donated a source code of top link to Eclipse link",
    "start": "946600",
    "end": "954040"
  },
  {
    "text": "project these Frameworks handle a integration of persistent and OB object",
    "start": "954040",
    "end": "959800"
  },
  {
    "text": "transformation and it helps developers to stay more focused on their their primary tasks and don't care about this",
    "start": "959800",
    "end": "967360"
  },
  {
    "text": "integration one of their key feature is restful Services it can very it can be",
    "start": "967360",
    "end": "972720"
  },
  {
    "text": "very convenient because developer can enable enable restful Services just",
    "start": "972720",
    "end": "978880"
  },
  {
    "text": "including jar file in uh liap of his web application and services will be exposed",
    "start": "978880",
    "end": "987720"
  },
  {
    "text": "automatically here we can see how this resource will look we are interesting in the last one",
    "start": "987720",
    "end": "996040"
  },
  {
    "text": "it's base operations this oral will be handled by the next",
    "start": "996040",
    "end": "1001240"
  },
  {
    "text": "code in case of post request call S call session bin internal method will be",
    "start": "1001240",
    "end": "1007440"
  },
  {
    "text": "called and J ndi name will be taken from body of our post request after that",
    "start": "1007440",
    "end": "1015240"
  },
  {
    "text": "lookup will be called with this J ndi name that is full fully controlled by user alar will show us demo how possible",
    "start": "1015240",
    "end": "1024240"
  },
  {
    "text": "attack can look okay so let me switch to the demo",
    "start": "1024240",
    "end": "1030240"
  },
  {
    "text": "um we are going to basically visit a vulnerable application that is a sample",
    "start": "1030240",
    "end": "1036079"
  },
  {
    "text": "application build using jpa and that is the jav persistent API and using the eclipse link reference implementation so",
    "start": "1036079",
    "end": "1042959"
  },
  {
    "text": "it's just a sample application to manage contacts we can add contacts remove them and and so on and if we go to the um SL",
    "start": "1042959",
    "end": "1051600"
  },
  {
    "text": "persistent URL I don't know if you can see it from the last row we can see that we get our response from the restful API",
    "start": "1051600",
    "end": "1058760"
  },
  {
    "text": "so the eclipse link restful apis are enabled so we can take this",
    "start": "1058760",
    "end": "1064080"
  },
  {
    "text": "URL and and take it to a restful client of your choice or just the command line",
    "start": "1064080",
    "end": "1069919"
  },
  {
    "text": "whatever you use and if we uh check this URL we have the same",
    "start": "1069919",
    "end": "1075640"
  },
  {
    "text": "result now we can actually use uh the is um expose restful API to for example",
    "start": "1075640",
    "end": "1082080"
  },
  {
    "text": "browse how to add new contacts how to delete contacts so this is everything is automatically um handled by this restful",
    "start": "1082080",
    "end": "1090240"
  },
  {
    "text": "API that is automatically generated by Eclipse link and top link now if we go back to the base operation and use a",
    "start": "1090240",
    "end": "1096280"
  },
  {
    "text": "post request that is the one that was handled by the code sold by Alex we just",
    "start": "1096280",
    "end": "1102039"
  },
  {
    "text": "are going to send a Json um request and here is our injection point the J&D name",
    "start": "1102039",
    "end": "1108159"
  },
  {
    "text": "is the one that is going to be resolved by the um persistent resource of the restful API so we are going to point it",
    "start": "1108159",
    "end": "1114320"
  },
  {
    "text": "to our own RMI registry and in our own J uh sorry RMI registry we are going to",
    "start": "1114320",
    "end": "1120400"
  },
  {
    "text": "bind the Kaboom name to a factory a remote Factory jdi uh reference and this",
    "start": "1120400",
    "end": "1127400"
  },
  {
    "text": "remote uh uh this remote Factory is located in our own control HTTP server",
    "start": "1127400",
    "end": "1133919"
  },
  {
    "text": "so with that we have everything prepared for the attack if we go to the victim machine we see that there is no calculator running and that's exactly",
    "start": "1133919",
    "end": "1141240"
  },
  {
    "text": "what the factory class is going to do as soon as we send this payload the factory",
    "start": "1141240",
    "end": "1146360"
  },
  {
    "text": "class will be retrieved and instantiated we get some exception about some naming exception and if we go back to the",
    "start": "1146360",
    "end": "1153360"
  },
  {
    "text": "victim machine we can see that the payload the calculator has been executed",
    "start": "1153360",
    "end": "1159200"
  },
  {
    "text": "and we have the calculator running in and compromised the server thank you arar uh fortunately this vulnerability",
    "start": "1159200",
    "end": "1166760"
  },
  {
    "text": "is fixed yet it's fixed already and if you are using top link uh we highly",
    "start": "1166760",
    "end": "1172919"
  },
  {
    "text": "recommend you to apply the latest uh July critical patch update of Oracle as",
    "start": "1172919",
    "end": "1179240"
  },
  {
    "text": "soon as possible if you're using Eclipse link you need to update your libraries",
    "start": "1179240",
    "end": "1184360"
  },
  {
    "text": "to the latest version as well uh we just saw what we can achieve by RMI Vector but in the beginning of our talk we said",
    "start": "1184360",
    "end": "1191320"
  },
  {
    "text": "that is not only one protocol supported in Lo up calls uh the next our Vector is",
    "start": "1191320",
    "end": "1197400"
  },
  {
    "text": "corba uh Java supports three types of corba oras we can see them all on our slide and",
    "start": "1197400",
    "end": "1204840"
  },
  {
    "text": "these oras can be used to Lo up objects from corba server and corba server will",
    "start": "1204840",
    "end": "1210000"
  },
  {
    "text": "respond by sending interoperable object reference or just I it can be in binary",
    "start": "1210000",
    "end": "1217120"
  },
  {
    "start": "1212000",
    "end": "1212000"
  },
  {
    "text": "format or uh starts with i prefix and string of hex",
    "start": "1217120",
    "end": "1222600"
  },
  {
    "text": "digits uh it may contain a lot of information like version poost p object",
    "start": "1222600",
    "end": "1229320"
  },
  {
    "text": "key we are interested in two next Fields it's type ID from this uh field Java",
    "start": "1229320",
    "end": "1235880"
  },
  {
    "text": "will take class name of factory and stop classes and code base from what location",
    "start": "1235880",
    "end": "1241480"
  },
  {
    "text": "this class will be loaded so if attacker specifies own type ID and code base he",
    "start": "1241480",
    "end": "1248080"
  },
  {
    "text": "will be able to execute own uh Java code but corbo Vector has own limitation",
    "start": "1248080",
    "end": "1256000"
  },
  {
    "start": "1253000",
    "end": "1253000"
  },
  {
    "text": "and requirements and it is not relevant for for a a default configuration of jvm",
    "start": "1256000",
    "end": "1262200"
  },
  {
    "text": "it will work only if security manager enabled furthermore this security manager should allow access to our",
    "start": "1262200",
    "end": "1269039"
  },
  {
    "text": "remote code base we provided a few uh examples of permission that we can use",
    "start": "1269039",
    "end": "1275240"
  },
  {
    "text": "for that first one is soccer permission this line uh allows to connect to any",
    "start": "1275240",
    "end": "1281279"
  },
  {
    "text": "host but only to defined ports it's okay for us we can start corba server on any port what we need uh file Mission this",
    "start": "1281279",
    "end": "1290080"
  },
  {
    "text": "uh example allow read access not only on local file system but on remote location",
    "start": "1290080",
    "end": "1295640"
  },
  {
    "text": "as well so we can share our folder on our PC and a Target application will try",
    "start": "1295640",
    "end": "1301240"
  },
  {
    "text": "to load out classes from there uploading feature can be a boost as",
    "start": "1301240",
    "end": "1306960"
  },
  {
    "text": "well okay let's imagine that we achieved remote code execution but our Java code",
    "start": "1306960",
    "end": "1312440"
  },
  {
    "text": "code will be limited by security manager because it's loaded from untrusted",
    "start": "1312440",
    "end": "1318799"
  },
  {
    "text": "codebase we are maximalist and wanted to get all permission for for our malicious",
    "start": "1318799",
    "end": "1324720"
  },
  {
    "text": "code so we installed and configured a few application servers from well known",
    "start": "1324720",
    "end": "1333000"
  },
  {
    "text": "vendors enabled security manager with with default security policy files and",
    "start": "1333000",
    "end": "1339880"
  },
  {
    "text": "tried to get these all permissions after a few days of our research we were able",
    "start": "1339880",
    "end": "1345360"
  },
  {
    "text": "to get this old permission in all our application servers we have reported all these",
    "start": "1345360",
    "end": "1352600"
  },
  {
    "text": "findings to the vendors but unfortunately this issue is not are not",
    "start": "1352600",
    "end": "1358039"
  },
  {
    "text": "fixed yet and we are not able to disclosure neither neither names of this application servers nor details how we",
    "start": "1358039",
    "end": "1365679"
  },
  {
    "text": "achieved that but our after our findings we",
    "start": "1365679",
    "end": "1371679"
  },
  {
    "start": "1368000",
    "end": "1368000"
  },
  {
    "text": "became more interested in corbal parties and possible attack scenarios with this protocol so first question was is it",
    "start": "1371679",
    "end": "1379919"
  },
  {
    "text": "possible to achieve code execution on the corba server site why not if the server runs with security manager and",
    "start": "1379919",
    "end": "1387159"
  },
  {
    "text": "policy allows allows uh us to low out our our low classes from our code code",
    "start": "1387159",
    "end": "1395400"
  },
  {
    "text": "base we will be able to uh perform the same",
    "start": "1395400",
    "end": "1400240"
  },
  {
    "text": "attack furthermore if you can remember we already had installed a few",
    "start": "1400760",
    "end": "1405960"
  },
  {
    "text": "application server so we quickly test them and figure out that some of them",
    "start": "1405960",
    "end": "1412919"
  },
  {
    "text": "are exposing corbal listeners in default configurations have needed permission in their policy files and as we saw a bit",
    "start": "1412919",
    "end": "1421039"
  },
  {
    "text": "earlier we were able to get all permission for untrusted code so if a",
    "start": "1421039",
    "end": "1426720"
  },
  {
    "text": "customer Ena security manager in this application server he can automatically open back doors for remote code",
    "start": "1426720",
    "end": "1433320"
  },
  {
    "text": "execution attack other place where we met",
    "start": "1433320",
    "end": "1439200"
  },
  {
    "start": "1437000",
    "end": "1437000"
  },
  {
    "text": "I parer is a read object method of stop classes uh as you may know read object",
    "start": "1439200",
    "end": "1446720"
  },
  {
    "text": "uh method it's one of the entry point entry points for",
    "start": "1446720",
    "end": "1451880"
  },
  {
    "text": "distalization attacks so if Target application meets a mentioned",
    "start": "1451880",
    "end": "1457320"
  },
  {
    "text": "requirements about security manager and its policy plus uh attacker is able to",
    "start": "1457320",
    "end": "1463799"
  },
  {
    "text": "provide own data for data for this realization he will not need any",
    "start": "1463799",
    "end": "1469679"
  },
  {
    "text": "additional gadgets he will be able to achieve remote code execution by using",
    "start": "1469679",
    "end": "1474840"
  },
  {
    "text": "only this one we have found more than 20 such classes in Oracle jel libraries and",
    "start": "1474840",
    "end": "1481559"
  },
  {
    "text": "more than 50 in open J DEA after our review of libraries from application",
    "start": "1481559",
    "end": "1488320"
  },
  {
    "text": "servers this number was increased to more than 200 also we figure out that ID",
    "start": "1488320",
    "end": "1494679"
  },
  {
    "text": "compiler automatically generate this code for client stop classes so we can",
    "start": "1494679",
    "end": "1500760"
  },
  {
    "text": "expect many such classes in customer libraries we can give some summary Coral",
    "start": "1500760",
    "end": "1510120"
  },
  {
    "text": "Vector can be very dangerous but only in case if your target has enabled security",
    "start": "1510120",
    "end": "1515559"
  },
  {
    "text": "manager and its policy has some locks",
    "start": "1515559",
    "end": "1520640"
  },
  {
    "text": "permissions so we saw that we can use RMI vector or Corva Vector to exploit",
    "start": "1520640",
    "end": "1526399"
  },
  {
    "start": "1522000",
    "end": "1522000"
  },
  {
    "text": "jdi injection vulnerabilities using an ldap Vector is also possible by actually",
    "start": "1526399",
    "end": "1532760"
  },
  {
    "text": "binding a Java object into the ldap directory and then um triggering the execution of the payload during the",
    "start": "1532760",
    "end": "1539240"
  },
  {
    "text": "decoding of these objects this overlaps with the new vulnerability that we are presenting now so we are going to skip",
    "start": "1539240",
    "end": "1544640"
  },
  {
    "text": "this vector and explain it when explaining the ldap entry poisoning so",
    "start": "1544640",
    "end": "1550039"
  },
  {
    "text": "this is the second vulnerability that we found while researching the jdi um",
    "start": "1550039",
    "end": "1555240"
  },
  {
    "text": "technology and basically if an attacker can modify an ldap entry in an ldap",
    "start": "1555240",
    "end": "1561279"
  },
  {
    "text": "server or modify the response from an ldap search they may be able to execute",
    "start": "1561279",
    "end": "1566559"
  },
  {
    "text": "or gain remote code execution on any vulnerable applications that are actually performing these elap searches",
    "start": "1566559",
    "end": "1572559"
  },
  {
    "text": "so this is a second order vulnerability in the first stage the attacker need to",
    "start": "1572559",
    "end": "1577600"
  },
  {
    "text": "poison a nail up entry and by poisoning we mean that they need to inject uh or",
    "start": "1577600",
    "end": "1583440"
  },
  {
    "text": "modify some elab entry attributes and once that these entry or",
    "start": "1583440",
    "end": "1589000"
  },
  {
    "text": "entries are poisoned any applications that are searching for these poison",
    "start": "1589000",
    "end": "1595080"
  },
  {
    "text": "entries will basically open the door for the attacker to get remote code execution on on those vulnerable",
    "start": "1595080",
    "end": "1601880"
  },
  {
    "text": "applications so we need to understand the difference between a lookup and a search basically lookups are meant for",
    "start": "1601880",
    "end": "1608120"
  },
  {
    "start": "1603000",
    "end": "1603000"
  },
  {
    "text": "naming services so we try to get whatever is bound to a name like an object or a file for example but we uh",
    "start": "1608120",
    "end": "1616360"
  },
  {
    "text": "want to get the object complete completely in sear operations uh that",
    "start": "1616360",
    "end": "1621559"
  },
  {
    "text": "those are normally meant for uh dealing with directory services like elab and we are not interested in receiving an",
    "start": "1621559",
    "end": "1628159"
  },
  {
    "text": "object but some collection of attributes like for example you are probably familiar with these elab searches where",
    "start": "1628159",
    "end": "1633840"
  },
  {
    "text": "we are using for example searching for the user J in the uh organization unit people and so on and when we perform the",
    "start": "1633840",
    "end": "1641080"
  },
  {
    "text": "search we can get all the attributes of the entry or just a bunch of them by",
    "start": "1641080",
    "end": "1646320"
  },
  {
    "text": "controlling which attributes we are inter restone so searches are not getting us Java object",
    "start": "1646320",
    "end": "1653080"
  },
  {
    "text": "so there is no remote code execution payload or entry for us however there is",
    "start": "1653080",
    "end": "1658640"
  },
  {
    "start": "1658000",
    "end": "1658000"
  },
  {
    "text": "a special type of search um that we call object returning searches and basically",
    "start": "1658640",
    "end": "1664559"
  },
  {
    "text": "you can provide a search control instance to a search operation this search control is",
    "start": "1664559",
    "end": "1670159"
  },
  {
    "text": "basically meant to define the scope of the search and what's expected from the from the search so this is from the",
    "start": "1670159",
    "end": "1676840"
  },
  {
    "text": "Oracle documentation it basically says that the if the search control contains this set returning object flag set to",
    "start": "1676840",
    "end": "1683440"
  },
  {
    "text": "true then whatever attributes are received as part of the response they",
    "start": "1683440",
    "end": "1688760"
  },
  {
    "text": "will be used to uh reconstruct a Java object or if these attributes are not",
    "start": "1688760",
    "end": "1694559"
  },
  {
    "text": "present then it will basically create a wrapper around these ldap attributes so my opinion is even clear",
    "start": "1694559",
    "end": "1702840"
  },
  {
    "start": "1701000",
    "end": "1701000"
  },
  {
    "text": "clearer in in the code itself so this is part of the uh jdk class that handles",
    "start": "1702840",
    "end": "1709679"
  },
  {
    "text": "the the search response and as you can see here we check for the get returning",
    "start": "1709679",
    "end": "1715679"
  },
  {
    "text": "object flag uh attribute and if that's enabled if that's true then we will",
    "start": "1715679",
    "end": "1720919"
  },
  {
    "text": "check the attributes in the response for some attributes that are referenc in the Java attributes an numeration if those",
    "start": "1720919",
    "end": "1728840"
  },
  {
    "text": "attributes are present then we will proceed with the coding the attributes as a Java object otherwise we will just",
    "start": "1728840",
    "end": "1735440"
  },
  {
    "text": "create the wrapper and return the wrapper so after after auditing like really many applications performing",
    "start": "1735440",
    "end": "1741880"
  },
  {
    "text": "returning object um searches we found that most of them in not of all of them",
    "start": "1741880",
    "end": "1747360"
  },
  {
    "text": "the developers were actually expecting to get this wrapper they were not expecting to get any Java objects at all",
    "start": "1747360",
    "end": "1752720"
  },
  {
    "text": "but because this piece of code is before the rubber generation then this will be executed if the if the Java attributes",
    "start": "1752720",
    "end": "1759760"
  },
  {
    "text": "are present in the response so these Java attributes are defined in the Java schema that needs to be installed in the",
    "start": "1759760",
    "end": "1766080"
  },
  {
    "start": "1762000",
    "end": "1762000"
  },
  {
    "text": "elab server is normally installed or PR install in some of them like Apachi DS for example um they basically Define",
    "start": "1766080",
    "end": "1773600"
  },
  {
    "text": "different ways of representing a Java object in a ldap server so basically you can use serialization you can use jdi",
    "start": "1773600",
    "end": "1780600"
  },
  {
    "text": "references you can also use maral objects or remote location this one is deprecated but it's still an attack",
    "start": "1780600",
    "end": "1787640"
  },
  {
    "text": "Vector because the the code is still present in the jdk uh",
    "start": "1787640",
    "end": "1793039"
  },
  {
    "text": "libraries so we mentioned that we need the attacker needs to poison s entry by",
    "start": "1793039",
    "end": "1798240"
  },
  {
    "start": "1794000",
    "end": "1794000"
  },
  {
    "text": "poisoning we basically mean that we need uh they need to actually inject some special attributes so this is a sample",
    "start": "1798240",
    "end": "1805440"
  },
  {
    "text": "entry for J Smith user and the way that we can um poison this entry using Java",
    "start": "1805440",
    "end": "1811320"
  },
  {
    "text": "cialization is by adding this Java cialized data this Java codebase and these Java class name attributes so",
    "start": "1811320",
    "end": "1817000"
  },
  {
    "text": "basically in Java serialized data we can put the the payload that is going to get deserialized and then if this trust URL",
    "start": "1817000",
    "end": "1824960"
  },
  {
    "text": "code based property is enabled in the jbm that is not to normal because it's disabled by default the attacker will be",
    "start": "1824960",
    "end": "1831000"
  },
  {
    "text": "able to provide his own classes for the distalization attack basically located in this Java code base if this is not uh",
    "start": "1831000",
    "end": "1838440"
  },
  {
    "text": "enabled then the attacker can actually proceed with a regular Java distalization attack and using gadet from the from the local class path but",
    "start": "1838440",
    "end": "1845480"
  },
  {
    "text": "normally attackers won't use this attack Vector because using J andd references is more is much",
    "start": "1845480",
    "end": "1851640"
  },
  {
    "start": "1849000",
    "end": "1849000"
  },
  {
    "text": "simple so uh to poison an entry and with with a jdi reference",
    "start": "1851640",
    "end": "1858480"
  },
  {
    "text": "uh all that the attacker needs to do is add this Java naming reference value to the object class attribute and then add",
    "start": "1858480",
    "end": "1865399"
  },
  {
    "text": "this Java code base um Java Factory and Java class name those are the same one that we defined in the RMI",
    "start": "1865399",
    "end": "1872320"
  },
  {
    "text": "Vector so this is the way that the attackers can actually poison perform the poisoning of the entries but how can",
    "start": "1872320",
    "end": "1879039"
  },
  {
    "text": "they actually get the access to compromise to poison an entry in the",
    "start": "1879039",
    "end": "1884200"
  },
  {
    "text": "first place so maybe we have like this uh sample scenarios probably there are",
    "start": "1884200",
    "end": "1889519"
  },
  {
    "text": "more or um but this is u i mean it depends on the attacker on the attacker",
    "start": "1889519",
    "end": "1895760"
  },
  {
    "text": "how the attacker what the level of of compromise the attacker has so for example rug employees if you have a rug",
    "start": "1895760",
    "end": "1902919"
  },
  {
    "text": "employee in your uh organization that can access the yab server he will be",
    "start": "1902919",
    "end": "1907960"
  },
  {
    "text": "able to poison any number of entries uh if he has like reden for that but even",
    "start": "1907960",
    "end": "1913360"
  },
  {
    "text": "if you are a regular employee and you are not the Y up administrator in many default polic is an employee can",
    "start": "1913360",
    "end": "1919159"
  },
  {
    "text": "actually modify his own attributes instead for a list of blacklisted attributes so normally you don't want",
    "start": "1919159",
    "end": "1925159"
  },
  {
    "text": "your employees to change their email address or their password without going through the password management tool but",
    "start": "1925159",
    "end": "1930360"
  },
  {
    "text": "they can modify the home address or even add new attributes so they can actually use that Vector to poison an entry the",
    "start": "1930360",
    "end": "1937240"
  },
  {
    "text": "second one is vulnerable elab server if your El up server is vulnerable to any of the known CVS for open L up apach DS",
    "start": "1937240",
    "end": "1944399"
  },
  {
    "text": "active directory then the attacker will be able to compromise the server and use that to poison entries in the in the",
    "start": "1944399",
    "end": "1950600"
  },
  {
    "text": "server um also a different scenario is if you have a vulnerable application that is in interacting integrated with",
    "start": "1950600",
    "end": "1957440"
  },
  {
    "text": "elab and the attacker can compromise this application then they will be able to use the credentials uh the elab",
    "start": "1957440",
    "end": "1964159"
  },
  {
    "text": "credentials to proxy um pivot into the elab server and compromise or poison any",
    "start": "1964159",
    "end": "1969240"
  },
  {
    "text": "number of entries and we have like more ideas like for example most of the modern elab",
    "start": "1969240",
    "end": "1974519"
  },
  {
    "text": "servers normally are exposing U restful API uh soap web service dsml Gateway and",
    "start": "1974519",
    "end": "1981080"
  },
  {
    "text": "this is basically just uh increasing the attack surface for the attackers so any vulnerabilities and any of these apis",
    "start": "1981080",
    "end": "1987600"
  },
  {
    "text": "gateways or third party application that integrate with the elab service will be possible for the an attacker to use to",
    "start": "1987600",
    "end": "1994080"
  },
  {
    "text": "compromise this the server and and poison entries so back to Alex according to the",
    "start": "1994080",
    "end": "2002240"
  },
  {
    "start": "1999000",
    "end": "1999000"
  },
  {
    "text": "this attack scenario we reduced uh General processes to following two the",
    "start": "2002240",
    "end": "2007960"
  },
  {
    "text": "first one we can see on this slide uh first of all attackers poisons uh D",
    "start": "2007960",
    "end": "2013559"
  },
  {
    "text": "entry to in D server after that he interacts with uh Target application uh",
    "start": "2013559",
    "end": "2021559"
  },
  {
    "text": "to for to force DB search and application uh request uh sends a dub",
    "start": "2021559",
    "end": "2029559"
  },
  {
    "text": "search request to the dub server and this Lop server returns our poisoned",
    "start": "2029559",
    "end": "2034639"
  },
  {
    "text": "entry application tries to decode this this ENT ENT and will fetch Factory",
    "start": "2034639",
    "end": "2040760"
  },
  {
    "text": "class from our our server and after receiving the the this class uh",
    "start": "2040760",
    "end": "2049240"
  },
  {
    "text": "Target application will will execute Java code from The Constructor of",
    "start": "2049240",
    "end": "2054358"
  },
  {
    "text": "factory class despite the second scenario is not",
    "start": "2054359",
    "end": "2059560"
  },
  {
    "start": "2058000",
    "end": "2058000"
  },
  {
    "text": "very likely it is still possible for it an attacker should be able to perform",
    "start": "2059560",
    "end": "2064960"
  },
  {
    "text": "Man in the middle attack between Target application andb server so ATT tracker",
    "start": "2064960",
    "end": "2071480"
  },
  {
    "text": "interacts with application to force search or just wait for search request",
    "start": "2071480",
    "end": "2076839"
  },
  {
    "text": "from the application from the application then here modifies lab",
    "start": "2076839",
    "end": "2084520"
  },
  {
    "text": "response and injects uh own Java attributes in the DB",
    "start": "2084520",
    "end": "2090960"
  },
  {
    "text": "response after that the next steps are the very similar to the previous ones so",
    "start": "2090960",
    "end": "2097040"
  },
  {
    "text": "we can s back to Alara and alvara will describe example of such attack and show",
    "start": "2097040",
    "end": "2103119"
  },
  {
    "text": "our next demo thank you so um sorry um because",
    "start": "2103119",
    "end": "2111119"
  },
  {
    "text": "this is a brand new vulnerability we found like many many instances of L up entry poisoning in different products",
    "start": "2111119",
    "end": "2118560"
  },
  {
    "text": "also in L up connectors L up libraries L up Realms and so on we have reported all",
    "start": "2118560",
    "end": "2124200"
  },
  {
    "text": "of them uh to the corresponding vectors most of them are still working on fixing them some of them have already fixed",
    "start": "2124200",
    "end": "2131079"
  },
  {
    "text": "them and some of them have uh decided to accept the risk so one of these are",
    "start": "2131079",
    "end": "2136920"
  },
  {
    "text": "Sprint security and so we are going to uh show you an example of an ELD up entry poisoning using Sprint security as",
    "start": "2136920",
    "end": "2143280"
  },
  {
    "text": "the example so Spring Security is a very popular project probably all of you know Spring Security uh is used uh to provide",
    "start": "2143280",
    "end": "2151000"
  },
  {
    "text": "authentication and authorization to Java applications and more things like",
    "start": "2151000",
    "end": "2156359"
  },
  {
    "text": "security headers and other security controls and it contains a the Spring Security El up module that is referenced",
    "start": "2156359",
    "end": "2163119"
  },
  {
    "text": "by more than 1,300 artifacts in maen central so it's really popular that performs search",
    "start": "2163119",
    "end": "2170240"
  },
  {
    "text": "authentication and since the version three uh to Z they are performing this",
    "start": "2170240",
    "end": "2175760"
  },
  {
    "text": "search using this returning object flag set to true meaning that whatever response they get from the elabs server",
    "start": "2175760",
    "end": "2182240"
  },
  {
    "text": "they are going to try to decode those attributes as an Java object and so the attacker will be able to poison these",
    "start": "2182240",
    "end": "2188839"
  },
  {
    "text": "attributes authenticate with the user and then compromise the vulnerable",
    "start": "2188839",
    "end": "2194040"
  },
  {
    "text": "application so let's see a demo of this",
    "start": "2194040",
    "end": "2199839"
  },
  {
    "text": "attack so this is a very simple sample application uh that is using Sprint",
    "start": "2203359",
    "end": "2208520"
  },
  {
    "text": "security for authentication we can log into this sample application with our user that is",
    "start": "2208520",
    "end": "2215079"
  },
  {
    "text": "Larry and then just uh a dami application that shows that we",
    "start": "2215079",
    "end": "2220760"
  },
  {
    "text": "are in and nothing else so we can log out and proceed to poison the our entry",
    "start": "2220760",
    "end": "2228280"
  },
  {
    "text": "we are a to poisoning our Larry account so we can use some Python scripts uh to",
    "start": "2228280",
    "end": "2233920"
  },
  {
    "text": "list the attributes of this Larry account we can see that contains the um password secret the um uid Larry and so",
    "start": "2233920",
    "end": "2243200"
  },
  {
    "text": "on these are the regular attributes now we can poison it by adding this special",
    "start": "2243200",
    "end": "2248480"
  },
  {
    "text": "Java attributes so if we list the attributes after poison it we can see",
    "start": "2248480",
    "end": "2253520"
  },
  {
    "text": "that we have some special new attributes we have the Java Factory uh we have also the N Java",
    "start": "2253520",
    "end": "2260800"
  },
  {
    "text": "naming reference value for the object class we have the Java code base and we",
    "start": "2260800",
    "end": "2266319"
  },
  {
    "text": "have the the Java class name so now the entry is poisoned and if we just try to log in into the as well we need to start",
    "start": "2266319",
    "end": "2273119"
  },
  {
    "text": "the the server that is serving the factory class if we go back to the big bigtim",
    "start": "2273119",
    "end": "2279240"
  },
  {
    "text": "machine we can see that there is no calculator running and now just by trying to log in this will force the",
    "start": "2279240",
    "end": "2286440"
  },
  {
    "text": "search of the L user even with a wrong password the search will be performed",
    "start": "2286440",
    "end": "2291800"
  },
  {
    "text": "the result will be decoded as a Java object and we will be able to compromise any application using Spring",
    "start": "2291800",
    "end": "2299319"
  },
  {
    "text": "Security thank you so with that we are going to wrap up the presentation some",
    "start": "2302079",
    "end": "2307880"
  },
  {
    "start": "2307000",
    "end": "2307000"
  },
  {
    "text": "brief recommendations uh so for developers and operations do not take",
    "start": "2307880",
    "end": "2313680"
  },
  {
    "text": "untrusted data into any lookup jdi lookup method or any wrapper around this",
    "start": "2313680",
    "end": "2319400"
  },
  {
    "text": "jdi lookup method if you have to do so sanitize the input and um verify that",
    "start": "2319400",
    "end": "2325200"
  },
  {
    "text": "there is not you are not taking absolute URLs that can perform this Dynamic protocol switching also if you are",
    "start": "2325200",
    "end": "2331880"
  },
  {
    "text": "writing an integration with um with elab servers you may want to not use this",
    "start": "2331880",
    "end": "2338400"
  },
  {
    "text": "object returning searches and if you need to get this elap context wrapper then just get the attributes yourself",
    "start": "2338400",
    "end": "2344720"
  },
  {
    "text": "and then create the wrapper yourself instead of relying on on the jdk jdk code for that so verify and check your",
    "start": "2344720",
    "end": "2352880"
  },
  {
    "text": "jbm properties um maybe your application server jbm properties and verify that",
    "start": "2352880",
    "end": "2358280"
  },
  {
    "text": "you don't have any remote class loading enabled if that's not U necessary for",
    "start": "2358280",
    "end": "2363839"
  },
  {
    "text": "your application because that's normally something from the past and if you don't need you should be disabled in it because attackers can abuse that to U",
    "start": "2363839",
    "end": "2372040"
  },
  {
    "text": "make their attacks easier um for a auditor point of view uh carefully audit",
    "start": "2372040",
    "end": "2377319"
  },
  {
    "text": "your security uh manager policy we found that as Alex said we could uh bypass all",
    "start": "2377319",
    "end": "2383000"
  },
  {
    "text": "of the security manager policies and the default policies that are provided for application servers um we found that",
    "start": "2383000",
    "end": "2388839"
  },
  {
    "text": "they are giving all permissions to to many things and that can be abused also use uh static analysis tools uh for",
    "start": "2388839",
    "end": "2396200"
  },
  {
    "text": "finding this vulnerabilities very easy to uh find them using static analysis both jdi injection and L entry poing for",
    "start": "2396200",
    "end": "2404480"
  },
  {
    "text": "pen testers fast your web applications using U this GDI vectors probably RMI is",
    "start": "2404480",
    "end": "2411079"
  },
  {
    "text": "enough but you want to make sure and try to use the El up or the corv vectors as well and also it's a good idea to poison",
    "start": "2411079",
    "end": "2418319"
  },
  {
    "text": "a a a control test account in your ldap server and try to log in into every",
    "start": "2418319",
    "end": "2425760"
  },
  {
    "text": "application that use l authentication and probably you will be getting lots and lots of cells coming back from these",
    "start": "2425760",
    "end": "2432720"
  },
  {
    "text": "applications there are really many many applications vulnerable to to this attack and just the main takeaways how",
    "start": "2432720",
    "end": "2439920"
  },
  {
    "start": "2434000",
    "end": "2434000"
  },
  {
    "text": "did your application for these two new types of vulnerabilities remember that the first slide was that these attackers",
    "start": "2439920",
    "end": "2446319"
  },
  {
    "text": "these Pon storm attackers were actually using this J&D tricks against the NATO and White House employees so they know",
    "start": "2446319",
    "end": "2453520"
  },
  {
    "text": "about these tricks and probably they know about J&D injection andap poisoning so just verify that you are not",
    "start": "2453520",
    "end": "2459839"
  },
  {
    "text": "vulnerable to these vulnerabilities carefully protect your elab servers and periodically audit your ldb server and",
    "start": "2459839",
    "end": "2466000"
  },
  {
    "text": "verify that you don't have any entry with ldb sorry with Java attributes if you are not using your ldb server for",
    "start": "2466000",
    "end": "2472280"
  },
  {
    "text": "storing Java object that is something that is not very common and again uh if you're using a",
    "start": "2472280",
    "end": "2477800"
  },
  {
    "text": "security manager make sure that you understand everything you are giving all access or permission to and with that",
    "start": "2477800",
    "end": "2484520"
  },
  {
    "text": "thank you very much if you have any questions will be glad to take them there's a microphone in the aisle",
    "start": "2484520",
    "end": "2491599"
  },
  {
    "text": "so thank [Applause]",
    "start": "2491599",
    "end": "2498650"
  },
  {
    "text": "you you very much is it on",
    "start": "2502359",
    "end": "2507240"
  },
  {
    "text": "or great presentation thanks just one question about what you said what would be the rational for spring to accept the",
    "start": "2507720",
    "end": "2516079"
  },
  {
    "text": "risk what like what was their point they actually were very responsive during the",
    "start": "2516079",
    "end": "2521240"
  },
  {
    "text": "disclosure of the issue and they Tria and we propose different solutions to fix the issue at the end of this triat",
    "start": "2521240",
    "end": "2528839"
  },
  {
    "text": "they decided to not fix the issue and accept the risk and I don't want to speak for them so I we thought that it's",
    "start": "2528839",
    "end": "2537560"
  },
  {
    "text": "fair for the users of Sprint security to know that and decide if they want to accept the risk or not not aspr security",
    "start": "2537560",
    "end": "2546039"
  },
  {
    "text": "more questions I more",
    "start": "2554839",
    "end": "2559160"
  },
  {
    "text": "okay for the uh Lup um poisoning right uh the sync is it is in the search uh",
    "start": "2562160",
    "end": "2571720"
  },
  {
    "text": "like Metals right so spring is an example of an app that uses uh that type",
    "start": "2571720",
    "end": "2578079"
  },
  {
    "text": "of call which I assume it's just a Java API right yeah so spring is basically",
    "start": "2578079",
    "end": "2584480"
  },
  {
    "text": "regarding of what search control you are passing to this search operation they have a an a wrapper that in the last",
    "start": "2584480",
    "end": "2591720"
  },
  {
    "text": "minute is uh just modifying the search control and enabling this uh returning object flag okay so have you found an",
    "start": "2591720",
    "end": "2598760"
  },
  {
    "text": "actual call inside the you know J that it's it's doing the same like it's",
    "start": "2598760",
    "end": "2604359"
  },
  {
    "text": "considering this type of attributes and and then uh like actually accepting the",
    "start": "2604359",
    "end": "2610520"
  },
  {
    "text": "the attrib with the payload and everything or it's it's basically so yeah the bottom line is like is it is",
    "start": "2610520",
    "end": "2617400"
  },
  {
    "text": "really like an implementation type of bug where people would need to carefully uh decide not to trust those",
    "start": "2617400",
    "end": "2624240"
  },
  {
    "text": "attribute or or you know if they just use a specific metal call inside a",
    "start": "2624240",
    "end": "2630359"
  },
  {
    "text": "j so um your question was if um people are taking should be and regular or um",
    "start": "2630359",
    "end": "2638880"
  },
  {
    "text": "legitimate uses for these attributes yeah so I mean like in so if you just use Java API right for for like search",
    "start": "2638880",
    "end": "2646119"
  },
  {
    "text": "like is the attribute consider is is the attrib you're using to inject a Java class consider or or it's something that",
    "start": "2646119",
    "end": "2653440"
  },
  {
    "text": "the developer needs to extend so um if you are just writing an",
    "start": "2653440",
    "end": "2660119"
  },
  {
    "text": "application that is integrating with h up server and just don't use this uh returning object flag because the only",
    "start": "2660119",
    "end": "2667200"
  },
  {
    "text": "reason for that is either you want to actually deserialize or or decode this Java object so in that case use it uh",
    "start": "2667200",
    "end": "2673800"
  },
  {
    "text": "that's all uh good but if you want this elab context wrapper then don't use this",
    "start": "2673800",
    "end": "2679920"
  },
  {
    "text": "returning object flag to generate this wrapper for you just get the attributes and use the attributes to create your",
    "start": "2679920",
    "end": "2685079"
  },
  {
    "text": "own grapper okay so I don't know if that answ yeah did answer yes okay",
    "start": "2685079",
    "end": "2690760"
  },
  {
    "text": "perfect one more question yeah uh yeah question about the gmdi injection uh if",
    "start": "2690760",
    "end": "2697319"
  },
  {
    "text": "the authentification is unable uh I'm thinking about the use case for if glassfish or gbus has the IOP Port open",
    "start": "2697319",
    "end": "2706359"
  },
  {
    "text": "uh if authentification is enabled are you able to do some lookup prior authentification or this will block all",
    "start": "2706359",
    "end": "2713480"
  },
  {
    "text": "the risk you are talking about the eclipse link and and top uh or in",
    "start": "2713480",
    "end": "2718839"
  },
  {
    "text": "general I don't remember if it's RMI or corba protocol but some some container",
    "start": "2718839",
    "end": "2724400"
  },
  {
    "text": "uh have the port open to do a lookup and uh you mean",
    "start": "2724400",
    "end": "2730160"
  },
  {
    "text": "uh the cor listeners yeah the the first part of the so I say as we said on on",
    "start": "2730160",
    "end": "2736160"
  },
  {
    "text": "our presentation uh you need to have enable security manager and need to have",
    "start": "2736160",
    "end": "2741319"
  },
  {
    "text": "access to your remote C remote code or local code you need to upload file there",
    "start": "2741319",
    "end": "2746680"
  },
  {
    "text": "and uh if your security manager enabled this uh Vector is open okay so even if",
    "start": "2746680",
    "end": "2753319"
  },
  {
    "text": "uh authentification is enabled if authentification enabled in uh Coral",
    "start": "2753319",
    "end": "2758800"
  },
  {
    "text": "listeners yeah uh we cannot answer on on this question because we have not tested",
    "start": "2758800",
    "end": "2764440"
  },
  {
    "text": "that and configuration okay thanks thank you one more",
    "start": "2764440",
    "end": "2770000"
  },
  {
    "text": "question hi a really good talk uh two questions one did you notice any difference between L app servers such as",
    "start": "2770000",
    "end": "2776319"
  },
  {
    "text": "uh Microsoft active directory can you get closer to them did you notice any differences with Microsoft active",
    "start": "2776319",
    "end": "2781599"
  },
  {
    "text": "directory versus uh like a open L app server when exploiting this this type of",
    "start": "2781599",
    "end": "2786640"
  },
  {
    "text": "bug ja in this case both of them don't have the Java schema pre-installed by default so if the attacker can actually",
    "start": "2786640",
    "end": "2794319"
  },
  {
    "text": "compromise the El up server through a vulnerability or because they have administrator credentials they can",
    "start": "2794319",
    "end": "2799359"
  },
  {
    "text": "install the the Java schema otherwise both of them uh don't have this Java schema so the attacker when trying to",
    "start": "2799359",
    "end": "2805839"
  },
  {
    "text": "poison an issue an an entry won't be successful but normally the attacker can poison an entry then they can install",
    "start": "2805839",
    "end": "2812720"
  },
  {
    "text": "the the schema so other um a app servers like apach DS and some others come with",
    "start": "2812720",
    "end": "2818599"
  },
  {
    "text": "the airb sorry with the Java schema pre-installed but there is no difference",
    "start": "2818599",
    "end": "2823960"
  },
  {
    "text": "between active directory or lb open lb or any gotcha okay cool second question",
    "start": "2823960",
    "end": "2829839"
  },
  {
    "text": "is about uh fuzzing for blackbox testing for when you're doing pen testing um you said use uh a fuzzer to determine if",
    "start": "2829839",
    "end": "2836760"
  },
  {
    "text": "this was vulnerable well yeah sorry go ahead so how how would like if you didn't know",
    "start": "2836760",
    "end": "2841960"
  },
  {
    "text": "that the LP record had those properties in there like what type of fuzzing were you doing if you did not have access to the code",
    "start": "2841960",
    "end": "2847920"
  },
  {
    "text": "okay um that's a good question but if you are using like a scanner um like I",
    "start": "2847920",
    "end": "2853200"
  },
  {
    "text": "don't know verb or web inspect sure um you normally will get the uh parameters",
    "start": "2853200",
    "end": "2858640"
  },
  {
    "text": "that the application is accepting and then um based on the name you may have an idea that is taken a jndi name or",
    "start": "2858640",
    "end": "2865640"
  },
  {
    "text": "something like repo or like something like data source those are candidates for testing against a J&D injection so",
    "start": "2865640",
    "end": "2872920"
  },
  {
    "text": "probably jdi injection is not like the new SQL injection is not going to be all over the place but we thought we think",
    "start": "2872920",
    "end": "2879200"
  },
  {
    "text": "that it's going to be present in many Enterprise level application because J&D is used there all over the place cool",
    "start": "2879200",
    "end": "2885800"
  },
  {
    "text": "thank you okay we we don't have time for more questions okay any question last",
    "start": "2885800",
    "end": "2894480"
  },
  {
    "text": "one okay so thank you very much",
    "start": "2894480",
    "end": "2899640"
  }
]