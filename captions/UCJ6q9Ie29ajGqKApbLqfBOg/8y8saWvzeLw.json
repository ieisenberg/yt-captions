[
  {
    "text": "[Music] foreign",
    "start": "1740",
    "end": "6720"
  },
  {
    "text": "chain and we're going to review some known hamzi bypass techniques and",
    "start": "12380",
    "end": "17520"
  },
  {
    "text": "introduce new one as with first of all um I want to say it's a",
    "start": "17520",
    "end": "23460"
  },
  {
    "text": "great honor to be here and thank you for attending my presentation my name is",
    "start": "23460",
    "end": "28939"
  },
  {
    "text": "I'm a security researcher team leader at Deep Instinct for the last two years I",
    "start": "28939",
    "end": "34079"
  },
  {
    "text": "previously previously was a vulnerability researcher and fun fact I'm supposed to get married in 10 days",
    "start": "34079",
    "end": "40200"
  },
  {
    "text": "if my fiance won't kill me for being here agenda for today and we're going to",
    "start": "40200",
    "end": "47520"
  },
  {
    "text": "start with an hamsi overview and I'm the architecture we'll move on to examine",
    "start": "47520",
    "end": "52680"
  },
  {
    "text": "some amzi bypass techniques no numbers in bypass techniques and see what security vendors are trying to do in",
    "start": "52680",
    "end": "57960"
  },
  {
    "text": "order to prevent and detect those techniques then we'll move on to present new OMSI bypass techniques and in order",
    "start": "57960",
    "end": "64739"
  },
  {
    "text": "to do so we'll have to Deep dive into the Amazon internals",
    "start": "64739",
    "end": "70040"
  },
  {
    "text": "anti-marvel scan interface or a song called OMSI or as I sometimes calls",
    "start": "70100",
    "end": "75119"
  },
  {
    "text": "armsy Dumpty is the interface standout that allows applications to integrate with anti-malware products in scriptable",
    "start": "75119",
    "end": "81780"
  },
  {
    "text": "applications for example at the point when Escape is ready to be supplied to the scripting engine the implication can",
    "start": "81780",
    "end": "87540"
  },
  {
    "text": "call the windows apis to request the scan of the content period to its execution",
    "start": "87540",
    "end": "93000"
  },
  {
    "text": "foreign is designed so any consumer any",
    "start": "93000",
    "end": "98700"
  },
  {
    "text": "application which is a consumer can request content to be scanned and any security vendor which is a provider can",
    "start": "98700",
    "end": "104939"
  },
  {
    "text": "register to receive scan requests the ossd media mediator it is",
    "start": "104939",
    "end": "110159"
  },
  {
    "text": "implemented as a dll named AMC dll that must be loaded into any ramzi protected application",
    "start": "110159",
    "end": "117500"
  },
  {
    "text": "increased adoption and reset use as it was integrated into many applications and always components and leveraged by",
    "start": "118159",
    "end": "125100"
  },
  {
    "text": "endpoint solutions to get additional access and visibility to critical and widely exploited attack surfaces notably",
    "start": "125100",
    "end": "131700"
  },
  {
    "text": "skipped engines office macros wmi.net nuc we can see on the left side example",
    "start": "131700",
    "end": "137220"
  },
  {
    "text": "for consumers a Powershell from version three it's inbuilt consumers that consume some of these services for today",
    "start": "137220",
    "end": "144599"
  },
  {
    "text": "a JavaScript DBA wmi UAC elevations and the new ones are Excel forward macros",
    "start": "144599",
    "end": "151560"
  },
  {
    "text": "volume Shadow copies operations and Dot net in memory assembly lows loads all of these consumers consumed",
    "start": "151560",
    "end": "158520"
  },
  {
    "text": "um these services on the right side we can see a security security vendors that implement the",
    "start": "158520",
    "end": "164519"
  },
  {
    "text": "providers such as Microsoft Defender deep Instinct Sentinel one and so on",
    "start": "164519",
    "end": "171060"
  },
  {
    "text": "beside from the building consumers any developer can choose to consume the OMSI Services what he needs to do is",
    "start": "171060",
    "end": "178080"
  },
  {
    "text": "basically to load in the AMC dll into his memory space and course several",
    "start": "178080",
    "end": "183420"
  },
  {
    "text": "several exports several functions this dll declares we're going to talk today",
    "start": "183420",
    "end": "188640"
  },
  {
    "text": "about the initialize empty Open Session I'm just getting buffer and some more exports and initialize is a function",
    "start": "188640",
    "end": "195480"
  },
  {
    "text": "that initializes for us and the Open Session opens a new AMD session and scan",
    "start": "195480",
    "end": "201360"
  },
  {
    "text": "buffer scan buffer full of content for malicious indicators",
    "start": "201360",
    "end": "206840"
  },
  {
    "text": "will return and I'm the result the values of the arms result can vary but",
    "start": "206840",
    "end": "212099"
  },
  {
    "text": "the most important one of them are the OMSI result clean and the resultant detected and arms result detected which",
    "start": "212099",
    "end": "218519"
  },
  {
    "text": "indicates that the malicious malicious indicator was found",
    "start": "218519",
    "end": "223340"
  },
  {
    "text": "the process memory layout of an empty protected application will look like this will always look like this amphi",
    "start": "229379",
    "end": "235379"
  },
  {
    "text": "there is going to be loaded into the memory space and a stock named Angels the context need to be initialized",
    "start": "235379",
    "end": "242340"
  },
  {
    "text": "every time we want to initialize the AMD Services we need to call the Amazon initialize initialize export it received",
    "start": "242340",
    "end": "249299"
  },
  {
    "text": "two parameters the application name that's going to consume the OMG services and the reference to the agency context",
    "start": "249299",
    "end": "256019"
  },
  {
    "text": "structure this structure going to hold four attributes signature application name antimatter and session count",
    "start": "256019",
    "end": "264900"
  },
  {
    "text": "after Ramsay initialize was called it's going to fill these attributes with the appropriate values the signature will",
    "start": "264900",
    "end": "271320"
  },
  {
    "text": "always be amsi which identifies distract in memory the application name is going",
    "start": "271320",
    "end": "277139"
  },
  {
    "text": "to be the application name that was received as a parameter and T-Mobile is going to be an instance of a class named",
    "start": "277139",
    "end": "282900"
  },
  {
    "text": "CMZ antimatter we're going to see deeper later lately how it works and the",
    "start": "282900",
    "end": "289259"
  },
  {
    "text": "session count is going to be a random number each time we want to make a scan request",
    "start": "289259",
    "end": "295500"
  },
  {
    "text": "when the developer needs to call a function named OMG buffer it receives",
    "start": "295500",
    "end": "300900"
  },
  {
    "text": "the context the content it's going to that we want to scan and the reference to and I'm the result as we already see",
    "start": "300900",
    "end": "308759"
  },
  {
    "text": "at each time we're going to make a scale request and this can buffer is going to",
    "start": "308759",
    "end": "313919"
  },
  {
    "text": "call a function named scan the declared by the c um the until malware class and",
    "start": "313919",
    "end": "319199"
  },
  {
    "text": "this function is going to Loop to all the providers that are installed in the machine and call another function the",
    "start": "319199",
    "end": "324479"
  },
  {
    "text": "exports which also named scan again we're going to see how this",
    "start": "324479",
    "end": "330780"
  },
  {
    "text": "process works much deeper lately in the presentation so now we cover the alarms architecture",
    "start": "330780",
    "end": "338820"
  },
  {
    "text": "looks like and we'll move on to examine some harmsy bypass techniques and see what security vendors are trying to do",
    "start": "338820",
    "end": "344880"
  },
  {
    "text": "to prevent and detect from those techniques but first let's talk about the attack",
    "start": "344880",
    "end": "350759"
  },
  {
    "text": "surface let's say we're an attacker that wants our bed content to be executed without being blocked in the most basic",
    "start": "350759",
    "end": "358320"
  },
  {
    "text": "form of I'm the provider the anti-marvel vendor can make a list of any load strings which are malicious strings and",
    "start": "358320",
    "end": "365039"
  },
  {
    "text": "detective the content that is going to be scanned contains one of this substring one of these malicious stuff",
    "start": "365039",
    "end": "370740"
  },
  {
    "text": "things in this case the attacker can basically try to manipulate obfuscate or encode",
    "start": "370740",
    "end": "376800"
  },
  {
    "text": "these strings in order to bypass the provider's checks we can take a look on the right side this is the provider",
    "start": "376800",
    "end": "382380"
  },
  {
    "text": "implementation of Microsoft Defender and as we can see when we try to run invoke mimikats it's going to be blocked",
    "start": "382380",
    "end": "388560"
  },
  {
    "text": "because it contains the mimikat stop string but if we split the string into invoke meme cuts the command is going to",
    "start": "388560",
    "end": "395759"
  },
  {
    "text": "be executed but it will pass the provider's checks this is basically not an amazing bypass but it providers scan",
    "start": "395759",
    "end": "402840"
  },
  {
    "text": "bypass that won't surely bypass all the providers in the market foreign",
    "start": "402840",
    "end": "409400"
  },
  {
    "text": "limitations and is based on scanning each screen block that is going to be executed that means that if the script",
    "start": "412039",
    "end": "418380"
  },
  {
    "text": "was generated at runtime and went to several phases of the obfuscation like when InFocus caching is being used",
    "start": "418380",
    "end": "424740"
  },
  {
    "text": "and each execution is going to be scanned a much more powerful option for an attacker will be to disable Ramsey and",
    "start": "424740",
    "end": "432060"
  },
  {
    "text": "free himself from the provider's checks for the rest of the execution",
    "start": "432060",
    "end": "437300"
  },
  {
    "text": "what we need to do in order to disable OMSI hamsi is built as a chain of three components the consumer the consumers",
    "start": "437940",
    "end": "445139"
  },
  {
    "text": "they provide the the mediator which is the mcdll and the providers if you want",
    "start": "445139",
    "end": "450360"
  },
  {
    "text": "to disable Ramsay all we need to do is to break one of the links in this chain breaking is possible because the",
    "start": "450360",
    "end": "456240"
  },
  {
    "text": "attacker runs in the same memory space with all of the AMC components",
    "start": "456240",
    "end": "461659"
  },
  {
    "text": "the first link in the chain is the consumer each inch consumer implements code that",
    "start": "461759",
    "end": "466979"
  },
  {
    "text": "consumes the arms DMZ services if if an attacker can reverse this code",
    "start": "466979",
    "end": "472319"
  },
  {
    "text": "and understand how the consumer works it might be able to interfere with the scan requests that are going to be made by",
    "start": "472319",
    "end": "477960"
  },
  {
    "text": "the consumer the example we are going to talk about today and that will accompany us for the",
    "start": "477960",
    "end": "483960"
  },
  {
    "text": "rest of the presentation it's Powershell and it's one of the most obvious examples a partial implements is",
    "start": "483960",
    "end": "491280"
  },
  {
    "text": "something consuming code components as a class named amzi utils each time Escape block is compiled and just before it's",
    "start": "491280",
    "end": "497460"
  },
  {
    "text": "going to be executed Powershell calls the function name it performs Security checks we can see it on the right side",
    "start": "497460",
    "end": "504000"
  },
  {
    "text": "this is the used by feature in dnspy this function passes the skip block",
    "start": "504000",
    "end": "509580"
  },
  {
    "text": "content to another function named scan content that is responsible for the OMG checks now we can take a look at the",
    "start": "509580",
    "end": "516120"
  },
  {
    "text": "scan content function we see that in this in the start of this function is going to refer a variable name arms init",
    "start": "516120",
    "end": "521880"
  },
  {
    "text": "field if this variable is 2 we're going to return on the result not detected without even going to scan the buffer",
    "start": "521880",
    "end": "528860"
  },
  {
    "text": "afterwards we will refer the function is going to refer another variable name times the context if it's null it's",
    "start": "528860",
    "end": "535560"
  },
  {
    "text": "going to try to initialize amsi again and if the initialization process fails it's going to set something it failed",
    "start": "535560",
    "end": "542220"
  },
  {
    "text": "again to true and return answer is not detected I'm saying it's fail viable really means that the arms",
    "start": "542220",
    "end": "547920"
  },
  {
    "text": "initialization process has failed so this is the purpose of this variable",
    "start": "547920",
    "end": "553200"
  },
  {
    "text": "it does the same for AMD session and the Open Session and after all this preparation is going to finally scan the",
    "start": "553200",
    "end": "559260"
  },
  {
    "text": "a buffer by calling on this game buffer that we've seen earlier if the process fails it's going to",
    "start": "559260",
    "end": "565680"
  },
  {
    "text": "return Ram the result not detected and if it if it doesn't fail then it's going",
    "start": "565680",
    "end": "571140"
  },
  {
    "text": "to return the appropriate arms result one of the first introduced on the",
    "start": "571140",
    "end": "577380"
  },
  {
    "text": "bypass techniques was published by Mike Graber with the one line MD bypass script he was able to take advantage of",
    "start": "577380",
    "end": "584040"
  },
  {
    "text": "the powerful of the power of reflection and perform direct access to Dr initial",
    "start": "584040",
    "end": "589800"
  },
  {
    "text": "viable and basically state it is true if we take a look two slides before we can",
    "start": "589800",
    "end": "595140"
  },
  {
    "text": "see that when I'm saying it felt is true then the scan request is not going to be made and it's just going to return I'm",
    "start": "595140",
    "end": "601380"
  },
  {
    "text": "the result not detected no matter what content was going to be scanned",
    "start": "601380",
    "end": "606899"
  },
  {
    "text": "another variant of this attack is to set up the session available to null and",
    "start": "606899",
    "end": "611940"
  },
  {
    "text": "corrupt DMZ context which mean we will eat the first if statement in the slide",
    "start": "611940",
    "end": "617459"
  },
  {
    "text": "we'll see that on this session is now and we'll try to call on the Open Session but it will fail because I'm the",
    "start": "617459",
    "end": "623640"
  },
  {
    "text": "context is going to be corrupted and again I'm saying it 12 is going to be set to true and we turn on the result",
    "start": "623640",
    "end": "628980"
  },
  {
    "text": "not detected which means Escape is going to be executed no matter what content was in",
    "start": "628980",
    "end": "635339"
  },
  {
    "text": "it so what can security vendors do the first option is to.net set value",
    "start": "635339",
    "end": "641880"
  },
  {
    "text": "function and prevent any direct access to Amazon it failed um the session or um",
    "start": "641880",
    "end": "647339"
  },
  {
    "text": "the context another option is to hook the pre and post three blocked execution functions there is a possibility to do",
    "start": "647339",
    "end": "653940"
  },
  {
    "text": "so and detect any change in the arms in it field viable from false to true that",
    "start": "653940",
    "end": "659220"
  },
  {
    "text": "wasn't caused by a arms in uninitialize which means that something is something fishy has happened",
    "start": "659220",
    "end": "666980"
  },
  {
    "text": "now let's move to the next Link in the chain I'm the dll this is a major component if I'm seeing it's an OS",
    "start": "667860",
    "end": "674899"
  },
  {
    "text": "implemented dll and its function is the connector a connector between the manage",
    "start": "674899",
    "end": "680100"
  },
  {
    "text": "the MZ application and the Chrome anti-malware providers",
    "start": "680100",
    "end": "686060"
  },
  {
    "text": "the first option to break this link in the chain can be done by code patching and this can buffer as we've seen is the",
    "start": "686339",
    "end": "693360"
  },
  {
    "text": "function that is implemented by the AMC dll as an export of mctl and it's and is",
    "start": "693360",
    "end": "699120"
  },
  {
    "text": "responsible for scaling a buffer what we can do is patch any part of this function on or any other code components",
    "start": "699120",
    "end": "706019"
  },
  {
    "text": "that are being called by this function in order to make it fail without filling the appropriate arm's result",
    "start": "706019",
    "end": "713480"
  },
  {
    "text": "so another Viper script that was published by rastama Austin is also implemented in Powershell as we as you",
    "start": "713579",
    "end": "719399"
  },
  {
    "text": "see this is the most popular implementation of Pharmacy bypass techniques but it doesn't really have to",
    "start": "719399",
    "end": "725459"
  },
  {
    "text": "be Powershell it can be any other protected application is to basically call a type",
    "start": "725459",
    "end": "731279"
  },
  {
    "text": "functionality in order to be able to call windows apis we don't necessarily have to call a type but there's other",
    "start": "731279",
    "end": "737820"
  },
  {
    "text": "options to call windows apis but we won't cover them today and so in the first line we're going to",
    "start": "737820",
    "end": "744300"
  },
  {
    "text": "get an angle to the mcdll and then find the Poke address of armscan buffer then",
    "start": "744300",
    "end": "749640"
  },
  {
    "text": "we'll change the protection of the page where on the screen buffer resides in and then we'll reach the final stage",
    "start": "749640",
    "end": "756720"
  },
  {
    "text": "when we'll copy the patch and Patch the product by itself from the skin buffer so they will return invalid argument",
    "start": "756720",
    "end": "762660"
  },
  {
    "text": "this is basically the op codes that are written in the slide in this case a anti-skin buffer is going",
    "start": "762660",
    "end": "769860"
  },
  {
    "text": "to fail and return without filling the appropriate on the result and as so the",
    "start": "769860",
    "end": "775079"
  },
  {
    "text": "script is going to be allowed to execute another option to break this link is the",
    "start": "775079",
    "end": "781740"
  },
  {
    "text": "chain is to use the a data patching option and if we take a look at the scan",
    "start": "781740",
    "end": "788220"
  },
  {
    "text": "buffer we can see that it is start of the function it validates the content of the OMSI context amsi context is best is",
    "start": "788220",
    "end": "795779"
  },
  {
    "text": "passed to Um this can buffer as a parameter and if we will be able to corrupt them the context we will be able",
    "start": "795779",
    "end": "802740"
  },
  {
    "text": "to interfere with any scale request because as we see on the right side and it's not going to perform the scan",
    "start": "802740",
    "end": "808980"
  },
  {
    "text": "request if this Con if this structure is corrupted what we can do in order to find this",
    "start": "808980",
    "end": "816180"
  },
  {
    "text": "structure in memory it's not so reliable but we can try to find the amsi",
    "start": "816180",
    "end": "821959"
  },
  {
    "text": "signature or finding a global pointer that will point to this signature but again this is not such an reliable or",
    "start": "821959",
    "end": "829740"
  },
  {
    "text": "easy techniques to do so what security vendors are currently",
    "start": "829740",
    "end": "836519"
  },
  {
    "text": "doing a Microsoft Defender OMG provider choose to handle these zombie bypass techniques",
    "start": "836519",
    "end": "842880"
  },
  {
    "text": "by declaring that each string that are connected to this bypass techniques is malicious like um this can buffer as",
    "start": "842880",
    "end": "850019"
  },
  {
    "text": "well as zombies can string out their movement memory copy memory of the utils and so on an attacker can bypass these",
    "start": "850019",
    "end": "856139"
  },
  {
    "text": "restrictions by finding a function addresses of Name by names of neighbor functions scan memory for code patterns",
    "start": "856139",
    "end": "863339"
  },
  {
    "text": "or even even dynamically passed the ldr",
    "start": "863339",
    "end": "868040"
  },
  {
    "text": "a better approach of security vendors will be to monitor any permission change of any page inside the code section of",
    "start": "868440",
    "end": "875820"
  },
  {
    "text": "AMC dll and in order to handle the data patching we can try to hook on the scan",
    "start": "875820",
    "end": "881820"
  },
  {
    "text": "buffer and basically scan between any scan request that make sure that Anthony DMC content context wasn't changed and",
    "start": "881820",
    "end": "891060"
  },
  {
    "text": "besides in the this is equal to the AMC context that was initialized in arms",
    "start": "891060",
    "end": "896459"
  },
  {
    "text": "initialize The Last Link in the chain is the um the",
    "start": "896459",
    "end": "902279"
  },
  {
    "text": "providers this is the code that's responsible to scan the content and that was supplied to it by the consumer and",
    "start": "902279",
    "end": "909180"
  },
  {
    "text": "decide if it's malicious or not in order to be able to register a",
    "start": "909180",
    "end": "914220"
  },
  {
    "text": "provider any AMD provider needs to create a sales ID entry in the hklm",
    "start": "914220",
    "end": "919680"
  },
  {
    "text": "software classes CLS ID registry key and registering the same sales ID in hqlm",
    "start": "919680",
    "end": "925860"
  },
  {
    "text": "software Microsoft mg providers is initialized in the OS process it will",
    "start": "925860",
    "end": "931320"
  },
  {
    "text": "enumerate each series id listed in the provider statistic key and initialize the com object by importing the dll in",
    "start": "931320",
    "end": "937860"
  },
  {
    "text": "the input server sub key in the hklm software classes CLS ID if",
    "start": "937860",
    "end": "945240"
  },
  {
    "text": "you want to sum it up you can take a look at the picture on the bottom you can see that the inbox server sub key",
    "start": "945240",
    "end": "951420"
  },
  {
    "text": "this is basically the series id of Microsoft Defender implementation of AMD",
    "start": "951420",
    "end": "956940"
  },
  {
    "text": "provider we can see that it declares a sub key named inbox server 32 and this",
    "start": "956940",
    "end": "962940"
  },
  {
    "text": "sub key lists the paths of the dll this is basically the AMD provider itself it",
    "start": "962940",
    "end": "970019"
  },
  {
    "text": "contains all the code and all the things that that are relevant to this provider",
    "start": "970019",
    "end": "976940"
  },
  {
    "text": "HMC provider that wants to supply anti-malvel Services needs to implement an interface named int Marvel provider",
    "start": "977660",
    "end": "986820"
  },
  {
    "text": "this interface declares three functions scan closed session and display name and this is basically",
    "start": "986820",
    "end": "993180"
  },
  {
    "text": "um the most the main principle of Pharmacy the ability to scan content",
    "start": "993180",
    "end": "1000220"
  },
  {
    "text": "if you want to break the last link in the chain and the only note the techniques that are existing right now",
    "start": "1001040",
    "end": "1007820"
  },
  {
    "text": "is to use com server hijacking which means to go to this specific registry",
    "start": "1007820",
    "end": "1013040"
  },
  {
    "text": "key and modify the path of the dealer so it will point to a corrupted dll that won't function as the same amzi provider",
    "start": "1013040",
    "end": "1020060"
  },
  {
    "text": "dealer",
    "start": "1020060",
    "end": "1022480"
  },
  {
    "text": "bypass techniques have popped up like mushrooms after rain researchers have noticed that Powershell",
    "start": "1028120",
    "end": "1035120"
  },
  {
    "text": "version 2 is still available to use in modern Windows machines although it predates OMSI there is also possibility",
    "start": "1035120",
    "end": "1041360"
  },
  {
    "text": "to use any other old version of Finance protected application that doesn't use",
    "start": "1041360",
    "end": "1047000"
  },
  {
    "text": "OMSI there is also an option to use DLI Jack of the AMC dealer copy an instance",
    "start": "1047000",
    "end": "1053120"
  },
  {
    "text": "of the AMC protect application to another folder which the which contains the corrupted mcdll and then this this",
    "start": "1053120",
    "end": "1061100"
  },
  {
    "text": "application is going to load the AMC dll in this co-opted down the detail instead of the original one",
    "start": "1061100",
    "end": "1067760"
  },
  {
    "text": "we can also try to compile our own version of the DMZ protected application and without the amsy calls another",
    "start": "1067760",
    "end": "1074900"
  },
  {
    "text": "option that is not listed here is implemented by shell block and it is to put an outboard breakpoint on the OMG",
    "start": "1074900",
    "end": "1081620"
  },
  {
    "text": "scan buffer function and when the breakpoint will hit to revoke the code outside of this can buffer all of these",
    "start": "1081620",
    "end": "1088820"
  },
  {
    "text": "techniques are known and can be detected by some security vendors",
    "start": "1088820",
    "end": "1094360"
  },
  {
    "text": "so um we've reached the second part of the presentation when we're going to show",
    "start": "1094880",
    "end": "1100039"
  },
  {
    "text": "the new bypass techniques in order to show them we'll have to also Deep dive into the internals",
    "start": "1100039",
    "end": "1108100"
  },
  {
    "text": "the new techniques are basically going to be touched an unmonitored memory outside",
    "start": "1108440",
    "end": "1115400"
  },
  {
    "text": "the AMC dll area the providers themselves",
    "start": "1115400",
    "end": "1120220"
  },
  {
    "text": "but before we're going to show them let's go back to Arms initialize any function that wants to use on these",
    "start": "1120740",
    "end": "1127280"
  },
  {
    "text": "Services must first columns initialize before we continue I want to mention the dams the detail is undocumented so all",
    "start": "1127280",
    "end": "1133580"
  },
  {
    "text": "the code we are going to see right now was reverse engineered and are",
    "start": "1133580",
    "end": "1138799"
  },
  {
    "text": "simplified for reasons of convenience and understanding and bear with me it's going to be a little tough",
    "start": "1138799",
    "end": "1146960"
  },
  {
    "text": "and this is how arms initialized look like first of all it's going to refer the",
    "start": "1146960",
    "end": "1153020"
  },
  {
    "text": "first RTD attribute in the Ramsay context and set it to amsi string the",
    "start": "1153020",
    "end": "1158600"
  },
  {
    "text": "signature attribute then it will refer the app name attribute and set it to the application",
    "start": "1158600",
    "end": "1164179"
  },
  {
    "text": "name that is it received as a parameter it will also say the session count to",
    "start": "1164179",
    "end": "1169880"
  },
  {
    "text": "random number a random number and in order to fill the antimatter attribute it's we're going to create a new",
    "start": "1169880",
    "end": "1175700"
  },
  {
    "text": "instance of an interface named int malware",
    "start": "1175700",
    "end": "1180740"
  },
  {
    "text": "foreign when we're going to create a new instance of the internet if this interface we're going to result in",
    "start": "1180740",
    "end": "1186140"
  },
  {
    "text": "creating a new instance of a class named CMZ anti-malware distance class implements the eye",
    "start": "1186140",
    "end": "1192980"
  },
  {
    "text": "anti-malware interface and so so on it so it must also declare two functions",
    "start": "1192980",
    "end": "1199039"
  },
  {
    "text": "closed session and scan and like we said the news instance of this class is going",
    "start": "1199039",
    "end": "1204140"
  },
  {
    "text": "to be assigned to the antimatter attribute of the Omni context",
    "start": "1204140",
    "end": "1209679"
  },
  {
    "text": "during the construction of the CMZ anti-marvel class a function name the",
    "start": "1210140",
    "end": "1215419"
  },
  {
    "text": "final construct is going to be called and this function is going to call another function named omzi com create",
    "start": "1215419",
    "end": "1221240"
  },
  {
    "text": "providers providers is going to receive it as a parameter is going to receive multiple",
    "start": "1221240",
    "end": "1226640"
  },
  {
    "text": "parameters the first parameter and the most important one of them is another attribute of the CMZ antimatter class",
    "start": "1226640",
    "end": "1233840"
  },
  {
    "text": "and this attribute is going to all the list of all the providers that are installed in the machine",
    "start": "1233840",
    "end": "1240820"
  },
  {
    "text": "create providers looks like this it's going to it's very intuitive it's going",
    "start": "1241280",
    "end": "1246440"
  },
  {
    "text": "to enum the all the sub keys under the software Microsoft company provider",
    "start": "1246440",
    "end": "1251840"
  },
  {
    "text": "registry key all the sales IDs that are mentioned in this registry key",
    "start": "1251840",
    "end": "1257000"
  },
  {
    "text": "and the max number of them are 16. and for each list ID it's going to call",
    "start": "1257000",
    "end": "1263660"
  },
  {
    "text": "another function named amsicom secure loading POG server that received two parameters the CLS ID that we want to",
    "start": "1263660",
    "end": "1270380"
  },
  {
    "text": "load and a pointer that would represent the provider this pointer that we're going to give as",
    "start": "1270380",
    "end": "1277220"
  },
  {
    "text": "a parameter is going to be assigned later later to the the anti-marual providers list that are being held by",
    "start": "1277220",
    "end": "1284419"
  },
  {
    "text": "the CMZ anti-marvel class",
    "start": "1284419",
    "end": "1288340"
  },
  {
    "text": "server looks like this um it's if we if you listened in the",
    "start": "1291159",
    "end": "1296900"
  },
  {
    "text": "last slides you can really assume what it's going to do really guess and it's",
    "start": "1296900",
    "end": "1303740"
  },
  {
    "text": "going to end on the software classes CLS ID registry key and find in this",
    "start": "1303740",
    "end": "1309799"
  },
  {
    "text": "registry key for retail Sid the sub key named inbox server 3032",
    "start": "1309799",
    "end": "1315559"
  },
  {
    "text": "we've seen that this sub key holds the paths of the delay of DMZ provider then",
    "start": "1315559",
    "end": "1321380"
  },
  {
    "text": "we're going to load this dll and call an export that it defines the name delay get class object",
    "start": "1321380",
    "end": "1328840"
  },
  {
    "text": "class object obtains the pointer to Providers comma i-class Factory object",
    "start": "1328840",
    "end": "1334340"
  },
  {
    "text": "then we're going to create a new instance of an object that implements the eye anti-malware provider interface",
    "start": "1334340",
    "end": "1339799"
  },
  {
    "text": "as we've seen this interface is the main logic and it constitutes the main",
    "start": "1339799",
    "end": "1345740"
  },
  {
    "text": "principle of amzi and this is what the provider needs to implement the scan",
    "start": "1345740",
    "end": "1351140"
  },
  {
    "text": "function display name and the closed session so when we create a new instance of this",
    "start": "1351140",
    "end": "1358100"
  },
  {
    "text": "interface we're going to create a new object that represents what the provider",
    "start": "1358100",
    "end": "1363559"
  },
  {
    "text": "provides which are these functions that must be declared by the int Marvel",
    "start": "1363559",
    "end": "1369140"
  },
  {
    "text": "provider interface then the new instance of this object is going to be returned to the function",
    "start": "1369140",
    "end": "1375320"
  },
  {
    "text": "that's called this function that's called the com secure loading POG server and as we already seen we're going to",
    "start": "1375320",
    "end": "1383299"
  },
  {
    "text": "assign it to the antimatter provider list inside the CMZ anti-mama object",
    "start": "1383299",
    "end": "1390639"
  },
  {
    "text": "so um the first provider patch like we said um I'm going to patch not so intuitive a",
    "start": "1392080",
    "end": "1400280"
  },
  {
    "text": "place to protect the provider itself we're going to patch the polo bytes of the dealer get class object function in",
    "start": "1400280",
    "end": "1406820"
  },
  {
    "text": "the providers dlls and interfere with the initialization process of amsi",
    "start": "1406820",
    "end": "1412960"
  },
  {
    "text": "but first we need to handle a small issue",
    "start": "1413240",
    "end": "1419659"
  },
  {
    "text": "um okay I think that there's a slide",
    "start": "1419659",
    "end": "1425000"
  },
  {
    "text": "missing here doesn't matter um",
    "start": "1425000",
    "end": "1430700"
  },
  {
    "text": "before the latest object is going to be called uh when our bypass Cape is going to be",
    "start": "1430700",
    "end": "1438320"
  },
  {
    "text": "executed uh delegates delegated subject is not supposed to be called because",
    "start": "1438320",
    "end": "1443960"
  },
  {
    "text": "this function has been called only during the Amazon initialization process so if it will patch this function",
    "start": "1443960",
    "end": "1451340"
  },
  {
    "text": "without doing anything else then we won't really eat the patch we already did",
    "start": "1451340",
    "end": "1457100"
  },
  {
    "text": "so in order to eat the patch we'll have to find a way to uninitialize OMSI and",
    "start": "1457100",
    "end": "1462559"
  },
  {
    "text": "make amzi to try to initialize again so what we can do is take a better look",
    "start": "1462559",
    "end": "1469039"
  },
  {
    "text": "at the consumer first of all it doesn't matter because the slide is",
    "start": "1469039",
    "end": "1475159"
  },
  {
    "text": "missing I don't know why but when we try to if we take a look at the",
    "start": "1475159",
    "end": "1481340"
  },
  {
    "text": "exports of amzi we can see a function named omzian initialize that received a",
    "start": "1481340",
    "end": "1486440"
  },
  {
    "text": "parameter which his name is the amzi context which is the Ramsay context",
    "start": "1486440",
    "end": "1491500"
  },
  {
    "text": "it disables it uninitialize only the AMC context that was initialized first of",
    "start": "1491500",
    "end": "1496820"
  },
  {
    "text": "all with Amazon initialize so if we want to call amzi uninitialize we'll have to supply it the original AMC context but",
    "start": "1496820",
    "end": "1504740"
  },
  {
    "text": "if the but we in order to do so we need to fight the amzi context in memory as and we as and as we've seen it's not an",
    "start": "1504740",
    "end": "1511940"
  },
  {
    "text": "so intuitive thing to do because it's not so reliable another option we can take is to look",
    "start": "1511940",
    "end": "1519860"
  },
  {
    "text": "better at the consumer each consumer is the code that uninitialized MZ for us in",
    "start": "1519860",
    "end": "1525320"
  },
  {
    "text": "Powershell we can use reflection to call this code so if we take a look at the hotel class that are implemented by",
    "start": "1525320",
    "end": "1531380"
  },
  {
    "text": "Powershell we will see function named uninitialize this function is going to take down the context context that was",
    "start": "1531380",
    "end": "1537500"
  },
  {
    "text": "initialized first and call on the uninitialized with this specific context so basically it's going to uninitialize",
    "start": "1537500",
    "end": "1544039"
  },
  {
    "text": "Ramsay for us without us being needed to provide the OMSI context to",
    "start": "1544039",
    "end": "1549740"
  },
  {
    "text": "DMZ uninitialize export after all the preparations after all the",
    "start": "1549740",
    "end": "1555080"
  },
  {
    "text": "slides we can finally eat the final bypass script this is the first bypass script we're going to use a type in",
    "start": "1555080",
    "end": "1562220"
  },
  {
    "text": "order to call Windows apis basically very much like the harmsy scan buffer technique that we've seen and then we",
    "start": "1562220",
    "end": "1569480"
  },
  {
    "text": "going to load to get an endless to the D to put the provider dll which is MP oav",
    "start": "1569480",
    "end": "1574940"
  },
  {
    "text": "in case of Microsoft Defender find the Polk address of the get plus object patch it change the protection of the",
    "start": "1574940",
    "end": "1582380"
  },
  {
    "text": "page the data object resides in and copy a page that will return in valid",
    "start": "1582380",
    "end": "1588440"
  },
  {
    "text": "argument very much like the scan buffer techniques that we already seen but without touching the mcdl memory space",
    "start": "1588440",
    "end": "1594919"
  },
  {
    "text": "the should that's supposed to be protected then in order to make the direct class",
    "start": "1594919",
    "end": "1601400"
  },
  {
    "text": "object code to be invoked we're going to call and to uninitial examsi in order to",
    "start": "1601400",
    "end": "1607400"
  },
  {
    "text": "do so we're going to use reflection find the uninitialized function in memory and",
    "start": "1607400",
    "end": "1612440"
  },
  {
    "text": "invoke it so in the next time that we a scale request is going to be made",
    "start": "1612440",
    "end": "1617600"
  },
  {
    "text": "um it's going to the Powershell is going to try to re-initialize amzi but it's going to fail because the data get lost",
    "start": "1617600",
    "end": "1624260"
  },
  {
    "text": "object was patched this example um is touching only the provider's dll",
    "start": "1624260",
    "end": "1630440"
  },
  {
    "text": "of mpoev and more sophisticated one will be to query all the register keys that",
    "start": "1630440",
    "end": "1636620"
  },
  {
    "text": "we already see and find the providers dealer names and patch in each one of",
    "start": "1636620",
    "end": "1642140"
  },
  {
    "text": "them another option is to know what are all the possibilities for providers that are in the market try to load each dll",
    "start": "1642140",
    "end": "1649520"
  },
  {
    "text": "and if we fail um we can if we succeed we can assume that this dll in memory and we can patch",
    "start": "1649520",
    "end": "1656360"
  },
  {
    "text": "it and we need to patch it in order to buy basamzi",
    "start": "1656360",
    "end": "1660940"
  },
  {
    "text": "the second Bible script is going to be based on scale interception instead of initialization interception",
    "start": "1661400",
    "end": "1667940"
  },
  {
    "text": "scale interception is the classic way to disable amsi and as we've seen we can",
    "start": "1667940",
    "end": "1673820"
  },
  {
    "text": "implement this by basically patching the arm this can buffer function",
    "start": "1673820",
    "end": "1679400"
  },
  {
    "text": "another option we can do um but again like we've seen on this can buffer function is really monitored and it's a",
    "start": "1679400",
    "end": "1687020"
  },
  {
    "text": "memorial area that we don't want to touch right now another option we can do is better look",
    "start": "1687020",
    "end": "1692900"
  },
  {
    "text": "at on the scan buffer and understand how this process work and when we that will when will we we will understand how this",
    "start": "1692900",
    "end": "1699380"
  },
  {
    "text": "process work will be able to interfere scan requests as this can buffer looks like this first",
    "start": "1699380",
    "end": "1706400"
  },
  {
    "text": "it's going to validate the um the context that was supplied to it to it by as a parameter",
    "start": "1706400",
    "end": "1712640"
  },
  {
    "text": "then it's going to create a new instance of a class named CMZ buffer stream that",
    "start": "1712640",
    "end": "1717860"
  },
  {
    "text": "will represent the buffer that we're going to scan then we're going to refer the antimatter",
    "start": "1717860",
    "end": "1724539"
  },
  {
    "text": "attribute and inside the MC context and call a function name scan from this",
    "start": "1724539",
    "end": "1730520"
  },
  {
    "text": "attribute and provided the buffer stream and DMZ result",
    "start": "1730520",
    "end": "1735919"
  },
  {
    "text": "as we've seen antimatter attribute also the C and the anti-malware all the an",
    "start": "1735919",
    "end": "1741200"
  },
  {
    "text": "instance of the CMZ antimatter class So eventually we're going to execute the",
    "start": "1741200",
    "end": "1746600"
  },
  {
    "text": "CMZ until malware a class with the scan function of the CMZ anti-malware class",
    "start": "1746600",
    "end": "1754159"
  },
  {
    "text": "and this function looks like this it's pretty intuitive we're going to go to the list of all the providers that are",
    "start": "1754159",
    "end": "1760460"
  },
  {
    "text": "being held by the CMC anti-malware class and look through all the providers in this list",
    "start": "1760460",
    "end": "1765799"
  },
  {
    "text": "for each provider we're going to call the scan function that as we've seen each provider must Implement because it",
    "start": "1765799",
    "end": "1771559"
  },
  {
    "text": "implements the int malware provider interface and pass it the buffer stream",
    "start": "1771559",
    "end": "1777260"
  },
  {
    "text": "that we want to scan and a reference to and I'm the result then the flow is going to check the",
    "start": "1777260",
    "end": "1783440"
  },
  {
    "text": "answer result that was returned by each provider if it's a bad result which means that it's greater than 8 000 in X",
    "start": "1783440",
    "end": "1792080"
  },
  {
    "text": "it's the loop is going to break and you're going to return without even continue to scan uh with the other",
    "start": "1792080",
    "end": "1798620"
  },
  {
    "text": "providers if all the providers return a good result which means something result not",
    "start": "1798620",
    "end": "1804740"
  },
  {
    "text": "detected or runs the result clean we're going to finally return the amsyresult clean function",
    "start": "1804740",
    "end": "1811340"
  },
  {
    "text": "we can also return other options of Pharmacy result but this function this code like I said is stripped for",
    "start": "1811340",
    "end": "1818000"
  },
  {
    "text": "Simplicity we're not going to cover this today so",
    "start": "1818000",
    "end": "1824659"
  },
  {
    "text": "um in the first Bible script and finding the place in the provider that we wanted",
    "start": "1824659",
    "end": "1830059"
  },
  {
    "text": "to patch was pretty easy because the function that it export was the function",
    "start": "1830059",
    "end": "1835580"
  },
  {
    "text": "delete object was exported so we could call the get back get Block process API",
    "start": "1835580",
    "end": "1842480"
  },
  {
    "text": "in order to receive the function address in this case the scan function of the",
    "start": "1842480",
    "end": "1847520"
  },
  {
    "text": "provider that I'm going to tell you this is the function that we want to patch is",
    "start": "1847520",
    "end": "1853039"
  },
  {
    "text": "not so intuitive to find because it's not exported by the dll so we'll have to do a little trick we're",
    "start": "1853039",
    "end": "1860120"
  },
  {
    "text": "going to call arms initialize and basically this will allocate a new AMG count agency context for us this Edge",
    "start": "1860120",
    "end": "1867020"
  },
  {
    "text": "I'm the context will hold in is third power third attribute and the new instance of the scmz anti-malware class",
    "start": "1867020",
    "end": "1874640"
  },
  {
    "text": "if you corrupt anything inside this class it will only affect scan requests that are going to be made by this",
    "start": "1874640",
    "end": "1880760"
  },
  {
    "text": "specific company context so it's not so good it's not it won't",
    "start": "1880760",
    "end": "1886159"
  },
  {
    "text": "disable amzi because all these candidates will probably be be with another OMSI context but if we'll take a",
    "start": "1886159",
    "end": "1892940"
  },
  {
    "text": "better look at the DMC context in memory we can see that the third attribute is going to hold the new instance of the",
    "start": "1892940",
    "end": "1900559"
  },
  {
    "text": "CMZ anti-malware of the antimatter provider list and each record in this",
    "start": "1900559",
    "end": "1905840"
  },
  {
    "text": "list is going to be basically a new object of the eye antimatter provider",
    "start": "1905840",
    "end": "1911480"
  },
  {
    "text": "interface and this object will finally always each time we call amzi initialize",
    "start": "1911480",
    "end": "1917419"
  },
  {
    "text": "we'll always point to the same scan functions inside the provider dll",
    "start": "1917419",
    "end": "1924200"
  },
  {
    "text": "so if we'll be able to initialize something and receive a new context we",
    "start": "1924200",
    "end": "1929600"
  },
  {
    "text": "can pass the context in memory and be able to find the scan function of each",
    "start": "1929600",
    "end": "1934640"
  },
  {
    "text": "provider um without even without calling any other windows API",
    "start": "1934640",
    "end": "1942519"
  },
  {
    "text": "Escape will look like this we can call on the initialize with Windows API or we",
    "start": "1943220",
    "end": "1948380"
  },
  {
    "text": "might also be able to columns initialize um that was implemented by Powershell we don't really have to do this with",
    "start": "1948380",
    "end": "1955039"
  },
  {
    "text": "Windows API as we've seen I'm cvt's class implements also an init function",
    "start": "1955039",
    "end": "1960200"
  },
  {
    "text": "that initializer and receive the numsy context then we look to all the list of the",
    "start": "1960200",
    "end": "1965600"
  },
  {
    "text": "providers that are being held by the CMZ anti-malware object first of all we in order to do so we",
    "start": "1965600",
    "end": "1973039"
  },
  {
    "text": "going to refer to the third attribute of the context which is going to be in",
    "start": "1973039",
    "end": "1979820"
  },
  {
    "text": "um if we're talking about this script is going is implemented on 32-bit applications it is relevant to all the",
    "start": "1979820",
    "end": "1986539"
  },
  {
    "text": "versions of Powershell including the old ones because the CMZ antimatter class didn't change between versions and if",
    "start": "1986539",
    "end": "1994460"
  },
  {
    "text": "you want to do this the same for 64 64 bit applications it is possible all you",
    "start": "1994460",
    "end": "2000760"
  },
  {
    "text": "need to do is to do a little reverse engineering process but as we said this is a false 32-bit applications",
    "start": "2000760",
    "end": "2010059"
  },
  {
    "text": "so we're going to refer the third attribute which is the new instance of the C Amazon anti malware class then",
    "start": "2010059",
    "end": "2017440"
  },
  {
    "text": "we'll go to a go to offset 36 this is the list of the providers in 32-bit",
    "start": "2017440",
    "end": "2022659"
  },
  {
    "text": "application will always be in offset 36 we look to each provider in this list find its V table the V table is going to",
    "start": "2022659",
    "end": "2030279"
  },
  {
    "text": "point to all the all the functions that must be implemented by this class and",
    "start": "2030279",
    "end": "2037360"
  },
  {
    "text": "the first function will always be the scan function first function in a 32-bit",
    "start": "2037360",
    "end": "2042700"
  },
  {
    "text": "applications means in offset 12. then when we found the the scan function we",
    "start": "2042700",
    "end": "2049179"
  },
  {
    "text": "we just need to change the protection of the page where this function resides in and copy the patch that we want to apply",
    "start": "2049179",
    "end": "2057520"
  },
  {
    "text": "to this function this is basically going to touch the Pollock bytes of the scan",
    "start": "2057520",
    "end": "2064118"
  },
  {
    "text": "function inside the provider and returns zero so this function is going to fail without filling the appropriate times",
    "start": "2064119",
    "end": "2070540"
  },
  {
    "text": "the result",
    "start": "2070540",
    "end": "2072960"
  },
  {
    "text": "okay let's see a demo",
    "start": "2076480",
    "end": "2080940"
  },
  {
    "text": "okay okay first step um at this at the beginning let's start",
    "start": "2085119",
    "end": "2091118"
  },
  {
    "text": "let's try to call invoke mimikats in this case we going we suppose that we",
    "start": "2091119",
    "end": "2096878"
  },
  {
    "text": "going to be fail to be blocked by the MZ providers scans because it contains the",
    "start": "2096879",
    "end": "2103060"
  },
  {
    "text": "substring mimikats now this is",
    "start": "2103060",
    "end": "2109540"
  },
  {
    "text": "the same instance of function that I already ran the pipe Escape so I already",
    "start": "2109540",
    "end": "2114640"
  },
  {
    "text": "bypassed the script sorry about it",
    "start": "2114640",
    "end": "2118619"
  },
  {
    "text": "okay let's run by Powershell again",
    "start": "2123700",
    "end": "2127800"
  },
  {
    "text": "and now we are being blocked by the uh the providers or the provider of",
    "start": "2137560",
    "end": "2142900"
  },
  {
    "text": "Defender the AMC provider or Defender",
    "start": "2142900",
    "end": "2147359"
  },
  {
    "text": "let's run the bypass script this is the same Bible script in the presentation",
    "start": "2149099",
    "end": "2156059"
  },
  {
    "text": "and now try to call invoke mimikats and we are able to do so",
    "start": "2156760",
    "end": "2163078"
  },
  {
    "text": "from now on as we already seen in the first instance of Powershell that I",
    "start": "2164740",
    "end": "2170980"
  },
  {
    "text": "closed and we'll be able to execute any Escape that we want invoke mimikats I",
    "start": "2170980",
    "end": "2178119"
  },
  {
    "text": "don't know a power supply whatever you wish to run without the scans to intercept US during this",
    "start": "2178119",
    "end": "2186220"
  },
  {
    "text": "process",
    "start": "2186220",
    "end": "2188520"
  },
  {
    "text": "foreign takeaways a destruction operation is",
    "start": "2193300",
    "end": "2200619"
  },
  {
    "text": "easy because it's easier because the empty dll and the provider dll are loaded to the same memory space for",
    "start": "2200619",
    "end": "2206680"
  },
  {
    "text": "potassium attacker leaves Amazon was not designed to prevent such attacks and the current prevention or detection",
    "start": "2206680",
    "end": "2213339"
  },
  {
    "text": "techniques of onesie bypass doesn't Reach This Gap from a security vendor perspective",
    "start": "2213339",
    "end": "2218500"
  },
  {
    "text": "security handle should consider to protect the providers memory as well as the amcd land memory space and form a",
    "start": "2218500",
    "end": "2226480"
  },
  {
    "text": "research perspective an initialization of amzi might let us find new methods for disabling Ramsay by interfering with",
    "start": "2226480",
    "end": "2233200"
  },
  {
    "text": "the initialization process this is different from the common techniques that interfere with the scanning process",
    "start": "2233200",
    "end": "2241000"
  },
  {
    "text": "if other if other research can also be done on the scan interception and I'm the initialization interception in",
    "start": "2241000",
    "end": "2247660"
  },
  {
    "text": "skeletal session we can patch other codes or data as sections inside the amcdll or the providers dll the",
    "start": "2247660",
    "end": "2254619"
  },
  {
    "text": "initialization interception we can patch other involved dealers like combase or",
    "start": "2254619",
    "end": "2259660"
  },
  {
    "text": "any other dealers that are related to the scan process to the initialization process we can also try to use the ad patching",
    "start": "2259660",
    "end": "2266680"
  },
  {
    "text": "of pharmaceutical but it's not so reliable an easy technique to do and a RPC interception is another option that",
    "start": "2266680",
    "end": "2273040"
  },
  {
    "text": "is depends on the implementation of the provider if we're talking about Microsoft Defender it performs RPC",
    "start": "2273040",
    "end": "2279579"
  },
  {
    "text": "requests and because we are living in the same memory space as the provider we might be able to intercept RPC requests",
    "start": "2279579",
    "end": "2286720"
  },
  {
    "text": "that are being made by the defender provider",
    "start": "2286720",
    "end": "2291900"
  },
  {
    "text": "um I want to add that all the pocs that I presented today is going to be uploaded to my Twitter account on the",
    "start": "2292180",
    "end": "2299260"
  },
  {
    "text": "left side the left corner and thank you for listening and if you have any",
    "start": "2299260",
    "end": "2305020"
  },
  {
    "text": "question [Applause] [Music]",
    "start": "2305020",
    "end": "2310880"
  },
  {
    "text": "[Music]",
    "start": "2314720",
    "end": "2317810"
  }
]