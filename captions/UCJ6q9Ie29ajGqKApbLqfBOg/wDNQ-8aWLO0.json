[
  {
    "text": "hi it's great to be here my name is Alex bol Iselle I'm here to talk about reverse engineering Windows defenders",
    "start": "30",
    "end": "5730"
  },
  {
    "text": "antivirus emulator before we get started just a little bit about me I am a",
    "start": "5730",
    "end": "10740"
  },
  {
    "text": "security researcher at for all secure you may know the company for their victory at the cyber Grand Challenge two years ago at DEFCON 2016 doing automated",
    "start": "10740",
    "end": "18539"
  },
  {
    "text": "vulnerability discovery and exploitation I also do firm re insider policy at River loop security I'm a very proud",
    "start": "18539",
    "end": "25199"
  },
  {
    "text": "alumnus of RPI and the RPI SEC CTF team was playing in DEFCON leader this week this is my second time at Def Con or try",
    "start": "25199",
    "end": "32099"
  },
  {
    "text": "blackhat previously I presented some work called AV leak at blackhat 2016 or",
    "start": "32099",
    "end": "38100"
  },
  {
    "text": "get started I do want to say this is my personal research and the opinions and views expressed on my own not those of my own employers of mine I want to say",
    "start": "38100",
    "end": "46829"
  },
  {
    "text": "this presentation is a deeply technical look at Windows defenders antivirus and binary emulator and as far as I know",
    "start": "46829",
    "end": "52800"
  },
  {
    "text": "it's the first conference to talk to really look at reverse engineering any antivirus softwares binary emulator that",
    "start": "52800",
    "end": "58949"
  },
  {
    "text": "said it's not an evaluation of Windows Defender I'm not going to tell you whether this is a good product or not",
    "start": "58949",
    "end": "64049"
  },
  {
    "text": "whether you should use they're not how effective is it catching viruses and it's also not related to Windows",
    "start": "64049",
    "end": "69090"
  },
  {
    "text": "Defender ATP or any of the other technologies of the window defender name we're here talking about Windows",
    "start": "69090",
    "end": "74280"
  },
  {
    "text": "Defender antivirus the traditional you know first thing to have the Windows Defender name it's an outline in this",
    "start": "74280",
    "end": "81360"
  },
  {
    "text": "presentation I'm going to go through an introduction then talk about tooling and process then my reverse engineering then",
    "start": "81360",
    "end": "87960"
  },
  {
    "text": "a bit of a vulnerability research and vulnerabilities inside defender and they're gonna have a conclusion so",
    "start": "87960",
    "end": "93860"
  },
  {
    "text": "Windows Defender is Microsoft's built-in antivirus software built into all Windows systems and as I said the",
    "start": "93860",
    "end": "99900"
  },
  {
    "text": "defender name now seems to cover a variety of mitigation since security controls that are built into Windows and here today we're talking about when it's",
    "start": "99900",
    "end": "106860"
  },
  {
    "text": "better antivirus not ATP application guard exploit guard or any other technologies with the defender named",
    "start": "106860",
    "end": "113090"
  },
  {
    "text": "defender is a huge market share in the AV industry eight percent of Windows 7 systems and",
    "start": "113090",
    "end": "119250"
  },
  {
    "text": "no more than 50 percent of Windows 10 devices that's because it's my understanding that with Windows 10 Microsoft turned out defender by default",
    "start": "119250",
    "end": "125909"
  },
  {
    "text": "when you install the OS Defender also runs on sandbox Taz NT authority system",
    "start": "125909",
    "end": "131550"
  },
  {
    "text": "meaning that if you have an exploit for a vulnerability inside the fender you'll get initial remote code execution you also have a profess cup to",
    "start": "131550",
    "end": "138570"
  },
  {
    "text": "system and you'll have a Navy bypass because you're running inside the AV so it's not likely to flag itself doing",
    "start": "138570",
    "end": "143670"
  },
  {
    "text": "anything malicious it's also surprisingly easy for attackers to reach remotely I haven't tried this myself but",
    "start": "143670",
    "end": "149070"
  },
  {
    "text": "some friends of Google project zero told me that they were able to get definitive scan binaries by simply emailing them to people who had a gmail tab open in the",
    "start": "149070",
    "end": "155700"
  },
  {
    "text": "background and then Google Chrome would catch the downloaded file from the GL",
    "start": "155700",
    "end": "160710"
  },
  {
    "text": "message it would hit disk and a mini filter driver would grab it and then go scan it so it's actually really easy to get into this attack surface my",
    "start": "160710",
    "end": "168150"
  },
  {
    "text": "motivation was you might have seen this tweet about a year ago Tavis Ormandy and Natalie Silvana via Google project zero",
    "start": "168150",
    "end": "174090"
  },
  {
    "text": "discovered some great defender bugs and I have looked at other a of these but never defender so I spent about four",
    "start": "174090",
    "end": "179700"
  },
  {
    "text": "months reverse engineering Windows defenders JavaScript engine what you're going to talk about just briefly next and then after doing that I moved on to",
    "start": "179700",
    "end": "185910"
  },
  {
    "text": "looking at the Windows emulator for about five or six months and that's what you're seeing here today now defender",
    "start": "185910",
    "end": "192630"
  },
  {
    "text": "has a number of components and and things like that I've different plugins drivers dll's and",
    "start": "192630",
    "end": "198630"
  },
  {
    "text": "so forth here we're looking at the main traditional main defender DLL MP engine",
    "start": "198630",
    "end": "203880"
  },
  {
    "text": "DLL this is really the main scanning interface for defender so it's not doing say system call hooking or callbacks or",
    "start": "203880",
    "end": "210600"
  },
  {
    "text": "anything like that it's the main scanning interface that says given a file is that file malicious or not want",
    "start": "210600",
    "end": "218040"
  },
  {
    "text": "to talk a little bit about my prior research on defenders JavaScript engine which presented out at recon Brussels in",
    "start": "218040",
    "end": "223050"
  },
  {
    "text": "Brussels Belgium in February and some of the themes that I'm going to talk about the JavaScript engine you're going to",
    "start": "223050",
    "end": "228120"
  },
  {
    "text": "see repeated in the windows engine this bit Lille equal taking to the presentation so I found they the",
    "start": "228120",
    "end": "233730"
  },
  {
    "text": "defender had a JavaScript engine used for analysis of potentially malicious code that I reversed from binary I use",
    "start": "233730",
    "end": "239820"
  },
  {
    "text": "the custom shell and loader with help from Ralph rolls so this was a custom shell we could use to interact with this",
    "start": "239820",
    "end": "245760"
  },
  {
    "text": "JavaScript engine which is not normally exposed to users and I found throughout the engine that there were a V",
    "start": "245760",
    "end": "251100"
  },
  {
    "text": "instrumentation callbacks to inform the engine about actions that potentially malicious JavaScript scripts weren't using or taking and I also found that",
    "start": "251100",
    "end": "258570"
  },
  {
    "text": "the developers made the choice that seemed to emphasize security at the cost of performance so the engine is not",
    "start": "258570",
    "end": "263640"
  },
  {
    "text": "necessarily super fast at Hershel drop script engine I found it to be relatively secure in",
    "start": "263640",
    "end": "269889"
  },
  {
    "text": "terms of related work in the AV reverse engineering space there's only a handful of prior publications I did some work",
    "start": "269889",
    "end": "276910"
  },
  {
    "text": "called a V leak with some collaborators from my University we presented that two years ago here at Glock had indefinite",
    "start": "276910",
    "end": "282910"
  },
  {
    "text": "blackout and music swoon as well there's also tablets or Mindy's defender bugs from 2017 and you might have seen",
    "start": "282910",
    "end": "288700"
  },
  {
    "text": "and hak-seon wrote a great book but in general there's not a lot of talk about reversing IVs and in particular my focus",
    "start": "288700",
    "end": "295270"
  },
  {
    "text": "on AV emulators there's really no prior art other than there is actually a couple AV industry patents or that great",
    "start": "295270",
    "end": "301180"
  },
  {
    "text": "presentation from BitDefender looking at their emulator from 10 10 plus years ago I think it doesn't 8so including the",
    "start": "301180",
    "end": "309820"
  },
  {
    "text": "kind of background section let's talk about emulation itself so the traditional AV model I think a lot of",
    "start": "309820",
    "end": "315190"
  },
  {
    "text": "people think of is the city of scanning files and look for known malicious sequences or signatures such as file",
    "start": "315190",
    "end": "321640"
  },
  {
    "text": "hashes sequences of bytes or traits of the file but the problem is that the signature based heuristics like this",
    "start": "321640",
    "end": "328900"
  },
  {
    "text": "using hashes or things that are very easily evaded with pact code and Apple binaries and so forth this has been a",
    "start": "328900",
    "end": "335800"
  },
  {
    "text": "problem for a long time I'm talking 15 to 20 plus years this has been a problem so about 15 or 20 years ago the AV",
    "start": "335800",
    "end": "342039"
  },
  {
    "text": "industry moved into emulation so taking potentially malicious unknown binaries and actually running them in a",
    "start": "342039",
    "end": "347740"
  },
  {
    "text": "virtualized environment to see what are they doing at run time are they malicious or not and this",
    "start": "347740",
    "end": "352960"
  },
  {
    "text": "technology both by names such as sandboxing dynamic analysis that a nation chamber is so forth",
    "start": "352960",
    "end": "359850"
  },
  {
    "text": "it's an overview of emulation you're going to take a potentially malicious unknown binary loaded into you or",
    "start": "359850",
    "end": "366460"
  },
  {
    "text": "virtual memory space for your emulator begin to running from some entry point and run into a termination condition",
    "start": "366460",
    "end": "372400"
  },
  {
    "text": "such as time number of instructions executed number of API calls amount of memory used etc and throughout this",
    "start": "372400",
    "end": "380979"
  },
  {
    "text": "process you're collecting heuristic observations about the malleus runtime behavior looking for signatures and",
    "start": "380979",
    "end": "385990"
  },
  {
    "text": "memory or dropped the disk or anything else you use the detect malware that you can't detect with a single static hash",
    "start": "385990",
    "end": "392400"
  },
  {
    "text": "all right that includes the introduction moving into talking about my tooling and process so how I did what I did",
    "start": "392400",
    "end": "399759"
  },
  {
    "text": "did traditional static analysis with industry standard technologies like Ida Pro also did some patch analysis with",
    "start": "399759",
    "end": "406909"
  },
  {
    "text": "and if so I said to take multiple versions of defender and diff them and see what a change would have updated as",
    "start": "406909",
    "end": "412039"
  },
  {
    "text": "for example project zero is finding vulnerability as a defender I could analyze and see how Microsoft was fixing",
    "start": "412039",
    "end": "417080"
  },
  {
    "text": "them I found it really nice that Microsoft publishes PD B's these are debug databases that describe the file",
    "start": "417080",
    "end": "423289"
  },
  {
    "text": "have symbols and structures and things like that and while I was doing the",
    "start": "423289",
    "end": "428840"
  },
  {
    "text": "static analysis I also did a lot of dynamic analysis but there's a little challenges to doing dynamic analysis of avian engines defenders case it runs as",
    "start": "428840",
    "end": "436370"
  },
  {
    "text": "a protective process you can't debug it even as local admin you have to attach a kernel debugger to a VM in order to actually debug defender",
    "start": "436370",
    "end": "444400"
  },
  {
    "text": "introspection can be difficult the thing is just so complex when you're looking at emulator it can be very difficult to",
    "start": "444400",
    "end": "449930"
  },
  {
    "text": "analyze the virtual emulated state and the real estate and all this kind of stuff from just a debugger scanning on",
    "start": "449930",
    "end": "455810"
  },
  {
    "text": "demand can be difficult to trigger if you for example have to go into a GUI and select the file and do multiple clicks and drags and drops that's a pain",
    "start": "455810",
    "end": "462500"
  },
  {
    "text": "to automate and also code reach ability can be configuration to heuristics dependent so in some cases your defender",
    "start": "462500",
    "end": "469219"
  },
  {
    "text": "installed we could figure not to use emulation for whatever reason the solution to this problem is to build",
    "start": "469219",
    "end": "474979"
  },
  {
    "text": "custom loaders 480 binaries and this is not a unique idea to mean other people like Travis and Hawkes Anna thought look",
    "start": "474979",
    "end": "480500"
  },
  {
    "text": "what the need to do this as well so I began my work by taking a tool built by",
    "start": "480500",
    "end": "486139"
  },
  {
    "text": "Travis Ormandy of Google project 0 called load library and what type of stood was the PE loader for Linux",
    "start": "486139",
    "end": "492009"
  },
  {
    "text": "specifically tailored to the needs of Windows Defender this is not a full fact a full-featured",
    "start": "492009",
    "end": "497050"
  },
  {
    "text": "Windows emulator akin to wine or nothing like that just enough to get the fender running on Linux so loading the P file",
    "start": "497050",
    "end": "503569"
  },
  {
    "text": "in and exposing a scanning interface I built about 3,000 lines of tooling on top of that in order to enable my",
    "start": "503569",
    "end": "509750"
  },
  {
    "text": "research which I'll talk about quick walk through of how Tabitha's load",
    "start": "509750",
    "end": "514760"
  },
  {
    "text": "library Tool Works we begin with our Linux MP client binary this is this",
    "start": "514760",
    "end": "519800"
  },
  {
    "text": "binary that's gonna do the loading for us we've loaded URI locations for MB engine dll so just a matter of reading",
    "start": "519800",
    "end": "526820"
  },
  {
    "text": "the piece back and understanding how to map in a P file into memory even though we're on Linux do we go through the import address",
    "start": "526820",
    "end": "533000"
  },
  {
    "text": "table and resolve imports to windows functions to shimmed out implementations of them on linux so for example a call",
    "start": "533000",
    "end": "539570"
  },
  {
    "text": "to create file is trimmed out to a call to F open and a call to write file is done with F right and then inside of",
    "start": "539570",
    "end": "547400"
  },
  {
    "text": "there we have an emulator and for now just remember that it has this table Jesus calls this is basically a table of emulations for various windows api's",
    "start": "547400",
    "end": "555430"
  },
  {
    "text": "outside of there we have our malware binary we call a function called our signal with the malware binary as a",
    "start": "555430",
    "end": "561770"
  },
  {
    "text": "buffer and we say here you scan this buffer of this length then we go through some scanning engine selection that will",
    "start": "561770",
    "end": "568190"
  },
  {
    "text": "see if they can scan and detect this with no six that caches or whatever if they can't eventually they'll make their",
    "start": "568190",
    "end": "574070"
  },
  {
    "text": "way to the emulator and our malware binary will get am elated there the defender comes back and says hey we",
    "start": "574070",
    "end": "579530"
  },
  {
    "text": "found this particular virus so it's a very simple interface all you get is a name of virus out so a quick demo let's",
    "start": "579530",
    "end": "586640"
  },
  {
    "text": "see scanning with MB client so here I'm going to scan the e car test file this is an industry standard test file for",
    "start": "586640",
    "end": "592550"
  },
  {
    "text": "any AV this is not a cumulative file but this is just standard in the AV industry you scan this and it should say found a",
    "start": "592550",
    "end": "598580"
  },
  {
    "text": "card not a virus so we're gonna run load library and a client and scan D car calm and we'll see defender comes back with a",
    "start": "598580",
    "end": "605480"
  },
  {
    "text": "classification that this was a virus thought C car test file all right so",
    "start": "605480",
    "end": "610880"
  },
  {
    "text": "that's just the basic standard tool that just does that scanning all we get out is a malware name in addition to just",
    "start": "610880",
    "end": "619100"
  },
  {
    "text": "running the engine I wanted to collect more information on it such as debug and given things like that I found that debugger is like gdb on",
    "start": "619100",
    "end": "625850"
  },
  {
    "text": "Linux or just a little too low-level for what I wanted to do the amount of introspection I wanted to do and then the complexity I was dealing with so",
    "start": "625850",
    "end": "631340"
  },
  {
    "text": "ended up using a code coverage analysis tool called lighthouse which was developed by Marcus gross a Tom with ret to systems who is also a fellow alumnus",
    "start": "631340",
    "end": "638360"
  },
  {
    "text": "of RPI SEC and RPI with me and well-laid house does run a given binary under",
    "start": "638360",
    "end": "644000"
  },
  {
    "text": "Intel pin or Dynamo real instrumentation then emit a file that has some cupboard information which you've been loading to",
    "start": "644000",
    "end": "649850"
  },
  {
    "text": "Ida Pro and you can visualize what basic locks were hit during execution and my family's we have are a useful tool",
    "start": "649850",
    "end": "655160"
  },
  {
    "text": "throughout my reversing I'll show some examples of that as I go through I did find it kind of funny a have our flake",
    "start": "655160",
    "end": "660980"
  },
  {
    "text": "really great reverse engineer with Google project zero give a keynote about challenges reverse engineering and actually pointed",
    "start": "660980",
    "end": "666680"
  },
  {
    "text": "out that collecting covered traces from Windows Defender itself in this particular DLL we're working with is",
    "start": "666680",
    "end": "671960"
  },
  {
    "text": "very difficult because of the fact that it runs as a privilege process okay",
    "start": "671960",
    "end": "677660"
  },
  {
    "text": "moving into talking about my reverse engineering itself first up were going to talk about the engine start up an",
    "start": "677660",
    "end": "682760"
  },
  {
    "text": "initialization very quick overview of that so defenders are signal function",
    "start": "682760",
    "end": "691310"
  },
  {
    "text": "provides an entry point into defenders scanning you give a buffer of data and it comes back with a classification of",
    "start": "691310",
    "end": "696440"
  },
  {
    "text": "the malware was it malicious what is it and what's its name that's what we saw with the e car test file example as I",
    "start": "696440",
    "end": "703070"
  },
  {
    "text": "said defender uses emulation to analyze potentially in malicious binaries that doesn't recognize an other less expensive analyses as hashing or other",
    "start": "703070",
    "end": "710120"
  },
  {
    "text": "heuristics like that and emulate results are also cached meaning if you try to scan the file twice over the first time you scan it",
    "start": "710120",
    "end": "716450"
  },
  {
    "text": "the result of the emulation will be cached say for example by an md5 hash or something like that and it won't be",
    "start": "716450",
    "end": "721970"
  },
  {
    "text": "emulated second time unless you fully reinitialize the engine or there are some Microsoft kind of features a way of",
    "start": "721970",
    "end": "727790"
  },
  {
    "text": "doing that enforce agree emulation I mean there needs to be initialized by say allocating memory for the emulation",
    "start": "727790",
    "end": "735490"
  },
  {
    "text": "initializing various objects and subsystems so this is all meant in C++ so if emulate or build up various equals",
    "start": "735490",
    "end": "742040"
  },
  {
    "text": "plus objects then the binder could be analyzed has to be loaded relocated",
    "start": "742040",
    "end": "747290"
  },
  {
    "text": "resolving imports and so forth and you'll actually see here on the right side of my slides some examples like",
    "start": "747290",
    "end": "754850"
  },
  {
    "text": "they are looking for say a suspicious section sighs a suspicious section name",
    "start": "754850",
    "end": "760720"
  },
  {
    "text": "section offset and so forth they're collecting heuristic observations about the binary during the loading process",
    "start": "760720",
    "end": "766240"
  },
  {
    "text": "and then they're also going to resolve imports to what they call the DLL is",
    "start": "766240",
    "end": "771560"
  },
  {
    "text": "just like our own real window systems you have DLLs and defender you have a virtual DLL satellite emulation of the windows api and you'll also see things",
    "start": "771560",
    "end": "778400"
  },
  {
    "text": "like they need to set up an image name so for example if you are an executable PE binary",
    "start": "778400",
    "end": "783920"
  },
  {
    "text": "your name is my app that XE this is obviously something that you could use to write evasive malware that would look",
    "start": "783920",
    "end": "789589"
  },
  {
    "text": "for is my name my app and if it is it would choose not to run and you can actually see that reflected here in the",
    "start": "789589",
    "end": "795020"
  },
  {
    "text": "loading process itself as they're setting up that particular trait of later moving into talking about cpu",
    "start": "795020",
    "end": "801950"
  },
  {
    "text": "emulation the very lowest level of the engine actually emulating the CPU and the instructions that the malware binary",
    "start": "801950",
    "end": "807470"
  },
  {
    "text": "is running so defenders emulation of CPUs is actually really not emulation so",
    "start": "807470",
    "end": "813200"
  },
  {
    "text": "much as dynamic translation this is very similar to what chemo or QEMU the quick",
    "start": "813200",
    "end": "818270"
  },
  {
    "text": "and muller does you're basically going to lift the x86 code up into an intermediate representation and then",
    "start": "818270",
    "end": "824300"
  },
  {
    "text": "dump it down into sanitized xt6 you're rewriting the code so that it's safe and",
    "start": "824300",
    "end": "829460"
  },
  {
    "text": "clean and has certain security properties and say can't access outside of the bounds of certain buffers and things like that they actually support a",
    "start": "829460",
    "end": "836270"
  },
  {
    "text": "number of architectures you can do 16 32 and 64-bit x86 ILR net they can do VM",
    "start": "836270",
    "end": "843740"
  },
  {
    "text": "protect so the Ameritech packer they can lift and then dump out or even arm and then this sub system is incredibly",
    "start": "843740",
    "end": "851180"
  },
  {
    "text": "complicated as you'll see some of the control hole graphs it's just way too much to reverse engineer the whole thing so just we give you a broad overview of",
    "start": "851180",
    "end": "857060"
  },
  {
    "text": "how it works and then Diet do a deeper dive and say the Windows emulation so we have these architecture 2il lifting",
    "start": "857060",
    "end": "863990"
  },
  {
    "text": "functions that take a given code of it in architecture and lift it up into defenders unique intermediate representation",
    "start": "863990",
    "end": "869600"
  },
  {
    "text": "you see finger things like arm net the unprotected xt6 x64 - IL and these are",
    "start": "869600",
    "end": "876350"
  },
  {
    "text": "massive use control flow graphs that are far too difficult to take on you know it would take a lot of time to reverse",
    "start": "876350",
    "end": "882320"
  },
  {
    "text": "engineer that china of a switch case and basically they're gonna do is grab an opcode and then IAL bytes accordingly",
    "start": "882320",
    "end": "888080"
  },
  {
    "text": "you can kind of see this process in the bottom right as for example a xt6 push",
    "start": "888080",
    "end": "893240"
  },
  {
    "text": "instruction mapped to 13 in the IL aisles are so so popular right now and",
    "start": "893240",
    "end": "898730"
  },
  {
    "text": "everyone loves to use them but defender has been doing this for at least 15 or 20 years which is really amazing in",
    "start": "898730",
    "end": "906860"
  },
  {
    "text": "addition to the just simply lifting the IAP - uplifting architecture up - IL you can do AI emulation in software I did",
    "start": "906860",
    "end": "914300"
  },
  {
    "text": "never observe the IL being emulated in software during my research I haven't verified this but my hypothesis is this",
    "start": "914300",
    "end": "920750"
  },
  {
    "text": "is so that the windows develop defender developers can support and non x86 architectures so they don't have to",
    "start": "920750",
    "end": "926750"
  },
  {
    "text": "write a jet engine to jet from il down to arm or IL down to some other architecture they can just JIT to exit e6 and if they",
    "start": "926750",
    "end": "933799"
  },
  {
    "text": "ever want to run an arm they could just compile their software emulator for arm or any other architecture and it should",
    "start": "933799",
    "end": "938959"
  },
  {
    "text": "just sort of work I'll be it slowly and then we have the exit of the il to",
    "start": "938959",
    "end": "944449"
  },
  {
    "text": "execute translation which is taking the il code and then dump it out into the sanitized x86 and you can even see how",
    "start": "944449",
    "end": "950899"
  },
  {
    "text": "this sort of works here for example with the le a instruction the opcode in x86",
    "start": "950899",
    "end": "958639"
  },
  {
    "text": "for le a which is a loading load relative address is 8 D and you can see",
    "start": "958639",
    "end": "964100"
  },
  {
    "text": "them here constructing the le a instruction whether taking 8 D and then masking off with a register that would",
    "start": "964100",
    "end": "971480"
  },
  {
    "text": "indicate the particular registry 1 le a into and you can see that here in the circle red boxes and then architectural",
    "start": "971480",
    "end": "980299"
  },
  {
    "text": "a weak or difficult to emulate or difficult lift instructions such as for example cpuid are handled by calling",
    "start": "980299",
    "end": "985759"
  },
  {
    "text": "directly into software bound emulations of those instructions and you can see here in the left code that's actually",
    "start": "985759",
    "end": "992089"
  },
  {
    "text": "generating a call into a handler function so here they need to get a pointer to the handler function of",
    "start": "992089",
    "end": "998869"
  },
  {
    "text": "function pointer and then they're going to generate out here you can see in these immediate here moving the",
    "start": "998869",
    "end": "1004749"
  },
  {
    "text": "appropriate registers and then J actually generating a call to the immediate value to call the register",
    "start": "1004749",
    "end": "1010929"
  },
  {
    "text": "handling that unique architectural event microsoft did document this in a 2005 paper published a virus bold and",
    "start": "1010929",
    "end": "1017169"
  },
  {
    "text": "recommend checking that out if you're interested so as I mentioned there are architectural or specific emulation",
    "start": "1017169",
    "end": "1023019"
  },
  {
    "text": "functions for unique instructions like CPU ID or an arm cue add or SM law all",
    "start": "1023019",
    "end": "1028928"
  },
  {
    "text": "these kind of strange unique instructions that don't cleanly map up to the il so they're gonna use these",
    "start": "1028929",
    "end": "1034269"
  },
  {
    "text": "functions emulate those instructions I have an example here of the x86 CPU ID",
    "start": "1034269",
    "end": "1039548"
  },
  {
    "text": "instruction which is emulated here and here I have a mallet mine area that does",
    "start": "1039549",
    "end": "1045610"
  },
  {
    "text": "movie IX you know eight-eight 1000 whatever and then cpuid and using",
    "start": "1045610",
    "end": "1050889"
  },
  {
    "text": "lighthouse we can visualize the basic block coverage well in this particular binary is run and we can see that we hit",
    "start": "1050889",
    "end": "1056019"
  },
  {
    "text": "these basic blocks and here I'm the comparison of the same immediate we take the forward branch",
    "start": "1056019",
    "end": "1062590"
  },
  {
    "text": "and hit push three and so forth so this is an instruction that's not emulated",
    "start": "1062590",
    "end": "1067870"
  },
  {
    "text": "with out of the code now to talk about some instrumentation after we",
    "start": "1067870",
    "end": "1074140"
  },
  {
    "text": "record the basics of the loading and the CPU emulation needed to talk about how I did some of my research with some",
    "start": "1074140",
    "end": "1079960"
  },
  {
    "text": "instrumentation before going further so as I said there's very little",
    "start": "1079960",
    "end": "1085330"
  },
  {
    "text": "visibility in the engine it's difficult to introspect into it difficult to debug it and when you run the Trender all you",
    "start": "1085330",
    "end": "1092260"
  },
  {
    "text": "get out for output is the name of a virus that was identified the solution that I came up with was to give us a",
    "start": "1092260",
    "end": "1098350"
  },
  {
    "text": "malware's eye view sort of hook functions inside defender that when malabar calls them it can pass data out",
    "start": "1098350",
    "end": "1105100"
  },
  {
    "text": "to the outside and in turn the inside of the engine has data back into the inside and we can have a two-way communication",
    "start": "1105100",
    "end": "1110169"
  },
  {
    "text": "with the malware inside someone to talk about how that works so remember this is",
    "start": "1110169",
    "end": "1115419"
  },
  {
    "text": "the original diagram of tavis or Maddie's load library tool that I showed you we're going to hear all these kind of",
    "start": "1115419",
    "end": "1120970"
  },
  {
    "text": "stuff in a particular the jeesus calls call table which is table function pointers for functions that are called",
    "start": "1120970",
    "end": "1126460"
  },
  {
    "text": "when various windows api's are called inside the emulator by the malware and I",
    "start": "1126460",
    "end": "1131710"
  },
  {
    "text": "modified and B client with about 3,000 lines of code and particularly eg syscalls table and I replaced defenders",
    "start": "1131710",
    "end": "1140049"
  },
  {
    "text": "implementations of various OS API emulations like output debug string ie or in win exec with my own function",
    "start": "1140049",
    "end": "1146350"
  },
  {
    "text": "players so let's see what that looks like so for example defender has an",
    "start": "1146350",
    "end": "1152409"
  },
  {
    "text": "emulation about cookie bugs during a that's very simple just peels a single parameter off the stack and bugs the",
    "start": "1152409",
    "end": "1157899"
  },
  {
    "text": "time on the emulator I can go here and I can find offsets to the various",
    "start": "1157899",
    "end": "1163330"
  },
  {
    "text": "functions inside the fender and I can then set hooks by overwriting that memory inside the defender binary and",
    "start": "1163330",
    "end": "1169380"
  },
  {
    "text": "that means that when output debug string a is called inside the emulator by a malware binary our function pointer is",
    "start": "1169380",
    "end": "1175360"
  },
  {
    "text": "called stat or on relation is invoked so here's the original output debug string",
    "start": "1175360",
    "end": "1180730"
  },
  {
    "text": "a implementation and the top right and in the center of the screen is my implantation of this function let's walk through this at the top we have our",
    "start": "1180730",
    "end": "1188080"
  },
  {
    "text": "declaration there's a large structure of PE VARs T that's used throughout defender it's large when confuso you",
    "start": "1188080",
    "end": "1195100"
  },
  {
    "text": "know Poynter we don't actually have to manipulate it directly we use defender's programmatic api's for doing that to",
    "start": "1195100",
    "end": "1200470"
  },
  {
    "text": "interact with it so I just declared as a flag pointer then we have this in defender we have a template structure",
    "start": "1200470",
    "end": "1206289"
  },
  {
    "text": "called parameters one argh this is basically a structure that stores a",
    "start": "1206289",
    "end": "1211600"
  },
  {
    "text": "single parameter to the function so we declare our own array of human 64's to be the parameters array then we use a",
    "start": "1211600",
    "end": "1219730"
  },
  {
    "text": "function inside defender that pills a single parameter off the virtual stack meaning they're going to go into the",
    "start": "1219730",
    "end": "1224950"
  },
  {
    "text": "emulated state read the ESP and AP registers and calculate according to you",
    "start": "1224950",
    "end": "1230590"
  },
  {
    "text": "know where they're being the built from everything and actually pull off the four byte parameter from the stack passed this function and we're gonna use",
    "start": "1230590",
    "end": "1237700"
  },
  {
    "text": "their function to do that for us we have to resolve the address that that functionally just call directly into it with the the llevarse team structure and",
    "start": "1237700",
    "end": "1244390"
  },
  {
    "text": "we'll get a one-parameter back and that parameter is simply a virtual address inside defenders emulator so it's",
    "start": "1244390",
    "end": "1250870"
  },
  {
    "text": "actually a pointer that's not a real pointer that we can dereference it's just an address in there's a virtualized memory space sitting inside our engine",
    "start": "1250870",
    "end": "1257850"
  },
  {
    "text": "then we use a defender function called getstring or PE var a PE get strength that will take that virtual address and",
    "start": "1257850",
    "end": "1264850"
  },
  {
    "text": "translate that into a real pointer that we can actually manipulate with native code so we're going to do that we're",
    "start": "1264850",
    "end": "1270429"
  },
  {
    "text": "going to call it that defender function for doing that and now we have a string we can simply print a standard out so",
    "start": "1270429",
    "end": "1275740"
  },
  {
    "text": "this sounds like a lot but let's see it in action with a quick demo so remember",
    "start": "1275740",
    "end": "1281860"
  },
  {
    "text": "previously I showed you just a very simple example of just calling eke our test file here we're passing in a binary",
    "start": "1281860",
    "end": "1288960"
  },
  {
    "text": "that's gonna say hello Def Con when it's run all right because it should say hello blackhat but basically we have a",
    "start": "1288960",
    "end": "1296649"
  },
  {
    "text": "binary a Windows binary that I call you know DEF CON XE and when I scan that",
    "start": "1296649",
    "end": "1302110"
  },
  {
    "text": "binary it goes inside the emulator calls up with debug string a with hello Def Con and then open to extra a with this",
    "start": "1302110",
    "end": "1308649"
  },
  {
    "text": "is a live demo I may run it with more debug stuff and then we can see what the",
    "start": "1308649",
    "end": "1314770"
  },
  {
    "text": "emulator engine wouldn't saw inside sorry with more debug stuff more debug",
    "start": "1314770",
    "end": "1322390"
  },
  {
    "text": "up we can see the exact offsets and parameters and we can see the exact some of the API calls and we could see that the virtual",
    "start": "1322390",
    "end": "1328640"
  },
  {
    "text": "address was 43 2 2 8 it says hello Def Con and the next call is 4 3 0 whatever",
    "start": "1328640",
    "end": "1336050"
  },
  {
    "text": "this is and we can translate that out and print the standard out that gives us a view inside the engine now it's great",
    "start": "1336050",
    "end": "1342290"
  },
  {
    "text": "that we can just say print out strings 2 standard out but how about doing more we can actually use this to observe what's",
    "start": "1342290",
    "end": "1347570"
  },
  {
    "text": "going on inside the engine as well so have to build this binary as I said it's",
    "start": "1347570",
    "end": "1354800"
  },
  {
    "text": "not as easy as you might think they just always get emulator consistently it does take massaging the linker and your",
    "start": "1354800",
    "end": "1360650"
  },
  {
    "text": "compiler in order to create binaries that are consistently emulated because the federal out of heuristics that it",
    "start": "1360650",
    "end": "1365960"
  },
  {
    "text": "uses to turn it if it can or emulate the binaries or not at the end of this presentation I will release some code",
    "start": "1365960",
    "end": "1371030"
  },
  {
    "text": "for your own binary you can put inside the engine and have it go and run ok so",
    "start": "1371030",
    "end": "1378410"
  },
  {
    "text": "we have now established the basics of how our code is loaded how it's run and",
    "start": "1378410",
    "end": "1383930"
  },
  {
    "text": "then how we're able to observe what's going on inside the emulator so now to the real meat of the presentation let's",
    "start": "1383930",
    "end": "1389660"
  },
  {
    "text": "look at the Windows mu windows emulation routines that we can are now exposed to us with this kind of i/o mechanism so",
    "start": "1389660",
    "end": "1397310"
  },
  {
    "text": "first off we're going to start off by talking about the user mode environment inside Windows Defender so defender has",
    "start": "1397310",
    "end": "1404180"
  },
  {
    "text": "a virtualized virtual file system just like a real file system so this is inside this virtual emulator your",
    "start": "1404180",
    "end": "1411200"
  },
  {
    "text": "malware interactive file system and using our file system using our hook function we're able to dump the entire",
    "start": "1411200",
    "end": "1416960"
  },
  {
    "text": "file system which I'm going to demo here there's about 1300 functions or 39 areas",
    "start": "1416960",
    "end": "1423350"
  },
  {
    "text": "rather on the file system and here we're just running through all those files on the file system that just up in the boat",
    "start": "1423350",
    "end": "1428630"
  },
  {
    "text": "I'll run that one more time you can see here basically our binaries going inside the emulator and numerating all the",
    "start": "1428630",
    "end": "1434570"
  },
  {
    "text": "files in the file system and they're just dumping them out with our hooked binaries now I can LS the dump FS",
    "start": "1434570",
    "end": "1441440"
  },
  {
    "text": "directory and we can see all these different binaries that we pulled out and there I think about 1,500 of them or",
    "start": "1441440",
    "end": "1447860"
  },
  {
    "text": "so mostly they're fake executables but you'll find a handful of other things",
    "start": "1447860",
    "end": "1453370"
  },
  {
    "text": "like these unique files I found this file that just says the",
    "start": "1453370",
    "end": "1459230"
  },
  {
    "text": "word goat thousands of times over in with this name AAA touch-me-not dot txt",
    "start": "1459230",
    "end": "1464480"
  },
  {
    "text": "I had heard this term goat file before it's kind of an AV industry term for like a sacrificial file that's used for",
    "start": "1464480",
    "end": "1471560"
  },
  {
    "text": "a malware to infect or mess with so in this case they created a file a touch-me-not",
    "start": "1471560",
    "end": "1477040"
  },
  {
    "text": "presumably if your malware touches that file that might be an indicator that the malicious binding or something like that",
    "start": "1477040",
    "end": "1483230"
  },
  {
    "text": "I didn't go in a necessary to understand that exact relationship but it's a clearly you know kind of an insider joke",
    "start": "1483230",
    "end": "1489260"
  },
  {
    "text": "for the programmers that put thousands times over will also find fake config",
    "start": "1489260",
    "end": "1494750"
  },
  {
    "text": "files clearly written by programmers with comments like blah blah so again if your malware goes in and say",
    "start": "1494750",
    "end": "1500150"
  },
  {
    "text": "reads this file that might be American militia heuristic indicator of malicious intent we've a virtual registry with",
    "start": "1500150",
    "end": "1506090"
  },
  {
    "text": "thousands of registry entries with nique entry is like for things like world of warcraft so again maybe you have a",
    "start": "1506090",
    "end": "1511250"
  },
  {
    "text": "malware binary that looks for the World of Warcraft registry entry because it wants to say steal your login credits the World of Warcraft this is a way that",
    "start": "1511250",
    "end": "1517670"
  },
  {
    "text": "offender developers could detect that that is indeed that kind of malware if they see it doing the Reg open key on",
    "start": "1517670",
    "end": "1523070"
  },
  {
    "text": "the world Warcraft key that might indicate that it's you know looking for World of Warcraft mine Ares for example",
    "start": "1523070",
    "end": "1529480"
  },
  {
    "text": "we also have virtual processes inside the emulator and these are not real processes they're just names of returned",
    "start": "1529480",
    "end": "1535880"
  },
  {
    "text": "in this in this order so there's no actual other processes running there's no IP C or any of the full-on facilities",
    "start": "1535880",
    "end": "1542240"
  },
  {
    "text": "of Window System of ID but when you do a process enumeration which is a fairly common thing from our to do it'll give",
    "start": "1542240",
    "end": "1548060"
  },
  {
    "text": "you this list of fake processes of how that yellow with a lot of my app that XE which is our binary then we have beyond",
    "start": "1548060",
    "end": "1557000"
  },
  {
    "text": "just the use in one environment we have user mode code inside the engine which provides emulation of simples Windows ap",
    "start": "1557000",
    "end": "1563540"
  },
  {
    "text": "is now in the real Windows API there are generally two types of Windows API",
    "start": "1563540",
    "end": "1568670"
  },
  {
    "text": "functions broadly there are those that are going to stay inside user mode and do things like manipulating a string",
    "start": "1568670",
    "end": "1574040"
  },
  {
    "text": "returning the hard-coded value and so forth and then of those that end up resolving in to assist call for example",
    "start": "1574040",
    "end": "1579530"
  },
  {
    "text": "those that write to a file on file on disk open a socket interact with the registry and so forth",
    "start": "1579530",
    "end": "1584870"
  },
  {
    "text": "those actually resolve to assess Co where the kernel has to service the this request",
    "start": "1584870",
    "end": "1590350"
  },
  {
    "text": "and defender of these are analogously implemented with functions that stay inside the emulator and those that trap",
    "start": "1590700",
    "end": "1597070"
  },
  {
    "text": "it to native emulation and these are called vdl else inside defender the deals that provide this functionality my",
    "start": "1597070",
    "end": "1603639"
  },
  {
    "text": "presumption is that's virtual DLLs because these are just regular dll's in",
    "start": "1603639",
    "end": "1610690"
  },
  {
    "text": "the RP binaries once they extract them with our file system dumping code which extracted the 1500 functions or so or",
    "start": "1610690",
    "end": "1616089"
  },
  {
    "text": "binaries or so that are on the file system we can pop them tighter and reverse them which is really nice so our",
    "start": "1616089",
    "end": "1622570"
  },
  {
    "text": "first thing these what did I find I can go through that for the simple in emulator DLL emulations will find unique",
    "start": "1622570",
    "end": "1632309"
  },
  {
    "text": "reputations of windows api functions for example get user an MA and in this case",
    "start": "1632309",
    "end": "1637570"
  },
  {
    "text": "get user may returns a hard code string of John Doe this is something you could obviously use to detect the fender you",
    "start": "1637570",
    "end": "1643839"
  },
  {
    "text": "could say if I see the name John Doe I know I'm running inside the fenders emulator by the same token if you ask",
    "start": "1643839",
    "end": "1649299"
  },
  {
    "text": "for the computer name let's get computer name X a it'll say Hal 9000 so although I see a reference",
    "start": "1649299",
    "end": "1654940"
  },
  {
    "text": "to 2,000 want to Space Odyssey and again this is something you could write malware that looks for the user",
    "start": "1654940",
    "end": "1659979"
  },
  {
    "text": "named Hal 9000 and knows it's running inside defender and this is obviously not how getting user name a or their",
    "start": "1659979",
    "end": "1665049"
  },
  {
    "text": "computer name works on real Windows system but these functions are simple enough and they just return a simple string that they can be run inside the",
    "start": "1665049",
    "end": "1671710"
  },
  {
    "text": "emulator inside that dynamic translation context where they're ever escaping into say a native emulation that function",
    "start": "1671710",
    "end": "1677190"
  },
  {
    "text": "will also see things that return simple Heartgard values or just grab a value off the pad",
    "start": "1677190",
    "end": "1683009"
  },
  {
    "text": "lots of functions that are too complex to be implemented with full-on relations or simply stubbed out so RPC enable with",
    "start": "1683009",
    "end": "1690219"
  },
  {
    "text": "me trace is just gonna do it an exit process negative one our PC exception filter just returns zero and so forth so",
    "start": "1690219",
    "end": "1696759"
  },
  {
    "text": "lots of functions that a malware may call but may not be expecting them always to succeed or just shimmed out",
    "start": "1696759",
    "end": "1703029"
  },
  {
    "text": "with implementations that just turn 0 or negative 1 or whatever hard-coded value",
    "start": "1703029",
    "end": "1708659"
  },
  {
    "text": "will also find more unique strings for example another dll there are many dll's",
    "start": "1708659",
    "end": "1714009"
  },
  {
    "text": "and i can't show all of them here but looking at WS 232 I thought this was really interesting seeing these unique",
    "start": "1714009",
    "end": "1719829"
  },
  {
    "text": "strings and German IP addresses and German sites presumably maybe a German developer develop this or something but",
    "start": "1719829",
    "end": "1725600"
  },
  {
    "text": "again these are all traits that you could write malware that looks for them and uses them to detect that it's running inside defender so we've talked",
    "start": "1725600",
    "end": "1733280"
  },
  {
    "text": "about the simple emulations those that return simple hard-coded strings or negative 1 or 0 whatever hard-coded",
    "start": "1733280",
    "end": "1739010"
  },
  {
    "text": "value there are also more advanced simulations they require a Bulls that on",
    "start": "1739010",
    "end": "1744380"
  },
  {
    "text": "a real one to system would go into the kernel in defender they track out to native emulations we're going to talk",
    "start": "1744380",
    "end": "1749540"
  },
  {
    "text": "about the user kernel interaction and how the analogous this is called instruction the analogous processes",
    "start": "1749540",
    "end": "1756470"
  },
  {
    "text": "planted inside defender so defenders thetaba malaysian is implemented with a unique hyper call instruction called api",
    "start": "1756470",
    "end": "1763250"
  },
  {
    "text": "call the bytes of the opcode are shown there 0 F F F F 0 and then a 4 byte",
    "start": "1763250",
    "end": "1768710"
  },
  {
    "text": "immediate this is obviously not a real x86 instruction but inside defender as",
    "start": "1768710",
    "end": "1776210"
  },
  {
    "text": "we're running our minor malware binaries the API call instruction is they used a",
    "start": "1776210",
    "end": "1781430"
  },
  {
    "text": "track outside of this dynamic translation context so as the dynamic translator sees the API call instruction",
    "start": "1781430",
    "end": "1787690"
  },
  {
    "text": "it will then step in and then basically transition from this step you know this",
    "start": "1787690",
    "end": "1794270"
  },
  {
    "text": "emulation of the jittered x86 code it'll call directly into an emulation routine that provides emulation of that function",
    "start": "1794270",
    "end": "1801880"
  },
  {
    "text": "so these are for more complex functions though than a real window system would require going into the kernel so for",
    "start": "1801880",
    "end": "1807650"
  },
  {
    "text": "here for copy file W worker ivan I do disassembly that shows them do an API call over to Corona to copy file worker",
    "start": "1807650",
    "end": "1814400"
  },
  {
    "text": "as soon as the dynamic translation the interpreter server for this sexy 6 code that's being lifted to V il as soon as",
    "start": "1814400",
    "end": "1821630"
  },
  {
    "text": "it sees the API call it brings us over here to MP engine's function kernel32.dll copy file W worker this",
    "start": "1821630",
    "end": "1830120"
  },
  {
    "text": "mechanism this is the sort of function that we hooked when we hooked up with your bugs during a where these are",
    "start": "1830120",
    "end": "1835400"
  },
  {
    "text": "translating into a function inside MP engine DLL itself the prod simulation so",
    "start": "1835400",
    "end": "1842150"
  },
  {
    "text": "then there's a G syscalls table this is the table of 119 functions that provide emulations for these unique and",
    "start": "1842150",
    "end": "1848450"
  },
  {
    "text": "difficult and complex to emulate routines so they're all stored here in the table which has a function pointer",
    "start": "1848450",
    "end": "1854510"
  },
  {
    "text": "to the emulation as well as a crc32 of the DLL name and",
    "start": "1854510",
    "end": "1859760"
  },
  {
    "text": "the function name this is where we plant",
    "start": "1859760",
    "end": "1864920"
  },
  {
    "text": "our pointers when we're hooking up a debug string and other functions so an example of how this mechanism looks",
    "start": "1864920",
    "end": "1870920"
  },
  {
    "text": "like what it looks like an implementation inside defenders virtual dials inside the virtual file system",
    "start": "1870920",
    "end": "1877280"
  },
  {
    "text": "they have an emulation of kernel32 of put debug string a it's going to do some things like for example check was uppity",
    "start": "1877280",
    "end": "1883730"
  },
  {
    "text": "bug string I called over nine hundred times maybe you have malware that just repeatedly does up with debug string a and they want to know that so they'll",
    "start": "1883730",
    "end": "1890000"
  },
  {
    "text": "keep a count of how many times it was called then they're gonna ultimately resolve down into a call to API called kernel32 up with debug string I and this",
    "start": "1890000",
    "end": "1898070"
  },
  {
    "text": "is a function that has here our API call instruction 0 FF FF 0 and the four byte",
    "start": "1898070",
    "end": "1904310"
  },
  {
    "text": "immediate specifying kernel32 output debug string a and one the dynamic translator sees that then transitioned",
    "start": "1904310",
    "end": "1910850"
  },
  {
    "text": "writing that emulation for us so then we reach the native emulation function this is the function that we hooked when I",
    "start": "1910850",
    "end": "1917090"
  },
  {
    "text": "was showing you uppity bug string ie on to standard out so we can go through the Jesus calls table or numerate the",
    "start": "1917090",
    "end": "1923480"
  },
  {
    "text": "functions that are done with our provided native emulation by defender and you'll see here at 3 API 32 car 32",
    "start": "1923480",
    "end": "1930050"
  },
  {
    "text": "and so forth the ones that are highlighted in yellow are unique to defender these are not functions found in real window system so for example",
    "start": "1930050",
    "end": "1936920"
  },
  {
    "text": "they have some backdoor debug functions administration functions function relating to phone to malware signatures",
    "start": "1936920",
    "end": "1942290"
  },
  {
    "text": "and in ntdll they've a number of functions linked to low-level access to the virtual file system that have the",
    "start": "1942290",
    "end": "1948350"
  },
  {
    "text": "VFS prefix all these native emulation functions take a large parameter called",
    "start": "1948350",
    "end": "1954380"
  },
  {
    "text": "a PE varsity it's about a half megabyte large structure that contains everything about a given emulation context so it's",
    "start": "1954380",
    "end": "1960110"
  },
  {
    "text": "gonna it's gonna have your time all the DLL binary is loaded various heuristic",
    "start": "1960110",
    "end": "1965150"
  },
  {
    "text": "observations about the binary pointers of the virtual address space just everything you need to know about a",
    "start": "1965150",
    "end": "1970310"
  },
  {
    "text": "give you emulation session that being single blob of code or brother of data",
    "start": "1970310",
    "end": "1975730"
  },
  {
    "text": "it's passed into every native emulation and then programmatic api's are used to",
    "start": "1975730",
    "end": "1981830"
  },
  {
    "text": "say retrieve parameters so they're going to go in and manipulate the virtual stack they're used to manipulate virtual",
    "start": "1981830",
    "end": "1988400"
  },
  {
    "text": "memory get that registers getting set and change memory and even change things like the",
    "start": "1988400",
    "end": "1994600"
  },
  {
    "text": "CPU to counter the time inside the engine a virtual memory can be",
    "start": "1994600",
    "end": "1999820"
  },
  {
    "text": "interacted with an API similar to that found in the unicorn engine or any other sort of programmatic emulator where you",
    "start": "1999820",
    "end": "2006300"
  },
  {
    "text": "can map it memory from a virtualized memory space translate that to a native memory you can interact with and touch",
    "start": "2006300",
    "end": "2012120"
  },
  {
    "text": "and then a number of utility functions and wrapper functions provide easier ways of doing common operations like",
    "start": "2012120",
    "end": "2017730"
  },
  {
    "text": "writing a single byte reading a single byte a D word or word so for various sizes of memory or doing things like",
    "start": "2017730",
    "end": "2023760"
  },
  {
    "text": "reading a virtual string from the another environment so we've now talked",
    "start": "2023760",
    "end": "2032190"
  },
  {
    "text": "about the mechanism you use the trap from inside the emulator at the outside for complex simulations let's talk a",
    "start": "2032190",
    "end": "2037320"
  },
  {
    "text": "little about the internal emulation of the Windows kernel in the NT kernel facilities so Windows kernel facilities",
    "start": "2037320",
    "end": "2044100"
  },
  {
    "text": "are emulated with native code so these facilities include the object manager process management file system the",
    "start": "2044100",
    "end": "2050220"
  },
  {
    "text": "registry and various synchronization primitives this is just like you would find on a real Windows system with the",
    "start": "2050220",
    "end": "2055260"
  },
  {
    "text": "NT kernel so first off we have the object manager this is part of Windows",
    "start": "2055260",
    "end": "2060990"
  },
  {
    "text": "that whenever you access a handle work with a handle it's going to pass through the object manager so handles can be things like",
    "start": "2060990",
    "end": "2067620"
  },
  {
    "text": "process these files registry Keys mutexes any sort of system resource that you can manipulate with your process has",
    "start": "2067620",
    "end": "2074280"
  },
  {
    "text": "a handle assigned to it and in a real Windows system those are stored inside the object manager defender sports five",
    "start": "2074280",
    "end": "2081240"
  },
  {
    "text": "types of objects which I've shown here file thread event mutex and semaphore and inside MP engine bed DLL there is a",
    "start": "2081240",
    "end": "2087929"
  },
  {
    "text": "virtual object manager to provide a software bound emulation of this traditional Windows kernel facility this",
    "start": "2087929",
    "end": "2093929"
  },
  {
    "text": "is done here in mp Engine 2 DLL for malware being emulated inside the emulator as I said there are there are",
    "start": "2093929",
    "end": "2100680"
  },
  {
    "text": "five types of object with emulation spotted by defender and they all actually on the background or",
    "start": "2100680",
    "end": "2106470"
  },
  {
    "text": "implemented with C++ classes and subclasses were they all in a herefor common MP",
    "start": "2106470",
    "end": "2111660"
  },
  {
    "text": "engine object manager object class you then have things like a file object which has unique traits like an M file",
    "start": "2111660",
    "end": "2117210"
  },
  {
    "text": "handle access mode share access and so forth or a mutex which is an M",
    "start": "2117210",
    "end": "2122620"
  },
  {
    "text": "mutant mutant object and that has going to have unique traits like it was an abandon and what is the weight count on",
    "start": "2122620",
    "end": "2127990"
  },
  {
    "text": "that object and then these are all stored in this basically a big hash map in in Windows Defender and access",
    "start": "2127990",
    "end": "2134140"
  },
  {
    "text": "programmatically through the object manager the operator is interact with by",
    "start": "2134140",
    "end": "2143100"
  },
  {
    "text": "windows API emulations so for example in NT open mutant worker they are going to",
    "start": "2143100",
    "end": "2149980"
  },
  {
    "text": "open an object so they're going to go into that hash table and try to retrieve the appropriate handle that the malware",
    "start": "2149980",
    "end": "2156460"
  },
  {
    "text": "being emulated tried to interact with or if they want to say set information for file they're gonna pull back handle and",
    "start": "2156460",
    "end": "2162640"
  },
  {
    "text": "they're gonna specifically check I want a file object so if you trace an a a handle to a mutex to an T set",
    "start": "2162640",
    "end": "2169510"
  },
  {
    "text": "information file a worker that call will fail because it's not a file object and",
    "start": "2169510",
    "end": "2174670"
  },
  {
    "text": "the object manners are going to manage that and keep track of State and type of different objects that are passed into it you'll also see unique things like",
    "start": "2174670",
    "end": "2182740"
  },
  {
    "text": "the current process handle is in Windows a pseudo handle it's not a real handle and so in the object manager in",
    "start": "2182740",
    "end": "2188740"
  },
  {
    "text": "defenders case it's emulated as X 1 2 3 4 so this is a trait you can use right malware that looks for hex 1 2 3 4 and",
    "start": "2188740",
    "end": "2194980"
  },
  {
    "text": "knows it's being emulated inside defender if it sees that nique value for",
    "start": "2194980",
    "end": "2200170"
  },
  {
    "text": "its own across the same day moves of a virtual file system so this provides",
    "start": "2200170",
    "end": "2205600"
  },
  {
    "text": "basically software bound emulation of a file system it's all done on the heap in defender so there's not a real file",
    "start": "2205600",
    "end": "2212530"
  },
  {
    "text": "system with a real disk or anything like that this is just sort of allocated memory on the heap that stores these",
    "start": "2212530",
    "end": "2218980"
  },
  {
    "text": "virtual files you can write to read to interact with and so forth there are",
    "start": "2218980",
    "end": "2224590"
  },
  {
    "text": "these kind of backdoor lower-level API for interacting with the file system of the VFS functions these are used by",
    "start": "2224590",
    "end": "2231850"
  },
  {
    "text": "emulations of the low-level NT api's for enacting the file system but they're",
    "start": "2231850",
    "end": "2238060"
  },
  {
    "text": "also exposed by Microsoft inside the engine which is someone we talked about a little bit a little bit later how there's some vulnerabilities that",
    "start": "2238060",
    "end": "2244030"
  },
  {
    "text": "manifest through these being exposed to the user or the brother the malware running inside the emulator finally",
    "start": "2244030",
    "end": "2251770"
  },
  {
    "text": "moving into talking about AV instrumentation throughout the engine we have these internal functions that I mentioned that",
    "start": "2251770",
    "end": "2258670"
  },
  {
    "text": "are accessible through the API call hyper call instruction and they do things like cube us a file for scanning",
    "start": "2258670",
    "end": "2265540"
  },
  {
    "text": "alias memory inside the emulator and most interestingly report Malheur behavior to inform detection heuristics",
    "start": "2265540",
    "end": "2271670"
  },
  {
    "text": "so we're going to talk about that so inside these kind of user mode emulations of various windows api",
    "start": "2271670",
    "end": "2278480"
  },
  {
    "text": "functions there are lots of calls to MP report event with various values this is",
    "start": "2278480",
    "end": "2284750"
  },
  {
    "text": "basically reporting that the malware inside the emulator took a particular action so if you call get system",
    "start": "2284750",
    "end": "2290330"
  },
  {
    "text": "directory Adel's call MP report event one two three three one so if you have some signatures that say I'm looking for",
    "start": "2290330",
    "end": "2296450"
  },
  {
    "text": "a call to get system directory and then to load library and then to this and then of that you want to know the",
    "start": "2296450",
    "end": "2301700"
  },
  {
    "text": "sequences of API calls that are called by the malware to inform that detection so throughout the video else",
    "start": "2301700",
    "end": "2307850"
  },
  {
    "text": "the pride emulation windows api that microsoft is woven in these calls to MP report event reporting bow out to the MP",
    "start": "2307850",
    "end": "2314810"
  },
  {
    "text": "engine dll the the larger sort of native code what particular API is the amount",
    "start": "2314810",
    "end": "2320090"
  },
  {
    "text": "were inside the emulator is calling and it can also pass out strings you can see",
    "start": "2320090",
    "end": "2325160"
  },
  {
    "text": "things here like if you do a create process and you create suspended maybe you doing process hollowing so they will",
    "start": "2325160",
    "end": "2331040"
  },
  {
    "text": "pass that the string create suspended to inform defender that you know this is a particularly potentially malicious",
    "start": "2331040",
    "end": "2336260"
  },
  {
    "text": "action particularly sketchy something you really normal software might not do more MP report events on things like get",
    "start": "2336260",
    "end": "2343880"
  },
  {
    "text": "file size or I get drive type a again will open throughout these simulations of various windows api's they're",
    "start": "2343880",
    "end": "2350180"
  },
  {
    "text": "informing defender about sort of heuristic protections and one example of",
    "start": "2350180",
    "end": "2356690"
  },
  {
    "text": "this kind of concrete very interesting to look at these as I mentioned we have these emulations of various other",
    "start": "2356690",
    "end": "2361940"
  },
  {
    "text": "processes running on the system and you'll notice that the names of antivirus processes all are in the 700",
    "start": "2361940",
    "end": "2368570"
  },
  {
    "text": "range so because first b AV AV p Tyvek c-- f save as f-secure norton DX e m SMP",
    "start": "2368570",
    "end": "2375530"
  },
  {
    "text": "engine that's the defender itself outpost and so forth they're all in the 700 range as far as their pits these are",
    "start": "2375530",
    "end": "2381470"
  },
  {
    "text": "not again real processes this is just an emulation of these processes being present it's just value but you'll notice when you call",
    "start": "2381470",
    "end": "2388120"
  },
  {
    "text": "the terminate process API if you pass it up hit in the 700 range to that function they will call MP reporter met with a",
    "start": "2388120",
    "end": "2395650"
  },
  {
    "text": "unique value and say a V so that's probably a strong indicator that your malware and you're trying to go and",
    "start": "2395650",
    "end": "2401170"
  },
  {
    "text": "terminate AV processes so they want to know that you were not just trying to kill any process which is itself may be",
    "start": "2401170",
    "end": "2406180"
  },
  {
    "text": "an indicator of malicious intent you're trying to clone a V process that's particularly bad and malicious so they'll inform that that part of the",
    "start": "2406180",
    "end": "2413290"
  },
  {
    "text": "offender that you're trying to kill an AV we also have a function called NT",
    "start": "2413290",
    "end": "2420160"
  },
  {
    "text": "control channel which provides our backdoor administration of the engine and this is something that taps or MIDI",
    "start": "2420160",
    "end": "2427240"
  },
  {
    "text": "was abusing this is basically it seems like for developers to manage and debug the engine so from inside the engine you",
    "start": "2427240",
    "end": "2434500"
  },
  {
    "text": "can do things like change memory you can change various ticks for detection you",
    "start": "2434500",
    "end": "2440050"
  },
  {
    "text": "can rewrite micro code that's used for emulation of various x86 or otherwise instructions you can modify register",
    "start": "2440050",
    "end": "2446380"
  },
  {
    "text": "state you can get the exact version number of MP engine but DLL this is all",
    "start": "2446380",
    "end": "2451570"
  },
  {
    "text": "exposed to malware inside the engine kind of interesting and presumably just sort of the debug feature I want to",
    "start": "2451570",
    "end": "2457540"
  },
  {
    "text": "reverse engineered the 32 options that this function rides and you can see them here so that concludes the discussion of",
    "start": "2457540",
    "end": "2465520"
  },
  {
    "text": "reverse engineering finally we're moving into vulnerability research we're going to start off by talking about some vulnerabilities inside defender that",
    "start": "2465520",
    "end": "2471580"
  },
  {
    "text": "Google project 0 discovered so Tabassum Rd at Google project 0 was looking at",
    "start": "2471580",
    "end": "2478030"
  },
  {
    "text": "the API call instruction and found that he could abuse that instruction by calling it directly from his malware so",
    "start": "2478030",
    "end": "2484090"
  },
  {
    "text": "he would able maybe basically create malware with a read write execute text section and then dynamically generate",
    "start": "2484090",
    "end": "2490150"
  },
  {
    "text": "the exact API call instruction he wanted to call with some inline assembly here and then when that instruction is run",
    "start": "2490150",
    "end": "2495850"
  },
  {
    "text": "over the virtual CPU it generates a call into these native emulation routines so",
    "start": "2495850",
    "end": "2502360"
  },
  {
    "text": "this was Tabitha's trick for getting into those unique Anita emulation routines was just to generate the API",
    "start": "2502360",
    "end": "2507880"
  },
  {
    "text": "construction with the the write for byte CRC that's required to reach them so",
    "start": "2507880",
    "end": "2514780"
  },
  {
    "text": "then Tavis looked at the NT control channel interface which is going to that sort of backdoor administration interface",
    "start": "2514780",
    "end": "2519850"
  },
  {
    "text": "seems like for developers to minister of the engine and found that when he used option 12 which is to load in micro code",
    "start": "2519850",
    "end": "2525910"
  },
  {
    "text": "there was this loop and then the count which is the number of entries provided",
    "start": "2525910",
    "end": "2531130"
  },
  {
    "text": "in this structure with new micro code it's user controlled and you can pass it",
    "start": "2531130",
    "end": "2536680"
  },
  {
    "text": "an arbitrary amount of new micro code and you only have a statically allocated buffer to store that new micro code so",
    "start": "2536680",
    "end": "2542950"
  },
  {
    "text": "you get a nice linear buffer overflow Microsoft patch this with a check that only 1000 entries are passed in for this",
    "start": "2542950",
    "end": "2549670"
  },
  {
    "text": "microcode interface also Tavis looked at the VFS subsystem and found that the VFS",
    "start": "2549670",
    "end": "2556270"
  },
  {
    "text": "write function which is a lower level API below NT right file providing emulation and access to the virtual file",
    "start": "2556270",
    "end": "2561880"
  },
  {
    "text": "system if you began by writing to a file with nothing with zero and basically you",
    "start": "2561880",
    "end": "2569980"
  },
  {
    "text": "could have a heap allocation inside the real engine though basically be like",
    "start": "2569980",
    "end": "2576070"
  },
  {
    "text": "empty there and then when you do another right you could have an arbitrary heap write",
    "start": "2576070",
    "end": "2582580"
  },
  {
    "text": "like a linear overflow and heap very bad learner ability very what about it's bit easy to exploit it seems like you could",
    "start": "2582580",
    "end": "2587980"
  },
  {
    "text": "also get arbitrary read as well in the hey Bo so this was very bad that you",
    "start": "2587980",
    "end": "2593470"
  },
  {
    "text": "could reach this internal API from malware inside the emulator so then",
    "start": "2593470",
    "end": "2601380"
  },
  {
    "text": "Microsoft perhaps these vulnerabilities out and I started looking at the API call instruction in the mechanism",
    "start": "2601380",
    "end": "2606940"
  },
  {
    "text": "provided I was actually able to get around some of the mitigation of the Microsoft added so Microsoft added this",
    "start": "2606940",
    "end": "2613660"
  },
  {
    "text": "check to is the DLL page which is used to whatever the API call instruction has",
    "start": "2613660",
    "end": "2619060"
  },
  {
    "text": "invoked its gonna check is that API call instruction coming from the malware text section or or is it coming from a video",
    "start": "2619060",
    "end": "2625120"
  },
  {
    "text": "L and this prevents you from using to have this trick of just generating the",
    "start": "2625120",
    "end": "2630580"
  },
  {
    "text": "API construction yourself so because I dumped at the vdl LS I was able to go",
    "start": "2630580",
    "end": "2636160"
  },
  {
    "text": "through them and find the API call stubs inside the videos that provide access to these api's I'm but just bouncing off",
    "start": "2636160",
    "end": "2642580"
  },
  {
    "text": "the my memory I could again open this attack surface up I did report this to Microsoft when they said it's not a trust boundaries kind of a common",
    "start": "2642580",
    "end": "2649000"
  },
  {
    "text": "response to Microsoft people reported vulnerabilities to them that are quite saying exact memory corruption but are sort of logical flaw so you'll",
    "start": "2649000",
    "end": "2656760"
  },
  {
    "text": "see an example here we can call out 50 bucks during a by simply finding the offset inside perimeter to where the API",
    "start": "2656760",
    "end": "2663420"
  },
  {
    "text": "construction calpro debug string a is and then just sort of bouncing off that with this particular offset and we can",
    "start": "2663420",
    "end": "2671460"
  },
  {
    "text": "also open these up these bad debug functions like entry control channel again finding the offset to call that",
    "start": "2671460",
    "end": "2677490"
  },
  {
    "text": "function and we can again call in to that effect or administration interface from inside the emulator this seems a",
    "start": "2677490",
    "end": "2684900"
  },
  {
    "text": "pretty systematic sort of design thing that you have to have these API call stubs exposed within the emulator it",
    "start": "2684900",
    "end": "2690900"
  },
  {
    "text": "seems fairly hard to patch out of one or Billie like this I'm gonna skip over the quick demo of that but basically I think",
    "start": "2690900",
    "end": "2698310"
  },
  {
    "text": "this you know it's not quite a memory corruption but does open us up to controlling and manipulating the engine",
    "start": "2698310",
    "end": "2704220"
  },
  {
    "text": "and also lets us access an attack circle a known history of vulnerabilities as Google project zero is demonstrated and",
    "start": "2704220",
    "end": "2710190"
  },
  {
    "text": "you can do all sorts of weird debug interface things with empty control channel finally I wanna talk a little",
    "start": "2710190",
    "end": "2715800"
  },
  {
    "text": "bit about fuzzing so I was able to build a customized buzzer to fuzz the Windows",
    "start": "2715800",
    "end": "2720930"
  },
  {
    "text": "Defender need of emulated api's and this is sort of the attack surface in the engine if you can hit those native API so we're inside the emulator you could",
    "start": "2720930",
    "end": "2727619"
  },
  {
    "text": "break out of it because this is native emulation of these functions this is akin to doing a probe esque by hitting a",
    "start": "2727619",
    "end": "2733470"
  },
  {
    "text": "Windows kernel syscall so I took MWR labs as OSX assist called fuzzer which",
    "start": "2733470",
    "end": "2739560"
  },
  {
    "text": "just generates some values this is not anything fancy like AFL no coverage no instrumentation just throwing random",
    "start": "2739560",
    "end": "2744750"
  },
  {
    "text": "values at the fender and then I was able to do things like fuzz NT write file I",
    "start": "2744750",
    "end": "2749880"
  },
  {
    "text": "posed a vulnerable version of NT write file for an older buildup offender which Kavis or MIDI had his VFS write function",
    "start": "2749880",
    "end": "2755819"
  },
  {
    "text": "and his vulnerability there and I knew that the Tabitha's parameters can be write file were not or rather to VFS",
    "start": "2755819",
    "end": "2762599"
  },
  {
    "text": "write would not be accepted by NT write file but I fuzz the function word who see if I could reach this the same",
    "start": "2762599",
    "end": "2768060"
  },
  {
    "text": "vulnerable code path in VFS write file through NT write file and I was able to do that and about seven minutes of",
    "start": "2768060",
    "end": "2773940"
  },
  {
    "text": "fuzzing around 8,000 execs a second so let me just quickly demo that so this is",
    "start": "2773940",
    "end": "2779970"
  },
  {
    "text": "sort of running that fuzzer and throwing these random values at these",
    "start": "2779970",
    "end": "2786860"
  },
  {
    "text": "api's over and over again I'm going to take a minute to initialize and here we're just throwing indefinitely it'll",
    "start": "2786860",
    "end": "2792260"
  },
  {
    "text": "just keep running and running throwing these random values the PC API so potentially we find a crash if we hit",
    "start": "2792260",
    "end": "2798230"
  },
  {
    "text": "one of the native api's so it was a demo",
    "start": "2798230",
    "end": "2804380"
  },
  {
    "text": "now wrapping up with the conclusion we cover tool and implementation CPU",
    "start": "2804380",
    "end": "2810140"
  },
  {
    "text": "dynamic translation basics for x86 a bit about the windows using more environment",
    "start": "2810140",
    "end": "2815150"
  },
  {
    "text": "and a bit of owner ability researching how we could fuzz this engine but does a whole lot we didn't cover the fender is",
    "start": "2815150",
    "end": "2820940"
  },
  {
    "text": "absolutely massive and there's a whole lot even just in the emulator we couldn't cover in just an hour today in",
    "start": "2820940",
    "end": "2827000"
  },
  {
    "text": "addition to the emulator inside the engine we have things like uh knackers parsers a JavaScript engine which I",
    "start": "2827000",
    "end": "2833180"
  },
  {
    "text": "talked about our recon Brussels other scanning engines and a dotnet engine this is a whole lot more tax surface 12",
    "start": "2833180",
    "end": "2839990"
  },
  {
    "text": "mega bytes of code to look at there's also a low engine I want to say broadly",
    "start": "2839990",
    "end": "2845930"
  },
  {
    "text": "people love to talk about AVS and vulnerabilities that may manifest themselves inside antivirus software but",
    "start": "2845930",
    "end": "2851720"
  },
  {
    "text": "there's not at all a lot of ground truth at all about a visa bout emulation systems in Navis or really any other",
    "start": "2851720",
    "end": "2857600"
  },
  {
    "text": "facets of a DS and there's there needs to be more research or Navis I think",
    "start": "2857600",
    "end": "2862700"
  },
  {
    "text": "before people make these broad claims about how they work don't get me wrong AVS have plenty of attack surface there's plenty of vulnerability into",
    "start": "2862700",
    "end": "2868520"
  },
  {
    "text": "your systems what people love to sort of hand wave at that and just say well hey these make you vulnerable Eevee's let you get hacked without",
    "start": "2868520",
    "end": "2874250"
  },
  {
    "text": "actually citing any research or showing that so i hope more people would reverse abies because right now there's just not",
    "start": "2874250",
    "end": "2879950"
  },
  {
    "text": "a lot of publications about them and I hope I've inspired people to do that and shown that it is possible if not it is it is rather difficult and time",
    "start": "2879950",
    "end": "2886040"
  },
  {
    "text": "consuming I'm gonna release some code later today or later this week sharing",
    "start": "2886040",
    "end": "2891500"
  },
  {
    "text": "some of the instrumentation I built for a defender such as the LP debug string a hooking and malware binary which I have",
    "start": "2891500",
    "end": "2896930"
  },
  {
    "text": "linker settings and the Pilar optimizations that make it bit consistently emulated inside the emulator I've also got an article coming",
    "start": "2896930",
    "end": "2902990"
  },
  {
    "text": "out of pocket GT phone 19 describing more of this detail and that concludes",
    "start": "2902990",
    "end": "2908060"
  },
  {
    "text": "my presentation I'm going release slides online I have over 200 slides and releasing with a ton more information",
    "start": "2908060",
    "end": "2913970"
  },
  {
    "text": "because there's way too much that I could just cover in just 15 minutes so I hope you've enjoyed the presentation I've opened EMS on Twitter",
    "start": "2913970",
    "end": "2920690"
  },
  {
    "text": "if you have any questions and I'll I guess I don't have much time to take questions but I'll be happy to talk to people after one-on-one thanks very much",
    "start": "2920690",
    "end": "2927250"
  },
  {
    "text": "[Applause]",
    "start": "2927250",
    "end": "2929559"
  }
]