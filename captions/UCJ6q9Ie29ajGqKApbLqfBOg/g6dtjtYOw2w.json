[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "good afternoon and thank you for coming to our talk I titled reverse engineering and exploiting birds in the cloud my",
    "start": "30",
    "end": "7589"
  },
  {
    "text": "name is Etienne I work on the Heroku platform security team and yeah I also",
    "start": "7589",
    "end": "13380"
  },
  {
    "text": "work on the Heroku platform security team and Matthias surprisingly same team",
    "start": "13380",
    "end": "19279"
  },
  {
    "text": "so all the three of us get to stand up here and speak to you it is a team",
    "start": "19279",
    "end": "24510"
  },
  {
    "start": "20000",
    "end": "41000"
  },
  {
    "text": "effort so we just like to give a shout out to our team without these people wouldn't be possible for us to dedicate",
    "start": "24510",
    "end": "31109"
  },
  {
    "text": "time to research and we have to thank them for listening to our dry runs and",
    "start": "31109",
    "end": "36660"
  },
  {
    "text": "running water proof of concept code so big shout out to the team the other",
    "start": "36660",
    "end": "42570"
  },
  {
    "start": "41000",
    "end": "113000"
  },
  {
    "text": "shout out goes to our Heroku engineering team so security is your security what",
    "start": "42570",
    "end": "49890"
  },
  {
    "text": "only be as successful as the engineering team that you work with and the relationship you have with that",
    "start": "49890",
    "end": "55770"
  },
  {
    "text": "engineering team we we are fortunate enough to have a really good relationship with our engineering team so we'd also like to thank them for the",
    "start": "55770",
    "end": "62640"
  },
  {
    "text": "support they've given us in trying out our proof of concepts and making it possible for us to achieve success so a",
    "start": "62640",
    "end": "70110"
  },
  {
    "text": "bit about our talk what we going to be looking at are your CI CD environments",
    "start": "70110",
    "end": "75540"
  },
  {
    "text": "as deployed into the cloud and particularly when it comes to multi-tenancy and some of the common",
    "start": "75540",
    "end": "81869"
  },
  {
    "text": "pitfalls that people fall into when they deploy into the cloud what we won't be looking at or your common container",
    "start": "81869",
    "end": "88229"
  },
  {
    "text": "breaker techniques or exposed Akasaka misconfigure ii profiles excessive",
    "start": "88229",
    "end": "93869"
  },
  {
    "text": "capabilities there are a number of talks out there that already cover these and they don't fall into the realm of this",
    "start": "93869",
    "end": "100409"
  },
  {
    "text": "talk so instead most configurations supply chain attacks and also some architectural considerations that you",
    "start": "100409",
    "end": "107729"
  },
  {
    "text": "need to take into account when deploying CI CD into the cloud so what is CI CD so",
    "start": "107729",
    "end": "115530"
  },
  {
    "start": "113000",
    "end": "192000"
  },
  {
    "text": "continuous integration continuous deployment or continuous delivery",
    "start": "115530",
    "end": "122060"
  },
  {
    "text": "basically this implies that your engineering team is able to develop code",
    "start": "122060",
    "end": "127439"
  },
  {
    "text": "push this to a saint central source code repository and as soon as that happens",
    "start": "127439",
    "end": "132840"
  },
  {
    "text": "it triggers a old process the board process runs to during integration tests and this",
    "start": "132840",
    "end": "139420"
  },
  {
    "text": "essentially ensures that there's no breaking changes in the code that you're committing in to you into production",
    "start": "139420",
    "end": "145600"
  },
  {
    "text": "before your tests run successfully and they do and have passed then that moves",
    "start": "145600",
    "end": "152200"
  },
  {
    "text": "on to your continuous delivery or continuous deployment phase where the actual application gets deployed into",
    "start": "152200",
    "end": "157540"
  },
  {
    "text": "production or into staging and is run for you so just as everything else this",
    "start": "157540",
    "end": "163780"
  },
  {
    "text": "is moving more and more into the cloud and instead of self hosting these kind of environments a lot of companies a lot",
    "start": "163780",
    "end": "170530"
  },
  {
    "text": "of providers have popped up that provide the service to you so think of platform",
    "start": "170530",
    "end": "175870"
  },
  {
    "text": "as a service or software as a service but more continuous integration continuous deployment as a service and",
    "start": "175870",
    "end": "182700"
  },
  {
    "text": "most of these companies rely on a multi tendency model and they use cloud",
    "start": "182700",
    "end": "188709"
  },
  {
    "text": "infrastructure to to provide the service to everyone now if we look at our c CI",
    "start": "188709",
    "end": "195190"
  },
  {
    "start": "192000",
    "end": "247000"
  },
  {
    "text": "CD environment there's some common components that exist in all of these so you've got your compute nodes and this",
    "start": "195190",
    "end": "202329"
  },
  {
    "text": "is where the actual tests execute and where your where code is is run and you'll have supporting services there",
    "start": "202329",
    "end": "208959"
  },
  {
    "text": "that provide things like a mock database or an actual database for test two to run against then you've got your build",
    "start": "208959",
    "end": "216489"
  },
  {
    "text": "time subnet or network which provides all the network resources that your CI CD might require for either running the",
    "start": "216489",
    "end": "223989"
  },
  {
    "text": "tests or prior to deployment and this is running inside a runtime kind of subnet",
    "start": "223989",
    "end": "229360"
  },
  {
    "text": "you've got control controlling infrastructure or CI infrastructure this controls those actual tests that are",
    "start": "229360",
    "end": "235720"
  },
  {
    "text": "executing make sure everything runs perfectly and then you've got your cloud control plane so this is your existing",
    "start": "235720",
    "end": "241450"
  },
  {
    "text": "control plane that you get with any cloud based infrastructure now not time",
    "start": "241450",
    "end": "248829"
  },
  {
    "start": "247000",
    "end": "265000"
  },
  {
    "text": "doing this research we observed common patterns for deploying into the cloud",
    "start": "248829",
    "end": "255280"
  },
  {
    "text": "when it comes to see ICD these are not the only ways of doing it but these are",
    "start": "255280",
    "end": "261039"
  },
  {
    "text": "three of the most common patterns you know we've observed the first one which",
    "start": "261039",
    "end": "267280"
  },
  {
    "start": "265000",
    "end": "328000"
  },
  {
    "text": "is your fully multi-tenant and probably your cheapest solution if you want to put it",
    "start": "267280",
    "end": "272680"
  },
  {
    "text": "that way is where you rely on isolation on a container level so you've got a single VM or multiple VMs that run your",
    "start": "272680",
    "end": "280120"
  },
  {
    "text": "both containers and each customer or each tenant receives a build container",
    "start": "280120",
    "end": "285639"
  },
  {
    "text": "running on that host so if you're able to break out of a container you can interact directly with the other",
    "start": "285639",
    "end": "291520"
  },
  {
    "text": "containers or other builds executing on that host and it goes to say that it's a",
    "start": "291520",
    "end": "296740"
  },
  {
    "text": "single network so both both services can speak to each other on a network level",
    "start": "296740",
    "end": "302940"
  },
  {
    "text": "the next one and abstracts a little bit more so instead of having multiple containers on a single VM you've got",
    "start": "302940",
    "end": "309850"
  },
  {
    "text": "multiple VMs each running one or more containers per for for each tenant so",
    "start": "309850",
    "end": "315970"
  },
  {
    "text": "each tenant is separated on a VM level but they still run in the same network so if you've got network",
    "start": "315970",
    "end": "321940"
  },
  {
    "text": "misconfigurations those tenants can speak to each other and interact with each other's builds and finally the most",
    "start": "321940",
    "end": "330669"
  },
  {
    "start": "328000",
    "end": "353000"
  },
  {
    "text": "expensive and the most isolated form of this is one tenant gets all the",
    "start": "330669",
    "end": "336130"
  },
  {
    "text": "resources to themselves so they get the own network their own VM all the containers run in the single VM and you",
    "start": "336130",
    "end": "342940"
  },
  {
    "text": "don't have the issue of multi-tenancy breakout and interaction between between",
    "start": "342940",
    "end": "348760"
  },
  {
    "text": "tenants now it goes without saying that",
    "start": "348760",
    "end": "356039"
  },
  {
    "text": "these architectural patterns here that we've outlined are just container we",
    "start": "356039",
    "end": "361600"
  },
  {
    "text": "said vm container but you can also have a container Orchestrator playing a role here so Cuba Nettie's etc and that",
    "start": "361600",
    "end": "369010"
  },
  {
    "text": "controls those actual containers but the point we're gonna have a home is that you're multi-tenancy can be separated on",
    "start": "369010",
    "end": "375520"
  },
  {
    "text": "a container or VM level and then you've got these network resources that can interact with each other okay so we've",
    "start": "375520",
    "end": "384520"
  },
  {
    "text": "got our architecture and when we want to actually interact with this ERC the environment and start reverse",
    "start": "384520",
    "end": "391900"
  },
  {
    "text": "engineering it or understanding how this environment comes together we need an entry point so most CI environments provide one or",
    "start": "391900",
    "end": "400210"
  },
  {
    "text": "more entry points for customers and the most common one is configuration file normally in the",
    "start": "400210",
    "end": "407080"
  },
  {
    "text": "format of a llamó file where you can specify information about the boat or the tests that need to execute so in",
    "start": "407080",
    "end": "413560"
  },
  {
    "text": "this case we've just made a really simple one it says the steps are compiled source and run builder SH so",
    "start": "413560",
    "end": "419770"
  },
  {
    "text": "remote code execution is a service you submit this the demo file it executes the code that you asked it to execute so",
    "start": "419770",
    "end": "426789"
  },
  {
    "text": "as a tester or an attacker here instead of running board SH you just run your",
    "start": "426789",
    "end": "431860"
  },
  {
    "text": "reverse shell you immediately get access to that environment and you can start exploring and looking how you can move",
    "start": "431860",
    "end": "438520"
  },
  {
    "text": "laterally or horizontally or vertically sorry the other entry point that we see",
    "start": "438520",
    "end": "445840"
  },
  {
    "text": "is where you limit the amount of code that can be executed and you only allow",
    "start": "445840",
    "end": "451840"
  },
  {
    "text": "your multi-tenant to supply a docker file and that docker file will be supplied to the BOE docker build command",
    "start": "451840",
    "end": "458110"
  },
  {
    "text": "and each all the commands will run inside your abode talk about context so",
    "start": "458110",
    "end": "465370"
  },
  {
    "text": "each one of these will run in an intermediate boat container which limits the attack surface but again easy as a",
    "start": "465370",
    "end": "472870"
  },
  {
    "text": "researcher or an attacker to actually gain access into this environment and insight to how everything is running you",
    "start": "472870",
    "end": "479409"
  },
  {
    "text": "can just execute a reverse shell as as code so as as we mentioned all these",
    "start": "479409",
    "end": "488800"
  },
  {
    "start": "485000",
    "end": "545000"
  },
  {
    "text": "environments they have a networking component to them and you as an attacker are expected to execute code so gaining",
    "start": "488800",
    "end": "498310"
  },
  {
    "text": "code execution isn't a vulnerability at this stage it is what you can do for",
    "start": "498310",
    "end": "503379"
  },
  {
    "text": "their code execution so everyone tries to lock down the CRC the environment",
    "start": "503379",
    "end": "508719"
  },
  {
    "text": "what you can actually talk to you on a network level as I mentioned before you've got your cloud control plane",
    "start": "508719",
    "end": "514630"
  },
  {
    "text": "which controls your cloud your infrastructure and your build control plane which controls the actual build",
    "start": "514630",
    "end": "521469"
  },
  {
    "text": "commands that are executing in containers or on the VM and typically your boat control plane is able to speak",
    "start": "521469",
    "end": "529060"
  },
  {
    "text": "to the commands executing inside your VM on your your container your dock attainment for example",
    "start": "529060",
    "end": "535390"
  },
  {
    "text": "and your dacha Damon or your docker boat container isn't able to speak to the",
    "start": "535390",
    "end": "541870"
  },
  {
    "text": "control plane directly but the host VM is now the reason for this is when",
    "start": "541870",
    "end": "549070"
  },
  {
    "start": "545000",
    "end": "589000"
  },
  {
    "text": "you're darker build execute it execute in these intermediate containers and these intermediate containers set up the",
    "start": "549070",
    "end": "555610"
  },
  {
    "text": "own virtual network this virtual network doesn't share the host host networking",
    "start": "555610",
    "end": "562270"
  },
  {
    "text": "stack as if you want to call it that meaning it doesn't have direct access to the same resources the host might have",
    "start": "562270",
    "end": "568840"
  },
  {
    "text": "access to you so for example one six nine two five four one six nine two five four in cloud as an attacker this is",
    "start": "568840",
    "end": "576460"
  },
  {
    "text": "something we want to be able to target and and access because we gain access to",
    "start": "576460",
    "end": "581680"
  },
  {
    "text": "metadata service we can start moving around inside that cloud environment how",
    "start": "581680",
    "end": "588010"
  },
  {
    "text": "can we get around that there is this add directive now normally the naive",
    "start": "588010",
    "end": "594420"
  },
  {
    "start": "589000",
    "end": "668000"
  },
  {
    "text": "approach here would be either get a reverse shell as I showed with that docker file before or you execute a curl",
    "start": "594420",
    "end": "601360"
  },
  {
    "text": "or W get command inside the docker file what will happen is this command will",
    "start": "601360",
    "end": "607840"
  },
  {
    "text": "run inside the intermediate container and as I mentioned that intermediate container has its own network with its",
    "start": "607840",
    "end": "614620"
  },
  {
    "text": "own networking rules preventing it from speaking to certain services however the",
    "start": "614620",
    "end": "622150"
  },
  {
    "text": "add directive doesn't execute inside this intermediate container it executes",
    "start": "622150",
    "end": "628150"
  },
  {
    "text": "where the darker binary or the dacha daemon is running meaning it is not confined to this intermediate network it",
    "start": "628150",
    "end": "635740"
  },
  {
    "text": "is running in the context of the host network and it can actually access resources on that host network what the",
    "start": "635740",
    "end": "643900"
  },
  {
    "text": "ad directive allows you to do is either include local files from the filesystem",
    "start": "643900",
    "end": "649860"
  },
  {
    "text": "to just keep in your your dock container this is limited to the build context so",
    "start": "649860",
    "end": "655570"
  },
  {
    "text": "it's not just any file you can include but you can also specify a remote file dr. Damon will download that inject it",
    "start": "655570",
    "end": "662530"
  },
  {
    "text": "into the container for you and you can access it in further boat steps",
    "start": "662530",
    "end": "668440"
  },
  {
    "start": "668000",
    "end": "1536000"
  },
  {
    "text": "so let's see what this allows you to do",
    "start": "668440",
    "end": "673530"
  },
  {
    "text": "okay so for our demo we're going to be looking at Google cloud vault and how",
    "start": "684620",
    "end": "689930"
  },
  {
    "text": "this executes and we're gonna be speaking about some of the concepts we've already covered the first one is",
    "start": "689930",
    "end": "696010"
  },
  {
    "text": "about the entry point so our entry point in the Google Cloud build is this cloud",
    "start": "696010",
    "end": "701870"
  },
  {
    "text": "go demo file you can simply specify some of the build arguments that you're going to supply to the docker bold command so",
    "start": "701870",
    "end": "708950"
  },
  {
    "text": "in front of the bold you can imagine that it says docker and this just gets injected into a darker docker in docker",
    "start": "708950",
    "end": "715880"
  },
  {
    "text": "container running on Google Cloud board this case we're going to be building a new docker container using docker file 1",
    "start": "715880",
    "end": "724510"
  },
  {
    "text": "so if we have a look at docker file one here we are going to with a naive",
    "start": "726010",
    "end": "731780"
  },
  {
    "text": "attacker and we trying to use the curl command to access the cloud metadata services in this case we just want to",
    "start": "731780",
    "end": "737480"
  },
  {
    "text": "extract two values we want to extract the secret key and the IP address and then upload these to remote server under",
    "start": "737480",
    "end": "745160"
  },
  {
    "text": "our control so quickly when I switch",
    "start": "745160",
    "end": "752930"
  },
  {
    "text": "over to a remote server this is just gonna be listening for a request coming in with the information kick off the",
    "start": "752930",
    "end": "760940"
  },
  {
    "text": "cloud bolt so what will happen here is you'll see our CD steps group your source code gets uploaded to",
    "start": "760940",
    "end": "766910"
  },
  {
    "text": "a repository go cloud board clones this into a virtual machine starts executing",
    "start": "766910",
    "end": "773030"
  },
  {
    "text": "the bold steps runs the docker bolt come on here you can see it's doing the bold it's installing curl for us just so we",
    "start": "773030",
    "end": "779510"
  },
  {
    "text": "can do that final step runs the core command and it's not too clear but the",
    "start": "779510",
    "end": "785210"
  },
  {
    "text": "curl actually times out it times out after 5 seconds that is because on a",
    "start": "785210",
    "end": "790310"
  },
  {
    "text": "network level has been blocked from executing now how cool we're gonna use",
    "start": "790310",
    "end": "796340"
  },
  {
    "text": "the add directive to get around this so let's look at our second cloud board file in this case again exactly the same",
    "start": "796340",
    "end": "803750"
  },
  {
    "text": "thing we don't change anything except we're using docker file to this one we've just replaced the curl command",
    "start": "803750",
    "end": "810230"
  },
  {
    "text": "with the add directive everything else is exactly the same again kick off our board it's gonna do",
    "start": "810230",
    "end": "818410"
  },
  {
    "text": "the same thing clone also upload our source code cloner to a new vm executed in a docker",
    "start": "818410",
    "end": "823810"
  },
  {
    "text": "container execute the bold steps for us",
    "start": "823810",
    "end": "828420"
  },
  {
    "text": "see here it quickly goes through us both steps installs the initial call it's going to run the ad directive you can",
    "start": "832110",
    "end": "838839"
  },
  {
    "text": "see add directives ran no errors and the co command actually executed figure across to our remote server we've had a",
    "start": "838839",
    "end": "845860"
  },
  {
    "text": "file upload we've had information uploaded to us cool how useful is that",
    "start": "845860",
    "end": "851620"
  },
  {
    "text": "we've got two values what can we actually do it those so going to take a",
    "start": "851620",
    "end": "856779"
  },
  {
    "text": "bit further and try show you a bit of a pivot so now we've just added a few",
    "start": "856779",
    "end": "862000"
  },
  {
    "text": "extra add directives we get a secret key we get an IP we get a TLS cert private",
    "start": "862000",
    "end": "868510"
  },
  {
    "text": "key and public key we combine these into we use these in another Co command to an",
    "start": "868510",
    "end": "875949"
  },
  {
    "text": "internal host so now we accessing a horse that's running inside the cloud bolt environment this host is used for",
    "start": "875949",
    "end": "882940"
  },
  {
    "text": "all for logging purposes and it actually records all the doc-doctor commands that are being run inside cloud board for us",
    "start": "882940",
    "end": "889630"
  },
  {
    "text": "we normally don't have access to this and then it'll upload the contents to",
    "start": "889630",
    "end": "896470"
  },
  {
    "text": "our remote server for us then execute this",
    "start": "896470",
    "end": "902699"
  },
  {
    "text": "kick off the exact same bolt process no changes",
    "start": "906700",
    "end": "912570"
  },
  {
    "text": "oh so bold happens gonna run there",
    "start": "921940",
    "end": "927100"
  },
  {
    "text": "multiple add directives get all those secret values upload upload into our remote server just point they're",
    "start": "927100",
    "end": "933160"
  },
  {
    "text": "uploaded and we swap across to our server you can see the full dock along",
    "start": "933160",
    "end": "938320"
  },
  {
    "text": "got uploaded to us we can actually search through this and look for an auth token and extract this from the log file",
    "start": "938320",
    "end": "944890"
  },
  {
    "text": "remember this is not normally available to the user if we actually decode that",
    "start": "944890",
    "end": "950920"
  },
  {
    "text": "token and see what value it has we'll see it's an OAuth exit oh if I was to",
    "start": "950920",
    "end": "959350"
  },
  {
    "text": "access token and this is used by the document to authenticate with the GCR or",
    "start": "959350",
    "end": "965800"
  },
  {
    "text": "Google container registry for that cloud world but the other thing about this token is it's not just limited to",
    "start": "965800",
    "end": "972360"
  },
  {
    "text": "contain the registry access it actually can be used for other Google services so",
    "start": "972360",
    "end": "978460"
  },
  {
    "text": "you supply this to this Google API it'll tell you that this token has these",
    "start": "978460",
    "end": "984820"
  },
  {
    "text": "multiple scopes and I can access things like Google cloud platform and source",
    "start": "984820",
    "end": "991060"
  },
  {
    "text": "tools the cloud cam is etc now this in itself is self hacking almost but if you",
    "start": "991060",
    "end": "997780"
  },
  {
    "text": "take this in a context of a multi-tenant instance where you're running CR CD for",
    "start": "997780",
    "end": "1004500"
  },
  {
    "text": "multiple users in cloud god and all they can supply is a docker file and the",
    "start": "1004500",
    "end": "1009900"
  },
  {
    "text": "expectation is that they can't access the cloud metadata they can't access further cloud services we've bypassed",
    "start": "1009900",
    "end": "1018390"
  },
  {
    "text": "that expectation we've got full access into this cloud environment and we can now start provisioning resources for",
    "start": "1018390",
    "end": "1024839"
  },
  {
    "text": "ourselves so this this actually affected getup actions before they change system",
    "start": "1024840",
    "end": "1031709"
  },
  {
    "text": "their system out of it and you can get a few free compute time using this because you bypass all their current or the",
    "start": "1031710",
    "end": "1038520"
  },
  {
    "text": "previous fraud controls that limited what you could do through three actions and this leads us into the next part of",
    "start": "1038520",
    "end": "1046800"
  },
  {
    "text": "our talk and we're gonna be looking at how tokens are scoped and how you can access environmental variables in the",
    "start": "1046800",
    "end": "1053400"
  },
  {
    "text": "cloud yes and I will talk about that part we",
    "start": "1053400",
    "end": "1059110"
  },
  {
    "text": "start with another dockerfile argument called AG and in order to understand that one we will have to look a bit more",
    "start": "1059110",
    "end": "1069900"
  },
  {
    "text": "here we go how containers are actually being built when you have a truck a demon that is",
    "start": "1069900",
    "end": "1076180"
  },
  {
    "text": "building the container what we already heard a little bit about is to build containers that are being used for that",
    "start": "1076180",
    "end": "1082840"
  },
  {
    "text": "and in fact you don't have like one built container when it comes to the building of an image you have multiple",
    "start": "1082840",
    "end": "1088510"
  },
  {
    "text": "built containers if we look at a sample dockerfile this is from dhaka votes",
    "start": "1088510",
    "end": "1094180"
  },
  {
    "text": "service it's part of the talk repository if you want to look it up each of those",
    "start": "1094180",
    "end": "1100060"
  },
  {
    "text": "individual docker file commands will be executed in a intermediate container as",
    "start": "1100060",
    "end": "1106690"
  },
  {
    "text": "far as anything gets executed so if you run the build command you see those",
    "start": "1106690",
    "end": "1111910"
  },
  {
    "text": "different short IDC and those are actually container ID so all of those",
    "start": "1111910",
    "end": "1117070"
  },
  {
    "text": "different lines are being executed in the context of their own build container and if you supply any like code into",
    "start": "1117070",
    "end": "1125230"
  },
  {
    "text": "this for example with the run directive the run directive gets executed during the build time you can actually execute",
    "start": "1125230",
    "end": "1131320"
  },
  {
    "text": "code in those containers and this is one very important other concept that you",
    "start": "1131320",
    "end": "1137530"
  },
  {
    "text": "usually have a different build time environment from the runtime environment we already saw that a little bit in the",
    "start": "1137530",
    "end": "1143560"
  },
  {
    "text": "in the first picture where you have to runtime environment where your images get hosted in the very end after you",
    "start": "1143560",
    "end": "1149410"
  },
  {
    "text": "built them and you have a build time environment however the build time environment also executes code and it",
    "start": "1149410",
    "end": "1155530"
  },
  {
    "text": "also executes code in containers so if you thought okay this is only like code in containers we will show you some",
    "start": "1155530",
    "end": "1162670"
  },
  {
    "text": "interfaces that there are armed towards the host that are maybe not that obvious so if we look at the parameter that we",
    "start": "1162670",
    "end": "1170890"
  },
  {
    "text": "actually want to look at which is like we need to talk a little bit about I can dense that can get confusing enough",
    "start": "1170890",
    "end": "1177610"
  },
  {
    "text": "unfortunately so we have a very very simple build file here is based on L plan and then we have a built variable",
    "start": "1177610",
    "end": "1184390"
  },
  {
    "text": "which is defined by our Ike and we the environment variable which is defined by a n F and then we have a",
    "start": "1184390",
    "end": "1190420"
  },
  {
    "text": "simple build command which only shows us the environment variables that are",
    "start": "1190420",
    "end": "1195430"
  },
  {
    "text": "defined and these are the environment variables that are defined at build time so if we kick this build off with this",
    "start": "1195430",
    "end": "1206950"
  },
  {
    "text": "docker build command we will see that the IKE is actually only available during build time and variables are",
    "start": "1206950",
    "end": "1214150"
  },
  {
    "text": "available at Build time and at run time so for example if we use this command up here we define the build variable",
    "start": "1214150",
    "end": "1221140"
  },
  {
    "text": "explicitly on the command line and we have down here",
    "start": "1221140",
    "end": "1227050"
  },
  {
    "text": "we see that we both have the environment variable which we've set to test value statically in the docker file and we",
    "start": "1227050",
    "end": "1233590"
  },
  {
    "text": "have to build variable which is a value which we passed dynamically up here so",
    "start": "1233590",
    "end": "1240330"
  },
  {
    "text": "if we look at a run time instantiation we see okay the build variable is not",
    "start": "1240330",
    "end": "1246310"
  },
  {
    "text": "available anymore however the environment variable is available so why might this be security",
    "start": "1246310",
    "end": "1253090"
  },
  {
    "text": "relevant okay this is sorry this is another example where we basically",
    "start": "1253090",
    "end": "1258330"
  },
  {
    "text": "supply a and an additional environment variable which was not defined in the",
    "start": "1258330",
    "end": "1263920"
  },
  {
    "text": "docker file and we see this is also available in the container so we have some relevant differences environment",
    "start": "1263920",
    "end": "1270580"
  },
  {
    "text": "variables available during build time and runtime environment variables are also available in the container whether",
    "start": "1270580",
    "end": "1277360"
  },
  {
    "text": "you defined them in the docker file or not and the IKE build time variables are",
    "start": "1277360",
    "end": "1282730"
  },
  {
    "text": "only available during build time and only if you define them in the docker file so most of what does it mean from a",
    "start": "1282730",
    "end": "1289660"
  },
  {
    "text": "security perspective potentially what can happen is that for example you pass build arguments to talk a bit processors",
    "start": "1289660",
    "end": "1297820"
  },
  {
    "text": "that you thought you might need at some point so for example if you pass in the docker build command a build time",
    "start": "1297820",
    "end": "1304810"
  },
  {
    "text": "variable that isn't used you get a notification about that so it might be that there are forgotten variables in",
    "start": "1304810",
    "end": "1311710"
  },
  {
    "text": "there and we will look at that how you can test for that",
    "start": "1311710",
    "end": "1316380"
  },
  {
    "text": "soon as this loads here we go so what we're doing first is start a lock tail",
    "start": "1320110",
    "end": "1326270"
  },
  {
    "text": "on a small service that is running on Heroku as Heroku itself is running on",
    "start": "1326270",
    "end": "1331400"
  },
  {
    "text": "Heroku v also we also try to run our",
    "start": "1331400",
    "end": "1336790"
  },
  {
    "text": "testing endpoints on Heroku and this is what's happening yet it's a very simple",
    "start": "1336790",
    "end": "1343060"
  },
  {
    "text": "HTTP service doing nothing else than basically dumping HTTP requests on to",
    "start": "1343060",
    "end": "1349610"
  },
  {
    "text": "the standardout which I can then look at here so then we have a small shell",
    "start": "1349610",
    "end": "1356030"
  },
  {
    "text": "script here which is basically just taking a lot of environment variables and generating a taça file there's no",
    "start": "1356030",
    "end": "1361340"
  },
  {
    "text": "need to look at that in detail Chris we'll talk about that later but we have a small repository for you where all the",
    "start": "1361340",
    "end": "1366770"
  },
  {
    "text": "code pieces and everything will be published and there will be a slide with the link later so ah this video is",
    "start": "1366770",
    "end": "1373850"
  },
  {
    "text": "killing me",
    "start": "1373850",
    "end": "1376360"
  },
  {
    "text": "doing this again then basically we have done docker file that's gets generated with this best grip after that we look",
    "start": "1386270",
    "end": "1392840"
  },
  {
    "text": "at a long list of environment variables which might be for examples on AWS access keys using this list we can",
    "start": "1392840",
    "end": "1401210"
  },
  {
    "text": "create a long taça file which is basically just including all those build time arguments including a small script",
    "start": "1401210",
    "end": "1407960"
  },
  {
    "text": "which is then sending those environment variables to the HTTP endpoint after",
    "start": "1407960",
    "end": "1414230"
  },
  {
    "text": "that we commit this to a git repository and this triggers an automated build in",
    "start": "1414230",
    "end": "1420140"
  },
  {
    "text": "this case on docker hub so kaha monitors your git repositories you github repositories and then automatically",
    "start": "1420140",
    "end": "1426770"
  },
  {
    "text": "starts a container build what we will then see is in the lock tail over here",
    "start": "1426770",
    "end": "1435730"
  },
  {
    "text": "basically the endpoint get started as soon as something arrives again and we",
    "start": "1435730",
    "end": "1442550"
  },
  {
    "text": "will see a forgotten built variable in there which is down here and which is",
    "start": "1442550",
    "end": "1447650"
  },
  {
    "text": "set to a secret value so this is just to illustrate how you can test for this potential problem so this also seems a",
    "start": "1447650",
    "end": "1454910"
  },
  {
    "text": "bit like artificial like how high likely is it that someone forgets to remove",
    "start": "1454910",
    "end": "1459920"
  },
  {
    "text": "build variables so those build systems are also defined to like couple all use cases so there's a good chance that",
    "start": "1459920",
    "end": "1466370"
  },
  {
    "text": "there are some variables in there that you probably don't even think of using but then again you also have often like",
    "start": "1466370",
    "end": "1473090"
  },
  {
    "text": "sensitive variables that you need at build time you can need registry access in order to like push your image",
    "start": "1473090",
    "end": "1479150"
  },
  {
    "text": "afterwards somewhere there might be internal host names for additional services that are being used for some",
    "start": "1479150",
    "end": "1484880"
  },
  {
    "text": "reason there might be user names in there so there's a classic information leakage vulnerability another",
    "start": "1484880",
    "end": "1492260"
  },
  {
    "text": "interesting thing is if you have a non exclusively docker file based build",
    "start": "1492260",
    "end": "1497330"
  },
  {
    "text": "system for example if there's docker compose or something similar if we take the docker compose example then you can",
    "start": "1497330",
    "end": "1505400"
  },
  {
    "text": "define any environment variable on the host or you can use any environment variable that is available on the build",
    "start": "1505400",
    "end": "1511130"
  },
  {
    "text": "host and you can just pass that into a build var into the docker file if that",
    "start": "1511130",
    "end": "1516290"
  },
  {
    "text": "is where you can execute code so here you are not restricted to any variables that are",
    "start": "1516290",
    "end": "1522500"
  },
  {
    "text": "being passed on the command line explicitly but you can use any environment variables that are available",
    "start": "1522500",
    "end": "1527740"
  },
  {
    "text": "so this increases the impact and this might also be the case for any like non-standard build systems that you see",
    "start": "1527740",
    "end": "1535309"
  },
  {
    "text": "out there so moving on to the next docker file directive which in this case",
    "start": "1535309",
    "end": "1541220"
  },
  {
    "text": "is from probably one of the more known ones and it also seems to be easy to understand",
    "start": "1541220",
    "end": "1546919"
  },
  {
    "text": "it's basically you define which image you are building on so in this case",
    "start": "1546919",
    "end": "1551929"
  },
  {
    "text": "we're building on a image that has okay a name that you can never guess and that is located in an inaccessible registry",
    "start": "1551929",
    "end": "1558200"
  },
  {
    "text": "at least for an unauthorized user so if we look at the build process for this we",
    "start": "1558200",
    "end": "1564049"
  },
  {
    "text": "have the build job of an authorized user the authorized user is building using",
    "start": "1564049",
    "end": "1569570"
  },
  {
    "text": "this inaccessible image and what is happening is as soon as there was an authorized build job that image gets put",
    "start": "1569570",
    "end": "1577100"
  },
  {
    "text": "into the local docker cache which we see here on the right so if an unauthorized",
    "start": "1577100",
    "end": "1582559"
  },
  {
    "text": "user is running on the same system you would think ok they can access this built cache",
    "start": "1582559",
    "end": "1587720"
  },
  {
    "text": "however the image name is something very long and complicated so you would have",
    "start": "1587720",
    "end": "1592940"
  },
  {
    "text": "no idea okay how do I use this image at all the interesting part now is that",
    "start": "1592940",
    "end": "1598330"
  },
  {
    "text": "docker is actually giving us additional feature that we can use for this so if",
    "start": "1598330",
    "end": "1606289"
  },
  {
    "text": "the build cache is not cleaned and our never guess my image is still in there we don't need to use the name for that",
    "start": "1606289",
    "end": "1612530"
  },
  {
    "text": "we can actually just use the first few characters of the image hash and then",
    "start": "1612530",
    "end": "1619640"
  },
  {
    "text": "docker will extrapolate that into the only thing it can identify in the",
    "start": "1619640",
    "end": "1625490"
  },
  {
    "text": "example under slided it would have been enough to just type five and that image would already have been included so",
    "start": "1625490",
    "end": "1631730"
  },
  {
    "text": "that's basically a very very easy way to like root for something like that down here we see this exact example basically",
    "start": "1631730",
    "end": "1639230"
  },
  {
    "text": "we do from 96 and then down here we have a from 96 and we see that this image is",
    "start": "1639230",
    "end": "1646340"
  },
  {
    "text": "being used so if you're running on a shared built host and you think there might be other images available you can",
    "start": "1646340",
    "end": "1652760"
  },
  {
    "text": "just iterate through by using different like from directives and with that I leave the remaining time",
    "start": "1652760",
    "end": "1660509"
  },
  {
    "text": "to Chris so thanks me Jess so yeah in this section we're gonna look at a few fun things that we can run",
    "start": "1660509",
    "end": "1666629"
  },
  {
    "text": "particularly with the run directive so first attack we look at is a denial of",
    "start": "1666629",
    "end": "1671820"
  },
  {
    "text": "service via a resource exhaustion attack basically Borka j-- yes I know it's 2019",
    "start": "1671820",
    "end": "1677220"
  },
  {
    "text": "blackhat and we're talking about resource exhaustion attacks but yes it is a thing so if we look at the stalker",
    "start": "1677220",
    "end": "1683700"
  },
  {
    "text": "file we see a couple interesting directives we see a lot of run directives as Matthias and Etienne",
    "start": "1683700",
    "end": "1689460"
  },
  {
    "text": "mentioned earlier these are run in intermediate bulk containers now another interesting property about intermediate",
    "start": "1689460",
    "end": "1695220"
  },
  {
    "text": "bulk containers is that they share the container runtime for that specific docker instance so when you are running",
    "start": "1695220",
    "end": "1702059"
  },
  {
    "text": "docker build those intermediate containers are run in the same runtime that your containers might be running in",
    "start": "1702059",
    "end": "1707580"
  },
  {
    "text": "now some of you may have noticed what this docker file is doing and yes it is",
    "start": "1707580",
    "end": "1714659"
  },
  {
    "text": "basically a fork bomb and what's really interesting is that if you run that last",
    "start": "1714659",
    "end": "1720539"
  },
  {
    "text": "run cat command in an intermediate container in docker bolt so if you run pocket bolt ellipse this will",
    "start": "1720539",
    "end": "1727409"
  },
  {
    "text": "potentially crash your intermediate container which then means that you will crash the container runtime so in a",
    "start": "1727409",
    "end": "1733889"
  },
  {
    "text": "multi-tenant build environment if you are sharing the container runtime with other containers while the build",
    "start": "1733889",
    "end": "1739830"
  },
  {
    "text": "environments you can potentially bring that down now another interesting story is that this can be triggered if you",
    "start": "1739830",
    "end": "1745320"
  },
  {
    "text": "just run docker bolt on this docker file but that might not be the case that you want to do you may want to maybe trigger",
    "start": "1745320",
    "end": "1751320"
  },
  {
    "text": "the fork bomb when the image is run so you can go ahead and do that quite easily by just changing run cat to CMD",
    "start": "1751320",
    "end": "1757979"
  },
  {
    "text": "cat so that means that the image will successfully build the the fork bomb won't be triggered however you will have",
    "start": "1757979",
    "end": "1764489"
  },
  {
    "text": "a weaponized docker image so what's the impact so if there are environments that",
    "start": "1764489",
    "end": "1772529"
  },
  {
    "start": "1768000",
    "end": "1834000"
  },
  {
    "text": "allow you to execute docker file directives this is something that you can have fun with of course supplying custom docker",
    "start": "1772529",
    "end": "1778470"
  },
  {
    "text": "files you can go ahead and do that but even if you can't access daka files or daca directors a lot of build systems",
    "start": "1778470",
    "end": "1784499"
  },
  {
    "text": "allow you to specify what docker images to use so what you can do is you can weaponize dark images or something like this",
    "start": "1784499",
    "end": "1791159"
  },
  {
    "text": "and tell the world environment hey use this image and then you can go ahead and trigger the fourth one so I'm talking",
    "start": "1791159",
    "end": "1797669"
  },
  {
    "text": "about four bombs a lot I know it's 2019 like really so what is it possible to do",
    "start": "1797669",
    "end": "1803159"
  },
  {
    "text": "in 2019 so you may notice the theme eeeh but in 2019 it's possible to crash the",
    "start": "1803159",
    "end": "1809370"
  },
  {
    "text": "container on time with with a few lines of bash in a single container it's also",
    "start": "1809370",
    "end": "1814380"
  },
  {
    "text": "possible to crash an entire kubernetes node and and cubelet with a few lines of bash in a few in a single container you",
    "start": "1814380",
    "end": "1821909"
  },
  {
    "text": "can also crash an entire kubernetes cluster with a few lines of bash in a single container and you guess that you",
    "start": "1821909",
    "end": "1827970"
  },
  {
    "text": "can crash old systems from a single container so that is what you can do how",
    "start": "1827970",
    "end": "1834390"
  },
  {
    "start": "1834000",
    "end": "1925000"
  },
  {
    "text": "do we remediate this well you can't rely on your container runtime defaults they",
    "start": "1834390",
    "end": "1839520"
  },
  {
    "text": "are often set to unlimited so this is particularly your cgroups so the values may be set to unlimited by",
    "start": "1839520",
    "end": "1845669"
  },
  {
    "text": "the placeholders are there so make sure that you are setting up a bands for memory process IOR DMA whatever",
    "start": "1845669",
    "end": "1851460"
  },
  {
    "text": "resources or whatever cgroups that you're providing in your container aren't in your container runtime make sure you are setting upper bounds now on",
    "start": "1851460",
    "end": "1858120"
  },
  {
    "text": "top of this and following a defense-in-depth approach we've seen a lot of use cases for dedicated VMs so if",
    "start": "1858120",
    "end": "1865230"
  },
  {
    "text": "the container runtime crashes it doesn't necessarily bring down other containers it's just a particular VM we've also",
    "start": "1865230",
    "end": "1871770"
  },
  {
    "text": "seen dedicated clusters provided to fix this kind of thing and of course basically dedicated docker instances and",
    "start": "1871770",
    "end": "1879090"
  },
  {
    "text": "the reason why we see those remediations being used is that it's often the case that you actually can't set limits",
    "start": "1879090",
    "end": "1885720"
  },
  {
    "text": "depending on what technologies you're using so to prevent that from happening you actually just given your own cluster",
    "start": "1885720",
    "end": "1890789"
  },
  {
    "text": "or your own VM so I guess that's one way what interesting another interesting",
    "start": "1890789",
    "end": "1897000"
  },
  {
    "text": "project that we've seen for this is implementing hard time limits for resources so regardless of what happens",
    "start": "1897000",
    "end": "1903270"
  },
  {
    "text": "to the build resources after 20 minutes or 10 minutes a hard cut in that system",
    "start": "1903270",
    "end": "1908640"
  },
  {
    "text": "is scrapped trees are called shut down no matter what because when you implement these boyish kind of attacks a",
    "start": "1908640",
    "end": "1914580"
  },
  {
    "text": "lot of the times these systems will become unresponsive you you can't interact with them so there has to be a",
    "start": "1914580",
    "end": "1920130"
  },
  {
    "text": "kill switch to actually go ahead and then recycle them and we've seen that in the few environments so the next attack that",
    "start": "1920130",
    "end": "1928350"
  },
  {
    "start": "1925000",
    "end": "1967000"
  },
  {
    "text": "we're going to look at is hijacking components but before we get into that let's just make some assumptions and",
    "start": "1928350",
    "end": "1934320"
  },
  {
    "text": "paint a picture of both of both environments in a particular way so you know that both environments provide",
    "start": "1934320",
    "end": "1939360"
  },
  {
    "text": "access to resource that's remote code execution as a service and we know that resources are required to be maintained",
    "start": "1939360",
    "end": "1946040"
  },
  {
    "text": "created destroyed so on and so forth so we can assume that when a build is",
    "start": "1946040",
    "end": "1951180"
  },
  {
    "text": "initiated resources are created when the build is finished resources are D provisioned now this is a very basic",
    "start": "1951180",
    "end": "1957110"
  },
  {
    "text": "assumption about the flow of both systems but with this assumption we can then go ahead and ask my favorite",
    "start": "1957110",
    "end": "1963570"
  },
  {
    "text": "question is well how can we exploit this assumption so the first example is where",
    "start": "1963570",
    "end": "1970530"
  },
  {
    "start": "1967000",
    "end": "2006000"
  },
  {
    "text": "a bolt Orchestrator may execute commands to manage containers of VMs so for",
    "start": "1970530",
    "end": "1976230"
  },
  {
    "text": "example the power of command is executed in a container when the build is done now what happens if we prevent the power",
    "start": "1976230",
    "end": "1983520"
  },
  {
    "text": "of command the legitimate power of command from being executed while in some instances you may get some free",
    "start": "1983520",
    "end": "1989460"
  },
  {
    "text": "compute time because according to the orchestrator the power of command executed successfully a return code of",
    "start": "1989460",
    "end": "1996840"
  },
  {
    "text": "zero was provided when the power of command was run certain must have been executed very simple example it's not",
    "start": "1996840",
    "end": "2003410"
  },
  {
    "text": "hello world example of hijacking components the next one is what happens",
    "start": "2003410",
    "end": "2008810"
  },
  {
    "start": "2006000",
    "end": "2061000"
  },
  {
    "text": "if a boat orchestrated may execute commands in containers to maybe extract or backup both artifacts so for example",
    "start": "2008810",
    "end": "2016160"
  },
  {
    "text": "Snorri here is that when the build is complete the system makes it back up and pushes the binary to an s3 bucket something like that so to do that curl",
    "start": "2016160",
    "end": "2023570"
  },
  {
    "text": "or W get was all the aid of La Silla is executed now because the board",
    "start": "2023570",
    "end": "2029030"
  },
  {
    "text": "environment doesn't want to provide the client container with the token to the s3 bucket that is provided with the",
    "start": "2029030",
    "end": "2035330"
  },
  {
    "text": "command that is executed in the container now what happens if we hijack the curl command in this case as the",
    "start": "2035330",
    "end": "2041240"
  },
  {
    "text": "flood says we get access to that token because we've hijacked that command and we are getting the token as well so that",
    "start": "2041240",
    "end": "2048350"
  },
  {
    "text": "now means that we can go ahead and loot the buckets and what we've seen as well is that there's a unfortunate pattern",
    "start": "2048350",
    "end": "2054310"
  },
  {
    "text": "production tokens are used in build environments as well so of course you know separate your tokens with different",
    "start": "2054310",
    "end": "2060159"
  },
  {
    "text": "environments so another point on this is we've seen that a lot of orchestrators",
    "start": "2060160",
    "end": "2067060"
  },
  {
    "start": "2061000",
    "end": "2096000"
  },
  {
    "text": "will fail closed when you start hijacking components may be shared objects and you just basically start",
    "start": "2067060",
    "end": "2074020"
  },
  {
    "text": "causing havoc a lot of bull systems don't know how to handle each cases they don't know what to do if a return code of 76 is returned or if the standard out",
    "start": "2074020",
    "end": "2083980"
  },
  {
    "text": "and standard error output is not to a particular format a lot of build systems fail clothes and become non-responsive",
    "start": "2083980",
    "end": "2089950"
  },
  {
    "text": "so yes you'll end up walking yourself but it's pretty interesting to see this",
    "start": "2089950",
    "end": "2095110"
  },
  {
    "text": "happen so how do you how do we remediate this now yes that's the way Serena",
    "start": "2095110",
    "end": "2100840"
  },
  {
    "start": "2096000",
    "end": "2165000"
  },
  {
    "text": "talked and someone's like yes this is tricky but it actually is a little tricky we need contain the component",
    "start": "2100840",
    "end": "2106720"
  },
  {
    "text": "verification so for example with Q control copy when you run that command Q",
    "start": "2106720",
    "end": "2112540"
  },
  {
    "text": "control executes the talk amount in the target point and in the target container so how do you know if you are running",
    "start": "2112540",
    "end": "2117820"
  },
  {
    "text": "the legit talk command you don't but this isn't impossible so there are two approaches that you can use for this you",
    "start": "2117820",
    "end": "2124480"
  },
  {
    "text": "can verify image components via static analysis and this is where we'd like to introduce to you you to some tooling",
    "start": "2124480",
    "end": "2130810"
  },
  {
    "text": "colt area that can help you with that then of course you can also analyze the components of running containers so for",
    "start": "2130810",
    "end": "2138190"
  },
  {
    "text": "example viola darker overlay to we're basically containers live you can verify container components by analyzing that",
    "start": "2138190",
    "end": "2145270"
  },
  {
    "text": "directory now I've mentioned read-only components this makes my life really",
    "start": "2145270",
    "end": "2150880"
  },
  {
    "text": "difficult as an attacker in clan environments it's not a silver bullet for this kind of attack but it makes",
    "start": "2150880",
    "end": "2156430"
  },
  {
    "text": "things really interesting so I really recommend that you have a look at read-only containers and here making",
    "start": "2156430",
    "end": "2161710"
  },
  {
    "text": "attackers last a little bit harder so",
    "start": "2161710",
    "end": "2167830"
  },
  {
    "start": "2165000",
    "end": "2200000"
  },
  {
    "text": "from that let's progress into supply chain attacks which is probably one of the largest attack vectors in cloud CI",
    "start": "2167830",
    "end": "2175720"
  },
  {
    "text": "environments it's a big problem so here's an example malicious docker images so when you run docker run my image or dockable my image",
    "start": "2175720",
    "end": "2183400"
  },
  {
    "text": "where are the checks like what's going on yeah is it legit is there backdoor what's going on yes",
    "start": "2183400",
    "end": "2189299"
  },
  {
    "text": "container signing is an option here but we're not going to be looking at that in this talk so if a component has been",
    "start": "2189299",
    "end": "2197040"
  },
  {
    "text": "hijacked how do we know that in an image or container so let's look at a",
    "start": "2197040",
    "end": "2202260"
  },
  {
    "start": "2200000",
    "end": "2230000"
  },
  {
    "text": "potential attack scenario so I'm an engineer I push code to CI code is built in an upstream container in this case",
    "start": "2202260",
    "end": "2209369"
  },
  {
    "text": "it's go cuz all the cool kids are using go these days and the client executed is global - oh my binary and then the",
    "start": "2209369",
    "end": "2216809"
  },
  {
    "text": "binaries push to some third-party service now in this case the upstream container may have been compromised and",
    "start": "2216809",
    "end": "2222599"
  },
  {
    "text": "the compromised resulted in the go bolt command actually injecting a backdoor into the binary so it's a hypothetical",
    "start": "2222599",
    "end": "2228390"
  },
  {
    "text": "situation how can we use build environments to try and solve this well",
    "start": "2228390",
    "end": "2233609"
  },
  {
    "start": "2230000",
    "end": "2285000"
  },
  {
    "text": "let's look at build environments they're very powerful that allow us to execute custom scripts custom binaries to do a",
    "start": "2233609",
    "end": "2239220"
  },
  {
    "text": "lot of stuff with return codes and very far builds on certain steps according to return codes and test success or not so",
    "start": "2239220",
    "end": "2246900"
  },
  {
    "text": "this is where we use Taran you can use terrier to be execute as part of your build pipeline to verify docker image",
    "start": "2246900",
    "end": "2253559"
  },
  {
    "text": "components before any build steps continue so for example if you are building some ruby code you want to",
    "start": "2253559",
    "end": "2259710"
  },
  {
    "text": "verify that the container that you're building your ruby code in is not",
    "start": "2259710",
    "end": "2265020"
  },
  {
    "text": "compromised so this can be an NPM package a go package an operating system binary a shared object and that you want",
    "start": "2265020",
    "end": "2271740"
  },
  {
    "text": "to very far so basically anything inside an image or container you are the one to verify that yes a version of go is being",
    "start": "2271740",
    "end": "2278460"
  },
  {
    "text": "used or if the image or container doesn't contain a well known bad",
    "start": "2278460",
    "end": "2284099"
  },
  {
    "text": "signature so how do we do this so docket images are just tar archives",
    "start": "2284099",
    "end": "2289260"
  },
  {
    "start": "2285000",
    "end": "2323000"
  },
  {
    "text": "and we can perform static analysis and identifying verified components quite easily so to do this you need a tin OCR",
    "start": "2289260",
    "end": "2296760"
  },
  {
    "text": "format so doctor saved my image will give you a nice table all now when using Tara you need to establish your baseline",
    "start": "2296760",
    "end": "2302819"
  },
  {
    "text": "of trust so that is basically sha-256 hashes of components that you know that you trust you then provide this to",
    "start": "2302819",
    "end": "2309000"
  },
  {
    "text": "terior via samyama once again Yama what all the cool kids are using either in rant area with the provided tar and",
    "start": "2309000",
    "end": "2316250"
  },
  {
    "text": "configuration file with hashes and files and you analyze the return code or the CLR",
    "start": "2316250",
    "end": "2322449"
  },
  {
    "text": "outputs so the demo of this is what we're going to look at is OCR image a",
    "start": "2322449",
    "end": "2327459"
  },
  {
    "start": "2323000",
    "end": "2370000"
  },
  {
    "text": "component identification and verification Leterrier so we are working with an image that we've exported so we",
    "start": "2327459",
    "end": "2334329"
  },
  {
    "text": "look at around 600 megabytes and what we're going to do I'm going to analyze",
    "start": "2334329",
    "end": "2340209"
  },
  {
    "text": "it and we can see it's at our archive and that's OCR compliant so this is the ml that we can provide to Terry we can",
    "start": "2340209",
    "end": "2345640"
  },
  {
    "text": "see we in image mode and we've provided Terry with a whole bunch of parts and hashes so you can provide multiple",
    "start": "2345640",
    "end": "2351909"
  },
  {
    "text": "hashes and these are trusted so it's going to look for cat and go and very far we're now gonna run Terry and I",
    "start": "2351909",
    "end": "2358539"
  },
  {
    "text": "remember this is about 600 megabytes so performance was a key issue here and we can see that Terry's gone and identified",
    "start": "2358539",
    "end": "2365619"
  },
  {
    "text": "in verified all the components that we provided for that particular image so",
    "start": "2365619",
    "end": "2372309"
  },
  {
    "start": "2370000",
    "end": "2445000"
  },
  {
    "text": "how do we not take this to containers so now we can successfully analyze darker images but once again containers are",
    "start": "2372309",
    "end": "2378459"
  },
  {
    "text": "just files on the and the host operating system so to do this with terior you first need to identify the location of",
    "start": "2378459",
    "end": "2385149"
  },
  {
    "text": "the merged folder for your runtime on your runtime host so this is typically inviolate to that long nasty string and",
    "start": "2385149",
    "end": "2392949"
  },
  {
    "text": "then fourth left merged so you know the location I've merged once you know that you provide Terry with the sha-256",
    "start": "2392949",
    "end": "2399009"
  },
  {
    "text": "hashes of the trusted components then once you do that you run Terry with the config the analyzer return codes and",
    "start": "2399009",
    "end": "2405609"
  },
  {
    "text": "there you go so the next demo what you're going to look at is actually doing this on site inside a host with",
    "start": "2405609",
    "end": "2412749"
  },
  {
    "text": "containers running so we have a merged folder which is around 600 megabytes",
    "start": "2412749",
    "end": "2419699"
  },
  {
    "text": "that that represents a running container we're now going to tell Terry oh look at",
    "start": "2419699",
    "end": "2426279"
  },
  {
    "text": "this path and verify these components inside this running container and these are the hashes that we trust so if the",
    "start": "2426279",
    "end": "2432549"
  },
  {
    "text": "calculated hashes equal one of those then we are good to go so we're on",
    "start": "2432549",
    "end": "2438759"
  },
  {
    "text": "Terrier and Terry will and tell you what it's fine and if it's identified and verified and there you go so the last",
    "start": "2438759",
    "end": "2447159"
  },
  {
    "start": "2445000",
    "end": "2502000"
  },
  {
    "text": "attack that we're going to look at is something that are called evil Forks as is quite well documented",
    "start": "2447159",
    "end": "2452859"
  },
  {
    "text": "what we noticed and what's really weird is that CI environment Street forked Reapers really weirdly and without going to too",
    "start": "2452859",
    "end": "2460119"
  },
  {
    "text": "much detail about that there's some great resources online but a basic example is you have engineers they work on a get repo the git repo is hooked",
    "start": "2460119",
    "end": "2467559"
  },
  {
    "text": "into class CI which then triggers a bull job on every commit or PR or whatever now we have an attacker that is fork the",
    "start": "2467559",
    "end": "2474489"
  },
  {
    "text": "repo be a public or private so this is where things can get a bit weird but what happens is that when the attacker",
    "start": "2474489",
    "end": "2479890"
  },
  {
    "text": "makes a commit or push to the forked repo that code gets executed inside the",
    "start": "2479890",
    "end": "2486700"
  },
  {
    "text": "legitimate repos CI environments which can result in basically tokens being leaked and a whole bunch of other weird",
    "start": "2486700",
    "end": "2493359"
  },
  {
    "text": "stuff TL DR look at your CI provider and how they treat for creepers if you don't",
    "start": "2493359",
    "end": "2499779"
  },
  {
    "text": "need for creepers disable it you can prevent this from happening so we've spoken about a lot of stuff",
    "start": "2499779",
    "end": "2505420"
  },
  {
    "start": "2502000",
    "end": "2513000"
  },
  {
    "text": "there's a cheat sheets that'll be made available with configs payloads you can go find it there we will tweet about it",
    "start": "2505420",
    "end": "2511809"
  },
  {
    "text": "so don't worry we will come back to this so yeah conclusion we've seen these",
    "start": "2511809",
    "end": "2516880"
  },
  {
    "start": "2513000",
    "end": "2520000"
  },
  {
    "text": "attacks out there various providers it's been a lot of fun a big thing we've seen is that supply chain security is hard",
    "start": "2516880",
    "end": "2522789"
  },
  {
    "start": "2520000",
    "end": "2563000"
  },
  {
    "text": "and I yeah Clan roms just make it that much harder because it's just so much easy to just say docker pool or just",
    "start": "2522789",
    "end": "2528910"
  },
  {
    "text": "download this Reaper get this NPM package go get this it's really difficult yes I've mentioned a few times",
    "start": "2528910",
    "end": "2535089"
  },
  {
    "text": "it's 2019 don't forget your basics I feel bad saying that like coming to an info SEC Talk and someone a dude with a beard on",
    "start": "2535089",
    "end": "2541749"
  },
  {
    "text": "stage is telling you don't forget the basics I apologize but it's just the case that we're in because for bombing",
    "start": "2541749",
    "end": "2547029"
  },
  {
    "text": "is the thing and of course network isolations just because it's in the cloud doesn't mean it's automatically",
    "start": "2547029",
    "end": "2552660"
  },
  {
    "text": "fenced off no you still need to run IP tables in the cloud and yeah break your board environment for edge cases you'd",
    "start": "2552660",
    "end": "2559299"
  },
  {
    "text": "be surprised as what you can find sometimes my colleagues for the rest of the conclusion okay I guess this is my",
    "start": "2559299",
    "end": "2565180"
  },
  {
    "start": "2563000",
    "end": "2630000"
  },
  {
    "text": "part again one thing that we barely mentioned but it's probably important to",
    "start": "2565180",
    "end": "2570609"
  },
  {
    "text": "mention as a wrap-up Chris said we saw all the stuff out there you saw that we",
    "start": "2570609",
    "end": "2576160"
  },
  {
    "text": "didn't mention any names you saw some like Google cloud build you saw talk--i hop those were not real vulnerabilities",
    "start": "2576160",
    "end": "2581470"
  },
  {
    "text": "but functionalities that we demoed so just to also clarify that part other than that the edge cases that we",
    "start": "2581470",
    "end": "2589060"
  },
  {
    "text": "looked at there's a lot of like container security basics and network isolation basics and you have to get",
    "start": "2589060",
    "end": "2594130"
  },
  {
    "text": "right first and then I think we saw a lot of interesting behavior with the app",
    "start": "2594130",
    "end": "2599380"
  },
  {
    "text": "directive that we can use to have SS RF we sorta environmentally catch that you can have we saw the image interpolation",
    "start": "2599380",
    "end": "2604990"
  },
  {
    "text": "so this is all stuff that you need to have in mind when you build your multi-tenant built environment and",
    "start": "2604990",
    "end": "2610890"
  },
  {
    "text": "probably one of my my favorite parts is remember that the build time of containers is different than the runtime",
    "start": "2610890",
    "end": "2618100"
  },
  {
    "text": "that you have and that code gets executed attacker controlled code gets executed in both cases awesome going",
    "start": "2618100",
    "end": "2626380"
  },
  {
    "text": "into the next part which I leave to a TN make sure to tu caches and finally multi",
    "start": "2626380",
    "end": "2632950"
  },
  {
    "start": "2630000",
    "end": "2685000"
  },
  {
    "text": "tendency is hard make everything ephemeral if u persisting data between builds in a multi-tenant environment you",
    "start": "2632950",
    "end": "2639640"
  },
  {
    "text": "are going to run into trouble so either decide on hard multi-tenancy or ensure you clear caches flush all the",
    "start": "2639640",
    "end": "2646780"
  },
  {
    "text": "your disks there's nothing shared between tenants and as as an attacker or",
    "start": "2646780",
    "end": "2653260"
  },
  {
    "text": "as a pen tester and also as DevOps get familiar with containers unfortunate",
    "start": "2653260",
    "end": "2658480"
  },
  {
    "text": "containers are here to stay everyone looks as the lots of them as a really scary concept we try to show you that",
    "start": "2658480",
    "end": "2665530"
  },
  {
    "text": "with very simple components that are come bundled in containers you don't even need a vulnerability or a need and",
    "start": "2665530",
    "end": "2672490"
  },
  {
    "text": "exploit it's simply most configurations and if you understand the underlying technology the underlying concepts you",
    "start": "2672490",
    "end": "2679390"
  },
  {
    "text": "can go a long way to either securing your environment or compromising an environment",
    "start": "2679390",
    "end": "2685320"
  },
  {
    "start": "2685000",
    "end": "2711000"
  },
  {
    "text": "finally this work a lot of it's our own work but we also relied on the resources",
    "start": "2685320",
    "end": "2693340"
  },
  {
    "text": "from other people there's heavy research going into this and we just like to call out everyone that shares their research",
    "start": "2693340",
    "end": "2699760"
  },
  {
    "text": "publicly thank you very much if you've got research share it don't be scared or",
    "start": "2699760",
    "end": "2706560"
  },
  {
    "text": "researchers new to someone else and thank you so we're going to be",
    "start": "2706560",
    "end": "2714910"
  },
  {
    "start": "2711000",
    "end": "2846000"
  },
  {
    "text": "[Applause]",
    "start": "2714910",
    "end": "2722080"
  },
  {
    "text": "thank you very much we're going to be open sourcing all our scripts everything",
    "start": "2722080",
    "end": "2728930"
  },
  {
    "text": "we use for all the demos the slides everything will be there Chris has got",
    "start": "2728930",
    "end": "2734600"
  },
  {
    "text": "another wonderful tool called breakout the box which automates a lot of common container escapes for you you can find",
    "start": "2734600",
    "end": "2740540"
  },
  {
    "text": "that on his get repository and then one of the soon soon we're going to be",
    "start": "2740540",
    "end": "2747470"
  },
  {
    "text": "releasing Terrier that's just going through the process together out into the public but we'll be releasing that",
    "start": "2747470",
    "end": "2753380"
  },
  {
    "text": "and you can start please contribute to it and use it in your CI CD environments once again thank you very much for",
    "start": "2753380",
    "end": "2760040"
  },
  {
    "text": "coming you think we've got a few minutes for questions",
    "start": "2760040",
    "end": "2764860"
  },
  {
    "text": "excuse me",
    "start": "2770210",
    "end": "2773260"
  },
  {
    "text": "there was one thing you mentioned about basically unexpected vulnerabilities",
    "start": "2778779",
    "end": "2784609"
  },
  {
    "text": "with Forks and I thought it might be interesting to mention this thing I heard about that on github if you",
    "start": "2784609",
    "end": "2793369"
  },
  {
    "text": "something actually as an optimization it's not actually a fork but the commit",
    "start": "2793369",
    "end": "2798769"
  },
  {
    "text": "is actually added to the original repository and maybe that's related to what you were talking about earlier I'm",
    "start": "2798769",
    "end": "2803839"
  },
  {
    "text": "not sure I just wanted to mention that yes thanks thank you very good point",
    "start": "2803839",
    "end": "2811150"
  },
  {
    "text": "any other questions there's one at the back is it possible to put a malicious",
    "start": "2813250",
    "end": "2822710"
  },
  {
    "text": "version of terrier into the stack I was hoping someone was gonna ask",
    "start": "2822710",
    "end": "2827740"
  },
  {
    "text": "terrier ception yes but verified how do you verify the verifier good question",
    "start": "2827740",
    "end": "2837250"
  },
  {
    "text": "guess we good then cool thank you everyone thank you very much thank you thank you [Applause]",
    "start": "2838420",
    "end": "2843740"
  },
  {
    "text": "[Music]",
    "start": "2843740",
    "end": "2846920"
  }
]