[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "good morning everyone I'm Zeno kova and this was work done with my colleagues here John Corey and",
    "start": "80",
    "end": "6359"
  },
  {
    "text": "Sam so a little bit about us uh we're from the miter Corporation we're trusted",
    "start": "6359",
    "end": "11719"
  },
  {
    "text": "Computing researchers we basically our focus is figuring out how we can make security software that isn't crap and",
    "start": "11719",
    "end": "17760"
  },
  {
    "text": "doesn't just you know have attacker lie to you and give you a false sense of security unfortunately basically",
    "start": "17760",
    "end": "23279"
  },
  {
    "text": "everything out there right now is crap so um miter itself if you probably",
    "start": "23279",
    "end": "28679"
  },
  {
    "text": "haven't heard of us because we're not for profit we don't make commercial products and things like that we",
    "start": "28679",
    "end": "34040"
  },
  {
    "text": "research and development center works for the US government so basically it's supposed to be a neutral entity that's",
    "start": "34040",
    "end": "39559"
  },
  {
    "text": "you know giving advice to the government as opposed to being a for-profit contractor which is always giving advice in their own best interest so if you've",
    "start": "39559",
    "end": "46800"
  },
  {
    "text": "heard of miter it it would only be for things probably like cve sticks taxi some standards like that but even then",
    "start": "46800",
    "end": "53840"
  },
  {
    "text": "you probably don't think miter cve it's just cve and miter has been around for quite a while since back in the carpet",
    "start": "53840",
    "end": "61280"
  },
  {
    "text": "days so we've been doing a lot of talks over the last year where we've been um",
    "start": "61280",
    "end": "66920"
  },
  {
    "text": "sort of tearing bios apart we've been showing that as you would expect when people don't understand and don't look",
    "start": "66920",
    "end": "72000"
  },
  {
    "text": "at this technology uh it's riddled with holes so throughout the last year um as",
    "start": "72000",
    "end": "78000"
  },
  {
    "text": "we've been you know describing exploitable memory conditions uh in the Bios as we've been describing the fact",
    "start": "78000",
    "end": "84320"
  },
  {
    "text": "that most bioses are just uh straight up misconfigured so the BIOS vendor does not even set the access control little",
    "start": "84320",
    "end": "90079"
  },
  {
    "text": "bit so anyone can come along and write to it uh we've been basically saying that modern ufi bioses are sort of a",
    "start": "90079",
    "end": "97159"
  },
  {
    "text": "double-edged sword because they help us as Defenders they help us understand the system much more than was the case with",
    "start": "97159",
    "end": "103759"
  },
  {
    "text": "Legacy bioses but also at the same time this helps a attacker understand it and",
    "start": "103759",
    "end": "109320"
  },
  {
    "text": "an attacker can reverse engineer it get to the exact place that they need to compromise um much",
    "start": "109320",
    "end": "114759"
  },
  {
    "text": "easier so this talk is basically going to be a justification of that we're going to go through ufi bit we're going",
    "start": "114759",
    "end": "120880"
  },
  {
    "text": "to say okay right here that's good for us as Defenders right there that's bad for us as Defenders and so that's that's what this",
    "start": "120880",
    "end": "128160"
  },
  {
    "text": "talk is about um also we've put out tools like cernus which was sort of the",
    "start": "128160",
    "end": "133640"
  },
  {
    "text": "first tool that you could use to actually go out and evaluate your bios find out whether you're vulnerable dump the BIOS try to Integrity check it that",
    "start": "133640",
    "end": "140440"
  },
  {
    "text": "kind of thing and so this will give you a little bit more context for if you use cernus and we have cernus has a has a",
    "start": "140440",
    "end": "147360"
  },
  {
    "text": "script along with it where you can Integrity check you can say here's a clean copy of the BIOS that I maybe extracted from a bios update here's my",
    "start": "147360",
    "end": "154599"
  },
  {
    "text": "BIOS do they differ if so yes well then uh what how do I understand that and so",
    "start": "154599",
    "end": "161840"
  },
  {
    "text": "that's the other thing that is the point of this talk so we've put a tool out there and it's all good and well for us",
    "start": "161840",
    "end": "167040"
  },
  {
    "text": "to put a tool out there that says hey look you can now Integrity check your bios but the reality is that if you find",
    "start": "167040",
    "end": "172360"
  },
  {
    "text": "an Integrity violation or a suspected Integrity violation uh you're probably not going to know how to evaluate that",
    "start": "172360",
    "end": "178040"
  },
  {
    "text": "and find out whether it's a false positive so uh this is trying to give you a little bit more context about that",
    "start": "178040",
    "end": "184799"
  },
  {
    "text": "reality uh it takes much more than a single hour's worth of discussion to",
    "start": "184799",
    "end": "189879"
  },
  {
    "text": "understand it but you know we're always willing to to check to find out whether we have false positives inherent on our tool so if you find something that's",
    "start": "189879",
    "end": "196159"
  },
  {
    "text": "wrong and you don't understand it you can let us know alternatively we have you know a full two days worth of training on this where basically we",
    "start": "196159",
    "end": "203120"
  },
  {
    "text": "explain okay here's how you analyze the BIOS to understand you know here's where the change was made and uh",
    "start": "203120",
    "end": "209879"
  },
  {
    "text": "and understand it better so this is basically a whirlwind tour of that so bios meaning Legacy BIOS is dead long",
    "start": "209879",
    "end": "217920"
  },
  {
    "start": "214000",
    "end": "214000"
  },
  {
    "text": "live uifi right so it should be theoretically dead because um it's at",
    "start": "217920",
    "end": "223200"
  },
  {
    "text": "least dead or dying because it should be aging out everywhere because Microsoft required anything that's going to ship",
    "start": "223200",
    "end": "229360"
  },
  {
    "text": "that has the Windows 8 sticker on it which is most all of your PCS there's very few things that are shipping to be",
    "start": "229360",
    "end": "234920"
  },
  {
    "text": "Linux specific well except for Max I suppose uh everything that shipped with Windows 8 requires UEFI secure boot",
    "start": "234920",
    "end": "243519"
  },
  {
    "text": "right and you're probably maybe if you're hit this talk you're maybe familiar with some of the controversy around you know whether secure boot is a",
    "start": "243519",
    "end": "249680"
  },
  {
    "text": "evil conspiracy to destroy Linux and lock you out of your machine I don't think it is but you know you can have",
    "start": "249680",
    "end": "256320"
  },
  {
    "text": "that opinion if you want so theoretically Legacy BIOS should be going away because basically everything",
    "start": "256320",
    "end": "262720"
  },
  {
    "text": "all the vendors are incentivized that they have to have UEFI they have to have secure boot in order to actually ship",
    "start": "262720",
    "end": "267840"
  },
  {
    "text": "their systems for Windows 8 these days is but in reality um there's elements of",
    "start": "267840",
    "end": "273840"
  },
  {
    "text": "this which will never die so at the very beginning of ufi I'll show the whole",
    "start": "273840",
    "end": "279520"
  },
  {
    "text": "obligatory diagram here in a little bit but at the very beginning of UEFI it looks exactly the same as bios it's hand",
    "start": "279520",
    "end": "285479"
  },
  {
    "text": "coat assembly that's specific to the hardware and it's required to you know initialize the hardware as fast as",
    "start": "285479",
    "end": "291759"
  },
  {
    "text": "possible later on once you get past that stage then you can build up your nice abstraction layers and you can have all",
    "start": "291759",
    "end": "297280"
  },
  {
    "text": "the niceties of UEFI but but if you have a change that occurs sort of there'll be",
    "start": "297280",
    "end": "303120"
  },
  {
    "text": "one file that typically that'll be called the SEC core the security core that's the hand-coded assembly thing so",
    "start": "303120",
    "end": "309759"
  },
  {
    "text": "what I'm saying here is if you go out and use cernus and you do a bio stiff and you find oh the changes in the SEC",
    "start": "309759",
    "end": "315600"
  },
  {
    "text": "core how do I understand that well unfortunately that's a big blob of hand coded assembly usually using a lot of",
    "start": "315600",
    "end": "321080"
  },
  {
    "text": "PCI access accessing you know peripherals that you don't necessarily understand and so unfortunately that",
    "start": "321080",
    "end": "327240"
  },
  {
    "text": "sort of uh lives on and that's the harder that's sort of the hardest chunk to analyze but basically we're going to",
    "start": "327240",
    "end": "333800"
  },
  {
    "text": "talk about all the all the new interesting juicy bits here so ufi and Legacy BIOS basically",
    "start": "333800",
    "end": "340759"
  },
  {
    "text": "share two common traits so the entry Vector meaning the very first CPU instruction that the CPU ever consumes",
    "start": "340759",
    "end": "348160"
  },
  {
    "text": "that's going to be at the same place on the flash chip so it the way the hardware initializes at reset it always",
    "start": "348160",
    "end": "354440"
  },
  {
    "text": "maps to address ff0 so 4 GB minus 16 that's always the",
    "start": "354440",
    "end": "360600"
  },
  {
    "text": "memory address where the CPU is trying to access and the memory Hardware at reset is redirecting that memory access",
    "start": "360600",
    "end": "368240"
  },
  {
    "text": "to the SPI flash chip so little flash chip down on the SPI bus so they all",
    "start": "368240",
    "end": "374000"
  },
  {
    "text": "start from the same place and the initial goal and the overall goal is really it's all about you know",
    "start": "374000",
    "end": "379039"
  },
  {
    "text": "initializing the hardware it's really it's Plumbing it's getting you to a state where you can pass off to a",
    "start": "379039",
    "end": "385120"
  },
  {
    "text": "bootloader pass off to an operating system hypervisor try to get everything initialized so you can have you know",
    "start": "385120",
    "end": "391039"
  },
  {
    "text": "keyboard input video output the the big difference though the big difference is that Legacy BIOS it",
    "start": "391039",
    "end": "397599"
  },
  {
    "text": "was this big giant proprietary blob of stuff that did that plus a whole bunch of other things uifi is much nicer",
    "start": "397599",
    "end": "404440"
  },
  {
    "text": "because it's now documented if we have a spec we can understand what the code's trying to do in trying to understand it",
    "start": "404440",
    "end": "411000"
  },
  {
    "text": "behaving in accordance with that spec so also the ufi has a reference",
    "start": "411000",
    "end": "417319"
  },
  {
    "text": "implementation which is open source and out of available um and so basically there's a single reference",
    "start": "417319",
    "end": "423520"
  },
  {
    "text": "implementation Which Intel puts out there and says hey guys this is how you're basically supposed to build something that conforms to the UEFI spec",
    "start": "423520",
    "end": "430440"
  },
  {
    "text": "and then the Amis Phoenix and you know insides of the world they go customize that add their value add so that they",
    "start": "430440",
    "end": "436560"
  },
  {
    "text": "can try to get other people to buy it because if they didn't add anything to it then people would just start from the reference implementation right so they",
    "start": "436560",
    "end": "443479"
  },
  {
    "text": "add all the you know gooey niceties and that kind of stuff and they sell it to the Dells HPS Lenovo the the world then",
    "start": "443479",
    "end": "450120"
  },
  {
    "text": "the Dell's HPS and Lenovo of the world may go customize it further but there's some core initial open- Source thing",
    "start": "450120",
    "end": "456960"
  },
  {
    "text": "that you can evaluate we at at black hat USA this year we showed where Corey went",
    "start": "456960",
    "end": "462039"
  },
  {
    "text": "and spent a couple of weeks looking at the open source ref reference implementation and within a couple of weeks he was able to find you know two",
    "start": "462039",
    "end": "468240"
  },
  {
    "text": "exploitable memory conditions which then as I was saying these propagate out to all those other uh bioses so the point",
    "start": "468240",
    "end": "475599"
  },
  {
    "text": "is we can evaluate the security much uh much more readily than we could with Legacy",
    "start": "475599",
    "end": "480960"
  },
  {
    "start": "479000",
    "end": "479000"
  },
  {
    "text": "biosis so I've been using the term but I'll expand it now ufi stands for uh",
    "start": "480960",
    "end": "486039"
  },
  {
    "text": "unified extensible firmware interface it was something that originally Intel made when they were trying to get rid of",
    "start": "486039",
    "end": "492080"
  },
  {
    "text": "Legacy support and we all to blame for x86 still having you know Legacy 30",
    "start": "492080",
    "end": "498319"
  },
  {
    "text": "years worth of cruff in it Intel tried to make itanium a non-b backwards compatible 64-bit architecture and",
    "start": "498319",
    "end": "504319"
  },
  {
    "text": "everyone said nah don't want it want all my existing applications to run so now",
    "start": "504319",
    "end": "509560"
  },
  {
    "text": "we have you know 64-bit Legacy CR Intel made this ufi reference uh made",
    "start": "509560",
    "end": "515320"
  },
  {
    "text": "this ufi spec when they were trying to make the itanium BIOS and they recognized look we can't do all of the",
    "start": "515320",
    "end": "521000"
  },
  {
    "text": "Legacy stuff we don't want to do all the Legacy stuff that we've had to do for 30 years on the x86 architecture let's",
    "start": "521000",
    "end": "526480"
  },
  {
    "text": "build up something that's a little nicer a little more uh generic and they were trying to have something that would work",
    "start": "526480",
    "end": "531880"
  },
  {
    "text": "for x86 as well as itanium and really it can work for you know sort of any architecture but but uh",
    "start": "531880",
    "end": "539440"
  },
  {
    "text": "that was originally EFI it became ufi when they finally got buyin from everybody and they it was no longer just",
    "start": "539440",
    "end": "546000"
  },
  {
    "text": "Intel doing it but they had the ufi Forum which was a bunch of other companies that bought in and started",
    "start": "546000",
    "end": "551519"
  },
  {
    "text": "doing things with it so now although there is a um",
    "start": "551519",
    "end": "557079"
  },
  {
    "text": "although there is this nice pure uifi World a lot of the machines that probably you have unless you've bought",
    "start": "557079",
    "end": "562279"
  },
  {
    "text": "in the last couple years they they often have this thing built in and there's this you know backwards compatibility",
    "start": "562279",
    "end": "567839"
  },
  {
    "text": "mechanism called the compatibility Port module and what this is is that basically the overall system is UEFI but",
    "start": "567839",
    "end": "574760"
  },
  {
    "text": "then there's this Big Blob of Legacy BIOS in there so that you can basically just run everything without having to",
    "start": "574760",
    "end": "580160"
  },
  {
    "text": "change everything so uh CSM is U is a",
    "start": "580160",
    "end": "585360"
  },
  {
    "text": "sort of backwards compatibility it's it's mostly going away at this point like if you buy anything new it hopefully shouldn't be using CSM it",
    "start": "585360",
    "end": "591839"
  },
  {
    "text": "should be sort of pure ufi but uh but that's always still a cause for concern for security problems but the one really",
    "start": "591839",
    "end": "599839"
  },
  {
    "text": "interesting property of ufi for attackers is that it's getting really really big so and actually I don't think",
    "start": "599839",
    "end": "607560"
  },
  {
    "text": "I mention it anywhere else so I'll mention it here it's also written in uh in highle languages it's written in C I",
    "start": "607560",
    "end": "613800"
  },
  {
    "text": "don't think they support C++ but you've got code building up this reference",
    "start": "613800",
    "end": "619079"
  },
  {
    "text": "implementation that is sort of getting giant it's 8 12 16 megabytes on a given",
    "start": "619079",
    "end": "624640"
  },
  {
    "text": "flash chip um and so you know big highle language code lots of opportunities for",
    "start": "624640",
    "end": "632800"
  },
  {
    "text": "uh typical buffer overflows and so",
    "start": "632800",
    "end": "636720"
  },
  {
    "text": "forth now if you're not the kind of person who enjoys reading thousands and thousands of pages of specs we are we",
    "start": "639519",
    "end": "645760"
  },
  {
    "text": "you know we like doing that that's how we find stuff that nobody else finds so if you don't like to do that this is a",
    "start": "645760",
    "end": "651639"
  },
  {
    "text": "good starting point uh Vincent Zimmer from Intel has you know he's integral to the ufi effort and he's made a book that",
    "start": "651639",
    "end": "659320"
  },
  {
    "text": "is basically a highle overview but if you want to jump right in you can go download all the",
    "start": "659320",
    "end": "665279"
  },
  {
    "text": "specifications so this is what we're going to sort of be working our way through today um this is everybody who does bios",
    "start": "665279",
    "end": "673519"
  },
  {
    "start": "671000",
    "end": "671000"
  },
  {
    "text": "talks these days has to put up this picture this is Intel's sort of U description of how notionally ufi works",
    "start": "673519",
    "end": "680440"
  },
  {
    "text": "you start at the very beginning security phase and theoretically that's where security is but in reality that's not",
    "start": "680440",
    "end": "686399"
  },
  {
    "text": "then you have prfi initialization so we've got uh well I won't go through them all we'll we'll hit them each in",
    "start": "686399",
    "end": "692639"
  },
  {
    "text": "turn so there's seven phases notionally but in reality they're not all",
    "start": "692639",
    "end": "698160"
  },
  {
    "text": "used but we're going to start a little bit lower than that and so we're going to start sort of what things look like",
    "start": "698160",
    "end": "703880"
  },
  {
    "text": "on the hardware these days okay so Legacy BIOS you had the SPI",
    "start": "703880",
    "end": "711839"
  },
  {
    "start": "710000",
    "end": "710000"
  },
  {
    "text": "flash chip or the Intel firmware Hub on things typically older than 2007 and",
    "start": "711839",
    "end": "717680"
  },
  {
    "text": "this is basically if you if you think about your computer architecture you're maybe familiar with or you've maybe heard the term you know North Bridge",
    "start": "717680",
    "end": "723639"
  },
  {
    "text": "Southbridge so you have a CPU you had a North Bridge which handled high-speed peripherals then you had a South Bridge",
    "start": "723639",
    "end": "729600"
  },
  {
    "text": "which handled slow speed peripherals the SPI flash chip is hanging off the South Bridge modern systems the chunks of the",
    "start": "729600",
    "end": "736680"
  },
  {
    "text": "North Bridge have gone into the CPU and other stuff has gone into the South Bridge so now there's just sort of CPU",
    "start": "736680",
    "end": "742519"
  },
  {
    "text": "and platform controller Hub and the Flash chip hangs off the platform controller Hub now so the Legacy BIOS",
    "start": "742519",
    "end": "748720"
  },
  {
    "text": "was basically a big proprietary blob as I was saying each vendor had sort of their own proprietary formats which",
    "start": "748720",
    "end": "754240"
  },
  {
    "text": "would typically have to be reverse engineered um typically have to be reverse",
    "start": "754240",
    "end": "759720"
  },
  {
    "text": "engineered and people online would reverse engineer it for various reasons and then they'd put up tools in order to",
    "start": "759720",
    "end": "765399"
  },
  {
    "text": "in order to break these things apart this is sort of you know analogous to right this is the bad old days and if",
    "start": "765399",
    "end": "771399"
  },
  {
    "text": "you saw the firmware re talk yesterday that's still the world they live in they've got all these proprietary",
    "start": "771399",
    "end": "776800"
  },
  {
    "text": "compressed and packed sort of things and if you go back more than you know 6 years 7 years this is what you'll still",
    "start": "776800",
    "end": "783440"
  },
  {
    "text": "see on x86 systems um and typically they were they looked like a packed file which means",
    "start": "783440",
    "end": "788880"
  },
  {
    "text": "you had in order to save space on the SPI flash chip always the vendors were trying to you know save pinch pinch a",
    "start": "788880",
    "end": "794800"
  },
  {
    "text": "fraction of a penny times millions of machines means actual money saved so they would use the smallest possible",
    "start": "794800",
    "end": "800839"
  },
  {
    "text": "flash chip and they'd have a little decompression routine at the beginning so you call into the decompression routine and then it expands stuff out",
    "start": "800839",
    "end": "807199"
  },
  {
    "text": "into RAM once Ram is available",
    "start": "807199",
    "end": "811120"
  },
  {
    "text": "that's weird so nowadays um SPI flash chips Intel mandates that you have",
    "start": "812279",
    "end": "818720"
  },
  {
    "text": "certain um you have certain be uh not behaviors characteristics of flash chips",
    "start": "818720",
    "end": "825160"
  },
  {
    "text": "like they must be able to be Rewritten like 100,000 times or something like that so they have certain requirements",
    "start": "825160",
    "end": "831040"
  },
  {
    "text": "that they put on flash chips and they require that they support this um this notion of a flash descriptor flash",
    "start": "831040",
    "end": "838120"
  },
  {
    "text": "descriptor is of a data structure that's put at the the front of the flash chip and that then describes specific regions",
    "start": "838120",
    "end": "844759"
  },
  {
    "text": "within the flash chip so a gigabit Ethernet region that has sort of configuration information for gigabit Ethernet platform data that has",
    "start": "844759",
    "end": "851560"
  },
  {
    "text": "miscellaneous stuff management engine if you've heard of AMT active management technology maybe you heard of the the",
    "start": "851560",
    "end": "857560"
  },
  {
    "text": "talk attacking that you know many years ago uh that contains information there that is uh consumed by the management",
    "start": "857560",
    "end": "864880"
  },
  {
    "text": "engine and then UEFI bios region there's sort of a bios region described by this",
    "start": "864880",
    "end": "870360"
  },
  {
    "text": "that's where the actual contents we care about that we want to analyze are and so the flash descriptor can",
    "start": "870360",
    "end": "876759"
  },
  {
    "text": "create new regions so this will probably increase in the future but for the time being that's what's",
    "start": "876759",
    "end": "882519"
  },
  {
    "text": "there all right I don't know why I used animations I think I copied some previous slides and they used",
    "start": "882519",
    "end": "887920"
  },
  {
    "text": "animations so um with what we care about here within the BIOS region in the ufi",
    "start": "887920",
    "end": "894199"
  },
  {
    "text": "Bios it's going to be organized according to Firmware volumes so what this turns into is that we have a nice",
    "start": "894199",
    "end": "901000"
  },
  {
    "text": "well-defined well formatted firmware file system ultimately so uh the spec",
    "start": "901000",
    "end": "906519"
  },
  {
    "text": "lays out that there's quote unquote firmware devices which may be real or physical the firmware devices are broken",
    "start": "906519",
    "end": "912120"
  },
  {
    "text": "into firmware volumes which can be nested so you can have firmware volumes within volumes I sometimes think of the",
    "start": "912120",
    "end": "917320"
  },
  {
    "text": "volumes kind of like folders and then there's going to be a whole bunch of files in those folders and there may be a compressed folder within a",
    "start": "917320",
    "end": "925320"
  },
  {
    "text": "folder um and and often times we see we'll cover the phases in a second but",
    "start": "925320",
    "end": "930920"
  },
  {
    "text": "just so you know often times we'll see the folder sort of broken up that all of the files that run in one phase of the",
    "start": "930920",
    "end": "936600"
  },
  {
    "text": "boot are in one folder and all of the files in another phase are in a different folder but ultimately the base",
    "start": "936600",
    "end": "941880"
  },
  {
    "text": "unit is a flash file and so these flash files you know it has some well- defined structure it has well- defined you know",
    "start": "941880",
    "end": "948519"
  },
  {
    "text": "ways that we can find it parse it but within each file there there are then",
    "start": "948519",
    "end": "953759"
  },
  {
    "text": "actually separate sections and that's the part that we ultimately care about those are the that's the real file that we care about because a given section",
    "start": "953759",
    "end": "960440"
  },
  {
    "text": "will be for instance um uh what's called a dependency expression meaning like here's the other stuff that needs to",
    "start": "960440",
    "end": "966720"
  },
  {
    "text": "load before this file loads or a given section will be an actual portable executable file so as is said right here",
    "start": "966720",
    "end": "975600"
  },
  {
    "text": "um when we dig all the way down into this firmware file system we find that the different sections can either be",
    "start": "975600",
    "end": "981560"
  },
  {
    "start": "980000",
    "end": "980000"
  },
  {
    "text": "portable executable format or they can be tur executable format so PE if you know Windows you know PE is basically",
    "start": "981560",
    "end": "988880"
  },
  {
    "text": "basically Windows executable format Microsoft's format and then te is the exact same thing but they basically just",
    "start": "988880",
    "end": "995160"
  },
  {
    "text": "collapse down the uh the headers so you know here's a thing where",
    "start": "995160",
    "end": "1000279"
  },
  {
    "text": "both the good guy and the bad guy say hey how interesting my BIOS uses quote unquote Windows executables right I know",
    "start": "1000279",
    "end": "1007720"
  },
  {
    "text": "how to analyze those so I as a Defender know how to analyze those if someone modifies them and I as an attacker know",
    "start": "1007720",
    "end": "1013519"
  },
  {
    "text": "how to break them apart analyze them in in Ida and U and figure out where I need to uh insert my hooks or what have",
    "start": "1013519",
    "end": "1021120"
  },
  {
    "text": "you so there's basically three options that you have right now for firmware file system parsing there's EFI pone",
    "start": "1021120",
    "end": "1027880"
  },
  {
    "text": "which is the thing that we currently use within uh cernus uh extra scripts but uh",
    "start": "1027880",
    "end": "1033280"
  },
  {
    "text": "because this was something that was just sort of put out by a student it was the first one and it was you know at the time that we started doing this it was",
    "start": "1033280",
    "end": "1039558"
  },
  {
    "text": "what was available we didn't have to we didn't want to make our own certainly could have but why not use someone else's code that's out there but uh this",
    "start": "1039559",
    "end": "1046918"
  },
  {
    "text": "is not maintained over time and we've been sort of getting tired of hacking in uh additional support and fixes and so",
    "start": "1046919",
    "end": "1052600"
  },
  {
    "text": "forth so the other tools are ufi tool which also this is a nice goey thing that we'll see in a second here and then",
    "start": "1052600",
    "end": "1059640"
  },
  {
    "text": "uh there's a thing called ufi extract which will basically pull out all of the files dump them off to your uh to your",
    "start": "1059640",
    "end": "1065160"
  },
  {
    "text": "file system and then there's ufi firmware parser uh which was another thing that is being maintained and being",
    "start": "1065160",
    "end": "1072039"
  },
  {
    "text": "actively updated and we'll see that a little bit later too so we'll come back",
    "start": "1072039",
    "end": "1077159"
  },
  {
    "text": "to this later as as we determine whether we have enough time but this is basically what you'd see in ufi tool you",
    "start": "1077159",
    "end": "1083440"
  },
  {
    "text": "go you dump a firmware file in here something Copernicus dumps out something you extract from a bios update file you",
    "start": "1083440",
    "end": "1089720"
  },
  {
    "text": "dump it in here it'll slice it apart and say Here's the different regions that the flash descriptor defines and then",
    "start": "1089720",
    "end": "1095159"
  },
  {
    "text": "within the BIOS region uh you can actually expand that out and you can see all the individual files so we'll like I",
    "start": "1095159",
    "end": "1101000"
  },
  {
    "text": "said we'll come back to that but for now this is just to say okay there's a an easy way to start digging information",
    "start": "1101000",
    "end": "1106559"
  },
  {
    "text": "out of these files so from both the attacker and Defenders perspective right",
    "start": "1106559",
    "end": "1112600"
  },
  {
    "text": "standardization is a good thing right so standardization helps the attacker find that okay well I can now analyze all",
    "start": "1112600",
    "end": "1119440"
  },
  {
    "start": "1115000",
    "end": "1115000"
  },
  {
    "text": "bioses for all vendors in a nice easy way and that also helps us though as a Defender right so we can now have",
    "start": "1119440",
    "end": "1125640"
  },
  {
    "text": "generic Integrity checking software that breaks everything apart the same way uh and and gives us more uh semantically",
    "start": "1125640",
    "end": "1134159"
  },
  {
    "text": "meaningful information about okay well it wasn't I I'm not just telling you hey there's three bites different at offset",
    "start": "1134159",
    "end": "1140840"
  },
  {
    "text": "2457 I tell you that within the text section of the portable executable file that's called you know Pei initialized",
    "start": "1140840",
    "end": "1147520"
  },
  {
    "text": "memory that is where we find you know a three by change and hey it looks like a jump instruction right so so it works",
    "start": "1147520",
    "end": "1154960"
  },
  {
    "text": "for and against us to have the standardization right but the real question is who tends to move faster",
    "start": "1154960",
    "end": "1160960"
  },
  {
    "text": "attackers or Defenders right um there",
    "start": "1160960",
    "end": "1169039"
  },
  {
    "text": "so the SE phase or security phase is the very first notional phase this is a",
    "start": "1169840",
    "end": "1175960"
  },
  {
    "start": "1174000",
    "end": "1174000"
  },
  {
    "text": "binary blob of uh Hardware specific code needs to get the system up and running",
    "start": "1175960",
    "end": "1181280"
  },
  {
    "text": "as fast as possible and just pass off to the pi phase now notionally you can see",
    "start": "1181280",
    "end": "1186320"
  },
  {
    "text": "here it says pre verifier hopefully that's somewhat readable uh pre verifier should theoretically be the the core",
    "start": "1186320",
    "end": "1192880"
  },
  {
    "text": "root of trust for measurement there should be an ability from within this code to measure the rest of your bios",
    "start": "1192880",
    "end": "1198080"
  },
  {
    "text": "and you know confirm well you're not even bothering with confirm just get a measurement and store it off to some trustworthy location like a TPM so that",
    "start": "1198080",
    "end": "1205200"
  },
  {
    "text": "you can actually say something about is this code look like I expect it to look",
    "start": "1205200",
    "end": "1210360"
  },
  {
    "text": "in reality um last year at black hat we did a talk talking about you know how",
    "start": "1210360",
    "end": "1216080"
  },
  {
    "text": "these static roots of trust for measurement are sort of fundamentally broken but uh but there's additional technology that's uh going to be coming",
    "start": "1216080",
    "end": "1222480"
  },
  {
    "text": "into play soon that will improve that but notionally they had this idea of the sex phase is where the most important",
    "start": "1222480",
    "end": "1228960"
  },
  {
    "text": "security stuff goes down obviously if you compromise the system this early if you compromise at the very beginning if",
    "start": "1228960",
    "end": "1234960"
  },
  {
    "text": "you can modify the very first instruction that the CPU ever executes then you are in you know the most",
    "start": "1234960",
    "end": "1240440"
  },
  {
    "text": "trustworthy position you can modify manipulate and make the system lie for everything else that happens",
    "start": "1240440",
    "end": "1246760"
  },
  {
    "text": "thereafter but the security phase uh it executes from uh flash chip so it",
    "start": "1246760",
    "end": "1251919"
  },
  {
    "text": "actually is like living in the flash chip there is no RAM initialized and then uh it moves along yeah and that's",
    "start": "1251919",
    "end": "1258039"
  },
  {
    "text": "what I wanted I thought I had it somewhere the security phase is a misnomer in reality all the the security",
    "start": "1258039",
    "end": "1264640"
  },
  {
    "text": "critical things the verification of digital signatures the measurement of the BIOS on actual real platforms they",
    "start": "1264640",
    "end": "1271440"
  },
  {
    "start": "1267000",
    "end": "1267000"
  },
  {
    "text": "don't actually match that they they do it much later uh and that means that an attacker coming in earlier will always",
    "start": "1271440",
    "end": "1278600"
  },
  {
    "text": "win um yeah so that's where it should go but that's you know it's it's a good",
    "start": "1278600",
    "end": "1284200"
  },
  {
    "text": "uifi is another one of many great examples of how things can be architectur correct and implementation",
    "start": "1284200",
    "end": "1290720"
  },
  {
    "text": "incorrect right so it's all good to say oh well I see that they're doing the right thing in the architecture must be",
    "start": "1290720",
    "end": "1296159"
  },
  {
    "text": "okay right that's why we have to go in and actually evaluate things so a miscellaneous point which I don't want",
    "start": "1296159",
    "end": "1301640"
  },
  {
    "text": "to dwell on too long is just that when you're booting up the system there's multiple paths that uh that the system",
    "start": "1301640",
    "end": "1307960"
  },
  {
    "text": "will take depending on the Sleep state it was in so if you just reboot a system you're you know coming from U an off",
    "start": "1307960",
    "end": "1314159"
  },
  {
    "text": "State and you're going to go in an important point which will the only reason I mentioned this is that uh I",
    "start": "1314159",
    "end": "1320600"
  },
  {
    "text": "mention it for the reason described here is that there's different when when you want to explore the potential for",
    "start": "1320600",
    "end": "1327080"
  },
  {
    "text": "vulnerabilities on the BIOS you have to explore that there's different code paths that it'll go down depending on whether you just went to sleep and woke",
    "start": "1327080",
    "end": "1332679"
  },
  {
    "start": "1330000",
    "end": "1330000"
  },
  {
    "text": "up or you went to hibernate and you woke up or you coming from a cold boot and so",
    "start": "1332679",
    "end": "1337880"
  },
  {
    "text": "the Sleep States they're acpi sleep States um but as I said they go to",
    "start": "1337880",
    "end": "1343360"
  },
  {
    "text": "different uh different code paths so what we've found and what we'll be talking about later in the year you know",
    "start": "1343360",
    "end": "1348720"
  },
  {
    "text": "we've got we've got a whole bunch of vulnerabilities we've already described we've got a whole bunch of vulnerabilities that are still in for uh",
    "start": "1348720",
    "end": "1353960"
  },
  {
    "text": "disclosure we're having the uh vendors fix them we found situations where um you may have a system and Cernic's may",
    "start": "1353960",
    "end": "1360760"
  },
  {
    "text": "say oh this system is currently locked it's configured correctly it's protected that's good but then you put the system",
    "start": "1360760",
    "end": "1366960"
  },
  {
    "text": "to sleep and you wake the system up and the BIOS does not do the right thing upon wake and it doesn't lock things",
    "start": "1366960",
    "end": "1373400"
  },
  {
    "text": "down that got unset as a consequence of sleep and that means then you know all it takes is one sleep and one wake and",
    "start": "1373400",
    "end": "1379240"
  },
  {
    "text": "you're back to a vulnerable system which on laptops is you know pretty guaranteed to happen pretty quickly right so we'll",
    "start": "1379240",
    "end": "1386679"
  },
  {
    "text": "be talking about that later on later in the year um and so actually there was a specific issue in Dell machines that",
    "start": "1386679",
    "end": "1392919"
  },
  {
    "text": "they patched quite a while back like last December we just haven't got around to to the problem is it's it's not a",
    "start": "1392919",
    "end": "1399480"
  },
  {
    "text": "full conference talk worth of information it's just hey it went to sleep came up it's it's it's not it's",
    "start": "1399480",
    "end": "1404600"
  },
  {
    "text": "vulnerable now so we're we're adding that and combining that with some other problems to to get it to be a full",
    "start": "1404600",
    "end": "1409919"
  },
  {
    "text": "conference talk worth of information so um some of the type of information that the SE phase is",
    "start": "1409919",
    "end": "1416000"
  },
  {
    "start": "1416000",
    "end": "1416000"
  },
  {
    "text": "responsible for is configuring the CPU for Cash's Ram this makes it so that even though your RAM is not actually set",
    "start": "1416000",
    "end": "1421880"
  },
  {
    "text": "up yet by the time you get into the next phase the pi phase you can actually have C code executing in the U in the uh Pi",
    "start": "1421880",
    "end": "1430679"
  },
  {
    "text": "phase because if you don't have a stack if you don't have this ability to push and pop then you can't expect that normal compiler generated code will",
    "start": "1430679",
    "end": "1437200"
  },
  {
    "text": "actually work that's why SE phase is handed assembly where they're doing their best to never you know try to use",
    "start": "1437200",
    "end": "1442760"
  },
  {
    "text": "you know memory or temporary space but once Cash's Ram is initialized then you can have um compiler generated code",
    "start": "1442760",
    "end": "1450080"
  },
  {
    "text": "running and then it you know has to activate the the main CPU so forth so",
    "start": "1450080",
    "end": "1457279"
  },
  {
    "text": "originally so in the in the full version of this we would go down like everything and talk about all this stuff but but",
    "start": "1457279",
    "end": "1463120"
  },
  {
    "text": "this is just to uh to speak to there's a there's a nice Intel white paper out there where they're talking about reducing platform boot times so you may",
    "start": "1463120",
    "end": "1470399"
  },
  {
    "text": "know that going along with Windows 8 secure boot are also requirements such as you must you know you must boot this",
    "start": "1470399",
    "end": "1476120"
  },
  {
    "text": "fast well if you put requirements on the vendors that they must boot fast and they must boot securely they're they're",
    "start": "1476120",
    "end": "1482640"
  },
  {
    "text": "probably going to the boot fast one is the easier one to achieve at the at the expense of the boot securely",
    "start": "1482640",
    "end": "1488520"
  },
  {
    "text": "so so uh this is just to say that if you're interested in that kind of thing there's a nice Intel white paper out",
    "start": "1488520",
    "end": "1494279"
  },
  {
    "text": "there that you can look at for reducing uh boot times and that talks through all of the Um this can also be used to",
    "start": "1494279",
    "end": "1501279"
  },
  {
    "text": "understand like what the bio scissor may be doing in each phase you can say well maybe the vendor was trying to implement",
    "start": "1501279",
    "end": "1506919"
  },
  {
    "text": "this and they were you know this is why the micro code update is right here this is why the caches Ram is right here but",
    "start": "1506919",
    "end": "1513520"
  },
  {
    "text": "ultimately uh when the SEC phase is done this is where the nice SES of standardization comes in there's going",
    "start": "1513520",
    "end": "1520039"
  },
  {
    "text": "to be some handoff to Pei so it's initialized everything it's got the SEC phases responsibilities taken care of",
    "start": "1520039",
    "end": "1526799"
  },
  {
    "start": "1523000",
    "end": "1523000"
  },
  {
    "text": "and it will now collect information which it'll pass to pii that information includes things like um information",
    "start": "1526799",
    "end": "1533960"
  },
  {
    "text": "about the operating environment such as where the temporary Ram is like how much caches Ram has it actually initialized",
    "start": "1533960",
    "end": "1539600"
  },
  {
    "text": "location of the temporary stack location of the boot firmware volume so this is basically a firmware volume as we were",
    "start": "1539600",
    "end": "1545720"
  },
  {
    "text": "discussing before on the flash chip and it's telling you here's the offset to the firmware volume so that you can start decompressing or you know just",
    "start": "1545720",
    "end": "1552799"
  },
  {
    "text": "pulling and parsing the information in order to boot all of the Pei uh phase code",
    "start": "1552799",
    "end": "1560240"
  },
  {
    "text": "and um yeah list of yeah that's that probably shouldn't be even talked about",
    "start": "1562760",
    "end": "1567840"
  },
  {
    "text": "yet so uh the pii phase the prfi phase",
    "start": "1567840",
    "end": "1573320"
  },
  {
    "text": "this a lot of work goes on here but then ultimately much more work will go on in the Dixie phase so its job is to",
    "start": "1573320",
    "end": "1578559"
  },
  {
    "text": "initialize permanent memory so this is where you actually initialize RAM and you actually get the system into what you would think of as a normal running",
    "start": "1578559",
    "end": "1585320"
  },
  {
    "text": "state it also then you know once it initializes memory has to pass that off to the next phase and say here you go",
    "start": "1585320",
    "end": "1590799"
  },
  {
    "text": "next phase you can just assume that Ram is initialized um it describes there's a a",
    "start": "1590799",
    "end": "1596480"
  },
  {
    "text": "variety of handoff blocks of of again metadata that it must pass on to the next phase and um and ultimately yeah",
    "start": "1596480",
    "end": "1603679"
  },
  {
    "text": "its job is to once it has executed all of the Pei phase Hardware initializing modules then uh once everything's",
    "start": "1603679",
    "end": "1610360"
  },
  {
    "text": "complete it will go ahead and pass to the next phase so in the pii phase we have this notion of a Pim prei",
    "start": "1610360",
    "end": "1617760"
  },
  {
    "text": "initialization ation modules so pims are the types of things",
    "start": "1617760",
    "end": "1623080"
  },
  {
    "text": "where now we've got portable executable files well- defined things on some systems they're pees on some system they're tees but they're basically this",
    "start": "1623080",
    "end": "1630720"
  },
  {
    "start": "1624000",
    "end": "1624000"
  },
  {
    "text": "nice modular format where different chunks of code handle initialization of different hardware and also very",
    "start": "1630720",
    "end": "1638120"
  },
  {
    "text": "interestingly they have a well- defined structure where they um they create",
    "start": "1638120",
    "end": "1644640"
  },
  {
    "text": "basically apis for each other so they say I am a pin that handles you know",
    "start": "1644640",
    "end": "1650440"
  },
  {
    "text": "status reporting information so I handle like writing to a console log or I handle writing to the flashship I handle",
    "start": "1650440",
    "end": "1656000"
  },
  {
    "text": "logging type thing I'm going to register a pimt Pim interface and now anyone who",
    "start": "1656000",
    "end": "1661240"
  },
  {
    "text": "wants to log stuff they can look up my pimt pimp interface and they can go ahead and call into me and so although",
    "start": "1661240",
    "end": "1668640"
  },
  {
    "text": "they uh although the binaries are you know portable executable files they don't work the same way as like dlls on",
    "start": "1668640",
    "end": "1675039"
  },
  {
    "text": "Windows they don't like import a dll that kind of thing what they do is they have this well-defined interface the pimp the ppis",
    "start": "1675039",
    "end": "1682840"
  },
  {
    "text": "where you look up things that you care about so when you're writing the code you say at some point I'm going to need to call into this interface that's",
    "start": "1682840",
    "end": "1689799"
  },
  {
    "text": "defined in the ufi specification for here is how I find the logging code right so I just do lookup login code I",
    "start": "1689799",
    "end": "1696960"
  },
  {
    "text": "get back a pointer and now I have a data structure that I can use to call function pointers within that code so",
    "start": "1696960",
    "end": "1703320"
  },
  {
    "text": "this is going to be um sort of interesting and an analogous thing will happen in the next phase",
    "start": "1703320",
    "end": "1709440"
  },
  {
    "text": "so there's the registration of the ppis there's a pii dispatcher so this is the thing which is basically going to chew",
    "start": "1709440",
    "end": "1715679"
  },
  {
    "text": "through the firmware file system it's going to say okay I see that there's a dependency expression dependency",
    "start": "1715679",
    "end": "1721399"
  },
  {
    "text": "expression says I can't load this module until these five other modules are loaded so again doesn't work exactly the",
    "start": "1721399",
    "end": "1727279"
  },
  {
    "text": "same way that like an import address table import names table that kind of stuff in Windows would work there's",
    "start": "1727279",
    "end": "1732760"
  },
  {
    "text": "these files on the firmware file system that says here's the PRX for this file you the dispatcher must go off and pull",
    "start": "1732760",
    "end": "1738760"
  },
  {
    "text": "all these things in run them and now you can load this so the dispatcher asked to handle the logic for that um and you",
    "start": "1738760",
    "end": "1745919"
  },
  {
    "text": "know it handles the firmware volumes and services such so this is where there's some core services within the Pei phase",
    "start": "1745919",
    "end": "1753640"
  },
  {
    "text": "such as so that each um so that each pin can have an expectation that it can find",
    "start": "1753640",
    "end": "1759399"
  },
  {
    "text": "other ppis it can find other firmware volumes so this this is again is where",
    "start": "1759399",
    "end": "1766080"
  },
  {
    "text": "so if I pick up the pace we we'll get to see at the very end where uh you know how code actually uses these sort of",
    "start": "1766080",
    "end": "1773120"
  },
  {
    "text": "tables but um this is a data structure that you can assume like if you're reverse engineering the code you can say",
    "start": "1773120",
    "end": "1779480"
  },
  {
    "text": "I will expect that this data structure will be passed into the main function of a given pin module and so when I see it",
    "start": "1779480",
    "end": "1786240"
  },
  {
    "text": "offsetting when I see it doing you know pointer arithmetic and I see it going okay this pointer plus 32 okay now I",
    "start": "1786240",
    "end": "1793240"
  },
  {
    "text": "know that that's whatever it is plus 32 I don't know it probably be rein install",
    "start": "1793240",
    "end": "1798720"
  },
  {
    "text": "PPI so you can start easily figuring out the semantic meaning of um you know the",
    "start": "1798720",
    "end": "1804600"
  },
  {
    "text": "codes exe utilization of function pointers because what I'll tell you is that when when you're looking at the",
    "start": "1804600",
    "end": "1809919"
  },
  {
    "text": "code for these things it looks very much like C++ code and I mean that in the most annoying way so C++ code you know",
    "start": "1809919",
    "end": "1817159"
  },
  {
    "text": "virtual functions things like that IND Direction calls through uh calls through function pointer tables that makes it",
    "start": "1817159",
    "end": "1823519"
  },
  {
    "text": "hard to follow control flow that makes it difficult to uh see you know hit cross references on a given function and",
    "start": "1823519",
    "end": "1829200"
  },
  {
    "text": "see everywhere that it's used so that sort of inter direction is used extremely much in all of the Pei phases",
    "start": "1829200",
    "end": "1835080"
  },
  {
    "text": "you're always going to see things referencing through these sort of function pointer tables but at the end",
    "start": "1835080",
    "end": "1840600"
  },
  {
    "text": "of the day with you know some appropriate use of uh of Ida importing of data structures you can actually uh",
    "start": "1840600",
    "end": "1848279"
  },
  {
    "text": "it can actually lead to making very semantically rich U pseudo code so this",
    "start": "1848279",
    "end": "1854120"
  },
  {
    "text": "is how you should think of the pi phase it starts off you've got the dispatcher and then it chews through all of these",
    "start": "1854120",
    "end": "1859600"
  },
  {
    "text": "pins on the firmware file system it pulls each of them in executes the entry point figures out what the dependencies",
    "start": "1859600",
    "end": "1865639"
  },
  {
    "text": "are and uh and does this nice series ultimately once it's done with all of",
    "start": "1865639",
    "end": "1870679"
  },
  {
    "text": "the pins then it's responsible for finding the Dixie IPL initial program loader pin so this is a Pim but its only",
    "start": "1870679",
    "end": "1878080"
  },
  {
    "text": "job is to kick off the next phase the the Dixie phase",
    "start": "1878080",
    "end": "1884120"
  },
  {
    "text": "so and I'm going to skip that in the interest of time you can go read it later so um handoff blocks then as the Pei",
    "start": "1884120",
    "end": "1893960"
  },
  {
    "text": "dispatcher finds the uh the Dixie IPL its job is to take these handoff blocks",
    "start": "1893960",
    "end": "1899440"
  },
  {
    "text": "well-defined data structures pass them into the next phase and then um the Dixie phase will know where the memory",
    "start": "1899440",
    "end": "1905760"
  },
  {
    "text": "is it'll know where the firmware volumes are and so forth so the Dixie phase is honestly the",
    "start": "1905760",
    "end": "1911399"
  },
  {
    "text": "most interesting phase most of the time because a lot of the stuff that goes on in the the Pim phase is just Hardware",
    "start": "1911399",
    "end": "1917440"
  },
  {
    "text": "initial ation it's pretty rote it's just you know if you have this particular chipset you initialize it in this way",
    "start": "1917440",
    "end": "1924399"
  },
  {
    "text": "the Dixie phase is where all of the interesting sort of uh secure boot things and setup of system management",
    "start": "1924399",
    "end": "1929919"
  },
  {
    "text": "mode all of the all of the good juicy bits are here so from a high level view it works",
    "start": "1929919",
    "end": "1937360"
  },
  {
    "text": "in a very the dispatcher within um Dixie works the same way as the pi phase so",
    "start": "1937360",
    "end": "1943519"
  },
  {
    "text": "there's sort of onetoone mappings between they just you know at a high level the structuring of the Dixie phase",
    "start": "1943519",
    "end": "1949240"
  },
  {
    "text": "and Pi phase are the same so whereas in in pi we had pims these Pi modules in",
    "start": "1949240",
    "end": "1955440"
  },
  {
    "text": "Dixie phase they're called Dixie drivers uh Pi dispatcher is just like the Dixie dispatcher it just goes through the",
    "start": "1955440",
    "end": "1961799"
  },
  {
    "text": "firmware file system and finds all the things and loads them in an order appropriate according to the dependency",
    "start": "1961799",
    "end": "1967760"
  },
  {
    "text": "Expressions the PPI these Pinto Pim interfaces a way that you register for other code to be able to find you and",
    "start": "1967760",
    "end": "1974440"
  },
  {
    "text": "execute and invoke your code that's called a protocol in the Dixie phase if we talk about a Dixie protocol we're",
    "start": "1974440",
    "end": "1980360"
  },
  {
    "text": "saying here's some code that I've registered and I let people look it up and I let people call it and then just",
    "start": "1980360",
    "end": "1986159"
  },
  {
    "text": "like the uh the SEC core gave data to Pei Pei gives this well- defined data the hubs to uh to the Dixie phase so if",
    "start": "1986159",
    "end": "1994639"
  },
  {
    "text": "you take that exact picture and you fill in Dixie for PIM and um you know Dixie",
    "start": "1994639",
    "end": "1999880"
  },
  {
    "text": "IPL for boot phase uh it'll be the exact same thing so I was saying that",
    "start": "1999880",
    "end": "2006559"
  },
  {
    "text": "basically um the there's all these function pointer tables which are used and I guess I",
    "start": "2006559",
    "end": "2012559"
  },
  {
    "text": "didn't highlight the the red ones last time but the ones that we sort of care about from a security perspective and",
    "start": "2012559",
    "end": "2018279"
  },
  {
    "text": "honestly that's probably not that visible on there either the ones we care about are things like trust and uh",
    "start": "2018279",
    "end": "2023919"
  },
  {
    "text": "process firmware volume so there's this there's this data structure the Dixie Services data structure it's going to be",
    "start": "2023919",
    "end": "2030039"
  },
  {
    "text": "passed into the main of the Dixie phase code and it's going to then that that phase is going to use these U these",
    "start": "2030039",
    "end": "2036919"
  },
  {
    "text": "function pointers in order to call these sort of core Dixie Services the trust",
    "start": "2036919",
    "end": "2042080"
  },
  {
    "text": "phase well so the process firmware volume that's basically if I'm a Dixie driver I'm going to you know call",
    "start": "2042080",
    "end": "2047880"
  },
  {
    "text": "Process firmware volume in order to find another firmware volume in order to find some other code that I want to load",
    "start": "2047880",
    "end": "2052960"
  },
  {
    "text": "potentially and that processing potentially you know this is just stuff which is implemented by The Dixie core",
    "start": "2052960",
    "end": "2059040"
  },
  {
    "text": "that processing you know anytime there's parsing there's potential for um uh",
    "start": "2059040",
    "end": "2064118"
  },
  {
    "text": "exploitable memory conditions parsing Miss um mishaps and so that's you know one obvious place where vulnerabilities",
    "start": "2064119",
    "end": "2070679"
  },
  {
    "text": "Could Happen these other things they're just you know IO space memory space access type of things and then trust",
    "start": "2070679",
    "end": "2075878"
  },
  {
    "text": "trust is kind of interesting because it basically says I'm going to mark this firmware volume's worth of information",
    "start": "2075879",
    "end": "2081440"
  },
  {
    "text": "I'm going to mark this executable that I'm loaded loading as trustworthy and then I can go ahead and run that so",
    "start": "2081440",
    "end": "2087839"
  },
  {
    "text": "fundamentally if I'm you know a ufi rootkit I can just you know go ahead and hook into something and call Trust on it",
    "start": "2087839",
    "end": "2093320"
  },
  {
    "text": "and then it's going to um just bypass any other addition uh additional checks is going to bypass signature checks and",
    "start": "2093320",
    "end": "2099320"
  },
  {
    "text": "so forth in addition to the Dixie Services table there's going to be a whole lot of function pointers for use",
    "start": "2099320",
    "end": "2105359"
  },
  {
    "text": "within this phase there's the Dixie Services table there's the boot Services table uh this has then the install",
    "start": "2105359",
    "end": "2111320"
  },
  {
    "text": "protocol interface reinstall protocol interface uninstall handle protocol these are the things where if I want to",
    "start": "2111320",
    "end": "2117560"
  },
  {
    "text": "say that someone else should be able to call into my code I will call install protocol interface and then someone else",
    "start": "2117560",
    "end": "2124119"
  },
  {
    "text": "will uh where is it there should be a lookup locate protocol",
    "start": "2124119",
    "end": "2130920"
  },
  {
    "text": "somewhere I don't think I highlighted it but but then there's you know register notify so register notify is interesting",
    "start": "2130920",
    "end": "2137440"
  },
  {
    "text": "because you can say I know that I'm going to need this protocol and call me back whenever you get around to loading",
    "start": "2137440",
    "end": "2142800"
  },
  {
    "text": "a Dixie driver that that actually implements that so you can have call backs where later on uh it it invokes",
    "start": "2142800",
    "end": "2148839"
  },
  {
    "text": "your code once the prerequisite code is actually started load image and start image those are basically image in this",
    "start": "2148839",
    "end": "2155920"
  },
  {
    "text": "context is now portable executable files this is loading actual executable code",
    "start": "2155920",
    "end": "2161880"
  },
  {
    "text": "so that's starting up that and open protocol is call into something else there it is locate protocol so three",
    "start": "2161880",
    "end": "2168400"
  },
  {
    "text": "pages worth of function pointers just in the boot Services table uh but some of them more interesting than others and",
    "start": "2168400",
    "end": "2174520"
  },
  {
    "text": "finally then there's some even more uh function pointers that are available but this one is especially interesting",
    "start": "2174520",
    "end": "2180240"
  },
  {
    "text": "because um I don't know why that was animated again runtime Services table",
    "start": "2180240",
    "end": "2186000"
  },
  {
    "text": "it's something that the Dixie phase has access to but this is something that persists into the runtime of the",
    "start": "2186000",
    "end": "2191640"
  },
  {
    "text": "operating system so it's set up during the Dixie phase there's going to be some core Dixie driver that handles the um",
    "start": "2191640",
    "end": "2198640"
  },
  {
    "text": "handles the back behind the scenes code for each of these function pointers but",
    "start": "2198640",
    "end": "2204760"
  },
  {
    "text": "whereas those other tables boot Services table and Dixie Services table those things are sort of going to go away once",
    "start": "2204760",
    "end": "2210520"
  },
  {
    "text": "you get past the boot loader they're sort of for bios use only and then they're going to be recycled their",
    "start": "2210520",
    "end": "2216000"
  },
  {
    "text": "memory is going to be recycled when we get past the bootloader the runtime Services table sort of sticks around",
    "start": "2216000",
    "end": "2221079"
  },
  {
    "text": "forever and this is meant to be some this is meant to be sort of an interface from which the operating system can call",
    "start": "2221079",
    "end": "2228119"
  },
  {
    "text": "into code that was provided uh to it by the uh by the firmware and so this is a",
    "start": "2228119",
    "end": "2233960"
  },
  {
    "text": "potential place where sort of less privileged code an operating system can",
    "start": "2233960",
    "end": "2240200"
  },
  {
    "text": "pass information for processing to more privileged code uh the firmware and we call the firmware more privileged",
    "start": "2240200",
    "end": "2246400"
  },
  {
    "text": "because it sets up things like system management mode which can exist behind the scenes forever so um at black hat this year we",
    "start": "2246400",
    "end": "2254119"
  },
  {
    "text": "had shown how from uh from Windows 8 it exposes this runtime services so",
    "start": "2254119",
    "end": "2259920"
  },
  {
    "text": "although it's called something else really you're calling into an API which is really just a a front end to set",
    "start": "2259920",
    "end": "2265480"
  },
  {
    "text": "variable and update capsule so utilizing these um the",
    "start": "2265480",
    "end": "2271599"
  },
  {
    "text": "ability to call into these function pointers we can sort of stage information which the BIOS is going to consume and process upon next Boot and",
    "start": "2271599",
    "end": "2278599"
  },
  {
    "text": "uh we had found these exploitable conditions where um we could create this update capsule that has to do with bios",
    "start": "2278599",
    "end": "2285280"
  },
  {
    "text": "updates essentially so we can create a fake bios update full of non-signed but memory corrupting information create a",
    "start": "2285280",
    "end": "2292240"
  },
  {
    "text": "fake update reboot the system the BIOS says oh I see that you've uh you've part you've staged a bios update for me I",
    "start": "2292240",
    "end": "2298200"
  },
  {
    "text": "think I'll go ahead and parse that and then ultimately in the in the process of parsing that it'll uh choke and die and",
    "start": "2298200",
    "end": "2304560"
  },
  {
    "text": "U the attacker will gain code execution at the very beginning of the system boot uh the set virtual address map is",
    "start": "2304560",
    "end": "2311839"
  },
  {
    "text": "sort of I don't know it's interesting for people like me who deal with memory management and things like that it's basically like the runtime Services",
    "start": "2311839",
    "end": "2318640"
  },
  {
    "text": "table is sort of left around but uh they don't really have relocations per say in",
    "start": "2318640",
    "end": "2324040"
  },
  {
    "text": "the same way that normal portable executables have relocations in Windows so when you first want to access the",
    "start": "2324040",
    "end": "2329680"
  },
  {
    "text": "runtime Services table from an operating system you just sort of scan through memory find the table based on a signature and then once you find it you",
    "start": "2329680",
    "end": "2335920"
  },
  {
    "text": "call into this set virtual address map and then it's going to sort of do a relocations on wherever the BIOS stuck",
    "start": "2335920",
    "end": "2341599"
  },
  {
    "text": "this in memory you the operating system or you the attacker have mapped this into memory at some location and you're",
    "start": "2341599",
    "end": "2347640"
  },
  {
    "text": "telling the code hey I've mapped you into memory at this location go fix yourself up for me so that all of your",
    "start": "2347640",
    "end": "2352960"
  },
  {
    "text": "hardcoded constants are now at the right location so and then even beyond the the",
    "start": "2352960",
    "end": "2358920"
  },
  {
    "text": "exploitable update there are other things where just the ability to access ufi firmware variables has U has allowed",
    "start": "2358920",
    "end": "2365839"
  },
  {
    "text": "for bypassing set variable if you maybe heard of those cases where um you know",
    "start": "2365839",
    "end": "2370920"
  },
  {
    "text": "they were blaming Linux at the time really it's a firmware problem but they were saying you know if you boot Linux on the Samsung laptop it will uh break",
    "start": "2370920",
    "end": "2378040"
  },
  {
    "text": "your system right that was a case where basically um the Linux was using the",
    "start": "2378040",
    "end": "2385720"
  },
  {
    "text": "UEFI nonvolatile variables in order to save logging information and at some point it would just sort of exhaust the",
    "start": "2385720",
    "end": "2391079"
  },
  {
    "text": "space available for variables and so they were using this set variable and just filling it in with logging",
    "start": "2391079",
    "end": "2396160"
  },
  {
    "text": "information and then eventually a a bios choked the the the Samsung or eventually",
    "start": "2396160",
    "end": "2401760"
  },
  {
    "text": "there was a Lenovo example as well the BIOS just choked on too many variables and then it just refused to",
    "start": "2401760",
    "end": "2407880"
  },
  {
    "text": "boot so in terms of U relative magnitude of pims versus Dixie",
    "start": "2407880",
    "end": "2413240"
  },
  {
    "text": "drivers you can use these firmware parsing tools and you can see that you know if if there's 65 pins there's 279",
    "start": "2413240",
    "end": "2421520"
  },
  {
    "text": "uh 78 Dixie drivers so there's many many more Dixie drivers they're all like",
    "start": "2421520",
    "end": "2426640"
  },
  {
    "text": "registering these protocols and talking amongst themselves and uh you know implementing you know potentially pretty",
    "start": "2426640",
    "end": "2432720"
  },
  {
    "text": "high level things um we'll we'll see here at the end again if I move faster",
    "start": "2432720",
    "end": "2437960"
  },
  {
    "text": "uh we'll see like the names on some things from which you can sort of infer that they're doing pretty high level things they're doing graphical things",
    "start": "2437960",
    "end": "2443680"
  },
  {
    "text": "they're doing uh there I don't think there's going to be a name specifically that you can call to that but um I know",
    "start": "2443680",
    "end": "2449480"
  },
  {
    "text": "that HP at one point had this um value ad to uh to allow you to check your Outlook mail from the bios so like you",
    "start": "2449480",
    "end": "2456560"
  },
  {
    "text": "know those Splashtop operating systems where they said look it takes one second to boot and then they've got like a",
    "start": "2456560",
    "end": "2461680"
  },
  {
    "text": "browser and you've got your email and everything else right so so that's good from sort of a usability perspective",
    "start": "2461680",
    "end": "2467599"
  },
  {
    "text": "right you can boot to just something quick but that means there's all that sort of code being implemented down at",
    "start": "2467599",
    "end": "2473440"
  },
  {
    "text": "the BIOS level uh to have problems can be there so um I've already made",
    "start": "2473440",
    "end": "2480200"
  },
  {
    "text": "reference to the ufi nonvolatile variables um just handwaved over them for until now because um basically in",
    "start": "2480200",
    "end": "2488200"
  },
  {
    "text": "your legacy bioses you would have this notion of cosos or NV ram nonv ram that stored your configuration information",
    "start": "2488200",
    "end": "2494480"
  },
  {
    "start": "2493000",
    "end": "2493000"
  },
  {
    "text": "but that was a pretty it was a very limited amount of space that the BIOS venders would twiddle bits there and set",
    "start": "2494480",
    "end": "2499839"
  },
  {
    "text": "config information in UEFI you have this well-defined",
    "start": "2499839",
    "end": "2505359"
  },
  {
    "text": "um data structure it's called non-volatile variables and these are stored actually on the flash chip so",
    "start": "2505359",
    "end": "2511000"
  },
  {
    "text": "there's going to be some amount of code on the flashship and then there's going to be this data these non-volatile variables on the flash chip and and",
    "start": "2511000",
    "end": "2517280"
  },
  {
    "text": "those are used for uh configuration information I already spoke to that Samsung Lenovo case where you know",
    "start": "2517280",
    "end": "2524000"
  },
  {
    "text": "theoretically just fill up the variables and you can brick the system um and then also there was there",
    "start": "2524000",
    "end": "2531040"
  },
  {
    "text": "was um these exploitable conditions in the past uh so Pei May touch the variables a",
    "start": "2531040",
    "end": "2537880"
  },
  {
    "text": "little bit for instance with this fake bios update it was checking for the presence of one variable and when it found it then it in started invoking",
    "start": "2537880",
    "end": "2544520"
  },
  {
    "text": "bios update but um but typically it's the Dixie phase and later which utilize them so this is just to say what sort of",
    "start": "2544520",
    "end": "2551520"
  },
  {
    "text": "attributes a nonvolatile variable can have it's all defined in the spec so",
    "start": "2551520",
    "end": "2556680"
  },
  {
    "text": "nonvolatile obviously they can all they can be they can be volatile but we care about the nonvolatile ones boot Services",
    "start": "2556680",
    "end": "2563599"
  },
  {
    "text": "access means that it will be accessed up through Boot and it uh it shouldn't be accessed thereafter runtime access this",
    "start": "2563599",
    "end": "2569880"
  },
  {
    "text": "is the one that we sort of care about a lot this means that it's going to be accessible later on when the operating",
    "start": "2569880",
    "end": "2575800"
  },
  {
    "text": "system is running from within that runtime Services table hardware error record not that interesting",
    "start": "2575800",
    "end": "2581559"
  },
  {
    "text": "authenticated right access this is something that this and the time based authentication these are things where it",
    "start": "2581559",
    "end": "2587359"
  },
  {
    "text": "makes it much stronger than than the battle days with seos with seos anyone who's kernel can just go twiddle the",
    "start": "2587359",
    "end": "2592720"
  },
  {
    "text": "bits once they had reverse engineered it with authenticated non-volatile variables they actually have digital",
    "start": "2592720",
    "end": "2598880"
  },
  {
    "text": "signatures uh well they don't have digital signatures on them the gatekeeper the code which implements the",
    "start": "2598880",
    "end": "2605160"
  },
  {
    "text": "reading and writing to the variables it will make it so that you cannot write to this variable unless you have provided",
    "start": "2605160",
    "end": "2612680"
  },
  {
    "text": "me a digital signature that actually is signed by the key of the platform manufacturer or assigned by another key",
    "start": "2612680",
    "end": "2618319"
  },
  {
    "text": "that you've added in um and so it makes it so that anything that's important can be stored in these variables and locked",
    "start": "2618319",
    "end": "2624559"
  },
  {
    "text": "down so that uh it can't be manipulated by an attacker um and",
    "start": "2624559",
    "end": "2632040"
  },
  {
    "text": "yeah so if something's both runtime and authenticated that you know where you",
    "start": "2632040",
    "end": "2637760"
  },
  {
    "text": "would put your typical security information but if you see runtime and not authenticated that means it's open",
    "start": "2637760",
    "end": "2643079"
  },
  {
    "text": "to attack or manipulation and so in the case of the setup variable stuff this was something where I just said that the",
    "start": "2643079",
    "end": "2649839"
  },
  {
    "start": "2647000",
    "end": "2647000"
  },
  {
    "text": "gatekeeper is the one who does the you know you hear okay well this is assigned variable so someone has to check the",
    "start": "2649839",
    "end": "2656000"
  },
  {
    "text": "digital signature it's like who's going to check that well for most implementations it's someone like system management mode so when you're calling",
    "start": "2656000",
    "end": "2661920"
  },
  {
    "text": "into the runtime Services table that's shunting into system management mode code which is you know protected by",
    "start": "2661920",
    "end": "2667119"
  },
  {
    "text": "virtue of just being in system management mode but then if you have a misconfigured bios where anyone can",
    "start": "2667119",
    "end": "2673640"
  },
  {
    "text": "write to the flash chip that means you can completely do an end run around uh the the gatekeeper the authenticator of",
    "start": "2673640",
    "end": "2680839"
  },
  {
    "text": "these variables and consequently you can just modify stuff however you want and that was this U this Charizard attack",
    "start": "2680839",
    "end": "2687400"
  },
  {
    "text": "that we had presented earlier in the year so amongst the interesting things",
    "start": "2687400",
    "end": "2693839"
  },
  {
    "text": "about the um amongst the interesting non Vol variables the most important authenticated non-volatile variables are",
    "start": "2693839",
    "end": "2700800"
  },
  {
    "text": "the keys so the key storage and this is sort of where the controversy with the Linux things comes from you know",
    "start": "2700800",
    "end": "2707200"
  },
  {
    "text": "platform manufacturers who are shipping uh Windows 8 certified things they're obviously going to have Microsoft",
    "start": "2707200",
    "end": "2712880"
  },
  {
    "start": "2708000",
    "end": "2708000"
  },
  {
    "text": "Windows 8 key in the uh in the in the within the BIOS as one of these Keys",
    "start": "2712880",
    "end": "2720040"
  },
  {
    "text": "it'll typically be typically be the platform key so you've got these Notions of keys",
    "start": "2720040",
    "end": "2726240"
  },
  {
    "text": "there's platform keys there's key exchange key there's signature database and forbidden database so we'll start at",
    "start": "2726240",
    "end": "2731319"
  },
  {
    "text": "the bottom forbidden database this is a black list of ufi modules which have been found to you know potentially have",
    "start": "2731319",
    "end": "2736880"
  },
  {
    "text": "vulnerabilities and so they can add in a Black List and say don't ever allow that signature database this is a white list",
    "start": "2736880",
    "end": "2742880"
  },
  {
    "text": "where you can just not even have to care about keying and you can just say I want to put a white list entry in for my you",
    "start": "2742880",
    "end": "2749400"
  },
  {
    "text": "know boot loader or whatever and then you can just boot the system so the whole notion that you know you were somehow being locked out of your Linux",
    "start": "2749400",
    "end": "2756480"
  },
  {
    "text": "it it was as simple as adding a wh list key for a bootloader you didn't even have to do that whole thing with you know signing with a Microsoft key or",
    "start": "2756480",
    "end": "2762480"
  },
  {
    "text": "anything like that they chose to do that because they were going for the easiest most least painful way in order to make",
    "start": "2762480",
    "end": "2769920"
  },
  {
    "text": "uh make the system boot so but then you know in reality most bioses they're",
    "start": "2769920",
    "end": "2775440"
  },
  {
    "text": "going to give you an ability to go in and add whatever Keys you want so they you they could have said oh you're going to add a fedora key you're going to add",
    "start": "2775440",
    "end": "2781400"
  },
  {
    "text": "a red hat key but as if you go back and read the the articles about that they're saying we evaluate ated many different",
    "start": "2781400",
    "end": "2787599"
  },
  {
    "text": "ways of doing this and we decided that just signing with Microsoft's key was the least pain for everyone but it is",
    "start": "2787599",
    "end": "2793280"
  },
  {
    "text": "absolutely possible that they could have just done it many other ways where you just manually had to you know set a key",
    "start": "2793280",
    "end": "2798800"
  },
  {
    "text": "for instance and I should I suppose I should say well I should I'll say it later",
    "start": "2798800",
    "end": "2804000"
  },
  {
    "text": "never mind but um but these these Keys themselves they're authenticated variables they're they're sort of",
    "start": "2804000",
    "end": "2809839"
  },
  {
    "text": "written into the flesh at manufacturing time they're signed they were uh they're marked as authenticated so that you're",
    "start": "2809839",
    "end": "2815920"
  },
  {
    "text": "not supposed to be able to touch it unless you actually are you know doing the update with a Dell key but again if",
    "start": "2815920",
    "end": "2821319"
  },
  {
    "text": "you can get around the U signature requirements you can obviously go modify",
    "start": "2821319",
    "end": "2826800"
  },
  {
    "text": "that I kind of already said that the one miscellaneous thing although we haven't",
    "start": "2829240",
    "end": "2834839"
  },
  {
    "text": "talked about it here there are other protection mechanisms within the BIOS things like protected range registers where the chipset can say this region of",
    "start": "2834839",
    "end": "2841720"
  },
  {
    "text": "the flash chip is non- rable and no one should ever be able to touch it the thing is those protected those other",
    "start": "2841720",
    "end": "2847400"
  },
  {
    "start": "2845000",
    "end": "2845000"
  },
  {
    "text": "protection mechanisms can never really be applied to the ufi nonvolatile variables the the variables are always",
    "start": "2847400",
    "end": "2853280"
  },
  {
    "text": "sort of going to be a little bit vulnerable more vulnerable than you know the code itself because they can't be",
    "start": "2853280",
    "end": "2859480"
  },
  {
    "text": "marked as pure non-writable because if they're a runtime access variable they need to be rewritable on the fly so",
    "start": "2859480",
    "end": "2865760"
  },
  {
    "text": "that's just sort of an architectural thing where uh we can potentially get around it and I already mentioned that",
    "start": "2865760",
    "end": "2872000"
  },
  {
    "text": "so uh Dixie and system management mode are best friends forever um system",
    "start": "2872000",
    "end": "2877400"
  },
  {
    "text": "management mode is the most privileged execution domain on an x86 system I wish",
    "start": "2877400",
    "end": "2883079"
  },
  {
    "text": "I would have put in sort of a Intel manual picture but um just to remind",
    "start": "2883079",
    "end": "2888920"
  },
  {
    "text": "people or to inform people who aren't aware of it right you have your typical CPU it reboots into real mode real mode",
    "start": "2888920",
    "end": "2895240"
  },
  {
    "text": "is your flat uh no protections Doss sort of mode anybody can access anything",
    "start": "2895240",
    "end": "2901599"
  },
  {
    "text": "eventually an operating system or bootloader moves you into protected mode protected mode gives you your ring zero",
    "start": "2901599",
    "end": "2906880"
  },
  {
    "text": "your ring three gives you paging and things like that off to the side there's this notion of uh system management mode",
    "start": "2906880",
    "end": "2913920"
  },
  {
    "text": "and it's the bios's responsibility to put code into a location that's called system management RAM and then it's",
    "start": "2913920",
    "end": "2919960"
  },
  {
    "text": "going to lock down that Ram so that basically smm code can execute without interference from an operating system",
    "start": "2919960",
    "end": "2926119"
  },
  {
    "text": "and it sort of executes upon system management interrupts so Dixie phase is the one who's responsible for actually",
    "start": "2926119",
    "end": "2932280"
  },
  {
    "text": "instantiating smm code smm code I I should have put it on here I should have put a nice little uh evil attacker smm",
    "start": "2932280",
    "end": "2939720"
  },
  {
    "text": "is almost always to the attacker's benefit over the defender benefit",
    "start": "2939720",
    "end": "2945000"
  },
  {
    "text": "because it's an architectural place you know the way it was put is Intel created smm to allow for confidentiality and",
    "start": "2945000",
    "end": "2952079"
  },
  {
    "text": "integrity and those sound like good things that are nice right but unfortunately it's not your confidentiality and integrity it's the",
    "start": "2952079",
    "end": "2957839"
  },
  {
    "text": "platform manufacturer's confidentiality and integrity so just the way it works",
    "start": "2957839",
    "end": "2962880"
  },
  {
    "text": "is you the platform manufacturer the BIOS maker they put code in there and then that code gets locked down gets to",
    "start": "2962880",
    "end": "2968160"
  },
  {
    "text": "run in the background forever and you don't get to ever inspect it at runtime so smm is sort of the ultimate place to",
    "start": "2968160",
    "end": "2974760"
  },
  {
    "text": "hide if you look at our black hat uh black hat USA talk from earlier in the year we showed you know we just said here's a proof of concept here's a flag",
    "start": "2974760",
    "end": "2981680"
  },
  {
    "text": "in the ground here's an smm attacker here's what they could look like and you know if security vendors can't find this",
    "start": "2981680",
    "end": "2986880"
  },
  {
    "text": "then they shouldn't pretend to be giving us security so smm is sort of the it's in the Dixie phase so if you break into",
    "start": "2986880",
    "end": "2993240"
  },
  {
    "text": "the system at the Dixie phase or before then you should be able to compromise smm have this code that's invisible",
    "start": "2993240",
    "end": "2999680"
  },
  {
    "text": "running in the background capable of subverting everything forever all right the boot boot device",
    "start": "2999680",
    "end": "3007280"
  },
  {
    "text": "selection phase this is just a sort of very uh short sort of intermediate phase it's going to be a single Dixie",
    "start": "3007280",
    "end": "3014400"
  },
  {
    "text": "file so when Dixie passes off to the BDS phase it's going to be some file that handles selection of are we're going to",
    "start": "3014400",
    "end": "3020920"
  },
  {
    "text": "boot from a CD or we're going to boot from a hard drive um boot loader that kind of thing and um it decides where",
    "start": "3020920",
    "end": "3027440"
  },
  {
    "start": "3024000",
    "end": "3024000"
  },
  {
    "text": "you're going to go for next now it should be sort of if this is a boot manager if this is determining where",
    "start": "3027440",
    "end": "3032480"
  },
  {
    "text": "we're going to boot it should be clear that basically by this time of boot file",
    "start": "3032480",
    "end": "3037760"
  },
  {
    "text": "system access and uh you know potentially network access if you're going to do a network boot are all set",
    "start": "3037760",
    "end": "3043119"
  },
  {
    "text": "up and so the Dixie phase has created all of these uh these nice interfaces these abilities all these abstraction",
    "start": "3043119",
    "end": "3048760"
  },
  {
    "text": "layers for the BDS doesn't have to know how to access you know fat versus NT or",
    "start": "3048760",
    "end": "3055040"
  },
  {
    "text": "NTFS or anything else this ufi interface gets set up and it allows you to just call into um call",
    "start": "3055040",
    "end": "3062839"
  },
  {
    "text": "into apis which handle all the abstraction for you and that's why there's so many Dixie uh drivers they're",
    "start": "3062839",
    "end": "3068000"
  },
  {
    "text": "supposed to set everything up for eventually the bootloader and so the one thing I want to highlight on this picture here is that when we talk about",
    "start": "3068000",
    "end": "3074839"
  },
  {
    "text": "UEFI and it's sort of hidden in this picture the UEFI interface is basically a thing for the bootloader and you know",
    "start": "3074839",
    "end": "3081400"
  },
  {
    "text": "this other stuff in the next phase this is the interface by which stuff can call in and have all these abstractions",
    "start": "3081400",
    "end": "3088400"
  },
  {
    "text": "pre-made for it and the runtime interface is down here as well and that will persist",
    "start": "3088400",
    "end": "3093799"
  },
  {
    "text": "forever whereas the the ufi interface will go away eventually uh skip so transient load",
    "start": "3093799",
    "end": "3101040"
  },
  {
    "text": "phase this is kind of interesting because um you can have transient OS",
    "start": "3101040",
    "end": "3106599"
  },
  {
    "text": "absent applications running and so this is one thing that potentially works well for us as a security as a Defender you",
    "start": "3106599",
    "end": "3113400"
  },
  {
    "text": "can say okay well I'm going to boot my system and I'm going to start a an application that actually you know checks reads into the UEFI interface uh",
    "start": "3113400",
    "end": "3120400"
  },
  {
    "text": "does evaluations whether or not those system calls are hooked and that kind of thing um but even at this phase we have",
    "start": "3120400",
    "end": "3127319"
  },
  {
    "start": "3121000",
    "end": "3121000"
  },
  {
    "text": "it denies unsigned applications so if you want to do this you either have to whitelist your applications or you have",
    "start": "3127319",
    "end": "3133440"
  },
  {
    "text": "to sign it with one of these platform keys and so there had been you know extremely lame talks about oh look at me",
    "start": "3133440",
    "end": "3139960"
  },
  {
    "text": "I made a ufi boot kit except one of the main reasons ufi is even being used is because of secure boot it stops things",
    "start": "3139960",
    "end": "3146119"
  },
  {
    "text": "that are signed yes you can make a boot kit if the signature verification is off but that sort of is",
    "start": "3146119",
    "end": "3152920"
  },
  {
    "text": "stupid so there had been various talks there had been typical bootkits there had been boot kits running from uh ufi",
    "start": "3152920",
    "end": "3159520"
  },
  {
    "text": "um from option ROMs and things like that and if this is the general point of a bootkit we know that like there's a",
    "start": "3159520",
    "end": "3165920"
  },
  {
    "text": "standard methodology for bootkits they start early in the system but really they can't just live there they have to",
    "start": "3165920",
    "end": "3171480"
  },
  {
    "text": "sort of Bounce their way down into operating systems corrupt data structures turn off security that kind of",
    "start": "3171480",
    "end": "3177040"
  },
  {
    "text": "so that's the sort of standard methodology and you know this transient application Os Os absent application",
    "start": "3177040",
    "end": "3184799"
  },
  {
    "text": "gives us this ability that we can run security tools early pre-boot uh and you",
    "start": "3184799",
    "end": "3189960"
  },
  {
    "text": "know evaluate and assess something about the ufi uh interface as well as the operating system now this doesn't help",
    "start": "3189960",
    "end": "3196119"
  },
  {
    "text": "us at all detect smm attackers and things like that but it does help us detect you know trivial typical uh",
    "start": "3196119",
    "end": "3202559"
  },
  {
    "text": "function pointer hooking your typical rootkit type techniques",
    "start": "3202559",
    "end": "3207880"
  },
  {
    "text": "all right then there's the runtime phase and basically at some point when the boot loader is done it's going to call",
    "start": "3207880",
    "end": "3214000"
  },
  {
    "text": "exit boot Services that's an API within the uifi spec you call that API and it",
    "start": "3214000",
    "end": "3219240"
  },
  {
    "text": "basically says okay anything that is not marked as runtime accessible memory will now be recycled thrown away and only the",
    "start": "3219240",
    "end": "3226119"
  },
  {
    "text": "runtime interface should uh should maintain then there's a afterlife phase",
    "start": "3226119",
    "end": "3231760"
  },
  {
    "text": "which in reality is one of those things where they specify it they say maybe someone will use this someday but as far",
    "start": "3231760",
    "end": "3236839"
  },
  {
    "text": "as we know right now nothing's using it notionally you could think of it like the system is going to go down and you'd like to have a graceful way to maybe",
    "start": "3236839",
    "end": "3243160"
  },
  {
    "text": "clean up some information that the BIOS stored in memory all right so where does secure boot come into all of this I just whip",
    "start": "3243160",
    "end": "3250319"
  },
  {
    "text": "through all those phases quick so secure boot's job is to basically make it so that um you know",
    "start": "3250319",
    "end": "3257520"
  },
  {
    "text": "you why did Microsoft require secure boot right well because Microsoft is",
    "start": "3257520",
    "end": "3262960"
  },
  {
    "text": "having their lunch eaten by having boot kits which can turn off all the right it should be obvious that like there's no",
    "start": "3262960",
    "end": "3269480"
  },
  {
    "text": "architectural way that you can protect any operating system Windows or Linux or Mac unless you have some security pre-",
    "start": "3269480",
    "end": "3275599"
  },
  {
    "text": "bootloader because if the boot loader is accessible the boot loader can be overwritten it can compromise anything in the operating system right so what",
    "start": "3275599",
    "end": "3282079"
  },
  {
    "text": "they're trying to do is pull back the security to earlier make it so that if you want to attack it you have to go as",
    "start": "3282079",
    "end": "3287839"
  },
  {
    "text": "deep as possible and certainly we know that most attackers don't do that so the point is to pull the signature checking",
    "start": "3287839",
    "end": "3294480"
  },
  {
    "text": "back so that you can say this is the bootloader that I expected to run and this is the firmware that I expected to",
    "start": "3294480",
    "end": "3299520"
  },
  {
    "text": "run and so I'm going to reuse some Intel uh groups slides because I think they",
    "start": "3299520",
    "end": "3305280"
  },
  {
    "text": "showed it the best way so the first thing is that um firmware signing it's evaluated",
    "start": "3305280",
    "end": "3312200"
  },
  {
    "text": "typically unfortunately it's evaluated not sort of at every boot not by Hardware not in sort of an architecturally secure way it's",
    "start": "3312200",
    "end": "3318640"
  },
  {
    "text": "evaluated at the time that you're about to write something to the flash chip so maybe the existing bios checks it or",
    "start": "3318640",
    "end": "3324720"
  },
  {
    "text": "heaven forbid just you know an application within the operating system checks it some vendors had done that at",
    "start": "3324720",
    "end": "3330119"
  },
  {
    "text": "some point but the idea would be the existing bios is there it was written it was a known clean version at the time",
    "start": "3330119",
    "end": "3336359"
  },
  {
    "text": "that it left the plant the BIOS vendor checks the digital signature on an update that's about to be written to the",
    "start": "3336359",
    "end": "3342480"
  },
  {
    "text": "flash chip and then it just slaps the entire thing onto the flash chip now the thing here is if you can get onto the",
    "start": "3342480",
    "end": "3348720"
  },
  {
    "text": "flash chip because there will be no subsequent checks that means you can you know always subvert the secure boot",
    "start": "3348720",
    "end": "3355119"
  },
  {
    "text": "right from the very beginning because it doesn't check it every time it just checks it at the time that it's written",
    "start": "3355119",
    "end": "3360359"
  },
  {
    "text": "so you know the angel here would say well you know that's a necessary performance optimization that kind of",
    "start": "3360359",
    "end": "3365799"
  },
  {
    "text": "thing but you know it is what it is so then once you have this notionally",
    "start": "3365799",
    "end": "3371760"
  },
  {
    "text": "just presumed trusted contents of The Flash chip that code can then actually check if you have other applications",
    "start": "3371760",
    "end": "3378400"
  },
  {
    "text": "other bootloaders other you know option ROMs that are signed it can check the digital signatures on those each time so",
    "start": "3378400",
    "end": "3384440"
  },
  {
    "text": "that these things coming in from l trustworthy sources can actually be evaluated to to determine whether or not",
    "start": "3384440",
    "end": "3390160"
  },
  {
    "text": "they're manipulated and then ultimately Windows 8 secure boot nests on top of UEFI and they then start you know",
    "start": "3390160",
    "end": "3397039"
  },
  {
    "text": "checking their operating system loader itself so the UEFI boot loader is checked by sort of the the BIOS itself",
    "start": "3397039",
    "end": "3403440"
  },
  {
    "text": "but then the boot loader has been checked it's been confirmed to be signed and then it can pass to an operating",
    "start": "3403440",
    "end": "3408920"
  },
  {
    "text": "system specific bootloader all right so the good thing about secure boot is",
    "start": "3408920",
    "end": "3415760"
  },
  {
    "text": "that as I said it's sort of the only way that you you have to pull the security checks back to an earlier phase in order",
    "start": "3415760",
    "end": "3421319"
  },
  {
    "text": "to not have the operating systems be just architecturally subvert but uh this works in an attacker's benefit as well",
    "start": "3421319",
    "end": "3427880"
  },
  {
    "text": "because um you're going to assume that the BIOS is secure and then you're going to say well secure boot's protecting me",
    "start": "3427880",
    "end": "3433880"
  },
  {
    "text": "and then I don't need to go check my BIOS right so looks like I I'm running a little late but fast enough that I can",
    "start": "3433880",
    "end": "3440799"
  },
  {
    "text": "show you something real here so now we're going to uh pull back look at some of the type of information that's that's",
    "start": "3440799",
    "end": "3448079"
  },
  {
    "text": "an that's put on the firmware file system and you know give you a sense for now that we know these phases and what's",
    "start": "3448079",
    "end": "3454039"
  },
  {
    "text": "in them that kind of thing um now we can see what kind of stuff is all mixed",
    "start": "3454039",
    "end": "3460079"
  },
  {
    "text": "together here in the flash chip bios analysis for the detection of",
    "start": "3460079",
    "end": "3467119"
  },
  {
    "text": "advanced system subversion that's our project and I'm just going to pick a",
    "start": "3467119",
    "end": "3473119"
  },
  {
    "text": "random bios and that's what happens when you pick random biases we'll see whether it works though",
    "start": "3473119",
    "end": "3480599"
  },
  {
    "text": "nope I think the X1",
    "start": "3481240",
    "end": "3485359"
  },
  {
    "text": "Works no all right so I'm going to zoom in so",
    "start": "3486960",
    "end": "3492920"
  },
  {
    "text": "that things will actually be visible to you but all right this is some examples of",
    "start": "3492920",
    "end": "3498559"
  },
  {
    "text": "what kind of stuff we see down at the BIOS level just if I'm an attacker or I'm a Defender wait which one is my zoom",
    "start": "3498559",
    "end": "3505119"
  },
  {
    "text": "there we go sorry for the pixelation but there's our Dixie main so that's going to be the first code that actually",
    "start": "3505119",
    "end": "3510359"
  },
  {
    "text": "executes and then we have things like system runtime Dixie system error log Dixie flash verify smm okay if I'm an",
    "start": "3510359",
    "end": "3518000"
  },
  {
    "text": "attacker and I want to subvert smm maybe if I subvert The Flash verify smm I'm going to just for free be able to get in",
    "start": "3518000",
    "end": "3524400"
  },
  {
    "text": "there Coss access from X smm cosos access from Dixie uh system variable",
    "start": "3524400",
    "end": "3530079"
  },
  {
    "text": "from smm monotonic counters so basically if I'm an attacker I go through here and",
    "start": "3530079",
    "end": "3536240"
  },
  {
    "text": "I say okay what am I trying to attack today USB network access keyboard controller and I just have these nice",
    "start": "3536240",
    "end": "3542920"
  },
  {
    "text": "welln named human readable names where I can sort of get a shortcut to access",
    "start": "3542920",
    "end": "3548680"
  },
  {
    "text": "whatever I want at compromise but this works for us as Defenders because when we go out and we you know slice this",
    "start": "3548680",
    "end": "3554160"
  },
  {
    "text": "bios apart do hashing on each of these for my clean version and my dirty version um I can tell you specifically",
    "start": "3554160",
    "end": "3560559"
  },
  {
    "text": "that you know you had a modification in here I can pull out the specific portable executable file and then I can",
    "start": "3560559",
    "end": "3566119"
  },
  {
    "text": "parse its headers and I can uh get additional information so as I expected I'd be",
    "start": "3566119",
    "end": "3572880"
  },
  {
    "text": "going long but um couple last things",
    "start": "3572880",
    "end": "3579838"
  },
  {
    "text": "subzero.com",
    "start": "3580359",
    "end": "3583359"
  },
  {
    "text": "parser and he's made it I I like this sometimes when I'm on a machine where uh I don't want to install all the python",
    "start": "3589559",
    "end": "3595680"
  },
  {
    "text": "prere requisites and get everything compiled I just like throw throw something into",
    "start": "3595680",
    "end": "3601720"
  },
  {
    "text": "subzero.com output about whether or not your bios is vulnerable and he's uh put that up there as well so basically we're",
    "start": "3607359",
    "end": "3614760"
  },
  {
    "text": "we're starting to work with him on the site and it's going to be basically a way to crowdsource a determination of okay well if a 100 different people have",
    "start": "3614760",
    "end": "3621000"
  },
  {
    "text": "submitted a you know Lenovo X1 Carbon at bios rvision 2.56 then we can say",
    "start": "3621000",
    "end": "3626960"
  },
  {
    "text": "well 99 of those guys said that the hash for this particular thing was this",
    "start": "3626960",
    "end": "3632119"
  },
  {
    "text": "particular value but one person is an outlier and one person has a different hash than everybody else and so we can",
    "start": "3632119",
    "end": "3638359"
  },
  {
    "text": "start you know pulling some notion of what's good and what's bad so you can go check out that site subzero.com",
    "start": "3638359",
    "end": "3646880"
  },
  {
    "text": "you You Know You're vulnerable or you're not but you can also just uh hit a little script and it'll submit it up so that we can start getting that",
    "start": "3656039",
    "end": "3661680"
  },
  {
    "text": "crowdsource notion of uh bios clean or not what",
    "start": "3661680",
    "end": "3667359"
  },
  {
    "text": "subzero.com",
    "start": "3668319",
    "end": "3671319"
  },
  {
    "text": "video where I'm sort of going through the process process and saying here's my clean version here's my dirty version",
    "start": "3683440",
    "end": "3688559"
  },
  {
    "text": "run bios diff hey there's a change let me look at the raw change in bytes let me pull the two PE files put them into",
    "start": "3688559",
    "end": "3694400"
  },
  {
    "text": "Ida uh you know analyze them and most importantly use those data structures that exist and are already well",
    "start": "3694400",
    "end": "3700640"
  },
  {
    "text": "understood from the ufi spec very very nice capability within Ida to import",
    "start": "3700640",
    "end": "3705960"
  },
  {
    "text": "header files just standard C header files and then apply those data structures to uh the BIOS and then that",
    "start": "3705960",
    "end": "3712240"
  },
  {
    "text": "makes it so that when you use uh hex-rays in order to decompile stuff it makes for very human readable code for",
    "start": "3712240",
    "end": "3719079"
  },
  {
    "text": "some value of human readable so in conclusion I'll let you decide who the who the angel is and who the victim is",
    "start": "3719079",
    "end": "3725599"
  },
  {
    "text": "here but um the angel said unto him UEFI said unto him stop hitting yourself stop",
    "start": "3725599",
    "end": "3730920"
  },
  {
    "text": "hitting yourself so ufi brings uh improvements for boot time security so that um you",
    "start": "3730920",
    "end": "3739200"
  },
  {
    "text": "have some ability architecturally to actually get rid of um these boot level attackers who are just completely",
    "start": "3739200",
    "end": "3744640"
  },
  {
    "text": "subverting uh operating systems otherwise um and cernus has made it so",
    "start": "3744640",
    "end": "3750000"
  },
  {
    "text": "that we have a tool now it's freely available you can just go out and download it run it you can start having",
    "start": "3750000",
    "end": "3756240"
  },
  {
    "text": "some notion of whether or not your system is vulnerable because for many years people would do bios attack talks",
    "start": "3756240",
    "end": "3761440"
  },
  {
    "text": "and they'd say well smm is vulnerable if this bit is not set and then you'd ask them well are you going to release a",
    "start": "3761440",
    "end": "3766839"
  },
  {
    "text": "tool that checks that bit so like I know whether I'm vulnerable or not and they say no no that's so easy you just do it yourself well Copernicus now has",
    "start": "3766839",
    "end": "3774039"
  },
  {
    "text": "combined all of the information that is current Cy known about bios vulnerabilities whether they're exploitable vulnerabilities or whether",
    "start": "3774039",
    "end": "3779680"
  },
  {
    "text": "they're just misconfigurations and it gives us this ability to dump the BIOS compare it against other things so we",
    "start": "3779680",
    "end": "3786079"
  },
  {
    "text": "now actually have this nice standardized way if we tried to do this for the Legacy bioses we would run into this",
    "start": "3786079",
    "end": "3791200"
  },
  {
    "text": "whole Quagmire of how do we decompress all of the random formats so that's why it only supports ufi and newer stuff for",
    "start": "3791200",
    "end": "3798160"
  },
  {
    "text": "now um and that's going to be it so with that I'll take any questions out to the",
    "start": "3798160",
    "end": "3804799"
  },
  {
    "text": "side afterwards let people get set up for the next speaker I saw the next talk earlier so uh I think you should check",
    "start": "3804799",
    "end": "3811279"
  },
  {
    "text": "out rafal's talk next but anyone else you're free to go",
    "start": "3811279",
    "end": "3817119"
  },
  {
    "text": "[Applause]",
    "start": "3819100",
    "end": "3823940"
  },
  {
    "text": "thanks for",
    "start": "3834720",
    "end": "3838760"
  }
]