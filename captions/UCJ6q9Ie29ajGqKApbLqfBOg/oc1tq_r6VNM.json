[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "hey can everyone hear me in the back yeah that's awesome so thank you for",
    "start": "7820",
    "end": "13139"
  },
  {
    "text": "joining and this is Joel Ben high and today we're going to try to answer a simple",
    "start": "13139",
    "end": "18359"
  },
  {
    "text": "question does a single container Escape allow an attacker to take over an entire",
    "start": "18359",
    "end": "23400"
  },
  {
    "text": "kubernetes cluster and we hope that by answering it we can share some insight that we learned into kubernetes",
    "start": "23400",
    "end": "28980"
  },
  {
    "text": "privilege escalation so a bit about ourselves we are Cloud together researchers from Palo Alto networks so",
    "start": "28980",
    "end": "35040"
  },
  {
    "text": "we do vulnerability research and Freight hunting in the cloud so searching for vulnerabilities in infrastructure",
    "start": "35040",
    "end": "41399"
  },
  {
    "text": "components of the cloud and also in cloud service providers and we also look for a threat groups that Target Cloud",
    "start": "41399",
    "end": "47760"
  },
  {
    "text": "environments specifically so that's enough about yourself our agenda for today we're going to start",
    "start": "47760",
    "end": "53579"
  },
  {
    "text": "off by talking about container escape this thread that we keep hearing about and try to really understand what's the",
    "start": "53579",
    "end": "60600"
  },
  {
    "text": "actual blast radius we'll then do a quick kubernetes 101 just to get everyone on the same page",
    "start": "60600",
    "end": "67320"
  },
  {
    "text": "we'll continue to talk about what happens after a container Escape what resources does an attacker have to",
    "start": "67320",
    "end": "72780"
  },
  {
    "text": "spread in the cluster and will see several attack classes that attackers can abuse in order to escalate",
    "start": "72780",
    "end": "78540"
  },
  {
    "text": "privileges will then have enough resources in order to answer our question does the",
    "start": "78540",
    "end": "84780"
  },
  {
    "text": "container Escape equal full cluster compromise and we'll answer it both generally but also specifically in the",
    "start": "84780",
    "end": "91380"
  },
  {
    "text": "most popular kubernetes platforms today we'll wrap it up with by talking about some of the fixes that the affected",
    "start": "91380",
    "end": "97140"
  },
  {
    "text": "platforms put out and we'll also uh talk about some takeaways that you can take from this presentation",
    "start": "97140",
    "end": "103860"
  },
  {
    "text": "so with that I'll place the mic to show to talk about container escapes",
    "start": "103860",
    "end": "109560"
  },
  {
    "text": "thank you Val hello everyone let's start to talk about the container Escape",
    "start": "109560",
    "end": "115259"
  },
  {
    "text": "so ever ever since container came into our life we've been hearing more and more about container Escape in a sense",
    "start": "115259",
    "end": "121380"
  },
  {
    "text": "of vulnerability kernel vulnerability misconfiguration uh vulnerability in",
    "start": "121380",
    "end": "127680"
  },
  {
    "text": "Docker and kubernetes and here we're here in Black a few years ago there was a great talk about container Escape",
    "start": "127680",
    "end": "134879"
  },
  {
    "text": "so the obvious question is do container actually contain",
    "start": "134879",
    "end": "141180"
  },
  {
    "text": "there is no doubt that containers are great for packaging and deploying software this is the reason why we all",
    "start": "141180",
    "end": "146879"
  },
  {
    "text": "use them but their work security boundary mostly because of the shared kernel in a",
    "start": "146879",
    "end": "152879"
  },
  {
    "text": "nutshell the same Linux kernel vulnerability that allow unprivileged user to become a root can often use to",
    "start": "152879",
    "end": "159840"
  },
  {
    "text": "escape from container and take over the underlying host that's because the Linux kernel attack",
    "start": "159840",
    "end": "165959"
  },
  {
    "text": "surface is simply too big and we probably continue to see more and more variant of container Escape",
    "start": "165959",
    "end": "173180"
  },
  {
    "text": "only in 2022 we introduced at least a dozen vulnerability of container Escape",
    "start": "173180",
    "end": "178440"
  },
  {
    "text": "but escaping from a container can also happen because of misconfiguration the most known wire is privileged container",
    "start": "178440",
    "end": "184980"
  },
  {
    "text": "with access to the host we also introduce a trade actors that exploiting container escape to spread in",
    "start": "184980",
    "end": "192420"
  },
  {
    "text": "the Victor environment for crypto mining for example so we understand that container Escape",
    "start": "192420",
    "end": "199860"
  },
  {
    "text": "will probably continue to happen and it's here to stay so we must understand what is the impact",
    "start": "199860",
    "end": "208200"
  },
  {
    "text": "the obvious impact in kubernetes at least is a compromise node an attacker",
    "start": "208200",
    "end": "213420"
  },
  {
    "text": "will previously compromise one container or one pods and now has a control over the entire node probably for more",
    "start": "213420",
    "end": "220560"
  },
  {
    "text": "business logic or more Computer Resources for crypto mining for example",
    "start": "220560",
    "end": "226620"
  },
  {
    "text": "but just imagine that our attacker is an ambitious one and it might be not",
    "start": "226620",
    "end": "232319"
  },
  {
    "text": "satisfied with only single compromise node it'd be maybe might want to take",
    "start": "232319",
    "end": "237540"
  },
  {
    "text": "over the entire the entire cluster and this is the question we will try to",
    "start": "237540",
    "end": "243120"
  },
  {
    "text": "answer today if a scenario of a single container Escape could be escalated to",
    "start": "243120",
    "end": "248459"
  },
  {
    "text": "full cluster admin access and if you are asking yourself what is the motivation",
    "start": "248459",
    "end": "253980"
  },
  {
    "text": "you may want to take over other services or databases or even get some credential",
    "start": "253980",
    "end": "259260"
  },
  {
    "text": "secrets to try to spread out outside our cluster to add other interesting environments",
    "start": "259260",
    "end": "266900"
  },
  {
    "text": "just a quick terminology we're going to use today two terms admin and admin",
    "start": "267120",
    "end": "272759"
  },
  {
    "text": "equivalent when we'll say admin one meaning that you can do any kind of operation all all the namespaces",
    "start": "272759",
    "end": "280680"
  },
  {
    "text": "and admin equivalent is mean that you have enough permission that in one or",
    "start": "280680",
    "end": "285960"
  },
  {
    "text": "two trivial steps you can become an admin but",
    "start": "285960",
    "end": "291720"
  },
  {
    "text": "just before we continue we will do some quick kubernetes 101 just to make sure",
    "start": "291720",
    "end": "297180"
  },
  {
    "text": "that we are all on the on the same page so in a one sentence kubernetes",
    "start": "297180",
    "end": "303419"
  },
  {
    "text": "orchestrated POD containers on an old on virtual machine and basically today it's everywhere",
    "start": "303419",
    "end": "310280"
  },
  {
    "text": "mostly heavily using Linux workload mostly on cloud on-prem and it's very interesting environment for an attacker",
    "start": "310280",
    "end": "317699"
  },
  {
    "text": "we have the API server which is the cluster Gateway or brain and user can",
    "start": "317699",
    "end": "323820"
  },
  {
    "text": "communicate with API server using kubernetes using Cube cattle the kubernetes CLI",
    "start": "323820",
    "end": "330240"
  },
  {
    "text": "tool then the API will schedule a pod under on the underlying node",
    "start": "330240",
    "end": "337800"
  },
  {
    "text": "and we'll operate this kind of operation a little bit about authentication you",
    "start": "337800",
    "end": "343919"
  },
  {
    "text": "can either authenticate using certificate this is how user and nodes are authenticated or you can use service",
    "start": "343919",
    "end": "350100"
  },
  {
    "text": "account token this is how pods authenticate and a little bit about authorization",
    "start": "350100",
    "end": "356479"
  },
  {
    "text": "permission expressed in kubernetes as a verbs and resources likely secret create",
    "start": "356479",
    "end": "361800"
  },
  {
    "text": "a pod update node delete services and so on and those permission group into a",
    "start": "361800",
    "end": "367740"
  },
  {
    "text": "wall and when you want to Grant a permission to some identity you use a",
    "start": "367740",
    "end": "373080"
  },
  {
    "text": "roll biting to do this and if it was a little bit complicated",
    "start": "373080",
    "end": "379919"
  },
  {
    "text": "let's do a quick example here we have our wall who can list services and list spot and we want to",
    "start": "379919",
    "end": "387360"
  },
  {
    "text": "Grant this permission to our identity to our pod so we will bind this role to the service account and",
    "start": "387360",
    "end": "394139"
  },
  {
    "text": "when the Pod will running it will use this this token in in our case you can",
    "start": "394139",
    "end": "399960"
  },
  {
    "text": "list services and list spots so that's enough for the kubernetes one",
    "start": "399960",
    "end": "405000"
  },
  {
    "text": "on one",
    "start": "405000",
    "end": "407300"
  },
  {
    "text": "back to our research let's try to understand now what will happen",
    "start": "411360",
    "end": "417840"
  },
  {
    "text": "once an attacker can escape from Escape from container so before uh in order to do that to do",
    "start": "417840",
    "end": "425759"
  },
  {
    "text": "so we need to understand which kind of credentials we have in our node",
    "start": "425759",
    "end": "431039"
  },
  {
    "text": "so the first is the cubelet permission the cubelete is the node agent who can manage and facilitate all the",
    "start": "431039",
    "end": "438720"
  },
  {
    "text": "facilitate the node so obviously as a set of formation that allow you to do this",
    "start": "438720",
    "end": "444060"
  },
  {
    "text": "but fortunately kubernetes restricted the cubelet permission and if you if we",
    "start": "444060",
    "end": "450000"
  },
  {
    "text": "are talking about meaningful attack so the cubelet is not the address it's",
    "start": "450000",
    "end": "455160"
  },
  {
    "text": "true an attacker can manage to perform some limited attack like denial of",
    "start": "455160",
    "end": "460680"
  },
  {
    "text": "service or maybe to get some primitive read or something like this but if we",
    "start": "460680",
    "end": "466560"
  },
  {
    "text": "are talking about meaningful attack like full cluster admin so the cubelet is not the address",
    "start": "466560",
    "end": "472380"
  },
  {
    "text": "but there are also another set of credentials on the Node which is the service account of the neighbor pods",
    "start": "472380",
    "end": "481199"
  },
  {
    "text": "and the permission of value because it's depend on which application running on your ports it depends on your nodes and",
    "start": "481199",
    "end": "488460"
  },
  {
    "text": "depending on which platform you are running your own cluster so an attacker might be it might be not",
    "start": "488460",
    "end": "496199"
  },
  {
    "text": "has a way to to succeed a powerful permission but at least he has a chance",
    "start": "496199",
    "end": "504620"
  },
  {
    "text": "because the cubelet permission will be the same restricted permission on every",
    "start": "504620",
    "end": "510180"
  },
  {
    "text": "single node and today we're going to talk about this",
    "start": "510180",
    "end": "517740"
  },
  {
    "text": "scenario exactly where we have extremely powerful pod and we name it trampoline",
    "start": "517740",
    "end": "523440"
  },
  {
    "text": "pod that can have enough permission that can bounce you to around the cluster to jump",
    "start": "523440",
    "end": "531180"
  },
  {
    "text": "to other node to get some high privilege and basically let the attacker have some fun in your cluster",
    "start": "531180",
    "end": "538100"
  },
  {
    "text": "so where those trampoline pods can be",
    "start": "538580",
    "end": "544260"
  },
  {
    "text": "let's see which kind of part are running in our typical average node",
    "start": "544260",
    "end": "549600"
  },
  {
    "text": "first the application like redis engines mongodb or our python or golang",
    "start": "549600",
    "end": "557519"
  },
  {
    "text": "application then commonly kubernetes we have the add-ons like Ezio for service smash or",
    "start": "557519",
    "end": "565140"
  },
  {
    "text": "parameters for login or upper gatekeeper or convert for policy enforcement",
    "start": "565140",
    "end": "570959"
  },
  {
    "text": "and finally finally there is the system pod the infrastructure Port like Q proxy",
    "start": "570959",
    "end": "576899"
  },
  {
    "text": "and core DNS and those spots was already there when we are setting up our cluster and",
    "start": "576899",
    "end": "584940"
  },
  {
    "text": "it basically depends on which platform we are running your cluster so as you already know this the system",
    "start": "584940",
    "end": "592680"
  },
  {
    "text": "pod and in some scenario also the add-on pods are quite a blind spot because we",
    "start": "592680",
    "end": "598740"
  },
  {
    "text": "didn't manage them configuration laughs add-on spots we just installed add-on",
    "start": "598740",
    "end": "606180"
  },
  {
    "text": "spots using a package manager like helpful example and the author of The add-ons configure them permission",
    "start": "606180",
    "end": "613500"
  },
  {
    "text": "and for system pods there was already there when the cluster was created so of course we didn't",
    "start": "613500",
    "end": "621180"
  },
  {
    "text": "control or made it them permission and another interesting thing about",
    "start": "621180",
    "end": "628920"
  },
  {
    "text": "system pods and in some scenario also the add-on spots that the deploy and",
    "start": "628920",
    "end": "634019"
  },
  {
    "text": "install as a demon set which means they are running on every single node in our cluster",
    "start": "634019",
    "end": "641360"
  },
  {
    "text": "foreign so if a trampoline pods not installed as",
    "start": "644579",
    "end": "651540"
  },
  {
    "text": "a demon said is running only on one node in our cluster",
    "start": "651540",
    "end": "657480"
  },
  {
    "text": "so if an attacker has escaped from a certain node it may be maybe and maybe not",
    "start": "657480",
    "end": "664140"
  },
  {
    "text": "will be on the Node that hosts this trampoline pods and it's 50 50 percent",
    "start": "664140",
    "end": "670920"
  },
  {
    "text": "and maybe less because it's depends on the number of PODS that's running on your cluster",
    "start": "670920",
    "end": "676200"
  },
  {
    "text": "but if a trample Imports deploy and install as a demon set an attacker",
    "start": "676200",
    "end": "681240"
  },
  {
    "text": "guarantee to hit a jackpot because every single node in our cluster will run this",
    "start": "681240",
    "end": "687180"
  },
  {
    "text": "trampoline pods so",
    "start": "687180",
    "end": "694500"
  },
  {
    "text": "the answer the answer for our main question today if a single container Escape could be escalated to full",
    "start": "694500",
    "end": "700860"
  },
  {
    "text": "cluster admins there the answer found in those trampoline pods that running on",
    "start": "700860",
    "end": "706079"
  },
  {
    "text": "every single node in our cluster so I'll switch it back to your valve",
    "start": "706079",
    "end": "712519"
  },
  {
    "text": "is my MacBook oh awesome so actually said after the container escaped our golden",
    "start": "712800",
    "end": "719220"
  },
  {
    "text": "ticket to escalate privileges it relies on trampoline demon sets so we went out",
    "start": "719220",
    "end": "724620"
  },
  {
    "text": "and tried to find where those trampolines may be so this is how it looks like we looked into the most popular kubernetes platforms and looked",
    "start": "724620",
    "end": "731640"
  },
  {
    "text": "into their infrastructure pods and this is an actual example we saw a pause that can list secrets and delete pods create",
    "start": "731640",
    "end": "738540"
  },
  {
    "text": "config maps and update the status of nodes and we looked at those permissions and we tried to ask ourselves is this",
    "start": "738540",
    "end": "745800"
  },
  {
    "text": "spot powerful are we looking at the trampoline and we quickly realized that we don't we don't know we don't have the",
    "start": "745800",
    "end": "751680"
  },
  {
    "text": "resources we looked into the kubernetes documentations we tried Googling it we looked into previous security talks",
    "start": "751680",
    "end": "758160"
  },
  {
    "text": "about kubernetes and we quickly realized that there is actually no public list of powerful permissions in kubernetes",
    "start": "758160",
    "end": "765660"
  },
  {
    "text": "now that is actually quite scary because without knowing which permissions are powerful you can't really answer basic",
    "start": "765660",
    "end": "772500"
  },
  {
    "text": "questions about privilege escalation right if I'm a Defender I can't really know if my publicly exposed pod can",
    "start": "772500",
    "end": "779160"
  },
  {
    "text": "actually escalate privileges if I don't know if its permissions are powerful and as an attacker once I get a set of",
    "start": "779160",
    "end": "785839"
  },
  {
    "text": "compromise credentials I can't tell if they're valuable or not if I don't know which permissions are powerful right",
    "start": "785839",
    "end": "792660"
  },
  {
    "text": "so we started walking and trying to figure out which permissions are actually powerful in kubernetes and we quickly realized that a lot of",
    "start": "792660",
    "end": "798959"
  },
  {
    "text": "permissions that we thought are quite benign were actually quite interesting if you use them in a creative way",
    "start": "798959",
    "end": "804720"
  },
  {
    "text": "so the other approach to go about this is that we first defined what our interest in attack classes in kubernetes",
    "start": "804720",
    "end": "811079"
  },
  {
    "text": "in our view that can allow you to get meaningful previous escalation and then we classify we looked over all",
    "start": "811079",
    "end": "817800"
  },
  {
    "text": "of the permissions in kubernetes and classified them based on the attack classes that they can enable",
    "start": "817800",
    "end": "823260"
  },
  {
    "text": "and this is the mapping that we came up with we came up with four attack classes",
    "start": "823260",
    "end": "829260"
  },
  {
    "text": "about 20 something permissions mapped into each one now we won't go into every",
    "start": "829260",
    "end": "835019"
  },
  {
    "text": "permission how it enables the attack we have an actual a report that is published alongside the stock where you",
    "start": "835019",
    "end": "840899"
  },
  {
    "text": "can see how each permissions enable the attack but those are the permissions that we identified and we look at an",
    "start": "840899",
    "end": "847079"
  },
  {
    "text": "example for each attack class in order to make them mobile so let's start off",
    "start": "847079",
    "end": "852480"
  },
  {
    "text": "with permissions that allow you to manipulate authentication or laterization those are extremely",
    "start": "852480",
    "end": "857700"
  },
  {
    "text": "powerful permission that actually allows you to either impersonate other user or to change your permission so freely",
    "start": "857700",
    "end": "864300"
  },
  {
    "text": "manipulate the authorization of the cluster a one example for that would be the permission to escalate roles that",
    "start": "864300",
    "end": "871079"
  },
  {
    "text": "permission allow you to add new permissions to existing roles so if I'm an attacker and I have a token which can",
    "start": "871079",
    "end": "877440"
  },
  {
    "text": "escalate roles I can simply go to the role of my service account and edit all the permissions in the cluster which are",
    "start": "877440",
    "end": "884100"
  },
  {
    "text": "denoted by this wildcard notation and then immediately after I'm doing that my token gets all of the permissions which",
    "start": "884100",
    "end": "892019"
  },
  {
    "text": "is the beautifully illustrated by the token getting larger",
    "start": "892019",
    "end": "897120"
  },
  {
    "text": "the next attack class that we're going to talk about is permissions that allow you to acquire service account tokens so",
    "start": "897120",
    "end": "903540"
  },
  {
    "text": "either retrieve existing or issue new service account tokens now what's the",
    "start": "903540",
    "end": "908639"
  },
  {
    "text": "impact here well it depends which service account you can issue tokens for right if you can issue tokens for",
    "start": "908639",
    "end": "914760"
  },
  {
    "text": "powerful service accounts then you got yourself a meaningful privilege escalation if you can only let's say",
    "start": "914760",
    "end": "920459"
  },
  {
    "text": "retrieve tokens of weak service account that's not very interesting now",
    "start": "920459",
    "end": "926160"
  },
  {
    "text": "a very notorious permission in kubernetes that allows you to in this case the three of existing service",
    "start": "926160",
    "end": "932220"
  },
  {
    "text": "account is the permission to list Secrets a service account in kubernetes up until now",
    "start": "932220",
    "end": "938480"
  },
  {
    "text": "we're stored as service account tokens it was stored as secrets in the API",
    "start": "938480",
    "end": "944160"
  },
  {
    "text": "server so if you can actually list secrets you can simply retrieve service account tokens and then use them to",
    "start": "944160",
    "end": "950160"
  },
  {
    "text": "authenticate to the API server and as I've said if you get yourself a token for a powerful service account you just",
    "start": "950160",
    "end": "956639"
  },
  {
    "text": "escalated privileges the next attack class you're probably familiar with it from other system is",
    "start": "956639",
    "end": "963420"
  },
  {
    "text": "obviously permissions that allow you to execute code either on pods on all nodes in this case you're not necessarily",
    "start": "963420",
    "end": "969959"
  },
  {
    "text": "escalating your privileges right it really depends on the permissions of the Pod that you are taking over but you",
    "start": "969959",
    "end": "976680"
  },
  {
    "text": "probably get yourself more compute resources right uh maybe more business logic and as I've said possibly",
    "start": "976680",
    "end": "982620"
  },
  {
    "text": "escalating your privileges let's look at an interesting example for such a permission",
    "start": "982620",
    "end": "987839"
  },
  {
    "text": "it has a pretty confusing name it creates the proxy sub-resource of nodes",
    "start": "987839",
    "end": "993240"
  },
  {
    "text": "doesn't really tell us much but it basically means that we can control cubelets we can simply tell them what to",
    "start": "993240",
    "end": "999420"
  },
  {
    "text": "do and tell them hey please execute code on your pod one interesting thing about",
    "start": "999420",
    "end": "1004759"
  },
  {
    "text": "this permission that is you actually don't go through the API server which normally has all of the login and",
    "start": "1004759",
    "end": "1010639"
  },
  {
    "text": "auditing mechanism in the cluster so you may be able to bypass some detections",
    "start": "1010639",
    "end": "1016160"
  },
  {
    "text": "now the final attack class that we're going to talk about today and it's my personal favorite",
    "start": "1016160",
    "end": "1021380"
  },
  {
    "text": "permissions that allow you to steal pods basically move existing pods from one node in the cluster to another and why",
    "start": "1021380",
    "end": "1028579"
  },
  {
    "text": "would that be interesting if we assume that we already compromise the node in the cluster we may we might want to",
    "start": "1028579",
    "end": "1034459"
  },
  {
    "text": "bring other parts to our node maybe because they host interesting business logic that we want to take control of",
    "start": "1034459",
    "end": "1041418"
  },
  {
    "text": "them but in the case of this talk it's probably because those pods have powerful service account and if we bring",
    "start": "1041419",
    "end": "1048319"
  },
  {
    "text": "them over to our node where they are going to come with their powerful service account token which we can then",
    "start": "1048319",
    "end": "1053780"
  },
  {
    "text": "abuse to escalate preferences so we started with this by oh let's see an example yeah",
    "start": "1053780",
    "end": "1060860"
  },
  {
    "text": "um this is a slightly more complex example it takes two permission to carry out the attack the first permission is",
    "start": "1060860",
    "end": "1066980"
  },
  {
    "text": "the update node status permission and the second permission is the delete pause permission",
    "start": "1066980",
    "end": "1072020"
  },
  {
    "text": "now this is actually a great example of how permissions it might look not very powerful can actually be abused when you",
    "start": "1072020",
    "end": "1078860"
  },
  {
    "text": "first look at those permissions you might think that you'll be able to get some maybe denial of service by deleting",
    "start": "1078860",
    "end": "1084020"
  },
  {
    "text": "pods but they can actually be used to steal pods and let's see how in this case we assume that we already",
    "start": "1084020",
    "end": "1090740"
  },
  {
    "text": "escaped a container and compromise the node and we have a very powerful pod and operator on another node in the cluster",
    "start": "1090740",
    "end": "1096679"
  },
  {
    "text": "which we want to bring over what we'll do is we'll first use the permission to update the status of nodes",
    "start": "1096679",
    "end": "1103220"
  },
  {
    "text": "to set the Pod capacity of all the other nodes in the cluster to zero which we are basically making them unschedulable",
    "start": "1103220",
    "end": "1110240"
  },
  {
    "text": "the next step is going to be to delete the operator pod and now when kubernetes has to recreate that operator pod it",
    "start": "1110240",
    "end": "1118100"
  },
  {
    "text": "will conveniently have to create it on our node because it's the only scheduled node in the cluster and we successfully",
    "start": "1118100",
    "end": "1125179"
  },
  {
    "text": "brought the operator pod over with its powerful service account token so that's how you still pause",
    "start": "1125179",
    "end": "1132140"
  },
  {
    "text": "and if you remember we started talking about kubernetes attack classes to Define what trample and what powerful",
    "start": "1132140",
    "end": "1137720"
  },
  {
    "text": "pods are so trampolines are powerful pods with permission to either manipulate",
    "start": "1137720",
    "end": "1143120"
  },
  {
    "text": "authentication or authorization acquire powerful service account tokens execute code on pods over nodes",
    "start": "1143120",
    "end": "1150980"
  },
  {
    "text": "and steal other pods in the cluster because those sets of permission actually get you a real shot of getting",
    "start": "1150980",
    "end": "1157460"
  },
  {
    "text": "clustered admin myself talk about a few subjects let's",
    "start": "1157460",
    "end": "1163580"
  },
  {
    "text": "try to do a quick recap we started off by talking about container escapes and understanding they",
    "start": "1163580",
    "end": "1170240"
  },
  {
    "text": "are likely going to continue to happen we then talked about how their impact largely is dictated by the presence of",
    "start": "1170240",
    "end": "1177500"
  },
  {
    "text": "powerful PODS of trampoline on the compromise node right and we Define what are powerful pods",
    "start": "1177500",
    "end": "1183799"
  },
  {
    "text": "we also talked about how trampoline demon sets install those trampolines onto every",
    "start": "1183799",
    "end": "1189500"
  },
  {
    "text": "single node in your cluster so if you want to really answer whether a single container Escape actually",
    "start": "1189500",
    "end": "1195980"
  },
  {
    "text": "equals cluster admin what we're really asking is are there trampoline demon sets in the cluster who installed them",
    "start": "1195980",
    "end": "1202760"
  },
  {
    "text": "out of the common and so on and that's really what we try to do in this research we looked into the most",
    "start": "1202760",
    "end": "1208880"
  },
  {
    "text": "popular kubernetes platforms some of you are probably going to probably users of those platforms and we looked for",
    "start": "1208880",
    "end": "1214520"
  },
  {
    "text": "trampoline demon sets the platforms we looked into are mostly the infrastructure layer so manage",
    "start": "1214520",
    "end": "1220820"
  },
  {
    "text": "kubernetes services like AKs gke eks openshift and we also looked into a",
    "start": "1220820",
    "end": "1227299"
  },
  {
    "text": "container network interfaces basically the network infrastructure of the cluster and we looked into",
    "start": "1227299",
    "end": "1232880"
  },
  {
    "text": "popular projects like Calico Andrea psyllium and webnet and what we found when we looked at this",
    "start": "1232880",
    "end": "1239600"
  },
  {
    "text": "pro at those projects back in February of this year is that most of them actually install",
    "start": "1239600",
    "end": "1245120"
  },
  {
    "text": "trampoline demon sets by default another 12 installed them given a popular feature was enabled those are actually",
    "start": "1245120",
    "end": "1252860"
  },
  {
    "text": "this is actually a breakdown of the trample in Demon sets back in February in each of those platforms and",
    "start": "1252860",
    "end": "1260840"
  },
  {
    "text": "so you can see which platform had powerful demon sets which were those demon sets and what were the powerful",
    "start": "1260840",
    "end": "1266720"
  },
  {
    "text": "permissions again we have a report with all of the details so you don't need to take pictures right now unless you really",
    "start": "1266720",
    "end": "1273740"
  },
  {
    "text": "want to um so we looked at those demon sets and tried to understand how powerful are",
    "start": "1273740",
    "end": "1280460"
  },
  {
    "text": "they could they really allow you to get a full cluster admin by default and in half the platforms that was",
    "start": "1280460",
    "end": "1287000"
  },
  {
    "text": "actually the case in half the platforms that we looked into the answer to our main question was yes a single container",
    "start": "1287000",
    "end": "1292700"
  },
  {
    "text": "Escape allows you to take over the entire cluster in another 25 there were some prerequisites and for example some",
    "start": "1292700",
    "end": "1301280"
  },
  {
    "text": "feature being enabled so we got a mostly definitive end cells for",
    "start": "1301280",
    "end": "1308600"
  },
  {
    "text": "those platforms now I do want to say if any one of you is running those platforms you don't need to panic or",
    "start": "1308600",
    "end": "1314720"
  },
  {
    "text": "something like that this isn't an annotated RC right there is a large prerequisites of a container Escape",
    "start": "1314720",
    "end": "1320720"
  },
  {
    "text": "happening um but it's also something to note to get your cluster security to the next",
    "start": "1320720",
    "end": "1327799"
  },
  {
    "text": "level so let's see how an actual attack on one of those popular platform looks like",
    "start": "1327799",
    "end": "1334220"
  },
  {
    "text": "so we couldn't obviously demo all of the attacks the ones we're going to see is oncillium which is a very popular",
    "start": "1334220",
    "end": "1341120"
  },
  {
    "text": "container network interface it is what's power in the new data plane in a Google kubernetes engine the reason why we",
    "start": "1341120",
    "end": "1348440"
  },
  {
    "text": "chose syllium is that because it showcases a number of attack classes and also Silo maintenance did a great job of",
    "start": "1348440",
    "end": "1354080"
  },
  {
    "text": "fixing every one of the things that we're going to show here today so what is the scenario in psyllium",
    "start": "1354080",
    "end": "1360400"
  },
  {
    "text": "installs two interesting components to the cluster one is the psyllium demon set a trampoline demon sets that can",
    "start": "1360400",
    "end": "1366980"
  },
  {
    "text": "actually delete pods and update the status of nodes and those permissions if you remember allow you to steal pods",
    "start": "1366980",
    "end": "1373340"
  },
  {
    "text": "the second thing that the film installed is the psyllium operator pod which can actually list Secrets which as we",
    "start": "1373340",
    "end": "1378860"
  },
  {
    "text": "mentioned earlier allows you to acquire tokens now I want a toxic level here is that we",
    "start": "1378860",
    "end": "1384320"
  },
  {
    "text": "managed to compromise a pod and breakout so we have a node under our control and",
    "start": "1384320",
    "end": "1389480"
  },
  {
    "text": "our goal is to get cluster admin so get control over all of the nodes in the cluster",
    "start": "1389480",
    "end": "1395419"
  },
  {
    "text": "now we are going to assume that we are on the weakest note so the one not hosting the Salem operator because",
    "start": "1395419",
    "end": "1401780"
  },
  {
    "text": "that's simply the more likely case right if you have 10 nodes in your cluster and only one runs the psyllium operator most",
    "start": "1401780",
    "end": "1408679"
  },
  {
    "text": "of the nodes aren't going to have the helium operator our approach to get cluster admin is to first use the psyllium Daemon set",
    "start": "1408679",
    "end": "1414980"
  },
  {
    "text": "permissions to steal the psyllium operator and do then use the psyllium operator permissions to get cluster",
    "start": "1414980",
    "end": "1420440"
  },
  {
    "text": "admin so let's see how the attack plays out we're first going to use the psyllium demonstrate permissions in",
    "start": "1420440",
    "end": "1426020"
  },
  {
    "text": "order to make other nodes in this cluster unscratchable using the same technique that we described earlier setting their port capacity to zero we",
    "start": "1426020",
    "end": "1433520"
  },
  {
    "text": "are again going to delete the celium operator part forcing kubernetes to be created on our nodes now we have the",
    "start": "1433520",
    "end": "1440480"
  },
  {
    "text": "psyllium operator service account in our disposal and we can use it to list secrets and retrieve service account",
    "start": "1440480",
    "end": "1446179"
  },
  {
    "text": "tokens in the cluster now the service account that we are going to Target is called crack which is showed for a",
    "start": "1446179",
    "end": "1453140"
  },
  {
    "text": "clusterable aggregation controller the reason why we are targeting this service account is because it can manipulate",
    "start": "1453140",
    "end": "1459020"
  },
  {
    "text": "authorization it can escalate roles another permission that we discussed earlier the final step in the attack is",
    "start": "1459020",
    "end": "1464600"
  },
  {
    "text": "going to use crack service account token in order to Simply add all the permissions in the cluster to the role",
    "start": "1464600",
    "end": "1470720"
  },
  {
    "text": "that is binded to crack service account token so it's only three steps but when you translate them to a cube cuddle",
    "start": "1470720",
    "end": "1477080"
  },
  {
    "text": "commands it gets much more so we're going to go over this demo now it's going to run quite quickly if you can't",
    "start": "1477080",
    "end": "1483620"
  },
  {
    "text": "follow each com every command that's that's not completely fine we're going to help have a",
    "start": "1483620",
    "end": "1488659"
  },
  {
    "text": "a workflow afterwards and you cannot see the demo",
    "start": "1488659",
    "end": "1497140"
  },
  {
    "text": "so can anyone help me with that maybe something like this let's try",
    "start": "1498740",
    "end": "1506600"
  },
  {
    "text": "foreign",
    "start": "1506600",
    "end": "1509380"
  },
  {
    "text": "yes okay so as I've said the scenario is that we are in a cluster",
    "start": "1519020",
    "end": "1526159"
  },
  {
    "text": "that installed psyllium and we are trying to get cluster admin now",
    "start": "1526159",
    "end": "1532539"
  },
  {
    "text": "we're going to start by emulating a container Escape taking over the node because that's the starting position in",
    "start": "1533179",
    "end": "1538880"
  },
  {
    "text": "our attack and we're also going to define a script which basically what it does is Harvest service account tokens",
    "start": "1538880",
    "end": "1544640"
  },
  {
    "text": "from the node file system and configures our CLI that talks to the API server to use them what you're going to do is",
    "start": "1544640",
    "end": "1551600"
  },
  {
    "text": "check check out where the operator Port is and we can see that it's on another node in the cluster so our first step is",
    "start": "1551600",
    "end": "1557720"
  },
  {
    "text": "going to try to steal the psyllium operator onto our node we are going to define a dash function which is called",
    "start": "1557720",
    "end": "1563960"
  },
  {
    "text": "patch node what it does is simply a touches the allocated pod of of the node",
    "start": "1563960",
    "end": "1571700"
  },
  {
    "text": "to be zero using a Json patch so you can see that the operation that",
    "start": "1571700",
    "end": "1577100"
  },
  {
    "text": "we are defining is replacing the status allocatable slash pod value to be zero",
    "start": "1577100",
    "end": "1583159"
  },
  {
    "text": "and then we are going to use that bash function that is powered by the permissions of the psyllium demon set in order to",
    "start": "1583159",
    "end": "1590120"
  },
  {
    "text": "repeatedly set the",
    "start": "1590120",
    "end": "1595120"
  },
  {
    "text": "pod capacity of other nodes in the cluster to zero now we're doing it in a loop because the the API server actually",
    "start": "1595220",
    "end": "1602779"
  },
  {
    "text": "corrects this value now when we delete the psyllium operator if all goes well",
    "start": "1602779",
    "end": "1608059"
  },
  {
    "text": "it must be recreated on our node and we can see that it does the node name is highlighted in red and you can see it by",
    "start": "1608059",
    "end": "1614480"
  },
  {
    "text": "The Bash terminal line and that our node the host name is actually",
    "start": "1614480",
    "end": "1620240"
  },
  {
    "text": "this name so now the psyllium operator is on our node and we can continue to the second stage of the attack which is",
    "start": "1620240",
    "end": "1627080"
  },
  {
    "text": "to use the cilium operator service account in order to get cracks token",
    "start": "1627080",
    "end": "1632299"
  },
  {
    "text": "right we are first configuring our CLI to use the psyllium operators so okay and then we can see that we can actually",
    "start": "1632299",
    "end": "1639140"
  },
  {
    "text": "list secrets in the cluster so we are going to Target the service account token of the cluster wall aggregation",
    "start": "1639140",
    "end": "1645740"
  },
  {
    "text": "controller or cracking shot here I'm going to make a typo that doesn't work",
    "start": "1645740",
    "end": "1651020"
  },
  {
    "text": "but now it does and we get we got cracks token we can configure our CLI to use",
    "start": "1651020",
    "end": "1656240"
  },
  {
    "text": "cracks token so now we are finally authenticated as crack we got its token and you can see that when we ask the API",
    "start": "1656240",
    "end": "1662480"
  },
  {
    "text": "server hey can I escalate walls the answer is yes we are still not cluster admin though as",
    "start": "1662480",
    "end": "1668120"
  },
  {
    "text": "you can now see the final step in the attack is to edit the role that is",
    "start": "1668120",
    "end": "1673460"
  },
  {
    "text": "binded to cracks token to have all the permissions in the cluster and that's what we're going to",
    "start": "1673460",
    "end": "1679039"
  },
  {
    "text": "do now we are editing the cluster role and you can see that the cluster role will now have the",
    "start": "1679039",
    "end": "1685460"
  },
  {
    "text": "permission to modify and escalate cluster one we're going to just delete everything and only put wild cards there",
    "start": "1685460",
    "end": "1691580"
  },
  {
    "text": "now the second we do that our token immediately should get admin privileges and when we check our permission it",
    "start": "1691580",
    "end": "1698360"
  },
  {
    "text": "should it should say that we are admin and we did it we got admin",
    "start": "1698360",
    "end": "1704480"
  },
  {
    "text": "and took over the entire cluster",
    "start": "1704480",
    "end": "1708158"
  },
  {
    "text": "[Applause]",
    "start": "1710110",
    "end": "1714570"
  },
  {
    "text": "and we're back so what attack classes did we say in this demo we started off by stealing a pod right still in the",
    "start": "1716659",
    "end": "1722539"
  },
  {
    "text": "psyllium operated pod we then use this permission to acquire a powerful service account token and finally using that",
    "start": "1722539",
    "end": "1728480"
  },
  {
    "text": "service account we were able to manipulate permissions in the cluster so I think it's cool to see how the attack",
    "start": "1728480",
    "end": "1733520"
  },
  {
    "text": "classes that we talked about earlier actually map to an actual attack it's important to understand that we",
    "start": "1733520",
    "end": "1740179"
  },
  {
    "text": "showed psyllium but other platforms had very similar issues some are less complex some more complex",
    "start": "1740179",
    "end": "1747020"
  },
  {
    "text": "we just needed to demo one of those so let's talk about what platforms did",
    "start": "1747020",
    "end": "1752059"
  },
  {
    "text": "when we talked to them about those issues we actually reached out to every platform that we found trampolines in",
    "start": "1752059",
    "end": "1758720"
  },
  {
    "text": "and it was really actually a great disclosure experience most of them were",
    "start": "1758720",
    "end": "1763760"
  },
  {
    "text": "eager to fix the issues and you can see that most of them actually did um Google actually awarded us a boundary",
    "start": "1763760",
    "end": "1769700"
  },
  {
    "text": "for this funding which was quite nice so most platforms were really great about this trying to and were able to",
    "start": "1769700",
    "end": "1777500"
  },
  {
    "text": "de-privilege their trampoline demon sets so they are no longer trampolines so from 50 uh back in February now only 12",
    "start": "1777500",
    "end": "1787399"
  },
  {
    "text": "and a half percent a single Escape equals cluster admin",
    "start": "1787399",
    "end": "1793539"
  },
  {
    "text": "while this is really great you should also not get the wrong idea about you know trampoline not being",
    "start": "1800000",
    "end": "1806960"
  },
  {
    "text": "relevant or something like that because we only looked at the infrastructure level and most clusters also have a",
    "start": "1806960",
    "end": "1812779"
  },
  {
    "text": "bunch of add-ons installed also application pods those can can also install trampolines into a cluster",
    "start": "1812779",
    "end": "1819919"
  },
  {
    "text": "Marvel didn't look into every kubernetes distribution we looked into eight Platforms in total",
    "start": "1819919",
    "end": "1826399"
  },
  {
    "text": "and the funny thing I want to say and this graph doesn't represent platform-specific attacks right if a",
    "start": "1826399",
    "end": "1832760"
  },
  {
    "text": "certain platform has a specific attack to it which is not kubernetes native we didn't look into that but overall the",
    "start": "1832760",
    "end": "1839779"
  },
  {
    "text": "platforms were really responsible about fixing those issues now if you run kubernetes you might",
    "start": "1839779",
    "end": "1844940"
  },
  {
    "text": "might be wondering how you can identify trampolines in your cluster and what what you should do about them so I'll",
    "start": "1844940",
    "end": "1850940"
  },
  {
    "text": "pass the mic back to show to talk about identifying those",
    "start": "1850940",
    "end": "1856120"
  },
  {
    "text": "amazing demo and Grace so",
    "start": "1857840",
    "end": "1863000"
  },
  {
    "text": "when we start our research we quickly understand that we we need automatically",
    "start": "1863000",
    "end": "1870200"
  },
  {
    "text": "automatically way to identify those whiskey permission and those trampoline pods so we wrote a tool that can use",
    "start": "1870200",
    "end": "1878779"
  },
  {
    "text": "both for an attacker and both for Defenders to identify and find those risky permission",
    "start": "1878779",
    "end": "1886039"
  },
  {
    "text": "the tool called police it's a CLI an open open source tool that",
    "start": "1886039",
    "end": "1893179"
  },
  {
    "text": "retrieved the Albert permission of pod service account and nodes in the cluster",
    "start": "1893179",
    "end": "1898460"
  },
  {
    "text": "and evaluate them through policies written in Regal we have now about 20 policy out of the",
    "start": "1898460",
    "end": "1906919"
  },
  {
    "text": "box each targeting different kind of privileged escalation technique",
    "start": "1906919",
    "end": "1912440"
  },
  {
    "text": "and it's a customizable you can search for any patterns in compare in",
    "start": "1912440",
    "end": "1917480"
  },
  {
    "text": "kubernetes are back and write a new policy perhaps for platform specific or",
    "start": "1917480",
    "end": "1923539"
  },
  {
    "text": "privileged escalation attack that we didn't cover I really I really recommended all of you",
    "start": "1923539",
    "end": "1931340"
  },
  {
    "text": "to take a couple of seconds and run and Flash the trampolines and the powerful",
    "start": "1931340",
    "end": "1937159"
  },
  {
    "text": "permission in your cluster and this is the output how the output looks like",
    "start": "1937159",
    "end": "1943580"
  },
  {
    "text": "at the top you have the policy and the severity in this example",
    "start": "1943580",
    "end": "1950559"
  },
  {
    "text": "um policy that search for identity that could launch privilege escalation attack",
    "start": "1950600",
    "end": "1956320"
  },
  {
    "text": "modify by modifying pods and at the bottom",
    "start": "1956320",
    "end": "1962059"
  },
  {
    "text": "you can see the violated identity that have the problematic permission that",
    "start": "1962059",
    "end": "1967580"
  },
  {
    "text": "enables the attack and the product actually has this service account",
    "start": "1967580",
    "end": "1972919"
  },
  {
    "text": "so you can run arbuck police",
    "start": "1972919",
    "end": "1978460"
  },
  {
    "text": "also today to quickly identify those trampoline pods and this risky",
    "start": "1978460",
    "end": "1984260"
  },
  {
    "text": "permission in your cluster so I press it back to your valve for the takeaways",
    "start": "1984260",
    "end": "1990799"
  },
  {
    "text": "so some takeaways that we think you should be able to we hope that you can take",
    "start": "1990799",
    "end": "1997340"
  },
  {
    "text": "from our research so as we saw today trampoline pods powerful pods introduce new previous escalation Avenues into",
    "start": "1997340",
    "end": "2003700"
  },
  {
    "text": "kubernetes cluster up to a point where a single container Escape allows you to take over an entire cluster and we",
    "start": "2003700",
    "end": "2009760"
  },
  {
    "text": "actually saw that in a lot of platforms that's actually the common case right those attacks were powered by powerful",
    "start": "2009760",
    "end": "2016659"
  },
  {
    "text": "permissions and we hope that the framework that we introduced of classifying powerful permissions into",
    "start": "2016659",
    "end": "2021940"
  },
  {
    "text": "the different interesting attack classes can help both Defenders and attackers pen testers understand which are",
    "start": "2021940",
    "end": "2029019"
  },
  {
    "text": "powerful permissions and which are risky pods now it's important to understand that those powerful permissions while we",
    "start": "2029019",
    "end": "2034480"
  },
  {
    "text": "looked at them from the lenses of a container Escape they are relevant whenever you have a compromised set of",
    "start": "2034480",
    "end": "2039940"
  },
  {
    "text": "kubernetes credentials in order to understand whether those credentials are actually powerful now we think that the",
    "start": "2039940",
    "end": "2046059"
  },
  {
    "text": "root cause for the issues that we talked about today is that it's simply tricky to configure Outback permissions in",
    "start": "2046059",
    "end": "2051580"
  },
  {
    "text": "kubernetes one side of it is that a lot of permissions that look benign are actually powerful and we hope that the",
    "start": "2051580",
    "end": "2057398"
  },
  {
    "text": "the list of powerful permissions that we released today helps cover that part",
    "start": "2057399",
    "end": "2062800"
  },
  {
    "text": "another thing about our back is it it does it isn't included in all of the compliance and a security check marks",
    "start": "2062800",
    "end": "2069580"
  },
  {
    "text": "and benchmarks benchmarks and checklists for kubernetes meaning that",
    "start": "2069580",
    "end": "2076118"
  },
  {
    "text": "it isn't one of those things that you check for would have to check for in",
    "start": "2076119",
    "end": "2081460"
  },
  {
    "text": "order to get some compliance standards so in a lot of clusters our back isn't really looked into too much",
    "start": "2081460",
    "end": "2088118"
  },
  {
    "text": "what does that causes it brings a bit of false confidence we believe because you",
    "start": "2088119",
    "end": "2094300"
  },
  {
    "text": "might have a cluster that passes all of the security checklist all of the compliance benchmarks everything shows",
    "start": "2094300",
    "end": "2100780"
  },
  {
    "text": "green but you still don't realize that you're a single container escape from getting your whole cluster compromise so",
    "start": "2100780",
    "end": "2107440"
  },
  {
    "text": "our recommendation for Defenders who want to tackle this issue is first of",
    "start": "2107440",
    "end": "2112660"
  },
  {
    "text": "all monitoring you are back you should be able to tell which of the powerful permissions in your cluster and then you",
    "start": "2112660",
    "end": "2118900"
  },
  {
    "text": "should be able to say and you should be able to say whether those are actually needed and in the good scenario you can",
    "start": "2118900",
    "end": "2125500"
  },
  {
    "text": "actually maybe drop some permissions we hope that you can use Albert Police to do that now once you know which of the",
    "start": "2125500",
    "end": "2132099"
  },
  {
    "text": "powerful permissions in your cluster we recommend separating powerful pods from",
    "start": "2132099",
    "end": "2137560"
  },
  {
    "text": "a untrusted or publicly exposed pods um not all powerful permissions can be",
    "start": "2137560",
    "end": "2142960"
  },
  {
    "text": "dropped some of them are necessary so you should be able to use this technique in order to limit the impact of",
    "start": "2142960",
    "end": "2149260"
  },
  {
    "text": "container Escape untrusted Ford and a powerful pod running together on the same node is a pretty toxic combination",
    "start": "2149260",
    "end": "2155980"
  },
  {
    "text": "now one thing that we didn't get to talk about in this session is audit and",
    "start": "2155980",
    "end": "2161260"
  },
  {
    "text": "admission policies we have those in our report those can actually be used to detect and prevent some attacks so for",
    "start": "2161260",
    "end": "2167619"
  },
  {
    "text": "those of you interested this is a link to our report it is a link to Albert Police and we'll be happy to take any",
    "start": "2167619",
    "end": "2172660"
  },
  {
    "text": "questions that you might have thank you [Applause]",
    "start": "2172660",
    "end": "2179810"
  },
  {
    "text": "[Music]",
    "start": "2179810",
    "end": "2182920"
  },
  {
    "text": "[Music]",
    "start": "2186760",
    "end": "2189859"
  }
]