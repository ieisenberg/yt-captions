[
  {
    "start": "0",
    "end": "380000"
  },
  {
    "text": "hello black hat thank you for coming and waking up early today we're going to talk about reverse",
    "start": "160",
    "end": "6919"
  },
  {
    "text": "engineering and um I mean hopefully you're going to enjoy the tool which is",
    "start": "6919",
    "end": "12639"
  },
  {
    "text": "the the important bit of the of the talk so the tool is already on GitHub uh it's",
    "start": "12639",
    "end": "18720"
  },
  {
    "text": "free as in free software MIT license and BSD all the components are uh M and",
    "start": "18720",
    "end": "25160"
  },
  {
    "text": "BSD you can do reverse engineering without doing any assembly and even with without doing anyc so if you know how to",
    "start": "25160",
    "end": "32880"
  },
  {
    "text": "do some luas scripting that should be enough to automate like a fair bit of reverse engineering this talk is really",
    "start": "32880",
    "end": "39000"
  },
  {
    "text": "about taking a new approach to reverse engineering uh I have way too much content uh that said feel free to",
    "start": "39000",
    "end": "45719"
  },
  {
    "text": "interrupt me raise your hand if you have questions and uh feel free to Make Some Noise if you like",
    "start": "45719",
    "end": "51359"
  },
  {
    "text": "it so where am I so this was my first research ever at uh defen 16 that's like",
    "start": "51359",
    "end": "60000"
  },
  {
    "text": "eight N9 years ago now so it was about like finding um I mean the way",
    "start": "60000",
    "end": "65280"
  },
  {
    "text": "Interruption 10 in the bias was handled by all the industry was wrong and this",
    "start": "65280",
    "end": "70759"
  },
  {
    "text": "led us to write a single exploit which would work against all the biases on the planet bit Locker as far as I know it",
    "start": "70759",
    "end": "78159"
  },
  {
    "text": "was the first exploit against bit Locker uh true Crypt and all the minor full",
    "start": "78159",
    "end": "83520"
  },
  {
    "text": "disc encryption software so that was kind of rad um the password was in plain text in memory forever in all those",
    "start": "83520",
    "end": "91159"
  },
  {
    "text": "software another research I did uh for Defcon and black hat some time back was",
    "start": "91159",
    "end": "96360"
  },
  {
    "text": "um back during um back during a bias so the state-of-the art back then",
    "start": "96360",
    "end": "102040"
  },
  {
    "text": "was if you're familiar with the Frack article from the people from core security basically the state-ofthe-art",
    "start": "102040",
    "end": "107799"
  },
  {
    "text": "was like you take a bias you identify the check suming routine you would",
    "start": "107799",
    "end": "113000"
  },
  {
    "text": "inject a new function inside the bias which would be malicious and then compensate the bias and Flash it back to",
    "start": "113000",
    "end": "119439"
  },
  {
    "text": "your mother board this way you could infect one motherboard so instead of doing this we took um the best open",
    "start": "119439",
    "end": "126439"
  },
  {
    "text": "source bios available core Boot and C bias and we engineered from scratch the",
    "start": "126439",
    "end": "132040"
  },
  {
    "text": "the bias with malware inside um the benefit would be instead of infecting",
    "start": "132040",
    "end": "137440"
  },
  {
    "text": "one motherboard we would infect 300 different motherboards and that was kind of cool so the MIT technology review was",
    "start": "137440",
    "end": "144519"
  },
  {
    "text": "like wow that's a computer infection that can never be cured fors it to like they did a paper",
    "start": "144519",
    "end": "151560"
  },
  {
    "text": "on it and stuff which leads like imagine the kind of you know online presence it",
    "start": "151560",
    "end": "156760"
  },
  {
    "text": "gives me you're mostly famous for writing malw more recently last year we",
    "start": "156760",
    "end": "163000"
  },
  {
    "text": "presented at blackard uh this attack on uh um net bias and SMB if you're",
    "start": "163000",
    "end": "168760"
  },
  {
    "text": "familiar with the traditional SMB relay attack from the '90s really we",
    "start": "168760",
    "end": "174640"
  },
  {
    "text": "discovered that you can do the same thing from the internet and Ste active direct credentials from the internet",
    "start": "174640",
    "end": "181120"
  },
  {
    "text": "that's work we did with um my team at Salesforce and so it was the first",
    "start": "181120",
    "end": "186879"
  },
  {
    "text": "attack against Windows 10 the week it was released and there's no fixed against it so if you still allow um",
    "start": "186879",
    "end": "194040"
  },
  {
    "text": "outbound SMB uh traffic on the Windows Network um basically there's no",
    "start": "194040",
    "end": "199519"
  },
  {
    "text": "fix question so far disclaimer so um what I'm going to",
    "start": "199519",
    "end": "206080"
  },
  {
    "text": "present today is my own research uh my employer doesn't want to be associated with it in any",
    "start": "206080",
    "end": "211799"
  },
  {
    "text": "way which lead to this slide uh thanks to the Electronic Frontier Foundation for providing legal assistance uh",
    "start": "211799",
    "end": "219080"
  },
  {
    "text": "they've been pretty amazing on this um I mean if you do reverse engineering especially if like like I do you live in",
    "start": "219080",
    "end": "225439"
  },
  {
    "text": "the US it's a serious matter uh and the folks from the eff like you know provide free assistance and they actually have",
    "start": "225439",
    "end": "232079"
  },
  {
    "text": "lawyers who are super competent on the topic and I could not afford anyway so kudos to",
    "start": "232079",
    "end": "238200"
  },
  {
    "text": "them agenda So today we're going to talk about so the Witchcraft compiler",
    "start": "238200",
    "end": "243400"
  },
  {
    "text": "collection I'm going to introduce quickly like what are the the components I'm going to show you how to",
    "start": "243400",
    "end": "249439"
  },
  {
    "text": "transform a binary into a shared Library so we will call this",
    "start": "249439",
    "end": "255639"
  },
  {
    "text": "liying then I will show you how to take a final binary and unlink it back to",
    "start": "255639",
    "end": "260840"
  },
  {
    "text": "reloc relocatable object files that can later be relinked in either new binary",
    "start": "260840",
    "end": "267560"
  },
  {
    "text": "or a shared Library then I'll show you how to transform a p file into an",
    "start": "267560",
    "end": "273960"
  },
  {
    "text": "EF and then we'll do some proper witchcraft um in particular I'll show",
    "start": "273960",
    "end": "279560"
  },
  {
    "text": "you what you have like reflection like capabilities much like in Java but",
    "start": "279560",
    "end": "285240"
  },
  {
    "text": "without a VM for binaries of course none of this is supposed to work so uh if if any of you",
    "start": "285240",
    "end": "292800"
  },
  {
    "text": "are like computer science teacher or something like this you may get a stroke if we have doctors in the room like",
    "start": "292800",
    "end": "298160"
  },
  {
    "text": "please monitor for each other okay let's do it I have way too much",
    "start": "298160",
    "end": "305199"
  },
  {
    "text": "content so the the tool set is comprised of mostly three binaries uh there's a",
    "start": "305199",
    "end": "311400"
  },
  {
    "text": "Linker there's a core compiler and there's a dynamic uh",
    "start": "311400",
    "end": "317080"
  },
  {
    "text": "interpreter uh I call them compiler but they really take binaries as an input and not source",
    "start": "317080",
    "end": "322919"
  },
  {
    "text": "code um and based on those binaries um I've built a number of",
    "start": "322919",
    "end": "329080"
  },
  {
    "text": "utilities on top of them uh which are mere L script based on those",
    "start": "329080",
    "end": "334800"
  },
  {
    "text": "tools so the target uh I mean the host machine as the host machine has to be a",
    "start": "334800",
    "end": "340680"
  },
  {
    "text": "Linux machine but the binaries we analyze not necessarily I'll show",
    "start": "340680",
    "end": "347720"
  },
  {
    "text": "you in particular what to analyze dynamically arm binaries on a Intel",
    "start": "347720",
    "end": "355360"
  },
  {
    "text": "Linux machine without a VM",
    "start": "355360",
    "end": "360038"
  },
  {
    "text": "let's start with the lib ification so out of the three components uh wld is",
    "start": "361520",
    "end": "366800"
  },
  {
    "text": "like the the the Linker the Witchcraft Linker so what this lib ification thing",
    "start": "366800",
    "end": "373400"
  },
  {
    "text": "well we're going to try to take a binary and transform it back into a shared",
    "start": "373400",
    "end": "379080"
  },
  {
    "text": "Library so let's let's just start with the",
    "start": "379280",
    "end": "383840"
  },
  {
    "start": "380000",
    "end": "778000"
  },
  {
    "text": "demo you guys get to see this it's a bit small isn't",
    "start": "388560",
    "end": "393479"
  },
  {
    "text": "it better much better how about that yeah",
    "start": "398639",
    "end": "407319"
  },
  {
    "text": "okay so um here is the source code of the demo",
    "start": "407319",
    "end": "416840"
  },
  {
    "text": "so basically we're going to take proftpd somehow I'm going to transform it into a shared Library proftpd doso I'm going to",
    "start": "421599",
    "end": "428879"
  },
  {
    "text": "show you how that works and then this code does what basically it uses D to load the shared library in memory and it",
    "start": "428879",
    "end": "436120"
  },
  {
    "text": "looks for a symbol inside the shared Library called PR version get string which returns inside Pro ftpd the",
    "start": "436120",
    "end": "443840"
  },
  {
    "text": "version of proftpd and we're just going to do a printf of that so so how do we get uh proftpd to",
    "start": "443840",
    "end": "452080"
  },
  {
    "text": "be transformed into a shared Library uh basically the magic happens",
    "start": "452080",
    "end": "459919"
  },
  {
    "text": "here so we to we take um a proftpd we copy it into /tmp and then we leify",
    "start": "459919",
    "end": "469080"
  },
  {
    "text": "it uh and automatically that's going to transform proftpd into a shared Library so I'm",
    "start": "469080",
    "end": "477240"
  },
  {
    "text": "going to do it with the make file first and then we do it like uh uh manually so now if I run the generated",
    "start": "477240",
    "end": "485639"
  },
  {
    "text": "executable demo one you can see that the version of prpd doso is 1.3",
    "start": "485639",
    "end": "495199"
  },
  {
    "text": "do3d and that really comes from it's really a function inside",
    "start": "495199",
    "end": "500879"
  },
  {
    "text": "proftpd so that up right that's not supposed to work so how come it does",
    "start": "500879",
    "end": "509199"
  },
  {
    "text": "so we did exactly this I can redo it manually if you like but um so basically we copy proftpd into /tmp we verify it's",
    "start": "510240",
    "end": "517760"
  },
  {
    "text": "uh it's initially an executable if you run the file comment on it it tells us okay it's an",
    "start": "517760",
    "end": "523159"
  },
  {
    "text": "executable and then the the Witchcraft Linker will patch it somehow into a",
    "start": "523159",
    "end": "528360"
  },
  {
    "text": "shared library and then we can invoke um um yeah we can invoke it and load it as",
    "start": "528360",
    "end": "534800"
  },
  {
    "text": "a shared Library which is what dlopen was doing what's amazing though so I",
    "start": "534800",
    "end": "540000"
  },
  {
    "text": "mean if I look into SL TMP I should have the proftpd thing still there maybe okay let's do it",
    "start": "540000",
    "end": "548959"
  },
  {
    "text": "manually okay so proftpd right now is an executable wld",
    "start": "552360",
    "end": "559800"
  },
  {
    "text": "liy proftpd uh no that's not what I wanted to",
    "start": "559800",
    "end": "566440"
  },
  {
    "text": "do menace menace liy works better and now if I ask it okay what the type",
    "start": "566440",
    "end": "573040"
  },
  {
    "text": "of this thing no it's a shared Library okay what's amazing",
    "start": "573040",
    "end": "580480"
  },
  {
    "text": "though it's also still an a valid",
    "start": "581959",
    "end": "586440"
  },
  {
    "text": "executable what just happened okay this is so cool let's take a",
    "start": "587880",
    "end": "595000"
  },
  {
    "text": "[Music] minute yeah I'm pretty proud of myself",
    "start": "595060",
    "end": "600200"
  },
  {
    "text": "that was a good one okay so what did we really do we",
    "start": "600200",
    "end": "605880"
  },
  {
    "text": "only really patched one bite so uh if we compare the original Pro fpd with uh",
    "start": "605880",
    "end": "611920"
  },
  {
    "text": "with the one we just patched we transformed into in the heater the EF heater we basically just",
    "start": "611920",
    "end": "620600"
  },
  {
    "text": "change the type from your an executable to your shared library and you would think that makes no sense it actually",
    "start": "620600",
    "end": "627760"
  },
  {
    "text": "does the okay so that the source code I showed",
    "start": "627760",
    "end": "633680"
  },
  {
    "text": "you there's a couple reason why this works um there again if you're a teacher",
    "start": "633800",
    "end": "639639"
  },
  {
    "text": "in computer science you might be like that makes no sense but in reality if",
    "start": "639639",
    "end": "645000"
  },
  {
    "text": "you're a hacker you might know the way uh aslr is being introduced uh in the",
    "start": "645000",
    "end": "651320"
  },
  {
    "text": "colel when was that when when did we introduce aslr in the Linux",
    "start": "651320",
    "end": "658040"
  },
  {
    "text": "colel okay what's cslr okay randomization so the idea was",
    "start": "658040",
    "end": "665279"
  },
  {
    "text": "like we'd like we'd like to have executable um every time you run them to",
    "start": "665279",
    "end": "670360"
  },
  {
    "text": "execute at a different address for basic security reasons um the ID being if you",
    "start": "670360",
    "end": "675880"
  },
  {
    "text": "add code of sets that's not going to work anymore so instead of recreating a world tool chain and a world compiler and all",
    "start": "675880",
    "end": "683320"
  },
  {
    "text": "that the trick in um Kel 2.6.6 so that's over 10 years ago",
    "start": "683320",
    "end": "690279"
  },
  {
    "text": "was to say we're going to make shared libraries executable because shared Library are supposed to be I mean they",
    "start": "690279",
    "end": "696800"
  },
  {
    "text": "can be loaded at any address in memory okay unlike um non- randomized",
    "start": "696800",
    "end": "702720"
  },
  {
    "text": "executables so the trick in the conel you can look at the patch for this 2.6.6 and on was to say in canel land if",
    "start": "702720",
    "end": "712000"
  },
  {
    "text": "the ellf feeder um is of type ET exac which is the old executable way if it's",
    "start": "712000",
    "end": "719279"
  },
  {
    "text": "an ETD which is really a shared library then it's a valid executable and you can run",
    "start": "719279",
    "end": "724760"
  },
  {
    "text": "it so what I just did by taking this proftpd binary which cannot be",
    "start": "724760",
    "end": "729880"
  },
  {
    "text": "randomized because it was compiled this way and patching one bite is to create a",
    "start": "729880",
    "end": "735199"
  },
  {
    "text": "non relocatable shared library because it cannot be loaded at any address it's only valid if it execute at this given",
    "start": "735199",
    "end": "742519"
  },
  {
    "text": "address uh but interestingly yeah it's still a valid binary and now we can pass it to dlopen which is a function inside",
    "start": "742519",
    "end": "749199"
  },
  {
    "text": "the dynamic Linker responsible for yeah loading like your shared libraries and and and and Ling relocations so the",
    "start": "749199",
    "end": "756560"
  },
  {
    "text": "benefit is I don't get to do any of this manually myself D openen does all the work for me all I did was really patch",
    "start": "756560",
    "end": "762240"
  },
  {
    "text": "one bite that's cool or what thank",
    "start": "762240",
    "end": "769040"
  },
  {
    "text": "you okay fasten your seat belt that was the most normal demo of my",
    "start": "770680",
    "end": "777519"
  },
  {
    "text": "talk okay let's play with Apache I like that one a",
    "start": "777720",
    "end": "784519"
  },
  {
    "start": "778000",
    "end": "1185000"
  },
  {
    "text": "lot okay I think I have two demos for",
    "start": "786160",
    "end": "791959"
  },
  {
    "text": "Apachi uh let's start with",
    "start": "792120",
    "end": "796120"
  },
  {
    "text": "the so basically um I'm going to call inside this C",
    "start": "799639",
    "end": "806279"
  },
  {
    "text": "function I'm going to call AP get server Banner which is a function inside",
    "start": "806279",
    "end": "812199"
  },
  {
    "text": "Apache Apache is already compiled as a shared Library if you like because it",
    "start": "812199",
    "end": "817680"
  },
  {
    "text": "supports cslr okay so if we ask what is the file type of",
    "start": "817680",
    "end": "824920"
  },
  {
    "text": "Apache it's actually a shared object already okay because it's being compiled",
    "start": "826639",
    "end": "832040"
  },
  {
    "text": "with the SLR now the real bizarre bit get ready",
    "start": "832040",
    "end": "837240"
  },
  {
    "text": "for this we're going to compile this C code by",
    "start": "837240",
    "end": "843160"
  },
  {
    "text": "linking against SL user isbin Apache which is a binary right so you're",
    "start": "843160",
    "end": "850480"
  },
  {
    "text": "not really supposed to do that if I look in particular at the",
    "start": "850480",
    "end": "860440"
  },
  {
    "text": "way this binary is no linked you ready for this okay so this is listing all in",
    "start": "862160",
    "end": "870560"
  },
  {
    "text": "inside this new binary I just created all the shared libraries linked against it what do you think of the second",
    "start": "870560",
    "end": "879160"
  },
  {
    "text": "one what and amazingly it",
    "start": "882720",
    "end": "888440"
  },
  {
    "text": "works so this C function inside Apache we just called it from inside your own C",
    "start": "888440",
    "end": "895440"
  },
  {
    "text": "code and in the same you know in the same way this Apache function returns like you know a banner associated with",
    "start": "895440",
    "end": "902320"
  },
  {
    "text": "like the current version of Apache this is cool or [Laughter]",
    "start": "902320",
    "end": "908680"
  },
  {
    "text": "what okay um I can show you right now another way to do",
    "start": "908680",
    "end": "913920"
  },
  {
    "text": "it",
    "start": "913920",
    "end": "916920"
  },
  {
    "text": "uh so right now I did this statically right like I write my own code and I'm",
    "start": "920800",
    "end": "926120"
  },
  {
    "text": "linking against either this Pro FP we patched or Apache um so the the Witchcraft compiler",
    "start": "926120",
    "end": "935959"
  },
  {
    "text": "also come with an interpretor which allows us to do this dynamically without writing any c",
    "start": "935959",
    "end": "941160"
  },
  {
    "text": "code so the script it's a fully scriptable language I'll explain you more about this but a way to do exactly",
    "start": "941160",
    "end": "947759"
  },
  {
    "text": "the same thing in three lines of I don't exactly what kind of language that",
    "start": "947759",
    "end": "953040"
  },
  {
    "text": "is uh it's actually the language of of of the Witchcraft compiler which is",
    "start": "953040",
    "end": "959480"
  },
  {
    "text": "reflected cap API plus Lua so we can call directly this",
    "start": "959480",
    "end": "964639"
  },
  {
    "text": "function um okay so this this loads inside the dynamic um witchcraft",
    "start": "964639",
    "end": "971800"
  },
  {
    "text": "interpreter SL userb Apache 2 it makes all the functions from Apache",
    "start": "971800",
    "end": "977240"
  },
  {
    "text": "available um to call inside The Interpreter itself and we can just like call",
    "start": "977240",
    "end": "982480"
  },
  {
    "text": "it put the result into a variable a and print a",
    "start": "982480",
    "end": "988839"
  },
  {
    "text": "and if we run that hopefully yeah the result is the",
    "start": "989199",
    "end": "995920"
  },
  {
    "text": "same that was cool or what okay so that's exactly what we just",
    "start": "995920",
    "end": "1005000"
  },
  {
    "text": "s so the idea right was to take uh to take a binary and transform it back uh sorry to take a binary and transform it",
    "start": "1010040",
    "end": "1016680"
  },
  {
    "text": "back into a shared Library how about we take a binary and we",
    "start": "1016680",
    "end": "1022000"
  },
  {
    "text": "transform it back into relocatable object files which is the typical output",
    "start": "1022000",
    "end": "1027160"
  },
  {
    "text": "of a compiler before the linking process the benefit of this is even if I",
    "start": "1027160",
    "end": "1034280"
  },
  {
    "text": "don't have the source code basically if I can go back to relocatable files I can",
    "start": "1034280",
    "end": "1039959"
  },
  {
    "text": "reuse any function in there and Link it into my own projects to put it in other words uh the",
    "start": "1039959",
    "end": "1047600"
  },
  {
    "text": "typical approach to reverse engineering is so you have source code it gets compiled to R cable objects and gets",
    "start": "1047600",
    "end": "1053600"
  },
  {
    "text": "linked into binaries and typically the the way people do reverse engineering is like",
    "start": "1053600",
    "end": "1060080"
  },
  {
    "text": "okay I'm going to take those binaries and try to get back somehow to the source code there's a number of reason",
    "start": "1060080",
    "end": "1065960"
  },
  {
    "text": "why this is not going to work super well in particular well like the compiler adds",
    "start": "1065960",
    "end": "1072160"
  },
  {
    "text": "his own routine to it like you know we working with an Intel architecture so you have all the problem of like what is",
    "start": "1072160",
    "end": "1078559"
  },
  {
    "text": "the size of an instruction on a cisk machine things like this so instead of",
    "start": "1078559",
    "end": "1083799"
  },
  {
    "text": "doing this yeah I'm just going to use uh the Witchcraft compiler collection which",
    "start": "1083799",
    "end": "1089360"
  },
  {
    "text": "takes binaries as an inut and gives back U relocatable",
    "start": "1089360",
    "end": "1095760"
  },
  {
    "text": "objects so I call it a compiler but it doesn't it doesn't at all work like a compiler right it doesn't take s code as",
    "start": "1096520",
    "end": "1103120"
  },
  {
    "text": "an inut the reason we we call it like this is the common line is very close to uh",
    "start": "1103120",
    "end": "1110640"
  },
  {
    "text": "GCC so to get the same output as GCC you give it the binary as an inut",
    "start": "1110640",
    "end": "1117400"
  },
  {
    "text": "instead of source code you give it pretty much the same um the same arguments as you would with GCC and",
    "start": "1117400",
    "end": "1124200"
  },
  {
    "text": "magically you get the same output so um a thing to Noti is with WCC",
    "start": "1124200",
    "end": "1133880"
  },
  {
    "text": "that the front end is built with li BFD so it's actually what is what is Li",
    "start": "1133880",
    "end": "1139720"
  },
  {
    "text": "BFD you guys know what it stands for yeah big",
    "start": "1139720",
    "end": "1146520"
  },
  {
    "text": "deal so the idea was like at some stage the new project were like okay we'd like",
    "start": "1146520",
    "end": "1152760"
  },
  {
    "text": "to have a uniform way to work across architectures and to work um not only",
    "start": "1152760",
    "end": "1159080"
  },
  {
    "text": "across like you know physical architecture like arm or mips or whatever uh but also across F",
    "start": "1159080",
    "end": "1165159"
  },
  {
    "text": "formats so Li BFD can work with like P files",
    "start": "1165159",
    "end": "1170400"
  },
  {
    "text": "cough um exotic stuff and the benefit of writing my compiler with this is that my",
    "start": "1170400",
    "end": "1176360"
  },
  {
    "text": "input actually does not need to be an EF I can give it a p file as an input for instance and get an EF as an output if I",
    "start": "1176360",
    "end": "1184360"
  },
  {
    "text": "like what so I'm going to show you a full demo of all this rinking thing works",
    "start": "1184360",
    "end": "1195600"
  },
  {
    "text": "okay so this is a very small application which um just prints a",
    "start": "1201000",
    "end": "1209280"
  },
  {
    "text": "string but interestingly it has a world bunch of relocations so not only I mean",
    "start": "1209280",
    "end": "1214919"
  },
  {
    "text": "when when you're importing functions like this for instance print f um so you have a jump to like the",
    "start": "1214919",
    "end": "1221840"
  },
  {
    "text": "procedure linkage table which has a pointer to the global offset table and",
    "start": "1221840",
    "end": "1226880"
  },
  {
    "text": "basically when you execute the binary the dynamic Linker is responsible for finding print F in the lipy so knowing",
    "start": "1226880",
    "end": "1233679"
  },
  {
    "text": "that print f is inside the lipy is is upcoding inside your binary but it has to find the path for the Lipsy load it",
    "start": "1233679",
    "end": "1240240"
  },
  {
    "text": "in memory and uh modify modify your gut so that um whenever you try to um call this",
    "start": "1240240",
    "end": "1248919"
  },
  {
    "text": "function um yeah the pointer inside the gut is going to be initialized assuming",
    "start": "1248919",
    "end": "1254039"
  },
  {
    "text": "you don't do lazy binding well anyway um strings for instance like this",
    "start": "1254039",
    "end": "1261080"
  },
  {
    "text": "this string in yellow or this string in yellow they in different sections right this the static strings end up in the uh",
    "start": "1261080",
    "end": "1270360"
  },
  {
    "text": "readon um uh readon data section so the text is referencing data",
    "start": "1270360",
    "end": "1279159"
  },
  {
    "text": "which is in another section and there is a relocation for that and the dynamic Linker upon execution is going to",
    "start": "1279159",
    "end": "1284320"
  },
  {
    "text": "initialize that too so long story short uh this cover all the type of common relocations right",
    "start": "1284320",
    "end": "1291159"
  },
  {
    "text": "to other sections to functions and stuff like that so let's compile this",
    "start": "1291159",
    "end": "1297159"
  },
  {
    "text": "quickly okay so this is the original",
    "start": "1297159",
    "end": "1302720"
  },
  {
    "text": "binary it does hello black at okay big deal if we look at the make",
    "start": "1302720",
    "end": "1309360"
  },
  {
    "text": "file so we're going to take so first off okay the first line we do compile uh",
    "start": "1309360",
    "end": "1315520"
  },
  {
    "text": "small which is just run and prints black ad then we use WCC to take",
    "start": "1315520",
    "end": "1322320"
  },
  {
    "text": "small and produce a relocatable object file out of it",
    "start": "1322320",
    "end": "1330000"
  },
  {
    "text": "okay and then we relink this relocatable object file into small two and the",
    "start": "1330000",
    "end": "1336960"
  },
  {
    "text": "question is does small two [Laughter] run and does it produce the same",
    "start": "1336960",
    "end": "1344600"
  },
  {
    "text": "output and possibly does it have the same checkm",
    "start": "1344600",
    "end": "1350039"
  },
  {
    "text": "so the amazing thing is that small two does run and does produce the same outputs",
    "start": "1350760",
    "end": "1356760"
  },
  {
    "text": "okay thank [Applause]",
    "start": "1356760",
    "end": "1362159"
  },
  {
    "text": "you okay and uh if we look at the check Sims they not the same",
    "start": "1362159",
    "end": "1369640"
  },
  {
    "text": "files um so to be fully honest with you I don't handle yet all the type of",
    "start": "1369640",
    "end": "1375559"
  },
  {
    "text": "relocation that um are in theory supported by the Intel",
    "start": "1375559",
    "end": "1381039"
  },
  {
    "text": "compiler I mean the Intel specification and for other architecture there's also",
    "start": "1381039",
    "end": "1386720"
  },
  {
    "text": "other type of relocations so your help is most welcome if you want to contribute to this uh to this tool like",
    "start": "1386720",
    "end": "1393039"
  },
  {
    "text": "I think we have a good basis it works in you know uh typical cases now you you",
    "start": "1393039",
    "end": "1398640"
  },
  {
    "text": "might find exotic binary or produce exotic binaries on purple that are going to defeat the compiler uh feel free to",
    "start": "1398640",
    "end": "1405000"
  },
  {
    "text": "submit them and to submit patches that would be great so that's pretty much what we just",
    "start": "1405000",
    "end": "1413200"
  },
  {
    "start": "1413000",
    "end": "1628000"
  },
  {
    "text": "explained okay I think the next slide is my best slide ever you ready for",
    "start": "1413200",
    "end": "1421600"
  },
  {
    "text": "this I think it's self-explanatory so we're going to take",
    "start": "1423480",
    "end": "1429799"
  },
  {
    "text": "a p file and try to uh transform it into an EF because why",
    "start": "1429799",
    "end": "1437159"
  },
  {
    "text": "not so so I'm actually going to yeah let's do it",
    "start": "1437159",
    "end": "1442480"
  },
  {
    "text": "manually uh so I'm going to take",
    "start": "1443120",
    "end": "1447000"
  },
  {
    "text": "Chrome",
    "start": "1448600",
    "end": "1451600"
  },
  {
    "text": "uh yep actually let me",
    "start": "1454679",
    "end": "1460120"
  },
  {
    "text": "okay so I copied Chrome into /tmp okay it's a 32bit p file",
    "start": "1460120",
    "end": "1470159"
  },
  {
    "text": "and we're going to use WCC to transform it back",
    "start": "1472000",
    "end": "1477159"
  },
  {
    "text": "into an an object file so the common line is very similar to GCC right if I",
    "start": "1477159",
    "end": "1482600"
  },
  {
    "text": "want object files I use men C so the input is going to be Chrome and the",
    "start": "1482600",
    "end": "1488600"
  },
  {
    "text": "output for instance /tmp Chromeo because why not or chrome. o",
    "start": "1488600",
    "end": "1496640"
  },
  {
    "text": "here we go [Laughter]",
    "start": "1496640",
    "end": "1503590"
  },
  {
    "text": "ah what did I do",
    "start": "1506039",
    "end": "1509879"
  },
  {
    "text": "wrong okay please uh give your hands to your neighbor we all going to worship the demo Gods",
    "start": "1517640",
    "end": "1523830"
  },
  {
    "text": "[Laughter] together that",
    "start": "1523830",
    "end": "1530960"
  },
  {
    "text": "okay okay I'm I'm out of sync with like um you know I I keep patching the bug",
    "start": "1530960",
    "end": "1537279"
  },
  {
    "text": "that people report on GitHub so I'm not quite sure why this doesn't work but it's supposed to work um so the idea is um uh there again",
    "start": "1537279",
    "end": "1546760"
  },
  {
    "text": "since we're using uh Li BFD as an inut the uh I mean as a passing U library the",
    "start": "1546760",
    "end": "1553159"
  },
  {
    "text": "inut does not strictly have to be an EF no real question",
    "start": "1553159",
    "end": "1558840"
  },
  {
    "text": "what is the point in doing this because my kernel doesn't have the the anti Primitives anyway right so like if",
    "start": "1558840",
    "end": "1565640"
  },
  {
    "text": "Chrome is asking like okay I need NT underscore whatever function from the um",
    "start": "1565640",
    "end": "1571399"
  },
  {
    "text": "from the windows colel uh my posic system is not going to know what that",
    "start": "1571399",
    "end": "1576760"
  },
  {
    "text": "is so you can still call uh pure functions this way so if the function",
    "start": "1576760",
    "end": "1582679"
  },
  {
    "text": "you know if you have a function in Chrome that um you know you have identified as being useful uh and",
    "start": "1582679",
    "end": "1588480"
  },
  {
    "text": "self-contained like it's not importing any function from the anticon or anything like this that will",
    "start": "1588480",
    "end": "1595480"
  },
  {
    "text": "work to do something better to be honest I think we could uh really run this",
    "start": "1595480",
    "end": "1600760"
  },
  {
    "text": "chrome. XZ um transformed into a nef on a w on a",
    "start": "1600760",
    "end": "1606120"
  },
  {
    "text": "posix machine by leveraging the API of wine which is basically already EF uh",
    "start": "1606120",
    "end": "1614720"
  },
  {
    "text": "formatted and does provide somewhat an equ equalent of an antical uh this is left as an exercise",
    "start": "1614720",
    "end": "1621960"
  },
  {
    "text": "to the reader if you want to subl the patch I would absolutely take",
    "start": "1621960",
    "end": "1627919"
  },
  {
    "start": "1628000",
    "end": "1952000"
  },
  {
    "text": "it okay um there again I'm sorry I'm sorry for any computer science teacher",
    "start": "1628279",
    "end": "1635120"
  },
  {
    "text": "like like that that's going to be tough uh we're going to run an an open DSD binary natively on Linux without a",
    "start": "1635120",
    "end": "1644559"
  },
  {
    "text": "VM because why not",
    "start": "1644559",
    "end": "1649080"
  },
  {
    "text": "okay so here it goes uh then the binary we going to run",
    "start": "1651360",
    "end": "1657600"
  },
  {
    "text": "so if I try to um if I try to run it like",
    "start": "1657600",
    "end": "1664360"
  },
  {
    "text": "this bash is telling me no such file or directory which is bizarre because the file exists right so if I ask S Trace",
    "start": "1664360",
    "end": "1672480"
  },
  {
    "text": "like okay why are you not running this open BSD binary when I try to execute it",
    "start": "1672480",
    "end": "1679559"
  },
  {
    "text": "it tells me also no such file or directory so even you know even exit V",
    "start": "1679559",
    "end": "1685279"
  },
  {
    "text": "didn't work if you look at the Kel uh source code of what's happening when you try to do this basically when you try to",
    "start": "1685279",
    "end": "1693600"
  },
  {
    "text": "so when you try to run the binary it gets loaded because it's a valid DF it gets loaded in memory and then the conal",
    "start": "1693600",
    "end": "1700880"
  },
  {
    "text": "looks for the dynamic Linker and the path of the of the dynamic Linker on this binary is",
    "start": "1700880",
    "end": "1709960"
  },
  {
    "text": "uh SL Li exac ld.so let me copy this so",
    "start": "1716320",
    "end": "1722279"
  },
  {
    "text": "that the typical path of for BSD binary let me verify it's a BSD binary by the",
    "start": "1722279",
    "end": "1730320"
  },
  {
    "text": "way uh open BSD okay so of course this Dynamic Linker path",
    "start": "1732559",
    "end": "1739120"
  },
  {
    "text": "I don't have any such file or directory okay so the error message is really coming from the",
    "start": "1739120",
    "end": "1745600"
  },
  {
    "text": "colel okay so how are we going to run",
    "start": "1745600",
    "end": "1750840"
  },
  {
    "text": "this on Linux so I could patch the path of the",
    "start": "1750840",
    "end": "1756559"
  },
  {
    "text": "dynamic Linker to provided the dynamic Linker of Linux instead of doing this I'm going to",
    "start": "1756559",
    "end": "1762880"
  },
  {
    "text": "copy my real Dynamic Linker to the path that the binary is expecting that's a",
    "start": "1762880",
    "end": "1768399"
  },
  {
    "text": "bit less intrusive then I have a problem of",
    "start": "1768399",
    "end": "1774799"
  },
  {
    "text": "um I mean the functions inside basically the name of the the",
    "start": "1774799",
    "end": "1781880"
  },
  {
    "text": "name of the Lipsy inside the the open BSD binary is called lipy doo.",
    "start": "1781880",
    "end": "1788480"
  },
  {
    "text": "62.0 even if you're not a Linux expert that's not the name of my um my Lipsy",
    "start": "1788480",
    "end": "1794919"
  },
  {
    "text": "library on Linux mine is really called lipy doo. 6 so we're going to patch this",
    "start": "1794919",
    "end": "1801799"
  },
  {
    "text": "I do this like a barbarian use it said okay so we're going to patch this",
    "start": "1801799",
    "end": "1808080"
  },
  {
    "text": "original binary transforming like this name by lipy",
    "start": "1808080",
    "end": "1813720"
  },
  {
    "text": "do6 and we're going tood it plus X and then it will almost run there will be",
    "start": "1813720",
    "end": "1819720"
  },
  {
    "text": "one problem left um is going to ask me for um a missing symbol at",
    "start": "1819720",
    "end": "1826960"
  },
  {
    "text": "exit op um that does not exist on Linux machines but does exist on",
    "start": "1826960",
    "end": "1834799"
  },
  {
    "text": "um uh I mean is expected by the binary so basically the way around this is we",
    "start": "1834799",
    "end": "1841480"
  },
  {
    "text": "create a stop for it in C we with the same function Prototype at Exit does",
    "start": "1841480",
    "end": "1847600"
  },
  {
    "text": "nothing right it's basically calling the structures I mean it's initializing the structures so that when the binary exits",
    "start": "1847600",
    "end": "1855679"
  },
  {
    "text": "you can call those D structures for the purpose of this demo we don't really care what's happening once you exit",
    "start": "1855679",
    "end": "1862600"
  },
  {
    "text": "Okay so we're going to create this a small shared Library like this with the missing function prototype and LD",
    "start": "1862600",
    "end": "1868960"
  },
  {
    "text": "preload it and okay so I can show you the",
    "start": "1868960",
    "end": "1875039"
  },
  {
    "text": "original source code of the fmt doc as it was compiled on the BSD machine it",
    "start": "1875039",
    "end": "1880880"
  },
  {
    "text": "doesn't do anything interesting it basically does a printf of static totto static great",
    "start": "1880880",
    "end": "1888559"
  },
  {
    "text": "and if we tap",
    "start": "1888559",
    "end": "1891240"
  },
  {
    "text": "make it just did the print for me of static too for Bas BL static so we just",
    "start": "1894919",
    "end": "1902120"
  },
  {
    "text": "run an open BSD binary natively on Linux what the limit of",
    "start": "1902120",
    "end": "1909919"
  },
  {
    "text": "this so this works because there's no system call down inside the binary itself right like all the system calls",
    "start": "1909919",
    "end": "1916279"
  },
  {
    "text": "which are done are basically down inside shared libraries and by loading the appropriate shared",
    "start": "1916279",
    "end": "1922600"
  },
  {
    "text": "libraries um you know I'm tricking the system into like you know calling the right system call instead of calling",
    "start": "1922600",
    "end": "1929760"
  },
  {
    "text": "open BSD system calls now if the if the binary was for instance statically",
    "start": "1929760",
    "end": "1935760"
  },
  {
    "text": "linked and was doing itself um um RO system calls from the",
    "start": "1935760",
    "end": "1941919"
  },
  {
    "text": "binary where we would have to we would have to trick it and like patch that inside the binary to compensate this",
    "start": "1941919",
    "end": "1947919"
  },
  {
    "text": "system go make sense too easy that's cool or",
    "start": "1947919",
    "end": "1955840"
  },
  {
    "start": "1952000",
    "end": "2118000"
  },
  {
    "text": "what any questions so far it's just too",
    "start": "1956360",
    "end": "1961760"
  },
  {
    "text": "easy okay binary reflection so that's that's",
    "start": "1961760",
    "end": "1967960"
  },
  {
    "text": "that's beautiful so binary reflection what are",
    "start": "1967960",
    "end": "1973919"
  },
  {
    "text": "we talking about if you tell me a reflection without a VM I don't don't even know what that's supposed to",
    "start": "1973919",
    "end": "1979840"
  },
  {
    "text": "mean like let's say I would like I would like functions equivalent to reflection",
    "start": "1979840",
    "end": "1985039"
  },
  {
    "text": "in Java so being able to um load applications enumerate the function",
    "start": "1985039",
    "end": "1992840"
  },
  {
    "text": "prototype instantiate them in memory and call them as I",
    "start": "1992840",
    "end": "1998398"
  },
  {
    "text": "like so we're going to do exactly that but without a",
    "start": "1998559",
    "end": "2004240"
  },
  {
    "text": "VM so the the happens around dlopen like um like um we showed",
    "start": "2005880",
    "end": "2013799"
  },
  {
    "text": "initially um so wsh is okay I I showed you first the U unlink so the um the",
    "start": "2013799",
    "end": "2021120"
  },
  {
    "text": "dynamic Linker I showed you the um WCC",
    "start": "2021120",
    "end": "2026639"
  },
  {
    "text": "the core compiler now I'm going to show you wsh which is the wishcraft",
    "start": "2026639",
    "end": "2032399"
  },
  {
    "text": "shell so it's really built around Lua and the trick is whenever you look bu a",
    "start": "2032399",
    "end": "2038519"
  },
  {
    "text": "shared Library using DL open in memory posix says the dynamic Linker has to",
    "start": "2038519",
    "end": "2046000"
  },
  {
    "text": "keep a cache of all the functions loaded in memory along with their",
    "start": "2046000",
    "end": "2051358"
  },
  {
    "text": "address so if I can dump that basically I know all the functions",
    "start": "2051359",
    "end": "2057839"
  },
  {
    "text": "which exist in memory and I know where to call them in terms of",
    "start": "2057839",
    "end": "2063878"
  },
  {
    "text": "prototyping I can cheat even if I don't know exactly how many arguments the",
    "start": "2063879",
    "end": "2069398"
  },
  {
    "text": "function expects I mean on a 64-bit machine basically imagine you have a function",
    "start": "2069399",
    "end": "2076398"
  },
  {
    "text": "taking three arguments what happen if I pass it four arguments well I'm initializing an additional register",
    "start": "2076399",
    "end": "2082240"
  },
  {
    "text": "which is not going to be used nobody car if he was on a 32-bit machine it would",
    "start": "2082240",
    "end": "2087560"
  },
  {
    "text": "be like passing additional arguments on the stack which will also never be um popped and never be",
    "start": "2087560",
    "end": "2094320"
  },
  {
    "text": "pbed so long story short you don't exactly need to know the exact prototype of a function to call",
    "start": "2094320",
    "end": "2102119"
  },
  {
    "text": "them and notice that we didn't do any disassembly and we didn't do any decompilation",
    "start": "2102119",
    "end": "2109880"
  },
  {
    "text": "either okay I'm going to skip this for now too much text not",
    "start": "2114160",
    "end": "2120720"
  },
  {
    "start": "2118000",
    "end": "2183000"
  },
  {
    "text": "cool proper witchcraft so assume for now uh we get",
    "start": "2121359",
    "end": "2126960"
  },
  {
    "text": "this reflection stuff to work and I Ed basically a very small Lua interpreter",
    "start": "2126960",
    "end": "2133240"
  },
  {
    "text": "just so that I can get back the result of my functions and I can pass arguments easily",
    "start": "2133240",
    "end": "2139560"
  },
  {
    "text": "okay so the resulting programming language which is basically uh reflected",
    "start": "2139560",
    "end": "2145119"
  },
  {
    "text": "C plus Lua I call that punk C because it allows you to write almost",
    "start": "2145119",
    "end": "2151880"
  },
  {
    "text": "C with some tricks so that the language of the The",
    "start": "2151880",
    "end": "2157880"
  },
  {
    "text": "Interpreter itself um you can type the comments directly inside wsh or you type",
    "start": "2157880",
    "end": "2164359"
  },
  {
    "text": "or the comment the exact commands you would type in The Interpreter you write them in a text file you call that wsh",
    "start": "2164359",
    "end": "2171640"
  },
  {
    "text": "and this is it the the Witchcraft shell will understand that those are common and this is a",
    "start": "2171640",
    "end": "2177960"
  },
  {
    "text": "script of course you can use the traditional shebang mechanism if you don't want to call it",
    "start": "2177960",
    "end": "2184079"
  },
  {
    "start": "2183000",
    "end": "2416000"
  },
  {
    "text": "wsh demo time so I'm going to show you this is going to go really fast but",
    "start": "2184079",
    "end": "2192440"
  },
  {
    "text": "uh but this is cool so here is the script I'm going to",
    "start": "2193200",
    "end": "2199960"
  },
  {
    "text": "execute uh you can see that I'm basically typing commments in there and they're going to be executed",
    "start": "2201079",
    "end": "2208920"
  },
  {
    "text": "okay this is going to be too fast but this is going to show you a bit like what are all the capabilities of this",
    "start": "2211280",
    "end": "2216520"
  },
  {
    "text": "tool so we can load libraries I can load",
    "start": "2216520",
    "end": "2223440"
  },
  {
    "text": "Apache if I ask him show me the libraries in memory there's more libraries okay I can get a mapping of um",
    "start": "2223440",
    "end": "2231200"
  },
  {
    "text": "the program eer or the section leers to verify it's consistent I can actually breit forth the address space using",
    "start": "2231200",
    "end": "2237800"
  },
  {
    "text": "msync which is a function which is supposed to synchronize back a page to disk if it's mapped so this allows you",
    "start": "2237800",
    "end": "2244720"
  },
  {
    "text": "to bre Force anything even if SL proc is not available um but the EP which is not backed by",
    "start": "2244720",
    "end": "2251720"
  },
  {
    "text": "files unless using a map whatever you can call things like get ped you can get",
    "start": "2251720",
    "end": "2257280"
  },
  {
    "text": "like a list of all the functions available in memory and their addresses you can call those functions",
    "start": "2257280",
    "end": "2264960"
  },
  {
    "text": "you can ask information about memory location you can grap so you can yeah",
    "start": "2264960",
    "end": "2271880"
  },
  {
    "text": "grab stuff in memory uh the result of grab being a function itself you can turn that into",
    "start": "2271880",
    "end": "2278520"
  },
  {
    "text": "gon that you can D reference later on I'll explain you more about that um you can search things in memory",
    "start": "2278520",
    "end": "2287040"
  },
  {
    "text": "like functions by name you can call those functions like we just did before uh displaying",
    "start": "2287040",
    "end": "2293520"
  },
  {
    "text": "banners uh we can use break points uh which are not backed by Interruption",
    "start": "2293520",
    "end": "2299160"
  },
  {
    "text": "13 by Interruption three explain you that too uh we can use C functions directly",
    "start": "2299160",
    "end": "2305319"
  },
  {
    "text": "from the shell we can X dump memory uh what else can we do we can get",
    "start": "2305319",
    "end": "2310720"
  },
  {
    "text": "information about memory locations okay so if I do a maloc I can",
    "start": "2310720",
    "end": "2316720"
  },
  {
    "text": "get the return pointer ask him what it is uh so all that is pretty trivial um",
    "start": "2316720",
    "end": "2324599"
  },
  {
    "text": "when the application crashes on read or write and stuff like that the application does not die which is cool",
    "start": "2324599",
    "end": "2330880"
  },
  {
    "text": "because it's not pit based uh you can get context about all",
    "start": "2330880",
    "end": "2336240"
  },
  {
    "text": "the functions you called I'm going to do all that manually later on like don't worry for the purpose of my demo like",
    "start": "2336240",
    "end": "2342359"
  },
  {
    "text": "just just assume this this stuff works so right now we're doing this with",
    "start": "2342359",
    "end": "2348160"
  },
  {
    "text": "an Intel binary uh because we loaded like Apache",
    "start": "2348160",
    "end": "2354240"
  },
  {
    "text": "and ssh in memory okay we can export eers in C if we want",
    "start": "2354240",
    "end": "2360119"
  },
  {
    "text": "to compile them later on we can call Main we can call md5 functions outside",
    "start": "2360119",
    "end": "2366960"
  },
  {
    "text": "and stuff like that okay so that was cool but that was on an Intel binary why am i showing you this you ready for",
    "start": "2366960",
    "end": "2374720"
  },
  {
    "text": "this okay we're going to do the exact same thing but right now I cross compiled wsh",
    "start": "2374720",
    "end": "2382520"
  },
  {
    "text": "as a n binary and I'm using a word mode of qmu which does J binary translation",
    "start": "2382520",
    "end": "2388240"
  },
  {
    "text": "for me in memory so basically right now I'm running an on binary without VM on",
    "start": "2388240",
    "end": "2394520"
  },
  {
    "text": "my Linux machine which is Intel based and as you can see like basically the output of this command is the same as",
    "start": "2394520",
    "end": "2401000"
  },
  {
    "text": "the previous one so we can debug pretty much fully on binaries uh yeah without a",
    "start": "2401000",
    "end": "2408280"
  },
  {
    "text": "VM that's awesome or",
    "start": "2408280",
    "end": "2412119"
  },
  {
    "text": "[Applause] what thank you since that was since that was really fast uh I'm going to redo it",
    "start": "2414040",
    "end": "2421560"
  },
  {
    "text": "manually with you more slowly so let's start wsh",
    "start": "2421560",
    "end": "2428119"
  },
  {
    "text": "uh it typically expects a binary I mean you can pass it an optional binary as an argument so let's load for instance uh",
    "start": "2428119",
    "end": "2439599"
  },
  {
    "text": "SSH so wsh is uh loading ssh in memory I get a prompt",
    "start": "2440880",
    "end": "2448000"
  },
  {
    "text": "back let's take a look at the commments available okay so all those are like",
    "start": "2448000",
    "end": "2454920"
  },
  {
    "text": "built-in commands Okay think like X dumping memory um information about memory",
    "start": "2454920",
    "end": "2463839"
  },
  {
    "text": "mappings information about symbols uh stuff to search um so functions like grap which",
    "start": "2463839",
    "end": "2471359"
  },
  {
    "text": "allow to which allow you to grab any mapping including the e um you can load more than one Library",
    "start": "2471359",
    "end": "2478119"
  },
  {
    "text": "so for instance right now I can ask it okay show me the library show me the libraries that you have loaded into your",
    "start": "2478119",
    "end": "2484880"
  },
  {
    "text": "address space it's worth understanding this is not this is not working like a",
    "start": "2484880",
    "end": "2490960"
  },
  {
    "text": "typical debugger where you have a debugger debugging a debug e since I'm using",
    "start": "2490960",
    "end": "2497520"
  },
  {
    "text": "dlopen uh what The Interpreter is doing is loading in this case SSH and all its",
    "start": "2497520",
    "end": "2503680"
  },
  {
    "text": "dependencies inside his own address space and not inside another address space the benefit is you don't need pet",
    "start": "2503680",
    "end": "2512640"
  },
  {
    "text": "trace and another Advantage is that when the",
    "start": "2513200",
    "end": "2518680"
  },
  {
    "text": "Witchcraft interpreter is examining his own memory is at the same time examining",
    "start": "2518680",
    "end": "2523839"
  },
  {
    "text": "like you know the memory of ss or whatever program you loaded so let's load one more program so",
    "start": "2523839",
    "end": "2530079"
  },
  {
    "text": "for instance let's load like you know let's load Apache in",
    "start": "2530079",
    "end": "2535318"
  },
  {
    "text": "addition okay so after loading SSH I had 23 libraries I also loaded Apache so",
    "start": "2539440",
    "end": "2545960"
  },
  {
    "text": "hopefully I have more now okay now I have 28 and you can see that um you know all",
    "start": "2545960",
    "end": "2552920"
  },
  {
    "text": "the dependencies of both SSH and Apache have been mapped in",
    "start": "2552920",
    "end": "2558119"
  },
  {
    "text": "memory so what are the functions available for me to program with that well the command is",
    "start": "2558680",
    "end": "2565160"
  },
  {
    "start": "2559000",
    "end": "2673000"
  },
  {
    "text": "functions not too hard so I have the",
    "start": "2565160",
    "end": "2572359"
  },
  {
    "text": "library where um where the function lives the name of the function and then",
    "start": "2572359",
    "end": "2578559"
  },
  {
    "text": "a bunch of information in this case I have like eight about 8,000 functions",
    "start": "2578559",
    "end": "2585640"
  },
  {
    "text": "that are loaded in memory and then I can call directly from my interpreter okay um let's search for",
    "start": "2585640",
    "end": "2593400"
  },
  {
    "text": "stuff which returns versions for instance uh okay",
    "start": "2593400",
    "end": "2602079"
  },
  {
    "text": "17 so let's call APR version string for instance we we would assume returns a",
    "start": "2602079",
    "end": "2608520"
  },
  {
    "text": "string which is like the function of lipr which comes with Apache right so if",
    "start": "2608520",
    "end": "2614559"
  },
  {
    "text": "I want to do this I can write something like this and that's why I used Lua it's",
    "start": "2614559",
    "end": "2619680"
  },
  {
    "text": "to be able to have you know those variable living in memory and existing and stuff like that so if I want to call",
    "start": "2619680",
    "end": "2627040"
  },
  {
    "text": "it with zero arguments I just call it like this and hopefully print of",
    "start": "2627040",
    "end": "2635240"
  },
  {
    "text": "a is going to return me the version of lipr this is SEC",
    "start": "2635240",
    "end": "2642920"
  },
  {
    "text": "word okay how about another one",
    "start": "2643480",
    "end": "2648720"
  },
  {
    "text": "uh G get lipy",
    "start": "2648720",
    "end": "2652760"
  },
  {
    "text": "version so if I wanted to pass it arguments I just write it something like",
    "start": "2655040",
    "end": "2662040"
  },
  {
    "text": "this okay and I just called this function inside the lipy with argument",
    "start": "2662040",
    "end": "2667839"
  },
  {
    "text": "4141 4141",
    "start": "2667839",
    "end": "2671880"
  },
  {
    "text": "four and that the version of my DPC this is awesome what so the beauty of um",
    "start": "2672920",
    "end": "2681839"
  },
  {
    "start": "2673000",
    "end": "2758000"
  },
  {
    "text": "using Lua is that you can return more than one return uh",
    "start": "2681839",
    "end": "2688520"
  },
  {
    "text": "value so actually every time I call a function like this inside The Interpreter it transparently also",
    "start": "2688520",
    "end": "2695160"
  },
  {
    "text": "returns me into a second variable a context which describes what happened when you try to",
    "start": "2695160",
    "end": "2701640"
  },
  {
    "text": "execute this function so if I dump",
    "start": "2701640",
    "end": "2706920"
  },
  {
    "text": "it uh it tells me when you try to do this call",
    "start": "2706920",
    "end": "2712359"
  },
  {
    "text": "here so this function came from this Library equ called it with one argument",
    "start": "2712359",
    "end": "2718119"
  },
  {
    "text": "okay one argument uh error number is zero which means success no",
    "start": "2718119",
    "end": "2724680"
  },
  {
    "text": "error and the return return value was this and no signal was associated with this you may be what the point in doing",
    "start": "2724680",
    "end": "2732200"
  },
  {
    "text": "this the point is to have automated function prototyping so let's take for instance",
    "start": "2732200",
    "end": "2739160"
  },
  {
    "text": "we said uh Li APR there's a building um uh further inside um The",
    "start": "2739160",
    "end": "2749240"
  },
  {
    "text": "Interpreter so",
    "start": "2749240",
    "end": "2753240"
  },
  {
    "start": "2758000",
    "end": "2805000"
  },
  {
    "text": "okay if I Tye this it's going to look for any Library which has APR into his name any numerate all the functions in",
    "start": "2759200",
    "end": "2766079"
  },
  {
    "text": "them and call them with random arguments hopefully that's going to somewhat",
    "start": "2766079",
    "end": "2771440"
  },
  {
    "text": "crash okay so that's what he's doing right now so um the colors mean like",
    "start": "2771440",
    "end": "2777200"
  },
  {
    "text": "okay uh if you segmentation fault on a read like a typically here uh it's green",
    "start": "2777200",
    "end": "2783240"
  },
  {
    "text": "it tried to read zero which is not mapped so that crashed when it's red it",
    "start": "2783240",
    "end": "2788319"
  },
  {
    "text": "tried to execute the associated uh the associated",
    "start": "2788319",
    "end": "2793880"
  },
  {
    "text": "uh pointer so why is this cool well if I reload",
    "start": "2793880",
    "end": "2799880"
  },
  {
    "text": "it okay",
    "start": "2799880",
    "end": "2805160"
  },
  {
    "start": "2805000",
    "end": "2885000"
  },
  {
    "text": "Apache if I ask it in memory show me the Prototype of all the functions you've learned through this",
    "start": "2805160",
    "end": "2812119"
  },
  {
    "text": "execution is going to tell me okay I try to execute for instance",
    "start": "2812119",
    "end": "2818838"
  },
  {
    "text": "uh I use printf and I discovered that the second argument is an input argument",
    "start": "2818960",
    "end": "2824440"
  },
  {
    "text": "so this is annotation on top of the Prototype of the function if you ever",
    "start": "2824440",
    "end": "2829800"
  },
  {
    "text": "read the source code of Microsoft because it leaked or because you did some Consulting for them or",
    "start": "2829800",
    "end": "2837160"
  },
  {
    "text": "whatever um they were trying at some stage to annotate every function like this like what is read what is written",
    "start": "2837160",
    "end": "2844000"
  },
  {
    "text": "and what is executed the benefit for it being to do um Anyan static",
    "start": "2844000",
    "end": "2850280"
  },
  {
    "text": "analysis so basically the tool can discover this by itself by trying to",
    "start": "2850280",
    "end": "2855559"
  },
  {
    "text": "execute um you know with chosen arguments uh all those functions and it",
    "start": "2855559",
    "end": "2860839"
  },
  {
    "text": "tells you for instance like okay um this function here the first argument is a function",
    "start": "2860839",
    "end": "2867000"
  },
  {
    "text": "pointer we didn't disassemble we didn't decompile this is awesome or",
    "start": "2867000",
    "end": "2874200"
  },
  {
    "text": "what to be fair I never thought that would work but um but it does so we can do stuff like",
    "start": "2875839",
    "end": "2884680"
  },
  {
    "text": "grap uh let's grab for lib for instance in all the address Spas so all the",
    "start": "2884839",
    "end": "2890839"
  },
  {
    "start": "2885000",
    "end": "2939000"
  },
  {
    "text": "function uh all the shared libraries and all the",
    "start": "2890839",
    "end": "2895760"
  },
  {
    "text": "mappings okay so that's grap and the return in a is actually a",
    "start": "2896040",
    "end": "2902079"
  },
  {
    "text": "table which I can dump and it will contain all the offsets of a of you know",
    "start": "2902079",
    "end": "2908000"
  },
  {
    "text": "that matched so it found like 170 occurrences of lib in memory this is way",
    "start": "2908000",
    "end": "2916160"
  },
  {
    "text": "easier than trying to use a debugger or um or",
    "start": "2916160",
    "end": "2922000"
  },
  {
    "text": "disassemble so what other functions do we have",
    "start": "2922520",
    "end": "2927960"
  },
  {
    "text": "uh yeah I guess that'll be it for now okay uh a cool thing is um you can",
    "start": "2928680",
    "end": "2935720"
  },
  {
    "text": "export you can export a basic prototype for all",
    "start": "2935720",
    "end": "2942680"
  },
  {
    "start": "2939000",
    "end": "2975000"
  },
  {
    "text": "those functions that will generate you cers so you can relink against uh shared",
    "start": "2942680",
    "end": "2949200"
  },
  {
    "text": "libraries and to be honest you don't what the fun you don't actually need uh",
    "start": "2949200",
    "end": "2954599"
  },
  {
    "text": "you don't actually need for your compiler to be happy and to understand what you mean you don't need to P them a",
    "start": "2954599",
    "end": "2960000"
  },
  {
    "text": "lot of information if you just Define the function pointer as a void star which is going to be like 8 bytes on a",
    "start": "2960000",
    "end": "2965920"
  },
  {
    "text": "64-bit machine machine and you don't even tell them how many argument the function take GCC is going to be happy",
    "start": "2965920",
    "end": "2971599"
  },
  {
    "text": "with that which is cool okay that was the dishcraft demo we",
    "start": "2971599",
    "end": "2979200"
  },
  {
    "start": "2975000",
    "end": "3273000"
  },
  {
    "text": "did the arm one future work so if you want to contribute",
    "start": "2979200",
    "end": "2984720"
  },
  {
    "text": "patches stuff I would really like right now uh my e memory allocator is using the",
    "start": "2984720",
    "end": "2992119"
  },
  {
    "text": "same memory allocator uh from the lipy so p maloc uh uh then the binaries we",
    "start": "2992119",
    "end": "3000920"
  },
  {
    "text": "analyze this sucks because if we have a memory corruption I'm going to corrupt also my EP so using a secondary e",
    "start": "3000920",
    "end": "3009160"
  },
  {
    "text": "allocator would allow us to segregate that and when there is a memory corruption that we trigger in the",
    "start": "3009160",
    "end": "3015240"
  },
  {
    "text": "debugged application we wouldn't trigger memory corruption inside own application so",
    "start": "3015240",
    "end": "3021400"
  },
  {
    "text": "that would be cool um we could do that using pallo Itself by defining another",
    "start": "3021400",
    "end": "3027280"
  },
  {
    "text": "uh arena for the E but I think a secondary uh memory allocator by looking",
    "start": "3027280",
    "end": "3032960"
  },
  {
    "text": "against you know another version of PT Malo or D as Malo would",
    "start": "3032960",
    "end": "3038559"
  },
  {
    "text": "do remote debugging um I've actually already merged this so if you look at",
    "start": "3038599",
    "end": "3044880"
  },
  {
    "text": "the example on GitHub there's already um an example of doing remote",
    "start": "3044880",
    "end": "3050880"
  },
  {
    "text": "debugging uh process injection so something like if you have a running process could we in inject wsh inside a",
    "start": "3050880",
    "end": "3058480"
  },
  {
    "text": "running process the limitation I have run now is um I explained you that when I patch",
    "start": "3058480",
    "end": "3066480"
  },
  {
    "text": "when we take a binary and transform it into a shared Library by patching one bite in the eer the resulting binary is not",
    "start": "3066480",
    "end": "3074720"
  },
  {
    "text": "relocatable okay it's not a real shared library in the sense it has to be mapped at a given address so to avoid conflicts",
    "start": "3074720",
    "end": "3082440"
  },
  {
    "text": "I compile wsh with a custom link script at given address which is different from",
    "start": "3082440",
    "end": "3088440"
  },
  {
    "text": "the one typical compilers would give you this mean that it's not a shared",
    "start": "3088440",
    "end": "3093480"
  },
  {
    "text": "library and I cannot inject it so yeah a bit of work to do on",
    "start": "3093480",
    "end": "3099799"
  },
  {
    "text": "this Shadow mapping internal tracing stuff like that something I really like",
    "start": "3099799",
    "end": "3104920"
  },
  {
    "text": "is um to use the output of L trace or S trace on a binary and transform that",
    "start": "3104920",
    "end": "3111240"
  },
  {
    "text": "directly into a wsh script that's not too much work I think",
    "start": "3111240",
    "end": "3117359"
  },
  {
    "text": "that should work for next time any",
    "start": "3117359",
    "end": "3123799"
  },
  {
    "text": "questions",
    "start": "3124079",
    "end": "3127079"
  },
  {
    "text": "yep I can't seear can we pass in the microphone",
    "start": "3131799",
    "end": "3138280"
  },
  {
    "text": "uh yeah is there a risk that some Colonel developer will see uh some of this as bugs and try and fix it so it",
    "start": "3156119",
    "end": "3162839"
  },
  {
    "text": "won't work in future um I mean the only thing we're",
    "start": "3162839",
    "end": "3168640"
  },
  {
    "text": "leveraging from the colel is the fact that",
    "start": "3168640",
    "end": "3174319"
  },
  {
    "text": "um um basically is Works uh I I I don't think the tradeoff",
    "start": "3174319",
    "end": "3181640"
  },
  {
    "text": "would be you know in favor of breaking my to break my tool to destroy 15 years",
    "start": "3181640",
    "end": "3187920"
  },
  {
    "text": "of security on the Linux colel so that's that's rather unlikely but honestly like",
    "start": "3187920",
    "end": "3193240"
  },
  {
    "text": "all the stuff I'm using are like you know posix features they're not bugs so that's not going to get fixed that's so",
    "start": "3193240",
    "end": "3199520"
  },
  {
    "text": "that's that's how it's supposed to work I mean I understand it's counterintuitive but um it's very much",
    "start": "3199520",
    "end": "3205920"
  },
  {
    "text": "standard in particular the trick of using DL openen",
    "start": "3205920",
    "end": "3211200"
  },
  {
    "text": "and of dumping the cach of the dynamic Linker is not lipy specific it's a posix",
    "start": "3211200",
    "end": "3216799"
  },
  {
    "text": "compliance requirement which means you don't have to use the lipy if you use micro lipy or other dipsas that's also",
    "start": "3216799",
    "end": "3224319"
  },
  {
    "text": "going to work so it's fairly portable actually good question",
    "start": "3224319",
    "end": "3230079"
  },
  {
    "text": "though oh Windows Windows Windows I mean it's a good question cuz they starting",
    "start": "3230079",
    "end": "3236520"
  },
  {
    "text": "to be POS compliant to a degree with Ubuntu I haven't tried much to be",
    "start": "3236520",
    "end": "3242559"
  },
  {
    "text": "honest UB St runs binaries so if you go to then you don't have all those exports",
    "start": "3242559",
    "end": "3250280"
  },
  {
    "text": "andu like it's it's uh yeah yeah it's a fair question um it's worth trying to",
    "start": "3250280",
    "end": "3256160"
  },
  {
    "text": "compile um um WCC on a on a Windows machine and let me know uh I I haven't",
    "start": "3256160",
    "end": "3263280"
  },
  {
    "text": "tried to be honest I I don't do a lot of windows",
    "start": "3263280",
    "end": "3268319"
  },
  {
    "text": "any other question well thank you for your time today",
    "start": "3268319",
    "end": "3274960"
  }
]