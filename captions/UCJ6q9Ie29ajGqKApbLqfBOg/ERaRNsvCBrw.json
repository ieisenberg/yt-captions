[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "so who is excited about this amazing technology called XML",
    "start": "7880",
    "end": "14540"
  },
  {
    "text": "some people are okay okay let's try something different uh who's excited about zero click attacks on Messengers",
    "start": "15000",
    "end": "22640"
  },
  {
    "text": "or maybe some more people okay well that's that that's a shame because it's more about the first topic than about the second one",
    "start": "23160",
    "end": "30800"
  },
  {
    "text": "um I can understand the lack of excitement uh in some of you about XML though because you see uh",
    "start": "32099",
    "end": "39120"
  },
  {
    "text": "when XML was young I was a young computer science student and I wasn't",
    "start": "39120",
    "end": "44520"
  },
  {
    "text": "excited about it back then either um some people were though so you know I I",
    "start": "44520",
    "end": "50219"
  },
  {
    "text": "remember this one guy who was like excited about it and and and talking",
    "start": "50219",
    "end": "55320"
  },
  {
    "text": "about how this how is this amazing new technology and I'm just you know I'm standing there",
    "start": "55320",
    "end": "61500"
  },
  {
    "text": "I'm politely nodding my head but inside I'm thinking GI must have chosen the",
    "start": "61500",
    "end": "66960"
  },
  {
    "text": "wrong profession um so fast forward two decades later I'm",
    "start": "66960",
    "end": "73860"
  },
  {
    "text": "finally excited about XML uh for all the wrong reasons um so yeah XML you can do stuff with it",
    "start": "73860",
    "end": "80759"
  },
  {
    "text": "if you're a security researcher um anyway welcome folks to xmpp stanza",
    "start": "80759",
    "end": "87060"
  },
  {
    "text": "smuggling or how I hacked Zoom I'm Ivan fratrich I'm with Google project zero",
    "start": "87060",
    "end": "93780"
  },
  {
    "text": "I've been doing this security research for a long time now I stopped counting after after 10 years because",
    "start": "93780",
    "end": "100860"
  },
  {
    "text": "counting after that just made me feel old [Music]",
    "start": "100860",
    "end": "105920"
  },
  {
    "text": "wrote some security tools to help others with security research and we might even",
    "start": "105920",
    "end": "111780"
  },
  {
    "text": "see some of them in action in this talk right so let's talk about xmpp",
    "start": "111780",
    "end": "119960"
  },
  {
    "text": "xmpp stands for extensible messaging and presence protocol and it's essentially",
    "start": "119960",
    "end": "127099"
  },
  {
    "text": "uh instant messaging protocol based on XML and when something is built on top",
    "start": "127099",
    "end": "134040"
  },
  {
    "text": "of a technology that's over two decades old you know uh it's a good Target for",
    "start": "134040",
    "end": "139500"
  },
  {
    "text": "security research so xmpp is a protocol that's used in",
    "start": "139500",
    "end": "145680"
  },
  {
    "text": "various applications EU applications it's it's used in uh in some Messengers",
    "start": "145680",
    "end": "150900"
  },
  {
    "text": "it's used in some applications that have a messaging feature like Zoom for",
    "start": "150900",
    "end": "157860"
  },
  {
    "text": "example uh but also in in other applications for example it's these days quite popular in online games and also I",
    "start": "157860",
    "end": "167040"
  },
  {
    "text": "hear in industrial applications um so even though this talk has zoom in",
    "start": "167040",
    "end": "173940"
  },
  {
    "text": "the name it's not really only about Zoom most of the stuff you hear today is",
    "start": "173940",
    "end": "179519"
  },
  {
    "text": "going to be applicable to other targets however since Zoom is the most high",
    "start": "179519",
    "end": "185640"
  },
  {
    "text": "impact Target that I know that uses xmpp protocol uh Zoom is going to be used as",
    "start": "185640",
    "end": "192599"
  },
  {
    "text": "an example throughout this presentation and there is also going to be an exploitation case study later in the",
    "start": "192599",
    "end": "198959"
  },
  {
    "text": "talk um so as I said xmpp is a message protocol based on XML",
    "start": "198959",
    "end": "206180"
  },
  {
    "text": "and the way it works is you have XML sent over stream connection so",
    "start": "206180",
    "end": "215099"
  },
  {
    "text": "here you can see an example of how an xmpb stream simplified might",
    "start": "215099",
    "end": "223620"
  },
  {
    "text": "look like so at the start it starts by opening a stream tag which would be at",
    "start": "223620",
    "end": "228840"
  },
  {
    "text": "like the root level of the xml3 and then at level one of the tree you have some",
    "start": "228840",
    "end": "236099"
  },
  {
    "text": "Snippets of XML that are called stanzas and the stanza is a basic unit of",
    "start": "236099",
    "end": "242760"
  },
  {
    "text": "transfer in this xmpp protocol so here in the slide you can see examples of two",
    "start": "242760",
    "end": "247799"
  },
  {
    "text": "stanzas one is a message stanza and this is an example of something",
    "start": "247799",
    "end": "253260"
  },
  {
    "text": "that's meant to be sent from one client to another in this case it's an actual instant message",
    "start": "253260",
    "end": "259620"
  },
  {
    "text": "the second one is the IQ stanza and unlike the first one IQ stands that",
    "start": "259620",
    "end": "265620"
  },
  {
    "text": "typically isn't sent from one client to another it's me it's more meant to be exchanged between the client and the",
    "start": "265620",
    "end": "272580"
  },
  {
    "text": "server so these are kind of control messages and when you see this in security when",
    "start": "272580",
    "end": "277919"
  },
  {
    "text": "you see control messages being sent over the same text-based connection as user",
    "start": "277919",
    "end": "284639"
  },
  {
    "text": "control data then you might be thinking about injection attacks and lack of",
    "start": "284639",
    "end": "289860"
  },
  {
    "text": "escaping and this might work depending on how the tar how the service is",
    "start": "289860",
    "end": "294900"
  },
  {
    "text": "implemented however it's not exactly what we will be talking about today",
    "start": "294900",
    "end": "300620"
  },
  {
    "text": "instead let's examine some other features of this xmpp protocol",
    "start": "300620",
    "end": "306120"
  },
  {
    "text": "so what you can see here is uh is an example of a message stanza from the",
    "start": "306120",
    "end": "312180"
  },
  {
    "text": "perspective of the sender and the perspective of the receiver so on the top you can see what the sender sends on",
    "start": "312180",
    "end": "318479"
  },
  {
    "text": "the bottom you can see what the receiver receives and you can see it's more or less the same you can see the message",
    "start": "318479",
    "end": "324240"
  },
  {
    "text": "highlighted but you can also see a bunch of XML tags inside this stanza so one",
    "start": "324240",
    "end": "330000"
  },
  {
    "text": "thing I was wondering is what would happen if I put some other XML tags",
    "start": "330000",
    "end": "335460"
  },
  {
    "text": "inside this stanza and a surprising result at least to me was that this",
    "start": "335460",
    "end": "342180"
  },
  {
    "text": "custom XML made it all the way through and I'm I'm not sure how you folks feel",
    "start": "342180",
    "end": "347880"
  },
  {
    "text": "about this but when I saw this I was like mindful uh because I thought you",
    "start": "347880",
    "end": "353820"
  },
  {
    "text": "know I can do stuff with this and and it turns out you really can",
    "start": "353820",
    "end": "359340"
  },
  {
    "text": "um one note here though is that any custom XML",
    "start": "359340",
    "end": "364680"
  },
  {
    "text": "you put in this way needs to be valid from the perspective of the server because the server is going to parse",
    "start": "364680",
    "end": "372419"
  },
  {
    "text": "this XML and if the server encounters a parsing error then it's just going to terminate the connection and not process",
    "start": "372419",
    "end": "378780"
  },
  {
    "text": "the stanza further So speaking about this server let's take a look at how a typical xmpp",
    "start": "378780",
    "end": "386160"
  },
  {
    "text": "infrastructure looks like um so uh we are just going to focus on",
    "start": "386160",
    "end": "393120"
  },
  {
    "text": "parts that touch XML directly obviously it's way more complicated than this uh",
    "start": "393120",
    "end": "399180"
  },
  {
    "text": "but how it works is that a client sends a stanza to the server which is in XML",
    "start": "399180",
    "end": "405780"
  },
  {
    "text": "format the server needs to parse it and then the server would do whatever",
    "start": "405780",
    "end": "411900"
  },
  {
    "text": "processing it needs to do based on the stanza type and then if the server",
    "start": "411900",
    "end": "417360"
  },
  {
    "text": "decides that this is a stance that that it needs to forward to another client it's going to serialize it it's going to",
    "start": "417360",
    "end": "424139"
  },
  {
    "text": "convert it from object representation back into a text representation it's",
    "start": "424139",
    "end": "429900"
  },
  {
    "text": "going to parse it it's going to uh it's going to uh send it over that string connection to",
    "start": "429900",
    "end": "437520"
  },
  {
    "text": "the client and then the client needs to parse it again so at this point",
    "start": "437520",
    "end": "443580"
  },
  {
    "text": "let's try to answer the question what can go wrong here and the first part of the answer you already saw which is that",
    "start": "443580",
    "end": "451080"
  },
  {
    "text": "you can send custom XML all the way through this pipeline but by its own this doesn't give you",
    "start": "451080",
    "end": "459240"
  },
  {
    "text": "anything however let's combine it with the fact that XML is complicated and XML",
    "start": "459240",
    "end": "465000"
  },
  {
    "text": "parsers have quirks and if you don't know what I mean by quirks then here's a challenge for you",
    "start": "465000",
    "end": "471660"
  },
  {
    "text": "find me two XML parsers two different XML parsers that always for every input",
    "start": "471660",
    "end": "478319"
  },
  {
    "text": "will result in the same output um and I'm I'm willing to bet that you are going to have a very hard time with",
    "start": "478319",
    "end": "485160"
  },
  {
    "text": "that so at this point let me introduce what I",
    "start": "485160",
    "end": "491639"
  },
  {
    "text": "call xmpp stanza smuggling attacks in theory it's an attack where a client sends a",
    "start": "491639",
    "end": "499620"
  },
  {
    "text": "stanza with some custom XML embedded the server parses this stanza sees a single",
    "start": "499620",
    "end": "505860"
  },
  {
    "text": "stanza nothing unusual sends it to the client and then the client parses this again",
    "start": "505860",
    "end": "512580"
  },
  {
    "text": "but instead of seeing a single stanza it is multiple stances so in a way we are smuggling stanzas",
    "start": "512580",
    "end": "520140"
  },
  {
    "text": "from one client to another through the server hence",
    "start": "520140",
    "end": "525180"
  },
  {
    "text": "the name of the attack and this is not a single vulnerability",
    "start": "525180",
    "end": "530880"
  },
  {
    "text": "in fact there can be different vulnerability types that enable this kind of attack so for example the first",
    "start": "530880",
    "end": "537240"
  },
  {
    "text": "type that I saw was due to differences between XML parsers on the client and",
    "start": "537240",
    "end": "544200"
  },
  {
    "text": "the server however you can also have bugs that enable this attack data server only typically due to interaction",
    "start": "544200",
    "end": "551399"
  },
  {
    "text": "between the parser and the serializer and finally you can also have bugs with",
    "start": "551399",
    "end": "556620"
  },
  {
    "text": "a client only and once again this talk is not only about Zoom so here you can see bugs that",
    "start": "556620",
    "end": "564120"
  },
  {
    "text": "affected Zoom but also uh you can see bugs that affected other targets some of",
    "start": "564120",
    "end": "569220"
  },
  {
    "text": "these bugs affected multiple targets um and I can also neither confirm nor",
    "start": "569220",
    "end": "574740"
  },
  {
    "text": "deny that there are other bugs not listed in this slide",
    "start": "574740",
    "end": "580040"
  },
  {
    "text": "but as I said Zoom is going to be used as an example so it's useful to see how",
    "start": "580860",
    "end": "585959"
  },
  {
    "text": "this xmpp infrastructure looks like in Zoom case so on the client Zoom uses",
    "start": "585959",
    "end": "593399"
  },
  {
    "text": "a library called glux which is uh an xmpp client Library open source",
    "start": "593399",
    "end": "600240"
  },
  {
    "text": "it has its own XML parser and on the server uh Zoom is based on xmpp server called",
    "start": "600240",
    "end": "607500"
  },
  {
    "text": "ejab Rd which is written in erlang if you can believe that erlang uh sorry",
    "start": "607500",
    "end": "613320"
  },
  {
    "text": "ajabi has a library called fastx ml for handling",
    "start": "613320",
    "end": "618839"
  },
  {
    "text": "all of the XML related stuff and fast XML uses another Library which",
    "start": "618839",
    "end": "624060"
  },
  {
    "text": "is more popular which is called expat for XML parsing at this point you might be wondering how",
    "start": "624060",
    "end": "632580"
  },
  {
    "text": "the hell does he know what Zoom runs on their servers well whenever I want to know what someone",
    "start": "632580",
    "end": "639300"
  },
  {
    "text": "runs on their servers one thing I like to look at are the job ads and here you",
    "start": "639300",
    "end": "645899"
  },
  {
    "text": "can see conveniently a job ad for a senior xmpp engineer at zoom and there",
    "start": "645899",
    "end": "651660"
  },
  {
    "text": "is a word that stood out here and that word is erlang and erlang in combination with xmpp can only mean e Jeopardy",
    "start": "651660",
    "end": "660720"
  },
  {
    "text": "so at this point let's take a look at a few bug examples that enable this",
    "start": "660720",
    "end": "666839"
  },
  {
    "text": "stanza smuggling attack the first example we are going to look at is going to be due to differences between parsers",
    "start": "666839",
    "end": "673980"
  },
  {
    "text": "on the client and the server and this one has to do with UDF AIDS and you",
    "start": "673980",
    "end": "680820"
  },
  {
    "text": "are probably like oh no now he's going to talk about utf-8 wasn't was it XML enough uh well really yes I am but only",
    "start": "680820",
    "end": "688380"
  },
  {
    "text": "briefly sorry so basically the only thing you need to know for the about utf-8 is captured in this table taken",
    "start": "688380",
    "end": "696300"
  },
  {
    "text": "from Wikipedia and the only thing you need to know for the purpose of this talk is that in utf-8",
    "start": "696300",
    "end": "702959"
  },
  {
    "text": "you can encode characters using different number of bytes so some characters you can encode using a single",
    "start": "702959",
    "end": "709019"
  },
  {
    "text": "byte so I'm using two bytes I'm using three bytes so I'm using four bytes so for example",
    "start": "709019",
    "end": "715079"
  },
  {
    "text": "if you have a byte EB hex then it could be a start of a three byte",
    "start": "715079",
    "end": "721140"
  },
  {
    "text": "sequence and I'm saying could be because if you have a sequence like this then",
    "start": "721140",
    "end": "727860"
  },
  {
    "text": "it's actually an invalid sequence because while the first byte is a valid",
    "start": "727860",
    "end": "735000"
  },
  {
    "text": "start of a three byte sequence the remaining two bytes would need to have their highest bit set in order for the",
    "start": "735000",
    "end": "742500"
  },
  {
    "text": "sequence to be valid but let's now take a look at how different XML parsers handle this",
    "start": "742500",
    "end": "749220"
  },
  {
    "text": "invalid Duty f8 sequence export parser is going to claim that this is a valid three byte character",
    "start": "749220",
    "end": "756240"
  },
  {
    "text": "and the glux parser is going to claim that these are three different characters and the funny thing besides the fact",
    "start": "756240",
    "end": "764459"
  },
  {
    "text": "that these two parsers can't agree is that both of these are wrong this is an invalid sequence it should result in a",
    "start": "764459",
    "end": "771240"
  },
  {
    "text": "parsing error so if we take this basic principle",
    "start": "771240",
    "end": "777779"
  },
  {
    "text": "and take it one step further then you can do some fun stuff with it you can for example construct a string that if",
    "start": "777779",
    "end": "785040"
  },
  {
    "text": "parsed with expat expat is going to see a single XML tag however if the same",
    "start": "785040",
    "end": "790680"
  },
  {
    "text": "string is parsed with Googs looks is going to see two tags and then if you if you take",
    "start": "790680",
    "end": "798600"
  },
  {
    "text": "this and take it further then it shouldn't be",
    "start": "798600",
    "end": "803940"
  },
  {
    "text": "difficult to see intuitively that this can be used to smuggle stanzas",
    "start": "803940",
    "end": "809279"
  },
  {
    "text": "here you see the payload that I actually used in my zoom exploit we're not going",
    "start": "809279",
    "end": "814860"
  },
  {
    "text": "to analyze in detail how this works due to uh um in in the interest of time",
    "start": "814860",
    "end": "822120"
  },
  {
    "text": "I think it's more important to understand the basic principle from from the last slide",
    "start": "822120",
    "end": "828240"
  },
  {
    "text": "however one thing that I'm going to say is that again talk is not only about Zoom so this exact same vulnerability",
    "start": "828240",
    "end": "835560"
  },
  {
    "text": "besides Zoom also affected Cisco Jabber because Cisco Jabber in combination with",
    "start": "835560",
    "end": "842579"
  },
  {
    "text": "Cisco Ironman presence uses the exact same parser pair as Zoom",
    "start": "842579",
    "end": "849660"
  },
  {
    "text": "so this this was an example of a vulnerability due to differences between parsers on the client and the server now",
    "start": "849660",
    "end": "856920"
  },
  {
    "text": "let's take a look at an example of a different vulnerability a server-only",
    "start": "856920",
    "end": "863459"
  },
  {
    "text": "vulnerability and this one is quite specific to expat and to see how it works we need to take",
    "start": "863459",
    "end": "870360"
  },
  {
    "text": "a look at how expat parser is used inside ejabi and so here in the slide",
    "start": "870360",
    "end": "877860"
  },
  {
    "text": "you can see the relevant initialization code and the most relevant part here",
    "start": "877860",
    "end": "884100"
  },
  {
    "text": "is this last parameter here with the value of backslash Channel now what this is",
    "start": "884100",
    "end": "890220"
  },
  {
    "text": "a separator that is used when expat returns tag names to the library user uh",
    "start": "890220",
    "end": "899519"
  },
  {
    "text": "ejability or fast XML in this case to understand how it works let's take a",
    "start": "899519",
    "end": "905100"
  },
  {
    "text": "look at a couple of examples so for example if you have a tag with a",
    "start": "905100",
    "end": "910260"
  },
  {
    "text": "namespace attribute then what you receive from expat is a",
    "start": "910260",
    "end": "916199"
  },
  {
    "text": "namespace and the tag pair concatenated using this separator and it's it gets more complicated if the",
    "start": "916199",
    "end": "924779"
  },
  {
    "text": "tag also gets a if if a tag also has a prefix because in this case instead of the",
    "start": "924779",
    "end": "932100"
  },
  {
    "text": "namespace tag pair the user receives namespace tag prefix triplet again",
    "start": "932100",
    "end": "937380"
  },
  {
    "text": "called concatenated using this separator now as you're probably well aware in",
    "start": "937380",
    "end": "943019"
  },
  {
    "text": "security whenever you are concatenating strings using a separator you need to",
    "start": "943019",
    "end": "948600"
  },
  {
    "text": "pay special attention that the component strings you are concatenating can't",
    "start": "948600",
    "end": "954000"
  },
  {
    "text": "contain this separator so let's see if that's actually the case here",
    "start": "954000",
    "end": "959639"
  },
  {
    "text": "um so if you just tried to put a new line character in namespace attribute it",
    "start": "959639",
    "end": "964860"
  },
  {
    "text": "wouldn't work however if you numerically encode it it will work and what the user receives",
    "start": "964860",
    "end": "974360"
  },
  {
    "text": "looks like to the user as namespace tag prefix triplet",
    "start": "974360",
    "end": "979980"
  },
  {
    "text": "however what the user thinks is a tag name is actually going to be a part of",
    "start": "979980",
    "end": "985620"
  },
  {
    "text": "the namespace attribute and this gets very bad very quickly because there are other characters you",
    "start": "985620",
    "end": "992880"
  },
  {
    "text": "can put in the namespace attribute that aren't valid inside the tag name so for example you can even construct tag name",
    "start": "992880",
    "end": "999720"
  },
  {
    "text": "which contains other tags and then when this gets serialized",
    "start": "999720",
    "end": "1007579"
  },
  {
    "text": "then all all characters you put inside the tag name get output at this output",
    "start": "1007579",
    "end": "1014540"
  },
  {
    "text": "as is and again it should be intuitively uh obvious that it's this",
    "start": "1014540",
    "end": "1021440"
  },
  {
    "text": "can be used uh to smuggle stanzas this bug might even be more dangerous",
    "start": "1021440",
    "end": "1029058"
  },
  {
    "text": "than the previous one because while the previous one required a specific pair of XML parsers",
    "start": "1029059",
    "end": "1037640"
  },
  {
    "text": "this one affected everyone that uses that used uh ejabody server which is a",
    "start": "1037640",
    "end": "1044720"
  },
  {
    "text": "quite popular xmpp server implementation",
    "start": "1044720",
    "end": "1049760"
  },
  {
    "text": "all right so now that we've seen some bug examples let's talk a bit about how you can find such",
    "start": "1050179",
    "end": "1058280"
  },
  {
    "text": "bugs yourselves in two obvious ways are Black Box testing and code review and you might be",
    "start": "1058280",
    "end": "1066140"
  },
  {
    "text": "thinking well it makes sense the utf-8 issue could have been found by just",
    "start": "1066140",
    "end": "1071360"
  },
  {
    "text": "black box testing and the separator issue would have been easily spotted by code review however if",
    "start": "1071360",
    "end": "1079160"
  },
  {
    "text": "you think that's how I actually found these issues then a heavy fooled because both of these issues were found using",
    "start": "1079160",
    "end": "1086059"
  },
  {
    "text": "fuzzing and since fuzzing is something that's more commonly used",
    "start": "1086059",
    "end": "1091580"
  },
  {
    "text": "to find memory corruption issues let's see how it can be used to find",
    "start": "1091580",
    "end": "1096919"
  },
  {
    "text": "logic logic bugs like this so once again we return to our XML",
    "start": "1096919",
    "end": "1104360"
  },
  {
    "text": "pipeline slide because this is the thing that we need to fuzz however don't think for a second we are",
    "start": "1104360",
    "end": "1111860"
  },
  {
    "text": "going to do any kind of network fuzzing this would be a very silly and a very wasteful thing to do please don't do",
    "start": "1111860",
    "end": "1119179"
  },
  {
    "text": "Network fuzzing unless you absolutely have to instead we're just going to",
    "start": "1119179",
    "end": "1125780"
  },
  {
    "text": "take out the libraries that play a role here and put them in a single binary",
    "start": "1125780",
    "end": "1132620"
  },
  {
    "text": "and then whenever you uh fast for logic bugs",
    "start": "1132620",
    "end": "1137780"
  },
  {
    "text": "one thing you need to Define is what constitutes a bug and for us what we are",
    "start": "1137780",
    "end": "1144799"
  },
  {
    "text": "going to consider a bug is going to be a parsing error at the very last stage of",
    "start": "1144799",
    "end": "1151160"
  },
  {
    "text": "this pipeline in XML parser on the client so here you can see an example taken",
    "start": "1151160",
    "end": "1157820"
  },
  {
    "text": "from the fuzzing harness that I actually used to fast this",
    "start": "1157820",
    "end": "1162919"
  },
  {
    "text": "so what it does is it takes a sample wraps it into some XML tags and",
    "start": "1162919",
    "end": "1169640"
  },
  {
    "text": "then feeds it to the par to the server parser and serializer and if this part",
    "start": "1169640",
    "end": "1175340"
  },
  {
    "text": "errors out that would mean that the server caught an error so we just return",
    "start": "1175340",
    "end": "1181160"
  },
  {
    "text": "we don't consider this a bug no crash however if this part succeeded then we",
    "start": "1181160",
    "end": "1187580"
  },
  {
    "text": "take the output of the server serializer and feed it into the client parser and",
    "start": "1187580",
    "end": "1195020"
  },
  {
    "text": "if this part errors out then that means that there was something",
    "start": "1195020",
    "end": "1200600"
  },
  {
    "text": "on the client that the client wasn't supposed to see that made its way all the way through the server",
    "start": "1200600",
    "end": "1207500"
  },
  {
    "text": "and so if we get this we actually cause a crash and here I just cause a crash by",
    "start": "1207500",
    "end": "1213260"
  },
  {
    "text": "forcing a null pointer dereference if you find a bug like this it doesn't",
    "start": "1213260",
    "end": "1219200"
  },
  {
    "text": "necessarily mean it's exploitable for stanza smuggling however at least in my case all of the",
    "start": "1219200",
    "end": "1226039"
  },
  {
    "text": "bugs that I found this way did turn out to be exploitable for fuzzing this I used jackalope fuzzer",
    "start": "1226039",
    "end": "1234460"
  },
  {
    "text": "it's not necessary to use this fuzzer you can use whatever fuzzer you like",
    "start": "1234460",
    "end": "1240140"
  },
  {
    "text": "however Jackalope is the fuzzer that I wrote and that I actually use whenever I",
    "start": "1240140",
    "end": "1245179"
  },
  {
    "text": "do any kind of general purpose fuzzing I think it's pretty good though I might be slightly biased",
    "start": "1245179",
    "end": "1252620"
  },
  {
    "text": "however one thing that is important with regards to selecting a fuzzer is that",
    "start": "1252620",
    "end": "1259280"
  },
  {
    "text": "your father has coverage feedback and to see why that's important consider that when I pass this",
    "start": "1259280",
    "end": "1266000"
  },
  {
    "text": "my input Corpus was pretty bad and it contained neither numerically encoded",
    "start": "1266000",
    "end": "1272179"
  },
  {
    "text": "character sequences nor special XML attributes like XML and S all of this",
    "start": "1272179",
    "end": "1278000"
  },
  {
    "text": "was found by the buzzer on its own using just coverage feedback Magic",
    "start": "1278000",
    "end": "1284260"
  },
  {
    "text": "so at this point you saw some bugs you know how to find them but it might not",
    "start": "1284960",
    "end": "1291620"
  },
  {
    "text": "be obvious what you can do with them and it was not obvious to me either when I",
    "start": "1291620",
    "end": "1297140"
  },
  {
    "text": "started this research I had some bugs but for a while I felt a bit like an",
    "start": "1297140",
    "end": "1303380"
  },
  {
    "text": "underpants no you know I I have something I want to do something with it but the step in between is kind of vague",
    "start": "1303380",
    "end": "1311960"
  },
  {
    "text": "um so let's see what you can actually do with stanza smuggling the first thing you can do is message",
    "start": "1311960",
    "end": "1317720"
  },
  {
    "text": "spoofing meaning you can send a message",
    "start": "1317720",
    "end": "1323419"
  },
  {
    "text": "to another client and the other client is going to think that",
    "start": "1323419",
    "end": "1329840"
  },
  {
    "text": "this message is from someone who didn't actually send it um",
    "start": "1329840",
    "end": "1335480"
  },
  {
    "text": "this this follows from the fact that if you smuggle a message stanza",
    "start": "1335480",
    "end": "1342620"
  },
  {
    "text": "then all of its attributes including the sender attribute would be completely under your control",
    "start": "1342620",
    "end": "1349460"
  },
  {
    "text": "this is something that you you can always do with this stanza smuggling attack however it's probably the least",
    "start": "1349460",
    "end": "1355760"
  },
  {
    "text": "interesting thing you can do the more interesting thing you can try",
    "start": "1355760",
    "end": "1362419"
  },
  {
    "text": "to do is redirect the xmpp connection to another server and the capability that",
    "start": "1362419",
    "end": "1369260"
  },
  {
    "text": "would give you is to be able to intercept all of the victim's communication",
    "start": "1369260",
    "end": "1374960"
  },
  {
    "text": "good news at least for the attackers is that xmpp spec already provides a way to",
    "start": "1374960",
    "end": "1381980"
  },
  {
    "text": "do this through see other host error stanza",
    "start": "1381980",
    "end": "1387340"
  },
  {
    "text": "unfortunately though most of the xmpp implementations that I saw don't",
    "start": "1387340",
    "end": "1393200"
  },
  {
    "text": "implement this part of the spec the good news though is even though they",
    "start": "1393200",
    "end": "1398539"
  },
  {
    "text": "don't implement it as prescribed by the spec they still implement it but they implement it",
    "start": "1398539",
    "end": "1404600"
  },
  {
    "text": "in custom ways not not always but sometimes",
    "start": "1404600",
    "end": "1410020"
  },
  {
    "text": "why they do it this way instead of just following the spec I have no idea but it's obvious",
    "start": "1410020",
    "end": "1418460"
  },
  {
    "text": "that they still um that that xmpp installations especially larger Ones Still find this",
    "start": "1418460",
    "end": "1426080"
  },
  {
    "text": "functionality useful another thing you can try is looking at custom xmpp extensions",
    "start": "1426080",
    "end": "1435020"
  },
  {
    "text": "for example Zoom client defines over 50 custom Zoom specific extensions to the",
    "start": "1435020",
    "end": "1441500"
  },
  {
    "text": "xmpp protocol and then if you find any configuration data that",
    "start": "1441500",
    "end": "1446600"
  },
  {
    "text": "travels over these extensions that then it would of course be completely under your control",
    "start": "1446600",
    "end": "1452600"
  },
  {
    "text": "and one other thing you can try to look for are memory corruption box that you",
    "start": "1452600",
    "end": "1458539"
  },
  {
    "text": "otherwise wouldn't be able to reach because they require stands as that one client can send to another client",
    "start": "1458539",
    "end": "1466039"
  },
  {
    "text": "so here for example you have a quote from point to own write-up",
    "start": "1466039",
    "end": "1471320"
  },
  {
    "text": "from last year and in their exploit a feature was used",
    "start": "1471320",
    "end": "1478220"
  },
  {
    "text": "in the stanza that normally one client shouldn't be able to send to another now",
    "start": "1478220",
    "end": "1483380"
  },
  {
    "text": "in this case it was possible to do due to an issue unrelated to stanza smuggling however when you have a stanza",
    "start": "1483380",
    "end": "1489620"
  },
  {
    "text": "smuggling uh primitive then you don't need to worry about what one client can",
    "start": "1489620",
    "end": "1496280"
  },
  {
    "text": "send to another you can send everything you like",
    "start": "1496280",
    "end": "1501158"
  },
  {
    "text": "so let's now try to put all of that",
    "start": "1503179",
    "end": "1508580"
  },
  {
    "text": "together and use it to hack Zoom when I started this research",
    "start": "1508580",
    "end": "1516320"
  },
  {
    "text": "I attempted various approaches for exploiting zoom and mostly I was looking",
    "start": "1516320",
    "end": "1523760"
  },
  {
    "text": "at custom X and PP extensions I found some interesting stuff but nothing that",
    "start": "1523760",
    "end": "1530059"
  },
  {
    "text": "would really give me a zero day RC the Breakthrough however came",
    "start": "1530059",
    "end": "1536559"
  },
  {
    "text": "when I noticed that Zoom made custom changes",
    "start": "1536559",
    "end": "1542600"
  },
  {
    "text": "to the glux library specifically to the handling of the error stanza",
    "start": "1542600",
    "end": "1548360"
  },
  {
    "text": "inside the glux Library specifically Zoom edit support for a tag",
    "start": "1548360",
    "end": "1554539"
  },
  {
    "text": "called revoke token inside the error stanza and this revoked token tag supported an attribute called web domain",
    "start": "1554539",
    "end": "1563120"
  },
  {
    "text": "so naturally I wondered what would happen if I put my own domain inside this web",
    "start": "1563120",
    "end": "1569900"
  },
  {
    "text": "domain attribute and what would happen is that I would get an HTTP post request",
    "start": "1569900",
    "end": "1578020"
  },
  {
    "text": "for an endpoint called cluster switch so at this point",
    "start": "1578020",
    "end": "1584059"
  },
  {
    "text": "um the question becomes what does this cluster switch endpoint do and for the purpose of finding that out I set up",
    "start": "1584059",
    "end": "1591260"
  },
  {
    "text": "many in the middle proxy in Reverse proxy mode meaning that it proxied",
    "start": "1591260",
    "end": "1596320"
  },
  {
    "text": "requests to the actual Zoom servers and then when you do this you are able to to",
    "start": "1596320",
    "end": "1603919"
  },
  {
    "text": "observe the response from the server and what the server responds",
    "start": "1603919",
    "end": "1609980"
  },
  {
    "text": "for this endpoint was it was a really large configuration protobuf but the",
    "start": "1609980",
    "end": "1615860"
  },
  {
    "text": "part of that protobot that I found the most interesting was a pretty large list of domain names and these are domain",
    "start": "1615860",
    "end": "1623360"
  },
  {
    "text": "names that Zoom client uses when connecting to",
    "start": "1623360",
    "end": "1629120"
  },
  {
    "text": "various services on Zoom servers so for example there is a domain for web",
    "start": "1629120",
    "end": "1634159"
  },
  {
    "text": "there's a domain for xmpp ETC and if you replace all of this then you would be",
    "start": "1634159",
    "end": "1640460"
  },
  {
    "text": "able to intercept all communication between the zoom client in the zoom service which is already",
    "start": "1640460",
    "end": "1647299"
  },
  {
    "text": "quite nice however what I really wanted was zeroclick rce as I mentioned and I had",
    "start": "1647299",
    "end": "1654440"
  },
  {
    "text": "an idea about how to do that and that was to hijack the auto update mechanism",
    "start": "1654440",
    "end": "1660440"
  },
  {
    "text": "in order to do that what I replaced was the domain that Zoom client uses to",
    "start": "1660440",
    "end": "1666080"
  },
  {
    "text": "connect to the zooms web server so let's recap how the attack looks like so",
    "start": "1666080",
    "end": "1672740"
  },
  {
    "text": "far he starts by attacker exploiting a stanza smuggling issue and sending a",
    "start": "1672740",
    "end": "1680179"
  },
  {
    "text": "payload with an error stanza with revoke token tag and when the victim client receives this",
    "start": "1680179",
    "end": "1688520"
  },
  {
    "text": "it immediately requests the cluster switch endpoint which the attacker can proxy",
    "start": "1688520",
    "end": "1694640"
  },
  {
    "text": "but replace the domain used for um useful used for web for web",
    "start": "1694640",
    "end": "1701799"
  },
  {
    "text": "and then eventually the client is going to request auto update information using",
    "start": "1701799",
    "end": "1707960"
  },
  {
    "text": "the release notes endpoint and we can again proxy this but",
    "start": "1707960",
    "end": "1714380"
  },
  {
    "text": "replace the URLs used to download update",
    "start": "1714380",
    "end": "1719659"
  },
  {
    "text": "components the way Zoom or update works is that",
    "start": "1719659",
    "end": "1725600"
  },
  {
    "text": "Zoom downloads two files one is called installer.exe and the other one is",
    "start": "1725600",
    "end": "1732559"
  },
  {
    "text": "called zoom.msi and even though this one is called that",
    "start": "1732559",
    "end": "1737720"
  },
  {
    "text": "MSI it's actually just a 7-Zip archive that contains the actual update files",
    "start": "1737720",
    "end": "1745179"
  },
  {
    "text": "we can replace both of these files you might be thinking that it's game over",
    "start": "1746600",
    "end": "1753679"
  },
  {
    "text": "unfortunately not quite because of Integrity checking specifically Zoom client checks the",
    "start": "1753679",
    "end": "1760700"
  },
  {
    "text": "signature of installer.exe before running it and installer.exe checks the hash of",
    "start": "1760700",
    "end": "1767860"
  },
  {
    "text": "zoom.msi before unpacking it and on the first glance this looks",
    "start": "1767860",
    "end": "1772940"
  },
  {
    "text": "pretty solid right but one thing you can do is a downgrade",
    "start": "1772940",
    "end": "1778279"
  },
  {
    "text": "attack specifically I found that version 4.4 of Zoom installer is on one hand",
    "start": "1778279",
    "end": "1785840"
  },
  {
    "text": "still properly signed by Zoom but on the other hand it skips the Integrity check",
    "start": "1785840",
    "end": "1792260"
  },
  {
    "text": "on zoom.msi it it just unpacks it",
    "start": "1792260",
    "end": "1797659"
  },
  {
    "text": "so it actually looks like it's game over at",
    "start": "1797659",
    "end": "1802820"
  },
  {
    "text": "this point so let's take a look at all of this in action",
    "start": "1802820",
    "end": "1809500"
  },
  {
    "text": "together sorry let me just restart this is a",
    "start": "1811340",
    "end": "1817520"
  },
  {
    "text": "video demo it needs to be a video demo because uh the bugs are patched on the zoom servers",
    "start": "1817520",
    "end": "1824659"
  },
  {
    "text": "so even if even if I had um old clients it wouldn't work",
    "start": "1824659",
    "end": "1831200"
  },
  {
    "text": "I'm sorry that there is a lot of things going on around here",
    "start": "1831200",
    "end": "1838240"
  },
  {
    "text": "and the text might be a bit difficult to see but you don't need to see it I'll",
    "start": "1838240",
    "end": "1843620"
  },
  {
    "text": "explain everything that's going on but also if you just want to see better then feel free to to just uh come closer to",
    "start": "1843620",
    "end": "1850760"
  },
  {
    "text": "the screens in the room so what we have here",
    "start": "1850760",
    "end": "1856179"
  },
  {
    "text": "is attackers VM on the bottom left attackers proxy on the top left",
    "start": "1856179",
    "end": "1863600"
  },
  {
    "text": "and the victim VM on the right side of the screen which is just a clean windows",
    "start": "1863600",
    "end": "1870200"
  },
  {
    "text": "VM with the most recent version of Zoom at the time installed",
    "start": "1870200",
    "end": "1875740"
  },
  {
    "text": "the attack starts by the attacker running Zoom client under instrumentation",
    "start": "1876020",
    "end": "1881899"
  },
  {
    "text": "and this instrumentation allows the attacker to intercept",
    "start": "1881899",
    "end": "1887179"
  },
  {
    "text": "and modify raw xmpp traffic so here you can see some of that traffic",
    "start": "1887179",
    "end": "1893360"
  },
  {
    "text": "what happens next is that the attacker sends a very special message",
    "start": "1893360",
    "end": "1899299"
  },
  {
    "text": "and the instrumentation running in the background replaces this message with",
    "start": "1899299",
    "end": "1904399"
  },
  {
    "text": "the stanza smuggling payload when the victim client receives this message",
    "start": "1904399",
    "end": "1910039"
  },
  {
    "text": "it immediately requests the cluster switch endpoint which we proxy and then",
    "start": "1910039",
    "end": "1917120"
  },
  {
    "text": "from that point on the victim client continues to use our server instead of",
    "start": "1917120",
    "end": "1922760"
  },
  {
    "text": "the zooms web server uh what's going to happen next is I'm",
    "start": "1922760",
    "end": "1927860"
  },
  {
    "text": "going to restart the client on on the victim machine the",
    "start": "1927860",
    "end": "1933620"
  },
  {
    "text": "reason for this is that Zoom checks for auto updates",
    "start": "1933620",
    "end": "1938720"
  },
  {
    "text": "about one minute after it starts it might happen at other intervals as well I didn't check uh",
    "start": "1938720",
    "end": "1945440"
  },
  {
    "text": "but even if the attack requires restarting of the victim client I still",
    "start": "1945440",
    "end": "1952220"
  },
  {
    "text": "consider it zero click because everybody is going to restart their computer",
    "start": "1952220",
    "end": "1957320"
  },
  {
    "text": "sometimes uh at least to install OS updates and if",
    "start": "1957320",
    "end": "1963799"
  },
  {
    "text": "you don't do that well then you have worse problems than Zoom exploit um",
    "start": "1963799",
    "end": "1969620"
  },
  {
    "text": "so right now we are just waiting for",
    "start": "1969620",
    "end": "1978080"
  },
  {
    "text": "um we're just waiting for the weekend client to check for uh updates I'm just",
    "start": "1978080",
    "end": "1984740"
  },
  {
    "text": "going to skip ahead until the point that happens or actually I don't need it it's going",
    "start": "1984740",
    "end": "1990860"
  },
  {
    "text": "to happen any second now you should see a request for release notes endpoint",
    "start": "1990860",
    "end": "1996019"
  },
  {
    "text": "there it goes and then after that there is the downloading of those two files",
    "start": "1996019",
    "end": "2001299"
  },
  {
    "text": "that that you saw a couple of slides back so first is the update archive it's a bit larger so it",
    "start": "2001299",
    "end": "2007899"
  },
  {
    "text": "take some time and the second file is smaller so it should be done quickly",
    "start": "2007899",
    "end": "2013000"
  },
  {
    "text": "and then if you restart the victim client one",
    "start": "2013000",
    "end": "2018340"
  },
  {
    "text": "more time it should start the auto update process however when the auto update finishes",
    "start": "2018340",
    "end": "2023860"
  },
  {
    "text": "instead of launching the updated version of Zoom you get something else",
    "start": "2023860",
    "end": "2030658"
  },
  {
    "text": "thanks um I should note that calculator is just",
    "start": "2036820",
    "end": "2043299"
  },
  {
    "text": "the means to show that I have RC at this point in a more realistic scenario you would actually launch a normal Zoom",
    "start": "2043299",
    "end": "2050378"
  },
  {
    "text": "executable but you would also launch um whatever payload you want in the",
    "start": "2050379",
    "end": "2055839"
  },
  {
    "text": "background okay let's now go back",
    "start": "2055839",
    "end": "2061179"
  },
  {
    "text": "to my slide deck now we already saw",
    "start": "2061179",
    "end": "2067780"
  },
  {
    "text": "okay so um to wrap it up I think that these stanza smuggling",
    "start": "2067780",
    "end": "2076658"
  },
  {
    "text": "attacks are pretty underexplored attack surface I was able to find many",
    "start": "2076659",
    "end": "2083440"
  },
  {
    "text": "different bugs in in different targets and unfortunately uh",
    "start": "2083440",
    "end": "2089378"
  },
  {
    "text": "the way xmpp protocol is designed kind of makes it easy to to introduce and",
    "start": "2089379",
    "end": "2097359"
  },
  {
    "text": "also to find bugs like this and the bugs themselves can be pretty dangerous so",
    "start": "2097359",
    "end": "2103180"
  },
  {
    "text": "the impact can range all the way through relatively benign message moving all the way through uh intercepting private",
    "start": "2103180",
    "end": "2110380"
  },
  {
    "text": "communication to as it was it as was just demonstrated zero click rce",
    "start": "2110380",
    "end": "2117640"
  },
  {
    "text": "and finally please don't estimate fuzzing for finding logic bugs",
    "start": "2117640",
    "end": "2125260"
  },
  {
    "text": "finally finally I'd like to just think uh some folks thanks to who this story",
    "start": "2125260",
    "end": "2132460"
  },
  {
    "text": "has a happy end I believe so specifically Sebastian peeping of expat",
    "start": "2132460",
    "end": "2139540"
  },
  {
    "text": "who was really helpful with with uh getting the expert issues fixed Zoom",
    "start": "2139540",
    "end": "2145480"
  },
  {
    "text": "security team who took all of these issues very seriously and made really",
    "start": "2145480",
    "end": "2152619"
  },
  {
    "text": "comprehensive patches and and finally my team members uh",
    "start": "2152619",
    "end": "2159579"
  },
  {
    "text": "and they thank them for their annoyingly useful comments during uh the course of",
    "start": "2159579",
    "end": "2165820"
  },
  {
    "text": "This research thank you [Music]",
    "start": "2165820",
    "end": "2172540"
  },
  {
    "text": "[Music]",
    "start": "2176380",
    "end": "2179488"
  }
]