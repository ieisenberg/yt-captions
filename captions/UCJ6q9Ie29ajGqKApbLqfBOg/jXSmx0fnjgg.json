[
  {
    "start": "0",
    "end": "53000"
  },
  {
    "text": "[Music]",
    "start": "3810",
    "end": "14240"
  },
  {
    "text": "good afternoon and welcome to webcache entanglement novel pathways to poisoning",
    "start": "14719",
    "end": "21119"
  },
  {
    "text": "have you ever thought you understood something and then realized that what you understand is actually only one percent of the",
    "start": "21279",
    "end": "28840"
  },
  {
    "text": "total or have you ever found a vulnerability that wasn't quite exploitable and exploit chain with",
    "start": "28840",
    "end": "36399"
  },
  {
    "text": "a missing link in this session i'm going to share with you some advanced techniques",
    "start": "36399",
    "end": "42000"
  },
  {
    "text": "to find some seriously esoteric cash behaviors and combine them into glorious exploit",
    "start": "42000",
    "end": "47520"
  },
  {
    "text": "chains to turn junk vulnerabilities into criticals",
    "start": "47520",
    "end": "52800"
  },
  {
    "start": "53000",
    "end": "53000"
  },
  {
    "text": "i used to think that i understood most of what there is to know about how caches work and how to poison",
    "start": "53199",
    "end": "59280"
  },
  {
    "text": "them until i stumbled on a small information link on systems running akamai if you send a",
    "start": "59280",
    "end": "66560"
  },
  {
    "text": "certain pragma value then they'll come back at you with their cash key in the response headers and the value of",
    "start": "66560",
    "end": "73200"
  },
  {
    "text": "this key is a bit different from what i expected but more concerningly",
    "start": "73200",
    "end": "79040"
  },
  {
    "text": "they don't just come back at you with that one header they actually give you two cache keys which don't quite match and if you add another pragma",
    "start": "79040",
    "end": "86479"
  },
  {
    "text": "value you get a third cache key but you know i'm sure things are simple right we just",
    "start": "86479",
    "end": "92799"
  },
  {
    "text": "need to identify which of these cache keys is actually accurate",
    "start": "92799",
    "end": "97920"
  },
  {
    "text": "well is it the humble cash key is it the extended cash key for internal",
    "start": "97920",
    "end": "103759"
  },
  {
    "text": "use only or is it the true cash key after extensive",
    "start": "103759",
    "end": "109119"
  },
  {
    "text": "research i can tell you that the answer is none of them not one of these keys is entirely accurate but if we assume",
    "start": "109119",
    "end": "117119"
  },
  {
    "text": "that there's some kind of element of truth in them then they still leave us with some quite serious questions",
    "start": "117119",
    "end": "122880"
  },
  {
    "text": "like where did my parameter go it's in my request but it's not in any of the keys where did this and white",
    "start": "122880",
    "end": "129759"
  },
  {
    "text": "transform parameter that i didn't send come from and why is it in some keys but not other",
    "start": "129759",
    "end": "134959"
  },
  {
    "text": "keys what's this double underscore thing about that looks kind of shady",
    "start": "134959",
    "end": "140400"
  },
  {
    "text": "and our other caching systems this quirky following up on each of those questions",
    "start": "140400",
    "end": "147120"
  },
  {
    "text": "led me to an exploitable scenario which i'm going to share with you today first i'm just going to recap the",
    "start": "147120",
    "end": "154239"
  },
  {
    "start": "153000",
    "end": "153000"
  },
  {
    "text": "basic cash poisoning concept and show how this research diverges from classical cash poisoning",
    "start": "154239",
    "end": "160640"
  },
  {
    "text": "techniques then i'll share a methodology for finding these new types of issues",
    "start": "160640",
    "end": "166640"
  },
  {
    "text": "share a whole bunch of case studies where i've applied the methodology to find real vulnerabilities in sites that have",
    "start": "166640",
    "end": "172319"
  },
  {
    "text": "bug bounty programs and share some tooling to make your life easier then i'll talk about how to",
    "start": "172319",
    "end": "178239"
  },
  {
    "text": "prevent these attacks wrap up and take roughly five minutes of questions",
    "start": "178239",
    "end": "184319"
  },
  {
    "start": "184000",
    "end": "184000"
  },
  {
    "text": "caches work by saving copies of web pages in order to reduce load on the back end",
    "start": "184319",
    "end": "190480"
  },
  {
    "text": "system and web cache poisoning is just a general term for when you trick a cache into saving a harmful page",
    "start": "190480",
    "end": "196879"
  },
  {
    "text": "and serving it up to other users how do you poison the cache well caches",
    "start": "196879",
    "end": "203040"
  },
  {
    "start": "202000",
    "end": "202000"
  },
  {
    "text": "map requests to responses using something called the cache key which is the subset of the",
    "start": "203040",
    "end": "208400"
  },
  {
    "text": "request that they think is actually important generally this includes the host header",
    "start": "208400",
    "end": "214319"
  },
  {
    "text": "and the request line but it doesn't include random other headers like them like the ones that i've highlighted in",
    "start": "214319",
    "end": "220560"
  },
  {
    "text": "orange on this slide so a classic cache poisoning attack is you simply put your payload in one of",
    "start": "220560",
    "end": "226239"
  },
  {
    "text": "the orange headers and hope that that makes the application send something harmful back and the cache will save it and serve it",
    "start": "226239",
    "end": "233519"
  },
  {
    "text": "up to other users but there's a bit of a problem with this approach to cache poisoning which is",
    "start": "233519",
    "end": "240080"
  },
  {
    "text": "that most applications take most of their input from the query string and from the path and we can't directly",
    "start": "240080",
    "end": "247439"
  },
  {
    "text": "edit those with this style of attack however this understanding of cache keys is actually",
    "start": "247439",
    "end": "254239"
  },
  {
    "text": "a bit simplified the request line yeah it is unexploitable because it's in the key",
    "start": "254239",
    "end": "259759"
  },
  {
    "text": "unless someone decides the analytics parameters are hurting performance and they need to rewrite the query string",
    "start": "259759",
    "end": "267040"
  },
  {
    "text": "or the cache decides it's going to normalize the request line because you know normalization is great",
    "start": "267040",
    "end": "273280"
  },
  {
    "text": "or the cache key components are stored next to each other as unescaped strings or there simply",
    "start": "273280",
    "end": "279759"
  },
  {
    "text": "is no cache key any of these can cause trouble for your application as we'll see",
    "start": "279759",
    "end": "285520"
  },
  {
    "text": "shortly because this approach to cash poisoning is built around",
    "start": "285520",
    "end": "291600"
  },
  {
    "start": "287000",
    "end": "287000"
  },
  {
    "text": "exploiting specific unique quirks in the target system the first step to an",
    "start": "291600",
    "end": "296960"
  },
  {
    "text": "exploit is to get an understanding of how the target cache works if you can't do that you don't stand a",
    "start": "296960",
    "end": "302880"
  },
  {
    "text": "chance with any of these techniques and to gain that understanding we need the help of a cache oracle this is just",
    "start": "302880",
    "end": "310560"
  },
  {
    "text": "a term i've made up for a page on the site that we're going to ask a series of questions to",
    "start": "310560",
    "end": "316080"
  },
  {
    "text": "in order to understand how the cache works this page needs to be cacheable and",
    "start": "316080",
    "end": "322960"
  },
  {
    "text": "it needs to tell us somehow whether it got a a cash hit or a cash missed this could",
    "start": "322960",
    "end": "328000"
  },
  {
    "text": "be headers or it could just be the speed with which the response comes back and in theory",
    "start": "328000",
    "end": "334320"
  },
  {
    "text": "those two conditions are sufficient but it will also make life easier and let us find some more advanced",
    "start": "334320",
    "end": "339600"
  },
  {
    "text": "attacks if this if this cache oracle page also reflects the whole url",
    "start": "339600",
    "end": "344960"
  },
  {
    "text": "and reflects at least one specific parameter having chosen this page and got hold of",
    "start": "344960",
    "end": "351919"
  },
  {
    "text": "any documentation or source code that you might be able to find the next step is to ask a series of",
    "start": "351919",
    "end": "357440"
  },
  {
    "text": "questions to the so-called to understand what's happening the thing to focus on is look for",
    "start": "357440",
    "end": "363600"
  },
  {
    "text": "transformations that are happening on your request in order to create",
    "start": "363600",
    "end": "368639"
  },
  {
    "text": "the key things like is your request being normalized when it's stored in the key how is",
    "start": "368639",
    "end": "375199"
  },
  {
    "text": "how are the components being stored in the key next to each other is there some kind of url parsing that's",
    "start": "375199",
    "end": "380400"
  },
  {
    "text": "happening before the key is generated and so on we'll see some example of where these go",
    "start": "380400",
    "end": "385840"
  },
  {
    "text": "go wrong shortly having found hopefully a few quirks in the target's cache the final step",
    "start": "385840",
    "end": "392160"
  },
  {
    "text": "is to find a gadget to chain this with to create a powerful export this could be an",
    "start": "392160",
    "end": "399120"
  },
  {
    "text": "existing vulnerability on the target where we can just increase the severity of it",
    "start": "399120",
    "end": "404400"
  },
  {
    "text": "by combining it with cash poisoning or it could be something that's completely harmless by itself",
    "start": "404400",
    "end": "411599"
  },
  {
    "text": "and that's the theory so now i'm going to show you the kinds of things that you might run",
    "start": "412080",
    "end": "417919"
  },
  {
    "text": "into when you apply that methodology to real life systems starting out with some really simple",
    "start": "417919",
    "end": "423360"
  },
  {
    "text": "scenarios and then things will get progressively crazier towards the end of the presentation",
    "start": "423360",
    "end": "429599"
  },
  {
    "start": "429000",
    "end": "429000"
  },
  {
    "text": "here's a nice simple example of how to apply the methodology based on a real target",
    "start": "429599",
    "end": "434800"
  },
  {
    "text": "that i found for our oracle we're just gonna use their home page because",
    "start": "434800",
    "end": "439840"
  },
  {
    "text": "they've got this header that tells us whether we got a cash hit or a cash miss that makes life easy",
    "start": "439840",
    "end": "444880"
  },
  {
    "text": "and they're also reflecting the host header which is where we're going going to put our payload what we're",
    "start": "444880",
    "end": "451039"
  },
  {
    "text": "going to do is we're going to ask the question is the port in the host header included in the cash kit so we're going to send",
    "start": "451039",
    "end": "458160"
  },
  {
    "text": "a port of one we see it get reflected back to us and then we're going to replay that request buy it for by",
    "start": "458160",
    "end": "464879"
  },
  {
    "text": "identical but without the port specification and sure enough as you can see we have a",
    "start": "464879",
    "end": "470800"
  },
  {
    "text": "cash hit so that tells us the port is not included in the cash key and in fact with that one request we've just",
    "start": "470800",
    "end": "476960"
  },
  {
    "text": "taken down the home page of that website because now when any any any whenever anyone tries to fetch that page they're",
    "start": "476960",
    "end": "484080"
  },
  {
    "text": "going to get a redirect to port one and their browser will just time it",
    "start": "484080",
    "end": "489919"
  },
  {
    "text": "who does this technique work on quite a few companies uh there's just one thing to mention",
    "start": "489919",
    "end": "496639"
  },
  {
    "text": "before you go charging off bounty hunting with this if that's your kind of thing be warned that as a denial of service",
    "start": "496639",
    "end": "502639"
  },
  {
    "text": "issue you may get a mixed reception using this sort of finding on different companies that have bounty programs",
    "start": "502639",
    "end": "509599"
  },
  {
    "text": "i've had some of them saying we do not care that you can take our site down with one request",
    "start": "509599",
    "end": "514719"
  },
  {
    "text": "and i've had other sites pay me 10k for it so as with any kind of bug bounties it's a",
    "start": "514719",
    "end": "520640"
  },
  {
    "text": "bit of a lucky dip now one of the most common transformations that people do on the",
    "start": "520640",
    "end": "527279"
  },
  {
    "text": "cash key is they simply eliminate the entire query string and you might",
    "start": "527279",
    "end": "532560"
  },
  {
    "text": "think that such a major transformation would be really obvious right but",
    "start": "532560",
    "end": "538800"
  },
  {
    "text": "it's actually incredibly easy to miss because what it does is it makes dynamic pages look as though they're",
    "start": "538800",
    "end": "545200"
  },
  {
    "text": "static on a normal page if you change any parameter you'll have some kind of",
    "start": "545200",
    "end": "551279"
  },
  {
    "text": "visible change in the response but if the page has a cache which excludes",
    "start": "551279",
    "end": "556880"
  },
  {
    "text": "the query string from the from the cache key you'll you can change any parameters you like you can even",
    "start": "556880",
    "end": "562399"
  },
  {
    "text": "specify a cache buster and you'll think you're talking to the back end but actually you'll be talking to the",
    "start": "562399",
    "end": "567920"
  },
  {
    "text": "cache and therefore your parameters will make no difference to the response in order to find",
    "start": "567920",
    "end": "574800"
  },
  {
    "text": "these pages we need to take extra measures one thing you can do is try and put cash",
    "start": "574800",
    "end": "581920"
  },
  {
    "start": "579000",
    "end": "579000"
  },
  {
    "text": "busters in http headers that are likely to be included in the cash key and brown miner will do",
    "start": "581920",
    "end": "589519"
  },
  {
    "text": "this by default as of today's update this approach works really well on some",
    "start": "589519",
    "end": "595040"
  },
  {
    "text": "systems for example on cloudflare by default the origin is in the cache key and so this will pierce",
    "start": "595040",
    "end": "601040"
  },
  {
    "text": "through their cache and tell you whether that page actually is dynamic or not",
    "start": "601040",
    "end": "606880"
  },
  {
    "text": "but it doesn't work on all systems because some of them basically ignore all the http headers or the ones that we can change",
    "start": "606880",
    "end": "613680"
  },
  {
    "text": "without just breaking the application anyway however there is a kind of a cheat you",
    "start": "613680",
    "end": "619600"
  },
  {
    "text": "can do on fastly and systems running varnish and various others",
    "start": "619600",
    "end": "624640"
  },
  {
    "text": "you can use the purge or fastly purge http methods to directly delete entries from the",
    "start": "624640",
    "end": "631279"
  },
  {
    "text": "target website's cache with no authentication this feature is fantastic for launching cache poisoning",
    "start": "631279",
    "end": "638560"
  },
  {
    "text": "attacks but it's also great for simply piercing through the cache to find out what's really going on with",
    "start": "638560",
    "end": "644800"
  },
  {
    "text": "the page behind it if that doesn't work well there is an option of last",
    "start": "644800",
    "end": "650079"
  },
  {
    "text": "resort it kind of sucks but you can take advantage of the fact that a lot of caches do only really lightweight normalization",
    "start": "650079",
    "end": "657600"
  },
  {
    "text": "on request parts whereas servers and frameworks especially tend to do much heavier weight stuff so",
    "start": "657600",
    "end": "665600"
  },
  {
    "text": "that means you can send requests that the cache regard as being different they generate",
    "start": "665600",
    "end": "670880"
  },
  {
    "text": "a different cache key because the path is different but once the back end server has finished processing them they end up",
    "start": "670880",
    "end": "676800"
  },
  {
    "text": "hitting exactly the same end point i've thought about putting this technique in for a minor and by the",
    "start": "676800",
    "end": "683839"
  },
  {
    "text": "time you watch this it may have happened but it is a bit unreliable so we'll have to see",
    "start": "683839",
    "end": "690399"
  },
  {
    "text": "what happens when you try this technique out well you're going to find some really obvious",
    "start": "690399",
    "end": "696160"
  },
  {
    "start": "693000",
    "end": "693000"
  },
  {
    "text": "vulnerabilities for example on this online newspaper i found reflected xss on every single page",
    "start": "696160",
    "end": "703279"
  },
  {
    "text": "including the home page and this is a site that has a bug bounty program normally a vulnerability that obvious",
    "start": "703279",
    "end": "710000"
  },
  {
    "text": "wouldn't last five minutes right but because of the cash no one had found",
    "start": "710000",
    "end": "715200"
  },
  {
    "text": "that vulnerability they just talked to the cache and probably concluded that this site was static but there's a",
    "start": "715200",
    "end": "722160"
  },
  {
    "text": "second effect because our payload here isn't part of the cache key so that means having sent that that",
    "start": "722160",
    "end": "729360"
  },
  {
    "text": "request myself shown there from that point onwards as long as i time that right so it hits the back end",
    "start": "729360",
    "end": "735279"
  },
  {
    "text": "anyone else who fetches that page is going to get my payload coming back at them",
    "start": "735279",
    "end": "740320"
  },
  {
    "text": "so in effect with this reflected cross-site scripting i've gained persistent control over every single",
    "start": "740320",
    "end": "746880"
  },
  {
    "text": "page on this website now there's some at this point some of you",
    "start": "746880",
    "end": "753120"
  },
  {
    "text": "are probably thinking well that company is just stupid they're playing with caching but they've got no",
    "start": "753120",
    "end": "758240"
  },
  {
    "text": "idea what they're doing there's no way that could happen to anyone who knows what they're doing",
    "start": "758240",
    "end": "765360"
  },
  {
    "text": "and to down to that point i'm going to use the same technique on",
    "start": "765839",
    "end": "771120"
  },
  {
    "start": "769000",
    "end": "769000"
  },
  {
    "text": "the main website of a caching vendor called cloudflare so here the gadget that we're using this",
    "start": "771120",
    "end": "776639"
  },
  {
    "text": "time looks pretty much harmless right all they're doing is they're taking the request and query",
    "start": "776639",
    "end": "783760"
  },
  {
    "text": "string that we give them and they're putting a slash on the end of the path and just like the previous target they've",
    "start": "783760",
    "end": "790639"
  },
  {
    "text": "excluded the whole query string from the cache key what we're going to do is we're going to take advantage of that extra forward",
    "start": "790639",
    "end": "797360"
  },
  {
    "text": "slash that they're sticking on so we're going to send a request that uses a really long query string",
    "start": "797360",
    "end": "803680"
  },
  {
    "text": "to mean that the resulting request line is the maximum length that their server will will allow",
    "start": "803680",
    "end": "811120"
  },
  {
    "text": "and then they're going to give me a redirect that takes that maximum length and puts one extra character",
    "start": "811120",
    "end": "816720"
  },
  {
    "text": "in it so then having done that if i time that right then from that point onwards if anyone",
    "start": "816720",
    "end": "824160"
  },
  {
    "text": "else is browsing cloudflare's site and they press that login link",
    "start": "824160",
    "end": "829360"
  },
  {
    "text": "they're going to get this cached redirect that includes my really long query string",
    "start": "829360",
    "end": "834800"
  },
  {
    "text": "and when they follow that redirect they're going to get blocked by the server because their request is too long so with one request we've",
    "start": "834800",
    "end": "842399"
  },
  {
    "text": "persistently taken down cloudflare's login page it's worth mentioning that you couldn't",
    "start": "842399",
    "end": "848399"
  },
  {
    "text": "send that last request by itself directly as a cash poisoning attack",
    "start": "848399",
    "end": "853440"
  },
  {
    "text": "because cloudflare would refuse to cache it because of the http error status code",
    "start": "853440",
    "end": "859760"
  },
  {
    "text": "it's the layer of indirection that the redirect adds that makes this issue exploitable",
    "start": "859760",
    "end": "867120"
  },
  {
    "text": "so i reported this to cloudflare and they could have obviously patched it on their site really easily",
    "start": "867120",
    "end": "873279"
  },
  {
    "text": "but they acknowledged that this was probably going to affect most of their customers as well",
    "start": "873279",
    "end": "878560"
  },
  {
    "text": "and so they deployed a kind of more general mitigation they said in the cache if the query",
    "start": "878560",
    "end": "885600"
  },
  {
    "text": "string is unkeyed and the query string in the responses location header",
    "start": "885600",
    "end": "893360"
  },
  {
    "text": "matches the query string in the request just refuse to cache that response uh the concept behind this",
    "start": "893360",
    "end": "901199"
  },
  {
    "text": "is completely sound but i was able to bypass it by encoding a single character",
    "start": "901199",
    "end": "907519"
  },
  {
    "text": "in the request because the server would decode it and therefore it wouldn't match and cloudflare has now fixed this but",
    "start": "907519",
    "end": "913920"
  },
  {
    "text": "obviously if you have any other transformations happening in between the query string of the request",
    "start": "913920",
    "end": "920079"
  },
  {
    "text": "and the location header you'll once again be able to bypass this this mitigation and take down a",
    "start": "920079",
    "end": "926639"
  },
  {
    "text": "whole bunch of pages so far we've seen how simple",
    "start": "926639",
    "end": "932399"
  },
  {
    "text": "transformations can have quite major unexpected effects and on some sites you'll find even the",
    "start": "932399",
    "end": "939440"
  },
  {
    "text": "transformations themselves get quite messy because they've decided to exclude specific parameters",
    "start": "939440",
    "end": "946000"
  },
  {
    "text": "from the cache key i've seen this happen with utm content quite a few time because it's an",
    "start": "946000",
    "end": "951680"
  },
  {
    "text": "analytics parameter it changes a lot and it's not really relevant to the back end so for performance reasons they just",
    "start": "951680",
    "end": "958399"
  },
  {
    "text": "exclude it from the key and obviously this makes full url-based",
    "start": "958399",
    "end": "963839"
  },
  {
    "text": "full url reflection based vulnerabilities really easy to exploit but what happens if they're",
    "start": "963839",
    "end": "971839"
  },
  {
    "text": "they've got this behavior and you find a vulnerability in how the parameter term is handled can you",
    "start": "971839",
    "end": "979680"
  },
  {
    "text": "combine that with this cash poisoning issue to escalate the severity well in theory you can't because",
    "start": "979680",
    "end": "986800"
  },
  {
    "text": "the term parameter is meant to be included in the key but actually it depends on the",
    "start": "986800",
    "end": "992320"
  },
  {
    "text": "implementation this is where cache parameter cloaking comes in",
    "start": "992320",
    "end": "997440"
  },
  {
    "text": "some people are going to implement these things by googling them landing on stack overflow and then implementing a",
    "start": "997440",
    "end": "1003680"
  },
  {
    "text": "regex that's how i would implement it at least and if you if someone's using a regex",
    "start": "1003680",
    "end": "1010399"
  },
  {
    "text": "like this well this one's meant to replace eliminate any parameters called",
    "start": "1010399",
    "end": "1016000"
  },
  {
    "text": "underscore from the cash key given that behavior how can we place a payload in the parameter queue",
    "start": "1016000",
    "end": "1022160"
  },
  {
    "text": "well just like so so here the interesting thing is that",
    "start": "1022160",
    "end": "1028959"
  },
  {
    "text": "they've eliminated this parameter from the key but they've substituted it with a question mark",
    "start": "1028959",
    "end": "1034640"
  },
  {
    "text": "so although we can or arbitrary things to arbitrary",
    "start": "1034640",
    "end": "1039678"
  },
  {
    "text": "values arbitrary parameters on the site we can only successfully poison",
    "start": "1039679",
    "end": "1045600"
  },
  {
    "text": "parameters used by the site that already have a question mark in them",
    "start": "1045600",
    "end": "1050799"
  },
  {
    "text": "these kinds of complications can arise fairly often with this type of",
    "start": "1050799",
    "end": "1056000"
  },
  {
    "text": "issue and they generally just make life more interesting here i've hear fairly humble target",
    "start": "1056000",
    "end": "1062160"
  },
  {
    "text": "right just a stack overflow post but this also works on some more serious companies",
    "start": "1062160",
    "end": "1068080"
  },
  {
    "start": "1066000",
    "end": "1066000"
  },
  {
    "text": "remember how we got akamai to show us a few cache keys and some of them had this akamai transform parameter",
    "start": "1068080",
    "end": "1074400"
  },
  {
    "text": "and some of them didn't that means maybe they're excluding this from the key and if we send a request with that",
    "start": "1074400",
    "end": "1079919"
  },
  {
    "text": "parameter we'll see it doesn't appear in the true cache key and if we change the value of that parameter",
    "start": "1079919",
    "end": "1086559"
  },
  {
    "text": "then we'll get a cache hit which confirms it is genuinely not in the key and",
    "start": "1086559",
    "end": "1093760"
  },
  {
    "text": "the cool thing here is that their parsing of the url is not quite optimal so as well as being",
    "start": "1093760",
    "end": "1099440"
  },
  {
    "text": "able to add this value to the query string we can also append arbitrary payloads to arbitrary",
    "start": "1099440",
    "end": "1106880"
  },
  {
    "text": "parameters of our choice using this technique here so here what the back end sees is one",
    "start": "1106880",
    "end": "1113919"
  },
  {
    "text": "parameter called x containing our payload but akamai will will eliminate the question mark and",
    "start": "1113919",
    "end": "1120720"
  },
  {
    "text": "everything after it from the cash key this would be extremely serious uh if it",
    "start": "1120720",
    "end": "1127200"
  },
  {
    "text": "wasn't for one small catch which is that there's actually an invisible bit not mentioned in any of",
    "start": "1127200",
    "end": "1132559"
  },
  {
    "text": "the cash keys that says did this request contain the parameter i can write transform",
    "start": "1132559",
    "end": "1139360"
  },
  {
    "text": "what that means is that you can only use this technique to exploit sites that are already using",
    "start": "1139360",
    "end": "1145440"
  },
  {
    "text": "the akamai transform functionality you can't hit arbitrary akamai targets with this",
    "start": "1145440",
    "end": "1152320"
  },
  {
    "start": "1152000",
    "end": "1152000"
  },
  {
    "text": "on a different target something was weird and i couldn't find an oracle that was any ghost so i looked at",
    "start": "1152559",
    "end": "1159280"
  },
  {
    "text": "the coat in order to figure out how to exploit it and we could see they were splitting",
    "start": "1159280",
    "end": "1165280"
  },
  {
    "text": "the query string on semicolons as well as ampersands",
    "start": "1165280",
    "end": "1170320"
  },
  {
    "text": "so that meant that in principle i could use a a payload like this to smuggle um a malicious bit of code",
    "start": "1170320",
    "end": "1178240"
  },
  {
    "text": "into the callback parameter that would be excluded from the cache and i thought great i'm going to set up",
    "start": "1178240",
    "end": "1184720"
  },
  {
    "text": "my demo using this because the vulnerable cache here is rack cache which is something i can easily set up myself",
    "start": "1184720",
    "end": "1191520"
  },
  {
    "text": "i set it up i tried it and it didn't work and it didn't work because ruby on rails",
    "start": "1191520",
    "end": "1197120"
  },
  {
    "text": "itself also splits parameters on semicolons as well as ampersands and that",
    "start": "1197120",
    "end": "1204640"
  },
  {
    "text": "is good news for rack cash uh although we're going to hack it in a different way shortly later",
    "start": "1204640",
    "end": "1209760"
  },
  {
    "text": "but it's bad news for ruby on rails because it means if you use a",
    "start": "1209760",
    "end": "1214960"
  },
  {
    "text": "application built on rails behind any normal cache like varnish or akamai",
    "start": "1214960",
    "end": "1220000"
  },
  {
    "start": "1215000",
    "end": "1215000"
  },
  {
    "text": "or whatever and you eliminate any parameter from the cache key then an attacker can exploit that to",
    "start": "1220000",
    "end": "1227280"
  },
  {
    "text": "make arbitrary unkeyed changes to arbitrary parameters on cash flow pages on your site for",
    "start": "1227280",
    "end": "1234559"
  },
  {
    "text": "example in this request here from akamai's point of view from the cache keys point of",
    "start": "1234559",
    "end": "1240720"
  },
  {
    "text": "view there's one parameter called callback and the value is legit",
    "start": "1240720",
    "end": "1245760"
  },
  {
    "text": "or whatever value the application happens to be using but when rails parses this it sees three parameters the",
    "start": "1245760",
    "end": "1252880"
  },
  {
    "text": "callback utm content and a second callback parameter",
    "start": "1252880",
    "end": "1258240"
  },
  {
    "text": "and it prioritizes the last parameter which is something as an attacker we have full control over so we can just",
    "start": "1258240",
    "end": "1264400"
  },
  {
    "text": "change that to whatever harmful code we like and then any page on that website",
    "start": "1264400",
    "end": "1269760"
  },
  {
    "text": "that uses that jsonp will end up being exploited",
    "start": "1269760",
    "end": "1276000"
  },
  {
    "start": "1276000",
    "end": "1276000"
  },
  {
    "text": "so say you found parameter cloaking using any of those techniques the next",
    "start": "1276000",
    "end": "1281760"
  },
  {
    "text": "step is to combine that with a gadget right and as we've seen traditional xss works great but if it's a hardened",
    "start": "1281760",
    "end": "1287600"
  },
  {
    "text": "target then you might not have that but the good news is you there's a whole bunch of",
    "start": "1287600",
    "end": "1292799"
  },
  {
    "text": "other things that are harmless by themselves and therefore less likely to be patched but still become harmful",
    "start": "1292799",
    "end": "1298880"
  },
  {
    "text": "in the presence of cash of cash poisoning and jsonp as we've seen is one of them but also",
    "start": "1298880",
    "end": "1305600"
  },
  {
    "text": "any kind of dynamic content in javascript files or css files typically this stuff",
    "start": "1305600",
    "end": "1311840"
  },
  {
    "text": "is harmless but but with cache poisoning we can poison",
    "start": "1311840",
    "end": "1317360"
  },
  {
    "text": "these resource files so that anyone that any pages that reference that resource file end up being exploited for example",
    "start": "1317360",
    "end": "1325760"
  },
  {
    "text": "i found a css file on one target that was they reflected",
    "start": "1325760",
    "end": "1331600"
  },
  {
    "text": "the query string in an import statement in that css file and by changing",
    "start": "1331600",
    "end": "1338159"
  },
  {
    "text": "the the query string you could break out of the import statement and import an arbitrary",
    "start": "1338159",
    "end": "1343520"
  },
  {
    "text": "malicious css file from your own site in order to steal sensitive information",
    "start": "1343520",
    "end": "1349280"
  },
  {
    "text": "from any pages that referenced that css file in fact",
    "start": "1349280",
    "end": "1354960"
  },
  {
    "text": "if the page that uses a css loads a css document doesn't have a doctype then you can even",
    "start": "1354960",
    "end": "1361039"
  },
  {
    "text": "persuade the browser to load html responses as css which can enable exploitation of",
    "start": "1361039",
    "end": "1366960"
  },
  {
    "text": "normally static css files and there's also major implications of",
    "start": "1366960",
    "end": "1372320"
  },
  {
    "text": "this issue that make relative path override issues substantially easier to exploit",
    "start": "1372320",
    "end": "1378400"
  },
  {
    "text": "however unfortunately it takes about 20 minutes to explain so i'm just going to leave that one for the",
    "start": "1378400",
    "end": "1383440"
  },
  {
    "text": "white paper now another way of hiding parameters",
    "start": "1383440",
    "end": "1389200"
  },
  {
    "start": "1386000",
    "end": "1386000"
  },
  {
    "text": "from the cache is simply to send a post request this is unbelievably simple i was quite",
    "start": "1389200",
    "end": "1394960"
  },
  {
    "text": "surprised to find this worked but on this chinese mapping site i found",
    "start": "1394960",
    "end": "1400400"
  },
  {
    "text": "reflected xss on every page if you use post you had to tweak the payload slightly to",
    "start": "1400400",
    "end": "1406240"
  },
  {
    "text": "bypass their waffle that's why that looks weird and the cool thing was they weren't including the request method",
    "start": "1406240",
    "end": "1412960"
  },
  {
    "text": "in the cache key so having sent that payload if someone sent a get to that site just browsing the site as",
    "start": "1412960",
    "end": "1419760"
  },
  {
    "text": "they normally would be then they ended up being ex being exploited by the poison cache",
    "start": "1419760",
    "end": "1426000"
  },
  {
    "text": "and just like the earlier xss issues we saw this one was present on every page of the site",
    "start": "1426000",
    "end": "1431679"
  },
  {
    "text": "so i could take persistent control over the entire website i actually had a research collision with",
    "start": "1431679",
    "end": "1439120"
  },
  {
    "text": "with someone else with that they were using the same technique around the same time so they've just published",
    "start": "1439120",
    "end": "1444240"
  },
  {
    "text": "a blog post coming out today hopefully and if you check that out you'll find some more examples",
    "start": "1444240",
    "end": "1449279"
  },
  {
    "text": "of this technique now that there was a collision there right",
    "start": "1449279",
    "end": "1454559"
  },
  {
    "text": "but with a small tweak we can make that approach work on a lot more systems",
    "start": "1454559",
    "end": "1460000"
  },
  {
    "text": "for inspiration let's look at the varnish documentation they say if a request has a body this",
    "start": "1460000",
    "end": "1466720"
  },
  {
    "text": "will be sent to the back end the default varnish config removes the body forget requests",
    "start": "1466720",
    "end": "1472799"
  },
  {
    "text": "because it is questionable if these requests are valid but some applications use them",
    "start": "1472799",
    "end": "1479919"
  },
  {
    "text": "so what happens if you're using a varnish config file that doesn't have this",
    "start": "1479919",
    "end": "1485360"
  },
  {
    "text": "snippet well unfortunately github didn't have this snippet and they were using ruby on",
    "start": "1485360",
    "end": "1490559"
  },
  {
    "text": "rails which does accept parameters in the body of get requests that meant that on cash flow on cash",
    "start": "1490559",
    "end": "1498559"
  },
  {
    "text": "ball pages i could make arbitrary changes to arbitrary parameters for example with this request",
    "start": "1498559",
    "end": "1504640"
  },
  {
    "text": "here i've poisoned their report abuse page so if you try and report abuse on my profile",
    "start": "1504640",
    "end": "1510799"
  },
  {
    "text": "it ends up reporting somebody else you you could also apply arbitrary",
    "start": "1510799",
    "end": "1517120"
  },
  {
    "text": "filters to hide issues in people's projects and such like and also just block access to the majority of project",
    "start": "1517120",
    "end": "1522720"
  },
  {
    "text": "content using this technique so i reported this to github and got a seven and a half cake bounty for that which",
    "start": "1522720",
    "end": "1528080"
  },
  {
    "text": "was pretty cool in addition to working on some varnish systems",
    "start": "1528080",
    "end": "1533600"
  },
  {
    "start": "1530000",
    "end": "1530000"
  },
  {
    "text": "this technique also works in exactly the same way on quite a few people using using cloud flare and on one of",
    "start": "1533600",
    "end": "1540400"
  },
  {
    "text": "those i had a really hard time finding a gadget to combine this behavior with",
    "start": "1540400",
    "end": "1546960"
  },
  {
    "text": "in the end i used a local redirect on their login page so that if you went to their login page",
    "start": "1546960",
    "end": "1553360"
  },
  {
    "text": "entered your credits and logged in then you would get redirected to the logout page which would then redirect you to the login bouncer and log you",
    "start": "1553360",
    "end": "1559840"
  },
  {
    "text": "back in to my account using my authentication token and then eventually put you on a page of",
    "start": "1559840",
    "end": "1567440"
  },
  {
    "text": "my choice so from your point of view you enter your credits you press login and you end",
    "start": "1567440",
    "end": "1572640"
  },
  {
    "text": "up logged in but you're actually in my account and unfortunately i can't describe the nature of the site but",
    "start": "1572640",
    "end": "1579120"
  },
  {
    "text": "if you were to then proceed to do something on the site i would have full knowledge of what you've done",
    "start": "1579120",
    "end": "1584960"
  },
  {
    "text": "there which could be quite interesting uh i reported this",
    "start": "1584960",
    "end": "1590400"
  },
  {
    "text": "sorry that makes it sound like it's a certain kind of science not that kind of site you know what i mean i reported this to cloudflare and they",
    "start": "1590400",
    "end": "1597679"
  },
  {
    "text": "said that they're not going to change this behavior but i've completely lost my thread now",
    "start": "1597679",
    "end": "1606720"
  },
  {
    "text": "but they did update their documentation to say don't trust get request bodies which basically means",
    "start": "1606720",
    "end": "1613600"
  },
  {
    "text": "don't use rails there's an interesting kind of side point here which is that both is",
    "start": "1613600",
    "end": "1620000"
  },
  {
    "text": "that this gadget that we've seen that we've used on this site and on github is an incredibly powerful gadget we can",
    "start": "1620000",
    "end": "1625120"
  },
  {
    "text": "make arbitrary changes to arbitrary parameters but neither of the exploits were that",
    "start": "1625120",
    "end": "1630400"
  },
  {
    "text": "harmful and that's because neither of those",
    "start": "1630400",
    "end": "1635679"
  },
  {
    "text": "sites had the right kind of gadget that you could use to make a high impact",
    "start": "1635679",
    "end": "1641919"
  },
  {
    "text": "exploit so how hard these cash poisoning issues hit you is massively dependent",
    "start": "1641919",
    "end": "1647520"
  },
  {
    "text": "on whether you've got these kind of almost exploitable vulnerabilities present on your site",
    "start": "1647520",
    "end": "1655200"
  },
  {
    "start": "1654000",
    "end": "1654000"
  },
  {
    "text": "so i use firefox for most of my testing and every year i'm doing my research and i",
    "start": "1655200",
    "end": "1661760"
  },
  {
    "text": "accidentally find a vulnerability in firefox's update infrastructure and this is no",
    "start": "1661760",
    "end": "1667120"
  },
  {
    "text": "different this one is going to show us how something even as simple and common as no as normalization can be really quite",
    "start": "1667120",
    "end": "1674880"
  },
  {
    "text": "harmful if you look at the nginx config on download.mozilla.org it looks fine",
    "start": "1674880",
    "end": "1680399"
  },
  {
    "text": "if you look at the proxy cache key documentation you'll see their key is very similar to the default nginx one",
    "start": "1680399",
    "end": "1687760"
  },
  {
    "text": "but if you look at the proxy pass documentation there's a kind of a clue that something might be wrong here it says if",
    "start": "1687760",
    "end": "1694320"
  },
  {
    "text": "you use proxy pass without a uri like mozilla have done then the request gry is passed to the server",
    "start": "1694320",
    "end": "1701919"
  },
  {
    "text": "in the same form as sent by a client when the original request is processed what that's hinting at is",
    "start": "1701919",
    "end": "1709440"
  },
  {
    "text": "the fact that this proxy cache key value is being normalized but the value that gets passed to the",
    "start": "1709440",
    "end": "1715200"
  },
  {
    "text": "upstream system is not being normalized what does that mean well whenever you",
    "start": "1715200",
    "end": "1721200"
  },
  {
    "text": "open a firefox and periodically thereafter it checks for important security updates that",
    "start": "1721200",
    "end": "1726960"
  },
  {
    "text": "need to be installed to keep you safe but and it does that with a url like",
    "start": "1726960",
    "end": "1732880"
  },
  {
    "text": "this and if there's a security update present it'll give you a redirect to the installer",
    "start": "1732880",
    "end": "1739840"
  },
  {
    "text": "but what happens if i send a request that looks like this it's buy it for by the same but i've url encoded the question mark",
    "start": "1739919",
    "end": "1747840"
  },
  {
    "text": "well enginex is going to url decode that question mark when it saves its cash key so from any next point of view this",
    "start": "1747840",
    "end": "1754159"
  },
  {
    "text": "is a completely valid check for updates but when the backend server sees the unnormalized version",
    "start": "1754159",
    "end": "1761440"
  },
  {
    "text": "of this request they interpret the whole thing as being the path so there's no parameters",
    "start": "1761440",
    "end": "1766480"
  },
  {
    "text": "and it breaks the redirect and in practice the update fails so if i send that",
    "start": "1766480",
    "end": "1772880"
  },
  {
    "text": "request and time it right then whenever anyone else checks for updates for firefox they get",
    "start": "1772880",
    "end": "1779520"
  },
  {
    "text": "this broken redirect and i've just disabled firefox security updates globally i think this is my favorite",
    "start": "1779520",
    "end": "1787120"
  },
  {
    "text": "denial of service issue that i've ever found",
    "start": "1787120",
    "end": "1791679"
  },
  {
    "start": "1792000",
    "end": "1792000"
  },
  {
    "text": "what else can you do with normalization well there's a classic issue that i'm sure many of you have run into where",
    "start": "1793039",
    "end": "1798640"
  },
  {
    "text": "you find some excess maybe it's in the path or more recently maybe even in the query string",
    "start": "1798640",
    "end": "1803919"
  },
  {
    "text": "and it looks great in burp but when you try and exploit a browser with it it doesn't",
    "start": "1803919",
    "end": "1808960"
  },
  {
    "text": "work because the browser is encoding your payload and the server is not decoding it but with normalization this",
    "start": "1808960",
    "end": "1817120"
  },
  {
    "text": "issue once again becomes exploitable because you can send your request shortly before the victim loads",
    "start": "1817120",
    "end": "1823279"
  },
  {
    "text": "the url you give them and they'll just get a cash hit from your request",
    "start": "1823279",
    "end": "1828320"
  },
  {
    "text": "they'll get your poisoned response and they'll get exploited on the topic of issues that are normally",
    "start": "1828320",
    "end": "1834840"
  },
  {
    "start": "1833000",
    "end": "1833000"
  },
  {
    "text": "unexploitable what do you do if you get cross-site scripting in a http header that's in the cache key",
    "start": "1834840",
    "end": "1841760"
  },
  {
    "text": "normally that's useless but on akamai they stick both query",
    "start": "1841760",
    "end": "1848320"
  },
  {
    "text": "parameters and headers into the same chunk of the cache key they separate them using underscores",
    "start": "1848320",
    "end": "1854320"
  },
  {
    "text": "and underscores aren't escaped so that means these two requests have exactly the same cache key so as an",
    "start": "1854320",
    "end": "1861360"
  },
  {
    "text": "attacker i i can send the first one with the poisoned origin which is something no browser would ever",
    "start": "1861360",
    "end": "1866880"
  },
  {
    "text": "agree to send and then i can hand the url of the second request to my victim",
    "start": "1866880",
    "end": "1872240"
  },
  {
    "text": "they'll hit that they'll get my poisoned response and get exploited",
    "start": "1872240",
    "end": "1877279"
  },
  {
    "text": "after seeing how easy that was in akamai i thought i'd try it on cloudflare according to their",
    "start": "1877279",
    "end": "1882960"
  },
  {
    "text": "documentation the cache key looks like this so these two requests should have the same key",
    "start": "1882960",
    "end": "1889440"
  },
  {
    "start": "1883000",
    "end": "1883000"
  },
  {
    "text": "however in practice it doesn't work and i tried a few things ran low on options and eventually sent",
    "start": "1889440",
    "end": "1895200"
  },
  {
    "text": "an email to cloudflare to complain that their documentation is incorrect and say could they fix it please",
    "start": "1895200",
    "end": "1901440"
  },
  {
    "text": "unfortunately one thing led to another and i had to explain the attack and then i got a response from their",
    "start": "1901440",
    "end": "1907360"
  },
  {
    "text": "security team saying well the documentation is wrong the attack",
    "start": "1907360",
    "end": "1912720"
  },
  {
    "text": "you're describing is possible but you're doing it wrong and we're not going to tell you how",
    "start": "1912720",
    "end": "1918720"
  },
  {
    "text": "and then they have now patched it uh but they did send me a t-shirt so it was possible to use some variation of this",
    "start": "1918720",
    "end": "1924640"
  },
  {
    "text": "on cloudflare but unfortunately i can't tell you how to do it on the opposite end of the spectrum some",
    "start": "1924640",
    "end": "1932240"
  },
  {
    "start": "1929000",
    "end": "1929000"
  },
  {
    "text": "attacks are so practical that it's not possible to do them safely",
    "start": "1932240",
    "end": "1937440"
  },
  {
    "text": "on adobe i was testing for a classic cache poisoning issue on a particular blog page on their blog",
    "start": "1937440",
    "end": "1944799"
  },
  {
    "text": "and i suddenly got a flood of loads and loads and loads of traffic to my server and it turns out",
    "start": "1944799",
    "end": "1952559"
  },
  {
    "text": "unfortunately for well me and adobe they were using an internal and application based cache",
    "start": "1952559",
    "end": "1958880"
  },
  {
    "text": "that was integrated into their application and had no concept of a cache key",
    "start": "1958880",
    "end": "1964159"
  },
  {
    "text": "so i poisoned the header of my page and that header was then being used on every page on the entire website",
    "start": "1964159",
    "end": "1970320"
  },
  {
    "text": "including their home page all the resource loads went to my site and all the links on their homepage also",
    "start": "1970320",
    "end": "1977679"
  },
  {
    "text": "sent people to my website this was not a great experience for either of us i reported it very",
    "start": "1977679",
    "end": "1984320"
  },
  {
    "text": "quickly they fixed it very quickly luckily they were quite understanding but you can see this kind of issue makes",
    "start": "1984320",
    "end": "1991120"
  },
  {
    "text": "the distinction between a legitimate-ish researcher and an attacker really quite blurry",
    "start": "1991120",
    "end": "1998399"
  },
  {
    "start": "1998000",
    "end": "1998000"
  },
  {
    "text": "and not only is internal cash poisoning uncontrollable it can also be invisible",
    "start": "1998399",
    "end": "2003600"
  },
  {
    "text": "on a a different time i had an idea for denial of service detection technique sent it to a bunch",
    "start": "2003600",
    "end": "2009360"
  },
  {
    "text": "of sites and got loads of traffic from the department of defense intranet eventually i think i figured out what",
    "start": "2009360",
    "end": "2016080"
  },
  {
    "text": "happened which is there's this site it's meant to be internal to the dod any attempt to access it from external",
    "start": "2016080",
    "end": "2023679"
  },
  {
    "text": "redirects to their internet which i can't access the denial of service",
    "start": "2023679",
    "end": "2029120"
  },
  {
    "text": "technique breaks the redirect it only lets you access the error page though but hitting the error page with a",
    "start": "2029120",
    "end": "2035440"
  },
  {
    "text": "certain payload poisons their internal cache and thereby poisons all the resource loads",
    "start": "2035440",
    "end": "2040960"
  },
  {
    "text": "in their internet administration interface so i can't tell you how to find internal",
    "start": "2040960",
    "end": "2047440"
  },
  {
    "start": "2046000",
    "end": "2046000"
  },
  {
    "text": "cash poisoning issues safely but i can't tell you how to recognize it to avoid wasting your time",
    "start": "2047440",
    "end": "2053520"
  },
  {
    "text": "if you see both old and val old and new values coming back in that one response that's a good clue",
    "start": "2053520",
    "end": "2060000"
  },
  {
    "text": "or reflection of your input on different pages or things just don't make sense and",
    "start": "2060000",
    "end": "2066398"
  },
  {
    "text": "haven't yet figured out how to do it completely safely but if you're doing any technique of any type",
    "start": "2066399",
    "end": "2072079"
  },
  {
    "text": "then this might happen by accident and what that means is whenever you use a domain whenever you give a domain to",
    "start": "2072079",
    "end": "2077679"
  },
  {
    "text": "the target that's not the real target domain please use a domain you control you do not want to be",
    "start": "2077679",
    "end": "2084079"
  },
  {
    "text": "sending all of your target websites traffic to evil.com unless you are the lucky owner of evil.com",
    "start": "2084079",
    "end": "2092638"
  },
  {
    "start": "2092000",
    "end": "2092000"
  },
  {
    "text": "so i was going to release a standalone tool for this research but instead i've done an update to param weiner which is the",
    "start": "2092720",
    "end": "2098960"
  },
  {
    "text": "open source burp suite extension that i originally wrote for my prior cash poisoning",
    "start": "2098960",
    "end": "2104560"
  },
  {
    "text": "research it can find almost all the techniques mentioned in this presentation and there's a demo of me using it to",
    "start": "2104560",
    "end": "2110800"
  },
  {
    "text": "exploit a fat get vulnerability in rack cache on the github page",
    "start": "2110800",
    "end": "2116240"
  },
  {
    "text": "please check it out as far as defense goes the key thing is if you want to",
    "start": "2116240",
    "end": "2122480"
  },
  {
    "text": "make these optimizations just rewrite the request not the cash key this is vastly safer also",
    "start": "2122480",
    "end": "2130560"
  },
  {
    "text": "don't accept fat get requests don't use rails i guess or see if you can patch it and",
    "start": "2130560",
    "end": "2137839"
  },
  {
    "text": "if you're using caching it's really important to patch unexploitable vulnerabilities",
    "start": "2137839",
    "end": "2144079"
  },
  {
    "start": "2144000",
    "end": "2144000"
  },
  {
    "text": "now there's a whole bunch of more information on this uh check out the white paper",
    "start": "2144079",
    "end": "2149280"
  },
  {
    "text": "which i've just published which has some a couple of extra techniques also the prior research is well worth",
    "start": "2149280",
    "end": "2154480"
  },
  {
    "text": "reading if you haven't already seen it and if you're watching this at black app check out emma client's presentation",
    "start": "2154480",
    "end": "2160480"
  },
  {
    "text": "on http uh request muggling because he invented it back in the day so i'm sure that's a good talk",
    "start": "2160480",
    "end": "2167599"
  },
  {
    "text": "this is not the end of novel cash poisoning issues coming out i've got loads of leads i'm",
    "start": "2167599",
    "end": "2173280"
  },
  {
    "text": "sure other people do too so please don't think this is a comprehensive presentation",
    "start": "2173280",
    "end": "2180240"
  },
  {
    "text": "and that basically means the most important thing to take away is that caching introduces unique",
    "start": "2180320",
    "end": "2185839"
  },
  {
    "text": "hazards and these may be well hidden and not documented by anyone anywhere ever",
    "start": "2185839",
    "end": "2191040"
  },
  {
    "text": "and as such if you're using caching unexploitable vulnerabilities are really worth patching",
    "start": "2191040",
    "end": "2198560"
  },
  {
    "text": "i'm going to take five minutes of questions now uh if you have any more for that feel free to chat me an email",
    "start": "2198560",
    "end": "2204160"
  },
  {
    "text": "don't forget to follow me on twitter and thank you for listening",
    "start": "2204160",
    "end": "2209200"
  },
  {
    "text": "cool thank you for listening i hope you enjoyed that does anyone have any questions uh if if",
    "start": "2211280",
    "end": "2218560"
  },
  {
    "text": "you do if you post in the chat box then i'll be able to see and answer them the one thing that i",
    "start": "2218560",
    "end": "2225839"
  },
  {
    "text": "need to add is that uh akamai would like me to tell you that they're working on a fix for the akamai issues mentioned in",
    "start": "2225839",
    "end": "2232240"
  },
  {
    "text": "this presentation",
    "start": "2232240",
    "end": "2243280"
  },
  {
    "text": "cool uh doesn't look like you've got any questions great thank you for listening uh don't",
    "start": "2243280",
    "end": "2249920"
  },
  {
    "text": "forget to check out the the academy labs and the white paper which has some extra",
    "start": "2249920",
    "end": "2255359"
  },
  {
    "text": "techniques uh stuck in there ah we've got one question",
    "start": "2255359",
    "end": "2261599"
  },
  {
    "text": "when i'm testing cool so the uh the question is when i'm",
    "start": "2262400",
    "end": "2269440"
  },
  {
    "text": "testing on live sites and i accidentally get persistent xss",
    "start": "2269440",
    "end": "2276160"
  },
  {
    "text": "uh how much do i disrupt the the business well uh",
    "start": "2276160",
    "end": "2283599"
  },
  {
    "text": "when you're testing for most of these issues you can just use a cash buster and what that means is that no",
    "start": "2283599",
    "end": "2291119"
  },
  {
    "text": "you'll cause no disruption for anyone because you're only poisoning a specific url",
    "start": "2291119",
    "end": "2298320"
  },
  {
    "text": "that other people aren't visiting the only exception to that is the internal cash poisoning uh",
    "start": "2298320",
    "end": "2306160"
  },
  {
    "text": "internal cash poisoning as i mentioned is really dangerous and you can't do",
    "start": "2306160",
    "end": "2312000"
  },
  {
    "text": "much about it really so it's only happened to me twice and the site was basically defaced",
    "start": "2312000",
    "end": "2320000"
  },
  {
    "text": "until their team manually fixed it i think which is one of the reasons that i",
    "start": "2320000",
    "end": "2325599"
  },
  {
    "text": "didn't talk very much about internal cache poisoning because i can't properly research it until i figured out",
    "start": "2325599",
    "end": "2331119"
  },
  {
    "text": "how to do it without causing business disruption uh but most of the techniques in this",
    "start": "2331119",
    "end": "2336320"
  },
  {
    "text": "presentation are completely safe as long as you use a cache",
    "start": "2336320",
    "end": "2341440"
  },
  {
    "text": "uh the other question is do i have linkedin no i don't have linkedin but i am on",
    "start": "2342000",
    "end": "2348560"
  },
  {
    "text": "twitter uh that's my version of negative and i think i think that's everything",
    "start": "2348560",
    "end": "2357119"
  },
  {
    "text": "cool quick thanks for listening",
    "start": "2357119",
    "end": "2362160"
  }
]