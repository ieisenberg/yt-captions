[
  {
    "start": "0",
    "end": "80000"
  },
  {
    "text": "and without further ado Michael Schwartz Daniel gross and more it's live",
    "start": "30",
    "end": "7399"
  },
  {
    "text": "hi and welcome to a talk meltem basics details consequences where we talk about",
    "start": "8900",
    "end": "15780"
  },
  {
    "text": "one of the infamous cpu vulnerabilities of January my name is Marc lip I'm a PhD student at",
    "start": "15780",
    "end": "24060"
  },
  {
    "text": "cards University of Technology you can find me on Twitter write me an email or talk to me later on",
    "start": "24060",
    "end": "31519"
  },
  {
    "text": "my name is Micah Schwartz I'm also a PhD student at the same University in class",
    "start": "32270",
    "end": "37530"
  },
  {
    "text": "I'm also on Twitter I can write me an email talk to me afterwards I'll be here for the rest of the conference and DEF",
    "start": "37530",
    "end": "43290"
  },
  {
    "text": "CON and my name is Danny goose I'm a postdoc at cards University of Technology and you can also reach me",
    "start": "43290",
    "end": "49710"
  },
  {
    "text": "online we also had a lot of other people who contributed to this work under spoke",
    "start": "49710",
    "end": "56219"
  },
  {
    "text": "Tanya Jenkins Vanna has Mike Hamburg young horn poll coach Stefan monger",
    "start": "56219",
    "end": "61379"
  },
  {
    "text": "Thomas pressure and your violin we're not here but this was a great collaboration with them and yeah we're",
    "start": "61379",
    "end": "68850"
  },
  {
    "text": "looking forward to working with them in the future yeah so let's dive into it and we start right off with reading",
    "start": "68850",
    "end": "75689"
  },
  {
    "text": "journal memory from user space because that's pretty straightforward right Michael right so we have our virtual",
    "start": "75689",
    "end": "82080"
  },
  {
    "start": "80000",
    "end": "80000"
  },
  {
    "text": "address space in our application we have our user space addresses all map there we have the column mapped in our",
    "start": "82080",
    "end": "87630"
  },
  {
    "text": "application so why not read something that lies in the car yeah why not",
    "start": "87630",
    "end": "92790"
  },
  {
    "text": "so we just pick an address like the Linux spinner get the address from that and since every one of us know see we",
    "start": "92790",
    "end": "100350"
  },
  {
    "text": "can do some simple pointer magic use the address passed it to in character",
    "start": "100350",
    "end": "105840"
  },
  {
    "text": "pointer dereference it and then we can just print out the character located at",
    "start": "105840",
    "end": "111329"
  },
  {
    "text": "this address so this sounds really easy so let me try this I'd compile your code",
    "start": "111329",
    "end": "116880"
  },
  {
    "text": "I run your code see what's happening and it doesn't seem to be that straightforward",
    "start": "116880",
    "end": "122490"
  },
  {
    "text": "it's seg faults when I thought yeah that's not really surprising you can't just access kernel addresses",
    "start": "122490",
    "end": "128910"
  },
  {
    "text": "it's working as intended current addresses are not accessible and that's how it's supposed to be any",
    "start": "128910",
    "end": "136210"
  },
  {
    "text": "invalid excess will throw an exception and it will lead to a segmentation fault yeah but there's not an issue because",
    "start": "136210",
    "end": "143950"
  },
  {
    "text": "whenever you have an exception you just catch it and then continue your code so that's pretty easy we just install a",
    "start": "143950",
    "end": "150580"
  },
  {
    "text": "signal handler so whenever this segmentation fault occurs we jump back and continue our next instruction is",
    "start": "150580",
    "end": "157750"
  },
  {
    "text": "that all is that how you always deal with errors yeah that's what you're supposed to do right and then we can just read the",
    "start": "157750",
    "end": "164080"
  },
  {
    "text": "value I don't think that's how it works",
    "start": "164080",
    "end": "170890"
  },
  {
    "text": "Moyes really so I tried that and still I get no crown memory there okay maybe",
    "start": "170890",
    "end": "177730"
  },
  {
    "text": "this privilege check actually seems to work and we cannot just access stuff",
    "start": "177730",
    "end": "182860"
  },
  {
    "text": "from the kernel and it doesn't seem to be that straightforward as you thought",
    "start": "182860",
    "end": "188590"
  },
  {
    "text": "it is okay so maybe we should get go back to the start maybe we should go back to operating systems 101 back to",
    "start": "188590",
    "end": "196300"
  },
  {
    "text": "the basics and there it looks like this we have the user space we have the kernel space and they are isolated from",
    "start": "196300",
    "end": "203350"
  },
  {
    "start": "198000",
    "end": "198000"
  },
  {
    "text": "each other the user space can't just access the kernel space and this isolation is a combination of hardware",
    "start": "203350",
    "end": "210940"
  },
  {
    "text": "and software and user applications can't just pass by the bypass this isolation",
    "start": "210940",
    "end": "220180"
  },
  {
    "text": "it's a huge wall that can't easily be crossed and there's also a fundamental",
    "start": "220180",
    "end": "226720"
  },
  {
    "text": "concept of all the modern operating systems and systems we use so we have",
    "start": "226720",
    "end": "232600"
  },
  {
    "text": "this virtual address space with just virtual addresses we usually call them just addresses because we have no idea",
    "start": "232600",
    "end": "238810"
  },
  {
    "text": "about physical addresses when writing programs and the CPU helps us with this virtual address space to isolate our",
    "start": "238810",
    "end": "245380"
  },
  {
    "text": "process from all the other process running on this computer and then we",
    "start": "245380",
    "end": "251140"
  },
  {
    "text": "have this physical memory and the operating system manages that and there is this mapping that the CPU uses to",
    "start": "251140",
    "end": "258190"
  },
  {
    "text": "translate virtual addresses to the action physical address frame and",
    "start": "258190",
    "end": "265020"
  },
  {
    "text": "this technique is our version address techniques we have page tables for that",
    "start": "265020",
    "end": "270690"
  },
  {
    "text": "we have a lot of tables in memory the virtual address is used by the CPU to",
    "start": "270690",
    "end": "276419"
  },
  {
    "text": "index this table so split into multiple parts use this illnesses to this page tables multi-level structure and at the",
    "start": "276419",
    "end": "285030"
  },
  {
    "text": "last page table then we have a page table entry that actually maps the physical page to this virtual address",
    "start": "285030",
    "end": "292470"
  },
  {
    "text": "and now we can zoom in to this page table entry because it's quite interesting what's in there",
    "start": "292470",
    "end": "297569"
  },
  {
    "start": "296000",
    "end": "296000"
  },
  {
    "text": "yeah and if we look at this different bits here we have the present bit right of a bit user space accessible right",
    "start": "297569",
    "end": "302819"
  },
  {
    "text": "through uncatchable reference dirty size with global bit and the non-executable bit some ignored bits and the physical",
    "start": "302819",
    "end": "308669"
  },
  {
    "text": "page number but the most interesting part for us here is the user space accessible bit because this defines that",
    "start": "308669",
    "end": "314970"
  },
  {
    "text": "an address cannot be accessed by a user space program if this bit is not set it",
    "start": "314970",
    "end": "321270"
  },
  {
    "text": "cannot be accessed and this should be set for all kernel addresses yeah but in",
    "start": "321270",
    "end": "326370"
  },
  {
    "start": "325000",
    "end": "325000"
  },
  {
    "text": "addition what we need to know is that typically the kernel is mapped into every address space and in addition we",
    "start": "326370",
    "end": "332490"
  },
  {
    "text": "have the direct physical map which maps the entire physical memory also in the Chrome so as we can see in this picture",
    "start": "332490",
    "end": "340520"
  },
  {
    "text": "there's two virtual addresses mapping to the same physical memory so maybe we can",
    "start": "340520",
    "end": "347009"
  },
  {
    "text": "use those addresses to read the memory from so to summarize when we want load",
    "start": "347009",
    "end": "352770"
  },
  {
    "start": "351000",
    "end": "351000"
  },
  {
    "text": "an address we come to the permission track and either we have the permission",
    "start": "352770",
    "end": "358590"
  },
  {
    "text": "to load the data so we are fine then we get loaded data and can use it or the",
    "start": "358590",
    "end": "364919"
  },
  {
    "text": "permission check fails and then we simply crash but that's what we see on",
    "start": "364919",
    "end": "370949"
  },
  {
    "text": "the architectural level but there are other attacks which allow us to see and",
    "start": "370949",
    "end": "376259"
  },
  {
    "text": "observe things that we wouldn't do intentionally and these attacks are",
    "start": "376259",
    "end": "382110"
  },
  {
    "text": "called so-called side-channel attacks and so safe software infrastructure if",
    "start": "382110",
    "end": "388440"
  },
  {
    "start": "384000",
    "end": "384000"
  },
  {
    "text": "we have programs which do not contain any bug this does not mean necessary that the execution of those programs on",
    "start": "388440",
    "end": "395370"
  },
  {
    "text": "our CPUs are safe because information itself can leak from",
    "start": "395370",
    "end": "401450"
  },
  {
    "text": "the underlying hardware and those sites on EDX then exploit this unintentional",
    "start": "401450",
    "end": "408590"
  },
  {
    "text": "information leakage by observing those side effects and this for instance could",
    "start": "408590",
    "end": "413720"
  },
  {
    "text": "be the power consumption of the device so depending on the key that is used the",
    "start": "413720",
    "end": "419090"
  },
  {
    "text": "device needs more power if it processes a 0 or a 1 or the overall execution time",
    "start": "419090",
    "end": "425390"
  },
  {
    "text": "of the algorithm can allow us to observe the secret that is processed in addition",
    "start": "425390",
    "end": "432500"
  },
  {
    "text": "we have those CPU caches and maybe those can also be exploited I think the CPU",
    "start": "432500",
    "end": "438860"
  },
  {
    "text": "caches are an interesting topic so let's talk a bit more about caches and and texts with them so if you look at a",
    "start": "438860",
    "end": "446210"
  },
  {
    "start": "444000",
    "end": "444000"
  },
  {
    "text": "simple program on the left side simple C code just outputs two variables and then",
    "start": "446210",
    "end": "451400"
  },
  {
    "text": "we have our CPU in the middle and our T Ram and the program has to output a",
    "start": "451400",
    "end": "456650"
  },
  {
    "text": "value like the variable I here what happens we have to get the value somehow",
    "start": "456650",
    "end": "461750"
  },
  {
    "text": "so first it tries to locate this value inside the processor in the cache which",
    "start": "461750",
    "end": "467420"
  },
  {
    "text": "is a really fast memory inside the CPU if it's not there because it was never used before it has to be requested from",
    "start": "467420",
    "end": "474710"
  },
  {
    "text": "the DRAM and it has to be read from the memory the memory then answers our",
    "start": "474710",
    "end": "480350"
  },
  {
    "text": "request for this value responds with the value and it goes again back to the CPU",
    "start": "480350",
    "end": "485930"
  },
  {
    "text": "is stored there in the CPU cache so if we need it again then it will be faster",
    "start": "485930",
    "end": "490970"
  },
  {
    "text": "and then we can use it for the second access to this variable we see it's",
    "start": "490970",
    "end": "497150"
  },
  {
    "text": "already in the CPU cache because we used it before it's stored there for future access until it gets evicted by a lot of",
    "start": "497150",
    "end": "505190"
  },
  {
    "text": "other data and we have a cache hit there we can read it directly from the CPU",
    "start": "505190",
    "end": "510260"
  },
  {
    "text": "cache and there's no DRM access involved so this is a lot faster than this Didius",
    "start": "510260",
    "end": "516469"
  },
  {
    "text": "process of requesting it from the trm and waiting for the theorem which is a really slow memory and this",
    "start": "516469",
    "end": "524320"
  },
  {
    "text": "makes our programs run a lot faster and we can even measure that if we have some",
    "start": "524320",
    "end": "530130"
  },
  {
    "start": "527000",
    "end": "527000"
  },
  {
    "text": "measurement methods to measure really small timings like we have on most of",
    "start": "530130",
    "end": "536800"
  },
  {
    "text": "the CPUs nowadays then we can really distinguish whether such a memory access comes from the cache or has to be served",
    "start": "536800",
    "end": "544720"
  },
  {
    "text": "from the DRAM but in Si have these differences here we can probably exploit",
    "start": "544720",
    "end": "551170"
  },
  {
    "text": "that in an attack right how will you do that I would think of this situation here we have an attacker program a",
    "start": "551170",
    "end": "557560"
  },
  {
    "text": "victim program and they use some shared memory some shared library and this shared library is one memory location in",
    "start": "557560",
    "end": "563589"
  },
  {
    "text": "there is cached it's cached for both and if the attacker now continuously flushes this memory location it will be not in a",
    "start": "563589",
    "end": "570850"
  },
  {
    "text": "cache anymore and only if the victim accesses this memory location then it's",
    "start": "570850",
    "end": "576790"
  },
  {
    "text": "in the cache again and the attacker will also frequently reacts s this location",
    "start": "576790",
    "end": "581829"
  },
  {
    "text": "and when the attacker observes a fast memory access the attacker learns that",
    "start": "581829",
    "end": "587230"
  },
  {
    "text": "the victim has accessed this variable in the meantime and if the attacker observes low slow access time then the",
    "start": "587230",
    "end": "594910"
  },
  {
    "text": "attacker learns that the victim probably did not access it so we can see whether someone has accessed some specific data",
    "start": "594910",
    "end": "602230"
  },
  {
    "text": "element exactly great so this is pretty low level already so when we think about",
    "start": "602230",
    "end": "609940"
  },
  {
    "start": "609000",
    "end": "609000"
  },
  {
    "text": "programs we have a certain architecture we have an instruction set and the",
    "start": "609940",
    "end": "615010"
  },
  {
    "text": "instruction set is just an abstract model of our computer that we use it could be either x86 arm v8 for instance",
    "start": "615010",
    "end": "622420"
  },
  {
    "text": "or spark and it serves as an interface between the hardware that we're using",
    "start": "622420",
    "end": "628000"
  },
  {
    "text": "and the software that we are writing and when we talk about microarchitecture we",
    "start": "628000",
    "end": "633760"
  },
  {
    "text": "talk about the actual implementation of the instruction set and as we know we",
    "start": "633760",
    "end": "639459"
  },
  {
    "text": "have many different CPUs therefore we have also many different microarchitectures like AMD rising or",
    "start": "639459",
    "end": "645459"
  },
  {
    "text": "the intel core CPUs or the intricacy on GPUs and so on so if you now think back",
    "start": "645459",
    "end": "653529"
  },
  {
    "start": "653000",
    "end": "653000"
  },
  {
    "text": "of computer architecture 101 how does it actually work if you have a program what",
    "start": "653529",
    "end": "658749"
  },
  {
    "text": "does the CPU do and then we have this pipeline there where we have to multiple",
    "start": "658749",
    "end": "664240"
  },
  {
    "text": "stages and first we fetch an instruction into the instruction cache then we",
    "start": "664240",
    "end": "669610"
  },
  {
    "text": "decode this instruction execute the instruction in the execution unit and we",
    "start": "669610",
    "end": "674800"
  },
  {
    "text": "can do memory accesses and update the architectural register files and we can",
    "start": "674800",
    "end": "682059"
  },
  {
    "text": "do that in a pipeline so if we are done with the first step of the fetch step of one instruction we can already get to",
    "start": "682059",
    "end": "689589"
  },
  {
    "text": "the next instruction and fetch the next instruction so we can pipeline that thing and that makes our program core a",
    "start": "689589",
    "end": "696399"
  },
  {
    "text": "bit faster because we don't have to wait for one execution to be finished when we start the next instruction but all",
    "start": "696399",
    "end": "704920"
  },
  {
    "text": "instructions are executed in order so in the same order as they appear in our",
    "start": "704920",
    "end": "710800"
  },
  {
    "text": "program and if we have some dependencies that we cannot fulfill in the execution",
    "start": "710800",
    "end": "716379"
  },
  {
    "text": "then we have to stall there and wait until the dependency is resolved for this instruction so it can continue and",
    "start": "716379",
    "end": "723430"
  },
  {
    "text": "if data is not cached we need to wait for a dram until it's in the cache but",
    "start": "723430",
    "end": "729189"
  },
  {
    "start": "728000",
    "end": "728000"
  },
  {
    "text": "if you think about this program for instance here there are many things you can paralyze here and some have",
    "start": "729189",
    "end": "735309"
  },
  {
    "text": "dependencies so it would be very clever to paralyze these steps and only run the",
    "start": "735309",
    "end": "740620"
  },
  {
    "text": "parts that depend on previous computations at a later point right yeah",
    "start": "740620",
    "end": "745959"
  },
  {
    "text": "so not only does the compiler change the sequence of the instructions that are executed also the CPU itself can",
    "start": "745959",
    "end": "753069"
  },
  {
    "text": "optimize that and when we have such a CPU who does that we talked about out of order executions so we now have two",
    "start": "753069",
    "end": "760870"
  },
  {
    "text": "sides the front end on the top and the back end on the bottom and the instructions are fetched and decoded in",
    "start": "760870",
    "end": "766750"
  },
  {
    "text": "the front end and then they are dispatched into the back end and there we have multiple execution units that",
    "start": "766750",
    "end": "774040"
  },
  {
    "text": "then process those instructions this means that we can now execute",
    "start": "774040",
    "end": "779860"
  },
  {
    "text": "instructions out of order and they just now need to wait until the dependencies",
    "start": "779860",
    "end": "785980"
  },
  {
    "text": "are ready if they do not have a dependency you can execute them right away so this means",
    "start": "785980",
    "end": "791480"
  },
  {
    "text": "that in your program you can have instructions that would occur later but I executed before other instructions",
    "start": "791480",
    "end": "798620"
  },
  {
    "text": "because the execution unit has time to work on that instruction but the most",
    "start": "798620",
    "end": "804440"
  },
  {
    "text": "important thing is that those instructions are then retired in order because otherwise the program would do",
    "start": "804440",
    "end": "810650"
  },
  {
    "text": "something different what the programmer did not intend the program to do and only then when this instruction is",
    "start": "810650",
    "end": "818060"
  },
  {
    "text": "retired the architectural state becomes visible and when an exception occurs they are",
    "start": "818060",
    "end": "825260"
  },
  {
    "text": "checked during the retirement and then the pipeline can be flushed and the CPU can recover from a same state that it",
    "start": "825260",
    "end": "832670"
  },
  {
    "text": "had before so although this is called out of order this yes architectural II it looks like everything is executed yes",
    "start": "832670",
    "end": "839540"
  },
  {
    "text": "because it's happening on the microarchitecture level so on the architecture level everything is the",
    "start": "839540",
    "end": "845150"
  },
  {
    "text": "same and you just don't know how the CPU is built but since the state only",
    "start": "845150",
    "end": "851690"
  },
  {
    "text": "becomes visible architecture Li what does this mean on the microarchitecture",
    "start": "851690",
    "end": "856750"
  },
  {
    "text": "level so I have a good idea we can change the code from earlier to my new",
    "start": "856750",
    "end": "862610"
  },
  {
    "start": "860000",
    "end": "860000"
  },
  {
    "text": "code because I'm good at programming we start right off with a null pointer dereference wait wait wait what what I",
    "start": "862610",
    "end": "869090"
  },
  {
    "text": "are trying to do here yeah so first I'm just referencing yet with zero why is",
    "start": "869090",
    "end": "874700"
  },
  {
    "text": "there even a volatile in there yeah because when I wrote the code the compiler said this statement has no",
    "start": "874700",
    "end": "880820"
  },
  {
    "text": "effect so it would optimize the code away so you really want to have a null",
    "start": "880820",
    "end": "886010"
  },
  {
    "text": "pointer there which precious your program yeah why not make sense at least to me so my static code analysis not",
    "start": "886010",
    "end": "893450"
  },
  {
    "text": "happy with that does he have a null pointer yeah who cares about code analyzers there are so many false",
    "start": "893450",
    "end": "898940"
  },
  {
    "text": "positive like in this example so at first we dereferencing the null pointer and then we just access an index of an",
    "start": "898940",
    "end": "906410"
  },
  {
    "text": "array okay so it crashes okay you can",
    "start": "906410",
    "end": "913220"
  },
  {
    "text": "just catch the segmentation fault and if we look at the flash and reload attack that Daniel described there",
    "start": "913220",
    "end": "918950"
  },
  {
    "text": "we can now just iterate with the flash and reload attack over the entire array",
    "start": "918950",
    "end": "923990"
  },
  {
    "text": "and boom you have a cache hit so you're unreachable code line which",
    "start": "923990",
    "end": "930830"
  },
  {
    "text": "comes after the null pointer which should crash the program immediately was actually executed yeah it's all see that",
    "start": "930830",
    "end": "937970"
  },
  {
    "text": "by using volatile it has an effect and we can see that in the cache so they",
    "start": "937970",
    "end": "944150"
  },
  {
    "text": "accept an exception was too late maybe so it's something although it should have crashed already so that's",
    "start": "944150",
    "end": "950690"
  },
  {
    "text": "interesting that means that out of all the executed instructions leave microarchitecture traces and that can be",
    "start": "950690",
    "end": "957550"
  },
  {
    "text": "some state of the cache it can be other Mike from architectural elements that",
    "start": "957550",
    "end": "963320"
  },
  {
    "text": "are brought in to a different state but it can also be some concurrency effect",
    "start": "963320",
    "end": "969250"
  },
  {
    "text": "we give a name to such instructions we call them transient instructions because we somehow execute them but then we've",
    "start": "969250",
    "end": "976940"
  },
  {
    "text": "managed before they are actually architectural II made visible so we can",
    "start": "976940",
    "end": "983510"
  },
  {
    "text": "through micro architectural side channels then observe the execution of",
    "start": "983510",
    "end": "989630"
  },
  {
    "text": "these transient instructions we found on December 3rd we were quite busy around",
    "start": "989630",
    "end": "996740"
  },
  {
    "text": "the time we were because we were still busy with the research on the other black hair talk we had earlier by that",
    "start": "996740",
    "end": "1002800"
  },
  {
    "text": "time but on December 3rd we decided ok we should probably prioritize this and look at this now and then we looked at",
    "start": "1002800",
    "end": "1010480"
  },
  {
    "text": "this independently and all three of us came up with an implementation of the mate on attack and we discovered that it",
    "start": "1010480",
    "end": "1017770"
  },
  {
    "text": "actually worked so the only thing that we need to change from my code example",
    "start": "1017770",
    "end": "1023770"
  },
  {
    "text": "earlier is if you remember the first example that we had we just used the address from the kernel and dereferences",
    "start": "1023770",
    "end": "1030430"
  },
  {
    "text": "it but this time instead of using printf we just access the array at the index",
    "start": "1030430",
    "end": "1037150"
  },
  {
    "text": "represented padded bytes that we just read and then we do the same flush and",
    "start": "1037150",
    "end": "1043959"
  },
  {
    "text": "reload attack again as earlier mounted over the entire array and check if there",
    "start": "1043959",
    "end": "1049480"
  },
  {
    "text": "is a part of the array that is cashed so you say just adding another layer of indirection again solves all",
    "start": "1049480",
    "end": "1056260"
  },
  {
    "text": "the problems like all the time I do okay so let's try that",
    "start": "1056260",
    "end": "1061740"
  },
  {
    "text": "Wow so I did that and I got a cache hit you know exactly at this index of the",
    "start": "1061740",
    "end": "1069640"
  },
  {
    "text": "value at the address I dereference so the index of the cache it actually",
    "start": "1069640",
    "end": "1075310"
  },
  {
    "text": "revealed the value that store there in the kernel memory so termination check",
    "start": "1075310",
    "end": "1081640"
  },
  {
    "text": "was not fast enough it sounds like you planned this is meltdown Melton is using",
    "start": "1081640",
    "end": "1089140"
  },
  {
    "text": "out of order execution to read data from any address the index of the cache hit",
    "start": "1089140",
    "end": "1097360"
  },
  {
    "text": "reveals what data we read because we encode it through this cache side-channel to transmit it from the",
    "start": "1097360",
    "end": "1103810"
  },
  {
    "text": "olive oyl execution realm to the normal world the permission check is not fast",
    "start": "1103810",
    "end": "1109150"
  },
  {
    "text": "enough in some cases and the entirely physical entire physical memory is typically accessible through the kernel",
    "start": "1109150",
    "end": "1115630"
  },
  {
    "text": "space and we reported this to Intel on December 4 and then continued working in",
    "start": "1115630",
    "end": "1122170"
  },
  {
    "text": "this direction and one of the first things that I wrote on December 3rd they",
    "start": "1122170",
    "end": "1128290"
  },
  {
    "text": "was still I wrote a tool to dump just arbitrary memory locations dump and dump",
    "start": "1128290",
    "end": "1134620"
  },
  {
    "text": "Mary and yeah Karl Mary all over the terminal so we also brought a demo of",
    "start": "1134620",
    "end": "1142780"
  },
  {
    "text": "this with us we just stopped at a certain address and dump the memory and",
    "start": "1142780",
    "end": "1148240"
  },
  {
    "text": "in this example the address is located at the position in memory where there is",
    "start": "1148240",
    "end": "1154480"
  },
  {
    "text": "a log stored for the descriptions of the package manager installed on the system and we just tamp it if there would be a",
    "start": "1154480",
    "end": "1161770"
  },
  {
    "text": "key stored in the air we could also lick the key so independently on what's written there we",
    "start": "1161770",
    "end": "1166810"
  },
  {
    "text": "can dump it but with the code that you showed before we can only read a single",
    "start": "1166810",
    "end": "1173080"
  },
  {
    "start": "1168000",
    "end": "1168000"
  },
  {
    "text": "character and then do the flash reload but it crashes immediately because it's still an exception that",
    "start": "1173080",
    "end": "1178429"
  },
  {
    "text": "has to be handled so how do you prevent the crash then to dump the whole memory so like in the beginning I said when",
    "start": "1178429",
    "end": "1185629"
  },
  {
    "text": "there is an exception you just catch the exception so we can just do fault handling to catch the exception jump",
    "start": "1185629",
    "end": "1191450"
  },
  {
    "text": "back and try again in addition we can also do fault suppression by using",
    "start": "1191450",
    "end": "1197059"
  },
  {
    "text": "include tsx which we'll see pretty soon yeah when we got in touch with Paul",
    "start": "1197059",
    "end": "1202159"
  },
  {
    "text": "culture through inter interconnected earth with us with polyculture he told us that he founds something he called",
    "start": "1202159",
    "end": "1208940"
  },
  {
    "text": "spectra and then we thought okay yeah we can also use this to suppress faults",
    "start": "1208940",
    "end": "1214580"
  },
  {
    "text": "right yes event fault yes so with speculative execution we can also prevent the fault in the first place",
    "start": "1214580",
    "end": "1220460"
  },
  {
    "text": "so let's talk about this version with TSX because I think that's one of the most beautiful versions of meltdown TSX",
    "start": "1220460",
    "end": "1228440"
  },
  {
    "start": "1221000",
    "end": "1221000"
  },
  {
    "text": "is a really cool feature it was designed by ental to replace locking in certain scenarios but we used",
    "start": "1228440",
    "end": "1235429"
  },
  {
    "text": "it for a lot of different things already because it has a really cool side effect of suppressing exceptions it just",
    "start": "1235429",
    "end": "1242149"
  },
  {
    "text": "started transaction and to stuff whatever you want to do and you can do illegal stuff in it like dereference a",
    "start": "1242149",
    "end": "1248480"
  },
  {
    "text": "coil memory address which would normally throw an exception but the tsx transaction just reports there and",
    "start": "1248480",
    "end": "1254809"
  },
  {
    "text": "doesn't crash the application so we can simply start a TSX transaction before we",
    "start": "1254809",
    "end": "1260869"
  },
  {
    "text": "do all this meltdown magic the transaction will abort but that's fine",
    "start": "1260869",
    "end": "1266059"
  },
  {
    "text": "the program does not crash and we get the memory and we can do that in a loop and dump the whole memory with that yeah",
    "start": "1266059",
    "end": "1273799"
  },
  {
    "text": "and every might way yeah because we don't have to handle exceptions like in a exception handling case yes also we",
    "start": "1273799",
    "end": "1282169"
  },
  {
    "start": "1281000",
    "end": "1281000"
  },
  {
    "text": "can use asset speculative execution to prevent the exception to occur in the",
    "start": "1282169",
    "end": "1287240"
  },
  {
    "text": "first place so in this example we have the speculate variable which is just random modulo 2 and then depending on",
    "start": "1287240",
    "end": "1295309"
  },
  {
    "text": "the value written in there we choose an address which is either a valid address",
    "start": "1295309",
    "end": "1300619"
  },
  {
    "text": "or the inaccessible kernel address then we have the if condition and depending",
    "start": "1300619",
    "end": "1306409"
  },
  {
    "text": "on what the value is we either try to read from the village position on but by Miss draining the branch",
    "start": "1306409",
    "end": "1313200"
  },
  {
    "text": "predictor who does not know at this place okay do I go into that condition or not because it hasn't read the",
    "start": "1313200",
    "end": "1320610"
  },
  {
    "text": "variable speculate yet it will at some point try to read the kernel address and",
    "start": "1320610",
    "end": "1326130"
  },
  {
    "text": "then use the value to load the address stored and the index of the array and",
    "start": "1326130",
    "end": "1332790"
  },
  {
    "text": "then we have the flash and reload again and then we can also leak the memory we",
    "start": "1332790",
    "end": "1339390"
  },
  {
    "text": "can even improve the performance by a really nice trick by adding an",
    "start": "1339390",
    "end": "1345480"
  },
  {
    "text": "additional nine pointer dereference a null pointer I really really like our",
    "start": "1345480",
    "end": "1350610"
  },
  {
    "text": "null pointer so we learn to love them during the development so in our code we",
    "start": "1350610",
    "end": "1357000"
  },
  {
    "text": "just add a null pointer dereference before we dereference the current address or more illegal stuff in our",
    "start": "1357000",
    "end": "1362460"
  },
  {
    "text": "application and this is really cool because it it makes the take a lot",
    "start": "1362460",
    "end": "1368220"
  },
  {
    "text": "faster and more stable because apparently that the null pointer blocks",
    "start": "1368220",
    "end": "1374730"
  },
  {
    "text": "some exception handling and we have more time to actually leak this value so this",
    "start": "1374730",
    "end": "1381420"
  },
  {
    "text": "is all very nice but you can only leak data that is in level one cache right",
    "start": "1381420",
    "end": "1387180"
  },
  {
    "text": "not anything else what if I told you that you can leak the entire memory",
    "start": "1387180",
    "end": "1393930"
  },
  {
    "text": "contents with my town okay so what we",
    "start": "1393930",
    "end": "1399930"
  },
  {
    "start": "1397000",
    "end": "1397000"
  },
  {
    "text": "saw in january and also before that we had a lot of trouble convincing other people that we can actually read data",
    "start": "1399930",
    "end": "1406350"
  },
  {
    "text": "that is not in the level 1 cache it was assumed that you can only leak data is stored in the level 1 cache this was",
    "start": "1406350",
    "end": "1412410"
  },
  {
    "text": "also what google yuen-han from google project zero reported and we tried a lot",
    "start": "1412410",
    "end": "1418170"
  },
  {
    "text": "of things and yeah for example we experimented by forcing the meltdown",
    "start": "1418170",
    "end": "1425430"
  },
  {
    "text": "attack to one processor core and then on a different core we had the secret in",
    "start": "1425430",
    "end": "1430710"
  },
  {
    "text": "the application so they can share the ladder first level cache that one cache only the last level cache",
    "start": "1430710",
    "end": "1437440"
  },
  {
    "text": "and we were still able to leak the secret so it can't be the case with the l1 it also works with the l3 cache we",
    "start": "1437440",
    "end": "1444370"
  },
  {
    "text": "also made sure that it's never in the l1 by constantly flushing the secret and still we were able to Lee get it it took",
    "start": "1444370",
    "end": "1452230"
  },
  {
    "text": "a bit longer so it was not that fast in leaking the values but still we were",
    "start": "1452230",
    "end": "1458470"
  },
  {
    "text": "able to leak when you Stella also in a level 3 cache and of course was in a level 2 cache and during this Melton",
    "start": "1458470",
    "end": "1467500"
  },
  {
    "text": "would even get the values into the level 1 cache for us in some cases but we can",
    "start": "1467500",
    "end": "1474760"
  },
  {
    "text": "also get got one step further by using uncatchable memory so we mark pages in",
    "start": "1474760",
    "end": "1481510"
  },
  {
    "start": "1477000",
    "end": "1477000"
  },
  {
    "text": "the page table as uncatchable and this means that every read or write operation will go directly to the DRAM so it will",
    "start": "1481510",
    "end": "1489970"
  },
  {
    "text": "bypass the cache entirely so we make sure it's not in the level 1 level 2 or level 3 cache it won't be stored in the",
    "start": "1489970",
    "end": "1496150"
  },
  {
    "text": "cache at all and if the attacker is able to do a legitimate load of this value by",
    "start": "1496150",
    "end": "1503590"
  },
  {
    "text": "either issuing a sis call that then uses this value on the same CPU core the data",
    "start": "1503590",
    "end": "1509590"
  },
  {
    "text": "still can't believe so we think that Melton might read the value directly",
    "start": "1509590",
    "end": "1515740"
  },
  {
    "text": "from one of the fill buffers in this scenario because they are shared between",
    "start": "1515740",
    "end": "1521140"
  },
  {
    "text": "threads running on the same core so one high profit can attack the other one so",
    "start": "1521140",
    "end": "1528370"
  },
  {
    "text": "you can dump the entire memory but it's horribly slow right yeah but why would",
    "start": "1528370",
    "end": "1535480"
  },
  {
    "text": "you all want to leak the entire memory you have a lot of that you just want to leak secrets you don't want and lick",
    "start": "1535480",
    "end": "1542890"
  },
  {
    "start": "1542000",
    "end": "1542000"
  },
  {
    "text": "everything just find something that you're interested in leaking and do a",
    "start": "1542890",
    "end": "1549640"
  },
  {
    "text": "targeted attack using meltdown not the entire memory term but something like say for example you use hard disk",
    "start": "1549640",
    "end": "1556300"
  },
  {
    "text": "encryption right and use this very crypt open source tool for disk encryption and",
    "start": "1556300",
    "end": "1562210"
  },
  {
    "text": "is a software tool so it at some point it stores the key of your hard disk inside the",
    "start": "1562210",
    "end": "1568610"
  },
  {
    "text": "memory and if I have that key then I can get your laptop decrypt your hard disk",
    "start": "1568610",
    "end": "1574220"
  },
  {
    "text": "and get all your interesting research projects but it would not be practically to search for that key right it's just a",
    "start": "1574220",
    "end": "1582890"
  },
  {
    "text": "small application and we can find out where he is so we actually did the demo",
    "start": "1582890",
    "end": "1590960"
  },
  {
    "text": "on that so on the right you see a shell by user called the victim and he starts",
    "start": "1590960",
    "end": "1598670"
  },
  {
    "text": "the veracrypt application of the recent version that you can download today then",
    "start": "1598670",
    "end": "1604310"
  },
  {
    "text": "he will create a new encrypted partition stored on the system so you pass the password which should be stored the",
    "start": "1604310",
    "end": "1610610"
  },
  {
    "text": "encryption algorithm decides and then you enter your super secret password so that no one can read your data that",
    "start": "1610610",
    "end": "1617750"
  },
  {
    "text": "you're storing in there so we do that we generate some random key by moving the",
    "start": "1617750",
    "end": "1622940"
  },
  {
    "text": "mouse and we just speed it up the video because otherwise the video would take ages to present after that the victim is",
    "start": "1622940",
    "end": "1631910"
  },
  {
    "text": "going to mount a volume so he needs to enter the password again and then the volume will be mounted and he can use it",
    "start": "1631910",
    "end": "1639110"
  },
  {
    "text": "on the filesystem what the victim is going to do then he will open the volume",
    "start": "1639110",
    "end": "1645200"
  },
  {
    "text": "that is mounted in the file explorer and move his secret files in there now they",
    "start": "1645200",
    "end": "1654170"
  },
  {
    "text": "are stored on the encrypted volume and no one else can read it until we start",
    "start": "1654170",
    "end": "1661160"
  },
  {
    "text": "our exploit on the Left shell so we have the attacker user he has no sudo privileges and he will",
    "start": "1661160",
    "end": "1669500"
  },
  {
    "text": "run he will create a report and directory at first where no files are in",
    "start": "1669500",
    "end": "1675230"
  },
  {
    "text": "there and then he's going to run how I exploit what he exploited us it checks for",
    "start": "1675230",
    "end": "1680300"
  },
  {
    "text": "offsets depending on the kernel version that is used and then it's going to break case law because KLR is active on",
    "start": "1680300",
    "end": "1687770"
  },
  {
    "text": "the system we need to first break it so that we can find the correct address of our identity mapping then there is a",
    "start": "1687770",
    "end": "1695120"
  },
  {
    "text": "desk struct that we see later on where we can go through a list the process which we want to attack so",
    "start": "1695120",
    "end": "1701970"
  },
  {
    "text": "we do this then we can read either the entire memory of this process or if",
    "start": "1701970",
    "end": "1707820"
  },
  {
    "text": "there is no ASL are active we can read the key directly then we just use this key to decrypt the volume and mount it",
    "start": "1707820",
    "end": "1715620"
  },
  {
    "text": "using a tool or expected to the file system and now we have the files stored",
    "start": "1715620",
    "end": "1720660"
  },
  {
    "text": "in the encrypted volume by stealing the key with melton and we can look at them for instance we can now get the credit",
    "start": "1720660",
    "end": "1727920"
  },
  {
    "text": "card pin or watch the video that is stored in there why did you show my credit card PIN in the video and",
    "start": "1727920",
    "end": "1735720"
  },
  {
    "text": "actually this is the video of our blackheads best song phony submission",
    "start": "1735720",
    "end": "1740730"
  },
  {
    "text": "last year using male town we can we",
    "start": "1740730",
    "end": "1746010"
  },
  {
    "text": "targeted next as well target something very specific we have seen we have to T",
    "start": "1746010",
    "end": "1751320"
  },
  {
    "text": "randomized case lar to access the internal internal structures but this is actually pretty easy because we have",
    "start": "1751320",
    "end": "1759150"
  },
  {
    "text": "known values inside the kernel for example a version string a Linux spanner and we know the default address reg is",
    "start": "1759150",
    "end": "1766230"
  },
  {
    "text": "located for every kernel version and then we only have a really small entropy",
    "start": "1766230",
    "end": "1771480"
  },
  {
    "text": "for the kernel address space layout randomization just a few bits so there are only 64 possible randomization",
    "start": "1771480",
    "end": "1777840"
  },
  {
    "text": "offsets and we just fry them read the value there and if we found it then we",
    "start": "1777840",
    "end": "1782970"
  },
  {
    "text": "can't be random eyes all the addresses and work as if we don't have any case",
    "start": "1782970",
    "end": "1788130"
  },
  {
    "text": "they are active yes and the next thing like I said the Linux kernel manages all",
    "start": "1788130",
    "end": "1794670"
  },
  {
    "start": "1791000",
    "end": "1791000"
  },
  {
    "text": "processes in a list and the head of the list is stored in the init task",
    "start": "1794670",
    "end": "1799920"
  },
  {
    "text": "structure and the location of this it's at a fixed offset depending on the build kernel version and if you know the",
    "start": "1799920",
    "end": "1806490"
  },
  {
    "text": "kernel version of the distribution you know exactly where it is because it doesn't change for every user of this",
    "start": "1806490",
    "end": "1811890"
  },
  {
    "text": "distribution and each task list structure itself contains the pointer to",
    "start": "1811890",
    "end": "1817980"
  },
  {
    "text": "the next entry of this containing the process ID the name and also the root of",
    "start": "1817980",
    "end": "1824190"
  },
  {
    "text": "the multi-page table and okay so what we want to do is we",
    "start": "1824190",
    "end": "1832929"
  },
  {
    "start": "1827000",
    "end": "1827000"
  },
  {
    "text": "want to resolve virtual addresses to physical addresses using the paging structures so that we can actually add",
    "start": "1832929",
    "end": "1840369"
  },
  {
    "text": "this physical address to the identity mapping offset to the direct physical map offset and then read the values from",
    "start": "1840369",
    "end": "1847330"
  },
  {
    "text": "there and we can do that by just iterating over the paging structures of this process and then dump the",
    "start": "1847330",
    "end": "1853119"
  },
  {
    "text": "corresponding pages they might be in a randomized order but they are four kilobyte blocks easy to combine them and",
    "start": "1853119",
    "end": "1859570"
  },
  {
    "text": "we know how to combine them from the paging structures the location in other",
    "start": "1859570",
    "end": "1865389"
  },
  {
    "text": "cases the location of the key might be known if it's at a fixed address for instance because ASL is disabled and",
    "start": "1865389",
    "end": "1870970"
  },
  {
    "text": "then we can of course directly just dump the key yes and then you know there is a key in this memory dump then you can use",
    "start": "1870970",
    "end": "1877840"
  },
  {
    "text": "a tool like a es key finds 2 X 2 key from the entire memory dump then you can use for instance in our demo pie",
    "start": "1877840",
    "end": "1884559"
  },
  {
    "text": "TrueCrypt to decrypt the disk image and extract the data but what's important to",
    "start": "1884559",
    "end": "1892149"
  },
  {
    "text": "say here that this doesn't affect only veracrypt this affects every application that stores the secret in DRAM the",
    "start": "1892149",
    "end": "1901119"
  },
  {
    "text": "question now is who is affected right which processors are actually affected and it's not only Intel so Intel CPUs",
    "start": "1901119",
    "end": "1910269"
  },
  {
    "start": "1907000",
    "end": "1907000"
  },
  {
    "text": "most of them are affected back from many years ago except for some smaller CPUs",
    "start": "1910269",
    "end": "1918970"
  },
  {
    "text": "like some atoms they're not affected for a empty empty they seem not to be affected at least we couldn't mound a",
    "start": "1918970",
    "end": "1926139"
  },
  {
    "text": "meltdown attack there and we haven't heard of anyone being successful in mountain email tone attack on AMT",
    "start": "1926139",
    "end": "1932879"
  },
  {
    "text": "computers forearm there are smartphones and there's even one affected in the",
    "start": "1932879",
    "end": "1939700"
  },
  {
    "text": "high-end smartphones the cortex a 75 that was published in January as well by",
    "start": "1939700",
    "end": "1946119"
  },
  {
    "text": "arm so this one is affected core you can also mount meltdown on this core and for",
    "start": "1946119",
    "end": "1951999"
  },
  {
    "text": "all other windows like IBM they have affected architectures like the power",
    "start": "1951999",
    "end": "1957639"
  },
  {
    "text": "architecture power eight power nine you can also mount melt on attack there so it's just into its many CPU when there's many",
    "start": "1957639",
    "end": "1965930"
  },
  {
    "text": "CPU models that are actually affected by this back there Apple CPUs are also",
    "start": "1965930",
    "end": "1972260"
  },
  {
    "text": "affected they said that all of their Mac and iOS devices are affected by the",
    "start": "1972260",
    "end": "1977780"
  },
  {
    "text": "meltdown bug so this is the list that was online in January where all those",
    "start": "1977780",
    "end": "1984980"
  },
  {
    "text": "manufacturers said yeah this our affected CPUs but in the end they also added CPU manufacturers for instance",
    "start": "1984980",
    "end": "1992300"
  },
  {
    "text": "Samsung with the galaxy s7 introduced the Mongoose m1 CPU architecture which",
    "start": "1992300",
    "end": "1998960"
  },
  {
    "start": "1993000",
    "end": "1993000"
  },
  {
    "text": "has some interesting properties and it was its first custom CPU design in the",
    "start": "1998960",
    "end": "2004270"
  },
  {
    "text": "Exynos eight ahktar SOC s and it has a perceptron branch prediction a fall out",
    "start": "2004270",
    "end": "2011830"
  },
  {
    "text": "of order instruction execution including fall out of order loads and stores what",
    "start": "2011830",
    "end": "2017590"
  },
  {
    "text": "could this possibly mean we can try to mount meltdown there so on the right we",
    "start": "2017590",
    "end": "2023500"
  },
  {
    "text": "have a root well because we want to obtain the physical address so we cheated there a bit but that's okay",
    "start": "2023500",
    "end": "2028630"
  },
  {
    "text": "because on the Left we have a normal shell as user on the right which start our secret application which has a",
    "start": "2028630",
    "end": "2035260"
  },
  {
    "text": "string contained printing out the address that we then use in the normal user application and as we can see using",
    "start": "2035260",
    "end": "2042730"
  },
  {
    "text": "the identity mapping we can instantly dump the address stored there but",
    "start": "2042730",
    "end": "2048600"
  },
  {
    "text": "luckily Samsung fixed it already so if you have the latest update you are good",
    "start": "2048600",
    "end": "2056350"
  },
  {
    "text": "to go and meltdown is fixed but the latest update was published last month",
    "start": "2056350",
    "end": "2063639"
  },
  {
    "text": "so that's what yeah I've took them quite some time to actually fix it so in the",
    "start": "2063640",
    "end": "2070210"
  },
  {
    "text": "end there are different CPU manufacturers as well as well that are also affected and we need to evaluate",
    "start": "2070210",
    "end": "2076750"
  },
  {
    "text": "the attack on other CPUs of course as well yeah yeah and also we need to",
    "start": "2076750",
    "end": "2083320"
  },
  {
    "text": "notify the users and custom rom developers you also have the problem",
    "start": "2083320",
    "end": "2088330"
  },
  {
    "text": "that if they if if Samsung catches it in their operating system maybe custom ROM",
    "start": "2088330",
    "end": "2094179"
  },
  {
    "text": "did of us don't know about this if this is not publicly documented right so it's really important that we publicly",
    "start": "2094179",
    "end": "2100590"
  },
  {
    "text": "document which processors are affected okay so we have a problem now because we",
    "start": "2100590",
    "end": "2106980"
  },
  {
    "text": "can't store a secret anymore in theorem can we at least saw secrets in registers short registers must be safe",
    "start": "2106980",
    "end": "2113730"
  },
  {
    "text": "yeah it doesn't attack registers right so with January arm also found a closely",
    "start": "2113730",
    "end": "2119760"
  },
  {
    "start": "2116000",
    "end": "2116000"
  },
  {
    "text": "related meltdown variant where you could read system registers that are usually not accessible in the current exception",
    "start": "2119760",
    "end": "2127200"
  },
  {
    "text": "level your program is running affected is the cortex a15 the cortex a 57 and a",
    "start": "2127200",
    "end": "2134369"
  },
  {
    "text": "72 and the impact of this is that you could break case a lot right away or if",
    "start": "2134369",
    "end": "2141540"
  },
  {
    "text": "you use point authentication for instance the key would also be stored in a register and you could leave the key",
    "start": "2141540",
    "end": "2147750"
  },
  {
    "text": "with that also we brought a demo with you on the Samsung Galaxy s6 and when we",
    "start": "2147750",
    "end": "2155730"
  },
  {
    "text": "run our attack there we can see that immediately we can dump all the registers of different privilege levels",
    "start": "2155730",
    "end": "2161430"
  },
  {
    "text": "that our user space application usually has no access to okay so who is affected",
    "start": "2161430",
    "end": "2170940"
  },
  {
    "text": "by this variant intel is affected we heard first rumors about that in January",
    "start": "2170940",
    "end": "2177480"
  },
  {
    "text": "but inter publicly disclosed this in May May 21st they in their disclosure they",
    "start": "2177480",
    "end": "2184290"
  },
  {
    "text": "said that almost every CPU is affected and they called it rocks rogue system",
    "start": "2184290",
    "end": "2189690"
  },
  {
    "text": "register read yeah we talked about",
    "start": "2189690",
    "end": "2195119"
  },
  {
    "start": "2193000",
    "end": "2193000"
  },
  {
    "text": "Melton now is meltdown a sectional attack it runs as a side channel attack",
    "start": "2195119",
    "end": "2201000"
  },
  {
    "text": "I think it's not a side channel attack and I'm very certain about that because for a side channel attack you would have",
    "start": "2201000",
    "end": "2207869"
  },
  {
    "text": "to use a side channel to read some secret value and we read the data",
    "start": "2207869",
    "end": "2212970"
  },
  {
    "text": "directly we directly access it it does not really work any more directly we",
    "start": "2212970",
    "end": "2218369"
  },
  {
    "text": "just dereference a pointer and read the value into a register how can it be any more directly ok we then use a side",
    "start": "2218369",
    "end": "2226140"
  },
  {
    "text": "channel for transmission from one realm to the other but just because we use a side",
    "start": "2226140",
    "end": "2231599"
  },
  {
    "text": "channel somewhere in the process does not make the entire thing the side channel attack if you have some malware",
    "start": "2231599",
    "end": "2237750"
  },
  {
    "text": "running on an air-gapped system and transmit the data to the outside through some fancy channel it does not make the",
    "start": "2237750",
    "end": "2244619"
  },
  {
    "text": "entire attack a side channel attack a side channel attack means that it's much more passive the victim is not actively",
    "start": "2244619",
    "end": "2252890"
  },
  {
    "text": "manipulated in some way okay but if it's not a side channel attack is it a speculative execution at least yeah okay",
    "start": "2252890",
    "end": "2260369"
  },
  {
    "start": "2258000",
    "end": "2258000"
  },
  {
    "text": "so we often heard that marathon is speculating beyond faulting instructions",
    "start": "2260369",
    "end": "2266250"
  },
  {
    "text": "and that's not speculative execution that's just out of order execution we're already running instructions out of aura",
    "start": "2266250",
    "end": "2273180"
  },
  {
    "text": "that follow after the current instruction but even if you if you say",
    "start": "2273180",
    "end": "2278460"
  },
  {
    "text": "okay I still want to want to call that speculative execution fine but",
    "start": "2278460",
    "end": "2283740"
  },
  {
    "text": "speculating beyond faulting instructions it's not even the actual problem AMD does that and they are not affected it's",
    "start": "2283740",
    "end": "2291000"
  },
  {
    "text": "not the problem that anyone is speculating beyond faulting instructions here the problem is that we are fetching",
    "start": "2291000",
    "end": "2296759"
  },
  {
    "text": "and using real values for instructions after we are after we are having a",
    "start": "2296759",
    "end": "2303779"
  },
  {
    "text": "faulting instructions so the problem is fetching and using the real values here",
    "start": "2303779",
    "end": "2310400"
  },
  {
    "text": "okay we should fix that I guess because there's a really really bad problem here so we should find out",
    "start": "2311720",
    "end": "2318809"
  },
  {
    "text": "how to fix that the problem here is in hardware so the problem is rooted in",
    "start": "2318809",
    "end": "2324089"
  },
  {
    "start": "2319000",
    "end": "2319000"
  },
  {
    "text": "hardware so ultimately we should fix that in hardware it's a race condition",
    "start": "2324089",
    "end": "2329160"
  },
  {
    "text": "between the memory fetch and the permission check and we have to fix that",
    "start": "2329160",
    "end": "2334259"
  },
  {
    "text": "in hardware and we can also do a hard",
    "start": "2334259",
    "end": "2339269"
  },
  {
    "text": "split of the user space and the kernel space so that was already designed for",
    "start": "2339269",
    "end": "2344579"
  },
  {
    "text": "harm but I guess no operating system used it before so that the kernel space",
    "start": "2344579",
    "end": "2350640"
  },
  {
    "text": "is not even there if you run in user space fixing the hardware it's a long-term",
    "start": "2350640",
    "end": "2355950"
  },
  {
    "text": "solution we cannot just replace all the CPUs right away so we needed a short-term solution yeah",
    "start": "2355950",
    "end": "2361680"
  },
  {
    "text": "we need to find something in software and the problem are the kernel addresses",
    "start": "2361680",
    "end": "2366870"
  },
  {
    "text": "Carl addresses are there in user space and we can't just take those kernel",
    "start": "2366870",
    "end": "2373380"
  },
  {
    "text": "addresses we don't need them usually and remove them if you run in user space we don't need kernel addresses we don't we",
    "start": "2373380",
    "end": "2380880"
  },
  {
    "text": "cannot access the column we don't need to call it there the problem here is that the user space accessible check is",
    "start": "2380880",
    "end": "2386070"
  },
  {
    "text": "not reliable in hardware so our idea was we just unmapped the entire kernel in",
    "start": "2386070",
    "end": "2391380"
  },
  {
    "text": "user space and then the kernel addresses are no longer present and if they are not present then you can't translate",
    "start": "2391380",
    "end": "2397350"
  },
  {
    "text": "them to any physical address so you can't run the attack if you think back of our operating system illustration we",
    "start": "2397350",
    "end": "2404970"
  },
  {
    "text": "would switch from this view to a separate kind of view and a user view and now the user can run the attack so",
    "start": "2404970",
    "end": "2411330"
  },
  {
    "text": "the user can run through the wall but there's nothing behind it so the user can't gain anything from it yeah so",
    "start": "2411330",
    "end": "2418470"
  },
  {
    "text": "actually we publish Kaiser in May 2007 team but not to mitigate meltdown but to",
    "start": "2418470",
    "end": "2425550"
  },
  {
    "text": "mitigate other side channel attacks because Melton was not known until then and inadvertently and luckily to us it",
    "start": "2425550",
    "end": "2433290"
  },
  {
    "text": "also defeats meltdown we introduced a",
    "start": "2433290",
    "end": "2438390"
  },
  {
    "text": "POC implementation the Linux kernel which we also uploaded in May and yeah",
    "start": "2438390",
    "end": "2446610"
  },
  {
    "text": "it was not that easy so just our mounting the complete curl every space",
    "start": "2446610",
    "end": "2452580"
  },
  {
    "text": "is not possible the architecture still requires some parts of the kernel to be",
    "start": "2452580",
    "end": "2457650"
  },
  {
    "text": "present like interrupt descriptor tables if we have an interrupt in user space for example because we move the mouse or",
    "start": "2457650",
    "end": "2464190"
  },
  {
    "text": "enter stuff on the keyboard we still need something mapped in the kernel so context different things stuff for",
    "start": "2464190",
    "end": "2471420"
  },
  {
    "text": "context switches we still needs a few parts of the color by mapped in the user space also in addition when we want to",
    "start": "2471420",
    "end": "2478290"
  },
  {
    "text": "switch to the other address space we need to know the physical location of that so we need to update the ca3",
    "start": "2478290",
    "end": "2483870"
  },
  {
    "text": "register we this address in this address has also to be stored somewhere and how can we do",
    "start": "2483870",
    "end": "2489630"
  },
  {
    "text": "this efficiently so instead of one page global directory we now use two there",
    "start": "2489630",
    "end": "2496049"
  },
  {
    "text": "are eight K in size and also 8 K aligned and then we can do a nice trick we can",
    "start": "2496049",
    "end": "2502259"
  },
  {
    "text": "just flip the twelfth bit of the pointer to switch between those half and",
    "start": "2502259",
    "end": "2508170"
  },
  {
    "text": "therefore off with those mappings so as you can see on the illustration at the",
    "start": "2508170",
    "end": "2513299"
  },
  {
    "text": "bottom we just flip one bit then we use the another offset which is our other",
    "start": "2513299",
    "end": "2521119"
  },
  {
    "text": "address space and then we can continue and therefore we do not need to store",
    "start": "2521119",
    "end": "2526410"
  },
  {
    "text": "the address somewhere else which would need to translate and then store in the CFU register we can just use the value",
    "start": "2526410",
    "end": "2532799"
  },
  {
    "text": "already stored there flip a bit and then change the address space and this is pretty nice so inter and other is",
    "start": "2532799",
    "end": "2539970"
  },
  {
    "start": "2536000",
    "end": "2536000"
  },
  {
    "text": "improved over our Kaiser patch starting from May we already got first feedback",
    "start": "2539970",
    "end": "2545759"
  },
  {
    "text": "in May and later on we got also emails from Intel asking us specific things",
    "start": "2545759",
    "end": "2551670"
  },
  {
    "text": "about the Kaiser patch and then finally notifying us that they developed a",
    "start": "2551670",
    "end": "2557309"
  },
  {
    "text": "larger patch set which actually makes this practical for the Linux kernel it",
    "start": "2557309",
    "end": "2562589"
  },
  {
    "text": "was later on merged into the Linux kernel as kpti because they didn't like the name either for some reason funds",
    "start": "2562589",
    "end": "2569309"
  },
  {
    "text": "like Kaiser in German is the name of the largest penguin the emperor penguin but i think they were not aware of that so",
    "start": "2569309",
    "end": "2577349"
  },
  {
    "text": "there were also patches for armed 64 and it's not only in linux it's of course",
    "start": "2577349",
    "end": "2583829"
  },
  {
    "start": "2581000",
    "end": "2581000"
  },
  {
    "text": "you know atom major operating systems as well for example apple released updates already in december i think and they had",
    "start": "2583829",
    "end": "2592380"
  },
  {
    "text": "an option that was that things similar before i'm 32 bits yeah where i was doing rather the opposite",
    "start": "2592380",
    "end": "2598109"
  },
  {
    "text": "yeah they they didn't unmapped the kernel in user space but the user space in kernel so that mitigated different attacks and",
    "start": "2598109",
    "end": "2604970"
  },
  {
    "text": "after this update they also had the other way around so that protections in",
    "start": "2604970",
    "end": "2610440"
  },
  {
    "text": "both directions and of course windows also has a mitigation which they call converge",
    "start": "2610440",
    "end": "2615569"
  },
  {
    "start": "2611000",
    "end": "2611000"
  },
  {
    "text": "address shadow and it's their implementation to mitigate meltdown on Windows so introducing such a",
    "start": "2615569",
    "end": "2624479"
  },
  {
    "start": "2623000",
    "end": "2623000"
  },
  {
    "text": "fundamental change into an operating system is extremely challenging our proof of concept had many bugs it",
    "start": "2624479",
    "end": "2631410"
  },
  {
    "text": "crashed very frequently and why yeah we were very lucky that that we got the",
    "start": "2631410",
    "end": "2637229"
  },
  {
    "text": "feedback from the Linux community because we were really unexperienced in",
    "start": "2637229",
    "end": "2642690"
  },
  {
    "text": "writing larger kernel patch and we had a lot of more time because at this point meltdown wasn't known so we didn't have",
    "start": "2642690",
    "end": "2648630"
  },
  {
    "text": "any stress in developing this patch and we were also quite lucky in hindsight that we had this patch ready already a",
    "start": "2648630",
    "end": "2655890"
  },
  {
    "start": "2651000",
    "end": "2651000"
  },
  {
    "text": "few months before we needed it so even major operating system vendors with really good programmers made some",
    "start": "2655890",
    "end": "2663569"
  },
  {
    "text": "mistakes in implementing this patch at first so in the Microsoft version it has a small mistake in there where they made",
    "start": "2663569",
    "end": "2670559"
  },
  {
    "text": "the page table entries user space accessible so from side channel attack",
    "start": "2670559",
    "end": "2676440"
  },
  {
    "text": "or not a side genetic butters using a side channel to leak values from the coddle they generated a real exploitable",
    "start": "2676440",
    "end": "2683699"
  },
  {
    "text": "Park where you can read and write values anywhere on the whole system so this was",
    "start": "2683699",
    "end": "2689039"
  },
  {
    "text": "the total meltdown back in the meltdown patch for Windows for example so what",
    "start": "2689039",
    "end": "2694769"
  },
  {
    "text": "now how can we go on from here we expect that there will be more attacks",
    "start": "2694769",
    "end": "2701059"
  },
  {
    "text": "exploiting performance optimizations we are already seeing new variants for instance of Spectre and meltdown popping",
    "start": "2701059",
    "end": "2707430"
  },
  {
    "text": "up frequently and I think that this will be even more frequently in the near future this gives us a unique chance now",
    "start": "2707430",
    "end": "2715109"
  },
  {
    "start": "2713000",
    "end": "2713000"
  },
  {
    "text": "to rethink our process of designs right now we're always optimized for",
    "start": "2715109",
    "end": "2720599"
  },
  {
    "text": "performance a lot of performance but maybe we have to also take into account the security and find trade-offs between",
    "start": "2720599",
    "end": "2727619"
  },
  {
    "text": "security and performance for new designs designs that are better in terms of",
    "start": "2727619",
    "end": "2732630"
  },
  {
    "text": "security and grow up like other fields did like it was the same in the car industry we didn't get fast and faster",
    "start": "2732630",
    "end": "2739650"
  },
  {
    "text": "cars all the time but at some point they also made the cars safer than before so",
    "start": "2739650",
    "end": "2746099"
  },
  {
    "text": "last but not least we published our proof of concept implementation of the Melton otech on github you can download",
    "start": "2746099",
    "end": "2752940"
  },
  {
    "text": "it there compile it and try it on your machine yourself hopefully your machine",
    "start": "2752940",
    "end": "2757979"
  },
  {
    "text": "is already best so you need to disable the mitigations to test it we will also add new code there that we just showed",
    "start": "2757979",
    "end": "2765269"
  },
  {
    "text": "here in the presentation so to conclude our talk in the end we underestimated my",
    "start": "2765269",
    "end": "2771479"
  },
  {
    "text": "craft today microarchitecture detects for a long long time and with Melton we",
    "start": "2771479",
    "end": "2777059"
  },
  {
    "text": "exploit performance optimizations that allow us to leak arbitrary memory which is a huge problem the countermeasures",
    "start": "2777059",
    "end": "2784049"
  },
  {
    "text": "that we've seen come with a huge performance impact so we need better solutions and therefore we need to find",
    "start": "2784049",
    "end": "2790410"
  },
  {
    "text": "the trade-off between security and performance because we cannot have both apparently at the same time thank you",
    "start": "2790410",
    "end": "2798180"
  },
  {
    "text": "for your attention if you have any questions feel free to ask or come to the Q&A afterwards thank you",
    "start": "2798180",
    "end": "2804400"
  },
  {
    "text": "[Applause]",
    "start": "2804400",
    "end": "2807529"
  }
]