[
  {
    "start": "0",
    "end": "132000"
  },
  {
    "text": "foreign",
    "start": "1979",
    "end": "4159"
  },
  {
    "text": "thank you for coming to this session in today's talk we are going to Deep",
    "start": "10280",
    "end": "15420"
  },
  {
    "text": "dive into a way to search for RPC functions to create authentication in Microsoft protocols",
    "start": "15420",
    "end": "22099"
  },
  {
    "text": "so my name is Remy gasku I'm also known as podarius in the information security scene and I'm a security researcher and",
    "start": "23699",
    "end": "30240"
  },
  {
    "text": "speaker in France where I do mostly pen tests and vulnerability research my",
    "start": "30240",
    "end": "35760"
  },
  {
    "text": "principal research subjects are a Windows X trajectory security and recently mainframes",
    "start": "35760",
    "end": "41640"
  },
  {
    "text": "in this 30 minute session we are going to go through a background on what is RPC and why we are going to need it what",
    "start": "41640",
    "end": "49260"
  },
  {
    "text": "are windows course authentications even though they are still not patched in all",
    "start": "49260",
    "end": "54780"
  },
  {
    "text": "the of the functions in Windows we are still needing them in offensive security",
    "start": "54780",
    "end": "60059"
  },
  {
    "text": "what is the state of research up to this point to uh course authentications that are using RPC functions and we'll see",
    "start": "60059",
    "end": "67439"
  },
  {
    "text": "how we can parse the Microsoft open specification documentation to extract and create new functions to parse the",
    "start": "67439",
    "end": "76080"
  },
  {
    "text": "IDL and auto generate proof of concept code that we'll use to find new course authentications",
    "start": "76080",
    "end": "82200"
  },
  {
    "text": "after that I'll present cursor which is an all-in-one tool to course authentications for your pen tests and",
    "start": "82200",
    "end": "87900"
  },
  {
    "text": "finally I'll leave you with defense techniques and free takeaways from this talk",
    "start": "87900",
    "end": "92960"
  },
  {
    "text": "so when we are inside an active directory domain we have many windows machines that communicate with each",
    "start": "93060",
    "end": "98520"
  },
  {
    "text": "other using various Network protocols one of them is called the remote procedure call or ensure RPC and",
    "start": "98520",
    "end": "105420"
  },
  {
    "text": "basically it allows to call a remote function on a remote machine for example we can from a user PC ask for something",
    "start": "105420",
    "end": "113280"
  },
  {
    "text": "under DC to work and it's called a remote procedure called a remote function on a remote machine of course",
    "start": "113280",
    "end": "120180"
  },
  {
    "text": "you can call this function with parameters and you will get a return value or a return structure in case of a",
    "start": "120180",
    "end": "126899"
  },
  {
    "text": "file descriptor for example you can have a print handle or a file descriptor in response",
    "start": "126899",
    "end": "133200"
  },
  {
    "start": "132000",
    "end": "132000"
  },
  {
    "text": "to call a remote procedure we need three things firstly we need to know in which RPC interface this function is defined",
    "start": "133200",
    "end": "139560"
  },
  {
    "text": "and everything interface is defined by a couple of universally unique identifier and a version",
    "start": "139560",
    "end": "146099"
  },
  {
    "text": "and we'll need to know what is the operation number of the function the operation number of the function uniquely defined this function inside",
    "start": "146099",
    "end": "153000"
  },
  {
    "text": "the interface because inside an interface you will have many functions and they are all listed inside kind of a",
    "start": "153000",
    "end": "159360"
  },
  {
    "text": "list and the operation number is auto incremented to Define each function",
    "start": "159360",
    "end": "164519"
  },
  {
    "text": "and finally we'll need the parameters just as any function in any programming language",
    "start": "164519",
    "end": "170700"
  },
  {
    "text": "so if we take an example of a simple RPC to understand what is a course authentication imagine earn a function",
    "start": "170700",
    "end": "177900"
  },
  {
    "start": "171000",
    "end": "171000"
  },
  {
    "text": "called rpcc by file that you can call remotely on a machine allowing to copy a file from a source to your destination",
    "start": "177900",
    "end": "183480"
  },
  {
    "text": "file you cannot call it anonymously because anonymous calls can be a vulnerability",
    "start": "183480",
    "end": "189200"
  },
  {
    "text": "Percy we will assume that you can just call it with a normal user in the domain",
    "start": "189200",
    "end": "195480"
  },
  {
    "text": "so when we are calling these functions it can be even pretty useful when you are doing administration of a remote",
    "start": "195480",
    "end": "201180"
  },
  {
    "text": "servers because you can copy backup files and you can do stuff like this but it can be leveraged by an attacker",
    "start": "201180",
    "end": "207360"
  },
  {
    "text": "because it manipulates file paths we'll see that this summer last call can",
    "start": "207360",
    "end": "212879"
  },
  {
    "text": "be used for example if we use it on the local file it's simple everybody here knows",
    "start": "212879",
    "end": "219420"
  },
  {
    "text": "what head what it will happen you call remote procedure the file is compiled and use your get rich and value in",
    "start": "219420",
    "end": "226260"
  },
  {
    "text": "return and you perform the local file copy but what if we changed inside the source",
    "start": "226260",
    "end": "232379"
  },
  {
    "text": "file the path to a local file by your UNC buff on Windows targeting a remote",
    "start": "232379",
    "end": "238260"
  },
  {
    "text": "server in this case srv1 to find a file that is hosted on the remote chair what",
    "start": "238260",
    "end": "244500"
  },
  {
    "text": "will happen then is that when we will call this remote procedure on dco1 dc1",
    "start": "244500",
    "end": "249599"
  },
  {
    "text": "will try to copy this file from the source file but this source file does not exist the source file is hosted on",
    "start": "249599",
    "end": "255060"
  },
  {
    "text": "another server so uh dc1 will try to access over SMB to srv01",
    "start": "255060",
    "end": "260340"
  },
  {
    "text": "serial one will return the file content and the file content will be stored on dco1 finally we'll have our return value",
    "start": "260340",
    "end": "267240"
  },
  {
    "text": "or our return structure in this case it's a legitimate example so it's not a problem as per C but we'll",
    "start": "267240",
    "end": "275160"
  },
  {
    "text": "see that as an attacker we can perform the same operation but ask dc1 to",
    "start": "275160",
    "end": "280560"
  },
  {
    "text": "retrieve a file that is hosted on one of our SMB servers it can be on the same machine or on another machine",
    "start": "280560",
    "end": "286620"
  },
  {
    "text": "in this case it's all on the same machine so we perform an RPC core to ask for dco1 to retrieve a file that is",
    "start": "286620",
    "end": "293520"
  },
  {
    "text": "hosted on our server what happens then is that in the Step 2 dco1 will try to",
    "start": "293520",
    "end": "300780"
  },
  {
    "text": "authenticate to our machine to access the SMB server firstly it will need to try to authenticate using the null",
    "start": "300780",
    "end": "307139"
  },
  {
    "text": "session to access it anonymously and if we respond by saying that you cannot",
    "start": "307139",
    "end": "312600"
  },
  {
    "text": "connect anonymously to this SMB server then it will try to authenticate using its current session",
    "start": "312600",
    "end": "318060"
  },
  {
    "text": "and in this case if the program running the RPC server runs as anti-authority",
    "start": "318060",
    "end": "323160"
  },
  {
    "text": "system you will be authenticated as dco1 dollar the machine account of the machine",
    "start": "323160",
    "end": "328919"
  },
  {
    "text": "and we can return whatever error code we want as access denied in very credentials or what you whatever things",
    "start": "328919",
    "end": "335340"
  },
  {
    "text": "you need because we do not need to actually give the file content to dc1 and finally we'll get a return value",
    "start": "335340",
    "end": "341940"
  },
  {
    "text": "but in the meantime we got the actual Ash of an authentication from dco1 and",
    "start": "341940",
    "end": "348419"
  },
  {
    "text": "depending on whether this ash is an ntlmv1 and tmv2 Weaver without SSP you",
    "start": "348419",
    "end": "353580"
  },
  {
    "text": "can do lots of things with it it's not an attack per C at this moment but with",
    "start": "353580",
    "end": "358979"
  },
  {
    "text": "this first step you can perform many attacks afterwards if it's ntmv1 and 10b2 with a revert SSP",
    "start": "358979",
    "end": "365759"
  },
  {
    "text": "you can either relay this ash to connect elsewhere or you can crack it locally to retrieve the md4 password the anti-ash",
    "start": "365759",
    "end": "373320"
  },
  {
    "text": "of the machine account or the account that authenticated this kind of attacks are not new in fact",
    "start": "373320",
    "end": "380340"
  },
  {
    "text": "the first one uh which was widely known at the time was the printerberg which",
    "start": "380340",
    "end": "385500"
  },
  {
    "text": "was found in 2017 and after that we've participatam in 2021 we saw around four",
    "start": "385500",
    "end": "391500"
  },
  {
    "text": "new attacks in four different protocols um in less than a year so we can only",
    "start": "391500",
    "end": "397680"
  },
  {
    "text": "wonder what what's next what will be the next score because if we can find four new ways to course authentication",
    "start": "397680",
    "end": "403740"
  },
  {
    "text": "through our PC in one year it surely means that there's many others and as",
    "start": "403740",
    "end": "408840"
  },
  {
    "text": "there are thousands of rpcs out there uh it's quite probable that we find new ways",
    "start": "408840",
    "end": "415319"
  },
  {
    "start": "414000",
    "end": "414000"
  },
  {
    "text": "so I was wondering what can we do to automate the search of RPC functions because up until this day when course",
    "start": "415319",
    "end": "422639"
  },
  {
    "text": "authentication through RPC was found it was found by reading semi-manually as the Microsoft open specification docs",
    "start": "422639",
    "end": "429060"
  },
  {
    "text": "with PDFs or online and try to understand how the rpcs works and what",
    "start": "429060",
    "end": "435180"
  },
  {
    "text": "function can be interesting to to course Authentication so there are two ways to course to to",
    "start": "435180",
    "end": "441720"
  },
  {
    "text": "find new vectors to question indications the first one is to reverse executables",
    "start": "441720",
    "end": "447479"
  },
  {
    "text": "and programs that are on the machine which have RPC servers in them but the main drawback of this uh of this",
    "start": "447479",
    "end": "454560"
  },
  {
    "text": "approach is that you have to have all the services installed on the machine and you cannot do that",
    "start": "454560",
    "end": "461120"
  },
  {
    "text": "automatically you cannot install all of the windows services on one machine because the machine will try will start",
    "start": "461120",
    "end": "467160"
  },
  {
    "text": "to bug if you actually install everything that you want on a DC and sometimes even if the service is",
    "start": "467160",
    "end": "473699"
  },
  {
    "text": "installed it does not mean that the remote version of this service is activated so sometimes the service is",
    "start": "473699",
    "end": "479280"
  },
  {
    "text": "working locally but you cannot call it uh from another machine so this way is really accurate but it's",
    "start": "479280",
    "end": "486780"
  },
  {
    "text": "very complicated to do and the other way is way more as a wide attack surface",
    "start": "486780",
    "end": "492720"
  },
  {
    "text": "because we can see every function of every protocol by parsing the Microsoft open specification documentation",
    "start": "492720",
    "end": "499680"
  },
  {
    "text": "but we cannot test it because we will need also to have the sources installed",
    "start": "499680",
    "end": "504720"
  },
  {
    "text": "on the machine so we'll have to by hand install the services but we will find way more functions by",
    "start": "504720",
    "end": "511080"
  },
  {
    "text": "parsing the docs so when I chose to parse the Microsoft open specification docs I I had three",
    "start": "511080",
    "end": "518039"
  },
  {
    "start": "512000",
    "end": "512000"
  },
  {
    "text": "main objectives in mind the first one is to find all crpc protocols with their ideal files if present ideal stands for",
    "start": "518039",
    "end": "525720"
  },
  {
    "text": "interface definition language I wanted to find all the interfaces interfaces which all the functions that",
    "start": "525720",
    "end": "533040"
  },
  {
    "text": "we'll need to use and how to access them and list all the arguments of all the functions so we can see uh what they are",
    "start": "533040",
    "end": "540060"
  },
  {
    "text": "if they are interesting and their operation number Microsoft's open specification docs",
    "start": "540060",
    "end": "546000"
  },
  {
    "start": "543000",
    "end": "543000"
  },
  {
    "text": "looks like this you have a page inside Ms docs where you have every RPC",
    "start": "546000",
    "end": "551519"
  },
  {
    "text": "protocol described a protocol by protocol and when you",
    "start": "551519",
    "end": "557160"
  },
  {
    "text": "click on this protocol you will have all the documentation that you find in the PDF in online version",
    "start": "557160",
    "end": "562920"
  },
  {
    "text": "and on the left you see multiple sections these big sections are introduction messages",
    "start": "562920",
    "end": "570120"
  },
  {
    "text": "um security security examples protocol examples you will have a lot of things",
    "start": "570120",
    "end": "575279"
  },
  {
    "text": "and inside it you have various sections that can be very useful to to find",
    "start": "575279",
    "end": "581640"
  },
  {
    "text": "information for for This research so first one is the section 2.1 transport",
    "start": "581640",
    "end": "587339"
  },
  {
    "text": "which in most of the ways most of the case sorry uh will hold all the information we need to connect to the",
    "start": "587339",
    "end": "593880"
  },
  {
    "text": "service that runs these rpcs sometimes it's not complete because",
    "start": "593880",
    "end": "600080"
  },
  {
    "text": "all the pages of Microsoft docs are not equal and sometimes you won't have the",
    "start": "600080",
    "end": "605760"
  },
  {
    "text": "uid and the version of the RPC interface so if the information is here it will be",
    "start": "605760",
    "end": "611399"
  },
  {
    "text": "in this page but sometimes it's not it's a major problem with this page is that it's written in natural language so",
    "start": "611399",
    "end": "617940"
  },
  {
    "text": "it's quite complicated to parse even though we can use regular expression to extract the uid of the RPC interface to",
    "start": "617940",
    "end": "624959"
  },
  {
    "text": "find the versions it's quite complicated and sometimes they are not inside these pages",
    "start": "624959",
    "end": "631220"
  },
  {
    "start": "630000",
    "end": "630000"
  },
  {
    "text": "so one of the ways to to to find all this information is to parse the section",
    "start": "631320",
    "end": "636720"
  },
  {
    "text": "6 of the documentation which contains a full IDL it does not always contain the",
    "start": "636720",
    "end": "642060"
  },
  {
    "text": "interface definition language because sometimes the ideal is not public but when it is public we have a file",
    "start": "642060",
    "end": "649560"
  },
  {
    "text": "containing all the interface definition language which defines the interface the functions that are in it and a lot of",
    "start": "649560",
    "end": "656820"
  },
  {
    "text": "arguments and type structure structures and types that are used in it and as you can see here on the top of",
    "start": "656820",
    "end": "664260"
  },
  {
    "text": "the file you have the uidn version of the RPC interface that is listening",
    "start": "664260",
    "end": "670200"
  },
  {
    "text": "and they are always here because it's the interface definition language that is used by developers to develop the",
    "start": "670200",
    "end": "676380"
  },
  {
    "text": "interfaces so if we have this file we also have the uid under version",
    "start": "676380",
    "end": "681480"
  },
  {
    "text": "if we scroll down a little bit we also have all the prototypes of all the functions that is used in this interface",
    "start": "681480",
    "end": "687480"
  },
  {
    "text": "uh also we do not have the source code we have the prototypes but we only need it to to know how it works and if if it",
    "start": "687480",
    "end": "695100"
  },
  {
    "text": "manipulates file paths so as you can see we have functions we have uh the types",
    "start": "695100",
    "end": "701640"
  },
  {
    "text": "the return types we have properties of the of of each arguments and we have",
    "start": "701640",
    "end": "706680"
  },
  {
    "text": "argument names but we do not have the operation number simple the operation number is basically Auto incremented in",
    "start": "706680",
    "end": "713220"
  },
  {
    "text": "this file so we just have to parse this file and we'll need a we'll know everything we need to connect to these",
    "start": "713220",
    "end": "719459"
  },
  {
    "text": "remote functions if we look more closely at what a function looks like we have a return",
    "start": "719459",
    "end": "726600"
  },
  {
    "text": "type a name properties a type name for each argument and argument names",
    "start": "726600",
    "end": "733740"
  },
  {
    "text": "argument names are really useful in rpcs because they are almost never obfuscated",
    "start": "733740",
    "end": "738839"
  },
  {
    "text": "which means they typically describe what they are doing so server name is",
    "start": "738839",
    "end": "743880"
  },
  {
    "text": "basically a server or an IP address root share is SMB share comment it can be a comment uh of a new share that you will",
    "start": "743880",
    "end": "751019"
  },
  {
    "text": "create or the new DFS namespace and through these arguments we can",
    "start": "751019",
    "end": "756420"
  },
  {
    "text": "actually know uh into um we can know if they are going to",
    "start": "756420",
    "end": "762120"
  },
  {
    "text": "manipulate file paths and therefore if they are going to accept UNC paths to force the machine to authenticate on a",
    "start": "762120",
    "end": "768540"
  },
  {
    "text": "SMB server what we can do is we can analyze all the",
    "start": "768540",
    "end": "773940"
  },
  {
    "start": "770000",
    "end": "770000"
  },
  {
    "text": "RPC functions known to course authentications up to this day and we see that every function known up to this",
    "start": "773940",
    "end": "780120"
  },
  {
    "text": "day to course notifications is using either path share file name printer name server name inside one of these",
    "start": "780120",
    "end": "786839"
  },
  {
    "text": "arguments as the attack vector and the UNC path is always injected in one of",
    "start": "786839",
    "end": "792120"
  },
  {
    "text": "these arguments so if we try to create a model uh to to look for all of the",
    "start": "792120",
    "end": "798920"
  },
  {
    "text": "functions that use these arguments to correspondications we can start from",
    "start": "798920",
    "end": "805560"
  },
  {
    "text": "this and you just pass everything in the documentation and list every function",
    "start": "805560",
    "end": "810839"
  },
  {
    "text": "that does these names inside its arguments",
    "start": "810839",
    "end": "815899"
  },
  {
    "text": "so what we are going to do is what we are going to parse the Microsoft open",
    "start": "816000",
    "end": "821220"
  },
  {
    "text": "specification documentation page where every RPC protocol is listed for each",
    "start": "821220",
    "end": "826320"
  },
  {
    "text": "RPC protocol we are going to list every section and see if section 6 is existing if section 6 is existing we are going to",
    "start": "826320",
    "end": "834899"
  },
  {
    "text": "extract and parse the interface definition language of this function and of this interface and its functions and",
    "start": "834899",
    "end": "841860"
  },
  {
    "text": "for each function we are going to extract all the functions with their parameters and get the RPC interface uid",
    "start": "841860",
    "end": "850380"
  },
  {
    "text": "and version that will be defined inside the ideal file",
    "start": "850380",
    "end": "855440"
  },
  {
    "text": "now that we're here if we Implement a model using the name that we saw just",
    "start": "855440",
    "end": "862139"
  },
  {
    "text": "before we can extract all the functions that have names that are look alike with",
    "start": "862139",
    "end": "867240"
  },
  {
    "text": "file name server name printer name share uh you or sometimes uncpath some some of the functions have UNC buff in their",
    "start": "867240",
    "end": "873839"
  },
  {
    "text": "names and we can extract almost 230 350 cores",
    "start": "873839",
    "end": "879660"
  },
  {
    "text": "and inside them we can easily find back known calls with participatam in the",
    "start": "879660",
    "end": "887279"
  },
  {
    "text": "encrypting file system protocol an EFS we find back tree sounds on event",
    "start": "887279",
    "end": "893100"
  },
  {
    "text": "log we find DFS scores on Dynamic distributed file system namespace",
    "start": "893100",
    "end": "898920"
  },
  {
    "text": "protocol we find a printerback and we find every existing course authentication through",
    "start": "898920",
    "end": "904680"
  },
  {
    "text": "this but now that we have a list of functions",
    "start": "904680",
    "end": "910139"
  },
  {
    "start": "907000",
    "end": "907000"
  },
  {
    "text": "that are promising what we want is to automate most of the work to create proof of concept because it's one of one",
    "start": "910139",
    "end": "917880"
  },
  {
    "text": "of the bargains of This research was to find the actual functions that we are going to use but the other part is to",
    "start": "917880",
    "end": "924000"
  },
  {
    "text": "automatically generate proof of concept because we are not going to write a 200 profit concept by hand",
    "start": "924000",
    "end": "930480"
  },
  {
    "text": "um firstly what we need to do is to write a program in Python using impact",
    "start": "930480",
    "end": "935820"
  },
  {
    "text": "it's a labor Library used to connect to Windows machines for offensive attacks",
    "start": "935820",
    "end": "941699"
  },
  {
    "text": "in Python and we are going to write a simple file in Python to correct an",
    "start": "941699",
    "end": "947699"
  },
  {
    "text": "authentication using one of the actually known Quest methods we can use patipatam or whatever color",
    "start": "947699",
    "end": "954120"
  },
  {
    "text": "you want we write a python code and then we are going to try to automate it to",
    "start": "954120",
    "end": "959519"
  },
  {
    "text": "change everything that is specific to the call that we use such as the RPC interface the name of the call the",
    "start": "959519",
    "end": "966120"
  },
  {
    "text": "arguments of the functions to create a python template using gene J2 and it",
    "start": "966120",
    "end": "971399"
  },
  {
    "text": "will look kind of like this so it's really not python anymore and it's absolutely ugly but it will allow us to",
    "start": "971399",
    "end": "979620"
  },
  {
    "text": "generate proof of concept code for each of the score what you see here is when you are going",
    "start": "979620",
    "end": "986040"
  },
  {
    "text": "to connect to an airpc server using in packets you need to use two structures",
    "start": "986040",
    "end": "991800"
  },
  {
    "text": "one for the RPC call and one for the SPCA response two bars and to create structures and this template allows to",
    "start": "991800",
    "end": "1000139"
  },
  {
    "text": "create the structures so that we can perform their physical and parse the response",
    "start": "1000139",
    "end": "1005480"
  },
  {
    "text": "what it looks like since once it's generated it's way beautiful and as you can see",
    "start": "1005480",
    "end": "1011899"
  },
  {
    "text": "there is the operation number that we saw in the last slide and the structure which contains all of the names of the",
    "start": "1011899",
    "end": "1018860"
  },
  {
    "text": "arguments as well as the impact types that you see inside the brackets and afterwards in",
    "start": "1018860",
    "end": "1025699"
  },
  {
    "text": "the comments you see what what was the type that was actually written inside the ideal files",
    "start": "1025699",
    "end": "1031480"
  },
  {
    "text": "because the impact type and the ideal type are not the same so I I kept uh",
    "start": "1031480",
    "end": "1038298"
  },
  {
    "text": "these these types in comments because if we need to debug at least we have it",
    "start": "1038299",
    "end": "1044000"
  },
  {
    "text": "and as you can see in the response I left an empty structure because we actually don't need to pass the response",
    "start": "1044000",
    "end": "1050540"
  },
  {
    "text": "so I decided to just create a numpty structure which in packets will try to",
    "start": "1050540",
    "end": "1056840"
  },
  {
    "text": "burst but as it's an empty structure it will not parse the actual response from the Sab server we can parse it if",
    "start": "1056840",
    "end": "1064039"
  },
  {
    "text": "we want we can implement it to have the actual response that what that was returned by this score but most of the",
    "start": "1064039",
    "end": "1070520"
  },
  {
    "text": "time we don't need it so we want uh we want to bother doing it",
    "start": "1070520",
    "end": "1076640"
  },
  {
    "text": "this is the next part of the genji2 template which is even uglier because",
    "start": "1076640",
    "end": "1081860"
  },
  {
    "text": "gin J2 mixed with python is a is not pretty honestly but we are going",
    "start": "1081860",
    "end": "1088580"
  },
  {
    "text": "to create a class which basically does everything that we need we are going to create a class that takes the uid the",
    "start": "1088580",
    "end": "1095900"
  },
  {
    "text": "version the RPC function name and its arguments and this class is going to",
    "start": "1095900",
    "end": "1101660"
  },
  {
    "text": "trigger this core and uh just trigger it we won't parse the response we will have",
    "start": "1101660",
    "end": "1107720"
  },
  {
    "text": "a response but impact will pass nothing because we have an empty structure so this is a Jin J2 template for you can",
    "start": "1107720",
    "end": "1114980"
  },
  {
    "text": "watch it more carefully in the slides afterwards because it's not really pretty to project and uh what once it's",
    "start": "1114980",
    "end": "1121880"
  },
  {
    "text": "generated it's a beautiful python code and you have a class with the name of the protocol uh it's this one is DFS",
    "start": "1121880",
    "end": "1129380"
  },
  {
    "text": "course it was found in June I think and you have the uid version SMB pipe to",
    "start": "1129380",
    "end": "1136760"
  },
  {
    "text": "connect to and then you have a function which is called the same as the RPC functions",
    "start": "1136760",
    "end": "1142280"
  },
  {
    "text": "that we are going to call to correct the authentication through the server name",
    "start": "1142280",
    "end": "1147980"
  },
  {
    "text": "variable as you can see server name variable actually takes an IP an obvious",
    "start": "1147980",
    "end": "1153080"
  },
  {
    "text": "name or a domain name followed by a null byte and we have root chair comment and",
    "start": "1153080",
    "end": "1160220"
  },
  {
    "text": "whatever thing you want and um we just put random data random names random ASCII strings to populate them",
    "start": "1160220",
    "end": "1169039"
  },
  {
    "text": "and as you can see um in the in the last lines of the codes",
    "start": "1169039",
    "end": "1174080"
  },
  {
    "text": "we see cell dcu.request it's the actual line that tells in bucket to perform the",
    "start": "1174080",
    "end": "1179660"
  },
  {
    "text": "the serial PC request to the remote machine",
    "start": "1179660",
    "end": "1184659"
  },
  {
    "start": "1184000",
    "end": "1184000"
  },
  {
    "text": "as I said before we have a problem with ideal types and in packet types because they are not consistent and impact uses",
    "start": "1184760",
    "end": "1192880"
  },
  {
    "text": "python structures to create these types because they are not really existing in",
    "start": "1192880",
    "end": "1197960"
  },
  {
    "text": "Python so we need to keep in mind that we are we are going to need to create a",
    "start": "1197960",
    "end": "1203840"
  },
  {
    "text": "translation table between the two because IDL and impact types are not the same and sometimes uh free impact free",
    "start": "1203840",
    "end": "1210740"
  },
  {
    "text": "ideal types will be translated to the same impacted type as we can see here",
    "start": "1210740",
    "end": "1215780"
  },
  {
    "text": "the wide chart t y Char and white shy pointers are always translated into a",
    "start": "1215780",
    "end": "1221360"
  },
  {
    "text": "white string in packets the main limit of this method is that as",
    "start": "1221360",
    "end": "1228919"
  },
  {
    "text": "I said before we don't necessarily know how to enable the services because this",
    "start": "1228919",
    "end": "1234080"
  },
  {
    "text": "part of the Microsoft documentation only focus on the developer side of this of these rpcs therefore we need to uh know",
    "start": "1234080",
    "end": "1242120"
  },
  {
    "text": "how to enable the services and sometimes it's not written inside the docs and also some protocols do not have their",
    "start": "1242120",
    "end": "1249200"
  },
  {
    "text": "public IDL code as they do not have their public their ideal code there is something we can do",
    "start": "1249200",
    "end": "1255679"
  },
  {
    "text": "which allows us to steal parse a bit of these functions is in the section headers of the documentation you have",
    "start": "1255679",
    "end": "1262580"
  },
  {
    "text": "the name of the functions followed by parenthesis open them and the operation number so therefore if we do not have",
    "start": "1262580",
    "end": "1269600"
  },
  {
    "text": "the ideal code we could parse section by section for all the functions of the protocols and extract the HTML of the",
    "start": "1269600",
    "end": "1277220"
  },
  {
    "text": "markdown source of the of the documentation to understand what is the",
    "start": "1277220",
    "end": "1282919"
  },
  {
    "text": "the parameters of the function so following This research I published",
    "start": "1282919",
    "end": "1289580"
  },
  {
    "start": "1286000",
    "end": "1286000"
  },
  {
    "text": "every proof of concept with their readme files and everything of This research in",
    "start": "1289580",
    "end": "1295460"
  },
  {
    "text": "open source so if you want to check it it's on GitHub and it's still being 3-h because uh as I said before we have to",
    "start": "1295460",
    "end": "1303140"
  },
  {
    "text": "activate each of each of those services and sometimes it's not really clear or we cannot activate them anymore it's",
    "start": "1303140",
    "end": "1309559"
  },
  {
    "text": "only on Windows Server 2008 for example so it's quite complicated to create by",
    "start": "1309559",
    "end": "1315320"
  },
  {
    "text": "hand but at least we have all the read means with all the information uh RPC",
    "start": "1315320",
    "end": "1320419"
  },
  {
    "text": "interfaces uids and a python proof of concept code using impact that is inside this Repository",
    "start": "1320419",
    "end": "1328520"
  },
  {
    "text": "there is one folder pair protocol and each in each in each of these folders",
    "start": "1328520",
    "end": "1334580"
  },
  {
    "text": "you have one folder per function containing the the proof of concept code",
    "start": "1334580",
    "end": "1340460"
  },
  {
    "text": "and the readme file the redmi files contains all of the documentation all of",
    "start": "1340460",
    "end": "1345860"
  },
  {
    "text": "the links to the actual documentation so you can find where the information come from and you will have the operation",
    "start": "1345860",
    "end": "1352220"
  },
  {
    "text": "number the RPC interface with how you can access them for example the list of SMB pipes that",
    "start": "1352220",
    "end": "1358760"
  },
  {
    "text": "that is used to access them and if you want to access and access it on GitHub",
    "start": "1358760",
    "end": "1364820"
  },
  {
    "text": "there is QR code here so feel free to scan it",
    "start": "1364820",
    "end": "1369940"
  },
  {
    "text": "foreign and finally inside the this repository you also have a readme file for each of",
    "start": "1372320",
    "end": "1378380"
  },
  {
    "text": "this call with a short description of basically what is the course to authentication but specify for this call",
    "start": "1378380",
    "end": "1386020"
  },
  {
    "text": "meaning if we are using the encrypting file system it's really easy because we",
    "start": "1386020",
    "end": "1391100"
  },
  {
    "text": "perform one call using file name and a UNC path and we have already a question",
    "start": "1391100",
    "end": "1396140"
  },
  {
    "text": "Authentication but in the case of a printerberg for example printerberg uses a printer",
    "start": "1396140",
    "end": "1403820"
  },
  {
    "text": "handles so you need to open a printer retrieve the handle so parse is the actual RPC response and then use this",
    "start": "1403820",
    "end": "1409820"
  },
  {
    "text": "under to curse an authentication so in this case it's really useful to have a",
    "start": "1409820",
    "end": "1414919"
  },
  {
    "text": "description piece by piece of what is happening to course Authentication",
    "start": "1414919",
    "end": "1420400"
  },
  {
    "text": "for the print testers and researchers that are doing course authentications inside The Apprentice I wrote something",
    "start": "1420820",
    "end": "1427520"
  },
  {
    "text": "called coercer which takes all this research and applies it to pen tests really easily basically I use everything",
    "start": "1427520",
    "end": "1434720"
  },
  {
    "text": "that is actually known as RPC calls and next RPC calls will be added once we",
    "start": "1434720",
    "end": "1440720"
  },
  {
    "text": "find some in the in this slide and there is three modes the first one",
    "start": "1440720",
    "end": "1446240"
  },
  {
    "start": "1444000",
    "end": "1444000"
  },
  {
    "text": "is the scan mode that is intended for defense purposes uh in scan mode you",
    "start": "1446240",
    "end": "1451820"
  },
  {
    "text": "just have to give a user of the domain and which it will try to authenticate to",
    "start": "1451820",
    "end": "1457340"
  },
  {
    "text": "every RPC function through every interface and through every SMB pipe on the remote",
    "start": "1457340",
    "end": "1463159"
  },
  {
    "text": "machine and as you can see we already know inside this tool if we got an SMB",
    "start": "1463159",
    "end": "1468380"
  },
  {
    "text": "authentication directly inside the tool we do not need to have other tools such as ntlm relay or responder",
    "start": "1468380",
    "end": "1475120"
  },
  {
    "text": "to use it and this one is more intended to scan for a remote machine for example",
    "start": "1475120",
    "end": "1481760"
  },
  {
    "text": "to see if your net filter rules to prevent RPC calls from another machine that worked",
    "start": "1481760",
    "end": "1489140"
  },
  {
    "text": "the second mode is the chorus mode which is widely used in pen test when you are doing a course authentication you can",
    "start": "1489140",
    "end": "1495500"
  },
  {
    "text": "curse through every possible core through this mode you can either use it",
    "start": "1495500",
    "end": "1501340"
  },
  {
    "text": "with authentication with a user authentication or without authentication",
    "start": "1501340",
    "end": "1506480"
  },
  {
    "text": "in case you use a an authentication it will try to authenticate for every SMB",
    "start": "1506480",
    "end": "1511820"
  },
  {
    "text": "pipe in which this call is known to work and you will have uh the SMB",
    "start": "1511820",
    "end": "1517940"
  },
  {
    "text": "authentication that will go to another server there is no SMB server um in the course",
    "start": "1517940",
    "end": "1523460"
  },
  {
    "text": "mode of cursor so you can use a responder or NTM relay to actually perform the attacks",
    "start": "1523460",
    "end": "1531520"
  },
  {
    "text": "and finally there is the first mode for the research Forks if you want to First every every call every payload through",
    "start": "1532279",
    "end": "1539659"
  },
  {
    "text": "every SMB pipe on a lot of machine you can prefer you can perform it on many machines it's basically like verb",
    "start": "1539659",
    "end": "1546799"
  },
  {
    "text": "Intruder but for RPC calls using various payloads on air PC calls yeah and you",
    "start": "1546799",
    "end": "1552620"
  },
  {
    "text": "will have um as you see the error codes and the SMB authentications is actually what we",
    "start": "1552620",
    "end": "1558799"
  },
  {
    "text": "receive from the RPC response so if you see an error code it's the error code",
    "start": "1558799",
    "end": "1563900"
  },
  {
    "text": "that we received from the authentication and the SMB authentication is that we actually received an SMB request from",
    "start": "1563900",
    "end": "1570440"
  },
  {
    "text": "the remote machine so to wrap up this talk I want to remind a",
    "start": "1570440",
    "end": "1578059"
  },
  {
    "start": "1573000",
    "end": "1573000"
  },
  {
    "text": "few defense techniques because course authentications are not a vulnerability per se they are they are just a way of",
    "start": "1578059",
    "end": "1585620"
  },
  {
    "text": "all windows works and they will not be patched so we're not we we need to",
    "start": "1585620",
    "end": "1591400"
  },
  {
    "text": "prevent them from happening by adding external security to this so when",
    "start": "1591400",
    "end": "1598580"
  },
  {
    "text": "we have a course authentication basically the machine that is attacked will connect back to the attacker using",
    "start": "1598580",
    "end": "1604580"
  },
  {
    "text": "outbound SMB and or TCP or whatever connection you want",
    "start": "1604580",
    "end": "1610580"
  },
  {
    "text": "and when we have this kind of connections we can prevent them through",
    "start": "1610580",
    "end": "1615740"
  },
  {
    "text": "three vectors the first one is to disable all the unused Services uh it",
    "start": "1615740",
    "end": "1620960"
  },
  {
    "text": "seems rather logical but should be surprised on how many domain controllers you see out there with the principle are",
    "start": "1620960",
    "end": "1626419"
  },
  {
    "text": "still activated up to this day in 2022 but we need to disable all the new",
    "start": "1626419",
    "end": "1633440"
  },
  {
    "text": "services and more importantly to why to to disable all the services and enable only the ones that we need",
    "start": "1633440",
    "end": "1640640"
  },
  {
    "text": "secondly we need to enable the extended protection for authentication this one",
    "start": "1640640",
    "end": "1646460"
  },
  {
    "text": "is really important but it will not prevent the course authentication it will only prevent the relay of",
    "start": "1646460",
    "end": "1652340"
  },
  {
    "text": "credentials once the question the course authentication has taken place so an",
    "start": "1652340",
    "end": "1658159"
  },
  {
    "text": "attacker will still be able to receive the authentication but it will only be able to crack it locally it will not be",
    "start": "1658159",
    "end": "1664340"
  },
  {
    "text": "able to relay it on the network to authenticate elsewhere and finally if you can put on put on",
    "start": "1664340",
    "end": "1672320"
  },
  {
    "text": "network sharing on your net on your network infrastructure and rules to prevent uh unauthenticated SMB to to",
    "start": "1672320",
    "end": "1679100"
  },
  {
    "text": "happen for example it's not normal if the domain controller connects back through a free tiering Securities to a",
    "start": "1679100",
    "end": "1685100"
  },
  {
    "text": "machine in the DMZ in the DMZ on SMB it seems weird it should not happen that",
    "start": "1685100",
    "end": "1691520"
  },
  {
    "text": "cr0 connects back to tier 3 with SMB or directly on the internet it happens as",
    "start": "1691520",
    "end": "1696980"
  },
  {
    "text": "well I've left here a few links if you want to access it inside the slides the",
    "start": "1696980",
    "end": "1703039"
  },
  {
    "text": "slides will be up on the blackout website later today and uh the all describe all all the APA works the",
    "start": "1703039",
    "end": "1710299"
  },
  {
    "text": "extended prediction for authentication and they are really interesting if you want to check out",
    "start": "1710299",
    "end": "1716260"
  },
  {
    "text": "finally to conclude this talk I want to remind you of three things on offensive defensive and research perspectives",
    "start": "1716960",
    "end": "1723820"
  },
  {
    "text": "from the offensive side Microcenter PCS are a really wide attack surface which",
    "start": "1723820",
    "end": "1728960"
  },
  {
    "text": "is a mostly overlooked and we should not over trust it and that's why we need to",
    "start": "1728960",
    "end": "1735799"
  },
  {
    "text": "disable all the services that we don't use um weekend course authentications from a",
    "start": "1735799",
    "end": "1741380"
  },
  {
    "text": "research perspective we can find uh RPC calls to automatically",
    "start": "1741380",
    "end": "1747460"
  },
  {
    "text": "we can automatically find uh RPS equals to Quest authentications but it's it's",
    "start": "1747460",
    "end": "1753080"
  },
  {
    "text": "only a matter of time until a new call is found because we still have to try",
    "start": "1753080",
    "end": "1758240"
  },
  {
    "text": "them by hand to trigger actually the authentication with a proof of concept because we need to activate the services",
    "start": "1758240",
    "end": "1763899"
  },
  {
    "text": "and finally from a defense perspective we need to disable all the services uh",
    "start": "1763899",
    "end": "1769340"
  },
  {
    "text": "or the new services on Windows machines activate APA and put on network rules",
    "start": "1769340",
    "end": "1775159"
  },
  {
    "text": "and filters to prevent course authentications thank you for your attention I hope you",
    "start": "1775159",
    "end": "1781700"
  },
  {
    "text": "enjoyed this talk and if you have any questions I think we are running short on time so we you can DM me on Twitter",
    "start": "1781700",
    "end": "1787580"
  },
  {
    "text": "on Barcelona thank you [Applause]",
    "start": "1787580",
    "end": "1793820"
  },
  {
    "text": "[Music]",
    "start": "1793820",
    "end": "1796929"
  },
  {
    "text": "[Music]",
    "start": "1800770",
    "end": "1803859"
  }
]