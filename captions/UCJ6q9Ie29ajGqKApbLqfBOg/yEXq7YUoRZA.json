[
  {
    "start": "0",
    "end": "80000"
  },
  {
    "text": "check check all right what's up it's probably h no real surprise that my slides didn't make the Blackout book",
    "start": "27920",
    "end": "34520"
  },
  {
    "text": "this year I was figuring that would have made a good cold but no matter um well that was actually my",
    "start": "34520",
    "end": "41760"
  },
  {
    "text": "first thing that came to mind when I thought about Kel exploits in assemble language was a half naked G with an nii",
    "start": "41760",
    "end": "47120"
  },
  {
    "text": "logo tattooed on her bum but it's my warped head so whatever",
    "start": "47120",
    "end": "53680"
  },
  {
    "text": "um I've got to go through like 75 minutes so I'm not quite sure if I going to get all that done but Mark mayre has",
    "start": "53680",
    "end": "59039"
  },
  {
    "text": "kindly offered come up and do the robot dance while I beat box if I don't make get get the time in anyway my name is",
    "start": "59039",
    "end": "65840"
  },
  {
    "text": "barab Jack I'm a senior research engineer of VI digital security I'll be speaking about remotely exploiting",
    "start": "65840",
    "end": "71720"
  },
  {
    "text": "Windows kernel based vulnerabilities anyway it's enough IE candy for",
    "start": "71720",
    "end": "79200"
  },
  {
    "text": "now did I hear an O it's all right there'll be more later don't worry all",
    "start": "79439",
    "end": "84520"
  },
  {
    "start": "80000",
    "end": "212000"
  },
  {
    "text": "right here's a quick overview I'll be talking about um going to me briefly mention the differences between ring three and ring Z like us your in kernel",
    "start": "84520",
    "end": "91000"
  },
  {
    "text": "mode um I'll go over what's possible to do in the kernel as far as what's possible and actually like reasonable",
    "start": "91000",
    "end": "96600"
  },
  {
    "text": "for Network Shell Code um I'm going to look at a few uh published Kel vulnerabilities there's been a couple",
    "start": "96600",
    "end": "102240"
  },
  {
    "text": "coming out lately like some serious ones so um let's see I'll talk about a few",
    "start": "102240",
    "end": "109119"
  },
  {
    "text": "things that have to be taken into consideration when you're actually exploiting firew drivers and I'll talk about how to overcome those",
    "start": "109119",
    "end": "115399"
  },
  {
    "text": "obstacles um take a look behind the blue screen of Def everyone's seen that I'm I'm sure so we'll um basically talk",
    "start": "115399",
    "end": "121680"
  },
  {
    "text": "about how we can turn that nuisance into something useful I'm going to talk about a technique that I've dubbed the clean",
    "start": "121680",
    "end": "127600"
  },
  {
    "text": "return and this is basically a way to return from any process or threads and have everything running as normal this",
    "start": "127600",
    "end": "133959"
  },
  {
    "text": "is after exploiting it and this is obviously important when you're exploiting kernal vulnerabilities because um you don't want to be there",
    "start": "133959",
    "end": "140640"
  },
  {
    "text": "with a blue screen there um I'm going to very briefly talk about kernal Heap overflows and like the",
    "start": "140640",
    "end": "147720"
  },
  {
    "text": "only reason I'm doing this is cuz I saw this cat was talking about it in um China and so I thought I better throw",
    "start": "147720",
    "end": "154720"
  },
  {
    "text": "something in and to tell you the honest truth I looked at this about 3 days ago and so this is don't be any rocket",
    "start": "154720",
    "end": "160959"
  },
  {
    "text": "science but I'll briefly talk about pull overflows and then I'll talk about my",
    "start": "160959",
    "end": "167599"
  },
  {
    "text": "kernel payloads now first one is um a kernel loader and what this allows you to do is use any userland Shell Code and",
    "start": "167599",
    "end": "175360"
  },
  {
    "text": "have it execute from the kernel and um the funny thing is you have like ultimate power in the kernel yet one of",
    "start": "175360",
    "end": "182239"
  },
  {
    "text": "the handiest things is to drop back to user mode so go figure next one will be um interrupt hooking key logger and this",
    "start": "182239",
    "end": "188519"
  },
  {
    "text": "is basically a kernel mode key logger which you can retrieve the capture keystrokes in real time from a remote",
    "start": "188519",
    "end": "193599"
  },
  {
    "text": "system and finally my favorite demo we're going to just completely kill the windows OS entirely and um I'll explain",
    "start": "193599",
    "end": "200680"
  },
  {
    "text": "more on that one a bit later but if you fall asleep for your most of it I'd wake up for that",
    "start": "200680",
    "end": "206879"
  },
  {
    "text": "one all right kernel in newand now the Intel",
    "start": "208680",
    "end": "214680"
  },
  {
    "text": "processor actually supports four rings but um oh so yeah Intel proc but NT",
    "start": "214680",
    "end": "221360"
  },
  {
    "text": "decid to only use two of them basically so they could um maybe be run on architectures that don't have support",
    "start": "221360",
    "end": "226799"
  },
  {
    "text": "all privilege levels uh user mode ring three that's where all your user programs and system subsystems run and",
    "start": "226799",
    "end": "234120"
  },
  {
    "text": "user codes pageable can be context switched um by design a user mode process cannot actually switch privilege",
    "start": "234120",
    "end": "240840"
  },
  {
    "text": "levels arbitrarily this is where like uh the native API comes in I'll talk about that a little bit later and obviously",
    "start": "240840",
    "end": "248280"
  },
  {
    "text": "this has been circumvented many times and if you want proof of that I'll check out some of Derek soda's advisories on",
    "start": "248280",
    "end": "253439"
  },
  {
    "text": "the EI page they're completely sick um kernel mode ring zero You full system",
    "start": "253439",
    "end": "259040"
  },
  {
    "text": "privileges uh can run anything you want um access the privileg instructions and",
    "start": "259040",
    "end": "264800"
  },
  {
    "text": "examples of what run there is like you how the vice drivers iio memory management all runs and ring",
    "start": "264800",
    "end": "271720"
  },
  {
    "text": "zero what can we do in the kernel pretty much anything you please you know um you got absolute power you're Limitless to",
    "start": "271720",
    "end": "278919"
  },
  {
    "start": "274000",
    "end": "339000"
  },
  {
    "text": "what you can do uh root kits a big time these days so I mean you could install a root kit without ever touching the disc",
    "start": "278919",
    "end": "285600"
  },
  {
    "text": "let's see uh intrusion detection systems will uh set up kernel hooks these could",
    "start": "285600",
    "end": "290639"
  },
  {
    "text": "be subverted easily could access patch the memory of any process or module",
    "start": "290639",
    "end": "295800"
  },
  {
    "text": "whether that be kernel or use land and um I'll be making use of that when I talk about the uh kernel key logger",
    "start": "295800",
    "end": "302080"
  },
  {
    "text": "actually CU we're going to be patching some kernel code locations for that one um High processes",
    "start": "302080",
    "end": "309240"
  },
  {
    "text": "ports I mean that's going to make exploitation even harder to dedi I think Jamie's actually speaking about kernel",
    "start": "309240",
    "end": "314880"
  },
  {
    "text": "invisibility right now in fact so actually I appreciate you coming out here cuz he's probably doing a pretty decent talk um actually they're",
    "start": "314880",
    "end": "321800"
  },
  {
    "text": "releasing their book this year which I definitely recommend getting a hold of so it's pretty cool um execute code from the konel",
    "start": "321800",
    "end": "327840"
  },
  {
    "text": "loader and I'll talk about that one too these are just a few examples basically anything you can imagine is possible",
    "start": "327840",
    "end": "332880"
  },
  {
    "text": "because I mean you have absolutely no restrictions you're not constrained by the US land",
    "start": "332880",
    "end": "338360"
  },
  {
    "text": "so few published vulnerabilities um we released a bunch in semantics firewall and so we went on",
    "start": "338360",
    "end": "345759"
  },
  {
    "text": "their Christmas card list that year I tell you what else there was the uh",
    "start": "345759",
    "end": "351240"
  },
  {
    "text": "another black iist one a lot of firew ones there was theb client transaction that was jeally found by Dave Vel and um",
    "start": "351240",
    "end": "358600"
  },
  {
    "text": "EI let's see the floor and tcpi P stack",
    "start": "358600",
    "end": "363680"
  },
  {
    "text": "found by Neil met which is a great F by him and most recently there was the um",
    "start": "363680",
    "end": "369319"
  },
  {
    "text": "SMB floor found by qualis who were kind enough not to give any details whatsoever but it's amazing what you can",
    "start": "369319",
    "end": "375599"
  },
  {
    "text": "do of a disassembler and a Microsoft Patch these days so here's a quick quick hint svv transaction Max BR Max dat",
    "start": "375599",
    "end": "381880"
  },
  {
    "text": "count look it",
    "start": "381880",
    "end": "385039"
  },
  {
    "start": "388000",
    "end": "442000"
  },
  {
    "text": "up all right so the exploit I'm going to be um using for my payload today is one of the semantic ones we found it's an",
    "start": "388120",
    "end": "394599"
  },
  {
    "text": "older vulnerability but so I'm not dropping any zero day today but um I",
    "start": "394599",
    "end": "399800"
  },
  {
    "text": "picked this one because it's in a firewall product it's a it's a standard kernel vulnerability it could be exploited over a broadcast address um",
    "start": "399800",
    "end": "408680"
  },
  {
    "text": "and I think it's kind of cool to be actually like break into somewhere through the very like mechanism that's designed to protect the system you",
    "start": "408680",
    "end": "416919"
  },
  {
    "text": "know all right so yeah actually that the the the",
    "start": "418400",
    "end": "424199"
  },
  {
    "text": "floor was on the DNS processing and the cool thing because due to another implementation floor you could exploit",
    "start": "424199",
    "end": "430120"
  },
  {
    "text": "this with all Port filtering like the firew it's like maximum settings and um",
    "start": "430120",
    "end": "435240"
  },
  {
    "text": "you can do it over broadcas dress so thought it was dope anyone see",
    "start": "435240",
    "end": "441720"
  },
  {
    "text": "that those are my fight clubes subliminal",
    "start": "441720",
    "end": "446479"
  },
  {
    "start": "442000",
    "end": "513000"
  },
  {
    "text": "messages all right the native API um when you're writing K mode Shell",
    "start": "447080",
    "end": "454199"
  },
  {
    "text": "Code you basically just got to forget about the user API entirely you're just going to be uh only using kernel functions now the native API actually",
    "start": "454199",
    "end": "461400"
  },
  {
    "text": "exists as a like a somewhat Safe Way for user mod programs to call into kernel",
    "start": "461400",
    "end": "467039"
  },
  {
    "text": "functions um what they do is uh these are like from the user API you call through ndl",
    "start": "467039",
    "end": "474400"
  },
  {
    "text": "and it offers kind of a wrapper into the kernel um basically these wrappers will just load a register of CIS ID and",
    "start": "474400",
    "end": "480479"
  },
  {
    "text": "Windows 2000 I'll execute like interrupt toi and um actually in XP they've like crossed the more logical ciser and S",
    "start": "480479",
    "end": "487479"
  },
  {
    "text": "exit instruction PA for doing that let's",
    "start": "487479",
    "end": "494759"
  },
  {
    "text": "see actually did anyone catch uh Ryan and dereck's talk on the boot root project this",
    "start": "494759",
    "end": "500000"
  },
  {
    "text": "morning sick big up",
    "start": "500000",
    "end": "505080"
  },
  {
    "text": "then oh heads off to Derek Soder again I should have mentioned that earlier",
    "start": "506560",
    "end": "511680"
  },
  {
    "text": "but he rocks all right some considerations when exploring",
    "start": "511680",
    "end": "517159"
  },
  {
    "start": "513000",
    "end": "583000"
  },
  {
    "text": "firewalls see now a big problem is the firewall is going to have to process all incoming packets so when we exploit this",
    "start": "517159",
    "end": "523039"
  },
  {
    "text": "we're going to lose all network communication so we're going to need to way to get around that and that's where I'll talk about the cleaning return a",
    "start": "523039",
    "end": "529160"
  },
  {
    "text": "little bit later um because obviously there not a lot of fun to be had when you execute it and you can't access the system you know",
    "start": "529160",
    "end": "536560"
  },
  {
    "text": "um there's a few options here you could try and um directly unload the driver by",
    "start": "536560",
    "end": "541600"
  },
  {
    "text": "calling a ZW unload driver or just calling the unload routine itself just try and detach or delete the devices",
    "start": "541600",
    "end": "548560"
  },
  {
    "text": "send ictl from Newlands um or unregister endis packet Handler and now to be perfectly honest",
    "start": "548560",
    "end": "554800"
  },
  {
    "text": "with you none of those actually really work that was just kind of theory but um there is one thing that does work and",
    "start": "554800",
    "end": "560720"
  },
  {
    "text": "that's returning cleanly um it's a sh fire way to have the thread execute with like no ill damage so I mean you can",
    "start": "560720",
    "end": "567000"
  },
  {
    "text": "just exploit the system over and over and over and over again um what that involves is like sending an",
    "start": "567000",
    "end": "573360"
  },
  {
    "text": "exploit exploiting the system and then returning into a previous stack frame and I'll get into that a little",
    "start": "573360",
    "end": "580680"
  },
  {
    "text": "bit see all right behind the blue screen no doubt everyone's run into that but what",
    "start": "580839",
    "end": "588200"
  },
  {
    "start": "583000",
    "end": "631000"
  },
  {
    "text": "exactly goes on I mean this is how the K exception handling works when exceptions triggered can do a number of things uh",
    "start": "588200",
    "end": "595440"
  },
  {
    "text": "can be passed off the Ki dispatch exception and the bug check will be called problem within that routine now K",
    "start": "595440",
    "end": "600920"
  },
  {
    "text": "Bug Che X is what drops you the blue screen all like all the code involved is within that function",
    "start": "600920",
    "end": "606959"
  },
  {
    "text": "um or the exception can actually be passed off the Trap Handler which goes through the IDT and the bug Chet can be",
    "start": "606959",
    "end": "612839"
  },
  {
    "text": "called from there now when exception is thrown um the kernel does gain controlled by various entries in the IDT",
    "start": "612839",
    "end": "619120"
  },
  {
    "text": "which are known as the Trap handlers that's the first level trap Handler um so the Trap handle can deal the exception or locate a handle to pass",
    "start": "619120",
    "end": "626040"
  },
  {
    "text": "down to or if it can't be handled it will directly call K Bug when it calls that then you get the blue",
    "start": "626040",
    "end": "631640"
  },
  {
    "start": "631000",
    "end": "705000"
  },
  {
    "text": "screen um soft dice is probably my favorite the buger but when the bug is um excellent for like memory dump analys",
    "start": "631640",
    "end": "637600"
  },
  {
    "text": "analysis and whatnot cuz it's got great structure recognition um so basically if we want",
    "start": "637600",
    "end": "643160"
  },
  {
    "text": "to do anything useful we're going to need to know where the exception happened um and get like register States",
    "start": "643160",
    "end": "650160"
  },
  {
    "text": "and everything you need to exploit it you know so to do that we're going to need to retrieve the Trap room from um",
    "start": "650160",
    "end": "656240"
  },
  {
    "text": "the time of exception so you can load your memory um thump from window buug let's",
    "start": "656240",
    "end": "663680"
  },
  {
    "text": "see and by typing KV you're going to get like the complete stack Trace there you can see",
    "start": "663680",
    "end": "669880"
  },
  {
    "text": "that K K Bug CH was called from the Ki trap OE which is the Trap Handler and at",
    "start": "669880",
    "end": "676639"
  },
  {
    "text": "trap frame 80541 99c so then you just simply type trap and the address of the",
    "start": "676639",
    "end": "682120"
  },
  {
    "text": "Trap Handler and it's going to give you the register States you see EIP was 4141 4141 so I mean that's obviously",
    "start": "682120",
    "end": "690160"
  },
  {
    "text": "they got owned and by dumping ESP you see that all our data is in the um ESP",
    "start": "690160",
    "end": "698120"
  },
  {
    "text": "register and from there on out you pretty much just go exploiting a Kel bug like you would a us a us a mode",
    "start": "699120",
    "end": "705480"
  },
  {
    "start": "705000",
    "end": "730000"
  },
  {
    "text": "bug um so yeah we need to redirect execution I mean anyone who's written an exploit this is standard feir for them",
    "start": "705480",
    "end": "712240"
  },
  {
    "text": "basically the data is in ESP so the only one the only one difference is we're going to need to choose an address in",
    "start": "712240",
    "end": "717680"
  },
  {
    "text": "the kernel which is going to be St so you don't to want to pick like um in TOS kernel or maybe H and you just want to",
    "start": "717680",
    "end": "723519"
  },
  {
    "text": "find um like a push ESP R jump ESP anything like that anything that's going to return you to ESP",
    "start": "723519",
    "end": "730320"
  },
  {
    "start": "730000",
    "end": "794000"
  },
  {
    "text": "there now the clean return um so as I was saying earlier we",
    "start": "730320",
    "end": "736360"
  },
  {
    "text": "need a way to safely continue execution without disrupting the current thread and what we do",
    "start": "736360",
    "end": "743279"
  },
  {
    "text": "is uh we're going to send a minimum amount of data enough to actually cause a stack override and override IP and",
    "start": "743279",
    "end": "750079"
  },
  {
    "text": "then we're going to put a small amount of code in there which is actually going to patch the driver itself so it will",
    "start": "750079",
    "end": "755160"
  },
  {
    "text": "patch it to execute um certain flagged packets that come in and after that it's going to return to a previous stack",
    "start": "755160",
    "end": "761399"
  },
  {
    "text": "frame which is going to return to the TDI driver so that way you can just exploit over and over and over again and the cool thing about this this is can be",
    "start": "761399",
    "end": "767360"
  },
  {
    "text": "used for like any exploit doesn't have to be kernel like user mode or kernel and yeah it's basically",
    "start": "767360",
    "end": "775320"
  },
  {
    "text": "dope so what I did um I just I patched the some DNS driver which is the driver",
    "start": "775320",
    "end": "780800"
  },
  {
    "text": "that's handling all the DNS request which is where the vulnerability is and I patch that routine to just execute",
    "start": "780800",
    "end": "786880"
  },
  {
    "text": "certain DNS packets that come",
    "start": "786880",
    "end": "790240"
  },
  {
    "start": "794000",
    "end": "840000"
  },
  {
    "text": "in all right so when we actually seeing the vulnerability we got about three it's going it's actually kind of hard to",
    "start": "794720",
    "end": "800839"
  },
  {
    "text": "explain by slides but I'll try um we got about 300 bytes of space before we return into the simdi driver so what I",
    "start": "800839",
    "end": "809320"
  },
  {
    "text": "do is I go and exploit it I'll have my patch code and then I'll just retrieve",
    "start": "809320",
    "end": "814800"
  },
  {
    "text": "that previous stack frame which is like es plus x130 and just return into",
    "start": "814800",
    "end": "822480"
  },
  {
    "text": "that I was actually going to run through this in the debugger but yeah I was a little hang over this morning and",
    "start": "827720",
    "end": "833560"
  },
  {
    "text": "actually accidentally snapshotted at the wrong point so what can you do",
    "start": "833560",
    "end": "840759"
  },
  {
    "start": "840000",
    "end": "878000"
  },
  {
    "text": "all right here's a very brief overflow uh overview of Kernel Heap overflows now this is completely brief and in fact I",
    "start": "842320",
    "end": "848240"
  },
  {
    "text": "did this late yesterday so don't expect any rocket science at all it's a basic this is a I just ran a quick um test",
    "start": "848240",
    "end": "854279"
  },
  {
    "text": "demo allocating a buffer with X allocate pool overriding that buffer and then freeing it now the good news is is that",
    "start": "854279",
    "end": "860880"
  },
  {
    "text": "kernel pool overflows from what I see can be exploited just like just like userland vulnerabilities you still have",
    "start": "860880",
    "end": "866480"
  },
  {
    "text": "like um the where you can control the data and overwrite another register with",
    "start": "866480",
    "end": "871920"
  },
  {
    "text": "like um data rev choosing you know but um the bad news that I noticed on xpsp 2",
    "start": "871920",
    "end": "878399"
  },
  {
    "text": "it's going to actually crash with um an invalid pool header but I haven't looked too much into that but you know what we",
    "start": "878399",
    "end": "884240"
  },
  {
    "text": "um I just going to quickly plug something we have like a newsletter called Vice which is uh our basically our research newsletter with EI where we",
    "start": "884240",
    "end": "890880"
  },
  {
    "text": "like um just kind of a research brain dump so anything we're like currently researching and just want to like tell",
    "start": "890880",
    "end": "897240"
  },
  {
    "text": "people about will um D put in there so I'll look more into this and I'll put in that newsletter so I suggest you sign up",
    "start": "897240",
    "end": "902680"
  },
  {
    "text": "for that it's pretty dope so now the most important thing is",
    "start": "902680",
    "end": "908000"
  },
  {
    "start": "906000",
    "end": "953000"
  },
  {
    "text": "actually gaining control um and there's a perfect routine to overwrite which is in the Ki dispatch",
    "start": "908000",
    "end": "914720"
  },
  {
    "text": "exception because obviously you're going to um cause an exception and it's going to go to this routine so you can",
    "start": "914720",
    "end": "920920"
  },
  {
    "text": "overwrite KO thebug routine um with your code well like appointed to your code",
    "start": "920920",
    "end": "926399"
  },
  {
    "text": "and you're you're pretty much sweet but see actually there's one problem",
    "start": "926399",
    "end": "931600"
  },
  {
    "text": "here though Ki dispatch exception doesn't get called um from all exception types and that way it can go directly to",
    "start": "931600",
    "end": "938360"
  },
  {
    "text": "the Trap Handler and it'll just call K Bug check but there's actually a function K Bug check you can overwrite",
    "start": "938360",
    "end": "943399"
  },
  {
    "text": "too but the thing is um it's probably going to make it a little bit hard to get back to your code but I I'll try to",
    "start": "943399",
    "end": "949199"
  },
  {
    "text": "find some proof of concept and publish this stuff all right so the first payload I'm",
    "start": "949199",
    "end": "955240"
  },
  {
    "start": "953000",
    "end": "987000"
  },
  {
    "text": "going to talk about is the kernel loader and what this Shell Code allows you to do is um plug in any user land",
    "start": "955240",
    "end": "961199"
  },
  {
    "text": "Shell Code and have it execute from the kernel so I mean it's funny you got all that power at your disposal but you know",
    "start": "961199",
    "end": "967680"
  },
  {
    "text": "handed these capabilities just to go back to usand you go figure anyway any usand code can be",
    "start": "967680",
    "end": "973720"
  },
  {
    "text": "plugged in and um the load is pretty small it's like a little over 100 bytes um so you can execute your remote shell",
    "start": "973720",
    "end": "979959"
  },
  {
    "text": "or user ad or any like Shell Code that you normally use in userland you can just use",
    "start": "979959",
    "end": "986759"
  },
  {
    "text": "that see that one it's my cheap attempts at mind control I",
    "start": "986759",
    "end": "993279"
  },
  {
    "text": "hope it's working all right so for us to do anything useful um we're going to need",
    "start": "993279",
    "end": "999920"
  },
  {
    "text": "to retrieve the inos kernel base um and we want to keep our shell",
    "start": "999920",
    "end": "1005240"
  },
  {
    "text": "Cod generic so we're going to have to avoid using hardcoded offsets and a quick and easy way to get the Base",
    "start": "1005240",
    "end": "1010680"
  },
  {
    "text": "address is um to retrieve an entry from the IDT and basically just scan down until we are reach the executable",
    "start": "1010680",
    "end": "1016319"
  },
  {
    "text": "signature the thing is you don't actually have to retrieve a valid IDT entry you can just like grab the highw and let it safely go from0 to 65535 and",
    "start": "1016319",
    "end": "1024240"
  },
  {
    "text": "it's going to safely stay in OS kernel memory there's a couple of ways to get the IDT base you can um most common ways",
    "start": "1024240",
    "end": "1031280"
  },
  {
    "text": "just to use sidt instruction but you can also just reference a memory address ffd",
    "start": "1031280",
    "end": "1037000"
  },
  {
    "text": "F f38 and it'll shave off a small number of bites and that's obviously useful when you're writing sh C cuz um size is",
    "start": "1037000",
    "end": "1043798"
  },
  {
    "text": "obviously a factor retrieving improve procedure",
    "start": "1043799",
    "end": "1049240"
  },
  {
    "start": "1046000",
    "end": "1086000"
  },
  {
    "text": "juices um this is simple stuff this is a like a standard G procer juice",
    "start": "1049240",
    "end": "1055760"
  },
  {
    "text": "implementation and so yeah it's just a matter of passing the portable executable table uh the export table",
    "start": "1056840",
    "end": "1062480"
  },
  {
    "text": "with the portable executable I'm sorry um the one difference in this implementation is it's just like the two by hashes I use instead of function",
    "start": "1062480",
    "end": "1068760"
  },
  {
    "text": "strings and I just do that by using like a Exel rotate just to get the hashes and",
    "start": "1068760",
    "end": "1074559"
  },
  {
    "text": "um just generally because like function strings take up like an excessive amount of space and shell Cod so might as well",
    "start": "1074559",
    "end": "1080720"
  },
  {
    "text": "like wipe that out you know and then I just p a table with the procedure",
    "start": "1080720",
    "end": "1086880"
  },
  {
    "start": "1086000",
    "end": "1121000"
  },
  {
    "text": "addresses protecting the stack this isn't really necessary when you're doing the clean return because um yeah it just",
    "start": "1087559",
    "end": "1094640"
  },
  {
    "text": "don't matter but if you're like for some reason you can't do that the Stack's going to get corrupted when calling um",
    "start": "1094640",
    "end": "1100240"
  },
  {
    "text": "certain routines particularly when you um attempt to drop the interrupt request level that basically just wipes out your",
    "start": "1100240",
    "end": "1106240"
  },
  {
    "text": "stack completely so to get around that um just simply allocate some more memory",
    "start": "1106240",
    "end": "1111720"
  },
  {
    "text": "copy your following Shell Code in there and just jump to",
    "start": "1111720",
    "end": "1116280"
  },
  {
    "text": "that all right speaking of the interrupt request level when we break in we're actually",
    "start": "1118440",
    "end": "1124360"
  },
  {
    "start": "1121000",
    "end": "1146000"
  },
  {
    "text": "running at the dispatch level which is like reserved for like dpcs and thread schedulers and whatnot um to actually",
    "start": "1124360",
    "end": "1130480"
  },
  {
    "text": "successfully call some of the functions we need we're going to need it to drop it down to the passive level so I mean that's a simple matter",
    "start": "1130480",
    "end": "1137480"
  },
  {
    "text": "of calling um the H exported function K lower iql and just pass zero which is passive as a parameter and that'll drop",
    "start": "1137480",
    "end": "1144200"
  },
  {
    "text": "it down so we need to map in our userland",
    "start": "1144200",
    "end": "1151240"
  },
  {
    "start": "1146000",
    "end": "1203000"
  },
  {
    "text": "Shell Code um we're going to need to map this I'm going to be like hooking into the Els process so I'm going to use that",
    "start": "1151240",
    "end": "1158120"
  },
  {
    "text": "as um my way to execute my system shell now there's a couple of ways um oh",
    "start": "1158120",
    "end": "1164559"
  },
  {
    "text": " am I looking right thing oh we go okay",
    "start": "1164559",
    "end": "1169679"
  },
  {
    "text": "so we need a process running in the system context um to spawn our thread um so we can what I'm going to do",
    "start": "1169679",
    "end": "1176280"
  },
  {
    "text": "is just Traverse all the user processes and um just go through the eprocess block so every process has an eprocess",
    "start": "1176280",
    "end": "1182960"
  },
  {
    "text": "structure then I'll um pass eprocess and active process links and that way we can",
    "start": "1182960",
    "end": "1188480"
  },
  {
    "text": "just Loop through all running processes in the system um once we like hook on to the Els one then I just like save that",
    "start": "1188480",
    "end": "1196360"
  },
  {
    "text": "structure um compare the while compare the module name to find the ls and just save the ls process going to use that",
    "start": "1196360",
    "end": "1202720"
  },
  {
    "text": "later now we need a map in our ring three shell C",
    "start": "1202720",
    "end": "1207799"
  },
  {
    "start": "1203000",
    "end": "1259000"
  },
  {
    "text": "now there's a couple of ways to do this originally I was actually um sending into the",
    "start": "1207799",
    "end": "1213760"
  },
  {
    "text": "PB but there's actually a better option for that the better option is to copy it",
    "start": "1213760",
    "end": "1219240"
  },
  {
    "text": "into um there's a a block of memory which is Kernel uh like shared between kernel and userland I think it's called",
    "start": "1219240",
    "end": "1225559"
  },
  {
    "text": "shared user data or something anyway this memor is like mapped at one location in the kernel it's also mapped",
    "start": "1225559",
    "end": "1231000"
  },
  {
    "text": "at different address and usland so we can like um copy our Shell Code to that",
    "start": "1231000",
    "end": "1236840"
  },
  {
    "text": "and then any userland process can access that memory so I mean that's saves me",
    "start": "1236840",
    "end": "1242240"
  },
  {
    "text": "having to actually attach to the ls process write it to its PB we can just copy that and then anything can access",
    "start": "1242240",
    "end": "1247720"
  },
  {
    "text": "it you know um I just like seeing it maybe like a th000 bytes off there cuz I mean maybe",
    "start": "1247720",
    "end": "1254640"
  },
  {
    "text": "I'm overwriting something important there so I'll just make sure I'm not doing that",
    "start": "1254640",
    "end": "1260120"
  },
  {
    "start": "1259000",
    "end": "1362000"
  },
  {
    "text": "now to actually contact user land I um actually issue an APC um a synchronous procedure course um",
    "start": "1260720",
    "end": "1268720"
  },
  {
    "text": "a function that's going to execute synchronously in the context of a chosen thread um they can be issued from the",
    "start": "1268720",
    "end": "1274200"
  },
  {
    "text": "kernel the user land now every thread has an APC Q um in our case we're going to be fing",
    "start": "1274200",
    "end": "1280080"
  },
  {
    "text": "one off the ls thread now when you queue an APC to a thread um interrupts issued",
    "start": "1280080",
    "end": "1285320"
  },
  {
    "text": "and the thread scheduled and the APC function will be executed now for the APC to actually execute you",
    "start": "1285320",
    "end": "1291559"
  },
  {
    "text": "need to find a thread um in what's called an alertable weight state so we you can actually manually set the thread",
    "start": "1291559",
    "end": "1297200"
  },
  {
    "text": "to be alertable um or you can just like look through and find a thread that's actually already in the alertable weight",
    "start": "1297200",
    "end": "1303279"
  },
  {
    "text": "State and from like okay if three L is in aable weight state after calling like um sleep X signal object and weight",
    "start": "1303279",
    "end": "1309960"
  },
  {
    "text": "message weight for mulle objects etc etc and from my experience there's always like a couple of threads in one of these",
    "start": "1309960",
    "end": "1316480"
  },
  {
    "text": "delay execution States so I took that",
    "start": "1316480",
    "end": "1322200"
  },
  {
    "text": "path all right to actually issue the APC um so we already have the poed to",
    "start": "1323840",
    "end": "1329559"
  },
  {
    "text": "the LCS process and um we need to find a 3 that's going to meet our requirement so",
    "start": "1329559",
    "end": "1334760"
  },
  {
    "text": "we can get the E thread structure bya the eess once we got a point into that structure basically just Loop through",
    "start": "1334760",
    "end": "1340200"
  },
  {
    "text": "all the threads um and until we find a thread which is an alertable weight State then",
    "start": "1340200",
    "end": "1346919"
  },
  {
    "text": "we just need initial and cue the APC and we do this by passing the K3",
    "start": "1346919",
    "end": "1352080"
  },
  {
    "text": "structure our Shell Code which is in shared user data and a Kel callback function and then we just pass your APC",
    "start": "1352080",
    "end": "1358279"
  },
  {
    "text": "handle to K insert Q APC and it's as simple as that now here's the bummer my first demo doesn't actually",
    "start": "1358279",
    "end": "1365320"
  },
  {
    "start": "1362000",
    "end": "1378000"
  },
  {
    "text": "work cuz I was screwing around with it earlier and it bugged out but the good thing is this is the lamest of all the",
    "start": "1365320",
    "end": "1370360"
  },
  {
    "text": "demos so you know just use your imagination you probably think up something that look cool so there you",
    "start": "1370360",
    "end": "1376960"
  },
  {
    "text": "go but anyway all I was going to do is drop a remote shell and i' Fiddle around",
    "start": "1376960",
    "end": "1384080"
  },
  {
    "start": "1378000",
    "end": "1394000"
  },
  {
    "text": "and all right so I'll talk about something B now anyway the kernel key logger um this operates entirely in the",
    "start": "1384080",
    "end": "1392559"
  },
  {
    "text": "kernel um I think actually this is a lot cooler I think it will capture all keystrokes and the keystrokes can be",
    "start": "1392559",
    "end": "1398240"
  },
  {
    "start": "1394000",
    "end": "1453000"
  },
  {
    "text": "retrieved by a remote system through icmp requests and you can do this pretty much in real time as well this demo",
    "start": "1398240",
    "end": "1404159"
  },
  {
    "text": "actually works I'll show you that one soon and the way I've gone about this isn't exactly standard um this is Shell",
    "start": "1404159",
    "end": "1410080"
  },
  {
    "text": "Code after all so like trying to create like a full-fledged Communications tunnel and a keyboard filter and whatnot",
    "start": "1410080",
    "end": "1415960"
  },
  {
    "text": "it's going to be a bit of a bastard so instead we like I sort of kicked it back a little bit old school and um went",
    "start": "1415960",
    "end": "1422480"
  },
  {
    "text": "back to like the Dos TSR days and every probably people remember the game trainers and the little hotkey popups",
    "start": "1422480",
    "end": "1429279"
  },
  {
    "text": "there you know so they all work by directly cooking the keyboard interrupt and that's exactly what I'm going to do",
    "start": "1429279",
    "end": "1436080"
  },
  {
    "text": "and so we also need a way to actually retrieve these keystrokes remotely so as I said I'm not going to be creating a full Communications tunnel so instead I",
    "start": "1436080",
    "end": "1443240"
  },
  {
    "text": "cheat again and Patch the TCP IP driver and I'll patch to send Echo function so when we ping it it can return all our",
    "start": "1443240",
    "end": "1449880"
  },
  {
    "text": "key Stakes to us now we need a way to get the uh",
    "start": "1449880",
    "end": "1457520"
  },
  {
    "start": "1453000",
    "end": "1518000"
  },
  {
    "text": "interrupt Vector from the IQ see unfortunately the interrupt vctor",
    "start": "1457520",
    "end": "1463640"
  },
  {
    "text": "is not always going to be static um the keyboard IQ was iq1 and so we need to",
    "start": "1463640",
    "end": "1469480"
  },
  {
    "text": "find like I think on like when 2K sp0 I think it's all static like iq1 is X31",
    "start": "1469480",
    "end": "1475240"
  },
  {
    "text": "iq2 X2 etc etc but the good thing is there's actually a IQ to Vector table in",
    "start": "1475240",
    "end": "1481080"
  },
  {
    "text": "the hell memory address space and so basically just scan for that dword 41",
    "start": "1481080",
    "end": "1488360"
  },
  {
    "text": "4113 3D whatever it says um in the hell memory space and this D marks the",
    "start": "1488360",
    "end": "1494080"
  },
  {
    "text": "beginning of the iql to tpr translation table and this neighbors the Vector to IQ",
    "start": "1494080",
    "end": "1499320"
  },
  {
    "text": "table so we can just retrieve that Vector offset by adding our 1C to the IQ",
    "start": "1499320",
    "end": "1504399"
  },
  {
    "text": "table and we just simply retrieve the vector that corresponds to IQ um as I was saying on ear service",
    "start": "1504399",
    "end": "1509840"
  },
  {
    "text": "packs it doesn't exist but they're all static so in the in the event the table's not found I just use like the",
    "start": "1509840",
    "end": "1515000"
  },
  {
    "text": "static Vector of 31 for the keyboard um we're going to be overriding",
    "start": "1515000",
    "end": "1520880"
  },
  {
    "start": "1518000",
    "end": "1544000"
  },
  {
    "text": "kernel code so we need to I use soft ice and I realized that it actually disables all memory protection when I found out",
    "start": "1520880",
    "end": "1527960"
  },
  {
    "text": "when I tried to exploit something that wasn't run in the bugger so um yeah so we need to remove the memory protection",
    "start": "1527960",
    "end": "1533640"
  },
  {
    "text": "this is a this is pretty simple we just need to um disable the right protect bit",
    "start": "1533640",
    "end": "1539200"
  },
  {
    "text": "in cr0 overwrite the code we need and then just re reenable the bit all right so I'm going to be um",
    "start": "1539200",
    "end": "1546240"
  },
  {
    "start": "1544000",
    "end": "1568000"
  },
  {
    "text": "overwriting the IDT entry the keyboard IDT entry with our own custom keyboard Handler so we get the base of the ID",
    "start": "1546240",
    "end": "1552240"
  },
  {
    "text": "again sidt or referencing that memory address from earlier um to retrieve a vector entry it's just ID base plus",
    "start": "1552240",
    "end": "1559200"
  },
  {
    "text": "Vector time 8 we just save the address of the previous Handler override the id2 of our own and yeah I'll talk about what",
    "start": "1559200",
    "end": "1566240"
  },
  {
    "text": "that my actual handle does in a couple of minutes so we got to locate the image base of the txp IP",
    "start": "1566240",
    "end": "1573720"
  },
  {
    "text": "driver uh we can do this by passing the PS loaded module list unfortunately this isn't actually publicly exported but we",
    "start": "1573720",
    "end": "1581159"
  },
  {
    "text": "can treat retrieve the offset by of this by um passing through a function that is",
    "start": "1581159",
    "end": "1586240"
  },
  {
    "text": "publicly exported and references the offet set like mm get system routine address that's what I'll be using it's",
    "start": "1586240",
    "end": "1593039"
  },
  {
    "start": "1591000",
    "end": "1605000"
  },
  {
    "text": "actually the format of the um modu structure we just basically Loop through",
    "start": "1593039",
    "end": "1598440"
  },
  {
    "text": "compare the TCP IP string with a module name and once you find it we'll just retrieve the Base address from the",
    "start": "1598440",
    "end": "1603760"
  },
  {
    "text": "structure there you",
    "start": "1603760",
    "end": "1606840"
  },
  {
    "start": "1605000",
    "end": "1650000"
  },
  {
    "text": "go all right so we're going to be patching the um icmp Echo",
    "start": "1614559",
    "end": "1620720"
  },
  {
    "text": "Handler so this is basic this is a disassembly of the send Echo routine",
    "start": "1622039",
    "end": "1627520"
  },
  {
    "text": "and right here is getting the buffer into eex so we're just going to patch",
    "start": "1627520",
    "end": "1632600"
  },
  {
    "text": "that to use the buffer that we created for our keyboard Handler",
    "start": "1632600",
    "end": "1637799"
  },
  {
    "text": "instead so basically now anytime an icmp uker request is um retriev is received",
    "start": "1638360",
    "end": "1644080"
  },
  {
    "text": "from the system it's going to reply with our uh key stke buffer in",
    "start": "1644080",
    "end": "1649519"
  },
  {
    "start": "1650000",
    "end": "1684000"
  },
  {
    "text": "did now our custom Handler this one um executes before the original keyboard Handler um here's how it works we",
    "start": "1650480",
    "end": "1657559"
  },
  {
    "text": "basically just directly retrieve the scan codes from the keyboard Port which is um Ox 60 and we allocate a buffer to",
    "start": "1657559",
    "end": "1664600"
  },
  {
    "text": "store all the scan codes um now this is the same buffer that's going to be referenced in the TCP IP driver now and",
    "start": "1664600",
    "end": "1670399"
  },
  {
    "text": "then we just like circulate every like 1,24 key PES um there's no scan code",
    "start": "1670399",
    "end": "1675919"
  },
  {
    "text": "translation or removal of any scan code so we just capture everything in the raw and that way you'll be able to um",
    "start": "1675919",
    "end": "1681360"
  },
  {
    "text": "receive like all key combinations you know all right let me Demo this one this",
    "start": "1681360",
    "end": "1687000"
  },
  {
    "start": "1684000",
    "end": "1837000"
  },
  {
    "text": "one actually does",
    "start": "1687000",
    "end": "1689880"
  },
  {
    "text": "work let me just that real",
    "start": "1698919",
    "end": "1703080"
  },
  {
    "text": "quick",
    "start": "1706440",
    "end": "1709440"
  },
  {
    "text": "I always want to beat box on stage sounds",
    "start": "1715279",
    "end": "1722360"
  },
  {
    "text": "good all",
    "start": "1729919",
    "end": "1733080"
  },
  {
    "text": "right what's every oh was that too",
    "start": "1735279",
    "end": "1742880"
  },
  {
    "text": "small ah you still get the",
    "start": "1745519",
    "end": "1749399"
  },
  {
    "text": "idea all right so now I'm just going to send um the kernel payload which is",
    "start": "1762600",
    "end": "1767960"
  },
  {
    "text": "going to do the whole keyboard thing and you'll be able to remotely retrieve keystrokes so hopefully this",
    "start": "1767960",
    "end": "1776440"
  },
  {
    "text": "works all right now Derek soda wrote a cool little tool which will um which",
    "start": "1777279",
    "end": "1782480"
  },
  {
    "text": "does all the Pingu request and Returns the keystrokes so you can pretty much do that in real",
    "start": "1782480",
    "end": "1790600"
  },
  {
    "text": "time let's see",
    "start": "1792399",
    "end": "1799320"
  },
  {
    "text": "see even does the Caps",
    "start": "1809799",
    "end": "1812840"
  },
  {
    "text": "locks all right that one works",
    "start": "1822080",
    "end": "1829240"
  },
  {
    "text": "now this is my favorite demonstration this is where we um just basically kill Windows entirely now if anyone caught",
    "start": "1832559",
    "end": "1839240"
  },
  {
    "start": "1837000",
    "end": "1896000"
  },
  {
    "text": "derks and Ryan they did something in a similar vein where they went back to real mode and you didn't do that okay",
    "start": "1839240",
    "end": "1846559"
  },
  {
    "text": "well I actually missed their talk cuz I was asleep but I was hoping that's what they did you tried it didn't",
    "start": "1846559",
    "end": "1854320"
  },
  {
    "text": "work damn the demo gods",
    "start": "1854720",
    "end": "1859240"
  },
  {
    "text": "um okay well anyway I used to always get a kick out of like those old school demos and",
    "start": "1860080",
    "end": "1866080"
  },
  {
    "text": "intros you know like um like those old Future Crew demos sick and reality and whatnot anyway like the ntvdm hardly",
    "start": "1866080",
    "end": "1874120"
  },
  {
    "text": "runs any of these so what I what we thought would be cool was to switch from",
    "start": "1874120",
    "end": "1879639"
  },
  {
    "text": "Kel mode back to real mode and execute like a Nifty little intro in the bootload of memory region now as far as",
    "start": "1879639",
    "end": "1887240"
  },
  {
    "text": "real world purpose goes for this I'm still still trying to decide that one but maybe if you want to run second reality there you",
    "start": "1887240",
    "end": "1893519"
  },
  {
    "text": "go did anyone ever see that demo wasn't that the sickest bro I still",
    "start": "1893519",
    "end": "1898799"
  },
  {
    "start": "1896000",
    "end": "1940000"
  },
  {
    "text": "think that's the greatest demo um actually our original idea for this was a little bit different um cuz",
    "start": "1898799",
    "end": "1905200"
  },
  {
    "text": "the vulnerability I'm using here can be sent to a broadcast address so what we thought would be pretty cool would be to",
    "start": "1905200",
    "end": "1910559"
  },
  {
    "text": "like execute a Space Invaders game and this cat actually rote up a little Space Invaders game and everything and so I",
    "start": "1910559",
    "end": "1915639"
  },
  {
    "text": "thought like you SE this one package and then like the whole subnet is playing Space Invaders and like if you uh if",
    "start": "1915639",
    "end": "1921559"
  },
  {
    "text": "you're like good enough to get like the high score then maybe you get back to protector mode if not blue",
    "start": "1921559",
    "end": "1928440"
  },
  {
    "text": "screen anyway we never really got too far with that idea but I think you'll dig this one",
    "start": "1930880",
    "end": "1936880"
  },
  {
    "text": "anyway all right now this is the boring part here",
    "start": "1937840",
    "end": "1943840"
  },
  {
    "start": "1940000",
    "end": "1983000"
  },
  {
    "text": "um so these are the steps required to switch from the kernel to real mode we're going to need to acquire the display from Windows this is done by",
    "start": "1943840",
    "end": "1950600"
  },
  {
    "text": "calling a couple of how exported functions oh no actually no exp int my bad um we're going to have to map in",
    "start": "1950600",
    "end": "1957840"
  },
  {
    "text": "some physical memory so we can actually copy our code to the bootloader region we have to transfer control to an",
    "start": "1957840",
    "end": "1963320"
  },
  {
    "text": "identity math region we're going to have to clear the paging bit and the control register to zero and WR zero to the",
    "start": "1963320",
    "end": "1968440"
  },
  {
    "text": "control register to three to flush the tlb uh we'll jump to a 64k limit segment",
    "start": "1968440",
    "end": "1973639"
  },
  {
    "text": "point our interrupt table somewhere in the first page uh clear the P bit and cr0 far jump to a 16bit address load up",
    "start": "1973639",
    "end": "1981600"
  },
  {
    "text": "segment registers now thing is we're going to need to you know I'll just the slides will be",
    "start": "1981600",
    "end": "1990240"
  },
  {
    "start": "1983000",
    "end": "2016000"
  },
  {
    "text": "up so we're going to actually need to prevent any interruptions and we do this by um calling K raise iql and we uh",
    "start": "1990240",
    "end": "1998399"
  },
  {
    "text": "raise it up to high high high level so first we need to acquire a display and we do that by calling the mbv reset",
    "start": "1998399",
    "end": "2005080"
  },
  {
    "text": "display and acquire display ownership from the inos kernel and that way once we got the display then when we do go",
    "start": "2005080",
    "end": "2011240"
  },
  {
    "text": "back to real mode we can use the bias interrupts to change video modes now to map in our memory so we're",
    "start": "2011240",
    "end": "2018080"
  },
  {
    "text": "going to be coping into the bootloader region now a quick way to actually map in our memory is to change the page size",
    "start": "2018080",
    "end": "2023440"
  },
  {
    "text": "bit um in the PD which is like the F at",
    "start": "2023440",
    "end": "2028559"
  },
  {
    "text": "c0300 and we just set page size to bit one and that will like give us like a 4 megabyte page so we can just copy our",
    "start": "2028679",
    "end": "2035159"
  },
  {
    "text": "crap and then uh so we copy the mode switch code into",
    "start": "2035159",
    "end": "2041360"
  },
  {
    "start": "2037000",
    "end": "2065000"
  },
  {
    "text": "low memory region it's going to ex 16 bit protector mode and copy our payload into the bootloader region execute LT to",
    "start": "2041360",
    "end": "2048200"
  },
  {
    "text": "point uh our interrupt table back into the first megabyte protector mode code sets up",
    "start": "2048200",
    "end": "2054320"
  },
  {
    "text": "segment registers points to stack into low memory ER points ID first page jumps id",
    "start": "2054320",
    "end": "2060720"
  },
  {
    "text": "M now the payload itself did I just skip one oh yeah there we go so the mo switch",
    "start": "2064760",
    "end": "2071599"
  },
  {
    "start": "2065000",
    "end": "2084000"
  },
  {
    "text": "code um sets up our SE stack segment loads of",
    "start": "2071599",
    "end": "2077839"
  },
  {
    "text": "segment registers right 0 C3 you know I'm going to be giving away all this code and I'll just put it on the EI website because it's kind of hard to",
    "start": "2077839",
    "end": "2083040"
  },
  {
    "text": "explain this without just seeing the code and I want to get to the demo because I'm getting all giddy about",
    "start": "2083040",
    "end": "2089200"
  },
  {
    "text": "it all right so the pay the payload itself this is like um originally was like a little 256 by intro written by",
    "start": "2089560",
    "end": "2096720"
  },
  {
    "start": "2092000",
    "end": "2106000"
  },
  {
    "text": "this this European cat called love see and my boy Derek added some like Nifty EI effects to it and like went old",
    "start": "2096720",
    "end": "2103920"
  },
  {
    "text": "school on it I think it I think it's totally sick so here we",
    "start": "2103920",
    "end": "2109040"
  },
  {
    "text": "go please work all right let's go a full",
    "start": "2124440",
    "end": "2132880"
  },
  {
    "text": "scen",
    "start": "2155800",
    "end": "2158800"
  },
  {
    "text": "isn't that the  and V's",
    "start": "2168680",
    "end": "2173960"
  },
  {
    "text": "back all right any",
    "start": "2173960",
    "end": "2177520"
  },
  {
    "text": "questions no all right thank you",
    "start": "2180680",
    "end": "2184760"
  },
  {
    "text": "guys",
    "start": "2185720",
    "end": "2188720"
  }
]