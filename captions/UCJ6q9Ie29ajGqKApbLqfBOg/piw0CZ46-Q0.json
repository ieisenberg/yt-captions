[
  {
    "text": "so I'm first of all I'm humbly and like humble and humbled and honored to be speaking to you all uh here today um",
    "start": "2679",
    "end": "8440"
  },
  {
    "text": "really excited to be going over what we have uh ready for you guys um first off as far as introductions are concerned my",
    "start": "8440",
    "end": "14759"
  },
  {
    "text": "name is Robert Herrera I'm a senior security consultant at uh NCC group's hardware and embedded team uh presenting",
    "start": "14759",
    "end": "21560"
  },
  {
    "text": "alongside me uh alongside uh with me here today is Alex plaset of NCC groups",
    "start": "21560",
    "end": "27920"
  },
  {
    "text": "EDG so the the talk that we have uh here for you today isn't necessarily just the",
    "start": "27920",
    "end": "33520"
  },
  {
    "text": "Wi-Fi portion itself um it's really just an uh sort of an overall effort that we've put into uh the Sonos devices as a",
    "start": "33520",
    "end": "40920"
  },
  {
    "text": "whole so we'll be going over the Wi-Fi exploitation portion on the Sonos 1 Gen 2 and the secure boot stuff that we have",
    "start": "40920",
    "end": "48360"
  },
  {
    "text": "uh for you guys here today on the era 100 so let's jump into the Wi-Fi exploitation portion on the Sonos",
    "start": "48360",
    "end": "56120"
  },
  {
    "text": "one a little bit of background why did we even attack uh the Sonos 1 Gen 2 via Wi-Fi um so",
    "start": "56120",
    "end": "64198"
  },
  {
    "text": "ncc's EDG had previously done their own research uh they essentially done uh the",
    "start": "64199",
    "end": "69240"
  },
  {
    "text": "research for the sake of Aon to own entry um this uh basically led to them",
    "start": "69240",
    "end": "74600"
  },
  {
    "text": "discovering their own vulnerabilities um and really just coupling that with existing research from researchers like",
    "start": "74600",
    "end": "80360"
  },
  {
    "text": "uh blasty and synactive which led them to ultimately being able to dump software off of the device um and that's",
    "start": "80360",
    "end": "86960"
  },
  {
    "text": "kind of basically where the uh start of wi-fi at least the interest in Wi-Fi it began uh the Wi-Fi driver was basically",
    "start": "86960",
    "end": "94680"
  },
  {
    "text": "one of the uh kernel modules that was uh within this software within this firmware image um they kind of did a",
    "start": "94680",
    "end": "100840"
  },
  {
    "text": "sort of a holistic review of all the kernel modules and noticed that on the Wi-Fi driver the uh kernel module was",
    "start": "100840",
    "end": "106320"
  },
  {
    "text": "compiled without sat cookies which is great um so that's kind of where I stepped in as a sort of subject matter",
    "start": "106320",
    "end": "111719"
  },
  {
    "text": "expert with the uh uh Wi-Fi as far as um uh where we go from there and how we",
    "start": "111719",
    "end": "116759"
  },
  {
    "text": "attack it and if we can find any bugs in the actual kernel module itself uh sort of jumping forward as far as",
    "start": "116759",
    "end": "122680"
  },
  {
    "text": "like what that led to in terms of results uh ultimately we did find a bug uh obviously and the Sonos released",
    "start": "122680",
    "end": "130080"
  },
  {
    "text": "their own respective fix for that in roughly fall or winter of 2023 and mediatech which is the respective uh",
    "start": "130080",
    "end": "137239"
  },
  {
    "text": "kernel modules uh Wi-Fi stack implementation was released in uh just recently in January January",
    "start": "137239",
    "end": "144080"
  },
  {
    "text": "2024 so before we actually look at the uh sort of cool Wi-Fi stuff let's do a",
    "start": "144080",
    "end": "149400"
  },
  {
    "text": "little bit of a background on the uh device itself so obviously if we're going to want to debug this in real time",
    "start": "149400",
    "end": "155760"
  },
  {
    "text": "let's see if maybe Ur is disable uh is is enabled um turns out it was it was",
    "start": "155760",
    "end": "161319"
  },
  {
    "text": "exposed uh TX basically was really fruitful in the sense that we got uh",
    "start": "161319",
    "end": "166720"
  },
  {
    "text": "boot logs and uh sort of uh fast forwarding here a bit we also get Kernel",
    "start": "166720",
    "end": "171920"
  },
  {
    "text": "Panic output which was really helpful for the sake of exploit Dev uh RX we weren't necessarily too interested in it",
    "start": "171920",
    "end": "177920"
  },
  {
    "text": "was disabled uh UB was password predicted and basically everything after the initial boot screen um showed",
    "start": "177920",
    "end": "184400"
  },
  {
    "text": "nothing and we weren't able to interact with it um and then lastly this wi-fi",
    "start": "184400",
    "end": "189560"
  },
  {
    "text": "implementation as far as what it looks like it's not an integrated chipset it's actually a Wi-Fi card that's connected",
    "start": "189560",
    "end": "196000"
  },
  {
    "text": "over a pcie so effectively just the Wi-Fi communication talking to the OS",
    "start": "196000",
    "end": "201120"
  },
  {
    "text": "over your uh pcie bus so again we were able to take",
    "start": "201120",
    "end": "206319"
  },
  {
    "text": "software or firmware images off of these devices at this point so the first things first as far as sort of uh the",
    "start": "206319",
    "end": "212239"
  },
  {
    "text": "attack uh surface and what it is that we had to deal with in terms of security mitigation uh the first thing that we",
    "start": "212239",
    "end": "218159"
  },
  {
    "text": "noticed when we uh extracted the K config was that config randomized base was disabled which is really nice",
    "start": "218159",
    "end": "223799"
  },
  {
    "text": "because we don't have to deal with kslr at that point um next thing again stack",
    "start": "223799",
    "end": "228879"
  },
  {
    "text": "carries stack canaries weren't enabled uh these are r64 Al binaries so we'll be dealing with a 64-bit um address space",
    "start": "228879",
    "end": "237239"
  },
  {
    "text": "uh lastly again as previously mentioned this is a soft stack implementation which is really just a fancy way of saying that the state machine all of the",
    "start": "237239",
    "end": "244480"
  },
  {
    "text": "message handling within the Wi-Fi implementation is going to be handled in this kernel module running uh within the",
    "start": "244480",
    "end": "249959"
  },
  {
    "text": "actual kernel rather than a uh sort of tightly knit integrated uh",
    "start": "249959",
    "end": "256280"
  },
  {
    "text": "chipset so let's pop this kernel module into gedra and see what we can find uh basically first things first uh we want",
    "start": "256280",
    "end": "263199"
  },
  {
    "text": "to we wanted to enumerate the receive functionality uh generically speaking of the uh kernel module what that really",
    "start": "263199",
    "end": "269759"
  },
  {
    "text": "really means is we wanted to understand how when we actually send a raw Wireless payload to this device what specific",
    "start": "269759",
    "end": "276320"
  },
  {
    "text": "functions are actually parsing that uh processing that wireless frame that we're sending to it uh so effectively",
    "start": "276320",
    "end": "281880"
  },
  {
    "text": "what we did was really just use a bunch of uh different techniques and really just basically Bend these functions into",
    "start": "281880",
    "end": "288000"
  },
  {
    "text": "pre- and post authenticated functions that we could access a uh from a pre-authenticated context where we don't",
    "start": "288000",
    "end": "293759"
  },
  {
    "text": "necessarily have to worry about uh you know authenticating with the router with via psk and then B uh um an",
    "start": "293759",
    "end": "301000"
  },
  {
    "text": "authenticated context such that we have to know the psk uh basically what we found was that mediatech organizes these",
    "start": "301000",
    "end": "306680"
  },
  {
    "text": "functions into sanity functions so every respective State machine and every respective sort of uh um uh message",
    "start": "306680",
    "end": "314000"
  },
  {
    "text": "handling protocol is uh handled by these sanity functions uh lastly uh the Sonos machine",
    "start": "314000",
    "end": "321199"
  },
  {
    "text": "does support its own AP mode uh but for all intents and purposes we focused on analyzing this device as a",
    "start": "321199",
    "end": "327360"
  },
  {
    "text": "client so let's jump straight into the um so long story short after looking and",
    "start": "327360",
    "end": "333440"
  },
  {
    "text": "auditing all of these functions one function in particular definitely stood out and that was this WPA pars EAP pole",
    "start": "333440",
    "end": "340039"
  },
  {
    "text": "key data or EA pole key data for brevity sake um so what we can see here um as",
    "start": "340039",
    "end": "346199"
  },
  {
    "text": "far as uh if we can kind of uh highlight some key portions here we see that key",
    "start": "346199",
    "end": "351240"
  },
  {
    "text": "data the second parameter even though it is technically as we'll see here in a bit technically a",
    "start": "351240",
    "end": "357039"
  },
  {
    "text": "decrypted key data that's being decrypted by the actual client itself it's effective it's effectively just a",
    "start": "357039",
    "end": "362759"
  },
  {
    "text": "uh series of information elements and for those of you unaware of what an information elements is it's really just",
    "start": "362759",
    "end": "367880"
  },
  {
    "text": "the basic data structure uh comprised of a one bite type of as far as the Wi-Fi type that uh frame that you're dealing",
    "start": "367880",
    "end": "373880"
  },
  {
    "text": "with a one bite length and followed by the actual value and end of itself that usually corresponds to the uh uh length",
    "start": "373880",
    "end": "381199"
  },
  {
    "text": "that you specify um so the issue here if you haven't already spotted it is the",
    "start": "381199",
    "end": "386400"
  },
  {
    "text": "fact that there's really no input validation uh the length that you see on the first red arrow uh key data or",
    "start": "386400",
    "end": "393479"
  },
  {
    "text": "really just the uh the length field again is being assigned to KD Elan then it's just being subtracted by six no",
    "start": "393479",
    "end": "399680"
  },
  {
    "text": "questions asked then it's being assigned to gtk length on the second red arrow um and then after that there's a nice",
    "start": "399680",
    "end": "405560"
  },
  {
    "text": "little me move um which for those of you unaware and uh this is basically just a",
    "start": "405560",
    "end": "411160"
  },
  {
    "text": "buffer overflow and because gtk buff is initialized on the stack and is 32 bytes and if you don't control the length",
    "start": "411160",
    "end": "416879"
  },
  {
    "text": "that's your your classic stack buffer overflow so also uh I should also mention that",
    "start": "416879",
    "end": "423919"
  },
  {
    "text": "there's um no Max validation on gtk length cool so sort of an overview here",
    "start": "423919",
    "end": "431599"
  },
  {
    "text": "we see that key data key data is really just a a bunch of information elements being processed by a while loop not",
    "start": "431599",
    "end": "437840"
  },
  {
    "text": "pictured here but it's basically just the while loop indiscriminately parsing uh information elements um technically",
    "start": "437840",
    "end": "444280"
  },
  {
    "text": "if we got gtk length to be maybe 255 we can trigger a really large copy that would then overflow gtk buff um and that",
    "start": "444280",
    "end": "452479"
  },
  {
    "text": "would basically allow us to do an overflow so um Let's cross reference this function and see if we can actually",
    "start": "452479",
    "end": "459160"
  },
  {
    "text": "trigger it right we found a bug but can we actually trigger the bug um so first things first uh WPA message sanity so",
    "start": "459160",
    "end": "466159"
  },
  {
    "text": "again these sanity functions is really just the uh parent function that handles a bunch of WPA message parsing and what",
    "start": "466159",
    "end": "473080"
  },
  {
    "text": "that means is uh effectively sort of fast forwarding here um we could have effectively triggered this via",
    "start": "473080",
    "end": "479960"
  },
  {
    "text": "uh sort of outdated to deprecated use of WPA using tkip uh but we chose to use",
    "start": "479960",
    "end": "486159"
  },
  {
    "text": "WPA 2 just to be a little bit more modern um and uh from there we basically",
    "start": "486159",
    "end": "491720"
  },
  {
    "text": "sort of uh surmise that if we establish some sort of WPA2 connection we should",
    "start": "491720",
    "end": "497720"
  },
  {
    "text": "be able to trigger this uh vulnerable function um cool so let's cross",
    "start": "497720",
    "end": "503199"
  },
  {
    "text": "reference from there work our way up a little bit uh cool so we can see here that WPA",
    "start": "503199",
    "end": "509520"
  },
  {
    "text": "message sanity is effectively being called by these peer pair message action functions um and for those of you un",
    "start": "509520",
    "end": "516000"
  },
  {
    "text": "sort of unfamiliar with the actual Wi-Fi protocol uh implementation and like namely the WPA2 handshake uh each one of",
    "start": "516000",
    "end": "522839"
  },
  {
    "text": "these functions corresponds to effectively each handshake packet that's traveling around the air um uh just",
    "start": "522839",
    "end": "529200"
  },
  {
    "text": "until just before you actually successfully authenticate or presumably authenticate so we can see here that we",
    "start": "529200",
    "end": "534959"
  },
  {
    "text": "can sort of start to paint a picture of what we need to expect and what kind of attack we need to do to uh potentially",
    "start": "534959",
    "end": "540760"
  },
  {
    "text": "trigger this uh bug so what we can do is rather than",
    "start": "540760",
    "end": "547079"
  },
  {
    "text": "just do a normal four-way handshake and pass these information uh elements around uh or pass these Wireless packets",
    "start": "547079",
    "end": "553000"
  },
  {
    "text": "around up until uh we associate is um if we uh back up here a little bit",
    "start": "553000",
    "end": "560760"
  },
  {
    "text": "oops uh we see here one of the uh comments that I have here is that we're decrypting in uh incoming data on",
    "start": "560760",
    "end": "566680"
  },
  {
    "text": "message 3 that's typically where the gtk uh uh or the global global temporal key",
    "start": "566680",
    "end": "573240"
  },
  {
    "text": "is usually installed uh so it's usually passed around in uh message three here",
    "start": "573240",
    "end": "579279"
  },
  {
    "text": "so sort of jumping back uh what we can do as far as in TX is concerned is um",
    "start": "579279",
    "end": "585440"
  },
  {
    "text": "maybe we can craft some sort of uh malicious message three in such a way",
    "start": "585440",
    "end": "591279"
  },
  {
    "text": "that we can trigger this bug and a really easy way to do that as we discovered was uh just using WPA",
    "start": "591279",
    "end": "596600"
  },
  {
    "text": "supplicants and WPA supplicant also supports AP mode which is really useful for us um and that's exactly what we did",
    "start": "596600",
    "end": "602680"
  },
  {
    "text": "we just patched the message 3 portion of that code and we were basically able to trigger the bug so before we actually",
    "start": "602680",
    "end": "610079"
  },
  {
    "text": "show you the output of whether or not we were successful in actually triggering it and controlling the registers that we",
    "start": "610079",
    "end": "615800"
  },
  {
    "text": "thought we control let's go over the actual stack layout uh we can see here that uh basically um the main vulnerable",
    "start": "615800",
    "end": "624079"
  },
  {
    "text": "function has a stack size stack frame size of about hex 140 uh we can see that the vulnerable buffer",
    "start": "624079",
    "end": "630079"
  },
  {
    "text": "is about uh SP plus 70 uh hex 78 um and if we triggered our uh overflow",
    "start": "630079",
    "end": "636880"
  },
  {
    "text": "basically an uncontrolled length um that could presumably mean that we leak over",
    "start": "636880",
    "end": "642079"
  },
  {
    "text": "and start corrupting the parent uh uh stack frames uh uh yeah the parent stack",
    "start": "642079",
    "end": "647639"
  },
  {
    "text": "frame so we can do some simple math here if this information element can only be",
    "start": "647639",
    "end": "653040"
  },
  {
    "text": "255 bytes big and we know the stack frame size of the uh vulnerable function",
    "start": "653040",
    "end": "659079"
  },
  {
    "text": "we can basically just subtract where that buffer starts by the uh uh actual",
    "start": "659079",
    "end": "664760"
  },
  {
    "text": "stack frame itself which results in basically hex C8 bytes until we actually start or till we cross the boundary into",
    "start": "664760",
    "end": "671040"
  },
  {
    "text": "the uh parent stack frames calling function um and that leaves us with about hex 37 bytes so since this is a",
    "start": "671040",
    "end": "678120"
  },
  {
    "text": "64-bit implementation it's about seven registers um so let's send it and it",
    "start": "678120",
    "end": "683160"
  },
  {
    "text": "looks like we actually hit something we got Kernel Panic output on uart that's great",
    "start": "683160",
    "end": "689760"
  },
  {
    "text": "and it looks like we control the registers that we think we do uh that we thought we did rather uh we control the PC we control uh x19 through x23 so",
    "start": "689760",
    "end": "698360"
  },
  {
    "text": "effectively seven registers um this is there's some more there's a lot more detail uh to be covered here um and I",
    "start": "698360",
    "end": "704120"
  },
  {
    "text": "employ to read the white paper associated with this but long story short uh we did basically control uh a",
    "start": "704120",
    "end": "710880"
  },
  {
    "text": "complete seven registers rather than a uh uh basically an almost seven registers in the sense that the MSB of",
    "start": "710880",
    "end": "717079"
  },
  {
    "text": "x23 was always set to FF uh which for all intensive purposes which was useful for us since we ended up using it as a",
    "start": "717079",
    "end": "723320"
  },
  {
    "text": "sort of an address uh Gadget um also we did cause some Downstream corruption but",
    "start": "723320",
    "end": "729040"
  },
  {
    "text": "we ended up mitigating that with uh by adding additional information elements such that uh when the while loop",
    "start": "729040",
    "end": "734800"
  },
  {
    "text": "effectively just uh indiscriminately parse these information elements we were able to reiterate that while loop and",
    "start": "734800",
    "end": "741680"
  },
  {
    "text": "avoid Downstream corruption so okay well we can trigger",
    "start": "741680",
    "end": "746760"
  },
  {
    "text": "the bug uh but how do we exploit this that we only have seven registers um and",
    "start": "746760",
    "end": "751800"
  },
  {
    "text": "at the time uh Alex was really interested in uh exploiting this and and gaining control of the device as fast as",
    "start": "751800",
    "end": "758639"
  },
  {
    "text": "possible uh in the sense that If This Were A Ponto own entry we want this to be a reliable and B fairly quick um so",
    "start": "758639",
    "end": "766560"
  },
  {
    "text": "we kind of came up with a wild idea what if we got rce in one packet is that even possible um and if that is possible how",
    "start": "766560",
    "end": "773320"
  },
  {
    "text": "do we do that with seven controlled registers and even if we do do that does the entire actual payload as far as",
    "start": "773320",
    "end": "779360"
  },
  {
    "text": "additional rck gadgets and Shell Code fit um secondly once we control the device uh what is um I guess handshake",
    "start": "779360",
    "end": "788199"
  },
  {
    "text": "failure in the sense that if we want to uh you know take control of the device",
    "start": "788199",
    "end": "793959"
  },
  {
    "text": "and we're causing some sort we're trying to avoid Downstream corruption which then induces handshake failure how do we",
    "start": "793959",
    "end": "799279"
  },
  {
    "text": "recover from that do we just reconnect um next as far as a overview",
    "start": "799279",
    "end": "805760"
  },
  {
    "text": "of like these ideas is concerned um let's go over the actual uh I guess um",
    "start": "805760",
    "end": "812000"
  },
  {
    "text": "architecture of the wireless packet that we're dealing with in general uh so we know roughly uh that uh WPA2 in terms of",
    "start": "812000",
    "end": "819600"
  },
  {
    "text": "Max packet size according to spec is around 2K bytes or around 2,300 bytes um",
    "start": "819600",
    "end": "824959"
  },
  {
    "text": "and next sort of like a wink wink nudge nudge situation here if we were to get a reference to this Wireless frame p uh",
    "start": "824959",
    "end": "831360"
  },
  {
    "text": "Wireless frame that we're sending as a payload to this clients um so if we're able to get some sort of pointer how can",
    "start": "831360",
    "end": "837360"
  },
  {
    "text": "we manipulate this Wireless frame to include additional data well um maybe we can use unused parameters in this Frame",
    "start": "837360",
    "end": "844519"
  },
  {
    "text": "uh maybe like the kyc or key ID to inject additional addresses at that location and offset um next even though",
    "start": "844519",
    "end": "852440"
  },
  {
    "text": "our uh payload is included as encrypted key data there's nothing really stopping us from uh appending additional",
    "start": "852440",
    "end": "858880"
  },
  {
    "text": "unencrypted data such that when we get a reference to this Wireless frame payload in memory uh we can use that for",
    "start": "858880",
    "end": "864079"
  },
  {
    "text": "additional R Gadget space and subsequently Shell Code as well so",
    "start": "864079",
    "end": "869680"
  },
  {
    "text": "let's go over the actual stack layout and how we ended up manipulating that to get uh to make additional room such that",
    "start": "869680",
    "end": "875639"
  },
  {
    "text": "um we can do a little bit more rather than just control only seven registers um some considerations to sort of review",
    "start": "875639",
    "end": "881600"
  },
  {
    "text": "here we don't have kslr which means deterministic uh Gadget offsets uh stat canaries aren't enabled which is great",
    "start": "881600",
    "end": "887959"
  },
  {
    "text": "because we basically just control the PC as we've seen uh but we do have to deal with a non-executable heap um so from",
    "start": "887959",
    "end": "895199"
  },
  {
    "text": "there as far as uh useful things to consider uh by the time we hit this",
    "start": "895199",
    "end": "900560"
  },
  {
    "text": "vulnerable function um we're going to corrupt the calling uh stack frame uh",
    "start": "900560",
    "end": "906040"
  },
  {
    "text": "stack frames uh function epilog and registers that are associated with it um",
    "start": "906040",
    "end": "911120"
  },
  {
    "text": "and what ends up happening there is effectively right before we pop and hit our vulnerable uh our uh controlled PC",
    "start": "911120",
    "end": "918959"
  },
  {
    "text": "we end up setting our stack pointer to the WPA message sties calling parent function and at that point from a crash",
    "start": "918959",
    "end": "926160"
  },
  {
    "text": "context the second we crash a very useful uh pointer exists about hex 18",
    "start": "926160",
    "end": "931560"
  },
  {
    "text": "above us that is literally just pointing to the wireless frame payload that we were talking about so with that in mind let's go over",
    "start": "931560",
    "end": "939639"
  },
  {
    "text": "the exploitation strategy in general so first we'll prioritize acquiring that EA",
    "start": "939639",
    "end": "944759"
  },
  {
    "text": "EA pole pointer from memory uh we'll use uh some additional space that we created",
    "start": "944759",
    "end": "950600"
  },
  {
    "text": "um in that initial uh and that initial overflow and treat",
    "start": "950600",
    "end": "955639"
  },
  {
    "text": "that as some initial sort of Ro drop gadgets that we ejected rather than just use it as scrap space which gives us a",
    "start": "955639",
    "end": "961319"
  },
  {
    "text": "little bit more breathing room um next uh presumably we'll be able to then uh",
    "start": "961319",
    "end": "967880"
  },
  {
    "text": "basically issue a bunch of R gadgets hit trigger our Shell Code and take control of the device the next thing we have to",
    "start": "967880",
    "end": "972920"
  },
  {
    "text": "worry about is continuation of execution which is really just you know cleaning up make sure we don't crash the device and uh basically enabling post",
    "start": "972920",
    "end": "979800"
  },
  {
    "text": "exploitation steps at that point um the only thing after that is really just initiating the handshake normally after",
    "start": "979800",
    "end": "985519"
  },
  {
    "text": "that such that um we can control over when and basically uh you know do some",
    "start": "985519",
    "end": "991360"
  },
  {
    "text": "post post exploitation fund stuff after that so let's do a sort of review of how",
    "start": "991360",
    "end": "996759"
  },
  {
    "text": "we turn seven registers into effectively a fully controlled stack wirelessly um",
    "start": "996759",
    "end": "1002240"
  },
  {
    "text": "this is sort of a non-exhaustive review of key gadgets that enabled to enabled us to do that so firstly we need to",
    "start": "1002240",
    "end": "1009440"
  },
  {
    "text": "retrieve that EA EA pull pointer for memory easy enough next again as",
    "start": "1009440",
    "end": "1014759"
  },
  {
    "text": "previously mentioned we just adjust the stack pointer to point to uh the beginning of our uh overflow payload",
    "start": "1014759",
    "end": "1020839"
  },
  {
    "text": "such that we uh give ourselves a little bit more Breathing Room next we uh prioritize saving saving",
    "start": "1020839",
    "end": "1026678"
  },
  {
    "text": "the stack pointer uh this is going to help for continuation of execution lastly all we need to do since",
    "start": "1026679",
    "end": "1032720"
  },
  {
    "text": "we have a reference to the EA pole pointer is Just Adjust where we're pointing in that pointer to point to the",
    "start": "1032720",
    "end": "1038319"
  },
  {
    "text": "additional rot payload and Shell Code that we were talking about and then lastly just find one last Gadget and",
    "start": "1038319",
    "end": "1044360"
  },
  {
    "text": "solidify the fact that we now have a fully controlled stack at that point",
    "start": "1044360",
    "end": "1050000"
  },
  {
    "text": "one thing to note though we have a non-executable heap so we have to deal with that so how do we deal with that so",
    "start": "1051720",
    "end": "1059400"
  },
  {
    "text": "we have this uh we have the fact that we uh we don't have KLR enabled which means",
    "start": "1059400",
    "end": "1066559"
  },
  {
    "text": "again deterministic offsets and if we have the kernel image all we really have to do is load that into something like",
    "start": "1066559",
    "end": "1072320"
  },
  {
    "text": "gedra or Ida uh enumerate the functions that are we that we're interested in and start using those uh basically as as as",
    "start": "1072320",
    "end": "1079600"
  },
  {
    "text": "we as we see fit um one function in particular allowed us to basically very easily uh set the um Heap as executable",
    "start": "1079600",
    "end": "1087360"
  },
  {
    "text": "which was set memory X and all we really do is just use set memory X in the sense that we just provide the E pull pointer",
    "start": "1087360",
    "end": "1093880"
  },
  {
    "text": "that we just previously got to set memory X and we basically have a executable Heap at that",
    "start": "1093880",
    "end": "1100520"
  },
  {
    "text": "point so next thing we have the fact that you know we have control of the",
    "start": "1100520",
    "end": "1106840"
  },
  {
    "text": "device at least the initial portions of it um but what do we do after that how do we actually gain control of the device",
    "start": "1106840",
    "end": "1112799"
  },
  {
    "text": "from a holistic sense if we wanted to maybe execute shell commands or maybe create a reverse shell something like",
    "start": "1112799",
    "end": "1119039"
  },
  {
    "text": "that um well we can use a sort of very popular uh at least that an anecdotally",
    "start": "1119039",
    "end": "1124559"
  },
  {
    "text": "popular API known as a call user mode Helper and long story short what that enables us to do is just uh issue uh",
    "start": "1124559",
    "end": "1132400"
  },
  {
    "text": "shell commands from a kernel context um the only thing we need to do is just make sure that we don't kill or block",
    "start": "1132400",
    "end": "1137799"
  },
  {
    "text": "that thread rather um and we don't Jam uh basically said it as non-blocking and",
    "start": "1137799",
    "end": "1142880"
  },
  {
    "text": "we can be smart and reuse existing code that's in the kernel that uh specifies an emvp or environment variables in uh",
    "start": "1142880",
    "end": "1149840"
  },
  {
    "text": "for us um which basically allows us to execute Shell Code uh uh or shell",
    "start": "1149840",
    "end": "1155200"
  },
  {
    "text": "commands remotely I should say um but what happens after that what do we do do we just create a a remote shell um",
    "start": "1155200",
    "end": "1162520"
  },
  {
    "text": "that's basically where post exploitation comes into play um and I'll leave Alex to talk about that thank you",
    "start": "1162520",
    "end": "1169440"
  },
  {
    "text": "so yeah basically for post exploitation then um sonus has actually has",
    "start": "1169440",
    "end": "1175799"
  },
  {
    "text": "implemented some protections so it's not just as straightforward as just dropping a binary and then executing it they've",
    "start": "1175799",
    "end": "1182039"
  },
  {
    "text": "implemented um protection against remounting the partitions as uh as",
    "start": "1182039",
    "end": "1187600"
  },
  {
    "text": "executable and that's implemented within the Kel itself so but because we've got",
    "start": "1187600",
    "end": "1192720"
  },
  {
    "text": "kernel mode code execution with our Shell Code we can basically locate the",
    "start": "1192720",
    "end": "1199200"
  },
  {
    "text": "there's a there's a kernel variable which essentially States whether um partitions are allowed to be remounted",
    "start": "1199200",
    "end": "1205159"
  },
  {
    "text": "as executable or not so when the system boots up it essentially sets the uh this",
    "start": "1205159",
    "end": "1210640"
  },
  {
    "text": "to be zero um so it can do that but then um sorry it's it's set to one but then",
    "start": "1210640",
    "end": "1217280"
  },
  {
    "text": "it when it boots up it's set to zero so you can't remount the partitions as executable but we can just basically",
    "start": "1217280",
    "end": "1222880"
  },
  {
    "text": "patch that back to being uh to being one and that gives us um executable uh",
    "start": "1222880",
    "end": "1228240"
  },
  {
    "text": "binary so what what binaries do we drop well sers have actually removed um common",
    "start": "1228240",
    "end": "1235840"
  },
  {
    "text": "things like busy box talet from the device itself uh but we can drop our own",
    "start": "1235840",
    "end": "1241280"
  },
  {
    "text": "um compiled busy box to the device um but the next challenge we have is that",
    "start": "1241280",
    "end": "1246799"
  },
  {
    "text": "the um the the ETC file system is also mounted as read only and we haven't",
    "start": "1246799",
    "end": "1252880"
  },
  {
    "text": "managed to crack the shadow file password uh the shadow file password hash um and ideally we want to be able",
    "start": "1252880",
    "end": "1260120"
  },
  {
    "text": "to change that use a known known hash value for the P for a password we know",
    "start": "1260120",
    "end": "1265280"
  },
  {
    "text": "and then um use that in busy box tnet uh so what we do is we Mount the",
    "start": "1265280",
    "end": "1271520"
  },
  {
    "text": "partition as a a bind Mount and essentially a a copy of the ETC file",
    "start": "1271520",
    "end": "1277039"
  },
  {
    "text": "system put our own hash in there and execute busy box which we've just dropped onto the device itself and uh",
    "start": "1277039",
    "end": "1284880"
  },
  {
    "text": "and at that point the remod the partitions is executable which we now allowed to do is we patched it in the",
    "start": "1284880",
    "end": "1290159"
  },
  {
    "text": "kernel and Rental it so that's uh that would give you a shell on the son us devices but ideally",
    "start": "1290159",
    "end": "1296960"
  },
  {
    "text": "we wanted to do something more interesting we wanted to be able to demonstrate impact uh and do a cool demo",
    "start": "1296960",
    "end": "1303840"
  },
  {
    "text": "so we thought what we it would be really cool if we could capture audio from the device like so all physical like all",
    "start": "1303840",
    "end": "1310520"
  },
  {
    "text": "audio within the proximity of the of the Sonos device um so we did some research",
    "start": "1310520",
    "end": "1315799"
  },
  {
    "text": "into how the Sonos microphone phones work and how the audio capture works and",
    "start": "1315799",
    "end": "1322320"
  },
  {
    "text": "it turns out it was just using the Linux ala sound architecture and I did some",
    "start": "1322320",
    "end": "1328039"
  },
  {
    "text": "reverse engineering of the of the Shar libraries for that um well sones",
    "start": "1328039",
    "end": "1333200"
  },
  {
    "text": "libraries which we using that and found out um that there was a microphone",
    "start": "1333200",
    "end": "1338320"
  },
  {
    "text": "capture device which could be used but when I started capturing the uh there was no actual data um from the captures",
    "start": "1338320",
    "end": "1346000"
  },
  {
    "text": "I was like oh that's kind of strange I wonder what's going on here but it turns out that sonas had likely um muted the",
    "start": "1346000",
    "end": "1353320"
  },
  {
    "text": "microphones by default and it was necessary to open handle to their",
    "start": "1353320",
    "end": "1358679"
  },
  {
    "text": "microphone uh and then uh issue an un unmute to actually gain capture of the",
    "start": "1358679",
    "end": "1364760"
  },
  {
    "text": "the audio data so we can just demonstrate that now with a record one of the ELA utilities uh to capture the",
    "start": "1364760",
    "end": "1371840"
  },
  {
    "text": "data um now this this is cool like we could do that by the command line but",
    "start": "1371840",
    "end": "1377200"
  },
  {
    "text": "ideally we wanted to develop a custom implant as well uh so we developed an implant in Rust so this",
    "start": "1377200",
    "end": "1383640"
  },
  {
    "text": "could be done um remotely as well so I've got a demo of this which hopefully",
    "start": "1383640",
    "end": "1392200"
  },
  {
    "text": "should work uh it's got sound in the demo so this is our physical setup on the",
    "start": "1392200",
    "end": "1398360"
  },
  {
    "text": "left we have an alpha card which is going to be used to run the malicious access point which the Sonos device will",
    "start": "1398360",
    "end": "1404000"
  },
  {
    "text": "connect to on the right we have the Sonos device which will be exploding now these devices are are physically closed",
    "start": "1404000",
    "end": "1410760"
  },
  {
    "text": "but this attack can be performed over the full range of Wi-Fi we're going to be using WPA",
    "start": "1410760",
    "end": "1416600"
  },
  {
    "text": "supplicant WPA supplicant is the perfect tool to quickly test theories out and",
    "start": "1416600",
    "end": "1422760"
  },
  {
    "text": "can be used to change the EAP Paul message 3 logic to include our malicious",
    "start": "1422760",
    "end": "1428840"
  },
  {
    "text": "information element from here we would be able we would assume that Sonos",
    "start": "1428840",
    "end": "1434039"
  },
  {
    "text": "device has already been provisioned to associate to the access point",
    "start": "1434039",
    "end": "1439159"
  },
  {
    "text": "or the attacker would know the psk of at which the Sonos was device was",
    "start": "1439159",
    "end": "1445080"
  },
  {
    "text": "connecting to on the left side we have our patch",
    "start": "1445080",
    "end": "1453320"
  },
  {
    "text": "WPA supplicant or Rogue access point which is going to deliver the the explode to the Sonos once the device",
    "start": "1453320",
    "end": "1461159"
  },
  {
    "text": "connects on the on the right side we basically have a simple HTTP server",
    "start": "1461159",
    "end": "1466840"
  },
  {
    "text": "listening which when the um exploit triggers then we will see a connect",
    "start": "1466840",
    "end": "1474720"
  },
  {
    "text": "back now we can see the dishonest device is connected and the exploer has triggered successfully as previously",
    "start": "1476520",
    "end": "1483640"
  },
  {
    "text": "mentioned the xlo will trigger an underflow when calculating the key length from the malicious EAP pul frame",
    "start": "1483640",
    "end": "1490000"
  },
  {
    "text": "and lead to a stack buffer overflow we we build our rock payloads as previously mentioned into packet",
    "start": "1490000",
    "end": "1496640"
  },
  {
    "text": "construction sending the information element in order to trigger the vulnerability we also add extraneous",
    "start": "1496640",
    "end": "1503159"
  },
  {
    "text": "data to the packet to allow for more space for the r and Shell Code payload once the exploit is triggered we need to",
    "start": "1503159",
    "end": "1509760"
  },
  {
    "text": "allow for the EIP pole four-way handshake to complete successfully by resorting to the normal AES payload we",
    "start": "1509760",
    "end": "1517200"
  },
  {
    "text": "also need to make sure that our exploiter continuation of execution to ensure that the device does not",
    "start": "1517200",
    "end": "1523480"
  },
  {
    "text": "panic now on the right we can see that our our p",
    "start": "1523480",
    "end": "1528880"
  },
  {
    "text": "is being triggered and the the r and shell code is being executed successfully we can see it pull down the",
    "start": "1528880",
    "end": "1535600"
  },
  {
    "text": "implant sh script and executed which fetches our post exploitation",
    "start": "1535600",
    "end": "1542039"
  },
  {
    "text": "tooling finally we can see that busy box is being execute busy box tet is being",
    "start": "1542039",
    "end": "1547320"
  },
  {
    "text": "executed and we can now turn it into our device to get an interactive shell we do",
    "start": "1547320",
    "end": "1552960"
  },
  {
    "text": "a we list the file system and we cat a file to demonstrate the version",
    "start": "1552960",
    "end": "1561000"
  },
  {
    "text": "number now we can see that the sonus implant has been installed on the device",
    "start": "1561520",
    "end": "1566600"
  },
  {
    "text": "and we can click the start microphone capture to record any audio within the vicinity of the",
    "start": "1566600",
    "end": "1573840"
  },
  {
    "text": "device so now I've started the audio capture on the on the implant all the",
    "start": "1576919",
    "end": "1583320"
  },
  {
    "text": "audio within the room should now be captured so if I'm speaking into the device it should it should be",
    "start": "1583320",
    "end": "1591679"
  },
  {
    "text": "recorded now we can click download microphone capture on the on the UI implant of the implant and they should",
    "start": "1592279",
    "end": "1599679"
  },
  {
    "text": "now download the microphone capture now we can play back what the",
    "start": "1599679",
    "end": "1605480"
  },
  {
    "text": "audio which we've captured and downloaded from from the device so now I've started the audio",
    "start": "1605480",
    "end": "1613000"
  },
  {
    "text": "capture on the on the implant all the audio within the room should now be Capt",
    "start": "1613000",
    "end": "1618279"
  },
  {
    "text": "caped so if I'm speaking into the device it should it should be",
    "start": "1618279",
    "end": "1624360"
  },
  {
    "text": "recorded as you can see we've we've captured our our audio from the",
    "start": "1624360",
    "end": "1630919"
  },
  {
    "text": "microphone thanks okay so that was the first part of the talk about Sonos one and the Wi-Fi exploitation we've now got",
    "start": "1636720",
    "end": "1642799"
  },
  {
    "text": "a second part of the talk which is looking at the sons's more recent device which is the era 100",
    "start": "1642799",
    "end": "1648760"
  },
  {
    "text": "and a secure boob bypass uh which on this so to some background um as Robert",
    "start": "1648760",
    "end": "1654799"
  },
  {
    "text": "said we originally started doing all this Sonos research for pwn to own we were intention we were trying to compete",
    "start": "1654799",
    "end": "1660519"
  },
  {
    "text": "at Pon to own but uh Sonos released a new device halfway through well like as",
    "start": "1660519",
    "end": "1667240"
  },
  {
    "text": "we were doing our research and and the new device the ero 100 became the target",
    "start": "1667240",
    "end": "1672320"
  },
  {
    "text": "at um P to own and it turned out that the exploit which we' just written wouldn't work on the ear1 100 because it",
    "start": "1672320",
    "end": "1678960"
  },
  {
    "text": "was using a different Wi-Fi driver which was a bit of a shame but we so we started looking at the era 100",
    "start": "1678960",
    "end": "1686200"
  },
  {
    "text": "instead um now this research as well it was performed with uh by Ilia zurf he",
    "start": "1686200",
    "end": "1693799"
  },
  {
    "text": "found the the some of the their secure boot bypass bugs and while he was previously working at NCC but",
    "start": "1693799",
    "end": "1700240"
  },
  {
    "text": "unfortunately he's now he's no longer with NCC um so the issues have now been",
    "start": "1700240",
    "end": "1706200"
  },
  {
    "text": "they've been fixed by Sonos as well they got fixed at the same time as as um as",
    "start": "1706200",
    "end": "1711840"
  },
  {
    "text": "the Wi-Fi vulnerability was patched on the Sonos one so the secure boot bypass",
    "start": "1711840",
    "end": "1717240"
  },
  {
    "text": "how this works is that basically um we first located the uart on on the board",
    "start": "1717240",
    "end": "1723159"
  },
  {
    "text": "uh to get some kind of information gathering we located it was the um amlogic s767 which is a very similar uh",
    "start": "1723159",
    "end": "1732240"
  },
  {
    "text": "device to the to the previous um Sonos one and blasty had created some tools uh",
    "start": "1732240",
    "end": "1739039"
  },
  {
    "text": "previously for downloading OTA updates and decrypting the updates but the open",
    "start": "1739039",
    "end": "1746480"
  },
  {
    "text": "source version of these tooling it it didn't support it only supported the air the Sonos one devices and generation one",
    "start": "1746480",
    "end": "1753440"
  },
  {
    "text": "so I added support to this to uh to download the generation 2 era 100 um",
    "start": "1753440",
    "end": "1759480"
  },
  {
    "text": "images but we had we had a problem that we we weren't able to decrypt the uh the",
    "start": "1759480",
    "end": "1765080"
  },
  {
    "text": "these OTA images because they're using key which are only accessible within the",
    "start": "1765080",
    "end": "1770360"
  },
  {
    "text": "arm el3 um environment which we didn't have at this point so uh the research",
    "start": "1770360",
    "end": "1777880"
  },
  {
    "text": "progressed by locate we we thought we were going to start by looking at the ammc on the um on the device on the a",
    "start": "1777880",
    "end": "1785519"
  },
  {
    "text": "100 and um it turns out it's mostly encrypted they've also got um secure B",
    "start": "1785519",
    "end": "1790960"
  },
  {
    "text": "implemented in there um but we and we really wanted to be able to modify the",
    "start": "1790960",
    "end": "1797240"
  },
  {
    "text": "ammc uh and be able to test changes and and try experiments and so on so that we",
    "start": "1797240",
    "end": "1803799"
  },
  {
    "text": "didn't really want to be like desoldering and resoldering all the time because it's kind of a a slow process so",
    "start": "1803799",
    "end": "1809640"
  },
  {
    "text": "we were trying to enable emmc in circuit programming so to do this we only really",
    "start": "1809640",
    "end": "1814760"
  },
  {
    "text": "need to identify the the CMD the clock line and the data line uh from the from",
    "start": "1814760",
    "end": "1820840"
  },
  {
    "text": "the ammc um and these weren't marked on the silk screen on the PCB so to do this",
    "start": "1820840",
    "end": "1827039"
  },
  {
    "text": "we basically probed the termination resistors and the test pads near the near the ammc to the sock to determine",
    "start": "1827039",
    "end": "1833519"
  },
  {
    "text": "whe uh to to try locate these uh using logic analyzer and from our logic",
    "start": "1833519",
    "end": "1840080"
  },
  {
    "text": "analyzer captures we could see that the the clock signal uh that was pretty obvious because it was a repeating clock",
    "start": "1840080",
    "end": "1845919"
  },
  {
    "text": "signal uh and command we could find but and but the data lines and so on weren't super obvious uh so from this we could",
    "start": "1845919",
    "end": "1854360"
  },
  {
    "text": "basically uh identify three out of four of the data pins we only really need uh",
    "start": "1854360",
    "end": "1859600"
  },
  {
    "text": "one data pen. zero for actually doing one bit read and right and um so yeah we",
    "start": "1859600",
    "end": "1866399"
  },
  {
    "text": "can use a logic analyzer we can attach to these to these locations and we can see where the uh data which has F first",
    "start": "1866399",
    "end": "1873559"
  },
  {
    "text": "got the data on and that's the that's zero the other problem we had was that the ammc talks to the sock and there",
    "start": "1873559",
    "end": "1880919"
  },
  {
    "text": "there's some uh the interference because we're powering it from the uh the sock itself um and so we we needed to keep",
    "start": "1880919",
    "end": "1889000"
  },
  {
    "text": "the uh device held uh in the boot ROM as well so to do this we located the the in",
    "start": "1889000",
    "end": "1894480"
  },
  {
    "text": "pin uh as you can see it was bit of like fine fine soldering uh fine micro soldering to to do",
    "start": "1894480",
    "end": "1901039"
  },
  {
    "text": "this um so the issues which were identified the first issue was the like",
    "start": "1901039",
    "end": "1906639"
  },
  {
    "text": "Sonos are using like a hardened UB implementation they've actually done quite a few rounds of hardening because",
    "start": "1906639",
    "end": "1912639"
  },
  {
    "text": "people have found vulnerabilities in in the E uh before uh they've locked it down with a password they've restricted",
    "start": "1912639",
    "end": "1918880"
  },
  {
    "text": "the commands they removed dangerous commands and so on from it we had the plain text of the from the Suns one",
    "start": "1918880",
    "end": "1924720"
  },
  {
    "text": "device and when our hypothesis was that the uh the uboot would be very similar",
    "start": "1924720",
    "end": "1930039"
  },
  {
    "text": "on the era 100 it would likely be the same code base um and uh yeah because",
    "start": "1930039",
    "end": "1937320"
  },
  {
    "text": "the the it's encrypted using the a 100 one is encrypted using K within the al3 which we don't have at this point so",
    "start": "1937320",
    "end": "1945480"
  },
  {
    "text": "looking at the UR uh output earlier identified that the that the um there",
    "start": "1945480",
    "end": "1952240"
  },
  {
    "text": "was an error message which basically said bad CRC output uh using default environment which is basically showing",
    "start": "1952240",
    "end": "1959080"
  },
  {
    "text": "that the it's trying to load the ubit environment uh from the ammc and they",
    "start": "1959080",
    "end": "1964159"
  },
  {
    "text": "haven't defined this config NV equals equals no variable when building the",
    "start": "1964159",
    "end": "1969880"
  },
  {
    "text": "uboot so that means we can set the boot command in ubot so this is what the the",
    "start": "1969880",
    "end": "1975679"
  },
  {
    "text": "ubot chain uh looks like the boot chain looks like basically uh boot command is",
    "start": "1975679",
    "end": "1981919"
  },
  {
    "text": "is set to Sonos Boot and then Sonos boot will call into boot Boot and boot ham",
    "start": "1981919",
    "end": "1987399"
  },
  {
    "text": "will finally boot the Linux kernel and boot into the Linux kernel so Sonos boot",
    "start": "1987399",
    "end": "1993039"
  },
  {
    "text": "is uh custom code by Sonos which is there to uh validate and uh is used to",
    "start": "1993039",
    "end": "2000320"
  },
  {
    "text": "validate the the their kernel and pass the uh pass it on to boot M and then",
    "start": "2000320",
    "end": "2005600"
  },
  {
    "text": "boot M uses this this UB environment and passes it to the Linux kernel before",
    "start": "2005600",
    "end": "2011080"
  },
  {
    "text": "booting the Linux kernel but there's a there was a vulnerability here where the inos boot the set end uh function wasn't",
    "start": "2011080",
    "end": "2020679"
  },
  {
    "text": "uh validating its return code so you could basically but how do we actually",
    "start": "2020679",
    "end": "2025760"
  },
  {
    "text": "exploit this well there's a little unknown feature of of uboot which allows",
    "start": "2025760",
    "end": "2032440"
  },
  {
    "text": "you to set the uh boogs to be um read only you can use",
    "start": "2032440",
    "end": "2039360"
  },
  {
    "text": "colon Sr and that basically it marks them is read only and then this will make the uh setm fail which would",
    "start": "2039360",
    "end": "2047000"
  },
  {
    "text": "potentially allow us to set our own boot ARS so if we when Sonos boot proceeds",
    "start": "2047000",
    "end": "2052960"
  },
  {
    "text": "into boot M um we can uh we can now control the boots uh passed to to this",
    "start": "2052960",
    "end": "2059760"
  },
  {
    "text": "and the and the Linux kernel but what we really want code execution and we want code execution in the colal context so",
    "start": "2059760",
    "end": "2066720"
  },
  {
    "text": "to do this um we can use the init Rd functionality and specify init Rd equals an address and a",
    "start": "2066720",
    "end": "2074200"
  },
  {
    "text": "size but we have a problem because we don't know where we can store what address we can store our our custom in r",
    "start": "2074200",
    "end": "2082158"
  },
  {
    "text": "at um so we Sonos have implemented a",
    "start": "2082159",
    "end": "2087280"
  },
  {
    "text": "custom image header um and in this Custom Image header the it's always",
    "start": "2087280",
    "end": "2092839"
  },
  {
    "text": "located at a fixed address and but and in the some image header it's got a um",
    "start": "2092839",
    "end": "2100119"
  },
  {
    "text": "uh like a structure defining the magic bites the version and this thing called the kernel offset but the kernel offset",
    "start": "2100119",
    "end": "2107640"
  },
  {
    "text": "it's normally zx40 but it's not actually trusted it's not actually validated as",
    "start": "2107640",
    "end": "2112720"
  },
  {
    "text": "part of the SK implementation so if we can um set this Kel offset to be something else then maybe we can um",
    "start": "2112720",
    "end": "2120320"
  },
  {
    "text": "inject in the in a ID at this fixed location and this is what we did we basically increased the Kel offset put",
    "start": "2120320",
    "end": "2127200"
  },
  {
    "text": "it into the slack space reflashed it to the ammc using our in circuit",
    "start": "2127200",
    "end": "2132280"
  },
  {
    "text": "programming and that way all the signature checks and the skoo check still validated",
    "start": "2132280",
    "end": "2138920"
  },
  {
    "text": "correctly so this is a demo of the secure boot bypass as well",
    "start": "2138920",
    "end": "2145119"
  },
  {
    "text": "um I think this is playing so normally when the device",
    "start": "2145119",
    "end": "2152319"
  },
  {
    "text": "boots up um you would get your output but then when it boots in uh the",
    "start": "2152319",
    "end": "2157640"
  },
  {
    "text": "wouldn't be a shell it would L it would stop at uh um at the after you boot and",
    "start": "2157640",
    "end": "2164640"
  },
  {
    "text": "um we can basically see now we've got a rude shell from our init ID as well and",
    "start": "2164640",
    "end": "2170000"
  },
  {
    "text": "we've we've inside of our init ID we've we've uh created a custom driver and",
    "start": "2170000",
    "end": "2175079"
  },
  {
    "text": "we're we're now loading this custom driver uh which was uh based on uh blast's previous presentation at hack in",
    "start": "2175079",
    "end": "2181680"
  },
  {
    "text": "the box and we've just recompiled it for the ER 100 and this is to uh exploit al3",
    "start": "2181680",
    "end": "2188280"
  },
  {
    "text": "which I'm going to talk about in a second so now we've got colel mode to code execution and we uh in on the air",
    "start": "2188280",
    "end": "2195359"
  },
  {
    "text": "100 uh persistently across boots across the device so the final thing is that thank",
    "start": "2195359",
    "end": "2204079"
  },
  {
    "text": "you the final thing is el3 exploitation so blasty found a way to",
    "start": "2204079",
    "end": "2210400"
  },
  {
    "text": "exploit the al3 secure monitor mode implementation on the uh Sonos one devices um when we bought the A1 00 it",
    "start": "2210400",
    "end": "2218319"
  },
  {
    "text": "turned out it was actually still vulnerable to this uh the factory device out of the box which we purchased from",
    "start": "2218319",
    "end": "2224200"
  },
  {
    "text": "the store so Sonos had patched this but it was um but because we hadn't",
    "start": "2224200",
    "end": "2229240"
  },
  {
    "text": "connected our device to do the updates and so on it was it was still vulnerable uh we needed to update the offsets uh",
    "start": "2229240",
    "end": "2236119"
  },
  {
    "text": "for the exploit uh for the year 100 and then at this point we were able to dump",
    "start": "2236119",
    "end": "2241680"
  },
  {
    "text": "the OTP memory and the cryptographic keys used for uh used for decrypting the",
    "start": "2241680",
    "end": "2247200"
  },
  {
    "text": "OT a phunware updates as well and then use my modifications to the Sonos tool to decrypt the phunware",
    "start": "2247200",
    "end": "2253960"
  },
  {
    "text": "updates so in conclusion the I would say Sonos devices have a pretty good level of security a",
    "start": "2253960",
    "end": "2261359"
  },
  {
    "text": "pretty decent level of security they do have things like secure boot they do have uh dis encryption they're",
    "start": "2261359",
    "end": "2267680"
  },
  {
    "text": "definitely I've definitely seen a lot um a lot of embedded devices out there and iot devices which don't have these kind",
    "start": "2267680",
    "end": "2274440"
  },
  {
    "text": "of controls are not as as robust uh they're learning from their past mistakes in hard like from hardware and",
    "start": "2274440",
    "end": "2281640"
  },
  {
    "text": "software as the product evolves there was Hardware attacks in the past inactive found some vulnerabilities uh",
    "start": "2281640",
    "end": "2288119"
  },
  {
    "text": "found a vulnerability where you could replace the Wi-Fi card the pcie Wi-Fi card and then do dma attacks to actually",
    "start": "2288119",
    "end": "2295599"
  },
  {
    "text": "uh gain code execution they've hardened OT they've continually been adding mitigations so the security is evolving",
    "start": "2295599",
    "end": "2302599"
  },
  {
    "text": "which is good um OEM security is really important uh because as you can see like",
    "start": "2302599",
    "end": "2308680"
  },
  {
    "text": "Medi we found vulnerabilities in mediate Tech drivers uh and these were mediate Tech drivers which were missing",
    "start": "2308680",
    "end": "2314480"
  },
  {
    "text": "mitigations so they need to be of like the same standard as first party Security on on devices as well um the",
    "start": "2314480",
    "end": "2322119"
  },
  {
    "text": "updates were patched quickly to son us his credit they patched the vulnerabilities within a couple of months uh they're obviously serious",
    "start": "2322119",
    "end": "2328800"
  },
  {
    "text": "vulnerabilities so they got they got the patches out um we don't really know how many devices run the mediatech chipset",
    "start": "2328800",
    "end": "2335920"
  },
  {
    "text": "mediatech pushed out patches to to their uh to their own Partners but we haven't done a study on what other devices are",
    "start": "2335920",
    "end": "2343000"
  },
  {
    "text": "there are vulnerable and um yeah and just finally like all of the pretty much",
    "start": "2343000",
    "end": "2350680"
  },
  {
    "text": "the majority of Sonos devices were affected by the ubot issues because it was a shared code base and and shared",
    "start": "2350680",
    "end": "2357000"
  },
  {
    "text": "secur implementation across across the devices and yeah just a shout out to",
    "start": "2357000",
    "end": "2362440"
  },
  {
    "text": "sonas as well because the uh communication was friendly responsive it's good to work with vendors who they",
    "start": "2362440",
    "end": "2369440"
  },
  {
    "text": "do take stuff seriously so yeah thank you are there any [Applause]",
    "start": "2369440",
    "end": "2381979"
  },
  {
    "text": "questions oh you can come see us afterwards if you if you're shy yeah thank you thank you",
    "start": "2382280",
    "end": "2391559"
  }
]