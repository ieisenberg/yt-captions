[
  {
    "text": "what I'm going to say uh what I'm going to say is is going to go very very fast there's a lot of material here uh",
    "start": "2720",
    "end": "9000"
  },
  {
    "text": "basically what's going to happen is uh the first part in my dry runs the first part people uh get there's a lot of",
    "start": "9000",
    "end": "16160"
  },
  {
    "text": "really really technical stuff you'll zone out uh but uh we're doing this for",
    "start": "16160",
    "end": "21720"
  },
  {
    "text": "the residuals not not necessarily for the uh original",
    "start": "21720",
    "end": "26920"
  },
  {
    "text": "presentation okay so everyone let's get started I think it's already started and I'm",
    "start": "26920",
    "end": "32920"
  },
  {
    "text": "already uh okay I have a lot to get through time's going to be short I may run over time some of what I have to say",
    "start": "32920",
    "end": "38920"
  },
  {
    "text": "is very Compact and abbreviated and some of what I have to say is important uh so I'm going to talk fast I apologize in",
    "start": "38920",
    "end": "44960"
  },
  {
    "text": "advance that therefore I strongly recommend that you follow along with the text in the blue in the Blue Link at the",
    "start": "44960",
    "end": "50079"
  },
  {
    "text": "bottom so let's begin uh let me start a little out with a little survey please raise your hand",
    "start": "50079",
    "end": "55760"
  },
  {
    "text": "if you have used hexr Ido gidro or bony ninja so raise your hand if you've uh",
    "start": "55760",
    "end": "63000"
  },
  {
    "text": "okay I see about 80% that's that's great uh keep your hands up keep your hands up",
    "start": "63000",
    "end": "68439"
  },
  {
    "text": "for for me thank you uh now okay now how many have used any of those three to",
    "start": "68439",
    "end": "74680"
  },
  {
    "text": "debug I mean to decompile python bite code to python Source text wow I",
    "start": "74680",
    "end": "80119"
  },
  {
    "text": "actually I see hands up so uh I'd appreciate it afterwards you come talk to me because I don't know how to I",
    "start": "80119",
    "end": "86600"
  },
  {
    "text": "don't know that it's done I for this talk I spoke to uh one of the founders",
    "start": "86600",
    "end": "93079"
  },
  {
    "text": "of one of those to tools reverse engineer toolmakers and he confirmed or what he said was that all of the above",
    "start": "93079",
    "end": "99920"
  },
  {
    "text": "kinds of decompiler tools that start from machine code are pretty bad when it comes to any interpreter that runs off",
    "start": "99920",
    "end": "105320"
  },
  {
    "text": "of bik code okay now uh please raise your hand if you've used uh uncomp six or decompile 3 okay okay it's not zero",
    "start": "105320",
    "end": "114960"
  },
  {
    "text": "but uh there are some uh and after this talk all of you will know a little bit more about these",
    "start": "114960",
    "end": "120960"
  },
  {
    "text": "I'm the current maintainer and developer of unoma 6 and D compa 3 these are python programs that you can get from",
    "start": "120960",
    "end": "126280"
  },
  {
    "text": "piie I'm sorry for my really bad choice of names of project names uh the page",
    "start": "126280",
    "end": "131760"
  },
  {
    "text": "shows GitHub commit activity from 2012 to now 31 people will contributed to this open source project submitting one",
    "start": "131760",
    "end": "138599"
  },
  {
    "text": "or two pull requests these are greatly appreciate appreciated and keep up the good work but what you see over the vast",
    "start": "138599",
    "end": "144879"
  },
  {
    "text": "sea of time is that I've been working on this largely by myself my cont contributions are the bottom left the",
    "start": "144879",
    "end": "151040"
  },
  {
    "text": "person who is ranked second and commits mstar he's to the right and I haven't heard from him in a little over seven",
    "start": "151040",
    "end": "156480"
  },
  {
    "text": "years uh back in 2016 I started this project on GitHub from a tar of a copy of an from an archive from an obsolete",
    "start": "156480",
    "end": "163640"
  },
  {
    "text": "version control system and in that at that time the code was had been abandoned for about 5 years uh this",
    "start": "163640",
    "end": "169480"
  },
  {
    "text": "counts for the big gap that you see off to the left very few people really understood the code in 2018 I gave a",
    "start": "169480",
    "end": "176480"
  },
  {
    "text": "talk at a python conference so you see a flurry of activity from 20 8 in the middle of the graph and this code works",
    "start": "176480",
    "end": "182080"
  },
  {
    "text": "for python from the very first version in 1999 to 3.8 which is no longer current",
    "start": "182080",
    "end": "188599"
  },
  {
    "text": "um 38 came on the scene a few years ago but it's still supported and in and still in use so uh since this code is",
    "start": "188599",
    "end": "194840"
  },
  {
    "text": "old and larged and python compilers have gotten more sophisticated this code needs better technology to keep up with",
    "start": "194840",
    "end": "200920"
  },
  {
    "text": "python so I forked the code I refactored it reduced its size and this accounts for the drop off that inactivity that",
    "start": "200920",
    "end": "206560"
  },
  {
    "text": "you see on the far right of the graph from 2021 to now uh the fort code goes",
    "start": "206560",
    "end": "211879"
  },
  {
    "text": "under the name decompile 3 it only handles python 37 and 38 uh a little fun",
    "start": "211879",
    "end": "217040"
  },
  {
    "text": "fact on the extreme right you'll see a tiny uptick and activity and that's me working on the code in preparation for",
    "start": "217040",
    "end": "223200"
  },
  {
    "text": "this talk uh there's a moral uh of that but I'll you can talk to me about this",
    "start": "223200",
    "end": "228599"
  },
  {
    "text": "later unfortunately even the changes uh to decompile 3 weren't aggressive enough to track changes to python bite code and",
    "start": "228599",
    "end": "235239"
  },
  {
    "text": "the Python language therefore I have an experimental decompiler for python 38 to 310 towards the end of the talk I'll",
    "start": "235239",
    "end": "241000"
  },
  {
    "text": "show a little bit of that okay so who am I uh that's me in the photo in this",
    "start": "241000",
    "end": "247400"
  },
  {
    "text": "cartoon down at the bottom of of the tower uh except I live in New York City and I've been doing open source work",
    "start": "247400",
    "end": "252760"
  },
  {
    "text": "since 2000 and when not doing my day job I do open source software but I'm",
    "start": "252760",
    "end": "257880"
  },
  {
    "text": "retired now so I spend more time on this okay in general the code I've written",
    "start": "257880",
    "end": "263280"
  },
  {
    "text": "has had plenty of time to spread around so if you have software installed that matches any of the logos on the first line then you have code that I've",
    "start": "263280",
    "end": "269479"
  },
  {
    "text": "written uh I don't have any cool logos for the software I'm going to be talking about today but the software of the logos on",
    "start": "269479",
    "end": "275759"
  },
  {
    "text": "the left use a CD reading Library called live CDO I started that in 2000 and I",
    "start": "275759",
    "end": "281080"
  },
  {
    "text": "still maintain it in fact I have a vulnerability that I need to fix when I get back to New York City uh I'm interested in other things like an open",
    "start": "281080",
    "end": "287600"
  },
  {
    "text": "source Mathematica and debuggers most of the software I've written is GPL and I'm a member of the free software Foundation",
    "start": "287600",
    "end": "293560"
  },
  {
    "text": "but enough about me let's get on to the topic at hand uh highle bik code is attractive for malware Riders because",
    "start": "293560",
    "end": "300000"
  },
  {
    "text": "it's portable comat uh Compact and impervious to standard uh general purpose analysis tools a while back a",
    "start": "300000",
    "end": "307440"
  },
  {
    "text": "couple people from Microsoft cont contacted me regarding maare botnet that was active active on Microsoft Windows",
    "start": "307440",
    "end": "315280"
  },
  {
    "text": "um the malware was written in Python 27 as I mentioned before the standard analysis tools like x-rays or gindra",
    "start": "315280",
    "end": "322199"
  },
  {
    "text": "were of no use to them um this and the Situation's been getting worse languages",
    "start": "322199",
    "end": "327919"
  },
  {
    "text": "that use highle bite code is not decreasing the Python language and bite code continues to change Python's",
    "start": "327919",
    "end": "334120"
  },
  {
    "text": "generated bite code has become more complex and harder to decompile okay decompilers have been around since the",
    "start": "334120",
    "end": "340080"
  },
  {
    "text": "dawn of programming languages in the early 1960s uh however the ideas uh that",
    "start": "340080",
    "end": "345319"
  },
  {
    "text": "I'm going to present are somewhat new or little used and they represent my own personal research uh the seeds of these",
    "start": "345319",
    "end": "351080"
  },
  {
    "text": "ideas were buried back in code going back 24 years as I've said the code was abandoned for 5 years before I came",
    "start": "351080",
    "end": "356840"
  },
  {
    "text": "across it and it took me a while to distill correct and expand upon the ideas in the code and I'm not even sure",
    "start": "356840",
    "end": "362000"
  },
  {
    "text": "I have a final word on this today there's Theory and academic research",
    "start": "362000",
    "end": "368039"
  },
  {
    "text": "uh yeah there's Theory and academic research and what I call general purpose decompilers these are programs that",
    "start": "368039",
    "end": "373880"
  },
  {
    "text": "convert pseudo machine C that convert machine code into pseudo source code uh",
    "start": "373880",
    "end": "379960"
  },
  {
    "text": "usually the resulting language is not something that you can run directly through a",
    "start": "379960",
    "end": "385120"
  },
  {
    "text": "compiler uh let's see okay",
    "start": "385120",
    "end": "391560"
  },
  {
    "text": "uh okay there are systematic methods and tools for compiler construction these are just some of the books that you can",
    "start": "392599",
    "end": "398160"
  },
  {
    "text": "find on amazon.com I'm sorry the images are not larger but here's a summary of them from left to right uh some of these",
    "start": "398160",
    "end": "405199"
  },
  {
    "text": "have gone through uh several additions over the decades uh some come in several variations based on which programming",
    "start": "405199",
    "end": "411000"
  },
  {
    "text": "language the books compiler algorithms are written in some specialize for particular Source or Target language or",
    "start": "411000",
    "end": "417120"
  },
  {
    "text": "particular CPU architecture or for particular operating system some are aimed at writing interpreters While",
    "start": "417120",
    "end": "422560"
  },
  {
    "text": "others are aimed at Advanced compiler technology and finally some of them are no longer in print because compiler",
    "start": "422560",
    "end": "428120"
  },
  {
    "text": "writing technology has evolved over time the point here is that uh this is a well trodden field okay but none of the books",
    "start": "428120",
    "end": "436000"
  },
  {
    "text": "that in that last slide mentioned decompiler as far as I know so how about books on decompilers on writing",
    "start": "436000",
    "end": "442280"
  },
  {
    "text": "decompilers okay uh for writing uh decompiler construction these are the only two that I can find both are about",
    "start": "442280",
    "end": "449199"
  },
  {
    "text": "a decade old neither is is completely devoted to decompilers and neither has gone through more than one addition uh",
    "start": "449199",
    "end": "455639"
  },
  {
    "text": "but compilers and bite code that are Co covered by these books I'm sure that those have changed in 10 in the last 10",
    "start": "455639",
    "end": "461360"
  },
  {
    "text": "years uh the topic on how to write a decompiler is about as rich and deep and involved as a subject of how to write a",
    "start": "461360",
    "end": "468120"
  },
  {
    "text": "compiler in fact at core a decompiler is a cognitive compiler both take code",
    "start": "468120",
    "end": "474159"
  },
  {
    "text": "expressed in one language and translate it into equivalent code in another language conventional wisdom however",
    "start": "474159",
    "end": "480400"
  },
  {
    "text": "needs to be adapted and you'll get a small sense of this in this talk okay",
    "start": "480400",
    "end": "485560"
  },
  {
    "text": "because of the need for but scarcity of decompilers AI might seem like a possible way to get high Lev information",
    "start": "485560",
    "end": "491639"
  },
  {
    "text": "from machine code and for this talk I recently looked at two python decompilers that use machine learning so",
    "start": "491639",
    "end": "498199"
  },
  {
    "text": "can AI save the day uh well no not yet however if you're interested in how to fix this I can share my ideas afterwards",
    "start": "498199",
    "end": "505840"
  },
  {
    "text": "okay uh so why am I here why am I giving this talk uh I that general purpose decompilers found in gidra binary ninja",
    "start": "505840",
    "end": "512399"
  },
  {
    "text": "or hex-rays are of little to no use for bite code languages in fact I've been trying to raise awareness of bite code",
    "start": "512399",
    "end": "518719"
  },
  {
    "text": "decompilation as its own thing uh and that's one a big reason I'm here as I've",
    "start": "518719",
    "end": "523919"
  },
  {
    "text": "come to understand bite code decompilation works very differently from general purpose deom decompilation",
    "start": "523919",
    "end": "530200"
  },
  {
    "text": "and adding the modifier general purpose is my terminology right now this distinction is not widely AC accepted a",
    "start": "530200",
    "end": "537519"
  },
  {
    "text": "couple years ago to raise awareness I started a discussion in the Wikipedia talk section for decompilers",
    "start": "537519",
    "end": "543560"
  },
  {
    "text": "unfortunately there's been no uh there hasn't been much discussion or moving on this okay that's raise awareness uh I'll",
    "start": "543560",
    "end": "551440"
  },
  {
    "text": "soon uh describe the decompilation pro process and I will introduce a rarely used if not entirely new approach to",
    "start": "551440",
    "end": "557800"
  },
  {
    "text": "decompilation I treat decompilation as a human language translation problem in some ways it can be like uh the kind of",
    "start": "557800",
    "end": "564120"
  },
  {
    "text": "thing that Google translate does okay but uh uh the process will go through",
    "start": "564120",
    "end": "569440"
  },
  {
    "text": "also follows a pattern similar to the processes used by most compiler front ends including the py the compiler for",
    "start": "569440",
    "end": "575440"
  },
  {
    "text": "python uh it is described in all of those compiler books that I showed images before and I'm going to show this",
    "start": "575440",
    "end": "581040"
  },
  {
    "text": "adapted to form decompilation and I think this kind of adaption that I'm showing you it can be extended to create",
    "start": "581040",
    "end": "587399"
  },
  {
    "text": "decompilers for other highle B code at a more technical level I hope you",
    "start": "587399",
    "end": "592720"
  },
  {
    "text": "understand the phases of decompilation at least for these decompilers and this can be useful in submitting bug reports",
    "start": "592720",
    "end": "598160"
  },
  {
    "text": "or fixing bugs and there were a couple people who have used this uh a common",
    "start": "598160",
    "end": "603560"
  },
  {
    "text": "misconception that I see on reverse engineering forms is the confusion between decompilation and disassembly as",
    "start": "603560",
    "end": "610079"
  },
  {
    "text": "we go through the process I think the differences will be clear uh for those of you who are familiar with machine code I think you'll appreciate how high",
    "start": "610079",
    "end": "616720"
  },
  {
    "text": "Lev bite code is very different from machine code and finally I think you'll get some ideas of the things that decompilers can do and cannot do not",
    "start": "616720",
    "end": "624200"
  },
  {
    "text": "only in Python but in other similar programming languages okay but before I get too deep into de compilation I",
    "start": "624200",
    "end": "629800"
  },
  {
    "text": "should say something about what it is briefly decompilation starts out with machine code or B code AS input and",
    "start": "629800",
    "end": "636240"
  },
  {
    "text": "produces Source text as output in this slide we have some python okay so where's the bikon come in that gets",
    "start": "636240",
    "end": "642160"
  },
  {
    "text": "introduced in a second but let me first start out with some Basics that go on when you run a Python program and I'm",
    "start": "642160",
    "end": "647399"
  },
  {
    "text": "going to show use this simple program in the examples later the program prints the output um of calling a function",
    "start": "647399",
    "end": "653720"
  },
  {
    "text": "named five uh okay okay I run the code",
    "start": "653720",
    "end": "659079"
  },
  {
    "text": "and using the python interpreter which is called cpython and we get the expected output five and when I do this",
    "start": "659079",
    "end": "664959"
  },
  {
    "text": "under the cover python translate or compiles the program into an intermediate form called bite code and",
    "start": "664959",
    "end": "671440"
  },
  {
    "text": "it interprets that internal form uh in this case uh that b code in this particular case that bite code stays",
    "start": "671440",
    "end": "677959"
  },
  {
    "text": "internal it's not written out to disk okay uh here are the bite code bytes for that main routine uh here's",
    "start": "677959",
    "end": "684760"
  },
  {
    "text": "what these instruction what the when you decoda what the instructions do uh they call for the cre of a function five in",
    "start": "684760",
    "end": "690800"
  },
  {
    "text": "an interpreted language there is no Linker loader like you have for statically compiled languages handled by",
    "start": "690800",
    "end": "696279"
  },
  {
    "text": "general purpose analysis tools instead this kind of thing is done at runtime after linking in function five into the",
    "start": "696279",
    "end": "702120"
  },
  {
    "text": "main program the five function is called and then uh finally the oh and the function return value is then passed to",
    "start": "702120",
    "end": "708399"
  },
  {
    "text": "the built-in print function which displays the oper shown okay that's that was tedious but the in the instructions",
    "start": "708399",
    "end": "714959"
  },
  {
    "text": "for doing all of that that I just said it only takes up 25 bytes uh for those of you who are familiar with machine",
    "start": "714959",
    "end": "721040"
  },
  {
    "text": "code 25 bytes to do all that is like really awesome okay there are metadata",
    "start": "721040",
    "end": "727079"
  },
  {
    "text": "sections that are in the bite code and that adds a bit of space too I haven't shown that but we'll see some of this a bit",
    "start": "727079",
    "end": "732360"
  },
  {
    "text": "later as I said The Interpreter doesn't run the source Tex directly but it runs by code so one implication of this is",
    "start": "732360",
    "end": "738920"
  },
  {
    "text": "that the source Tech doesn't need to exist after by code compilation is done for certain kinds of source text called",
    "start": "738920",
    "end": "744880"
  },
  {
    "text": "modules the internal bite code is written to dis automatically however we can force by code to get R into disk",
    "start": "744880",
    "end": "751560"
  },
  {
    "text": "using a standard python Library routine called compile all the compile all module",
    "start": "751560",
    "end": "757800"
  },
  {
    "text": "okay uh that that's the invocation a b code file is a python code object which",
    "start": "757800",
    "end": "764760"
  },
  {
    "text": "is serialized and then written out to disk using uh the standard python Library function called uh Marshall uh",
    "start": "764760",
    "end": "772000"
  },
  {
    "text": "there's a little bit of extra data added and like the source text Source text file name and the by code version the",
    "start": "772000",
    "end": "778079"
  },
  {
    "text": "short name of this file here is 5. cpython 38. pyc and that's a mouthful um",
    "start": "778079",
    "end": "786399"
  },
  {
    "text": "the file extension of the Spy code usually ends in pyc as it is here or sometimes pyo and now that we have this",
    "start": "786399",
    "end": "794199"
  },
  {
    "text": "spy code object I can just run the bite code uh go there it is sorry uh and we",
    "start": "794199",
    "end": "801519"
  },
  {
    "text": "get five again woohoo okay uh go on with",
    "start": "801519",
    "end": "807600"
  },
  {
    "text": "this introduction we can now do our our first python decompilation using uncomp 6 the simplest in uh invocation is",
    "start": "807600",
    "end": "813720"
  },
  {
    "text": "uncomp 6 with a bite code file name this is what we created in the last slide okay these lines in Orange that",
    "start": "813720",
    "end": "820519"
  },
  {
    "text": "start with sharper comments the section at the top contains a little bit of metadata that I mentioned before which is stored in the bite code file it is",
    "start": "820519",
    "end": "827199"
  },
  {
    "text": "not part of the 25 byte instruction sequence that we saw in HEX before okay each bite code has a unique number for",
    "start": "827199",
    "end": "833320"
  },
  {
    "text": "the Bode variant here the uh that number is 3413 and this variant covers python",
    "start": "833320",
    "end": "839959"
  },
  {
    "text": "3.8 major releases of python typically can alter the programming language Andor",
    "start": "839959",
    "end": "845360"
  },
  {
    "text": "the bik code Andor the way the source text gets translated into the B code uh",
    "start": "845360",
    "end": "850440"
  },
  {
    "text": "python B code varies more than any other B code that I've ever encountered so when you find um a tool or read a Blog",
    "start": "850440",
    "end": "856959"
  },
  {
    "text": "about python B code some of the ideas might be only relevant for a small number of versions around the time that",
    "start": "856959",
    "end": "862240"
  },
  {
    "text": "the tool was developed or when the blog was written the drift and by code from the very first released in 1996 in the",
    "start": "862240",
    "end": "867759"
  },
  {
    "text": "most recent versions is about as dramatic as a drift from Latin into Italian except that drift happens much",
    "start": "867759",
    "end": "873759"
  },
  {
    "text": "quicker okay uh let's go back uh okay although the",
    "start": "873759",
    "end": "881279"
  },
  {
    "text": "name of the bite code is five move that's seen in white at the top the name of the Python file that contained the",
    "start": "881279",
    "end": "886920"
  },
  {
    "text": "source is 5py and that's even in Orange Meda data a little down from the",
    "start": "886920",
    "end": "893360"
  },
  {
    "text": "top uh something is yeah okay",
    "start": "893360",
    "end": "900759"
  },
  {
    "text": "uh as you can see here the source text and the decompile code are uh pretty much the same people are used to general",
    "start": "900800",
    "end": "906639"
  },
  {
    "text": "purpose de compilers such as the one for gidra or hex-rays are usually amazed at how two how close the two are and this",
    "start": "906639",
    "end": "913240"
  },
  {
    "text": "is one facet of high level bite code a lot of source information like variable names along with their types and is",
    "start": "913240",
    "end": "918440"
  },
  {
    "text": "preserved inside the bite code okay the main differences between the two are the comments produced the comments from the",
    "start": "918440",
    "end": "925040"
  },
  {
    "text": "source program on the left don't appear anywhere in the reconstructed result and that's because the comments just don't appear anywhere in B code line 11 on the",
    "start": "925040",
    "end": "932600"
  },
  {
    "text": "light line 11 on the left doesn't appear anywhere on the right uh one of the",
    "start": "932600",
    "end": "937920"
  },
  {
    "text": "thing that these decompilers do to increase the likelihood of getting exact Source text is that they make an attempt",
    "start": "937920",
    "end": "943079"
  },
  {
    "text": "to format in the same way that the standard uh format is for python work we're more careful about this than other",
    "start": "943079",
    "end": "948839"
  },
  {
    "text": "python DEC compilers but we don't always get the formatting exactly the same uh now that we've got an example of python",
    "start": "948839",
    "end": "954560"
  },
  {
    "text": "decompilation we show how our decompilers work and with this you can follow along the decompilers thought process one of the unique features of",
    "start": "954560",
    "end": "961959"
  },
  {
    "text": "these decompilers is that we provide a means for following along the decompilation process machine language",
    "start": "961959",
    "end": "968480"
  },
  {
    "text": "decompilers even though they have a language Affinity like we have they currently have no way to provide this",
    "start": "968480",
    "end": "974000"
  },
  {
    "text": "level of detail okay ourd compilers go through five phases the idea of running through",
    "start": "974000",
    "end": "979399"
  },
  {
    "text": "fa through phases or or constructing a pipeline is also how most compilers work the phases",
    "start": "979399",
    "end": "984639"
  },
  {
    "text": "are uh get by code disassembly using exus exus is a cross disassembly library",
    "start": "984639",
    "end": "990600"
  },
  {
    "text": "that I wrote to support these de compilers however it is also useful in other projects that work with python uh",
    "start": "990600",
    "end": "996199"
  },
  {
    "text": "by code okay tokenize the disassembly tokenize is an compiler compiler Centric",
    "start": "996199",
    "end": "1002800"
  },
  {
    "text": "term uh in other decompilers and code analysis tools uh this process is sometimes called lifting as in lifting",
    "start": "1002800",
    "end": "1009120"
  },
  {
    "text": "the disassembly or lifting the machine code uh pars yeah pars the tree into a",
    "start": "1009120",
    "end": "1015120"
  },
  {
    "text": "parse tokens into a pars stre uh abstract the pars Stree into an abstract syntax tree and finally uh produce the",
    "start": "1015120",
    "end": "1022240"
  },
  {
    "text": "source from the abstract syntax tree and don't worry if you don't understand the above steps I will go over each step in",
    "start": "1022240",
    "end": "1027918"
  },
  {
    "text": "more detail soon uh the scanning and parsing phases in the second and third steps are similar to the beginning steps",
    "start": "1027919",
    "end": "1034480"
  },
  {
    "text": "that compilers Ed to produce code and this is the part that is different from decompilers that from from uh uh these",
    "start": "1034480",
    "end": "1042480"
  },
  {
    "text": "decompilers from other than from other decompilers okay the first step in decompilation is carving B code byes",
    "start": "1042480",
    "end": "1049360"
  },
  {
    "text": "into instructions uh here I'll use the bite code file that we generated earlier as input and for demonstration purposes",
    "start": "1049360",
    "end": "1055840"
  },
  {
    "text": "I'll use a standalone program called p dis ASM from the cross version disassembler package uh okay first",
    "start": "1055840",
    "end": "1062080"
  },
  {
    "text": "you'll see that again there are comments in Orange at top again this is metadata about the bite code uh okay in fact this",
    "start": "1062080",
    "end": "1069480"
  },
  {
    "text": "particular metadata is exactly the same for example the version of B code that we have here in the first highlighted",
    "start": "1069480",
    "end": "1075440"
  },
  {
    "text": "line is the same as before 3413 okay now we get to the actual V code instructions",
    "start": "1075440",
    "end": "1080799"
  },
  {
    "text": "okay I'll go into this more detail later but the main thing to note here is that the first two instructions uh come from",
    "start": "1080799",
    "end": "1087320"
  },
  {
    "text": "line one of the Python Source text line one is indicated by one colon in white to the left and in the part that's",
    "start": "1087320",
    "end": "1093640"
  },
  {
    "text": "grayed out below the one colon you may see a six colon but that's because the source text uh that's the beginning of",
    "start": "1093640",
    "end": "1100280"
  },
  {
    "text": "source text for line six each by code instruction contains of an operation name in blue for example load constant",
    "start": "1100280",
    "end": "1107480"
  },
  {
    "text": "or store name the operation name is followed by an optional operand these are listed in parenthesis okay in the",
    "start": "1107480",
    "end": "1114640"
  },
  {
    "text": "left panel you see instructions that result from decoding bite code from a library routine Ed from the exus Pates",
    "start": "1114640",
    "end": "1120919"
  },
  {
    "text": "because the the compiler doesn't call the command line routine but instead a library API it has a disassembly",
    "start": "1120919",
    "end": "1126480"
  },
  {
    "text": "structure on the left we're showing the print representation of that structure and this is happens to be the same",
    "start": "1126480",
    "end": "1132120"
  },
  {
    "text": "output from the command line utility uh but from this this disassembly structure",
    "start": "1132120",
    "end": "1137400"
  },
  {
    "text": "we need to massage and repackage the information to put in the form for parser input and this is shown in the",
    "start": "1137400",
    "end": "1143679"
  },
  {
    "text": "right panel uh even though these two look almost the same internally they different structures on the left is",
    "start": "1143679",
    "end": "1148799"
  },
  {
    "text": "again is output from phase one and on the right is parser input to phase two and parsing will be coming up the next",
    "start": "1148799",
    "end": "1154360"
  },
  {
    "text": "slide oops uh input to the uh parser is a stream of",
    "start": "1154360",
    "end": "1161200"
  },
  {
    "text": "tokens uh token is a standard uh compiler term for the input atoms that",
    "start": "1161200",
    "end": "1166760"
  },
  {
    "text": "are fit into the parser a token is based on the operation name in blue okay uh",
    "start": "1166760",
    "end": "1173840"
  },
  {
    "text": "and sometimes the operation name and the token name are the same however the Opera the field the the the field in",
    "start": "1173840",
    "end": "1180000"
  },
  {
    "text": "green to the right sometimes has parts of it folded into the token name and here are examples of this okay there",
    "start": "1180000",
    "end": "1185679"
  },
  {
    "text": "there's a good these are examples in the first instruction load cost is at offset zero offset numbers are in purple uh the",
    "start": "1185679",
    "end": "1193440"
  },
  {
    "text": "load const operation is a uh the load op the load con load constant operation at",
    "start": "1193440",
    "end": "1199159"
  },
  {
    "text": "both offset 0 and six have been specialized on the on the right to load string in general a load constant",
    "start": "1199159",
    "end": "1206320"
  },
  {
    "text": "operation can be any python constant literal like Boolean Valu is true or false or maybe a couple of uh of string",
    "start": "1206320",
    "end": "1214320"
  },
  {
    "text": "time zone names okay this aspect shows another difference between bite code and machine code in machine code the instruction operators are register",
    "start": "1214320",
    "end": "1220679"
  },
  {
    "text": "values uh which can be numbers addresses or parts of addresses in Python B code the oper are arbitrary objects uh the",
    "start": "1220679",
    "end": "1228880"
  },
  {
    "text": "other operation that name that is different from the corresponding token name is make function and you see that",
    "start": "1228880",
    "end": "1234000"
  },
  {
    "text": "in purple uh at offset 8 towards the bottom it gets a suffix added to the name and becomes make function undor 0",
    "start": "1234000",
    "end": "1241480"
  },
  {
    "text": "zero is the bite code encoded way to indicate that a function signature for this function doesn't take any",
    "start": "1241480",
    "end": "1247400"
  },
  {
    "text": "parameters the instruction sequence leading up to make function would change depending on the number of parameters",
    "start": "1247400",
    "end": "1253360"
  },
  {
    "text": "that of the that the function takes so a parser needs this rough parameter information uh to be able to match the",
    "start": "1253360",
    "end": "1260039"
  },
  {
    "text": "sequence of instructions that lead up to make function okay in the last slide we just showed the first two phases which",
    "start": "1260039",
    "end": "1266360"
  },
  {
    "text": "turn bite code byes into bite code instructions uh and then a stream of tokens the next phas is scanning and",
    "start": "1266360",
    "end": "1272600"
  },
  {
    "text": "parsing will be coming up next and it'll look familiar if you've developed compilers but I suspect nobody that's a",
    "start": "1272600",
    "end": "1278760"
  },
  {
    "text": "niche Mark and I suspect nobody here uh knows anything about how about uh developing compilers uh if things go too",
    "start": "1278760",
    "end": "1285919"
  },
  {
    "text": "quickly um I uh you may find some of this explained in more detail in one of",
    "start": "1285919",
    "end": "1291320"
  },
  {
    "text": "the 40 books uh on amazon.com that I showed before uh to simplify we'll focus on",
    "start": "1291320",
    "end": "1297919"
  },
  {
    "text": "just the source text on the very first line the companion materials have full output for all the lines of all the",
    "start": "1297919",
    "end": "1303480"
  },
  {
    "text": "phases but even though this is a small part of the code it covers all the basic concepts very well in order to run it",
    "start": "1303480",
    "end": "1309840"
  },
  {
    "text": "helps to walk first so let's start out with the first line of the Python program it was just a simple python dock",
    "start": "1309840",
    "end": "1315120"
  },
  {
    "text": "string shown in green at the top and let's start out with the first instruction",
    "start": "1315120",
    "end": "1320519"
  },
  {
    "text": "uh of course most Pyon Expressions require more than one instruction to represent them in by code oh sorry sorry",
    "start": "1320720",
    "end": "1327919"
  },
  {
    "text": "sorry uh so note that note that we we just have the token named load string",
    "start": "1327919",
    "end": "1333960"
  },
  {
    "text": "the value the string value isn't relevant in parsing that one instruction all by itself is the complete",
    "start": "1333960",
    "end": "1340520"
  },
  {
    "text": "representation in by code for a particular python expression it would be uh what what you would get if you typed",
    "start": "1340520",
    "end": "1348279"
  },
  {
    "text": "uh uh the literal string expression black hat Asia example and that was the only thing in the program okay for those",
    "start": "1348279",
    "end": "1355080"
  },
  {
    "text": "of you who are who are familiar with programming language system um that compiled to M machine code again this is",
    "start": "1355080",
    "end": "1361000"
  },
  {
    "text": "pretty strange in machine code you rarely have one instruction covering One Source Code expression and again that's",
    "start": "1361000",
    "end": "1368080"
  },
  {
    "text": "what makes this High Lev B code uh of course most po uh the most python Expressions require more than one",
    "start": "1368080",
    "end": "1373960"
  },
  {
    "text": "expression to to represent them in by code okay because Lo string is a",
    "start": "1373960",
    "end": "1379480"
  },
  {
    "text": "complete expression uh the parser matches that single token and emits a quote unquote grammar reduction rule",
    "start": "1379480",
    "end": "1385520"
  },
  {
    "text": "this is the expert colon colon load string that you see here and this line is written in Backus now form you'll see",
    "start": "1385520",
    "end": "1391520"
  },
  {
    "text": "this notation in P both Python's grammar specification and it's abstract syntax Street specification more generally this",
    "start": "1391520",
    "end": "1397360"
  },
  {
    "text": "is the way syntax is specified in most programming languages but for the decompilers that I've written they also",
    "start": "1397360",
    "end": "1403480"
  },
  {
    "text": "use grammars to do their work and this is one of about 50 or so grammar rules for de calling python 38 the word at the",
    "start": "1403480",
    "end": "1410559"
  },
  {
    "text": "right of the right of the colon colon equals is called a grammar symbol the colon colon equals is pronounced transforms into because ex the gra",
    "start": "1410559",
    "end": "1418240"
  },
  {
    "text": "expert grammar symbol can transform into load string the a load string token but",
    "start": "1418240",
    "end": "1423320"
  },
  {
    "text": "since we're really working bottom up or token up uh the parcel recognizes reduction possibility only after the",
    "start": "1423320",
    "end": "1429799"
  },
  {
    "text": "fact so the recognition is really from right to left uh or alternity from token",
    "start": "1429799",
    "end": "1435679"
  },
  {
    "text": "or set stream of tokens into a grammar symbol okay uh performing this reduction",
    "start": "1435679",
    "end": "1441760"
  },
  {
    "text": "rule the parser creates a simple okay so that's oh yes uh so performing this",
    "start": "1441760",
    "end": "1447240"
  },
  {
    "text": "reduction rule the procor creates a simple tree created with the exper grammar symbol in yellow as the root of",
    "start": "1447240",
    "end": "1452760"
  },
  {
    "text": "this tree and the load string token in blue as a single Char so let's continue uh here's I've just I've copied what we",
    "start": "1452760",
    "end": "1459400"
  },
  {
    "text": "had before now let's get to the second by code instruction a store name instruction is",
    "start": "1459400",
    "end": "1465200"
  },
  {
    "text": "one of the kinds of tokens uh that form a store grammar symbol uh okay so there we go although",
    "start": "1465200",
    "end": "1472480"
  },
  {
    "text": "you won't find a store grammar symbol in a grammar for python you will find store with a capital S appearing in Python's a",
    "start": "1472480",
    "end": "1479080"
  },
  {
    "text": "doc documentation xer with a capital E also appears in Python's a when possible",
    "start": "1479080",
    "end": "1484960"
  },
  {
    "text": "we try to use the grammar symbol names that have uh that are similar to the names that Python's a uses overall the",
    "start": "1484960",
    "end": "1490919"
  },
  {
    "text": "two grammars have similarities uh at the top of the tree but they have to be different at the bottom if instead of",
    "start": "1490919",
    "end": "1496600"
  },
  {
    "text": "store name we had a store Global uh token that would be another kind of",
    "start": "1496600",
    "end": "1502279"
  },
  {
    "text": "instruction in the class of store grammar of quotequote store grammar symbols okay to put this in terms that",
    "start": "1502279",
    "end": "1507840"
  },
  {
    "text": "may be more familiar in English think about how a noun might be one of many words like by car or bus and let's say",
    "start": "1507840",
    "end": "1514399"
  },
  {
    "text": "store store name is like bike while store Global is more like car uh as far as a sentence goes both bikes and cars",
    "start": "1514399",
    "end": "1521120"
  },
  {
    "text": "are nouns noun is a grammar symbol that they both belong to the grammatical structure of a sentence doesn't change",
    "start": "1521120",
    "end": "1528039"
  },
  {
    "text": "whether you replace bike or bike for car or even bus in any sentence okay to",
    "start": "1528039",
    "end": "1534200"
  },
  {
    "text": "recap we've now encountered two reduction rules these are the lines in yellow uh after the second reduction rule has been encountered the little",
    "start": "1534200",
    "end": "1540919"
  },
  {
    "text": "graph that the parser is building up on the side looks like this okay so now we have two little trees and let's continue",
    "start": "1540919",
    "end": "1547080"
  },
  {
    "text": "the parsers match exp stor grammar symbols and buil two trees from them so uh after finishing the store reduction",
    "start": "1547080",
    "end": "1554279"
  },
  {
    "text": "rule the parser now notices we have expert and store grammar symbols in succession the grammar that I wrote for",
    "start": "1554279",
    "end": "1560039"
  },
  {
    "text": "the decompilers dictate that when these two are seen in succession that constitutes an assignment statement so yet another rule triggers okay and uh",
    "start": "1560039",
    "end": "1567840"
  },
  {
    "text": "these are the two trees that we had before joined okay to recap we have we matched an assignment statement uh",
    "start": "1567840",
    "end": "1574640"
  },
  {
    "text": "continuing an assignment statement is a kind of statement and we have a grammar rule to indicate that uh notice that",
    "start": "1574640",
    "end": "1580559"
  },
  {
    "text": "after seeing the second store name in Blue from early on we kicked off a flurry of reduction rules the lines that",
    "start": "1580559",
    "end": "1586320"
  },
  {
    "text": "start in yellow this kind of thing happen happens in bottomup Parts is when you get to the end of the token stream",
    "start": "1586320",
    "end": "1591440"
  },
  {
    "text": "it is like a detective story where after the last couple of pages all the loose fragments and the mysteries of the",
    "start": "1591440",
    "end": "1597120"
  },
  {
    "text": "entire book are finally uh wrapped up and the person who wants to his code decompiled gives cheers okay so here's",
    "start": "1597120",
    "end": "1604440"
  },
  {
    "text": "Here's the final tree uh and so now let's see how this is shown in ASI output this is the ASI representation",
    "start": "1604440",
    "end": "1611200"
  },
  {
    "text": "from the graph uh in the last slide it shows more information shown in the graph but that",
    "start": "1611200",
    "end": "1616440"
  },
  {
    "text": "is because we're also showing token attrib in addition to token names uh okay uh for example we now see",
    "start": "1616440",
    "end": "1622679"
  },
  {
    "text": "the instruction offset we see instruction offsets and operand values okay this is great uh but recall that we",
    "start": "1622679",
    "end": "1629360"
  },
  {
    "text": "didn't have an assignment statement at the top of the source test instead what we had was a dock string however doc",
    "start": "1629360",
    "end": "1635000"
  },
  {
    "text": "strings are implemented in Python using a spe this special kind of assignment uh to a string variable of that funny name",
    "start": "1635000",
    "end": "1641440"
  },
  {
    "text": "called doc okay so where does this get it to change into something more familiar I am glad you asked because",
    "start": "1641440",
    "end": "1648399"
  },
  {
    "text": "this BEC comes from the next phase okay phase four takes the parts tree that we just created and transforms that into an",
    "start": "1648399",
    "end": "1654120"
  },
  {
    "text": "abstract syntax tree we look for tree patterns of this kind of special kind of assignement and when something when the",
    "start": "1654120",
    "end": "1660200"
  },
  {
    "text": "process finds something of interest that matches that part of the tree is replaced in a sense we are abstracting the specifics that we found into",
    "start": "1660200",
    "end": "1666840"
  },
  {
    "text": "something more the way a python programmer wrote the program strictly speaking we don't have to do this here",
    "start": "1666840",
    "end": "1671919"
  },
  {
    "text": "and sometimes this this kind of thing can be a difference between re the reconstructed and original Source text",
    "start": "1671919",
    "end": "1677679"
  },
  {
    "text": "however if you find a python Source text that looks a little screwy or isn't even valid python what may be going on is",
    "start": "1677679",
    "end": "1682960"
  },
  {
    "text": "that this kind of transformation isn't being detected and I see this happen in another python decom a lot notice that",
    "start": "1682960",
    "end": "1689399"
  },
  {
    "text": "we've simplified the tree as well we no longer have a grammar symbols expert and store uh what we we could have tried to",
    "start": "1689399",
    "end": "1694799"
  },
  {
    "text": "detect doc strings earlier but that would have been Messier and finally we get to the actual Source text remember the sour anybody remember okay uh the",
    "start": "1694799",
    "end": "1702240"
  },
  {
    "text": "source text is why we were doing all of this uh the source text is created by traversing the a uh calling routin based",
    "start": "1702240",
    "end": "1708600"
  },
  {
    "text": "on the name of the grammar symbol and here the grammar symbol of interest is called is Doc string in",
    "start": "1708600",
    "end": "1714559"
  },
  {
    "text": "yellow uh okay to simplify the conversion of the as into a source string uh there's a custom uh domain",
    "start": "1714559",
    "end": "1722120"
  },
  {
    "text": "specific language or DSL that's used this DSL is described in the project Wiki okay you've now finally",
    "start": "1722120",
    "end": "1728120"
  },
  {
    "text": "successfully completed the first part of the talk which gives an overview and uh I I'm I'm going to go on but there's",
    "start": "1728120",
    "end": "1734200"
  },
  {
    "text": "nobody afterwards and um you know we just I'm I'm so I'm sorry uh okay so so",
    "start": "1734200",
    "end": "1741360"
  },
  {
    "text": "some of you if you're not familiar with how compiler front ends work this this first part last part might have been a",
    "start": "1741360",
    "end": "1746399"
  },
  {
    "text": "little bit intense so relax okay that's enough time because I'm over time and because what's coming up may be uh even",
    "start": "1746399",
    "end": "1753399"
  },
  {
    "text": "rougher uh I next go over to disassembly in a little more detail and introduce a new idea for python de compilers",
    "start": "1753399",
    "end": "1758880"
  },
  {
    "text": "unfortunately that's the stuff that's most important but I had to get go through all this material because folks here uh have to explain compilers okay",
    "start": "1758880",
    "end": "1766600"
  },
  {
    "text": "so this so the next stuff uses some Advanced compiler technology I'm going to uh but first i'm going to focus on a",
    "start": "1766600",
    "end": "1773240"
  },
  {
    "text": "little on disassembly for one important reason there aren't good decompilers for the most recent python versions and",
    "start": "1773240",
    "end": "1778960"
  },
  {
    "text": "that's likely to continue forever so the reality is that you may have to understand by code malware from a disassembly listing there's a",
    "start": "1778960",
    "end": "1784960"
  },
  {
    "text": "disassembler in the standard python Library called D most novice D compilers use this is the first thing that comes",
    "start": "1784960",
    "end": "1790480"
  },
  {
    "text": "to mind but that has some serious limitations the biggest limitation is that it can only disassemble code for a",
    "start": "1790480",
    "end": "1795600"
  },
  {
    "text": "single python version the version that running the decompiler if you're running the latest version of python such as 312",
    "start": "1795600",
    "end": "1801919"
  },
  {
    "text": "but the B code you want to analyze is from an earlier version like B code 27 then you're out of luck malware written",
    "start": "1801919",
    "end": "1807799"
  },
  {
    "text": "in Python tends to use older versions of python and this was the situation when micr Microsoft folks contacted me to get",
    "start": "1807799",
    "end": "1815120"
  },
  {
    "text": "on this limitation UNC compile six and three uh decompile 3 mentioned xus which",
    "start": "1815120",
    "end": "1820279"
  },
  {
    "text": "stands for cross python disassembler uh that package uh comes with a disassembler on steroids and I'm going",
    "start": "1820279",
    "end": "1826159"
  },
  {
    "text": "to show that briefly uh in yellow are command line options that I use okay in yellow that's xus and then in yellow are",
    "start": "1826159",
    "end": "1833880"
  },
  {
    "text": "the command line options that I use for this indication it's a basic interpretation of sequence of instructions showing the actual bite",
    "start": "1833880",
    "end": "1840320"
  },
  {
    "text": "code and the ability to intermingle The Source text with assembly in Reverse uring most of the time you'll not have the source text there's of course no",
    "start": "1840320",
    "end": "1847080"
  },
  {
    "text": "harm for asking for the source text when it doesn't exist so now let's look at the output uh the top of the disassembly",
    "start": "1847080",
    "end": "1854200"
  },
  {
    "text": "output uh is so again uh there's some metadata in orange I went into this earlier so I've highlighted that in the",
    "start": "1854200",
    "end": "1861080"
  },
  {
    "text": "slide okay a piece of metadata that uh uh this is piece of medor",
    "start": "1861080",
    "end": "1869840"
  },
  {
    "text": "shoot uh piece of Med we saw implicitly before was this value from the constant",
    "start": "1869840",
    "end": "1875840"
  },
  {
    "text": "table uh the first instruction at purple offset zero is load const the string oper string operating for this",
    "start": "1875840",
    "end": "1881639"
  },
  {
    "text": "instruction came from index zero of this constant table now let's compare the assembly instructions if you're familiar with Python's dis out but this is",
    "start": "1881639",
    "end": "1889000"
  },
  {
    "text": "similar uh okay but there are there are some differences and you'll see them soon",
    "start": "1889000",
    "end": "1894760"
  },
  {
    "text": "um okay first there in green there's the there's a source code that's a python",
    "start": "1894760",
    "end": "1900320"
  },
  {
    "text": "doc string okay uh below that in white we have between vertical bars the actual",
    "start": "1900320",
    "end": "1905559"
  },
  {
    "text": "white code values uh uh okay uh and",
    "start": "1905559",
    "end": "1911000"
  },
  {
    "text": "that's seen in the top in HEX the first bite of the first instruction is 64 this is the op code in Python 38 for L cons",
    "start": "1911000",
    "end": "1917080"
  },
  {
    "text": "the operand value zero but zero again is an index into the orange constant table above okay in the second instruction we",
    "start": "1917080",
    "end": "1923919"
  },
  {
    "text": "see something interesting happening off to the far right after this is parenthesized the operan value dock in",
    "start": "1923919",
    "end": "1929679"
  },
  {
    "text": "green so there's this additional text that says it's an assignment statement that starts in white doc equals black",
    "start": "1929679",
    "end": "1935120"
  },
  {
    "text": "hat Asia example okay uh here what the disassembler has done is describ the combined effect of the first two lines",
    "start": "1935120",
    "end": "1942399"
  },
  {
    "text": "as I mentioned before this is how python implements do strings okay here is a much more complicated example uh the",
    "start": "1942399",
    "end": "1949080"
  },
  {
    "text": "companion materials show more detail but and I don't get confused between disassembly and decompilation even",
    "start": "1949080",
    "end": "1954240"
  },
  {
    "text": "though there's some higher level interpretation what we have here is disassembly uh internals of The Interpreter are exposed for example top",
    "start": "1954240",
    "end": "1960760"
  },
  {
    "text": "of stack or toss seals refers to the how The Interpreter works and pop the pop top instruction which is grayed out just",
    "start": "1960760",
    "end": "1966399"
  },
  {
    "text": "below the last call function had has no corresponding meaning in the source code this assembly is easy and",
    "start": "1966399",
    "end": "1972000"
  },
  {
    "text": "straightforward decompilation is hard however decompilation usually starts out with disassembly okay however ever",
    "start": "1972000",
    "end": "1978039"
  },
  {
    "text": "awesome the disassembler uh uh shown in the last slide it does have some limitation and here's an example of",
    "start": "1978039",
    "end": "1984039"
  },
  {
    "text": "something that the dissembler can't reconstruct while the disassembler is great with code that doesn't have jumps in it uh okay once we have jumps like",
    "start": "1984039",
    "end": "1991919"
  },
  {
    "text": "the highlighted instruction the disassembler has to stop combining instructions with each new python release decompilation of control flow",
    "start": "1991919",
    "end": "1998000"
  },
  {
    "text": "has become increasingly more difficult nowadays about a third of the issues are raised in the compiler bug trackers are",
    "start": "1998000",
    "end": "2004039"
  },
  {
    "text": "related to control flow uh grammars and the grammar based approach that we use however handle parsing nested sequences",
    "start": "2004039",
    "end": "2011519"
  },
  {
    "text": "of control structures quite well if you mark them up so having a methodical way to characterize control flow that fits",
    "start": "2011519",
    "end": "2018000"
  },
  {
    "text": "into decompiling um can give more precision and more accuracy that is just not available in general purpose",
    "start": "2018000",
    "end": "2024600"
  },
  {
    "text": "decompilers I won't say much about how UNC compile 6 and decompile 3 handle difficulties in VOR rizing control flow",
    "start": "2024600",
    "end": "2030440"
  },
  {
    "text": "instead I'll be using an approach in an experimental decompiler that I'm working on now below is the as for this",
    "start": "2030440",
    "end": "2035720"
  },
  {
    "text": "experimental decompiler okay the tokens in white that that start BB start BBN sibling blocks block and join are pseudo",
    "start": "2035720",
    "end": "2042720"
  },
  {
    "text": "tokens that get inserted by a special control flow process that I'll show briefly next by the end of the next slides I hope you understand a little",
    "start": "2042720",
    "end": "2048878"
  },
  {
    "text": "bit about basic blocks that you see in Orange BB in the token name is an abbreviation for basic block I hope you",
    "start": "2048879",
    "end": "2054320"
  },
  {
    "text": "get some idea of what sibling and join mean in the token names and what Dominator means that's in the orange",
    "start": "2054320",
    "end": "2059800"
  },
  {
    "text": "operand in the very last line okay now let's consider this python simple Python program to count the one bits and a in",
    "start": "2059800",
    "end": "2066440"
  },
  {
    "text": "an inure uh if you're interested in algorithms this you might find this Co code cool and interesting but the only",
    "start": "2066440",
    "end": "2071760"
  },
  {
    "text": "thing that concerns us when thinking about control flow is that is a program with the following characteristics nested inside the main body is a while",
    "start": "2071760",
    "end": "2078200"
  },
  {
    "text": "loop there it is not nested inside the while loop uh there's an if then else statement and there's one more nesting",
    "start": "2078200",
    "end": "2084560"
  },
  {
    "text": "level which is the else then and else parts of the if here we have more than one item in at the same nesting level",
    "start": "2084560",
    "end": "2090638"
  },
  {
    "text": "even though the two blocks are at the same nesting level the two blocks are distinct and separate in some programming languages like Java or",
    "start": "2090639",
    "end": "2097040"
  },
  {
    "text": "JavaScript variables declared in each block will be in different Scopes what we want to do to make parsing easier is",
    "start": "2097040",
    "end": "2102760"
  },
  {
    "text": "detect the nesting level or more precisely the scope we want to Mark scope boundaries inside the instruction",
    "start": "2102760",
    "end": "2108200"
  },
  {
    "text": "sequence and that brings us to the orange comments these capture what I just said they Mark scope boundaries but",
    "start": "2108200",
    "end": "2113440"
  },
  {
    "text": "I'm doing this in the source text rather than the B code instruction sequence now suppose instead of the orange Comet we",
    "start": "2113440",
    "end": "2118800"
  },
  {
    "text": "had the word Dominator uh so in the words that have dominator in them okay",
    "start": "2118800",
    "end": "2124400"
  },
  {
    "text": "suppose those were non- branching instructions to get to any instruction that in the same scope or nested scope",
    "start": "2124400",
    "end": "2131560"
  },
  {
    "text": "uh you have to pass through that Dominator instruction it acts as a gatekeeper for the group of",
    "start": "2131560",
    "end": "2137079"
  },
  {
    "text": "instructions okay similarly in order to get to any instruction in the same scope or nested scope that follows you'd have",
    "start": "2137079",
    "end": "2144320"
  },
  {
    "text": "to pass through one of the matching one of the comments that says join in it so now let's look at how the python",
    "start": "2144320",
    "end": "2150440"
  },
  {
    "text": "interpreter seizings this is control flow Reconstruction from the bite code instruction this graph does come from a",
    "start": "2150440",
    "end": "2156920"
  },
  {
    "text": "program called uh the python control flow project I created this project to",
    "start": "2156920",
    "end": "2162800"
  },
  {
    "text": "per more accurate and faster decompilation of python control flow structures however this project can be",
    "start": "2162800",
    "end": "2168800"
  },
  {
    "text": "used in other kinds of by code control flow analysis instructions are uh or",
    "start": "2168800",
    "end": "2174040"
  },
  {
    "text": "sequence of instructions are broken into basic blocks a basic block is straight line code if there's a jump to any",
    "start": "2174040",
    "end": "2180720"
  },
  {
    "text": "instruction in that block of instruction it has to be to the first instruction and if a block contains any jumping",
    "start": "2180720",
    "end": "2186880"
  },
  {
    "text": "instruction there can only be one it and it's the last instruction so the first",
    "start": "2186880",
    "end": "2192000"
  },
  {
    "text": "instruction acts as a choke point or a dominator that you have to go through to get to any of the other instructions in",
    "start": "2192000",
    "end": "2197920"
  },
  {
    "text": "the basic block I don't have time to describe in the text boxes what the colors and the line Styles mean on the",
    "start": "2197920",
    "end": "2203400"
  },
  {
    "text": "arrows for that you have to look in the companion materials okay here we have the control flow graph from before but",
    "start": "2203400",
    "end": "2209440"
  },
  {
    "text": "now altered to show Dominator regions and dominators okay uh and this this graph comes out of a later phase of the",
    "start": "2209440",
    "end": "2215800"
  },
  {
    "text": "control flow project there's a lot going on here that I just don't have time to explain so see companion materials for",
    "start": "2215800",
    "end": "2221079"
  },
  {
    "text": "this but let me introduce two important terms Dominator region and Dominator the easiest term to explain is dominated",
    "start": "2221079",
    "end": "2227839"
  },
  {
    "text": "region this is just another term for scope describing when uh this is another",
    "start": "2227839",
    "end": "2233040"
  },
  {
    "text": "term for scope that we saw when showing the source code but it is a property that is computed on a graph it's a okay",
    "start": "2233040",
    "end": "2240640"
  },
  {
    "text": "or more precisely a control flow graph like this this property is used quite a bit in compiler data flow analysis so C",
    "start": "2240640",
    "end": "2247960"
  },
  {
    "text": "books on Advanced compiler optimization for algorithms for how you can get this information what does the Dominator part",
    "start": "2247960",
    "end": "2255040"
  },
  {
    "text": "of Dominator region mean we kind of alluded to this before if something something dominates if it acts as a",
    "start": "2255040",
    "end": "2262000"
  },
  {
    "text": "gatekeeper so uh an instruction like the first instruction of a basic block dominates other other instruction in",
    "start": "2262000",
    "end": "2268359"
  },
  {
    "text": "that basic block but similarly a dominator block dominates other other",
    "start": "2268359",
    "end": "2274040"
  },
  {
    "text": "blocks if you must pass through that block in order to get to the other blocks that are nested or at the same",
    "start": "2274040",
    "end": "2280160"
  },
  {
    "text": "scope okay the darker color a block is the more nested it is inside other block",
    "start": "2280160",
    "end": "2285960"
  },
  {
    "text": "regions so block 3 is nested or dominated inside uh block regions two and one Dominator blocks have that 3D",
    "start": "2285960",
    "end": "2293640"
  },
  {
    "text": "block uh uh box or shape uh the upside down house shape shows a joint point and",
    "start": "2293640",
    "end": "2299640"
  },
  {
    "text": "which is the exit of a dominated region uh this is where the scope ends companian materials give a fuller",
    "start": "2299640",
    "end": "2305839"
  },
  {
    "text": "explanation I'm really sorry this this one slide if you're taking pictures this is the slide to take a",
    "start": "2305839",
    "end": "2312119"
  },
  {
    "text": "picture of um so I'm sorry I'm talking fast and glossing over details this",
    "start": "2312119",
    "end": "2317319"
  },
  {
    "text": "slide was was my motivation for giving this stock and I'm already over time because I have to give all this background oops",
    "start": "2317319",
    "end": "2325440"
  },
  {
    "text": "uh okay uh the darker the color a block is okay so I so uh what what I want to",
    "start": "2325839",
    "end": "2332520"
  },
  {
    "text": "show here is how you can show uh nesting uh so how in an automated way",
    "start": "2332520",
    "end": "2338880"
  },
  {
    "text": "you can show nesting and block scope and the differences between alternation and uh in at the at the instruction level",
    "start": "2338880",
    "end": "2345960"
  },
  {
    "text": "and so those wacky pseudo tokens that I showed uh briefly in that chain comparison example those those are used",
    "start": "2345960",
    "end": "2352560"
  },
  {
    "text": "to compare compare the these kinds of Concepts in a way that a parser can understand and match okay now that I've",
    "start": "2352560",
    "end": "2359119"
  },
  {
    "text": "given a worldwind tour of bode decompilation for these python decompilers let me back up and put this in place okay uh there are other decomil",
    "start": "2359119",
    "end": "2367440"
  },
  {
    "text": "for python they all start out with disassembly even the one that I looked for uh that uses machine learning uh",
    "start": "2367440",
    "end": "2373319"
  },
  {
    "text": "many build a tree more or less based on the instructions from a disassembly and they all Produce Source text from the internal trius structure however they",
    "start": "2373319",
    "end": "2380560"
  },
  {
    "text": "are a bit more ad hoc none of them uses the grammar based approach here the phases are fewer and a little less",
    "start": "2380560",
    "end": "2385960"
  },
  {
    "text": "distinct okay general purpose de compilers like you find in gidra are largely different they live in a more",
    "start": "2385960",
    "end": "2391240"
  },
  {
    "text": "complicated world to be able to do things across a wide spectrum of machine languages and a wide spectrum of",
    "start": "2391240",
    "end": "2396720"
  },
  {
    "text": "programming langu is they have to give up on noticing any specific packet patterns of instructions like we showed",
    "start": "2396720",
    "end": "2402520"
  },
  {
    "text": "in the chain comparison example the ability to match specific patterns is what makes these decompilers produce",
    "start": "2402520",
    "end": "2408440"
  },
  {
    "text": "extremely intuitive and accurate results written in the programming language that the source code text was written in okay",
    "start": "2408440",
    "end": "2415560"
  },
  {
    "text": "control flow in general purpose decompiles that is its own can phase and that phase doesn't to take to account",
    "start": "2415560",
    "end": "2422240"
  },
  {
    "text": "the specific Target programming language that produce the code or the specific set of control flows that are in that",
    "start": "2422240",
    "end": "2428319"
  },
  {
    "text": "Source uh code in that Source language our control flow is intimately tied with",
    "start": "2428319",
    "end": "2433760"
  },
  {
    "text": "a control flow for a particular python version python has an extremely rich uh",
    "start": "2433760",
    "end": "2439400"
  },
  {
    "text": "set of control flow structures I know of no canned control flow detection mechanism that would be able to to cover",
    "start": "2439400",
    "end": "2446319"
  },
  {
    "text": "all control flow mechanisms that python includes such as else Clauses on while",
    "start": "2446319",
    "end": "2452119"
  },
  {
    "text": "four and tribal blocks okay our approach uses tokenization to facil at parsing",
    "start": "2452119",
    "end": "2458440"
  },
  {
    "text": "this is similar to the lift phase in a general purpose in general purpose decompilers in general purpose decompilers the lifting language is",
    "start": "2458440",
    "end": "2465079"
  },
  {
    "text": "sometimes to llvm or an llvm like language in Python our Intermediate",
    "start": "2465079",
    "end": "2470200"
  },
  {
    "text": "Language is very much tied to python B code in general that is true for all highle uh bite code decompilers their",
    "start": "2470200",
    "end": "2478079"
  },
  {
    "text": "intermediate code looks pretty much like the highle B code if there is an Intermediate Language uh also that",
    "start": "2478079",
    "end": "2484440"
  },
  {
    "text": "Intermediate Language drifts over time along with the language and the B code okay I've shown two how the two and",
    "start": "2484440",
    "end": "2492079"
  },
  {
    "text": "best the most popular decomposers work of course these have bugs in them but by understanding how they work hopefully you may be able to understand pinpoint",
    "start": "2492079",
    "end": "2498880"
  },
  {
    "text": "and Report bugs bugger or even fix problems begin to understand python by code in general and how the source text",
    "start": "2498880",
    "end": "2504280"
  },
  {
    "text": "and the bite code are related uh extend this code for newer or unsupported bite code uh use these techniques to write a",
    "start": "2504280",
    "end": "2511119"
  },
  {
    "text": "decompiler for other programming language such as ethereum solidity Lua Ruby or various lists just to name a few",
    "start": "2511119",
    "end": "2518079"
  },
  {
    "text": "uh for the bik code that you may be interested there may not be a decompiler available yet uh hopefully with this",
    "start": "2518079",
    "end": "2523599"
  },
  {
    "text": "information in a position to write one okay now we get to my favorite part way over uh but this is my favorite part um",
    "start": "2523599",
    "end": "2530920"
  },
  {
    "text": "I'm just going to say the names uh so John aot and Hartwood gole they wrote the version uh in you know Circa uh 2000",
    "start": "2530920",
    "end": "2540280"
  },
  {
    "text": "and the and and the banded it um but very very important blackhead Asia reviewers and organizers I greatly",
    "start": "2540280",
    "end": "2547200"
  },
  {
    "text": "appreciate them giving me this opportunity to to uh present this topic which I personally think is very",
    "start": "2547200",
    "end": "2553960"
  },
  {
    "text": "important because I said there are no general purpose tools for writing um",
    "start": "2553960",
    "end": "2559079"
  },
  {
    "text": "like G hex for for any for high level B code language uh I want to thank uh Phil",
    "start": "2559079",
    "end": "2564880"
  },
  {
    "text": "Young and the speaker coaching program you know Phil if hi Phil thank you uh uh",
    "start": "2564880",
    "end": "2572839"
  },
  {
    "text": "Lydia uh Juliano uh who who organizes the speak coaching program I mean as bad",
    "start": "2572839",
    "end": "2578720"
  },
  {
    "text": "as this is I it would be a lot worse um without them uh Hui in AV uh helped me",
    "start": "2578720",
    "end": "2586240"
  },
  {
    "text": "out uh and and the folks folks down there I mean I I appreciate all that uh steuart Frankle turn did some editing on",
    "start": "2586240",
    "end": "2592640"
  },
  {
    "text": "this and turned this to English to the extent this is this is English uh Christina is also great in in organizing",
    "start": "2592640",
    "end": "2600079"
  },
  {
    "text": "and also thank you all for uh you know listening uh and with this I hope you do great stuff in the future this is all",
    "start": "2600079",
    "end": "2607760"
  },
  {
    "text": "the additional material um uh okay uh",
    "start": "2607760",
    "end": "2612920"
  },
  {
    "text": "I'll show this little cartoon uh but that this is this uh does does anybody in the audience know who the little guy",
    "start": "2612920",
    "end": "2618839"
  },
  {
    "text": "is what the name of the little guy is nobody it's my name Rocky okay uh he was",
    "start": "2618839",
    "end": "2625920"
  },
  {
    "text": "a flying squirrel and uh there you go thank uh but let me let me go back to",
    "start": "2625920",
    "end": "2631520"
  },
  {
    "text": "that thank you all I'll take I'll take comments in the",
    "start": "2631520",
    "end": "2637400"
  }
]