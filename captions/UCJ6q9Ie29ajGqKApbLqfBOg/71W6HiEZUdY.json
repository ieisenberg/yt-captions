[
  {
    "start": "0",
    "end": "65000"
  },
  {
    "text": "okay so good afternoon everyone welcome to our session this talk is about a hard",
    "start": "30",
    "end": "7350"
  },
  {
    "text": "hard way are supported control for integrity we name it as policy agnostic",
    "start": "7350",
    "end": "14250"
  },
  {
    "text": "control flow integrity this is not a new topic but it's been a very hot topic recently so we trying to tell you more",
    "start": "14250",
    "end": "21900"
  },
  {
    "text": "of our research outcome in this area especially to involve hardware in the",
    "start": "21900",
    "end": "27930"
  },
  {
    "text": "whole scenario so before the talk I",
    "start": "27930",
    "end": "33120"
  },
  {
    "text": "would like to introduce myself and the other two speakers my name is Eugene and I'm from",
    "start": "33120",
    "end": "39660"
  },
  {
    "text": "University of Central Florida I'm also a researcher in the cyber immunity lab and",
    "start": "39660",
    "end": "44750"
  },
  {
    "text": "the other two speakers one is in Sullivan and the other Orlando areas",
    "start": "44750",
    "end": "50100"
  },
  {
    "text": "they all from the University of Central Florida and you can tell that we wear all the codes we have because in we",
    "start": "50100",
    "end": "58829"
  },
  {
    "text": "build in Florida for too long we almost forget how to survive in winter so going",
    "start": "58829",
    "end": "65760"
  },
  {
    "start": "65000",
    "end": "100000"
  },
  {
    "text": "through this talk though this is a high-level outline of our talk so we",
    "start": "65760",
    "end": "73920"
  },
  {
    "text": "will introduce the motivation and the run time attacks and also then we will discuss the defense against the code",
    "start": "73920",
    "end": "82200"
  },
  {
    "text": "reuse attacks and then our work in hardware design requirement and the core",
    "start": "82200",
    "end": "87840"
  },
  {
    "text": "part of the policy agnostic CFI control flow integrity so before I'm going",
    "start": "87840",
    "end": "95780"
  },
  {
    "text": "inside the we will not change oh good so",
    "start": "95780",
    "end": "102750"
  },
  {
    "start": "100000",
    "end": "117000"
  },
  {
    "text": "before we introduce the key technology key techniques so we want to discuss the",
    "start": "102750",
    "end": "110549"
  },
  {
    "text": "motivation the motivation is that the high-level motivation is very simple we want to protect all the native code",
    "start": "110549",
    "end": "117240"
  },
  {
    "text": "so one thing we want to discuss first is that we have been for many decades of",
    "start": "117240",
    "end": "123329"
  },
  {
    "text": "runtime attack the arm raise and starting from the 1988 at the first",
    "start": "123329",
    "end": "129899"
  },
  {
    "text": "internet forum and then we have the code inject a care return to Liberty attack and Ayana and",
    "start": "129899",
    "end": "136800"
  },
  {
    "text": "then in 2007 they come to the return oriented programming it's kind of like",
    "start": "136800",
    "end": "142800"
  },
  {
    "text": "open a new arena for the attack and defense and the multiple defense",
    "start": "142800",
    "end": "148020"
  },
  {
    "text": "solution has been proposed and they all begin bypassed and then new solution have been developed so even though it's",
    "start": "148020",
    "end": "158070"
  },
  {
    "start": "154000",
    "end": "213000"
  },
  {
    "text": "been like decades in this area we still see a lot of very recent examples that",
    "start": "158070",
    "end": "164400"
  },
  {
    "text": "people using this return or rent oriented programming or we call the",
    "start": "164400",
    "end": "171570"
  },
  {
    "text": "color reuse attack to compromise our modern system and this is the 2013 case",
    "start": "171570",
    "end": "178110"
  },
  {
    "text": "and we have a 2015 case in a black head presentation and even in this year's the",
    "start": "178110",
    "end": "184470"
  },
  {
    "text": "cisco router exploit and the government kind of like trying to attack it a human",
    "start": "184470",
    "end": "192300"
  },
  {
    "text": "rights group so everyone says that this area is a very interesting area it's",
    "start": "192300",
    "end": "198510"
  },
  {
    "text": "been investigated for so long but we keep on finding some new weakness in our",
    "start": "198510",
    "end": "205170"
  },
  {
    "text": "new defense solutions where people can bypass those defend solution and so",
    "start": "205170",
    "end": "214739"
  },
  {
    "text": "again another high-level thing so that we want to see that of it we know that",
    "start": "214739",
    "end": "220560"
  },
  {
    "text": "you see the high pack impact and we also not just academic the the industry also",
    "start": "220560",
    "end": "226830"
  },
  {
    "text": "proposed so many solutions like these are a list of their tools provided but I",
    "start": "226830",
    "end": "235770"
  },
  {
    "text": "mean very sadly that this method have already been through either can be",
    "start": "235770",
    "end": "241920"
  },
  {
    "text": "bypassed or not sufficient enough so so this eventually as we said azam race is",
    "start": "241920",
    "end": "248459"
  },
  {
    "text": "and very interesting attacking scenario that we keep on come up with new defense",
    "start": "248459",
    "end": "255720"
  },
  {
    "text": "but new offense method seems even top of a factor so again this is we give a very",
    "start": "255720",
    "end": "265620"
  },
  {
    "start": "262000",
    "end": "336000"
  },
  {
    "text": "high-level summary of would have already been proposed so people always ask oh this is a very hot",
    "start": "265620",
    "end": "271350"
  },
  {
    "text": "area people proposed so many solutions and this is a very high-level summary from the first side we have so many CFI",
    "start": "271350",
    "end": "279530"
  },
  {
    "text": "Rocard binds efi a bunch of them the some of them from academic some of them",
    "start": "279530",
    "end": "285810"
  },
  {
    "text": "from industry however for a tech side we have so many attacks method also been",
    "start": "285810",
    "end": "292890"
  },
  {
    "text": "proposed to either bypass or to compromise the whole protection solution",
    "start": "292890",
    "end": "299430"
  },
  {
    "text": "so so up the decades of this M race we are still seeking practical and a secure",
    "start": "299430",
    "end": "306210"
  },
  {
    "text": "solution and if this is the the I would say the beauty of cyber security",
    "start": "306210",
    "end": "312150"
  },
  {
    "text": "research topic that some reason topic we may find as a fundamental solution but not on this one so that's why we keep on",
    "start": "312150",
    "end": "319380"
  },
  {
    "text": "coming up with new idea and our research is trying to provide from hardware",
    "start": "319380",
    "end": "324420"
  },
  {
    "text": "perspective some fundamental solution so going further discuss the water running",
    "start": "324420",
    "end": "334020"
  },
  {
    "text": "time attack would be so first it's some",
    "start": "334020",
    "end": "340260"
  },
  {
    "start": "336000",
    "end": "432000"
  },
  {
    "text": "like background just for your information if you already know that you can skip this slide so first thing is",
    "start": "340260",
    "end": "345270"
  },
  {
    "text": "that we call a code inject attacks it was a coding Jack attack so we have",
    "start": "345270",
    "end": "350640"
  },
  {
    "text": "basic blocks there and the attackers can leverage some of the design flaws for",
    "start": "350640",
    "end": "357780"
  },
  {
    "text": "example like buffer overflow it's a very popular bug and then the attacker will",
    "start": "357780",
    "end": "364350"
  },
  {
    "text": "interact a malicious coded there so then they will changes a control flow and",
    "start": "364350",
    "end": "371180"
  },
  {
    "text": "22.2 the militias in java code so that they can do anything they want to",
    "start": "372770",
    "end": "379800"
  },
  {
    "text": "compromise system but this has been protected nicely by a very simple solution the DEP the data executive",
    "start": "379800",
    "end": "387570"
  },
  {
    "text": "prevention so then come up with a color reuse attack this time since the",
    "start": "387570",
    "end": "394280"
  },
  {
    "text": "injected coder will not be exact it so the attacker will change in the control",
    "start": "394280",
    "end": "399420"
  },
  {
    "text": "flow and reusing some existing code blocks",
    "start": "399420",
    "end": "405569"
  },
  {
    "text": "via so in this way they can build up the functionality they don't really need to",
    "start": "405569",
    "end": "412530"
  },
  {
    "text": "rely on any of the newly injected code but just a reusing the existing code but",
    "start": "412530",
    "end": "418229"
  },
  {
    "text": "just to organize them in the malicious way so this is the official name is we",
    "start": "418229",
    "end": "424889"
  },
  {
    "text": "call the return oriented programming or it's recorded be a prominent code of",
    "start": "424889",
    "end": "431880"
  },
  {
    "text": "reuse attacks so and it helped been proved to be turing-complete so this is",
    "start": "431880",
    "end": "438419"
  },
  {
    "start": "432000",
    "end": "476000"
  },
  {
    "text": "really like horrifying people because people sometime argue there are things you can only use existing code maybe you",
    "start": "438419",
    "end": "445319"
  },
  {
    "text": "cannot do anything you want but people have to prove that ok turing-complete so before going tip of the the Rob",
    "start": "445319",
    "end": "455639"
  },
  {
    "text": "attack here is some like basic steps that how you need to perform a Rob",
    "start": "455639",
    "end": "460860"
  },
  {
    "text": "attack and a Thea is some of the terminology that we will use the iron arm of the returning structuring the",
    "start": "460860",
    "end": "468620"
  },
  {
    "text": "basic block or the instruction sequence chain that we use in every gadget we",
    "start": "468620",
    "end": "473969"
  },
  {
    "text": "combine them together so again so what's the thread model here so what are we",
    "start": "473969",
    "end": "481020"
  },
  {
    "start": "476000",
    "end": "520000"
  },
  {
    "text": "really trying to protect here so in in our work we first assume that the",
    "start": "481020",
    "end": "488509"
  },
  {
    "text": "application is protected by GDP and the",
    "start": "488509",
    "end": "493650"
  },
  {
    "text": "attacker knows the memory layout it's transparent but what does attacker can",
    "start": "493650",
    "end": "499500"
  },
  {
    "text": "do first the attack can disclose the readable memory and then the attacker",
    "start": "499500",
    "end": "506400"
  },
  {
    "text": "can manipulate the writable memory so this is the baseline this is very like",
    "start": "506400",
    "end": "512339"
  },
  {
    "text": "low request to attack that if the attacker have this capability then we",
    "start": "512339",
    "end": "517440"
  },
  {
    "text": "believe that it's a reasonable attack model and then comes our solution that",
    "start": "517440",
    "end": "523469"
  },
  {
    "start": "520000",
    "end": "631000"
  },
  {
    "text": "we want to defend against the code reuse attack and in would have pick this up",
    "start": "523469",
    "end": "531920"
  },
  {
    "text": "okay so without you know belaboring the point just for some background information and completeness there's",
    "start": "533089",
    "end": "539910"
  },
  {
    "text": "sort of two defenses against code reuse attacks and you can either apply randomization or control flow integrity",
    "start": "539910",
    "end": "546200"
  },
  {
    "text": "randomization is a great defense because it has really low performance overhead and scales well with complex software",
    "start": "546200",
    "end": "553500"
  },
  {
    "text": "like operating systems and browsers however it's vulnerable to information",
    "start": "553500",
    "end": "558990"
  },
  {
    "text": "disclosure and requires a high amount of entropy from sort of some brute forcing style attack control so integrity on the",
    "start": "558990",
    "end": "566610"
  },
  {
    "text": "other hand offers formal security guarantees but there's some trade-offs associated with The Associated analysis",
    "start": "566610",
    "end": "574260"
  },
  {
    "text": "to build a control flow integrity policy that requires trade-offs and performance",
    "start": "574260",
    "end": "579420"
  },
  {
    "text": "and security and it's also challenging to integrate a complex software and to",
    "start": "579420",
    "end": "584850"
  },
  {
    "text": "cover completely a operating system overall randomization ultimately is",
    "start": "584850",
    "end": "591990"
  },
  {
    "text": "vulnerable to memory leakage it's both direct and indirect memory disclosure will allow you to break sort of the most",
    "start": "591990",
    "end": "598740"
  },
  {
    "text": "fine grain and Salar scheme to date and this is basically just reading a direct code pointer in a code page or leaking a",
    "start": "598740",
    "end": "607079"
  },
  {
    "text": "code pointer from a data page it's just a stack or heap this is trivial to do and has been shown to be trivial to do",
    "start": "607079",
    "end": "612600"
  },
  {
    "text": "in JIT style codes like in a browser in your firefox and our collaborators have",
    "start": "612600",
    "end": "617970"
  },
  {
    "text": "sort of examined that extensively and shown that current randomization defenses or fine-grained randomization",
    "start": "617970",
    "end": "624269"
  },
  {
    "text": "defenses are actually vulnerable to that so this is the current state of the art for randomization so we're going to go",
    "start": "624269",
    "end": "632310"
  },
  {
    "start": "631000",
    "end": "695000"
  },
  {
    "text": "ahead and start talking about the requirements right so what you have to sort of solve if you want to build some",
    "start": "632310",
    "end": "637620"
  },
  {
    "text": "hardware defense um but before we do that I just need to sort of get a baseline for everybody on what control",
    "start": "637620",
    "end": "643949"
  },
  {
    "text": "file integrity ultimately is and it is effectively just restricting control flow to benign and correct targets and",
    "start": "643949",
    "end": "651779"
  },
  {
    "text": "the intuition is very straightforward could reuse attacks divert control flow from benign and direct targets so",
    "start": "651779",
    "end": "658110"
  },
  {
    "text": "presumably if I have a great CFI policy I'm going to be able to detect some",
    "start": "658110",
    "end": "663690"
  },
  {
    "text": "control flow hijacking this is again approval e to correct security mechanism with a powerful",
    "start": "663690",
    "end": "670530"
  },
  {
    "text": "attack model in the sense that I have I allow the attacker access to complete memory and allow him access to write up",
    "start": "670530",
    "end": "678030"
  },
  {
    "text": "data pages that are writable and to read code pages so he can actually look at what sort of where functions are in the",
    "start": "678030",
    "end": "685110"
  },
  {
    "text": "program space and so we sort of don't assume that randomization is in place it",
    "start": "685110",
    "end": "690750"
  },
  {
    "text": "also provides deterministic protection at runtime so the basics are fairly",
    "start": "690750",
    "end": "697530"
  },
  {
    "start": "695000",
    "end": "842000"
  },
  {
    "text": "straightforward we have two basic blocks and what we want to do is from the control flow graph we want to build a",
    "start": "697530",
    "end": "702630"
  },
  {
    "text": "sort of labeling mechanism that determines where to and from these control flow box can redirect control so",
    "start": "702630",
    "end": "710040"
  },
  {
    "text": "in this case we have this node label a and we're going to check at exit if it's targeting its intended of path otherwise",
    "start": "710040",
    "end": "718200"
  },
  {
    "text": "it's going to throw an error if it targets a separate path of course the issue is that control flow and graph",
    "start": "718200",
    "end": "726060"
  },
  {
    "text": "analysis is in general undecidable so what you do is you typically do what's called a points to analysis and this is",
    "start": "726060",
    "end": "732930"
  },
  {
    "text": "conservative the intuition is that you don't want to and intentionally under",
    "start": "732930",
    "end": "740310"
  },
  {
    "text": "approximate the control flow the points to analysis so that you have a more precise pointer set rather you're going",
    "start": "740310",
    "end": "749070"
  },
  {
    "text": "to over approximate that to prevent breaking the program what this leads to though in terms of the issues with CFI",
    "start": "749070",
    "end": "756270"
  },
  {
    "text": "is that the precision of the control flow graph analysis actually determines the security of a CFI policy so ideally",
    "start": "756270",
    "end": "762930"
  },
  {
    "text": "we'd like every edge in the control flow graph to be unique so that you can't sort of arbitrarily redirect control or",
    "start": "762930",
    "end": "769200"
  },
  {
    "text": "bin control flow within your CFI policy so as an example of this we can have",
    "start": "769200",
    "end": "775770"
  },
  {
    "text": "some sort of static analysis that's flow and context sensitive where we can recover completely the intended control",
    "start": "775770",
    "end": "783090"
  },
  {
    "text": "flow targets at a particular point however this requires a mini CFI check at that instrumentation point and",
    "start": "783090",
    "end": "790560"
  },
  {
    "text": "basically is going to degrade performance overall so as an optimization step or a",
    "start": "790560",
    "end": "796020"
  },
  {
    "text": "concession we merge these labels in this case four and five from node B so that we have a single",
    "start": "796020",
    "end": "804329"
  },
  {
    "text": "label and we reduce the number of checks we have to perform after eat before each control flow transfer I mean ultimately",
    "start": "804329",
    "end": "812040"
  },
  {
    "text": "this is going to this is an instance of where the CFG provision precision",
    "start": "812040",
    "end": "818130"
  },
  {
    "text": "reduces the security because because an attacker can we redirect control flow to",
    "start": "818130",
    "end": "825810"
  },
  {
    "text": "labels where the emerging has occurred in this case I can redirect control if I",
    "start": "825810",
    "end": "831690"
  },
  {
    "text": "find some vulnerability within node C to node D or just back to node C again to",
    "start": "831690",
    "end": "837540"
  },
  {
    "text": "come to perform some loop operation and my code reduce attack what we found is",
    "start": "837540",
    "end": "844139"
  },
  {
    "start": "842000",
    "end": "916000"
  },
  {
    "text": "that a dynamic points to analysis actually kind of resolves this issue and what that effectively is is an estimate",
    "start": "844139",
    "end": "851310"
  },
  {
    "text": "of the number of runtime branches that can be referenced at a particular indirect branch site during runtime and",
    "start": "851310",
    "end": "857160"
  },
  {
    "text": "the method is we just insert an indirect callback a call back at the indirect branch target site to a routine that",
    "start": "857160",
    "end": "864300"
  },
  {
    "text": "tries to match its points to set and if we find a match then we sort of count",
    "start": "864300",
    "end": "869519"
  },
  {
    "text": "that as a reference within the valid points to set and we found that",
    "start": "869519",
    "end": "874560"
  },
  {
    "text": "basically during runtime 90% of the dynamic points to set were singleton so the over approximation and static",
    "start": "874560",
    "end": "882000"
  },
  {
    "text": "analysis can be reduced to unique branches if you incorporate a dynamic",
    "start": "882000",
    "end": "887399"
  },
  {
    "text": "runtime I mean a dynamic points to analysis into your control flow graph construction of course this is limited",
    "start": "887399",
    "end": "894449"
  },
  {
    "text": "by the execution path coverage right so it's not it's sort of undecidable that a",
    "start": "894449",
    "end": "899519"
  },
  {
    "text": "program will halt and so if we can be guaranteed that will will cover the entire execution trace of the program",
    "start": "899519",
    "end": "906269"
  },
  {
    "text": "but given this we can sort of recover more CFG precision overall and prevent",
    "start": "906269",
    "end": "911519"
  },
  {
    "text": "this sort of style of control flow bending within the policy itself so",
    "start": "911519",
    "end": "917600"
  },
  {
    "start": "916000",
    "end": "926000"
  },
  {
    "text": "ultimately what we're doing is we're protecting certain types of instructions and we're only protecting instructions",
    "start": "917600",
    "end": "923759"
  },
  {
    "text": "that are dereferencing memory and directly write direct code pointers are not something that we're concerned with",
    "start": "923759",
    "end": "930089"
  },
  {
    "start": "926000",
    "end": "961000"
  },
  {
    "text": "because you can't code pages are not writable right but this is an issue for instrumentation",
    "start": "930089",
    "end": "935959"
  },
  {
    "text": "so 15% of the branches are indirect given a in a general case and a general",
    "start": "935959",
    "end": "942829"
  },
  {
    "text": "execution trace of a program the large majority of them are returns and indirect calls but there's going to be",
    "start": "942829",
    "end": "949160"
  },
  {
    "text": "some jumps as well which amounts to billions of executed branch instructions and if we're going to do static",
    "start": "949160",
    "end": "955749"
  },
  {
    "text": "instrumentation where we have a function call a return or a jump and we need to",
    "start": "955749",
    "end": "962600"
  },
  {
    "start": "961000",
    "end": "1042000"
  },
  {
    "text": "sort of instrument the the code to do a CFI check where what we're doing is be referencing from the target destination",
    "start": "962600",
    "end": "968869"
  },
  {
    "text": "the label and then we're doing a comparison prior to transferring control right that this is going to incur",
    "start": "968869",
    "end": "975139"
  },
  {
    "text": "significant amount of overhead both in instruction latency and instructions side and on average that degrade that",
    "start": "975139",
    "end": "981739"
  },
  {
    "text": "degrades performance pretty rapidly so what we measured is that we have some average of 35 percent slowdown if you're",
    "start": "981739",
    "end": "988459"
  },
  {
    "text": "doing these styles of checks across these different types of CPUs so we have some server and CPUs and some more high",
    "start": "988459",
    "end": "994999"
  },
  {
    "text": "performance i7 CPUs and the performance degradation is pretty constant across them there's also some other issues",
    "start": "994999",
    "end": "1003069"
  },
  {
    "text": "associated with different elements within the micro architectural stack so I cache pressure reduces due to this",
    "start": "1003069",
    "end": "1009369"
  },
  {
    "text": "instrumentation pretty significantly and the the degradation and memory access",
    "start": "1009369",
    "end": "1016299"
  },
  {
    "text": "latency is the one that were most concerned with right so dereferencing memory rate is going to basically occupy",
    "start": "1016299",
    "end": "1023739"
  },
  {
    "text": "a lot of the overhead and it's going to dominate that so in a sort of hardware",
    "start": "1023739",
    "end": "1028839"
  },
  {
    "text": "based solution you're going to want to try and reduce that right by adding potentially dedicated element storage",
    "start": "1028839",
    "end": "1034329"
  },
  {
    "text": "elements to maintain your CFI metadata that is used in checking your CFI policy",
    "start": "1034329",
    "end": "1042750"
  },
  {
    "text": "finally there's some other issues with label granularity that need to be resolved and pose issues for CFI policy",
    "start": "1043740",
    "end": "1051429"
  },
  {
    "text": "overall so ultimately calls the shared objects cannot be recalled either external objects where I'm like sort of",
    "start": "1051429",
    "end": "1057340"
  },
  {
    "text": "linking in something externally when I'm compiling it and the idea is you don't really know how to label this you can't",
    "start": "1057340",
    "end": "1063850"
  },
  {
    "text": "actually a fix a label to this at runtime the because multiple other objects multiple",
    "start": "1063850",
    "end": "1069159"
  },
  {
    "text": "processes are going to be trying to access this right so process a wants to you know get some function from lid C",
    "start": "1069159",
    "end": "1076659"
  },
  {
    "text": "and process being once they get the same function so how do i label those and that's the basic issue so the solution",
    "start": "1076659",
    "end": "1083200"
  },
  {
    "text": "to this traditionally has been just to apply a single label to all those external functions of course this is not",
    "start": "1083200",
    "end": "1090820"
  },
  {
    "text": "ideal because we can ultimately just redirect control to all of those labels because it's just a simple CFI check so",
    "start": "1090820",
    "end": "1098020"
  },
  {
    "text": "this is an example of sort of some concession you have to make based on some limitation in the control flow",
    "start": "1098020",
    "end": "1103960"
  },
  {
    "text": "graph analysis coverage that some dynamic points to analysis can help and to recover and resolve ultimately so the",
    "start": "1103960",
    "end": "1112559"
  },
  {
    "start": "1112000",
    "end": "1174000"
  },
  {
    "text": "coarse grained CFI policies sort of amount to are reduced to generic",
    "start": "1112559",
    "end": "1120059"
  },
  {
    "text": "abstractions on the check so for instance you can only return to a call preceded instruction in this case you",
    "start": "1120059",
    "end": "1126940"
  },
  {
    "text": "know the ret will either target these and these are all great right but if i jump there then you know if i can't I",
    "start": "1126940",
    "end": "1132580"
  },
  {
    "text": "can't do that all right and so for forward edge policy something similar occurs i can only target forward edges",
    "start": "1132580",
    "end": "1139240"
  },
  {
    "text": "and it will trigger a fault if i target something other than a function entry all right so this sounds great right but",
    "start": "1139240",
    "end": "1146919"
  },
  {
    "text": "in the long run reason it is sort of determined that there isn't really great there are too many call sites available",
    "start": "1146919",
    "end": "1154020"
  },
  {
    "text": "the heuristics associated with um like the length of the number of returns",
    "start": "1154020",
    "end": "1160510"
  },
  {
    "text": "executed prior to executing a system call or too many indirect jumps and",
    "start": "1160510",
    "end": "1167169"
  },
  {
    "text": "calls all basically provide wiggle room for me to sort of bend the control flow",
    "start": "1167169",
    "end": "1172270"
  },
  {
    "text": "within these policies and around these policies and there's been a significant amount of work done demonstrating this",
    "start": "1172270",
    "end": "1178480"
  },
  {
    "start": "1174000",
    "end": "1206000"
  },
  {
    "text": "and the list goes on I basically just highlighted the ones that I think are the most interesting so for instance",
    "start": "1178480",
    "end": "1186429"
  },
  {
    "text": "coop is incredibly difficult to solve as an in general no CFI defense not even on",
    "start": "1186429",
    "end": "1192450"
  },
  {
    "text": "lob MV table verification which does very very fine-grain class hierarchy",
    "start": "1192450",
    "end": "1198100"
  },
  {
    "text": "distinctions between virtual table functions can't handle coupe so this is like one",
    "start": "1198100",
    "end": "1203290"
  },
  {
    "text": "issue that still is sort of open for research so and a final thing that we",
    "start": "1203290",
    "end": "1210280"
  },
  {
    "start": "1206000",
    "end": "1215000"
  },
  {
    "text": "need to sort of think about when we're talking about our labeling is return these are the totally difficult to",
    "start": "1210280",
    "end": "1217150"
  },
  {
    "start": "1215000",
    "end": "1357000"
  },
  {
    "text": "manage because you could have two functions targeting a single call site and my control flow graph analysis is",
    "start": "1217150",
    "end": "1223780"
  },
  {
    "text": "basically going to recover this sort of",
    "start": "1223780",
    "end": "1229000"
  },
  {
    "text": "label 1 and label to write as its points to set okay now imagine that I make a",
    "start": "1229000",
    "end": "1235210"
  },
  {
    "text": "call from function a and then redirect too late to back to B this is valid",
    "start": "1235210",
    "end": "1243700"
  },
  {
    "text": "within my control file integrity policy because the points to set is actually label to is valid within this set so",
    "start": "1243700",
    "end": "1250290"
  },
  {
    "text": "this basically allows granularity in your return address protection and a",
    "start": "1250290",
    "end": "1255580"
  },
  {
    "text": "shadow start actually solves this right a shadow stack tightly coupled call return pairs basically it guarantees",
    "start": "1255580",
    "end": "1261880"
  },
  {
    "text": "that you'll only return to your most recent call site okay but this",
    "start": "1261880",
    "end": "1266890"
  },
  {
    "text": "unfortunately encourage some sort of overhead so while ideally I would like",
    "start": "1266890",
    "end": "1273310"
  },
  {
    "text": "to implement a shadow stack policy you're going to have to address some issues with memory hierarchy latency and",
    "start": "1273310",
    "end": "1279490"
  },
  {
    "text": "bandwidth and sort of nested function calls so just some basic analysis in some generic environment we've done some",
    "start": "1279490",
    "end": "1287730"
  },
  {
    "text": "analysis with the memory hierarchy bottlenecks and sort of read latency is kind of stable and it's not very high",
    "start": "1287730",
    "end": "1294280"
  },
  {
    "text": "right and if you to in read latency then you can incur get a significant",
    "start": "1294280",
    "end": "1300070"
  },
  {
    "text": "improvement in the overhead for your shadow stack implementation but you have",
    "start": "1300070",
    "end": "1305320"
  },
  {
    "text": "to do that custom right we want to sort of avoid nobody wants to sort of go in and tune every sort of program they've",
    "start": "1305320",
    "end": "1311530"
  },
  {
    "text": "ever written what about let's see what about you know this is it's too much and you can see here like that the",
    "start": "1311530",
    "end": "1318040"
  },
  {
    "text": "degradation in performance which is the red line sort of drops off significantly at around twenty nested function calls",
    "start": "1318040",
    "end": "1324850"
  },
  {
    "text": "on so this is a typical sort of behavior that's going to affect your shadow stack overall surprisingly though these these",
    "start": "1324850",
    "end": "1334240"
  },
  {
    "text": "two works right here these two I need to include two pieces of research because they're great it actually says traditional Java stack only incur twelve",
    "start": "1334240",
    "end": "1340780"
  },
  {
    "text": "percent overhead so there are optimizations that you can make to reduce what we've shown here and LLVM",
    "start": "1340780",
    "end": "1347680"
  },
  {
    "text": "stay stuck which is a new protection that's just being incorporated into the LLVM stream actually only incurs 0.1%",
    "start": "1347680",
    "end": "1354790"
  },
  {
    "text": "overhead unfortunately despite the reduction in",
    "start": "1354790",
    "end": "1360190"
  },
  {
    "text": "overhead they've done that at the cost of security and so our collaborators who unfortunately couldn't be here to speak",
    "start": "1360190",
    "end": "1365920"
  },
  {
    "text": "about this topic have investigated this and found that you can in fact break CFI",
    "start": "1365920",
    "end": "1373420"
  },
  {
    "text": "implementations that are using shadow software shadow stack and one of the reasons for this is that they optimized",
    "start": "1373420",
    "end": "1379600"
  },
  {
    "text": "a compiler critical CFI pointers that are spilled onto the stack and they're able to use an overwrite to corrupt that",
    "start": "1379600",
    "end": "1386590"
  },
  {
    "text": "filled pointer at which point when the CFI checking mechanism go start to work",
    "start": "1386590",
    "end": "1393010"
  },
  {
    "text": "it doesn't realize that there's a malicious efi pointer in the stack so",
    "start": "1393010",
    "end": "1398220"
  },
  {
    "text": "this is actually shown to bypass this uh IFC see on vtable verification",
    "start": "1398220",
    "end": "1404050"
  },
  {
    "text": "implementation for safe stack and as so",
    "start": "1404050",
    "end": "1410100"
  },
  {
    "text": "given that we have the sort of overview that we have these forward edge policies",
    "start": "1410100",
    "end": "1415150"
  },
  {
    "text": "that are really great now for CFI we have google's VTV and i FCC safe",
    "start": "1415150",
    "end": "1420580"
  },
  {
    "text": "dispatch which can really really generate some fine-grained CFI policies",
    "start": "1420580",
    "end": "1426460"
  },
  {
    "text": "for C++ applications and the assumption is that the backward edge CFI through",
    "start": "1426460",
    "end": "1432250"
  },
  {
    "text": "safe to your shadow stack protection will completely solve this issue right we don't really have to think about",
    "start": "1432250",
    "end": "1438040"
  },
  {
    "text": "control flow hijacking anymore we just say we just use the TV in combination",
    "start": "1438040",
    "end": "1443110"
  },
  {
    "text": "with some software shadow stacks like for instance all of them clinging except tomorrow you're going to hear a talk and",
    "start": "1443110",
    "end": "1450100"
  },
  {
    "text": "I recommend you all go there where some researchers and ESCO tests and herbert",
    "start": "1450100",
    "end": "1455890"
  },
  {
    "text": "boss thinks from the USAC will be presenting a bypass playing safe stack so what this cordis shows is that like",
    "start": "1455890",
    "end": "1463179"
  },
  {
    "text": "sort of the underlying assumptions behind shelf software shot sex and being able to main maintain",
    "start": "1463179",
    "end": "1469210"
  },
  {
    "text": "isolation within the software stock is going to be problematic overall we want to kind of address that issue so with",
    "start": "1469210",
    "end": "1477489"
  },
  {
    "text": "that background information and sort of the motivation details we're going to try and introduce at a base level what",
    "start": "1477489",
    "end": "1483039"
  },
  {
    "text": "the our implementation actually is we call it hey six plus plus it was presented at DAC in 2015 we also",
    "start": "1483039",
    "end": "1490509"
  },
  {
    "text": "presented a prior work in back in 2015 which it's called hey fix and won the best paper there it was with our",
    "start": "1490509",
    "end": "1497590"
  },
  {
    "text": "collaborators here and the outcomes of that are that we have some really",
    "start": "1497590",
    "end": "1503229"
  },
  {
    "text": "stateful policy agnostic CFI implementation for both backward and forward edges we created some",
    "start": "1503229",
    "end": "1511119"
  },
  {
    "text": "implementation that doesn't require source code modifications to instrument your application or to recover a CFG we",
    "start": "1511119",
    "end": "1520149"
  },
  {
    "text": "have a precise fee fi policy enforcement for both forward and backward edges with no heuristics incorporated and we try to",
    "start": "1520149",
    "end": "1526929"
  },
  {
    "text": "limit the amount of concessions and we'll sort of go over what those concessions are but we think those are good anyway we also have some isolated",
    "start": "1526929",
    "end": "1533679"
  },
  {
    "text": "memory for CFI metadata it turns out that when it when we actually incorporate the entire system and",
    "start": "1533679",
    "end": "1540070"
  },
  {
    "text": "encourage less than 3% overhead which is as a worst case which is pretty good in",
    "start": "1540070",
    "end": "1545619"
  },
  {
    "text": "our in our estimation and it supports multitasking and shared library so it's practical and can scale to complex",
    "start": "1545619",
    "end": "1552549"
  },
  {
    "text": "software we also have a mechanism for interoperability with legacy code which",
    "start": "1552549",
    "end": "1558039"
  },
  {
    "text": "is kind of important because not everything that you're executing on your system is going to be instrumented with",
    "start": "1558039",
    "end": "1564369"
  },
  {
    "text": "CFI protection so at a high level the state model has an initialization phase",
    "start": "1564369",
    "end": "1569559"
  },
  {
    "text": "which is in an idle state and is checking for a C if I disabled bit if we have C if I enabled then we just ain't",
    "start": "1569559",
    "end": "1576729"
  },
  {
    "text": "endorsed EFI execution and move forward for a forward edge control flow state",
    "start": "1576729",
    "end": "1581919"
  },
  {
    "text": "model it's again very straight forward which is one of the benefits of I think our implementation is it's sort of kind",
    "start": "1581919",
    "end": "1588309"
  },
  {
    "text": "of intuitive how you would implement this is ran a CFI execution state if we're executing just instructions that",
    "start": "1588309",
    "end": "1594669"
  },
  {
    "text": "are non-branching instructions right we just stay in this state we don't need to do anything if we encounter",
    "start": "1594669",
    "end": "1600130"
  },
  {
    "text": "call or jump then we need to save these call targets right so that later on when",
    "start": "1600130",
    "end": "1605380"
  },
  {
    "text": "we actually enter the target we can do a check all right so upon execution of the",
    "start": "1605380",
    "end": "1611350"
  },
  {
    "text": "call and jump it's just simply just the check workout no trap the program if it",
    "start": "1611350",
    "end": "1617800"
  },
  {
    "text": "does yet you're good to continue execution the same thing can be said for the backward edge CFI policy which",
    "start": "1617800",
    "end": "1624250"
  },
  {
    "text": "handles returns so again we're going to trap otherwise we're going to continue at the label state checking matches",
    "start": "1624250",
    "end": "1631260"
  },
  {
    "text": "again this offers a supportable co-financed efi processes and strict enforcement of unique ford edge and back",
    "start": "1631260",
    "end": "1638530"
  },
  {
    "text": "roads control flow target target in order to do this we have to sort of",
    "start": "1638530",
    "end": "1645130"
  },
  {
    "text": "manage the internal hardware in some way so we choose I chose a mechanism which is just maintaining an internal machine",
    "start": "1645130",
    "end": "1652120"
  },
  {
    "text": "register which has elements for the CFI",
    "start": "1652120",
    "end": "1657400"
  },
  {
    "text": "label and it can be extended into those reserved bits at the most significant bits of the register",
    "start": "1657400",
    "end": "1663910"
  },
  {
    "text": "we have some interrupt service requests flag for when the operating system needs to handle requests for switching tasks",
    "start": "1663910",
    "end": "1670720"
  },
  {
    "text": "or overflowing or under flowing the label states stack and we have some other sort of checks and flags that",
    "start": "1670720",
    "end": "1677380"
  },
  {
    "text": "enable us to moderate requests to the label state stacker label state register",
    "start": "1677380",
    "end": "1682600"
  },
  {
    "text": "to trigger errors to stop the execution or even to bow or gate the CFI hardware",
    "start": "1682600",
    "end": "1688750"
  },
  {
    "text": "so that you can sort of lower the energy consumption needed when there is no CFI necessary you don't need to sort of",
    "start": "1688750",
    "end": "1694840"
  },
  {
    "text": "check see if i so we've actually we've introduced the efi extensions to perform",
    "start": "1694840",
    "end": "1702340"
  },
  {
    "text": "these tasks these basic tasks it requires five we have a pre c in a pre j",
    "start": "1702340",
    "end": "1708100"
  },
  {
    "text": "so this sets up the call target and then we have a separate instruction of c fi branch that sets up the backward edge",
    "start": "1708100",
    "end": "1715030"
  },
  {
    "text": "target we want it to do this sort of architectural independent and not sort",
    "start": "1715030",
    "end": "1720340"
  },
  {
    "text": "of perform any optimizations specific to any is a where i might be able to incorporate the CFI procedure pj into a",
    "start": "1720340",
    "end": "1726940"
  },
  {
    "text": "CFI branch to make it as general as possible in order to accomplish so there",
    "start": "1726940",
    "end": "1733940"
  },
  {
    "text": "these instructions and manipulate them these guys sort of control the label state register in the label state stack",
    "start": "1733940",
    "end": "1739210"
  },
  {
    "text": "they have allow separation of calls and jumps right so there can't be any sort",
    "start": "1739210",
    "end": "1744769"
  },
  {
    "text": "of a funny business associated with using a jump pointer from a switch",
    "start": "1744769",
    "end": "1749809"
  },
  {
    "text": "statement as a pointer from a call and a lot of unique labels / targets and the",
    "start": "1749809",
    "end": "1756980"
  },
  {
    "text": "shadow stack enables return sewing the most recently issued Paul safe so just",
    "start": "1756980",
    "end": "1762559"
  },
  {
    "text": "as a quick overview and I'll kind of try to breeze through this we're going to set up the label state using a CFIB our",
    "start": "1762559",
    "end": "1769820"
  },
  {
    "text": "instruction by pushing a label on to the shadow stack we're then going to push the label for the return target into a",
    "start": "1769820",
    "end": "1775970"
  },
  {
    "text": "register this register is dedicated hardware so we don't have to do any memory dereference instructions you can",
    "start": "1775970",
    "end": "1781370"
  },
  {
    "text": "sort of access this in single cycle latency and sort of take advantage of modern out of order execution and",
    "start": "1781370",
    "end": "1788000"
  },
  {
    "text": "register renaming to handle this situation as quickly as possible once we",
    "start": "1788000",
    "end": "1794570"
  },
  {
    "text": "enter the target we're going to perform a CFI label check with what's currently at the label state register for a",
    "start": "1794570",
    "end": "1800570"
  },
  {
    "text": "forward edge once we then execute if that check passes then we're going to",
    "start": "1800570",
    "end": "1806480"
  },
  {
    "text": "enter the function and we're going to get to a point where we need to execute a return so that's when the return",
    "start": "1806480",
    "end": "1812570"
  },
  {
    "start": "1811000",
    "end": "1844000"
  },
  {
    "text": "policy ring comes into place the return policy is simply going to look at the most recently pushed label at the top of",
    "start": "1812570",
    "end": "1819799"
  },
  {
    "text": "the stack so we tightly couple the call and return pairs and this sort of grows down right as you would imagine it would",
    "start": "1819799",
    "end": "1826490"
  },
  {
    "text": "and it's very intuitive the idea right I make a call from A to B I'm a call from",
    "start": "1826490",
    "end": "1831590"
  },
  {
    "text": "B to C I can't return from C to a right in this implementation alright so the shadow stack tightly coupled these and",
    "start": "1831590",
    "end": "1837769"
  },
  {
    "text": "enforces that I'm only returning to us we to the most recent call site one",
    "start": "1837769",
    "end": "1846529"
  },
  {
    "start": "1844000",
    "end": "1889000"
  },
  {
    "text": "other thing we have to take care of it's sort of interfacing with the hardware in order to do that we have to sort of map",
    "start": "1846529",
    "end": "1851570"
  },
  {
    "text": "a label state stack status register to i/o and this sort of needs to this needs",
    "start": "1851570",
    "end": "1858740"
  },
  {
    "text": "to contain information for the operating system to handle the bounds for the shadow stack size the current pointer of",
    "start": "1858740",
    "end": "1864409"
  },
  {
    "text": "the shadow stack and ten some sort of interrupt request routine",
    "start": "1864409",
    "end": "1870020"
  },
  {
    "text": "that we serve we found down the line if we need to contact switch turning and underflow or underflow this could be",
    "start": "1870020",
    "end": "1875540"
  },
  {
    "text": "able to implemented as a machine specific register so that you don't have to do CPU buffs activities and you can",
    "start": "1875540",
    "end": "1882530"
  },
  {
    "text": "ensure only privileged access to that instruction just in our our case we didn't do that so to answer why sort of",
    "start": "1882530",
    "end": "1891710"
  },
  {
    "start": "1889000",
    "end": "1952000"
  },
  {
    "text": "you need hardware for CFI I think we try to show that in terms of efficiency you",
    "start": "1891710",
    "end": "1896720"
  },
  {
    "text": "can get improved runtime overhead with dedicated label register and shadow stack due to the instruction",
    "start": "1896720",
    "end": "1903920"
  },
  {
    "text": "instrumentation we have limited I cross pressure because we're emitting less code and using hard dedicated Hardware",
    "start": "1903920",
    "end": "1909980"
  },
  {
    "text": "element and register moves so we could eliminate that sort of degradation and",
    "start": "1909980",
    "end": "1916790"
  },
  {
    "text": "performance overall we also have reduced ecash pressure because we're not setting up some CFI metadata in the programs",
    "start": "1916790",
    "end": "1924560"
  },
  {
    "text": "data space we have a dedicated label state stack and that sort of avoids",
    "start": "1924560",
    "end": "1931070"
  },
  {
    "text": "referencing from d cache and those instructions that we instrument are that we've introduced are actually single",
    "start": "1931070",
    "end": "1936320"
  },
  {
    "text": "cycle instructions all we do is we simple we simply toggle the functional units so that they execute as no",
    "start": "1936320",
    "end": "1943340"
  },
  {
    "text": "operation instructions and then the CFI hardware sort of manages their operations separate from the out of",
    "start": "1943340",
    "end": "1950180"
  },
  {
    "text": "order functional unit and as from a security perspective we are sort of",
    "start": "1950180",
    "end": "1956390"
  },
  {
    "text": "eliminating the significant number of policy concessions due to a possibility",
    "start": "1956390",
    "end": "1961880"
  },
  {
    "text": "of pointer aliasing analysis and the associated labeling issues we have we do",
    "start": "1961880",
    "end": "1967610"
  },
  {
    "text": "this with a point one time points to analysis we have some isolated memory",
    "start": "1967610",
    "end": "1972890"
  },
  {
    "text": "which prevents the software shadow sack attacks like stack to filer represented I'm not exactly sure the details for the",
    "start": "1972890",
    "end": "1979310"
  },
  {
    "text": "talk tomorrow but potentially it prevents that as well and we have this precise policy enforcement that is",
    "start": "1979310",
    "end": "1984440"
  },
  {
    "text": "agnostic with respect to the labeling mechanism so if I want to label all of the arm if I want to label all of the",
    "start": "1984440",
    "end": "1991730"
  },
  {
    "text": "code in my CF I protected program with the same label then I have just a basic",
    "start": "1991730",
    "end": "1997520"
  },
  {
    "text": "single equivalence class via five policy and I could upgrade or downgrade that you know peruse",
    "start": "1997520",
    "end": "2005020"
  },
  {
    "text": "without being said I'm going to sort of introduce Orlando and he'll finish out the talk for us right so we have this",
    "start": "2005020",
    "end": "2012770"
  },
  {
    "text": "very nice piece of hardware that didn't hear introduced for us unfortunately we need to control this guy somehow we have",
    "start": "2012770",
    "end": "2020210"
  },
  {
    "text": "to run this on top of an operating system we have the problem the modern operating system to actually",
    "start": "2020210",
    "end": "2025250"
  },
  {
    "text": "multitasking systems and we only have one CFI module we have multiple processes though and plus we have legacy",
    "start": "2025250",
    "end": "2032540"
  },
  {
    "text": "code you know the program you go back in the year 2000 that your business really needs and you can't really replace so we",
    "start": "2032540",
    "end": "2039290"
  },
  {
    "text": "have a few showings ahead of us we need to be able to share this efi subsystem across multiple processes we need to",
    "start": "2039290",
    "end": "2045500"
  },
  {
    "text": "keep a separation of processes as well we need to keep the CFI state for each",
    "start": "2045500",
    "end": "2050570"
  },
  {
    "text": "process independent from each other we need to be able to handle whatever exceptions TRC f5 module exposures to us",
    "start": "2050570",
    "end": "2058190"
  },
  {
    "text": "close again the legacy code big elephant in the room there so we have to make a",
    "start": "2058190",
    "end": "2063710"
  },
  {
    "text": "few changes to the way programs run on your computer so we have a scheduling",
    "start": "2063710",
    "end": "2070159"
  },
  {
    "start": "2070000",
    "end": "2097000"
  },
  {
    "text": "issue first of all have a processes currently running the CPU and suddenly a",
    "start": "2070160",
    "end": "2075440"
  },
  {
    "text": "new process is being scared you'll come see and it has its own CFI state we need to be able to handle these things",
    "start": "2075440",
    "end": "2081200"
  },
  {
    "text": "somehow there is a second case that happens you have one process running",
    "start": "2081200",
    "end": "2086330"
  },
  {
    "text": "second process comes in it also has it doesn't have any CFI state it's not CFI",
    "start": "2086330",
    "end": "2091850"
  },
  {
    "text": "instrumented so we have to handle somehow what do you what to do here then",
    "start": "2091850",
    "end": "2098030"
  },
  {
    "text": "we have a problem with the shadow staggers world 11 shuttle stack turns",
    "start": "2098030",
    "end": "2103790"
  },
  {
    "text": "out space is limited and we have this pain on die broke into the cpu so we do",
    "start": "2103790",
    "end": "2109370"
  },
  {
    "text": "a function call or the program there's a function call just another function call and another",
    "start": "2109370",
    "end": "2116390"
  },
  {
    "text": "function call and another function call and we still have no returns and then we do another function call and we have a",
    "start": "2116390",
    "end": "2122780"
  },
  {
    "text": "problem we have no more space there so we run out of shadow stack space so what",
    "start": "2122780",
    "end": "2128750"
  },
  {
    "text": "do we do here well you could say yeah sure why not just get some metrics see",
    "start": "2128750",
    "end": "2134120"
  },
  {
    "start": "2131000",
    "end": "2186000"
  },
  {
    "text": "how big need to make the shadow stack and see what happens well unfortunately that's",
    "start": "2134120",
    "end": "2140570"
  },
  {
    "text": "not very scalable you can't really make this large memories put them inside of",
    "start": "2140570",
    "end": "2146270"
  },
  {
    "text": "CPU plus you can't also get a whole bunch of programs and say yeah my worst",
    "start": "2146270",
    "end": "2151850"
  },
  {
    "text": "case scenario in this set what T so I'm just going to build it like that then",
    "start": "2151850",
    "end": "2157340"
  },
  {
    "text": "there's also the thing that if you need to empty this area inside the CPU it takes time as well so if you're copying",
    "start": "2157340",
    "end": "2164780"
  },
  {
    "text": "that in kernel space you can see you're going to see something like that there if for some reason you feel like you",
    "start": "2164780",
    "end": "2171290"
  },
  {
    "text": "need to go into that shadow stack and put something else in that place it's going to take time if you do this doing",
    "start": "2171290",
    "end": "2177890"
  },
  {
    "text": "scheduling well your scheduler is now a lot slower you don't want your scheduler to eat of CPU time that much so that",
    "start": "2177890",
    "end": "2186410"
  },
  {
    "start": "2186000",
    "end": "2402000"
  },
  {
    "text": "means that let's talk some preliminaries here first of all a process control block is to sustain the standard data",
    "start": "2186410",
    "end": "2192530"
  },
  {
    "text": "structuring pretty much every single modern operating system it's how the operating system kernel sees your",
    "start": "2192530",
    "end": "2199220"
  },
  {
    "text": "processes if you're working in Linux you can look in that file in there for tax tasks drugs this takes about 1.7 kilo",
    "start": "2199220",
    "end": "2207170"
  },
  {
    "text": "bytes in a 32-bit system on Linux and well the process control block contains",
    "start": "2207170",
    "end": "2213470"
  },
  {
    "text": "some information about the process namely its execution state where we're running where some b-process were",
    "start": "2213470",
    "end": "2218990"
  },
  {
    "text": "suspended waiting for IO stuff like that week until it also contains all your",
    "start": "2218990",
    "end": "2224540"
  },
  {
    "text": "memory allocations that the process process has made who want the process",
    "start": "2224540",
    "end": "2229700"
  },
  {
    "text": "the group of the process important the process ID as well io starts information and well we also",
    "start": "2229700",
    "end": "2236390"
  },
  {
    "text": "have the CPU contact state we do see a five module on a CPU so let's look at",
    "start": "2236390",
    "end": "2243410"
  },
  {
    "text": "that guy and see what we have there on a modern system like x86 weeks before you have your interest rates or file which",
    "start": "2243410",
    "end": "2249950"
  },
  {
    "text": "gets backed up in there every time you do any task in in the Leon 3 processor",
    "start": "2249950",
    "end": "2257840"
  },
  {
    "text": "which is what we use stuff for implementation you have a couple more racers that you have to take care of you",
    "start": "2257840",
    "end": "2263690"
  },
  {
    "text": "have some floating-point registers you have CPU status registers and well since we're putting stuff in",
    "start": "2263690",
    "end": "2270660"
  },
  {
    "text": "there might as well put in all CSI information for the process in the cpu context today as well so we extend that",
    "start": "2270660",
    "end": "2278250"
  },
  {
    "text": "guy and every time we do we do a task switch or something happens for CFI",
    "start": "2278250",
    "end": "2284280"
  },
  {
    "text": "module we go ahead and modify the kernel to handle that for us so adding to the",
    "start": "2284280",
    "end": "2289950"
  },
  {
    "text": "scheduler then we need to see whether or current process you see fi aware or not",
    "start": "2289950",
    "end": "2295230"
  },
  {
    "text": "if it is we want to backup the SEFI state into a process control block and",
    "start": "2295230",
    "end": "2301800"
  },
  {
    "text": "the next process that we're about to execute which I can see whether or not",
    "start": "2301800",
    "end": "2306930"
  },
  {
    "text": "the FI aware if it is well use fixed order to a five-state otherwise just",
    "start": "2306930",
    "end": "2312480"
  },
  {
    "text": "disable to see a five module that being said have some animations here for that process one is currently running process",
    "start": "2312480",
    "end": "2319530"
  },
  {
    "text": "- it's about to be scheduled so we see that it's here process one is efi aware we get its efi state push it into into",
    "start": "2319530",
    "end": "2328560"
  },
  {
    "text": "the process control block we check process to see that it's efi aware well",
    "start": "2328560",
    "end": "2334020"
  },
  {
    "text": "just go ahead and restore that CSI state and now we're free to keep running process - what if nothing ever happen to",
    "start": "2334020",
    "end": "2340290"
  },
  {
    "text": "it on the second case well we have process one running we see that it's vfi",
    "start": "2340290",
    "end": "2346170"
  },
  {
    "text": "aware we are about to schedule process - so we backup process one on CFI state we",
    "start": "2346170",
    "end": "2353340"
  },
  {
    "text": "go to process two now we see that it's not the FI over so we just go ahead and",
    "start": "2353340",
    "end": "2358500"
  },
  {
    "text": "disable a TFI module we can go ahead and begin executing process two now and no",
    "start": "2358500",
    "end": "2363570"
  },
  {
    "text": "exceptions will occur at that point however there is still the stack on the stack issue we already use the process",
    "start": "2363570",
    "end": "2369960"
  },
  {
    "text": "control block for this plane so you might as well utilized for this as well on our flow use copy a portion of that",
    "start": "2369960",
    "end": "2376290"
  },
  {
    "text": "shadow stack into the process control block go ahead and move you move the top",
    "start": "2376290",
    "end": "2381390"
  },
  {
    "text": "portion of the shuttle stack to the bottom we can do this with a flash copy on hardware and then they said that",
    "start": "2381390",
    "end": "2387030"
  },
  {
    "text": "little shadow stack pointer to the its new location the underflow process is",
    "start": "2387030",
    "end": "2392160"
  },
  {
    "text": "effectively the same thing in Reverse got something from the process control block and put it back into the into the",
    "start": "2392160",
    "end": "2397980"
  },
  {
    "text": "shadow stack and again set the shadows pointer to the new location so in an",
    "start": "2397980",
    "end": "2404700"
  },
  {
    "start": "2402000",
    "end": "2420000"
  },
  {
    "text": "animation there you can see go ahead and get the bottom portion put it on the CFI",
    "start": "2404700",
    "end": "2411029"
  },
  {
    "text": "context on the portion of the process control block then you see your flash copy and execution continues as normal",
    "start": "2411029",
    "end": "2418109"
  },
  {
    "text": "now lastly we need to investigate or CFI faults there is a control flow violation",
    "start": "2418109",
    "end": "2425069"
  },
  {
    "start": "2420000",
    "end": "2533000"
  },
  {
    "text": "occurring well the subsystem detects it right now we just go ahead and add an",
    "start": "2425069",
    "end": "2431640"
  },
  {
    "text": "entry on the colonel logs and then we send to fig go to the process if you're familiar with the a UNIX way of signal",
    "start": "2431640",
    "end": "2438990"
  },
  {
    "text": "handling sig kill cannot be caught by user land at any points so we terminate",
    "start": "2438990",
    "end": "2444150"
  },
  {
    "text": "the process technically speaking we could go ahead and under set ascending",
    "start": "2444150",
    "end": "2449549"
  },
  {
    "text": "your signal ones and take actions based on that there's a few little miscellaneous steps as well that we need",
    "start": "2449549",
    "end": "2455849"
  },
  {
    "text": "to talk about so you need to have these instructions in your command your program so get an instrumenting compiler",
    "start": "2455849",
    "end": "2463410"
  },
  {
    "text": "your assembler of course needs to be able to recognize these instructions as well so we extend an assembler any see",
    "start": "2463410",
    "end": "2471720"
  },
  {
    "text": "any assembly code that's in your runtime needs to be passed to include these instructions as well or what the CFI",
    "start": "2471720",
    "end": "2477359"
  },
  {
    "text": "subsystem will detect on software violations unnecessarily and well then we go ahead and compile some stuff and",
    "start": "2477359",
    "end": "2483599"
  },
  {
    "text": "when you do that you're going to see that so on average one to two percent performance overhead and well relative",
    "start": "2483599",
    "end": "2491640"
  },
  {
    "text": "to the number of course and indirect jobs that you have on your binary you're",
    "start": "2491640",
    "end": "2496920"
  },
  {
    "text": "going to see a slight increase in your resulting binaries in or testing with so",
    "start": "2496920",
    "end": "2502559"
  },
  {
    "text": "about 13 percent or so now there have been other guys that have attempted to",
    "start": "2502559",
    "end": "2508410"
  },
  {
    "text": "do this before us as well so we should give them credit for the work as well we have cuido at all in 2006 with",
    "start": "2508410",
    "end": "2516359"
  },
  {
    "text": "architectural support for CFI however they only give us four core screen",
    "start": "2516359",
    "end": "2522210"
  },
  {
    "text": "backward edge return policy land here gives you also coarse grain forward and",
    "start": "2522210",
    "end": "2527910"
  },
  {
    "text": "backward edge of policy for CFI as well this is actually kind of good but",
    "start": "2527910",
    "end": "2534119"
  },
  {
    "start": "2533000",
    "end": "2593000"
  },
  {
    "text": "can be sadly bypassed we have also HD fi which one best paper award this year as",
    "start": "2534119",
    "end": "2539819"
  },
  {
    "text": "well it provides a fine grain forward and backward edge support but it only",
    "start": "2539819",
    "end": "2545430"
  },
  {
    "text": "does it on single threaded embedded systems or you don't have multi-touch screen you don't have an operating",
    "start": "2545430",
    "end": "2551099"
  },
  {
    "text": "system behind this thing you don't have shared libraries and this year as well until I release our the control on their",
    "start": "2551099",
    "end": "2559710"
  },
  {
    "text": "own control of flow policy extension for the CPUs they apparently have been working on this for quite a bit now they",
    "start": "2559710",
    "end": "2566369"
  },
  {
    "text": "have a built in however a shadow stack as well they get a new razor for this the shadow stack pointer that you are a",
    "start": "2566369",
    "end": "2572640"
  },
  {
    "text": "couple of instructions to manipulate this shadow stack pointer as well however it suffers a bit when it comes",
    "start": "2572640",
    "end": "2579480"
  },
  {
    "text": "to forward edges any indirect jumps or calls in Intel's SEFI they can target",
    "start": "2579480",
    "end": "2586589"
  },
  {
    "text": "any branch end instruction there is really there's a course claim policy",
    "start": "2586589",
    "end": "2592349"
  },
  {
    "text": "there so comparing your approach to the other guys well ACF try has some very",
    "start": "2592349",
    "end": "2598170"
  },
  {
    "start": "2593000",
    "end": "2656000"
  },
  {
    "text": "nice performance overhead however they use the D on three processor implement",
    "start": "2598170",
    "end": "2603599"
  },
  {
    "text": "implement in this park version eight instruction set and they use some very",
    "start": "2603599",
    "end": "2608809"
  },
  {
    "text": "architecture specific optimizations like putting things on the upike window bottom branch on branching structure",
    "start": "2608809",
    "end": "2615289"
  },
  {
    "text": "instructions and things like that and will intercept your mayor implementation",
    "start": "2615289",
    "end": "2621200"
  },
  {
    "text": "any call or jump instruction can target any end branch instruction that makes it",
    "start": "2621200",
    "end": "2626880"
  },
  {
    "text": "rather weak for a sophisticated attacker that's been said that's all we got guys",
    "start": "2626880",
    "end": "2632369"
  },
  {
    "text": "if you have any questions or feel free to ask thank you what's the response",
    "start": "2632369",
    "end": "2647069"
  },
  {
    "text": "which it manifests available in this part of the chip manifest is one two",
    "start": "2647069",
    "end": "2652109"
  },
  {
    "text": "images so what we said at the back end of the talk is that Intel is actually",
    "start": "2652109",
    "end": "2659069"
  },
  {
    "text": "pursuing this and they're interested in doing the control flow enforcement technology for shadow stack one of the",
    "start": "2659069",
    "end": "2665309"
  },
  {
    "text": "issues is eyeshadow sack Harbor shadow effect sort of guarantees this really fine grained backward at sea",
    "start": "2665309",
    "end": "2671460"
  },
  {
    "text": "of five policy and an open issue is the forward edge mechanism I think that when",
    "start": "2671460",
    "end": "2677400"
  },
  {
    "text": "it is released and produced that potentially you know other manufacturers will jump on board considering that",
    "start": "2677400",
    "end": "2684240"
  },
  {
    "text": "these sort of rock style attacks are still prevalent and there shouldn't be right because there are solutions that",
    "start": "2684240",
    "end": "2690120"
  },
  {
    "text": "can prevent them this is your hundred ninety nine changes compounded by the",
    "start": "2690120",
    "end": "2697710"
  },
  {
    "text": "destruction what some call optimization that is you just a little washing",
    "start": "2697710",
    "end": "2703970"
  },
  {
    "text": "don't act so in the case of a tail call optimization this is one of the others",
    "start": "2703970",
    "end": "2709590"
  },
  {
    "text": "knife corner cases that we came across you effectively have a jump to where you",
    "start": "2709590",
    "end": "2716430"
  },
  {
    "text": "will normally have a call which means that instead of just going and pushing a",
    "start": "2716430",
    "end": "2721860"
  },
  {
    "text": "value on your on your on your regular stack and shuttle stack use go directly",
    "start": "2721860",
    "end": "2727230"
  },
  {
    "text": "to a new location well the backward dish is actually check on the original color so you go from A",
    "start": "2727230",
    "end": "2733860"
  },
  {
    "text": "to B but then from B G jump in to see the shack actually happens back in a so",
    "start": "2733860",
    "end": "2738960"
  },
  {
    "text": "we don't really see that issue there when we do the jump from B to C we never",
    "start": "2738960",
    "end": "2744270"
  },
  {
    "text": "see that backward edge we have to return back in to be there so we we actually we",
    "start": "2744270",
    "end": "2754200"
  },
  {
    "text": "actually never saw the compiler reintroducing any weird shenanigans in there since we we tightly coupled or cs5",
    "start": "2754200",
    "end": "2761070"
  },
  {
    "text": "checks to our to explicitly to call when the compiler sees a little optimization",
    "start": "2761070",
    "end": "2766620"
  },
  {
    "text": "they can make it can make their it eliminates the call it also eliminates any possible check that we will",
    "start": "2766620",
    "end": "2772440"
  },
  {
    "text": "introduce at a point for backward edges",
    "start": "2772440",
    "end": "2776930"
  },
  {
    "text": "so we basically Sarika and so we have",
    "start": "2783350",
    "end": "2792780"
  },
  {
    "text": "both implementations for the spark up spark p8 and for x86 slash 64",
    "start": "2792780",
    "end": "2800599"
  },
  {
    "text": "for Delia and the social sector sector extension right so I mean Jesus is on your instructions already able to",
    "start": "2801030",
    "end": "2807930"
  },
  {
    "text": "benchmark on day six so we run it in a cycle accurate emulator we use the yeah",
    "start": "2807930",
    "end": "2813900"
  },
  {
    "text": "so basically we're using a cycle accurate emulator and so the performance results are going to sort of vary with",
    "start": "2813900",
    "end": "2818970"
  },
  {
    "text": "respect to actual hardware right but in general there's a long lineage of using",
    "start": "2818970",
    "end": "2824280"
  },
  {
    "text": "emulators and sort of getting semi reliable results right within of course a percent error all right good close",
    "start": "2824280",
    "end": "2832890"
  },
  {
    "text": "your second question okay I'm gonna come",
    "start": "2832890",
    "end": "2842220"
  },
  {
    "text": "in some of aggression yeah thanks for",
    "start": "2842220",
    "end": "2847530"
  },
  {
    "text": "attending talk guys yeah thank you [Applause]",
    "start": "2847530",
    "end": "2852639"
  }
]