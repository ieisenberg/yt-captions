[
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14240"
  },
  {
    "text": "hello everyone welcome to our talk hack different pumping ios 14 with generation",
    "start": "14240",
    "end": "20080"
  },
  {
    "text": "z bugs this talk is brought to you by jojo and xi jin dong",
    "start": "20080",
    "end": "27199"
  },
  {
    "text": "this is the agenda the talk is mainly about two bugs used on tempo cup 2020 on",
    "start": "27199",
    "end": "33040"
  },
  {
    "text": "iphone category this is the very first successful public challenge after park",
    "start": "33040",
    "end": "38239"
  },
  {
    "text": "has been introduced we will cover materials from attack surface to the bug and detail steps of",
    "start": "38239",
    "end": "44800"
  },
  {
    "text": "exploitation now meet this new old attack surface",
    "start": "44800",
    "end": "51760"
  },
  {
    "text": "my previous presentation on black hat europe 2020 talk about several effective cases that leverage inter-process",
    "start": "51760",
    "end": "58719"
  },
  {
    "text": "javascript injection to escape safari sandbox on mac os it's possible to directly bypass the",
    "start": "58719",
    "end": "66000"
  },
  {
    "text": "sandbox without initial code execution just by abusing url scheme",
    "start": "66000",
    "end": "72720"
  },
  {
    "text": "url scheme is a vector for web to app navigation safari has a trusted list that don't",
    "start": "72720",
    "end": "79680"
  },
  {
    "text": "require user action to automatically open an app including app store mail and digital",
    "start": "79680",
    "end": "86479"
  },
  {
    "text": "contents from itunes and this applies to ios 2.",
    "start": "86479",
    "end": "91840"
  },
  {
    "text": "what we were targeting is this com.apple.mobile store",
    "start": "91840",
    "end": "98560"
  },
  {
    "text": "it was actually not the first time that this pre-installed app got abused",
    "start": "98560",
    "end": "103600"
  },
  {
    "text": "on mobile.com 2014 loki used this itm ss url to directly",
    "start": "103600",
    "end": "110079"
  },
  {
    "text": "open a third-party website in ios app where no sandbox was applied",
    "start": "110079",
    "end": "116479"
  },
  {
    "text": "it was assigned with cve 2014 aa40",
    "start": "116479",
    "end": "122840"
  },
  {
    "text": "since that a trust list was applied before the navigation itunes store",
    "start": "123520",
    "end": "130080"
  },
  {
    "text": "downloads a list of trusted domains from this sandbox.itunes.apple.com",
    "start": "130080",
    "end": "137000"
  },
  {
    "text": "and reads out the trusted domains list and compares the url with that",
    "start": "137599",
    "end": "144400"
  },
  {
    "text": "besides it only accepts https and has ssl pinning",
    "start": "144400",
    "end": "149680"
  },
  {
    "text": "but loki lately found a process scripting on widgets.itunes.apple.com to pawn it",
    "start": "149680",
    "end": "156160"
  },
  {
    "text": "again now let's meet the first bug",
    "start": "156160",
    "end": "162720"
  },
  {
    "text": "generation z is used to describe kids born between mid to late 1990s and early",
    "start": "162720",
    "end": "169599"
  },
  {
    "text": "19 2010 the bugs were both introduced before 2012",
    "start": "169599",
    "end": "176239"
  },
  {
    "text": "so they happened to be part of it this first box could affect a wide range",
    "start": "176239",
    "end": "184000"
  },
  {
    "text": "of ios versions and it's easy to exploit so part of the proof of concept is",
    "start": "184000",
    "end": "190560"
  },
  {
    "text": "redacted to help protect users that stay below ios 14.3 due to hardware limitations or",
    "start": "190560",
    "end": "198560"
  },
  {
    "text": "at the will let's go back to itunes store by auditing the following methods we found",
    "start": "198560",
    "end": "204319"
  },
  {
    "text": "another bypass this is an url first supported by ios 3. the difference is",
    "start": "204319",
    "end": "209760"
  },
  {
    "text": "that it still requires the domain to be trusted but the url of the page is not limited",
    "start": "209760",
    "end": "215519"
  },
  {
    "text": "to https making it capable making it vulnerable to men in the",
    "start": "215519",
    "end": "221760"
  },
  {
    "text": "middle attack this url is simply itms double slash and",
    "start": "221760",
    "end": "227440"
  },
  {
    "text": "some part of it is redacted then we append the parameter name url it will navigate to the url when the domain",
    "start": "227440",
    "end": "235040"
  },
  {
    "text": "matches the trusted list what surprised me is that it accepts",
    "start": "235040",
    "end": "240799"
  },
  {
    "text": "data url as well where arbitrary html could be injected so we don't have to follow the trusted",
    "start": "240799",
    "end": "247280"
  },
  {
    "text": "list at all in other words this is a client-side reflected cross-site",
    "start": "247280",
    "end": "252319"
  },
  {
    "text": "scripting the limitation here is that it always appends a question mark at the end of the data url",
    "start": "252319",
    "end": "259280"
  },
  {
    "text": "trying in to say extra parameters this breaks the base64 encoding",
    "start": "259280",
    "end": "265919"
  },
  {
    "text": "so we have to use plane here this is the proof that the bug has been",
    "start": "265919",
    "end": "272400"
  },
  {
    "text": "there since the year 2009",
    "start": "272400",
    "end": "277080"
  },
  {
    "text": "it's not a webkit exploit but web kit attack by using a simple location",
    "start": "277680",
    "end": "283759"
  },
  {
    "text": "assignment we escalate javascript execution to a special local web wheel",
    "start": "283759",
    "end": "290638"
  },
  {
    "text": "and here's an alternate trigger named itms ui it suffers the exact the same bug but",
    "start": "291199",
    "end": "298400"
  },
  {
    "text": "instead it links to storky ui services.app which is also responsible for installing enterprise ota apps it",
    "start": "298400",
    "end": "305600"
  },
  {
    "text": "has no navigation animation so it's very low profile but idms ui is not in the",
    "start": "305600",
    "end": "311440"
  },
  {
    "text": "trusted list of mobile safari so it requires one more confirmation but it makes no difference for other one-click",
    "start": "311440",
    "end": "318479"
  },
  {
    "text": "vectors like airdrop imessage and third-party instant messengers that don't want for external app navigation",
    "start": "318479",
    "end": "326080"
  },
  {
    "text": "this bug was assigned to cv 2021 748",
    "start": "326080",
    "end": "332840"
  },
  {
    "text": "so what's the difference for this webview first this app itunes store is signed with dynamic cosigning",
    "start": "332960",
    "end": "339120"
  },
  {
    "text": "entitlement that means that it can use cheat and this su web wheel is actually a",
    "start": "339120",
    "end": "344560"
  },
  {
    "text": "subclass of ui webview where it uses in process js context breach and in",
    "start": "344560",
    "end": "351360"
  },
  {
    "text": "process rendering so this is a very special webview that all of the webkit exploits work here both",
    "start": "351360",
    "end": "358479"
  },
  {
    "text": "dom and cheat some of the webkit mitigations are gone since it's in",
    "start": "358479",
    "end": "364560"
  },
  {
    "text": "ui webview there's no renderer sandbox only the only sandbox is the app container",
    "start": "364560",
    "end": "372319"
  },
  {
    "text": "so it's capable of loading shell code in app context but there is one thing that it has no",
    "start": "372319",
    "end": "379280"
  },
  {
    "text": "render auto restart so the exploit only has one chance to run otherwise this app",
    "start": "379280",
    "end": "384400"
  },
  {
    "text": "crashes with so here we have to learn one thing name",
    "start": "384400",
    "end": "391199"
  },
  {
    "text": "web scripting with web scripting javascript can invoke navi native objective c message some of the data",
    "start": "391199",
    "end": "398319"
  },
  {
    "text": "types are automatically converted between them this is the bridge between two languages",
    "start": "398319",
    "end": "405919"
  },
  {
    "text": "js context bridge is only available for the deprecated ui webview the actual implementation is in process",
    "start": "405919",
    "end": "413599"
  },
  {
    "text": "within the renderer in other words the app the app itself",
    "start": "413599",
    "end": "418720"
  },
  {
    "text": "and in s2 webview all of the messengers are under this itunes namespace of globaldisk the methods are bounded to an",
    "start": "418720",
    "end": "425680"
  },
  {
    "text": "instance of an sjscript interface there is a bridge named itunes.telephony",
    "start": "425680",
    "end": "432000"
  },
  {
    "text": "that exposes the current phone number and the operator name to the gs",
    "start": "432000",
    "end": "437440"
  },
  {
    "text": "it has a custom xml http request implementation with no same",
    "start": "437440",
    "end": "443680"
  },
  {
    "text": "origin policy it limits the domains of the request but doesn't check for the scheme so it",
    "start": "443680",
    "end": "450319"
  },
  {
    "text": "doesn't matter the domain name doesn't matter in the file url so this x this special xml http request can be abused",
    "start": "450319",
    "end": "458800"
  },
  {
    "text": "to read local files but unfortunately it only supports string and this app is",
    "start": "458800",
    "end": "464080"
  },
  {
    "text": "sandbox afro after all so we cannot just simply read the photos at this moment",
    "start": "464080",
    "end": "470479"
  },
  {
    "text": "since that since this app is part of the itunes store apple id is visible to the javascript",
    "start": "470479",
    "end": "476720"
  },
  {
    "text": "it even has a utility to read the cookie from apple.com i've noticed an interesting phenomenon",
    "start": "476720",
    "end": "482960"
  },
  {
    "text": "that any outgoing http requests will send extra headers related to the",
    "start": "482960",
    "end": "488160"
  },
  {
    "text": "account to the account no matter what the domain is for example in this request we can even see those critical",
    "start": "488160",
    "end": "494879"
  },
  {
    "text": "tokens for two-factor authentication with one more authorization header it's possible to talk to the app store server",
    "start": "494879",
    "end": "504000"
  },
  {
    "text": "and here comes the most interesting part you can even get a list of all of the in-store apps and launch them by bundle",
    "start": "504000",
    "end": "511120"
  },
  {
    "text": "identifier for example calculator so this could have been the most embarrassing bug ever",
    "start": "511120",
    "end": "518240"
  },
  {
    "text": "it's only one cross-scripting away from launching the calculator from web on the",
    "start": "518240",
    "end": "524000"
  },
  {
    "text": "states of the art phone with no memory corruption at all",
    "start": "524000",
    "end": "530080"
  },
  {
    "text": "now let's it's time for memory corruption",
    "start": "530160",
    "end": "535600"
  },
  {
    "text": "first it's a type confusion that don't crash but leak useful information to us this",
    "start": "535600",
    "end": "543360"
  },
  {
    "text": "itunes door window has its setter and getter message exported to jscontext",
    "start": "543360",
    "end": "548959"
  },
  {
    "text": "we can assign an arbitrary objective c object we send involved type to itunes window",
    "start": "548959",
    "end": "556720"
  },
  {
    "text": "when we try to read the value it always tries to invoke this tag method on the",
    "start": "556720",
    "end": "562399"
  },
  {
    "text": "object we just assigned so if you have ios background you must",
    "start": "562399",
    "end": "567440"
  },
  {
    "text": "be very familiar to this message when an unknown selector is sent to an object",
    "start": "567440",
    "end": "572640"
  },
  {
    "text": "the runtime throws a message like this with the address of the object",
    "start": "572640",
    "end": "578399"
  },
  {
    "text": "the funny thing is that we can catch this exception message in javascript giving us the primitive for leaking",
    "start": "578399",
    "end": "584399"
  },
  {
    "text": "object object first we call setter to associate an arbitrary object then use this itunes",
    "start": "584399",
    "end": "590720"
  },
  {
    "text": "style window to trigger the selector if the object doesn't have a method named",
    "start": "590720",
    "end": "595920"
  },
  {
    "text": "tag we captured we can capture the address of it and this exception message",
    "start": "595920",
    "end": "602959"
  },
  {
    "text": "with this primitive we break the asll without a further read primitive",
    "start": "603279",
    "end": "609440"
  },
  {
    "text": "objective-c runtime uses various techniques to save memories such as tag pointer and share instances the edges of",
    "start": "609440",
    "end": "616959"
  },
  {
    "text": "certain data are always static from dsc for instance infinity in javascript maps to kcf",
    "start": "616959",
    "end": "623839"
  },
  {
    "text": "number positive infinity simply by reading the address of boolean force",
    "start": "623839",
    "end": "630320"
  },
  {
    "text": "we get the base address of every single library",
    "start": "630320",
    "end": "635680"
  },
  {
    "text": "now this is a uaf with only two instructions introduced by hour six in",
    "start": "637200",
    "end": "643279"
  },
  {
    "text": "this method x selector excluded from web script it always returns zero",
    "start": "643279",
    "end": "649600"
  },
  {
    "text": "so what could possibly go wrong with this here's part of the documentation",
    "start": "649600",
    "end": "658000"
  },
  {
    "text": "it's too long generate let's check out this highlighted sentence you should expose only methods that you",
    "start": "658240",
    "end": "665440"
  },
  {
    "text": "know are secure to export a message this function should return no",
    "start": "665440",
    "end": "671440"
  },
  {
    "text": "for that message selector so this is the access control between",
    "start": "671440",
    "end": "676720"
  },
  {
    "text": "objective c and javascript world by returning no all of these lectures are exposed to js",
    "start": "676720",
    "end": "683920"
  },
  {
    "text": "including this dm demo log the free in objective c",
    "start": "683920",
    "end": "690000"
  },
  {
    "text": "this is also the root cause of our previous information leak bug that allows calling both the setter and the",
    "start": "690000",
    "end": "696640"
  },
  {
    "text": "getter of a private property now it's literally free then use",
    "start": "696640",
    "end": "705519"
  },
  {
    "text": "issue crash a message sent immediately with an involved object pointer",
    "start": "706320",
    "end": "711920"
  },
  {
    "text": "showing that it's a use after free the way this is what it looked like on ios 6",
    "start": "711920",
    "end": "718160"
  },
  {
    "text": "when it was first introduced this was assigned by 3 to 2021 1864.",
    "start": "718160",
    "end": "727480"
  },
  {
    "text": "now let's focus on the exploitation modern smartphones have evolved to make",
    "start": "728000",
    "end": "734320"
  },
  {
    "text": "exploits harder at this point aslr has already been bypassed but we still got",
    "start": "734320",
    "end": "739920"
  },
  {
    "text": "some million dollar protections to take into account this is not a traditional webkit exploit",
    "start": "739920",
    "end": "745920"
  },
  {
    "text": "as some migrations like gta cage package and structure id randomization don't",
    "start": "745920",
    "end": "751200"
  },
  {
    "text": "matter because we don't use webkit for primitive at all apr could stop us from easily getting",
    "start": "751200",
    "end": "758560"
  },
  {
    "text": "shell code executed but it looked promising to bypass park is the major problem and besides",
    "start": "758560",
    "end": "765600"
  },
  {
    "text": "the objective c wrong time was hardened before the competition which is our main",
    "start": "765600",
    "end": "771040"
  },
  {
    "text": "concern now we managed to perform messages sent on control memory",
    "start": "771040",
    "end": "777200"
  },
  {
    "text": "the key to forge various classes for exploitation is the essay pointer which",
    "start": "777200",
    "end": "783519"
  },
  {
    "text": "tells both the type and runtime members of an object between rs14 to rs14.4",
    "start": "783519",
    "end": "792079"
  },
  {
    "text": "is a pointer is signed but not checked leaving us the last chance to do the",
    "start": "792079",
    "end": "797360"
  },
  {
    "text": "work",
    "start": "797360",
    "end": "800360"
  },
  {
    "text": "now let's debunk this exploit on an up-to-date ios device without any virtual machine or research",
    "start": "802880",
    "end": "810079"
  },
  {
    "text": "device we can import this private apis to the debuggable app",
    "start": "810079",
    "end": "815760"
  },
  {
    "text": "since the ui web view uses in-process rendering all of the exceptions are catchable within the debugger so let's",
    "start": "815760",
    "end": "822880"
  },
  {
    "text": "load this private frameworks and initialize an suv you controller to load",
    "start": "822880",
    "end": "828560"
  },
  {
    "text": "the html and don't forget to enable um 64e to play with the pack",
    "start": "828560",
    "end": "836240"
  },
  {
    "text": "now it's time to build a fake object primitive let's first allocate a new object and",
    "start": "836639",
    "end": "843279"
  },
  {
    "text": "hold the dangling reference there are dozens of",
    "start": "843279",
    "end": "848720"
  },
  {
    "text": "make blablabla methods that allocate different types of object and the size of this object are known to us",
    "start": "848720",
    "end": "855600"
  },
  {
    "text": "we can use we can free them and reclaim the memory to turn into a type confusion",
    "start": "855600",
    "end": "861680"
  },
  {
    "text": "but we need a malloc primitive that can both control the learners and the content",
    "start": "861680",
    "end": "869120"
  },
  {
    "text": "first i tried this address off and then a base tray learns an s string",
    "start": "869120",
    "end": "874480"
  },
  {
    "text": "this doesn't work for reclaiming the free memory because an scf string has",
    "start": "874480",
    "end": "879920"
  },
  {
    "text": "two phones and in this case it uses non-inline form",
    "start": "879920",
    "end": "885199"
  },
  {
    "text": "that hold that holds a reference to a string in js6 heap",
    "start": "885199",
    "end": "890240"
  },
  {
    "text": "so we since we cannot allocate and b tree learns string in objective c slur hip",
    "start": "890240",
    "end": "898240"
  },
  {
    "text": "this doesn't work and so that so does a rebuffer",
    "start": "898240",
    "end": "904160"
  },
  {
    "text": "after a bit of reverse engineering work i found this message which is perfectly",
    "start": "904800",
    "end": "909920"
  },
  {
    "text": "binary safe and with controllable learns when calling this add multiple",
    "start": "909920",
    "end": "916959"
  },
  {
    "text": "multipart data with name and type it checks the url",
    "start": "916959",
    "end": "922880"
  },
  {
    "text": "when it's a data ui it tries to decode the data payload and pull it in the same",
    "start": "922880",
    "end": "928320"
  },
  {
    "text": "heap of objectives wrong time so it's perfectly binary safe and",
    "start": "928320",
    "end": "933440"
  },
  {
    "text": "there's control so here's the here's the",
    "start": "933440",
    "end": "938880"
  },
  {
    "text": "the idea of the the exploitation steps first we allocate a seo script xml http store request",
    "start": "938880",
    "end": "947120"
  },
  {
    "text": "and we use this facebook uh itunes dot create facebook request to do them unlock",
    "start": "947120",
    "end": "953040"
  },
  {
    "text": "just remember that this as you script xml https store request its size is 192.",
    "start": "953040",
    "end": "960720"
  },
  {
    "text": "so we have to create a string to convert to data uin that matches the",
    "start": "960720",
    "end": "967040"
  },
  {
    "text": "same size now call the lock to get a dangling pointer and",
    "start": "967040",
    "end": "973600"
  },
  {
    "text": "reclaim the memory when we're trying to access the this w",
    "start": "973600",
    "end": "979279"
  },
  {
    "text": "is going to hit this is going to crash at messages 10",
    "start": "979279",
    "end": "984480"
  },
  {
    "text": "where the memory look where we see the memory cl the memory are",
    "start": "984480",
    "end": "990079"
  },
  {
    "text": "controlled before 812 getting objective c messages",
    "start": "990079",
    "end": "996240"
  },
  {
    "text": "sent on control memory is enough for pc control so we can use group to abuse the",
    "start": "996240",
    "end": "1002000"
  },
  {
    "text": "dynamic co-signing entitlement and load shell code and this should have been the most privileged context that allows",
    "start": "1002000",
    "end": "1008639"
  },
  {
    "text": "shell coding since jsc has been dropped on ios but now",
    "start": "1008639",
    "end": "1014399"
  },
  {
    "text": "it is still possible to do the selector oriented programming actually this is much harder after after",
    "start": "1014399",
    "end": "1020720"
  },
  {
    "text": "hours 14.5 because of sign it is a and an s invocation hardening",
    "start": "1020720",
    "end": "1027760"
  },
  {
    "text": "at this point we can forge a bitrate object to see objects so with the leaked",
    "start": "1027760",
    "end": "1033199"
  },
  {
    "text": "address we have all of the isa and this fake object must be smaller",
    "start": "1033199",
    "end": "1040400"
  },
  {
    "text": "than su-script xml http store request so my choice is to fake a nns data and",
    "start": "1040400",
    "end": "1047839"
  },
  {
    "text": "cause its to string to leak the memory content because finally it will cause a",
    "start": "1047839",
    "end": "1053600"
  },
  {
    "text": "nice data description inside which yells the hexdump of the memory so",
    "start": "1053600",
    "end": "1059360"
  },
  {
    "text": "it's perfectly binary safe memory dumper the contents must be less than 24 bytes",
    "start": "1059360",
    "end": "1066000"
  },
  {
    "text": "or otherwise it will be truncated but i can repeatedly use it to dump the whole",
    "start": "1066000",
    "end": "1071360"
  },
  {
    "text": "memory range the fake structure is look like looks like this first the i is a it's not and the learns",
    "start": "1071360",
    "end": "1080000"
  },
  {
    "text": "and followed by the location is so it's perfectly a victory read with a bitry",
    "start": "1080000",
    "end": "1085840"
  },
  {
    "text": "learns just uh and don't forget to keep this the allocated member to",
    "start": "1085840",
    "end": "1093280"
  },
  {
    "text": "must to keep it as now otherwise is consider a function pointer",
    "start": "1093280",
    "end": "1098720"
  },
  {
    "text": "and call when and free this next data later and call this function",
    "start": "1098720",
    "end": "1104720"
  },
  {
    "text": "which will obviously crash",
    "start": "1104720",
    "end": "1109000"
  },
  {
    "text": "now we can use an even better fake object primitive because",
    "start": "1109919",
    "end": "1115280"
  },
  {
    "text": "currently this malloc primitive returns an immutable buffer it's better to use an array buffer because it's",
    "start": "1115280",
    "end": "1122480"
  },
  {
    "text": "mutable we can modify the forged object on the fly and reuse them and we need a much bigger buffer for",
    "start": "1122480",
    "end": "1129440"
  },
  {
    "text": "various fake objects and post exploitation here are two approaches",
    "start": "1129440",
    "end": "1135440"
  },
  {
    "text": "number one the hip spray approach first we need to ship spray plenty of",
    "start": "1135440",
    "end": "1141520"
  },
  {
    "text": "array buffers now to when we're trying to refill the dangling",
    "start": "1141520",
    "end": "1147679"
  },
  {
    "text": "pointer with a fake object we use a fixed address with to build a",
    "start": "1147679",
    "end": "1154640"
  },
  {
    "text": "an s array where the content points to a fixed address",
    "start": "1154640",
    "end": "1159840"
  },
  {
    "text": "if it hits one of the array buffer we try to dereference this pointer show",
    "start": "1159840",
    "end": "1167120"
  },
  {
    "text": "results in a nested unless array and in this",
    "start": "1167120",
    "end": "1172880"
  },
  {
    "text": "array buffer we fill them with thousands of different or an asset rate",
    "start": "1172880",
    "end": "1179679"
  },
  {
    "text": "where did where the number inside this array",
    "start": "1179679",
    "end": "1186080"
  },
  {
    "text": "is the identifier so now we read the description of this",
    "start": "1186080",
    "end": "1192080"
  },
  {
    "text": "fake object it's basically be when it it hits the uh",
    "start": "1192080",
    "end": "1197120"
  },
  {
    "text": "one of the array buffer it will be treated like a nasty anes array with",
    "start": "1197120",
    "end": "1203760"
  },
  {
    "text": "one number inside so by reading the description we can know which rebuffer hits the target address",
    "start": "1203760",
    "end": "1212080"
  },
  {
    "text": "now trigger garbage collection to re to release the others and keep reusing this only one array buffer",
    "start": "1212880",
    "end": "1221840"
  },
  {
    "text": "in this approach i use this i use the tag pointer to",
    "start": "1222640",
    "end": "1229200"
  },
  {
    "text": "build the fake nest number on ios 14 tag pointer has been hardened using an",
    "start": "1229200",
    "end": "1236480"
  },
  {
    "text": "obfuscation before it was clearly to see the bits",
    "start": "1236480",
    "end": "1242240"
  },
  {
    "text": "and number but after the obfuscation it seemed totally random",
    "start": "1242240",
    "end": "1249200"
  },
  {
    "text": "at this point we can still use address of primitive for thousands of thousand times but when it comes to hip spray",
    "start": "1249200",
    "end": "1257679"
  },
  {
    "text": "it's going to be very slow because it throws an exception every time an emit",
    "start": "1257679",
    "end": "1262720"
  },
  {
    "text": "system system logs so what's inside this standpoint",
    "start": "1262720",
    "end": "1268799"
  },
  {
    "text": "obfuscation is that an objective c debug checkpointer obfuscator is randomized",
    "start": "1268799",
    "end": "1274559"
  },
  {
    "text": "per process the tag pointer use xor to obfuscate it",
    "start": "1274559",
    "end": "1282559"
  },
  {
    "text": "since we have this address of primitive with one known pair of float float64",
    "start": "1282559",
    "end": "1289919"
  },
  {
    "text": "number in js and the obfuscating pointer in objective c is possible to calculate",
    "start": "1289919",
    "end": "1297039"
  },
  {
    "text": "the arbitrary value using the following algorithm",
    "start": "1297039",
    "end": "1302919"
  },
  {
    "text": "but as but after the the temple cup i found another better approach without",
    "start": "1305039",
    "end": "1310240"
  },
  {
    "text": "hip spray because as i mentioned before this app can only",
    "start": "1310240",
    "end": "1316159"
  },
  {
    "text": "crash once so if it crashes everything stops",
    "start": "1316159",
    "end": "1322159"
  },
  {
    "text": "so hip spray is less reliable we can use this arbitrary read and address of primitive",
    "start": "1322159",
    "end": "1329679"
  },
  {
    "text": "to leak the backing store of an array buffer directly",
    "start": "1329679",
    "end": "1335840"
  },
  {
    "text": "at this context the address of the array buffer is the",
    "start": "1335840",
    "end": "1342320"
  },
  {
    "text": "data pointer is protected by pack cage but it only matters to webkit since we",
    "start": "1342320",
    "end": "1349520"
  },
  {
    "text": "don't have to build a fake into a array with fake vector pointer it doesn't matter at all",
    "start": "1349520",
    "end": "1357360"
  },
  {
    "text": "we can just we all gonna do is to strip the sign bits to get the real address of",
    "start": "1357360",
    "end": "1363679"
  },
  {
    "text": "the backhand store and use it to create various fake objects in objective",
    "start": "1363679",
    "end": "1370080"
  },
  {
    "text": "c as objective c don't check the pack for it",
    "start": "1370080",
    "end": "1377440"
  },
  {
    "text": "so let's get into the slap time this is an exploitation",
    "start": "1378000",
    "end": "1383919"
  },
  {
    "text": "technique invented by project zero it uses a series of ns invocations in an",
    "start": "1383919",
    "end": "1389280"
  },
  {
    "text": "asset rate it calls unless array make objective",
    "start": "1389280",
    "end": "1394320"
  },
  {
    "text": "make objects perform selector invoked to perform",
    "start": "1394320",
    "end": "1399360"
  },
  {
    "text": "invocations respectively so with proper gadgets is capable of",
    "start": "1399360",
    "end": "1404960"
  },
  {
    "text": "calling a b3 c functions but after project zero publish its",
    "start": "1404960",
    "end": "1412559"
  },
  {
    "text": "i message zero click exploitation apple add a sixty",
    "start": "1412559",
    "end": "1418240"
  },
  {
    "text": "six uh three 32 bit random cookie to an sm location",
    "start": "1418240",
    "end": "1423360"
  },
  {
    "text": "to prevent exploitation we since we already have the aslr bypass",
    "start": "1423360",
    "end": "1430159"
  },
  {
    "text": "and a b3 read we can read this number from this magic cookie value",
    "start": "1430159",
    "end": "1436799"
  },
  {
    "text": "to get the random to get this random cookie and what's more we need a kickstarter to",
    "start": "1436799",
    "end": "1443279"
  },
  {
    "text": "call the invoke method on the allocation",
    "start": "1443279",
    "end": "1449120"
  },
  {
    "text": "it must have been a dialogue method that performs in work selector on a member of",
    "start": "1449120",
    "end": "1454960"
  },
  {
    "text": "self this is a candidate we found in this itunes store that it caused in work on",
    "start": "1454960",
    "end": "1461760"
  },
  {
    "text": "offset a zero uh offset and a certain offset",
    "start": "1461760",
    "end": "1467760"
  },
  {
    "text": "to kickstarter slop chain but we still need a double free",
    "start": "1467760",
    "end": "1473679"
  },
  {
    "text": "primitive because we have to call it the outlook the unlock method but this sk store reveal",
    "start": "1473679",
    "end": "1480080"
  },
  {
    "text": "control view controller is not a subclass of suvscript object just to remember",
    "start": "1480080",
    "end": "1486480"
  },
  {
    "text": "the everything that why we can call this the unlock is that",
    "start": "1486480",
    "end": "1491679"
  },
  {
    "text": "the a selector excluded from web script returns zero false",
    "start": "1491679",
    "end": "1496799"
  },
  {
    "text": "but this is not a subclass of s2script object so that it falls back to the",
    "start": "1496799",
    "end": "1501919"
  },
  {
    "text": "default implementation of an x object where it doesn't allow the unlock method",
    "start": "1501919",
    "end": "1508559"
  },
  {
    "text": "we cannot simply call this dialog in js",
    "start": "1508559",
    "end": "1514320"
  },
  {
    "text": "my workaround is that is to find a class that is a subclass of s2script object",
    "start": "1514320",
    "end": "1521039"
  },
  {
    "text": "and it has a setter for associating other as you script object",
    "start": "1521039",
    "end": "1526880"
  },
  {
    "text": "to its properties it will it releases the the external references",
    "start": "1526880",
    "end": "1533679"
  },
  {
    "text": "to the objects upon the allocation here is our candidate su-script",
    "start": "1533679",
    "end": "1540240"
  },
  {
    "text": "segmented control item it can be allocated in js by calling itunes dot make segmented control",
    "start": "1540240",
    "end": "1548159"
  },
  {
    "text": "dot create segment and it has a property setter set user info that accept a b3 as your script",
    "start": "1548159",
    "end": "1555520"
  },
  {
    "text": "object now the steps are like this",
    "start": "1555520",
    "end": "1560640"
  },
  {
    "text": "we allocate a new item as an object a now allocate new object b to lately",
    "start": "1560640",
    "end": "1568400"
  },
  {
    "text": "become a dangling pointer here we chose seo script window",
    "start": "1568400",
    "end": "1574080"
  },
  {
    "text": "now trigger now we assign the object b to the user",
    "start": "1574080",
    "end": "1580799"
  },
  {
    "text": "info property before triggering the uaf now we can free object b",
    "start": "1580799",
    "end": "1587039"
  },
  {
    "text": "and reclaim it with a fake ns array",
    "start": "1587039",
    "end": "1592480"
  },
  {
    "text": "so we use the fake the array buffer to prepare for the slop chain to build",
    "start": "1593440",
    "end": "1598480"
  },
  {
    "text": "everything we need the invoke ns invocation and these targets this cancel request",
    "start": "1598480",
    "end": "1605440"
  },
  {
    "text": "and this fake store reveal controller now",
    "start": "1605440",
    "end": "1611440"
  },
  {
    "text": "we call this dialog on object 8 to free everything again and kick start the",
    "start": "1611440",
    "end": "1616640"
  },
  {
    "text": "execution the fake code look like this",
    "start": "1616640",
    "end": "1624679"
  },
  {
    "text": "uh on ios 14.3 list signing gadgets were still available we can use this signing",
    "start": "1626720",
    "end": "1633600"
  },
  {
    "text": "gadget and code called arbitrary seek functions using",
    "start": "1633600",
    "end": "1639200"
  },
  {
    "text": "dlc and invoke using implementation but here's no limitation that project",
    "start": "1639200",
    "end": "1644960"
  },
  {
    "text": "zero didn't solve that when using those gadgets involved using aimp the first",
    "start": "1644960",
    "end": "1652159"
  },
  {
    "text": "argument of the c call where where this is which is the self pointer it cannot",
    "start": "1652159",
    "end": "1658080"
  },
  {
    "text": "be zero i solved this problem because i have to",
    "start": "1658080",
    "end": "1663120"
  },
  {
    "text": "use this c function cause with the first argument as zero so i solve this problem",
    "start": "1663120",
    "end": "1669440"
  },
  {
    "text": "by using callbacks for example this cf set applied function from core",
    "start": "1669440",
    "end": "1675120"
  },
  {
    "text": "foundation fully controls up to two arbitrary arguments first i can build a fake",
    "start": "1675120",
    "end": "1683039"
  },
  {
    "text": "set object now i call this set apply function with a assigned",
    "start": "1683039",
    "end": "1689919"
  },
  {
    "text": "pointer on it the second the second function the second argument",
    "start": "1689919",
    "end": "1696000"
  },
  {
    "text": "is the sign point function point and the third function argument is the context",
    "start": "1696000",
    "end": "1701919"
  },
  {
    "text": "applied to this exit function which is the second argument and the first",
    "start": "1701919",
    "end": "1707039"
  },
  {
    "text": "argument is the second member of this ns set",
    "start": "1707039",
    "end": "1712398"
  },
  {
    "text": "so at this point we need to load shell code we use this well-known perform cheat",
    "start": "1715679",
    "end": "1721840"
  },
  {
    "text": "memo copy gadget to write the jit red region",
    "start": "1721840",
    "end": "1728559"
  },
  {
    "text": "this is actually p thread jeep right protect mp and mem cop inside some special registers needs",
    "start": "1728559",
    "end": "1735919"
  },
  {
    "text": "to be altered to change permissions of the jit page it used to be in line everywhere but",
    "start": "1735919",
    "end": "1742399"
  },
  {
    "text": "don't know why this function is public on ios 14 which made it",
    "start": "1742399",
    "end": "1748559"
  },
  {
    "text": "extremely simple with our primitives so apple in line this",
    "start": "1748559",
    "end": "1753919"
  },
  {
    "text": "function again after 10 foot cup so after loading the shell code i still",
    "start": "1753919",
    "end": "1761279"
  },
  {
    "text": "need a pack bypass to jump to the shortcode in siri i can obtain a sign pointer to a jit function first then",
    "start": "1761279",
    "end": "1768240"
  },
  {
    "text": "overwrite its machine code then but i chose a straightforward more straightforward approach instead",
    "start": "1768240",
    "end": "1775520"
  },
  {
    "text": "that to find an unprotected global offset table pointers",
    "start": "1775520",
    "end": "1781840"
  },
  {
    "text": "lists are unprotected jump to on authenticated function pointers",
    "start": "1781840",
    "end": "1788240"
  },
  {
    "text": "here's an example in this swift uh during in this function of sweep runtime",
    "start": "1788240",
    "end": "1795440"
  },
  {
    "text": "it loads a function pointer from a globe a writable",
    "start": "1795440",
    "end": "1801440"
  },
  {
    "text": "global offset table entry and it calls this sweep uh this function",
    "start": "1801440",
    "end": "1809360"
  },
  {
    "text": "inside where the second argument is the function pointer with an",
    "start": "1809360",
    "end": "1816799"
  },
  {
    "text": "indirect jump with no authentication this is assigned by cve 2021 1796",
    "start": "1816799",
    "end": "1826960"
  },
  {
    "text": "i will first use dr open to load this swift wrong time library and use",
    "start": "1826960",
    "end": "1832799"
  },
  {
    "text": "arbitrary write primitive to override this got",
    "start": "1832799",
    "end": "1838480"
  },
  {
    "text": "this got entry with the with the pointer to the shell code and finally i call",
    "start": "1838480",
    "end": "1844240"
  },
  {
    "text": "this function to jump to the shell code it was patched by swift long time after",
    "start": "1844240",
    "end": "1850320"
  },
  {
    "text": "10 foot cup now since we have since we have the shell code execution it's easy to spoil",
    "start": "1850320",
    "end": "1857200"
  },
  {
    "text": "all of these registers like this for the post exploitation this app is",
    "start": "1857200",
    "end": "1863679"
  },
  {
    "text": "pretty privileged that it can access context camera and sms and even",
    "start": "1863679",
    "end": "1869360"
  },
  {
    "text": "apple account settings and install mdm profile to gain persist traffic monitoring",
    "start": "1869360",
    "end": "1875440"
  },
  {
    "text": "and don't forget that since we have shell code here we can load further job break payload it has much more io kit",
    "start": "1875440",
    "end": "1882159"
  },
  {
    "text": "and userland services compared to the webkit cheat process",
    "start": "1882159",
    "end": "1888320"
  },
  {
    "text": "here's a takeaways from this talk we introduced we have present two bugs",
    "start": "1888320",
    "end": "1894320"
  },
  {
    "text": "from late 2000 2000's that stupid state-of-the-art modifications",
    "start": "1894320",
    "end": "1899600"
  },
  {
    "text": "and sometimes you don't need a single byte of memory corruption to run a unselected receipt calculator from web",
    "start": "1899600",
    "end": "1908399"
  },
  {
    "text": "plus get the victim's apple id and phone number with this and tricks in order to bypass",
    "start": "1908399",
    "end": "1914159"
  },
  {
    "text": "those million dollar protections and some of the instant messengers can also be the effective vectors for the",
    "start": "1914159",
    "end": "1920720"
  },
  {
    "text": "url skin bugs we talked about today this talk has so many references to the",
    "start": "1920720",
    "end": "1927039"
  },
  {
    "text": "following materials if you want to go further on this topic i strongly recommend you to read",
    "start": "1927039",
    "end": "1932840"
  },
  {
    "text": "them thank you for listening to talk today if you have any questions feel",
    "start": "1932840",
    "end": "1937919"
  },
  {
    "text": "free to ask them thanks",
    "start": "1937919",
    "end": "1942360"
  }
]