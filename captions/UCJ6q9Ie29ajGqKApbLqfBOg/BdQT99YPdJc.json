[
  {
    "text": "all right well we have one side working and we have one mic um but we're going to go ahead and get started anyways um",
    "start": "30920",
    "end": "37160"
  },
  {
    "text": "again thank you for coming out my name is Neil Ma I work with ISS and this is Alex wheeler um and Alex and I have done",
    "start": "37160",
    "end": "43320"
  },
  {
    "text": "a fair bit of research on antivirus and uh we're here talking to you today about the security weaknesses",
    "start": "43320",
    "end": "49800"
  },
  {
    "text": "in the models of antivirus and how antivirus could potentially be the weak point that a hacker might use to",
    "start": "49800",
    "end": "56160"
  },
  {
    "text": "compromise your network to give you an outline of the speed today um we'll give you a",
    "start": "56160",
    "end": "62000"
  },
  {
    "text": "background um on AV it'll be very quick um most people here are very familiar with it how it works it's a a technology",
    "start": "62000",
    "end": "69040"
  },
  {
    "text": "that hasn't evolved that much and so there's not that much that's new to talk about it um we'll go into code coverage",
    "start": "69040",
    "end": "75000"
  },
  {
    "text": "how to audit AV products how to find the places to audit um just where to get started is usually a large part of it um",
    "start": "75000",
    "end": "83520"
  },
  {
    "text": "and we'll talk about some of the results of the auditing that we've done we have some new results to announce today too um and we'll go into that and then um",
    "start": "83520",
    "end": "91119"
  },
  {
    "text": "you know there's still a ton of research to be done in antivirus and um you know",
    "start": "91119",
    "end": "96200"
  },
  {
    "text": "there's there's some future areas that are very interesting that I'm sure we would be interested inpl and many people",
    "start": "96200",
    "end": "101520"
  },
  {
    "text": "in this audience would be too and so we'll talk about those",
    "start": "101520",
    "end": "105600"
  },
  {
    "text": "today um take",
    "start": "107000",
    "end": "111560"
  },
  {
    "text": "that okay so we're going to start off with uh explaining why go after AV why is it interesting and the summary reason",
    "start": "112799",
    "end": "120600"
  },
  {
    "text": "is it has a really high Roi um you get a lot of bang for your buck what we mean",
    "start": "120600",
    "end": "126560"
  },
  {
    "text": "by that is these libraries run on pretty much every system available um gateways clients servers",
    "start": "126560",
    "end": "134519"
  },
  {
    "text": "isps Implement them if you guys have seen the AOL ads and such um they they",
    "start": "134519",
    "end": "139959"
  },
  {
    "text": "even try to sell these products as uh layered Technologies and a lot of companies try and Implement like XYZ",
    "start": "139959",
    "end": "146400"
  },
  {
    "text": "vendor at the Gateway and a different vendor on the client so again um maybe because you only have",
    "start": "146400",
    "end": "153800"
  },
  {
    "text": "McAfee as a client but you may be vulnerable with Trend Micro at the server so you have two different targets",
    "start": "153800",
    "end": "159480"
  },
  {
    "text": "right there with one with one um piece of security software and always as always uh owning",
    "start": "159480",
    "end": "167400"
  },
  {
    "text": "security products is really fun because they're supposed to protect you not hurt you so whenever you can find uh bugs in",
    "start": "167400",
    "end": "174120"
  },
  {
    "text": "them that open you up to more risk than you already were exposed to it kind of defeats the purpose of the security",
    "start": "174120",
    "end": "179840"
  },
  {
    "text": "product in the first place so AV in our opinion probably has one of",
    "start": "179840",
    "end": "186840"
  },
  {
    "text": "the hardest jobs on the security software side like firewalls yeah it's",
    "start": "186840",
    "end": "192640"
  },
  {
    "text": "kind of hard because there's standard streams and you got to protect against a lot but AV has to process all untrusted",
    "start": "192640",
    "end": "199959"
  },
  {
    "text": "input they can't just like block things because users want functionality out of their systems so in order to process all",
    "start": "199959",
    "end": "207920"
  },
  {
    "text": "this they have to mimic hundred of applications which is a lot of surface",
    "start": "207920",
    "end": "213280"
  },
  {
    "text": "area to cover um and then again it's kind of annoying people are always like you know I run Mac or I run Linux so I'm",
    "start": "213280",
    "end": "220680"
  },
  {
    "text": "not susceptible to viruses well you your AV is susceptible then um because these",
    "start": "220680",
    "end": "226599"
  },
  {
    "text": "things are designed to run on lots of different platforms some of the advisories we've issued have even run on",
    "start": "226599",
    "end": "231799"
  },
  {
    "text": "stuff like as400 and things like that like I wouldn't I would never put antivirus on a system like that but",
    "start": "231799",
    "end": "238840"
  },
  {
    "text": "they're available to run on it",
    "start": "238840",
    "end": "241720"
  },
  {
    "text": "um just the the quick background for those of you who uh who don't know a lot about antivirus um the the technology",
    "start": "243879",
    "end": "251959"
  },
  {
    "text": "really hasn't changed in terms of detection capability in 15 years there are a lot of newer features but if you look at how the majority of these",
    "start": "251959",
    "end": "257959"
  },
  {
    "text": "products will catch to the majority of the viruses that are out there it's really a signature or pattern matching",
    "start": "257959",
    "end": "262960"
  },
  {
    "text": "approach um and it's very complex the the process in order to get the data",
    "start": "262960",
    "end": "268479"
  },
  {
    "text": "stream to match the patterns against is very complex um they have to decompose many different file formats decompress",
    "start": "268479",
    "end": "274639"
  },
  {
    "text": "archives um understand you know office file formats and so on but um it in the",
    "start": "274639",
    "end": "281320"
  },
  {
    "text": "end it comes down to a pattern match against a data stream uh there's a whole science about how to create those patterns there are papers you can read",
    "start": "281320",
    "end": "287560"
  },
  {
    "text": "on it um to avoid false positives false negatives I don't want to to oversimplify it but at the same time um",
    "start": "287560",
    "end": "294800"
  },
  {
    "text": "it really hasn't changed that much in a long time if you look at um Enterprise versus consumer AV what we found during",
    "start": "294800",
    "end": "301720"
  },
  {
    "text": "our research is that the same engines run on the $20,000 Gateway appliance that run on your $20 desktop piece of",
    "start": "301720",
    "end": "309120"
  },
  {
    "text": "software um we created exploit files tested them against the appliances um",
    "start": "309120",
    "end": "314320"
  },
  {
    "text": "put it on a desktop and saw the the the exact same code crash in the exact same place what you're really paying for when",
    "start": "314320",
    "end": "320280"
  },
  {
    "text": "it comes to Enterprise software versus um consumer software is the ability to centrally manage an update which is",
    "start": "320280",
    "end": "326240"
  },
  {
    "text": "which is key um but you know under the hood you're looking at the same piece of software across all platforms for most",
    "start": "326240",
    "end": "333240"
  },
  {
    "text": "vendors um and there are some common core components to these things um the iio filters are key um the the antivirus",
    "start": "333240",
    "end": "340759"
  },
  {
    "text": "product is only useful if it can get all sorts you know scan files that come into",
    "start": "340759",
    "end": "346520"
  },
  {
    "text": "your system every way possible be it over a file share through the web um office CD um over IR um you know they",
    "start": "346520",
    "end": "354880"
  },
  {
    "text": "have filters everywhere in your system um and so from an attack standpoint Point what that means is that there's no",
    "start": "354880",
    "end": "361360"
  },
  {
    "text": "shortage of ways to get untrusted input to an antivirus product um it's not one of those things um where you have to sit",
    "start": "361360",
    "end": "367360"
  },
  {
    "text": "you know sit and think about how you get untrusted input to it they're designed to deal with untrusted input um and then",
    "start": "367360",
    "end": "373199"
  },
  {
    "text": "they deal with so many different file formats um and these formats um are are usually segmented off and coded in",
    "start": "373199",
    "end": "379800"
  },
  {
    "text": "separate engines that that might they're usually done in C++ and they are related or inherited in many",
    "start": "379800",
    "end": "385479"
  },
  {
    "text": "cases um there's some standard features updates are key um with traditional",
    "start": "385479",
    "end": "390560"
  },
  {
    "text": "antivirus your your protection is really only as good as your last update and if you look at where the majority of the",
    "start": "390560",
    "end": "395720"
  },
  {
    "text": "infections occur it's in the time between a virus appearing and the update and so keeping them updated is key um",
    "start": "395720",
    "end": "401919"
  },
  {
    "text": "both to to protect from viruses and to make sure that security issues in your antivirus are not being exploited um uh",
    "start": "401919",
    "end": "409520"
  },
  {
    "text": "vendors have M what we call multi-threat detection things such as heris or behavioral detection um and in most of",
    "start": "409520",
    "end": "415759"
  },
  {
    "text": "the traditional AV products um if you look at this the the success rate of catching things through their the newer",
    "start": "415759",
    "end": "421639"
  },
  {
    "text": "detection mechanisms versus uh signature based it's you know it's relatively low and so still the core of the detection",
    "start": "421639",
    "end": "428199"
  },
  {
    "text": "is based on signatures and pattern matches um there's some common configuration um features within these",
    "start": "428199",
    "end": "434759"
  },
  {
    "text": "products that um have some security consequences uh scan level for example",
    "start": "434759",
    "end": "440479"
  },
  {
    "text": "um is how how deep will how how far recursively will will these products",
    "start": "440479",
    "end": "445840"
  },
  {
    "text": "scan um will they scan a zip file within a raar file within a a uh an AR file um",
    "start": "445840",
    "end": "452360"
  },
  {
    "text": "that's usually a configurable parameter uh scan sizes usually related to how",
    "start": "452360",
    "end": "457479"
  },
  {
    "text": "large a file will they scan and there there is a configurable limit in a lot of these products um at which point if",
    "start": "457479",
    "end": "463080"
  },
  {
    "text": "you see a file larger than that they won't scan it um and scan method uh a lot of these products have the ability to turn on or off some of the newer",
    "start": "463080",
    "end": "469800"
  },
  {
    "text": "detection mechanisms and to turn on or off things such as disinfection and so um if you're looking at a AV product",
    "start": "469800",
    "end": "477400"
  },
  {
    "text": "from a uh from an audit standpoint um the default configuration becomes very",
    "start": "477400",
    "end": "482720"
  },
  {
    "text": "important because most users will not tweak these options and so there may be a large large amount of code in an AV product that will simply never be",
    "start": "482720",
    "end": "489400"
  },
  {
    "text": "reachable in standard configuration okay so now we're going to",
    "start": "489400",
    "end": "496199"
  },
  {
    "text": "actually get into how to start auditing AV and I think a lot of these Concepts or ideas we're pointing out are um",
    "start": "496199",
    "end": "503159"
  },
  {
    "text": "applicable across a range of software no matter what you're auditing we're going to speak specifically to AV though um so",
    "start": "503159",
    "end": "509879"
  },
  {
    "text": "you get this binary and you want to start finding bugs in it and a good question is where do I start because you",
    "start": "509879",
    "end": "516640"
  },
  {
    "text": "want to use your time wisely um it's not really practical or efficient to start",
    "start": "516640",
    "end": "521680"
  },
  {
    "text": "going through the thing start to finish it's much quicker to start off where you know that users have influence over",
    "start": "521680",
    "end": "527959"
  },
  {
    "text": "certain functionality and nail those items first and start investigating those items first and the best place to",
    "start": "527959",
    "end": "535440"
  },
  {
    "text": "start is with things you already know so standards a lot of Standards have like maximum sizes you can search for or",
    "start": "535440",
    "end": "542440"
  },
  {
    "text": "magic numbers or strings like for instance arge they have a maximum header size of",
    "start": "542440",
    "end": "549000"
  },
  {
    "text": "a28 so you can just do a search for that a binary search for like a compare instruction is this register bigger than",
    "start": "549000",
    "end": "556160"
  },
  {
    "text": "a28 or this value bigger than a28 well that's kind of a unique number and I would suspect that might be an AR",
    "start": "556160",
    "end": "562880"
  },
  {
    "text": "processor right there and then and in fact the buffer they're retrieving the values from you can probably assume that",
    "start": "562880",
    "end": "568360"
  },
  {
    "text": "that's direct user input or direct input from the file which is created by users um field sizes like PE ox28 you'll",
    "start": "568360",
    "end": "577640"
  },
  {
    "text": "see that 40 bytes all over the place because that's how big a section object is tar has a 512 bytes size so whenever",
    "start": "577640",
    "end": "586560"
  },
  {
    "text": "you see reads for that request you can pretty much assume it's a tar file and we we've got some examples here",
    "start": "586560",
    "end": "593360"
  },
  {
    "text": "on uh real quick how to search through some examples in Ida which is the tool I",
    "start": "593360",
    "end": "600640"
  },
  {
    "text": "think most of us use so um just a quick binary search",
    "start": "600640",
    "end": "607600"
  },
  {
    "text": "a28 and right here you see two instructions compare",
    "start": "607600",
    "end": "613760"
  },
  {
    "text": "compare that's definitely a arge file and as we mentioned before there's other things to look for here's the signature",
    "start": "614920",
    "end": "620839"
  },
  {
    "text": "for arge so every header has to have that signature and you you know right away you have context and these names",
    "start": "620839",
    "end": "627600"
  },
  {
    "text": "right here um they start out like this so you're looking at these",
    "start": "627600",
    "end": "633920"
  },
  {
    "text": "functions and you're like okay they're around these user input um values I can",
    "start": "633920",
    "end": "638959"
  },
  {
    "text": "start naming them because this looks a lot like a read from",
    "start": "638959",
    "end": "643759"
  },
  {
    "text": "file here's all the parameters the destination the length so just start naming",
    "start": "644120",
    "end": "649880"
  },
  {
    "text": "them and you see how uh we already used that",
    "start": "649880",
    "end": "656240"
  },
  {
    "text": "so you see how this trickles through the program too once you name one function that's commonly used it's money because",
    "start": "660120",
    "end": "666399"
  },
  {
    "text": "you can look through all the cross references to it so maybe this didn't have a bug here but we're going to hit",
    "start": "666399",
    "end": "671440"
  },
  {
    "text": "it and then check out all these cross references and this is all a attack",
    "start": "671440",
    "end": "677959"
  },
  {
    "text": "surface you can cover pretty easy and pretty much guarantee that you have context right there and then that this is user input and if you notice I make",
    "start": "677959",
    "end": "686160"
  },
  {
    "text": "notes um after I check things just because a lot of times you'll go over the same piece of code from a couple",
    "start": "686160",
    "end": "692560"
  },
  {
    "text": "different directions and it's really helpful not to go over the same piece of code over and over so once you like",
    "start": "692560",
    "end": "698240"
  },
  {
    "text": "check some cross references just mark off that it's checked because these binaries are pretty big and it's easy to get lost an approach like this is",
    "start": "698240",
    "end": "705320"
  },
  {
    "text": "absolutely key if you look at some of the the sizes of these binaries they're 10 and 12 megabytes millions and",
    "start": "705320",
    "end": "710600"
  },
  {
    "text": "millions of lines of assembly instructions and the majority of it is not influenced by user input and so if",
    "start": "710600",
    "end": "715959"
  },
  {
    "text": "you don't have the starting point you're absolutely lost yeah that's a a frustrating thing actually",
    "start": "715959",
    "end": "722480"
  },
  {
    "text": "because if you don't have a starting point and you start just looking for bad code you're going to find tons of bugs",
    "start": "722480",
    "end": "728440"
  },
  {
    "text": "and 99% of those bugs are going to be with like the the initialization files",
    "start": "728440",
    "end": "733800"
  },
  {
    "text": "or like update files things that the user has no control over it's just solely the vendor's code and it's some",
    "start": "733800",
    "end": "739920"
  },
  {
    "text": "internal management scheme so another great place to start",
    "start": "739920",
    "end": "745160"
  },
  {
    "text": "probably the first place I always start and I think Neil can say the same is directly where the user input is so like",
    "start": "745160",
    "end": "751720"
  },
  {
    "text": "in networking you want to read or receive from and in AV these are all",
    "start": "751720",
    "end": "757160"
  },
  {
    "text": "file based user input so read and read is really easy to spot it's usually not",
    "start": "757160",
    "end": "762440"
  },
  {
    "text": "named it might be wrapped in a couple different layers for different file formats and you can tell just by the",
    "start": "762440",
    "end": "769760"
  },
  {
    "text": "parameter so if I see a link parameter being passed in a destination and then watch what they do with the buffer after",
    "start": "769760",
    "end": "775560"
  },
  {
    "text": "that read if they're checking bites and signatures that's an easy read to spot right there um some interesting things",
    "start": "775560",
    "end": "781360"
  },
  {
    "text": "to observe about these read wrappers is they truncate length so you can get like",
    "start": "781360",
    "end": "788120"
  },
  {
    "text": "a 16bit overflow without doing a negative mem copy which if anyone out",
    "start": "788120",
    "end": "793440"
  },
  {
    "text": "here has tried to exploit negative M copies they're kind of difficult because usually the AES violate on rights",
    "start": "793440",
    "end": "798959"
  },
  {
    "text": "instead of anything else um another very interesting place to look is anywhere the antivirus Eng",
    "start": "798959",
    "end": "805440"
  },
  {
    "text": "will deal with memory allocation um and any place where there are are calculations related to length",
    "start": "805440",
    "end": "812240"
  },
  {
    "text": "to allocate um is going to be interesting um especially if they comine",
    "start": "812240",
    "end": "817720"
  },
  {
    "text": "combine multiple Fields together try and allocate a buffer for them all in one",
    "start": "817720",
    "end": "823000"
  },
  {
    "text": "one allocation and then copy those individual Fields into that buffer at that point you have the ability to",
    "start": "823000",
    "end": "828440"
  },
  {
    "text": "exceed the maximum integer size for your processor and cause a very small allocation um there's some allocators",
    "start": "828440",
    "end": "834680"
  },
  {
    "text": "that check for zero specifically um that that has to do with the fact that",
    "start": "834680",
    "end": "839959"
  },
  {
    "text": "um in some cases You' be able to uh to just wrap to zero and not above zero um",
    "start": "839959",
    "end": "846320"
  },
  {
    "text": "and a zero allocation will succeed on most uh most malum implementations and so in fact everyone I've looked at will",
    "start": "846320",
    "end": "852959"
  },
  {
    "text": "give you a minimum size buffer if you try and allocate zero and so um some of the vendors are more security aware they have checks for that um some of them",
    "start": "852959",
    "end": "860399"
  },
  {
    "text": "will add an internal header size to every single allocation that they do and",
    "start": "860399",
    "end": "866000"
  },
  {
    "text": "that is that is a you know it's a very dangerous practice because then you're open to integer overflows on every",
    "start": "866000",
    "end": "872040"
  },
  {
    "text": "single allocation that your program makes and uh I don't think we've seen vendors check for those integer",
    "start": "872040",
    "end": "877880"
  },
  {
    "text": "overflows when they do those additions for the internal headers that they add and so um as from an audit standpoint as",
    "start": "877880",
    "end": "884120"
  },
  {
    "text": "soon as you see that you begin to go ahead and check all the allocations and that that's just a gold mine right there",
    "start": "884120",
    "end": "889240"
  },
  {
    "text": "and so for any of the people with uh who work for AV companies in the audience um check for that in fact um could we get a",
    "start": "889240",
    "end": "895519"
  },
  {
    "text": "show of hands who here works for an AV company anyone willing to minute one guy right there no one else what's there",
    "start": "895519",
    "end": "901680"
  },
  {
    "text": "they are okay yeah um so there are a few people here work for a companies I'm sure um and um the uh to be honest with",
    "start": "901680",
    "end": "911639"
  },
  {
    "text": "you about the code quality of Av products versus other sectors that we've audited um uh a little bit of a a plug",
    "start": "911639",
    "end": "917920"
  },
  {
    "text": "for you guys here in the audience um we look at a lot of code and we do it for living and the uh the AV products out",
    "start": "917920",
    "end": "923800"
  },
  {
    "text": "there are are much more secure than other classes of software I think the the developers tend to be more security aware",
    "start": "923800",
    "end": "929480"
  },
  {
    "text": "it's just the complexity of the things that they do uh make it dangerous um another interesting place",
    "start": "929480",
    "end": "937120"
  },
  {
    "text": "to look um if you're dealing with a a a file that is text based would be conversions from strings to numbers um",
    "start": "937120",
    "end": "944240"
  },
  {
    "text": "some people will assume that simply because a file format is text based um they're not open to integer overflows",
    "start": "944240",
    "end": "949360"
  },
  {
    "text": "you're dealing with text however um we've seen this many times before where a a programmer will simply take a text",
    "start": "949360",
    "end": "956000"
  },
  {
    "text": "based integer convert it to an integer that's stored in a variable and then add to it when they're",
    "start": "956000",
    "end": "961199"
  },
  {
    "text": "allocating and then you know your text based format is just as open to Dage your overflows as any other uh data",
    "start": "961199",
    "end": "967360"
  },
  {
    "text": "stream based format um bite ordering would be another way you could get context that's a little bit farther outside of um outside of where data is",
    "start": "967360",
    "end": "974959"
  },
  {
    "text": "directly read from the file um your processor has a native bite order that that it expects data to be in the file",
    "start": "974959",
    "end": "981319"
  },
  {
    "text": "form I might not necessarily agree with that and so if you're dealing with a big endian file format on a little endian",
    "start": "981319",
    "end": "986560"
  },
  {
    "text": "processor such as Intel you have to do that conversion before you can use the uh use the integer internally and so um",
    "start": "986560",
    "end": "993199"
  },
  {
    "text": "that that gives you a fairly good place to start when when you're dealing with inut usually the first thing they do would be to convert it to the correct",
    "start": "993199",
    "end": "998279"
  },
  {
    "text": "Bor and then use the variables um check someon CRC code another good place to",
    "start": "998279",
    "end": "1003319"
  },
  {
    "text": "look um it's fairly easy to spot check some of CRC code or even crypto code um",
    "start": "1003319",
    "end": "1009000"
  },
  {
    "text": "in in assembly because you'll see instructions used that are usually NE usually never used by the compiler",
    "start": "1009000",
    "end": "1014759"
  },
  {
    "text": "things like rotate right or um you you'll see things such as exor where the",
    "start": "1014759",
    "end": "1020480"
  },
  {
    "text": "the source and the destination operand are different um things like that uh which which jump out you after you stare",
    "start": "1020480",
    "end": "1026798"
  },
  {
    "text": "at this for long enough and you begin to realize that you know this is CRC code in some cases it's very very",
    "start": "1026799",
    "end": "1032480"
  },
  {
    "text": "recognizable um but that gives you the ability to find where your data is being validated or looked at um which may not",
    "start": "1032480",
    "end": "1039520"
  },
  {
    "text": "be immediately after it's read from the file um some of these products will read data from a file buffer it and then come",
    "start": "1039520",
    "end": "1045280"
  },
  {
    "text": "back to it later and so that gives you that point there",
    "start": "1045280",
    "end": "1050360"
  },
  {
    "text": "okay so a lot of these um file format engines",
    "start": "1050400",
    "end": "1056039"
  },
  {
    "text": "are can you guys hear me all right no can someone turn off my mic",
    "start": "1056039",
    "end": "1063200"
  },
  {
    "text": "move it higher up so a lot of these file format engines",
    "start": "1063200",
    "end": "1069520"
  },
  {
    "text": "are structured in a way in C++ so that they can be reused and wrapped in other",
    "start": "1069520",
    "end": "1074840"
  },
  {
    "text": "file format engines uh it's common to see m Z is the overall external rapper",
    "start": "1074840",
    "end": "1082039"
  },
  {
    "text": "we reviewed several antivirus products probably seven or eight and almost all of them have this structure whereas",
    "start": "1082039",
    "end": "1088600"
  },
  {
    "text": "they'll have a file format engine processor for MZ which will be used by",
    "start": "1088600",
    "end": "1093640"
  },
  {
    "text": "the PE file format engine which will be used by whatever file format engine is in it so with the semantic vulnerability",
    "start": "1093640",
    "end": "1100440"
  },
  {
    "text": "there were three different file wrappers around the vulnerability which makes it kind of tough to spot but if you're",
    "start": "1100440",
    "end": "1106840"
  },
  {
    "text": "aware of it it can actually be used because what you can do is you can start building out a notepad of all the",
    "start": "1106840",
    "end": "1112640"
  },
  {
    "text": "offsets within these classes and what they're used for and whenever you see like an indirect call for like call eax",
    "start": "1112640",
    "end": "1119320"
  },
  {
    "text": "plus 18 you know at 18 that's the file format processor for PE and PE has file",
    "start": "1119320",
    "end": "1125120"
  },
  {
    "text": "format processor for upx or aspac or whatever else so we just finished talking about",
    "start": "1125120",
    "end": "1132960"
  },
  {
    "text": "code coverage how do you start auditing to find bugs efficiently um next next we're going to talk about the",
    "start": "1132960",
    "end": "1138919"
  },
  {
    "text": "inefficiencies in AV not necessarily memory corruption but evading the tool",
    "start": "1138919",
    "end": "1145080"
  },
  {
    "text": "itself so passing viruses through it which is kind of a mute point which we'll get to eventually um in a couple",
    "start": "1145080",
    "end": "1151320"
  },
  {
    "text": "slides but basically anytime these AV engines Implement a product like raar or",
    "start": "1151320",
    "end": "1158240"
  },
  {
    "text": "zip they have to do it exactly like raar or zip and any differences between the",
    "start": "1158240",
    "end": "1163960"
  },
  {
    "text": "actual product and the AV engine can be exploitable especially when the engine",
    "start": "1163960",
    "end": "1170320"
  },
  {
    "text": "is stricter than the actual product itself and I I forgot the name of the",
    "start": "1170320",
    "end": "1175960"
  },
  {
    "text": "person who discovered these vulnerabilities originally but there was a lot of work done on zip archives where",
    "start": "1175960",
    "end": "1181400"
  },
  {
    "text": "you can have like zero length fields and actual zip decompressor will decompress it but these AV engines will say oh",
    "start": "1181400",
    "end": "1187919"
  },
  {
    "text": "that's an invalid size so we're not going to process this file anymore um default scan levels are also",
    "start": "1187919",
    "end": "1194760"
  },
  {
    "text": "really interesting especially when you have self- extracting executables so no",
    "start": "1194760",
    "end": "1200960"
  },
  {
    "text": "one's going to go in and un unzip a a raar and then un raar a zip and like all",
    "start": "1200960",
    "end": "1207360"
  },
  {
    "text": "these layers because it's a pain but if these have self- extracting modules you can encode this in a couple different",
    "start": "1207360",
    "end": "1214000"
  },
  {
    "text": "layers and One Click by the user and they're owned but the AV engine wouldn't",
    "start": "1214000",
    "end": "1219200"
  },
  {
    "text": "scan it because the the virus sits two layers below where the default scan level",
    "start": "1219200",
    "end": "1225519"
  },
  {
    "text": "is a lot of a lot of these uh these configuration options are in there because um most",
    "start": "1226600",
    "end": "1233600"
  },
  {
    "text": "users will not sacrifice performance for security and so if the antivirus product is dragging down their system they'll",
    "start": "1233600",
    "end": "1239840"
  },
  {
    "text": "simply turn it off uninstall it um reinstall their operating system whatever it may be um uh file size",
    "start": "1239840",
    "end": "1246400"
  },
  {
    "text": "limitations um it's you know it's very easy to create a a very small compress file that decompresses to a very large",
    "start": "1246400",
    "end": "1252600"
  },
  {
    "text": "file and so um some of the um the limits scan limits for these products is tuned",
    "start": "1252600",
    "end": "1258559"
  },
  {
    "text": "relatively low I think we saw an AV product that had a default scan level or default scan size of 20 megabytes which",
    "start": "1258559",
    "end": "1264919"
  },
  {
    "text": "is really not that big um I get emails that that are that big you know once every month and um at that point you",
    "start": "1264919",
    "end": "1273080"
  },
  {
    "text": "know you can compress a 400 400 megga file into a couple k um and have it not",
    "start": "1273080",
    "end": "1278640"
  },
  {
    "text": "scanned by AV um format collisions this was actually the um the most interesting",
    "start": "1278640",
    "end": "1284600"
  },
  {
    "text": "evasion we found for antivirus going to give Alex complete credit for it I didn't think it would work um but",
    "start": "1284600",
    "end": "1290000"
  },
  {
    "text": "believe it or not it does what it what essentially what this is is it's a uh it's creating a file that conforms to",
    "start": "1290000",
    "end": "1296240"
  },
  {
    "text": "two different file formats so um you could have a file that is an executable",
    "start": "1296240",
    "end": "1301799"
  },
  {
    "text": "but is also a a zip file I think what we used it was a an executable that was also a lha file for example and these",
    "start": "1301799",
    "end": "1309400"
  },
  {
    "text": "antivirus engines will prioritize which file types they scan in a lot of cases and they will scan whatever comes up as",
    "start": "1309400",
    "end": "1316000"
  },
  {
    "text": "you scan for viruses that conform to a certain file type um based on priority and so if you want to make a an archive",
    "start": "1316000",
    "end": "1323279"
  },
  {
    "text": "and you don't want to have it scanned by antivirus make it look like an executable uh as well and um you know",
    "start": "1323279",
    "end": "1329960"
  },
  {
    "text": "these these AV engines no longer trust things such as file extensions all this file recognition is done via heris sixs",
    "start": "1329960",
    "end": "1335600"
  },
  {
    "text": "and so um it it is in many cases it is possible to create these conflicting or",
    "start": "1335600",
    "end": "1341159"
  },
  {
    "text": "uh these fileformat that do Collide and we'll talk about how this was useful in one of the vulnerabilities later",
    "start": "1341159",
    "end": "1349760"
  },
  {
    "text": "um and so we talked about evading these products um and and really um in the end",
    "start": "1349799",
    "end": "1357400"
  },
  {
    "text": "it's really kind of useless to to even to even talk about this stuff because if someone were a malware author and they",
    "start": "1357400",
    "end": "1362679"
  },
  {
    "text": "wanted to evade your antivirus all they really have to do is write a new virus um the zero dat protection capabilities",
    "start": "1362679",
    "end": "1368200"
  },
  {
    "text": "from from most of these products is really minimal um there's there's always that window of vulnerability um AV",
    "start": "1368200",
    "end": "1374240"
  },
  {
    "text": "vendors collect uh collect malware samples from their infected customer",
    "start": "1374240",
    "end": "1379480"
  },
  {
    "text": "um the business model really amazes me but it has worked for a long time um and so um we see things like the product may",
    "start": "1379480",
    "end": "1387400"
  },
  {
    "text": "you know may protect other processes but you know for example with McAfee and CSA we saw that CSA was not protecting the",
    "start": "1387400",
    "end": "1393840"
  },
  {
    "text": "McAfee process itself we see things like that where um these products are really",
    "start": "1393840",
    "end": "1399000"
  },
  {
    "text": "IL equipped to deal with zero day attacks so so I just want to make that",
    "start": "1399000",
    "end": "1404240"
  },
  {
    "text": "clear every process on the system running McAfee was protected by CSA uh",
    "start": "1404240",
    "end": "1410039"
  },
  {
    "text": "memory protection mechanism except for the macafe",
    "start": "1410039",
    "end": "1415440"
  },
  {
    "text": "itself um so now we're going to get into memory corruption Which is far more",
    "start": "1415840",
    "end": "1421000"
  },
  {
    "text": "interesting than uh evasion the first thing is inconsistent",
    "start": "1421000",
    "end": "1426640"
  },
  {
    "text": "checks the these are pretty much the cruxs of the bugs that have been discovered in AV so far um integer",
    "start": "1426640",
    "end": "1433960"
  },
  {
    "text": "issues with inconsistent checks or just playing out just bad checks um",
    "start": "1433960",
    "end": "1439279"
  },
  {
    "text": "types like treating something as signed when it should be unsigned uh truncating",
    "start": "1439279",
    "end": "1444480"
  },
  {
    "text": "allocation sizes to 16 bits instead of leaving it at 32 bits having the different an allocation size that's",
    "start": "1444480",
    "end": "1451520"
  },
  {
    "text": "different than what's actually copied can be dangerous um and you'll see a lot of examples of that and then uh negative",
    "start": "1451520",
    "end": "1458360"
  },
  {
    "text": "offsets for reading into files so these read wrappers can read backwards as well as forwards so you provide a negative",
    "start": "1458360",
    "end": "1465279"
  },
  {
    "text": "offset they've allocated like 100 bytes because the file is 100 bytes long and",
    "start": "1465279",
    "end": "1470679"
  },
  {
    "text": "every time they read they copy into this buffer that they've allocated 100 bytes well if you can make that make that AV",
    "start": "1470679",
    "end": "1478480"
  },
  {
    "text": "engine seek backwards and keep reading you can copy in more data than 100 bytes",
    "start": "1478480",
    "end": "1483840"
  },
  {
    "text": "and this was actually uh the exact reason that semantic was vulnerable with upx",
    "start": "1483840",
    "end": "1491320"
  },
  {
    "text": "decompression um another thing that we've seen we talked about this a little bit earlier uh rappers on allocations if",
    "start": "1492760",
    "end": "1498640"
  },
  {
    "text": "they modify the length um if they add to it you have the potential for an integer overflow that leads to a small",
    "start": "1498640",
    "end": "1503720"
  },
  {
    "text": "allocation there uh one of the a products we looked at I don't think we'll name it um but they they had an",
    "start": "1503720",
    "end": "1509559"
  },
  {
    "text": "allocator that truncated the allocation um to a 16 bit size so the maximum allocation you can make is 64k and um I",
    "start": "1509559",
    "end": "1517279"
  },
  {
    "text": "don't even know how that worked in I don't know how the software functioned doing that um but um you see these type",
    "start": "1517279",
    "end": "1523440"
  },
  {
    "text": "of errors that that are uh a major source of remotely explodable vulnerabilities in the these products",
    "start": "1523440",
    "end": "1529440"
  },
  {
    "text": "another thing is if you have 32-bit fields and you're running on a 32-bit processor the fields coming out of the",
    "start": "1529440",
    "end": "1535960"
  },
  {
    "text": "file are extremely close to the maximum or minimum boundaries for an integer whatever that type may be on your",
    "start": "1535960",
    "end": "1542200"
  },
  {
    "text": "processor and so 32-bit 32-bit sizes um",
    "start": "1542200",
    "end": "1547480"
  },
  {
    "text": "and 32-bit processors lead to many more integer overflows and and honestly virtually every file format that you see",
    "start": "1547480",
    "end": "1554520"
  },
  {
    "text": "that's binary on on your 32-bit system is going to be have 32bit in ERS in",
    "start": "1554520",
    "end": "1559760"
  },
  {
    "text": "it um string based formats U we didn't find a lot of simple string based bugs I",
    "start": "1559760",
    "end": "1565000"
  },
  {
    "text": "think Alex found one um but um the majority of these products will parse text based formats with a you know a",
    "start": "1565000",
    "end": "1573440"
  },
  {
    "text": "well-proven um parsing mechanism they're not they're not going to roll their own um and so they were relatively immune to",
    "start": "1573440",
    "end": "1579919"
  },
  {
    "text": "this type of stuff but you never know and it could always be there um more subtle vulnerabilties such as offi ones",
    "start": "1579919",
    "end": "1585200"
  },
  {
    "text": "related to text parsing U may still linger in these prodct today um but the binary the binary based formats were",
    "start": "1585200",
    "end": "1591799"
  },
  {
    "text": "really where the majority of the issues were and they they honestly are a lot harder to get completely right and the",
    "start": "1591799",
    "end": "1598480"
  },
  {
    "text": "plus is they're easier to reverse than text based formats generally um in our",
    "start": "1598480",
    "end": "1604559"
  },
  {
    "text": "opinion so everyone looks kind of tired and I think this is the fun part of the speech well the second most fun part of",
    "start": "1604559",
    "end": "1610720"
  },
  {
    "text": "the speech where we give you examples and you guys have to point out the bugs so at first we were kind of like uh I I",
    "start": "1610720",
    "end": "1618279"
  },
  {
    "text": "don't know if this will be too easy for everyone because it's kind of hard to hide a bug in one slide so let's see how",
    "start": "1618279",
    "end": "1625559"
  },
  {
    "text": "good that goes um this this is uh we're going to start off easy and get more",
    "start": "1625559",
    "end": "1631559"
  },
  {
    "text": "subtle as we go along so just uh raise your hand and we'll call on you when you see the bug if no one answers for",
    "start": "1631559",
    "end": "1637760"
  },
  {
    "text": "putting the AV guys on the spot we know where you are",
    "start": "1637760",
    "end": "1641639"
  },
  {
    "text": "now so does anyone see the mistake here I'll give you a hint uh the destination",
    "start": "1645080",
    "end": "1652600"
  },
  {
    "text": "buffer can be overflowed in the read file ESI points to untrusted",
    "start": "1652600",
    "end": "1661840"
  },
  {
    "text": "input does anyone know what Lea stands for what instruction that is all right",
    "start": "1661919",
    "end": "1669360"
  },
  {
    "text": "you correct he said there's an integer overflow in the second line and basically what they're doing is they're",
    "start": "1670519",
    "end": "1676360"
  },
  {
    "text": "grabbing a integer from the file and then adding something to it and it really doesn't matter what it is as long",
    "start": "1676360",
    "end": "1682840"
  },
  {
    "text": "as it's not zero because you could set negative one as that integer from the file so ebx is Nega 1 add edx to it and",
    "start": "1682840",
    "end": "1690559"
  },
  {
    "text": "it becomes too big or too it's becomes not too",
    "start": "1690559",
    "end": "1697039"
  },
  {
    "text": "big you guys see where that is it's pretty simple um the examples are going to get a little more subtle as we move",
    "start": "1697039",
    "end": "1703519"
  },
  {
    "text": "on so -1 + 1 equals",
    "start": "1703519",
    "end": "1709399"
  },
  {
    "text": "zero zero so ECX is zero is EC is zero",
    "start": "1709440",
    "end": "1714480"
  },
  {
    "text": "above 2000 no so they use the negative one the",
    "start": "1714480",
    "end": "1719919"
  },
  {
    "text": "length field ebx still says negative 1 as the read length and the money thing about AV bugs is this thing is going to",
    "start": "1719919",
    "end": "1727480"
  },
  {
    "text": "error out when the file ends so you're not going to have a negative mem copy",
    "start": "1727480",
    "end": "1732559"
  },
  {
    "text": "situation in this scenario which is again really good from an attacker's perspective",
    "start": "1732559",
    "end": "1739919"
  },
  {
    "text": "error number",
    "start": "1741080",
    "end": "1743640"
  },
  {
    "text": "two very common error we've seen it in a lot of products not just AV in fact",
    "start": "1747159",
    "end": "1752200"
  },
  {
    "text": "we'll be talking about one one product today that has this exact error in",
    "start": "1752200",
    "end": "1758760"
  },
  {
    "text": "it same guy any anyone else know it okay go ahead go ahead um I think the first",
    "start": "1762200",
    "end": "1771000"
  },
  {
    "text": "instruction correct um that's half of it that's",
    "start": "1774279",
    "end": "1779880"
  },
  {
    "text": "half so does anyone know the difference between JG and Ja a I see a guy raising",
    "start": "1780880",
    "end": "1787720"
  },
  {
    "text": "his hand right back",
    "start": "1787720",
    "end": "1790600"
  },
  {
    "text": "there well actually actually the sign extension converts it into to a 32bit integer with an with an",
    "start": "1794640",
    "end": "1800120"
  },
  {
    "text": "ECX yes the you're exactly right word yeah and",
    "start": "1800120",
    "end": "1807760"
  },
  {
    "text": "so basically there there's the uh there's a less than zero case here that is not checked for um and so um anything",
    "start": "1807760",
    "end": "1816240"
  },
  {
    "text": "less than zero will bypass a length check um and will be treated as an unsigned integer in that memory copy and",
    "start": "1816240",
    "end": "1822720"
  },
  {
    "text": "so it leads to a huge memory copy copy based on a negative length on the stack which negative meem",
    "start": "1822720",
    "end": "1829919"
  },
  {
    "text": "copies on the stack are a lot more exploitable than negative meem copies on the Heap okay so far we're two for",
    "start": "1829919",
    "end": "1837080"
  },
  {
    "text": "two keep going all right um this one actually uh Neil found a bug not an AV",
    "start": "1837080",
    "end": "1844000"
  },
  {
    "text": "product but in a a certain product we won't mention it but I think this bug is really interesting um it's basically a",
    "start": "1844000",
    "end": "1852080"
  },
  {
    "text": "loop um doing a string length and can anyone tell like a what's wrong with the",
    "start": "1852080",
    "end": "1858799"
  },
  {
    "text": "string length Loop what was",
    "start": "1858799",
    "end": "1864080"
  },
  {
    "text": "that I can't hear speak up sorry I can't hear you it could overflow these all can",
    "start": "1864080",
    "end": "1871200"
  },
  {
    "text": "overflow how character character overflow how",
    "start": "1871200",
    "end": "1877039"
  },
  {
    "text": "what's the mistake I think I think you're you're right but ink yeah so I think he's got it I",
    "start": "1877039",
    "end": "1885000"
  },
  {
    "text": "think all right so what we're reading into your answer is that because uh BL Can Only Hold 256 values",
    "start": "1885000",
    "end": "1894000"
  },
  {
    "text": "um if you supply a string longer than 256 bytes it will truncate and wrap so",
    "start": "1894000",
    "end": "1900039"
  },
  {
    "text": "once it hits 256 it's going to wrap down to zero and that test on comparing BL to",
    "start": "1900039",
    "end": "1906639"
  },
  {
    "text": "100 is going to fail basically this this is a problem you can run into where you're using a",
    "start": "1906639",
    "end": "1912720"
  },
  {
    "text": "integer to store a length and that integer is smaller than the address space for your for your processor and so",
    "start": "1912720",
    "end": "1919760"
  },
  {
    "text": "um so you know then then stir lens can overflow um any sort of loop that",
    "start": "1919760",
    "end": "1924799"
  },
  {
    "text": "iterates through um through data can then overflow I think these truncation issues",
    "start": "1924799",
    "end": "1931399"
  },
  {
    "text": "are really interesting and probably there's a lot more out there um I don't think you're going to find a a a small",
    "start": "1931399",
    "end": "1938279"
  },
  {
    "text": "Loop like this in many popular products but it'll be more distributed throughout more",
    "start": "1938279",
    "end": "1944039"
  },
  {
    "text": "code have shown the copy the stir copy yeah we deleted the stir copy just",
    "start": "1944039",
    "end": "1949840"
  },
  {
    "text": "because um it it wasn't readable with all the text on there but it's a good",
    "start": "1949840",
    "end": "1957480"
  },
  {
    "text": "point word yeah you're right so stir copy Follow That by like a a",
    "start": "1957480",
    "end": "1964960"
  },
  {
    "text": "uh I yeah I see exactly what you're saying yeah or it could even be a read read a bite and stop reading when the",
    "start": "1964960",
    "end": "1970960"
  },
  {
    "text": "bite is zero same thing as stir copy so there's a couple different scenarios where this could be exploitable and",
    "start": "1970960",
    "end": "1976600"
  },
  {
    "text": "there's a couple different where it couldn't be but in essence it's bad code",
    "start": "1976600",
    "end": "1982120"
  },
  {
    "text": "regardless okay um this one is what Neil mentioned earlier internal allocator",
    "start": "1982279",
    "end": "1988120"
  },
  {
    "text": "that adds you know a specific amount of btes to the requested allocation size in",
    "start": "1988120",
    "end": "1993880"
  },
  {
    "text": "order to account for like internal headers or some sort of administration buffers so again we got the",
    "start": "1993880",
    "end": "2002639"
  },
  {
    "text": "Lea right there is",
    "start": "2005760",
    "end": "2011399"
  },
  {
    "text": "or right yeah that's exactly it it'll allocate a really small buffer and copy",
    "start": "2011399",
    "end": "2017000"
  },
  {
    "text": "into a really large amount there there are some a products that do this for every single allocation in their entire",
    "start": "2017000",
    "end": "2022880"
  },
  {
    "text": "product Suite those are really good bugs to",
    "start": "2022880",
    "end": "2028159"
  },
  {
    "text": "find okay so here's the last one um I think this one is really subtle and",
    "start": "2028159",
    "end": "2034080"
  },
  {
    "text": "probably in a lot more products than just AV",
    "start": "2034080",
    "end": "2039360"
  },
  {
    "text": "what's the first mistake",
    "start": "2040559",
    "end": "2043638"
  },
  {
    "text": "here I heard someone shout out they don't check the return value right so what could the return",
    "start": "2046519",
    "end": "2052240"
  },
  {
    "text": "value be it could be it could be an error f f",
    "start": "2052240",
    "end": "2059599"
  },
  {
    "text": "f FF negative one and then add Nega 1 to one it",
    "start": "2059599",
    "end": "2065000"
  },
  {
    "text": "becomes zero they allocate a really small amount and do the copy based on the error code and actually this bug is",
    "start": "2065000",
    "end": "2071000"
  },
  {
    "text": "in a couple different AV",
    "start": "2071000",
    "end": "2074919"
  },
  {
    "text": "products okay so now we covered some examples how to start and now we're",
    "start": "2077720",
    "end": "2083358"
  },
  {
    "text": "going to go over our overall methodology and we think this methodology is not only uh beneficial to auditing AV but",
    "start": "2083359",
    "end": "2090960"
  },
  {
    "text": "also pretty much any product where you're required to do some reverse engineering uh the first thing that's",
    "start": "2090960",
    "end": "2097118"
  },
  {
    "text": "great to do as you saw earlier when I named get bittes from file get bites um",
    "start": "2097119",
    "end": "2102599"
  },
  {
    "text": "you want to identify all the utility functions because it makes your context as a user or as an attacker a lot more",
    "start": "2102599",
    "end": "2109119"
  },
  {
    "text": "clear when you're reviewing code in the binary um these rappers can be rappers",
    "start": "2109119",
    "end": "2115599"
  },
  {
    "text": "for a file IO allocations and various other things that are pretty",
    "start": "2115599",
    "end": "2122799"
  },
  {
    "text": "interesting after Neil finishes checking his BlackBerry sorry um",
    "start": "2123400",
    "end": "2129079"
  },
  {
    "text": "I got totally busted on that one um so once you've identified those um those",
    "start": "2129079",
    "end": "2134160"
  },
  {
    "text": "utility functions you then want to trace the untrusted input from that point on you consider that the entry point into the application for the input and um and",
    "start": "2134160",
    "end": "2142240"
  },
  {
    "text": "then you probably want to follow it as far as you can and um and try and pick it up later if you lose it and so what",
    "start": "2142240",
    "end": "2149760"
  },
  {
    "text": "we do is we'll we'll track these these offsets into these huge classes um write them down and then try and pick them up",
    "start": "2149760",
    "end": "2156319"
  },
  {
    "text": "later in the binary um and so if it's if it's a at a at a low offset into the",
    "start": "2156319",
    "end": "2162000"
  },
  {
    "text": "class you're probably not going to have a lot of luck because there'll be a lot of um lot of instructions that access you know four 8 10 16 bytes into into uh",
    "start": "2162000",
    "end": "2170200"
  },
  {
    "text": "structures but if it's something unique something a little bit bigger there's a very good chance that you could pick it up later on in the application um but",
    "start": "2170200",
    "end": "2176880"
  },
  {
    "text": "you want to look for allocations look for memory copies um anything dealing with the data that uh that causes memory",
    "start": "2176880",
    "end": "2182800"
  },
  {
    "text": "to be written to in a variable way and at that point you then have a",
    "start": "2182800",
    "end": "2188079"
  },
  {
    "text": "a a great way to to to find you know the vast majority of the bugs in these",
    "start": "2188079",
    "end": "2193200"
  },
  {
    "text": "products um and the file format processors uh reverse the hell out of them um they are you know this is where",
    "start": "2193760",
    "end": "2200440"
  },
  {
    "text": "we found uh all these bugs basically um and the more you understand about them",
    "start": "2200440",
    "end": "2206400"
  },
  {
    "text": "the more you will find um I know that I've looked at code thought it was Secure come back read it a little bit",
    "start": "2206400",
    "end": "2212440"
  },
  {
    "text": "more and and seen something and so um it really comes down to understanding the",
    "start": "2212440",
    "end": "2218359"
  },
  {
    "text": "the file for processors and understanding something about them that the developers didn't think about you're really you're really trying to outthink",
    "start": "2218359",
    "end": "2224640"
  },
  {
    "text": "the person who wrote the code or find oversights that they may have made um and especially in these a products where",
    "start": "2224640",
    "end": "2230240"
  },
  {
    "text": "these products have probably been audited by by either internally or by a third party um you're really looking at",
    "start": "2230240",
    "end": "2236839"
  },
  {
    "text": "code that is relatively secure um you really do have to have an understanding of the code you normally you just cannot",
    "start": "2236839",
    "end": "2242760"
  },
  {
    "text": "grab for as print for stir copy and expect to come back with results on these type of things",
    "start": "2242760",
    "end": "2249520"
  },
  {
    "text": "okay so now we're going to go over some of our results um during our av audit and I think that these results kind of",
    "start": "2249640",
    "end": "2256280"
  },
  {
    "text": "speak for themselves uh this software is supposed to secure you and it's not uh",
    "start": "2256280",
    "end": "2262319"
  },
  {
    "text": "it's actually opening you up to more vulnerabilities um and that's that's really why we went after it because it's",
    "start": "2262319",
    "end": "2269359"
  },
  {
    "text": "the most interesting way to find bugs is when you can exploit something that's supposed to protect you so semantic as",
    "start": "2269359",
    "end": "2276079"
  },
  {
    "text": "we mentioned before it was a offset um when they're rebuilding the PE header after they've unpacked it um Heap",
    "start": "2276079",
    "end": "2282400"
  },
  {
    "text": "overflow with no character restrictions it's also pretty money uh this one was stable across different service packs",
    "start": "2282400",
    "end": "2289480"
  },
  {
    "text": "and versions of os's just because of the way the library was implemented so we",
    "start": "2289480",
    "end": "2294720"
  },
  {
    "text": "had we wrote an exploit for this on semantic uh secure Gateway The Big Box they sell for I don't know thousands of",
    "start": "2294720",
    "end": "2301920"
  },
  {
    "text": "dollars and that same exploit triggered the bug on Norton antivirus",
    "start": "2301920",
    "end": "2307640"
  },
  {
    "text": "2005 on Windows or you know Linux whatever it's running on so again we're",
    "start": "2307640",
    "end": "2313720"
  },
  {
    "text": "going to repeat High Roi and um these things are pretty portable across",
    "start": "2313720",
    "end": "2319960"
  },
  {
    "text": "different platforms um McAfee um this is actually",
    "start": "2319960",
    "end": "2325599"
  },
  {
    "text": "a a fairly simple bug one that I wouldn't expect to see in a commercial security product um it was a stack based",
    "start": "2325599",
    "end": "2332440"
  },
  {
    "text": "overflow s printf percent s um you know the classic bug that has been eliminated",
    "start": "2332440",
    "end": "2338319"
  },
  {
    "text": "from most software about five years ago um it looked it looked very simple to start and then we went to trigger it and",
    "start": "2338319",
    "end": "2345000"
  },
  {
    "text": "what we realized is that you know it really wasn't um there was it was in the the processing of lha archive files um",
    "start": "2345000",
    "end": "2352760"
  },
  {
    "text": "has anyone here ever heard of lha archives a couple people um yeah it's a",
    "start": "2352760",
    "end": "2357839"
  },
  {
    "text": "fairly obscure old archive format um there was actually an overflow in the Linux client for lha archives and they",
    "start": "2357839",
    "end": "2365680"
  },
  {
    "text": "had created a signature for that in their a product so they were detecting files that would have triggered this",
    "start": "2365680",
    "end": "2371520"
  },
  {
    "text": "overflow on Linux um I I I'm not sure what happened when they when they took the test file and ran through their",
    "start": "2371520",
    "end": "2376920"
  },
  {
    "text": "product um maybe it crashed their product and so they they implemented it as a um as a scripted check it's it's",
    "start": "2376920",
    "end": "2384680"
  },
  {
    "text": "pseudo code um and it was not the compile code which had the Overflow that was that was flagging this so you create",
    "start": "2384680",
    "end": "2389920"
  },
  {
    "text": "a file that's about to overflow by one by one bite and you get an antivirus",
    "start": "2389920",
    "end": "2395200"
  },
  {
    "text": "message pop up you roll it back a b and nothing happens and you don't figure the Overflow and so it was fairly",
    "start": "2395200",
    "end": "2400280"
  },
  {
    "text": "frustrating to see the Overflow there in the code uh very simple but not be able to reach it and so um this is where the",
    "start": "2400280",
    "end": "2406920"
  },
  {
    "text": "file format Collision evasion came in um obviously the um the scripted engine is",
    "start": "2406920",
    "end": "2412400"
  },
  {
    "text": "going to be less less um it's going to perform a lot slower",
    "start": "2412400",
    "end": "2418160"
  },
  {
    "text": "than the compiled engine and so um the uh the scripted engine was doing",
    "start": "2418160",
    "end": "2423359"
  },
  {
    "text": "prioritization of file types and trying to determine what the file is before it actually scanned it and so they would",
    "start": "2423359",
    "end": "2428880"
  },
  {
    "text": "run a a heris over the file determine that it's a certain file type um then scan it for only vulnerabilities related",
    "start": "2428880",
    "end": "2435280"
  },
  {
    "text": "to that file or viruses related to that file type and so in this case Alex created a uh an executable file that was",
    "start": "2435280",
    "end": "2442319"
  },
  {
    "text": "also an lha file executable files were obviously High much more high priority than lha files the scripted engine would",
    "start": "2442319",
    "end": "2448200"
  },
  {
    "text": "only scan it for V executable viruses flag it is okay pass it off to the compiled engine which is a little bit",
    "start": "2448200",
    "end": "2454599"
  },
  {
    "text": "faster scanned for everything at that point it would get scanned as P file as well as an lha file and at that point",
    "start": "2454599",
    "end": "2460839"
  },
  {
    "text": "you could trigger the Overflow the once you could get to that point um the Overflow is very simple and easy to exploit but there was a very a very",
    "start": "2460839",
    "end": "2467440"
  },
  {
    "text": "challenging process to get to that point word also I think it's interesting",
    "start": "2467440",
    "end": "2472839"
  },
  {
    "text": "to note that this uh issuing a DAT file or a signature for a vulnerability in",
    "start": "2472839",
    "end": "2479440"
  },
  {
    "text": "their own product is probably not the best solution unfortunately um we've",
    "start": "2479440",
    "end": "2485440"
  },
  {
    "text": "seen this happen with bugs reported to these vendors so the semantic bug",
    "start": "2485440",
    "end": "2491720"
  },
  {
    "text": "they're still using the vulnerable um file format engine in older versions of the product and they they fixed it by",
    "start": "2491720",
    "end": "2498560"
  },
  {
    "text": "issuing a DAT to trying to detect for the possible overflow so again if you",
    "start": "2498560",
    "end": "2503839"
  },
  {
    "text": "can figure out a file format Collision that works to reach that buggy code they're still vulnerable and um I didn't",
    "start": "2503839",
    "end": "2510400"
  },
  {
    "text": "mean to pick on semantic because a lot of other AV vendors have done the same thing uh maybe not with us but with",
    "start": "2510400",
    "end": "2516800"
  },
  {
    "text": "different uh bugs in their product that they might have found on their own we've noticed this is a fairly common practice among",
    "start": "2516800",
    "end": "2523160"
  },
  {
    "text": "AV vendors and I think it's flawed because I mean to to issue a signature",
    "start": "2523160",
    "end": "2529920"
  },
  {
    "text": "for a bug in your product assumes that your product is Flawless so if your",
    "start": "2529920",
    "end": "2536960"
  },
  {
    "text": "product's Flawless the detection engine's Flawless yeah maybe it will work out with the signature based",
    "start": "2536960",
    "end": "2542599"
  },
  {
    "text": "protection but I I don't think that's the case and I think even these AV companies will admit that's not the",
    "start": "2542599",
    "end": "2549680"
  },
  {
    "text": "case so this bug is kind of cool um for a couple reasons one um pretty much all",
    "start": "2550079",
    "end": "2556400"
  },
  {
    "text": "of Asia runs Trend Micro uh all hot mail is protected by",
    "start": "2556400",
    "end": "2561720"
  },
  {
    "text": "Trend Micro this stuff is sitting at the hot mail gate Gateway that's like 200 million users just I mean 200 million",
    "start": "2561720",
    "end": "2568040"
  },
  {
    "text": "users accounts with one email which is cool um this uh this bug",
    "start": "2568040",
    "end": "2575119"
  },
  {
    "text": "is the same bug as the FSE secure bug it it was cool to find it because you're",
    "start": "2575119",
    "end": "2581079"
  },
  {
    "text": "also you're getting a two for one so talk about high",
    "start": "2581079",
    "end": "2586280"
  },
  {
    "text": "Roi um and the extra cool thing about this is it was in the kernel and this",
    "start": "2586280",
    "end": "2591400"
  },
  {
    "text": "was the first uh Windows kernel overflow Neil or I did um and we actually got a",
    "start": "2591400",
    "end": "2596920"
  },
  {
    "text": "shell working back on it which um we're going to demo for you for a couple reasons one cuz it's a kernel overflow",
    "start": "2596920",
    "end": "2602960"
  },
  {
    "text": "on the Heap which is cool and two we want to show you how how how these products are exposed to untrusted input",
    "start": "2602960",
    "end": "2610599"
  },
  {
    "text": "you're going to see the Overflow happen before it even prompts you to copy the",
    "start": "2610599",
    "end": "2616240"
  },
  {
    "text": "file onto the system and we set up a little virtual machine to uh it's",
    "start": "2616240",
    "end": "2621559"
  },
  {
    "text": "bugging me right now um to demo this and we can come back to it because",
    "start": "2621559",
    "end": "2628280"
  },
  {
    "text": "I don't want to waste time oh we're good so I think I set the",
    "start": "2628280",
    "end": "2636640"
  },
  {
    "text": "the um this the port for this exploit to my birthday in case anyone wants to get me",
    "start": "2636640",
    "end": "2643880"
  },
  {
    "text": "a birthday",
    "start": "2643880",
    "end": "2646359"
  },
  {
    "text": "present it's fairly small up there you should be able to see it okay what what",
    "start": "2661720",
    "end": "2667240"
  },
  {
    "text": "you're going to see is just a shell drop down so what I'm going to do is just",
    "start": "2667240",
    "end": "2673800"
  },
  {
    "text": "drag this file from my host operating system to the virtual machine the same",
    "start": "2673800",
    "end": "2679200"
  },
  {
    "text": "thing as emailing the file um which is probably the best best attack factor for",
    "start": "2679200",
    "end": "2684359"
  },
  {
    "text": "these AV things so we'll just drag it over onto the",
    "start": "2684359",
    "end": "2690040"
  },
  {
    "text": "system okay we got the shell back right there that's a kernel shell um we",
    "start": "2690040",
    "end": "2695240"
  },
  {
    "text": "hijacked the uh what process did we hijack La LS I think so I think it was",
    "start": "2695240",
    "end": "2701280"
  },
  {
    "text": "LS um because it's way easier to write Shell Code for user land mode so just",
    "start": "2701280",
    "end": "2706359"
  },
  {
    "text": "because you're in kernel land it's cool and everything but it's way easier to execute arbitary instructions at system",
    "start": "2706359",
    "end": "2712839"
  },
  {
    "text": "level in user land um one of the things you'll notice is it's just now prompting us do you want to copy or move this here",
    "start": "2712839",
    "end": "2720319"
  },
  {
    "text": "so we we delivered the exploit before this thing ever hit the file system and that's because these AV engines hook",
    "start": "2720319",
    "end": "2726400"
  },
  {
    "text": "into all the ways users can get input over the network um creating files like",
    "start": "2726400",
    "end": "2732280"
  },
  {
    "text": "as soon as you hit save on a file this would be an exploit so one of the cool things about kernel exploits is you",
    "start": "2732280",
    "end": "2738440"
  },
  {
    "text": "don't really get uh a shell back until you specify your drive so we have to hit",
    "start": "2738440",
    "end": "2744800"
  },
  {
    "text": "C and now we have the shell and I think this exploit is pretty robust because",
    "start": "2744800",
    "end": "2751240"
  },
  {
    "text": "you know it we overflowed the kernel heat fixed it up and we can actually exit out of our shell",
    "start": "2751240",
    "end": "2758119"
  },
  {
    "text": "99% of the time and the system stays",
    "start": "2758119",
    "end": "2763800"
  },
  {
    "text": "up so we've exited out of that shell successfully exploited a remote kernel overflow and the system's still running",
    "start": "2763800",
    "end": "2770319"
  },
  {
    "text": "fine it it is fairly challenging to to do something like that simply because um",
    "start": "2770319",
    "end": "2775400"
  },
  {
    "text": "there there are so many so many different drivers using the same um same shared pool um and so uh fixing the Heap",
    "start": "2775400",
    "end": "2783440"
  },
  {
    "text": "is very important for these issues oh yeah I'm supposed to cover this one",
    "start": "2783440",
    "end": "2789240"
  },
  {
    "text": "okay so um this was a a vulnerability in ca's antivirus engine um and these",
    "start": "2789240",
    "end": "2797680"
  },
  {
    "text": "antivirus engines uh just because CA has it in their products it's also in a lot",
    "start": "2797680",
    "end": "2803400"
  },
  {
    "text": "of other products so like Zone Labs I think was one of the people that were using it which is own by checkpoint um",
    "start": "2803400",
    "end": "2810720"
  },
  {
    "text": "and there was a couple others that are escaping me right now but again High Roi and and this was an integer W um",
    "start": "2810720",
    "end": "2819720"
  },
  {
    "text": "specifically on the very edge of the 32-bit boundary so you pass in negative",
    "start": "2819720",
    "end": "2825079"
  },
  {
    "text": "one it added one to it allocated a really small buffer and then read that much from the file like the negative one",
    "start": "2825079",
    "end": "2832240"
  },
  {
    "text": "from the file fairly easy to exploit the only trick with this is it was actually",
    "start": "2832240",
    "end": "2839079"
  },
  {
    "text": "dealing with com uncompressed data so you in order to deliver the exploit and Trigger the bug you had to write up the",
    "start": "2839079",
    "end": "2846240"
  },
  {
    "text": "vulnerable header format and then compress it so that it would be decompressed and then red so these",
    "start": "2846240",
    "end": "2852400"
  },
  {
    "text": "things are sitting within layers within layers and it can be kind of tricky figuring out like what exactly you need",
    "start": "2852400",
    "end": "2858800"
  },
  {
    "text": "to trigger the bug one thing to note about all these issues um we have worked with all the vendors there are fixes",
    "start": "2858800",
    "end": "2864359"
  },
  {
    "text": "available for them already um in some cases for several months and so if you're worried you have to run out of",
    "start": "2864359",
    "end": "2869680"
  },
  {
    "text": "here and go P your antivirus you're probably okay um FSE secure the vulnerability was",
    "start": "2869680",
    "end": "2874839"
  },
  {
    "text": "in parsing of arch files it actually was the same field as the Trend Micro vulnerability different code base um",
    "start": "2874839",
    "end": "2881480"
  },
  {
    "text": "they implemented the standard in a fairly similar way and they had um made the same oversight and so it's a heap",
    "start": "2881480",
    "end": "2889079"
  },
  {
    "text": "overflow this time it was in user mode um so you know exploitation of that is fairly well documented fairly easy um uh",
    "start": "2889079",
    "end": "2896559"
  },
  {
    "text": "app secure actually I want to give a little bit of credit they were extremely fast at fixing this and they were extremely great to work with by far the",
    "start": "2896559",
    "end": "2903319"
  },
  {
    "text": "most Pleasant vendor that we've dealt with so far",
    "start": "2903319",
    "end": "2908240"
  },
  {
    "text": "uh one one of the things I just remembered about this is I remember reading the spec for arge and the spec",
    "start": "2908400",
    "end": "2915119"
  },
  {
    "text": "almost in introduces this vulnerability I think it said something like this field will be null terminated and all",
    "start": "2915119",
    "end": "2921400"
  },
  {
    "text": "the programmers assumed it would be null terminated when",
    "start": "2921400",
    "end": "2926960"
  },
  {
    "text": "right okay so so um this is a bug I found uh recently that I've been working",
    "start": "2927119",
    "end": "2933480"
  },
  {
    "text": "with sofos on fixing and again as Neil said uh you don't have to run out of",
    "start": "2933480",
    "end": "2938839"
  },
  {
    "text": "here and Patch your systems AV has a really cool support structure um I think a lot of companies like Cisco or",
    "start": "2938839",
    "end": "2946359"
  },
  {
    "text": "different vendors out there need to look at the AV industry on how to stay current on patches",
    "start": "2946359",
    "end": "2953160"
  },
  {
    "text": "because a lot of the sofos 90% of the sofos implementations right now are already fixed and this vulnerability",
    "start": "2953160",
    "end": "2959839"
  },
  {
    "text": "hasn't been disclosed to the public so this is technically oday but most of the people out there are already fixed which",
    "start": "2959839",
    "end": "2966200"
  },
  {
    "text": "is a really cool feature to have as far as security goes um we actually give you",
    "start": "2966200",
    "end": "2971839"
  },
  {
    "text": "a little preview of The Advisory I'll be putting out um next week",
    "start": "2971839",
    "end": "2978319"
  },
  {
    "text": "hopefully okay so this so This slide is uh um I put it in here because it's kind",
    "start": "2980880",
    "end": "2987640"
  },
  {
    "text": "of cool in the way that you know these bugs aren't always just in one function",
    "start": "2987640",
    "end": "2993280"
  },
  {
    "text": "and it kind of goes to what Neil said earlier you really have to spend a lot of time writing down offsets and class",
    "start": "2993280",
    "end": "2999200"
  },
  {
    "text": "fields and notepad and keeping track of all these things because there the bug is actually littered throughout the",
    "start": "2999200",
    "end": "3006160"
  },
  {
    "text": "whole binary so you need to understand that you know point a is where it's",
    "start": "3006160",
    "end": "3011839"
  },
  {
    "text": "initialized point B is where it's allocated and point x is where the actual like faulty code error happens",
    "start": "3011839",
    "end": "3019319"
  },
  {
    "text": "and I'll show you a little quickly where it is um I don't know if you guys have seen my",
    "start": "3019319",
    "end": "3025520"
  },
  {
    "text": "past advisories since I um I like to I like to do kind of fun stuff and I like",
    "start": "3025520",
    "end": "3032000"
  },
  {
    "text": "the bugs life so that's a character from A Bug's Life and there's the bug um real simple as we pointed out I think this",
    "start": "3032000",
    "end": "3037839"
  },
  {
    "text": "was the second example on our code base is uh you know this is a 32-bit integer",
    "start": "3037839",
    "end": "3043119"
  },
  {
    "text": "and they're doing a maximum check against it well they're doing a sign check so if I pass",
    "start": "3043119",
    "end": "3050119"
  },
  {
    "text": "inga1 that's going to be less than a th and it's going to try to copy in not negative 1 but the 16 bit",
    "start": "3050119",
    "end": "3057200"
  },
  {
    "text": "value of that negative one so basically all you have to do to to um bypass that faulty check is you know set the top bit",
    "start": "3057200",
    "end": "3063960"
  },
  {
    "text": "to negative and then have like a a positive 16bit",
    "start": "3063960",
    "end": "3069200"
  },
  {
    "text": "portion one of the questions we've always been asked before when we've given the speech is well what about open source AV um and some people ask well is",
    "start": "3071599",
    "end": "3079960"
  },
  {
    "text": "it more or less secure um and is it more or less um is it better than or or worse",
    "start": "3079960",
    "end": "3085839"
  },
  {
    "text": "than than um commercial AV and I know some people in this room probably have some pretty strong opinions on open source versus commercial software um but",
    "start": "3085839",
    "end": "3093400"
  },
  {
    "text": "up until now we really didn't know and so we decided to take a look um uh as",
    "start": "3093400",
    "end": "3098559"
  },
  {
    "text": "far as I know clam a is the prominant open source AV vendor um in terms of",
    "start": "3098559",
    "end": "3104119"
  },
  {
    "text": "deployment is probably not up there when you look at compared to McAfee or semantic or anything like that however",
    "start": "3104119",
    "end": "3110040"
  },
  {
    "text": "um we it is open source and it is fairly easy to audit so we decided to spend a couple hours and take a look um what we",
    "start": "3110040",
    "end": "3116760"
  },
  {
    "text": "did find is we found quite a few issues in clamav um mostly related to integer",
    "start": "3116760",
    "end": "3122240"
  },
  {
    "text": "usage um the uh the majority of the issues were uh you know very standard",
    "start": "3122240",
    "end": "3128040"
  },
  {
    "text": "integer overflows um you going to bring up the source code",
    "start": "3128040",
    "end": "3133200"
  },
  {
    "text": "there well he's doing that um in terms of a you know comparison between commercial and open source AV um we",
    "start": "3133200",
    "end": "3140760"
  },
  {
    "text": "found that the open source a tends to be less mature hasn't been around as long hasn't had the growing pains that Clos",
    "start": "3140760",
    "end": "3146760"
  },
  {
    "text": "that commercial AV has had and so um the uh the security code in my opinion my",
    "start": "3146760",
    "end": "3153040"
  },
  {
    "text": "qualitative assessment I think we both agree on this is that it's not quite as good um but they are getting there they are fixing these issues and um the these",
    "start": "3153040",
    "end": "3160319"
  },
  {
    "text": "guys are volunteers that work very hard in this project so I respect them for that for sure um but if you look at at",
    "start": "3160319",
    "end": "3166240"
  },
  {
    "text": "this code snippet here for example um they are they're allocating length plus one um and then reading length and",
    "start": "3166240",
    "end": "3174839"
  },
  {
    "text": "that's just classic it's you know it's the perfect code because it's two lines and the bug is right there you can all",
    "start": "3174839",
    "end": "3180640"
  },
  {
    "text": "scrap for that um same thing is this yeah this is exactly the same issue if you scroll",
    "start": "3180640",
    "end": "3186920"
  },
  {
    "text": "over I think yeah Len plus one and then read Len um this next one here this",
    "start": "3186920",
    "end": "3194680"
  },
  {
    "text": "third one here um this is the FSG issue that we saw um this is actually a fair",
    "start": "3194680",
    "end": "3200839"
  },
  {
    "text": "reasonably complex uh integer overflow in which you can bypass both sides of that length check um by having two",
    "start": "3200839",
    "end": "3207799"
  },
  {
    "text": "slightly negative integers and so um they're checking that you're not before the beginning of the buffer and you're",
    "start": "3207799",
    "end": "3213040"
  },
  {
    "text": "not past the end of the buffer um but they're checking it with two different integers and so the check is faulty that",
    "start": "3213040",
    "end": "3218400"
  },
  {
    "text": "then leads to what would essentially be a negative me copy situation um on the Heap I believe I don't remember yep and",
    "start": "3218400",
    "end": "3225799"
  },
  {
    "text": "so we found you know a fair number of issues like this um fixed in their sourcer now if you use clam a um",
    "start": "3225799",
    "end": "3233040"
  },
  {
    "text": "update uh oh yeah this is a another bug um this the reason I wanted to bring this one up is that Clen maybe doesn't",
    "start": "3233040",
    "end": "3239079"
  },
  {
    "text": "agree with us that this is the bug and um I'll show you how we found it",
    "start": "3239079",
    "end": "3246760"
  },
  {
    "text": "um we search for stir copy which one is it right up there",
    "start": "3246760",
    "end": "3254920"
  },
  {
    "text": "okay um and it's one of those things where you you search for a stir copy you find something and then um you realize",
    "start": "3254920",
    "end": "3261520"
  },
  {
    "text": "that there is a check somewhere else in the product that is actually associated with it I mean it looks almost almost",
    "start": "3261520",
    "end": "3267520"
  },
  {
    "text": "too easy here it's just a c copy file name to a uh to a to a a static static",
    "start": "3267520",
    "end": "3273559"
  },
  {
    "text": "data buffer um would take you two seconds to find with grab you then realize a little bit later that there is a check for that somewhere else in the",
    "start": "3273559",
    "end": "3279480"
  },
  {
    "text": "program and then you dig deeper as an auditor and you say well how can I get around that check and what we found is",
    "start": "3279480",
    "end": "3285480"
  },
  {
    "text": "that um what Neil found we found that that it's possible to have a a static",
    "start": "3285480",
    "end": "3292559"
  },
  {
    "text": "data structure be loaded with data from the previous file that was SC and then used for the next file so you can",
    "start": "3292559",
    "end": "3299119"
  },
  {
    "text": "initialize it with one file and then have the next file come around and use that data because they don't properly zero the structure before that and so um",
    "start": "3299119",
    "end": "3307000"
  },
  {
    "text": "it's possible to to bypass the length check with that with that uninitialized data usage and then trigger this",
    "start": "3307000",
    "end": "3313760"
  },
  {
    "text": "overflow um it's really a oneline fix change the stir copy to a stir end copy",
    "start": "3313760",
    "end": "3319079"
  },
  {
    "text": "um but I I don't think that they want to fix this issue um they don't agree that it's a bug so um if anyone here knows",
    "start": "3319079",
    "end": "3325119"
  },
  {
    "text": "the guys and wants to to ask them too I would really appreciate that hey it's kind of annoying to point out bugs to in",
    "start": "3325119",
    "end": "3331760"
  },
  {
    "text": "source code to developers and have them say no I mean it's it's right there you know how to",
    "start": "3331760",
    "end": "3339559"
  },
  {
    "text": "program so it should be fairly simple to address instead of arguing you know this",
    "start": "3339559",
    "end": "3344920"
  },
  {
    "text": "isn't a bug we're not fixing it why not just play it safe and say okay especially when these guys provided you",
    "start": "3344920",
    "end": "3351240"
  },
  {
    "text": "with like four or five other bugs that are obviously remotely exploitable right next",
    "start": "3351240",
    "end": "3358240"
  },
  {
    "text": "do we have anything else here yes feature points of interest you want to take that sure um",
    "start": "3362680",
    "end": "3369160"
  },
  {
    "text": "so obviously there's a lot of work to be done in AV still um and some of the areas that will keep coming up is you",
    "start": "3369160",
    "end": "3375960"
  },
  {
    "text": "know these products four or five years ago didn't have any image parsing and now they do because of all the bugs that",
    "start": "3375960",
    "end": "3381839"
  },
  {
    "text": "came out in image file formats so again in new attack areas newly implemented",
    "start": "3381839",
    "end": "3387280"
  },
  {
    "text": "code let's look at it um again formats implemented due to wide use like new um",
    "start": "3387280",
    "end": "3393839"
  },
  {
    "text": "file formats new operating systems different things like that these AV products always build in stuff ahead of",
    "start": "3393839",
    "end": "3400000"
  },
  {
    "text": "time to support it to attract customers their their job really is very challenging um I I know I've talked to a",
    "start": "3400000",
    "end": "3405680"
  },
  {
    "text": "friend who works for a big AV company and he's saying that you know every time some some kid uh who tries to write a",
    "start": "3405680",
    "end": "3412440"
  },
  {
    "text": "virus decides to add a new executable package to that virus now now the um the",
    "start": "3412440",
    "end": "3417839"
  },
  {
    "text": "AV company has to write a decompressor for that form and they're doing that all the time and it's very challenging to keep up with that and and there is a",
    "start": "3417839",
    "end": "3423799"
  },
  {
    "text": "fair amount of change in their codebase so it is relatively high risk code base product Administration was another",
    "start": "3423799",
    "end": "3430720"
  },
  {
    "text": "thing oh yeah um we product Administration um the security of their",
    "start": "3430720",
    "end": "3435880"
  },
  {
    "text": "product Administration tools tends to be a lot worse than the security of the actual core antivirus library and so um",
    "start": "3435880",
    "end": "3441559"
  },
  {
    "text": "it's kind of scary when you consider that these tools are designed to push updates across entire Enterprises um I",
    "start": "3441559",
    "end": "3448240"
  },
  {
    "text": "mean with a click of a button you can send an executable to um to every antivirus on servers and desktops in",
    "start": "3448240",
    "end": "3455119"
  },
  {
    "text": "your entire Enterprise however the product Administration tool itself is vulnerable um and so they have credentials for all your systems they",
    "start": "3455119",
    "end": "3461799"
  },
  {
    "text": "have the ability to push updates to all your systems if an attacker were to find a vulnerability in a product Administration tool um they could",
    "start": "3461799",
    "end": "3469319"
  },
  {
    "text": "potentially own an entire Enterprise with one exploit and and at ISS we found an issue like that um last year since",
    "start": "3469319",
    "end": "3476440"
  },
  {
    "text": "been fixed but um it it is fairly scary",
    "start": "3476440",
    "end": "3481119"
  },
  {
    "text": "stuff questions yes I'm just curious um what",
    "start": "3481599",
    "end": "3489039"
  },
  {
    "text": "antivirus product you have installed on your home computer right",
    "start": "3489039",
    "end": "3494079"
  },
  {
    "text": "now I really don't I don't have one completely honest with you neither do I um not not that I'm scared to run any of",
    "start": "3494079",
    "end": "3500920"
  },
  {
    "text": "them they're all pretty good um um but uh I don't use one myself",
    "start": "3500920",
    "end": "3506720"
  },
  {
    "text": "but I I've installed them all I think we both have and um I think the major ones",
    "start": "3506720",
    "end": "3512039"
  },
  {
    "text": "out there are are pretty good they're they're all pretty comparable in terms of feature set and security but there",
    "start": "3512039",
    "end": "3517720"
  },
  {
    "text": "wasn't one that stood out as the most insecure or or the most secure um they all had that issues in isolated",
    "start": "3517720",
    "end": "3526240"
  },
  {
    "text": "areas most of these issues are kind so how does they exed on the",
    "start": "3527640",
    "end": "3535000"
  },
  {
    "text": "data",
    "start": "3535000",
    "end": "3538000"
  },
  {
    "text": "um the NX the NX stuff the the hardware enforced stuff helps um but if it's a",
    "start": "3540400",
    "end": "3545680"
  },
  {
    "text": "stack based overflow there's there's many attacks I think one of our researchers is talking tomorrow about bypassing NX stuff um but things such as",
    "start": "3545680",
    "end": "3553240"
  },
  {
    "text": "return to libc stuff still works um depending on how your applications are compiled a lot of the system services on",
    "start": "3553240",
    "end": "3558920"
  },
  {
    "text": "Windows for example have have St stack guard like protection features built into them when they're compiled um we",
    "start": "3558920",
    "end": "3564839"
  },
  {
    "text": "don't see that in a lot of lot of commercial products and so things like returning to libc stuff on stack overflows are extremely easy to do still",
    "start": "3564839",
    "end": "3571359"
  },
  {
    "text": "even with NX Stu you don't have to execute code in in a writable segment anywhere back there you've been quite",
    "start": "3571359",
    "end": "3579000"
  },
  {
    "text": "happy to attack the the antivirus companies",
    "start": "3579000",
    "end": "3583880"
  },
  {
    "text": "without own um that's a you know good question",
    "start": "3584039",
    "end": "3592599"
  },
  {
    "text": "good question that's that's a very very fair question um we audit products that",
    "start": "3592599",
    "end": "3598119"
  },
  {
    "text": "our customers run we also audit our own products and so after that my team sat down we went line by line through all",
    "start": "3598119",
    "end": "3603880"
  },
  {
    "text": "the code in our protocol analysis module and um no one's immune to this stuff to be honest with you no piece of software",
    "start": "3603880",
    "end": "3609359"
  },
  {
    "text": "is completely secure and um anyone who claims to be is lying to you and so um",
    "start": "3609359",
    "end": "3614839"
  },
  {
    "text": "we have this great great research capability at ISS um and uh that was a big wakeup call we turned it around and",
    "start": "3614839",
    "end": "3621039"
  },
  {
    "text": "focused it on our own products as well and so um if any of you out here are ISS customers you can feel a lot better",
    "start": "3621039",
    "end": "3626359"
  },
  {
    "text": "about the security of our projects today versus a year ago or two years ago as an independent person I can",
    "start": "3626359",
    "end": "3633240"
  },
  {
    "text": "confirm",
    "start": "3633240",
    "end": "3635680"
  },
  {
    "text": "that can you speak perhaps to the widespread or not widespread nature of",
    "start": "3639200",
    "end": "3644880"
  },
  {
    "text": "the format collisions qualitatively perhaps you notic a lot uh I guess the",
    "start": "3644880",
    "end": "3650280"
  },
  {
    "text": "attack is relatively new I don't know how many products have we looked at for them seven what was the question the",
    "start": "3650280",
    "end": "3655520"
  },
  {
    "text": "question is how widespread are these format Collision attacks uh what what are the potential impact of that I think that they they really come in when you",
    "start": "3655520",
    "end": "3662119"
  },
  {
    "text": "try to do any sort of fistic detection of file formats and so it might not be just limited to antivirus it could be Li",
    "start": "3662119",
    "end": "3667440"
  },
  {
    "text": "you know there's so many different other other products that do similar things um intrusion detection IPS absolutely same",
    "start": "3667440",
    "end": "3673400"
  },
  {
    "text": "bugs yeah when we when we found this issue we said well what are the implications for our own products too and you know we found some to be honest",
    "start": "3673400",
    "end": "3679680"
  },
  {
    "text": "with you we try to recognize uh protocols across the wire Based on data and so we did some re architecture with",
    "start": "3679680",
    "end": "3684960"
  },
  {
    "text": "thr products to make our ourselves more resistant to these type of format Collision",
    "start": "3684960",
    "end": "3689960"
  },
  {
    "text": "attacks yes be the future of Av uh yeah good question um I think that",
    "start": "3691839",
    "end": "3700359"
  },
  {
    "text": "AV I I'll give you my opinion I'm sure Alex's opinion too but I think that AV is you know it's a key security",
    "start": "3700359",
    "end": "3706000"
  },
  {
    "text": "mechanism you need it on your networks we're talking about all these problems with it but I think it you have to have it can't do without it but the the major",
    "start": "3706000",
    "end": "3713520"
  },
  {
    "text": "problem I see with AV is that window of vulnerability between a virus appearing and a signature being created for it the reactive nature the fact that you have",
    "start": "3713520",
    "end": "3719920"
  },
  {
    "text": "to know about the threat to protect against it in most cases and so um there's some very cool behavioral based",
    "start": "3719920",
    "end": "3726240"
  },
  {
    "text": "systems out there that that recognize viruses based on how they behave in a virtual machine or in isolated",
    "start": "3726240",
    "end": "3731880"
  },
  {
    "text": "environment and then determine whether or not they're malicious and um these I I wouldn't say that they're necessarily",
    "start": "3731880",
    "end": "3737359"
  },
  {
    "text": "a replacement for traditional a but they are a good addition to to your to your",
    "start": "3737359",
    "end": "3742599"
  },
  {
    "text": "uh traditional a mechanisms um and they close that window vulnerability um they",
    "start": "3742599",
    "end": "3748200"
  },
  {
    "text": "they they really reduce they close it to zero if they and there are some systems out there today that have very good",
    "start": "3748200",
    "end": "3753960"
  },
  {
    "text": "detection rates behaviorally yes ISS what scam engine do",
    "start": "3753960",
    "end": "3759760"
  },
  {
    "text": "you use in your own products um I don't know I think I think",
    "start": "3759760",
    "end": "3764920"
  },
  {
    "text": "it's uh I think it's changed over the last year I'm not sure I'll have to check on that um",
    "start": "3764920",
    "end": "3773599"
  },
  {
    "text": "I I haven't honestly I don't know I I think the the surface has just been",
    "start": "3783359",
    "end": "3789000"
  },
  {
    "text": "scratched with regard to AV right now like we really haven't looked into Administration features um we really",
    "start": "3789000",
    "end": "3795720"
  },
  {
    "text": "haven't done thorough audits of any of the AV products out",
    "start": "3795720",
    "end": "3800520"
  },
  {
    "text": "there it sounds like these vulnerabilities are based on the on the",
    "start": "3803720",
    "end": "3809039"
  },
  {
    "text": "the common use or the common architecture of the way they're scanning and that they have layers of scanning",
    "start": "3809039",
    "end": "3815520"
  },
  {
    "text": "and Inter dependencies of of deing functions um have",
    "start": "3815520",
    "end": "3820920"
  },
  {
    "text": "you have any idea of how you can change that architecture in order to eliminate",
    "start": "3820920",
    "end": "3826000"
  },
  {
    "text": "that type of vulnerability how you do it yes um I think we both of us have seen",
    "start": "3826000",
    "end": "3832880"
  },
  {
    "text": "uh some of the specific AV vendors Implement some great um functionality as",
    "start": "3832880",
    "end": "3839480"
  },
  {
    "text": "a general API in their products like uh we mentioned checking for zero on Malik",
    "start": "3839480",
    "end": "3845400"
  },
  {
    "text": "um that's that that should be done in every Malik call there's no reason to allocate zero",
    "start": "3845400",
    "end": "3851279"
  },
  {
    "text": "bytes um and also we've seen some vendors are a lot more thorough with",
    "start": "3851279",
    "end": "3857880"
  },
  {
    "text": "checking for integer issues than others and I think that that uh I know Neil Ma",
    "start": "3857880",
    "end": "3863960"
  },
  {
    "text": "and Mark Dow gave a speech and hellar Flake uh two or three years ago on Integer problems at black hat and um it",
    "start": "3863960",
    "end": "3872599"
  },
  {
    "text": "doesn't seem like the development Community has really caught on to it the string based vulnerabilities are being",
    "start": "3872599",
    "end": "3878079"
  },
  {
    "text": "addressed it's fairly easy to see like a stir copy or sprintf um bug but integer",
    "start": "3878079",
    "end": "3884079"
  },
  {
    "text": "issues are a little more complex because there's uh some subtleties that are kind of hard to think of at the time when",
    "start": "3884079",
    "end": "3890680"
  },
  {
    "text": "you're looking at it or programming it it was interesting when we looked at a lot of these antivirus products uh they all had some architectures and I'm",
    "start": "3890680",
    "end": "3897240"
  },
  {
    "text": "pretty sure they didn't copy each other um and so uh I think it may be that there's there's an efficient way to do",
    "start": "3897240",
    "end": "3903720"
  },
  {
    "text": "the task that they're doing and so they're architected in the same way but um what you'll find I think is that when",
    "start": "3903720",
    "end": "3909520"
  },
  {
    "text": "you have disparate development teams writing different portions of your product you'll see oversights in the way those those components interface and uh",
    "start": "3909520",
    "end": "3917039"
  },
  {
    "text": "there there are a lot of I'm sure there are a lot of subtle vulnerabilities related to that type of interrelation between the components that we may never",
    "start": "3917039",
    "end": "3922720"
  },
  {
    "text": "find I don't know",
    "start": "3922720",
    "end": "3926838"
  },
  {
    "text": "any other questions I want to thank you guys for coming to our [Applause]",
    "start": "3928520",
    "end": "3939869"
  },
  {
    "text": "speech",
    "start": "3954640",
    "end": "3957640"
  },
  {
    "text": "e",
    "start": "3984559",
    "end": "3987559"
  },
  {
    "text": "e",
    "start": "4014520",
    "end": "4017520"
  },
  {
    "text": "e",
    "start": "4044520",
    "end": "4047520"
  },
  {
    "text": "e",
    "start": "4074440",
    "end": "4077440"
  },
  {
    "text": "e",
    "start": "4104440",
    "end": "4107440"
  },
  {
    "text": "e",
    "start": "4134440",
    "end": "4137440"
  },
  {
    "text": "e",
    "start": "4164359",
    "end": "4167359"
  },
  {
    "text": "e e",
    "start": "4194320",
    "end": "4198360"
  }
]