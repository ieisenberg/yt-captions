[
  {
    "text": "[Music]",
    "start": "3910",
    "end": "13710"
  },
  {
    "text": "hi everyone my name is fun xiao from georgia tech so this is not only my work but also the",
    "start": "14719",
    "end": "19920"
  },
  {
    "text": "work of my wonderful co-workers from georgia tech and texas a m so today i'm going to talk about some",
    "start": "19920",
    "end": "25760"
  },
  {
    "text": "interesting new attack in node.js ecosystems before the talk normally begins please",
    "start": "25760",
    "end": "32320"
  },
  {
    "text": "let me introduce myself a little more so i'm a csd phd phd student at georgia",
    "start": "32320",
    "end": "38000"
  },
  {
    "text": "tech and i'm a vulnerability researcher my research is about building tools to",
    "start": "38000",
    "end": "43120"
  },
  {
    "text": "automatically detect and exploit zero days so that people can be aware of both the",
    "start": "43120",
    "end": "48480"
  },
  {
    "text": "existence and the consequence of their security bugs so i do research in web application",
    "start": "48480",
    "end": "54559"
  },
  {
    "text": "security but i'm also enjoying researching security problems in other areas such as software defining",
    "start": "54559",
    "end": "61280"
  },
  {
    "text": "networks and x86 virtualizations okay so these are the topics i'm going",
    "start": "61280",
    "end": "68320"
  },
  {
    "text": "to cover today the talk will be divided into three parts first i will introduce the",
    "start": "68320",
    "end": "74720"
  },
  {
    "text": "technical details of the new security risks we discovered and discussed how to exploit it and then",
    "start": "74720",
    "end": "82080"
  },
  {
    "text": "we will talk more about the bug finding part which is about the lessons and insights from building such a javascript",
    "start": "82080",
    "end": "88799"
  },
  {
    "text": "security analysis tools and in the end we will give up impact",
    "start": "88799",
    "end": "93920"
  },
  {
    "text": "analyze of our discovered vulnerabilities and have some evaluation data on our new",
    "start": "93920",
    "end": "99680"
  },
  {
    "text": "tools so first of all please let let's take a",
    "start": "99680",
    "end": "105439"
  },
  {
    "text": "quick look at the one new vulnerabilities we found in total we found 13 zero-day",
    "start": "105439",
    "end": "110640"
  },
  {
    "text": "vulnerabilities from widely used programs many of them have more than 1 million of",
    "start": "110640",
    "end": "116159"
  },
  {
    "text": "downloads such as mongodb official drivers class validators and so on so this bugs can be exploited",
    "start": "116159",
    "end": "124159"
  },
  {
    "text": "to launch serious attack effects such as leaking credential user data",
    "start": "124159",
    "end": "130160"
  },
  {
    "text": "by passing security checks and deny of services yeah so this is pretty much the big picture of our research",
    "start": "130160",
    "end": "137360"
  },
  {
    "text": "okay so before we touch the technical detail let's have some little background about",
    "start": "137360",
    "end": "142640"
  },
  {
    "text": "the node.js node.js is used is used for executing",
    "start": "142640",
    "end": "148560"
  },
  {
    "text": "javascript outside of browsers the picture on the right is the overall system design of the",
    "start": "148560",
    "end": "154959"
  },
  {
    "text": "node.js to interpret and execute javascript the node.js implements a runtime",
    "start": "154959",
    "end": "161120"
  },
  {
    "text": "execution engine on top of chrome ev8 to satisfy the needs of server-side",
    "start": "161120",
    "end": "167440"
  },
  {
    "text": "civic scenarios java the runtime also provides a set of apis to let javascript interact with the host",
    "start": "167440",
    "end": "174959"
  },
  {
    "text": "environment with the provided apis the javascript code can access the host environments",
    "start": "174959",
    "end": "181200"
  },
  {
    "text": "like any other server-side languages for example they can read and write file systems",
    "start": "181200",
    "end": "188080"
  },
  {
    "text": "and or execute system command so node.js is pretty powerful",
    "start": "188080",
    "end": "194080"
  },
  {
    "text": "nowadays many websites are deployed in node.js for example node.js are intensively used",
    "start": "194080",
    "end": "200480"
  },
  {
    "text": "in companies like linking and paypal and also we are using a lot of electron apps",
    "start": "200480",
    "end": "207040"
  },
  {
    "text": "and search electron apps are also powered by node.js runtimes",
    "start": "207040",
    "end": "213280"
  },
  {
    "text": "web-based applications are the most common types of node.js programs for these web web-based applications",
    "start": "213280",
    "end": "221120"
  },
  {
    "text": "packing the communication data into object representation is really common",
    "start": "221120",
    "end": "227760"
  },
  {
    "text": "so this feature is convenient and very powerful with the help of this feature node.js",
    "start": "227760",
    "end": "233200"
  },
  {
    "text": "applications can send or receive very complex data structures",
    "start": "233200",
    "end": "238319"
  },
  {
    "text": "from monthly downloads statistics on the right we can have a sense of how object sharing is being supported",
    "start": "238319",
    "end": "244959"
  },
  {
    "text": "and used by the node.js ecosystems",
    "start": "244959",
    "end": "249760"
  },
  {
    "text": "so the diagram demonstrates how the object sharing is being used in node.js ecosystem there are two major",
    "start": "250879",
    "end": "258400"
  },
  {
    "text": "methods of serializing communication objects which is the query stream based sharing",
    "start": "258400",
    "end": "263840"
  },
  {
    "text": "and the json-based sharing as shown in the picture if the user wants to update the age information in",
    "start": "263840",
    "end": "270560"
  },
  {
    "text": "his website he may do this in two in two ways first it can send his data through through the",
    "start": "270560",
    "end": "278240"
  },
  {
    "text": "standard query string in the url and also he can send a json screen",
    "start": "278240",
    "end": "283600"
  },
  {
    "text": "stream to the server in some somewhere such as the post body upon receiving the request the node.js",
    "start": "283600",
    "end": "291040"
  },
  {
    "text": "server will pass the request and pass the data into an object",
    "start": "291040",
    "end": "296080"
  },
  {
    "text": "so the object can further propagate into the corresponding logics in the program",
    "start": "296080",
    "end": "301840"
  },
  {
    "text": "okay so this is basically how node.js object sharing is carried out",
    "start": "301840",
    "end": "306960"
  },
  {
    "text": "usually we want to if we want to evaluate the security of such a program we may usu may inject a different",
    "start": "306960",
    "end": "313680"
  },
  {
    "text": "payloads into the age field to trigger potential vulnerabilities such as cycle injection",
    "start": "313680",
    "end": "319600"
  },
  {
    "text": "or crosses grips but what if we choose not to test the",
    "start": "319600",
    "end": "325280"
  },
  {
    "text": "existing data fields since we can pass an object into the server",
    "start": "325280",
    "end": "330400"
  },
  {
    "text": "what will happen if we inject additional properties into the program which is not expected",
    "start": "330400",
    "end": "336639"
  },
  {
    "text": "by the server program in particular if an attacker can send properties that forge",
    "start": "336639",
    "end": "341919"
  },
  {
    "text": "or override certain internal states the attacker may easily obtain dangerous abilities",
    "start": "341919",
    "end": "347600"
  },
  {
    "text": "such as manipulating the key logics of the program so what we are going to introduce is the",
    "start": "347600",
    "end": "355360"
  },
  {
    "text": "hidden property abusing which we called hpa hpa leverage the object sharing in",
    "start": "355360",
    "end": "361919"
  },
  {
    "text": "node.js to forge or temper critical program states in the node.js applications",
    "start": "361919",
    "end": "368800"
  },
  {
    "text": "we called these additional properties we injected as hidden property because these properties are kind of",
    "start": "368800",
    "end": "375039"
  },
  {
    "text": "like some hidden parameters valid to the endpoint user api",
    "start": "375039",
    "end": "380160"
  },
  {
    "text": "these parameters are associated with certain internal states however nobody knows their existence",
    "start": "380160",
    "end": "386639"
  },
  {
    "text": "until an attacker find it and exploit it to temper internal states",
    "start": "386639",
    "end": "392400"
  },
  {
    "text": "in this talk we mainly focus on the server-side scenarios where a remote attacker wants to hack a",
    "start": "392400",
    "end": "398800"
  },
  {
    "text": "node.js web application or some microservices thus to explore",
    "start": "398800",
    "end": "403840"
  },
  {
    "text": "the vulnerabilities the attacker access the legitimate the interface such as the web endpoint to send his",
    "start": "403840",
    "end": "410080"
  },
  {
    "text": "payload in most cases the payload should be in",
    "start": "410080",
    "end": "415680"
  },
  {
    "text": "the plan type plan objects which is the simplest object representations",
    "start": "415680",
    "end": "420960"
  },
  {
    "text": "which only support the primitive types we have these restrictions because the plan object types is the",
    "start": "420960",
    "end": "427919"
  },
  {
    "text": "most widely supported object types in node.js object sharing",
    "start": "427919",
    "end": "433360"
  },
  {
    "text": "okay so during our research we discovered two types of attack vectors we call the first one as app-specific",
    "start": "433360",
    "end": "440800"
  },
  {
    "text": "attribute manipulation this one is for manipulating certain internal properties defined by the",
    "start": "440800",
    "end": "447440"
  },
  {
    "text": "application themselves such internal properties are supposed to be initialized and managed by the some",
    "start": "447440",
    "end": "454080"
  },
  {
    "text": "internal functions and they usually represent certain internal states of the programs",
    "start": "454080",
    "end": "459599"
  },
  {
    "text": "as shown in the picture the the init row is an internal function that are responsible",
    "start": "459599",
    "end": "465280"
  },
  {
    "text": "for managing the access right of the user object however with hba",
    "start": "465280",
    "end": "471440"
  },
  {
    "text": "attackers can propagate a conflicting name properly into the user object and thus control the internal states as",
    "start": "471440",
    "end": "478800"
  },
  {
    "text": "shown in the program the program also provided an api called update",
    "start": "478800",
    "end": "484400"
  },
  {
    "text": "in external usage if malicious malicious user injected his payload",
    "start": "484400",
    "end": "491440"
  },
  {
    "text": "which is a additional key value pair into his request then the",
    "start": "491440",
    "end": "497199"
  },
  {
    "text": "additional keyword appear probably will overwrite the existing data on the user object",
    "start": "497199",
    "end": "503520"
  },
  {
    "text": "so this attack vector is really useful when we want to abuse certain concrete logics in large",
    "start": "503520",
    "end": "509840"
  },
  {
    "text": "programs such as order states or user privilege management",
    "start": "509840",
    "end": "516000"
  },
  {
    "text": "also hpa can also target as some unique javascript schemes such as prototyping we call the",
    "start": "516000",
    "end": "523440"
  },
  {
    "text": "second attack scenario as prototype inheritance hijacking in javascript every object has a link to",
    "start": "523440",
    "end": "531600"
  },
  {
    "text": "a prototype object when the when the javascript code wants to access on property of an object the",
    "start": "531600",
    "end": "538720"
  },
  {
    "text": "property will not only be searched within the object itself but also the prototype of the object and",
    "start": "538720",
    "end": "545040"
  },
  {
    "text": "even the prototype of the prototype until a property with a matching name is found",
    "start": "545040",
    "end": "551360"
  },
  {
    "text": "as shown in the picture when the javascript code wants to access the constructor property from the",
    "start": "551360",
    "end": "557120"
  },
  {
    "text": "input object it will first search locally within the input object since there is no probably named",
    "start": "557120",
    "end": "563839"
  },
  {
    "text": "constructor there the code will continue its search to its prototype where the constructor is really located",
    "start": "563839",
    "end": "572320"
  },
  {
    "text": "with hpa we can hijack the inheritance chains and forge our own payload as our",
    "start": "573200",
    "end": "578480"
  },
  {
    "text": "internal properties on the chain as shown in the picture if we inject a property named constructor",
    "start": "578480",
    "end": "585200"
  },
  {
    "text": "the searching process will be really different since there is already a property named constructor within the",
    "start": "585200",
    "end": "591360"
  },
  {
    "text": "input object the search will immediately stopped and end up written returning a user",
    "start": "591360",
    "end": "597680"
  },
  {
    "text": "controlled value as demonstrated by the red circle here the value of the constructor will become",
    "start": "597680",
    "end": "603760"
  },
  {
    "text": "the string rig and multi rather than a normal javascript prototype function",
    "start": "603760",
    "end": "609920"
  },
  {
    "text": "so the second attack vector is very useful because we found many javascript",
    "start": "609920",
    "end": "615040"
  },
  {
    "text": "developers tend to trust the properties inherited from prototypes and they also make many",
    "start": "615040",
    "end": "620560"
  },
  {
    "text": "security sensitive disease decisions based on them also we should be aware of the",
    "start": "620560",
    "end": "627760"
  },
  {
    "text": "differences between the prototype pollution and the prototype inheritance hijacking",
    "start": "627760",
    "end": "634640"
  },
  {
    "text": "so prototype pollution as the name suggested is about attacking and tempering the",
    "start": "634640",
    "end": "641200"
  },
  {
    "text": "prototype objects however our attack vectors does not modify the object",
    "start": "641200",
    "end": "647040"
  },
  {
    "text": "the prototype object so the root cause of hpa is that the",
    "start": "647040",
    "end": "653440"
  },
  {
    "text": "node.js fails to isolate the unsafe objects such as user input from",
    "start": "653440",
    "end": "659600"
  },
  {
    "text": "critical internal states to make a clear demonstration the hpa can be seen as a",
    "start": "659600",
    "end": "665600"
  },
  {
    "text": "new security risk under the weakness category 915 whose child variants are all about",
    "start": "665600",
    "end": "672800"
  },
  {
    "text": "improper modification of dynamic objects as shown in the pic in the hierarchy",
    "start": "672800",
    "end": "678720"
  },
  {
    "text": "tree on the right there are some similar issues on the other language platform such as ruby mass assignment",
    "start": "678720",
    "end": "685680"
  },
  {
    "text": "and php object injections although these variants share the same behavior feature dominated by 915",
    "start": "685680",
    "end": "693440"
  },
  {
    "text": "they all have their own patterns due to the language differences for example the ruby mass assignment is",
    "start": "693440",
    "end": "700399"
  },
  {
    "text": "a set of vulnerabilities discussed and invited to use the ruby web framework called ruby on rails unlike hpa",
    "start": "700399",
    "end": "708560"
  },
  {
    "text": "the attacker does not pass objects into the ruby program instead the attacker abused a",
    "start": "708560",
    "end": "714839"
  },
  {
    "text": "framework-specific assignment feature to temper the existing object that associated with the",
    "start": "714839",
    "end": "721360"
  },
  {
    "text": "assignment so the payloads are also different the mass assigned payloads are literal",
    "start": "721360",
    "end": "727360"
  },
  {
    "text": "values however hbk hpa can introduce both hidden properties with either literal",
    "start": "727360",
    "end": "733920"
  },
  {
    "text": "values or nested objects more importantly ruby is strongly typed so the mass",
    "start": "733920",
    "end": "740959"
  },
  {
    "text": "assignment vulnerabilities cannot introduce new properties into the victim object",
    "start": "740959",
    "end": "746320"
  },
  {
    "text": "however hpa can inject arbitrary properties which makes which make hpa very flexible and",
    "start": "746320",
    "end": "753920"
  },
  {
    "text": "powerful okay with several pages of concept",
    "start": "753920",
    "end": "759120"
  },
  {
    "text": "introduction i think it's time we can hack some real targets in this example",
    "start": "759120",
    "end": "764399"
  },
  {
    "text": "we target as our popular web framework named rooting controller we will hack its",
    "start": "764399",
    "end": "770399"
  },
  {
    "text": "official code to demonstrate an end-to-end attack from security check by passing to database",
    "start": "770399",
    "end": "777360"
  },
  {
    "text": "injection the figure on the on the right can give you a brief idea on how our example",
    "start": "777360",
    "end": "783920"
  },
  {
    "text": "works in this example a server program is deployed using routing controllers if a remote user",
    "start": "783920",
    "end": "791200"
  },
  {
    "text": "wants to authenticate with the server his data will flows into the following date components",
    "start": "791200",
    "end": "797440"
  },
  {
    "text": "first he will send his serialized data into the web api endpoint upon receiving the request",
    "start": "797440",
    "end": "804240"
  },
  {
    "text": "the authentication module will init instantiate an object according to his",
    "start": "804240",
    "end": "810000"
  },
  {
    "text": "json string and send it to the para handler we here we use the green box to",
    "start": "810000",
    "end": "816000"
  },
  {
    "text": "demonstrate the user input object and we use okay and the the handler will first collect",
    "start": "816000",
    "end": "823760"
  },
  {
    "text": "the internal format specifications which is the blue box here",
    "start": "823760",
    "end": "829040"
  },
  {
    "text": "and he will merge the internal format specification with the input object and invoke the",
    "start": "829040",
    "end": "836240"
  },
  {
    "text": "input validation api so the input validation components will",
    "start": "836240",
    "end": "841360"
  },
  {
    "text": "synchronize the user input data according to the format specification in this case it will check if the email",
    "start": "841360",
    "end": "848800"
  },
  {
    "text": "field is legitimate or not if the check pass the user object will flow into the database",
    "start": "848800",
    "end": "855600"
  },
  {
    "text": "okay so this is overall of data flow let's analyze how we can",
    "start": "855600",
    "end": "861440"
  },
  {
    "text": "attack the logic step by steps the first step is the hidden property",
    "start": "861440",
    "end": "868000"
  },
  {
    "text": "injections where the malicious user includes our additional property into the request which is the control",
    "start": "868000",
    "end": "875199"
  },
  {
    "text": "constructor in this case as shown in the picture when the server program",
    "start": "875199",
    "end": "880639"
  },
  {
    "text": "the instantiate the user input there will be an additional property within the param object",
    "start": "880639",
    "end": "886720"
  },
  {
    "text": "which is the constructor and in the second step the program will",
    "start": "886720",
    "end": "892399"
  },
  {
    "text": "prepare the parameters needed by the input validation api the server program will",
    "start": "892399",
    "end": "898000"
  },
  {
    "text": "merge the user input with the parameter which is the param with a object named",
    "start": "898000",
    "end": "905199"
  },
  {
    "text": "scammer so the merging operation is performed performed by putting every properties of the parent",
    "start": "905199",
    "end": "912639"
  },
  {
    "text": "objects into the scanner object so this is a process very much like object assign",
    "start": "912639",
    "end": "919120"
  },
  {
    "text": "to simplify the demonstration here we let's just use object or sign in this example by",
    "start": "919120",
    "end": "925360"
  },
  {
    "text": "performing the merging operations the hidden property constructor also transformed into the",
    "start": "925360",
    "end": "931120"
  },
  {
    "text": "scammer so by performing such a transformation",
    "start": "931120",
    "end": "936160"
  },
  {
    "text": "we now can hijack the inheritance chains of the constructor on the scanner object like we have",
    "start": "936160",
    "end": "943040"
  },
  {
    "text": "demonstrated in the second attack vectors actually the constructor scanner plays a",
    "start": "943040",
    "end": "949839"
  },
  {
    "text": "very important role in the routing controller as shown in the picture the scan object",
    "start": "949839",
    "end": "956000"
  },
  {
    "text": "follows a object-oriented program style which use the constructor of his",
    "start": "956000",
    "end": "961040"
  },
  {
    "text": "prototype to to store important format restrictions",
    "start": "961040",
    "end": "968480"
  },
  {
    "text": "okay so on the last so as a result the merging operation enable",
    "start": "968480",
    "end": "974880"
  },
  {
    "text": "us to hijack the inheritance of these important format restrictions as shown in the picture when the",
    "start": "974880",
    "end": "981920"
  },
  {
    "text": "constructor is is read by the get spam gamma function our hidden property will immediately",
    "start": "981920",
    "end": "988560"
  },
  {
    "text": "matched and returned to the code to bypass the input validation we just need to set the format",
    "start": "988560",
    "end": "995360"
  },
  {
    "text": "specification as an invalid value so our cycle injection payload can",
    "start": "995360",
    "end": "1000480"
  },
  {
    "text": "escape the check the last step is much more straightforward the validated payload",
    "start": "1000480",
    "end": "1007199"
  },
  {
    "text": "then flows into the sensitive database api to finish the entire attack so this is",
    "start": "1007199",
    "end": "1014000"
  },
  {
    "text": "how the entire hpa exploit can work actually the code logics behind",
    "start": "1014000",
    "end": "1020880"
  },
  {
    "text": "vulnerabilities is much more complex than the simplified graph here for example the input",
    "start": "1020880",
    "end": "1027438"
  },
  {
    "text": "validation module itself contains more than 30 000 lines of code so it would be",
    "start": "1027439",
    "end": "1033520"
  },
  {
    "text": "really helpful if we can have a tool to help us automatically track all these data",
    "start": "1033520",
    "end": "1038880"
  },
  {
    "text": "structures and automatically detect all these hidden properties and even automatically exploit them",
    "start": "1038880",
    "end": "1047678"
  },
  {
    "text": "so what is the challenge of building such a tool first of all this is javascript",
    "start": "1048079",
    "end": "1053440"
  },
  {
    "text": "analyzing javascript is known to be hard due to the dynamic feature",
    "start": "1053440",
    "end": "1058559"
  },
  {
    "text": "the fact is even if we have chosen a reliable analyze framework as our underlying",
    "start": "1058559",
    "end": "1065120"
  },
  {
    "text": "platform and we design smart methods and we test a large number of programs",
    "start": "1065120",
    "end": "1070799"
  },
  {
    "text": "we still occasionally encounter crashes and incomparability issues when trying to analyzing large",
    "start": "1070799",
    "end": "1078160"
  },
  {
    "text": "and very complex programs and the second challenge is",
    "start": "1078160",
    "end": "1085919"
  },
  {
    "text": "does hpa actually create new data dependencies but the program analyzes is good at",
    "start": "1085919",
    "end": "1093120"
  },
  {
    "text": "digging the existing data flows rather than creating new ones",
    "start": "1093120",
    "end": "1098400"
  },
  {
    "text": "third from running examples we can observe that hpa actually exploit internal program states so the",
    "start": "1098400",
    "end": "1106080"
  },
  {
    "text": "attack effect highly depends on the code context this makes the detection more",
    "start": "1106080",
    "end": "1112400"
  },
  {
    "text": "challenging okay so to over overcome these challenges",
    "start": "1112400",
    "end": "1117919"
  },
  {
    "text": "we design and implement links a hybrid javascript program analyze tool",
    "start": "1117919",
    "end": "1123440"
  },
  {
    "text": "to detect and exploit hpa vulnerabilities",
    "start": "1123440",
    "end": "1128559"
  },
  {
    "text": "the lynx is a type of wildcat and in greek means it is believed that links can see",
    "start": "1129360",
    "end": "1135039"
  },
  {
    "text": "other people's kent and his role is for revolt revealing the hidden truths",
    "start": "1135039",
    "end": "1140160"
  },
  {
    "text": "so it's in in our system is for revolting the hidden properties",
    "start": "1140160",
    "end": "1146000"
  },
  {
    "text": "the picture below gives a high level workflow of links the tool mainly consists of two parts",
    "start": "1146000",
    "end": "1151600"
  },
  {
    "text": "the left parse is for discovering the potential hidden properties which is the core components in our",
    "start": "1151600",
    "end": "1157360"
  },
  {
    "text": "system it will first leverage data dynamic flow",
    "start": "1157360",
    "end": "1162640"
  },
  {
    "text": "analysis to track the user input data flows and then it use static syntax syntax analyzers to",
    "start": "1162640",
    "end": "1170000"
  },
  {
    "text": "infer potential hidden properties the the right part is about how we can",
    "start": "1170000",
    "end": "1175520"
  },
  {
    "text": "detecting the harmful hidden properties from all those potential candidates",
    "start": "1175520",
    "end": "1180720"
  },
  {
    "text": "and generated exploit for them so to help future node.js security",
    "start": "1180720",
    "end": "1187120"
  },
  {
    "text": "research we will open source our links project on the github link at the bottom",
    "start": "1187120",
    "end": "1193840"
  },
  {
    "text": "so the very first thing links will do is dynamic flow tracking first of all links will generate a label",
    "start": "1194240",
    "end": "1201840"
  },
  {
    "text": "object which is a unique key and value pair links will inject the label into the",
    "start": "1201840",
    "end": "1208000"
  },
  {
    "text": "input data of the program different properties from the input objects may flow into the different",
    "start": "1208000",
    "end": "1214000"
  },
  {
    "text": "program logics so to track all the potential propagations our label injection is performed",
    "start": "1214000",
    "end": "1221440"
  },
  {
    "text": "recursively taking the rooting controller cases as an example as shown in the left part of the picture",
    "start": "1221440",
    "end": "1228799"
  },
  {
    "text": "links will first generate three different input objects by label injecting the original one",
    "start": "1228799",
    "end": "1236640"
  },
  {
    "text": "in each time link will inject the label into a different property such as the gmail i'm sorry such as the",
    "start": "1236640",
    "end": "1244000"
  },
  {
    "text": "email and the password and also he will inject a label into the root",
    "start": "1244000",
    "end": "1249360"
  },
  {
    "text": "of the input object and then we execute the mutated test input",
    "start": "1249360",
    "end": "1257840"
  },
  {
    "text": "in our instrumental framework to observe the program execution we leverage a javascript",
    "start": "1257840",
    "end": "1263919"
  },
  {
    "text": "analyze framework called jalanki to instrument our test program since we",
    "start": "1263919",
    "end": "1269039"
  },
  {
    "text": "are studying the data flows we instrument only the variable read and write",
    "start": "1269039",
    "end": "1274080"
  },
  {
    "text": "and object property indexing and the function course then we execute the program",
    "start": "1274080",
    "end": "1281679"
  },
  {
    "text": "during the execution links will examine every object within the data flow",
    "start": "1281679",
    "end": "1286799"
  },
  {
    "text": "if an object carrier carries our property labels we will record it for further",
    "start": "1286799",
    "end": "1293679"
  },
  {
    "text": "analysis and we will quote the objects that carry the labels as a property carriers",
    "start": "1293679",
    "end": "1301679"
  },
  {
    "text": "so now we have a list of probably carriers recorded that an object is flagged as a property",
    "start": "1301919",
    "end": "1308640"
  },
  {
    "text": "carrier because we detected our injected label under his body",
    "start": "1308640",
    "end": "1313840"
  },
  {
    "text": "so if we can propagate our label here is it possible we also propagate other",
    "start": "1313840",
    "end": "1320320"
  },
  {
    "text": "properties here most more specifically if we propagate it on property with a conflicting name",
    "start": "1320320",
    "end": "1327760"
  },
  {
    "text": "of with certain internal properties we may be able to override the original states so",
    "start": "1327760",
    "end": "1334320"
  },
  {
    "text": "we need to extract all the potent all the original properties under the carrier so now",
    "start": "1334320",
    "end": "1341600"
  },
  {
    "text": "we want to extract all the childs from the property carrier and flagged them as hidden property",
    "start": "1341600",
    "end": "1347280"
  },
  {
    "text": "candidates to achieve this goal we need static",
    "start": "1347280",
    "end": "1352880"
  },
  {
    "text": "syntax analyzed to extract necessary syntactic information from the code so the picture",
    "start": "1352880",
    "end": "1358960"
  },
  {
    "text": "on the right demonstrates how we pass a statement from our running example",
    "start": "1358960",
    "end": "1364400"
  },
  {
    "text": "so to pass this statement links will traverse the syntax tree until reaching",
    "start": "1364400",
    "end": "1370880"
  },
  {
    "text": "the property carrier which is circled by the right by the red",
    "start": "1370880",
    "end": "1375919"
  },
  {
    "text": "line in our graph then it records all the properties under the carrier",
    "start": "1375919",
    "end": "1380960"
  },
  {
    "text": "in our in our case the hidden property candidate is the constructor",
    "start": "1380960",
    "end": "1387120"
  },
  {
    "text": "okay so this is the output screenshot of the first component",
    "start": "1387679",
    "end": "1394080"
  },
  {
    "text": "as you can assume as you can observed the links will first instrument the code based and in total",
    "start": "1399360",
    "end": "1406240"
  },
  {
    "text": "you can observe that we tracked 43 different carriers",
    "start": "1406240",
    "end": "1411360"
  },
  {
    "text": "and as indicated by the red circle links successfully detected a hidden property",
    "start": "1411360",
    "end": "1416720"
  },
  {
    "text": "named constructor so in the previous components we",
    "start": "1416720",
    "end": "1422080"
  },
  {
    "text": "discovered the key name of the potential hidden properties which is the constructor by injecting a",
    "start": "1422080",
    "end": "1428400"
  },
  {
    "text": "property with such a key we may override the certain internal states",
    "start": "1428400",
    "end": "1433840"
  },
  {
    "text": "however we still we still don't know whether the candidates can be override or not",
    "start": "1433840",
    "end": "1438880"
  },
  {
    "text": "and we also don't know how to introduce attack effects with these candidates so apparently",
    "start": "1438880",
    "end": "1445840"
  },
  {
    "text": "links should do more let's revisit our run example to see if there's",
    "start": "1445840",
    "end": "1451440"
  },
  {
    "text": "any insights to god to guide us design such exploitation components so the feature",
    "start": "1451440",
    "end": "1457679"
  },
  {
    "text": "on the right on the on the left is the vulnerable code from our running example as we have discussed many times hit hpa",
    "start": "1457679",
    "end": "1466159"
  },
  {
    "text": "exploit internal program states which means its exploitation highly relay rely on",
    "start": "1466159",
    "end": "1472159"
  },
  {
    "text": "the code context so this is it is important that we can",
    "start": "1472159",
    "end": "1477600"
  },
  {
    "text": "concluded a set of sensitive behaviors these behaviors should clearly indicated",
    "start": "1477600",
    "end": "1483440"
  },
  {
    "text": "certain security consequences by themselves so that we can decouple the harmfulness",
    "start": "1483440",
    "end": "1488559"
  },
  {
    "text": "detection from the code context also from this run example indeed",
    "start": "1488559",
    "end": "1496080"
  },
  {
    "text": "the exploitation is mainly about manipulating the return result for example there are two possible",
    "start": "1496080",
    "end": "1502400"
  },
  {
    "text": "possible paths in this picture if the execution enter the branch on 9 19",
    "start": "1502400",
    "end": "1507919"
  },
  {
    "text": "we will get a validation failed which is which is what we don't want to see but if we go",
    "start": "1507919",
    "end": "1514320"
  },
  {
    "text": "into line 21 we can successfully pass the check so the employee the exploitation point and",
    "start": "1514320",
    "end": "1522240"
  },
  {
    "text": "the override point may not be the same place which means we should not stop our",
    "start": "1522240",
    "end": "1527520"
  },
  {
    "text": "analyze at line 11 and we should continue exploring all the possible paths that",
    "start": "1527520",
    "end": "1535120"
  },
  {
    "text": "can trigger by the manipulating the hidden property",
    "start": "1535120",
    "end": "1540320"
  },
  {
    "text": "we study and concluded six general types of sensitive things the first type is keyword-based things",
    "start": "1540480",
    "end": "1547279"
  },
  {
    "text": "such as c1 c2 and i1 based on our observations certain parameters of sensitive methods",
    "start": "1547279",
    "end": "1554960"
  },
  {
    "text": "are really a common attack targets for hpa hence we collect we collect widely used",
    "start": "1554960",
    "end": "1561520"
  },
  {
    "text": "api that are frequently involved in handling user input such as file system operations",
    "start": "1561520",
    "end": "1567360"
  },
  {
    "text": "database queries like that and we made our best effort to collect",
    "start": "1567360",
    "end": "1573120"
  },
  {
    "text": "as many sensitive apis possible while we know that it is not complete",
    "start": "1573120",
    "end": "1578400"
  },
  {
    "text": "but it can be easily extended over time the second thing",
    "start": "1578400",
    "end": "1583440"
  },
  {
    "text": "belongs to the behavior-based sync for example in the sync i2 we are",
    "start": "1583440",
    "end": "1588799"
  },
  {
    "text": "monitoring that whether our hidden property can change the return value of the module",
    "start": "1588799",
    "end": "1594400"
  },
  {
    "text": "such things are killing weapons for security related modules like input validators",
    "start": "1594400",
    "end": "1601919"
  },
  {
    "text": "okay after defining our sensitive behaviors we want the hidden property to trigger as many",
    "start": "1602240",
    "end": "1608400"
  },
  {
    "text": "as possible branches and the monitor rather we can hit a certain thing to achieve this goal we",
    "start": "1608400",
    "end": "1614240"
  },
  {
    "text": "will use symbolic execution to explore the hidden property value space so the links first generate a exploit",
    "start": "1614240",
    "end": "1621840"
  },
  {
    "text": "template that can reach the potential vulnerable prop properties",
    "start": "1621840",
    "end": "1627360"
  },
  {
    "text": "we denote such structure as a template because lynx actually does not inject concrete value",
    "start": "1627360",
    "end": "1634880"
  },
  {
    "text": "here he will inject instead he will inject a placeholder which is used by the symbolic execution",
    "start": "1634880",
    "end": "1642159"
  },
  {
    "text": "then we will run the test program on our construct with our constructed templates",
    "start": "1642159",
    "end": "1647440"
  },
  {
    "text": "and symbolically executing the hidden property so as shown in the picture with the",
    "start": "1647440",
    "end": "1652559"
  },
  {
    "text": "symbolic fusion we'll explore all the past constraints on the path and if",
    "start": "1652559",
    "end": "1658399"
  },
  {
    "text": "the exploration hit a certain sink we will fetch the corresponding payloads",
    "start": "1658399",
    "end": "1663679"
  },
  {
    "text": "that can trick the sink so this is the output of our find the",
    "start": "1663679",
    "end": "1669760"
  },
  {
    "text": "exploit module from the circuit area we can observe that the key value paid",
    "start": "1669760",
    "end": "1674880"
  },
  {
    "text": "here constructor and one triggered the sync i2 and in the last line we can find that",
    "start": "1674880",
    "end": "1681360"
  },
  {
    "text": "links automatically generates exploits that can successfully lead to the input",
    "start": "1681360",
    "end": "1686960"
  },
  {
    "text": "validate input validation bypass",
    "start": "1686960",
    "end": "1691120"
  },
  {
    "text": "so here let's have some evaluation data and have more insights about the impact",
    "start": "1692720",
    "end": "1699520"
  },
  {
    "text": "of our research so during our research we choose 60 widely used programs from npm",
    "start": "1699520",
    "end": "1706640"
  },
  {
    "text": "there are 55 modules and five web applications with help of links we tracked more than",
    "start": "1706640",
    "end": "1714360"
  },
  {
    "text": "1030 carriers and detected 300 hidden properties candidates associated with them",
    "start": "1714360",
    "end": "1721279"
  },
  {
    "text": "in the end we confirmed 13 wonder zero-day vulnerabilities and with the help of symbolic execution",
    "start": "1721279",
    "end": "1728080"
  },
  {
    "text": "links even synthesized 10 exploits",
    "start": "1728080",
    "end": "1732240"
  },
  {
    "text": "so how is the impact of the detected vulnerabilities we found that the hpa can introduce",
    "start": "1733360",
    "end": "1740159"
  },
  {
    "text": "various attack effects such as leaking the credential data bypassing security checks and deny of",
    "start": "1740159",
    "end": "1746720"
  },
  {
    "text": "services based on the impact analysis we can observe that hepa compromised previously",
    "start": "1746720",
    "end": "1753520"
  },
  {
    "text": "on reasonable program state which effectively enlarged our tax service",
    "start": "1753520",
    "end": "1759360"
  },
  {
    "text": "also we could notice that hpa is not a simple input validation problems and also many",
    "start": "1759360",
    "end": "1766320"
  },
  {
    "text": "input validators themselves are very vulnerable to hpa",
    "start": "1766320",
    "end": "1771919"
  },
  {
    "text": "okay so in the following style slides i will pick up some interesting vulnerabilities for our result",
    "start": "1772880",
    "end": "1779039"
  },
  {
    "text": "and case studying how we leverage hpa to compromise them and note that other vulnerabilities here",
    "start": "1779039",
    "end": "1785919"
  },
  {
    "text": "have been reported to the one vendors so the first case comes from mongodb",
    "start": "1785919",
    "end": "1792000"
  },
  {
    "text": "official driver we found that the we can temper an internal state named",
    "start": "1792000",
    "end": "1797200"
  },
  {
    "text": "bison type so a background here is that the mongodb leverage this b bison type to",
    "start": "1797200",
    "end": "1804640"
  },
  {
    "text": "indicate the data type of the query object however when serializing the query object",
    "start": "1804640",
    "end": "1811120"
  },
  {
    "text": "mongodb will ignore the object with our unknown basin type so what if we abuse the logic in a query",
    "start": "1811120",
    "end": "1819440"
  },
  {
    "text": "condition object the code on the right is an open source online game the online",
    "start": "1819440",
    "end": "1826480"
  },
  {
    "text": "game used the vulnerable mongodb api to implement his user management logics",
    "start": "1826480",
    "end": "1832399"
  },
  {
    "text": "as shown in the picture there are two apis implemented by the online games the first one is about loading a user",
    "start": "1832399",
    "end": "1839360"
  },
  {
    "text": "and the second one is about delete a user so by as an attacker by injecting an",
    "start": "1839360",
    "end": "1845600"
  },
  {
    "text": "unknown business type such as black hat into the user input the attacker can force the mongodb not",
    "start": "1845600",
    "end": "1852080"
  },
  {
    "text": "serializing the curio condition so the mongodb will always return",
    "start": "1852080",
    "end": "1858559"
  },
  {
    "text": "the first the first user on the mongodb database with this ability the attacker can login",
    "start": "1858559",
    "end": "1866000"
  },
  {
    "text": "or delete arbitrary users in the database",
    "start": "1866000",
    "end": "1871440"
  },
  {
    "text": "and so the second case is for another widely used in-memory javascript",
    "start": "1872080",
    "end": "1877600"
  },
  {
    "text": "database the kind of the hidden property is more like a backdoor which helps attacker access the",
    "start": "1877600",
    "end": "1884159"
  },
  {
    "text": "sensitive data so in tufidb we discover a hidden property named id",
    "start": "1884159",
    "end": "1890960"
  },
  {
    "text": "which is our internal index for the database items once we specify",
    "start": "1890960",
    "end": "1898399"
  },
  {
    "text": "we specify our own id in the query type edb will ignore other query",
    "start": "1898399",
    "end": "1904080"
  },
  {
    "text": "conditions and directly return the results associated with the index",
    "start": "1904080",
    "end": "1909600"
  },
  {
    "text": "moreover since the internal index is in a easily guessable format such as",
    "start": "1909600",
    "end": "1917080"
  },
  {
    "text": "t00002r so it is so that attacker can use this vulnerabilities to access",
    "start": "1917080",
    "end": "1922960"
  },
  {
    "text": "arbitrary data in the data in the database so as shown in the picture even though",
    "start": "1922960",
    "end": "1928720"
  },
  {
    "text": "we we specify a wrong password and username we can still leak the correct user data",
    "start": "1928720",
    "end": "1935760"
  },
  {
    "text": "by with the craft hidden properties",
    "start": "1935760",
    "end": "1939919"
  },
  {
    "text": "so here is our the the last case in this talk before we can introduce this case we",
    "start": "1941440",
    "end": "1947919"
  },
  {
    "text": "would like to give a brief uh introduction to the event handler skin of node.js",
    "start": "1947919",
    "end": "1954159"
  },
  {
    "text": "so in node.js there's only one thread handling all the incoming requests",
    "start": "1954159",
    "end": "1960080"
  },
  {
    "text": "in the third as a result the availability of the event handler is really critical",
    "start": "1960080",
    "end": "1966159"
  },
  {
    "text": "in the third case we want to demonstrate how hpa can attack the event handler",
    "start": "1966159",
    "end": "1972640"
  },
  {
    "text": "and thus freeze the entire server programs",
    "start": "1972640",
    "end": "1977840"
  },
  {
    "text": "so in express we found that we found a hidden property which allows us to pass a function",
    "start": "1978080",
    "end": "1984080"
  },
  {
    "text": "definition this function will be executed in an isolated safe sandbox",
    "start": "1984080",
    "end": "1990159"
  },
  {
    "text": "even though we cannot execute the commands using these hidden properties we can still block the event handler by",
    "start": "1990159",
    "end": "1996960"
  },
  {
    "text": "passing an infinite loop so as shown in the bottom of the picture",
    "start": "1996960",
    "end": "2002000"
  },
  {
    "text": "we if we pass an up a hidden property through the web api which is an infinite loop",
    "start": "2002000",
    "end": "2007919"
  },
  {
    "text": "then upon receiving the request the whole site will immediately get blocked",
    "start": "2007919",
    "end": "2014799"
  },
  {
    "text": "yeah so yeah so thanks for attending attending our talk this is pretty much about our research",
    "start": "2014799",
    "end": "2022880"
  },
  {
    "text": "you are also welcome to follow me at uh you to twitter on the bottom of the slides thank you",
    "start": "2022880",
    "end": "2033279"
  },
  {
    "text": "hi everyone so i'm here to taking questions",
    "start": "2033279",
    "end": "2040320"
  },
  {
    "text": "um okay so i noticed that there's already some questions uh in the chat box so i'll",
    "start": "2040320",
    "end": "2047600"
  },
  {
    "text": "answer this question first okay so for the links called release plan so actually we are clean cleaning up the",
    "start": "2047600",
    "end": "2054960"
  },
  {
    "text": "project and prepare the documentations as you guys may notice we have several modules and",
    "start": "2054960",
    "end": "2063520"
  },
  {
    "text": "from the hci part and the interface is not so user friendly so we are try our best",
    "start": "2063520",
    "end": "2071599"
  },
  {
    "text": "to prepare the documentations and also clean up the code in case some researchers may want to",
    "start": "2071599",
    "end": "2077679"
  },
  {
    "text": "read our codes and yeah so that's why we",
    "start": "2077679",
    "end": "2082720"
  },
  {
    "text": "and our plan is to release it no later than the end of august so this is the first question and",
    "start": "2082720",
    "end": "2089280"
  },
  {
    "text": "[Music] and so for the second question uh is there any paper or blogs",
    "start": "2089280",
    "end": "2095440"
  },
  {
    "text": "from you on this topic i'm sorry that actually we are uh",
    "start": "2095440",
    "end": "2103040"
  },
  {
    "text": "we are only maintaining our internal technical documents and uh uh so so",
    "start": "2103040",
    "end": "2110960"
  },
  {
    "text": "in shorthand uh we haven't haven't had a plan to release it publicly",
    "start": "2110960",
    "end": "2116560"
  },
  {
    "text": "yeah so but uh we will probably release a complete write-up uh a white paper",
    "start": "2116560",
    "end": "2123680"
  },
  {
    "text": "uh along with the project sometimes but yeah but we will give out our source",
    "start": "2123680",
    "end": "2129520"
  },
  {
    "text": "code first yeah and yeah so as for the twitter id question",
    "start": "2129520",
    "end": "2137200"
  },
  {
    "text": "okay so i can i will send you the twitter link so so is there any",
    "start": "2137200",
    "end": "2144960"
  },
  {
    "text": "other questions",
    "start": "2144960",
    "end": "2159838"
  },
  {
    "text": "okay",
    "start": "2170839",
    "end": "2173839"
  },
  {
    "text": "okay yeah so and so we are we're having about four minutes",
    "start": "2185119",
    "end": "2191119"
  },
  {
    "text": "if there is any question feel free to ask me okay so i noticed there's two more questions",
    "start": "2191119",
    "end": "2197280"
  },
  {
    "text": "let's take a look okay so uh for the question from jason",
    "start": "2197280",
    "end": "2205119"
  },
  {
    "text": "uh thanks for the question so jason is asking about does this means both the expected and",
    "start": "2205119",
    "end": "2210640"
  },
  {
    "text": "unexpected parameters need to be centralized or there is a more elegant solution",
    "start": "2210640",
    "end": "2215760"
  },
  {
    "text": "okay so in our research we mainly focus on the hidden part which is the unexpected parameters and we believe",
    "start": "2215760",
    "end": "2223599"
  },
  {
    "text": "that it is actually not a the the mpd we believe that the",
    "start": "2223599",
    "end": "2230079"
  },
  {
    "text": "synchronization is not the silver bullet because some standardization or validator models are also one",
    "start": "2230079",
    "end": "2236480"
  },
  {
    "text": "directly vulnerable to our attacks so we believe uh more elegant uh method is",
    "start": "2236480",
    "end": "2243119"
  },
  {
    "text": "is to let programmers developers to be aware of those hidden properties",
    "start": "2243119",
    "end": "2248160"
  },
  {
    "text": "so that's why we developed and uh want to open source our code yeah",
    "start": "2248160",
    "end": "2255280"
  },
  {
    "text": "and uh it seems that we still have time so maybe we can take another one question",
    "start": "2255280",
    "end": "2260800"
  },
  {
    "text": "um uh so i have so the",
    "start": "2260800",
    "end": "2267520"
  },
  {
    "text": "question is uh you mentioned that the most traditional payload validation tools are not",
    "start": "2267520",
    "end": "2273119"
  },
  {
    "text": "able to deal with hpa vulnerabilities because they are also vulnerable to it",
    "start": "2273119",
    "end": "2279359"
  },
  {
    "text": "joi okay yeah so uh i kind of uh",
    "start": "2281040",
    "end": "2287280"
  },
  {
    "text": "so i so we test 60 modules um",
    "start": "2287280",
    "end": "2293520"
  },
  {
    "text": "uh i kind of remember that i i choose that one but unfortunately we didn't find",
    "start": "2293520",
    "end": "2299520"
  },
  {
    "text": "exploitable hidden properties if i remember correctly yes",
    "start": "2299520",
    "end": "2313119"
  },
  {
    "text": "so i will check if we still have time for taking more questions okay cool uh",
    "start": "2313119",
    "end": "2321359"
  },
  {
    "text": "yeah so i i just shared my uh my twitter",
    "start": "2324079",
    "end": "2330880"
  },
  {
    "text": "through the chat and uh uh if uh if we are about to release our tools",
    "start": "2330880",
    "end": "2337680"
  },
  {
    "text": "and the the white papers i will also note",
    "start": "2337680",
    "end": "2342400"
  },
  {
    "text": "make a tweet about it yes and okay so if we have time we can take other",
    "start": "2344079",
    "end": "2350079"
  },
  {
    "text": "questions please wait for a moment it seems okay",
    "start": "2350079",
    "end": "2355119"
  },
  {
    "text": "yeah okay so it seems like it's still uh many questions",
    "start": "2355119",
    "end": "2360320"
  },
  {
    "text": "so uh and we don't have that much time so probably uh we can uh i will take the question",
    "start": "2360320",
    "end": "2366320"
  },
  {
    "text": "through the chat box then yeah thanks for all you guys",
    "start": "2366320",
    "end": "2371520"
  },
  {
    "text": "attending my talk yes",
    "start": "2371520",
    "end": "2375760"
  }
]