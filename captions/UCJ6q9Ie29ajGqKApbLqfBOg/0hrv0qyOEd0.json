[
  {
    "text": "hi everyone thank you for joining today we'll be escaping virtualized containers hey i'm involved i'm a security",
    "start": "2000",
    "end": "7759"
  },
  {
    "text": "researcher at palo alto networks and me and my team's main focus is cloud security and container security",
    "start": "7759",
    "end": "14240"
  },
  {
    "text": "and today i'm going to walk you through a research i conducted on a cata containers which is a sandboxing solution for containers that",
    "start": "14240",
    "end": "20880"
  },
  {
    "text": "runs virtualized containers it runs each container inside the virtual machine and today",
    "start": "20880",
    "end": "26720"
  },
  {
    "text": "we're trying to escape that sandbox and hopefully through that learn a bit about the container security so",
    "start": "26720",
    "end": "32640"
  },
  {
    "text": "a bit about the agenda for today we will start off by talking about the container and container security in",
    "start": "32640",
    "end": "37920"
  },
  {
    "text": "general and then we'll talk about cutter containers a sandboxing solution like i've said",
    "start": "37920",
    "end": "42960"
  },
  {
    "text": "and why is that needed and how is it implemented and then we'll try to escape the sandbox so",
    "start": "42960",
    "end": "49120"
  },
  {
    "text": "we first need to break out of the container and then escape the virtual machine so we have quite a bit of challenges",
    "start": "49120",
    "end": "55520"
  },
  {
    "text": "ahead and then we'll wrap it up with some takeaways from the research so let's start with containers",
    "start": "55520",
    "end": "60960"
  },
  {
    "text": "there's a misconception that containers are just lightweight vms that's not the",
    "start": "60960",
    "end": "66000"
  },
  {
    "text": "case truth on steroids is actually a better description if you're familiar with linux but when i wanted to",
    "start": "66000",
    "end": "72960"
  },
  {
    "text": "really sum up containers in one sentence what i came up with is restricted processes",
    "start": "72960",
    "end": "78080"
  },
  {
    "text": "running in a separate file system and the keyword here is processes at the end containers are just",
    "start": "78080",
    "end": "83439"
  },
  {
    "text": "linux processors running with a couple of isolation primitives applied to them and you probably heard",
    "start": "83439",
    "end": "89200"
  },
  {
    "text": "about some of those isolation as isolation primitives so for example namespaces define what",
    "start": "89200",
    "end": "96799"
  },
  {
    "text": "the process or what the container can see so the pid namespace will define what other processes",
    "start": "96799",
    "end": "102479"
  },
  {
    "text": "a make container say and then you have primitives which are more related to what a container can do",
    "start": "102479",
    "end": "107840"
  },
  {
    "text": "like capabilities in a second so for example capabilities are based are basically privileges in",
    "start": "107840",
    "end": "113680"
  },
  {
    "text": "linux so you wouldn't like the container to have the assist reboot capability as that would",
    "start": "113680",
    "end": "119040"
  },
  {
    "text": "allow him to shut down the machine and of course that's something you don't want the container to be able to do finally the",
    "start": "119040",
    "end": "125759"
  },
  {
    "text": "final piece that really ties it all together are a control group so c groups which are all about resource isolation",
    "start": "125759",
    "end": "131680"
  },
  {
    "text": "and limiting the containers access to host resources for example you wouldn't like the container to be able to",
    "start": "131680",
    "end": "138400"
  },
  {
    "text": "exhaust the entire host memory and launch a denial of service attack against the host right",
    "start": "138400",
    "end": "144879"
  },
  {
    "text": "and all of those together give allow us to separate a process enough from the",
    "start": "144879",
    "end": "150720"
  },
  {
    "text": "system for it to be considered a container but you still can't really compare the type of isolation",
    "start": "150720",
    "end": "157680"
  },
  {
    "text": "provided by those primitives and the isolation of containers to the level of isolation provided by",
    "start": "157680",
    "end": "162800"
  },
  {
    "text": "virtual machines and and the main difference is is that virtual machines run with a",
    "start": "162800",
    "end": "168640"
  },
  {
    "text": "on a separate kernel from the from the host and containers share the host kernel and that's really",
    "start": "168640",
    "end": "176239"
  },
  {
    "text": "a fancy way of saying that containers at the end are just processes and like any process they interact with the",
    "start": "176239",
    "end": "182640"
  },
  {
    "text": "kernel quite frequently frequently either a when they invoke system call or if a",
    "start": "182640",
    "end": "188080"
  },
  {
    "text": "page fault happen it happens in their context and that means that like other processes",
    "start": "188080",
    "end": "195200"
  },
  {
    "text": "on the on the machine and the kernel is quite a large of an attack surface for containers to try and exploit",
    "start": "195200",
    "end": "201519"
  },
  {
    "text": "to gain a foothold and a control over the entire host right and the the issue here is that",
    "start": "201519",
    "end": "208799"
  },
  {
    "text": "those vulnerabilities don't really have to be related to namespaces or to c groups or",
    "start": "208799",
    "end": "214239"
  },
  {
    "text": "to any of the primitives that really make up containers just any privileges creation vulnerability in the",
    "start": "214239",
    "end": "220560"
  },
  {
    "text": "kernel in the in a code path in the kernel that the container can somehow invoke it",
    "start": "220560",
    "end": "226319"
  },
  {
    "text": "could allow a container to break out and that's quite concerning in a lot of scenarios",
    "start": "226319",
    "end": "232239"
  },
  {
    "text": "and to tackle that that issue a few a solution around a few tools",
    "start": "232239",
    "end": "238840"
  },
  {
    "text": "arrives that allow you to sandbox container and cutter containers is one of the",
    "start": "238840",
    "end": "244799"
  },
  {
    "text": "first solution to actually try to do that and it takes a pretty straightforward approach at the",
    "start": "244799",
    "end": "250239"
  },
  {
    "text": "sandbox in the containers it just runs each container inside the dedicated",
    "start": "250239",
    "end": "255680"
  },
  {
    "text": "lightweight virtual machine and by doing that you get two layers of isolation right you get first the container and then the virtual",
    "start": "255680",
    "end": "262160"
  },
  {
    "text": "machine and you also mitigated the breakouts which are based on kernel vulnerabilities because even if the",
    "start": "262160",
    "end": "268160"
  },
  {
    "text": "container exploits the vulnerability in the guest kernel he's only compromising the guest right he still doesn't have access to the host",
    "start": "268160",
    "end": "274960"
  },
  {
    "text": "and really the idea of qatar is to provide a simple way to sandbox containers where you can just",
    "start": "274960",
    "end": "281040"
  },
  {
    "text": "plug qatar into existing solutions like docker and kubernetes and have a certain containers run with",
    "start": "281040",
    "end": "287759"
  },
  {
    "text": "an additional layer of isolation so what's what's the use case for this type of solution so first as",
    "start": "287759",
    "end": "294320"
  },
  {
    "text": "i've said kata is great for untrusted or targeted containers where you you're afraid the container might",
    "start": "294320",
    "end": "300240"
  },
  {
    "text": "want to break out and affect the host and it's also really useful in multi-tenant environments where you want to",
    "start": "300240",
    "end": "306800"
  },
  {
    "text": "segregate a container from a several tenants and there are a lot of",
    "start": "306800",
    "end": "312080"
  },
  {
    "text": "scenarios where you those use cases are useful but cloud service provider is is one of the prominent ones because",
    "start": "312080",
    "end": "319600"
  },
  {
    "text": "that's those two use cases are really the problem that cloud service providers have right they run a containers from",
    "start": "319600",
    "end": "326400"
  },
  {
    "text": "multiple customers on the same platforms those containers might be malicious they they really don't they really don't know",
    "start": "326400",
    "end": "333360"
  },
  {
    "text": "they need a and they need a solution to create a strong isolation boundary between containers of different",
    "start": "333360",
    "end": "339280"
  },
  {
    "text": "customers right and qatar really fits that scenario great and several cloud service",
    "start": "339280",
    "end": "345840"
  },
  {
    "text": "providers are already using qatar in production to support customer multi-tenancy so how",
    "start": "345840",
    "end": "351840"
  },
  {
    "text": "do you really use kata and so in a normal container setup you have the",
    "start": "351840",
    "end": "358080"
  },
  {
    "text": "container engines of something like docker and you also have the container runtime and that's because container engines",
    "start": "358080",
    "end": "363520"
  },
  {
    "text": "don't really know how to run containers and when they actually need to they defer to their defined runtime",
    "start": "363520",
    "end": "369759"
  },
  {
    "text": "and that runtime actually knows how to set up the container so normally you would use the run c",
    "start": "369759",
    "end": "374960"
  },
  {
    "text": "which is the default in industry standard runtime but you can decide that you if you have an untrusted",
    "start": "374960",
    "end": "381039"
  },
  {
    "text": "container where you want to sandbox that container you can just define kata as the underlying runtime of your",
    "start": "381039",
    "end": "387120"
  },
  {
    "text": "container engine say docker and now when you run that container with kata it will be",
    "start": "387120",
    "end": "393199"
  },
  {
    "text": "deployed inside the virtual machine with an additional layer of isolation so we at the end of the day they want to",
    "start": "393199",
    "end": "399520"
  },
  {
    "text": "break out of this of this sandbox so let's see a bit more in depth how does that work so that's",
    "start": "399520",
    "end": "404720"
  },
  {
    "text": "how you that's the command to start a container under docker with qatar",
    "start": "404720",
    "end": "409759"
  },
  {
    "text": "and the way this works is docker will tell the cata runtime on the host please set up a container for me and the",
    "start": "409759",
    "end": "416720"
  },
  {
    "text": "canter runtime now needs to set up a virtual machine so it will defer to one of the predefined",
    "start": "416720",
    "end": "422560"
  },
  {
    "text": "virtual machine monitors virtual machine modules are basically software that knows how to set up virtual machines and those",
    "start": "422560",
    "end": "428880"
  },
  {
    "text": "are either a qmu a cloud hypervisor by intel or filecracker by amazon and it will use one of those to set up",
    "start": "428880",
    "end": "435360"
  },
  {
    "text": "the virtual machine next it will also set up a shared directory between the host and the guest virtual",
    "start": "435360",
    "end": "440880"
  },
  {
    "text": "machine to deliver some files for the fro to the guest for example in order to deploy the",
    "start": "440880",
    "end": "446400"
  },
  {
    "text": "container the guest must have the a container image right and and now once that done a",
    "start": "446400",
    "end": "452880"
  },
  {
    "text": "process called the cutter agent it will start running in the guest and he is responsible for",
    "start": "452880",
    "end": "458080"
  },
  {
    "text": "actually deploying the container inside the guest so it will take the container configuration",
    "start": "458080",
    "end": "463840"
  },
  {
    "text": "from the cataran time and also the image from the shell directory and use those two to actually deploy the container",
    "start": "463840",
    "end": "470479"
  },
  {
    "text": "and there you have it at the end you have a container running inside a lightweight virtual machine what you",
    "start": "470479",
    "end": "475919"
  },
  {
    "text": "expected and you get two layers of isolation so now that we know how things work",
    "start": "475919",
    "end": "481280"
  },
  {
    "text": "let's try to escape the sandbox and why would you like to do that well first it's fun and it's challenging",
    "start": "481280",
    "end": "486720"
  },
  {
    "text": "right you have two isolation layers to break out of and second i think it's a great opportunity",
    "start": "486720",
    "end": "492160"
  },
  {
    "text": "to learn about container security so what's our attack scenario so enterprises use qatar to contain",
    "start": "492160",
    "end": "498800"
  },
  {
    "text": "untrusted and targeted containers we're that untrusted container trying to break out and affect the host",
    "start": "498800",
    "end": "504960"
  },
  {
    "text": "cloud service providers use qatar to support customer multi-tenancy so we're that evil customer uploading",
    "start": "504960",
    "end": "511360"
  },
  {
    "text": "our malicious containers and trying to break out and affect the entire platform and affect other customers",
    "start": "511360",
    "end": "516800"
  },
  {
    "text": "so as that as a malicious container what's the plan it's pretty straightforward we first need to escape the container",
    "start": "516800",
    "end": "523440"
  },
  {
    "text": "and then break out of the virtual machine so we'll get to that in a second but i want to",
    "start": "523440",
    "end": "528720"
  },
  {
    "text": "discuss scope for a bit a cutter is very configurable the vulnerabilities i'll show here won't",
    "start": "528720",
    "end": "534320"
  },
  {
    "text": "work in every configuration but we'll be targeting the standard default configuration that cut our ships with",
    "start": "534320",
    "end": "540959"
  },
  {
    "text": "it also we'll be focusing on a simple container guest on a single container guest under docker",
    "start": "540959",
    "end": "546720"
  },
  {
    "text": "and with kubernetes you could have a multiple containers in one guest which some exploitation",
    "start": "546720",
    "end": "552320"
  },
  {
    "text": "gets complex because of that and in one of the attacks i'm going to show them still i still need to",
    "start": "552320",
    "end": "557360"
  },
  {
    "text": "win a race condition for that to work under kubernetes so we'll keep it simple we will focus on a",
    "start": "557360",
    "end": "562720"
  },
  {
    "text": "single container guest under docker and finally i want to say this is not an indictment against kata you know every",
    "start": "562720",
    "end": "569120"
  },
  {
    "text": "software will have its share of vulnerabilities i really want to show it just to so you could",
    "start": "569120",
    "end": "574640"
  },
  {
    "text": "learn about container security so our first job of the day as i've said is to escape the container right",
    "start": "574640",
    "end": "580480"
  },
  {
    "text": "so we could rely on the vulnerability in the guest kernel right and in a privileged escalation",
    "start": "580480",
    "end": "586320"
  },
  {
    "text": "vulnerability in the guest cornell but that really misses the point right we want to learn about container security we want to find an issue",
    "start": "586320",
    "end": "592640"
  },
  {
    "text": "that is related to containers so we want to find a native issue with how kata sets up the",
    "start": "592640",
    "end": "598480"
  },
  {
    "text": "container inside the guest virtual machine so in order to do that we need to talk about how do those",
    "start": "598480",
    "end": "604560"
  },
  {
    "text": "issues even look like you know how do you approach the task of looking at the container runtime and",
    "start": "604560",
    "end": "610480"
  },
  {
    "text": "trying to break it so let's look again at the setup of a containerized environment",
    "start": "610480",
    "end": "615600"
  },
  {
    "text": "so you have the engine which as i've said like docker which as i've said doesn't really know how to set up",
    "start": "615600",
    "end": "620959"
  },
  {
    "text": "containers and you have the runtime which really knows how to take configuration and set up a container so the engine responsibility",
    "start": "620959",
    "end": "627839"
  },
  {
    "text": "here is to generate a secure configuration it will tell the runtime what restrictions to",
    "start": "627839",
    "end": "633200"
  },
  {
    "text": "set up so which namespaces and which capabilities and so on and the runtime will take that",
    "start": "633200",
    "end": "638720"
  },
  {
    "text": "configuration and apply it to create a container now when you're",
    "start": "638720",
    "end": "644560"
  },
  {
    "text": "talking about how do you escape containers you're really talking about what issues",
    "start": "644560",
    "end": "649920"
  },
  {
    "text": "uh could be indeed in this process so the first type of issue that could uh that could arise in this process is in",
    "start": "649920",
    "end": "656720"
  },
  {
    "text": "the initialization of a of the containerized process you have a host process the runtime",
    "start": "656720",
    "end": "662160"
  },
  {
    "text": "trying to use untrusted variables like like the container image and the command and to set up a containerized process",
    "start": "662160",
    "end": "668640"
  },
  {
    "text": "that process is really uh that a procedure is really a complicated",
    "start": "668640",
    "end": "673680"
  },
  {
    "text": "and crucial and a lot of the issues was found in that process for",
    "start": "673680",
    "end": "679600"
  },
  {
    "text": "example there was an issue with the runtime exposing a briefly exposing host file",
    "start": "679600",
    "end": "684880"
  },
  {
    "text": "descriptors to the container which the container could have used to break out and that issue really is a runtime issue",
    "start": "684880",
    "end": "691200"
  },
  {
    "text": "because the runtime is the one in charge of setting up the container right and the second type of issue",
    "start": "691200",
    "end": "698640"
  },
  {
    "text": "is really an engine issue where you at the end you you finish the initial initialization of the container",
    "start": "698640",
    "end": "704880"
  },
  {
    "text": "and now you have a running container with a couple of restrictions applied to it but there could be a",
    "start": "704880",
    "end": "710240"
  },
  {
    "text": "scenario where that container is simply not restricted enough right and that really points to a",
    "start": "710240",
    "end": "716880"
  },
  {
    "text": "a problem with the container configuration and the restrictions supplied by the engine and because that that's a",
    "start": "716880",
    "end": "723839"
  },
  {
    "text": "issue with the engine and it really it's it points to permissive engine defaults",
    "start": "723839",
    "end": "728959"
  },
  {
    "text": "or perhaps to a new breakout techniques that wasn't discovered before and normally those are the two areas",
    "start": "728959",
    "end": "734880"
  },
  {
    "text": "where you will hunt for issues and vulnerabilities in but when i came to look at qatar i noticed",
    "start": "734880",
    "end": "741360"
  },
  {
    "text": "that it's quite a unique case because kata is a runtime that actually modifies the configuration",
    "start": "741360",
    "end": "747680"
  },
  {
    "text": "uh received from the engine and the reason it does it is because it turns out that a",
    "start": "747680",
    "end": "753040"
  },
  {
    "text": "configuration generated on the host need to be adjusted in order to be a",
    "start": "753040",
    "end": "758160"
  },
  {
    "text": "valid a valid for use to deploy a container inside a different machine inside the virtual",
    "start": "758160",
    "end": "763839"
  },
  {
    "text": "machine which has a different kernel a different set of emulated hardware and so on but",
    "start": "763839",
    "end": "770320"
  },
  {
    "text": "that's really dangerous to do because container engines over the years of vulnerabilities have",
    "start": "770320",
    "end": "776480"
  },
  {
    "text": "learned how to create a restricted enough configuration that isn't breakable so for us",
    "start": "776480",
    "end": "782160"
  },
  {
    "text": "if we want to escape we can take a look at what qatar does and perhaps find issue with how it modifies the",
    "start": "782160",
    "end": "787279"
  },
  {
    "text": "configuration and kata does a couple of things but the main things i want to focus on is that it discards a several c",
    "start": "787279",
    "end": "794560"
  },
  {
    "text": "groups several control groups c groups and c groups are tied as i've said to hardware resources and because the",
    "start": "794560",
    "end": "802480"
  },
  {
    "text": "host and the guest have a different set of hardware resources right the guests have an emulated set a virtualized set of hardware resources",
    "start": "802480",
    "end": "809360"
  },
  {
    "text": "some c groups just don't make sense in the guest if you generate them on the host so",
    "start": "809360",
    "end": "816000"
  },
  {
    "text": "for example a device group the host and the guests have different devices and you might think it's a bit extreme",
    "start": "816000",
    "end": "824079"
  },
  {
    "text": "to just discard several several c groups but if you if i wanted to understand the reasoning behind it i",
    "start": "824079",
    "end": "830079"
  },
  {
    "text": "think i think the reasoning is that ac groups are known to be mainly about a denying denial of service attacks",
    "start": "830079",
    "end": "836240"
  },
  {
    "text": "preventing denial of service attack from the container to the underlying machine but because here the container",
    "start": "836240",
    "end": "841279"
  },
  {
    "text": "runs inside the guest virtual machine it's no problem really if the container launches a denial of service attack",
    "start": "841279",
    "end": "847279"
  },
  {
    "text": "against the guest right is is not it's only a health in itself only attacking",
    "start": "847279",
    "end": "852320"
  },
  {
    "text": "his own sandbox he's not only closer to a gaining code execution on the host",
    "start": "852320",
    "end": "858480"
  },
  {
    "text": "but the thing is c groups are mainly about preventing the knife service but some people forget that they're not",
    "start": "858480",
    "end": "865519"
  },
  {
    "text": "only about that and one device one c group that is actually quite interesting",
    "start": "865519",
    "end": "870639"
  },
  {
    "text": "which kata doesn't enforce is the devices group and let's have a look at what the device",
    "start": "870639",
    "end": "876000"
  },
  {
    "text": "group does so the devices group restricts the container access to system devices",
    "start": "876000",
    "end": "881680"
  },
  {
    "text": "quite simply and qatar doesn't enforce that c groups as i've said meaning that we inside the container",
    "start": "881680",
    "end": "888000"
  },
  {
    "text": "have more access than usual to the devices of the underlying system",
    "start": "888000",
    "end": "893519"
  },
  {
    "text": "and when you look and that system is the guest virtual machine and when you look at those devices and",
    "start": "893519",
    "end": "898560"
  },
  {
    "text": "think what device could be interesting to us from the container well the guest how this is quite",
    "start": "898560",
    "end": "903760"
  },
  {
    "text": "interesting right we in the container have a view of only a specific file system the container",
    "start": "903760",
    "end": "909440"
  },
  {
    "text": "file system but if we gain access to the entire guest health disk we can now",
    "start": "909440",
    "end": "915279"
  },
  {
    "text": "possibly manipulate it in order to gain code execution on the host right so how do you even access a hard",
    "start": "915279",
    "end": "922639"
  },
  {
    "text": "disk in linux what and those type of devices are called block devices",
    "start": "922639",
    "end": "927680"
  },
  {
    "text": "well you first need a way to refer to that a hard disk to the device and in linux",
    "start": "927680",
    "end": "933839"
  },
  {
    "text": "everything is a file so of course you create a device file that refers to that block device or to that hard disk",
    "start": "933839",
    "end": "940480"
  },
  {
    "text": "in linux every device is identified by two numbers you can see in the examples in the example here those are eight and",
    "start": "940480",
    "end": "947279"
  },
  {
    "text": "one so you first use make node to create the device file uh referring",
    "start": "947279",
    "end": "952720"
  },
  {
    "text": "to that device and then you mount the device file over some directory in your system and now when you interact",
    "start": "952720",
    "end": "959360"
  },
  {
    "text": "with the files under the directory you are actually interacting with the hard disk right everything you do in the directory",
    "start": "959360",
    "end": "965360"
  },
  {
    "text": "is propagated back to the hard disk and that's really the the easy way to interact with the file",
    "start": "965360",
    "end": "970720"
  },
  {
    "text": "system but we that's actually not very useful for us in the container",
    "start": "970720",
    "end": "976079"
  },
  {
    "text": "because the container in the container we have the make node capability which is required",
    "start": "976079",
    "end": "981680"
  },
  {
    "text": "to to create the device file but we don't have the sys admin capability",
    "start": "981680",
    "end": "986959"
  },
  {
    "text": "which from the name you you you may realize that it's good the containers don't have the sysadmin capability",
    "start": "986959",
    "end": "992399"
  },
  {
    "text": "but because we don't have that capability we can't mount and below you can see a a a cutter",
    "start": "992399",
    "end": "998480"
  },
  {
    "text": "container running under docker which tries to which can create the device file for the guesthouse but",
    "start": "998480",
    "end": "1004480"
  },
  {
    "text": "it can mount it so it seems like we're in a bit of a problem even though we should have more access to the devices other",
    "start": "1004480",
    "end": "1011680"
  },
  {
    "text": "restrictions are still stopping us but there is actually another way to access devices in linux and that's by",
    "start": "1011680",
    "end": "1019920"
  },
  {
    "text": "directly reading and writing to the device file so you don't even need to mount them and why why is that useful for example",
    "start": "1019920",
    "end": "1027360"
  },
  {
    "text": "if the hard disk has a corrupted file system and you are not able to mount it correctly you might need some direct access to the",
    "start": "1027360",
    "end": "1033600"
  },
  {
    "text": "device to try to fix things so there are actually a build tools like debug fs which you we can use",
    "start": "1033600",
    "end": "1041038"
  },
  {
    "text": "inside the container to directly interact with the hard disk without needing to mount it and you can see in the example there",
    "start": "1041039",
    "end": "1047360"
  },
  {
    "text": "that we can see the files on the hard disk and we have a great indication that that's really the guest style disc",
    "start": "1047360",
    "end": "1052720"
  },
  {
    "text": "because when when we inspect the binaries in it we can see the cutter agent which we expect to run to be present on the guest",
    "start": "1052720",
    "end": "1060400"
  },
  {
    "text": "and it's not only reading access to the how this is only also writing access so because we don't have",
    "start": "1060400",
    "end": "1065679"
  },
  {
    "text": "devices group we can actually modify the guest hard disk from within the container so does that mean we broke out can we",
    "start": "1065679",
    "end": "1073440"
  },
  {
    "text": "now just easily execute code on the guest well it turns out that it's not so easy",
    "start": "1073440",
    "end": "1078480"
  },
  {
    "text": "and there are two mechanisms in a way the page question that the entry cache and because of those changes that we",
    "start": "1078480",
    "end": "1085039"
  },
  {
    "text": "make at the device level may not really be apparent to a processor running on the guest",
    "start": "1085039",
    "end": "1090720"
  },
  {
    "text": "so why is that in linux when you when a process interacts with a file",
    "start": "1090720",
    "end": "1096559"
  },
  {
    "text": "linux will read it by reading it executing it or whatever linux will read that file from the hard",
    "start": "1096559",
    "end": "1102559"
  },
  {
    "text": "disk right but that's an expensive operation so it will also keep a cache of that file content in the page",
    "start": "1102559",
    "end": "1109919"
  },
  {
    "text": "cache so the next time a process access that file then linux doesn't have to go all the way to the hard disk",
    "start": "1109919",
    "end": "1115840"
  },
  {
    "text": "and can simply access the page cache that's great for performance but it's pretty bad for us",
    "start": "1115840",
    "end": "1120960"
  },
  {
    "text": "because we're in the container and we are directly writing to the hard disk so if we're in the container for example",
    "start": "1120960",
    "end": "1126720"
  },
  {
    "text": "and we modify a sh on the hard disk and then some process on the guest tries to",
    "start": "1126720",
    "end": "1132559"
  },
  {
    "text": "access a sh if a sage is already in the page cache and that process will see the",
    "start": "1132559",
    "end": "1137919"
  },
  {
    "text": "original version of the sh from the page cache and not our malicious version",
    "start": "1137919",
    "end": "1143200"
  },
  {
    "text": "on the hard disk and that's not good for us if we want to gain code execution on the guest to make things work the guest is pretty",
    "start": "1143200",
    "end": "1150400"
  },
  {
    "text": "static and besides the cutter agent and systemd nothing really else really runs on it",
    "start": "1150400",
    "end": "1155760"
  },
  {
    "text": "and it doesn't really invoke and interacts with files so it's even harder for us to gain code execution",
    "start": "1155760",
    "end": "1161679"
  },
  {
    "text": "so how do you deal with that problem so as i've said the guest is static so and we can't expect it to just run in",
    "start": "1161679",
    "end": "1169039"
  },
  {
    "text": "a new executable so we need to replace an already running executable so that's either the cutter agent or",
    "start": "1169039",
    "end": "1174559"
  },
  {
    "text": "systemd but those as i've said are already loaded to the page cache so in order for us",
    "start": "1174559",
    "end": "1181280"
  },
  {
    "text": "to you know in order for the uh for modification that we make to the",
    "start": "1181280",
    "end": "1186400"
  },
  {
    "text": "hard disk to actually be apparent to guest processes we need to some way to force the guest kernel",
    "start": "1186400",
    "end": "1192160"
  },
  {
    "text": "to free the page cache and how can we do it well the page cache uses memory that is",
    "start": "1192160",
    "end": "1198400"
  },
  {
    "text": "currently unused but if a process wants that memory the kernel will give the process that memory",
    "start": "1198400",
    "end": "1204080"
  },
  {
    "text": "because it will say okay later on i can just read it again from the hard disk and and right now that that memory is",
    "start": "1204080",
    "end": "1212240"
  },
  {
    "text": "used is necessary by process so when the container can allocate small chunks of memory to a slowly chip",
    "start": "1212240",
    "end": "1219280"
  },
  {
    "text": "away at the the page cache and the files in it until we can actually successfully clear cutter agent from the",
    "start": "1219280",
    "end": "1226080"
  },
  {
    "text": "page page cache and now when something access the the cut agent binary",
    "start": "1226080",
    "end": "1231120"
  },
  {
    "text": "it will must go to the hard disk so if it's still and not completely clear i'll try to",
    "start": "1231120",
    "end": "1236559"
  },
  {
    "text": "explain it by showing the how the attack will work so the attack the scenario is that we",
    "start": "1236559",
    "end": "1242559"
  },
  {
    "text": "are in a malicious container right and we want to gain code execution on the guest so what we do we first override the",
    "start": "1242559",
    "end": "1249679"
  },
  {
    "text": "cutter agent binary on the hard disk but nothing really really happens because the cut agent process the memory",
    "start": "1249679",
    "end": "1256159"
  },
  {
    "text": "is mapped to the version in the page cache which isn't malicious so in order for us version to be propagated to the guest to",
    "start": "1256159",
    "end": "1263440"
  },
  {
    "text": "the process we need we mel we allocate small chunks of memory in order to clear the cutter agent from",
    "start": "1263440",
    "end": "1269120"
  },
  {
    "text": "the page cache and now when the execution passes back to the cataloging process the kernel realizes",
    "start": "1269120",
    "end": "1275280"
  },
  {
    "text": "okay wait i need to get the version i need to get cutter agent from the hard disk again",
    "start": "1275280",
    "end": "1280480"
  },
  {
    "text": "and now when it does it it fetches the malicious version that we've put in we've put in the hard disk so and now",
    "start": "1280480",
    "end": "1287600"
  },
  {
    "text": "the cutter agent process maps to our malicious version and it runs the code that we wrote to",
    "start": "1287600",
    "end": "1293520"
  },
  {
    "text": "the guest hard disk so it seems like we can get a guest code execution but the truth is it's it's not really",
    "start": "1293520",
    "end": "1301039"
  },
  {
    "text": "that easy because replacing a process that re replacing the binary",
    "start": "1301039",
    "end": "1306159"
  },
  {
    "text": "that the process is running while it is running it's quite tricky because you can",
    "start": "1306159",
    "end": "1311760"
  },
  {
    "text": "imagine that uh the pro the cutter agent process is now running a specific op code in a specific function and now when we",
    "start": "1311760",
    "end": "1319280"
  },
  {
    "text": "replace the executable that it is running we don't know when that switch will happen so we don't",
    "start": "1319280",
    "end": "1324320"
  },
  {
    "text": "know where in the new binary where it will end which op code it will now execute in the new binary",
    "start": "1324320",
    "end": "1330480"
  },
  {
    "text": "so it's really hard to get the stable code execution using that and the most likely thing that will",
    "start": "1330480",
    "end": "1336080"
  },
  {
    "text": "happen is that the cut agent process will just crash so that's not good for us we want stable",
    "start": "1336080",
    "end": "1341280"
  },
  {
    "text": "code execution so instead of the of the cat agent process crushing being a bug over",
    "start": "1341280",
    "end": "1347280"
  },
  {
    "text": "exploit we actually make it a feature of over exploit and we intentionally crash the cart agent binary so how do we do it",
    "start": "1347280",
    "end": "1354400"
  },
  {
    "text": "we intentionally override the catagen binary on hardisk with garbage data but we also override another binary",
    "start": "1354400",
    "end": "1361919"
  },
  {
    "text": "system the shutdown with the actual malicious code that we want to run on the guest and then we follow the same procedure as",
    "start": "1361919",
    "end": "1367919"
  },
  {
    "text": "before we allocate small chunks of memory to clear the cut agent from the page cache and now when execution passes",
    "start": "1367919",
    "end": "1374000"
  },
  {
    "text": "back to the cart asian process on the guest it the kernel must read the garbage cut agent version from the",
    "start": "1374000",
    "end": "1381520"
  },
  {
    "text": "disk from the hard disk and the cataloging process now maps to the version its memory now maps to the version",
    "start": "1381520",
    "end": "1388240"
  },
  {
    "text": "and it of course crashes right because it now maps to garbage data but now once the cutter agent process",
    "start": "1388240",
    "end": "1394720"
  },
  {
    "text": "crashes a system this shutdown sequence is in is started which eventually as you might have",
    "start": "1394720",
    "end": "1400880"
  },
  {
    "text": "guessed calls the shutdown binary now the shadow binary was never executed before it is only",
    "start": "1400880",
    "end": "1407360"
  },
  {
    "text": "accessed when you want to shut down the machine and therefore it is not in the page cache and will need to be",
    "start": "1407360",
    "end": "1413200"
  },
  {
    "text": "directly read from the disk so now the malicious version of the",
    "start": "1413200",
    "end": "1419120"
  },
  {
    "text": "shutdown binary that we've put in the hard disk will start executing on the guest and it starts executing from the",
    "start": "1419120",
    "end": "1425919"
  },
  {
    "text": "like a normal process and not a switch in the middle of execution so that we can actually get stable code",
    "start": "1425919",
    "end": "1432000"
  },
  {
    "text": "execution by doing that so let's see of them of how does that work in the demo the malicious",
    "start": "1432000",
    "end": "1438640"
  },
  {
    "text": "the malicious shutdown binary will simply create a file in the shared directory which is supposed to be only accessible",
    "start": "1438640",
    "end": "1444480"
  },
  {
    "text": "from the guest and not from inside the container and just and we it just creates that file so we can",
    "start": "1444480",
    "end": "1450240"
  },
  {
    "text": "see that the the exploit works so let's see the export in action",
    "start": "1450240",
    "end": "1458720"
  },
  {
    "text": "so i'm going to show you the code of the shutdown binary that i'm going to write run on the guest and the code is quite",
    "start": "1458720",
    "end": "1465520"
  },
  {
    "text": "simple as i said it just creates a a binary in the shared a file in the shared directory called guess is now",
    "start": "1465520",
    "end": "1472000"
  },
  {
    "text": "malicious so it's quite simple and then it slips so we can see inspect the shared directory",
    "start": "1472000",
    "end": "1477520"
  },
  {
    "text": "so we are now running the exploit with docker under kata and the thing first thing the exploit does is tell us",
    "start": "1477520",
    "end": "1483279"
  },
  {
    "text": "this is my container id so that's where the share directory on the host side should be and we can see that the shared directory",
    "start": "1483279",
    "end": "1489679"
  },
  {
    "text": "has the normal contents everything is okay but now when the container continues it",
    "start": "1489679",
    "end": "1495760"
  },
  {
    "text": "gets create a device file for the guest hard disk and it replaces the shutdown binary with the",
    "start": "1495760",
    "end": "1500799"
  },
  {
    "text": "code that i've showed you and also swaps the kata agent binary on the guest hard disk and with garbage data nothing really",
    "start": "1500799",
    "end": "1507600"
  },
  {
    "text": "happens now right because the qatar agent is still in the page cache but when we allocate",
    "start": "1507600",
    "end": "1513600"
  },
  {
    "text": "enough memory we will actually crash the cutter agent causing our shutdown process to start running and we can now",
    "start": "1513600",
    "end": "1520000"
  },
  {
    "text": "see that it indeed it ran on the guest and it created the file that we expected",
    "start": "1520000",
    "end": "1525919"
  },
  {
    "text": "so that's great and we got a way to break out of the",
    "start": "1525919",
    "end": "1532240"
  },
  {
    "text": "container and execute code on the guest a breakout technique that exploits a direct device access that exploits the",
    "start": "1532240",
    "end": "1538559"
  },
  {
    "text": "lack of c groups and it really shows you if you mess around and modify containers configuration",
    "start": "1538559",
    "end": "1544000"
  },
  {
    "text": "you better be only adding restrictions you you you you don't really know what other effects",
    "start": "1544000",
    "end": "1550240"
  },
  {
    "text": "removing that might happen if you remove a certain restriction researchers might find a way to exploit",
    "start": "1550240",
    "end": "1556799"
  },
  {
    "text": "that to break out now the container does need the make note capability in order to",
    "start": "1556799",
    "end": "1562720"
  },
  {
    "text": "exploit this issue but that's default in most places and of course this issue received the cv so the next",
    "start": "1562720",
    "end": "1569279"
  },
  {
    "text": "thing that we want to do is to escape the virtual machine and that will actually be a bit easier",
    "start": "1569279",
    "end": "1574320"
  },
  {
    "text": "so let's talk about the attack surface of the virtual machine so first of all the cutter runtime is a",
    "start": "1574320",
    "end": "1580480"
  },
  {
    "text": "process running on the host and it passes messages from the qatar agent so if there's a vulnerability in the qatar run time",
    "start": "1580480",
    "end": "1587200"
  },
  {
    "text": "a malicious cutter agent might be able to exploit that and gain code execution but qatar runtime is written in golang",
    "start": "1587200",
    "end": "1592880"
  },
  {
    "text": "which is memory safe and none of those messages really are that interesting so that's really not relevant another thing",
    "start": "1592880",
    "end": "1600480"
  },
  {
    "text": "that could happen is the issue with the vulnerability in the virtual machine monitor right which is actually the boundary between the",
    "start": "1600480",
    "end": "1606000"
  },
  {
    "text": "a guest virtual machine and the host but we'll uh not talk about that for for for now",
    "start": "1606000",
    "end": "1612880"
  },
  {
    "text": "what i really want to talk about is the shared directory between the host and the guest because it's quite an interesting of an attack surface",
    "start": "1612880",
    "end": "1619360"
  },
  {
    "text": "and the cutter runtime on the whole side operates on the files in the shared directory",
    "start": "1619360",
    "end": "1624480"
  },
  {
    "text": "but the guest can control those files just as much as the host right it's a shared directory",
    "start": "1624480",
    "end": "1629600"
  },
  {
    "text": "meaning that we're in the get in the get in in a malicious guest we can manipulate the file in the shared",
    "start": "1629600",
    "end": "1635679"
  },
  {
    "text": "directory in order to maybe affect the catalog time running on the hostess loot to do some things that he doesn't expect",
    "start": "1635679",
    "end": "1642720"
  },
  {
    "text": "and one of the most interesting things that's done with the shared directory is that it is used to deliver the image",
    "start": "1642720",
    "end": "1648799"
  },
  {
    "text": "to the guest so let's see how does that work so when you're when the guest virtual",
    "start": "1648799",
    "end": "1654720"
  },
  {
    "text": "machine is started cataran time bind mounts the container image to the shell directory then the container starts",
    "start": "1654720",
    "end": "1660640"
  },
  {
    "text": "running inside the guest at some point it terminates inside the guest and then the cutter runtime unmounts the",
    "start": "1660640",
    "end": "1665919"
  },
  {
    "text": "container image from the shared directory so that seems quite reasonable right but the problem here is that both mount",
    "start": "1665919",
    "end": "1672880"
  },
  {
    "text": "and unmount operations follow symlinks so in the guest meaning that a malicious guest could",
    "start": "1672880",
    "end": "1678880"
  },
  {
    "text": "place sim links inside the shared directory and cause the qatar run time to target other things on",
    "start": "1678880",
    "end": "1685279"
  },
  {
    "text": "the host that are not in the show directory so it's really easier to see it",
    "start": "1685279",
    "end": "1690799"
  },
  {
    "text": "in action so let's start actually with the unmount redirection because that's easier to understand so that's how the attack looks we are in",
    "start": "1690799",
    "end": "1697919"
  },
  {
    "text": "the malicious container and we somehow broken up to the guest maybe using the technique that i've showed earlier and now from inside the",
    "start": "1697919",
    "end": "1704480"
  },
  {
    "text": "guest we can create a sim link when we where we know in the shared way where we know the qatar run time",
    "start": "1704480",
    "end": "1711440"
  },
  {
    "text": "will unmount we'll try to unmount and then we we can actually kill the",
    "start": "1711440",
    "end": "1716799"
  },
  {
    "text": "container in order to trigger the cataract and to unmount",
    "start": "1716799",
    "end": "1721919"
  },
  {
    "text": "that path in the shell directory and now when it does that operation it actually is redirected",
    "start": "1721919",
    "end": "1728640"
  },
  {
    "text": "to a target of the guest choosing and that's true a really easy way to create a denial of service on the host because",
    "start": "1728640",
    "end": "1735279"
  },
  {
    "text": "of the because of the how the qatar run time does the unmount operations uh if we tell it if we create a siblings",
    "start": "1735279",
    "end": "1742000"
  },
  {
    "text": "that points to the root directory it will actually unmount all mount points underneath the",
    "start": "1742000",
    "end": "1747840"
  },
  {
    "text": "directory making the host very unusable and not able to run any container",
    "start": "1747840",
    "end": "1754398"
  },
  {
    "text": "so let's see a demo for this attack",
    "start": "1754720",
    "end": "1758480"
  },
  {
    "text": "so first we will inspect the mount points on the hose see that everything is fine and then we will run a container",
    "start": "1760720",
    "end": "1767120"
  },
  {
    "text": "that exploits both the container to gas breakout and then the unmount",
    "start": "1767120",
    "end": "1772480"
  },
  {
    "text": "redirection vulnerability and it will target the root directory in its attack in its attack",
    "start": "1772480",
    "end": "1779039"
  },
  {
    "text": "and once the container is taken down we can see that those mount points don't contain",
    "start": "1779039",
    "end": "1784720"
  },
  {
    "text": "anything anymore on the host and if we try to do other things like run a container you can see that the host is really unusable and you can't",
    "start": "1784720",
    "end": "1791600"
  },
  {
    "text": "really use it uh to do anything so that's in host denial of service",
    "start": "1791600",
    "end": "1796960"
  },
  {
    "text": "and that's actually a a very nice moment for us because we got the first effect from the",
    "start": "1796960",
    "end": "1802480"
  },
  {
    "text": "container all the way up to the host and the first sort of a sandbox breakout",
    "start": "1802480",
    "end": "1807919"
  },
  {
    "text": "and a denial of services is nice right but we want to gain code execution so let's look at the mount redirection",
    "start": "1807919",
    "end": "1814399"
  },
  {
    "text": "you can also redirect not only the unmount operation of the image but also the mount operation of",
    "start": "1814399",
    "end": "1819600"
  },
  {
    "text": "the image and that's more interesting because the image as we as i've said kata is used to",
    "start": "1819600",
    "end": "1824640"
  },
  {
    "text": "run untrusted images so the image possibly is malicious so let's see how that attack will look like",
    "start": "1824640",
    "end": "1830880"
  },
  {
    "text": "so we are assuming that the kata agent now on the gas is malicious so the catalan time will tell it we're",
    "start": "1830880",
    "end": "1836799"
  },
  {
    "text": "about to create the sandbox that's the sandbox id and now using that message the qatar engine can know",
    "start": "1836799",
    "end": "1842720"
  },
  {
    "text": "where in the shell directory the cataran time is about to bind mount a the container image and it can create",
    "start": "1842720",
    "end": "1848799"
  },
  {
    "text": "a sim link at that path that will actually be followed by the catalog time when it tries to bind the container",
    "start": "1848799",
    "end": "1855279"
  },
  {
    "text": "image and now that untrusted possibly malicious container image can be will be mounted",
    "start": "1855279",
    "end": "1860720"
  },
  {
    "text": "over a path on the host that the k that the guest decides on so and there's those are the several",
    "start": "1860720",
    "end": "1867840"
  },
  {
    "text": "very interesting paths that the guests could they choose like slash bin or slash lib which will allow a pretty easy",
    "start": "1867840",
    "end": "1875200"
  },
  {
    "text": "code execution on the host but the problem with this attack that is that we assumed that the kata",
    "start": "1875200",
    "end": "1882720"
  },
  {
    "text": "agent is compromising that the guest is malicious even before the container starts running on the guest right because",
    "start": "1882720",
    "end": "1889200"
  },
  {
    "text": "if if it's before the container image is bind mounted to the shell directory then of course",
    "start": "1889200",
    "end": "1894720"
  },
  {
    "text": "the container isn't running on the guest so we actually need we actually need a way to compromise the",
    "start": "1894720",
    "end": "1900960"
  },
  {
    "text": "guest before the container runs and we don't have a way to do that right now right we only have a way to",
    "start": "1900960",
    "end": "1906080"
  },
  {
    "text": "get gain code execution on the guest from the container and that task so in order to do that we",
    "start": "1906080",
    "end": "1912159"
  },
  {
    "text": "look at cloud hypervisor and an issue and vulnerability that i found in how qatar uses it",
    "start": "1912159",
    "end": "1917840"
  },
  {
    "text": "so cloud hypervisor to remind you is one of the free virtual machines monitor virtual machine monitor options",
    "start": "1917840",
    "end": "1923760"
  },
  {
    "text": "of qatar and when i tried the container to guest a breakout on a cutter with cloud",
    "start": "1923760",
    "end": "1929519"
  },
  {
    "text": "hypervisor i noticed that kata stopped broken after that i couldn't run any container and when i inspected the",
    "start": "1929519",
    "end": "1936559"
  },
  {
    "text": "virtual machine image i saw that the kata agent a binary on that on the virtual machine",
    "start": "1936559",
    "end": "1942000"
  },
  {
    "text": "image actually contained garbage data and that's really concerning because that was the garbage data that i wrote",
    "start": "1942000",
    "end": "1947679"
  },
  {
    "text": "to hard disk on the a from the container meaning that",
    "start": "1947679",
    "end": "1952880"
  },
  {
    "text": "from one con from in one guest any changes that we make to the guest hard disk under cloud hypervisor are propagated to",
    "start": "1952880",
    "end": "1960640"
  },
  {
    "text": "the virtual machine image on the host meaning that one guest can control the hard disk of all",
    "start": "1960640",
    "end": "1966799"
  },
  {
    "text": "future guests and because all virtual machine monitors use the same virtual machine image to set up the",
    "start": "1966799",
    "end": "1972799"
  },
  {
    "text": "guest this means that one guest can control every future guest regardless of what",
    "start": "1972799",
    "end": "1978799"
  },
  {
    "text": "virtual machine monitor it uses and that's really bad for multi-tenancy right and beside from being a pretty severe",
    "start": "1978799",
    "end": "1985840"
  },
  {
    "text": "issue by itself that one guest can control of all future guests it's also a way for",
    "start": "1985840",
    "end": "1990880"
  },
  {
    "text": "us uh to gain code execution on the host because we now can exploit the monthly",
    "start": "1990880",
    "end": "1996799"
  },
  {
    "text": "direction right we needed a way to for the guests to be compromised even before the container",
    "start": "1996799",
    "end": "2001919"
  },
  {
    "text": "runs but if we have a way to compromise the a the virtual machine image that means",
    "start": "2001919",
    "end": "2009440"
  },
  {
    "text": "that the guest can be malicious from the moment it boots right so we can it can actually",
    "start": "2009440",
    "end": "2014480"
  },
  {
    "text": "create the malicious symlink before the container is started so if it's still not that clear let's see",
    "start": "2014480",
    "end": "2021120"
  },
  {
    "text": "how that full attack will look like so we are now seeing a full container to host code execution it will require the",
    "start": "2021120",
    "end": "2027600"
  },
  {
    "text": "victim to run our container twice on their system but that's a pretty",
    "start": "2027600",
    "end": "2032880"
  },
  {
    "text": "acceptable expect that's pretty uh a pretty normal uh requirement because",
    "start": "2032880",
    "end": "2039840"
  },
  {
    "text": "most people an automated system if the first container crashes it will just try to run it again",
    "start": "2039840",
    "end": "2045120"
  },
  {
    "text": "so let's see how it works the first the first time the malicious container is executed is executed under cloud",
    "start": "2045120",
    "end": "2052079"
  },
  {
    "text": "hypervisor and it uses the direct device access vulnerability that we found",
    "start": "2052079",
    "end": "2057440"
  },
  {
    "text": "to change override the cart agent binary on the hard disk with a malicious version now because we are running undercloud",
    "start": "2057440",
    "end": "2063040"
  },
  {
    "text": "hypervisor that malicious version is going to be propagated and committed to the virtual machine image meaning that the next time",
    "start": "2063040",
    "end": "2071919"
  },
  {
    "text": "a guest will be run it will run with our malicious qatar agent right from the",
    "start": "2071919",
    "end": "2078240"
  },
  {
    "text": "moment it boots so now that malicious cutter agent on the second container run can exploit the mount redirection issue",
    "start": "2078240",
    "end": "2085040"
  },
  {
    "text": "create the sim link and redirect our malicious image to whenever on the host we want",
    "start": "2085040",
    "end": "2091280"
  },
  {
    "text": "to gain code execution on the host so let's see a demo for that attack",
    "start": "2091280",
    "end": "2097838"
  },
  {
    "text": "so we will be trying to mount the container image over slash bin on the host and we can see that slash bin",
    "start": "2101200",
    "end": "2107760"
  },
  {
    "text": "is completely normal right now",
    "start": "2107760",
    "end": "2111359"
  },
  {
    "text": "so we'll run the container under kata with cloud hypervisor and the first container",
    "start": "2114240",
    "end": "2119440"
  },
  {
    "text": "will replace the qatar agent uh the kite agent binary on the virtual machine image exploiting a the",
    "start": "2119440",
    "end": "2126640"
  },
  {
    "text": "vulnerabilities that we discussed and now the next time our malicious a",
    "start": "2126640",
    "end": "2131760"
  },
  {
    "text": "container image is executed it will be running under a with under a malicious guest right and that",
    "start": "2131760",
    "end": "2138079"
  },
  {
    "text": "malicious guest could exploit the redirection vulnerability that we found to redirect the image",
    "start": "2138079",
    "end": "2143520"
  },
  {
    "text": "over bin and now if we want to if we check out what hap what's happening on bin in the content in the host we can",
    "start": "2143520",
    "end": "2150480"
  },
  {
    "text": "see that it has a completely different files and that's actually the files of our malicious container file system and",
    "start": "2150480",
    "end": "2156720"
  },
  {
    "text": "if we now try to execute something from a inside the fro a binary that",
    "start": "2156720",
    "end": "2162640"
  },
  {
    "text": "is inside min we can now see that the malicious version of that binary is running on the host and we actually got code execution from",
    "start": "2162640",
    "end": "2169040"
  },
  {
    "text": "the container all the way up to the host so that's great",
    "start": "2169040",
    "end": "2174079"
  },
  {
    "text": "right we we set up what we wanted to accomplish in the start we got code execution on the host from inside the container",
    "start": "2174079",
    "end": "2181760"
  },
  {
    "text": "and really the underlying issues here uh show how the the share directory is really a big",
    "start": "2181760",
    "end": "2186960"
  },
  {
    "text": "attack surface for virtual machines right we saw two issues with host app with a host applications",
    "start": "2186960",
    "end": "2192640"
  },
  {
    "text": "that interact with the shared directory right the mountain and mount redirection issue",
    "start": "2192640",
    "end": "2198400"
  },
  {
    "text": "that we found that we found that could be exploited and that could be used to trick the",
    "start": "2198400",
    "end": "2204400"
  },
  {
    "text": "qatar run time so there could be issues with the host application accessing their share directory",
    "start": "2204400",
    "end": "2210000"
  },
  {
    "text": "but there could also be issue with the mechanism itself of the shared directory normally there is some",
    "start": "2210000",
    "end": "2215040"
  },
  {
    "text": "process on the host that manages the share directory and you can actually find the issues with that and i found one of those",
    "start": "2215040",
    "end": "2221440"
  },
  {
    "text": "issues that could allow in qatar to launch a denial of service attack but we won't get into that i just wanted to to",
    "start": "2221440",
    "end": "2227760"
  },
  {
    "text": "let you know that the mechanism itself could also be abused so what attacks that we saw today we saw a",
    "start": "2227760",
    "end": "2233839"
  },
  {
    "text": "container to guest a breakout using direct device access and exploiting the lack of a device group using a breakout new",
    "start": "2233839",
    "end": "2241520"
  },
  {
    "text": "breakout technique and we also saw a guest to host unmount operation right which we could have used",
    "start": "2241520",
    "end": "2247920"
  },
  {
    "text": "to launch a denial of service attack on the on the host we also saw a way for one guest",
    "start": "2247920",
    "end": "2253040"
  },
  {
    "text": "to compromise future guests under cloud hypervisor and we also found a way for one guest to gain code execution",
    "start": "2253040",
    "end": "2259359"
  },
  {
    "text": "on the host by redirecting the malicious image mount and i also briefly discussed a a denial",
    "start": "2259359",
    "end": "2265920"
  },
  {
    "text": "of service issue that could be found in the shared directory mechanism itself now all of those attacks could be",
    "start": "2265920",
    "end": "2271440"
  },
  {
    "text": "chained together all of those vulnerabilities can be chained together to perform a number of attacks",
    "start": "2271440",
    "end": "2277200"
  },
  {
    "text": "on the host and i showed some of them today all of those issues i've disclosed them",
    "start": "2277200",
    "end": "2283599"
  },
  {
    "text": "to cutter containers maintainers they of course they were fixed and you can read more at this",
    "start": "2283599",
    "end": "2288640"
  },
  {
    "text": "directory and aside from seeing like a cool exploit chain and sandbox sandbox",
    "start": "2288640",
    "end": "2296800"
  },
  {
    "text": "breakout what can we really learn from this research so first of all i want i hope you now understand it uh more",
    "start": "2296800",
    "end": "2303440"
  },
  {
    "text": "about container security and understand that containers are only as secure as their configuration right uh and a",
    "start": "2303440",
    "end": "2310320"
  },
  {
    "text": "simple way to improve the their configuration and security is to drop unused privileges um",
    "start": "2310320",
    "end": "2317520"
  },
  {
    "text": "the breakout that we saw today uh uh relied on cup make note right and it's a",
    "start": "2317520",
    "end": "2324000"
  },
  {
    "text": "great example for that because a cup make note most containers have that capability",
    "start": "2324000",
    "end": "2329119"
  },
  {
    "text": "but almost none of them actually need it right an ngx container doesn't need to create device files and interact with",
    "start": "2329119",
    "end": "2335119"
  },
  {
    "text": "them in any way so today we the point is that today we saw a breakout in qatar container that relies on the magnet capability but",
    "start": "2335119",
    "end": "2342560"
  },
  {
    "text": "tomorrow it's another breakout right in a different container runtime that relies on another capability that your",
    "start": "2342560",
    "end": "2348800"
  },
  {
    "text": "containers have but they don't use so the point is you really should",
    "start": "2348800",
    "end": "2354240"
  },
  {
    "text": "remove capabilities and privileges from the container which it doesn't use the second thing you you need to do is",
    "start": "2354240",
    "end": "2360720"
  },
  {
    "text": "to beside further dropping capabilities is to",
    "start": "2360720",
    "end": "2366160"
  },
  {
    "text": "further restrict the container using some best practices and history shows that all of those",
    "start": "2366160",
    "end": "2372000"
  },
  {
    "text": "vulnerabilities that i've talked all of the types of issues that i've talked about in the container escopology part",
    "start": "2372000",
    "end": "2378480"
  },
  {
    "text": "most of them or a lot of them could have been mitigated by simply applying best practices like username spaces or",
    "start": "2378480",
    "end": "2384400"
  },
  {
    "text": "running the container as an as the no not user and that those type of things should really be",
    "start": "2384400",
    "end": "2390320"
  },
  {
    "text": "the number one thing you do if you're trying to improve the security of your containers but we also saw a we also talked about",
    "start": "2390320",
    "end": "2398160"
  },
  {
    "text": "sandboxes today and sandboxes do limit the attack surface right but i want to clarify there aren't",
    "start": "2398160",
    "end": "2404560"
  },
  {
    "text": "magical solutions that an attackers would find way to break out so the point here is",
    "start": "2404560",
    "end": "2410400"
  },
  {
    "text": "don't bet all of your chips on a on one bag right don't only rely on the sandbox",
    "start": "2410400",
    "end": "2417280"
  },
  {
    "text": "you should really be prepared for that sandbox to be broken up",
    "start": "2417280",
    "end": "2423200"
  },
  {
    "text": "broken out of it should be an enhancement and not a replacement of your coin security features and the",
    "start": "2423200",
    "end": "2429200"
  },
  {
    "text": "final thing that if you do decide to use a sandbox you should get you should really get the full potential out of it and enable",
    "start": "2429200",
    "end": "2436000"
  },
  {
    "text": "its security features cutter for example has some security features that aren't enabled by default",
    "start": "2436000",
    "end": "2441200"
  },
  {
    "text": "that could have been useful uh to mitigate one of the attacks that we saw here today so that's really uh all i have for you",
    "start": "2441200",
    "end": "2448800"
  },
  {
    "text": "today i hope that you enjoyed it that you learn about the container security a bit and i'll be happy to take any",
    "start": "2448800",
    "end": "2454119"
  },
  {
    "text": "questions",
    "start": "2454119",
    "end": "2457119"
  }
]