[
  {
    "text": "hello everyone my name is ji Kim um",
    "start": "2600",
    "end": "5279"
  },
  {
    "text": "today I'm going to talk about our",
    "start": "5279",
    "end": "7160"
  },
  {
    "text": "research bypassing arms memory tagging",
    "start": "7160",
    "end": "9599"
  },
  {
    "text": "extension with a side chel",
    "start": "9599",
    "end": "12559"
  },
  {
    "text": "attack first I am a PhD student at Soul",
    "start": "12559",
    "end": "15679"
  },
  {
    "text": "National University and my research",
    "start": "15679",
    "end": "17920"
  },
  {
    "text": "interest include General Software System",
    "start": "17920",
    "end": "20760"
  },
  {
    "text": "security focusing on finding bgs and",
    "start": "20760",
    "end": "23320"
  },
  {
    "text": "developing",
    "start": "23320",
    "end": "25039"
  },
  {
    "text": "mitigations and this research was",
    "start": "25039",
    "end": "27039"
  },
  {
    "text": "conducted in collaboration with jimon",
    "start": "27039",
    "end": "29279"
  },
  {
    "text": "Park and has came from Samsung research",
    "start": "29279",
    "end": "31679"
  },
  {
    "text": "and people from Soul National University",
    "start": "31679",
    "end": "34079"
  },
  {
    "text": "including my advisor bong Le and my",
    "start": "34079",
    "end": "36600"
  },
  {
    "text": "colleagues here R Jong Chong and Yong",
    "start": "36600",
    "end": "39879"
  },
  {
    "text": "juli in this presentation I'll first",
    "start": "39879",
    "end": "42520"
  },
  {
    "text": "introduce the new arms memory taging",
    "start": "42520",
    "end": "44680"
  },
  {
    "text": "extension and and how it works and then",
    "start": "44680",
    "end": "47480"
  },
  {
    "text": "I'll explain the empty Tech leage site",
    "start": "47480",
    "end": "49440"
  },
  {
    "text": "Channel we is covered from the Google",
    "start": "49440",
    "end": "51199"
  },
  {
    "text": "pixel devices and finally I'll present",
    "start": "51199",
    "end": "54280"
  },
  {
    "text": "the real world empty bypass of tag in",
    "start": "54280",
    "end": "57120"
  },
  {
    "text": "Google",
    "start": "57120",
    "end": "58559"
  },
  {
    "text": "Chrome by the way we've disclosed our",
    "start": "58559",
    "end": "61039"
  },
  {
    "text": "paper before and it was introduced by",
    "start": "61039",
    "end": "63480"
  },
  {
    "text": "lowlevel learning and the prime time on",
    "start": "63480",
    "end": "65640"
  },
  {
    "text": "YouTube and their videos are awesome so",
    "start": "65640",
    "end": "68119"
  },
  {
    "text": "please check them",
    "start": "68119",
    "end": "70479"
  },
  {
    "text": "out um let me begin with",
    "start": "70479",
    "end": "73600"
  },
  {
    "text": "rmte memory corruption attacks have been",
    "start": "73600",
    "end": "76200"
  },
  {
    "text": "the most common and severe threat in",
    "start": "76200",
    "end": "78960"
  },
  {
    "text": "software systems in 2014 heart bed",
    "start": "78960",
    "end": "82439"
  },
  {
    "text": "affected millions of servers by",
    "start": "82439",
    "end": "84280"
  },
  {
    "text": "exporting uh buffer over overflow",
    "start": "84280",
    "end": "87520"
  },
  {
    "text": "vulnerability last month regression was",
    "start": "87520",
    "end": "90360"
  },
  {
    "text": "discovered which can compromise any SSH",
    "start": "90360",
    "end": "94119"
  },
  {
    "text": "server B binder and blastfest also",
    "start": "94119",
    "end": "96880"
  },
  {
    "text": "enable zero click attack on Android iOS",
    "start": "96880",
    "end": "99759"
  },
  {
    "text": "devices so what is memory",
    "start": "99759",
    "end": "103719"
  },
  {
    "text": "corruption normally a program accesses",
    "start": "103719",
    "end": "106600"
  },
  {
    "text": "memory objects through pointers and if",
    "start": "106600",
    "end": "109040"
  },
  {
    "text": "the pointer points to an object that is",
    "start": "109040",
    "end": "110840"
  },
  {
    "text": "intended to point to the memory access",
    "start": "110840",
    "end": "113280"
  },
  {
    "text": "is",
    "start": "113280",
    "end": "114520"
  },
  {
    "text": "valid however if the pointer points to",
    "start": "114520",
    "end": "116960"
  },
  {
    "text": "an outbound memory region the access is",
    "start": "116960",
    "end": "121320"
  },
  {
    "text": "invalid or if the object is freed and",
    "start": "121320",
    "end": "124200"
  },
  {
    "text": "the pointer is to reference after that",
    "start": "124200",
    "end": "126479"
  },
  {
    "text": "the access is also",
    "start": "126479",
    "end": "128959"
  },
  {
    "text": "invalid so since the early days of",
    "start": "128959",
    "end": "131480"
  },
  {
    "text": "buffer overflows a teers have developed",
    "start": "131480",
    "end": "134239"
  },
  {
    "text": "sophisticated techniques like return",
    "start": "134239",
    "end": "136560"
  },
  {
    "text": "oriented programming and in response",
    "start": "136560",
    "end": "139040"
  },
  {
    "text": "defense mechanisms like stack canaries",
    "start": "139040",
    "end": "141480"
  },
  {
    "text": "aslr and CFI have been developed and in",
    "start": "141480",
    "end": "145280"
  },
  {
    "text": "recent years Hardware based defenses",
    "start": "145280",
    "end": "147640"
  },
  {
    "text": "like Intel mpk and arm pointer ation has",
    "start": "147640",
    "end": "150640"
  },
  {
    "text": "been introduced and last year arm",
    "start": "150640",
    "end": "153160"
  },
  {
    "text": "introduced memory tagging extensions",
    "start": "153160",
    "end": "155519"
  },
  {
    "text": "so-called",
    "start": "155519",
    "end": "157560"
  },
  {
    "text": "mte and Google pixel 8 and 8 Pro are the",
    "start": "157560",
    "end": "161120"
  },
  {
    "text": "first mte enabled devices mte has been a",
    "start": "161120",
    "end": "164560"
  },
  {
    "text": "Hot Topic in the security community and",
    "start": "164560",
    "end": "167480"
  },
  {
    "text": "companies like arm Google Microsoft and",
    "start": "167480",
    "end": "170319"
  },
  {
    "text": "not to mention the the academic security",
    "start": "170319",
    "end": "172959"
  },
  {
    "text": "researchers have been anticipating mte",
    "start": "172959",
    "end": "175599"
  },
  {
    "text": "to be a game changer in the security",
    "start": "175599",
    "end": "177760"
  },
  {
    "text": "field",
    "start": "177760",
    "end": "180680"
  },
  {
    "text": "so why is mte so",
    "start": "180680",
    "end": "182680"
  },
  {
    "text": "special it's because mte is a hardware",
    "start": "182680",
    "end": "185680"
  },
  {
    "text": "based memory ction detection so it is",
    "start": "185680",
    "end": "188280"
  },
  {
    "text": "fast and compatable requiring minimum",
    "start": "188280",
    "end": "191000"
  },
  {
    "text": "effort to",
    "start": "191000",
    "end": "193519"
  },
  {
    "text": "adopt mte basically operat with a lock",
    "start": "193519",
    "end": "197599"
  },
  {
    "text": "and key mechanism ensuring that only a",
    "start": "197599",
    "end": "200519"
  },
  {
    "text": "valid key can open the lock each pointer",
    "start": "200519",
    "end": "204080"
  },
  {
    "text": "contains a key and each memory object",
    "start": "204080",
    "end": "206400"
  },
  {
    "text": "contains a lock and MCE ensures that",
    "start": "206400",
    "end": "209400"
  },
  {
    "text": "only the valid pointer can access the",
    "start": "209400",
    "end": "211599"
  },
  {
    "text": "memory object with the matching Key and",
    "start": "211599",
    "end": "214040"
  },
  {
    "text": "Lock and prevent other invalid memory",
    "start": "214040",
    "end": "217360"
  },
  {
    "text": "accesses and to achieve this mte",
    "start": "217360",
    "end": "220159"
  },
  {
    "text": "introduces memory",
    "start": "220159",
    "end": "222599"
  },
  {
    "text": "tagging for memory tags a dedicated",
    "start": "222599",
    "end": "225519"
  },
  {
    "text": "memory region stores a 4bit tag for each",
    "start": "225519",
    "end": "229040"
  },
  {
    "text": "16 by",
    "start": "229040",
    "end": "230760"
  },
  {
    "text": "data and a pointer stores the tag in the",
    "start": "230760",
    "end": "233959"
  },
  {
    "text": "inage upper onus bits this is possible",
    "start": "233959",
    "end": "237319"
  },
  {
    "text": "because the a space are around usually",
    "start": "237319",
    "end": "240360"
  },
  {
    "text": "around 48 bits and the top bits in The",
    "start": "240360",
    "end": "243200"
  },
  {
    "text": "64bit Pointer are unused so arm uses",
    "start": "243200",
    "end": "246519"
  },
  {
    "text": "that space to store the mte",
    "start": "246519",
    "end": "250159"
  },
  {
    "text": "tag an arm introduced new mte",
    "start": "250159",
    "end": "253400"
  },
  {
    "text": "instructions to create a random tag and",
    "start": "253400",
    "end": "256280"
  },
  {
    "text": "load store memory tags so using these",
    "start": "256280",
    "end": "259479"
  },
  {
    "text": "instructions a program can assign a",
    "start": "259479",
    "end": "261479"
  },
  {
    "text": "random tag to each object and the",
    "start": "261479",
    "end": "265880"
  },
  {
    "text": "pointer finally when the program",
    "start": "265880",
    "end": "268160"
  },
  {
    "text": "accesses the object through a a pointer",
    "start": "268160",
    "end": "270720"
  },
  {
    "text": "the Mt Hardware checks the whether the",
    "start": "270720",
    "end": "273120"
  },
  {
    "text": "pointer tag matches with the memory tag",
    "start": "273120",
    "end": "276080"
  },
  {
    "text": "on a valid access the tax match and no",
    "start": "276080",
    "end": "278880"
  },
  {
    "text": "fault is raised on an invalid access the",
    "start": "278880",
    "end": "282000"
  },
  {
    "text": "tax mismatch and the CPU raises a tax",
    "start": "282000",
    "end": "285080"
  },
  {
    "text": "track fault which crashes the",
    "start": "285080",
    "end": "288199"
  },
  {
    "text": "program now to exploit a memory",
    "start": "288199",
    "end": "290639"
  },
  {
    "text": "corruption vulnerability a teer would",
    "start": "290639",
    "end": "292800"
  },
  {
    "text": "need to bypass the",
    "start": "292800",
    "end": "295560"
  },
  {
    "text": "mte how do we bypass mte",
    "start": "295560",
    "end": "299759"
  },
  {
    "text": "one way is to exploit tag Collision",
    "start": "299759",
    "end": "303039"
  },
  {
    "text": "since the tag is only four bit there are",
    "start": "303039",
    "end": "305160"
  },
  {
    "text": "16 possible tags so if the object are",
    "start": "305160",
    "end": "308160"
  },
  {
    "text": "randomly tagged there is one over 16",
    "start": "308160",
    "end": "310520"
  },
  {
    "text": "chance that two different objects have",
    "start": "310520",
    "end": "312680"
  },
  {
    "text": "the same tag and the attacker can wait",
    "start": "312680",
    "end": "315280"
  },
  {
    "text": "until the tax Collide and Trigger the",
    "start": "315280",
    "end": "318120"
  },
  {
    "text": "memory",
    "start": "318120",
    "end": "320240"
  },
  {
    "text": "corruption another way is to corrupt the",
    "start": "320240",
    "end": "323240"
  },
  {
    "text": "pointer tag so if the attor can C up the",
    "start": "323240",
    "end": "326160"
  },
  {
    "text": "entire 64bit pointer the pointer tag can",
    "start": "326160",
    "end": "329280"
  },
  {
    "text": "be set to match the target object tag so",
    "start": "329280",
    "end": "332960"
  },
  {
    "text": "it can bypass the",
    "start": "332960",
    "end": "335800"
  },
  {
    "text": "mte here the biggest challenge is that",
    "start": "335960",
    "end": "338800"
  },
  {
    "text": "the memory tag is randomly created at",
    "start": "338800",
    "end": "341240"
  },
  {
    "text": "run time and the attacker does not have",
    "start": "341240",
    "end": "343280"
  },
  {
    "text": "any knowledge of",
    "start": "343280",
    "end": "344680"
  },
  {
    "text": "it and without knowing the memory tag",
    "start": "344680",
    "end": "347800"
  },
  {
    "text": "the memory corruption is not reliable",
    "start": "347800",
    "end": "350240"
  },
  {
    "text": "anymore on ver first attempts the",
    "start": "350240",
    "end": "352759"
  },
  {
    "text": "program would crash 15 times out of 16",
    "start": "352759",
    "end": "356199"
  },
  {
    "text": "so the success rate would be around 6%",
    "start": "356199",
    "end": "358919"
  },
  {
    "text": "which is too low to be",
    "start": "358919",
    "end": "361560"
  },
  {
    "text": "useful so therefore we need um a",
    "start": "361560",
    "end": "364479"
  },
  {
    "text": "successful mte byass um I mean need a",
    "start": "364479",
    "end": "368080"
  },
  {
    "text": "reliable way to leak the tack of any",
    "start": "368080",
    "end": "370400"
  },
  {
    "text": "address to for a successful Mt",
    "start": "370400",
    "end": "374800"
  },
  {
    "text": "bypass to solve this our approach mainly",
    "start": "375479",
    "end": "378599"
  },
  {
    "text": "leverages two common CPU features first",
    "start": "378599",
    "end": "382280"
  },
  {
    "text": "we exploit cash to leak the TA track",
    "start": "382280",
    "end": "384919"
  },
  {
    "text": "results with a cash s Channel second we",
    "start": "384919",
    "end": "388160"
  },
  {
    "text": "exploit speculative exclusion to avoid",
    "start": "388160",
    "end": "391880"
  },
  {
    "text": "crashes so to understand our attack",
    "start": "391880",
    "end": "394240"
  },
  {
    "text": "let's first take a look at the cach side",
    "start": "394240",
    "end": "396960"
  },
  {
    "text": "Channel cache is a small and fast memory",
    "start": "396960",
    "end": "400599"
  },
  {
    "text": "that stores recently accessed data it is",
    "start": "400599",
    "end": "403440"
  },
  {
    "text": "located between the CPU and the main",
    "start": "403440",
    "end": "406080"
  },
  {
    "text": "memory and when the CPU accesses a",
    "start": "406080",
    "end": "408639"
  },
  {
    "text": "memory object for the first time it",
    "start": "408639",
    "end": "410759"
  },
  {
    "text": "fetches the object from the slow main",
    "start": "410759",
    "end": "412720"
  },
  {
    "text": "memory then it towards the object in the",
    "start": "412720",
    "end": "415240"
  },
  {
    "text": "cache so the memory access is",
    "start": "415240",
    "end": "418360"
  },
  {
    "text": "slow when the CPU accesses the the same",
    "start": "418360",
    "end": "421199"
  },
  {
    "text": "object again it fetches the object from",
    "start": "421199",
    "end": "423879"
  },
  {
    "text": "the cache so the access is",
    "start": "423879",
    "end": "427560"
  },
  {
    "text": "fast so with this timing difference we",
    "start": "427560",
    "end": "430440"
  },
  {
    "text": "can construct a cach like Channel it",
    "start": "430440",
    "end": "433160"
  },
  {
    "text": "simply measures the time to access the",
    "start": "433160",
    "end": "435319"
  },
  {
    "text": "memory so if the measure time is fast it",
    "start": "435319",
    "end": "438199"
  },
  {
    "text": "means that the object is cached and has",
    "start": "438199",
    "end": "440599"
  },
  {
    "text": "been accessed",
    "start": "440599",
    "end": "442000"
  },
  {
    "text": "before if the measure time is slow it",
    "start": "442000",
    "end": "445400"
  },
  {
    "text": "means that the object is not cached and",
    "start": "445400",
    "end": "448440"
  },
  {
    "text": "has not been accessed before were loaded",
    "start": "448440",
    "end": "450080"
  },
  {
    "text": "from the slow main",
    "start": "450080",
    "end": "452560"
  },
  {
    "text": "memory so we can exploit cash site",
    "start": "452560",
    "end": "455039"
  },
  {
    "text": "channel to leak whether an address is",
    "start": "455039",
    "end": "459120"
  },
  {
    "text": "accessed next we exploited one of the",
    "start": "459120",
    "end": "461720"
  },
  {
    "text": "most common CPU optimization called",
    "start": "461720",
    "end": "464159"
  },
  {
    "text": "speculative",
    "start": "464159",
    "end": "466120"
  },
  {
    "text": "exclusion so what is faculative",
    "start": "466120",
    "end": "468360"
  },
  {
    "text": "exclusion assume the CPU excludes a code",
    "start": "468360",
    "end": "471360"
  },
  {
    "text": "in the left side and is currently",
    "start": "471360",
    "end": "473039"
  },
  {
    "text": "learning the line pointed by the arrow",
    "start": "473039",
    "end": "476120"
  },
  {
    "text": "on the right side the CPU contains a",
    "start": "476120",
    "end": "478080"
  },
  {
    "text": "pointer that points to an object",
    "start": "478080",
    "end": "480520"
  },
  {
    "text": "and since the CPU has encountered an if",
    "start": "480520",
    "end": "482800"
  },
  {
    "text": "statement here it needs to decide",
    "start": "482800",
    "end": "485000"
  },
  {
    "text": "whether to take the true or false",
    "start": "485000",
    "end": "487919"
  },
  {
    "text": "Branch if the condition value is unknown",
    "start": "487919",
    "end": "490479"
  },
  {
    "text": "for a long time waiting for until it's",
    "start": "490479",
    "end": "493800"
  },
  {
    "text": "ready is would be a huge waste of time",
    "start": "493800",
    "end": "496680"
  },
  {
    "text": "and CPU",
    "start": "496680",
    "end": "498159"
  },
  {
    "text": "resources so the CPU um um leverages",
    "start": "498159",
    "end": "502280"
  },
  {
    "text": "spective exision to speculate on what",
    "start": "502280",
    "end": "505280"
  },
  {
    "text": "will happen next instead of waiting this",
    "start": "505280",
    "end": "508080"
  },
  {
    "text": "condition value",
    "start": "508080",
    "end": "509879"
  },
  {
    "text": "so the CPU speculates that this",
    "start": "509879",
    "end": "511919"
  },
  {
    "text": "condition is true and executes the true",
    "start": "511919",
    "end": "514360"
  },
  {
    "text": "branch and on this load instruction the",
    "start": "514360",
    "end": "517279"
  },
  {
    "text": "CPU the reference the pointer and check",
    "start": "517279",
    "end": "520560"
  },
  {
    "text": "the pointer tag with the memory Stag and",
    "start": "520560",
    "end": "523080"
  },
  {
    "text": "here we assume a tag",
    "start": "523080",
    "end": "526120"
  },
  {
    "text": "match then the memory object is loaded",
    "start": "526120",
    "end": "528600"
  },
  {
    "text": "into the CPU but since it is loaded by a",
    "start": "528600",
    "end": "531839"
  },
  {
    "text": "speculative exision the CPU holds the",
    "start": "531839",
    "end": "534080"
  },
  {
    "text": "loaded data into a speculated State and",
    "start": "534080",
    "end": "537160"
  },
  {
    "text": "when the condition value is later",
    "start": "537160",
    "end": "539480"
  },
  {
    "text": "already and it is actually true the",
    "start": "539480",
    "end": "541519"
  },
  {
    "text": "speculation is correct and the CPU",
    "start": "541519",
    "end": "543880"
  },
  {
    "text": "confirms the speculated state to the",
    "start": "543880",
    "end": "545839"
  },
  {
    "text": "actual evaluated",
    "start": "545839",
    "end": "547560"
  },
  {
    "text": "State then it continues the",
    "start": "547560",
    "end": "550760"
  },
  {
    "text": "execution however when the condition",
    "start": "550760",
    "end": "552839"
  },
  {
    "text": "value is false the code this code",
    "start": "552839",
    "end": "554720"
  },
  {
    "text": "shouldn't have been executed so the CPU",
    "start": "554720",
    "end": "556920"
  },
  {
    "text": "discards this specul state and reverse",
    "start": "556920",
    "end": "559360"
  },
  {
    "text": "the",
    "start": "559360",
    "end": "560000"
  },
  {
    "text": "execution and to the correct path and um",
    "start": "560000",
    "end": "563600"
  },
  {
    "text": "continues with the false Branch however",
    "start": "563600",
    "end": "566040"
  },
  {
    "text": "the CPU does not revert the cach state",
    "start": "566040",
    "end": "568200"
  },
  {
    "text": "so the memory object is still",
    "start": "568200",
    "end": "571200"
  },
  {
    "text": "cached so what if a t check fault occurs",
    "start": "571200",
    "end": "574880"
  },
  {
    "text": "during the speculative",
    "start": "574880",
    "end": "576839"
  },
  {
    "text": "excusion assume the CPU speculatively",
    "start": "576839",
    "end": "579440"
  },
  {
    "text": "lose this um invalid pointer and this",
    "start": "579440",
    "end": "582920"
  },
  {
    "text": "pointer tag does not match to the memory",
    "start": "582920",
    "end": "584839"
  },
  {
    "text": "tag so the CPU raises a tax track fault",
    "start": "584839",
    "end": "588519"
  },
  {
    "text": "however the F this fault does not crash",
    "start": "588519",
    "end": "591079"
  },
  {
    "text": "the process immediately because it is",
    "start": "591079",
    "end": "593360"
  },
  {
    "text": "raised during speculative execution and",
    "start": "593360",
    "end": "595560"
  },
  {
    "text": "there's a possibility that the code",
    "start": "595560",
    "end": "597440"
  },
  {
    "text": "shouldn't have been executed so when the",
    "start": "597440",
    "end": "600000"
  },
  {
    "text": "condition value arrives and it is false",
    "start": "600000",
    "end": "602480"
  },
  {
    "text": "the CPU reverse the tag track fold and",
    "start": "602480",
    "end": "605079"
  },
  {
    "text": "the execution so this means that the T",
    "start": "605079",
    "end": "608920"
  },
  {
    "text": "check fall does not crash the program in",
    "start": "608920",
    "end": "611079"
  },
  {
    "text": "the spective",
    "start": "611079",
    "end": "613600"
  },
  {
    "text": "execution so by exploting spective",
    "start": "613600",
    "end": "616200"
  },
  {
    "text": "exclusion we can now trigger TCH checks",
    "start": "616200",
    "end": "619160"
  },
  {
    "text": "either for Tech match or mismatch but",
    "start": "619160",
    "end": "621760"
  },
  {
    "text": "never crash the",
    "start": "621760",
    "end": "624200"
  },
  {
    "text": "program now combining side Channel cash",
    "start": "624200",
    "end": "627160"
  },
  {
    "text": "side Channel and speculative exclusion",
    "start": "627160",
    "end": "629399"
  },
  {
    "text": "we can construct an mte side Channel",
    "start": "629399",
    "end": "633720"
  },
  {
    "text": "attack in this tack the goal is to leak",
    "start": "633720",
    "end": "637279"
  },
  {
    "text": "the memories tag assume we have this",
    "start": "637279",
    "end": "640279"
  },
  {
    "text": "check pointer that points to a track",
    "start": "640279",
    "end": "642720"
  },
  {
    "text": "object and we want to leak the memory",
    "start": "642720",
    "end": "645079"
  },
  {
    "text": "tag of this",
    "start": "645079",
    "end": "647560"
  },
  {
    "text": "object to lak the tag we're going to",
    "start": "647560",
    "end": "650399"
  },
  {
    "text": "access the this check pointer in two",
    "start": "650399",
    "end": "652720"
  },
  {
    "text": "cases case a with a valid tag case b",
    "start": "652720",
    "end": "656519"
  },
  {
    "text": "with an invalid tag and then we're going",
    "start": "656519",
    "end": "659480"
  },
  {
    "text": "to see if there's any cach difference",
    "start": "659480",
    "end": "661279"
  },
  {
    "text": "between the valid and invalid cases so",
    "start": "661279",
    "end": "663760"
  },
  {
    "text": "that we can determine whether the",
    "start": "663760",
    "end": "665079"
  },
  {
    "text": "pointer contains a valid tag or not with",
    "start": "665079",
    "end": "667600"
  },
  {
    "text": "the cash side",
    "start": "667600",
    "end": "669279"
  },
  {
    "text": "Channel however if you simply access the",
    "start": "669279",
    "end": "672200"
  },
  {
    "text": "track pointer both cases would cat the",
    "start": "672200",
    "end": "675000"
  },
  {
    "text": "object regardless of whether the tag is",
    "start": "675000",
    "end": "677639"
  },
  {
    "text": "correct or incorrect so there is no cach",
    "start": "677639",
    "end": "680399"
  },
  {
    "text": "difference between between them so cash",
    "start": "680399",
    "end": "682720"
  },
  {
    "text": "T channel will tell",
    "start": "682720",
    "end": "686160"
  },
  {
    "text": "nothing but what if we add additional",
    "start": "686320",
    "end": "688760"
  },
  {
    "text": "memory",
    "start": "688760",
    "end": "689760"
  },
  {
    "text": "say a test pointer will there be any",
    "start": "689760",
    "end": "692519"
  },
  {
    "text": "cach",
    "start": "692519",
    "end": "694639"
  },
  {
    "text": "difference to verify this we will we",
    "start": "694639",
    "end": "697480"
  },
  {
    "text": "going to run this code shown on the left",
    "start": "697480",
    "end": "699800"
  },
  {
    "text": "which triggers spective exclusion and in",
    "start": "699800",
    "end": "702519"
  },
  {
    "text": "case a where the tag is",
    "start": "702519",
    "end": "705440"
  },
  {
    "text": "valid um in the in the track block the",
    "start": "705440",
    "end": "708519"
  },
  {
    "text": "CPU speculatively accesses with the",
    "start": "708519",
    "end": "710600"
  },
  {
    "text": "cheack pointer so the track object is",
    "start": "710600",
    "end": "713600"
  },
  {
    "text": "loaded to the cache and the CPU um",
    "start": "713600",
    "end": "716880"
  },
  {
    "text": "checks matches the memory tag",
    "start": "716880",
    "end": "720160"
  },
  {
    "text": "and here the T the check passes so the",
    "start": "720160",
    "end": "723120"
  },
  {
    "text": "CPU proceeds with the next instruction",
    "start": "723120",
    "end": "725519"
  },
  {
    "text": "and the test object is also loaded into",
    "start": "725519",
    "end": "727360"
  },
  {
    "text": "the",
    "start": "727360",
    "end": "728279"
  },
  {
    "text": "cach and the TA track of course",
    "start": "728279",
    "end": "732160"
  },
  {
    "text": "passes in the end um um when the",
    "start": "732160",
    "end": "735800"
  },
  {
    "text": "condition value is later evaluated as",
    "start": "735800",
    "end": "737880"
  },
  {
    "text": "false and the CPU revers the excusion",
    "start": "737880",
    "end": "740839"
  },
  {
    "text": "and the cash would contain both the",
    "start": "740839",
    "end": "742800"
  },
  {
    "text": "check and test",
    "start": "742800",
    "end": "745760"
  },
  {
    "text": "object but in case b where the Pointer's",
    "start": "746680",
    "end": "749839"
  },
  {
    "text": "tag is",
    "start": "749839",
    "end": "751440"
  },
  {
    "text": "invalid the CPUs spectively accesses the",
    "start": "751440",
    "end": "754920"
  },
  {
    "text": "check pointer and here the CPU raises a",
    "start": "754920",
    "end": "758920"
  },
  {
    "text": "t track",
    "start": "758920",
    "end": "760519"
  },
  {
    "text": "fault and the CPU does not have any",
    "start": "760519",
    "end": "763279"
  },
  {
    "text": "reason to to proceed the spa execution",
    "start": "763279",
    "end": "766880"
  },
  {
    "text": "because if it was a correct speculation",
    "start": "766880",
    "end": "770000"
  },
  {
    "text": "the tax track fault would be",
    "start": "770000",
    "end": "771279"
  },
  {
    "text": "synchronously CAU by the CPU and the",
    "start": "771279",
    "end": "774160"
  },
  {
    "text": "next test block will not be",
    "start": "774160",
    "end": "776680"
  },
  {
    "text": "executed if it was a wrong spec ation",
    "start": "776680",
    "end": "780160"
  },
  {
    "text": "the CPU would revert the the execution",
    "start": "780160",
    "end": "783160"
  },
  {
    "text": "anyway so it is possible that the CPU",
    "start": "783160",
    "end": "785920"
  },
  {
    "text": "stops the speculative excution here if",
    "start": "785920",
    "end": "789040"
  },
  {
    "text": "so when the condition value is evaluated",
    "start": "789040",
    "end": "791800"
  },
  {
    "text": "as false and the CPU reverse the",
    "start": "791800",
    "end": "794800"
  },
  {
    "text": "execution the cach would contain only",
    "start": "794800",
    "end": "797160"
  },
  {
    "text": "the track",
    "start": "797160",
    "end": "799399"
  },
  {
    "text": "object so now the the cach SE Channel",
    "start": "799399",
    "end": "802240"
  },
  {
    "text": "comes into play in case a with a valid",
    "start": "802240",
    "end": "805079"
  },
  {
    "text": "tag the cache contains both the track",
    "start": "805079",
    "end": "807519"
  },
  {
    "text": "and test objects in case b with an",
    "start": "807519",
    "end": "809959"
  },
  {
    "text": "invalid tag the cach would contain only",
    "start": "809959",
    "end": "812880"
  },
  {
    "text": "the check",
    "start": "812880",
    "end": "814199"
  },
  {
    "text": "object therefore if you measure the time",
    "start": "814199",
    "end": "816560"
  },
  {
    "text": "it takes to aure access the test object",
    "start": "816560",
    "end": "819920"
  },
  {
    "text": "the time would be fast in case a but",
    "start": "819920",
    "end": "822320"
  },
  {
    "text": "slow in case",
    "start": "822320",
    "end": "824360"
  },
  {
    "text": "b from this difference we can leak",
    "start": "824360",
    "end": "827360"
  },
  {
    "text": "whether the tag in the check pointer is",
    "start": "827360",
    "end": "829720"
  },
  {
    "text": "valid or",
    "start": "829720",
    "end": "832319"
  },
  {
    "text": "invalid and the key question is whether",
    "start": "832759",
    "end": "835519"
  },
  {
    "text": "these new Mt chips actually contain the",
    "start": "835519",
    "end": "838000"
  },
  {
    "text": "tag leage side Channel",
    "start": "838000",
    "end": "840920"
  },
  {
    "text": "previously an attack called Pac-Man",
    "start": "840920",
    "end": "843560"
  },
  {
    "text": "leaked arm arm poter authentication code",
    "start": "843560",
    "end": "846000"
  },
  {
    "text": "with side channel so it is possible that",
    "start": "846000",
    "end": "849040"
  },
  {
    "text": "these new arm chips also have the",
    "start": "849040",
    "end": "850959"
  },
  {
    "text": "similar side Channel issue with",
    "start": "850959",
    "end": "854079"
  },
  {
    "text": "mte Google project zero actually",
    "start": "854079",
    "end": "856680"
  },
  {
    "text": "conducted an analysis on this empty",
    "start": "856680",
    "end": "859199"
  },
  {
    "text": "Hardware including the search for the",
    "start": "859199",
    "end": "861920"
  },
  {
    "text": "tag Lage side Channel but they have F",
    "start": "861920",
    "end": "864959"
  },
  {
    "text": "they have failed to find such side",
    "start": "864959",
    "end": "867240"
  },
  {
    "text": "channels",
    "start": "867240",
    "end": "869320"
  },
  {
    "text": "um they have tested a code consisting of",
    "start": "869320",
    "end": "871839"
  },
  {
    "text": "a check pointer load and a dependent",
    "start": "871839",
    "end": "874440"
  },
  {
    "text": "test pointer load bearing the distance",
    "start": "874440",
    "end": "876959"
  },
  {
    "text": "between them but this did not generate",
    "start": "876959",
    "end": "879480"
  },
  {
    "text": "any cach difference on the test",
    "start": "879480",
    "end": "883240"
  },
  {
    "text": "pointer what we did was finding out what",
    "start": "883240",
    "end": "886519"
  },
  {
    "text": "should be in the green part to induce",
    "start": "886519",
    "end": "888839"
  },
  {
    "text": "the cash difference between the valid",
    "start": "888839",
    "end": "890680"
  },
  {
    "text": "and invalid",
    "start": "890680",
    "end": "892920"
  },
  {
    "text": "tax and as a result we identified two",
    "start": "892920",
    "end": "896440"
  },
  {
    "text": "memory access patterns that actually",
    "start": "896440",
    "end": "898600"
  },
  {
    "text": "creates search differences which which",
    "start": "898600",
    "end": "901320"
  },
  {
    "text": "we refer to as Tech leakage gadgets and",
    "start": "901320",
    "end": "904880"
  },
  {
    "text": "we also have suspected Hardware root",
    "start": "904880",
    "end": "907560"
  },
  {
    "text": "courses and um you can find more details",
    "start": "907560",
    "end": "911040"
  },
  {
    "text": "in our open source code and archive our",
    "start": "911040",
    "end": "914240"
  },
  {
    "text": "archiv",
    "start": "914240",
    "end": "916720"
  },
  {
    "text": "paper and um on another research group",
    "start": "917360",
    "end": "920639"
  },
  {
    "text": "we sack also orthogonally discovered one",
    "start": "920639",
    "end": "923519"
  },
  {
    "text": "of our teage gadgets so and arm equally",
    "start": "923519",
    "end": "926519"
  },
  {
    "text": "acknowledged the discovery from our",
    "start": "926519",
    "end": "928600"
  },
  {
    "text": "group and",
    "start": "928600",
    "end": "930959"
  },
  {
    "text": "view so our first Gadget contains",
    "start": "932079",
    "end": "935160"
  },
  {
    "text": "multiple lows in the track block and",
    "start": "935160",
    "end": "937360"
  },
  {
    "text": "this test block can be any memory access",
    "start": "937360",
    "end": "939199"
  },
  {
    "text": "to test",
    "start": "939199",
    "end": "940600"
  },
  {
    "text": "pointer",
    "start": "940600",
    "end": "942199"
  },
  {
    "text": "um I think P was so close because they",
    "start": "942199",
    "end": "945199"
  },
  {
    "text": "have tested only one load but actually",
    "start": "945199",
    "end": "947319"
  },
  {
    "text": "at least two loads were required for the",
    "start": "947319",
    "end": "949160"
  },
  {
    "text": "side",
    "start": "949160",
    "end": "950120"
  },
  {
    "text": "channel so when the T check fault occurs",
    "start": "950120",
    "end": "952600"
  },
  {
    "text": "multiple times the following",
    "start": "952600",
    "end": "954160"
  },
  {
    "text": "instructions are not executed leaving",
    "start": "954160",
    "end": "956680"
  },
  {
    "text": "test pointer not cached",
    "start": "956680",
    "end": "959600"
  },
  {
    "text": "for the root cause um as arm has not",
    "start": "959600",
    "end": "961959"
  },
  {
    "text": "disclosed any hardware side details we",
    "start": "961959",
    "end": "964680"
  },
  {
    "text": "conducted additional experiments and",
    "start": "964680",
    "end": "966399"
  },
  {
    "text": "reviewed relevant documents and we",
    "start": "966399",
    "end": "969000"
  },
  {
    "text": "suspect that on multiple FS the CPU resp",
    "start": "969000",
    "end": "972560"
  },
  {
    "text": "speculates that the previous speculation",
    "start": "972560",
    "end": "975240"
  },
  {
    "text": "was wrong in other words if the CPU",
    "start": "975240",
    "end": "978000"
  },
  {
    "text": "experiences too many faults it considers",
    "start": "978000",
    "end": "980759"
  },
  {
    "text": "them as an indicator of the wrong path",
    "start": "980759",
    "end": "983360"
  },
  {
    "text": "and stops or reduces the spective",
    "start": "983360",
    "end": "987199"
  },
  {
    "text": "behaviors um this this this root cause",
    "start": "987199",
    "end": "989680"
  },
  {
    "text": "is based on the relevant patent for",
    "start": "989680",
    "end": "991880"
  },
  {
    "text": "filed from arm limited and um and our",
    "start": "991880",
    "end": "995519"
  },
  {
    "text": "paper also provide the the experimental",
    "start": "995519",
    "end": "998120"
  },
  {
    "text": "results supporting this",
    "start": "998120",
    "end": "1001560"
  },
  {
    "text": "conclusion and the second Gadget",
    "start": "1001600",
    "end": "1003639"
  },
  {
    "text": "triggers the store to load forwarding",
    "start": "1003639",
    "end": "1005759"
  },
  {
    "text": "behavior in the",
    "start": "1005759",
    "end": "1007279"
  },
  {
    "text": "CPU in the check block it stores a value",
    "start": "1007279",
    "end": "1010880"
  },
  {
    "text": "to the check pointer and then",
    "start": "1010880",
    "end": "1012720"
  },
  {
    "text": "immediately lose this value from the",
    "start": "1012720",
    "end": "1014800"
  },
  {
    "text": "check pointer in this case the CPU",
    "start": "1014800",
    "end": "1018120"
  },
  {
    "text": "optimizes the performance using internal",
    "start": "1018120",
    "end": "1020519"
  },
  {
    "text": "buffer buffers like this to Lo recent",
    "start": "1020519",
    "end": "1023480"
  },
  {
    "text": "stores and load",
    "start": "1023480",
    "end": "1025720"
  },
  {
    "text": "instructions if a store and the",
    "start": "1025720",
    "end": "1027839"
  },
  {
    "text": "following load instruction is for the",
    "start": "1027839",
    "end": "1029760"
  },
  {
    "text": "same address the CPU directly forwards",
    "start": "1029760",
    "end": "1032880"
  },
  {
    "text": "the value from the store to load instead",
    "start": "1032880",
    "end": "1035240"
  },
  {
    "text": "of accessing the cache so um and after",
    "start": "1035240",
    "end": "1039438"
  },
  {
    "text": "the store to look Behavior the test to",
    "start": "1039439",
    "end": "1042640"
  },
  {
    "text": "the test block accesses um memory access",
    "start": "1042640",
    "end": "1045798"
  },
  {
    "text": "dependent to the value forwarded in the",
    "start": "1045799",
    "end": "1047640"
  },
  {
    "text": "check block",
    "start": "1047640",
    "end": "1050840"
  },
  {
    "text": "and we've observed that when tax check F",
    "start": "1051000",
    "end": "1053679"
  },
  {
    "text": "occurs during store to load forwarding",
    "start": "1053679",
    "end": "1056400"
  },
  {
    "text": "either in the load store or both",
    "start": "1056400",
    "end": "1059039"
  },
  {
    "text": "instructions the dependent memory access",
    "start": "1059039",
    "end": "1061559"
  },
  {
    "text": "in the task block is not executed",
    "start": "1061559",
    "end": "1064160"
  },
  {
    "text": "meaning that the data is not",
    "start": "1064160",
    "end": "1068000"
  },
  {
    "text": "forwarded and we suspect that the root",
    "start": "1068080",
    "end": "1070840"
  },
  {
    "text": "cause of this is the as the CPU blocking",
    "start": "1070840",
    "end": "1074080"
  },
  {
    "text": "the store to load forwarding on faults",
    "start": "1074080",
    "end": "1076880"
  },
  {
    "text": "to mitigate other side Channel issues",
    "start": "1076880",
    "end": "1080840"
  },
  {
    "text": "now based on the empty side Channel",
    "start": "1082600",
    "end": "1084600"
  },
  {
    "text": "Gadget we can construct rearward mte",
    "start": "1084600",
    "end": "1087400"
  },
  {
    "text": "bypass",
    "start": "1087400",
    "end": "1089679"
  },
  {
    "text": "attacks since mte has been recently",
    "start": "1089679",
    "end": "1092400"
  },
  {
    "text": "became available not many real world sof",
    "start": "1092400",
    "end": "1095200"
  },
  {
    "text": "software systems actually use mte for",
    "start": "1095200",
    "end": "1097679"
  },
  {
    "text": "attack mitigation",
    "start": "1097679",
    "end": "1099240"
  },
  {
    "text": "yet but widely used softwares like",
    "start": "1099240",
    "end": "1102320"
  },
  {
    "text": "Android Chrome and L Corner they already",
    "start": "1102320",
    "end": "1105760"
  },
  {
    "text": "provide an optional Mt support and and",
    "start": "1105760",
    "end": "1108919"
  },
  {
    "text": "also some secure operating systems",
    "start": "1108919",
    "end": "1110679"
  },
  {
    "text": "utilize mte to mitigate memory",
    "start": "1110679",
    "end": "1112600"
  },
  {
    "text": "corruption attacks and we think more",
    "start": "1112600",
    "end": "1115280"
  },
  {
    "text": "software vendors will adopt mte in the",
    "start": "1115280",
    "end": "1117559"
  },
  {
    "text": "near future due to its",
    "start": "1117559",
    "end": "1121399"
  },
  {
    "text": "benefits so we assumed that mte is",
    "start": "1121520",
    "end": "1125000"
  },
  {
    "text": "already enabled and we developed real",
    "start": "1125000",
    "end": "1127400"
  },
  {
    "text": "world gadgets and Mt bypass attacks on",
    "start": "1127400",
    "end": "1130360"
  },
  {
    "text": "two major systems Google Chrome and the",
    "start": "1130360",
    "end": "1133280"
  },
  {
    "text": "link Corner in this talk I'll only",
    "start": "1133280",
    "end": "1136120"
  },
  {
    "text": "present the attack on the Google Chrome",
    "start": "1136120",
    "end": "1138000"
  },
  {
    "text": "V8 engine",
    "start": "1138000",
    "end": "1139400"
  },
  {
    "text": "which constructs a tag leakage Gadget",
    "start": "1139400",
    "end": "1141679"
  },
  {
    "text": "from JavaScript code and leaks the empty",
    "start": "1141679",
    "end": "1144880"
  },
  {
    "text": "tag of the render the entire render",
    "start": "1144880",
    "end": "1148320"
  },
  {
    "text": "memory we also found the gadget from the",
    "start": "1148320",
    "end": "1150720"
  },
  {
    "text": "lens corner and developed an",
    "start": "1150720",
    "end": "1153200"
  },
  {
    "text": "attack so if you're interested please",
    "start": "1153200",
    "end": "1155440"
  },
  {
    "text": "refer to our",
    "start": "1155440",
    "end": "1158200"
  },
  {
    "text": "paper so let me first um introduce the",
    "start": "1158880",
    "end": "1161880"
  },
  {
    "text": "threat model of Google Chrome especially",
    "start": "1161880",
    "end": "1165080"
  },
  {
    "text": "the renderer",
    "start": "1165080",
    "end": "1166520"
  },
  {
    "text": "process the renderer process consists of",
    "start": "1166520",
    "end": "1169400"
  },
  {
    "text": "the V8 JavaScript engine and the blink",
    "start": "1169400",
    "end": "1172600"
  },
  {
    "text": "rendering engine and other third party",
    "start": "1172600",
    "end": "1174640"
  },
  {
    "text": "libraries and attackers can provide",
    "start": "1174640",
    "end": "1177039"
  },
  {
    "text": "malicious data malicious JavaScript data",
    "start": "1177039",
    "end": "1179840"
  },
  {
    "text": "HTML CSS",
    "start": "1179840",
    "end": "1181840"
  },
  {
    "text": "data and they can trigger memory",
    "start": "1181840",
    "end": "1183919"
  },
  {
    "text": "corruption vulnerabilities in each code",
    "start": "1183919",
    "end": "1186600"
  },
  {
    "text": "base but since the Javas JavaScript code",
    "start": "1186600",
    "end": "1190120"
  },
  {
    "text": "is directly compiled and run by the8",
    "start": "1190120",
    "end": "1193159"
  },
  {
    "text": "engine it has been the most um",
    "start": "1193159",
    "end": "1196120"
  },
  {
    "text": "accessible Target for the attackers so",
    "start": "1196120",
    "end": "1198760"
  },
  {
    "text": "the VA sand boox is developed and it is",
    "start": "1198760",
    "end": "1201159"
  },
  {
    "text": "applied by default um to sandbox the",
    "start": "1201159",
    "end": "1204240"
  },
  {
    "text": "undusted JavaScript code exclusion and",
    "start": "1204240",
    "end": "1207240"
  },
  {
    "text": "it ensures that no JavaScript can access",
    "start": "1207240",
    "end": "1210000"
  },
  {
    "text": "the rest of the",
    "start": "1210000",
    "end": "1211799"
  },
  {
    "text": "memory however the blink and Rand the",
    "start": "1211799",
    "end": "1214880"
  },
  {
    "text": "blink render and third party libraries",
    "start": "1214880",
    "end": "1217120"
  },
  {
    "text": "also contain a vast amount of code",
    "start": "1217120",
    "end": "1220559"
  },
  {
    "text": "potentially containing memory C",
    "start": "1220559",
    "end": "1222480"
  },
  {
    "text": "vulnerabilities so Lakers can still",
    "start": "1222480",
    "end": "1224840"
  },
  {
    "text": "exploit them even if the VA sander box",
    "start": "1224840",
    "end": "1227280"
  },
  {
    "text": "is enabled",
    "start": "1227280",
    "end": "1230440"
  },
  {
    "text": "and as we assume the Mt is enabled the",
    "start": "1230559",
    "end": "1233720"
  },
  {
    "text": "Chrome randomly tags the object in blink",
    "start": "1233720",
    "end": "1236039"
  },
  {
    "text": "and third party libraries so it does",
    "start": "1236039",
    "end": "1238799"
  },
  {
    "text": "mitigate the memory corruption on this",
    "start": "1238799",
    "end": "1240679"
  },
  {
    "text": "on those code",
    "start": "1240679",
    "end": "1242919"
  },
  {
    "text": "basis but um although the V SBX",
    "start": "1242919",
    "end": "1246600"
  },
  {
    "text": "prohibits JavaScript from directly",
    "start": "1246600",
    "end": "1248480"
  },
  {
    "text": "corrupting this objects if you can",
    "start": "1248480",
    "end": "1250880"
  },
  {
    "text": "somehow leak the empty tag of the render",
    "start": "1250880",
    "end": "1253440"
  },
  {
    "text": "memory we can bypass mte and exploit",
    "start": "1253440",
    "end": "1256559"
  },
  {
    "text": "memory corruption vulnerabilities",
    "start": "1256559",
    "end": "1260120"
  },
  {
    "text": "so this is our Gadget number two created",
    "start": "1262280",
    "end": "1264600"
  },
  {
    "text": "using",
    "start": "1264600",
    "end": "1265600"
  },
  {
    "text": "JavaScript since this is a JavaScript",
    "start": "1265600",
    "end": "1268120"
  },
  {
    "text": "code the AER can provide anything",
    "start": "1268120",
    "end": "1270720"
  },
  {
    "text": "including the code array and",
    "start": "1270720",
    "end": "1273640"
  },
  {
    "text": "indexes first the attacker prepares an",
    "start": "1273640",
    "end": "1276400"
  },
  {
    "text": "64-bit out of bound",
    "start": "1276400",
    "end": "1278960"
  },
  {
    "text": "index and a check array is accessed with",
    "start": "1278960",
    "end": "1282240"
  },
  {
    "text": "this index so that it can represent the",
    "start": "1282240",
    "end": "1284279"
  },
  {
    "text": "attacker controlled check",
    "start": "1284279",
    "end": "1286320"
  },
  {
    "text": "pointer of course the V8 detect this",
    "start": "1286320",
    "end": "1289480"
  },
  {
    "text": "outof bound array access and raise an",
    "start": "1289480",
    "end": "1291720"
  },
  {
    "text": "error if it was a normal execution but",
    "start": "1291720",
    "end": "1295039"
  },
  {
    "text": "as you wrap this access in an if",
    "start": "1295039",
    "end": "1297240"
  },
  {
    "text": "statement and trigger a speculative",
    "start": "1297240",
    "end": "1299720"
  },
  {
    "text": "excusion the V8 would not raise an error",
    "start": "1299720",
    "end": "1303240"
  },
  {
    "text": "but the CPU actually accesses an outof",
    "start": "1303240",
    "end": "1306360"
  },
  {
    "text": "bound address in the speculative",
    "start": "1306360",
    "end": "1309520"
  },
  {
    "text": "execution therefore the gget can trigger",
    "start": "1309520",
    "end": "1312000"
  },
  {
    "text": "a store to Lo forwarding with the check",
    "start": "1312000",
    "end": "1314080"
  },
  {
    "text": "pointer and the forwarding value is used",
    "start": "1314080",
    "end": "1316360"
  },
  {
    "text": "as an index of test array in this way",
    "start": "1316360",
    "end": "1319039"
  },
  {
    "text": "the test array um we're going to become",
    "start": "1319039",
    "end": "1322159"
  },
  {
    "text": "the test pointer and constructing our",
    "start": "1322159",
    "end": "1324520"
  },
  {
    "text": "Gadget number",
    "start": "1324520",
    "end": "1327080"
  },
  {
    "text": "two and to exploit this gadget the theer",
    "start": "1327960",
    "end": "1331320"
  },
  {
    "text": "can construct a tag leage function like",
    "start": "1331320",
    "end": "1333520"
  },
  {
    "text": "this that which leaks the tag of an",
    "start": "1333520",
    "end": "1336279"
  },
  {
    "text": "arbitrary Target",
    "start": "1336279",
    "end": "1338279"
  },
  {
    "text": "address the function iterates over all",
    "start": "1338279",
    "end": "1341080"
  },
  {
    "text": "possible tag values from 0o to 15 then",
    "start": "1341080",
    "end": "1344360"
  },
  {
    "text": "it creates an a bond index for the tag",
    "start": "1344360",
    "end": "1346520"
  },
  {
    "text": "value and the target address",
    "start": "1346520",
    "end": "1349440"
  },
  {
    "text": "then the function triggers the",
    "start": "1349440",
    "end": "1350760"
  },
  {
    "text": "speculative exclusion with the tag leage",
    "start": "1350760",
    "end": "1353840"
  },
  {
    "text": "Gadget here the depending on whether the",
    "start": "1353840",
    "end": "1356480"
  },
  {
    "text": "tag is valid or",
    "start": "1356480",
    "end": "1358279"
  },
  {
    "text": "invalid the test array will be either",
    "start": "1358279",
    "end": "1361200"
  },
  {
    "text": "access or",
    "start": "1361200",
    "end": "1363039"
  },
  {
    "text": "not and then the access latency of the",
    "start": "1363039",
    "end": "1366159"
  },
  {
    "text": "test array is",
    "start": "1366159",
    "end": "1368240"
  },
  {
    "text": "measured and the function Returns the",
    "start": "1368240",
    "end": "1370760"
  },
  {
    "text": "tag with the minimum access latency",
    "start": "1370760",
    "end": "1373720"
  },
  {
    "text": "which means it going to leak the tag",
    "start": "1373720",
    "end": "1375960"
  },
  {
    "text": "value",
    "start": "1375960",
    "end": "1378960"
  },
  {
    "text": "and leveraging this TCH leage function",
    "start": "1379799",
    "end": "1381799"
  },
  {
    "text": "theer can bypass mte in Google Chrome",
    "start": "1381799",
    "end": "1385320"
  },
  {
    "text": "the strategy is quite simple first with",
    "start": "1385320",
    "end": "1387960"
  },
  {
    "text": "the tag leage function it leaks the tag",
    "start": "1387960",
    "end": "1390320"
  },
  {
    "text": "of the memory",
    "start": "1390320",
    "end": "1391919"
  },
  {
    "text": "object next trigger memory coruption",
    "start": "1391919",
    "end": "1394880"
  },
  {
    "text": "tags if the tag match if tag tags are",
    "start": "1394880",
    "end": "1398360"
  },
  {
    "text": "going to",
    "start": "1398360",
    "end": "1400120"
  },
  {
    "text": "match and in this example we assumed a",
    "start": "1400120",
    "end": "1403120"
  },
  {
    "text": "heap overflow vulnerability that a",
    "start": "1403120",
    "end": "1405120"
  },
  {
    "text": "vulnerable object is overflowed to a",
    "start": "1405120",
    "end": "1407320"
  },
  {
    "text": "neighboring Target object",
    "start": "1407320",
    "end": "1409159"
  },
  {
    "text": "and in the following slides I'll explain",
    "start": "1409159",
    "end": "1410840"
  },
  {
    "text": "the attack in more",
    "start": "1410840",
    "end": "1413400"
  },
  {
    "text": "details first the attacker leaks the tag",
    "start": "1413400",
    "end": "1416240"
  },
  {
    "text": "of the burner",
    "start": "1416240",
    "end": "1417640"
  },
  {
    "text": "object and then leak the target of the",
    "start": "1417640",
    "end": "1420159"
  },
  {
    "text": "target the leak the tag of the target",
    "start": "1420159",
    "end": "1423480"
  },
  {
    "text": "object if the tags do not match we're",
    "start": "1423480",
    "end": "1426480"
  },
  {
    "text": "going to reallocate the Target",
    "start": "1426480",
    "end": "1429919"
  },
  {
    "text": "object and then lick the tag again if",
    "start": "1430000",
    "end": "1434240"
  },
  {
    "text": "they match now we can trigger the out of",
    "start": "1434240",
    "end": "1436760"
  },
  {
    "text": "bounds memory access",
    "start": "1436760",
    "end": "1440120"
  },
  {
    "text": "the attack check would pass so the",
    "start": "1440120",
    "end": "1442559"
  },
  {
    "text": "attacker can successfully bypass",
    "start": "1442559",
    "end": "1446120"
  },
  {
    "text": "mte so we created a demo um I in this",
    "start": "1446240",
    "end": "1450880"
  },
  {
    "text": "demo I use a real word vulnerability in",
    "start": "1450880",
    "end": "1453480"
  },
  {
    "text": "Google Chrome uh Heap overflow in Li bpx",
    "start": "1453480",
    "end": "1457600"
  },
  {
    "text": "Library first I'll show the original",
    "start": "1457600",
    "end": "1460000"
  },
  {
    "text": "memory corruption",
    "start": "1460000",
    "end": "1461919"
  },
  {
    "text": "vulnerability it allocates the",
    "start": "1461919",
    "end": "1465039"
  },
  {
    "text": "object right after the um vulnerable and",
    "start": "1465039",
    "end": "1468039"
  },
  {
    "text": "Target object right after the bar number",
    "start": "1468039",
    "end": "1469640"
  },
  {
    "text": "one and Trigger the Heap overflow and",
    "start": "1469640",
    "end": "1472279"
  },
  {
    "text": "the process immediately crashes due to",
    "start": "1472279",
    "end": "1475039"
  },
  {
    "text": "the T track",
    "start": "1475039",
    "end": "1477799"
  },
  {
    "text": "fault next is with rmt tag liage",
    "start": "1479399",
    "end": "1483600"
  },
  {
    "text": "Gadget once the object are allocated we",
    "start": "1483600",
    "end": "1486720"
  },
  {
    "text": "leak the vulnerable objects tag and the",
    "start": "1486720",
    "end": "1489039"
  },
  {
    "text": "target tag and Target is reallocated",
    "start": "1489039",
    "end": "1492039"
  },
  {
    "text": "until it tag value matches the",
    "start": "1492039",
    "end": "1494080"
  },
  {
    "text": "vulnerable object tag and then we",
    "start": "1494080",
    "end": "1496559"
  },
  {
    "text": "trigger the Heap overflow this time",
    "start": "1496559",
    "end": "1498840"
  },
  {
    "text": "there was no crash and you can see that",
    "start": "1498840",
    "end": "1501760"
  },
  {
    "text": "the target address was b0",
    "start": "1501760",
    "end": "1505120"
  },
  {
    "text": "b2000 and we actually wrote to the",
    "start": "1505120",
    "end": "1508000"
  },
  {
    "text": "address",
    "start": "1508000",
    "end": "1509159"
  },
  {
    "text": "B2 10 30 and 50 so the vulnerability was",
    "start": "1509159",
    "end": "1513720"
  },
  {
    "text": "successfully triggered without a",
    "start": "1513720",
    "end": "1517480"
  },
  {
    "text": "crash so we reported this issue to",
    "start": "1518640",
    "end": "1521240"
  },
  {
    "text": "relevant vendors first arm acknowledged",
    "start": "1521240",
    "end": "1524159"
  },
  {
    "text": "the empty tax side channels in multiple",
    "start": "1524159",
    "end": "1526279"
  },
  {
    "text": "arm",
    "start": "1526279",
    "end": "1527120"
  },
  {
    "text": "cores however they stated that Mt tags",
    "start": "1527120",
    "end": "1530159"
  },
  {
    "text": "are not actually considered as a secret",
    "start": "1530159",
    "end": "1532240"
  },
  {
    "text": "in their architecture so tag leage side",
    "start": "1532240",
    "end": "1534679"
  },
  {
    "text": "channel is not a security",
    "start": "1534679",
    "end": "1536799"
  },
  {
    "text": "vulnerability but still they expected",
    "start": "1536799",
    "end": "1539520"
  },
  {
    "text": "the cost of the hardware fix to be low",
    "start": "1539520",
    "end": "1541840"
  },
  {
    "text": "and recommended the CPU vendors to fix",
    "start": "1541840",
    "end": "1545880"
  },
  {
    "text": "it Google Android security team has",
    "start": "1546440",
    "end": "1549360"
  },
  {
    "text": "acknowledged the Mt ta liage issue as a",
    "start": "1549360",
    "end": "1552320"
  },
  {
    "text": "hardware floww of their pixel devices",
    "start": "1552320",
    "end": "1555720"
  },
  {
    "text": "still they consider mte as a strong",
    "start": "1555720",
    "end": "1557880"
  },
  {
    "text": "mitig ation against side Chanel attacks",
    "start": "1557880",
    "end": "1560440"
  },
  {
    "text": "against limited shot exploits where side",
    "start": "1560440",
    "end": "1562360"
  },
  {
    "text": "Channel attack is not is not",
    "start": "1562360",
    "end": "1567039"
  },
  {
    "text": "possible Google Chrome VA security team",
    "start": "1568600",
    "end": "1571520"
  },
  {
    "text": "concluded that the Mt cyon attack does",
    "start": "1571520",
    "end": "1574120"
  },
  {
    "text": "not violate the va8 security model",
    "start": "1574120",
    "end": "1576840"
  },
  {
    "text": "because data confidentiality including",
    "start": "1576840",
    "end": "1579159"
  },
  {
    "text": "Mt tag is out of scope of their va8 Z",
    "start": "1579159",
    "end": "1582039"
  },
  {
    "text": "Box and they also mentioned that they",
    "start": "1582039",
    "end": "1584360"
  },
  {
    "text": "currently do not have any plans to adopt",
    "start": "1584360",
    "end": "1586559"
  },
  {
    "text": "mte on renderer due to potential seal",
    "start": "1586559",
    "end": "1589760"
  },
  {
    "text": "issues like the one we presented but",
    "start": "1589760",
    "end": "1592360"
  },
  {
    "text": "actually we think we can mitigate this",
    "start": "1592360",
    "end": "1594559"
  },
  {
    "text": "SEAL issue by fixing their sander box a",
    "start": "1594559",
    "end": "1597039"
  },
  {
    "text": "little bit which we describe in our",
    "start": "1597039",
    "end": "1601080"
  },
  {
    "text": "paper so as a takeaway um our memory",
    "start": "1601480",
    "end": "1605000"
  },
  {
    "text": "taging extension is a promising security",
    "start": "1605000",
    "end": "1607720"
  },
  {
    "text": "feature to defend against memory",
    "start": "1607720",
    "end": "1609840"
  },
  {
    "text": "corruption attacks no previous defenses",
    "start": "1609840",
    "end": "1612799"
  },
  {
    "text": "have have been able to provide this",
    "start": "1612799",
    "end": "1615200"
  },
  {
    "text": "level of security and efficiency",
    "start": "1615200",
    "end": "1619159"
  },
  {
    "text": "however we have shown that current Mt",
    "start": "1619159",
    "end": "1621360"
  },
  {
    "text": "Hardware contains tag leage SEL issues",
    "start": "1621360",
    "end": "1625000"
  },
  {
    "text": "and we hope mte based security can be",
    "start": "1625000",
    "end": "1627919"
  },
  {
    "text": "further improved by adopting software",
    "start": "1627919",
    "end": "1630279"
  },
  {
    "text": "and Hardware enhancement in the",
    "start": "1630279",
    "end": "1633760"
  },
  {
    "text": "future so thank you for listening to my",
    "start": "1633760",
    "end": "1636159"
  },
  {
    "text": "talk if you have any question you can",
    "start": "1636159",
    "end": "1637880"
  },
  {
    "text": "reach out to me through this email or",
    "start": "1637880",
    "end": "1639799"
  },
  {
    "text": "send message to me through the app",
    "start": "1639799",
    "end": "1642390"
  },
  {
    "text": "[Applause]",
    "start": "1642390",
    "end": "1646439"
  }
]