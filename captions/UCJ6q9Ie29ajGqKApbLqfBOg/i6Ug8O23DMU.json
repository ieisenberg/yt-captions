[
  {
    "start": "0",
    "end": "73000"
  },
  {
    "text": "so hello thank you very much for coming here we are presenting three budgets as he explained I'm presenting together",
    "start": "30",
    "end": "8429"
  },
  {
    "text": "with koto and Sebastian and yeah so what we want to show you today is how we",
    "start": "8429",
    "end": "14400"
  },
  {
    "text": "bypassed every exercise mitigation we tested which essentially means we tested excesses filters were application",
    "start": "14400",
    "end": "21210"
  },
  {
    "text": "firewalls the and several versions of content security policy as well a couple sanitizers and the objective of this",
    "start": "21210",
    "end": "29070"
  },
  {
    "text": "research originally was yes to bypass ESP but then it evolved into something a bit more generic and we hope you like it",
    "start": "29070",
    "end": "36660"
  },
  {
    "text": "the website will post a copy of the repository but there's another version online if you want to see the proof of",
    "start": "36660",
    "end": "42329"
  },
  {
    "text": "concepts so agree a quick agenda of what we're going to do so I'm going to give",
    "start": "42329",
    "end": "47940"
  },
  {
    "text": "you a very quick introduction for around 10 minutes then Cotto is going to present the gadgets in libraries which",
    "start": "47940",
    "end": "53489"
  },
  {
    "text": "is the research done manually by us against the most popular libraries we we came up with and then Sebastian will",
    "start": "53489",
    "end": "59910"
  },
  {
    "text": "talk about gadgets in websites so we run a study or an Alexa top 5,000 and then try to find gadgets automatically and",
    "start": "59910",
    "end": "67140"
  },
  {
    "text": "generate exploits automatically and at the end we're going to just have a very brief summary and conclusions all right",
    "start": "67140",
    "end": "73200"
  },
  {
    "start": "73000",
    "end": "279000"
  },
  {
    "text": "so most of you I hope are familiar with the term XSS but I'm going to just give",
    "start": "73200",
    "end": "78450"
  },
  {
    "text": "you a 30-second summary so what you do in Nexus S is you have something like that and the attacker does something",
    "start": "78450",
    "end": "86369"
  },
  {
    "text": "interesting if you are just pen testing you get alert one and or alert something else so the right way to fix XSS is to",
    "start": "86369",
    "end": "93659"
  },
  {
    "text": "do the right type of escaping in the right context so in the previous example it will be HTML entities what it depends",
    "start": "93659",
    "end": "99930"
  },
  {
    "text": "on what type of vulnerability you have and doing this by humans is very difficult so the right way to do it is",
    "start": "99930",
    "end": "106500"
  },
  {
    "text": "to do have your templating system do it for you and this has been this is",
    "start": "106500",
    "end": "112290"
  },
  {
    "text": "proving to be very difficult for the industry and in our case we work in Google and we also have had troubles the",
    "start": "112290",
    "end": "119009"
  },
  {
    "text": "this is an this is a graph representing the amount of money with paid as part of the Google vulnerability reward program",
    "start": "119009",
    "end": "124350"
  },
  {
    "text": "and it represents how much we paid for XSS and for everything else combined and as you can see the vast majority of box",
    "start": "124350",
    "end": "131069"
  },
  {
    "text": "is his XSS like 2/3 or so so fixing it says discard or at",
    "start": "131069",
    "end": "138150"
  },
  {
    "text": "least has been hard for us so let's stay focused on mitigating the tax so that what that means is that there there are mitigations and that's what we're going",
    "start": "138150",
    "end": "144659"
  },
  {
    "text": "to talk about in this presentation but rather than fixing the book try to mitigate it or try to make the attack",
    "start": "144659",
    "end": "150629"
  },
  {
    "text": "harder or impossible in some cases this is very common for binary bucks where you have a SLR and Depp and etc and from",
    "start": "150629",
    "end": "157500"
  },
  {
    "text": "the web we have other mitigations like CSP exist as filters while halves etcetera so one important thing that we",
    "start": "157500",
    "end": "163019"
  },
  {
    "text": "want to make sure it's clear is that these mitigations do not fix the bug they leave the lack of escaping there",
    "start": "163019",
    "end": "168720"
  },
  {
    "text": "but they make the attack either impossible or really really difficult or that's what they attempt so in the",
    "start": "168720",
    "end": "176400"
  },
  {
    "text": "context of this presentation we're not going to teach you how to find XSS we assume that they are everywhere and easy",
    "start": "176400",
    "end": "181470"
  },
  {
    "text": "to find as we have an obscene in our past decade or so so we want to bypass",
    "start": "181470",
    "end": "187650"
  },
  {
    "text": "the mitigations that make the exploitation of those works harder so during this presentation you should",
    "start": "187650",
    "end": "192780"
  },
  {
    "text": "assume that you have an XSS and you are stopped by the XSS filter or by something else in the middle you want to",
    "start": "192780",
    "end": "199139"
  },
  {
    "text": "bypass it to show a better park or - I don't know steal some cookies or something so all these mitigations work",
    "start": "199139",
    "end": "205919"
  },
  {
    "text": "very similarly they all look at the near stack or attributes like Watson access filters blob to request HTML sanitizers",
    "start": "205919",
    "end": "213180"
  },
  {
    "text": "clean them up from from HTML and CSS acute it",
    "start": "213180",
    "end": "218220"
  },
  {
    "text": "they look if it's something that is trusted in some way like whether they have a hash that is trusted or comes",
    "start": "218220",
    "end": "224430"
  },
  {
    "text": "from a legitimate place or they have a secret nuns or they were injected dynamically correctly etc and so this is",
    "start": "224430",
    "end": "232530"
  },
  {
    "text": "an example of just to give you a brief introduction about how they are different and how they are the same so it's a website you go to the happy cloud",
    "start": "232530",
    "end": "238440"
  },
  {
    "text": "they have a cloud responds with an exercise so if you have mod security or replication for well then it stops it at",
    "start": "238440",
    "end": "246690"
  },
  {
    "text": "the request level in the cloud then if you have no script and in Firefox then",
    "start": "246690",
    "end": "251879"
  },
  {
    "text": "what happens is that it gets blocked before the request is made so no script the tag that this looks like an excess",
    "start": "251879",
    "end": "257430"
  },
  {
    "text": "and then it stops it then Chrome and Internet Explorer work differently they",
    "start": "257430",
    "end": "262650"
  },
  {
    "text": "see the request and they see the response and then they block the attack if the response is in the request and it looks like an",
    "start": "262650",
    "end": "268349"
  },
  {
    "text": "attack and finally CSP ignores the requests row and then you see is like easy success s is this payload good or",
    "start": "268349",
    "end": "276750"
  },
  {
    "text": "not and if it's not then it blocks it alright so without introduction to mitigations",
    "start": "276750",
    "end": "282240"
  },
  {
    "start": "279000",
    "end": "433000"
  },
  {
    "text": "and what is a sucess then we are going to talk to you about what is a script gadgets so we're going to give you a very simple example of what is the",
    "start": "282240",
    "end": "289349"
  },
  {
    "text": "simplest most obvious most the lamest like script budget that we have right so",
    "start": "289349",
    "end": "295379"
  },
  {
    "text": "we have a script budget in this case will be the following so you have HTML",
    "start": "295379",
    "end": "303800"
  },
  {
    "text": "snippet that doesn't do anything ideas that has deep that has a couple attributes and has i'ma button and then",
    "start": "303800",
    "end": "311159"
  },
  {
    "text": "there is some script somewhere in the page that activates that that HTML and",
    "start": "311159",
    "end": "316259"
  },
  {
    "text": "does something else with it maybe it wants to have some pretty CSS or something like that and it just adds it",
    "start": "316259",
    "end": "323099"
  },
  {
    "text": "somewhere else so in this case then it takes the HTML of that attribute and it",
    "start": "323099",
    "end": "329009"
  },
  {
    "text": "detects about the Continental attribute and put it as HTML so in this case then",
    "start": "329009",
    "end": "334289"
  },
  {
    "text": "what if you have a mitigation this is what will happen so you have instead of",
    "start": "334289",
    "end": "339719"
  },
  {
    "text": "injecting that you inject a deep that just has a script tag in the a data attribute and the sanitizer will just",
    "start": "339719",
    "end": "346830"
  },
  {
    "text": "allow it because of course like there's nothing wrong with that but because there is a snippet of code that activates it and that executes it",
    "start": "346830",
    "end": "353490"
  },
  {
    "text": "and then you just have a normal traditional script exercise so yes so",
    "start": "353490",
    "end": "359370"
  },
  {
    "text": "summarize very quickly what happens is that they convert the otherwise say attribute into something active and",
    "start": "359370",
    "end": "366120"
  },
  {
    "text": "instead of injecting script which will be detected by all these mitigations then you just inject something else and",
    "start": "366120",
    "end": "371270"
  },
  {
    "text": "these are passive says that look for for this and then what we want to do now is to try to figure out how prevalent DC",
    "start": "371270",
    "end": "378060"
  },
  {
    "text": "snippets of code are like maybe they never happen maybe they happen sometimes so as a preview of what we're going to",
    "start": "378060",
    "end": "385770"
  },
  {
    "text": "present later today or later right now Gradius present are present in all but",
    "start": "385770",
    "end": "390900"
  },
  {
    "text": "one of the tested popular web framework so you use one of the popular web frameworks they are in all of them except react that this can be used to",
    "start": "390900",
    "end": "397560"
  },
  {
    "text": "bypass most mitigations so we bypassed while the mitigations in several leadership some mitigations are by",
    "start": "397560",
    "end": "404640"
  },
  {
    "text": "passable in some framework some aren't so all of indications were bypassed all of the frameworks except one was",
    "start": "404640",
    "end": "410190"
  },
  {
    "text": "bypassed and we also created exploits for websites on the internet so for code",
    "start": "410190",
    "end": "415230"
  },
  {
    "text": "that is not in frameworks or libraries both custom-made we were able to automatically find and generate an expla",
    "start": "415230",
    "end": "421320"
  },
  {
    "text": "for 20% of websites in Alexa top 5,000 there is a lower bound we think that the actual number is way higher okay so with",
    "start": "421320",
    "end": "429240"
  },
  {
    "text": "that Cotto is not going to talk to you about the userland stuff not the other ones though thank you that order so script gadgets",
    "start": "429240",
    "end": "437160"
  },
  {
    "start": "433000",
    "end": "887000"
  },
  {
    "text": "in J's libraries we you already know what script gadgets are those existing snippets of code in the web site that",
    "start": "437160",
    "end": "444140"
  },
  {
    "text": "sort of upgrades the HTML that's present and looks benign to XSS mitigations into",
    "start": "444140",
    "end": "450330"
  },
  {
    "text": "something that will execute code right and when we encountered this problem we",
    "start": "450330",
    "end": "456330"
  },
  {
    "text": "started thinking is this thing prevalent like our gadgets common are those",
    "start": "456330",
    "end": "461340"
  },
  {
    "text": "snippets existing in most of the websites most of the frameworks or is it something really exotic that's not",
    "start": "461340",
    "end": "466740"
  },
  {
    "text": "really with no practical use for the articles and second of all given that we",
    "start": "466740",
    "end": "475920"
  },
  {
    "text": "find a couple of gadgets or lots of them how effective they are in actually",
    "start": "475920",
    "end": "481380"
  },
  {
    "text": "bypassing the XSS mitigations because that differs for for every class of",
    "start": "481380",
    "end": "487110"
  },
  {
    "text": "mitigation so we started from those two questions and first we started looking",
    "start": "487110",
    "end": "493560"
  },
  {
    "text": "at JavaScript libraries and started looking for gadgets in this code base so",
    "start": "493560",
    "end": "498810"
  },
  {
    "text": "we took 16 popular web frameworks or JavaScript libraries we included",
    "start": "498810",
    "end": "504960"
  },
  {
    "text": "angularjs we included polymer included reacts jquery knockout backbone all that",
    "start": "504960",
    "end": "511560"
  },
  {
    "text": "we considered popular and modern was on that list then we started just simply",
    "start": "511560",
    "end": "518039"
  },
  {
    "text": "manually looking at the code of those libraries in order to find script gadgets so for every library in this",
    "start": "518040",
    "end": "524640"
  },
  {
    "text": "list we were trying to bypass every of the mitigations tested so we took a",
    "start": "524640",
    "end": "531960"
  },
  {
    "text": "couple of exercise filters we took a couple of sanitizers we took only one example of Web Application",
    "start": "531960",
    "end": "538139"
  },
  {
    "text": "Firewall do a spot security with the charoset and we took several variants of content security policy so we had like a",
    "start": "538139",
    "end": "545430"
  },
  {
    "text": "matrix of libraries and mitigations and we tried to come up with a bypass",
    "start": "545430",
    "end": "552660"
  },
  {
    "text": "example for each cell in this matrix so",
    "start": "552660",
    "end": "559339"
  },
  {
    "text": "in order to describe this it's it's best to start by looking at the gadgets by",
    "start": "559519",
    "end": "566100"
  },
  {
    "text": "the mitigations very target so first let's talk about web application firewalls and the XSS filters they",
    "start": "566100",
    "end": "572880"
  },
  {
    "text": "detect XSS attempts by looking at the request parameters sometimes using",
    "start": "572880",
    "end": "578250"
  },
  {
    "text": "regular expressions sometimes using a more elaborate logic but essentially that's what they target the request",
    "start": "578250",
    "end": "584730"
  },
  {
    "text": "parameters and with we thought initially that gadgets if they existed and if they",
    "start": "584730",
    "end": "592139"
  },
  {
    "text": "were prevalent they would be really successful in bypassing this kind of access mitigation solely because how",
    "start": "592139",
    "end": "598949"
  },
  {
    "text": "gadgets work most of them they allow for encoding their payload in a different",
    "start": "598949",
    "end": "604709"
  },
  {
    "text": "context you will see an example later on some gadgets also pasta called to eval",
    "start": "604709",
    "end": "609990"
  },
  {
    "text": "and usually we don't have to include the eval function in the payload in the HTML",
    "start": "609990",
    "end": "617040"
  },
  {
    "text": "snippet that we try to inject into the website so this gets this would be",
    "start": "617040",
    "end": "623069"
  },
  {
    "text": "detected by by web application firewalls pretty easily but since we don't do not",
    "start": "623069",
    "end": "628259"
  },
  {
    "text": "need to inject the evil the literal eval function then it would allow us to",
    "start": "628259",
    "end": "636180"
  },
  {
    "text": "bypass those mitigation C to be transparent to the to the mitigation and finally most of the gadgets do not",
    "start": "636180",
    "end": "644490"
  },
  {
    "text": "require us to inject any script tags any other on inline event handlers so something that is very obvious as an XSS",
    "start": "644490",
    "end": "651720"
  },
  {
    "text": "a tackle attempt so let's look at an example verse was a knock out JavaScript",
    "start": "651720",
    "end": "658170"
  },
  {
    "text": "library and this one has like a small templating language inside of it so this HTML snippet",
    "start": "658170",
    "end": "665360"
  },
  {
    "text": "actually tells the knockout to look for to inject hello world as a string into",
    "start": "665360",
    "end": "675200"
  },
  {
    "text": "the into the content of the of this development right using some custom language for novelty in specific what it",
    "start": "675200",
    "end": "683030"
  },
  {
    "text": "would what this snippet triggers in knockout is several gadgets first gadget",
    "start": "683030",
    "end": "688280"
  },
  {
    "text": "is a very fairly simple one it just gets the content of the data bind attribute",
    "start": "688280",
    "end": "694850"
  },
  {
    "text": "and assigns it some variable in the application later on a knockout creates",
    "start": "694850",
    "end": "700550"
  },
  {
    "text": "a function a JavaScript function in the body of that function there is the hello",
    "start": "700550",
    "end": "707390"
  },
  {
    "text": "world expression so literally there is a new function created by knockout that",
    "start": "707390",
    "end": "714200"
  },
  {
    "text": "will contain something originally present in the HTML code that we I assume injected through some injection",
    "start": "714200",
    "end": "721610"
  },
  {
    "text": "flow and finally the last cutter that we need to complete the chain is no code",
    "start": "721610",
    "end": "726890"
  },
  {
    "text": "will execute that newly created function so that's all we need to actually construct an attack that would bypass",
    "start": "726890",
    "end": "733910"
  },
  {
    "text": "the excesses filters and web application firewalls so to summarize there is a gadget in",
    "start": "733910",
    "end": "739460"
  },
  {
    "text": "knockout that upgrades the value of the data bind attribute into an eval call",
    "start": "739460",
    "end": "745130"
  },
  {
    "text": "the function constructor is essentially an eval equivalent in JavaScript so in",
    "start": "745130",
    "end": "750740"
  },
  {
    "text": "order to access a website that happens to use the knockout library and also on top of that uses an XSS filter on a web",
    "start": "750740",
    "end": "757940"
  },
  {
    "text": "application firewall instead of injecting script or either no image source equals exon error equals your",
    "start": "757940",
    "end": "764060"
  },
  {
    "text": "payload it's enough if you just injected this fairly innocent looking to the",
    "start": "764060",
    "end": "771020"
  },
  {
    "text": "mitigations div element but there are way more examples of this so in bootstrap you can have tooltips so",
    "start": "771020",
    "end": "780520"
  },
  {
    "text": "bootstrap is a UI component library and most of the components can also be",
    "start": "780520",
    "end": "786980"
  },
  {
    "text": "accompanied by a tooltip so if you mouse over certain elements there would be some new content displayed fortunately",
    "start": "786980",
    "end": "792800"
  },
  {
    "text": "for us this content can also be HTML but it's being taken from the title",
    "start": "792800",
    "end": "798310"
  },
  {
    "text": "attribute so we can just encode it correctly according to say HTML",
    "start": "798310",
    "end": "803529"
  },
  {
    "text": "specification correctly in the attribute value context and this script this",
    "start": "803529",
    "end": "811600"
  },
  {
    "text": "script payload is completely transparent to the XSS mitigations and we were able",
    "start": "811600",
    "end": "818380"
  },
  {
    "text": "through the through that we are able to leverage bootstrap into activating our payload for us or a similar example in",
    "start": "818380",
    "end": "825610"
  },
  {
    "text": "dojo toolkit it's also some kind of UI component library so what dojo does it just takes the",
    "start": "825610",
    "end": "833079"
  },
  {
    "text": "value of the data dojo props attribute concatenated with some strings and then passes its bus",
    "start": "833079",
    "end": "839110"
  },
  {
    "text": "passes it to the eval function which is everything that we need in order to bypass the web application firewalls and",
    "start": "839110",
    "end": "845139"
  },
  {
    "text": "accesses filters because for the XSS filter I don't actually see the",
    "start": "845139",
    "end": "851529"
  },
  {
    "text": "JavaScript code right if I would be an XSS filter thankfully I'm not okay just",
    "start": "851529",
    "end": "858040"
  },
  {
    "text": "some briefly summarize this this section is what we found out is most of the",
    "start": "858040",
    "end": "863500"
  },
  {
    "text": "framers actually contain gadgets like that that are successful in bypassing web application firewalls as exemplified",
    "start": "863500",
    "end": "869949"
  },
  {
    "text": "by the modsecurity caroule set and the XSS filters built-in into the browsers so for example in we were able to bypass",
    "start": "869949",
    "end": "876910"
  },
  {
    "text": "chrome access auditor in 13 out of 16 libraries that we tested not security we",
    "start": "876910",
    "end": "882579"
  },
  {
    "text": "were able to bypass in 9 9 libraries and so on and so forth let's go to the to",
    "start": "882579",
    "end": "889269"
  },
  {
    "start": "887000",
    "end": "985000"
  },
  {
    "text": "the next section HTML sanitizers sometimes web applications actually need to display",
    "start": "889269",
    "end": "896040"
  },
  {
    "text": "untrusted HTML content coming from the user like let's say you have a web mail application that's a very common example",
    "start": "896040",
    "end": "902939"
  },
  {
    "text": "so what that's where HTML sanitizers come into place they take this untrusted",
    "start": "902939",
    "end": "910000"
  },
  {
    "text": "content try to filter out everything that is bad that would contain JavaScript and leave everything else",
    "start": "910000",
    "end": "916509"
  },
  {
    "text": "intact so for example script elements would be removed on there and other",
    "start": "916509",
    "end": "923510"
  },
  {
    "text": "event handlers would be removed but I know a peacock would be left intact some",
    "start": "923510",
    "end": "929750"
  },
  {
    "text": "sanitizers often white list the data attributes this is a recently new",
    "start": "929750",
    "end": "935540"
  },
  {
    "text": "addition to the HTML specification that usually contains well data right so that's not code it shouldn't actually be",
    "start": "935540",
    "end": "942350"
  },
  {
    "text": "removed gadgets we found are really useful in bypassing HTML sanitizers for",
    "start": "942350",
    "end": "950720"
  },
  {
    "text": "two reasons first of all this JavaScript code that we want to execute can be",
    "start": "950720",
    "end": "956930"
  },
  {
    "text": "present in in those benign attributes like ID or title or other attributes as",
    "start": "956930",
    "end": "962300"
  },
  {
    "text": "you will see soon and the second reason is that the gadgets very often leverage",
    "start": "962300",
    "end": "968990"
  },
  {
    "text": "the data to good value so you actually put parts of the payload of parts of the code into data attributes and the",
    "start": "968990",
    "end": "976820"
  },
  {
    "text": "frameworks themselves do the heavy lifting into upgrading it and actually executing that payload transparent to",
    "start": "976820",
    "end": "983360"
  },
  {
    "text": "the HTML sanitizers so a couple of examples ajaxify for some really weird reason",
    "start": "983360",
    "end": "990769"
  },
  {
    "start": "985000",
    "end": "1035000"
  },
  {
    "text": "decides that a div with a class of document script should actually be",
    "start": "990769",
    "end": "996170"
  },
  {
    "text": "created as a script and the text content of this element will be the body of the",
    "start": "996170",
    "end": "1001269"
  },
  {
    "text": "newly created and inserted script but that's common like such buttons are very",
    "start": "1001269",
    "end": "1006699"
  },
  {
    "text": "common that this is why actually gadgets are interesting as as accesses by fast mechanism and the same example as before",
    "start": "1006699",
    "end": "1014889"
  },
  {
    "text": "write bootstrap there it turns out that the very same vector also works",
    "start": "1014889",
    "end": "1020069"
  },
  {
    "text": "brilliantly for bypassing HTML sanitizers which exemplifies the fact",
    "start": "1020069",
    "end": "1025089"
  },
  {
    "text": "that you don't need to find a unique gadget for every XSS mitigations sometimes a single gadgets can bypass a",
    "start": "1025089",
    "end": "1030970"
  },
  {
    "text": "couple of them unmodified to briefly",
    "start": "1030970",
    "end": "1036339"
  },
  {
    "start": "1035000",
    "end": "1170000"
  },
  {
    "text": "summarize this we were moderately successful in bypassing the HTML scientist with the gadgets that we found",
    "start": "1036339",
    "end": "1042308"
  },
  {
    "text": "in J's libraries so yes for Dom purify we were able to bypass",
    "start": "1042309",
    "end": "1048940"
  },
  {
    "text": "bypass dhtml scientist in nine javascript libraries out of sixteen",
    "start": "1048940",
    "end": "1054640"
  },
  {
    "text": "enclosure HTML sanitizer it was only six of the libraries and finally let's get",
    "start": "1054640",
    "end": "1062620"
  },
  {
    "text": "back to the finest of the XSS mitigations may be or at least the most",
    "start": "1062620",
    "end": "1070060"
  },
  {
    "text": "i know sexy one content security policies content security policy works on a completely different level it",
    "start": "1070060",
    "end": "1076090"
  },
  {
    "text": "doesn't try to identify anything in the request parameters it only tries to",
    "start": "1076090",
    "end": "1084970"
  },
  {
    "text": "distinguish trusted scripts from untrusted scripts using various means and of course untrusted scripts are",
    "start": "1084970",
    "end": "1092500"
  },
  {
    "text": "being stopped from executing so depending on a CSP mode the way that a",
    "start": "1092500",
    "end": "1099010"
  },
  {
    "text": "policy determines which scripts are trusted so coming from the application outer and not the attacker there are",
    "start": "1099010",
    "end": "1107860"
  },
  {
    "text": "different ways of determining that so first one the most popular traditional one i think it was the first first mode",
    "start": "1107860",
    "end": "1114880"
  },
  {
    "text": "of CSP actually it's the white keys right so we have a white list of urls or white list of origins and only scripts",
    "start": "1114880",
    "end": "1121540"
  },
  {
    "text": "loaded from those origins are allowed to execute then there's a second mode of",
    "start": "1121540",
    "end": "1128440"
  },
  {
    "text": "operation of content security policy which is non spaced so trusted scripts",
    "start": "1128440",
    "end": "1134200"
  },
  {
    "text": "are recognized by having a correct nonce secret value that is unknown to the",
    "start": "1134200",
    "end": "1142420"
  },
  {
    "text": "attacker so if an attacker injects injects a script that doesn't carry the correct nonce value it will be stopped",
    "start": "1142420",
    "end": "1148720"
  },
  {
    "text": "from executing unfortunately it turned out that content security policy is",
    "start": "1148720",
    "end": "1153730"
  },
  {
    "text": "pretty hard to adopt on existing websites so the community came up with a",
    "start": "1153730",
    "end": "1160180"
  },
  {
    "text": "list of CSP keywords that make the adoption a little bit easier at the expense of the security so let's first",
    "start": "1160180",
    "end": "1167350"
  },
  {
    "text": "start looking at the those additional keywords first one is the unsafe eval keyword and what it adds to the policy",
    "start": "1167350",
    "end": "1175300"
  },
  {
    "start": "1170000",
    "end": "1394000"
  },
  {
    "text": "is a slight relaxation so your trusted scripts are now allowed to call an eval",
    "start": "1175300",
    "end": "1181180"
  },
  {
    "text": "function which seems simply benign I mean you shouldn't pass anything untrusted and",
    "start": "1181180",
    "end": "1187099"
  },
  {
    "text": "the scripts were loaded from say a good origin so what's the worst that can happen",
    "start": "1187099",
    "end": "1192139"
  },
  {
    "text": "well gadgets are the worst that could happen maybe it's pretty obvious how we",
    "start": "1192139",
    "end": "1197809"
  },
  {
    "text": "can use gadgets to bypass the unsafe evil version of content security policy simply because a lot of gadgets will",
    "start": "1197809",
    "end": "1204139"
  },
  {
    "text": "call evil or on something coming from the HTML that can be injected by the",
    "start": "1204139",
    "end": "1209330"
  },
  {
    "text": "attacker as an example underscore library is a templating library as well",
    "start": "1209330",
    "end": "1214639"
  },
  {
    "text": "so we can simply inject an underscore template that contains those this",
    "start": "1214639",
    "end": "1221210"
  },
  {
    "text": "special syntax for underscore the percent tax and whatever is in the",
    "start": "1221210",
    "end": "1226719"
  },
  {
    "text": "inside those percent tax will actually be passed to evil so that's a very",
    "start": "1226719",
    "end": "1232339"
  },
  {
    "text": "simple example then came strict dynamic a recent addition to content security policy",
    "start": "1232339",
    "end": "1238690"
  },
  {
    "text": "strict dynamic is the relaxation that allows the trusted script to",
    "start": "1238690",
    "end": "1245299"
  },
  {
    "text": "programmatically dynamically create new script elements and those new script",
    "start": "1245299",
    "end": "1250460"
  },
  {
    "text": "elements would be blessed by the content security policy so they would not need",
    "start": "1250460",
    "end": "1256849"
  },
  {
    "text": "to have a correct nonce value for example we would be trusted solely because they will create it from a",
    "start": "1256849",
    "end": "1262989"
  },
  {
    "text": "trusted root let's say right so what already trusted script it turned out",
    "start": "1262989",
    "end": "1268879"
  },
  {
    "text": "that gadgets are quite successful in bypassing content security policy with straight dynamic solely because creating",
    "start": "1268879",
    "end": "1277099"
  },
  {
    "text": "new script elements from something that was already existing in the Dom in the",
    "start": "1277099",
    "end": "1282919"
  },
  {
    "text": "HTML code of the web page is a common patterning in those libraries as an",
    "start": "1282919",
    "end": "1288049"
  },
  {
    "text": "example let's look at the jQuery Mobile so what we have here is some pop-up",
    "start": "1288049",
    "end": "1294789"
  },
  {
    "text": "functionality of jQuery Mobile that allows this library to enrich a certain",
    "start": "1294789",
    "end": "1302989"
  },
  {
    "text": "HTML element with additional behavior but as a hint to debugging the",
    "start": "1302989",
    "end": "1309950"
  },
  {
    "text": "applications jQuery Mobile will insert an HTML comment with the ID of the attribute that was just enriched",
    "start": "1309950",
    "end": "1316760"
  },
  {
    "text": "unfortunately they do it in a pretty unsafe way so we can simply escape the",
    "start": "1316760",
    "end": "1322320"
  },
  {
    "text": "comment as you can see in the ID attribute and start injecting our HTML code which is by the way we could we",
    "start": "1322320",
    "end": "1328920"
  },
  {
    "text": "could say HTML escape descriptor here it wouldn't matter right so there would not be a literal script tag there with the",
    "start": "1328920",
    "end": "1337110"
  },
  {
    "text": "angle brackets so when jQuery Mobile inserts this ID attribute into the web",
    "start": "1337110",
    "end": "1345000"
  },
  {
    "text": "page it defers to the jQuery HTML function and jQuery HTML function is a",
    "start": "1345000",
    "end": "1350700"
  },
  {
    "text": "wrapper over inner HTML assignment with one exception and that exception is that",
    "start": "1350700",
    "end": "1356190"
  },
  {
    "text": "it tries to look for script tags in the string and creates them dynamically",
    "start": "1356190",
    "end": "1362850"
  },
  {
    "text": "instead of just passing them to inner HTML because adding a script element",
    "start": "1362850",
    "end": "1369360"
  },
  {
    "text": "through inner HTML would not work for various reasons so jQuery has a workaround for the behavior and that",
    "start": "1369360",
    "end": "1376950"
  },
  {
    "text": "particular workaround allows us to use jQuery as a gadget in jQuery Mobile in",
    "start": "1376950",
    "end": "1382320"
  },
  {
    "text": "this particular example so if you have an application that uses jQuery Mobile",
    "start": "1382320",
    "end": "1387630"
  },
  {
    "text": "and you happen to have an XSS there but there's a strict dynamic content security policy this is how to bypass it",
    "start": "1387630",
    "end": "1393470"
  },
  {
    "text": "and finally let's get back to the traditional content security policies",
    "start": "1393470",
    "end": "1399810"
  },
  {
    "start": "1394000",
    "end": "1457000"
  },
  {
    "text": "the ones without unsafe eval without strict dynamic without unsafe in language we kind of left out of this",
    "start": "1399810",
    "end": "1406020"
  },
  {
    "text": "presentation because it's pretty obvious how to bypass them it wasn't that easy",
    "start": "1406020",
    "end": "1412290"
  },
  {
    "text": "to bypass those content security policies for two reasons we couldn't use",
    "start": "1412290",
    "end": "1418050"
  },
  {
    "text": "any gadgets that end in inner HTML or eval call because this would be detected",
    "start": "1418050",
    "end": "1423450"
  },
  {
    "text": "by content security policy and we couldn't add new script elements because there's no strict dynamic we would have",
    "start": "1423450",
    "end": "1429870"
  },
  {
    "text": "to know the correct notes for example or the script element would have to be loaded from a trusted whitelist which is",
    "start": "1429870",
    "end": "1435630"
  },
  {
    "text": "obviously something we as an attacker do not want to",
    "start": "1435630",
    "end": "1442460"
  },
  {
    "text": "fortunately we were able to bypass such CSPs with gadgets in expression process",
    "start": "1442590",
    "end": "1448650"
  },
  {
    "text": "and as a bonus it turned out that the very same vectors also work for all the other medications so we won't complain",
    "start": "1448650",
    "end": "1457710"
  },
  {
    "start": "1457000",
    "end": "1569000"
  },
  {
    "text": "what do I mean by the expression process so there's several JavaScript frameworks",
    "start": "1457710",
    "end": "1462850"
  },
  {
    "text": "that have templating libraries a",
    "start": "1462850",
    "end": "1468310"
  },
  {
    "text": "template key component inside of them and they allow for certain they have",
    "start": "1468310",
    "end": "1475420"
  },
  {
    "text": "like a certain custom language for the expressions that could be embedded into",
    "start": "1475420",
    "end": "1481750"
  },
  {
    "text": "the HTML and those expressions for example this customer dot name",
    "start": "1481750",
    "end": "1487080"
  },
  {
    "text": "expression is meant for I believe it's Oralia code it's meant it instructs your",
    "start": "1487080",
    "end": "1496360"
  },
  {
    "text": "framework to insert a property name of some object called customer into this",
    "start": "1496360",
    "end": "1503520"
  },
  {
    "text": "table cell element when rendering the website this yellow code the customer",
    "start": "1503520",
    "end": "1510610"
  },
  {
    "text": "dot name is not JavaScript this is some custom language created by by the",
    "start": "1510610",
    "end": "1516070"
  },
  {
    "text": "already a framework in this example with that gets passed by irelia and then",
    "start": "1516070",
    "end": "1522850"
  },
  {
    "text": "later on evaluated so what irelia does is it it creates a chain of functions",
    "start": "1522850",
    "end": "1530140"
  },
  {
    "text": "that will eventually fetch the name property of some customer object and then inserted using inner HTML or inner",
    "start": "1530140",
    "end": "1538000"
  },
  {
    "text": "text into this TD element it turns out that we've sufficiently complex",
    "start": "1538000",
    "end": "1544000"
  },
  {
    "text": "expression languages in those frameworks we can actually run arbitrary JavaScript by passing CSP as an example there has",
    "start": "1544000",
    "end": "1554800"
  },
  {
    "text": "been prior research by passing the angularjs sandbox mechanism by for",
    "start": "1554800",
    "end": "1561160"
  },
  {
    "text": "example my dear Hydra and then other researchers and this is an example of of actually gadgety behavior in angularjs",
    "start": "1561160",
    "end": "1568710"
  },
  {
    "text": "but we kind of generalize that concept of built built on this",
    "start": "1568710",
    "end": "1575080"
  },
  {
    "start": "1569000",
    "end": "1653000"
  },
  {
    "text": "so this is how you exploit the irelia into executing alert essentially let's",
    "start": "1575080",
    "end": "1581200"
  },
  {
    "text": "let's see what's what's happening so first of all we create a named reference",
    "start": "1581200",
    "end": "1586269"
  },
  {
    "text": "to this diff element we name it simply full such that we can refer to it later on then we we you can observe that we",
    "start": "1586269",
    "end": "1594940"
  },
  {
    "text": "try to bind to something this means that we instruct irelia to pass the value of",
    "start": "1594940",
    "end": "1600519"
  },
  {
    "text": "this attribute as this custom expression so what we do is we get the reference to",
    "start": "1600519",
    "end": "1606519"
  },
  {
    "text": "this development then we check the owner document property that happens to be the",
    "start": "1606519",
    "end": "1612850"
  },
  {
    "text": "document object then from the document object it's pretty easy to get the reference to the window which is the",
    "start": "1612850",
    "end": "1618460"
  },
  {
    "text": "default view this is already a property of DOM and then once we have a reference",
    "start": "1618460",
    "end": "1624789"
  },
  {
    "text": "to the window we simply call the knowledge a sorry alert function with parameter one this is but so we are able",
    "start": "1624789",
    "end": "1631899"
  },
  {
    "text": "to convert the existing custom expression in irelia language into",
    "start": "1631899",
    "end": "1637690"
  },
  {
    "text": "something that results in arbitrary JavaScript code execution by getting the reference to the window object and this",
    "start": "1637690",
    "end": "1644200"
  },
  {
    "text": "particular payload would bypass all the mitigations so both web application firewall services XSS filters and all",
    "start": "1644200",
    "end": "1650619"
  },
  {
    "text": "variants of content security policy but there's more right there's a couple of",
    "start": "1650619",
    "end": "1656830"
  },
  {
    "text": "frameworks each of them have different expression languages and this is for example how you would do it in in",
    "start": "1656830",
    "end": "1661960"
  },
  {
    "text": "polymer we inject a template element with a couple of expressions so first",
    "start": "1661960",
    "end": "1668879"
  },
  {
    "text": "you have to read it bottom to top four reasons first of all we overwrite the",
    "start": "1668879",
    "end": "1675570"
  },
  {
    "text": "privates route data house property which is something is something akin to this",
    "start": "1675570",
    "end": "1680919"
  },
  {
    "text": "object in JavaScript with again a reference to the window and then we are",
    "start": "1680919",
    "end": "1688389"
  },
  {
    "text": "able to call the alert function bound to the window object that we overrode just",
    "start": "1688389",
    "end": "1694960"
  },
  {
    "text": "before and actually the second the second argument is being ignored so this",
    "start": "1694960",
    "end": "1701139"
  },
  {
    "text": "is again an alert through the expression language of polymer",
    "start": "1701139",
    "end": "1707340"
  },
  {
    "text": "it turns out that we are able to bypass",
    "start": "1707500",
    "end": "1712570"
  },
  {
    "text": "the content security policy in a couple of frameworks tested so as for the",
    "start": "1712570",
    "end": "1717880"
  },
  {
    "text": "whitelist base CSP we are able to found bypasses we were able to find bypasses",
    "start": "1717880",
    "end": "1723250"
  },
  {
    "text": "in 3 out of 16 frameworks for announces it's for and all the other variants are",
    "start": "1723250",
    "end": "1729010"
  },
  {
    "text": "obviously more easier to bypass because because because of them relaxing the",
    "start": "1729010",
    "end": "1734350"
  },
  {
    "text": "content security policy and enabling some of the cutters that wouldn't work in in the in the base case this is just",
    "start": "1734350",
    "end": "1743170"
  },
  {
    "text": "a sample of the research that we did in the JavaScript libraries we found I",
    "start": "1743170",
    "end": "1748860"
  },
  {
    "text": "think over 50 cut it's something like that we were able to bypass our success",
    "start": "1748860",
    "end": "1756970"
  },
  {
    "text": "ratio for bypasses was over 50 50 % and every tested mitigation was bypassed at",
    "start": "1756970",
    "end": "1763090"
  },
  {
    "text": "least once and there's a github repository of all the examples also this",
    "start": "1763090",
    "end": "1768490"
  },
  {
    "text": "will be present on the blackhat website I believe almost all libraries turn",
    "start": "1768490",
    "end": "1774180"
  },
  {
    "text": "turned out to have gadgets that are interesting with the exception of react and amber Jas because it only had a",
    "start": "1774180",
    "end": "1782230"
  },
  {
    "text": "gadget in in like a development version of our development deployment of the library and it turned out that the",
    "start": "1782230",
    "end": "1788860"
  },
  {
    "text": "gadgets in the expression process are the most powerful so exercise in irelia angularjs polymer can bypass all the",
    "start": "1788860",
    "end": "1795340"
  },
  {
    "text": "mitigation so please don't have exercise to see in those applications or don't trust medications to stop them from",
    "start": "1795340",
    "end": "1802360"
  },
  {
    "text": "being exploitable and with that I'll hand over to Sebastian thank you very",
    "start": "1802360",
    "end": "1810850"
  },
  {
    "start": "1803000",
    "end": "1842000"
  },
  {
    "text": "much koto and the first part of this presentation we saw gadgets in libraries and we actually did this analysis",
    "start": "1810850",
    "end": "1817750"
  },
  {
    "text": "manually so it took a huge amount of time to investigate the source code of the libraries to find these gadgets to",
    "start": "1817750",
    "end": "1823690"
  },
  {
    "text": "build exploits and so on but we also wanted to do something at scale we wanted to see what is the status of",
    "start": "1823690",
    "end": "1829810"
  },
  {
    "text": "gadgets in the web and in in websites or popular websites and it's actually work",
    "start": "1829810",
    "end": "1835450"
  },
  {
    "text": "that we've done in cooperation with Martin Jones and Samuel gross from s AP and I will show you what we found out so",
    "start": "1835450",
    "end": "1843300"
  },
  {
    "text": "what we were interested in is how common our gadgets in custom code so just custom websites code that lives outside of libraries and",
    "start": "1843300",
    "end": "1850610"
  },
  {
    "text": "we thought that gadgets or the number of gadgets might be different in that code because libraries are very generic so it",
    "start": "1850610",
    "end": "1858420"
  },
  {
    "text": "might be pretty obvious that you have some gadgets there but custom code is more specific and maybe they are less",
    "start": "1858420",
    "end": "1864510"
  },
  {
    "text": "gadgets or maybe even more we don't know right and also we thought about how we can be",
    "start": "1864510",
    "end": "1869790"
  },
  {
    "text": "address or fix this issue if you have just gadgets in a few libraries like sixteen libraries we investigated then",
    "start": "1869790",
    "end": "1875760"
  },
  {
    "text": "we could probably go and just fix all these libraries or try to remove two gadgets from them or somehow put",
    "start": "1875760",
    "end": "1881190"
  },
  {
    "text": "safeguards in place but if gadgets are everywhere in all the websites then it will be pretty hard to address this",
    "start": "1881190",
    "end": "1886620"
  },
  {
    "text": "problem so in order to do this research we need to have some way to automate the",
    "start": "1886620",
    "end": "1891750"
  },
  {
    "text": "process of finding gadgets and I was quite non-trivial so what we wanted to",
    "start": "1891750",
    "end": "1896910"
  },
  {
    "text": "find is something like this so here we just see a very simple gadget in userland code so this uses jQuery it",
    "start": "1896910",
    "end": "1904220"
  },
  {
    "text": "reads a div element and extracts a data attribute from this design element and",
    "start": "1904220",
    "end": "1909510"
  },
  {
    "text": "then just assigned as threw in HTML so while this uses a library it's this code",
    "start": "1909510",
    "end": "1915060"
  },
  {
    "text": "is custom code right and in order to check examples like this we built a tane",
    "start": "1915060",
    "end": "1921060"
  },
  {
    "text": "tracking engine so pain tracking is the process of tracking user controlled or",
    "start": "1921060",
    "end": "1926820"
  },
  {
    "text": "tainted data throughout the execution and follow it until it reaches a security sensitive function so we built",
    "start": "1926820",
    "end": "1934050"
  },
  {
    "text": "this into a chrome and also firefox browser that enables us to track strings in the JavaScript engine and here we",
    "start": "1934050",
    "end": "1940950"
  },
  {
    "text": "again we have this very simple example where we just read a data coming from",
    "start": "1940950",
    "end": "1946980"
  },
  {
    "text": "the Dom that we assume is user control because we have an XSS and can inject elements into it I'm into the security",
    "start": "1946980",
    "end": "1954570"
  },
  {
    "text": "sensitive property in HTML in this case so what we do is we we take websites and",
    "start": "1954570",
    "end": "1960720"
  },
  {
    "text": "load this into our tained engine and our taint engine will report these data flows so after executing the function",
    "start": "1960720",
    "end": "1967890"
  },
  {
    "text": "and executing all the JavaScript we know hey there was actually data flow from the Dom into this securities and different",
    "start": "1967890",
    "end": "1973220"
  },
  {
    "text": "then we pass on this data into an exploit generator the exploit generator will look at this data flow try to come",
    "start": "1973220",
    "end": "1980090"
  },
  {
    "text": "up with an XSS exploit and create an a piece of HTML that triggers the gadget",
    "start": "1980090",
    "end": "1986780"
  },
  {
    "text": "in the page so in this case we know hey this was read from a development it had a certain ID and a certain or a certain",
    "start": "1986780",
    "end": "1993320"
  },
  {
    "text": "class or whatever and the attribute where the data was coming from what was the data text attribute so we can simply",
    "start": "1993320",
    "end": "1999470"
  },
  {
    "text": "just create this element and then subsequently we simulate an XSS in the",
    "start": "1999470",
    "end": "2006250"
  },
  {
    "text": "page and the test so we just inject this back and we injected this HTML snippet",
    "start": "2006250",
    "end": "2011740"
  },
  {
    "text": "into six different positions to see when different gadgets trigger and how they",
    "start": "2011740",
    "end": "2016809"
  },
  {
    "text": "can trigger and then what we did is we ran this tool on the Alexa top 5,000",
    "start": "2016809",
    "end": "2022390"
  },
  {
    "text": "websites and we built a crawling extension for Chrome and Firefox browsers and basically just crawled all",
    "start": "2022390",
    "end": "2028539"
  },
  {
    "text": "the all the five top 5,000 URLs and the first level links so all the URLs that",
    "start": "2028539",
    "end": "2033610"
  },
  {
    "text": "we found and this your these limbs could either be located on the main domain or",
    "start": "2033610",
    "end": "2038679"
  },
  {
    "text": "on any sub or super domain of this of this page and in total we found about",
    "start": "2038679",
    "end": "2044669"
  },
  {
    "text": "650,000 URLs that we crawled on about 4500 domains it's only 4500 because in",
    "start": "2044669",
    "end": "2051700"
  },
  {
    "text": "the Alexa top 5,000 websites a lot of sites redirect so for example all the Google top-level domains like Google dot",
    "start": "2051700",
    "end": "2058888"
  },
  {
    "text": "d e do to google.fr and so on they all redirect to google.com so in the end",
    "start": "2058889",
    "end": "2063940"
  },
  {
    "text": "that the data set is a bit bit smaller and then we run this exploit generation",
    "start": "2063940",
    "end": "2069580"
  },
  {
    "text": "and injected all these gadgets into these pages and actually we were able to verify about two hundred eighty five",
    "start": "2069580",
    "end": "2075250"
  },
  {
    "text": "thousand and gadgets in in these 650,000 URLs these gadgets are not necessarily",
    "start": "2075250",
    "end": "2080560"
  },
  {
    "text": "unique but we found them on 906 domains and so what we can say here or what is",
    "start": "2080560",
    "end": "2087460"
  },
  {
    "text": "the key takeaway of this slide is that about one in five web sites have a",
    "start": "2087460",
    "end": "2092530"
  },
  {
    "text": "verified gadgets in userland code however this number is a very",
    "start": "2092530",
    "end": "2098740"
  },
  {
    "text": "conservative number because our exploit generation and gadget verification was",
    "start": "2098740",
    "end": "2104589"
  },
  {
    "text": "focused to be false positive three and we got this false-positive freeness by accepting a high number of false",
    "start": "2104589",
    "end": "2111430"
  },
  {
    "text": "negatives and actually we started looking into the data flows that we found manually and we found that a lot",
    "start": "2111430",
    "end": "2116830"
  },
  {
    "text": "of the things that we were not able to exploit automatically were also vulnerable and also had had gadgets and",
    "start": "2116830",
    "end": "2123120"
  },
  {
    "text": "that's why we believe that the real number of the edges in websites it's much much higher but we are at least",
    "start": "2123120",
    "end": "2128440"
  },
  {
    "text": "sure it's at least 20% so based on this data we started the security analysis in",
    "start": "2128440",
    "end": "2134830"
  },
  {
    "text": "and wanted to look at specific mitigations and we all know that there is a lot of resurgent where bypassing",
    "start": "2134830",
    "end": "2142000"
  },
  {
    "text": "web application firewalls and XSS filters so we wanted to focus on the other two mitigations on HTML sanitizers",
    "start": "2142000",
    "end": "2149020"
  },
  {
    "text": "and the content security policy let's start with HTML sanitizers so basically",
    "start": "2149020",
    "end": "2154450"
  },
  {
    "text": "the question that we ask ourself is where the HTML sanitizers are secure in the default settings and we saw that a",
    "start": "2154450",
    "end": "2161770"
  },
  {
    "text": "lot of sanitizers regard certain HTML attributes sb9 for example most sanitizers that we looked at allow ID or",
    "start": "2161770",
    "end": "2169210"
  },
  {
    "text": "class attributes to be present in the sanitized string also some sanitizers",
    "start": "2169210",
    "end": "2174280"
  },
  {
    "text": "and allow data attributes because they usually just contain data that is not",
    "start": "2174280",
    "end": "2179850"
  },
  {
    "text": "security relevant right so what we found that out of the data flows that we found",
    "start": "2179850",
    "end": "2185200"
  },
  {
    "text": "on these pages 70 80 78 percent of all domains had a data flow from an HTML",
    "start": "2185200",
    "end": "2191740"
  },
  {
    "text": "attribute into a security sensitive function and furthermore 60% of all the",
    "start": "2191740",
    "end": "2197560"
  },
  {
    "text": "sides exhibited a data flow from a data attribute into a security sensitive",
    "start": "2197560",
    "end": "2202900"
  },
  {
    "text": "functions so what this tells us is that is probably not secure to allow data attributes by default in HTML sanitizers",
    "start": "2202900",
    "end": "2210040"
  },
  {
    "text": "and when you use HTML sanitizers you should be very careful so usually if some sanitizers have settings where you",
    "start": "2210040",
    "end": "2215860"
  },
  {
    "text": "can like configure the data attributes are not allowed or some and for some sanitizers is an opt-in approach and",
    "start": "2215860",
    "end": "2222160"
  },
  {
    "text": "some other hand sanitizers follow this opt-out approach so be careful when using them we also investigated the ID",
    "start": "2222160",
    "end": "2228820"
  },
  {
    "text": "and class attributes and we found that ID attributes are or flows from ID attributes are present in 16% of all",
    "start": "2228820",
    "end": "2235450"
  },
  {
    "text": "that all the sites and flows from class attributes are present in 10% of all the so idea in class and boots are not that",
    "start": "2235450",
    "end": "2242220"
  },
  {
    "text": "doesn't seem to be that security-critical but still there is a certain probability that you can bypass",
    "start": "2242220",
    "end": "2248350"
  },
  {
    "text": "the sanitizers using those those attributes if you find the right gadget okay let's look at the content security",
    "start": "2248350",
    "end": "2255970"
  },
  {
    "text": "policy so here we asked ourselves how secure are different C's P keywords Kota",
    "start": "2255970",
    "end": "2262510"
  },
  {
    "text": "already introduced them and here we just looked at the CSP unsafe eval keyword and the CSP straight dynamic keyword and",
    "start": "2262510",
    "end": "2269340"
  },
  {
    "text": "for unsafe evil we so unsafe evil is it is a weird or yeah weird keyword because",
    "start": "2269340",
    "end": "2276450"
  },
  {
    "text": "until now it was considered to be safe to specified in a policy and if you actually look at real-world policy most",
    "start": "2276450",
    "end": "2282940"
  },
  {
    "text": "policies will contain the unsafe evil keyword because usually the logic is well it just renamed Evo which a lot of",
    "start": "2282940",
    "end": "2290590"
  },
  {
    "text": "websites use and but the ideas you could just eat you could just audit all the places where you evil and make sure you",
    "start": "2290590",
    "end": "2296380"
  },
  {
    "text": "don't pass user input to eval and then you're safe but that's actually not true for gadgets and we found that 40% of all",
    "start": "2296380",
    "end": "2303160"
  },
  {
    "text": "the websites had a data flow from EPI 9 HTML piece either a text inside an",
    "start": "2303160",
    "end": "2310480"
  },
  {
    "text": "element or an attribute into evil so it seems that evil is considerably weakened",
    "start": "2310480",
    "end": "2316360"
  },
  {
    "text": "the policy the same holds true for a strict dynamic so for a strict dynamic",
    "start": "2316360",
    "end": "2321640"
  },
  {
    "text": "we investigated all the data flows that go into script elements so where we can",
    "start": "2321640",
    "end": "2327640"
  },
  {
    "text": "either assign to an existing script the text or where we can control the URL of an existing script tag or where data is",
    "start": "2327640",
    "end": "2335440"
  },
  {
    "text": "passed through the jQuery dot HTML function because that again creates takes the string creates a script tags",
    "start": "2335440",
    "end": "2341560"
  },
  {
    "text": "from the string and inserts that to the Dom and we also checked whether we can",
    "start": "2341560",
    "end": "2347440"
  },
  {
    "text": "create at new elements where we control the TEC name and at the same time controlled attack of the tag name and",
    "start": "2347440",
    "end": "2354160"
  },
  {
    "text": "surprisingly we found that 73 percent of all web sites have these data flows so that's pretty high so what we conclude",
    "start": "2354160",
    "end": "2361240"
  },
  {
    "text": "from this data is that strict dynamic and unsafe ETL considerably weakened a",
    "start": "2361240",
    "end": "2366250"
  },
  {
    "text": "CSP and so you should be very careful when using this and make sure that you",
    "start": "2366250",
    "end": "2372490"
  },
  {
    "text": "don't have any gadgets on your page when you specify those keywords okay",
    "start": "2372490",
    "end": "2378310"
  },
  {
    "start": "2377000",
    "end": "2382000"
  },
  {
    "text": "let's come to the summary and conclusion so in this presentation we showed you",
    "start": "2378310",
    "end": "2384430"
  },
  {
    "start": "2382000",
    "end": "2441000"
  },
  {
    "text": "how XSS mitigations work they work by blocking attacks and not preventing",
    "start": "2384430",
    "end": "2391590"
  },
  {
    "text": "preventing XSS vulnerabilities and they mainly do so by distinguishing a benign",
    "start": "2391590",
    "end": "2396760"
  },
  {
    "text": "HTML code from malicious HTML code or potentially malicious HTML code and then",
    "start": "2396760",
    "end": "2402160"
  },
  {
    "text": "block the malicious ones and allowed to benign ones furthermore we showed you that you can",
    "start": "2402160",
    "end": "2407500"
  },
  {
    "text": "use gadgets to bypass these mitigations by injecting these benign HTML",
    "start": "2407500",
    "end": "2412690"
  },
  {
    "text": "constructs that are then upgraded by an existing code in the page to code execution we've also shown you that",
    "start": "2412690",
    "end": "2419920"
  },
  {
    "text": "these gadgets are prevalent in most modern JavaScript libraries so if you use JavaScript libraries in your",
    "start": "2419920",
    "end": "2425290"
  },
  {
    "text": "websites you're likely more neural to this attack and we've also shown you that at least 20% of all the web sites",
    "start": "2425290",
    "end": "2431760"
  },
  {
    "text": "in custom code have these gadgets but the real numbers are probably much higher in practice so where do we go",
    "start": "2431760",
    "end": "2440050"
  },
  {
    "text": "from here so the main conclusion of this talk is that is difficult to build",
    "start": "2440050",
    "end": "2445840"
  },
  {
    "start": "2441000",
    "end": "2572000"
  },
  {
    "text": "secure applications and just think about it give like hire a graduate student and",
    "start": "2445840",
    "end": "2451720"
  },
  {
    "text": "tell him who has never been taught about security who has never has not much experience and just tell him to write a",
    "start": "2451720",
    "end": "2457930"
  },
  {
    "text": "very complex web application do you think it will be secure and I guess we all agree that is probably very hard to",
    "start": "2457930",
    "end": "2464890"
  },
  {
    "text": "get a secure application out of this right and the problem that we are facing is that the web hasn't changed in 20",
    "start": "2464890",
    "end": "2471160"
  },
  {
    "text": "years so everything in the web is about turning strings into code HTTP and HTML",
    "start": "2471160",
    "end": "2476170"
  },
  {
    "text": "are based on taking a string from a server turning into the code there are all the functions that we've seen the",
    "start": "2476170",
    "end": "2481630"
  },
  {
    "text": "Dom are based on turning strings into Coach with we have about 65 functions",
    "start": "2481630",
    "end": "2487000"
  },
  {
    "text": "that take a string and that will result in code execution inside a browser and we think that the sketch AgResearch",
    "start": "2487000",
    "end": "2494290"
  },
  {
    "text": "shows that this is the main reason while XSS still exists and all the approaches",
    "start": "2494290",
    "end": "2499450"
  },
  {
    "text": "and all the things that we've done to to try to prevent or mitigate exercises actually focus on upper levels we never",
    "start": "2499450",
    "end": "2506020"
  },
  {
    "text": "changed platform and we believe that for making the web secure and fighting XSS we need",
    "start": "2506020",
    "end": "2514190"
  },
  {
    "text": "to make the platform secure so what we need to start working on is we need to get rid of all those string to code ap",
    "start": "2514190",
    "end": "2520220"
  },
  {
    "text": "is in the browser we need to have secure by default api's and we are actually",
    "start": "2520220",
    "end": "2525590"
  },
  {
    "text": "going to work on this in the next few months in parallel we can also explore",
    "start": "2525590",
    "end": "2531590"
  },
  {
    "text": "other primitives for example we see that isolation techniques are pretty pretty",
    "start": "2531590",
    "end": "2537590"
  },
  {
    "text": "effective at preventing or at least isolating or sandboxing XSS for example",
    "start": "2537590",
    "end": "2543980"
  },
  {
    "text": "we already have two sub origins proposal or we have sandbox iframes where you can",
    "start": "2543980",
    "end": "2549380"
  },
  {
    "text": "basically separate certain parts of an applications from each other so that if you have an XSS in one part it cannot",
    "start": "2549380",
    "end": "2555800"
  },
  {
    "text": "spread to the other part cannot be used to exploit other sensitive applications there's also the isolated scripts",
    "start": "2555800",
    "end": "2561620"
  },
  {
    "text": "proposal of avocado and I think we should think more about how we can isolate or or partition web applications",
    "start": "2561620",
    "end": "2569150"
  },
  {
    "text": "in this way okay what is I would like to",
    "start": "2569150",
    "end": "2574190"
  },
  {
    "start": "2572000",
    "end": "2897000"
  },
  {
    "text": "thank you for your attention and I think we still have time for questions so feel",
    "start": "2574190",
    "end": "2579800"
  },
  {
    "text": "free to ask them or just approach us after the talk [Applause]",
    "start": "2579800",
    "end": "2587569"
  },
  {
    "text": "I think there's a question can you go to the mic and ask the question",
    "start": "2589900",
    "end": "2595470"
  },
  {
    "text": "are you guys going to open-source your JavaScript teint analyzer probably not",
    "start": "2601430",
    "end": "2608140"
  },
  {
    "text": "the the problem is that the infrastructure is very very complex right now and so we are thinking about",
    "start": "2608140",
    "end": "2614960"
  },
  {
    "text": "open sourcing the teint engine but it will probably take a long while to do so",
    "start": "2614960",
    "end": "2620839"
  },
  {
    "text": "and we're not sure if it's going to happen and all did the finals there is one that is open source right yes there",
    "start": "2620839",
    "end": "2627920"
  },
  {
    "text": "are there are a couple of opens yes there is one on github I think but it",
    "start": "2627920",
    "end": "2633190"
  },
  {
    "text": "it's difficult it's just a patch set so you need to patch it you on your own into the Chrome browser and probably",
    "start": "2633190",
    "end": "2639950"
  },
  {
    "text": "update the browser because it's old so it's kind of difficult more questions",
    "start": "2639950",
    "end": "2648579"
  },
  {
    "text": "there's a question can you go to the microphone oh there is one church any",
    "start": "2649420",
    "end": "2657200"
  },
  {
    "text": "the legacy versions of these frameworks to determine fragmentation issues can",
    "start": "2657200",
    "end": "2662329"
  },
  {
    "text": "you repeat the older versions of these libraries is this all the newest stuff to you guys reviewed or did you guys go",
    "start": "2662329",
    "end": "2668930"
  },
  {
    "text": "through maybe so we didn't look at let's say like the backlog of the of the",
    "start": "2668930",
    "end": "2674980"
  },
  {
    "text": "libraries what we looked at was the current version of every of those libraries as when we did the research it",
    "start": "2674980",
    "end": "2682190"
  },
  {
    "text": "was a couple of months ago so if that answers your question I didn't have the resources to manually",
    "start": "2682190",
    "end": "2688190"
  },
  {
    "text": "analyze all I was just gonna say the the impact custom and the deviation over",
    "start": "2688190",
    "end": "2693470"
  },
  {
    "text": "your percentage of findings on true positive I'm sure is a lot greater with people that are using outdated systems",
    "start": "2693470",
    "end": "2698540"
  },
  {
    "text": "right yes that's like a known thing so what one more comment to this question",
    "start": "2698540",
    "end": "2703790"
  },
  {
    "text": "so we found a couple of interesting behaviors in different versions of libraries for example jQuery is is an",
    "start": "2703790",
    "end": "2710569"
  },
  {
    "text": "example so in jQuery one jQuery will just eval all the script tags that are in user input in jQuery two it has this",
    "start": "2710569",
    "end": "2718040"
  },
  {
    "text": "branch and when the script starts with you strict so activates a strict mode it will append the script otherwise it will",
    "start": "2718040",
    "end": "2724670"
  },
  {
    "text": "evil it and in version 3 it actually just depends the script to the Dom so",
    "start": "2724670",
    "end": "2730430"
  },
  {
    "text": "sometimes depending on the jQuery versions you have different types of bypasses so the jQuery one bypasses for example CSP unsafety",
    "start": "2730430",
    "end": "2737869"
  },
  {
    "text": "well well the jQuery version 2 bypasses consiguió and strict dynamic and 3 just",
    "start": "2737869",
    "end": "2743810"
  },
  {
    "text": "bypass a strict dynamic so there is some kind of variation and some kind of interesting mixture sometimes you also",
    "start": "2743810",
    "end": "2749960"
  },
  {
    "text": "see that libraries are using other lives so so many libraries use fallback to",
    "start": "2749960",
    "end": "2755210"
  },
  {
    "text": "jQuery functionality and so for example you sometimes see they check for the dollar function and if the dollar",
    "start": "2755210",
    "end": "2760820"
  },
  {
    "text": "function is there they will use the jquery function and that actually depends on the jquery library version",
    "start": "2760820",
    "end": "2766010"
  },
  {
    "text": "which gadget you have in the page which is kind of an interesting behavior so",
    "start": "2766010",
    "end": "2771890"
  },
  {
    "text": "you can yeah so in your research you",
    "start": "2771890",
    "end": "2778369"
  },
  {
    "text": "said you were not able to carry out this bypass of exercise in radius right so",
    "start": "2778369",
    "end": "2786970"
  },
  {
    "text": "will you say that using react jsut your",
    "start": "2786970",
    "end": "2793940"
  },
  {
    "text": "UI you likely avoid exercise cross-site",
    "start": "2793940",
    "end": "2799070"
  },
  {
    "text": "scripting issues and so react is special",
    "start": "2799070",
    "end": "2805910"
  },
  {
    "text": "in the way it handles Dom interactions so most templating systems work by you",
    "start": "2805910",
    "end": "2811790"
  },
  {
    "text": "you specify template in in HTML and then the tenth that the library picks up the",
    "start": "2811790",
    "end": "2817400"
  },
  {
    "text": "template and renders it to the Dom so there is this reading and writing and react is different because it uses a",
    "start": "2817400",
    "end": "2824180"
  },
  {
    "text": "compiler and actually in react you specify the templates in your JavaScript",
    "start": "2824180",
    "end": "2829550"
  },
  {
    "text": "file and the compiler will turn this into JavaScript code and the direction is always only writing to the Dom so",
    "start": "2829550",
    "end": "2836030"
  },
  {
    "text": "react never reads from the Dom but always just refreshes things and that's why we didn't find gadgets because you",
    "start": "2836030",
    "end": "2841760"
  },
  {
    "text": "can inject something but if react doesn't read it from the Dom it will not write it so in that regard react is",
    "start": "2841760",
    "end": "2848540"
  },
  {
    "text": "better and that's why react is not not prone to gadgets thank you",
    "start": "2848540",
    "end": "2854960"
  },
  {
    "text": "did you try using the taint analysis to find caches also in libraries I mean our",
    "start": "2854960",
    "end": "2861050"
  },
  {
    "text": "user length code study also contains and data flows that are in libraries",
    "start": "2861050",
    "end": "2866930"
  },
  {
    "text": "and but most of them are triggered outside of the libraries so we looked a little bit into it but it's hard to",
    "start": "2866930",
    "end": "2872240"
  },
  {
    "text": "distinguish right we just collect the data flows some of them come from libraries some of them come from custom code so the answer is yes but we don't",
    "start": "2872240",
    "end": "2880160"
  },
  {
    "text": "have like dedicated results for that specifically focus on libraries maybe in",
    "start": "2880160",
    "end": "2890210"
  },
  {
    "text": "there a problem yes yeah if you have further questions we're going into this room down the hall",
    "start": "2890210",
    "end": "2899318"
  }
]