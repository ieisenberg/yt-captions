[
  {
    "text": "thanks for the",
    "start": "2600",
    "end": "4400"
  },
  {
    "text": "introduction um so my name is Trin Chan",
    "start": "4400",
    "end": "7240"
  },
  {
    "text": "I'm a professor from the University of",
    "start": "7240",
    "end": "8960"
  },
  {
    "text": "California Riverside we are a group of",
    "start": "8960",
    "end": "11759"
  },
  {
    "text": "academic researchers across several",
    "start": "11759",
    "end": "14280"
  },
  {
    "text": "institutions besides UCR we have folks",
    "start": "14280",
    "end": "17279"
  },
  {
    "text": "from Tran University and jiling",
    "start": "17279",
    "end": "20720"
  },
  {
    "text": "University all of us love OS Kernel",
    "start": "20720",
    "end": "23279"
  },
  {
    "text": "Security uh which which brought us",
    "start": "23279",
    "end": "25519"
  },
  {
    "text": "together and uh the students did all the",
    "start": "25519",
    "end": "27840"
  },
  {
    "text": "great work and I'm just really happy",
    "start": "27840",
    "end": "29519"
  },
  {
    "text": "here to present uh on behalf of our",
    "start": "29519",
    "end": "32480"
  },
  {
    "text": "terrific",
    "start": "32480",
    "end": "34879"
  },
  {
    "text": "team okay so let's get right into OS",
    "start": "34879",
    "end": "37760"
  },
  {
    "text": "kernal",
    "start": "37760",
    "end": "38960"
  },
  {
    "text": "exploits at a high level I'm sure most",
    "start": "38960",
    "end": "42000"
  },
  {
    "text": "of you know that there are two common",
    "start": "42000",
    "end": "43719"
  },
  {
    "text": "types of techniques to achieve privilege",
    "start": "43719",
    "end": "46239"
  },
  {
    "text": "escalation",
    "start": "46239",
    "end": "47399"
  },
  {
    "text": "today control flow hijack and data flow",
    "start": "47399",
    "end": "51199"
  },
  {
    "text": "uh sorry data only attacks and control",
    "start": "51199",
    "end": "53840"
  },
  {
    "text": "flow hijack involves manipulating",
    "start": "53840",
    "end": "55960"
  },
  {
    "text": "Control",
    "start": "55960",
    "end": "57079"
  },
  {
    "text": "Data such as F function pointer to",
    "start": "57079",
    "end": "60280"
  },
  {
    "text": "redirect the execution to an attacker",
    "start": "60280",
    "end": "62760"
  },
  {
    "text": "controlled location and to redirect uh",
    "start": "62760",
    "end": "65960"
  },
  {
    "text": "and uh and and to facilitate the uh",
    "start": "65960",
    "end": "69119"
  },
  {
    "text": "return oriented programming attack",
    "start": "69119",
    "end": "71880"
  },
  {
    "text": "typically and data only attacks on the",
    "start": "71880",
    "end": "74119"
  },
  {
    "text": "other hand corrupt data pointers instead",
    "start": "74119",
    "end": "77640"
  },
  {
    "text": "which often lead to arbitrary read and",
    "start": "77640",
    "end": "80360"
  },
  {
    "text": "write capabilities and these are useful",
    "start": "80360",
    "end": "83759"
  },
  {
    "text": "for ultimately corrupting some key OS",
    "start": "83759",
    "end": "86400"
  },
  {
    "text": "data such as cred and and uid",
    "start": "86400",
    "end": "91000"
  },
  {
    "text": "okay now with the rising popularity of",
    "start": "92479",
    "end": "96040"
  },
  {
    "text": "control flow hijack sorry control flow",
    "start": "96040",
    "end": "98280"
  },
  {
    "text": "Integrity however um control flow hijack",
    "start": "98280",
    "end": "101360"
  },
  {
    "text": "is becoming more and more difficult and",
    "start": "101360",
    "end": "103799"
  },
  {
    "text": "this calls for more data only attack",
    "start": "103799",
    "end": "106399"
  },
  {
    "text": "techniques I believe those would be uh",
    "start": "106399",
    "end": "108880"
  },
  {
    "text": "more and more useful in the",
    "start": "108880",
    "end": "111159"
  },
  {
    "text": "future and in fact we surveyed publicly",
    "start": "111159",
    "end": "114640"
  },
  {
    "text": "available uh kernel exploits against",
    "start": "114640",
    "end": "118079"
  },
  {
    "text": "cves in Linux and Android in recent",
    "start": "118079",
    "end": "121520"
  },
  {
    "text": "years and found that the number of data",
    "start": "121520",
    "end": "125039"
  },
  {
    "text": "only attacks are clearly on the rise and",
    "start": "125039",
    "end": "128440"
  },
  {
    "text": "here the green bars represent the number",
    "start": "128440",
    "end": "130239"
  },
  {
    "text": "of exploits conducting data only",
    "start": "130239",
    "end": "134160"
  },
  {
    "text": "attacks okay so let's take a closer look",
    "start": "135080",
    "end": "138080"
  },
  {
    "text": "at data only attacks typically there are",
    "start": "138080",
    "end": "141280"
  },
  {
    "text": "two types of critical OS data that are",
    "start": "141280",
    "end": "143239"
  },
  {
    "text": "targeted Global variables such as M pro",
    "start": "143239",
    "end": "146000"
  },
  {
    "text": "pass or Heap VAR variables such as uh",
    "start": "146000",
    "end": "148840"
  },
  {
    "text": "cred",
    "start": "148840",
    "end": "151120"
  },
  {
    "text": "so what is mod probe pass well mod probe",
    "start": "151120",
    "end": "154000"
  },
  {
    "text": "pass stores the file pass to the mod",
    "start": "154000",
    "end": "156640"
  },
  {
    "text": "probe",
    "start": "156640",
    "end": "158120"
  },
  {
    "text": "binary and it is used by the colel to",
    "start": "158120",
    "end": "161200"
  },
  {
    "text": "execute the binary with root privilege",
    "start": "161200",
    "end": "164360"
  },
  {
    "text": "so overriding the mod prob pass Global",
    "start": "164360",
    "end": "166519"
  },
  {
    "text": "variable can then lead to attacker",
    "start": "166519",
    "end": "169560"
  },
  {
    "text": "controlled binary to run as root and",
    "start": "169560",
    "end": "172080"
  },
  {
    "text": "therefore privilege",
    "start": "172080",
    "end": "175480"
  },
  {
    "text": "escalation however to write to this",
    "start": "175640",
    "end": "180120"
  },
  {
    "text": "variable one must first bypass ksrr as",
    "start": "180120",
    "end": "184840"
  },
  {
    "text": "the address of the global variable is",
    "start": "184840",
    "end": "187920"
  },
  {
    "text": "randomized and furthermore an arbitrary",
    "start": "187920",
    "end": "190799"
  },
  {
    "text": "address write primitive is needed",
    "start": "190799",
    "end": "193640"
  },
  {
    "text": "otherwise we can't write exactly where",
    "start": "193640",
    "end": "195280"
  },
  {
    "text": "we",
    "start": "195280",
    "end": "196640"
  },
  {
    "text": "want and finally because mod pro pass is",
    "start": "196640",
    "end": "199400"
  },
  {
    "text": "a popular Target there's actually a",
    "start": "199400",
    "end": "201760"
  },
  {
    "text": "kernel option that protects the variable",
    "start": "201760",
    "end": "204159"
  },
  {
    "text": "and makes the file pass",
    "start": "204159",
    "end": "207640"
  },
  {
    "text": "static and then there are these Heap",
    "start": "208200",
    "end": "210599"
  },
  {
    "text": "variables such as cred and and file um",
    "start": "210599",
    "end": "213680"
  },
  {
    "text": "corrupting critical Fields such as uid",
    "start": "213680",
    "end": "216920"
  },
  {
    "text": "and F mode can lead to privilege",
    "start": "216920",
    "end": "220720"
  },
  {
    "text": "escalation I'm sure you know uid being",
    "start": "220720",
    "end": "223439"
  },
  {
    "text": "zero means that you know the process uh",
    "start": "223439",
    "end": "226879"
  },
  {
    "text": "is essentially a root and for f mode in",
    "start": "226879",
    "end": "230680"
  },
  {
    "text": "the file object represents the file",
    "start": "230680",
    "end": "235400"
  },
  {
    "text": "permission so you can imagine changing a",
    "start": "235400",
    "end": "238120"
  },
  {
    "text": "readon file to a WR one can enable",
    "start": "238120",
    "end": "241720"
  },
  {
    "text": "privilege",
    "start": "241720",
    "end": "243879"
  },
  {
    "text": "escalation so in comparison with global",
    "start": "243879",
    "end": "246599"
  },
  {
    "text": "variables Heap variables can be more",
    "start": "246599",
    "end": "249920"
  },
  {
    "text": "desirable for data only",
    "start": "249920",
    "end": "252200"
  },
  {
    "text": "attacks and this is because an attacker",
    "start": "252200",
    "end": "254799"
  },
  {
    "text": "can easily spray such objects on Heap",
    "start": "254799",
    "end": "257919"
  },
  {
    "text": "and use relative rights such as out of",
    "start": "257919",
    "end": "260799"
  },
  {
    "text": "bound right as opposed to arbitrary",
    "start": "260799",
    "end": "263840"
  },
  {
    "text": "address right so in theory this means",
    "start": "263840",
    "end": "266880"
  },
  {
    "text": "that an attacker may not even need to",
    "start": "266880",
    "end": "268639"
  },
  {
    "text": "derive an arbitary address right which",
    "start": "268639",
    "end": "271680"
  },
  {
    "text": "is typically not",
    "start": "271680",
    "end": "273840"
  },
  {
    "text": "easy and also the attacker doesn't even",
    "start": "273840",
    "end": "276240"
  },
  {
    "text": "need to worry about ksrr because there",
    "start": "276240",
    "end": "278960"
  },
  {
    "text": "is no right to an absolute address it's",
    "start": "278960",
    "end": "282000"
  },
  {
    "text": "all",
    "start": "282000",
    "end": "284240"
  },
  {
    "text": "relative unfortunately most",
    "start": "284680",
    "end": "286840"
  },
  {
    "text": "vulnerabilities in the Linux konel",
    "start": "286840",
    "end": "288840"
  },
  {
    "text": "happen in the generic Heap caches",
    "start": "288840",
    "end": "291440"
  },
  {
    "text": "whereas most critical Heap objects are",
    "start": "291440",
    "end": "294120"
  },
  {
    "text": "in dedicated caches and cred is a good",
    "start": "294120",
    "end": "298000"
  },
  {
    "text": "example so the question is is can we use",
    "start": "298000",
    "end": "301199"
  },
  {
    "text": "relative rights to reach such isolated",
    "start": "301199",
    "end": "304320"
  },
  {
    "text": "Heap",
    "start": "304320",
    "end": "305400"
  },
  {
    "text": "objects the answer is yes and all we",
    "start": "305400",
    "end": "309840"
  },
  {
    "text": "need to do is to perform some kind of",
    "start": "309840",
    "end": "312400"
  },
  {
    "text": "cross cach attacks and and by the way",
    "start": "312400",
    "end": "315039"
  },
  {
    "text": "this is not our invent not our",
    "start": "315039",
    "end": "318000"
  },
  {
    "text": "invention but I want to quickly go over",
    "start": "318000",
    "end": "320360"
  },
  {
    "text": "some background on how previous data",
    "start": "320360",
    "end": "323360"
  },
  {
    "text": "only attacks work and and then come to",
    "start": "323360",
    "end": "325479"
  },
  {
    "text": "our attack right so and depending on the",
    "start": "325479",
    "end": "328800"
  },
  {
    "text": "type of vulnerability",
    "start": "328800",
    "end": "330680"
  },
  {
    "text": "typically what you do with cross cash",
    "start": "330680",
    "end": "334039"
  },
  {
    "text": "attacks um is you know more or less uh",
    "start": "334039",
    "end": "339880"
  },
  {
    "text": "there are always ways to do it but but",
    "start": "339880",
    "end": "341600"
  },
  {
    "text": "they're they're not as reliable or as",
    "start": "341600",
    "end": "343600"
  },
  {
    "text": "future proof for example for o you know",
    "start": "343600",
    "end": "346840"
  },
  {
    "text": "you could you could you could arrange",
    "start": "346840",
    "end": "348880"
  },
  {
    "text": "the memory layout uh in such a way that",
    "start": "348880",
    "end": "351280"
  },
  {
    "text": "you can write across caches and for UF",
    "start": "351280",
    "end": "354919"
  },
  {
    "text": "um it's it's a little better but it's",
    "start": "354919",
    "end": "357840"
  },
  {
    "text": "not not future proof so overall the",
    "start": "357840",
    "end": "361080"
  },
  {
    "text": "cross cach challenge is still a",
    "start": "361080",
    "end": "363479"
  },
  {
    "text": "significant hurdle for today and",
    "start": "363479",
    "end": "365800"
  },
  {
    "text": "tomorrow's",
    "start": "365800",
    "end": "368319"
  },
  {
    "text": "exploits and next I will go",
    "start": "368319",
    "end": "370960"
  },
  {
    "text": "over o and UF cross cache attack",
    "start": "370960",
    "end": "375280"
  },
  {
    "text": "techniques um just briefly so let's",
    "start": "375280",
    "end": "377639"
  },
  {
    "text": "let's consider the O right case the",
    "start": "377639",
    "end": "380800"
  },
  {
    "text": "crosscat challenge prevents us from",
    "start": "380800",
    "end": "382840"
  },
  {
    "text": "spraying victim objects onto a generic",
    "start": "382840",
    "end": "385599"
  },
  {
    "text": "cache and so we can't really corrupt the",
    "start": "385599",
    "end": "388919"
  },
  {
    "text": "victim within the",
    "start": "388919",
    "end": "391560"
  },
  {
    "text": "cache but what we can do is to perform",
    "start": "391560",
    "end": "395199"
  },
  {
    "text": "what's called page funray and cause the",
    "start": "395199",
    "end": "398880"
  },
  {
    "text": "two different caches to be adjacent in",
    "start": "398880",
    "end": "402759"
  },
  {
    "text": "memory in other words the O right will",
    "start": "402759",
    "end": "405800"
  },
  {
    "text": "have to go across",
    "start": "405800",
    "end": "409280"
  },
  {
    "text": "caches unfortunately doing so requires a",
    "start": "409280",
    "end": "412280"
  },
  {
    "text": "bit of luck because the location and the",
    "start": "412280",
    "end": "415000"
  },
  {
    "text": "distance between the two objects are",
    "start": "415000",
    "end": "417680"
  },
  {
    "text": "uncertain especially with new",
    "start": "417680",
    "end": "419800"
  },
  {
    "text": "mitigations enabled in the",
    "start": "419800",
    "end": "423159"
  },
  {
    "text": "kernel and another way to overcome the",
    "start": "423280",
    "end": "425720"
  },
  {
    "text": "cross cach challenge is to Pivot the O",
    "start": "425720",
    "end": "429400"
  },
  {
    "text": "right into a double free or use after",
    "start": "429400",
    "end": "433039"
  },
  {
    "text": "free and the idea is to use o right to",
    "start": "433039",
    "end": "437280"
  },
  {
    "text": "corrupt the lower bits of some Heap data",
    "start": "437280",
    "end": "441160"
  },
  {
    "text": "pointer which can be found in many Heap",
    "start": "441160",
    "end": "444400"
  },
  {
    "text": "objects for example the list head field",
    "start": "444400",
    "end": "447960"
  },
  {
    "text": "of the message message object contains",
    "start": "447960",
    "end": "450039"
  },
  {
    "text": "the next and previous",
    "start": "450039",
    "end": "453479"
  },
  {
    "text": "pointers and let's use a prior exploit",
    "start": "453720",
    "end": "456599"
  },
  {
    "text": "to explain how this",
    "start": "456599",
    "end": "458319"
  },
  {
    "text": "works um and the reason I'm going to",
    "start": "458319",
    "end": "460520"
  },
  {
    "text": "explain this prior exploit is that its",
    "start": "460520",
    "end": "462520"
  },
  {
    "text": "opening is kind of similar to what we",
    "start": "462520",
    "end": "464199"
  },
  {
    "text": "want to",
    "start": "464199",
    "end": "465479"
  },
  {
    "text": "do so as we can see here there is an",
    "start": "465479",
    "end": "468960"
  },
  {
    "text": "array of message message",
    "start": "468960",
    "end": "471520"
  },
  {
    "text": "objects each with the next pointer",
    "start": "471520",
    "end": "474000"
  },
  {
    "text": "pointing to some next",
    "start": "474000",
    "end": "476479"
  },
  {
    "text": "object so when there's an O right vulner",
    "start": "476479",
    "end": "481440"
  },
  {
    "text": "let's say uh this this pink object XT",
    "start": "481759",
    "end": "486159"
  },
  {
    "text": "table info right if it if it can go out",
    "start": "486159",
    "end": "489680"
  },
  {
    "text": "of bound and corrupt the next pointer",
    "start": "489680",
    "end": "492360"
  },
  {
    "text": "what happens is",
    "start": "492360",
    "end": "494039"
  },
  {
    "text": "that if because we corrupt only the",
    "start": "494039",
    "end": "497159"
  },
  {
    "text": "lower bites of the pointer it'll have a",
    "start": "497159",
    "end": "500759"
  },
  {
    "text": "high probability of pointing to an",
    "start": "500759",
    "end": "503000"
  },
  {
    "text": "object that has already been pointed to",
    "start": "503000",
    "end": "506720"
  },
  {
    "text": "right by by a different pointer so in",
    "start": "506720",
    "end": "508560"
  },
  {
    "text": "this case we you can see that there are",
    "start": "508560",
    "end": "510120"
  },
  {
    "text": "two red arrows pointing to the same",
    "start": "510120",
    "end": "515240"
  },
  {
    "text": "object right so then what do we do well",
    "start": "516240",
    "end": "520000"
  },
  {
    "text": "the attacker can then free the object",
    "start": "520000",
    "end": "522200"
  },
  {
    "text": "using one of the pointers and the other",
    "start": "522200",
    "end": "524800"
  },
  {
    "text": "one will automatically become a dangling",
    "start": "524800",
    "end": "527920"
  },
  {
    "text": "pointer right so that's that's how the",
    "start": "527920",
    "end": "531240"
  },
  {
    "text": "pivot to double free or you use after",
    "start": "531240",
    "end": "533320"
  },
  {
    "text": "free can happen right so essentially",
    "start": "533320",
    "end": "535720"
  },
  {
    "text": "with this dangling",
    "start": "535720",
    "end": "537360"
  },
  {
    "text": "pointer um",
    "start": "537360",
    "end": "539880"
  },
  {
    "text": "you know we are able to free the object",
    "start": "539880",
    "end": "542680"
  },
  {
    "text": "again or use the freed memory",
    "start": "542680",
    "end": "547519"
  },
  {
    "text": "okay so now that we have a UF",
    "start": "548200",
    "end": "551760"
  },
  {
    "text": "primitive how do we achieve privilege",
    "start": "551760",
    "end": "554040"
  },
  {
    "text": "escalation well it turns out that we",
    "start": "554040",
    "end": "556160"
  },
  {
    "text": "still need to overcome two main",
    "start": "556160",
    "end": "557920"
  },
  {
    "text": "challenges including the cross cross",
    "start": "557920",
    "end": "560399"
  },
  {
    "text": "cach challenge previously",
    "start": "560399",
    "end": "563480"
  },
  {
    "text": "discussed but with UF things are a",
    "start": "563480",
    "end": "566560"
  },
  {
    "text": "little easier right what we can do is",
    "start": "566560",
    "end": "569480"
  },
  {
    "text": "just first spray some vulnerable",
    "start": "569480",
    "end": "572120"
  },
  {
    "text": "object along with a bunch of padding",
    "start": "572120",
    "end": "577160"
  },
  {
    "text": "objects we then free the vulnerable",
    "start": "577160",
    "end": "579640"
  },
  {
    "text": "object leaving a dangling",
    "start": "579640",
    "end": "583160"
  },
  {
    "text": "pointer but in addition to the",
    "start": "583160",
    "end": "585560"
  },
  {
    "text": "vulnerable object we're also going to",
    "start": "585560",
    "end": "587519"
  },
  {
    "text": "free the other padding objects and this",
    "start": "587519",
    "end": "590399"
  },
  {
    "text": "will cost the entire cash and its pages",
    "start": "590399",
    "end": "594079"
  },
  {
    "text": "to be",
    "start": "594079",
    "end": "596360"
  },
  {
    "text": "freed and finally the freed cash Pages",
    "start": "596600",
    "end": "599839"
  },
  {
    "text": "can now be reused to allocate victim",
    "start": "599839",
    "end": "603040"
  },
  {
    "text": "objects such as cred",
    "start": "603040",
    "end": "606079"
  },
  {
    "text": "objects right so all we need to do then",
    "start": "606079",
    "end": "609279"
  },
  {
    "text": "is to directly corrupt such objects",
    "start": "609279",
    "end": "611560"
  },
  {
    "text": "using the dangling pointer which we",
    "start": "611560",
    "end": "613600"
  },
  {
    "text": "previously",
    "start": "613600",
    "end": "616160"
  },
  {
    "text": "had while this technique still works",
    "start": "617640",
    "end": "620240"
  },
  {
    "text": "today an upcoming mitigation called slab",
    "start": "620240",
    "end": "623519"
  },
  {
    "text": "virtual May kill such page reuses or",
    "start": "623519",
    "end": "626839"
  },
  {
    "text": "cach page reuses across different types",
    "start": "626839",
    "end": "629720"
  },
  {
    "text": "of objects right so we still needed some",
    "start": "629720",
    "end": "632920"
  },
  {
    "text": "new",
    "start": "632920",
    "end": "635200"
  },
  {
    "text": "ideas now the Second Challenge in",
    "start": "635839",
    "end": "638680"
  },
  {
    "text": "addition to cross cache is the fact that",
    "start": "638680",
    "end": "641480"
  },
  {
    "text": "a relative right",
    "start": "641480",
    "end": "643160"
  },
  {
    "text": "primitive often times can corrupt more",
    "start": "643160",
    "end": "646399"
  },
  {
    "text": "than what we want causing side",
    "start": "646399",
    "end": "649880"
  },
  {
    "text": "effects so what do we mean by side",
    "start": "649880",
    "end": "652560"
  },
  {
    "text": "effects well in short it happens when we",
    "start": "652560",
    "end": "655600"
  },
  {
    "text": "accidentally corrupt something that we",
    "start": "655600",
    "end": "657680"
  },
  {
    "text": "shouldn't which may cause the system to",
    "start": "657680",
    "end": "661079"
  },
  {
    "text": "crash so let's look at the the example",
    "start": "661079",
    "end": "663639"
  },
  {
    "text": "victim object here which is a stct file",
    "start": "663639",
    "end": "667040"
  },
  {
    "text": "type it has a critical field called f",
    "start": "667040",
    "end": "670079"
  },
  {
    "text": "mode um which we mentioned before um it",
    "start": "670079",
    "end": "673320"
  },
  {
    "text": "the slide is the figure is probably too",
    "start": "673320",
    "end": "675399"
  },
  {
    "text": "small to see but essentially there are",
    "start": "675399",
    "end": "679480"
  },
  {
    "text": "many different fields in a in a stct",
    "start": "679480",
    "end": "681639"
  },
  {
    "text": "file object and the F mode one is the",
    "start": "681639",
    "end": "684880"
  },
  {
    "text": "one that we would like to corrupt for a",
    "start": "684880",
    "end": "686680"
  },
  {
    "text": "privilege",
    "start": "686680",
    "end": "687760"
  },
  {
    "text": "escalation but sometimes an exploit",
    "start": "687760",
    "end": "691760"
  },
  {
    "text": "primitive may not corrupt only the F",
    "start": "691760",
    "end": "695279"
  },
  {
    "text": "mode field and and for example if it if",
    "start": "695279",
    "end": "698240"
  },
  {
    "text": "it accidentally corrupted the other",
    "start": "698240",
    "end": "699920"
  },
  {
    "text": "field which is FOP which is you know",
    "start": "699920",
    "end": "702680"
  },
  {
    "text": "it's a critical field um the the kernel",
    "start": "702680",
    "end": "705639"
  },
  {
    "text": "will crash right and that's why we call",
    "start": "705639",
    "end": "707720"
  },
  {
    "text": "it a side",
    "start": "707720",
    "end": "710279"
  },
  {
    "text": "effect and in practice there is no",
    "start": "710880",
    "end": "714040"
  },
  {
    "text": "guarantee like I said that a UF right or",
    "start": "714040",
    "end": "717480"
  },
  {
    "text": "even an O right will per perfectly match",
    "start": "717480",
    "end": "720079"
  },
  {
    "text": "the offset of f mode right in the Target",
    "start": "720079",
    "end": "725320"
  },
  {
    "text": "object and therefore to avoid side",
    "start": "725320",
    "end": "728279"
  },
  {
    "text": "effects often times what people do is",
    "start": "728279",
    "end": "731639"
  },
  {
    "text": "they'll do additional steps to write",
    "start": "731639",
    "end": "734000"
  },
  {
    "text": "correct values into these fields if we",
    "start": "734000",
    "end": "737519"
  },
  {
    "text": "have to corrupt them um which would",
    "start": "737519",
    "end": "739920"
  },
  {
    "text": "require bypassing ksrr or using some",
    "start": "739920",
    "end": "743680"
  },
  {
    "text": "other info",
    "start": "743680",
    "end": "746320"
  },
  {
    "text": "leak okay so to summarize",
    "start": "747120",
    "end": "749839"
  },
  {
    "text": "let's review this steps of a typical",
    "start": "749839",
    "end": "752079"
  },
  {
    "text": "modern day kernel exploit first",
    "start": "752079",
    "end": "755320"
  },
  {
    "text": "depending on how strong the initial",
    "start": "755320",
    "end": "756800"
  },
  {
    "text": "primitive is we may pivot it to some",
    "start": "756800",
    "end": "759440"
  },
  {
    "text": "other exploit",
    "start": "759440",
    "end": "761000"
  },
  {
    "text": "primitive and then we would need to",
    "start": "761000",
    "end": "763000"
  },
  {
    "text": "bypass the ksrr most likely um deal with",
    "start": "763000",
    "end": "766399"
  },
  {
    "text": "the cross cach Challenge and finally",
    "start": "766399",
    "end": "768680"
  },
  {
    "text": "corrupt the target object while avoiding",
    "start": "768680",
    "end": "771279"
  },
  {
    "text": "side",
    "start": "771279",
    "end": "773519"
  },
  {
    "text": "effects so then we ask ourselves what",
    "start": "773800",
    "end": "776560"
  },
  {
    "text": "can we do to overcome the previously",
    "start": "776560",
    "end": "778399"
  },
  {
    "text": "mentioned challenge",
    "start": "778399",
    "end": "779800"
  },
  {
    "text": "and improve the exploit process for",
    "start": "779800",
    "end": "782680"
  },
  {
    "text": "example can we avoid some of these steps",
    "start": "782680",
    "end": "785399"
  },
  {
    "text": "um or make some of these steps uh",
    "start": "785399",
    "end": "789720"
  },
  {
    "text": "smoother and to answer the questions we",
    "start": "790040",
    "end": "793480"
  },
  {
    "text": "took the inspiration from recent",
    "start": "793480",
    "end": "795680"
  },
  {
    "text": "vulnerabilities that provide page UF",
    "start": "795680",
    "end": "799120"
  },
  {
    "text": "primitive now what is a page UF well a",
    "start": "799120",
    "end": "803160"
  },
  {
    "text": "page UF allows a fre physical page to be",
    "start": "803160",
    "end": "807760"
  },
  {
    "text": "accessible through some kind of dangling",
    "start": "807760",
    "end": "811680"
  },
  {
    "text": "reference and and this means that even",
    "start": "811680",
    "end": "813920"
  },
  {
    "text": "though the physical page is unmapped and",
    "start": "813920",
    "end": "817079"
  },
  {
    "text": "attacker can still freely",
    "start": "817079",
    "end": "819000"
  },
  {
    "text": "access the physical page and even better",
    "start": "819000",
    "end": "823279"
  },
  {
    "text": "if the physical page is later mapped to",
    "start": "823279",
    "end": "825800"
  },
  {
    "text": "a virtual page the dangling reference",
    "start": "825800",
    "end": "828320"
  },
  {
    "text": "would still allow us to access the",
    "start": "828320",
    "end": "830040"
  },
  {
    "text": "physical page effectively bypassing any",
    "start": "830040",
    "end": "833360"
  },
  {
    "text": "mitigation set up in the virtual memory",
    "start": "833360",
    "end": "836600"
  },
  {
    "text": "layer right so that's sort of our",
    "start": "836600",
    "end": "839880"
  },
  {
    "text": "inspiration and and motivation",
    "start": "839880",
    "end": "842880"
  },
  {
    "text": "so so obviously if you if you have",
    "start": "842880",
    "end": "846639"
  },
  {
    "text": "already a page UF primitive it's",
    "start": "846639",
    "end": "849920"
  },
  {
    "text": "actually fairly straightforward to then",
    "start": "849920",
    "end": "852680"
  },
  {
    "text": "achieve privilege",
    "start": "852680",
    "end": "854600"
  },
  {
    "text": "escalation so let's say if we already",
    "start": "854600",
    "end": "857000"
  },
  {
    "text": "have a dangling reference to a free page",
    "start": "857000",
    "end": "859880"
  },
  {
    "text": "a physical page right we we can then",
    "start": "859880",
    "end": "863320"
  },
  {
    "text": "spray objects that will cause the kernel",
    "start": "863320",
    "end": "865800"
  },
  {
    "text": "to allocate the physical page meaning",
    "start": "865800",
    "end": "868040"
  },
  {
    "text": "you know these objects will",
    "start": "868040",
    "end": "869880"
  },
  {
    "text": "now stored on this",
    "start": "869880",
    "end": "872120"
  },
  {
    "text": "page then we we can then simply corrupt",
    "start": "872120",
    "end": "875320"
  },
  {
    "text": "these objects using the dangling",
    "start": "875320",
    "end": "877519"
  },
  {
    "text": "reference to right into the page right",
    "start": "877519",
    "end": "880279"
  },
  {
    "text": "easy",
    "start": "880279",
    "end": "881480"
  },
  {
    "text": "peasy but the problem is most of the",
    "start": "881480",
    "end": "884160"
  },
  {
    "text": "time a vulnerability won't give us a",
    "start": "884160",
    "end": "886639"
  },
  {
    "text": "page URF",
    "start": "886639",
    "end": "888360"
  },
  {
    "text": "primitive right initially so what can we",
    "start": "888360",
    "end": "891440"
  },
  {
    "text": "do like can we can we somehow pivot",
    "start": "891440",
    "end": "894639"
  },
  {
    "text": "common types of vulnerabilities to a",
    "start": "894639",
    "end": "897519"
  },
  {
    "text": "page URF primitive",
    "start": "897519",
    "end": "900880"
  },
  {
    "text": "and so that's exactly what we",
    "start": "900880",
    "end": "902680"
  },
  {
    "text": "did we developed page Jack that that um",
    "start": "902680",
    "end": "907120"
  },
  {
    "text": "is essentially a new exploit technique",
    "start": "907120",
    "end": "911120"
  },
  {
    "text": "that will pivot common vulnerabilities",
    "start": "911120",
    "end": "913120"
  },
  {
    "text": "such as o UF or double free into a page",
    "start": "913120",
    "end": "918560"
  },
  {
    "text": "URF",
    "start": "918560",
    "end": "920440"
  },
  {
    "text": "primitive right and subsequently it",
    "start": "920440",
    "end": "922639"
  },
  {
    "text": "would allow us to to corrupt uh some",
    "start": "922639",
    "end": "925440"
  },
  {
    "text": "Target objects fairly easily",
    "start": "925440",
    "end": "930040"
  },
  {
    "text": "okay so let's take a look at how page",
    "start": "930880",
    "end": "934240"
  },
  {
    "text": "Jack works by walking through an O",
    "start": "934240",
    "end": "937639"
  },
  {
    "text": "example right by the way you know page",
    "start": "937639",
    "end": "940440"
  },
  {
    "text": "jack is not just limited to O um I'm",
    "start": "940440",
    "end": "943720"
  },
  {
    "text": "using it only as an example here U but",
    "start": "943720",
    "end": "946199"
  },
  {
    "text": "but if you're interested in seeing more",
    "start": "946199",
    "end": "947680"
  },
  {
    "text": "details uh you can you can read our",
    "start": "947680",
    "end": "950360"
  },
  {
    "text": "white paper linked at the end for more",
    "start": "950360",
    "end": "953120"
  },
  {
    "text": "details so this this process is a little",
    "start": "953120",
    "end": "956360"
  },
  {
    "text": "involved so I'm I'm going to do this uh",
    "start": "956360",
    "end": "958319"
  },
  {
    "text": "slowly",
    "start": "958319",
    "end": "959600"
  },
  {
    "text": "on the left figure there are three",
    "start": "959600",
    "end": "961600"
  },
  {
    "text": "layers of memory that we want to",
    "start": "961600",
    "end": "964440"
  },
  {
    "text": "illustrate and let's walk them walk",
    "start": "964440",
    "end": "966959"
  },
  {
    "text": "through them one by one and at the top",
    "start": "966959",
    "end": "969440"
  },
  {
    "text": "we can see the attacker has already",
    "start": "969440",
    "end": "971600"
  },
  {
    "text": "arranged the memory layout such that a",
    "start": "971600",
    "end": "974000"
  },
  {
    "text": "vulnerable object in blue is adjacent to",
    "start": "974000",
    "end": "977399"
  },
  {
    "text": "two pipe buffer objects and a pipe",
    "start": "977399",
    "end": "980240"
  },
  {
    "text": "buffer object has a page pointer that",
    "start": "980240",
    "end": "983040"
  },
  {
    "text": "points to a page struct or page object",
    "start": "983040",
    "end": "987040"
  },
  {
    "text": "in the next layer and by the way the",
    "start": "987040",
    "end": "989720"
  },
  {
    "text": "figure on the right shows the object",
    "start": "989720",
    "end": "991560"
  },
  {
    "text": "definitions in case you want to see",
    "start": "991560",
    "end": "994000"
  },
  {
    "text": "them and to clarify these page objects",
    "start": "994000",
    "end": "997519"
  },
  {
    "text": "in the middle themselves are not",
    "start": "997519",
    "end": "1000560"
  },
  {
    "text": "physical pages and instead there are 64",
    "start": "1000560",
    "end": "1003959"
  },
  {
    "text": "bite",
    "start": "1003959",
    "end": "1005000"
  },
  {
    "text": "objects um you know as we can see on on",
    "start": "1005000",
    "end": "1007600"
  },
  {
    "text": "the right for their definitions um but",
    "start": "1007600",
    "end": "1010440"
  },
  {
    "text": "each of the page object does correspond",
    "start": "1010440",
    "end": "1013800"
  },
  {
    "text": "to a physical page which is shown in the",
    "start": "1013800",
    "end": "1016079"
  },
  {
    "text": "third",
    "start": "1016079",
    "end": "1017360"
  },
  {
    "text": "layer and through proper system calls",
    "start": "1017360",
    "end": "1020199"
  },
  {
    "text": "one can use the page object to then",
    "start": "1020199",
    "end": "1022680"
  },
  {
    "text": "reach the physical page so in this",
    "start": "1022680",
    "end": "1025959"
  },
  {
    "text": "particular example we can make um system",
    "start": "1025959",
    "end": "1030000"
  },
  {
    "text": "calls that operate on the pipe buffer",
    "start": "1030000",
    "end": "1033038"
  },
  {
    "text": "which would then lead us to the the page",
    "start": "1033039",
    "end": "1035160"
  },
  {
    "text": "object which would then finally lead us",
    "start": "1035160",
    "end": "1037558"
  },
  {
    "text": "to the physical page so we could read",
    "start": "1037559",
    "end": "1040400"
  },
  {
    "text": "and write a physical page through a pipe",
    "start": "1040400",
    "end": "1043839"
  },
  {
    "text": "buffer",
    "start": "1043839",
    "end": "1045480"
  },
  {
    "text": "object okay so that's sort of the the",
    "start": "1045480",
    "end": "1048600"
  },
  {
    "text": "base basic premise of",
    "start": "1048600",
    "end": "1052600"
  },
  {
    "text": "this yeah so there's some um animation",
    "start": "1056440",
    "end": "1059400"
  },
  {
    "text": "here that shows how you would go from",
    "start": "1059400",
    "end": "1061160"
  },
  {
    "text": "the pipe buffer to the physical",
    "start": "1061160",
    "end": "1064120"
  },
  {
    "text": "page um",
    "start": "1064120",
    "end": "1065880"
  },
  {
    "text": "but after after the basic introduction",
    "start": "1065880",
    "end": "1068799"
  },
  {
    "text": "what do we do well the attacker would",
    "start": "1068799",
    "end": "1071240"
  },
  {
    "text": "then just trigger a um o right to",
    "start": "1071240",
    "end": "1075000"
  },
  {
    "text": "corrupt the page pointer in the first",
    "start": "1075000",
    "end": "1077159"
  },
  {
    "text": "pipe buffer object from from the blue",
    "start": "1077159",
    "end": "1080039"
  },
  {
    "text": "object this is similar to what we",
    "start": "1080039",
    "end": "1082080"
  },
  {
    "text": "previously discussed um you know in in a",
    "start": "1082080",
    "end": "1084880"
  },
  {
    "text": "prior exploit but the goal here is to",
    "start": "1084880",
    "end": "1087880"
  },
  {
    "text": "Pivot the O right into a UF of a page",
    "start": "1087880",
    "end": "1093480"
  },
  {
    "text": "object right and and if things go well",
    "start": "1093480",
    "end": "1097400"
  },
  {
    "text": "the two pipe buffer objects will both",
    "start": "1097400",
    "end": "1100200"
  },
  {
    "text": "point to the same page",
    "start": "1100200",
    "end": "1102600"
  },
  {
    "text": "object right as you can see that you",
    "start": "1102600",
    "end": "1104840"
  },
  {
    "text": "know that the two pointers now are",
    "start": "1104840",
    "end": "1106960"
  },
  {
    "text": "pointing to page object number",
    "start": "1106960",
    "end": "1111039"
  },
  {
    "text": "two and in a bit more details on a",
    "start": "1111039",
    "end": "1113440"
  },
  {
    "text": "pointer corruption right because a page",
    "start": "1113440",
    "end": "1116440"
  },
  {
    "text": "pointer is only 64 byte long all we need",
    "start": "1116440",
    "end": "1119679"
  },
  {
    "text": "to do is to write the lowest byte of a",
    "start": "1119679",
    "end": "1122720"
  },
  {
    "text": "page pointer to Hax decimal 0",
    "start": "1122720",
    "end": "1126919"
  },
  {
    "text": "0 right and we will have a 75% chance of",
    "start": "1126919",
    "end": "1130360"
  },
  {
    "text": "success in creating the double reference",
    "start": "1130360",
    "end": "1133320"
  },
  {
    "text": "um if it fails it is basically because",
    "start": "1133320",
    "end": "1135720"
  },
  {
    "text": "the original",
    "start": "1135720",
    "end": "1137000"
  },
  {
    "text": "bite uh is already 0x0",
    "start": "1137000",
    "end": "1140799"
  },
  {
    "text": "0 in which case the right would",
    "start": "1140799",
    "end": "1143120"
  },
  {
    "text": "basically be uh would basically have no",
    "start": "1143120",
    "end": "1146480"
  },
  {
    "text": "effect and and the attacker can simply",
    "start": "1146480",
    "end": "1148559"
  },
  {
    "text": "try it",
    "start": "1148559",
    "end": "1149600"
  },
  {
    "text": "again",
    "start": "1149600",
    "end": "1152600"
  },
  {
    "text": "okay so now let's say we have two",
    "start": "1152640",
    "end": "1156039"
  },
  {
    "text": "pointers pointing to the same page",
    "start": "1156039",
    "end": "1160200"
  },
  {
    "text": "object um what we do is we will trigger",
    "start": "1160200",
    "end": "1163240"
  },
  {
    "text": "a free using one of the pointers similar",
    "start": "1163240",
    "end": "1166120"
  },
  {
    "text": "to what we saw before and what what's",
    "start": "1166120",
    "end": "1168520"
  },
  {
    "text": "really really interesting here is the",
    "start": "1168520",
    "end": "1170400"
  },
  {
    "text": "free of a page object right it it",
    "start": "1170400",
    "end": "1172679"
  },
  {
    "text": "doesn't act it doesn't just free the",
    "start": "1172679",
    "end": "1174840"
  },
  {
    "text": "page object right in fact it also free",
    "start": "1174840",
    "end": "1178159"
  },
  {
    "text": "the corresponding physical",
    "start": "1178159",
    "end": "1180280"
  },
  {
    "text": "page right as we can see uh the gray",
    "start": "1180280",
    "end": "1184000"
  },
  {
    "text": "object and the gray um",
    "start": "1184000",
    "end": "1186320"
  },
  {
    "text": "page so from the operating systems",
    "start": "1186320",
    "end": "1189000"
  },
  {
    "text": "perspect perspective that entire 4kb",
    "start": "1189000",
    "end": "1192120"
  },
  {
    "text": "physical page is now available for",
    "start": "1192120",
    "end": "1195480"
  },
  {
    "text": "reuse right so basically it goes back to",
    "start": "1195480",
    "end": "1197799"
  },
  {
    "text": "the body allocator",
    "start": "1197799",
    "end": "1199880"
  },
  {
    "text": "and at this point we have successfully",
    "start": "1199880",
    "end": "1202120"
  },
  {
    "text": "created a dangling pointer as as shown",
    "start": "1202120",
    "end": "1205200"
  },
  {
    "text": "in the red",
    "start": "1205200",
    "end": "1207720"
  },
  {
    "text": "arrow well now what do we do",
    "start": "1208679",
    "end": "1211960"
  },
  {
    "text": "well we basically spray critical victim",
    "start": "1211960",
    "end": "1215240"
  },
  {
    "text": "objects now that we have a uh freed",
    "start": "1215240",
    "end": "1218880"
  },
  {
    "text": "physical page um and we can spray any",
    "start": "1218880",
    "end": "1221640"
  },
  {
    "text": "objects we like such as cred and file",
    "start": "1221640",
    "end": "1224320"
  },
  {
    "text": "objects in this example we sprayed file",
    "start": "1224320",
    "end": "1227360"
  },
  {
    "text": "objects and it can it can basically be",
    "start": "1227360",
    "end": "1230679"
  },
  {
    "text": "allocated um in this this free physical",
    "start": "1230679",
    "end": "1236200"
  },
  {
    "text": "page and note that the upcoming slap",
    "start": "1236559",
    "end": "1240520"
  },
  {
    "text": "virtual mitigation can't really stop the",
    "start": "1240520",
    "end": "1243360"
  },
  {
    "text": "attack because only virtual pages are",
    "start": "1243360",
    "end": "1246480"
  },
  {
    "text": "tracked by slap virtual and here we're",
    "start": "1246480",
    "end": "1250280"
  },
  {
    "text": "actually targeting physical Pages",
    "start": "1250280",
    "end": "1252360"
  },
  {
    "text": "directly that's why we're able to bypass",
    "start": "1252360",
    "end": "1255120"
  },
  {
    "text": "the the new mitigation",
    "start": "1255120",
    "end": "1258840"
  },
  {
    "text": "and finally we can simply use the",
    "start": "1260200",
    "end": "1262159"
  },
  {
    "text": "dangling pointer to then read and write",
    "start": "1262159",
    "end": "1264520"
  },
  {
    "text": "the physical page uh which which now",
    "start": "1264520",
    "end": "1267280"
  },
  {
    "text": "holds critical objects right in this",
    "start": "1267280",
    "end": "1269360"
  },
  {
    "text": "case File",
    "start": "1269360",
    "end": "1271080"
  },
  {
    "text": "objects and by overwriting the F mode",
    "start": "1271080",
    "end": "1273600"
  },
  {
    "text": "field which represents the file",
    "start": "1273600",
    "end": "1275400"
  },
  {
    "text": "permission again um we can we can get",
    "start": "1275400",
    "end": "1278320"
  },
  {
    "text": "privilege escalation because the",
    "start": "1278320",
    "end": "1280279"
  },
  {
    "text": "attacker now can write to something like",
    "start": "1280279",
    "end": "1283440"
  },
  {
    "text": "Etc password for",
    "start": "1283440",
    "end": "1286760"
  },
  {
    "text": "example okay so this is the core idea of",
    "start": "1286760",
    "end": "1289679"
  },
  {
    "text": "the page Jack technique essentially we",
    "start": "1289679",
    "end": "1292679"
  },
  {
    "text": "manipulated the uh these middle layer",
    "start": "1292679",
    "end": "1295480"
  },
  {
    "text": "page objects to indirectly manipulate",
    "start": "1295480",
    "end": "1298559"
  },
  {
    "text": "physical",
    "start": "1298559",
    "end": "1301000"
  },
  {
    "text": "pages okay so let's let's walk through a",
    "start": "1301640",
    "end": "1304200"
  },
  {
    "text": "real cve to to demo the page Jack again",
    "start": "1304200",
    "end": "1308240"
  },
  {
    "text": "um and this cve again is a o right",
    "start": "1308240",
    "end": "1311840"
  },
  {
    "text": "vulnerability um it has actually two",
    "start": "1311840",
    "end": "1314159"
  },
  {
    "text": "different OB right Primitives the second",
    "start": "1314159",
    "end": "1316559"
  },
  {
    "text": "one can write a single bit out bound",
    "start": "1316559",
    "end": "1319480"
  },
  {
    "text": "which is what we will use for our",
    "start": "1319480",
    "end": "1323039"
  },
  {
    "text": "exploitation um similar to the the steps",
    "start": "1323520",
    "end": "1326200"
  },
  {
    "text": "shown before we have a vulnerable object",
    "start": "1326200",
    "end": "1329159"
  },
  {
    "text": "uh in this case a type filter object in",
    "start": "1329159",
    "end": "1331840"
  },
  {
    "text": "blue and uh two other pipe buffer",
    "start": "1331840",
    "end": "1334600"
  },
  {
    "text": "objects arranged right",
    "start": "1334600",
    "end": "1336679"
  },
  {
    "text": "after and remember each page buffer has",
    "start": "1336679",
    "end": "1339440"
  },
  {
    "text": "a page pointer pointing to a page object",
    "start": "1339440",
    "end": "1342880"
  },
  {
    "text": "which is associated with a physical page",
    "start": "1342880",
    "end": "1345320"
  },
  {
    "text": "right and then um here from here on we",
    "start": "1345320",
    "end": "1348960"
  },
  {
    "text": "can we can trigger the second OB right",
    "start": "1348960",
    "end": "1351720"
  },
  {
    "text": "to corrupt the six bit of the page",
    "start": "1351720",
    "end": "1354919"
  },
  {
    "text": "pointer and causing two pointers to now",
    "start": "1354919",
    "end": "1357600"
  },
  {
    "text": "point to the same page object and",
    "start": "1357600",
    "end": "1360200"
  },
  {
    "text": "therefore you know corresponding to the",
    "start": "1360200",
    "end": "1362880"
  },
  {
    "text": "same physical page all right we then",
    "start": "1362880",
    "end": "1366120"
  },
  {
    "text": "close one of the pipe buffers uh uh to",
    "start": "1366120",
    "end": "1370279"
  },
  {
    "text": "to essentially free the corresponding",
    "start": "1370279",
    "end": "1372480"
  },
  {
    "text": "page object and and the physical page um",
    "start": "1372480",
    "end": "1376000"
  },
  {
    "text": "creating a URF primitive right basically",
    "start": "1376000",
    "end": "1379159"
  },
  {
    "text": "leaving another dangling",
    "start": "1379159",
    "end": "1382520"
  },
  {
    "text": "pointer and next we spray file objects",
    "start": "1382799",
    "end": "1385720"
  },
  {
    "text": "for ETC password which will be allocated",
    "start": "1385720",
    "end": "1388400"
  },
  {
    "text": "in the page that we just that was just",
    "start": "1388400",
    "end": "1390200"
  },
  {
    "text": "freed we then directly write into the F",
    "start": "1390200",
    "end": "1392679"
  },
  {
    "text": "mode field of the object by avoiding the",
    "start": "1392679",
    "end": "1395960"
  },
  {
    "text": "corruption of any other",
    "start": "1395960",
    "end": "1397919"
  },
  {
    "text": "fields and and once we change the",
    "start": "1397919",
    "end": "1400000"
  },
  {
    "text": "permission from read to write uh we can",
    "start": "1400000",
    "end": "1403159"
  },
  {
    "text": "now edit the password file to gain root",
    "start": "1403159",
    "end": "1406440"
  },
  {
    "text": "privilege um and and by the way before",
    "start": "1406440",
    "end": "1408880"
  },
  {
    "text": "we before we write we could we could",
    "start": "1408880",
    "end": "1410919"
  },
  {
    "text": "also read ahead of time to see if the",
    "start": "1410919",
    "end": "1413080"
  },
  {
    "text": "sprayed object in is indeed allocated",
    "start": "1413080",
    "end": "1416679"
  },
  {
    "text": "successfully in that exact page which is",
    "start": "1416679",
    "end": "1419880"
  },
  {
    "text": "a really nice",
    "start": "1419880",
    "end": "1422240"
  },
  {
    "text": "property okay so here is a quick demo we",
    "start": "1422240",
    "end": "1425919"
  },
  {
    "text": "we've actually ported slat virtual uh",
    "start": "1425919",
    "end": "1428640"
  },
  {
    "text": "mitigation and enabled CFI and and and",
    "start": "1428640",
    "end": "1432000"
  },
  {
    "text": "and we show that our attack would still",
    "start": "1432000",
    "end": "1435720"
  },
  {
    "text": "work okay so initially we we showed that",
    "start": "1437240",
    "end": "1440039"
  },
  {
    "text": "we're not a root user and uh show the",
    "start": "1440039",
    "end": "1443480"
  },
  {
    "text": "kernel version the mitigations that are",
    "start": "1443480",
    "end": "1446679"
  },
  {
    "text": "enabled and if we run our exploit give",
    "start": "1446679",
    "end": "1450159"
  },
  {
    "text": "it a",
    "start": "1450159",
    "end": "1451279"
  },
  {
    "text": "second um we have now modify the",
    "start": "1451279",
    "end": "1454840"
  },
  {
    "text": "password file and if we enter the new",
    "start": "1454840",
    "end": "1457320"
  },
  {
    "text": "password we're now",
    "start": "1457320",
    "end": "1460679"
  },
  {
    "text": "root all right cool so as we can see our",
    "start": "1466480",
    "end": "1470080"
  },
  {
    "text": "page Jack exploit doesn't require",
    "start": "1470080",
    "end": "1472320"
  },
  {
    "text": "bypassing ksrr at all it also doesn't",
    "start": "1472320",
    "end": "1475399"
  },
  {
    "text": "need to to worry about any cross cach",
    "start": "1475399",
    "end": "1478600"
  },
  {
    "text": "challenge right all because we're we're",
    "start": "1478600",
    "end": "1481279"
  },
  {
    "text": "targeting physical Pages",
    "start": "1481279",
    "end": "1483880"
  },
  {
    "text": "directly and this has a significant",
    "start": "1483880",
    "end": "1487000"
  },
  {
    "text": "impact on the Kernel exploit process it",
    "start": "1487000",
    "end": "1490120"
  },
  {
    "text": "make it has made it a lot easier a lot",
    "start": "1490120",
    "end": "1492960"
  },
  {
    "text": "uh a lot more",
    "start": "1492960",
    "end": "1495919"
  },
  {
    "text": "streamlined okay so in summary we",
    "start": "1496080",
    "end": "1498440"
  },
  {
    "text": "proposed a novel data only attack um and",
    "start": "1498440",
    "end": "1502240"
  },
  {
    "text": "uh and because it's a data only attack",
    "start": "1502240",
    "end": "1503960"
  },
  {
    "text": "we don't need to worry about CFI",
    "start": "1503960",
    "end": "1506000"
  },
  {
    "text": "naturally the technique applies to to",
    "start": "1506000",
    "end": "1508440"
  },
  {
    "text": "both Linux and Android kernels uh and",
    "start": "1508440",
    "end": "1511000"
  },
  {
    "text": "can support o UF and um double free",
    "start": "1511000",
    "end": "1514720"
  },
  {
    "text": "vulnerabilities and finally it can",
    "start": "1514720",
    "end": "1516559"
  },
  {
    "text": "bypass many mitigations including some",
    "start": "1516559",
    "end": "1519159"
  },
  {
    "text": "of the latest and upcoming ones um and",
    "start": "1519159",
    "end": "1522720"
  },
  {
    "text": "because it manipulates physical Pages",
    "start": "1522720",
    "end": "1524600"
  },
  {
    "text": "directly can bypass defenses set up in",
    "start": "1524600",
    "end": "1527720"
  },
  {
    "text": "the virtual memory memory layer it also",
    "start": "1527720",
    "end": "1530360"
  },
  {
    "text": "requires fewer steps um naturally making",
    "start": "1530360",
    "end": "1533520"
  },
  {
    "text": "our our technique more robust uh and and",
    "start": "1533520",
    "end": "1536960"
  },
  {
    "text": "more",
    "start": "1536960",
    "end": "1539200"
  },
  {
    "text": "stable um and if you're interested in",
    "start": "1539960",
    "end": "1542080"
  },
  {
    "text": "this technique we have um open sourc a",
    "start": "1542080",
    "end": "1544640"
  },
  {
    "text": "number of exploits uh for some reent",
    "start": "1544640",
    "end": "1548039"
  },
  {
    "text": "cves we also have detailed white paper",
    "start": "1548039",
    "end": "1551320"
  },
  {
    "text": "that you can refer to um feel free to",
    "start": "1551320",
    "end": "1554000"
  },
  {
    "text": "contact me or any of our team members um",
    "start": "1554000",
    "end": "1557520"
  },
  {
    "text": "we're happy to to to chat more um but if",
    "start": "1557520",
    "end": "1560080"
  },
  {
    "text": "you have questions uh please also come",
    "start": "1560080",
    "end": "1562640"
  },
  {
    "text": "come up and um and",
    "start": "1562640",
    "end": "1564520"
  },
  {
    "text": "ask um so outside of this work um our",
    "start": "1564520",
    "end": "1567600"
  },
  {
    "text": "group at",
    "start": "1567600",
    "end": "1568640"
  },
  {
    "text": "UCR also published a number of open-",
    "start": "1568640",
    "end": "1571360"
  },
  {
    "text": "source tools for automated bug triaging",
    "start": "1571360",
    "end": "1574440"
  },
  {
    "text": "and and exploit exploitability",
    "start": "1574440",
    "end": "1576799"
  },
  {
    "text": "analysis um so figuring out which kernel",
    "start": "1576799",
    "end": "1581120"
  },
  {
    "text": "bugs are more promising with with",
    "start": "1581120",
    "end": "1583720"
  },
  {
    "text": "stronger exploit Primitives and so on um",
    "start": "1583720",
    "end": "1587000"
  },
  {
    "text": "feel free to give them a try",
    "start": "1587000",
    "end": "1588760"
  },
  {
    "text": "hopefully it'll make your exploit Dev",
    "start": "1588760",
    "end": "1590480"
  },
  {
    "text": "process a little easier um with that",
    "start": "1590480",
    "end": "1593399"
  },
  {
    "text": "thanks very much and I'm happy to take",
    "start": "1593399",
    "end": "1596110"
  },
  {
    "text": "[Applause]",
    "start": "1596110",
    "end": "1606549"
  },
  {
    "text": "questions uh what mitigations are",
    "start": "1612320",
    "end": "1614720"
  },
  {
    "text": "available or do you",
    "start": "1614720",
    "end": "1616600"
  },
  {
    "text": "propose mitigations",
    "start": "1616600",
    "end": "1619279"
  },
  {
    "text": "I'm sorry can you speak a little louder",
    "start": "1619279",
    "end": "1622559"
  },
  {
    "text": "mitigation what mitigations are",
    "start": "1622559",
    "end": "1624960"
  },
  {
    "text": "available or do you propose to prevent",
    "start": "1624960",
    "end": "1628320"
  },
  {
    "text": "uh pce Jack um mitigations okay um so we",
    "start": "1628320",
    "end": "1632480"
  },
  {
    "text": "haven't thought too much about what kind",
    "start": "1632480",
    "end": "1634600"
  },
  {
    "text": "of new mitigations can be",
    "start": "1634600",
    "end": "1638640"
  },
  {
    "text": "um effective against page Jack I guess",
    "start": "1638640",
    "end": "1642360"
  },
  {
    "text": "one of the things we could do is",
    "start": "1642360",
    "end": "1644760"
  },
  {
    "text": "physical I guess isolation at the",
    "start": "1644760",
    "end": "1647520"
  },
  {
    "text": "physical page layer which is you no no",
    "start": "1647520",
    "end": "1650679"
  },
  {
    "text": "longer constrained to the virtual memory",
    "start": "1650679",
    "end": "1652559"
  },
  {
    "text": "layer um but at this point it's unclear",
    "start": "1652559",
    "end": "1656240"
  },
  {
    "text": "how expensive or how easy it is to",
    "start": "1656240",
    "end": "1658200"
  },
  {
    "text": "implement something like that",
    "start": "1658200",
    "end": "1662200"
  }
]