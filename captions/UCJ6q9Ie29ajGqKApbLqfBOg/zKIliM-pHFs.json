[
  {
    "start": "0",
    "end": "240000"
  },
  {
    "text": "[Music]",
    "start": "4230",
    "end": "14049"
  },
  {
    "text": "hello and welcome to our talk my name is daniel and i will start with uh introducing you to rohammer and",
    "start": "15599",
    "end": "23039"
  },
  {
    "text": "you might remember row hammer js it took the known row hammer attack and",
    "start": "23039",
    "end": "28320"
  },
  {
    "text": "was able to gain root privileges just from a web browser from a website how do we",
    "start": "28320",
    "end": "34160"
  },
  {
    "text": "get to these bit flips well row hammer is a problem in dram cells and if you look at dram",
    "start": "34160",
    "end": "40079"
  },
  {
    "text": "you will see that this chip is split into multiple banks and you will have rows maybe something like 32 000 rows",
    "start": "40079",
    "end": "47520"
  },
  {
    "text": "and these rows also have a row buffer if you read from a row then things have",
    "start": "47520",
    "end": "53440"
  },
  {
    "text": "to be copied into this row buffer the rows themselves they are basically they store the single bits",
    "start": "53440",
    "end": "59680"
  },
  {
    "text": "um and that's basically capacitor and transistor the capacitor is charged to store a",
    "start": "59680",
    "end": "65040"
  },
  {
    "text": "value of one or zero okay and the next step uh how",
    "start": "65040",
    "end": "71439"
  },
  {
    "text": "does rowhammer work well these cells these are capacitors they leak over time",
    "start": "71439",
    "end": "77200"
  },
  {
    "text": "so they need to be refreshed regularly and what you can do here is you can",
    "start": "77200",
    "end": "85280"
  },
  {
    "text": "access certain rows in this dram bank and",
    "start": "85280",
    "end": "91840"
  },
  {
    "text": "by accessing a row you will discharge not only the cells that you are reading",
    "start": "91840",
    "end": "97119"
  },
  {
    "text": "and copying into the row buffer but also close by cells that are in proximity to these cells",
    "start": "97119",
    "end": "103040"
  },
  {
    "text": "and this is what we call the row hammer effect so to guarantee data integrity you have",
    "start": "103040",
    "end": "109200"
  },
  {
    "text": "to refresh very frequently so that this effect and other effects don't occur so",
    "start": "109200",
    "end": "115680"
  },
  {
    "text": "you activate a row you copy it into the row buffer you activate the other row you copy it into the row buffer and then",
    "start": "115680",
    "end": "122560"
  },
  {
    "text": "after some time you see bit flips in the middle row now what can you do with that well you",
    "start": "122560",
    "end": "127680"
  },
  {
    "text": "can exploit this in different ways for instance flipping um bits in code and here is an",
    "start": "127680",
    "end": "133440"
  },
  {
    "text": "example uh for instance if you look at sudo there is this jump equal instruction",
    "start": "133440",
    "end": "139200"
  },
  {
    "text": "that is used for the password check if you enter the password correctly then the jump equal will be true",
    "start": "139200",
    "end": "144640"
  },
  {
    "text": "and it will jump to the location and will uh give you this elevated privileges",
    "start": "144640",
    "end": "150080"
  },
  {
    "text": "however if not then it will terminate and you won't get the privileges but what happens if we flip a bit in exactly",
    "start": "150080",
    "end": "156400"
  },
  {
    "text": "this jump instruction well if we flip the first bit it becomes the heart instruction",
    "start": "156400",
    "end": "161519"
  },
  {
    "text": "xor push some prefix for other instructions um other jump instructions that might be",
    "start": "161519",
    "end": "168480"
  },
  {
    "text": "exploitable already and the last one great if we flip one bit we get go from",
    "start": "168480",
    "end": "174239"
  },
  {
    "text": "jump equal to jump not equal and then sudo will give anyone uh root privileges",
    "start": "174239",
    "end": "181280"
  },
  {
    "text": "who does not enter the correct password but not to the person entering the correct password this is great and this allows us to",
    "start": "181280",
    "end": "188319"
  },
  {
    "text": "exploit row hammer but ddr3 is affected ddr4 is affected even ecc ram can have errors",
    "start": "188319",
    "end": "196400"
  },
  {
    "text": "that are not corrected by the integrated error correction the question then is if you think about",
    "start": "196400",
    "end": "203280"
  },
  {
    "text": "sgx intel's sgx security enclaves they are integrity protected",
    "start": "203280",
    "end": "208560"
  },
  {
    "text": "and this would prevent rohammer in principle because you would detect the integrity error",
    "start": "208560",
    "end": "215760"
  },
  {
    "text": "um actually daniel this is meant to be a talk about how to flip bits without row hammer",
    "start": "215760",
    "end": "222799"
  },
  {
    "text": "sorry yes i was getting to that kid i was i was getting there but can you",
    "start": "223200",
    "end": "228640"
  },
  {
    "text": "please not just walk into my slides well i'll take over for a little bit",
    "start": "228640",
    "end": "234159"
  },
  {
    "text": "so let's talk about plunder vault plundervolt is flipping bits from",
    "start": "234159",
    "end": "239439"
  },
  {
    "text": "software but without row hammer and the first thing we did is we did something called fault injection",
    "start": "239439",
    "end": "245120"
  },
  {
    "start": "240000",
    "end": "658000"
  },
  {
    "text": "yes i know what fault injection is i do that all the time so you have to have some specialized lab equipment and you",
    "start": "245120",
    "end": "252000"
  },
  {
    "text": "maybe need some to sort of some cables to the pins of the chip and then you can play around maybe with",
    "start": "252000",
    "end": "257120"
  },
  {
    "text": "the voltage or so to flip some bits in the chip you mean like the picture wall actually not anymore",
    "start": "257120",
    "end": "263120"
  },
  {
    "text": "so now you can modify hardware from software so you can effectively create hardware fault injection attacks",
    "start": "263120",
    "end": "270000"
  },
  {
    "text": "using software okay so you say basically this replaces my whole lab equipment and so on with this",
    "start": "270000",
    "end": "276240"
  },
  {
    "text": "memory mapped register so what is that that's exactly right so you can in software write to a memory",
    "start": "276240",
    "end": "284160"
  },
  {
    "text": "maps register which then modifies the hardware and the reason you might want to do this",
    "start": "284160",
    "end": "290080"
  },
  {
    "text": "is because you might have a gaming machine that you want to respond really really quickly",
    "start": "290080",
    "end": "295360"
  },
  {
    "text": "or you might have a computer in the cloud that you want to have low power consumption or your machine",
    "start": "295360",
    "end": "301759"
  },
  {
    "text": "might be getting really really hot and this gives the operating system a way to dynamically change maybe the",
    "start": "301759",
    "end": "308639"
  },
  {
    "text": "frequency or voltage to protect the chip okay it sounds like a lot less hassle than",
    "start": "308639",
    "end": "314560"
  },
  {
    "text": "like fiddling around with the hardware and all the time we short something and destroy something yeah and this is",
    "start": "314560",
    "end": "320240"
  },
  {
    "text": "called dynamic voltage and frequency scaling this has been used in the first of its kind attack in",
    "start": "320240",
    "end": "326960"
  },
  {
    "text": "something called clock screw a clock screw exposing the perils of security oblivious",
    "start": "326960",
    "end": "333199"
  },
  {
    "text": "energy management and what they did is in software they modified the",
    "start": "333199",
    "end": "339840"
  },
  {
    "text": "code which changed the frequency which caused faults and",
    "start": "339840",
    "end": "346720"
  },
  {
    "text": "from this they were also able to fault something inside trust zone because the frequency",
    "start": "346720",
    "end": "352639"
  },
  {
    "text": "and the voltage regulators are the same they manage the same voltage and frequency whether you're",
    "start": "352639",
    "end": "358560"
  },
  {
    "text": "running untrusted code or theoretically trusted code and this is their attack they were able",
    "start": "358560",
    "end": "365120"
  },
  {
    "text": "to an infer a secret aes key that was stored within trust zone and they were able to trick trustzone",
    "start": "365120",
    "end": "371440"
  },
  {
    "text": "into loading a self-signed application not long after there was another",
    "start": "371440",
    "end": "376639"
  },
  {
    "text": "attack very similar called vault jockey again this focused on an arm chip though they were both attacks",
    "start": "376639",
    "end": "382479"
  },
  {
    "text": "against arm wait a second wait a second you're talking all about attacks that already",
    "start": "382479",
    "end": "388160"
  },
  {
    "text": "exist and yes okay we know you can attack arm chips like that but you know that uh",
    "start": "388160",
    "end": "393520"
  },
  {
    "text": "intel has a very very big market share on desktop computers so maybe we should also look at intel",
    "start": "393520",
    "end": "400479"
  },
  {
    "text": "processors yeah but can you actually can you do that can you underclock and overclock on intel i don't know",
    "start": "400479",
    "end": "406319"
  },
  {
    "text": "uh i actually did that when i was a teenager um because my system was running too hot",
    "start": "406319",
    "end": "413280"
  },
  {
    "text": "and then i undervolted it and these tools um i also later on used this when i had",
    "start": "413280",
    "end": "418720"
  },
  {
    "text": "some laptop um the under vaulting made a huge difference if you run a benchmark you",
    "start": "418720",
    "end": "424080"
  },
  {
    "text": "would underwater the cpu not change the cpu frequency you would undervolt it and then you",
    "start": "424080",
    "end": "429280"
  },
  {
    "text": "would get a higher benchmark score because the cpu runs into",
    "start": "429280",
    "end": "434479"
  },
  {
    "text": "throttling less often and this is really interesting that means you can actually change the",
    "start": "434479",
    "end": "440880"
  },
  {
    "text": "voltage from software and i've also used different tools here for instance i used the rm clock tool but there are",
    "start": "440880",
    "end": "448960"
  },
  {
    "text": "many different tools that you can use for that um and today it's quite normal that you would uh optimize the clock frequency",
    "start": "448960",
    "end": "456000"
  },
  {
    "text": "and the voltage on gaming computers uh or also on laptops so that they don't overheat all",
    "start": "456000",
    "end": "462000"
  },
  {
    "text": "the time so if you look at these tools you will figure out that",
    "start": "462000",
    "end": "467440"
  },
  {
    "text": "they use some secret msr msr hex 150",
    "start": "467440",
    "end": "475520"
  },
  {
    "text": "and we looked a bit at this msr and we can identify uh what",
    "start": "475520",
    "end": "482400"
  },
  {
    "text": "uh bit that serves which purpose yeah and this model specific register this msr has",
    "start": "482400",
    "end": "489520"
  },
  {
    "text": "many functions but we're just showing the voltage functions here so you've got the offset which is over and under volting and",
    "start": "489520",
    "end": "497360"
  },
  {
    "text": "you've got static voltage and we're specifically looking at under vaulting",
    "start": "497360",
    "end": "502800"
  },
  {
    "text": "so let's have a look at c code and see how you actually run that so the first thing we're going",
    "start": "502800",
    "end": "508319"
  },
  {
    "text": "to need to do is to set the frequency to be one specific thing because we're going to be modifying the",
    "start": "508319",
    "end": "513760"
  },
  {
    "text": "voltage so you want the frequency to stay the same but the voltage to be changed and we're setting for this",
    "start": "513760",
    "end": "520080"
  },
  {
    "text": "particular machine we're setting it to one gigahertz and i'm just going to check that that has taken",
    "start": "520080",
    "end": "526480"
  },
  {
    "text": "and yet we're now running at one gigahertz and the next thing that we're going to need to do is to load the msr driver because it's",
    "start": "526480",
    "end": "534480"
  },
  {
    "text": "not explicitly loaded and now we're going to look at how you",
    "start": "534480",
    "end": "539680"
  },
  {
    "text": "actually change the voltage so what you need to do is to open the msr see if you can spot",
    "start": "539680",
    "end": "546080"
  },
  {
    "text": "the line of code that does that yep there it is and here's where we",
    "start": "546080",
    "end": "553360"
  },
  {
    "text": "write to the msr and you only need to write to one of the cpus because they all share the same voltage you'll notice",
    "start": "553360",
    "end": "560720"
  },
  {
    "text": "that we're writing to two planes plane zero and plane two that's the cpu core and also the cache",
    "start": "560720",
    "end": "566560"
  },
  {
    "text": "and you need to write to both of them because the msi will take the higher of the two",
    "start": "566560",
    "end": "572320"
  },
  {
    "text": "and now that we know that we are able to undervolt what can we do with that well let's write some code to see if we",
    "start": "572320",
    "end": "579760"
  },
  {
    "text": "can possibly get this to fault can you see what my code is doing okay let me check",
    "start": "579760",
    "end": "585680"
  },
  {
    "text": "so this is a while loop and you initialized var and correct the same value and then you also compute",
    "start": "585680",
    "end": "593360"
  },
  {
    "text": "all the time same value again yeah so this will never stop",
    "start": "593360",
    "end": "600160"
  },
  {
    "text": "where did you learn to program where did i learn to program at birmingham university uh so let's",
    "start": "600560",
    "end": "607200"
  },
  {
    "text": "take a look at it in action so here we go i'm multiplying dead beef by one one two two three three four four",
    "start": "607200",
    "end": "612480"
  },
  {
    "text": "five five i'm under volting minus 252 millivolts three four five oh come on yeah",
    "start": "612480",
    "end": "620399"
  },
  {
    "text": "we got a fault we got an incorrect multiplication result and if you look at the xor it's a bit flip so then we started",
    "start": "620399",
    "end": "628560"
  },
  {
    "text": "just trying random numbers so we're just generating a whole set of random numbers to see if we get any other faults can we follow a",
    "start": "628560",
    "end": "635120"
  },
  {
    "text": "different multiplication and again we got another bit flip",
    "start": "635120",
    "end": "640560"
  },
  {
    "text": "so at this point we just did lots and lots of random numbers and we started to see not just one bit flip",
    "start": "640560",
    "end": "645680"
  },
  {
    "text": "but there you go we've got more we've got more bit flips and in different locations so we have just managed to create bit",
    "start": "645680",
    "end": "653200"
  },
  {
    "text": "flips by lowering the voltage in user space and this is where we come to intel sjx",
    "start": "653200",
    "end": "660720"
  },
  {
    "start": "658000",
    "end": "787000"
  },
  {
    "text": "because we need root privileges to write msr so a user space fault in itself is not very",
    "start": "660720",
    "end": "666399"
  },
  {
    "text": "useful because we if we root we can do anyway anything in user space right",
    "start": "666399",
    "end": "672640"
  },
  {
    "text": "so that's where intel sjx comes in as daniel said it's a technology to create trusted uh areas enclaves uh in your",
    "start": "672640",
    "end": "680800"
  },
  {
    "text": "uh in your intel cpu so from an untrusted program you can create an enclave and then call",
    "start": "680800",
    "end": "687279"
  },
  {
    "text": "trusted functions in that enclave but you cannot actually look at the memory of the enclave so if for instance",
    "start": "687279",
    "end": "693920"
  },
  {
    "text": "the cryptographic signature is running inside the enclave you can kind of invoke signature but you",
    "start": "693920",
    "end": "699360"
  },
  {
    "text": "cannot actually extract the key but if you're the operating system can't you just look at the data anyway",
    "start": "699360",
    "end": "706079"
  },
  {
    "text": "no so that's a crucial part of sjx so even the operating system is",
    "start": "706079",
    "end": "712800"
  },
  {
    "text": "untrusted and the operating system cannot read the enclave memory so how is it protected then how",
    "start": "712800",
    "end": "718959"
  },
  {
    "text": "can you do that so that uses something called the memory encryption engine that encrypts and integrity",
    "start": "718959",
    "end": "727040"
  },
  {
    "text": "protects all the data that is written to uh external dram",
    "start": "727040",
    "end": "732240"
  },
  {
    "text": "so whenever an enclave writes something to memory it goes through this memory encryption engine is encrypted with a key that is not",
    "start": "732240",
    "end": "738959"
  },
  {
    "text": "accessible even to the operating system and is then written into dram and vice versa when",
    "start": "738959",
    "end": "744320"
  },
  {
    "text": "you read it back the memory encryption engine will first check that the data has not been changed for instance not",
    "start": "744320",
    "end": "750399"
  },
  {
    "text": "that you have not flipped a bit with row hammer also in in dram and then only if that's valid it",
    "start": "750399",
    "end": "756560"
  },
  {
    "text": "will pass it on to the enclave and provides a decrypted data to the enclave",
    "start": "756560",
    "end": "763760"
  },
  {
    "text": "so if you inject a bit flip in enclave memory say with rawhammer what",
    "start": "765200",
    "end": "770639"
  },
  {
    "text": "you get is that you will basically crash the system so you lock the memory controller and the system hauls",
    "start": "770639",
    "end": "776399"
  },
  {
    "text": "that's kind of like a denial of service attack but you cannot do much much more with that so you cannot",
    "start": "776399",
    "end": "782000"
  },
  {
    "text": "let's say flip bits inside uh enclave memory with rohan you're saying that rowhammer didn't work",
    "start": "782000",
    "end": "788480"
  },
  {
    "start": "787000",
    "end": "1119000"
  },
  {
    "text": "so my question is will plundervolt work so yes we will see that in a bit",
    "start": "788480",
    "end": "796000"
  },
  {
    "text": "and plundervolt works because you inject the fault actually inside the cpu before the data is",
    "start": "796000",
    "end": "803440"
  },
  {
    "text": "written into the encryption engine and from there then to memory so you kind of inject the bit flip in",
    "start": "803440",
    "end": "808480"
  },
  {
    "text": "the cpu and then it's encrypted integrity protected and written to memory in so here we can see your",
    "start": "808480",
    "end": "815040"
  },
  {
    "text": "multiplication example inside an enclave we go down in voltage one millivolt at a",
    "start": "815040",
    "end": "820880"
  },
  {
    "text": "time and then at minus 265 millivolts here we have actually managed to flip a",
    "start": "820880",
    "end": "827760"
  },
  {
    "text": "bit in a multiplication and as you can see that's actually exactly the same bit",
    "start": "827760",
    "end": "833519"
  },
  {
    "text": "that we flipped in user space code before but this time inside an sgx enclave so",
    "start": "833519",
    "end": "839839"
  },
  {
    "text": "yeah great you've flipped a bit inside sgx and it didn't lock up you didn't get an",
    "start": "839839",
    "end": "845199"
  },
  {
    "text": "integrity error but it's just multiplications what on earth can you use that for",
    "start": "845199",
    "end": "852240"
  },
  {
    "text": "well multiplication maybe uh not directly but um we can of course look at crypto so i like to break",
    "start": "852240",
    "end": "858639"
  },
  {
    "text": "cryptographic algorithms and i used to do that with hardware fault attacks and now i can do it from software in",
    "start": "858639",
    "end": "865279"
  },
  {
    "text": "sjx so for instance rsa well-known public key crypto algorithm and very often when rsa",
    "start": "865279",
    "end": "873519"
  },
  {
    "text": "is actually implemented that uses a optimization called the chinese",
    "start": "873519",
    "end": "879199"
  },
  {
    "text": "remainder theorem and for that we have a very very effective fault attack if we can",
    "start": "879199",
    "end": "885440"
  },
  {
    "text": "inject a fault into that computation so i will not go into the mathematical details too much here",
    "start": "885440",
    "end": "891920"
  },
  {
    "text": "just say that in normal rsa you have a public public modulus which is a product",
    "start": "891920",
    "end": "897680"
  },
  {
    "text": "of two prime numbers and for instance when you decrypt a message using your",
    "start": "897680",
    "end": "902880"
  },
  {
    "text": "private key you take the ciphertext to the power of your private exponent",
    "start": "902880",
    "end": "908000"
  },
  {
    "text": "modulo n and then you get the message back now in this chinese remainder theorem that",
    "start": "908000",
    "end": "913839"
  },
  {
    "text": "is a bit more complicated so kind of what you do is you split up the computation into two parts",
    "start": "913839",
    "end": "919199"
  },
  {
    "text": "modulo p and modulo q and again i will not go into the mathematical details but if you manage",
    "start": "919199",
    "end": "926480"
  },
  {
    "text": "to only fault one of these two sub-exponentiations they're very very efficient ways to",
    "start": "926480",
    "end": "933680"
  },
  {
    "text": "recover one of the prime factors and then you can just divide the public modulus n by one of the prime",
    "start": "933680",
    "end": "940160"
  },
  {
    "text": "factors and you get the other one got a question what are we we're trying to get p and q so what what does that give us if",
    "start": "940160",
    "end": "946880"
  },
  {
    "text": "we've got p or q so that gives you the uh private key so you uh you get p and then you take the",
    "start": "946880",
    "end": "954240"
  },
  {
    "text": "public value n divided by p for instance you get q and then you can also compute this uh d",
    "start": "954240",
    "end": "961199"
  },
  {
    "text": "this private exponent so will plunder volt be able to do that",
    "start": "961199",
    "end": "967120"
  },
  {
    "text": "of course plunder world uh can do that so there um just before i show the actual demos",
    "start": "967120",
    "end": "972959"
  },
  {
    "text": "there are two ways to kind of recover one of the prime factors from a faulty uh in this case a decryption",
    "start": "972959",
    "end": "980880"
  },
  {
    "text": "so one is called the bell core attack that needs the decryption uh once valid and one's faulty of the",
    "start": "980880",
    "end": "987519"
  },
  {
    "text": "same cipher text and the other optimized variant is called the lenstra attack and that can work with a single",
    "start": "987519",
    "end": "994000"
  },
  {
    "text": "faulty decryption which is great if there's some randomization in the scheme so we only need to get one",
    "start": "994000",
    "end": "1000800"
  },
  {
    "text": "fault to be able to get the private key out correct correct so let's look at an example we have here an sjx",
    "start": "1000800",
    "end": "1008880"
  },
  {
    "text": "function so what we do in there is just use the intel library function",
    "start": "1008880",
    "end": "1014480"
  },
  {
    "text": "ipps rsa decrypt which uses this chinese remainder cream optimization and",
    "start": "1014480",
    "end": "1020399"
  },
  {
    "text": "we underwater and we undervolt until we get like a faulty uh",
    "start": "1020399",
    "end": "1025600"
  },
  {
    "text": "until we get a faulty uh decryption so that we can see in this video here we do an rsa",
    "start": "1025600",
    "end": "1031520"
  },
  {
    "text": "decryption and actually first get a correct result even though we're undervolting so",
    "start": "1031520",
    "end": "1037120"
  },
  {
    "text": "we try again again get a correct result let's do another try and again we will get a correct result",
    "start": "1037120",
    "end": "1044480"
  },
  {
    "text": "this time now if we try force time finally we'll get our desired faulty results we get a",
    "start": "1044480",
    "end": "1052080"
  },
  {
    "text": "faulty decryption and that we can now put into our little python script here which",
    "start": "1052080",
    "end": "1059440"
  },
  {
    "text": "implements a leinster attack to recover one of the prime factors in this case a value starting with",
    "start": "1059440",
    "end": "1066160"
  },
  {
    "text": "eecf and now to prove that we actually haven't cheated let's look into the enclave code here",
    "start": "1066160",
    "end": "1073280"
  },
  {
    "text": "and let's see which kind of value was hard coded there and we'll also check like for the first few",
    "start": "1073280",
    "end": "1080080"
  },
  {
    "text": "digits of our um of our coefficient and then we see that we have recovered",
    "start": "1080080",
    "end": "1086000"
  },
  {
    "text": "p here so you've got the private key out of of something happening inside an",
    "start": "1086000",
    "end": "1093679"
  },
  {
    "text": "enclave just by under vaulting yes exactly and that is uh things that should not be",
    "start": "1093679",
    "end": "1099039"
  },
  {
    "text": "possible right that's why there's uh integrity protection on the memory so if you can",
    "start": "1099039",
    "end": "1104320"
  },
  {
    "text": "do it for rsa what else could you do it for the are there other more",
    "start": "1104320",
    "end": "1109520"
  },
  {
    "text": "commonly used cryptographic algorithms you could try uh so yes certainly i like to break",
    "start": "1109520",
    "end": "1115919"
  },
  {
    "text": "crypto so i'll stay a bit more with the crypto so yeah the question is what else can we break",
    "start": "1115919",
    "end": "1121600"
  },
  {
    "start": "1119000",
    "end": "1182000"
  },
  {
    "text": "and now we look at aes which is probably the most popular symmetric encryption",
    "start": "1121600",
    "end": "1126960"
  },
  {
    "text": "algorithm it's all over the code base of sjx in in even in the sdk of",
    "start": "1126960",
    "end": "1133520"
  },
  {
    "text": "intel for various operations internally it uses a four times four byte state and applies uh ten rounds of uh",
    "start": "1133520",
    "end": "1141120"
  },
  {
    "text": "transformations on that and i was just thinking maybe you could attack the brand new instruction set uh intel's",
    "start": "1141120",
    "end": "1148320"
  },
  {
    "text": "brand new aes new instruction set because that's really heavily optimized isn't this right to uh to prevent side",
    "start": "1148320",
    "end": "1155200"
  },
  {
    "text": "channel attacks yes correct so in halfway new intel processors you have",
    "start": "1155200",
    "end": "1161039"
  },
  {
    "text": "this asni instructions that allow you to do aes very quickly and also protect against",
    "start": "1161039",
    "end": "1168240"
  },
  {
    "text": "some side channel attacks but this only protects protects against timing attacks so it",
    "start": "1168240",
    "end": "1173360"
  },
  {
    "text": "will not protect you against a fault attack and luckily there's again also very efficient fault attack",
    "start": "1173360",
    "end": "1179679"
  },
  {
    "text": "on as so that works like this you inject a",
    "start": "1179679",
    "end": "1185520"
  },
  {
    "text": "single byte fault into the eighth round of aes into the state and then that will",
    "start": "1185520",
    "end": "1192240"
  },
  {
    "text": "propagate and through some mathematical operations you can recover the complete aes",
    "start": "1192240",
    "end": "1198160"
  },
  {
    "text": "key from only one correct and one faulty encryption or decryption of the",
    "start": "1198160",
    "end": "1204000"
  },
  {
    "text": "same input so here we have the implementation of that inside sjx so we",
    "start": "1204000",
    "end": "1210080"
  },
  {
    "text": "do as you see here twice the same operation so normally this loop should never terminate because",
    "start": "1210080",
    "end": "1215520"
  },
  {
    "text": "the result is uh can i ask why why are you now doing the same operation twice",
    "start": "1215520",
    "end": "1222480"
  },
  {
    "text": "uh because we need uh one correct and one faulty uh encryption in this case",
    "start": "1222480",
    "end": "1229600"
  },
  {
    "text": "by the way this is of course uh just pseudocode so we're not really comparing this uh pointers here just for",
    "start": "1229600",
    "end": "1235120"
  },
  {
    "text": "like people who wanted so there's an actual memcompair uh happening there",
    "start": "1235120",
    "end": "1242000"
  },
  {
    "text": "okay so let's see that in action in sjx so we call a s encryption here with minus 262",
    "start": "1242000",
    "end": "1249039"
  },
  {
    "text": "millivolts and we got fault here in the fourth round that's actually too early so we do it again",
    "start": "1249039",
    "end": "1255760"
  },
  {
    "text": "here we have a fault again in the fifth round so too early so we'll run the attack again",
    "start": "1255760",
    "end": "1262400"
  },
  {
    "text": "another fifth round and then finally in another attempt we'll get the desired",
    "start": "1262400",
    "end": "1268000"
  },
  {
    "text": "location which is the eighth round and now we can use the faulty and the correct cipher",
    "start": "1268000",
    "end": "1275840"
  },
  {
    "text": "and puts it into our differential fault attack and as you see here we actually use two pairs on which we",
    "start": "1275840",
    "end": "1284080"
  },
  {
    "text": "run the differential fault attack this is simply because the attack will give us multiple key",
    "start": "1284080",
    "end": "1289840"
  },
  {
    "text": "candidates and then we can use the uh intersection of the two results to find the correct key so",
    "start": "1289840",
    "end": "1297919"
  },
  {
    "text": "here you see the attack uh running we recovered the keys from for pair one",
    "start": "1297919",
    "end": "1303120"
  },
  {
    "text": "and pair two and we take the intersection and recover the um in this case here is",
    "start": "1303120",
    "end": "1309039"
  },
  {
    "text": "the correct key which is zero zero zero one zero two uh and so on so",
    "start": "1309039",
    "end": "1315360"
  },
  {
    "text": "just to show that we didn't cheat let's look at the enclave code and let's grab for the key",
    "start": "1315360",
    "end": "1322880"
  },
  {
    "text": "and indeed we recover this value so as i said we used two pairs in this example you could also",
    "start": "1322880",
    "end": "1329760"
  },
  {
    "text": "get away with one pair and then a brute force overall the candidate if you have unknown plaintext for instance",
    "start": "1329760",
    "end": "1337840"
  },
  {
    "text": "brilliant so now we've got keys out of both both rsa and aes new instruction set",
    "start": "1337840",
    "end": "1344640"
  },
  {
    "text": "but that's just crypto and i don't really get cryptos is there anything else we can do with that yes i think we could do something",
    "start": "1344640",
    "end": "1351520"
  },
  {
    "text": "uh with that that would relate more to uh system security um i would say it's not just crypto uh",
    "start": "1351520",
    "end": "1359120"
  },
  {
    "text": "for instance if you take a simple code snippet like this uh we take a pointer to some area offset",
    "start": "1359120",
    "end": "1366240"
  },
  {
    "text": "uh and then we want to store something there an enclave secret maybe a secret key or something but daniel",
    "start": "1366240",
    "end": "1373360"
  },
  {
    "text": "what what's that got to do there's no multiplications in there that's just pointer arithmetic that's right that's right but pointer",
    "start": "1373360",
    "end": "1379679"
  },
  {
    "text": "arithmetic implicitly uses multiplications so if you would rewrite this",
    "start": "1379679",
    "end": "1385840"
  },
  {
    "text": "uh this area axis there then you would get this code basically just wow foo equals area plus offset",
    "start": "1385840",
    "end": "1394400"
  },
  {
    "text": "times uh the size of the structure that you were addressing here this is",
    "start": "1394400",
    "end": "1400080"
  },
  {
    "text": "simple pointer arithmetics i know i think that many people will know that from their c programming classes",
    "start": "1400080",
    "end": "1406000"
  },
  {
    "text": "um and of course then you have a multiplication so that's something that we can fault",
    "start": "1406000",
    "end": "1411360"
  },
  {
    "text": "so maybe we should try that uh if we follow this multiplication we will get to the wrong offset",
    "start": "1411360",
    "end": "1417039"
  },
  {
    "text": "and then hopefully we will write to a wrong location and see what we can do with that",
    "start": "1417039",
    "end": "1424080"
  },
  {
    "text": "okay so in this example we have an enclave with a base and a limit so within this region this is secure memory",
    "start": "1424720",
    "end": "1432080"
  },
  {
    "text": "that the attacker cannot read so staying between here and here is secure",
    "start": "1432080",
    "end": "1438559"
  },
  {
    "text": "now if we run this many many times we will see that at some point we we",
    "start": "1438559",
    "end": "1444480"
  },
  {
    "text": "have a fault and this fault um means that we started writing to the same location",
    "start": "1444480",
    "end": "1451200"
  },
  {
    "text": "over and over again and now we have a fold and it now writes to a different location outside of this secure region and that",
    "start": "1451200",
    "end": "1458080"
  },
  {
    "text": "means that we can read what the enclave wrote there and we can see that it wrote that beef",
    "start": "1458080",
    "end": "1464799"
  },
  {
    "text": "there which is in this case the secret that we have implemented in our enclave",
    "start": "1464799",
    "end": "1470799"
  },
  {
    "text": "now this is pretty bad so if we go back to the to the graphic you can see that clearly",
    "start": "1470799",
    "end": "1476559"
  },
  {
    "text": "only writing within this green area uh this is secure writing to the faulted",
    "start": "1476559",
    "end": "1481600"
  },
  {
    "text": "location outside to user memory means that the user directly can read this value",
    "start": "1481600",
    "end": "1488480"
  },
  {
    "start": "1489000",
    "end": "1661000"
  },
  {
    "text": "well the question then is of course if we can induce faults like that how difficult is it to",
    "start": "1489120",
    "end": "1495919"
  },
  {
    "text": "produce these faults without running into a lot of trouble yeah i get asked this question i have to",
    "start": "1495919",
    "end": "1501279"
  },
  {
    "text": "say this is probably the question that i have been asked more than any other single thing so let's talk about that for a bit the",
    "start": "1501279",
    "end": "1508799"
  },
  {
    "text": "first thing that we did is for all the computers that we were able to follow the first thing that we did is we ran a benchmark",
    "start": "1508799",
    "end": "1514799"
  },
  {
    "text": "we found out what was the voltage uh when it was idle and at what point did did it",
    "start": "1514799",
    "end": "1520720"
  },
  {
    "text": "crash and what we wanted to know was how close to the crash point do we need to be and",
    "start": "1520720",
    "end": "1527120"
  },
  {
    "text": "i have to tell you i had some spectacular crashes um when this is my favorite crash um",
    "start": "1527120",
    "end": "1533039"
  },
  {
    "text": "they weren't all as colorful as that unfortunately but here you can see this is an actual",
    "start": "1533039",
    "end": "1539440"
  },
  {
    "text": "graph of a crash and a fulton and it looks like they're pretty close together but",
    "start": "1539440",
    "end": "1546159"
  },
  {
    "text": "actually if you get to the frequencies in the middle we found those to be the most stable and you've got maybe sort of 20 maybe 10",
    "start": "1546159",
    "end": "1554000"
  },
  {
    "text": "millivolts to play with them so you've got just enough to keep the computer stable",
    "start": "1554000",
    "end": "1559679"
  },
  {
    "text": "but we also found out some other things we found out that if you try and buy two",
    "start": "1559679",
    "end": "1566720"
  },
  {
    "text": "identical only mean absolutely identical computers and then you benchmark them they might",
    "start": "1566720",
    "end": "1574400"
  },
  {
    "text": "look different um and that was one of them yeah that's weird so that means that",
    "start": "1574400",
    "end": "1581279"
  },
  {
    "text": "although i bought exactly the same machine i will get basically more performance out of or i",
    "start": "1581279",
    "end": "1587039"
  },
  {
    "text": "might get more performance out of one because it produces less heat yes",
    "start": "1587039",
    "end": "1592240"
  },
  {
    "text": "interesting i didn't know yeah we actually thought we were buying exactly identical machines and we weren't but this way",
    "start": "1592240",
    "end": "1598480"
  },
  {
    "text": "this is why the benchmarking portion is really important before you start faulting um we also found out that we were able",
    "start": "1598480",
    "end": "1606480"
  },
  {
    "text": "to make a machine more stable by maxing out the cause because you needed",
    "start": "1606480",
    "end": "1612880"
  },
  {
    "text": "more under vaulting when they were idle and consequently i was getting more crashes",
    "start": "1612880",
    "end": "1618240"
  },
  {
    "text": "but if we if we maxed out the cause then you needed less under bolting and",
    "start": "1618240",
    "end": "1623840"
  },
  {
    "text": "let's have a quick look at an example of that firstly i'm going to run the",
    "start": "1623840",
    "end": "1629039"
  },
  {
    "text": "multiplication while the cores aren't under a huge load and we get our first volt",
    "start": "1629039",
    "end": "1635279"
  },
  {
    "text": "at minus 163 millivolts incidentally uh these are all things",
    "start": "1635279",
    "end": "1641200"
  },
  {
    "text": "that we haven't demonstrated before uh none of this made it into the paper uh so let's max out the chords now",
    "start": "1641200",
    "end": "1648720"
  },
  {
    "text": "and now we get a fault up minus 153 millivolts",
    "start": "1648720",
    "end": "1654080"
  },
  {
    "text": "that gives us you know 10 millivolts to play with to keep our system stable but there's",
    "start": "1654080",
    "end": "1660640"
  },
  {
    "text": "some more things i thought this might be kind of fun let's just see what else i can fault so",
    "start": "1660640",
    "end": "1665679"
  },
  {
    "start": "1661000",
    "end": "1740000"
  },
  {
    "text": "first of all i'm going to have a go of faulting cat i'm just going to cat a program and i'm going to undervolt",
    "start": "1665679",
    "end": "1671760"
  },
  {
    "text": "you can see the text being written to the screen and there we are we've got a core dump with cat let's try something else",
    "start": "1671760",
    "end": "1679120"
  },
  {
    "text": "how about trying find i'm just going to find a file i know he's on my computer and i'm going to undervolt",
    "start": "1679120",
    "end": "1685360"
  },
  {
    "text": "it found it there and then it core dumped again so we can we can force find to cordon",
    "start": "1685360",
    "end": "1691840"
  },
  {
    "text": "how about ls i piped it to a file otherwise my screen filled up with rubbish",
    "start": "1691840",
    "end": "1697279"
  },
  {
    "text": "and ls yes we even managed to get a core dump with ls that's -181 million so that was quite",
    "start": "1697279",
    "end": "1702799"
  },
  {
    "text": "hard how about verifying a signature with openssl yep again we got a verification failure",
    "start": "1702799",
    "end": "1709600"
  },
  {
    "text": "minus 167 millivolts and that was kind of a bit of fun just to see there was an awful lot of things we were",
    "start": "1709600",
    "end": "1715279"
  },
  {
    "text": "able to fault okay so kid hang on a second so you said that you can kind of crash some programs sounds to me",
    "start": "1715279",
    "end": "1723039"
  },
  {
    "text": "like uh denial of service or do you think there's some some or more to it i think by under vaulting we're managing",
    "start": "1723039",
    "end": "1729039"
  },
  {
    "text": "to get the program to do something it shouldn't and that's kind of interesting because this could be um something that you could",
    "start": "1729039",
    "end": "1736640"
  },
  {
    "text": "attack possibly in the future so we reported this to intel and intel confirmed that we were",
    "start": "1736640",
    "end": "1743039"
  },
  {
    "start": "1740000",
    "end": "1823000"
  },
  {
    "text": "the first reporters they also issued an embargo and we complied with the embargo and",
    "start": "1743039",
    "end": "1750480"
  },
  {
    "text": "during this embargo uh there were also other reporters who also discovered the same vulnerability",
    "start": "1750480",
    "end": "1756159"
  },
  {
    "text": "for instance the vault pawn team and the wall jockey team they also discovered that you can induce",
    "start": "1756159",
    "end": "1762640"
  },
  {
    "text": "faults by playing around with dvfs on intel processors",
    "start": "1762640",
    "end": "1767919"
  },
  {
    "text": "they also participated in the embargo and all of this then went online at the same time",
    "start": "1767919",
    "end": "1774799"
  },
  {
    "text": "so in summary we created a new type of attack against intel sgx",
    "start": "1774880",
    "end": "1780399"
  },
  {
    "text": "we broke the integrity of sgx and within sgx we were able to retrieve",
    "start": "1780399",
    "end": "1787120"
  },
  {
    "text": "aes new instruction set keys we were able to retrieve an rsa key",
    "start": "1787120",
    "end": "1792399"
  },
  {
    "text": "we were able to induce memory corruption in bug-free code and we made the enclave write secrets to",
    "start": "1792399",
    "end": "1799600"
  },
  {
    "text": "untrusted memory not only that we were able to get some linux binaries to core dump",
    "start": "1799600",
    "end": "1807600"
  },
  {
    "text": "and a massive thank you to the grants that make this research possible and a massive thanks to you for watching",
    "start": "1807600",
    "end": "1813919"
  },
  {
    "text": "this talk and for hopefully making it all the way to the end thank you",
    "start": "1813919",
    "end": "1823039"
  },
  {
    "start": "1823000",
    "end": "2072000"
  },
  {
    "text": "and i look like a bit of an idiot okay we're live no we're not i don't",
    "start": "1823039",
    "end": "1828240"
  },
  {
    "text": "think not i think we're live now",
    "start": "1828240",
    "end": "1832158"
  },
  {
    "text": "okay so we got a few questions in the chat and uh just keep posting the questions",
    "start": "1834840",
    "end": "1842320"
  },
  {
    "text": "so one of the last questions that we got was wait wait we're not live i do think well are we",
    "start": "1842320",
    "end": "1851840"
  },
  {
    "text": "yes we are live um so one of the last questions that we had was uh whether",
    "start": "1852640",
    "end": "1858240"
  },
  {
    "text": "the um susceptibility to bit flips comes from uh differences in",
    "start": "1858240",
    "end": "1865519"
  },
  {
    "text": "the chip manufacturing um and we can only say we don't know basically",
    "start": "1865519",
    "end": "1873360"
  },
  {
    "text": "we just observe that they are susceptible to um plunder volt bit flips",
    "start": "1873360",
    "end": "1880559"
  },
  {
    "text": "yeah and that's it and we've seen differences same same processor right you had one example",
    "start": "1880559",
    "end": "1886480"
  },
  {
    "text": "um the same processor and it was a",
    "start": "1886480",
    "end": "1891519"
  },
  {
    "text": "susceptible to bit flips at a different voltage level yeah and it's we don't we don't think",
    "start": "1891519",
    "end": "1896559"
  },
  {
    "text": "i'm 100 live thanks um i don't think we don't think it was differences in production line",
    "start": "1896559",
    "end": "1904000"
  },
  {
    "text": "because i think they would be tiny tiny differences but um i do think possibly the way it's",
    "start": "1904000",
    "end": "1909760"
  },
  {
    "text": "set up or something like that the way the differences in the way the chips um are prepared on the motherboard as",
    "start": "1909760",
    "end": "1915360"
  },
  {
    "text": "they go out which would be kind of interesting to know i i would love to go and uh have a peek",
    "start": "1915360",
    "end": "1920799"
  },
  {
    "text": "at the way intel do things and ask them but i i don't think they're gonna let us know",
    "start": "1920799",
    "end": "1926158"
  },
  {
    "text": "so a lot of uh um good feedback um thank you for the positive feedback",
    "start": "1926880",
    "end": "1933039"
  },
  {
    "text": "um yeah we did actually we filmed it if you're interested we tried to film it live across three uh three different places so we",
    "start": "1933039",
    "end": "1940159"
  },
  {
    "text": "had two different countries and three different locations and we actually did it as live whilst recording",
    "start": "1940159",
    "end": "1945279"
  },
  {
    "text": "ourselves so thank you very much because it took us a long time to do that so thanks for the appreciation",
    "start": "1945279",
    "end": "1951679"
  },
  {
    "text": "a question are there similar capabilities to msr on other architectures",
    "start": "1952480",
    "end": "1959760"
  },
  {
    "text": "well there is an arm right there where the um there were already papers on that uh the",
    "start": "1960559",
    "end": "1966399"
  },
  {
    "text": "vault jockey paper for instance that um did some manipulation",
    "start": "1966399",
    "end": "1971760"
  },
  {
    "text": "of um voltage frequency scaling",
    "start": "1971760",
    "end": "1976960"
  },
  {
    "text": "on an arm so yes there are",
    "start": "1976960",
    "end": "1982080"
  },
  {
    "text": "um i think anyone said someone said does this apply to intel xeon chips as well",
    "start": "1984080",
    "end": "1989279"
  },
  {
    "text": "because you test you've got a xeon machine haven't you oh yeah we have xeon machines i would expect that it's",
    "start": "1989279",
    "end": "1995039"
  },
  {
    "text": "uh applicable just the same yeah i don't see a difference there is there any way to protect against this",
    "start": "1995039",
    "end": "2001600"
  },
  {
    "text": "attack well unfortunately the way to protect against it is to turn the msr off which is what intel have done",
    "start": "2001600",
    "end": "2007760"
  },
  {
    "text": "but you have a choice you can either have sgx or you can undervolt and i have seen a lot",
    "start": "2007760",
    "end": "2014640"
  },
  {
    "text": "of people talking about newer machines that appear to be coming out without the ability",
    "start": "2014640",
    "end": "2020159"
  },
  {
    "text": "to undervolt which is a shame i think it's an interesting uh situation because",
    "start": "2020159",
    "end": "2026559"
  },
  {
    "text": "for more constrained devices it was always possible to implement a protected",
    "start": "2026559",
    "end": "2032159"
  },
  {
    "text": "algorithm but in this case it's unclear what you attack right if you don't detect the",
    "start": "2032159",
    "end": "2037200"
  },
  {
    "text": "crypto then you attack some something else like pointer arithmetic and suddenly it's much more difficult to",
    "start": "2037200",
    "end": "2043519"
  },
  {
    "text": "protect against that in a generic way um more difficult than for certain crypto",
    "start": "2043519",
    "end": "2048878"
  },
  {
    "text": "algorithms thank you uh marina thank you",
    "start": "2048879",
    "end": "2057760"
  },
  {
    "text": "how did you become interested in lower level fault attacks as individuals and a team rather than",
    "start": "2057760",
    "end": "2067240"
  },
  {
    "text": "applications so the fault attacks i mean let's be",
    "start": "2067240",
    "end": "2074158"
  },
  {
    "text": "honest we can we can openly say that clock screw was the first of its kind and clock screw is an absolutely fantastic paper",
    "start": "2074159",
    "end": "2081040"
  },
  {
    "text": "and it opened the world to new attacks and it's because of clock's crew that",
    "start": "2081040",
    "end": "2086800"
  },
  {
    "text": "we've gone on to see a number of attacks against lots of other um chips so that was where we started but as a team i think this is",
    "start": "2086800",
    "end": "2093760"
  },
  {
    "text": "what you're asking as a team we came together because we all brought different things to the table",
    "start": "2093760",
    "end": "2098960"
  },
  {
    "text": "um and so at birmingham we didn't have as much experience as daniel's got for",
    "start": "2098960",
    "end": "2104320"
  },
  {
    "text": "fault injection so when you come together um you know each bring something that adds to the",
    "start": "2104320",
    "end": "2110560"
  },
  {
    "text": "overall research i think the interest for topics like",
    "start": "2110560",
    "end": "2116400"
  },
  {
    "text": "this from from my site came actually from my phd supervisor who said uh well this is",
    "start": "2116400",
    "end": "2124240"
  },
  {
    "text": "an interesting area take a look at that um",
    "start": "2124240",
    "end": "2131838"
  },
  {
    "text": "okay thank you a lot of uh um do you plan to continue this",
    "start": "2132320",
    "end": "2137920"
  },
  {
    "text": "research yeah we have we at birmingham have been looking at amd um i don't think we've had much success",
    "start": "2137920",
    "end": "2145520"
  },
  {
    "text": "i actually i'm not working on that specifically um yes the code is available uh it's on uh",
    "start": "2145520",
    "end": "2152640"
  },
  {
    "text": "github uh it's forward slash kit murdock which is my name um or kit hyphen",
    "start": "2152640",
    "end": "2159520"
  },
  {
    "text": "murdock it's either kit mode or kit kit hyphen model try one of the two and that's where we've got the code to modify the msr and also to create a",
    "start": "2159520",
    "end": "2166320"
  },
  {
    "text": "fault um in one of the cryptos it might be both of them can't remember that's not",
    "start": "2166320",
    "end": "2172160"
  },
  {
    "text": "very helpful why do identical products produce different results a bit unclear there",
    "start": "2172160",
    "end": "2180240"
  },
  {
    "text": "we had in the team we had multiple small nucs with the same processor with",
    "start": "2180640",
    "end": "2187920"
  },
  {
    "text": "the same um yeah basically the same processor same micro architecture",
    "start": "2187920",
    "end": "2193359"
  },
  {
    "text": "same um specifier what the processor is but different",
    "start": "2193359",
    "end": "2199359"
  },
  {
    "text": "voltage baselines so apparently um even the same processor as you buy it",
    "start": "2199359",
    "end": "2205280"
  },
  {
    "text": "with exactly the same number uh can be different and that has a lot of",
    "start": "2205280",
    "end": "2212160"
  },
  {
    "text": "consequences for instance also and i personally i find that a bit",
    "start": "2212160",
    "end": "2217200"
  },
  {
    "text": "concerning that these might even lead to performance differences in benchmarks",
    "start": "2217200",
    "end": "2223200"
  },
  {
    "text": "if one has a higher performance level than the other a higher voltage level than the other",
    "start": "2223200",
    "end": "2229838"
  },
  {
    "text": "um someone's asked how much time roughly does the attack take to carry out well it can be seconds um the hardest",
    "start": "2229920",
    "end": "2235920"
  },
  {
    "text": "bit is the benchmarking which takes hours because you're crashing your computer just constantly crashing it",
    "start": "2235920",
    "end": "2242240"
  },
  {
    "text": "but once you know where the crash point is you just stay a little bit above that and at that point you can um",
    "start": "2242240",
    "end": "2251040"
  },
  {
    "text": "seconds i mean yeah seconds",
    "start": "2251040",
    "end": "2256400"
  },
  {
    "text": "what vintage is that um on my side some austrian local wine um yeah this is awful because",
    "start": "2256400",
    "end": "2262720"
  },
  {
    "text": "it's it's written in english and we don't produce red wine in england so you know that it is not a good bottle of red",
    "start": "2262720",
    "end": "2268839"
  },
  {
    "text": "wine uh bear in mind that we're in europe so we're allowed to drink yeah because it's evening",
    "start": "2268839",
    "end": "2277119"
  },
  {
    "text": "i think that's all the questions oh there's a question could the msrp protected admin access required for",
    "start": "2277520",
    "end": "2283040"
  },
  {
    "text": "example so the msr does require admin access which is root you have to be rude which is why the um application of sgx",
    "start": "2283040",
    "end": "2291040"
  },
  {
    "text": "is is where we focused all our attacks because sgx says you should be protected even against an attacker who has root",
    "start": "2291040",
    "end": "2299200"
  },
  {
    "text": "and you're not because of plundervolt in general you can fault any application",
    "start": "2299200",
    "end": "2308160"
  },
  {
    "text": "but as kid just said you need root privileges to modify the msr um if there are other ways to induce",
    "start": "2308160",
    "end": "2316240"
  },
  {
    "text": "faults without that that or if if someone would introduce an interface where you don't",
    "start": "2316240",
    "end": "2322480"
  },
  {
    "text": "need root privileges to induce faults well then you could also very realistically attack other applications",
    "start": "2322480",
    "end": "2331599"
  },
  {
    "text": "someone is schooling me on red wine production in the uk we do produce red wine i apologize",
    "start": "2339040",
    "end": "2347920"
  },
  {
    "text": "[Music] um another question are there similar",
    "start": "2349520",
    "end": "2356480"
  },
  {
    "text": "capabilities to msr and other architectures yes",
    "start": "2356480",
    "end": "2360720"
  },
  {
    "text": "clock scroll on that scoop is on arm yeah and amd",
    "start": "2363760",
    "end": "2369119"
  },
  {
    "text": "very nice there's an area of research we",
    "start": "2369119",
    "end": "2372799"
  },
  {
    "text": "how reliably can you get the fault into the aids operation of aes",
    "start": "2374320",
    "end": "2379760"
  },
  {
    "text": "it yeah so it was pretty evenly spread yeah um",
    "start": "2379760",
    "end": "2384799"
  },
  {
    "text": "so one in as many rounds as there are one in 11. i am not a cryptographer",
    "start": "2385280",
    "end": "2391680"
  },
  {
    "text": "yeah at this point let's uh thank the audience thanks for being here thanks for all the",
    "start": "2391680",
    "end": "2396880"
  },
  {
    "text": "very positive feedback and if you have any further questions just send us a mail or",
    "start": "2396880",
    "end": "2401920"
  },
  {
    "text": "ask them through some other means we are always happy to answer questions",
    "start": "2401920",
    "end": "2410319"
  }
]