[
  {
    "text": "good afternoon everybody Welcome to the art of reverse engineering flash",
    "start": "199",
    "end": "7000"
  },
  {
    "text": "exploits you are in the Jasmine ballroom and your speaker today is Matt o before",
    "start": "7000",
    "end": "13440"
  },
  {
    "text": "we begin a few brief notes stop by the business Hall located in Bayside AB if",
    "start": "13440",
    "end": "19160"
  },
  {
    "text": "you haven't done that already the blackhead Arsenal is on the palm Foy",
    "start": "19160",
    "end": "24320"
  },
  {
    "text": "foyer on level three and of course the Arsenal reception at 1700 if you haven't picked up your",
    "start": "24320",
    "end": "30759"
  },
  {
    "text": "merchandise today to today is your last chance to visit the black hat swagen bookstore and I believe it closes at",
    "start": "30759",
    "end": "39039"
  },
  {
    "text": "6 and also please visit the C Linux lab in the manderlay bay a and please put",
    "start": "39039",
    "end": "45280"
  },
  {
    "text": "your phone on vibrate so that it does not interrupt the presentation and if",
    "start": "45280",
    "end": "50480"
  },
  {
    "text": "you look around you there are three microphones available at the end there'll be a Q&A so if you could please",
    "start": "50480",
    "end": "57199"
  },
  {
    "text": "find the microphone nearest to you and step up so that we can all hear your question we really appreciate it and now",
    "start": "57199",
    "end": "63320"
  },
  {
    "text": "here's Matt mat thank",
    "start": "63320",
    "end": "69280"
  },
  {
    "text": "you so agenda so we are going to talk about the reverse engineering method for",
    "start": "69280",
    "end": "74840"
  },
  {
    "text": "the flash exploit today actually so first we look into the method that we",
    "start": "74840",
    "end": "80880"
  },
  {
    "text": "used and we found some effective and next we are going to the real examples",
    "start": "80880",
    "end": "86520"
  },
  {
    "text": "from last few months or maybe few years and some we will look into some RW",
    "start": "86520",
    "end": "92520"
  },
  {
    "text": "Primitives that are popular for uh Adobe Flash exploit and we will talk about",
    "start": "92520",
    "end": "98600"
  },
  {
    "text": "some CFG uh technique actually to um like a break these exploits it's a",
    "start": "98600",
    "end": "107320"
  },
  {
    "text": "kind of attempt from us or from the industry and we will talk about other te",
    "start": "107320",
    "end": "114159"
  },
  {
    "text": "Technologies from the attacker side how they are trying to like uh work around this new Med",
    "start": "114159",
    "end": "120399"
  },
  {
    "text": "ations and that will be it and the first so the thing is that the Flash Player",
    "start": "120399",
    "end": "127880"
  },
  {
    "text": "exploit or vulnerabilties kind of it was not so popular like before 2013 right",
    "start": "127880",
    "end": "133879"
  },
  {
    "text": "one or two years actually it was the year of actually Java exploit because",
    "start": "133879",
    "end": "139160"
  },
  {
    "text": "Java exploit are kind of usually they work like 100% because they are usually",
    "start": "139160",
    "end": "145120"
  },
  {
    "text": "logic bugs or vulnerabilities so it was infection but somehow Oracle fixed it by just",
    "start": "145120",
    "end": "152720"
  },
  {
    "text": "introducing click to play so it just killed like all those like exploit scene",
    "start": "152720",
    "end": "158120"
  },
  {
    "text": "actually and browser got more uh secure because of all those C CFG and uh",
    "start": "158120",
    "end": "166200"
  },
  {
    "text": "isolate isolated H and all those mitigations so those targets became like",
    "start": "166200",
    "end": "172159"
  },
  {
    "text": "a more nonattractive to the attackers that's when this uh new auto flash",
    "start": "172159",
    "end": "178440"
  },
  {
    "text": "player exploit came again and especially after 2013 there",
    "start": "178440",
    "end": "184000"
  },
  {
    "text": "was a lady boil exploit which uh introduced the vector corruption method",
    "start": "184000",
    "end": "190239"
  },
  {
    "text": "and this one kind of used for two years so every exploit since then until like a",
    "start": "190239",
    "end": "196720"
  },
  {
    "text": "mid 2015 or something then they were using this method kind of very very",
    "start": "196720",
    "end": "202400"
  },
  {
    "text": "effective way to exploit uh flash vulnerabilities but in 2015 Adobe did",
    "start": "202400",
    "end": "210400"
  },
  {
    "text": "and adob did a lot of like effort to introduce like new mitigations and back",
    "start": "210400",
    "end": "215720"
  },
  {
    "text": "to corruption mitigation is one of them and after that they introduced CFG and it broke a lot of exploits exploit",
    "start": "215720",
    "end": "221840"
  },
  {
    "text": "method after that and first let's talk about how we can reverse uh flash",
    "start": "221840",
    "end": "227680"
  },
  {
    "text": "exploit so first uh the obvious choice is actually the compilers right so there",
    "start": "227680",
    "end": "232799"
  },
  {
    "text": "are a lot of the compilers out there but um I just used a lot of them but I just",
    "start": "232799",
    "end": "239000"
  },
  {
    "text": "found that these two are just good and the first one is jpex free flash the",
    "start": "239000",
    "end": "244079"
  },
  {
    "text": "compiler this one is open source and free the only it works very well the only problem is that uh it renders The",
    "start": "244079",
    "end": "251319"
  },
  {
    "text": "Flash every time it loads it so you should not open the malicious uh flash",
    "start": "251319",
    "end": "257359"
  },
  {
    "text": "file from your host machine you should run it from your virtual machine or something because actually the explo can",
    "start": "257359",
    "end": "263479"
  },
  {
    "text": "run if you just open it from this tool the second one is action script viewer which is commercial",
    "start": "263479",
    "end": "270720"
  },
  {
    "text": "so uh this one is really works well so but the thing that I will talk about",
    "start": "270720",
    "end": "276120"
  },
  {
    "text": "some limitation with the compiling because if if the compiler works 100%",
    "start": "276120",
    "end": "281600"
  },
  {
    "text": "there is nothing to worry right so if you just DEC compile the exploit and maybe you can put what whatever code you",
    "start": "281600",
    "end": "287199"
  },
  {
    "text": "want there and recompile it and just run it again then in that way you can debug the explosion very well very easily but",
    "start": "287199",
    "end": "295039"
  },
  {
    "text": "in reality it doesn't work like that uh one of the reason is that they are doing AOS cations and out of all those AOS",
    "start": "295039",
    "end": "303280"
  },
  {
    "text": "cations the most advanced one I found one is actually the broken code shown here so if you open some like a recent",
    "start": "303280",
    "end": "312160"
  },
  {
    "text": "recent uh angular exploit one of those then you will you probably will see",
    "start": "312160",
    "end": "317560"
  },
  {
    "text": "these lines like the uh red red red lines there like a go to statement or",
    "start": "317560",
    "end": "324319"
  },
  {
    "text": "unresolved jump statement actually they are broken uh decomil code so you can't",
    "start": "324319",
    "end": "330800"
  },
  {
    "text": "recompile it right and if you actually open the file from this ass dis",
    "start": "330800",
    "end": "337199"
  },
  {
    "text": "assembler not the compiler then actually you can see that there are some garbage code and actually there is a one garbage",
    "start": "337199",
    "end": "344479"
  },
  {
    "text": "uh basic block itself but the the code on the bottom the label 503 will never",
    "start": "344479",
    "end": "351680"
  },
  {
    "text": "be called so in that way just they just put a lot of bunch of garbage code there and they will confuse the",
    "start": "351680",
    "end": "358639"
  },
  {
    "text": "compilers so decompiler is not perfect and the problem is that uh uh the",
    "start": "358639",
    "end": "366000"
  },
  {
    "text": "fundamental problem in the decompiler is that when you decompile something you will never be 100% sure that that is the",
    "start": "366000",
    "end": "373520"
  },
  {
    "text": "original code that generated the uh what is that the sweep file or the ABC recorde so that's why you should run you",
    "start": "373520",
    "end": "381199"
  },
  {
    "text": "should use these assemblers and one of those disassemblers rapidas is open source and it's very powerful and I",
    "start": "381199",
    "end": "389080"
  },
  {
    "text": "found it really useful but the only problem is that you need to understand the AVM instructions and there is a good",
    "start": "389080",
    "end": "396360"
  },
  {
    "text": "uh reference from Adobe here I put the link there and maybe you can find it",
    "start": "396360",
    "end": "401759"
  },
  {
    "text": "later and still thiss can be broken so something like lookup switch this one is",
    "start": "401759",
    "end": "408840"
  },
  {
    "text": "found uh also found from angular actually so it has a look up switch",
    "start": "408840",
    "end": "414520"
  },
  {
    "text": "instruction there and it has label 6 to some Bing number 42",
    "start": "414520",
    "end": "420199"
  },
  {
    "text": "976 so actually it will go out of bound of the file itself the ABC record itself",
    "start": "420199",
    "end": "427199"
  },
  {
    "text": "so the r c do will fail and you will just uh sped out some exceptions but you",
    "start": "427199",
    "end": "433840"
  },
  {
    "text": "can just actually uh just patch the rap C do because it's open source and you",
    "start": "433840",
    "end": "439039"
  },
  {
    "text": "can just limit the length of the lookup switch and to small numbers and you can just skipe those like invalid look of",
    "start": "439039",
    "end": "446160"
  },
  {
    "text": "switch statement so that is is one one way you can actually uh reverse engineer flash",
    "start": "446160",
    "end": "453879"
  },
  {
    "text": "uh exploits and the other approach we did is actually it uh originate back",
    "start": "453879",
    "end": "459639"
  },
  {
    "text": "from 2012 I presented a Shimon about some bite code level instrumentation and",
    "start": "459639",
    "end": "466240"
  },
  {
    "text": "I did some open source project uh as a Flash haacker and we internalized the",
    "start": "466240",
    "end": "472479"
  },
  {
    "text": "tool at Microsoft and we made more advanced uh filtering options more",
    "start": "472479",
    "end": "478199"
  },
  {
    "text": "advanced um uh instrumentation options but basically the flash open source project",
    "start": "478199",
    "end": "485199"
  },
  {
    "text": "has the basic like a framework of uh one you can do with uh bite bite uh code",
    "start": "485199",
    "end": "493479"
  },
  {
    "text": "instrumentation uh the only problem with bite code level instrumentation is that uh when the exploit uses some hip spr",
    "start": "493479",
    "end": "501159"
  },
  {
    "text": "spraying or some CPU intensive or memory intensive code run then it will actually",
    "start": "501159",
    "end": "507800"
  },
  {
    "text": "our Like Instrumental code will intervene with all those like U uh",
    "start": "507800",
    "end": "513240"
  },
  {
    "text": "exploit itself and will make the exploit fail but the thing is that if you use it",
    "start": "513240",
    "end": "519640"
  },
  {
    "text": "carefully not like instrumenting those like CPU intensive or memory intensive code you just filter them out and in",
    "start": "519640",
    "end": "527920"
  },
  {
    "text": "that case you it's kind of very useful tool for RCA root cause analysis or",
    "start": "527920",
    "end": "533920"
  },
  {
    "text": "mitigation bypass research so I will show you the real world example that we",
    "start": "533920",
    "end": "539160"
  },
  {
    "text": "use use this tool from the slide after and the other very um helpful tool",
    "start": "539160",
    "end": "547440"
  },
  {
    "text": "to it's not to it's resource is actually AVM plus source code so if you go it's on GitHub and if you go there so Adobe",
    "start": "547440",
    "end": "555160"
  },
  {
    "text": "kindly actually Shar their AVM plus AVM machine virtual machine source code on",
    "start": "555160",
    "end": "561480"
  },
  {
    "text": "GitHub and actually it's kind of two or 3 years old but a lot of like internal",
    "start": "561480",
    "end": "566560"
  },
  {
    "text": "structures are there and it it can be really good reference for for you when you are actually reverse engineering",
    "start": "566560",
    "end": "573560"
  },
  {
    "text": "exploits and you can also do some native Native level debugging of The Flash but",
    "start": "573560",
    "end": "580160"
  },
  {
    "text": "it's really challenging because the flash file itself is like more than 10 megabytes and when it's in the um",
    "start": "580160",
    "end": "587160"
  },
  {
    "text": "debugging like in the process memory uh if you don't have any symbols it's not easy to figure out what function is what",
    "start": "587160",
    "end": "594519"
  },
  {
    "text": "what what what function is doing what",
    "start": "594519",
    "end": "599320"
  },
  {
    "text": "so let's talk about RW Primitives first so from the agenda this is second part",
    "start": "600040",
    "end": "607200"
  },
  {
    "text": "and we will talk about three different RW Primitives and first one is a vector",
    "start": "607200",
    "end": "612279"
  },
  {
    "text": "length corruption this one I mentioned already uh but oh let's talk about RW",
    "start": "612279",
    "end": "618320"
  },
  {
    "text": "Primitives uh first right so RW Primitives are the object or functions",
    "start": "618320",
    "end": "624760"
  },
  {
    "text": "uh the exploit are using to achieve memory uh read and write so the thing is",
    "start": "624760",
    "end": "630480"
  },
  {
    "text": "that before asrr and D actually the a lot of like exploit didn't need this RW",
    "start": "630480",
    "end": "635959"
  },
  {
    "text": "Primitives or something they are just corrupting something some adjacent object or they already know some address",
    "start": "635959",
    "end": "642200"
  },
  {
    "text": "some fixed address and they just jump there that kind of Techni worked but after ASR DP ACR and DP was were",
    "start": "642200",
    "end": "651320"
  },
  {
    "text": "introduced uh you need full RW primitiv is to achieve rce so RW primitive",
    "start": "651320",
    "end": "658680"
  },
  {
    "text": "doesn't mean you get the RC so even though you have full read and write uh",
    "start": "658680",
    "end": "665040"
  },
  {
    "text": "privilege on your target process you still can fail to achieve rce so that's",
    "start": "665040",
    "end": "671320"
  },
  {
    "text": "the old theme here actually how the we are blocking the execution of code even",
    "start": "671320",
    "end": "677200"
  },
  {
    "text": "though they have RW Primitives and how the attackers are actually work around",
    "start": "677200",
    "end": "682800"
  },
  {
    "text": "in those and from defender's point of view actually knowing the AL of",
    "start": "682800",
    "end": "688040"
  },
  {
    "text": "Primitives for FL exploit are uh flesh exploits is very important because if",
    "start": "688040",
    "end": "694680"
  },
  {
    "text": "you know that and if you track those operations actually then you can figure out what technique they are using to",
    "start": "694680",
    "end": "701240"
  },
  {
    "text": "succumbent uh CFG or other mitigations so for Vector length",
    "start": "701240",
    "end": "707040"
  },
  {
    "text": "corruption this one came from like 2013 and it was used like kind of two",
    "start": "707040",
    "end": "714600"
  },
  {
    "text": "years it's long time and uh although we finally fixed the last year and uh Adobe",
    "start": "714600",
    "end": "722360"
  },
  {
    "text": "blogged about and gpg actually blogged about it too and you can find a very detailed explanation from those",
    "start": "722360",
    "end": "729000"
  },
  {
    "text": "resources and we are going to just uh go into just one example from the most",
    "start": "729000",
    "end": "734639"
  },
  {
    "text": "recent one 2015 5122 this one is used after free",
    "start": "734639",
    "end": "740360"
  },
  {
    "text": "vulnerability actually but first it's just doing some Vector spray but the",
    "start": "740360",
    "end": "745519"
  },
  {
    "text": "vector spray is not really huge in like one g or 2 GB Vector it's not that kind of big uh Vector spray it's just how",
    "start": "745519",
    "end": "753440"
  },
  {
    "text": "many just like a few megabytes and most a few megabytes and they are doing another",
    "start": "753440",
    "end": "758600"
  },
  {
    "text": "Vector spray and they make some holes in between and they are just spraying some",
    "start": "758600",
    "end": "764360"
  },
  {
    "text": "vulnerable object in between and Trigger the use after free so for the detailed",
    "start": "764360",
    "end": "770120"
  },
  {
    "text": "explanation about this Vol you can find a lot of resources just search for the CB number you can find a lot of helpful",
    "start": "770120",
    "end": "776120"
  },
  {
    "text": "resources from the internet actually and just trigger the uh use after free buug and actually",
    "start": "776120",
    "end": "782360"
  },
  {
    "text": "it will uh the adjacent uh Vector uh",
    "start": "782360",
    "end": "788279"
  },
  {
    "text": "element is corrupted and you it will be using that to corrupt other Vector",
    "start": "788279",
    "end": "793480"
  },
  {
    "text": "element to a big uh big length here so the yellow line yellow background lines",
    "start": "793480",
    "end": "799600"
  },
  {
    "text": "are actually showing those code and these uh this exploit are the exploit is",
    "start": "799600",
    "end": "805360"
  },
  {
    "text": "kind of really typical like a vector corruption",
    "start": "805360",
    "end": "810800"
  },
  {
    "text": "and if you use instrumentation technique then actually you can see how this Vector",
    "start": "811160",
    "end": "818399"
  },
  {
    "text": "length corruption is happening and because you can just instrument a vector object right so if you just uh",
    "start": "818399",
    "end": "824079"
  },
  {
    "text": "instrument those and you can check the length whenever the object is accessed then if the the length becomes more than",
    "start": "824079",
    "end": "830399"
  },
  {
    "text": "what was designated in the first initialized in the first place then you you know that the vector is corrupted in",
    "start": "830399",
    "end": "836759"
  },
  {
    "text": "this case it's corrupted to uh 4 uh 40 uh",
    "start": "836759",
    "end": "841880"
  },
  {
    "text": "4,000,000 it's p number and the exploit will use this RW primitive to access the",
    "start": "841880",
    "end": "849079"
  },
  {
    "text": "other uh internal object inside the process so next uh R primitive that we",
    "start": "849079",
    "end": "857720"
  },
  {
    "text": "are talking is actually bite length corruption so after adob fixed uh Factor",
    "start": "857720",
    "end": "863199"
  },
  {
    "text": "length corruption uh the bad guys actually move to bite length corruption",
    "start": "863199",
    "end": "868360"
  },
  {
    "text": "as expected did actually so this one is CV 2015 A6 51 example which was used for",
    "start": "868360",
    "end": "875839"
  },
  {
    "text": "domum Campaign which is which shares the same ioc as what is it the dark hotel as",
    "start": "875839",
    "end": "882600"
  },
  {
    "text": "known from uh kaspi so from this exploit actually they are using the the vity is",
    "start": "882600",
    "end": "889040"
  },
  {
    "text": "kind of uh uh very uh impactful actually in this case because the SI 32 is the is",
    "start": "889040",
    "end": "897440"
  },
  {
    "text": "the instruction actually that can uh directly access native memory but in",
    "start": "897440",
    "end": "903120"
  },
  {
    "text": "this case there was some uh bound boundary check error and it could access",
    "start": "903120",
    "end": "908240"
  },
  {
    "text": "whatever memory it wanted right so in this case uh it will just directly modify adjacent by length uh uh field",
    "start": "908240",
    "end": "917160"
  },
  {
    "text": "memory location to some big number here and after that uh you you just search for some corrupted uh bory element and",
    "start": "917160",
    "end": "925519"
  },
  {
    "text": "it will just use it as a um RW primitive so in this case the exploit is very well",
    "start": "925519",
    "end": "933120"
  },
  {
    "text": "written and it's kind of modularized very well so read uh 32 x86 it will be",
    "start": "933120",
    "end": "940319"
  },
  {
    "text": "reading whatever memory you just pass the address it will just read whatever memory from the process the second one",
    "start": "940319",
    "end": "946720"
  },
  {
    "text": "is y32 x 86 uh this method will you just put whatever address and value it will",
    "start": "946720",
    "end": "953319"
  },
  {
    "text": "override water value from the process so the next one is actually kind of Pi",
    "start": "953319",
    "end": "959319"
  },
  {
    "text": "one the convolution filter Matrix to tap stops type confusion we just saw this",
    "start": "959319",
    "end": "965720"
  },
  {
    "text": "once and it is using this specific metrix array and it will induce um the",
    "start": "965720",
    "end": "976720"
  },
  {
    "text": "confusion the confusion process is kind of very very uh complicated actually",
    "start": "976720",
    "end": "982240"
  },
  {
    "text": "it's not easy to understand here but when it read it actually you just pass",
    "start": "982240",
    "end": "987519"
  },
  {
    "text": "some address to convolution filter object and you can read out the actual",
    "start": "987519",
    "end": "993000"
  },
  {
    "text": "memory from text format TTS uh element zero uh from the yellow background line",
    "start": "993000",
    "end": "1000959"
  },
  {
    "text": "actually there so looks like the convolution filter Matrix will like um override some address field from the",
    "start": "1000959",
    "end": "1007600"
  },
  {
    "text": "internal structure and it will make the uh reading of the any uh process memory",
    "start": "1007600",
    "end": "1014120"
  },
  {
    "text": "possible the point is that uh even though they have have these other kind",
    "start": "1014120",
    "end": "1020519"
  },
  {
    "text": "of uh com what is that the RW Primitives available eventually they use this uh RW",
    "start": "1020519",
    "end": "1028720"
  },
  {
    "text": "primitive to achieve uh what is that uh bory uh RW primitive they the attackers",
    "start": "1028720",
    "end": "1036038"
  },
  {
    "text": "prefer using uh uh B RW Primitives so",
    "start": "1036039",
    "end": "1041199"
  },
  {
    "text": "they are actually uh change uh this uh R primitive to convert this to uh B Al",
    "start": "1041199",
    "end": "1049919"
  },
  {
    "text": "Primitives later so that they can work more conveniently and more stable in",
    "start": "1049919",
    "end": "1055160"
  },
  {
    "text": "more stable way so we talked about the AL Primitives so getting Al Primitives",
    "start": "1055160",
    "end": "1062400"
  },
  {
    "text": "are kind of easier than actually executing something because even though you have access to the process memory",
    "start": "1062400",
    "end": "1069080"
  },
  {
    "text": "there are a lot of like uh huddles uh until you get actually called",
    "start": "1069080",
    "end": "1075120"
  },
  {
    "text": "execution because uh one of those mitigation is the the most recent one is",
    "start": "1075120",
    "end": "1080159"
  },
  {
    "text": "actually CFG so what is CFG so you can Define it",
    "start": "1080159",
    "end": "1086799"
  },
  {
    "text": "in very different way but you can just open up some uh recent windows binaries",
    "start": "1086799",
    "end": "1092200"
  },
  {
    "text": "and you will see the probably see these lines like it God check I call far pointer here so it will actually do some",
    "start": "1092200",
    "end": "1099400"
  },
  {
    "text": "white listing upon what uh Target uh process memory it can jump or call then",
    "start": "1099400",
    "end": "1105320"
  },
  {
    "text": "it has some beam maskus uh set up somewhere and it will just filtered out whenever some wrong jump is happening",
    "start": "1105320",
    "end": "1112880"
  },
  {
    "text": "here right so if you define it in more formal way",
    "start": "1112880",
    "end": "1118799"
  },
  {
    "text": "actually uh like uh uh actually I didn't Define it here",
    "start": "1118799",
    "end": "1124559"
  },
  {
    "text": "but CFG can be very powerful in actually making the cost of the exploit develop",
    "start": "1124559",
    "end": "1131679"
  },
  {
    "text": "development very higher actually the thing is that the uh technique here is",
    "start": "1131679",
    "end": "1137039"
  },
  {
    "text": "looks very s actually it's just white listing but actually for last two years",
    "start": "1137039",
    "end": "1144600"
  },
  {
    "text": "uh no zero day exploit for Microsoft ALC vulnerabilities have been found in the",
    "start": "1144600",
    "end": "1150799"
  },
  {
    "text": "wild uh haven't worked against I 11 on Windows 8.1 where CFG was present so",
    "start": "1150799",
    "end": "1159679"
  },
  {
    "text": "when you enable CFG even though they found some vulnerabilities they couldn't make the working exploits from in from",
    "start": "1159679",
    "end": "1166559"
  },
  {
    "text": "the bad bad guys side actually so you might wonder why CFG is so",
    "start": "1166559",
    "end": "1174360"
  },
  {
    "text": "powerful right so CFG is really powerful because for a long time actually the bad",
    "start": "1174360",
    "end": "1180080"
  },
  {
    "text": "guys abused this VF table corruption for very very long time but CFG is just like",
    "start": "1180080",
    "end": "1186000"
  },
  {
    "text": "a cutting uh uh that very like a well-known path",
    "start": "1186000",
    "end": "1192120"
  },
  {
    "text": "actually so for example the when CFG was not present actually so V table",
    "start": "1192120",
    "end": "1198200"
  },
  {
    "text": "corruption was like from the actual flash exploit code it is just four lines of code and it is just reading from the",
    "start": "1198200",
    "end": "1205159"
  },
  {
    "text": "first line it's just reading some object address and it is just overwriting some",
    "start": "1205159",
    "end": "1212559"
  },
  {
    "text": "one function pointer inside the VF table and it will call one method from that",
    "start": "1212559",
    "end": "1218280"
  },
  {
    "text": "object corrupted object and from the yellow background line actually it's just calling file reference cancel and",
    "start": "1218280",
    "end": "1225159"
  },
  {
    "text": "this one is very well known uh like a exploitation Target Target object",
    "start": "1225159",
    "end": "1232280"
  },
  {
    "text": "and after this actually when the cancel method is called actually the um control",
    "start": "1232280",
    "end": "1238960"
  },
  {
    "text": "flow will jump to sh code so the exploit is very very concise and very very",
    "start": "1238960",
    "end": "1245000"
  },
  {
    "text": "effective it works very well but after CFG uh all this like a small like a very",
    "start": "1245000",
    "end": "1252080"
  },
  {
    "text": "simple trick doesn't work anymore so the thing is that after ad",
    "start": "1252080",
    "end": "1258880"
  },
  {
    "text": "introduced CFG in 2015 so we observed very interesting techniques coming",
    "start": "1258880",
    "end": "1266720"
  },
  {
    "text": "back like something like mmgc so abusing so mmgc you might uh",
    "start": "1266720",
    "end": "1274120"
  },
  {
    "text": "heard about I have heard about this before but from the um actual document",
    "start": "1274120",
    "end": "1281080"
  },
  {
    "text": "actually this is mmgc is the kind of long description but mgc is basically",
    "start": "1281080",
    "end": "1286440"
  },
  {
    "text": "the memory manager for abm2 which is used for adob Flash Player",
    "start": "1286440",
    "end": "1293559"
  },
  {
    "text": "and the attackers actually try to par mmgc internal structures uh to",
    "start": "1293559",
    "end": "1301720"
  },
  {
    "text": "find um any interesting structures object they want want",
    "start": "1301720",
    "end": "1308279"
  },
  {
    "text": "corrupt so the thing is that we observed fullblown object finder uh inside for m",
    "start": "1309240",
    "end": "1315480"
  },
  {
    "text": "andc so the for in the wild uh CV uh 2016 1010 exploit actually showed very",
    "start": "1315480",
    "end": "1323159"
  },
  {
    "text": "interesting technique and it is actually paring whole mmgc internal structures so",
    "start": "1323159",
    "end": "1329440"
  },
  {
    "text": "we are going to talk about here how they they rotate on and how it works so first",
    "start": "1329440",
    "end": "1336840"
  },
  {
    "text": "stage is actually leaking some uh like a native memory out of some uh internal",
    "start": "1336840",
    "end": "1343799"
  },
  {
    "text": "object starting from there actually some I just summarized the whole process here",
    "start": "1343799",
    "end": "1349880"
  },
  {
    "text": "enumerate fixed blocks that is the function that actually can enumerate any",
    "start": "1349880",
    "end": "1356000"
  },
  {
    "text": "uh memory blocks that has uh specific",
    "start": "1356000",
    "end": "1360720"
  },
  {
    "text": "size and if you look into the code it is just call calling Parts fixed",
    "start": "1361880",
    "end": "1369000"
  },
  {
    "text": "or Lo Header by size so everything the thing is that the from the mmgc the memories are aligned linked",
    "start": "1369000",
    "end": "1377679"
  },
  {
    "text": "through the linked by the sides so from this exploit actually uh",
    "start": "1377679",
    "end": "1385960"
  },
  {
    "text": "Parts fixed all Header by size so if you know the size of the your target object",
    "start": "1385960",
    "end": "1391640"
  },
  {
    "text": "actually you can find it but there can be multiple different object with the same size in that case you can use some",
    "start": "1391640",
    "end": "1397279"
  },
  {
    "text": "heris stics that are specific to the Target object that you are looking",
    "start": "1397279",
    "end": "1403600"
  },
  {
    "text": "for so Parts fixed all loog Header by side will call locate fixed all loog editor by size the code looks like this",
    "start": "1403720",
    "end": "1412440"
  },
  {
    "text": "but you don't need to try to understand it here but the some pre uh defined um",
    "start": "1412440",
    "end": "1419000"
  },
  {
    "text": "some constant values are determined here and here here is very interesting",
    "start": "1419000",
    "end": "1424720"
  },
  {
    "text": "part here right so get size class index it's a kind of the offset table that is",
    "start": "1424720",
    "end": "1430320"
  },
  {
    "text": "used inside the exploit and this same thing is actually",
    "start": "1430320",
    "end": "1437360"
  },
  {
    "text": "almost same uh table this table and this table they are actually same and those",
    "start": "1437360",
    "end": "1443360"
  },
  {
    "text": "this table is happening uh inside a plus source code so our ass is that they just",
    "start": "1443360",
    "end": "1449960"
  },
  {
    "text": "studied um ABM plus source code and they just uh figured out how they can",
    "start": "1449960",
    "end": "1456200"
  },
  {
    "text": "Traverse uh mmgc uh memory",
    "start": "1456200",
    "end": "1461279"
  },
  {
    "text": "space uh from the exploit code itself right so G Class from the on the left side it is it is a gas side class index",
    "start": "1461279",
    "end": "1469960"
  },
  {
    "text": "uh function from the exploit code on the right side it is the actual source code",
    "start": "1469960",
    "end": "1475159"
  },
  {
    "text": "from MBC the ABN plus source code and actually they are",
    "start": "1475159",
    "end": "1480360"
  },
  {
    "text": "same and about the structures actually the fixed Al structure is defined from",
    "start": "1481399",
    "end": "1488240"
  },
  {
    "text": "the AVM plus source code like this it has some linked list of fixed",
    "start": "1488240",
    "end": "1494039"
  },
  {
    "text": "block and it is from from the exploit actually is actually doing same thing so",
    "start": "1494559",
    "end": "1501159"
  },
  {
    "text": "the exploit code has every even the symbols are same M Force block and those",
    "start": "1501159",
    "end": "1507120"
  },
  {
    "text": "symbols are actually appears in the source code and they are just using same symbols symbol names",
    "start": "1507120",
    "end": "1515480"
  },
  {
    "text": "here and whole thing so every when everything is wrong actually when you call this par fix or Lo Header by size",
    "start": "1515480",
    "end": "1523679"
  },
  {
    "text": "then if you just pass some size of some specific uh object",
    "start": "1523679",
    "end": "1528840"
  },
  {
    "text": "then it will return the actual memory address of those uh fixed all loock",
    "start": "1528840",
    "end": "1535720"
  },
  {
    "text": "structure after that the fixed a loog structure has linked list of fixed blocks and it will go through uh those",
    "start": "1536039",
    "end": "1544279"
  },
  {
    "text": "list and you will look for uh whatever interesting object out of those so there",
    "start": "1544279",
    "end": "1549880"
  },
  {
    "text": "can be multiple object but they have they can use various tricks to find uh the accurate object they are looking",
    "start": "1549880",
    "end": "1557240"
  },
  {
    "text": "for so the parts fix block from on the left side it's the exploit and on the",
    "start": "1557240",
    "end": "1562880"
  },
  {
    "text": "right side it is the source code from AV plus and looks like they are just copy and pasted everything from",
    "start": "1562880",
    "end": "1569760"
  },
  {
    "text": "there so using this technique actually they can they can do a lot of various things they can actually locate B uh",
    "start": "1569760",
    "end": "1577240"
  },
  {
    "text": "like a various internal objects but they can also leak some object they created",
    "start": "1577240",
    "end": "1583080"
  },
  {
    "text": "and one of the technique they actually doing is that they if they have bite array object actually they can locate",
    "start": "1583080",
    "end": "1589320"
  },
  {
    "text": "the exact uh virtual address of those uh row data so from",
    "start": "1589320",
    "end": "1597240"
  },
  {
    "text": "here uh get bite AR address uh is",
    "start": "1597240",
    "end": "1603960"
  },
  {
    "text": "used and it it is calling enumerate uh fixed fixed blocks so this enumerate",
    "start": "1604080",
    "end": "1610679"
  },
  {
    "text": "fixed blocks that we just talked actually will return the link list the list array of these fixed blocks and one",
    "start": "1610679",
    "end": "1617919"
  },
  {
    "text": "of those should be the target object that it is looking for and from here actually get bite get",
    "start": "1617919",
    "end": "1627000"
  },
  {
    "text": "bite array address function is using some search marker uh to find the",
    "start": "1627000",
    "end": "1634840"
  },
  {
    "text": "accurate uh the exact um bite array object actually right so when you create",
    "start": "1634840",
    "end": "1640760"
  },
  {
    "text": "new bite array you just put some random bites there and you go through each bite array object and uh look for those",
    "start": "1640760",
    "end": "1647720"
  },
  {
    "text": "markers if those markers are present from the actual virtual address space",
    "start": "1647720",
    "end": "1653240"
  },
  {
    "text": "then you know that this V address by aray object is what you are looking",
    "start": "1653240",
    "end": "1660278"
  },
  {
    "text": "for so the next technique that we observed was actually uh acquiring GC",
    "start": "1660600",
    "end": "1667440"
  },
  {
    "text": "block structure from the CV 2015 a446 actually",
    "start": "1667440",
    "end": "1673039"
  },
  {
    "text": "exploited in the wild actually it used memory predictability to locate mgc",
    "start": "1673039",
    "end": "1678279"
  },
  {
    "text": "related data structures so this is one problem with the mgc because for this",
    "start": "1678279",
    "end": "1684360"
  },
  {
    "text": "technique to work actually it didn't spray that much of objects so just like",
    "start": "1684360",
    "end": "1690039"
  },
  {
    "text": "uh few megabytes of spraying actually made some objects some mgc related",
    "start": "1690039",
    "end": "1695679"
  },
  {
    "text": "internal object to be landed into some very specific memory address so if you look into GC block",
    "start": "1695679",
    "end": "1703039"
  },
  {
    "text": "head a structure actually uh if the exploit this some hip",
    "start": "1703039",
    "end": "1709399"
  },
  {
    "text": "spray actually the the specific address here 0x1a",
    "start": "1709399",
    "end": "1715080"
  },
  {
    "text": "0000000000 is predictably allocated by uh GC blog object so the explain knows",
    "start": "1715080",
    "end": "1722200"
  },
  {
    "text": "that after some sprang they know that oh if you read this address after you acquire RW primitive you can know that",
    "start": "1722200",
    "end": "1729559"
  },
  {
    "text": "if you read this memory then you can actually reading uh G blog header and",
    "start": "1729559",
    "end": "1736640"
  },
  {
    "text": "because from the AVM Plus source code you know that do uh it has some pointer to GC object which has a lot of like",
    "start": "1736640",
    "end": "1743799"
  },
  {
    "text": "valuable information inside it then it uses that address to go",
    "start": "1743799",
    "end": "1751039"
  },
  {
    "text": "further so that is the the other Technique we talked about and mmgc",
    "start": "1751279",
    "end": "1757480"
  },
  {
    "text": "itself is not exploited right so it's not actually doing any RC or",
    "start": "1757480",
    "end": "1762600"
  },
  {
    "text": "anything but uh to actually uh run some code you need more more more more things",
    "start": "1762600",
    "end": "1771399"
  },
  {
    "text": "to be done so this is very important slide actually so attack landscape changed to",
    "start": "1771399",
    "end": "1778679"
  },
  {
    "text": "actually did recently so everyone observed that right so the attackers are",
    "start": "1778679",
    "end": "1784320"
  },
  {
    "text": "moving into G space uh the conceptual attack actually was uh present last year",
    "start": "1784320",
    "end": "1790919"
  },
  {
    "text": "from Francisco Falcon uh and it was like a J uh code was not actually CFG so it",
    "start": "1790919",
    "end": "1799559"
  },
  {
    "text": "doesn't have any CFG so if you figure out some J Code address then you can just actually use J some object inside",
    "start": "1799559",
    "end": "1806320"
  },
  {
    "text": "the jit to actually uh execute some code but this uh technique was actually",
    "start": "1806320",
    "end": "1812360"
  },
  {
    "text": "mitigated by introducing the some onetime uh CFT code but in the real world actually we",
    "start": "1812360",
    "end": "1820519"
  },
  {
    "text": "saw that uh for example CV 2016 and one10 or CB 2015 a446 we oberved more",
    "start": "1820519",
    "end": "1828679"
  },
  {
    "text": "advanced attacks than the attack that presented from Francis Francisco",
    "start": "1828679",
    "end": "1836000"
  },
  {
    "text": "Pon and the the technique is actually corrupting the return address of the G",
    "start": "1836240",
    "end": "1841840"
  },
  {
    "text": "St but uh this one is actually a wellknown limitation with CFG because",
    "start": "1841840",
    "end": "1847960"
  },
  {
    "text": "CFG is guarding against object corruption but not just St uh corruption",
    "start": "1847960",
    "end": "1854320"
  },
  {
    "text": "and we are working on some solution upon this and we are going to release a detailed uh analysis upon this attack",
    "start": "1854320",
    "end": "1861480"
  },
  {
    "text": "later with a further research but today we are going to uh",
    "start": "1861480",
    "end": "1867240"
  },
  {
    "text": "share some details upon some other very interesting techniques we observed like a preist uh abuse method and the other one",
    "start": "1867240",
    "end": "1874840"
  },
  {
    "text": "is method in for inut GPR corruption",
    "start": "1874840",
    "end": "1879600"
  },
  {
    "text": "method like as we talked bite array can be abused to read or write uh to to some",
    "start": "1881960",
    "end": "1888919"
  },
  {
    "text": "specific location and you can acquire the actual address out of it for for example CB 2016",
    "start": "1888919",
    "end": "1896080"
  },
  {
    "text": "1010 it will be calling some allocate uh bite arrays uh function to allocate two",
    "start": "1896080",
    "end": "1904760"
  },
  {
    "text": "uh uh buffers and whenever you allocate some",
    "start": "1904760",
    "end": "1910159"
  },
  {
    "text": "buffers using bory uh object class from action script the per default permission",
    "start": "1910159",
    "end": "1916799"
  },
  {
    "text": "is actually r W so you even though you put some sh code there even though you",
    "start": "1916799",
    "end": "1921919"
  },
  {
    "text": "redirect some control flow there it will not execute anything because there is no",
    "start": "1921919",
    "end": "1927120"
  },
  {
    "text": "executable bit set but in this case it uses very",
    "start": "1927120",
    "end": "1933360"
  },
  {
    "text": "interesting teing and that is the free list uh override and if you look into",
    "start": "1933360",
    "end": "1939799"
  },
  {
    "text": "class GC hip it has Freel list uh",
    "start": "1939799",
    "end": "1944880"
  },
  {
    "text": "array and if if you overwrite um the pre and next the doubly",
    "start": "1946000",
    "end": "1953480"
  },
  {
    "text": "linked list uh pointer values here then actually you can assign your own memory",
    "start": "1953480",
    "end": "1958720"
  },
  {
    "text": "as one of the uh free List member right because it's a linked list you over a pre and next member here then you can",
    "start": "1958720",
    "end": "1965720"
  },
  {
    "text": "make it to point to your own memory which might be RW it doesn't matter because it's the data structure there",
    "start": "1965720",
    "end": "1972919"
  },
  {
    "text": "but the thing is that when you overload uh those um field and make it",
    "start": "1972919",
    "end": "1979120"
  },
  {
    "text": "to point to your own hip block structure the first member of the structure is Base address and if you override if you",
    "start": "1979120",
    "end": "1987240"
  },
  {
    "text": "assign your own share code address uh to uh this Base address",
    "start": "1987240",
    "end": "1995279"
  },
  {
    "text": "then then it will be pointing to your own RW uh permission address right",
    "start": "1995279",
    "end": "2003200"
  },
  {
    "text": "then when actually GC Hep Lo blog is C and it",
    "start": "2003200",
    "end": "2010120"
  },
  {
    "text": "will go through some free list and it will just uh find some free hip block",
    "start": "2010120",
    "end": "2015279"
  },
  {
    "text": "from your own fake Freel list and you will use it to actually allocate recycle",
    "start": "2015279",
    "end": "2022799"
  },
  {
    "text": "those memories and the problem is that from the mmgc originally when they recycle some pre-used memory they don't",
    "start": "2022799",
    "end": "2030639"
  },
  {
    "text": "clean up and they just uh use whatever portion they want to use but some",
    "start": "2030639",
    "end": "2036000"
  },
  {
    "text": "garbage memories are still there",
    "start": "2036000",
    "end": "2039720"
  },
  {
    "text": "and as I talked actually we allocated some bite array already which is pointed",
    "start": "2042440",
    "end": "2048358"
  },
  {
    "text": "to by this fake hip blog and this address contains share code this memory",
    "start": "2048359",
    "end": "2054960"
  },
  {
    "text": "space contain share code not in the beginning but in the",
    "start": "2054960",
    "end": "2060000"
  },
  {
    "text": "middle so the technique the the attackers are using is is uh they just",
    "start": "2063399",
    "end": "2069200"
  },
  {
    "text": "create some uh event handler just shown on the",
    "start": "2069200",
    "end": "2074679"
  },
  {
    "text": "left to any delay it's a event handler which is called like frequently it's a",
    "start": "2074679",
    "end": "2080000"
  },
  {
    "text": "timed uh event handler so it will be just called like every second or something and whenever this event",
    "start": "2080000",
    "end": "2087679"
  },
  {
    "text": "handler which is very short code when this uh event handler is called then the",
    "start": "2087679",
    "end": "2094960"
  },
  {
    "text": "GC block will actually try to allocate uh the jit memory from this free list",
    "start": "2094960",
    "end": "2103920"
  },
  {
    "text": "space and it will just reuse uh the bay we allocated before and it will just",
    "start": "2103920",
    "end": "2110320"
  },
  {
    "text": "change the uh permission bit to RX so this is the technique they actually",
    "start": "2110320",
    "end": "2116079"
  },
  {
    "text": "using uh they were using to actually achieve uh code execution but this one",
    "start": "2116079",
    "end": "2122680"
  },
  {
    "text": "is actually fixed the fix is very obvious right so whenever you allocate the new gym memory you just clean up whole memory to zero or something then",
    "start": "2122680",
    "end": "2130280"
  },
  {
    "text": "your share code will be gone so you don't have any access to the share code and nothing will be",
    "start": "2130280",
    "end": "2137200"
  },
  {
    "text": "executed so the other jit attack uh method we observed is actually uh using",
    "start": "2137200",
    "end": "2144520"
  },
  {
    "text": "imp GPR uh pointer corruption so this pointer uh this uh Handler actually coag",
    "start": "2144520",
    "end": "2151920"
  },
  {
    "text": "is called when jit uh method is returning so whenever the jit method",
    "start": "2151920",
    "end": "2157640"
  },
  {
    "text": "method returns it will call end course method and it will call the this um",
    "start": "2157640",
    "end": "2164400"
  },
  {
    "text": "poter value so if you overwrite this point of",
    "start": "2164400",
    "end": "2170640"
  },
  {
    "text": "value to whatever share code you have if you know the share code location then the code execution will",
    "start": "2170640",
    "end": "2178200"
  },
  {
    "text": "happen the technique here they used is actually they made their own custom bite",
    "start": "2178200",
    "end": "2183280"
  },
  {
    "text": "array and they just spray on the hip",
    "start": "2183280",
    "end": "2188480"
  },
  {
    "text": "and there are some assignment there to uh initialize some",
    "start": "2190760",
    "end": "2197079"
  },
  {
    "text": "variable yeah here here is the actual corruption Target method it doesn't have",
    "start": "2197079",
    "end": "2202400"
  },
  {
    "text": "anything inside it just returns zero it's just blank uh",
    "start": "2202400",
    "end": "2207800"
  },
  {
    "text": "method and this blank method is actually the corruption Target and these four lines of flash",
    "start": "2208079",
    "end": "2215400"
  },
  {
    "text": "hacker log actually shows uh uh how the exploit locates the actual",
    "start": "2215400",
    "end": "2222640"
  },
  {
    "text": "method in in GPR so I I put some detailed explanation",
    "start": "2222640",
    "end": "2229200"
  },
  {
    "text": "here so the custom B AR is located at some specific memory so this in this",
    "start": "2229200",
    "end": "2234319"
  },
  {
    "text": "case we also see the memory location address predictability so you can you",
    "start": "2234319",
    "end": "2240040"
  },
  {
    "text": "can like allocate some specific object as some specific location in predictable",
    "start": "2240040",
    "end": "2246200"
  },
  {
    "text": "way so there is one problem with mmgc and it will just go through some",
    "start": "2246200",
    "end": "2251640"
  },
  {
    "text": "multiple uh structures and hop through those structures and you will override",
    "start": "2251640",
    "end": "2257680"
  },
  {
    "text": "uh input GPR pointer here and the original input GPR pointer",
    "start": "2257680",
    "end": "2264599"
  },
  {
    "text": "is pointing to some flash code originally right just shown here but after corruption actually it will be",
    "start": "2264599",
    "end": "2270839"
  },
  {
    "text": "pointing to share code and whenever you just call this dmy method actually when",
    "start": "2270839",
    "end": "2276119"
  },
  {
    "text": "the dmy method returns instead of calling some flash utility routine it will just call share",
    "start": "2276119",
    "end": "2283200"
  },
  {
    "text": "code and the actual code that Trigg shode is actually calling the dummy",
    "start": "2283200",
    "end": "2289000"
  },
  {
    "text": "method so these are very interesting techniques these two are just G attack",
    "start": "2289000",
    "end": "2294359"
  },
  {
    "text": "techniques that we presented here and the next one is function object corruption technique this one is also",
    "start": "2294359",
    "end": "2300599"
  },
  {
    "text": "very interesting because uh we observed this from hacking",
    "start": "2300599",
    "end": "2305640"
  },
  {
    "text": "team in incident actually and and this method was reused again",
    "start": "2305640",
    "end": "2313119"
  },
  {
    "text": "later by uh Dum actor which uh was targeting Southeast uh",
    "start": "2313119",
    "end": "2322599"
  },
  {
    "text": "Asia and the te technique is kind of very straightforward here um there is",
    "start": "2323880",
    "end": "2329319"
  },
  {
    "text": "some function function object and it has some uh",
    "start": "2329319",
    "end": "2335119"
  },
  {
    "text": "internal uh call table for apply and call",
    "start": "2335119",
    "end": "2342760"
  },
  {
    "text": "method and there is also trigger do the what is that the dummy method here so",
    "start": "2342760",
    "end": "2347800"
  },
  {
    "text": "the dumy method and the explo will try to like a corrupt the function table",
    "start": "2347800",
    "end": "2354800"
  },
  {
    "text": "virtual function table for this uh Dom method and you you see there some like a",
    "start": "2354800",
    "end": "2362280"
  },
  {
    "text": "uh address calculation here and you will overwrite the apply or",
    "start": "2362280",
    "end": "2368319"
  },
  {
    "text": "call method here and for apply method it will just override to Virtual protect API and",
    "start": "2368319",
    "end": "2377240"
  },
  {
    "text": "whenever you call virtu uh what is that the um apply method upon this uh",
    "start": "2377240",
    "end": "2382760"
  },
  {
    "text": "function object then actually the virtual protect API will be called this is the actual exploit code",
    "start": "2382760",
    "end": "2390760"
  },
  {
    "text": "actually so I I didn't do anything but it's the actual decompiled code from the",
    "start": "2390760",
    "end": "2396359"
  },
  {
    "text": "exploit so if you look at each very well written kind of organized",
    "start": "2396359",
    "end": "2402800"
  },
  {
    "text": "code so when actually the exploit works if you go down to the native level you",
    "start": "2405040",
    "end": "2411400"
  },
  {
    "text": "can see that vure like the cored the virtual function table and it is calling",
    "start": "2411400",
    "end": "2417160"
  },
  {
    "text": "the virtual protect here and whenever it is doing share code",
    "start": "2417160",
    "end": "2424520"
  },
  {
    "text": "execution it uses um uh call method here so these",
    "start": "2424520",
    "end": "2431240"
  },
  {
    "text": "things are very interesting because uh this kind of modularized approach it",
    "start": "2431240",
    "end": "2438920"
  },
  {
    "text": "introduced actually makes writing share code uh ress so there is no Rob r or",
    "start": "2438920",
    "end": "2445560"
  },
  {
    "text": "nothing involved but the share code writing becomes just like a something",
    "start": "2445560",
    "end": "2451720"
  },
  {
    "text": "similar to becomes similar to something similar to what is that uh scripting actually so if you look at the code",
    "start": "2451720",
    "end": "2458400"
  },
  {
    "text": "actually you can just pass the actual API you want to run and you just pass",
    "start": "2458400",
    "end": "2464200"
  },
  {
    "text": "the argument for that API and it will just construct whole stack and it will",
    "start": "2464200",
    "end": "2470520"
  },
  {
    "text": "just run that specific API automatically so this is very commercialized API uh",
    "start": "2470520",
    "end": "2477520"
  },
  {
    "text": "exploit that we've seen ever and it works like very efficiently",
    "start": "2477520",
    "end": "2484720"
  },
  {
    "text": "actually and when maybe the customer want to the who bought this exploit",
    "start": "2484720",
    "end": "2491680"
  },
  {
    "text": "wants to modify the exploit it's very straightforward because it's it's not writing the native level like a share",
    "start": "2491680",
    "end": "2498040"
  },
  {
    "text": "code or something it's more about writing action script code so just uh",
    "start": "2498040",
    "end": "2503359"
  },
  {
    "text": "rewrite some action script code and you can you have your own share",
    "start": "2503359",
    "end": "2508760"
  },
  {
    "text": "code so conclusion so yeah the thing is that even though we",
    "start": "2509599",
    "end": "2515880"
  },
  {
    "text": "introduce to like a different techniques here right so like decompilers",
    "start": "2515880",
    "end": "2521000"
  },
  {
    "text": "disassemblers and even bite bite code instrumentation technique and Native",
    "start": "2521000",
    "end": "2526560"
  },
  {
    "text": "level debugging even even though you have some symbols or Source Code A Plus source code it's not that easy to",
    "start": "2526560",
    "end": "2533560"
  },
  {
    "text": "actually debug or reverse engineer uh this um flash exploit and that's why not",
    "start": "2533560",
    "end": "2540640"
  },
  {
    "text": "many actual informations are like a public maybe and but the approach you",
    "start": "2540640",
    "end": "2547319"
  },
  {
    "text": "should have is like more of combining different approaches like on not just decompiling but you you might rely on",
    "start": "2547319",
    "end": "2553800"
  },
  {
    "text": "some decompiled code sometimes but you can instrument some code but instrumentation is not the silver BL",
    "start": "2553800",
    "end": "2560480"
  },
  {
    "text": "because because it can break exploit so sometimes you instrumented some code but",
    "start": "2560480",
    "end": "2565720"
  },
  {
    "text": "you need some low level debugging tool and the ABM plus source code definitely",
    "start": "2565720",
    "end": "2571040"
  },
  {
    "text": "helps because it has all those internal structures and the other point is that",
    "start": "2571040",
    "end": "2578520"
  },
  {
    "text": "uh recent exploits are focusing on mmgc so the memory manager is the current",
    "start": "2578520",
    "end": "2585599"
  },
  {
    "text": "Target and the the memory manager is used to",
    "start": "2585599",
    "end": "2590880"
  },
  {
    "text": "get access to J level because jit is actually managed by the mmbc right so that is the how they are now working on",
    "start": "2590880",
    "end": "2599119"
  },
  {
    "text": "the bad guys are working on right now and the other point is that because",
    "start": "2599119",
    "end": "2604839"
  },
  {
    "text": "everything a lot of important thing happens in inside jit level uh even though you have symbols for for example",
    "start": "2604839",
    "end": "2611240"
  },
  {
    "text": "for flash it doesn't help because everything help is in jit level and you need to match between the bite the",
    "start": "2611240",
    "end": "2617520"
  },
  {
    "text": "action script code BTE level code and G level code it's not easy to match in",
    "start": "2617520",
    "end": "2623359"
  },
  {
    "text": "between them so something is happening inside G level but it's just uh x86 or",
    "start": "2623359",
    "end": "2629319"
  },
  {
    "text": "those assembly code but you need to figure out how those are related to bite",
    "start": "2629319",
    "end": "2635760"
  },
  {
    "text": "uh bite code level so in that case the bite code instrumentation helps a lot because you can put some helper function",
    "start": "2635760",
    "end": "2643680"
  },
  {
    "text": "into some specific uh method you are interested in then you maybe you can use",
    "start": "2643680",
    "end": "2650720"
  },
  {
    "text": "that as a kind of Trigger or marker to debug into the uh Native level",
    "start": "2650720",
    "end": "2656559"
  },
  {
    "text": "code and the last one is uh the predictability of hip layout from",
    "start": "2656559",
    "end": "2662520"
  },
  {
    "text": "M&C uh uh can be a problem because uh",
    "start": "2662520",
    "end": "2667839"
  },
  {
    "text": "we saw a lot of exploiture using this and you don't even need like a few gigabytes of hip spring but just like um",
    "start": "2667839",
    "end": "2676079"
  },
  {
    "text": "just few megabytes of hip spring actually makes this condition happens so those things are the conclusions and we",
    "start": "2676079",
    "end": "2684079"
  },
  {
    "text": "share the sample code that we used probably you can find it from somewhere here and for every CV numbers and the",
    "start": "2684079",
    "end": "2691599"
  },
  {
    "text": "exploit code uh the techniques are actually shared here so if you you want to actually study these cases you can do",
    "start": "2691599",
    "end": "2698599"
  },
  {
    "text": "it yourself and acknowledgement actually special thanks to man Miller David",
    "start": "2698599",
    "end": "2704119"
  },
  {
    "text": "Weston El uh Floria for their support for This research and that's it for the",
    "start": "2704119",
    "end": "2709599"
  },
  {
    "text": "presentation and let's have some questions if you have",
    "start": "2709599",
    "end": "2714799"
  },
  {
    "text": "[Applause]",
    "start": "2716310",
    "end": "2722839"
  },
  {
    "text": "any so we have exactly five minutes so",
    "start": "2722839",
    "end": "2728079"
  },
  {
    "text": "questions you sure they have some questions",
    "start": "2728079",
    "end": "2732960"
  },
  {
    "text": "yeah you",
    "start": "2740760",
    "end": "2743920"
  },
  {
    "text": "can can you hear me yeah yeah so is this a Microsoft Project or is this something",
    "start": "2755400",
    "end": "2760880"
  },
  {
    "text": "that you're in particular uh this is Microsoft uh project is uh actually so",
    "start": "2760880",
    "end": "2767119"
  },
  {
    "text": "we are working together with Adobe security to improve Adobe Flash actually so in that case uh this information on",
    "start": "2767119",
    "end": "2774520"
  },
  {
    "text": "the actual in the wild exploits are very very valuable mhm yeah okay thank",
    "start": "2774520",
    "end": "2781960"
  },
  {
    "text": "you any other questions hi uh you mentioned earlier here you mentioned",
    "start": "2782200",
    "end": "2789599"
  },
  {
    "text": "something about CFG uh protecting uh the actually uh",
    "start": "2789599",
    "end": "2795559"
  },
  {
    "text": "diminishing um the effectiveness of of remote code execution right uh what's",
    "start": "2795559",
    "end": "2802880"
  },
  {
    "text": "the cost of efficiency after the implementation of CFG uh I don't have exra numbers there",
    "start": "2802880",
    "end": "2811440"
  },
  {
    "text": "should be something out there I guess but because it's just few lines of assembly code I don't think it's really",
    "start": "2811440",
    "end": "2817720"
  },
  {
    "text": "that uh degrading any performance so that is a question right thank you yeah",
    "start": "2817720",
    "end": "2823079"
  },
  {
    "text": "thank you any other so we have 4 minutes",
    "start": "2823079",
    "end": "2829520"
  },
  {
    "text": "so and I think that's it and thank you [Applause]",
    "start": "2831520",
    "end": "2838130"
  }
]