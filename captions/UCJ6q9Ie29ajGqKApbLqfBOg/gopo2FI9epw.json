[
  {
    "text": "[Music] foreign",
    "start": "1730",
    "end": "6720"
  },
  {
    "text": "I swear I am not a cat all right so uh I got into infosec uh",
    "start": "10320",
    "end": "18180"
  },
  {
    "text": "password as a password cracker then uh you know I'm a cryptography Enthusiast",
    "start": "18180",
    "end": "23340"
  },
  {
    "text": "and uh about a decade ago I was watching uh Tech YouTube channel and they kept on",
    "start": "23340",
    "end": "29220"
  },
  {
    "text": "being uh sponsored by a password manager and I you know I was like ah maybe I",
    "start": "29220",
    "end": "36000"
  },
  {
    "text": "should look at it and uh sorry I the it's all um I I can hear",
    "start": "36000",
    "end": "43860"
  },
  {
    "text": "myself sorry uh so uh I started finding all these bugs",
    "start": "43860",
    "end": "50760"
  },
  {
    "text": "uh it was the first time I actually Co audited anything and you know uh there",
    "start": "50760",
    "end": "56579"
  },
  {
    "text": "was like a anyway uh so there's like downgrade",
    "start": "56579",
    "end": "63719"
  },
  {
    "text": "attacks and stuff like that and then I looked at other ones and they had similar bugs and whatnot and I basically",
    "start": "63719",
    "end": "69540"
  },
  {
    "text": "I decided uh how would I make one and then this is basically that Journey uh I",
    "start": "69540",
    "end": "76320"
  },
  {
    "text": "was on the password competition panel and uh I broke uh I don't actually know",
    "start": "76320",
    "end": "81900"
  },
  {
    "text": "how to say that I assume it's like uh Latin so it's like the Visa you and then",
    "start": "81900",
    "end": "88979"
  },
  {
    "text": "um I broke delegation for the original version of uh Makwa uh but that was",
    "start": "88979",
    "end": "95520"
  },
  {
    "text": "fixed so uh so here's the agenda for today uh key stretching you know and",
    "start": "95520",
    "end": "100680"
  },
  {
    "text": "then pass through authentic exchanges uh so",
    "start": "100680",
    "end": "106619"
  },
  {
    "text": "key stretching this is usually for you know passwords um so hashing that would be for",
    "start": "106619",
    "end": "113640"
  },
  {
    "text": "authentication so when you log into a website you know if they hatch your password look it up in a database and",
    "start": "113640",
    "end": "118860"
  },
  {
    "text": "then um see if it's right and then uh password",
    "start": "118860",
    "end": "125040"
  },
  {
    "text": "kdf that's to generate a key usually for",
    "start": "125040",
    "end": "131459"
  },
  {
    "text": "like encryption or algorithms like picks uh there's also another thing that you",
    "start": "131459",
    "end": "137400"
  },
  {
    "text": "can do with key stretching which is uh fingerprints one example is signals safety numbers they generate it's a",
    "start": "137400",
    "end": "146220"
  },
  {
    "text": "30-bit 30 decimal digit number which is basically 100 bits and they wanted to",
    "start": "146220",
    "end": "151620"
  },
  {
    "text": "stretch it to 112. so why would you key stretch for",
    "start": "151620",
    "end": "157800"
  },
  {
    "text": "passwords that's basically what I'm going to be talking about but uh so uh Ashley Madison there's a breach uh",
    "start": "157800",
    "end": "165660"
  },
  {
    "text": "decrypt cost 12. those are really really good key stretch they're really slow",
    "start": "165660",
    "end": "172319"
  },
  {
    "text": "it's you know 100 a little over 100 hashes per second that you can do on a",
    "start": "172319",
    "end": "177480"
  },
  {
    "text": "GPU so if you were to guess one password such as password against all the",
    "start": "177480",
    "end": "184019"
  },
  {
    "text": "password hashes in the database it would take 90 GPU hours to guess one but",
    "start": "184019",
    "end": "191640"
  },
  {
    "text": "um they also stored salted case insensitive md5 hashes next to them uh",
    "start": "191640",
    "end": "197220"
  },
  {
    "text": "there were 15 million of those and then when it was discovered by uh Sino Prime",
    "start": "197220",
    "end": "205200"
  },
  {
    "text": "cynosure Prime sorry uh 11 million of those were cracked in 10",
    "start": "205200",
    "end": "210900"
  },
  {
    "text": "days because uh you know md5 is very fast so then all",
    "start": "210900",
    "end": "217680"
  },
  {
    "text": "they would have to do is uh run it you know uh figure out what case",
    "start": "217680",
    "end": "223500"
  },
  {
    "text": "those passes were so in those 10 days uh 73 of those were broken so",
    "start": "223500",
    "end": "230340"
  },
  {
    "text": "uh there's different types of uh key stretching algorithms",
    "start": "230340",
    "end": "236040"
  },
  {
    "text": "um computationally hard uh basically just how much work is done so number of",
    "start": "236040",
    "end": "242400"
  },
  {
    "text": "blocks of hashing that you do there's parallel versus sequential as a attacker you only care about how",
    "start": "242400",
    "end": "250500"
  },
  {
    "text": "much work was done and as a Defender you only care about how long it takes",
    "start": "250500",
    "end": "255599"
  },
  {
    "text": "so if you have um a computer with multiple cores and",
    "start": "255599",
    "end": "262560"
  },
  {
    "text": "specific CPU instructions called simd single",
    "start": "262560",
    "end": "267900"
  },
  {
    "text": "instruction multiple data you can then run you know a hundred hashes in parallel first one",
    "start": "267900",
    "end": "276720"
  },
  {
    "text": "that you would be able to so it'd be harder in a shorter amount of time memory hard the way that those are",
    "start": "276720",
    "end": "285479"
  },
  {
    "text": "strong is the amount of memory that's being used limits how many threads on a",
    "start": "285479",
    "end": "290940"
  },
  {
    "text": "GPU that you can be using so as you use more memory the GPU can't use as many",
    "start": "290940",
    "end": "297419"
  },
  {
    "text": "threads uh and also like uh how much bandwidth",
    "start": "297419",
    "end": "303360"
  },
  {
    "text": "is consumed because uh gpus have a lot of bandwidth for uh CPUs",
    "start": "303360",
    "end": "309900"
  },
  {
    "text": "um Cash Card uh the way that these are strong is uh instead of bandwidth it's the number of transactions so on a GPU",
    "start": "309900",
    "end": "317400"
  },
  {
    "text": "uh the bandwidth uh the bus size is rather large and with a cash art",
    "start": "317400",
    "end": "324060"
  },
  {
    "text": "algorithm you're only using a fraction of that uh so you're reading like a 64-bit Ram",
    "start": "324060",
    "end": "329840"
  },
  {
    "text": "randomly 64-bit integers and then combining all those with a very fast",
    "start": "329840",
    "end": "335580"
  },
  {
    "text": "operation like add and xor so uh here's some algorithms",
    "start": "335580",
    "end": "342840"
  },
  {
    "text": "parallel PB kdf I'll be talking about that later pbk beef two uh b-crypt uh",
    "start": "342840",
    "end": "349440"
  },
  {
    "text": "bscrypt that's uh algorithm that I did a talk at besides uh yesterday",
    "start": "349440",
    "end": "355979"
  },
  {
    "text": "um memory hard you know argon2 that was the algorithm that was picked from the",
    "start": "355979",
    "end": "361620"
  },
  {
    "text": "passive hashing competition uh",
    "start": "361620",
    "end": "368460"
  },
  {
    "text": "key stretching so uh basically if you're making a key stretching algorithm uh if",
    "start": "368460",
    "end": "374039"
  },
  {
    "text": "you follow these three steps and there's the optional step for memory Hardware you're doing walk-ups that are",
    "start": "374039",
    "end": "381360"
  },
  {
    "text": "independent of the password um so you hash all the inputs you know",
    "start": "381360",
    "end": "387660"
  },
  {
    "text": "password salt whatnot um then you do work with that seed you",
    "start": "387660",
    "end": "392940"
  },
  {
    "text": "generate work a value called work and then um you use a kdf to then stretch it",
    "start": "392940",
    "end": "398639"
  },
  {
    "text": "to whatever size you want um so if you don't follow so these",
    "start": "398639",
    "end": "405360"
  },
  {
    "text": "algorithms don't follow those three steps and there were CVS on them these",
    "start": "405360",
    "end": "412020"
  },
  {
    "text": "were so when I came up with those three steps uh it that is very new in comparison to",
    "start": "412020",
    "end": "418919"
  },
  {
    "text": "these algorithms these are older uh technically uh pbkdf2",
    "start": "418919",
    "end": "424740"
  },
  {
    "text": "um that was uh that CV is because of a implementation bug",
    "start": "424740",
    "end": "431340"
  },
  {
    "text": "so uh key stretching bugs uh decrypt silently truncates to 72 bytes",
    "start": "431340",
    "end": "439440"
  },
  {
    "text": "and so this is code from the UK's government's police cyber alarm I don't",
    "start": "439440",
    "end": "445740"
  },
  {
    "text": "actually know what that is but uh Paul Moore on Twitter uh tweeted about this so",
    "start": "445740",
    "end": "452819"
  },
  {
    "text": "basically uh P hash that is",
    "start": "452819",
    "end": "457979"
  },
  {
    "text": "um 64 bytes so it leaves only eight bytes for your password there's a simple fix if you uh actually",
    "start": "457979",
    "end": "465720"
  },
  {
    "text": "hash all that along with the password then you know this is actually close to",
    "start": "465720",
    "end": "471240"
  },
  {
    "text": "what you should be doing with decrypt you want to Hash the password with uh",
    "start": "471240",
    "end": "477479"
  },
  {
    "text": "hmac so you can have a pepper as the key and then the message being the password",
    "start": "477479",
    "end": "482580"
  },
  {
    "text": "and then put that in and then you want to have ASCII uh",
    "start": "482580",
    "end": "488099"
  },
  {
    "text": "uh encoding of it so uh even if you do follow all the",
    "start": "488099",
    "end": "493259"
  },
  {
    "text": "steps uh there still can be bugs that happen this was with bouncy hassle",
    "start": "493259",
    "end": "499020"
  },
  {
    "text": "um it only checks the first occurrences of those characters and you know a few of them uh are at the beginning and",
    "start": "499020",
    "end": "505979"
  },
  {
    "text": "there's a probability that you get an unlucky hash where the any password would match so I calculated those",
    "start": "505979",
    "end": "513200"
  },
  {
    "text": "probabilities uh when the the bug came out I haven't actually double checked",
    "start": "513200",
    "end": "519060"
  },
  {
    "text": "but I'm pretty sure they're right so um how to do key stretching so these are",
    "start": "519060",
    "end": "526380"
  },
  {
    "text": "the the three steps I've removed the uh optional stuff and you might be looking at do work and thinking",
    "start": "526380",
    "end": "533100"
  },
  {
    "text": "that's there's there's a lot missing there so uh how to draw an owl meme you",
    "start": "533100",
    "end": "538560"
  },
  {
    "text": "know uh so this is pbkdf2 um there's actually uh two issues with",
    "start": "538560",
    "end": "546000"
  },
  {
    "text": "it um you know according to this the three steps so uh if you don't do hmac and net",
    "start": "546000",
    "end": "553500"
  },
  {
    "text": "and hmac finish if you were to just do hmac where all the hmax finishes are",
    "start": "553500",
    "end": "558839"
  },
  {
    "text": "you'd have you'd as a Defender you'd be doing twice as much work but also if",
    "start": "558839",
    "end": "563880"
  },
  {
    "text": "someone enters a really really long password you have to Hash that every time and you can uh it'll be a Dos one",
    "start": "563880",
    "end": "570959"
  },
  {
    "text": "of those uh CVS was basically that um also the red boxes those are",
    "start": "570959",
    "end": "577920"
  },
  {
    "text": "independently generated so you're doing if you ask for more output from pbkdf2",
    "start": "577920",
    "end": "583860"
  },
  {
    "text": "you're doing more and more work but you can use that as you can use that foot",
    "start": "583860",
    "end": "589440"
  },
  {
    "text": "gun for an algorithm uh this is something I came up with uh parallel ppkdf2",
    "start": "589440",
    "end": "595740"
  },
  {
    "text": "um basically you just ask for a large output and then you xor all those blocks together",
    "start": "595740",
    "end": "600800"
  },
  {
    "text": "then you put that into PVP area of two to stretch it to whatever length you want nist should",
    "start": "600800",
    "end": "607860"
  },
  {
    "text": "um like Fast Track some uh and you know pbk df3 uh that is something like that",
    "start": "607860",
    "end": "615360"
  },
  {
    "text": "because um currently they suggest pvkdf2 or",
    "start": "615360",
    "end": "621600"
  },
  {
    "text": "balloon hashing but balloon hashing doesn't actually have a a spec like",
    "start": "621600",
    "end": "627720"
  },
  {
    "text": "uh it's just an idea sort of thing um so minimum password hashing settings",
    "start": "627720",
    "end": "634980"
  },
  {
    "text": "so you want to make sure that an attacker",
    "start": "634980",
    "end": "640740"
  },
  {
    "text": "gets less than 10 000 guesses per second per GPU Jeremy Gosney uh is the one that",
    "start": "640740",
    "end": "648019"
  },
  {
    "text": "was quoted saying this that it was after uh you know a breach and the password",
    "start": "648019",
    "end": "655320"
  },
  {
    "text": "hashes were such that they were less than ten thousand per the fastest GPU at",
    "start": "655320",
    "end": "661440"
  },
  {
    "text": "the time and he said that that was proper slow I then used that and then changed the definition of GPU to mean",
    "start": "661440",
    "end": "668399"
  },
  {
    "text": "the best for password tracking and so maximums uh these are very dependent on",
    "start": "668399",
    "end": "675060"
  },
  {
    "text": "what your Hardware is so if you basically don't want to take too much",
    "start": "675060",
    "end": "680579"
  },
  {
    "text": "time or too much memory and if you're doing server authentication you know hashing",
    "start": "680579",
    "end": "686700"
  },
  {
    "text": "um you want to make sure that your throughput is uh what you want and since",
    "start": "686700",
    "end": "692040"
  },
  {
    "text": "those are all like you know dependent on uh your Hardware uh I'm just going to",
    "start": "692040",
    "end": "697260"
  },
  {
    "text": "talk about minimums because if well it's easier to you know give minimums so uh",
    "start": "697260",
    "end": "704339"
  },
  {
    "text": "bscrypt as I said this was uh I did a talk at b-sides LV yesterday",
    "start": "704339",
    "end": "710579"
  },
  {
    "text": "um so those are the minimums uh these are actually extremely fast you can go",
    "start": "710579",
    "end": "717360"
  },
  {
    "text": "way higher uh these are like uh run times of milliseconds",
    "start": "717360",
    "end": "723360"
  },
  {
    "text": "um so the 1.9 million in the uh",
    "start": "723360",
    "end": "729320"
  },
  {
    "text": "uh I should highlighted um so basically in general you want to",
    "start": "729320",
    "end": "735060"
  },
  {
    "text": "use the highest uh cash level per core",
    "start": "735060",
    "end": "741180"
  },
  {
    "text": "and then for number of iterations T that's based on how many memory",
    "start": "741180",
    "end": "747420"
  },
  {
    "text": "transactions uh a current GPU gets so uh bcrypt minimum settings are very",
    "start": "747420",
    "end": "755040"
  },
  {
    "text": "simple uh cost nine uh technically well because uh the way bcrypt works with",
    "start": "755040",
    "end": "761100"
  },
  {
    "text": "their costs it's exponential so um it's technically like 8.1 but uh you know you",
    "start": "761100",
    "end": "768060"
  },
  {
    "text": "have to put in an integer um oh uh the link at the bottom of the screen uh that is my web page I will be",
    "start": "768060",
    "end": "776100"
  },
  {
    "text": "updating that with uh you know current recommendations um so argon2 uh they had an RFC uh",
    "start": "776100",
    "end": "787740"
  },
  {
    "text": "the people that made are going to put out on RFC um",
    "start": "787740",
    "end": "794360"
  },
  {
    "text": "and so those are the settings that they gave you know",
    "start": "794459",
    "end": "800120"
  },
  {
    "text": "uh basically you know two gigs one iteration 64 Meg three iteration you",
    "start": "800220",
    "end": "806339"
  },
  {
    "text": "know very similar just kidding uh those are wildly different um the password manager that I use",
    "start": "806339",
    "end": "813060"
  },
  {
    "text": "keepass um uh they don't even allow you to do uh",
    "start": "813060",
    "end": "818940"
  },
  {
    "text": "two gigs but so these are my minimums",
    "start": "818940",
    "end": "824760"
  },
  {
    "text": "um these are based on the memory bandwidth of current gpus",
    "start": "824760",
    "end": "830760"
  },
  {
    "text": "uh basically there aren't any good benchmarks for it for password tracking",
    "start": "830760",
    "end": "837000"
  },
  {
    "text": "uh the so if you look at the general formulas the alpha variable that is uh",
    "start": "837000",
    "end": "845100"
  },
  {
    "text": "the percentage of memory bandwidth that you can actually consume and that depends on how much memory uh you know",
    "start": "845100",
    "end": "852000"
  },
  {
    "text": "the memory setting uh it's you know assumed that uh",
    "start": "852000",
    "end": "858240"
  },
  {
    "text": "around uh 64 Megs ish then that will start",
    "start": "858240",
    "end": "864420"
  },
  {
    "text": "dropping as you double uh memory the speed of a GPU will be cut in",
    "start": "864420",
    "end": "873060"
  },
  {
    "text": "quarter because it's doing twice as much work with half as many threads",
    "start": "873060",
    "end": "878880"
  },
  {
    "text": "so s grip minimums um same thing it was based off of uh memory bandwidth",
    "start": "878880",
    "end": "885779"
  },
  {
    "text": "so uh you don't have to answer it just think so pbkdf2 pulse settings uh what do you",
    "start": "885779",
    "end": "893760"
  },
  {
    "text": "think is like a high number you know like a good number and what you you think industry standards would be well",
    "start": "893760",
    "end": "901040"
  },
  {
    "text": "here's my minimums they're so it depends on what algorithm you're actually",
    "start": "901040",
    "end": "906839"
  },
  {
    "text": "hashing algorithm you're using so uh you know shell one is very fast on a GPU so",
    "start": "906839",
    "end": "913860"
  },
  {
    "text": "that's higher um technically uh Blake 512 would be the",
    "start": "913860",
    "end": "920699"
  },
  {
    "text": "best algorithm to use because uh there's internal parallelism so as a",
    "start": "920699",
    "end": "925980"
  },
  {
    "text": "Defender you can use some D instructions single instruction multiple data",
    "start": "925980",
    "end": "931680"
  },
  {
    "text": "um so it will be faster but faster as a Defender for the same",
    "start": "931680",
    "end": "937260"
  },
  {
    "text": "strength as others so parallel pbkdf2 uh",
    "start": "937260",
    "end": "942540"
  },
  {
    "text": "uh it's a simple thing you know cost three cost one each cost is equivalent",
    "start": "942540",
    "end": "949199"
  },
  {
    "text": "to uh you know over a hundred thousand iterations uh so",
    "start": "949199",
    "end": "955560"
  },
  {
    "text": "uh password authenticated key exchanges um",
    "start": "955560",
    "end": "960600"
  },
  {
    "text": "yeah so uh you can use these for uh password authentication so when you're",
    "start": "960600",
    "end": "966600"
  },
  {
    "text": "logging into a website um you know instead of giving your password",
    "start": "966600",
    "end": "972180"
  },
  {
    "text": "over you do this key exchange then there were a bunch of uh",
    "start": "972180",
    "end": "978540"
  },
  {
    "text": "a few years ago a bunch of companies found out that they were accidentally logging passwords so if",
    "start": "978540",
    "end": "985980"
  },
  {
    "text": "they switch to a password kdf up uh Pig",
    "start": "985980",
    "end": "992959"
  },
  {
    "text": "um then even if they did log all those messages uh you know there wouldn't be anything",
    "start": "993240",
    "end": "999240"
  },
  {
    "text": "uh important in them uh so you can also use pakes to establish a encrypted",
    "start": "999240",
    "end": "1005839"
  },
  {
    "text": "tunnel uh you can use a magic Wormhole for sending files or fighting uh",
    "start": "1005839",
    "end": "1011959"
  },
  {
    "text": "phone spoofing uh so you might be if you've heard of scram",
    "start": "1011959",
    "end": "1017360"
  },
  {
    "text": "maybe not uh the problem with scram is you have to be",
    "start": "1017360",
    "end": "1023120"
  },
  {
    "text": "on an encrypted Channel because anyone that sees those messages if they see a",
    "start": "1023120",
    "end": "1029418"
  },
  {
    "text": "successful you know login those messages are equivalent to a password hash so in the case of logging",
    "start": "1029419",
    "end": "1037100"
  },
  {
    "text": "you'd be logging password hashes uh so types of picks uh balance those",
    "start": "1037100",
    "end": "1043339"
  },
  {
    "text": "are peer-to-peer so uh you know a person types in the password on one side someone else to",
    "start": "1043339",
    "end": "1049400"
  },
  {
    "text": "pass it on the other then there's augmented uh apic uh those are client server uh do not",
    "start": "1049400",
    "end": "1056720"
  },
  {
    "text": "call these uh symmetric asymmetric uh one reason is there's asymmetric and",
    "start": "1056720",
    "end": "1062179"
  },
  {
    "text": "symmetric cryptography but also it implies that there's only two so uh two different types of picks uh",
    "start": "1062179",
    "end": "1069799"
  },
  {
    "text": "doubly augmented This was um there's a long email from Mike Hamburg where at the end he uh",
    "start": "1069799",
    "end": "1078440"
  },
  {
    "text": "uh you know off you know just like in a really short like sentence mentions that",
    "start": "1078440",
    "end": "1083600"
  },
  {
    "text": "it could be dog uh doubly augmented and um you know a few years uh he said he",
    "start": "1083600",
    "end": "1089900"
  },
  {
    "text": "didn't know like a good way uh you know what that could be used for a few years",
    "start": "1089900",
    "end": "1095380"
  },
  {
    "text": "uh later um I figured out uh the perfect you know",
    "start": "1095380",
    "end": "1100520"
  },
  {
    "text": "match for it which is Wi-Fi uh so basically",
    "start": "1100520",
    "end": "1106760"
  },
  {
    "text": "um your doorbell and your access point your doorbell would be a device that has",
    "start": "1106760",
    "end": "1113000"
  },
  {
    "text": "basically uh you don't want someone to break into your doorbell and then be able to uh use the information stored on",
    "start": "1113000",
    "end": "1120140"
  },
  {
    "text": "it to spin up an AP and then attack your network with a doubly augmented pick uh",
    "start": "1120140",
    "end": "1126679"
  },
  {
    "text": "the doorbell wouldn't have any information necessary to make a access point",
    "start": "1126679",
    "end": "1132980"
  },
  {
    "text": "um then uh identity pick this is you know basically",
    "start": "1132980",
    "end": "1139220"
  },
  {
    "text": "uh there's everyone has an identity roles and permissions and stuff and a",
    "start": "1139220",
    "end": "1145460"
  },
  {
    "text": "good fit for that is iot so um the hierarchy of pigs basically if",
    "start": "1145460",
    "end": "1153380"
  },
  {
    "text": "you need a balance pick you could technically use any of these",
    "start": "1153380",
    "end": "1159200"
  },
  {
    "text": "um but you know uh they're more work but if you needed something that was a doubly augmented pick then you could",
    "start": "1159200",
    "end": "1166640"
  },
  {
    "text": "either use that or an identity pick but nothing else so",
    "start": "1166640",
    "end": "1172220"
  },
  {
    "text": "uh balancing an identity picks those are you know more uh you know peer-to-peer",
    "start": "1172220",
    "end": "1179900"
  },
  {
    "text": "or could be like um in the case of like iot where like uh you know two devices",
    "start": "1179900",
    "end": "1186799"
  },
  {
    "text": "are talking to each other then uh augment and doubly augmented those are more uh client server the uh",
    "start": "1186799",
    "end": "1194059"
  },
  {
    "text": "top two are basically human isn't as involved and",
    "start": "1194059",
    "end": "1201200"
  },
  {
    "text": "then the bottom two those are where uh two computers can be talking to each other",
    "start": "1201200",
    "end": "1206419"
  },
  {
    "text": "or devices so how do takes work so this is standard diffie-hellman you",
    "start": "1206419",
    "end": "1213860"
  },
  {
    "text": "have Alice and Bob talking to each other and so they both generate a random private key",
    "start": "1213860",
    "end": "1220220"
  },
  {
    "text": "then do scalar Point multiplication to create a public key then they exchange",
    "start": "1220220",
    "end": "1225500"
  },
  {
    "text": "them and then they apply their private key to the other's public key and then",
    "start": "1225500",
    "end": "1231500"
  },
  {
    "text": "they get sasb those should be the same unless there was someone Milling this",
    "start": "1231500",
    "end": "1237080"
  },
  {
    "text": "connection and so uh what you can do with picks um",
    "start": "1237080",
    "end": "1244400"
  },
  {
    "text": "is you can hide the ephemeral keys that you're exchanging so one way to do that",
    "start": "1244400",
    "end": "1249860"
  },
  {
    "text": "is you take the password you hash it then you put it through this function called hashed Curve what that does is",
    "start": "1249860",
    "end": "1257240"
  },
  {
    "text": "it's different than scalar Point multiplication where when you give it the hash of the",
    "start": "1257240",
    "end": "1265220"
  },
  {
    "text": "password um you don't know the private key basically so it generates this point uh",
    "start": "1265220",
    "end": "1274400"
  },
  {
    "text": "the password point I'll call it and so when you generate your ephemeral key you just add it",
    "start": "1274400",
    "end": "1280340"
  },
  {
    "text": "add that point to your ephemeral key and then exchange that then you remove it by",
    "start": "1280340",
    "end": "1287840"
  },
  {
    "text": "subtraction and then apply your private key and then essay and SB should be the same assuming you know the password is",
    "start": "1287840",
    "end": "1295039"
  },
  {
    "text": "correct another method is hiding the generator so you do the same thing with the hashed",
    "start": "1295039",
    "end": "1303020"
  },
  {
    "text": "Curve thing but instead of using the standard generator if you use the password Point as the generator",
    "start": "1303020",
    "end": "1310760"
  },
  {
    "text": "um so the patent expired in 2017 so we can now actually use this which is good",
    "start": "1310760",
    "end": "1317360"
  },
  {
    "text": "because this is the easiest method because it's just diffie-hellman and you",
    "start": "1317360",
    "end": "1323179"
  },
  {
    "text": "don't need to rely on password addition and subtraction",
    "start": "1323179",
    "end": "1328280"
  },
  {
    "text": "uh so this is recent uh more recent uh",
    "start": "1328280",
    "end": "1334480"
  },
  {
    "text": "so hiding salt with an oprf oblivious super round function",
    "start": "1335900",
    "end": "1342679"
  },
  {
    "text": "uh so basically you do the same thing where you do hash curve with your password and",
    "start": "1342679",
    "end": "1348320"
  },
  {
    "text": "stuff then you blind it with a random value",
    "start": "1348320",
    "end": "1353480"
  },
  {
    "text": "then you send that over to the server they apply the salt like private key",
    "start": "1353480",
    "end": "1358600"
  },
  {
    "text": "then they send that back to you and then you unblind it by a scalar point there",
    "start": "1358600",
    "end": "1366500"
  },
  {
    "text": "scalar invert and then scalar Point multiplication and basically the blind salt is what I",
    "start": "1366500",
    "end": "1372860"
  },
  {
    "text": "call it uh equals the salt times the password point",
    "start": "1372860",
    "end": "1378740"
  },
  {
    "text": "and the server doesn't learn what that point",
    "start": "1378740",
    "end": "1383780"
  },
  {
    "text": "is and you don't learn what the salt is so",
    "start": "1383780",
    "end": "1389799"
  },
  {
    "text": "um so how do these picks work uh basically um",
    "start": "1391280",
    "end": "1397400"
  },
  {
    "text": "noise it's basically like a different types of",
    "start": "1397400",
    "end": "1404539"
  },
  {
    "text": "key exchanges N means no static key K is",
    "start": "1404539",
    "end": "1410120"
  },
  {
    "text": "the other party knows what what the static key is uh what your static key is the first",
    "start": "1410120",
    "end": "1416539"
  },
  {
    "text": "letter is um the initiator and the second is the receiver so balanced yeah",
    "start": "1416539",
    "end": "1422720"
  },
  {
    "text": "so balanced uh so all the arrows that will",
    "start": "1422720",
    "end": "1428539"
  },
  {
    "text": "be on these slides are uh Diffie Allman so ephemeral key to the thermal key for",
    "start": "1428539",
    "end": "1434600"
  },
  {
    "text": "balanced uh static key ephemeral to ephemeral to ephemeral",
    "start": "1434600",
    "end": "1440659"
  },
  {
    "text": "uh noise can uh doubly augmented uh",
    "start": "1440659",
    "end": "1446659"
  },
  {
    "text": "oh anyway so 3dh you know so uh these are uh",
    "start": "1446659",
    "end": "1455000"
  },
  {
    "text": "pick algorithms uh so uh the way that they're colored is",
    "start": "1455000",
    "end": "1461299"
  },
  {
    "text": "um by what they're hiding uh so the ones with red stars next to them those also",
    "start": "1461299",
    "end": "1466640"
  },
  {
    "text": "hide the salt like uh opic does",
    "start": "1466640",
    "end": "1471159"
  },
  {
    "text": "um yeah so uh the identity takes those uh",
    "start": "1473240",
    "end": "1479059"
  },
  {
    "text": "they're not colored because uh those actually just use a balance pick so",
    "start": "1479059",
    "end": "1484760"
  },
  {
    "text": "their color would come from or you know like what they hide comes from what uh",
    "start": "1484760",
    "end": "1491000"
  },
  {
    "text": "balance pick that you use uh so there was a paper that made uh chip and crisp",
    "start": "1491000",
    "end": "1498740"
  },
  {
    "text": "um where they said that crisp uh protected the salt basically",
    "start": "1498740",
    "end": "1506360"
  },
  {
    "text": "um so uh",
    "start": "1506360",
    "end": "1512679"
  },
  {
    "text": "um yeah so basically uh instead of uh protecting it before you run the",
    "start": "1517880",
    "end": "1524179"
  },
  {
    "text": "password kdf uh it was that uh after that",
    "start": "1524179",
    "end": "1529580"
  },
  {
    "text": "where you had to run the it was a more expensive key exchange that you had to run each time",
    "start": "1529580",
    "end": "1535760"
  },
  {
    "text": "um so I I came up with fry because Chris chip crisp fry basically it's just uh",
    "start": "1535760",
    "end": "1543200"
  },
  {
    "text": "chip but you know has an oprf and it does mess with the way that their setup",
    "start": "1543200",
    "end": "1548840"
  },
  {
    "text": "works it's kind of a joke but uh so pick properties",
    "start": "1548840",
    "end": "1556100"
  },
  {
    "text": "um uh forward secrecy that's basically every single fake has that uh prevent",
    "start": "1556100",
    "end": "1562820"
  },
  {
    "text": "pre- pre-computation that's the protecting the salt um",
    "start": "1562820",
    "end": "1569179"
  },
  {
    "text": "can you turn the music down uh thank you uh",
    "start": "1569179",
    "end": "1577539"
  },
  {
    "text": "uh so pre-computation um basically what uh that does is",
    "start": "1578900",
    "end": "1585919"
  },
  {
    "text": "uh it protects the salt so that um when your uh",
    "start": "1585919",
    "end": "1592039"
  },
  {
    "text": "so it prevents this attack where you run through the passer kdf a bunch of times with different passwords before you",
    "start": "1592039",
    "end": "1597980"
  },
  {
    "text": "break into the server then when you actually uh break into the server you can then check all those passwords near",
    "start": "1597980",
    "end": "1604820"
  },
  {
    "text": "instantly or instantly so crisp slightly protects it the key exchange is",
    "start": "1604820",
    "end": "1612919"
  },
  {
    "text": "fairly expensive at being you know about like four milliseconds which isn't",
    "start": "1612919",
    "end": "1618980"
  },
  {
    "text": "actually a good property because your you know iot devices would have to run that out of the room every time",
    "start": "1618980",
    "end": "1626240"
  },
  {
    "text": "but uh secure registration basically when you register",
    "start": "1626240",
    "end": "1632600"
  },
  {
    "text": "um uh if you're being man-middled since there's no like pre-shared key between",
    "start": "1632600",
    "end": "1638779"
  },
  {
    "text": "you and the server um you know someone can just come in and then you know man in the middle grab",
    "start": "1638779",
    "end": "1645620"
  },
  {
    "text": "that uh all the information and then um later when you try and go to the",
    "start": "1645620",
    "end": "1651140"
  },
  {
    "text": "actual server uh you would notice that it doesn't work",
    "start": "1651140",
    "end": "1656600"
  },
  {
    "text": "um uh Quantum annoying this is a term that I came up with",
    "start": "1656600",
    "end": "1661940"
  },
  {
    "text": "um there was a paper that uh tried to formally Define it and they did a talk",
    "start": "1661940",
    "end": "1667159"
  },
  {
    "text": "at uh PQ crypto so Quantum annoying what this is is uh",
    "start": "1667159",
    "end": "1673700"
  },
  {
    "text": "you have to break a you have to solve a DLP for",
    "start": "1673700",
    "end": "1678919"
  },
  {
    "text": "every password guess so you you uh",
    "start": "1678919",
    "end": "1684080"
  },
  {
    "text": "so when you see a successful exchange you then capture all the packets if you",
    "start": "1684080",
    "end": "1691700"
  },
  {
    "text": "had a quantum computer you'd have to solve one DLP for every passer guess basically fragile uh what that is is uh",
    "start": "1691700",
    "end": "1701240"
  },
  {
    "text": "the all the security of the algorithm depends on static diphelman a static",
    "start": "1701240",
    "end": "1708740"
  },
  {
    "text": "diffie-hellman Oracle and number of trips three verse four",
    "start": "1708740",
    "end": "1714140"
  },
  {
    "text": "obviously three is better but so um when I coined the term I didn't",
    "start": "1714140",
    "end": "1719960"
  },
  {
    "text": "actually know that anyone knew about this property uh so speak when I was reading the speak",
    "start": "1719960",
    "end": "1727100"
  },
  {
    "text": "paper I noticed this quote you know I'm not gonna read it but uh then they",
    "start": "1727100",
    "end": "1732200"
  },
  {
    "text": "referenced uh the eke paper that basically said the same thing",
    "start": "1732200",
    "end": "1738200"
  },
  {
    "text": "sorry so pick properties uh by algorithm",
    "start": "1738200",
    "end": "1744580"
  },
  {
    "text": "so uh Quantum annoying uh that is a very",
    "start": "1749120",
    "end": "1754880"
  },
  {
    "text": "good property to have you know for future of uh you know fakes assuming you",
    "start": "1754880",
    "end": "1761360"
  },
  {
    "text": "know if a quantum computer ever does come out these would uh a Quantum annoying take would be basically a stop",
    "start": "1761360",
    "end": "1768260"
  },
  {
    "text": "Gap uh between when quantum computers come out and when you have to uh change",
    "start": "1768260",
    "end": "1775700"
  },
  {
    "text": "algorithms to a post Quantum pick and uh for the case of opaque if uh because",
    "start": "1775700",
    "end": "1783500"
  },
  {
    "text": "it's fragile um as soon as uh quantum computers come out",
    "start": "1783500",
    "end": "1788960"
  },
  {
    "text": "um every single password can be",
    "start": "1788960",
    "end": "1794020"
  },
  {
    "text": "cracked on classical computers with gpus and stuff",
    "start": "1794020",
    "end": "1799760"
  },
  {
    "text": "uh C Pace being a balance pick uh you don't have pre-computation or secure",
    "start": "1799760",
    "end": "1805700"
  },
  {
    "text": "registration because there isn't any uh so the costs of",
    "start": "1805700",
    "end": "1812899"
  },
  {
    "text": "um BS speak versus opaque 3dh uh basically oh hey you can see green all",
    "start": "1812899",
    "end": "1820039"
  },
  {
    "text": "right so uh so green those are just the extra",
    "start": "1820039",
    "end": "1825140"
  },
  {
    "text": "operations so they're fairly similar in speeds",
    "start": "1825140",
    "end": "1830480"
  },
  {
    "text": "um basically every time you do a uh scalar Point multiplication um you then have to do a field invert",
    "start": "1830480",
    "end": "1838580"
  },
  {
    "text": "which is uh a little expensive but not as much as you know a scalar",
    "start": "1838580",
    "end": "1845539"
  },
  {
    "text": "Point multiplication but the nice thing is you can actually combine multiple of these field inverts into one that's uh",
    "start": "1845539",
    "end": "1854120"
  },
  {
    "text": "so if you're wondering why there were less eyes than scalar from",
    "start": "1854120",
    "end": "1860000"
  },
  {
    "text": "multiplication oh and I separated them from uh oprf",
    "start": "1860000",
    "end": "1866360"
  },
  {
    "text": "and and the uh key exchange uh",
    "start": "1866360",
    "end": "1871520"
  },
  {
    "text": "anyway so um if you are going to implement any take uh you should use an",
    "start": "1871520",
    "end": "1876860"
  },
  {
    "text": "API like this where you initialize all the information get the secret and",
    "start": "1876860",
    "end": "1882260"
  },
  {
    "text": "whatnot and then um return a message or maybe uh you're",
    "start": "1882260",
    "end": "1887960"
  },
  {
    "text": "supposed to be the one receiving the first message so there wouldn't be a message and then when you receive a",
    "start": "1887960",
    "end": "1893299"
  },
  {
    "text": "message you send it into a function that then Returns the next message if there",
    "start": "1893299",
    "end": "1899299"
  },
  {
    "text": "is a next message and a status the reason for this is I've seen a lot of",
    "start": "1899299",
    "end": "1905059"
  },
  {
    "text": "implementations of SRP 6A where they just say calculate a and calculate M1",
    "start": "1905059",
    "end": "1911779"
  },
  {
    "text": "and they just they're like oh the developer will know what that means so",
    "start": "1911779",
    "end": "1917620"
  },
  {
    "text": "this way it's very hard to um misuse the",
    "start": "1917620",
    "end": "1922940"
  },
  {
    "text": "API and then you would want to be able to get you know this secret stored uh",
    "start": "1922940",
    "end": "1928880"
  },
  {
    "text": "the server stored Secret for uh you know augmented picks and then",
    "start": "1928880",
    "end": "1935000"
  },
  {
    "text": "also if you're going to do um authentication and encryption with a",
    "start": "1935000",
    "end": "1941659"
  },
  {
    "text": "password you would want a API function that returns a key based on the password this",
    "start": "1941659",
    "end": "1949039"
  },
  {
    "text": "is so that you only run the password uh the password kdf wants and generate a",
    "start": "1949039",
    "end": "1955640"
  },
  {
    "text": "key for the pink and a key for uh encryption",
    "start": "1955640",
    "end": "1961059"
  },
  {
    "text": "so cheat sheet these are all the correct answers according to me",
    "start": "1961059",
    "end": "1968960"
  },
  {
    "text": "um so uh so BS speak Double Bs speak those are",
    "start": "1968960",
    "end": "1975440"
  },
  {
    "text": "actually algorithms that I came up with um",
    "start": "1975440",
    "end": "1980720"
  },
  {
    "text": "basically you know it's just hide the generator with uh hiding the salt and",
    "start": "1980720",
    "end": "1987020"
  },
  {
    "text": "you know noise KN and then noise uh KK well 3dh",
    "start": "1987020",
    "end": "1994519"
  },
  {
    "text": "and then uh use chip if you need the identity pick",
    "start": "1994519",
    "end": "2000240"
  },
  {
    "text": "so balance picks uh don't need key stretching um and then yes Crypt minimums uh are",
    "start": "2000539",
    "end": "2008679"
  },
  {
    "text": "there um I just remembered that I forgot to mention uh balanced picks and Wi-Fi so",
    "start": "2008679",
    "end": "2017700"
  },
  {
    "text": "the Wi-Fi Alliance they picked a pick that was actually known to be broken at",
    "start": "2017700",
    "end": "2023320"
  },
  {
    "text": "the time uh they that Peg is a balance take and then they actually store the",
    "start": "2023320",
    "end": "2030279"
  },
  {
    "text": "password on the access point and device instead of using a doubly augmented pick",
    "start": "2030279",
    "end": "2038518"
  },
  {
    "text": "um so uh agenda",
    "start": "2039519",
    "end": "2045279"
  },
  {
    "text": "I'm good okay so questions",
    "start": "2045279",
    "end": "2050520"
  },
  {
    "text": "I do have bonus slides oh and references uh but uh if there's if anyone has",
    "start": "2050560",
    "end": "2057940"
  },
  {
    "text": "questions",
    "start": "2057940",
    "end": "2060240"
  },
  {
    "text": "so you want bonus slides okay",
    "start": "2073300",
    "end": "2078720"
  },
  {
    "text": "all right so um",
    "start": "2078879",
    "end": "2082440"
  },
  {
    "text": "so the secure registration for BS speak uh the algorithm I created so uh",
    "start": "2084099",
    "end": "2091000"
  },
  {
    "text": "basically uh the server checks uh verifies that the so the entire top half of the algorithm",
    "start": "2091000",
    "end": "2099400"
  },
  {
    "text": "is yeah uh I have a gist for this on GitHub",
    "start": "2099400",
    "end": "2104680"
  },
  {
    "text": "but uh basically you know run through the the Pake and then this is uh at the",
    "start": "2104680",
    "end": "2110980"
  },
  {
    "text": "point where the server checks the client verifier it generates you know another",
    "start": "2110980",
    "end": "2116079"
  },
  {
    "text": "verifier a session key that session key encrypts reg and reg Max so reg is the",
    "start": "2116079",
    "end": "2123460"
  },
  {
    "text": "ephemeral private key that was used during registration and then reg Max is",
    "start": "2123460",
    "end": "2130300"
  },
  {
    "text": "um a Mac did I say Max Mac uh",
    "start": "2130300",
    "end": "2135820"
  },
  {
    "text": "a Mac of the public key reg so the server encrypts that with the session",
    "start": "2135820",
    "end": "2142300"
  },
  {
    "text": "sends that over then the client checks to see the service verifier is correct you know then it creates the session key",
    "start": "2142300",
    "end": "2149380"
  },
  {
    "text": "then it decrypts uh the private key during the farmworld private key during",
    "start": "2149380",
    "end": "2155020"
  },
  {
    "text": "registration and the Mac the Mac key oh",
    "start": "2155020",
    "end": "2161440"
  },
  {
    "text": "all right so the Mac Keys generated from the password so when you run the password kdf you",
    "start": "2161440",
    "end": "2167740"
  },
  {
    "text": "output a bunch of stuff and one of those things is the Mac key so the Mac key is",
    "start": "2167740",
    "end": "2174160"
  },
  {
    "text": "then used to assign the public key or not sign hash the public key uh you know",
    "start": "2174160",
    "end": "2181960"
  },
  {
    "text": "that so if that fails then that means that",
    "start": "2181960",
    "end": "2187180"
  },
  {
    "text": "um your man in the middle during registration and no longer",
    "start": "2187180",
    "end": "2192460"
  },
  {
    "text": "man being man in the middle so you can detect when that happened so uh bscrypt uh so",
    "start": "2192460",
    "end": "2199540"
  },
  {
    "text": "these are all the fun slides for my talk uh but first one info slide so um",
    "start": "2199540",
    "end": "2207400"
  },
  {
    "text": "uh so the way that it worked was uh so cash hard algorithms they use uh they",
    "start": "2207400",
    "end": "2213460"
  },
  {
    "text": "get their cash hardness from uh small random uh lookups and memory or Cache uh",
    "start": "2213460",
    "end": "2221320"
  },
  {
    "text": "so and then you do every other operation is ADD X or add xor so uh and I went with",
    "start": "2221320",
    "end": "2229900"
  },
  {
    "text": "two s boxes like that um so the interesting thing that I did with that is these s boxes are",
    "start": "2229900",
    "end": "2236440"
  },
  {
    "text": "overlapping so uh other algorithms that are cash hard uh the S boxes need to be",
    "start": "2236440",
    "end": "2244180"
  },
  {
    "text": "a nice binary number so do these but since they're overlapping you can get",
    "start": "2244180",
    "end": "2249640"
  },
  {
    "text": "whatever sizes you know you can get exotic sizes from",
    "start": "2249640",
    "end": "2255820"
  },
  {
    "text": "these s boxes so um this is uh this was a benchmark that I did on on my laptop",
    "start": "2255820",
    "end": "2261640"
  },
  {
    "text": "uh these settings are uh such that uh they're all the same uh for",
    "start": "2261640",
    "end": "2270400"
  },
  {
    "text": "uh a GPU attacker since b-crypt is the one where you don't have much leeway",
    "start": "2270400",
    "end": "2276640"
  },
  {
    "text": "because it's uh you know this was for cost nine you know and the",
    "start": "2276640",
    "end": "2282520"
  },
  {
    "text": "next one is like twice as hard or so um so as a an attacker uh all these",
    "start": "2282520",
    "end": "2290740"
  },
  {
    "text": "algorithms with the settings uh those are all considered the same to them they wouldn't care",
    "start": "2290740",
    "end": "2296800"
  },
  {
    "text": "but as a Defender you know you can spend four milliseconds on bscrypt or almost",
    "start": "2296800",
    "end": "2302920"
  },
  {
    "text": "800 milliseconds on pbkdf2 shot 250 sucks",
    "start": "2302920",
    "end": "2308520"
  },
  {
    "text": "um so this is the speeds at uh this is a",
    "start": "2309220",
    "end": "2315040"
  },
  {
    "text": "desktop computer that I wrote In The Benchmark on with",
    "start": "2315040",
    "end": "2321040"
  },
  {
    "text": "different number of threads um so this is for minimum settings",
    "start": "2321040",
    "end": "2329040"
  },
  {
    "text": "and it basically took one to two milliseconds which is really really fast",
    "start": "2329619",
    "end": "2334960"
  },
  {
    "text": "oh uh so um these are uh",
    "start": "2334960",
    "end": "2340660"
  },
  {
    "text": "equivalent speeds for cost 15. um and you can get these in under 100",
    "start": "2340660",
    "end": "2347500"
  },
  {
    "text": "milliseconds if you're familiar with bcrypt cost 15 is ridiculously high and",
    "start": "2347500",
    "end": "2353740"
  },
  {
    "text": "takes a very long time uh clamp scalar invert uh so you know you do some stuff and then but uh yep",
    "start": "2353740",
    "end": "2364140"
  },
  {
    "text": "oh okay it said 30 seconds all right thanks",
    "start": "2364900",
    "end": "2370380"
  },
  {
    "text": "[Applause] [Music]",
    "start": "2370380",
    "end": "2376929"
  },
  {
    "text": "[Music]",
    "start": "2380770",
    "end": "2383849"
  }
]