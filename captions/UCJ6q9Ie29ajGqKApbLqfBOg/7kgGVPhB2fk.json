[
  {
    "start": "0",
    "end": "139000"
  },
  {
    "text": "introducing a uh a pair of gentlemen to take you through a topic that I don't",
    "start": "1879",
    "end": "8800"
  },
  {
    "text": "actually understand so I'm going to learn more than all of you sitting here uh this is Patrick and Harris from",
    "start": "8800",
    "end": "14679"
  },
  {
    "text": "census uh Patrick is a computer security researcher uh building specialized IT",
    "start": "14679",
    "end": "20480"
  },
  {
    "text": "services for customers worldwide he is a doctor not that kind of doctor the kind",
    "start": "20480",
    "end": "25560"
  },
  {
    "text": "of doctor who knows stuff about computer science uh he is smarter than I am and",
    "start": "25560",
    "end": "31599"
  },
  {
    "text": "will ever be uh and he has brought along with him uh his intern who",
    "start": "31599",
    "end": "39200"
  },
  {
    "text": "uh is damn lucky to be an intern talking to black hat don't you think actually H",
    "start": "39200",
    "end": "45280"
  },
  {
    "text": "does m math I don't know how to do math so I",
    "start": "45280",
    "end": "51120"
  },
  {
    "text": "would encourage you all to pay close attention feel free to ask as many questions as you want uh and track them",
    "start": "51120",
    "end": "56359"
  },
  {
    "text": "down if you don't get a chance to ask questions during the show remember you can find them wandering around black hat",
    "start": "56359",
    "end": "62039"
  },
  {
    "text": "you can ask them questions then and also very very important fill out your speaker evaluation forms as a former",
    "start": "62039",
    "end": "67720"
  },
  {
    "text": "black hat speaker finding out that nobody filled out your evaluation form is the kind of thing that makes you",
    "start": "67720",
    "end": "73159"
  },
  {
    "text": "cry please fill out your forms thank you okay thank you very much for the",
    "start": "73159",
    "end": "78799"
  },
  {
    "text": "introduction and thank you everyone for being here I know there are some very interesting talks going in parallel so",
    "start": "78799",
    "end": "85119"
  },
  {
    "text": "thank you for being here okay so we are going to talk today about how we have EXP exploited the J Malo allocator and",
    "start": "85119",
    "end": "93119"
  },
  {
    "text": "specifically how we have used all these knowledge we gained from exploring J Malo and applied it to to the case of",
    "start": "93119",
    "end": "99880"
  },
  {
    "text": "Firefox which is basically the the most widely used",
    "start": "99880",
    "end": "105040"
  },
  {
    "text": "uh J Malo application okay so I'm patri sis or you",
    "start": "105040",
    "end": "110799"
  },
  {
    "text": "can call me Patrick for short uh I'm a researcher at sensus and uh I have",
    "start": "110799",
    "end": "115880"
  },
  {
    "text": "worked on the past on topics like Kel Heap exploitation as well as auditing uh",
    "start": "115880",
    "end": "120960"
  },
  {
    "text": "source code and binary code uh my name is Haron I'm an undergraduate student at",
    "start": "120960",
    "end": "126600"
  },
  {
    "text": "the electrical engineering department at the arota University of the salonique in Greece I'm currently working as an",
    "start": "126600",
    "end": "131959"
  },
  {
    "text": "internet census and I'm mostly interested in compilers static analysis hip exploitation",
    "start": "131959",
    "end": "137200"
  },
  {
    "text": "[Music] mathematics okay so that's that's a small outline of of our talk uh",
    "start": "137200",
    "end": "143080"
  },
  {
    "start": "139000",
    "end": "139000"
  },
  {
    "text": "initially we're going to give an introduction uh to to what J Malo is",
    "start": "143080",
    "end": "148120"
  },
  {
    "text": "because you probably never SC of it although you're probably using it without knowing it uh then we're going",
    "start": "148120",
    "end": "154239"
  },
  {
    "text": "to to go deep into the technical details of the allocator like the basic structures each algorithms and so on uh",
    "start": "154239",
    "end": "161480"
  },
  {
    "text": "then we're going to focus on exploitation strategies we have uh uh we have developed for for attacking J",
    "start": "161480",
    "end": "168440"
  },
  {
    "text": "Malo and exploitation primes you can reuse uh on attacking J maloc",
    "start": "168440",
    "end": "174760"
  },
  {
    "text": "applications um it is important to note here that J Malo is a is a bit Mas",
    "start": "174760",
    "end": "179840"
  },
  {
    "text": "allocator so techniques like uh unlinking and front unlinking are not used by by the allocator so you cannot",
    "start": "179840",
    "end": "187159"
  },
  {
    "text": "play tricks with pointers like you used to do in uh in D Malo for example uh we",
    "start": "187159",
    "end": "193040"
  },
  {
    "text": "gave you a right for primitive these are not applicable on zalog and then we're",
    "start": "193040",
    "end": "198360"
  },
  {
    "text": "going to focus on Firefox and give you an example of how we we have manipulated it Hep using a the techniques we we're",
    "start": "198360",
    "end": "204920"
  },
  {
    "text": "going to present uh on J Malo uh we are going to conclude with some our thoughts",
    "start": "204920",
    "end": "210360"
  },
  {
    "text": "on how these attack vectors we have discovered can be",
    "start": "210360",
    "end": "215719"
  },
  {
    "text": "mitigated so u j Malo uh you're probably using it but you don't know it so let's",
    "start": "217040",
    "end": "222720"
  },
  {
    "text": "see uh J Malo is a standard uh userland memory allocator used by lipc on FreeBSD",
    "start": "222720",
    "end": "228400"
  },
  {
    "text": "and nbsd um additionally G malog is the building allocator used in Mozilla Firefox so no matter what the operating",
    "start": "228400",
    "end": "234799"
  },
  {
    "text": "system that you're running uh Windows Linux or OSX uh if you're running Firefox then you're running uh you're",
    "start": "234799",
    "end": "240599"
  },
  {
    "text": "using Galo uh there's also stand loone version which you can download and compile and use it on your Linux system",
    "start": "240599",
    "end": "247000"
  },
  {
    "text": "um we have been told that uh Facebook uses G Malo to handle High load of its web services and as far as we know but",
    "start": "247000",
    "end": "253519"
  },
  {
    "text": "we're not U sure yet uh the defon capture the flag capture the flag is played on top of 3sd so you should guys",
    "start": "253519",
    "end": "261280"
  },
  {
    "text": "definitely stud so this is the list of the jalo",
    "start": "261280",
    "end": "266639"
  },
  {
    "start": "264000",
    "end": "264000"
  },
  {
    "text": "variants that we had a look at uh the latest FreeBSD and the Mozilla Firefox variant they are pretty much the same",
    "start": "266639",
    "end": "272919"
  },
  {
    "text": "you can tell that by looking at their source code uh the Standalone version and the Linux Port uh those two are also",
    "start": "272919",
    "end": "280000"
  },
  {
    "text": "very similar uh our experiments uh were performed on 32bit and 64-bit",
    "start": "280000",
    "end": "285479"
  },
  {
    "text": "architectures and mostly on Linux OBX and from BSD so uh why Z why zal was coded in the",
    "start": "285479",
    "end": "293840"
  },
  {
    "start": "291000",
    "end": "291000"
  },
  {
    "text": "first place uh fbsd was in need uh for a memory locator that would be S&P capable",
    "start": "293840",
    "end": "300039"
  },
  {
    "text": "and that would not freak out when several threads call Malo at the same time um to solve this problem G Malo",
    "start": "300039",
    "end": "307800"
  },
  {
    "text": "initializes a finite set of of Arenas and it actually load balances the Malo",
    "start": "307800",
    "end": "313759"
  },
  {
    "text": "requests coming for several threads on those uh this fixed set of Arenas an arena is nothing more than a simple data",
    "start": "313759",
    "end": "320199"
  },
  {
    "text": "structure used for bookkeeping information um so whenever a thread calls Malo uh G Malo assigns either a",
    "start": "320199",
    "end": "327960"
  },
  {
    "text": "fixed Arena to this uh thread or a different one every time Mal is called depends on the build configuration uh",
    "start": "327960",
    "end": "334479"
  },
  {
    "text": "there are three algorithms for performing this uh thread to Arena assignment uh namely uh trade ID housing",
    "start": "334479",
    "end": "341319"
  },
  {
    "text": "um an algorithm based on sudo random numbers and modular arithmetic and a",
    "start": "341319",
    "end": "346520"
  },
  {
    "text": "very simple round robbing technique so J Malo U understands that",
    "start": "346520",
    "end": "352520"
  },
  {
    "start": "350000",
    "end": "350000"
  },
  {
    "text": "minimal page utilization is not a problem anymore on Modern operating systems and computers uh you can buy a",
    "start": "352520",
    "end": "357560"
  },
  {
    "text": "few megabytes of Ram with a few bucks so this is not a problem uh jalo focuses on",
    "start": "357560",
    "end": "363000"
  },
  {
    "text": "performance and to do that um he it does it best to follow the principle of",
    "start": "363000",
    "end": "368280"
  },
  {
    "text": "locality which states that uh memory regions that are allocated together are usually uh used together as well uh and",
    "start": "368280",
    "end": "376000"
  },
  {
    "text": "to to achieve that uh it tries to um Place uh memo regions uh continuously in",
    "start": "376000",
    "end": "383199"
  },
  {
    "text": "memory okay so to go into a few more Tech technical details on on J Malo um",
    "start": "385800",
    "end": "392599"
  },
  {
    "start": "386000",
    "end": "386000"
  },
  {
    "text": "these are this is a summary of of the central Concepts used in the allocator so uh the basic building block of J Malo",
    "start": "392599",
    "end": "399759"
  },
  {
    "text": "is the chunk so all the available memories divided into chunks and these chunks are always of the same size uh",
    "start": "399759",
    "end": "406160"
  },
  {
    "text": "this size can be different ACR across the different flavors of J Malo but in in a in a specific flavor this this",
    "start": "406160",
    "end": "412919"
  },
  {
    "text": "chunk size is always the same now these chunks are used to store both the the allocators metadata that is the data",
    "start": "412919",
    "end": "419720"
  },
  {
    "text": "that are us for for managing the allocator and the user requested allocations which are called",
    "start": "419720",
    "end": "426479"
  },
  {
    "text": "regions in J maloc uh chunks are furtherly divided into runs and rs are",
    "start": "426479",
    "end": "432639"
  },
  {
    "text": "used to keep track of the free and used regions um specific sizes",
    "start": "432639",
    "end": "439080"
  },
  {
    "text": "um as I have mentioned regions are the item turn when when a developer calls Malo um and these are stored on the runs",
    "start": "439080",
    "end": "447560"
  },
  {
    "text": "now each run is also associated with a structure called The Bean which stores trees of three regions U of the specific",
    "start": "447560",
    "end": "454039"
  },
  {
    "text": "gr is associated with so um a r may have both used and free items and if you want",
    "start": "454039",
    "end": "460759"
  },
  {
    "text": "to locate if the allocator wants to locate the uh the free regions on aan it goes through the bean because the bean",
    "start": "460759",
    "end": "466599"
  },
  {
    "text": "has a tree that uh uh stores all the all the three regions on the Run Okay so that's U uh an image that",
    "start": "466599",
    "end": "475039"
  },
  {
    "start": "473000",
    "end": "473000"
  },
  {
    "text": "summarizes what we have talked about up to this point so you can see here two chunks chunk Z and Chun one these are",
    "start": "475039",
    "end": "481120"
  },
  {
    "text": "the same size uh each run has uh each sorry Chun has runs so run zero and run",
    "start": "481120",
    "end": "487199"
  },
  {
    "text": "one and this runs uh and have underlying Pages uh on and on the on these Pages",
    "start": "487199",
    "end": "494720"
  },
  {
    "text": "you have regions both free and used so with blue you can see a a used region",
    "start": "494720",
    "end": "500360"
  },
  {
    "text": "and with yellow a free region now here you can see this data structure called the bin which is basically used by the",
    "start": "500360",
    "end": "507400"
  },
  {
    "text": "allocator to help to help it LO at the three regions on the run so there is a tree that contains pointers to the three",
    "start": "507400",
    "end": "515120"
  },
  {
    "text": "regions on on on a specific run uh one other important thing to note",
    "start": "515120",
    "end": "520479"
  },
  {
    "text": "here is that uh every every single one of those uh J Malo data structures has a",
    "start": "520479",
    "end": "526720"
  },
  {
    "text": "has a header has a metadata uh structure that is placed in its beginning so in",
    "start": "526720",
    "end": "532800"
  },
  {
    "text": "the beginning of the chunk there is a header in the beginning of the Run there's a header uh and in the beginning",
    "start": "532800",
    "end": "538760"
  },
  {
    "text": "of the bin there's is header um regions themselves don't don't don't",
    "start": "538760",
    "end": "544320"
  },
  {
    "text": "have headers they're contigous in memory without metadata in",
    "start": "544320",
    "end": "549480"
  },
  {
    "text": "between okay so to to to go further uh into some more details um as I said the",
    "start": "549480",
    "end": "555240"
  },
  {
    "text": "Chun is the is the main data structure um and uh all available memories",
    "start": "555240",
    "end": "560720"
  },
  {
    "text": "conceptually divided into chunks and now this the size of the tun is always the same but it differs across across the",
    "start": "560720",
    "end": "567760"
  },
  {
    "text": "different J Malo flavors so for example on Firefox and on uh 3 BSD release you",
    "start": "567760",
    "end": "575079"
  },
  {
    "text": "have a chunk size of one megabyte while in the Standalone version of J Mal we have a chunk size of 4",
    "start": "575079",
    "end": "581800"
  },
  {
    "text": "megabytes and that's the that's the metadata structure of the chunk uh which",
    "start": "581800",
    "end": "587040"
  },
  {
    "start": "583000",
    "end": "583000"
  },
  {
    "text": "is as I as I told you it's placed in front of the Chunk in memory the important uh element to note here is uh",
    "start": "587040",
    "end": "594839"
  },
  {
    "text": "first the first element of the data structure is the arena a pointer to an arena and that's the arena that owns the",
    "start": "594839",
    "end": "602240"
  },
  {
    "text": "specific um okay some some detail that um is will",
    "start": "602240",
    "end": "608360"
  },
  {
    "text": "be useful to us when we go uh into more detail is that um in J Malo there is",
    "start": "608360",
    "end": "614200"
  },
  {
    "text": "this definition called maloc validate and if that is defined then uh there's a",
    "start": "614200",
    "end": "620519"
  },
  {
    "text": "global radic Tre is U is constructed which stores references to all chunks of",
    "start": "620519",
    "end": "625680"
  },
  {
    "text": "the of the system uh Firefox has this definition uh compiled by default",
    "start": "625680",
    "end": "631000"
  },
  {
    "text": "defined by default so uh the debugging tool we have uh we have",
    "start": "631000",
    "end": "637200"
  },
  {
    "text": "developed uses this radic to locate all the chunks of of the system now to go into into the the arena",
    "start": "637200",
    "end": "644399"
  },
  {
    "text": "data structure uh Arenas are are are basically the the structure used by J",
    "start": "644399",
    "end": "650360"
  },
  {
    "text": "Malo to hand s SMP systems and um and multi-threaded applications and",
    "start": "650360",
    "end": "656639"
  },
  {
    "text": "basically they manage the memory that is used by the chunks so an arena can Spar",
    "start": "656639",
    "end": "662560"
  },
  {
    "text": "more than one chunk uh and page but that depends actually on the chunk size which",
    "start": "662560",
    "end": "667680"
  },
  {
    "text": "as I show you differs ac across JL flavors and the page size which depends on the on the operating",
    "start": "667680",
    "end": "674519"
  },
  {
    "text": "system Arenas are used to mitigate loow conation problems um because when a",
    "start": "674519",
    "end": "680680"
  },
  {
    "text": "thread makes an allocation that allocation is serviced by specific Arena and the corresponding deallocation when",
    "start": "680680",
    "end": "687639"
  },
  {
    "text": "it happens happens also from the same Arena now the number of Arena of Arenas May differ across Jal flavor so for",
    "start": "687639",
    "end": "694279"
  },
  {
    "text": "example the Firefox version of uh J the version used on Firefox always has an",
    "start": "694279",
    "end": "699959"
  },
  {
    "text": "arena one Arena and that's hardcoded uh and 3 BSD has uh two times",
    "start": "699959",
    "end": "706680"
  },
  {
    "text": "the number of CPU cores uh number numbers of Arena and the Standalone version has four times the number of CPU",
    "start": "706680",
    "end": "713680"
  },
  {
    "text": "fores uh that's that's the arena data structure one important thing to note here is that there's an array of B",
    "start": "713680",
    "end": "721880"
  },
  {
    "text": "structures here that although initially has a size of one it grows dynamically",
    "start": "721880",
    "end": "728000"
  },
  {
    "text": "as R are created on on the J Malo",
    "start": "728000",
    "end": "732920"
  },
  {
    "text": "hip okay so that's that's a small output um from a de biking station so you can",
    "start": "737959",
    "end": "743959"
  },
  {
    "text": "see here that there's an array of that that stores references to Arenas and you",
    "start": "743959",
    "end": "749320"
  },
  {
    "text": "can see here that uh we print the first Arena which is this one and also the",
    "start": "749320",
    "end": "754600"
  },
  {
    "text": "number of Arenas which in this case is 16 because we're working on on the Standalone version of J Malo on a on on",
    "start": "754600",
    "end": "761959"
  },
  {
    "text": "a on a system with four CPU cores",
    "start": "761959",
    "end": "767600"
  },
  {
    "text": "um um chunks are divided in runs uh runs are actually uh simple containers for",
    "start": "768240",
    "end": "774680"
  },
  {
    "text": "ear user memory allocations um so um um",
    "start": "774680",
    "end": "779839"
  },
  {
    "text": "uh each rant has a size that is a multiple page size and due to this characteristic rants are also aligned in",
    "start": "779839",
    "end": "786639"
  },
  {
    "text": "memory addresses uh that are multip page size as",
    "start": "786639",
    "end": "791800"
  },
  {
    "text": "well as we have said uh RS contain end user memory allocations and they",
    "start": "791800",
    "end": "797639"
  },
  {
    "text": "actually keep track of the state of each allocation whether it is used or free one important characteristic is that",
    "start": "797639",
    "end": "804680"
  },
  {
    "text": "um contains regions of a specific size so there's no way you can see uh 32 by",
    "start": "804680",
    "end": "810399"
  },
  {
    "text": "allocation followed by 64 by allocation for example um in order to keep track of",
    "start": "810399",
    "end": "816120"
  },
  {
    "text": "the state of each region a run contains a special bit Vector called rexcore mask",
    "start": "816120",
    "end": "822760"
  },
  {
    "text": "uh when a bit is set in this uh bit mask it it indicates a m region that is free",
    "start": "822760",
    "end": "828760"
  },
  {
    "text": "and when a bit is sunet is in this mask indicates region that is in use as an",
    "start": "828760",
    "end": "835560"
  },
  {
    "text": "optimization G uses a special index in this are called reor minm which actually",
    "start": "835560",
    "end": "841279"
  },
  {
    "text": "points to the first region within the r that is free this is the how the arena header",
    "start": "841279",
    "end": "849519"
  },
  {
    "text": "the ran header looks like probably the most important field in this structure is the",
    "start": "849519",
    "end": "856880"
  },
  {
    "start": "851000",
    "end": "851000"
  },
  {
    "text": "r right there as well as the dynamically sized",
    "start": "856880",
    "end": "862040"
  },
  {
    "text": "array at the end of the struct which contains the vector we have been talking",
    "start": "862040",
    "end": "868040"
  },
  {
    "text": "about",
    "start": "868040",
    "end": "871040"
  },
  {
    "text": "uh in zal terminology uh are the end user memo allocations returned by Malo",
    "start": "873079",
    "end": "879040"
  },
  {
    "start": "876000",
    "end": "876000"
  },
  {
    "text": "uh those allocations are divided in three size classes uh small or medium depending on the G Malo used uh large",
    "start": "879040",
    "end": "886160"
  },
  {
    "text": "allocations and huge allocations small allocations us smaller than the page size uh large allocations are have a",
    "start": "886160",
    "end": "894120"
  },
  {
    "text": "size M multiple page size and smaller than the S size and huge allocations areal or bigger than S",
    "start": "894120",
    "end": "902279"
  },
  {
    "text": "side it's important to remember that uh small and medium regions are always",
    "start": "903279",
    "end": "909040"
  },
  {
    "start": "908000",
    "end": "908000"
  },
  {
    "text": "placed in their own private runs uh while large regions due to their size uh require uh a set of dedicated runs to be",
    "start": "909040",
    "end": "917160"
  },
  {
    "text": "serviced uh huge regions um occupy a set of chunks and they are uh inserted in a",
    "start": "917160",
    "end": "925199"
  },
  {
    "text": "globaled red black three which we can use to Traverse it using our favor debugger and find out all the huge",
    "start": "925199",
    "end": "932480"
  },
  {
    "text": "regions used in our program okay so uh beans are uh as as I",
    "start": "932480",
    "end": "941319"
  },
  {
    "text": "have already mentioned the the data structure that is used to to locate the pre regions on the RS so basically they",
    "start": "941319",
    "end": "947279"
  },
  {
    "text": "they're used as an organizational structure to keep metadata on the RS of J Malo and they organize them by size",
    "start": "947279",
    "end": "954920"
  },
  {
    "text": "class so for example for allocations of size two there's a dedicated bin for",
    "start": "954920",
    "end": "960040"
  },
  {
    "text": "allocations of size four there's a dedicate bin and so on U and also they",
    "start": "960040",
    "end": "965199"
  },
  {
    "text": "keep track of the of the regions on the bin which which of them are free and which of them are used a bin may be",
    "start": "965199",
    "end": "971519"
  },
  {
    "text": "associated with several runs but a run can only beated with a specific bin now if a beIN is associated with several",
    "start": "971519",
    "end": "977480"
  },
  {
    "text": "runs uh it has a tree that U manages all the different runs that are associated",
    "start": "977480",
    "end": "983759"
  },
  {
    "text": "with specific Bean uh now as as I mentioned each being has its own uh particular size class and",
    "start": "983759",
    "end": "992920"
  },
  {
    "text": "manage regions of this size class and this uh regions has ACC are accessed through the the the run that is",
    "start": "992920",
    "end": "1000000"
  },
  {
    "text": "associated with a specific Bean uh now each Bean has a pointer to the most recently used U run and this",
    "start": "1000000",
    "end": "1007680"
  },
  {
    "text": "pointer is called Uh current run and also has a tree of runs um with three",
    "start": "1007680",
    "end": "1013199"
  },
  {
    "text": "regions that's called run so let's say for example that a specific beam has a pointer to the most recently used",
    "start": "1013199",
    "end": "1019399"
  },
  {
    "text": "run and this run has no free regions so if an allocation is made for the specific size class uh then the be is",
    "start": "1019399",
    "end": "1027199"
  },
  {
    "text": "going to uh go through the uh the the tree of runs with three regions locate a",
    "start": "1027199",
    "end": "1033120"
  },
  {
    "text": "run that has a a free region uh return that to the user and replace the current",
    "start": "1033120",
    "end": "1039520"
  },
  {
    "text": "r with this one because that was the one most recently used uh okay so that's the data",
    "start": "1039520",
    "end": "1045280"
  },
  {
    "text": "structure of the bean uh probably the most important thing here is the this current run point that I have mentioned",
    "start": "1045280",
    "end": "1051360"
  },
  {
    "start": "1049000",
    "end": "1049000"
  },
  {
    "text": "and this is the three of runs uh that have three regions on them",
    "start": "1051360",
    "end": "1057600"
  },
  {
    "text": "um okay so so that's that's a small example to to make things clearer so you can see here three allocations of size",
    "start": "1057600",
    "end": "1064600"
  },
  {
    "text": "zero 8 and 16 uh one important thing to note here is that when an allocation of",
    "start": "1064600",
    "end": "1070600"
  },
  {
    "text": "size zero is requested from J Malo then this is serviced from the smallest",
    "start": "1070600",
    "end": "1076039"
  },
  {
    "text": "possible uh class size so in this case this size class is two bytes so you can",
    "start": "1076039",
    "end": "1082280"
  },
  {
    "text": "see here that U uh for the region size class two there has been created an",
    "start": "1082280",
    "end": "1088760"
  },
  {
    "text": "arena that has the current run pointer which is this one H now for the size",
    "start": "1088760",
    "end": "1095240"
  },
  {
    "text": "class of four there is no current run because there has been no request for size class of four uh then for size",
    "start": "1095240",
    "end": "1101919"
  },
  {
    "text": "Class 8 there is a current run because there has been a request for for such size class uh and the same for for size",
    "start": "1101919",
    "end": "1110000"
  },
  {
    "text": "class 16 because there's an allocation there's also a current run created uh",
    "start": "1110000",
    "end": "1115440"
  },
  {
    "text": "for for region size 32 there is no Associated U current run because uh",
    "start": "1115440",
    "end": "1120520"
  },
  {
    "text": "there has been no request for such size so no no run of this size has been created so uh I know this all has been",
    "start": "1120520",
    "end": "1128760"
  },
  {
    "text": "uh you know very detailed and probably you were not able to keep up so hopefully this this um uh uh this",
    "start": "1128760",
    "end": "1135760"
  },
  {
    "start": "1132000",
    "end": "1132000"
  },
  {
    "text": "picture summarizes everything so here we have uh the the runs right and each run",
    "start": "1135760",
    "end": "1141919"
  },
  {
    "text": "has a list of chunks which are these ones and each chunk has may have several",
    "start": "1141919",
    "end": "1149480"
  },
  {
    "text": "runs each run Also may have several pages right and each page has the",
    "start": "1149480",
    "end": "1154799"
  },
  {
    "text": "regions on them so a blue region is a region and a yellow one is a free region",
    "start": "1154799",
    "end": "1160000"
  },
  {
    "text": "now the beans are associated with the r as we with the arena yeah so with the",
    "start": "1160000",
    "end": "1165120"
  },
  {
    "text": "arena there is a different Beam for each different size class so 2 48 and so on",
    "start": "1165120",
    "end": "1171320"
  },
  {
    "text": "now this bin has a pointer to this current run and this points to to the to",
    "start": "1171320",
    "end": "1176520"
  },
  {
    "text": "the run that is be that has been most recently used so that that this one so",
    "start": "1176520",
    "end": "1182520"
  },
  {
    "text": "that hopefully summarizes everything up to this",
    "start": "1182520",
    "end": "1186559"
  },
  {
    "text": "point um to further illustrate how gal Works uh we have written down some",
    "start": "1187720",
    "end": "1193679"
  },
  {
    "start": "1193000",
    "end": "1193000"
  },
  {
    "text": "algorithms using sud code uh so this is the allocation algorithm uh when mod is",
    "start": "1193679",
    "end": "1198880"
  },
  {
    "text": "first called uh G Malo will call a function called Malo in it that will pass the environment variables and do",
    "start": "1198880",
    "end": "1204880"
  },
  {
    "text": "some bookkeeping uh then the request size is checked against the Chun size so",
    "start": "1204880",
    "end": "1210480"
  },
  {
    "text": "if the request size is larger than Chun size uh G Malo will call a function for",
    "start": "1210480",
    "end": "1216080"
  },
  {
    "text": "allocating a series of chunks um if it's not the case then jimal will call choose Arena a function",
    "start": "1216080",
    "end": "1223520"
  },
  {
    "text": "that implements one of the three available algs for picking an arena for this spefic",
    "start": "1223520",
    "end": "1229480"
  },
  {
    "text": "thread and then it checks uh the input size against the page size uh so if the",
    "start": "1229480",
    "end": "1235200"
  },
  {
    "text": "input size is larger larger than the page size then gal will call a function that will allocate a series of pages to",
    "start": "1235200",
    "end": "1241240"
  },
  {
    "text": "serve this allocation uh otherwise um the the appropriate bin for this",
    "start": "1241240",
    "end": "1246880"
  },
  {
    "text": "specific size class is looked up uh then uh Galo will locate the first round the",
    "start": "1246880",
    "end": "1252000"
  },
  {
    "text": "lowest uh run in memory that has at least one free region uh and then we'll Traverse each bit map to locate the",
    "start": "1252000",
    "end": "1258320"
  },
  {
    "text": "first uh region uh that is free and return to the user it's pretty simple",
    "start": "1258320",
    "end": "1264880"
  },
  {
    "text": "actually uh the delocation algorith is pretty much uh the same um when a user",
    "start": "1264880",
    "end": "1271360"
  },
  {
    "text": "calls free uh the pointer pass to free is uh checked if it is aligned at a at",
    "start": "1271360",
    "end": "1277400"
  },
  {
    "text": "an ESS that is a multip of the chunk size if this is the case then function is called to deallocate uh this chunk",
    "start": "1277400",
    "end": "1285000"
  },
  {
    "text": "and actually remove it from the global red black tree used by Galo uh otherwise",
    "start": "1285000",
    "end": "1292360"
  },
  {
    "text": "uh yeah otherwise u g will uh locate the chunk that contains uh the given",
    "start": "1292360",
    "end": "1298919"
  },
  {
    "text": "pointer and uh we use some special bookkeeping information in chunk headers uh uh to figure out if this allocation",
    "start": "1298919",
    "end": "1306559"
  },
  {
    "text": "is a large one if this is the case then uh Jal will call a function that will",
    "start": "1306559",
    "end": "1312120"
  },
  {
    "text": "deallocate a series of pages and just mark them in the chunk metadata as free um",
    "start": "1312120",
    "end": "1319279"
  },
  {
    "text": "if the allocation is small or medium uh the run for that contains the specific allocation is looked up and",
    "start": "1319279",
    "end": "1325919"
  },
  {
    "text": "then uh the the appropriate beat in the big Vector is set to",
    "start": "1325919",
    "end": "1332919"
  },
  {
    "text": "zero so now let's move on to uh more specific exploitation tactics uh unlike d m probably other",
    "start": "1334240",
    "end": "1342000"
  },
  {
    "text": "allocators gal doesn't use any link lists uh it uses red black trees and radic trees and of course as a side",
    "start": "1342000",
    "end": "1348320"
  },
  {
    "start": "1346000",
    "end": "1346000"
  },
  {
    "text": "effect there are no unlink on front link style codes in G Malo and this is",
    "start": "1348320",
    "end": "1353679"
  },
  {
    "text": "important because unlink and front link have been historically used as the number one target for exploit developers",
    "start": "1353679",
    "end": "1360080"
  },
  {
    "text": "uh so bummer we need to cover all possible",
    "start": "1360080",
    "end": "1365640"
  },
  {
    "text": "cases of data metadata correction so when you overflow a a memory region uh you will either overflow adjacent memory",
    "start": "1365640",
    "end": "1372120"
  },
  {
    "start": "1369000",
    "end": "1369000"
  },
  {
    "text": "application specific memory uh or probably a r header if the region that you overflow um borders a new real or",
    "start": "1372120",
    "end": "1381320"
  },
  {
    "text": "you either override a s header if the reg view overflow is the last region of",
    "start": "1381320",
    "end": "1386880"
  },
  {
    "text": "a previous chunk uh there's also the case of overwriting some special thread local that structures called magazines",
    "start": "1386880",
    "end": "1393799"
  },
  {
    "text": "uh but this is not covered in this presentation because J because Firefox doesn't make use of them but if you want",
    "start": "1393799",
    "end": "1399080"
  },
  {
    "text": "to have a look uh at our Frack articles you will find there some information on",
    "start": "1399080",
    "end": "1404840"
  },
  {
    "text": "this topic uh so um if an attacker has the ability to uh",
    "start": "1404840",
    "end": "1412760"
  },
  {
    "text": "leak arbitr memory from Target process then he can probably bypass any limitation and um do whatever he likes",
    "start": "1412760",
    "end": "1420080"
  },
  {
    "text": "uh but this is a strong requirement and we don't follow it in this presentation so we focus on techniques uh that uh",
    "start": "1420080",
    "end": "1427039"
  },
  {
    "text": "only corrupt uh very few uh very few bites at the beginning of each uh data",
    "start": "1427039",
    "end": "1434200"
  },
  {
    "text": "structure so here's the first uh technique it the adjacent memory override technique the main idea is",
    "start": "1435080",
    "end": "1440960"
  },
  {
    "text": "actually pretty simple it has been used for at least 20 or more probably years uh the attacker just prepares the Heap",
    "start": "1440960",
    "end": "1447919"
  },
  {
    "start": "1442000",
    "end": "1442000"
  },
  {
    "text": "so that uh the target the overflowing uh region and the victim uh region border",
    "start": "1447919",
    "end": "1453919"
  },
  {
    "text": "each other and it triggers the Overflow uh in in hope that he overwrites a",
    "start": "1453919",
    "end": "1459279"
  },
  {
    "text": "structure for example that contains a function pointer or anything",
    "start": "1459279",
    "end": "1464480"
  },
  {
    "text": "useful primary target candidates for this kind of attack are the Plus+ virtual table pointers if you're",
    "start": "1464480",
    "end": "1470279"
  },
  {
    "text": "targeting a c plus application uh or just normal structur that contain function pointers or",
    "start": "1470279",
    "end": "1476440"
  },
  {
    "text": "anything interesting uh a very interesting uh situation we came came across was the Le error handling code um",
    "start": "1476440",
    "end": "1484520"
  },
  {
    "text": "LNG during initialization calls a s jump a function that saves all registers in a",
    "start": "1484520",
    "end": "1490440"
  },
  {
    "text": "jump buffer and when it counters an aor condition it just um long jumps uh to",
    "start": "1490440",
    "end": "1496080"
  },
  {
    "text": "this Save State so if we somehow manage right this jump buff we have a total control of uh the target process but",
    "start": "1496080",
    "end": "1503399"
  },
  {
    "text": "okay you can use your brains and come up with a better idea uh it's all about bits and bites actually",
    "start": "1503399",
    "end": "1509880"
  },
  {
    "text": "right okay so moving on from uh adjacent region corruption to metadata corruption",
    "start": "1510320",
    "end": "1516440"
  },
  {
    "text": "so the first thing we we investigated with the corruption of of um of the run's metad dat so basically the idea is",
    "start": "1516440",
    "end": "1524480"
  },
  {
    "text": "that you have a region that borders a new run and you trigger the Overflow",
    "start": "1524480",
    "end": "1529720"
  },
  {
    "text": "condition on that last uh region of the run and you overflow the the metadata",
    "start": "1529720",
    "end": "1535600"
  },
  {
    "text": "that on the new Run's beginning so basically we let's assume that we have a",
    "start": "1535600",
    "end": "1541200"
  },
  {
    "text": "an overflow region a region that we can overflow a that we can trigger an",
    "start": "1541200",
    "end": "1547039"
  },
  {
    "text": "overflow bug on that belongs to run a and then you have a victim run B that",
    "start": "1547039",
    "end": "1552720"
  },
  {
    "text": "starts immediately after R A so basically we we studed what can happen",
    "start": "1552720",
    "end": "1559360"
  },
  {
    "text": "when when we cor up the metadata of of the of the second uh of the second run",
    "start": "1559360",
    "end": "1566559"
  },
  {
    "text": "so we decided after after we we have investigated to to mess with this Rex",
    "start": "1566559",
    "end": "1571760"
  },
  {
    "text": "Min Elm um element of the of the metadata so basically by corrupting that",
    "start": "1571760",
    "end": "1577039"
  },
  {
    "text": "we managed to make the next allocation that is serviced by the to return an a",
    "start": "1577039",
    "end": "1584000"
  },
  {
    "text": "region that was already used from the previous uh run run a",
    "start": "1584000",
    "end": "1589039"
  },
  {
    "text": "uh we we haven't encountered a name for this kind of attacks before so we are",
    "start": "1589039",
    "end": "1594600"
  },
  {
    "text": "using the force used uh exploitation PR name um okay so let's let's take a look",
    "start": "1594600",
    "end": "1601960"
  },
  {
    "text": "at the Run header again so that's that's the Run header and our goal is to corrupt this re minel element here of",
    "start": "1601960",
    "end": "1609799"
  },
  {
    "text": "course you may you may wonder why we haven't corrupted this bin um pointer here where we we by investigating we we",
    "start": "1609799",
    "end": "1617520"
  },
  {
    "text": "found out that um Sorry by investigating we found out that by corrupting this bin",
    "start": "1617520",
    "end": "1623520"
  },
  {
    "text": "pointer uh this bin pointer is only used during the allocations and furthermore it requires a lot of control over the",
    "start": "1623520",
    "end": "1630360"
  },
  {
    "start": "1628000",
    "end": "1628000"
  },
  {
    "text": "target applications memory in order to be able to to manipulated to gain uh",
    "start": "1630360",
    "end": "1635720"
  },
  {
    "text": "code execution so we decided to go for something simpler so let's let's see",
    "start": "1635720",
    "end": "1640760"
  },
  {
    "text": "what we can do so what what do we gain if we overwrite this Rex Min element so",
    "start": "1640760",
    "end": "1646600"
  },
  {
    "text": "basically we can make remember that Rex minel is an index to this bit mask that",
    "start": "1646600",
    "end": "1651880"
  },
  {
    "text": "help us find the the three regions on the run so by overriding with a specific",
    "start": "1651880",
    "end": "1658399"
  },
  {
    "text": "value the minus value which is this in HEX we are able to make um the the bit",
    "start": "1658399",
    "end": "1665039"
  },
  {
    "text": "mask point back to the Rex me element itself so that's that's the code of J",
    "start": "1665039",
    "end": "1671640"
  },
  {
    "text": "Malo that is responsible for making allocations so as you can see here uh",
    "start": "1671640",
    "end": "1677200"
  },
  {
    "text": "since we control this x Elm element we also control I and since we control I we",
    "start": "1677200",
    "end": "1682840"
  },
  {
    "text": "also control mask then this this arithmetic happen that happens here",
    "start": "1682840",
    "end": "1688080"
  },
  {
    "text": "basically help is done by J maluk to locate the next available U three region",
    "start": "1688080",
    "end": "1694279"
  },
  {
    "text": "on the run but since we control um this element here we are able to make it a",
    "start": "1694279",
    "end": "1702640"
  },
  {
    "text": "return a region that is basically 63 uh slots backwards but this obviously",
    "start": "1702640",
    "end": "1708279"
  },
  {
    "text": "depends on the on the size of the region that the specific run is a is is handling uh so basically for small or",
    "start": "1708279",
    "end": "1715399"
  },
  {
    "text": "medium beans um we have found out that this soft set leads points to somewhere",
    "start": "1715399",
    "end": "1720960"
  },
  {
    "text": "in the previous run so basically you you prepare the Hep and you place some",
    "start": "1720960",
    "end": "1726200"
  },
  {
    "text": "structure that contains let's say function pointers or some something else interesting on on the previous run you",
    "start": "1726200",
    "end": "1732240"
  },
  {
    "text": "trigger the Overflow on this run on its last element you corrupt the metadata header of the next run and you make it",
    "start": "1732240",
    "end": "1739000"
  },
  {
    "text": "uh service the next allocation from the previous run that you",
    "start": "1739000",
    "end": "1743840"
  },
  {
    "text": "control um okay so this this this slide basically um says why why we haven't",
    "start": "1744360",
    "end": "1750559"
  },
  {
    "text": "corrupted the Bing pointer and the reason that it's only used during the allocations and in even if we decide to",
    "start": "1750559",
    "end": "1757320"
  },
  {
    "text": "go this way we we found out that it requires a great control over the DED applications memory content so that's",
    "start": "1757320",
    "end": "1763760"
  },
  {
    "text": "that's a lot of work when we have an easier way to attack the application",
    "start": "1763760",
    "end": "1770039"
  },
  {
    "text": "so now let's move on to Chun header corruption uh the idea is the following um we you just have to um Force two",
    "start": "1770760",
    "end": "1777480"
  },
  {
    "text": "chunks border each other which is common case and then trigger an overflow on the",
    "start": "1777480",
    "end": "1782960"
  },
  {
    "text": "last region of Chunk a and override uh the second chunks Arena pointer and then",
    "start": "1782960",
    "end": "1789080"
  },
  {
    "text": "make it point to an existing Target Arena so you might be wondering uh how are we going to find out that Target",
    "start": "1789080",
    "end": "1795799"
  },
  {
    "text": "Arena where exactly is this arena in memory well uh the the first Arena of each",
    "start": "1795799",
    "end": "1801159"
  },
  {
    "text": "program is actually initialized at the very beginning of the program so it usually lies somewhere uh few bytes",
    "start": "1801159",
    "end": "1809440"
  },
  {
    "text": "after the BSS section of the target process so you can even Brute Force its location um so bring any region in B uh",
    "start": "1809440",
    "end": "1817480"
  },
  {
    "text": "will now release a region from a calling Malo for the same size class",
    "start": "1817480",
    "end": "1823120"
  },
  {
    "text": "will return a region from Chun a that is already allocated and used by the program",
    "start": "1823120",
    "end": "1828600"
  },
  {
    "text": "this result is very similar to the attack that P CL described in the previous",
    "start": "1828600",
    "end": "1833960"
  },
  {
    "text": "slides so here's the uh the chank header as you can see uh Thea",
    "start": "1833960",
    "end": "1839880"
  },
  {
    "text": "pointer is the very first element of this structure so you can easily reach it and overwrite",
    "start": "1839880",
    "end": "1847200"
  },
  {
    "text": "it well of course you can make this Arena pointer point to a fake Arena",
    "start": "1847200",
    "end": "1852320"
  },
  {
    "text": "constructed by you uh this is awesome this can result in a total control of allocation in the",
    "start": "1852320",
    "end": "1858440"
  },
  {
    "text": "in the Target memory but unfortunately it requires u a lot of control on the target process and it's very interesting",
    "start": "1858440",
    "end": "1865399"
  },
  {
    "text": "uh when you can leak memory uh from the target",
    "start": "1865399",
    "end": "1870158"
  },
  {
    "text": "process okay so let's move on to our case studies so when we when we started",
    "start": "1872279",
    "end": "1877519"
  },
  {
    "text": "uh looking at Firefox we decided to to work on the OSX platform so uh of course",
    "start": "1877519",
    "end": "1884639"
  },
  {
    "start": "1881000",
    "end": "1881000"
  },
  {
    "text": "we were using uh GTB to to debug Firefox but we have found out that Apple's GDB",
    "start": "1884639",
    "end": "1890519"
  },
  {
    "text": "is based on the 6.x GDB Tre which has no pyth python scripting support and we",
    "start": "1890519",
    "end": "1896000"
  },
  {
    "text": "really needed python scripting because that that allowed us a lot more flexibility in in coding uh the the",
    "start": "1896000",
    "end": "1902440"
  },
  {
    "text": "development in coding the the exploit development tool so basically we decided",
    "start": "1902440",
    "end": "1907880"
  },
  {
    "text": "to take a newer GDB snapshot and compile it on on Max uh and new RGB uh snapshot have",
    "start": "1907880",
    "end": "1915559"
  },
  {
    "text": "support for the ma binary but the but this GTB version cannot load fat binary",
    "start": "1915559",
    "end": "1920799"
  },
  {
    "text": "basically we we use the Lipo uh utility provided by to trim down the fat",
    "start": "1920799",
    "end": "1926279"
  },
  {
    "text": "binaries to their 64bit uh versions so if you don't know a fat binary is",
    "start": "1926279",
    "end": "1931559"
  },
  {
    "text": "basically a binary that has support for both uh 32bit and 64bit macro uh",
    "start": "1931559",
    "end": "1938080"
  },
  {
    "text": "formats and by using this Li utility you just strip down you just strip away all",
    "start": "1938080",
    "end": "1943279"
  },
  {
    "text": "the 32bit um uh parts of the of the binary and leave the four bits of the",
    "start": "1943279",
    "end": "1949480"
  },
  {
    "text": "binary okay but Firefox dot has is a directory that has a lot of binaries in it so we constructed this we we coded",
    "start": "1949480",
    "end": "1956840"
  },
  {
    "text": "lip of theb backwalk python script that goes through recursively this whole directory and strips all binaries before",
    "start": "1956840",
    "end": "1963120"
  },
  {
    "text": "you do that you use the fet symbols um utility provided by Mozilla to download",
    "start": "1963120",
    "end": "1968639"
  },
  {
    "text": "all the debugging symbols to allow you to have symbols during debugging which is very useful so this basically goes",
    "start": "1968639",
    "end": "1974720"
  },
  {
    "text": "through all this I have just described so you have Firefox 3 2.0.1 up you you",
    "start": "1974720",
    "end": "1981440"
  },
  {
    "text": "uh run fetch symbols on this directory which fetches debugging symbols from Milla uh and then you run the Lio backw",
    "start": "1981440",
    "end": "1989639"
  },
  {
    "text": "utility on this directory which strips all binaries uh to the 64bit uh versions",
    "start": "1989639",
    "end": "1996880"
  },
  {
    "text": "and then you attach this ggdb which basically um uh the custom compil GTB",
    "start": "1996880",
    "end": "2002720"
  },
  {
    "text": "version the newer snapshot of GTB that's is able to load uh Maco 64 binaries and",
    "start": "2002720",
    "end": "2008519"
  },
  {
    "text": "also have has python scripting support and attach fire and attach it to Firefox",
    "start": "2008519",
    "end": "2013919"
  },
  {
    "text": "and then you're able Tob it and and have uh python scripting support so why do we",
    "start": "2013919",
    "end": "2019559"
  },
  {
    "text": "need python Script support we needed it to develop this utility called mask J maloc that we basically included in it",
    "start": "2019559",
    "end": "2026960"
  },
  {
    "text": "all all functionality we needed during exploit development U while we we tried to exploit J Malo bugs so it it gives",
    "start": "2026960",
    "end": "2035840"
  },
  {
    "start": "2028000",
    "end": "2028000"
  },
  {
    "text": "you commands like J chunks dumps all chunks all arenas runs beans all the",
    "start": "2035840",
    "end": "2041600"
  },
  {
    "text": "regions of a given SI size class and gives you a preview of their Contex which is very useful as we will see it",
    "start": "2041600",
    "end": "2047720"
  },
  {
    "text": "also gives you search functionality so you're able to search all the Heap of the of a j Mal application for a",
    "start": "2047720",
    "end": "2053040"
  },
  {
    "text": "specific value which is very helpful in in exploit development and that's that's the GDB version we were using for all",
    "start": "2053040",
    "end": "2061398"
  },
  {
    "text": "this so when exploiting uh Firefox uh we need to somehow create a predictable",
    "start": "2062320",
    "end": "2068200"
  },
  {
    "text": "arrangement in the Hep but unfortunately uncertainty is the enemy of all",
    "start": "2068200",
    "end": "2073440"
  },
  {
    "start": "2071000",
    "end": "2071000"
  },
  {
    "text": "attackers uh so in order to create this predictable Arrangement uh we use jav",
    "start": "2073440",
    "end": "2079358"
  },
  {
    "text": "JavaScript and HTML of course you can use any tool you like for example BMP files PNG files SVG or anything uh it's",
    "start": "2079359",
    "end": "2087118"
  },
  {
    "text": "very important that um during uh hip spraying uh we trigger the garbage collector so that the M regions uh that",
    "start": "2087119",
    "end": "2095118"
  },
  {
    "text": "we free using JavaScript are actually physic Ally freed uh from the hip uh the",
    "start": "2095119",
    "end": "2100680"
  },
  {
    "text": "debing tools we used during the development were very simple tools GDB and python mostly so now let's move on",
    "start": "2100680",
    "end": "2107000"
  },
  {
    "text": "to our",
    "start": "2107000",
    "end": "2109280"
  },
  {
    "text": "demo okay we have created a simple set script that fires up Firefox sleeps for",
    "start": "2117280",
    "end": "2122440"
  },
  {
    "text": "about 4 seconds and then fires up GDB to attach to the running instance on Firefox",
    "start": "2122440",
    "end": "2129640"
  },
  {
    "text": "uh this is the GDB need file used by GTB when it starts up uh the most important line is this",
    "start": "2134640",
    "end": "2140920"
  },
  {
    "text": "one uh where we load our debing tool in cdb and then we set two break points in",
    "start": "2140920",
    "end": "2147680"
  },
  {
    "text": "some general math functions uh which we call in our JavaScript code to trigger the break",
    "start": "2147680",
    "end": "2155039"
  },
  {
    "text": "points",
    "start": "2156640",
    "end": "2159640"
  },
  {
    "text": "so here's the HTML file that we're going to load in Firefox uh we have implemented a function called J Malo",
    "start": "2163720",
    "end": "2169400"
  },
  {
    "text": "spray it requires to input arguments uh the number of blocks to allocate in the hip and the size of each block we first",
    "start": "2169400",
    "end": "2177240"
  },
  {
    "text": "divide the input size by two uh to take into account the fact that uh jav the",
    "start": "2177240",
    "end": "2182599"
  },
  {
    "text": "JavaScript interpreter uses uni code strings we then create two string",
    "start": "2182599",
    "end": "2188359"
  },
  {
    "text": "constants the first is called marker and it contains the dead beef uh string we use this string to locate our our blocks",
    "start": "2188359",
    "end": "2196640"
  },
  {
    "text": "in memory easily using our debugger but you can place anything you like and the actual",
    "start": "2196640",
    "end": "2204680"
  },
  {
    "text": "content is this better better okay",
    "start": "2213359",
    "end": "2219119"
  },
  {
    "text": "uh okay so then uh we just uh let me use the point there uh okay uh then we",
    "start": "2219119",
    "end": "2226359"
  },
  {
    "text": "increase uh the the size of well I can't see okay the size of uh of the variable",
    "start": "2226359",
    "end": "2233720"
  },
  {
    "text": "named content and this is where it gets interesting uh we iterate through the",
    "start": "2233720",
    "end": "2239960"
  },
  {
    "text": "number of blocks and actually create uh create this",
    "start": "2239960",
    "end": "2246520"
  },
  {
    "text": "block okay okay okay and then we create each block",
    "start": "2246520",
    "end": "2252640"
  },
  {
    "text": "by concatenating the marker the content and the padding now uh padding is is a",
    "start": "2252640",
    "end": "2258079"
  },
  {
    "text": "random string uh we use the padding uh to bypass some anti-ip spraying",
    "start": "2258079",
    "end": "2263520"
  },
  {
    "text": "protection used by Firefox uh when you uh allocate the same string again again",
    "start": "2263520",
    "end": "2268880"
  },
  {
    "text": "in uh JavaScript uh Firefox will end up allocating only one instance of that string and then use references back to",
    "start": "2268880",
    "end": "2274960"
  },
  {
    "text": "it uh so what we do is actually insert a pounding in our string uh to to uh to",
    "start": "2274960",
    "end": "2281480"
  },
  {
    "text": "avoid this mechanism um and last but not least uh we insert that uh that block in",
    "start": "2281480",
    "end": "2289040"
  },
  {
    "text": "an array of blocks and we call substr this way okay this looks strange but uh it has to do",
    "start": "2289040",
    "end": "2296119"
  },
  {
    "text": "with the way uh the JavaScript interpreter uh represents strings internally uh this called to substr will",
    "start": "2296119",
    "end": "2302160"
  },
  {
    "text": "actually Force the JavaScript interpreter to flatten the string into one contigous memo region",
    "start": "2302160",
    "end": "2309440"
  },
  {
    "text": "uh we then trigger the uh the first break point by by calling the this function uh as",
    "start": "2310720",
    "end": "2317160"
  },
  {
    "text": "seen uh and then we deallocate every other block by calling the distractor",
    "start": "2317160",
    "end": "2324200"
  },
  {
    "text": "for for uh the string but in fact this this call to this call to the delete",
    "start": "2324200",
    "end": "2330359"
  },
  {
    "text": "function doesn't physically remove uh the region from the hip uh so to do that we need to trigger the garbage collector",
    "start": "2330359",
    "end": "2336920"
  },
  {
    "text": "and this is what this function",
    "start": "2336920",
    "end": "2340040"
  },
  {
    "text": "does what we do now is what we have done now is that we have created a set of holes in the hip and then we repeat the",
    "start": "2343119",
    "end": "2350720"
  },
  {
    "text": "same process again but now uh we we we spray the hip",
    "start": "2350720",
    "end": "2356760"
  },
  {
    "text": "again but now uh the the new regions uh contain the pattern Cafe",
    "start": "2356760",
    "end": "2363119"
  },
  {
    "text": "babe where is it I've skipped it okay",
    "start": "2363119",
    "end": "2369359"
  },
  {
    "text": "okay we use the CF babe uh",
    "start": "2369960",
    "end": "2374560"
  },
  {
    "text": "pattern and then we trigger the uh the second break point if our theory is correct then we will see um dead beefs",
    "start": "2375160",
    "end": "2383280"
  },
  {
    "text": "and C babes alternating in the",
    "start": "2383280",
    "end": "2386880"
  },
  {
    "text": "Heap so we fire up Firefox and we're wait waiting for the GDB to attach to",
    "start": "2391920",
    "end": "2397040"
  },
  {
    "text": "the",
    "start": "2397040",
    "end": "2399319"
  },
  {
    "text": "process okay yeah okay you have to wait for a while",
    "start": "2402119",
    "end": "2408280"
  },
  {
    "text": "uh people familiar with uh Firefox exploitation know that uh the lib Zoo library of Firefox contains uh several",
    "start": "2408280",
    "end": "2415720"
  },
  {
    "text": "debugging symbols and it takes a little time to",
    "start": "2415720",
    "end": "2419880"
  },
  {
    "text": "load",
    "start": "2426319",
    "end": "2429319"
  },
  {
    "text": "okay so our break points are",
    "start": "2432680",
    "end": "2435960"
  },
  {
    "text": "set and we're ready to load the XML",
    "start": "2447240",
    "end": "2451880"
  },
  {
    "text": "file so the first break point has been hit let's see now",
    "start": "2453760",
    "end": "2459240"
  },
  {
    "text": "this is the the help message of our uh deing Tool uh we're going to use uh G",
    "start": "2461760",
    "end": "2466920"
  },
  {
    "text": "runs the the G runs command to enumerate all runs all active",
    "start": "2466920",
    "end": "2472839"
  },
  {
    "text": "runs in the hip it takes a while because uh our",
    "start": "2472839",
    "end": "2478960"
  },
  {
    "text": "divining tool has to uh par all those uh bookkeeping information from memory and",
    "start": "2478960",
    "end": "2485520"
  },
  {
    "text": "create a special set of uh",
    "start": "2485520",
    "end": "2489839"
  },
  {
    "text": "classes uh there are several commands in our tool you can use our tool to search a specific hex string in memory uh list",
    "start": "2490599",
    "end": "2497720"
  },
  {
    "text": "all chunks uh you can do anything you like when it comes to gmal",
    "start": "2497720",
    "end": "2504800"
  },
  {
    "text": "exploitation it takes a while okay so uh our exploit targets uh the",
    "start": "2511000",
    "end": "2518200"
  },
  {
    "text": "512 uh run as we can see this is the address of this",
    "start": "2518200",
    "end": "2526040"
  },
  {
    "text": "run and we're now going to list all uh regions that have this specific",
    "start": "2529280",
    "end": "2535280"
  },
  {
    "text": "size oops see regs",
    "start": "2535280",
    "end": "2541119"
  },
  {
    "text": "okay so as you can see uh the first hip spring resulted in",
    "start": "2541119",
    "end": "2547160"
  },
  {
    "text": "several of those allocations containing our marker uh the first marker called",
    "start": "2547160",
    "end": "2552240"
  },
  {
    "text": "Dead beef okay so the columns here so the First Column is the index of the region the second column is whether it",
    "start": "2552240",
    "end": "2559000"
  },
  {
    "text": "is used or not uh the third region is the actual address of the region and the the final column is a four by preview of",
    "start": "2559000",
    "end": "2567040"
  },
  {
    "text": "the contents of the region okay so we at",
    "start": "2567040",
    "end": "2572520"
  },
  {
    "text": "continue one minute okay",
    "start": "2572520",
    "end": "2579119"
  },
  {
    "text": "okay we have now hit the second breakpoint uh but we have to uh pass the memory structures",
    "start": "2584400",
    "end": "2591040"
  },
  {
    "text": "again uh because the Hep layout has changed the bit and our deing tool CES",
    "start": "2591040",
    "end": "2596240"
  },
  {
    "text": "the previous results so we need to FL them from memory and repass the whole structure we do this casing because we",
    "start": "2596240",
    "end": "2603240"
  },
  {
    "text": "uh because it it allows the tool to run faster when you're in between mean uh uh",
    "start": "2603240",
    "end": "2609280"
  },
  {
    "text": "when you're during the exploit development and you are sure that the memory layout has not changed so instead",
    "start": "2609280",
    "end": "2614559"
  },
  {
    "text": "of uh every time at each command reparsing everything it just castes it the first time you run a command and",
    "start": "2614559",
    "end": "2620920"
  },
  {
    "text": "then it goes through these structures it has cast to make to make it run faster",
    "start": "2620920",
    "end": "2626079"
  },
  {
    "text": "but since now we know that the memory layout has changed we run J part to reparse the the metadata structure J and",
    "start": "2626079",
    "end": "2633160"
  },
  {
    "text": "then we leas the runs again okay so this is the uh 512",
    "start": "2633160",
    "end": "2642400"
  },
  {
    "text": "run and this is uh the previous value that we saw earlier uh as you can",
    "start": "2642400",
    "end": "2648720"
  },
  {
    "text": "see the 512 run hasn't Chang changed it's the",
    "start": "2648720",
    "end": "2654359"
  },
  {
    "text": "same so let's list again uh all regions that have this specific",
    "start": "2654359",
    "end": "2660200"
  },
  {
    "text": "size yeah and this is what we call Beauty you can see uh the CF babe and",
    "start": "2663160",
    "end": "2668800"
  },
  {
    "text": "dead beef pattern",
    "start": "2668800",
    "end": "2671720"
  },
  {
    "text": "atting did you like it",
    "start": "2676400",
    "end": "2681920"
  },
  {
    "text": "okay okay so this slides basically explain what Harris has been talking",
    "start": "2685079",
    "end": "2691079"
  },
  {
    "text": "about okay so we have we have another uh small demo to to go through um um in",
    "start": "2691400",
    "end": "2698319"
  },
  {
    "text": "order to to work with a real exploit we decided to use this integer overflow in lib PNG which is basically uh when limp",
    "start": "2698319",
    "end": "2706000"
  },
  {
    "start": "2702000",
    "end": "2702000"
  },
  {
    "text": "tries to decompress a compressed PNG file and that leads that there is a bug",
    "start": "2706000",
    "end": "2711040"
  },
  {
    "text": "in there that I will explain in a second that leads to a to a hip allocation that is actually smaller than the one",
    "start": "2711040",
    "end": "2717079"
  },
  {
    "text": "expected and that subsequently has a mem copy that does a uh a heip buffer",
    "start": "2717079",
    "end": "2723000"
  },
  {
    "text": "overflow now the vulnerable uh the vulnerable Firefox version is 10 0.1",
    "start": "2723000",
    "end": "2728040"
  },
  {
    "text": "which contains uh the vulnerab version",
    "start": "2728040",
    "end": "2733200"
  },
  {
    "text": "1.246 okay so that's uh some code from from L PNG that has the bug uh",
    "start": "2733200",
    "end": "2741599"
  },
  {
    "text": "so okay so here is the vulnerable maloc call uh we control prefix size and",
    "start": "2743559",
    "end": "2749920"
  },
  {
    "text": "expanded size through the uh pnz file and we can make this overflow and by",
    "start": "2749920",
    "end": "2755480"
  },
  {
    "start": "2754000",
    "end": "2754000"
  },
  {
    "text": "overflowing it we control the the return uh size uh that sorry we control the",
    "start": "2755480",
    "end": "2761680"
  },
  {
    "text": "size that is actually allocated by Malo and therefore we control not the exact uh address that",
    "start": "2761680",
    "end": "2769000"
  },
  {
    "text": "this region has but we control which R this region is allocated on based on its",
    "start": "2769000",
    "end": "2774319"
  },
  {
    "text": "size and then we have this M Copy call here that basically overflows into this",
    "start": "2774319",
    "end": "2780200"
  },
  {
    "text": "text uh variable allocated here and it copies data from the PNG file which we",
    "start": "2780200",
    "end": "2787240"
  },
  {
    "text": "control h up to prefix size bytes which we also control through the PNG",
    "start": "2787240",
    "end": "2795520"
  },
  {
    "text": "file okay so how do we exploit this we decided I mean you can also use metadata",
    "start": "2796680",
    "end": "2801880"
  },
  {
    "text": "corruption but you will see it's much easier to do adjacent region corruption in this case so basically the integer",
    "start": "2801880",
    "end": "2807319"
  },
  {
    "text": "overflow as I have already showed you allows us to control the size of the",
    "start": "2807319",
    "end": "2812640"
  },
  {
    "text": "allocation so we select an appropriate size class to attack for this example we selected the 10,24 uh size class so the",
    "start": "2812640",
    "end": "2821760"
  },
  {
    "text": "the first step is to spray the Run of this size class with an appropriate data structure that has interesting things in",
    "start": "2821760",
    "end": "2827319"
  },
  {
    "text": "it like function pointers uh you can select uh objects from Firefox to do that for this simple example we just use",
    "start": "2827319",
    "end": "2834000"
  },
  {
    "text": "the dead beef string to to simplic to simplify things and then we free some of",
    "start": "2834000",
    "end": "2840160"
  },
  {
    "text": "these allocations uh we trigger the garbage collector to physically free them on on the J Malo Hep and this",
    "start": "2840160",
    "end": "2847040"
  },
  {
    "text": "create slots uh gaps of three slots on the run and then we load the crafted PNG",
    "start": "2847040",
    "end": "2853000"
  },
  {
    "text": "file uh which fill those gaps and triggers the Overflow which overflows Into the Dead beef um uh structure which",
    "start": "2853000",
    "end": "2861960"
  },
  {
    "text": "is is just a string for this example but is in reality it could be a structure with function pointers so um since we",
    "start": "2861960",
    "end": "2869720"
  },
  {
    "text": "develop this exploit on um Linux we will just uh show you",
    "start": "2869720",
    "end": "2875839"
  },
  {
    "text": "a a video of",
    "start": "2875839",
    "end": "2882640"
  },
  {
    "text": "it okay so basically we targeting Firefox 10.0.1 on 32bit Linux uh we",
    "start": "2897079",
    "end": "2904040"
  },
  {
    "text": "again have the same uh script that that loads Firefox and attaches GDB that's",
    "start": "2904040",
    "end": "2909119"
  },
  {
    "text": "the GDB init file loads and mask J Malo and set some break points related to the",
    "start": "2909119",
    "end": "2915040"
  },
  {
    "text": "to the specific bug so that happens here that fire that is Firefox",
    "start": "2915040",
    "end": "2922160"
  },
  {
    "text": "uh and GDB attaches to it it takes a while to load the the libz uh symbols",
    "start": "2922160",
    "end": "2929160"
  },
  {
    "text": "again uh yeah sorry about that yeah it's kind of faster than Linux actually yeah it",
    "start": "2929160",
    "end": "2936000"
  },
  {
    "text": "won't take as as long as in the OSX case okay so now our break points have been",
    "start": "2936000",
    "end": "2941880"
  },
  {
    "text": "set you can see that this is Firefox 10. 0.1 the vulnerable",
    "start": "2941880",
    "end": "2947760"
  },
  {
    "text": "version now we load the HTML file that does the hip spraying and creates the",
    "start": "2947760",
    "end": "2953599"
  },
  {
    "text": "gaps and then loads the PNG file that triggers the bug so all this happen with",
    "start": "2953599",
    "end": "2959040"
  },
  {
    "text": "uh this HTML file that we're going to load now so that's after the actual uh bug is",
    "start": "2959040",
    "end": "2966680"
  },
  {
    "text": "triggered with a PNG file uh the first break point that will be hit now uh okay this takes a while",
    "start": "2966680",
    "end": "2974240"
  },
  {
    "text": "now because uh this PNG file is a compressed one and Firefox decompresses",
    "start": "2974240",
    "end": "2979280"
  },
  {
    "text": "it and this is where the bug is triggered um so that's that delay here is that",
    "start": "2979280",
    "end": "2986880"
  },
  {
    "text": "decompression done by Firefox okay so now the the back has been uh triggered",
    "start": "2986880",
    "end": "2993040"
  },
  {
    "text": "so that's the vulnerable maloc call you can see that uh we control prefix size",
    "start": "2993040",
    "end": "2999119"
  },
  {
    "text": "we control expanded size which have set to this value to to do the Overflow now",
    "start": "2999119",
    "end": "3004520"
  },
  {
    "text": "this prefix size plus expanded size plus one is the actual allocation done by Malo and um this returns sorry let me",
    "start": "3004520",
    "end": "3013640"
  },
  {
    "text": "put a let me pause here okay so that's the actual allocation done by the malool",
    "start": "3013640",
    "end": "3019960"
  },
  {
    "text": "here and after the integer overflow that is 2 EC in HEX which is u 748 in uh in",
    "start": "3019960",
    "end": "3028839"
  },
  {
    "text": "decimal and this 748 allocation goes into into the 1024",
    "start": "3028839",
    "end": "3033960"
  },
  {
    "text": "R now uh we move a step here on the allocator and we can see that uh Malo",
    "start": "3033960",
    "end": "3040880"
  },
  {
    "text": "has returned this uh memory area here",
    "start": "3040880",
    "end": "3046000"
  },
  {
    "text": "actually okay so now the the value of ax is is printed so this this memory here",
    "start": "3048880",
    "end": "3055920"
  },
  {
    "text": "is the Reg that Malo returned and that's on the 1024",
    "start": "3055920",
    "end": "3060950"
  },
  {
    "text": "[Music] run and remember that at this stage um",
    "start": "3060950",
    "end": "3067559"
  },
  {
    "text": "the uh the break point has been hit after the initial spray uh the creation",
    "start": "3067559",
    "end": "3072720"
  },
  {
    "text": "of gaps of holes on on the Hep and the loading of the PNG file so we will now",
    "start": "3072720",
    "end": "3078440"
  },
  {
    "text": "list all the region of 10,24 of the 1024 run again that takes a while because it",
    "start": "3078440",
    "end": "3085680"
  },
  {
    "text": "pares the structures from",
    "start": "3085680",
    "end": "3089400"
  },
  {
    "text": "memory okay so here we have all the structures of the uh of the 1,4 Run now",
    "start": "3109160",
    "end": "3116720"
  },
  {
    "text": "the important thing to note here uh will be highlighted by the video but I will explain it as",
    "start": "3116720",
    "end": "3123599"
  },
  {
    "text": "well um",
    "start": "3123599",
    "end": "3127240"
  },
  {
    "text": "sorry okay so what we see here is that after the Overflow Malo has returned",
    "start": "3141720",
    "end": "3147960"
  },
  {
    "text": "this region here which is this region right but what we can see here is that",
    "start": "3147960",
    "end": "3154280"
  },
  {
    "text": "the next region that is adjacent to this one has this value that we have sprayed",
    "start": "3154280",
    "end": "3159559"
  },
  {
    "text": "the the hip with so when we trigger the Overflow on this it overflows here and",
    "start": "3159559",
    "end": "3164880"
  },
  {
    "text": "if you put a data structure here that contains function pointers basically you have gain control of the execution of of",
    "start": "3164880",
    "end": "3172599"
  },
  {
    "text": "Firefox um I don't think the video has anything else here Yeah so basically that's",
    "start": "3172599",
    "end": "3180200"
  },
  {
    "text": "it so as we can see uh Firefox exploits heavily rely on the fact that uh we can",
    "start": "3190040",
    "end": "3196280"
  },
  {
    "text": "arrange the Heap in a special way uh so what can we do to avoid such problem uh",
    "start": "3196280",
    "end": "3202079"
  },
  {
    "start": "3201000",
    "end": "3201000"
  },
  {
    "text": "the latest Galo implementation uh uses some red zone red zones are just simple",
    "start": "3202079",
    "end": "3208000"
  },
  {
    "text": "memory regions that fall within uh end user uh memory regions uh that are",
    "start": "3208000",
    "end": "3213200"
  },
  {
    "text": "filled with a standard pattern and whenever this region whenever end user region is freed uh Galo will just check",
    "start": "3213200",
    "end": "3220000"
  },
  {
    "text": "that this pattern is the same if it's not then it's probably uh an overflow",
    "start": "3220000",
    "end": "3225400"
  },
  {
    "text": "condition uh okay this is cool but it's disabled by default because it it results in a huge overhead so uh there's",
    "start": "3225400",
    "end": "3233160"
  },
  {
    "text": "another technique involving randomizing the allocations uh so whenever ever you call free the pointer you pass to free",
    "start": "3233160",
    "end": "3239200"
  },
  {
    "text": "is actually inserted in in a linked list and instead of physically uh freeing uh",
    "start": "3239200",
    "end": "3245839"
  },
  {
    "text": "the past pointer uh free will just pick up a random uh Chunk from that list and",
    "start": "3245839",
    "end": "3251119"
  },
  {
    "text": "region that list and free it uh this is cool as well uh but unfortunately it breaks the principle of locality um",
    "start": "3251119",
    "end": "3259000"
  },
  {
    "text": "because the next time you call Malo uh then J Malo will probably return uh a m",
    "start": "3259000",
    "end": "3265960"
  },
  {
    "text": "region that is on some different page thus breaking the principle of locality and of course uh breaking uh the the the",
    "start": "3265960",
    "end": "3274520"
  },
  {
    "text": "efficiency of the",
    "start": "3274520",
    "end": "3277480"
  },
  {
    "text": "allocator um here's the code that implements the range zones in G Malo as",
    "start": "3280720",
    "end": "3286000"
  },
  {
    "text": "you can see during the allocation of a small or medium region uh this pattern is",
    "start": "3286000",
    "end": "3293880"
  },
  {
    "start": "3290000",
    "end": "3290000"
  },
  {
    "text": "repeated uh right after the allocation and before it and during the allocation",
    "start": "3293880",
    "end": "3300599"
  },
  {
    "text": "uh it just it just checks that uh the bytes are the same if not then this uh",
    "start": "3300599",
    "end": "3306559"
  },
  {
    "text": "error flag is set to true and the program",
    "start": "3306559",
    "end": "3311000"
  },
  {
    "text": "terminates okay yeah of course you can bypass that by overwriting the same bite right it's e bypassable even if it it's",
    "start": "3314119",
    "end": "3321240"
  },
  {
    "text": "compiled by default okay so uh in in conclusion",
    "start": "3321240",
    "end": "3328359"
  },
  {
    "start": "3322000",
    "end": "3322000"
  },
  {
    "text": "um what we we're seeing is J Malo being creasingly used because it's a high",
    "start": "3328359",
    "end": "3333440"
  },
  {
    "text": "performance allocator uh because it has specifically been developed with SNP uh",
    "start": "3333440",
    "end": "3339799"
  },
  {
    "text": "systems and multi threat applications in mind and although we have seen a lot of software packages like FreeBSD netbsd",
    "start": "3339799",
    "end": "3346880"
  },
  {
    "text": "the Firefox uh browser and even Facebook using it uh there hasn't been any security assessment of the allocator so",
    "start": "3346880",
    "end": "3353920"
  },
  {
    "text": "far so we done the first step toward that uh that goal of course there's a lot of work to be done as well so feel",
    "start": "3353920",
    "end": "3360480"
  },
  {
    "text": "free to to to build on top of our work um again the the the most important",
    "start": "3360480",
    "end": "3368160"
  },
  {
    "text": "thing to probably to take out from this presentation is that um we're seeing a",
    "start": "3368160",
    "end": "3373200"
  },
  {
    "text": "move from uh link list sorry from link list based uh allocators to bitmask",
    "start": "3373200",
    "end": "3379760"
  },
  {
    "text": "allocators because their their performance is much is much better so the old exploitation Primitives of front",
    "start": "3379760",
    "end": "3385920"
  },
  {
    "text": "linking and un leaking with grand IDE for primitive are no longer applicable you cannot use this kind of technique so",
    "start": "3385920",
    "end": "3392280"
  },
  {
    "text": "new new exploitations uh new exploitation approaches need to be uh developed so what we did is we we tried",
    "start": "3392280",
    "end": "3399200"
  },
  {
    "text": "to to find one one of those and we came up with this thing we call the force used primitive which as we have",
    "start": "3399200",
    "end": "3405319"
  },
  {
    "text": "explained returns H an item uh that the allocator is already using is considered",
    "start": "3405319",
    "end": "3412039"
  },
  {
    "text": "to be used uh and we we have also shown how you can use all this J Malo uh knowledge",
    "start": "3412039",
    "end": "3420079"
  },
  {
    "text": "to attack probably the most widely used application uh that uses J Malo namely",
    "start": "3420079",
    "end": "3425640"
  },
  {
    "text": "the the Firefox browser and we have also developed this unmasked J Malo utility that we we hope if you're doing any any",
    "start": "3425640",
    "end": "3433280"
  },
  {
    "text": "kind of JM exploit development to use and uh feel free to enhance it and",
    "start": "3433280",
    "end": "3438559"
  },
  {
    "text": "submit patches to us and we're going to be very open with its development so",
    "start": "3438559",
    "end": "3444599"
  },
  {
    "text": "please contribute if you do in any kind of J Malo exploit development um okay we like to thank all",
    "start": "3444599",
    "end": "3451880"
  },
  {
    "text": "these people here because they they talk to us uh on various hip exploitation",
    "start": "3451880",
    "end": "3457960"
  },
  {
    "text": "subjects and also uh on on J Malo exploitation so their feedback has been",
    "start": "3457960",
    "end": "3463760"
  },
  {
    "start": "3460000",
    "end": "3460000"
  },
  {
    "text": "very helpful um okay these are the references as I",
    "start": "3463760",
    "end": "3470599"
  },
  {
    "text": "told you we are going to to continue developing unmask J malok and uh this",
    "start": "3470599",
    "end": "3475640"
  },
  {
    "text": "will happen on GitHub so feel free to to do any pull requests for us there for",
    "start": "3475640",
    "end": "3480839"
  },
  {
    "start": "3479000",
    "end": "3479000"
  },
  {
    "text": "for code you have written and basically that's it that that concludes our",
    "start": "3480839",
    "end": "3487599"
  },
  {
    "text": "presentation if you have any questions we will be happy to to answer",
    "start": "3492440",
    "end": "3498119"
  },
  {
    "text": "them what do you think will be the most challenging part of in the future",
    "start": "3499359",
    "end": "3506680"
  },
  {
    "text": "is future improvements they make April the",
    "start": "3506680",
    "end": "3513640"
  },
  {
    "text": "chall okay um I don't think there's going to be much of a challenge in in uh",
    "start": "3513640",
    "end": "3518960"
  },
  {
    "text": "trying to to develop bypass for the mitigations because what we have uh we",
    "start": "3518960",
    "end": "3524599"
  },
  {
    "text": "have noticed is that um mitigations on this kind of allocators are very difficult to implement because all kind",
    "start": "3524599",
    "end": "3530559"
  },
  {
    "text": "of mitigations you may you may come up with basically have a huge impact on performance and since this is the main",
    "start": "3530559",
    "end": "3537280"
  },
  {
    "text": "goal of this of this kind of allocators They Don't Really uh enable them by default or or actually spend much time",
    "start": "3537280",
    "end": "3544200"
  },
  {
    "text": "implementing them so I would say that that's not really a much of a challenge the real challenge would be to to follow",
    "start": "3544200",
    "end": "3550960"
  },
  {
    "text": "up on the changes of J Malo see if these attacks are applicable maybe come up with new ones right so we have if you go",
    "start": "3550960",
    "end": "3558079"
  },
  {
    "text": "through the presentations again uh you may see that we have some pointers on think we haven't really looked at but we",
    "start": "3558079",
    "end": "3563319"
  },
  {
    "text": "started looking so that will give you some point on going uh to to continue our work I mean if you have any more",
    "start": "3563319",
    "end": "3570599"
  },
  {
    "text": "specific things to to to ask we can talk offline any other",
    "start": "3570599",
    "end": "3577838"
  },
  {
    "text": "questions okay thanks thank you very much thanks for being [Applause]",
    "start": "3578880",
    "end": "3584920"
  },
  {
    "text": "here",
    "start": "3584920",
    "end": "3587920"
  }
]