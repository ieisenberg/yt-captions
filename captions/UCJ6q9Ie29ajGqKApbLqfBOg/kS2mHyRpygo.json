[
  {
    "start": "0",
    "end": "79000"
  },
  {
    "text": "so we we are I appreciate your time that you came over to to listen to our",
    "start": "210",
    "end": "6299"
  },
  {
    "text": "presentation thank you very much and thanks for thanks to blackhat for organizing events and and giving us a",
    "start": "6299",
    "end": "16830"
  },
  {
    "text": "chance to present our research so my name is Yuri bull again and this is Alex",
    "start": "16830",
    "end": "22500"
  },
  {
    "text": "Veronica and so what we're presenting today is a blue pill for your phone so",
    "start": "22500",
    "end": "29539"
  },
  {
    "text": "you might uh you might have will do some introduction first into arm-based",
    "start": "29539",
    "end": "36600"
  },
  {
    "text": "security unarmed based systems will do some Alex will do some reverse engineering of the resume and a",
    "start": "36600",
    "end": "43440"
  },
  {
    "text": "hypervisor then will explore some of the attack vectors there could work against",
    "start": "43440",
    "end": "52500"
  },
  {
    "text": "Brazil well as the hypervisor from both its software side as well as the hardware side and we'll also do a an",
    "start": "52500",
    "end": "61320"
  },
  {
    "text": "analysis of how hypervisor on arm based phones could be exploited and how we could patch it and install some sort of",
    "start": "61320",
    "end": "69420"
  },
  {
    "text": "a rootkit at the level of the hypervisor and we'll discuss some mitigations so",
    "start": "69420",
    "end": "76259"
  },
  {
    "text": "what motivated us to do that research there's a view of seeing our research",
    "start": "76259",
    "end": "83729"
  },
  {
    "start": "79000",
    "end": "79000"
  },
  {
    "text": "past research or presentations might be wondering what the hell those guys are doing with presenting an armed security",
    "start": "83729",
    "end": "90509"
  },
  {
    "text": "because we traditionally been presenting an x86 security like pretty much all the",
    "start": "90509",
    "end": "96240"
  },
  {
    "text": "time so we wanted to understand armed",
    "start": "96240",
    "end": "101490"
  },
  {
    "text": "security a little bit better and there is a substantial amount of research in the trans own security however we wanted",
    "start": "101490",
    "end": "108509"
  },
  {
    "text": "to advance some research and hypervisors because there has been a substantial amount of research and the hypervisor",
    "start": "108509",
    "end": "114210"
  },
  {
    "text": "security on x86 but not an arm we also wanted to understand the threat models between the trade zone how they interact",
    "start": "114210",
    "end": "120570"
  },
  {
    "text": "between each other and the hypervisor so yep and also analyze similarities and",
    "start": "120570",
    "end": "126210"
  },
  {
    "text": "differences between the attacks and attack vectors on x86 based based systems and ARM based systems for",
    "start": "126210",
    "end": "132510"
  },
  {
    "text": "example we have a long notice that same type of attacks have been where exploits have",
    "start": "132510",
    "end": "139630"
  },
  {
    "text": "been demonstrated both on ARM based systems against president monitor as",
    "start": "139630",
    "end": "145060"
  },
  {
    "text": "well have worrisome t Heather's as well as the against the x86 system management",
    "start": "145060",
    "end": "150670"
  },
  {
    "text": "mode the young Czech border vulnerability is so there are clearly similarities and so we wanted to",
    "start": "150670",
    "end": "157360"
  },
  {
    "text": "understand that so what are what are the just a brief introduction into the hypervisor based with kids those of you",
    "start": "157360",
    "end": "165069"
  },
  {
    "start": "158000",
    "end": "158000"
  },
  {
    "text": "old enough might have remembered all the all the research going on and starting",
    "start": "165069",
    "end": "171400"
  },
  {
    "text": "2006 on the hypervisor based with kids and in x86 platforms so what are those",
    "start": "171400",
    "end": "178080"
  },
  {
    "text": "the hypervisor essentially partitions your system into virtual machines where",
    "start": "178080",
    "end": "185650"
  },
  {
    "text": "you can run a separate operating system with separate applications so it manages those virtual machines so the rootkit on",
    "start": "185650",
    "end": "192340"
  },
  {
    "text": "the hypervisor level is some some some some sort of a code that patches the",
    "start": "192340",
    "end": "197590"
  },
  {
    "text": "hypervisor by exploiting a vulnerability in it or by somehow compromising it and",
    "start": "197590",
    "end": "204489"
  },
  {
    "text": "the other way and then essentially trapping in all most of the events happening in within the virtual machines",
    "start": "204489",
    "end": "211450"
  },
  {
    "text": "for example the the victim virtual machine and intercepting those events",
    "start": "211450",
    "end": "217510"
  },
  {
    "text": "doing something when when those events happen within the virtual machine so the",
    "start": "217510",
    "end": "223900"
  },
  {
    "start": "223000",
    "end": "223000"
  },
  {
    "text": "timeline of the hypervisor security research I think it started in 2006 when",
    "start": "223900",
    "end": "229690"
  },
  {
    "text": "Mike researchers from Microsoft Research published subvert the implementing",
    "start": "229690",
    "end": "235780"
  },
  {
    "text": "malware with virtual machines but when the world learned it was actually after",
    "start": "235780",
    "end": "242829"
  },
  {
    "text": "I think blackhat at the USA 2006 when both dinner dies I represented vitriol",
    "start": "242829",
    "end": "248829"
  },
  {
    "text": "for Mac for Mac from Mac OS and honored kafka presented blue pill for for",
    "start": "248829",
    "end": "255519"
  },
  {
    "text": "Windows both of these are the the rootkits at the hypervisor level",
    "start": "255519",
    "end": "262360"
  },
  {
    "text": "then after the the the 2006 a cow's",
    "start": "262360",
    "end": "267440"
  },
  {
    "text": "chaos ensued for a number of years with a security community is split in two in",
    "start": "267440",
    "end": "273590"
  },
  {
    "text": "in in in two hops essentially with one half trying to study how badly",
    "start": "273590",
    "end": "281210"
  },
  {
    "text": "hypervisor route kids are and the other one is a you know trying trying to study",
    "start": "281210",
    "end": "287360"
  },
  {
    "text": "how easy it is to detect hit or mitigate those red kids but the bottom line",
    "start": "287360",
    "end": "293690"
  },
  {
    "text": "regardless of which side you were on or or not the bottom line the the root kits",
    "start": "293690",
    "end": "299810"
  },
  {
    "text": "that the hypervisor level was something new and they presented some other powerful capabilities for them over for",
    "start": "299810",
    "end": "306050"
  },
  {
    "text": "the future malware and so the research and the security of hypervisors continued in 2008 invisible things labs",
    "start": "306050",
    "end": "312820"
  },
  {
    "text": "presented how you how they have a malware code blue pill the existing",
    "start": "312820",
    "end": "321650"
  },
  {
    "text": "hypervisor not the the operating native operating system on the floor but the",
    "start": "321650",
    "end": "326990"
  },
  {
    "text": "hypervisor itself then a number of years we have seen good research and",
    "start": "326990",
    "end": "332120"
  },
  {
    "text": "vulnerabilities exploits in different hypervisors in 2015 we presented a",
    "start": "332120",
    "end": "338230"
  },
  {
    "text": "different type of attacks and vectors compromising hypervisor such as Xen and",
    "start": "338230",
    "end": "344390"
  },
  {
    "text": "and and hyper-v through the firmer and Hardware attacks into today we're",
    "start": "344390",
    "end": "351920"
  },
  {
    "text": "presenting attack vectors compromising hypervisor or an ARM based systems so",
    "start": "351920",
    "end": "357560"
  },
  {
    "start": "357000",
    "end": "357000"
  },
  {
    "text": "they are brief intro into the RM security architecture so trustzone essentially partitions your your SOC",
    "start": "357560",
    "end": "366590"
  },
  {
    "text": "into two world it creates two worlds with with the hardware boundaries",
    "start": "366590",
    "end": "372820"
  },
  {
    "text": "ensuring the isolation between those two worlds so one of them is a normal world where you have a reach OS operating",
    "start": "372820",
    "end": "379010"
  },
  {
    "text": "system with normal applications and a hyper by the hypervisor potentially",
    "start": "379010",
    "end": "386270"
  },
  {
    "text": "running underneath the operating system and also you have a secure world where which one trust Colonel and monitor and also",
    "start": "386270",
    "end": "393899"
  },
  {
    "text": "trusted applications called trust lets the the devices are also where the",
    "start": "393899",
    "end": "399509"
  },
  {
    "text": "access to the devices is also separated by the hardware by the SOC into secure",
    "start": "399509",
    "end": "405899"
  },
  {
    "text": "and non-secure devices so for example normal world can access only of normal",
    "start": "405899",
    "end": "410969"
  },
  {
    "text": "non secure devices and secure world connect can access both secure devices and normal devices but there are devices",
    "start": "410969",
    "end": "417269"
  },
  {
    "text": "that are mixed devices that have configuration in am on my own configuration registers that could be",
    "start": "417269",
    "end": "423569"
  },
  {
    "text": "built accessed by only secure world by only normal world and also registers",
    "start": "423569",
    "end": "430079"
  },
  {
    "text": "that can be accessed by both normal and secure world so Alex will continue with",
    "start": "430079",
    "end": "436189"
  },
  {
    "start": "434000",
    "end": "434000"
  },
  {
    "text": "introducing details about the security architecture and reversing trazadone and the hypervisor and then I'll I'll",
    "start": "436189",
    "end": "443369"
  },
  {
    "text": "continue with the attack vectors so I'm Alex let's go a little bit deep with",
    "start": "443369",
    "end": "449969"
  },
  {
    "text": "heaven that privileges level in the arm v7 architecture there is a user mode",
    "start": "449969",
    "end": "455489"
  },
  {
    "text": "kernel mode the isolation between this level in the memory done through the",
    "start": "455489",
    "end": "461219"
  },
  {
    "text": "page and we have the interface which is used to communicate from the application to the kernel then we have a hypervisor",
    "start": "461219",
    "end": "467789"
  },
  {
    "text": "which is the hardware privilege at level which also have the memories elation",
    "start": "467789",
    "end": "473729"
  },
  {
    "text": "implemented through a second level translation or call it stage to translation and armed terminology and",
    "start": "473729",
    "end": "479759"
  },
  {
    "text": "this is the normal world and there is also secure world and we have a different separation level or privileges",
    "start": "479759",
    "end": "486569"
  },
  {
    "text": "level inside this environment as well so translates isolated from each other and",
    "start": "486569",
    "end": "493949"
  },
  {
    "text": "from the secure key now secure key no it's kind of small OS which is support a",
    "start": "493949",
    "end": "499379"
  },
  {
    "text": "lot of phones now it's necessary to have to the round translates in our mission",
    "start": "499379",
    "end": "504779"
  },
  {
    "text": "architecture we have PL one inside secure world which is basically contain they secure kernel and secure monitor so",
    "start": "504779",
    "end": "512008"
  },
  {
    "text": "all of the requests from press LEDs and from the untrusted from the normal role will be handled at in that PL 1",
    "start": "512009",
    "end": "519870"
  },
  {
    "text": "privilege at level there is interface between the normal world and secure world is the SMC",
    "start": "519870",
    "end": "527610"
  },
  {
    "text": "we basically trigger the SMC event and the secure world handling this event to",
    "start": "527610",
    "end": "533790"
  },
  {
    "text": "understand what kind of request is this to return execution back we use an e-rate instruction which is basically",
    "start": "533790",
    "end": "541970"
  },
  {
    "text": "settings research and sort of registers before this instructions and drinking",
    "start": "541970",
    "end": "547560"
  },
  {
    "text": "this instruction and we return the execution back to the normal world or we handle it in a secure world the",
    "start": "547560",
    "end": "554459"
  },
  {
    "text": "privileges level software privileges level are responsible for protect itself meaning that hypervisor should protect",
    "start": "554459",
    "end": "560370"
  },
  {
    "text": "for the kernel and application itself security protect software should handle",
    "start": "560370",
    "end": "567000"
  },
  {
    "text": "all of the untrusted input properly without exposing the vulnerability so it",
    "start": "567000",
    "end": "574019"
  },
  {
    "start": "572000",
    "end": "572000"
  },
  {
    "text": "we have similar situation except here we have exceptional level which is a little",
    "start": "574019",
    "end": "579300"
  },
  {
    "text": "bit more flexible but also the insecure world a secure kernel and secure monitor",
    "start": "579300",
    "end": "585360"
  },
  {
    "text": "splitted to two different privileges level and secure monitor is a really tiny piece of code which is just",
    "start": "585360",
    "end": "591329"
  },
  {
    "text": "directing a request from the normal world to secure what and back another important point is in this architecture",
    "start": "591329",
    "end": "598319"
  },
  {
    "text": "you may use 32-bit to secure canal with with 64 secure monitors secure monitor",
    "start": "598319",
    "end": "605100"
  },
  {
    "text": "is required to be 64-bit but secure Keano can be entered to an 64-bit that's",
    "start": "605100",
    "end": "612269"
  },
  {
    "text": "kind of really brief about privileges level so you know no privileges level and various interfaces between this",
    "start": "612269",
    "end": "618089"
  },
  {
    "start": "613000",
    "end": "613000"
  },
  {
    "text": "level but we don't know how that's : conversion work how we passing the arguments from the to the SMC or to the",
    "start": "618089",
    "end": "624930"
  },
  {
    "text": "hypervisor so there is suspect which is supposed to define them and all of the",
    "start": "624930",
    "end": "630420"
  },
  {
    "text": "calling convention they open they really close the real implementation except if there is big buffer the very shared",
    "start": "630420",
    "end": "638339"
  },
  {
    "text": "memory use it to pass big buffers to the secure world and back so we see there is",
    "start": "638339",
    "end": "645480"
  },
  {
    "text": "a general purpose register use it in this cone convention and x0 is basically",
    "start": "645480",
    "end": "650910"
  },
  {
    "text": "the the register which is contained them the function in trance on in trans onward",
    "start": "650910",
    "end": "659759"
  },
  {
    "text": "which you want to call basically service so some of the functionality implemented and this functionality is a kind of set",
    "start": "659759",
    "end": "667889"
  },
  {
    "text": "of SM offenders which you can call from the normal world as already mentioned we",
    "start": "667889",
    "end": "674490"
  },
  {
    "start": "673000",
    "end": "673000"
  },
  {
    "text": "have the paging reservation and we have stage one translation and Stage two",
    "start": "674490",
    "end": "680069"
  },
  {
    "text": "translation stage one translation making the translation from the virtual address to intermediate physical address or to",
    "start": "680069",
    "end": "687089"
  },
  {
    "text": "guess physical address in in ec6 terminology and then we have a second stage to translation and when we got",
    "start": "687089",
    "end": "694860"
  },
  {
    "text": "this intermediate physical address and translated to real physical address so stage one translation done through ttb",
    "start": "694860",
    "end": "701250"
  },
  {
    "text": "are a register which is pointing to them first level of them translation tables",
    "start": "701250",
    "end": "706860"
  },
  {
    "text": "and a stage to learn from vtg we are register and if the hypervisor is",
    "start": "706860",
    "end": "713040"
  },
  {
    "text": "properly configured it should use stage 2 translation pension to protect itself",
    "start": "713040",
    "end": "719329"
  },
  {
    "start": "719000",
    "end": "719000"
  },
  {
    "text": "so the the trans own architecture makes some evolution and from from different",
    "start": "719329",
    "end": "728250"
  },
  {
    "text": "generations and we start thinking we start looking on this in error of Nexus",
    "start": "728250",
    "end": "734759"
  },
  {
    "text": "5 when there was our MV 7 architectures 32 bit where we have just peel one mode",
    "start": "734759",
    "end": "741089"
  },
  {
    "text": "with 32-bit kernel then we extended and start to look into the Nexus 5x and 6p",
    "start": "741089",
    "end": "748139"
  },
  {
    "text": "which is the main target in this presentation which is our v8 64-bit version undergone a 0 8 and a 10 SOC",
    "start": "748139",
    "end": "755910"
  },
  {
    "text": "which has alleged and separated trans donkey on ultras on monitor but it still",
    "start": "755910",
    "end": "761670"
  },
  {
    "text": "used the 32-bit kernel and then the next generation was Google pixel which is basically a generation of the SSE it has",
    "start": "761670",
    "end": "769680"
  },
  {
    "text": "the 64-bit kernel but the reason and there is a lot of changes done in in",
    "start": "769680",
    "end": "775800"
  },
  {
    "text": "perspective of the protection to the pixel which is make a great job",
    "start": "775800",
    "end": "781840"
  },
  {
    "text": "if you talked a little bit about what the difference between x86 and arm we we",
    "start": "781840",
    "end": "788500"
  },
  {
    "start": "782000",
    "end": "782000"
  },
  {
    "text": "kind of defined into a couple categories so in perspective a world of trusted arm has a lot of trust in Rome and has the",
    "start": "788500",
    "end": "797610"
  },
  {
    "text": "kind of standard or similar methods to verify the rest of the boot sequence a",
    "start": "797610",
    "end": "804150"
  },
  {
    "text": "really a kind of static route of trust it may allow homologue meaning that it",
    "start": "804150",
    "end": "810040"
  },
  {
    "text": "will allow to run and sign and images during during some of the configuration",
    "start": "810040",
    "end": "815860"
  },
  {
    "text": "it's like developer mode for the Chromebooks so in x86 the recently from",
    "start": "815860",
    "end": "820960"
  },
  {
    "text": "as well there was the boot cut technology which has introduced it to support this kind of root of trust",
    "start": "820960",
    "end": "827170"
  },
  {
    "text": "module and there are servants to the research in this area in perspective of the GE arm has a",
    "start": "827170",
    "end": "832960"
  },
  {
    "text": "really flexible secure world environment with different privileges level and when",
    "start": "832960",
    "end": "838420"
  },
  {
    "text": "we can run dynamic translates insulate them and make a lot of really awesome work in perspective of the relation easy",
    "start": "838420",
    "end": "845560"
  },
  {
    "text": "to think there is couple technologists one of them was the GX but it was kind",
    "start": "845560",
    "end": "850990"
  },
  {
    "text": "of isolation in the user Remote application there was also a virtualization base it EOG based on a",
    "start": "850990",
    "end": "858070"
  },
  {
    "text": "salmon it was not really designed for this but we still can reuse it for this",
    "start": "858070",
    "end": "863140"
  },
  {
    "text": "purpose in the perspective of the virtualization arm implemented at ization as an exception level compared",
    "start": "863140",
    "end": "869620"
  },
  {
    "text": "to 86 when existe 6 implemented as a context switch technology when it allow mobile flexibility in context of the",
    "start": "869620",
    "end": "877510"
  },
  {
    "text": "hypervisor having the privileges level that's kind of the analogy of them flexibility of the realizations same as",
    "start": "877510",
    "end": "884589"
  },
  {
    "text": "flexibility I would say int razón that's why for example Windows 10 create the VSM based on virtualization so let me",
    "start": "884589",
    "end": "893830"
  },
  {
    "start": "892000",
    "end": "892000"
  },
  {
    "text": "explain really briefly the good sequence in some of the modern",
    "start": "893830",
    "end": "899560"
  },
  {
    "text": "associ so we start from read-only memory when the RPM research power management",
    "start": "899560",
    "end": "904840"
  },
  {
    "text": "model take control and it checks some power configuration and just and and and",
    "start": "904840",
    "end": "911290"
  },
  {
    "text": "trigger the reset in men a cpu an application CPU and around it wrong from",
    "start": "911290",
    "end": "917890"
  },
  {
    "text": "them application CPU the run from application CPU very fine and blow at SBL a secondary bootloader",
    "start": "917890",
    "end": "925540"
  },
  {
    "text": "to the ownership memory and then it redirect to execution to SBL which train",
    "start": "925540",
    "end": "932680"
  },
  {
    "text": "and the memory very fine lord trazadone",
    "start": "932680",
    "end": "938710"
  },
  {
    "text": "and hypervisor images and then it redirect execution to thousand images trance and monitor code which basically",
    "start": "938710",
    "end": "945850"
  },
  {
    "text": "finish initialization of the trans own environment and trigger first untrusted code which is basically hypervisor code",
    "start": "945850",
    "end": "951880"
  },
  {
    "text": "which is in a normal world so that first code which is running in normal wart",
    "start": "951880",
    "end": "956920"
  },
  {
    "text": "intended there as the others to the flow execution of them so a really brief",
    "start": "956920",
    "end": "964080"
  },
  {
    "start": "962000",
    "end": "962000"
  },
  {
    "text": "again root of trust in a ROM and the wrong verified the readwrite part of the firmware there is technology which allow",
    "start": "964080",
    "end": "970990"
  },
  {
    "text": "them to have a em locks and unlock users fuses which allow to run and sign it",
    "start": "970990",
    "end": "976720"
  },
  {
    "text": "images and before any untrusted normal code executes trans all should finish all the initialization so how we can",
    "start": "976720",
    "end": "984010"
  },
  {
    "start": "983000",
    "end": "983000"
  },
  {
    "text": "take a look in the binary and see what what code is running there so for Google Fonts is we can download",
    "start": "984010",
    "end": "990460"
  },
  {
    "text": "factory image use the tool from gal benjamina from project zero and buy the",
    "start": "990460",
    "end": "997210"
  },
  {
    "text": "image and we can find that easy trans own image the RPM image is VL one image",
    "start": "997210",
    "end": "1002670"
  },
  {
    "text": "I presume is own so we can load this in Ida see the section and for example in this specific example Nexus 5x we see",
    "start": "1002670",
    "end": "1009510"
  },
  {
    "text": "chosen kernel and transyl monitor so we can understand where its coil and start",
    "start": "1009510",
    "end": "1014790"
  },
  {
    "text": "reverse engineer but also we want to have the dynamic environment we want to run our test and experiment with the",
    "start": "1014790",
    "end": "1020070"
  },
  {
    "start": "1016000",
    "end": "1016000"
  },
  {
    "text": "hypervisor and present so on so for this we need to route our I was our Foreman around the driver in",
    "start": "1020070",
    "end": "1026280"
  },
  {
    "text": "this case we can rebuild the kernel to support the lodging driver using the super suit of flesh tone with the system",
    "start": "1026280",
    "end": "1034709"
  },
  {
    "text": "and then flesh the custom kernel there is also good resources which you can",
    "start": "1034709",
    "end": "1041160"
  },
  {
    "text": "take a look at how to do that there's couple tools which was already exist to",
    "start": "1041160",
    "end": "1046558"
  },
  {
    "text": "test or investigate the arm system like recall drama and so on for check the",
    "start": "1046559",
    "end": "1054809"
  },
  {
    "text": "hammer vulnerability read the configuration the core configuration and so on so we can understand now kind of",
    "start": "1054809",
    "end": "1062309"
  },
  {
    "text": "the mode the really basic concept in arm security now let's take take a look",
    "start": "1062309",
    "end": "1068520"
  },
  {
    "text": "deeper to understand what exactly is running in which privileges level and where is the entry point and where is",
    "start": "1068520",
    "end": "1075179"
  },
  {
    "text": "the untrusted buffer handle parsing implements before we go there we also",
    "start": "1075179",
    "end": "1081990"
  },
  {
    "start": "1080000",
    "end": "1080000"
  },
  {
    "text": "can take a look on an open source implementation of the trans own and just",
    "start": "1081990",
    "end": "1088650"
  },
  {
    "text": "don't get the idea where is the flow and to map this flow in the binary into a",
    "start": "1088650",
    "end": "1094440"
  },
  {
    "text": "quickie understand where is them all of the necessary components and there is couple implementations of the reference",
    "start": "1094440",
    "end": "1101970"
  },
  {
    "text": "implementation fortress on there is a opti here one is from Google",
    "start": "1101970",
    "end": "1108870"
  },
  {
    "text": "I'll call it trustee which is kind of Google tonight to create a standard for the T environment in general including",
    "start": "1108870",
    "end": "1115170"
  },
  {
    "text": "trans don't code and also from the arm itself a very good code really readable",
    "start": "1115170",
    "end": "1122429"
  },
  {
    "text": "we can understand where is them the default handler starts we understand where is the logic for example in this",
    "start": "1122429",
    "end": "1129510"
  },
  {
    "text": "specific example first things which happen is and then the one exception handler is irradiated in the check the",
    "start": "1129510",
    "end": "1137760"
  },
  {
    "text": "source of the SMC which is a two hole 64 bit in depends on that it in 3d of the SMC default handler for the specific",
    "start": "1137760",
    "end": "1145590"
  },
  {
    "text": "SM scene so now we need to find where is this exception table is and it call it",
    "start": "1145590",
    "end": "1152010"
  },
  {
    "start": "1147000",
    "end": "1147000"
  },
  {
    "text": "vector table and this circular table basically is contain the exception handlers entry",
    "start": "1152010",
    "end": "1158940"
  },
  {
    "text": "point for all those interrupts which is coming to the privileges level and in for example for the l3 monitor it was",
    "start": "1158940",
    "end": "1166830"
  },
  {
    "text": "resumed monitor code we need to figure out where is the reburial 3.0 but we can",
    "start": "1166830",
    "end": "1172470"
  },
  {
    "text": "just see who is in the memory or writing to this court and which value is that",
    "start": "1172470",
    "end": "1178019"
  },
  {
    "text": "and then we from there we can figure out the location of the table and then from there we can see for example offset 4000",
    "start": "1178019",
    "end": "1185970"
  },
  {
    "start": "1182000",
    "end": "1182000"
  },
  {
    "text": "X we can see the synchronic low-level hello interrupt level handler where it",
    "start": "1185970",
    "end": "1193289"
  },
  {
    "text": "is and from here we can analyze a kind of entry point for them for this type of",
    "start": "1193289",
    "end": "1200489"
  },
  {
    "text": "exception including as you see and then we can see okay here we see that the",
    "start": "1200489",
    "end": "1206070"
  },
  {
    "text": "code is store in the normal world general purpose registers and then in running the flow up to them specific SMC",
    "start": "1206070",
    "end": "1214769"
  },
  {
    "text": "handler which supposed to implement the service by this SMC ig4 but monitor is",
    "start": "1214769",
    "end": "1228059"
  },
  {
    "text": "actually not doing that monitor just redirecting requests to the trans don't care about resume kennel in tremendous in monitor we will see that it just",
    "start": "1228059",
    "end": "1234869"
  },
  {
    "text": "redirect the execution to the TransAm kernel and in presume can no we can find a V bar l1 in a similar method when we",
    "start": "1234869",
    "end": "1242629"
  },
  {
    "text": "find the location of that table and fee and from there we can find all the",
    "start": "1242629",
    "end": "1248399"
  },
  {
    "text": "exception handlers as an entry point to the less privileged elite level for",
    "start": "1248399",
    "end": "1254639"
  },
  {
    "text": "32-bit TransAm kernel the idea is similar the table has a different format but we can",
    "start": "1254639",
    "end": "1262799"
  },
  {
    "text": "be used exactly the same methods to find the V bar for the",
    "start": "1262799",
    "end": "1269040"
  },
  {
    "text": "BL BL 1 security l1 and find the location of it and from here we can",
    "start": "1269040",
    "end": "1275640"
  },
  {
    "text": "start on ullas the 32-bit resume colonel before we all go and deeper inside the",
    "start": "1275640",
    "end": "1281610"
  },
  {
    "start": "1279000",
    "end": "1279000"
  },
  {
    "text": "SMC default handler and specific colors we need to understand the : convention like really how does how we can pass",
    "start": "1281610",
    "end": "1290580"
  },
  {
    "text": "argument to the specific SMC handler and what if we can make a reverse engineer",
    "start": "1290580",
    "end": "1296310"
  },
  {
    "text": "but also we can take a look in our existing open source drivers which is implementing this and see ok so for",
    "start": "1296310",
    "end": "1302070"
  },
  {
    "text": "example in this specific example there is a function which is storing extra arguments to the specific buffer so if",
    "start": "1302070",
    "end": "1307530"
  },
  {
    "text": "you have more than four arguments the rest of the arguments certain the buffer and patience to the x5 register you can",
    "start": "1307530",
    "end": "1314070"
  },
  {
    "text": "see all of that through the open source implementation divert open source",
    "start": "1314070",
    "end": "1319230"
  },
  {
    "text": "implementation and also you can see that before it trigger any SMC it also check what kind of SMC it supports and then",
    "start": "1319230",
    "end": "1325860"
  },
  {
    "text": "depends on that trigger specific : convention so that's forearm d8 for example for",
    "start": "1325860",
    "end": "1333170"
  },
  {
    "text": "Nexus 5 fix the current connection look like this so if you have less than 5",
    "start": "1333170",
    "end": "1338490"
  },
  {
    "text": "argument the general purpose register you use it to the best of the arguments if you have more and then then you use",
    "start": "1338490",
    "end": "1347550"
  },
  {
    "text": "the buffer when you store the rest of the arguments and pass the pointer of",
    "start": "1347550",
    "end": "1353070"
  },
  {
    "text": "the buffer next five argument it's five general purpose register so SMC default",
    "start": "1353070",
    "end": "1359220"
  },
  {
    "start": "1356000",
    "end": "1356000"
  },
  {
    "text": "handle start with some of the hardware checks and then it's running through the some software routine which is",
    "start": "1359220",
    "end": "1364620"
  },
  {
    "text": "validating the arguments which we pass on and that's this routine so first of all we check what kind of SMC event it",
    "start": "1364620",
    "end": "1372870"
  },
  {
    "text": "is then we checking the ID of this specific SMC which is in is zero register through the table through the",
    "start": "1372870",
    "end": "1379770"
  },
  {
    "text": "entry table SMC and table then we checking that X 1 is also the number of",
    "start": "1379770",
    "end": "1386700"
  },
  {
    "text": "parameters which store the next one also correct from them from the table value and then we run in the sanity checks",
    "start": "1386700",
    "end": "1394620"
  },
  {
    "text": "which is really important that checks is very fine that argument switch with person is not overlapping",
    "start": "1394620",
    "end": "1400390"
  },
  {
    "text": "with the trans own and this specific function is checking their extra arguments which is arguments after it",
    "start": "1400390",
    "end": "1406720"
  },
  {
    "text": "was index four and plus so then it chicken the rest of the arguments from",
    "start": "1406720",
    "end": "1413860"
  },
  {
    "text": "zero to four that this arguments also not overlap and withdraws on meaning that even defaulthandler make a lot of",
    "start": "1413860",
    "end": "1420460"
  },
  {
    "text": "sanity checks without knowing what these arguments mean because this arguments",
    "start": "1420460",
    "end": "1426940"
  },
  {
    "text": "will be parse it in specific SMC handler after that the subsea handler will be call it from the dispatcher the function",
    "start": "1426940",
    "end": "1433720"
  },
  {
    "text": "which we'll call the specific SMC handler so here is the example of this function which is basically checking the",
    "start": "1433720",
    "end": "1440440"
  },
  {
    "start": "1436000",
    "end": "1436000"
  },
  {
    "text": "argument so first it chicken that the buffer is not overlapping mistress on",
    "start": "1440440",
    "end": "1445600"
  },
  {
    "text": "then it checking that every devoting this buffer also not a relevant list razón so it's pretty safe to pass the",
    "start": "1445600",
    "end": "1451810"
  },
  {
    "text": "argument through this method because there is no recognized race condition because it's properly check first of all",
    "start": "1451810",
    "end": "1458440"
  },
  {
    "text": "the buffer and then it's read and check already world so but how does the check exactly implement the check implanted in",
    "start": "1458440",
    "end": "1464710"
  },
  {
    "text": "a way that there's a table wisdom protected ranges was supposed to be protected and then every two arguments",
    "start": "1464710",
    "end": "1472180"
  },
  {
    "text": "every pair two arguments is checking that they are not overlapping with the trans own interview assume that one will",
    "start": "1472180",
    "end": "1478540"
  },
  {
    "text": "be iris and Nasser will besides so we will check that X 2 X 3 is 3 X 4 and so on that they are not overlapping wisdom",
    "start": "1478540",
    "end": "1486390"
  },
  {
    "text": "with the TransAm memory all memory which doesn't want to protect so I was so Adam",
    "start": "1486390",
    "end": "1492220"
  },
  {
    "text": "mentioned this couple time there is a simcha table which is basically defining all of them services through SMC which",
    "start": "1492220",
    "end": "1498910"
  },
  {
    "text": "is implemented in a unit razón world insecure world and this we can find this",
    "start": "1498910",
    "end": "1506710"
  },
  {
    "text": "in in the binary decoded and figure out the type the number of argument and the",
    "start": "1506710",
    "end": "1512410"
  },
  {
    "text": "function pointer so we know how to call we know what how many arguments it takes and we can reverse-engineer entire",
    "start": "1512410",
    "end": "1519100"
  },
  {
    "text": "logical the specific SMC handler so here is the example of the specific SMC",
    "start": "1519100",
    "end": "1524170"
  },
  {
    "start": "1521000",
    "end": "1521000"
  },
  {
    "text": "handler as we see it doesn't have any sanity checks for arguments right here because the default",
    "start": "1524170",
    "end": "1530920"
  },
  {
    "text": "handler did enough validation so that the the specific handler which implement",
    "start": "1530920",
    "end": "1536740"
  },
  {
    "text": "specific services isn't not supposed to implement these checks but some of them actually implement the checks and",
    "start": "1536740",
    "end": "1542020"
  },
  {
    "text": "specially the one which takes the complete structure and the pointer inside this direction this specific",
    "start": "1542020",
    "end": "1547420"
  },
  {
    "text": "color is interesting because it has right primitive to the first argument to that SMC handler we will use it later on",
    "start": "1547420",
    "end": "1553960"
  },
  {
    "text": "but that's the kind of example another really important an interesting example",
    "start": "1553960",
    "end": "1559090"
  },
  {
    "text": "is that we can find all of the SMC",
    "start": "1559090",
    "end": "1564190"
  },
  {
    "text": "handlers which basically talks to the device in this case we got more information about what the system see",
    "start": "1564190",
    "end": "1569860"
  },
  {
    "text": "handler is how does it implemented what is doing and also we can explore more kind of in general how does the tazón",
    "start": "1569860",
    "end": "1578110"
  },
  {
    "text": "works another interesting things is we can we",
    "start": "1578110",
    "end": "1584230"
  },
  {
    "start": "1580000",
    "end": "1580000"
  },
  {
    "text": "can explore the code coverage based on error code there is some foe which",
    "start": "1584230",
    "end": "1589990"
  },
  {
    "text": "return different error codes so then when we run Pfizer's or take a look the",
    "start": "1589990",
    "end": "1595660"
  },
  {
    "text": "name our analysis we can see how many checks we pass and what kind of for execution we got so kind of useful trick",
    "start": "1595660",
    "end": "1603150"
  },
  {
    "start": "1603000",
    "end": "1603000"
  },
  {
    "text": "then there's a lot of things about the trans owned but also we want to take a look in the hypervisor in the hypervisor",
    "start": "1603150",
    "end": "1609580"
  },
  {
    "text": "be using the same methods we try to find",
    "start": "1609580",
    "end": "1615310"
  },
  {
    "text": "the VAR e l2 which is pointing to the vector table and from there we can",
    "start": "1615310",
    "end": "1620380"
  },
  {
    "text": "analyze the entry points to the privilege level code and then also we can use them a specific trust own",
    "start": "1620380",
    "end": "1627130"
  },
  {
    "text": "specific hypervisor in registers to find the hypervisor configuration and",
    "start": "1627130",
    "end": "1633130"
  },
  {
    "text": "understand like for example various TD br0 yo to register is and this registered",
    "start": "1633130",
    "end": "1639460"
  },
  {
    "text": "for example point into the stage 1 translation table so we can down the tables and see okay how how does the",
    "start": "1639460",
    "end": "1647130"
  },
  {
    "text": "hypervisor how does the type of hypervisor what configuration what is the",
    "start": "1647130",
    "end": "1654250"
  },
  {
    "text": "configuration of the hypervisor what of pee once it drops what kind of pay junk it has and so on so forth",
    "start": "1654250",
    "end": "1661049"
  },
  {
    "text": "from here the urea will continue this attack vectors based on already existing",
    "start": "1661049",
    "end": "1666510"
  },
  {
    "text": "knowledge so now we understand where is the entry points we understand who is person untrusted buffers now let's try",
    "start": "1666510",
    "end": "1673770"
  },
  {
    "text": "to understand how we can apply it to find interesting things in perspective",
    "start": "1673770",
    "end": "1678990"
  },
  {
    "text": "and ours thanks Alex okay enough of high-level details let's dive into the",
    "start": "1678990",
    "end": "1685770"
  },
  {
    "text": "actual attacks all right so so there are a number of attack vectors that are",
    "start": "1685770",
    "end": "1691289"
  },
  {
    "start": "1687000",
    "end": "1687000"
  },
  {
    "text": "possible against the chosen architecture that some researchers have already",
    "start": "1691289",
    "end": "1697200"
  },
  {
    "text": "explored a lot of these attack vectors so in in addition to what we are presenting we encourage you to read",
    "start": "1697200",
    "end": "1704419"
  },
  {
    "text": "publications and research by gal Benjamin E who has explored a lot of these attack vectors and exploited those",
    "start": "1704419",
    "end": "1711090"
  },
  {
    "text": "as well as other researchers so Dan Rosenberg has also been exerting that a",
    "start": "1711090",
    "end": "1717179"
  },
  {
    "text": "few years ago so what we have in terms of attack vectors alex described that we",
    "start": "1717179",
    "end": "1722520"
  },
  {
    "text": "have multiple protection layer levels in both the normal world as well as the chasm secure world so it in general a",
    "start": "1722520",
    "end": "1731850"
  },
  {
    "text": "concept that a more privileged level has to be protected from the less privileged",
    "start": "1731850",
    "end": "1738210"
  },
  {
    "text": "level and so in this case we're talking about a you know monitor monitor should",
    "start": "1738210",
    "end": "1745440"
  },
  {
    "text": "be protected from a normal world including from the hypervisor as well as within the secure world there has to be",
    "start": "1745440",
    "end": "1752909"
  },
  {
    "text": "protection of privileged layers against the components running and the less",
    "start": "1752909",
    "end": "1758250"
  },
  {
    "text": "privileged layers so for example monitor has to be protected from the secure kernel as well a secure kernel has to be",
    "start": "1758250",
    "end": "1764580"
  },
  {
    "text": "protect from trustless because it's possible to load trust less dynamically so they could be a there could be a",
    "start": "1764580",
    "end": "1769950"
  },
  {
    "text": "vulnerability or there the trust lets could exploit vulnerabilities and the kernel the secure kernel obviously the",
    "start": "1769950",
    "end": "1777510"
  },
  {
    "text": "scare world itself has to be protected from the normal world including from the traditional OS like Android",
    "start": "1777510",
    "end": "1784590"
  },
  {
    "text": "through let's say that could exploit secure world through your vulnerabilities in SMT interface or even",
    "start": "1784590",
    "end": "1790710"
  },
  {
    "text": "the you know some additional interfaces through a shared memory between the secure world and a normal world that",
    "start": "1790710",
    "end": "1798120"
  },
  {
    "text": "they can represent attack vectors and of course the last attack vector we're",
    "start": "1798120",
    "end": "1804690"
  },
  {
    "text": "exploring is the hypervisor broadening on a l2 has to be protected from the",
    "start": "1804690",
    "end": "1809899"
  },
  {
    "text": "Android kernel running on l1 so let's",
    "start": "1809899",
    "end": "1815309"
  },
  {
    "start": "1814000",
    "end": "1814000"
  },
  {
    "text": "explore some of the some of the vectors that we could apply to attack to attack either at razón or hypervisor so first",
    "start": "1815309",
    "end": "1823889"
  },
  {
    "text": "thing we could explore is device cinema ranges because every device has configuration and has a dedicated range",
    "start": "1823889",
    "end": "1829860"
  },
  {
    "text": "where the registers that is used to configure that device and so things that we well there are a number of devices",
    "start": "1829860",
    "end": "1836519"
  },
  {
    "text": "you can for example use praça IMM to see which devices are there like including",
    "start": "1836519",
    "end": "1844260"
  },
  {
    "text": "Wi-Fi card and other types of devices and find where the ranges are my ranges",
    "start": "1844260",
    "end": "1849600"
  },
  {
    "text": "for each device and thinks we we would look in those ranges or registers",
    "start": "1849600",
    "end": "1855929"
  },
  {
    "text": "accessible from different privileged and privilege levels from different Al levels registers accessible at different",
    "start": "1855929",
    "end": "1862049"
  },
  {
    "text": "stages of the system at both stage versus runtime stage or some interesting",
    "start": "1862049",
    "end": "1867389"
  },
  {
    "text": "values in those my registers like addresses or pointers that we can use",
    "start": "1867389",
    "end": "1872760"
  },
  {
    "text": "for attacks so we can use multiple methods to assess the whatever is in the Maya we could try to find specific",
    "start": "1872760",
    "end": "1879899"
  },
  {
    "text": "registers and a specific device and fuzz them test the values there where we could actually do checking of a non zero",
    "start": "1879899",
    "end": "1887610"
  },
  {
    "text": "and non F registers and and try to foster those in those registers so but",
    "start": "1887610",
    "end": "1894360"
  },
  {
    "text": "in terms of attack how we could use those own Maya ranges so the first thing we could we could do is the the number",
    "start": "1894360",
    "end": "1903450"
  },
  {
    "text": "of registers could contain addresses to structures or buffers in memory for example like debug buffer or gestation",
    "start": "1903450",
    "end": "1910320"
  },
  {
    "text": "table base register so basically the address is pointing to some SOC specific",
    "start": "1910320",
    "end": "1915870"
  },
  {
    "text": "word CPU specific then we can leverage to try to overlap",
    "start": "1915870",
    "end": "1921100"
  },
  {
    "text": "with protected memory with for example Chaz own or with a hypervisor for that",
    "start": "1921100",
    "end": "1926830"
  },
  {
    "text": "sake so this is a an interesting attack vector that sometimes gives a good gain",
    "start": "1926830",
    "end": "1933070"
  },
  {
    "text": "results on pretty much any architecture and so obviously the hardware should be",
    "start": "1933070",
    "end": "1939149"
  },
  {
    "text": "should be handling those cases and in you know it should be preventing the the",
    "start": "1939149",
    "end": "1945429"
  },
  {
    "text": "structures or buffers as soci or CPA specific structures from being overlap with with the privileged memory we could",
    "start": "1945429",
    "end": "1952960"
  },
  {
    "start": "1951000",
    "end": "1951000"
  },
  {
    "text": "explore DMA attacks with let's say Wi-Fi devices and researchers have explored",
    "start": "1952960",
    "end": "1959049"
  },
  {
    "text": "this with Brad bone and you know and again research by gal on using firmware",
    "start": "1959049",
    "end": "1966039"
  },
  {
    "text": "on the broken Wi-Fi cards to do the DMA attacks against a of the OS kernel as",
    "start": "1966039",
    "end": "1971500"
  },
  {
    "text": "well as potentially hypervisor so the hypervisor can employ another mechanism called iommu to prevent DMA attacks into",
    "start": "1971500",
    "end": "1980440"
  },
  {
    "text": "its memory the other attack vector that we could explore is what Al when alex",
    "start": "1980440",
    "end": "1985690"
  },
  {
    "text": "described that normal world has to communicate with the secure world and it does that using SMT interface so it",
    "start": "1985690",
    "end": "1991600"
  },
  {
    "text": "passes arguments to the SMC handlers through your general-purpose registers and so some of those arguments may",
    "start": "1991600",
    "end": "1997149"
  },
  {
    "text": "contain pointers or addresses so if SMC handler does not validate those address",
    "start": "1997149",
    "end": "2002519"
  },
  {
    "text": "as those addresses get point into the protected memory and this fact could somehow be used to force the SMC handler",
    "start": "2002519",
    "end": "2010830"
  },
  {
    "text": "or trick SMT handler to override its own memory its own structures and get code",
    "start": "2010830",
    "end": "2016710"
  },
  {
    "text": "education through that that kind of a right primitive this has been explored by both Dan Rosenberg in the past and",
    "start": "2016710",
    "end": "2023779"
  },
  {
    "text": "and Galba near me so for example if this",
    "start": "2023779",
    "end": "2029429"
  },
  {
    "start": "2027000",
    "end": "2027000"
  },
  {
    "text": "type of vulnerabilities could be found by let's say providing different addresses pointing to the to the",
    "start": "2029429",
    "end": "2034860"
  },
  {
    "text": "transient memory within the general-purpose registers in this case you can see that we are pointing a an",
    "start": "2034860",
    "end": "2040409"
  },
  {
    "text": "address in treszura on memory in X to argument and we're always getting the same error",
    "start": "2040409",
    "end": "2046120"
  },
  {
    "text": "f8 which is essentially indication that the trust own monitor were actually SMC",
    "start": "2046120",
    "end": "2052480"
  },
  {
    "text": "handlers there that they validate that that pointer and they do not do not allow overlapping that that pointer with",
    "start": "2052480",
    "end": "2060100"
  },
  {
    "text": "the treszura memory we could also explore race conditions so because you need to pass a lot a lot of structures",
    "start": "2060100",
    "end": "2066550"
  },
  {
    "text": "and you can do that through your memory in let's say Android memory and the SMC handlers would would read those",
    "start": "2066550",
    "end": "2073300"
  },
  {
    "text": "structures and interpret those and the structures might contain sizes or",
    "start": "2073300",
    "end": "2078850"
  },
  {
    "text": "pointers again and there could be a time of check time of use bugs where the the",
    "start": "2078850",
    "end": "2084490"
  },
  {
    "text": "SMC handler read it reads it once and then the the other logical CPU modifies the contents of that buffer and then the",
    "start": "2084490",
    "end": "2091149"
  },
  {
    "text": "SMT handler reads it another time and so basically we have a race condition issue",
    "start": "2091150",
    "end": "2096870"
  },
  {
    "text": "another interesting vector that we have explored is actually leveraging SMC",
    "start": "2096870",
    "end": "2102100"
  },
  {
    "text": "Handler as they confuse the ability to access security devices because the trust own can access security devices",
    "start": "2102100",
    "end": "2107170"
  },
  {
    "text": "but we cannot but we want to so what we could do is we could pass a a an address",
    "start": "2107170",
    "end": "2113590"
  },
  {
    "text": "in a general purpose register that is an address to the mm IO of a secure device",
    "start": "2113590",
    "end": "2119080"
  },
  {
    "text": "and if SMT Hamlet doesn't validate that pointer then or right let's say writes",
    "start": "2119080",
    "end": "2124900"
  },
  {
    "text": "to that device writes on my register to that device then we use that SMT Handler as a as a proxy to write something to",
    "start": "2124900",
    "end": "2132040"
  },
  {
    "text": "secure device that we otherwise don't have access to and this also can be checked so we've implemented the fuzzer",
    "start": "2132040",
    "end": "2138010"
  },
  {
    "text": "we basically pass address to every to the MMI of ranges of every secure device",
    "start": "2138010",
    "end": "2143410"
  },
  {
    "text": "in general-purpose registers in this case x2 and we you know we call it some",
    "start": "2143410",
    "end": "2149290"
  },
  {
    "text": "SMT handlers pause SMT handlers with with that with those arguments we also were getting on those particular systems",
    "start": "2149290",
    "end": "2156400"
  },
  {
    "text": "we were getting error codes that indicate that this the the SMT handlers also checked that so a little bit of a",
    "start": "2156400",
    "end": "2162610"
  },
  {
    "start": "2162000",
    "end": "2162000"
  },
  {
    "text": "bummer then we've started exploring hypervisors through the SMC handlers because we can use SMC handlers to write not to the SMC",
    "start": "2162610",
    "end": "2169900"
  },
  {
    "text": "to trust own memory but to the hypervisor memory because we shouldn't be able to access hypervisor memory",
    "start": "2169900",
    "end": "2176550"
  },
  {
    "text": "but the SMC could because it's running it's running on a higher privilege level",
    "start": "2176550",
    "end": "2181890"
  },
  {
    "text": "so we we basically took the hypervisor binary we've learned where it's loaded",
    "start": "2181890",
    "end": "2188970"
  },
  {
    "text": "in memory to the address and pointed that and one of the general purpose registers in the SMC Handler and so",
    "start": "2188970",
    "end": "2194640"
  },
  {
    "text": "we've we found out that the SMT a SMC handler actually wrote some valid that",
    "start": "2194640",
    "end": "2200430"
  },
  {
    "text": "we've passed to that memory where the hypervisor areas so that wasn't supposed",
    "start": "2200430",
    "end": "2205470"
  },
  {
    "text": "to happen but we've realized that there is an attack vector there hasn't been explored",
    "start": "2205470",
    "end": "2211530"
  },
  {
    "text": "much against the hypervisors versus the trust so this is what we started exploring as a the first thing we wanted",
    "start": "2211530",
    "end": "2218640"
  },
  {
    "start": "2216000",
    "end": "2216000"
  },
  {
    "text": "to realize is can we actually access the hypervisor so we scan memory physical",
    "start": "2218640",
    "end": "2224880"
  },
  {
    "text": "memory for they've a hypervisor binary and we found it and we could modify it well so we thought initially that this",
    "start": "2224880",
    "end": "2231960"
  },
  {
    "text": "is really a copy of the binary in memory because I mean yeah it's directly accessible directly writable by the",
    "start": "2231960",
    "end": "2237690"
  },
  {
    "text": "normal world by the by the kernel by the Android kernel in normal world which",
    "start": "2237690",
    "end": "2243030"
  },
  {
    "text": "isn't supposed to happen but when we modified the hypervisor the phone crashed the family booted so that was an",
    "start": "2243030",
    "end": "2248730"
  },
  {
    "text": "indication that we actually have the the real hypervisor that is you know handling exits from the Android kernel",
    "start": "2248730",
    "end": "2257240"
  },
  {
    "text": "and it got it executed our corrupted code and basically found rebooted so so",
    "start": "2257240",
    "end": "2264300"
  },
  {
    "start": "2263000",
    "end": "2263000"
  },
  {
    "text": "now we can patch that hypervisor and the attack that would work we can patch the hypervisor we can inject him but a",
    "start": "2264300",
    "end": "2270119"
  },
  {
    "text": "rootkit there so the attack would work by first well obviously we need to have some privileges of the Android kernel",
    "start": "2270119",
    "end": "2276720"
  },
  {
    "text": "and then we could directly write and modify certain structures or the code in the hypervisor we could running it l2 we",
    "start": "2276720",
    "end": "2284730"
  },
  {
    "text": "could also tell the hypervisor to start protecting itself from Android kernel so",
    "start": "2284730",
    "end": "2290310"
  },
  {
    "text": "that anyone else other than us couldn't wouldn't be able to to remove",
    "start": "2290310",
    "end": "2296000"
  },
  {
    "text": "that backdoor or a patch from within the hypervisor so at that point our patching",
    "start": "2296000",
    "end": "2301850"
  },
  {
    "text": "the hypervisor could intercept all the events including the SMC from both the",
    "start": "2301850",
    "end": "2307940"
  },
  {
    "text": "kernel as well as the applications in the in the VM one a one example of what",
    "start": "2307940",
    "end": "2313790"
  },
  {
    "text": "we could what we could implement and what we implemented is we could now have",
    "start": "2313790",
    "end": "2319790"
  },
  {
    "text": "a backdoor functionality in the in the hypervisor that provides access to all of the memory including kernel memory to",
    "start": "2319790",
    "end": "2326390"
  },
  {
    "text": "the applications so this the specific target that we have chosen to filter to",
    "start": "2326390",
    "end": "2334370"
  },
  {
    "start": "2329000",
    "end": "2329000"
  },
  {
    "text": "to patch was actually the l2 vector table that Alex described vector table",
    "start": "2334370",
    "end": "2339830"
  },
  {
    "text": "has a number of interrupt vectors and so basically one of the interrupt is as is",
    "start": "2339830",
    "end": "2347810"
  },
  {
    "text": "invoked periodically so and when when it when it executes that periodic interrupt",
    "start": "2347810",
    "end": "2355220"
  },
  {
    "text": "then it calls certain function that we have patched at the at the answer or our backdoor code is is at the end of that",
    "start": "2355220",
    "end": "2362210"
  },
  {
    "text": "function at the bottom but we also returned to the original code so that nothing nothing bad happens not nothing",
    "start": "2362210",
    "end": "2368480"
  },
  {
    "text": "crashes on the film so let's let's let's do a quick demo of how we actually did",
    "start": "2368480",
    "end": "2376880"
  },
  {
    "text": "that so right now you can you can see that yeah we have an LG LG based film 5x",
    "start": "2376880",
    "end": "2387560"
  },
  {
    "text": "we're also running a arch 64 so what we do is we try to read kernel memory this",
    "start": "2387560",
    "end": "2394430"
  },
  {
    "text": "is a read kernel memory remember the RMD string with the kernel around kernel driver",
    "start": "2394430",
    "end": "2399740"
  },
  {
    "text": "now we round the malicious application that basically implements that protocol where the hypervisor telling it which",
    "start": "2399740",
    "end": "2406340"
  },
  {
    "text": "address it wants to read then we run the exploit and the exploit patches the",
    "start": "2406340",
    "end": "2411650"
  },
  {
    "text": "hypervisor catches the vector table and then we wait until that in patched interrupt occurs so just one second so",
    "start": "2411650",
    "end": "2419090"
  },
  {
    "text": "basically when the interrupting is executed executed our patched coat and it's signaled our application that hey",
    "start": "2419090",
    "end": "2425690"
  },
  {
    "text": "I've executed a backdoor code and here's the contents of the memory a",
    "start": "2425690",
    "end": "2430910"
  },
  {
    "text": "kernel memory at the address that you've asked me to to don't you to read and so",
    "start": "2430910",
    "end": "2436460"
  },
  {
    "text": "basically the application the the buffer at the top the it's the it's the buffer",
    "start": "2436460",
    "end": "2441590"
  },
  {
    "text": "of the kernel memory the hypervisor provided to the application and the buffer at the bottom is the same memory",
    "start": "2441590",
    "end": "2446840"
  },
  {
    "text": "just double-checking the with our own driver that we that we actually get the",
    "start": "2446840",
    "end": "2452630"
  },
  {
    "text": "same the same kernel memory as as the application so so this is a this is the",
    "start": "2452630",
    "end": "2461870"
  },
  {
    "text": "backdoor that we we have added there obviously plenty of capabilities to add",
    "start": "2461870",
    "end": "2467210"
  },
  {
    "text": "more functionality into the backdoor this is a very simple demo of what we could have we could do with the with the",
    "start": "2467210",
    "end": "2474470"
  },
  {
    "text": "with the back door at the hypervisor level we could also protect it this is",
    "start": "2474470",
    "end": "2479750"
  },
  {
    "text": "probably an exercise for next time but we could also protect the hypervisor from all of the all the kernels so that",
    "start": "2479750",
    "end": "2485840"
  },
  {
    "text": "the kernel code cannot see that the backdoor is there so this has been changed in Snapdragon 808 21 SOC where",
    "start": "2485840",
    "end": "2497240"
  },
  {
    "text": "the the the kernel l1 code is not within",
    "start": "2497240",
    "end": "2502280"
  },
  {
    "text": "the trust boundary of the hypervisor anymore running at the yell to because that that is the root of the of the",
    "start": "2502280",
    "end": "2508490"
  },
  {
    "text": "problem on the previous associates is that the the kernel code is considered",
    "start": "2508490",
    "end": "2514670"
  },
  {
    "text": "as part of the trust boundary of the hypervisor so the kernel exploit can modify hypervisor and install whatever",
    "start": "2514670",
    "end": "2521570"
  },
  {
    "text": "backdoor at once so it's no longer it's no longer works on Google pixel so for",
    "start": "2521570",
    "end": "2527600"
  },
  {
    "text": "example in this case we're trying to read the hypervisor memory from Android",
    "start": "2527600",
    "end": "2533000"
  },
  {
    "text": "kernel and even read even read doesn't doesn't work we also try to use SMC",
    "start": "2533000",
    "end": "2540500"
  },
  {
    "text": "handler that we have used to modify hypervisor before and it also doesn't",
    "start": "2540500",
    "end": "2546230"
  },
  {
    "text": "work it returns that f8 error code indicating that the this was some sort",
    "start": "2546230",
    "end": "2552470"
  },
  {
    "text": "of invalid SMC a request so so it doesn't work from through the SMC",
    "start": "2552470",
    "end": "2557750"
  },
  {
    "text": "handler either so yeah the conclusion is it's not a it's not an",
    "start": "2557750",
    "end": "2565339"
  },
  {
    "start": "2560000",
    "end": "2560000"
  },
  {
    "text": "implementation vulnerability it's not an Immelmann ability and the hypervisor itself it's not a vulnerability in the",
    "start": "2565339",
    "end": "2570660"
  },
  {
    "text": "tread zone it is a it is a kind of weakness in the architecture that have",
    "start": "2570660",
    "end": "2577079"
  },
  {
    "text": "considered the OS kernel the Android kernel being part of the trust trust",
    "start": "2577079",
    "end": "2582839"
  },
  {
    "text": "TCB trans boundary for the hypervisor and allowed it to modify hypervisor",
    "start": "2582839",
    "end": "2588059"
  },
  {
    "text": "install the backdoor and then basically intercept all the all the events from the from the kernel and applications the",
    "start": "2588059",
    "end": "2596690"
  },
  {
    "text": "the hypervisor can still be attacked on older chipsets but this has been",
    "start": "2596690",
    "end": "2601920"
  },
  {
    "text": "mitigated this has been changed on than yours newest chipsets so and the",
    "start": "2601920",
    "end": "2607589"
  },
  {
    "text": "virtualization tickets can be installed on the on the old systems so yeah and",
    "start": "2607589",
    "end": "2612599"
  },
  {
    "text": "the I guess the other conclusion for us is there is that there the similar",
    "start": "2612599",
    "end": "2617910"
  },
  {
    "text": "attack vectors that work on other architectures such as x86 where the",
    "start": "2617910",
    "end": "2623099"
  },
  {
    "text": "pointers with the overlapping ranges they also are they are also applicable to our architecture and can be used to",
    "start": "2623099",
    "end": "2630349"
  },
  {
    "text": "to explore vulnerabilities and the hypervisor on ARM based systems as well",
    "start": "2630349",
    "end": "2636539"
  },
  {
    "text": "as the trans own on ARM based systems so with that we thank you for listening to",
    "start": "2636539",
    "end": "2646559"
  },
  {
    "text": "the presentation hope you learned something from it and we have a few",
    "start": "2646559",
    "end": "2651569"
  },
  {
    "text": "minutes for questions yes",
    "start": "2651569",
    "end": "2658430"
  },
  {
    "text": "No yes the question was is it applicable",
    "start": "2663310",
    "end": "2669590"
  },
  {
    "text": "to the air pol system no that was focusing on just Android based system unfortunately we don't",
    "start": "2669590",
    "end": "2682810"
  },
  {
    "text": "all right I think means everyone [Applause]",
    "start": "2692770",
    "end": "2699389"
  }
]