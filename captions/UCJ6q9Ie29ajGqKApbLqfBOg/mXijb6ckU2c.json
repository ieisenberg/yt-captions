[
  {
    "text": "all right good morning everyone hi I'm Marius and I'm Dion and let's Dive Right",
    "start": "2639",
    "end": "9040"
  },
  {
    "text": "In into our talk overcoming State finding basement vulnerabilities by fuzzing rayer",
    "start": "9040",
    "end": "15080"
  },
  {
    "text": "2 let's look into what the next 35 40 minutes will be about we will be talking",
    "start": "15080",
    "end": "21400"
  },
  {
    "text": "about Bas bands on uh smartphones about emulating them and fast testing them and",
    "start": "21400",
    "end": "27599"
  },
  {
    "text": "in contrast to Prior work we will focus on Fast testing layer two of the S",
    "start": "27599",
    "end": "32920"
  },
  {
    "text": "stack we will also talk a bit about the F the challenges that we had to face for example actually constructing the",
    "start": "32920",
    "end": "39440"
  },
  {
    "text": "fussing Tas um dealing with the fussing road blocks and also how we actually",
    "start": "39440",
    "end": "44600"
  },
  {
    "text": "confirm the results from our fuzzing experiments over the air and after overcoming this challenges",
    "start": "44600",
    "end": "51800"
  },
  {
    "text": "we actually see something like this connection bars going to a connection disappearing we triggered uh crashes",
    "start": "51800",
    "end": "59239"
  },
  {
    "text": "over the air on real phones and one very interesting fact about this is also so",
    "start": "59239",
    "end": "65119"
  },
  {
    "text": "we fast tested or aimed our fuzzing at layer 2 all the crushes we found were located in layer",
    "start": "65119",
    "end": "70759"
  },
  {
    "text": "3 but now let's take a step back and talk a little bit about Bas BS in",
    "start": "70759",
    "end": "76280"
  },
  {
    "text": "smartphones itself so Bas bins typically consist of a collection of processors uh",
    "start": "76280",
    "end": "81880"
  },
  {
    "text": "the main two processors are the appc the application processor or the AP and the",
    "start": "81880",
    "end": "87079"
  },
  {
    "text": "cellular processor or the CP the AP is is um mostly responsible for running",
    "start": "87079",
    "end": "92840"
  },
  {
    "text": "things as Android and the CP is responsible for dealing with all radio connectivity uh throughout this talk we",
    "start": "92840",
    "end": "99280"
  },
  {
    "text": "will refer to uh the CP as the basement and the basement itself consists of",
    "start": "99280",
    "end": "104840"
  },
  {
    "text": "millions and millions and millions of lines of Highly proprietary code um it also implements most of the uh layers of",
    "start": "104840",
    "end": "112560"
  },
  {
    "text": "the communication stack um and it contains lots and lots of Legacy code interesting parsers uh interesting",
    "start": "112560",
    "end": "119920"
  },
  {
    "text": "functions in general and really obse secure features um but more importantly the basement is also um uh can be",
    "start": "119920",
    "end": "127960"
  },
  {
    "text": "reached with over the air package and also internet package making it a really interesting attack surface to look",
    "start": "127960",
    "end": "134040"
  },
  {
    "text": "at so how do cellular base bands on CP um Implement all of the different",
    "start": "134040",
    "end": "141200"
  },
  {
    "text": "functionalities these cellular processors run custom firmware most of the time they deploy a real-time",
    "start": "141200",
    "end": "146760"
  },
  {
    "text": "operating system or air TS and short and the iOS is responsible for two main",
    "start": "146760",
    "end": "152920"
  },
  {
    "text": "functionalities first of all it provides the core operating system functionalities so everything which you",
    "start": "152920",
    "end": "158640"
  },
  {
    "text": "would expect from an OS it provides aular timers interrupts and so on it",
    "start": "158640",
    "end": "163840"
  },
  {
    "text": "also provides the notion of tasks which are basically um what we would call on desktop uh operating systems uh",
    "start": "163840",
    "end": "171319"
  },
  {
    "text": "processors and these tasks can interact with each other via messaging mechanisms",
    "start": "171319",
    "end": "176640"
  },
  {
    "text": "provided by the a the then the firmware running on the CP implements a large chunks of the",
    "start": "176640",
    "end": "184239"
  },
  {
    "text": "cellular stack for doing so what we see is that the cellular stack is split into",
    "start": "184239",
    "end": "190040"
  },
  {
    "text": "these different tasks and these tasks communicate with each other using the message cues provided by the operating",
    "start": "190040",
    "end": "196239"
  },
  {
    "text": "systems so messages which come in over the air to a cell Bas band will be dispatched by the different task and",
    "start": "196239",
    "end": "202840"
  },
  {
    "text": "passed across the different stack by traversing the message via the tasks so recently we've seen a very",
    "start": "202840",
    "end": "209439"
  },
  {
    "text": "awesome shift in doing basement research so on the slides we've only shown a few examples of basement research only from",
    "start": "209439",
    "end": "216480"
  },
  {
    "text": "this year and the year before so as you can see there are quite a lot for example the over theair uh under the",
    "start": "216480",
    "end": "222120"
  },
  {
    "text": "radar talk blackout talk from last year and the cracking the 5G for for to St from yesterday at",
    "start": "222120",
    "end": "228120"
  },
  {
    "text": "blackhead and what about our research so when we started looking in the research",
    "start": "228120",
    "end": "233760"
  },
  {
    "text": "we're presenting today we were looking at the state-ofthe-art and we were basically noticing that most",
    "start": "233760",
    "end": "240280"
  },
  {
    "text": "of the works out there especially in terms of finding memory vulnerabilities and memory Corruptions we focusing on",
    "start": "240280",
    "end": "246400"
  },
  {
    "text": "cellular layer three or higher we will come to what are the different layers in uh the next slide so please be with me",
    "start": "246400",
    "end": "252959"
  },
  {
    "text": "for a second also if we just look at the talks",
    "start": "252959",
    "end": "258120"
  },
  {
    "text": "and works from last year and this year 2023 2024 we only see two um Works which",
    "start": "258120",
    "end": "265040"
  },
  {
    "text": "actually were involving some sort of Layer Two vulnerabilities five gou did some over theair fuzzing which also",
    "start": "265040",
    "end": "272440"
  },
  {
    "text": "yield to the discovery of bucks in layer 2 and the work there will be bucks",
    "start": "272440",
    "end": "277520"
  },
  {
    "text": "exploiting Bas band In Radio layer 2 by the people from Tusk did involve actual exploitation of Layer Two Bucks but when",
    "start": "277520",
    "end": "284759"
  },
  {
    "text": "we started our work this were not available so we were thinking hey let's",
    "start": "284759",
    "end": "289919"
  },
  {
    "text": "have a look at layer to ourselves in cellular basements and we went the approach of",
    "start": "289919",
    "end": "295880"
  },
  {
    "text": "going for the lowest hanging fruit so we decided to select let's look at GSM",
    "start": "295880",
    "end": "302120"
  },
  {
    "text": "layer 2 so GSM is 2G and from an attacker perspective this gives quite",
    "start": "302120",
    "end": "307240"
  },
  {
    "text": "some interesting uh capabilities because in contrast to more recent cellular Generations like 4G or 5G there's no",
    "start": "307240",
    "end": "314639"
  },
  {
    "text": "Mutual authentication between the phone and the base station so attackers can easily spin up a rogue base station and",
    "start": "314639",
    "end": "321080"
  },
  {
    "text": "make the phone connect to it also we decided let's go for fuzz",
    "start": "321080",
    "end": "326400"
  },
  {
    "text": "testing or fuzzing because fuzzing has just been proven very efficient in finding those type of bucks we were",
    "start": "326400",
    "end": "332479"
  },
  {
    "text": "interested in to look at now I already said it we want to look",
    "start": "332479",
    "end": "339479"
  },
  {
    "text": "a little bit at the GSM or 2G protocol stack to understand more where our work is actually based so like any network",
    "start": "339479",
    "end": "346720"
  },
  {
    "text": "deack the lowest layer layer one actually deals with a physical layer no big surprises here the maybe only",
    "start": "346720",
    "end": "353240"
  },
  {
    "text": "difference to more to other network deck is that here the physical layer is obviously over the air as we're deing",
    "start": "353240",
    "end": "359759"
  },
  {
    "text": "with radio communication so the file layer gets incoming packets and passes them on up to the data link layer the",
    "start": "359759",
    "end": "366440"
  },
  {
    "text": "layer two in the GSM cellular stack this layer is a so-called lpdm or link access",
    "start": "366440",
    "end": "372880"
  },
  {
    "text": "protocol on the DM Channel and all it does is basically taking these different",
    "start": "372880",
    "end": "378000"
  },
  {
    "text": "frames which were coming over the a concatenating them and passing them up to the layer three and Layer Three is",
    "start": "378000",
    "end": "385680"
  },
  {
    "text": "what basically makes a phone a phone so all the things you would expect phone to do there is a radio Resource Management",
    "start": "385680",
    "end": "392880"
  },
  {
    "text": "suplayer which is responsible for dealing with the radio channel there's a Mobility management sub layer which",
    "start": "392880",
    "end": "399039"
  },
  {
    "text": "holds for instance information about the network and the network name and so on and a connection management sub layer",
    "start": "399039",
    "end": "405360"
  },
  {
    "text": "which provides the actual phone functionalities so CM or connection management is further distinct in three",
    "start": "405360",
    "end": "411800"
  },
  {
    "text": "other sub layers CC for call control so if you pick up your phone and do a call we are 2G this is uh the message which",
    "start": "411800",
    "end": "419319"
  },
  {
    "text": "will which will be traversed and go the sub layer we're getting at then there's SMS the short messaging service sub",
    "start": "419319",
    "end": "425919"
  },
  {
    "text": "layer and the SS the supplementary services and the supplementary Services",
    "start": "425919",
    "end": "431440"
  },
  {
    "text": "help the other tasks or help the other supplers to implement additional functionality for instance one can uh",
    "start": "431440",
    "end": "438039"
  },
  {
    "text": "set up call forwarding we are the supplemental R Services okay so now we know a bit about",
    "start": "438039",
    "end": "445000"
  },
  {
    "text": "the GSM protocols stack itself let's talk a bit about GSM layer 2 as that that will be also our Target so we start",
    "start": "445000",
    "end": "452080"
  },
  {
    "text": "with a single ldm frame now the single ldm frame consists of the following struct it contains three header fields",
    "start": "452080",
    "end": "459800"
  },
  {
    "text": "which is the address field the control field and the length field and then there is the information field the",
    "start": "459800",
    "end": "464919"
  },
  {
    "text": "information field is typically from an attacker specif perspective um the most",
    "start": "464919",
    "end": "470039"
  },
  {
    "text": "interesting part because this contains the most information the problem is that the information field in a single ldm",
    "start": "470039",
    "end": "476280"
  },
  {
    "text": "frame is very limited in size so one of the main functionality of the lbdm layer",
    "start": "476280",
    "end": "481919"
  },
  {
    "text": "is to be able to concatenate all these individual individual lbdm frames to do this you have to do you have to supply",
    "start": "481919",
    "end": "488800"
  },
  {
    "text": "the right encoding in the length frame because this contains a bit that will let the basement know that it should",
    "start": "488800",
    "end": "493840"
  },
  {
    "text": "concatenate all these frames so the RR task is the first first task that will actually receive this uh concatenated",
    "start": "493840",
    "end": "501120"
  },
  {
    "text": "ldm frame the RR task will then look at the protocol discriminator the protocol",
    "start": "501120",
    "end": "507120"
  },
  {
    "text": "discriminator is the first bite of the information field and from the example here you can see that if the protocol",
    "start": "507120",
    "end": "512760"
  },
  {
    "text": "discriminator is unequal to six it will forward it to the mm task if it's equal to six the RR task will actually already",
    "start": "512760",
    "end": "519800"
  },
  {
    "text": "parse the message itself now the mm task has sort of the same job as the RR task",
    "start": "519800",
    "end": "525120"
  },
  {
    "text": "it will again look at this protocol discriminator and based on this value it will either U forward it to the CC task",
    "start": "525120",
    "end": "530959"
  },
  {
    "text": "so if the protocol discriminator is equal to fre if it's equal to hex B it will forward it to the SS task and if",
    "start": "530959",
    "end": "536480"
  },
  {
    "text": "it's equal to 9 it will forward it to the SMS task and finally if it's equal to five the message will actually stay",
    "start": "536480",
    "end": "542760"
  },
  {
    "text": "in the mm Tusk and the mm Tusk itself will actually parse the message so the",
    "start": "542760",
    "end": "548079"
  },
  {
    "text": "the uh Parts depicted in red are the layer two functionality and the part depicted in green is the layer three",
    "start": "548079",
    "end": "555560"
  },
  {
    "text": "functionality now having looked a little bit at basement itself the cell stack and GSM layer 2 and three let's talk",
    "start": "555560",
    "end": "562440"
  },
  {
    "text": "about our approach to fuzzing so there are many approaches to actually fuz the",
    "start": "562440",
    "end": "567480"
  },
  {
    "text": "first one would be to fuz a single function so these are called single function fuzzers",
    "start": "567480",
    "end": "574440"
  },
  {
    "text": "and for example in a basement this will be the ASN decoding um so these fers",
    "start": "574440",
    "end": "579959"
  },
  {
    "text": "will only F the ASN decoding a bit more advanced fuzer will actually F the whole",
    "start": "579959",
    "end": "585959"
  },
  {
    "text": "task itself so in this case it will be the CC task and the CC if the CC task were to uh implement the ASN decoding",
    "start": "585959",
    "end": "593920"
  },
  {
    "text": "the fuzzer will reach the ASN decoding but the fuzzer will also reach the other functionality of the task and we can do",
    "start": "593920",
    "end": "599880"
  },
  {
    "text": "this for the CC task but we can also do this for other layer three tasks our approach however we want to fost the",
    "start": "599880",
    "end": "606160"
  },
  {
    "text": "layer two task and with the scheme that we shown before we think that it should be possible to let the basement forward",
    "start": "606160",
    "end": "613959"
  },
  {
    "text": "our message so the idea here is that we fast labd M task and then with this logic of the protocol discriminator the",
    "start": "613959",
    "end": "620320"
  },
  {
    "text": "basement will forward the message for us to for example the r task the mm task but also the task that were further down",
    "start": "620320",
    "end": "627720"
  },
  {
    "text": "in the protocol stack such as the C and the SMS TK for fuzzing itself we decided to use",
    "start": "627720",
    "end": "634880"
  },
  {
    "text": "the firmware framework which is a full system band emulation framework it's",
    "start": "634880",
    "end": "640360"
  },
  {
    "text": "open source and was released in 2022 and what it allows us to do is to take the",
    "start": "640360",
    "end": "645800"
  },
  {
    "text": "cellular modem firmware which usually runs on the phone and implements a cellular stack take this out of the",
    "start": "645800",
    "end": "651720"
  },
  {
    "text": "phone and put it inside an analysis host and this analysis host can run can then",
    "start": "651720",
    "end": "657200"
  },
  {
    "text": "run the firmware um obviously not with the physical parts of the cellular stack",
    "start": "657200",
    "end": "662360"
  },
  {
    "text": "because there's no notion of this in the emulation but the layers above can be emulated with a full system emulation",
    "start": "662360",
    "end": "671079"
  },
  {
    "text": "approach firm wire allows us to inject packets to the different tasks and so",
    "start": "671079",
    "end": "676800"
  },
  {
    "text": "the different sub layers of the cell stack and allows the task to process our inputs which we provide to the emulated",
    "start": "676800",
    "end": "683399"
  },
  {
    "text": "cell stack additionally firmware all firm wire allows us to extend the",
    "start": "683399",
    "end": "688600"
  },
  {
    "text": "basement FM Ware by adding and injecting our own tasks into the cell stack so we",
    "start": "688600",
    "end": "694120"
  },
  {
    "text": "can actually dispatch and change the functionality of the basement as we want to using this approach of full system",
    "start": "694120",
    "end": "700600"
  },
  {
    "text": "emulation provides us different advantages which are crucial for our approach first of all FM wire gives us",
    "start": "700600",
    "end": "707440"
  },
  {
    "text": "outof the box analyzable lock messages so especially in contrast to over thee a fuzzing we can easily see what's going",
    "start": "707440",
    "end": "714480"
  },
  {
    "text": "on it also provides coverage tracking and has indeed an AF Plus+ integration",
    "start": "714480",
    "end": "720440"
  },
  {
    "text": "so we can easily set up a further without additional engineering and most importantly as we attempt to fuss the",
    "start": "720440",
    "end": "728440"
  },
  {
    "text": "full cellular stack by injecting from Layer Two FM wire and full system emulation as",
    "start": "728440",
    "end": "734839"
  },
  {
    "text": "it emulates everything provides already the task interaction so by default if a message kicks in or results into",
    "start": "734839",
    "end": "743199"
  },
  {
    "text": "forwarding of messages to yet other tasks in the deck this is already supported and will be emulated as well",
    "start": "743199",
    "end": "750000"
  },
  {
    "text": "so a fuzzing task itself in firm wi is written in C there is an AFL rapper present to deal with the fuzzing itself",
    "start": "750000",
    "end": "757920"
  },
  {
    "text": "uh but the thing here is that the fuzing task itself actually appears as an ordinary task according to the basement",
    "start": "757920",
    "end": "763680"
  },
  {
    "text": "because the task itself is injected into the realtime operating system and the nice part about this is that you can",
    "start": "763680",
    "end": "770120"
  },
  {
    "text": "also use the basb functionality so a fuzzing task itself will consist of two",
    "start": "770120",
    "end": "775279"
  },
  {
    "text": "steps an initialization step and a fuzing step and the initi ization step is necessary because some task require a",
    "start": "775279",
    "end": "782920"
  },
  {
    "text": "state that is more stateful than the right after boot state that we get from firm wire so if we look at the example",
    "start": "782920",
    "end": "788920"
  },
  {
    "text": "of the fast single setup we see two functions a p m aloc and a PA message",
    "start": "788920",
    "end": "794000"
  },
  {
    "text": "send to and these are actually functions from the basement so the Paul m aloc is just an allocation function from the",
    "start": "794000",
    "end": "800600"
  },
  {
    "text": "basement and the Paul message sent to is a function to um that you uh give your",
    "start": "800600",
    "end": "807240"
  },
  {
    "text": "uh fuzzing input or your input itself and it will actually put your data into the queue of the of the task that you're",
    "start": "807240",
    "end": "814279"
  },
  {
    "text": "targeting um so we need to allocate an item St we need to set some magic bites and then send it to the task that we're",
    "start": "814279",
    "end": "820839"
  },
  {
    "text": "interested in to initialize the task so we also have the fuzing itself so the",
    "start": "820839",
    "end": "825880"
  },
  {
    "text": "fing the fast input uh we get that from AFL and it's really similar to the",
    "start": "825880",
    "end": "831000"
  },
  {
    "text": "initialization step but now we actually have a mem copy of our fast input into the item struct and then we again use",
    "start": "831000",
    "end": "837880"
  },
  {
    "text": "this pul message send to to send our fast input to the task that we're interested",
    "start": "837880",
    "end": "843880"
  },
  {
    "text": "in so which firmwares did we actually Target with our initial fuzzing campaigns we looked at ainos based",
    "start": "843880",
    "end": "850880"
  },
  {
    "text": "firmware because these are supported by the firmware framework and we looked at two firmwares uh in the very beginning",
    "start": "850880",
    "end": "858040"
  },
  {
    "text": "for our fuzzing campaigns first of all we selected a firmware from the Motorola One Vision which is the latest firmware",
    "start": "858040",
    "end": "864880"
  },
  {
    "text": "there is available for this particular phone the phone was released in 2019 the firmware is from 2022 and we choose this",
    "start": "864880",
    "end": "872199"
  },
  {
    "text": "Target because we already did some reverse engineering with it we worked with it before so we are quite familiar",
    "start": "872199",
    "end": "877480"
  },
  {
    "text": "with how it looks like and also the Motorola 1 vision is a phone which is easily available for not a lot of money",
    "start": "877480",
    "end": "884360"
  },
  {
    "text": "so good Target to start your research with then we also looked into the Galaxy",
    "start": "884360",
    "end": "890199"
  },
  {
    "text": "s10e uh with a firmware from March 2023 so the latest which was available at the",
    "start": "890199",
    "end": "895240"
  },
  {
    "text": "time of our research and we decided to look at this firmware because because it's the latest like the phone is the",
    "start": "895240",
    "end": "901320"
  },
  {
    "text": "latest model supported by firm wire there has been some changes in cell stack implementation so that firm wire",
    "start": "901320",
    "end": "907240"
  },
  {
    "text": "would not emulate more recent phones that's why we use this but also as it's",
    "start": "907240",
    "end": "912320"
  },
  {
    "text": "a firmware version which is released after the firm wi work was published all the Bucks which were found by that work",
    "start": "912320",
    "end": "918320"
  },
  {
    "text": "are already patched in the firmware so we were hopeful that we would only find",
    "start": "918320",
    "end": "923480"
  },
  {
    "text": "new findings okay this is more or less the fuzzing setup firm wire fuzzing tasks",
    "start": "923480",
    "end": "931160"
  },
  {
    "text": "and uh certain firmware images what were the challenges we had to overcome to",
    "start": "931160",
    "end": "936279"
  },
  {
    "text": "actually make our fuzzing working in a nutshell there were three challenges first we needed to create the",
    "start": "936279",
    "end": "943360"
  },
  {
    "text": "fuzzing task so we needed to make Layer Two fuzzing actually happen then we needed to deal with a complex basement",
    "start": "943360",
    "end": "950160"
  },
  {
    "text": "State basements are highly stateful and we needed to yeah get the state right",
    "start": "950160",
    "end": "956360"
  },
  {
    "text": "which is equivalent to overcoming fuzzing roadblocks and lastly we just saw that",
    "start": "956360",
    "end": "962360"
  },
  {
    "text": "the firmware images we targeted were from somewhat outdated phones maybe not the most recent firmwares so we actually",
    "start": "962360",
    "end": "968519"
  },
  {
    "text": "needed to look into how we can make sure that our findings if there were any would apply to Modern phones as",
    "start": "968519",
    "end": "975920"
  },
  {
    "text": "well so let's start looking into challenge number one creating the fuzzing task as said before our goal is",
    "start": "975920",
    "end": "983240"
  },
  {
    "text": "to start fuzzing from the lap DM task so Layer Two and having our fuzzing input",
    "start": "983240",
    "end": "988279"
  },
  {
    "text": "traversing the full cellular stack upwards from there and for doing so we need to initialize all tasks on the way",
    "start": "988279",
    "end": "995759"
  },
  {
    "text": "and this involves reverse engineering because we need to find magic constants like here's a header operation 2 uh or",
    "start": "995759",
    "end": "1002600"
  },
  {
    "text": "the message group to make sure that the task we want to initialize actually do process the initialization message and",
    "start": "1002600",
    "end": "1008800"
  },
  {
    "text": "are ready to receive further input here's the code for doing this for the RR task but of course we also had to do",
    "start": "1008800",
    "end": "1014800"
  },
  {
    "text": "it for the mm task the CC task the S task and the SMS task and in each of",
    "start": "1014800",
    "end": "1021360"
  },
  {
    "text": "these cases these constant were different and it was basically spending some time reverse engineering the",
    "start": "1021360",
    "end": "1026400"
  },
  {
    "text": "basement filw so then we thought hey all our tasks are",
    "start": "1026400",
    "end": "1031798"
  },
  {
    "text": "initialized let's start fuzzing let's try and see what happens unfortunately the fuzzing was",
    "start": "1031799",
    "end": "1038600"
  },
  {
    "text": "not successful yet and let's have a look in what actually happened by taking one of the test cases we found and replay",
    "start": "1038600",
    "end": "1045720"
  },
  {
    "text": "them and looking at the locks so here's again our fuzzing plan we want to fuz Layer Two go through the",
    "start": "1045720",
    "end": "1052520"
  },
  {
    "text": "stack and we inject our fuzzing input to the lpdm to the layer two Tusk and we",
    "start": "1052520",
    "end": "1058400"
  },
  {
    "text": "can see some processing is happening also especially noteworthy there is some notion of add conquet buff so the frame",
    "start": "1058400",
    "end": "1065440"
  },
  {
    "text": "concatenation is working as expected our fuzzing inputs is concatenated and",
    "start": "1065440",
    "end": "1071000"
  },
  {
    "text": "processed by the GB D task and is forwarded up we have the poll message sent to call which is the basement way",
    "start": "1071000",
    "end": "1077880"
  },
  {
    "text": "to send messages to the uh R task the r task takes this inputs",
    "start": "1077880",
    "end": "1084480"
  },
  {
    "text": "processes this as well and forwards it up to the mm task now with mm task we see something",
    "start": "1084480",
    "end": "1091720"
  },
  {
    "text": "unfortunate we see a trap message with three exclamation marks",
    "start": "1091720",
    "end": "1097240"
  },
  {
    "text": "afterwards so something is going wrong here and the trap message tells us there's an invalent request for this",
    "start": "1097240",
    "end": "1103000"
  },
  {
    "text": "state in mm thecode R data indicator message so we initialized all stat",
    "start": "1103000",
    "end": "1109280"
  },
  {
    "text": "we initialized all tasks but we are not able to proceed with a fuzzing yet which",
    "start": "1109280",
    "end": "1114320"
  },
  {
    "text": "brings us to challenge number two okay so what do we actually mean with state state can be seen as general fuzzing",
    "start": "1114320",
    "end": "1120640"
  },
  {
    "text": "roadblocks this is also the state of our uh presentation title and the first step would be how would you identify this",
    "start": "1120640",
    "end": "1127600"
  },
  {
    "text": "state right so in this example it's pretty straightforward because we have our log message so the log message say",
    "start": "1127600",
    "end": "1134280"
  },
  {
    "text": "that apparently the mm is the mm task is in the wrong state so on the slides you",
    "start": "1134280",
    "end": "1139559"
  },
  {
    "text": "will see a gidra uh decompilation and we know where this",
    "start": "1139559",
    "end": "1144640"
  },
  {
    "text": "trap message is printed so we can use gidra to back trace and then we see this decompiled output so on the slides we",
    "start": "1144640",
    "end": "1151600"
  },
  {
    "text": "see that the uh basement starts with a MM get State call and based on this",
    "start": "1151600",
    "end": "1157080"
  },
  {
    "text": "value it there is a switch and if the value is not correct the basement will print the strap message so the mm get",
    "start": "1157080",
    "end": "1164120"
  },
  {
    "text": "State call is actually fairly simple function because it only D references a certain memory address so note this",
    "start": "1164120",
    "end": "1170919"
  },
  {
    "text": "memory address is uh in in this example specific to the Galaxy S10 e but so this",
    "start": "1170919",
    "end": "1176480"
  },
  {
    "text": "will differ per from image that you're analyzing um so at this point we now know what we need to do right we need to",
    "start": "1176480",
    "end": "1183080"
  },
  {
    "text": "make sure that the mm get State call actually Returns the right value and we know what value it will read from memory",
    "start": "1183080",
    "end": "1189720"
  },
  {
    "text": "so the B the ID is uh is known at this point so on the left we have the mm",
    "start": "1189720",
    "end": "1195679"
  },
  {
    "text": "State variable memory address again and as our fing task is injected into the real-time operating system we can just",
    "start": "1195679",
    "end": "1202280"
  },
  {
    "text": "use Simple CD referencing so on the left we have the memory address and on the right we just D reference that memory",
    "start": "1202280",
    "end": "1207919"
  },
  {
    "text": "address and Supply the right value that will make sure that the switch statement will not print this trap message so in",
    "start": "1207919",
    "end": "1214039"
  },
  {
    "text": "this case it is fairly simple right because we have this loog message in some cases we don't have the loog message but the ID is fairly similar we",
    "start": "1214039",
    "end": "1221559"
  },
  {
    "text": "just do we refers reverse reverse until um we get it working so these are very",
    "start": "1221559",
    "end": "1227799"
  },
  {
    "text": "simple constants right but we also need some more advanced State and an example of that would be a struct in this case",
    "start": "1227799",
    "end": "1234600"
  },
  {
    "text": "on the left there is an RR serving cell struct and this typically contains information about the network and you",
    "start": "1234600",
    "end": "1240919"
  },
  {
    "text": "don't get this when you only when when the state is only right after boot right you have to really Supply this to the",
    "start": "1240919",
    "end": "1247520"
  },
  {
    "text": "basement itself so there are some unknown felds in the struct and The crucial thing here is that you only want",
    "start": "1247520",
    "end": "1253600"
  },
  {
    "text": "to restore the very crucial State because the challenging thing about adding state is that you might over",
    "start": "1253600",
    "end": "1259720"
  },
  {
    "text": "engineer this part and then create some kind of conflicting state or state that you won't be able to recreate in a real",
    "start": "1259720",
    "end": "1265720"
  },
  {
    "text": "life setting so the key ID here is that you only want to restore the very very crucial",
    "start": "1265720",
    "end": "1272880"
  },
  {
    "text": "state so again we start our fuzing uh run we again start with fing the lbdm",
    "start": "1273039",
    "end": "1278159"
  },
  {
    "text": "task it will again do the concatenation and forward it to the RR task the r task will again forward it to the mm task and",
    "start": "1278159",
    "end": "1286039"
  },
  {
    "text": "now we actually see a difference right on the botton uh in the previous slide we had the strap message and now we",
    "start": "1286039",
    "end": "1291440"
  },
  {
    "text": "actually see that the mm task will forward our message to the CC task so with adding State we now made sure that",
    "start": "1291440",
    "end": "1297679"
  },
  {
    "text": "the basement at least thinks it is in the right state to forward the message and in this case it forwards it to the",
    "start": "1297679",
    "end": "1303240"
  },
  {
    "text": "CC because we specified the protocol discriminator to be free and then finally we see in the CC task itself the",
    "start": "1303240",
    "end": "1309880"
  },
  {
    "text": "CC task actually receives the message and does some things with the message and parses the message so this is very cool we saw now",
    "start": "1309880",
    "end": "1317480"
  },
  {
    "text": "that our messages will Traverse the basement stack as we wanted the tasks are initialized the state is",
    "start": "1317480",
    "end": "1323559"
  },
  {
    "text": "initialized so we should be able to start fuzzing again and indeed that's",
    "start": "1323559",
    "end": "1328640"
  },
  {
    "text": "what we did and this time we had success here is a screenshot of AFL Plus+ doing",
    "start": "1328640",
    "end": "1336640"
  },
  {
    "text": "AFL Plus+ and what's impressive here is that already after just one and a half",
    "start": "1336640",
    "end": "1342000"
  },
  {
    "text": "hour of fuzzing we found or AFL Plus+ found 15 crashes it deemed interesting",
    "start": "1342000",
    "end": "1349159"
  },
  {
    "text": "this is especially awesome in our opinion because the fuzzing speed itself is rather slow um due to constraints of",
    "start": "1349159",
    "end": "1355840"
  },
  {
    "text": "our approach now if we take one of the crashes which were found by AFL Plus+",
    "start": "1355840",
    "end": "1361480"
  },
  {
    "text": "and replay them in the film wire framework we see some output some lock messages like this so in this example",
    "start": "1361480",
    "end": "1369080"
  },
  {
    "text": "there was a message which went all the way to the mm task um prints a little bit about a short network name does a",
    "start": "1369080",
    "end": "1374960"
  },
  {
    "text": "little bit of different things and at the very bottom it will say fatle error",
    "start": "1374960",
    "end": "1380159"
  },
  {
    "text": "P Mard corruption this is an indication that some sort of heat metadata was corrupted",
    "start": "1380159",
    "end": "1386480"
  },
  {
    "text": "so we very likely with this particular crashing input triggered a heat based buffer overflow or some other type of",
    "start": "1386480",
    "end": "1392840"
  },
  {
    "text": "memory Corruptions so exactly what we were looking for but now we have a problem right we",
    "start": "1392840",
    "end": "1399200"
  },
  {
    "text": "found this in our emulation but our emulation targets outdated firmware so",
    "start": "1399200",
    "end": "1404640"
  },
  {
    "text": "how can we replay it or how can we make sure that these pressures would affect",
    "start": "1404640",
    "end": "1410440"
  },
  {
    "text": "recent phones or if the vulnerabilities are still present and our idea was quite straightforward and simple we decided",
    "start": "1410440",
    "end": "1417159"
  },
  {
    "text": "let's just take all the crashing inputs we found and try to replay them over the air to newer devices and see what",
    "start": "1417159",
    "end": "1423799"
  },
  {
    "text": "happens for doing so we build a little bit of automation so we took all the crashes um had some shell scripts which",
    "start": "1423799",
    "end": "1430400"
  },
  {
    "text": "would automatically uh replay um the different crashes and see what happens and we used some open source tooling to",
    "start": "1430400",
    "end": "1438520"
  },
  {
    "text": "create our own fake base station to send it out to the phone this is our over theair",
    "start": "1438520",
    "end": "1444679"
  },
  {
    "text": "confirmation setup uh as Hardware we have a farad cage so very important",
    "start": "1444679",
    "end": "1451279"
  },
  {
    "text": "please adhere to your local legislation if you do this kind of testing um uh we",
    "start": "1451279",
    "end": "1456679"
  },
  {
    "text": "used a blat F20 as software defined radio which was commanded via Raspberry",
    "start": "1456679",
    "end": "1462080"
  },
  {
    "text": "Pi 4 as software as we're looking into the 2G stack we used yade and Y BTS as",
    "start": "1462080",
    "end": "1468440"
  },
  {
    "text": "Bas station and network and the PC software and we tested a variety of different",
    "start": "1468440",
    "end": "1473640"
  },
  {
    "text": "phones first of all we decided to test against the Motorola 1 vision and the Samsung Galaxy s10e so the same phones",
    "start": "1473640",
    "end": "1481320"
  },
  {
    "text": "we had in our emulation this is just to confirm that the crashes we found are actually real true positives and not",
    "start": "1481320",
    "end": "1488360"
  },
  {
    "text": "based on uh emulation inaccuracies if this was to succeed we will then replay the crashes also",
    "start": "1488360",
    "end": "1494799"
  },
  {
    "text": "against newer devices Google pixel 6 and the pixel 8 phone or a Samsung Galaxy s22 and",
    "start": "1494799",
    "end": "1502440"
  },
  {
    "text": "A40 and when we replay those crashes we will see an ADP lock cut so in the",
    "start": "1502440",
    "end": "1507919"
  },
  {
    "text": "logging infrastructure of Android some output looking like this a lot of repeating messages but just zooming the",
    "start": "1507919",
    "end": "1514200"
  },
  {
    "text": "in on one of those it would say modem crash uh modem is state crash exit or state crash reset we would also see The",
    "start": "1514200",
    "end": "1521080"
  },
  {
    "text": "Connection bar on the phone going to disappear so these are very good indications that the Bucks we found in",
    "start": "1521080",
    "end": "1527919"
  },
  {
    "text": "emulation are actually present on the real phone also of more recent devices which is",
    "start": "1527919",
    "end": "1533840"
  },
  {
    "text": "pretty awesome so let's have a look at what kind of vulnerabilities we found",
    "start": "1533840",
    "end": "1539159"
  },
  {
    "text": "over our fuzzing campaign so with our approach we were able to confirm the shown vulnerabilities uh we have found",
    "start": "1539159",
    "end": "1546240"
  },
  {
    "text": "three which were previously unknown and two which were internally duplicates and we can see that these Target different",
    "start": "1546240",
    "end": "1553159"
  },
  {
    "text": "uh layers in the protocol right for example the mm task the RR task uh and",
    "start": "1553159",
    "end": "1558440"
  },
  {
    "text": "also targets different phones and this is the part where we show the proprietary side of the phones right we",
    "start": "1558440",
    "end": "1564559"
  },
  {
    "text": "don't see the crashes or the vulnerabilities on each phone that we test um we can also see that the root CA",
    "start": "1564559",
    "end": "1572720"
  },
  {
    "text": "itself can be different right it can be in heat based buffer overflow it can be a n Point Tod reference or it can be a",
    "start": "1572720",
    "end": "1578320"
  },
  {
    "text": "stack based buffer overflow for example finally we do want to stress that at this point these bux have been",
    "start": "1578320",
    "end": "1585720"
  },
  {
    "text": "fixed so let's look at an example um this is based on our emulation results",
    "start": "1585720",
    "end": "1591799"
  },
  {
    "text": "uh the phone does behave a bit differently over the air but it happens when you send a malformed MM information",
    "start": "1591799",
    "end": "1597760"
  },
  {
    "text": "message so an mm information message is typically used by the network to supply",
    "start": "1597760",
    "end": "1602880"
  },
  {
    "text": "the phone with information about the network and these messages or layer-free messages in general consist of",
    "start": "1602880",
    "end": "1609159"
  },
  {
    "text": "information elements or IES um each IE is either present or it's either",
    "start": "1609159",
    "end": "1614720"
  },
  {
    "text": "mandatory so the M or is either optional uh and it has a magic value that",
    "start": "1614720",
    "end": "1619919"
  },
  {
    "text": "indicates whether it's present or not so on the left we have an example payload and we see that the example payload",
    "start": "1619919",
    "end": "1626279"
  },
  {
    "text": "starts with the value hex five and hex 5 is the protocol discriminator of a MM message the next value is the value hex",
    "start": "1626279",
    "end": "1633760"
  },
  {
    "text": "32 and this is the message type of an mm information message so there are lots of",
    "start": "1633760",
    "end": "1639240"
  },
  {
    "text": "mm messages in general but the mm information uh mm information uh message",
    "start": "1639240",
    "end": "1644960"
  },
  {
    "text": "is encoded with the message type hex 32 the next value is hex 45 and this is the",
    "start": "1644960",
    "end": "1650440"
  },
  {
    "text": "short network name information element so as you can see in the table we've actually skipped the full network name",
    "start": "1650440",
    "end": "1656240"
  },
  {
    "text": "and this is totally fine because the full network name is optional so we don't have to encode it in the message itself and the last information element",
    "start": "1656240",
    "end": "1663720"
  },
  {
    "text": "is is encoded with the value hex 48 which is in this case the LSA identity information",
    "start": "1663720",
    "end": "1670320"
  },
  {
    "text": "element okay so Mar can be wrong about this is that we haven't talked about how the length of the actual uh information",
    "start": "1670320",
    "end": "1677600"
  },
  {
    "text": "element is encoded so in this example we have the the value hex 48 for the LSA",
    "start": "1677600",
    "end": "1682840"
  },
  {
    "text": "identity information element and for this specific information element the length of the information element is",
    "start": "1682840",
    "end": "1688799"
  },
  {
    "text": "encoded in the bytes after it which is in this case the value hex 41 okay so",
    "start": "1688799",
    "end": "1693960"
  },
  {
    "text": "how can this be a problem for that we look at the code itself and we first see",
    "start": "1693960",
    "end": "1699640"
  },
  {
    "text": "that it tries to the basement tries to uh retrieve the information element length this will return the value hex 41",
    "start": "1699640",
    "end": "1706360"
  },
  {
    "text": "from our original payload but we see that there is some sort of check it checks whether the value is greater than",
    "start": "1706360",
    "end": "1711640"
  },
  {
    "text": "three and if it's greater than three it will cap the value at three so apparently this information element",
    "start": "1711640",
    "end": "1717880"
  },
  {
    "text": "should be fixed to free and this is also what you see when you look through the protocol itself this value should be",
    "start": "1717880",
    "end": "1723399"
  },
  {
    "text": "fixed at free so at this point everything looks fine right there is a m copy but the information element is is",
    "start": "1723399",
    "end": "1729039"
  },
  {
    "text": "kept at three bytes so this should be fine right so now there is a lot of lot of code which is not particularly",
    "start": "1729039",
    "end": "1735200"
  },
  {
    "text": "interesting for this um for this talk uh but at the end there is another M Copy",
    "start": "1735200",
    "end": "1740600"
  },
  {
    "text": "and with the Other M Copy this uar one or the three bytes is not propagated and",
    "start": "1740600",
    "end": "1746399"
  },
  {
    "text": "instead the IE length is actually loose is used and this is the hex 41 bytes of",
    "start": "1746399",
    "end": "1752399"
  },
  {
    "text": "our payload so it should have used the three bytes but instead it's using the hex 41 bytes and in this case buff is",
    "start": "1752399",
    "end": "1759720"
  },
  {
    "text": "allocated on the Heap and buff or the basement only thinks that the the",
    "start": "1759720",
    "end": "1765720"
  },
  {
    "text": "allocation size for the LSA identity information element should be free but instead we Supply 41 bytes it will do a",
    "start": "1765720",
    "end": "1771720"
  },
  {
    "text": "M Copy with 41 bytes and since the since buff is allocated on the Heap it will overflow the heat buffer and this will",
    "start": "1771720",
    "end": "1778279"
  },
  {
    "text": "then result in a heat buffer overflow so with all of this in mind",
    "start": "1778279",
    "end": "1783480"
  },
  {
    "text": "let's look at how this B actually looks like in reality if we replay it over the air so in the demo we will have two",
    "start": "1783480",
    "end": "1789960"
  },
  {
    "text": "phones uh on the left you will see a pixel 8 and on the right you will see a pixel 6 the pixel 6 is the vulnerable",
    "start": "1789960",
    "end": "1795760"
  },
  {
    "text": "phone and we trigger the vulnerability by calling the vulnerable phone so we do",
    "start": "1795760",
    "end": "1801200"
  },
  {
    "text": "want to stress this is not strictly necessary uh but it's just a convenient way for us to know that we've actually",
    "start": "1801200",
    "end": "1807919"
  },
  {
    "text": "that yade actually sent our um our payload and we know whether it's resulted in a crash or not so here we",
    "start": "1807919",
    "end": "1815120"
  },
  {
    "text": "can see that the phone will connect to the network the network here is just a combination of the mobile country code",
    "start": "1815120",
    "end": "1820480"
  },
  {
    "text": "and the mobile network code and then on the right we see a",
    "start": "1820480",
    "end": "1825880"
  },
  {
    "text": "zoomed in um image of the connection bars of the pixel",
    "start": "1825880",
    "end": "1830960"
  },
  {
    "text": "6 so we start to call the pixel",
    "start": "1830960",
    "end": "1835320"
  },
  {
    "text": "6 and we can actually see the the the connection bars disappearing which was for in our case a nice way of knowing",
    "start": "1841519",
    "end": "1848399"
  },
  {
    "text": "whether we triggered the vulnerability of not or not so let's reiterate a bit we call the phone because we've",
    "start": "1848399",
    "end": "1854960"
  },
  {
    "text": "specified yay to inject our payload when we call a phone or when there CC messages exchange so calling the phone",
    "start": "1854960",
    "end": "1862080"
  },
  {
    "text": "will actually trigger the vulnerability now one nice part about",
    "start": "1862080",
    "end": "1867519"
  },
  {
    "text": "this bug is that we also send uh the short network name as discussed before",
    "start": "1867519",
    "end": "1873679"
  },
  {
    "text": "um so let's have a little look at what happens now if the phone wants to reconnect to the very same network right",
    "start": "1873679",
    "end": "1879799"
  },
  {
    "text": "we just made it unavailable and crashed it and now if we search for Network it will tell us High blackhead us24",
    "start": "1879799",
    "end": "1888880"
  },
  {
    "text": "so we crashed the phone over the air and we supplied a militia or a controlled",
    "start": "1888880",
    "end": "1894159"
  },
  {
    "text": "network name uh as part of our",
    "start": "1894159",
    "end": "1898159"
  },
  {
    "text": "demo now let's look at the defenses so what are vendors doing to mitigate and",
    "start": "1900919",
    "end": "1907880"
  },
  {
    "text": "make those kind of bugs we found harder to exploit and first of all we really want to highlight that there has been a",
    "start": "1907880",
    "end": "1914600"
  },
  {
    "text": "recent shift in Vendor approaches and we see really more more hardening in cellular basement which is awesome in",
    "start": "1914600",
    "end": "1920720"
  },
  {
    "text": "our opinion just to give some examples we see a lot of differently more used or",
    "start": "1920720",
    "end": "1928039"
  },
  {
    "text": "yeah recently introduced or more used defenses for instance in the pixel 8 phone we saw a heap sanitizer which",
    "start": "1928039",
    "end": "1936279"
  },
  {
    "text": "provides additional hardening to uh vulnerabilities on the Heap so exploiting Heap buffer overflows becomes",
    "start": "1936279",
    "end": "1942639"
  },
  {
    "text": "a lot harder we also saw more consistent use of Stack cookies or the ex never bit",
    "start": "1942639",
    "end": "1948639"
  },
  {
    "text": "so data execution prevention for arm so that in the end um there's not",
    "start": "1948639",
    "end": "1954399"
  },
  {
    "text": "everywhere writable and executable code regions inside the basement processor also since Android 12 I",
    "start": "1954399",
    "end": "1961480"
  },
  {
    "text": "believe there is a allow 2G button um as shown here and the allow tog button",
    "start": "1961480",
    "end": "1967240"
  },
  {
    "text": "allows you to disallow using 2G so in the case of the vulnerabilities we discussed in these talk they would be",
    "start": "1967240",
    "end": "1974279"
  },
  {
    "text": "mitigated by disallowing connection to 2G as the phone would never connect even to a rogue 2G base station in the first",
    "start": "1974279",
    "end": "1983240"
  },
  {
    "text": "place so let's wrap up this talk and come to the end and first let's talk a",
    "start": "1983240",
    "end": "1988399"
  },
  {
    "text": "little bit about the limitations and future work so as we as we saw the state itself is based on memory addresses and",
    "start": "1988399",
    "end": "1995600"
  },
  {
    "text": "these memory addresses will differ per firmware image and it already takes a lot of time to do this for one firmware",
    "start": "1995600",
    "end": "2001240"
  },
  {
    "text": "image let alone if you want to analyze multiple firmware images so there is definitely a potential to automate this",
    "start": "2001240",
    "end": "2007159"
  },
  {
    "text": "process then there's one question which keeps coming to our mind what if we cannot",
    "start": "2007159",
    "end": "2013840"
  },
  {
    "text": "replicate a vulnerability we found in the emulation over the air do we really",
    "start": "2013840",
    "end": "2019080"
  },
  {
    "text": "know that this vulnerability is not present or fixed on a phone not really",
    "start": "2019080",
    "end": "2024600"
  },
  {
    "text": "because phones do behave differently uh especially if the film Weare is different so to really make sure or have",
    "start": "2024600",
    "end": "2032399"
  },
  {
    "text": "really deep introspection we would probably need a film wire version which supports more recent firmware for more",
    "start": "2032399",
    "end": "2039080"
  },
  {
    "text": "recent phones so we can have an in-depth analysis and observability locks of what",
    "start": "2039080",
    "end": "2044120"
  },
  {
    "text": "happening for a given crashing inputs for a given firmware and finally within",
    "start": "2044120",
    "end": "2049280"
  },
  {
    "text": "this talk we talked about the 2G protocol but what about the 3G 4G and 5G protocol but to do this it would require",
    "start": "2049280",
    "end": "2056118"
  },
  {
    "text": "more reversing uh more harnessing more adding States so basically you need to know more everything but it also",
    "start": "2056119",
    "end": "2062240"
  },
  {
    "text": "includes more interesting functions more upse secure functions more parsers so it's definitely an interesting topic to",
    "start": "2062240",
    "end": "2068158"
  },
  {
    "text": "look at so lastly let's DET talk a little bit about key takeaways and for this let's",
    "start": "2068159",
    "end": "2075280"
  },
  {
    "text": "just recap again what we did we fuz tested Layer Two or had fuzzing input which we're targeting Layer Two and we",
    "start": "2075280",
    "end": "2082118"
  },
  {
    "text": "found a lot of vulnerabilities in layer 3 and the reason we got there is we",
    "start": "2082119",
    "end": "2087720"
  },
  {
    "text": "provided the necessary state to get there so in our opinion state is key to overcome fuzzing roadblocks especially",
    "start": "2087720",
    "end": "2094800"
  },
  {
    "text": "when fuzzing across communication stacks and additionally even though we fost uh",
    "start": "2094800",
    "end": "2100839"
  },
  {
    "text": "relatively old firmware images we can see still see that these box that were present in those firmware images",
    "start": "2100839",
    "end": "2106960"
  },
  {
    "text": "actually transfer to the newest devices and lastly we want to really",
    "start": "2106960",
    "end": "2112280"
  },
  {
    "text": "stress that despite years of research despite a lot of people already looking at 2G running fazs doing reverse",
    "start": "2112280",
    "end": "2118280"
  },
  {
    "text": "engineering there are still critical and high impact vulnerabilities hiding in these Legacy cellular Stacks so where",
    "start": "2118280",
    "end": "2125280"
  },
  {
    "text": "possible we would really recommend to face out 2G and disable the use of the stack within the",
    "start": "2125280",
    "end": "2131119"
  },
  {
    "text": "basement and that concludes our talk we are happy to take questions here on the floor floor uh or later via email or",
    "start": "2131119",
    "end": "2138839"
  },
  {
    "text": "alternatively in the rep room which will be mandal Bay B thank you thank you",
    "start": "2138839",
    "end": "2146560"
  }
]