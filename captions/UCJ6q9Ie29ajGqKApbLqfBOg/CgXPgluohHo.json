[
  {
    "text": "so",
    "start": "6560",
    "end": "9559"
  },
  {
    "text": "do the presentation advanced sql instruction in oracle databases",
    "start": "28480",
    "end": "34800"
  },
  {
    "text": "well this is what we are going to see first an introduction to the",
    "start": "36160",
    "end": "41840"
  },
  {
    "text": "oracle database server we will then focus to the",
    "start": "41840",
    "end": "47360"
  },
  {
    "text": "signal injection attacks how to exploit them we will see some examples",
    "start": "47360",
    "end": "53840"
  },
  {
    "text": "after that we will see buffer off-road attacks with some examples also",
    "start": "55440",
    "end": "61920"
  },
  {
    "text": "and remote attacks using web applications connected to an oracle database server",
    "start": "61920",
    "end": "69439"
  },
  {
    "text": "then we will see the conclusions",
    "start": "69439",
    "end": "73240"
  },
  {
    "text": "well the there is something that distinct the oracle database server",
    "start": "74640",
    "end": "81280"
  },
  {
    "text": "in comparison with other database servers and it is that is the most complete",
    "start": "81280",
    "end": "87840"
  },
  {
    "text": "featured database server for example it has the most extensive",
    "start": "87840",
    "end": "92880"
  },
  {
    "text": "capability with the triggers and also the most complete support for multimedia databases",
    "start": "92880",
    "end": "100799"
  },
  {
    "text": "all of this has a trade-off and is that it is a very big software",
    "start": "100799",
    "end": "106560"
  },
  {
    "text": "with many features that can have security backs",
    "start": "106560",
    "end": "112000"
  },
  {
    "text": "and not only that also many ways in that the security bugs",
    "start": "112000",
    "end": "117200"
  },
  {
    "text": "can be exploited there are big number of packages procedures and functions installed by",
    "start": "117200",
    "end": "124240"
  },
  {
    "text": "default there we can see the the numbers of procedures and",
    "start": "124240",
    "end": "130000"
  },
  {
    "text": "packages in in the two versions of oracle",
    "start": "130000",
    "end": "136480"
  },
  {
    "text": "and how many are available to normal users also this product is available in many",
    "start": "136480",
    "end": "143520"
  },
  {
    "text": "platforms that's why sometimes there are a lot of time",
    "start": "143520",
    "end": "149680"
  },
  {
    "text": "that the the vendor takes to release the patches",
    "start": "149680",
    "end": "157400"
  },
  {
    "text": "well the the ways in that an oracle database server can be hacked",
    "start": "159519",
    "end": "164959"
  },
  {
    "text": "can be divided in two groups when the attacker has is not connected directly to the",
    "start": "164959",
    "end": "171920"
  },
  {
    "text": "database server and when the attacker is connected in",
    "start": "171920",
    "end": "177200"
  },
  {
    "text": "the database server as a normal user if the tagger doesn't have",
    "start": "177200",
    "end": "182879"
  },
  {
    "text": "a connection to the database server for example in the case of a web application user",
    "start": "182879",
    "end": "189519"
  },
  {
    "text": "the attacks that he can do is significant attacks with this he can inject sql commands",
    "start": "189519",
    "end": "197200"
  },
  {
    "text": "exploit buffer overflows of ins a of some packages",
    "start": "197200",
    "end": "203840"
  },
  {
    "text": "that are installed by default in the database server and the",
    "start": "203840",
    "end": "209200"
  },
  {
    "text": "the output can be retrieved can be redirected using the networking packages",
    "start": "209200",
    "end": "215040"
  },
  {
    "text": "such as utl http or utl tcp",
    "start": "215040",
    "end": "220879"
  },
  {
    "text": "if the attacker has connection to the database the the tasks that can be done are",
    "start": "222640",
    "end": "229440"
  },
  {
    "text": "signaling sections buffer and buffer overflows",
    "start": "229440",
    "end": "235200"
  },
  {
    "text": "the output can be viewed in the screen",
    "start": "235200",
    "end": "241239"
  },
  {
    "text": "i have reported nearly 100 vulnerabilities to oracle",
    "start": "242319",
    "end": "248239"
  },
  {
    "text": "and do you know how many have been fixed by the last july critical patch update",
    "start": "248480",
    "end": "254879"
  },
  {
    "text": "just one and they fixed it only in version 10 they didn't",
    "start": "254879",
    "end": "261840"
  },
  {
    "text": "fix it in previous releases because they the development team",
    "start": "261840",
    "end": "267120"
  },
  {
    "text": "neglected to to do the fixes for previous releases",
    "start": "267120",
    "end": "272320"
  },
  {
    "text": "at this speed it seems that the releases will get obsolete before",
    "start": "272320",
    "end": "277520"
  },
  {
    "text": "they finish patching the software",
    "start": "277520",
    "end": "282120"
  },
  {
    "text": "but now we will focus in securing sections attacks in oracle",
    "start": "284639",
    "end": "289840"
  },
  {
    "text": "it can be divided into groups first when the",
    "start": "289840",
    "end": "295360"
  },
  {
    "text": "attacker is connected directly to the database as a database user",
    "start": "295360",
    "end": "301520"
  },
  {
    "text": "it can be used to elevate privileges or to impersonate another user",
    "start": "301520",
    "end": "308080"
  },
  {
    "text": "this this risk exists when the processor is not defined",
    "start": "308080",
    "end": "313759"
  },
  {
    "text": "with the keyword out id current users so the processors execute with the",
    "start": "313759",
    "end": "320160"
  },
  {
    "text": "privilege of the owner when the attacker doesn't have",
    "start": "320160",
    "end": "326000"
  },
  {
    "text": "connection to the database for example if it is a web application user",
    "start": "326000",
    "end": "332000"
  },
  {
    "text": "can be used a sql instructor an attack can be used to execute sql statements directly in",
    "start": "332000",
    "end": "337759"
  },
  {
    "text": "the database or to exploit a buffer overflow that there are many in the standard",
    "start": "337759",
    "end": "344240"
  },
  {
    "text": "packages of oracle",
    "start": "344240",
    "end": "347520"
  },
  {
    "text": "depending on where the signal injection vulnerability is found",
    "start": "350960",
    "end": "356639"
  },
  {
    "text": "it can be divided into groups when the signal injection vulnerability",
    "start": "356639",
    "end": "362400"
  },
  {
    "text": "is in an anonymous pl sql block and when it is in a single pl sql statement when",
    "start": "362400",
    "end": "369120"
  },
  {
    "text": "it is in an anonymous pl sql block the block begins with",
    "start": "369120",
    "end": "375039"
  },
  {
    "text": "start with begin and end and can be",
    "start": "375039",
    "end": "380400"
  },
  {
    "text": "used to execute multiple sql statements this is the most",
    "start": "380400",
    "end": "386400"
  },
  {
    "text": "dangerous vulnerabilities because there are no restrictions in what the attacker can do",
    "start": "386400",
    "end": "393520"
  },
  {
    "text": "it it can execute select or data manipulation or data definition",
    "start": "393520",
    "end": "400479"
  },
  {
    "text": "statements for example there is an example of a",
    "start": "400479",
    "end": "405759"
  },
  {
    "text": "code vulnerable to sql injection in an anonymous pl sql block",
    "start": "405759",
    "end": "411199"
  },
  {
    "text": "you can see there there is a begin and an end it is a",
    "start": "411199",
    "end": "419120"
  },
  {
    "text": "dynamically generated pl sql code",
    "start": "419120",
    "end": "423840"
  },
  {
    "text": "if the vulnerability is found in a pl sql in a single pl sql statement",
    "start": "425759",
    "end": "430880"
  },
  {
    "text": "the attacker can't use a semi column to insert more sql commands",
    "start": "430880",
    "end": "436000"
  },
  {
    "text": "so it is very restricted in what he can do",
    "start": "436000",
    "end": "441440"
  },
  {
    "text": "there is an example of a vulnerable code a declaration of a cursor",
    "start": "441759",
    "end": "449319"
  },
  {
    "text": "well we will focus on sql injection in single pill sql statement",
    "start": "451120",
    "end": "457520"
  },
  {
    "text": "because the the anonymous pl sql block is very easily exploitable",
    "start": "457520",
    "end": "465240"
  },
  {
    "text": "the the attacker must we will see the this attack creating a a user-defined functions",
    "start": "471360",
    "end": "479120"
  },
  {
    "text": "so we can execute more than one command not only",
    "start": "479120",
    "end": "486160"
  },
  {
    "text": "using the the same statement that is vulnerable we will inject a function so",
    "start": "486160",
    "end": "494160"
  },
  {
    "text": "the attacker can can insert multiple sql statements but there is",
    "start": "494160",
    "end": "500560"
  },
  {
    "text": "a limitation well first the attacker must have the create function",
    "start": "500560",
    "end": "506560"
  },
  {
    "text": "privilege so he can create the the attacker definite function with a",
    "start": "506560",
    "end": "513440"
  },
  {
    "text": "malicious code and also there are some limitations in the statement that can be executed in",
    "start": "513440",
    "end": "519919"
  },
  {
    "text": "the in the function if it if the vulnerability is in a",
    "start": "519919",
    "end": "526160"
  },
  {
    "text": "select only select can be exec can be injected in the function and you can never execute data",
    "start": "526160",
    "end": "533519"
  },
  {
    "text": "definition statement why is this limitation we will see an",
    "start": "533519",
    "end": "540080"
  },
  {
    "text": "example there is the the my function",
    "start": "540080",
    "end": "545680"
  },
  {
    "text": "function is an example of an attacker defined function",
    "start": "545680",
    "end": "551120"
  },
  {
    "text": "that the attacker used in an exploit with of the drop",
    "start": "551200",
    "end": "556959"
  },
  {
    "text": "subscription vulnerable function of the dbms cdc subscribe",
    "start": "556959",
    "end": "565120"
  },
  {
    "text": "this was the the one that oracle tried to fix in the april critical patch",
    "start": "565120",
    "end": "570560"
  },
  {
    "text": "update and because of bugs the fix didn't get",
    "start": "570560",
    "end": "576760"
  },
  {
    "text": "so this throws an error because we are the the vulnerability in the drop subscription",
    "start": "577120",
    "end": "583279"
  },
  {
    "text": "function is in a select statement and we are trying to do an insert",
    "start": "583279",
    "end": "589760"
  },
  {
    "text": "so we get they cannot perform dml operation inside",
    "start": "589760",
    "end": "595519"
  },
  {
    "text": "the query error also if we would have tried a",
    "start": "595519",
    "end": "601920"
  },
  {
    "text": "ddl statement we also get another error this is because",
    "start": "601920",
    "end": "607920"
  },
  {
    "text": "the execution of the attacker defined function is inside the",
    "start": "607920",
    "end": "614959"
  },
  {
    "text": "transaction context of the vulnerable pl sql statement",
    "start": "614959",
    "end": "621839"
  },
  {
    "text": "it is a nested transaction",
    "start": "622800",
    "end": "626640"
  },
  {
    "text": "we will now see the autonomous transactions in oracle",
    "start": "628000",
    "end": "633440"
  },
  {
    "text": "that we will see how can we use this to avoid those problems",
    "start": "633440",
    "end": "640399"
  },
  {
    "text": "the complete directive pragma autonomous transaction allows to defend a transaction as",
    "start": "640399",
    "end": "646560"
  },
  {
    "text": "autonomous completely independent of the transaction where the sql",
    "start": "646560",
    "end": "652320"
  },
  {
    "text": "whenever code is it is not the same as a nested transaction it has a different",
    "start": "652320",
    "end": "659760"
  },
  {
    "text": "transaction context that's why you you must do a commit",
    "start": "659760",
    "end": "666399"
  },
  {
    "text": "to avoid an error",
    "start": "666959",
    "end": "670519"
  },
  {
    "text": "how can we do the attacker definite function",
    "start": "674399",
    "end": "679760"
  },
  {
    "text": "so that we can execute any sql statement we defined that",
    "start": "679760",
    "end": "685920"
  },
  {
    "text": "function with the pragma autonomous transaction compiler directive",
    "start": "685920",
    "end": "691440"
  },
  {
    "text": "that so we inject the code in the in we put the code in that function",
    "start": "691839",
    "end": "699120"
  },
  {
    "text": "and we we can execute any sql statement so as a conclusion",
    "start": "699120",
    "end": "704959"
  },
  {
    "text": "we can say that if the attacker can create or modify a function any sql injection vulnerability in a select",
    "start": "704959",
    "end": "710640"
  },
  {
    "text": "insert update or delete can be used to get full dbi privilege",
    "start": "710640",
    "end": "717079"
  },
  {
    "text": "we will now see some examples all of these are vulnerabilities",
    "start": "717519",
    "end": "724079"
  },
  {
    "text": "in oracle standard procedures in single sql statements",
    "start": "724079",
    "end": "730560"
  },
  {
    "text": "the procedures have execute previous granted to public so",
    "start": "730560",
    "end": "736560"
  },
  {
    "text": "any user can execute them this sequence insect on issues has been",
    "start": "736560",
    "end": "743120"
  },
  {
    "text": "fixed in the critical patch update of april if you do all the workarounds that oracle",
    "start": "743120",
    "end": "750639"
  },
  {
    "text": "say you have to do because of the buggy but",
    "start": "750639",
    "end": "756519"
  },
  {
    "text": "well now we will see an example how a a normal user can become the user",
    "start": "758560",
    "end": "764959"
  },
  {
    "text": "changing his password first the attacker in this case the user's code",
    "start": "764959",
    "end": "770560"
  },
  {
    "text": "create one function to change the power of the user and to",
    "start": "770560",
    "end": "777600"
  },
  {
    "text": "first to save the hash of the password so he can restore it later",
    "start": "777600",
    "end": "783920"
  },
  {
    "text": "and then change the sys password the other function restore password",
    "start": "783920",
    "end": "790160"
  },
  {
    "text": "is used to restore the password value to its original",
    "start": "790160",
    "end": "796920"
  },
  {
    "text": "what will you see",
    "start": "800079",
    "end": "802880"
  },
  {
    "text": "here we create the two functions",
    "start": "812399",
    "end": "816800"
  },
  {
    "text": "and the table where we store the original",
    "start": "821120",
    "end": "827199"
  },
  {
    "text": "password hash and this is the exploit where we",
    "start": "827680",
    "end": "834399"
  },
  {
    "text": "inject a concatenation of a of the function",
    "start": "835600",
    "end": "843240"
  },
  {
    "text": "now we try with to connect assist user",
    "start": "850480",
    "end": "856399"
  },
  {
    "text": "with the new psw password",
    "start": "856399",
    "end": "861519"
  },
  {
    "text": "and we get connect if we want to restore the password",
    "start": "865600",
    "end": "872880"
  },
  {
    "text": "we we use the other function that we create and execute the exploit",
    "start": "874720",
    "end": "882120"
  },
  {
    "text": "so now we will not be able to connect with the new psw password but the old",
    "start": "887360",
    "end": "894320"
  },
  {
    "text": "password that was five will work okay",
    "start": "894320",
    "end": "899839"
  },
  {
    "text": "well the oracle database server allows to create a have stored processors that can",
    "start": "907040",
    "end": "913600"
  },
  {
    "text": "execute have a code this is useful for an attacker because they have a language has a lot of",
    "start": "913600",
    "end": "920959"
  },
  {
    "text": "features like networking and operating system comments",
    "start": "920959",
    "end": "927399"
  },
  {
    "text": "to do that to do this the the attacker can create a function that first",
    "start": "927440",
    "end": "933120"
  },
  {
    "text": "create the they have a source with the method that contains the malicious code",
    "start": "933120",
    "end": "941399"
  },
  {
    "text": "then publish the method with a storage procedure that calls the hava method",
    "start": "942160",
    "end": "949519"
  },
  {
    "text": "and then grant execute on this method to the attacker",
    "start": "949519",
    "end": "955720"
  },
  {
    "text": "so now we will see a an example of an employee to execute",
    "start": "960399",
    "end": "966399"
  },
  {
    "text": "operating system commands to do this",
    "start": "966399",
    "end": "971600"
  },
  {
    "text": "we create the have stored procedures that call the get runtime exec",
    "start": "971600",
    "end": "977040"
  },
  {
    "text": "have a function redirect the output to a file and then read the file and print",
    "start": "977040",
    "end": "984079"
  },
  {
    "text": "it to the output so we we will get the output of the command",
    "start": "984079",
    "end": "990639"
  },
  {
    "text": "then we publish the java class creating a storage procedure and grant the execute privilege",
    "start": "990639",
    "end": "997279"
  },
  {
    "text": "on this procedure so we can execute operating system commands",
    "start": "997279",
    "end": "1003120"
  },
  {
    "text": "by default they have a console output is redirected to a file so",
    "start": "1003759",
    "end": "1008959"
  },
  {
    "text": "to to view the output we must execute those two commands",
    "start": "1008959",
    "end": "1014880"
  },
  {
    "text": "the set server output on and the call dbms have a set output",
    "start": "1014880",
    "end": "1020079"
  },
  {
    "text": "we will see an example",
    "start": "1020079",
    "end": "1023720"
  },
  {
    "text": "do",
    "start": "1031199",
    "end": "1034199"
  },
  {
    "text": "so now i create the sql i function that contains",
    "start": "1041679",
    "end": "1049200"
  },
  {
    "text": "the code to create the have a source and publish it",
    "start": "1049200",
    "end": "1054480"
  },
  {
    "text": "and create the the story procedure that executed",
    "start": "1054480",
    "end": "1059360"
  },
  {
    "text": "then i execute this function",
    "start": "1062480",
    "end": "1067160"
  },
  {
    "text": "with sql injection so it takes a good with privilege of the",
    "start": "1068400",
    "end": "1073679"
  },
  {
    "text": "cis user",
    "start": "1073679",
    "end": "1076919"
  },
  {
    "text": "and now to to see the output",
    "start": "1086559",
    "end": "1091200"
  },
  {
    "text": "to execute this and now we can use",
    "start": "1092880",
    "end": "1099360"
  },
  {
    "text": "the proc execute operating system processor to",
    "start": "1099360",
    "end": "1105440"
  },
  {
    "text": "execute a command in the server for example zero",
    "start": "1105440",
    "end": "1111440"
  },
  {
    "text": "and we get the output",
    "start": "1115520",
    "end": "1119080"
  },
  {
    "text": "also it can be done on our exploit that upload a file to the server",
    "start": "1129200",
    "end": "1134880"
  },
  {
    "text": "similar to the previous one using they have a net classes",
    "start": "1134880",
    "end": "1141280"
  },
  {
    "text": "and well ex publishing the the procedure and granting execute",
    "start": "1143039",
    "end": "1148880"
  },
  {
    "text": "privilege on it now we will see a method that",
    "start": "1148880",
    "end": "1156720"
  },
  {
    "text": "will allow us to view the vulnerable code of the oracle packages",
    "start": "1156720",
    "end": "1164240"
  },
  {
    "text": "for that we will use the v-sql text view that is",
    "start": "1164240",
    "end": "1170720"
  },
  {
    "text": "the view that shows the sql statements in the oracle sales",
    "start": "1170720",
    "end": "1175760"
  },
  {
    "text": "shared pool there we can see an example of a query",
    "start": "1175760",
    "end": "1182400"
  },
  {
    "text": "that can show you this information in the search pattern",
    "start": "1182400",
    "end": "1189440"
  },
  {
    "text": "we can put something that we use in the exploit so that",
    "start": "1189440",
    "end": "1195760"
  },
  {
    "text": "we we will get where the exploit word code that exploit was executed",
    "start": "1195760",
    "end": "1204720"
  },
  {
    "text": "we can use other views like b sql area b session and b process",
    "start": "1204720",
    "end": "1211039"
  },
  {
    "text": "to know what users execute the sql statement this view can only",
    "start": "1211039",
    "end": "1217520"
  },
  {
    "text": "be used by dbas for example",
    "start": "1217520",
    "end": "1223520"
  },
  {
    "text": "in the in the vulnerability in the drop subscription processor",
    "start": "1223520",
    "end": "1230640"
  },
  {
    "text": "if we execute the query we have just seen we can get this",
    "start": "1231039",
    "end": "1237039"
  },
  {
    "text": "in red is the exploit that was executed as the user's code and then",
    "start": "1237039",
    "end": "1242960"
  },
  {
    "text": "in blue we can view the vulnerable p sql code inside",
    "start": "1242960",
    "end": "1248880"
  },
  {
    "text": "the oracle package it we can see that it is in a select",
    "start": "1248880",
    "end": "1253919"
  },
  {
    "text": "and in the where clause the workload was was used the parameter",
    "start": "1253919",
    "end": "1261360"
  },
  {
    "text": "directly with concatenation we can execute the",
    "start": "1261360",
    "end": "1268000"
  },
  {
    "text": "the attacker defined function",
    "start": "1269039",
    "end": "1272399"
  },
  {
    "text": "that vulnerability is the result of a pl sql statement similar to the one",
    "start": "1274799",
    "end": "1282159"
  },
  {
    "text": "that is shown there for example a cursor definition that",
    "start": "1282159",
    "end": "1288320"
  },
  {
    "text": "concatenates a parameter that was passed to the processor",
    "start": "1288480",
    "end": "1294799"
  },
  {
    "text": "that should have been something like position on the bottom",
    "start": "1294799",
    "end": "1300400"
  },
  {
    "text": "that use bind variables",
    "start": "1300400",
    "end": "1305000"
  },
  {
    "text": "well now we will see all the other functions",
    "start": "1309120",
    "end": "1314159"
  },
  {
    "text": "vulnerability that we have seen were they",
    "start": "1314159",
    "end": "1319919"
  },
  {
    "text": "executed with the privilege of the owner in that case the cis user now we will see vulnerabilities",
    "start": "1319919",
    "end": "1327840"
  },
  {
    "text": "sql insertion vulnerabilities that execute with the privilege of the caller",
    "start": "1327840",
    "end": "1333840"
  },
  {
    "text": "at first sight we might think that this is not useful because we didn't",
    "start": "1333840",
    "end": "1340320"
  },
  {
    "text": "do any privilege escalation but if this vulnerability is in an",
    "start": "1340320",
    "end": "1346640"
  },
  {
    "text": "anonymous pl sql block it can be useful for for two things",
    "start": "1346640",
    "end": "1352720"
  },
  {
    "text": "for an attacker to get around the need to create a function",
    "start": "1352720",
    "end": "1358559"
  },
  {
    "text": "and use this vulnerability to inject sql statements",
    "start": "1358840",
    "end": "1365760"
  },
  {
    "text": "as it is a anonymous pl sql block we can define",
    "start": "1365760",
    "end": "1372080"
  },
  {
    "text": "that block as autonomous",
    "start": "1372080",
    "end": "1375840"
  },
  {
    "text": "another thing that can be done with these vulnerabilities is in the case of a web application",
    "start": "1377600",
    "end": "1385120"
  },
  {
    "text": "to execute any sql statement even if it is if the vulnerability is in",
    "start": "1385120",
    "end": "1391919"
  },
  {
    "text": "select and as we know in oracle you can't inject more sql statements",
    "start": "1391919",
    "end": "1400880"
  },
  {
    "text": "because a semicolon is not allowed",
    "start": "1401120",
    "end": "1405280"
  },
  {
    "text": "well we will see now the vulnerability that exists",
    "start": "1408240",
    "end": "1413360"
  },
  {
    "text": "in the dbms metadata package the get repositive function",
    "start": "1413360",
    "end": "1421440"
  },
  {
    "text": "so we we submit that query",
    "start": "1421679",
    "end": "1426240"
  },
  {
    "text": "and if we analyze it with the b sql text",
    "start": "1427280",
    "end": "1432320"
  },
  {
    "text": "view as it's shown there we can see that",
    "start": "1432720",
    "end": "1438640"
  },
  {
    "text": "this c this vulnerability has some features like",
    "start": "1438960",
    "end": "1445039"
  },
  {
    "text": "it is it has a begin and an end as we can see in the third and fourth and",
    "start": "1445039",
    "end": "1450559"
  },
  {
    "text": "fourth row of the results",
    "start": "1450559",
    "end": "1456399"
  },
  {
    "text": "the first two are the exploit and the the third and the fourth",
    "start": "1456559",
    "end": "1463039"
  },
  {
    "text": "are the code the vulnerable code that executes as we can see as the same user",
    "start": "1463039",
    "end": "1468320"
  },
  {
    "text": "that calls it but it has a begin and end",
    "start": "1468320",
    "end": "1473360"
  },
  {
    "text": "so we can conclude that that function is vulnerable to sql",
    "start": "1473360",
    "end": "1478960"
  },
  {
    "text": "injection in a pl sql anonymous block that executes with the privilege of the",
    "start": "1478960",
    "end": "1485039"
  },
  {
    "text": "caller",
    "start": "1485039",
    "end": "1487840"
  },
  {
    "text": "well now we will see how can we define an autonomous transactions",
    "start": "1490960",
    "end": "1497039"
  },
  {
    "text": "inside that plc sql block",
    "start": "1497039",
    "end": "1501840"
  },
  {
    "text": "to do that we can use the execute immediate statement",
    "start": "1502960",
    "end": "1509600"
  },
  {
    "text": "and declare is generate a sub pl sql block that has a",
    "start": "1509600",
    "end": "1515440"
  },
  {
    "text": "declare the pragma autonomous transaction keyword",
    "start": "1515440",
    "end": "1521519"
  },
  {
    "text": "so if we call in the second parameter of the pre",
    "start": "1525919",
    "end": "1531760"
  },
  {
    "text": "of the pre-table function with that the",
    "start": "1531760",
    "end": "1539039"
  },
  {
    "text": "the blue code that is shown first we can define",
    "start": "1539919",
    "end": "1546080"
  },
  {
    "text": "an autonomous transaction function a superc pl sql block not a function",
    "start": "1546080",
    "end": "1552960"
  },
  {
    "text": "but it is the it will have the same use like the the user defined function",
    "start": "1552960",
    "end": "1562240"
  },
  {
    "text": "so this can be used to get around the need to create a function",
    "start": "1565840",
    "end": "1571120"
  },
  {
    "text": "and use this vulnerability to execute the malicious code",
    "start": "1571120",
    "end": "1576880"
  },
  {
    "text": "there is an example that combines a vulnerability",
    "start": "1576880",
    "end": "1584159"
  },
  {
    "text": "in the push window procedure",
    "start": "1584159",
    "end": "1589279"
  },
  {
    "text": "and use and now it doesn't inject a user defined function but",
    "start": "1589279",
    "end": "1597200"
  },
  {
    "text": "it uses the vulnerability in the get purpose table act",
    "start": "1597200",
    "end": "1603120"
  },
  {
    "text": "function so it can define an autonomous transaction and execute",
    "start": "1603360",
    "end": "1609840"
  },
  {
    "text": "any sql statement we will see an example of this",
    "start": "1609840",
    "end": "1618360"
  },
  {
    "text": "here we are connected",
    "start": "1633840",
    "end": "1637320"
  },
  {
    "text": "as the scot user as we can see",
    "start": "1645840",
    "end": "1650880"
  },
  {
    "text": "we don't have dba privilege we now we now will",
    "start": "1652640",
    "end": "1659520"
  },
  {
    "text": "use this exploit that use two sql intersection",
    "start": "1659520",
    "end": "1666320"
  },
  {
    "text": "vulnerabilities one the in the push window procedure and the",
    "start": "1666320",
    "end": "1671360"
  },
  {
    "text": "other in the get repository function",
    "start": "1671360",
    "end": "1676919"
  },
  {
    "text": "we now will reconnect",
    "start": "1688159",
    "end": "1692279"
  },
  {
    "text": "and we now have dba access",
    "start": "1700480",
    "end": "1704919"
  },
  {
    "text": "well if we analyze this exploit with the",
    "start": "1713279",
    "end": "1719039"
  },
  {
    "text": "b sql view we can inside the database what statements were",
    "start": "1719039",
    "end": "1726080"
  },
  {
    "text": "executed here we will see",
    "start": "1726080",
    "end": "1731120"
  },
  {
    "text": "we will see better in the first statement is the",
    "start": "1731120",
    "end": "1736840"
  },
  {
    "text": "exploit where they where we call the push window procedure with",
    "start": "1736840",
    "end": "1743520"
  },
  {
    "text": "that parameter in blue that generates the execution of the second statement",
    "start": "1743520",
    "end": "1753000"
  },
  {
    "text": "that is a select in the cdc subscribers",
    "start": "1753600",
    "end": "1759919"
  },
  {
    "text": "table that use the the second the first parameter of the push window",
    "start": "1760480",
    "end": "1768080"
  },
  {
    "text": "procedure without a sanitization",
    "start": "1768080",
    "end": "1773880"
  },
  {
    "text": "so it generates a concatenation of an empty string and a",
    "start": "1775360",
    "end": "1780799"
  },
  {
    "text": "call to the get prepost table act function",
    "start": "1780799",
    "end": "1785840"
  },
  {
    "text": "this generates the third statement that as we can see is an anonymous plc",
    "start": "1785840",
    "end": "1793520"
  },
  {
    "text": "well block that executes the pre-table",
    "start": "1793520",
    "end": "1801480"
  },
  {
    "text": "a call to the pre-table procedure but we",
    "start": "1802000",
    "end": "1807440"
  },
  {
    "text": "insert more more statements like the execute",
    "start": "1807440",
    "end": "1812799"
  },
  {
    "text": "statement the execute immediate that generates an anonymous pl sql block",
    "start": "1812799",
    "end": "1821799"
  },
  {
    "text": "that contains the malicious code the third statement generates the",
    "start": "1822159",
    "end": "1827360"
  },
  {
    "text": "execution of the fourth that is the",
    "start": "1827360",
    "end": "1832960"
  },
  {
    "text": "anonymous pl sql block in an autonomous transaction",
    "start": "1832960",
    "end": "1838720"
  },
  {
    "text": "the five the fifth is the malicious code",
    "start": "1838720",
    "end": "1844000"
  },
  {
    "text": "that finally gets executed all of this is",
    "start": "1844000",
    "end": "1850960"
  },
  {
    "text": "the same as as the result of the of that query after executing the",
    "start": "1850960",
    "end": "1856320"
  },
  {
    "text": "exploit so we can conclude that using a sql",
    "start": "1856320",
    "end": "1862000"
  },
  {
    "text": "insection vulnerability in a function defined with the out id current user",
    "start": "1862000",
    "end": "1868640"
  },
  {
    "text": "and in an anonymous pl sql block an attacker can use any other sql in",
    "start": "1868640",
    "end": "1874320"
  },
  {
    "text": "section vulnerability in a select insert update or delete to get full dva privilege",
    "start": "1874320",
    "end": "1882720"
  },
  {
    "text": "well there are there it is an example of how",
    "start": "1890799",
    "end": "1897120"
  },
  {
    "text": "the vulnerability in a in an anonymous pl sql block that executes",
    "start": "1897120",
    "end": "1902320"
  },
  {
    "text": "with the privilege of the color can be used in a web application",
    "start": "1902320",
    "end": "1907679"
  },
  {
    "text": "to execute any sql statement",
    "start": "1907679",
    "end": "1912559"
  },
  {
    "text": "there the table lamp asp web page has a vulnerable parameter",
    "start": "1914480",
    "end": "1921360"
  },
  {
    "text": "that is search",
    "start": "1921360",
    "end": "1924240"
  },
  {
    "text": "in that case the the the function",
    "start": "1929360",
    "end": "1935360"
  },
  {
    "text": "arrows the get prepost table act vulnerability allows to to execute any sql statement",
    "start": "1935360",
    "end": "1943919"
  },
  {
    "text": "if if we just use the the vulnerability in",
    "start": "1943919",
    "end": "1949039"
  },
  {
    "text": "the search parameter we maybe can't execute anything more than an union",
    "start": "1949039",
    "end": "1957360"
  },
  {
    "text": "or or something like something related to the",
    "start": "1957360",
    "end": "1963840"
  },
  {
    "text": "to the statement where the sql injection is not",
    "start": "1963840",
    "end": "1969360"
  },
  {
    "text": "not any other sql statement like in in this exploit",
    "start": "1969360",
    "end": "1977279"
  },
  {
    "text": "so how how can we protect from sql insertion vulnerabilities",
    "start": "1977279",
    "end": "1984480"
  },
  {
    "text": "as we have seen there are a lot of vulnerable packages in the oracle",
    "start": "1986640",
    "end": "1992559"
  },
  {
    "text": "default installation so to remove the execute privilege on the racket standard packages is a",
    "start": "1992559",
    "end": "1998880"
  },
  {
    "text": "very good measure also they create any processor and alter",
    "start": "1998880",
    "end": "2004000"
  },
  {
    "text": "any procedure privilege should be granted only to trusted users",
    "start": "2004000",
    "end": "2011200"
  },
  {
    "text": "also as if the user owns a function he can",
    "start": "2011840",
    "end": "2016960"
  },
  {
    "text": "modify it only trusted users should own functions",
    "start": "2016960",
    "end": "2023919"
  },
  {
    "text": "the resource role includes the create any processor privilege so it can also it should also",
    "start": "2023919",
    "end": "2031600"
  },
  {
    "text": "be granted to trusted users",
    "start": "2031600",
    "end": "2036080"
  },
  {
    "text": "whenever it is possible it is a good thing to do to define the storage",
    "start": "2037360",
    "end": "2042960"
  },
  {
    "text": "procedures with the out id current user keyword that",
    "start": "2042960",
    "end": "2049040"
  },
  {
    "text": "is it to to execute the the procedure with the privilege of the caller",
    "start": "2049040",
    "end": "2055200"
  },
  {
    "text": "it is not the default behavior when we create a process in",
    "start": "2055200",
    "end": "2060480"
  },
  {
    "text": "oracle when we need to to use dynamic sql",
    "start": "2060480",
    "end": "2068079"
  },
  {
    "text": "we should be very careful and always try to",
    "start": "2068079",
    "end": "2073599"
  },
  {
    "text": "to validate the parameters and or use bind variables",
    "start": "2073599",
    "end": "2081599"
  },
  {
    "text": "even on on functions defined without id current user keyword",
    "start": "2081599",
    "end": "2087358"
  },
  {
    "text": "because as we have seen it is also dangerous",
    "start": "2087359",
    "end": "2091839"
  },
  {
    "text": "well now we will see some buffer overflows attacks in oracle",
    "start": "2099359",
    "end": "2105838"
  },
  {
    "text": "it allows to execute arbitrary code on the server",
    "start": "2106560",
    "end": "2112720"
  },
  {
    "text": "it can be exploited by normal users or through sql injection",
    "start": "2112720",
    "end": "2119599"
  },
  {
    "text": "by web application users there are many oracle standard storage procedures that",
    "start": "2119599",
    "end": "2127200"
  },
  {
    "text": "have buffer overflow bags",
    "start": "2127200",
    "end": "2131838"
  },
  {
    "text": "so using a buffer overflow an attacker can execute operating",
    "start": "2136960",
    "end": "2142640"
  },
  {
    "text": "systems commands for example and create a",
    "start": "2142640",
    "end": "2148559"
  },
  {
    "text": "an operating system administrator user",
    "start": "2148720",
    "end": "2152880"
  },
  {
    "text": "the exploit i will show here now is",
    "start": "2156720",
    "end": "2161760"
  },
  {
    "text": "in the sdo code size oracle standard function",
    "start": "2161760",
    "end": "2168000"
  },
  {
    "text": "for example we now will see how to create a vine sail",
    "start": "2168160",
    "end": "2174079"
  },
  {
    "text": "with this with this vulnerability",
    "start": "2174079",
    "end": "2178200"
  },
  {
    "text": "well this this exploit creates a bind shell on port 444",
    "start": "2208880",
    "end": "2214880"
  },
  {
    "text": "that we can now use it to get a remote shell",
    "start": "2214880",
    "end": "2221200"
  },
  {
    "text": "on the server on the rugged server well now we you can see",
    "start": "2221200",
    "end": "2227200"
  },
  {
    "text": "i am in the windows 2000 server that is where the",
    "start": "2227440",
    "end": "2233359"
  },
  {
    "text": "vmware is executing with the oracle database server",
    "start": "2233359",
    "end": "2240839"
  },
  {
    "text": "here i can i can execute any command on the server",
    "start": "2244560",
    "end": "2249799"
  },
  {
    "text": "also with exploiting a buffer overflow in oracle it is possible to execute sql statement",
    "start": "2257680",
    "end": "2265040"
  },
  {
    "text": "as the sysdba user to do this for example",
    "start": "2265040",
    "end": "2271359"
  },
  {
    "text": "this is in windows we can use the echo",
    "start": "2271359",
    "end": "2276400"
  },
  {
    "text": "command to create a script file with this script file we can",
    "start": "2276400",
    "end": "2282960"
  },
  {
    "text": "create a user database user and then we can call the sql plus",
    "start": "2282960",
    "end": "2289440"
  },
  {
    "text": "application to execute the script",
    "start": "2289440",
    "end": "2294280"
  },
  {
    "text": "well we can there is a way that we can",
    "start": "2298320",
    "end": "2303680"
  },
  {
    "text": "detect some buffer overflow's attack but it is difficult it can't be detected",
    "start": "2303680",
    "end": "2310079"
  },
  {
    "text": "always but one thing that can be done is to review the damp files that oracle",
    "start": "2310079",
    "end": "2317040"
  },
  {
    "text": "generates automatically for example one interesting file",
    "start": "2317040",
    "end": "2322560"
  },
  {
    "text": "is the core load file that we",
    "start": "2322560",
    "end": "2328000"
  },
  {
    "text": "there we can search for access variation or segmentation fault exceptions",
    "start": "2328000",
    "end": "2333520"
  },
  {
    "text": "and the the the code the inserted code may be in the stack dump",
    "start": "2333520",
    "end": "2339280"
  },
  {
    "text": "so we can review there but it also can be a",
    "start": "2339280",
    "end": "2344880"
  },
  {
    "text": "a bad execution of the or or a bug in order",
    "start": "2344880",
    "end": "2350640"
  },
  {
    "text": "it it's no not always attack",
    "start": "2350640",
    "end": "2356160"
  },
  {
    "text": "also there is an associated file that that can be",
    "start": "2357119",
    "end": "2363839"
  },
  {
    "text": "used where the sql are logged that is the the order three",
    "start": "2363839",
    "end": "2371040"
  },
  {
    "text": "trc file and then we can see what was the",
    "start": "2371040",
    "end": "2376640"
  },
  {
    "text": "the sql statement that the attacker execute well as i said the right internal errors",
    "start": "2376640",
    "end": "2383680"
  },
  {
    "text": "can also generate these stumps and there is also",
    "start": "2383680",
    "end": "2390960"
  },
  {
    "text": "some ways that the attack attacker can can avoid generating those files",
    "start": "2390960",
    "end": "2398560"
  },
  {
    "text": "such when the the process dies or or if the attacker calls the exit thread",
    "start": "2398560",
    "end": "2404560"
  },
  {
    "text": "function",
    "start": "2404560",
    "end": "2407560"
  },
  {
    "text": "well now we will see some remote attacks using coil injection in web applications",
    "start": "2412240",
    "end": "2418960"
  },
  {
    "text": "in this example we will use the table lamp asp",
    "start": "2418960",
    "end": "2424000"
  },
  {
    "text": "table a web page vulnerable",
    "start": "2424000",
    "end": "2428560"
  },
  {
    "text": "it this page is an example of a vulnerable web page to sql instruction",
    "start": "2429520",
    "end": "2436160"
  },
  {
    "text": "it query a table and print the output in the screen",
    "start": "2436160",
    "end": "2442960"
  },
  {
    "text": "the parameter search is vulnerable to sql in section",
    "start": "2443359",
    "end": "2448160"
  },
  {
    "text": "well this as we said before this",
    "start": "2451520",
    "end": "2456560"
  },
  {
    "text": "vulnerability may seem not very very dangerous but",
    "start": "2456560",
    "end": "2461839"
  },
  {
    "text": "if we can inject a function call we can do",
    "start": "2461839",
    "end": "2466880"
  },
  {
    "text": "a lot of damage in a oracle database server",
    "start": "2466880",
    "end": "2471680"
  },
  {
    "text": "well in this example we're exploiting the the same buffer overflow we we said we",
    "start": "2475920",
    "end": "2484000"
  },
  {
    "text": "saw before in the sd of code size function",
    "start": "2484000",
    "end": "2491279"
  },
  {
    "text": "we in display we execute an operating system command",
    "start": "2491440",
    "end": "2497440"
  },
  {
    "text": "we will see",
    "start": "2502800",
    "end": "2506280"
  },
  {
    "text": "in the host machine i have running i am running an es server",
    "start": "2525200",
    "end": "2532640"
  },
  {
    "text": "that has this table lamp asp webpage vulnerable to sql injection that connect",
    "start": "2532640",
    "end": "2539359"
  },
  {
    "text": "to the database to the oracle database server running in the vmware box",
    "start": "2539359",
    "end": "2546400"
  },
  {
    "text": "i execute this exploit",
    "start": "2546400",
    "end": "2550440"
  },
  {
    "text": "i come here in the vmware box and can see that the",
    "start": "2561200",
    "end": "2567440"
  },
  {
    "text": "deal command",
    "start": "2567440",
    "end": "2570160"
  },
  {
    "text": "was executed today now i can edit this file",
    "start": "2574960",
    "end": "2582440"
  },
  {
    "text": "so as we can see a sequel in section issues in web applications",
    "start": "2595040",
    "end": "2602560"
  },
  {
    "text": "using oracle database servers are very dangerous",
    "start": "2602560",
    "end": "2607838"
  },
  {
    "text": "using this kind of vulnerabilities",
    "start": "2611280",
    "end": "2616400"
  },
  {
    "text": "it can be created a worm a web application worm that could be very",
    "start": "2616880",
    "end": "2623599"
  },
  {
    "text": "dangerous to the web applications",
    "start": "2623599",
    "end": "2628160"
  },
  {
    "text": "because there are many web applications that are vulnerable to sql injection attacks and exploiting",
    "start": "2628720",
    "end": "2636640"
  },
  {
    "text": "or if vulnerabilities in oracle standard functions the the worm can be",
    "start": "2636640",
    "end": "2643839"
  },
  {
    "text": "can propagated for example what the work can do is",
    "start": "2643839",
    "end": "2649520"
  },
  {
    "text": "search for patients for our patient and try to exploit all",
    "start": "2649520",
    "end": "2654800"
  },
  {
    "text": "the parameters",
    "start": "2654800",
    "end": "2657960"
  },
  {
    "text": "so there are some missions that we can take to protect from this street",
    "start": "2663200",
    "end": "2669839"
  },
  {
    "text": "that is similar to the secret injection threat we can revolt",
    "start": "2669839",
    "end": "2676560"
  },
  {
    "text": "execute privilege to arrive standard packages when are not needed especially for the public role that",
    "start": "2676560",
    "end": "2683280"
  },
  {
    "text": "there are many packages that have public access",
    "start": "2683280",
    "end": "2689880"
  },
  {
    "text": "or restrict network access to the listener and sql ser and i sql plus",
    "start": "2690480",
    "end": "2696319"
  },
  {
    "text": "services",
    "start": "2696319",
    "end": "2698880"
  },
  {
    "text": "we will drop or change password of default users this is",
    "start": "2701760",
    "end": "2707920"
  },
  {
    "text": "very common measure to take but there are a lot of database servers",
    "start": "2707920",
    "end": "2713440"
  },
  {
    "text": "that have the default users enabled",
    "start": "2713440",
    "end": "2719839"
  },
  {
    "text": "the web applications we must be sure that are not",
    "start": "2720000",
    "end": "2725280"
  },
  {
    "text": "vulnerable to sql injection if we must use dynamic sql sql code we must ensure that",
    "start": "2725280",
    "end": "2734480"
  },
  {
    "text": "the parameters are validated and or we can use bind variables",
    "start": "2734480",
    "end": "2740000"
  },
  {
    "text": "keep the record software up to date with the patches",
    "start": "2740000",
    "end": "2745359"
  },
  {
    "text": "and we we must a good measure also is to try to upgrade to the last oracle database server",
    "start": "2745760",
    "end": "2752880"
  },
  {
    "text": "released and patch it because generally the latches purchase",
    "start": "2752880",
    "end": "2758640"
  },
  {
    "text": "but are what more most fixers are included",
    "start": "2758640",
    "end": "2765359"
  },
  {
    "text": "well as a summary we can say that there we can see the the different ways",
    "start": "2770319",
    "end": "2776880"
  },
  {
    "text": "in that another database server can be hacked that is when when we have direct direct",
    "start": "2776880",
    "end": "2784560"
  },
  {
    "text": "connection to the database we can use buffer overflows in stored processors or sql injections",
    "start": "2784560",
    "end": "2792800"
  },
  {
    "text": "that allows to the attacker to execute any code on the server in the",
    "start": "2793040",
    "end": "2798640"
  },
  {
    "text": "case of the buffer overflows or get dba privilege if we are exploiting a sql injection",
    "start": "2798640",
    "end": "2807200"
  },
  {
    "text": "in the case of the of a remote attacker using the web the database through a web",
    "start": "2810880",
    "end": "2816560"
  },
  {
    "text": "application there we can exploit sql injection",
    "start": "2816560",
    "end": "2822800"
  },
  {
    "text": "the sql insertion in any statement can be used to exploit buffer",
    "start": "2824000",
    "end": "2829680"
  },
  {
    "text": "overflows or to do sql injection in functions define it",
    "start": "2829680",
    "end": "2837280"
  },
  {
    "text": "uh with execution of the color or the or the definer both are dangerous",
    "start": "2837280",
    "end": "2845839"
  },
  {
    "text": "well as a conclusion we can say that there are many features that are",
    "start": "2849440",
    "end": "2855200"
  },
  {
    "text": "installed by default in a regular database server and most most of them are never used",
    "start": "2855200",
    "end": "2862960"
  },
  {
    "text": "and represent serious security risks",
    "start": "2862960",
    "end": "2868720"
  },
  {
    "text": "those uh many many of the standard processors are vulnerable to buffer overflow or",
    "start": "2870480",
    "end": "2877200"
  },
  {
    "text": "sequence section issues with the buffer overflow we can execute sql statement using the",
    "start": "2877200",
    "end": "2883280"
  },
  {
    "text": "sql the sql plus utility",
    "start": "2883280",
    "end": "2888560"
  },
  {
    "text": "automatic testing tools can help dbas with with all those checks",
    "start": "2890240",
    "end": "2898520"
  },
  {
    "text": "well this the reference where i got the information",
    "start": "2904400",
    "end": "2910160"
  },
  {
    "text": "well that's that's all right do you have questions",
    "start": "2913520",
    "end": "2920240"
  },
  {
    "text": "do",
    "start": "2922160",
    "end": "2925160"
  },
  {
    "text": "do you want to see another exploit an example",
    "start": "2928960",
    "end": "2936119"
  },
  {
    "text": "i think the best way is is to to use",
    "start": "2951440",
    "end": "2958000"
  },
  {
    "text": "first to know maybe a a faster or something like this could could help with",
    "start": "2958000",
    "end": "2964559"
  },
  {
    "text": "the the many because there are many many procedures so",
    "start": "2964559",
    "end": "2971760"
  },
  {
    "text": "the faster can can be can be useful to automate the testing but always you have to",
    "start": "2971760",
    "end": "2977839"
  },
  {
    "text": "to test one by one by because a faster is",
    "start": "2977839",
    "end": "2985839"
  },
  {
    "text": "miss many of the of the",
    "start": "2986400",
    "end": "2989760"
  },
  {
    "text": "like bugs were they packed or are they not packed",
    "start": "2997280",
    "end": "3003200"
  },
  {
    "text": "yes uh they they well there it says they in the april",
    "start": "3010839",
    "end": "3017280"
  },
  {
    "text": "but they they fix yes",
    "start": "3017280",
    "end": "3023119"
  },
  {
    "text": "they're the other they that they are used to to execute",
    "start": "3023119",
    "end": "3030558"
  },
  {
    "text": "to generate the the the anonymous plc well blocked that one is not fixed yet",
    "start": "3032000",
    "end": "3040440"
  },
  {
    "text": "but it it should be used with another",
    "start": "3042559",
    "end": "3047920"
  },
  {
    "text": "or in a web application because it doesn't allow to escalate",
    "start": "3048079",
    "end": "3054559"
  },
  {
    "text": "privilege",
    "start": "3054559",
    "end": "3057559"
  },
  {
    "text": "but i don't know why they they sometimes they just fix on one release",
    "start": "3080000",
    "end": "3086160"
  },
  {
    "text": "and they don't fix on on the previous",
    "start": "3086160",
    "end": "3090599"
  },
  {
    "text": "any more questions",
    "start": "3100880",
    "end": "3104279"
  },
  {
    "text": "what that's all thank you",
    "start": "3117040",
    "end": "3122200"
  },
  {
    "text": "you",
    "start": "3205040",
    "end": "3207119"
  }
]