[
  {
    "text": "I would like to introduce Roberto Salgado who will give you a wonderful",
    "start": "0",
    "end": "5490"
  },
  {
    "text": "talk on obfuscation hello everyone it's",
    "start": "5490",
    "end": "10889"
  },
  {
    "text": "great to be here it's really exciting to be facing that way for once instead of",
    "start": "10889",
    "end": "16108"
  },
  {
    "text": "the other way around I have some really interesting stuff I'm sure you guys will love of neat techniques on optimization",
    "start": "16109",
    "end": "23730"
  },
  {
    "text": "in office Kayson there's a lot of stuff to go through so so jump right into it",
    "start": "23730",
    "end": "29220"
  },
  {
    "text": "I'll just introduce myself quickly of course my name is pro tricks like a little I'm with web sec we're an",
    "start": "29220",
    "end": "36149"
  },
  {
    "text": "information security company that provides security solutions through security auditing testing training and",
    "start": "36149",
    "end": "42570"
  },
  {
    "text": "monitoring I'm the creator of that sequel injection knowledgebase which",
    "start": "42570",
    "end": "49680"
  },
  {
    "text": "some of you might have heard of it's a really complete resource for sequin junctions has everything you need to",
    "start": "49680",
    "end": "56160"
  },
  {
    "text": "know recently I've started programming with Python so I'm considering myself a",
    "start": "56160",
    "end": "62699"
  },
  {
    "text": "Python Easter now I recently wrote a tool called leapfrog sorry pen optic",
    "start": "62699",
    "end": "68100"
  },
  {
    "text": "with Miroslav stamp art from SQL map and it's a pretty cool tool if you haven't",
    "start": "68100",
    "end": "73290"
  },
  {
    "text": "heard of it it just helps find configuration and password files through vocal file inclusion type vulnerability",
    "start": "73290",
    "end": "79200"
  },
  {
    "text": "Buono goodies a quick overview of what",
    "start": "79200",
    "end": "85439"
  },
  {
    "text": "we will be seeing is we'll talk about different blind sequel injection methods",
    "start": "85439",
    "end": "92390"
  },
  {
    "text": "which allow us to retrieve data faster from the database will see some",
    "start": "92390",
    "end": "97740"
  },
  {
    "text": "optimized queries and then for obfuscation we'll talk about bit of fuzzers encoding and how we can use that",
    "start": "97740",
    "end": "105270"
  },
  {
    "text": "to bypass firewalls as well and hopefully if I have time I can show you leapfrog which is the tool that I've been developing to help audit firewalls",
    "start": "105270",
    "end": "113670"
  },
  {
    "text": "and try to make them more secure so I",
    "start": "113670",
    "end": "118770"
  },
  {
    "text": "know this comic is uh and like 90% of the sequence action talks but since my",
    "start": "118770",
    "end": "124560"
  },
  {
    "text": "name is Roberto I thought I thought I was pretty fitting for me so I decided to use it",
    "start": "124560",
    "end": "129869"
  },
  {
    "text": "this is my own a defensive slide Bobbi",
    "start": "129869",
    "end": "135209"
  },
  {
    "text": "table is calm is a great great resource that shows you how to protect and every almost every language against sequin",
    "start": "135209",
    "end": "140370"
  },
  {
    "text": "junctions I went to a client that told",
    "start": "140370",
    "end": "145590"
  },
  {
    "text": "me he fixed his sequel injection by influencing SSL so framing - things like",
    "start": "145590",
    "end": "151379"
  },
  {
    "text": "that please mess up that website it's starting with optimization so why would",
    "start": "151379",
    "end": "158400"
  },
  {
    "text": "we care why would we want to optimize our queries essentially by optimizing",
    "start": "158400",
    "end": "163530"
  },
  {
    "text": "our queries first of all the most important thing is we can extract information from the database much faster not only that but it will reduce",
    "start": "163530",
    "end": "171200"
  },
  {
    "text": "network congestion bandwidth much lower probability of being detected and there",
    "start": "171200",
    "end": "178049"
  },
  {
    "text": "are several other reasons why we should be interested in optimizing our queries so some of the methods we'll be",
    "start": "178049",
    "end": "184530"
  },
  {
    "text": "analysing is the traditional bisection methods this is the most common method when extracting information from a",
    "start": "184530",
    "end": "190980"
  },
  {
    "text": "database through a blind sequence junction the bisection method is also known as the binary search algorithm for",
    "start": "190980",
    "end": "197579"
  },
  {
    "text": "computer scientists out there so it's essentially the same thing we look at a regx method some bitwise operator",
    "start": "197579",
    "end": "204810"
  },
  {
    "text": "methods and finally a method that I invented which I like to call binary to position so just a quick reminder it's",
    "start": "204810",
    "end": "213510"
  },
  {
    "text": "very important to remember most of the time with blind sequence Jackson's we couldn't retrieve one character at a",
    "start": "213510",
    "end": "218879"
  },
  {
    "text": "time that's why it's most important to optimize black sequin junctions and other types of injections before we dive",
    "start": "218879",
    "end": "229680"
  },
  {
    "text": "into the methods just a quick overview of ASCII table to help you understand these methods ASCII essentially stands",
    "start": "229680",
    "end": "237060"
  },
  {
    "text": "for American Standard Code for information interchange and it was invented because computers can only",
    "start": "237060",
    "end": "244230"
  },
  {
    "text": "understand numbers so we needed a way to represent different characters and letters here you can see the different",
    "start": "244230",
    "end": "251190"
  },
  {
    "text": "representations octo binary decimal hexadecimal this is kind of what the",
    "start": "251190",
    "end": "260010"
  },
  {
    "text": "ASCII table looks like just of different representations for each characters and and such an",
    "start": "260010",
    "end": "269099"
  },
  {
    "text": "important thing to remember when optimizing queries and you'll see this later in these methods is that for the",
    "start": "269099",
    "end": "274409"
  },
  {
    "text": "range were interested is usually the code point 30 to 226 and and through",
    "start": "274409",
    "end": "282449"
  },
  {
    "text": "that code point in that range of 94 characters the leading bit will always",
    "start": "282449",
    "end": "288060"
  },
  {
    "text": "be zero so how does the binary search",
    "start": "288060",
    "end": "295050"
  },
  {
    "text": "method work I'll just go through it quickly because this is a known method but it's important to understand when",
    "start": "295050",
    "end": "300840"
  },
  {
    "text": "comparing it to the other methods essentially we take our ASCII range 32 226 we split it in half and then we",
    "start": "300840",
    "end": "308370"
  },
  {
    "text": "search if the value is greater that we're searching for is greater or smaller and then we depending on what",
    "start": "308370",
    "end": "316770"
  },
  {
    "text": "branch it is we'll split that in half again and repeat it's a divide-and-conquer-type algorithm it's",
    "start": "316770",
    "end": "323069"
  },
  {
    "text": "very effective it's kind of what it looks like an action so the graph of how",
    "start": "323069",
    "end": "333629"
  },
  {
    "text": "we split the the set in half and then check each side so the pros at the the",
    "start": "333629",
    "end": "342000"
  },
  {
    "text": "binary section is the it's very effective and it's very easy to implement it usually has around six or",
    "start": "342000",
    "end": "349680"
  },
  {
    "text": "seven requests per character one of the cons about it is that it's the best case",
    "start": "349680",
    "end": "356430"
  },
  {
    "text": "scenario is it's kind of the same as it's worse as it's average and worst",
    "start": "356430",
    "end": "361860"
  },
  {
    "text": "case doesn't very much so for a next message method will see the rejects",
    "start": "361860",
    "end": "368639"
  },
  {
    "text": "method by route 80 I and white sheep this essentially is a adaptation of the",
    "start": "368639",
    "end": "375509"
  },
  {
    "text": "binary search algorithm by using regular expressions",
    "start": "375509",
    "end": "381319"
  },
  {
    "text": "so essentially it has the same pros and cons as the binary search it's just a",
    "start": "383000",
    "end": "389190"
  },
  {
    "text": "different implementation of it for the",
    "start": "389190",
    "end": "394290"
  },
  {
    "text": "bitwise method there's several bitwise methods that we can use using different bitwise operators the first song we've",
    "start": "394290",
    "end": "402600"
  },
  {
    "text": "seen quickly is faster genre the hen wrote a paper faster blind my sequin",
    "start": "402600",
    "end": "408360"
  },
  {
    "text": "Jetsons using bit shifting but isn't Malaysia implementation was a little",
    "start": "408360",
    "end": "413400"
  },
  {
    "text": "weird because he starts off by comparing one bit at a time but later he starts",
    "start": "413400",
    "end": "421290"
  },
  {
    "text": "comparing two bits at a time and that's not good because it doesn't allow us to implement threading since the next",
    "start": "421290",
    "end": "427080"
  },
  {
    "text": "request will rely on the previous request one thing about the bitwise",
    "start": "427080",
    "end": "434180"
  },
  {
    "text": "methods is that it will always be seven requests per character because what we were doing is retrieve the binary for",
    "start": "434180",
    "end": "440460"
  },
  {
    "text": "for each character and the binary is will be seven digits here's a little",
    "start": "440460",
    "end": "450870"
  },
  {
    "text": "variation I created of a bit shifting method essentially we just shift the",
    "start": "450870",
    "end": "456480"
  },
  {
    "text": "character by each number and then we can retrieve the last position and that will",
    "start": "456480",
    "end": "462060"
  },
  {
    "text": "give us the full character we're after so for example a is 97 in decimal and",
    "start": "462060",
    "end": "469410"
  },
  {
    "text": "that's the binary sequence for it right there so that's kind of how we could implement that method there to retrieve",
    "start": "469410",
    "end": "474540"
  },
  {
    "text": "these characters all the bitwise methods",
    "start": "474540",
    "end": "480450"
  },
  {
    "text": "have the same pros and cons there's another bitwise method that uses anding",
    "start": "480450",
    "end": "486450"
  },
  {
    "text": "instead of shifting it was by removing Ventura essentially we end the first",
    "start": "486450",
    "end": "494570"
  },
  {
    "text": "second third and fourth and that essentially starts giving us the characters there that we're looking for",
    "start": "494570",
    "end": "502340"
  },
  {
    "text": "now on to my method and this is my favorite method for my method we require",
    "start": "509260",
    "end": "514990"
  },
  {
    "text": "a set just like the bisection method a set of characters or an Arri also using the 32 the range 32 to 126 and an",
    "start": "514990",
    "end": "522940"
  },
  {
    "text": "important thing to know is that the closer the character we're looking at is that the beginning of the set the less",
    "start": "522940",
    "end": "528100"
  },
  {
    "text": "amount of requests will be required to retrieve that character so for this reason we can arrange our sets by the",
    "start": "528100",
    "end": "534130"
  },
  {
    "text": "most common letters in the Latin the language so say for the English language he is one of the most common letters so",
    "start": "534130",
    "end": "540730"
  },
  {
    "text": "we could position that character maybe at the start of our set so we map the",
    "start": "540730",
    "end": "548470"
  },
  {
    "text": "position of the the character in its position in the set and then what we do",
    "start": "548470",
    "end": "554920"
  },
  {
    "text": "is convert this position to binary and retrieve the binary of that position",
    "start": "554920",
    "end": "560490"
  },
  {
    "text": "this way we're effective effectively reducing the amount of characters to look for from 94 to to owning zeroes and",
    "start": "560490",
    "end": "567940"
  },
  {
    "text": "ones so we have we can have different sets depending what we're looking for",
    "start": "567940",
    "end": "573670"
  },
  {
    "text": "say if we know we're retrieving an md5 hash or password we can specify a",
    "start": "573670",
    "end": "579940"
  },
  {
    "text": "character set that just uses the hexadecimal characters and this will make it more effective no matter what",
    "start": "579940",
    "end": "587440"
  },
  {
    "text": "the size of the set is if we have 94 characters in the set or if we have a thousand it will still be more effective",
    "start": "587440",
    "end": "594460"
  },
  {
    "text": "than the binary search and I'll show you why this is what the method looks like",
    "start": "594460",
    "end": "600570"
  },
  {
    "text": "quick implementation you can see the we have our sets that's just the",
    "start": "600570",
    "end": "606130"
  },
  {
    "text": "hexadecimal set there we convert it to the position and commit convert that position to binary so",
    "start": "606130",
    "end": "616300"
  },
  {
    "text": "say if we're retrieving see the character see is in the third position",
    "start": "616300",
    "end": "621340"
  },
  {
    "text": "in our set we convert the number three to binary and then which gives us 11 so",
    "start": "621340",
    "end": "631240"
  },
  {
    "text": "to retrieve the character now we just have to retrieve the love and we have to check as it 1 or 0 so essentially to",
    "start": "631240",
    "end": "637720"
  },
  {
    "text": "retrieve the character see thou take two requests",
    "start": "637720",
    "end": "643019"
  },
  {
    "text": "one thing that it's important to note is we always start with the first on bit and for that reason we always know that",
    "start": "649950",
    "end": "656700"
  },
  {
    "text": "the first character or binary digit that we'll retrieve will be a 1 so we can skip that request since we know we're",
    "start": "656700",
    "end": "663089"
  },
  {
    "text": "already be a 1 so that saves us 1 request there but we need an additional request at the end to know that we've",
    "start": "663089",
    "end": "669240"
  },
  {
    "text": "reached the end of the binary sequence so for C it would be a total of 2",
    "start": "669240",
    "end": "674459"
  },
  {
    "text": "requests if it's in the third position of course we could take a step further",
    "start": "674459",
    "end": "679740"
  },
  {
    "text": "and arrange the characters so the most",
    "start": "679740",
    "end": "685800"
  },
  {
    "text": "common letters that starts in a word is are those there that say T so we could",
    "start": "685800",
    "end": "691110"
  },
  {
    "text": "have our character set start in in that order and then for retrieving the next",
    "start": "691110",
    "end": "696389"
  },
  {
    "text": "character we can use the diagraph to see",
    "start": "696389",
    "end": "702750"
  },
  {
    "text": "what would be the most common letter after that one and always be adapting or set in arranging it in real time as",
    "start": "702750",
    "end": "708209"
  },
  {
    "text": "we're returning data to have it be more effective so it's great about this",
    "start": "708209",
    "end": "714180"
  },
  {
    "text": "method is that only used one to six requests per character and I don't know",
    "start": "714180",
    "end": "719190"
  },
  {
    "text": "if any other method that's capable of retrieving a character in just one request one of the drawbacks is for my",
    "start": "719190",
    "end": "726899"
  },
  {
    "text": "implementation is that we currently require two parameter values and again I",
    "start": "726899",
    "end": "732720"
  },
  {
    "text": "can rewrite it to not have to require two parameter values but it would take a few more requests but even then it'll",
    "start": "732720",
    "end": "738630"
  },
  {
    "text": "still be more effective so to look at comparison of these methods and blue we",
    "start": "738630",
    "end": "745050"
  },
  {
    "text": "have my method red is the bisection and green the bitwise further to achieve the character",
    "start": "745050",
    "end": "753569"
  },
  {
    "text": "set we see a 47% improvement for the mp5",
    "start": "753569",
    "end": "759079"
  },
  {
    "text": "29% of abc123 and then for the quick brown fox at 35 percent and",
    "start": "759079",
    "end": "769339"
  },
  {
    "text": "these it can be a further improvement it just depends on what characters we're retrieving but realistically that's kind",
    "start": "771209",
    "end": "777940"
  },
  {
    "text": "of the range we'll see it about 45% improvements I'll show you a quick demo here",
    "start": "777940",
    "end": "784589"
  },
  {
    "text": "so on the left of the screen we have the binary to search method and on the right we have the rejects method so I can't",
    "start": "820130",
    "end": "827000"
  },
  {
    "text": "try to run them at the same time and you",
    "start": "827000",
    "end": "834050"
  },
  {
    "text": "can see with my methods to retrieve that hash it only took 109 requests as compared to the other methods under an",
    "start": "834050",
    "end": "840410"
  },
  {
    "text": "84 I'll slow it down so you can see how it looks",
    "start": "840410",
    "end": "847029"
  },
  {
    "text": "it's a quick demo of how we're getting converting the position to binary and then just retrieving the binary of that",
    "start": "863480",
    "end": "869340"
  },
  {
    "text": "position",
    "start": "869340",
    "end": "871490"
  },
  {
    "text": "I also wrote two little scripts I'll be uploading these to github if anyone wants to test them out and try it out",
    "start": "877220",
    "end": "883000"
  },
  {
    "text": "so just to test these methods so for the",
    "start": "883000",
    "end": "889160"
  },
  {
    "text": "binary search district treating the characters a AAA several times takes us",
    "start": "889160",
    "end": "896510"
  },
  {
    "text": "a total of 114 requests and we can see that it takes six requests for for a",
    "start": "896510",
    "end": "905830"
  },
  {
    "text": "where's with my method retrieving a just",
    "start": "905920",
    "end": "910970"
  },
  {
    "text": "takes one request continuance in the first position in my set so this gives us only 19 requests to retrieve that and",
    "start": "910970",
    "end": "917020"
  },
  {
    "text": "that's closer to an 80 85 percent improvement",
    "start": "917020",
    "end": "923290"
  },
  {
    "text": "so now we will see some queries for their optimized queries like retrieving",
    "start": "934300",
    "end": "939970"
  },
  {
    "text": "all databases tables and columns with just one request this is what the query",
    "start": "939970",
    "end": "946660"
  },
  {
    "text": "looks like and I actually have another demo here to show you",
    "start": "946660",
    "end": "954480"
  },
  {
    "text": "so that's just my test page you can see that it's vulnerable to sequel injection there here I go to the sequel injection",
    "start": "969440",
    "end": "978290"
  },
  {
    "text": "knowledgebase and it's as simple it's",
    "start": "978290",
    "end": "987319"
  },
  {
    "text": "just pretty much a copy-paste of the method all I do is add a Union there so we can see the data reflection on the page and",
    "start": "987319",
    "end": "994449"
  },
  {
    "text": "there we go we get all the the databases tables and columns with a single request",
    "start": "994449",
    "end": "1002399"
  },
  {
    "text": "at the bottom we can see the user name and password salt there so this is a lot",
    "start": "1005490",
    "end": "1011620"
  },
  {
    "text": "more effective than I mean you could use other methods like group concat but that is usually limited by default to 1024",
    "start": "1011620",
    "end": "1018370"
  },
  {
    "text": "characters with this method there is no limitations",
    "start": "1018370",
    "end": "1024480"
  },
  {
    "text": "so I can implement I can't embed my videos because of different codecs issue that weren't supported so there are",
    "start": "1031290",
    "end": "1038819"
  },
  {
    "text": "other methods to achieve the same result is my sequel query just saw for example this one for Microsoft sequel Oracle",
    "start": "1038820",
    "end": "1050720"
  },
  {
    "text": "PostgreSQL so follow now I'm going to",
    "start": "1050720",
    "end": "1059340"
  },
  {
    "text": "show you one request - for a remote code execution what this query does is it",
    "start": "1059340",
    "end": "1066420"
  },
  {
    "text": "will check to see if XP command shell is loaded if it is enabled it check to see",
    "start": "1066420",
    "end": "1072240"
  },
  {
    "text": "if it's active and then it proceeds to run the dear command in this case and stores the resultant empty B that's what",
    "start": "1072240",
    "end": "1080700"
  },
  {
    "text": "the query looks like and this is possible because with ms SQL we can we",
    "start": "1080700",
    "end": "1088980"
  },
  {
    "text": "can have multiple queries where other databases are not all that and I have",
    "start": "1088980",
    "end": "1096540"
  },
  {
    "text": "another demo for you guys to show you how this works",
    "start": "1096540",
    "end": "1100250"
  },
  {
    "text": "for this demo I just ran it in Microsoft sequel server management studio there",
    "start": "1107340",
    "end": "1113789"
  },
  {
    "text": "you can see a much more organized what the query looks like so essentially just",
    "start": "1113789",
    "end": "1118919"
  },
  {
    "text": "running the dear commands and it returns it on just one row so I'm get copy and paste that so you can see what it looks",
    "start": "1118919",
    "end": "1125070"
  },
  {
    "text": "like and there we get all the files and I mean right now I'm just showing you in",
    "start": "1125070",
    "end": "1130610"
  },
  {
    "text": "the sequel management studio because I didn't have a web page web app set up",
    "start": "1130610",
    "end": "1135990"
  },
  {
    "text": "with mssql so here I'm changing it to IP config it's just simple as changing the",
    "start": "1135990",
    "end": "1141659"
  },
  {
    "text": "word run it and the same result we get",
    "start": "1141659",
    "end": "1146809"
  },
  {
    "text": "the return of our code",
    "start": "1146809",
    "end": "1150528"
  },
  {
    "text": "so all the times testing can become very tedious as a penetration tester I've found web apps that have 400 parameters",
    "start": "1168320",
    "end": "1175970"
  },
  {
    "text": "or several modules with several parameters and for each sequence direction we usually have to do at least",
    "start": "1175970",
    "end": "1182390"
  },
  {
    "text": "three tests to see if it could be an integer type or no quotation quotations could use single quotations or double",
    "start": "1182390",
    "end": "1188870"
  },
  {
    "text": "quotations so if we had a web app with 400 parameters for each three we'd have",
    "start": "1188870",
    "end": "1195110"
  },
  {
    "text": "to do 1200 tests but there so I thought how about if we fuse these together so",
    "start": "1195110",
    "end": "1203780"
  },
  {
    "text": "this is what it looks like instead of doing three tests for each kind I've combined these in just one so",
    "start": "1203780",
    "end": "1209570"
  },
  {
    "text": "instead of doing 1200 requests we can just do the 401 for each parameter and",
    "start": "1209570",
    "end": "1215020"
  },
  {
    "text": "to show you how this is broken up that there is essentially testing no quotations the hash there is a comment",
    "start": "1215020",
    "end": "1222350"
  },
  {
    "text": "so it will ignore everything after that then we can test double quotations and the double quotations just includes the",
    "start": "1222350",
    "end": "1229160"
  },
  {
    "text": "single quotations or so it tests if it's the same and then single quotations and",
    "start": "1229160",
    "end": "1239120"
  },
  {
    "text": "this is for or but there's also ways to this with anding and even though we're",
    "start": "1239120",
    "end": "1245870"
  },
  {
    "text": "not really using the keyword and it has the same logic of testing true or false so same thing we have the no quotations",
    "start": "1245870",
    "end": "1252140"
  },
  {
    "text": "and that's a comment there that just sends it the double - double quotations",
    "start": "1252140",
    "end": "1258410"
  },
  {
    "text": "and then the single quotation so this allows us to save vast amount of time",
    "start": "1258410",
    "end": "1264710"
  },
  {
    "text": "which is very important when you're working 12-hour days and you just want",
    "start": "1264710",
    "end": "1270890"
  },
  {
    "text": "to get home to have a beer this is very helpful another reason this is really",
    "start": "1270890",
    "end": "1276500"
  },
  {
    "text": "important - is an attacker could extract the data these the data a lot faster from the database before maybe being",
    "start": "1276500",
    "end": "1282800"
  },
  {
    "text": "detected or blocked moving on to obfuscate",
    "start": "1282800",
    "end": "1288340"
  },
  {
    "text": "I heard a user on Twitter say that firewalls usually have a 30%",
    "start": "1288340",
    "end": "1294909"
  },
  {
    "text": "mathematically have the 30 percent error rate or bypass rate and this is very is comparable to antivirus software so of",
    "start": "1294909",
    "end": "1304090"
  },
  {
    "text": "course you know obfuscation is one of the main tools for methods for bypassing firewalls and so what is obfuscation",
    "start": "1304090",
    "end": "1311320"
  },
  {
    "text": "exactly I really like this description it's just the art of making things appear more complicated than they are I",
    "start": "1311320",
    "end": "1318240"
  },
  {
    "text": "had a list of it tell me a story saying that when she tried to explain it to people she'd say it's what I did to my",
    "start": "1318240",
    "end": "1324159"
  },
  {
    "text": "parents as a kid so I could go out and party and stuff you know just off escape the truth so this is kind of what a few",
    "start": "1324159",
    "end": "1332380"
  },
  {
    "text": "station looks like I'm not I'm not gonna go into this right now because it takes me an hour to kind of break it down that",
    "start": "1332380",
    "end": "1339669"
  },
  {
    "text": "could be a whole separate talk on its own but I essentially created this query",
    "start": "1339669",
    "end": "1345279"
  },
  {
    "text": "check I've confused an admin the only way they could really know what it does",
    "start": "1345279",
    "end": "1351340"
  },
  {
    "text": "this kind of break take several we should try and break it down and figure out what it was or they could try",
    "start": "1351340",
    "end": "1357190"
  },
  {
    "text": "running it on their database if they dare so out of confiscation be used to",
    "start": "1357190",
    "end": "1363640"
  },
  {
    "text": "bypass firewalls here are some tips it's important to read the documentation and",
    "start": "1363640",
    "end": "1369429"
  },
  {
    "text": "know what the database allows and what's permitted what's capabilities and what it can",
    "start": "1369429",
    "end": "1376659"
  },
  {
    "text": "handle there are some things oddities that are documented and other oddities",
    "start": "1376659",
    "end": "1382149"
  },
  {
    "text": "that aren't documented and these we can find through fuzzing and other methods do you have a question",
    "start": "1382149",
    "end": "1390148"
  },
  {
    "text": "sorry I can hear you sure so another thing is to be creative",
    "start": "1400350",
    "end": "1412260"
  },
  {
    "text": "all the times if you know stuff or can think of a way that maybe the fire fire",
    "start": "1412260",
    "end": "1417309"
  },
  {
    "text": "wall developer didn't know or features that he wasn't aware of then there's really no way he can really protect",
    "start": "1417309",
    "end": "1422679"
  },
  {
    "text": "against something he didn't know existed so we're fussing this is hello peach",
    "start": "1422679",
    "end": "1428049"
  },
  {
    "text": "peach fuzzer I wrote just to test different white spaces and characters who are allowed in between in this case",
    "start": "1428049",
    "end": "1433990"
  },
  {
    "text": "the where one equals one I just put my I go through the the",
    "start": "1433990",
    "end": "1439120"
  },
  {
    "text": "decimal range 0 to 55 and convert this to the actual character and just insert it into the query and then see if it's a",
    "start": "1439120",
    "end": "1446549"
  },
  {
    "text": "septa or not if it works or not so it's kind of what the output looks like and",
    "start": "1446549",
    "end": "1452559"
  },
  {
    "text": "this allows me to see all the different white spaces they're allowed and other characters that I can put and this helps",
    "start": "1452559",
    "end": "1458200"
  },
  {
    "text": "us give us a better understanding of what we can use to help let's bypass firewalls I also wrote when my flexor",
    "start": "1458200",
    "end": "1465970"
  },
  {
    "text": "strike game are complicated I pass it over to a Python and this is just a",
    "start": "1465970",
    "end": "1471100"
  },
  {
    "text": "small snippet of what the code looks like essentially the code I've added more filters and stuff to help me get go",
    "start": "1471100",
    "end": "1477790"
  },
  {
    "text": "through the data because sometimes you'll get millions of rows of data because when you're fuzzing four or five",
    "start": "1477790",
    "end": "1482830"
  },
  {
    "text": "bytes at a time so some of the",
    "start": "1482830",
    "end": "1488799"
  },
  {
    "text": "whitespace to site balance safer sequel Lite sequel Lite I was the ordinary kind",
    "start": "1488799",
    "end": "1496270"
  },
  {
    "text": "of expected white spaces just a vertical tab new tab new line horizontal tab",
    "start": "1496270",
    "end": "1503100"
  },
  {
    "text": "normal whitespace and so on with my sequel 5 we get similar but an",
    "start": "1503100",
    "end": "1510970"
  },
  {
    "text": "additional one is a zero there which is like the no break space and that's one that a lot of fire world while",
    "start": "1510970",
    "end": "1516160"
  },
  {
    "text": "developers aren't really aware of so that can be useful I decided to test my",
    "start": "1516160",
    "end": "1522490"
  },
  {
    "text": "sequel 300 it's not as relevant anymore but it was still interesting to see how it's changed over time and this is what",
    "start": "1522490",
    "end": "1528820"
  },
  {
    "text": "my sequel 3 allows a huge range of characters almost anything in there",
    "start": "1528820",
    "end": "1534500"
  },
  {
    "text": "and it looks actually funny I'll show you in a bit what it looks like so for Postgres similar to SQL light",
    "start": "1534500",
    "end": "1546460"
  },
  {
    "text": "oracle 11 also similar but there's a really interesting one here which is 0 0",
    "start": "1546460",
    "end": "1551480"
  },
  {
    "text": "some of you may know is this is a null byte and it's it's really crazy that it",
    "start": "1551480",
    "end": "1556820"
  },
  {
    "text": "allows a null byte it's a white space because of applications your software used this as a terminator so this could",
    "start": "1556820",
    "end": "1565039"
  },
  {
    "text": "really confuse firewalls and other applications and finally we have Microsoft SQL and similar to sequel Lite",
    "start": "1565039",
    "end": "1573260"
  },
  {
    "text": "it allows a huge range of characters and I'm pretty sure most firewalls",
    "start": "1573260",
    "end": "1578510"
  },
  {
    "text": "developers aren't aware of all of these characters - they will only check for the basic ones so we can insert these as",
    "start": "1578510",
    "end": "1583610"
  },
  {
    "text": "white spaces that'll really confuse the firewall and not be able to detect that a sequel injection isn't malicious so",
    "start": "1583610",
    "end": "1589159"
  },
  {
    "text": "just see it is normal data so what do this range of characters look like well",
    "start": "1589159",
    "end": "1594610"
  },
  {
    "text": "that's what it looks like and that actually works",
    "start": "1594610",
    "end": "1600100"
  },
  {
    "text": "you don't believe me there you go there's the screenshot so some oddities",
    "start": "1601120",
    "end": "1617620"
  },
  {
    "text": "are interesting things I found through fuzzing you can see here all the times firewalls will try and detect you new",
    "start": "1617620",
    "end": "1623860"
  },
  {
    "text": "select so if we can try and combine the Union with something else it might see it it not not might not see it's just",
    "start": "1623860",
    "end": "1630190"
  },
  {
    "text": "Union I think it's a different word or something so it's pretty interesting with decimals we can combine the Union",
    "start": "1630190",
    "end": "1637320"
  },
  {
    "text": "also with an exponent the ts1 in between",
    "start": "1637320",
    "end": "1646900"
  },
  {
    "text": "the curly brackets that's an interesting one the TSU stands for time stamp but again it's something that most firewall",
    "start": "1646900",
    "end": "1653260"
  },
  {
    "text": "developers aren't aware of so it's very useful and below that you'll see some",
    "start": "1653260",
    "end": "1658750"
  },
  {
    "text": "odd stuff there you see the different the money symbol and back ticks with 180",
    "start": "1658750",
    "end": "1666070"
  },
  {
    "text": "and that's actually a bug and my sequel's parsing we can put any number dot e dot and interpret that is just a",
    "start": "1666070",
    "end": "1674200"
  },
  {
    "text": "dot so that's a very useful and many again many developers aren't aware of",
    "start": "1674200",
    "end": "1680410"
  },
  {
    "text": "that and we can use this essentially anywhere where we'd have a dot like for",
    "start": "1680410",
    "end": "1686590"
  },
  {
    "text": "the table or the column",
    "start": "1686590",
    "end": "1690210"
  },
  {
    "text": "MSS key also allows come joining the",
    "start": "1695210",
    "end": "1700619"
  },
  {
    "text": "keyword with a number if there's a decimal in place same with the exponent",
    "start": "1700619",
    "end": "1706499"
  },
  {
    "text": "we can combine keywords it also allows",
    "start": "1706499",
    "end": "1711570"
  },
  {
    "text": "what they call an empty hex so there you can just put 0 X and leave it at that",
    "start": "1711570",
    "end": "1716970"
  },
  {
    "text": "and then we can put the keyboard right next to it that would be really confusing for firewalls if they're trying to find a hex character and",
    "start": "1716970",
    "end": "1722879"
  },
  {
    "text": "convert that but then they're the get Union instead okay this one's really cool the backslash it gets interpreted",
    "start": "1722879",
    "end": "1732210"
  },
  {
    "text": "is a 0 for some reason so we can use it to just combine again keywords and make",
    "start": "1732210",
    "end": "1737999"
  },
  {
    "text": "it hard for a firewall to recognize that for some reason we can also do select",
    "start": "1737999",
    "end": "1744720"
  },
  {
    "text": "one from together and that works or",
    "start": "1744720",
    "end": "1751529"
  },
  {
    "text": "oco-2 has interesting stuff like 1 F 1 D I think it just stands for decimal but",
    "start": "1751529",
    "end": "1757980"
  },
  {
    "text": "another there's another trick that allows us to combine keywords together and this was actually shown by Nick",
    "start": "1757980",
    "end": "1763289"
  },
  {
    "text": "Galbraith in his presentation for Lib injection live injection is this a library written that C that helps us",
    "start": "1763289",
    "end": "1769289"
  },
  {
    "text": "detect and prevent sequel injection and it's funny because he presented this technique in his presentation and then I",
    "start": "1769289",
    "end": "1777330"
  },
  {
    "text": "tested his live injection it was actually that actually bypassed it so I told him and he felt embarrassed since",
    "start": "1777330",
    "end": "1782519"
  },
  {
    "text": "he had shown it but I got fixed another interesting thing about Oracle is that",
    "start": "1782519",
    "end": "1788730"
  },
  {
    "text": "it's the only database I know where we can kind of revise the column names or or encode them or office Cape them and",
    "start": "1788730",
    "end": "1797179"
  },
  {
    "text": "then again you can see an example of the null byte being used as white spaces they're very effective at some point",
    "start": "1797179",
    "end": "1806789"
  },
  {
    "text": "firewalls become good at the office gating your education so in this case it",
    "start": "1806789",
    "end": "1813539"
  },
  {
    "text": "can sometimes we can take the opposite approach and try and keep things as simple as possible the nice thing about",
    "start": "1813539",
    "end": "1820019"
  },
  {
    "text": "sequel is that it has English like structure syntax so in some cases we can",
    "start": "1820019",
    "end": "1827130"
  },
  {
    "text": "of something it just seems like normal English and I'll be really hard for a firewall to detect because a big issue",
    "start": "1827130",
    "end": "1834000"
  },
  {
    "text": "with firewalls will be false positives too so some bypasses that I have mod",
    "start": "1834000",
    "end": "1843029"
  },
  {
    "text": "security so this was a bypass I did for the Marr security challenge and in green",
    "start": "1843029",
    "end": "1848700"
  },
  {
    "text": "I kind of highlighted the kind of important parts of the Curia that really bypassed the firewall",
    "start": "1848700",
    "end": "1856639"
  },
  {
    "text": "instead of using a normal division sign we we used the keyword div and then",
    "start": "1856639",
    "end": "1862409"
  },
  {
    "text": "those blocks the hash are there are comments which we can use to kind of separate our data in this case I had to",
    "start": "1862409",
    "end": "1871230"
  },
  {
    "text": "you select 0 X 0 0 for it to work and it detected table name was impossible to",
    "start": "1871230",
    "end": "1877470"
  },
  {
    "text": "get a table name and there on its own so what I had to do was use my sequel specific code which allows you specify",
    "start": "1877470",
    "end": "1883740"
  },
  {
    "text": "code to run only if it's you can specify a version there and will only run if it's that version or higher so there I",
    "start": "1883740",
    "end": "1890850"
  },
  {
    "text": "just put a virgin basically version 3 so a run table name is the the version is",
    "start": "1890850",
    "end": "1898740"
  },
  {
    "text": "higher than 3 so again by allowing me to combine table name with something next",
    "start": "1898740",
    "end": "1903779"
  },
  {
    "text": "to it launch it Korea wasn't able to recognize the keyword table name this is",
    "start": "1903779",
    "end": "1911879"
  },
  {
    "text": "a curt so this has been fixed already I've been working with Ryan but Barnett's helping improve mod security",
    "start": "1911879",
    "end": "1920480"
  },
  {
    "text": "currently this works using case when binary true and so on however it's",
    "start": "1921529",
    "end": "1927450"
  },
  {
    "text": "almost impossible to get a union select in there and this is an issue known as the Union Select matricis someone",
    "start": "1927450",
    "end": "1933809"
  },
  {
    "text": "tweeted about it and then Nick Galbraith wrote a blog about it and the issue is",
    "start": "1933809",
    "end": "1940320"
  },
  {
    "text": "that almost all firewalls will detect Union select mattresses isn't a sequel injection where it's not really a sequel",
    "start": "1940320",
    "end": "1945960"
  },
  {
    "text": "injection so something that firewalls have a lot of trouble with is fighting these false positives trying to text",
    "start": "1945960",
    "end": "1952080"
  },
  {
    "text": "sequence but allow valid data to go through at the same time I wasn't happy not having a year's unions",
    "start": "1952080",
    "end": "1958780"
  },
  {
    "text": "let's bypass so I stayed up kind of late last night working on it and this is why I came up with the mod keyword was",
    "start": "1958780",
    "end": "1965620"
  },
  {
    "text": "essential air to get by again using the decimal is able to unite the union with",
    "start": "1965620",
    "end": "1972070"
  },
  {
    "text": "the two there so that it's not recognize that Union properly and then using a no",
    "start": "1972070",
    "end": "1977950"
  },
  {
    "text": "break spacing which in the Union selects and allow it to really see that Union selects there and you can go to marching",
    "start": "1977950",
    "end": "1985120"
  },
  {
    "text": "here he has a several test pages right now it's just one of them the one I test",
    "start": "1985120",
    "end": "1990280"
  },
  {
    "text": "it was the a kinetics page they have a live demo setup which is proxies through it and you can try that out and it'll",
    "start": "1990280",
    "end": "1997030"
  },
  {
    "text": "work I was doing a job for clients and I",
    "start": "1997030",
    "end": "2003270"
  },
  {
    "text": "noticed that this worked and I later found out those 40 net that was behind",
    "start": "2003270",
    "end": "2009120"
  },
  {
    "text": "it and it was allowing that to work essentially any character above the range eighty hex or a yeah we'll go",
    "start": "2009120",
    "end": "2017580"
  },
  {
    "text": "through so we can put FF in between the select or any keyword and it just",
    "start": "2017580",
    "end": "2022980"
  },
  {
    "text": "removes it so that works and the firewall doesn't see that green seagull",
    "start": "2022980",
    "end": "2029820"
  },
  {
    "text": "was a open source firewall it then went commercial when I was testing it out",
    "start": "2029820",
    "end": "2035370"
  },
  {
    "text": "setting it up at first I thought I hadn't set it up properly because I couldn't get it to detect my sequin junctions I later found out that",
    "start": "2035370",
    "end": "2042840"
  },
  {
    "text": "it was set up properly it just wasn't detecting my sequel injections that first one Union select table name from",
    "start": "2042840",
    "end": "2048510"
  },
  {
    "text": "information schema on the tables limit one no office keishon - it wasn't being detected so I actually had a medium of",
    "start": "2048510",
    "end": "2054000"
  },
  {
    "text": "green sequel to see if there's anything I was doing wrong and they said that's a bug that it should be detected so",
    "start": "2054000",
    "end": "2060470"
  },
  {
    "text": "they'll fix that it seems to really detect SQL tautology so if I add it a",
    "start": "2060470",
    "end": "2069270"
  },
  {
    "text": "one equals zero there and I get to select it but it's really easy bypass hide just adding an exponent like one",
    "start": "2069270",
    "end": "2074610"
  },
  {
    "text": "equals zero dot exponent one I just think it detect it or the binary keyword",
    "start": "2074610",
    "end": "2079620"
  },
  {
    "text": "is really is really cool it helps bypass a lot firewalls we can put the binary keyword right before what we're",
    "start": "2079620",
    "end": "2085770"
  },
  {
    "text": "selecting so to call name or in this case just one and I all firewalls don't expect that",
    "start": "2085770",
    "end": "2091810"
  },
  {
    "text": "you can have a word right before the one so I also bypasses the error detection",
    "start": "2091810",
    "end": "2097030"
  },
  {
    "text": "and I didn't really try that much because it was too easy but the last one",
    "start": "2097030",
    "end": "2102070"
  },
  {
    "text": "I'm just using it if that till he goes undetected too but they're really helpful and it Green sequel does have a",
    "start": "2102070",
    "end": "2109570"
  },
  {
    "text": "lot of other solutions and and security on the database not only the detection so that might be worth checking out",
    "start": "2109570",
    "end": "2116460"
  },
  {
    "text": "also when I was testing the software I decided to try a simple cross-site",
    "start": "2116460",
    "end": "2122620"
  },
  {
    "text": "script in the comment box no bueno",
    "start": "2122620",
    "end": "2128490"
  },
  {
    "text": "I mean out of all places the comment box is kind of the most obvious place where you'd be able to I mean they should",
    "start": "2128500",
    "end": "2136060"
  },
  {
    "text": "secure against cross-site scripting or something for that and it worked I didn't test anything else so I don't",
    "start": "2136060",
    "end": "2142360"
  },
  {
    "text": "know but just something to be aware of so lip injection is really good it's I",
    "start": "2142360",
    "end": "2149800"
  },
  {
    "text": "said written and see and it doesn't use rejects that uses tokens and what's",
    "start": "2149800",
    "end": "2155260"
  },
  {
    "text": "really great about is that it it's fast it's really fast compared to using regular expressions this is kind of",
    "start": "2155260",
    "end": "2163180"
  },
  {
    "text": "funny these are all bypasses that I had reported to Nick and he had fixed them but then comes the issue with false",
    "start": "2163180",
    "end": "2170320"
  },
  {
    "text": "positives you try to fix false positives and then you reintroduce other sequins that that were fixed before so the first",
    "start": "2170320",
    "end": "2178990"
  },
  {
    "text": "one is a really simple one all I did was add an alias there in that case web sec",
    "start": "2178990",
    "end": "2184180"
  },
  {
    "text": "a lot of times people think you have to have as before to for it to be an alias but you don't have to you can just put",
    "start": "2184180",
    "end": "2189700"
  },
  {
    "text": "it right after the column that works using a new line between the Union",
    "start": "2189700",
    "end": "2197530"
  },
  {
    "text": "select works as well that work Oh issue where you can put the F with the Union",
    "start": "2197530",
    "end": "2204310"
  },
  {
    "text": "if it's a number that he had presented and fixed got reached reduced again so",
    "start": "2204310",
    "end": "2209380"
  },
  {
    "text": "again that's another bypass it's so doesn't check really for for other",
    "start": "2209380",
    "end": "2217000"
  },
  {
    "text": "statements in Microsoft sequel like we can add",
    "start": "2217000",
    "end": "2222440"
  },
  {
    "text": "different queries there and won't detect it and then again we can use the the",
    "start": "2222440",
    "end": "2228680"
  },
  {
    "text": "curly brackets or the square brackets and thou goat undetected as well so",
    "start": "2228680",
    "end": "2234200"
  },
  {
    "text": "these are once it currently work but there's I've had I've Larry come up with hundreds of bypasses for live injection",
    "start": "2234200",
    "end": "2240799"
  },
  {
    "text": "so here are just some other ones that I found interesting these have been fixed already though but just something to",
    "start": "2240799",
    "end": "2247309"
  },
  {
    "text": "think of a for when you're testing other firewalls that last one there the",
    "start": "2247309",
    "end": "2256339"
  },
  {
    "text": "procedure analyst that's kind of cool because you can put invalid data in the brackets or the parentheses and it's if",
    "start": "2256339",
    "end": "2264890"
  },
  {
    "text": "you as long as you have a union select after it won't run the procedure analyst so you can just put invalid data there",
    "start": "2264890",
    "end": "2272720"
  },
  {
    "text": "and we'll be fine as long as you have a union select after next up we'll see",
    "start": "2272720",
    "end": "2278720"
  },
  {
    "text": "some encoding methods and these encodings aren't really specific to",
    "start": "2278720",
    "end": "2284809"
  },
  {
    "text": "sequel injection s-- it can be used to bypass anything like it's a cross-site scripting or whatever you're after and",
    "start": "2284809",
    "end": "2292390"
  },
  {
    "text": "the thing about these encodings is it's very it depends on the patient or how",
    "start": "2292390",
    "end": "2297769"
  },
  {
    "text": "the data gets transformed in process and by several layers could be the firewall",
    "start": "2297769",
    "end": "2302839"
  },
  {
    "text": "it could be the application there could be a proxy in between and they'll all kind of read the data different really",
    "start": "2302839",
    "end": "2308150"
  },
  {
    "text": "or handle the data differently so we can use encodings to bypass firewalls in some cases the most basic one is just a",
    "start": "2308150",
    "end": "2316279"
  },
  {
    "text": "year own code everyone's pretty familiar with this if you've ever navigated in the web browser when you type special",
    "start": "2316279",
    "end": "2322339"
  },
  {
    "text": "characters in the web browser and they get transformed to oreo and coded version and basically it's just the",
    "start": "2322339",
    "end": "2329029"
  },
  {
    "text": "hexadecimal version of the character prefixed by a % similar to the year in",
    "start": "2329029",
    "end": "2335930"
  },
  {
    "text": "code we have double year in code if the application does a decode on the on the data we can double encode it basically",
    "start": "2335930",
    "end": "2342980"
  },
  {
    "text": "encode the % which is just 25 and not add other fronts so when empty codes at",
    "start": "2342980",
    "end": "2347990"
  },
  {
    "text": "once will end up with the % 61 and weighty code again we'll get the character I",
    "start": "2347990",
    "end": "2354390"
  },
  {
    "text": "contributed a lot of tamper scripts to SQL map and what a tamper script is it",
    "start": "2355470",
    "end": "2363369"
  },
  {
    "text": "basically transforms the request that you're sending in a way that will help hopefully bypass a firewall so caring",
    "start": "2363369",
    "end": "2372910"
  },
  {
    "text": "code is when I submitted that just basically there's a simple your own code and the description they put there is",
    "start": "2372910",
    "end": "2378490"
  },
  {
    "text": "useful to bypass very weak we have application firewalls didn't believe me they would bypass anything I totally",
    "start": "2378490",
    "end": "2384880"
  },
  {
    "text": "trust me it does so they decide to include it and I'll show you a demo",
    "start": "2384880",
    "end": "2390210"
  },
  {
    "text": "when I tried to access Akeem WS and that gets blocked as hacking for the category this is an iron port firewall by the way",
    "start": "2422840",
    "end": "2430930"
  },
  {
    "text": "so all I have to do is your own code one of the characters in the host header so",
    "start": "2430930",
    "end": "2436910"
  },
  {
    "text": "when it gets sent it doesn't get detected as that webpage so I read on",
    "start": "2436910",
    "end": "2441920"
  },
  {
    "text": "Wikipedia that the Cisco bots are imported in 2007 for around eight",
    "start": "2441920",
    "end": "2447590"
  },
  {
    "text": "hundred and thirty million dollars so",
    "start": "2447590",
    "end": "2453290"
  },
  {
    "text": "it's kind of funny it's something as simple as this would work so just",
    "start": "2453290",
    "end": "2460340"
  },
  {
    "text": "changing the hosts one character and the host your own coding it we get that we're able to access the whole website",
    "start": "2460340",
    "end": "2466580"
  },
  {
    "text": "so as a Content filter bypass there and I tried double euro encoding that also works",
    "start": "2466580",
    "end": "2473650"
  },
  {
    "text": "unicode is another encoding that usually works with i is an essentially is just",
    "start": "2483299",
    "end": "2488349"
  },
  {
    "text": "adding au 0 0 and then the hex version of the character UTF multibyte encoding",
    "start": "2488349",
    "end": "2497890"
  },
  {
    "text": "is kind of an interesting one and essentially when it does is uh the living bits of the first byte will whoa",
    "start": "2497890",
    "end": "2506019"
  },
  {
    "text": "indicates how many sequential bytes are after that up to the first 0 and then",
    "start": "2506019",
    "end": "2511690"
  },
  {
    "text": "after that the following bits of the second bytes will we start with 10 and",
    "start": "2511690",
    "end": "2517240"
  },
  {
    "text": "then ok the rest of it will be the data so for example with two two-bike",
    "start": "2517240",
    "end": "2525339"
  },
  {
    "text": "sequence UTF encoding the first bits up to the first 0 shows us how many",
    "start": "2525339",
    "end": "2530500"
  },
  {
    "text": "following bytes are there and then for each falling byte we always start with 10 but that's kind of redundant since we",
    "start": "2530500",
    "end": "2537460"
  },
  {
    "text": "already know how many bytes are following we don't really need that 10 so some applications might not read that",
    "start": "2537460",
    "end": "2543910"
  },
  {
    "text": "10 and just read the rest so this allows us to give us different variations for",
    "start": "2543910",
    "end": "2550680"
  },
  {
    "text": "the same two byte encoding or sequence so the first two high order bits and",
    "start": "2550680",
    "end": "2557170"
  },
  {
    "text": "would be 10000 won and that's how each variation looks so it's worth trying all",
    "start": "2557170",
    "end": "2562180"
  },
  {
    "text": "of them see which one works nibble",
    "start": "2562180",
    "end": "2569470"
  },
  {
    "text": "encoding is another interesting one unable is just four bits and so essentially a nibble can represent any",
    "start": "2569470",
    "end": "2576910"
  },
  {
    "text": "character and a hex or to nibble is the forming octet so there you can just see",
    "start": "2576910",
    "end": "2586000"
  },
  {
    "text": "how each character can be represented and then in a nibble or four bits and so",
    "start": "2586000",
    "end": "2592809"
  },
  {
    "text": "we start with first nibble encoding where we just essentially encode the",
    "start": "2592809",
    "end": "2598240"
  },
  {
    "text": "first character of the hex so in this case a which equals sixty one we just",
    "start": "2598240",
    "end": "2603250"
  },
  {
    "text": "encode the six only which equals 36 so then we end up with % 36 1 so if it were",
    "start": "2603250",
    "end": "2610569"
  },
  {
    "text": "to decode the first nibble then that would turn out to be the character everyone I would buy",
    "start": "2610569",
    "end": "2617460"
  },
  {
    "text": "second nipple encoding is similar by instead of doing the first nibble we're",
    "start": "2618460",
    "end": "2623869"
  },
  {
    "text": "including the second navel and it's just say your own code that we're doing then",
    "start": "2623869",
    "end": "2633260"
  },
  {
    "text": "we get double or nibble encoding and this is a combination of the first and second that when coding where we just",
    "start": "2633260",
    "end": "2638359"
  },
  {
    "text": "encode the first nibble and then the second nibble essentially the way it looks like this is a really cool one",
    "start": "2638359",
    "end": "2646750"
  },
  {
    "text": "invalid percent-encoding this works with asp and basically we can allow we can",
    "start": "2646750",
    "end": "2656300"
  },
  {
    "text": "put percent signs in between characters and you know remove them and this works your fill all firewalls I think this",
    "start": "2656300",
    "end": "2662300"
  },
  {
    "text": "bypasses IronPort actually and several others and we can actually have multiple",
    "start": "2662300",
    "end": "2667579"
  },
  {
    "text": "just percent signs followed by each other and no run fine will work",
    "start": "2667579",
    "end": "2674440"
  },
  {
    "text": "invalid hex this is another interesting one essentially if application converts",
    "start": "2683269",
    "end": "2690109"
  },
  {
    "text": "the data into decimal what we can do is create invalid hex that results in the",
    "start": "2690109",
    "end": "2695719"
  },
  {
    "text": "same decimal value is valid hex for",
    "start": "2695719",
    "end": "2702259"
  },
  {
    "text": "example on that table we can see how invalid hex instead of stopping at zero",
    "start": "2702259",
    "end": "2708259"
  },
  {
    "text": "F and then moving on to ten it would continue on to zero g and then 0 H and",
    "start": "2708259",
    "end": "2715099"
  },
  {
    "text": "so on but when again when we convert that to decimal we end up with the same",
    "start": "2715099",
    "end": "2720439"
  },
  {
    "text": "result in this case 97 so again all these depend on how the application will",
    "start": "2720439",
    "end": "2725890"
  },
  {
    "text": "handle the data and what it does with it these may work on to leapfrog as I was",
    "start": "2725890",
    "end": "2735409"
  },
  {
    "text": "saying leapfrog is the tool that I'm developing to help test firewalls it find bypasses and provide solutions to",
    "start": "2735409",
    "end": "2743839"
  },
  {
    "text": "these bypasses currently it's just",
    "start": "2743839",
    "end": "2749659"
  },
  {
    "text": "working for sequel injections right now but eventually I'd like to add local file inclusions cross-site scripting",
    "start": "2749659",
    "end": "2756649"
  },
  {
    "text": "content filter and really make a complete tool to cover all the types of firewalls the cool thing about it is it",
    "start": "2756649",
    "end": "2765949"
  },
  {
    "text": "creates all these bypasses dynamically on runtime and test these bypasses and",
    "start": "2765949",
    "end": "2772549"
  },
  {
    "text": "then it provides recommendations for successful bypasses and what it does is",
    "start": "2772549",
    "end": "2778149"
  },
  {
    "text": "it uses a waffle acceptance factor which is a score of how many vectors were",
    "start": "2778149",
    "end": "2784759"
  },
  {
    "text": "allowed through I got that term from Wikipedia the wife acceptance factor",
    "start": "2784759",
    "end": "2791539"
  },
  {
    "text": "which is essentially how nice a product is or how much",
    "start": "2791539",
    "end": "2798500"
  },
  {
    "text": "convincing you need how much you need to convince your wife you know to get a product and such for the demo I just of",
    "start": "2798500",
    "end": "2808400"
  },
  {
    "text": "the screenshot",
    "start": "2808400",
    "end": "2811150"
  },
  {
    "text": "so it touched the string finds the string it moves on to testing and coatings because that's kind of the first thing we want to test after",
    "start": "2830910",
    "end": "2838080"
  },
  {
    "text": "testing and coatings it will tell you what encodings are available to use and",
    "start": "2838080",
    "end": "2843480"
  },
  {
    "text": "then oh try use those encodings it will also test different terminators so",
    "start": "2843480",
    "end": "2849270"
  },
  {
    "text": "things we can use to end queries and such so in this case exists it",
    "start": "2849270",
    "end": "2855450"
  },
  {
    "text": "determines that the the injection is of type integer and it uses a simple",
    "start": "2855450",
    "end": "2861960"
  },
  {
    "text": "arithmetic bypass to determine that it",
    "start": "2861960",
    "end": "2869190"
  },
  {
    "text": "precedes to test different keywords and this is kind of an old screenshot I",
    "start": "2869190",
    "end": "2874440"
  },
  {
    "text": "should update with new data but I'll be making this tool available on my github",
    "start": "2874440",
    "end": "2879780"
  },
  {
    "text": "as well as long as well as all the code that you've seen I'll put it on my github so you guys can check it out",
    "start": "2879780",
    "end": "2887569"
  },
  {
    "text": "and that's it",
    "start": "2899450",
    "end": "2902410"
  }
]