[
  {
    "start": "0",
    "end": "54000"
  },
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14000"
  },
  {
    "text": "hello i am mati vanu and together with tom von gutem we will be presenting timeless timing attacks",
    "start": "14000",
    "end": "20560"
  },
  {
    "text": "tom is a researcher at the d strength group in keuler in belgium he's a phonetic web on the network security",
    "start": "20560",
    "end": "27039"
  },
  {
    "text": "enthusiasts and he likes to exploit side channel leaks in browsers and more",
    "start": "27039",
    "end": "32160"
  },
  {
    "text": "generally in web platforms i'm a postdoctoral researcher at nyu abu",
    "start": "32160",
    "end": "37520"
  },
  {
    "text": "dhabi and later this year i will start as a professor at k11 i'm interested in",
    "start": "37520",
    "end": "42640"
  },
  {
    "text": "wireless security software security and also a bit of applied crypto and previously i discovered the crack",
    "start": "42640",
    "end": "49120"
  },
  {
    "text": "attack against wpa2 on the rc4 no more attack",
    "start": "49120",
    "end": "54640"
  },
  {
    "start": "54000",
    "end": "54000"
  },
  {
    "text": "in this presentation we will be talking about timing attacks on timing leaks and",
    "start": "54640",
    "end": "59680"
  },
  {
    "text": "let's start with three simple examples of a timing leak so the first example on the top left is",
    "start": "59680",
    "end": "66880"
  },
  {
    "text": "a quite straightforward timing leak if some secret condition is true then extra",
    "start": "66880",
    "end": "72400"
  },
  {
    "text": "computation is performed on here the adversary can recover",
    "start": "72400",
    "end": "77439"
  },
  {
    "text": "whether the secret condition was true or not based on the execution time",
    "start": "77439",
    "end": "83280"
  },
  {
    "text": "an example on the top right we have a for loop that goes through all the elements in an array",
    "start": "83280",
    "end": "89360"
  },
  {
    "text": "and once an element has been found with a certain secret property then the for loop is terminated",
    "start": "89360",
    "end": "97520"
  },
  {
    "text": "in other words the number of iterations that the for loop executes depends on some kind of secret",
    "start": "97680",
    "end": "104479"
  },
  {
    "text": "information and this also means that the number of iterations that are executed leaks",
    "start": "104479",
    "end": "110240"
  },
  {
    "text": "information to an adversary finally at the bottom we have a timing",
    "start": "110240",
    "end": "116960"
  },
  {
    "text": "leak where if an array is not empty then extra computation is performed",
    "start": "116960",
    "end": "123600"
  },
  {
    "text": "you can for instance for instance imagine a case where there is a search functionality on the website",
    "start": "123600",
    "end": "130080"
  },
  {
    "text": "and if you are searching for a keyword on this keyword occurs in a secret document then",
    "start": "130080",
    "end": "136879"
  },
  {
    "text": "extra computation is performed which again leaks information",
    "start": "136879",
    "end": "142959"
  },
  {
    "text": "now how can these timing leaks be exploited using a traditional timing attack well the adversary of course needs to",
    "start": "142959",
    "end": "149760"
  },
  {
    "text": "connect to the target server the adversary possibly needs to send a large number of requests and for each request",
    "start": "149760",
    "end": "157440"
  },
  {
    "text": "the adversary measures how long it took the server to send a response",
    "start": "157440",
    "end": "163200"
  },
  {
    "text": "and then the adversary will compare the response time of a baseline request with",
    "start": "163200",
    "end": "168239"
  },
  {
    "text": "a target request now what do i mean with a baseline request well a baseline",
    "start": "168239",
    "end": "173920"
  },
  {
    "text": "request is for example the first time leak here where the adversary knows that",
    "start": "173920",
    "end": "179840"
  },
  {
    "text": "the secret condition will evaluate to false and then in the target request we",
    "start": "179840",
    "end": "186159"
  },
  {
    "text": "do not know whether the secret condition will evaluate to false or true",
    "start": "186159",
    "end": "191599"
  },
  {
    "text": "and instead we derive that by determining if there is a difference in the response time between",
    "start": "191599",
    "end": "198159"
  },
  {
    "text": "the baseline where we know the condition is false on between the target where we do not know what this condition will",
    "start": "198159",
    "end": "204720"
  },
  {
    "text": "evaluate to so on our timing timing attacks we will be we will always be comparing the",
    "start": "204720",
    "end": "211120"
  },
  {
    "text": "baseline with a target to determine whether there really is a difference between the baseline on the",
    "start": "211120",
    "end": "217519"
  },
  {
    "text": "target we will use statistical tests",
    "start": "217519",
    "end": "222640"
  },
  {
    "start": "223000",
    "end": "223000"
  },
  {
    "text": "now what is the performance of these timing attacks well it depends on various variables depends on the network",
    "start": "223200",
    "end": "230159"
  },
  {
    "text": "connection between the attacker on the server so if there is more jitter the performance of the attack will degrade",
    "start": "230159",
    "end": "237439"
  },
  {
    "text": "an attacker can try to mitigate this to some extent by moving closer to the target for instance by renting the",
    "start": "237439",
    "end": "244080"
  },
  {
    "text": "server in the same cloud provider of the victim and just to remark here the jitter can",
    "start": "244080",
    "end": "249920"
  },
  {
    "text": "be present both on the upstream so on the requests on the down screen so on the responses",
    "start": "249920",
    "end": "257120"
  },
  {
    "text": "another important factor is the size of the timing leaks so it's much easier to exploit a large timing leak of say 50",
    "start": "257120",
    "end": "265120"
  },
  {
    "text": "milliseconds than it is to exploit a small timing leak of for instance five",
    "start": "265120",
    "end": "270960"
  },
  {
    "text": "microseconds finally the number of measurements that you can",
    "start": "270960",
    "end": "276800"
  },
  {
    "text": "make also heavily influence the performance of the attack so the more measurements you can make",
    "start": "276800",
    "end": "283360"
  },
  {
    "text": "the better the performance of a timing attack anton will now graphically illustrate",
    "start": "283360",
    "end": "290000"
  },
  {
    "text": "how a timing attack works okay so let's see how this attack works",
    "start": "290000",
    "end": "296320"
  },
  {
    "text": "in practice so we have our attacker on the left side and the server on the right side and it's a remote attack as",
    "start": "296320",
    "end": "303360"
  },
  {
    "text": "you can see because well the packets need to go over the internet over several hubs so what the",
    "start": "303360",
    "end": "310000"
  },
  {
    "text": "attacker does is he will send the request and start at the same time the timer",
    "start": "310000",
    "end": "315919"
  },
  {
    "text": "and only when the response has been received the attacker will stop the timer",
    "start": "315919",
    "end": "321680"
  },
  {
    "text": "so the attacker will have to do this multiple times and record every time how long it took to process the request",
    "start": "321680",
    "end": "330479"
  },
  {
    "text": "so here we see another example and in the last hope you can see that there was a bit of jitter",
    "start": "330560",
    "end": "337520"
  },
  {
    "text": "causing the the request to be delayed and that resulted in a higher",
    "start": "337520",
    "end": "343759"
  },
  {
    "text": "timing measurement so the attacker will have to do this",
    "start": "343759",
    "end": "349199"
  },
  {
    "text": "many times over and then try to use some statistical analysis",
    "start": "349199",
    "end": "354400"
  },
  {
    "text": "to see what the actual timing without the consequences of jitter",
    "start": "354400",
    "end": "360240"
  },
  {
    "text": "for the processing the request will be",
    "start": "360240",
    "end": "365880"
  },
  {
    "text": "um so to see uh what what could actually be achieved with such a",
    "start": "366560",
    "end": "372639"
  },
  {
    "text": "timing attack uh we did some experiments uh so from our university network we",
    "start": "372639",
    "end": "378880"
  },
  {
    "text": "launched attacks against servers that we set up on aws",
    "start": "378880",
    "end": "384720"
  },
  {
    "text": "in different parts of the world so we set a server up in the eu the us and asia and then we try to see",
    "start": "384720",
    "end": "393680"
  },
  {
    "text": "like with with 95 accuracy how many requests were required",
    "start": "393680",
    "end": "399120"
  },
  {
    "text": "to detect a timing difference and we arranged this timing difference",
    "start": "399120",
    "end": "405199"
  },
  {
    "text": "between 5 microseconds and 50 microseconds so as you can see um",
    "start": "405199",
    "end": "412720"
  },
  {
    "text": "for 50 microseconds we managed to find to detect",
    "start": "412720",
    "end": "418639"
  },
  {
    "text": "this timing difference in all servers and so it took 333 requests to find",
    "start": "418639",
    "end": "427840"
  },
  {
    "text": "to detect this timing difference in the eu server a bit more than 4000 for the us and more",
    "start": "427840",
    "end": "435120"
  },
  {
    "text": "than 7000 for the server in asia and also as the timing difference goes",
    "start": "435120",
    "end": "442000"
  },
  {
    "text": "lower you can see that either many more requests are required",
    "start": "442000",
    "end": "448319"
  },
  {
    "text": "to perform this statistical analysis or it's simply not possible so for uh the",
    "start": "448319",
    "end": "454080"
  },
  {
    "text": "server in the us a timing difference of 10 microseconds was no longer possible to detect",
    "start": "454080",
    "end": "460080"
  },
  {
    "text": "um with less than 1000 measurements",
    "start": "460080",
    "end": "467599"
  },
  {
    "text": "and that brings us to the timeless timing index",
    "start": "470319",
    "end": "474879"
  },
  {
    "text": "so as we see from the um from the example before",
    "start": "476960",
    "end": "483599"
  },
  {
    "text": "we know that the the absolute response timing is quite unreliable because it will always include jitter",
    "start": "483599",
    "end": "490240"
  },
  {
    "text": "for every request so we thought like okay why not just get rid of the notion",
    "start": "490240",
    "end": "496000"
  },
  {
    "text": "of time so that's why we call these attacks timeless",
    "start": "496000",
    "end": "501280"
  },
  {
    "text": "and then well when we don't have any time and still want to do time index",
    "start": "501520",
    "end": "507440"
  },
  {
    "text": "we have to find something different so we found that we can actually use",
    "start": "507440",
    "end": "513120"
  },
  {
    "text": "or exploit concurrency and instead of looking at the time of the",
    "start": "513120",
    "end": "519200"
  },
  {
    "text": "request we send two requests at the same time and then look at their",
    "start": "519200",
    "end": "525920"
  },
  {
    "text": "the response order so this means that we don't no longer need any absolute timing measurements",
    "start": "525920",
    "end": "533360"
  },
  {
    "text": "and as a result these timeless diamond attacks are completely unaffected by a network",
    "start": "533360",
    "end": "539279"
  },
  {
    "text": "jitter so let's look at this diagram on how",
    "start": "539279",
    "end": "544640"
  },
  {
    "text": "this would work in practice so we have the exact same setup",
    "start": "544640",
    "end": "550880"
  },
  {
    "text": "exact here you can see that the attacker is no longer using a clock to",
    "start": "550880",
    "end": "556080"
  },
  {
    "text": "measure the time it takes to send the request so the attacker sends two",
    "start": "556080",
    "end": "562560"
  },
  {
    "text": "requests the same time and they arrive at the server and then they're",
    "start": "562560",
    "end": "568560"
  },
  {
    "text": "processed in parallel and of course there can only be one",
    "start": "568560",
    "end": "574320"
  },
  {
    "text": "who finishes processing first and so this will be the light blue one um and this will also be the order in",
    "start": "574320",
    "end": "581519"
  },
  {
    "text": "which they are received by the attacker and so the attacker can from this infer",
    "start": "581519",
    "end": "587760"
  },
  {
    "text": "that's the the light blue which matches the the light",
    "start": "587760",
    "end": "593200"
  },
  {
    "text": "pink one that requests managed to process before",
    "start": "593200",
    "end": "598800"
  },
  {
    "text": "the darker one now if we again have the same",
    "start": "598800",
    "end": "604399"
  },
  {
    "text": "example but here we see and there was still a some jitter in the network parts from",
    "start": "604399",
    "end": "611440"
  },
  {
    "text": "the attacker to the server we see that the packets still arrive at the same time at the server so they are",
    "start": "611440",
    "end": "618480"
  },
  {
    "text": "still processed at exactly the same time and again",
    "start": "618480",
    "end": "623920"
  },
  {
    "text": "we see that the light blue response is generated first so this",
    "start": "623920",
    "end": "630320"
  },
  {
    "text": "indicates that the processing time of this lights pink requests took less time",
    "start": "630320",
    "end": "637760"
  },
  {
    "text": "thank you tom so what are the requirements to perform a timeless timing attack",
    "start": "637760",
    "end": "642880"
  },
  {
    "start": "638000",
    "end": "638000"
  },
  {
    "text": "well first and for all the requests need to arrive at the same time at the server the server needs to process requests",
    "start": "642880",
    "end": "649839"
  },
  {
    "text": "concurrently on the response order needs to reflect the difference in the execution time of",
    "start": "649839",
    "end": "655920"
  },
  {
    "text": "both requests so let's explore these three requirements in more detail",
    "start": "655920",
    "end": "662480"
  },
  {
    "text": "the first requirement that the two requests have to arrive at the same time can be fulfilled using two options",
    "start": "662480",
    "end": "669760"
  },
  {
    "text": "namely by either relying on multiplexing or by relying on encapsulation",
    "start": "669760",
    "end": "676000"
  },
  {
    "text": "an example where we can rely on multiplexing is the http 2 protocol",
    "start": "676000",
    "end": "681120"
  },
  {
    "text": "which supports concurrent requests so with http 2 we send we can send two requests at the",
    "start": "681120",
    "end": "688480"
  },
  {
    "text": "same time and they will be sent on processed in parallel",
    "start": "688480",
    "end": "694160"
  },
  {
    "text": "moreover a single request well actually a single tcp packet can",
    "start": "694160",
    "end": "699279"
  },
  {
    "text": "carry two http requests at the same time that will then also be pro processed concurrently",
    "start": "699279",
    "end": "707760"
  },
  {
    "text": "another option is to rely on encapsulation and here our example is to exploit http1",
    "start": "707760",
    "end": "714800"
  },
  {
    "text": "when that protocol is run over tor or over a vpn connection",
    "start": "714800",
    "end": "720399"
  },
  {
    "text": "and let me illustrate both examples graphically so with multiplexing we can put two http",
    "start": "720399",
    "end": "728480"
  },
  {
    "text": "requests shown in grey here at the top and a single tcp packet shown in blue",
    "start": "728480",
    "end": "735600"
  },
  {
    "text": "for http 1 over tor we would be targeting an onion service",
    "start": "735600",
    "end": "741279"
  },
  {
    "text": "and here at the bottom again the two http requests are shown in grey",
    "start": "741279",
    "end": "747200"
  },
  {
    "text": "on here each http one request is put into a separate tcp packet shown in red",
    "start": "747200",
    "end": "754480"
  },
  {
    "text": "on the turn this tcp packet is put into a separate torso packet",
    "start": "754480",
    "end": "760800"
  },
  {
    "text": "however what the adversary then does is that the adversary assures that these",
    "start": "760800",
    "end": "766160"
  },
  {
    "text": "two torsos will be aggregated into one single tcp packet",
    "start": "766160",
    "end": "771760"
  },
  {
    "text": "and when that single tcp packet arrives at the server then the server will effectively process both http 1 requests",
    "start": "771760",
    "end": "780399"
  },
  {
    "text": "at the same time now for the second requirement",
    "start": "780399",
    "end": "787360"
  },
  {
    "start": "783000",
    "end": "783000"
  },
  {
    "text": "the second requirement is that these two requests have to be processed concurrently",
    "start": "787360",
    "end": "793040"
  },
  {
    "text": "and whether that is done depends on the application so with some implementations",
    "start": "793040",
    "end": "798320"
  },
  {
    "text": "they may still handle requests sequentially other implementations may handle them in",
    "start": "798320",
    "end": "804000"
  },
  {
    "text": "parallel one thing to watch out for here is that if an encryption protocol is used on top",
    "start": "804000",
    "end": "810399"
  },
  {
    "text": "then sometimes that encryption protocol may require that the decryption happens sequentially",
    "start": "810399",
    "end": "817839"
  },
  {
    "text": "the third requirement is that the order of responses has to reflect the order of the",
    "start": "817839",
    "end": "824560"
  },
  {
    "text": "execution time or in other words the server must generate on sent a response immediately",
    "start": "824560",
    "end": "831600"
  },
  {
    "text": "after it finished processing the request additionally the order of responses must",
    "start": "831600",
    "end": "838880"
  },
  {
    "text": "still be the same when it when they arrive at the adversary and most of the cases",
    "start": "838880",
    "end": "845360"
  },
  {
    "text": "that is actually the case and this is because both responsible responses follow the same network path",
    "start": "845360",
    "end": "852959"
  },
  {
    "text": "but even if for some reasons these responses are reordered then the",
    "start": "852959",
    "end": "858240"
  },
  {
    "text": "adversary can still look at the tcp sequence number or the tcp timestamps to",
    "start": "858240",
    "end": "864000"
  },
  {
    "text": "recover the original order in which the server sent those responses",
    "start": "864000",
    "end": "871399"
  },
  {
    "text": "so how performant is the attack in practice well if we compare to sequential timing",
    "start": "872800",
    "end": "878480"
  },
  {
    "text": "attacks tom already explained the first part of this table here now we also added how many",
    "start": "878480",
    "end": "886160"
  },
  {
    "text": "requests we need when performing a traditional timing attack over land on over the local host",
    "start": "886160",
    "end": "891920"
  },
  {
    "text": "for instance to measure a five microsecond timing leak over the local host we need a bit more than 40 requests",
    "start": "891920",
    "end": "900160"
  },
  {
    "text": "on the other hand for a timeless timing attack no matter where we are on the internet to measure the same timing leak",
    "start": "900160",
    "end": "908399"
  },
  {
    "text": "we only need about 50 requests pair while for instance the five microsecond",
    "start": "908399",
    "end": "913760"
  },
  {
    "text": "leak cannot be exploited remotely over the internet it can only be done in the same land or localhost",
    "start": "913760",
    "end": "920880"
  },
  {
    "text": "while with a timeless attack we can exploit that leak anywhere and i also want to highlight",
    "start": "920880",
    "end": "927680"
  },
  {
    "text": "that the smallest time leak that we could exploit was a timing leak of 100",
    "start": "927680",
    "end": "934079"
  },
  {
    "text": "nanoseconds and this really shows that timeless timing attacks offer an order of",
    "start": "934079",
    "end": "939920"
  },
  {
    "text": "magnitude improvement over traditional timing leaks even it even improves over some timing",
    "start": "939920",
    "end": "946959"
  },
  {
    "text": "attacks over the local host so that explains how a direct timing attack works",
    "start": "946959",
    "end": "952639"
  },
  {
    "start": "950000",
    "end": "950000"
  },
  {
    "text": "it is also possible to perform a cross-site timeless timing attack on to perform a timeless timing attack over",
    "start": "952639",
    "end": "960079"
  },
  {
    "text": "wi-fi anton will now explain how the cross-site timing attack works",
    "start": "960079",
    "end": "966320"
  },
  {
    "start": "966000",
    "end": "966000"
  },
  {
    "text": "so this cross side time intake is actually a bit different from the time attack that we",
    "start": "966320",
    "end": "971600"
  },
  {
    "text": "saw before so in the previous time attack it's direct time intake the attacker directly",
    "start": "971600",
    "end": "978560"
  },
  {
    "text": "connects to the target server and with this chromesite diamantec it's",
    "start": "978560",
    "end": "984480"
  },
  {
    "text": "actually the victim with their browser who will be connecting to the target server",
    "start": "984480",
    "end": "991600"
  },
  {
    "text": "and so the threat model is a bit different so here in the cross-site time intake the",
    "start": "991600",
    "end": "998880"
  },
  {
    "text": "attack can be launched when the victim lands on a malicious website so this could be",
    "start": "998880",
    "end": "1005759"
  },
  {
    "text": "caused by clicking on a malicious link or there would be an malicious",
    "start": "1005759",
    "end": "1010959"
  },
  {
    "text": "advertisement of the attacker or the victim really as an urgent need to look",
    "start": "1010959",
    "end": "1016000"
  },
  {
    "text": "at cute animal videos so as long as the attacker is able to",
    "start": "1016000",
    "end": "1021360"
  },
  {
    "text": "launch javascript in order to trigger requests to the targeted web server",
    "start": "1021360",
    "end": "1027918"
  },
  {
    "text": "it's possible to to perform this attack and the reason why this is is because",
    "start": "1027919",
    "end": "1034558"
  },
  {
    "text": "the the victim's cookies will be automatically included in the request so",
    "start": "1034559",
    "end": "1040000"
  },
  {
    "text": "this means that the request will be processed using the victim's authentication",
    "start": "1040000",
    "end": "1046639"
  },
  {
    "text": "and what attacker needs to do is to observe the response order in which the requests are processed and returned",
    "start": "1047199",
    "end": "1055679"
  },
  {
    "text": "so this can be easily done using the fetch api and then the attacker can leak sensitive",
    "start": "1055679",
    "end": "1062400"
  },
  {
    "text": "information that the user shared or the victim shared with the website",
    "start": "1062400",
    "end": "1067840"
  },
  {
    "text": "so to give an example of this is a bug that we found in hacker one",
    "start": "1067840",
    "end": "1074559"
  },
  {
    "text": "where we could abuse the search function to see if there were any results uh",
    "start": "1074559",
    "end": "1082160"
  },
  {
    "text": "with a given search term uh which would include uh information",
    "start": "1082160",
    "end": "1087440"
  },
  {
    "text": "about private reports so this vulnerability was actually detected a",
    "start": "1087440",
    "end": "1094240"
  },
  {
    "text": "couple of times before and there people reported it using a",
    "start": "1094240",
    "end": "1101120"
  },
  {
    "text": "regular timing intake and it was not really",
    "start": "1101120",
    "end": "1106720"
  },
  {
    "text": "feasible to exploit it um and so with these timeless time attacks",
    "start": "1106720",
    "end": "1113039"
  },
  {
    "text": "we managed to actually improve uh this well the timing leak",
    "start": "1113039",
    "end": "1119280"
  },
  {
    "text": "uh and we could actually quite consistently",
    "start": "1119280",
    "end": "1124480"
  },
  {
    "text": "reproduce the vulnerability and search for information about private reports",
    "start": "1124480",
    "end": "1132320"
  },
  {
    "start": "1132000",
    "end": "1132000"
  },
  {
    "text": "so because now the attacker is is running javascript they no longer have",
    "start": "1134840",
    "end": "1141600"
  },
  {
    "text": "uh low level control over uh the network connections uh as they did in the direct",
    "start": "1141600",
    "end": "1146799"
  },
  {
    "text": "diametric because the browser is the one that chooses how to send to requests or send the packets to",
    "start": "1146799",
    "end": "1153520"
  },
  {
    "text": "the kernel which will forward them to the target server",
    "start": "1153520",
    "end": "1159679"
  },
  {
    "text": "so this means that the attacker needs another technique to ensure that",
    "start": "1159679",
    "end": "1165840"
  },
  {
    "text": "the two requests are put into a single packet",
    "start": "1165840",
    "end": "1171039"
  },
  {
    "text": "fortunately we can leverage some things of tcp",
    "start": "1171039",
    "end": "1177280"
  },
  {
    "text": "nearly the the tcp congestion control so this this mechanism prevents the",
    "start": "1177280",
    "end": "1183280"
  },
  {
    "text": "client from sending all packets at once and so the client can send",
    "start": "1183280",
    "end": "1190160"
  },
  {
    "text": "a packet depending on the current congestion window",
    "start": "1190160",
    "end": "1195440"
  },
  {
    "text": "and before sending more packets it will need an acknowledgement from the server",
    "start": "1195440",
    "end": "1202000"
  },
  {
    "text": "and as well when requests are queued the",
    "start": "1202640",
    "end": "1209039"
  },
  {
    "text": "and the the acknowledgement hasn't been received yet the the following",
    "start": "1209039",
    "end": "1215840"
  },
  {
    "text": "requests will be merged into a single packet so the attack",
    "start": "1215840",
    "end": "1222240"
  },
  {
    "text": "is fairly straightforward as you can see here",
    "start": "1222240",
    "end": "1227440"
  },
  {
    "text": "so what the attacker just needs to do is first send a bogus",
    "start": "1227440",
    "end": "1232880"
  },
  {
    "text": "post requests with a very long body in order to fill",
    "start": "1232880",
    "end": "1238960"
  },
  {
    "text": "the congestion window so this is just a body with a very long",
    "start": "1238960",
    "end": "1244720"
  },
  {
    "text": "string and after that uh the congestion window will be used up",
    "start": "1244720",
    "end": "1251520"
  },
  {
    "text": "and uh the browser will need to wait uh or the kernel will have to wait",
    "start": "1251520",
    "end": "1256720"
  },
  {
    "text": "for sending the next packets uh before an acknowledgement from the server has rece has been received",
    "start": "1256720",
    "end": "1264240"
  },
  {
    "text": "um so before that happens uh the attacker will send two more uh fetch",
    "start": "1264240",
    "end": "1269919"
  },
  {
    "text": "requests and these are the the requested and they're interested that the care is",
    "start": "1269919",
    "end": "1276240"
  },
  {
    "text": "interested in to know the relative response order",
    "start": "1276240",
    "end": "1282320"
  },
  {
    "text": "so let's see how this works in practice so we have our malicious attacker",
    "start": "1282720",
    "end": "1290159"
  },
  {
    "text": "well running some javascript on a website that's being visited by the client",
    "start": "1290159",
    "end": "1296799"
  },
  {
    "text": "so with this first post request the attackers or the victims tcp package",
    "start": "1296799",
    "end": "1305360"
  },
  {
    "text": "queue is filled up and so it already sends",
    "start": "1305360",
    "end": "1312480"
  },
  {
    "text": "something like 10 tcp packets to the server [Music] and of course it includes the the cookie",
    "start": "1312480",
    "end": "1320480"
  },
  {
    "text": "um in the in this request um",
    "start": "1320480",
    "end": "1325759"
  },
  {
    "text": "and then well the client will have to wait before sending uh the rest of the",
    "start": "1325840",
    "end": "1331039"
  },
  {
    "text": "packets and in this period uh the client will or",
    "start": "1331039",
    "end": "1336640"
  },
  {
    "text": "the attacker will already launch another fetch request um",
    "start": "1336640",
    "end": "1342559"
  },
  {
    "text": "but well there's still a queue so then it will this request will be appended to",
    "start": "1342559",
    "end": "1347679"
  },
  {
    "text": "the queue and then the second one will also be appended to the queue",
    "start": "1347679",
    "end": "1354960"
  },
  {
    "text": "and so here so the the packet queue that we see here it",
    "start": "1354960",
    "end": "1360559"
  },
  {
    "text": "represents all the different all the different tcp packets that will be sent",
    "start": "1360559",
    "end": "1366799"
  },
  {
    "text": "and we can see that the lights pink and the dark pink",
    "start": "1366799",
    "end": "1372559"
  },
  {
    "text": "requests will be merged into a single packet so once the acknowledgement from the",
    "start": "1372559",
    "end": "1379600"
  },
  {
    "text": "server has arrived the queue will be cleared and the requests so both requests will be",
    "start": "1379600",
    "end": "1386720"
  },
  {
    "text": "forced into a single packet and then send off to the server",
    "start": "1386720",
    "end": "1391919"
  },
  {
    "text": "so this uh so in this presentation we already covered the direct timing index",
    "start": "1393360",
    "end": "1399360"
  },
  {
    "text": "and i now just covered also the cross-site time intakes and now mati will be",
    "start": "1399360",
    "end": "1405440"
  },
  {
    "text": "looking into a third attack scenario namely where we",
    "start": "1405440",
    "end": "1412000"
  },
  {
    "text": "attack the wi-fi and so it is also possible to perform timeless timing attacks over wi-fi",
    "start": "1412320",
    "end": "1419919"
  },
  {
    "text": "and in particular we will target the pwd protocol when used in a wpa2 network",
    "start": "1419919",
    "end": "1426799"
  },
  {
    "start": "1421000",
    "end": "1421000"
  },
  {
    "text": "so with wpa2 and in particular with enterprise networks authentication can be done using certificates but those can",
    "start": "1426799",
    "end": "1434480"
  },
  {
    "text": "be annoying to configure so a significant amount of networks will instead use",
    "start": "1434480",
    "end": "1439840"
  },
  {
    "text": "pwd where authentication can easily be done using a username on the password",
    "start": "1439840",
    "end": "1446400"
  },
  {
    "text": "in this case the authentication happens between the clients on the authentication server for instance free",
    "start": "1446400",
    "end": "1452240"
  },
  {
    "text": "radius on the access point simply forwards messages between the client on the authentication server",
    "start": "1452240",
    "end": "1459600"
  },
  {
    "text": "because the authentication server can be located anywhere on the internet the connection between the access point onto",
    "start": "1459600",
    "end": "1466159"
  },
  {
    "text": "the server is typically protected using tls which is called ratsec connection",
    "start": "1466159",
    "end": "1473039"
  },
  {
    "text": "on epwd who will use the hash to curve algorithm to verify the password",
    "start": "1473039",
    "end": "1478720"
  },
  {
    "text": "unfortunately in previous research a timing leak was discovered in this algorithm namely the dragonblood attack",
    "start": "1478720",
    "end": "1485760"
  },
  {
    "text": "but against epwd this attack seemed hard to perform because this timing",
    "start": "1485760",
    "end": "1491760"
  },
  {
    "text": "difference was small and it was unclear whether multiple measurements could be made so that then",
    "start": "1491760",
    "end": "1498159"
  },
  {
    "text": "the timing measurements could be combined in other words this timing leak was considered impossible to exploit in",
    "start": "1498159",
    "end": "1505360"
  },
  {
    "text": "practice however using the timeless technique we",
    "start": "1505360",
    "end": "1510480"
  },
  {
    "text": "can exploit this on how does this work well the adversary will spoof three",
    "start": "1510480",
    "end": "1515919"
  },
  {
    "text": "clients the two clients will associate as normal to the access point",
    "start": "1515919",
    "end": "1521120"
  },
  {
    "text": "the access point will request their identity the clients will send their identity to the free radius server on",
    "start": "1521120",
    "end": "1527760"
  },
  {
    "text": "the free radio server replies back that hey you're now gonna have to start",
    "start": "1527760",
    "end": "1533039"
  },
  {
    "text": "the eep pwd protocol this is all very normal nothing special",
    "start": "1533039",
    "end": "1538799"
  },
  {
    "text": "has happened so far but the fun stuff happens now",
    "start": "1538799",
    "end": "1543840"
  },
  {
    "text": "because what will the adversary do now instead of continuing immediately with the pwd protocol the adversary will send",
    "start": "1543840",
    "end": "1552400"
  },
  {
    "text": "a special authentication packet which will be forwarded over the rod stack connection so over the tls connection to",
    "start": "1552400",
    "end": "1560080"
  },
  {
    "text": "the free radius server and it causes the buffer of the access point to fill up with packets",
    "start": "1560080",
    "end": "1567840"
  },
  {
    "text": "and because this buffer is now full when the two clients now send their epwd",
    "start": "1567840",
    "end": "1574799"
  },
  {
    "text": "authentication response this authentication response will be",
    "start": "1574799",
    "end": "1579840"
  },
  {
    "text": "combined into a single tls packet over the rutsec connection",
    "start": "1579840",
    "end": "1585360"
  },
  {
    "text": "but let me also highlight one other thing these two",
    "start": "1585360",
    "end": "1590480"
  },
  {
    "text": "pwd authentication responses they are sent in a single physical wi-fi",
    "start": "1590480",
    "end": "1596159"
  },
  {
    "text": "frame particular they are sent in a single physical a and pdu frame",
    "start": "1596159",
    "end": "1602320"
  },
  {
    "text": "meaning that both these authentication responses arrive at exactly the same time at the access point",
    "start": "1602320",
    "end": "1610320"
  },
  {
    "text": "and as i mentioned the buffer in the access point is now starting to get full and as a consequence of that both these",
    "start": "1610320",
    "end": "1618000"
  },
  {
    "text": "authentication requests will be combined in a single tls record towards the free",
    "start": "1618000",
    "end": "1623840"
  },
  {
    "text": "radius server in other words this means that free radius",
    "start": "1623840",
    "end": "1629440"
  },
  {
    "text": "receives both authentication requests at exactly the same time",
    "start": "1629440",
    "end": "1635600"
  },
  {
    "text": "on then free radius will respond to the clients where the authentication",
    "start": "1635600",
    "end": "1642000"
  },
  {
    "text": "request finished processing first so in this case",
    "start": "1642000",
    "end": "1648000"
  },
  {
    "text": "free radius first finished processing the request from client 1 on the response shown and light blue here is",
    "start": "1648000",
    "end": "1655279"
  },
  {
    "text": "sent first while the response of client 2 is sent later",
    "start": "1655279",
    "end": "1661200"
  },
  {
    "text": "and you can also see here over wi-fi we can see that client 1 received the reply",
    "start": "1661200",
    "end": "1666240"
  },
  {
    "text": "first on client 2 received a reply later on this order of responses leak enough",
    "start": "1666240",
    "end": "1673840"
  },
  {
    "start": "1671000",
    "end": "1671000"
  },
  {
    "text": "information to then perform a brute force offline dictionary attack against",
    "start": "1673840",
    "end": "1679440"
  },
  {
    "text": "the password of the user and in our experiments we can indeed see that this",
    "start": "1679440",
    "end": "1685679"
  },
  {
    "text": "uh that the order we receive these responses at our wi-fi",
    "start": "1685679",
    "end": "1690960"
  },
  {
    "text": "clients indeed corresponds to the difference in execution",
    "start": "1690960",
    "end": "1696799"
  },
  {
    "text": "on the free radius server so to put that differently only in less than one percent of the cases do we",
    "start": "1696799",
    "end": "1704159"
  },
  {
    "text": "incorrectly derive the execution time on the server and as mentioned we can use this",
    "start": "1704159",
    "end": "1710720"
  },
  {
    "text": "information to perform a dictionary attack against the password of the victim",
    "start": "1710720",
    "end": "1715919"
  },
  {
    "text": "so if we take the roku database dump of passwords which contains about 40",
    "start": "1715919",
    "end": "1721200"
  },
  {
    "text": "million passwords we need about 14 measurements and with those 14 measurements we can then with",
    "start": "1721200",
    "end": "1729120"
  },
  {
    "text": "86 success probability derive the password of the victim at least if the",
    "start": "1729120",
    "end": "1734720"
  },
  {
    "text": "password is in this network dom dump and the cost of that brute force attack is",
    "start": "1734720",
    "end": "1740399"
  },
  {
    "text": "less than one dollar when you perform it on the cloud so as a quick recap we have now shown",
    "start": "1740399",
    "end": "1747440"
  },
  {
    "text": "direct timing attacks we have shown cross-site timing attacks and we have shown a timeless timing attack over",
    "start": "1747440",
    "end": "1753520"
  },
  {
    "text": "wi-fi authentication and with that i hand back over to tom",
    "start": "1753520",
    "end": "1759360"
  },
  {
    "text": "alright so now it's time for a little demonstration so for this demo i created an example",
    "start": "1759360",
    "end": "1766000"
  },
  {
    "text": "application called default where people can enter their documents",
    "start": "1766000",
    "end": "1772080"
  },
  {
    "text": "with a title and then the content and for these documents they can set a required security level so one",
    "start": "1772080",
    "end": "1780240"
  },
  {
    "text": "is for documents that can be that are public and can be accessed by anyone and then",
    "start": "1780240",
    "end": "1786960"
  },
  {
    "text": "there are documents that are top secrets that can only be",
    "start": "1786960",
    "end": "1792320"
  },
  {
    "text": "accessed by people with the correct security clearance um so",
    "start": "1792399",
    "end": "1797410"
  },
  {
    "text": "[Music] i've already entered a lot of documents like a couple of hundred documents into",
    "start": "1797410",
    "end": "1803279"
  },
  {
    "text": "the vault and there's a single one that is set to top secret",
    "start": "1803279",
    "end": "1808640"
  },
  {
    "text": "so the the website also has a search functionality where we can search for simple strings like the and",
    "start": "1808640",
    "end": "1815600"
  },
  {
    "text": "then we get a bunch of results and there this single",
    "start": "1815600",
    "end": "1821760"
  },
  {
    "text": "or secret documents contains the string blackhead and we can look for it and we can see",
    "start": "1821760",
    "end": "1828000"
  },
  {
    "text": "that's actually we don't find any documents and that's because we don't have the right security",
    "start": "1828000",
    "end": "1834080"
  },
  {
    "text": "clearance but still this application is vulnerable to a timing",
    "start": "1834080",
    "end": "1840159"
  },
  {
    "text": "attack and this is how we will dig the password from",
    "start": "1840159",
    "end": "1845760"
  },
  {
    "text": "the document so i will briefly show where the timing",
    "start": "1845760",
    "end": "1851679"
  },
  {
    "text": "link is um so the search functionality works a bit like",
    "start": "1851679",
    "end": "1857039"
  },
  {
    "text": "this so there's a text search happening on all the documents",
    "start": "1857039",
    "end": "1862720"
  },
  {
    "text": "based on the query parameter that is provided in by the user or in this case the attacker",
    "start": "1862720",
    "end": "1871440"
  },
  {
    "text": "and then the application will check if there's more than one document found",
    "start": "1871440",
    "end": "1876480"
  },
  {
    "text": "and if that's the case it will get the security level of the current user",
    "start": "1876480",
    "end": "1883200"
  },
  {
    "text": "and in order to do this it will perform one additional secured sql query",
    "start": "1883200",
    "end": "1892759"
  },
  {
    "text": "and it will only do so if there's more than one document that needs to be filtered",
    "start": "1893039",
    "end": "1900320"
  },
  {
    "text": "and this is where the security issue is the timing leak because this allows us",
    "start": "1900320",
    "end": "1907120"
  },
  {
    "text": "to know whether there was at least one document that matched the text search",
    "start": "1907120",
    "end": "1913840"
  },
  {
    "text": "so then the attack looks as follows we here make use of the h2 h2 time",
    "start": "1913840",
    "end": "1922080"
  },
  {
    "text": "library which is uh what we used um for our",
    "start": "1922080",
    "end": "1927279"
  },
  {
    "text": "research and we also published this on github and i'll be sharing the link later in the presentation",
    "start": "1927279",
    "end": "1935279"
  },
  {
    "text": "so we defined two get requests the first one r1",
    "start": "1935279",
    "end": "1940880"
  },
  {
    "text": "contains actual guess and then r2 has",
    "start": "1940880",
    "end": "1946159"
  },
  {
    "text": "the add sign as i guess and because the add sign is not part of the character set",
    "start": "1946159",
    "end": "1951600"
  },
  {
    "text": "uh there will never be any matching documents found so we can use this as a",
    "start": "1951600",
    "end": "1956640"
  },
  {
    "text": "baseline and then we use h2 time to launch the attack and as a result we receive",
    "start": "1956640",
    "end": "1965039"
  },
  {
    "text": "a bunch of values so 15 values",
    "start": "1965039",
    "end": "1971200"
  },
  {
    "text": "and then we see how many negative values there are",
    "start": "1971200",
    "end": "1976480"
  },
  {
    "text": "and this is because a negative value indicates that the order in which the response was returned",
    "start": "1976480",
    "end": "1983440"
  },
  {
    "text": "is reversed so this means that if we send r1 and r2",
    "start": "1983440",
    "end": "1988960"
  },
  {
    "text": "then the response for r2 will be received before that the one of r1",
    "start": "1988960",
    "end": "1996720"
  },
  {
    "text": "and this would be the case if r1 took longer to process",
    "start": "1996720",
    "end": "2003440"
  },
  {
    "text": "so then the probability of this is higher",
    "start": "2003440",
    "end": "2007759"
  },
  {
    "text": "and well this is also the case when it's a correct uh character of the passwords because",
    "start": "2009039",
    "end": "2015679"
  },
  {
    "text": "then we need this additional sql query to get the user's security level",
    "start": "2015679",
    "end": "2022240"
  },
  {
    "text": "and then we see if this percentage of the reverse order is higher than a certain threshold",
    "start": "2022240",
    "end": "2028960"
  },
  {
    "text": "in the example uh that i will be running soon",
    "start": "2028960",
    "end": "2034559"
  },
  {
    "text": "the threshold is set to 80 all right so now let's run the attack um",
    "start": "2034559",
    "end": "2040399"
  },
  {
    "text": "to do so we just need to run attack.buy with python",
    "start": "2040399",
    "end": "2045440"
  },
  {
    "text": "um so here we can see um all the characters that have been found",
    "start": "2045440",
    "end": "2050560"
  },
  {
    "text": "so far on the top line so far there's no character",
    "start": "2050560",
    "end": "2055839"
  },
  {
    "text": "um but as you can see the first character has just been found so you have the capital t",
    "start": "2055839",
    "end": "2062480"
  },
  {
    "text": "um and then the second line uh show shows the characters that are currently",
    "start": "2062480",
    "end": "2068960"
  },
  {
    "text": "being guessed so we just saw that the one was just found",
    "start": "2068960",
    "end": "2075599"
  },
  {
    "text": "so we're guessing one character at a time and then the the third line shows",
    "start": "2075599",
    "end": "2083118"
  },
  {
    "text": "the percentage percentage of the responses that were returned in the reverse order",
    "start": "2083119",
    "end": "2091200"
  },
  {
    "text": "and well as you can see when",
    "start": "2091599",
    "end": "2096480"
  },
  {
    "text": "the guess is incorrect the or well the percentage",
    "start": "2096720",
    "end": "2102400"
  },
  {
    "text": "is closer to 50 percent um of course is",
    "start": "2102400",
    "end": "2107520"
  },
  {
    "text": "there's still some amount of chance involved because",
    "start": "2107520",
    "end": "2114078"
  },
  {
    "text": "well if it's an incorrect guess then uh there's for each request uh 50 chance",
    "start": "2114480",
    "end": "2121599"
  },
  {
    "text": "uh that it will be in the correct order or in the reverse order um",
    "start": "2121599",
    "end": "2128079"
  },
  {
    "text": "so it's at the moment going fairly well um so it",
    "start": "2128480",
    "end": "2134880"
  },
  {
    "text": "already found several several characters so um the the demonstration is",
    "start": "2134880",
    "end": "2141440"
  },
  {
    "text": "also publicly available on github you can just run it with docker",
    "start": "2141440",
    "end": "2149920"
  },
  {
    "text": "and i will also be sharing the link later in the presentation",
    "start": "2149920",
    "end": "2155280"
  },
  {
    "text": "so far all except one character have been correctly guessed",
    "start": "2155280",
    "end": "2161830"
  },
  {
    "text": "[Music] and that should be the last one yeah and that's also a correct guess",
    "start": "2161830",
    "end": "2168960"
  },
  {
    "text": "so as you can see the deck was successful and we managed to find",
    "start": "2168960",
    "end": "2176079"
  },
  {
    "text": "the secret passwords namely timeless timing so that brings us to the conclusion",
    "start": "2176079",
    "end": "2182480"
  },
  {
    "start": "2180000",
    "end": "2180000"
  },
  {
    "text": "so we find that these timeless time intakes are not affected by network jitter at all",
    "start": "2182480",
    "end": "2188400"
  },
  {
    "text": "and this is because the two requests are arrived in the same packets at this exact same time at the server",
    "start": "2188400",
    "end": "2196240"
  },
  {
    "text": "and this allows us to perform remote timing index with an accuracy that is similar to as if the attack was",
    "start": "2196240",
    "end": "2203599"
  },
  {
    "text": "launched on the local system so in our demonstration that",
    "start": "2203599",
    "end": "2209119"
  },
  {
    "text": "well we showed that the attack is quite practical the",
    "start": "2209119",
    "end": "2214480"
  },
  {
    "text": "attack was launched from my home uh on a not all to create wi-fi",
    "start": "2214480",
    "end": "2220000"
  },
  {
    "text": "connection against the server that's located in the us whereas i look it in",
    "start": "2220000",
    "end": "2225680"
  },
  {
    "text": "located in the eu and still the",
    "start": "2225680",
    "end": "2230880"
  },
  {
    "text": "the timeless time index allowed us to detect this very small timing difference",
    "start": "2230880",
    "end": "2237200"
  },
  {
    "text": "so we find that these attacks can be launched against protocols that either",
    "start": "2237440",
    "end": "2242880"
  },
  {
    "text": "feed either enable multiplexing for instance http 2",
    "start": "2242880",
    "end": "2248800"
  },
  {
    "text": "or that's or where we can leverage a transport protocol that enables encapsulation for instance",
    "start": "2248800",
    "end": "2256800"
  },
  {
    "text": "store or a vpn and then finally",
    "start": "2256800",
    "end": "2262400"
  },
  {
    "text": "all the protocols that meets these criteria may be susceptible to these timeless",
    "start": "2262400",
    "end": "2269280"
  },
  {
    "text": "time index and we already created practical attacks against http 2 and eap wd",
    "start": "2269280",
    "end": "2276720"
  },
  {
    "text": "which is for wi-fi authentication so with that i would like to thank you",
    "start": "2276720",
    "end": "2282839"
  },
  {
    "text": "for listening and you can if you have any questions or remarks or",
    "start": "2282839",
    "end": "2290960"
  },
  {
    "text": "ideas don't hesitate to reach out to us on twitter and you can find",
    "start": "2290960",
    "end": "2297440"
  },
  {
    "text": "the sources of the h2 time library on the left side and the",
    "start": "2297440",
    "end": "2304800"
  },
  {
    "text": "sources for the demonstration on the right side so thank you",
    "start": "2304800",
    "end": "2311200"
  }
]