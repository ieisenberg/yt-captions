[
  {
    "start": "0",
    "end": "64000"
  },
  {
    "text": "all right good afternoon everyone welcome to deep Trace um Dual Purpose trace for exploration analysis of",
    "start": "80",
    "end": "6799"
  },
  {
    "text": "program crashes by Rodrigo Bronco and Rohit Mo M I'm sorry I butchered it um",
    "start": "6799",
    "end": "15719"
  },
  {
    "text": "before we begin um if you haven't had a chance to pick up your merchandise today is your last chance at the black hat uh",
    "start": "15719",
    "end": "21960"
  },
  {
    "text": "swag and bookstore and they both close at 6 pm. um and please remember to put your cell phones on",
    "start": "21960",
    "end": "28960"
  },
  {
    "text": "vibrate thank you hello everyone I'm Rodrigo this is hit I'm really sorry for",
    "start": "28960",
    "end": "34879"
  },
  {
    "text": "my really bad Brazilian accent but I hope everybody can understand me uh thank you for your time and being here",
    "start": "34879",
    "end": "41280"
  },
  {
    "text": "and I hope like uh we can like have fun during the presentation so uh just a very quick disclaimer even though we",
    "start": "41280",
    "end": "47399"
  },
  {
    "text": "work for Intel we did this research in our research time and personal time so it's nothing related to Intel really uh",
    "start": "47399",
    "end": "54840"
  },
  {
    "text": "at Intel we don't work in the Intel Security Group we work with like CPUs so really that's nothing to do with our",
    "start": "54840",
    "end": "60640"
  },
  {
    "text": "work at Intel so blame us for any mistakes we make not the company uh so a",
    "start": "60640",
    "end": "65960"
  },
  {
    "start": "64000",
    "end": "64000"
  },
  {
    "text": "very quick agenda of what we're going to discuss here uh we definitely talking about Crash analysis right we're talking",
    "start": "65960",
    "end": "71880"
  },
  {
    "text": "about like exploiting Primitives and how you can find that and differentiate that in a grien crash so we will walk you",
    "start": "71880",
    "end": "78799"
  },
  {
    "text": "through a lot of like of the concepts that we use and then finally we're going to do some demos of the tool that we're",
    "start": "78799",
    "end": "84479"
  },
  {
    "text": "releasing so everything here is basically open source so just after the talk it will be available in GitHub",
    "start": "84479",
    "end": "89960"
  },
  {
    "text": "everybody can download play the crashes we're going to be using every will be all available so you can go and really",
    "start": "89960",
    "end": "96280"
  },
  {
    "text": "like do yourself analyze send feedbacks and hopefully everybody will send commits to us as well uh one one",
    "start": "96280",
    "end": "103439"
  },
  {
    "text": "important thing is like there will be no zero days presented here so if you're expecting zero days that's not the talk",
    "start": "103439",
    "end": "108960"
  },
  {
    "text": "right we're going to analyze like old bugs to demonstrate that the two capabili and what they",
    "start": "108960",
    "end": "114280"
  },
  {
    "start": "114000",
    "end": "114000"
  },
  {
    "text": "are uh so the objective here is really to contribute to improving the state of-the-art in Crash Anis uh when we say",
    "start": "114280",
    "end": "121759"
  },
  {
    "text": "that we improving the state of the art please don't misunderstand us we are not saying we're doing a huge leap it's not",
    "start": "121759",
    "end": "127439"
  },
  {
    "text": "like we solving the problem we are far from that it's a very small contribution but it is a contribution of moving",
    "start": "127439",
    "end": "133959"
  },
  {
    "text": "forward in that area uh we all know that there is a lot of things that are liberal that are like really handwork",
    "start": "133959",
    "end": "141080"
  },
  {
    "text": "and what we do is try to automate a part of that and really help an analyst or like an explo writer to analyze a crash",
    "start": "141080",
    "end": "149400"
  },
  {
    "text": "uh this is is really like something for helping and augmenting the analysis we are not really doing anything that is",
    "start": "149400",
    "end": "155360"
  },
  {
    "text": "fully automated that completely replace analyst that is really not our objective here we will demonstrate like that we're",
    "start": "155360",
    "end": "162640"
  },
  {
    "text": "using like hybrid techniques with like back wire tent analysis that are like very uh instructionally specific that",
    "start": "162640",
    "end": "169239"
  },
  {
    "text": "does t propagation and then we also use like forward analysis that is like more like at the page level so we will",
    "start": "169239",
    "end": "175680"
  },
  {
    "text": "explain all the details during the talk but just so everybody has an idea of like the objetive Ives here uh we all",
    "start": "175680",
    "end": "181800"
  },
  {
    "start": "180000",
    "end": "180000"
  },
  {
    "text": "know that the current state is really bad right we know like there are buggy programs we know there are like more",
    "start": "181800",
    "end": "186840"
  },
  {
    "text": "bugs being actually inserted in code then actually being fixed in code so they St it's really like hard and",
    "start": "186840",
    "end": "192760"
  },
  {
    "text": "triaging through like like crashes and triaging and prioritizing is a very hard task so the exploit writers needs to be",
    "start": "192760",
    "end": "199799"
  },
  {
    "text": "sure that they actually getting like the best bugs that for writing the exploit the msrc is and like component like msrc",
    "start": "199799",
    "end": "206319"
  },
  {
    "text": "is like the response cater for Microsoft but like the response things in in different companies the pirts in",
    "start": "206319",
    "end": "211959"
  },
  {
    "text": "different companies they also need to try like the submissions they receive the bounties need to try the submission",
    "start": "211959",
    "end": "217879"
  },
  {
    "text": "so everybody has a very similar problem of receiving like potential crashes and",
    "start": "217879",
    "end": "222920"
  },
  {
    "text": "defining if they are really a security vulnerability or just a potential like bugging the software so that's why we",
    "start": "222920",
    "end": "228599"
  },
  {
    "text": "are here right so we know the problem of course like we also know that not like",
    "start": "228599",
    "end": "234200"
  },
  {
    "text": "not necessarily what you see is what is inside right so uh be careful with the ponies over there right",
    "start": "234200",
    "end": "240760"
  },
  {
    "start": "239000",
    "end": "239000"
  },
  {
    "text": "uh so when we're talking about like tent analysis really we just want like to answer like two fundamental questions",
    "start": "240760",
    "end": "247200"
  },
  {
    "text": "like uh regarding like the the crash differentiation right the very first question we're trying to help answer is",
    "start": "247200",
    "end": "254239"
  },
  {
    "text": "really like does the attacker has control over the faulting instruction the instruction that actually generated",
    "start": "254239",
    "end": "259880"
  },
  {
    "text": "the crash so we want to know if anything related to that instruction is coming from the input that is under attack",
    "start": "259880",
    "end": "265960"
  },
  {
    "text": "control attacker control and the other thing that we want to know know is is the forward execution like after like",
    "start": "265960",
    "end": "273080"
  },
  {
    "text": "the crash knowing that the attacker controls the input is the forward execution actually giving any primitive",
    "start": "273080",
    "end": "279080"
  },
  {
    "text": "that is of the interest for the attacker so essentially if there is a good primitive and that primitive is indeed",
    "start": "279080",
    "end": "285400"
  },
  {
    "text": "controlled by the attacker that means there is something that is advantageous that doesn't mean that the exploit will",
    "start": "285400",
    "end": "291360"
  },
  {
    "text": "be possible because there is a still mitigating factors that might influence that bug but at least we know that the",
    "start": "291360",
    "end": "297120"
  },
  {
    "text": "attacker has control over a primitive is advantageous for him or her so this is",
    "start": "297120",
    "end": "303120"
  },
  {
    "text": "basically what we are here like to try to do uh one thing that is important is like when we're looking like for like",
    "start": "303120",
    "end": "309440"
  },
  {
    "text": "defining if the data is coming from the input uh uh of the attacker control we do a very specific like instruction by",
    "start": "309440",
    "end": "316759"
  },
  {
    "text": "instruction tracing so it's like very detailed like tent analysis where we propagate tent When We Do It Forward",
    "start": "316759",
    "end": "323840"
  },
  {
    "text": "instead of doing like instruction by instruction we try to do in less level of detail so we can let the program go",
    "start": "323840",
    "end": "330440"
  },
  {
    "text": "and see what happens like we're going to see how that plays on when we analyze the crashes so a very quick history of like",
    "start": "330440",
    "end": "338919"
  },
  {
    "start": "335000",
    "end": "335000"
  },
  {
    "text": "the backwards tent analysis so the original motivation for that idea the original uh uh uh sparking point of that",
    "start": "338919",
    "end": "345560"
  },
  {
    "text": "idea was like a we we worked together like me Julio Alto balast and some other friends in in a company and basically",
    "start": "345560",
    "end": "352880"
  },
  {
    "text": "one of those friends of us they he came to us and he was doing a forensic analysis he recovered some like files in",
    "start": "352880",
    "end": "358840"
  },
  {
    "text": "that forensic analyst and the files were crashing a very important program so it",
    "start": "358840",
    "end": "363919"
  },
  {
    "text": "was like at the time Microsoft Excel and the the file format at the time was not really open so it was really hard to",
    "start": "363919",
    "end": "370319"
  },
  {
    "text": "analyze those crashes and they find hey are those crashes really secur vulnerability or or are they not uh one",
    "start": "370319",
    "end": "376680"
  },
  {
    "text": "of the reasons that it was hard it's because the crash was not coming from a fuzzer so we didn't really know which part of the file was generating the",
    "start": "376680",
    "end": "383479"
  },
  {
    "text": "crash so that's how the idea actually always started and this idea was developed along the years in many",
    "start": "383479",
    "end": "388759"
  },
  {
    "text": "different like projects like either trying to integrating with fuzzers trying to do the analysis in Unix environments and with like the analysis",
    "start": "388759",
    "end": "395759"
  },
  {
    "text": "in Windows environment like led by julo Alto who is also here in the presentation so basically that's like",
    "start": "395759",
    "end": "401919"
  },
  {
    "text": "the history for this backward St when we go for the forward",
    "start": "401919",
    "end": "407120"
  },
  {
    "text": "T yeah so originally the motivation to do the forward Trend was uh when you're",
    "start": "407120",
    "end": "412440"
  },
  {
    "text": "running a bug Bounty program and you have many submissions that you need to bang out really quickly uh some of them",
    "start": "412440",
    "end": "419039"
  },
  {
    "text": "are immed medely exploitable you can see that either the analysis is really good uh but for many others uh you're not",
    "start": "419039",
    "end": "425720"
  },
  {
    "text": "able to tell if they're really exploitable or not so that was kind of our original motivations to do the",
    "start": "425720",
    "end": "431000"
  },
  {
    "text": "forward analysis approach uh also if you have a huge Corpus of fuzzing crashes uh you can do rudimentary bang",
    "start": "431000",
    "end": "439120"
  },
  {
    "text": "exploitable categorizing which will tell you which one and it'll just bucket them into read access violations or right",
    "start": "439120",
    "end": "444479"
  },
  {
    "text": "access violations the one that you know are exploitable uh you're good to go but",
    "start": "444479",
    "end": "449639"
  },
  {
    "text": "as it often happens there are a whole bunch of fre access violations that you're not sure and then you have to",
    "start": "449639",
    "end": "455039"
  },
  {
    "text": "spend time to analyze for each of the crash uh what we noticed that while",
    "start": "455039",
    "end": "460680"
  },
  {
    "text": "doing that for some specific classes of bugs it's a manual process with lots of",
    "start": "460680",
    "end": "466680"
  },
  {
    "text": "steps some of those steps we felt could be uh automated uh of course I'd like to",
    "start": "466680",
    "end": "472639"
  },
  {
    "text": "mention at this point when we say automated it's not just a magical solution of you run it and it tells you",
    "start": "472639",
    "end": "478319"
  },
  {
    "text": "that some of the tools actually try to do that we don't we try to go for a more practical approach where it has to be",
    "start": "478319",
    "end": "483599"
  },
  {
    "text": "supplemented by manual analysis but we do try to automate certain aspects of that uh in a sense you can view this as",
    "start": "483599",
    "end": "490759"
  },
  {
    "text": "like prototyping exploitation so at the time of Crash um you kind of mimic object control and",
    "start": "490759",
    "end": "498800"
  },
  {
    "text": "see that if you so there are two parts of the problem as Rodrigo talked about the backward taint through the backward",
    "start": "498800",
    "end": "504199"
  },
  {
    "text": "train we try to answer the first part of the question which is do you have control and second well if you do have",
    "start": "504199",
    "end": "510440"
  },
  {
    "text": "control can you go forward and find an exploitable primitive after that and we thought this prototyping exploitation or",
    "start": "510440",
    "end": "517719"
  },
  {
    "text": "this mimicking exploitation is easier problem to automate rather than just like a one-click solution where you say",
    "start": "517719",
    "end": "523680"
  },
  {
    "text": "oh click and just write me a final exploit so we thought that's a much more difficult",
    "start": "523680",
    "end": "530160"
  },
  {
    "text": "problem uh so of course there are existing Solutions uh I also want to highlight that we're not trying to be",
    "start": "530200",
    "end": "537080"
  },
  {
    "text": "them we're not trying to beat them uh our the different approach but it's good to know what other Solutions are there",
    "start": "537080",
    "end": "542360"
  },
  {
    "text": "what approaches they take there's bang exploitable obviously the classic tool helps you quickly categorize crashes uh",
    "start": "542360",
    "end": "548920"
  },
  {
    "text": "gives you some contextual information everybody knows that uh well hopefully we do better than bang exploitable if",
    "start": "548920",
    "end": "554800"
  },
  {
    "text": "not any others uh there's spider Peg uh it's not available for testing last we",
    "start": "554800",
    "end": "560880"
  },
  {
    "text": "checked but there's a really good paper uh it's pretty Advanced Tool uh there's Tain",
    "start": "560880",
    "end": "567680"
  },
  {
    "text": "box T check based on Dynamic roval grin and it tracks the propagation uh it's",
    "start": "567680",
    "end": "574880"
  },
  {
    "text": "used to detect overflow conditions does not really give you a lot of information to help you in the process of exploit",
    "start": "574880",
    "end": "580680"
  },
  {
    "text": "creation uh but it's a good tool also there's bid Blaze which is a really good platform for binary analysis it provides",
    "start": "580680",
    "end": "588000"
  },
  {
    "text": "a much better classification of exploitability than the much simpler bang",
    "start": "588000",
    "end": "593360"
  },
  {
    "text": "exploitable and we recently we were made aware of a moflow framework by Cisco",
    "start": "593360",
    "end": "599880"
  },
  {
    "text": "it's built on cmu's binary analysis uh platform framework I think the code is publicly available and I would recommend",
    "start": "599880",
    "end": "605600"
  },
  {
    "text": "you check out it's a really awesome tool um it's a very Advanced tool they also have a backward taint uh analyzer of",
    "start": "605600",
    "end": "613120"
  },
  {
    "text": "course using different principles for and for forward execution they they primarily use symbolic execution so they",
    "start": "613120",
    "end": "619240"
  },
  {
    "text": "just sit there and try to evaluate uh through symbolic execution uh and they try to look for exploitable conditions",
    "start": "619240",
    "end": "625519"
  },
  {
    "text": "right after the initial crash we follow a different approach which I will detail uh I think each of it each of the",
    "start": "625519",
    "end": "630959"
  },
  {
    "text": "approach has its own pros and cons but anyway uh do check out muo it's a good tool",
    "start": "630959",
    "end": "636440"
  },
  {
    "start": "636000",
    "end": "636000"
  },
  {
    "text": "also and uh yeah Rodrigo will talk about the specific straight transition of memory corruption so yeah when when we",
    "start": "636440",
    "end": "642760"
  },
  {
    "text": "look into memory corruption and many different classes of vulnerability in the end you don't really have like a",
    "start": "642760",
    "end": "648360"
  },
  {
    "text": "direct relation between hey like the crash happened and that means like the previous instruction the immediate",
    "start": "648360",
    "end": "653680"
  },
  {
    "text": "instruction is really the offending instruction like many class of like in Hip overflows you might end up",
    "start": "653680",
    "end": "659320"
  },
  {
    "text": "corrupting something that actually crashes much later so it's not that simple that trivial to Define hey is",
    "start": "659320",
    "end": "666079"
  },
  {
    "text": "that condition under control and is that condition like really giving an attacker A Primitive so we just wanted to make",
    "start": "666079",
    "end": "672560"
  },
  {
    "text": "make sure that everybody understands that complexity and that's why we're not trying to fully automate but we really",
    "start": "672560",
    "end": "678680"
  },
  {
    "text": "need an analyst behind it to to do the analysis as we will demonstrate during like the the flow uh if you consider",
    "start": "678680",
    "end": "685480"
  },
  {
    "text": "like the tent propagation which is really the way that we use like 40 back CS analysis you really have like a a",
    "start": "685480",
    "end": "691480"
  },
  {
    "text": "transition like a relation between instructions so imagine that you have a given area in memory that the analyst",
    "start": "691480",
    "end": "697800"
  },
  {
    "text": "defines say this given memory area is controlled by the attacker either because it does have like the attacker",
    "start": "697800",
    "end": "703160"
  },
  {
    "text": "input which might be for example a file or a network packet or something that the analyst through his analy understand",
    "start": "703160",
    "end": "709800"
  },
  {
    "text": "it's under uh influence of the attacker from there on we can basically Define if all the instructions that are actually",
    "start": "709800",
    "end": "716200"
  },
  {
    "text": "accessing this memory area basically are propagating the T so like if for example you have an instruction at the location",
    "start": "716200",
    "end": "722560"
  },
  {
    "text": "a and then the the memory area in location a that you know is controlled by the attacker is moved to a register",
    "start": "722560",
    "end": "729000"
  },
  {
    "text": "now you know that you also control that register so because we can have that transition relation between hey if you",
    "start": "729000",
    "end": "735440"
  },
  {
    "text": "have tented area a and a is used it to derive somehow B and now we have like a tented area B if B is now used it to",
    "start": "735440",
    "end": "743079"
  },
  {
    "text": "actually derive C we know that c is also under control and we have this indirect",
    "start": "743079",
    "end": "748279"
  },
  {
    "text": "reation uh relation between a and C so that's actually what we need to",
    "start": "748279",
    "end": "753399"
  },
  {
    "text": "understand if in a given moment of like the the execution flow of the program it's that the data deriving from the",
    "start": "753399",
    "end": "759680"
  },
  {
    "text": "input of the attacker so that's how we use it there are a lot of like challenges in doing that right one of",
    "start": "759680",
    "end": "765600"
  },
  {
    "text": "the challenges really like how do you really avoid like State explosion right and how do you really like mimic all the",
    "start": "765600",
    "end": "771920"
  },
  {
    "text": "instructions being executed in a flow uh uh we will make it clear that one of the limitations that we have is when we look",
    "start": "771920",
    "end": "778440"
  },
  {
    "text": "into a flow there are flows in a program that can can be implicit so for example in this case even if the attacker",
    "start": "778440",
    "end": "785160"
  },
  {
    "text": "controls X meaning that why uh would receive actually zero in this example",
    "start": "785160",
    "end": "791320"
  },
  {
    "text": "right we don't really follow what like conditions that did not happen in our",
    "start": "791320",
    "end": "796560"
  },
  {
    "text": "Trace so we are blinded to that so one of the samples that we we're going to demonstrate in in the analysis three",
    "start": "796560",
    "end": "802600"
  },
  {
    "text": "there are like many of those cases the exploitable condition is actually not on the original Trace so that's why you",
    "start": "802600",
    "end": "808959"
  },
  {
    "text": "also also need the analyst for our approach because the analyst can force those constraints he can know that the",
    "start": "808959",
    "end": "814440"
  },
  {
    "text": "constraint is also coming from the input therefore the attacker do con control that constraint and he can force a new",
    "start": "814440",
    "end": "821240"
  },
  {
    "text": "Trace through the correct path that actually is the path that he's interested off so there there is a lot",
    "start": "821240",
    "end": "826720"
  },
  {
    "text": "of manual analysis and we're going to demonstrate one of the analysis that has lots of do constraints so in in the backwards t as",
    "start": "826720",
    "end": "834360"
  },
  {
    "start": "831000",
    "end": "831000"
  },
  {
    "text": "I mentioned like just starting like clarify a little bit how the approach works we basically divide the process in",
    "start": "834360",
    "end": "839880"
  },
  {
    "text": "in two parts we do a tracing which is getting the program executing the program and really like single stepping",
    "start": "839880",
    "end": "845680"
  },
  {
    "text": "that execution from the program uh we're going to show like some of the numbers that like we had like in the analysis",
    "start": "845680",
    "end": "851199"
  },
  {
    "text": "that we made but we managed to trace for example 10 million instructions in a doe we managed to trace like 800,000",
    "start": "851199",
    "end": "857199"
  },
  {
    "text": "instructions in Internet Explorer so it is is low because we're single stepping and we already have some ideas for",
    "start": "857199",
    "end": "862800"
  },
  {
    "text": "optimizing that avoiding some certain modules emulating certain flows but right now that's the way that the to is",
    "start": "862800",
    "end": "868720"
  },
  {
    "text": "is implemented and then we have like an an an analysis part which is responsible for really looking and doing the tent",
    "start": "868720",
    "end": "874600"
  },
  {
    "text": "analysis of the generated Trace which we called verification",
    "start": "874600",
    "end": "880000"
  },
  {
    "start": "877000",
    "end": "877000"
  },
  {
    "text": "step so with the forward tent analysis um the idea is as I mentioned to see",
    "start": "880079",
    "end": "885360"
  },
  {
    "text": "what Primitives are available which can be exploited later and as I mentioned we we were trying to prototype uh input",
    "start": "885360",
    "end": "891920"
  },
  {
    "text": "control and the way we do it instead of symbolic execution like how moflow does",
    "start": "891920",
    "end": "897040"
  },
  {
    "text": "and some other tools what we do is we try to satisfy the constraints that cause the access violation try to",
    "start": "897040",
    "end": "903759"
  },
  {
    "text": "fulfill them redefine references and then continue essentially we allocate at the time of the crash or the exception",
    "start": "903759",
    "end": "910759"
  },
  {
    "text": "we allocate a fake object structure in memory uh the the initial property of uh",
    "start": "910759",
    "end": "915839"
  },
  {
    "text": "any such object structure in memory should guarantee to well at least a reasonable extent that all the memory",
    "start": "915839",
    "end": "921920"
  },
  {
    "text": "references uh within that should be resolved and should not lead to a crash immediately after so any virtual",
    "start": "921920",
    "end": "928160"
  },
  {
    "text": "function tables object pointers any sorts of data all the pointer references can be",
    "start": "928160",
    "end": "933560"
  },
  {
    "text": "resolved uh and the way we allocate it is if it's any additive or subtractive reference it still falls into a domain",
    "start": "933560",
    "end": "940600"
  },
  {
    "text": "which points into our control object so in essence um you could imagine this",
    "start": "940600",
    "end": "946160"
  },
  {
    "text": "like if it's a use after free bug so basically from within the debugger let's say like for a use after",
    "start": "946160",
    "end": "952839"
  },
  {
    "text": "free you would abuse lfh G gain uh reall reallocate the freed object uh via Java",
    "start": "952839",
    "end": "959120"
  },
  {
    "text": "script or whatever and do that but from within the debugger we kind of try to do",
    "start": "959120",
    "end": "964160"
  },
  {
    "text": "this all for you and the analyst can just redefine the references to move forward",
    "start": "964160",
    "end": "969399"
  },
  {
    "text": "uh apart from use after pH if you think of some outof bounds access violation crashes it's the same idea like if",
    "start": "969399",
    "end": "976440"
  },
  {
    "text": "there's a object and the initial crash was trying to access something beyond that uh ideally through the exploit",
    "start": "976440",
    "end": "982759"
  },
  {
    "text": "chain you would do that via JavaScript or within the browser whatever you're doing it but within the debugger we give",
    "start": "982759",
    "end": "987880"
  },
  {
    "text": "you an object right after after that so you kind of mimic uh initial control and then you carry forward to see if there",
    "start": "987880",
    "end": "994079"
  },
  {
    "text": "are any exploitable Primitives uh this is just one simple",
    "start": "994079",
    "end": "999160"
  },
  {
    "start": "996000",
    "end": "996000"
  },
  {
    "text": "example of how the memory structure is laid out basically each dword within our fake object uh is basically a pointer to",
    "start": "999160",
    "end": "1005759"
  },
  {
    "text": "the corresponding object and we we have uh a whole bunch of objects in chain last object has a bunch of junk values",
    "start": "1005759",
    "end": "1013000"
  },
  {
    "text": "uh in this particular case we gave a page read only memory permissions for each object uh you can tailor this",
    "start": "1013000",
    "end": "1019360"
  },
  {
    "text": "uh based on initial analysis if you want to change the permissions the last object is like a guard page so any",
    "start": "1019360",
    "end": "1025079"
  },
  {
    "text": "access should break uh and the idea is once we do that we take the root of this",
    "start": "1025079",
    "end": "1030160"
  },
  {
    "text": "chain of objects it's kind of like a link list of uh and we take the root and redefine the references at the time of",
    "start": "1030160",
    "end": "1036120"
  },
  {
    "text": "the exception uh implementation details so",
    "start": "1036120",
    "end": "1043038"
  },
  {
    "start": "1038000",
    "end": "1038000"
  },
  {
    "text": "when we tried to implement this approach we chose uh when debug we play straight with the debug interfaces with in Wind",
    "start": "1043039",
    "end": "1049200"
  },
  {
    "text": "debug that's our debugger of choice and also Windows is our platform of choice we thought it would be uh very helpful",
    "start": "1049200",
    "end": "1054919"
  },
  {
    "text": "since our initial motivation for this approach was to have a practical solution that people can use straight up",
    "start": "1054919",
    "end": "1061320"
  },
  {
    "text": "uh so instead of bang exploitable you could use this in your analysis which has been debug but in essence the",
    "start": "1061320",
    "end": "1067520"
  },
  {
    "text": "principle could be carried out to uh other systems as well and other debuggers hopefully uh also the trace file that we",
    "start": "1067520",
    "end": "1075600"
  },
  {
    "text": "generate during each backward trace it contains uh the pneumonic of the instruction the operand all the",
    "start": "1075600",
    "end": "1081120"
  },
  {
    "text": "dependencies of the source operan and we essentially create a tree of the entire data flow from the uh initial program uh",
    "start": "1081120",
    "end": "1088720"
  },
  {
    "text": "crash to wherever we go forward after that um there is an analyzer portion",
    "start": "1088720",
    "end": "1093840"
  },
  {
    "text": "there is a GUI and a command line analyzer for this uh we made a command line analyzer within the debugger for",
    "start": "1093840",
    "end": "1100480"
  },
  {
    "text": "quicker integration you can script against it and see the results but there's also the guy in case you want to",
    "start": "1100480",
    "end": "1106039"
  },
  {
    "text": "specifically look at one case and analyze it it helps but we do have a command line program if you want to just automate a bunch of uh",
    "start": "1106039",
    "end": "1113480"
  },
  {
    "text": "sequential uh modules that you want to use from our Tool uh and it basically",
    "start": "1113480",
    "end": "1118720"
  },
  {
    "text": "searches the tree the analyzer using a BFS algorithm and as I mentioned the forward uh stepping basically uses uh",
    "start": "1118720",
    "end": "1126760"
  },
  {
    "text": "the win32 functions it uses virtual aloc X from within the debugger to the debugging process to allocate the fake",
    "start": "1126760",
    "end": "1133440"
  },
  {
    "text": "memory structures uses virtual protect and you can tailor them to have whatever memory permissions you need",
    "start": "1133440",
    "end": "1140720"
  },
  {
    "text": "at this point uh yes I have to say a picture is worth a th000 words or 42 words in this case because if none of",
    "start": "1140720",
    "end": "1147240"
  },
  {
    "text": "that made sense hopefully the next flow diagram will so this is kind of like how how our",
    "start": "1147240",
    "end": "1153760"
  },
  {
    "text": "flow would look like uh we would start the program then we'd have an initial crash and if you see to the left side",
    "start": "1153760",
    "end": "1161159"
  },
  {
    "text": "those are the three things we're going to be doing at every exception going forward from there so crash move forward",
    "start": "1161159",
    "end": "1168200"
  },
  {
    "text": "another crash crash or exception so we treat each of them equivalently and we do these three things towards the left",
    "start": "1168200",
    "end": "1174120"
  },
  {
    "text": "as you can see we check the backward Trace make sure that there is Tain propagation make sure that there is",
    "start": "1174120",
    "end": "1180760"
  },
  {
    "text": "either very direct or some form of indirect control and we can influence that then we reallocate that whole fake",
    "start": "1180760",
    "end": "1188360"
  },
  {
    "text": "object structure redefine the references and then move forward then hopefully go to another exception it'll have one of",
    "start": "1188360",
    "end": "1194760"
  },
  {
    "text": "the constraints do the same thing get the trace um make sure we have uh Tain",
    "start": "1194760",
    "end": "1201039"
  },
  {
    "text": "propagation uh reallocate the fake objects again redefine references move forward and we keep going forward",
    "start": "1201039",
    "end": "1207360"
  },
  {
    "text": "hopefully we reach a point where we find an exploitable primitive and at which case we don't have to do all the three",
    "start": "1207360",
    "end": "1213919"
  },
  {
    "text": "we just check the backward Trace then check the T to make sure it's still controllable in some fashion and if it's",
    "start": "1213919",
    "end": "1220799"
  },
  {
    "text": "exploitable if it's an exploitable primitive that's that's good for us uh and we're done if not well we keep going",
    "start": "1220799",
    "end": "1226840"
  },
  {
    "text": "down this path and yes there' be a whole lot of State explosion and well go down",
    "start": "1226840",
    "end": "1232760"
  },
  {
    "text": "to hell so that's kind of how it looks like within the debugger you load uh deep",
    "start": "1232760",
    "end": "1238280"
  },
  {
    "text": "Tracer uh the plugin within Windows debugger that's the help screen and it lists some of the uh other sub modules",
    "start": "1238280",
    "end": "1246280"
  },
  {
    "text": "within the plugin that we have we have uh deep Trace Trace that's a tracer as",
    "start": "1246280",
    "end": "1251520"
  },
  {
    "text": "you see in the second file uh second screenshot sorry you say deep Trace trace and you give the path to the log",
    "start": "1251520",
    "end": "1257360"
  },
  {
    "text": "file and it'll write to disk um there is the Deep Trace forward which helps you",
    "start": "1257360",
    "end": "1262799"
  },
  {
    "text": "allocate the number of objects size of each object and the specific permissions you want to pass it to it uh by default",
    "start": "1262799",
    "end": "1269559"
  },
  {
    "text": "it'll also uh allocate I think two objects but it's also given in The Help screen and there is the analyzer this is",
    "start": "1269559",
    "end": "1275919"
  },
  {
    "text": "the command line analyzer that uh we were talking about you could just do deep Trace analyzer uh but in some of",
    "start": "1275919",
    "end": "1281400"
  },
  {
    "text": "the screenshots we'll see in the demos we try to show you the guey of the analyzer only because it's easier to",
    "start": "1281400",
    "end": "1287600"
  },
  {
    "text": "visualize but just so you know we have it right in the debugger so if you want to script against it you can easily do",
    "start": "1287600",
    "end": "1295120"
  },
  {
    "start": "1294000",
    "end": "1294000"
  },
  {
    "text": "that uh let's move on to analysis on some dead bugs and that's a game of throne reference for those of you who",
    "start": "1295120",
    "end": "1301960"
  },
  {
    "text": "got it excellent so uh one point like before we starting like showing those analysis",
    "start": "1301960",
    "end": "1307919"
  },
  {
    "text": "so together with this presentation we also releasing a paper okay that actually has details on that analysis",
    "start": "1307919",
    "end": "1313440"
  },
  {
    "text": "and all the screenshots uh the screenshots are not going to be super visible probably some of them are some",
    "start": "1313440",
    "end": "1318840"
  },
  {
    "text": "of them may be not so don't worry about that like all that will be also in the paper like with the the explanation the",
    "start": "1318840",
    "end": "1325400"
  },
  {
    "text": "idea here is more to demonstrate the process and how we actually use it in three different bugs uh so like we start",
    "start": "1325400",
    "end": "1332240"
  },
  {
    "text": "from a very simple one which is like a classical stack Overflow and then we go to like more tricky ones the intention",
    "start": "1332240",
    "end": "1337960"
  },
  {
    "text": "is to demonstrate that you can really use that process in from the simplest of the issues that you can just like",
    "start": "1337960",
    "end": "1343360"
  },
  {
    "text": "immediately notice that it's exploitable condition to the more complex bugs where you really need to do a lot of manual",
    "start": "1343360",
    "end": "1349679"
  },
  {
    "text": "analysis and a lot of constraints change during the analysis uh that you're doing so the very first bug is an adob reader",
    "start": "1349679",
    "end": "1356240"
  },
  {
    "start": "1355000",
    "end": "1355000"
  },
  {
    "text": "bug from 2010 so probably everybody remembers that bug is a lib Tiff bug so",
    "start": "1356240",
    "end": "1361480"
  },
  {
    "text": "when you have like an image file embedded in in a PDF uh the lib Tiff like has it like Tiff has its own header",
    "start": "1361480",
    "end": "1368240"
  },
  {
    "text": "in that header you have like IFD entries in the IFD entries you have like a tag type so for four different of those tag",
    "start": "1368240",
    "end": "1375440"
  },
  {
    "text": "types what uh like the library was doing was basically getting another value from the header and using that as the size of",
    "start": "1375440",
    "end": "1383120"
  },
  {
    "text": "the element to be copied to a fixed size buffer leading basically to a classical Tech overflow in this case so that was",
    "start": "1383120",
    "end": "1390000"
  },
  {
    "text": "like a very trivial uh uh issue and it's actually interesting because that already shows like for the initial",
    "start": "1390000",
    "end": "1395480"
  },
  {
    "text": "motivation when the Tool like started being developed right was really to look into this file format bugs and be able",
    "start": "1395480",
    "end": "1401799"
  },
  {
    "text": "to analyze those so that's why we chose it uh in this specific case like when we start like from the moment that we have",
    "start": "1401799",
    "end": "1408240"
  },
  {
    "text": "like the create file to the moment that we hit the crash we had like 10 million instructions so it took like 5 hours to",
    "start": "1408240",
    "end": "1414240"
  },
  {
    "text": "really Trace that in a 1 gig uh VM running so it's not really like a good",
    "start": "1414240",
    "end": "1420039"
  },
  {
    "text": "right so you can sheat as an analyst and you can actually put your break points like closer to where the problem is",
    "start": "1420039",
    "end": "1426039"
  },
  {
    "text": "happening right so since you already seeing there is a crash you are seeing the location of the crash and you know",
    "start": "1426039",
    "end": "1431159"
  },
  {
    "text": "where are the data so you can try to put like your tracing to be a little bit closer to the location of the crash so",
    "start": "1431159",
    "end": "1437240"
  },
  {
    "text": "you avoid doing that much tracing uh as I mentioned one of the the the ideas for the future is really optimizing this",
    "start": "1437240",
    "end": "1443320"
  },
  {
    "text": "tracing excluding certain modules doing some other like a smarter like tracing but right now that's like a limitation",
    "start": "1443320",
    "end": "1449840"
  },
  {
    "text": "so we kind of like sheet a little bit to actually get closer so if we look like into the analyzer and we look into the",
    "start": "1449840",
    "end": "1456520"
  },
  {
    "text": "instruction that is actually the def faulting instruction we can clearly see that there is like a tent value coming",
    "start": "1456520",
    "end": "1462120"
  },
  {
    "text": "from the pointer that has been de referenced therefore like we know that we can make that deference to actually",
    "start": "1462120",
    "end": "1468600"
  },
  {
    "text": "be something of value right for the attacker so we know that's happening and basically uh with that t information we",
    "start": "1468600",
    "end": "1475880"
  },
  {
    "text": "can actually look further and for example in this case in the GUI and really see the instruction that actually",
    "start": "1475880",
    "end": "1481799"
  },
  {
    "text": "the the flow is flowing through to see hey where is the previous instruction where I actually have control over",
    "start": "1481799",
    "end": "1487679"
  },
  {
    "text": "that's also coming from the input and then you can do that until you actually find out where really is your controller",
    "start": "1487679",
    "end": "1494320"
  },
  {
    "text": "data so in this case we knew that we do control the pointer so we can easily make that pointer points to somewhere we",
    "start": "1494320",
    "end": "1500880"
  },
  {
    "text": "want so in this case 41 41 41 and therefore we can really look into the flow and finally make that coming from",
    "start": "1500880",
    "end": "1507640"
  },
  {
    "text": "our file to actually overwrite the EAP and in this case we can control the execution flow of this program so this",
    "start": "1507640",
    "end": "1513720"
  },
  {
    "text": "program is very simple it's clearly exploitable right as we can we can demonstrate so the next examples are",
    "start": "1513720",
    "end": "1519640"
  },
  {
    "text": "much more elaborate with the idea of showing something that just the backward tent cannot tell you you really need to",
    "start": "1519640",
    "end": "1526240"
  },
  {
    "text": "go forward and do more and really look look into the constraints that's why we included these other examples to show",
    "start": "1526240",
    "end": "1531799"
  },
  {
    "text": "you that just the backward analysis is not enough we needed something more than",
    "start": "1531799",
    "end": "1538000"
  },
  {
    "start": "1536000",
    "end": "1536000"
  },
  {
    "text": "that um yeah so for the second analysis we look at an ie buug it's cve 2014 0282",
    "start": "1538760",
    "end": "1545279"
  },
  {
    "text": "it was reported by uh Simon Zucker Bron if I remember correctly from zdi um it's a cinput object user for",
    "start": "1545279",
    "end": "1553159"
  },
  {
    "text": "free and it was patched uh actually a few months before Microsoft uh release",
    "start": "1553159",
    "end": "1558799"
  },
  {
    "text": "the so-called silent mitigations the memory protection feature isolated Heap Etc which is the reason if you try this",
    "start": "1558799",
    "end": "1565279"
  },
  {
    "text": "POC uh on U an older version of IE uh you don't need to change any settings it",
    "start": "1565279",
    "end": "1571399"
  },
  {
    "text": "will crash right here instead of a null pointer D reference which you see with modern uh PC's because uh by default",
    "start": "1571399",
    "end": "1578760"
  },
  {
    "text": "memory protection feature is enabled and then the Heap manager doesn't actually free um yeah we're going to include all",
    "start": "1578760",
    "end": "1585159"
  },
  {
    "text": "those crash files together in the repository just to make it easy if you want and also I think there are a",
    "start": "1585159",
    "end": "1591919"
  },
  {
    "text": "bunch of places you can find the trigger for this a couple of months ago I think NCC group and uh some other person I",
    "start": "1591919",
    "end": "1598559"
  },
  {
    "text": "don't remember released uh an exploit actual exploit for this which pops Cal",
    "start": "1598559",
    "end": "1603760"
  },
  {
    "text": "it was done on Windows XP sp3 uh but we looked at it and it can easily be at",
    "start": "1603760",
    "end": "1609480"
  },
  {
    "text": "least ported to Windows 7 I 11 on the vulnerable version uh you would have you'd run into a bunch of more problems",
    "start": "1609480",
    "end": "1616039"
  },
  {
    "text": "on Windows 8 and later versions but it can be done but yeah there there are",
    "start": "1616039",
    "end": "1621320"
  },
  {
    "text": "actual exploits for this so we do know it's exploitable but then we want to show you how you would analyze this if",
    "start": "1621320",
    "end": "1626880"
  },
  {
    "text": "you were an analyst and you get this crash which innocuously looks like uh just a read access violation because",
    "start": "1626880",
    "end": "1633240"
  },
  {
    "text": "it's taking the stale reference that is ESI here is pointing to a freed",
    "start": "1633240",
    "end": "1638880"
  },
  {
    "text": "object so what we do here if you can see that uh on the screen is we do deep Trace forward we allocate two objects of",
    "start": "1638880",
    "end": "1646080"
  },
  {
    "text": "size 68 that's very specific to this version of the IE that we were running on on Windows 7 uh in the next example",
    "start": "1646080",
    "end": "1654440"
  },
  {
    "text": "we'll tell you that you don't have to be precise with the object size because the way deep Trace forward does uh uh",
    "start": "1654440",
    "end": "1660919"
  },
  {
    "text": "virtual alloc call it uses virtual alloc internally it allocates 1 KB of a page",
    "start": "1660919",
    "end": "1666919"
  },
  {
    "text": "so even if you roughly say 100 200 bytes if there's any access after that you still control that and it will fall so",
    "start": "1666919",
    "end": "1673559"
  },
  {
    "text": "you can start with a rough guess and then change it later",
    "start": "1673559",
    "end": "1678960"
  },
  {
    "text": "uh so what we do at the time of initial crash cuz right now it probably doesn't look exploitable right it's just a read",
    "start": "1679159",
    "end": "1685640"
  },
  {
    "text": "AIS violation what we do is uh we did deep tress forward we allocated two fake objects with 68",
    "start": "1685640",
    "end": "1692120"
  },
  {
    "text": "bytes uh then we redefine the references in this case we just redefine ESI to point to our fake object and then we",
    "start": "1692120",
    "end": "1699120"
  },
  {
    "text": "basically start the Tracer the Tracer itself will inherently start the stepping uh and it'll start tracing each",
    "start": "1699120",
    "end": "1705320"
  },
  {
    "text": "instruction uh by default as of course rodri mention we Trace each and every instruction so it's not just within Ms",
    "start": "1705320",
    "end": "1712039"
  },
  {
    "text": "HTML it goes all the way down to entd or whatever uh which is why it takes a bit",
    "start": "1712039",
    "end": "1717240"
  },
  {
    "text": "uh some time but if you're confident there's very easy way you can change that within the code and only track",
    "start": "1717240",
    "end": "1722840"
  },
  {
    "text": "certain modules that's also something we plan to do in the future so you start the Tracer right here specify the path",
    "start": "1722840",
    "end": "1728799"
  },
  {
    "text": "to the log file and a few instructions later it",
    "start": "1728799",
    "end": "1734120"
  },
  {
    "text": "just crashes again and there's another exception so what you try to see is do you control this exception and is it",
    "start": "1734120",
    "end": "1740880"
  },
  {
    "text": "exploitable here or do we need to keep going forward uh again as I mentioned we show",
    "start": "1740880",
    "end": "1747159"
  },
  {
    "text": "the goey portion just because it's clear all of this can be done from the command line I think there's a screenshot later that shows this uh so you don't have to",
    "start": "1747159",
    "end": "1754799"
  },
  {
    "text": "open the guey right click at the ranges it's not that manual it's kind of automated in the command line but again",
    "start": "1754799",
    "end": "1760559"
  },
  {
    "text": "we just show it here so you can visualize it better so that's the allocated range of our fake object",
    "start": "1760559",
    "end": "1766640"
  },
  {
    "text": "structure in memory you can even add multiple taint ranges uh this is just two objects so I add the start of the",
    "start": "1766640",
    "end": "1772840"
  },
  {
    "text": "first object and the ending uh of the second object I add the Tain range and that's an easy way for you to see uh",
    "start": "1772840",
    "end": "1780159"
  },
  {
    "text": "it's not super clear but the visual data Tracer at the back has the whole tree of each instruction that we started tracing",
    "start": "1780159",
    "end": "1786440"
  },
  {
    "text": "from the initial crash to this next crash and you can easily check if you control the if the Tain propagated and",
    "start": "1786440",
    "end": "1792840"
  },
  {
    "text": "if we control anything in this exception um",
    "start": "1792840",
    "end": "1798279"
  },
  {
    "text": "and clearly as you can see the EIP control is at CCC uh we can make sure uh",
    "start": "1798279",
    "end": "1804399"
  },
  {
    "text": "to check the trace again make sure that it comes from our fake object and it's just not some random value somewhere",
    "start": "1804399",
    "end": "1811760"
  },
  {
    "text": "uh so I just dumped ESI just to show you because initially that was the vulnerable reference that we redefined",
    "start": "1811760",
    "end": "1818640"
  },
  {
    "text": "before continuing the forward execution and you can see that the first object points to the second object and the",
    "start": "1818640",
    "end": "1823679"
  },
  {
    "text": "second object if you remember the block diagram was just a bunch of junk values meant to CR and that CCC is essentially coming from",
    "start": "1823679",
    "end": "1830799"
  },
  {
    "text": "there uh you can also see it in the visual Tracer which is a guey of the",
    "start": "1830799",
    "end": "1836360"
  },
  {
    "text": "analyzer uh it's basically a call edx and edx like a couple of instructions above that was derived from the tainted",
    "start": "1836360",
    "end": "1843240"
  },
  {
    "text": "value uh which was initially pointed to by ESI and that's the analyzer when you",
    "start": "1843240",
    "end": "1849440"
  },
  {
    "text": "just right click and say check Tain it will give you the flow of how you reach that t and how your freed object uh",
    "start": "1849440",
    "end": "1854640"
  },
  {
    "text": "sorry your fake object essentially caused that exception you can follow the path and as I mentioned down below you",
    "start": "1854640",
    "end": "1860960"
  },
  {
    "text": "can do the same thing by bang deep Trace analyzer specifying the trace file uh a",
    "start": "1860960",
    "end": "1866559"
  },
  {
    "text": "bunch of other flags that you can look at the help and it'll give you the same contextual information instead of you",
    "start": "1866559",
    "end": "1871639"
  },
  {
    "text": "having to open the guey and do all that so one thing that Rodrigo mentioned",
    "start": "1871639",
    "end": "1877519"
  },
  {
    "text": "was if you noticed we basically started from the crash point and move forward",
    "start": "1877519",
    "end": "1883120"
  },
  {
    "text": "but we didn't do any real backward tracing in the sense that when we attach the debugger to the instance uh to i1",
    "start": "1883120",
    "end": "1891519"
  },
  {
    "text": "then it the debugger breaks and then from that point of program startup to the crash we didn't show that right and",
    "start": "1891519",
    "end": "1897360"
  },
  {
    "text": "the reason is you can see that it's about 677 th000 instructions uh then it",
    "start": "1897360",
    "end": "1903559"
  },
  {
    "text": "stops before it passes control to iie iie gets spawned and then that's another",
    "start": "1903559",
    "end": "1908720"
  },
  {
    "text": "891 th000 instructions it took a while probably close to 30 minutes I guess uh and this",
    "start": "1908720",
    "end": "1916159"
  },
  {
    "text": "was a VM with uh 4 GB Ram I think but the thing is if you really wanted to do",
    "start": "1916159",
    "end": "1921480"
  },
  {
    "text": "that you have all that contextual information you don't really need to this is where you see the play of how",
    "start": "1921480",
    "end": "1927480"
  },
  {
    "text": "this would benefit you if you already knew kind of what you were doing uh and if you were a skilled analyst you",
    "start": "1927480",
    "end": "1933679"
  },
  {
    "text": "wouldn't start tracing right from the start of uh the breakpoint the initial breakpoint before Program start up in",
    "start": "1933679",
    "end": "1940320"
  },
  {
    "text": "windbur you would maybe put a breakpoint somewhere before uh the initial crash occurs and the closer you can do that of",
    "start": "1940320",
    "end": "1947080"
  },
  {
    "text": "course it needs a little a little bit more analysis but the trade-off is that The Closer you do that the smaller your log file is going to be and you can do",
    "start": "1947080",
    "end": "1953399"
  },
  {
    "text": "it faster um oh and I was as I was",
    "start": "1953399",
    "end": "1959639"
  },
  {
    "text": "mentioning uh that's too much information I don't think you can read that but instead of the whole visual",
    "start": "1959639",
    "end": "1965639"
  },
  {
    "text": "analyzer and you trying to do that it's just a bunch of commands from the debugger and it'll take the trace file that was",
    "start": "1965639",
    "end": "1972039"
  },
  {
    "text": "dumped uh specify the instruction indexes and it'll check for taint of each of the instructions that let to the",
    "start": "1972039",
    "end": "1978279"
  },
  {
    "text": "next crash so it can be done easily from the command line we integrated that",
    "start": "1978279",
    "end": "1983919"
  },
  {
    "start": "1983000",
    "end": "1983000"
  },
  {
    "text": "too uh let's move on to a more recent example which is uh CV 2015 uh 6152 this",
    "start": "1984360",
    "end": "1990919"
  },
  {
    "text": "was patched I think uh December 2015 was reported by uh Blue Frost security uh I",
    "start": "1990919",
    "end": "1997559"
  },
  {
    "text": "think it was Moritz jod I don't know if I'm pronouncing his name right but he put the initial POC on exploit DB it's",
    "start": "1997559",
    "end": "2005440"
  },
  {
    "text": "categorized as a Dos exploit Microsoft when they patched they said it's uh it",
    "start": "2005440",
    "end": "2011120"
  },
  {
    "text": "allows code execution but I have rarely seen Microsoft say that any use after free is just a Dos they always say that",
    "start": "2011120",
    "end": "2018000"
  },
  {
    "text": "so you can either trust Microsoft uh which you can that's fine or you can just analyze it yourself if you wanted",
    "start": "2018000",
    "end": "2024039"
  },
  {
    "text": "to actually cook up an exploit for that so we'll try to analyze as far as I know",
    "start": "2024039",
    "end": "2029799"
  },
  {
    "text": "there's really no public analysis available but if you want the initial trigger that works on this vulnerable",
    "start": "2029799",
    "end": "2034840"
  },
  {
    "text": "version of IE it's on exploit DB it was put a couple of months ago I think but yeah to the best of my knowledge there's",
    "start": "2034840",
    "end": "2040720"
  },
  {
    "text": "no exploit or there's no public p uh sorry public analysis of this issue so",
    "start": "2040720",
    "end": "2046240"
  },
  {
    "text": "it's a c object element use off for free one thing to mention is obviously this has memory protection features enabled",
    "start": "2046240",
    "end": "2053560"
  },
  {
    "text": "but the reason you see the crash there uh is because when we were doing the",
    "start": "2053560",
    "end": "2059560"
  },
  {
    "text": "analysis we disabled the memory protection feature from the registry so if you're actually trying to exploit",
    "start": "2059560",
    "end": "2064720"
  },
  {
    "text": "this keep in mind you'd still need a bypass for the memory protection features uh but this is just done for",
    "start": "2064720",
    "end": "2070040"
  },
  {
    "text": "the analysis so as I was saying here uh earlier that you can do deep prace forward with a very rough size so we do",
    "start": "2070040",
    "end": "2076679"
  },
  {
    "text": "deep prace forward allocate four objects we're really not sure how many references we bump into and we say the",
    "start": "2076679",
    "end": "2083040"
  },
  {
    "text": "size of object is 200 uh it's actually not 200 but as I was saying you can just roughly guess and then move forward you",
    "start": "2083040",
    "end": "2089158"
  },
  {
    "text": "have 1 KB of kind of slack space to work with uh 0x02 that's uh page read only uh",
    "start": "2089159",
    "end": "2097480"
  },
  {
    "text": "we just try with that and then if something changes we can dynamically reallocate and change some constraints",
    "start": "2097480",
    "end": "2104040"
  },
  {
    "text": "and it shows you the allocated ranges of the fake object uh that's just showing you the",
    "start": "2104040",
    "end": "2109839"
  },
  {
    "text": "fake object chain um of course as you see it's a test dword pointer ex plus 24 it's",
    "start": "2109839",
    "end": "2116560"
  },
  {
    "text": "trying to read 24 bytes into the free object which innocuously looks like a read AIS violation you're not sure if",
    "start": "2116560",
    "end": "2122440"
  },
  {
    "text": "you can get uh exploitable primitive so at this point because we have our fake structure in memory just redefine the",
    "start": "2122440",
    "end": "2129040"
  },
  {
    "text": "references uh to eax and uh we continue the exception with deep Trace trace and give the log",
    "start": "2129040",
    "end": "2136920"
  },
  {
    "text": "file uh the trace file path again this is the GUI you add 10 t",
    "start": "2136920",
    "end": "2144599"
  },
  {
    "text": "uh ranges like this you can do it from the command line same stuff and basically we keep hitting exceptions and",
    "start": "2144599",
    "end": "2152160"
  },
  {
    "text": "we keep checking if we control the taint at every exception as we move forward um oh so",
    "start": "2152160",
    "end": "2159520"
  },
  {
    "text": "one of the constraints here was as we saw at the initial crash point it's reading 24 bytes within the freed object",
    "start": "2159520",
    "end": "2165079"
  },
  {
    "text": "and it's checking for a constant value so we will try to not meet that constraint we'll treat that as data but",
    "start": "2165079",
    "end": "2171440"
  },
  {
    "text": "it's checking for three 0 we just do 3 0 just to make sure",
    "start": "2171440",
    "end": "2177280"
  },
  {
    "text": "it's data but we don't actually meet the constraint so we'll follow up an entire",
    "start": "2177280",
    "end": "2182520"
  },
  {
    "text": "entirely different code path than what we would have if we had met this constraint and hopefully some other",
    "start": "2182520",
    "end": "2187640"
  },
  {
    "text": "constraint so let's just try not to meet the constraint and we continue the",
    "start": "2187640",
    "end": "2192960"
  },
  {
    "text": "execution and try to trace it and we end up in a bunch of more exceptions at every point we do the same",
    "start": "2192960",
    "end": "2199839"
  },
  {
    "text": "thing uh make sure to check the Tain propagation make sure we have control and then keep uh following",
    "start": "2199839",
    "end": "2206680"
  },
  {
    "text": "execution uh this particular execution it doesn't it doesn't tell as much and",
    "start": "2206680",
    "end": "2212359"
  },
  {
    "text": "we aren't sure of an exploitable primitive yet um so what we try to do is",
    "start": "2212359",
    "end": "2219119"
  },
  {
    "text": "carry on another execution and this is kind of the limitation as you can obviously see with symbolic execution",
    "start": "2219119",
    "end": "2224800"
  },
  {
    "text": "you get much more tries uh but with us with our approach you have to be kind of smart and work",
    "start": "2224800",
    "end": "2231240"
  },
  {
    "text": "around otherwise you lose an execution and you kind of start from the beginning uh so this time we just do a rudimentary",
    "start": "2231240",
    "end": "2237760"
  },
  {
    "text": "analysis of a few instructions here and there uh not dig too deep but then we try to meet some initial constraints",
    "start": "2237760",
    "end": "2243920"
  },
  {
    "text": "that we see so we can originally go down that path path that we missed and see if",
    "start": "2243920",
    "end": "2249119"
  },
  {
    "text": "that works so we do the same thing we do de press forward allocate four objects",
    "start": "2249119",
    "end": "2255520"
  },
  {
    "text": "again 200 and as you can see in the left part of the screenshot we try to meet a",
    "start": "2255520",
    "end": "2261960"
  },
  {
    "text": "bunch of constraints so we see that EDI is a reference uh which EDI is holding a",
    "start": "2261960",
    "end": "2267280"
  },
  {
    "text": "stale reference we try to uh we try to redefine that there is a pointer on the",
    "start": "2267280",
    "end": "2273240"
  },
  {
    "text": "stack that holds the reference we try to redefine that uh and we try to uh 24",
    "start": "2273240",
    "end": "2278680"
  },
  {
    "text": "bytes within the free object it checks for 400 that value so we try to hit that code path and then we continue the",
    "start": "2278680",
    "end": "2285160"
  },
  {
    "text": "execution and immediately you see that in that particular code path we hit a much more interesting exception which is",
    "start": "2285160",
    "end": "2291280"
  },
  {
    "text": "a stack buffer overrun uh the Tracer tells you that it locked 3,664",
    "start": "2291280",
    "end": "2298040"
  },
  {
    "text": "instructions and they were dump to the lck file that you had initially",
    "start": "2298040",
    "end": "2303200"
  },
  {
    "text": "specified uh and if you just do a preliminary analysis of what caused that and you check the stack you see that it",
    "start": "2303599",
    "end": "2309560"
  },
  {
    "text": "was because of a failed VT guard check so that seems more interesting cuz it seems like we have some exploitable",
    "start": "2309560",
    "end": "2316880"
  },
  {
    "text": "primitive and hopefully there'll be a call after that BT guard check uh I put an I had a screenshot",
    "start": "2316880",
    "end": "2322920"
  },
  {
    "text": "primarily because you can check this even in vdebug or our command line",
    "start": "2322920",
    "end": "2328319"
  },
  {
    "text": "Tracer or the GUI but the way the basic block is arranged is in linear disassembly it's very difficult to view",
    "start": "2328319",
    "end": "2334760"
  },
  {
    "text": "that uh so you would you wouldn't actually kind of get an idea of what's happening but as you can see here",
    "start": "2334760",
    "end": "2341119"
  },
  {
    "text": "clearly there are a bunch of other constraints you have to bypass VT guard check which if you had an info leak in Ms HTML you could probably do that then",
    "start": "2341119",
    "end": "2349119"
  },
  {
    "text": "there are a bunch of other constraints where it's comparing some offsets but we don't have to worry about it because if you see the red path in Ida in the graph",
    "start": "2349119",
    "end": "2355640"
  },
  {
    "text": "view it's going to another path we don't want to go there we want to go to the bottom basic block where there's code",
    "start": "2355640",
    "end": "2361760"
  },
  {
    "text": "execution and for those of you who are check uh who are paying attention of course there's a guard check I call F",
    "start": "2361760",
    "end": "2368240"
  },
  {
    "text": "pointer so there's control flow guard to bypass also uh but in principle if you",
    "start": "2368240",
    "end": "2374599"
  },
  {
    "text": "could so there's memory protection VT guard CFG but in principle there is uh",
    "start": "2374599",
    "end": "2380839"
  },
  {
    "text": "code execution if but with the constraint that you need leaks and bypasses for some of these",
    "start": "2380839",
    "end": "2386920"
  },
  {
    "text": "mitigations um and at this point we do the same thing we confirm Tain control we see that we directly control this",
    "start": "2386920",
    "end": "2393160"
  },
  {
    "text": "point uh you can do it both from the command line and the analyzer guy",
    "start": "2393160",
    "end": "2399160"
  },
  {
    "start": "2398000",
    "end": "2398000"
  },
  {
    "text": "and uh so obviously looking at that immediately some limitations that you",
    "start": "2399160",
    "end": "2405119"
  },
  {
    "text": "can see are if a particular execution you kind of mess up you kind of have to start from the beginning and as you saw",
    "start": "2405119",
    "end": "2411880"
  },
  {
    "text": "we did a bunch of changes that were manual so as we kept saying from the start we do requir a skilled analyst to",
    "start": "2411880",
    "end": "2417960"
  },
  {
    "text": "know what he's doing and it's not just like a one-click solution but it kind of supplements most of your analysis and",
    "start": "2417960",
    "end": "2423680"
  },
  {
    "text": "you don't have to go poking around in either like four or five function down to just see if you can hit an",
    "start": "2423680",
    "end": "2429560"
  },
  {
    "text": "exploitable primitive uh and yeah Rodrigo will talk about specific challenges with our approach and what we",
    "start": "2429560",
    "end": "2435319"
  },
  {
    "text": "plan to do in the future so yeah definitely um as demonstrator there is a lot of steps that still require manual",
    "start": "2435319",
    "end": "2441920"
  },
  {
    "text": "analysis the idea here is really augment that manual analysis giving you some things that are automated during that",
    "start": "2441920",
    "end": "2447800"
  },
  {
    "text": "manual analysis some of the challenges that were like very clear when we looking there is like yeah how do you",
    "start": "2447800",
    "end": "2453240"
  },
  {
    "text": "know what are the ranges that have actually put from from the attacker so yeah that in some cases will be very",
    "start": "2453240",
    "end": "2459119"
  },
  {
    "text": "easy some other case will be very hard uh like if you look into like even like a a file format bug uh those programs",
    "start": "2459119",
    "end": "2466319"
  },
  {
    "text": "are very complex so they start like copying the data and mapping the file in different locations in memory and indeed",
    "start": "2466319",
    "end": "2471640"
  },
  {
    "text": "you need to go and start like look to all of those ranges that's still like something that requires like some manual",
    "start": "2471640",
    "end": "2477560"
  },
  {
    "text": "analysis uh there is like a really big challenges there on the partial training where like in some cases the tent",
    "start": "2477560",
    "end": "2483640"
  },
  {
    "text": "analysis can give you false positives because like you don't really fully control a value but you somehow have",
    "start": "2483640",
    "end": "2490440"
  },
  {
    "text": "some control over that value and we assuming you control the entire value so you can have like some Corner cases",
    "start": "2490440",
    "end": "2497119"
  },
  {
    "text": "there where you missing something that you believe you have control but you actually don't uh also as demonstrated",
    "start": "2497119",
    "end": "2503839"
  },
  {
    "text": "right like if there is mitigation mechanism in place we basically telling you there is like exploiting Primitives",
    "start": "2503839",
    "end": "2510000"
  },
  {
    "text": "in in that program but we don't really help you towards like the mitigation mechanism how you actually look into",
    "start": "2510000",
    "end": "2516160"
  },
  {
    "text": "those mitigation mechanism is right so if you are an exploit writer really wanting to write the the final exploit",
    "start": "2516160",
    "end": "2521480"
  },
  {
    "text": "you still need to be aware of those right uh the Tracer itself has like some limitations on on what we are able to",
    "start": "2521480",
    "end": "2528240"
  },
  {
    "text": "trace uh as I explained because it's like very detailed like 10 on the instruction set we right now only",
    "start": "2528240",
    "end": "2534079"
  },
  {
    "text": "support like really basic x86 uh we already actually formalized like the other instructions but we still didn't",
    "start": "2534079",
    "end": "2540359"
  },
  {
    "text": "implement it so uh keep in mind if you look into some bner that you use like MX or like s87 that we are not going to be",
    "start": "2540359",
    "end": "2547720"
  },
  {
    "text": "able to see that so the Tracer is blinded to that uh another limitation is really like this conditional code paths",
    "start": "2547720",
    "end": "2554839"
  },
  {
    "text": "as we saw like you need to force the code Paths of interest to happen if they are not happening in the crash file that",
    "start": "2554839",
    "end": "2561040"
  },
  {
    "text": "you do have so it's really definitely have like a lot of manual analysis and",
    "start": "2561040",
    "end": "2566200"
  },
  {
    "text": "really that's not magic solution it's just as I said a small step forward uh towards doing something better uh if we",
    "start": "2566200",
    "end": "2573640"
  },
  {
    "text": "look into the future other than like removing some of those limitations trying to speed up the Tracer adding",
    "start": "2573640",
    "end": "2579040"
  },
  {
    "text": "more instruction support uh we have like a to-do file that we really glad if anybody look around and start sending as",
    "start": "2579040",
    "end": "2586319"
  },
  {
    "text": "Comet and the latest version and everything is available on GitHub like on on blackhe 20 uh 2016 repository and",
    "start": "2586319",
    "end": "2595240"
  },
  {
    "text": "just before we finish I really want to say that we really appreciate the work done by Julio Alto and Dave actually uh",
    "start": "2595240",
    "end": "2601520"
  },
  {
    "text": "if it was not for this two guys this project was never actually going to be possible lots of that code is BAS on on",
    "start": "2601520",
    "end": "2607880"
  },
  {
    "text": "things developed by then they should be speakers with us actually but since they didn't reval the talk we just didn't",
    "start": "2607880",
    "end": "2613520"
  },
  {
    "text": "include their their names as as speakers but they should have been here with us",
    "start": "2613520",
    "end": "2618640"
  },
  {
    "text": "so thank you very much guys I know that Julie is here I don't know if David is here but he was here if you're here just",
    "start": "2618640",
    "end": "2624079"
  },
  {
    "text": "raise your hand yeah so he's not but he's probably drunk which is really good for him so I wish we can all go and get",
    "start": "2624079",
    "end": "2631119"
  },
  {
    "text": "drank now like if you guys have questions we are here yeah thank you you",
    "start": "2631119",
    "end": "2638400"
  },
  {
    "text": "we have five minutes right so we have five minutes any",
    "start": "2640520",
    "end": "2645520"
  },
  {
    "text": "questions so very nice work so I have two questions first what's the",
    "start": "2646800",
    "end": "2652200"
  },
  {
    "text": "performance overhead because I think Intel has some Hardware features called",
    "start": "2652200",
    "end": "2657680"
  },
  {
    "text": "Intel PT so maybe I don't know what's head of this work so the second one is",
    "start": "2657680",
    "end": "2663680"
  },
  {
    "text": "how can you find the root cause of some vulnerable is because someone like",
    "start": "2663680",
    "end": "2669680"
  },
  {
    "text": "integer overflow and that leads to the memory corruption and the two points are",
    "start": "2669680",
    "end": "2676240"
  },
  {
    "text": "very far away how could you locate the one like maybe a lot a long way before",
    "start": "2676240",
    "end": "2683200"
  },
  {
    "text": "thank you so yeah we are definitely aware of the Intel tracing capability uh",
    "start": "2683200",
    "end": "2688400"
  },
  {
    "text": "we didn't use it just because in the tracing process we are read actually help like providing information to what",
    "start": "2688400",
    "end": "2695040"
  },
  {
    "text": "the instruction is actually doing so that makes the analyzer easier so tracing is a little bit heavier but then",
    "start": "2695040",
    "end": "2700200"
  },
  {
    "text": "analysis themselves are like much easier so that's one of the reasons we didn't use it uh now regarding finding the root",
    "start": "2700200",
    "end": "2707079"
  },
  {
    "text": "cause yeah there there will be vulnerability that this approach is kind of dubious right you're probably going",
    "start": "2707079",
    "end": "2712920"
  },
  {
    "text": "to see that there is coming from a code path that is really basically related to that so you can see you still have",
    "start": "2712920",
    "end": "2719480"
  },
  {
    "text": "control into that injur overflow into that arithmatic instruction that happened so yeah we that approach would",
    "start": "2719480",
    "end": "2725319"
  },
  {
    "text": "help but um not too much right yeah again you would specifically need to",
    "start": "2725319",
    "end": "2730359"
  },
  {
    "text": "break somewhere before like let's say it's a use free before the aloc happens and like the initial free happens and",
    "start": "2730359",
    "end": "2737440"
  },
  {
    "text": "then the realog happens so yeah there would be supplementary analysis to go with that this would help you in terms",
    "start": "2737440",
    "end": "2744760"
  },
  {
    "text": "of being able to trace dynamically and you can see whether you hit that or not but yeah it's not going to tell you the",
    "start": "2744760",
    "end": "2751079"
  },
  {
    "text": "root cause of all the bugs uh unless you do have an idea of where to start uh and",
    "start": "2751079",
    "end": "2757760"
  },
  {
    "text": "yeah and basically do the whole chain of exception Tain Trace exception Tain Trace um but yeah that's a valid point",
    "start": "2757760",
    "end": "2767520"
  },
  {
    "text": "thanks so um do you have any analysis uh when you compare your tool the",
    "start": "2767640",
    "end": "2774000"
  },
  {
    "text": "improvements that your tool is adding with respect to bang exploitable or any other uh similar tools",
    "start": "2774000",
    "end": "2780960"
  },
  {
    "text": "or well obviously bang exploitable would just give you the initial uh basic",
    "start": "2780960",
    "end": "2786520"
  },
  {
    "text": "context ual information and categorize it if you're talking about specific metrics no but as we saw in the analysis",
    "start": "2786520",
    "end": "2793280"
  },
  {
    "text": "if you had just stopped it bang exploitable at least two of the cases you would just discard them as non-",
    "start": "2793280",
    "end": "2798680"
  },
  {
    "text": "exploitable and move on so we at least try to do better than that we don't have specific metrics with other tools as we",
    "start": "2798680",
    "end": "2805000"
  },
  {
    "text": "mentioned in our existing solution there are a bunch of tools which use very different approaches uh we just tried to",
    "start": "2805000",
    "end": "2811119"
  },
  {
    "text": "be very practical and it has worked but if you're asking specific numbers um no we if you go for an approach like using",
    "start": "2811119",
    "end": "2819160"
  },
  {
    "text": "this tool that we we providing you will still use something similar to bank exploit to actually at Le the the",
    "start": "2819160",
    "end": "2825040"
  },
  {
    "text": "initial categ b exploitable is the way to go I mean I'm not saying never use that that's good but then once you start",
    "start": "2825040",
    "end": "2831640"
  },
  {
    "text": "trying to track which ones you would spend more time to focus on uh seeing if",
    "start": "2831640",
    "end": "2836920"
  },
  {
    "text": "they're exploitable you would use tools like ours or more flow or a bunch of other tools but yeah no sorry we don't",
    "start": "2836920",
    "end": "2843000"
  },
  {
    "text": "have specific numbers we didn't benchmark but again there is performance overheard",
    "start": "2843000",
    "end": "2848839"
  },
  {
    "text": "if you don't know what you're doing and you end up tracing 10 million instructions",
    "start": "2848839",
    "end": "2854520"
  },
  {
    "text": "so that's it thank you very much we're going to be around so yeah we s thank you",
    "start": "2854680",
    "end": "2862000"
  }
]