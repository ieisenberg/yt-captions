[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "right welcome to backslash powered scaling imagine if you could conduct a",
    "start": "30",
    "end": "5970"
  },
  {
    "text": "pen test and only do the interesting bits if you could skip through the hours",
    "start": "5970",
    "end": "12179"
  },
  {
    "text": "of repetitive fuzzing and trolling through meaningless results and jump straight to that one page that reacts in",
    "start": "12179",
    "end": "19770"
  },
  {
    "text": "a mysterious way to your every input the page that turns out to be vulnerable to code injection in the language you've",
    "start": "19770",
    "end": "25859"
  },
  {
    "text": "never heard of or sequel injection behind a heavyweight filter that almost",
    "start": "25859",
    "end": "30869"
  },
  {
    "text": "stops you from cracking open the database the kind of page the no",
    "start": "30869",
    "end": "35940"
  },
  {
    "text": "blackbox vulnerability scanner would ever find in this session I'll share",
    "start": "35940",
    "end": "41610"
  },
  {
    "text": "with you the conception and development of an open-source scanner that can find research-grade vonner abilities this all",
    "start": "41610",
    "end": "50879"
  },
  {
    "start": "50000",
    "end": "172000"
  },
  {
    "text": "got started around four years ago I just begun a pen test for we'll call market",
    "start": "50879",
    "end": "57750"
  },
  {
    "text": "Iser and I had a little bit of a problem which was a market Iser hadn't got",
    "start": "57750",
    "end": "62789"
  },
  {
    "text": "around to give me any login credentials and you know sometimes when you look at",
    "start": "62789",
    "end": "69119"
  },
  {
    "text": "a website just through the design and the look of the site you could kind of feel the vulnerability screaming out at",
    "start": "69119",
    "end": "75030"
  },
  {
    "text": "you from inside it that was happening with the site and it was really upsetting because I couldn't log in and",
    "start": "75030",
    "end": "80700"
  },
  {
    "text": "get access to any of this attack surface I didn't even know a valid user name and",
    "start": "80700",
    "end": "88610"
  },
  {
    "text": "eventually they did give me some login creds and I loved him found some sequel injection dumped out all the passwords",
    "start": "88610",
    "end": "94979"
  },
  {
    "text": "which were naturally stored in plain text and I found that the password of",
    "start": "94979",
    "end": "100229"
  },
  {
    "text": "the company's director was market either one so in effect his username was more",
    "start": "100229",
    "end": "107549"
  },
  {
    "text": "secure than his password and I'm sure this situation of being locked out of an",
    "start": "107549",
    "end": "115500"
  },
  {
    "text": "application when you know there's loads of juicy stuff inside the app and lots of weak passwords in between you and",
    "start": "115500",
    "end": "121320"
  },
  {
    "text": "being inside the app is a familiar situation so after this I thought never",
    "start": "121320",
    "end": "127710"
  },
  {
    "text": "again and I made a tool called let me in which will send a low",
    "start": "127710",
    "end": "133300"
  },
  {
    "text": "of usernames a load of potential usernames which you feed it and it will",
    "start": "133300",
    "end": "138490"
  },
  {
    "text": "analyze the responses and also use some statistical tests on the timing of the",
    "start": "138490",
    "end": "143860"
  },
  {
    "text": "responses to try and identify any subtle clue as to which if any of the usernames",
    "start": "143860",
    "end": "150580"
  },
  {
    "text": "are valid and this worked really well on about 30% of websites and failed",
    "start": "150580",
    "end": "157660"
  },
  {
    "text": "probably on the other 70 and while trying to make it work on those 70 I",
    "start": "157660",
    "end": "163450"
  },
  {
    "text": "realize this this technology could be used for something far cooler and that's",
    "start": "163450",
    "end": "169060"
  },
  {
    "text": "what I'm here to share with you today first I'll talk about the three failures",
    "start": "169060",
    "end": "175120"
  },
  {
    "start": "172000",
    "end": "215000"
  },
  {
    "text": "of scanners three huge blind spots but pretty much all wrong ability scanners",
    "start": "175120",
    "end": "181420"
  },
  {
    "text": "have when it comes to finding server-side injection vulnerabilities vulnerabilities like sequel injection",
    "start": "181420",
    "end": "187680"
  },
  {
    "text": "code injection OS command injection that kind of stuff and then I'll talk about",
    "start": "187680",
    "end": "193960"
  },
  {
    "text": "two two novel approaches that we can take and that I've implemented that",
    "start": "193960",
    "end": "199300"
  },
  {
    "text": "avoid these blind spots entirely I'll look at the results that I found when I ran these two scanners on a couple of",
    "start": "199300",
    "end": "206560"
  },
  {
    "text": "thousand websites and I'll look at what else we can do with this tech then take",
    "start": "206560",
    "end": "212650"
  },
  {
    "text": "five minutes of questions first off I should mention that I work at port",
    "start": "212650",
    "end": "219459"
  },
  {
    "start": "215000",
    "end": "276000"
  },
  {
    "text": "swagger where we make a tool that you may have heard of called burp suite and the cool part of my role there is to",
    "start": "219459",
    "end": "226500"
  },
  {
    "text": "design new scanner checks so although I'm about to spend the next few slides",
    "start": "226500",
    "end": "232420"
  },
  {
    "text": "pretty much slagging off from ability scanners I'm doing it from a position of respect I think they're doing great work",
    "start": "232420",
    "end": "239260"
  },
  {
    "text": "and but people just need to be honest about what the challenges and what the",
    "start": "239260",
    "end": "244870"
  },
  {
    "text": "failings are I should also mention the last year I talked at blackhat USA about",
    "start": "244870",
    "end": "251980"
  },
  {
    "text": "a new type of vulnerability called server site template injection and one",
    "start": "251980",
    "end": "258370"
  },
  {
    "text": "of the core things that I'm going to show you today is that this new scanning",
    "start": "258370",
    "end": "263650"
  },
  {
    "text": "technique could find vulnerabilities like a site template injection before they're",
    "start": "263650",
    "end": "269520"
  },
  {
    "text": "publicly known about so it can find unknown types of injection vulnerability",
    "start": "269520",
    "end": "276680"
  },
  {
    "start": "276000",
    "end": "394000"
  },
  {
    "text": "okay the first blind spot is that security through obscurity really works",
    "start": "277160",
    "end": "282840"
  },
  {
    "text": "against scallops if you're using a modern scanner it almost certainly will",
    "start": "282840",
    "end": "289590"
  },
  {
    "text": "detect some types of server-side templating injection but from this list of the most popular template engines how",
    "start": "289590",
    "end": "297450"
  },
  {
    "text": "many do you think that it finds probably not all of them and that just the list",
    "start": "297450",
    "end": "303210"
  },
  {
    "text": "of the most popular ones for example arts point recently got code",
    "start": "303210",
    "end": "309120"
  },
  {
    "text": "execution on paypal using dust KS which is the server-side templating j'en not",
    "start": "309120",
    "end": "315390"
  },
  {
    "text": "on that list and it's worse than that because two years ago of course most",
    "start": "315390",
    "end": "321570"
  },
  {
    "text": "scanners detected server site template injection it's not the vulnerable systems weren't being scanned I know for",
    "start": "321570",
    "end": "328860"
  },
  {
    "text": "a fact that they absolutely were because someone reported a false negative",
    "start": "328860",
    "end": "334140"
  },
  {
    "text": "inverse XSS check and when I investigated myself to figure out what was going on I found the server was",
    "start": "334140",
    "end": "341010"
  },
  {
    "text": "vulnerable to server-side templating Junction and okay you might say well it",
    "start": "341010",
    "end": "347160"
  },
  {
    "text": "makes sense that if I'm using an obscure template engine something in the long",
    "start": "347160",
    "end": "352170"
  },
  {
    "text": "tail then scanners will fail to find that vulnerability but it's actually worse than that because using an obscure",
    "start": "352170",
    "end": "360690"
  },
  {
    "text": "piece of tech or some slightly unusual configuration can lead to completely",
    "start": "360690",
    "end": "365790"
  },
  {
    "text": "unrelated vulnerabilities being missed for example many scanners finds local",
    "start": "365790",
    "end": "372330"
  },
  {
    "text": "foil include vulnerabilities by using them to read the ATC password file and",
    "start": "372330",
    "end": "378050"
  },
  {
    "text": "if you're using SC Linux and that may well block the application from having",
    "start": "378050",
    "end": "383580"
  },
  {
    "text": "permission to read et Cie password file and then all these scanners will fail to",
    "start": "383580",
    "end": "389280"
  },
  {
    "text": "find local file includes it's pretty bad",
    "start": "389280",
    "end": "393980"
  },
  {
    "start": "394000",
    "end": "441000"
  },
  {
    "text": "so okay let's assume whether we're now scanning and applications that",
    "start": "394610",
    "end": "400740"
  },
  {
    "text": "all that is vulnerable in a well-known language so this one's vulnerable to PHP code injection a client code line code",
    "start": "400740",
    "end": "410910"
  },
  {
    "text": "injection so the way to detect this would be to send a sneak base payload like this and then time liver spots if",
    "start": "410910",
    "end": "417690"
  },
  {
    "text": "application takes ten seconds to respond then it's probably vulnerable so far so good but what if parentheses are",
    "start": "417690",
    "end": "426509"
  },
  {
    "text": "filtered out well as a human we can still adapt and exploit it but the",
    "start": "426509",
    "end": "432300"
  },
  {
    "text": "scanner won't find this it'll just get a false negative similarly if there's a a a Web",
    "start": "432300",
    "end": "437909"
  },
  {
    "text": "Application Firewall doing something like looking to the sleep keyword the scanner will fail to find it but we can",
    "start": "437909",
    "end": "444240"
  },
  {
    "text": "probably adapt and bypass this and of course if double quotes are filtered",
    "start": "444240",
    "end": "449370"
  },
  {
    "text": "once again the scanner may fail to find it it's not the scanners can't send",
    "start": "449370",
    "end": "455030"
  },
  {
    "text": "can't send these three variants here it's that this is a tiny sample of the",
    "start": "455030",
    "end": "460349"
  },
  {
    "text": "possible variations and filters for any given application might have of these",
    "start": "460349",
    "end": "466169"
  },
  {
    "text": "three two are ones that I found found personally on ten tests and one is one",
    "start": "466169",
    "end": "472199"
  },
  {
    "text": "that someone else by note that in fact the situation is so bad that if you put",
    "start": "472199",
    "end": "480780"
  },
  {
    "text": "your if you put your sequel statement strings in double quotes harder than",
    "start": "480780",
    "end": "486330"
  },
  {
    "text": "single quotes many scanners will just fail to find sequel injection on your application throughout but that could be",
    "start": "486330",
    "end": "493319"
  },
  {
    "text": "useful in some cases okay so now assume",
    "start": "493319",
    "end": "499110"
  },
  {
    "text": "okay we've got a known technology and we've got no filters or kind of weird variants whatsoever",
    "start": "499110",
    "end": "504800"
  },
  {
    "text": "surely this can do this it simply needs to figure out where to put the payload",
    "start": "504800",
    "end": "511520"
  },
  {
    "text": "this request is going to an endpoint on eBay that used to be vulnerable to",
    "start": "511520",
    "end": "516570"
  },
  {
    "text": "remote code execution via PHP injection and the obvious place to put the payload",
    "start": "516570",
    "end": "522149"
  },
  {
    "text": "is in the isn't the cube cube parameter which I've highlighted but that won't work and putting it in the cookie won't",
    "start": "522149",
    "end": "529529"
  },
  {
    "text": "work either neither will putting it in the further or the user-agent",
    "start": "529529",
    "end": "534930"
  },
  {
    "text": "or the path or even guessing some additional headers to put it in and by",
    "start": "534930",
    "end": "541680"
  },
  {
    "text": "the time a scanner has reached this point and tried all of these locations that sent an awful lot of payloads as",
    "start": "541680",
    "end": "546959"
  },
  {
    "text": "wasted a lot of time in order to exploit this application we need to specify an",
    "start": "546959",
    "end": "553800"
  },
  {
    "text": "additional Q parameter so that we're passing in an array this was found by a",
    "start": "553800",
    "end": "561120"
  },
  {
    "text": "manual tester because he noticed that the original Q parameter was behaving in",
    "start": "561120",
    "end": "566220"
  },
  {
    "text": "a suspicious way he found that it was correcting his spelling when he misspelled things and also that it was",
    "start": "566220",
    "end": "572129"
  },
  {
    "text": "thought filtering out certain keywords so he went okay that's a bit weird I'm",
    "start": "572129",
    "end": "578699"
  },
  {
    "text": "going to I'm going to investigate further and and try some more extreme measures such as specifying an",
    "start": "578699",
    "end": "585000"
  },
  {
    "text": "additional Q parameter so the million",
    "start": "585000",
    "end": "590129"
  },
  {
    "start": "588000",
    "end": "636000"
  },
  {
    "text": "payload problem simply put is is that a scanner could identify all of those",
    "start": "590129",
    "end": "595620"
  },
  {
    "text": "vulnerabilities if it's sent all of those payloads but to find every possible variant for every technology it",
    "start": "595620",
    "end": "601470"
  },
  {
    "text": "will be sending a million probes per input and it would never finish scanning anything scanners can't do that so there",
    "start": "601470",
    "end": "610819"
  },
  {
    "text": "they're reduced to sending best effort payloads that will find most variants of",
    "start": "610819",
    "end": "616529"
  },
  {
    "text": "a vulnerability and most of the time that does the job but the remaining time",
    "start": "616529",
    "end": "623009"
  },
  {
    "text": "it fails completely and that's what leads to people saying scanners are good for finding low-hanging fruit what we",
    "start": "623009",
    "end": "632730"
  },
  {
    "text": "need is a scanner that finds high hang for it in order to what we need to do to",
    "start": "632730",
    "end": "640829"
  },
  {
    "start": "636000",
    "end": "693000"
  },
  {
    "text": "achieve this is to make a scanner aren't harnesses that concept of intuition that",
    "start": "640829",
    "end": "646470"
  },
  {
    "text": "that manual tester had so rather than sending a highly specific payload that",
    "start": "646470",
    "end": "651689"
  },
  {
    "text": "says something like finally injection into a double quoted string being evaluated in PHP with no filters we're",
    "start": "651689",
    "end": "659670"
  },
  {
    "text": "going to send a really generic payload that says finally something interesting and then if we if we do find something",
    "start": "659670",
    "end": "667319"
  },
  {
    "text": "interesting we focus on that and investigate further we can implement this in a in a kind of",
    "start": "667319",
    "end": "673950"
  },
  {
    "text": "cycle so to begin with we only need this most generic probe so we can send that",
    "start": "673950",
    "end": "679890"
  },
  {
    "text": "to loads of servers and manually investigate the results and use that to",
    "start": "679890",
    "end": "685410"
  },
  {
    "text": "work out what code we need to automate the next stage of this cycle to classify those those results so I'm going to",
    "start": "685410",
    "end": "695130"
  },
  {
    "start": "693000",
    "end": "757000"
  },
  {
    "text": "start with a really specific payload and try to make it as generic as possible this payload here will find you",
    "start": "695130",
    "end": "701730"
  },
  {
    "text": "server-side templating section into free market if we if we reduce it down to",
    "start": "701730",
    "end": "708600"
  },
  {
    "text": "this then we'll find server site template injection in quite a few different template engines that all",
    "start": "708600",
    "end": "714690"
  },
  {
    "text": "support the same interpolation syntax and if we reduce it further then we can",
    "start": "714690",
    "end": "720600"
  },
  {
    "text": "find code injection in any language that supports hex escapes but we can still do",
    "start": "720600",
    "end": "726870"
  },
  {
    "text": "better than that because some languages like noticeably most databases don't",
    "start": "726870",
    "end": "732779"
  },
  {
    "text": "support hex escapes within strings so what we're going to do is send two",
    "start": "732779",
    "end": "738660"
  },
  {
    "text": "backslashes to the application and if we see only one backslash come back to us",
    "start": "738660",
    "end": "745110"
  },
  {
    "text": "that tells us that our input may be being evaluated server-side and pretty",
    "start": "745110",
    "end": "752790"
  },
  {
    "text": "much every language out there supports backslashes having sent that payload we",
    "start": "752790",
    "end": "760470"
  },
  {
    "start": "757000",
    "end": "848000"
  },
  {
    "text": "then need to gather further information to figure out okay what's actually happening here and I found that the most",
    "start": "760470",
    "end": "767279"
  },
  {
    "text": "effective way to achieve that is to is to figure out what the baseline of that",
    "start": "767279",
    "end": "773490"
  },
  {
    "text": "of the application is for like what the default behavior is by sending an",
    "start": "773490",
    "end": "779070"
  },
  {
    "text": "invalid escape like slash Zed Zed we can then sure escaping loads of other",
    "start": "779070",
    "end": "785820"
  },
  {
    "text": "characters and look out for anomalies so",
    "start": "785820",
    "end": "790980"
  },
  {
    "text": "here we can see that if we if we escape the curly character then the backslash",
    "start": "790980",
    "end": "798870"
  },
  {
    "text": "vanishes and that tells us that the curly has has a special significance to the",
    "start": "798870",
    "end": "804370"
  },
  {
    "text": "application and it gives us a kind of clue as to what's going on and we can",
    "start": "804370",
    "end": "812290"
  },
  {
    "text": "try this with all special characters and build and build a kind of fingerprint based on which special characters are",
    "start": "812290",
    "end": "819459"
  },
  {
    "text": "actually significant to the application it's worth noting that this process is",
    "start": "819459",
    "end": "826290"
  },
  {
    "text": "really efficient because for 99.9% of inputs we only need to send two",
    "start": "826290",
    "end": "833140"
  },
  {
    "text": "backslashes and we'll get two backslashes back and we'll know that nothing interesting is Hamming here it's",
    "start": "833140",
    "end": "840040"
  },
  {
    "text": "only for a tiny number of inputs where we have where we have to do this follow-up work just like how a manual",
    "start": "840040",
    "end": "846370"
  },
  {
    "text": "test that works so the result is that at a glance we've got a reasonable idea as",
    "start": "846370",
    "end": "853589"
  },
  {
    "text": "how interesting something is on the left here you can see loads of loads of",
    "start": "853589",
    "end": "860290"
  },
  {
    "text": "transformations with which the scanner thinks are interesting and those are all",
    "start": "860290",
    "end": "865420"
  },
  {
    "text": "those characters are all associated with markdown syntax because it is in fact vulnerable to server-side markdown",
    "start": "865420",
    "end": "871990"
  },
  {
    "text": "injection on the right the only transformation is that slash zero gets",
    "start": "871990",
    "end": "878079"
  },
  {
    "text": "converted into an old byte so what's probably happening here is that the",
    "start": "878079",
    "end": "884290"
  },
  {
    "text": "server is calling PHP strip slashes function on the input and so in that's",
    "start": "884290",
    "end": "891910"
  },
  {
    "text": "not a vulnerability by itself but at a glance we can tell that and I could make",
    "start": "891910",
    "end": "899860"
  },
  {
    "text": "the scanner filter out those issues entirely but actually in some situations being able to inject byte when an input",
    "start": "899860",
    "end": "907959"
  },
  {
    "text": "is halfway through being processed is really quite useful so what we've got",
    "start": "907959",
    "end": "913959"
  },
  {
    "text": "here is an extremely efficient check that can identify a huge range of different issues and it doesn't really",
    "start": "913959",
    "end": "921190"
  },
  {
    "text": "care much about things like filters because it's sending such simple payloads however there's a huge",
    "start": "921190",
    "end": "928420"
  },
  {
    "text": "fundamental design flaw with this",
    "start": "928420",
    "end": "932790"
  },
  {
    "text": "and that's but it relies on process input reflection so if I send two",
    "start": "933440",
    "end": "941569"
  },
  {
    "text": "slashes and that lands in a an escaped sequels sequel statement it will be",
    "start": "941569",
    "end": "948379"
  },
  {
    "text": "converted to one slash but I will never know that happened unless the server who",
    "start": "948379",
    "end": "953540"
  },
  {
    "text": "reflects the sequel statement back to me after after evaluation so this can find",
    "start": "953540",
    "end": "960920"
  },
  {
    "text": "really cool things but it will also get you tons and tons of false negatives you can't just run this technique on",
    "start": "960920",
    "end": "966740"
  },
  {
    "text": "something and then be sure that it's X but that's okay because we can do better",
    "start": "966740",
    "end": "974079"
  },
  {
    "start": "970000",
    "end": "1050000"
  },
  {
    "text": "using the response analysis technology from let me in and carefully crafted",
    "start": "974079",
    "end": "980000"
  },
  {
    "text": "pairs of payloads we can look at responses and identify tiny differences",
    "start": "980000",
    "end": "987290"
  },
  {
    "text": "which indicate a suspicious behavior so to give a very simple example if we send",
    "start": "987290",
    "end": "994519"
  },
  {
    "text": "a single quote and that and the applications with response changes and then we escape that quote and the",
    "start": "994519",
    "end": "1001029"
  },
  {
    "text": "applications responses the verts to what it originally was we can say okay there's probably something interesting",
    "start": "1001029",
    "end": "1007540"
  },
  {
    "text": "here and follow-up in this context the base the base is the rich applications",
    "start": "1007540",
    "end": "1017259"
  },
  {
    "text": "original response to us so the response before we did any tampering with the input and if we send a single quote and",
    "start": "1017259",
    "end": "1024909"
  },
  {
    "text": "it matches the base then we know there's nothing interesting happening here if it doesn't match the base then we can",
    "start": "1024909",
    "end": "1032199"
  },
  {
    "text": "follow up and if that revert to matching the base you can go okay that's",
    "start": "1032199",
    "end": "1039938"
  },
  {
    "text": "interesting there's something worth investigating the application is probably putting our input in a single",
    "start": "1039939",
    "end": "1046360"
  },
  {
    "text": "quoted string in some language or other using this technique using pairs of",
    "start": "1046360",
    "end": "1053200"
  },
  {
    "text": "probes we can ask a series of questions of the application so we can start for",
    "start": "1053200",
    "end": "1060280"
  },
  {
    "text": "efficiency sake with something really simple like saying does the application react to a general-purpose substring",
    "start": "1060280",
    "end": "1067340"
  },
  {
    "text": "and if it does then we can go okay let's investigate further and try each",
    "start": "1067340",
    "end": "1073000"
  },
  {
    "text": "individual part of that of that fostering to figure out which part caused the reaction so in this case the",
    "start": "1073000",
    "end": "1082130"
  },
  {
    "text": "scanner found the double quote is what caused the difference in the applications response then we can try",
    "start": "1082130",
    "end": "1089270"
  },
  {
    "text": "and work out whether we can concatenate strings and so we can try dot and pipe",
    "start": "1089270",
    "end": "1095150"
  },
  {
    "text": "and plus and here we found that plus can be used for for concatenation and then",
    "start": "1095150",
    "end": "1101240"
  },
  {
    "text": "we can K say okay can we inject a function call and here we we're using",
    "start": "1101240",
    "end": "1107840"
  },
  {
    "text": "the ABS function which is a really generic function like it exists in pretty much every language out there so",
    "start": "1107840",
    "end": "1114860"
  },
  {
    "text": "we we don't need to know what the what the language that's being you service ID",
    "start": "1114860",
    "end": "1121040"
  },
  {
    "text": "is at this point and then finally having found that we can then say okay is this",
    "start": "1121040",
    "end": "1127220"
  },
  {
    "text": "a language that I already know about so the scanner will then try a list of",
    "start": "1127220",
    "end": "1133330"
  },
  {
    "text": "functions that that I know only work in one particular language and use that to work out exactly which language is if it",
    "start": "1133330",
    "end": "1141470"
  },
  {
    "text": "can and that's that that's quite cool by self but it's finding code injection in",
    "start": "1141470",
    "end": "1148430"
  },
  {
    "text": "a wide range of languages in a really efficient way but the best thing is that",
    "start": "1148430",
    "end": "1155360"
  },
  {
    "text": "the scanner doesn't have to get all the way to the end of this process maybe this is code injection in an on loan in",
    "start": "1155360",
    "end": "1162350"
  },
  {
    "text": "an unknown language that means the scanner will probably get this far and",
    "start": "1162350",
    "end": "1167560"
  },
  {
    "text": "that's absolutely fine because the scanner will still report this and as a as a pen tester I can figure out what's",
    "start": "1167560",
    "end": "1174500"
  },
  {
    "text": "going on with really quite easily maybe that application is sorting out",
    "start": "1174500",
    "end": "1179890"
  },
  {
    "text": "parentheses well that's fine because the scanner will still get this far and tell me and as a pen tester I can figure out",
    "start": "1179890",
    "end": "1186710"
  },
  {
    "text": "what's going on so what we have hot have here is something that can handle one lone languages it can handle filters and",
    "start": "1186710",
    "end": "1193730"
  },
  {
    "text": "they can handle variants of issues that's",
    "start": "1193730",
    "end": "1198800"
  },
  {
    "text": "a screenshot of the result that I just showed okay and this technique isn't",
    "start": "1198800",
    "end": "1209780"
  },
  {
    "text": "just limited to finding string ejections you can also find injections in two numeric contexts you can find",
    "start": "1209780",
    "end": "1216620"
  },
  {
    "text": "interpolation you can find injection into order by clauses you can find",
    "start": "1216620",
    "end": "1221780"
  },
  {
    "text": "direct code injection by using inline comments so the payload on the left in",
    "start": "1221780",
    "end": "1227900"
  },
  {
    "text": "the comment line is an invalid comment because it closes itself and you can",
    "start": "1227900",
    "end": "1233510"
  },
  {
    "text": "even find function hijacking which is something you see in particularly in PHP",
    "start": "1233510",
    "end": "1239000"
  },
  {
    "text": "from time to time at this point you're",
    "start": "1239000",
    "end": "1244460"
  },
  {
    "text": "hopefully thinking that sounds pretty powerful and you might be wondering seeing how simple it is why I wasn't",
    "start": "1244460",
    "end": "1250760"
  },
  {
    "text": "done ten years ago the answer is that I've completely skipped over the",
    "start": "1250760",
    "end": "1257690"
  },
  {
    "start": "1253000",
    "end": "1450000"
  },
  {
    "text": "question of how you tell whether the responses from the application are actually significantly different because",
    "start": "1257690",
    "end": "1266330"
  },
  {
    "text": "applications responses in real life outside of the lab environment are full",
    "start": "1266330",
    "end": "1272570"
  },
  {
    "text": "of of dynamic content like time stamps and cash Buster's and just random stuff because why not",
    "start": "1272570",
    "end": "1279490"
  },
  {
    "text": "the original intuition that I had when I tackle this that I used in let me in is",
    "start": "1279490",
    "end": "1286670"
  },
  {
    "text": "that his applications responses are basically composed of static blocks with",
    "start": "1286670",
    "end": "1293690"
  },
  {
    "text": "small dynamic areas so I used the longest common subsequence algorithm to",
    "start": "1293690",
    "end": "1301220"
  },
  {
    "text": "find out where the static box were and then stitch together these static blocks",
    "start": "1301220",
    "end": "1306730"
  },
  {
    "text": "using wild card to make a gigantic regular expression that will match the response from the application if it",
    "start": "1306730",
    "end": "1314330"
  },
  {
    "text": "hadn't if it had an inconsequential change but if there was a significant change it shouldn't match it and this",
    "start": "1314330",
    "end": "1322430"
  },
  {
    "text": "worked 100% of the time about 30% of the time and the rest of the time I planned",
    "start": "1322430",
    "end": "1329060"
  },
  {
    "text": "into problems the most reoccurring problem were performance was",
    "start": "1329060",
    "end": "1334410"
  },
  {
    "text": "performance issues so the longest common subsequence algorithm is Big O N squared",
    "start": "1334410",
    "end": "1340140"
  },
  {
    "text": "which means as the applications response gets longer it takes a lot longer - Lee",
    "start": "1340140",
    "end": "1346560"
  },
  {
    "text": "scan it and I also found that in some cases the regular expressions that this",
    "start": "1346560",
    "end": "1351800"
  },
  {
    "text": "process generated was so complicated that they launched a regular expression",
    "start": "1351800",
    "end": "1356910"
  },
  {
    "text": "denial of service attack on my own computer also some applications simply",
    "start": "1356910",
    "end": "1363630"
  },
  {
    "text": "don't really play by this idea of static blocks with small dynamic sections they",
    "start": "1363630",
    "end": "1369960"
  },
  {
    "text": "will just give you completely different responses sometimes because they feel like it and trying to make a regex that",
    "start": "1369960",
    "end": "1377130"
  },
  {
    "text": "matches two completely different responses that both have dynamic sections is not much fun",
    "start": "1377130",
    "end": "1384050"
  },
  {
    "text": "what's also not much fun is debugging a regex that's four thousand lines long to",
    "start": "1384050",
    "end": "1390240"
  },
  {
    "text": "figure out why it doesn't match a particular response and some applications also shuffle shuffle the",
    "start": "1390240",
    "end": "1397920"
  },
  {
    "text": "order of content within the response on every page on every page loads which this approach doesn't handle very well",
    "start": "1397920",
    "end": "1405920"
  },
  {
    "text": "and finally even really basic things like time stamps can break this",
    "start": "1405920",
    "end": "1412170"
  },
  {
    "text": "technique by definition certain characters within a time stamp change",
    "start": "1412170",
    "end": "1418260"
  },
  {
    "text": "only every ten or say 60 seconds so it's very easy to think that your payload",
    "start": "1418260",
    "end": "1423720"
  },
  {
    "text": "caused a major change in the applications response when it was actually just the time that your payload",
    "start": "1423720",
    "end": "1428820"
  },
  {
    "text": "was set you might think that you can fix",
    "start": "1428820",
    "end": "1435570"
  },
  {
    "text": "every one of these problems and continue using this a dis approach or something",
    "start": "1435570",
    "end": "1441420"
  },
  {
    "text": "very similar to it and maybe you can but I used to think that and that's why this",
    "start": "1441420",
    "end": "1448050"
  },
  {
    "text": "wasn't released three years ago fortunately there's a better way what we",
    "start": "1448050",
    "end": "1455850"
  },
  {
    "text": "can do is work is work out certain attributes of the response that we can",
    "start": "1455850",
    "end": "1462300"
  },
  {
    "text": "consistently calculate in an efficient and liable way and then simply take note",
    "start": "1462300",
    "end": "1469020"
  },
  {
    "text": "of which attributes stay constant which ones don't change when you send the same",
    "start": "1469020",
    "end": "1474510"
  },
  {
    "text": "payload a few times for example if the",
    "start": "1474510",
    "end": "1479880"
  },
  {
    "text": "application gives you a a 200 ok every time you send a request to it until you",
    "start": "1479880",
    "end": "1487320"
  },
  {
    "text": "send a CERN payload and then it gives you a 500 error you know there's something interesting happening there",
    "start": "1487320",
    "end": "1492630"
  },
  {
    "text": "but we can go much more fine-grained than that we can even the work out the",
    "start": "1492630",
    "end": "1499710"
  },
  {
    "text": "scanner has found a vulnerability some sequel injection in a real application",
    "start": "1499710",
    "end": "1505169"
  },
  {
    "text": "where the only evidence that it found was that when you put a single quote in a single word vanished from the",
    "start": "1505169",
    "end": "1512400"
  },
  {
    "text": "applications spots we've made an API for burp suite to do this work for you so",
    "start": "1512400",
    "end": "1519990"
  },
  {
    "text": "you can simply feed this objects a list of responses from the application and",
    "start": "1519990",
    "end": "1526250"
  },
  {
    "text": "then and then call a function which will tell you which attributes of this",
    "start": "1526250",
    "end": "1532140"
  },
  {
    "text": "response haven't changed so basically which ones can be trusted what we're",
    "start": "1532140",
    "end": "1538590"
  },
  {
    "text": "absolutely not trying to do here is predict what effect a specific payload",
    "start": "1538590",
    "end": "1544919"
  },
  {
    "text": "will have on the application it this is simply saying what attributes of like",
    "start": "1544919",
    "end": "1552740"
  },
  {
    "text": "this is simply saying how can i how can I recognize which parts of the response",
    "start": "1552740",
    "end": "1558690"
  },
  {
    "text": "can be relied on and which parts just change randomly because they feel like it although the pro pairs that I've",
    "start": "1558690",
    "end": "1568140"
  },
  {
    "start": "1564000",
    "end": "1650000"
  },
  {
    "text": "showed you might look quite simple the way they're chosen and the way that they're sent to the application is",
    "start": "1568140",
    "end": "1574620"
  },
  {
    "text": "actually really really important so the most obvious problem is the applications",
    "start": "1574620",
    "end": "1582020"
  },
  {
    "text": "responses contain random content and as I've mentioned we can deal with this by repeating Propst but if you simply",
    "start": "1582020",
    "end": "1590250"
  },
  {
    "text": "alternate between your two points then you'll get completely destroyed by",
    "start": "1590250",
    "end": "1595830"
  },
  {
    "text": "certain applications which alternate in the response they give you because you seeing that your probe is causing the",
    "start": "1595830",
    "end": "1601890"
  },
  {
    "text": "response to change when it's actually the order that you're sending the opponent so in order to fix that you",
    "start": "1601890",
    "end": "1609660"
  },
  {
    "text": "need to shuffle the order that you send suppose it don't just automate some",
    "start": "1609660",
    "end": "1614970"
  },
  {
    "text": "particularly fiendish applications have deterministic random context so on the",
    "start": "1614970",
    "end": "1621720"
  },
  {
    "text": "live site that I found used the content of the query string as a seed to a",
    "start": "1621720",
    "end": "1627810"
  },
  {
    "text": "random number generator which are used to pick which testimonial it would show",
    "start": "1627810",
    "end": "1633060"
  },
  {
    "text": "you so if you send a single quote over and over you'll get the same testimonial",
    "start": "1633060",
    "end": "1639090"
  },
  {
    "text": "every time and as soon as you escape that quote you get a different testimonial you go yes this is vulnerable to sequel injection or",
    "start": "1639090",
    "end": "1645060"
  },
  {
    "text": "something and it's actually not one ball to anything in order to fix a issue we",
    "start": "1645060",
    "end": "1653250"
  },
  {
    "start": "1650000",
    "end": "1677000"
  },
  {
    "text": "need to take each item within the prepare and make cosmetic alterations to",
    "start": "1653250",
    "end": "1661080"
  },
  {
    "text": "it so if we send 7 over 0 + 7 / 0 0 that should have the same effect on any",
    "start": "1661080",
    "end": "1668340"
  },
  {
    "text": "vulnerable server but it will have a completely different effect when it's",
    "start": "1668340",
    "end": "1673410"
  },
  {
    "text": "fed into a random number generator ok that's enough about how the scanner",
    "start": "1673410",
    "end": "1680040"
  },
  {
    "start": "1677000",
    "end": "1771000"
  },
  {
    "text": "works in theory what we really want to hear is what happens when I run it on 2,000 systems so first I ran it on some",
    "start": "1680040",
    "end": "1688320"
  },
  {
    "text": "hand coded labs on some intentionally vulnerable applications and some old",
    "start": "1688320",
    "end": "1694260"
  },
  {
    "text": "applications but I knew were vulnerable and I'm running on pen tests where it got some some quite cool results but I",
    "start": "1694260",
    "end": "1700530"
  },
  {
    "text": "have a relatively limited supply of pen tests and I needed to run it on more sites so I thought ok I'm going to run",
    "start": "1700530",
    "end": "1708780"
  },
  {
    "text": "this on every single site that has a bug bounty program that doesn't say that you",
    "start": "1708780",
    "end": "1713820"
  },
  {
    "text": "can't scan them and this is great because I was able to find a couple of",
    "start": "1713820",
    "end": "1720810"
  },
  {
    "text": "thousand such sites the only and it has",
    "start": "1720810",
    "end": "1725970"
  },
  {
    "text": "a side benefit in that you might actually get paid the only catch",
    "start": "1725970",
    "end": "1731420"
  },
  {
    "text": "is that the term black box doesn't really do this justice because if you're",
    "start": "1731420",
    "end": "1736670"
  },
  {
    "text": "running your scanner on two thousand sites and looking into the and looking into the results you don't really have",
    "start": "1736670",
    "end": "1743120"
  },
  {
    "text": "time to get familiar with any given site in any depth so you have no idea what",
    "start": "1743120",
    "end": "1749780"
  },
  {
    "text": "technologies that this application is running on whether you're getting serve stuff from a server farm or an",
    "start": "1749780",
    "end": "1756500"
  },
  {
    "text": "individual server or whether there's a web application firewall in the way just tampering with everything you do you",
    "start": "1756500",
    "end": "1763760"
  },
  {
    "text": "have no idea so you're going into everything completely blind which is something to watch out for it and try",
    "start": "1763760",
    "end": "1769730"
  },
  {
    "text": "and replicate this for reasons of politeness basically to avoid flooding",
    "start": "1769730",
    "end": "1776900"
  },
  {
    "start": "1771000",
    "end": "1839000"
  },
  {
    "text": "these people from traffic and then making them say that please don't automatically scan us I needed to to",
    "start": "1776900",
    "end": "1784550"
  },
  {
    "text": "throttle the scanner to send one request per three seconds per hostname so that",
    "start": "1784550",
    "end": "1790430"
  },
  {
    "text": "book could send a thousand requests per second perhaps but each individual",
    "start": "1790430",
    "end": "1795770"
  },
  {
    "text": "server would only get one request per three seconds so I've made and I've made",
    "start": "1795770",
    "end": "1802190"
  },
  {
    "text": "an open-source extension called distribute damage which will do that but",
    "start": "1802190",
    "end": "1808910"
  },
  {
    "text": "I the point of this of this extension was to be polite but what I notice is",
    "start": "1808910",
    "end": "1816020"
  },
  {
    "text": "that if you use this we back fast powered scanner with no other scanner",
    "start": "1816020",
    "end": "1821270"
  },
  {
    "text": "checks turned on then from the server's point of view you're sending a tiny number of quite innocuous looking",
    "start": "1821270",
    "end": "1827870"
  },
  {
    "text": "payloads really slowly so if you're on a red team and you're trying to remain",
    "start": "1827870",
    "end": "1834850"
  },
  {
    "text": "undetected this combo might come in quite useful okay now I'm going to look",
    "start": "1834850",
    "end": "1842600"
  },
  {
    "start": "1839000",
    "end": "1917000"
  },
  {
    "text": "through some results that we got from the scanning it might help to think of",
    "start": "1842600",
    "end": "1849200"
  },
  {
    "text": "this scanner I don't think of it as a scanner think of it as like a highly enthusiastic rookie security tester so",
    "start": "1849200",
    "end": "1857600"
  },
  {
    "text": "if you give them a well known vulnerability with no filters then there",
    "start": "1857600",
    "end": "1864230"
  },
  {
    "text": "will identify why exactly what's happening and I'll just tell you and that will be that so this is a real report from a live web",
    "start": "1864230",
    "end": "1872270"
  },
  {
    "text": "site that was running WordPress and had",
    "start": "1872270",
    "end": "1877370"
  },
  {
    "text": "a sequel injection in the user agent and I have a glance we can tell exactly",
    "start": "1877370",
    "end": "1885080"
  },
  {
    "text": "what's going on right and that's cool it's called or we can format in a really",
    "start": "1885080",
    "end": "1892370"
  },
  {
    "text": "efficient way because we're only sending like two requests to the vast majority",
    "start": "1892370",
    "end": "1898550"
  },
  {
    "text": "of inputs that we've still found something that's quite specific by following up automatically but aside",
    "start": "1898550",
    "end": "1906320"
  },
  {
    "text": "from that it's it's no better than any other scanner if you point your scanner",
    "start": "1906320",
    "end": "1911330"
  },
  {
    "text": "at this input it will say like 300 requests but it will find this relative",
    "start": "1911330",
    "end": "1916870"
  },
  {
    "text": "the strength of this intone is that if if you point them as something trickier",
    "start": "1916870",
    "end": "1922870"
  },
  {
    "start": "1917000",
    "end": "1997000"
  },
  {
    "text": "they will tell you I found something interesting can you help me out this was the first",
    "start": "1922870",
    "end": "1930110"
  },
  {
    "text": "critical vulnerability that this kind of found would anyone like to take a guess",
    "start": "1930110",
    "end": "1935750"
  },
  {
    "text": "as to what it is no okay this is PHP",
    "start": "1935750",
    "end": "1942860"
  },
  {
    "text": "code injection and the application is filtering out prevents this its blind",
    "start": "1942860",
    "end": "1949370"
  },
  {
    "text": "spot number two and because they're being filtered out the scanner wasn't able to inject any function calls but it",
    "start": "1949370",
    "end": "1957650"
  },
  {
    "text": "pointed this out to me and within it about half an hour I'd figured out what was happening I had a show on the box so",
    "start": "1957650",
    "end": "1964340"
  },
  {
    "text": "that was nice I think that and this was on a site that had been heavily tested",
    "start": "1964340",
    "end": "1971090"
  },
  {
    "text": "by manual testers but I think that they missed this issue is that this input was",
    "start": "1971090",
    "end": "1977870"
  },
  {
    "text": "in the past and a test that probably wouldn't think probably wouldn't expect",
    "start": "1977870",
    "end": "1984410"
  },
  {
    "text": "an application to be calling eval on the part right it's a little bit of a weird thing it's the sort of thing that you",
    "start": "1984410",
    "end": "1990980"
  },
  {
    "text": "expect something from an Internet of Things device farther than a household name website",
    "start": "1990980",
    "end": "1997480"
  },
  {
    "start": "1997000",
    "end": "2083000"
  },
  {
    "text": "the scanner found a lot of regex injection so it's worth being able to",
    "start": "1998110",
    "end": "2004180"
  },
  {
    "text": "recognize us sometimes it's really obvious you get a helpful error message",
    "start": "2004180",
    "end": "2009750"
  },
  {
    "text": "most of the time you can recognize it",
    "start": "2009750",
    "end": "2015550"
  },
  {
    "text": "because the application identifies because the scanner identifies how it handles back references if you send a",
    "start": "2015550",
    "end": "2022570"
  },
  {
    "text": "string with slashes Eoin and your hand in the response it's been expanded to",
    "start": "2022570",
    "end": "2028900"
  },
  {
    "text": "something you can be reasonably sure that that's vulnerable to regex injection the the pro pear scanner will",
    "start": "2028900",
    "end": "2038160"
  },
  {
    "text": "we will normally classify this as backslash because it identifies there",
    "start": "2038160",
    "end": "2044380"
  },
  {
    "text": "aren't any strings that you can break out of but if you put a training backslash that escapes something by the",
    "start": "2044380",
    "end": "2053649"
  },
  {
    "text": "end of the regex which causes a syntax error and then if you escape that then",
    "start": "2053650",
    "end": "2059320"
  },
  {
    "text": "it stops causing such things axilla and",
    "start": "2059320",
    "end": "2063660"
  },
  {
    "text": "most of the time the regex injection isn't very interesting the best that it",
    "start": "2064440",
    "end": "2072940"
  },
  {
    "text": "can be used for is a regular expression denial of service attack but",
    "start": "2072940",
    "end": "2079780"
  },
  {
    "text": "occasionally it's more interesting than that as we'll see in a little bit sometimes the scanner will find false",
    "start": "2079780",
    "end": "2087340"
  },
  {
    "start": "2083000",
    "end": "2153000"
  },
  {
    "text": "positives so here it's trying to find function injection by sending the name",
    "start": "2087340",
    "end": "2092860"
  },
  {
    "text": "of a real function and the name of them of a made-up function and what it's",
    "start": "2092860",
    "end": "2098590"
  },
  {
    "text": "doing is searching the Google code codebase so of course real functions are",
    "start": "2098590",
    "end": "2105220"
  },
  {
    "text": "going to be found in large numbers and invalid functions are not going to be found so it thinks this is vulnerable to",
    "start": "2105220",
    "end": "2110680"
  },
  {
    "text": "function to function hijacking however we can fix this with a tiny tweak all we",
    "start": "2110680",
    "end": "2119890"
  },
  {
    "text": "need to all we need to do to prevent this from ever happening again is to",
    "start": "2119890",
    "end": "2126550"
  },
  {
    "text": "send the name of a valid function that will give an ever when it's called with arbitrary",
    "start": "2126550",
    "end": "2132420"
  },
  {
    "text": "arguments which is what happens in function hijacking so by simply sending",
    "start": "2132420",
    "end": "2137430"
  },
  {
    "text": "malloc we'll get an error back if the application is vulnerable to function",
    "start": "2137430",
    "end": "2143069"
  },
  {
    "text": "hijacking but if we're searching a code base will probably get lots of hits from malloc and we won't can we won't",
    "start": "2143069",
    "end": "2149430"
  },
  {
    "text": "erroneously conclude that it's vulnerable other times the scanner will find",
    "start": "2149430",
    "end": "2156890"
  },
  {
    "start": "2153000",
    "end": "2279000"
  },
  {
    "text": "intelligence things that aren't vulnerabilities but are really quite useful to note so here by injecting a",
    "start": "2156890",
    "end": "2165450"
  },
  {
    "text": "valid inline comment and an invalid inline comment the scanner thought that",
    "start": "2165450",
    "end": "2170640"
  },
  {
    "text": "it found maybe some code injection and I investigated and the normal code",
    "start": "2170640",
    "end": "2176039"
  },
  {
    "text": "injection false positives follow-ups didn't get me anywhere and then I",
    "start": "2176039",
    "end": "2181440"
  },
  {
    "text": "noticed that the application responded to a valid HTML comment the same way as a valid inline comment okay that's quite",
    "start": "2181440",
    "end": "2192269"
  },
  {
    "text": "weird maybe this is vulnerable to some kind of server-side template injection",
    "start": "2192269",
    "end": "2197609"
  },
  {
    "text": "because I've seen the sort of behavior with server-side templating gesture and",
    "start": "2197609",
    "end": "2203490"
  },
  {
    "text": "then Gareth Hayes noticed it responds to an input with a valid HTML tag in a",
    "start": "2203490",
    "end": "2209549"
  },
  {
    "text": "different way to one with a invalid tag which makes it pretty obvious what's",
    "start": "2209549",
    "end": "2215009"
  },
  {
    "text": "actually happening here which is that there's a Web Application Firewall and it's rewriting requests to remove",
    "start": "2215009",
    "end": "2221490"
  },
  {
    "text": "comments and to remove valid HTML tags so it's not a vulnerability but it is",
    "start": "2221490",
    "end": "2230039"
  },
  {
    "text": "potentially quite useful to know because we know for example that normal scanning",
    "start": "2230039",
    "end": "2235799"
  },
  {
    "text": "on that application probably won't find anything and we can also use the request rewriting to the bypass web browsers",
    "start": "2235799",
    "end": "2243420"
  },
  {
    "text": "cross-site scripting filters which might come in handy so rather than changing a back slash",
    "start": "2243420",
    "end": "2252960"
  },
  {
    "text": "powered scanner to filter these out what I've made it what you can make it do is add a follow-up payload that will",
    "start": "2252960",
    "end": "2261089"
  },
  {
    "text": "basically recognize and classify this so if it finds something where a valid inline comment",
    "start": "2261089",
    "end": "2267660"
  },
  {
    "text": "works then it will try a HTML comment and then and then it can say this is",
    "start": "2267660",
    "end": "2272700"
  },
  {
    "text": "probably a Web Application Firewall do what you will without information a lot",
    "start": "2272700",
    "end": "2280470"
  },
  {
    "start": "2279000",
    "end": "2325000"
  },
  {
    "text": "of the time the scanner will find issues that will drive you insane",
    "start": "2280470",
    "end": "2285660"
  },
  {
    "text": "this is a problem with the scanner that finds research-grade vulnerabilities research-grade",
    "start": "2285660",
    "end": "2291089"
  },
  {
    "text": "doesn't mean it's easy to figure out what's going on or to exploit it so here",
    "start": "2291089",
    "end": "2297359"
  },
  {
    "text": "it found some really shady behavior and after maybe half a day of magic manually",
    "start": "2297359",
    "end": "2303810"
  },
  {
    "text": "investigating is one input all I found was that if I unicode escaped an input I",
    "start": "2303810",
    "end": "2309960"
  },
  {
    "text": "got the same result as if I didn't unicode escaped that input great if I",
    "start": "2309960",
    "end": "2316560"
  },
  {
    "text": "had to take a wild guess I would say that that was injection into Apache Solr JSON API but I have no idea really and",
    "start": "2316560",
    "end": "2324510"
  },
  {
    "text": "that will happen quite often and sometimes sometimes the scanner will",
    "start": "2324510",
    "end": "2331980"
  },
  {
    "start": "2325000",
    "end": "2578000"
  },
  {
    "text": "really take you for a write so this is a site of Tesla's that used to be within",
    "start": "2331980",
    "end": "2337770"
  },
  {
    "text": "the scope of their bug bounty program and what the scanner found I'm not going",
    "start": "2337770",
    "end": "2348119"
  },
  {
    "text": "to demonstrate scanning it because it is out of scope now but so you can see here",
    "start": "2348119",
    "end": "2354869"
  },
  {
    "text": "we've got something that says document ID equals seven one five two I want to",
    "start": "2354869",
    "end": "2360150"
  },
  {
    "text": "and we've got other oh thanks for coming",
    "start": "2360150",
    "end": "2367020"
  },
  {
    "text": "out",
    "start": "2367020",
    "end": "2369320"
  },
  {
    "text": "okie-doke so we've got small enough or something that says document ID equals",
    "start": "2373850",
    "end": "2379010"
  },
  {
    "text": "75 1 2 let me just show you that's all the actual webpage looks like and if we",
    "start": "2379010",
    "end": "2386030"
  },
  {
    "text": "do divide by 0 here then the response then we get a 500 internal server right",
    "start": "2386030",
    "end": "2392540"
  },
  {
    "text": "and if I do divided by 1 then we get a",
    "start": "2392540",
    "end": "2398960"
  },
  {
    "text": "200 ok so it looks like they might be calling eval on this simple but the",
    "start": "2398960",
    "end": "2405170"
  },
  {
    "text": "obvious follow ups don't work like if we do what / 1 / what / 1 - 1",
    "start": "2405170",
    "end": "2411410"
  },
  {
    "text": "it still works which we would expect to fail right rather because 1 minus 1 is 0",
    "start": "2411410",
    "end": "2417080"
  },
  {
    "text": "it should be divided by 0 but it's not working that's quite wet and I also found if I",
    "start": "2417080",
    "end": "2422600"
  },
  {
    "text": "do minus 0 we get a syntax error and if I do minus 1 then it works pretty",
    "start": "2422600",
    "end": "2430730"
  },
  {
    "text": "strange and then I found if I do minus 12 then it works and if I do - 13 and I",
    "start": "2430730",
    "end": "2442820"
  },
  {
    "text": "again ever can anyone tell me what's happening here you lead it another clue",
    "start": "2442820",
    "end": "2449740"
  },
  {
    "text": "okay yes exactly so let me just show you that show you",
    "start": "2449740",
    "end": "2455450"
  },
  {
    "text": "that for the rest of you let me change this to / 12 and then / 31 right and",
    "start": "2455450",
    "end": "2463510"
  },
  {
    "text": "then / 32 it's pausing this input as a date there's nothing evaluation going on",
    "start": "2463510",
    "end": "2470690"
  },
  {
    "text": "whatsoever and you probably just waited two days on that oh well",
    "start": "2470690",
    "end": "2476740"
  },
  {
    "text": "what here is a version of PHP myadmin which is missing lady one patch and it's",
    "start": "2478880",
    "end": "2487430"
  },
  {
    "text": "running on a version of PHP that's slightly out of date and here you can as",
    "start": "2487430",
    "end": "2498140"
  },
  {
    "text": "a human just just by looking at this we can tell that it's vulnerable to regex",
    "start": "2498140",
    "end": "2504320"
  },
  {
    "text": "injection and if I scan this then you'll see the",
    "start": "2504320",
    "end": "2510810"
  },
  {
    "text": "scanner will say that this is vulnerable to regex injection so it will notice",
    "start": "2510810",
    "end": "2517650"
  },
  {
    "text": "that this slash and zero gets converted into the string cake which is a pretty",
    "start": "2517650",
    "end": "2523830"
  },
  {
    "text": "good sign of vertex injection so PHP has",
    "start": "2523830",
    "end": "2532680"
  },
  {
    "text": "this fantastic feature where I can specify this /e flag and how this works",
    "start": "2532680",
    "end": "2543210"
  },
  {
    "text": "it's quite quite unreliable and that means that whatever I type in the row",
    "start": "2543210",
    "end": "2550170"
  },
  {
    "text": "space hood box will be evaluated so there we've got vegek injection and we",
    "start": "2550170",
    "end": "2556350"
  },
  {
    "text": "pretty easily turned it into something well we can execute arbitrary shell commands so regex injection sometimes",
    "start": "2556350",
    "end": "2563460"
  },
  {
    "text": "it's rubbish other times it's quite good",
    "start": "2563460",
    "end": "2568160"
  },
  {
    "start": "2578000",
    "end": "2637000"
  },
  {
    "text": "okay what else can we do we can identify when inputs can be",
    "start": "2578570",
    "end": "2584060"
  },
  {
    "text": "enumerated so this is something that I haven't implemented in this version of the scanner but I verified that it can",
    "start": "2584060",
    "end": "2591320"
  },
  {
    "text": "be done and it should be coming soon so if we find that as a scanner that if we",
    "start": "2591320",
    "end": "2598340"
  },
  {
    "text": "increment this ID number we get unique the sponsors every time that we",
    "start": "2598340",
    "end": "2604160"
  },
  {
    "text": "increment it then that tells us okay we've got some way of getting some kind of unique data but it might be something",
    "start": "2604160",
    "end": "2611360"
  },
  {
    "text": "really boring like a calendar that's all and we're incrementing the date by adding a large number to these inputs",
    "start": "2611360",
    "end": "2619010"
  },
  {
    "text": "and verifying that that they were responsibly get match we can filter out",
    "start": "2619010",
    "end": "2625060"
  },
  {
    "text": "infinite series like dates and timestamps and we can use this to find",
    "start": "2625060",
    "end": "2631400"
  },
  {
    "text": "anything that can be enumerated really which can be quite handy we can also use",
    "start": "2631400",
    "end": "2641000"
  },
  {
    "text": "the scanner use this response to different technology for cold start",
    "start": "2641000",
    "end": "2646250"
  },
  {
    "text": "brute-force attacks like what let me in was doing so getting user names when you",
    "start": "2646250",
    "end": "2654440"
  },
  {
    "text": "don't know a single valid user name so you can't simply fingerprint the response of the application to a valid",
    "start": "2654440",
    "end": "2661580"
  },
  {
    "text": "user name before you start and similarly you can get files and folder names and parameter names are better than current",
    "start": "2661580",
    "end": "2669230"
  },
  {
    "text": "techcamp and you can potentially use this to fish for gadgets when you've got",
    "start": "2669230",
    "end": "2676400"
  },
  {
    "text": "an object deserialization vulnerability I haven't tried this out",
    "start": "2676400",
    "end": "2682370"
  },
  {
    "text": "yet but I think in theory you could use this to build an exploit to get your",
    "start": "2682370",
    "end": "2688160"
  },
  {
    "text": "code execution it's an arbitrary object of civilization from a purely blackbox",
    "start": "2688160",
    "end": "2693560"
  },
  {
    "text": "point of view with no source code access I'm not 100% sure if this will work but",
    "start": "2693560",
    "end": "2700040"
  },
  {
    "text": "it would be really cool if it does so I am planning on trying it out okay you",
    "start": "2700040",
    "end": "2705800"
  },
  {
    "text": "can grab the source codes online I've also just released a white paper which has",
    "start": "2705800",
    "end": "2712210"
  },
  {
    "text": "it's getting more examples in it so that might be helpful with processing these scanners results if you just want to",
    "start": "2712210",
    "end": "2720130"
  },
  {
    "text": "install this tool then it's in the burp app store and if you don't have that as",
    "start": "2720130",
    "end": "2725320"
  },
  {
    "text": "I mentioned it is open source so you can port it to work on that if you feel like it let me just say this is not one of",
    "start": "2725320",
    "end": "2733300"
  },
  {
    "text": "those security tools but gets released in a presentation at a conference and then never update it it has a huge",
    "start": "2733300",
    "end": "2740950"
  },
  {
    "text": "potential and I'm planning on making plenty of improvements to it over the next few months and potentially the next",
    "start": "2740950",
    "end": "2748180"
  },
  {
    "text": "few years the three key things to remember that scanners can find",
    "start": "2748180",
    "end": "2754960"
  },
  {
    "text": "research-grade vulnerabilities particularly if they focus on enhancing rather than replacing the pen tester and",
    "start": "2754960",
    "end": "2763089"
  },
  {
    "text": "this is just the beginning I'm going to take five minutes of questions now if",
    "start": "2763089",
    "end": "2769780"
  },
  {
    "text": "you've got it any more after that you can speak to me out the back or send me an email don't forget to follow me on",
    "start": "2769780",
    "end": "2776680"
  },
  {
    "text": "Twitter thank you for listening [Applause]",
    "start": "2776680",
    "end": "2786099"
  }
]