[
  {
    "text": "morning everyone i'd like to thank everyone for coming i know it's uh early in the morning getting the first session",
    "start": "31840",
    "end": "38239"
  },
  {
    "text": "but uh don't worry i'm working on two hours of sleep as well so we're in this together",
    "start": "38239",
    "end": "44559"
  },
  {
    "text": "this morning we're going to talk about file format fuzzing obviously we'll get into it in a",
    "start": "44559",
    "end": "49600"
  },
  {
    "text": "second so you'll have a much better understanding and background of exactly what it is that we're going to discuss",
    "start": "49600",
    "end": "55360"
  },
  {
    "text": "who are we my name is michael sutton i'm the director of idefense labs this is adam green he's a senior security",
    "start": "55360",
    "end": "61920"
  },
  {
    "text": "researcher with light defense labs as you may know we were acquired last week by verisign so i'm now a proud",
    "start": "61920",
    "end": "68960"
  },
  {
    "text": "member of that team as well what are you going to get out of this presentation we're going to discuss",
    "start": "68960",
    "end": "75200"
  },
  {
    "text": "what file format vulnerabilities are why they're concerned why they've become",
    "start": "75200",
    "end": "80799"
  },
  {
    "text": "an emerging issue for us you know what risks they entail but the meat of the presentation is to discuss some research",
    "start": "80799",
    "end": "87600"
  },
  {
    "text": "that we've done to automate the discovery of those sorts of vulnerabilities we're going to discuss some tools that we've created to help",
    "start": "87600",
    "end": "94479"
  },
  {
    "text": "with automation and we'll actually release those today with that i will turn it over to adam",
    "start": "94479",
    "end": "103920"
  },
  {
    "text": "okay so there's been a lot of research into fuzzing in general uh most of it's been focused on like fuzzing",
    "start": "106640",
    "end": "113040"
  },
  {
    "text": "network-based protocols um and really if you think about it file format is just the same as a protocol",
    "start": "113040",
    "end": "119119"
  },
  {
    "text": "that you would see in network traffic um it's just a standardized means of",
    "start": "119119",
    "end": "124159"
  },
  {
    "text": "communication just like anything else um so when you're fuzzing of course you're trying to create",
    "start": "124159",
    "end": "130560"
  },
  {
    "text": "non-standard versions of the files that you're dealing with and you're testing whether the",
    "start": "130560",
    "end": "135760"
  },
  {
    "text": "applications are going to be able to gracefully handle malformed files see if they're going to be able to you",
    "start": "135760",
    "end": "141840"
  },
  {
    "text": "know catch exceptions you know basically just do the right thing in all cases whether it be you know bomb out on",
    "start": "141840",
    "end": "148720"
  },
  {
    "text": "a messed up file try to repair corrupted file things like that and we're interested in",
    "start": "148720",
    "end": "154800"
  },
  {
    "text": "just what happens when an application doesn't do this so obviously the security things you're",
    "start": "154800",
    "end": "160000"
  },
  {
    "text": "looking at buffer overflows and things like that um so if you look at like the the",
    "start": "160000",
    "end": "165840"
  },
  {
    "text": "historical side of it like there's really been a pretty significant increase",
    "start": "165840",
    "end": "171440"
  },
  {
    "text": "in like the recent years of just the vulnerabilities that we're seeing come out i mean here's no by no",
    "start": "171440",
    "end": "178239"
  },
  {
    "text": "means an exhausted list and i mean if you look at for anyone who follows all the microsoft",
    "start": "178239",
    "end": "183440"
  },
  {
    "text": "security advisories the last patch tuesday two out of the three vulnerabilities were actually",
    "start": "183440",
    "end": "189040"
  },
  {
    "text": "in file formats they were image formats um and really the jpeg gdi plus bug was what started",
    "start": "189040",
    "end": "196400"
  },
  {
    "text": "kind of raising our interest in this field because that it was really a big deal got a lot of attention",
    "start": "196400",
    "end": "202879"
  },
  {
    "text": "and it was an interesting vulnerability so if you look at mso4041 this was something that actually came",
    "start": "202879",
    "end": "209360"
  },
  {
    "text": "through the eye defense vulnerability contributor program so we worked with microsoft to get this",
    "start": "209360",
    "end": "214720"
  },
  {
    "text": "fixed and it was really as simple as modifying four bytes in the file",
    "start": "214720",
    "end": "220640"
  },
  {
    "text": "the fff ffff pretty much just caused it to do a really long copy",
    "start": "220640",
    "end": "227360"
  },
  {
    "text": "of a string onto the stack so you could see how that would be a problem",
    "start": "227360",
    "end": "233840"
  },
  {
    "text": "here if you load it up in ollie you'll see eip is overwritten that's fairly trivial to writing x-play for",
    "start": "234000",
    "end": "241840"
  },
  {
    "text": "um so thinking about what's the risk for file format vulnerabilities um certainly it's not the same thing as",
    "start": "241840",
    "end": "249360"
  },
  {
    "text": "you know network demon having a vulnerability in it where the demon's always there sitting waiting and you can attack it at any time um and this you're",
    "start": "249360",
    "end": "256799"
  },
  {
    "text": "really targeting users uneducated users people who you know have been taught you know don't",
    "start": "256799",
    "end": "263280"
  },
  {
    "text": "launch an executable um don't trust you know batch files com",
    "start": "263280",
    "end": "268320"
  },
  {
    "text": "files things like that but haven't necessarily been taught don't open an image file",
    "start": "268320",
    "end": "275199"
  },
  {
    "text": "so you're targeting those kinds of people which really is i mean mostly everyone who's just an end user maybe not",
    "start": "275199",
    "end": "281840"
  },
  {
    "text": "everyone in this room but in general most people who are using a computer i just wanted to point out",
    "start": "281840",
    "end": "286960"
  },
  {
    "text": "somebody was asking about the screens unfortunately we've only got the slides over here because there's some concern we got to switch some laptops and we're having",
    "start": "286960",
    "end": "293360"
  },
  {
    "text": "some problems so unfortunately you're gonna have to look at the slides over here or they're in your book we haven't actually changed them from the book",
    "start": "293360",
    "end": "300880"
  },
  {
    "text": "uh and also we're looking at like default configurations especially on windows um windows is designed to be really",
    "start": "300880",
    "end": "307440"
  },
  {
    "text": "convenient um and that leads to you know a lot of things",
    "start": "307440",
    "end": "312560"
  },
  {
    "text": "can be launched automatically from the web browser there's activex of course and there's even just some things that",
    "start": "312560",
    "end": "318400"
  },
  {
    "text": "the like microsoft internet explorer will just go ahead and launch and process without even asking you",
    "start": "318400",
    "end": "325199"
  },
  {
    "text": "and of course those images which are always going to be rendered in the web browser whether you want them or not",
    "start": "325199",
    "end": "330400"
  },
  {
    "text": "um and looking at like layered security it's very popular to you know have",
    "start": "330400",
    "end": "335520"
  },
  {
    "text": "signatures and and filters for you know network attacks it's very common to filter uh email content things like that",
    "start": "335520",
    "end": "342479"
  },
  {
    "text": "but you're not always filtering things that are just going to be rendered in a web browser so that's another problem",
    "start": "342479",
    "end": "349039"
  },
  {
    "text": "where you can have some sort of targeted owning through like a web browser vulnerability or something like that",
    "start": "349039",
    "end": "355680"
  },
  {
    "text": "and now talking about identifying targets go back over to mike so an interesting",
    "start": "355680",
    "end": "361840"
  },
  {
    "text": "difference in a file format vulnerability is that the vulnerability does not lie in the file itself whether",
    "start": "361840",
    "end": "367199"
  },
  {
    "text": "it's a word document a pdf jpeg whatever the case may be the vulnerability lies within the application which interprets",
    "start": "367199",
    "end": "373919"
  },
  {
    "text": "the file so when you're doing vulnerability research there's two pieces to the equation when you're",
    "start": "373919",
    "end": "379919"
  },
  {
    "text": "searching for a target number one you want to pick a file type to target and you're typically going to want to pick",
    "start": "379919",
    "end": "386000"
  },
  {
    "text": "something that is commonly trusted commonly traded so image file formats fall into that things like jpegs gifs",
    "start": "386000",
    "end": "393199"
  },
  {
    "text": "you know i mean there's only it's only so realistic to block a file format like that you know they're on the web what",
    "start": "393199",
    "end": "398800"
  },
  {
    "text": "are you going to do block the internet from your users things like formatted documents",
    "start": "398800",
    "end": "404160"
  },
  {
    "text": "word documents pdfs rich text format and then media files video and audio files",
    "start": "404160",
    "end": "410720"
  },
  {
    "text": "so that's the one side of the equation you can divide those into both binary and ascii",
    "start": "410720",
    "end": "416319"
  },
  {
    "text": "the tools that we'll discuss later on sort of address both of those binary files are you know binary files",
    "start": "416319",
    "end": "422400"
  },
  {
    "text": "we showed you sort of that ms word vulnerability that was an issue in a",
    "start": "422400",
    "end": "427520"
  },
  {
    "text": "binary file on the flip side we've also done some research on ascii file formats typically things like xml",
    "start": "427520",
    "end": "434080"
  },
  {
    "text": "ini files things where you have sort of a listing of name value pairs and what",
    "start": "434080",
    "end": "439120"
  },
  {
    "text": "we found typically in the file format vulnerabilities on the ascii side of the house is it's",
    "start": "439120",
    "end": "444400"
  },
  {
    "text": "the value in the name value pair is allocated a specific amount of memory",
    "start": "444400",
    "end": "450160"
  },
  {
    "text": "give it give it too much of a value and it'll overflow and you get a stack overflow but so we divided the file",
    "start": "450160",
    "end": "455919"
  },
  {
    "text": "types into those two targets binary and ascii but then again there's a second part of the equation",
    "start": "455919",
    "end": "461680"
  },
  {
    "text": "the vulnerability does not lie in the file it lies in the application so you also have to select the application",
    "start": "461680",
    "end": "467360"
  },
  {
    "text": "that's going to launch that file and on the windows side of the house you",
    "start": "467360",
    "end": "472639"
  },
  {
    "text": "know windows very user-friendly operating system it's designed so that you know you can have a jpeg file and it",
    "start": "472639",
    "end": "478879"
  },
  {
    "text": "has a default application that works with it you know jpeg for example uh",
    "start": "478879",
    "end": "484000"
  },
  {
    "text": "maybe it's internet explorer or it's a picture and fax viewer whatever the case may be",
    "start": "484000",
    "end": "489680"
  },
  {
    "text": "so typically if you're going to look for a target and you want something that's going to be sort of",
    "start": "489680",
    "end": "494960"
  },
  {
    "text": "you know higher risk target you want to target that default application that handles a particular file type so how do",
    "start": "494960",
    "end": "501360"
  },
  {
    "text": "you figure that out how do you determine which application is associated with a particular file type there's really two",
    "start": "501360",
    "end": "507360"
  },
  {
    "text": "ways within the windows side of things just for for going forward sort of i've handled the",
    "start": "507360",
    "end": "514240"
  },
  {
    "text": "windows side of the research and adam's handled the unix side so when we get into the tools it'll be divided that",
    "start": "514240",
    "end": "520640"
  },
  {
    "text": "way as well so how do you figure it out you know within explorer very simple",
    "start": "520640",
    "end": "525760"
  },
  {
    "text": "this actually it won't tell you everything we found certain file types where the associations were not actually",
    "start": "525760",
    "end": "531279"
  },
  {
    "text": "listed in here so this is just one way to do it you know just go and explore do tools folder options in this case we're",
    "start": "531279",
    "end": "538000"
  },
  {
    "text": "looking at a jpeg you know you drill down go into the advanced settings windows allows you to have separate",
    "start": "538000",
    "end": "543279"
  },
  {
    "text": "actions for a particular file in this case open and print to drill down into that and",
    "start": "543279",
    "end": "550240"
  },
  {
    "text": "what we're looking for here is you'll see it says application used to perform action think of this as a command line how to",
    "start": "550240",
    "end": "557839"
  },
  {
    "text": "launch this file in this application and that's really important for us because we were we're trying to build tools to",
    "start": "557839",
    "end": "564320"
  },
  {
    "text": "automate continuously launching and killing this application so we need that information because it it'll tell you",
    "start": "564320",
    "end": "570800"
  },
  {
    "text": "the application to launch it any flags that may have to be passed to it and you know the path to the actual file and",
    "start": "570800",
    "end": "577440"
  },
  {
    "text": "windows can actually be really picky sometimes it'll certain things will be enclosed in quotes or won't be enclosed in quotes and we found that you know you",
    "start": "577440",
    "end": "584080"
  },
  {
    "text": "have to stick to what you find here so it's a general rule of thumb if you copy that",
    "start": "584080",
    "end": "589680"
  },
  {
    "text": "line that's what you want for automation purposes other place you can get that kind of",
    "start": "589680",
    "end": "594720"
  },
  {
    "text": "information is directly from the registry editor just follow up like regedit and same idea this actually is a",
    "start": "594720",
    "end": "601279"
  },
  {
    "text": "case it's one of the original vulnerabilities we found using our tools it was in a microsoft interactive training",
    "start": "601279",
    "end": "608320"
  },
  {
    "text": "and so that file association actually wasn't listed in explorer i don't know why some things aren't but you know we",
    "start": "608320",
    "end": "614800"
  },
  {
    "text": "had to look in the registry to actually find find it and you know in this case there's like a dash f flag so that was",
    "start": "614800",
    "end": "620720"
  },
  {
    "text": "important so and the file the percent one was enclosed in quote so that again was important because without that it",
    "start": "620720",
    "end": "626800"
  },
  {
    "text": "wouldn't launch properly i'll give it back to adam for the linux side of the house",
    "start": "626800",
    "end": "632560"
  },
  {
    "text": "okay so finding targets on linux is a little bit different than windows because you're not necessarily targeting",
    "start": "632560",
    "end": "638800"
  },
  {
    "text": "point-and-click things that are going to open um the most interesting target that",
    "start": "638800",
    "end": "643920"
  },
  {
    "text": "in my opinion on linux is some of the antivirus products be it open source ones like clam av",
    "start": "643920",
    "end": "651200"
  },
  {
    "text": "or any of the a lot of the commercial av companies actually have engines for",
    "start": "651200",
    "end": "656640"
  },
  {
    "text": "linux and i found them particularly interesting because you can actually use",
    "start": "656640",
    "end": "662880"
  },
  {
    "text": "one of our fathers locally and hammer away at it and if you find a vulnerability uh you can bet",
    "start": "662880",
    "end": "669600"
  },
  {
    "text": "not only that you know it's possible that you know all deployed versions of that engine including you know the",
    "start": "669600",
    "end": "675120"
  },
  {
    "text": "windows versions or whatever other versions are available will be vulnerable but also that",
    "start": "675120",
    "end": "681519"
  },
  {
    "text": "it's possible that it could be actually a remote vulnerability if it's if it's the same engine that they use for their",
    "start": "681519",
    "end": "687760"
  },
  {
    "text": "their gateway scanning if they have that sitting out there filtering email then you're able to trigger that",
    "start": "687760",
    "end": "692959"
  },
  {
    "text": "remotely so that was something that i found interesting and i think um for any of you who",
    "start": "692959",
    "end": "699200"
  },
  {
    "text": "i believe neil meta did and alex wheeler did the their i think they focused more on",
    "start": "699200",
    "end": "704800"
  },
  {
    "text": "reverse engineering but they focused on antivirus engines um media players like real player real",
    "start": "704800",
    "end": "711279"
  },
  {
    "text": "players pretty popular and that's another thing both real player and adobe acrobat if you're",
    "start": "711279",
    "end": "718000"
  },
  {
    "text": "targeting the linux versions of those you usually have like about a 50 50 chance if you find a vulnerability in",
    "start": "718000",
    "end": "724320"
  },
  {
    "text": "the linux version that it'll also be in the windows version some of the code is the same some of it isn't",
    "start": "724320",
    "end": "730399"
  },
  {
    "text": "so sometimes you get lucky sometimes you know uh web browsers of course image formats and stuff there's so many web browsers",
    "start": "730399",
    "end": "737680"
  },
  {
    "text": "out there mozilla firefox netscape opera all those so those can make for interesting",
    "start": "737680",
    "end": "743680"
  },
  {
    "text": "targets excuse me all right so when you're creating files",
    "start": "743680",
    "end": "748720"
  },
  {
    "text": "you look at what types of fields you typically find in a file of course you have integers in many",
    "start": "748720",
    "end": "754880"
  },
  {
    "text": "forms signed and unsigned bytes words d words and then when you're looking at",
    "start": "754880",
    "end": "760560"
  },
  {
    "text": "ascii aside from just you know plain text ascii when you're looking at ascii",
    "start": "760560",
    "end": "765839"
  },
  {
    "text": "within a binary file you'll find c style strings just null terminated ascii",
    "start": "765839",
    "end": "771360"
  },
  {
    "text": "strings things like xdr length tag strings which is basically just",
    "start": "771360",
    "end": "776880"
  },
  {
    "text": "a string and then somewhere either before it or after it it'll have a length tag",
    "start": "776880",
    "end": "782560"
  },
  {
    "text": "which will just describe the length of that string like for example in sun rpc it's just the ascii string it'll be padded out so",
    "start": "782560",
    "end": "789519"
  },
  {
    "text": "that it's a multiple of four bytes and then it'll have a four byte big nd in length pre-pended to it and you'll see",
    "start": "789519",
    "end": "795760"
  },
  {
    "text": "that a lot in a lot of the microsoft office formats not that exact thing it's probably little endian",
    "start": "795760",
    "end": "803839"
  },
  {
    "text": "and there's also one byte lengths two byte lengths things like that you'll notice it's usually fairly easy to spot",
    "start": "803839",
    "end": "811120"
  },
  {
    "text": "um so when you're going to be messing with these values you have to pick interesting values obviously",
    "start": "811120",
    "end": "816800"
  },
  {
    "text": "so some interesting values to choose negative numbers large numbers small",
    "start": "816800",
    "end": "822160"
  },
  {
    "text": "values like small values i believe one or two would trigger the",
    "start": "822160",
    "end": "829120"
  },
  {
    "text": "gdi plus vulnerability because it did something like a a malloc of the original value so for",
    "start": "829120",
    "end": "834959"
  },
  {
    "text": "example one and then a subtract two so it would wrap around and then copy that much into that",
    "start": "834959",
    "end": "840320"
  },
  {
    "text": "small malloc buffer then ascii strings are usually pretty easy to choose interesting values for",
    "start": "840320",
    "end": "847279"
  },
  {
    "text": "large strings and empty strings for just truly simple ascii strings and also if you're looking at length",
    "start": "847279",
    "end": "853440"
  },
  {
    "text": "tags you want to try lengths that don't accurately describe the string maybe a short length tag with",
    "start": "853440",
    "end": "860800"
  },
  {
    "text": "a long string or vice versa or you can just have an accurate length tag but just a really long length tag",
    "start": "860800",
    "end": "866800"
  },
  {
    "text": "and string and that's actually pretty effective there's been a whole bunch of vulnerabilities",
    "start": "866800",
    "end": "872160"
  },
  {
    "text": "and those are usually stack overflows which means they're usually pretty easy to do reliably",
    "start": "872160",
    "end": "877839"
  },
  {
    "text": "and of course strings with format specifiers for format string vulnerabilities and why those so interesting i just",
    "start": "877839",
    "end": "884720"
  },
  {
    "text": "kind of sum that up in a nutshell but obviously decrementing small integers can cause them to wrap around and you",
    "start": "884720",
    "end": "890639"
  },
  {
    "text": "have problems there multiplying adding and incrementing same deal",
    "start": "890639",
    "end": "895920"
  },
  {
    "text": "and just the inconsistent methods for determining the size can just cause a lot of problems depending on how",
    "start": "895920",
    "end": "901600"
  },
  {
    "text": "the logic is done uh internally in the program and the format string stuff is pretty obvious",
    "start": "901600",
    "end": "908240"
  },
  {
    "text": "so go back to mike here he'll discuss some of the methods that we looked at",
    "start": "908240",
    "end": "913680"
  },
  {
    "text": "so i always tend to think of vulnerability research as you have two primary",
    "start": "913680",
    "end": "918959"
  },
  {
    "text": "approaches to being able to do it what i refer to as the outside in that's where you're doing something like",
    "start": "918959",
    "end": "924720"
  },
  {
    "text": "fuzzing you don't do a lot of research on the on the actual file in this case",
    "start": "924720",
    "end": "930160"
  },
  {
    "text": "you're throwing everything but the kitchen sink at it it's not a surgical way of doing it not a",
    "start": "930160",
    "end": "936240"
  },
  {
    "text": "scientific way of doing it but it works the other side of the house is what i call the inside out method that's the",
    "start": "936240",
    "end": "942720"
  },
  {
    "text": "reverse engineering much more surgical requires a lot more work and research",
    "start": "942720",
    "end": "949440"
  },
  {
    "text": "and again it's just two different ways of doing it there's not a right and a wrong way we",
    "start": "949440",
    "end": "954880"
  },
  {
    "text": "feel that file format vulnerability discovery really lends itself to brute force fuzzing or what we'll get into we",
    "start": "954880",
    "end": "961759"
  },
  {
    "text": "call intelligent fuzzing just a smarter way of doing it so fortunately it lends itself to that and",
    "start": "961759",
    "end": "968480"
  },
  {
    "text": "the reason is because you can automate the discovery so you know start",
    "start": "968480",
    "end": "973600"
  },
  {
    "text": "something walk away and then come back and see what it's found what are some of the advantages of pure",
    "start": "973600",
    "end": "979279"
  },
  {
    "text": "brute force fuzzing when we say brute force we mean just pure bit flipping so take an entire file flip every bit give",
    "start": "979279",
    "end": "985440"
  },
  {
    "text": "it every combination in every location in that file launch it execute it and",
    "start": "985440",
    "end": "990639"
  },
  {
    "text": "see what happens watch for exceptions that's pure brute force fuzzing what's the advantage of that you don't need to",
    "start": "990639",
    "end": "996560"
  },
  {
    "text": "know anything about that file format you don't have to do any research i can take a jpeg and just flip every bit in that",
    "start": "996560",
    "end": "1002800"
  },
  {
    "text": "file launch it in explorer and see what happens so long as you can automate the",
    "start": "1002800",
    "end": "1009120"
  },
  {
    "text": "execution of the application and more importantly the detection of",
    "start": "1009120",
    "end": "1014560"
  },
  {
    "text": "any exceptions that will occur that lends itself very well to a brute force approach",
    "start": "1014560",
    "end": "1020399"
  },
  {
    "text": "and that's why i walked through that section where i was saying this is how you figure out what application launches",
    "start": "1020399",
    "end": "1026079"
  },
  {
    "text": "what file with what flags in what way because you need that information at least on the windows side of the house",
    "start": "1026079",
    "end": "1032640"
  },
  {
    "text": "what's the downside to a pure brute force approach one of the things we ran into immediately was we found file",
    "start": "1032640",
    "end": "1039600"
  },
  {
    "text": "formats that had dependent values throughout a good example would be like a png which is an image file format it",
    "start": "1039600",
    "end": "1045678"
  },
  {
    "text": "has actual checksums throughout and the the reason for that is you know it wants to identify malformed files not",
    "start": "1045679",
    "end": "1052640"
  },
  {
    "text": "necessarily because somebody's doing something malicious but you know something gets messed up in transmittal",
    "start": "1052640",
    "end": "1058320"
  },
  {
    "text": "and so that signals to the application that there's a problem and so it'll exit before and so the the thing that we",
    "start": "1058320",
    "end": "1065039"
  },
  {
    "text": "found is it when file formats have a dependent value um we need to account for that we can't just change something",
    "start": "1065039",
    "end": "1071840"
  },
  {
    "text": "without changing the dependent values because if we don't we'll never get to the location where a vulnerability will",
    "start": "1071840",
    "end": "1078559"
  },
  {
    "text": "occur because that the application will just kick it out early on so brute force fuzzing won't work in",
    "start": "1078559",
    "end": "1084880"
  },
  {
    "text": "that situation and we'll talk about intelligent fuzzing in a sec another downside is there's many false",
    "start": "1084880",
    "end": "1091200"
  },
  {
    "text": "positives i mean the tools that will present they both handle brute forcing and intelligent fuzzing it's not the end",
    "start": "1091200",
    "end": "1097360"
  },
  {
    "text": "game though these aren't tools where you just push a button you walk away you come back and there's a vulnerability that's all written up and nice and you",
    "start": "1097360",
    "end": "1104080"
  },
  {
    "text": "mail it off to microsoft and everybody's happy it will let you know where an exception",
    "start": "1104080",
    "end": "1109120"
  },
  {
    "text": "occurs but then it's up to you as a researcher to determine is this an exception that's worthy of further",
    "start": "1109120",
    "end": "1115840"
  },
  {
    "text": "research to see if it can actually be exploited and presents a risk to us",
    "start": "1115840",
    "end": "1121120"
  },
  {
    "text": "i said intelligent fuzzing all we mean by intelligent fuzzing i mean it's not an industry term it's just",
    "start": "1121120",
    "end": "1126320"
  },
  {
    "text": "something that we've used when we were discussing it we just mean not a pure brute force you know find",
    "start": "1126320",
    "end": "1131520"
  },
  {
    "text": "interesting parts of the file you know a typical file format has a header and a data portion within that header there's",
    "start": "1131520",
    "end": "1137840"
  },
  {
    "text": "a bunch of name value pairs you know so identifying those fuzzing those sections only",
    "start": "1137840",
    "end": "1143600"
  },
  {
    "text": "fuzzing things that are interesting like if there's a portion in the header that identifies a size",
    "start": "1143600",
    "end": "1149520"
  },
  {
    "text": "within the data you know that's a good target to go after but you have to know where it is",
    "start": "1149520",
    "end": "1155120"
  },
  {
    "text": "so how do you figure that out well go to the old-fashioned way do some research if you're dealing with an open",
    "start": "1155120",
    "end": "1160559"
  },
  {
    "text": "file format there's plenty of resources out there there are standards groups there are websites that that give plenty",
    "start": "1160559",
    "end": "1166080"
  },
  {
    "text": "of information this is just a listing of some basic urls to get you started",
    "start": "1166080",
    "end": "1171760"
  },
  {
    "text": "what do you do if you have a proprietary file format there's still plenty of information out there if you choose to",
    "start": "1171760",
    "end": "1179120"
  },
  {
    "text": "do some fuzzing on a proprietary file format i'd encourage you don't start from scratch because chances are if you",
    "start": "1179120",
    "end": "1185360"
  },
  {
    "text": "try to you want to reverse engineer a proprietary protocol somebody's done it before you",
    "start": "1185360",
    "end": "1190480"
  },
  {
    "text": "as with most security research google is your friend go out there do some searches chances are somebody else has",
    "start": "1190480",
    "end": "1197039"
  },
  {
    "text": "some information a simple thing that we found was helpful is just basic file diffing you know you",
    "start": "1197039",
    "end": "1202720"
  },
  {
    "text": "have a proprietary format you don't know anything about it take a bunch of different files that are of the same",
    "start": "1202720",
    "end": "1208559"
  },
  {
    "text": "type and diff them and especially if they have fixed fixed header links",
    "start": "1208559",
    "end": "1215280"
  },
  {
    "text": "you'll see you'll be able to tell pretty clearly you know which portion is header versus which portion is data",
    "start": "1215280",
    "end": "1221520"
  },
  {
    "text": "you may again if they have fixed uh fixed lengths within the header you may even",
    "start": "1221520",
    "end": "1227520"
  },
  {
    "text": "be able to see you know where is the name where's the value and the name value pairs so it's simple but it's a helpful way to",
    "start": "1227520",
    "end": "1233600"
  },
  {
    "text": "get started and the last two urls we have there are really good collections of just a ton of specs on file formats",
    "start": "1233600",
    "end": "1240960"
  },
  {
    "text": "whether they're open or proprietary basically you just you go in you look for the extension and it'll have an",
    "start": "1240960",
    "end": "1247440"
  },
  {
    "text": "alphabetical listing of stuff and it could be anything from a standard that was released and is",
    "start": "1247440",
    "end": "1253360"
  },
  {
    "text": "official to just what some guy did on his own to figure out a proprietary format",
    "start": "1253360",
    "end": "1260880"
  },
  {
    "text": "so what what are the good and bad things of what i'm referring to is intelligent fuzzing you can target individual portions of",
    "start": "1260880",
    "end": "1267520"
  },
  {
    "text": "the file um so you know it's going to be more efficient you can target those so-called",
    "start": "1267520",
    "end": "1273200"
  },
  {
    "text": "interesting fields i gave an example you know there may be a portion in the header that describes the size you know",
    "start": "1273200",
    "end": "1278400"
  },
  {
    "text": "that's always a good place to start looking for a buffer overflow when you have those situations of",
    "start": "1278400",
    "end": "1284000"
  },
  {
    "text": "dependent values like a crc32 checksum you can you can account for that so that when",
    "start": "1284000",
    "end": "1290559"
  },
  {
    "text": "you're fuzzing say a portion in the data you know you can accurately update that checksum early on",
    "start": "1290559",
    "end": "1296880"
  },
  {
    "text": "one of the tools that adam built file spike accounts for that and so",
    "start": "1296880",
    "end": "1302240"
  },
  {
    "text": "that's an approach to doing that we'll get into the demos in a minute what's the downside",
    "start": "1302240",
    "end": "1308720"
  },
  {
    "text": "you it's more work you know you have to do some research you have to figure out what the file formats are some of these",
    "start": "1308720",
    "end": "1314240"
  },
  {
    "text": "file formats are very complex that's why these vulnerabilities exist because people are building applications to",
    "start": "1314240",
    "end": "1320320"
  },
  {
    "text": "account for a specification that's very complex and it has a lot of information in it and they don't account for",
    "start": "1320320",
    "end": "1325520"
  },
  {
    "text": "everything so it's more work you're going to need to build you know multiple script files to",
    "start": "1325520",
    "end": "1332080"
  },
  {
    "text": "account for all of the different variations so it's hard to get complete coverage",
    "start": "1332080",
    "end": "1337360"
  },
  {
    "text": "but you can get less false positives",
    "start": "1337360",
    "end": "1341280"
  },
  {
    "text": "all right so we've discussed all the basic methods um and",
    "start": "1344480",
    "end": "1349679"
  },
  {
    "text": "really all the uh interesting values things like that um when you're actually",
    "start": "1349679",
    "end": "1355120"
  },
  {
    "text": "implementing a fuzzer of this nature like it's not like a network demon where you can send some garbage disconnect",
    "start": "1355120",
    "end": "1362000"
  },
  {
    "text": "send some more garbage disconnect start new connections like that you're going to have to be continually executing the",
    "start": "1362000",
    "end": "1367600"
  },
  {
    "text": "program because it's just an application so it's incapable of restarting itself",
    "start": "1367600",
    "end": "1374159"
  },
  {
    "text": "so you can either you know if you're doing this manually you can use task kill in",
    "start": "1374159",
    "end": "1379760"
  },
  {
    "text": "windows or just kill on unix or if you're using like a gui and you want to use like",
    "start": "1379760",
    "end": "1386720"
  },
  {
    "text": "one of the api calls you can do the same thing um or if if you chose to do",
    "start": "1386720",
    "end": "1393600"
  },
  {
    "text": "like a specialized browser buzzing for anyone who's seen mangle me by lcamp",
    "start": "1393600",
    "end": "1399200"
  },
  {
    "text": "tough it uses this method it specifically is designed just to fuzz browsers",
    "start": "1399200",
    "end": "1405360"
  },
  {
    "text": "and what it'll do it's basically just a cgi program that'll dynamically spit out",
    "start": "1405360",
    "end": "1410400"
  },
  {
    "text": "either in in mangle me's case bad html but you could do it with just about anything you could do activex controls",
    "start": "1410400",
    "end": "1417600"
  },
  {
    "text": "uh images and stuff but it'll it'll dynamically spit out malformed stuff like that with a meta",
    "start": "1417600",
    "end": "1424080"
  },
  {
    "text": "refresh tag which will just tell it to refresh to that cgi again in you know x seconds and then of course since it's",
    "start": "1424080",
    "end": "1430960"
  },
  {
    "text": "dynamic the next time it refreshes it'll spit out something different and then you obviously be able to figure",
    "start": "1430960",
    "end": "1436400"
  },
  {
    "text": "out when the browser crashes because you'll stop getting requests and so in that case you don't need to",
    "start": "1436400",
    "end": "1442159"
  },
  {
    "text": "worry about after x seconds i need to kill this application and start a new one",
    "start": "1442159",
    "end": "1448000"
  },
  {
    "text": "we didn't really focus on that too much but it's definitely an interesting approach",
    "start": "1448000",
    "end": "1453520"
  },
  {
    "text": "monitoring for exceptions is really the bulk of the work that we did in our",
    "start": "1453520",
    "end": "1458559"
  },
  {
    "text": "buzzers because it's the most important thing really",
    "start": "1458559",
    "end": "1463679"
  },
  {
    "text": "you can do you can have function hooking to catch exceptions and stuff in my case i just used p-trace",
    "start": "1463679",
    "end": "1471360"
  },
  {
    "text": "which is available on pretty much every unix although my tool wasn't designed for anything other than linux and it",
    "start": "1471360",
    "end": "1476960"
  },
  {
    "text": "won't run so i wouldn't try that you can monitor standard output and error if you want",
    "start": "1476960",
    "end": "1483279"
  },
  {
    "text": "really the cleanest method is the first two that we mentioned uh these are just alternate methods",
    "start": "1483279",
    "end": "1488640"
  },
  {
    "text": "uh you know looking at error logs of course if the application crashes that's notable",
    "start": "1488640",
    "end": "1494080"
  },
  {
    "text": "and even just looking at the return value but of course with those methods you're not going to get any real information you're not going to be able to dump register state",
    "start": "1494080",
    "end": "1500400"
  },
  {
    "text": "things like that so we're looking at a couple of vulnerabilities this is just",
    "start": "1500400",
    "end": "1507520"
  },
  {
    "text": "for anyone who's heard of these vulnerabilities and didn't know what they were like what category they fell into",
    "start": "1507520",
    "end": "1513360"
  },
  {
    "text": "stack overflows that's one that we discovered with our tool the microsoft interactive training",
    "start": "1513360",
    "end": "1518559"
  },
  {
    "text": "buffer overflow that was just an ascii based stack overflow heap overflows this",
    "start": "1518559",
    "end": "1524080"
  },
  {
    "text": "was a heat-based integer overflow that we're working with the vendor to get fixed right now",
    "start": "1524080",
    "end": "1530080"
  },
  {
    "text": "and gnu bin utel's read elf not not a terribly serious vulnerability but ben util has made for a good test",
    "start": "1530080",
    "end": "1536559"
  },
  {
    "text": "suite they have more integer overflows than open bsd um",
    "start": "1536559",
    "end": "1543039"
  },
  {
    "text": "of course the jpeg issue got a lot of a lot of press i think everybody knows what that was",
    "start": "1543039",
    "end": "1548320"
  },
  {
    "text": "that was just an integer overflow and there was actually a format string vulnerability in adobe acrobat reader a",
    "start": "1548320",
    "end": "1554480"
  },
  {
    "text": "little little while back so all these bugs are out there and they're all over the place",
    "start": "1554480",
    "end": "1560720"
  },
  {
    "text": "um so here's the tools that we designed i had two that i did a spike file and not spike file spike",
    "start": "1560720",
    "end": "1567600"
  },
  {
    "text": "files based on spike not spike file is not based on spike",
    "start": "1567600",
    "end": "1572640"
  },
  {
    "text": "um and then michael creatively named his tool file fuzz",
    "start": "1572640",
    "end": "1577919"
  },
  {
    "text": "yeah there's things we're good at and things we're not good at and naming applications not our maybe now",
    "start": "1577919",
    "end": "1584080"
  },
  {
    "text": "that we're part of verison i can hire somebody to come up with names for tools",
    "start": "1584080",
    "end": "1589600"
  },
  {
    "text": "so as i mentioned earlier the way we kind of split up the research is adam focused on the linux side of the house",
    "start": "1590000",
    "end": "1596159"
  },
  {
    "text": "because that's where his strengths were and i focused on the windows side of the house so on on the windows side the way i chose",
    "start": "1596159",
    "end": "1603279"
  },
  {
    "text": "to approach it is do more of a pure brute force file format fuzzer with some intelligent",
    "start": "1603279",
    "end": "1609600"
  },
  {
    "text": "capabilities within it it's gui based you know one nice thing of programming in windows is that it's",
    "start": "1609600",
    "end": "1616240"
  },
  {
    "text": "pretty much as easy to make a graphical application as it is to make a console-based application that programming was done",
    "start": "1616240",
    "end": "1622960"
  },
  {
    "text": "mostly in c-sharp on the.net platform so that's a requirement for running it uh",
    "start": "1622960",
    "end": "1628080"
  },
  {
    "text": "one one thing i should note is all that the three tools that we're discussing they're being released today",
    "start": "1628080",
    "end": "1633840"
  },
  {
    "text": "all of our stuff we release open source so i strongly encourage you you know give us feedback let us know what works",
    "start": "1633840",
    "end": "1639919"
  },
  {
    "text": "what doesn't work and especially you know if you guys want to participate and build it you know add functionality give",
    "start": "1639919",
    "end": "1645840"
  },
  {
    "text": "it back to us i'll gladly give you credit in the change log and re-release it i mean that's that's what it's all",
    "start": "1645840",
    "end": "1651360"
  },
  {
    "text": "about so uh what does file fuzz need",
    "start": "1651360",
    "end": "1658159"
  },
  {
    "text": "let me just actually walk through it so as i said simple gui based application",
    "start": "1658159",
    "end": "1665279"
  },
  {
    "text": "hopefully you guys can see it i realized some of the writing is a little bit small so i'll try to explain",
    "start": "1665919",
    "end": "1671039"
  },
  {
    "text": "so i've split it into as i talked about you know you need to find a file to",
    "start": "1671039",
    "end": "1676399"
  },
  {
    "text": "target and then you need to be able to launch it and monitor for exceptions so it's kind of a two-phase approach create",
    "start": "1676399",
    "end": "1682480"
  },
  {
    "text": "the files that you want to fuzz and then execute the applications to launch those created files",
    "start": "1682480",
    "end": "1689279"
  },
  {
    "text": "i have a number of canned applications so that or canned audits i'll call them",
    "start": "1689279",
    "end": "1695200"
  },
  {
    "text": "so that you can just start right from scratch but you can do any file type that you want",
    "start": "1695200",
    "end": "1700799"
  },
  {
    "text": "so in here you know there's just various things you know like there's a pdf which is launched by adobe acrobat which the",
    "start": "1700799",
    "end": "1707200"
  },
  {
    "text": "file name is aqua read 32. um now anything that's in that drop-down list is actually behind the scenes is an",
    "start": "1707200",
    "end": "1714799"
  },
  {
    "text": "xml file and that was done on purpose so that you know anybody can add their own audits and it's not hardcoded into the",
    "start": "1714799",
    "end": "1720960"
  },
  {
    "text": "application you know you just all you have to do the xml file format is very basic all you",
    "start": "1720960",
    "end": "1726080"
  },
  {
    "text": "have to do is just add a new audit and it'll show up in the drop down menu so the idea is you know pick pick the",
    "start": "1726080",
    "end": "1732320"
  },
  {
    "text": "file type so in this case i'll pick wmf which is windows meta file is that right",
    "start": "1732320",
    "end": "1738240"
  },
  {
    "text": "it's a vector-based graphic format that windows has and you know it's launched by",
    "start": "1738240",
    "end": "1744399"
  },
  {
    "text": "i think it's the windows picture and fax viewer which is actually a dll it's not an exe so anyway pick the file that you",
    "start": "1744399",
    "end": "1750080"
  },
  {
    "text": "want to pick pick a target file so you know i just have included with the application a",
    "start": "1750080",
    "end": "1755600"
  },
  {
    "text": "test wmf file you know where do you want to dump the stuff what do you want to actually fuzz so in",
    "start": "1755600",
    "end": "1761919"
  },
  {
    "text": "this case you know i'll say i want four bytes of fff and i want",
    "start": "1761919",
    "end": "1768000"
  },
  {
    "text": "to do it either throughout the entire application all byte so i'm just going to go four bytes overriding fff",
    "start": "1768000",
    "end": "1774399"
  },
  {
    "text": "throughout the whole thing that is pure brute force buzzing if it's a really big file you probably don't want to do the",
    "start": "1774399",
    "end": "1780159"
  },
  {
    "text": "whole thing because it's going to take some time so you know you might want to do a range and more than likely the vulnerabilities",
    "start": "1780159",
    "end": "1785919"
  },
  {
    "text": "will occur in the header section so you want to do the first chunk of bytes one thing i found is that the first two",
    "start": "1785919",
    "end": "1791919"
  },
  {
    "text": "options give you the breadth so you can you know just",
    "start": "1791919",
    "end": "1798080"
  },
  {
    "text": "just brute force fuzz all different areas of the file format and monitor for exceptions and then you'll find one",
    "start": "1798080",
    "end": "1804080"
  },
  {
    "text": "let's say you find at byte 100 there was some sort of an exception",
    "start": "1804080",
    "end": "1809120"
  },
  {
    "text": "but you don't know if you have any user if the user has any control over it like i",
    "start": "1809120",
    "end": "1814320"
  },
  {
    "text": "don't know if my fff ever actually gets into the disassembly like i can actually control something",
    "start": "1814320",
    "end": "1820559"
  },
  {
    "text": "so then i added the depth option so that i can at byte number 100 do a whole",
    "start": "1820559",
    "end": "1826399"
  },
  {
    "text": "bunch of different byte values not just fff and then when i watch the exceptions and i watch the values that are showing",
    "start": "1826399",
    "end": "1833440"
  },
  {
    "text": "up in the registers in memory if they're always the same i probably don't have control over it if i see a whole bunch",
    "start": "1833440",
    "end": "1838720"
  },
  {
    "text": "of different exceptions or different values in the registers that gives me an indication that probably i do have control over it",
    "start": "1838720",
    "end": "1844880"
  },
  {
    "text": "the match option that's geared more toward ascii file formats the first three are typically going to",
    "start": "1844880",
    "end": "1850799"
  },
  {
    "text": "be used on binary file formats the match file format just allows me to target a binary like we mentioned that the",
    "start": "1850799",
    "end": "1857600"
  },
  {
    "text": "we found a vulnerability in a microsoft interactive training which is an application that comes on oem",
    "start": "1857600",
    "end": "1864000"
  },
  {
    "text": "installations of the windows operating system dell computers for example have it and it's just a really simple",
    "start": "1864000",
    "end": "1870720"
  },
  {
    "text": "i think it was an ini file is that right or an xml file i don't remember but anyway just a simple ascii file where",
    "start": "1870720",
    "end": "1876240"
  },
  {
    "text": "it's you know name equals value and so by just fuzzing the value side of the",
    "start": "1876240",
    "end": "1882399"
  },
  {
    "text": "house in this case you know i'm saying replace that with all a's with a hundred days",
    "start": "1882399",
    "end": "1888000"
  },
  {
    "text": "and then keep incrementing it so it's 100 days 200 days 300 days all the way up to a thousand and you'll find stock",
    "start": "1888000",
    "end": "1893360"
  },
  {
    "text": "overflows that way anyway so you're just picking your target you know figuring out how you",
    "start": "1893360",
    "end": "1898880"
  },
  {
    "text": "want to do it i'll just say all bytes for this you know create my files so it's just gonna as i say it's doing",
    "start": "1898880",
    "end": "1904720"
  },
  {
    "text": "every byte so in this case it's a small file so i don't know so it made 296 files and",
    "start": "1904720",
    "end": "1911600"
  },
  {
    "text": "then on the other side you know now that you've created your files that you want you that your fuzzed files that you want",
    "start": "1911600",
    "end": "1918000"
  },
  {
    "text": "to launch now you have to launch them and you want to be continually launching them killing it and then monitoring for",
    "start": "1918000",
    "end": "1925200"
  },
  {
    "text": "exceptions and we're just using the windows api to look for those exceptions i'll do this in",
    "start": "1925200",
    "end": "1932000"
  },
  {
    "text": "a vmware environment just you know in case something crashes i'm not going to bring down our powerpoint presentation",
    "start": "1932000",
    "end": "1937519"
  },
  {
    "text": "but um so you know it's really simple stuff you just you're creating those files and",
    "start": "1937519",
    "end": "1943360"
  },
  {
    "text": "then just continually launching it killing it launching it killing it and you're saying you know are there any",
    "start": "1943360",
    "end": "1949120"
  },
  {
    "text": "exceptions this uh wmf file format it's hard to see in vmware it's kind of an interesting one",
    "start": "1949120",
    "end": "1955279"
  },
  {
    "text": "because you won't sometimes the file will fail so you won't actually see it but every",
    "start": "1955279",
    "end": "1960799"
  },
  {
    "text": "once in a while the drawing gets rendered it's just an interesting one to watch because it's a vector file format",
    "start": "1960799",
    "end": "1966399"
  },
  {
    "text": "so i'm fuzzing things and so it's actually changing what the image is so it's supposed to be a triangle",
    "start": "1966399",
    "end": "1972080"
  },
  {
    "text": "that the one you just saw was that what it really looks like but every once in a while you'll see this warped like when i",
    "start": "1972080",
    "end": "1977760"
  },
  {
    "text": "started doing it it started as a triangle and then it was a blue triangle and it was a green triangle and it was upside down then it",
    "start": "1977760",
    "end": "1983039"
  },
  {
    "text": "was warped and so just i don't know it's interesting to watch like you can actually see how your changes are",
    "start": "1983039",
    "end": "1988399"
  },
  {
    "text": "impacting the file and then you're looking for exceptions like in this case you know obviously i knew i was going to",
    "start": "1988399",
    "end": "1993840"
  },
  {
    "text": "get an exception on file and i know you guys can't read this but i'll read it on file 260 there",
    "start": "1993840",
    "end": "2000240"
  },
  {
    "text": "was an access violation you know is this interesting is it not in this case probably not you know it's just",
    "start": "2000240",
    "end": "2006000"
  },
  {
    "text": "you know doing a move uh zero extend but so the things that i chose to",
    "start": "2006000",
    "end": "2012080"
  },
  {
    "text": "capture is i want to see when there's an exception and it's not enough just to watch for an application to crash",
    "start": "2012080",
    "end": "2017840"
  },
  {
    "text": "because you know windows has all this graceful exception handling so you may never see it if you're just looking for something",
    "start": "2017840",
    "end": "2023840"
  },
  {
    "text": "physical so you want to monitor for exceptions at a lower level and the things that i've captured are you know",
    "start": "2023840",
    "end": "2029360"
  },
  {
    "text": "what was the operation in the disassembly that occurred at that place so that i can see if it's interesting",
    "start": "2029360",
    "end": "2034640"
  },
  {
    "text": "you know what were the register values things that i may add to this in future is you know a snapshot of the top of the",
    "start": "2034640",
    "end": "2039919"
  },
  {
    "text": "stack what did that look like maybe instructions before and after where the actual exception occurred and so this",
    "start": "2039919",
    "end": "2045760"
  },
  {
    "text": "way you can run the fuzzing you know let it run all night fuzz like 10 000 files",
    "start": "2045760",
    "end": "2051440"
  },
  {
    "text": "wake up in the morning you know there's ten exceptions there you can quickly look at and say are any of these worthy",
    "start": "2051440",
    "end": "2057520"
  },
  {
    "text": "of of deeper research",
    "start": "2057520",
    "end": "2061638"
  },
  {
    "text": "and now adam will discuss the linux-based tools that he developed okay the first tool which i'm actually",
    "start": "2065280",
    "end": "2071358"
  },
  {
    "text": "not demoing today i chose to just demo the other one but it'll be up on the website if you're interested it's an adaptation of",
    "start": "2071359",
    "end": "2077760"
  },
  {
    "text": "immunity spike which for anyone who's never heard of it it's just a protocol like block-based fuzzer that was",
    "start": "2077760",
    "end": "2083599"
  },
  {
    "text": "designed for basically for tcp um so it's been modified obviously so",
    "start": "2083599",
    "end": "2090000"
  },
  {
    "text": "that it can target files and i added a way you know for it to",
    "start": "2090000",
    "end": "2095040"
  },
  {
    "text": "execute and monitor for any exceptions basically just catching signals and stuff",
    "start": "2095040",
    "end": "2100160"
  },
  {
    "text": "um using p trace um it'll do multiple processes so you can have you know five",
    "start": "2100160",
    "end": "2106320"
  },
  {
    "text": "applications processing five different files at once which speed things speeds things up a little bit",
    "start": "2106320",
    "end": "2112079"
  },
  {
    "text": "um i added uh crc32 over blocks spike supported like things like lengths over",
    "start": "2112079",
    "end": "2118880"
  },
  {
    "text": "blocks so i added crc32 just to see how easy it would be and it takes spike scripts as input so",
    "start": "2118880",
    "end": "2125920"
  },
  {
    "text": "if you know if you speak spike then you'll have no problem um and this was used to discover uh real player",
    "start": "2125920",
    "end": "2132480"
  },
  {
    "text": "vulnerability that we're working with uh real networks to get fixed right now",
    "start": "2132480",
    "end": "2137520"
  },
  {
    "text": "um and then there's not spike file which is uh similar to michael's fuzzer",
    "start": "2137520",
    "end": "2142720"
  },
  {
    "text": "without the fancy gui requires a valid file as like a baseline",
    "start": "2142720",
    "end": "2147920"
  },
  {
    "text": "and it'll mess with it from there it has all the same features as spike file this was used to discover",
    "start": "2147920",
    "end": "2154720"
  },
  {
    "text": "an integer overflow in bin utils which is what i'll demo not because it's a serious vulnerability i don't think i'll",
    "start": "2154720",
    "end": "2160480"
  },
  {
    "text": "lose my job or get sued for showing it to you but it demonstrates my progress bar that's",
    "start": "2160480",
    "end": "2167040"
  },
  {
    "text": "really the only reason i like to demo it he's really proud of that he thinks that makes up for a gui can you hit enter",
    "start": "2167040",
    "end": "2173040"
  },
  {
    "text": "when i sure tell you too not yet though we uh we only have 10 minutes left uh for anybody on that side of the room",
    "start": "2173040",
    "end": "2179520"
  },
  {
    "text": "i apologize but there's not really much to this um the dash b just means binary buzzing",
    "start": "2179520",
    "end": "2185040"
  },
  {
    "text": "the dash k means it's not going to kill the application uh because read elf exits usually on an error or on success",
    "start": "2185040",
    "end": "2191680"
  },
  {
    "text": "so you don't need to do that dash m10 means it's going to have 10 processes at once dash o fuzzy u name is just going to be",
    "start": "2191680",
    "end": "2198560"
  },
  {
    "text": "the file it outputs and you name is just a file that i copied from an sgi irix install it's just",
    "start": "2198560",
    "end": "2206320"
  },
  {
    "text": "a plain mips binary and then you just tell it what to do so you can hit enter",
    "start": "2206320",
    "end": "2212880"
  },
  {
    "text": "and you'll see it'll fuzz through it since it's such a uh it's not a very complex program uh",
    "start": "2212880",
    "end": "2218640"
  },
  {
    "text": "read off so you can do a lot really fast um you can see there's already you know 30 crashes or whatever if you let it run",
    "start": "2218640",
    "end": "2225119"
  },
  {
    "text": "there's something like 30 000 crashes or something like that but",
    "start": "2225119",
    "end": "2230400"
  },
  {
    "text": "what it'll do is it'll dump a text file for every uh unique",
    "start": "2230400",
    "end": "2237599"
  },
  {
    "text": "uh faulting address so like every eip has its own text file so you",
    "start": "2237599",
    "end": "2243520"
  },
  {
    "text": "see there's a whole bunch um just the one that i would show you i mean some of these are exploitable a",
    "start": "2243520",
    "end": "2249200"
  },
  {
    "text": "lot of them aren't there's just quick notes on the one that",
    "start": "2249200",
    "end": "2254400"
  },
  {
    "text": "i mentioned eip is actually that hex value which if",
    "start": "2254400",
    "end": "2260880"
  },
  {
    "text": "you uh print it out it's g underscore ar which is a string from the binary so obviously if you have",
    "start": "2260880",
    "end": "2267040"
  },
  {
    "text": "eip with a string that's in the binary that's obviously going to be exploitable and if you just go to the source because",
    "start": "2267040",
    "end": "2272800"
  },
  {
    "text": "it's open source it's just an integer multiplication heap overflow it's something like that where you're reading a value from the file",
    "start": "2272800",
    "end": "2279839"
  },
  {
    "text": "mallocking it with the multiply and then it wraps around and you've got",
    "start": "2279839",
    "end": "2285359"
  },
  {
    "text": "a problem and a loop so that's basically all there is to that one so these tools are and will be on our",
    "start": "2285359",
    "end": "2293599"
  },
  {
    "text": "website labs.idefence.com that's where we have the open source stuff just go in the software section",
    "start": "2293599",
    "end": "2298960"
  },
  {
    "text": "as of right now the file fuzz the windows based one is the only one up there they will put the",
    "start": "2298960",
    "end": "2304160"
  },
  {
    "text": "others up in the next couple hours working on two hours sleep we could only move so quickly so as soon as we can",
    "start": "2304160",
    "end": "2309760"
  },
  {
    "text": "figure out the client we'll get the others up",
    "start": "2309760",
    "end": "2314800"
  },
  {
    "text": "um adam there's like two or three slides left so we gotta blow through",
    "start": "2314800",
    "end": "2320240"
  },
  {
    "text": "all right um so here's some just some of the zero-day vulnerabilities that we found while we were testing",
    "start": "2320240",
    "end": "2325359"
  },
  {
    "text": "the microsoft interactive training one we mentioned that's already fixed now uh we were microsoft on that one the",
    "start": "2325359",
    "end": "2331280"
  },
  {
    "text": "real player one i mentioned which is the format string bug um and that heap overflow that i just",
    "start": "2331280",
    "end": "2336960"
  },
  {
    "text": "showed you so um so future trends and predictions we're thinking in terms of attack",
    "start": "2336960",
    "end": "2343119"
  },
  {
    "text": "there's going to be more tools um there's going to be probably an increase in the rate of discovery because of that",
    "start": "2343119",
    "end": "2349680"
  },
  {
    "text": "there's a lot of simple methods you can use to find these these types of bugs as far as defense you're going to",
    "start": "2349680",
    "end": "2356320"
  },
  {
    "text": "probably see more aggressive like content filtering probably",
    "start": "2356320",
    "end": "2361680"
  },
  {
    "text": "something in the in the content filtering maybe that will just detect that it's you know malformed file and",
    "start": "2361680",
    "end": "2366800"
  },
  {
    "text": "just drop it completely um and that's about that any questions",
    "start": "2366800",
    "end": "2372480"
  },
  {
    "text": "so we have uh we have some t-shirts to give out if you have some questions and uh after the questions if you want to come up and just grab one i think we",
    "start": "2372480",
    "end": "2378800"
  },
  {
    "text": "have quite a few yeah",
    "start": "2378800",
    "end": "2382440"
  },
  {
    "text": "yeah absolutely you know this these don't have to just be used for evil purposes that can be used for",
    "start": "2392640",
    "end": "2398560"
  },
  {
    "text": "good i hope they will be and uh especially if you know you're building an application that you know is creating",
    "start": "2398560",
    "end": "2404960"
  },
  {
    "text": "a new file type um that's specifically by default associated with that application you know especially in the",
    "start": "2404960",
    "end": "2410960"
  },
  {
    "text": "windows world like when i did my testing those are the sorts of things i targeted because",
    "start": "2410960",
    "end": "2417200"
  },
  {
    "text": "you know they're not as likely to have been looked at as like a dot doc file which everybody has access to you know i",
    "start": "2417200",
    "end": "2422880"
  },
  {
    "text": "targeted a lot of things that were a particular vendor created a particular file type and associated it with their",
    "start": "2422880",
    "end": "2428400"
  },
  {
    "text": "own application so absolutely i would encourage them yeah did you pursue any",
    "start": "2428400",
    "end": "2433520"
  },
  {
    "text": "database um i don't think we did like give me an example of a particular file",
    "start": "2433520",
    "end": "2440320"
  },
  {
    "text": "just like binary formats and stuff sure no i don't think we did but",
    "start": "2440320",
    "end": "2445760"
  },
  {
    "text": "absolutely tell you the truth like most of the stuff that we found wasn't uh like really looking for vulnerabilities is mostly",
    "start": "2445760",
    "end": "2451920"
  },
  {
    "text": "just kind of like our test suite so it's like stuff that we happen to find we really haven't had that much time to actually use our tools per se yeah like",
    "start": "2451920",
    "end": "2458720"
  },
  {
    "text": "i really do think this is a low hanging fruit area of vulnerability research because we really weren't working that",
    "start": "2458720",
    "end": "2464240"
  },
  {
    "text": "hard to find vulnerabilities we were working hard to build tools and as adam said it was just in testing those tools",
    "start": "2464240",
    "end": "2470160"
  },
  {
    "text": "you know we wanted to validate our theory that this was real and",
    "start": "2470160",
    "end": "2475599"
  },
  {
    "text": "it is more questions oh actually hey i should be giving out",
    "start": "2475599",
    "end": "2480640"
  },
  {
    "text": "t-shirts go ahead who asked questions there's one way back there",
    "start": "2480640",
    "end": "2486599"
  },
  {
    "text": "sure yeah basically just ask the question um basically",
    "start": "2495599",
    "end": "2502000"
  },
  {
    "text": "like the first thing you look at obviously is like the faulting instruction i mean sometimes",
    "start": "2502000",
    "end": "2507440"
  },
  {
    "text": "you'll see you know it's a no pointer but you really want to look at it anyway most cases in this because it really is",
    "start": "2507440",
    "end": "2512960"
  },
  {
    "text": "just such dumb fuzzing that it could be a null pointer in one case but if you fix it up a little bit it won't be",
    "start": "2512960",
    "end": "2518880"
  },
  {
    "text": "so really you just have to once you get the exceptions you just kind of look at them and you basically",
    "start": "2518880",
    "end": "2524079"
  },
  {
    "text": "just have to go over them manually so and i mean some some things are really easy to recognize",
    "start": "2524079",
    "end": "2530079"
  },
  {
    "text": "if you have the faulting instruction in the register state like format strings are usually pretty easy to recognize",
    "start": "2530079",
    "end": "2535440"
  },
  {
    "text": "riding off the end of a heap or reading off the end of the heap is usually pretty easy to recognize but aside from",
    "start": "2535440",
    "end": "2540720"
  },
  {
    "text": "that you usually have to do some manual work dude this is my t-shirt like from the",
    "start": "2540720",
    "end": "2546400"
  },
  {
    "text": "room you like included in the prop you almost got my dirty t-shirt",
    "start": "2546400",
    "end": "2552560"
  },
  {
    "text": "um any other questions we're going to stick around for a while sorry go right ahead",
    "start": "2553359",
    "end": "2560440"
  },
  {
    "text": "we've thought about it definitely it's it's an interesting field we didn't do any research into it but yeah it's",
    "start": "2564240",
    "end": "2570079"
  },
  {
    "text": "definitely uh something interesting that i'd like to look into like i totally agree because as i say like the only thing that we looked into on the",
    "start": "2570079",
    "end": "2576000"
  },
  {
    "text": "intelligent side was that you know you doing manual research to figure it out but it would be great if you could get to the point where it knows where a",
    "start": "2576000",
    "end": "2582560"
  },
  {
    "text": "dependent value is you know and it automatically can do the crc32 checksum and stuff like that that would",
    "start": "2582560",
    "end": "2588400"
  },
  {
    "text": "definitely accelerate the research go ahead yeah do you have any idea",
    "start": "2588400",
    "end": "2594800"
  },
  {
    "text": "to avoid antibiotics in sections yeah i i've noticed that a lot like if",
    "start": "2595119",
    "end": "2600960"
  },
  {
    "text": "you start with a baseline of just a virus infected file and run it through and if you're not looking at",
    "start": "2600960",
    "end": "2606400"
  },
  {
    "text": "crashes you're just looking at you know the return value if it returns clean yep absolutely",
    "start": "2606400",
    "end": "2613359"
  },
  {
    "text": "just like give them out to people thanks a lot guys appreciate it",
    "start": "2614640",
    "end": "2620520"
  },
  {
    "text": "you",
    "start": "2633839",
    "end": "2635920"
  },
  {
    "text": "you",
    "start": "2670000",
    "end": "2672079"
  }
]