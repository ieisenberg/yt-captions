[
  {
    "text": "good afternoon everybody I hope you're still awake and with us welcome to the Beast Within inating Dynamic malware",
    "start": "80",
    "end": "7120"
  },
  {
    "text": "analysis using Microsoft comom this is Mandalay",
    "start": "7120",
    "end": "12320"
  },
  {
    "text": "BCD with Ralph hun before we begin just a couple of notes you've probably heard",
    "start": "12320",
    "end": "18520"
  },
  {
    "text": "these throughout the day but you should make sure you stop by the business Hall which is down stairs in Bayside AB the",
    "start": "18520",
    "end": "25840"
  },
  {
    "text": "black hat Arsenal is on the palm foyer upstairs and level three and of course the Arsenal reception is today at 5:00",
    "start": "25840",
    "end": "32920"
  },
  {
    "text": "p.m. if you haven't picked up your merchandise at the black hat swag store",
    "start": "32920",
    "end": "38040"
  },
  {
    "text": "and bookstore this is your last day to do it so go by before they close and get",
    "start": "38040",
    "end": "43520"
  },
  {
    "text": "your swag also be sure to visit the Kye Linux lab which is right over here in",
    "start": "43520",
    "end": "48800"
  },
  {
    "text": "Mandalay Bay a thank you for putting your phones on vibrate for the term of this talk we really appreciate your",
    "start": "48800",
    "end": "55320"
  },
  {
    "text": "cooperation and without further Ado your speaker",
    "start": "55320",
    "end": "61920"
  },
  {
    "text": "okay so thank you for the introduction and welcome to my talk the Beast Within evading Dynamic malware analysis using",
    "start": "65600",
    "end": "71000"
  },
  {
    "text": "Microsoft com uh my name is raun I'm one of the co-founders of the Germany based company vmray and basically during our",
    "start": "71000",
    "end": "77880"
  },
  {
    "text": "testing we identifi that there is a certain category of malware which seems to be pretty interesting to take a look",
    "start": "77880",
    "end": "83560"
  },
  {
    "text": "at because we saw that um this particular category of malware which is malware that uses Microsoft come",
    "start": "83560",
    "end": "90360"
  },
  {
    "text": "explicitly or implicitly underneath it seems to pose a lot of problems to um analysis",
    "start": "90360",
    "end": "96119"
  },
  {
    "text": "systems and this may people with a may leave people with a false sense of security because if they look at the",
    "start": "96119",
    "end": "101439"
  },
  {
    "text": "reports that are generated by such systems then some stuff for example just isn't in there or other stuff just look",
    "start": "101439",
    "end": "106560"
  },
  {
    "text": "doesn't look like you would expect it to be uh I am here today to talk about uh this issue uh to present our findings um",
    "start": "106560",
    "end": "113240"
  },
  {
    "text": "to explain where the problem underneath is and also to propose some mitigations",
    "start": "113240",
    "end": "120159"
  },
  {
    "text": "so the talk is basically structured in four different sections at first I'm going to give an introduction on all of the relevant topics then in the second",
    "start": "120159",
    "end": "127280"
  },
  {
    "text": "section we are going to talk about different case studies which are basically test cases that we created in order to test the efficiency of analysis",
    "start": "127280",
    "end": "135120"
  },
  {
    "text": "systems um then after that uh we will basically proceed to more or less the heart of the talk which is the thir",
    "start": "135120",
    "end": "141040"
  },
  {
    "text": "third section in which we are going to talk about uh you know how um these analysis systems are designed and and",
    "start": "141040",
    "end": "147239"
  },
  {
    "text": "where the problem lies underneath and then finally I'm going to have some slides about an alternative approach",
    "start": "147239",
    "end": "152560"
  },
  {
    "text": "that should like mitigate these previous previously mentioned problems okay so um we're going to talk",
    "start": "152560",
    "end": "160000"
  },
  {
    "text": "about Dynamic mware analysis in order to understand what dynamic analysis is and why this has become so increasingly",
    "start": "160000",
    "end": "166040"
  },
  {
    "text": "popular over the course of the last years you first have to understand what problem it tries to solve and basically",
    "start": "166040",
    "end": "171560"
  },
  {
    "text": "there are two kinds of problems IT addresses first of all according to various sources there are actually",
    "start": "171560",
    "end": "177480"
  },
  {
    "text": "hundreds of thousands of new malware files being SE seen in the wild each day of course that that does not mean that",
    "start": "177480",
    "end": "183000"
  },
  {
    "text": "there are actually hundreds of thousands of new malware families being seen in the wild in fact there are um a lot of",
    "start": "183000",
    "end": "189640"
  },
  {
    "text": "polymorph there is a lot of polymorphic malware that just re-encrypts itself every time it spreads using a new",
    "start": "189640",
    "end": "195040"
  },
  {
    "text": "encryption key and this is uh this is why the file always looks different from the outside um and at least the hashes",
    "start": "195040",
    "end": "201200"
  },
  {
    "text": "change so that's one big thing one big issue because uh if you want to provide security to a network for example and",
    "start": "201200",
    "end": "207080"
  },
  {
    "text": "you have your different sensors in that Network in in an email Gateway or in an https gateway then you have to look at",
    "start": "207080",
    "end": "212519"
  },
  {
    "text": "all these files and you have to make an assessment as to whether you think that this is a good file or a bad file so",
    "start": "212519",
    "end": "217599"
  },
  {
    "text": "that's one thing um the other thing is um obviously there is an like there has been an increasing complexity in the",
    "start": "217599",
    "end": "222840"
  },
  {
    "text": "malware that we've seen um I I guess everybody of you has has heard has heard",
    "start": "222840",
    "end": "228080"
  },
  {
    "text": "of that so we have nation state actors that are getting into the malware um business for whatever reason uh so",
    "start": "228080",
    "end": "235040"
  },
  {
    "text": "things are getting more complex so this means that traditional signature based approaches they have they're shortcoming",
    "start": "235040",
    "end": "240560"
  },
  {
    "text": "because often times they assume that uh they can only detect something which somebody has taken a look at previously",
    "start": "240560",
    "end": "246680"
  },
  {
    "text": "and if you have so much malware and so complex mware usually that's just not the case basically have you have two",
    "start": "246680",
    "end": "252200"
  },
  {
    "text": "routes left which you can go then uh first of all you can do static analysis this means that you're analyzing a",
    "start": "252200",
    "end": "259160"
  },
  {
    "text": "sample file without actually executing is it this is not what it talk is about we are going to talk about the second",
    "start": "259160",
    "end": "265199"
  },
  {
    "text": "route which is dynamic malware analysis and dynamic malware analysis means that",
    "start": "265199",
    "end": "270560"
  },
  {
    "text": "you are executing a file you are monitoring Its Behavior and from that you are you draw your conclusions about",
    "start": "270560",
    "end": "276880"
  },
  {
    "text": "what this file is all about yeah and the good thing about Dynamic M analysis for example also is that if you have enough",
    "start": "276880",
    "end": "283160"
  },
  {
    "text": "resources you can just scale it up and you can do like tens of thousand hundreds of thousand if not even millions of analysis each day U and also",
    "start": "283160",
    "end": "291120"
  },
  {
    "text": "you don't need to have any you don't need to know anything about the sample beforehand so that's this is basically",
    "start": "291120",
    "end": "296160"
  },
  {
    "text": "why it great greatly helps you in solving these two different problems uh when we talk about Dynamic malware",
    "start": "296160",
    "end": "302240"
  },
  {
    "text": "analysis we basically mean sandboxing so I will just use the term sandboxing for the rest of the talk and um as you might",
    "start": "302240",
    "end": "309160"
  },
  {
    "text": "know there are different kinds of sandboxes out there there are academic ones a lot of commercial ones in the end",
    "start": "309160",
    "end": "314479"
  },
  {
    "text": "they always kind of work the same if you look at it from a big a big picture this",
    "start": "314479",
    "end": "320000"
  },
  {
    "text": "means that uh usually you have different sample types that are supported by the sbox and if you want to analyze such a",
    "start": "320000",
    "end": "325560"
  },
  {
    "text": "sample type such as a Word document you submit it to the sandbox then the sandbox creates like a virtual machine",
    "start": "325560",
    "end": "332479"
  },
  {
    "text": "um and inside that virtual machine that word document is being opened for example this could be like a malicious",
    "start": "332479",
    "end": "338120"
  },
  {
    "text": "Word document that contains a macro and that is being opened inside that virtual machine and then the system just runs",
    "start": "338120",
    "end": "344120"
  },
  {
    "text": "for one or two minutes during all of that there is a monitoring engine inside the sandbox and",
    "start": "344120",
    "end": "350080"
  },
  {
    "text": "this monitoring engine tries to understand what goes on in the back so for example if if that macro creates a",
    "start": "350080",
    "end": "356120"
  },
  {
    "text": "new file or it sets up a network connection to a remote server then this would be something that the monitoring engine wants to see and wants to",
    "start": "356120",
    "end": "363319"
  },
  {
    "text": "lock after these one or two minutes the entire system is just shut shut down and reset and out of these locks um",
    "start": "363319",
    "end": "369759"
  },
  {
    "text": "different kinds of reports are generated as a manual analyst you can just look at these reports and draw your",
    "start": "369759",
    "end": "375599"
  },
  {
    "text": "conclusions uh about what the sample is all about about whether it's a good or a bad file and why it is bad for example",
    "start": "375599",
    "end": "381759"
  },
  {
    "text": "this is one use case um the probably more important use case is that the sandbox itself can like automatically",
    "start": "381759",
    "end": "388599"
  },
  {
    "text": "detect certain kinds of behaviors out of these locks so for example it could detect that um a file was downloaded",
    "start": "388599",
    "end": "396039"
  },
  {
    "text": "from a remote server and then that file was written to the disk and then was executed in the background and this is a",
    "start": "396039",
    "end": "402280"
  },
  {
    "text": "certain kind of anomaly or behavior that is very like distinct for malicious files or malicious macros because why",
    "start": "402280",
    "end": "407680"
  },
  {
    "text": "would you want to do something like this something like that unless you are uh having something malicious in mind so",
    "start": "407680",
    "end": "414000"
  },
  {
    "text": "with these different kind of behavior detections the sandbox can then in the end better understand what's going on",
    "start": "414000",
    "end": "419080"
  },
  {
    "text": "and in the simplest case at the end you get some sort of traffic light or so which tells you that I think this is a",
    "start": "419080",
    "end": "424520"
  },
  {
    "text": "good file or I think that this is a bad file and then you can just block it or pass it on this is basically how every",
    "start": "424520",
    "end": "430960"
  },
  {
    "text": "sandbox Works um the only thing that's different is like the technology underneath but from a very big picture",
    "start": "430960",
    "end": "436479"
  },
  {
    "text": "this is just basically how it works okay so um let's have a small look",
    "start": "436479",
    "end": "443319"
  },
  {
    "text": "into Microsoft com uh Microsoft com stands for Microsoft component object model and and what it is is basically it",
    "start": "443319",
    "end": "451280"
  },
  {
    "text": "is a binary interface standard for software components um what it tries to solve is imagine you have two different",
    "start": "451280",
    "end": "457560"
  },
  {
    "text": "applications in the windows world that would usually be binary applications and these applications want to talk with",
    "start": "457560",
    "end": "463360"
  },
  {
    "text": "each other they want to access the other's functionality then it makes sense to have some sort of standard in between so some sort of standardized",
    "start": "463360",
    "end": "469840"
  },
  {
    "text": "interface so that if you want to call the functionality of the other application you do not need to know any of the internals of that application you",
    "start": "469840",
    "end": "476960"
  },
  {
    "text": "just follow that standard that standard and then you know it'll it'll work and this is basically what Comm is about and",
    "start": "476960",
    "end": "482800"
  },
  {
    "text": "the idea behind that is that you can have different applications written in different programming language languages",
    "start": "482800",
    "end": "488080"
  },
  {
    "text": "and they can just you know talk to each other if they just stick with the com",
    "start": "488080",
    "end": "493159"
  },
  {
    "text": "standard um in the end what it basically is it's more like an extension to what",
    "start": "493159",
    "end": "498240"
  },
  {
    "text": "the c or C++ standard already standardized uh since C and C++ was basically developed by Unix people they",
    "start": "498240",
    "end": "504960"
  },
  {
    "text": "did not put a lot of effort into standardizing stuff on the binary level which is more important for Windows because in Windows you usually have like",
    "start": "504960",
    "end": "510680"
  },
  {
    "text": "compiled applications and you do not have the source code of applications and this is where com just basically comes into",
    "start": "510680",
    "end": "516719"
  },
  {
    "text": "play um Comm is allows you to even provide an like object oriented API and",
    "start": "516719",
    "end": "523399"
  },
  {
    "text": "this means that usually if you provide a com interface or if you provide a com API then you have different com objects",
    "start": "523399",
    "end": "529600"
  },
  {
    "text": "with different interfaces and methods so interfaces are usually written with a capital I",
    "start": "529600",
    "end": "535920"
  },
  {
    "text": "prepended over here you can see that um the I web browser too interface this is basically an interface that is provided",
    "start": "535920",
    "end": "541720"
  },
  {
    "text": "by the Internet Explorer and these interfaces they you can think of them just like classes in C++ or in Java and",
    "start": "541720",
    "end": "549399"
  },
  {
    "text": "they have different methods such as in this case the navigate method which can then have all kinds of parameters yeah",
    "start": "549399",
    "end": "556079"
  },
  {
    "text": "and interface names and methods that are typically separated using these two colons Microsoft com is actually a very",
    "start": "556079",
    "end": "563399"
  },
  {
    "text": "old technology so I think it Microsoft started developing it back in the late ' 80s when Windows 2.0 was like the",
    "start": "563399",
    "end": "569880"
  },
  {
    "text": "current operating system nevertheless uh it is still used as the foundation of many current Technologies in Windows so",
    "start": "569880",
    "end": "576640"
  },
  {
    "text": "direct X for example makes heavy use of Comm uh Windows scripting host which is the execution engine in Windows that",
    "start": "576640",
    "end": "583279"
  },
  {
    "text": "executes JavaScript or Visual Basic script files or Visual Basic for applications the runtime of that makes",
    "start": "583279",
    "end": "589120"
  },
  {
    "text": "heavy use of com underneath uh such does Microsoft Office because um if you if",
    "start": "589120",
    "end": "594560"
  },
  {
    "text": "you execute a macro that is being executed inside that Windows scripting host so there is a lot of of com fanciness going on underneath and",
    "start": "594560",
    "end": "601279"
  },
  {
    "text": "basically the same also goes for the runtimes of Powershell and net so why is that interesting especially for malware",
    "start": "601279",
    "end": "608360"
  },
  {
    "text": "very recently we've seen these different ransomware waves um and interestingly what the the people like the way they",
    "start": "608360",
    "end": "614680"
  },
  {
    "text": "infected uh PCS often times was by using um file formats such as Visual Basic",
    "start": "614680",
    "end": "620880"
  },
  {
    "text": "script JavaScript even like obscure file format such as HTML applications and it",
    "start": "620880",
    "end": "626279"
  },
  {
    "text": "seems like people are just shifting away from using executables in order to infect other systems they're just using these kind of systems because often",
    "start": "626279",
    "end": "632040"
  },
  {
    "text": "times like spam filters they do not deal with them pretty well so on and so forth so uh it's definitely we would",
    "start": "632040",
    "end": "638240"
  },
  {
    "text": "definitely say that you know with the exception of direct X all of this is very re relevant for malware",
    "start": "638240",
    "end": "643480"
  },
  {
    "text": "analysis in our malware Corpus we basically looked at the different interfaces that we see malware using um",
    "start": "643480",
    "end": "649560"
  },
  {
    "text": "and these are most mostly interfaces that are already provided by the operating system so Windows itself provides a lot of com interfaces that",
    "start": "649560",
    "end": "655920"
  },
  {
    "text": "you can use to do all kinds of stuff um what we see a lot of times is that mware",
    "start": "655920",
    "end": "661240"
  },
  {
    "text": "uses the Internet Explorer interface that I talked about previously and it basically works like this so you can",
    "start": "661240",
    "end": "667279"
  },
  {
    "text": "remote control an entire Internet Explorer that is hidden in the background of the system using that interface and then you can just just",
    "start": "667279",
    "end": "673600"
  },
  {
    "text": "tell it to download a file from an arbitrary URL and that's pretty cool because for example um you can use that",
    "start": "673600",
    "end": "679880"
  },
  {
    "text": "to bypass application firewalls because the the network connection comes out of an Internet Explorer process and um",
    "start": "679880",
    "end": "686839"
  },
  {
    "text": "often times application firewalls will just say okay I'm fine with that it's just the Internet Explorer so that's",
    "start": "686839",
    "end": "692360"
  },
  {
    "text": "pretty common what we also see is the shell link interface which is being used in order to create shortcuts for example",
    "start": "692360",
    "end": "697920"
  },
  {
    "text": "in the auto start folder but also to delete the files on the file system to modify existing files so on and so",
    "start": "697920",
    "end": "703680"
  },
  {
    "text": "forth another interface is the Windows management instrumentation interface wmi",
    "start": "703680",
    "end": "710000"
  },
  {
    "text": "this is basically a system that exists inside windows that um allows you to do",
    "start": "710000",
    "end": "715040"
  },
  {
    "text": "all kinds of stuff and mware for example us it this uses it to query for any installed AV product which is very easy",
    "start": "715040",
    "end": "720279"
  },
  {
    "text": "to do using wmi then there's another interface the firewall manager interface which",
    "start": "720279",
    "end": "725360"
  },
  {
    "text": "basically allows you to create new firewall rules and therefore firewall exceptions for your program um there's a",
    "start": "725360",
    "end": "731200"
  },
  {
    "text": "task schedular interface that allows you to create new tasks this is oftentime used to gain persistency in the system so that the mware is being started after",
    "start": "731200",
    "end": "737880"
  },
  {
    "text": "reboots and so on um what we also did is um we",
    "start": "737880",
    "end": "743000"
  },
  {
    "text": "basically have different uh sample sharing programs with partners and we kind of looked in a lot of the of",
    "start": "743000",
    "end": "748680"
  },
  {
    "text": "samples that we get from these sample sharing programs in order to understand how many samples actually use Microsoft com at some point and we could see that",
    "start": "748680",
    "end": "755560"
  },
  {
    "text": "around 20% of the samples that we get there actually use Microsoft com Methods at some point which is actually more",
    "start": "755560",
    "end": "762160"
  },
  {
    "text": "than we expected because nobody really talks about this issue so um the sheer fact that every fifth sample just uses",
    "start": "762160",
    "end": "768519"
  },
  {
    "text": "Microsoft com at some point is kind of interesting to us uh you have to say that it very much depends on the sample",
    "start": "768519",
    "end": "774040"
  },
  {
    "text": "type that you analyze so for executables it's not so common to have some com stuff going on in there however for",
    "start": "774040",
    "end": "779399"
  },
  {
    "text": "example for malicious office documents which are almost always using macros um",
    "start": "779399",
    "end": "784639"
  },
  {
    "text": "as I said um it's very common to have some com stuff going on underneath because the runtime just makes heavy use of com so in the end you can you can",
    "start": "784639",
    "end": "791720"
  },
  {
    "text": "just think of it that there are I I just want to mention that there are like tons of other interfaces that also exist in",
    "start": "791720",
    "end": "796760"
  },
  {
    "text": "the windows world that you could use and you can like easily write an entire application in Windows that only accesses Comm interfaces and does you",
    "start": "796760",
    "end": "804079"
  },
  {
    "text": "know doesn't ACC as any normal API so to say and still does whatever you could think of like you can create create",
    "start": "804079",
    "end": "809279"
  },
  {
    "text": "arbitrary files exess regy download data from wherever you want so on and so",
    "start": "809279",
    "end": "815199"
  },
  {
    "text": "forth okay so uh what we did is basically um we wanted to find out how",
    "start": "815199",
    "end": "821519"
  },
  {
    "text": "good do sandboxes perform when analyzing commware and for that we didn't want to use real mware because with real mware",
    "start": "821519",
    "end": "828199"
  },
  {
    "text": "you never really know if the same thing happens again if you analyze it again because for some reason a CNC could be down or sometimes it just acts",
    "start": "828199",
    "end": "834720"
  },
  {
    "text": "differently and for this reason we just basically created test programs test cases which are very small programs 10",
    "start": "834720",
    "end": "841399"
  },
  {
    "text": "or 20 lines of C code and they basically do what meare would do and then we could just use them for testing and because we",
    "start": "841399",
    "end": "848040"
  },
  {
    "text": "all we definitely know what they're doing so we created five different test uh cases and these were inspired by the",
    "start": "848040",
    "end": "855279"
  },
  {
    "text": "typical malware Behavior so um for example mer typically tries to gain persistency in the system it tries to",
    "start": "855279",
    "end": "861480"
  },
  {
    "text": "contact remote host for downloading the next stage or for receiving some commands it tries to evade uh any",
    "start": "861480",
    "end": "867920"
  },
  {
    "text": "existing analysis system so on and so forth the five test cases that we",
    "start": "867920",
    "end": "872959"
  },
  {
    "text": "created are first of all um an auto start test case this is a a small program that creates an auto side entry",
    "start": "872959",
    "end": "879360"
  },
  {
    "text": "using the CLS ID shell link interface CLS ID stands for class ID and is",
    "start": "879360",
    "end": "885079"
  },
  {
    "text": "basically a unique number that identifies every interface that exists in the Comm world the second test case is what we",
    "start": "885079",
    "end": "891959"
  },
  {
    "text": "call the browser test case it uses that previously mentioned Internet Explorer interface in order to contact the remote",
    "start": "891959",
    "end": "897560"
  },
  {
    "text": "server using an encrypted connection the third test case is a firewall test case which only disables",
    "start": "897560",
    "end": "904279"
  },
  {
    "text": "the entire Windows Firewall by accessing um the com interface of the Windows Firewall the fourth test case um is the",
    "start": "904279",
    "end": "910680"
  },
  {
    "text": "file system test case which copies itself into the windows folder using um",
    "start": "910680",
    "end": "915959"
  },
  {
    "text": "the so-called file operation inter interface and then finally we have the new process uh test case which creates",
    "start": "915959",
    "end": "923399"
  },
  {
    "text": "it basically Forks itself so it creates a new process of itself using the wmi um interface because for whatever reason",
    "start": "923399",
    "end": "929440"
  },
  {
    "text": "that is possible with wmi okay so what we then did is we took",
    "start": "929440",
    "end": "934480"
  },
  {
    "text": "these different test cases and we submitted them to different sandboxes that we could get access to uh so for",
    "start": "934480",
    "end": "939519"
  },
  {
    "text": "example we used one uh open source Community sandbox also one public uh version of commercial sandbox and two",
    "start": "939519",
    "end": "945800"
  },
  {
    "text": "other sandboxes we basically use default configurations for all of these so that we could be sure that we're not",
    "start": "945800",
    "end": "951279"
  },
  {
    "text": "misconfigured the system okay so let's just have a look um",
    "start": "951279",
    "end": "956480"
  },
  {
    "text": "a small look at the detection results uh first you could see that the first sent boox which was um um the open source",
    "start": "956480",
    "end": "962759"
  },
  {
    "text": "sent box um doesn't perform too well so um if you take a look at the reports that are generated you're not going to",
    "start": "962759",
    "end": "968199"
  },
  {
    "text": "see anything of what the test cases actually do although we could still see in the screenshots that the test cases",
    "start": "968199",
    "end": "974079"
  },
  {
    "text": "were executing correctly so they were exhibiting their behavior but it was just not part of the locks at this point",
    "start": "974079",
    "end": "980120"
  },
  {
    "text": "we don't really know why that was the case there seems to be an issue underneath and we didn't have the time to look into it but we just have to",
    "start": "980120",
    "end": "985759"
  },
  {
    "text": "accept that so it definitely doesn't perform too well in here obviously so for the other sandboxes let's just go",
    "start": "985759",
    "end": "991399"
  },
  {
    "text": "from the left to the right um in case of the auto start test case um all of the sandboxes detected that and they had",
    "start": "991399",
    "end": "997000"
  },
  {
    "text": "that in the locks and everything is just all fine in case of the browser test case it was kind of like that and by",
    "start": "997000",
    "end": "1003240"
  },
  {
    "text": "kind of I mean that um you could see inside the reports that a remote host was contacted and that there was",
    "start": "1003240",
    "end": "1009040"
  },
  {
    "text": "probably an https connection but what you couldn't see for example is the URL that was being accessed um you also",
    "start": "1009040",
    "end": "1015839"
  },
  {
    "text": "couldn't see the data that was being transferred and often times you want to have that data inside your reports because it helps you in creating white",
    "start": "1015839",
    "end": "1022399"
  },
  {
    "text": "list black lists and so on so nevertheless it's still okay so at least um you could see that a network",
    "start": "1022399",
    "end": "1028280"
  },
  {
    "text": "connection was being made we assume that this is probably due to the case that they are just um passing the network dumps at the end and this was an",
    "start": "1028280",
    "end": "1034438"
  },
  {
    "text": "encrypted connection and because of that you can't find out the URL because it's encrypted data okay so the third um test",
    "start": "1034439",
    "end": "1042079"
  },
  {
    "text": "case which is the firewall test case um for that only the last sandbox actually um had that in the reports all of the",
    "start": "1042079",
    "end": "1047918"
  },
  {
    "text": "other sand boxes had like no entry anywhere which is bad definitely uh for",
    "start": "1047919",
    "end": "1053120"
  },
  {
    "text": "the fourth test case it's kind of like that again except that the third sandbox um if you look at the report there",
    "start": "1053120",
    "end": "1059840"
  },
  {
    "text": "basically like a copied file sections and inside that copied file section there's nothing in there so it didn't",
    "start": "1059840",
    "end": "1065559"
  },
  {
    "text": "understand it at this point that the file was copied however if you look at a low-level report um you can actually",
    "start": "1065559",
    "end": "1070720"
  },
  {
    "text": "find one lock entry inside that lowlevel report that indicates that that file was copied to the windows folder so it's it",
    "start": "1070720",
    "end": "1077080"
  },
  {
    "text": "somehow sees it but it doesn't really interpr intereted right um yeah Ian you",
    "start": "1077080",
    "end": "1082280"
  },
  {
    "text": "would assume that if you're analyzing an unknown piece of malware then you're not going to look into that lowlevel loog because it just contains hundreds or",
    "start": "1082280",
    "end": "1088080"
  },
  {
    "text": "thousands of lines of code and the probability that you will find that one single line of code that is relevant is really low so it's more of an X than a",
    "start": "1088080",
    "end": "1094840"
  },
  {
    "text": "check mark at this point and then finally we have the new process test case and in again only the",
    "start": "1094840",
    "end": "1100760"
  },
  {
    "text": "last sent boox um detected that so to say the other sandboxes didn't realize that there was actually a new process",
    "start": "1100760",
    "end": "1106360"
  },
  {
    "text": "being created and at this point you have to understand that um this is kind of like a worst case scenario because with",
    "start": "1106360",
    "end": "1112520"
  },
  {
    "text": "sandboxing what you do is you never monitor all of the processes in the system you start by monitoring the first",
    "start": "1112520",
    "end": "1118760"
  },
  {
    "text": "process for example word and then if that process creates a new process you also monitor that process or if that",
    "start": "1118760",
    "end": "1124919"
  },
  {
    "text": "process injects into another process you also monitor that process and that's how it works this also means that if you",
    "start": "1124919",
    "end": "1130919"
  },
  {
    "text": "don't understand that a new process is being created by by by your monitor process then you're not going to monitor",
    "start": "1130919",
    "end": "1136000"
  },
  {
    "text": "it and everything that happens in there is not part of the locks anymore right so it's you can do whatever you want and",
    "start": "1136000",
    "end": "1142559"
  },
  {
    "text": "the only thing that you can have is have some sort of fallback mechanisms that work on the network dumps or so in order to find out stuff but this is definitely",
    "start": "1142559",
    "end": "1149200"
  },
  {
    "text": "not what you want to have so you definitely want to understand that something like this goes",
    "start": "1149200",
    "end": "1154280"
  },
  {
    "text": "on okay so if we just take a look at it again how could we interpret the results",
    "start": "1154280",
    "end": "1160880"
  },
  {
    "text": "it looks like the last sent box is the best one it didn't get evaded so um it",
    "start": "1160880",
    "end": "1165960"
  },
  {
    "text": "only had like small problems in the with the second test case and you could say that well that's the best sandbox the",
    "start": "1165960",
    "end": "1171360"
  },
  {
    "text": "other ones they just have implementation flaws and somebody has to go there and fix them but it turns out that it's not",
    "start": "1171360",
    "end": "1177679"
  },
  {
    "text": "quite like like that and that's for the following reason uh noise if you look",
    "start": "1177679",
    "end": "1182960"
  },
  {
    "text": "into the reports of these sandboxes you will see an surprising amount of noise and by noise I mean behavior that is in",
    "start": "1182960",
    "end": "1189280"
  },
  {
    "text": "there but that's not actually part of the test cases so as I said the test cases are pretty small programs and um",
    "start": "1189280",
    "end": "1196559"
  },
  {
    "text": "if there's something in there in the reports which is not part of these 10 or 20 lines of code and that's basically noise um for example with sbox 2 you",
    "start": "1196559",
    "end": "1204640"
  },
  {
    "text": "could see that there are a lot of wrong ioc's in the reports ioc means indicator of compromise and these are basically",
    "start": "1204640",
    "end": "1210440"
  },
  {
    "text": "host names or files that are were accessed during the analysis by the sample and then there's stuff in there",
    "start": "1210440",
    "end": "1215559"
  },
  {
    "text": "such as like Microsoft puncom uh but also other IPS and other host names which are just not we just never access",
    "start": "1215559",
    "end": "1222440"
  },
  {
    "text": "them in the test cases so uh that's not good because it uh increases your false positive rate and it it also makes you",
    "start": "1222440",
    "end": "1228760"
  },
  {
    "text": "make draw wrong conclusions uh for sandbox number three it was a bit worse um actually um the",
    "start": "1228760",
    "end": "1235679"
  },
  {
    "text": "behavior detections that it um that it has actually detect stuff such as anti-reverse engineering which is",
    "start": "1235679",
    "end": "1241760"
  },
  {
    "text": "interesting because we do not have any anti-reverse engineering inside our test cases so why is it part of the locks it",
    "start": "1241760",
    "end": "1248039"
  },
  {
    "text": "also detects stuff such as suspicious Imports uh and these are Imports which",
    "start": "1248039",
    "end": "1253559"
  },
  {
    "text": "we do not import um they also have nothing to do with comdes there and yeah it's kind of the question arises where",
    "start": "1253559",
    "end": "1259760"
  },
  {
    "text": "does that come from and then finally if you take a look at the last sand box which performed by far the best it",
    "start": "1259760",
    "end": "1265039"
  },
  {
    "text": "basically contains um of a report it basically has a report which contains of 136 events um an event is something like",
    "start": "1265039",
    "end": "1272240"
  },
  {
    "text": "a five was access a process was access but also a certain behavior that was detected and if you just go through that",
    "start": "1272240",
    "end": "1278159"
  },
  {
    "text": "and you try to extract the these events that are actually related to um what the test cases do and even if you're not",
    "start": "1278159",
    "end": "1284880"
  },
  {
    "text": "strict in doing so you will come up with a number such as 32 and this means like",
    "start": "1284880",
    "end": "1290039"
  },
  {
    "text": "almost 80% of um these events are noise it's just stuff that's in there but that's not really part of the test cases",
    "start": "1290039",
    "end": "1296159"
  },
  {
    "text": "you know files that were access which are not part of the test cases host that were access which are not part of the test cases so on and so forth it also",
    "start": "1296159",
    "end": "1302679"
  },
  {
    "text": "has detects Behavior such as um a TCP Port was opened um code was injected",
    "start": "1302679",
    "end": "1307960"
  },
  {
    "text": "into another process again none of that is part of the test cases uh also it detects that",
    "start": "1307960",
    "end": "1313440"
  },
  {
    "text": "the Explorer process was tempered this basically means that marware sometimes does that in order to do what for",
    "start": "1313440",
    "end": "1319039"
  },
  {
    "text": "whatever reasons but we just don't do do not do that in the test cases so it seems like um the better the sandboxes",
    "start": "1319039",
    "end": "1325760"
  },
  {
    "text": "perform so to say the more noise they have inside um inside the reports and uh",
    "start": "1325760",
    "end": "1331880"
  },
  {
    "text": "yeah we thought that was kind of interesting so we took a closer look into it and try to understand uh why",
    "start": "1331880",
    "end": "1337080"
  },
  {
    "text": "this is actually the",
    "start": "1337080",
    "end": "1339799"
  },
  {
    "text": "case so uh in order to understand uh where the that effect comes from you",
    "start": "1344200",
    "end": "1349720"
  },
  {
    "text": "basically have to understand how sandboxing works in the inside so let's just have a small Excursion on the",
    "start": "1349720",
    "end": "1355880"
  },
  {
    "text": "different approaches that you can take in order to um to create a Sandbox the core of each s sandbox is basically that",
    "start": "1355880",
    "end": "1362400"
  },
  {
    "text": "monitoring engine that I talked about previously and when it comes to um that monitoring engine there are basically",
    "start": "1362400",
    "end": "1368080"
  },
  {
    "text": "three approaches that you can take first of all what you can do is you can do hooking uh hooking means that you",
    "start": "1368080",
    "end": "1374320"
  },
  {
    "text": "install hooks at various location inside the system that you analyze you usually that means overwriting code of the",
    "start": "1374320",
    "end": "1380360"
  },
  {
    "text": "operating system but you could also overwrite certain data pointers um and the idea behind that is you just for",
    "start": "1380360",
    "end": "1386679"
  },
  {
    "text": "example you overwrite code so that every time an interesting operating system function is called such as the function",
    "start": "1386679",
    "end": "1392000"
  },
  {
    "text": "that is used to create a file uh that hook is triggered and then the H detour into your monitoring engine and then",
    "start": "1392000",
    "end": "1398400"
  },
  {
    "text": "your sandbox understands that that file was created and then you can just lock that put that into your locks yeah and",
    "start": "1398400",
    "end": "1404520"
  },
  {
    "text": "then after that it'll just jump back into the actual code and everything just looks at as if it was just as if nothing",
    "start": "1404520",
    "end": "1411120"
  },
  {
    "text": "of that happen so it's transparent um the advantage of that is that it's quite fast because you can analyze the program",
    "start": "1411120",
    "end": "1417559"
  },
  {
    "text": "on on real Hardware using um virtualized virtualized system with hardware virtualization on that's the advantage",
    "start": "1417559",
    "end": "1423919"
  },
  {
    "text": "the disadvantage is that it can be detected because mware can detect that these kind of hooks exist inside the",
    "start": "1423919",
    "end": "1430039"
  },
  {
    "text": "system then the second approach is the emulation approach approach the difference uh in that is that you're",
    "start": "1430039",
    "end": "1436159"
  },
  {
    "text": "actually emulating the entire system system in which you do the analysis and this includes every Hardware device so",
    "start": "1436159",
    "end": "1442520"
  },
  {
    "text": "um including the main CPU of the system yeah um this has one big Advantage with",
    "start": "1442520",
    "end": "1447960"
  },
  {
    "text": "it which is that um you do not need to place hooks anywhere in the system anymore also it's quite powerful because",
    "start": "1447960",
    "end": "1454000"
  },
  {
    "text": "you in control of everything when you when you're emulating the entire system you can even see machine instructions",
    "start": "1454000",
    "end": "1459520"
  },
  {
    "text": "and so on so it's it's quite powerful uh that's the advantage of this the disadvantage is that it's very slow also",
    "start": "1459520",
    "end": "1465520"
  },
  {
    "text": "because for emulation of course comes with a great performance overhead so you",
    "start": "1465520",
    "end": "1470640"
  },
  {
    "text": "have to somehow deal with that uh there's also a third approach which is a transition based approach as I'm going",
    "start": "1470640",
    "end": "1476279"
  },
  {
    "text": "to talk about this in the very end so I will just skip that over here so um the",
    "start": "1476279",
    "end": "1481799"
  },
  {
    "text": "vast majority of systems actually use hooking which is why I will just confine myself to hooking there are also",
    "start": "1481799",
    "end": "1487840"
  },
  {
    "text": "emulation based system but if you're using a Sandbox and you don't know whether it uses hooking or sandboxing then chances are very high that it",
    "start": "1487840",
    "end": "1493840"
  },
  {
    "text": "actually uses hooking okay so um just uh sit back and",
    "start": "1493840",
    "end": "1499080"
  },
  {
    "text": "now um try to think of the different design goals that you would that you would come up with if you Tred to create",
    "start": "1499080",
    "end": "1506039"
  },
  {
    "text": "such a fandbox and I just basically put five different points on here which is something that we um yeah some design",
    "start": "1506039",
    "end": "1512679"
  },
  {
    "text": "goals that we think are interesting or that we found to be interesting during our our development uh first of all no",
    "start": "1512679",
    "end": "1518120"
  },
  {
    "text": "evasion is obviously important and by that I mean um you don't want the proc the sample that you analyze to create",
    "start": "1518120",
    "end": "1524159"
  },
  {
    "text": "new processes Without You noticing it so you just want to have all of the behavior inside your reports uh secondly",
    "start": "1524159",
    "end": "1530159"
  },
  {
    "text": "no noise although no noise is a bit of an ex exaggeration actually so um sometimes you just will have noise",
    "start": "1530159",
    "end": "1535799"
  },
  {
    "text": "inside your reports it's it's hard to do without it but nevertheless you do not want to have too much noise in it so you don't want to have like 90% noise or in",
    "start": "1535799",
    "end": "1542799"
  },
  {
    "text": "your report because again that just leads to higher false positives lower true positives to um drawing wrong",
    "start": "1542799",
    "end": "1550200"
  },
  {
    "text": "conclusions so on and so forth uh third point is stealthiness um you don't want to leave a big footprint in the system",
    "start": "1550200",
    "end": "1556399"
  },
  {
    "text": "because then it's easier to detect you uh stability is obviously an issue",
    "start": "1556399",
    "end": "1561880"
  },
  {
    "text": "as with every software in terms of hooking that often times means that if you're using code overwriting in hooking",
    "start": "1561880",
    "end": "1566919"
  },
  {
    "text": "then um so for technical reasons sometimes it just it just doesn't work in in rare cases and if in this case the",
    "start": "1566919",
    "end": "1573279"
  },
  {
    "text": "the hook is being triggered like the entire system can grash and that's bad because then you don't have any analysis anymore finally performance is also",
    "start": "1573279",
    "end": "1580440"
  },
  {
    "text": "important and by that I mean that you don't want to slow down the system so much so that in the end you're not going to see the relevant stuff anymore within",
    "start": "1580440",
    "end": "1586679"
  },
  {
    "text": "the short time frame that you have okay so I'll just go ahead and say that",
    "start": "1586679",
    "end": "1592279"
  },
  {
    "text": "goals 3 four and five can only be achieved by limiting the amount of hooks and that's for the following reason if",
    "start": "1592279",
    "end": "1597640"
  },
  {
    "text": "you have too many hooks then you're not going to be stealthy anymore it'll it'll be easier to detect you um you will also",
    "start": "1597640",
    "end": "1603360"
  },
  {
    "text": "probably run into stability um stability issues if you have too many hooks because the more hooks you have chances",
    "start": "1603360",
    "end": "1608960"
  },
  {
    "text": "the higher the chances that something uh goes wrong and the system crashes uh and finally performance also",
    "start": "1608960",
    "end": "1615200"
  },
  {
    "text": "because the more hooks you have the more detour are being taken during the ex execution and every detour imposes some",
    "start": "1615200",
    "end": "1620640"
  },
  {
    "text": "sort of performance overhead and if if you have too too much of that then you will run into",
    "start": "1620640",
    "end": "1625760"
  },
  {
    "text": "problems okay so uh yeah let's let's think about one of the main challenges",
    "start": "1625760",
    "end": "1631440"
  },
  {
    "text": "that you will have um when that Still Remains open right now and this is actually where do you place your hooks",
    "start": "1631440",
    "end": "1637720"
  },
  {
    "text": "inside the system this is like the main decision that you need um that you will make and it turns out like the more you think about it at this point that there",
    "start": "1637720",
    "end": "1644919"
  },
  {
    "text": "is not too much room for decision making and this is for the following reason so imagine that you're analyzing a",
    "start": "1644919",
    "end": "1650919"
  },
  {
    "text": "malware and that malware wants to create a new process this is definitely something that you want to detect so in",
    "start": "1650919",
    "end": "1657240"
  },
  {
    "text": "order to create a new process you can call multiple or various different functions inside windows you can call",
    "start": "1657240",
    "end": "1663679"
  },
  {
    "text": "officially documented functions such as create process for example um there exist different types of that there also",
    "start": "1663679",
    "end": "1670559"
  },
  {
    "text": "exists a lot of other functions inside windows um most of them for backwards compatibility um others exist for rare",
    "start": "1670559",
    "end": "1678519"
  },
  {
    "text": "Corner cases um this is not a full list of the different functions that you can actually use to create a new process um",
    "start": "1678519",
    "end": "1684080"
  },
  {
    "text": "there are many more it's just just to show you the problem um so if you want",
    "start": "1684080",
    "end": "1689880"
  },
  {
    "text": "to place Hooks and you want to understand that a new process is being created for example you could hook all of these different functions but then",
    "start": "1689880",
    "end": "1695080"
  },
  {
    "text": "you would have to have a lot of hooks what is also the case um is that instead",
    "start": "1695080",
    "end": "1701039"
  },
  {
    "text": "of these officially official API functions that exist inside windows DLS you also have internal funes for example",
    "start": "1701039",
    "end": "1707760"
  },
  {
    "text": "create process functions usually maap to one function called create process internal this exists inside kernel 32",
    "start": "1707760",
    "end": "1715159"
  },
  {
    "text": "and it is an internal function it's not documented officially by Microsoft but you can still call it if you want to",
    "start": "1715159",
    "end": "1721120"
  },
  {
    "text": "right normally you would never do that because it uh breaks compatibility with future versions of Windows and it's it's",
    "start": "1721120",
    "end": "1726960"
  },
  {
    "text": "very bad programming style to do that but if you're malware you do not care about conventions and why not just call",
    "start": "1726960",
    "end": "1732480"
  },
  {
    "text": "it directly because if somebody only hooked the other functions then he just got evaded right so so we actually see",
    "start": "1732480",
    "end": "1738840"
  },
  {
    "text": "that happening a lot of times a lot of me just calls these internal functions directly what they even also do which is",
    "start": "1738840",
    "end": "1745080"
  },
  {
    "text": "more problematic is that sometimes they actually do not call these functions directly but they will call like the second or third instruction inside these",
    "start": "1745080",
    "end": "1751600"
  },
  {
    "text": "functions and that can actually to actually lead to quite some problems because if you place your hooks in the",
    "start": "1751600",
    "end": "1757360"
  },
  {
    "text": "first instruction and the marer just jumps over it then either you get you get evaded or the system just crashes",
    "start": "1757360",
    "end": "1763320"
  },
  {
    "text": "because it just jumps inside your hooked instruction so this is also an issue that you have to deal with",
    "start": "1763320",
    "end": "1768679"
  },
  {
    "text": "what you see here is basically what I just call the um during the presentation I just call this the first layer of",
    "start": "1768679",
    "end": "1774200"
  },
  {
    "text": "Windows API functions this is where all of the the officially documented Windows API functions",
    "start": "1774200",
    "end": "1779679"
  },
  {
    "text": "are um yeah after that there is also a second layer of API functions which is",
    "start": "1779679",
    "end": "1786559"
  },
  {
    "text": "the ntdll layer this is one dll file that exists in every Windows process and it's basically a very condensed API so",
    "start": "1786559",
    "end": "1794039"
  },
  {
    "text": "it's much smaller than the first layer API and a lot of the functions in the first layer layer they often times map",
    "start": "1794039",
    "end": "1799480"
  },
  {
    "text": "to like the second function to to reduce code duplication or they just call some",
    "start": "1799480",
    "end": "1804640"
  },
  {
    "text": "other functions on the second layer and in case of creating a process there is a function called anti create process or",
    "start": "1804640",
    "end": "1810399"
  },
  {
    "text": "RTL create process whatever the name is and that is being called at some point but of course what you can do as a mware",
    "start": "1810399",
    "end": "1815440"
  },
  {
    "text": "you can just call these functions directly and this means you also want to hook these functions because otherwise again you got evaded and then finally uh",
    "start": "1815440",
    "end": "1822880"
  },
  {
    "text": "inside antd a sis call is is done inside the kernel and then the kernel actually handles that create process request but",
    "start": "1822880",
    "end": "1829200"
  },
  {
    "text": "what you can do also as well is you can just do that system call directly inside the kernel and then you just jump over",
    "start": "1829200",
    "end": "1834880"
  },
  {
    "text": "the entire user mode thing so I hope the the idea of all of that got clear the thing is just simply there are so many",
    "start": "1834880",
    "end": "1840279"
  },
  {
    "text": "different ways with which you can create a process that it's really hard to put a hook in",
    "start": "1840279",
    "end": "1845799"
  },
  {
    "text": "all of these functions right and the same problem exists for a lot of other um situations for example if you want to",
    "start": "1845799",
    "end": "1851840"
  },
  {
    "text": "create a file there are also tons of functions with which you can create a file so on and so forth so what will you do in the end uh in the end what you",
    "start": "1851840",
    "end": "1858159"
  },
  {
    "text": "will do is uh the only reasonable thing is to place your hooks in the lower layers because the lower layers they're",
    "start": "1858159",
    "end": "1863880"
  },
  {
    "text": "just condensed and the idea behind that is that well if something interesting happens if somebody wants to create a",
    "start": "1863880",
    "end": "1869360"
  },
  {
    "text": "process at some point it'll end up in a lower layer function inside antl or inside the kernel and if I just hook in",
    "start": "1869360",
    "end": "1875000"
  },
  {
    "text": "there I will see it anyway so I don't have to bother hooking all of the create bres functions and this is basically how",
    "start": "1875000",
    "end": "1880799"
  },
  {
    "text": "every hooking sent boox Works what they what you will do often times is you will um like hook certain",
    "start": "1880799",
    "end": "1888320"
  },
  {
    "text": "rare you will rarely hook stuff in the first layer when you think that's interesting but that's really the exception most most of the time you just",
    "start": "1888320",
    "end": "1894639"
  },
  {
    "text": "rely on hooking on the lower layers okay so um yeah another challenge",
    "start": "1894639",
    "end": "1900679"
  },
  {
    "text": "that you have to deal with is you have to handle noise somehow uh I talked about that quite a bit uh but just one",
    "start": "1900679",
    "end": "1906200"
  },
  {
    "text": "slide in order to explain where this actual problem comes from so imagine",
    "start": "1906200",
    "end": "1911360"
  },
  {
    "text": "that you um hook inside um a malware program that does something so usually that malware will just call First layer",
    "start": "1911360",
    "end": "1918200"
  },
  {
    "text": "functions some of them will map to second layer functions and some of these second layer functions are hooked because they're interesting and then the",
    "start": "1918200",
    "end": "1925480"
  },
  {
    "text": "the sandbox just understands that something happens and locks that so this is usually what what you would expect and usually what's also going on but",
    "start": "1925480",
    "end": "1931919"
  },
  {
    "text": "what what also goes on for example is that uh sometimes if certain OS libraries are being started or being",
    "start": "1931919",
    "end": "1938080"
  },
  {
    "text": "used in the system such as wind sock which is responsible for uh all Network stuff in Windows then these OS libraries",
    "start": "1938080",
    "end": "1945080"
  },
  {
    "text": "they will create own threats inside that process and um these threats they just run in",
    "start": "1945080",
    "end": "1950720"
  },
  {
    "text": "the same process and they also do stuff they also just call functions yeah on the first layer on the second layer and",
    "start": "1950720",
    "end": "1955960"
  },
  {
    "text": "due to the way that hooking Works basically um you will also see all of that because you're hooking inside the",
    "start": "1955960",
    "end": "1961639"
  },
  {
    "text": "entire process and you will also see all of that but however um this this",
    "start": "1961639",
    "end": "1966919"
  },
  {
    "text": "behavior is not really part of the test of sorry of the sample itself right because um it's indirectly related to it",
    "start": "1966919",
    "end": "1973440"
  },
  {
    "text": "but it doesn't reveal anything that's actually directly done by the sample and this is actually the reason in the end",
    "start": "1973440",
    "end": "1979639"
  },
  {
    "text": "why you have all of that noise so basically you have just a lot of stuff that goes on inside that processes that you Monitor and in the end you have to",
    "start": "1979639",
    "end": "1986200"
  },
  {
    "text": "filter out whether um that call that you see whether this is actually related to that sample or not in case of these OS",
    "start": "1986200",
    "end": "1993360"
  },
  {
    "text": "internal threats you could handle that probably somehow but just imagine that",
    "start": "1993360",
    "end": "1998679"
  },
  {
    "text": "you hook inside a Brower such as um Internet Explorer or Microsoft Word these are just super complex",
    "start": "1998679",
    "end": "2004480"
  },
  {
    "text": "applications where um a lot of stuff goes on and you have to filter out what's relevant to you or not so you",
    "start": "2004480",
    "end": "2010600"
  },
  {
    "text": "have to understand whether this call comes from the the the macro that's being executed or whether it comes from the guy or not and that's really hard to",
    "start": "2010600",
    "end": "2017120"
  },
  {
    "text": "solve and um this is basically why you have that that kind of noise inside the report so thirdly um yeah the last",
    "start": "2017120",
    "end": "2024559"
  },
  {
    "text": "chance that remains I just had wanted to have one slide on this is basically sometimes um if if if you're um",
    "start": "2024559",
    "end": "2031440"
  },
  {
    "text": "monitoring in the back of the system inside an TDL then certain functions will not be seen because some of them",
    "start": "2031440",
    "end": "2037320"
  },
  {
    "text": "are already dealt with at the first layer simple functions such as get the current date they do not map to second",
    "start": "2037320",
    "end": "2043559"
  },
  {
    "text": "layer functions and if you don't monitor or hook them directly if they are called you will just not see that and sometimes",
    "start": "2043559",
    "end": "2049599"
  },
  {
    "text": "this could be interesting because for example the marware could only run on February 2nd or so and U it sometimes",
    "start": "2049599",
    "end": "2056200"
  },
  {
    "text": "it's just good to to have that kind of information so you have to make a decision as to whether you want to monitor that function too or",
    "start": "2056200",
    "end": "2062200"
  },
  {
    "text": "not interestingly interestingly also the exact opposite problem exists and that's",
    "start": "2062200",
    "end": "2067240"
  },
  {
    "text": "for the reason that um these different layers they work at different levels so the first layer is is basically a high",
    "start": "2067240",
    "end": "2073280"
  },
  {
    "text": "level layer so to say and the ntid Lev is more lowlevel layer imagine that the mware calls a function that just",
    "start": "2073280",
    "end": "2080000"
  },
  {
    "text": "downloads a file from a URL right so these functions exist in Windows downloading a file involves a lot of",
    "start": "2080000",
    "end": "2086118"
  },
  {
    "text": "subtasks it means that you have to resolve the uh the host name um you have to set up a network connection to that",
    "start": "2086119",
    "end": "2092440"
  },
  {
    "text": "host uh you have to send you a query to that host you have to read all of the",
    "start": "2092440",
    "end": "2098160"
  },
  {
    "text": "return data from the network then you have to create a file locally and then you have to write all of that data to",
    "start": "2098160",
    "end": "2103400"
  },
  {
    "text": "that file uh and that's quite a lot of stuff and the thing is U due to the way",
    "start": "2103400",
    "end": "2109440"
  },
  {
    "text": "it works in in the lower layer you will only see these subtasks so you you will only see that some a host name is",
    "start": "2109440",
    "end": "2115760"
  },
  {
    "text": "resolved you will only see that a lot of right files are being done or a lot of receives are being done and it's kind of",
    "start": "2115760",
    "end": "2121359"
  },
  {
    "text": "hard often times to understand what is going on on the big picture because it's obviously it's a more valuable",
    "start": "2121359",
    "end": "2127040"
  },
  {
    "text": "information to know that a file was downloaded other than there were thousand of calls to write file right so",
    "start": "2127040",
    "end": "2134079"
  },
  {
    "text": "um yeah sometimes again you just you have that what I call the the Avalanche effect and you have to understand how you how you want to deal with all of",
    "start": "2134079",
    "end": "2141040"
  },
  {
    "text": "that okay so what does all of that have to do with Comm so first of",
    "start": "2141040",
    "end": "2147119"
  },
  {
    "text": "all you have to understand that due to the way that com works it is basically an additional API layer that's being",
    "start": "2147119",
    "end": "2153599"
  },
  {
    "text": "introduced into the system so com com interfaces they usually work on a higher",
    "start": "2153599",
    "end": "2159400"
  },
  {
    "text": "layer than the first API layer that's just the way that com was designed so you can just think of it very simply",
    "start": "2159400",
    "end": "2164960"
  },
  {
    "text": "that there is this other layer of stuff that exists inside the processes and if meway uses it uh this will just make all",
    "start": "2164960",
    "end": "2171760"
  },
  {
    "text": "of your all of the your form mention problems worse because first of all you will have to filter out even more noise",
    "start": "2171760",
    "end": "2177680"
  },
  {
    "text": "that is being generated due to that higher level of com interfaces uh",
    "start": "2177680",
    "end": "2183440"
  },
  {
    "text": "secondly you will have even more CS that go un un noticed on the first layer because um they just handled with inside",
    "start": "2183440",
    "end": "2190560"
  },
  {
    "text": "the column implementations already and thirdly that avalan Avalanche effect that I talked about is",
    "start": "2190560",
    "end": "2196480"
  },
  {
    "text": "even worse because um you will just have more of these functions being more of these subtask functions so so to say",
    "start": "2196480",
    "end": "2202280"
  },
  {
    "text": "that are being generated so that's already pretty pretty bad and basically explain why explains a lot of the stuff",
    "start": "2202280",
    "end": "2208920"
  },
  {
    "text": "that I um talked about previously but this is actually not the biggest problem the bigger problem is like the second",
    "start": "2208920",
    "end": "2214200"
  },
  {
    "text": "issue which is um comp supports stuff such as RPC RPC stands for remote procedure call and",
    "start": "2214200",
    "end": "2222000"
  },
  {
    "text": "it means that if you call a method inside your process it doesn't mean that this meth this method is actually",
    "start": "2222000",
    "end": "2228400"
  },
  {
    "text": "executed in your process you can actually let it be executed in a completely different process inside the",
    "start": "2228400",
    "end": "2233800"
  },
  {
    "text": "operating system yeah and this basically works the following way so just imagine",
    "start": "2233800",
    "end": "2239119"
  },
  {
    "text": "that uh you analyze a malware that wants to create a new process using that wmi",
    "start": "2239119",
    "end": "2244680"
  },
  {
    "text": "interface that I mentioned previously so what it can do is Can it can just",
    "start": "2244680",
    "end": "2249960"
  },
  {
    "text": "initialize Comm and say okay I want to um I want all of these method calls to be executed as rpcs and then it just",
    "start": "2249960",
    "end": "2256520"
  },
  {
    "text": "does the method call and um what will happen is that there will be something such as a com proxy interface inside",
    "start": "2256520",
    "end": "2262640"
  },
  {
    "text": "that process this is more or less like a small shim it just receives that com call and then what it does is it",
    "start": "2262640",
    "end": "2268880"
  },
  {
    "text": "Marshals all of the relevant information such as the interface name the method name and the different kind of par",
    "start": "2268880",
    "end": "2275240"
  },
  {
    "text": "parameters so all of that is Marshall into a Big Blob of binary data using some internal format and then that big",
    "start": "2275240",
    "end": "2282480"
  },
  {
    "text": "for um Big Blob of data is sent to the Comm server process that should handle it using an an RPC yeah so RPC is a",
    "start": "2282480",
    "end": "2290319"
  },
  {
    "text": "mechanism provided by the Windows operating system uh so an RPC function will be called that will go through",
    "start": "2290319",
    "end": "2295800"
  },
  {
    "text": "these layers to the kernel the kernel then knows that which com server process is responsible for this RPC and then it",
    "start": "2295800",
    "end": "2303440"
  },
  {
    "text": "will just deliver that big blop of binary data that it doesn't understand it just knows that it's it's some data and it will just deliver that to that",
    "start": "2303440",
    "end": "2309599"
  },
  {
    "text": "com server process and over there the entire data just goes back the other way and it's being unmarshal",
    "start": "2309599",
    "end": "2315760"
  },
  {
    "text": "yeah in this case there will be like a com implementation inside that com server process and this will actually",
    "start": "2315760",
    "end": "2321359"
  },
  {
    "text": "then execute the method which is it will create a new process so uh why is that problematic uh",
    "start": "2321359",
    "end": "2328920"
  },
  {
    "text": "the problematic thing is as I've said um in sandboxing you do not monitor all of",
    "start": "2328920",
    "end": "2334599"
  },
  {
    "text": "the processes and what a lot of sandboxes do usually is you have a",
    "start": "2334599",
    "end": "2339640"
  },
  {
    "text": "fallback mechanism that just says okay if a new process is created in the system then I just look what was the",
    "start": "2339640",
    "end": "2345160"
  },
  {
    "text": "parent process of that newly created process and if the parent process was also monitored then I will monitor that",
    "start": "2345160",
    "end": "2351079"
  },
  {
    "text": "process right so this is a very easy way in order to you know monitor all relevant processes however it does not",
    "start": "2351079",
    "end": "2357680"
  },
  {
    "text": "work in this case because uh the parent process will be the com server process which is not monitored it's just one",
    "start": "2357680",
    "end": "2363560"
  },
  {
    "text": "operating system process that just exists for some reason and this is actually the reason while all of the um all of the other sandboxes except the",
    "start": "2363560",
    "end": "2369960"
  },
  {
    "text": "fourth one got evaded at this point because that new process is being created out of a com server process and if you don't understand that this is",
    "start": "2369960",
    "end": "2376240"
  },
  {
    "text": "going on you just you just got evaded so how could you deal with that",
    "start": "2376240",
    "end": "2383119"
  },
  {
    "text": "the more you think about it is that very simply speaking the problem is right now imagine all of that goes on and all you",
    "start": "2383119",
    "end": "2390520"
  },
  {
    "text": "see is basically what happens at the NTD or inside the kernel yeah so you you're",
    "start": "2390520",
    "end": "2395960"
  },
  {
    "text": "basically just going to see the fact that there is an RPC uh you will see a big block of data of binary data in an",
    "start": "2395960",
    "end": "2401920"
  },
  {
    "text": "internal format and you kind of you don't really know what's going on here you don't really know what method is",
    "start": "2401920",
    "end": "2407319"
  },
  {
    "text": "being called what are the parameters and that's actually really hard to find out because um the thing is all of this is",
    "start": "2407319",
    "end": "2413480"
  },
  {
    "text": "internal information if you wanted to interpret interpret this Big Blob of data then you would need to know a lot of the internal stuff that goes that",
    "start": "2413480",
    "end": "2421400"
  },
  {
    "text": "that happens inside Comm and believe me com is like super complex as I said it's I don't know it was created in the 80s",
    "start": "2421400",
    "end": "2426720"
  },
  {
    "text": "so it's still has support for all of the backwards compatibility stuff and it's being used all the time so you would",
    "start": "2426720",
    "end": "2431760"
  },
  {
    "text": "have to reverse engineer basically all of that and actually it's even possible for the interfaces to decide themselves",
    "start": "2431760",
    "end": "2437560"
  },
  {
    "text": "how stuff is being marshalled so some interfaces they just have a custom marshalling and you would have to understand that for every interface and",
    "start": "2437560",
    "end": "2443599"
  },
  {
    "text": "that's really a lot of work and then like Microsoft or the the implementers of these interfaces they can just",
    "start": "2443599",
    "end": "2448800"
  },
  {
    "text": "they're free to adjust anything anytime they want so this is definitely a very very tough road and I don't know I don't",
    "start": "2448800",
    "end": "2454359"
  },
  {
    "text": "know anybody who um went this road and I doubt any body ever will because it's just very",
    "start": "2454359",
    "end": "2459480"
  },
  {
    "text": "complicated so uh what Still Remains then is that well as a fallback mechanism what you could still do is",
    "start": "2459480",
    "end": "2465560"
  },
  {
    "text": "like even if you don't understand what the what com method is being called you could just simply say that okay I see",
    "start": "2465560",
    "end": "2471960"
  },
  {
    "text": "that an RPC is being done into another process so I can just monitor that process I can just monitor that com",
    "start": "2471960",
    "end": "2477160"
  },
  {
    "text": "server process and then um yeah I will also monitor that new process but then the problem is um how do you filter out",
    "start": "2477160",
    "end": "2483720"
  },
  {
    "text": "all of the noise that happens inside that process if the server process is an Internet Explorer and this happens to be",
    "start": "2483720",
    "end": "2489680"
  },
  {
    "text": "the fact if you're using the com interface then you will see all of the behavior of the Internet Explorer in there and how do you filter all of that",
    "start": "2489680",
    "end": "2495520"
  },
  {
    "text": "out um the same goes for Microsoft Word or so this is one big problem and",
    "start": "2495520",
    "end": "2500800"
  },
  {
    "text": "secondly there what can also happen and what actually does happen is there are other processes in the system there are",
    "start": "2500800",
    "end": "2507200"
  },
  {
    "text": "that are not monitored that are part of of Windows and they do the same com method calls the same time and they are",
    "start": "2507200",
    "end": "2512359"
  },
  {
    "text": "handled in the same comp server process so you would have to understand you would have to filter these out too",
    "start": "2512359",
    "end": "2517560"
  },
  {
    "text": "because you don't want to have that inside your reports so um yeah in in the end what I want to",
    "start": "2517560",
    "end": "2525040"
  },
  {
    "text": "say at this point is simply that the more you think about it the more you it kind of becomes obvious how hard it is",
    "start": "2525040",
    "end": "2530400"
  },
  {
    "text": "to solve this problem because you basically have two routes which you can go first of all you can say like I'm just not dealing with all of it I just",
    "start": "2530400",
    "end": "2536200"
  },
  {
    "text": "ignore it okay that's fine but then you got evaded the second one is that well I'll just try to monitor as much as goes",
    "start": "2536200",
    "end": "2542599"
  },
  {
    "text": "on inside the system uh you could do that as well but then you have the problem that you will have so much noise the system because you're monitoring so",
    "start": "2542599",
    "end": "2548440"
  },
  {
    "text": "much stuff and with all of that in mind if you just take a look at um if you take a look again at the noise that we",
    "start": "2548440",
    "end": "2554880"
  },
  {
    "text": "had in the last sandbox uh first of all you could say you could see that it says it opens a new TCP Port actually um this",
    "start": "2554880",
    "end": "2562800"
  },
  {
    "text": "is not something that's done by the test cases however this is something that happens inside the Internet Explorer com",
    "start": "2562800",
    "end": "2567960"
  },
  {
    "text": "process at some point simply because uh for internal reasons it just opens a com TCP port and it seems like the sandbox",
    "start": "2567960",
    "end": "2574599"
  },
  {
    "text": "detects this and it as I said it's hard to understand that this is actually not part of the of the samples secondly code",
    "start": "2574599",
    "end": "2580880"
  },
  {
    "text": "injection um again that was detected but not done by the test cases however the",
    "start": "2580880",
    "end": "2586000"
  },
  {
    "text": "come runtime does rpcs and doing rpcs rpcs can be used for code injection in some points so some my way uses that but",
    "start": "2586000",
    "end": "2593040"
  },
  {
    "text": "this is not what is actually going on here and it seems like the sandbox has misinterpreted as rpcs so and and again",
    "start": "2593040",
    "end": "2598839"
  },
  {
    "text": "it's really hard to to to find out whether this is recode injection or not and basically the same in the end goes",
    "start": "2598839",
    "end": "2604920"
  },
  {
    "text": "for the tempus Explorer um um noise that was found and in that case it's just that that force test case that copies",
    "start": "2604920",
    "end": "2611640"
  },
  {
    "text": "itself to the windows folder what it does is it does an RPC and this RPC is um executed in a Windows Explorer",
    "start": "2611640",
    "end": "2618280"
  },
  {
    "text": "process and uh it seems like this made the sandbox believe that actually the",
    "start": "2618280",
    "end": "2624280"
  },
  {
    "text": "test cases they temper with the Explorer at this point but again that's just not really right so yeah so",
    "start": "2624280",
    "end": "2630880"
  },
  {
    "text": "um yeah the thing right now is uh when you when you think about it and think",
    "start": "2630880",
    "end": "2636280"
  },
  {
    "text": "about where the problem then one solution that might help you a lot with",
    "start": "2636280",
    "end": "2642119"
  },
  {
    "text": "fixing all of these problems or fixing them even by Design would be that instead of seeing or of monitoring the",
    "start": "2642119",
    "end": "2648079"
  },
  {
    "text": "samples in the back in these lower layers if you would understand what happens in the first layer so if you",
    "start": "2648079",
    "end": "2653400"
  },
  {
    "text": "would understand which com method was being called in the very front then you wouldn't have these kind of",
    "start": "2653400",
    "end": "2658920"
  },
  {
    "text": "problems so what you could do is for this case uh you could like use emulation but in our case for various",
    "start": "2658920",
    "end": "2665800"
  },
  {
    "text": "reasons we just experimented with with other stuff and what we came up with was um another approach in order uh how we",
    "start": "2665800",
    "end": "2673160"
  },
  {
    "text": "could do that so and this is basically inter what we call uh inter modular transition moding and I'll try to",
    "start": "2673160",
    "end": "2679119"
  },
  {
    "text": "explain how it works on this slides and basically it's the idea behind that is that you just monitor um the execution",
    "start": "2679119",
    "end": "2685400"
  },
  {
    "text": "of something uh without using Hooks and only by making use of how the mmu works",
    "start": "2685400",
    "end": "2691720"
  },
  {
    "text": "yeah so you you you make you're modifying the mmu data structures and by that you understand what happens inside",
    "start": "2691720",
    "end": "2697480"
  },
  {
    "text": "the process that you Monitor and that's pretty cool because it's totally transparent and it even works out of a",
    "start": "2697480",
    "end": "2703440"
  },
  {
    "text": "hypervisor so the idea that is now is the following so imagine that you have um a process that you want to analyze",
    "start": "2703440",
    "end": "2709920"
  },
  {
    "text": "what you do is you split that process in two different memory sets first of all you have one set which is",
    "start": "2709920",
    "end": "2715720"
  },
  {
    "text": "executable and all of the malware code is being put into that set so it's marked as executable this means that the",
    "start": "2715720",
    "end": "2721440"
  },
  {
    "text": "instruction pointer can just execute code in there and then all of the other memory is then being marked as",
    "start": "2721440",
    "end": "2727720"
  },
  {
    "text": "non-executable right and that means that if you start the program the malware then at some point it will call some com",
    "start": "2727720",
    "end": "2734200"
  },
  {
    "text": "interface or some other API this will mean that the instruction pointer jumps into the non-executable region and then",
    "start": "2734200",
    "end": "2740720"
  },
  {
    "text": "this generates an exception in the system because this is a non-executable region an exception is generated and then your monitoring engine can come",
    "start": "2740720",
    "end": "2747040"
  },
  {
    "text": "into play it can understand that and it can actually read out all of the relevant data so it can read out what",
    "start": "2747040",
    "end": "2752200"
  },
  {
    "text": "interface was called what method was called and what are the parameters",
    "start": "2752200",
    "end": "2758920"
  },
  {
    "text": "um the thing is right now all of this happens at the standardized com layer so this is completely different to reading",
    "start": "2759000",
    "end": "2765160"
  },
  {
    "text": "out that data back in the RPC uh in ND lay because all of this happens at the layer which is standardized by m by",
    "start": "2765160",
    "end": "2771760"
  },
  {
    "text": "Microsoft so you if you go through the uh official standard standard you know where you have to read out the interface",
    "start": "2771760",
    "end": "2777240"
  },
  {
    "text": "names the method names and the parameters so after that what you then do is and that's and that's the trick",
    "start": "2777240",
    "end": "2782680"
  },
  {
    "text": "now you just switch both sets what's been executable before is now non-executable aable and what's been",
    "start": "2782680",
    "end": "2787760"
  },
  {
    "text": "non-executable is now executable and then you just let the system run you you don't care about what happens then just",
    "start": "2787760",
    "end": "2794240"
  },
  {
    "text": "some OS internal stuff will happen um and at some point the instruction pointer goes back when data is being",
    "start": "2794240",
    "end": "2799480"
  },
  {
    "text": "returned and then you just do the same thing all over again yeah so you just constantly switch between these two sets",
    "start": "2799480",
    "end": "2804839"
  },
  {
    "text": "and by doing that you understand what happens like in the front of the system you will see every first layer API call",
    "start": "2804839",
    "end": "2809920"
  },
  {
    "text": "every com interface call and you don't even bother about what happens after that",
    "start": "2809920",
    "end": "2815240"
  },
  {
    "text": "right um challenges that still remained for us at this point just to give you some idea was that you still need to",
    "start": "2815240",
    "end": "2821440"
  },
  {
    "text": "pass a lot of information so you still need to pass out the um like method names and so on and so forth and that's quite complex because there exists a lot",
    "start": "2821440",
    "end": "2828200"
  },
  {
    "text": "of different parameter types and so on and nevertheless it's like a finite list and you can just go through it and as I",
    "start": "2828200",
    "end": "2833480"
  },
  {
    "text": "said it's standardized then there's stuff such as Dynamic binding of com interfaces I will just skip over that",
    "start": "2833480",
    "end": "2838599"
  },
  {
    "text": "because uh it's very technical it basically means there are there are different ways in which you can call a method uh so you just have to be aware",
    "start": "2838599",
    "end": "2845760"
  },
  {
    "text": "of all of the different kinds uh sometimes you also have to understand what each com method does so you have to",
    "start": "2845760",
    "end": "2851880"
  },
  {
    "text": "understand that a function is being called that creates a new process using wmi for example because then you want to",
    "start": "2851880",
    "end": "2857520"
  },
  {
    "text": "monitor that new function so you have you have to have some sort of a semantic understanding and and therefore you have to go through of the existing Comm",
    "start": "2857520",
    "end": "2863960"
  },
  {
    "text": "interfaces um that's quite a lot of work but it's doable in the end so you just have to go through it once and once you've done it it'll it'll just work in",
    "start": "2863960",
    "end": "2870280"
  },
  {
    "text": "every case okay so um to summarize this",
    "start": "2870280",
    "end": "2875319"
  },
  {
    "text": "basically fixes all of the for mention problems because um if you see what",
    "start": "2875319",
    "end": "2880760"
  },
  {
    "text": "happens uh like in the front actually if you actually if you're analyzing an executable for example you won't have",
    "start": "2880760",
    "end": "2886920"
  },
  {
    "text": "any noise anymore by Design because you will only see what the marway itself does you you're not going to see what",
    "start": "2886920",
    "end": "2892319"
  },
  {
    "text": "any other threats do do because they will be inside um inside the OS Library so there will be no noise yeah if you're",
    "start": "2892319",
    "end": "2899559"
  },
  {
    "text": "analyzing script files you will basically analyze the the run times of these script files and then you have some noise but it's even it's way less",
    "start": "2899559",
    "end": "2904880"
  },
  {
    "text": "than with uh last lower layer hooking you will also not miss any first layer calls by Design because you're just",
    "start": "2904880",
    "end": "2910880"
  },
  {
    "text": "seeing everything that happens on the first layer you're not going to have that Avalanche effect anymore for the same reason because you just see",
    "start": "2910880",
    "end": "2916839"
  },
  {
    "text": "everything at the first layer so there's no Avalanche effect anymore and finally there's no need for special handling of rpcs anymore you just do not have to",
    "start": "2916839",
    "end": "2923280"
  },
  {
    "text": "deal with it anymore you just don't care about the implementation of anything and it'll just work",
    "start": "2923280",
    "end": "2928799"
  },
  {
    "text": "so yeah so that being said um that's basically all I had to say and um yeah I",
    "start": "2928799",
    "end": "2935559"
  },
  {
    "text": "would like to thank you for your",
    "start": "2935559",
    "end": "2938720"
  },
  {
    "text": "attention so I think we still have maybe one time for one or two questions left",
    "start": "2942960",
    "end": "2950079"
  },
  {
    "text": "so yeah I will just repeat the question if",
    "start": "2950079",
    "end": "2955160"
  },
  {
    "text": "you want to it's okay",
    "start": "2955160",
    "end": "2960359"
  },
  {
    "text": "okay so the uh int muing uh does it work if you have two",
    "start": "2960359",
    "end": "2966000"
  },
  {
    "text": "threats uh um that do things concurrently so you have one threat that's in executing in malware and one",
    "start": "2966000",
    "end": "2972880"
  },
  {
    "text": "threat that's executing in Windows uh d m does it work do will work because theu",
    "start": "2972880",
    "end": "2978520"
  },
  {
    "text": "is per per CPU and if they are in parallel you have we will have two different um sets and this is why it",
    "start": "2978520",
    "end": "2984400"
  },
  {
    "text": "works so okay thanks I want to say one more thing uh the open source sandbox",
    "start": "2984400",
    "end": "2989880"
  },
  {
    "text": "does work with the process following thank you with a okay I haven't understood the last thing but okay it's",
    "start": "2989880",
    "end": "2997520"
  },
  {
    "text": "fine okay okay so if there are no questions left",
    "start": "2997520",
    "end": "3004160"
  },
  {
    "text": "if you still have anything to you want to discuss you you can just come to me I will just be outside of the room and",
    "start": "3004160",
    "end": "3009960"
  },
  {
    "text": "yeah again thank you for your attention",
    "start": "3009960",
    "end": "3016400"
  }
]