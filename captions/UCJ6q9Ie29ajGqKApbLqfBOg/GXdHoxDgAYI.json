[
  {
    "text": "hello welcome to Reflections on trust in the software supply chain my name is Jeremy long I'm ctxt on Twitter and blue",
    "start": "3439",
    "end": "11440"
  },
  {
    "text": "sky over 20 years in information security I'm the founder of the OAS dependency check project I'm currently a",
    "start": "11440",
    "end": "17760"
  },
  {
    "text": "principal security engineer at service now uh the contents of this talk are from my own personal research and not do",
    "start": "17760",
    "end": "23800"
  },
  {
    "text": "not represent any of the work that I'm doing as part of my day job uh the opinions are my own and do not represent",
    "start": "23800",
    "end": "30359"
  },
  {
    "text": "those of service now today we're of course going to talk about software supply chain security what we're doing",
    "start": "30359",
    "end": "36200"
  },
  {
    "text": "today a gap I see in our current",
    "start": "36200",
    "end": "40160"
  },
  {
    "text": "efforts I will then demo the type of supply chain attack that has kept me up at night uh since reading about solar",
    "start": "41280",
    "end": "47480"
  },
  {
    "text": "wind winds uh you're going to want to stick around for the demo and I'll end with proposing a",
    "start": "47480",
    "end": "53480"
  },
  {
    "text": "solution to the trust and Trust problem as we all know the software supply chain is absolutely massive",
    "start": "53480",
    "end": "60480"
  },
  {
    "text": "the census 2 study from the Linux Foundation found that all modern software is made up to 70 to 90%",
    "start": "60480",
    "end": "66320"
  },
  {
    "text": "open-source code and as you would be wouldn't be surprised cicd infrastructure is also",
    "start": "66320",
    "end": "73560"
  },
  {
    "text": "modern software and a lot of it is open source code it's how we build and deploy the modern applications that we built or",
    "start": "73560",
    "end": "80280"
  },
  {
    "text": "that that we create Maven Gradle npm Dron Spiner Jenkins the list goes on and",
    "start": "80280",
    "end": "85759"
  },
  {
    "text": "on as I'm kind of focused on the development tool chain we also have thirdparty uh services that are used",
    "start": "85759",
    "end": "92640"
  },
  {
    "text": "within our cicd environment uh they're all modern software part of the the supply chain and they too are modern",
    "start": "92640",
    "end": "100799"
  },
  {
    "text": "software made of Open Source likely built and deployed using open source",
    "start": "100799",
    "end": "106280"
  },
  {
    "text": "technology when you think about it the software supply chain is almost incomprehensibly large and with anything",
    "start": "106280",
    "end": "112560"
  },
  {
    "text": "this large it presents an attack surface that people are going to Target supply",
    "start": "112560",
    "end": "119079"
  },
  {
    "text": "chain attacks are are nothing new from traditional supply chain attacks targeting known vulnerable dependencies",
    "start": "119079",
    "end": "125520"
  },
  {
    "text": "to more modern supply chain attacks some of which may require nation state level support to",
    "start": "125520",
    "end": "131239"
  },
  {
    "text": "accomplish Gartner predicts that by 2025 45% of organizations worldwide will",
    "start": "131239",
    "end": "137640"
  },
  {
    "text": "experience an attack on their supply chain these attacks are not going to stop they're going to evolve get harder",
    "start": "137640",
    "end": "144239"
  },
  {
    "text": "to detect from an attacker's perspective it just makes sense if I can find or",
    "start": "144239",
    "end": "150400"
  },
  {
    "text": "introduce a vulnerability in a component used by many organizations the payoff",
    "start": "150400",
    "end": "156319"
  },
  {
    "text": "can be huge additionally supply chain attacks bypass a lot of the traditional",
    "start": "156319",
    "end": "161400"
  },
  {
    "text": "controls Enterprises have put in place over the years another disturbing Trend to me has",
    "start": "161400",
    "end": "168000"
  },
  {
    "text": "been we've seen more and more attacks against our development tool chain this",
    "start": "168000",
    "end": "174720"
  },
  {
    "text": "scares me because I've read Ken Thompson's paper Reflections on trusting Trust",
    "start": "174720",
    "end": "180319"
  },
  {
    "text": "if you've never read Ken's Thompson's paper I highly recommend it it's it's an absolute delightful read it's a short",
    "start": "180319",
    "end": "186720"
  },
  {
    "text": "three-page paper where Thompson discussed backdooring the compiler in",
    "start": "186720",
    "end": "193159"
  },
  {
    "text": "such a way that the back door is never in the published source code yet when",
    "start": "193159",
    "end": "198239"
  },
  {
    "text": "that subverted compiler compiles the source code for the op or for the compiler to create a new version of the",
    "start": "198239",
    "end": "204879"
  },
  {
    "text": "compiler it injects the back door into the compiler carrying that back door forward",
    "start": "204879",
    "end": "211239"
  },
  {
    "text": "into version over version of new compilers worse when that subverted",
    "start": "211239",
    "end": "217040"
  },
  {
    "text": "compiler is used to compile the operating system it injects a back door into the operating system from a supply",
    "start": "217040",
    "end": "224760"
  },
  {
    "text": "chain perspective that's absolutely terrifying how can we trust our builds to produce secure code secure secure",
    "start": "224760",
    "end": "233560"
  },
  {
    "text": "output the moral is obvious you can't trust code that you did not completely create yourself",
    "start": "234400",
    "end": "241040"
  },
  {
    "text": "the solar winds breach was very very close to a trusting trust problem there",
    "start": "241040",
    "end": "246439"
  },
  {
    "text": "was an assumption that the build servers were secure and yet malware on the build servers injected code back door into the",
    "start": "246439",
    "end": "254599"
  },
  {
    "text": "Orion product at build time and then this was distributed to uh solar wind's",
    "start": "254599",
    "end": "261799"
  },
  {
    "text": "clients through an automated um update process this was distributed to Microsoft the US government several",
    "start": "261799",
    "end": "268520"
  },
  {
    "text": "security firms uh the list goes on and on of who was affected about 18,000",
    "start": "268520",
    "end": "273720"
  },
  {
    "text": "clients long of who was affected by this breach solar winds and other events",
    "start": "273720",
    "end": "280039"
  },
  {
    "text": "brought about the need for the executive order on improving the nation's cyber security this executive order has a ton",
    "start": "280039",
    "end": "288039"
  },
  {
    "text": "of great requirements that outline uh ways that we can improve our cyber",
    "start": "288039",
    "end": "296120"
  },
  {
    "text": "security uh section four specifically on improving the software supply chain",
    "start": "296120",
    "end": "302639"
  },
  {
    "text": "security um has just fantastic requirements that were outlined many",
    "start": "302639",
    "end": "308080"
  },
  {
    "text": "work on many of these was well underway prior to the executive order being published but since its publication",
    "start": "308080",
    "end": "315320"
  },
  {
    "text": "we've seen frenzied activity people producing guidelines refining uh the the",
    "start": "315320",
    "end": "321639"
  },
  {
    "text": "requirements providing implementation guidelines but today I'm going to focus",
    "start": "321639",
    "end": "326960"
  },
  {
    "text": "on these three Providence software of materials and automated security testing",
    "start": "326960",
    "end": "332360"
  },
  {
    "text": "for known and potential vulnerabilities in a lot of cases that's software composition analysis the entire set of requirements",
    "start": "332360",
    "end": "339120"
  },
  {
    "text": "is fantastic but these three all relate to dependencies and note that throughout",
    "start": "339120",
    "end": "345400"
  },
  {
    "text": "this talk I may use the term component artifact or dependency almost interchangeably",
    "start": "345400",
    "end": "350759"
  },
  {
    "text": "because in context they're almost talking about the same thing so what is a dependency well by",
    "start": "350759",
    "end": "358360"
  },
  {
    "text": "definition a software component used directly or indirectly by a program many",
    "start": "358360",
    "end": "363600"
  },
  {
    "text": "of us are familiar with runtime dependencies this is a runtime dependency graph of an application I'm involved in uh you know from a security",
    "start": "363600",
    "end": "371599"
  },
  {
    "text": "perspective lots of us are familiar with this because of our SCA tooling the software composition analysis it's reporting on known vulnerabilities in",
    "start": "371599",
    "end": "378840"
  },
  {
    "text": "our runtime dependencies and then requiring patches because members of this community",
    "start": "378840",
    "end": "385080"
  },
  {
    "text": "continue to find vulnerabilities in the dependencies that we use if you talk to some developers they're almost getting",
    "start": "385080",
    "end": "391400"
  },
  {
    "text": "overloaded by these patching requests",
    "start": "391400",
    "end": "396800"
  },
  {
    "text": "but you know if we actually look at what this application is and then think about",
    "start": "396800",
    "end": "403440"
  },
  {
    "text": "how it was built in a lot of the build management tools we might have test scope dependencies this application when",
    "start": "403440",
    "end": "410039"
  },
  {
    "text": "we include the test scope dependencies that that expands the graph quite a bit this is also built using a build",
    "start": "410039",
    "end": "415560"
  },
  {
    "text": "management system that has plugins that do anything from code generation to helping with the compilation the",
    "start": "415560",
    "end": "421560"
  },
  {
    "text": "packaging the publication there's a lot of build plugins in this application as",
    "start": "421560",
    "end": "427000"
  },
  {
    "text": "well that expands this dependency graph to just an enormous",
    "start": "427000",
    "end": "432800"
  },
  {
    "text": "size and you might be thinking why would I care about all of",
    "start": "432800",
    "end": "438599"
  },
  {
    "text": "these dependencies they're not actually part of the application that is deployed",
    "start": "438599",
    "end": "443639"
  },
  {
    "text": "well in a little bit I'm going to demonstrate that anything running during",
    "start": "443639",
    "end": "448960"
  },
  {
    "text": "the bill build has the ability to affect the build output anything running during the build",
    "start": "448960",
    "end": "456360"
  },
  {
    "text": "has the ability to affect the build output when we talk about supply chain",
    "start": "456360",
    "end": "462479"
  },
  {
    "text": "security uh you know specifically thinking about artifacts and dependencies two of the Frameworks that",
    "start": "462479",
    "end": "467599"
  },
  {
    "text": "you're going to run into are the uh supply chain level for software artifacts or salsa and the oasp software",
    "start": "467599",
    "end": "474960"
  },
  {
    "text": "component verification standard uh both are great Frameworks to have a ton ton of requirements um that will help you",
    "start": "474960",
    "end": "482520"
  },
  {
    "text": "really raise the Assurance level of your builds and of your software supply chain",
    "start": "482520",
    "end": "487680"
  },
  {
    "text": "uh but both of these discuss Providence that's one of those items that I mentioned earlier so what is Providence",
    "start": "487680",
    "end": "493800"
  },
  {
    "text": "this is the definition from both uh salsa and the software component verification standard I actually like",
    "start": "493800",
    "end": "499599"
  },
  {
    "text": "the definition from the software component verification standard a little bit better if you go out and read their glossery they go into pedigree and",
    "start": "499599",
    "end": "506960"
  },
  {
    "text": "Providence and the definition actually match a little bit better to what we would see in traditional supply chain",
    "start": "506960",
    "end": "513599"
  },
  {
    "text": "shipping Trucking manufacturing um so so I do kind of like their definitions a little bit better",
    "start": "513599",
    "end": "520080"
  },
  {
    "text": "but at its core the idea of providence is that we're recording the inputs and",
    "start": "520080",
    "end": "525320"
  },
  {
    "text": "outputs of the build how how was this thing made what was what was there so at",
    "start": "525320",
    "end": "530600"
  },
  {
    "text": "a high level if we're going to create you know Providence we take a look at what was the source code that was",
    "start": "530600",
    "end": "536640"
  },
  {
    "text": "brought in we record the exact version We cre create a record of this and we digitally sign it we look at the",
    "start": "536640",
    "end": "542920"
  },
  {
    "text": "dependencies that we being brought in we record the exact version the names of them the the hash codes we create a",
    "start": "542920",
    "end": "549720"
  },
  {
    "text": "record of this and we digitally sign it we look at the build we look at the build steps the build tools we create a",
    "start": "549720",
    "end": "555760"
  },
  {
    "text": "record of this we digitally sign that and then we look at the build artifacts",
    "start": "555760",
    "end": "560800"
  },
  {
    "text": "we create a record of these we digitally sign that and the one thing that I want to",
    "start": "560800",
    "end": "567880"
  },
  {
    "text": "emphasize here is this has nothing to do with how secure the build is this is only a record of what the",
    "start": "567880",
    "end": "575079"
  },
  {
    "text": "input and output of the build was the signatures do not imply that the build artifact is secure I will say knowing",
    "start": "575079",
    "end": "582279"
  },
  {
    "text": "the exact version of the source code and the dependencies that went into the build fantastic knowing the exact",
    "start": "582279",
    "end": "588760"
  },
  {
    "text": "version and digitally signed of that build artifact when you use that as a",
    "start": "588760",
    "end": "593800"
  },
  {
    "text": "dependency within your application you can validate that and be assured that you are using the official version of",
    "start": "593800",
    "end": "599959"
  },
  {
    "text": "that dependency and that's going to raise your Assurance",
    "start": "599959",
    "end": "604000"
  },
  {
    "text": "level um but sorry I lost my place uh but one thing to to note is that uh",
    "start": "605920",
    "end": "612920"
  },
  {
    "text": "other thing about this Providence information is that it will provide a ton of great",
    "start": "612920",
    "end": "618680"
  },
  {
    "text": "information in the event of a breach as part of your forensics investigation Providence information will have a ton",
    "start": "618680",
    "end": "625120"
  },
  {
    "text": "of fantastic information but at its core uh Providence is a record of the inputs",
    "start": "625120",
    "end": "630839"
  },
  {
    "text": "and outputs of the build as salsa is one of the Frameworks",
    "start": "630839",
    "end": "636160"
  },
  {
    "text": "that prescribes Providence we need to take a look at the threats that were covered or more specifically what were",
    "start": "636160",
    "end": "641920"
  },
  {
    "text": "the threats that were not covered in salsa version 1.0 use a compromised runtime",
    "start": "641920",
    "end": "651200"
  },
  {
    "text": "dependency you know I actually understand why this is probably out of scope of salsa 1.0 I was not part of the",
    "start": "651200",
    "end": "656600"
  },
  {
    "text": "team making any of these decisions but I think I think I I understand why this one was probably scoped out what else",
    "start": "656600",
    "end": "663040"
  },
  {
    "text": "was scoped out not considered part of the threats for salsa",
    "start": "663040",
    "end": "668079"
  },
  {
    "text": "1.0 use a compromised build time dependency again I kind of get why this",
    "start": "668079",
    "end": "674880"
  },
  {
    "text": "was out of scope I mean this this is actually a hard problem this is almost the trusting trust problem uh and a lot",
    "start": "674880",
    "end": "681519"
  },
  {
    "text": "of decisions were made early on you can read about some of them in on salsa. deev some of the decisions were made to",
    "start": "681519",
    "end": "689120"
  },
  {
    "text": "make the problem a little bit more tracable so we could start moving forward with um improving uh our supply",
    "start": "689120",
    "end": "698399"
  },
  {
    "text": "chain uh salsa provides a ton of great requirements I think I have a lot of",
    "start": "698399",
    "end": "704120"
  },
  {
    "text": "high hopes for what's going on there and I highly recommend uh following their work getting involved I think eventually",
    "start": "704120",
    "end": "710800"
  },
  {
    "text": "we will see better documentation for what's being done for these two uh threats but today what's being done for",
    "start": "710800",
    "end": "717079"
  },
  {
    "text": "these two threats software composition analysis that's a primary control that's being",
    "start": "717079",
    "end": "722240"
  },
  {
    "text": "used uh to combat known vulnerable runtime dependencies uh I've been",
    "start": "722240",
    "end": "728040"
  },
  {
    "text": "involved in software composition analysis since before it was called software composition analysis these",
    "start": "728040",
    "end": "733720"
  },
  {
    "text": "tools let you know if you're using a vulnerable runtime dependency but what about build plugins",
    "start": "733720",
    "end": "740440"
  },
  {
    "text": "the things running during your build what do we have today to cover that well",
    "start": "740440",
    "end": "746480"
  },
  {
    "text": "we've got sea tools that work the entire repository level these are tools that going scan anything in your repository be it a test",
    "start": "746480",
    "end": "752560"
  },
  {
    "text": "dependency a build plugin a Transit dependency of your build plugins and it's likely not going to have a lot of",
    "start": "752560",
    "end": "758240"
  },
  {
    "text": "context about what's in there but it'll flag it as known vulnerable",
    "start": "758240",
    "end": "763360"
  },
  {
    "text": "well this is useful but when you lose some of that context it becomes a little",
    "start": "763360",
    "end": "768720"
  },
  {
    "text": "harder to deal with luckily most of the people using these tools are actually it's part of a layered defense that they",
    "start": "768720",
    "end": "774440"
  },
  {
    "text": "have so what else do we have well with 8 . o release of the OAS dependency check",
    "start": "774440",
    "end": "781480"
  },
  {
    "text": "project you can actually scan your Maven and Gradle plugins you have to use the maven or gr old plugin you can't use the",
    "start": "781480",
    "end": "787959"
  },
  {
    "text": "CLI or the docker image but you can scan your your build plugins using the dependency check project to look for",
    "start": "787959",
    "end": "793920"
  },
  {
    "text": "known vulnerable um known vulnerabilities in your plugins right now I'm not aware of any other SCA",
    "start": "793920",
    "end": "800320"
  },
  {
    "text": "vendors that are doing this um I'm not saying that they're not out there I just don't know of",
    "start": "800320",
    "end": "806519"
  },
  {
    "text": "any another thing that we have to cover these known vulnerabilities is the software Bild of materials or",
    "start": "806519",
    "end": "814000"
  },
  {
    "text": "esbon the two most common formats are of course cyclon DX and spdx uh Cyclone DX",
    "start": "814000",
    "end": "819360"
  },
  {
    "text": "is a flagship OAS project and spdx is from the Linux Foundation es bombs commonly cover your",
    "start": "819360",
    "end": "827040"
  },
  {
    "text": "runtime dependencies they can cover so much more than just your runtime",
    "start": "827040",
    "end": "832480"
  },
  {
    "text": "dependencies um you know if you go look at at the Cyclone DX specification they outline a a ton of different um types of",
    "start": "832480",
    "end": "840079"
  },
  {
    "text": "bills bills of material that can be captured within the Cyclone DX format in a lot of cases your companies",
    "start": "840079",
    "end": "847120"
  },
  {
    "text": "will ask their vendors for an es bomb so they can understand if there's any risks with using that software from a",
    "start": "847120",
    "end": "853560"
  },
  {
    "text": "vulnerability licensing compliance legal compliance uh reasons um so it's great we've got a way",
    "start": "853560",
    "end": "860000"
  },
  {
    "text": "of tracking our runtime dependencies but again what about that",
    "start": "860000",
    "end": "865279"
  },
  {
    "text": "common theme that I have here what about your build dependencies how was this product made that you're using well",
    "start": "865279",
    "end": "873040"
  },
  {
    "text": "luckily Steve springett the founder of the O uh Cyclone DX is a very smart",
    "start": "873040",
    "end": "879040"
  },
  {
    "text": "individual he actually um I asked him a year ago if any work was being done to",
    "start": "879040",
    "end": "886240"
  },
  {
    "text": "document build time dependencies he pointed me at an issue in the Cyclone DX",
    "start": "886240",
    "end": "892519"
  },
  {
    "text": "uh repository out on GitHub that issue was opened May 17th 2020 more than a",
    "start": "892519",
    "end": "897639"
  },
  {
    "text": "couple years ago and happy to announce that the team with the release of cyclone DX 1.5 earlier this year",
    "start": "897639",
    "end": "904839"
  },
  {
    "text": "introduced the manufacturing bill of materials it's fantastic we have a way of capturing how the these products were",
    "start": "904839",
    "end": "912880"
  },
  {
    "text": "built we we have a way of recording this it may take a little time for some of the tooling to catch up specifically the",
    "start": "912880",
    "end": "918040"
  },
  {
    "text": "tooling that is going to generate the manufacturing bill of materials but we're on our",
    "start": "918040",
    "end": "924680"
  },
  {
    "text": "way however SCA and espon",
    "start": "924680",
    "end": "929920"
  },
  {
    "text": "they're only good at capturing known vulnerable",
    "start": "929920",
    "end": "935759"
  },
  {
    "text": "dependencies worrying about monitoring for known vulnerable dependencies is",
    "start": "935800",
    "end": "940959"
  },
  {
    "text": "important but what supply chain attack has kept me up at night since reading about solar",
    "start": "940959",
    "end": "946759"
  },
  {
    "text": "winds I guarantee it's not worrying about known vulnerable dependencies Mark kiry over at uh crash",
    "start": "946759",
    "end": "954279"
  },
  {
    "text": "override has had some really great tweets about software supply chain security such as tweeting about uh",
    "start": "954279",
    "end": "960720"
  },
  {
    "text": "remote code execution in a logging framework prior to log for Shell but this tweet this tweet in",
    "start": "960720",
    "end": "967440"
  },
  {
    "text": "particular has always stood out with me a little bit what if a library in an IDE",
    "start": "967440",
    "end": "974240"
  },
  {
    "text": "back doored everything built with it to me this is a little",
    "start": "974240",
    "end": "981759"
  },
  {
    "text": "shortsighted IDE plugins aren't used in cicd environments what if a build",
    "start": "981759",
    "end": "990040"
  },
  {
    "text": "plugin was back doored and compromised everything built",
    "start": "990040",
    "end": "996199"
  },
  {
    "text": "with it in our cicd environments that's how we build and Chip code right now if",
    "start": "996199",
    "end": "1002759"
  },
  {
    "text": "a malicious build plugin were identified say something like Swagger code gen or",
    "start": "1002759",
    "end": "1009440"
  },
  {
    "text": "even a testing framework like junit were compromised they weren't but as a",
    "start": "1009440",
    "end": "1014519"
  },
  {
    "text": "thought exercise think about it if they were and they could execute a solar winds style",
    "start": "1014519",
    "end": "1021720"
  },
  {
    "text": "attack how would you figure out what was compromised how would you figure out where these were deployed in your",
    "start": "1021720",
    "end": "1028160"
  },
  {
    "text": "environment if you think hunting for log for J was bad something like this I don't even",
    "start": "1028160",
    "end": "1034839"
  },
  {
    "text": "want to think about so let's talk about how we build one in Java um this is the",
    "start": "1034839",
    "end": "1040360"
  },
  {
    "text": "malicious dependencies um repo that I open sourced uh this morning um this is",
    "start": "1040360",
    "end": "1047640"
  },
  {
    "text": "going to demonstrate at how a malicious build time dependency uh can",
    "start": "1047640",
    "end": "1055440"
  },
  {
    "text": "compromise your build so I just have to switch over here",
    "start": "1055440",
    "end": "1061240"
  },
  {
    "text": "give me one second so this is the repo out on GitHub uh hope I didn't really expand that um",
    "start": "1061240",
    "end": "1069880"
  },
  {
    "text": "sorry so the analyzer here this is something that uh the threat actor or",
    "start": "1069880",
    "end": "1075760"
  },
  {
    "text": "malicious agent would own uh it is is a multimodule maven project and then this",
    "start": "1075760",
    "end": "1080960"
  },
  {
    "text": "demo application here is something that would um your engineers at your",
    "start": "1080960",
    "end": "1086640"
  },
  {
    "text": "organization would have built so let's jump over to a couple of terminals here this white terminal is",
    "start": "1086640",
    "end": "1093559"
  },
  {
    "text": "the attacker's terminal I'm just going to spin up netcat and let that uh listen on Port",
    "start": "1093559",
    "end": "1099559"
  },
  {
    "text": "9999 and then we're going to jump over here and I'm just going to run the build on the demo project it",
    "start": "1099559",
    "end": "1106640"
  },
  {
    "text": "builds we see the spring boot Banner um and everything succeeds and then we're just going to run the application",
    "start": "1106640",
    "end": "1113480"
  },
  {
    "text": "here we're going to spin this up we see spring boot started and um TomCat",
    "start": "1113480",
    "end": "1119600"
  },
  {
    "text": "initialized and it's running on port 8080 so let's see what this application does c Local Host 880 greetings from",
    "start": "1119600",
    "end": "1127159"
  },
  {
    "text": "Spring boot this is just a vanilla um spring boot application created by uh",
    "start": "1127159",
    "end": "1132200"
  },
  {
    "text": "this the spring boot initializer but what happened on the attackers",
    "start": "1132200",
    "end": "1137320"
  },
  {
    "text": "terminal did anything connect back sure enough I reverse shell right here on the",
    "start": "1137320",
    "end": "1144320"
  },
  {
    "text": "developer's workstation this could have been a reverse shell on you know on an",
    "start": "1144320",
    "end": "1149960"
  },
  {
    "text": "ec2 instance out in AWS when you deployed this application to",
    "start": "1149960",
    "end": "1155000"
  },
  {
    "text": "production so how could this have happened how could this back door have gotten into my code base um I'm going to",
    "start": "1155000",
    "end": "1161120"
  },
  {
    "text": "kill the spring boot application here and we're going to jump back over to the terminal the attackers terminal and we",
    "start": "1161120",
    "end": "1166400"
  },
  {
    "text": "see that this connection was ended because when spring boot closed the socket ended um to kind of prove that",
    "start": "1166400",
    "end": "1172360"
  },
  {
    "text": "these two were actually connected so let's do a little investigation here let's see what was um what were the",
    "start": "1172360",
    "end": "1179400"
  },
  {
    "text": "classes that were compiled and deployed as part of as part of this application we've got this hello",
    "start": "1179400",
    "end": "1185240"
  },
  {
    "text": "controller in the spring boot application this is actually what created the uh greetings from uh spring",
    "start": "1185240",
    "end": "1191760"
  },
  {
    "text": "boot the demo application class here this is actually just how spring boot starts up it's just how the spring boot",
    "start": "1191760",
    "end": "1198039"
  },
  {
    "text": "app applications work ctxt listener I have no idea what this is um spoiler",
    "start": "1198039",
    "end": "1204200"
  },
  {
    "text": "aler that's where the back door is but as a developer I never created that code",
    "start": "1204200",
    "end": "1209400"
  },
  {
    "text": "if we jump over to um the developer the the demo application here that the developer created all we have is the",
    "start": "1209400",
    "end": "1216120"
  },
  {
    "text": "demo application and hello controller and there's really no code in here um I",
    "start": "1216120",
    "end": "1221520"
  },
  {
    "text": "mean normally there would be it would be a more full-fledged application but as the example there's nothing in here",
    "start": "1221520",
    "end": "1228919"
  },
  {
    "text": "if we look at the build the only thing that I did was I heard about this really",
    "start": "1228919",
    "end": "1235240"
  },
  {
    "text": "useful spring build analyzer um it actually looks at my spring boot application during compile",
    "start": "1235240",
    "end": "1241799"
  },
  {
    "text": "time to identify if there's any misconfigurations a couple of my buddies have used it they said there was you",
    "start": "1241799",
    "end": "1247640"
  },
  {
    "text": "know they got some they found some bugs in their spring boot application that really you know it it helped them in",
    "start": "1247640",
    "end": "1253200"
  },
  {
    "text": "their testing and whatnot but as we saw ctxt listener was",
    "start": "1253200",
    "end": "1258799"
  },
  {
    "text": "injected so we have to probably go look at this spring um build analyzer project",
    "start": "1258799",
    "end": "1264120"
  },
  {
    "text": "and if we go over here this is the um spring build analyzer project and in Spring build analyzer we've got that",
    "start": "1264120",
    "end": "1270880"
  },
  {
    "text": "annotation processor that doesn't really do anything it just Cycles through all",
    "start": "1270880",
    "end": "1276240"
  },
  {
    "text": "the annotations uh not going to walk through a lot of the code here just high level um but there's no ctxt Lis where",
    "start": "1276240",
    "end": "1284880"
  },
  {
    "text": "did that come from well this is a multimodule Maven project so we have a",
    "start": "1284880",
    "end": "1290320"
  },
  {
    "text": "maven or a build helper up here and if we look at build helper H",
    "start": "1290320",
    "end": "1296600"
  },
  {
    "text": "um this is a maven extension it's just how you build you know extend Maven a",
    "start": "1296600",
    "end": "1301640"
  },
  {
    "text": "little bit but again there is no code here where did the back door come from",
    "start": "1301640",
    "end": "1307559"
  },
  {
    "text": "well I made this a little bit more complicated to show a few different ways that you can inject malicious code into",
    "start": "1307559",
    "end": "1315360"
  },
  {
    "text": "projects um even if you ran static analysis against this project you may skip the test directories you may not",
    "start": "1315360",
    "end": "1321919"
  },
  {
    "text": "even look at the test directories and yet the test directories right here contain compile uh ensure spring",
    "start": "1321919",
    "end": "1329679"
  },
  {
    "text": "annotation and sensor drop and sensor drop is sure enough right where that",
    "start": "1329679",
    "end": "1335000"
  },
  {
    "text": "ctxt listener exists and to note it exists as a static string it's not",
    "start": "1335000",
    "end": "1341080"
  },
  {
    "text": "actually a code construct so even if you did Static analysis looking for things like process Builder it's not going to find because",
    "start": "1341080",
    "end": "1348919"
  },
  {
    "text": "this is a string not a language construct so I'm going to jump back to",
    "start": "1348919",
    "end": "1354679"
  },
  {
    "text": "the slides here because it's going to be a little easier to walk through how this um compromise happens um so let me just",
    "start": "1354679",
    "end": "1363200"
  },
  {
    "text": "stop mirroring and we'll jump back to the",
    "start": "1363200",
    "end": "1370039"
  },
  {
    "text": "slides cool so this is kind of an explanation of the slides uh of the demo",
    "start": "1370039",
    "end": "1377320"
  },
  {
    "text": "um uh that that we just saw the build helper",
    "start": "1377320",
    "end": "1382679"
  },
  {
    "text": "compiles uh you know Maven runs the compile it compiles all of those test classes and then the test case actually",
    "start": "1382679",
    "end": "1389919"
  },
  {
    "text": "copies those um malicious files from the test classes of the build helper into",
    "start": "1389919",
    "end": "1396120"
  },
  {
    "text": "the target classes of the spring build analyzer then Maven starts running and",
    "start": "1396120",
    "end": "1402400"
  },
  {
    "text": "the spring build analyzer source code gets compiled and placed into the target classes right alongside all of those",
    "start": "1402400",
    "end": "1410039"
  },
  {
    "text": "malicious uh classes that that were injected by the build helper this is then pack all of these are then packaged",
    "start": "1410039",
    "end": "1415960"
  },
  {
    "text": "up as a jar and then we can publish those to something like Maven Central then your developers build their",
    "start": "1415960",
    "end": "1423640"
  },
  {
    "text": "application they use some dependency that they thought was safe and it subverts the",
    "start": "1423640",
    "end": "1431080"
  },
  {
    "text": "build and causes and and we end up with a back door in the build",
    "start": "1431080",
    "end": "1436880"
  },
  {
    "text": "artifact the first version of this attack that I built was actually in the OAS dependency check project it is an",
    "start": "1436880",
    "end": "1443799"
  },
  {
    "text": "unreleased version that I will never release it was just kind of a a proof of concept um I do want to point out while",
    "start": "1443799",
    "end": "1452279"
  },
  {
    "text": "this attack is very very easy to do in the Java ecosystem this is attack is not limited to Java a threat actor with",
    "start": "1452279",
    "end": "1460440"
  },
  {
    "text": "enough influence be it monetary geopolitical ideological they have the ability to",
    "start": "1460440",
    "end": "1466360"
  },
  {
    "text": "inject attacks like this into your software supply chain it may be the long game it may take you know H being a",
    "start": "1466360",
    "end": "1475159"
  },
  {
    "text": "positive contributing member of the open source Community to build up enough trust until",
    "start": "1475159",
    "end": "1481039"
  },
  {
    "text": "you can inject an attack like this but it is possible it is absolutely possible",
    "start": "1481039",
    "end": "1486799"
  },
  {
    "text": "to have an Insider threat in your open- Source Community this could happen through your",
    "start": "1486799",
    "end": "1492720"
  },
  {
    "text": "build plugins Maven Gradle poetry I said it's not just Java uh your testing framework Works can even be your Maven",
    "start": "1492720",
    "end": "1499480"
  },
  {
    "text": "or Gradle rapper I do focus a little bit on Java because I'm most familiar with the Java",
    "start": "1499480",
    "end": "1505080"
  },
  {
    "text": "ecosystem so what can we do to try and raise our Assurance of our builds well",
    "start": "1505080",
    "end": "1512320"
  },
  {
    "text": "salsa actually documented one mitigation and this is actually in those uh threats",
    "start": "1512320",
    "end": "1517720"
  },
  {
    "text": "that were out of scope for the runtime uh you know build or runtime dependency",
    "start": "1517720",
    "end": "1523640"
  },
  {
    "text": "I actually think this applies to the build dependencies as well uh and their mitigation is",
    "start": "1523640",
    "end": "1530120"
  },
  {
    "text": "to apply salsa recursively most",
    "start": "1530120",
    "end": "1537000"
  },
  {
    "text": "organizations are just at the very beginning if they're even thinking about trying to apply salsa with any rigor uh",
    "start": "1537000",
    "end": "1544760"
  },
  {
    "text": "there are a few shining examples out there where they're at you know salsa level three uh I'm sure there's vendors",
    "start": "1544760",
    "end": "1551720"
  },
  {
    "text": "in the business Hall that would help you with achieve this but most organizations are just the very beginning of being",
    "start": "1551720",
    "end": "1558039"
  },
  {
    "text": "able to do this so just think about the level of effort to apply salsa",
    "start": "1558039",
    "end": "1563559"
  },
  {
    "text": "recursively this is just the maven build what about Maven itself the jdk",
    "start": "1563559",
    "end": "1570279"
  },
  {
    "text": "the operating system that is a lot of effort to apply solsa recursively to",
    "start": "1570279",
    "end": "1577840"
  },
  {
    "text": "everything in many cases the developers working on these open source components",
    "start": "1577840",
    "end": "1582880"
  },
  {
    "text": "that you're using are doing this in their free time they're volunteers and if asking them now to",
    "start": "1582880",
    "end": "1588799"
  },
  {
    "text": "start applying salsa to not only build you know secure applications but secure",
    "start": "1588799",
    "end": "1594919"
  },
  {
    "text": "their builds uh provide Providence publish to sigstore that's a lot of effort and if",
    "start": "1594919",
    "end": "1601679"
  },
  {
    "text": "we want to see this done the organizations that are using this open source code may need to start",
    "start": "1601679",
    "end": "1608640"
  },
  {
    "text": "contributing back to these open source developers be it by having your",
    "start": "1608640",
    "end": "1614039"
  },
  {
    "text": "developers contribute back if that's not possible consider sponsor sponsoring the developers that build the open source",
    "start": "1614039",
    "end": "1620840"
  },
  {
    "text": "that you use but it all comes down to what level of assurance you need how much of this",
    "start": "1620840",
    "end": "1627279"
  },
  {
    "text": "do you need to cover some people may not require a high level of assurance and others will need this entire uh set of",
    "start": "1627279",
    "end": "1634559"
  },
  {
    "text": "dependencies covered completely is there anything else that can save us",
    "start": "1634559",
    "end": "1640880"
  },
  {
    "text": "well a common thing is the idea of reproducible builds this is the idea",
    "start": "1640880",
    "end": "1646440"
  },
  {
    "text": "that if I build my software on system a and I build my software on system B I",
    "start": "1646440",
    "end": "1652679"
  },
  {
    "text": "will get the exact same bit forbit output and I can calculate a check sum",
    "start": "1652679",
    "end": "1658200"
  },
  {
    "text": "anybody else in the community that has access to the source code can build this application and get the exact same bit",
    "start": "1658200",
    "end": "1665399"
  },
  {
    "text": "forbit output and we will have a check sum and this will prove that there's no malware on system a that could have",
    "start": "1665399",
    "end": "1673120"
  },
  {
    "text": "compromised that build output but what if the malicious code",
    "start": "1673120",
    "end": "1678200"
  },
  {
    "text": "was a build plugin it's brought into system a and compromises the build",
    "start": "1678200",
    "end": "1684480"
  },
  {
    "text": "output it's brought into system B when we do the build and it compromises the build output resulting in a reproducibly",
    "start": "1684480",
    "end": "1691519"
  },
  {
    "text": "compromised build with the exact same check sum that demo application that I showed earlier that uses reproducible",
    "start": "1691519",
    "end": "1698519"
  },
  {
    "text": "builds and it is reproducibly compromised it's important to understand",
    "start": "1698519",
    "end": "1704960"
  },
  {
    "text": "the difference between vulnerable and malicious and to me this is really the difference between traditional supply",
    "start": "1704960",
    "end": "1710200"
  },
  {
    "text": "chain attacks and modern supply chain attacks traditionally we would see people um exploiting vulnerabilities in",
    "start": "1710200",
    "end": "1718960"
  },
  {
    "text": "components you know known vulnerable um dependencies uh this is what SCA and",
    "start": "1718960",
    "end": "1724679"
  },
  {
    "text": "sbom are really good at finding known vulnerable modern supply chain attacks though these are intentionally",
    "start": "1724679",
    "end": "1732240"
  },
  {
    "text": "subverting uh the supply chain so what can we do to detect",
    "start": "1732240",
    "end": "1737399"
  },
  {
    "text": "protect malicious well after reading about solar winds I was challenged to come up with a",
    "start": "1737399",
    "end": "1746039"
  },
  {
    "text": "methodology to identify if a build had been tampered with or you know at build",
    "start": "1746039",
    "end": "1751679"
  },
  {
    "text": "time it had was something injected at build time and I came up with the idea",
    "start": "1751679",
    "end": "1757440"
  },
  {
    "text": "of binary Source validation or you know validating that the build artifact could",
    "start": "1757440",
    "end": "1764440"
  },
  {
    "text": "have been produced by the given source code sounds hard right this only gets really difficult",
    "start": "1764440",
    "end": "1771559"
  },
  {
    "text": "when we get down to the level of native executables and even then I think there's some things that we can do but",
    "start": "1771559",
    "end": "1778640"
  },
  {
    "text": "remember solar winds that wasn net that was C code so I",
    "start": "1778640",
    "end": "1784679"
  },
  {
    "text": "think there's a lot that we can do in that ecosystem to detect things like this and the idea here is to Simply",
    "start": "1784679",
    "end": "1792159"
  },
  {
    "text": "build a model from the build artifact build a model from the source code and compare the two models to look for",
    "start": "1792159",
    "end": "1800039"
  },
  {
    "text": "differences it's really easy to create this model from source code because we have lectures and parsers in just about",
    "start": "1800519",
    "end": "1806760"
  },
  {
    "text": "every language that we use well in every language we use um how detailed that model is is going to be a little",
    "start": "1806760",
    "end": "1812240"
  },
  {
    "text": "dependent on the level of assurance needed but in my you know poc's and testing of this it was sufficient to",
    "start": "1812240",
    "end": "1819279"
  },
  {
    "text": "just extract a highlevel model of the classes uh you know the constants the",
    "start": "1819279",
    "end": "1825159"
  },
  {
    "text": "methods that were defined the methods that were then called you know so the call chain but not any more detailed",
    "start": "1825159",
    "end": "1831600"
  },
  {
    "text": "than that and was sufficient to identify the introduction of malicious",
    "start": "1831600",
    "end": "1837320"
  },
  {
    "text": "code if you've never looked at like Java orn net they canile down to an inter",
    "start": "1837320",
    "end": "1842720"
  },
  {
    "text": "intermediary language you know bite code for Java and the common inter intermediary language for net and you",
    "start": "1842720",
    "end": "1849399"
  },
  {
    "text": "know this is just a Class A Java class file opened up in a hex editor and you can see there is so much information",
    "start": "1849399",
    "end": "1854760"
  },
  {
    "text": "that is just clear text visible in this class file just in a hex editor",
    "start": "1854760",
    "end": "1860279"
  },
  {
    "text": "so of course you can parse these you know um class files to generate the",
    "start": "1860279",
    "end": "1866760"
  },
  {
    "text": "exact same model and then once you have these two",
    "start": "1866760",
    "end": "1872279"
  },
  {
    "text": "models created you can simply compare them if they look the same and there's",
    "start": "1872279",
    "end": "1878600"
  },
  {
    "text": "no you know meaningful differences between the two well you can be pretty",
    "start": "1878600",
    "end": "1884880"
  },
  {
    "text": "assured that nothing happened with within the build it's not saying that there isn't",
    "start": "1884880",
    "end": "1890360"
  },
  {
    "text": "malicious code in the original source code but by comparing by doing this comparison you can be assured that",
    "start": "1890360",
    "end": "1897279"
  },
  {
    "text": "nothing malicious happened during the build um you can do the same thing in",
    "start": "1897279",
    "end": "1902559"
  },
  {
    "text": "other Technologies like you know interpreted languages like python or or uh JavaScript in some cases your model",
    "start": "1902559",
    "end": "1909840"
  },
  {
    "text": "generation tool may be the same for both your um source code and your",
    "start": "1909840",
    "end": "1915480"
  },
  {
    "text": "distribution um artifact um you know the build artifact in those cases is is a lot of cases the exact same as the",
    "start": "1915480",
    "end": "1922000"
  },
  {
    "text": "source code but I don't think a lot of people are even validating that what's in GitHub tagged as version 1.0 is the same",
    "start": "1922000",
    "end": "1930039"
  },
  {
    "text": "as what's in you know npm or piie tagged as the same version nobody's actually to",
    "start": "1930039",
    "end": "1935679"
  },
  {
    "text": "my knowledge nobody's actually doing that comparison to make sure that those two things actually match and are the same",
    "start": "1935679",
    "end": "1942600"
  },
  {
    "text": "thing if the two models are different though if something malicious was",
    "start": "1942600",
    "end": "1947960"
  },
  {
    "text": "injected it really stands out it's obvious to see that something bad happened during the",
    "start": "1947960",
    "end": "1955840"
  },
  {
    "text": "build so some of the challenges are of course compiler optimizations and just",
    "start": "1955840",
    "end": "1961519"
  },
  {
    "text": "known changes for instance in Java if you do string concatenation uh string plus string in the class file it ends up",
    "start": "1961519",
    "end": "1969200"
  },
  {
    "text": "being uh string Builder append do aend um you know and there's there's other",
    "start": "1969200",
    "end": "1974440"
  },
  {
    "text": "things like this that you just have to account for a little bit um another challenge are of course code generators",
    "start": "1974440",
    "end": "1980240"
  },
  {
    "text": "I'm not talking about like um geni code generators I'm talking about the more",
    "start": "1980240",
    "end": "1985480"
  },
  {
    "text": "formulaic code generators that you know are common to see in Java builds and",
    "start": "1985480",
    "end": "1990600"
  },
  {
    "text": "other technology Stacks where you take like a schema and you create a bunch of pojos or you know Fe classes with Fields",
    "start": "1990600",
    "end": "1998240"
  },
  {
    "text": "Getters and Setters for binding um those are the types of generators that you know can cause a",
    "start": "1998240",
    "end": "2004639"
  },
  {
    "text": "problem because that source code is in in the or that that code is in the binary but it's not in the source code",
    "start": "2004639",
    "end": "2011840"
  },
  {
    "text": "because these things are formulaic and because there's known compiler changes we can build this all into heris sixs of",
    "start": "2011840",
    "end": "2018760"
  },
  {
    "text": "this comparison algorithm and lastly the challenge of",
    "start": "2018760",
    "end": "2024200"
  },
  {
    "text": "native executables it's more difficult to extract this information from native",
    "start": "2024200",
    "end": "2029679"
  },
  {
    "text": "executables but even then I think just extracting the constants and the system calls May",
    "start": "2029679",
    "end": "2037080"
  },
  {
    "text": "be sufficient to identify the introduction of uh truly malicious code",
    "start": "2037080",
    "end": "2043080"
  },
  {
    "text": "on the level of like a solar winds there might be some more subtle things that you may have to really dig in more um to",
    "start": "2043080",
    "end": "2050760"
  },
  {
    "text": "identify but the larger truly malicious code I think could be found just by",
    "start": "2050760",
    "end": "2056240"
  },
  {
    "text": "looking at CIS calls and constants but that is an area of",
    "start": "2056240",
    "end": "2061839"
  },
  {
    "text": "research so that's an something that I'm proposing it's not something that I'm open source",
    "start": "2061839",
    "end": "2067398"
  },
  {
    "text": "because well I already maintain one one open source project I'm don't really",
    "start": "2067399",
    "end": "2072480"
  },
  {
    "text": "want to sign up for maintaining another one uh so what are some of the things",
    "start": "2072480",
    "end": "2077839"
  },
  {
    "text": "that you can do today because this doesn't exist yet reduce the number of",
    "start": "2077839",
    "end": "2084480"
  },
  {
    "text": "dependencies you know follow the Deming principle um use fewer higher quality",
    "start": "2084480",
    "end": "2090760"
  },
  {
    "text": "vendors uh if you talk to anybody in the SAA or supply chain Space by reducing",
    "start": "2090760",
    "end": "2096520"
  },
  {
    "text": "the number of of dependency you have both runtime and build time you're reducing your attack",
    "start": "2096520",
    "end": "2102480"
  },
  {
    "text": "surface another thing you can do is don't use code generators during the build use them they're useful absolutely",
    "start": "2102480",
    "end": "2110640"
  },
  {
    "text": "use them but use them during the development process do not use them in the build process check that code into",
    "start": "2110640",
    "end": "2117680"
  },
  {
    "text": "your code repo treat it like any other code that you that you would normally",
    "start": "2117680",
    "end": "2123079"
  },
  {
    "text": "author consider using OAS dependency check to scan your Maven and Gradle",
    "start": "2123400",
    "end": "2128760"
  },
  {
    "text": "build plugins um right now I don't know of any malicious Maven or Gradle build",
    "start": "2128760",
    "end": "2134040"
  },
  {
    "text": "plugins but if one was identified it will likely get a cve and dependency",
    "start": "2134040",
    "end": "2139520"
  },
  {
    "text": "check could at least flag that you know which of your builds were affected lastly talk to your sass and uh",
    "start": "2139520",
    "end": "2148240"
  },
  {
    "text": "supply chain security vendors about the idea of build verification or binary Source validation I think that there is",
    "start": "2148240",
    "end": "2154440"
  },
  {
    "text": "a lot of Promise in this technology so in summary I hope I've proven to you",
    "start": "2154440",
    "end": "2160000"
  },
  {
    "text": "that the trusting trust problem is very real um any code running during the",
    "start": "2160000",
    "end": "2166400"
  },
  {
    "text": "build has the ability to affect the build output",
    "start": "2166400",
    "end": "2171599"
  },
  {
    "text": "reproducibly lastly support your open source developers they're the ones that are",
    "start": "2171599",
    "end": "2177839"
  },
  {
    "text": "going to secure the builds of the open source dependencies that you",
    "start": "2177839",
    "end": "2182880"
  },
  {
    "text": "use there any questions uh I've got a few minutes I can take now or we can move to the wp",
    "start": "2182880",
    "end": "2190240"
  },
  {
    "text": "[Music] room um I think there are mics",
    "start": "2190720",
    "end": "2198359"
  },
  {
    "text": "there so when you say reducing dependencies what would you say for a language like rust where literally",
    "start": "2200960",
    "end": "2206920"
  },
  {
    "text": "everything requires a import of a dependency to run the",
    "start": "2206920",
    "end": "2212839"
  },
  {
    "text": "library I am actually not very familiar with the rust language or build ecosystem unfortunately um the most",
    "start": "2212839",
    "end": "2219720"
  },
  {
    "text": "common places that are going to be vulnerable to something like this are the ones where you have a multiple",
    "start": "2219720",
    "end": "2226880"
  },
  {
    "text": "multiple stages of your build where you might have comp like in Maven you start",
    "start": "2226880",
    "end": "2232200"
  },
  {
    "text": "off compilation test package verify at",
    "start": "2232200",
    "end": "2237599"
  },
  {
    "text": "the end of verify is where most people run gpg sign that that's where they sign",
    "start": "2237599",
    "end": "2244400"
  },
  {
    "text": "and anything running before that signature has the ability like I I did just showed",
    "start": "2244400",
    "end": "2249680"
  },
  {
    "text": "like copying classes in you can actually use utilities to modify classes that",
    "start": "2249680",
    "end": "2255800"
  },
  {
    "text": "were already generated or you could use techniques like lombok does that kind of",
    "start": "2255800",
    "end": "2262040"
  },
  {
    "text": "yeah you just have to go look at lombok if you're not familiar with it from from that kind of a perspective uh within",
    "start": "2262040",
    "end": "2267720"
  },
  {
    "text": "Java um but yeah sorry I'm not as familiar with rust so I can't really answer that question apprciate check",
    "start": "2267720",
    "end": "2273839"
  },
  {
    "text": "check as a consumer of software how do we start the conversation uh about this with venders",
    "start": "2273839",
    "end": "2280280"
  },
  {
    "text": "and uh sort of push him along with this I think that is the unfortunately that's",
    "start": "2280280",
    "end": "2286359"
  },
  {
    "text": "the the main thing is you just have to ask them about it um Point them to my talk uh here",
    "start": "2286359",
    "end": "2293040"
  },
  {
    "text": "um we we've seen solar winds we haven't seen other examples that's not saying",
    "start": "2293040",
    "end": "2298480"
  },
  {
    "text": "that they're not out there or have happened because it is also possible to do this style of",
    "start": "2298480",
    "end": "2304040"
  },
  {
    "text": "attack but have several conditions in that back door that would have to be",
    "start": "2304040",
    "end": "2310119"
  },
  {
    "text": "satisfied for that back door to actually fire you know it may have to be running on an on an ec2 instance in this Zone in",
    "start": "2310119",
    "end": "2318960"
  },
  {
    "text": "you know to to actually have that you know there's ways to trigger things to",
    "start": "2318960",
    "end": "2324599"
  },
  {
    "text": "um really limit that so I'm not saying that these attacks haven't happened uh we just haven't seen anything reporting",
    "start": "2324599",
    "end": "2330200"
  },
  {
    "text": "of them yet any other",
    "start": "2330200",
    "end": "2335520"
  },
  {
    "text": "questions if not um thank you very [Applause]",
    "start": "2335520",
    "end": "2343510"
  },
  {
    "text": "much",
    "start": "2354400",
    "end": "2357400"
  }
]