[
  {
    "text": "okay it's great to be here I will present a new coordination",
    "start": "2480",
    "end": "8519"
  },
  {
    "text": "technique by abusing binary transition cache files uh before we get started let",
    "start": "8519",
    "end": "14340"
  },
  {
    "text": "me introduce myself a little bit my name is I am a security researcher at the",
    "start": "14340",
    "end": "19520"
  },
  {
    "text": "ffriki my main research interests about BTD research and exploitation technique",
    "start": "19520",
    "end": "24720"
  },
  {
    "text": "especially for on-based Windows recently I started Marcus Kitty and found multiple bomb videos on Mac OS such as",
    "start": "24720",
    "end": "32398"
  },
  {
    "text": "TCC sap or gatekeeper bypass I gave Dogs Out productivity 2020 and cold brew 2021",
    "start": "32399",
    "end": "40860"
  },
  {
    "text": "this is the agenda first I introduced arm-based Oasis immersion Technologies",
    "start": "40860",
    "end": "46260"
  },
  {
    "text": "and fundamental concept of Mac whiskey D then I talk about the rosie to internals",
    "start": "46260",
    "end": "51660"
  },
  {
    "text": "very briefly then I show a new code induction technique and named aot poisoning and I and how to explode it on",
    "start": "51660",
    "end": "60239"
  },
  {
    "text": "Mac OS then I show a similar new connection technique on ambase Windows and how to export it",
    "start": "60239",
    "end": "68539"
  },
  {
    "text": "yeah so let's kick off have been becoming very popular recently",
    "start": "69500",
    "end": "75180"
  },
  {
    "text": "such as on-based Windows and Apple Cinco Mac this is because I think armbase",
    "start": "75180",
    "end": "81119"
  },
  {
    "text": "laptops offer long battery life according to the research found from According to the data from the research",
    "start": "81119",
    "end": "87240"
  },
  {
    "text": "firm mcpus are expected to reach 25 percent of the laptop market share by",
    "start": "87240",
    "end": "93500"
  },
  {
    "text": "2027. that's great but however there are some difficulties for many users to",
    "start": "93500",
    "end": "98640"
  },
  {
    "text": "switch from video to arm because we still have many inter-based applications to overcome this difficulty Microsoft",
    "start": "98640",
    "end": "106680"
  },
  {
    "text": "output provide compatibility layers such as x86 emission technology and rosette",
    "start": "106680",
    "end": "112619"
  },
  {
    "text": "tutu these Technologies are transparent to users so when you run interface applications these two technologies",
    "start": "112619",
    "end": "119520"
  },
  {
    "text": "automatically translate or emulate these intervest applications but translating and emulating a time",
    "start": "119520",
    "end": "127680"
  },
  {
    "text": "consuming so reducing this is very important so to reduce the amount of binding",
    "start": "127680",
    "end": "133739"
  },
  {
    "text": "transition these two technologies can see the buyer translation result as files according to the mstn or apple",
    "start": "133739",
    "end": "141900"
  },
  {
    "text": "platform security if you can run the same application to us the previous",
    "start": "141900",
    "end": "147959"
  },
  {
    "text": "translation result is reused and the binary transition is not performed twice",
    "start": "147959",
    "end": "153599"
  },
  {
    "text": "this caching mechanism and body and translation cache files can be abused previously I haven't been researching",
    "start": "153599",
    "end": "161040"
  },
  {
    "text": "how an article can abuse these videos so let's quickly Decap my previous",
    "start": "161040",
    "end": "166860"
  },
  {
    "text": "research on the broadcast EU in this research I analyze the binary transaction cash flies on armbase",
    "start": "166860",
    "end": "173640"
  },
  {
    "text": "Windows named XDA cache file then I propose a new code injection technique",
    "start": "173640",
    "end": "179060"
  },
  {
    "text": "XDA cache hijacking this code injection is performed by",
    "start": "179060",
    "end": "184500"
  },
  {
    "text": "directly modifying the binary transition cache files this technique requires admin privileges for modifying binary",
    "start": "184500",
    "end": "191760"
  },
  {
    "text": "transition cache files but it has unique side effects that benefit that occur",
    "start": "191760",
    "end": "197220"
  },
  {
    "text": "for more details are similar bracket utilize and talk video after this research I wondered if there",
    "start": "197220",
    "end": "203819"
  },
  {
    "text": "is a similar code injection technique on Marcus rose tattoo because it has similar caching mechanism and buying",
    "start": "203819",
    "end": "210840"
  },
  {
    "text": "transaction cache files then I started to study Macos Kitty and analyze those",
    "start": "210840",
    "end": "216540"
  },
  {
    "text": "two internals I quickly noticed that the macro skating",
    "start": "216540",
    "end": "223920"
  },
  {
    "text": "model is no longer traditional unique skating model starting from Air Captain system into",
    "start": "223920",
    "end": "229680"
  },
  {
    "text": "the protection all C is introduced sip is a security mechanism that restricts",
    "start": "229680",
    "end": "235799"
  },
  {
    "text": "some dangerous operations such as modifying system files loading current extensions and debugging system",
    "start": "235799",
    "end": "242580"
  },
  {
    "text": "processes due to the executive mechanism Evolution cannot perform these dangerous",
    "start": "242580",
    "end": "248940"
  },
  {
    "text": "operations so sip is also known as uterus so even Bluetooth does not have good access to",
    "start": "248940",
    "end": "255480"
  },
  {
    "text": "the system for example even root user a cannot modify system file so if we try to",
    "start": "255480",
    "end": "262500"
  },
  {
    "text": "delete some areas binary this operation is denied",
    "start": "262500",
    "end": "267540"
  },
  {
    "text": "moreover Evolution cannot access some files due to the data mode so root is is",
    "start": "267540",
    "end": "273660"
  },
  {
    "text": "not the god or Mac OS next I also notice that the Crux of",
    "start": "273660",
    "end": "280199"
  },
  {
    "text": "Macross exploits is called injection",
    "start": "280199",
    "end": "284479"
  },
  {
    "text": "Omega of Marcus exploits is to run code in the context of other applications but why could injection",
    "start": "287280",
    "end": "294120"
  },
  {
    "text": "this is because a macro skating mechanism hability derived on the code signatures and its entitlement",
    "start": "294120",
    "end": "300960"
  },
  {
    "text": "on Mac OS and determates Grant various rights to these applications for example",
    "start": "300960",
    "end": "306020"
  },
  {
    "text": "applications needing to access sunset sunset some sensitive resources such as",
    "start": "306020",
    "end": "311340"
  },
  {
    "text": "camera microphone messages should have proper entertainments without specific",
    "start": "311340",
    "end": "316520"
  },
  {
    "text": "entitlements applications cannot disease since resources but if we can execute code in the",
    "start": "316520",
    "end": "324240"
  },
  {
    "text": "context of other applications that are allowed to access some sensible resources we can hijack Trust of them",
    "start": "324240",
    "end": "330780"
  },
  {
    "text": "and gain rights of these applications so code injection is dangerous and",
    "start": "330780",
    "end": "336240"
  },
  {
    "text": "strictly prohibited on Mac OS so hard at runtime is enabled for almost all application and this restricts code",
    "start": "336240",
    "end": "343740"
  },
  {
    "text": "injection by diary projecting but if we can find a new way to inject code in on",
    "start": "343740",
    "end": "350280"
  },
  {
    "text": "Mac OS we can export it to access on sensible resources I mean to bypass",
    "start": "350280",
    "end": "355380"
  },
  {
    "text": "privacy mechanisms on Mac OS so I set the Explorer code injection technique",
    "start": "355380",
    "end": "360419"
  },
  {
    "text": "abusing those two okay next let's move on to reset to",
    "start": "360419",
    "end": "366240"
  },
  {
    "text": "internals and how to achieve code injection of using this tattoo is not installed by default so",
    "start": "366240",
    "end": "374400"
  },
  {
    "text": "when you run an application that needs loaded for the first time pop-up is rates like this and if you click install",
    "start": "374400",
    "end": "382039"
  },
  {
    "text": "will be installed this installation can also be performed by running the software update command like this",
    "start": "382039",
    "end": "389160"
  },
  {
    "text": "uh this does not require any user interactions please note that installing Rosetta 2",
    "start": "389160",
    "end": "394919"
  },
  {
    "text": "doesn't require root privileges so if the system doesn't have Bluetooth",
    "start": "394919",
    "end": "400699"
  },
  {
    "text": "can insert manually running the software update command logic tattoo offers two types of binary",
    "start": "400699",
    "end": "408780"
  },
  {
    "text": "transition just in time of it ahead of time or aot typically aot translation is employed",
    "start": "408780",
    "end": "416220"
  },
  {
    "text": "but this translation is also used for learning applications that generate",
    "start": "416220",
    "end": "421319"
  },
  {
    "text": "Dynamic codes such as web browser translation translated artworks are",
    "start": "421319",
    "end": "427740"
  },
  {
    "text": "written to stress as a special type of mac object file this is called aod5",
    "start": "427740",
    "end": "434759"
  },
  {
    "text": "it contains translated m64 code and these files are located at Broad dbos",
    "start": "434759",
    "end": "441720"
  },
  {
    "text": "directory which is protected by ship so if loot is cannot modify these aot files",
    "start": "441720",
    "end": "450300"
  },
  {
    "text": "so unlike Windows root privileges are not enough for modifying this point and",
    "start": "450300",
    "end": "456120"
  },
  {
    "text": "transition cache files on Mac OS are there any ways to control contents",
    "start": "456120",
    "end": "461460"
  },
  {
    "text": "of these files so to explore this let's move on to how Rosetta 2 works",
    "start": "461460",
    "end": "468419"
  },
  {
    "text": "once I explain some components of logic tattoo some binaries related to logic 2",
    "start": "468419",
    "end": "474419"
  },
  {
    "text": "are pressed under the library Apple USR review exec oah and ESL Ruby exec closet",
    "start": "474419",
    "end": "481620"
  },
  {
    "text": "trajectories Transit is a series for translating an",
    "start": "481620",
    "end": "486720"
  },
  {
    "text": "x64 executable without running it translates is a vital in the stock and",
    "start": "486720",
    "end": "493139"
  },
  {
    "text": "will be described in later runtime is a long time library that is injected into a translated process",
    "start": "493139",
    "end": "500720"
  },
  {
    "text": "oahd is a management demo of AO device it receives a file descriptor of x64",
    "start": "500720",
    "end": "507539"
  },
  {
    "text": "executable then lands or HD helper orac helper is a translator of an x64",
    "start": "507539",
    "end": "514440"
  },
  {
    "text": "executable next I show a very simplified execution rule to explain how these components",
    "start": "514440",
    "end": "521339"
  },
  {
    "text": "interact when you run into base application that needs related to loaded to runtime is",
    "start": "521339",
    "end": "528000"
  },
  {
    "text": "injected into this process then do that to runtime sends the file descriptor of an x64 executable appear",
    "start": "528000",
    "end": "535680"
  },
  {
    "text": "Mark IPC mechanism after receiving the file descriptor OSD",
    "start": "535680",
    "end": "540839"
  },
  {
    "text": "learns oah helper bypassing a file descriptor as a command line argument",
    "start": "540839",
    "end": "547080"
  },
  {
    "text": "after that oahd translates it into an aot file and the translated aot file is",
    "start": "547080",
    "end": "554040"
  },
  {
    "text": "created at per DB ohg directory and this created aot file is mapped onto",
    "start": "554040",
    "end": "560279"
  },
  {
    "text": "the translated process this translation is performed for every x64 module if there are no previous",
    "start": "560279",
    "end": "567300"
  },
  {
    "text": "translation results after this translation finishes loaded",
    "start": "567300",
    "end": "572459"
  },
  {
    "text": "to runtime transfer its controls to these aot files if needed",
    "start": "572459",
    "end": "578060"
  },
  {
    "text": "typically aot translation is performed automatically like this but aot",
    "start": "578060",
    "end": "583860"
  },
  {
    "text": "transition can also be performed manually by using transits by using these two we can quickly",
    "start": "583860",
    "end": "591300"
  },
  {
    "text": "Notifier of the specified x64 executable without running it",
    "start": "591300",
    "end": "596700"
  },
  {
    "text": "s inner workings are to send a file descriptor of an x64 executable to osc",
    "start": "596700",
    "end": "603360"
  },
  {
    "text": "demon beer Mark RPC mechanism as I said in the introduction this",
    "start": "603360",
    "end": "610140"
  },
  {
    "text": "created aod files are casually used this is reasonable because binding",
    "start": "610140",
    "end": "615240"
  },
  {
    "text": "translation is time consuming so should not be performed multiple times but how does Rosetta 2 determine phases",
    "start": "615240",
    "end": "623399"
  },
  {
    "text": "specified x64 executable was previously translated or not",
    "start": "623399",
    "end": "628500"
  },
  {
    "text": "so to do this OSG calculates a dedicated hash and uses it for checking I don't",
    "start": "628500",
    "end": "636180"
  },
  {
    "text": "know what apple called this hash but I call this aot local patch in this talk",
    "start": "636180",
    "end": "641459"
  },
  {
    "text": "you can find this hash value by digging the barrel DB oh directory and if there",
    "start": "641459",
    "end": "647519"
  },
  {
    "text": "is a directory corresponding to the aot lookup pass or as it uses aod file in",
    "start": "647519",
    "end": "653459"
  },
  {
    "text": "this directory it looks good but how OSD calculate the",
    "start": "653459",
    "end": "659040"
  },
  {
    "text": "aod local pass from a specified X6 over executable a possible candidate is calculating the",
    "start": "659040",
    "end": "665459"
  },
  {
    "text": "cryptographic hash from an entire binary contents and file paths but it should be",
    "start": "665459",
    "end": "672180"
  },
  {
    "text": "avoided from a performance perspective so oasd does not hash whole binary",
    "start": "672180",
    "end": "677940"
  },
  {
    "text": "contents instead it has a fire header and fire metadata",
    "start": "677940",
    "end": "684779"
  },
  {
    "text": "foreign",
    "start": "684779",
    "end": "687779"
  },
  {
    "text": "or is the calculate shell 256 hash from the crew pass Marco header user ID and",
    "start": "691200",
    "end": "698399"
  },
  {
    "text": "group ID three timestamps and file size three timestamps consists of M times C",
    "start": "698399",
    "end": "705480"
  },
  {
    "text": "time and CR time enter is a time when the file data was last modified and C",
    "start": "705480",
    "end": "711300"
  },
  {
    "text": "time is the time when the file status was last changed and CR time is time of file creation",
    "start": "711300",
    "end": "717959"
  },
  {
    "text": "a particularly important here is that code section of the target binary is not",
    "start": "717959",
    "end": "723600"
  },
  {
    "text": "used for calculating the iot lookup pass so if we can modify the code section",
    "start": "723600",
    "end": "729600"
  },
  {
    "text": "while keeping the LT local function changed we can cause hash equation of the LT Local Pass",
    "start": "729600",
    "end": "736620"
  },
  {
    "text": "so by abusing this we can force the target executable to use a different aod",
    "start": "736620",
    "end": "742079"
  },
  {
    "text": "file upon execution So based on this finding a plan to",
    "start": "742079",
    "end": "747720"
  },
  {
    "text": "achieve code injection is as follows first modify the target executable and",
    "start": "747720",
    "end": "753300"
  },
  {
    "text": "injector share code into it then create an iot file of it using",
    "start": "753300",
    "end": "758459"
  },
  {
    "text": "translate tool after that restart the modified executable to the original one but keep",
    "start": "758459",
    "end": "765899"
  },
  {
    "text": "the aot local path unchanged and run this executable",
    "start": "765899",
    "end": "771120"
  },
  {
    "text": "since the LT local patch Remains the Same logic tattoo uses the previous aod",
    "start": "771120",
    "end": "776160"
  },
  {
    "text": "file for the execution the importantly notifies usable execution",
    "start": "776160",
    "end": "781500"
  },
  {
    "text": "so if we can modify the file contents without a wizard changing the aod local",
    "start": "781500",
    "end": "787920"
  },
  {
    "text": "path we can point in the UT file and inject code through this",
    "start": "787920",
    "end": "794459"
  },
  {
    "text": "but modifying the file always updates timestamps as I said timestamps are used",
    "start": "794459",
    "end": "802019"
  },
  {
    "text": "for hardship so the LD local path changes so how do we file contents",
    "start": "802019",
    "end": "807660"
  },
  {
    "text": "result operating timestamps a possible way to do this is to restore",
    "start": "807660",
    "end": "814200"
  },
  {
    "text": "timestamps after modifying the file this is a well known timestamping technique but unfortunately this does",
    "start": "814200",
    "end": "821940"
  },
  {
    "text": "not work because C time is used for hashing of course timestamping always",
    "start": "821940",
    "end": "828180"
  },
  {
    "text": "updates C10 so we cannot list the C time after modifying the file so we cannot",
    "start": "828180",
    "end": "834660"
  },
  {
    "text": "use timestamping technique here but I found interesting description of",
    "start": "834660",
    "end": "841440"
  },
  {
    "text": "updates of time zones Hawaii reading the other unique specification of a map",
    "start": "841440",
    "end": "847500"
  },
  {
    "text": "it says the C time and M term fees of a file that is mapped with map shield and",
    "start": "847500",
    "end": "853740"
  },
  {
    "text": "protright will be marked for update at some point in the interval between right reference to the mapped region and the",
    "start": "853740",
    "end": "860820"
  },
  {
    "text": "next Call to msync if there is no such call this fees may",
    "start": "860820",
    "end": "866399"
  },
  {
    "text": "be marked for update at any time after a light reference if the underlying file",
    "start": "866399",
    "end": "871620"
  },
  {
    "text": "is modified as a result may be marked for update during attention because this Quest has been",
    "start": "871620",
    "end": "878639"
  },
  {
    "text": "changed to shall be marked in the latest version so the in the latest version updates of timestamps becomes abundantly",
    "start": "878639",
    "end": "885839"
  },
  {
    "text": "but if Mac OS follows a little odd unique specification light into 5 BM map",
    "start": "885839",
    "end": "892139"
  },
  {
    "text": "without calling McQ might not update C time and M time",
    "start": "892139",
    "end": "897839"
  },
  {
    "text": "so to to check this I wrote a test program this program opens the file and",
    "start": "897839",
    "end": "903899"
  },
  {
    "text": "Maps it onto the memory then it modifies the file contents in two ways",
    "start": "903899",
    "end": "909480"
  },
  {
    "text": "and show timestamps one way is that it modifies the file contains Vim map and",
    "start": "909480",
    "end": "916500"
  },
  {
    "text": "calls Mr map the second way is that it modifies a file contents via a map and",
    "start": "916500",
    "end": "922860"
  },
  {
    "text": "calls msync and a map the only difference is the call to msync",
    "start": "922860",
    "end": "931260"
  },
  {
    "text": "this is the result of this experiment if msync is not called M time and C time",
    "start": "931260",
    "end": "938220"
  },
  {
    "text": "are not updated although file contents are changed however if msync is called these two",
    "start": "938220",
    "end": "946139"
  },
  {
    "text": "timestamps are correctly updated so we can change file contents without updating timestamps via a map if we",
    "start": "946139",
    "end": "954180"
  },
  {
    "text": "don't call msync So based on this a plan to achieve",
    "start": "954180",
    "end": "959459"
  },
  {
    "text": "inject code is as follows first modify the target executive Target executable and injection code into it",
    "start": "959459",
    "end": "967260"
  },
  {
    "text": "then create a iot file of it using Translate after that restore the modified",
    "start": "967260",
    "end": "973980"
  },
  {
    "text": "executable to the original one but when restarting we modify the file we modify",
    "start": "973980",
    "end": "980279"
  },
  {
    "text": "the file content via a map without calling msync since this does not update C time on M",
    "start": "980279",
    "end": "987300"
  },
  {
    "text": "time so the LD local part Remains the Same so uh so uh when learning the target is",
    "start": "987300",
    "end": "994500"
  },
  {
    "text": "getable uh previous aot file is used and The Poisoned ultrifier is used for the",
    "start": "994500",
    "end": "999839"
  },
  {
    "text": "execution and injected code is executed so I will show some quick demo",
    "start": "999839",
    "end": "1007339"
  },
  {
    "text": "uh first I build a test application that displays horrible string to us",
    "start": "1007339",
    "end": "1014320"
  },
  {
    "text": "and run this application and this application shows however string twice as expected and calculate",
    "start": "1015860",
    "end": "1023120"
  },
  {
    "text": "the hotspot of this executable then update timestamps and the poison idifer of it",
    "start": "1023120",
    "end": "1030319"
  },
  {
    "text": "and inject circles through this before running",
    "start": "1030319",
    "end": "1035980"
  },
  {
    "text": "calculates a cryptographic hotspot again these two hash values are the same so",
    "start": "1035980",
    "end": "1041959"
  },
  {
    "text": "this executable is not tampered with after aot poisoning and learn this executable",
    "start": "1041959",
    "end": "1050299"
  },
  {
    "text": "but surprisingly this program doesn't show the hardware string instead it",
    "start": "1050299",
    "end": "1055640"
  },
  {
    "text": "launches a bean share this is because the poison diode file is used for the execution",
    "start": "1055640",
    "end": "1062720"
  },
  {
    "text": "but after updating the timestamp of this",
    "start": "1062720",
    "end": "1067760"
  },
  {
    "text": "executable I'll run it again this program shows a hollow string this",
    "start": "1067760",
    "end": "1073340"
  },
  {
    "text": "is because the timestamps is updated and on the aod local bus changes",
    "start": "1073340",
    "end": "1078799"
  },
  {
    "text": "so the pointifier is not used for the execution this time",
    "start": "1078799",
    "end": "1085780"
  },
  {
    "text": "okay so this technique looks good but there's a limitation this technique",
    "start": "1086000",
    "end": "1091160"
  },
  {
    "text": "cannot be applied to assigned executable there are two reasons why this technique cannot be applied to assigned executable",
    "start": "1091160",
    "end": "1099020"
  },
  {
    "text": "the first is that this is due to the new security mitigation introducing Apple SQL mark",
    "start": "1099020",
    "end": "1105140"
  },
  {
    "text": "in our second Mark impress modification of assigned executable causes a program",
    "start": "1105140",
    "end": "1110240"
  },
  {
    "text": "to crash when learning this issue was reported by applications developer and Apple has made a",
    "start": "1110240",
    "end": "1117799"
  },
  {
    "text": "guidelines to avoid this crash they said code signing information is hang of the",
    "start": "1117799",
    "end": "1123380"
  },
  {
    "text": "blue node within the corner and modifying the file behind that cache will cause problems so you need a new",
    "start": "1123380",
    "end": "1129679"
  },
  {
    "text": "Brunel which means a new file that is a new inode so note that this crash occurs",
    "start": "1129679",
    "end": "1135919"
  },
  {
    "text": "even if we restart the executable to the body to sign the one on disk so to abort this crash in aot poisoning",
    "start": "1135919",
    "end": "1143900"
  },
  {
    "text": "we cannot perform impressed modification via a map so we need to create a copy of",
    "start": "1143900",
    "end": "1150320"
  },
  {
    "text": "the target executable but this always updates the timestamps so which means",
    "start": "1150320",
    "end": "1155900"
  },
  {
    "text": "the change of LTD capacity the second reason is that oahd does not",
    "start": "1155900",
    "end": "1162200"
  },
  {
    "text": "accept an executable with an invertical signature so when we try to translate an",
    "start": "1162200",
    "end": "1167720"
  },
  {
    "text": "executable with invertible signature translate to exist abnormally",
    "start": "1167720",
    "end": "1173179"
  },
  {
    "text": "so we need to create our executable with political signature containing our",
    "start": "1173179",
    "end": "1179120"
  },
  {
    "text": "payroll as I said in the introduction Macos Kitty mechanism heavily around the call",
    "start": "1179120",
    "end": "1185780"
  },
  {
    "text": "Signature so we we want to improve this technique to be applicable also to sign",
    "start": "1185780",
    "end": "1191299"
  },
  {
    "text": "the executable so how about fix this issue Apple fixed",
    "start": "1191299",
    "end": "1196820"
  },
  {
    "text": "this issue by updating the ABS file system or to pixel 11 6 and Monterey Trail 0-1",
    "start": "1196820",
    "end": "1204679"
  },
  {
    "text": "uh after this update light into a 5bm map without anything up the C time",
    "start": "1204679",
    "end": "1210380"
  },
  {
    "text": "correctly so we no longer modify the file contents without updating timestamps",
    "start": "1210380",
    "end": "1216820"
  },
  {
    "text": "unfortunately Apple did not assign CB to this issue but acknowledged it to me",
    "start": "1216820",
    "end": "1223280"
  },
  {
    "text": "like this okay so this happened of AP this update",
    "start": "1223280",
    "end": "1228320"
  },
  {
    "text": "of apfs prevents us from exploiting aod poisoning but is Apple fixed enough",
    "start": "1228320",
    "end": "1236059"
  },
  {
    "text": "after updating my Mac OS I noticed that the way to calculate the aot lookup pass",
    "start": "1236059",
    "end": "1241880"
  },
  {
    "text": "stays the same so the output fix relies on the apfh fix",
    "start": "1241880",
    "end": "1248720"
  },
  {
    "text": "but Macos supports balance file system Asus apfs",
    "start": "1248720",
    "end": "1253760"
  },
  {
    "text": "such as HS Plus or export and fast32 so the adfs is not the only file system",
    "start": "1253760",
    "end": "1260419"
  },
  {
    "text": "available on Mac OS fortunately Mac OS has built in HDI",
    "start": "1260419",
    "end": "1266059"
  },
  {
    "text": "YouTube command and by using this command we can create a mount body supply system locally",
    "start": "1266059",
    "end": "1271880"
  },
  {
    "text": "since Apple's fixed relies on the AP access fix we can bypass it using other",
    "start": "1271880",
    "end": "1277340"
  },
  {
    "text": "file system next I examine the timestamps of other",
    "start": "1277340",
    "end": "1282799"
  },
  {
    "text": "file system worry being I found the interesting feature of fast32",
    "start": "1282799",
    "end": "1288140"
  },
  {
    "text": "what's 32 doesn't have c-da so destroying timestamps after modifying",
    "start": "1288140",
    "end": "1294140"
  },
  {
    "text": "the call section doesn't affect the aot lookup pass so we can easily cause a harsh question",
    "start": "1294140",
    "end": "1300559"
  },
  {
    "text": "of aod local pass by time assumping technique or faster lead file system",
    "start": "1300559",
    "end": "1306679"
  },
  {
    "text": "okay so we bypass Apple's apfs fix next we must overcome the limitation of",
    "start": "1306679",
    "end": "1313400"
  },
  {
    "text": "the previous aot poisoning it cannot be applied and signed executable there were",
    "start": "1313400",
    "end": "1318679"
  },
  {
    "text": "two reasons so we need to bypass these two restrictions",
    "start": "1318679",
    "end": "1325000"
  },
  {
    "text": "first restriction has already been bypassed because we no longer need impress modification so even if we",
    "start": "1325100",
    "end": "1332780"
  },
  {
    "text": "create a new file we can restore its timestamps on faster identifier system",
    "start": "1332780",
    "end": "1338419"
  },
  {
    "text": "the second restriction can be bypassed by designing without the hook signature",
    "start": "1338419",
    "end": "1345159"
  },
  {
    "text": "I found that oahd accepts are executable with an ad hoc signature so after",
    "start": "1345159",
    "end": "1351559"
  },
  {
    "text": "injecting our payload we can we can try after inject our payload we can design",
    "start": "1351559",
    "end": "1357919"
  },
  {
    "text": "it without hook signature then translate it it looks good but we need one more step",
    "start": "1357919",
    "end": "1365440"
  },
  {
    "text": "depressing the existing signature sometimes changes a macro header this change affects the aot lookup Ash",
    "start": "1365440",
    "end": "1372740"
  },
  {
    "text": "because the LD local patch is calculated from the marker header and Firebase and",
    "start": "1372740",
    "end": "1378740"
  },
  {
    "text": "other fire metadata so we need to perform ad hoc signing while keeping the macro hit unchanged",
    "start": "1378740",
    "end": "1386179"
  },
  {
    "text": "so to address this issue I developed a news to perform ad hoc signing a while",
    "start": "1386179",
    "end": "1392419"
  },
  {
    "text": "keeping the macro hit unchanged okay so the steps to inject code are as",
    "start": "1392419",
    "end": "1399200"
  },
  {
    "text": "follows and this is called aot poisoning plus create a facility to image and multitude",
    "start": "1399200",
    "end": "1405679"
  },
  {
    "text": "mounted with using HDI YouTube command and then copy and copy a Target",
    "start": "1405679",
    "end": "1411260"
  },
  {
    "text": "executable to the mounted point and in modify the target executable and",
    "start": "1411260",
    "end": "1417020"
  },
  {
    "text": "inject share code into it and resize it without hook signature then create an",
    "start": "1417020",
    "end": "1423140"
  },
  {
    "text": "iot file of it using transit2 after that Lister the modified Target executable to",
    "start": "1423140",
    "end": "1429620"
  },
  {
    "text": "the original original one having the political signature and disturb also",
    "start": "1429620",
    "end": "1435440"
  },
  {
    "text": "timestamps then run the target executable normally",
    "start": "1435440",
    "end": "1440980"
  },
  {
    "text": "is used for the execution and the injected code is executed",
    "start": "1442419",
    "end": "1448220"
  },
  {
    "text": "okay so we can inject share code into so okay we can inject circle into the x64",
    "start": "1448220",
    "end": "1455120"
  },
  {
    "text": "executable with aot poisoning even if it is called sign",
    "start": "1455120",
    "end": "1460460"
  },
  {
    "text": "okay so let's move on to how to exploit this technique",
    "start": "1460460",
    "end": "1467259"
  },
  {
    "text": "TCC bypass PCC stands for transparency constant and control which protects user sensible",
    "start": "1467860",
    "end": "1476059"
  },
  {
    "text": "data if we are if an attacker try to access",
    "start": "1476059",
    "end": "1481100"
  },
  {
    "text": "some sensible data a pop-up is less like this and",
    "start": "1481100",
    "end": "1486679"
  },
  {
    "text": "result use without this user's concept article cannot access sense resources",
    "start": "1486679",
    "end": "1494299"
  },
  {
    "text": "for more details uh there's a great research on TCC internals and its bypass",
    "start": "1494299",
    "end": "1500360"
  },
  {
    "text": "technique which which is presented by chavan Boise Art broker to USA and EU so",
    "start": "1500360",
    "end": "1507080"
  },
  {
    "text": "please check out their research TCC bypass can be achieved by injecting",
    "start": "1507080",
    "end": "1513620"
  },
  {
    "text": "code in the application that are allowed to access some sensible resources",
    "start": "1513620",
    "end": "1519200"
  },
  {
    "text": "for example CBA 2020 2425 24259 is the probability of signal that",
    "start": "1519200",
    "end": "1527779"
  },
  {
    "text": "enable article to access the microphone without the TCC popup the root cause of this paranability is",
    "start": "1527779",
    "end": "1535580"
  },
  {
    "text": "that all the signal had variable to entertainment Arrow divided the",
    "start": "1535580",
    "end": "1540860"
  },
  {
    "text": "environment variable and disabled Library validation so we can easily inject unsigned",
    "start": "1540860",
    "end": "1547279"
  },
  {
    "text": "directive into signal to access microphone similar issues were present on other",
    "start": "1547279",
    "end": "1554120"
  },
  {
    "text": "applications such as of course these issues have already been",
    "start": "1554120",
    "end": "1559880"
  },
  {
    "text": "fixed by enabling this Library partition so we cannot exploit this anymore",
    "start": "1559880",
    "end": "1567980"
  },
  {
    "text": "but with aot poisoning we can inject inject code into applications even if it",
    "start": "1567980",
    "end": "1576679"
  },
  {
    "text": "is called assigned okay I will show quick demo of GCC",
    "start": "1576679",
    "end": "1582679"
  },
  {
    "text": "bypass only them is allowed to access the",
    "start": "1582679",
    "end": "1588020"
  },
  {
    "text": "screen records its contents so applications other than them cannot grab the screen capture screenshot without a",
    "start": "1588020",
    "end": "1595760"
  },
  {
    "text": "TCC popup like this sorry like this",
    "start": "1595760",
    "end": "1602539"
  },
  {
    "text": "but when we execute the code in the context of Zoom we can grab the",
    "start": "1602539",
    "end": "1608779"
  },
  {
    "text": "screenshot without TCC popup now injecting Shell Code into the",
    "start": "1608779",
    "end": "1614779"
  },
  {
    "text": "and run them to execute our code",
    "start": "1614779",
    "end": "1620559"
  },
  {
    "text": "there so the captcha screenshot",
    "start": "1621080",
    "end": "1625840"
  },
  {
    "text": "Okay so we have obtained the screenshot we have obtained screenshot without TCC pop-up",
    "start": "1627799",
    "end": "1634760"
  },
  {
    "text": "like this of course Library validation is enabled in this project",
    "start": "1634760",
    "end": "1641980"
  },
  {
    "text": "next I show other exploitations aot poisoning has several benefits on",
    "start": "1643039",
    "end": "1648440"
  },
  {
    "text": "article to execute malware first on article can hide most payroll",
    "start": "1648440",
    "end": "1653840"
  },
  {
    "text": "in sap protective location so it is hard to investigate the attack",
    "start": "1653840",
    "end": "1659419"
  },
  {
    "text": "in the instant response phase because there is no clear indicator in the Target executable",
    "start": "1659419",
    "end": "1665659"
  },
  {
    "text": "the actual payload is hidden in the Sip protected location so no every software",
    "start": "1665659",
    "end": "1671840"
  },
  {
    "text": "scan this far even for Macos building X Project",
    "start": "1671840",
    "end": "1677919"
  },
  {
    "text": "second this method makes the detailed Dynamic analysis decode because it has",
    "start": "1678200",
    "end": "1684200"
  },
  {
    "text": "anti-debacking functionality when we try to debug the AO Department executable with error DBA lldb exists",
    "start": "1684200",
    "end": "1692840"
  },
  {
    "text": "abnormally like this with this technique detailed Dynamic",
    "start": "1692840",
    "end": "1699440"
  },
  {
    "text": "analysis becomes harder next move on to how I would fix this",
    "start": "1699440",
    "end": "1706100"
  },
  {
    "text": "probability Apple fixed this adventure 13 monitor 6 and pixel 117. Apple are sensible to",
    "start": "1706100",
    "end": "1714860"
  },
  {
    "text": "this issue and gave me transponding next let's analyze Apple's fix after the",
    "start": "1714860",
    "end": "1722240"
  },
  {
    "text": "secretary update we cannot execute an iot poisoned executable",
    "start": "1722240",
    "end": "1727899"
  },
  {
    "text": "signing status by calling the fan control with f out file supplemental command so the code signing validation",
    "start": "1728620",
    "end": "1735860"
  },
  {
    "text": "prevents this attack okay so this part looks nice but this",
    "start": "1735860",
    "end": "1742039"
  },
  {
    "text": "happens rely on checking the diamond concerning status so this means that we",
    "start": "1742039",
    "end": "1747380"
  },
  {
    "text": "can see inject code into unsigned x64 executable so GCC bypass is fixed and we cannot",
    "start": "1747380",
    "end": "1754460"
  },
  {
    "text": "export it anymore but local attack can still perform other exploitations such",
    "start": "1754460",
    "end": "1759980"
  },
  {
    "text": "as hiding motion spelling in sap protective location and making detailed Dynamic analysis Decode by",
    "start": "1759980",
    "end": "1766220"
  },
  {
    "text": "anti-deblocking functionality even for the latest version of Mac OS",
    "start": "1766220",
    "end": "1771860"
  },
  {
    "text": "okay so next let's move on to the similar new convention technique on",
    "start": "1771860",
    "end": "1777860"
  },
  {
    "text": "armbase Windows as I said in the intro sorry as I said",
    "start": "1777860",
    "end": "1783880"
  },
  {
    "text": "on this Windows has caching mechanism and must check whether specified binary",
    "start": "1783880",
    "end": "1790820"
  },
  {
    "text": "was previously translated or not so it must have hashes corresponding to",
    "start": "1790820",
    "end": "1797299"
  },
  {
    "text": "the aot lookup pass according to the windows internals two",
    "start": "1797299",
    "end": "1802520"
  },
  {
    "text": "hashes are generated based on the executable image path and it's by",
    "start": "1802520",
    "end": "1808039"
  },
  {
    "text": "internal binary data you can find these two hash values in",
    "start": "1808039",
    "end": "1814399"
  },
  {
    "text": "the name of the XC cash file the file name sorry the these two hashes",
    "start": "1814399",
    "end": "1821480"
  },
  {
    "text": "are called multi-heter hash and multi Passage but how these hashes calculated",
    "start": "1821480",
    "end": "1829520"
  },
  {
    "text": "Windows internals doesn't answer me so let's analyze it",
    "start": "1829520",
    "end": "1834919"
  },
  {
    "text": "mostly passage is calculated from The Entity device path name of the target",
    "start": "1834919",
    "end": "1840380"
  },
  {
    "text": "executable it looks good moderate Hector harsh is calculated from",
    "start": "1840380",
    "end": "1847520"
  },
  {
    "text": "the doset and the headers are not including image base and last right time",
    "start": "1847520",
    "end": "1854539"
  },
  {
    "text": "last night time is the m time in Unix as you can see only M time is used for",
    "start": "1854539",
    "end": "1862520"
  },
  {
    "text": "Hashim so unlike Mac OS C time and CR time are",
    "start": "1862520",
    "end": "1868399"
  },
  {
    "text": "not used for housing so we can easy because the harsh question for the model Hector hash by",
    "start": "1868399",
    "end": "1875600"
  },
  {
    "text": "timestamping the M time so poisoning binary transition cache",
    "start": "1875600",
    "end": "1881720"
  },
  {
    "text": "files on armbase Windows seems very simple but the situation is a bit",
    "start": "1881720",
    "end": "1887480"
  },
  {
    "text": "different there is no translator for our best Windows so we need to run the target",
    "start": "1887480",
    "end": "1894740"
  },
  {
    "text": "executable to create an XT cache file so to average this issue I created xdac",
    "start": "1894740",
    "end": "1902659"
  },
  {
    "text": "Transit which enables us to create an xcache file without running the target",
    "start": "1902659",
    "end": "1908059"
  },
  {
    "text": "executable of course it does not require admin privileges its inner workings I don't have enough",
    "start": "1908059",
    "end": "1915320"
  },
  {
    "text": "time to explain how how this works so for more details she says appendix for",
    "start": "1915320",
    "end": "1922520"
  },
  {
    "text": "of this material now we can poison XC cash file like like",
    "start": "1922520",
    "end": "1928159"
  },
  {
    "text": "aot poisoning so the steps the inject code is as follows first injection code into modify the",
    "start": "1928159",
    "end": "1936200"
  },
  {
    "text": "target executable and index share code into it then create an XC cash file over",
    "start": "1936200",
    "end": "1942020"
  },
  {
    "text": "it using the XT translator after that this modified executable to",
    "start": "1942020",
    "end": "1948740"
  },
  {
    "text": "the original one and this also the last right time",
    "start": "1948740",
    "end": "1953899"
  },
  {
    "text": "then runs Target executable normally then poison the XC cash file is used for",
    "start": "1953899",
    "end": "1959779"
  },
  {
    "text": "the execution this is XC cash poisoning fortunately xica service happily accepts",
    "start": "1959779",
    "end": "1968120"
  },
  {
    "text": "an executable with an empirical signature so we can easily apply this technique to",
    "start": "1968120",
    "end": "1974120"
  },
  {
    "text": "assigned executable unlike Mac OS so next how do we export this code",
    "start": "1974120",
    "end": "1980659"
  },
  {
    "text": "injection first of all first this technique can be",
    "start": "1980659",
    "end": "1985760"
  },
  {
    "text": "used for Vector in PE file background PE is typically used for achieving Power",
    "start": "1985760",
    "end": "1991100"
  },
  {
    "text": "Systems but this technique can be easily detected by inspecting the modified",
    "start": "1991100",
    "end": "1996620"
  },
  {
    "text": "executable because this technique typically adds new section and modifies",
    "start": "1996620",
    "end": "2002679"
  },
  {
    "text": "the entry point of the target executable but with XDA cache poisoning we can we",
    "start": "2002679",
    "end": "2009340"
  },
  {
    "text": "can background PE most healthy because the target executable does not change",
    "start": "2009340",
    "end": "2016380"
  },
  {
    "text": "can be abused for the user-assisted revisionable Privileges",
    "start": "2018779",
    "end": "2023860"
  },
  {
    "text": "the uh elevation prompt assures the origin of the target executable if it has a particle signature The",
    "start": "2023860",
    "end": "2031480"
  },
  {
    "text": "Prompt shows a verified publisher but if not it shows a publisher unknown with",
    "start": "2031480",
    "end": "2037720"
  },
  {
    "text": "yellow stripe but if an attacker performance call injection with XC cash poisoning against",
    "start": "2037720",
    "end": "2044620"
  },
  {
    "text": "the target against the executable with political signature and runs it the code",
    "start": "2044620",
    "end": "2050800"
  },
  {
    "text": "signature remains valid so the uh elevation prompt shows a verified publisher",
    "start": "2050800",
    "end": "2057040"
  },
  {
    "text": "so chance is a good chart users are intentionally execute it with automate",
    "start": "2057040",
    "end": "2062200"
  },
  {
    "text": "privileges to export this installer is a good Target because it is typically executed",
    "start": "2062200",
    "end": "2070118"
  },
  {
    "text": "with other employees and has a bite consider",
    "start": "2070119",
    "end": "2075878"
  },
  {
    "text": "okay I will show some quick demo Network is",
    "start": "2075879",
    "end": "2082358"
  },
  {
    "text": "is running on the left side and on the victim side we have obtained the share",
    "start": "2082359",
    "end": "2088839"
  },
  {
    "text": "with medium integrity now injection code",
    "start": "2088839",
    "end": "2096760"
  },
  {
    "text": "into the Adobe installer this circle contains Debussy payroll",
    "start": "2096760",
    "end": "2103619"
  },
  {
    "text": "and run the Adobe installer it takes some time",
    "start": "2104760",
    "end": "2112359"
  },
  {
    "text": "foreign",
    "start": "2112359",
    "end": "2114900"
  },
  {
    "text": "yeah this automation has political signature",
    "start": "2118300",
    "end": "2124660"
  },
  {
    "text": "so the uh elevation prompt shows a verified publisher",
    "start": "2124660",
    "end": "2130619"
  },
  {
    "text": "and the certificate chain is also bodied like this [Music]",
    "start": "2136540",
    "end": "2143200"
  },
  {
    "text": "and after clicking yes installation process process",
    "start": "2143200",
    "end": "2148480"
  },
  {
    "text": "but on the attacker side we have obtained the share with high integrity",
    "start": "2148480",
    "end": "2156000"
  },
  {
    "text": "like this so the we can create a file and",
    "start": "2157960",
    "end": "2167800"
  },
  {
    "text": "the seat under the C drive like this",
    "start": "2167800",
    "end": "2172740"
  },
  {
    "text": "okay Microsoft said that this issue doesn't meet the msrg bar for an immediate security update",
    "start": "2177880",
    "end": "2184599"
  },
  {
    "text": "so this issue is not going to be fixed so you must think that fixing these",
    "start": "2184599",
    "end": "2190720"
  },
  {
    "text": "issue seems simple because passing the C time so housing sea time along with M",
    "start": "2190720",
    "end": "2196960"
  },
  {
    "text": "time so solves this problem but this is not enough because uh we can use the",
    "start": "2196960",
    "end": "2203980"
  },
  {
    "text": "same file system downgrade trick on windows so we can create a facility",
    "start": "2203980",
    "end": "2209079"
  },
  {
    "text": "image locally then copy the target executable to it and then we can change",
    "start": "2209079",
    "end": "2214540"
  },
  {
    "text": "seat we can change timestamps really but the file system downgrade trick is",
    "start": "2214540",
    "end": "2220960"
  },
  {
    "text": "not required on Windows even XC time is hashed sorry this is because",
    "start": "2220960",
    "end": "2228640"
  },
  {
    "text": "we can change C time on weaker this is because we can easily change C time or",
    "start": "2228640",
    "end": "2234460"
  },
  {
    "text": "Windows using energy set information for API and the set information file can change",
    "start": "2234460",
    "end": "2241359"
  },
  {
    "text": "the C time and M times simultaneously so we can set so we can distort C10 after",
    "start": "2241359",
    "end": "2248560"
  },
  {
    "text": "modifying the file unlike Mac OS XC time is hashed we can see call the",
    "start": "2248560",
    "end": "2256119"
  },
  {
    "text": "hash question for module header hash therefore housing sea time is not the",
    "start": "2256119",
    "end": "2261940"
  },
  {
    "text": "ultimate fix to prevent XC cash poisoning",
    "start": "2261940",
    "end": "2267000"
  },
  {
    "text": "OK let's summarize this talk and windows emulation emulation uses a",
    "start": "2268119",
    "end": "2276040"
  },
  {
    "text": "binary essential cash points to reduce the amount of binary transition so to",
    "start": "2276040",
    "end": "2281260"
  },
  {
    "text": "check whether the specified binary was previously translated or not these two",
    "start": "2281260",
    "end": "2287440"
  },
  {
    "text": "technologies uses a dedicated hashes and these dedicated hearts are called a LD",
    "start": "2287440",
    "end": "2294280"
  },
  {
    "text": "Local Pass and a model passage and these hashes are",
    "start": "2294280",
    "end": "2299740"
  },
  {
    "text": "calculated from the timestamps and head of the target file and fire path and",
    "start": "2299740",
    "end": "2305020"
  },
  {
    "text": "other file metadata and I propose two new coordination techniques named aod poisoning and",
    "start": "2305020",
    "end": "2311440"
  },
  {
    "text": "x-cash poisoning and this and and which are achieved by causing the hash",
    "start": "2311440",
    "end": "2317800"
  },
  {
    "text": "equation of the dedicated hash and I also cover the details of these",
    "start": "2317800",
    "end": "2323200"
  },
  {
    "text": "techniques and how to exploit them and key take Os from this talk",
    "start": "2323200",
    "end": "2329800"
  },
  {
    "text": "for later trimmer I published a POC called on GitHub please check these",
    "start": "2329800",
    "end": "2336880"
  },
  {
    "text": "depositories and please test your own environment for security researchers to our base of",
    "start": "2336880",
    "end": "2344800"
  },
  {
    "text": "knowledges there are a few studies on this topic but as an ambase osis becomes",
    "start": "2344800",
    "end": "2351760"
  },
  {
    "text": "popular attacker likely targets these so I hope to see more about the BT research on",
    "start": "2351760",
    "end": "2358960"
  },
  {
    "text": "this topic and I hope this I hope this talk will be the starting point of your",
    "start": "2358960",
    "end": "2364119"
  },
  {
    "text": "research as I showed in this talk whether to",
    "start": "2364119",
    "end": "2370000"
  },
  {
    "text": "check the file identity correctly causes security probability to enable cold injection",
    "start": "2370000",
    "end": "2375880"
  },
  {
    "text": "so determining the Vitality is difficult so implementing this correctly needs",
    "start": "2375880",
    "end": "2382420"
  },
  {
    "text": "more consolation so for everyone be careful of this thread since on base",
    "start": "2382420",
    "end": "2389260"
  },
  {
    "text": "laptops are becoming more popular will likely exploit this",
    "start": "2389260",
    "end": "2396900"
  },
  {
    "text": "and that's all thank you for your kind of attention us but",
    "start": "2397780",
    "end": "2405940"
  },
  {
    "text": "I'm sorry I don't have enough time to foreign so uh if you have any questions uh",
    "start": "2407800",
    "end": "2414760"
  },
  {
    "text": "please uh please ask me later ask me later thank you",
    "start": "2414760",
    "end": "2421140"
  }
]