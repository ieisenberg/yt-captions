[
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14699"
  },
  {
    "text": "do you speak my language today's presentation is about static analysis tools how we can make them communicate with each other enabling security teams",
    "start": "15839",
    "end": "22720"
  },
  {
    "text": "to have a deeper understanding of their attack surface and allowing them to identify complex vulnerabilities",
    "start": "22720",
    "end": "28240"
  },
  {
    "text": "to set the scene for this talk i would like to show you three code snippets of increasing complexity the first one here",
    "start": "28240",
    "end": "34079"
  },
  {
    "text": "is the simplest in one function we take user input create a query and then",
    "start": "34079",
    "end": "39200"
  },
  {
    "text": "execute that as a mysql query as we all know there is a sql injection vulnerability here but because",
    "start": "39200",
    "end": "44559"
  },
  {
    "text": "everything happens in one function it's easy to solve this problem with linters grip and other tools you won't spend we",
    "start": "44559",
    "end": "50960"
  },
  {
    "text": "won't be spending too much time speaking about this problem in real code you often have wrappers",
    "start": "50960",
    "end": "57280"
  },
  {
    "text": "abstractions and other and frameworks that would make the call graph more complex this code here is vulnerable to",
    "start": "57280",
    "end": "62640"
  },
  {
    "text": "the same sql injection vulnerability but in order to find this vulnerability here you would need to inflow analysis there",
    "start": "62640",
    "end": "68159"
  },
  {
    "text": "are open source tools from facebook and other companies that would help you to solve this problem we'll briefly talk",
    "start": "68159",
    "end": "73760"
  },
  {
    "text": "about team flow analysis in this presentation to get the basic information on the background information that we need for our next",
    "start": "73760",
    "end": "79360"
  },
  {
    "text": "example our presentation mainly is about this code here note in the left hand",
    "start": "79360",
    "end": "85119"
  },
  {
    "text": "side we have php code and on the right hand side we have python code this code is also vulnerable to the sql injection",
    "start": "85119",
    "end": "91360"
  },
  {
    "text": "vulnerability the code on the php on the left hand side starts as the previous example but then we do an rbc call to",
    "start": "91360",
    "end": "98240"
  },
  {
    "text": "fetch data which takes us to the python code that have a sql injection vulnerability the sequential probability",
    "start": "98240",
    "end": "103840"
  },
  {
    "text": "exists but in in two different code bases i am ibrahim muhammad and today we'll be",
    "start": "103840",
    "end": "109520"
  },
  {
    "text": "speaking about cross reputaine flow analysis before we dive into the presentation let me introduce myself i'm",
    "start": "109520",
    "end": "115119"
  },
  {
    "text": "a security engineer and facebook application security team i've been working for facebook for around five",
    "start": "115119",
    "end": "120240"
  },
  {
    "text": "years i focus on detecting security vulnerabilities doing manual code review to detect security vulnerabilities but i",
    "start": "120240",
    "end": "125600"
  },
  {
    "text": "also like to spend a lot of time with software engineer to see how can we automate the detection of these security",
    "start": "125600",
    "end": "130720"
  },
  {
    "text": "vulnerabilities over the past five years i've been working on zongcolon and pisa both are static analysis tool for php",
    "start": "130720",
    "end": "136959"
  },
  {
    "text": "and python before facebook i used to be as a security i used to work as a security consultant mostly focusing on",
    "start": "136959",
    "end": "142560"
  },
  {
    "text": "penetration testing red team exercises and also code reviews with me out of the way let's talk about",
    "start": "142560",
    "end": "149360"
  },
  {
    "text": "our agenda for today or so we'll first start with the motivation uh basically we'll talk about how common",
    "start": "149360",
    "end": "156239"
  },
  {
    "text": "is this uh sql injection example how common this code pattern here and then we will go into single repo analysis",
    "start": "156239",
    "end": "162239"
  },
  {
    "text": "we'll take that sql injection that lives in one code base and see how can we find this with tinfoil analysis uh in this",
    "start": "162239",
    "end": "167760"
  },
  {
    "text": "section we'll try to get the background information for the section after cross free potential analysis which we will",
    "start": "167760",
    "end": "173040"
  },
  {
    "text": "dive deep into info analysis how we can find that sql injection between two different uh code bases and then to the",
    "start": "173040",
    "end": "180400"
  },
  {
    "text": "example flow which is my favorite section here because we will show you a real vulnerability that we have found",
    "start": "180400",
    "end": "186480"
  },
  {
    "text": "with course repo analysis and showing you the real impact here and then i would like to end up with looking for it",
    "start": "186480",
    "end": "193760"
  },
  {
    "text": "how i see this moving uh over time and sharing some thoughts and ideas now",
    "start": "193760",
    "end": "199280"
  },
  {
    "text": "let's start with this sql injection example probably when you have seen this code you either think it's like",
    "start": "199280",
    "end": "204480"
  },
  {
    "text": "is this common uh how common is this in in code basis or the other idea is like yeah i have seen this in our code base",
    "start": "204480",
    "end": "210799"
  },
  {
    "text": "i've seen this we're doing this all over the place but to give you more background and context about this usually when you build system",
    "start": "210799",
    "end": "217360"
  },
  {
    "text": "you start with something like this so you have uh one application monolithic code base has more of your application",
    "start": "217360",
    "end": "224000"
  },
  {
    "text": "logic that connects with one database to read and retrieve data but sooner or later we realize that there are a couple",
    "start": "224000",
    "end": "229599"
  },
  {
    "text": "of problems here one this is not very scalable also might have not the best not the best performance and then you will start",
    "start": "229599",
    "end": "236560"
  },
  {
    "text": "to move into that direction here so you have your application logic and you have different services that communicate with",
    "start": "236560",
    "end": "242319"
  },
  {
    "text": "your application logic previously these were part of your application logic but now your application logic is less",
    "start": "242319",
    "end": "247519"
  },
  {
    "text": "encode and you have different dedicated services this approach is kind of is becoming more popular because you can",
    "start": "247519",
    "end": "253280"
  },
  {
    "text": "take the service scale it you can write the service let's say the authentication service you can write this in c or c plus which is more performant than what",
    "start": "253280",
    "end": "259840"
  },
  {
    "text": "language that you use in application logic and to take as an example so we have twitter here this is a slide from",
    "start": "259840",
    "end": "265040"
  },
  {
    "text": "twitter around 2014 you can see one monolithic code base connecting to the database to store and",
    "start": "265040",
    "end": "272400"
  },
  {
    "text": "retrieve data which is normal and natural to do in the beginning of your system before like very kind of hard",
    "start": "272400",
    "end": "279600"
  },
  {
    "text": "scaling limitations but then we see twitter evolving to that there to to",
    "start": "279600",
    "end": "284720"
  },
  {
    "text": "that design here a lot of services communicating with each other and again this is normal as you scale another",
    "start": "284720",
    "end": "290960"
  },
  {
    "text": "example is netflix again initially you start with one monolithic codebase one monolithic",
    "start": "290960",
    "end": "297199"
  },
  {
    "text": "database but then you see them evolving into something like this a lot of services communicating with each other",
    "start": "297199",
    "end": "303039"
  },
  {
    "text": "so that sql injection or that vulnerabilities that exist between",
    "start": "303039",
    "end": "308720"
  },
  {
    "text": "different code bases they are there because you have now your application connecting with services but just availability lives between these",
    "start": "308720",
    "end": "315199"
  },
  {
    "text": "services it's deeper in your attack surface but they do exist in our case in our demo example we have",
    "start": "315199",
    "end": "321440"
  },
  {
    "text": "an application logic written in php and our backend service written in python and the sql injection is split between",
    "start": "321440",
    "end": "327360"
  },
  {
    "text": "both another case why cross repo is important is scalability so in facebook we know",
    "start": "327360",
    "end": "333199"
  },
  {
    "text": "that it's difficult to review code manually as security engineers you don't have a",
    "start": "333199",
    "end": "338240"
  },
  {
    "text": "lot of security engineers comparing to the software engineer teams that you have so we need automation and we rely heavily on static analysis so we",
    "start": "338240",
    "end": "345360"
  },
  {
    "text": "usually follow this strategy here you have your code base analyze this with static analysis security engineers review the results",
    "start": "345360",
    "end": "352000"
  },
  {
    "text": "and identify valid vulnerabilities this scales scales up very well and we will see that but and also you can take this",
    "start": "352000",
    "end": "358240"
  },
  {
    "text": "apply to different products it also scales and it enables us to scale our security team but when you draw the full",
    "start": "358240",
    "end": "363600"
  },
  {
    "text": "picture you have something like this so you have your user facing applications connecting with back-end servers what do",
    "start": "363600",
    "end": "368880"
  },
  {
    "text": "you do with the back-end services do we run static analysis without any information about their attack surface from user-facing application if we do",
    "start": "368880",
    "end": "375840"
  },
  {
    "text": "that the noise will be high and we won't be able to tackle that noisy issues and",
    "start": "375840",
    "end": "381280"
  },
  {
    "text": "we want to have a good idea of which vulnerabilities are exploitable reachable from outside versus which ones",
    "start": "381280",
    "end": "386560"
  },
  {
    "text": "are only internally reachable or even not reachable at all because there are no servers that is calling that",
    "start": "386560",
    "end": "392000"
  },
  {
    "text": "and also we know that we cannot manually review these back-end services because they are a lot it's not the way to scale",
    "start": "392000",
    "end": "397199"
  },
  {
    "text": "so with cross-repo analysis we are able to find the full path the full attack surface until we had the service which",
    "start": "397199",
    "end": "403840"
  },
  {
    "text": "helps us a lot with scaling i now let's jump into static analysis",
    "start": "403840",
    "end": "410639"
  },
  {
    "text": "static analysis is one of the worlds that can be easily overloaded it can mean different things running grip on files",
    "start": "410639",
    "end": "416560"
  },
  {
    "text": "scroll starting assets linters are corresponding analysis but what do we mean by static analysis here is obtain",
    "start": "416560",
    "end": "421680"
  },
  {
    "text": "flow analysis and if you don't know what data analysis mean that is fine because this is what i'm going to show you next so let's go back to our single repo",
    "start": "421680",
    "end": "429120"
  },
  {
    "text": "example here sql injection so we know there is a sql injection here and uh in order for me to show you how to",
    "start": "429120",
    "end": "435599"
  },
  {
    "text": "influence us can find that sql induction let's follow this approach let's find the vulnerability with manual code review manually and then see how a team",
    "start": "435599",
    "end": "442560"
  },
  {
    "text": "flow analysis tool will find this uh vulnerability for us so manually what you would do you will start reviewing",
    "start": "442560",
    "end": "447759"
  },
  {
    "text": "code so you will start from wrap get page name you will realize it calls the get page name and then you will go into",
    "start": "447759",
    "end": "454000"
  },
  {
    "text": "git page name you realize it calls the request and once you go into that you also realize that it calls returns the",
    "start": "454000",
    "end": "460319"
  },
  {
    "text": "super global php request so you know that super global the request which is a user controlled",
    "start": "460319",
    "end": "465759"
  },
  {
    "text": "input goes back to get page name and returns to the wrap gate page name you will take that information and then",
    "start": "465759",
    "end": "471680"
  },
  {
    "text": "review the second function which is the wrap fetch data you go there it takes the arguments call fetch data and then",
    "start": "471680",
    "end": "476879"
  },
  {
    "text": "you go one step deeper it also uh it takes the argument concatenate this with a string and it calls mysql query as a",
    "start": "476879",
    "end": "484639"
  },
  {
    "text": "security engineer or a security consultant you will realize that okay there is probably a sql injection vulnerability here mysql query is not",
    "start": "484639",
    "end": "490800"
  },
  {
    "text": "sql safe if there's no validation or uh data standardization happens and because we have user controlled the input from",
    "start": "490800",
    "end": "496800"
  },
  {
    "text": "rav gate page name to wrap fetch data then that is a sql injection now let's put the teen flow static analysis head",
    "start": "496800",
    "end": "502879"
  },
  {
    "text": "on and see how can we detect this with teen analysis or how a team flow analysis tool should work so it will",
    "start": "502879",
    "end": "508319"
  },
  {
    "text": "work more or less the same so the tool will start from the wrap gateway chain and try to analyze this function but to",
    "start": "508319",
    "end": "514800"
  },
  {
    "text": "give you an a good understanding of how it works let's start from the deepest call or the request function so when the",
    "start": "514800",
    "end": "520240"
  },
  {
    "text": "team's analysis tool analyzes this function it will say this function is returning a user controlled source so",
    "start": "520240",
    "end": "526399"
  },
  {
    "text": "what is a source so a source means is a function or a method that returns tainted data or data that the flow",
    "start": "526399",
    "end": "533279"
  },
  {
    "text": "analysis tool want to track across the call graph the team flow analysis will want to see where this data is going so",
    "start": "533279",
    "end": "539519"
  },
  {
    "text": "here we're marking the return of this request as user controlled source this is the initial configuration that we",
    "start": "539519",
    "end": "545680"
  },
  {
    "text": "give the tool so the tool knows that okay this is returning user controlled source it will also analyze uh get page",
    "start": "545680",
    "end": "551279"
  },
  {
    "text": "name which also return uh the result from request which also use a control source we'll do the same with the wrap",
    "start": "551279",
    "end": "557040"
  },
  {
    "text": "gate page name and then now the tools know that x is coming from my user control source now the team analysis",
    "start": "557040",
    "end": "562880"
  },
  {
    "text": "will analyze wrap pitch data which realize that fetch data calls into passes the argument into mysql query and",
    "start": "562880",
    "end": "569200"
  },
  {
    "text": "mysql query will be provided in the configuration as a sql i sync so what is a sync a sync is a function",
    "start": "569200",
    "end": "576560"
  },
  {
    "text": "that we want uh we want to see any tainted data that flow into that",
    "start": "576560",
    "end": "582000"
  },
  {
    "text": "function whenever there is tainted data that flows into that function we want to create an issue or we want to highlight",
    "start": "582000",
    "end": "587040"
  },
  {
    "text": "that flow so the mysql query is our initial configuration and then the tone flow analysis tool knows that fetch data",
    "start": "587040",
    "end": "593040"
  },
  {
    "text": "leads to a sql sync and also know that wrap fetch data leads also to a sql sync and",
    "start": "593040",
    "end": "598880"
  },
  {
    "text": "and now with these two combined we will have a rule that says if you have a source coming from user",
    "start": "598880",
    "end": "604880"
  },
  {
    "text": "controlled and that flowing into a sink of type sql i then that is a potential sql injection",
    "start": "604880",
    "end": "611440"
  },
  {
    "text": "vulnerability to see everything in one slide you have the trace here so a trace is",
    "start": "611440",
    "end": "618000"
  },
  {
    "text": "how the data is flowing between a source to a sink we start from the bottom left request return a source which forward",
    "start": "618000",
    "end": "625440"
  },
  {
    "text": "that to get page name which was that to wrap gate page name and then the root in the root get response we take that",
    "start": "625440",
    "end": "630880"
  },
  {
    "text": "argument pass it down until we hit our sync the mysql query sync here",
    "start": "630880",
    "end": "636480"
  },
  {
    "text": "with this technology we were able to create three tools that does exactly",
    "start": "636480",
    "end": "642480"
  },
  {
    "text": "the same zone clan attain flow analysis tool for hacc it analyzes facebook.com",
    "start": "642480",
    "end": "647680"
  },
  {
    "text": "oculus.com and other websites that are powered by hack i think zone clan analyzes around 100 millions lines of",
    "start": "647680",
    "end": "652800"
  },
  {
    "text": "code uh in in our code base pisa is our static analysis tool for python it's",
    "start": "652800",
    "end": "658320"
  },
  {
    "text": "open source it is free and we use this to scan and protect instagram.com",
    "start": "658320",
    "end": "663760"
  },
  {
    "text": "mariana trench which is our recently open source stainflow analysis tool for java and android code we use mariah",
    "start": "663760",
    "end": "669839"
  },
  {
    "text": "trying to analyze our mobile application on our java backend services these three static analysis",
    "start": "669839",
    "end": "675440"
  },
  {
    "text": "tool rely on the same technology that i've just explained to you to see how these work and what's kind of",
    "start": "675440",
    "end": "681839"
  },
  {
    "text": "when do they work let's look at this kind of architecture diagram so security engineers define sources things and",
    "start": "681839",
    "end": "687680"
  },
  {
    "text": "rules for every tool depending depending on the code base we run the correct tool so php we're on zonkland python we run",
    "start": "687680",
    "end": "694000"
  },
  {
    "text": "pisa java we're in a trench we analyze the code store the result into the database for a later consumption or a",
    "start": "694000",
    "end": "700959"
  },
  {
    "text": "triage by security engineers and with that we were able to find fifty percent of the vulnerable",
    "start": "700959",
    "end": "707440"
  },
  {
    "text": "vulnerabilities that we found through automation so fifty percent of all the security vulnerability that we found from white hat from uh manual code",
    "start": "707440",
    "end": "714800"
  },
  {
    "text": "reviews 50 of that number came from automation automation include static analysis and dynamic analysis but big",
    "start": "714800",
    "end": "720480"
  },
  {
    "text": "portion of that came from static analysis and from the tools that i've just explained to you now",
    "start": "720480",
    "end": "725519"
  },
  {
    "text": "with single repo analysis out of the way let's jump into the main topic or the cross repo team flow analysis let's go",
    "start": "725519",
    "end": "732639"
  },
  {
    "text": "to that sql injection and how we can find that sql injection across two code bases with tin flow analysis uh we'll",
    "start": "732639",
    "end": "738880"
  },
  {
    "text": "follow the same approach we will start off with doing this with manual code review and then see how a inflow",
    "start": "738880",
    "end": "744240"
  },
  {
    "text": "analysis tool will find this for us so with manual code review you will probably start from the php side we know",
    "start": "744240",
    "end": "750320"
  },
  {
    "text": "how it starts from the previous example but then you realize that there is a socket you're creating a http client",
    "start": "750320",
    "end": "756880"
  },
  {
    "text": "you're calling some service and you're fetching data and then sooner you you realize that this is thrift so as you're",
    "start": "756880",
    "end": "762240"
  },
  {
    "text": "reading the code as a security engineer you will realize that this is a thrift gold what is a thrift thrift is a lightweight language independent",
    "start": "762240",
    "end": "768480"
  },
  {
    "text": "software stack for point to point rpc uh implementation so thrift you can think",
    "start": "768480",
    "end": "773680"
  },
  {
    "text": "of it as an abstraction that would allow software engineers to define a service that says i have a service that that is",
    "start": "773680",
    "end": "780399"
  },
  {
    "text": "exporting this api i write this and enter in an interface language and then thrift will auto",
    "start": "780399",
    "end": "785600"
  },
  {
    "text": "generate good for all clients to connect to that service and it will create stubs for how the server should be implemented",
    "start": "785600",
    "end": "792560"
  },
  {
    "text": "so that's good here it's auto generated code or like that the page service async",
    "start": "792560",
    "end": "797600"
  },
  {
    "text": "client this client is auto generated code and we use this internally to be able to have this rpc connections",
    "start": "797600",
    "end": "803600"
  },
  {
    "text": "between services uh and and and client so after you gain that knowledge and notice this is an extra overhead for",
    "start": "803600",
    "end": "810320"
  },
  {
    "text": "security engineers which is a very manual process which is part of the manual review and it would be great if",
    "start": "810320",
    "end": "816000"
  },
  {
    "text": "you can make static analysis aware and familiar with that so once you do this",
    "start": "816000",
    "end": "821440"
  },
  {
    "text": "you would want probably to know okay what is the service that i'm calling and you realize it's page service from the client class page service async",
    "start": "821440",
    "end": "828880"
  },
  {
    "text": "client so to sum this up you have two flows one here is coming from the request so the",
    "start": "828880",
    "end": "834000"
  },
  {
    "text": "the user uh the data coming from user controlled and then flowing into a call to a thrift service now",
    "start": "834000",
    "end": "840959"
  },
  {
    "text": "with that we jump into the other part which is the server implementation it is implemented in python here again i know",
    "start": "840959",
    "end": "846800"
  },
  {
    "text": "there's a lot of code but it's part of thrift being aware of that let's focus on the function that we care",
    "start": "846800",
    "end": "852399"
  },
  {
    "text": "about fetch data this is very simple it takes an argument construct a query and execute that query",
    "start": "852399",
    "end": "859199"
  },
  {
    "text": "as a sql query from the cursor execute from a manual code review perspective you take the argument which you know",
    "start": "859199",
    "end": "864800"
  },
  {
    "text": "from php is user controlled and then you go into cursor execute which",
    "start": "864800",
    "end": "870399"
  },
  {
    "text": "also you know that if there's no data validation or sanitization this will lead to a sql",
    "start": "870399",
    "end": "875839"
  },
  {
    "text": "injection now with both in mind so you know there's the php part that is user control that is calling the service and",
    "start": "875839",
    "end": "880959"
  },
  {
    "text": "here is the implementation of that service you have your sql injection with manual code review so if we were to find",
    "start": "880959",
    "end": "886800"
  },
  {
    "text": "this with thin flow analysis uh you probably want something like this so if i have a php static analysis tool",
    "start": "886800",
    "end": "892639"
  },
  {
    "text": "that can review the code and can understand that this is a call to a 3 of service we can probably use oncloud for that and",
    "start": "892639",
    "end": "899519"
  },
  {
    "text": "then if i have a python static analysis tool that can review the code and also",
    "start": "899519",
    "end": "904560"
  },
  {
    "text": "identify that this function is a service a thrift service implementation we can use pisa for that and somehow make these",
    "start": "904560",
    "end": "911680"
  },
  {
    "text": "tools connect to each other and the zomcon says hey pisa i know that someone",
    "start": "911680",
    "end": "917040"
  },
  {
    "text": "that is user controlled input or interested in but going to the service and then pc says oh and this also is going to a sql injection let's see that",
    "start": "917040",
    "end": "923680"
  },
  {
    "text": "in action so the uh wrap get page name so from let's let's put the thing for an access tool",
    "start": "923680",
    "end": "929279"
  },
  {
    "text": "and see how the team flawless tool will or zonecon will analyze this codebase so it will start usually with analyzing the",
    "start": "929279",
    "end": "935360"
  },
  {
    "text": "code normally so it analyzes this code but then it also realized that okay there is a thrift goal here so we want",
    "start": "935360",
    "end": "940639"
  },
  {
    "text": "to mark all thrift calls as syncs whenever we're calling a thrift service",
    "start": "940639",
    "end": "945759"
  },
  {
    "text": "you want to mark this as a sync so i we map all user controlled input to that thrift service and once you do this we",
    "start": "945759",
    "end": "952480"
  },
  {
    "text": "call we call this the producer run so the zonecon is running and identifying flows from user input to these services",
    "start": "952480",
    "end": "959040"
  },
  {
    "text": "in a producer run and you want to store we call this a partial flow because the flow is not leading to a real sync it's",
    "start": "959040",
    "end": "965440"
  },
  {
    "text": "leading to that kind of intermediate sync which is the thrift rpc you want to have this",
    "start": "965440",
    "end": "970480"
  },
  {
    "text": "information and then store it into a database so we see here we're storing this data which here the the information",
    "start": "970480",
    "end": "976639"
  },
  {
    "text": "external user controlled input going to page service fetch data notice here that we are not using the page service async",
    "start": "976639",
    "end": "983839"
  },
  {
    "text": "client or the page service client we're using the canonical name of the service and not the actual client name that is",
    "start": "983839",
    "end": "989360"
  },
  {
    "text": "auto generated from thrift once you do this let's go to the python part so python the first thing that you want",
    "start": "989360",
    "end": "995600"
  },
  {
    "text": "your static analysis tool to be familiar with that this is a thrift implementation or this is the implementation of uh my thrift call so",
    "start": "995600",
    "end": "1002800"
  },
  {
    "text": "once the tool knows this and this is before the analysis the tool will need to look up that database and say okay do",
    "start": "1002800",
    "end": "1008959"
  },
  {
    "text": "i have any information that i need to be aware of before my analysis and uh so the tool will look up with the",
    "start": "1008959",
    "end": "1015839"
  },
  {
    "text": "canonical name it figure out the canonical name and then it will look up into the database we realize that donclan have actually stored some data",
    "start": "1015839",
    "end": "1021920"
  },
  {
    "text": "there for the tool for to be to be used before the analysis so the tool will take that information augment its",
    "start": "1021920",
    "end": "1027760"
  },
  {
    "text": "initial model so now before the analysis i will augment that information i will keep in mind that zomcon told me that there is user controlled input here and",
    "start": "1027760",
    "end": "1033678"
  },
  {
    "text": "then i will just analyze normally and eventually you will be able to find that sql injection the coming two slides are",
    "start": "1033679",
    "end": "1039760"
  },
  {
    "text": "they have a lot of information but i i'll try to abstract as much as i can but i would really like to show you or",
    "start": "1039760",
    "end": "1045360"
  },
  {
    "text": "give you a sense of what goes under the hood for these two tools so here is the model or the tint uh summary",
    "start": "1045360",
    "end": "1052559"
  },
  {
    "text": "from zonk line you see here we have external user controlled input coming from a rob get page name and flowing to",
    "start": "1052559",
    "end": "1059280"
  },
  {
    "text": "the paid service async client fetch data which is marked as a sync here notice",
    "start": "1059280",
    "end": "1064320"
  },
  {
    "text": "that the service name or the sync name is the actual service async client not the canonical name and then what we want",
    "start": "1064320",
    "end": "1071360"
  },
  {
    "text": "to do is take that and then create the kind of partial flow from that so we",
    "start": "1071360",
    "end": "1076720"
  },
  {
    "text": "replace the name with the canonical name page service fetch data and source and then we store that into a database so",
    "start": "1076720",
    "end": "1082400"
  },
  {
    "text": "this is just uh this box here is the same as this book but here stored as a row in the database now",
    "start": "1082400",
    "end": "1088480"
  },
  {
    "text": "on the python side what this is the summary before anything which is empty",
    "start": "1088480",
    "end": "1093679"
  },
  {
    "text": "we don't know anything and what you want the static answers tool to know that okay this is a thrift implementation let me look up the database so it looks at",
    "start": "1093679",
    "end": "1100240"
  },
  {
    "text": "the database it finds information coming from zonkline which is the producer and this is the consumer run or the one",
    "start": "1100240",
    "end": "1106400"
  },
  {
    "text": "that will re use the data from the producer before the analysis so and it augments these models again before the",
    "start": "1106400",
    "end": "1112480"
  },
  {
    "text": "analysis we augment this model with external user control coming from zone client and then start analyzing that",
    "start": "1112480",
    "end": "1118480"
  },
  {
    "text": "python code and after analyzing that python code then you see here we are going to this uh full you have the full",
    "start": "1118480",
    "end": "1125039"
  },
  {
    "text": "thin flow we have external user controlled going to the sql injection and now we have the sql injection vulnerability between two different code",
    "start": "1125039",
    "end": "1131760"
  },
  {
    "text": "bases with stain flow analysis to see everything in one slide let's see our trace so",
    "start": "1131760",
    "end": "1137760"
  },
  {
    "text": "the trace starts like similar to the previous example we start from request top left corner on the left hand side we",
    "start": "1137760",
    "end": "1143120"
  },
  {
    "text": "see the php part on the right hand side we see the python part the root here is the canonical name of",
    "start": "1143120",
    "end": "1149440"
  },
  {
    "text": "the service and the function name so this is like the canonical connection point and you see here the mangling and",
    "start": "1149440",
    "end": "1155600"
  },
  {
    "text": "de-mangling of uh the service name so in the php the client called page service async client and on the right side is",
    "start": "1155600",
    "end": "1161840"
  },
  {
    "text": "the page service handler which is the implementation for that service uh and yeah just the data flows from here to",
    "start": "1161840",
    "end": "1168080"
  },
  {
    "text": "the service and then uh from the service back into the this thing function here",
    "start": "1168080",
    "end": "1173280"
  },
  {
    "text": "so to recap if you want to do or to have like cross repotential analysis between",
    "start": "1173280",
    "end": "1178720"
  },
  {
    "text": "uh taint analysis tools the first thing is that you want to mark your all rpc calls as things in our case this was fb",
    "start": "1178720",
    "end": "1185600"
  },
  {
    "text": "thrift calls so we want to mark these as syncs so we can find the flows between user control to these things and then you",
    "start": "1185600",
    "end": "1193120"
  },
  {
    "text": "want to define canonical connection points so given a service from the server implementation",
    "start": "1193120",
    "end": "1198240"
  },
  {
    "text": "class or the actual implementation what kind of how can i go to the canonical connection point of that service and from the client call how can i find that",
    "start": "1198240",
    "end": "1204559"
  },
  {
    "text": "canonical connection point because this kind of connection point is important because this is how you're going to store your data intermediately between",
    "start": "1204559",
    "end": "1211440"
  },
  {
    "text": "these services and you'll be able to look up this data and then you want your engines to be able to find the flows",
    "start": "1211440",
    "end": "1216960"
  },
  {
    "text": "from user controller input to the thrift goal which we call them the partial flows and this is in the",
    "start": "1216960",
    "end": "1222480"
  },
  {
    "text": "producer run and then once the consumer engine or the other engine that's augmenting its initial model with that",
    "start": "1222480",
    "end": "1228640"
  },
  {
    "text": "it can load this partial model and then start the analysis from there and last thing you want to make sure",
    "start": "1228640",
    "end": "1234080"
  },
  {
    "text": "that you store this data in one in a format that you're able to visualize the entire flow seamlessly",
    "start": "1234080",
    "end": "1241039"
  },
  {
    "text": "across code basis which is very important so security engineers and software engineers can act on that",
    "start": "1241039",
    "end": "1246240"
  },
  {
    "text": "let's go back to our design diagram so it used to look something like this before cross three potential analysis",
    "start": "1246240",
    "end": "1252000"
  },
  {
    "text": "but after crossfit influences it looks like this i know it is a lot here to take in so let's break it apart",
    "start": "1252000",
    "end": "1258720"
  },
  {
    "text": "uh this is the producer run zonklan running in php we have security engineer defining sources and syncs remember now",
    "start": "1258720",
    "end": "1265440"
  },
  {
    "text": "we have the syncs also as our rpc calls so zoneclone analysis php stores the",
    "start": "1265440",
    "end": "1270799"
  },
  {
    "text": "results in the database normally but we have an extra step of extracting this partial model and storing them into a",
    "start": "1270799",
    "end": "1276000"
  },
  {
    "text": "database that we call crtec and we will define in coming slides and then now on the consumer run pisa",
    "start": "1276000",
    "end": "1282720"
  },
  {
    "text": "before the analysis it will look up the crtec to augment any initial model for",
    "start": "1282720",
    "end": "1288400"
  },
  {
    "text": "thrift implementation we'll do the analysis normally store everything in the database and security engineers can",
    "start": "1288400",
    "end": "1294080"
  },
  {
    "text": "see the entire flow there so what is crtx crtec is a tool",
    "start": "1294080",
    "end": "1299280"
  },
  {
    "text": "independent store obtained information in the tool agnostic format so we want these tools to use that cirtec or an",
    "start": "1299280",
    "end": "1305679"
  },
  {
    "text": "abstraction on top of db to store it in information uh to store to push and pull tainted informations",
    "start": "1305679",
    "end": "1311600"
  },
  {
    "text": "these information are tool agnostic so zoom clone can push model pisa can pull that model and reuse it in its analysis",
    "start": "1311600",
    "end": "1319440"
  },
  {
    "text": "now let's see how can we view the traces it's important to view the traces seamlessly so you can abstract all the",
    "start": "1319440",
    "end": "1325520"
  },
  {
    "text": "complexities in between and all the overhead between of the thrift services or these connection points for security engineers for single",
    "start": "1325520",
    "end": "1332799"
  },
  {
    "text": "repo analysis viewing the traces is straightforward you start with the root and then you expand the traces uh to the",
    "start": "1332799",
    "end": "1339760"
  },
  {
    "text": "source leaf and to the sink leaf so you start at the root and then you go here uh drop drop traverse until you hit your sink leaf and then you go here until you",
    "start": "1339760",
    "end": "1346799"
  },
  {
    "text": "hit your source leaf for uh cross revo analysis theoretically you",
    "start": "1346799",
    "end": "1351840"
  },
  {
    "text": "want to do the same but there are a couple of differences one is the actual flow under the hood looks something like",
    "start": "1351840",
    "end": "1357440"
  },
  {
    "text": "this source to a sink thrift call and then from the thrift implementation to your sink this is one difference the",
    "start": "1357440",
    "end": "1363440"
  },
  {
    "text": "other difference is that these if you notice that like the one on the left and the other side are actually two different systems zonklan and pisa",
    "start": "1363440",
    "end": "1369840"
  },
  {
    "text": "yes it happened that we created them at facebook but they are two different systems they can be in two different databases and they have their own",
    "start": "1369840",
    "end": "1376240"
  },
  {
    "text": "different tables so you want to have some meta information of when you reach that route how can you go to the other",
    "start": "1376240",
    "end": "1382240"
  },
  {
    "text": "part so in order to view the cross repo traces you start from the right hand side",
    "start": "1382240",
    "end": "1388480"
  },
  {
    "text": "which is the flow from the service implementation to the sink so you start from here you expand the trace until you",
    "start": "1388480",
    "end": "1395039"
  },
  {
    "text": "hit the sink leaf you also expand until you hit the source if your source leaf is the thrift implementation or that",
    "start": "1395039",
    "end": "1400960"
  },
  {
    "text": "canonical connection point once you hit that canonical connection point you go to the crtech to find who are the",
    "start": "1400960",
    "end": "1407360"
  },
  {
    "text": "producers or who are the other engines that are storing data into into my run and then once you go",
    "start": "1407360",
    "end": "1412880"
  },
  {
    "text": "there you go into the database from crtec switch to the right db switch to the right tool take that information and",
    "start": "1412880",
    "end": "1419440"
  },
  {
    "text": "then you expand the trace normally backward until you hit the source leaf and this is how you get like from the",
    "start": "1419440",
    "end": "1424960"
  },
  {
    "text": "user input to the thrift call and then from the thrift implementation to the",
    "start": "1424960",
    "end": "1431039"
  },
  {
    "text": "actual sync your sql sync now we know how we uh find the sql",
    "start": "1431039",
    "end": "1436159"
  },
  {
    "text": "injection single repo how we find sql ejection cross repo how does this work so we can actually",
    "start": "1436159",
    "end": "1442320"
  },
  {
    "text": "find true bugs how this is deployed at facebook so we can find true vulnerabilities so we start with like",
    "start": "1442320",
    "end": "1449039"
  },
  {
    "text": "configuring our producer runs so usually you want your producer runs to map all your attack surface you remember that",
    "start": "1449039",
    "end": "1455200"
  },
  {
    "text": "picture we're showing you have user applica user facing application so you want all your uh engines to be working",
    "start": "1455200",
    "end": "1461520"
  },
  {
    "text": "on this user application uh uh uh user facing applications to map all the attack surface so we have zonk on",
    "start": "1461520",
    "end": "1467840"
  },
  {
    "text": "analyzing facebook peace analyzing instagram android application analyzing our uh maria trench analyzing or our all",
    "start": "1467840",
    "end": "1474559"
  },
  {
    "text": "our mobile applications uh you might be wondering why do we need to analyze the mobile application and know what are the",
    "start": "1474559",
    "end": "1480240"
  },
  {
    "text": "entry points to our back end if we will mark everything on the back end as user control like if you mark all",
    "start": "1480240",
    "end": "1486720"
  },
  {
    "text": "uh entry points on your web tier why do you need the mobile application i will show you in a couple of slides why this",
    "start": "1486720",
    "end": "1492080"
  },
  {
    "text": "is uh important now our consumers we mentioned that uh we use fp thrift and",
    "start": "1492080",
    "end": "1497360"
  },
  {
    "text": "rely heavily on fp thrift so anything that relies on fb thrift we analyze this you have implementation in",
    "start": "1497360",
    "end": "1503600"
  },
  {
    "text": "php python and java all right how regularly do we run so now we know how these are configured so we have uh we",
    "start": "1503600",
    "end": "1510640"
  },
  {
    "text": "run on all the code like when it lands or when it's pushed we run there which we call it the master run uh it's",
    "start": "1510640",
    "end": "1516720"
  },
  {
    "text": "usually multiple times a day and for any new findings we found a task but we actually also want to do better than",
    "start": "1516720",
    "end": "1522320"
  },
  {
    "text": "that we don't want the wait for the vulnerability to be pushed or for the coat to land we want to catch it before",
    "start": "1522320",
    "end": "1528080"
  },
  {
    "text": "this so we have another mode which is the pull request mode so with every pull request that engineer creates we review",
    "start": "1528080",
    "end": "1534720"
  },
  {
    "text": "the code before that pull request and after that pull request and we see if there is any new vulnerabilities any new",
    "start": "1534720",
    "end": "1540480"
  },
  {
    "text": "vulnerabilities we attribute it to that pull request if we are confident about the vulnerability we automatically",
    "start": "1540480",
    "end": "1546000"
  },
  {
    "text": "comment in the code to prevent this from landing and we provide guidance to the engineers to prevent that sequential rc",
    "start": "1546000",
    "end": "1551840"
  },
  {
    "text": "but if we're not very confident from the vulnerability we loop in the security engineers to ask them tutorials that",
    "start": "1551840",
    "end": "1557200"
  },
  {
    "text": "vulnerability for us now to the most favorite part for me the actual",
    "start": "1557200",
    "end": "1562400"
  },
  {
    "text": "vulnerability that we found or an example of an actual vulnerability we have found",
    "start": "1562400",
    "end": "1567520"
  },
  {
    "text": "two things i'd like to mention one because this cross repo flows so they are expected to be",
    "start": "1567520",
    "end": "1573520"
  },
  {
    "text": "slightly complex so i apologize in advance for this i'll try to do my best to abstract the code for you the other",
    "start": "1573520",
    "end": "1579120"
  },
  {
    "text": "thing is that this vulnerability was found in a testing environment as in the code landed and everything but the",
    "start": "1579120",
    "end": "1585679"
  },
  {
    "text": "code was only enabled for the development team this did not affect any real users uh or",
    "start": "1585679",
    "end": "1591360"
  },
  {
    "text": "no one really has been affected by this so let me start with",
    "start": "1591360",
    "end": "1596960"
  },
  {
    "text": "giving you an overview of the vulnerabilities so one it is a remote command execution yes we have found the",
    "start": "1596960",
    "end": "1602559"
  },
  {
    "text": "remote command execution was close repo analysis uh which for me is like amazing",
    "start": "1602559",
    "end": "1607840"
  },
  {
    "text": "uh all right so the floor starts from uh workplace uh and ends in a python",
    "start": "1607840",
    "end": "1613360"
  },
  {
    "text": "service so workplace if you're not familiar with workplace is something very similar to facebook but it's for",
    "start": "1613360",
    "end": "1618640"
  },
  {
    "text": "companies to be able to communicate and collaborate so for employees inside companies to be able to communicate or",
    "start": "1618640",
    "end": "1624080"
  },
  {
    "text": "collaborate we actually use workplace internally and uh workplace has a feature so workplaces and php so it's",
    "start": "1624080",
    "end": "1630720"
  },
  {
    "text": "being analyzed by zonkel and it has a feature for video call rooms or uh so you can create a virtual room where you",
    "start": "1630720",
    "end": "1637360"
  },
  {
    "text": "uh video call with your co-workers and your teammates and that service has part of it that was written in python and the",
    "start": "1637360",
    "end": "1644080"
  },
  {
    "text": "remote con execution where in that python service but you're in like the the application that is part of your",
    "start": "1644080",
    "end": "1650399"
  },
  {
    "text": "attack service is workplace now let's go one step deeper let's look at our trace this is our crease here i know it's a",
    "start": "1650399",
    "end": "1656960"
  },
  {
    "text": "lot to take in but let's break the mark the left-hand side is the php part your",
    "start": "1656960",
    "end": "1662000"
  },
  {
    "text": "your kind of uh initial attack surface or your entry point for the attack surface and we will",
    "start": "1662000",
    "end": "1667200"
  },
  {
    "text": "start reviewing the code from here or seeing the code from here the right hand side is the python part again we will dive into this deeper two things i want",
    "start": "1667200",
    "end": "1673679"
  },
  {
    "text": "to highlight here one this is the canonical name for the service as we have seen in the",
    "start": "1673679",
    "end": "1679840"
  },
  {
    "text": "demo example this is the canonical name is the root of the tree but also here also is this is the producer run id",
    "start": "1679840",
    "end": "1686480"
  },
  {
    "text": "which i've mentioned earlier it is important to be able to get that meta information when you're viewing the trace",
    "start": "1686480",
    "end": "1692159"
  },
  {
    "text": "seamlessly now let's dive deeper more so from the code let's start with the php",
    "start": "1692159",
    "end": "1698799"
  },
  {
    "text": "part so as you can see here this is a graphql mutation root field if you're not very familiar with graphql so",
    "start": "1698799",
    "end": "1705120"
  },
  {
    "text": "graphql you can think of it as a rest api that our mobile applications used to",
    "start": "1705120",
    "end": "1710399"
  },
  {
    "text": "connect to the server so from an from a security engineer perspective this is your entry point or part of your attack",
    "start": "1710399",
    "end": "1716399"
  },
  {
    "text": "surface so the argument data here is user controlled so what we do is that we take data and we forward this to the gen",
    "start": "1716399",
    "end": "1723520"
  },
  {
    "text": "spawn function one thing to highlight here this is the check that made sure that",
    "start": "1723520",
    "end": "1728720"
  },
  {
    "text": "this code is only enabled for the development team now let's go one step deeper into inside the gen spawn so gen",
    "start": "1728720",
    "end": "1735600"
  },
  {
    "text": "spawn takes the route which we know is user controlled from the previous frame and then creates a request and calls the",
    "start": "1735600",
    "end": "1742159"
  },
  {
    "text": "client start very similar to our example demo where you have like service name and then start so here we're",
    "start": "1742159",
    "end": "1747600"
  },
  {
    "text": "calling the start function on some service and the request object is user",
    "start": "1747600",
    "end": "1752880"
  },
  {
    "text": "controlled or contained tainted information now this is the last frame before we jump into the python part so",
    "start": "1752880",
    "end": "1759440"
  },
  {
    "text": "now we will jump into the python product here is the definition of that function or the implementation of the start",
    "start": "1759440",
    "end": "1765840"
  },
  {
    "text": "function request is user controlled or it contains user data contains stated",
    "start": "1765840",
    "end": "1771679"
  },
  {
    "text": "data and we take request and we forward that into start async inside start async the",
    "start": "1771679",
    "end": "1777120"
  },
  {
    "text": "request we access the route member from that which is also user controlled input we uh",
    "start": "1777120",
    "end": "1782720"
  },
  {
    "text": "created the args uh variable which we later use that also with some string",
    "start": "1782720",
    "end": "1788240"
  },
  {
    "text": "interpolation to create the exit command and eventually called the vmxx last frame in our vulnerability here is the",
    "start": "1788240",
    "end": "1795120"
  },
  {
    "text": "vm exec we take the command and then we call ssh client exit command the ssh client is a",
    "start": "1795120",
    "end": "1802080"
  },
  {
    "text": "client class in the parameco library parame is a python third-party library that allows you to ssh into machine and",
    "start": "1802080",
    "end": "1808720"
  },
  {
    "text": "execute command if the command object contain untrusted input you can have a command injection vulnerability",
    "start": "1808720",
    "end": "1814720"
  },
  {
    "text": "here and this is what we have here so the entire flow starting from the php",
    "start": "1814720",
    "end": "1819919"
  },
  {
    "text": "part going into the python part and eventually leading to a remote command execution from the exit command called",
    "start": "1819919",
    "end": "1826399"
  },
  {
    "text": "of parameco rce in 2021 yes we managed to find this",
    "start": "1826399",
    "end": "1831520"
  },
  {
    "text": "and we managed to find this with cross reputation for analysis no manual review being done to find this just the tools",
    "start": "1831520",
    "end": "1838880"
  },
  {
    "text": "saying this is a potential rc here to reach it and yes it is a potential rce it's very difficult to find rces and",
    "start": "1838880",
    "end": "1845679"
  },
  {
    "text": "with our tooling we were able to find this and we were able to find this in a testing environment before it lands and affect any of our users or our products",
    "start": "1845679",
    "end": "1853679"
  },
  {
    "text": "there's a lot of challenges and improvements to take this from here too and keep in improving on this one of the",
    "start": "1853679",
    "end": "1858880"
  },
  {
    "text": "challenges that we want to work on is false positives or a bad signal to noise ratio because of some sanitization",
    "start": "1858880",
    "end": "1865919"
  },
  {
    "text": "happening in one path so one on in php or in the python some sanitization happening in these two paths when we",
    "start": "1865919",
    "end": "1872799"
  },
  {
    "text": "send this information across crtec or when we send this tint information we don't necessarily send oh there's a",
    "start": "1872799",
    "end": "1878799"
  },
  {
    "text": "validation here we just said there's user input going to the sync here but if there's end casting or enum casting that",
    "start": "1878799",
    "end": "1885039"
  },
  {
    "text": "can lead to bad signatures ratio and we are actually working on this improvement there's also the creation",
    "start": "1885039",
    "end": "1891039"
  },
  {
    "text": "points for fb thrift we want to make it easier for anyone to create extra connection points so how you can support",
    "start": "1891039",
    "end": "1898159"
  },
  {
    "text": "grpc how can you support apache thrift or any other tools similar to if you third or even how can you support normal",
    "start": "1898159",
    "end": "1904640"
  },
  {
    "text": "http calls that the implementation in a django application or flask application inside your environment uh",
    "start": "1904640",
    "end": "1911600"
  },
  {
    "text": "also as you see in the real example that we've shared with you the the trace is slightly complex and this is expected",
    "start": "1911600",
    "end": "1918480"
  },
  {
    "text": "because the cross shoot flows but it would be great if we can come up with some creative ways to make the flow",
    "start": "1918480",
    "end": "1923840"
  },
  {
    "text": "simpler and simpler so that engineers can easily understand and act on that",
    "start": "1923840",
    "end": "1929279"
  },
  {
    "text": "fixed ownership who should fix that sql injection uh in the demo example who should fix the",
    "start": "1929279",
    "end": "1934399"
  },
  {
    "text": "rce is it the service or the client calling the service so uh sometimes yes",
    "start": "1934399",
    "end": "1940159"
  },
  {
    "text": "the server's responsibility is to make sure that the service is self-sustained and like secure by itself",
    "start": "1940159",
    "end": "1945919"
  },
  {
    "text": "uh but also sometimes the vulnerability if this if let's say missing permission checks the clients sometimes would need to to",
    "start": "1945919",
    "end": "1952880"
  },
  {
    "text": "perform these authorization checks before it calls uh the service uh looking forward i see there are there",
    "start": "1952880",
    "end": "1959200"
  },
  {
    "text": "are different ways where this can evolve over time i'll start first with uh this direction here so research to",
    "start": "1959200",
    "end": "1965440"
  },
  {
    "text": "standardize the taint flow summaries it would be great if we have more research around how the influence summaries can",
    "start": "1965440",
    "end": "1971120"
  },
  {
    "text": "be too agnostic can be standardized and can represent everything it would be great for for pisa to be able to",
    "start": "1971120",
    "end": "1976799"
  },
  {
    "text": "communicate with cosql with rips with other static analysis tools to build more complex ideas uh on top of that the",
    "start": "1976799",
    "end": "1983679"
  },
  {
    "text": "other idea is the mobile attack surface so the mobile attack surface if you think that you usually have your exported components and requests from",
    "start": "1983679",
    "end": "1990080"
  },
  {
    "text": "back end exported components how other applications on the same device communicate with your application but",
    "start": "1990080",
    "end": "1995600"
  },
  {
    "text": "request from back end how is your backend is communicating with your phone should you mark all the requests from",
    "start": "1995600",
    "end": "2001039"
  },
  {
    "text": "your back end as potentially user controlled or like untrusted input or should you mark your",
    "start": "2001039",
    "end": "2007039"
  },
  {
    "text": "everything coming for your back end as trusted input both are have like pros and cons but",
    "start": "2007039",
    "end": "2012559"
  },
  {
    "text": "with cross reporting flow analysis you will be able to find exactly and precisely what is coming from your back",
    "start": "2012559",
    "end": "2018480"
  },
  {
    "text": "end that is user controlled input and how does this affect your mobile application another",
    "start": "2018480",
    "end": "2023840"
  },
  {
    "text": "improvement area that i can i can think of back in storage is most of the systems today or most of the in-flow analysis systems today if you",
    "start": "2023840",
    "end": "2030240"
  },
  {
    "text": "have user control input going to a database and somewhere else in your code you read that input from database and",
    "start": "2030240",
    "end": "2035760"
  },
  {
    "text": "then you go to eval or some rce sync most of the info analysis tool we will",
    "start": "2035760",
    "end": "2040880"
  },
  {
    "text": "not be able to find that vulnerability for you because for them the back end is a black hole or the back and everything",
    "start": "2040880",
    "end": "2047440"
  },
  {
    "text": "from the back end is tainted and untrusted which is very very noisy with cross street potential analysis you will",
    "start": "2047440",
    "end": "2052878"
  },
  {
    "text": "be able to see precisely what's that this is an example here so imagine you have a request save image you store an",
    "start": "2052879",
    "end": "2059679"
  },
  {
    "text": "image with some name that is stored into the database and then somewhere else in the code another request or another endpoint that view an image with an id",
    "start": "2059679",
    "end": "2067280"
  },
  {
    "text": "retrieves that from the database the image the content and the name that you provided in the first request there is a",
    "start": "2067280",
    "end": "2072960"
  },
  {
    "text": "path reversal vulnerability here most of the tools nowadays will not be able to detect this vulnerability but",
    "start": "2072960",
    "end": "2078079"
  },
  {
    "text": "with crosstree potential analysis or the same mechanism you will be able to know that whenever you're retrieving this",
    "start": "2078079",
    "end": "2084158"
  },
  {
    "text": "data from the database it was user tainted in the first request and then you'll be able to see the entire flow",
    "start": "2084159",
    "end": "2090000"
  },
  {
    "text": "giving you kind of a better view of your attack surface last idea for this to grow which is one",
    "start": "2090000",
    "end": "2096800"
  },
  {
    "text": "of my favorite is privacy relevant flows imagine mariana trench working with zonglan or some of",
    "start": "2096800",
    "end": "2102480"
  },
  {
    "text": "our back end and our stool where you can see a flow coming from a sensitive sensor speaker camera gps location",
    "start": "2102480",
    "end": "2109359"
  },
  {
    "text": "fingerprint i know they mostly stay in the device but imagine you have this ability where you see the data coming",
    "start": "2109359",
    "end": "2114800"
  },
  {
    "text": "from the sensor we're reading the data from the sensor we're sending this data across our back end and what we do with",
    "start": "2114800",
    "end": "2119839"
  },
  {
    "text": "this data with our back end so with cross reporting for us is with mariana attention speaking with pisa or zonclan",
    "start": "2119839",
    "end": "2126160"
  },
  {
    "text": "you will be able to find that flow you will be able to find flow leaving from a sensor going to your back end and what",
    "start": "2126160",
    "end": "2131920"
  },
  {
    "text": "do you do with data at the back end takeaways",
    "start": "2131920",
    "end": "2137520"
  },
  {
    "text": "so if you're an application security engineer on application security teams you probably know that there is a lot of",
    "start": "2137520",
    "end": "2143520"
  },
  {
    "text": "code there you have a lot to review use static analysis it scales scaled with us",
    "start": "2143520",
    "end": "2150640"
  },
  {
    "text": "we have great open source tools they're free to use and they have great documentation you",
    "start": "2150640",
    "end": "2155839"
  },
  {
    "text": "can go and try them right away you have all the knowledge to build cross reputation flow analysis so go and try",
    "start": "2155839",
    "end": "2162480"
  },
  {
    "text": "it out for security consultants you might think it's like i don't own code i just do good reviews uh now and then",
    "start": "2162480",
    "end": "2168240"
  },
  {
    "text": "maybe i don't need to use stainflow analysis yes and no so uh if you have python code",
    "start": "2168240",
    "end": "2173680"
  },
  {
    "text": "or java code you can just get a quick head start by analyzing this with python and uh meritorious but what you really",
    "start": "2173680",
    "end": "2179440"
  },
  {
    "text": "can use is if you have a question like what are all the ways that i can get an rc in python or what are all the",
    "start": "2179440",
    "end": "2185680"
  },
  {
    "text": "all the ways that i can get sql injection in mariana trench we have our configuration open source these have all",
    "start": "2185680",
    "end": "2191280"
  },
  {
    "text": "the ways that an rce can happen in python a sql injection can happen in java and you can look at these",
    "start": "2191280",
    "end": "2196800"
  },
  {
    "text": "configuration and get this knowledge quickly and know if this is a vulnerability if this flow can lead to vulnerability or not and if you find a",
    "start": "2196800",
    "end": "2203280"
  },
  {
    "text": "new uh kind of api or something that can lead to rc please feel free to share it with us on our configuration and if you",
    "start": "2203280",
    "end": "2209359"
  },
  {
    "text": "really want to see everything working in action if you really want to see grocery potentials working in action feel free to join us at fp.com careers for",
    "start": "2209359",
    "end": "2217200"
  },
  {
    "text": "aesthetic analysis researchers all our static analysis tools are open source feel free to look at the code",
    "start": "2217200",
    "end": "2222640"
  },
  {
    "text": "feel free to participate with any ideas or thoughts that you have in mind also it would be great if you can reach if",
    "start": "2222640",
    "end": "2228400"
  },
  {
    "text": "you can spend more time researching about tool agnes agnostic taint summaries uh last slide which is the",
    "start": "2228400",
    "end": "2235119"
  },
  {
    "text": "most important for me is i'd like to thank everyone whose name is here they have played a very very important role",
    "start": "2235119",
    "end": "2241280"
  },
  {
    "text": "for the success of this presentation i hope really you liked it",
    "start": "2241280",
    "end": "2246320"
  },
  {
    "text": "thank you everyone thank you for your time and i'm looking forward for your questions",
    "start": "2246320",
    "end": "2252359"
  }
]