[
  {
    "text": "good morning and welcome to my talk on analyzing the Mac OS payloads of the 3cx supply chain attack my name is Patrick",
    "start": "3080",
    "end": "10880"
  },
  {
    "text": "wle I am the founder of The Objective C Foundation I create the free open source Mac security tools write the art of Mac",
    "start": "10880",
    "end": "18480"
  },
  {
    "text": "maware books and also organize The Objective C Conference my friends know me though as a paddle warer",
    "start": "18480",
    "end": "27800"
  },
  {
    "text": "ha so what will you learn so today's talk yes is really focused on",
    "start": "27800",
    "end": "35000"
  },
  {
    "text": "the Mac components of the 3cx supply chain attack so we're going to learn",
    "start": "35000",
    "end": "40320"
  },
  {
    "text": "deeply about all of those but there's some other kind of takeaways and lessons that I want to instill and that is kind",
    "start": "40320",
    "end": "46079"
  },
  {
    "text": "of also we will we will talk about and you will learn how to analyze Mac malware rapidly quickly efficiently",
    "start": "46079",
    "end": "52840"
  },
  {
    "text": "which is especially important in the context of a supply chain attack where time is definitely of the essence we're",
    "start": "52840",
    "end": "59600"
  },
  {
    "text": "also going to going to touch on topics of huris detecting uh Mac Mau that yes are applicable to the payloads we're",
    "start": "59600",
    "end": "66159"
  },
  {
    "text": "going to talk about today but more broadly more generically are also applicable to detecting essentially any",
    "start": "66159",
    "end": "71560"
  },
  {
    "text": "other Mac malware as well so how are we going to get there we're going to start with an overview talking about uh the",
    "start": "71560",
    "end": "78360"
  },
  {
    "text": "attack some kind of basic stuff to get us all on the same page we're then going to dive into the back door that the",
    "start": "78360",
    "end": "84759"
  },
  {
    "text": "attackers installed on the 3 cxs build machine we're then going to into the",
    "start": "84759",
    "end": "90840"
  },
  {
    "text": "infected trojanized installer that was deployed to uh 3cx customers users",
    "start": "90840",
    "end": "97079"
  },
  {
    "text": "around the world and then also dive into the second stage payload that was uh",
    "start": "97079",
    "end": "102119"
  },
  {
    "text": "downloaded from the attacker's command and control server once a successful infection commenced and then finally",
    "start": "102119",
    "end": "107560"
  },
  {
    "text": "we're going to end with some detections how as I just mentioned would we detect this uh both in hindsight but also",
    "start": "107560",
    "end": "114360"
  },
  {
    "text": "looking forward to other taxs which will surely come now I do want want to start by",
    "start": "114360",
    "end": "120920"
  },
  {
    "text": "pointing out some very helpful resources on this and the main reason I want to do this is because this talk this uh",
    "start": "120920",
    "end": "127600"
  },
  {
    "text": "analysis was really a team Community effort uh and so first and foremost crowd strike did some amazing initial",
    "start": "127600",
    "end": "134280"
  },
  {
    "text": "work they were the company to kind of point out and confirm the infection in the first place uh and then there's a",
    "start": "134280",
    "end": "140200"
  },
  {
    "text": "great report from mandiant they were hired by 3cx to do the after the fact uh so in that report very comprehensive a",
    "start": "140200",
    "end": "146840"
  },
  {
    "text": "lot of great details on that so I just wanted to mention because the stuff I'm going to talk definitely Builds on the",
    "start": "146840",
    "end": "153480"
  },
  {
    "text": "research of these companies so kudos to them all right so let's start with an overview now I'm sure most of us if not",
    "start": "153480",
    "end": "160800"
  },
  {
    "text": "all of us know what supply chain attacks are but I figured it' be good to have a definition just to make sure that we are",
    "start": "160800",
    "end": "166159"
  },
  {
    "text": "all on the same page so crowd strike articulates defines this very well and we can see that a supply chain attack is",
    "start": "166159",
    "end": "172879"
  },
  {
    "text": "something that targets a trusted thirdparty vendor who offers services or in this case software uh software Supply",
    "start": "172879",
    "end": "180159"
  },
  {
    "text": "supply chain attacks or when adversaries hackers malware authors nation states are somehow able to get access to the",
    "start": "180159",
    "end": "187200"
  },
  {
    "text": "company or developers Network build machines and then inject malicious code into an application to infect all the",
    "start": "187200",
    "end": "195280"
  },
  {
    "text": "users of the app and that all the users is important because it's really a very from the attacker's point of view",
    "start": "195280",
    "end": "201200"
  },
  {
    "text": "efficient way to Target and infect a very large number of victims now the",
    "start": "201200",
    "end": "206959"
  },
  {
    "text": "supply chain attack statistics from crowd strike were to me kind of shocking like I'm kind of you know up on on on",
    "start": "206959",
    "end": "213239"
  },
  {
    "text": "supply chain tax but I didn't really really even me realize how problematic uh they were so some of the uh",
    "start": "213239",
    "end": "219200"
  },
  {
    "text": "statistics we can see that you know companies are yes taking this seriously and vetting um you know software that",
    "start": "219200",
    "end": "226120"
  },
  {
    "text": "they're installing uh but you know almost half experienced at least one supply chain attack in the last 12",
    "start": "226120",
    "end": "231159"
  },
  {
    "text": "months that's insane especially as we'll see how difficult supply chain attacks are to detect and also how impactful",
    "start": "231159",
    "end": "239239"
  },
  {
    "text": "they can be so let's start now with a diagrammatic overview of the 3cx attack this slide",
    "start": "239239",
    "end": "246879"
  },
  {
    "text": "has got a lot going on but that is because in reality this attack was very complicated it's actually believed to be",
    "start": "246879",
    "end": "253079"
  },
  {
    "text": "the first chained supply chain attack where 3cx was actually themselves the",
    "start": "253079",
    "end": "258639"
  },
  {
    "text": "victim of a supply chain attack so what happened was this AP group who is",
    "start": "258639",
    "end": "263960"
  },
  {
    "text": "associated with North Koreans targeted and successfully hacked a company called trading Technologies they then infected",
    "start": "263960",
    "end": "270680"
  },
  {
    "text": "one of their Windows programs called X Trader so this was the first uh attack",
    "start": "270680",
    "end": "276880"
  },
  {
    "text": "now any user who downloaded uh X Trader would be a victim of this first supply chain attack one of these victims was a",
    "start": "276880",
    "end": "284240"
  },
  {
    "text": "employee at the 3cx company they downloaded and executed the X Trader application thereby infecting their",
    "start": "284240",
    "end": "290639"
  },
  {
    "text": "system the North Koreans were then able to propagate through the 3cx network",
    "start": "290639",
    "end": "296280"
  },
  {
    "text": "ultimately getting to the Mac OS build machine where they installed an implant which we will talk about shortly they",
    "start": "296280",
    "end": "302600"
  },
  {
    "text": "then infected three cxs installer and then everyone who was a client a customer of 3cx once that update got",
    "start": "302600",
    "end": "310000"
  },
  {
    "text": "propagated they all became infected and then finally the last stage was once",
    "start": "310000",
    "end": "315520"
  },
  {
    "text": "those infections were successful it reached out to a command control server to download a second stage payload which we will talk about today so our focus is",
    "start": "315520",
    "end": "322479"
  },
  {
    "text": "really on the Macos component of this so what we're going to do is we're going to look right here uh no specifically here",
    "start": "322479",
    "end": "329039"
  },
  {
    "text": "the in of the build server 3cx where they're going to look at the Mac OS",
    "start": "329039",
    "end": "334160"
  },
  {
    "text": "installer and then finally at the second stage payload now how did this all",
    "start": "334160",
    "end": "341000"
  },
  {
    "text": "begin on the forums of 3cx where else so users started noticing unusual activity",
    "start": "341000",
    "end": "347080"
  },
  {
    "text": "both on their systems and from their EDR products and they hopped on the 3cx Forum and they were like y'all what",
    "start": "347080",
    "end": "352840"
  },
  {
    "text": "gives like I'm getting all these alerts for my EDR product and you should have a read because it's a really good way of",
    "start": "352840",
    "end": "359199"
  },
  {
    "text": "how not to respond to your customers to your users when they raise some problems 3cx supports and again hindsight it's",
    "start": "359199",
    "end": "366039"
  },
  {
    "text": "always 2020 unfortunately basically said ah we have no idea like we don't know how the AV stuff works probably a false",
    "start": "366039",
    "end": "371880"
  },
  {
    "text": "positive go talk to the AV companies understandable but probably not the right response when someone comes to you",
    "start": "371880",
    "end": "377440"
  },
  {
    "text": "and says hey your software is now triggering all these flags interesting as I mentioned crowd strike was then the",
    "start": "377440",
    "end": "384160"
  },
  {
    "text": "company that really confirmed the attack they tweeted uh and posted a Blog saying",
    "start": "384160",
    "end": "389599"
  },
  {
    "text": "hey it looks like there's an active intrusion going on looks like it's a supply chain attack impacting users of",
    "start": "389599",
    "end": "397680"
  },
  {
    "text": "3cx at that time that piqued my interest because I said is there a Mac component",
    "start": "397800",
    "end": "403080"
  },
  {
    "text": "to that and crowd strike had a sentence in their blog post uh that basically",
    "start": "403080",
    "end": "409639"
  },
  {
    "text": "said we have seen malicious activity on Mac OS but really provided not much more",
    "start": "409639",
    "end": "414759"
  },
  {
    "text": "information about that other ADR companies were kind kind in the dark as",
    "start": "414759",
    "end": "420039"
  },
  {
    "text": "well even ones whose products were being mentioned on the forums for identifying",
    "start": "420039",
    "end": "425680"
  },
  {
    "text": "suspicious activity basically saying we can't confirm if the Mac OS installer is trojanized now I put myself in the shoes",
    "start": "425680",
    "end": "433479"
  },
  {
    "text": "of 3cx Enterprise users who had the Mac version of that and I'm like wow that",
    "start": "433479",
    "end": "439400"
  },
  {
    "text": "sucks like there's a supply chain attack and nobody knows if the Mac OS component is infected and if it is how what do I",
    "start": "439400",
    "end": "447280"
  },
  {
    "text": "look for so I dove in and spent a lot of time reverse engineering it and ultimately uh confirmed that indeed the",
    "start": "447280",
    "end": "455199"
  },
  {
    "text": "Mac West component was uh infected and exactly how uh I posted some initial research on that but that's really what",
    "start": "455199",
    "end": "461960"
  },
  {
    "text": "our talk is about today so let's start by talking about pool rat pool rat is",
    "start": "461960",
    "end": "469240"
  },
  {
    "text": "the back door that the North Koreans or the 3cx attackers installed on the 3cx",
    "start": "469240",
    "end": "477280"
  },
  {
    "text": "build server again as they propagate it in from the trading Technologies supply chain attack the mandiant report",
    "start": "477280",
    "end": "484240"
  },
  {
    "text": "provides a lot of great details about this back door again they were hired by 3cx to kind of clean up the mess and figure out exactly what went wrong and",
    "start": "484240",
    "end": "491159"
  },
  {
    "text": "we can see on the slides it basically says that the Mac build server was compromised using a back door known as",
    "start": "491159",
    "end": "498360"
  },
  {
    "text": "pool rat and important to note that the build server was running Mac so the software that the back door was",
    "start": "498360",
    "end": "504360"
  },
  {
    "text": "installed was a Mac OS back door so the mandant report provides a nice overview",
    "start": "504360",
    "end": "509840"
  },
  {
    "text": "of the back door they basically say hey it's a pretty standard Mac OS back door",
    "start": "509840",
    "end": "515360"
  },
  {
    "text": "that provides survey capabilities and the ability for the attacker to execute subsequent commands so what we're going",
    "start": "515360",
    "end": "523039"
  },
  {
    "text": "to do now is to confirm that analysis and really dive in and see exactly what gives interesting though it turns out",
    "start": "523039",
    "end": "529640"
  },
  {
    "text": "that poat apparently had been seen and utilized before so when mandiant released a Yara rule if you take the",
    "start": "529640",
    "end": "536080"
  },
  {
    "text": "hash from their Yara Rule and go over to virus total you can see a sample was actually submitted all the way back in",
    "start": "536080",
    "end": "542920"
  },
  {
    "text": "2020 so 3 years ago Apple also at this time released a experte signature exper",
    "start": "542920",
    "end": "550519"
  },
  {
    "text": "is kind of the built-in AV uh of Mac OS to detect this now it's not immediately",
    "start": "550519",
    "end": "556920"
  },
  {
    "text": "clear if this exact version of pool rat was used on the build machine but it is the hash in Mandan report so it's kind",
    "start": "556920",
    "end": "563519"
  },
  {
    "text": "of an open question is you know how it could be installed on this Mac OS build system even though exp protect had it",
    "start": "563519",
    "end": "569200"
  },
  {
    "text": "detection signature now I will point out X protect detection signatures are very brittle very static so even if a few",
    "start": "569200",
    "end": "575120"
  },
  {
    "text": "bytes changed it probably wouldn't detect it or maybe the build server was out of date we just don't know so let's",
    "start": "575120",
    "end": "581720"
  },
  {
    "text": "now look at pool rat and talk about how I went about triaging and how you might",
    "start": "581720",
    "end": "587000"
  },
  {
    "text": "as well if you are interested in doing Mac malware analysis so the first thing I always do when I get a sample that I",
    "start": "587000",
    "end": "594160"
  },
  {
    "text": "know is malicious I think is malicious I don't know if it's malicious is I determine its file type this is a very",
    "start": "594160",
    "end": "599800"
  },
  {
    "text": "basic and obvious step but it's very important because the majority of analysis tools are file type specific so",
    "start": "599800",
    "end": "607240"
  },
  {
    "text": "if you have something that's compiled python bite code you are going to analyze that differently than if it's a",
    "start": "607240",
    "end": "613640"
  },
  {
    "text": "obfuscated bash script or a compiled arm binary right so there's different tools",
    "start": "613640",
    "end": "619079"
  },
  {
    "text": "for all of that so we can use Mac os's file command file utility and that will tell us what the file type is we execute",
    "start": "619079",
    "end": "625839"
  },
  {
    "text": "this against pool rat the binary that was installed on the build server and we can see unsurprisingly it's a 64-bit",
    "start": "625839",
    "end": "631959"
  },
  {
    "text": "Macho executable Macho is the standard executable file format for Mac",
    "start": "631959",
    "end": "637600"
  },
  {
    "text": "OS the next thing I do I always like to pull code signing information if an item is signed it can tell you perhaps who",
    "start": "637600",
    "end": "644200"
  },
  {
    "text": "wrote it and give you extra metadata about the binary uh so we can use Apple's code sign utility and if we do",
    "start": "644200",
    "end": "651120"
  },
  {
    "text": "that we can see that this is signed ad Hawk which basically means it's signed locally by an untrusted signature this",
    "start": "651120",
    "end": "658200"
  },
  {
    "text": "is interesting it doesn't give us a lot of information about who created it because ad hoc signatures aren't really",
    "start": "658200",
    "end": "665040"
  },
  {
    "text": "verifiable but it is kind of a red flag and perhaps a detection",
    "start": "665040",
    "end": "671519"
  },
  {
    "text": "cistica science software running on your Mac or really any the next thing I do is I look for",
    "start": "671519",
    "end": "677800"
  },
  {
    "text": "any embedded strings and as I've pointed out on the slide though embedded strings",
    "start": "677800",
    "end": "683040"
  },
  {
    "text": "can be super useful they can provide a lot of information but you should always further validate that you shouldn't jump",
    "start": "683040",
    "end": "688800"
  },
  {
    "text": "to conclusions just by embedded strings but what embedded strings can do is very quickly give you the likely capabilities",
    "start": "688800",
    "end": "695440"
  },
  {
    "text": "of a sample and also guide your continued analysis efforts so we can use the strings",
    "start": "695440",
    "end": "701200"
  },
  {
    "text": "command it's built into Mac OS execute it with the dash flag this tells it to scan the entire file I don't know why",
    "start": "701200",
    "end": "707800"
  },
  {
    "text": "strings doesn't do by do that by default but it doesn't so if we do that we can see some very interesting embedded",
    "start": "707800",
    "end": "713839"
  },
  {
    "text": "strings in the pool rat binary things that look like paths to config files uh",
    "start": "713839",
    "end": "719000"
  },
  {
    "text": "perhaps an address of a commanded control server and perhaps some uh what appear to be obus skated or mangled",
    "start": "719000",
    "end": "726399"
  },
  {
    "text": "commands speaking of mangled command since the malware was written in C++ its",
    "start": "726399",
    "end": "732360"
  },
  {
    "text": "function and Method names will be mangled by the C++ compiler so we want to unang those to get their actual names",
    "start": "732360",
    "end": "739519"
  },
  {
    "text": "so we can use NM to get the exported functions and then we can pipe that",
    "start": "739519",
    "end": "745399"
  },
  {
    "text": "through C++ ft filter to demand angle that and when we do that we can now see",
    "start": "745399",
    "end": "751560"
  },
  {
    "text": "the names of the methods embedded in the malware the malware authors didn't obus skate these or try to hide them in any",
    "start": "751560",
    "end": "758680"
  },
  {
    "text": "way which is really helpful now again we will want to verify that but assuming we want to figure out where the malware",
    "start": "758680",
    "end": "765040"
  },
  {
    "text": "talks to the connect function looks like a good place to start right so embedded strings exported symbols a great way to",
    "start": "765040",
    "end": "772279"
  },
  {
    "text": "start your triage and Analysis now the next thing I did is I popped it in a disassembler and I",
    "start": "772279",
    "end": "778560"
  },
  {
    "text": "immediately noticed what appeared to be pieces of encrypted strings that were all passed to this function called get",
    "start": "778560",
    "end": "785600"
  },
  {
    "text": "trick this was called all over the place and right before it there was always these embedded what appeared to be encrypted strings so I threw the binary",
    "start": "785600",
    "end": "792480"
  },
  {
    "text": "into a debugger and put a breakpoint on the get trick function and I could see that it was receiving two arguments on",
    "start": "792480",
    "end": "800000"
  },
  {
    "text": "x86 the first argument is going to be an RDI the second argument is going to be an RSI so I've printed those out in a",
    "start": "800000",
    "end": "806440"
  },
  {
    "text": "debugger in RDI we can see what appears to be the btes of an encrypted string whereas in RSI we can see what appears",
    "start": "806440",
    "end": "812519"
  },
  {
    "text": "to be the length now as I mentioned on the slide it's a good idea to decrypt any strings before you continue your",
    "start": "812519",
    "end": "818639"
  },
  {
    "text": "analysis because these are the items that the malware author does not want you to see which means if you uncover",
    "start": "818639",
    "end": "824800"
  },
  {
    "text": "them they're probably super interesting and could really help your analysis efforts so how do we decrypt the strings",
    "start": "824800",
    "end": "831839"
  },
  {
    "text": "well we pop into that get trick function there's the annotated disassembly on the",
    "start": "831839",
    "end": "836920"
  },
  {
    "text": "slide and we can see it's going to decrypt the string using a hardcoded key",
    "start": "836920",
    "end": "842000"
  },
  {
    "text": "awesome this means that because the key is hardcoded and the decryption uh",
    "start": "842000",
    "end": "847040"
  },
  {
    "text": "algorithm is pretty straightforward we can implement it in about six lines of python so we have that here on the slide",
    "start": "847040",
    "end": "853000"
  },
  {
    "text": "we can use the same decrypted key basically iterate over that dxor it using that key on the slide of an",
    "start": "853000",
    "end": "859800"
  },
  {
    "text": "example of one of the encrypted strings we can see when we decrypt it it's a command to get the version of Mac OS not",
    "start": "859800",
    "end": "867360"
  },
  {
    "text": "maybe the most exciting thing this implies that maybe it's doing some survey capability in a manner that they",
    "start": "867360",
    "end": "873079"
  },
  {
    "text": "don't want us to readily observe next up we have this what",
    "start": "873079",
    "end": "878279"
  },
  {
    "text": "appeared to be config file remember this was an embedded string so this was like hm it looks like there's a path I wonder",
    "start": "878279",
    "end": "883880"
  },
  {
    "text": "what it's doing with this so the first thing I then did is I executed a file Monitor and ran the malware in a virtual",
    "start": "883880",
    "end": "890839"
  },
  {
    "text": "machine and I observed the fact that the malware was creating and then writing information out to this file once the",
    "start": "890839",
    "end": "898000"
  },
  {
    "text": "malware exited I took a peek at what was in that file unfortunately but unsurprising it was encrypted right",
    "start": "898000",
    "end": "903839"
  },
  {
    "text": "malare authors generally don't write out configuration information in plain text they're going to encrypt",
    "start": "903839",
    "end": "909120"
  },
  {
    "text": "it so next up I said okay man I got to write another decryption function I'd rather be out paddle boarding so let me",
    "start": "909120",
    "end": "916399"
  },
  {
    "text": "see if chat GPT can help me I think the AI stuff is a little bit overhyped but you know turns out it's actually",
    "start": "916399",
    "end": "922880"
  },
  {
    "text": "marginally useful in context of malware analysis so what I did was I took the",
    "start": "922880",
    "end": "928839"
  },
  {
    "text": "function that wrote out the encrypted bytes to the uh config file or rather",
    "start": "928839",
    "end": "934440"
  },
  {
    "text": "took the bytes encrypted and then wrote it out and I copy and pasted the disassembly into chat GPT and said given",
    "start": "934440",
    "end": "941759"
  },
  {
    "text": "this function disassembly this is my prompt write a python script that will open the file and I didn't tell it what",
    "start": "941759",
    "end": "948480"
  },
  {
    "text": "file I expected it to find the PATH and decrypt the data and it like thought for a second and then like spat out this",
    "start": "948480",
    "end": "955040"
  },
  {
    "text": "python that literally worked and I was like what this is awesome so yeah cool I",
    "start": "955040",
    "end": "960600"
  },
  {
    "text": "was stoked saved me some time uh so this is the python script that chat GPT wrote",
    "start": "960600",
    "end": "965959"
  },
  {
    "text": "that was successfully able to decrypt the config file now I'll point out it wasn't like the world's most incredible",
    "start": "965959",
    "end": "972480"
  },
  {
    "text": "encryption it's basically exor with an embedded key but chat GPT was able to pull out the name of the config file was",
    "start": "972480",
    "end": "978959"
  },
  {
    "text": "able to determine it was exor encryption find the hardcore hardcoded key and write executable compilable python that",
    "start": "978959",
    "end": "986639"
  },
  {
    "text": "successfully worked so then I executed the python passed it um or hardcoded the",
    "start": "986639",
    "end": "992360"
  },
  {
    "text": "name of the file which g chat GPT hardcoded itself and was able to now decrypt the file which we can see are",
    "start": "992360",
    "end": "998680"
  },
  {
    "text": "the malware's command control servers so thanks chat gpg the next thing the malware does is a",
    "start": "998680",
    "end": "1004600"
  },
  {
    "text": "basic survey uh this is unsurprising maare often wants to survey a box that",
    "start": "1004600",
    "end": "1009839"
  },
  {
    "text": "it has infected we run a process monitor it's a passive tool to see what commands the maare execute we can see that it's",
    "start": "1009839",
    "end": "1017199"
  },
  {
    "text": "executing the SW version command remember this was one of the decrypted strings we saw and this will return to",
    "start": "1017199",
    "end": "1023000"
  },
  {
    "text": "you the name of the operating system so like Mac OS this is a disassembly of the survey",
    "start": "1023000",
    "end": "1030438"
  },
  {
    "text": "it's in a function called get C info and it does basic stuff right gets the name of the OS the IP address pretty standard",
    "start": "1030439",
    "end": "1036600"
  },
  {
    "text": "stuff and then sends that out to the attacker's command and control server the malware as mentioned in mandiant",
    "start": "1036600",
    "end": "1041760"
  },
  {
    "text": "report also supports tasking this allows a remote command control uh attacker to",
    "start": "1041760",
    "end": "1047079"
  },
  {
    "text": "task the infected system we can figure out what commands it supports by looking at uh code in a",
    "start": "1047079",
    "end": "1054520"
  },
  {
    "text": "function called worker thread this is a thread that runs in the background connects out to the command and control server and this is a pattern you see",
    "start": "1054520",
    "end": "1061080"
  },
  {
    "text": "very often so if you're analyzing other Mac mware you'll see something similar to this where it gets an integer or",
    "start": "1061080",
    "end": "1066600"
  },
  {
    "text": "numeric value from the command and control server and then uses that as an index into a table of function pointers",
    "start": "1066600",
    "end": "1074200"
  },
  {
    "text": "of commands that can be tasked so you can imagine the attacker says sends command command number two the m is like",
    "start": "1074200",
    "end": "1080720"
  },
  {
    "text": "two uses that two as an index and then maps that into command Handler uh number two so from that we can pop over we can",
    "start": "1080720",
    "end": "1087799"
  },
  {
    "text": "find this switch statement this function table and we can find the indexes of all the commands the maare author did not de",
    "start": "1087799",
    "end": "1094760"
  },
  {
    "text": "obate them so the names as we will see are pretty indicative of what the command actually does which is nice this",
    "start": "1094760",
    "end": "1100799"
  },
  {
    "text": "makes our job easier so let's look at some of these we'll look at for example the message up command this one opens a",
    "start": "1100799",
    "end": "1108679"
  },
  {
    "text": "file receives data from the command and control server and writes the file out",
    "start": "1108679",
    "end": "1114480"
  },
  {
    "text": "pretty standard allows the attacker to send a file from the server to the infected host so upload it from the",
    "start": "1114480",
    "end": "1120840"
  },
  {
    "text": "server to the client you can imagine a second stage payload or anything else the MSG or message command command",
    "start": "1120840",
    "end": "1128280"
  },
  {
    "text": "unsurprisingly executes a m a command from the attacker server pretty standard",
    "start": "1128280",
    "end": "1134039"
  },
  {
    "text": "basically decrypts a string uh to use to uh build the command takes the command",
    "start": "1134039",
    "end": "1140600"
  },
  {
    "text": "that was passed in from the command and control server uh and then executes it and sends the output back to the command",
    "start": "1140600",
    "end": "1147400"
  },
  {
    "text": "control server so pretty standard pretty basic stuff but allows the attacker to execute commands so that's P rat that",
    "start": "1147400",
    "end": "1154559"
  },
  {
    "text": "was the back door that the attackers installed on 3cx build server that ultimately allowed them to compromise",
    "start": "1154559",
    "end": "1162039"
  },
  {
    "text": "3x's Mac OS installer now let's talk about how that",
    "start": "1162039",
    "end": "1167919"
  },
  {
    "text": "install was trojanized again remember this was kind of an open question when crowd",
    "start": "1167919",
    "end": "1173640"
  },
  {
    "text": "strike announced that 3cx was hacked nobody knew if the Mac OS installer was",
    "start": "1173640",
    "end": "1180640"
  },
  {
    "text": "impacted and if so how it was so I grabbed the dis image from 3cx",
    "start": "1180640",
    "end": "1190159"
  },
  {
    "text": "that uh may or may not be infected the Mac OS installer and I looked at the application and the first thing I",
    "start": "1190159",
    "end": "1195799"
  },
  {
    "text": "noticed by looking at its code signing information it was signed and notorized notarization is a technology where you",
    "start": "1195799",
    "end": "1202559"
  },
  {
    "text": "submit a binary to Apple Apple analyzes that binary scans it from hour and if none is found they notorized it",
    "start": "1202559",
    "end": "1208679"
  },
  {
    "text": "essentially giving it their stamp of approval which means it can execute now on Mac OS so when I saw this I was like",
    "start": "1208679",
    "end": "1216039"
  },
  {
    "text": "I don't think this is infected because Apple's not going to like notorized a supply chain attack are they but I",
    "start": "1216039",
    "end": "1223600"
  },
  {
    "text": "decided to give dig deeper right really really want to know and this was not the",
    "start": "1223600",
    "end": "1229120"
  },
  {
    "text": "easiest this definitely cut into my padle boarding time and and this is because this was a 400 Meg application",
    "start": "1229120",
    "end": "1235919"
  },
  {
    "text": "and it's like is this infected and if so like where there is 113 files in here",
    "start": "1235919",
    "end": "1242960"
  },
  {
    "text": "like where is the malware is there malware and so I spent some time digging around and I eventually came on an",
    "start": "1242960",
    "end": "1249440"
  },
  {
    "text": "interesting file called lib FFM peg. diib nothing was flagging this on virus",
    "start": "1249440",
    "end": "1254640"
  },
  {
    "text": "total there was no immediate indication that it was suspicious",
    "start": "1254640",
    "end": "1259720"
  },
  {
    "text": "but I looked a little deeper and I noticed that this Library would be executed every time 3cx was launched it",
    "start": "1259720",
    "end": "1266000"
  },
  {
    "text": "was not too surprising it kind of appeared to be a standard dependency specifically it was dependent on the",
    "start": "1266000",
    "end": "1271600"
  },
  {
    "text": "electron framework and the application itself had that so again nothing super",
    "start": "1271600",
    "end": "1276679"
  },
  {
    "text": "unusual but you know I was like okay I'll keep digging time is of the essence got interesting when I threw the dynamic",
    "start": "1276679",
    "end": "1285520"
  },
  {
    "text": "Library into a uh disassembler and I noticed that it had an interesting Constructor so Dynamic libraries are",
    "start": "1285520",
    "end": "1291520"
  },
  {
    "text": "normally loaded into memory and they just sit there doing nothing until an application or program calls into one of",
    "start": "1291520",
    "end": "1297320"
  },
  {
    "text": "their exports what you can do though is you can add a Constructor which will be automatically executed as soon as the",
    "start": "1297320",
    "end": "1303440"
  },
  {
    "text": "dynamic library is loaded and remember this library because of the dependencies will be loaded every time the 3cx",
    "start": "1303440",
    "end": "1309279"
  },
  {
    "text": "application is launched by user so the first thing I noticed is only the Intel version of the library",
    "start": "1309279",
    "end": "1316440"
  },
  {
    "text": "had this constructure the arm one didn't and that was like odd that was",
    "start": "1316440",
    "end": "1321600"
  },
  {
    "text": "surprising also when I looked at the address of the Constructor so the",
    "start": "1321600",
    "end": "1327480"
  },
  {
    "text": "function that would be executed the implementation of the Constructor in a disassembly I saw it called an",
    "start": "1327480",
    "end": "1333200"
  },
  {
    "text": "interesting background thread function so I was like okay the plot thickens I took a look at that thread function and",
    "start": "1333200",
    "end": "1339559"
  },
  {
    "text": "it's 600 lines but also included things like decryption and I was like okay",
    "start": "1339559",
    "end": "1346159"
  },
  {
    "text": "there's like smoke here probably fire definitely onto something I said though I want to debug this so I can easily",
    "start": "1346159",
    "end": "1352600"
  },
  {
    "text": "decrypt the strings and see what it does when it executes but like how do you debug a dynamic Library both this",
    "start": "1352600",
    "end": "1359039"
  },
  {
    "text": "suspicious uh lib FFM Peg or dynamic libraries in general well the answer is",
    "start": "1359039",
    "end": "1364840"
  },
  {
    "text": "and the reason this is a little complex or is not immediately trivial is because Dynamic libraries are not Standalone",
    "start": "1364840",
    "end": "1370919"
  },
  {
    "text": "again they expected to be loaded into some other process and then called into",
    "start": "1370919",
    "end": "1376200"
  },
  {
    "text": "so what we needed to do what I needed to do was to create a simple Dynamic Library loader that again in just a few",
    "start": "1376200",
    "end": "1382600"
  },
  {
    "text": "lines of code would load a user specified Dynamic library for example this suspicious FFM Peg library and then",
    "start": "1382600",
    "end": "1389400"
  },
  {
    "text": "just wait and then I could attach in a debugger to this process and put a breakpoint uh for example on the",
    "start": "1389400",
    "end": "1396080"
  },
  {
    "text": "Constructor of the dynamic Library turns out though that libraries are loaded at random addresses because of aslr so we",
    "start": "1396080",
    "end": "1402640"
  },
  {
    "text": "don't actually know where that Constructor is going to be remember though that Constructor called pthread",
    "start": "1402640",
    "end": "1408000"
  },
  {
    "text": "create so what I did was I put a break point on that and we can see then the",
    "start": "1408000",
    "end": "1413400"
  },
  {
    "text": "breakpoint hit so at that point then since I'm in a debugger the dynamic library is loaded it's stopped at that",
    "start": "1413400",
    "end": "1419279"
  },
  {
    "text": "pthread create API I can find out the address of that Dynamic Library via the",
    "start": "1419279",
    "end": "1425440"
  },
  {
    "text": "image list command in the debugger I can then take that address pop into a",
    "start": "1425440",
    "end": "1431080"
  },
  {
    "text": "disassembler and tell the disassembler hey this is the current address of that loaded Dynamic Library so now we have",
    "start": "1431080",
    "end": "1437960"
  },
  {
    "text": "have a mapping in the disassembler to the memory instance of the dynamic library in our debugger which is super",
    "start": "1437960",
    "end": "1444880"
  },
  {
    "text": "helpful everything Maps up in our disassembler then we can find the address of the Constructor and then pop",
    "start": "1444880",
    "end": "1450720"
  },
  {
    "text": "back over to the debugger set a breakpoint there and pay now we have a",
    "start": "1450720",
    "end": "1455960"
  },
  {
    "text": "breakpoint hit on the debugger as it's about to execute um its malicious code",
    "start": "1455960",
    "end": "1461480"
  },
  {
    "text": "in the dynamic Library so now we can step through and figure out exactly what's going on the dynamic Anis makes",
    "start": "1461480",
    "end": "1468399"
  },
  {
    "text": "that a lot easier than just doing static analysis as I mentioned though there's some strange string encryption this is",
    "start": "1468399",
    "end": "1473600"
  },
  {
    "text": "something we always want to tackle first before we continue um we can see though it's pretty straightforward it's using exor",
    "start": "1473600",
    "end": "1481200"
  },
  {
    "text": "with a hardcoded key of O x7a so very trivial for us to write a simple python",
    "start": "1481200",
    "end": "1486600"
  },
  {
    "text": "script that just iterates through the entire Dynamic library and just applies that encryption key to all its bytes and",
    "start": "1486600",
    "end": "1493760"
  },
  {
    "text": "then a bunch of strings fall out which include command and control addresses and also what appears to be a user agent",
    "start": "1493760",
    "end": "1500760"
  },
  {
    "text": "string okay let's now talk about the capabilities of this now obviously very",
    "start": "1500760",
    "end": "1505960"
  },
  {
    "text": "clearly suspicious Dynamic Library first thing it does is a simple survey and connects that back sends that back to",
    "start": "1505960",
    "end": "1512799"
  },
  {
    "text": "the command and control server this is very unsurprising in a supply chain attack adversaries are able to infect",
    "start": "1512799",
    "end": "1519679"
  },
  {
    "text": "thousands potentially of victims uh they might not know who those victims are so in supply chain attacks you often see",
    "start": "1519679",
    "end": "1526480"
  },
  {
    "text": "first stage payloads generating a survey to say oh where did I land what is the information about this system so if we",
    "start": "1526480",
    "end": "1533960"
  },
  {
    "text": "run a file monitor we can see the malware uh touching certain file system",
    "start": "1533960",
    "end": "1540440"
  },
  {
    "text": "uh files on the on Mac OS for example it reads system version. pist to get the version of Mac OS it then encrypts that",
    "start": "1540440",
    "end": "1548399"
  },
  {
    "text": "survey information you can see an example of the survey super basic it's like the name of the system uh the IP",
    "start": "1548399",
    "end": "1555360"
  },
  {
    "text": "address or the host name uh the version version of Mac OS and then it encrypts that out and sends that to the command",
    "start": "1555360",
    "end": "1561440"
  },
  {
    "text": "and control server so pretty standard basic stuff a survey the next thing it's does and this",
    "start": "1561440",
    "end": "1567440"
  },
  {
    "text": "is really the main capability of this is to download and execute a second stage payload called update agent here's the",
    "start": "1567440",
    "end": "1575159"
  },
  {
    "text": "disassembly or the decompilation we can see it just writes out the bites from the command and control server sets it",
    "start": "1575159",
    "end": "1580919"
  },
  {
    "text": "to be executable and then executes this so the question of course is okay",
    "start": "1580919",
    "end": "1587720"
  },
  {
    "text": "what does this second stage uh payload actually do we've now confirmed that 3cx is Mac OS installer",
    "start": "1587720",
    "end": "1595640"
  },
  {
    "text": "is uh maliciously subverted right that Dynamic library and that library is basically going to do a simple survey",
    "start": "1595640",
    "end": "1601159"
  },
  {
    "text": "and download and execute something else so let's now talk about update agent which again is the last piece of this",
    "start": "1601159",
    "end": "1607600"
  },
  {
    "text": "attack and this is when a user is in successfully uh infected again this is",
    "start": "1607600",
    "end": "1612679"
  },
  {
    "text": "the code from this first stage that downloads the second stage so we need to find a copy of this turns out was pretty",
    "start": "1612679",
    "end": "1618520"
  },
  {
    "text": "hard because as we'll see this binary self-d deletes so a lot of EDR products",
    "start": "1618520",
    "end": "1623760"
  },
  {
    "text": "could see that this binary had been run but no one actually had a copy of it so I tweeted like hey does anyone have a",
    "start": "1623760",
    "end": "1630399"
  },
  {
    "text": "copy of the update agent that they could share with me and I got this like awesome message from this like anonymous",
    "start": "1630399",
    "end": "1636600"
  },
  {
    "text": "source that's like here I can't tell you how I got this and please don't like mention anything about this but you can",
    "start": "1636600",
    "end": "1643279"
  },
  {
    "text": "analyze it and and talk about your analysis results so basically fell off a truck as we used to say in the intelligence",
    "start": "1643279",
    "end": "1649520"
  },
  {
    "text": "Community uh and landed on my lap so stranger whoever you are out there thank you uh that was great and this was",
    "start": "1649520",
    "end": "1656360"
  },
  {
    "text": "awesome because I had a copy of this binary before anyone else which was like sweet and he also told me that I",
    "start": "1656360",
    "end": "1661399"
  },
  {
    "text": "couldn't share it so I was like sorry um but you know it was eventually also uploaded to virus total and so that we",
    "start": "1661399",
    "end": "1666799"
  },
  {
    "text": "could all analyze it uh together again the first thing I wanted to ascertain its file type using the file command it",
    "start": "1666799",
    "end": "1673840"
  },
  {
    "text": "also was a 64-bit Macho binary also add Haw signed interesting kind of matches",
    "start": "1673840",
    "end": "1679880"
  },
  {
    "text": "the approach that the attackers used on the build server again we pull embedded strings we",
    "start": "1679880",
    "end": "1686159"
  },
  {
    "text": "can see what appears to be a config file and also perhaps the address of the command and control server and unlike",
    "start": "1686159",
    "end": "1691799"
  },
  {
    "text": "the malicious library in the trojanized installer this one didn't appear to obvious skate any of its strings so this",
    "start": "1691799",
    "end": "1698200"
  },
  {
    "text": "is nice we don't have to figure out how to decrypt the strings it just makes our job that much easier now I mentioned the first thing",
    "start": "1698200",
    "end": "1705000"
  },
  {
    "text": "this this malare does is self delete this is actually for self-defense I have a quote on the slide from one of the ER",
    "start": "1705000",
    "end": "1711600"
  },
  {
    "text": "EDR companies that basically said as I mentioned hey we could see that this was executed and we have it hash but the",
    "start": "1711600",
    "end": "1718080"
  },
  {
    "text": "binary is gone so we don't collect it um and if we run a file Monitor and execute",
    "start": "1718080",
    "end": "1723880"
  },
  {
    "text": "the Mau we can actually observe this specifically the file monitor uh logs",
    "start": "1723880",
    "end": "1728919"
  },
  {
    "text": "and unlink event and if we look at the path of the responsible process we can",
    "start": "1728919",
    "end": "1734519"
  },
  {
    "text": "see that matches the file that's being deleted so this is is the process deleting itself or self deletion and if",
    "start": "1734519",
    "end": "1741120"
  },
  {
    "text": "we look at the disassembly the decompilation from the malware we can see that after it Forks itself the first",
    "start": "1741120",
    "end": "1746559"
  },
  {
    "text": "thing the child does is is self- delete so again this is going to remove it from the file system uh and again malare authors do this to complicate detection",
    "start": "1746559",
    "end": "1754399"
  },
  {
    "text": "and uh recovery but as we'll see this is a very powerful detection curis stic now the next thing this second",
    "start": "1754399",
    "end": "1761679"
  },
  {
    "text": "stage payload does is it reads 3 cxs config.js file and this is to extract",
    "start": "1761679",
    "end": "1767640"
  },
  {
    "text": "provisioning file information and the account name basically this XML file has",
    "start": "1767640",
    "end": "1773360"
  },
  {
    "text": "a ton of information incl including a remote URL that has all the information about the victim so they basically grab",
    "start": "1773360",
    "end": "1780240"
  },
  {
    "text": "that it's kind of a unique and randomized URL so if you don't know the URL you can't read it but once you have",
    "start": "1780240",
    "end": "1785279"
  },
  {
    "text": "the URL it's like open to to anybody so they grab that and send that out to the command and control server again using a",
    "start": "1785279",
    "end": "1792240"
  },
  {
    "text": "file monitor so we can see we use file monitors a lot they're very powerful passive tool to let us obser observe",
    "start": "1792240",
    "end": "1797679"
  },
  {
    "text": "what files the malware is touching uh we can see it opens uh 3 cxs config.js file",
    "start": "1797679",
    "end": "1804159"
  },
  {
    "text": "again this is a legitimate file of 3cx that has a ton of information about that",
    "start": "1804159",
    "end": "1810240"
  },
  {
    "text": "as I mentioned it then transmits this information to the command control server via a function aptly named send",
    "start": "1810240",
    "end": "1816320"
  },
  {
    "text": "post we can see the command and control server that was embedded hardcoded as a string and then we can see the uh info",
    "start": "1816320",
    "end": "1824880"
  },
  {
    "text": "from the config file it encrypts that and send SS it out now if we look at the",
    "start": "1824880",
    "end": "1830519"
  },
  {
    "text": "disassembly the decompilation of the malware we can see that after it sends it to the command and control",
    "start": "1830519",
    "end": "1837240"
  },
  {
    "text": "server no matter what response it gets from the server it just exits so I was",
    "start": "1837240",
    "end": "1842640"
  },
  {
    "text": "like okay that's not super exciting so why right I expected it to",
    "start": "1842640",
    "end": "1848679"
  },
  {
    "text": "like I don't know do something awesome so I was a little disappointed well two thoughts and I think equally both of",
    "start": "1848679",
    "end": "1854880"
  },
  {
    "text": "these could uh equally be applicable first is I I mentioned in a supply CH supply chain attack the benefit to the",
    "start": "1854880",
    "end": "1860919"
  },
  {
    "text": "attacker is they hit one company for example 3cx and then they infect everyone so if I'm 3cx and I'm hacked",
    "start": "1860919",
    "end": "1866880"
  },
  {
    "text": "and y'all are its users I've just you know if hackers hack me I've just infected you all like so it's very",
    "start": "1866880",
    "end": "1872919"
  },
  {
    "text": "efficient very powerful the reality is though the attackers probably don't care about all of you sorry you're still",
    "start": "1872919",
    "end": "1879799"
  },
  {
    "text": "special to me but maybe not to the attackers so this means the attackers might be looking for Devon from kanji",
    "start": "1879799",
    "end": "1886760"
  },
  {
    "text": "right but everyone else they don't really care about it and the way they're going to get to Devon from kanji is by",
    "start": "1886760",
    "end": "1892399"
  },
  {
    "text": "hacking me because deon's at this thing so what they're going to do is they're going to survey as we saw and for",
    "start": "1892399",
    "end": "1897480"
  },
  {
    "text": "everyone else you're going to get a very vanilla payload maybe the copy of the update agent we saw but Devon might get",
    "start": "1897480",
    "end": "1903240"
  },
  {
    "text": "the special one right because he's special the problem is as maare analysts if we don't get the special payload we",
    "start": "1903240",
    "end": "1909440"
  },
  {
    "text": "don't know what it is so since it's self-d deleading it's very difficult to recover so it's likely the instance we",
    "start": "1909440",
    "end": "1915799"
  },
  {
    "text": "recovered was the vanilla one that was kind of given to uh random users the",
    "start": "1915799",
    "end": "1921240"
  },
  {
    "text": "other thought could be and this is also still with the first thought is that uh remember that this payload would send",
    "start": "1921240",
    "end": "1928159"
  },
  {
    "text": "tons of information from the config.js file so the attackers perhaps the next",
    "start": "1928159",
    "end": "1933639"
  },
  {
    "text": "time 3cx is run could provide another payload right every time 3cx is run it",
    "start": "1933639",
    "end": "1939960"
  },
  {
    "text": "reaches out and downloads and executes update agent the attackers at any point could change it up to something more",
    "start": "1939960",
    "end": "1945519"
  },
  {
    "text": "interesting a fully featured persistent back door etc etc and this kind of leads into the second stage or second idea",
    "start": "1945519",
    "end": "1953080"
  },
  {
    "text": "which was perhaps we detect the attack early enough and there's some great quotes from Jags who has studied a lot",
    "start": "1953080",
    "end": "1959720"
  },
  {
    "text": "of supply chain attacks and he kind of articulates what I've been saying very well as again attackers infect a myriad",
    "start": "1959720",
    "end": "1966159"
  },
  {
    "text": "of users it takes some time to pour through those to say okay are these individuals we interested in especially",
    "start": "1966159",
    "end": "1972600"
  },
  {
    "text": "if you think again these attackers are the North Koreans they're either looking for specific individuals or companies the they really often go after a lot of",
    "start": "1972600",
    "end": "1979399"
  },
  {
    "text": "um cryptocurrency and so maybe the average 3cx user is not interesting to them but that takes time to kind of go",
    "start": "1979399",
    "end": "1986399"
  },
  {
    "text": "through that and so maybe we detected this tack earlier early enough so that",
    "start": "1986399",
    "end": "1991440"
  },
  {
    "text": "the copy of this second stage payload we got was not the ultimate end goal so I",
    "start": "1991440",
    "end": "1996480"
  },
  {
    "text": "think these are some reasonable thoughts why that update agent binary um you know doesn't do anything super exciting now I",
    "start": "1996480",
    "end": "2004559"
  },
  {
    "text": "want to talk a little bit about detection uh because one of the most problematic things about supply chain",
    "start": "2004559",
    "end": "2010080"
  },
  {
    "text": "attacks is how impactful they are and it's the the statistics we saw from crowdstrike almost half of organizations",
    "start": "2010080",
    "end": "2016639"
  },
  {
    "text": "are impacted by them so I want to talk about what doesn't work before talking about what does work because I think",
    "start": "2016639",
    "end": "2022000"
  },
  {
    "text": "that's equally important first off the sad reality is you will not be able to prevent supply chain attacks and that's",
    "start": "2022000",
    "end": "2028320"
  },
  {
    "text": "simply because as crowd strike says most of the software you run on your system has hundreds of dependencies so it's",
    "start": "2028320",
    "end": "2035519"
  },
  {
    "text": "pulling different libraries uh it's you know at some point you're downloading a software from another system and there's",
    "start": "2035519",
    "end": "2042639"
  },
  {
    "text": "nothing you can do to secure that system so it's kind of like this sucks but I I think this is a a mindset to have",
    "start": "2042639",
    "end": "2049240"
  },
  {
    "text": "because then what we can do is we can talk about what we we we can do you might say okay well I'm going to stick",
    "start": "2049240",
    "end": "2054560"
  },
  {
    "text": "to open source software I'm only going to compile things from Source uh so you know even if uh the binaries are",
    "start": "2054560",
    "end": "2060358"
  },
  {
    "text": "compromised it it doesn't matter well good luck on Mac OS it's actually very",
    "start": "2060359",
    "end": "2066240"
  },
  {
    "text": "difficult to compile open source software and I know because I write open source software uh this is a tweet I put",
    "start": "2066240",
    "end": "2072440"
  },
  {
    "text": "out a while ago but this actually is true uh so for example one of my uh most",
    "start": "2072440",
    "end": "2078358"
  },
  {
    "text": "popular Open Source Products is called Lulu it's a firewall for Mac OS it's fully open source good luck compiling",
    "start": "2078359",
    "end": "2084320"
  },
  {
    "text": "and running it because you need certain entitlements from Apple that Apple has given uh the OBC Foundation me that they",
    "start": "2084320",
    "end": "2091040"
  },
  {
    "text": "will not likely give to you unless you bag sacrifice an animal something very hard to get these entitlements so while",
    "start": "2091040",
    "end": "2097680"
  },
  {
    "text": "you can look at the source to actually build it and running it on Mac OS is incredibly difficult because of um well",
    "start": "2097680",
    "end": "2105440"
  },
  {
    "text": "let's just say apple so that's going to be tough also the North Koreans kind of know this and they're kind of sneaky so",
    "start": "2105440",
    "end": "2112359"
  },
  {
    "text": "some of their attacks provide source code but also pre-built binaries and the pre-built binaries is where the malware",
    "start": "2112359",
    "end": "2118000"
  },
  {
    "text": "has been ctitious um added so I don't think that saying oh we're only going to",
    "start": "2118000",
    "end": "2123880"
  },
  {
    "text": "compile stuff from open source to prevent supply chain attacks is a scalable and reasonable solution also you should not count on",
    "start": "2123880",
    "end": "2132440"
  },
  {
    "text": "Apple's security as I mentioned they notorized 3x's payload this actually really bothered me because when Apple",
    "start": "2132440",
    "end": "2138480"
  },
  {
    "text": "talked about notorized from you before we can run",
    "start": "2138480",
    "end": "2144320"
  },
  {
    "text": "anything on Mac OS they're like yeah and I was like okay that seems kind of strict and I don't like that you're the",
    "start": "2144320",
    "end": "2150560"
  },
  {
    "text": "gatekeeper but okay I can see from a security point of view maybe this is great because and I literally thought",
    "start": "2150560",
    "end": "2155640"
  },
  {
    "text": "about this scenario in my head when notorized okay if there's a supply chain attack this will stop it because yes the",
    "start": "2155640",
    "end": "2161920"
  },
  {
    "text": "adversaries will be able to get into say 3cx servers but as soon as they trojanized that installer they still",
    "start": "2161920",
    "end": "2168720"
  },
  {
    "text": "have to get it notorized and apple should detect it at that point I mean Apple's this you know trillion dollar",
    "start": "2168720",
    "end": "2174359"
  },
  {
    "text": "company and is designed noorizadeh",
    "start": "2174359",
    "end": "2178519"
  },
  {
    "text": "now another interesting approach is well what if we diff software and there was a great blog post from reversing lab",
    "start": "2188079",
    "end": "2194079"
  },
  {
    "text": "saying that okay in hindsight if you diff uh you know version one of 3 cxs",
    "start": "2194079",
    "end": "2199760"
  },
  {
    "text": "application and version two simplifying that but the trojanized version there's a lot of kind of strange things that",
    "start": "2199760",
    "end": "2205520"
  },
  {
    "text": "have changed and we can do that manually and we can see for example in the version version that was trogen that",
    "start": "2205520",
    "end": "2212760"
  },
  {
    "text": "this lib FFM Peg has this new Constructor that's odd this is interesting but I don't think",
    "start": "2212760",
    "end": "2218599"
  },
  {
    "text": "again it's really going to scale again the 3cx application was over 400 Megs had over a 100 files and the only",
    "start": "2218599",
    "end": "2224800"
  },
  {
    "text": "difference is the insertion of this Constructor in one Library that's tough also who's going to do the diffing like",
    "start": "2224800",
    "end": "2230680"
  },
  {
    "text": "are you going to diff every piece of software before you install it so I think interesting and maybe something to look into um and maybe something",
    "start": "2230680",
    "end": "2237040"
  },
  {
    "text": "security companies could do um but and users in the Enterprise I don't know so",
    "start": "2237040",
    "end": "2242760"
  },
  {
    "text": "what does work well a few ideas we can look for Network anomalies untrust processes and unusual",
    "start": "2242760",
    "end": "2249319"
  },
  {
    "text": "behavior first off one of the main reasons 3cx the attack was detected in the first place was via suspicious",
    "start": "2249319",
    "end": "2256000"
  },
  {
    "text": "Network traffic normally the 3cx application should only be talking to 3cx servers not some random command",
    "start": "2256000",
    "end": "2262480"
  },
  {
    "text": "control server in North Korea or some other foreign country so what we can do is if we're monitoring Network traffic",
    "start": "2262480",
    "end": "2269040"
  },
  {
    "text": "and I created a DNS monitor that is able to do this another open source product uh we can see that it is able to detect",
    "start": "2269040",
    "end": "2275760"
  },
  {
    "text": "that 3cx is talking to uh an untrusted domain so Network detection I think an",
    "start": "2275760",
    "end": "2281079"
  },
  {
    "text": "area where supply chain attacks uh can be thwarted and as we can see on the slide this is as I mentioned one of the",
    "start": "2281079",
    "end": "2286839"
  },
  {
    "text": "ways that a user not noticed something was a Miss we can also look and block perhaps",
    "start": "2286839",
    "end": "2294400"
  },
  {
    "text": "non- notorized applications so yes the installer was notorized but the binary on the build server was not and neither",
    "start": "2294400",
    "end": "2301800"
  },
  {
    "text": "was the third or the second stage uh payload so I have some code here I'm not going to walk through it all there's a",
    "start": "2301800",
    "end": "2308119"
  },
  {
    "text": "great blog post I wrote but the idea is we can use the endpoint security framework to get a call back anytime a",
    "start": "2308119",
    "end": "2313920"
  },
  {
    "text": "new process is executed and what we can then do is we can check the",
    "start": "2313920",
    "end": "2319760"
  },
  {
    "text": "characteristics of that process and ask the questions such as do you belong to Mac OS if not are you notorized all",
    "start": "2319760",
    "end": "2328040"
  },
  {
    "text": "legitimate thirdparty software should be notorized the majority of Mac maare is not as we saw in this case one piece was",
    "start": "2328040",
    "end": "2335720"
  },
  {
    "text": "two others were we're not so what we can do then is we can block that binary if it's not notorized to say okay hey this",
    "start": "2335720",
    "end": "2341319"
  },
  {
    "text": "is suspicious it should be notorized and take a closer look block block is an example of utility where this code is",
    "start": "2341319",
    "end": "2347560"
  },
  {
    "text": "implemented so you can take a look if you're interested on the implementation of that now the last thing you can do is",
    "start": "2347560",
    "end": "2353880"
  },
  {
    "text": "you can also look for anomalous behaviors binary shouldn't normally self- delete so as we talked about the",
    "start": "2353880",
    "end": "2359599"
  },
  {
    "text": "second stage payload that's the first thing that it did so if you're running a security tool and all of a sudden a",
    "start": "2359599",
    "end": "2364760"
  },
  {
    "text": "process self deletes like that is is a red flag and self- deltion is actually very easy to detect you basically just",
    "start": "2364760",
    "end": "2370760"
  },
  {
    "text": "look for a process that's deleting itself we can see on the slide the file monitor can pick that up very",
    "start": "2370760",
    "end": "2377280"
  },
  {
    "text": "easily all right let's jam through some conclusions and takeaway because I'm almost out of time first takeaway supply",
    "start": "2377280",
    "end": "2384880"
  },
  {
    "text": "chain attacks are increasing a prevalence complexity and impa impact even on Mac OS but I think by studying",
    "start": "2384880",
    "end": "2392599"
  },
  {
    "text": "the components we can gain an in-depth understanding of the attackers approaches and also their components",
    "start": "2392599",
    "end": "2399200"
  },
  {
    "text": "that then can allow us to generate or build behavior-based teristics that I",
    "start": "2399200",
    "end": "2404880"
  },
  {
    "text": "believe offer the best if not only way to detect these attacks now if you're interested in learning more I've written",
    "start": "2404880",
    "end": "2410839"
  },
  {
    "text": "a book on the topic of analyzing Mac Mau I'm also going to be doing a book signing at 12:15 at the bookstore so you",
    "start": "2410839",
    "end": "2416000"
  },
  {
    "text": "can buy the book get my signature we can chat more about that and I'm actually writing a second book that goes into how",
    "start": "2416000",
    "end": "2422160"
  },
  {
    "text": "to programmatically detect it so some of the detection heris I talked about writing a book on how to do that I",
    "start": "2422160",
    "end": "2429720"
  },
  {
    "text": "briefly want to mention The Objective C Foundation before I wrap this up they are the ones that support my research my",
    "start": "2429720",
    "end": "2435240"
  },
  {
    "text": "work uh you can check out our website I think we're doing some really cool things we're organizing the objective by",
    "start": "2435240",
    "end": "2440599"
  },
  {
    "text": "to C security conference uh we have some college scholarships and we",
    "start": "2440599",
    "end": "2445800"
  },
  {
    "text": "also have some great diversity efforts briefly also want to mention our current",
    "start": "2445800",
    "end": "2451040"
  },
  {
    "text": "efforts uh I live in Maui uh it's where the foundation is from and Maui you might have seen has been devastated by",
    "start": "2451040",
    "end": "2457599"
  },
  {
    "text": "um promise going to cry on stage uh Wildfire so we're raising money for",
    "start": "2457599",
    "end": "2463240"
  },
  {
    "text": "people who uh lost uh everything including a lot of my friends and neighbors whose houses were burned and",
    "start": "2463240",
    "end": "2468920"
  },
  {
    "text": "uh everything so you can go to objective c.org and if you uh want to help support that we would be uh very uh grateful",
    "start": "2468920",
    "end": "2476640"
  },
  {
    "text": "speaking of thank you I want to end by thanking the amazing companies who uh support the foundation without their",
    "start": "2476640",
    "end": "2482920"
  },
  {
    "text": "support we would not be able to organize the conference uh publish these books the free tools and give these these",
    "start": "2482920",
    "end": "2488520"
  },
  {
    "text": "conference talks so uh I just really want to take a moment to to thank them and also thank all of you for attending",
    "start": "2488520",
    "end": "2493880"
  },
  {
    "text": "this talk uh like I said I'll be at the the book signing if you want to chat more I think we are out of time I will",
    "start": "2493880",
    "end": "2499599"
  },
  {
    "text": "be here by the stage if there's any questions if you want to come chat um and then if we get kicked out I'll see you at the book signing so again thank",
    "start": "2499599",
    "end": "2505359"
  },
  {
    "text": "you so much really appreciate your your time and effort and your",
    "start": "2505359",
    "end": "2510559"
  },
  {
    "text": "attendance",
    "start": "2512880",
    "end": "2515880"
  }
]