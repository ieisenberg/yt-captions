[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "[Music]",
    "start": "3820",
    "end": "14249"
  },
  {
    "text": "hello my name is yutan from zoro national university and today i will present our talk",
    "start": "15519",
    "end": "23519"
  },
  {
    "text": "exploiting conal laces through taming spreading the living and this is the joint work with",
    "start": "23519",
    "end": "30080"
  },
  {
    "text": "processor branyon lee and professor tango min",
    "start": "30080",
    "end": "35520"
  },
  {
    "text": "we've present our talk in lovely three steps first we briefly introduced the lace",
    "start": "36559",
    "end": "43840"
  },
  {
    "text": "condition as a background and then we classify the lace conditions into several types of",
    "start": "43840",
    "end": "52239"
  },
  {
    "text": "several types to explain which type of lace condition is unexploitable finally",
    "start": "52239",
    "end": "60320"
  },
  {
    "text": "we present our new method to transform such a lace condition exploitable",
    "start": "60320",
    "end": "67438"
  },
  {
    "start": "67000",
    "end": "67000"
  },
  {
    "text": "let's start with the less condition the lace condition is the kind of bug",
    "start": "67680",
    "end": "74080"
  },
  {
    "text": "that is persisted since the early days of multi-strength in development",
    "start": "74080",
    "end": "79920"
  },
  {
    "text": "but only recently getting increasing attention the",
    "start": "79920",
    "end": "86640"
  },
  {
    "text": "security community",
    "start": "86640",
    "end": "89840"
  },
  {
    "text": "taking some representative examples rather was developed by academia in 2019",
    "start": "92720",
    "end": "102079"
  },
  {
    "text": "and found more than 30 lace books and in the same year google developed",
    "start": "102079",
    "end": "108240"
  },
  {
    "text": "their own color concurrency sanitizer and found more than 300 lace books",
    "start": "108240",
    "end": "115600"
  },
  {
    "text": "as a dessert unlike other types of books the number of lace conditioned bugs",
    "start": "115600",
    "end": "122320"
  },
  {
    "text": "found by the seed colors slowly",
    "start": "122320",
    "end": "127840"
  },
  {
    "text": "2019 maintaining its upward trend",
    "start": "127840",
    "end": "133440"
  },
  {
    "text": "so what is the lace condition basically lace condition occur when",
    "start": "134720",
    "end": "142800"
  },
  {
    "text": "multiple processes access the same memory location and it results in a different memory",
    "start": "142800",
    "end": "150319"
  },
  {
    "text": "state depending on the access order for example suppose two instruction a",
    "start": "150319",
    "end": "157440"
  },
  {
    "text": "and b are executed by chord one and two respectively and each of them",
    "start": "157440",
    "end": "164319"
  },
  {
    "text": "leads and write the same memory location in this setting we can think of two",
    "start": "164319",
    "end": "172239"
  },
  {
    "text": "execution scenarios one that the instruction a is executed before the",
    "start": "172239",
    "end": "179200"
  },
  {
    "text": "instruction b and the other is vice versa",
    "start": "179200",
    "end": "185440"
  },
  {
    "text": "if the former scenario produced the leaders x while the letter scenario produced the",
    "start": "185440",
    "end": "192879"
  },
  {
    "text": "leisure y we call this kind of situations the less condition",
    "start": "192879",
    "end": "199840"
  },
  {
    "text": "the lizard can be the value stored in the memory or the value led by lead instruction",
    "start": "200239",
    "end": "209840"
  },
  {
    "start": "209000",
    "end": "209000"
  },
  {
    "text": "but all lace conditions are not necessarily the vulnerabilities in fact",
    "start": "210159",
    "end": "217040"
  },
  {
    "text": "such a situation casually happens in most of producer consumers threading patterns",
    "start": "217040",
    "end": "225280"
  },
  {
    "text": "a lace condition is regarded as a vulnerability when it hurts all the contour flow or",
    "start": "225280",
    "end": "231920"
  },
  {
    "text": "the data flow and eventually literate in the memory correction",
    "start": "231920",
    "end": "237599"
  },
  {
    "text": "at this time the lace condition consists of two or more pairs of lace instruction",
    "start": "237599",
    "end": "245439"
  },
  {
    "start": "249000",
    "end": "249000"
  },
  {
    "text": "when it comes to the vulnerabilities they do not occur when the inverted lace",
    "start": "249200",
    "end": "255200"
  },
  {
    "text": "instructions are merely executed but only when they are executed in a specific",
    "start": "255200",
    "end": "261680"
  },
  {
    "text": "order the problem is that we cannot always",
    "start": "261680",
    "end": "266800"
  },
  {
    "text": "enforce such a desired order as the multiple threads are scheduled in",
    "start": "266800",
    "end": "273360"
  },
  {
    "text": "a non-deterministic fashion in this sense executing them in",
    "start": "273360",
    "end": "279680"
  },
  {
    "text": "specific order is pure luck just like hitting the jackpot in the slot",
    "start": "279680",
    "end": "286880"
  },
  {
    "text": "motion game the good news is that computer programs never demand us to",
    "start": "286880",
    "end": "293520"
  },
  {
    "text": "insert the coins to keep executing it so we can try brute",
    "start": "293520",
    "end": "298720"
  },
  {
    "text": "forcing it until we get the desired effect",
    "start": "298720",
    "end": "304000"
  },
  {
    "start": "303000",
    "end": "303000"
  },
  {
    "text": "this boils down to the question that whether such a desired order can",
    "start": "304639",
    "end": "311360"
  },
  {
    "text": "even happen eventually specifically even if a lace condition literature in",
    "start": "311360",
    "end": "318639"
  },
  {
    "text": "memory correction they cost address breaks or rap controlling it cannot be exploitable",
    "start": "318639",
    "end": "326080"
  },
  {
    "text": "even if if we cannot enforce such a problematic execution order",
    "start": "326080",
    "end": "334880"
  },
  {
    "text": "one may think that this is not an important issue because first protein",
    "start": "334880",
    "end": "341440"
  },
  {
    "text": "will somehow trigger the instructions in the desired order but we will show that some late in",
    "start": "341440",
    "end": "348800"
  },
  {
    "text": "lace conditions have the execution order that cannot be triggered by",
    "start": "348800",
    "end": "354080"
  },
  {
    "text": "first person now let's look at the types of less",
    "start": "354080",
    "end": "359840"
  },
  {
    "start": "357000",
    "end": "357000"
  },
  {
    "text": "condition vulnerabilities and their exploitability",
    "start": "359840",
    "end": "365199"
  },
  {
    "text": "we first classified the latest conditions by the number of variables that are inverted in",
    "start": "365199",
    "end": "372639"
  },
  {
    "text": "namely if a last instruction pair access a single variable or",
    "start": "372639",
    "end": "379280"
  },
  {
    "text": "variable the single variable lace condition is",
    "start": "379280",
    "end": "385360"
  },
  {
    "start": "382000",
    "end": "382000"
  },
  {
    "text": "the most basic type of lace condition vulnerability where every lace instruction pair",
    "start": "385360",
    "end": "393039"
  },
  {
    "text": "centers around a single variable for example the speaker shows two lace",
    "start": "393039",
    "end": "400319"
  },
  {
    "text": "instructions between the instruction a and b and the instruction b and c and they both interact with",
    "start": "400319",
    "end": "408800"
  },
  {
    "text": "each other by a single variable this type of lace condition",
    "start": "408800",
    "end": "416000"
  },
  {
    "text": "vulnerability occurs when the instruction a b and c are executed in",
    "start": "416000",
    "end": "422080"
  },
  {
    "text": "order specifically the instruction b should be executed",
    "start": "422080",
    "end": "428720"
  },
  {
    "text": "after the instruction a and before the instruction c and we refer the time",
    "start": "428720",
    "end": "436000"
  },
  {
    "text": "between them to the time window or lace window the figure on the right",
    "start": "436000",
    "end": "443599"
  },
  {
    "text": "describe a single variable less condition vulnerability found in the linux kernel",
    "start": "443599",
    "end": "452560"
  },
  {
    "text": "this vulnerability consists of two pairs of laser instructions and both are accessing the same header",
    "start": "452639",
    "end": "460479"
  },
  {
    "text": "inclusion variable to see how this lace condition measures in",
    "start": "460479",
    "end": "466400"
  },
  {
    "text": "memory encryption suppose the header inclusion variable is 1",
    "start": "466400",
    "end": "471919"
  },
  {
    "text": "when the instruction a is executed you can see that this leaves the",
    "start": "471919",
    "end": "478479"
  },
  {
    "text": "variable called rfb uninitialized now if the",
    "start": "478479",
    "end": "485360"
  },
  {
    "text": "instruction b is executed and write zero to the header inclusion",
    "start": "485360",
    "end": "493039"
  },
  {
    "text": "variable the include the instruction c will then lead",
    "start": "493039",
    "end": "498160"
  },
  {
    "text": "zero from the header including variable",
    "start": "498160",
    "end": "503680"
  },
  {
    "text": "which literature in the memory copy function calls with the uninitialized rfp",
    "start": "504560",
    "end": "511199"
  },
  {
    "text": "variable in this type the less condition is more",
    "start": "511199",
    "end": "517360"
  },
  {
    "start": "514000",
    "end": "514000"
  },
  {
    "text": "likely to occur as the time window between the instruction a and c is larger and it is less",
    "start": "517360",
    "end": "525120"
  },
  {
    "text": "likely if the time window is thin",
    "start": "525120",
    "end": "530000"
  },
  {
    "text": "however because there is an old that such an execution order happens no",
    "start": "530320",
    "end": "536560"
  },
  {
    "text": "matter how unlikely it is bruce person would eventually trigger the less condition",
    "start": "536560",
    "end": "543440"
  },
  {
    "text": "allowing us to exploit the vulnerability",
    "start": "543440",
    "end": "549360"
  },
  {
    "start": "548000",
    "end": "548000"
  },
  {
    "text": "the other type of lace condition is multivariable lace condition and it is",
    "start": "549360",
    "end": "556000"
  },
  {
    "text": "more common in real world than the single variable lace condition",
    "start": "556000",
    "end": "562080"
  },
  {
    "text": "multivariable lace condition may also consist of multiple pairs or last instructions",
    "start": "562080",
    "end": "569200"
  },
  {
    "text": "but at this time each pair access the different variables",
    "start": "569200",
    "end": "576560"
  },
  {
    "text": "for example the figure shows two lace instruction pairs between",
    "start": "576560",
    "end": "582640"
  },
  {
    "text": "instruction a and b and the instruction c and d while the",
    "start": "582640",
    "end": "588399"
  },
  {
    "text": "instruction a and b access the memory 1 and the instruction c and d access the",
    "start": "588399",
    "end": "595760"
  },
  {
    "text": "memory 2. in this type the memory correction occurs when",
    "start": "595760",
    "end": "601440"
  },
  {
    "text": "the instruction b and c are executed after the instruction a and before the",
    "start": "601440",
    "end": "608480"
  },
  {
    "text": "instruction d we have already seen that the time",
    "start": "608480",
    "end": "613680"
  },
  {
    "text": "window between the instruction a and d that is supposed to contain the",
    "start": "613680",
    "end": "619200"
  },
  {
    "text": "the other instructions in core two but since there are two instructions in",
    "start": "619200",
    "end": "625120"
  },
  {
    "text": "core two the instructions in it has its own time tier time window",
    "start": "625120",
    "end": "633200"
  },
  {
    "text": "let's call each time window x and y respectively we noted that when explaining a",
    "start": "633200",
    "end": "641440"
  },
  {
    "text": "multivariate release condition the relationship between these two time window is very important",
    "start": "641440",
    "end": "650320"
  },
  {
    "text": "so let's further classify the multivariable lace conditions into the inclusive one and",
    "start": "650880",
    "end": "659360"
  },
  {
    "text": "non-inclusive one according to whether the time window x contains the time and the y",
    "start": "659360",
    "end": "667120"
  },
  {
    "text": "if the time window x contains the time window y it is classified as a",
    "start": "667200",
    "end": "676079"
  },
  {
    "text": "inclusive merge variable lace condition on the other hand if the timing of x does not contain the",
    "start": "676079",
    "end": "684240"
  },
  {
    "text": "time in the y it is classified as a non-inclusive multivariable lace",
    "start": "684240",
    "end": "690320"
  },
  {
    "text": "condition similar to the single variable race",
    "start": "690320",
    "end": "696240"
  },
  {
    "start": "693000",
    "end": "693000"
  },
  {
    "text": "condition the likelihood of triggering the inclusive emergency variable not",
    "start": "696240",
    "end": "702880"
  },
  {
    "text": "less available is less likely to occur however like a single variable less",
    "start": "715120",
    "end": "721839"
  },
  {
    "text": "condition bruce person will eventually manage to trigger the less condition because",
    "start": "721839",
    "end": "729519"
  },
  {
    "text": "there is an oath no matter how thin it is",
    "start": "729519",
    "end": "734959"
  },
  {
    "start": "735000",
    "end": "735000"
  },
  {
    "text": "however this is not the case in the non-inclusive lace condition the",
    "start": "735600",
    "end": "741360"
  },
  {
    "text": "examples show some non-inclusive multivariable lace condition found in the linux kernel",
    "start": "741360",
    "end": "748240"
  },
  {
    "text": "basically the color uses uninitialized memory if only the instruction b and c in",
    "start": "748240",
    "end": "755920"
  },
  {
    "text": "core 2 is executed between the instruction a and d in core 1.",
    "start": "755920",
    "end": "762639"
  },
  {
    "text": "however notice that the instruction a and d locate back to back with each",
    "start": "762639",
    "end": "768480"
  },
  {
    "text": "other without any branches which suggests that the time window between them is very",
    "start": "768480",
    "end": "775839"
  },
  {
    "text": "thin 18 cycles to be specific on the other hand there is a huge time",
    "start": "775839",
    "end": "783040"
  },
  {
    "text": "margin of 2250 cycles between the instruction b and c the instruction d will always be",
    "start": "783040",
    "end": "791279"
  },
  {
    "text": "executed before the instruction c",
    "start": "791279",
    "end": "795839"
  },
  {
    "text": "in other words it is simply impossible to trigger this vulnerability by",
    "start": "797200",
    "end": "802560"
  },
  {
    "text": "reversing it unless core one stops the execution between the instruction a and",
    "start": "802560",
    "end": "809120"
  },
  {
    "text": "d and extend the timing though",
    "start": "809120",
    "end": "815839"
  },
  {
    "text": "since this kind of vulnerability cannot be triggered by normal brute forcing",
    "start": "816399",
    "end": "823120"
  },
  {
    "text": "it's been difficult to find it through farting in fact this kind of",
    "start": "823120",
    "end": "829279"
  },
  {
    "text": "vulnerability has begun to be discovered only after furthers",
    "start": "829279",
    "end": "834480"
  },
  {
    "text": "integrate the mechanism that arbitrarily stops the coronary execution it is",
    "start": "834480",
    "end": "842720"
  },
  {
    "text": "still impossible to trigger this type of vulnerability in real world",
    "start": "842720",
    "end": "848320"
  },
  {
    "text": "because the attacker can not cannot control the execution of",
    "start": "848320",
    "end": "855199"
  },
  {
    "text": "kernel when exploiting it therefore most of these vulnerabilities",
    "start": "855199",
    "end": "861360"
  },
  {
    "text": "are way to exploit",
    "start": "861360",
    "end": "866240"
  },
  {
    "start": "866000",
    "end": "866000"
  },
  {
    "text": "however there are there are there are a handful of methods to",
    "start": "867360",
    "end": "873920"
  },
  {
    "text": "reserve this problem under certain circumstance the first method",
    "start": "873920",
    "end": "880639"
  },
  {
    "text": "is using the difference core latency there are cpus that have cores with",
    "start": "880639",
    "end": "887600"
  },
  {
    "text": "different frequencies such as kirkham snapdragon 845",
    "start": "887600",
    "end": "894800"
  },
  {
    "text": "it has two sets of cores and it shows that each set contains",
    "start": "894800",
    "end": "902079"
  },
  {
    "text": "four 2.5 gigahertz scores and four 1.6 gigahertz cores respectively",
    "start": "902079",
    "end": "911519"
  },
  {
    "text": "if you place the spread if this timing don't need to be extended on a slow core and place the other",
    "start": "911519",
    "end": "919440"
  },
  {
    "text": "thread on the fast core you can reduce the difference",
    "start": "919440",
    "end": "925199"
  },
  {
    "text": "between the time window and the instruction can be executed in order",
    "start": "925199",
    "end": "933199"
  },
  {
    "start": "932000",
    "end": "932000"
  },
  {
    "text": "however this method is only possible if the target systems use such as",
    "start": "934079",
    "end": "940880"
  },
  {
    "text": "cpu with different core frequencies also to the best of our knowledge since",
    "start": "940880",
    "end": "948240"
  },
  {
    "text": "there are no cpus with extremely different latency between cores if the",
    "start": "948240",
    "end": "955680"
  },
  {
    "text": "difference between the timing though is large it cannot apply cable",
    "start": "955680",
    "end": "962480"
  },
  {
    "start": "963000",
    "end": "963000"
  },
  {
    "text": "the second method is using the thread scheduler of the kernel",
    "start": "964240",
    "end": "971120"
  },
  {
    "text": "for example in the linux kernel where the config printer option is",
    "start": "971120",
    "end": "977279"
  },
  {
    "text": "enabled contact switching occurs even if it's operating",
    "start": "977279",
    "end": "982800"
  },
  {
    "text": "it is operating in this corner mode yan hong use this method",
    "start": "982800",
    "end": "989600"
  },
  {
    "text": "and demonstrate how one can extend the lace window specifically the scan set",
    "start": "989600",
    "end": "997600"
  },
  {
    "text": "affinity function in the kernel prints the thread in another core and",
    "start": "997600",
    "end": "1004079"
  },
  {
    "text": "inject a thread to it by injecting a thread between the time",
    "start": "1004079",
    "end": "1010160"
  },
  {
    "text": "window x one can postpone the execution of the instruction d which resulting in the",
    "start": "1010160",
    "end": "1017440"
  },
  {
    "text": "extended time window x to visually demonstrate how it works",
    "start": "1017440",
    "end": "1023680"
  },
  {
    "text": "suppose the instruction a is executed first then core",
    "start": "1023680",
    "end": "1030079"
  },
  {
    "text": "one receives the request to reschedule from core zero",
    "start": "1030079",
    "end": "1035600"
  },
  {
    "text": "upon receiving the request core one changed the status of current stress to",
    "start": "1035600",
    "end": "1042000"
  },
  {
    "text": "weight and then it performed context switching to the threat because the requested by quarter zero",
    "start": "1042000",
    "end": "1050240"
  },
  {
    "text": "meanwhile the instruction b and c are executed in core 2. by the time",
    "start": "1050240",
    "end": "1058160"
  },
  {
    "text": "the instruction b and c are executed in core 2 core 1 finished the thread",
    "start": "1058160",
    "end": "1064799"
  },
  {
    "text": "that core 0 only originally requested",
    "start": "1064799",
    "end": "1070080"
  },
  {
    "text": "is legion does threaten the weight q hence executing the instruction d",
    "start": "1070080",
    "end": "1077360"
  },
  {
    "start": "1078000",
    "end": "1078000"
  },
  {
    "text": "however this is only possible in columns with the config print option",
    "start": "1079039",
    "end": "1084880"
  },
  {
    "text": "enabled but the latest columns use the config print",
    "start": "1084880",
    "end": "1090240"
  },
  {
    "text": "voluntary option by deferred in other words this method does not work",
    "start": "1090240",
    "end": "1097760"
  },
  {
    "text": "for most of the linux systems",
    "start": "1097760",
    "end": "1102160"
  },
  {
    "start": "1102000",
    "end": "1102000"
  },
  {
    "text": "as you can see all previous methods have obvious limitations and are",
    "start": "1104000",
    "end": "1111280"
  },
  {
    "text": "hardly useful in general so what we need is a new method to extend",
    "start": "1111280",
    "end": "1118640"
  },
  {
    "text": "the time window that can be used in general settings",
    "start": "1118640",
    "end": "1124159"
  },
  {
    "start": "1123000",
    "end": "1123000"
  },
  {
    "text": "to designers to that to design social method we within think about how to extend the",
    "start": "1130320",
    "end": "1138559"
  },
  {
    "text": "time window it turns out that it",
    "start": "1138559",
    "end": "1143679"
  },
  {
    "text": "all boils down to stopping the core while it's hitting the instruction a and",
    "start": "1143679",
    "end": "1150080"
  },
  {
    "text": "d were degrading degrading the performance of the core",
    "start": "1150080",
    "end": "1156559"
  },
  {
    "text": "however the first method cannot be used because users cannot control the",
    "start": "1156559",
    "end": "1163600"
  },
  {
    "text": "operation of the hardware so we choose the second method namely",
    "start": "1163600",
    "end": "1170080"
  },
  {
    "text": "degrading the performance of the core",
    "start": "1170080",
    "end": "1174720"
  },
  {
    "text": "the key idea of explains is to keep lazing interrupts to",
    "start": "1176080",
    "end": "1182640"
  },
  {
    "text": "indirectly alter corner stress interleaving",
    "start": "1182640",
    "end": "1187679"
  },
  {
    "text": "we noted that the stress immediately immediately excuse the",
    "start": "1187679",
    "end": "1193919"
  },
  {
    "text": "intertender whenever it received an interrupt",
    "start": "1193919",
    "end": "1199039"
  },
  {
    "text": "this suggests that as the intertumbling happens to fall in to the time window",
    "start": "1199039",
    "end": "1206240"
  },
  {
    "text": "we are targeting the size of the time window will be extended while",
    "start": "1206240",
    "end": "1212080"
  },
  {
    "text": "handling it to demonstrate this idea we found",
    "start": "1212080",
    "end": "1218080"
  },
  {
    "text": "two types of interrupts that can affect the corner mode execution",
    "start": "1218080",
    "end": "1225039"
  },
  {
    "text": "interprocessor interrupt and hardware interrupt let's call them ipi and irq",
    "start": "1226159",
    "end": "1233200"
  },
  {
    "text": "insured however both both ipi and irq",
    "start": "1233200",
    "end": "1241919"
  },
  {
    "text": "cannot be directly sent from the user mode they are only used in the",
    "start": "1241919",
    "end": "1248960"
  },
  {
    "text": "color mode therefore esp lace attempts to indirectly send interrupts",
    "start": "1248960",
    "end": "1256799"
  },
  {
    "text": "using system calls that internally transmit ipi and irq",
    "start": "1256799",
    "end": "1263600"
  },
  {
    "text": "the system call that send on ipi and the system call that send a request",
    "start": "1263600",
    "end": "1270240"
  },
  {
    "text": "to the device which eventually stand on irq",
    "start": "1270240",
    "end": "1277120"
  },
  {
    "text": "so we found the system call that performs tlv shootdown internally",
    "start": "1277120",
    "end": "1283440"
  },
  {
    "text": "transmit ipi since each cpu core has",
    "start": "1283440",
    "end": "1288640"
  },
  {
    "text": "its own tlb all tlv entries across different cores should be",
    "start": "1288640",
    "end": "1295280"
  },
  {
    "text": "synchronized in multiprocessor systems tlp shutdown is a process to synchronize",
    "start": "1295280",
    "end": "1303280"
  },
  {
    "text": "synchronize the tlb of each core for example when",
    "start": "1303280",
    "end": "1310159"
  },
  {
    "text": "a mapping the address or modifying the permission of the others in one core",
    "start": "1310159",
    "end": "1317360"
  },
  {
    "text": "first the core flushes its own tlb and",
    "start": "1317360",
    "end": "1323840"
  },
  {
    "text": "find another course that may have the same address in the tlb",
    "start": "1323840",
    "end": "1330400"
  },
  {
    "text": "and send an ipi to flush them finally upon receiving the ipi",
    "start": "1330400",
    "end": "1338400"
  },
  {
    "text": "the core flushes the address through the ipi handler",
    "start": "1338400",
    "end": "1346480"
  },
  {
    "text": "to use tlv shutdown in extending the time window an additional process is required to",
    "start": "1346480",
    "end": "1354880"
  },
  {
    "text": "send ipi to the target core in this figure the process c is the one",
    "start": "1354880",
    "end": "1362799"
  },
  {
    "text": "sending ipi and the process a is the one that contains the time",
    "start": "1362799",
    "end": "1368960"
  },
  {
    "text": "window we want to extend the important thing here is that",
    "start": "1368960",
    "end": "1376640"
  },
  {
    "text": "the process a and c must have the same memory map and processes that",
    "start": "1376640",
    "end": "1383679"
  },
  {
    "text": "shouldn't receive ipi must have different memory maps",
    "start": "1383679",
    "end": "1388880"
  },
  {
    "text": "if three processes have the same memory map ipi is delivered to both core 1 and",
    "start": "1388880",
    "end": "1396320"
  },
  {
    "text": "2 at the same time which leader 10 extension extending both time windows",
    "start": "1396320",
    "end": "1404880"
  },
  {
    "text": "if the boost if the process a and c have the same memory map and the",
    "start": "1404880",
    "end": "1411360"
  },
  {
    "text": "process b has a different memory map ipi is only delivered to core one so",
    "start": "1411360",
    "end": "1419120"
  },
  {
    "text": "only the time window x will be extended",
    "start": "1419120",
    "end": "1424720"
  },
  {
    "text": "and the second method is hardware interrupt before sending interrupts we need",
    "start": "1427760",
    "end": "1434720"
  },
  {
    "text": "two steps the first step is checking the core affinity of each irq",
    "start": "1434720",
    "end": "1442000"
  },
  {
    "text": "the core affinity of irq can be checked through the file shown in the figure",
    "start": "1442000",
    "end": "1448559"
  },
  {
    "text": "this file has a lead permission for the non-privileged user so attacker can",
    "start": "1448559",
    "end": "1455760"
  },
  {
    "text": "find out the specific core",
    "start": "1455760",
    "end": "1459840"
  },
  {
    "text": "the second step is pinning the thread that has the timing needed to",
    "start": "1460880",
    "end": "1466000"
  },
  {
    "text": "be extended to that core if the process c calls the",
    "start": "1466000",
    "end": "1474240"
  },
  {
    "text": "system call descendant request to a device and irq is delivered in the middle of the time",
    "start": "1474240",
    "end": "1481760"
  },
  {
    "text": "window x the time window x is extended by",
    "start": "1481760",
    "end": "1487600"
  },
  {
    "text": "inter-service luton and we can execute the instructions in the desired order",
    "start": "1487600",
    "end": "1495520"
  },
  {
    "text": "now let's look at the efficiency of explains",
    "start": "1496559",
    "end": "1502000"
  },
  {
    "text": "we measure how many cycles are extended through esp lace as a result of measuring the",
    "start": "1502000",
    "end": "1510960"
  },
  {
    "text": "extended cycle due to the ipi the ipi extends from",
    "start": "1510960",
    "end": "1518320"
  },
  {
    "text": "1.5 000 to 20 000 cycles the reason for wide length is",
    "start": "1518320",
    "end": "1526960"
  },
  {
    "text": "that it can be it can only flush one tlb at a time when",
    "start": "1526960",
    "end": "1533600"
  },
  {
    "text": "a larger dress is flushed it takes longer because it is",
    "start": "1533600",
    "end": "1540000"
  },
  {
    "text": "flushed several times so the larger the amount of memory is",
    "start": "1540000",
    "end": "1546400"
  },
  {
    "text": "being flushed the longer the time window is extended",
    "start": "1546400",
    "end": "1552000"
  },
  {
    "text": "and hardware interrupts extend the time window by about 15 000 cycles",
    "start": "1552000",
    "end": "1560559"
  },
  {
    "text": "the reason for introducing ipi and irq together is that two",
    "start": "1561840",
    "end": "1568240"
  },
  {
    "text": "interrupts can be used at the same time ipi sends an interrupt to the core where",
    "start": "1568240",
    "end": "1575919"
  },
  {
    "text": "a process with the same memory map is learning and the irq is sent to a specific core",
    "start": "1575919",
    "end": "1584799"
  },
  {
    "text": "so the conditions doesn't does not overlap",
    "start": "1584799",
    "end": "1590880"
  },
  {
    "text": "using both methods at the same time the target core is interrupted more",
    "start": "1590880",
    "end": "1596840"
  },
  {
    "text": "often this means the probability that an interrupt is",
    "start": "1596840",
    "end": "1602000"
  },
  {
    "text": "transmitted transmitted while the time in the axis running is increased and",
    "start": "1602000",
    "end": "1609520"
  },
  {
    "text": "if irq and ipi are received at the same time the interrupt that comes first is handed",
    "start": "1609520",
    "end": "1617919"
  },
  {
    "text": "first and then another interrupt is handled at this time the time window",
    "start": "1617919",
    "end": "1624880"
  },
  {
    "text": "is extended up to 200 000 cycles",
    "start": "1624880",
    "end": "1631600"
  },
  {
    "text": "now let's exploit the non-inclusive multivariate lace condition binaural vulnerability",
    "start": "1632559",
    "end": "1639840"
  },
  {
    "text": "through explains here is the non-inclusive lace condition",
    "start": "1639840",
    "end": "1645760"
  },
  {
    "text": "vulnerability found in linux kernel",
    "start": "1645760",
    "end": "1650960"
  },
  {
    "text": "the useful free vulnerability occurs if the instruction a is",
    "start": "1650960",
    "end": "1657760"
  },
  {
    "text": "executed before instruction b and the c and the instruction c",
    "start": "1657760",
    "end": "1664960"
  },
  {
    "text": "is executed before instruction d there but there are two problems",
    "start": "1664960",
    "end": "1672000"
  },
  {
    "text": "in exploiting this vulnerability the first is a non-inclusive lace",
    "start": "1672000",
    "end": "1678720"
  },
  {
    "text": "condition so no memory caption would be triggered if an exploit only used normal bursting",
    "start": "1678720",
    "end": "1687600"
  },
  {
    "text": "the second is that there is no time to rear locate",
    "start": "1687600",
    "end": "1692960"
  },
  {
    "text": "to exploit the use after free vulnerability all the yellow case step must be",
    "start": "1692960",
    "end": "1699760"
  },
  {
    "text": "required however this vulnerability cannot be",
    "start": "1699760",
    "end": "1704960"
  },
  {
    "text": "relocated because a location and free must be done almost",
    "start": "1704960",
    "end": "1712559"
  },
  {
    "text": "location allocation step and three step and use that",
    "start": "1712559",
    "end": "1719520"
  },
  {
    "text": "must be done almost simultaneously",
    "start": "1719520",
    "end": "1724640"
  },
  {
    "start": "1722000",
    "end": "1722000"
  },
  {
    "text": "explains can solve two problems at once according to our measurement",
    "start": "1724640",
    "end": "1731200"
  },
  {
    "text": "the time taken from the instruction b to allocate leo locate is",
    "start": "1731200",
    "end": "1738559"
  },
  {
    "text": "about oh sorry according to our measurement the time taken from the instruction c",
    "start": "1738559",
    "end": "1746000"
  },
  {
    "text": "to relocate is about 3 000 cycles as i mentioned earlier the time window",
    "start": "1746000",
    "end": "1754640"
  },
  {
    "text": "is extended at least 15 15 000 cycles due to exp lace",
    "start": "1754640",
    "end": "1761760"
  },
  {
    "text": "so if the interrupt is received in correct timing the vulnerability will",
    "start": "1761760",
    "end": "1769440"
  },
  {
    "text": "modify the memory that should not be modified",
    "start": "1769440",
    "end": "1775519"
  },
  {
    "start": "1774000",
    "end": "1774000"
  },
  {
    "text": "now we can use it for free right to relocate buffer",
    "start": "1776559",
    "end": "1784000"
  },
  {
    "text": "since this presentation is not focused on memory corruption exploit technique so",
    "start": "1784000",
    "end": "1791200"
  },
  {
    "text": "i will explain it briefly first we spray the file structure",
    "start": "1791200",
    "end": "1797600"
  },
  {
    "text": "pointer and we partially overlay data pointer pointers",
    "start": "1797600",
    "end": "1804000"
  },
  {
    "text": "and we partially overwrite the data pointers in real located relocated",
    "start": "1804000",
    "end": "1810799"
  },
  {
    "text": "structure so that it leaves spread area and lick the file pointer",
    "start": "1810799",
    "end": "1818000"
  },
  {
    "text": "and we use iobc structures for arbitrary other suite and arbitrary",
    "start": "1818000",
    "end": "1824880"
  },
  {
    "text": "address right so here is the demo",
    "start": "1824880",
    "end": "1836640"
  },
  {
    "text": "first check the current id and first bring the",
    "start": "1836640",
    "end": "1844000"
  },
  {
    "text": "file structure and then pre create the process that",
    "start": "1844000",
    "end": "1851120"
  },
  {
    "text": "send an interrupt and trigger the",
    "start": "1851120",
    "end": "1857919"
  },
  {
    "text": "vulnerability and leak the file pointer",
    "start": "1857919",
    "end": "1864640"
  },
  {
    "text": "and leak the credit pointer of current process and finally we trigger the vulnerability",
    "start": "1864640",
    "end": "1872559"
  },
  {
    "text": "one more and overwrite zero to uid variable finally we got the loot permission",
    "start": "1872559",
    "end": "1882240"
  },
  {
    "text": "and in conclusion there is a type of lace condition vulnerability",
    "start": "1885360",
    "end": "1890799"
  },
  {
    "text": "that cannot be exploited with normal break pricing and we introduced a new laser exploit",
    "start": "1890799",
    "end": "1899279"
  },
  {
    "text": "technique explains with explains which turn unexplorable lace into",
    "start": "1899279",
    "end": "1907679"
  },
  {
    "text": "least exploitable lace we can exploit the unexploitable lace condition",
    "start": "1907679",
    "end": "1916720"
  },
  {
    "text": "explice utilize the hardware's basic interrupt mechanism so it is not",
    "start": "1916720",
    "end": "1922880"
  },
  {
    "text": "affected by corner configuration or needs specific hardware so it is generally applicable",
    "start": "1922880",
    "end": "1931279"
  },
  {
    "text": "okay so it is generally applicable regardless of the corner configuration",
    "start": "1931279",
    "end": "1937600"
  },
  {
    "text": "or specific situation thank you",
    "start": "1937600",
    "end": "1943278"
  },
  {
    "text": "the question is is there a white paper on this uh",
    "start": "1944399",
    "end": "1951840"
  },
  {
    "text": "you're writing but not published now",
    "start": "1951840",
    "end": "1959120"
  },
  {
    "text": "in uh after ever",
    "start": "1959120",
    "end": "1963840"
  },
  {
    "text": "the next question is oh i wonder how i wonder for how many",
    "start": "1966240",
    "end": "1973039"
  },
  {
    "text": "cases they try the technique in order to be",
    "start": "1973039",
    "end": "1978080"
  },
  {
    "text": "sure that it is in the assets as well as it needs to be",
    "start": "1978080",
    "end": "1984480"
  },
  {
    "text": "yes we test tested on windows and mac west and it",
    "start": "1987360",
    "end": "1994600"
  },
  {
    "text": "practically works and we tested uh",
    "start": "1994600",
    "end": "2001840"
  },
  {
    "text": "word more than tata 10 limitation books for proof that the general",
    "start": "2001840",
    "end": "2011120"
  },
  {
    "text": "genetically",
    "start": "2016840",
    "end": "2019840"
  },
  {
    "text": "and then next is are you planning to make the xp public",
    "start": "2024720",
    "end": "2032640"
  },
  {
    "text": "i think about that but",
    "start": "2035360",
    "end": "2039360"
  },
  {
    "text": "after working white paper published i will publicly",
    "start": "2040960",
    "end": "2049118"
  },
  {
    "text": "open the exploit",
    "start": "2049119",
    "end": "2061838"
  },
  {
    "text": "uh next question do you have github or reader to file for futurely from you",
    "start": "2148000",
    "end": "2157040"
  },
  {
    "text": "uh i don't have a public key top iv enter but",
    "start": "2157040",
    "end": "2165680"
  },
  {
    "text": "follow our follow our left side",
    "start": "2166800",
    "end": "2187838"
  },
  {
    "text": "uh",
    "start": "2198839",
    "end": "2201839"
  },
  {
    "text": "uh i think it's fun was it difficult to find i i iq gathered",
    "start": "2229040",
    "end": "2236400"
  },
  {
    "text": "richer from cisco's u.s no",
    "start": "2236400",
    "end": "2244320"
  },
  {
    "text": "yeah it's probably the same mechanism so",
    "start": "2244480",
    "end": "2251440"
  },
  {
    "text": "it's d yeah yeah",
    "start": "2251440",
    "end": "2257838"
  },
  {
    "text": "i think thank you for learning our presentation",
    "start": "2310240",
    "end": "2318078"
  },
  {
    "text": "thank you",
    "start": "2324000",
    "end": "2327839"
  }
]