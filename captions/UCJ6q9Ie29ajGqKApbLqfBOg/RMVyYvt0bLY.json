[
  {
    "start": "0",
    "end": "46000"
  },
  {
    "text": "[Music]",
    "start": "3840",
    "end": "14269"
  },
  {
    "text": "hello i'm william burgess and i'm going to be talking to you today about detecting access token manipulation",
    "start": "14719",
    "end": "21920"
  },
  {
    "text": "so a little bit about me so i'm a security researcher at elastic i used to be part of endgame before it",
    "start": "21920",
    "end": "28240"
  },
  {
    "text": "was acquired and i used to be a pen tester at a uk consultancy mwr where i primarily did red teaming",
    "start": "28240",
    "end": "36239"
  },
  {
    "text": "purple teaming style assessments and my my research interested generally everything and anything to do with",
    "start": "36239",
    "end": "41920"
  },
  {
    "text": "low level windows internals my objectives for today are threefold",
    "start": "41920",
    "end": "48559"
  },
  {
    "start": "46000",
    "end": "46000"
  },
  {
    "text": "firstly i want to help defense practitioners understand how access tokens work in windows",
    "start": "48559",
    "end": "54320"
  },
  {
    "text": "environments and access tokens are intimately related",
    "start": "54320",
    "end": "59359"
  },
  {
    "text": "to a number of other sort of key concepts in windows security and in my opinion if you ignore those",
    "start": "59359",
    "end": "65198"
  },
  {
    "text": "relationships then you only get a surface level understanding so my definition of of access tokens and",
    "start": "65199",
    "end": "70400"
  },
  {
    "text": "access token manipulation is perhaps far broader than you might be expecting or perhaps used to",
    "start": "70400",
    "end": "77118"
  },
  {
    "text": "the second objective is to show how attackers abuse legitimate windows functionality to basically compromise",
    "start": "77360",
    "end": "82720"
  },
  {
    "text": "entire entire domains and in my experience this is often as simple as",
    "start": "82720",
    "end": "87920"
  },
  {
    "text": "finding some credentials and then abusing existing windows trust relationships",
    "start": "87920",
    "end": "92960"
  },
  {
    "text": "and then lastly helped by showing the the art of the possible in both offense",
    "start": "92960",
    "end": "99119"
  },
  {
    "text": "and defense i hopefully help defense practitioners understand their own ability to detect and respond",
    "start": "99119",
    "end": "104799"
  },
  {
    "text": "to these type of attacks understand how their technology such as edrs can detect this type of behavior and then use this",
    "start": "104799",
    "end": "111680"
  },
  {
    "text": "as a springboard for future um threat hunting um my",
    "start": "111680",
    "end": "116719"
  },
  {
    "start": "115000",
    "end": "115000"
  },
  {
    "text": "my agenda today is um three-fold so firstly just going to cover some windows security internals so this is going to",
    "start": "116719",
    "end": "123439"
  },
  {
    "text": "focus on logon sessions and access tokens and then a brief recap of",
    "start": "123439",
    "end": "128560"
  },
  {
    "text": "network authentication the second part is going to cover three kind of techniques about how",
    "start": "128560",
    "end": "135440"
  },
  {
    "text": "attackers can abuse access tokens and this is going to focus on the net only flag and pass the ticket attacks",
    "start": "135440",
    "end": "141520"
  },
  {
    "text": "and overpass the hash and then the last part is going to be how we can start to detect these types",
    "start": "141520",
    "end": "146720"
  },
  {
    "text": "of attacks now my research when i when i started out was essentially looking to develop",
    "start": "146720",
    "end": "152560"
  },
  {
    "text": "user land hooks for for these types of attacks so um my my focus really was on hooking and",
    "start": "152560",
    "end": "160720"
  },
  {
    "text": "the proof of concepts i'm going to show will be predominantly hook based but i will show other sort of native sources",
    "start": "160720",
    "end": "166239"
  },
  {
    "text": "of telemetry along the way",
    "start": "166239",
    "end": "171840"
  },
  {
    "text": "so the first part i'm going to cover is some window security internals and one of the key things to understand",
    "start": "172879",
    "end": "178640"
  },
  {
    "start": "176000",
    "end": "176000"
  },
  {
    "text": "is the relationship between log on sessions and access tokens and the best way to demonstrate this is what is to show what actually happens when you log",
    "start": "178640",
    "end": "184720"
  },
  {
    "text": "on so in this demo so in this example we have the user cosmo who's logging on and when when they",
    "start": "184720",
    "end": "191200"
  },
  {
    "text": "enter their password basically the local security authority or the lsa in a in a",
    "start": "191200",
    "end": "196640"
  },
  {
    "text": "in a domain environment will typically forward this to the domain controller who will then actually authenticate the",
    "start": "196640",
    "end": "201680"
  },
  {
    "text": "user following successful authentication the lsa produces two key artifacts so a",
    "start": "201680",
    "end": "207120"
  },
  {
    "text": "log on session and an access token the key thing is a login session is is what it",
    "start": "207120",
    "end": "212640"
  },
  {
    "text": "says it is it indicates the presence of a user on a machine so it starts when they're successfully authenticated and then ends",
    "start": "212640",
    "end": "219360"
  },
  {
    "text": "when they log off and there are two really key points about this relationship that",
    "start": "219360",
    "end": "225440"
  },
  {
    "text": "i just want to highlight so firstly access tokens are always linked to an originating",
    "start": "225440",
    "end": "231599"
  },
  {
    "text": "logon session and you can see that via the auth id parameter here um and so a logon session can have you",
    "start": "231599",
    "end": "237840"
  },
  {
    "text": "know thousands hundreds of access tokens associated with it but access tokens only ever can be associated with one",
    "start": "237840",
    "end": "244000"
  },
  {
    "text": "originating logon session and so secondly access tokens act as",
    "start": "244000",
    "end": "249200"
  },
  {
    "text": "a proxy or an extension of the logon session so you as a developer you only ever interact with access tokens you",
    "start": "249200",
    "end": "255680"
  },
  {
    "text": "never touch log on sessions and as a result access tokens act as a",
    "start": "255680",
    "end": "261840"
  },
  {
    "text": "volatile repository for the security sessions associated with that logon session and hence they determine the security",
    "start": "261840",
    "end": "267919"
  },
  {
    "text": "context of the user and by security context i just mean the information cached in the token so group memberships privileges etc",
    "start": "267919",
    "end": "276720"
  },
  {
    "text": "so if we continue with our example once the lsa has a token it will typically spawn the",
    "start": "276720",
    "end": "282800"
  },
  {
    "text": "user's shell which is normally explorer and it will attach this this token to it and so every process",
    "start": "282800",
    "end": "288800"
  },
  {
    "text": "has to have a token um attached to it and this is typically",
    "start": "288800",
    "end": "294080"
  },
  {
    "text": "referred to as the primary access token and then subsequently any other processes spawned by the shell",
    "start": "294080",
    "end": "301919"
  },
  {
    "text": "they inherit the security context of the parent and then they get their own local copy of this token and the key thing here is that the token",
    "start": "301919",
    "end": "308800"
  },
  {
    "text": "again acts as this volatile repository so a process can change its own settings without affecting other processes",
    "start": "308800",
    "end": "315840"
  },
  {
    "text": "and so chrome for example can create a restricted access token to effectively sandbox itself from",
    "start": "315840",
    "end": "321520"
  },
  {
    "text": "you know memory corruption style exploits so that if an attacker is successful then the damage is restricted",
    "start": "321520",
    "end": "328160"
  },
  {
    "text": "um and it can do this by removing dangerous groups or privileges etc and the reason why this is so important",
    "start": "328160",
    "end": "333680"
  },
  {
    "text": "is that the access tokens are the fundamental component of windows security so whenever a process or a",
    "start": "333680",
    "end": "339759"
  },
  {
    "text": "thread attempts to access some securable object managed by the kernel whether it's a file process or thread windows will do an",
    "start": "339759",
    "end": "346320"
  },
  {
    "text": "access check and it needs three things to do this it needs the authorization attribute in the token",
    "start": "346320",
    "end": "352000"
  },
  {
    "text": "which in this case will be a restricted access token it needs the intentions up front because",
    "start": "352000",
    "end": "357680"
  },
  {
    "text": "in windows the access check for performance is only is only done the first time and you need to state exactly what you plan to do",
    "start": "357680",
    "end": "363360"
  },
  {
    "text": "with the object and the third thing is a security descriptor so this is contained within the object and it",
    "start": "363360",
    "end": "369680"
  },
  {
    "text": "basically has a access control list that says who and who and like who is not um able to",
    "start": "369680",
    "end": "375360"
  },
  {
    "text": "access it and then based on these windows we'll make a decision and um this this is why the ability to control",
    "start": "375360",
    "end": "381840"
  },
  {
    "text": "the security settings in access tokens is so important so the next thing to briefly cover is",
    "start": "381840",
    "end": "387759"
  },
  {
    "start": "387000",
    "end": "387000"
  },
  {
    "text": "network authentication so this is a kind of classic scenario in a domain where you as a user you want to access some",
    "start": "387759",
    "end": "393360"
  },
  {
    "text": "resources across the domain say a file share or something and so in this i'm just viewing the network shares of the domain controller",
    "start": "393360",
    "end": "400479"
  },
  {
    "text": "but how does this actually work under the hood and now the key thing here",
    "start": "400479",
    "end": "408880"
  },
  {
    "text": "is that the access token the login session are unique to the client machine on the left and so the client can't send",
    "start": "408880",
    "end": "415360"
  },
  {
    "text": "its token over the wire or something like that because the server still can't verify who you know just because you say you're that user it doesn't know and it doesn't",
    "start": "415360",
    "end": "421440"
  },
  {
    "text": "correspond to a meaningful log on sessions it's basically worthless so effectively you need to re-authenticate to the",
    "start": "421440",
    "end": "427120"
  },
  {
    "text": "server now for interactive logons and in fact every type of login apart from network",
    "start": "427120",
    "end": "432639"
  },
  {
    "text": "windows will automatically cache your credentials now it doesn't matter if it's a kerberos ticket an ntlm hash",
    "start": "432639",
    "end": "438560"
  },
  {
    "text": "when you try and access a resource windows will automatically try and authenticate on your behalf for you",
    "start": "438560",
    "end": "444400"
  },
  {
    "text": "and this is the intended design of windows single sign-on and it's also the reason for lots of say ntlm relay",
    "start": "444400",
    "end": "450319"
  },
  {
    "text": "style style attacks from the server perspective it's again",
    "start": "450319",
    "end": "455360"
  },
  {
    "text": "produced with with two key artefacts it gets a logon session and a token there's a few key",
    "start": "455360",
    "end": "461199"
  },
  {
    "text": "differences here though note that this is a network logon session it me which means it represents a remote client",
    "start": "461199",
    "end": "467440"
  },
  {
    "text": "um and secondly that there are no credentials backed up by this and this is typically what's known as",
    "start": "467440",
    "end": "472639"
  },
  {
    "text": "the double hop problem so you can't off that box to someone else because there's no credentials there",
    "start": "472639",
    "end": "478319"
  },
  {
    "text": "now i mentioned before that every processor has a primary access token and so when the server is presented this",
    "start": "478319",
    "end": "484319"
  },
  {
    "start": "479000",
    "end": "479000"
  },
  {
    "text": "token what does it do with it and this leads nicely to the the windows concept of impersonation",
    "start": "484319",
    "end": "490800"
  },
  {
    "text": "and so typically into a multi-threaded application multiple threads may try and adjust that",
    "start": "490800",
    "end": "497440"
  },
  {
    "text": "volatile repository of security settings at the same time which could lead to sort of weird bugs and race conditions",
    "start": "497440",
    "end": "504000"
  },
  {
    "text": "and to solve this windows has a feature called impersonation which basically allows a thread its own",
    "start": "504000",
    "end": "510720"
  },
  {
    "text": "local copy of an access token which it can then modify as it sees fit um and this this is known as",
    "start": "510720",
    "end": "516159"
  },
  {
    "text": "impersonation and the key thing here is this is an impersonation token it's applied to a thread and so it allows the thread to to slip",
    "start": "516159",
    "end": "522880"
  },
  {
    "text": "into a different security context and so and this is exactly what the server does so so",
    "start": "522880",
    "end": "528320"
  },
  {
    "text": "in in recap then we have the user re-authenticated over the network they have a new network logon session",
    "start": "528320",
    "end": "533519"
  },
  {
    "text": "produced and the server is given an impersonation token which links back to that originating network logon the server then uses this",
    "start": "533519",
    "end": "540560"
  },
  {
    "text": "token um to perform work on behalf of the client and so all access checks they'll use",
    "start": "540560",
    "end": "546800"
  },
  {
    "text": "that threads token which is that remote user and this is how windows can force access control",
    "start": "546800",
    "end": "552720"
  },
  {
    "text": "in in client server applications um and as a note just for most of",
    "start": "552720",
    "end": "558480"
  },
  {
    "text": "windows with key communication protocols this is handed automatically this the server just calls the api",
    "start": "558480",
    "end": "563839"
  },
  {
    "text": "rpc impersonate client and it automatically starts slipping into that security context of that remote user",
    "start": "563839",
    "end": "571360"
  },
  {
    "text": "so the second part of this presentation is going to start to focus on how attackers can actually start to",
    "start": "575279",
    "end": "580880"
  },
  {
    "text": "abuse access tokens now i want you to consider the following scenario which is very typical which is",
    "start": "580880",
    "end": "588160"
  },
  {
    "start": "583000",
    "end": "583000"
  },
  {
    "text": "an attacker's fish a user and they've got a sheller holding a corp in a corporate network um",
    "start": "588160",
    "end": "594000"
  },
  {
    "text": "a key thing here is it doesn't matter what payload the attacker used or whatever they're running in a process which is in",
    "start": "594000",
    "end": "599680"
  },
  {
    "text": "the security context of that user and in this case that user has no privileges across the domain",
    "start": "599680",
    "end": "604880"
  },
  {
    "text": "so any attempts will use their cash credentials and will fail so the attacker's got to move quickly but",
    "start": "604880",
    "end": "610800"
  },
  {
    "text": "what can they do and so they effectively have three options here and the first one is they",
    "start": "610800",
    "end": "618000"
  },
  {
    "start": "613000",
    "end": "613000"
  },
  {
    "text": "can steal the token of an already logged on privileged user and again because they want to move laterally they need credits cached so a",
    "start": "618000",
    "end": "624399"
  },
  {
    "text": "non-network logon and this they can then",
    "start": "624399",
    "end": "630399"
  },
  {
    "text": "with this token they can then impersonate or spawn a process whatever but they they can then move laterally using that",
    "start": "630399",
    "end": "635600"
  },
  {
    "text": "those cache credentials if they can't find credentials sorry if if this if a user already isn't",
    "start": "635600",
    "end": "641680"
  },
  {
    "text": "logged in then they need to find credentials and if they do well then they can create a new logon session with these stolen",
    "start": "641680",
    "end": "647519"
  },
  {
    "text": "credentials and then impersonate the return token or spawn a process with it",
    "start": "647519",
    "end": "653440"
  },
  {
    "text": "and then their last option is again they still need stolen credentials but they can just change the cash",
    "start": "653680",
    "end": "658880"
  },
  {
    "text": "credentials associated with their current logged on user to these stolen credentials and so this could be legitimately through an api or",
    "start": "658880",
    "end": "665360"
  },
  {
    "text": "illegitimately say by directly modifying lsat's memory and the examples we're going to cover are",
    "start": "665360",
    "end": "671040"
  },
  {
    "text": "largely focused on two and three and so the first um the first case is",
    "start": "671040",
    "end": "677360"
  },
  {
    "text": "sort of legitimately used by this net only flag and the subtitle here is from a really excellent blog by by rafael mudge and so say an attacker",
    "start": "677360",
    "end": "685839"
  },
  {
    "start": "684000",
    "end": "684000"
  },
  {
    "text": "if they find creds where they can use the logon user api to to basically create a new logon",
    "start": "685839",
    "end": "692079"
  },
  {
    "text": "session and get a token in return and so they can supply username domain password and a logon type",
    "start": "692079",
    "end": "697680"
  },
  {
    "text": "and the logon type um is basically what you specify for the",
    "start": "697680",
    "end": "702720"
  },
  {
    "text": "login type depends what kind of token you get back in this case we we want creds associated with it so we're going to say",
    "start": "702720",
    "end": "708560"
  },
  {
    "text": "an interactive logon in the case of an interactive logon we",
    "start": "708560",
    "end": "714639"
  },
  {
    "text": "get a primary token back so if we want to impersonate that on a thread then we need to convert it to an impersonation token",
    "start": "714639",
    "end": "720000"
  },
  {
    "text": "and so we can use duplicate token x to do this and we just apply a token type of token impersonate",
    "start": "720000",
    "end": "725600"
  },
  {
    "text": "and then lastly having got an impersonation token we can use set thread token or impersonally logged on user and this will make the thread slip into",
    "start": "725600",
    "end": "732160"
  },
  {
    "text": "that security context of that that logged on user and note that both of these are wrappers",
    "start": "732160",
    "end": "738480"
  },
  {
    "text": "around ntc information thread which will be important later now say an attacker finds valid",
    "start": "738480",
    "end": "744959"
  },
  {
    "text": "credentials they try and log the user in but they access is denied and this could be a legitimate reason you know the account",
    "start": "744959",
    "end": "751440"
  },
  {
    "text": "is valid but that user can't log on to that particular machine what can they do now things get very",
    "start": "751440",
    "end": "757920"
  },
  {
    "text": "interesting if you supply this logon new credentials flag and what this does is it clones your",
    "start": "757920",
    "end": "763519"
  },
  {
    "text": "current access token but it changes the credentials cached with it and so when you try and then access a",
    "start": "763519",
    "end": "770560"
  },
  {
    "text": "network resource it will authenticate with the stolen credentials and so you'll get a session",
    "start": "770560",
    "end": "775600"
  },
  {
    "text": "that remote host as with the as the user of the who belongs to those credentials and you can do the same",
    "start": "775600",
    "end": "782639"
  },
  {
    "start": "782000",
    "end": "782000"
  },
  {
    "text": "thing with create processes log on w it's got a logon flag of net credentials only these flags are equivalent all they mean",
    "start": "782639",
    "end": "788720"
  },
  {
    "text": "is that these credentials are only to be used on the network um and this is basically what the the",
    "start": "788720",
    "end": "793760"
  },
  {
    "text": "run as tool yeah the assistant of sorry the native windows tool run as does with the only flag",
    "start": "793760",
    "end": "799279"
  },
  {
    "text": "it allows you to specify credentials only to be used in the network and so i have a quick demo",
    "start": "799279",
    "end": "806079"
  },
  {
    "text": "and so we can see here that i am running as the user cosmo",
    "start": "813440",
    "end": "818800"
  },
  {
    "text": "and then i'm just going to try and enumerate the c dollar or the admin share on the domain",
    "start": "819120",
    "end": "824399"
  },
  {
    "text": "controller and i'm rightly denied because i'm just a standard user there's no reason why i should be",
    "start": "824399",
    "end": "829519"
  },
  {
    "text": "able to do this this is contrived but i've just got on the on the domain controller here now i'm just dumping creds and i can find",
    "start": "829519",
    "end": "836000"
  },
  {
    "text": "the clear text domain admin password i then can",
    "start": "836000",
    "end": "841040"
  },
  {
    "text": "use run as with that magic and their only flag and use those credentials to spawn a new",
    "start": "841040",
    "end": "846720"
  },
  {
    "text": "process and remember this clones the current access token but changes the cache credentials",
    "start": "846720",
    "end": "853680"
  },
  {
    "text": "just to note that this creates a new logon session so we can see we can see it there the 4917e0 and then",
    "start": "855199",
    "end": "862240"
  },
  {
    "text": "we can use the sysinternals tools to enumerate them so we can see this new credentials logon type",
    "start": "862240",
    "end": "870639"
  },
  {
    "text": "and similarly you also get a an event 4624 in the windows event log again log on type 9 and you",
    "start": "870639",
    "end": "877680"
  },
  {
    "text": "can see the target outbound username",
    "start": "877680",
    "end": "881199"
  },
  {
    "text": "now if i just spawn a new command prompt again i'm going to run who am i and this",
    "start": "882959",
    "end": "888399"
  },
  {
    "text": "would just show i'm the same user also note that the credentials are not validated when you enter them they're",
    "start": "888399",
    "end": "893600"
  },
  {
    "text": "only validated when you try and remotely authenticate to a host",
    "start": "893600",
    "end": "898639"
  },
  {
    "text": "and so now i'm going to enumerate the c dollar share and i'm an admin and i can similarly just",
    "start": "898639",
    "end": "905440"
  },
  {
    "text": "enter a new ps session just to confirm the same thing if i run who am i here",
    "start": "905440",
    "end": "912480"
  },
  {
    "text": "i'm the administrator",
    "start": "912480",
    "end": "915440"
  },
  {
    "text": "and you can you can apply very similar behavior with kerberos and this is typically you know it's past the ticket attacks and this is the second attack",
    "start": "921040",
    "end": "927199"
  },
  {
    "text": "we're going to look at um as a brief recap of kerberos so when you enter your password what the kerberos",
    "start": "927199",
    "end": "934079"
  },
  {
    "start": "929000",
    "end": "929000"
  },
  {
    "text": "provider will do is it will it will hash the um it will take the instant hash of your password and encrypt a timestamp and send it to the",
    "start": "934079",
    "end": "940079"
  },
  {
    "text": "domain controller the domain controller once it verifies your identity will send you back a ticket granting ticket or a",
    "start": "940079",
    "end": "945839"
  },
  {
    "text": "tgt then whenever you want to access another resource across the domain you give this to the maintenance i want",
    "start": "945839",
    "end": "951600"
  },
  {
    "text": "to access this file share and it will give you a ticket granting service ticket which you can then provide to that file",
    "start": "951600",
    "end": "956639"
  },
  {
    "text": "server and you can start accessing stuff and what pass the ticket does is it allows you to just basically arbitrarily",
    "start": "956639",
    "end": "962560"
  },
  {
    "text": "change the credentials associated with your logon session so you can just apply a tgt for a domain",
    "start": "962560",
    "end": "967759"
  },
  {
    "text": "admin and then any and then you can access the domain as that user",
    "start": "967759",
    "end": "972880"
  },
  {
    "text": "um the magic is mainly done by this lsa call authentication package function which basically makes an rpc call to the",
    "start": "972880",
    "end": "979759"
  },
  {
    "text": "kerberos provider and you basically pass a massive buffer of data of the protocol message you want",
    "start": "979759",
    "end": "986160"
  },
  {
    "text": "to send to the kerberos provider and you just you just give you just pass a pointer to this buffer",
    "start": "986160",
    "end": "991680"
  },
  {
    "text": "in the case of a pass a ticket attack it's a curb submit ticket message and so effectively you have this",
    "start": "991680",
    "end": "997759"
  },
  {
    "text": "structure in memory followed by a massive blob of a asn encoded kerberos ticket that you want to apply to your session",
    "start": "997759",
    "end": "1004079"
  },
  {
    "text": "and so i have a quick demo of this as well i can show",
    "start": "1004079",
    "end": "1011839"
  },
  {
    "text": "so once again i'm the user cosmo and i'm medium i'm medium integrity so i'm not elevated when i'm performing this attack likewise",
    "start": "1015519",
    "end": "1023120"
  },
  {
    "text": "i have an existing tgt for the user cosmo once again i can try and access the",
    "start": "1023120",
    "end": "1029120"
  },
  {
    "text": "admin share of the domain controller and i will rightly be rejected",
    "start": "1029120",
    "end": "1034959"
  },
  {
    "text": "access denied i can then again switch to the domain",
    "start": "1037120",
    "end": "1042319"
  },
  {
    "text": "controller and i'm going to export all the kerberos tickets i can find um",
    "start": "1042319",
    "end": "1048799"
  },
  {
    "text": "in memory and then i'm going to copy over a tgt for that admin user",
    "start": "1048799",
    "end": "1055360"
  },
  {
    "text": "i can then use the kerberos ptt command to pass the ticket and it will load this up from disk and",
    "start": "1062640",
    "end": "1068720"
  },
  {
    "text": "basically submit that as part of that buffer to the function",
    "start": "1068720",
    "end": "1074080"
  },
  {
    "text": "and now we can see that i do have a tgt for the administrator user in my in my kerberos cache so if i try once",
    "start": "1074080",
    "end": "1080799"
  },
  {
    "text": "again to access that c dollar share i can access it now because i have that",
    "start": "1080799",
    "end": "1086000"
  },
  {
    "text": "domain admin ticket",
    "start": "1086000",
    "end": "1089120"
  },
  {
    "text": "um a couple of things to know so as i showed there we were medium integrity so you don't need privileges to change your",
    "start": "1093600",
    "end": "1098640"
  },
  {
    "text": "tgt associated with your session but obtaining a tgc in the first place is a different matter um you don't need",
    "start": "1098640",
    "end": "1105679"
  },
  {
    "text": "to create additional logon sessions but bear in mind when you apply a new tut or blitz the old one the way to get around this is",
    "start": "1105679",
    "end": "1112240"
  },
  {
    "text": "that net only gadget that we saw before so you create a dummy um new credentials",
    "start": "1112240",
    "end": "1118080"
  },
  {
    "text": "session and then you can apply the tgt to that session while preserving your own also note that through this this api you",
    "start": "1118080",
    "end": "1125120"
  },
  {
    "text": "can do a lot more than just pass the ticket you can basically dump credentials um as in a high integrity context and",
    "start": "1125120",
    "end": "1131280"
  },
  {
    "text": "the key thing here is that this doesn't involve opening a handle 12 sas which is what a lot of um quick theft is traditionally based on",
    "start": "1131280",
    "end": "1137360"
  },
  {
    "text": "and so be aware that this is quite a big gap actually in any in any credential theft logic based on",
    "start": "1137360",
    "end": "1142640"
  },
  {
    "text": "that kind of traditional access to lsat so say sysmon process access",
    "start": "1142640",
    "end": "1148080"
  },
  {
    "text": "and the last example i'm just going to run through pretty quickly is overpass the hash so for typical pass the hash attacks",
    "start": "1148080",
    "end": "1156320"
  },
  {
    "text": "what happens is you'll get a tool like mimikats which will basically pass ls memory it will enumerate the logon",
    "start": "1156320",
    "end": "1162240"
  },
  {
    "text": "sessions and basically it will find the ntlm cache credentials it'll basically just directly overwrite them in memory",
    "start": "1162240",
    "end": "1169280"
  },
  {
    "text": "screen's gone off oh no it's back sorry and then when you try to then access a",
    "start": "1169280",
    "end": "1177520"
  },
  {
    "text": "network resource it will just supply these overwritten credentials and so again you'll get a logon session",
    "start": "1177520",
    "end": "1183039"
  },
  {
    "text": "as as the stolen credentials the screen's flickering",
    "start": "1183039",
    "end": "1188080"
  },
  {
    "start": "1191000",
    "end": "1191000"
  },
  {
    "text": "oh sorry one second",
    "start": "1191440",
    "end": "1194559"
  },
  {
    "text": "um so for overpass the hash effectively what you're doing is you're translating",
    "start": "1197360",
    "end": "1202559"
  },
  {
    "text": "an ntlm hash for a user into a fully fledged tgt for that user",
    "start": "1202559",
    "end": "1207919"
  },
  {
    "text": "and so you're doing a similar thing but you but this time you're sort of injecting it into the kerberos provider",
    "start": "1207919",
    "end": "1213200"
  },
  {
    "text": "so you've you enumerate the login sessions you find the appropriate place and you patch in that new hash",
    "start": "1213200",
    "end": "1218799"
  },
  {
    "text": "but the key thing this is again this is sitting in memory but then once you try and once you try and actually access some",
    "start": "1218799",
    "end": "1224400"
  },
  {
    "text": "remote resources it will kick off the normal kerberos authentication protocol so you'll basically don't go too much into",
    "start": "1224400",
    "end": "1230159"
  },
  {
    "text": "these onto this but you'll get a tgt for that that user um whose credentials you",
    "start": "1230159",
    "end": "1235919"
  },
  {
    "text": "have access to and then you can access the domain as that user um a couple of notes about sort of quirks of how say mimikatz does",
    "start": "1235919",
    "end": "1242480"
  },
  {
    "text": "this so again firstly it creates this kind of sacrificial net only process and this is to preserve your tgt as i",
    "start": "1242480",
    "end": "1249120"
  },
  {
    "text": "mentioned but this does generate a new logon session um it will then acquire debug privilege",
    "start": "1249120",
    "end": "1254159"
  },
  {
    "text": "or impersonate a system token but in order to be able to get a right",
    "start": "1254159",
    "end": "1259520"
  },
  {
    "text": "handle to lsas and then as i said it will patch sorry it will pause lsa's memory find the appropriate login",
    "start": "1259520",
    "end": "1266320"
  },
  {
    "text": "session and then just patch in that new hash and then once again the normal kerberos authentication process kicks off and you",
    "start": "1266320",
    "end": "1272240"
  },
  {
    "text": "have a tgt for that user i don't have a demo for this for time but um i'll be showing one shortly from",
    "start": "1272240",
    "end": "1277840"
  },
  {
    "text": "the defensive perspective",
    "start": "1277840",
    "end": "1280880"
  },
  {
    "text": "so the final part of this presentation is going to look at how we can start to detect these techniques",
    "start": "1283360",
    "end": "1290000"
  },
  {
    "text": "and as i mentioned the start of my presentation my my research focus was really developing user land hooks",
    "start": "1290000",
    "end": "1295280"
  },
  {
    "text": "um so a lot of the proof of concepts i'm going to show shortly use frida which is the binary",
    "start": "1295280",
    "end": "1302320"
  },
  {
    "text": "instrumentation framework essentially um but i will show native windows telemetry where",
    "start": "1302320",
    "end": "1307919"
  },
  {
    "text": "appropriate and the really awesome thing about freedo is it allows us to write sort of custom and scriptable scriptable",
    "start": "1307919",
    "end": "1315120"
  },
  {
    "text": "detection logic on the fly so we can because it's a hooking framework we can analyze arguments pre",
    "start": "1315120",
    "end": "1320720"
  },
  {
    "text": "and post function call and make decisions based on you know parameters past the functions or the",
    "start": "1320720",
    "end": "1326480"
  },
  {
    "text": "other or what's returned to a function and so this can be very powerful for prototyping",
    "start": "1326480",
    "end": "1332480"
  },
  {
    "text": "effectively detection logic very quickly um this is an example of a very basic um 3d javascript template we use find",
    "start": "1332480",
    "end": "1340000"
  },
  {
    "start": "1335000",
    "end": "1335000"
  },
  {
    "text": "export by name to resolve the function of interest and this returns a free native pointer and then we use the",
    "start": "1340000",
    "end": "1346000"
  },
  {
    "text": "interceptor attached to start hooking and the on enter and on leave callback functions this is where the main guts of",
    "start": "1346000",
    "end": "1352000"
  },
  {
    "text": "ours of detection logic will reside and here we can start looking at arguments and",
    "start": "1352000",
    "end": "1357039"
  },
  {
    "text": "implementing our logic and so i started um showing this kind of net only",
    "start": "1357039",
    "end": "1362720"
  },
  {
    "text": "technique and the the two key signals for this was create process with log on with that",
    "start": "1362720",
    "end": "1368320"
  },
  {
    "text": "um effectively the net only flag and the effectively the make token gadget which",
    "start": "1368320",
    "end": "1374159"
  },
  {
    "text": "allowed you to craft arbitrary tokens which was a combination of logon user within their only flag",
    "start": "1374159",
    "end": "1379600"
  },
  {
    "text": "and then you impersonate the return token so i've got a few demos with frida just just showing these now",
    "start": "1379600",
    "end": "1389840"
  },
  {
    "text": "so this is an exact run through of the the previous attack but i can show you my free to hook here we can see i'm resolving crepe posted",
    "start": "1396640",
    "end": "1403760"
  },
  {
    "text": "log on by export by name and then using interceptor attached to start hooking it and so now i'm attaching freeda to",
    "start": "1403760",
    "end": "1411280"
  },
  {
    "text": "command.xc and i can run through the same steps so i use runners with that",
    "start": "1411280",
    "end": "1416720"
  },
  {
    "text": "net only flag and then supply the administrator's credentials once again because it's cloned my access",
    "start": "1416720",
    "end": "1422880"
  },
  {
    "text": "token i'm the same user locally for any access checks but remotely it will supply the new cache credentials and i'm a domain admin",
    "start": "1422880",
    "end": "1429440"
  },
  {
    "text": "on the network so if we look at my free to hook now we can see it spawned a new process and",
    "start": "1429440",
    "end": "1435039"
  },
  {
    "text": "we can see that process is called create process with log on w um and critically we can see",
    "start": "1435039",
    "end": "1440880"
  },
  {
    "text": "we can pull out the username password etc but we can see that it's submitted logon flags of net credentials",
    "start": "1440880",
    "end": "1446640"
  },
  {
    "text": "only which is potentially a suspicious event that we we want to alert on and in this case just as for this proof",
    "start": "1446640",
    "end": "1453600"
  },
  {
    "text": "of concept i've added an entry to the event log saying we've seen a suspicious net only",
    "start": "1453600",
    "end": "1458799"
  },
  {
    "text": "log on session for the second example",
    "start": "1458799",
    "end": "1466480"
  },
  {
    "text": "we're looking for that make token gadget and so here i've used the covenant which is a open source c2 framework i've used a",
    "start": "1466559",
    "end": "1472799"
  },
  {
    "text": "powershell stager and we've got a shell basically and so i'm going to attach my friday script to this powershell process",
    "start": "1472799",
    "end": "1479039"
  },
  {
    "text": "now if i switch to my attacker machine i'm going to run the make token task and this will do exactly the same it",
    "start": "1479039",
    "end": "1484159"
  },
  {
    "text": "will log on the user with the logon type of new credentials so that's suspicious now only flag and then start",
    "start": "1484159",
    "end": "1489200"
  },
  {
    "text": "impersonating that user so we can run that task",
    "start": "1489200",
    "end": "1493919"
  },
  {
    "text": "and we can see that it successfully impersonated it so in terms of a free to hook well how",
    "start": "1495039",
    "end": "1500159"
  },
  {
    "text": "do we detect this well again we want to monitor for someone logging on a user",
    "start": "1500159",
    "end": "1505679"
  },
  {
    "text": "and then subsequently using that token in a call to say impersonate logged in",
    "start": "1505679",
    "end": "1511679"
  },
  {
    "text": "user so in this case i've actually hooked logon user xxw which is what um logon user a and w both end up",
    "start": "1511679",
    "end": "1518400"
  },
  {
    "text": "calling and we can see that again new credentials has that new credentials flag has been passed and then if we track that return",
    "start": "1518400",
    "end": "1526559"
  },
  {
    "text": "token we can see that that was then passed to this impersonate logged on user call which is suspicious",
    "start": "1526559",
    "end": "1532000"
  },
  {
    "text": "that's the kind of behavior we want to learn from so once again we can omit an event and i've just written um a new entry to the",
    "start": "1532000",
    "end": "1538880"
  },
  {
    "text": "event log showing that this potential make toe take make token behavior has been detected",
    "start": "1538880",
    "end": "1545919"
  },
  {
    "start": "1552000",
    "end": "1552000"
  },
  {
    "text": "in terms of other telemetry sources so for those net only log ons we can use the windows",
    "start": "1552240",
    "end": "1558640"
  },
  {
    "text": "event logs and then for any process spawning signal we can use process events um no impersonation as far as i can see",
    "start": "1558640",
    "end": "1566320"
  },
  {
    "text": "has no native real way to track and is also exceptionally noisy unless you're looking for targeted things",
    "start": "1566320",
    "end": "1574320"
  },
  {
    "text": "um i showed this before so event logs four six two four log ons um you wanna log on type nine",
    "start": "1574799",
    "end": "1581200"
  },
  {
    "text": "and then the logon process name is set seclo so it's the secondary logon service and notice you can see the differing",
    "start": "1581200",
    "end": "1587840"
  },
  {
    "text": "username and then target outbound name in terms of process data you might want",
    "start": "1587840",
    "end": "1593200"
  },
  {
    "text": "to look for users so this is high or medium integrity spawning processes",
    "start": "1593200",
    "end": "1598799"
  },
  {
    "text": "as the same user but a different auth id hence it's a new logon session so it's a net only gadget and you might also want to ignore",
    "start": "1598799",
    "end": "1605600"
  },
  {
    "text": "things common admin tools like run ads also note that because it goes through the secondary logon service i don't think you can spoof the pit as far as i",
    "start": "1605600",
    "end": "1612000"
  },
  {
    "text": "know for create process with logon um i haven't had too much time to go on this today but you could also take a bit",
    "start": "1612000",
    "end": "1617919"
  },
  {
    "text": "further and look for processes spawning processes as other users full stop and again look for higher medium integrity",
    "start": "1617919",
    "end": "1624000"
  },
  {
    "text": "user processes um and this caters for that case of someone stealing a token and then spawning a new process",
    "start": "1624000",
    "end": "1630400"
  },
  {
    "text": "with it and then again you might want to look for you might want to ignore standard",
    "start": "1630400",
    "end": "1635520"
  },
  {
    "text": "admin tools in doing this so the second technique we looked at was past the ticket and the",
    "start": "1635520",
    "end": "1641520"
  },
  {
    "text": "the real indicator here was that lsa called authentication package with the curb submit ticket request and so i've",
    "start": "1641520",
    "end": "1647279"
  },
  {
    "text": "got a demo for this as well",
    "start": "1647279",
    "end": "1654480"
  },
  {
    "text": "so once again we can see i'm cosmo i've got a tgt because i also actually have a few tgs's when i was accessing file shares",
    "start": "1654480",
    "end": "1661520"
  },
  {
    "text": "um and i can try and access domain controller and i'm rightly denied again",
    "start": "1661520",
    "end": "1666559"
  },
  {
    "text": "i'm then going to attach frida to mimikat and then i'm going to apply the same",
    "start": "1666559",
    "end": "1673520"
  },
  {
    "text": "ticket as before by the the ptt command",
    "start": "1673520",
    "end": "1678159"
  },
  {
    "text": "and now what we can see is in my frida hook so i've hooked lsa call",
    "start": "1678799",
    "end": "1683840"
  },
  {
    "text": "authentication package and we can monitor for the type of message um that we want to find which is in this",
    "start": "1683840",
    "end": "1689200"
  },
  {
    "text": "case curb submit ticket request that data buffer there is that big buffer i mentioned that's",
    "start": "1689200",
    "end": "1695120"
  },
  {
    "text": "passed to the function call and then i can use the impact python libraries to pass that kerberos to get out of memory",
    "start": "1695120",
    "end": "1701600"
  },
  {
    "text": "um and see what tickets being applied in this case the user is applying a ticket to",
    "start": "1701600",
    "end": "1707120"
  },
  {
    "text": "somewhat a different user not logged on and this is evidently pretty suspicious so again we",
    "start": "1707120",
    "end": "1712159"
  },
  {
    "text": "can say potential pass the ticket attack detected and we can add something to the event log",
    "start": "1712159",
    "end": "1724000"
  },
  {
    "text": "as so um i'll just give this along a bit um as a quick example as well i don't know",
    "start": "1724000",
    "end": "1729520"
  },
  {
    "text": "too much into how the the guts this works but that's sorry just confirming that i could access it i'm now going to purge the cache and",
    "start": "1729520",
    "end": "1736840"
  },
  {
    "text": "then i'm going to actually use the um the mimikatz",
    "start": "1736840",
    "end": "1742559"
  },
  {
    "text": "lsa dump inject command and i'm going to get the krbgt hash to basically make a golden",
    "start": "1742559",
    "end": "1747679"
  },
  {
    "text": "ticket i'm not going to go too much into how this works but it's the ridge 502 account and we can put out that ntlm",
    "start": "1747679",
    "end": "1753520"
  },
  {
    "text": "hash and likewise here we can use this",
    "start": "1753520",
    "end": "1760480"
  },
  {
    "text": "the golden ticket command and then we can see it if i check now",
    "start": "1760480",
    "end": "1766640"
  },
  {
    "text": "once again we can see lsa call authentication package has been been called and we can pick up this ticket and so this is fake user",
    "start": "1766640",
    "end": "1773200"
  },
  {
    "text": "astro.teslabs you can specify any user for a golden ticket for a temporary period and this is",
    "start": "1773200",
    "end": "1778880"
  },
  {
    "text": "obviously very suspicious as well so we can write an event log as well and so the key thing here is for",
    "start": "1778880",
    "end": "1784000"
  },
  {
    "text": "it doesn't really matter what kerberos attack you use at the end of the day you have to submit that ticket whether it's on disk or a memory",
    "start": "1784000",
    "end": "1789840"
  },
  {
    "text": "via that function to apply it to your your logon session",
    "start": "1789840",
    "end": "1795840"
  },
  {
    "text": "in terms of native telemetry sources i looked at the kerberos etw providers i couldn't really find anything that seemed to capture what i want which was",
    "start": "1797919",
    "end": "1804080"
  },
  {
    "text": "which was quite disappointing there's better logging on dc's but this can be noisy and obviously isn't the client side of it for the last",
    "start": "1804080",
    "end": "1811840"
  },
  {
    "text": "example i had overpassed the hash again this had that great process of log on now only gadget",
    "start": "1811840",
    "end": "1818320"
  },
  {
    "text": "we also had debug privilege and impersonate system token um debug privilege is very noisy in my",
    "start": "1818320",
    "end": "1823840"
  },
  {
    "text": "opinion so i've ignored that and we're going to focus on impersonating a system token which is a definitive escalation of privilege right",
    "start": "1823840",
    "end": "1830000"
  },
  {
    "text": "you're going from high to system um likewise you can look for right-handed access but this what this is kind of a traditional known technique and this",
    "start": "1830000",
    "end": "1836000"
  },
  {
    "text": "wasn't really the focus of my research so i just have a final quick example of",
    "start": "1836000",
    "end": "1841039"
  },
  {
    "text": "overpass the hash um and so in this in this scenario we're",
    "start": "1841039",
    "end": "1847360"
  },
  {
    "text": "simulating a credential shuffle so i'm actually interactively logging on the administrator user basically so",
    "start": "1847360",
    "end": "1853120"
  },
  {
    "text": "he has they have cache credentials in memory that i can still also note when you use run as sometimes",
    "start": "1853120",
    "end": "1859440"
  },
  {
    "text": "for ridge 500 it automatically elevates so the processor is already high integrity",
    "start": "1859440",
    "end": "1865840"
  },
  {
    "text": "so once again i can attach frida to mimikats i can elevate and then",
    "start": "1867279",
    "end": "1875120"
  },
  {
    "text": "i can dump credentials",
    "start": "1875200",
    "end": "1879840"
  },
  {
    "text": "so i can see the playing chess credentials but for overpass the hash i'm interested in that ntlm hash so i can use that in to",
    "start": "1884320",
    "end": "1892799"
  },
  {
    "text": "spawn a new command prompt which i can then move laterally with",
    "start": "1892799",
    "end": "1897440"
  },
  {
    "text": "again because i'm not only i'm the same user locally again note the credentials are not validated until you try and",
    "start": "1901200",
    "end": "1906799"
  },
  {
    "text": "authenticate remotely and then i'm a domain admin if i switch to freeda i've actually got",
    "start": "1906799",
    "end": "1914000"
  },
  {
    "text": "a new hook so basically i've hooked empty set information thread which i said is a wrapper for those impersonation functions",
    "start": "1914000",
    "end": "1919519"
  },
  {
    "text": "i when it's being used to impersonate a token i query that that handle to the token in",
    "start": "1919519",
    "end": "1925279"
  },
  {
    "text": "flight and basically look what user is and if it's a system token then this is a suspicious event and we might want to",
    "start": "1925279",
    "end": "1930320"
  },
  {
    "text": "admit an event on it and the second example here is just that create process log on with those net credentials so two of these are",
    "start": "1930320",
    "end": "1935679"
  },
  {
    "text": "potentially very suspicious behaviors that we we want to look for",
    "start": "1935679",
    "end": "1940559"
  },
  {
    "text": "in terms of telemetry again as i said for net only stuff windows event logs process events um and then i didn't cover this but",
    "start": "1945360",
    "end": "1952000"
  },
  {
    "text": "right handle to access to lsas you can look for sysmon event id10 so process access um as a note before i",
    "start": "1952000",
    "end": "1959200"
  },
  {
    "text": "wrap up i just want to highlight two things so from my research a lot of these signals",
    "start": "1959200",
    "end": "1964480"
  },
  {
    "text": "here are highly anomalous like the these are pretty rare especially again if you look for high medium",
    "start": "1964480",
    "end": "1969760"
  },
  {
    "text": "user activity these are rare and i think quite high fidelity signals of bad behavior again if you rule out",
    "start": "1969760",
    "end": "1976480"
  },
  {
    "text": "admin tools as well the second thing is because apart from impersonation",
    "start": "1976480",
    "end": "1981919"
  },
  {
    "text": "all of these calls are making rpc calls to either the sec the secondary login service or um the lsa kerberos provider and so",
    "start": "1981919",
    "end": "1990320"
  },
  {
    "text": "a typical weakness of hook so you can just make a direct cisco in this case you can't do that because it's not as simple right if you've ever",
    "start": "1990320",
    "end": "1996960"
  },
  {
    "text": "looked at making rpc calls they're quite complicated and so some of the traditional weaknesses of hooks",
    "start": "1996960",
    "end": "2002240"
  },
  {
    "text": "are slightly mitigated by this it's not impossible but it increases the barrier of an attacker being able to or wanting to spend time",
    "start": "2002240",
    "end": "2008720"
  },
  {
    "text": "doing that and i shall wrap up there so hopefully",
    "start": "2008720",
    "end": "2014799"
  },
  {
    "start": "2014000",
    "end": "2014000"
  },
  {
    "text": "i've shown that window security can be intimidating things like kerberos ntlm can be complicated but i hope",
    "start": "2014799",
    "end": "2020880"
  },
  {
    "text": "i've shown at high level conceptually it's simple think of access tokens log on log on sessions and cache creds these",
    "start": "2020880",
    "end": "2027760"
  },
  {
    "text": "this is the framework from which it works and which you can start compromising domains from essentially",
    "start": "2027760",
    "end": "2033120"
  },
  {
    "text": "and hopefully i've shown that because of these constraints irrespective of what tools you use what authentication provider you're abusing",
    "start": "2033120",
    "end": "2040080"
  },
  {
    "text": "basically attackers are always under the same set of constraints they they always use these net only",
    "start": "2040080",
    "end": "2045120"
  },
  {
    "text": "gadgets to um create these sacrificial net um logon sessions etc and so you'll see",
    "start": "2045120",
    "end": "2051358"
  },
  {
    "text": "the same signals for irrespective of the the kinds of attacks um even unknowns actually don't know yet",
    "start": "2051359",
    "end": "2057118"
  },
  {
    "text": "um and hopefully these techniques aren't necessarily supposed to be sort of prod prod ready",
    "start": "2057119",
    "end": "2063358"
  },
  {
    "text": "but they show the art of the possible from both an offensive and defensive perspective so hopefully as a defense practitioner you can see",
    "start": "2063359",
    "end": "2069839"
  },
  {
    "text": "kind of one attacker can do and you can assess your own ability to detect and respond and the tech use the edius",
    "start": "2069839",
    "end": "2075440"
  },
  {
    "text": "you can you can see whether they can see this kind of stuff and it gives you a springboard for future threat hunting as well and i",
    "start": "2075440",
    "end": "2081919"
  },
  {
    "text": "shall wrap up there thank you very much",
    "start": "2081919",
    "end": "2085358"
  },
  {
    "text": "hello can you hear me",
    "start": "2087760",
    "end": "2091440"
  },
  {
    "text": "perfect um thanks everyone for attending um my session today um i saw one really",
    "start": "2093200",
    "end": "2100079"
  },
  {
    "text": "good question from michael um that was essentially about how do you operationalize the hook based detection",
    "start": "2100079",
    "end": "2107280"
  },
  {
    "text": "and then do you recommend deploying freda in production um i think loosely there's kind of two",
    "start": "2107280",
    "end": "2112800"
  },
  {
    "text": "concerns with any detection logic which i suppose from a sort of an edr",
    "start": "2112800",
    "end": "2118720"
  },
  {
    "text": "perspective is a noise so how much how many false positives you get and then the actual",
    "start": "2118720",
    "end": "2123839"
  },
  {
    "text": "performance implications of it um in terms of these specific hooks like",
    "start": "2123839",
    "end": "2130240"
  },
  {
    "text": "testing getting an idea or feel for the actual activity and how rare it is is the number one thing for me at least to",
    "start": "2130240",
    "end": "2136800"
  },
  {
    "text": "feel whether it's even worth even opera operationalizing it down the line anyway um hooks in particular can be you know",
    "start": "2136800",
    "end": "2145040"
  },
  {
    "text": "some apis can be very noisy um they can be quite performance intensive so you have to be careful with",
    "start": "2145040",
    "end": "2150880"
  },
  {
    "text": "with what exactly you're hooking so i think as well trying to get rid of many kind",
    "start": "2150880",
    "end": "2157119"
  },
  {
    "text": "of superfluous apicals or events as soon as possible is also a really good way",
    "start": "2157119",
    "end": "2162560"
  },
  {
    "text": "um of honing in on that exact um behavior you're looking for i think in",
    "start": "2162560",
    "end": "2167680"
  },
  {
    "text": "this case these behaviors i've highlighted just happen they do seem to be really really rare in",
    "start": "2167680",
    "end": "2173359"
  },
  {
    "text": "my experience um you you know if you look for in your kind of enterprise if you look for you know business users creating these",
    "start": "2173359",
    "end": "2180079"
  },
  {
    "text": "net log on sessions and you know submitting new ttts to their um session",
    "start": "2180079",
    "end": "2186240"
  },
  {
    "text": "this stuff is rare so it's a really good basis for detection if at a starting point and yeah you'll get",
    "start": "2186240",
    "end": "2191359"
  },
  {
    "text": "a few false processes but at least it's high fidelity enough for us to be able to um make it valuable detection logic",
    "start": "2191359",
    "end": "2198160"
  },
  {
    "text": "um in terms of operationalizing freeda i mean pending any license equipment",
    "start": "2198160",
    "end": "2203280"
  },
  {
    "text": "licensed agreements like freedom is amazing it's really powerful and you may but it's obviously running",
    "start": "2203280",
    "end": "2209040"
  },
  {
    "text": "python under the hood so um that may have performance",
    "start": "2209040",
    "end": "2214160"
  },
  {
    "text": "implications um that you that you would want to worry about",
    "start": "2214160",
    "end": "2220320"
  },
  {
    "text": "uh i'm just sorry i apologize between two screens i'm just looking at the discussion now to um",
    "start": "2221760",
    "end": "2227839"
  },
  {
    "text": "another question would it be possible to use etw",
    "start": "2227839",
    "end": "2234640"
  },
  {
    "text": "providers to enrich the data set and detect all the techniques especially the one not currently detected with standard you could do that",
    "start": "2234640",
    "end": "2241440"
  },
  {
    "text": "i admit as i said before my my research was mainly focused on as i said developing used land hooks etw",
    "start": "2241440",
    "end": "2247920"
  },
  {
    "text": "is an incredibly valuable resource for um a lot of kind of key windows events",
    "start": "2247920",
    "end": "2253440"
  },
  {
    "text": "um so you could again providing you had the infrastructure in place to do this you could enrich the data set",
    "start": "2253440",
    "end": "2259920"
  },
  {
    "text": "um with some of these things as i mentioned i was a bit disappointed with etw for some of the kerberos stuff because",
    "start": "2259920",
    "end": "2266240"
  },
  {
    "text": "from either an rpc perspective calling into the lsa or the actual kerberos dtw provider i",
    "start": "2266240",
    "end": "2274000"
  },
  {
    "text": "couldn't really find what i was looking for there is better logging on domain controllers but the purpose of this was",
    "start": "2274000",
    "end": "2279520"
  },
  {
    "text": "to find client-side um manipulation style attacks um so",
    "start": "2279520",
    "end": "2285200"
  },
  {
    "text": "for some things that there is a bit of a gap i think from the standard microsoft and even say things like cis month set i",
    "start": "2285200",
    "end": "2292160"
  },
  {
    "text": "mean as i highlighted if you're if you're an attacker if you just use lsa called authentication",
    "start": "2292160",
    "end": "2297520"
  },
  {
    "text": "package and do all your cred kind of manipulation through kerberos um if you know anyone looking for",
    "start": "2297520",
    "end": "2304480"
  },
  {
    "text": "someone grabbing a handle or else or something you're not going to see any of that activity so um",
    "start": "2304480",
    "end": "2310160"
  },
  {
    "text": "there are some limitations on what you can natively natively detect",
    "start": "2310160",
    "end": "2317040"
  },
  {
    "text": "um i shall have a quick look for any more i'll give i'll wait a little bit if anyone has anything else otherwise i can",
    "start": "2317760",
    "end": "2323520"
  },
  {
    "text": "wrap up um the session",
    "start": "2323520",
    "end": "2327839"
  },
  {
    "text": "i guess yeah nothing else so i guess i'll leave it there yeah thank you very much for attending",
    "start": "2333680",
    "end": "2340720"
  }
]