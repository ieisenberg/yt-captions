[
  {
    "text": "so hello and welcome to our talk hello from the other side SSH over robust cach cover channels in the",
    "start": "160",
    "end": "6319"
  },
  {
    "text": "cloud so what is this talk going to be about this talk will show you how you can use caches to circumvent the",
    "start": "6319",
    "end": "13040"
  },
  {
    "text": "isolation of virtual machines and it is not about software bus software bus can be patched easily more it's about we are",
    "start": "13040",
    "end": "20560"
  },
  {
    "text": "showing an attack Vector which we can use and it's due to the Hardway design of modern Intel CPUs so it's really hard",
    "start": "20560",
    "end": "28480"
  },
  {
    "text": "to replace a CPU right so this makes it even more impactful we then will demonstrate how you can use our robust",
    "start": "28480",
    "end": "35440"
  },
  {
    "text": "cover channel on the Amazon Cloud and yes we do have a really cool life demo",
    "start": "35440",
    "end": "40680"
  },
  {
    "text": "at the end so what are going to be the takeaways so cash-based cover channels",
    "start": "40680",
    "end": "47039"
  },
  {
    "text": "are practical and they real threat well we show that um on the Amazon Cloud as well so they are real and also virtual",
    "start": "47039",
    "end": "54840"
  },
  {
    "text": "machines while they provide some isolation they do not provide perfect isolation so don't expect just because",
    "start": "54840",
    "end": "60359"
  },
  {
    "text": "you're using a viral machine you're perfectly isolated from everything else right and as for now there is no known",
    "start": "60359",
    "end": "66760"
  },
  {
    "text": "countermeasure for what we present so but before we start let's",
    "start": "66760",
    "end": "72799"
  },
  {
    "text": "introduce ourselves right so my name is man vaa I am currently a PhD student at",
    "start": "72799",
    "end": "77960"
  },
  {
    "text": "grat University of Technology and my interest is L in Internet of Things in networks and security related stuff you",
    "start": "77960",
    "end": "84280"
  },
  {
    "text": "can find me on Twitter on my Twitter handle Von networks and you can also drop me an email and my email address",
    "start": "84280",
    "end": "89920"
  },
  {
    "text": "add of course you can also talk to me later after our presentation and this is",
    "start": "89920",
    "end": "95560"
  },
  {
    "text": "M thank you so my name is Mel Schwartz I'm also a PhD student at carts",
    "start": "95560",
    "end": "102240"
  },
  {
    "text": "University of Technology I really like the teing stuff I Like To Break Stuff I",
    "start": "102240",
    "end": "107799"
  },
  {
    "text": "like to destroy all the new technologies and find flaws in it uh you can also reach me on Twitter you can write me an",
    "start": "107799",
    "end": "114719"
  },
  {
    "text": "email come to come to us after the presentation we are here for the whole uh conference so every time come to us",
    "start": "114719",
    "end": "122200"
  },
  {
    "text": "talk to us if you're interested in that stuff of course there's also a research team so we are part of this research",
    "start": "122200",
    "end": "128800"
  },
  {
    "text": "team at CS University of Technology and especially on uh this",
    "start": "128800",
    "end": "134480"
  },
  {
    "text": "talk there were a lot of people involved in that as Clementine Maurice Lucas",
    "start": "134480",
    "end": "140400"
  },
  {
    "text": "Daniel Cruz Carlo Alberto buano Kaa and Stefan mangard all from Gratz University",
    "start": "140400",
    "end": "146280"
  },
  {
    "text": "of Technology so first you might have wondered what is a cover",
    "start": "146280",
    "end": "152760"
  },
  {
    "text": "channel so we had it in the title maybe not all not all of you know what a cover channel is so in a cover channel two",
    "start": "152760",
    "end": "160319"
  },
  {
    "text": "programs would like to communicate but the problem is they are not allowed to do so what does that mean",
    "start": "160319",
    "end": "168239"
  },
  {
    "text": "so either there is no communication Channel like you have uh virtual machines and they're not connected to",
    "start": "168239",
    "end": "174200"
  },
  {
    "text": "the internet there's no shared memory there's no access to the file system no shared clipboard no interpress",
    "start": "174200",
    "end": "179959"
  },
  {
    "text": "communication so no way to communicate so it's just not possible or the other",
    "start": "179959",
    "end": "186040"
  },
  {
    "text": "possibility is you have a communication Channel but you're not allowed to use it",
    "start": "186040",
    "end": "192040"
  },
  {
    "text": "so imagine for example a firewall so you have your application and it runs on a",
    "start": "192040",
    "end": "197760"
  },
  {
    "text": "computer with internet connection but you have firewall preventing the application from accessing the internet",
    "start": "197760",
    "end": "203879"
  },
  {
    "text": "so the application cannot use this communication Channel and it might be",
    "start": "203879",
    "end": "209879"
  },
  {
    "text": "stopped or just blocked so we have to use a side Channel",
    "start": "209879",
    "end": "215400"
  },
  {
    "text": "some other channel to communicate that is stealthy so no one can see us and no",
    "start": "215400",
    "end": "220799"
  },
  {
    "text": "application can detect that we are communicating and we have a nice",
    "start": "220799",
    "end": "226000"
  },
  {
    "text": "illustration for that so we have two Cloud instances Illustrated as actual",
    "start": "226000",
    "end": "231360"
  },
  {
    "text": "clouds in the image on the left side we have all our cat images stored our",
    "start": "231360",
    "end": "237360"
  },
  {
    "text": "precious cat images and this virtual machine is connected to the internet and",
    "start": "237360",
    "end": "242599"
  },
  {
    "text": "we have firewall there because we really don't want to lose our cat images and on",
    "start": "242599",
    "end": "247799"
  },
  {
    "text": "the right side we have another virtual machine where we are the attacker and try to get the cat images and on the",
    "start": "247799",
    "end": "255120"
  },
  {
    "text": "virtual machine with the cat images we have this Gallery app which we also",
    "start": "255120",
    "end": "260519"
  },
  {
    "text": "control but it cannot connect to the Internet so we have to build a covered",
    "start": "260519",
    "end": "267000"
  },
  {
    "text": "channel so we use we exploit some hardware issues for example in the CPU",
    "start": "267000",
    "end": "273600"
  },
  {
    "text": "to build another channel that does not go over the network but as the cloud instances are running on the same",
    "start": "273600",
    "end": "279680"
  },
  {
    "text": "physical host they can communicate for example through the CPU so there's a cover channel it's a channel not meant",
    "start": "279680",
    "end": "286919"
  },
  {
    "text": "to be used for any communication between two parties and building such a cover",
    "start": "286919",
    "end": "294080"
  },
  {
    "text": "Channel poses a lot of challenges so first of all we need some",
    "start": "294080",
    "end": "299800"
  },
  {
    "text": "channel so we need a way to communicate between the virtual machine instances if we have the side Channel",
    "start": "299800",
    "end": "307759"
  },
  {
    "text": "then we have to build a Communication channel on top of the side channel to actually transmit",
    "start": "307759",
    "end": "313800"
  },
  {
    "text": "data of course there's a sender and the receiver and we have to synchronize them",
    "start": "313800",
    "end": "319240"
  },
  {
    "text": "so it's actually possible to use the communication channel to send data from sender and",
    "start": "319240",
    "end": "324800"
  },
  {
    "text": "receiver and as with every communication channels there will be transmission error",
    "start": "324800",
    "end": "330240"
  },
  {
    "text": "think of some Wireless channels or on a wire you will always have some errors in",
    "start": "330240",
    "end": "336160"
  },
  {
    "text": "there on the transmission and you have to correct them because broken data is",
    "start": "336160",
    "end": "341400"
  },
  {
    "text": "not really useful and if we have that we really like to have some application on top",
    "start": "341400",
    "end": "348160"
  },
  {
    "text": "like using SSH to communicate from the sender to the",
    "start": "348160",
    "end": "353560"
  },
  {
    "text": "receiver so before we can tackle all those challenges we have to get a bit of",
    "start": "353560",
    "end": "359080"
  },
  {
    "text": "background and we start with CPU caches if you take your normal computer",
    "start": "359080",
    "end": "366800"
  },
  {
    "text": "you have main memory in there and Main memory is kind of slow so CPUs get",
    "start": "366800",
    "end": "373360"
  },
  {
    "text": "faster every year you get new generations of CPUs and they will be faster all the time but main memory",
    "start": "373360",
    "end": "380720"
  },
  {
    "text": "cannot catch up with the speed of the CPUs so main memory gets faster but not",
    "start": "380720",
    "end": "386039"
  },
  {
    "text": "as fast as CPUs gets faster so we have those caches inside",
    "start": "386039",
    "end": "392440"
  },
  {
    "text": "the CPUs that buffer frequently used data so data that is frequently used",
    "start": "392440",
    "end": "397800"
  },
  {
    "text": "from from the memory is stored in these caches and they are really a lot",
    "start": "397800",
    "end": "403479"
  },
  {
    "text": "faster and every access to the main to the main memory goes through the cache",
    "start": "403479",
    "end": "408960"
  },
  {
    "text": "and those caches are transparent to the operating system in the software that means if you are a developer if you're",
    "start": "408960",
    "end": "416440"
  },
  {
    "text": "operating system de developer or a application developer but you do not do not have to care about caches that's all",
    "start": "416440",
    "end": "422879"
  },
  {
    "text": "handled in Hardware we cannot see that so if you access the memory data is loaded in the cache and if you access it",
    "start": "422879",
    "end": "429960"
  },
  {
    "text": "again it will most likely be in the cache if it's accessed often and we get",
    "start": "429960",
    "end": "435080"
  },
  {
    "text": "it faster so we do not care about caches usually but can we see caches and yes if",
    "start": "435080",
    "end": "444479"
  },
  {
    "text": "you want to see caches we can actually see them so here we have have an a histogram",
    "start": "444479",
    "end": "451400"
  },
  {
    "text": "of access time so we just measured how long it takes to access a variable some",
    "start": "451400",
    "end": "457080"
  },
  {
    "text": "data in memory and what we see here is how long it takes to access data that has to be",
    "start": "457080",
    "end": "463720"
  },
  {
    "text": "fetched from the main memory that is not cached and we see a clear cut on the",
    "start": "463720",
    "end": "469080"
  },
  {
    "text": "left side it will never be faster than around 220 cyclist that's the memory latency the memory bus",
    "start": "469080",
    "end": "475840"
  },
  {
    "text": "latency it won't be faster than that and we can also see a logarithmic scale so",
    "start": "475840",
    "end": "481960"
  },
  {
    "text": "really most of the cases are around 220 and if we then access data which is",
    "start": "481960",
    "end": "490520"
  },
  {
    "text": "in the cache so that does not have to be fetched from the main memory but can",
    "start": "490520",
    "end": "495759"
  },
  {
    "text": "directly be served from the cach that's faster and we can see that's uh as fast",
    "start": "495759",
    "end": "502960"
  },
  {
    "text": "as 50 CPU Cycles to get data from the cache and we have a a small overlap",
    "start": "502960",
    "end": "510000"
  },
  {
    "text": "but as is a logarithmic scale that's negligible it's just a few it's like 10",
    "start": "510000",
    "end": "515279"
  },
  {
    "text": "cases and here are multiple million cases so we can clearly distinguish from",
    "start": "515279",
    "end": "520680"
  },
  {
    "text": "with this histogram if data is already cached or if it has to be fetched from the main",
    "start": "520680",
    "end": "527120"
  },
  {
    "text": "memory and so we can actually see if data is in the cache or",
    "start": "527120",
    "end": "532519"
  },
  {
    "text": "not and then we have to look at how the cache actually works so we have",
    "start": "532519",
    "end": "538640"
  },
  {
    "text": "different levels of caches in ital CPUs we have a level one cache that's the closest to the CPU it's the fastest but",
    "start": "538640",
    "end": "546079"
  },
  {
    "text": "also the smallest then there's the level two cache it's a bit larger but also not",
    "start": "546079",
    "end": "553120"
  },
  {
    "text": "that that large and then we have the most interesting last level cache the",
    "start": "553120",
    "end": "558720"
  },
  {
    "text": "level one and level two cache are per CPU core so every CPU core has its own",
    "start": "558720",
    "end": "564000"
  },
  {
    "text": "level one and level two cache but the last level cache is shared among all C",
    "start": "564000",
    "end": "570360"
  },
  {
    "text": "cores uh so every CPU core can access the whole last level cache and the the last level cache is",
    "start": "570360",
    "end": "578000"
  },
  {
    "text": "also sliced so every core gets its own slice of the last level cache and but",
    "start": "578000",
    "end": "584160"
  },
  {
    "text": "can access the other slices via a ring bus in the in",
    "start": "584160",
    "end": "589760"
  },
  {
    "text": "hardware and it also has a nice property everything that is stored in the L1 and the L2 cache is also stored in the level",
    "start": "589760",
    "end": "597000"
  },
  {
    "text": "three cache in the last level cache so we can find all the data there and the last level cache is really huge",
    "start": "597000",
    "end": "603399"
  },
  {
    "text": "compared to the level one and level two cache so if we then look at the details",
    "start": "603399",
    "end": "609920"
  },
  {
    "text": "how that data is actually stored in the cache uh we have to look at the physical",
    "start": "609920",
    "end": "616200"
  },
  {
    "text": "address of our memory location so we take the address of the",
    "start": "616200",
    "end": "621560"
  },
  {
    "text": "data and then we have this physical address and we can we can have a lot of",
    "start": "621560",
    "end": "626600"
  },
  {
    "text": "bits there in the address we ignore the least significant six bits they're not",
    "start": "626600",
    "end": "632399"
  },
  {
    "text": "used for the for the cach position and then we have 11 bits in the physical",
    "start": "632399",
    "end": "638240"
  },
  {
    "text": "address bit 6 to 16 and that determines the cache set so every slice in the last",
    "start": "638240",
    "end": "645800"
  },
  {
    "text": "level cache is divided into 248 cach sets and this cach set is determined by",
    "start": "645800",
    "end": "652959"
  },
  {
    "text": "this bits in the address and as this is not complicated",
    "start": "652959",
    "end": "658200"
  },
  {
    "text": "enough every cach set is also divided into ways so we usually have something",
    "start": "658200",
    "end": "665200"
  },
  {
    "text": "between 12 or 16 ways per cach set and to make it even more complicated",
    "start": "665200",
    "end": "673079"
  },
  {
    "text": "for terms we call it a cach line so the data is then stored in such a cach line",
    "start": "673079",
    "end": "680480"
  },
  {
    "text": "and the cach set is deterministic by the physic address but the way is not this",
    "start": "680480",
    "end": "686160"
  },
  {
    "text": "is determined by the cash replacement policy and Intel does not disclose this",
    "start": "686160",
    "end": "693079"
  },
  {
    "text": "function there was a recent work by Cru at Al that reverse engineered dysfunction so we have a good",
    "start": "693079",
    "end": "700040"
  },
  {
    "text": "approximation on how this works we don't know if it's correct but it works really well in",
    "start": "700040",
    "end": "706600"
  },
  {
    "text": "practice so that we now have a a brief introduction to how the last level cach",
    "start": "706600",
    "end": "712600"
  },
  {
    "text": "works we will start with our first cach attack it's called Prime and probe so we",
    "start": "712600",
    "end": "718600"
  },
  {
    "text": "can actually do something with this information and with Prime and probe we",
    "start": "718600",
    "end": "725000"
  },
  {
    "text": "exploit the timing differences when accessing cache data and uncashed data",
    "start": "725000",
    "end": "730040"
  },
  {
    "text": "we have seen that in the histogram before we can clearly see a timing difference if data is in a cache or not",
    "start": "730040",
    "end": "735360"
  },
  {
    "text": "in the cache and with Prime and probe we're able to monitor exactly one cache set",
    "start": "735360",
    "end": "741600"
  },
  {
    "text": "and monitor the activity in this cach set the nice thing about theack is it",
    "start": "741600",
    "end": "747040"
  },
  {
    "text": "works on the last level cache and the last level cache is shared among all the CPU cores so it works across CPU cores",
    "start": "747040",
    "end": "755120"
  },
  {
    "text": "and we don't have to be on the same core uh this is a typical setting for the prime and probe we have we want to",
    "start": "755120",
    "end": "763079"
  },
  {
    "text": "transmit data from a sender to a receiver and we have the cach in the",
    "start": "763079",
    "end": "768959"
  },
  {
    "text": "Middle with every line symbolizes a cach set and the receiver has a few addresses",
    "start": "768959",
    "end": "777760"
  },
  {
    "text": "that map exactly to where where all addresses mapped to the same cach set so",
    "start": "777760",
    "end": "783800"
  },
  {
    "text": "if the receiver accesses all those addresses the cach set will be filled with the receiver's",
    "start": "783800",
    "end": "790240"
  },
  {
    "text": "addresses and if the sender wants to send something to the receiver tell the",
    "start": "790240",
    "end": "795399"
  },
  {
    "text": "receiver hey I'm here then it just takes other addresses that map also do the",
    "start": "795399",
    "end": "801800"
  },
  {
    "text": "same cach set so the sender accesses addresses mapping to the same cach set",
    "start": "801800",
    "end": "807880"
  },
  {
    "text": "and as the cach set is already already full what will happen the receiver data",
    "start": "807880",
    "end": "813199"
  },
  {
    "text": "is evicted from the cache it gots gets thrown out and replaced by the sender's",
    "start": "813199",
    "end": "819839"
  },
  {
    "text": "data and after that it's again the receiver's turn and the receiver will",
    "start": "819839",
    "end": "825399"
  },
  {
    "text": "again access the addresses mapping to this cache set and if the receiver Access Data",
    "start": "825399",
    "end": "831639"
  },
  {
    "text": "that's still in the cache we've seen it in histogram it's fast and if the data is not in the cache",
    "start": "831639",
    "end": "838000"
  },
  {
    "text": "because it was thrown out by the sender it will see a slow access and then the",
    "start": "838000",
    "end": "843560"
  },
  {
    "text": "receiver knows okay the sender did something in this cash set it tried to send me something so that's the basic",
    "start": "843560",
    "end": "850920"
  },
  {
    "text": "idea behind Prime and probe and with that we would like to",
    "start": "850920",
    "end": "856959"
  },
  {
    "text": "build a robust cover channel so we know the basics and we want to use that in a",
    "start": "856959",
    "end": "864000"
  },
  {
    "text": "way to build a real communication Channel and our goal is",
    "start": "864000",
    "end": "869560"
  },
  {
    "text": "that we have this cover channel that works across virtual machines so we really want to communicate from one",
    "start": "869560",
    "end": "875680"
  },
  {
    "text": "virtual machine to a different virtual machine uh to have it really practical",
    "start": "875680",
    "end": "882320"
  },
  {
    "text": "we want to run it on the Amazon Cloud so if it works on Amazon clout then it's actually practical and we can use it and",
    "start": "882320",
    "end": "888800"
  },
  {
    "text": "we can see that's a real threat because a lot of companies use the Amazon clout and it should be fast so in",
    "start": "888800",
    "end": "896639"
  },
  {
    "text": "Academia there are a lot of Publications about cover channels and they're often",
    "start": "896639",
    "end": "901920"
  },
  {
    "text": "in the range of several bits per second that's not fun to transmit data",
    "start": "901920",
    "end": "907320"
  },
  {
    "text": "if you just have a few bits per second that's really slow if you want to steal or exfiltrate data so we want to have",
    "start": "907320",
    "end": "915040"
  },
  {
    "text": "multiple kilobytes per second on this communication channel so it should be really fast or comparable",
    "start": "915040",
    "end": "923000"
  },
  {
    "text": "fast and a fast channel is not enough for us we also want it to be free of",
    "start": "923000",
    "end": "928360"
  },
  {
    "text": "transmission erors because because what's what's the use of a channel that is fast but everything you send through",
    "start": "928360",
    "end": "935480"
  },
  {
    "text": "this channel is then garbled and you can't use the data so you really want to have it free of transmission errors the",
    "start": "935480",
    "end": "942600"
  },
  {
    "text": "data you sent in should be the same that gets out and we don't want to have it working",
    "start": "942600",
    "end": "950279"
  },
  {
    "text": "only on lab settings so that's also the problem with many academic Publications",
    "start": "950279",
    "end": "957399"
  },
  {
    "text": "they work on lab settings so if you have your own uh PC and run it there it works perfectly but if you go to the real",
    "start": "957399",
    "end": "963519"
  },
  {
    "text": "world like on Amazon gout where you have a lot of noise a lot of activity they stop working and we want to have it",
    "start": "963519",
    "end": "971240"
  },
  {
    "text": "robust so it works in the real world on the Amazon",
    "start": "971240",
    "end": "976360"
  },
  {
    "text": "Cloud and that's why we have to tackle a lot of challenges so the first thing is this",
    "start": "976360",
    "end": "983399"
  },
  {
    "text": "cross VM side Channel and we require a side Channel which works across virtual machines so",
    "start": "983399",
    "end": "990360"
  },
  {
    "text": "we need a way a new channel where we can communicate from one virtual machine to",
    "start": "990360",
    "end": "996160"
  },
  {
    "text": "another one and we do not want to rely on software bugs software bugs can be",
    "start": "996160",
    "end": "1001680"
  },
  {
    "text": "batched that's easy and it's boring because then our talk would be worthless",
    "start": "1001680",
    "end": "1007959"
  },
  {
    "text": "if someone provides a badge for that we want to exploit the hardware that's much",
    "start": "1007959",
    "end": "1013160"
  },
  {
    "text": "more fun you cannot patch the hardware int has to produce another version of",
    "start": "1013160",
    "end": "1019160"
  },
  {
    "text": "CPUs or apply a micro code update so it's much more fun to exploit the hardware that cannot be batched",
    "start": "1019160",
    "end": "1027079"
  },
  {
    "text": "easily uh so what do we have to what can we use as a Communication channel so the",
    "start": "1027079",
    "end": "1033720"
  },
  {
    "text": "memory is shared between all virtual machines so that sounds nice that should",
    "start": "1033720",
    "end": "1039400"
  },
  {
    "text": "be a possibility to use as a communication side Channel and when we think about memory",
    "start": "1039400",
    "end": "1046918"
  },
  {
    "text": "we think of dram the main memory and yep that has been done we built a",
    "start": "1046919",
    "end": "1052799"
  },
  {
    "text": "cover Channel and fog and I presented at blackhead Europe last year we built a",
    "start": "1052799",
    "end": "1058000"
  },
  {
    "text": "cover Channel using dram and it worked we could communicate there it was not",
    "start": "1058000",
    "end": "1063200"
  },
  {
    "text": "that fast but it worked and what else is shared we have",
    "start": "1063200",
    "end": "1068520"
  },
  {
    "text": "the shared cash and as you've expected this talk is about a Cash cover",
    "start": "1068520",
    "end": "1074320"
  },
  {
    "text": "channel so we will be using the cash for that and and we can use prime and probe",
    "start": "1074320",
    "end": "1081240"
  },
  {
    "text": "for the side Channel because Prime and pro probe works on the last level cache so it works in the cache perfect we know",
    "start": "1081240",
    "end": "1088720"
  },
  {
    "text": "that the last level cach is shared among all CPU cores so we can do a cross core",
    "start": "1088720",
    "end": "1093840"
  },
  {
    "text": "cover Channel and we don't have any requirement for any for any form of",
    "start": "1093840",
    "end": "1099080"
  },
  {
    "text": "shared memory so there's no need for a special setup",
    "start": "1099080",
    "end": "1104679"
  },
  {
    "text": "here we just need to build eviction set and negotiate the used cach sets so as",
    "start": "1104679",
    "end": "1110480"
  },
  {
    "text": "we have seen in the animation before we need those addresses that map to the same cach set so that we can fill a cach",
    "start": "1110480",
    "end": "1118720"
  },
  {
    "text": "set and the those addresses have to be in the same cache set and in the same",
    "start": "1118720",
    "end": "1126000"
  },
  {
    "text": "slice of the last level cache the problem here is the to deter",
    "start": "1126000",
    "end": "1132360"
  },
  {
    "text": "determine the slice number is not that easy because to calculate the slice number you need all bits of the phys",
    "start": "1132360",
    "end": "1139080"
  },
  {
    "text": "address and for security reasons you do not get the whole physical address on Modern operating",
    "start": "1139080",
    "end": "1145240"
  },
  {
    "text": "systems you only get parts of it so if you use this feature called 2 megabyte",
    "start": "1145240",
    "end": "1151000"
  },
  {
    "text": "Pages then uh the hardware exposes the least significant 21 bits of the",
    "start": "1151000",
    "end": "1156840"
  },
  {
    "text": "physical address to you they're then equal to the uh 21 least significant",
    "start": "1156840",
    "end": "1162280"
  },
  {
    "text": "bits of the virtual address so we get the least significant 21 bits but not",
    "start": "1162280",
    "end": "1167440"
  },
  {
    "text": "the remaining bits but to calculate this slice we need all the bits so that's a",
    "start": "1167440",
    "end": "1173360"
  },
  {
    "text": "problem but we can calculate the cache set because it's bit 16 6 to 16 that's",
    "start": "1173360",
    "end": "1181159"
  },
  {
    "text": "in the first in the least significant 21 bits we can calculate that so we just",
    "start": "1181159",
    "end": "1186679"
  },
  {
    "text": "build a set of addresses that are in the same cach set and in some",
    "start": "1186679",
    "end": "1192280"
  },
  {
    "text": "slice without knowing which slice it is and then we can remove the addresses",
    "start": "1192280",
    "end": "1199440"
  },
  {
    "text": "until all the addresses are gone which are on the wrong slide so we check if they still fill the cach set and if they",
    "start": "1199440",
    "end": "1205360"
  },
  {
    "text": "do it's fine and we can remove another address until we cannot remove an address anymore and then we are left",
    "start": "1205360",
    "end": "1211080"
  },
  {
    "text": "with a set of addresses that fill exactly one cach set so we unlocked our first achievement",
    "start": "1211080",
    "end": "1218720"
  },
  {
    "text": "we have this cross VM side Channel and with that we can build a",
    "start": "1218720",
    "end": "1225520"
  },
  {
    "text": "Communication channel so um now that we have covered um how we can communicate",
    "start": "1225520",
    "end": "1231320"
  },
  {
    "text": "with each other we still need to find a common Communication channel because it",
    "start": "1231320",
    "end": "1237360"
  },
  {
    "text": "does um if we talk to each other and I talk far away from you and you can't hear me then it's no use that we have",
    "start": "1237360",
    "end": "1244080"
  },
  {
    "text": "some basis to communicate also we have to negotiate them dynamically because we on Virtual",
    "start": "1244080",
    "end": "1250120"
  },
  {
    "text": "machines that don't know from each other so it has to work dynamically also as you mentioned before",
    "start": "1250120",
    "end": "1257159"
  },
  {
    "text": "there will always be noise on the cach sets so here you can see um a quiet",
    "start": "1257159",
    "end": "1263080"
  },
  {
    "text": "system and an Nono quiet system even in a quiet system you can see um there is",
    "start": "1263080",
    "end": "1268600"
  },
  {
    "text": "noise all the time there are just small noise spikes and if we then have some activity like watching a full HD video",
    "start": "1268600",
    "end": "1276640"
  },
  {
    "text": "we can see that we have much noise this is actually pretty similar to",
    "start": "1276640",
    "end": "1282080"
  },
  {
    "text": "wireless communication so wireless communication channels experience the same problems that we have now so if we",
    "start": "1282080",
    "end": "1288640"
  },
  {
    "text": "we have here now several um examples of how um noise or communication looks on a",
    "start": "1288640",
    "end": "1296200"
  },
  {
    "text": "wireless communication Channel we always have a noise flow which is around minus 90 DB and for PLO we have some small",
    "start": "1296200",
    "end": "1302440"
  },
  {
    "text": "spikes which much space in between um if we have a microwave okay no one uses a",
    "start": "1302440",
    "end": "1307480"
  },
  {
    "text": "microwave to communicate with each other but it blocks all communication it's really strong and it just blocks all",
    "start": "1307480",
    "end": "1313120"
  },
  {
    "text": "communication you can see all the spikes that we have are really long and really strong compared to to for example",
    "start": "1313120",
    "end": "1319440"
  },
  {
    "text": "Bluetooth now if we look at Wi-Fi we have very small spikes which are many",
    "start": "1319440",
    "end": "1325240"
  },
  {
    "text": "but small and not that long so now there is an idea to so that",
    "start": "1325240",
    "end": "1331360"
  },
  {
    "text": "we can actually find each other from one virtual machine to each other and the idea is he who shouts the loudest will",
    "start": "1331360",
    "end": "1337760"
  },
  {
    "text": "be heard so basically one party just generates a lot of noise on the channel",
    "start": "1337760",
    "end": "1343360"
  },
  {
    "text": "and the other party then listens and monitors the communication Channel and",
    "start": "1343360",
    "end": "1349080"
  },
  {
    "text": "now if we're listening on the correct Channel then we see that the noise level is always the same because the other",
    "start": "1349080",
    "end": "1355919"
  },
  {
    "text": "person is generating much noise so if the noise level never Falls below a certain um value we know that we",
    "start": "1355919",
    "end": "1362640"
  },
  {
    "text": "are talking to our partner that our communication partner is there generating this noise this is also",
    "start": "1362640",
    "end": "1368480"
  },
  {
    "text": "actually from um a wireless communication so my colleague buano um",
    "start": "1368480",
    "end": "1373799"
  },
  {
    "text": "published this as a jamming agreement for wireless communication in sigi Networks so here we see first we have",
    "start": "1373799",
    "end": "1380360"
  },
  {
    "text": "the normal noise flow and then the jamming agreement we see that we raise the noise flow to a certain level and",
    "start": "1380360",
    "end": "1387120"
  },
  {
    "text": "stay there for a certain period of time the other party now listens on the",
    "start": "1387120",
    "end": "1392159"
  },
  {
    "text": "jannel and sees okay that noise flow never Falls below this this value here",
    "start": "1392159",
    "end": "1397960"
  },
  {
    "text": "and therefore we know that we are communicating with each other and that our partner is saying yeah I got what",
    "start": "1397960",
    "end": "1403000"
  },
  {
    "text": "you sent me I agree um and that works even if there is noise",
    "start": "1403000",
    "end": "1409279"
  },
  {
    "text": "so because noise is normally short and spiky we just have to be longer than the longest noise we um have to expect and",
    "start": "1409279",
    "end": "1416640"
  },
  {
    "text": "we see that it also works if we have Wi-Fi interference so why do we need that",
    "start": "1416640",
    "end": "1423480"
  },
  {
    "text": "because we just saw how we can talk to each other Mel explained it before use",
    "start": "1423480",
    "end": "1428880"
  },
  {
    "text": "the cache but now the sender has some cach sets with it which it can use for communication and the receiver also has",
    "start": "1428880",
    "end": "1434880"
  },
  {
    "text": "some cat sets but how does the receiver know if the sender sends basically on",
    "start": "1434880",
    "end": "1440400"
  },
  {
    "text": "channel one that this is actually Channel One the receiver doesn't know that so we have to correctly label the",
    "start": "1440400",
    "end": "1446080"
  },
  {
    "text": "channel on the receiver side therefore the sender starts with his channel one",
    "start": "1446080",
    "end": "1452279"
  },
  {
    "text": "and primes it now the receiver tries to find the channel one so it will also",
    "start": "1452279",
    "end": "1457880"
  },
  {
    "text": "Prime some of its Channel and now the sender looks okay",
    "start": "1457880",
    "end": "1464640"
  },
  {
    "text": "did my colleague just find me and prime the same um data cach set if yes the",
    "start": "1464640",
    "end": "1471520"
  },
  {
    "text": "access time would be long but it's fast so we did not find each other so now the",
    "start": "1471520",
    "end": "1476960"
  },
  {
    "text": "receiver also checks did did I find my sender in this case no we didn't so the",
    "start": "1476960",
    "end": "1483799"
  },
  {
    "text": "acccess time is fast because we know if we access cache data it's fast so now we",
    "start": "1483799",
    "end": "1489320"
  },
  {
    "text": "repeat that we Prime the receiver also primes again a different cach set because it tries everything it has",
    "start": "1489320",
    "end": "1496399"
  },
  {
    "text": "through and we did not find each other again then we try again and again and",
    "start": "1496399",
    "end": "1503240"
  },
  {
    "text": "until we find each other and when the sender and the receiver Prime the same cach set the receiver will then evict",
    "start": "1503240",
    "end": "1510200"
  },
  {
    "text": "all the data from the sender's cach set so when the sender then probes its cash set the access time will be long because",
    "start": "1510200",
    "end": "1516720"
  },
  {
    "text": "its data has been evicted now if the receiver also probes the same cash set to try to see if it",
    "start": "1516720",
    "end": "1523320"
  },
  {
    "text": "found the sender it will also experience um long ACC time so we know we found",
    "start": "1523320",
    "end": "1530520"
  },
  {
    "text": "each other so we have correctly labeled our first channel so we have another achievement",
    "start": "1530520",
    "end": "1536919"
  },
  {
    "text": "unlocked we found each other in the cloud now if we go and repeat that for",
    "start": "1536919",
    "end": "1542320"
  },
  {
    "text": "all the channels that we want to use we have agreed on common channels and our achievement unlocked so what we did not",
    "start": "1542320",
    "end": "1549760"
  },
  {
    "text": "talk about yet quite clearly is how are we actually communicating with others so here is an illustration for that we have",
    "start": "1549760",
    "end": "1557240"
  },
  {
    "text": "the center um on the right side and receiver on the left side so as a first step the receiver evicts all the cach",
    "start": "1557240",
    "end": "1564240"
  },
  {
    "text": "sets it wants to use for communication now the sender looks at its data uh which in this case is 0 1 0",
    "start": "1564240",
    "end": "1571720"
  },
  {
    "text": "0 1 0 0 and for a zero we don't have to do anything for a one we evict the cash",
    "start": "1571720",
    "end": "1579159"
  },
  {
    "text": "set now if the receiver then accesses probes the the cach sets and measures",
    "start": "1579159",
    "end": "1585200"
  },
  {
    "text": "its access access times it realizes for zero the access time is very fast and",
    "start": "1585200",
    "end": "1590480"
  },
  {
    "text": "for a one the access time is very long so we correctly then have transmitted 01 0 0 1 0 0 now let's look",
    "start": "1590480",
    "end": "1599120"
  },
  {
    "text": "at another example just for clarity now the sender wants to send 0 0 1 0 1 0 01",
    "start": "1599120",
    "end": "1605159"
  },
  {
    "text": "and again evicts all the cash sets so the cash set number three five and",
    "start": "1605159",
    "end": "1610960"
  },
  {
    "text": "eight now the receiver again probes all the cach sets and measures the excess times and measures long excess times on",
    "start": "1610960",
    "end": "1618039"
  },
  {
    "text": "cash set 3 5 and 8 and short excess times on all the other C sets and therefore",
    "start": "1618039",
    "end": "1624679"
  },
  {
    "text": "realizes yes we have this word transmitted so now that we can talk to",
    "start": "1624679",
    "end": "1630679"
  },
  {
    "text": "each other we can also transmit files right if we can transmit bits and words and bytes we can also just transmit",
    "start": "1630679",
    "end": "1636399"
  },
  {
    "text": "files so why don't we just take this picture of this butterfly and put it into our Channel well we did that and it",
    "start": "1636399",
    "end": "1645480"
  },
  {
    "text": "looked like this here of course this is not usable right but still we have",
    "start": "1645480",
    "end": "1651360"
  },
  {
    "text": "another achievement locked first Transmissions it wasn't usable right but still we're",
    "start": "1651360",
    "end": "1656559"
  },
  {
    "text": "fine so then we thought so now in Academia it's always say so now we have",
    "start": "1656559",
    "end": "1663279"
  },
  {
    "text": "a communication Channel now we can transmit some bits we have some error rate which is abundantly high but it's",
    "start": "1663279",
    "end": "1669840"
  },
  {
    "text": "still fine so we can just use error correction applied to this picture here",
    "start": "1669840",
    "end": "1675000"
  },
  {
    "text": "right because it's easy anyways error correction has done and done beforehand on all the communication we have but",
    "start": "1675000",
    "end": "1682279"
  },
  {
    "text": "that's not how error correction works because you always have to do some other steps first error correction is not a",
    "start": "1682279",
    "end": "1687760"
  },
  {
    "text": "magic device where you put your data into and then the correct data will be just come out of it so what we have to",
    "start": "1687760",
    "end": "1694720"
  },
  {
    "text": "do first will be explained Again by Michel so what we have to do here is we",
    "start": "1694720",
    "end": "1702240"
  },
  {
    "text": "have to synchronize the receiver and the sender better so that they actually are in sync and sending the data correctly",
    "start": "1702240",
    "end": "1709039"
  },
  {
    "text": "at the at the same time because what we see here in this image are mostly synchronization errors so in a perfect",
    "start": "1709039",
    "end": "1717240"
  },
  {
    "text": "world we have the sender and the receiver and if the sender sends 1 0 0 1 1 0 the receiver also receives one1 1 0",
    "start": "1717240",
    "end": "1726279"
  },
  {
    "text": "that's the perfect world that would be nice but we're not living in a perfect world so what is happening here the",
    "start": "1726279",
    "end": "1734080"
  },
  {
    "text": "sender send some data and some of the data gets lost so why does it get lost",
    "start": "1734080",
    "end": "1740600"
  },
  {
    "text": "the sender is just a normal program sending stuff by evicting cash sets and the receiver is also normal program",
    "start": "1740600",
    "end": "1746559"
  },
  {
    "text": "running and as you know the operating system schedules programs so not every",
    "start": "1746559",
    "end": "1752080"
  },
  {
    "text": "program is running all the time if the sender now runs and sends",
    "start": "1752080",
    "end": "1757240"
  },
  {
    "text": "the data and the receiver is at some point not scheduled anymore so it's just not running then it cannot receive any",
    "start": "1757240",
    "end": "1763760"
  },
  {
    "text": "data but the Senter does not know about this it's completely transparent and the receiver just misses data and",
    "start": "1763760",
    "end": "1772399"
  },
  {
    "text": "that's not like one two or three bits here it's it's a long time so it's can",
    "start": "1772399",
    "end": "1777960"
  },
  {
    "text": "be up to multiple milliseconds and we're losing like 100 to multiple thousand",
    "start": "1777960",
    "end": "1783399"
  },
  {
    "text": "bits if it would be just one or five bits or something then it could be corrected by error correction but if we",
    "start": "1783399",
    "end": "1789960"
  },
  {
    "text": "lose thousands of bits then that can be corrected with any error correction and we have another case",
    "start": "1789960",
    "end": "1797640"
  },
  {
    "text": "that's the opposite case so the sender at some point sends and then is interrupted by the operating system so",
    "start": "1797640",
    "end": "1804679"
  },
  {
    "text": "it cannot send anymore but the receiver happily receives data which the sender",
    "start": "1804679",
    "end": "1810480"
  },
  {
    "text": "never sent but the receiver doesn't noce the sender is not running it's just not scheduled by the operating system and",
    "start": "1810480",
    "end": "1817720"
  },
  {
    "text": "the receiver receives data and what does the receiver receive is garbage of course but it will be in most cases zero",
    "start": "1817720",
    "end": "1825519"
  },
  {
    "text": "because the Senter is not running it cannot evict sets so it's always not evicted and not evicted means zero so",
    "start": "1825519",
    "end": "1833000"
  },
  {
    "text": "the receiver receives a lot of zeros like thousands of zeros that's also something uh typical error correction",
    "start": "1833000",
    "end": "1840480"
  },
  {
    "text": "cannot correct if it has so many insertions and only sometimes we have",
    "start": "1840480",
    "end": "1846799"
  },
  {
    "text": "this actual substitution errors so that are errors which can be corrected by your typical error correction mechanism",
    "start": "1846799",
    "end": "1853880"
  },
  {
    "text": "where we just have bit flips so we wanted to send a zero byte receive a one uh zero bit receive a one bit or send a",
    "start": "1853880",
    "end": "1861559"
  },
  {
    "text": "one bit and receive the zero bit that can be easily corrected by an error",
    "start": "1861559",
    "end": "1866840"
  },
  {
    "text": "correction code but that's just in a few cases in most cases it's that either the",
    "start": "1866840",
    "end": "1872159"
  },
  {
    "text": "sender is not scheduled or the receiver is not scheduled and we miss a lot of bits or have a lot of garbage",
    "start": "1872159",
    "end": "1878679"
  },
  {
    "text": "bits and we have to cope with that so to cope with deletion errors we use a",
    "start": "1878679",
    "end": "1884200"
  },
  {
    "text": "request to send scheme and you know that from typically protocols like TCP we use backets so we",
    "start": "1884200",
    "end": "1892600"
  },
  {
    "text": "chop up our stream and use backets for that and we use 12 bits backets and we",
    "start": "1892600",
    "end": "1898360"
  },
  {
    "text": "add a sequence number use a three bit sequence number for the backets and the receiver acknowledges",
    "start": "1898360",
    "end": "1907039"
  },
  {
    "text": "this package by sending the next sequence number so it always receives the packet and requests the next uh",
    "start": "1907039",
    "end": "1914960"
  },
  {
    "text": "packet from the sender and the important observation is here if",
    "start": "1914960",
    "end": "1921000"
  },
  {
    "text": "you think back the insertion errors are almost almost always zero so we just",
    "start": "1921000",
    "end": "1926840"
  },
  {
    "text": "insert zeros here and if we are able to detect those zeros those additional zeros that do not",
    "start": "1926840",
    "end": "1934039"
  },
  {
    "text": "belong there we can detect many or even most of the insertion errors so what we did we used an error",
    "start": "1934039",
    "end": "1942279"
  },
  {
    "text": "detection code that's just a code that detects error it cannot correct anything but detects the error",
    "start": "1942279",
    "end": "1949159"
  },
  {
    "text": "and in our case we use the Begger codes it's a really simple error detection codes and we added it to the end of the",
    "start": "1949159",
    "end": "1956320"
  },
  {
    "text": "packet for bits for error detection and the B codes are really trivial any one of you can come up with",
    "start": "1956320",
    "end": "1963720"
  },
  {
    "text": "that they just count the number of zeros in a word so this is a nice side effect there",
    "start": "1963720",
    "end": "1970399"
  },
  {
    "text": "is no zero word anymore so if we receive a bunch of zeros we know that it's wrong",
    "start": "1970399",
    "end": "1975720"
  },
  {
    "text": "because the Begger code counts the number of zero bits in a word so if everything would be zero in the backet",
    "start": "1975720",
    "end": "1981760"
  },
  {
    "text": "then the error detection code is a high number and if you just have zeros we know it's wrong so with that we can",
    "start": "1981760",
    "end": "1988559"
  },
  {
    "text": "detect a lot of insertion errors or most of the insertion errors and now we have this achievement",
    "start": "1988559",
    "end": "1995639"
  },
  {
    "text": "unlocked we're able to detect interrupts we can cope with the deletion errors and we can cope with the insertion",
    "start": "1995639",
    "end": "2003559"
  },
  {
    "text": "errors so the protocol looks something like that we have to send and the rece receiver and the receiver starts because",
    "start": "2003559",
    "end": "2010240"
  },
  {
    "text": "it's an request to send scheme and the receiver tells the sender",
    "start": "2010240",
    "end": "2015840"
  },
  {
    "text": "give me the backhead with sequence number one so the sender sends back backhead with sequence number one the",
    "start": "2015840",
    "end": "2023559"
  },
  {
    "text": "receiver acknowledges that by uh requesting backet number two sender",
    "start": "2023559",
    "end": "2029519"
  },
  {
    "text": "sends backhead with number two but the receiver is not scheduled so it cannot",
    "start": "2029519",
    "end": "2035080"
  },
  {
    "text": "receive the data that's why the sender just continues resending the backhead",
    "start": "2035080",
    "end": "2040559"
  },
  {
    "text": "until it's acknowledged so it again sends data with sequence number two then the receive acknowledge is that because",
    "start": "2040559",
    "end": "2047279"
  },
  {
    "text": "it's again scheduled and the sequence number three but the Senter is not scheduled now so this request gets lost",
    "start": "2047279",
    "end": "2056638"
  },
  {
    "text": "and the receiver tries again until the sender answers with the correct pcket",
    "start": "2056639",
    "end": "2062200"
  },
  {
    "text": "and that goes on and on and as we can clearly see we can cope with all the theu in where either the sender or the",
    "start": "2062200",
    "end": "2070079"
  },
  {
    "text": "receiver is not scheduled that's that's why we have another achievement unlocked we actually",
    "start": "2070079",
    "end": "2077398"
  },
  {
    "text": "synchronized the parties so we have the sender and receiver in perfect synchronization now and we do not lose",
    "start": "2077399",
    "end": "2083839"
  },
  {
    "text": "beckets or get garbage beckets okay remember this picture we",
    "start": "2083839",
    "end": "2089638"
  },
  {
    "text": "had this nice butterfly or what remains of the butterfly without the",
    "start": "2089639",
    "end": "2095520"
  },
  {
    "text": "synchronization and now we use it with our scheme and it looks much better so",
    "start": "2095520",
    "end": "2101839"
  },
  {
    "text": "we can actually see the butterfly here but wait it looks a bit noisy right let",
    "start": "2101839",
    "end": "2107079"
  },
  {
    "text": "me zoom in there uh wow there are funny pixels in",
    "start": "2107079",
    "end": "2113280"
  },
  {
    "text": "there with strange colors that do not belong here so that are the actual substitution errors where we flipped",
    "start": "2113280",
    "end": "2119880"
  },
  {
    "text": "some bits in the transmission so can you enhance that oh",
    "start": "2119880",
    "end": "2126119"
  },
  {
    "text": "yes we can so now this is actually where the error correction comes in because",
    "start": "2126119",
    "end": "2133280"
  },
  {
    "text": "this is the case where you should use error correction so that what you saw are the",
    "start": "2133280",
    "end": "2138760"
  },
  {
    "text": "substitution errors that remain and these can be errored using uh corrected using forward error",
    "start": "2138760",
    "end": "2144880"
  },
  {
    "text": "correction we chose to use the widespread read Solomon codes mainly because they are rather simple and",
    "start": "2144880",
    "end": "2150520"
  },
  {
    "text": "they're very efficient there are some other codes that may perform better but they also use more system resources",
    "start": "2150520",
    "end": "2156560"
  },
  {
    "text": "which is why they're not really usable read slon codes are perfect because they do not use much for encoding and only",
    "start": "2156560",
    "end": "2164000"
  },
  {
    "text": "cost a bit when decoding so when you when we talk about read Solomon codes we have to know that",
    "start": "2164000",
    "end": "2171400"
  },
  {
    "text": "packets are made of symbols and the symbol size is for us",
    "start": "2171400",
    "end": "2176839"
  },
  {
    "text": "pretty naturally because we have 12 bits as physical words as you remember so we chose okay our RS symbol size is 12 bits",
    "start": "2176839",
    "end": "2184880"
  },
  {
    "text": "which is then an RS word or read Solomon word word and with that um due to how",
    "start": "2184880",
    "end": "2191400"
  },
  {
    "text": "read Solomon codes work the packet size is given so the packet size can be calculated by 2 to the power of the",
    "start": "2191400",
    "end": "2197800"
  },
  {
    "text": "symbol size minus 1 which equals them to 4,95",
    "start": "2197800",
    "end": "2203280"
  },
  {
    "text": "symbols and also something that is nice when dealing with read Solon codes the",
    "start": "2203280",
    "end": "2209079"
  },
  {
    "text": "packet when encoded consists of the actual message and then following the",
    "start": "2209079",
    "end": "2214200"
  },
  {
    "text": "error correction symbols so so how is this done actually",
    "start": "2214200",
    "end": "2219560"
  },
  {
    "text": "read Solomon codes are just a simple matrix multiplication so we have our data in a vector then we have an",
    "start": "2219560",
    "end": "2226520"
  },
  {
    "text": "identity Matrix together with the um error correcting polom and multiply them",
    "start": "2226520",
    "end": "2232440"
  },
  {
    "text": "with each other and voila and we have then the encoded data which contains the",
    "start": "2232440",
    "end": "2237839"
  },
  {
    "text": "data itself and as promised the correction codes so that sounds a bit abstract so",
    "start": "2237839",
    "end": "2243520"
  },
  {
    "text": "let's look at that with another example here we have a penguin like you may find",
    "start": "2243520",
    "end": "2248599"
  },
  {
    "text": "in wili distributions like Linux and now we want to encode that so what we now expect is we have",
    "start": "2248599",
    "end": "2257520"
  },
  {
    "text": "the penguin chopped up and in between some error correcting codes so and this is actually what happens the penguin is",
    "start": "2257520",
    "end": "2264319"
  },
  {
    "text": "chopped up sliced and then in between we have some error correcting codes and you can see actually how big one packet is",
    "start": "2264319",
    "end": "2271400"
  },
  {
    "text": "if you look at the size of one such slice and of course then transmit more",
    "start": "2271400",
    "end": "2280440"
  },
  {
    "text": "data so to be better safe than sorry we chose to use 10% error correcting code",
    "start": "2280440",
    "end": "2286560"
  },
  {
    "text": "that sounds a bit smart right a bit much right but with 10% error correcting code we can only um correct 5% errors also",
    "start": "2286560",
    "end": "2295319"
  },
  {
    "text": "what you have to know is that Reed Solomon works on a symbol basis that means if we have 10 bit flips or one bit",
    "start": "2295319",
    "end": "2301079"
  },
  {
    "text": "flip in one symbol it doesn't matter one bit flip is enough and the whole uh symbol is wrong so we can correct um 5%",
    "start": "2301079",
    "end": "2309800"
  },
  {
    "text": "of um broken symbols with 10% error correcting code actually we normally",
    "start": "2309800",
    "end": "2315200"
  },
  {
    "text": "don't need that much um normally we only have 1 to 2% of um errors and therefore",
    "start": "2315200",
    "end": "2321880"
  },
  {
    "text": "we need it we would need only 2 to 4% of error correcting code but due to the",
    "start": "2321880",
    "end": "2327319"
  },
  {
    "text": "nature of the system sometimes you have spikes in system load and then you have more noise and due to that you have to",
    "start": "2327319",
    "end": "2334599"
  },
  {
    "text": "also calculate with that and therefore we chose to use 10% and not just 4% of",
    "start": "2334599",
    "end": "2339800"
  },
  {
    "text": "error correcting code so we can deal with system noise spikes so how does it look like now we",
    "start": "2339800",
    "end": "2345839"
  },
  {
    "text": "have if we use 10% error correcting code we have 3,686 data symbols and 409 error",
    "start": "2345839",
    "end": "2353040"
  },
  {
    "text": "correction symbols and now we can actually look at it like we would look at the normal um Communication in",
    "start": "2353040",
    "end": "2358160"
  },
  {
    "text": "between well a sender and receiver with a physical and the data link layer on the physical layer we have our data with",
    "start": "2358160",
    "end": "2365400"
  },
  {
    "text": "12 bits we have then our quence number which contains three bits and our arody",
    "start": "2365400",
    "end": "2371240"
  },
  {
    "text": "detection begger codes now only the data itself then is used for the data link",
    "start": "2371240",
    "end": "2376720"
  },
  {
    "text": "layer packet and it then composes together with the parity the whole um",
    "start": "2376720",
    "end": "2383960"
  },
  {
    "text": "read Solomon packet so we have another achievement unlocked we got rid of all the noise we",
    "start": "2383960",
    "end": "2389200"
  },
  {
    "text": "are now error free but as I mentioned before um it",
    "start": "2389200",
    "end": "2394240"
  },
  {
    "text": "costs a bit to do error correcting so let's look how well we do in speed so",
    "start": "2394240",
    "end": "2399480"
  },
  {
    "text": "you all remember dialup right with 56 kilobits of high speeds and a noise that",
    "start": "2399480",
    "end": "2405359"
  },
  {
    "text": "woke everybody up in the middle of the night we are faster than that we are also faster than its Big Brother ISDN",
    "start": "2405359",
    "end": "2412560"
  },
  {
    "text": "which had 128 kilobits then we have tprs which is a tad bit faster which has 144 kilobits",
    "start": "2412560",
    "end": "2420560"
  },
  {
    "text": "and we are also faster than that so the Amazon ec2 cover Channel",
    "start": "2420560",
    "end": "2426040"
  },
  {
    "text": "actually features 300 62 kilobits per second which is pretty nice and pretty",
    "start": "2426040",
    "end": "2431920"
  },
  {
    "text": "close to Edge which is still used in some rural areas for example in",
    "start": "2431920",
    "end": "2437359"
  },
  {
    "text": "Austria and if you let our cover Channel run on your native system it actually",
    "start": "2437359",
    "end": "2443119"
  },
  {
    "text": "runs at 600 kilobits per second of course how fast the um cover channel is",
    "start": "2443119",
    "end": "2448440"
  },
  {
    "text": "depends very much on on the hardware use the latest Hardware is faster so Intel",
    "start": "2448440",
    "end": "2453680"
  },
  {
    "text": "is actually helping us they're producing faster CPUs so we have a faster cover G so and also to put it into a perspective",
    "start": "2453680",
    "end": "2462960"
  },
  {
    "text": "above us is done 3G which is around double as fast so now that we have this cool",
    "start": "2462960",
    "end": "2471520"
  },
  {
    "text": "robust arror free cover Channel let's do something useful with that something cool yeah let's use it for",
    "start": "2471520",
    "end": "2479200"
  },
  {
    "text": "something we have it it's fast and it's aror free as man said so make it useful",
    "start": "2479200",
    "end": "2485119"
  },
  {
    "text": "do something with it and what could would be more useful and more fun than a remote shell and what's cooler than",
    "start": "2485119",
    "end": "2492520"
  },
  {
    "text": "having a remote shell without network access and which remote shell should we use there of course our all-time",
    "start": "2492520",
    "end": "2499680"
  },
  {
    "text": "favorite let's do SSH and the only prerequisite for SSH is",
    "start": "2499680",
    "end": "2505880"
  },
  {
    "text": "just TCP so should be quite simple right just Implement TCP over cach we should",
    "start": "2505880",
    "end": "2512880"
  },
  {
    "text": "actually get an RFC for that it's it works pretty well uh so we have this scenario here we have our two virtual",
    "start": "2512880",
    "end": "2520359"
  },
  {
    "text": "machines on the same physic host the hypervisor scheduling the the virtual machines and they shared last level cach",
    "start": "2520359",
    "end": "2528119"
  },
  {
    "text": "and we know we have our cover channel here with the prime and probe so they can talk and they talk through the file",
    "start": "2528119",
    "end": "2533480"
  },
  {
    "text": "system right now we were able to send the files the beautiful pictures and then just we just added another layer",
    "start": "2533480",
    "end": "2540599"
  },
  {
    "text": "because we're lazy and we know another layer of abstraction solves all the problems in it so yeah just put another",
    "start": "2540599",
    "end": "2547640"
  },
  {
    "text": "layer on it then we have a TCP socket to file system layer and then we have actually actual TCP sockets on both",
    "start": "2547640",
    "end": "2555400"
  },
  {
    "text": "sides of the virtual machine and then it's easy we can use any TCP client and TCP server software and they just talk",
    "start": "2555400",
    "end": "2563599"
  },
  {
    "text": "through the last level cache they don't know where they're talking through that seems like a normal internet connection",
    "start": "2563599",
    "end": "2569880"
  },
  {
    "text": "for them but they're actually talking through the cach cover channel so we have another achievement DCP over kind",
    "start": "2569880",
    "end": "2576559"
  },
  {
    "text": "of anything so we can get DCP over the cach running and it works really well so",
    "start": "2576559",
    "end": "2582839"
  },
  {
    "text": "we tried that we tried to establish an SSH connection between two instances on the Amazon ec2 Cloud and without noise",
    "start": "2582839",
    "end": "2591359"
  },
  {
    "text": "it worked perfectly and then we try to see what's",
    "start": "2591359",
    "end": "2597040"
  },
  {
    "text": "possible there so we started another virtual machine a third one and run the",
    "start": "2597040",
    "end": "2603200"
  },
  {
    "text": "stress tool there and the stress Tool uh with minus M8 uh allocates and deallocates a lot of",
    "start": "2603200",
    "end": "2609400"
  },
  {
    "text": "memory all the time with eight cores and it still works the connection is stable",
    "start": "2609400",
    "end": "2615359"
  },
  {
    "text": "and then we thought okay let's start a web server on the on the VM and DS the the web server there with our own",
    "start": "2615359",
    "end": "2622200"
  },
  {
    "text": "computer so we had 100 connections downloading uploading stuff all the time and the connection was stable they said",
    "start": "2622200",
    "end": "2629000"
  },
  {
    "text": "okay let's do web server on all the VMS on the sender and the receiver and on the third VM and have a lot of",
    "start": "2629000",
    "end": "2635040"
  },
  {
    "text": "connections and download and upload and it was still stable so we really have a robust cover",
    "start": "2635040",
    "end": "2641280"
  },
  {
    "text": "Channel um then we started to stress the VMS and then it got a bit unstable so if",
    "start": "2641280",
    "end": "2648000"
  },
  {
    "text": "you really stress all the VMS there then sometimes the connection dropped and then we thought okay let's",
    "start": "2648000",
    "end": "2654640"
  },
  {
    "text": "fall back to tnet because we have DCP over anything let's use tnet and tnet",
    "start": "2654640",
    "end": "2660280"
  },
  {
    "text": "worked even with distress but sometimes bites were corrupted so we would not",
    "start": "2660280",
    "end": "2668520"
  },
  {
    "text": "really use that imagine you doing some LS or CD and it corrupts the bites and",
    "start": "2668520",
    "end": "2675200"
  },
  {
    "text": "it gets RM and you delete the file you wanted to to view it's not good but if",
    "start": "2675200",
    "end": "2681839"
  },
  {
    "text": "if you dare to try then that works even with corrupted bites so we have a really nice DCP proxy",
    "start": "2681839",
    "end": "2689200"
  },
  {
    "text": "now from uh across two virtual machines and our final achievement we",
    "start": "2689200",
    "end": "2695839"
  },
  {
    "text": "get this aror free cover channel from one VM to the to another VM on the",
    "start": "2695839",
    "end": "2701880"
  },
  {
    "text": "Amazon Cloud so what is the conclusion here",
    "start": "2701880",
    "end": "2707200"
  },
  {
    "text": "cach cover channels are actually practical so we can get really fast aor free Transmissions over the cache it's",
    "start": "2707200",
    "end": "2714559"
  },
  {
    "text": "not detectable by any uh firewall interu detection systems it's completely",
    "start": "2714559",
    "end": "2721559"
  },
  {
    "text": "stealthy it's Noise free it's fast it works in real life scenarios you can run",
    "start": "2721559",
    "end": "2726760"
  },
  {
    "text": "it on the Amazon card and with web servers running in parallel so it's",
    "start": "2726760",
    "end": "2732079"
  },
  {
    "text": "really uh practical and a lot of academic paper says okay protection against such cover",
    "start": "2732079",
    "end": "2739200"
  },
  {
    "text": "channels just apply noise to the operating system then nothing will work anymore that's not true so we had a lot",
    "start": "2739200",
    "end": "2747160"
  },
  {
    "text": "of noise and if you implemented error correction and synchronization you can",
    "start": "2747160",
    "end": "2752359"
  },
  {
    "text": "have a lot of noise and it still works so noise is not a countermeasure against",
    "start": "2752359",
    "end": "2757440"
  },
  {
    "text": "such cover channels and you can try it yourself so",
    "start": "2757440",
    "end": "2762520"
  },
  {
    "text": "we provide you a small tool that implements the cash based camming agreement it's on GitHub uh you can",
    "start": "2762520",
    "end": "2770559"
  },
  {
    "text": "download it compile it run it on your favorite cloud provider on your company Cloud wherever you want and see if your",
    "start": "2770559",
    "end": "2777440"
  },
  {
    "text": "cloud is vulnerable to that and it it has an documentation on the GitHub page and also that the white",
    "start": "2777440",
    "end": "2785359"
  },
  {
    "text": "paper will be I think it's tonight will it will be published by blackhead with a",
    "start": "2785359",
    "end": "2790920"
  },
  {
    "text": "a good description and now we come to a live demo we would like to show it live on",
    "start": "2790920",
    "end": "2797839"
  },
  {
    "text": "the Amazon Cloud finger crossed it",
    "start": "2797839",
    "end": "2802280"
  },
  {
    "text": "works so please Manu so um here you can see that we are already connected to our",
    "start": "2803200",
    "end": "2811839"
  },
  {
    "text": "two virtual machines and here we have a local shell what you can also see is",
    "start": "2811839",
    "end": "2817559"
  },
  {
    "text": "we have two different IPS so we are on two different wel from machines this one",
    "start": "2817559",
    "end": "2823400"
  },
  {
    "text": "is going to be our server this is going to be our client so what we are going to do is we are going to transmit a video",
    "start": "2823400",
    "end": "2831559"
  },
  {
    "text": "over um oops over the over the cache and which",
    "start": "2831559",
    "end": "2838000"
  },
  {
    "text": "video would be better than Adele's hello from the other side right so let's do",
    "start": "2838000",
    "end": "2844839"
  },
  {
    "text": "that so first here we have our server which will transmit our video which is just called",
    "start": "2844839",
    "end": "2852240"
  },
  {
    "text": "video so here we have our client which then pipes its output into a net cut um",
    "start": "2852520",
    "end": "2860040"
  },
  {
    "text": "session which listens on ad for its",
    "start": "2860040",
    "end": "2865920"
  },
  {
    "text": "partner and here we will start the other part of the netcut session which then pipes its output into VLC we also added",
    "start": "2867119",
    "end": "2874839"
  },
  {
    "text": "some caching just um for safety which is the file caching because well what is if",
    "start": "2874839",
    "end": "2881280"
  },
  {
    "text": "something happens and also we added for your enjoyment a um subtitle file so",
    "start": "2881280",
    "end": "2886559"
  },
  {
    "text": "that you can surely understand the text so let's",
    "start": "2886559",
    "end": "2893200"
  },
  {
    "text": "start so we can see the server boots up and then waits for its",
    "start": "2895119",
    "end": "2900240"
  },
  {
    "text": "partner and they started transmitting we're still cashing but it should be about",
    "start": "2904760",
    "end": "2910700"
  },
  {
    "text": "[Music] yes so hello from the other",
    "start": "2910700",
    "end": "2918610"
  },
  {
    "text": "[Applause] side remote shall through the cash this",
    "start": "2918610",
    "end": "2925480"
  },
  {
    "text": "time to browse through your system steal everything that I want and as my",
    "start": "2925480",
    "end": "2933839"
  },
  {
    "text": "chanels cover you'll never know hello from the",
    "start": "2933839",
    "end": "2943319"
  },
  {
    "text": "outside I don't even need n for",
    "start": "2944480",
    "end": "2950000"
  },
  {
    "text": "right I'm not even sorry I broke into",
    "start": "2950240",
    "end": "2955280"
  },
  {
    "text": "your machine your cash noise pattern it clearly doesn't savior me Am anymore",
    "start": "2955280",
    "end": "2964810"
  },
  {
    "text": "[Music]",
    "start": "2964810",
    "end": "2973789"
  },
  {
    "text": "thank you very much so so here we now see the speed we were actually faster than we told you",
    "start": "2982920",
    "end": "2990200"
  },
  {
    "text": "before we achieved this time 392 kilobits per second and we were totally",
    "start": "2990200",
    "end": "2996359"
  },
  {
    "text": "a free um so what you just saw here we",
    "start": "2996359",
    "end": "3002359"
  },
  {
    "text": "actually extended Amazon's product portfolio we now provide Amazon Prime",
    "start": "3002359",
    "end": "3008079"
  },
  {
    "text": "and",
    "start": "3008079",
    "end": "3010319"
  },
  {
    "text": "[Music] probe so I think we still have time for",
    "start": "3015300",
    "end": "3020799"
  },
  {
    "text": "some questions um the video so we have also provided a demo video which we will upload and which will Mel uh will then",
    "start": "3020799",
    "end": "3029040"
  },
  {
    "text": "tell you over his uh Traer account and you still see here um the link to um our",
    "start": "3029040",
    "end": "3035599"
  },
  {
    "text": "tool now if there are any question",
    "start": "3035599",
    "end": "3040520"
  },
  {
    "text": "please are you using um so on the Amazon Cloud we have",
    "start": "3040799",
    "end": "3047040"
  },
  {
    "text": "uh 20 megabytes of last level cache and that's that's a lot and we actually use",
    "start": "3047040",
    "end": "3053040"
  },
  {
    "text": "only 19 of the cach sites so we have 248 catch sets per slice and we have eight",
    "start": "3053040",
    "end": "3058760"
  },
  {
    "text": "slices on the Amazon machine so it's just 0 point something per so you could",
    "start": "3058760",
    "end": "3065040"
  },
  {
    "text": "write that out uh we tried yes uh so we could make it kind of Faster by using",
    "start": "3065040",
    "end": "3071400"
  },
  {
    "text": "more of the cach sets but then it's more prone to errors so the more parts of the cach you use because other applications",
    "start": "3071400",
    "end": "3077799"
  },
  {
    "text": "on the system also use the cache and the operating system and the the larger the amount of cach you use the more aror",
    "start": "3077799",
    "end": "3084200"
  },
  {
    "text": "prone it is and the more Arrow correction you have to use but yeah I guess it can be faster we did",
    "start": "3084200",
    "end": "3091160"
  },
  {
    "text": "not experiment how fast it can get uh we mostly tested on on our lab machine",
    "start": "3091160",
    "end": "3096520"
  },
  {
    "text": "machines before and they had smaller caches so that was kind of a good uh",
    "start": "3096520",
    "end": "3101720"
  },
  {
    "text": "approx good good number of cach sets which gave us really good speed but yes",
    "start": "3101720",
    "end": "3108000"
  },
  {
    "text": "I guess it can be faster if you have larger caches like on Amazon Cloud then it can also be faster if you use larger",
    "start": "3108000",
    "end": "3114920"
  },
  {
    "text": "uh parts of the cache",
    "start": "3114920",
    "end": "3118520"
  },
  {
    "text": "yes um that's a good question so the question was how to make sure that it",
    "start": "3125839",
    "end": "3132160"
  },
  {
    "text": "that's in the it's in the last level cach not only the L1 and L2 Intel CPUs have a nice property that",
    "start": "3132160",
    "end": "3138920"
  },
  {
    "text": "all the data that's stored in last in the L1 and L2 cache is also stored in the last level cache so the last level",
    "start": "3138920",
    "end": "3145640"
  },
  {
    "text": "cache contains all the data so that's why it works really well with the Intel CPUs everything is in the last level",
    "start": "3145640",
    "end": "3151119"
  },
  {
    "text": "cache and AMD does not have that property so we don't know if anyone",
    "start": "3151119",
    "end": "3157200"
  },
  {
    "text": "accomplishing that with an AMT CPU so you might be more secure with an AMT CPU",
    "start": "3157200",
    "end": "3163760"
  },
  {
    "text": "no idea but no one uses that so and we did not find a lab machine at our",
    "start": "3163760",
    "end": "3169000"
  },
  {
    "text": "University to try it so it's an open research question",
    "start": "3169000",
    "end": "3176040"
  },
  {
    "text": "did that answer your question um is there reason",
    "start": "3176720",
    "end": "3183079"
  },
  {
    "text": "useit number",
    "start": "3183079",
    "end": "3188559"
  },
  {
    "text": "compr um so the question was if why we use",
    "start": "3188559",
    "end": "3194480"
  },
  {
    "text": "exactly threee bit of sequence number and if we could use any compression um we used threee bits of",
    "start": "3194480",
    "end": "3200520"
  },
  {
    "text": "sequence number because it worked so that was our first try and it worked",
    "start": "3200520",
    "end": "3206559"
  },
  {
    "text": "perfectly so we had no problems with that but of course you can increase the the length for the sequence number",
    "start": "3206559",
    "end": "3215040"
  },
  {
    "text": "would so uh so you only want to use one bit of for the sequence number um yes",
    "start": "3219640",
    "end": "3228160"
  },
  {
    "text": "but if you miss a few backets then it's better to have a higher sequence number to know where exactly you left off so",
    "start": "3228160",
    "end": "3235400"
  },
  {
    "text": "which brackets are lost because it can be due to a high noise rate or a lot of scheduling that you",
    "start": "3235400",
    "end": "3242680"
  },
  {
    "text": "miss a lot of backets and not only one packet and then you can continue where",
    "start": "3242680",
    "end": "3248400"
  },
  {
    "text": "you left off and don't have to search for that or try again also um we did not",
    "start": "3248400",
    "end": "3254960"
  },
  {
    "text": "just um use the full spectrum of the three bit sequence number but we added um some security for this sequence",
    "start": "3254960",
    "end": "3262280"
  },
  {
    "text": "number as well we have so we also for the because otherwise of course they",
    "start": "3262280",
    "end": "3268520"
  },
  {
    "text": "transmit that they use the same channel they are prone to the same errors but we cannot use error correction codes for",
    "start": "3268520",
    "end": "3273720"
  },
  {
    "text": "The X that wouldn't work yeah so we also use some errow correction in the inside",
    "start": "3273720",
    "end": "3279240"
  },
  {
    "text": "the sequence number and so we can't even use all the the bits in the sequence number but you could use a longer",
    "start": "3279240",
    "end": "3286640"
  },
  {
    "text": "sequence number but if you only use one bit and you get a bit error in the sequence number then it's kind of broken",
    "start": "3286640",
    "end": "3294640"
  },
  {
    "text": "so we we're better safe so we with all the numbers we are on on the safe side and we're pretty sure if you use higher",
    "start": "3294640",
    "end": "3302079"
  },
  {
    "text": "numbers for cat sets for sequence numbers error correction you can get better",
    "start": "3302079",
    "end": "3307799"
  },
  {
    "text": "speed but yeah you can try that if you want uh we didn't we didn't experiment",
    "start": "3307799",
    "end": "3314839"
  },
  {
    "text": "with that and for the compression of course you could use compression the problem",
    "start": "3314839",
    "end": "3321680"
  },
  {
    "text": "there is uh if you compress data and you have errors in the compression it might",
    "start": "3321680",
    "end": "3326920"
  },
  {
    "text": "be worse than having the row data and arrows there so for example uh SSH uses",
    "start": "3326920",
    "end": "3332680"
  },
  {
    "text": "compression and then the connection just aborts if there's an error and for delet",
    "start": "3332680",
    "end": "3338319"
  },
  {
    "text": "without compression you just have corrupted bites so depends on your scenario if you say okay I'm fine with",
    "start": "3338319",
    "end": "3345319"
  },
  {
    "text": "having some corrupt bits there use no compression but you could also use compression yes then it might be even",
    "start": "3345319",
    "end": "3352039"
  },
  {
    "text": "faster but then it of course depends on the data you want to compress",
    "start": "3352039",
    "end": "3358240"
  },
  {
    "text": "yeah any any any other",
    "start": "3360400",
    "end": "3364480"
  },
  {
    "text": "questions no so oh right here how do you make sure that actually your two VM are",
    "start": "3366000",
    "end": "3371799"
  },
  {
    "text": "on the same um that's a really good question so",
    "start": "3371799",
    "end": "3377520"
  },
  {
    "text": "for our purposes we just you can you can just buy VMS until you find two you just",
    "start": "3377520",
    "end": "3385079"
  },
  {
    "text": "let so that's the Practical approach you buy",
    "start": "3385079",
    "end": "3391319"
  },
  {
    "text": "VMS and you let the cover Channel run and if they find each other then you're on the same on the same physical",
    "start": "3391319",
    "end": "3398400"
  },
  {
    "text": "machine but if you want just want to experiment you get a dedicated host and",
    "start": "3398400",
    "end": "3403559"
  },
  {
    "text": "then you know that they're in the same machine but there are also academic Publications about that about how to",
    "start": "3403559",
    "end": "3409000"
  },
  {
    "text": "find instances that are on the same physic host that's just a triv approach by if you have a lot of money that's",
    "start": "3409000",
    "end": "3416039"
  },
  {
    "text": "might be the easiest",
    "start": "3416039",
    "end": "3418920"
  },
  {
    "text": "way so if there are no other questions then thank you very much for your attention thank you very much for coming",
    "start": "3423960",
    "end": "3431880"
  }
]