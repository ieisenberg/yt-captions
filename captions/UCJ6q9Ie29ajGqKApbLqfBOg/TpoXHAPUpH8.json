[
  {
    "text": "[Music]",
    "start": "1120",
    "end": "4330"
  },
  {
    "text": "[Music]",
    "start": "9420",
    "end": "16000"
  },
  {
    "text": "[Music]",
    "start": "26410",
    "end": "45450"
  },
  {
    "text": "everybody who's going to come is is is here already so um we we'll get",
    "start": "47559",
    "end": "54520"
  },
  {
    "text": "started um I've already started saying the ums",
    "start": "54520",
    "end": "60359"
  },
  {
    "text": "and I watched myself uh at the last speech I did and I cringed so much at",
    "start": "60359",
    "end": "66479"
  },
  {
    "text": "the amount of times I said um so if I if I get into this habit can people start",
    "start": "66479",
    "end": "71920"
  },
  {
    "text": "doing this to me or something like that you know aversion therapy and maybe I'll start getting out of this habit of going",
    "start": "71920",
    "end": "77520"
  },
  {
    "text": "um um so um we're going to be talking about",
    "start": "77520",
    "end": "84280"
  },
  {
    "text": "Oracle application server today and format string exploitation on the Windows platform",
    "start": "84280",
    "end": "91720"
  },
  {
    "text": "we're not going to be looking too much at the Oracle stuff but we will be um concentrating more in the the area of",
    "start": "91720",
    "end": "97799"
  },
  {
    "text": "format string exploitation on the Windows platform if you're after the the the the Oracle you know more information",
    "start": "97799",
    "end": "105560"
  },
  {
    "text": "on Oracle then Eric um Burk holz's book on Special Ops he's just published with",
    "start": "105560",
    "end": "111439"
  },
  {
    "text": "Shing um I do a chapter in there chapter 13 on Oracle security am I saying",
    "start": "111439",
    "end": "117680"
  },
  {
    "text": "um sorry yeah you did it and and keep on please so yeah that's",
    "start": "117680",
    "end": "125079"
  },
  {
    "text": "that's uh going to be um one of the you know bestselling books I think for uh",
    "start": "125079",
    "end": "130520"
  },
  {
    "text": "sress there got a lot of good information in there so if you get a chance to have a look at it and maybe buy a copy for Eric then uh then please",
    "start": "130520",
    "end": "137360"
  },
  {
    "text": "go ahead and do so so who am I I'm David litfield from NGS",
    "start": "137360",
    "end": "142440"
  },
  {
    "text": "software um I've doing um again we write software do consultancy in the uh",
    "start": "142440",
    "end": "150280"
  },
  {
    "text": "security area basically so the introduction we're going to be discussing format string",
    "start": "150280",
    "end": "156519"
  },
  {
    "text": "vulnerabilities most of you in this room will already know about format string vulnerabilities and probably know how to",
    "start": "156519",
    "end": "162040"
  },
  {
    "text": "exploit them with you you know without batting an eyelid",
    "start": "162040",
    "end": "168000"
  },
  {
    "text": "um they've been known about for a few years Tim Nim documented them pretty much um in the first instance um whilst",
    "start": "168680",
    "end": "176239"
  },
  {
    "text": "working with Garden um very good paper there well documented on the Unix platform but less so on windows so",
    "start": "176239",
    "end": "183400"
  },
  {
    "text": "that's why I'm going to be looking at format string vulnerabilities today um",
    "start": "183400",
    "end": "188680"
  },
  {
    "text": "you always find yourself when when you do these talks regularly you know looking",
    "start": "188680",
    "end": "193760"
  },
  {
    "text": "for something interesting that you haven't done before and hasn't been done to death and I don't think format string vulnerabilities have been done so that's",
    "start": "193760",
    "end": "200040"
  },
  {
    "text": "why I'm doing that I was initially going to be speaking about the Microsoft um",
    "start": "200040",
    "end": "206640"
  },
  {
    "text": "locator buffer overflow but then again it's just a simple buffer overflow no no real value in then talking about",
    "start": "206640",
    "end": "212599"
  },
  {
    "text": "here's another buffer overflow here's how you exploit it so I was waiting on article patching these vulnerabilities",
    "start": "212599",
    "end": "219040"
  },
  {
    "text": "before I could confirm that I could do a talk on this so this is why um there was",
    "start": "219040",
    "end": "224080"
  },
  {
    "text": "been a change halfway through so what are format string",
    "start": "224080",
    "end": "229599"
  },
  {
    "text": "vulnerabilities some of you in this room will probably know what they are will not know what they are",
    "start": "229599",
    "end": "236400"
  },
  {
    "text": "essentially within C you have a family of Prin F functions and they essentially",
    "start": "236400",
    "end": "242360"
  },
  {
    "text": "take a string and well certainly the the print F function on its own and print it",
    "start": "242360",
    "end": "248920"
  },
  {
    "text": "to print it to the console so we have a simple C program here printf hello world anyone who studied even a modum of C",
    "start": "248920",
    "end": "256400"
  },
  {
    "text": "will will recognize this program from kegi and Richard uh Richard Richie's um",
    "start": "256400",
    "end": "262120"
  },
  {
    "text": "C you know programming this is every this is where the hello world program comes from so print F essentially takes",
    "start": "262120",
    "end": "268960"
  },
  {
    "text": "a character string and print it to the screen there are a number of other",
    "start": "268960",
    "end": "277080"
  },
  {
    "text": "printf functions in the family there's FR printf that takes information or data",
    "start": "277080",
    "end": "282400"
  },
  {
    "text": "and prints it to a file s printf that you know prints the data to a buffer or",
    "start": "282400",
    "end": "287800"
  },
  {
    "text": "copies the data to a buffer vprint f for you know V you know when there's loads of arguments and and and so on CIS log",
    "start": "287800",
    "end": "294759"
  },
  {
    "text": "is vulnerable to format string vulnerabilities on Unix platforms but there is no or I don't believe there's",
    "start": "294759",
    "end": "300360"
  },
  {
    "text": "an equivalent on uh Windows the um",
    "start": "300360",
    "end": "307000"
  },
  {
    "text": "C++ string object uh format V uses VSS print F underneath the the underlying",
    "start": "307000",
    "end": "313880"
  },
  {
    "text": "mechanism so uh that's another one to to watch out for now it doesn't just with with print",
    "start": "313880",
    "end": "322120"
  },
  {
    "text": "uh with the print F functions there are things known as format specifi so when you're dealing with Dynamic data you can",
    "start": "322120",
    "end": "330440"
  },
  {
    "text": "basically have a format specifier this percent D here that takes um an integer",
    "start": "330440",
    "end": "336319"
  },
  {
    "text": "value and replaces whatever that in integer value is and Pops it in there basically so we can begin to control um",
    "start": "336319",
    "end": "344759"
  },
  {
    "text": "with Dynamic data what goes into the pr printf statement so this thing this this part here is called the format string",
    "start": "344759",
    "end": "351919"
  },
  {
    "text": "now it can take a variable number of arguments so we could be like um the value is percent D percent D percent D",
    "start": "351919",
    "end": "358759"
  },
  {
    "text": "and just have you know three D valves basically you know so they're all being pushed onto the",
    "start": "358759",
    "end": "364000"
  },
  {
    "text": "stack there are other format specifiers such as percent X percent X takes a a",
    "start": "364000",
    "end": "371880"
  },
  {
    "text": "hex number sorry a an integer and and puts it in hexadecimal format there are",
    "start": "371880",
    "end": "379560"
  },
  {
    "text": "several format specifiers percent C takes a character A Single Character",
    "start": "379560",
    "end": "385560"
  },
  {
    "text": "percent D is a decimal percent e is float or doubles in notation percent f a",
    "start": "385560",
    "end": "391960"
  },
  {
    "text": "float or a double O octal P for a pointer s for a string X for heximal and",
    "start": "391960",
    "end": "397759"
  },
  {
    "text": "I for an integer we also have width",
    "start": "397759",
    "end": "402800"
  },
  {
    "text": "specifiers we can basically say if we want a hex heximal number um let's say",
    "start": "402800",
    "end": "408319"
  },
  {
    "text": "dval is is has the value three but we wanted the value",
    "start": "408319",
    "end": "415160"
  },
  {
    "text": "03 um printed out we can specify its width with the 8X that would print out",
    "start": "415160",
    "end": "422080"
  },
  {
    "text": "eight characters basically uh we can also use high and low percent HX says show us you know the",
    "start": "422080",
    "end": "429319"
  },
  {
    "text": "high order bits percent L the low order bits and so on you'll see these will come in useful later on one specifier I",
    "start": "429319",
    "end": "437039"
  },
  {
    "text": "did not mention is the percent n specifier now this is really where the the root of the problem lies we'll get",
    "start": "437039",
    "end": "443360"
  },
  {
    "text": "to Y in a minute but essentially the print n print n sorry the percent n",
    "start": "443360",
    "end": "450960"
  },
  {
    "text": "specifier essentially allows you to write the number of bytes which have",
    "start": "450960",
    "end": "456000"
  },
  {
    "text": "been output to a a variable and you pass that variable in a pointer to it there",
    "start": "456000",
    "end": "462720"
  },
  {
    "text": "so essentially if we were to compile and run this program we are printing the characters 1 2 3 and four to to the",
    "start": "462720",
    "end": "470080"
  },
  {
    "text": "console we're then using the percent end specifier to write to this variable here in Tex we we part it in as a pointer and",
    "start": "470080",
    "end": "478520"
  },
  {
    "text": "that would say the number of byes formatted is percent D Now 1 2 3 4 is",
    "start": "478520",
    "end": "484120"
  },
  {
    "text": "four characters have been printed to the screen so four would be written into the",
    "start": "484120",
    "end": "489400"
  },
  {
    "text": "um X variable and then we return the program so the percent 10",
    "start": "489400",
    "end": "494639"
  },
  {
    "text": "specifier allows us to write the number of bytes which have been formatted up to",
    "start": "494639",
    "end": "500440"
  },
  {
    "text": "that Cent n specifier to a variable and a pointer to the variable is passed on the stack when you call the the print F",
    "start": "500440",
    "end": "508240"
  },
  {
    "text": "function okay the problem arises when no format",
    "start": "508240",
    "end": "515640"
  },
  {
    "text": "string is passed in just the you know the character string the variable",
    "start": "515640",
    "end": "521159"
  },
  {
    "text": "itself when there there's no format string passed in if a user or an or an",
    "start": "521159",
    "end": "527440"
  },
  {
    "text": "attacker control the input they can basically specify their own format",
    "start": "527440",
    "end": "533000"
  },
  {
    "text": "string and you know embed the percent end specifier and begin to overwrite",
    "start": "533000",
    "end": "539040"
  },
  {
    "text": "arbit locations in memory this can be done to execute arbitrary code it can be",
    "start": "539040",
    "end": "545240"
  },
  {
    "text": "done you know to cause logic Corruptions for example if there was a a structure",
    "start": "545240",
    "end": "550519"
  },
  {
    "text": "that you know specified someone's credentials and zero was you know the",
    "start": "550519",
    "end": "556240"
  },
  {
    "text": "equivalent of system or rout then we could over if we could locate that structure in memory we could overwrite",
    "start": "556240",
    "end": "561800"
  },
  {
    "text": "that with you know nulls and become equivalent to root or or system or or whatever the you know the um access",
    "start": "561800",
    "end": "569399"
  },
  {
    "text": "control mechanism is so here we have a sort of vulnerable",
    "start": "569399",
    "end": "576320"
  },
  {
    "text": "program what we're doing is taking arguments in and whilst we have a a list of arguments we're just printing them",
    "start": "576320",
    "end": "582880"
  },
  {
    "text": "without a a format string so we take the argument and just print it and then Loop",
    "start": "582880",
    "end": "588399"
  },
  {
    "text": "Round whilst there are arguments so if I show you",
    "start": "588399",
    "end": "594240"
  },
  {
    "text": "this C access fmt if I just send",
    "start": "598320",
    "end": "605920"
  },
  {
    "text": "hello uh can the people at the back see that or is it let me see if I can change",
    "start": "605920",
    "end": "611120"
  },
  {
    "text": "the font",
    "start": "611120",
    "end": "613600"
  },
  {
    "text": "size I'm sorry yeah yes",
    "start": "626320",
    "end": "631519"
  },
  {
    "text": "sure okay this is me running the program here fmt is the name of the program and",
    "start": "632160",
    "end": "638320"
  },
  {
    "text": "I I pass in an argument hello and it just prints hello back to the screen we get strange things happening though when",
    "start": "638320",
    "end": "644440"
  },
  {
    "text": "I go hello percent X percent X percent X percent",
    "start": "644440",
    "end": "650160"
  },
  {
    "text": "X you can see here we still have our initial hello but then we've got a list of numbers that you know are coming from",
    "start": "651320",
    "end": "658720"
  },
  {
    "text": "somewhere now this is because we're providing as as the user the format string and because that's the first",
    "start": "658720",
    "end": "664880"
  },
  {
    "text": "argument Going On The Stack if we look back at the source",
    "start": "664880",
    "end": "671320"
  },
  {
    "text": "code the first argument being pushed onto the stack is the pointer to the string being printed now the printf",
    "start": "671320",
    "end": "677959"
  },
  {
    "text": "function or family of functions expect the first parameter being passed to to",
    "start": "677959",
    "end": "683200"
  },
  {
    "text": "it is to be the the actual format string so what happens is by us passing um our",
    "start": "683200",
    "end": "689959"
  },
  {
    "text": "own format string as as the first parameter it takes that as you know this is the format string we should be using",
    "start": "689959",
    "end": "696480"
  },
  {
    "text": "and starts taking things off off the stack and uh using that so this is",
    "start": "696480",
    "end": "702600"
  },
  {
    "text": "what's happening when I when I run the program here we can see actually if I do it this",
    "start": "702600",
    "end": "709920"
  },
  {
    "text": "way x x x x x x x so we can tell what",
    "start": "709920",
    "end": "719240"
  },
  {
    "text": "what's on the stack essentially we have a one a something that looks like um a",
    "start": "719240",
    "end": "725880"
  },
  {
    "text": "stack address one 12 ffco that's probably a save return address 4011",
    "start": "725880",
    "end": "732320"
  },
  {
    "text": "2D then there's a two then 3 Eco which probably looks like it's a um something",
    "start": "732320",
    "end": "740279"
  },
  {
    "text": "to do with the Heap um so we're essentially taking things which are are layed on the stack basically you know",
    "start": "740279",
    "end": "746720"
  },
  {
    "text": "and and moving down the stack space",
    "start": "746720",
    "end": "750959"
  },
  {
    "text": "in terms of attacking we know using the percent end oh let let me show you that as well um what I'm going to do here is",
    "start": "752760",
    "end": "760880"
  },
  {
    "text": "using the percent n specifier is just put several of them in there to",
    "start": "760880",
    "end": "766560"
  },
  {
    "text": "ensure a crash okay we get a a crash in the program an access violation saying",
    "start": "766560",
    "end": "772440"
  },
  {
    "text": "the instruction at 41742 reference memory at 000000001",
    "start": "772440",
    "end": "779839"
  },
  {
    "text": "the memory could not be written now remember going back to here the the first thing on the stack was one so we",
    "start": "779839",
    "end": "786240"
  },
  {
    "text": "can look at that and go well wait a minute that's interesting we have um that one is is coming up here and we're",
    "start": "786240",
    "end": "791920"
  },
  {
    "text": "trying to write to that address now I presume that if we",
    "start": "791920",
    "end": "797399"
  },
  {
    "text": "go the next thing looks like it's writeable because it looks like a stack address so if we go percent X percent",
    "start": "797399",
    "end": "805480"
  },
  {
    "text": "10 we'll probably get away with being able to write to that",
    "start": "805480",
    "end": "811480"
  },
  {
    "text": "location and indeed we do you know there's no access violation as it happens that's probably um the saved um",
    "start": "811639",
    "end": "819320"
  },
  {
    "text": "base pointer um that we're overwriting there um",
    "start": "819320",
    "end": "824639"
  },
  {
    "text": "so essentially you can see that using the percent n specifier we can begin to",
    "start": "824639",
    "end": "830959"
  },
  {
    "text": "overwrite um or attempt to write to areas of memory now we can control that I'll show you how to do that later",
    "start": "830959",
    "end": "837199"
  },
  {
    "text": "on but assume we want to run arbitary code as opposed to just exploiting you know overwriting um a structure with",
    "start": "837199",
    "end": "845279"
  },
  {
    "text": "zeros or an arbitary number that gives us higher uh levels of uh permissions if",
    "start": "845279",
    "end": "850800"
  },
  {
    "text": "we want to run arbitrary code we can choose to overwrite to save return address which is stored on the stack um",
    "start": "850800",
    "end": "858120"
  },
  {
    "text": "for for those of you that know buffer overflows or how to exploit buffer overflows you would overwrite the save",
    "start": "858120",
    "end": "863360"
  },
  {
    "text": "return address um to gain control of the processes path of exe path of execution",
    "start": "863360",
    "end": "869839"
  },
  {
    "text": "alternatively we could overwrite a function pointer we could overwrite an exception Handler or the unfiltered exception Handler as well",
    "start": "869839",
    "end": "878120"
  },
  {
    "text": "so now the way you approach exploitation of a a format string depends upon",
    "start": "878120",
    "end": "884279"
  },
  {
    "text": "whether your format string that you supply exists on the stack or the Heap if it's on the stack we can control",
    "start": "884279",
    "end": "891279"
  },
  {
    "text": "what's on the stack in terms of the string so we can put arbitrary memory addresses in there if your your format",
    "start": "891279",
    "end": "897279"
  },
  {
    "text": "string that you're passing in is stored on the the Heap then you're basically stuck with what's already on the stack",
    "start": "897279",
    "end": "903000"
  },
  {
    "text": "so I mean whilst working with that stake oi White House found a format string",
    "start": "903000",
    "end": "908680"
  },
  {
    "text": "vulnerability in Van dijk's um vshell um server and um I had the the benefit of",
    "start": "908680",
    "end": "916519"
  },
  {
    "text": "um being given the opportunity to write the exploit for that uh which was quite interesting because that was the first time I'd ever really tackled this as a",
    "start": "916519",
    "end": "923360"
  },
  {
    "text": "problem um and the way I did that because the it was using basically the format V um C you know from C++ which as",
    "start": "923360",
    "end": "932279"
  },
  {
    "text": "I said was passed down to VSS printf now because it you know it was a a C++",
    "start": "932279",
    "end": "937480"
  },
  {
    "text": "object it was all stored on the Heap in terms of you know the data so um we were",
    "start": "937480",
    "end": "942519"
  },
  {
    "text": "stuck with basically what was on the Heap and I overwrite um I in in the the exploit there which is published on the",
    "start": "942519",
    "end": "948000"
  },
  {
    "text": "atake site um I overwrote a function pointer uh that basically pointed back",
    "start": "948000",
    "end": "955120"
  },
  {
    "text": "into I which I pointed back into um where where my arbitary code could be",
    "start": "955120",
    "end": "960240"
  },
  {
    "text": "found so if you go to the at stake website and wanted to have a look at that you can you know play with that the",
    "start": "960240",
    "end": "965720"
  },
  {
    "text": "other interesting thing with that vshell one was um essentially you could not use",
    "start": "965720",
    "end": "972519"
  },
  {
    "text": "any characters other than um a to zed you know one to n so it was I had to",
    "start": "972519",
    "end": "978000"
  },
  {
    "text": "write you know the arbitary code using only those characters which again was the first time for me um so you have",
    "start": "978000",
    "end": "983639"
  },
  {
    "text": "this bridge building technique where you're writing the code as you go on and the two finally meet and execution continues downwards from there",
    "start": "983639",
    "end": "990920"
  },
  {
    "text": "so the object is to overwrite something that controls the program's flow of execution now I'm just going to give you",
    "start": "991880",
    "end": "997279"
  },
  {
    "text": "a a we example um what we have here is a vulnerable program called V.C that takes",
    "start": "997279",
    "end": "1006759"
  },
  {
    "text": "in character input you know takes in an argument from the command line copies it to a buffer",
    "start": "1006759",
    "end": "1014399"
  },
  {
    "text": "and then prints that buffer to the screen this here is where the vulnerability lies where you know we can see the here basically we'll be passing",
    "start": "1014399",
    "end": "1021519"
  },
  {
    "text": "in our own format string to gain control but we'll do it in stages so you know I",
    "start": "1021519",
    "end": "1026640"
  },
  {
    "text": "walk you through the the steps",
    "start": "1026640",
    "end": "1032240"
  },
  {
    "text": "okay first off I'm supplying Four A's and a percent n no problems there this is because the",
    "start": "1032240",
    "end": "1041160"
  },
  {
    "text": "um the next thing on the stack um is is writable so we then start extending it",
    "start": "1041160",
    "end": "1048600"
  },
  {
    "text": "out",
    "start": "1048600",
    "end": "1050840"
  },
  {
    "text": "oh that's why I'm I'm doing this I see right what I'm going to do is get this",
    "start": "1059160",
    "end": "1064600"
  },
  {
    "text": "to crash okay where the problem lies is",
    "start": "1064600",
    "end": "1071120"
  },
  {
    "text": "basically here you're not going to see that so I'll have to read it to you basically we have a I can't see it",
    "start": "1071120",
    "end": "1076600"
  },
  {
    "text": "either so um we have a move ECX into dword point to eax now that's the",
    "start": "1076600",
    "end": "1082559"
  },
  {
    "text": "assembly behind this now essentially what that is saying is take whatever is in ECX and move that into the um address",
    "start": "1082559",
    "end": "1091280"
  },
  {
    "text": "pointed to by eax now we have to question then what is ECX can we control",
    "start": "1091280",
    "end": "1097760"
  },
  {
    "text": "that and can we control eax well eax is currently 4141 4141 we can control that",
    "start": "1097760",
    "end": "1105200"
  },
  {
    "text": "because that's our first four A's here ECX essentially is the ECX register is",
    "start": "1105200",
    "end": "1114280"
  },
  {
    "text": "here the the number in there is four now essentially we",
    "start": "1114280",
    "end": "1119960"
  },
  {
    "text": "have written out using the print you know formatted four characters if we",
    "start": "1119960",
    "end": "1125960"
  },
  {
    "text": "then and and four happens to be in the the ECX if we then",
    "start": "1125960",
    "end": "1132440"
  },
  {
    "text": "do you know eight if we format eight characters we can now see ECX has eight",
    "start": "1132440",
    "end": "1138840"
  },
  {
    "text": "so as you have probably guessed the number of bites that have been formatted go into ECX so if we're wanting to",
    "start": "1138840",
    "end": "1146080"
  },
  {
    "text": "overwrite a save return address or a a function pointer or or anything like",
    "start": "1146080",
    "end": "1151480"
  },
  {
    "text": "that what we need to do is get into ECX you know the address of our string so we",
    "start": "1151480",
    "end": "1157200"
  },
  {
    "text": "need to form let's say our um our buffer where we're going to put our arbitary",
    "start": "1157200",
    "end": "1162240"
  },
  {
    "text": "code can be found at address 0012 ff00 what we need to do is write that many",
    "start": "1162240",
    "end": "1168280"
  },
  {
    "text": "bytes out out with you know the the print F statement and and so that goes",
    "start": "1168280",
    "end": "1173760"
  },
  {
    "text": "into ECX and then overwrite a location of our",
    "start": "1173760",
    "end": "1178919"
  },
  {
    "text": "choosing so let's stop debugging that now in terms of getting the right number",
    "start": "1178919",
    "end": "1186360"
  },
  {
    "text": "we can basically use the width specifier here this essentially is percent. 6224",
    "start": "1186360",
    "end": "1193200"
  },
  {
    "text": "96x per. 6224 9x per n",
    "start": "1193200",
    "end": "1198960"
  },
  {
    "text": "so you can see all these zeros scrolling off the screen here that's because we're you know formatting you know 6 uh",
    "start": "1198960",
    "end": "1206480"
  },
  {
    "text": "62,000 620,000 yeah 620,000 now we have an access",
    "start": "1206480",
    "end": "1213280"
  },
  {
    "text": "violation if we debug",
    "start": "1213280",
    "end": "1217520"
  },
  {
    "text": "this we can see in ECX now we have 001 to",
    "start": "1223880",
    "end": "1229840"
  },
  {
    "text": "ff40 if we go to that",
    "start": "1229840",
    "end": "1233679"
  },
  {
    "text": "address it's not the location of our code but it's there or thereabouts so",
    "start": "1236120",
    "end": "1241520"
  },
  {
    "text": "we'll be working with this and and manipulating it as as we go on but essentially we're in the the right kind",
    "start": "1241520",
    "end": "1247159"
  },
  {
    "text": "of area to find our buffer so we we've we've so far you know",
    "start": "1247159",
    "end": "1253600"
  },
  {
    "text": "got the the right number or there abouts the right number of bytes formatted",
    "start": "1253600",
    "end": "1260440"
  },
  {
    "text": "this time we're going to put some space in in in the thing we're requesting um",
    "start": "1261080",
    "end": "1266400"
  },
  {
    "text": "you know this is where our our buffer our Shell Code will go essentially",
    "start": "1266400",
    "end": "1272440"
  },
  {
    "text": "so we we've got about 40a there and you know that same percent. 6224",
    "start": "1272520",
    "end": "1279679"
  },
  {
    "text": "96x um format with with specifier so I'm just letting that run because it's",
    "start": "1279679",
    "end": "1284919"
  },
  {
    "text": "quicker there's our access violation and this time we see we are attempting to write to address",
    "start": "1284919",
    "end": "1290600"
  },
  {
    "text": "414141 which is obviously taken from our um uppercase A's so if we debug",
    "start": "1290600",
    "end": "1299240"
  },
  {
    "text": "that and then start rifling through the stack to",
    "start": "1301120",
    "end": "1307760"
  },
  {
    "text": "see whereabouts our format string might be there we go so there there's our buffer",
    "start": "1307760",
    "end": "1316840"
  },
  {
    "text": "here we have A's and our format specifiers here basically so that is a",
    "start": "1316840",
    "end": "1323679"
  },
  {
    "text": "address 001 to um FD 84 there or thereabouts we still have an ECX um 0012",
    "start": "1323679",
    "end": "1332679"
  },
  {
    "text": "ff40 and that's because I dropped the number of in in terms of the WID specifi",
    "start": "1332679",
    "end": "1338799"
  },
  {
    "text": "for to to compensate for the for the number of A's",
    "start": "1338799",
    "end": "1343840"
  },
  {
    "text": "basically so we know we can write to an arbitrary location",
    "start": "1344080",
    "end": "1350080"
  },
  {
    "text": "and so on let me just get rid of",
    "start": "1350080",
    "end": "1354440"
  },
  {
    "text": "this okay this time we're doing the same thing we've got a few more perc X",
    "start": "1355159",
    "end": "1361039"
  },
  {
    "text": "specifiers here and then BBB on the end Four B's now the reason we put more",
    "start": "1361039",
    "end": "1366840"
  },
  {
    "text": "percent X specifies is because we're currently trying to write to somewhere here and this is on the stack so what we",
    "start": "1366840",
    "end": "1372320"
  },
  {
    "text": "want to do is skip over these A's here like this over these x's and then into",
    "start": "1372320",
    "end": "1378000"
  },
  {
    "text": "you know these bbbs is what we're looking to write to which would be 4242 so we request this and it's not going to",
    "start": "1378000",
    "end": "1385919"
  },
  {
    "text": "work we we can see we've overwritten here well we're attempting to write",
    "start": "1385919",
    "end": "1391159"
  },
  {
    "text": "rather to address 7825 7825 now that is percent X percent X",
    "start": "1391159",
    "end": "1397200"
  },
  {
    "text": "percent X so essentially we we've come down into we're we're writing attempting",
    "start": "1397200",
    "end": "1406120"
  },
  {
    "text": "we're pulling address out of here and attempting to right you know out of there so we still have to put some more",
    "start": "1406120",
    "end": "1411559"
  },
  {
    "text": "percent x's in to try and get us to these",
    "start": "1411559",
    "end": "1415399"
  },
  {
    "text": "bbbs so this time we we've we've put in a few",
    "start": "1418200",
    "end": "1424640"
  },
  {
    "text": "more percent X's essentially this time we should attempt to write to 42 42",
    "start": "1424640",
    "end": "1431480"
  },
  {
    "text": "42 okay so the instruction at 41868 reference memory at 42 42 42 42 so",
    "start": "1431480",
    "end": "1438919"
  },
  {
    "text": "we've now found our bees um in terms of the where where it's located on the",
    "start": "1438919",
    "end": "1444720"
  },
  {
    "text": "stack so we've jumped over using these percent xes here we we've jumped",
    "start": "1444720",
    "end": "1449840"
  },
  {
    "text": "over for each percent X it's four bytes basically and you know we're jumping over you know and now we're trying to",
    "start": "1449840",
    "end": "1457000"
  },
  {
    "text": "write to there so instead of using BBB what we'll probably do is you know find",
    "start": "1457000",
    "end": "1463320"
  },
  {
    "text": "out where our um buffer can be found on the stack um find a save return address",
    "start": "1463320",
    "end": "1469919"
  },
  {
    "text": "on the stack and overwrite that with the address of where our buffer can be found on the stack so if I open notepad uh 1.",
    "start": "1469919",
    "end": "1481360"
  },
  {
    "text": "C because we can't easily write into um you know a a command prompt um 0012",
    "start": "1481399",
    "end": "1489760"
  },
  {
    "text": "ff0000 kind of thing we we essentially need to call another program that will",
    "start": "1489760",
    "end": "1495799"
  },
  {
    "text": "execute this for us um so we're going to be setting up our format string using",
    "start": "1495799",
    "end": "1501679"
  },
  {
    "text": "another program and then essentially just calling system and passing buffer in which has our format string and",
    "start": "1501679",
    "end": "1507919"
  },
  {
    "text": "calling the the vulnerable program at the end here let me increase the font size so you can see this for",
    "start": "1507919",
    "end": "1515480"
  },
  {
    "text": "font at the back here you can see where our bbbs were we're now attempting to",
    "start": "1517440",
    "end": "1522919"
  },
  {
    "text": "write to address 0012 FD 54",
    "start": "1522919",
    "end": "1529159"
  },
  {
    "text": "so if we run the program",
    "start": "1529159",
    "end": "1533320"
  },
  {
    "text": "one okay we get the instruction at 0012",
    "start": "1535159",
    "end": "1541559"
  },
  {
    "text": "f83 reference memory at an arbitary location now that's interesting we've",
    "start": "1541559",
    "end": "1547360"
  },
  {
    "text": "managed to overwrite the save return address with a pointer to our you know with a pointer to somewhere on the stack",
    "start": "1547360",
    "end": "1553480"
  },
  {
    "text": "because that thing there is a stack address which should be if it wasn't if",
    "start": "1553480",
    "end": "1560000"
  },
  {
    "text": "it was in the um the program itself it would be the address at 0040 blah blah",
    "start": "1560000",
    "end": "1565760"
  },
  {
    "text": "blah um at reference memory but we're now back on the stack and executing code on the stack it just so happens that",
    "start": "1565760",
    "end": "1571960"
  },
  {
    "text": "there is no code on the stack that's why we have this access violation so we",
    "start": "1571960",
    "end": "1578000"
  },
  {
    "text": "then notepad",
    "start": "1578000",
    "end": "1582240"
  },
  {
    "text": "2.c this time we're going to put some break points again if I inrease the font",
    "start": "1583320",
    "end": "1591080"
  },
  {
    "text": "size so essentially it's the same string but immediately after that we're going",
    "start": "1594440",
    "end": "1599559"
  },
  {
    "text": "to be putting some break points on CC hex cc is the um hex representation of a",
    "start": "1599559",
    "end": "1608880"
  },
  {
    "text": "uh int three which is a break point in other words stop execution at this point um and if we run this program two we",
    "start": "1608880",
    "end": "1616520"
  },
  {
    "text": "should get a message pop up on the screen saying break breakpoint reached at address on some stack address",
    "start": "1616520",
    "end": "1624200"
  },
  {
    "text": "so okay the exception breakpoint a breakpoint has been reached occurred in",
    "start": "1624799",
    "end": "1631520"
  },
  {
    "text": "the application at location 0012 fd80 so we've landed back in the stack",
    "start": "1631520",
    "end": "1638080"
  },
  {
    "text": "we've overwritten the save return address with a pointer to our our code and now we're starting to execute code",
    "start": "1638080",
    "end": "1643720"
  },
  {
    "text": "on the stack it just so happens our code we're executing is an N3 which is breakpoint so it's nice to see that",
    "start": "1643720",
    "end": "1650320"
  },
  {
    "text": "we're now back on the stack so if we want to then run an",
    "start": "1650320",
    "end": "1655799"
  },
  {
    "text": "arbitary program notepad 3.",
    "start": "1655799",
    "end": "1661200"
  },
  {
    "text": "C what this one does is basically we have our exploit code 558b EC people",
    "start": "1670279",
    "end": "1677799"
  },
  {
    "text": "should recognize that as the procedure prologue um we're essentially this is where our exploit code is starting we're",
    "start": "1677799",
    "end": "1684240"
  },
  {
    "text": "simply calling system um sorry when exec and executing you know a a shell so if",
    "start": "1684240",
    "end": "1690440"
  },
  {
    "text": "we run this essentially we remember we're",
    "start": "1690440",
    "end": "1696840"
  },
  {
    "text": "having to write to ECX a large number of bytes to you know that um is equal to uh",
    "start": "1696840",
    "end": "1704120"
  },
  {
    "text": "0012 um FF whatever it was so that's why if I ought and tab away it will go much",
    "start": "1704120",
    "end": "1709919"
  },
  {
    "text": "quicker okay so the exception breakpoint has been",
    "start": "1709919",
    "end": "1715960"
  },
  {
    "text": "reached now if I move that you can see we have here again let",
    "start": "1716039",
    "end": "1723120"
  },
  {
    "text": "me increase the font size properties",
    "start": "1723120",
    "end": "1728399"
  },
  {
    "text": "font okay we have",
    "start": "1730519",
    "end": "1736559"
  },
  {
    "text": "here Microsoft Windows 2000 uh version 5 blah blah blah uh copyrights and",
    "start": "1736559",
    "end": "1743159"
  },
  {
    "text": "everything like that so we've got our shell essentially now the reason we've got a breakpoint there is because I",
    "start": "1743159",
    "end": "1748399"
  },
  {
    "text": "don't terminate the program properly it's for demonstration purposes um this ffdo is our call eax we essentially put",
    "start": "1748399",
    "end": "1756480"
  },
  {
    "text": "into eax the address of winek um call eax here ffdo and then set a breako",
    "start": "1756480",
    "end": "1763200"
  },
  {
    "text": "that's CC on the end that's why we get that breakpoint coming up so",
    "start": "1763200",
    "end": "1769200"
  },
  {
    "text": "that essentially is you know running through uh taking a a vulnerable program",
    "start": "1769200",
    "end": "1776080"
  },
  {
    "text": "and trying to explain now before getting on to our or Oracle application server and its format string vulnerability um",
    "start": "1776080",
    "end": "1782159"
  },
  {
    "text": "are there any questions about that have did did I make myself clear or are there any points I didn't make clear is",
    "start": "1782159",
    "end": "1788880"
  },
  {
    "text": "everyone cool okay Oracle application server great",
    "start": "1788880",
    "end": "1795279"
  },
  {
    "text": "product highly highly functional um K is for prettyy much every developer's taste",
    "start": "1795279",
    "end": "1801159"
  },
  {
    "text": "um if you want to code in plsql you've got it if you want to code in JSP you've got it Java Pearl fast CGI it's there",
    "start": "1801159",
    "end": "1808600"
  },
  {
    "text": "and ready Oracle application server is based upon Apache and with the latest um",
    "start": "1808600",
    "end": "1815799"
  },
  {
    "text": "incarnation of or Oracle application server we have something called orav now",
    "start": "1815799",
    "end": "1821360"
  },
  {
    "text": "orav is essentially essentially webdav webdav being the web uh distributed",
    "start": "1821360",
    "end": "1827000"
  },
  {
    "text": "author authoring and conversing system essentially turning the worldwide web into a a glorified file system",
    "start": "1827000",
    "end": "1835240"
  },
  {
    "text": "um it's a modification in terms of Oracle um aaav it's simply a",
    "start": "1835240",
    "end": "1840519"
  },
  {
    "text": "modification of the U mod DAV which is like the real Apache",
    "start": "1840519",
    "end": "1845960"
  },
  {
    "text": "version now they've modified it in in a couple of ways one of those one of those is to log bad gateway errors which moddb",
    "start": "1845960",
    "end": "1854039"
  },
  {
    "text": "by default does not do but if we look at the source code for modav in in DAV V.C",
    "start": "1854039",
    "end": "1860159"
  },
  {
    "text": "there is a function DAV lookup URI which when called",
    "start": "1860159",
    "end": "1866360"
  },
  {
    "text": "essentially says the destination URI refers to different scheme or Port now what that's essentially saying is here",
    "start": "1866360",
    "end": "1872799"
  },
  {
    "text": "we have percent s which is the scheme so that's like HTTP colon or https and they",
    "start": "1872799",
    "end": "1879039"
  },
  {
    "text": "want something else now there's there's also another area where the you know the",
    "start": "1879039",
    "end": "1884480"
  },
  {
    "text": "port number is different so if you you know tell to enter port 80 but you say the scheme with a with a copy",
    "start": "1884480",
    "end": "1890559"
  },
  {
    "text": "instruction is you know Port 999 then essentially you'll get another bad",
    "start": "1890559",
    "end": "1896720"
  },
  {
    "text": "gateway um error the thing is with modav this code is never executed because they don't log bad gateway error messages by",
    "start": "1896720",
    "end": "1903760"
  },
  {
    "text": "default um Oracle have modified the code so they do actually log these so this is",
    "start": "1903760",
    "end": "1908919"
  },
  {
    "text": "a problem waiting to happen if mod DAV you know were to suddenly start logging um bad bad gateway errors so they they",
    "start": "1908919",
    "end": "1915960"
  },
  {
    "text": "really need to change now essentially what happens is we we call DAV lookup",
    "start": "1915960",
    "end": "1922039"
  },
  {
    "text": "URI here we're taking in um user input here",
    "start": "1922039",
    "end": "1929120"
  },
  {
    "text": "I I'll I'll demonstrate this in a second so the DAV look uh DAV lookup URI",
    "start": "1929120",
    "end": "1934399"
  },
  {
    "text": "function is called we're taking user input here and assign it to result. error.",
    "start": "1934399",
    "end": "1940440"
  },
  {
    "text": "description now once that's been called we then say if it's a bad request log",
    "start": "1940440",
    "end": "1946360"
  },
  {
    "text": "this error apore underscore our error and we take in that user input lookup.",
    "start": "1946360",
    "end": "1952480"
  },
  {
    "text": "error. description so we can control what's going on now this is a form this is the",
    "start": "1952480",
    "end": "1958360"
  },
  {
    "text": "format string vulnerability it doesn't look like one but it actually is it's simply because the Apache um log error",
    "start": "1958360",
    "end": "1964679"
  },
  {
    "text": "basically is um the underlying code beneath that calls um the print F family",
    "start": "1964679",
    "end": "1970840"
  },
  {
    "text": "of functions so in terms of exploiting this oh let",
    "start": "1970840",
    "end": "1977240"
  },
  {
    "text": "let's talk about about webdav for a second essentially webdav is turned on by default um with Oracle application",
    "start": "1977240",
    "end": "1983480"
  },
  {
    "text": "server which is a big vulnerability in in and of itself we can upload arbitrary",
    "start": "1983480",
    "end": "1988600"
  },
  {
    "text": "um scripts and so on and and gain control by using a couple of other flaws",
    "start": "1988600",
    "end": "1993799"
  },
  {
    "text": "that allows us to like um Traverse the tree using um JSP and so on to execute",
    "start": "1993799",
    "end": "2000880"
  },
  {
    "text": "arbitary JSP um code by default if you uploaded the JSP",
    "start": "2000880",
    "end": "2006440"
  },
  {
    "text": "and without these other bugs you can't execute the GSP within there but there are other ways to you know to gain",
    "start": "2006440",
    "end": "2012880"
  },
  {
    "text": "access to it but more interestingly is is this format string vulnerabilities because they're they don't occur frequently on on Windows platforms and",
    "start": "2012880",
    "end": "2019519"
  },
  {
    "text": "when they do it's good to to discuss them so if we um quickly go over",
    "start": "2019519",
    "end": "2029080"
  },
  {
    "text": "DAV essentially what we have here is a",
    "start": "2032519",
    "end": "2039519"
  },
  {
    "text": "a put which simply uploads a file creates a file on on the web",
    "start": "2039519",
    "end": "2045278"
  },
  {
    "text": "server okay so what we did essentially was um say put",
    "start": "2052919",
    "end": "2061679"
  },
  {
    "text": "slavu 3.txt here's the body of it and we get a 2011 created response",
    "start": "2061679",
    "end": "2069720"
  },
  {
    "text": "um that in andov itself doesn't have the problem in terms of the format string vulnerability what",
    "start": "2069919",
    "end": "2076079"
  },
  {
    "text": "happens where where the format string vulnerability happens is in the copy function so we've uploaded this file let",
    "start": "2076079",
    "end": "2082480"
  },
  {
    "text": "me just change that to F3 we've uploaded this file and then using the copy function we essentially give it a",
    "start": "2082480",
    "end": "2089079"
  },
  {
    "text": "destination let me try and uh give that a larger size so you can see it",
    "start": "2089079",
    "end": "2097919"
  },
  {
    "text": "okay here we have destination now we we've taled in over",
    "start": "2098160",
    "end": "2103800"
  },
  {
    "text": "HTTP but we've set the scheme to https so if we press enter here we get a bad",
    "start": "2103800",
    "end": "2109440"
  },
  {
    "text": "gateway destination URI refers to a different scheme or port and we can see this https",
    "start": "2109440",
    "end": "2116160"
  },
  {
    "text": "essentially so if we modify this and change the scheme to percent",
    "start": "2116160",
    "end": "2125359"
  },
  {
    "text": "ends we should get an access violation in Apache there we go okay sorry let me",
    "start": "2125359",
    "end": "2131720"
  },
  {
    "text": "just the instruction this is an Apache EXE the",
    "start": "2131720",
    "end": "2137400"
  },
  {
    "text": "instruction at 6 f96 342 reference memory at 000000 the memory couldn't be",
    "start": "2137400",
    "end": "2144920"
  },
  {
    "text": "read which is interesting because it should have been writing okay essentially this is where",
    "start": "2144920",
    "end": "2150920"
  },
  {
    "text": "the the format string format string vulnerability lies",
    "start": "2150920",
    "end": "2156160"
  },
  {
    "text": "anyway so in terms of approaches to exploiting this we have various options",
    "start": "2156240",
    "end": "2162680"
  },
  {
    "text": "available to us we could overwrite a save return address on the stack we could overwrite an exception Handler or",
    "start": "2162680",
    "end": "2168760"
  },
  {
    "text": "the unhandled exception filter which is always found at this location so we can guarantee you know if we overwrite this",
    "start": "2168760",
    "end": "2176400"
  },
  {
    "text": "um and cause an access violation we can get back to our code",
    "start": "2176400",
    "end": "2181480"
  },
  {
    "text": "essentially problem with using a save return address is it moves",
    "start": "2181480",
    "end": "2187960"
  },
  {
    "text": "we will be in terms of the export I'm demonstrating um we will be overwriting the save return address and I'll come",
    "start": "2187960",
    "end": "2193319"
  },
  {
    "text": "into reasons why we're not um using the unhandled exception filter in a in a second the location of the the stack",
    "start": "2193319",
    "end": "2200560"
  },
  {
    "text": "changes it's often found around 320 BD B8 often found around 310 BD B8 324 BD",
    "start": "2200560",
    "end": "2209440"
  },
  {
    "text": "B8 so we we have choices basically and we have to say which one comes up most",
    "start": "2209440",
    "end": "2215640"
  },
  {
    "text": "often and you know you use that now the reason we we're going to",
    "start": "2215640",
    "end": "2221480"
  },
  {
    "text": "write overwrite the save return address here is essentially um after Slammer and the code I released at black hat last",
    "start": "2221480",
    "end": "2228000"
  },
  {
    "text": "time and it being used as a template I don't want to give reliable code using overwriting the save return address is",
    "start": "2228000",
    "end": "2233680"
  },
  {
    "text": "not reliable here you know it works maybe one times out of 10 now you know anyone who actually sits",
    "start": "2233680",
    "end": "2240760"
  },
  {
    "text": "down and and reads this stuff is going to have to make some major modifications to make this uh you know guaranteed to",
    "start": "2240760",
    "end": "2248480"
  },
  {
    "text": "work all the time because I don't want to be writing code that's going to be plugged straight into a worm",
    "start": "2248480",
    "end": "2256200"
  },
  {
    "text": "again we're going to be using the um remember we had with",
    "start": "2256880",
    "end": "2262720"
  },
  {
    "text": "specifiers and I talked about using um percent HX we we can use the same",
    "start": "2262720",
    "end": "2268400"
  },
  {
    "text": "technique for the percent n specifier we're going to do a three-stage",
    "start": "2268400",
    "end": "2273720"
  },
  {
    "text": "overwrite as opposed to you know writing a a complete dword four bytes in other",
    "start": "2273720",
    "end": "2278760"
  },
  {
    "text": "words with um a single value see the",
    "start": "2278760",
    "end": "2283800"
  },
  {
    "text": "well let me get to that first actually because of the location of um",
    "start": "2283800",
    "end": "2289680"
  },
  {
    "text": "our exploit where our exploit code is going to be is a very big number it's much bigger than our 0012",
    "start": "2289680",
    "end": "2296560"
  },
  {
    "text": "ff0000 we get into all kinds of problems and it it's a nightmare so what we can",
    "start": "2296560",
    "end": "2302079"
  },
  {
    "text": "do is instead of using a single dword overwrite we can do it in stages so",
    "start": "2302079",
    "end": "2307599"
  },
  {
    "text": "first off if this is this is by the way this is from uh you know here's one I made earlier kind of things our save",
    "start": "2307599",
    "end": "2314960"
  },
  {
    "text": "return address that we we've chosen can be found most often at",
    "start": "2314960",
    "end": "2320880"
  },
  {
    "text": "03220 BD B8 and when it's this color blue that's what it is beforehand using",
    "start": "2320880",
    "end": "2327599"
  },
  {
    "text": "the percent n hn specifier we're going to overwrite first off the two middle",
    "start": "2327599",
    "end": "2333079"
  },
  {
    "text": "bites and that means essentially we don't need to format you know output a large number of bytes to to overwrite",
    "start": "2333079",
    "end": "2339920"
  },
  {
    "text": "just two bytes you know um 65,000 is the max we need to go to we we don't even",
    "start": "2339920",
    "end": "2345560"
  },
  {
    "text": "need to go that far we're essentially going to write um about 200 bytes into there so ECX will overwrite this part",
    "start": "2345560",
    "end": "2352480"
  },
  {
    "text": "here the next thing we do again using the percent hn specifier is overwrite",
    "start": "2352480",
    "end": "2358359"
  },
  {
    "text": "these two bytes of the save return address and then finally we overwrite",
    "start": "2358359",
    "end": "2364880"
  },
  {
    "text": "you know these four here with nulls entally so demonstrating this if this is",
    "start": "2364880",
    "end": "2371520"
  },
  {
    "text": "the um save return address in in memory what we do is first off overwrite these",
    "start": "2371520",
    "end": "2377440"
  },
  {
    "text": "two then these two then these four that allows us to completely gain control of",
    "start": "2377440",
    "end": "2383920"
  },
  {
    "text": "the save return address and when the the function returns it returns to a location of our choosing and that's",
    "start": "2383920",
    "end": "2391200"
  },
  {
    "text": "using the percent hn specifier now I'll show you the code",
    "start": "2391200",
    "end": "2398920"
  },
  {
    "text": "at the end here just highlighting it make it more difficult to",
    "start": "2402400",
    "end": "2407680"
  },
  {
    "text": "see if I scroll up okay I I'll read it to you anyway what we're doing",
    "start": "2407680",
    "end": "2414400"
  },
  {
    "text": "is um using a percent hn specifier there then writing another you know",
    "start": "2414400",
    "end": "2421280"
  },
  {
    "text": "352 bytes out writing that to you know the next two uh bytes along and then",
    "start": "2421280",
    "end": "2428000"
  },
  {
    "text": "calling percent n to overwrite four bytes back kind of thing",
    "start": "2428000",
    "end": "2433920"
  },
  {
    "text": "so because this is on the stack we can control what addresses you",
    "start": "2433920",
    "end": "2441000"
  },
  {
    "text": "know we want to write to so essentially we're overwriting from um 0320 BD B9 so that's",
    "start": "2441000",
    "end": "2450319"
  },
  {
    "text": "the going back here B9 starts here so we overwrite",
    "start": "2450319",
    "end": "2455800"
  },
  {
    "text": "these two we also put on the stack ba you know and",
    "start": "2455800",
    "end": "2461760"
  },
  {
    "text": "that overwrites from there and then we go back to B5 which overwrites from",
    "start": "2461760",
    "end": "2468079"
  },
  {
    "text": "there so that's this the stages in which we're doing",
    "start": "2468079",
    "end": "2473319"
  },
  {
    "text": "this right so in terms of",
    "start": "2473319",
    "end": "2478440"
  },
  {
    "text": "exploitation as I said this is going to be unreliable oh in terms of the actual",
    "start": "2478440",
    "end": "2483520"
  },
  {
    "text": "exploit we're doing um it's very very simple nothing fancy um we're just calling wi exac doing",
    "start": "2483520",
    "end": "2490240"
  },
  {
    "text": "launching cmdc doing a directory listing and piping out to file or.",
    "start": "2490240",
    "end": "2496640"
  },
  {
    "text": "txt doesn't exist at the",
    "start": "2496640",
    "end": "2500559"
  },
  {
    "text": "moment okay so oh it worked first time that's it was supposed to work like five",
    "start": "2501720",
    "end": "2507040"
  },
  {
    "text": "you know after the fifth time but it's worked first time okay we've reached a break point now again because it's for",
    "start": "2507040",
    "end": "2513240"
  },
  {
    "text": "demonstration purposes I want to Halt the the execution so if we look here at",
    "start": "2513240",
    "end": "2520160"
  },
  {
    "text": "the end of the code is um",
    "start": "2520160",
    "end": "2526160"
  },
  {
    "text": "FF ffdo is where we're calling eex and the couple of knops here and our",
    "start": "2526160",
    "end": "2532800"
  },
  {
    "text": "breakpoint there okay so if we look for that file it wasn't found initially if we do",
    "start": "2532800",
    "end": "2539760"
  },
  {
    "text": "a directory listing it's now found kind of thing so we've managed to execute arbitri code you know spawn C cmd.exe",
    "start": "2539760",
    "end": "2546119"
  },
  {
    "text": "did a directory list and piped out to or. txt so if I stop",
    "start": "2546119",
    "end": "2554000"
  },
  {
    "text": "that if I do it again it should you know this is where it's unreliable because I'm overwriting a save return address um",
    "start": "2554000",
    "end": "2561520"
  },
  {
    "text": "we tried to write to 32 BD B9 this time but that memory's not been initialized",
    "start": "2561520",
    "end": "2567440"
  },
  {
    "text": "and that's why we get this access violation so going through it you know it probably works one time up 10 Again",
    "start": "2567440",
    "end": "2574119"
  },
  {
    "text": "doesn't work this is why you would probably go for something like the unfiltered",
    "start": "2574119",
    "end": "2579240"
  },
  {
    "text": "exception Handler um because it's guarant be guaranteed to be in the right location at the right time",
    "start": "2579240",
    "end": "2586760"
  },
  {
    "text": "always okay so you we can see it it's working you know one time out of every",
    "start": "2599280",
    "end": "2604480"
  },
  {
    "text": "few",
    "start": "2604480",
    "end": "2607480"
  },
  {
    "text": "okay we can see here actually the ESP is actually 0314 so we're we're off basically we're",
    "start": "2614880",
    "end": "2622760"
  },
  {
    "text": "off Target if we actually go to that address though um 03 um 1",
    "start": "2622760",
    "end": "2632119"
  },
  {
    "text": "0314 uh b d B8",
    "start": "2632119",
    "end": "2637720"
  },
  {
    "text": "okay this here is the save return address these four byes here so if we",
    "start": "2637720",
    "end": "2643880"
  },
  {
    "text": "step through this and change we can see ECX here is",
    "start": "2643880",
    "end": "2650760"
  },
  {
    "text": "0320 bdb 9 if I change that to",
    "start": "2650760",
    "end": "2655960"
  },
  {
    "text": "14 actually let me just delete this delete r.",
    "start": "2655960",
    "end": "2662920"
  },
  {
    "text": "txt so if we then step through that we can see you guys at the back probably",
    "start": "2663640",
    "end": "2670839"
  },
  {
    "text": "won't see it but this is just changed red here this um 01 BF and 01 has",
    "start": "2670839",
    "end": "2678160"
  },
  {
    "text": "changed to Red so that means data has just changed in there so we've just gained control of two bytes the middle",
    "start": "2678160",
    "end": "2684160"
  },
  {
    "text": "two bytes of the save return address if we have five we get another access violation but if we change it to 14 here",
    "start": "2684160",
    "end": "2691480"
  },
  {
    "text": "we'll see the next two bytes along these two bytes here of the same save return",
    "start": "2691480",
    "end": "2697400"
  },
  {
    "text": "address are going to change Okay so we've now got written in",
    "start": "2697400",
    "end": "2703480"
  },
  {
    "text": "here uh BF 203 if we have five",
    "start": "2703480",
    "end": "2709920"
  },
  {
    "text": "that we now have a the the next axis violation where if we move up slightly",
    "start": "2709920",
    "end": "2716800"
  },
  {
    "text": "we can see that the 7e here and these three byes here are going to be overwritten",
    "start": "2716800",
    "end": "2724599"
  },
  {
    "text": "sorry I need to I need to change it to 14 right 14 um F1 no Okay so we've now",
    "start": "2729119",
    "end": "2738119"
  },
  {
    "text": "overwritten the last bite of the save return address with Z 0 so our new save return address is",
    "start": "2738119",
    "end": "2744359"
  },
  {
    "text": "0320 bf0 which is somewhere in the middle of our export code I'm just going to change",
    "start": "2744359",
    "end": "2750480"
  },
  {
    "text": "this to 14 by the way you know in continue execution as if we had guessed the right location so we have five that",
    "start": "2750480",
    "end": "2757040"
  },
  {
    "text": "we get a user breakpoint called from code you know from code at 314 blah blah",
    "start": "2757040",
    "end": "2762359"
  },
  {
    "text": "you know an address on the stack so we've executed through our code if we then you know we've just deleted um",
    "start": "2762359",
    "end": "2770440"
  },
  {
    "text": ".txt and it's back again D or. txt so",
    "start": "2770440",
    "end": "2777240"
  },
  {
    "text": "essentially that's what's going on we're we're using those that three-stage overwrite to to overwrite the save",
    "start": "2777240",
    "end": "2782359"
  },
  {
    "text": "return address so that's essentially how it can be done and",
    "start": "2782359",
    "end": "2788920"
  },
  {
    "text": "because Oracle uh you know or Oracle uh application service restarts even if",
    "start": "2789200",
    "end": "2794640"
  },
  {
    "text": "you're you're using a um crappy exploit like the one I've coded here you know",
    "start": "2794640",
    "end": "2800839"
  },
  {
    "text": "you're guaranteed you know it's going to work one time out of you know the number of attempts you try it kind of thing so",
    "start": "2800839",
    "end": "2807200"
  },
  {
    "text": "you just keep on retrying because it's restarted every time access",
    "start": "2807200",
    "end": "2812000"
  },
  {
    "text": "violates well it's lucky it worked first time anyway okay",
    "start": "2813440",
    "end": "2819200"
  },
  {
    "text": "so obviously once you've gained control of the application server you're",
    "start": "2819200",
    "end": "2825599"
  },
  {
    "text": "essentially through the organization's firewall now if they don't have another firewall separating their",
    "start": "2825599",
    "end": "2833440"
  },
  {
    "text": "um database servers um then you can you know use uh any port on the the actual",
    "start": "2833440",
    "end": "2840760"
  },
  {
    "text": "database server itself to try and gain control but of course you can if if",
    "start": "2840760",
    "end": "2845800"
  },
  {
    "text": "there's communication with with the backend database server we can go through the allowed Channel",
    "start": "2845800",
    "end": "2851000"
  },
  {
    "text": "Through the firewall anyway um from I you know between the the web server and",
    "start": "2851000",
    "end": "2856160"
  },
  {
    "text": "and the database server and exploit buffer overflows within the listener or within Oracle itself the presenting an",
    "start": "2856160",
    "end": "2863079"
  },
  {
    "text": "overly long username to Oracle um database server allows us to overwrite",
    "start": "2863079",
    "end": "2869240"
  },
  {
    "text": "um a save return address on the stack um and allows us to gain control the in",
    "start": "2869240",
    "end": "2874599"
  },
  {
    "text": "terms of exploiting that actually I've unfortunately the the most efficient way of of doing that is actually overwriting",
    "start": "2874599",
    "end": "2880800"
  },
  {
    "text": "the exception Handler on the stack to gain control um which means um once you've done that you",
    "start": "2880800",
    "end": "2888359"
  },
  {
    "text": "need to try and recover the program's execution otherwise it will die and that's a very very noisy problem people",
    "start": "2888359",
    "end": "2894319"
  },
  {
    "text": "will notice something's going wrong so okay are there any",
    "start": "2894319",
    "end": "2902599"
  },
  {
    "text": "questions no questions is the moon made of cheese kind of",
    "start": "2904559",
    "end": "2911839"
  },
  {
    "text": "questions no oh one yeah go ahead yes there's a patch on the metalink site the",
    "start": "2911839",
    "end": "2918040"
  },
  {
    "text": "only problem is if you are evaluating Oracle or Oracle application server um",
    "start": "2918040",
    "end": "2923960"
  },
  {
    "text": "and you haven't bought it yet you don't get access to that patch it's only paying customers that you know are allowed the patches um so yes there is a",
    "start": "2923960",
    "end": "2931319"
  },
  {
    "text": "patch and that's available from the metalink site thanks for bringing that up I should have actually had that in the presentation",
    "start": "2931319",
    "end": "2937040"
  },
  {
    "text": "any other questions",
    "start": "2937040",
    "end": "2940400"
  },
  {
    "text": "sure well it's actually um you can code an exploit that basically works 100% of",
    "start": "2946440",
    "end": "2953480"
  },
  {
    "text": "the time and you know you clean up after it and because it's in the actual",
    "start": "2953480",
    "end": "2959760"
  },
  {
    "text": "logging process where the problem lies you gain control before it logs so if",
    "start": "2959760",
    "end": "2966280"
  },
  {
    "text": "someone's doing you know using a dumb exploit like this one then yeah you'll see you'll notice something's going wrong kind of thing",
    "start": "2966280",
    "end": "2973400"
  },
  {
    "text": "um but if if it's done properly then no you'll probably not know something's",
    "start": "2973400",
    "end": "2978599"
  },
  {
    "text": "going wrong of course you should turn off webdav for a start that will you know save you from this problem um",
    "start": "2978599",
    "end": "2984920"
  },
  {
    "text": "because it's really bad to have a production server with a webd enabled on it uh you don't need a use your ID or password to to use it either so it's",
    "start": "2984920",
    "end": "2992119"
  },
  {
    "text": "very you know uh a big threat in terms of having an application server sat",
    "start": "2992119",
    "end": "2998640"
  },
  {
    "text": "there so first thing is turn off webdb and that even without a patch that's going to save you from this exploitation",
    "start": "2998640",
    "end": "3004520"
  },
  {
    "text": "of this problem no more questions okay well",
    "start": "3004520",
    "end": "3010760"
  },
  {
    "text": "thank you very much for coming and I hope you know you've managed to derive something useful out of this this",
    "start": "3010760",
    "end": "3016640"
  },
  {
    "text": "[Applause]",
    "start": "3016640",
    "end": "3022960"
  },
  {
    "text": "talk",
    "start": "3025640",
    "end": "3028640"
  },
  {
    "text": "e",
    "start": "3055640",
    "end": "3058640"
  },
  {
    "text": "e",
    "start": "3085559",
    "end": "3088559"
  },
  {
    "text": "e",
    "start": "3115520",
    "end": "3118520"
  },
  {
    "text": "e",
    "start": "3145520",
    "end": "3148520"
  },
  {
    "text": "e",
    "start": "3175440",
    "end": "3178440"
  },
  {
    "text": "e",
    "start": "3205440",
    "end": "3208440"
  },
  {
    "text": "e",
    "start": "3235440",
    "end": "3238440"
  },
  {
    "text": "e",
    "start": "3265359",
    "end": "3268359"
  },
  {
    "text": "e",
    "start": "3295319",
    "end": "3298319"
  },
  {
    "text": "e",
    "start": "3325319",
    "end": "3328319"
  },
  {
    "text": "e",
    "start": "3355240",
    "end": "3358240"
  },
  {
    "text": "e",
    "start": "3385240",
    "end": "3388240"
  },
  {
    "text": "e",
    "start": "3415240",
    "end": "3418240"
  },
  {
    "text": "e",
    "start": "3445160",
    "end": "3448160"
  },
  {
    "text": "e",
    "start": "3475119",
    "end": "3478119"
  },
  {
    "text": "e",
    "start": "3505119",
    "end": "3508119"
  },
  {
    "text": "e",
    "start": "3535039",
    "end": "3538039"
  },
  {
    "text": "e",
    "start": "3565039",
    "end": "3568039"
  },
  {
    "text": "e",
    "start": "3595039",
    "end": "3598039"
  },
  {
    "text": "e",
    "start": "3624960",
    "end": "3627960"
  },
  {
    "text": "e e",
    "start": "3654920",
    "end": "3658960"
  }
]