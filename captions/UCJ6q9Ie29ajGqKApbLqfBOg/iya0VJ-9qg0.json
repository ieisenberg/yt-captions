[
  {
    "text": "hello everyone we are very excited to be here thank you for having us and welcome to the session breaching AWS accounts",
    "start": "2520",
    "end": "9599"
  },
  {
    "text": "through Shadow resources in this session we will demonstrate you several vulnerabilities that were found on AWS",
    "start": "9599",
    "end": "16400"
  },
  {
    "text": "the most severe of this vulnerability could allow an attacker to inject admin rooll to another AWS account so let's",
    "start": "16400",
    "end": "24519"
  },
  {
    "text": "start by discussing the most debatable topic on AWS which is AWS account ID",
    "start": "24519",
    "end": "31279"
  },
  {
    "text": "each account has a unique identifier associated with it this identifier",
    "start": "31279",
    "end": "36680"
  },
  {
    "text": "consists from 12 digits and the most important thing about this identifier is",
    "start": "36680",
    "end": "42120"
  },
  {
    "text": "that some treat it as a secret and some don't and the along the history of AWS",
    "start": "42120",
    "end": "47960"
  },
  {
    "text": "we have many different opinion with whether it is a secret or not although AWS in their official",
    "start": "47960",
    "end": "55840"
  },
  {
    "text": "documentation state that this identifier should be shed carefully they do not",
    "start": "55840",
    "end": "61680"
  },
  {
    "text": "consider this as secret but we as a security security practitioners knowing",
    "start": "61680",
    "end": "68080"
  },
  {
    "text": "know that attacker could achieve problematic things only by knowing this account ID so what is the right answer",
    "start": "68080",
    "end": "76040"
  },
  {
    "text": "are AWS account ID secret or not we hope that by the end of this session we will",
    "start": "76040",
    "end": "81400"
  },
  {
    "text": "have more solid opinion about this so let me let us introduce ourself",
    "start": "81400",
    "end": "87640"
  },
  {
    "text": "my name is yir kotoda and here with with me are Michael kachinski and ofek we're",
    "start": "87640",
    "end": "93119"
  },
  {
    "text": "all security researcher from Aqua security team naus and we focus on our on our daily on cloud vulnerabilities",
    "start": "93119",
    "end": "100040"
  },
  {
    "text": "open source vulnerabilities and more let's go over the agenda we will explain",
    "start": "100040",
    "end": "105520"
  },
  {
    "text": "what our shadow resources then we will demonstrate several vulnerabilities that we found and an open source tool that we",
    "start": "105520",
    "end": "112920"
  },
  {
    "text": "developed during this research in order to find more vulnerability after this we will",
    "start": "112920",
    "end": "118680"
  },
  {
    "text": "introduce a new technique called bucket Monopoly that helped us emphasize the risk of our funding and we will end our",
    "start": "118680",
    "end": "126560"
  },
  {
    "text": "session with some mitigations and recommendations to avoid such a vulnerability especially on open source",
    "start": "126560",
    "end": "133920"
  },
  {
    "text": "project let's discuss our our journey began while we worked with the AWS",
    "start": "133920",
    "end": "138959"
  },
  {
    "text": "Management console which is the go of AWS and specifically with the cloud",
    "start": "138959",
    "end": "144160"
  },
  {
    "text": "formation service we notice that when a user uploads a template file a WS behind",
    "start": "144160",
    "end": "150840"
  },
  {
    "text": "the scenes creates an S3 bucket for the user although the user did not exp",
    "start": "150840",
    "end": "156440"
  },
  {
    "text": "explicitly ask the creation of this bucket this is how the service works by",
    "start": "156440",
    "end": "161560"
  },
  {
    "text": "by default we've decided to name this kind of resource of resource that",
    "start": "161560",
    "end": "166599"
  },
  {
    "text": "created automatically Shadow resources so let's explain this term when we refer",
    "start": "166599",
    "end": "172120"
  },
  {
    "text": "to Shadow resources we are mainly refer to resources that generated automatically or semi-automatically by",
    "start": "172120",
    "end": "180959"
  },
  {
    "text": "AWS most of the time they spawn without user intervention and they might go unnoticed",
    "start": "180959",
    "end": "187640"
  },
  {
    "text": "by the account owner and the great example for this is just the S3 bucket",
    "start": "187640",
    "end": "192920"
  },
  {
    "text": "that we saw that AWS creates when the user uses the cloud formation service via the Management console now let's",
    "start": "192920",
    "end": "200480"
  },
  {
    "text": "align another uh term which is estb backet service it is one of the first",
    "start": "200480",
    "end": "206480"
  },
  {
    "text": "service that exist by AWS and this Service as some spal uniqueness for",
    "start": "206480",
    "end": "212799"
  },
  {
    "text": "example bucket names must be globally unique across all AWS accounts and for",
    "start": "212799",
    "end": "218599"
  },
  {
    "text": "example if you create a bucket named cool bucket no one else on AWS will be",
    "start": "218599",
    "end": "224760"
  },
  {
    "text": "able to CLA claim this this name it will be available only on under your account",
    "start": "224760",
    "end": "230680"
  },
  {
    "text": "so let's up set up a gear and talk about our first vulnerability in cloud",
    "start": "230680",
    "end": "235720"
  },
  {
    "text": "formation first of all what is cloud formation it is an in infrastructure is",
    "start": "235720",
    "end": "241000"
  },
  {
    "text": "code service by AWS similar to the terraform project a user will usually",
    "start": "241000",
    "end": "246120"
  },
  {
    "text": "Define a template file that contains other AWS resources then the user stores",
    "start": "246120",
    "end": "251760"
  },
  {
    "text": "this file locally or in S3 bucket and then the user needs to Define an S3",
    "start": "251760",
    "end": "257959"
  },
  {
    "text": "bucket sorry a stack that will hold this template file and when the user will",
    "start": "257959",
    "end": "263360"
  },
  {
    "text": "submit the stack the cloud formation service deploys this uh the resource that exists on the template template",
    "start": "263360",
    "end": "269360"
  },
  {
    "text": "file as we saw before when the user uses via the Management console behind the scenes",
    "start": "269360",
    "end": "274759"
  },
  {
    "text": "AWS creates an S3 bucket for the user now I want us to focus on the naming",
    "start": "274759",
    "end": "280160"
  },
  {
    "text": "pattern of this S3 bucket it will consist of three parts",
    "start": "280160",
    "end": "285360"
  },
  {
    "text": "first of all it's the prefix of the service in this case CF template it's a constant value that will be remain the",
    "start": "285360",
    "end": "292280"
  },
  {
    "text": "same across all AWS then we have a ash which is unique per account and then we have the Reg",
    "start": "292280",
    "end": "300360"
  },
  {
    "text": "which related to where the user initiates the cloud formation service so basically whenever the user uses the",
    "start": "300360",
    "end": "307080"
  },
  {
    "text": "cloud formation service via the Management console AWS creates an S3 bucket and then if the user move to a",
    "start": "307080",
    "end": "314720"
  },
  {
    "text": "new region for the first time AWS create again sorry cloud formation creates a",
    "start": "314720",
    "end": "321400"
  },
  {
    "text": "new bucket with the same prefix with the same Ash but with a different region so",
    "start": "321400",
    "end": "327919"
  },
  {
    "text": "we have here a semi predictable bucket name so what if an attacker open this",
    "start": "327919",
    "end": "335039"
  },
  {
    "text": "bucket before the user if an attacker does so the attacker actually does something that's called S3",
    "start": "335039",
    "end": "342840"
  },
  {
    "text": "bucket name squatting or a bucket sniping you can read a great blog by or",
    "start": "342840",
    "end": "348600"
  },
  {
    "text": "M about this technique I want us to visualize this so we have here a user",
    "start": "348600",
    "end": "353800"
  },
  {
    "text": "that uses the cloud formation service on a specific region and then we have an attacker and in this case the the",
    "start": "353800",
    "end": "359720"
  },
  {
    "text": "attacker creates this semi-predictable bucket name on their account before the",
    "start": "359720",
    "end": "365000"
  },
  {
    "text": "user so whenever the user will try to use the cloud formation service in this",
    "start": "365000",
    "end": "370880"
  },
  {
    "text": "region For the First Time The Cloud for the previously vulnerable cloud formations service will try to interact",
    "start": "370880",
    "end": "378039"
  },
  {
    "text": "with the attacker claimed bucket but at first it will encoun encounter an error",
    "start": "378039",
    "end": "384400"
  },
  {
    "text": "so basically we have here a way to prevent other user from using aw this",
    "start": "384400",
    "end": "390000"
  },
  {
    "text": "the cloud formation service on a specific region which can be considered as a do",
    "start": "390000",
    "end": "395840"
  },
  {
    "text": "scenario and a do scenario is fine but it isn't enough for a blacket session so",
    "start": "395840",
    "end": "401400"
  },
  {
    "text": "let's escalate it what if an attacker open the bucket for a public access so the reason why",
    "start": "401400",
    "end": "409680"
  },
  {
    "text": "there we got an error from the cloud formation service before is because attacker still needs to Define some",
    "start": "409680",
    "end": "416000"
  },
  {
    "text": "settings on their S3 bucket first of all attack needs to allow Public Access",
    "start": "416000",
    "end": "421960"
  },
  {
    "text": "because it's blocked by default and then the attacker needs to define a",
    "start": "421960",
    "end": "428759"
  },
  {
    "text": "resource-based policy in order to allow cross account resource access here we",
    "start": "428759",
    "end": "433800"
  },
  {
    "text": "have a PC of a very permissive bucket policy that allows any principle on AWS",
    "start": "433800",
    "end": "439720"
  },
  {
    "text": "to perform any action on the malicious S3 bucket so whenever the attackers does",
    "start": "439720",
    "end": "446000"
  },
  {
    "text": "so now the cloud formation service of the the victim will succeed interact",
    "start": "446000",
    "end": "451520"
  },
  {
    "text": "with the attacker claim bucket so whenever the user uploads a template file now the template file will be",
    "start": "451520",
    "end": "458039"
  },
  {
    "text": "dropped to the attacker claim S3 claimed bucket so we have here information",
    "start": "458039",
    "end": "463240"
  },
  {
    "text": "disclosure scenario because um an attacker can enumerate different secret resource that exist in",
    "start": "463240",
    "end": "470280"
  },
  {
    "text": "these services and more but if if an attacker already had",
    "start": "470280",
    "end": "476720"
  },
  {
    "text": "have has access to this file what if an attacker modify this template",
    "start": "476720",
    "end": "481960"
  },
  {
    "text": "file so if attacker does so it's called resource injection on cloud formation",
    "start": "481960",
    "end": "487159"
  },
  {
    "text": "template it's a great technique that published by rhinol laab and also credited to met Fuller about this",
    "start": "487159",
    "end": "493240"
  },
  {
    "text": "technique and all the idea behind this is some time of check time of use a",
    "start": "493240",
    "end": "499520"
  },
  {
    "text": "default behavior that the cloud formation service has that allow an attacker Windows a Windows of",
    "start": "499520",
    "end": "505080"
  },
  {
    "text": "opportunity to modify template file before the cloud formation service try",
    "start": "505080",
    "end": "510919"
  },
  {
    "text": "to deploy them so it is possible for attacker to modify the template file and",
    "start": "510919",
    "end": "517000"
  },
  {
    "text": "for example injecting malicious resources and more let's see the full scenario we have",
    "start": "517000",
    "end": "523240"
  },
  {
    "text": "here a user and an attacker the attacker claimed the S3 bucket that the",
    "start": "523240",
    "end": "528360"
  },
  {
    "text": "previously vulnerable service will try to ER use on a specific region in this",
    "start": "528360",
    "end": "533920"
  },
  {
    "text": "case EU West 2 so when the user will try to create a stack for the first time for",
    "start": "533920",
    "end": "541200"
  },
  {
    "text": "the first time the cloud formation service uploads this template file to the attacker claim bucket then we will",
    "start": "541200",
    "end": "548200"
  },
  {
    "text": "have a Lambda that will back door any file that will be dropped to the attacker rest bucket the Lambda will",
    "start": "548200",
    "end": "554600"
  },
  {
    "text": "pull the back door templ the sorry the template file and perform a resource",
    "start": "554600",
    "end": "559720"
  },
  {
    "text": "injection in this case the Lambda of the attacker can inject an admin r that can",
    "start": "559720",
    "end": "565680"
  },
  {
    "text": "be assumed by the attacker then the Lambda will put this template",
    "start": "565680",
    "end": "573440"
  },
  {
    "text": "file the B of template file on the attacker claim bucket so whenever the",
    "start": "573440",
    "end": "578640"
  },
  {
    "text": "user will try to deploy the cloud formation uh template then the cloud formation",
    "start": "578640",
    "end": "585880"
  },
  {
    "text": "service will get the temp the backd door template file from the attack bucket and",
    "start": "585880",
    "end": "592040"
  },
  {
    "text": "actually create the injected resources so we are an admin role that can be",
    "start": "592040",
    "end": "598240"
  },
  {
    "text": "assumed by the attacker in external account which is really severe scenario",
    "start": "598240",
    "end": "605440"
  },
  {
    "text": "and there are some important point to mention about this so first of all in",
    "start": "605440",
    "end": "611160"
  },
  {
    "text": "order to inject admin roll to another account the initiator of the cloud formation service needs to have I uh",
    "start": "611160",
    "end": "618839"
  },
  {
    "text": "privilege but since that most of the user that uses the cloud formation service sometimes have ey privilege we",
    "start": "618839",
    "end": "624560"
  },
  {
    "text": "can assume this but even though if they do not have a i privilege it's still",
    "start": "624560",
    "end": "630399"
  },
  {
    "text": "possible to modify what exists on the template file for example alter ec2 instances and more and of course the",
    "start": "630399",
    "end": "638079"
  },
  {
    "text": "last thing is the attacker needs to wait for the victim to use the cloud formation service in this case in a new",
    "start": "638079",
    "end": "643880"
  },
  {
    "text": "region for the first time so let's see a PC whoever the the",
    "start": "643880",
    "end": "649000"
  },
  {
    "text": "victim that uses the cloud formation service via the console and uploads the template file behind the scenes the",
    "start": "649000",
    "end": "655800"
  },
  {
    "text": "template file already dropped to the attacker claim bucket the the user still needs to define the",
    "start": "655800",
    "end": "661680"
  },
  {
    "text": "stack name give privilege and more then we can see that the template file exist in the attacker rest bucket so the",
    "start": "661680",
    "end": "668160"
  },
  {
    "text": "attacker can modify it manually or with Lambda so whenever the user will deploy",
    "start": "668160",
    "end": "674120"
  },
  {
    "text": "or submit the stack we can see we have a new role an admin role which has really",
    "start": "674120",
    "end": "680480"
  },
  {
    "text": "high privilege and this role can be assumed by an external account as we can see in",
    "start": "680480",
    "end": "686399"
  },
  {
    "text": "the moment and then all St needs to do is to",
    "start": "686399",
    "end": "691839"
  },
  {
    "text": "find the related account ID and assume the role the admin role on the external account which is one of the most severe",
    "start": "691839",
    "end": "698920"
  },
  {
    "text": "thing that we can achieve in the cloud uh",
    "start": "698920",
    "end": "703279"
  },
  {
    "text": "[Applause]",
    "start": "704480",
    "end": "710320"
  },
  {
    "text": "right but wait a minute the technique you showed us is really cool but before",
    "start": "710320",
    "end": "716920"
  },
  {
    "text": "we continue we should not ignore them elephant in the room you told us that",
    "start": "716920",
    "end": "722040"
  },
  {
    "text": "the bucket name needs to be predictable but when we look at the bucket name it's",
    "start": "722040",
    "end": "727079"
  },
  {
    "text": "definitely not predictable we see this hush in the middle so we knew we had to",
    "start": "727079",
    "end": "732760"
  },
  {
    "text": "address this problem our first attempt was maybe trying to enumerate and",
    "start": "732760",
    "end": "738440"
  },
  {
    "text": "calculate every possible Lush but we quickly realized it's not doable to do",
    "start": "738440",
    "end": "743760"
  },
  {
    "text": "the amount of buckets that we should scan then we thought maybe we can",
    "start": "743760",
    "end": "751079"
  },
  {
    "text": "reverse the hash because akir showed you before that the bucket name and the",
    "start": "751079",
    "end": "756199"
  },
  {
    "text": "account and the sorry and the hash in the bucket name is actually unique per",
    "start": "756199",
    "end": "762839"
  },
  {
    "text": "account and that means that maybe it calculated based on the account ID or",
    "start": "762839",
    "end": "768399"
  },
  {
    "text": "any other unique identifier but after many unsuccessful",
    "start": "768399",
    "end": "773480"
  },
  {
    "text": "attempts we turn to open source we try to look for a code that shows us maybe",
    "start": "773480",
    "end": "780480"
  },
  {
    "text": "how the bucket is created and we actually stumbled upon this code and in this code we can see that the bucket",
    "start": "780480",
    "end": "787560"
  },
  {
    "text": "name is randomized and it gave us the impression that our technique is not",
    "start": "787560",
    "end": "794959"
  },
  {
    "text": "going to work because without the bucket name we have no way",
    "start": "794959",
    "end": "801040"
  },
  {
    "text": "to predict the bucket before the user and use this technique that we managed",
    "start": "801040",
    "end": "806720"
  },
  {
    "text": "to remote access access an account and create remote admin but as a great",
    "start": "806720",
    "end": "814000"
  },
  {
    "text": "security researchers we use one of the best security tools that we know the",
    "start": "814000",
    "end": "820160"
  },
  {
    "text": "Search tool we use the the Google and gab and Source Graph Search tool and we",
    "start": "820160",
    "end": "827519"
  },
  {
    "text": "managed to find over a thousand buckets some of them of a really big vendors so",
    "start": "827519",
    "end": "834800"
  },
  {
    "text": "that means that we can attack couple of vendors but it's not enough",
    "start": "834800",
    "end": "840519"
  },
  {
    "text": "right so we kept searching on open source and",
    "start": "840519",
    "end": "846160"
  },
  {
    "text": "we saw this code and in this code you can see that in some cases the bucket",
    "start": "846160",
    "end": "852320"
  },
  {
    "text": "name is create by just using the account ID in other services so we thought to",
    "start": "852320",
    "end": "858360"
  },
  {
    "text": "ourselves maybe instead of using this mysterious hash this mysterious randomiz",
    "start": "858360",
    "end": "864560"
  },
  {
    "text": "string let's just find more vulnerabilities by just using the",
    "start": "864560",
    "end": "869600"
  },
  {
    "text": "account ID let's find more buckets so that's exactly what we did we start",
    "start": "869600",
    "end": "874959"
  },
  {
    "text": "exploring every possible bucket we use the GitHub like before we use AWS",
    "start": "874959",
    "end": "880560"
  },
  {
    "text": "documentation and SDK we even started crawling and pressing nearly every possible button in",
    "start": "880560",
    "end": "887720"
  },
  {
    "text": "AWS and we created some automations one of them called Trail shark and it's",
    "start": "887720",
    "end": "893639"
  },
  {
    "text": "actually open source and you all going to see it h this actually this tool gives you the ability to debug AWS and",
    "start": "893639",
    "end": "900839"
  },
  {
    "text": "see the inner API calls within AWS and it looks like this on one screen you",
    "start": "900839",
    "end": "907000"
  },
  {
    "text": "need to initialize an API call like in this scenario I'm initiating the API",
    "start": "907000",
    "end": "915199"
  },
  {
    "text": "call that Yakir showed you before the create stack on the other screen I'm",
    "start": "915199",
    "end": "920240"
  },
  {
    "text": "using wi shark which is a convenient tool for security researchers and in W",
    "start": "920240",
    "end": "927160"
  },
  {
    "text": "shark we wrote a plug-in that let you debug AWS like you debug Network traffic",
    "start": "927160",
    "end": "932560"
  },
  {
    "text": "and all the API calls that made by the specific API call that we made in the GUI are actually transferred to the",
    "start": "932560",
    "end": "940199"
  },
  {
    "text": "actually captured by our W shark plugin and that is especially",
    "start": "940199",
    "end": "945680"
  },
  {
    "text": "interesting because the API call that we initialized in is an undocumented API",
    "start": "945680",
    "end": "951120"
  },
  {
    "text": "call and it's even said by AWS and when we see the equivalent to",
    "start": "951120",
    "end": "957240"
  },
  {
    "text": "that specific a API code we see that it's like five or six API calls inner",
    "start": "957240",
    "end": "963720"
  },
  {
    "text": "API calls and one of them is the creation of the bucket so we used all the technique that we showed you before",
    "start": "963720",
    "end": "970079"
  },
  {
    "text": "and we managed to find hundreds of buckets and at that point we knew we",
    "start": "970079",
    "end": "976079"
  },
  {
    "text": "have a lot of work to be done because we are not sure which bucket is responsible",
    "start": "976079",
    "end": "981440"
  },
  {
    "text": "to what service because some of them we found in open source search and we also",
    "start": "981440",
    "end": "987160"
  },
  {
    "text": "not sure if any of those bucket of those Services is",
    "start": "987160",
    "end": "994600"
  },
  {
    "text": "exploitable so you're wondering probably what is the answer and the answer for",
    "start": "994600",
    "end": "1000160"
  },
  {
    "text": "these questions was we managed to find five different vulnerabilities within",
    "start": "1000160",
    "end": "1006399"
  },
  {
    "text": "AWS some of them with just using the account",
    "start": "1006399",
    "end": "1011880"
  },
  {
    "text": "ID so before we start exploiting each vulnerability let's talk about the common steps for all the vulnerabilities",
    "start": "1011880",
    "end": "1019680"
  },
  {
    "text": "we need to create a bucket name like we need to create a bucket with a",
    "start": "1019680",
    "end": "1024720"
  },
  {
    "text": "predictable name like you show in part we also need to open the bucket",
    "start": "1024720",
    "end": "1030520"
  },
  {
    "text": "to the wall so the victim can communicate with us and we need",
    "start": "1030520",
    "end": "1036240"
  },
  {
    "text": "something that monitors the bucket like a Lambda and it automatically changes",
    "start": "1036240",
    "end": "1041600"
  },
  {
    "text": "the code using this setup we can start exploiting so let's explore our second",
    "start": "1041600",
    "end": "1047520"
  },
  {
    "text": "vulnerability for today in AWS glue this vulnerability using just the account",
    "start": "1047520",
    "end": "1053880"
  },
  {
    "text": "ID so what is AWS glue AWS glue is a service for data engineers and it is",
    "start": "1053880",
    "end": "1060840"
  },
  {
    "text": "used basically most of the time for data manipulations to trigger the vulnerability the user needs to create a",
    "start": "1060840",
    "end": "1067799"
  },
  {
    "text": "job when you do so an automatic bucket is configured there files script scripts",
    "start": "1067799",
    "end": "1075919"
  },
  {
    "text": "will be saved and this is is the exact place that we come to the picture as I showed",
    "start": "1075919",
    "end": "1081960"
  },
  {
    "text": "you before we catch the bucket before the user when the user created the job",
    "start": "1081960",
    "end": "1088640"
  },
  {
    "text": "the glue the scripts are actually stored into our buckets then we can modify the",
    "start": "1088640",
    "end": "1093960"
  },
  {
    "text": "script using our Lambda and when the user tries to run the job it gets the",
    "start": "1093960",
    "end": "1099640"
  },
  {
    "text": "modified script and voila whoever a remote code execution by just using the",
    "start": "1099640",
    "end": "1105520"
  },
  {
    "text": "account ID on the remote account [Applause]",
    "start": "1105520",
    "end": "1115799"
  },
  {
    "text": "so let's talk about the Privileges of that vulnerability so the user",
    "start": "1115799",
    "end": "1121000"
  },
  {
    "text": "configures the job in the role for you and most of the time user will configure",
    "start": "1121000",
    "end": "1126559"
  },
  {
    "text": "the default role that you got on the landing page when you are using AWS glue",
    "start": "1126559",
    "end": "1131720"
  },
  {
    "text": "and when we are using and that specific role actually has some pretty strong",
    "start": "1131720",
    "end": "1136799"
  },
  {
    "text": "policies attached to it and and it gives you a lot of enumeration",
    "start": "1136799",
    "end": "1143720"
  },
  {
    "text": "and creation of resources but it's not our topic for",
    "start": "1143720",
    "end": "1149360"
  },
  {
    "text": "this show another cool interesting anecdote about this vulnerability it",
    "start": "1149360",
    "end": "1155440"
  },
  {
    "text": "actually gives you an invisible vulnerab back door and let me explain when the",
    "start": "1155440",
    "end": "1160640"
  },
  {
    "text": "user tried to view the script that is written by him by a by the glue he",
    "start": "1160640",
    "end": "1167120"
  },
  {
    "text": "actually sees the original script and when he runs the script he actually gets the modified script this is due to",
    "start": "1167120",
    "end": "1174159"
  },
  {
    "text": "a visual bug in AWS now let's see the full PC that we recorded on February so as I said before",
    "start": "1174159",
    "end": "1182520"
  },
  {
    "text": "the user needs to create the job here a victim creates the job configures the",
    "start": "1182520",
    "end": "1187880"
  },
  {
    "text": "role when he saves this job the script is dropped to the attacker",
    "start": "1187880",
    "end": "1193919"
  },
  {
    "text": "bucket now let's see the attacker view so the attacker got the python script",
    "start": "1193919",
    "end": "1199000"
  },
  {
    "text": "Dro to his bucket the attacker can modify the script as he wants in this case we just",
    "start": "1199000",
    "end": "1205799"
  },
  {
    "text": "wrot P for the PC purposes and then when the victim look",
    "start": "1205799",
    "end": "1213240"
  },
  {
    "text": "at the code as I said before we got an invisible back door you can see here that he actually is is the original",
    "start": "1213240",
    "end": "1219840"
  },
  {
    "text": "script that he created using the glue H Visual and when we look at the output of",
    "start": "1219840",
    "end": "1227520"
  },
  {
    "text": "the script we actually see that the user has been",
    "start": "1227520",
    "end": "1233240"
  },
  {
    "text": "pwned now let's talk about our third vulnerability for today in EMR Studio",
    "start": "1237480",
    "end": "1243559"
  },
  {
    "text": "this one is a different a little bit because here we have a cool post exploitation technique in this case it",
    "start": "1243559",
    "end": "1250760"
  },
  {
    "text": "also using only the account ID EMR is a service for data scientist for data",
    "start": "1250760",
    "end": "1259240"
  },
  {
    "text": "consumption and to trigger the vulnerability the user needs to create a",
    "start": "1259240",
    "end": "1264640"
  },
  {
    "text": "studio using the EMR studio and when it creates a studio and automatically bucket is configured and this is exactly",
    "start": "1264640",
    "end": "1272240"
  },
  {
    "text": "where we come to the picture because we catch the bucket before the user and when the user creates the studio he",
    "start": "1272240",
    "end": "1279520"
  },
  {
    "text": "actually dropping the files into our bucket in this case it drops Jupiter notebook files and we have our Lambda",
    "start": "1279520",
    "end": "1287400"
  },
  {
    "text": "that automatically monitor the bucket and we automatically change the Jupiter notebook file we actually in Jupiter",
    "start": "1287400",
    "end": "1295200"
  },
  {
    "text": "notebook can inject cells and the cells it is automatically passed by your",
    "start": "1295200",
    "end": "1300559"
  },
  {
    "text": "browser and what we actually injected is Javascript in this case so when the user",
    "start": "1300559",
    "end": "1307360"
  },
  {
    "text": "tries to get his notebook we will actually get the modified notebook with",
    "start": "1307360",
    "end": "1313200"
  },
  {
    "text": "our stored xss and it will be automatically redirected to our fake in",
    "start": "1313200",
    "end": "1319159"
  },
  {
    "text": "page now I want you to get Mikel he will talk about more vulnerabilities and",
    "start": "1319159",
    "end": "1325120"
  },
  {
    "text": "we'll show you how our technique applies on open source",
    "start": "1325120",
    "end": "1330120"
  },
  {
    "text": "[Applause] projects all right so thank you a so",
    "start": "1330160",
    "end": "1339520"
  },
  {
    "text": "nowadays as you all know Ai and machine learning is the new trend and you could not miss a chance to talk about this on",
    "start": "1339520",
    "end": "1345799"
  },
  {
    "text": "our lecture so let's discuss the rest of NE Mobility and start with AWS sagemaker",
    "start": "1345799",
    "end": "1351120"
  },
  {
    "text": "so sagemaker is a tool designed to build train and deploy machine learning models",
    "start": "1351120",
    "end": "1356200"
  },
  {
    "text": "canvas is part of the sage maker ecosystem and it's a very cool drag and drop",
    "start": "1356200",
    "end": "1361520"
  },
  {
    "text": "interface and we discovered that when uh a user creates a new canvas instance on",
    "start": "1361520",
    "end": "1366640"
  },
  {
    "text": "a region for the first time then a bucket is created with the name sagemaker d region D account ID and the",
    "start": "1366640",
    "end": "1373600"
  },
  {
    "text": "bucket will store files that are utilized by the canvas service so let's take a look look at the",
    "start": "1373600",
    "end": "1378760"
  },
  {
    "text": "full attack scenario um the attacker needs to claim the bucket before the user and then when",
    "start": "1378760",
    "end": "1384000"
  },
  {
    "text": "a user opens canvas it will create a data set and upload the files the files",
    "start": "1384000",
    "end": "1389480"
  },
  {
    "text": "will be uploaded on the background to the attacker claimed bucket and then the attacker could get the data set and we",
    "start": "1389480",
    "end": "1396320"
  },
  {
    "text": "have data leakage and if that's not enough the attacker could also",
    "start": "1396320",
    "end": "1401799"
  },
  {
    "text": "manipulate the data set and then upload it back to the bucket and we have data",
    "start": "1401799",
    "end": "1407159"
  },
  {
    "text": "manipulation so the manipulation of the data may lead to inaccurate models and all of this happens without the user",
    "start": "1407159",
    "end": "1413799"
  },
  {
    "text": "even knowing that something happened on the data set that the models were trained",
    "start": "1413799",
    "end": "1419600"
  },
  {
    "text": "on next we found a vulnerability in codar so AWS codar is a tool that",
    "start": "1419600",
    "end": "1425320"
  },
  {
    "text": "provides a unified user interface enabling to easily manage uh development activities in one place and codar was",
    "start": "1425320",
    "end": "1431679"
  },
  {
    "text": "deprecated just last week so in this scenario the attacker has claimed the bucket before the user and then the user",
    "start": "1431679",
    "end": "1438080"
  },
  {
    "text": "creates a codar project on a region then codar on the background tries to create",
    "start": "1438080",
    "end": "1443440"
  },
  {
    "text": "a bucket and it fails because the bucket already exists and it returns uh an",
    "start": "1443440",
    "end": "1448799"
  },
  {
    "text": "error to the user so this is essentially a damic service since an attacker is",
    "start": "1448799",
    "end": "1454120"
  },
  {
    "text": "preventing the user from creating codar on a specific region and the next vulnerability that",
    "start": "1454120",
    "end": "1460120"
  },
  {
    "text": "we found was on service catalog we won't elaborate about it right now it's very similar to the cloud formation",
    "start": "1460120",
    "end": "1466000"
  },
  {
    "text": "vulnerability and we are going to publish a Blog very soon soon and um we'll explain this vulnerability on the",
    "start": "1466000",
    "end": "1473320"
  },
  {
    "text": "blog okay so on top of the vulnerabilities that we found in AWS we identify that this attack Vector applies",
    "start": "1473320",
    "end": "1480440"
  },
  {
    "text": "to many open source projects as well so many open source project create uh S3",
    "start": "1480440",
    "end": "1486240"
  },
  {
    "text": "buckets as part of their functionality and the consequences of of",
    "start": "1486240",
    "end": "1492840"
  },
  {
    "text": "the creation changes depending on the logic of the open source project but some projects are vulnerable and could",
    "start": "1492840",
    "end": "1498520"
  },
  {
    "text": "allow an attacker to gain full access to all of the files in the bucket so here you can see an example of a project that",
    "start": "1498520",
    "end": "1505679"
  },
  {
    "text": "tries to uh verify if the bucket exists and if the bucket does exist it will only print to the screen that the bucket",
    "start": "1505679",
    "end": "1512799"
  },
  {
    "text": "exists but it won't exit so an attacker could claim the bucket and the creation of the project will succeed on the next",
    "start": "1512799",
    "end": "1519200"
  },
  {
    "text": "example you can see a script that checks um if a bucket also exists with the AWS",
    "start": "1519200",
    "end": "1525760"
  },
  {
    "text": "S3 LS command and this check is also wrong since an attacker could claim the",
    "start": "1525760",
    "end": "1531640"
  },
  {
    "text": "bucket open it for Public Access set permissive policy and then it will allow the user to list the bucket so again the",
    "start": "1531640",
    "end": "1539159"
  },
  {
    "text": "check would be fine and the creation of the project will",
    "start": "1539159",
    "end": "1544399"
  },
  {
    "text": "continue um okay so also as part of an investigation we identified many services that creates uh buckets with",
    "start": "1544399",
    "end": "1552679"
  },
  {
    "text": "predictable names and for instance we we identified the albs Athena created this",
    "start": "1552679",
    "end": "1559000"
  },
  {
    "text": "kind of backet with the name AWS Athena quer results Dash account id- region and",
    "start": "1559000",
    "end": "1565679"
  },
  {
    "text": "uh when we encountered it Athena did not create this bucket anymore and nowadays the bucket is created by the user",
    "start": "1565679",
    "end": "1571039"
  },
  {
    "text": "specification so we could not find any vulnerability there so Athena is just an example but there are many other buckets",
    "start": "1571039",
    "end": "1577240"
  },
  {
    "text": "and many other services that are doing so all right so we discussed",
    "start": "1577240",
    "end": "1582320"
  },
  {
    "text": "vulnerabilities in AWS services and open source projects so now let's explore how we can Elevate what we've learned so far",
    "start": "1582320",
    "end": "1588679"
  },
  {
    "text": "to the next level so we wanted to increase the chances of an unsuspecting victim being",
    "start": "1588679",
    "end": "1594559"
  },
  {
    "text": "compromised it was important to us to show that this attack Vector is not just theoretical but it's also practical and",
    "start": "1594559",
    "end": "1601600"
  },
  {
    "text": "effective in real world scenarios and we are proud to present the technique we called bucket Monopoly so in previous",
    "start": "1601600",
    "end": "1608919"
  },
  {
    "text": "vulnerabilities we targeted specific regions of other accounts we could claim",
    "start": "1608919",
    "end": "1614120"
  },
  {
    "text": "we could check if a bucket already exists and if it does not exist uh we could claim it before the victim however",
    "start": "1614120",
    "end": "1622200"
  },
  {
    "text": "instead of focusing on just one region we could claim all of the buckets that",
    "start": "1622200",
    "end": "1627440"
  },
  {
    "text": "do not exist yet in all of the uh possible regions and it would look like this so",
    "start": "1627440",
    "end": "1635159"
  },
  {
    "text": "this strategy increases the likelihood of an unsuspecting victim interacting with an attacker on this Tre bucket but",
    "start": "1635159",
    "end": "1642080"
  },
  {
    "text": "since we have several vulnerable Services let's create all of the buckets in all of the possible services",
    "start": "1642080",
    "end": "1650159"
  },
  {
    "text": "so whenever the victim will use a service for the first time on a new region it will be immediately",
    "start": "1652159",
    "end": "1660080"
  },
  {
    "text": "compromised so let's explain step by step how to S successfully perform this kind of attack so first of all we must",
    "start": "1661159",
    "end": "1668480"
  },
  {
    "text": "identify predictable bucket names after finding these buckets we need to verify",
    "start": "1668480",
    "end": "1673640"
  },
  {
    "text": "that the associated service is indeed vulnerable to this vector secondly we",
    "start": "1673640",
    "end": "1679320"
  },
  {
    "text": "must recognize what is the unique identifier and the last step which is the easy one is to claim all of the",
    "start": "1679320",
    "end": "1685799"
  },
  {
    "text": "buckets across all possible regions so we showed you several ways",
    "start": "1685799",
    "end": "1691080"
  },
  {
    "text": "how to find these kinds of buckets we start reconnaissance by looking at uh the GitHub reg search we could also read",
    "start": "1691080",
    "end": "1697279"
  },
  {
    "text": "the AWS documentation and crawl AWS services using tools like Trail shark",
    "start": "1697279",
    "end": "1702320"
  },
  {
    "text": "that ofc showed you just a few minutes ago next the second step is to",
    "start": "1702320",
    "end": "1707919"
  },
  {
    "text": "understand what is the unique identifier it might be a random hash and it will require require further investigation",
    "start": "1707919",
    "end": "1715200"
  },
  {
    "text": "and it could also be an account ID or other kind of public metad data information if it's a hash we could",
    "start": "1715200",
    "end": "1722559"
  },
  {
    "text": "search on Source graph and GitHub to find leaked hashes and then Target them and if it's an account ID there are",
    "start": "1722559",
    "end": "1728840"
  },
  {
    "text": "multiple ways uh to find them so the first method is again to use",
    "start": "1728840",
    "end": "1733880"
  },
  {
    "text": "GitHub and search for specific um patterns we could also Leverage The",
    "start": "1733880",
    "end": "1739640"
  },
  {
    "text": "grayhead Warfare platform which search for publicly accessible buckets and extract the account ID out of the bucket",
    "start": "1739640",
    "end": "1746720"
  },
  {
    "text": "Jerome Brown did this and found found nearly 197,000 unique account IDs we",
    "start": "1746720",
    "end": "1752720"
  },
  {
    "text": "could also extract AWS account ID from access keys and lastly there are",
    "start": "1752720",
    "end": "1759440"
  },
  {
    "text": "valuable lists out there of known organizations and vendors that we could just search GitHub",
    "start": "1759440",
    "end": "1764880"
  },
  {
    "text": "and find these lists and the last step is to monopolize so attacker utilize",
    "start": "1764880",
    "end": "1771039"
  },
  {
    "text": "their understanding of bucket naming conventions and account ideas to strategically create S3 buckets with",
    "start": "1771039",
    "end": "1777480"
  },
  {
    "text": "predictable names across all regions that these buckets does not exist yet and by doing so they position themselves",
    "start": "1777480",
    "end": "1784240"
  },
  {
    "text": "to intercept uh future interaction of the victim with these kinds of",
    "start": "1784240",
    "end": "1791120"
  },
  {
    "text": "buckets all right so let's talk a little bit about the disclosure timeline we",
    "start": "1791200",
    "end": "1796840"
  },
  {
    "text": "found those vulnerabilities that the middle of February and immediately reported them to AWS and AWS immediately",
    "start": "1796840",
    "end": "1802799"
  },
  {
    "text": "started fixing them and we got a final confirmation that those vulnerabilities were mitigated so the approacher was",
    "start": "1802799",
    "end": "1810880"
  },
  {
    "text": "consistent AWS will either had some kind of VAR of string or a number and then",
    "start": "1810880",
    "end": "1816320"
  },
  {
    "text": "create a bucket or they will ask the user to uh give a new name to the bucket",
    "start": "1816320",
    "end": "1822600"
  },
  {
    "text": "either way they will ignore the already claimed bucket by an attacker",
    "start": "1822600",
    "end": "1828880"
  },
  {
    "text": "so to conclude what we've seen up until now we've identified six vulnerabilities in AWS services that might enable an",
    "start": "1829399",
    "end": "1836360"
  },
  {
    "text": "attacker to exploit organization we explained how these vulnerabilities occur and we presented a new attack",
    "start": "1836360",
    "end": "1842360"
  },
  {
    "text": "Vector named Shadow Resource as well as uh the technique we call bucket Monopoly",
    "start": "1842360",
    "end": "1848200"
  },
  {
    "text": "while the vulnerabilities in the services that we showed you were mitigated this attack Vector could still",
    "start": "1848200",
    "end": "1853600"
  },
  {
    "text": "be applicable uh to AWS services in the future and of course to many open source projects as we just showed you so the",
    "start": "1853600",
    "end": "1861240"
  },
  {
    "text": "first mitigation that we recommend is to prevent an entity that assumes a rooll",
    "start": "1861240",
    "end": "1866480"
  },
  {
    "text": "from accessing um a bucket you do not trust you can define a scoped resource",
    "start": "1866480",
    "end": "1871519"
  },
  {
    "text": "policy that contains the AWS resource account condition this approach prevent users and services from accessing and",
    "start": "1871519",
    "end": "1878480"
  },
  {
    "text": "writing data to buckets that are located on accounts that you do not trust the",
    "start": "1878480",
    "end": "1884080"
  },
  {
    "text": "second mitigation we offer is to run this Comm command to ensure that the bucket used by your services are indeed",
    "start": "1884080",
    "end": "1891799"
  },
  {
    "text": "under your account also the expected bucket owner check is valuable for open source project as well to safely verify",
    "start": "1891799",
    "end": "1899399"
  },
  {
    "text": "that the buckets that they're trying to interact with or the buckets they're trying to create are not owned by",
    "start": "1899399",
    "end": "1905679"
  },
  {
    "text": "someone else that you do not trust and lastly incorporate some kind",
    "start": "1905679",
    "end": "1911360"
  },
  {
    "text": "of a random string or a hash and then create a bucket making the bucket name",
    "start": "1911360",
    "end": "1916720"
  },
  {
    "text": "less predictable so after everything we we we",
    "start": "1916720",
    "end": "1924159"
  },
  {
    "text": "demonstrated so far do you still believe account ID is not a secret thank you we have short time for",
    "start": "1924159",
    "end": "1931440"
  },
  {
    "text": "questions",
    "start": "1931440",
    "end": "1934440"
  }
]