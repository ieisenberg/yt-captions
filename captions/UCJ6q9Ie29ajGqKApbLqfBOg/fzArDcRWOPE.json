[
  {
    "text": "okay my name is Andy Davis I'm research director of NCC group and I'm going to be talking today about some of the",
    "start": "80",
    "end": "5640"
  },
  {
    "text": "research I've done into um USB and",
    "start": "5640",
    "end": "11639"
  },
  {
    "text": "identifying systems via purely by the communications over the USB",
    "start": "11639",
    "end": "18520"
  },
  {
    "text": "stack so the talks split into two separate sections um first of all I'll",
    "start": "20359",
    "end": "26199"
  },
  {
    "text": "be talking about the kind of primary uh stuff which is enumerating information",
    "start": "26199",
    "end": "33360"
  },
  {
    "text": "from a system via USB uh and the second part is going to be concentrating on a",
    "start": "33360",
    "end": "39480"
  },
  {
    "text": "Windows bug that I discovered earlier on in the year uh which has now been fixed",
    "start": "39480",
    "end": "44920"
  },
  {
    "text": "but um as per usual Microsoft didn't actually reveal too many details about",
    "start": "44920",
    "end": "50280"
  },
  {
    "text": "uh where the floor was when the patch came out so we talking a bit through",
    "start": "50280",
    "end": "55760"
  },
  {
    "text": "that so first of all information gathering so why why do care um okay",
    "start": "55760",
    "end": "61920"
  },
  {
    "text": "yeah we we may well be able to identify information about a Target system via USB but um if we're physically connected",
    "start": "61920",
    "end": "69520"
  },
  {
    "text": "to it surely you know we know what that system is anyway well that's not necessarily the",
    "start": "69520",
    "end": "75840"
  },
  {
    "text": "case uh certainly with embedded systems more and more we're getting to test",
    "start": "75840",
    "end": "82240"
  },
  {
    "text": "devices that are part of um Automotive Systems uh scater type systems uh where",
    "start": "82240",
    "end": "90040"
  },
  {
    "text": "we may be just provided with a black box that's got a whole bunch of interfaces one of which may be USB",
    "start": "90040",
    "end": "96840"
  },
  {
    "text": "and we want to gather as much information about what the system is within that box to enable us to test it",
    "start": "96840",
    "end": "104240"
  },
  {
    "text": "much more effectively and much more um in a much",
    "start": "104240",
    "end": "109320"
  },
  {
    "text": "more streamlined way as you'll see when you're testing USB it's a much slower process than if you're testing something",
    "start": "109320",
    "end": "115719"
  },
  {
    "text": "like a a network stack so to be able to um really focus your testing in the",
    "start": "115719",
    "end": "121600"
  },
  {
    "text": "right area saves you an awful lot of time so a little bit about USB to start",
    "start": "121600",
    "end": "128160"
  },
  {
    "text": "with I'm not going to go through the whole details of how USB works the ins and outs that's been covered to death",
    "start": "128160",
    "end": "133599"
  },
  {
    "text": "and there's plenty of uh white papers and and books that will explain USB but",
    "start": "133599",
    "end": "138640"
  },
  {
    "text": "just a few things that you need to know that will help uh to understand what",
    "start": "138640",
    "end": "143760"
  },
  {
    "text": "this talk is all about so the majority of the information",
    "start": "143760",
    "end": "149360"
  },
  {
    "text": "that I'm Gathering via USB is during the enumeration phase so",
    "start": "149360",
    "end": "154800"
  },
  {
    "text": "enumeration is the process that occurs when you insert a USB device into a",
    "start": "154800",
    "end": "161519"
  },
  {
    "text": "host so initially the host knows absolutely nothing about the device so during enumeration the host queries the",
    "start": "161519",
    "end": "169480"
  },
  {
    "text": "device uh to gain as much information as possible about things like um how fast",
    "start": "169480",
    "end": "177879"
  },
  {
    "text": "that device communicates there's a whole bunch of of different uh speeds that can be used for for USB devices depending on",
    "start": "177879",
    "end": "185360"
  },
  {
    "text": "uh which version that they uh they use how much power is going to be consumed",
    "start": "185360",
    "end": "190680"
  },
  {
    "text": "by the device so you can either have bus powered devices um or self- powerered",
    "start": "190680",
    "end": "196440"
  },
  {
    "text": "devices so if it's going to be bus powered how much power is it going to consume from the",
    "start": "196440",
    "end": "201720"
  },
  {
    "text": "host um and there's a the the the device needs",
    "start": "201720",
    "end": "208480"
  },
  {
    "text": "to explain how many different configuration options it has uh if for",
    "start": "208480",
    "end": "213560"
  },
  {
    "text": "example you've got a multi-function device like a printer scanner that kind of thing there are different",
    "start": "213560",
    "end": "219920"
  },
  {
    "text": "configurations within USB that explain the capabilities of the device for each of those functions all of this happens",
    "start": "219920",
    "end": "226680"
  },
  {
    "text": "during this enumeration phase that happens over a period of seconds um",
    "start": "226680",
    "end": "231920"
  },
  {
    "text": "before you can start using the device so plenty of information exchange goes on",
    "start": "231920",
    "end": "237360"
  },
  {
    "text": "and this is implemented in lots of different ways depending on the USB stack within the host that you're",
    "start": "237360",
    "end": "242480"
  },
  {
    "text": "plugging the device into one thing that's really important to remember about what we're trying to achieve here",
    "start": "242480",
    "end": "249680"
  },
  {
    "text": "is the way that the fundamental way that USB works is a Master Slave environment so the host is always the master and the",
    "start": "249680",
    "end": "257519"
  },
  {
    "text": "device is the slave so if us as a virtual device are trying to G gain",
    "start": "257519",
    "end": "264680"
  },
  {
    "text": "information about the host we can't just query the host during this enumeration phase that's not the way it works it's",
    "start": "264680",
    "end": "270880"
  },
  {
    "text": "the host that will query the device and based on our responses as a device we",
    "start": "270880",
    "end": "276440"
  },
  {
    "text": "then look for follow-up um responses how they may change that kind of thing to",
    "start": "276440",
    "end": "281680"
  },
  {
    "text": "then infer information about the host so here's an example of a typical",
    "start": "281680",
    "end": "288320"
  },
  {
    "text": "enumeration phase um the arrows at the beginning here are just indicating the",
    "start": "288320",
    "end": "293960"
  },
  {
    "text": "direction of the uh the traffic so for example um when a host asks for a device",
    "start": "293960",
    "end": "300520"
  },
  {
    "text": "descriptor from a um from a device the device descriptor is being sent from",
    "start": "300520",
    "end": "307440"
  },
  {
    "text": "device to host host then sets an address uh the device descriptor is um",
    "start": "307440",
    "end": "315320"
  },
  {
    "text": "requested a second time I'll explain why in a minute and then there's a bunch of different other descriptors that are requested to gain information about the",
    "start": "315320",
    "end": "323680"
  },
  {
    "text": "device in order for the host to be able to load the appropriate drivers configure the uh uh the host driver",
    "start": "323680",
    "end": "331440"
  },
  {
    "text": "configuration and and get the um communication going with the USB",
    "start": "331440",
    "end": "337240"
  },
  {
    "text": "device so there are a number of uh peculiarities with this enumeration",
    "start": "337240",
    "end": "343039"
  },
  {
    "text": "phase you notice that the device descriptor was requested twice um what's happening there is",
    "start": "343039",
    "end": "348880"
  },
  {
    "text": "initially when you plug in a device I said that the the host doesn't doesn't know anything about it and uh it hasn't",
    "start": "348880",
    "end": "354240"
  },
  {
    "text": "been assigned an address so it by default it will use address zero on first insert",
    "start": "354240",
    "end": "360400"
  },
  {
    "text": "after the the host has decided on an address that it will use to communicate with a device it sets that device and",
    "start": "360400",
    "end": "367280"
  },
  {
    "text": "then starts the whole process again so it resets the device but with that new address so requests that device",
    "start": "367280",
    "end": "374000"
  },
  {
    "text": "descriptor the second time there are also uh multiple requests",
    "start": "374000",
    "end": "379039"
  },
  {
    "text": "for the same descriptor through the enumeration phase that you saw there and this happens because different layers",
    "start": "379039",
    "end": "385880"
  },
  {
    "text": "within the USB stack um May request the same information so uh we'll talk about",
    "start": "385880",
    "end": "393319"
  },
  {
    "text": "the the different elements of the typical USB stack shortly but um that",
    "start": "393319",
    "end": "399720"
  },
  {
    "text": "same information is required multiple times by multiple",
    "start": "399720",
    "end": "404759"
  },
  {
    "text": "components sometimes you see class specific descriptors um you don't",
    "start": "404759",
    "end": "411680"
  },
  {
    "text": "normally get class specific communication with a device until the point at which enumeration is complete",
    "start": "411680",
    "end": "419360"
  },
  {
    "text": "and and the host knows what kind of device it is and has loaded the appropriate class drivers however there",
    "start": "419360",
    "end": "425199"
  },
  {
    "text": "are some specific class types like hubs and heads so human interface devices",
    "start": "425199",
    "end": "432080"
  },
  {
    "text": "things like uh mice and keyboards that um have specific descriptors that are",
    "start": "432080",
    "end": "437560"
  },
  {
    "text": "exchanged during the enumeration phase so I mentioned about different",
    "start": "437560",
    "end": "443560"
  },
  {
    "text": "stack implementations we'll look at a few examples I'm not going to go into a great amount of detail here here I'm",
    "start": "443560",
    "end": "448639"
  },
  {
    "text": "just want to uh raise a few issues a few components Within These",
    "start": "448639",
    "end": "454680"
  },
  {
    "text": "that are important to what we're trying to achieve so the host controller is the kind of",
    "start": "454680",
    "end": "462639"
  },
  {
    "text": "lowest level element of of USB um it's normally implemented in",
    "start": "462639",
    "end": "468199"
  },
  {
    "text": "Hardware because it's it's enforcing some of the areas of",
    "start": "468199",
    "end": "474879"
  },
  {
    "text": "the spec that are very kind of Hardware dependent so voltage levels time timing",
    "start": "474879",
    "end": "480080"
  },
  {
    "text": "that kind of stuff um above them the the host controller you'll have the host",
    "start": "480080",
    "end": "485440"
  },
  {
    "text": "host Controller driver which provides this Hardware abstraction layer to the USB driver which is kind of like the the",
    "start": "485440",
    "end": "491800"
  },
  {
    "text": "core component within the the host that performs the enumeration that we just",
    "start": "491800",
    "end": "498159"
  },
  {
    "text": "talked about and understands how to pass off information to the appropriate class",
    "start": "498159",
    "end": "504159"
  },
  {
    "text": "drivers above then you have the specific class drivers so for example a mass storage driver printer driver that kind",
    "start": "504159",
    "end": "510599"
  },
  {
    "text": "of thing and then above there the application software so for example if you plug in a USB um camera quite often",
    "start": "510599",
    "end": "520719"
  },
  {
    "text": "uh application software will automatically be spawned to display uh images that are stored on the",
    "start": "520719",
    "end": "527160"
  },
  {
    "text": "camera but that application software is still communicating with components",
    "start": "527160",
    "end": "532240"
  },
  {
    "text": "within uh the USB stack so it's still considered part of it",
    "start": "532240",
    "end": "539320"
  },
  {
    "text": "so uh yeah a few High Lev diagrams of um USB driver Stacks just so that I can",
    "start": "540200",
    "end": "547200"
  },
  {
    "text": "talk about a few different components um you can see the there are a number of",
    "start": "547200",
    "end": "554440"
  },
  {
    "text": "different host controllers here things like ohci hci's host controller",
    "start": "554440",
    "end": "560000"
  },
  {
    "text": "interface so there's a lot of um different components to",
    "start": "560000",
    "end": "565079"
  },
  {
    "text": "provide um compatibility with older versions and slower um implementations",
    "start": "565079",
    "end": "571279"
  },
  {
    "text": "of USB so um ohci open host controller",
    "start": "571279",
    "end": "576560"
  },
  {
    "text": "interface um is one of the older ones then there's an enhanced one universal one getting faster and faster up to USB",
    "start": "576560",
    "end": "584240"
  },
  {
    "text": "3 which Super Speed USB um the extensible host controller",
    "start": "584240",
    "end": "590200"
  },
  {
    "text": "interface um you'll notice the split between user mode and kernel mode traditionally a lot",
    "start": "590200",
    "end": "597320"
  },
  {
    "text": "of the driver components for uh the USB host stack are",
    "start": "597320",
    "end": "605720"
  },
  {
    "text": "within kernel mode and um therefore any vulnerabilities that are triggered",
    "start": "605720",
    "end": "612079"
  },
  {
    "text": "within USB uh like the one that I'll be describing naturon and the talk are in",
    "start": "612079",
    "end": "617279"
  },
  {
    "text": "kernel mode and therefore provide the possibility for privilege escalation um more and more operating",
    "start": "617279",
    "end": "624959"
  },
  {
    "text": "system designers are trying to get components out of the kernel in user land so um within uh",
    "start": "624959",
    "end": "632959"
  },
  {
    "text": "Windows more recently uh in in Windows 8 more of the driver components have been",
    "start": "632959",
    "end": "638800"
  },
  {
    "text": "moved into user mode uh Linux USB stack again you can",
    "start": "638800",
    "end": "644720"
  },
  {
    "text": "see the different host controller interfaces there um and another example",
    "start": "644720",
    "end": "650000"
  },
  {
    "text": "just an embedded access USB stack so you can see the different layers and the different um like class components that",
    "start": "650000",
    "end": "656720"
  },
  {
    "text": "kind of thing so but as I said I'm not going to go into those too much detail so if we're going to uh try and",
    "start": "656720",
    "end": "664839"
  },
  {
    "text": "identify information about these systems via USB we need to be able to interact with it and how are we going to do that",
    "start": "664839",
    "end": "672399"
  },
  {
    "text": "and what kind of um areas of functionality do we need to be able to",
    "start": "672399",
    "end": "677560"
  },
  {
    "text": "achieve with USB well we clearly need to be able to capture USB traffic and uh",
    "start": "677560",
    "end": "684040"
  },
  {
    "text": "and be able to replay it Faithfully um we need to have complete full control control of any traffic that",
    "start": "684040",
    "end": "690399"
  },
  {
    "text": "we generate we don't want to be constrained by the the rules laid down within the USB spec because a lot of the",
    "start": "690399",
    "end": "698959"
  },
  {
    "text": "techniques that we might want to do may fall well out outside the the USB spec",
    "start": "698959",
    "end": "704040"
  },
  {
    "text": "so we need complete control of every bit that we send uh the ability to De decode uh",
    "start": "704040",
    "end": "712279"
  },
  {
    "text": "separate USB classes is very useful indeed so there are separate specification documents for all the",
    "start": "712279",
    "end": "719040"
  },
  {
    "text": "different USB classes and the class specific traffic associated with them so",
    "start": "719040",
    "end": "724680"
  },
  {
    "text": "with our system that we're using if we got something that we'll automatically decode that so that we don't need to go",
    "start": "724680",
    "end": "729880"
  },
  {
    "text": "through and read the spec every time we're try to work out what's going on that's really useful um support for all the different",
    "start": "729880",
    "end": "736600"
  },
  {
    "text": "speeds that are uh provided by USB USB 2",
    "start": "736600",
    "end": "741880"
  },
  {
    "text": "and Below which is probably what most people are U most familiar with I've got low high and full speed configur a so",
    "start": "741880",
    "end": "749720"
  },
  {
    "text": "the ability to replicate those is cool USB 3 would be a bonus um I haven't focused any research on USB 3 yet um but",
    "start": "749720",
    "end": "758120"
  },
  {
    "text": "it's something that I'm planning on looking at in the future so if you've got money to spend",
    "start": "758120",
    "end": "765639"
  },
  {
    "text": "um the goldplated solution is using commercial test equipment that will allow you to capture and replay stuff",
    "start": "765639",
    "end": "772320"
  },
  {
    "text": "um this uh mqp box is uh one of the boxes that that I've been using it's",
    "start": "772320",
    "end": "778880"
  },
  {
    "text": "very very very capable box um despite looking quite amateur in its",
    "start": "778880",
    "end": "785760"
  },
  {
    "text": "construction um I haven't managed to find $20,000 to get one of these boxes",
    "start": "785760",
    "end": "790839"
  },
  {
    "text": "but I don't need to the other box is perfectly fine much cheaper approach is using Travis goodspeed's excellent face",
    "start": "790839",
    "end": "798480"
  },
  {
    "text": "dancer board now um face dancer as you may well have seen in other",
    "start": "798480",
    "end": "804480"
  },
  {
    "text": "demonstrations allows you to uh create virtualized USB devices",
    "start": "804480",
    "end": "811000"
  },
  {
    "text": "using python um and this is it provides the framework of a",
    "start": "811000",
    "end": "818199"
  },
  {
    "text": "lot of the research that I've done and the best solution is actually to use both so to use a face answer to",
    "start": "818199",
    "end": "825199"
  },
  {
    "text": "actually generate the traffic but then because you're looking at in detail at the traffic that's coming back you need",
    "start": "825199",
    "end": "831120"
  },
  {
    "text": "to be able to um capture decode the classes um and interpret the data using",
    "start": "831120",
    "end": "836800"
  },
  {
    "text": "the the commercial USB uh another thing that's quite",
    "start": "836800",
    "end": "843160"
  },
  {
    "text": "interesting is that the that packet Master device records data down to the",
    "start": "843160",
    "end": "849600"
  },
  {
    "text": "microsc level and um you as well as seeing all the packet data you see",
    "start": "849600",
    "end": "855560"
  },
  {
    "text": "everything um timed down to the mark second which is interesting in a",
    "start": "855560",
    "end": "860639"
  },
  {
    "text": "specific case that I'll talk about later and as I said the class specific data is decoded for you so you don't",
    "start": "860639",
    "end": "867160"
  },
  {
    "text": "need to um constantly read the specs so enumerating",
    "start": "867160",
    "end": "873880"
  },
  {
    "text": "information the target list wasn't in any way carefully thought out it was the",
    "start": "873880",
    "end": "879000"
  },
  {
    "text": "machines that I had available to me in my lab um and uh I was just initially",
    "start": "879000",
    "end": "885639"
  },
  {
    "text": "interested to find out if there were any differences in the way that these Stacks",
    "start": "885639",
    "end": "891959"
  },
  {
    "text": "processed uh USB information during the enumeration phase and during class",
    "start": "891959",
    "end": "897240"
  },
  {
    "text": "specific communication so as I said the whole Master Slave uh",
    "start": "897240",
    "end": "905720"
  },
  {
    "text": "setup means that to try and identify information about the host you need to",
    "start": "905720",
    "end": "913519"
  },
  {
    "text": "be responding to questions it asks you and by the way you",
    "start": "913519",
    "end": "919279"
  },
  {
    "text": "respond prompt it to ask other questions because the first thing that",
    "start": "919279",
    "end": "925399"
  },
  {
    "text": "we want to be able to do um if we're comprehensive ly testing a system as",
    "start": "925399",
    "end": "930440"
  },
  {
    "text": "well as identifying what the OS is is to work out what drivers are supported what class drivers supported quite often in",
    "start": "930440",
    "end": "938839"
  },
  {
    "text": "operating systems a bunch of standard classes would be supported so in Linux",
    "start": "938839",
    "end": "943920"
  },
  {
    "text": "for example there's um often a mass storage class as a a head class to",
    "start": "943920",
    "end": "949839"
  },
  {
    "text": "control uh keyboard and um and mice that kind of thing um and",
    "start": "949839",
    "end": "957600"
  },
  {
    "text": "then there are more specific classes you have to install separately so if you've got an embedded system a box that you've",
    "start": "957600",
    "end": "964519"
  },
  {
    "text": "plugged into before you start trying to work out um if there are any particular",
    "start": "964519",
    "end": "971920"
  },
  {
    "text": "implementation flaws bugs within the way that the the USB drivers have been implemented you need to work out which",
    "start": "971920",
    "end": "978120"
  },
  {
    "text": "ones you can test so we need to enumerate the installed drivers and",
    "start": "978120",
    "end": "984279"
  },
  {
    "text": "ideally uh try and identify if there are any other devices that are already connected",
    "start": "984279",
    "end": "990040"
  },
  {
    "text": "so you may well have other devices connected internally via the USB",
    "start": "990040",
    "end": "995680"
  },
  {
    "text": "bus um so if we can identify those as well that'll be very",
    "start": "995680",
    "end": "1001160"
  },
  {
    "text": "useful so identifying Class Type information where is that stored well I",
    "start": "1001160",
    "end": "1008240"
  },
  {
    "text": "talked about these descriptors that are being communicated by the device to the host during the enumeration phase here's",
    "start": "1008240",
    "end": "1014000"
  },
  {
    "text": "a couple of examples a device descriptor which is um what was sent",
    "start": "1014000",
    "end": "1019360"
  },
  {
    "text": "at the very beginning of enumeration that's just a section of the device descriptor there and with some uh",
    "start": "1019360",
    "end": "1026000"
  },
  {
    "text": "classes of device they specify the device class within that um device",
    "start": "1026000",
    "end": "1031600"
  },
  {
    "text": "descriptor the more common approach is because you may have multiple interfaces",
    "start": "1031600",
    "end": "1038678"
  },
  {
    "text": "on a USB device that support different classes uh you will have the class",
    "start": "1038679",
    "end": "1045880"
  },
  {
    "text": "specific data um in the actual inter interface descriptor as you can see",
    "start": "1045880",
    "end": "1051200"
  },
  {
    "text": "there so you've got the interface class the kind of high level class is it's a mass storage device a printer an image",
    "start": "1051200",
    "end": "1057360"
  },
  {
    "text": "audio that kind of thing you've then got subass which provides more detailed information and then the kind of",
    "start": "1057360",
    "end": "1063600"
  },
  {
    "text": "low-level protocol what kind of protocol is being used so when you think about it it's",
    "start": "1063600",
    "end": "1069720"
  },
  {
    "text": "actually a A Massive Attack surface uh that is quite often completely untested",
    "start": "1069720",
    "end": "1076000"
  },
  {
    "text": "on these types of device although there are only about 12 12 or",
    "start": "1076000",
    "end": "1082520"
  },
  {
    "text": "13 um High Lev USB classes there are lots and lots of subclasses and lots of",
    "start": "1082520",
    "end": "1088320"
  },
  {
    "text": "protocols for for each of those so as I said provides a massive attack surface",
    "start": "1088320",
    "end": "1094480"
  },
  {
    "text": "for from a fuzzing perspective um when you're talking about specific",
    "start": "1094480",
    "end": "1102600"
  },
  {
    "text": "device drivers that have been installed rather than the generic ones that are available um those",
    "start": "1102600",
    "end": "1109720"
  },
  {
    "text": "are indexed via the vendor ID and product ID",
    "start": "1109720",
    "end": "1115080"
  },
  {
    "text": "which are these um two byte values which are provided in the device",
    "start": "1115080",
    "end": "1122039"
  },
  {
    "text": "descriptor so the vendor ID and the product ID basically map to the class",
    "start": "1122039",
    "end": "1127200"
  },
  {
    "text": "driver so once a numeration has finished uh it then loads that driver and you",
    "start": "1127200",
    "end": "1132240"
  },
  {
    "text": "know that class communication can can",
    "start": "1132240",
    "end": "1136240"
  },
  {
    "text": "occur um these can potentially be uh brute forced",
    "start": "1137280",
    "end": "1143480"
  },
  {
    "text": "if you want to to try and identify when the the class communication starts",
    "start": "1143480",
    "end": "1148760"
  },
  {
    "text": "so although if you're actually going through uh you every combination of PID",
    "start": "1148760",
    "end": "1155120"
  },
  {
    "text": "and vid that's going to take you a huge amount of time there is a published list of all the the valid um vids and uh and",
    "start": "1155120",
    "end": "1163600"
  },
  {
    "text": "pids um but I've got some ideas about shortcuts of enumerating those but that's still still work in progress at",
    "start": "1163600",
    "end": "1169559"
  },
  {
    "text": "the moment so how do we tell uh whether devices device drivers are actually",
    "start": "1169559",
    "end": "1176840"
  },
  {
    "text": "installed or not well just looking at the uh the the enumeration",
    "start": "1176840",
    "end": "1182200"
  },
  {
    "text": "process at the end of um supplying all the information the host will send a set",
    "start": "1182200",
    "end": "1187960"
  },
  {
    "text": "configuration command based on the configurations that have been supplied and if there's no communication past",
    "start": "1187960",
    "end": "1194600"
  },
  {
    "text": "that point then the drive there isn't a driver installed for that class of Dev device",
    "start": "1194600",
    "end": "1200919"
  },
  {
    "text": "so going back to what I was saying the the host is asking you what kind of device you are within your your emulated",
    "start": "1200919",
    "end": "1208240"
  },
  {
    "text": "device you could say you know I'm a I'm a mass storage device and it continues through says set configuration um but if",
    "start": "1208240",
    "end": "1215480"
  },
  {
    "text": "the host then doesn't start asking you questions based on that class you know that that class driver isn't",
    "start": "1215480",
    "end": "1222880"
  },
  {
    "text": "installed I talked about some other connected devices if you sniff the um the USB bus",
    "start": "1223600",
    "end": "1232280"
  },
  {
    "text": "anything that's connected to the same um host controller interface that you are",
    "start": "1232280",
    "end": "1238200"
  },
  {
    "text": "connected to externally so if that that USB port that you're connected to on the outside is on the same bus as any",
    "start": "1238200",
    "end": "1245640"
  },
  {
    "text": "internally connected USB devices you'll see other traffic associated with those",
    "start": "1245640",
    "end": "1251320"
  },
  {
    "text": "and an idea that I've got as as well as information that you could glean purely by sniffing the traffic because the face",
    "start": "1251320",
    "end": "1258400"
  },
  {
    "text": "down board allows you to emulate a USB host as well as a USB device potentially",
    "start": "1258400",
    "end": "1264520"
  },
  {
    "text": "you could start requesting descriptors from other devices and gain information",
    "start": "1264520",
    "end": "1269880"
  },
  {
    "text": "about those internally so what kind of fingerprinting techniques can we use",
    "start": "1269880",
    "end": "1277679"
  },
  {
    "text": "well looking at the the the patterns of the the way the descriptors are requested timing",
    "start": "1277679",
    "end": "1284440"
  },
  {
    "text": "information um what types of descriptor are requested if if we send invalid data",
    "start": "1284440",
    "end": "1289960"
  },
  {
    "text": "in the responses how does it um kind of respond with further questions and the",
    "start": "1289960",
    "end": "1295200"
  },
  {
    "text": "the order of the descriptor requests so here's an example of uh some",
    "start": "1295200",
    "end": "1301600"
  },
  {
    "text": "class specific communication so we've got this uh Linux based uh TV set toop",
    "start": "1301600",
    "end": "1308520"
  },
  {
    "text": "box and Windows 8 and you plug in your mass storage device it goes through",
    "start": "1308520",
    "end": "1313840"
  },
  {
    "text": "enumeration and these the way that this these requests and replies happen are",
    "start": "1313840",
    "end": "1321919"
  },
  {
    "text": "always the same every time you plug it in so you can see straight away that",
    "start": "1321919",
    "end": "1327039"
  },
  {
    "text": "different elements of the um the mass storage USB protocol are being used to",
    "start": "1327039",
    "end": "1335240"
  },
  {
    "text": "identify information uh about the mass storage device uh before it can be used",
    "start": "1335240",
    "end": "1341480"
  },
  {
    "text": "by the OS so it's kind of gone through enumeration it knows it's a mass storage device the mass storage class driver is",
    "start": "1341480",
    "end": "1347640"
  },
  {
    "text": "then kind of providing information so you can immediately see there's a big difference in the way that those two",
    "start": "1347640",
    "end": "1353840"
  },
  {
    "text": "host implementations deal with mass storage devices application",
    "start": "1353840",
    "end": "1359840"
  },
  {
    "text": "identification so I talked about these applications that pop up when you insert a um a USB device like a camera So",
    "start": "1359840",
    "end": "1367799"
  },
  {
    "text": "within Linux uh you've got this this pattern of requests and",
    "start": "1367799",
    "end": "1374720"
  },
  {
    "text": "and replies with the the image class traffic the photos met up in Windows 8",
    "start": "1374720",
    "end": "1379919"
  },
  {
    "text": "um Works in a in a different way initially it asks for the device info in",
    "start": "1379919",
    "end": "1385080"
  },
  {
    "text": "the same way but then it decides to set a a property value on uh one of the thumbnails and within the uh the",
    "start": "1385080",
    "end": "1392400"
  },
  {
    "text": "property that it wants to set it actually specifies exact details um",
    "start": "1392400",
    "end": "1398080"
  },
  {
    "text": "about the class driver that's installed within Windows",
    "start": "1398080",
    "end": "1402880"
  },
  {
    "text": "8 so having a look through uh the different platform forms that that I was",
    "start": "1404559",
    "end": "1410480"
  },
  {
    "text": "testing you can see that there are unique elements in the way that uh the",
    "start": "1410480",
    "end": "1416600"
  },
  {
    "text": "the different host Stacks responded and communicated during either enumeration",
    "start": "1416600",
    "end": "1423120"
  },
  {
    "text": "or within class specific information now I mentioned about timing",
    "start": "1423120",
    "end": "1428880"
  },
  {
    "text": "and the fact that you can time interactions on on the USB Stack Down to the",
    "start": "1428880",
    "end": "1434279"
  },
  {
    "text": "microsc um using that packet master um test",
    "start": "1434279",
    "end": "1440600"
  },
  {
    "text": "equipment so this is something again that I'm still working on a lot of this is still work in progress",
    "start": "1440600",
    "end": "1447760"
  },
  {
    "text": "um you can see I've done five different uh captures of the enumeration phase",
    "start": "1447760",
    "end": "1454799"
  },
  {
    "text": "associated with a specific device so there's a huge amount of",
    "start": "1454799",
    "end": "1461279"
  },
  {
    "text": "variance over the entire enumeration phase it typically takes around kind of five or six seconds to go from IAL",
    "start": "1461279",
    "end": "1468760"
  },
  {
    "text": "device insertion to the point where uh class specific Communications occurring",
    "start": "1468760",
    "end": "1475559"
  },
  {
    "text": "uh but if you tie it down to the the timing between specific elements within",
    "start": "1475559",
    "end": "1481320"
  },
  {
    "text": "that enumeration phase so here I've looked at the the difference between the timing of request for string descriptor",
    "start": "1481320",
    "end": "1488320"
  },
  {
    "text": "zero and string descriptor 2 you know you're talking of a difference of one or two",
    "start": "1488320",
    "end": "1496159"
  },
  {
    "text": "microseconds so if we can tell that down to that kind of",
    "start": "1496159",
    "end": "1501480"
  },
  {
    "text": "level of of granularity and we know what the OS is maybe from one of the other techniques maybe we can determine some",
    "start": "1501480",
    "end": "1509000"
  },
  {
    "text": "information about the processor speed or about the speed of uh some of the techn",
    "start": "1509000",
    "end": "1514880"
  },
  {
    "text": "some of the bus technology within within USB to provide more information about the target",
    "start": "1514880",
    "end": "1521720"
  },
  {
    "text": "system there are some um um operating systems specific",
    "start": "1523120",
    "end": "1529240"
  },
  {
    "text": "descriptors that are used and some that are not necessarily um specific to the",
    "start": "1529240",
    "end": "1535679"
  },
  {
    "text": "OS but are predominantly used by some os's and not by others so again this can be used from an",
    "start": "1535679",
    "end": "1543399"
  },
  {
    "text": "identification perspective if you see those occur during the the enumeration",
    "start": "1543399",
    "end": "1550360"
  },
  {
    "text": "phase now responses to invalid data this can be used",
    "start": "1550760",
    "end": "1558360"
  },
  {
    "text": "for uh as as part of our enumeration and fingerprinting but also can be used for",
    "start": "1558360",
    "end": "1565039"
  },
  {
    "text": "fuzzing to try and identify bugs within um the paing of this data",
    "start": "1565039",
    "end": "1571080"
  },
  {
    "text": "but what I've seen is different um host implementations respond to invalid data",
    "start": "1571080",
    "end": "1578559"
  },
  {
    "text": "in different ways so you looked at if you look at the type of data that's provided within those descriptors you've",
    "start": "1578559",
    "end": "1584159"
  },
  {
    "text": "got length Fields um you've got values that could have minimum and maximum",
    "start": "1584159",
    "end": "1589279"
  },
  {
    "text": "values you got um the ability to put logically incorrect information in there",
    "start": "1589279",
    "end": "1595159"
  },
  {
    "text": "missing data so some cases you get crashes and from a fuzzing p perspective",
    "start": "1595159",
    "end": "1601799"
  },
  {
    "text": "that's great because you're identifying bugs but other times you'll just get unique Behavior which is um obviously",
    "start": "1601799",
    "end": "1608360"
  },
  {
    "text": "what we're looking for when we're trying to fingerprint systems so as an example um on Windows",
    "start": "1608360",
    "end": "1615520"
  },
  {
    "text": "any version of Windows well I say any version any version after XP XP does",
    "start": "1615520",
    "end": "1621840"
  },
  {
    "text": "this um but up to the the current version if you send a specifically",
    "start": "1621840",
    "end": "1627120"
  },
  {
    "text": "logically incorrect hid report descriptor so one of those um descriptors that sent in the initial",
    "start": "1627120",
    "end": "1633279"
  },
  {
    "text": "enumeration phase um but contains data about the configuration of uh the USB",
    "start": "1633279",
    "end": "1639880"
  },
  {
    "text": "device if you send it logically incorrect report descript so this",
    "start": "1639880",
    "end": "1645559"
  },
  {
    "text": "happens obviously not very useful if trying to fingerprint the system but from a identifying bugs perspective",
    "start": "1646120",
    "end": "1653399"
  },
  {
    "text": "pretty cool so um some USB Stacks request that",
    "start": "1653399",
    "end": "1660039"
  },
  {
    "text": "data in different order um you might get",
    "start": "1660039",
    "end": "1665080"
  },
  {
    "text": "uh additional descriptors that are requested multiple times by different layers of the stack so all in all",
    "start": "1665080",
    "end": "1672760"
  },
  {
    "text": "there's there's plenty of information that you can gain that will help you identify a",
    "start": "1672760",
    "end": "1679279"
  },
  {
    "text": "what the operating system is running on the uh on the device and B what devices",
    "start": "1679279",
    "end": "1684919"
  },
  {
    "text": "device drivers are installed that you could then query and potentially fuzz so I've written a to called M uh",
    "start": "1684919",
    "end": "1691919"
  },
  {
    "text": "umap which is very Alpha and I will be releasing this once I've tied it up but",
    "start": "1691919",
    "end": "1697960"
  },
  {
    "text": "it's not really in a fit state to to go public yet but um in a couple of months time this will go live on our GitHub",
    "start": "1697960",
    "end": "1706360"
  },
  {
    "text": "repository so let's go go for a live demo so just to explain um I'm",
    "start": "1706360",
    "end": "1716000"
  },
  {
    "text": "connected to a face dancer board here via the host system connected to a",
    "start": "1716000",
    "end": "1723480"
  },
  {
    "text": "laptop here running Linux",
    "start": "1723480",
    "end": "1729320"
  },
  {
    "text": "so so first first of all if I do uh minus capital L and I'll list all the",
    "start": "1736480",
    "end": "1743000"
  },
  {
    "text": "different device classes so first of all I want to find out idea about what kind",
    "start": "1743000",
    "end": "1749360"
  },
  {
    "text": "of device classes are supported by this device so if I say let's check to see if",
    "start": "1749360",
    "end": "1757720"
  },
  {
    "text": "it supports the audio class so",
    "start": "1757720",
    "end": "1764720"
  },
  {
    "text": "it's not super quick like I said it takes about kind of five to six seconds",
    "start": "1770000",
    "end": "1775320"
  },
  {
    "text": "per um enumeration emulation so you're emulating the process of physically",
    "start": "1775320",
    "end": "1781279"
  },
  {
    "text": "inserting and removing a USB device here and so you can see the uh that's the",
    "start": "1781279",
    "end": "1786679"
  },
  {
    "text": "audio class that's the subass and that's the",
    "start": "1786679",
    "end": "1792320"
  },
  {
    "text": "protocol and you can see that none of those are supported on this this particular USB stack whereas if I go for",
    "start": "1793760",
    "end": "1802720"
  },
  {
    "text": "three image",
    "start": "1802720",
    "end": "1806320"
  },
  {
    "text": "class that particular uh class of USB driver is installed on the target system",
    "start": "1809600",
    "end": "1817360"
  },
  {
    "text": "so if for example we were going to start fuzzing this there would be no point in trying to fuzz the audio class because",
    "start": "1817360",
    "end": "1823960"
  },
  {
    "text": "the drivers aren't installed um so we we could focus on the image",
    "start": "1823960",
    "end": "1829840"
  },
  {
    "text": "class um another bit that you can do with uh umap is if for example you've",
    "start": "1829840",
    "end": "1837000"
  },
  {
    "text": "seen um viid and P ID the vendor ID and product ID numbers in the captured",
    "start": "1837000",
    "end": "1843399"
  },
  {
    "text": "traffic and you want to decode those I mentioned that there's a a publicly available list of all the the registered",
    "start": "1843399",
    "end": "1849519"
  },
  {
    "text": "vids and pids so the tool downloads that and maintains a local copy of that and you can do a lookup so for example",
    "start": "1849519",
    "end": "1858398"
  },
  {
    "text": "so that's vid and PID and so vendors drag and Rise Inc and",
    "start": "1859679",
    "end": "1867399"
  },
  {
    "text": "the the product IDs for a game pad um it provides the capability to do",
    "start": "1867399",
    "end": "1876440"
  },
  {
    "text": "um using a number of those different techniques that I talked about for operating system",
    "start": "1876440",
    "end": "1881840"
  },
  {
    "text": "identification um it will go through and try and work out what the connected",
    "start": "1881840",
    "end": "1887360"
  },
  {
    "text": "system is at the moment it's primarily using uh",
    "start": "1887360",
    "end": "1892679"
  },
  {
    "text": "the order of um both class specific and enumeration specific information it's",
    "start": "1892679",
    "end": "1900000"
  },
  {
    "text": "told us that it's Linux um if you want to specifically",
    "start": "1900000",
    "end": "1906600"
  },
  {
    "text": "emulate a device so let's say I want to just pretend to be an image class device",
    "start": "1906600",
    "end": "1912320"
  },
  {
    "text": "I can say just be an image class so what is I",
    "start": "1912320",
    "end": "1917480"
  },
  {
    "text": "I need to provide the viid the PID and um another element called uh revision",
    "start": "1917480",
    "end": "1924639"
  },
  {
    "text": "which isn't particularly important but I can just make these up and it will still",
    "start": "1924639",
    "end": "1931039"
  },
  {
    "text": "work and you'll see the communication so that's all the the initial enumeration",
    "start": "1932240",
    "end": "1939200"
  },
  {
    "text": "phase and then the class specific data between my host and the target system so",
    "start": "1939200",
    "end": "1945279"
  },
  {
    "text": "to the Target system it's seeing that I've plugged in a camera a USB",
    "start": "1945279",
    "end": "1951600"
  },
  {
    "text": "camera and I've mentioned fuzzing a couple of times uh I've done quite a bit",
    "start": "1951799",
    "end": "1956919"
  },
  {
    "text": "of USB fuzzing in the past and this new capability that face answer has has",
    "start": "1956919",
    "end": "1962760"
  },
  {
    "text": "allowed me to have um provides the capability to do much more comprehensive",
    "start": "1962760",
    "end": "1967799"
  },
  {
    "text": "fuzzing now so you identify what classes are supported and then you can",
    "start": "1967799",
    "end": "1973600"
  },
  {
    "text": "fuzz based on rather than mutation based fuzzing that I've done done in the past",
    "start": "1973600",
    "end": "1978760"
  },
  {
    "text": "you can look at the um the spec and Implement all your first test cases based on the spec for the class of",
    "start": "1978760",
    "end": "1984960"
  },
  {
    "text": "device that you want to fuzz so",
    "start": "1984960",
    "end": "1990519"
  },
  {
    "text": "um so we've got a bunch of test cases that are kind of um class",
    "start": "1991120",
    "end": "1999799"
  },
  {
    "text": "independent and then there's a whole bunch of image class Ones based on that Puma 15740 spec so goes through and you",
    "start": "1999799",
    "end": "2008399"
  },
  {
    "text": "can fuzz all that l so if I do minus F",
    "start": "2008399",
    "end": "2018080"
  },
  {
    "text": "three it will go through and um for each",
    "start": "2018080",
    "end": "2023120"
  },
  {
    "text": "test case emulating the process of inserting and removing a device with",
    "start": "2023120",
    "end": "2029639"
  },
  {
    "text": "each of the components uh within the the spec modified based on the test cases",
    "start": "2029639",
    "end": "2034919"
  },
  {
    "text": "that I've got but that will go for quite a long time so I'll stop",
    "start": "2034919",
    "end": "2041880"
  },
  {
    "text": "that",
    "start": "2041880",
    "end": "2044880"
  },
  {
    "text": "okay so just a bit of an overview of what what you can currently do with EAP uh you can identify the the device",
    "start": "2050000",
    "end": "2057320"
  },
  {
    "text": "classes that are currently supported um a very rudimentary operating system",
    "start": "2057320",
    "end": "2064599"
  },
  {
    "text": "identification um you can emulate specific devices based on the vid vid",
    "start": "2064599",
    "end": "2070079"
  },
  {
    "text": "PID and rev um for for the different classes you can fuzz that data based on",
    "start": "2070079",
    "end": "2076960"
  },
  {
    "text": "a spec so for example if you got a USB based endpoint protection system um that's configured to only",
    "start": "2076960",
    "end": "2084040"
  },
  {
    "text": "allow certain classes of device to be inserted you can uh test the",
    "start": "2084040",
    "end": "2090440"
  },
  {
    "text": "configuration of that using emap you could also potentially circumvent it so for example if you know that uh only a",
    "start": "2090440",
    "end": "2097839"
  },
  {
    "text": "certain vendor of USB device is allowed by the company you can emulate one of those devices using uh umap and um so if",
    "start": "2097839",
    "end": "2106520"
  },
  {
    "text": "if the company had a whole bunch of those but they didn't provide that one of those to you on the test you can just be one of those",
    "start": "2106520",
    "end": "2112960"
  },
  {
    "text": "devices um so you can comprehensively test USB host",
    "start": "2112960",
    "end": "2118760"
  },
  {
    "text": "implementations okay moving on to part two then so as a result of fuzzing uh",
    "start": "2119960",
    "end": "2125640"
  },
  {
    "text": "earlier on in the year I CED a bug in Windows 8 in the uh R rendis",
    "start": "2125640",
    "end": "2134520"
  },
  {
    "text": "protocol and um it's a kernel pool overflow it was patched um quite a while",
    "start": "2134520",
    "end": "2140119"
  },
  {
    "text": "ago so um there aren't any there aren't there aren't any issues with me",
    "start": "2140119",
    "end": "2145839"
  },
  {
    "text": "discussing the the details now um",
    "start": "2145839",
    "end": "2150880"
  },
  {
    "text": "so the rnis protocol is for allowing USB devices to",
    "start": "2150880",
    "end": "2156880"
  },
  {
    "text": "talk um via the host that they're connected to out to the Internet so it was",
    "start": "2156880",
    "end": "2164160"
  },
  {
    "text": "actually on a a TomTom device I was using a satnav TomTom device which when you plug it into um a host it goes off",
    "start": "2164160",
    "end": "2172000"
  },
  {
    "text": "to try and find out if there's more map information available on the internet and it uses this rendis",
    "start": "2172000",
    "end": "2178119"
  },
  {
    "text": "protocol so through um mutation based",
    "start": "2178119",
    "end": "2183800"
  },
  {
    "text": "fuzzing I discovered that there's a field within the configuration descriptor which talks about the number",
    "start": "2183800",
    "end": "2189440"
  },
  {
    "text": "of interfaces and if that number is actually greater than the actual number of interfaces this kernel pool overflow",
    "start": "2189440",
    "end": "2197960"
  },
  {
    "text": "occurs so in the bug [Music] check you can straight away see that um",
    "start": "2197960",
    "end": "2204839"
  },
  {
    "text": "it's pool related because you've got this pool block header sizes corrupt",
    "start": "2204839",
    "end": "2210000"
  },
  {
    "text": "message which is nice and useful and um it tells us that it's within the",
    "start": "2210000",
    "end": "2215480"
  },
  {
    "text": "function select configuration in that particular driver so typical probably unreadable ID",
    "start": "2215480",
    "end": "2225200"
  },
  {
    "text": "Pro bit of reverse engineering um checking through um in combination with",
    "start": "2225200",
    "end": "2232079"
  },
  {
    "text": "wind dbg to try and work out exactly what's going on and and what's where and",
    "start": "2232079",
    "end": "2237599"
  },
  {
    "text": "managed to pin it down to a point here where um a a null bik gets overwritten",
    "start": "2237599",
    "end": "2244520"
  },
  {
    "text": "in an adjacent pool header so further analysis um using",
    "start": "2244520",
    "end": "2252280"
  },
  {
    "text": "windbg so if beum interface interfaces is three which is one more than it",
    "start": "2252280",
    "end": "2258560"
  },
  {
    "text": "should be so there's actually only two interfaces that are specified within the configuration but we're telling it's",
    "start": "2258560",
    "end": "2264319"
  },
  {
    "text": "three and the number of end points is two um that value there with in the that the",
    "start": "2264319",
    "end": "2272119"
  },
  {
    "text": "next pool header is changed from 10 hex to n it's been N",
    "start": "2272119",
    "end": "2278760"
  },
  {
    "text": "Out we're overwriting the previous size element within the the next NTI pool",
    "start": "2278760",
    "end": "2286760"
  },
  {
    "text": "header furthermore notice that um if you do one one more than it should",
    "start": "2286760",
    "end": "2293079"
  },
  {
    "text": "be with the the Bome interfaces and modify the number of end points value",
    "start": "2293079",
    "end": "2298839"
  },
  {
    "text": "you can actually decide where within that adjacent pull header you can overwrite with a null",
    "start": "2298839",
    "end": "2306880"
  },
  {
    "text": "so there's the uh the structure of a pole header and um in the first example",
    "start": "2308319",
    "end": "2314040"
  },
  {
    "text": "we were overwriting this previous size in the second example we were um",
    "start": "2314040",
    "end": "2322440"
  },
  {
    "text": "overwriting which one was it Paul type I think so basically by manipulating these",
    "start": "2322560",
    "end": "2329359"
  },
  {
    "text": "values within um an interface descriptor um you can create or you can",
    "start": "2329359",
    "end": "2337480"
  },
  {
    "text": "can you can um write nlls in reasonably arbitrary places in adjacent pool",
    "start": "2337480",
    "end": "2345520"
  },
  {
    "text": "headers um and here's a bit of pseudo code that that explains what I think is",
    "start": "2345520",
    "end": "2351440"
  },
  {
    "text": "going on but essentially it's it's not uh checking to see how many interfaces",
    "start": "2351440",
    "end": "2357240"
  },
  {
    "text": "there actually are it's trusting the value that's supplied within the protocol so if you say um yes there are",
    "start": "2357240",
    "end": "2364880"
  },
  {
    "text": "there are three interfaces and there's only two um the the information that's gathered from them and constructed and",
    "start": "2364880",
    "end": "2371560"
  },
  {
    "text": "then later used within the driver uh is bogus and you end up overwriting that",
    "start": "2371560",
    "end": "2378560"
  },
  {
    "text": "data um so this is Windows 8 um I'm I'm",
    "start": "2378560",
    "end": "2383760"
  },
  {
    "text": "a a hardware guy an embedded systems guy",
    "start": "2383760",
    "end": "2388960"
  },
  {
    "text": "no reasonable amount about usb but I'm certainly not a Windows internal exploitation expert but having spoken to",
    "start": "2388960",
    "end": "2396240"
  },
  {
    "text": "to quite a few of the guys within the company that are trying to exploit this on Windows 8 is very very very",
    "start": "2396240",
    "end": "2405079"
  },
  {
    "text": "difficult the the number of um exploit mitigation strategies that have been",
    "start": "2405079",
    "end": "2411839"
  },
  {
    "text": "implemented by Microsoft in in Windows 8 certainly around heat protection um",
    "start": "2411839",
    "end": "2417240"
  },
  {
    "text": "around the kernel pool would prevent me from doing anything particularly exciting as a",
    "start": "2417240",
    "end": "2423760"
  },
  {
    "text": "result of being able to overwrite with nolles back in Windows 7 there are a number of uh strategies that I could",
    "start": "2423760",
    "end": "2430920"
  },
  {
    "text": "follow that might make this exploitable but Microsoft certainly considered it potentially exploitable enough to to",
    "start": "2430920",
    "end": "2437280"
  },
  {
    "text": "patch it so challenges that are faced when",
    "start": "2437280",
    "end": "2445040"
  },
  {
    "text": "exploiting USB bugs well apart from the exploit mitigation strategies that are",
    "start": "2445040",
    "end": "2450839"
  },
  {
    "text": "employed by the the OS vendor of of the host you've got",
    "start": "2450839",
    "end": "2457800"
  },
  {
    "text": "a very restricted feedback Channel um so it's not like you can trigger a bug and",
    "start": "2457800",
    "end": "2463760"
  },
  {
    "text": "then get any information at all back via USB uh that will give you information",
    "start": "2463760",
    "end": "2469680"
  },
  {
    "text": "about you know addresses or uh useful information that might allow you to exploit any kind of memory corruption",
    "start": "2469680",
    "end": "2476079"
  },
  {
    "text": "type vulnerabilities the bugs often in kernel",
    "start": "2476079",
    "end": "2481960"
  },
  {
    "text": "code um which if you can exploit it is great because it provides the the possibility of",
    "start": "2481960",
    "end": "2487960"
  },
  {
    "text": "escalation um but also makes it quite difficult to to exploit from a memory",
    "start": "2487960",
    "end": "2495520"
  },
  {
    "text": "corruption exploitation perspective the descriptors themselves",
    "start": "2495520",
    "end": "2500640"
  },
  {
    "text": "if you find a bug that um can be triggered as a result of let's say you",
    "start": "2500640",
    "end": "2506240"
  },
  {
    "text": "know some kind of buffer overflow you're quite size constrained within your descriptors so unless it's",
    "start": "2506240",
    "end": "2513920"
  },
  {
    "text": "within the um class specific information information for which there's a bit more",
    "start": "2513920",
    "end": "2519160"
  },
  {
    "text": "flexibility uh that's something that makes your life uh quite",
    "start": "2519160",
    "end": "2524920"
  },
  {
    "text": "difficult as I mentioned yeah this the typical impact is um privilege",
    "start": "2524920",
    "end": "2530839"
  },
  {
    "text": "escalation and uh the exploit mitigation stuff I've also mentioned one interesting thing that um I've just",
    "start": "2530839",
    "end": "2536359"
  },
  {
    "text": "started looking at certainly with Windows is the use of USB over RDP so",
    "start": "2536359",
    "end": "2543480"
  },
  {
    "text": "there's um a bunch of specs that were developed by Microsoft to kind of extend USB remotely via an RDP",
    "start": "2543480",
    "end": "2552599"
  },
  {
    "text": "session and I I find that quite interesting because if if any of the the bugs that I can trigger via USB can be",
    "start": "2552599",
    "end": "2560280"
  },
  {
    "text": "communicated over that RDP session and then triggered remotely it would then",
    "start": "2560280",
    "end": "2565440"
  },
  {
    "text": "turn what is um just a privilege escalation bug into a remote kernel bug",
    "start": "2565440",
    "end": "2572800"
  },
  {
    "text": "so seriously upping the the anti",
    "start": "2572800",
    "end": "2578680"
  },
  {
    "text": "so some conclusions um there's lots of different ways in which these host",
    "start": "2579440",
    "end": "2584720"
  },
  {
    "text": "systems deal with USB traffic and therefore you can use the fact that there's different information for",
    "start": "2584720",
    "end": "2591920"
  },
  {
    "text": "fingerprinting of os's uh the class specific Communications even more revealing",
    "start": "2591920",
    "end": "2598359"
  },
  {
    "text": "sometimes than than just the enumeration stuff even vendors like Microsoft and",
    "start": "2598359",
    "end": "2605280"
  },
  {
    "text": "others that have got a a mature process still have USB bugs and I mentioned the",
    "start": "2605280",
    "end": "2610559"
  },
  {
    "text": "huge attack surface here I I really don't think um a lot of these USB host",
    "start": "2610559",
    "end": "2617079"
  },
  {
    "text": "implementations have been rigorously tested uh you can only go so far with static code analysis when you're",
    "start": "2617079",
    "end": "2623359"
  },
  {
    "text": "reviewing these systems and I think in the coming months using umap I'm going",
    "start": "2623359",
    "end": "2629280"
  },
  {
    "text": "to identify a a huge amount of um additional vulnerabilities in some of",
    "start": "2629280",
    "end": "2634400"
  },
  {
    "text": "these common implementations of USB so you can potentially exploit USB bugs",
    "start": "2634400",
    "end": "2641480"
  },
  {
    "text": "um to provide privilege escalation maybe even remote code execution if the the uh",
    "start": "2641480",
    "end": "2646599"
  },
  {
    "text": "RDP idea works but it's extremely difficult to achieve",
    "start": "2646599",
    "end": "2652760"
  },
  {
    "text": "reliably thank you very [Applause]",
    "start": "2653400",
    "end": "2659518"
  },
  {
    "text": "much does anyone have any questions yep so um detecting Windows 8",
    "start": "2660520",
    "end": "2669280"
  },
  {
    "text": "you are you detecting Windows 8 against other windows maches like Windows 7 well in in the um particular",
    "start": "2669280",
    "end": "2678520"
  },
  {
    "text": "application you know there's a slide that said application identification that talks about that Metro app so you",
    "start": "2678520",
    "end": "2685000"
  },
  {
    "text": "can tell the exact version of the class driver in that instance because the um",
    "start": "2685000",
    "end": "2692839"
  },
  {
    "text": "within Windows 8 when you plug in a USB camera it tries to modify one of the",
    "start": "2692839",
    "end": "2698040"
  },
  {
    "text": "thumbnail images and it writes the like a um a stamp of the the exact version of",
    "start": "2698040",
    "end": "2704440"
  },
  {
    "text": "the Windows 8 driver down to the build number and that's specifically Windows 8 um I think",
    "start": "2704440",
    "end": "2712760"
  },
  {
    "text": "that there's much more scope for um tying down uh very kind of granular",
    "start": "2712760",
    "end": "2720440"
  },
  {
    "text": "information about these OS versions with the class specific data rather than the enumeration phase so um",
    "start": "2720440",
    "end": "2727760"
  },
  {
    "text": "especially when they're talking to Applications kind of higher up the",
    "start": "2727760",
    "end": "2733240"
  },
  {
    "text": "stack uh I don't think I've yeah I have",
    "start": "2736520",
    "end": "2741839"
  },
  {
    "text": "I haven't noticed any specific differences between 64 and 32-bit versions of the os's but then I haven't",
    "start": "2741839",
    "end": "2748040"
  },
  {
    "text": "specifically been looking for that so that's something that I",
    "start": "2748040",
    "end": "2752359"
  },
  {
    "text": "might any other questions right here how much was a face dancer so face dancer up",
    "start": "2753240",
    "end": "2760599"
  },
  {
    "text": "up until relatively recently you had to build yourself you can buy the board um",
    "start": "2760599",
    "end": "2765760"
  },
  {
    "text": "if you go to the uh the face Daner website which is in the slides you can buy the board for about $5 I think and",
    "start": "2765760",
    "end": "2772440"
  },
  {
    "text": "then you have to buy all the different components which comes to about I think $30 but there's a company called zippit",
    "start": "2772440",
    "end": "2778240"
  },
  {
    "text": "now that are actually constructing them and selling them uh pre-built and also the the firmware pre-",
    "start": "2778240",
    "end": "2784440"
  },
  {
    "text": "flashed uh which I can't remember the cost it's something around $100",
    "start": "2784440",
    "end": "2789960"
  },
  {
    "text": "something like that which makes life a lot easier if you're not very good at um",
    "start": "2789960",
    "end": "2795240"
  },
  {
    "text": "surface main soldering because it's quite quite complex to to build if you're not not used to that kind of",
    "start": "2795240",
    "end": "2803800"
  },
  {
    "text": "construction any others okay thanks so much",
    "start": "2804480",
    "end": "2814880"
  }
]