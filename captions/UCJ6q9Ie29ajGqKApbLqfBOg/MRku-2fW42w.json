[
  {
    "text": "hello everyone so thank you for attending to this talk i'm roman thomas i'm security engineer",
    "start": "2800",
    "end": "8240"
  },
  {
    "text": "at quartz lab where i'm in the team that performs security assessment but",
    "start": "8240",
    "end": "13280"
  },
  {
    "text": "also develop tools to automate the reverse engineering process and among this tool we develop triton",
    "start": "13280",
    "end": "20240"
  },
  {
    "text": "which is a symbolic execution framework we also developed leaf which enabled to",
    "start": "20240",
    "end": "25760"
  },
  {
    "text": "modify executable formats short as elf or pe and we develop qbdi",
    "start": "25760",
    "end": "31840"
  },
  {
    "text": "which is a dynamic instrumentation framework that will be discussed in this presentation so this talk",
    "start": "31840",
    "end": "38879"
  },
  {
    "text": "is about android obfuscation and how we can analyze obfuscation using dynamic",
    "start": "38879",
    "end": "45520"
  },
  {
    "text": "instrumentation framework so obfuscation is a way to protect application asset against reverse",
    "start": "45520",
    "end": "52480"
  },
  {
    "text": "engineering by making analyzing more difficult or at least",
    "start": "52480",
    "end": "57600"
  },
  {
    "text": "very time consuming and obfuscation can protect different kind of asset so",
    "start": "57600",
    "end": "63920"
  },
  {
    "text": "it can be like a function that don't that we don't want to be reversed it can",
    "start": "63920",
    "end": "70560"
  },
  {
    "text": "be a file that we don't want to to extract from the application",
    "start": "70560",
    "end": "76000"
  },
  {
    "text": "or it could be a secret such as a token or a password so to protect and to make",
    "start": "76000",
    "end": "83119"
  },
  {
    "text": "obfuscation there are different solutions for their commercial one with arksan clockwear or apona",
    "start": "83119",
    "end": "91680"
  },
  {
    "text": "some app developers also use in-house obfuscator which is the case",
    "start": "91680",
    "end": "97280"
  },
  {
    "text": "for snapchat or talk and there are some open source projects such as old vm or egyi",
    "start": "97280",
    "end": "107280"
  },
  {
    "text": "so this topic is not new and there are a lot of presentation and paper about this topic",
    "start": "107600",
    "end": "115119"
  },
  {
    "text": "especially in 2014 two former colleagues of quarkxlab presented some work on",
    "start": "115119",
    "end": "122000"
  },
  {
    "text": "attacking white box with using auxiliary attacks so it will",
    "start": "122000",
    "end": "127360"
  },
  {
    "text": "basically using dynamic truss and they show how they manage to to break the white box using dynamic",
    "start": "127360",
    "end": "135120"
  },
  {
    "text": "truss generated by intel pin in 2016 uh charles hermann and philip",
    "start": "135120",
    "end": "143200"
  },
  {
    "text": "tohen presented some work also on attacking white box using dynamic truss and they show how we can",
    "start": "143200",
    "end": "150959"
  },
  {
    "text": "use side channel attack with this truss on the white box to recover",
    "start": "150959",
    "end": "156879"
  },
  {
    "text": "the cryptographic key and last year there were presentations",
    "start": "156879",
    "end": "162560"
  },
  {
    "text": "on reverse and learning c plus plus code and how we can use dynamic information to",
    "start": "162560",
    "end": "168000"
  },
  {
    "text": "recover internal structure of internal field of cyprus per structure from this research",
    "start": "168000",
    "end": "176879"
  },
  {
    "text": "we can see that basically a dbi is suitable to address obfuscation because",
    "start": "176879",
    "end": "182800"
  },
  {
    "text": "it provides dynamic information and at some how dynamic information",
    "start": "182800",
    "end": "188480"
  },
  {
    "text": "can't lie and we'll see how so a dbi is a way to analyze a program",
    "start": "188480",
    "end": "197840"
  },
  {
    "text": "at different level so you can analyze the program at instruction level so for instance you",
    "start": "197840",
    "end": "203200"
  },
  {
    "text": "can access to all the instructions that are executed for for one execution path",
    "start": "203200",
    "end": "209920"
  },
  {
    "text": "you can also access to register value you may also access to the basic blocks",
    "start": "209920",
    "end": "215760"
  },
  {
    "text": "that are executed so you have different level of analysis over the program and while a debugger",
    "start": "215760",
    "end": "224480"
  },
  {
    "text": "will insert breakpoint before each instruction to to have access to the underlying insertion",
    "start": "224480",
    "end": "231200"
  },
  {
    "text": "a dbi will modify the assembly code and will execute the modify version of the",
    "start": "231200",
    "end": "236560"
  },
  {
    "text": "assembly code so in terms of performances you are more efficient with the dbi than",
    "start": "236560",
    "end": "242560"
  },
  {
    "text": "with the debugger and if you want to analyze for instance a lot a lot of",
    "start": "242560",
    "end": "248000"
  },
  {
    "text": "instruction you may pay a very huge overhead with a db debugger while with a dbi it can be like",
    "start": "248000",
    "end": "254560"
  },
  {
    "text": "very quick so there are different framework to that",
    "start": "254560",
    "end": "260239"
  },
  {
    "text": "the first one is intel pin which is quite well known now and it works very well on x86 and 886.64",
    "start": "260239",
    "end": "269759"
  },
  {
    "text": "you may also heard about valgrain which enabled to instrument code on",
    "start": "269759",
    "end": "277280"
  },
  {
    "text": "the 4 architecture but i would say that the api is not very convenient if you",
    "start": "277280",
    "end": "283199"
  },
  {
    "text": "want to select for instance a specific part of the program that you want to",
    "start": "283199",
    "end": "288320"
  },
  {
    "text": "instrument there are also dina mario and din ins which i don't know if they",
    "start": "288320",
    "end": "295280"
  },
  {
    "text": "really support liam and lm64 or at least the api is very uh is not the support is not very full and um",
    "start": "295280",
    "end": "303360"
  },
  {
    "text": "we have frida which uh also enabled to trust instruction for the floor architecture",
    "start": "303360",
    "end": "310560"
  },
  {
    "text": "and you can trust instruction with freda thanks to the stalker",
    "start": "310560",
    "end": "316800"
  },
  {
    "text": "and we develop also qbdi and we'll see how qbi address different functionality from the",
    "start": "317039",
    "end": "324000"
  },
  {
    "text": "previous framework that we mentioned so a bit of",
    "start": "324000",
    "end": "329280"
  },
  {
    "text": "history of kubernetes though the project started in 2015 by charles hubbard and cedric",
    "start": "329280",
    "end": "335840"
  },
  {
    "text": "tracy tessier in 2017 i presented the",
    "start": "335840",
    "end": "341120"
  },
  {
    "text": "to the project at ccc and in 2019 i added the support for liam",
    "start": "341120",
    "end": "348960"
  },
  {
    "text": "and liam 60 frauds and in the next few months",
    "start": "348960",
    "end": "354320"
  },
  {
    "text": "paul one of my colleagues presented some work on using qbi to perform fuzzing with",
    "start": "354320",
    "end": "361120"
  },
  {
    "text": "umphres in 2020 we started to integrate some tool with qbdi such as",
    "start": "361120",
    "end": "367840"
  },
  {
    "text": "frida or binary ninja so qpdi were created by charles hubbard",
    "start": "367840",
    "end": "375120"
  },
  {
    "text": "and cedric tessier which are two reverse engineers with a strong background in obfuscation especially charles hubbard",
    "start": "375120",
    "end": "383039"
  },
  {
    "text": "was one of the quarter of the paper about attacking whitebox this",
    "start": "383039",
    "end": "388160"
  },
  {
    "text": "is why there are some functionality in qbdi's that that aim to target this kind of",
    "start": "388160",
    "end": "395440"
  },
  {
    "text": "protection and we'll see this functionality the the tool is based on llvm",
    "start": "395440",
    "end": "403600"
  },
  {
    "text": "for llvm where is very very handy because you have a disassembler you have also an",
    "start": "403600",
    "end": "409039"
  },
  {
    "text": "assembler and you have an interface through llvmc inst",
    "start": "409039",
    "end": "414160"
  },
  {
    "text": "over the instruction regardless the architecture so it means that you",
    "start": "414160",
    "end": "419280"
  },
  {
    "text": "can access to the semantic of an instruction thanks to the abstract layer",
    "start": "419280",
    "end": "424639"
  },
  {
    "text": "so for instance if you want to perform some i would say modification on a call",
    "start": "424639",
    "end": "432639"
  },
  {
    "text": "you can just query the mpins interface and there you will have some information",
    "start": "432639",
    "end": "438880"
  },
  {
    "text": "independently from the architecture so the public version supports x86 and",
    "start": "438880",
    "end": "445960"
  },
  {
    "text": "x8664 in the private branch we have the ram and the rm64 support you may",
    "start": "445960",
    "end": "453759"
  },
  {
    "text": "also find some piece of code about lm support in the public branch so it",
    "start": "453759",
    "end": "459599"
  },
  {
    "text": "works quite well for non-thumb instruction but for firm and thumb too it can be like",
    "start": "459599",
    "end": "465280"
  },
  {
    "text": "tricky to work also the project is available on guide top so feel free to check it if",
    "start": "465280",
    "end": "471199"
  },
  {
    "text": "you are interested in so let's consider this piece of code for",
    "start": "471199",
    "end": "477039"
  },
  {
    "text": "here you have a basic block that you want to analyze so with qbdi we will set up",
    "start": "477039",
    "end": "483280"
  },
  {
    "text": "some callback before before all the instructions by using the",
    "start": "483280",
    "end": "488319"
  },
  {
    "text": "add callback method doing so will set up some callbacks that will process",
    "start": "488319",
    "end": "495599"
  },
  {
    "text": "the instruction and for instance you can analyze the register within this callback and from a logical point",
    "start": "495599",
    "end": "503599"
  },
  {
    "text": "of view it gives you this figure so here is the original code and here you have your",
    "start": "503599",
    "end": "509199"
  },
  {
    "text": "callback in which you can read the register modify the register skip the instruction",
    "start": "509199",
    "end": "514800"
  },
  {
    "text": "and so on but obfuscator are likely to add noisy instruction so",
    "start": "514800",
    "end": "521760"
  },
  {
    "text": "for instance if they are doing some computation that are not in the original code it",
    "start": "521760",
    "end": "528240"
  },
  {
    "text": "will add a lot of instructions that are not really relevant to understand the function logic also if you try to instrument",
    "start": "528240",
    "end": "535839"
  },
  {
    "text": "all the instruction you can pay a very huge overhead because um if the skater add",
    "start": "535839",
    "end": "542959"
  },
  {
    "text": "new instructions so it means that you will have to instrument and to switch between the original code and your callback a",
    "start": "542959",
    "end": "550399"
  },
  {
    "text": "lot of time so we need to be a bit smart if you want to scale",
    "start": "550399",
    "end": "556240"
  },
  {
    "text": "with a dbi so this is why there is some functionality in qdis that enable to",
    "start": "556240",
    "end": "562399"
  },
  {
    "text": "select a subset of instruction to instrument so for instance you can say i'm only",
    "start": "562399",
    "end": "569120"
  },
  {
    "text": "interested in instrumenting branching section or i'm only interested in instrumenting memory",
    "start": "569120",
    "end": "576160"
  },
  {
    "text": "access instruction or cisco and so on and doing so so with this api you can say okay so",
    "start": "576160",
    "end": "584080"
  },
  {
    "text": "let's set up a callback on the syscall let's set up a callback on the call instruction and let's set up a callback on memory",
    "start": "584080",
    "end": "591680"
  },
  {
    "text": "read or write access you can also select memory read if you are if you want or",
    "start": "591680",
    "end": "596880"
  },
  {
    "text": "memory write and then you will only have callback before the instruction you select",
    "start": "596880",
    "end": "604079"
  },
  {
    "text": "through the api and you don't pay for the overhead for the other instruction",
    "start": "604079",
    "end": "611600"
  },
  {
    "text": "in addition qbi have interesting functionality that enable to resolve the effective memory address of",
    "start": "612320",
    "end": "620079"
  },
  {
    "text": "instruction so for instance if you have a load r0 from r5 you have an",
    "start": "620079",
    "end": "627360"
  },
  {
    "text": "api to automatically know the value of but if you have for instance l1",
    "start": "627360",
    "end": "635200"
  },
  {
    "text": "and r6 it will automatically compute the value of l1 plus r6 and this is done",
    "start": "635200",
    "end": "642079"
  },
  {
    "text": "in the you know in the api so you have an abstraction over this computation especially if you",
    "start": "642079",
    "end": "648320"
  },
  {
    "text": "are for instance this kind of memory access it can be like quite tricky to compute",
    "start": "648320",
    "end": "654000"
  },
  {
    "text": "so here you just have to access to the access address attribute of the memory access structure",
    "start": "654000",
    "end": "660640"
  },
  {
    "text": "and you get the computation for free you can also access to the effective",
    "start": "660640",
    "end": "665680"
  },
  {
    "text": "value that is read or written through the value attribute so here for instance you get the value of",
    "start": "665680",
    "end": "672160"
  },
  {
    "text": "r2 and you get the value of lvo plus 1 8.",
    "start": "672160",
    "end": "678800"
  },
  {
    "text": "we have the same mechanism for branch instruction for blx bl for lim or bl and blr for lm64",
    "start": "679680",
    "end": "689200"
  },
  {
    "text": "and basically if for instance you want to know the value of r2 associated with this branch",
    "start": "689200",
    "end": "695760"
  },
  {
    "text": "you can just access to this value through the inschool access and back and then here",
    "start": "695760",
    "end": "703120"
  },
  {
    "text": "you have the effective value this is quite i would say simple for lm64 but for",
    "start": "703120",
    "end": "708560"
  },
  {
    "text": "llm you have some tricky computation because of the thumb mode and some alignment",
    "start": "708560",
    "end": "715680"
  },
  {
    "text": "computation so here for instance for lim instruction it will automatically",
    "start": "715680",
    "end": "721279"
  },
  {
    "text": "compute the value with the thumb bit also another issue and",
    "start": "721279",
    "end": "730240"
  },
  {
    "text": "another problem with dbi is how you manage to trust malloc or how you emblem malloc and",
    "start": "730240",
    "end": "737519"
  },
  {
    "text": "external function when you trust code so one of the issue",
    "start": "737519",
    "end": "743200"
  },
  {
    "text": "with malloc for instance is that malloc may share some global variable",
    "start": "743200",
    "end": "748560"
  },
  {
    "text": "with qpdi so qbi use malloc so if your code that you trust use malloc and that malloc is trust by",
    "start": "748560",
    "end": "755920"
  },
  {
    "text": "qbi you have like you can have an issue and intel pin for instance choose to",
    "start": "755920",
    "end": "763120"
  },
  {
    "text": "provide their own implementation of malloc printf and phone so that there is no conflict between qpdi",
    "start": "763120",
    "end": "770000"
  },
  {
    "text": "within the dbi sorry and the instrument it's got also in android application",
    "start": "770000",
    "end": "777120"
  },
  {
    "text": "you can have ac you can have a function that use gni which are basically",
    "start": "777120",
    "end": "782959"
  },
  {
    "text": "functions that makes a bridge between native code and java code and you don't",
    "start": "782959",
    "end": "788639"
  },
  {
    "text": "want necessarily to trust distinction because you know the behavior of malloc madok is allocating a buffer so",
    "start": "788639",
    "end": "795120"
  },
  {
    "text": "you you don't want necessarily to trust this in these functions",
    "start": "795120",
    "end": "801440"
  },
  {
    "text": "so there is a way in qbdi to process this function by stopping the instrumentation process",
    "start": "801440",
    "end": "807760"
  },
  {
    "text": "when there is an external call then we leave the function to execute their own code without",
    "start": "807760",
    "end": "815600"
  },
  {
    "text": "instrumentation so we are quite blunt about what the code is executed but",
    "start": "815600",
    "end": "821120"
  },
  {
    "text": "as we know that is malloc we know the behavior of malloc and qbi also changed the return value of",
    "start": "821120",
    "end": "828240"
  },
  {
    "text": "the return address of the function so that we can catch when the function returns",
    "start": "828240",
    "end": "836399"
  },
  {
    "text": "so this diagram summarizes a bit of the process when there is an external call so here",
    "start": "836639",
    "end": "842959"
  },
  {
    "text": "at some point in the instrumented code we have a branch to malloc so here qbi is able to detect",
    "start": "842959",
    "end": "850880"
  },
  {
    "text": "that the absolute address of the branch is not in the part of the instrumentated",
    "start": "850880",
    "end": "858160"
  },
  {
    "text": "range so we don't want to instrument the code at this address for qbi we just say i'm stopping the",
    "start": "858160",
    "end": "866480"
  },
  {
    "text": "instrumentation by triggering this event since we are in the process we can",
    "start": "866480",
    "end": "873920"
  },
  {
    "text": "detect we can resolve the base address associated with this absolute address so as we are we",
    "start": "873920",
    "end": "880720"
  },
  {
    "text": "have access to the memory layout of the process we can also resolve the library in which",
    "start": "880720",
    "end": "886720"
  },
  {
    "text": "this address is located so we have both the library and the base address",
    "start": "886720",
    "end": "891760"
  },
  {
    "text": "so we can have the symbol offset so here is the offset of the symbol",
    "start": "891760",
    "end": "897760"
  },
  {
    "text": "within the library and using an elf parser we can have access to the effective",
    "start": "897760",
    "end": "903199"
  },
  {
    "text": "symbols associated with the offset and then we can see that this absolute address is",
    "start": "903199",
    "end": "909519"
  },
  {
    "text": "associated with malloc then we have the code that is executed and when",
    "start": "909519",
    "end": "915040"
  },
  {
    "text": "the code when the function finish qbi changed the return address so that",
    "start": "915040",
    "end": "921440"
  },
  {
    "text": "is able to detect when the function finished and will trigger another event that is",
    "start": "921440",
    "end": "927680"
  },
  {
    "text": "exact transfer return and we'll resume the instrumentation until this point",
    "start": "927680",
    "end": "933519"
  },
  {
    "text": "and then we'll do the same mechanism so with the exact broker you are able to trust",
    "start": "933519",
    "end": "939920"
  },
  {
    "text": "external call and if the external code is done to a library",
    "start": "939920",
    "end": "945440"
  },
  {
    "text": "you may also resolve the symbol associated with the external code",
    "start": "945440",
    "end": "951120"
  },
  {
    "text": "regarding gni function we can use the same mechanism so gni function is located in a structure so it's",
    "start": "951120",
    "end": "958959"
  },
  {
    "text": "basically a structure of pointer and this structure is usually stored in the",
    "start": "958959",
    "end": "964959"
  },
  {
    "text": "dni of variable so if you have access to this",
    "start": "964959",
    "end": "970160"
  },
  {
    "text": "variable you may compare the external address against one of the function within the",
    "start": "970160",
    "end": "977120"
  },
  {
    "text": "structure so if here your absolute address match for instance find class you can",
    "start": "977120",
    "end": "984320"
  },
  {
    "text": "process the parameter uh in a dedicated callback",
    "start": "984320",
    "end": "989839"
  },
  {
    "text": "so here is an example that is typically used by gni function when calling generic",
    "start": "989839",
    "end": "996079"
  },
  {
    "text": "function so first it loads the address of the",
    "start": "996079",
    "end": "1001120"
  },
  {
    "text": "find class into r2 but you don't know that is find class then there is a blx r2 which is a call",
    "start": "1001120",
    "end": "1007600"
  },
  {
    "text": "to an external function so the exact broker detect that there is an external call",
    "start": "1007600",
    "end": "1013600"
  },
  {
    "text": "from this point you can convert this address into a symbol because find class you can",
    "start": "1013600",
    "end": "1019920"
  },
  {
    "text": "resolve fine class thanks to the un variable and you can process the parameter then it's the find class",
    "start": "1019920",
    "end": "1027678"
  },
  {
    "text": "function is executed the executor detects that the function finished and you can",
    "start": "1027679",
    "end": "1033760"
  },
  {
    "text": "do the same analysis when the function returns especially you can find some analyzer return value",
    "start": "1033760",
    "end": "1043038"
  },
  {
    "text": "and doing so you can have prey and post callback over the external function",
    "start": "1043679",
    "end": "1050000"
  },
  {
    "text": "which enable to analyze the parameter of the function and the return value",
    "start": "1050000",
    "end": "1055280"
  },
  {
    "text": "and this approach is quite interesting because if you are using hooking you must know beforehand",
    "start": "1055280",
    "end": "1062880"
  },
  {
    "text": "which function you want to hook but here we don't know beforehand which function will be hooked we just",
    "start": "1062880",
    "end": "1070640"
  },
  {
    "text": "see that there is an external call and then we resolve the external call into a symbol",
    "start": "1070640",
    "end": "1080080"
  },
  {
    "text": "and if we take st land for instance we have a branch to so here it's uh plt",
    "start": "1080080",
    "end": "1086640"
  },
  {
    "text": "got [Music] code we have a branch to this register",
    "start": "1086640",
    "end": "1092160"
  },
  {
    "text": "then there is a exact broker we convert this absolute address into a symbol then we process the",
    "start": "1092160",
    "end": "1098880"
  },
  {
    "text": "parameter then the function is executed in the leipzig then the exact broker",
    "start": "1098880",
    "end": "1104240"
  },
  {
    "text": "detects that the function finished and so on so to summarize qbi provides some",
    "start": "1104240",
    "end": "1111919"
  },
  {
    "text": "primitive to instrument code so among this primitive we you can generate instruction truss",
    "start": "1111919",
    "end": "1118559"
  },
  {
    "text": "which is at some time it's you need to have the information about all the instruction",
    "start": "1118559",
    "end": "1125840"
  },
  {
    "text": "but you can also have memory trust if you are only interested in memory access or you can have cisco truss or you can",
    "start": "1125840",
    "end": "1132960"
  },
  {
    "text": "have internal code truss or external library called truss so",
    "start": "1132960",
    "end": "1138480"
  },
  {
    "text": "this is what could be qdi provide and when you have to analyze obfuscated",
    "start": "1138480",
    "end": "1145360"
  },
  {
    "text": "code you can use one or you can combine this primitive and now we'll see how we can combine",
    "start": "1145360",
    "end": "1152160"
  },
  {
    "text": "this primitive to analyze obfuscated code",
    "start": "1152160",
    "end": "1158320"
  },
  {
    "text": "so one of the first configurations that we can use to to address obfuscated code",
    "start": "1158400",
    "end": "1165679"
  },
  {
    "text": "is to set up a cisco callback because uh at sometimes uh obfuscator try to inline",
    "start": "1165679",
    "end": "1172559"
  },
  {
    "text": "a cisco function so that you can do for instance hooking but since you are since uh you have qbi",
    "start": "1172559",
    "end": "1180240"
  },
  {
    "text": "you can have callback on cisco and it's okay you can also set up the xz broker so",
    "start": "1180240",
    "end": "1187360"
  },
  {
    "text": "that you get an external call trust which is like um s trace but for all the external",
    "start": "1187360",
    "end": "1193600"
  },
  {
    "text": "functions which is quite convenient and you can resolve the external call into a",
    "start": "1193600",
    "end": "1200799"
  },
  {
    "text": "symbol and process the parameter and the return value into dedicated",
    "start": "1200799",
    "end": "1206240"
  },
  {
    "text": "callback and you get a call class so here is an example so in this case of",
    "start": "1206240",
    "end": "1214559"
  },
  {
    "text": "protected code we have the airtool register that is set by loading a value from the",
    "start": "1214559",
    "end": "1221520"
  },
  {
    "text": "stack and then we have a blx r2 and if you try statically to reverse",
    "start": "1221520",
    "end": "1227840"
  },
  {
    "text": "and to resolve the effective value of r2 it can be very complicated because it's coming from the",
    "start": "1227840",
    "end": "1233200"
  },
  {
    "text": "stack and you need to track what the value at this offset contain",
    "start": "1233200",
    "end": "1238320"
  },
  {
    "text": "and so on but dynamically you just have to set up a callback",
    "start": "1238320",
    "end": "1243520"
  },
  {
    "text": "before blx r2 and thanks to the abstraction in qbi you can",
    "start": "1243520",
    "end": "1249520"
  },
  {
    "text": "just query for the call address and then you get the effective",
    "start": "1249520",
    "end": "1254559"
  },
  {
    "text": "address being called which is here in this case in the text segment",
    "start": "1254559",
    "end": "1261280"
  },
  {
    "text": "so this is the kind of the kind of way to to resolve indirect code",
    "start": "1261280",
    "end": "1270480"
  },
  {
    "text": "another interesting configuration is to set up pray and post call callback",
    "start": "1270480",
    "end": "1276880"
  },
  {
    "text": "and within the call to record only the byte memory access that are printable this is quite",
    "start": "1276880",
    "end": "1285520"
  },
  {
    "text": "interesting because we can in this configuration detect functions that are decoding or encoding",
    "start": "1285520",
    "end": "1292799"
  },
  {
    "text": "strings if we take this example so here you have a callback with",
    "start": "1292799",
    "end": "1299200"
  },
  {
    "text": "qbdr before this call and you have a callback after this call",
    "start": "1299200",
    "end": "1304240"
  },
  {
    "text": "within the call you will record only memory access that are done on a byte",
    "start": "1304240",
    "end": "1311039"
  },
  {
    "text": "so here there is a loading byte they are doing some computation and they",
    "start": "1311039",
    "end": "1316159"
  },
  {
    "text": "are writing byte this is a pattern that you can find",
    "start": "1316159",
    "end": "1321760"
  },
  {
    "text": "in decoding string function because usually obfuscator must be able to decode",
    "start": "1321760",
    "end": "1328960"
  },
  {
    "text": "any string and one way is to load a byte from a buffer to decode the byte and to",
    "start": "1328960",
    "end": "1334159"
  },
  {
    "text": "write the byte into another buffer that will contain the plain string",
    "start": "1334159",
    "end": "1339280"
  },
  {
    "text": "and if we have at the beginning this kind of input that is loaded",
    "start": "1339280",
    "end": "1346480"
  },
  {
    "text": "here we'll find some decoded string because here at some point the program",
    "start": "1346480",
    "end": "1352640"
  },
  {
    "text": "needs the plain string so at some point we'll find the clear string",
    "start": "1352640",
    "end": "1358480"
  },
  {
    "text": "into a buffer and within and using the memory access callback you can",
    "start": "1358480",
    "end": "1365679"
  },
  {
    "text": "find this this string here is another example where we have a",
    "start": "1365679",
    "end": "1372159"
  },
  {
    "text": "buffer here that is decoded using this algorithm so this algorithm is",
    "start": "1372159",
    "end": "1380720"
  },
  {
    "text": "we can reverse this algorithm we'll see just after but let's say that it's very very complicated and it's",
    "start": "1380720",
    "end": "1387120"
  },
  {
    "text": "too much complicated to be reversed here we just record the byte memory",
    "start": "1387120",
    "end": "1393360"
  },
  {
    "text": "access so we can see that is reading this byte which is which are this uh this byte but only the printable",
    "start": "1393360",
    "end": "1401120"
  },
  {
    "text": "character and we can see that within this function they are writing def so get qm so it's basically a",
    "start": "1401120",
    "end": "1408159"
  },
  {
    "text": "function a string that is involved in emulator detection then here we can see",
    "start": "1408159",
    "end": "1414400"
  },
  {
    "text": "also that we have a cisco that is detected with qbi and just by looking at the dynamic truss",
    "start": "1414400",
    "end": "1420000"
  },
  {
    "text": "we can avoid to reverse this algorithm we just have access to the memory buffer",
    "start": "1420000",
    "end": "1425760"
  },
  {
    "text": "that is read and written and here we can clearly see the string uh that are decoded but if you want to",
    "start": "1425760",
    "end": "1434159"
  },
  {
    "text": "reverse statically the the function uh the you can have a",
    "start": "1434159",
    "end": "1439440"
  },
  {
    "text": "python script that is doing basically the same thing so we can confirm that we effectively",
    "start": "1439440",
    "end": "1444480"
  },
  {
    "text": "manage to reverse the the the decoding function",
    "start": "1444480",
    "end": "1451120"
  },
  {
    "text": "another interesting configuration is to track memory access such as a malloc or calloc",
    "start": "1451600",
    "end": "1458880"
  },
  {
    "text": "or if you are in c plus plus operator on you we can also track memory map",
    "start": "1458880",
    "end": "1465840"
  },
  {
    "text": "functions such as m map and when a code tried to dynamically allocate code",
    "start": "1465840",
    "end": "1472320"
  },
  {
    "text": "you can have a callback over this function and automatically update the instrumentated range of qdi so that",
    "start": "1472320",
    "end": "1480240"
  },
  {
    "text": "the new code that is allocated will be instrumented and when there is a free function that",
    "start": "1480240",
    "end": "1486960"
  },
  {
    "text": "is called by the program since you manage to to intercept the malloc and all the",
    "start": "1486960",
    "end": "1494320"
  },
  {
    "text": "dynamic memory buffer allocation you you know the size of the buffer that is",
    "start": "1494320",
    "end": "1501200"
  },
  {
    "text": "they are located at the end so you can print the buffer being free and we'll see an",
    "start": "1501200",
    "end": "1507760"
  },
  {
    "text": "example right now so here is a piece of code on map so when",
    "start": "1507760",
    "end": "1513760"
  },
  {
    "text": "the opposite code tried to dynamically allocate code we can just",
    "start": "1513760",
    "end": "1521120"
  },
  {
    "text": "take the parameters and in the qbi api webinar we have a",
    "start": "1521120",
    "end": "1527360"
  },
  {
    "text": "function that enable to automatically update the instrumentated range",
    "start": "1527360",
    "end": "1532480"
  },
  {
    "text": "and here we just say now i want to instrument the code that is dynamically allocated",
    "start": "1532480",
    "end": "1539520"
  },
  {
    "text": "through a map and here we have the api with the exact broker so if you want to",
    "start": "1539520",
    "end": "1545919"
  },
  {
    "text": "take a look and here is what kind of output",
    "start": "1545919",
    "end": "1551679"
  },
  {
    "text": "you can have with this configuration so here we can see that the code is allo is is calling a map",
    "start": "1551679",
    "end": "1560480"
  },
  {
    "text": "and here we have the address of map since we instrument the code we can automatically update qdi to",
    "start": "1560480",
    "end": "1567600"
  },
  {
    "text": "instrument this new range of code and",
    "start": "1567600",
    "end": "1573120"
  },
  {
    "text": "and here we can see that we have a m protect that is setting the protect execute flag",
    "start": "1573120",
    "end": "1580159"
  },
  {
    "text": "on the new instrument in it range and at the end we have the an m map",
    "start": "1580159",
    "end": "1586480"
  },
  {
    "text": "function so here you get this kind of output with with this setup",
    "start": "1586480",
    "end": "1594960"
  },
  {
    "text": "now i'll go through a real use case and some example of using qbdi",
    "start": "1594960",
    "end": "1601760"
  },
  {
    "text": "on android application so for this example i took two",
    "start": "1601760",
    "end": "1607919"
  },
  {
    "text": "obfuscators which are blue and green the first example will be about gni onload",
    "start": "1607919",
    "end": "1615760"
  },
  {
    "text": "so in java you can declare native function so that the",
    "start": "1615760",
    "end": "1622480"
  },
  {
    "text": "implementation of this function is located in a native library so here",
    "start": "1622480",
    "end": "1628000"
  },
  {
    "text": "if you want to understand the behavior of the function a you need to first find the library in",
    "start": "1628000",
    "end": "1634400"
  },
  {
    "text": "which a is implemented and then you need to reverse assembly code",
    "start": "1634400",
    "end": "1640720"
  },
  {
    "text": "so this is the output the control flow graph of the library associated with the gni function",
    "start": "1640720",
    "end": "1649039"
  },
  {
    "text": "you can notice that you only have one export which is gni onload and we'll see that",
    "start": "1649039",
    "end": "1654880"
  },
  {
    "text": "jnio node is basically the function that is doing the resolution between",
    "start": "1654880",
    "end": "1660000"
  },
  {
    "text": "the declaration in java and the offset in the library and here is the cfg which",
    "start": "1660000",
    "end": "1666960"
  },
  {
    "text": "is obfuscated so it's using control flow flattening and if you want to understand how this",
    "start": "1666960",
    "end": "1673679"
  },
  {
    "text": "sequence of busy balance is executed it can be like very very painful",
    "start": "1673679",
    "end": "1680080"
  },
  {
    "text": "so in the gni unload function you have one specific gni function which",
    "start": "1680320",
    "end": "1686159"
  },
  {
    "text": "is register native and the purpose of traditional native it's to map it's to bind an offset",
    "start": "1686159",
    "end": "1694399"
  },
  {
    "text": "in the library with the declaration in java so by calling register native you have a",
    "start": "1694399",
    "end": "1701200"
  },
  {
    "text": "bridge between the native implementation and the java declaration",
    "start": "1701200",
    "end": "1706960"
  },
  {
    "text": "so when the java code will call the function a it will actually code the function at",
    "start": "1706960",
    "end": "1712880"
  },
  {
    "text": "this location in the library so at some point if you manage to catch",
    "start": "1712880",
    "end": "1719120"
  },
  {
    "text": "register native you can automatically resolve the offset of the function within the",
    "start": "1719120",
    "end": "1726320"
  },
  {
    "text": "library so using qbi and the exec broker it's",
    "start": "1726320",
    "end": "1731600"
  },
  {
    "text": "quite straightforward because at some point there will be an external call",
    "start": "1731600",
    "end": "1736720"
  },
  {
    "text": "and because there is an external call you can use the exact broker to resolve the function the address into",
    "start": "1736720",
    "end": "1743760"
  },
  {
    "text": "a thimble and as you may know that it's registered native you can inspect the second parameter",
    "start": "1743760",
    "end": "1750640"
  },
  {
    "text": "that contain the mapping between the function and the offset",
    "start": "1750640",
    "end": "1755679"
  },
  {
    "text": "and then you have access to the offset of the library so here you can just go through this",
    "start": "1755679",
    "end": "1762960"
  },
  {
    "text": "function and then continue the analysis since you you managed to resolve the",
    "start": "1762960",
    "end": "1768720"
  },
  {
    "text": "offset so here is the basic block involved in",
    "start": "1768720",
    "end": "1774320"
  },
  {
    "text": "register native we can see here that regis native it is done at this address",
    "start": "1774320",
    "end": "1782799"
  },
  {
    "text": "and we can see that this address is actually here so we can see that it's blx r5 we don't",
    "start": "1782799",
    "end": "1790480"
  },
  {
    "text": "really care about what is the value of f5 we just know that it's an external call and here",
    "start": "1790480",
    "end": "1797520"
  },
  {
    "text": "statically it could be like very complicated and tricky to resolve f5 for that yeah it's very",
    "start": "1797520",
    "end": "1803840"
  },
  {
    "text": "straightforward and here is another view of the same",
    "start": "1803840",
    "end": "1809919"
  },
  {
    "text": "dna load function if you are interesting in the full",
    "start": "1809919",
    "end": "1815679"
  },
  {
    "text": "demonstration of the dynamic charge generated by qbi you can check",
    "start": "1815679",
    "end": "1820960"
  },
  {
    "text": "this video so now let's move to another example",
    "start": "1820960",
    "end": "1827120"
  },
  {
    "text": "which involves video game protection so in a video game you have similar",
    "start": "1827120",
    "end": "1832559"
  },
  {
    "text": "threads that desktop game so basically you may want to modify the memory human",
    "start": "1832559",
    "end": "1838320"
  },
  {
    "text": "wants to dynamically modify the behavior of the game and one of the well known tune tool to",
    "start": "1838320",
    "end": "1846000"
  },
  {
    "text": "do that is frida because the api is very very simple it works very well and fun so",
    "start": "1846000",
    "end": "1853520"
  },
  {
    "text": "one of the protections that are provided by obfuscator is also a way to detect",
    "start": "1853520",
    "end": "1858720"
  },
  {
    "text": "frida or at least to try to to make freedom not run and one of the video games that we",
    "start": "1858720",
    "end": "1865120"
  },
  {
    "text": "analyze implement 3d detection which are based on detecting",
    "start": "1865120",
    "end": "1870799"
  },
  {
    "text": "tcp power and because we don't want to have the protection within a single",
    "start": "1870799",
    "end": "1877919"
  },
  {
    "text": "function that could be like hooked with frida and change they inline all the instruction",
    "start": "1877919",
    "end": "1886000"
  },
  {
    "text": "through cisco that are involved in the detection but thanks to qbi we can trust cisco",
    "start": "1886000",
    "end": "1893679"
  },
  {
    "text": "so we can identify where are the cisco and we'll see how we can remove the",
    "start": "1893679",
    "end": "1899519"
  },
  {
    "text": "protection so here is an example of truss that you get with qbdi",
    "start": "1899519",
    "end": "1905519"
  },
  {
    "text": "and you can see that you have a syscall at this address so it's trying to open a",
    "start": "1905519",
    "end": "1911360"
  },
  {
    "text": "socket then they are doing some bind functionality to try to open on a",
    "start": "1911360",
    "end": "1916480"
  },
  {
    "text": "specific bar which is the free dapper and then if he tried to make if he managed to open the socket it will",
    "start": "1916480",
    "end": "1924000"
  },
  {
    "text": "crush the game and basically one of the weakest of the protection is that",
    "start": "1924000",
    "end": "1929919"
  },
  {
    "text": "when frida were running the crowd the application the game were crashing",
    "start": "1929919",
    "end": "1935360"
  },
  {
    "text": "and because it was crashing we got a stuck trace and using the stack trace we can",
    "start": "1935360",
    "end": "1942080"
  },
  {
    "text": "identify which function crashed and then we can say okay with qbi we want to trust this",
    "start": "1942080",
    "end": "1948080"
  },
  {
    "text": "function to see what is the issue and then we get this kind of output",
    "start": "1948080",
    "end": "1954399"
  },
  {
    "text": "so here is the static code associated with the function so we can see that we have the cisco",
    "start": "1954399",
    "end": "1961360"
  },
  {
    "text": "at this address which is fine and now that we managed to identify",
    "start": "1961360",
    "end": "1969360"
  },
  {
    "text": "the syscall we can use leaf to patch the c school with the value minus 1",
    "start": "1969360",
    "end": "1975919"
  },
  {
    "text": "which stands for an error so since we managed we notified the cisco we can just remove",
    "start": "1975919",
    "end": "1983200"
  },
  {
    "text": "this cisco with a wrong value",
    "start": "1983200",
    "end": "1988480"
  },
  {
    "text": "and now we just have the cisco and we return -1",
    "start": "1988480",
    "end": "1995840"
  },
  {
    "text": "with the modification and at the end we were we managed to to",
    "start": "1996159",
    "end": "2002640"
  },
  {
    "text": "execute the game with frida without issue one of the limitation of this",
    "start": "2002640",
    "end": "2007840"
  },
  {
    "text": "approach is that you need to identify all the cisco and since you are only generate a truss",
    "start": "2007840",
    "end": "2015440"
  },
  {
    "text": "for one execution path you may not cover all the syscall so you need to",
    "start": "2015440",
    "end": "2022559"
  },
  {
    "text": "find a way to have a very good coverage over the execution path",
    "start": "2022559",
    "end": "2030559"
  },
  {
    "text": "another example is within a mdm solution so a mdm money",
    "start": "2030960",
    "end": "2038240"
  },
  {
    "text": "solution aims to provide a control over a set of devices that are",
    "start": "2038240",
    "end": "2044480"
  },
  {
    "text": "deployed within a company and basically there is a admin user that is able to control for",
    "start": "2044480",
    "end": "2051200"
  },
  {
    "text": "instance which package are allowed to be installed on the device which are not answered",
    "start": "2051200",
    "end": "2056800"
  },
  {
    "text": "and one of the feature that are in this solution is to be able to",
    "start": "2056800",
    "end": "2063040"
  },
  {
    "text": "detect if the device is rooted or jailbroken because if the device for instance is",
    "start": "2063040",
    "end": "2069440"
  },
  {
    "text": "rooted it's quite straightforward to bypass all the protection so this is one of the key point in this",
    "start": "2069440",
    "end": "2076398"
  },
  {
    "text": "part in this solution if you want to if they want to be working",
    "start": "2076399",
    "end": "2081760"
  },
  {
    "text": "quite well but if you want to detect that a device is",
    "start": "2081760",
    "end": "2087358"
  },
  {
    "text": "rooted you need to interact at some point with the system",
    "start": "2087359",
    "end": "2093118"
  },
  {
    "text": "and since you are not able to link statically the leipzig in android you must call",
    "start": "2093119",
    "end": "2100400"
  },
  {
    "text": "external function and even though the original parameter are protected or the string are",
    "start": "2100400",
    "end": "2106320"
  },
  {
    "text": "protected and done at some point the external curl must be done",
    "start": "2106320",
    "end": "2111599"
  },
  {
    "text": "with original strings the solutions that we analyzed were",
    "start": "2111599",
    "end": "2118720"
  },
  {
    "text": "written in c plus plus and the world were protected by the",
    "start": "2118720",
    "end": "2123920"
  },
  {
    "text": "second obscure and one tricky point is c plus plus",
    "start": "2123920",
    "end": "2129599"
  },
  {
    "text": "is that you can have implicit destructor so let's consider this piece of code",
    "start": "2129599",
    "end": "2135920"
  },
  {
    "text": "here you have a string object within the check root function here you get a reference over all the",
    "start": "2135920",
    "end": "2142640"
  },
  {
    "text": "character located in string you are decoding the string with aux operation and here at the end",
    "start": "2142640",
    "end": "2150960"
  },
  {
    "text": "you have a free memory you delete the buffer allocated with string",
    "start": "2150960",
    "end": "2157680"
  },
  {
    "text": "but you don't need to write this piece of code it's a compiler that automatically generate this call",
    "start": "2157680",
    "end": "2165680"
  },
  {
    "text": "and because you are deleting a buffer at the end your string variable contain",
    "start": "2165680",
    "end": "2173119"
  },
  {
    "text": "the plain string and with qbdi you are able to detect when the",
    "start": "2173119",
    "end": "2179680"
  },
  {
    "text": "string object is allocated and you are also able to detect when there is an external",
    "start": "2179680",
    "end": "2185760"
  },
  {
    "text": "call to operator delayed and you can just look at what the buffer contain since you are able to",
    "start": "2185760",
    "end": "2191920"
  },
  {
    "text": "know the size of the buffer and when it is delayed and then you get this kind of output",
    "start": "2191920",
    "end": "2199760"
  },
  {
    "text": "and here you have all the check that are done by the mdn within this function which would be like",
    "start": "2199760",
    "end": "2205200"
  },
  {
    "text": "very painful to analyze but just by looking at the delayed operator and looking at the",
    "start": "2205200",
    "end": "2212320"
  },
  {
    "text": "buffer you may know how the root detection is performed then you may want to notify where they",
    "start": "2212320",
    "end": "2220480"
  },
  {
    "text": "are already used and so on but at least you know what kind of check are",
    "start": "2220480",
    "end": "2226800"
  },
  {
    "text": "not i won't go through the detail of the android packer but we published a blog post about the",
    "start": "2226839",
    "end": "2234000"
  },
  {
    "text": "reverse engineering of a packer as well as the code to automatically",
    "start": "2234000",
    "end": "2240079"
  },
  {
    "text": "unpack the packer and if you are interested in how we did that with cubedi you can",
    "start": "2240079",
    "end": "2246800"
  },
  {
    "text": "also check this formant demo so three point to keep in",
    "start": "2246800",
    "end": "2252400"
  },
  {
    "text": "mind when you deal with uh obfuscation first the obfuscator can break",
    "start": "2252400",
    "end": "2259440"
  },
  {
    "text": "all the program semantic it means that if the original code performs this call",
    "start": "2259440",
    "end": "2266079"
  },
  {
    "text": "you may have a cisco at the end if there is some external call the parameter of the external call can't",
    "start": "2266079",
    "end": "2273040"
  },
  {
    "text": "be obfuscated for instance you can't obfuscate the string going through stln",
    "start": "2273040",
    "end": "2279280"
  },
  {
    "text": "you can't obfuscate the buffer allocated with malloc i mean you can't obfuscate",
    "start": "2279280",
    "end": "2285839"
  },
  {
    "text": "the size of the the buffer allocated with malloc and phone a dbi unable to recover",
    "start": "2285839",
    "end": "2294000"
  },
  {
    "text": "some of the original semantic of the program but it only provides primitive and you need",
    "start": "2294000",
    "end": "2301280"
  },
  {
    "text": "to use this primitive to set up what you want to analyze",
    "start": "2301280",
    "end": "2306800"
  },
  {
    "text": "so for instance if your code is dealing with memory access you may want to have a to set up",
    "start": "2306800",
    "end": "2312720"
  },
  {
    "text": "memory access callback or if you know that it's just about executing getting an external",
    "start": "2312720",
    "end": "2319280"
  },
  {
    "text": "code trust you may just want to use the exact broker so it depends on what you want to reverse also one of the",
    "start": "2319280",
    "end": "2327599"
  },
  {
    "text": "drawback of the commercial obfuscator is that usually the people that develop",
    "start": "2327599",
    "end": "2333200"
  },
  {
    "text": "obfuscator are very talented in their field and the developers are",
    "start": "2333200",
    "end": "2338480"
  },
  {
    "text": "very talented to develop but sometimes developer may not know",
    "start": "2338480",
    "end": "2343680"
  },
  {
    "text": "very well how to use specific obfuscation passes and it can be like quite tricky because",
    "start": "2343680",
    "end": "2351359"
  },
  {
    "text": "for instance if you don't on correct string it's quite straightforward to identify the what is the purpose of function",
    "start": "2351359",
    "end": "2359599"
  },
  {
    "text": "and so on also i would like to thanks charles hubbard and sedek tracy because",
    "start": "2359599",
    "end": "2366320"
  },
  {
    "text": "they are the original after of qdi and i was i would not be able to make",
    "start": "2366320",
    "end": "2372480"
  },
  {
    "text": "this code without their initial work also thanks to the llvm community",
    "start": "2372480",
    "end": "2379520"
  },
  {
    "text": "because the llvm framework is widely used uh in the security field",
    "start": "2379520",
    "end": "2385119"
  },
  {
    "text": "so we have already can remain from tradeoff bits uh qdi we have also arriba that will use with triton to recover uh",
    "start": "2385119",
    "end": "2393359"
  },
  {
    "text": "some kind of observation also we have redec from avast and ole vm and most of the obfuscator now thanks to my",
    "start": "2393359",
    "end": "2401520"
  },
  {
    "text": "colleague and corsa because i work in a very interesting environment in which i can",
    "start": "2401520",
    "end": "2408079"
  },
  {
    "text": "do this kind of work and to explore this kind of topic so thanks to them and thank you for your attention and now",
    "start": "2408079",
    "end": "2415119"
  },
  {
    "text": "if you are questioned i'm free thank you",
    "start": "2415119",
    "end": "2421760"
  }
]