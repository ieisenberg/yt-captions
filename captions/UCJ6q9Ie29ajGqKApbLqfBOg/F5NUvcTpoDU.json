[
  {
    "text": "all right good afternoon everyone um welcome to the year in Flash in mandolay BCD um couple quick announcements the",
    "start": "80",
    "end": "7480"
  },
  {
    "text": "business Hall is in Bayside AB black hat Arsenal is on the palm foyer on level",
    "start": "7480",
    "end": "13360"
  },
  {
    "text": "three uh the C Linux lab is in mandala Bay a and uh thanks for putting your",
    "start": "13360",
    "end": "18920"
  },
  {
    "text": "phones on vibrate during the uh the talk so let's welcome Natalie sanovich to talk about the year in Flash",
    "start": "18920",
    "end": "27290"
  },
  {
    "text": "[Applause]",
    "start": "27290",
    "end": "32840"
  },
  {
    "text": "hi everyone today I'm going to talk about finding and exploding bugs in Adobe",
    "start": "32840",
    "end": "37920"
  },
  {
    "text": "Flash I've been doing a bit of a Security review of flash for over a year",
    "start": "37920",
    "end": "43640"
  },
  {
    "text": "now so today I wanted to share with everyone how that year went what sort of",
    "start": "43640",
    "end": "49520"
  },
  {
    "text": "bugs I found what sort of exploits turned up in the wild and what sort of mitigations were implemented to prevent",
    "start": "49520",
    "end": "56640"
  },
  {
    "text": "them but before I begin who am I I'm sanovich and I'm a security researcher",
    "start": "56640",
    "end": "62160"
  },
  {
    "text": "on Google's Project zero before that I worked in Mobile Security on the Android security team and at blackberry and",
    "start": "62160",
    "end": "69759"
  },
  {
    "text": "something that a lot of people don't realize is up to about 5 years ago back in the Dark Ages it was really common",
    "start": "69759",
    "end": "76920"
  },
  {
    "text": "for virtual machines to be the root of Trust on a mobile device the most popular one was the Java virtual machine",
    "start": "76920",
    "end": "83640"
  },
  {
    "text": "but a lot of other virtual machines were used there was even a BlackBerry device the Blackberry playbook tablet where",
    "start": "83640",
    "end": "89880"
  },
  {
    "text": "where Adobe Flash was the main VM so that's how I got really interested in flash now I would say I am a flash",
    "start": "89880",
    "end": "97360"
  },
  {
    "text": "Enthusiast I love finding bugs in Flash I love making the sad puzzle piece appear and currently I report about",
    "start": "97360",
    "end": "104439"
  },
  {
    "text": "onethird of flash vulnerabilities so what's my goal I want",
    "start": "104439",
    "end": "109600"
  },
  {
    "text": "to find all of the flash vulnerabilities I want to find every last one and",
    "start": "109600",
    "end": "115479"
  },
  {
    "text": "sometime around 2022 I will have found the last Flash vulnerab",
    "start": "115479",
    "end": "120600"
  },
  {
    "text": "and that'll be it flash will be secure no obviously this isn't a very",
    "start": "120600",
    "end": "126920"
  },
  {
    "text": "realistic goal what I really want to do is make flash better and my biggest",
    "start": "126920",
    "end": "132560"
  },
  {
    "text": "priority in doing that is finding bugs in Flash what I want to do is find so",
    "start": "132560",
    "end": "138480"
  },
  {
    "text": "many bugs in Flash that it decreases the density of bugs so that it becomes harder for other people to find them I",
    "start": "138480",
    "end": "145440"
  },
  {
    "text": "spend most of my day doing code reviews looking for bugs but I also do some fuzzing with my colleague matteus hurck",
    "start": "145440",
    "end": "153160"
  },
  {
    "text": "when I started off looking at flash I was finding one bug per day and now I'm down to about one bug per week and one",
    "start": "153160",
    "end": "160879"
  },
  {
    "text": "last thing I want to mention is that development on flash has mostly stopped",
    "start": "160879",
    "end": "165920"
  },
  {
    "text": "so this means that if you find a bug in Flash and get it fixed it stays gone and this means that flash represents a",
    "start": "165920",
    "end": "172360"
  },
  {
    "text": "unique opportunity to make an impact by finding and getting bugs fixed because this will definitely reduce the total",
    "start": "172360",
    "end": "179239"
  },
  {
    "text": "number of bugs in Flash I also spend some of my time analyzing external bugs",
    "start": "179239",
    "end": "184599"
  },
  {
    "text": "and exploits in Flash I I'm not just interested in my own bugs I want to know about all the bugs in Flash that turn up",
    "start": "184599",
    "end": "191560"
  },
  {
    "text": "in the wild so that I can understand them better find similar bugs and also understand how they're exploited so we",
    "start": "191560",
    "end": "198200"
  },
  {
    "text": "can work on things like mitigations also I occasionally exploit flash bugs mostly to answer",
    "start": "198200",
    "end": "205480"
  },
  {
    "text": "questions sometimes I want to find out whether exploitation is possible um whether it's reliable and how certain",
    "start": "205480",
    "end": "212319"
  },
  {
    "text": "factors impact exploitability one of the reasons I do this is so that people on",
    "start": "212319",
    "end": "218439"
  },
  {
    "text": "my team can work on flash mitigations um certain technologies that will prevent",
    "start": "218439",
    "end": "224920"
  },
  {
    "text": "exploitation so what am I going to talk about today um there'll be three main things first I'm going to go through the",
    "start": "224920",
    "end": "231159"
  },
  {
    "text": "attack surface of flash just in case anyone isn't familiar with it and then I'll go through this year in Flash what",
    "start": "231159",
    "end": "237920"
  },
  {
    "text": "the new bugs and Bug classes are that turned up I'll talk about zero days one days and other exploits um the",
    "start": "237920",
    "end": "244480"
  },
  {
    "text": "mitigations that were implemented and finally I'll talk a bit about the future of flash what I think the landscape of",
    "start": "244480",
    "end": "251120"
  },
  {
    "text": "exploitation of bugs will look like in the future so to start off what is Flash",
    "start": "251120",
    "end": "257359"
  },
  {
    "text": "there's three main components the first one is as2 the action script 2vm this is",
    "start": "257359",
    "end": "263440"
  },
  {
    "text": "the original flash VM the very first thing in Flash that executed by code and script it's basically a big wild loop",
    "start": "263440",
    "end": "271680"
  },
  {
    "text": "with not a clear boundary between the VM and apis and it has a reduced API set",
    "start": "271680",
    "end": "277720"
  },
  {
    "text": "because it was eventually replaced with action script 3 so it only has the original features that were in Flash and",
    "start": "277720",
    "end": "283840"
  },
  {
    "text": "I would say it generally has more bugs with lower exploitability than action script 3 the thing about action script 2",
    "start": "283840",
    "end": "291759"
  },
  {
    "text": "is it was written before the modern security environment so a lot of choices were made in the design that would",
    "start": "291759",
    "end": "297320"
  },
  {
    "text": "probably be made not made today for example it doesn't do automatic type checking on variables instead the",
    "start": "297320",
    "end": "303880"
  },
  {
    "text": "developer writing a native API has to manually check um every type and certain features like this that are hard to fix",
    "start": "303880",
    "end": "310000"
  },
  {
    "text": "its scale um cause it to generally have more bugs but the flip side is that bugs in action script 2 tend to be a bit less",
    "start": "310000",
    "end": "317120"
  },
  {
    "text": "exploitable and that's because action script 2 just has less stuff in it",
    "start": "317120",
    "end": "322639"
  },
  {
    "text": "because it doesn't have as many features when you're trying to exploit a bug for example fitting something into the slot",
    "start": "322639",
    "end": "327840"
  },
  {
    "text": "of a use after free or fitting something into memory so you can overflow it you have a lot less options because there's",
    "start": "327840",
    "end": "334240"
  },
  {
    "text": "not so many objects in action script too and sometimes people Runing exploits get around this by loading as2 into an as3",
    "start": "334240",
    "end": "342720"
  },
  {
    "text": "frame and this will sometimes work but it doesn't always work because sometimes you have a bug which has a very narrow",
    "start": "342720",
    "end": "348759"
  },
  {
    "text": "window for example let's say you have a pointer that gets freed and then used and then it goes out of scope that",
    "start": "348759",
    "end": "355039"
  },
  {
    "text": "window is sometimes too narrow to be able to execute action script 2 action script 3 so then you're back to action",
    "start": "355039",
    "end": "360759"
  },
  {
    "text": "script to exploitation and that doesn't always work as3 is the action is the answered",
    "start": "360759",
    "end": "367479"
  },
  {
    "text": "action script too it is the current modern action script VM it's open source",
    "start": "367479",
    "end": "372840"
  },
  {
    "text": "which is kind of cool if you look up tamaron on Mozilla you can get the source of the main flash VM and it has",
    "start": "372840",
    "end": "379960"
  },
  {
    "text": "some good features it has just in Ed compilation and a fallback interpreter",
    "start": "379960",
    "end": "385240"
  },
  {
    "text": "it is extendable so if you want to write your own Flash apis and compile them yourself you totally can it has a",
    "start": "385240",
    "end": "391280"
  },
  {
    "text": "garbage collected Heap it's a fairly conservative Heap I'd call it non-strict non-exact so things don't get freed",
    "start": "391280",
    "end": "397440"
  },
  {
    "text": "right away but they do get eventually freed it also has a fixed Heap and this is for longlived objects for example um",
    "start": "397440",
    "end": "404800"
  },
  {
    "text": "bit maps and these need to be manually um allocated and freed by the developer",
    "start": "404800",
    "end": "410160"
  },
  {
    "text": "and action script 3 the VM is optimized for Flash but as I said it's open source you can use it for whatever you",
    "start": "410160",
    "end": "416479"
  },
  {
    "text": "want with regards to the actual action script API and some of them are open source they're really important ones",
    "start": "416479",
    "end": "422560"
  },
  {
    "text": "like string and vector and array you can see the source of them online and then there's some Adobe proprietary ones for",
    "start": "422560",
    "end": "429000"
  },
  {
    "text": "example bitmap filtering that are not open source and you can't see the code of I would say bugs in action script 3",
    "start": "429000",
    "end": "435680"
  },
  {
    "text": "are a bit less dense because it does have some good features that prevent bugs for example automatic type checking",
    "start": "435680",
    "end": "442080"
  },
  {
    "text": "but the flip side is that bugs in action script 3 tend to be highly exploitable because there's lots of features in",
    "start": "442080",
    "end": "447520"
  },
  {
    "text": "action script 3 you can use for exploitation the final component of flash is the anti",
    "start": "447520",
    "end": "453240"
  },
  {
    "text": "Corpus and this is basically all of the functionality outside of script this is",
    "start": "453240",
    "end": "458319"
  },
  {
    "text": "the MP4 parser Z lib redj image decoders um all that that sort of thing that isn't exactly script but is part of",
    "start": "458319",
    "end": "465960"
  },
  {
    "text": "flash I'm also going to start with a quick warning objects in Mirror are larger than they appear if you've ever",
    "start": "465960",
    "end": "472360"
  },
  {
    "text": "worked with flash one problem with it is that objects are really really large so",
    "start": "472360",
    "end": "477680"
  },
  {
    "text": "in some situations I've had to compress them for the purposes of these slides um so everything's conceptually correct",
    "start": "477680",
    "end": "483560"
  },
  {
    "text": "with regards to how the bugs work but if you try to use these slides for say exploitation they might not be 100%",
    "start": "483560",
    "end": "489440"
  },
  {
    "text": "correct um so all the bugs are on the project zero tracker you can look them up by cve and get all the nitty-gritty",
    "start": "489440",
    "end": "495039"
  },
  {
    "text": "details but just just be aware I've admitted a few small things in some of these slides so starting off with the year I'm",
    "start": "495039",
    "end": "502840"
  },
  {
    "text": "starting off with last July and that was actually a super interesting time in Flash mostly because of the hacking team",
    "start": "502840",
    "end": "510240"
  },
  {
    "text": "dump just in case anyone doesn't recall hacking team was an organization that",
    "start": "510240",
    "end": "515399"
  },
  {
    "text": "sold Flash and other vulnerabilities to a variety of customers and they",
    "start": "515399",
    "end": "520680"
  },
  {
    "text": "themselves got hacked and all their emails and exploits and source code got dumped online and everyone could see",
    "start": "520680",
    "end": "527240"
  },
  {
    "text": "them and this was actually really interesting because at the time while we did have some samples of flash zero days",
    "start": "527240",
    "end": "534000"
  },
  {
    "text": "we didn't have tons and tons of information about how attackers actually attacked Flash and this was a great",
    "start": "534000",
    "end": "539480"
  },
  {
    "text": "great source of information because there was actually um five vulnerabilities and um the source of all",
    "start": "539480",
    "end": "546279"
  },
  {
    "text": "the exploits so in total this dump contained five bugs and three of them were very",
    "start": "546279",
    "end": "553240"
  },
  {
    "text": "similar there were the two zero days which were both them use after freeze um I called them Bay and opaque background",
    "start": "553240",
    "end": "559920"
  },
  {
    "text": "which is the features they were in and then there was also a convolution filter issue and all these three bugs are",
    "start": "559920",
    "end": "566160"
  },
  {
    "text": "basically very similar bugs in different components and that one was used by hacking team but it eventually um closed",
    "start": "566160",
    "end": "573519"
  },
  {
    "text": "up there was a fourth issue which was an overflow in function dot apply it was a",
    "start": "573519",
    "end": "579120"
  },
  {
    "text": "very um simple buffer overflow and what was interesting about that is in hacking team's emails you could see that they",
    "start": "579120",
    "end": "585360"
  },
  {
    "text": "actually um had this bug ready for use and then it closed and the reason the bug was fixed was that it was recorded",
    "start": "585360",
    "end": "592040"
  },
  {
    "text": "to the chromium vrp program so I think that's kind of cool that's an example of a bug Bounty actually preventing a bug",
    "start": "592040",
    "end": "599079"
  },
  {
    "text": "for being used by an attacker and then finally there was a fifth bug that got fixed which turned out not to be",
    "start": "599079",
    "end": "604160"
  },
  {
    "text": "exploitable though it was easier just to fix it at the time so um I'm going to give this as an",
    "start": "604160",
    "end": "610720"
  },
  {
    "text": "example of the three bugs that showed up in the hacking team dump this issu is the convolution filter issue and it's",
    "start": "610720",
    "end": "617720"
  },
  {
    "text": "interesting because it was actually discovered independently three times I reported it to Adobe and then it was",
    "start": "617720",
    "end": "623680"
  },
  {
    "text": "used to win pone to own and then it turned up in the hacking team dump so at least three people discovered this bug",
    "start": "623680",
    "end": "629440"
  },
  {
    "text": "bu and this bug happens due to a feature of flash called redefinition and this is",
    "start": "629440",
    "end": "634680"
  },
  {
    "text": "what most people would call Monkey patching basically you can Define any function to be any other function in",
    "start": "634680",
    "end": "641200"
  },
  {
    "text": "action script too and what makes this even worse is that in action script 2",
    "start": "641200",
    "end": "646839"
  },
  {
    "text": "native methods generally accept any type and then convert it so let's say you have an API that accepts a string if you",
    "start": "646839",
    "end": "654839"
  },
  {
    "text": "put in an object with a two- string method most flash apis will actually try to convert it and that can be",
    "start": "654839",
    "end": "660839"
  },
  {
    "text": "problematic security wise so in this particular bug what happened is you",
    "start": "660839",
    "end": "665959"
  },
  {
    "text": "create this object called a convolution filter and there's the object and then",
    "start": "665959",
    "end": "671720"
  },
  {
    "text": "you create this other object which is an object with a function called value of and then it's in an",
    "start": "671720",
    "end": "678279"
  },
  {
    "text": "array and then you call the filter Matrix Setter and what this attempts to do is copy this array into memory so",
    "start": "678279",
    "end": "685800"
  },
  {
    "text": "that the filter can use it later so it does this it starts off by allocating the memory to keep the array in and then",
    "start": "685800",
    "end": "692720"
  },
  {
    "text": "it attempts to convert the array to all floats because that's what it needs to store so it does this and in this case",
    "start": "692720",
    "end": "699079"
  },
  {
    "text": "it calls this method and then what you can do which um causes the vulnerability is call the setter again so it starts",
    "start": "699079",
    "end": "706519"
  },
  {
    "text": "over it has to delete this memory because it needs to allocate new memory and then it allocates new memory and",
    "start": "706519",
    "end": "712240"
  },
  {
    "text": "sticks the pointer to it and in this case it works properly you have the element of one that gets copied into the",
    "start": "712240",
    "end": "719360"
  },
  {
    "text": "float array but then the original Setter needs to unwind so that will write to the freed memory and this is a use after",
    "start": "719360",
    "end": "726440"
  },
  {
    "text": "free um that caused this vulnerability and the other two hacking team issues were exactly the same thing more or less",
    "start": "726440",
    "end": "732760"
  },
  {
    "text": "one of them was when you were setting the value of a bite array if that was an object then you could delete the bite array and then use it after it's freed",
    "start": "732760",
    "end": "739680"
  },
  {
    "text": "an opaque background was if you set the background of an image you could delete the image as the background was converted and then right to an allocated",
    "start": "739680",
    "end": "747560"
  },
  {
    "text": "memory as a result of this um this type of bug especially um value of and two-",
    "start": "747560",
    "end": "752959"
  },
  {
    "text": "string bugs received increased attention many many similar bugs were reported in the next few months and Adobe started",
    "start": "752959",
    "end": "759320"
  },
  {
    "text": "efforts to preemptively fix similar bugs in July there were also 33 bugs in the",
    "start": "759320",
    "end": "764639"
  },
  {
    "text": "regular update and the first mitigation set Vector mitigations were",
    "start": "764639",
    "end": "770720"
  },
  {
    "text": "implemented the vector mitigations are protected against a very very common type of exploit in Flash basically in",
    "start": "770760",
    "end": "778040"
  },
  {
    "text": "Flash there is is this class called the vector and it has data and this data has",
    "start": "778040",
    "end": "783160"
  },
  {
    "text": "an inline length and this class turned out to be really really good for exploitation for a couple of reasons one",
    "start": "783160",
    "end": "789560"
  },
  {
    "text": "of them is that it could be any size you could have a small vector or a big vector and also it can be any type you",
    "start": "789560",
    "end": "795519"
  },
  {
    "text": "can have integer vectors or object vectors so for most bugs it's really really easy to make a vector of the",
    "start": "795519",
    "end": "801480"
  },
  {
    "text": "correct size and then use the memory corruption to corrupt the length and then this means that when you the next",
    "start": "801480",
    "end": "807880"
  },
  {
    "text": "time you access the vector you can can read or write anywhere in memory and then that's really useful in exploitation and at this point um a",
    "start": "807880",
    "end": "815160"
  },
  {
    "text": "really high number of vulnerabilities including the hacking team vulnerabilities were exploited in this",
    "start": "815160",
    "end": "820440"
  },
  {
    "text": "way this is what most attackers used so what the vector mitigation did was to fold first it added check sums to",
    "start": "820440",
    "end": "828079"
  },
  {
    "text": "vectors so if one did get corrupted the check sum would be incorrect and then the next time you access the vector",
    "start": "828079",
    "end": "834839"
  },
  {
    "text": "flash just crashes gracefully it also puts some vectors on their own page so",
    "start": "834839",
    "end": "840000"
  },
  {
    "text": "that it's really hard to get a bug that will allow you to corrupt them in the first place and this had a few effects",
    "start": "840000",
    "end": "846000"
  },
  {
    "text": "one of them is that it really reduced the reusability of exploit code if you look at the hacking team dump some of",
    "start": "846000",
    "end": "852120"
  },
  {
    "text": "the bugs they used were like really really crummy bugs things like for example the bite array one you could",
    "start": "852120",
    "end": "858440"
  },
  {
    "text": "change one bite in an array to be a value you wanted um as a part of the use after free and you know in a lot of",
    "start": "858440",
    "end": "867040"
  },
  {
    "text": "situations that wouldn't be a great bug it definitely not a highly exploitable bug but because of this methodology even",
    "start": "867040",
    "end": "873800"
  },
  {
    "text": "not very good bugs were highly exploitable um so this uh made it so that um you couldn't use really low",
    "start": "873800",
    "end": "880720"
  },
  {
    "text": "quality bugs for exploitation or at least not as easily and it also reduced the reusability of certain exploit code",
    "start": "880720",
    "end": "887199"
  },
  {
    "text": "attackers had to at least write some new code for every bug and some people say",
    "start": "887199",
    "end": "892920"
  },
  {
    "text": "that you can substitute the bite array or bit map data for a vector and this is true but it's not not as good the",
    "start": "892920",
    "end": "900519"
  },
  {
    "text": "problem the really good thing about the vector was that you could change the size and type of it and you can't do this with a bit map data or a bite array",
    "start": "900519",
    "end": "908120"
  },
  {
    "text": "you need to have a better bug either one that lets you change the size of the thing that you can corrupt or one that",
    "start": "908120",
    "end": "915480"
  },
  {
    "text": "happens to have something you can corrupt that is exactly the size of a bite array or a bit map data so this",
    "start": "915480",
    "end": "920680"
  },
  {
    "text": "tends to be a lot harder than just using a vector so another interesting bug that",
    "start": "920680",
    "end": "926000"
  },
  {
    "text": "got fixed in July was this redefinition issue using value of and this is another",
    "start": "926000",
    "end": "931199"
  },
  {
    "text": "example of how being able to call script within natives can cause problems so in",
    "start": "931199",
    "end": "936759"
  },
  {
    "text": "this buug you start off by creating an array and yeah you put stuff in the array and what's really interesting here",
    "start": "936759",
    "end": "944040"
  },
  {
    "text": "is that in action script 2 you can actually set the length of an array to be anything including an object with",
    "start": "944040",
    "end": "950079"
  },
  {
    "text": "value of defined so that's what this object does and then you can call this",
    "start": "950079",
    "end": "955279"
  },
  {
    "text": "vulnerable function called sort sord on what this does is it actually fetches",
    "start": "955279",
    "end": "960800"
  },
  {
    "text": "the length a few times so to start off it checks the length and in this case",
    "start": "960800",
    "end": "966120"
  },
  {
    "text": "because it's an object it tries to convert it and then it returns 100,000 and that's not zero so that's fine so",
    "start": "966120",
    "end": "973440"
  },
  {
    "text": "then it calls it again and in this case it stores the length and it will call",
    "start": "973440",
    "end": "978639"
  },
  {
    "text": "into the method and it returns 100,000 and that's fine and then one more time",
    "start": "978639",
    "end": "983839"
  },
  {
    "text": "it fetches the length to allocate memory and this time it returns two and",
    "start": "983839",
    "end": "989519"
  },
  {
    "text": "I think everyone can figure out what happens next here it does an M Copy on this array and the length is way too big",
    "start": "989519",
    "end": "996680"
  },
  {
    "text": "and that's an overflow and it's actually a fairly useful overflow because you can both change the size of the thing that",
    "start": "996680",
    "end": "1002079"
  },
  {
    "text": "gets overflowed and the size of how much you overflow so moving on to August a lot of",
    "start": "1002079",
    "end": "1009000"
  },
  {
    "text": "bugs that were similar to the hacking team Bugs Got reported because they got increased attention and also reports of",
    "start": "1009000",
    "end": "1016680"
  },
  {
    "text": "a class which I call MCU after freeze started to pour in this is a very very common bug I think a hundred or more of",
    "start": "1016680",
    "end": "1024480"
  },
  {
    "text": "them have been reported this year and by this year I mean 2050 and it's a really really common bug class the downside of",
    "start": "1024480",
    "end": "1031360"
  },
  {
    "text": "it is it's a very small variety of freed objects so all of these use after frees there's basically only two object types",
    "start": "1031360",
    "end": "1037720"
  },
  {
    "text": "that get freed but there's many many instances of this bug and the root cause",
    "start": "1037720",
    "end": "1043319"
  },
  {
    "text": "is that display fields are freed outside of garbage collection even if there's references they are always for real",
    "start": "1043319",
    "end": "1050600"
  },
  {
    "text": "freed when they're deleted I think part of this has to do with um how display Fields look and preventing leg because",
    "start": "1050600",
    "end": "1057679"
  },
  {
    "text": "you can imagine um if you're trying to make text scroll across a screen you might do create text field delete text",
    "start": "1057679",
    "end": "1064160"
  },
  {
    "text": "field create text field delete text field create text field delete text field and if it's not really being deleted then you might get something",
    "start": "1064160",
    "end": "1069960"
  },
  {
    "text": "like create create create garbage collect create create create and then that can have all sorts of unusual",
    "start": "1069960",
    "end": "1075480"
  },
  {
    "text": "effects including leg on the screen so instead a flash will really delete the",
    "start": "1075480",
    "end": "1080559"
  },
  {
    "text": "display field and that can lead to vulnerabilities more specifically this",
    "start": "1080559",
    "end": "1085600"
  },
  {
    "text": "happens when function parameters are converted after local variables are initialized but before they are used and",
    "start": "1085600",
    "end": "1091600"
  },
  {
    "text": "the way this type of bug is generally fixed is by enforcing a convert initialize use order and actually if you",
    "start": "1091600",
    "end": "1097919"
  },
  {
    "text": "look at browsers that can be susceptible to similar problems this tends to be how they fix it they have a strict coding",
    "start": "1097919",
    "end": "1103640"
  },
  {
    "text": "guideline that requires conversion before anything else and and it is",
    "start": "1103640",
    "end": "1110440"
  },
  {
    "text": "sometimes hard to tell exactly what order things happen in really complex code but this tends to be the best way",
    "start": "1110440",
    "end": "1116159"
  },
  {
    "text": "to generally prevent this type of issue is to enforce an early conversion order",
    "start": "1116159",
    "end": "1122039"
  },
  {
    "text": "so here's an example of this issue to start off you create a movie clip and only one of these is relevant so I'm",
    "start": "1122039",
    "end": "1128360"
  },
  {
    "text": "going to show that one and then you create this object that is supposed to be a string but is actually an object",
    "start": "1128360",
    "end": "1134720"
  },
  {
    "text": "that does string conversion and then you call the vulnerable function which is in this",
    "start": "1134720",
    "end": "1140039"
  },
  {
    "text": "case swap depths but many many functions are vulnerable to this type of problem",
    "start": "1140039",
    "end": "1145440"
  },
  {
    "text": "so um what this will do is in swap depths it will start off by initializing",
    "start": "1145440",
    "end": "1150640"
  },
  {
    "text": "pointers to both the script object and the movie clip object and then it will try to convert this parameter to a",
    "start": "1150640",
    "end": "1157280"
  },
  {
    "text": "string and this calls remove movie clip which deletes the movie clip and then",
    "start": "1157280",
    "end": "1162480"
  },
  {
    "text": "these are dangling pointers and then the function will continue even though the movie clip has been deleted and we'll",
    "start": "1162480",
    "end": "1168039"
  },
  {
    "text": "use these pointers that now just Dangle on the Heap so moving on to September and",
    "start": "1168039",
    "end": "1175480"
  },
  {
    "text": "October um 23 bugs were fixed in September and",
    "start": "1175480",
    "end": "1180520"
  },
  {
    "text": "20 were fixed in October and they were a lot of those MCU after free and also",
    "start": "1180520",
    "end": "1185600"
  },
  {
    "text": "other redefinition bugs similar to the hacking team bugs and there was also a zero day reported immediately after the",
    "start": "1185600",
    "end": "1192200"
  },
  {
    "text": "October update what was kind of interesting about this bug is that it actually turned up in the wild two weeks",
    "start": "1192200",
    "end": "1198760"
  },
  {
    "text": "after I reported it and it was part of the open source AVM so I can actually",
    "start": "1198760",
    "end": "1204320"
  },
  {
    "text": "show show you the code of it and um it was this bug and then there were two",
    "start": "1204320",
    "end": "1209640"
  },
  {
    "text": "other variants that I also found that were fixed in the emergency patch and I just want to mention that this bug in",
    "start": "1209640",
    "end": "1216600"
  },
  {
    "text": "particular doesn't compile I'll be showing you action script code but if you try to compile this at home it won't",
    "start": "1216600",
    "end": "1222200"
  },
  {
    "text": "work so the way I actually did this was by writing the bite code directly in the Swift so here here is the first bit of",
    "start": "1222200",
    "end": "1229919"
  },
  {
    "text": "the code that causes this vulnerability this is in the action script 3 AVM and",
    "start": "1229919",
    "end": "1235440"
  },
  {
    "text": "what it does is it finds this binding and then if it's not binding none it throws a verify error and what this does",
    "start": "1235440",
    "end": "1243120"
  },
  {
    "text": "is it prevents you from overwriting a function in a class with something that is not a function and you'll notice that",
    "start": "1243120",
    "end": "1249919"
  },
  {
    "text": "this check has a very serious problem it is commented out so um this shouldn't be",
    "start": "1249919",
    "end": "1257320"
  },
  {
    "text": "allowed but it is so just to reiterate this is what should violate your sense of all things",
    "start": "1257320",
    "end": "1263600"
  },
  {
    "text": "object-oriented programming that is allowed you have this function right external that is a function and then in",
    "start": "1263600",
    "end": "1269720"
  },
  {
    "text": "the subass you can Define it as an integer so here's what happens in the",
    "start": "1269720",
    "end": "1275360"
  },
  {
    "text": "action script virtual machine when you can do this this AED external function is",
    "start": "1275360",
    "end": "1280720"
  },
  {
    "text": "actually kind of special it's what you use to override serialization in Flash so let's say you're trying to serialize",
    "start": "1280720",
    "end": "1287000"
  },
  {
    "text": "an object and you don't like what flash does you can Define right external and then you can take in the object and put",
    "start": "1287000",
    "end": "1293400"
  },
  {
    "text": "out your own bite code and then you have to define a complimentary function read read external and that will take in the",
    "start": "1293400",
    "end": "1300120"
  },
  {
    "text": "B array and you have to give them an object back so this um code is where it attempts to actually implement this and",
    "start": "1300120",
    "end": "1306559"
  },
  {
    "text": "fetch the right external and call it when you're serializing an object so the first thing it does is it gets this",
    "start": "1306559",
    "end": "1312799"
  },
  {
    "text": "binding but note that you were allowed to overwrite this with an integer so it is not a function bind",
    "start": "1312799",
    "end": "1319240"
  },
  {
    "text": "so this um M function binding is not correct and then it will use this some function binding to index into a method",
    "start": "1319240",
    "end": "1326880"
  },
  {
    "text": "table except that's not correct so this is actually um an index outside of the",
    "start": "1326880",
    "end": "1332000"
  },
  {
    "text": "table and then you're calling this virtual function on unallocated memory on the Heap that you can",
    "start": "1332000",
    "end": "1337159"
  },
  {
    "text": "control so how was this bug exploited well it turns out that method table is actually variable sized so you could get",
    "start": "1337159",
    "end": "1343760"
  },
  {
    "text": "it to be the same size as a bite array and then they corrected the length property of the bite array so they they",
    "start": "1343760",
    "end": "1349080"
  },
  {
    "text": "could get readwrite access to all of memory so moving on to November and",
    "start": "1349080",
    "end": "1355799"
  },
  {
    "text": "December something happened in December which I call the UA ocalypse this was",
    "start": "1355799",
    "end": "1361039"
  },
  {
    "text": "when a really really large number of the movie clip used after freeze was fixed in Flash there was more than 79 MCU",
    "start": "1361039",
    "end": "1368919"
  },
  {
    "text": "after free bugs fixed and this was due to structural changes to action script 2 that prevented these sorts of bugs from",
    "start": "1368919",
    "end": "1375400"
  },
  {
    "text": "happening there are also new mitigations implemented in December there were three",
    "start": "1375400",
    "end": "1380520"
  },
  {
    "text": "main ones there was check summing on the bite aray class so that previous vulnerability um got read write access",
    "start": "1380520",
    "end": "1387360"
  },
  {
    "text": "to memory by corrupting a bite array class now this is harder to do because there's a check sum on the bite array",
    "start": "1387360",
    "end": "1392919"
  },
  {
    "text": "and if it gets corrupted it crashes they also implemented the isolated Heap and",
    "start": "1392919",
    "end": "1398480"
  },
  {
    "text": "the isolated Heap creates more Heap entropy in Flash basically it it splits",
    "start": "1398480",
    "end": "1405240"
  },
  {
    "text": "the Heap into three portions the data portion the pointer portion and the",
    "start": "1405240",
    "end": "1410919"
  },
  {
    "text": "dangerous portion and then it also splits It Up by size and what this does is it basically um splits up pointers in",
    "start": "1410919",
    "end": "1417919"
  },
  {
    "text": "data and if you think about it most vulner most exploits involve either confusing data for pointers or confusing",
    "start": "1417919",
    "end": "1424559"
  },
  {
    "text": "pointers for data so if they're on their own separate heaps that gets a lot more difficult and of course this mitigation",
    "start": "1424559",
    "end": "1430440"
  },
  {
    "text": "isn't perfect because a lot of objects have both data and pointers in them but",
    "start": "1430440",
    "end": "1435600"
  },
  {
    "text": "even attempting the split make certain vulnerabilities a lot more difficult to use and finally some knop slide",
    "start": "1435600",
    "end": "1441799"
  },
  {
    "text": "mitigations were implemented and this basically makes it more difficult to use legit to create code that you can jump",
    "start": "1441799",
    "end": "1448640"
  },
  {
    "text": "into arbitrarily and in November and December um there was a one day and a zero day to",
    "start": "1448640",
    "end": "1456600"
  },
  {
    "text": "start off there was a one day that turned up in the angler exploit kit",
    "start": "1456600",
    "end": "1461720"
  },
  {
    "text": "which was interesting because it was one of the first things we saw that exploited flash even though they it had",
    "start": "1461720",
    "end": "1467000"
  },
  {
    "text": "the mitigations and this is similar to a bug I filed in the past and basically it's an integer",
    "start": "1467000",
    "end": "1472840"
  },
  {
    "text": "overflow that leads to a heap overflow and it is both controllable in size and",
    "start": "1472840",
    "end": "1478320"
  },
  {
    "text": "controllable in the amount you overwrite so this meant that they could use the one class that is still on check summed",
    "start": "1478320",
    "end": "1485120"
  },
  {
    "text": "which is bit map data and use that to overwrite the size and get read write access to all of memory like it's a very",
    "start": "1485120",
    "end": "1490600"
  },
  {
    "text": "large bit map and then there's this second vulnerability which was an integer",
    "start": "1490600",
    "end": "1496520"
  },
  {
    "text": "overflow which led to a heap flow in jit and what was especially interesting about this exploit is the Swift actually",
    "start": "1496520",
    "end": "1503399"
  },
  {
    "text": "contained two exploits one of them was a typical Vector exploit which would have worked before August and then there was",
    "start": "1503399",
    "end": "1510880"
  },
  {
    "text": "a post isolated heat exploit that would have worked de December and forward that was so much more complex it included",
    "start": "1510880",
    "end": "1518159"
  },
  {
    "text": "such elements as long if statements nested 100 times using both a media file",
    "start": "1518159",
    "end": "1524399"
  },
  {
    "text": "and an image to fill up Heap slots at different times in the exploit trick in the bug 600 times and then eventually",
    "start": "1524399",
    "end": "1531240"
  },
  {
    "text": "they were able to correct the check sums on a bite array and then access all of memory space using that so there's kind",
    "start": "1531240",
    "end": "1537960"
  },
  {
    "text": "of two things you can learn from this first the mitigation didn't completely stop exploitation because this exploit",
    "start": "1537960",
    "end": "1545039"
  },
  {
    "text": "turned up but also it made it way more difficult they had to really really want",
    "start": "1545039",
    "end": "1550080"
  },
  {
    "text": "this exploit to work to um write such a complex exploit and it was clearly very timec consuming to write as",
    "start": "1550080",
    "end": "1556799"
  },
  {
    "text": "well so moving on to 2016 um nothing really exciting happened in January",
    "start": "1556799",
    "end": "1563120"
  },
  {
    "text": "there were no updates and then 22 bugs were fixed in February these were mostly",
    "start": "1563120",
    "end": "1568880"
  },
  {
    "text": "stragglers from the Big Fix of the mcu's after freeze and there were also a few F",
    "start": "1568880",
    "end": "1574600"
  },
  {
    "text": "bugs and I also reported some bugs related to exception handling in Flash",
    "start": "1574600",
    "end": "1582080"
  },
  {
    "text": "and and these um have to do with how you design exceptions in a virtual machine",
    "start": "1582080",
    "end": "1589080"
  },
  {
    "text": "and I have my Grumpy Cat there because there are two ways you can design exceptions in a virtual machine and both",
    "start": "1589080",
    "end": "1595720"
  },
  {
    "text": "designs are bad they both have problems one way you can design it is that let's",
    "start": "1595720",
    "end": "1601640"
  },
  {
    "text": "say you're in a native and you call into script and it throws an exception you keep going this is what action script 2",
    "start": "1601640",
    "end": "1607799"
  },
  {
    "text": "does and it has the benefit that you kind of always know you're in a good State because you can never unexpectedly",
    "start": "1607799",
    "end": "1614120"
  },
  {
    "text": "leave the code but the flip side of it is that developers don't always expect",
    "start": "1614120",
    "end": "1619520"
  },
  {
    "text": "that that's what's going to happen sometimes I think if they throw an exception execution is going to stop so",
    "start": "1619520",
    "end": "1624679"
  },
  {
    "text": "well I've never seen a vulnerability in Flash due to this problem I have seen Vols in other VMS where people assume",
    "start": "1624679",
    "end": "1630480"
  },
  {
    "text": "throwing an exception will stop things and it doesn't and it causes problems the flip side is that you stop when you",
    "start": "1630480",
    "end": "1637440"
  },
  {
    "text": "throw an exception and this is what action script 3 does and this um has the",
    "start": "1637440",
    "end": "1642520"
  },
  {
    "text": "benefit of it being more intuitive even if the developer isn't expecting an exception can happen you",
    "start": "1642520",
    "end": "1648279"
  },
  {
    "text": "still leave the code base but the flip side is you can have dangling pointers because there's there's no way if you have a really unexpected exception for",
    "start": "1648279",
    "end": "1655720"
  },
  {
    "text": "the state of an object to get corrected so this first vulnerability is",
    "start": "1655720",
    "end": "1662480"
  },
  {
    "text": "due to the exception behavior in action script 3 and it's specifically due to throwing an exception that probably",
    "start": "1662480",
    "end": "1669000"
  },
  {
    "text": "should have been a fatal error except you can catch it and use the Flash in a",
    "start": "1669000",
    "end": "1674440"
  },
  {
    "text": "bad state so this has to do both with code and with the Swift format and the",
    "start": "1674440",
    "end": "1680039"
  },
  {
    "text": "Swift format has an asset table that includes different assets like fonts and videos and that sort of thing and what's",
    "start": "1680039",
    "end": "1687880"
  },
  {
    "text": "especially interesting is that there's some reserved values that aren't in the Swift for example there's an empty text",
    "start": "1687880",
    "end": "1693600"
  },
  {
    "text": "field and this is so that an empty text field doesn't have to get allocated every single time flash needs to use one",
    "start": "1693600",
    "end": "1699679"
  },
  {
    "text": "but unfortunately you can override this so if your value in the asset table overrides a reserved value that reserved",
    "start": "1699679",
    "end": "1706320"
  },
  {
    "text": "value will just get overridden so then you try and create a text field",
    "start": "1706320",
    "end": "1711840"
  },
  {
    "text": "and you've got your text field object and it tries to find this empty text field asset except it is now a font",
    "start": "1711840",
    "end": "1719600"
  },
  {
    "text": "except this state actually gets detected because there's inline types for assets",
    "start": "1719600",
    "end": "1725120"
  },
  {
    "text": "it will notice oh this is actually a font and we should throw an error and it",
    "start": "1725120",
    "end": "1731159"
  },
  {
    "text": "also corrects the type to be of type text field now and this is basically just to prevent getting stuck in a loop",
    "start": "1731159",
    "end": "1737720"
  },
  {
    "text": "as the player closes down but unfortunately because this isn't a fatal error you can catch it and",
    "start": "1737720",
    "end": "1744279"
  },
  {
    "text": "then you can create a text field again but now the type of this font has been corrected so now this text asset points",
    "start": "1744279",
    "end": "1751320"
  },
  {
    "text": "to something that is not a text field it's actually a font and then this is a type confusion",
    "start": "1751320",
    "end": "1757440"
  },
  {
    "text": "vulnerability um so another exception related bug I found is a use after free",
    "start": "1757440",
    "end": "1763080"
  },
  {
    "text": "in the sound class and this bug isn't exploitable on its own but it was actually useful in exploiting in other",
    "start": "1763080",
    "end": "1768279"
  },
  {
    "text": "bug because it lets you read large portions of the Heap so you start off by creating this sound class and then you",
    "start": "1768279",
    "end": "1775240"
  },
  {
    "text": "create a bite array that has a th000 bytes and then you call this vulnerable function and what this does is it tries",
    "start": "1775240",
    "end": "1782080"
  },
  {
    "text": "to take this array you provided and copy it into memory so it does this and then",
    "start": "1782080",
    "end": "1788640"
  },
  {
    "text": "that call is fine and then you create another bite array and this one is only two bytes long and then you call this",
    "start": "1788640",
    "end": "1794760"
  },
  {
    "text": "vulnerable function again and of course this isn't going to work because two bytes isn't even long enough to create",
    "start": "1794760",
    "end": "1801240"
  },
  {
    "text": "one float so this will throw an exception except before that exception",
    "start": "1801240",
    "end": "1807320"
  },
  {
    "text": "gets thrown you've freed the memory that was allocated previously to hold the PCM",
    "start": "1807320",
    "end": "1812519"
  },
  {
    "text": "array so now you've left this function but you have this dangling pointer to memory and then you can call the extract",
    "start": "1812519",
    "end": "1818679"
  },
  {
    "text": "function and read these values out of memory so moving on to March March was a",
    "start": "1818679",
    "end": "1826120"
  },
  {
    "text": "great time in Flash March is my favorite time of year because there's pone to own it's like Christmas but there's flash",
    "start": "1826120",
    "end": "1832720"
  },
  {
    "text": "vulnerabilities so there were a few new exploits found in Flash um to start",
    "start": "1832720",
    "end": "1838320"
  },
  {
    "text": "there was a big update and a number of bugs were fixed and one of them I exploited and then in Ponta own there",
    "start": "1838320",
    "end": "1845399"
  },
  {
    "text": "was a number of flash bugs that were reported there were two MCU after freeze",
    "start": "1845399",
    "end": "1850960"
  },
  {
    "text": "real stragglers from the Big Fix um one type confusion in action script 2 and",
    "start": "1850960",
    "end": "1856039"
  },
  {
    "text": "one overflow in jpeg and what was also interesting is there was a zero day",
    "start": "1856039",
    "end": "1861639"
  },
  {
    "text": "which was an overflow in the bit map class and platform specific code and that was kind of interesting because",
    "start": "1861639",
    "end": "1867279"
  },
  {
    "text": "that was probably the first platform specific bug I'd seen in Flash used in",
    "start": "1867279",
    "end": "1872919"
  },
  {
    "text": "as in an exploit so I I'm hoping that's a sign that bugs are starting to get picked over enough that it's worthwhile",
    "start": "1872919",
    "end": "1879240"
  },
  {
    "text": "to use platform specific bugs where it wasn't before so um an interesting bug that I",
    "start": "1879240",
    "end": "1885480"
  },
  {
    "text": "found in March as well was an exploitable bug fuzz bug what was kind of interesting about this one is that it",
    "start": "1885480",
    "end": "1891840"
  },
  {
    "text": "was caused by a bug in a use after free check so you know how I said they aren't making any more",
    "start": "1891840",
    "end": "1897320"
  },
  {
    "text": "flashbugs that wasn't 100% true there's the occasional new flashbug and this is one of them in that fix of the 90 plus",
    "start": "1897320",
    "end": "1905919"
  },
  {
    "text": "um use after free in two cases there was an actual bug in the use after free check that um was exploitable and it",
    "start": "1905919",
    "end": "1913080"
  },
  {
    "text": "required an ASR bypass it's not exploitable on its own um but it did turn out to be ex exploitable and I got",
    "start": "1913080",
    "end": "1919080"
  },
  {
    "text": "the way I got around the iso Heap in this specific situation was that it turns out that the jit allocates some",
    "start": "1919080",
    "end": "1925880"
  },
  {
    "text": "objects in the data partition that have V tables so then using that sound bug I could read that out and use that to get",
    "start": "1925880",
    "end": "1933039"
  },
  {
    "text": "the location of a v table so here's the bug and I'm sure based on this Pock you",
    "start": "1933039",
    "end": "1938200"
  },
  {
    "text": "can totally tell what's wrong um it's one of the shortest pox for a bug I've",
    "start": "1938200",
    "end": "1943279"
  },
  {
    "text": "seen what's actually um Happening Here is that when you call a method in flash",
    "start": "1943279",
    "end": "1949279"
  },
  {
    "text": "it allocates space for the args on the stack and in Flash um ala is limit it",
    "start": "1949279",
    "end": "1954919"
  },
  {
    "text": "has a minimum of eight byes so this will return an unallocated uh eight bytes on",
    "start": "1954919",
    "end": "1960159"
  },
  {
    "text": "the stack and then it will call convert to string on this and since you haven't actually initialize this um whatever",
    "start": "1960159",
    "end": "1965919"
  },
  {
    "text": "value was on the stack before it will call this virtual method on um and that makes this bug",
    "start": "1965919",
    "end": "1972639"
  },
  {
    "text": "exploitable so moving on to April um there are 24 bugs fixed um we",
    "start": "1972639",
    "end": "1979720"
  },
  {
    "text": "started fuzzing images as soon as we saw the pona own bugs that had the jpeg bug",
    "start": "1979720",
    "end": "1986320"
  },
  {
    "text": "in them me and Matas started fuzzing jpegs in Flash and we found about five",
    "start": "1986320",
    "end": "1991360"
  },
  {
    "text": "more bugs that were similar to the pon to own bugs and there were also some use after freeze reported and there was also",
    "start": "1991360",
    "end": "1997760"
  },
  {
    "text": "a zero day in April um it was reported by Tren micro and it was actually in an",
    "start": "1997760",
    "end": "2003360"
  },
  {
    "text": "exploit kit and it was a type confusion bug in the file reference class",
    "start": "2003360",
    "end": "2008720"
  },
  {
    "text": "and what was kind of cool about this bug is it actually didn't work on the current mitigation set so even though it",
    "start": "2008720",
    "end": "2014799"
  },
  {
    "text": "was found in the wild it actually didn't work on flash at the time although it did work on previous versions of Flash",
    "start": "2014799",
    "end": "2021039"
  },
  {
    "text": "and this was due to a mitigation which I think was almost not even a mitigation but happened to prevent this bug um it's",
    "start": "2021039",
    "end": "2028120"
  },
  {
    "text": "zero on free so basically in some instances in flash now if you free",
    "start": "2028120",
    "end": "2034399"
  },
  {
    "text": "memory it will be zeroed and this was because there were some years after freeze where you look at them and you're",
    "start": "2034399",
    "end": "2039760"
  },
  {
    "text": "just like you know how could that have ever not been noticed um because it happened during normal use and this was",
    "start": "2039760",
    "end": "2046360"
  },
  {
    "text": "because the H the right thing just happened to be in memory that prevented a crash so this point of zero on free is",
    "start": "2046360",
    "end": "2053040"
  },
  {
    "text": "it increases the discoverability of use after free a lot it guarantees that if you have a use after free in common",
    "start": "2053040",
    "end": "2058480"
  },
  {
    "text": "situations it will crash but what was interesting is in this situation it actually caused this um zero day exploit",
    "start": "2058480",
    "end": "2066158"
  },
  {
    "text": "to not work because they were zero out something that they were reading to make their exploit",
    "start": "2066159",
    "end": "2071358"
  },
  {
    "text": "work um and I'm going to describe to you um how this vulnerability worked um it",
    "start": "2071359",
    "end": "2076919"
  },
  {
    "text": "was type confusion in as2 and after this bug turned up I reported a couple variants as well so this once again has",
    "start": "2076919",
    "end": "2084520"
  },
  {
    "text": "to do with um the string conversion the two string function you um create this",
    "start": "2084520",
    "end": "2091320"
  },
  {
    "text": "object and then you create a new text field and um so here's the script object",
    "start": "2091320",
    "end": "2097320"
  },
  {
    "text": "and it will try to initialize it so to do this the first thing it does is it sets the type to be of type text field",
    "start": "2097320",
    "end": "2105359"
  },
  {
    "text": "and then it tries to set the native data but then it discovers that it needs this",
    "start": "2105359",
    "end": "2111200"
  },
  {
    "text": "parameter first so it tries to convert the parameter except you've overwritten this function so now you call the",
    "start": "2111200",
    "end": "2118359"
  },
  {
    "text": "Constructor again and you call the file reference Constructor and this is where the bug actually is um in flash a",
    "start": "2118359",
    "end": "2125440"
  },
  {
    "text": "Constructor should not if you try to call it on something that already has the type set it should cause an error",
    "start": "2125440",
    "end": "2131960"
  },
  {
    "text": "but in this situation there was a vulnerability where the file reference class did not correctly do the check and",
    "start": "2131960",
    "end": "2137119"
  },
  {
    "text": "did not cause an error so this um Constructor would run even though there was already a type on this object so it",
    "start": "2137119",
    "end": "2144160"
  },
  {
    "text": "would set the native data to a file reference type and then it would change the type to be a file reference even",
    "start": "2144160",
    "end": "2150920"
  },
  {
    "text": "though it was already set and then when you unwind in um creating the text field it will set the native data overwrite it",
    "start": "2150920",
    "end": "2158480"
  },
  {
    "text": "to be this new text field and then you have a file reference that is pointing to a text field and then this will get",
    "start": "2158480",
    "end": "2164280"
  },
  {
    "text": "cast to the wrong type and that's type confusion so moving on to June there",
    "start": "2164280",
    "end": "2170920"
  },
  {
    "text": "were 36 bugs fixed a lot of them were MCU after freeze and once again there was kind of an echo from pone to own",
    "start": "2170920",
    "end": "2177200"
  },
  {
    "text": "usually when high-profile bugs get found um other people start reporting similar bugs for a while and there was also uh",
    "start": "2177200",
    "end": "2185560"
  },
  {
    "text": "zero day reported by kerski which was an out out of bounds memory access in the open source procer and this bug was open",
    "start": "2185560",
    "end": "2193000"
  },
  {
    "text": "source and I kind of thought it was a cool bug because you know despite all the subtle and hard to find bugs that",
    "start": "2193000",
    "end": "2199119"
  },
  {
    "text": "have been reported in Flash and found in the wild this was actually quite a simple bug I'd heard of bugs like this",
    "start": "2199119",
    "end": "2205119"
  },
  {
    "text": "but never actually seen one and then this uh one turned up and you know it's",
    "start": "2205119",
    "end": "2211079"
  },
  {
    "text": "one that's in the Swift parer so theoretically you could find it just by fuzzing Swifts but for whatever reason",
    "start": "2211079",
    "end": "2216520"
  },
  {
    "text": "this got missed by every one and then turned up and it's in the open source Swift parser you can see they're parsing",
    "start": "2216520",
    "end": "2223119"
  },
  {
    "text": "this chunk and then the bug is that they're reading this U in3 out of the",
    "start": "2223119",
    "end": "2228520"
  },
  {
    "text": "Swift without checking it so this can be way out of bounds um if you want so then",
    "start": "2228520",
    "end": "2233960"
  },
  {
    "text": "you can see where this um get string index is used and you can see they're",
    "start": "2233960",
    "end": "2239480"
  },
  {
    "text": "just adding it to a pointer so obviously this can make that pointer way out of bounds and then this turns out to be",
    "start": "2239480",
    "end": "2245839"
  },
  {
    "text": "exploitable um so that's the end of the year um so some conclusions believe it",
    "start": "2245839",
    "end": "2251920"
  },
  {
    "text": "or not finding bugs and Flash is generally getting harder um as I said when I started it was one bug per day",
    "start": "2251920",
    "end": "2259119"
  },
  {
    "text": "and now I'm down to one bug per week or even less um the bugs are getting more and more picked over um as more people",
    "start": "2259119",
    "end": "2265560"
  },
  {
    "text": "are using them more people are reporting them they're starting to be a lot more flash research and bugs are getting",
    "start": "2265560",
    "end": "2270640"
  },
  {
    "text": "harder to find um certain bug classes are drying up but others are taking their place and this kind of happened",
    "start": "2270640",
    "end": "2277240"
  },
  {
    "text": "twice this year to start off there were the redefinition bugs similar to the ones that were in hacking team that were",
    "start": "2277240",
    "end": "2283240"
  },
  {
    "text": "really popular and then they basically all got reported and they're much more hard to find these days and then the",
    "start": "2283240",
    "end": "2288599"
  },
  {
    "text": "same thing sort of happened with the MCU after freeze you know it got to a peak of you know basically uh you know 100 of",
    "start": "2288599",
    "end": "2297520"
  },
  {
    "text": "them being fixed in two months and now it's you know maybe five or less being fixed so that type of bug is now getting",
    "start": "2297520",
    "end": "2305040"
  },
  {
    "text": "picked over so um who knows what happen next and Flash mitigations are",
    "start": "2305040",
    "end": "2310119"
  },
  {
    "text": "definitely making it more difficult to exploit bugs especially with lowquality bugs um we're definitely seeing a fewer",
    "start": "2310119",
    "end": "2317040"
  },
  {
    "text": "zero zero days and especially fewer one days because of the Flash mitigations and in some of the zero days that turn",
    "start": "2317040",
    "end": "2322599"
  },
  {
    "text": "up you can tell that it was a lot more effort to exploit the bugs um so what do I think um what sort",
    "start": "2322599",
    "end": "2330200"
  },
  {
    "text": "of bugs are left well as I said the movie clip used after freeze are still being used a lot but they're getting",
    "start": "2330200",
    "end": "2335960"
  },
  {
    "text": "harder to exploit and I think as Adobe adds more mitigations they're going to eventually have marginal utility and as",
    "start": "2335960",
    "end": "2343720"
  },
  {
    "text": "I said the redefinition bugs are kind of gone in the future um I suspect we're probably going to see a few more fuzz",
    "start": "2343720",
    "end": "2350400"
  },
  {
    "text": "bugs in media just because those have been turning up a bit lately and there's also been a few bugs in the open source",
    "start": "2350400",
    "end": "2357119"
  },
  {
    "text": "AVM the thing about that is that the open source AVM even though it's open",
    "start": "2357119",
    "end": "2362800"
  },
  {
    "text": "source the code is extremely complex so there's quite a barrier in to to looking at it so my suspicion is just because",
    "start": "2362800",
    "end": "2369040"
  },
  {
    "text": "it's so complicated there's still bugs in there also we saw the first platform",
    "start": "2369040",
    "end": "2374079"
  },
  {
    "text": "specific bug used in a while so it's possible that more of those will be used",
    "start": "2374079",
    "end": "2379160"
  },
  {
    "text": "as bugs get picked over and finally um everyone is talking about Flash",
    "start": "2379160",
    "end": "2384520"
  },
  {
    "text": "deprecation so maybe one day flash will be deprecated and attackers will have to move on to something new personally I",
    "start": "2384520",
    "end": "2391160"
  },
  {
    "text": "think the new thing will be browsers so that's what I'm planning on looking at next um so that it I want to end off by",
    "start": "2391160",
    "end": "2399280"
  },
  {
    "text": "giving a big thank you to Adobe they have been super helpful with this research and they've obviously",
    "start": "2399280",
    "end": "2404800"
  },
  {
    "text": "implemented some great mitigations this year so thanks a lot so that's it I I'm going to now open",
    "start": "2404800",
    "end": "2411400"
  },
  {
    "text": "it up for questions [Applause]",
    "start": "2411400",
    "end": "2423940"
  }
]