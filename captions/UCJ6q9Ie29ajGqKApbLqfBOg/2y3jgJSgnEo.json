[
  {
    "text": "[Music]",
    "start": "1430",
    "end": "4810"
  },
  {
    "text": "thank you for coming to my talk um I am whoever I say I am infiltrating",
    "start": "7760",
    "end": "12960"
  },
  {
    "text": "identity providers using zero click exploits I changed the title slightly to include the s for exports",
    "start": "12960",
    "end": "19980"
  },
  {
    "text": "um a little bit of background about who I am I'm a security researcher at 360 as",
    "start": "19980",
    "end": "25199"
  },
  {
    "text": "part of the vulnerability Research Institute I also run a training class so if you enjoy this presentation feel free",
    "start": "25199",
    "end": "31439"
  },
  {
    "text": "to check it out call full stack web attack I've spoken at some past conferences and also trained at those",
    "start": "31439",
    "end": "38280"
  },
  {
    "text": "some of those conferences and in the past I've discovered over 1500 high impact or critical vulnerabilities and I",
    "start": "38280",
    "end": "46140"
  },
  {
    "text": "played pone to own this year last year in the year before to have",
    "start": "46140",
    "end": "51239"
  },
  {
    "text": "so the agenda for today we're going to discuss is what is identity and access management first then we're going to",
    "start": "51239",
    "end": "57420"
  },
  {
    "text": "look at authentication authorization at more of a high level then we're going to quickly discuss some past attacks",
    "start": "57420",
    "end": "63780"
  },
  {
    "text": "against other solution IM Solutions such as Oracle access manager Forge Rock open",
    "start": "63780",
    "end": "69540"
  },
  {
    "text": "am and VMware workspace one access we'll get into this discovery of the",
    "start": "69540",
    "end": "74820"
  },
  {
    "text": "bugs we'll talk about in this presentation and also the exploitation process for some of those and then we'll",
    "start": "74820",
    "end": "81360"
  },
  {
    "text": "cover some conclusions and takeaways so let's first cover what is I am uh",
    "start": "81360",
    "end": "89640"
  },
  {
    "text": "it's the integration of identity and access management into a single solution so you have identity on one hand being",
    "start": "89640",
    "end": "96659"
  },
  {
    "text": "authentication which is the validation that is I am whoever I say I am I present credentials to the system and",
    "start": "96659",
    "end": "103020"
  },
  {
    "text": "the system validates those credentials and that's usually done through password authentication or Federated",
    "start": "103020",
    "end": "108600"
  },
  {
    "text": "authentication such as single sign-on technology and typically the protocol mainly used",
    "start": "108600",
    "end": "113700"
  },
  {
    "text": "for single sign on technology is uh saml or security assertion markup language on the other hand there is",
    "start": "113700",
    "end": "121200"
  },
  {
    "text": "um access or authorization which is the verification of privileges or permissions for an already authenticated",
    "start": "121200",
    "end": "127439"
  },
  {
    "text": "user and typically speaking the protocol used for this is open authorization or oauth",
    "start": "127439",
    "end": "133800"
  },
  {
    "text": "2. and that protocol is usually Inc uses",
    "start": "133800",
    "end": "138840"
  },
  {
    "text": "another protocol in combination of that technology called Java web token and that's used for a data exchange right to",
    "start": "138840",
    "end": "144840"
  },
  {
    "text": "keep the the data across systems so IM is really a prime target for",
    "start": "144840",
    "end": "151680"
  },
  {
    "text": "attackers right you have it's a it's a technology stack that includes both",
    "start": "151680",
    "end": "156900"
  },
  {
    "text": "authentication authorization it must be externally Exposed on the perimeter especially for the oauth",
    "start": "156900",
    "end": "163080"
  },
  {
    "text": "component um it's it's got a complicated technology stack using several",
    "start": "163080",
    "end": "169019"
  },
  {
    "text": "authentication protocols and authorization protocols and several other components inside of those systems",
    "start": "169019",
    "end": "174959"
  },
  {
    "text": "so breaching in IM solution um is is really critical right because",
    "start": "174959",
    "end": "180959"
  },
  {
    "text": "it's the keys it holds all the keys to the kingdom essentially for an organization and those uh those credentials that are",
    "start": "180959",
    "end": "189120"
  },
  {
    "text": "stolen from that system or those tokens that are reforged can be replayed against other systems externally exposed",
    "start": "189120",
    "end": "194819"
  },
  {
    "text": "and attacks can further into the network and more information can be stolen and things like that",
    "start": "194819",
    "end": "200760"
  },
  {
    "text": "so you really have uh identity on one hand and access on the other and combine",
    "start": "200760",
    "end": "206280"
  },
  {
    "text": "into a single security solution which is sold to many organizations and placed on the perimeter",
    "start": "206280",
    "end": "213500"
  },
  {
    "text": "so let's go through at a high level Federated Authentication",
    "start": "213500",
    "end": "219239"
  },
  {
    "text": "um Step One the user makes a resource request which goes through a service provider",
    "start": "219239",
    "end": "225799"
  },
  {
    "text": "step two the service provider redirects the request to the identity provider",
    "start": "226739",
    "end": "231980"
  },
  {
    "text": "step three the user then sends the authentication request and the resource to the identity provider right both the",
    "start": "232319",
    "end": "240060"
  },
  {
    "text": "two types of requests step four the identity provider validates that authentication requests",
    "start": "240060",
    "end": "245099"
  },
  {
    "text": "and sends back a signed response for data integrity",
    "start": "245099",
    "end": "250040"
  },
  {
    "text": "that sign responses forwarded to the service provider and finally the service provider",
    "start": "250319",
    "end": "255599"
  },
  {
    "text": "verifies that the user is authorized authorized to access that specific resource and returns a response with the",
    "start": "255599",
    "end": "261660"
  },
  {
    "text": "original resource requests okay so like I said on the other hand for",
    "start": "261660",
    "end": "268199"
  },
  {
    "text": "authorization you now have uh oauth2 and this works a little bit differently so",
    "start": "268199",
    "end": "274440"
  },
  {
    "text": "the user is already authenticated and an application requests permission to that user",
    "start": "274440",
    "end": "280580"
  },
  {
    "text": "for granting access to a particular resource and that's usually done through like a pop-up box for example and the",
    "start": "280580",
    "end": "286800"
  },
  {
    "text": "user says okay I grant permission for that application to access uh the the resource",
    "start": "286800",
    "end": "294380"
  },
  {
    "text": "and then that application takes that Grant and sends it off to the authorization server to gain an access",
    "start": "294660",
    "end": "300720"
  },
  {
    "text": "token right and then finally that access token is used to gain access to resources right",
    "start": "300720",
    "end": "307979"
  },
  {
    "text": "Naturally Speaking so we have some interesting points here",
    "start": "307979",
    "end": "313080"
  },
  {
    "text": "for authentication it's typically only server-side obviously right and authorization combines a mixture of",
    "start": "313080",
    "end": "320160"
  },
  {
    "text": "client-side and server-side components so for Authentication",
    "start": "320160",
    "end": "325259"
  },
  {
    "text": "the obvious sort of XML tax exist for saml because saml is based on XML uh",
    "start": "325259",
    "end": "331020"
  },
  {
    "text": "data structures and so you have token passing vulnerabilities like external entity injection uh server-side request",
    "start": "331020",
    "end": "337440"
  },
  {
    "text": "forgery uh XSL transformation you may also have the ability to uh",
    "start": "337440",
    "end": "344060"
  },
  {
    "text": "trigger a missing verification entirely in the system so for example you might be able to authenticate a system and",
    "start": "344060",
    "end": "349919"
  },
  {
    "text": "they don't verify the signature at all and so you can completely just authenticate to the system with a signed",
    "start": "349919",
    "end": "355440"
  },
  {
    "text": "response but there's also the ability to bypass signature verification in some cases",
    "start": "355440",
    "end": "360979"
  },
  {
    "text": "using XML signature wrapping or XML canonicalization",
    "start": "360979",
    "end": "366020"
  },
  {
    "text": "but these these type of vulnerabilities are um",
    "start": "366020",
    "end": "371580"
  },
  {
    "text": "are past the differential type bug and as such they require the attacker to",
    "start": "371580",
    "end": "376680"
  },
  {
    "text": "obtain an already existing saml response a sign saml response so that could be",
    "start": "376680",
    "end": "382319"
  },
  {
    "text": "through an information disclosure or that could be through already having authentication to the to the system as a",
    "start": "382319",
    "end": "387419"
  },
  {
    "text": "low privilege user for example so I try to avoid auditing for these types of vulnerabilities although they",
    "start": "387419",
    "end": "393120"
  },
  {
    "text": "still have a high impact against these types of systems for authorization you have like I said",
    "start": "393120",
    "end": "399180"
  },
  {
    "text": "client-side sort of attacks so you could have the idea here is the step to get",
    "start": "399180",
    "end": "404400"
  },
  {
    "text": "access to an access token an attacker might use some client-side type of attack to leak the authorization codes",
    "start": "404400",
    "end": "410460"
  },
  {
    "text": "or an access token through cross-site scripting CrossFit request forgery open",
    "start": "410460",
    "end": "416039"
  },
  {
    "text": "redirect or click jacking and we've seen these in in done in the wild and also as part of bug bounties and this is more or",
    "start": "416039",
    "end": "423120"
  },
  {
    "text": "less the account takeover style type vulnerability right thank you",
    "start": "423120",
    "end": "429918"
  },
  {
    "text": "so now let's have a look at some past attacks against IM Solutions",
    "start": "430020",
    "end": "435440"
  },
  {
    "text": "the uh some of the products we'll look at is the Oracle access manager which is oracle's Flagship IM solution and comes",
    "start": "436740",
    "end": "443520"
  },
  {
    "text": "bundled with oracles or weblogic application server all right and this is uh this is",
    "start": "443520",
    "end": "449280"
  },
  {
    "text": "actually a separate product from Oracle identity management solution and then you have the forge Rock open am and it",
    "start": "449280",
    "end": "456000"
  },
  {
    "text": "was originally called opensso and open am is a fork of open SSO it was",
    "start": "456000",
    "end": "461880"
  },
  {
    "text": "maintained and developed by the open source project by Ford Rock but then later in 2016",
    "start": "461880",
    "end": "468419"
  },
  {
    "text": "they had created a forge Rock am from open SSO and it became a closed Source",
    "start": "468419",
    "end": "474840"
  },
  {
    "text": "product having said that though the code bases are quite similar even though there's six years difference of",
    "start": "474840",
    "end": "480180"
  },
  {
    "text": "development and then finally we have VMware workspace one access and it was formerly",
    "start": "480180",
    "end": "486300"
  },
  {
    "text": "known as VMware identity manager and his vmware's Flagship IM solution and",
    "start": "486300",
    "end": "491460"
  },
  {
    "text": "relatively new uh to the market but it's still uh used by several Fortune 500 companies and has some technical debt of",
    "start": "491460",
    "end": "498000"
  },
  {
    "text": "course so the first bug we'll look at is uh CV 20 21 35 587 and this was a",
    "start": "498000",
    "end": "505440"
  },
  {
    "text": "deserialization of untrusted data it was pre-authenticated and essentially had",
    "start": "505440",
    "end": "510479"
  },
  {
    "text": "completely zero limitations it allowed for RC against the systems of",
    "start": "510479",
    "end": "517380"
  },
  {
    "text": "uh oam 11g but at the time it was end of life when this bug was reported but it also worked",
    "start": "517380",
    "end": "523979"
  },
  {
    "text": "on oam 12g which wasn't end of life but it didn't work on the latest patches of",
    "start": "523979",
    "end": "530160"
  },
  {
    "text": "OEM 12g and that was because Oracle had removed the endpoint due to some code",
    "start": "530160",
    "end": "536339"
  },
  {
    "text": "refactoring they didn't actually know about the vulnerability so essentially there was really not much for Oracle to",
    "start": "536339",
    "end": "541680"
  },
  {
    "text": "do right so it was it was interesting to see it was kind of like a an end day on a one day vulnerability or half a zero",
    "start": "541680",
    "end": "549360"
  },
  {
    "text": "day and then you have uh cb21 35 464 which",
    "start": "549360",
    "end": "554580"
  },
  {
    "text": "was another deserialization of untrusted data in Forge Rock open am and this was very interesting because it was in a",
    "start": "554580",
    "end": "561600"
  },
  {
    "text": "third-party component a third-party library that was separate from the",
    "start": "561600",
    "end": "566940"
  },
  {
    "text": "actual original code base and we can see in the code here that the vulnerability uh came from the get",
    "start": "566940",
    "end": "574680"
  },
  {
    "text": "parameter jado dots page session which was passed to base64 decoded essentially",
    "start": "574680",
    "end": "580920"
  },
  {
    "text": "and passed to a deserialization function the limitations of vulnerability was",
    "start": "580920",
    "end": "588000"
  },
  {
    "text": "also none and allowed for pre-authenticated RCU and the way it was patched by forged",
    "start": "588000",
    "end": "593880"
  },
  {
    "text": "Rock uh in their am solution was by removing the vulnerable Library Jato which was developed Way Long Ago by Sun",
    "start": "593880",
    "end": "601740"
  },
  {
    "text": "Microsystems but it was also patched interestingly in open am too",
    "start": "601740",
    "end": "607800"
  },
  {
    "text": "and the patch uh you can see there use a look ahead uh whitelist destroyalization",
    "start": "607800",
    "end": "613440"
  },
  {
    "text": "check for uh dangerous classes there",
    "start": "613440",
    "end": "618800"
  },
  {
    "text": "and let's look at the the third vulnerability in the list here uh this is CV 2020 uh 4006. this is very",
    "start": "619200",
    "end": "626100"
  },
  {
    "text": "interesting because this impacted VMware workspace one access and this was a command ejection and it came through the generate and",
    "start": "626100",
    "end": "632880"
  },
  {
    "text": "install self-signed certificate function and it was very straightforward actually when you look at the code it was kind of",
    "start": "632880",
    "end": "638940"
  },
  {
    "text": "quite obvious but the interesting point that I wanted to make with this vulnerability was the fact that it came from this sand parameter that was",
    "start": "638940",
    "end": "644880"
  },
  {
    "text": "embedded inside of a command string in either Linux or Windows so if the software was deployed on either Linux or",
    "start": "644880",
    "end": "651120"
  },
  {
    "text": "Windows the command injection would work and in both cases they used the command shell so you didn't need to do any extra",
    "start": "651120",
    "end": "658800"
  },
  {
    "text": "argument attacks on the particular binary that was being targeted inside the command injection you could just use",
    "start": "658800",
    "end": "664200"
  },
  {
    "text": "the shell to gain remote code execution okay",
    "start": "664200",
    "end": "670500"
  },
  {
    "text": "but the extra interesting thing about this vulnerability that I noticed was that it was actually exploited in the",
    "start": "670500",
    "end": "676620"
  },
  {
    "text": "wild back in 2020 and on top of that it actually required authentication as the administrator user",
    "start": "676620",
    "end": "683880"
  },
  {
    "text": "it also required access to Port 8443 which is a Management Port that's not",
    "start": "683880",
    "end": "689220"
  },
  {
    "text": "typically Exposed on the system and it also had csrf protection meaning",
    "start": "689220",
    "end": "694740"
  },
  {
    "text": "an attacker couldn't use it in a client-side style attack they couldn't deliver it via VIA an email or anything",
    "start": "694740",
    "end": "700560"
  },
  {
    "text": "like that they actually needed to exploit it from client to server okay so they needed to have credentials",
    "start": "700560",
    "end": "706380"
  },
  {
    "text": "essentially foreign very simply VMware built a a class",
    "start": "706380",
    "end": "714480"
  },
  {
    "text": "called input validation utils and had a method inside called is valid San and",
    "start": "714480",
    "end": "719880"
  },
  {
    "text": "they just did a a white list or allow list check using regex string which was",
    "start": "719880",
    "end": "726180"
  },
  {
    "text": "pretty strong strong enough to stop the attack so let's have a look at a Target",
    "start": "726180",
    "end": "731880"
  },
  {
    "text": "selection and vulnerability discovery okay so as you can imagine I found VMware",
    "start": "731880",
    "end": "739079"
  },
  {
    "text": "workspace one quite interesting since it had that externally that vulnerability",
    "start": "739079",
    "end": "744360"
  },
  {
    "text": "from 2020 that was uh exploded in the wild and it also had a history of no",
    "start": "744360",
    "end": "749760"
  },
  {
    "text": "pre-authenticated RCU so this made it super interesting for me it had a single point of failure for a system it had the same complex protocols",
    "start": "749760",
    "end": "757079"
  },
  {
    "text": "or web protocols inside the system and uh they had a lot of technical debt",
    "start": "757079",
    "end": "762779"
  },
  {
    "text": "um primarily from try Cipher so the software was originally developed by try Cipher well before 2010 and VMware came",
    "start": "762779",
    "end": "769680"
  },
  {
    "text": "along and bought it in 2010. so it had some some technical debt there as well",
    "start": "769680",
    "end": "776180"
  },
  {
    "text": "so let's have a look at how I discovered uh 20 22 22 954 it was quite interesting",
    "start": "776579",
    "end": "782399"
  },
  {
    "text": "I was testing one of the API endpoints and just using some semicolons and I got thrown a 500 error and as a",
    "start": "782399",
    "end": "790560"
  },
  {
    "text": "regular pen tester I thought that was quite interesting um so I wanted to dig further",
    "start": "790560",
    "end": "795720"
  },
  {
    "text": "and just looking at the the return response from the server I got this stack trace and this error message uh",
    "start": "795720",
    "end": "802560"
  },
  {
    "text": "saying he's in a isn't a valve it's is sync inside of this template custom error",
    "start": "802560",
    "end": "808639"
  },
  {
    "text": "and we have a stack Trace there and it's mentioning free marker and so",
    "start": "808639",
    "end": "814139"
  },
  {
    "text": "I put two or two together and I realized I think I got a template injection here I'd never looked at template injection",
    "start": "814139",
    "end": "819779"
  },
  {
    "text": "before so I thought that was quite interesting um and the real error came down to using",
    "start": "819779",
    "end": "825959"
  },
  {
    "text": "a valve inside of the custom error.stl script um and potentially attack controlled",
    "start": "825959",
    "end": "832860"
  },
  {
    "text": "data can land into that into that uh evolve there",
    "start": "832860",
    "end": "837920"
  },
  {
    "text": "so going through spring a little bit stepping back from a little bit and thinking well how is this manifested how",
    "start": "838380",
    "end": "844320"
  },
  {
    "text": "is this error generated I decided to look at how spring handles errors all",
    "start": "844320",
    "end": "849360"
  },
  {
    "text": "right and I found out that spring allow a developer to map slash error and set",
    "start": "849360",
    "end": "855300"
  },
  {
    "text": "that as the default error Handler so anytime an exception is thrown in the application it will jump to slash error",
    "start": "855300",
    "end": "861120"
  },
  {
    "text": "uh controller the Handler inside of a controller and it will try to attempt to",
    "start": "861120",
    "end": "866639"
  },
  {
    "text": "handle that error gracefully right and looking at the code I found that UI uh",
    "start": "866639",
    "end": "871800"
  },
  {
    "text": "the class UI error controller had a mapping for slash error so I set a breakpoint on there and I saw that it",
    "start": "871800",
    "end": "878579"
  },
  {
    "text": "reached a couple of different functions it first reached the get error page",
    "start": "878579",
    "end": "884040"
  },
  {
    "text": "function and then eventually reached handle generic error and then that handle generic error eventually returned the",
    "start": "884040",
    "end": "891779"
  },
  {
    "text": "custom error.ftl's page and inside of that pay before it returns",
    "start": "891779",
    "end": "896880"
  },
  {
    "text": "that page it sets the the error object with the error message which potentially controlled out contained our injected",
    "start": "896880",
    "end": "904560"
  },
  {
    "text": "string so I set the breakpoint on the slash error Handler and I knew the error",
    "start": "904560",
    "end": "911220"
  },
  {
    "text": "message that I was hitting right I I did my semicolon I saw the error message and I thought well how am I going to",
    "start": "911220",
    "end": "918540"
  },
  {
    "text": "find out where this error message is right where is this coming from so naturally I decided to search the system or the code for that exception string",
    "start": "918540",
    "end": "925920"
  },
  {
    "text": "all right and eventually I came across some interesting code inside of the spring",
    "start": "925920",
    "end": "931079"
  },
  {
    "text": "core I discovered that inside of our spring core within version",
    "start": "931079",
    "end": "937100"
  },
  {
    "text": "4.2.4 they enable by default a strict HP firewall and this is more or less like",
    "start": "937100",
    "end": "943800"
  },
  {
    "text": "an internal web application firewall internal wef inside of the spring framework and they check for a",
    "start": "943800",
    "end": "950040"
  },
  {
    "text": "particular malicious strings inside of URL request particular dangerous parameters being passed and things like",
    "start": "950040",
    "end": "956519"
  },
  {
    "text": "that and it's more or less a kind of glorified denialists right and that they",
    "start": "956519",
    "end": "962339"
  },
  {
    "text": "assume that developers are not going to need a semicolon not going to need specific characters encoded and things",
    "start": "962339",
    "end": "967920"
  },
  {
    "text": "like that and we saw that it's sure enough it's hitting this exception message and it's",
    "start": "967920",
    "end": "973680"
  },
  {
    "text": "the request was rejected because blah blah blah and it was the same error message I was getting back when triggering the bug",
    "start": "973680",
    "end": "980959"
  },
  {
    "text": "so I had to step back a little bit I had to give it some time and let this sink I I decided to do some Google searching",
    "start": "981839",
    "end": "987540"
  },
  {
    "text": "and I found this stack Overflow post that explaining the issue and it really came down to before uh free marker",
    "start": "987540",
    "end": "994199"
  },
  {
    "text": "2.3.31 uh the developers would use either valve to pass a Json string",
    "start": "994199",
    "end": "1002360"
  },
  {
    "text": "and after 2.3.31 a free marker they exposed the method called evalve underscore Json and that was a safer way",
    "start": "1002360",
    "end": "1009500"
  },
  {
    "text": "to handle uh strings to pass it to Json but I looked further into this and the",
    "start": "1009500",
    "end": "1015380"
  },
  {
    "text": "the free market developers expected the developer to pass a Json object already",
    "start": "1015380",
    "end": "1020420"
  },
  {
    "text": "to a free market template so it didn't expect pre-processing of that of a",
    "start": "1020420",
    "end": "1025938"
  },
  {
    "text": "string and so developers kind of got confused and decided to use the valve and it led to several security issues",
    "start": "1025939",
    "end": "1033380"
  },
  {
    "text": "so thinking about this from a higher level point of view I I said well okay what do we have here we have a free",
    "start": "1033380",
    "end": "1039140"
  },
  {
    "text": "marker injection do we need to escape the free market sandbox that was the first question I",
    "start": "1039140",
    "end": "1044178"
  },
  {
    "text": "had the second question was can I find an exception message that I can partially control an exception",
    "start": "1044179",
    "end": "1051080"
  },
  {
    "text": "and inject attack Control Data into that to trigger the injection correctly okay",
    "start": "1051080",
    "end": "1056660"
  },
  {
    "text": "and in Spring MBC the configuration is typically done inside of the Java code itself not inside of XML files and in",
    "start": "1056660",
    "end": "1063860"
  },
  {
    "text": "this particular case it was inside of the web config class and inside of the web config class they had the following",
    "start": "1063860",
    "end": "1070340"
  },
  {
    "text": "code to Define how to create the free market Factory and all is good they're",
    "start": "1070340",
    "end": "1075799"
  },
  {
    "text": "using free market default and freaker Market default user sandbox so that's pretty good but they've missed a couple",
    "start": "1075799",
    "end": "1081679"
  },
  {
    "text": "of things all right they first of all they forgot to uh disable the debug and",
    "start": "1081679",
    "end": "1089360"
  },
  {
    "text": "that's why we got our debug message back for the free market stack trace and and that kind of thing so if we were to disable that and by default debug is on",
    "start": "1089360",
    "end": "1096559"
  },
  {
    "text": "and they also forgot to disable the set new built-in resolver class resolver so essentially an",
    "start": "1096559",
    "end": "1103340"
  },
  {
    "text": "attacker could Supply a class and that could be instantiated and used as an attack and there's a famous class inside",
    "start": "1103340",
    "end": "1109460"
  },
  {
    "text": "of free marker that you could use to gain RCU if you instantiate it and pass a string to it",
    "start": "1109460",
    "end": "1116320"
  },
  {
    "text": "okay so we don't have to bypass the sandbox we've got the new built-in available to us let's look at the next",
    "start": "1116360",
    "end": "1121820"
  },
  {
    "text": "issue let's try to find an exception right that we can inject into",
    "start": "1121820",
    "end": "1126860"
  },
  {
    "text": "I decided to look at spring interceptors because the interceptors are a code pattern that happened before controller",
    "start": "1126860",
    "end": "1133100"
  },
  {
    "text": "controller code and so essentially interceptors are used for things like authentication csrf token checks uh",
    "start": "1133100",
    "end": "1139640"
  },
  {
    "text": "cookie checks and things like that and so I decided to look at the interceptors to see what are they doing and I knew",
    "start": "1139640",
    "end": "1144919"
  },
  {
    "text": "that was pre-authenticated code and that was that was interesting for me so again I went back to my web config",
    "start": "1144919",
    "end": "1151160"
  },
  {
    "text": "class and I had a look at how they're defining all the interceptors for that particular application and I started going through the interceptors one by",
    "start": "1151160",
    "end": "1157700"
  },
  {
    "text": "one and I got to the third one which was auth context population interceptor",
    "start": "1157700",
    "end": "1163520"
  },
  {
    "text": "and they took in two get parameters right the device you did and the device type and that was passed",
    "start": "1163520",
    "end": "1171140"
  },
  {
    "text": "to an auth context instance a North a North context uh Builder instance and",
    "start": "1171140",
    "end": "1177020"
  },
  {
    "text": "then of course build was called on that on that code and then those values that",
    "start": "1177020",
    "end": "1182720"
  },
  {
    "text": "device ID and device type were passed into directly to properties on that object",
    "start": "1182720",
    "end": "1187880"
  },
  {
    "text": "and then if the request wasn't valid then it would throw an exception message with those values device type and device",
    "start": "1187880",
    "end": "1195380"
  },
  {
    "text": "ID right so now we had we had everything we needed we had all the ingredients",
    "start": "1195380",
    "end": "1203260"
  },
  {
    "text": "and we have a single get request for payload delivery it works on default installation it's pre-authenticated and worked against",
    "start": "1203360",
    "end": "1210020"
  },
  {
    "text": "even vmware's cloud and the exploit looks as simple as that",
    "start": "1210020",
    "end": "1217640"
  },
  {
    "text": "one get request and I got RCA on on VMware workspace one and this vulnerability was actually",
    "start": "1217640",
    "end": "1224960"
  },
  {
    "text": "exploited in the wild I tried to keep the details quite private but uh reverses and and researchers pulled",
    "start": "1224960",
    "end": "1231740"
  },
  {
    "text": "apart the application found the patch and figured out what the issue was quite quickly and and released an exploit for",
    "start": "1231740",
    "end": "1236780"
  },
  {
    "text": "that so I got exploited in the wild unfortunately so let's have a look at another exploit",
    "start": "1236780",
    "end": "1242299"
  },
  {
    "text": "that I I developed uh this was uh hekate uh hekate stands for the Triple moon goddess or and there was three bugs used",
    "start": "1242299",
    "end": "1249320"
  },
  {
    "text": "in the next exploits change so I thought that was a good name um and we'll there's actually two",
    "start": "1249320",
    "end": "1254720"
  },
  {
    "text": "components to this exploit there's a client-side component and a server side but I just wanted to focus on the server",
    "start": "1254720",
    "end": "1260480"
  },
  {
    "text": "side for this presentation since I don't have too much time but it was this client side was quite interesting and if you wanted to have a look further uh the",
    "start": "1260480",
    "end": "1266840"
  },
  {
    "text": "code is available on GitHub after the presentation so the first vulnerability was the axis",
    "start": "1266840",
    "end": "1272480"
  },
  {
    "text": "control service authentication bypass and this was quite interesting this was the way they implemented or2 was a",
    "start": "1272480",
    "end": "1280220"
  },
  {
    "text": "little bit incorrect it was off the specification and they had two different classes so there was two different vulnerabilities vulnerable patterns but",
    "start": "1280220",
    "end": "1287900"
  },
  {
    "text": "they've essentially exposed two methods generate activation token and activate ol2 client",
    "start": "1287900",
    "end": "1293919"
  },
  {
    "text": "and uh they allowed an attacker to use an existing or2 client to obtain a",
    "start": "1293919",
    "end": "1300500"
  },
  {
    "text": "client secret or potentially a grant right so the way that works uh and oh if we",
    "start": "1300500",
    "end": "1307700"
  },
  {
    "text": "have a look at the system when I look logged in and had a little play around with it I actually found there was two defaults ol2 clients and they had the",
    "start": "1307700",
    "end": "1314900"
  },
  {
    "text": "scope of system and admin so it's like having hard-coded credentials in the system in essence",
    "start": "1314900",
    "end": "1322159"
  },
  {
    "text": "so let's have a look at how the attacks worked first the attacker makes a request to generate activation token",
    "start": "1322159",
    "end": "1327500"
  },
  {
    "text": "endpoint and passes in one of the default or2 clients in this case it was ACS",
    "start": "1327500",
    "end": "1333440"
  },
  {
    "text": "the system returns with an activation token right then the attacker sends that activation",
    "start": "1333440",
    "end": "1340340"
  },
  {
    "text": "token to the activate endpoint and then of course the system returns back a client ID and the client Secret",
    "start": "1340340",
    "end": "1348440"
  },
  {
    "text": "completely unauthenticated this is just assessing the system and we get back a client Secret",
    "start": "1348440",
    "end": "1355059"
  },
  {
    "text": "so essentially what we have now is the ability to bypass this client side action of Old 2 and directly access and",
    "start": "1355220",
    "end": "1363679"
  },
  {
    "text": "send a grant request a client credentials Grant request to the system to then say okay now give me back a",
    "start": "1363679",
    "end": "1370220"
  },
  {
    "text": "token because I got I got the grant here I got the client secret give me back an access token and now I can now use that",
    "start": "1370220",
    "end": "1375679"
  },
  {
    "text": "access token to access any of the resources on the system as system or admin scope level",
    "start": "1375679",
    "end": "1381320"
  },
  {
    "text": "okay this was a fun bug because it completely required no outbound access to the",
    "start": "1381320",
    "end": "1386960"
  },
  {
    "text": "network no interaction with other attacker systems it was completely all built in within the within the framework",
    "start": "1386960",
    "end": "1395240"
  },
  {
    "text": "so to understand the next vulnerability let's have a little bit of a look at Java database connectivity or jdbc",
    "start": "1395240",
    "end": "1402620"
  },
  {
    "text": "Java provides a level of abstraction for developers to interface with database Technologies in order to encourage",
    "start": "1402620",
    "end": "1408260"
  },
  {
    "text": "cross-platform development the idea is that the Java developer doesn't really need to know what",
    "start": "1408260",
    "end": "1413419"
  },
  {
    "text": "database technology the application uses if they adhere to the jsr 221",
    "start": "1413419",
    "end": "1419000"
  },
  {
    "text": "specification right these drivers implement the java.sql driver interface",
    "start": "1419000",
    "end": "1426740"
  },
  {
    "text": "and the issue really here is that the drivers provide a very large attack surface for any jwc injection endpoint",
    "start": "1426740",
    "end": "1433460"
  },
  {
    "text": "okay so before we get into the bug let's have a quick look at this particular class",
    "start": "1433460",
    "end": "1439880"
  },
  {
    "text": "this was the DB connection check controller and this actually had implemented the ignore a csrf handling",
    "start": "1439880",
    "end": "1447559"
  },
  {
    "text": "interface so essentially any request to this controller could have been done from a from client-side as well from a",
    "start": "1447559",
    "end": "1453919"
  },
  {
    "text": "client-side attack so that was part of the hikate exploit and inside of this controller they had a",
    "start": "1453919",
    "end": "1460460"
  },
  {
    "text": "method mapped called dbe check and this passed in a jwc URL That Was Then passed",
    "start": "1460460",
    "end": "1466280"
  },
  {
    "text": "to the the check connection method and following several layers of abstraction we eventually get to drive",
    "start": "1466280",
    "end": "1472880"
  },
  {
    "text": "and manager.getconnection which is the actual sync for jwc injection using the",
    "start": "1472880",
    "end": "1477919"
  },
  {
    "text": "attack controller jdbc URL",
    "start": "1477919",
    "end": "1482559"
  },
  {
    "text": "now there are several ways to exploit jwc injections that are publicly available as it currently stands attacks",
    "start": "1483620",
    "end": "1489919"
  },
  {
    "text": "against mice color driver postgres H2 driver you've got db2",
    "start": "1489919",
    "end": "1495799"
  },
  {
    "text": "Apache Derby and even my scroll fabric drivers okay not all of them achieve rce but most of them do",
    "start": "1495799",
    "end": "1503480"
  },
  {
    "text": "the interesting one for me was the MySQL driver and the postgres because these were the drivers that were",
    "start": "1503480",
    "end": "1509360"
  },
  {
    "text": "installed on the system right but it was interesting to note that the actual system used a posca's database under the",
    "start": "1509360",
    "end": "1515240"
  },
  {
    "text": "hood so the the MySQL driver was technical debt right sitting in the system not being utilized at all",
    "start": "1515240",
    "end": "1523159"
  },
  {
    "text": "let's have a look at a sample request so if I was attacking the MySQL using",
    "start": "1523159",
    "end": "1529039"
  },
  {
    "text": "the MySQL driver to attack the jwc injection it would be an attack like this first we bypass the authentication and grab the",
    "start": "1529039",
    "end": "1535220"
  },
  {
    "text": "pages NN cookie and then we make a request to that endpoint DB check we pass in the jwc",
    "start": "1535220",
    "end": "1542419"
  },
  {
    "text": "string pointing it to an attacker control MySQL server and that attack controlled MySQL server will deliver a",
    "start": "1542419",
    "end": "1548840"
  },
  {
    "text": "Java object back and then the system would deserialize that Java object hopefully achieving",
    "start": "1548840",
    "end": "1555140"
  },
  {
    "text": "remote code execution and in terms of the postgres uh",
    "start": "1555140",
    "end": "1560419"
  },
  {
    "text": "injection attack I did this was a little bit trickier because it didn't actually require a valid connect back to an",
    "start": "1560419",
    "end": "1567380"
  },
  {
    "text": "attack controlled server for the the postgres driver but it did require a connect back if we",
    "start": "1567380",
    "end": "1573740"
  },
  {
    "text": "were exploiting the soccer Factory technique of um unsafe unmarshalling and what that",
    "start": "1573740",
    "end": "1578779"
  },
  {
    "text": "requires is that an attacker Supply and arbitrary class and that class is instantiated with a single argument",
    "start": "1578779",
    "end": "1584360"
  },
  {
    "text": "parameter a string argument and in the context of spring they have uh they have",
    "start": "1584360",
    "end": "1590419"
  },
  {
    "text": "application contact classes context classes and these classes can um unmarshall essentially",
    "start": "1590419",
    "end": "1598640"
  },
  {
    "text": "um and and xml's payload that can be supplied over a URL okay so let's have a",
    "start": "1598640",
    "end": "1604159"
  },
  {
    "text": "look at the payload something as simple as this you pass in process Builder",
    "start": "1604159",
    "end": "1610760"
  },
  {
    "text": "and you set the initiate method to start and you say start and execute this",
    "start": "1610760",
    "end": "1616640"
  },
  {
    "text": "string and the interesting point to make is this is not even a bean class and yet it still works",
    "start": "1616640",
    "end": "1622940"
  },
  {
    "text": "all right this is not a valid job of being at all process Builder another point to make is that",
    "start": "1622940",
    "end": "1629600"
  },
  {
    "text": "unfortunately this attack required an outbound network access to an attacker's machine and also the MySQL driver acquired an",
    "start": "1629600",
    "end": "1636320"
  },
  {
    "text": "outbound attack to us an attacker's machine so I was sort of scratching my head I knew where the authentication bypass",
    "start": "1636320",
    "end": "1642200"
  },
  {
    "text": "didn't require any outbound access and I was kind of like you know how can I get uh an attack like",
    "start": "1642200",
    "end": "1649279"
  },
  {
    "text": "this without network outbound access especially because I wanted to Target the cloud right and I had the the common",
    "start": "1649279",
    "end": "1655760"
  },
  {
    "text": "beans u201 Gadget working from yss serial and I was like okay this is this is great I don't even have to come up with a Java Gadget here but it required",
    "start": "1655760",
    "end": "1663620"
  },
  {
    "text": "uh outbound network access and I was kind of thinking how can I do better I decided to look into the code a little",
    "start": "1663620",
    "end": "1669919"
  },
  {
    "text": "bit more and I found a particular class called license checker and that took a",
    "start": "1669919",
    "end": "1675020"
  },
  {
    "text": "single string argument in the Constructor and that was that string was passed to",
    "start": "1675020",
    "end": "1680179"
  },
  {
    "text": "set State inside of the license handle instance",
    "start": "1680179",
    "end": "1685778"
  },
  {
    "text": "and that essentially was base64 decoded and passed it this realize as an array",
    "start": "1686900",
    "end": "1692120"
  },
  {
    "text": "as a byte array and integer is read from there and if the integer matches a specific value",
    "start": "1692120",
    "end": "1698299"
  },
  {
    "text": "then it's past deserialize underscore V2 and then of course that byte array is",
    "start": "1698299",
    "end": "1704539"
  },
  {
    "text": "then decrypted and deserialized under the hood so it was very nice no outbound",
    "start": "1704539",
    "end": "1709700"
  },
  {
    "text": "network access required and essentially we had our attack we had our authentication bypass we could point it",
    "start": "1709700",
    "end": "1715700"
  },
  {
    "text": "to the postgres uh use the postgres driver pointed to a server that doesn't even exist on any network or anything",
    "start": "1715700",
    "end": "1722000"
  },
  {
    "text": "and use the license Checker class and pass in the the uh encrypted string",
    "start": "1722000",
    "end": "1728840"
  },
  {
    "text": "that would be deserialized on the server right",
    "start": "1728840",
    "end": "1733940"
  },
  {
    "text": "so yeah we can do better if you keep trying you know got very lucky we have a",
    "start": "1733940",
    "end": "1740240"
  },
  {
    "text": "little problem we're executing arbitrary code AS Horizon user and this is an appliance and I was testing and I said I",
    "start": "1740240",
    "end": "1746720"
  },
  {
    "text": "thought to myself look I want to try to get root access you know it's not enough to just get the Horizon user code execution I said let's try to get root",
    "start": "1746720",
    "end": "1753620"
  },
  {
    "text": "access so one of the first things I do when I look at appliances I look at the sudowiz",
    "start": "1753620",
    "end": "1759679"
  },
  {
    "text": "file right and look at well what scripts or things can I execute as the Horizon user and it turns out there was",
    "start": "1759679",
    "end": "1766039"
  },
  {
    "text": "two specific scripts well there was lots of scripts I could execute but two that were interesting to me at the time",
    "start": "1766039",
    "end": "1771200"
  },
  {
    "text": "it was The Gather config and the published CA so the first one published CA cert took",
    "start": "1771200",
    "end": "1778940"
  },
  {
    "text": "an input file and made it readable and writable by the owner and this essentially allowed me to be",
    "start": "1778940",
    "end": "1784580"
  },
  {
    "text": "able to leak uh the ETC Shadow file for example I could read arbitrary root owned files and things like that",
    "start": "1784580",
    "end": "1791240"
  },
  {
    "text": "but I needed a bit more I needed to figure out what else I can do but it allowed me readable and",
    "start": "1791240",
    "end": "1797059"
  },
  {
    "text": "writerable by the owner so I then found that the gather config script allowed me to take ownership of a root own file so",
    "start": "1797059",
    "end": "1804559"
  },
  {
    "text": "I could just Sim link debug config.txt and point it to a root owned file",
    "start": "1804559",
    "end": "1809600"
  },
  {
    "text": "and we were pretty much done at that point so in this screenshot here we have",
    "start": "1809600",
    "end": "1816380"
  },
  {
    "text": "showing a root own file which is one of the scripts that was part of the sudowiz file",
    "start": "1816380",
    "end": "1822940"
  },
  {
    "text": "and show the permissions here as Horizon so we gain root access by leveraging the",
    "start": "1823279",
    "end": "1828440"
  },
  {
    "text": "the exploit but the idea here is it changes the ownership of that particular file and changes it to be writable and",
    "start": "1828440",
    "end": "1835279"
  },
  {
    "text": "then we edit the file as as a low privilege user and just execute it as sudo we get our root shell and you can",
    "start": "1835279",
    "end": "1842299"
  },
  {
    "text": "see that that script is actually in the pseudo is there as well all right",
    "start": "1842299",
    "end": "1847820"
  },
  {
    "text": "so now let's have a little demo time we'll see how we go uh you see here",
    "start": "1847820",
    "end": "1856360"
  },
  {
    "text": "you guys should be able to see the screen now just going to make sure the system the target system is up",
    "start": "1856880",
    "end": "1862279"
  },
  {
    "text": "so I'm going to run my POC now first I'm going to grab my IP",
    "start": "1862279",
    "end": "1868658"
  },
  {
    "text": "okay let me see here",
    "start": "1869299",
    "end": "1876559"
  },
  {
    "text": "okay and I'll just change this to 131 and hopefully if everything's",
    "start": "1876559",
    "end": "1884000"
  },
  {
    "text": "right we bypass authentication trigger the deserialization wait a couple of seconds and we should have our root",
    "start": "1884000",
    "end": "1890299"
  },
  {
    "text": "shell pre-authenticated [Applause] put the command wrong there",
    "start": "1890299",
    "end": "1897440"
  },
  {
    "text": "hey all right let's go back to the slides",
    "start": "1897440",
    "end": "1902140"
  },
  {
    "text": "okay so hekate results um no outbound network access required",
    "start": "1905779",
    "end": "1912380"
  },
  {
    "text": "Works in default installation pre-authenticated against the client and server achieves root access works on VMware",
    "start": "1912380",
    "end": "1919520"
  },
  {
    "text": "cloud and exploit even cleans up after it modifies the sudo script right",
    "start": "1919520",
    "end": "1925940"
  },
  {
    "text": "conclusions and takeaway for the defender um don't allow your organization to have",
    "start": "1925940",
    "end": "1931940"
  },
  {
    "text": "a single point of failure right so having a system like an IAM Solution on your perimeter is really kind of a",
    "start": "1931940",
    "end": "1937640"
  },
  {
    "text": "single point of failure if that system is accessed or penetrated and gained to taken over then you have a serious",
    "start": "1937640",
    "end": "1943940"
  },
  {
    "text": "problem in your hands don't deviate from the or2 spec in fact don't deviate from any complex protocol stack",
    "start": "1943940",
    "end": "1950360"
  },
  {
    "text": "um especially web facing and disable the new built-in when implementing free",
    "start": "1950360",
    "end": "1955399"
  },
  {
    "text": "marker in fact just watch out for unsafe defaults when implementing third-party libraries um templating engines are complex you",
    "start": "1955399",
    "end": "1962600"
  },
  {
    "text": "know and even though they might enable a Sandbox there might be some other issues that you want to check that could be",
    "start": "1962600",
    "end": "1967940"
  },
  {
    "text": "insecure for the attacker you really want to always check the implementation for protocols or mistakes",
    "start": "1967940",
    "end": "1974000"
  },
  {
    "text": "right you always want to want to double check how they implemented a particular protocol that could be something just",
    "start": "1974000",
    "end": "1979640"
  },
  {
    "text": "slightly off and enough for you to take over a system always try to change vulnerabilities together and Primitives together even if",
    "start": "1979640",
    "end": "1985940"
  },
  {
    "text": "it's just a little vulnerability here and a little vulnerability there put it together and see what you can how far you can push it",
    "start": "1985940",
    "end": "1991340"
  },
  {
    "text": "and make giving up harder than giving in one of the things I see often is is people are looking at systems and they",
    "start": "1991340",
    "end": "1997220"
  },
  {
    "text": "and they just they're close to finishing an exploit chain or they're close to finishing something and then they just I can't quite solve it and just leave it",
    "start": "1997220",
    "end": "2003700"
  },
  {
    "text": "right but don't give up keep keep working at it and there's some references there and I",
    "start": "2003700",
    "end": "2010720"
  },
  {
    "text": "will release the code and a blog post after this presentation with a little bit more detail surrounding the",
    "start": "2010720",
    "end": "2016600"
  },
  {
    "text": "vulnerabilities for example about how the or2 clients are generated and things like that okay any questions and thank",
    "start": "2016600",
    "end": "2022360"
  },
  {
    "text": "you for attending my talk [Music]",
    "start": "2022360",
    "end": "2027760"
  },
  {
    "text": "foreign [Music]",
    "start": "2027760",
    "end": "2035640"
  }
]