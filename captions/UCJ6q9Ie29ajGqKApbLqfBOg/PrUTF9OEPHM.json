[
  {
    "text": "welcome to black hat briefings held November 21st through the 22nd 2001 in Amsterdam this is videotape number V10",
    "start": "23279",
    "end": "31200"
  },
  {
    "text": "injecto modifying and spying on running processes under",
    "start": "31200",
    "end": "36559"
  },
  {
    "text": "Linux okay we're going to have to get started because uh the speech it runs long so just want to make sure that we",
    "start": "37879",
    "end": "44360"
  },
  {
    "text": "get through as much of it as we possibly can um okay so my name is Sean Claus I work",
    "start": "44360",
    "end": "51800"
  },
  {
    "text": "for a small Security consultancy in Sydney Australia called secure reality",
    "start": "51800",
    "end": "56920"
  },
  {
    "text": "and uh and I'm here today to talk about a couple of things actually I'm going to speak about a particular tool which I've",
    "start": "56920",
    "end": "62559"
  },
  {
    "text": "written called injecto um but I'm also going to speak more generally about various ways of modifying and spying on",
    "start": "62559",
    "end": "68840"
  },
  {
    "text": "processes running just generally under Unix but injecto itself at this stage runs on Linux and Solaris which is why",
    "start": "68840",
    "end": "75600"
  },
  {
    "text": "the speech is subtitled the way it is um so uh what are we going to talk about in",
    "start": "75600",
    "end": "82040"
  },
  {
    "text": "the speech um in part one uh we're going to firstly talk about a tool called INB",
    "start": "82040",
    "end": "87240"
  },
  {
    "text": "which some of you might be familiar with which works under windows uh then we're going to speak about inject what inject so is and why it's",
    "start": "87240",
    "end": "93920"
  },
  {
    "text": "vaguely related to INB uh we're going to talk quite a bit about elf the elf file format the binary file format uh then",
    "start": "93920",
    "end": "100840"
  },
  {
    "text": "we're going to speak about program and process modification techniques under Unix that is various techniques which",
    "start": "100840",
    "end": "106119"
  },
  {
    "text": "are known which are aren't well which are like the forefathers of",
    "start": "106119",
    "end": "111600"
  },
  {
    "text": "injecto um and then in part two after the break we're going to speak about the",
    "start": "111600",
    "end": "116920"
  },
  {
    "text": "differences between injecto and uh INB how the two work the the conceptual similarities and the implementation",
    "start": "116920",
    "end": "124000"
  },
  {
    "text": "differences then we're going to speak about the details of how injecto works the tool inject so uh we're going to",
    "start": "124000",
    "end": "130319"
  },
  {
    "text": "speak about injecting Dynamic function sorry intercepting Dynamic function calls which is the main use well which",
    "start": "130319",
    "end": "135519"
  },
  {
    "text": "is one of the cool features of something you can do with inject so then we're going to speak really shortly about defending against inject so which is not",
    "start": "135519",
    "end": "142200"
  },
  {
    "text": "exactly difficult and then we're going to speak about the future of inject so and this these sort of techniques anyway",
    "start": "142200",
    "end": "149360"
  },
  {
    "text": "um before I actually start up uh because the speech does run quite a bit long I",
    "start": "149360",
    "end": "155200"
  },
  {
    "text": "it would be really good if I could get an understanding of where you guys are and what sort of stuff you guys have done so I don't waste your time talking",
    "start": "155200",
    "end": "161200"
  },
  {
    "text": "about stuff you already know um who he is really familiar with unix's okay that's basically everyone",
    "start": "161200",
    "end": "167879"
  },
  {
    "text": "who here um has done systems programming under C or something like that under Unix okay who has an understanding of",
    "start": "167879",
    "end": "175000"
  },
  {
    "text": "Elf an internal understanding of the elf file format okay cool um so yes I'm",
    "start": "175000",
    "end": "181280"
  },
  {
    "text": "going to have to do most of it if various sections are boring you or you think they're obvious or whatever please say so or I'm not speaking loud enough",
    "start": "181280",
    "end": "187560"
  },
  {
    "text": "or whatever um because I will be forced to rush through various sections of it so that I can so that I can get it all",
    "start": "187560",
    "end": "194040"
  },
  {
    "text": "done but uh okay so uh what's INB is the",
    "start": "194040",
    "end": "199120"
  },
  {
    "text": "first question well INB was actually a tool which was developed in the windows system systems journal in 1994 it's a",
    "start": "199120",
    "end": "204760"
  },
  {
    "text": "very old bit of technology and it was written by a guy named Jeffrey RoR who some of you might be famili with he's a",
    "start": "204760",
    "end": "211360"
  },
  {
    "text": "Windows n Guru um and has been around for a very long time uh and basically what inel does is is a is a process",
    "start": "211360",
    "end": "218400"
  },
  {
    "text": "which you can use to inject the dll a dynamic link Library a Windows Dynamic link Library into another process under",
    "start": "218400",
    "end": "224840"
  },
  {
    "text": "Windows uh all the versions of Windows the injection of the dll has no effect on the target process that is the target",
    "start": "224840",
    "end": "230799"
  },
  {
    "text": "process continues uh running as normal but the dll can do whatever it wants once it's inside the remote processes",
    "start": "230799",
    "end": "236480"
  },
  {
    "text": "address space and executing inside the remote processor space uh and the dll can also be passed",
    "start": "236480",
    "end": "241920"
  },
  {
    "text": "information about the target process so that it can manipulate the target process in various ways and do various",
    "start": "241920",
    "end": "247799"
  },
  {
    "text": "interesting things um so the the some things to note about INB uh the process is extremely",
    "start": "247799",
    "end": "254560"
  },
  {
    "text": "trivial under windows in fact the entire process is complet in well less than 50 lines of code um but it's a very",
    "start": "254560",
    "end": "261160"
  },
  {
    "text": "impressive feat because it allows you to do um a hell of a lot of lowlevel systems Programming type stuff under",
    "start": "261160",
    "end": "267759"
  },
  {
    "text": "Windows um the is very widely used as you might imagine it's used in uh tools",
    "start": "267759",
    "end": "273320"
  },
  {
    "text": "you might be familiar with include PW dump versions 2 and 3 using J dll to get inside a system process and read",
    "start": "273320",
    "end": "279479"
  },
  {
    "text": "information uh get admin that famous uh old exploit for Windows NT uh used this",
    "start": "279479",
    "end": "285800"
  },
  {
    "text": "technique fport which I believe has been renamed since but that's foundstone tool for checking which processors are",
    "start": "285800",
    "end": "291639"
  },
  {
    "text": "listening on which ports and basically every Spy application you've ever heard of if you're familiar with Windows systems programming you you would be",
    "start": "291639",
    "end": "297759"
  },
  {
    "text": "familiar with uh the various spy applications and they basically all use this technique uh the basic process which",
    "start": "297759",
    "end": "304520"
  },
  {
    "text": "inel abusers under Windows NT is that uh is said they find the address of a certain system function which is used to",
    "start": "304520",
    "end": "310960"
  },
  {
    "text": "open a dll there's a function provided in Windows NT which you can call with the name of a dll and it will open the",
    "start": "310960",
    "end": "316160"
  },
  {
    "text": "dll and map it into your address space that they then attach to the process as a debugger um allocate memory inside the",
    "start": "316160",
    "end": "323680"
  },
  {
    "text": "remote process um copy in a function from their own address Bas to the remote address BAS which will call um the dll",
    "start": "323680",
    "end": "331319"
  },
  {
    "text": "loading the dll loading system function uh to load a particular dll then then",
    "start": "331319",
    "end": "336639"
  },
  {
    "text": "they create a thread in which start inside the remote process which starts running at the injected function and",
    "start": "336639",
    "end": "342840"
  },
  {
    "text": "that function then loads the DL so basically you copy code into the remote process which calls the normal load load",
    "start": "342840",
    "end": "349000"
  },
  {
    "text": "Library function um uh Step One is finding it's finding the address of the of the system",
    "start": "349000",
    "end": "355720"
  },
  {
    "text": "function provided to load libraries um uh BAS basically and then uh the DLS",
    "start": "355720",
    "end": "362120"
  },
  {
    "text": "under windows are dynamically loaded using a function called load Library a um the the the function which we which",
    "start": "362120",
    "end": "368440"
  },
  {
    "text": "uh INB copies into the remote process needs to know the address of this load library to call it to get the dll loaded",
    "start": "368440",
    "end": "375240"
  },
  {
    "text": "um so so the first step is finding the address of this function um and obviously the copied function can't rely",
    "start": "375240",
    "end": "381160"
  },
  {
    "text": "on uh like it can't be compiled in to just call load Library a it has to know it know it at runtime where load Library",
    "start": "381160",
    "end": "387800"
  },
  {
    "text": "a is um load Library a is in kernel 32.dll which is one of the main dlls of",
    "start": "387800",
    "end": "393720"
  },
  {
    "text": "Windows probably the main dll of Windows all windows applications have kernel 32.dll mapped into their address bace",
    "start": "393720",
    "end": "399840"
  },
  {
    "text": "and it's also safe to assume that all um Windows 32 functions have this dll",
    "start": "399840",
    "end": "405000"
  },
  {
    "text": "mapped at the same address so if you worked out if you work out the address of um load Library a in your process",
    "start": "405000",
    "end": "410639"
  },
  {
    "text": "it's going to be at the same place in the remote process which is which is what INB relies in relies on so INB get",
    "start": "410639",
    "end": "419400"
  },
  {
    "text": "loads up the library kernel 32 finds out the address of of the load Library a function inside its own process okay and",
    "start": "419400",
    "end": "426599"
  },
  {
    "text": "then it knows where the function is going to be inside the target process which it plans on injecting a dll",
    "start": "426599",
    "end": "433599"
  },
  {
    "text": "into um okay so that's step one um in step",
    "start": "438759",
    "end": "444639"
  },
  {
    "text": "two now that it knows the address of the of the function it's going to need to call inside the remote process process",
    "start": "444639",
    "end": "450039"
  },
  {
    "text": "it attaches to the process as a debugger which is obviously a trivial operation under basically every operating system",
    "start": "450039",
    "end": "455080"
  },
  {
    "text": "these days in code it's just open process uh with all privileges to do whatever you want to with the process",
    "start": "455080",
    "end": "461080"
  },
  {
    "text": "and you get a handle to the process um obviously this is a this is a restricted function and you need to have the SE",
    "start": "461080",
    "end": "466919"
  },
  {
    "text": "debug privilege to uh to debug a process which which is owned by another user or you can use it on any of the processes",
    "start": "466919",
    "end": "473240"
  },
  {
    "text": "which you own without any special privileges um in step three you you",
    "start": "473240",
    "end": "479400"
  },
  {
    "text": "allocate memory inside the remote process which is going to store the copied function this function which you're going to copy in um and the",
    "start": "479400",
    "end": "486479"
  },
  {
    "text": "arguments to the copied function because you need to provide some information to the function which you've copied in there about where load Library a is um",
    "start": "486479",
    "end": "494159"
  },
  {
    "text": "in code that's Windows is uh very helpful with this entire process um as we'll see particularly when we start",
    "start": "494159",
    "end": "500159"
  },
  {
    "text": "looking at the Unix side of things Windows is extremely helpful um you can actually pass in a you can actually ask",
    "start": "500159",
    "end": "505879"
  },
  {
    "text": "Windows n to allocate memory for you inside a remote process as long as you have a handle to that process so in this",
    "start": "505879",
    "end": "512599"
  },
  {
    "text": "case um we've just got uh virtual aloc X you pass in the handle of the process",
    "start": "512599",
    "end": "519159"
  },
  {
    "text": "you say how many bites you want to allocate inside the remote process and that you want the the memory to be executable and read writable so so we've",
    "start": "519159",
    "end": "526480"
  },
  {
    "text": "now got some space in which we can do work inside the remote process uh step four is we copy um the",
    "start": "526480",
    "end": "535160"
  },
  {
    "text": "function and its arguments into the process um so in code uh all we do is we",
    "start": "535160",
    "end": "540680"
  },
  {
    "text": "just uh is we is we choose an address inside our our process bace how much we want to copy and we choose an address",
    "start": "540680",
    "end": "547360"
  },
  {
    "text": "inside the remote process to copy it um so what we do is is uh INB has a",
    "start": "547360",
    "end": "552440"
  },
  {
    "text": "function inside it which uh which takes in an argument of load of where load Library a is and the name of a library",
    "start": "552440",
    "end": "558800"
  },
  {
    "text": "okay it takes this function and it copies this function from its address base into the remote address base uh and",
    "start": "558800",
    "end": "565079"
  },
  {
    "text": "this function then is coded inside the remote address Bas which can load a dll",
    "start": "565079",
    "end": "571120"
  },
  {
    "text": "uh in step five we we create a new thread in the remote process and we start it at the address of the injected",
    "start": "572000",
    "end": "577279"
  },
  {
    "text": "function so we've got this code inside the remote process now we need to start it to get the um to get the library",
    "start": "577279",
    "end": "583120"
  },
  {
    "text": "loaded by that code um and to do that all we do is we create a remote thread and again what we'll find is that uh",
    "start": "583120",
    "end": "589640"
  },
  {
    "text": "this is really trivial under Windows um because Windows helps you out an incredible amount here um all we have to",
    "start": "589640",
    "end": "596279"
  },
  {
    "text": "do is is we have to start this code and we have to pass in the address of the of a structure inside the process which we",
    "start": "596279",
    "end": "601880"
  },
  {
    "text": "put in there with the memory we allocated um and it contains information about where load Library a is um and the",
    "start": "601880",
    "end": "608120"
  },
  {
    "text": "dll name to be loaded so in code all we have to do is we can go Windows actually provides a function called create remote",
    "start": "608120",
    "end": "614600"
  },
  {
    "text": "thread and we can pass it a handle to a process and it will actually create a thread for us inside a remote process so",
    "start": "614600",
    "end": "622200"
  },
  {
    "text": "uh so it's creating creating a Windows NT thread inside this process and uh and it can start it at at any address you'd",
    "start": "622200",
    "end": "628880"
  },
  {
    "text": "like to at the address of any function you'd like to so we've injected a function so we start it there and then",
    "start": "628880",
    "end": "634320"
  },
  {
    "text": "we can also pass in the uh a pointer to the arguments which will be which will be the argument to the to the function",
    "start": "634320",
    "end": "640279"
  },
  {
    "text": "which is called when the thread is created so at that point um we're almost",
    "start": "640279",
    "end": "646880"
  },
  {
    "text": "done basically the the injected function is now running in a separate thread so it has no effect on any of the existing",
    "start": "646880",
    "end": "652519"
  },
  {
    "text": "process the process continues running um and the injected function is now executed and load Library is called by",
    "start": "652519",
    "end": "660200"
  },
  {
    "text": "the injected function um using the function pointer to load Library a and the dll name",
    "start": "660200",
    "end": "665639"
  },
  {
    "text": "arguments so that's it basically you've now in in Les well less than 50 lines of",
    "start": "665639",
    "end": "670880"
  },
  {
    "text": "code you've now injected a dll into a remote Windows NT process and obviously",
    "start": "670880",
    "end": "676040"
  },
  {
    "text": "the result of that is that um injecting a dll under Windows is easy it's short and it's",
    "start": "676040",
    "end": "683000"
  },
  {
    "text": "safe we going for time okay so once you've injected a dll",
    "start": "684360",
    "end": "690560"
  },
  {
    "text": "what's the point why the hell would you want want to inject a dll into a remote process there are a hell of a lot of",
    "start": "690560",
    "end": "696079"
  },
  {
    "text": "applications for this technique and uh and for those of you who are systems programmers you'd probably see a lot of them um but once once you've injected",
    "start": "696079",
    "end": "703240"
  },
  {
    "text": "this dll you can literally do whatever you'd like to this dll can call and do uh whatever it would like to including",
    "start": "703240",
    "end": "708880"
  },
  {
    "text": "calling all the standard C functions load up other dlls you know doing whatever it likes to inside the remote",
    "start": "708880",
    "end": "714519"
  },
  {
    "text": "processes memory space and and uh execution space so it very examples of",
    "start": "714519",
    "end": "719720"
  },
  {
    "text": "what existing applications do they modify internal memory structures in the process to make it behave differently",
    "start": "719720",
    "end": "725959"
  },
  {
    "text": "they uh another example is I'm not sure whether you guys are familiar with window blinds it's an application which",
    "start": "725959",
    "end": "731399"
  },
  {
    "text": "changes the appearance of all the windows and uh under the Windows operating system so so you could uh you",
    "start": "731399",
    "end": "737240"
  },
  {
    "text": "could inject the dll and change the look of all the windows like make it themable and all that stuff you can call Api",
    "start": "737240",
    "end": "744079"
  },
  {
    "text": "routines which you normally wouldn't be able to access like privileged API routines from inside the process itself",
    "start": "744079",
    "end": "750760"
  },
  {
    "text": "you can use open IPC channels the the uh the process might have privileged IPC channels open uh where you can't open",
    "start": "750760",
    "end": "757680"
  },
  {
    "text": "another one so you could use the IPC channels inside the remote process without affecting the process um you can",
    "start": "757680",
    "end": "764880"
  },
  {
    "text": "patch the program uh at runtime and make it behave incredibly differently um and",
    "start": "764880",
    "end": "770560"
  },
  {
    "text": "basically you can just do anything you want to you're inside the remote process you can do anything that process can do",
    "start": "770560",
    "end": "775600"
  },
  {
    "text": "and uh that's a very powerful uh ability to have you can do a lot with",
    "start": "775600",
    "end": "781480"
  },
  {
    "text": "it so uh I guess the question then is how is in liit all related or whatever",
    "start": "781480",
    "end": "787839"
  },
  {
    "text": "to inject so which is what this speech is all about well inject so is basically like uh in lib for uh for Linux and",
    "start": "787839",
    "end": "795120"
  },
  {
    "text": "filaris so it's a Unix version of the of this injecting a dll sort of technique",
    "start": "795120",
    "end": "800320"
  },
  {
    "text": "um and I guess the the closest relationship to a dll under under Unix is a shared Library which is basically",
    "start": "800320",
    "end": "806519"
  },
  {
    "text": "exactly the same the same thing um and what inject so does is it injects a shared Library into a remote Unix",
    "start": "806519",
    "end": "812360"
  },
  {
    "text": "process um once once the shared library has been injected um injector so also",
    "start": "812360",
    "end": "818240"
  },
  {
    "text": "provides support some support code uh to help the the injected uh shared Library",
    "start": "818240",
    "end": "823800"
  },
  {
    "text": "do interesting stuff to the remote process so basically it makes it easier for the injected uh shared library but",
    "start": "823800",
    "end": "830839"
  },
  {
    "text": "I'm going to go into much more detail about that later um what I'm going to speak about before that is I'm going to speak about various other techniques for",
    "start": "830839",
    "end": "836880"
  },
  {
    "text": "modifying processes modifying and buying on processes so that we can see uh what already exists and what's different",
    "start": "836880",
    "end": "843199"
  },
  {
    "text": "about inject so but I'll go into hideous amounts of detail about how injecto works and what you can do with it",
    "start": "843199",
    "end": "850120"
  },
  {
    "text": "shortly um actually in the second half so um I guess the one question we have",
    "start": "850120",
    "end": "856959"
  },
  {
    "text": "to actually ask ourselves is you know what is this of interest to us we're here at the blackout briefings it has to be well obviously it's security related",
    "start": "856959",
    "end": "863720"
  },
  {
    "text": "conference um how has this got anything to do with security and uh and it's funny because when I first started",
    "start": "863720",
    "end": "869680"
  },
  {
    "text": "working on inject so I didn't work on it from a security point of view uh I wasn't interested in the security",
    "start": "869680",
    "end": "874959"
  },
  {
    "text": "ramifications of it but obviously the ability to modify processes and programs",
    "start": "874959",
    "end": "880000"
  },
  {
    "text": "uh while they run or or statically and the way they behave has pretty clear security ramifications I mean it's been",
    "start": "880000",
    "end": "886079"
  },
  {
    "text": "seen in the past for sure you can patch vulnerabilities as halar flake has demonstrated fairly clearly um at the",
    "start": "886079",
    "end": "892279"
  },
  {
    "text": "other blackout briefings for um for for fixing vulnerabilities in Windows NT uh",
    "start": "892279",
    "end": "898320"
  },
  {
    "text": "software um so you can patch vulnerabilities at runtime while it's while it's executing",
    "start": "898320",
    "end": "903600"
  },
  {
    "text": "or statically um and you can also do the opposite and do the blackout style thing",
    "start": "903600",
    "end": "908839"
  },
  {
    "text": "and backo or otherwise modify processes in a nasty way so that's sort of like",
    "start": "908839",
    "end": "914440"
  },
  {
    "text": "virus and backo style um things so that's basically why this is",
    "start": "914440",
    "end": "920040"
  },
  {
    "text": "interesting to us um so fair enough uh we've talked about INB and and uh how I speak spoken",
    "start": "920040",
    "end": "927320"
  },
  {
    "text": "at length about how you can do this sort of stuff under Windows how can you do it under Unix what sort of techniques are",
    "start": "927320",
    "end": "932440"
  },
  {
    "text": "there for modifying programs and processes under Unix um there are heaps and a few which we're going to speak",
    "start": "932440",
    "end": "938279"
  },
  {
    "text": "about today I mean there are a wide variety on the internet and stuff but uh but a few which we're going to speak about because they're interesting today",
    "start": "938279",
    "end": "945040"
  },
  {
    "text": "uh binary patching that is patching the binaries while they're on disk and making them do different things uh and",
    "start": "945040",
    "end": "950680"
  },
  {
    "text": "fixing vulnerabilities and introducing uh subverting processes the dynamic",
    "start": "950680",
    "end": "956040"
  },
  {
    "text": "loader environment is one of the easiest ways of doing this sort of of stuff which some of you guys might be familiar with but I'm going to present some",
    "start": "956040",
    "end": "962279"
  },
  {
    "text": "different techniques along those lines and then uh Inc patching so it's almost like uh simple binary patching but you",
    "start": "962279",
    "end": "968959"
  },
  {
    "text": "do it while the process is",
    "start": "968959",
    "end": "971920"
  },
  {
    "text": "running so um most of what I'm going to say about modifying programs and processes is going to be meaningless",
    "start": "974959",
    "end": "981079"
  },
  {
    "text": "unless we have an understanding of uh how programs and processes exist on disk under under the Unix operating systems",
    "start": "981079",
    "end": "988199"
  },
  {
    "text": "so basically we'll need an understanding of the internal structure um which is why I'm going to speak uh for a little",
    "start": "988199",
    "end": "993920"
  },
  {
    "text": "while about elf um elf is the executable and linkable format it's a bit like PE the portable executable format for",
    "start": "993920",
    "end": "1000240"
  },
  {
    "text": "Windows um but it's basically uh the it's used under almost every recent Unix",
    "start": "1000240",
    "end": "1006839"
  },
  {
    "text": "uses the off format because it's very flexible it was originally by the Unix systems Labs it's a very old standard",
    "start": "1006839",
    "end": "1012800"
  },
  {
    "text": "and since it's been adopted by the tool interface standards committee and Intel uh are the big proponents behind behind",
    "start": "1012800",
    "end": "1019160"
  },
  {
    "text": "by the elf file format so when you've got elf files you actually have three different types of",
    "start": "1019160",
    "end": "1024558"
  },
  {
    "text": "Elf files you have relocatable files which might be commonly known as object files um and these are files which",
    "start": "1024559",
    "end": "1030480"
  },
  {
    "text": "contain executable code and which are ready to be linked with other relocatable files in order to create an",
    "start": "1030480",
    "end": "1036120"
  },
  {
    "text": "executable or a shared object an executable is uh is obviously something which you can run from the command line",
    "start": "1036120",
    "end": "1041880"
  },
  {
    "text": "it's designed to have a certain address where it's loaded and starts executing um and it may or may not require a",
    "start": "1041880",
    "end": "1048160"
  },
  {
    "text": "certain other shared objects shared objects are baseless um very much like",
    "start": "1048160",
    "end": "1053520"
  },
  {
    "text": "baseless executables they have almost all of the features of an executable but they can't be they can't be executed",
    "start": "1053520",
    "end": "1058640"
  },
  {
    "text": "they're designed to be used at runtime by other by executables um for for our talk for our",
    "start": "1058640",
    "end": "1064679"
  },
  {
    "text": "purposes only the last two are relevant so I'm not going to speak much about relocatable files uh and I'm going to",
    "start": "1064679",
    "end": "1070280"
  },
  {
    "text": "concentrate on executables um for what we're covering so uh the elf the elf",
    "start": "1070280",
    "end": "1076600"
  },
  {
    "text": "specification describes um two separate views of an executable so when you've got an executable on on disk or any L",
    "start": "1076600",
    "end": "1082799"
  },
  {
    "text": "file on disk there are actually two separate um views which you can take on it when you're when you're working with",
    "start": "1082799",
    "end": "1088840"
  },
  {
    "text": "it modifying it um there are two the two views are a linking View and a loading view the linking view is is completely",
    "start": "1088840",
    "end": "1095440"
  },
  {
    "text": "static and it's information it's a very meaningful view which is designed to be used by linkers and other things which",
    "start": "1095440",
    "end": "1100760"
  },
  {
    "text": "work with elf files um to to describe their internals really clearly the",
    "start": "1100760",
    "end": "1105919"
  },
  {
    "text": "loading view is a much much simpler View and is only used at runtime to load the actual executable into memory and start",
    "start": "1105919",
    "end": "1111880"
  },
  {
    "text": "it running or to load the shared Library into memory as relevant um so taking a quick look at",
    "start": "1111880",
    "end": "1119400"
  },
  {
    "text": "that um when you've got an elf file the first thing you have in the elf file is an elf header and then the elf header",
    "start": "1119400",
    "end": "1124520"
  },
  {
    "text": "gives you a pointer to to the section headers which are the linking View and the program headers which are the",
    "start": "1124520",
    "end": "1129559"
  },
  {
    "text": "execution view um interestingly enough uh in relocatable files this stuff will",
    "start": "1129559",
    "end": "1135960"
  },
  {
    "text": "never exist in executable files this doesn't have to exist nor does it have to exist in shared objects but it",
    "start": "1135960",
    "end": "1141919"
  },
  {
    "text": "normally does um so you've got the sections which which point into the various file it's like an index into the",
    "start": "1141919",
    "end": "1147640"
  },
  {
    "text": "file and you've got the program headers which are also an index into the file but there are much much fewer of them um",
    "start": "1147640",
    "end": "1153760"
  },
  {
    "text": "and that'll be clearer as we go on so the linking view as I said the linking",
    "start": "1153760",
    "end": "1158799"
  },
  {
    "text": "view is a meaningful view of the executable and it divides the executable into sections um as you can see here",
    "start": "1158799",
    "end": "1165159"
  },
  {
    "text": "each section has a name uh and they can actually be be named whatever you want but these are some of the common and",
    "start": "1165159",
    "end": "1170480"
  },
  {
    "text": "more interesting sections inside an elf executable each section has a name and a type um of the various types which are",
    "start": "1170480",
    "end": "1178080"
  },
  {
    "text": "defined in the elf file format a requested memory location where the section would like to be at runtime if",
    "start": "1178080",
    "end": "1183679"
  },
  {
    "text": "it is going to be at runtime at all um and permissions which it would like if if it does go runtime writable ex",
    "start": "1183679",
    "end": "1190720"
  },
  {
    "text": "writable or executable if if this section is meant to be loaded at runtime so some important sections for",
    "start": "1190720",
    "end": "1197480"
  },
  {
    "text": "for what we're talking about um we're actually going to be speaking a lot about the dynamic Linker or the dynamic",
    "start": "1197480",
    "end": "1203080"
  },
  {
    "text": "loader same thing but we're going to we're going to be speaking a lot about the way it functions both in in in terms",
    "start": "1203080",
    "end": "1208360"
  },
  {
    "text": "of inject so and in another technique which we'll be talking about but um so that's why I'm concentrating on these",
    "start": "1208360",
    "end": "1214600"
  },
  {
    "text": "sections which are relevant to the to the dynamic loader um if we look here we've got the interp section the interp",
    "start": "1214600",
    "end": "1221159"
  },
  {
    "text": "section uh requests a certain a certain Dynamic loader which you'd like to be used to load this executable the dynamic",
    "start": "1221159",
    "end": "1228720"
  },
  {
    "text": "provides information which the dynamic Linker or loader needs in order to successfully work with this file it's",
    "start": "1228720",
    "end": "1234200"
  },
  {
    "text": "the critical section for any Dynamic executable um uh we've got the the symbol table and the dynamic symbol",
    "start": "1234200",
    "end": "1240760"
  },
  {
    "text": "table um which are basically static symbols which don't need to exist at runtime and dynamic symbols which need",
    "start": "1240760",
    "end": "1247240"
  },
  {
    "text": "to exist at runtime because they refer to symbols which need to come from external places like shared libraries",
    "start": "1247240",
    "end": "1253200"
  },
  {
    "text": "which need to be loaded at runtime and you've got the string tables again you've got the static the static string",
    "start": "1253200",
    "end": "1258440"
  },
  {
    "text": "table which refers to the Sim tab you've got the dynamic string table which refers to the dynamic symbol table",
    "start": "1258440",
    "end": "1264120"
  },
  {
    "text": "you've got the procedure linkage table which is what allows you to um call functions which are external to your to",
    "start": "1264120",
    "end": "1270360"
  },
  {
    "text": "your executable so if you've got a function in libc you call it through the PLT and we'll talk about that more later",
    "start": "1270360",
    "end": "1276679"
  },
  {
    "text": "you've got the relocations for various sections again we'll talk about that that more later but that's important for",
    "start": "1276679",
    "end": "1282520"
  },
  {
    "text": "the dynamic Linker um and you've got the text section which contains your code actual exec code of the of the",
    "start": "1282520",
    "end": "1290440"
  },
  {
    "text": "program um so so that so that's a linking view um and as I said earlier",
    "start": "1290440",
    "end": "1296000"
  },
  {
    "text": "not all of the sections which are described in the linking view need to exist at runtime um for example some of",
    "start": "1296000",
    "end": "1301760"
  },
  {
    "text": "them are debugging information other of them other bits are meant to be used by the Linker when it's creating an executable um and that's the difference",
    "start": "1301760",
    "end": "1308640"
  },
  {
    "text": "between the link time and the runtime view of the executable the the loading view which is",
    "start": "1308640",
    "end": "1314000"
  },
  {
    "text": "the runtime view um is much much simpler and it divides the execu up into segments all of the segments are load",
    "start": "1314000",
    "end": "1321000"
  },
  {
    "text": "are meant to be loaded into memory when this executable is loaded in um so so that is there are no no sections which",
    "start": "1321000",
    "end": "1327760"
  },
  {
    "text": "don't need need to be loaded into memory will be referenced by a segment so so you've got these as you can see there",
    "start": "1327760",
    "end": "1333360"
  },
  {
    "text": "are generally much fewer segments inside an executable these are some examples of the common segment types you'll see in",
    "start": "1333360",
    "end": "1339640"
  },
  {
    "text": "an executable um uh segments have a simple type that's inter load Dynamic um",
    "start": "1339640",
    "end": "1346840"
  },
  {
    "text": "no name requested memory location where they'd like to be at run at runtime uh",
    "start": "1346840",
    "end": "1352159"
  },
  {
    "text": "and permissions for that memory page readable writable or executable so you can specify exactly what what should be",
    "start": "1352159",
    "end": "1358279"
  },
  {
    "text": "possible on this memory at at runtime um looking at looking at the elf",
    "start": "1358279",
    "end": "1365360"
  },
  {
    "text": "segment types there aren't actually all that many but but there are only three which we're really interested in that there's there's an interp segment type",
    "start": "1365360",
    "end": "1371640"
  },
  {
    "text": "which which is an exact correlation to the interp section um and it specifies",
    "start": "1371640",
    "end": "1377159"
  },
  {
    "text": "the the memory address add of a string which says the dynamic Linker we'd like to use when this executable is loaded",
    "start": "1377159",
    "end": "1382400"
  },
  {
    "text": "and executed um we've got the dynamic segment which is the same as the dynamic section and it contains information",
    "start": "1382400",
    "end": "1388679"
  },
  {
    "text": "which the dynamic loader needs a runtime to make this executable work and then you've got the uh and you can have you",
    "start": "1388679",
    "end": "1395320"
  },
  {
    "text": "have quite a few normally loadable segments normally two um which specify just bits which should be loaded into",
    "start": "1395320",
    "end": "1401120"
  },
  {
    "text": "memory just bits of executable code or other things which need to be present in memory sections of the of the executable",
    "start": "1401120",
    "end": "1407279"
  },
  {
    "text": "file um so if we compare the compare the two views we've got the linking view over",
    "start": "1407279",
    "end": "1412880"
  },
  {
    "text": "here and the loading view over here um we can see various sections uh which which correlate exactly the interp",
    "start": "1412880",
    "end": "1419360"
  },
  {
    "text": "section correlates exactly the dynamic strings and the dynamic symbols go into just a load segment and you can see the",
    "start": "1419360",
    "end": "1425120"
  },
  {
    "text": "permissions down here of the of what the memory pages will have at runtime um the",
    "start": "1425120",
    "end": "1430880"
  },
  {
    "text": "dynamic section it exactly correlates to to the dynamic segment you've got a data",
    "start": "1430880",
    "end": "1436320"
  },
  {
    "text": "data section which goes into to one of the loadable segments and then you've got a number of uh sections which don't make it at all and they don't need to",
    "start": "1436320",
    "end": "1442960"
  },
  {
    "text": "exist at at runtime um that was exactly what I was",
    "start": "1442960",
    "end": "1448000"
  },
  {
    "text": "saying the the the section table is all about meaning it's all about describing information about the executable it's",
    "start": "1448000",
    "end": "1453440"
  },
  {
    "text": "meaningful and that makes it completely irrelevant at load time at load time there is no meaning required anymore um",
    "start": "1453440",
    "end": "1459440"
  },
  {
    "text": "all all of the meaning which is needed by the dynamic Linker is stored inside the dynamic segment and everything else",
    "start": "1459440",
    "end": "1464640"
  },
  {
    "text": "is completely Superfluous and that actually means that all of the section information from an executable every",
    "start": "1464640",
    "end": "1469840"
  },
  {
    "text": "single bit of it can be stripped after you've after you've constructed that executable if you guys are familiar with",
    "start": "1469840",
    "end": "1475279"
  },
  {
    "text": "strip um a common Unix tool which you use to strip out symbolic information it removes all of the all of the symbol",
    "start": "1475279",
    "end": "1482399"
  },
  {
    "text": "sections um but it's actually quite possible to remove all of the sections which will well and truly break things",
    "start": "1482399",
    "end": "1488640"
  },
  {
    "text": "like um object dump GDB all that sort of stuff which require which which rely on the meaning uh provided by the section",
    "start": "1488640",
    "end": "1496760"
  },
  {
    "text": "View so just quickly when we're loading and executing an elf executable given that we've got this understanding of of",
    "start": "1496760",
    "end": "1503080"
  },
  {
    "text": "Elf what actually happens when we're loading and executing an elf executable um the process I'm going to describe",
    "start": "1503080",
    "end": "1508679"
  },
  {
    "text": "here I have to say is actually textbook stuff this is the way an elf file is meant to be loaded and executed if we",
    "start": "1508679",
    "end": "1514240"
  },
  {
    "text": "ever look at the loader under Linux or something like that you'll see that it's not done anything like this um but but",
    "start": "1514240",
    "end": "1520360"
  },
  {
    "text": "this is this is the theoretically how it's meant to happen um the file is opened by by the konel um a file",
    "start": "1520360",
    "end": "1525880"
  },
  {
    "text": "descriptor is passed to whatever the dynamic Linker which was specified as required in the interp segment so so the",
    "start": "1525880",
    "end": "1532960"
  },
  {
    "text": "the colel finds the interp segment look works out okay it needs this Dynamic loader loads up that Dynamic loader and",
    "start": "1532960",
    "end": "1539240"
  },
  {
    "text": "then passes it the folder scripter to the file the Linko reads in the file segments and loads them at the requested",
    "start": "1539240",
    "end": "1546240"
  },
  {
    "text": "addresses um inside the SE the segment table and then the link of finds and processes all of the information inside",
    "start": "1546240",
    "end": "1552520"
  },
  {
    "text": "the dynamic segment",
    "start": "1552520",
    "end": "1558600"
  },
  {
    "text": "um so I guess because I've kept referring to the dynamic segment I better explain what's in it and it's actually really important because uh",
    "start": "1558600",
    "end": "1565320"
  },
  {
    "text": "it's inject so makes a lot of use of the dynamic segment and one of the other techniques also does too um basically",
    "start": "1565320",
    "end": "1572440"
  },
  {
    "text": "the dynamic segment is a table of Records containing information which is critical to the dynamic loading or",
    "start": "1572440",
    "end": "1577520"
  },
  {
    "text": "linking process uh it allows the dynamic Linker to find out information about the executable only relevant information",
    "start": "1577520",
    "end": "1584120"
  },
  {
    "text": "about the executable um very quickly without a section table without any of that stuff uh and each record is very",
    "start": "1584120",
    "end": "1590520"
  },
  {
    "text": "simple it consists of a type uh and a value um so some interesting Dynamic",
    "start": "1590520",
    "end": "1596960"
  },
  {
    "text": "segment uh section Dynamic segment tags or dynamic segment records uh DT needed",
    "start": "1596960",
    "end": "1602840"
  },
  {
    "text": "which specifies the name of a required shared Library so this is a library I want to be loaded in uh the jump rail",
    "start": "1602840",
    "end": "1609039"
  },
  {
    "text": "specifies the address of the relocation entries which are associated with the PLT so that's basically specifies the",
    "start": "1609039",
    "end": "1615039"
  },
  {
    "text": "address of all of of a list of all the functions which need to be imported at runtime so print F might be in there if",
    "start": "1615039",
    "end": "1621039"
  },
  {
    "text": "you use print F or whatever the functions you import from libc will have a jump will be will be inside the jump",
    "start": "1621039",
    "end": "1627679"
  },
  {
    "text": "the entries referred to by the jump rail uh and then this is really important this is the DT debug entry which",
    "start": "1627679",
    "end": "1633799"
  },
  {
    "text": "provides space for for the dynamic Linker to put in a debugging pointer and this pointer refers to a debugging",
    "start": "1633799",
    "end": "1640600"
  },
  {
    "text": "structure which is exported by the dynamic Linker which allows um you to connect to a process a debugger to",
    "start": "1640600",
    "end": "1646279"
  },
  {
    "text": "connect to a process and find out cool information about about what the dynamic Linker has done with this process what",
    "start": "1646279",
    "end": "1652080"
  },
  {
    "text": "libraries are mapped where all of that stuff and that'll be more that'll be",
    "start": "1652080",
    "end": "1658039"
  },
  {
    "text": "better covered later because it's really important um then step five so we're",
    "start": "1658039",
    "end": "1663360"
  },
  {
    "text": "still loading an executable so so it it looks through the dynamic segment it finds all the DT needed entries for all",
    "start": "1663360",
    "end": "1669080"
  },
  {
    "text": "the shared libraries which are needed loads them up no worries and it adds the libraries to what's called a link map",
    "start": "1669080",
    "end": "1674799"
  },
  {
    "text": "which is stored inside the DT dbug entry okay so that so that debug structure which I was talking about contains a",
    "start": "1674799",
    "end": "1680480"
  },
  {
    "text": "link map showing all of the shared libraries inside the remote process it then performs relocations for the global",
    "start": "1680480",
    "end": "1686799"
  },
  {
    "text": "offset table and the procedure linkage table which I'll talk about more uh very",
    "start": "1686799",
    "end": "1693120"
  },
  {
    "text": "shortly in fact right now um the procedure linkage table is really important and for the stuff we're",
    "start": "1693120",
    "end": "1698640"
  },
  {
    "text": "talking about it's it's going to be quite critical um you would probably would have heard about it a lot um it's",
    "start": "1698640",
    "end": "1704279"
  },
  {
    "text": "stored inside the PLT section of the executable and basically allows executables to call functions which",
    "start": "1704279",
    "end": "1710240"
  },
  {
    "text": "aren't which it which aren't located at a known location at compile time so basically any shared Library function is",
    "start": "1710240",
    "end": "1716640"
  },
  {
    "text": "is this way like print F or something like that um and the PLT is a set of function stubs so so so when an",
    "start": "1716640",
    "end": "1723000"
  },
  {
    "text": "executable wants to call printf instead it calls a function stub inside the PLT which it knows where it will be and at",
    "start": "1723000",
    "end": "1729240"
  },
  {
    "text": "runtime that function stub is patched to be the real location of printf inside the executable so so if we look look at",
    "start": "1729240",
    "end": "1736360"
  },
  {
    "text": "this there's actually progr of this here the program is calling printf uh at compile time it it it ends up with a",
    "start": "1736360",
    "end": "1743080"
  },
  {
    "text": "call instruction to the PLT this printf stub and then when the dynamic Linker",
    "start": "1743080",
    "end": "1748120"
  },
  {
    "text": "loads up the executable it it finds all these PLT function stubs and it patches them to refer to the real location of",
    "start": "1748120",
    "end": "1755039"
  },
  {
    "text": "print F inside the shared Library which it's loaded up so so that's how you can call functions when you don't know where",
    "start": "1755039",
    "end": "1760679"
  },
  {
    "text": "they're going to be um uh so yeah so the dynamic link up",
    "start": "1760679",
    "end": "1765720"
  },
  {
    "text": "forms of relocations and this is usually done lazily and that's important because what normally happens is that the",
    "start": "1765720",
    "end": "1772279"
  },
  {
    "text": "dynamic Linker doesn't as soon as it loads up the executable perform this link it leaves the the stub alone it",
    "start": "1772279",
    "end": "1779240"
  },
  {
    "text": "doesn't do anything normally when the first print F call happens it actually makes this resolution because it's an",
    "start": "1779240",
    "end": "1784519"
  },
  {
    "text": "expensive operation to resolve the symbol um and that that can be important from inject so's point of view so this",
    "start": "1784519",
    "end": "1791240"
  },
  {
    "text": "link is normally done only when it's required um so that brings us to the",
    "start": "1791240",
    "end": "1797880"
  },
  {
    "text": "dynamic symbols and the dynamic relocations how we going for",
    "start": "1797880",
    "end": "1802559"
  },
  {
    "text": "time okay um the dynamic symbols and relocations are stored inside the real PLT section and the dynamic symbol",
    "start": "1803600",
    "end": "1810840"
  },
  {
    "text": "section um and basically uh this tells the dynamic Linker what it needs to resolve where so so an example might",
    "start": "1810840",
    "end": "1818159"
  },
  {
    "text": "there would be a dynamic relocation entry for printa if you were going to call printf and it tells um tells the",
    "start": "1818159",
    "end": "1824519"
  },
  {
    "text": "dynamic Linker what it needs to patch where um um for example in the case of",
    "start": "1824519",
    "end": "1829640"
  },
  {
    "text": "print f it would tell the dynamic Linker that it needs to patch the PLT the the address of the PLT entry to refer to the",
    "start": "1829640",
    "end": "1836080"
  },
  {
    "text": "address of printf the real address of prf uh and we'll talk much more about this stuff uh later because it's",
    "start": "1836080",
    "end": "1842760"
  },
  {
    "text": "important to the way injecto and some of these other techniques work uh and just just for reference",
    "start": "1842760",
    "end": "1848600"
  },
  {
    "text": "although it's not all that interesting to us the global offset table um is like the PLT but it but it is not for",
    "start": "1848600",
    "end": "1854399"
  },
  {
    "text": "functions it's used for data which you might access which you don't know where it is at runtime so stuff like standard",
    "start": "1854399",
    "end": "1860240"
  },
  {
    "text": "error error number all that stuff which exist in in shared libraries um you get to that through the global offset table",
    "start": "1860240",
    "end": "1867320"
  },
  {
    "text": "um and the global offset table is referenced by the PLT on the Intel architecture but it doesn't have to be",
    "start": "1867320",
    "end": "1873320"
  },
  {
    "text": "and on the spark it isn't um so that's why you often hear people confusing them people often say oh yeah I patched the",
    "start": "1873320",
    "end": "1878919"
  },
  {
    "text": "got or I patched the PLT or whatever um they're not the same thing it just happens to be that under Intel",
    "start": "1878919",
    "end": "1884799"
  },
  {
    "text": "architecture they are interrelated for functions um but anyway both the PLT and",
    "start": "1884799",
    "end": "1889880"
  },
  {
    "text": "the god are targeted for attacking inside format string vulnerabilities which is probably where you've heard of them because they're at a known location",
    "start": "1889880",
    "end": "1896320"
  },
  {
    "text": "and they're very easy to patch using format string exploits uh and you can do a lot if you patch those",
    "start": "1896320",
    "end": "1901760"
  },
  {
    "text": "entries um I think we're getting towards the end of all this elf stuff so we've got some",
    "start": "1901760",
    "end": "1908039"
  },
  {
    "text": "interesting stuff coming up Don't worry um the DT debug record which is one of the records inside the dynamic segment",
    "start": "1908039",
    "end": "1914799"
  },
  {
    "text": "um it's appointed to a structure as I said provided by the dynamic Linker at runtime uh with debug information uh",
    "start": "1914799",
    "end": "1921200"
  },
  {
    "text": "it's normally examined by debuggers to work out the location of shared libraries so that they can work out that",
    "start": "1921200",
    "end": "1926760"
  },
  {
    "text": "when when when the when the code goes off into some random address they can work out oh that's actually inside liy",
    "start": "1926760",
    "end": "1932880"
  },
  {
    "text": "and it's actually print F which is which the person is executing the program is executing um and the debug record shows",
    "start": "1932880",
    "end": "1939799"
  },
  {
    "text": "the memory layout of the process um for example which which shared libraries are loaded where um and other information",
    "start": "1939799",
    "end": "1946639"
  },
  {
    "text": "about them and we'll talk about that in detail with diagrams and stuff a bit later",
    "start": "1946639",
    "end": "1954120"
  },
  {
    "text": "so okay so fair enough now it's actually time to move on to the interesting stuff",
    "start": "1954360",
    "end": "1960000"
  },
  {
    "text": "um we're going to actually start to talk about Real Techniques and real life uses of these techniques um so the first one",
    "start": "1960000",
    "end": "1967720"
  },
  {
    "text": "the most obvious one is is if you want to modify the way programs and processes behave uh is to actually just modify the",
    "start": "1967720",
    "end": "1973279"
  },
  {
    "text": "code in the file patch the file this this has been uh this is very very commonly used under under Windows to",
    "start": "1973279",
    "end": "1981320"
  },
  {
    "text": "like uh when you see on all those sites like cracks and stuff for shareware",
    "start": "1981320",
    "end": "1986480"
  },
  {
    "text": "that's basically what they all do they just patch the code in the file um and the basic process of binary patching is",
    "start": "1986480",
    "end": "1993039"
  },
  {
    "text": "is that you need to either modify the code which is there like just WR over it with new code or you need to insert",
    "start": "1993039",
    "end": "1999080"
  },
  {
    "text": "additional code and call the new code from the from the existing code modify",
    "start": "1999080",
    "end": "2004399"
  },
  {
    "text": "the existing code to call the new code um when you're binary patching basically",
    "start": "2004399",
    "end": "2010559"
  },
  {
    "text": "you you normally code an assembler so that you can binary patch the it's generally easiest to code in assembler",
    "start": "2010559",
    "end": "2015880"
  },
  {
    "text": "but you can use C it's just that if you do use C uh the patch will be much larger and it will also uh if you use",
    "start": "2015880",
    "end": "2023039"
  },
  {
    "text": "see you you can't use any of the standard functions you can't call any lib C functions you can't call string compare or anything so it's almost",
    "start": "2023039",
    "end": "2028960"
  },
  {
    "text": "pointless to use C but if you want to you can um so your code an assembler and and so now you've got this",
    "start": "2028960",
    "end": "2035480"
  },
  {
    "text": "code and you need to get it inside the Target executable and make it do something um so the first idea is where",
    "start": "2035480",
    "end": "2040880"
  },
  {
    "text": "are you going to put this code fair enough you may have generated a k worth of um worth of patch but where are you",
    "start": "2040880",
    "end": "2046039"
  },
  {
    "text": "going to put it um there are a few options here you can overwrite unused code inside the executable um which",
    "start": "2046039",
    "end": "2053280"
  },
  {
    "text": "obviously is fraught with difficulty because it's hard to identify code which isn't used inside the target executable",
    "start": "2053280",
    "end": "2059040"
  },
  {
    "text": "I mean generally there is lots of it but it's hard to work out which code paths will never be called and if and if in",
    "start": "2059040",
    "end": "2064440"
  },
  {
    "text": "some weird situation the code path is called uh and your patch is there it'll just",
    "start": "2064440",
    "end": "2069878"
  },
  {
    "text": "melt down um another option is section padding when you've got an elf executable in between each of the",
    "start": "2069879",
    "end": "2075839"
  },
  {
    "text": "sections there is a very very small amount of padding um generally less than 32 bytes uh and it's used for for",
    "start": "2075839",
    "end": "2083280"
  },
  {
    "text": "padding to to bite boundaries like 32 bite boundaries um and you need a",
    "start": "2083280",
    "end": "2088760"
  },
  {
    "text": "section which is an which is inside an executable segment and all that stuff it's not really a particularly U good",
    "start": "2088760",
    "end": "2095398"
  },
  {
    "text": "idea I've never seen anything which actually does it um one option obviously",
    "start": "2095399",
    "end": "2100400"
  },
  {
    "text": "which might strike you as as the most obvious option is to add a segment um because as we specified the segment",
    "start": "2100400",
    "end": "2105839"
  },
  {
    "text": "table specifies which bits of the executable are loaded where so you can just you know shove some code onto the",
    "start": "2105839",
    "end": "2111359"
  },
  {
    "text": "end of the executable add a new segment get it loaded and everything will go uh so that seems like the most obvious",
    "start": "2111359",
    "end": "2117440"
  },
  {
    "text": "thing um but it certainly isn't the best idea for reasons I'll explain shortly um",
    "start": "2117440",
    "end": "2122680"
  },
  {
    "text": "and there are heaps of other methods um there have been a number of excellent Papers written about all this stuff believe it or not in regards to Unix",
    "start": "2122680",
    "end": "2128839"
  },
  {
    "text": "viruses um and some of the ways which they describe in those papers are better than the ways I'm going to describe but",
    "start": "2128839",
    "end": "2135040"
  },
  {
    "text": "the way I'm going to describe is is seems is the most obvious at first thought um so our example our demo is",
    "start": "2135040",
    "end": "2143599"
  },
  {
    "text": "going to add a new segment to a to a to a program um there are a couple of options which we can do when we're",
    "start": "2143599",
    "end": "2149640"
  },
  {
    "text": "adding a new segment obviously we need to uh we need to uh get our segment inside the segment table so so that it",
    "start": "2149640",
    "end": "2155440"
  },
  {
    "text": "will be loaded so we're going to add code to the file at the end of the file and then we need to have the segment table refer to this part of the file and",
    "start": "2155440",
    "end": "2162200"
  },
  {
    "text": "get it loaded into memory um so the first process of of getting our segment inside inside the segment table we have",
    "start": "2162200",
    "end": "2168760"
  },
  {
    "text": "a couple of options we can either reuse an existing but unneeded segment you know how I showed you the segment table",
    "start": "2168760",
    "end": "2174440"
  },
  {
    "text": "list uh and one of the things inside there was the was the PTP header um",
    "start": "2174440",
    "end": "2180200"
  },
  {
    "text": "segment type and that segment all it does is it refers to the location in memory at runtime of the segment table",
    "start": "2180200",
    "end": "2186880"
  },
  {
    "text": "it's not actually used I'm not I'm not exactly sure why it's needed but I haven't found a case where it's actually",
    "start": "2186880",
    "end": "2192520"
  },
  {
    "text": "referred to by anything or it's necessary so you could overwrite an unneeded segment entry which already",
    "start": "2192520",
    "end": "2197760"
  },
  {
    "text": "exists or you can just again take away which might seem more obvious and just",
    "start": "2197760",
    "end": "2202880"
  },
  {
    "text": "create your own just modify the just ignore all the existing program headers and create your own program headers so",
    "start": "2202880",
    "end": "2210560"
  },
  {
    "text": "this is basically what we're going to do um we've got the elf header okay and we're going to patch the binary program",
    "start": "2210560",
    "end": "2216280"
  },
  {
    "text": "and we're going to going to patch the header and we're going and the old program headers are still going to be there but we're just going to add stuff",
    "start": "2216280",
    "end": "2222200"
  },
  {
    "text": "to the end of the file and Patch the existing elf header to point to our new program headers down here so we're going",
    "start": "2222200",
    "end": "2228520"
  },
  {
    "text": "to have our own program headers which continue to have all of the normal entries so we copy all the old program headers down to here and add a new entry",
    "start": "2228520",
    "end": "2236280"
  },
  {
    "text": "add make the table longer so we have all of the normal segments and then we're going to add a new segment right at the",
    "start": "2236280",
    "end": "2241800"
  },
  {
    "text": "end of the file and refer uh and refer to that inside the segment table inside",
    "start": "2241800",
    "end": "2246839"
  },
  {
    "text": "the new segment table which we construct um uh now it doesn't actually work um",
    "start": "2246839",
    "end": "2253800"
  },
  {
    "text": "that cleanly mostly because there are major problems with the loaders uh most of the loaders inside uh inside a lot of",
    "start": "2253800",
    "end": "2260440"
  },
  {
    "text": "the unix's are very bad they don't follow this spe at all and if you actually do this uh it doesn't work",
    "start": "2260440",
    "end": "2266200"
  },
  {
    "text": "properly but I'll explain that as I do the demo and and there are ways around that it just makes it complex and",
    "start": "2266200",
    "end": "2272119"
  },
  {
    "text": "annoying which makes some of the other ways better but anyway so so once we've patched what are we actually going to do",
    "start": "2272119",
    "end": "2278280"
  },
  {
    "text": "I mean what can we do if we patch a binary we can do anything uh if we have an understanding of the binary if we've",
    "start": "2278280",
    "end": "2283720"
  },
  {
    "text": "disassembled it we can make it do whatever we'd like to we can we can patch the function prologues inside the",
    "start": "2283720",
    "end": "2289720"
  },
  {
    "text": "inside the program so that we can make function calls inside the program uh refer to our new code so that we can",
    "start": "2289720",
    "end": "2296000"
  },
  {
    "text": "modify the way the program behaves or we can just modify code anywhere we like um to insert remove code change the",
    "start": "2296000",
    "end": "2302200"
  },
  {
    "text": "functionality make it better whatever um so so the basic process which we use",
    "start": "2302200",
    "end": "2308640"
  },
  {
    "text": "here is that we modify the old code so that instead of doing what it normally does it calls our new code uh so so it",
    "start": "2308640",
    "end": "2314640"
  },
  {
    "text": "does a jump to our new code then our new code jumps back at the end so uh a quick demo of of binary",
    "start": "2314640",
    "end": "2323839"
  },
  {
    "text": "patching okay uh basically I'm going to use a really simple and trivial example here because um uh but but the technique",
    "start": "2323839",
    "end": "2331760"
  },
  {
    "text": "does work on much larger and more complex programs but it will be clearer if I show it on a simple program",
    "start": "2331760",
    "end": "2337240"
  },
  {
    "text": "um basically I've got this silly little example of this program which it just pretends to be a login prompt okay so",
    "start": "2337240",
    "end": "2344720"
  },
  {
    "text": "whatever doesn't actually do anything interesting but it pretends to be a login prompt um so uh the most obvious thing",
    "start": "2344720",
    "end": "2351920"
  },
  {
    "text": "which we're going to check for is what what if what if this login prompt uh has some security",
    "start": "2351920",
    "end": "2358280"
  },
  {
    "text": "vulnerability like that okay so it seg fults when it receives a long username which",
    "start": "2358280",
    "end": "2364560"
  },
  {
    "text": "immediately we suspect um is because it's got some sort of buffer overflow vulnerability or something like that so",
    "start": "2364560",
    "end": "2370440"
  },
  {
    "text": "if I run login demo what I'll do is is in another um window I'm going to",
    "start": "2370440",
    "end": "2376000"
  },
  {
    "text": "trace the uh I'm going to do a library call Trace not sure whether you guys are familiar with L Trace but it is an",
    "start": "2376000",
    "end": "2381920"
  },
  {
    "text": "awesome program and it basically allows you to trace uh calls to Dynamic functions from a program there so if I",
    "start": "2381920",
    "end": "2389640"
  },
  {
    "text": "do uh an L trace of the login demo and I just uh type",
    "start": "2389640",
    "end": "2395240"
  },
  {
    "text": "that okay okay inside my other window I can see that what's happening is uh is",
    "start": "2395240",
    "end": "2401599"
  },
  {
    "text": "that it's obviously uh chopping off the slash in inside on the username then it",
    "start": "2401599",
    "end": "2406839"
  },
  {
    "text": "does a be string copy and then it asks for the password and then it does a be string copy so this is like your",
    "start": "2406839",
    "end": "2413200"
  },
  {
    "text": "completely extinct and trivial example of of a buffer overflow so um what what we'd like to do",
    "start": "2413200",
    "end": "2420359"
  },
  {
    "text": "here is that we'd like to make this program nonvulnerable we want to patch it so that it's no longer vulnerable to this obvious security problem um so what",
    "start": "2420359",
    "end": "2427800"
  },
  {
    "text": "we're going to do is the first thing we're going to do is we're going to we'll load",
    "start": "2427800",
    "end": "2434680"
  },
  {
    "text": "in login demo here so that we can get an understanding of the",
    "start": "2434680",
    "end": "2442400"
  },
  {
    "text": "executable just hold on",
    "start": "2442720",
    "end": "2446319"
  },
  {
    "text": "26 okay so now if we go this this program still has the",
    "start": "2449359",
    "end": "2454760"
  },
  {
    "text": "symbols which obviously um most processes wouldn't but it will make it clearer to to show what I'm talking",
    "start": "2454760",
    "end": "2461760"
  },
  {
    "text": "about okay so if I go to main this is the disassembly of of the main function okay um we can see FP s f flush you know",
    "start": "2461760",
    "end": "2471839"
  },
  {
    "text": "obvious things F gets to read in the string um work out the length of the",
    "start": "2471839",
    "end": "2477319"
  },
  {
    "text": "string and here we can see the bare string copy um and we can also see that its argument its Target argument is the",
    "start": "2477319",
    "end": "2484280"
  },
  {
    "text": "base point of minus 10 um so basically we can tell immediately that that the size of this buffer it's",
    "start": "2484280",
    "end": "2490319"
  },
  {
    "text": "on the stack and it's 16 bytes long okay so if we go down",
    "start": "2490319",
    "end": "2495440"
  },
  {
    "text": "further and we look for the second string copy we can see the second string copy it's EBP minus 20 given that we",
    "start": "2495440",
    "end": "2502520"
  },
  {
    "text": "know the other one was EBP minus 10 we also know that this is another 16 by buffer on the stack okay so obviously",
    "start": "2502520",
    "end": "2508880"
  },
  {
    "text": "what we want to do here is we want to replace these calls to string copy with something safer we want to make them length limiting we want to prevent them",
    "start": "2508880",
    "end": "2515520"
  },
  {
    "text": "from from causing an overflow so um let's take a",
    "start": "2515520",
    "end": "2521680"
  },
  {
    "text": "look uh I just want to quickly show you uh um",
    "start": "2521680",
    "end": "2528000"
  },
  {
    "text": "I'm going to I use read elf here to to look at the internal structures of of a uh elf executable uh read elf is",
    "start": "2528000",
    "end": "2535079"
  },
  {
    "text": "excellent try not to use object dump for this stuff if you ever do um get interested in this um object dump is",
    "start": "2535079",
    "end": "2541200"
  },
  {
    "text": "nowhere near as good because it it relies on the section information which isn't always present um so we've got uh",
    "start": "2541200",
    "end": "2547880"
  },
  {
    "text": "this is this is actually looking at the uh program headers you know how the loading View and we can see all the segments here now one one of our options",
    "start": "2547880",
    "end": "2555480"
  },
  {
    "text": "would be to overwrite one of these segment entries like note is an obvious one or P header but that's not what",
    "start": "2555480",
    "end": "2561119"
  },
  {
    "text": "we're going to do here um we're going to to to patch the um to patch executable",
    "start": "2561119",
    "end": "2567760"
  },
  {
    "text": "to make the calls length limiting okay so the first thing we're going to do is we need to add a segment to the executable for that I'm going to use",
    "start": "2567760",
    "end": "2574079"
  },
  {
    "text": "utility I wrote called add segment okay login demo um I'm going to call the new",
    "start": "2574079",
    "end": "2580599"
  },
  {
    "text": "executable patch login demo I want to create the segment and the new segment should be loaded at",
    "start": "2580599",
    "end": "2588520"
  },
  {
    "text": "9 there and uh and I want it to be ,24 bytes long okay so so now what what this",
    "start": "2588520",
    "end": "2596440"
  },
  {
    "text": "executable has done is is it created a new executable called patch login demo and Patch login demo has a new segment",
    "start": "2596440",
    "end": "2602680"
  },
  {
    "text": "if I do rof do patch log demo okay you can see that it",
    "start": "2602680",
    "end": "2609599"
  },
  {
    "text": "differs from the old one in that it's now got this new um load segment at the end this load segment will be loaded at",
    "start": "2609599",
    "end": "2615079"
  },
  {
    "text": "the address I specified and it will be read WR and execute okay so I've added a segment into this executable to give me",
    "start": "2615079",
    "end": "2620960"
  },
  {
    "text": "some space to patch something in um one thing you'll also notice is is is that if I do the read elf um on login demo",
    "start": "2620960",
    "end": "2629559"
  },
  {
    "text": "see how this has got a mapping between the sections and the segments um add segment just as a demonstration also",
    "start": "2629559",
    "end": "2635640"
  },
  {
    "text": "removes all section information which means that object dump",
    "start": "2635640",
    "end": "2642760"
  },
  {
    "text": "uh uh will never recognize this file it has no section information so as far as it's concerned GDB and all that stuff",
    "start": "2644800",
    "end": "2651119"
  },
  {
    "text": "will never work on this executable it's not it's not an executable okay so so",
    "start": "2651119",
    "end": "2656839"
  },
  {
    "text": "I've now got some space to work in um what I'm going to do is I'm going to",
    "start": "2656839",
    "end": "2662720"
  },
  {
    "text": "use uh",
    "start": "2663160",
    "end": "2668000"
  },
  {
    "text": "what I call it um I'm going to use can anybody see",
    "start": "2675119",
    "end": "2681440"
  },
  {
    "text": "this stuff it's colored is it is it easy to see still yeah okay um anyway I've just I've hacked up this quick little",
    "start": "2681440",
    "end": "2687160"
  },
  {
    "text": "bit of assembler don't pick on my assembler I'm not that great but uh but anyway I've just hacked up this quick",
    "start": "2687160",
    "end": "2692920"
  },
  {
    "text": "patch and what and what we're going to do is we're going to we're going to to patch all of the calls to string copy and replace them with this code okay",
    "start": "2692920",
    "end": "2700440"
  },
  {
    "text": "what this code does is is it calls um our our new patch okay then uh our new",
    "start": "2700440",
    "end": "2706000"
  },
  {
    "text": "patch um replaces the current call to string copy with a call to this new thing a stroll copy which is just an",
    "start": "2706000",
    "end": "2712079"
  },
  {
    "text": "assembly implementation of string string L copy if you guys are familiar with it okay um so basically all I do is is I'm",
    "start": "2712079",
    "end": "2720240"
  },
  {
    "text": "going to patch in uh a string length of 16 um uh into the executable uh so that",
    "start": "2720240",
    "end": "2726640"
  },
  {
    "text": "it will and then call string L copy which I'm going to patch at this address and so basically instead of calling",
    "start": "2726640",
    "end": "2731880"
  },
  {
    "text": "string copy it will call uh stroll copy and be safe it will call up for 16 bytes",
    "start": "2731880",
    "end": "2737119"
  },
  {
    "text": "once I patch this executable in once I patch this sorry code in okay so the",
    "start": "2737119",
    "end": "2743559"
  },
  {
    "text": "first thing I need to do is I need to I can see that that the first call to string copy happens that this sorry",
    "start": "2743559",
    "end": "2751400"
  },
  {
    "text": "first called a string copy happens at uh",
    "start": "2751400",
    "end": "2756839"
  },
  {
    "text": "804 855d okay so basically what I do is is is I I'm just using utilities here",
    "start": "2756839",
    "end": "2763240"
  },
  {
    "text": "which I've got to rip out bits of code and to apply them so I'm going to construct a patch okay my patch is just",
    "start": "2763240",
    "end": "2768680"
  },
  {
    "text": "let me check that I don't have no cool okay so code patch add",
    "start": "2768680",
    "end": "2775839"
  },
  {
    "text": "login patch um the address I'm going to want",
    "start": "2775839",
    "end": "2781440"
  },
  {
    "text": "this to be patched at which is 804 85 5D which is the address of the first",
    "start": "2781440",
    "end": "2788880"
  },
  {
    "text": "string copy so I'm going to replace the first call to string copy um what I want to patch there is I want to",
    "start": "2788880",
    "end": "2796760"
  },
  {
    "text": "patch fix I want to patch something from fix login demo. and I want to patch the bit which calls the new",
    "start": "2797520",
    "end": "2804960"
  },
  {
    "text": "patch okay cool I need to do that twice because there's one uh one there are two",
    "start": "2806559",
    "end": "2812680"
  },
  {
    "text": "call to string copy so I'm going to apply the same the same patch to call our new patch again at the other the",
    "start": "2812680",
    "end": "2818760"
  },
  {
    "text": "other address which is um 8485",
    "start": "2818760",
    "end": "2825760"
  },
  {
    "text": "C9 C9 Okay cool so so I've now I'm constructing a patch file here so so",
    "start": "2826319",
    "end": "2832480"
  },
  {
    "text": "I've got two Patches at the moment to call my new patch now I need to actually put in put in the actual patch itself so",
    "start": "2832480",
    "end": "2839160"
  },
  {
    "text": "to do that I just I specified that it would be at this",
    "start": "2839160",
    "end": "2844720"
  },
  {
    "text": "location and uh fixed loging demo this time I'm going to actually put the patch in",
    "start": "2844720",
    "end": "2852240"
  },
  {
    "text": "itself Okay cool so I've added the patch and now I add the um add strill copy the a strill copy which I spoke about the",
    "start": "2853280",
    "end": "2859880"
  },
  {
    "text": "assembly version of Str copy",
    "start": "2859880",
    "end": "2864559"
  },
  {
    "text": "so a stroll",
    "start": "2867280",
    "end": "2872680"
  },
  {
    "text": "copy",
    "start": "2874720",
    "end": "2877720"
  },
  {
    "text": "oh as some oh there we",
    "start": "2888880",
    "end": "2892000"
  },
  {
    "text": "go Okay cool so so so I now have a patch file which which consists of patches",
    "start": "2895359",
    "end": "2901800"
  },
  {
    "text": "over the old old calls to string copy which to make them point to my new patch which calls stroll copy instead um so",
    "start": "2901800",
    "end": "2908800"
  },
  {
    "text": "now that I've got this patch file I apply it to my patch login demo code",
    "start": "2908800",
    "end": "2914480"
  },
  {
    "text": "patch apply patch login demo login",
    "start": "2914480",
    "end": "2921240"
  },
  {
    "text": "patch okay so I've now applied the patch onto the executable as you can see uh it just read in all the patches went that",
    "start": "2928400",
    "end": "2934960"
  },
  {
    "text": "that put it in put it onto the actual executable file like that and now what I should have is I should still",
    "start": "2934960",
    "end": "2941440"
  },
  {
    "text": "have okay so I've got like a normal login demo whatever it continues to work as normal as we can see",
    "start": "2941440",
    "end": "2949039"
  },
  {
    "text": "but no longer seg faults so basically I've just modified this program instead",
    "start": "2956599",
    "end": "2961799"
  },
  {
    "text": "of calling string copy it now calls strill copy so that it's safe so remove the vulnerability from this program am I",
    "start": "2961799",
    "end": "2968280"
  },
  {
    "text": "running for time okay um so what are the advantages of",
    "start": "2968280",
    "end": "2973559"
  },
  {
    "text": "binary patching um binary patching is extremely flexible you can do anything you'd like to to this program uh and",
    "start": "2973559",
    "end": "2979480"
  },
  {
    "text": "that's why it's a very common technique um it's permanent so so this program will never be vulnerable again okay it's",
    "start": "2979480",
    "end": "2986240"
  },
  {
    "text": "like if this was a set uid process program it would continue to work it's fine okay permanent and it has very",
    "start": "2986240",
    "end": "2992040"
  },
  {
    "text": "little performance impact that is it's extremely quick uh all I've done is add a few extra instructions it's very fast",
    "start": "2992040",
    "end": "2998240"
  },
  {
    "text": "okay so that's binary patching what about its disadvantages this is hard stuff this is not easy it's complex it's",
    "start": "2998240",
    "end": "3004240"
  },
  {
    "text": "Error prone it's time consuming uh which makes it very much something for people who are experienced",
    "start": "3004240",
    "end": "3010559"
  },
  {
    "text": "that or people who've got a lot of time on their hands um particularly the ASM code and the disassembly and it can also",
    "start": "3010559",
    "end": "3016040"
  },
  {
    "text": "be dangerous if you get it wrong you can you can easily end up with weird weird situations where you've just destroyed",
    "start": "3016040",
    "end": "3021480"
  },
  {
    "text": "the program um it's very hard to intercept Dynamic functions uh because you can't overwrite PLT",
    "start": "3021480",
    "end": "3027880"
  },
  {
    "text": "entries so you can't intercept all cost to print F very easily because the PLT gets overwritten by the by the dynamic",
    "start": "3027880",
    "end": "3033880"
  },
  {
    "text": "Linker and the program has to be restarted so if this is binded and you and you're a a really large ISP you",
    "start": "3033880",
    "end": "3040400"
  },
  {
    "text": "can't do it you have to restart the executable and that's not going to be allowed you're going to have to wait a week to apply a patch whatever until you",
    "start": "3040400",
    "end": "3046920"
  },
  {
    "text": "can get some scheduled downtime so uh so that can be a big problem with this stuff uh further disadvantages the",
    "start": "3046920",
    "end": "3052799"
  },
  {
    "text": "program executable has to be modified which some people find a bit scary and want to avoid uh and the entire code",
    "start": "3052799",
    "end": "3059040"
  },
  {
    "text": "which you end up patching in has to be relocatable that is you can't easily call Dynamic functions like printer or anything like that you can do it but",
    "start": "3059040",
    "end": "3065559"
  },
  {
    "text": "it's but it's hard um if you saw the worm presentation you would have seen that you have to construct your own",
    "start": "3065559",
    "end": "3071400"
  },
  {
    "text": "import address table although under Unix obviously you'd construct your own PLT um so you can't easily import functions",
    "start": "3071400",
    "end": "3078319"
  },
  {
    "text": "um and you end up having to make most C calls directly and so I don't know it's something to be avoided unless you've",
    "start": "3078319",
    "end": "3083960"
  },
  {
    "text": "had some experience with it or feel comfortable with it or have some time to do it um so previously I was going to speak",
    "start": "3083960",
    "end": "3090880"
  },
  {
    "text": "about uh Dynamic Linker stuff now but I'm not going to because I think incor patching rolls straight on from it um",
    "start": "3090880",
    "end": "3096079"
  },
  {
    "text": "incore patching is basically where we do the same idea we patch the executable but this time we're going to patch it while it's in memory and it is still",
    "start": "3096079",
    "end": "3102359"
  },
  {
    "text": "running okay um this is uh reasonably obvious all we have to do is we have to connect to the remote process as a",
    "start": "3102359",
    "end": "3108480"
  },
  {
    "text": "debugger using p trce or procfs uh depending on what's provided by our operating system and then we're just",
    "start": "3108480",
    "end": "3114000"
  },
  {
    "text": "going to manipulate the programs memory remotely um as with static patching we have the same needs we need to be able",
    "start": "3114000",
    "end": "3120480"
  },
  {
    "text": "to insert additional code and we need to be able to link the existing code to our new code so the question becomes as it was",
    "start": "3120480",
    "end": "3128319"
  },
  {
    "text": "before where do we put additional code well um obviously we we need this code to be inside a P memory page which is",
    "start": "3128319",
    "end": "3134839"
  },
  {
    "text": "marked as executable uh we we have a couple of op options we can override",
    "start": "3134839",
    "end": "3140160"
  },
  {
    "text": "existing unused code again find it uh we can use the segment padding rather than",
    "start": "3140160",
    "end": "3146520"
  },
  {
    "text": "the section padding segments are padded loadable segments are padded to page boundaries so that's normally 4,096",
    "start": "3146520",
    "end": "3153280"
  },
  {
    "text": "bites on most architectures these days which actually means that we have quite a significant amount of segment padding",
    "start": "3153280",
    "end": "3158559"
  },
  {
    "text": "it's quite useful um and and it's a fairly obvious option uh we can or one",
    "start": "3158559",
    "end": "3164520"
  },
  {
    "text": "other one other option which is weird but could actually be interesting to some people is that you know how I said there's the P header um segment which",
    "start": "3164520",
    "end": "3171880"
  },
  {
    "text": "contains the program headers at runtime but it isn't actually needed for some reason most compilers Mark that segment",
    "start": "3171880",
    "end": "3176960"
  },
  {
    "text": "as executable and they put it inside an executable segment so you can actually overwrite the program headers at execution time and uh because they're",
    "start": "3176960",
    "end": "3183839"
  },
  {
    "text": "not needed and just use them so they give you a little bit of space if you're if you're desperate but um and linking",
    "start": "3183839",
    "end": "3190359"
  },
  {
    "text": "in the additional code exactly as you did with uh file patching so basically it's very much like file patching you",
    "start": "3190359",
    "end": "3196160"
  },
  {
    "text": "just have different requirements for finding space inside the remote process so looking at this",
    "start": "3196160",
    "end": "3203759"
  },
  {
    "text": "one",
    "start": "3204160",
    "end": "3207160"
  },
  {
    "text": "okay um so we'll just we don't need that anymore okay so um if I do if I look at",
    "start": "3213960",
    "end": "3222760"
  },
  {
    "text": "login demo again okay um what we're looking at here is we can see that we've",
    "start": "3222760",
    "end": "3227839"
  },
  {
    "text": "got these loadable segments one of them is readable and executable the other one is readable and writable but you'll see that both of them are aligned to a page",
    "start": "3227839",
    "end": "3234480"
  },
  {
    "text": "boundary four 96 bytes the alignment field okay and so what that means is that this segment here which is",
    "start": "3234480",
    "end": "3240559"
  },
  {
    "text": "executable it's the actual code of the executable it's only 642 bytes long but",
    "start": "3240559",
    "end": "3245920"
  },
  {
    "text": "it's padded to 1,000 bytes long so we can actually use all of that space in between since it's guaranteed to be in",
    "start": "3245920",
    "end": "3252079"
  },
  {
    "text": "memory but it's not used are the executable so so that's where we can uh",
    "start": "3252079",
    "end": "3257200"
  },
  {
    "text": "where we can place our stuff so if we",
    "start": "3257200",
    "end": "3261680"
  },
  {
    "text": "just um ZX so the",
    "start": "3264079",
    "end": "3272280"
  },
  {
    "text": "thing it's there but it's only 642",
    "start": "3272280",
    "end": "3278839"
  },
  {
    "text": "long so we can uh start our patch at at for example uh 8048 700 or whatever",
    "start": "3278839",
    "end": "3287319"
  },
  {
    "text": "we've got plenty of space heaps of space there so um again we're going to construct a code patch but instead we're",
    "start": "3287319",
    "end": "3293880"
  },
  {
    "text": "going to apply it on the a question excuse is uh okay yeah that that's an",
    "start": "3293880",
    "end": "3301160"
  },
  {
    "text": "interesting question it's true um when when you connect as a as a debugger using procfs or pce uh page permissions",
    "start": "3301160",
    "end": "3308079"
  },
  {
    "text": "no longer count actually what you'll see if you actually look at kernel code for this stuff is that um is that uh the",
    "start": "3308079",
    "end": "3314160"
  },
  {
    "text": "colel when when you make a request to write to some memory inside the remote the remote process it will automatically",
    "start": "3314160",
    "end": "3319440"
  },
  {
    "text": "disable page protection on that page apply your patch and then reenable page protection uh there was a bug in Old",
    "start": "3319440",
    "end": "3326000"
  },
  {
    "text": "Linux Kels which didn't reapply page protection which led to weird problems but but basically no you're you're not",
    "start": "3326000",
    "end": "3331880"
  },
  {
    "text": "subject to any restrictions inside the remote process space otherwise debuggers wouldn't be able to do all the cool stuff they do um so anyway so so so",
    "start": "3331880",
    "end": "3339520"
  },
  {
    "text": "we've got all plenty of space we've got heaper space so we're going to construct a normal code",
    "start": "3339520",
    "end": "3345078"
  },
  {
    "text": "patch patch and we're just going to uh actually this this time instead of um",
    "start": "3345960",
    "end": "3351240"
  },
  {
    "text": "instead of fixing the process let's actually do something different with it what a blackout might do let's actually see if we can backo the process at",
    "start": "3351240",
    "end": "3358000"
  },
  {
    "text": "runtime um so to do that we're going to use",
    "start": "3358000",
    "end": "3364200"
  },
  {
    "text": "uh okay am I running out of time yeah I am okay so I'll have to go really quickly through this anyway um this is",
    "start": "3375640",
    "end": "3381920"
  },
  {
    "text": "another assembly patch again um uh patch a call to to string copy okay I patch it",
    "start": "3381920",
    "end": "3388359"
  },
  {
    "text": "to point to this patch what this what this patch does is um is it calls stroll",
    "start": "3388359",
    "end": "3393480"
  },
  {
    "text": "copy as normal that this assembly stroll copy so in the process of backdooring the process it actually fixes one of the",
    "start": "3393480",
    "end": "3400319"
  },
  {
    "text": "overflows um then then then after it's done that it checks to see whe whether the string uh here here it checks to see",
    "start": "3400319",
    "end": "3408160"
  },
  {
    "text": "whether the string which was which was copied is actually the string let me in okay if the string was was let me in",
    "start": "3408160",
    "end": "3414520"
  },
  {
    "text": "then it calls um where where am",
    "start": "3414520",
    "end": "3419640"
  },
  {
    "text": "I I can't see oh yeah sorry yeah if if if the",
    "start": "3419640",
    "end": "3425240"
  },
  {
    "text": "string was equal to let me in then then it uh then it falls through to here and it uh and it calls shell code and it",
    "start": "3425240",
    "end": "3431200"
  },
  {
    "text": "throws a shell so basically this is a magic login style back door okay",
    "start": "3431200",
    "end": "3436720"
  },
  {
    "text": "um so I'll construct the",
    "start": "3436720",
    "end": "3440680"
  },
  {
    "text": "patch cool um so code patch add okay I'm going",
    "start": "3443799",
    "end": "3449720"
  },
  {
    "text": "to construct a new login patch uh this time I'm going to patch",
    "start": "3449720",
    "end": "3455079"
  },
  {
    "text": "inside the inside that segment which we were talking about",
    "start": "3455079",
    "end": "3460400"
  },
  {
    "text": "700 um and I'm going to patch",
    "start": "3460400",
    "end": "3467559"
  },
  {
    "text": "patches demo. patch",
    "start": "3469280",
    "end": "3476799"
  },
  {
    "text": "um call patch patch Okay cool so I'm going to",
    "start": "3478960",
    "end": "3485119"
  },
  {
    "text": "apply that patch um actually the first thing I should do what am I doing code patch first thing I'm going to do is is",
    "start": "3485119",
    "end": "3492000"
  },
  {
    "text": "I'm going to patch over one of the uh over the actual the first string copy",
    "start": "3492000",
    "end": "3497319"
  },
  {
    "text": "which as we saw before was at 848 55d okay so do that I'm going to take",
    "start": "3497319",
    "end": "3506720"
  },
  {
    "text": "and I'm going to patch that with call patch and in call Patch okay cool that then oh doesn't",
    "start": "3508799",
    "end": "3517359"
  },
  {
    "text": "matter uh that then I'm going to patch in the actual the full patch at 8048",
    "start": "3517359",
    "end": "3524240"
  },
  {
    "text": "700 n patch okay that then I'm going to copy in uh AOL copy",
    "start": "3527960",
    "end": "3536720"
  },
  {
    "text": "I troll",
    "start": "3548280",
    "end": "3550880"
  },
  {
    "text": "copy um and I'm going to copy it to 8048",
    "start": "3556039",
    "end": "3562599"
  },
  {
    "text": "800 call um then I'm going to copy in uh an assembly version of string",
    "start": "3563119",
    "end": "3570280"
  },
  {
    "text": "compare and I'm going to copy it to 8048 900 okay that and then I'm going to copy",
    "start": "3577640",
    "end": "3586440"
  },
  {
    "text": "in uh the Shell Code it's 8048",
    "start": "3586440",
    "end": "3593119"
  },
  {
    "text": "a",
    "start": "3593640",
    "end": "3596640"
  },
  {
    "text": "cool um so now what I what I'm what I'm actually going to have to do is I'm going to apply this to",
    "start": "3608680",
    "end": "3615680"
  },
  {
    "text": "the running version of login demo Okay cool so login demo is running",
    "start": "3615680",
    "end": "3622200"
  },
  {
    "text": "okay code patch core um with specify specifying the",
    "start": "3622200",
    "end": "3629720"
  },
  {
    "text": "PID um and the login patch and I hope this",
    "start": "3629720",
    "end": "3635160"
  },
  {
    "text": "works oh sorry it was login typo yeah okay anyway so basically",
    "start": "3635160",
    "end": "3641240"
  },
  {
    "text": "what it does is it is it took the the call Patch size eight applied it to that virtual memory address uh took the",
    "start": "3641240",
    "end": "3647440"
  },
  {
    "text": "actual patch itself applied it there took stroll copy applied it there took string compare applied it there took um",
    "start": "3647440",
    "end": "3653319"
  },
  {
    "text": "the Shell Code and applied it there okay so what should now happen is that hopefully the program won't",
    "start": "3653319",
    "end": "3660160"
  },
  {
    "text": "crash okay cool um so I have to apply it again obviously since it's applied at runtime so if I apply it again this time",
    "start": "3660160",
    "end": "3666799"
  },
  {
    "text": "we should actually see that that the first by default the first um uh buffer overflow should be fixed so let's see",
    "start": "3666799",
    "end": "3672720"
  },
  {
    "text": "whether that's the case doesn't So Okay so we've",
    "start": "3672720",
    "end": "3678480"
  },
  {
    "text": "dynamically patched the first buffer overflow vulnerability but uh much more evenly than that we've done",
    "start": "3678480",
    "end": "3687079"
  },
  {
    "text": "this yep so you can see that it throws a shell so if you use let me in but it's",
    "start": "3687319",
    "end": "3693319"
  },
  {
    "text": "Stone a shell there so basically you can dynamically at runtime also patch vulnerabilities but also uh introduce",
    "start": "3693319",
    "end": "3700000"
  },
  {
    "text": "back doors into programs so that's demo 2 I'm running really late on time I",
    "start": "3700000",
    "end": "3706160"
  },
  {
    "text": "apologize for that it's a bit bit bad because we started late but um okay so um what are the advantages of",
    "start": "3706160",
    "end": "3714039"
  },
  {
    "text": "incor patching um incor patching is very flexible again exactly like patching uh executables on disk you can do anything",
    "start": "3714039",
    "end": "3721039"
  },
  {
    "text": "you'd like to with it um uh it's non-permanent which is in some cases is a big Advantage there are times when you",
    "start": "3721039",
    "end": "3727039"
  },
  {
    "text": "don't want this stuff to remain um uh and it can be performed on any running process which is obviously its big its",
    "start": "3727039",
    "end": "3733400"
  },
  {
    "text": "big uh big cool thing um what of its disadvantages it has exactly the same",
    "start": "3733400",
    "end": "3738520"
  },
  {
    "text": "disadvantages as it does for as you do have for file patching it's complex it's Error prone and it's timec consuming and",
    "start": "3738520",
    "end": "3744240"
  },
  {
    "text": "and it's much more dangerous than than actually patching on dis 2 actually um you can very easily kill the running",
    "start": "3744240",
    "end": "3749400"
  },
  {
    "text": "program if you change something which is in the process of being executed while the program is still running uh very",
    "start": "3749400",
    "end": "3754880"
  },
  {
    "text": "easy to kill it um if you get it wrong it's dead you know you have to be very careful when you're doing this stuff it",
    "start": "3754880",
    "end": "3761240"
  },
  {
    "text": "really is error prone and timec consuming um it's okay so believe it or not we're now actually going on to the",
    "start": "3761240",
    "end": "3766799"
  },
  {
    "text": "simplest form of modifying uh programs and processes which I'm going to talk",
    "start": "3766799",
    "end": "3772558"
  },
  {
    "text": "about",
    "start": "3773359",
    "end": "3776359"
  },
  {
    "text": "okay so so we've talked a lot about the dynamic loader okay and how the dynamic loader it resolves all of these external",
    "start": "3778680",
    "end": "3784720"
  },
  {
    "text": "symbols for you okay um uh in fact it resolves all of the dynamic relocations",
    "start": "3784720",
    "end": "3790359"
  },
  {
    "text": "which refer to the got for the data relocations and the PLT for the function relocations how does it work okay well",
    "start": "3790359",
    "end": "3796400"
  },
  {
    "text": "as we said the first thing it does is it reads in the DT needed entries and lo and works out which shared libraries are",
    "start": "3796400",
    "end": "3801440"
  },
  {
    "text": "required it loads them into memory okay adds them to a thing called the link map",
    "start": "3801440",
    "end": "3806680"
  },
  {
    "text": "then it goes on to process the relocations so if we actually look at what the link map looks like we can see this okay if I have a test program okay",
    "start": "3806680",
    "end": "3814160"
  },
  {
    "text": "it's in the link map and there's a pointer to the Base address where where this program is loaded okay if I've got",
    "start": "3814160",
    "end": "3820119"
  },
  {
    "text": "libc which all C programs have that then there's a pointer to the Base address of libc in memory at libben curses for",
    "start": "3820119",
    "end": "3827520"
  },
  {
    "text": "example uh pointer again term cap pointer so basically the link map tells us the structure of the program in",
    "start": "3827520",
    "end": "3833319"
  },
  {
    "text": "memory um so how so how does it actually resolve things well when it when it's",
    "start": "3833319",
    "end": "3838960"
  },
  {
    "text": "processing a relocation the dynamic link of looks through this map okay it's looking for a certain function let's say",
    "start": "3838960",
    "end": "3844960"
  },
  {
    "text": "it's looking for print F okay it searches each of the libraries exported symbols all of their Dynamic symbol",
    "start": "3844960",
    "end": "3850400"
  },
  {
    "text": "tables okay uh it tries to find a matching symbol name uh and it tries to find a matching symbol name which is not",
    "start": "3850400",
    "end": "3857160"
  },
  {
    "text": "declared as a weak function uh and the first match which it which it finds is the winner so in other words it looks through the link map sequentially tries",
    "start": "3857160",
    "end": "3863920"
  },
  {
    "text": "to find a match if it finds a match boom that's the resolution and it resolves that function um so the trick to to to",
    "start": "3863920",
    "end": "3871240"
  },
  {
    "text": "doing interesting things with the dynamic Linker is to be the winner the trick is to get your library loaded first so that whenever the dynamic",
    "start": "3871240",
    "end": "3877400"
  },
  {
    "text": "Linker is looking for a dynamic function which as I said is normally done lazily when it's looking for something your",
    "start": "3877400",
    "end": "3883000"
  },
  {
    "text": "library will will be the supplier of that function okay um so so your library",
    "start": "3883000",
    "end": "3888640"
  },
  {
    "text": "if you get it loaded first it will be the winner for all of its exported symbols and it can therefore intercept any Dynamic function called or for",
    "start": "3888640",
    "end": "3894640"
  },
  {
    "text": "example a call to printer for any other libc function or whatever function you'd like so the question then becomes okay I",
    "start": "3894640",
    "end": "3900760"
  },
  {
    "text": "can now intercept Dynamic function calls how can I get in first um there are heaps of ways to get in first one of",
    "start": "3900760",
    "end": "3907200"
  },
  {
    "text": "them is to modify the DT needed records as I said the DT NE needed records specify which libraries are required",
    "start": "3907200",
    "end": "3913920"
  },
  {
    "text": "okay if you if you modify these records and you make your library the first one you'll be mapped in first and you will",
    "start": "3913920",
    "end": "3919839"
  },
  {
    "text": "therefore be always be the winner for any symbols you export um and to do that you can just overwrite overwrite another",
    "start": "3919839",
    "end": "3926839"
  },
  {
    "text": "Library entry um for some other Library which is required and then and then um",
    "start": "3926839",
    "end": "3932480"
  },
  {
    "text": "and then in inside your library you can you can be dependent on that other Library so so you don't destroy the",
    "start": "3932480",
    "end": "3937920"
  },
  {
    "text": "executable you just override overwrite one of its dependencies and then make one of its dependencies one of your",
    "start": "3937920",
    "end": "3943920"
  },
  {
    "text": "dependencies so that all of the stuff still gets loaded but you just happen to be first um uh another option is is to",
    "start": "3943920",
    "end": "3950200"
  },
  {
    "text": "move the dynamic segment and recreate so that you can add a entirely new DT needed DT needed entry without",
    "start": "3950200",
    "end": "3956559"
  },
  {
    "text": "overriding an old one um and then the most obvious one and",
    "start": "3956559",
    "end": "3961640"
  },
  {
    "text": "this is a very common technique you probably all would have seen it if you're familiar much with Unix uh the LD preload environment variable specifies",
    "start": "3961640",
    "end": "3968880"
  },
  {
    "text": "the names of libraries which should which should be loaded by the dynamic Linker before all other libraries this",
    "start": "3968880",
    "end": "3974319"
  },
  {
    "text": "is really commonly used um if you've seen any of the stuff which transparently soif applications or",
    "start": "3974319",
    "end": "3980240"
  },
  {
    "text": "anything like that that's how it all works it gets its Library loaded first and it overrides lib C",
    "start": "3980240",
    "end": "3985880"
  },
  {
    "text": "functions um God okay um so I I'm out of time for",
    "start": "3985880",
    "end": "3993760"
  },
  {
    "text": "the first half did you guys want to keep going and see the demo of this stuff or did you want to go get coffee and try",
    "start": "3993760",
    "end": "3999160"
  },
  {
    "text": "and squeeze it in on the other side or not interested in it what's what's the idea keep keep going yeah okay um so the",
    "start": "3999160",
    "end": "4009279"
  },
  {
    "text": "uh so so basically the the once you once you've got your library in first you can intercept all the Dynamic function calls",
    "start": "4009279",
    "end": "4015200"
  },
  {
    "text": "okay so that's cool but usually what you'll need is your intercepting function will need to call the old function and that's really easy because",
    "start": "4015200",
    "end": "4022559"
  },
  {
    "text": "the dynamic Linker provides you a couple of functions one of them is DL open to open a library the other one is DL Sim",
    "start": "4022559",
    "end": "4028279"
  },
  {
    "text": "to get the address of a symbol in a library uh and and if you specify rtld next instead of giving it a library the",
    "start": "4028279",
    "end": "4034839"
  },
  {
    "text": "dynamic Linker will tell you what will tell you where that symbol is located in in any Library which was loaded after",
    "start": "4034839",
    "end": "4040920"
  },
  {
    "text": "you so that makes this really trivial so all you do in inside your code is you ask the dynamic Linker using DL Sim give",
    "start": "4040920",
    "end": "4047440"
  },
  {
    "text": "me the address of this function in a library which was loaded after me and you can then call you can then call the",
    "start": "4047440",
    "end": "4052720"
  },
  {
    "text": "old function so let's take a look at this example um because uh LD preload",
    "start": "4052720",
    "end": "4059079"
  },
  {
    "text": "has been well and truly done to death um I'm actually not going to do LD preload because it's boring um but instead we're",
    "start": "4059079",
    "end": "4065079"
  },
  {
    "text": "actually going to we're going to do this various manipulation of the DT needed entries um if you'd like we I have two",
    "start": "4065079",
    "end": "4071000"
  },
  {
    "text": "demonstrations here we can just do one of them or we can do both of them or whichever one you'd like to do we can uh",
    "start": "4071000",
    "end": "4076880"
  },
  {
    "text": "we can either fix the the demonstration program using this technique we can back door the demonstration uh program using",
    "start": "4076880",
    "end": "4083119"
  },
  {
    "text": "this technique or we can do both which would you guys like audience",
    "start": "4083119",
    "end": "4088240"
  },
  {
    "text": "participation would you like to see it fixed how' I know everyone to say that",
    "start": "4088240",
    "end": "4095520"
  },
  {
    "text": "okay so so so let's back to the thing no worries um so yeah so what we'll actually do is we'll do we'll do the",
    "start": "4095520",
    "end": "4101758"
  },
  {
    "text": "most advanced way of doing this then um um one of the obvious ways which you can do this um if I I load up BW I'm going to",
    "start": "4101759",
    "end": "4111798"
  },
  {
    "text": "get out of this uh and if I go into hex sorry heximal mode um what I",
    "start": "4111799",
    "end": "4120040"
  },
  {
    "text": "can actually do is is I can find inside here if I just just hold on I'll do the d d so so I'm going to look at the",
    "start": "4120040",
    "end": "4126278"
  },
  {
    "text": "Dynamics set okay so you can see what I was talking about see the DT needed entry it specifies the shared Library",
    "start": "4126279",
    "end": "4132640"
  },
  {
    "text": "which is required and in this case it's libc.so do6 um one of my options is to",
    "start": "4132640",
    "end": "4138040"
  },
  {
    "text": "Simply overwrite that string what I can actually do is I can overwrite lib C.S o.6 and point it to my new shared",
    "start": "4138040",
    "end": "4144000"
  },
  {
    "text": "library and that shared Library can uh can can then be dependent on libc.so do6",
    "start": "4144000",
    "end": "4149600"
  },
  {
    "text": "to make sure that it's still loaded the requirement is still loaded um uh the problem with that is is that if I",
    "start": "4149600",
    "end": "4155318"
  },
  {
    "text": "overwrite libc.so do6 I've got 1 2 3 4 5 6 seven eight nine bytes there at all",
    "start": "4155319",
    "end": "4161798"
  },
  {
    "text": "that's all I have nine bytes that make means that that that I could only patch it with something like extremely short",
    "start": "4161799",
    "end": "4167120"
  },
  {
    "text": "like uh fix doso or or sltm f.o or you know whatever you don't",
    "start": "4167120",
    "end": "4174758"
  },
  {
    "text": "have much room in there um which can which can make it an annoying way to go",
    "start": "4174759",
    "end": "4180199"
  },
  {
    "text": "um so I'm going to show the most advanced way and what what we're actually going to do is we're going to um is we're going to uh completely",
    "start": "4180199",
    "end": "4188040"
  },
  {
    "text": "relocate this entire this program is going to completely it's going to add a couple of new segments to the executable",
    "start": "4188040",
    "end": "4193798"
  },
  {
    "text": "it's going to completely relocate this entire table and it's going to add a new string so that we can specify as long a",
    "start": "4193799",
    "end": "4199400"
  },
  {
    "text": "libraries we really want um uh which this is actually really",
    "start": "4199400",
    "end": "4204800"
  },
  {
    "text": "non-trivial and it's quite difficult to make work but it does work so so let's demonstrate that okay so what we have is",
    "start": "4204800",
    "end": "4210760"
  },
  {
    "text": "we have um is we have Libs um and we've",
    "start": "4210760",
    "end": "4219320"
  },
  {
    "text": "got okay now so basically obviously you can see this is really trivial code there's nothing special here we have the",
    "start": "4221840",
    "end": "4228520"
  },
  {
    "text": "we have uh a function pointer to the old string copy um our replacement string copy here a declaration of our",
    "start": "4228520",
    "end": "4235000"
  },
  {
    "text": "replacement string copy we in in our init function for our library we get the address of the old string copy using the",
    "start": "4235000",
    "end": "4240679"
  },
  {
    "text": "rtld next which I was talking about okay then we have our replacement string copy",
    "start": "4240679",
    "end": "4246080"
  },
  {
    "text": "which will always win remember we're always going to be the string copy because we're going to be the first okay",
    "start": "4246080",
    "end": "4251440"
  },
  {
    "text": "um then all it does is it string compares the what's what's entered with let me in um if it's let me in then it",
    "start": "4251440",
    "end": "4257560"
  },
  {
    "text": "just execs a shell otherwise it calls the old string copy okay so it's trivial it's like I don't know how many lines",
    "start": "4257560",
    "end": "4263320"
  },
  {
    "text": "that is like 10 lines or 15 lines it's just ridiculously easy and and patching it",
    "start": "4263320",
    "end": "4269360"
  },
  {
    "text": "and fixing the problem is as easy just let me quickly show you that I won't actually run it but just show you that I",
    "start": "4269360",
    "end": "4275920"
  },
  {
    "text": "mean I mean I went a bit Advanced here but but basically you do exactly the same thing get the old string copy then",
    "start": "4275920",
    "end": "4281199"
  },
  {
    "text": "I just checked where where we were called from if were called from a vulnerable string copy then I called string end copy so no worries um so what",
    "start": "4281199",
    "end": "4290080"
  },
  {
    "text": "what we're going to do is is we're going to modify um the login demo using ad",
    "start": "4290080",
    "end": "4295600"
  },
  {
    "text": "Library so if I go ad Library uh login",
    "start": "4295600",
    "end": "4302079"
  },
  {
    "text": "demo God my typing is not going well today new login demo okay um and what",
    "start": "4303960",
    "end": "4309920"
  },
  {
    "text": "I'm going to what and I'm going to specify that that I want uh this to to be",
    "start": "4309920",
    "end": "4316920"
  },
  {
    "text": "um okay so so so I want to add this library to the dependencies of the executable um if I do that uh basically",
    "start": "4319600",
    "end": "4327800"
  },
  {
    "text": "what this I mean if we look at the just let me quickly show you what I mean here if we look at the old login demo like",
    "start": "4327800",
    "end": "4334400"
  },
  {
    "text": "that and we look at the new login",
    "start": "4334400",
    "end": "4338440"
  },
  {
    "text": "demo what am I do today",
    "start": "4342080",
    "end": "4349920"
  },
  {
    "text": "read yeah anyway sorry um and you can see in in the process of adding of adding the uh the new the the new",
    "start": "4350760",
    "end": "4359320"
  },
  {
    "text": "library requirement I've had to add a new segment here onto the end exactly like before except now it's at a",
    "start": "4359320",
    "end": "4364960"
  },
  {
    "text": "different address and all that sort of stuff but basically this new segment contains this new uh requirement this",
    "start": "4364960",
    "end": "4370280"
  },
  {
    "text": "new Dynamic Library requirement so if I do a read - of the old login",
    "start": "4370280",
    "end": "4376880"
  },
  {
    "text": "demo uh sorry just D okay so you can see the old",
    "start": "4378320",
    "end": "4385400"
  },
  {
    "text": "one okay uh see how new login demo has a new DT needed and the DT needed",
    "start": "4387960",
    "end": "4393159"
  },
  {
    "text": "requirement is this um so with with the full path so we can see that that now",
    "start": "4393159",
    "end": "4399560"
  },
  {
    "text": "this will always be first as you can see it's a first DT needed I'll always get in first for any Library I export um and",
    "start": "4399560",
    "end": "4405120"
  },
  {
    "text": "libc is second so I will always get string copy um so if I run",
    "start": "4405120",
    "end": "4411199"
  },
  {
    "text": "this new login demo okay um so whatever you know it just continues to run as",
    "start": "4411199",
    "end": "4417159"
  },
  {
    "text": "normal but it's now got our library inside it um so if I go let me in the magic username it just",
    "start": "4417159",
    "end": "4423520"
  },
  {
    "text": "runs a shell so that's trivial that's a really easy way of modifying a a program making",
    "start": "4423520",
    "end": "4430440"
  },
  {
    "text": "it do cool stuff and it can also be very easily used to uh to to fix programs or",
    "start": "4430440",
    "end": "4435840"
  },
  {
    "text": "to back door it all of this stuff all of this technology if you can use it for good you can use it for evil um so I",
    "start": "4435840",
    "end": "4443280"
  },
  {
    "text": "guess uh just try and use it for good so anyway um what are the advantage of the",
    "start": "4443280",
    "end": "4448639"
  },
  {
    "text": "dynamic link tricks um all the interception is done in C it's easy it's simple and it's safe provided you write",
    "start": "4448639",
    "end": "4454560"
  },
  {
    "text": "good inter good routines to replace the old ones okay um LD preload me the LD",
    "start": "4454560",
    "end": "4460440"
  },
  {
    "text": "preload method is non-permanent um the disadvantage of the dynamic link attrix well you can",
    "start": "4460440",
    "end": "4466120"
  },
  {
    "text": "consider it a disadvantage that it's not permanent uh the DT needed approach requires modification of the executable",
    "start": "4466120",
    "end": "4471760"
  },
  {
    "text": "and the new library to be in place at all times okay because you've added this dependency if this Library goes away the",
    "start": "4471760",
    "end": "4478120"
  },
  {
    "text": "program will cease to work because it's got this new dependency uh and the program must be restarted again uh it's",
    "start": "4478120",
    "end": "4483679"
  },
  {
    "text": "not very good if you've got bind and you need to patch it in your a major ISP you simply can't do it so that's the end of",
    "start": "4483679",
    "end": "4489120"
  },
  {
    "text": "part one are there any questions or is everyone in a rush to get a coffee okay",
    "start": "4489120",
    "end": "4496600"
  },
  {
    "text": "cool",
    "start": "4522199",
    "end": "4525199"
  },
  {
    "text": "e",
    "start": "4552199",
    "end": "4555199"
  },
  {
    "text": "e",
    "start": "4582120",
    "end": "4585120"
  },
  {
    "text": "e",
    "start": "4612080",
    "end": "4615080"
  }
]