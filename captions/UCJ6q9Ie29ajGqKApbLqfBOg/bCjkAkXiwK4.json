[
  {
    "start": "0",
    "end": "500000"
  },
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "thank you okay so my name is Maxim rosibelon and",
    "start": "6859",
    "end": "14219"
  },
  {
    "text": "together with my colleague Damiano miloti we are going to speak about the titanium chip and how we performed in a",
    "start": "14219",
    "end": "19500"
  },
  {
    "text": "rability research on it and you may have noticed that nowadays smartphone vendors tend to integrate Hardware security",
    "start": "19500",
    "end": "25980"
  },
  {
    "text": "modules in their smartphones and on this module relies the most critical security critical security features of the device",
    "start": "25980",
    "end": "33840"
  },
  {
    "text": "and this module comes with a cryptographic capabilities and Hardware protections against Hardware reverse",
    "start": "33840",
    "end": "40079"
  },
  {
    "text": "engineering or fault injection and most of their design is both hardware and",
    "start": "40079",
    "end": "45660"
  },
  {
    "text": "software is only known by the chief manufacturer sometimes the vendor",
    "start": "45660",
    "end": "50879"
  },
  {
    "text": "yet for US security researchers are these components are working the whole device security which is pretty much the",
    "start": "50879",
    "end": "57539"
  },
  {
    "text": "motivation for this talk today we will show you how we perform the vulnerability research on the titanium",
    "start": "57539",
    "end": "64619"
  },
  {
    "text": "chip so a security chip designed by Google for their pixel devices and we hope that what we will show you today",
    "start": "64619",
    "end": "71880"
  },
  {
    "text": "um we will be useful to other researchers who will face similar targets",
    "start": "71880",
    "end": "77400"
  },
  {
    "text": "so uh we all both security researchers at quarks lab and we are working in a",
    "start": "77400",
    "end": "83220"
  },
  {
    "text": "team that deals with uh embedded devices and we did a Target and we also very",
    "start": "83220",
    "end": "90479"
  },
  {
    "text": "curious about mobile mobile targets now we are going to speak about the titanium",
    "start": "90479",
    "end": "96900"
  },
  {
    "text": "chip so it's in fact um yesterday there were this great talk",
    "start": "96900",
    "end": "102659"
  },
  {
    "text": "about some folks at Google about how the red team the the Titan M2 device so the",
    "start": "102659",
    "end": "109259"
  },
  {
    "text": "Titan device we are speaking uh about today is the old generation one and on",
    "start": "109259",
    "end": "116460"
  },
  {
    "text": "this device it has been introduced in fact starting from the pixel 3 and up to the the pixel",
    "start": "116460",
    "end": "123119"
  },
  {
    "text": "5 I guess and on this device you will um you will um will realize the critical",
    "start": "123119",
    "end": "129660"
  },
  {
    "text": "security features uh of the smartphone and among them you will find the secure boot",
    "start": "129660",
    "end": "136020"
  },
  {
    "text": "you will find the unlock feature um using the pin code on password and",
    "start": "136020",
    "end": "141780"
  },
  {
    "text": "also the key store which is probably the most important one for us today",
    "start": "141780",
    "end": "146900"
  },
  {
    "text": "uh this feature allows Android applications to generate and use keys",
    "start": "146900",
    "end": "152160"
  },
  {
    "text": "from within the safe environment meaning the Titan M chip and whenever this feature relies on a security chip it is",
    "start": "152160",
    "end": "158819"
  },
  {
    "text": "called strongbox now it is important to keep in mind that this chip is separated from the main CPU",
    "start": "158819",
    "end": "166260"
  },
  {
    "text": "from the application processor you have one hand the main system on chip that runs Android and its application and you",
    "start": "166260",
    "end": "172739"
  },
  {
    "text": "have another chip the Titan and Chip they communicate together through an Hardware boss as a client server model",
    "start": "172739",
    "end": "179580"
  },
  {
    "text": "now according to Google this chip has been introduced in order to mitigate a",
    "start": "179580",
    "end": "185220"
  },
  {
    "text": "wide range of side Channel attacks that were impacting the arm trade zone where",
    "start": "185220",
    "end": "190260"
  },
  {
    "text": "previously uh the features I mentioned were implemented into",
    "start": "190260",
    "end": "195840"
  },
  {
    "text": "now this Titan m is based on aux um cortex M3 architecture which is quite",
    "start": "195840",
    "end": "201599"
  },
  {
    "text": "common for microcontrollers the firmware is close to us but it is based on an open source OS called EC EC stands for",
    "start": "201599",
    "end": "209220"
  },
  {
    "text": "embed controller and it's uh it's designed by Google and it targets the",
    "start": "209220",
    "end": "214560"
  },
  {
    "text": "various microcontrollers of the Chrome OS Project which is why it's quite simple and small for example there is",
    "start": "214560",
    "end": "220920"
  },
  {
    "text": "pretty much no Dynamic allocation in it and most of the code is running into a",
    "start": "220920",
    "end": "226379"
  },
  {
    "text": "task that can be compared to applications in bigger os's now the two Hardware bosses that are interesting for",
    "start": "226379",
    "end": "232860"
  },
  {
    "text": "us today or first of all the SPI boss that is used to communicate with the application processor and with Android",
    "start": "232860",
    "end": "238879"
  },
  {
    "text": "and the uart bus that is not available by default but we will show you how you",
    "start": "238879",
    "end": "243959"
  },
  {
    "text": "can find it on some devices and the uart is used for um for the logs and a minimalistic",
    "start": "243959",
    "end": "249480"
  },
  {
    "text": "console now let's zoom into the way Android uh communicates uh with the Titan name so",
    "start": "249480",
    "end": "257100"
  },
  {
    "text": "you have the SPI boss and uh on the main CPU you have a kernel driver that will",
    "start": "257100",
    "end": "262199"
  },
  {
    "text": "handle the SPI communication and it exposes an IO CTL interface uh to the to the demons and in fact you",
    "start": "262199",
    "end": "269280"
  },
  {
    "text": "have only one demon and artery that communicates with this driver it's called CWD and its role is to dispatch",
    "start": "269280",
    "end": "275160"
  },
  {
    "text": "the values messages received from services to the driver now these Services I call them here Hal",
    "start": "275160",
    "end": "281820"
  },
  {
    "text": "for Hardware abstraction layer there is one service per functionality",
    "start": "281820",
    "end": "286919"
  },
  {
    "text": "so one for Crystal one for wither and um this service will translate",
    "start": "286919",
    "end": "293840"
  },
  {
    "text": "the generic Android API into something custom and here to do",
    "start": "293840",
    "end": "299639"
  },
  {
    "text": "so they use protobuf a famous serialization framework designed by Google and thanks for us in fact the the",
    "start": "299639",
    "end": "307259"
  },
  {
    "text": "definitions the protobab definitions are available in the iosp repositories so it will be quite convenient for the",
    "start": "307259",
    "end": "313979"
  },
  {
    "text": "different tools that will be present today it is not the first time we speak about",
    "start": "313979",
    "end": "320220"
  },
  {
    "text": "the Titan and chip in fact last year and like at Europe we presented the first stages of our research on this uh on",
    "start": "320220",
    "end": "327660"
  },
  {
    "text": "this chip and it can be summarized as the following so the first thing we did was to reverse uh the VMware we",
    "start": "327660",
    "end": "333720"
  },
  {
    "text": "identified the firmware file and the next thing was to in order to help us in",
    "start": "333720",
    "end": "338940"
  },
  {
    "text": "this reverse step we wanted to interact with the chip and first of all on Audrey we",
    "start": "338940",
    "end": "346680"
  },
  {
    "text": "implemented a Frida script in order to sniff all the communications going on so we hooked the citadeli demon and thanks",
    "start": "346680",
    "end": "352199"
  },
  {
    "text": "to that we were able to seal the messages sent by the applications and we also implemented our tool that we",
    "start": "352199",
    "end": "358560"
  },
  {
    "text": "call nose clients in order to send Customs custom commands to the chip now all tools only run on Android but",
    "start": "358560",
    "end": "366180"
  },
  {
    "text": "there are some commands that will exchange uh between uh with the with the chip by them that are sent to the chip",
    "start": "366180",
    "end": "372180"
  },
  {
    "text": "Sorry by the bootloader of the main CPU and in order to see what's going on we",
    "start": "372180",
    "end": "377520"
  },
  {
    "text": "wanted to do the same things on the hardware level and this is the picture you see on the left uh it's probably the",
    "start": "377520",
    "end": "383639"
  },
  {
    "text": "most impressive thing that we presented at this visually last year thanks to the",
    "start": "383639",
    "end": "388860"
  },
  {
    "text": "Magic Hands of our colleague Philippe the one uh he was able to solve the ratio of the 64 pins",
    "start": "388860",
    "end": "395759"
  },
  {
    "text": "of the chip onto a breaker board and then back to the the footprint uh on the",
    "start": "395759",
    "end": "402120"
  },
  {
    "text": "on the smartphone and thanks to that we were able to uh interact with the chip from the hardware level",
    "start": "402120",
    "end": "408479"
  },
  {
    "text": "the next thing we did was to find vulnerabilities and the most important",
    "start": "408479",
    "end": "413639"
  },
  {
    "text": "one was a downgrade issue that allowed us to flash any old VMware",
    "start": "413639",
    "end": "419819"
  },
  {
    "text": "and with a side effect that's all the debts I would be erased from the chip Now using this vulnerability uh we have",
    "start": "419819",
    "end": "426180"
  },
  {
    "text": "been able to downgrade into an old VMware on which we discovered uh we",
    "start": "426180",
    "end": "431520"
  },
  {
    "text": "notified that one day vulnerability that we then exploited that and it allowed us to execute God on the chip",
    "start": "431520",
    "end": "437759"
  },
  {
    "text": "and in the end to leak values hidden parts of the firmware including the bootron",
    "start": "437759",
    "end": "443039"
  },
  {
    "text": "now today we are going to speak about fuzzing and how it how useful it can be",
    "start": "443039",
    "end": "448800"
  },
  {
    "text": "on this target even though it's quite constrained there is no uh we don't have the sources there are a lot of Hardware",
    "start": "448800",
    "end": "454860"
  },
  {
    "text": "interactions but we can get interesting results so we will cover two approaches",
    "start": "454860",
    "end": "460020"
  },
  {
    "text": "first of all the Black Box fuzzing uh in that case we don't have any idea of what's going on inside the chip",
    "start": "460020",
    "end": "467039"
  },
  {
    "text": "and we will also cover the immigration based fuzzing where we have a lot more insight of what's going on yet we will",
    "start": "467039",
    "end": "474180"
  },
  {
    "text": "need uh we will show you a few tricks to optimize the results so the next thing is that we will show",
    "start": "474180",
    "end": "480360"
  },
  {
    "text": "you how we exploited without any debuggers or stack traces of neurability that we discovered and how thanks to",
    "start": "480360",
    "end": "486180"
  },
  {
    "text": "this vulnerability we have been able to execute code on the Chip And to",
    "start": "486180",
    "end": "491280"
  },
  {
    "text": "compromise one of the most important security property behind that behind that chip so I'm not going to let",
    "start": "491280",
    "end": "497160"
  },
  {
    "text": "Damiano speak about the black box fuzzing",
    "start": "497160",
    "end": "501259"
  },
  {
    "start": "500000",
    "end": "700000"
  },
  {
    "text": "okay so when starting to test the chip like that titanium one of the first",
    "start": "503039",
    "end": "509879"
  },
  {
    "text": "steps that one can try to to make is start with black box fuzzing and here by",
    "start": "509879",
    "end": "516479"
  },
  {
    "text": "Black Box we mean when we only have a very limited visibility on the Target that we want to test all we have all we",
    "start": "516479",
    "end": "523919"
  },
  {
    "text": "need actually is just a channel uh to send messages to these targets and then a signal that tells us what happened so",
    "start": "523919",
    "end": "531180"
  },
  {
    "text": "in our case this was given by the custom clients that we developed to communicate",
    "start": "531180",
    "end": "537240"
  },
  {
    "text": "with the chip we could send arbitrary messages that we could mutate",
    "start": "537240",
    "end": "542339"
  },
  {
    "text": "in the fuzzing in the fancy workflow and then get a return code back that would",
    "start": "542339",
    "end": "548820"
  },
  {
    "text": "tell us what is the result of the processing of our message",
    "start": "548820",
    "end": "553980"
  },
  {
    "text": "now the return codes are also in the AOSP and you can see them on this slide",
    "start": "553980",
    "end": "560360"
  },
  {
    "text": "generally we are interested in those return codes uh return codes higher than",
    "start": "560360",
    "end": "565380"
  },
  {
    "text": "on equal two with two being uh error internal this is for example the one we",
    "start": "565380",
    "end": "570660"
  },
  {
    "text": "get when the chip crashes so we just uh implement this by uh plugging",
    "start": "570660",
    "end": "577380"
  },
  {
    "text": "a mutator into our uh to our NOS client limitator is leave brought above mutator",
    "start": "577380",
    "end": "583200"
  },
  {
    "text": "because we leverage the grammar that is available um it is actually fairly straightforward",
    "start": "583200",
    "end": "588300"
  },
  {
    "text": "to use we start from an empty Corpus but we do try to set some fields that would",
    "start": "588300",
    "end": "594779"
  },
  {
    "text": "make us pass certain checks to make sure that we can explore more States and then",
    "start": "594779",
    "end": "601440"
  },
  {
    "text": "of course we keep the inputs that generate uh some interesting return codes",
    "start": "601440",
    "end": "607680"
  },
  {
    "text": "now we did a first campaign on an old version of the filmer a filmer we knew",
    "start": "607680",
    "end": "612839"
  },
  {
    "text": "had some vulnerabilities and we managed to discover a bunch of them one of them is actually the buffer overflow that we",
    "start": "612839",
    "end": "618839"
  },
  {
    "text": "had exploited uh by rolling back the fumer so this kind of told us that the",
    "start": "618839",
    "end": "623880"
  },
  {
    "text": "approach was working and we repeated the same proceed procedure at with the latest fumer at the time we found two",
    "start": "623880",
    "end": "631260"
  },
  {
    "text": "commands that were leading to an Old Point at the reference that was making the cheap crash so we reported this",
    "start": "631260",
    "end": "639360"
  },
  {
    "text": "vulnerability like the others and this one was not considered serious enough to end up in the security Bulletin",
    "start": "639360",
    "end": "647279"
  },
  {
    "text": "the interesting part is that all these results come after just a few minutes of fuzzing so this is kind of suggesting",
    "start": "647279",
    "end": "654000"
  },
  {
    "text": "that the approach is working we get the bugs so that's that's positive uh it is also as I said fairly easy to put in",
    "start": "654000",
    "end": "660660"
  },
  {
    "text": "place and uh we are testing in the real device so what we get is uh is gonna be",
    "start": "660660",
    "end": "667079"
  },
  {
    "text": "reproducible for sure but at the same time uh there is a very well known limitation when it comes to black box",
    "start": "667079",
    "end": "673440"
  },
  {
    "text": "fuzzing that is that we are probably only exercising the shallow states of the targets",
    "start": "673440",
    "end": "679320"
  },
  {
    "text": "um we also are prone to false positive with this uh return code heuristics that",
    "start": "679320",
    "end": "685440"
  },
  {
    "text": "we that we implemented and detection is a quite complicated we only detect those",
    "start": "685440",
    "end": "691920"
  },
  {
    "text": "bugs that produce a meaningful uh return code which is not always the case",
    "start": "691920",
    "end": "698640"
  },
  {
    "text": "so the bottom line is really that it is hard to know what is going on on the target so that is when we wanted to move",
    "start": "698640",
    "end": "706260"
  },
  {
    "text": "forward and try to explore a different approach to these emulation based fuzzing and this comes from uh the fact that we",
    "start": "706260",
    "end": "714300"
  },
  {
    "text": "know how the firmware works we have been reversing it and we know also how to",
    "start": "714300",
    "end": "720000"
  },
  {
    "text": "leak some parts of the memory when we need to do so thanks to the vulnerability we exploited by rolling",
    "start": "720000",
    "end": "726360"
  },
  {
    "text": "back the firmware so we can put this together and emulate the firmware on our laptop this way we control what is being",
    "start": "726360",
    "end": "734100"
  },
  {
    "text": "executed and we also have a very good feedback for a fuzzer if we want to do a",
    "start": "734100",
    "end": "740100"
  },
  {
    "text": "coverage guided fuzzing so to emulate uh the firmware we have of",
    "start": "740100",
    "end": "745920"
  },
  {
    "text": "course many different uh Frameworks out there uh in the end we decided to use unicorn this is a firmware that is this",
    "start": "745920",
    "end": "753720"
  },
  {
    "text": "is a framework that is built on top of qimo and it allows to emulate only the CPU without caring about full system",
    "start": "753720",
    "end": "760100"
  },
  {
    "text": "emulation which is something we actually wanted so we can actually set it up",
    "start": "760100",
    "end": "766019"
  },
  {
    "text": "fairly easily and tweak it uh to try to detect more bugs and also a very",
    "start": "766019",
    "end": "771720"
  },
  {
    "text": "interesting feature of unicorn is that it integrates very well with AFL plus plus and I'm sure most of the audience",
    "start": "771720",
    "end": "778980"
  },
  {
    "text": "will be familiar with it AFL plus plus has this unicorn mode that basically allows you to fuzz anything that you can",
    "start": "778980",
    "end": "785160"
  },
  {
    "text": "that you can emulate with unicorn you only need to take care about riding your",
    "start": "785160",
    "end": "790940"
  },
  {
    "text": "writing your input somewhere in the memory of the uh of your emulation",
    "start": "790940",
    "end": "796260"
  },
  {
    "text": "script and then you will get the classical AFL experience there is also allowing for example to use custom",
    "start": "796260",
    "end": "803579"
  },
  {
    "text": "mutators which is something we we used extensively another nice property about",
    "start": "803579",
    "end": "810180"
  },
  {
    "text": "emulation-based fuzzing is that you can fast anything you want all you need is an entry point",
    "start": "810180",
    "end": "816079"
  },
  {
    "text": "some properties that you want to set such as the value of the registers and the memory mappings and then a point",
    "start": "816079",
    "end": "822420"
  },
  {
    "text": "where you want to exit your execution so this is this gives a lot of freedom at",
    "start": "822420",
    "end": "828660"
  },
  {
    "text": "the same time we of course need to take into account that we want to keep it consistent with the surface that an",
    "start": "828660",
    "end": "835079"
  },
  {
    "text": "attacker is actually able to reach but one attack surface that is exposed that we hadn't explored earlier is the",
    "start": "835079",
    "end": "841680"
  },
  {
    "text": "SPI rescue feature so this is a feature that allows to flash a new firmware by",
    "start": "841680",
    "end": "846839"
  },
  {
    "text": "uh sending a new firmware in this specific format that you see on the slide",
    "start": "846839",
    "end": "853260"
  },
  {
    "text": "um this is done through the bootloader and uh the user data on the chip are",
    "start": "853260",
    "end": "859440"
  },
  {
    "text": "going to be wiped um so since this is a fairly interesting format we wanted to check whether this",
    "start": "859440",
    "end": "865260"
  },
  {
    "text": "was actually processed correctly so we fast the header of this feature on the firmware",
    "start": "865260",
    "end": "872339"
  },
  {
    "text": "um and the way we did it was using as I anticipated a custom mutator we used",
    "start": "872339",
    "end": "877560"
  },
  {
    "text": "format fuzzer in this case there is a project that allows to generate and",
    "start": "877560",
    "end": "883320"
  },
  {
    "text": "parse binary files following a specific format um and that runs with a modified version",
    "start": "883320",
    "end": "889440"
  },
  {
    "text": "of AFL now uh unfortunately unfortunately we couldn't really find any interesting",
    "start": "889440",
    "end": "896279"
  },
  {
    "text": "bugs in this campaign but still having to build an emulation script for this",
    "start": "896279",
    "end": "902220"
  },
  {
    "text": "feature uh kind of got us to a next level of reverse engineering and we",
    "start": "902220",
    "end": "907740"
  },
  {
    "text": "discovered some things that at least myself I wasn't able to understand with simple static reversing when you need to",
    "start": "907740",
    "end": "914339"
  },
  {
    "text": "sort out how to make it work you kind of get a little bit further so one example",
    "start": "914339",
    "end": "920279"
  },
  {
    "text": "is that the bytes in the hash the zero bytes get replaced with one and this is",
    "start": "920279",
    "end": "926940"
  },
  {
    "text": "something that was just interesting to discover in the process but then we wanted to go back to the",
    "start": "926940",
    "end": "932639"
  },
  {
    "text": "tasks so repeat the same uh campaign but using a uh using emulation this time so again we",
    "start": "932639",
    "end": "940139"
  },
  {
    "text": "base ourselves on librato Buff mutator and we focus mostly on three tasks actually two identity and Key Master",
    "start": "940139",
    "end": "947160"
  },
  {
    "text": "there's also Weaver but it is fairly simple and there isn't really much uh to",
    "start": "947160",
    "end": "952680"
  },
  {
    "text": "explore there at least from a fuzzing perspective so the first question is can we actually find the same bugs we know",
    "start": "952680",
    "end": "958980"
  },
  {
    "text": "about otherwise we're not really making any progress and the answer is yes but",
    "start": "958980",
    "end": "964079"
  },
  {
    "text": "apart from one which will actually bring me to the limitations of this approach",
    "start": "964079",
    "end": "969300"
  },
  {
    "text": "because as we know there is never a free lunch in this case emulation has always",
    "start": "969300",
    "end": "974880"
  },
  {
    "text": "the problem of um are the dependent code that you really don't know how to emulate the way",
    "start": "974880",
    "end": "981660"
  },
  {
    "text": "we did it was just hooking those functions that we knew were not uh possible to actually emulate",
    "start": "981660",
    "end": "989779"
  },
  {
    "text": "also in this case detection is still not perfect because we only detect a bug",
    "start": "989779",
    "end": "995459"
  },
  {
    "text": "when unicorn crashes but if there is enough by one or a corruption in this in",
    "start": "995459",
    "end": "1001279"
  },
  {
    "text": "a page that is already mapped we're not really able to detect that and then no full system emulation this was our",
    "start": "1001279",
    "end": "1007699"
  },
  {
    "text": "choice but of course no full system navigation you don't get those bugs that entail for example the scheduler this is",
    "start": "1007699",
    "end": "1014660"
  },
  {
    "text": "the reason why we didn't manage to find again that one bug that I mentioned but really what is uh nice about this",
    "start": "1014660",
    "end": "1022399"
  },
  {
    "text": "approach is that you can tweak it a lot you can uh come up with heuristics and hooks that try to look for specific",
    "start": "1022399",
    "end": "1029418"
  },
  {
    "text": "patterns of uh things that you know are not supposed to happen we have been for",
    "start": "1029419",
    "end": "1034579"
  },
  {
    "text": "example checking for mem copies that end up reading from the boot ROM that is mapped at the address zero this was a",
    "start": "1034579",
    "end": "1041480"
  },
  {
    "text": "pattern for some bugs that we kind of wanted to double check and this was",
    "start": "1041480",
    "end": "1047058"
  },
  {
    "text": "possible with a custom hook but at some point there is a trade-off between how",
    "start": "1047059",
    "end": "1052760"
  },
  {
    "text": "much a reverse engineer and come up with these tweaks and how much you finally",
    "start": "1052760",
    "end": "1058100"
  },
  {
    "text": "let your father run but what uh we are presenting today is",
    "start": "1058100",
    "end": "1064160"
  },
  {
    "start": "1060000",
    "end": "1412000"
  },
  {
    "text": "also one specific vulnerability that we found and uh this is a vulnerability in",
    "start": "1064160",
    "end": "1069860"
  },
  {
    "text": "uh uh the function a function called param find digest internal this is a function",
    "start": "1069860",
    "end": "1075020"
  },
  {
    "text": "that parses key parameter objects inside the requests and specifically this is an",
    "start": "1075020",
    "end": "1081260"
  },
  {
    "text": "out of binds bounce right of exactly one byte that is set to exactly one so uh",
    "start": "1081260",
    "end": "1088760"
  },
  {
    "text": "the first time I bumped into this I thought okay this is probably a minor issue no way to exploit it but let me",
    "start": "1088760",
    "end": "1095299"
  },
  {
    "text": "walk you through it so here you see the assembly and the compiled view of the of the function and this is the vulnerable",
    "start": "1095299",
    "end": "1102500"
  },
  {
    "text": "instruction store byte so one byte instruction uh but there are some checks actually a",
    "start": "1102500",
    "end": "1108679"
  },
  {
    "text": "lot of checks on the offset so let's start from a 32-bit value uh the",
    "start": "1108679",
    "end": "1113960"
  },
  {
    "text": "actually we only care about the least significant byte because of a mask that",
    "start": "1113960",
    "end": "1119600"
  },
  {
    "text": "is applied this is actually uh interesting for us but that one byte has",
    "start": "1119600",
    "end": "1125059"
  },
  {
    "text": "to go through a lot of checks so first of all it needs to be smaller than or equal four so we kind of lose all those",
    "start": "1125059",
    "end": "1132020"
  },
  {
    "text": "bits and then there is a little bit of a complicated bitwise operation which just bear with me for now if we put",
    "start": "1132020",
    "end": "1139400"
  },
  {
    "text": "everything together the list is significant byte can only be 0 2 or 4 out of the 255 possible values",
    "start": "1139400",
    "end": "1148160"
  },
  {
    "text": "so what can we do um there are actually multiple ways to",
    "start": "1148160",
    "end": "1153200"
  },
  {
    "text": "get to this snippet of code as I told you it's a function that processes this type of uh of",
    "start": "1153200",
    "end": "1159740"
  },
  {
    "text": "um field in different messages and also don't forget the Titan M has a",
    "start": "1159740",
    "end": "1164960"
  },
  {
    "text": "static memory layout objects are always at the same place so if we can write that one byte at the right place we",
    "start": "1164960",
    "end": "1172220"
  },
  {
    "text": "might be able to to get something interesting you know from a simple denial of surface to perhaps changing",
    "start": "1172220",
    "end": "1177500"
  },
  {
    "text": "some field that gives us a corruption elsewhere there is a lot that we can do",
    "start": "1177500",
    "end": "1183679"
  },
  {
    "text": "so what we did was we generated all the possible addresses we could reach uh and",
    "start": "1183679",
    "end": "1189740"
  },
  {
    "text": "then we tried to look one one by one and see what we could do with them and we arrive at the point where we",
    "start": "1189740",
    "end": "1196940"
  },
  {
    "text": "understood that there was this structure in memory we called it Key Master SPI data and we could overwrite one byte in",
    "start": "1196940",
    "end": "1203720"
  },
  {
    "text": "a field that we called a request address command request address so this is a a",
    "start": "1203720",
    "end": "1209780"
  },
  {
    "text": "structure that is meant to hold data about the SPI exchanges for the key",
    "start": "1209780",
    "end": "1215660"
  },
  {
    "text": "master task specifically there's one for each task and the actual field that we are",
    "start": "1215660",
    "end": "1222520"
  },
  {
    "text": "overwriting is the one that is uh expressing the address where Key Master",
    "start": "1222520",
    "end": "1228440"
  },
  {
    "text": "messages will end up being stored so as you can see uh from 192 C8 we go to one",
    "start": "1228440",
    "end": "1236539"
  },
  {
    "text": "zero one C8 so now requests will be stored quite far from where they're",
    "start": "1236539",
    "end": "1241700"
  },
  {
    "text": "supposed to be and this was the beginning of the fun part but first",
    "start": "1241700",
    "end": "1247340"
  },
  {
    "text": "don't forget that all we have to communicate with this titanium chip is",
    "start": "1247340",
    "end": "1252980"
  },
  {
    "text": "our NOS client so all we can do is Force the message the way we like it",
    "start": "1252980",
    "end": "1258260"
  },
  {
    "text": "send it through our binary and then get the return code perhaps retro code 2 if",
    "start": "1258260",
    "end": "1264620"
  },
  {
    "text": "the chip crashes but not much so as you can imagine developing and debugging an exploit is quite of a challenge but",
    "start": "1264620",
    "end": "1272000"
  },
  {
    "text": "there's a is there's an ace we have been keeping in our holes so far Max briefly mentioned this u-word that we could uh",
    "start": "1272000",
    "end": "1279559"
  },
  {
    "text": "access and this is specifically uh thanks to two pins that are Exposed on",
    "start": "1279559",
    "end": "1285260"
  },
  {
    "text": "the motherboard so we soldered two wires into those pins and we ended up getting",
    "start": "1285260",
    "end": "1290720"
  },
  {
    "text": "this uart console that is actually fairly simple and you cannot really do",
    "start": "1290720",
    "end": "1296419"
  },
  {
    "text": "much apart from asking to the chief about versions and statistics and stuff like that but it is the place where the",
    "start": "1296419",
    "end": "1303799"
  },
  {
    "text": "logs of the chip are printed so although this doesn't provide any information on",
    "start": "1303799",
    "end": "1308840"
  },
  {
    "text": "what goes wrong when something doesn't work this is very useful when writing an exploit because we can always try to",
    "start": "1308840",
    "end": "1315500"
  },
  {
    "text": "trigger some logs and see if we can actually get them on the uart",
    "start": "1315500",
    "end": "1321260"
  },
  {
    "text": "so I'm not gonna go uh sadly there's no time to go over the memory layout of the titanium chip so we just want to write",
    "start": "1321260",
    "end": "1330440"
  },
  {
    "text": "our requests to the new address and basically see uh see what happens so we",
    "start": "1330440",
    "end": "1335600"
  },
  {
    "text": "send bigger and bigger payloads while monitoring the uart okay so we send",
    "start": "1335600",
    "end": "1341299"
  },
  {
    "text": "bigger bigger impedance and some at some point we realize that the chip starts crashing",
    "start": "1341299",
    "end": "1347179"
  },
  {
    "text": "um so what if we place actually a function that logs uh the tasks right at",
    "start": "1347179",
    "end": "1353299"
  },
  {
    "text": "this point where the chip starts crashing and what we get is actually the logs on the uart that tells us that we",
    "start": "1353299",
    "end": "1359780"
  },
  {
    "text": "are triggering a function we are getting uh code execution",
    "start": "1359780",
    "end": "1365059"
  },
  {
    "text": "so what's going on probably this is our guess at least is that this is an",
    "start": "1365059",
    "end": "1370159"
  },
  {
    "text": "address that was pushed into the stack by some task that is maybe maybe has to",
    "start": "1370159",
    "end": "1375860"
  },
  {
    "text": "return there after its execution and uh from now on things get quite complex to",
    "start": "1375860",
    "end": "1383299"
  },
  {
    "text": "actually get a an exploit working uh we need to move uh elsewhere because we",
    "start": "1383299",
    "end": "1389840"
  },
  {
    "text": "cannot write any blockchain there it's it's quite uh quite cumbersome but we",
    "start": "1389840",
    "end": "1395419"
  },
  {
    "text": "are actually releasing a blog post where we go over also the exploitation details of this vulnerability",
    "start": "1395419",
    "end": "1402320"
  },
  {
    "text": "but now I'm gonna hand it over to Max for the impact that we achieved",
    "start": "1402320",
    "end": "1408620"
  },
  {
    "text": "thank you Daniel so let's look at the impact of this",
    "start": "1408620",
    "end": "1414020"
  },
  {
    "start": "1412000",
    "end": "1493000"
  },
  {
    "text": "vulnerability not only on the chip itself but on the whole system security uh something that would be great for us",
    "start": "1414020",
    "end": "1420740"
  },
  {
    "text": "would be to find a memory region that is both writable and executable so we can write on our code but there is no such",
    "start": "1420740",
    "end": "1426980"
  },
  {
    "text": "regions so then another thing we could try would be to reconfigure this memory uh permissions by playing with something",
    "start": "1426980",
    "end": "1435020"
  },
  {
    "text": "called the mpus for memory protection units but on Titan name this mpu has a",
    "start": "1435020",
    "end": "1441679"
  },
  {
    "text": "custom interface and that we did not spend enough time to reverse it so what",
    "start": "1441679",
    "end": "1446960"
  },
  {
    "text": "we can do is to reuse the code that is already present in the VMware like making Rob change like Damiano explained",
    "start": "1446960",
    "end": "1453260"
  },
  {
    "text": "and doing so we implemented again a leak command in our nose client tool this",
    "start": "1453260",
    "end": "1458840"
  },
  {
    "text": "time based on the zero day we just presented so since we did not downgrade the VMware this time the data is not",
    "start": "1458840",
    "end": "1465380"
  },
  {
    "text": "erased meaning that we can leak all the secrets present in the Chip's memory and uh the the command you see below",
    "start": "1465380",
    "end": "1473120"
  },
  {
    "text": "um the lead command so is the one I'm speaking about here we are leaking this first 16 bytes that's all present at the",
    "start": "1473120",
    "end": "1479179"
  },
  {
    "text": "address 0 and at the address zero uh you have the bootron so you see the first bytes of the bootron but can we do",
    "start": "1479179",
    "end": "1484820"
  },
  {
    "text": "something more harmful with this vulnerability uh more harmful on this on the device can we leak strong box keys",
    "start": "1484820",
    "end": "1492980"
  },
  {
    "text": "but before I answer that question let's first have a look at what is strongbox so it's the hardware back version of the",
    "start": "1492980",
    "end": "1499039"
  },
  {
    "start": "1493000",
    "end": "1619000"
  },
  {
    "text": "Keystone and it allows applications to generate and use uh keys from within a",
    "start": "1499039",
    "end": "1505100"
  },
  {
    "text": "safe environment meaning the Titan M chip but the Titan M does not store any Keys instead the keys are stored in",
    "start": "1505100",
    "end": "1511580"
  },
  {
    "text": "object called key blobs that are encrypted inside the Titan and using a",
    "start": "1511580",
    "end": "1516740"
  },
  {
    "text": "key encryption key that will is generated from several internal elements",
    "start": "1516740",
    "end": "1522080"
  },
  {
    "text": "now these key blobs are then installed encrypted in the Android file system so",
    "start": "1522080",
    "end": "1527419"
  },
  {
    "text": "whenever an application wants to use a key from strongbox it has the system to send the key blob to the chip the chip",
    "start": "1527419",
    "end": "1534200"
  },
  {
    "text": "will decrypt the key blob and use the key to perform the operation so it's important it's interesting to",
    "start": "1534200",
    "end": "1539659"
  },
  {
    "text": "note that as long as the root user can I mean as long as the user so root can",
    "start": "1539659",
    "end": "1544760"
  },
  {
    "text": "access all the key blobs that's all present in Android file system so it can use any key but it should never be able",
    "start": "1544760",
    "end": "1550460"
  },
  {
    "text": "to extract uh the the keys now something that we would be",
    "start": "1550460",
    "end": "1557179"
  },
  {
    "text": "interesting for us to do would be to leak the the several elements that are used to derive the these key encryption",
    "start": "1557179",
    "end": "1562760"
  },
  {
    "text": "keys but in short there is one element that is stored in a memory region that cannot be",
    "start": "1562760",
    "end": "1569059"
  },
  {
    "text": "read from the OS so it's not the way to go to League strong boxes instead let's have a look to uh the the commands that",
    "start": "1569059",
    "end": "1576799"
  },
  {
    "text": "are used to actually use these key blobs and uh to perform crypto operation so",
    "start": "1576799",
    "end": "1582380"
  },
  {
    "text": "the First Command and the one that is interesting for us right now is begin operation it contains",
    "start": "1582380",
    "end": "1588620"
  },
  {
    "text": "um the key blob and the characteristic characteristics of the key meaning the",
    "start": "1588620",
    "end": "1593960"
  },
  {
    "text": "algorithm the the key size and informations like this and whenever the chip receives it it will decrypt the key",
    "start": "1593960",
    "end": "1599779"
  },
  {
    "text": "blob and then save the decrypted data somewhere at a fixed address for later",
    "start": "1599779",
    "end": "1606260"
  },
  {
    "text": "so by now we should see where we are going the two other commands are not really interesting uh for us but in",
    "start": "1606260",
    "end": "1612380"
  },
  {
    "text": "short they allow the system and the chip to perform the operation and the data that it contains",
    "start": "1612380",
    "end": "1619279"
  },
  {
    "start": "1619000",
    "end": "1893000"
  },
  {
    "text": "so our strategy is simple first of all we get the key blobs the key blob from",
    "start": "1619279",
    "end": "1624740"
  },
  {
    "text": "the device they're all stored in a database inside the Keystone directory at least starting from Android 12 then",
    "start": "1624740",
    "end": "1630860"
  },
  {
    "text": "we Forge a begin operation request with it we send it to the chip the chip will decrypt it and then we use our",
    "start": "1630860",
    "end": "1637820"
  },
  {
    "text": "vulnerability to leak this decrypted key from the chip memory so now time for a",
    "start": "1637820",
    "end": "1644059"
  },
  {
    "text": "live demo and I will call Damiano to help me with this so",
    "start": "1644059",
    "end": "1652658"
  },
  {
    "text": "here you should see our demo application running on the pixel 3A device that uh",
    "start": "1655159",
    "end": "1663500"
  },
  {
    "text": "what that runs the vulnerable version so let",
    "start": "1663500",
    "end": "1668659"
  },
  {
    "text": "me just first okay so whenever I'm going to enter a",
    "start": "1668659",
    "end": "1676520"
  },
  {
    "text": "secret in this application um the the application will generate a",
    "start": "1676520",
    "end": "1683120"
  },
  {
    "text": "strong box key and then encrypt it with it so it will then print the ciphertext as",
    "start": "1683120",
    "end": "1688520"
  },
  {
    "text": "you can see both on the screen and on the log so we have the IV and the ciphertext the next thing we do is that",
    "start": "1688520",
    "end": "1696020"
  },
  {
    "text": "we will uh before we use our vulnerability so",
    "start": "1696020",
    "end": "1701440"
  },
  {
    "text": "here are the First Command I'm using well first of all there is an extra step I need to stop the set of the demon",
    "start": "1702980",
    "end": "1710240"
  },
  {
    "text": "because it's kind of locking the communication with the driver and our tool is uh",
    "start": "1710240",
    "end": "1716840"
  },
  {
    "text": "it will communicate directly with the driver here we go so",
    "start": "1716840",
    "end": "1722779"
  },
  {
    "text": "now I'm using the leak KB command that we implemented and this command will simply list the key blobs available so",
    "start": "1722779",
    "end": "1729679"
  },
  {
    "text": "stored in strongbox from the database so we see there is only one the one corresponding to our demo app",
    "start": "1729679",
    "end": "1735260"
  },
  {
    "text": "so the next thing is that's we will lick it",
    "start": "1735260",
    "end": "1741159"
  },
  {
    "text": "hopefully it will work yeah so the bytes you see or the bytes uh",
    "start": "1750140",
    "end": "1756440"
  },
  {
    "text": "of the key of the AES key that have been used during activity secrets so the next thing is that we will simply convert",
    "start": "1756440",
    "end": "1763820"
  },
  {
    "text": "these values into a format accepted by open SSL because we will use open SSL to",
    "start": "1763820",
    "end": "1769340"
  },
  {
    "text": "uh to decrypt this ciphertext",
    "start": "1769340",
    "end": "1775278"
  },
  {
    "text": "so I will do some copy pasting from my cheat sheet because I do not recommend buy heart",
    "start": "1775580",
    "end": "1781820"
  },
  {
    "text": "oops yes",
    "start": "1781820",
    "end": "1786580"
  },
  {
    "text": "I will just remove the spaces from the key because otherwise open SSL won't be happy about it",
    "start": "1787580",
    "end": "1794679"
  },
  {
    "text": "okay so now I'll just give this ciphertext to open",
    "start": "1798679",
    "end": "1804740"
  },
  {
    "text": "SSL",
    "start": "1804740",
    "end": "1807278"
  },
  {
    "text": "okay I can provide the IV",
    "start": "1816740",
    "end": "1820539"
  },
  {
    "text": "and then the key great so here we go we decrypted our",
    "start": "1822500",
    "end": "1830179"
  },
  {
    "text": "secret [Applause]",
    "start": "1830179",
    "end": "1835550"
  },
  {
    "text": "thanks so noted for the video okay so before",
    "start": "1838220",
    "end": "1843620"
  },
  {
    "text": "being able to put in place this attack there are few conditions that you must be followed so",
    "start": "1843620",
    "end": "1849260"
  },
  {
    "text": "um first of all we need to be able to talk to the chief so in our case we rooted our device so it's fine but in in",
    "start": "1849260",
    "end": "1855679"
  },
  {
    "text": "the real life you need other abilities of course to uh to get to that point and the other thing you can try uh is to do",
    "start": "1855679",
    "end": "1862399"
  },
  {
    "text": "a to to interact directly on the hardware level with the SBI boss like remember the picture I show at the",
    "start": "1862399",
    "end": "1868520"
  },
  {
    "text": "beginning uh of this presentation the next condition is to access the key blob",
    "start": "1868520",
    "end": "1874640"
  },
  {
    "text": "so here again you need to have enough privilege to to read the database or you can find a way to bypass the the file",
    "start": "1874640",
    "end": "1880700"
  },
  {
    "text": "based encryption which may sound even harder so this is just two highlights that before being able to put in places",
    "start": "1880700",
    "end": "1887000"
  },
  {
    "text": "attack their field extra steps that must be followed in real life so other vulnerabilities to be exploited",
    "start": "1887000",
    "end": "1894140"
  },
  {
    "start": "1893000",
    "end": "1937000"
  },
  {
    "text": "now we wanted to show you this mitigation whenever uh whenever",
    "start": "1894140",
    "end": "1899679"
  },
  {
    "text": "implementing an application and whenever declaring all the parameters to use a strong box key it's possible to add this",
    "start": "1899679",
    "end": "1907039"
  },
  {
    "text": "uh dislike that we highlighted set user authentication required and why is that",
    "start": "1907039",
    "end": "1912679"
  },
  {
    "text": "too true the the key blob will be encrypted a second time with the value derived from the",
    "start": "1912679",
    "end": "1918679"
  },
  {
    "text": "from the user password so whenever the user whenever the application will try to use this kid lob",
    "start": "1918679",
    "end": "1924320"
  },
  {
    "text": "the user will be asked to enter its password so and of course the best mitigation is to",
    "start": "1924320",
    "end": "1930679"
  },
  {
    "text": "update the VMware since we uh we reported this vulnerability to Google and it's not fixed",
    "start": "1930679",
    "end": "1937640"
  },
  {
    "start": "1937000",
    "end": "2022000"
  },
  {
    "text": "so now it's time for a conclusion and with some takeaways so first of all",
    "start": "1937640",
    "end": "1943640"
  },
  {
    "text": "the titanium is an interesting Target especially because it's very important for the whole system security",
    "start": "1943640",
    "end": "1949760"
  },
  {
    "text": "we show that with black box fuzzing you can easily get the surface bugs but",
    "start": "1949760",
    "end": "1954919"
  },
  {
    "text": "emulation the exposing is really more effective on such targets even though there are a few tricks that you need to",
    "start": "1954919",
    "end": "1960620"
  },
  {
    "text": "put in place to optimize the results we discovered this critical zero day we presented and it allowed us to execute",
    "start": "1960620",
    "end": "1968659"
  },
  {
    "text": "code on the Chip And to leak pretty much anything from the Chip's memory so we use that vulnerability to",
    "start": "1968659",
    "end": "1975500"
  },
  {
    "text": "it was enough to leak strongbox Keys like any strongbox keys that were installed on the device",
    "start": "1975500",
    "end": "1981860"
  },
  {
    "text": "the last thing is that we would like to thank Google for handling our uh vulnerability reports and for making the",
    "start": "1981860",
    "end": "1988820"
  },
  {
    "text": "efforts to fix everything before today so that we can disclose the vulnerability for you",
    "start": "1988820",
    "end": "1996200"
  },
  {
    "text": "so this is the end of this presentation um where you can find here a link uh We",
    "start": "1996200",
    "end": "2003820"
  },
  {
    "text": "Will We Will um sorry we will push all the materials of this um talk in our GitHub repository so you",
    "start": "2003820",
    "end": "2010059"
  },
  {
    "text": "have the link here and thank you everyone for listening [Music]",
    "start": "2010059",
    "end": "2017849"
  },
  {
    "text": "[Music]",
    "start": "2021690",
    "end": "2024799"
  }
]