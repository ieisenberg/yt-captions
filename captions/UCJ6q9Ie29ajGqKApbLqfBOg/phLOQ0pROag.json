[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "okay hello everyone welcome to the talk on how to pay break PDF encryption add",
    "start": "30",
    "end": "5400"
  },
  {
    "text": "like at Europe my name is James moon I'm a PhD student at the Jeff network and data security at the University of Bonn",
    "start": "5400",
    "end": "12420"
  },
  {
    "text": "in Germany and this guy here is Fabian easing from the University of blight Sciences in Muenster in Germany and",
    "start": "12420",
    "end": "20400"
  },
  {
    "text": "today we'll give you an introduction to our current research on security flaws in the PDF encryption standard which is",
    "start": "20400",
    "end": "28230"
  },
  {
    "text": "a joint work with our researchers we call this PDF exfiltration short for PDF X so what is",
    "start": "28230",
    "end": "38070"
  },
  {
    "text": "pdf/x some of you may have heard about it it's yet another of those attacks that come",
    "start": "38070",
    "end": "44430"
  },
  {
    "text": "with a logo and PDF X also introduces two novel attacks on PDF encryption",
    "start": "44430",
    "end": "53370"
  },
  {
    "text": "which we were going to be talking about today both of them are actually",
    "start": "53370",
    "end": "58940"
  },
  {
    "text": "weaknesses security flaws in the PDF encryption standard and post them we",
    "start": "58940",
    "end": "64890"
  },
  {
    "text": "found by carefully simply reading this standard so one is based on security",
    "start": "64890",
    "end": "72090"
  },
  {
    "text": "flaws in the PDF data structure format which is asked for partial encryption we",
    "start": "72090",
    "end": "78180"
  },
  {
    "text": "call this attack DirectX filtration and the other one is based on actual crypto",
    "start": "78180",
    "end": "83790"
  },
  {
    "text": "on floors in the used cyber modes of operation we call this attack mul",
    "start": "83790",
    "end": "89310"
  },
  {
    "text": "ability gadgets so here's know a few of",
    "start": "89310",
    "end": "94799"
  },
  {
    "text": "today's talk first I'm going to give you a short introduction to PDF and who",
    "start": "94799",
    "end": "99990"
  },
  {
    "text": "actually uses PDF encryption then I'm going to introduce our attacker model",
    "start": "99990",
    "end": "105270"
  },
  {
    "text": "and show our first attacks on how to directly extra grade the plaintext off",
    "start": "105270",
    "end": "111210"
  },
  {
    "text": "encrypted documents without even touching the crypto and because I don't",
    "start": "111210",
    "end": "116340"
  },
  {
    "text": "know much about crypto to be honest from here on fabien will take over and show",
    "start": "116340",
    "end": "121670"
  },
  {
    "text": "our cryptographic attacks CBC mobility gadgets and how to practically apply",
    "start": "121670",
    "end": "128340"
  },
  {
    "text": "them to PDF documents and also",
    "start": "128340",
    "end": "133490"
  },
  {
    "text": "an emulation of 27 popular PDF viewers and some medications on how to counter",
    "start": "133490",
    "end": "140610"
  },
  {
    "text": "these attacks ok let's start with some some facts on PDF PDF PDF who of you has",
    "start": "140610",
    "end": "149220"
  },
  {
    "text": "never ever heard of PDF when it's good nobody ok so we're on the same side here",
    "start": "149220",
    "end": "155700"
  },
  {
    "text": "we're all familiar with the Portable Document format it's basically de facto standard for electronic document",
    "start": "155700",
    "end": "161490"
  },
  {
    "text": "exchange these days so standard force or PDF was originally",
    "start": "161490",
    "end": "167880"
  },
  {
    "text": "invented by Adobe released in the early 90s and it later on became an ISO",
    "start": "167880",
    "end": "173550"
  },
  {
    "text": "standard with PDF 200 released like two years ago by the ISIL um so according to",
    "start": "173550",
    "end": "182700"
  },
  {
    "text": "Adobe 250 billion of PDF documents have been opened in their product last year",
    "start": "182700",
    "end": "188550"
  },
  {
    "text": "so that's a lot that's where all our telemetry data goes to obviously and PDF",
    "start": "188550",
    "end": "194100"
  },
  {
    "text": "is rather popular used by almost every company and institution and out there so",
    "start": "194100",
    "end": "201450"
  },
  {
    "text": "to measure the actual popularity of PDF let's have a quick look at Google's",
    "start": "201450",
    "end": "207959"
  },
  {
    "text": "statistics fully search term PDF so as we can see here the trend is constantly",
    "start": "207959",
    "end": "214709"
  },
  {
    "text": "increasing but maybe the the number of Internet users has been increasing ok so to really measure the popularity of PDF",
    "start": "214709",
    "end": "222600"
  },
  {
    "text": "let's let's compare this to another keyword let's compare PDF to the Queen",
    "start": "222600",
    "end": "227810"
  },
  {
    "text": "and what you can see here is that PDF is currently almost as popular as the Queen",
    "start": "227810",
    "end": "233459"
  },
  {
    "text": "and those are statistics for the UK only so okay I hope I could convince you that PDF is rather popular file format right",
    "start": "233459",
    "end": "240230"
  },
  {
    "text": "okay so PDF also supports AES document",
    "start": "240230",
    "end": "245820"
  },
  {
    "text": "encryption using either password based or certificate based crypto and a SAS is",
    "start": "245820",
    "end": "253620"
  },
  {
    "text": "considered pretty secure right I mean come on and say yes if someone is able to break IES the sky is falling anyway",
    "start": "253620",
    "end": "259890"
  },
  {
    "text": "so maybe we should give up here we didn't want to give up yet",
    "start": "259890",
    "end": "265140"
  },
  {
    "text": "umm so we sought well let's have a closer look um how encryption is actually applied in the in",
    "start": "265140",
    "end": "271379"
  },
  {
    "text": "the PDF standard maybe they did something wrong maybe they did something",
    "start": "271379",
    "end": "276470"
  },
  {
    "text": "incorrectly and yeah let's first however look on who actually uses PDF encryption",
    "start": "276470",
    "end": "285620"
  },
  {
    "text": "so for example a local bank in Germany uses PDF encryption they know that all",
    "start": "285620",
    "end": "292770"
  },
  {
    "start": "286000",
    "end": "360000"
  },
  {
    "text": "the customs they cannot handle PGP and that's mime so what they do is they send all",
    "start": "292770",
    "end": "298080"
  },
  {
    "text": "sensitive information as an encrypted PDF attachment with in an otherwise unencrypted email and they sent the",
    "start": "298080",
    "end": "304830"
  },
  {
    "text": "password over a second channel via SMS for example why not and then there's",
    "start": "304830",
    "end": "310620"
  },
  {
    "text": "some companies that even allow you to do this directly within limit lines so they",
    "start": "310620",
    "end": "316169"
  },
  {
    "text": "sell for example plug-ins for Outlook and you can use PDF encryption as a",
    "start": "316169",
    "end": "321500"
  },
  {
    "text": "substitution for PGP or otherwise email encryption I've done a lot of modern",
    "start": "321500",
    "end": "326940"
  },
  {
    "text": "scanners and I'm PLR you to directly encrypt scanned documents especially if",
    "start": "326940",
    "end": "333599"
  },
  {
    "text": "you use features like scan to email this can be quite interesting or this can",
    "start": "333599",
    "end": "338909"
  },
  {
    "text": "make sense okay last but not least PDF encryption is used by companies and",
    "start": "338909",
    "end": "344880"
  },
  {
    "text": "governments worldwide so for example this is the US Department of Justice",
    "start": "344880",
    "end": "349949"
  },
  {
    "text": "which uses which claims to use a PDF encryption so we thought okay that maybe",
    "start": "349949",
    "end": "355620"
  },
  {
    "text": "that's worse having a deeper look at PDF encryption but let's first have a look",
    "start": "355620",
    "end": "361680"
  },
  {
    "start": "360000",
    "end": "507000"
  },
  {
    "text": "at you're talking attack mode so we're both academia guys so we need a formal attacker model or maybe not so formal in",
    "start": "361680",
    "end": "367800"
  },
  {
    "text": "this case um so assume Alice wants to send a PDF document to Bob and this is",
    "start": "367800",
    "end": "374400"
  },
  {
    "text": "going to encrypt the document because the communication channel cannot be trusted let it be your email or whatever or",
    "start": "374400",
    "end": "381990"
  },
  {
    "text": "maybe let's assume there's some kind of shared maybe cloud storage service and Alice uploaded a document here an",
    "start": "381990",
    "end": "388500"
  },
  {
    "text": "encrypted PDF document and Bob downloads it later and it's storage may also be",
    "start": "388500",
    "end": "394319"
  },
  {
    "text": "accessible by a third party liked by other users for example so in such cases we can of you",
    "start": "394319",
    "end": "400230"
  },
  {
    "text": "do not rely on TLS we need actual end-to-end encryption and using PDF",
    "start": "400230",
    "end": "406530"
  },
  {
    "text": "encryption is some logical candidate for this task for this workflow right okay",
    "start": "406530",
    "end": "412890"
  },
  {
    "text": "now what is our attacker allowed to do our attacker is an active man in the middle attack er who can perform",
    "start": "412890",
    "end": "419160"
  },
  {
    "text": "targeted modifications of encrypted PDF documents either in transit or addressed",
    "start": "419160",
    "end": "425660"
  },
  {
    "text": "you can also change the document structure using those modifications or",
    "start": "425660",
    "end": "431310"
  },
  {
    "text": "manipulate the actual cipher text by flipping some bits and so on before relaying that modified version of",
    "start": "431310",
    "end": "438360"
  },
  {
    "text": "document to Bob to the intended receiver so the document is still encrypted but",
    "start": "438360",
    "end": "443550"
  },
  {
    "text": "some changes have been made we'll see that later and we assume that really",
    "start": "443550",
    "end": "450780"
  },
  {
    "text": "strong password is used for this document so we cannot do any offline cracking or things like that it will not",
    "start": "450780",
    "end": "457140"
  },
  {
    "text": "work okay now pop is going to enter this super secret password or use some",
    "start": "457140",
    "end": "463200"
  },
  {
    "text": "certificate for decryption and then whatever reasons the plain text is leaked to the attackers server for",
    "start": "463200",
    "end": "469740"
  },
  {
    "text": "reasons you'll see later okay so it is important to note of course that this is",
    "start": "469740",
    "end": "475800"
  },
  {
    "text": "not an offline attack obviously this is an active man in the middle but the only reason to use end to end encryption is",
    "start": "475800",
    "end": "483680"
  },
  {
    "text": "that you may assume that there may be some malicious party in the middle okay",
    "start": "483680",
    "end": "488700"
  },
  {
    "text": "this is exactly the attacker model that end-to-end encryption should protect you from okay now how does PDF encryption",
    "start": "488700",
    "end": "496740"
  },
  {
    "text": "technically art work or let me first give you some basics of PDF which result",
    "start": "496740",
    "end": "503430"
  },
  {
    "text": "in the tired expiration class of attacks okay so let's first have a look at a",
    "start": "503430",
    "end": "511530"
  },
  {
    "start": "507000",
    "end": "616000"
  },
  {
    "text": "simplified PDF document structure a PDF document usually consists of four parts",
    "start": "511530",
    "end": "517280"
  },
  {
    "text": "which is a header it's just a one-liner containing the PDF version that is used",
    "start": "517280",
    "end": "523289"
  },
  {
    "text": "in a document like 1.7 or 2.0 or so on then we have a body section which",
    "start": "523290",
    "end": "529830"
  },
  {
    "text": "contains the actual content of the meant to be displayed on any definition",
    "start": "529830",
    "end": "536260"
  },
  {
    "text": "of all the pages so this is the important section which contains all the",
    "start": "536260",
    "end": "542020"
  },
  {
    "text": "objects that are actually later on displayed if you open a file and there's",
    "start": "542020",
    "end": "547690"
  },
  {
    "text": "usually a cross reference section which contains some indexing table defining the offsets of the objects and things",
    "start": "547690",
    "end": "553690"
  },
  {
    "text": "like that and there's the trailer section which contains some more information like a reference to the root",
    "start": "553690",
    "end": "561460"
  },
  {
    "text": "element of the document so as a side note PDF documents are usually processed",
    "start": "561460",
    "end": "567280"
  },
  {
    "text": "from the bottom to the top okay now let's encrypt this very",
    "start": "567280",
    "end": "573130"
  },
  {
    "text": "document and spot the differences okay",
    "start": "573130",
    "end": "578950"
  },
  {
    "text": "that's interesting as you can see not the whole structure is actually",
    "start": "578950",
    "end": "584730"
  },
  {
    "text": "unencrypted all that happened is that an encrypted object was added to the art",
    "start": "584730",
    "end": "591430"
  },
  {
    "text": "trailer section which contains information like which encryption scheme is to be used like AES 256 or whatever",
    "start": "591430",
    "end": "599310"
  },
  {
    "text": "and the only objects containing the actual encrypted content are the objects",
    "start": "599310",
    "end": "606520"
  },
  {
    "text": "that are later on on display later on displayed if you open the documents like content streams for example why is this",
    "start": "606520",
    "end": "613660"
  },
  {
    "text": "why is the structure unencrypted so let's have a look at the standard so the",
    "start": "613660",
    "end": "620590"
  },
  {
    "start": "616000",
    "end": "697000"
  },
  {
    "text": "PDF standard says that all strings and streams in a document are to be",
    "start": "620590",
    "end": "626020"
  },
  {
    "text": "encrypted but not other object types such as integers of boolean values the",
    "start": "626020",
    "end": "631540"
  },
  {
    "text": "idea is that strings and streams are wanted hold the sensitive information okay so the reason for this is plain to",
    "start": "631540",
    "end": "638860"
  },
  {
    "text": "be efficient so random access to all objects in the document is to be granted",
    "start": "638860",
    "end": "645220"
  },
  {
    "text": "even for encrypted objects so fair enough what does that mean in practice",
    "start": "645220",
    "end": "651660"
  },
  {
    "text": "basically the whole structure of PDF documents is unencrypted all these",
    "start": "651660",
    "end": "659770"
  },
  {
    "text": "strings and streams in the document are encrypted so in other words a passive",
    "start": "659770",
    "end": "665380"
  },
  {
    "text": "attacker who obtains an encrypted occupant can already real a lot of information from the document",
    "start": "665380",
    "end": "672350"
  },
  {
    "text": "that may be interesting like for example the number of pages their size the number of objects in the document if",
    "start": "672350",
    "end": "679400"
  },
  {
    "text": "there's any hyperlinks and so on and so forth that may be interesting already but it's not the actual really relevant displayed",
    "start": "679400",
    "end": "688190"
  },
  {
    "text": "content but maybe there's more so let's",
    "start": "688190",
    "end": "693530"
  },
  {
    "text": "once again have a deeper look at the standard so in 2003 PDF introduced the",
    "start": "693530",
    "end": "701680"
  },
  {
    "start": "697000",
    "end": "872000"
  },
  {
    "text": "possibility to use trip theatres crib filters provide a finer chronology",
    "start": "701680",
    "end": "708560"
  },
  {
    "text": "control of encrypted of encryption within a PDF file what does that mean in",
    "start": "708560",
    "end": "713990"
  },
  {
    "text": "practice it means that not all content streams in a document have to be encrypted okay you can nowadays created",
    "start": "713990",
    "end": "721910"
  },
  {
    "text": "a document of which some content is encrypted and other content is not",
    "start": "721910",
    "end": "727280"
  },
  {
    "text": "encrypted you can do that there may be legitimate use cases for this but it",
    "start": "727280",
    "end": "733580"
  },
  {
    "text": "also means that every standard compliant a PDF application must support partial",
    "start": "733580",
    "end": "739130"
  },
  {
    "text": "encryption which is very often bad if file formats allow things like that so",
    "start": "739130",
    "end": "745480"
  },
  {
    "text": "in other words an active attacker on the network for example can modify a",
    "start": "745480",
    "end": "751100"
  },
  {
    "text": "document and can add his own content to an otherwise encrypted document very",
    "start": "751100",
    "end": "759080"
  },
  {
    "text": "easily and there's not only a crypt filters so by carefully studying the",
    "start": "759080",
    "end": "764890"
  },
  {
    "text": "specification we found 18 different methods to actually do this so it's fair",
    "start": "764890",
    "end": "770510"
  },
  {
    "text": "to say that it's hard to implement a PDF viewer that does not support partial",
    "start": "770510",
    "end": "776660"
  },
  {
    "text": "encryption that does not support mixing unencrypted content with encrypted",
    "start": "776660",
    "end": "782420"
  },
  {
    "text": "content okay so this allows us to do simple overlay attacks like for example",
    "start": "782420",
    "end": "790880"
  },
  {
    "text": "what you can see here is that we open an encrypted document for example with with",
    "start": "790880",
    "end": "797450"
  },
  {
    "text": "Adobe or any other PDF viewer we our o we insert our password and we can",
    "start": "797450",
    "end": "803900"
  },
  {
    "text": "see some encrypted um text now let's open this document with the text detail",
    "start": "803900",
    "end": "809180"
  },
  {
    "text": "we can see there some garbage that's encrypted part and we can see a es is used to encrypt the document now we can",
    "start": "809180",
    "end": "815720"
  },
  {
    "text": "insert our own object number six we use a crypt fill to heal without any arguments which means that the content",
    "start": "815720",
    "end": "822200"
  },
  {
    "text": "is actually not encrypted now let's add this object number six to the contents",
    "start": "822200",
    "end": "827420"
  },
  {
    "text": "of that PDF document and save the document let's reopen it with Adobe or",
    "start": "827420",
    "end": "834140"
  },
  {
    "text": "other readers inside our password again and you can see here is that a string is",
    "start": "834140",
    "end": "839540"
  },
  {
    "text": "edit reading stop like at Europe 2019 okay so this is relatively easy for an",
    "start": "839540",
    "end": "847670"
  },
  {
    "text": "attacker to do to add new content to otherwise encrypted documents human I'll",
    "start": "847670",
    "end": "854210"
  },
  {
    "text": "say well fair enough the standard claims protection for confidentiality but not",
    "start": "854210",
    "end": "860900"
  },
  {
    "text": "for integrity and we just broke the integrity here right so the questions can be do more can we do some targeted",
    "start": "860900",
    "end": "867820"
  },
  {
    "text": "modifications to the document using this technique to maybe to somehow",
    "start": "867820",
    "end": "873680"
  },
  {
    "start": "872000",
    "end": "1232000"
  },
  {
    "text": "exfiltrate the plain text by modifying the document structure maybe we can do",
    "start": "873680",
    "end": "880280"
  },
  {
    "text": "that let's have a look at the standard again so if you search the specification for a",
    "start": "880280",
    "end": "888350"
  },
  {
    "text": "documents possibilities to communicate with the outside world you will quickly spot our various actions in the PDF",
    "start": "888350",
    "end": "896480"
  },
  {
    "text": "specification such as disabled sup inform action so similar to HTML PDF can",
    "start": "896480",
    "end": "902690"
  },
  {
    "text": "also contain forms so you can insert some values and then maybe save the",
    "start": "902690",
    "end": "908720"
  },
  {
    "text": "document printed and silent but you can also submit it by clicking on a button in the document and this is quite",
    "start": "908720",
    "end": "917360"
  },
  {
    "text": "interesting because the values of form fields they can be any reference to any",
    "start": "917360",
    "end": "924230"
  },
  {
    "text": "string and stream in the document as the Senate s so what wait wait this is",
    "start": "924230",
    "end": "931550"
  },
  {
    "text": "exactly those two content types that are the only content types that are actually encrypted the only content types that",
    "start": "931550",
    "end": "937380"
  },
  {
    "text": "are actually unknown to an attacker okay and that can be submitted using a form okay so we thought maybe we can define",
    "start": "937380",
    "end": "945660"
  },
  {
    "text": "some specially crafted document where we add some button and then using social engineering maybe we trick to use into",
    "start": "945660",
    "end": "951210"
  },
  {
    "text": "clicking that button there by licking the plain text maybe yeah but then we thought that clicking buttons is lame we",
    "start": "951210",
    "end": "957900"
  },
  {
    "text": "are not going to get to blackhead if we let users click buttons so we consulted",
    "start": "957900",
    "end": "963420"
  },
  {
    "text": "the standard again and then we've swatted some various options to trigger",
    "start": "963420",
    "end": "968850"
  },
  {
    "text": "some actions to trigger some events basically that allow you to submit a",
    "start": "968850",
    "end": "975090"
  },
  {
    "text": "form for example based on once you open the document from too close to document once you print the document and so on",
    "start": "975090",
    "end": "980880"
  },
  {
    "text": "so the easiest example is like no connection added to the document and the",
    "start": "980880",
    "end": "985980"
  },
  {
    "text": "idea is to I want to document it's opened the open action triggers to submit form action which then leaks the",
    "start": "985980",
    "end": "992550"
  },
  {
    "text": "plain text okay let's put this all together what you can see here is",
    "start": "992550",
    "end": "997950"
  },
  {
    "text": "minimalistic our encrypted document with one single content stream and we added a",
    "start": "997950",
    "end": "1005390"
  },
  {
    "text": "field which refers its value to object number two which is the encrypted",
    "start": "1005390",
    "end": "1010850"
  },
  {
    "text": "content stream and then we add an open action to submit form automatically once",
    "start": "1010850",
    "end": "1016400"
  },
  {
    "text": "the document is opened to http PDF which is the attackers webserver and the idea",
    "start": "1016400",
    "end": "1022580"
  },
  {
    "text": "is that once the document is opened the content is automatically exit rated so",
    "start": "1022580",
    "end": "1028850"
  },
  {
    "text": "this is not a theoretical issue let's try this in Adobe so once again we will",
    "start": "1028850",
    "end": "1038260"
  },
  {
    "text": "modify our encrypted document using a simple text editor and we will add an",
    "start": "1038260",
    "end": "1043550"
  },
  {
    "text": "identity a filter for all strings in the document so all streams in the document",
    "start": "1043550",
    "end": "1049160"
  },
  {
    "text": "they will remain encrypted but all strings are not encrypted anymore this allows us to easily add things like a",
    "start": "1049160",
    "end": "1055790"
  },
  {
    "text": "URL with an open action so in this case evil dot X epsilon is to server to",
    "start": "1055790",
    "end": "1061820"
  },
  {
    "text": "submit the form fields to and the value of the form fields is the object number for you object number for you",
    "start": "1061820",
    "end": "1068120"
  },
  {
    "text": "the encrypted data okay that's a safe this modified document send it to Bob",
    "start": "1068120",
    "end": "1074450"
  },
  {
    "text": "again to our victim maybe we run some netcat or whatever some server to get incoming traffic on evil dot X Epsilon",
    "start": "1074450",
    "end": "1082670"
  },
  {
    "text": "let's open that document in Adobe and insert our password and what happens is",
    "start": "1082670",
    "end": "1088730"
  },
  {
    "text": "that current versions of a table they will show us some dialog do you want to submit data to evil dot accepts long the",
    "start": "1088730",
    "end": "1096140"
  },
  {
    "text": "default is to to allow this once you allow it so once you have the possibility to click something to evil",
    "start": "1096140",
    "end": "1102980"
  },
  {
    "text": "evil evil dot X epsilon it will always allow that a lot of readers will not ask you current versions of Adobe will ask",
    "start": "1102980",
    "end": "1109309"
  },
  {
    "text": "you before leaking the encrypted text however the dns request is made by Adobe",
    "start": "1109309",
    "end": "1118840"
  },
  {
    "text": "before you click on yes or no so they are sending the dns request before you even have a chance to click deaf eye you",
    "start": "1118840",
    "end": "1125540"
  },
  {
    "text": "can leak within the subdomain of the evil dot acceptance server for example up to 250 bytes of plain text without",
    "start": "1125540",
    "end": "1133640"
  },
  {
    "text": "any user interaction all you need is an attacker controlled a DNS server for",
    "start": "1133640",
    "end": "1138770"
  },
  {
    "text": "your own domain or web collaborate or whatever which is pretty easy together ok there's some other options to leak",
    "start": "1138770",
    "end": "1145610"
  },
  {
    "text": "plain text um you can also include your links in documents so you can have",
    "start": "1145610",
    "end": "1152030"
  },
  {
    "text": "clickable links like in HTML but you can again also open links automatically once",
    "start": "1152030",
    "end": "1158480"
  },
  {
    "text": "the document is opened you can also make links being triggered if the user click",
    "start": "1158480",
    "end": "1165950"
  },
  {
    "text": "somewhere into the document and things like that and what we can do is we can submit two HTML PDF also allows you to",
    "start": "1165950",
    "end": "1173150"
  },
  {
    "text": "define a base so in this case we define a base which is our attacker server PDF",
    "start": "1173150",
    "end": "1180980"
  },
  {
    "text": "and all relative URLs in the document will open with the PDF domain",
    "start": "1180980",
    "end": "1188540"
  },
  {
    "text": "prepended so once this document is open",
    "start": "1188540",
    "end": "1194330"
  },
  {
    "text": "web browsers opened and the plaintext is exfiltrated with the was in the past of the PDF",
    "start": "1194330",
    "end": "1201890"
  },
  {
    "text": "ul this is a bit less silent and deforms issue you have seen before because it",
    "start": "1201890",
    "end": "1207500"
  },
  {
    "text": "will open a web browser but still it's pretty interesting and a lot of PDF",
    "start": "1207500",
    "end": "1212810"
  },
  {
    "text": "viewers are work for hyperlinks but will not submit forms okay and last but not",
    "start": "1212810",
    "end": "1218210"
  },
  {
    "text": "least there's also JavaScript in some PDF viewers which allows you to do the print the same to access the plant the",
    "start": "1218210",
    "end": "1225320"
  },
  {
    "text": "plain text content and also leak it if the if scripting is actually supported",
    "start": "1225320",
    "end": "1231610"
  },
  {
    "text": "okay so much 40 super easy attacks they can I call them easy because they can",
    "start": "1231610",
    "end": "1237650"
  },
  {
    "start": "1232000",
    "end": "1380000"
  },
  {
    "text": "easily be crafted and they can also easily be detected by having a closer look at the document structure right so",
    "start": "1237650",
    "end": "1245150"
  },
  {
    "text": "we saw it can be do more can we somehow modify the documents plain text by",
    "start": "1245150",
    "end": "1250580"
  },
  {
    "text": "performing targeted modification on the ciphertext level itself and because I",
    "start": "1250580",
    "end": "1256280"
  },
  {
    "text": "suck at crypto from here on Fabien came around had a closer look at the crypto",
    "start": "1256280",
    "end": "1261410"
  },
  {
    "text": "and applied all his crypto magic tricks to PDF yeah thank you yes and let's talk",
    "start": "1261410",
    "end": "1267410"
  },
  {
    "text": "about encryption and PF so let's talk a bit more in a broader sense about the",
    "start": "1267410",
    "end": "1272570"
  },
  {
    "text": "history of encryption in PS so the first version of the standard didn't have any",
    "start": "1272570",
    "end": "1279020"
  },
  {
    "text": "encryption defined but after that Adobe decided to add rc4 encryption with a 40",
    "start": "1279020",
    "end": "1285650"
  },
  {
    "text": "bit key so that were expert cipher times so that was fine for them then they",
    "start": "1285650",
    "end": "1291950"
  },
  {
    "text": "decided to add 1 and 28 bit keys and all of this is deprecated by now up until",
    "start": "1291950",
    "end": "1297530"
  },
  {
    "text": "version 1.6 and 1.7 and that's around the point when it became an ISO standard as well so then they added is CBC was a",
    "start": "1297530",
    "end": "1306880"
  },
  {
    "text": "128-bit key this is the real news and well they updated that newer versions to",
    "start": "1306880",
    "end": "1314630"
  },
  {
    "text": "use 256-bit keys and what's important here is that the key derivation function changed multiple times so it was broken",
    "start": "1314630",
    "end": "1322760"
  },
  {
    "text": "a lot of times and it was a weird key derivation function and nobody could say anything about that but in the last",
    "start": "1322760",
    "end": "1330260"
  },
  {
    "text": "version they changed it to be a document level white key derivation function so before every object has it had its",
    "start": "1330260",
    "end": "1338110"
  },
  {
    "text": "own key for encryption and decryption but now in the newest version it's a",
    "start": "1338110",
    "end": "1343840"
  },
  {
    "text": "document level white encryption so the key is the same for all of the objects for every ciphertext they use the same",
    "start": "1343840",
    "end": "1350049"
  },
  {
    "text": "key this will be relevant later so whether its encryption there must be",
    "start": "1350049",
    "end": "1355420"
  },
  {
    "text": "some form of integrity protection right you want to build a secure data format so you should have some way to prevent",
    "start": "1355420",
    "end": "1361179"
  },
  {
    "text": "an attacker from modifying your document well in PF there is none so no mac no",
    "start": "1361179",
    "end": "1370150"
  },
  {
    "text": "authenticated encryption so no is GCM it's simply is CBC without any integrity",
    "start": "1370150",
    "end": "1376630"
  },
  {
    "text": "protection that's what got up thinking haven't we seen this somewhere before so",
    "start": "1376630",
    "end": "1383380"
  },
  {
    "start": "1380000",
    "end": "1574000"
  },
  {
    "text": "some of you might remember our text from last year the e-file text or CBC gadget attacks and encrypted emails in so an S",
    "start": "1383380",
    "end": "1391240"
  },
  {
    "text": "moment open PGP and basically the attacks we applied here are pretty similar but if you don't remember no",
    "start": "1391240",
    "end": "1398080"
  },
  {
    "text": "worries Argus like if you brush up on that so these malleability gated text mainly",
    "start": "1398080",
    "end": "1404410"
  },
  {
    "text": "required three ingredients one we need ciphertext malleability and more than",
    "start": "1404410",
    "end": "1409960"
  },
  {
    "text": "not a mac so we need more meaning ability or come to that and to perform male ability attacks we almost always",
    "start": "1409960",
    "end": "1417400"
  },
  {
    "text": "need some part of known plaintext so we need to know some part of the plaintext to be able to modify the cypher text",
    "start": "1417400",
    "end": "1424510"
  },
  {
    "text": "accordingly and finally of course if we want to leave trained to expect to an attacker we again need next filtration",
    "start": "1424510",
    "end": "1431049"
  },
  {
    "text": "channel well courtesy of yen's we already have that done so we can simply",
    "start": "1431049",
    "end": "1436120"
  },
  {
    "text": "reuse forms and hyperlinks to exfiltrate the content to the attacker so let's",
    "start": "1436120",
    "end": "1443140"
  },
  {
    "text": "look at ciphertext malleability and some of you might remember this graphic from",
    "start": "1443140",
    "end": "1448919"
  },
  {
    "text": "crypto 101 or whatever crypto elektra you maybe had somewhere so this is the",
    "start": "1448919",
    "end": "1455590"
  },
  {
    "text": "decryption function of is CBC so it's the cypher text up here the plaintext",
    "start": "1455590",
    "end": "1462460"
  },
  {
    "text": "down here and it simply works by taking a block of ciphertext decrypting it",
    "start": "1462460",
    "end": "1468320"
  },
  {
    "text": "eggs are in the previous block of ciphertext on Tibet to get the plaintext so what happens if you decide to change",
    "start": "1468320",
    "end": "1477019"
  },
  {
    "text": "the sing of bits in the ciphertext like in the initialization vector in the IV up here well if you do that that very",
    "start": "1477019",
    "end": "1485389"
  },
  {
    "text": "same bit changes in the plaintext that's due to this X operation so you can flip",
    "start": "1485389",
    "end": "1491509"
  },
  {
    "text": "bits in the plaintext but you can do more so if you happen to have some known",
    "start": "1491509",
    "end": "1496970"
  },
  {
    "text": "plaintext for example then you know the first block p0 down here then you can",
    "start": "1496970",
    "end": "1502850"
  },
  {
    "text": "simply XOR p0 onto the IV and get what we call a gadget so it's all zeros down",
    "start": "1502850",
    "end": "1510320"
  },
  {
    "text": "here and this is basically a blank sheet of paper and you can pull that any wind",
    "start": "1510320",
    "end": "1515769"
  },
  {
    "text": "ciphertext and have a blank sheet of paper so what can you do with the gadget well you can exert chosen ciphertext",
    "start": "1515769",
    "end": "1524090"
  },
  {
    "text": "onto that so simply take your URL H CPH TDP P dot the F and X are bad under the",
    "start": "1524090",
    "end": "1532789"
  },
  {
    "text": "ID and you get the URL in the decrypted plaintext so that works quite nice",
    "start": "1532789",
    "end": "1539509"
  },
  {
    "text": "at the beginning of the document but as I said you can copy a gadget and use different plaintext somewhere else what",
    "start": "1539509",
    "end": "1546740"
  },
  {
    "text": "happens if you do that is this so we move the gadget to the right of the",
    "start": "1546740",
    "end": "1553100"
  },
  {
    "text": "ciphertext and we get you to the other launched effect of CBC some random bytes",
    "start": "1553100",
    "end": "1558169"
  },
  {
    "text": "so we don't know the decryption value of this so we don't know what the result",
    "start": "1558169",
    "end": "1563509"
  },
  {
    "text": "here is but we still get our actual URL down here so we have to deal with a",
    "start": "1563509",
    "end": "1569570"
  },
  {
    "text": "random somehow I'll show you how we do that so that ciphertext malleability",
    "start": "1569570",
    "end": "1575750"
  },
  {
    "start": "1574000",
    "end": "1785000"
  },
  {
    "text": "done let's move on to known plaintext as I said we need to know some part of",
    "start": "1575750",
    "end": "1581059"
  },
  {
    "text": "known plaintext to build a gadget so we decided to have a look at the standard",
    "start": "1581059",
    "end": "1586220"
  },
  {
    "text": "again so maybe there's something under standard that helps us with that so we",
    "start": "1586220",
    "end": "1592580"
  },
  {
    "text": "came to look at the permission management of PS so in one of the first versions of PDF Adobe decided that maybe",
    "start": "1592580",
    "end": "1600710"
  },
  {
    "text": "only the author should be able to edit the document after creating it or users shouldn't be",
    "start": "1600710",
    "end": "1607000"
  },
  {
    "text": "able to print it so they added a value P where they put a bit mask where every",
    "start": "1607000",
    "end": "1613120"
  },
  {
    "text": "bit corresponds to the Machine so of course people started tampering with",
    "start": "1613120",
    "end": "1619000"
  },
  {
    "text": "that because it was basically left in plain text in the document and who wouldn't simply change a single number",
    "start": "1619000",
    "end": "1624880"
  },
  {
    "text": "if they know that's how to break the permission management so the eyes of working group decided in PDF 1.7 data",
    "start": "1624880",
    "end": "1632200"
  },
  {
    "text": "should of course encrypt that as well so any compliant reader has to compare this",
    "start": "1632200",
    "end": "1639010"
  },
  {
    "text": "value to the encrypted value so the original value was left in place and a viewer has to compare that to that to",
    "start": "1639010",
    "end": "1645130"
  },
  {
    "text": "the encrypted value to be sure that nobody changed that okay so how does it",
    "start": "1645130",
    "end": "1650740"
  },
  {
    "text": "look they used is 256 bit for this and therefore they need a block of plaintext",
    "start": "1650740",
    "end": "1657720"
  },
  {
    "text": "so at first they decided to add some ones for extension so they decided to",
    "start": "1657720",
    "end": "1665650"
  },
  {
    "text": "simply add some bits for extension for by just once okay next they put the",
    "start": "1665650",
    "end": "1673420"
  },
  {
    "text": "permission value so that has to be somewhere in there to be efficient so that's the next four bytes so that's a",
    "start": "1673420",
    "end": "1679270"
  },
  {
    "text": "bit mask of permissions next they put a character T or F for true or false in",
    "start": "1679270",
    "end": "1685720"
  },
  {
    "text": "there to show if the metadata of the document is encrypted and finally they",
    "start": "1685720",
    "end": "1692560"
  },
  {
    "text": "put an acronym in there a DB for Adobe probably and finally to fill up sixteen",
    "start": "1692560",
    "end": "1699550"
  },
  {
    "text": "by sixteen bytes there are some random so that's unknown to us but well we know",
    "start": "1699550",
    "end": "1707470"
  },
  {
    "text": "the first 12 bytes of that so that's known plaintext by design and that is",
    "start": "1707470",
    "end": "1713080"
  },
  {
    "text": "quite nice so let me show you how that looks in an actual document so we have",
    "start": "1713080",
    "end": "1720940"
  },
  {
    "text": "this fight complex and cryptic nary you can see down here the p-value I've",
    "start": "1720940",
    "end": "1726130"
  },
  {
    "text": "mentioned so that's the unencrypted a bit mask of permission and the post",
    "start": "1726130",
    "end": "1731170"
  },
  {
    "text": "value is the extended value so that what I've shown you in the last and this encrypted with is so remember",
    "start": "1731170",
    "end": "1740110"
  },
  {
    "text": "what I've told you before about the key derivation in PDF 1.7 X and Larry Page",
    "start": "1740110",
    "end": "1745620"
  },
  {
    "text": "decided to use a document white key and that means that every cipher text in",
    "start": "1745620",
    "end": "1753940"
  },
  {
    "text": "this document is encrypted under the very same key so any plain text from the",
    "start": "1753940",
    "end": "1760870"
  },
  {
    "text": "perms value can be reused in any other cipher text so to sum that up fine for",
    "start": "1760870",
    "end": "1769300"
  },
  {
    "text": "you though we decided to add permission management to the PDF format that I sustained at your group decided to",
    "start": "1769300",
    "end": "1775690"
  },
  {
    "text": "encrypt that to prevent tampering and now there's no plain text available to",
    "start": "1775690",
    "end": "1780760"
  },
  {
    "text": "attackers and that's better so that's all ingredients done so let's look at",
    "start": "1780760",
    "end": "1787960"
  },
  {
    "text": "what we can do with that remember we only have 12 bytes of known plaintext so that's the difference to a complete",
    "start": "1787960",
    "end": "1794980"
  },
  {
    "text": "gadget but we have found that this is enough to change the display text so do",
    "start": "1794980",
    "end": "1801100"
  },
  {
    "text": "an overlay attack again we simply use a gadget to insert text and for the",
    "start": "1801100",
    "end": "1806770"
  },
  {
    "text": "comment sign after that and the random bytes of 4 bytes of unknown plaintext from the perms and 16 bytes from the",
    "start": "1806770",
    "end": "1813550"
  },
  {
    "text": "Avalanche effect I've shown you and comment that out so how would this look",
    "start": "1813550",
    "end": "1819970"
  },
  {
    "text": "in a document well basically like this so here I created a completely new object inside",
    "start": "1819970",
    "end": "1826900"
  },
  {
    "text": "that so overlay tags can be done with caches again let's talk about really",
    "start": "1826900",
    "end": "1834130"
  },
  {
    "text": "exfiltrating plain text so that's why we are here for so let's look at forms",
    "start": "1834130",
    "end": "1841030"
  },
  {
    "text": "again you have seen a form before like a few slides back at the ends and again",
    "start": "1841030",
    "end": "1847570"
  },
  {
    "text": "the font field is - also the actual encrypted data and the URL is now a",
    "start": "1847570",
    "end": "1854470"
  },
  {
    "text": "gadget so we simply put a short URL PDF so HTTP PDF that's around 12 bytes so",
    "start": "1854470",
    "end": "1863080"
  },
  {
    "text": "just so you know we put that in there and we can use that to extract write",
    "start": "1863080",
    "end": "1868120"
  },
  {
    "text": "data again and we'll see how this is automatically done in Chrome in the next demo so okay",
    "start": "1868120",
    "end": "1877230"
  },
  {
    "text": "the user opens the original document and put in the password okay Tex will",
    "start": "1877230",
    "end": "1886540"
  },
  {
    "text": "beeping awesome no problem so we see the secret text hello black hat and we want to leak that",
    "start": "1886540",
    "end": "1892150"
  },
  {
    "text": "so I've prepared a script that will perform the gadget detects for you so",
    "start": "1892150",
    "end": "1897160"
  },
  {
    "text": "what it will do is we get the gnome plain text from the pants value it will",
    "start": "1897160",
    "end": "1902550"
  },
  {
    "text": "generate a blanket from that it will be generating the URL get a value as a",
    "start": "1902550",
    "end": "1910090"
  },
  {
    "text": "string value to make it look nicer and then we set that to a document open the",
    "start": "1910090",
    "end": "1916420"
  },
  {
    "text": "HTTP server open the modified document the user inputs the password again and",
    "start": "1916420",
    "end": "1923820"
  },
  {
    "text": "there's the plain text and it's not only the plain text but it's actually the whole stream so we see everything that's",
    "start": "1924660",
    "end": "1931750"
  },
  {
    "text": "inside this object we need so that's pretty nice and that was automatic that",
    "start": "1931750",
    "end": "1938200"
  },
  {
    "text": "was fixed in your versions of promo codes okay let's look at hyperlinks so",
    "start": "1938200",
    "end": "1946120"
  },
  {
    "text": "we can just change this play text we can define you from URL but we can also",
    "start": "1946120",
    "end": "1951490"
  },
  {
    "text": "prepare your else to existing cipher text so now we manipulate the existing",
    "start": "1951490",
    "end": "1956500"
  },
  {
    "text": "object so existing cipher text well we can do that by simply appending a",
    "start": "1956500",
    "end": "1961570"
  },
  {
    "text": "catcher a prepending a gadget to the original cipher text and we get a URL of",
    "start": "1961570",
    "end": "1967780"
  },
  {
    "text": "course they are 20 bytes of random in that and that might break your link Otis in practice it does quite often so let",
    "start": "1967780",
    "end": "1976750"
  },
  {
    "text": "me talk about issues with that so our gadgets are short that means all your elves are short short bad words well you",
    "start": "1976750",
    "end": "1984430"
  },
  {
    "text": "might be hard-pressed to get the domain PDF in real life and they're random",
    "start": "1984430",
    "end": "1990130"
  },
  {
    "text": "bytes in the URL so that might break your land cover so this is all but flaky it's not as stable as it should be and",
    "start": "1990130",
    "end": "1997890"
  },
  {
    "text": "well I've mentioned before but of course if you use CBC we use because they are seven petting",
    "start": "1997890",
    "end": "2003870"
  },
  {
    "text": "and if you don't know the last bites that's bad because we can fix the petting and so on and so on another",
    "start": "2003870",
    "end": "2010500"
  },
  {
    "text": "problem was that most plain text in PDF documents is actually compressed so",
    "start": "2010500",
    "end": "2016220"
  },
  {
    "text": "those are hard are exotel complex compressed plain text a holiday exfiltrate because if you simply ignore",
    "start": "2016220",
    "end": "2022290"
  },
  {
    "text": "the compression and depend of your l prepend au l rather that will again break the URL encoded because to the URL",
    "start": "2022290",
    "end": "2029250"
  },
  {
    "text": "encoded that's basically random bites again and pre and appending text to compressed plain text is more",
    "start": "2029250",
    "end": "2035190"
  },
  {
    "text": "complicated so we could have stopped but we were well maybe compression can do",
    "start": "2035190",
    "end": "2041820"
  },
  {
    "text": "something for us so the compression use is the so-called deflate compression and",
    "start": "2041820",
    "end": "2048570"
  },
  {
    "text": "deflate has two nice properties for us one is the data stream the compressed data stream is separated in so-called",
    "start": "2048570",
    "end": "2055830"
  },
  {
    "text": "segments or blocks and segments can be uncompressed or compressed so you can",
    "start": "2055830",
    "end": "2061470"
  },
  {
    "text": "mark segments as uncompressed and write simple texts in that and then say this segment is over start with the next one",
    "start": "2061470",
    "end": "2067649"
  },
  {
    "text": "and the second one is the actual compression is performed by using",
    "start": "2067650",
    "end": "2073440"
  },
  {
    "text": "so-called BEC references so I can refer back to a segment where Rob comes in and",
    "start": "2073440",
    "end": "2079470"
  },
  {
    "text": "use that again in ciphertext or in the plain text rather so let's build this",
    "start": "2079470",
    "end": "2085710"
  },
  {
    "text": "from the ground up with gadgets so this is the original already decompressed contents so of course in the cypher text",
    "start": "2085710",
    "end": "2093149"
  },
  {
    "text": "it will be compressed but you can read it otherwise and let's add some gadget",
    "start": "2093150",
    "end": "2098910"
  },
  {
    "text": "in front of that so let's start with adding the deflate header so deflate has",
    "start": "2098910",
    "end": "2104670"
  },
  {
    "text": "some higher values that should be in front of that to let you know we the view I know that this is the compressed",
    "start": "2104670",
    "end": "2110910"
  },
  {
    "text": "of course there are random bytes so let's ignore that for now on start the",
    "start": "2110910",
    "end": "2117630"
  },
  {
    "text": "next gadget this is our URL again random bytes should be bad but the next gadget",
    "start": "2117630",
    "end": "2124350"
  },
  {
    "text": "is actually the first one that will be interpreted by the reader because we said hey the object starts at byte",
    "start": "2124350",
    "end": "2130740"
  },
  {
    "text": "offset 65 and you have to believe me about the next one and well we put a back reference in",
    "start": "2130740",
    "end": "2138089"
  },
  {
    "text": "there and suddenly we have a perfect ul so we say to the deferred algorithm",
    "start": "2138089",
    "end": "2144119"
  },
  {
    "text": "remember this URL we wrote back here just use that here and it's coming",
    "start": "2144119",
    "end": "2150089"
  },
  {
    "text": "together perfectly so how did this attacks work in practice",
    "start": "2150089",
    "end": "2157109"
  },
  {
    "text": "so how about viewers let's talk about evaluation so we test the 27 PDF viewers",
    "start": "2157109",
    "end": "2164190"
  },
  {
    "start": "2159000",
    "end": "2260000"
  },
  {
    "text": "27 more less popular PF viewers and found all of them vulnerable to at least",
    "start": "2164190",
    "end": "2170339"
  },
  {
    "text": "one of our text so we differentiated between the text with no user interaction so like the one you saw in",
    "start": "2170339",
    "end": "2177390"
  },
  {
    "text": "chrome when I open the document and the plain text is already leaked and those with user interaction that might either",
    "start": "2177390",
    "end": "2184019"
  },
  {
    "text": "be clicking somewhere in the document so if we overlaid the whole page with a",
    "start": "2184019",
    "end": "2189539"
  },
  {
    "text": "link for example or it might also be the dialog queues you have seen in Adobe but",
    "start": "2189539",
    "end": "2195900"
  },
  {
    "text": "as you can see a lot of viewers are actually vulnerable to attacks without any user interaction so let's look at",
    "start": "2195900",
    "end": "2205349"
  },
  {
    "text": "some more popular views let's look at Adobe and Foxit you've seen Toby before",
    "start": "2205349",
    "end": "2211710"
  },
  {
    "text": "and yes I've already told you via some DNS magic we can already extra try 250",
    "start": "2211710",
    "end": "2218910"
  },
  {
    "text": "bytes of plain text without any user interaction for Foxit and Adobe malleability gadgets so they are",
    "start": "2218910",
    "end": "2226230"
  },
  {
    "text": "implemented a bit differently that's why the results are differently for both attacks so most readers are not",
    "start": "2226230",
    "end": "2232410"
  },
  {
    "text": "perfectly standard-compliant and so on so different text for different years but still we have for Fox ed and Adobe",
    "start": "2232410",
    "end": "2239549"
  },
  {
    "text": "at least attacks with user interaction we could also break both wheels be tested on Mac OS with user interaction",
    "start": "2239549",
    "end": "2246299"
  },
  {
    "text": "again and as you have seen in chrome and also opera because they use the same engine we had acceleration without any user",
    "start": "2246299",
    "end": "2253500"
  },
  {
    "text": "interaction firstness all readers are not so nice actually because our readers are vulnerable so",
    "start": "2253500",
    "end": "2260279"
  },
  {
    "start": "2260000",
    "end": "2655000"
  },
  {
    "text": "let's talk about fixing this so you might think signatures might work right",
    "start": "2260279",
    "end": "2266579"
  },
  {
    "text": "signatures are some kind of integrity but actually some cryptographic signatures of course and that should prevent the",
    "start": "2266579",
    "end": "2272880"
  },
  {
    "text": "attack right not so much for one",
    "start": "2272880",
    "end": "2278840"
  },
  {
    "text": "signatures do not prevent opening a document so a broken signature does not",
    "start": "2278840",
    "end": "2284070"
  },
  {
    "text": "prevent you from opening the document because well it's not mandatory that there's a signature and that it's valid",
    "start": "2284070",
    "end": "2289680"
  },
  {
    "text": "so your plain text might still be leaked even before you see the document so that's bad you will get a warning but",
    "start": "2289680",
    "end": "2295920"
  },
  {
    "text": "then it's delayed and signatures can be stripped so they are not encrypted they",
    "start": "2295920",
    "end": "2302310"
  },
  {
    "text": "are not mandatory so the attacker can simply strip the signature from the document or even at their own signature",
    "start": "2302310",
    "end": "2308840"
  },
  {
    "text": "so again they won't help you and some members of our team this year presented",
    "start": "2308840",
    "end": "2314850"
  },
  {
    "text": "the text on signatures and showed that in most viewers signatures can be easily",
    "start": "2314850",
    "end": "2319860"
  },
  {
    "text": "forged so again that's bad so closing",
    "start": "2319860",
    "end": "2325950"
  },
  {
    "text": "back channels must have right so yes if we have no way to get trained to expect",
    "start": "2325950",
    "end": "2331170"
  },
  {
    "text": "to the attacker there's no way to leak plain text okay but that is rather hard to do the PDF",
    "start": "2331170",
    "end": "2338100"
  },
  {
    "text": "standard is 800 pages long by now and these nearly scratched the surface with forms and hyperlinks and maybe Java",
    "start": "2338100",
    "end": "2345750"
  },
  {
    "text": "Script so should we really move that so there might be more and should we really",
    "start": "2345750",
    "end": "2351540"
  },
  {
    "text": "move all of them so don't you want farms to encrypt the PS don't you want links so links might be the worst so who",
    "start": "2351540",
    "end": "2358440"
  },
  {
    "text": "doesn't want links in their PDF documents and should we really move Java okay maybe we should but the thing the",
    "start": "2358440",
    "end": "2366600"
  },
  {
    "text": "single thing we could do as implementers of PDF us is to ask the user before connecting to a server so shall Santa a",
    "start": "2366600",
    "end": "2374220"
  },
  {
    "text": "lot like Adobe does to inform the user there's some connection to web server but not all of them do so what were the",
    "start": "2374220",
    "end": "2381390"
  },
  {
    "text": "reactions so what were some shorter mitigations well pepper decided to do exactly that",
    "start": "2381390",
    "end": "2387480"
  },
  {
    "text": "at a dialog telling you the whole URL and this is the encrypted plain text so",
    "start": "2387480",
    "end": "2393180"
  },
  {
    "text": "that should be easy to recognize and you will probably not click that link any",
    "start": "2393180",
    "end": "2399690"
  },
  {
    "text": "most of it Google on the other hand well they fixed the out of how to submit",
    "start": "2399690",
    "end": "2404819"
  },
  {
    "text": "form back but after that they simply decided to stop trying to fix the",
    "start": "2404819",
    "end": "2410700"
  },
  {
    "text": "unfixable and we think they are pretty right in that because the ones who have",
    "start": "2410700",
    "end": "2416160"
  },
  {
    "text": "to fix that you see ISO standards group so these attacks shouldn't be possible in the first place so let's look at some real",
    "start": "2416160",
    "end": "2422819"
  },
  {
    "text": "mitigations well mitigations against repping attacks to deprecate powershell",
    "start": "2422819",
    "end": "2430049"
  },
  {
    "text": "encryption so very little documents actually have need for unencrypted paths",
    "start": "2430049",
    "end": "2435270"
  },
  {
    "text": "in encrypted documents some very little documents would be affected by that assembly remove that and well as the",
    "start": "2435270",
    "end": "2442500"
  },
  {
    "text": "short term fix disallow access from unencrypted to encrypt the documents their objects so if a form that has an",
    "start": "2442500",
    "end": "2449609"
  },
  {
    "text": "iron encrypt that URL cannot access an encrypted value then there's no problem",
    "start": "2449609",
    "end": "2455670"
  },
  {
    "text": "for now and against CBC gated well it's easy as well use authenticated",
    "start": "2455670",
    "end": "2461640"
  },
  {
    "text": "encryption Soyuz is GCM or if you really must use CVC with a Mac at least but",
    "start": "2461640",
    "end": "2467760"
  },
  {
    "text": "then be careful of downgrade attacks and change the key derivation function to be able to detect any downgrade attacks",
    "start": "2467760",
    "end": "2474829"
  },
  {
    "text": "okay so what did the dhobi say about that Adobe three action was where they",
    "start": "2474829",
    "end": "2481589"
  },
  {
    "text": "said this has been escalated to the heights of working group on crypto and signal trusts and will be taken up in",
    "start": "2481589",
    "end": "2486599"
  },
  {
    "text": "the next revision of the PDF spec so I guess that's a win so all in all PDF",
    "start": "2486599",
    "end": "2495630"
  },
  {
    "text": "documents allow for partial encryption which leads to diode exfiltration attacks which leads to little plain text",
    "start": "2495630",
    "end": "2502789"
  },
  {
    "text": "PDF uses legacy crypto like unauthenticated CBC which leads to",
    "start": "2502789",
    "end": "2508260"
  },
  {
    "text": "gather the text which again leads to direct leads to acceleration of plain text and therefore PDF as a data format",
    "start": "2508260",
    "end": "2515970"
  },
  {
    "text": "that can accelerate itself like encrypted email as shown lastly so you",
    "start": "2515970",
    "end": "2521670"
  },
  {
    "text": "can reach us at this email address if you have any questions and on this website you will find all the attacks or",
    "start": "2521670",
    "end": "2527760"
  },
  {
    "text": "the details the papers on both PF X and the attacks on signatures and",
    "start": "2527760",
    "end": "2534870"
  },
  {
    "text": "yes you can also find all exploit PDF so if you didn't help me to see your read",
    "start": "2534870",
    "end": "2539910"
  },
  {
    "text": "on the slide you can test yourself and yeah that's it thank you and any questions I am yet",
    "start": "2539910",
    "end": "2560160"
  },
  {
    "text": "will this method will your method work to reveal redacted information in a PDF",
    "start": "2560160",
    "end": "2566250"
  },
  {
    "text": "document that's been where the owner of that PDF document has redacted the information using a recent version of",
    "start": "2566250",
    "end": "2573510"
  },
  {
    "text": "Adobe what is the question if you can do that in recent version of adobe's",
    "start": "2573510",
    "end": "2581600"
  },
  {
    "text": "uncover redacted text it says the question yeah so if you have this is",
    "start": "2582230",
    "end": "2587730"
  },
  {
    "text": "about encryption so it's a bit off-topic but we will let it exactly this last week and no so the reaction functions of",
    "start": "2587730",
    "end": "2595980"
  },
  {
    "text": "all modern PDF use are actually pretty good pretty well implemented these days if you use the actual text redaction",
    "start": "2595980",
    "end": "2602520"
  },
  {
    "text": "function they will actually work on the underlying object that have been immature in text and actually redacted",
    "start": "2602520",
    "end": "2608570"
  },
  {
    "text": "in Adobe actually if you delete the text or object under some circumstances it",
    "start": "2608570",
    "end": "2614340"
  },
  {
    "text": "will still be in the document mmm I said it's got nothing to do with encryption but it's quite interesting if you export",
    "start": "2614340",
    "end": "2622050"
  },
  {
    "text": "from other applications like from word and so on the redaction function may not",
    "start": "2622050",
    "end": "2627240"
  },
  {
    "text": "be that good as we see in the news all the time when you can unruhe text in",
    "start": "2627240",
    "end": "2632340"
  },
  {
    "text": "documents",
    "start": "2632340",
    "end": "2634790"
  },
  {
    "text": "okay all right thank you [Applause]",
    "start": "2648970",
    "end": "2657299"
  }
]