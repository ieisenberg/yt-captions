[
  {
    "text": "hi everyone good day Jo and thanks for attending my talk my name is Mark yassan and I am a security researcher from ibmx",
    "start": "120",
    "end": "7240"
  },
  {
    "text": "force and today I'm going to share with you my research on the H HTML rendering",
    "start": "7240",
    "end": "13200"
  },
  {
    "text": "engine the agenda for the talk the first part overview is where I will give you a",
    "start": "14320",
    "end": "19560"
  },
  {
    "text": "bird's eye view of the content of my presentation the overview part is where I also discuss the differing method I",
    "start": "19560",
    "end": "25760"
  },
  {
    "text": "use to find up the major changes between H htmls and I mshtml rendering engine",
    "start": "25760",
    "end": "33440"
  },
  {
    "text": "the second part attack surface is where all where all discuss the different attack vectors that comprises the attack",
    "start": "33440",
    "end": "39680"
  },
  {
    "text": "surface of H HTML the third part exploit mitigations is where I'll discuss the",
    "start": "39680",
    "end": "45520"
  },
  {
    "text": "different mitigation in place that attempts to make it difficult to exploit vulnerabilities in HTML and its",
    "start": "45520",
    "end": "52320"
  },
  {
    "text": "dependencies and finally conclusion is where I summarize the most important points and also discuss additional",
    "start": "52320",
    "end": "58640"
  },
  {
    "text": "interesting research areas related to H [Music]",
    "start": "58640",
    "end": "64040"
  },
  {
    "text": "HTML some notes before we continue a detailed white paper is available and it will be available on the blackout",
    "start": "64040",
    "end": "70600"
  },
  {
    "text": "website among other things it contains contains much more detailed explanation",
    "start": "70600",
    "end": "75680"
  },
  {
    "text": "a complete list of HTML classes and functions related to this presentation",
    "start": "75680",
    "end": "80880"
  },
  {
    "text": "and also a comprehensive list of references finally all information is presented is based on edge running is",
    "start": "80880",
    "end": "88280"
  },
  {
    "text": "based on edge running on six superbit Windows 10 build 10240 which was released around 3 weeks ago the first",
    "start": "88280",
    "end": "95159"
  },
  {
    "text": "version of the paper and presentation I sent to black hat was based on an older Windows 10 build so you might have to",
    "start": "95159",
    "end": "100560"
  },
  {
    "text": "wait a few more days for the updated presentation in paper to be to be uploaded in the blackout",
    "start": "100560",
    "end": "106320"
  },
  {
    "text": "website with that let's begin",
    "start": "106320",
    "end": "113280"
  },
  {
    "text": "overview so first and foremost what is a rendering engine a rendering engine is",
    "start": "113280",
    "end": "118320"
  },
  {
    "text": "the one responsible for paring the markup such as HTML in this case ret retrieving and parsing any reference",
    "start": "118320",
    "end": "125439"
  },
  {
    "text": "sources in the example you see in the screen a CSS file and an image file was",
    "start": "125439",
    "end": "130560"
  },
  {
    "text": "retrieved and additionally passed and finally the rendering engine will display the contents of the page in the",
    "start": "130560",
    "end": "136280"
  },
  {
    "text": "proper layout with the correct style supplied eventually resulting due the page you see on the screen that's a",
    "start": "136280",
    "end": "142800"
  },
  {
    "text": "simple high level description of of what a rendering of what a rendering engine is however",
    "start": "142800",
    "end": "150879"
  },
  {
    "text": "looking under the hood a lot of internal mechanisms are at work for example the",
    "start": "150879",
    "end": "156400"
  },
  {
    "text": "hhm rendering engine here is hosted in the edge content",
    "start": "156400",
    "end": "162720"
  },
  {
    "text": "process [Music] here because the edge content process",
    "start": "162720",
    "end": "168959"
  },
  {
    "text": "host code that handles potentially malicious input it is sandbox using App",
    "start": "168959",
    "end": "175360"
  },
  {
    "text": "container here the content process is also running",
    "start": "175360",
    "end": "180640"
  },
  {
    "text": "64bit by default and also listed here are the additional exploit mitigation such as",
    "start": "180640",
    "end": "186239"
  },
  {
    "text": "dep aslr with high enthropy and force aslr enabled going back to H HTML it has",
    "start": "186239",
    "end": "194560"
  },
  {
    "text": "several entry point classes here responsible for handling certain",
    "start": "194560",
    "end": "201360"
  },
  {
    "text": "types of input such as markups images audio video content and more these entry point",
    "start": "201360",
    "end": "209080"
  },
  {
    "text": "classes May in turn call upon their dependencies to help with the actual",
    "start": "209080",
    "end": "214200"
  },
  {
    "text": "parsing of the content in addition to the mitigations applied to the edge content process where where hedge HTML",
    "start": "214200",
    "end": "221480"
  },
  {
    "text": "is hosted H HTML and its dependencies have additional exploit",
    "start": "221480",
    "end": "226959"
  },
  {
    "text": "mitigations applied to them these are stock buer Security check or GS and",
    "start": "226959",
    "end": "234000"
  },
  {
    "text": "the and the recently introduced control flow guard finally there are exploit",
    "start": "234000",
    "end": "240280"
  },
  {
    "text": "mitigations specifically applied to H HTML to handle certain types of memory",
    "start": "240280",
    "end": "246319"
  },
  {
    "text": "corruption this this are the virtual table guard and mgc and that is just a quick rundown of",
    "start": "246319",
    "end": "254040"
  },
  {
    "text": "the internal mechanisms at work I'll discuss their details in the in the later",
    "start": "254040",
    "end": "260400"
  },
  {
    "text": "slides so earlier I I noted that I will also discuss the diffing method I used",
    "start": "261320",
    "end": "266720"
  },
  {
    "text": "to identify ma major changes from msh HTML to Edge HTML this diffing method",
    "start": "266720",
    "end": "272880"
  },
  {
    "text": "allowed me to spot potential changes in the attack surface which I would eventually further confirm by looking at",
    "start": "272880",
    "end": "278479"
  },
  {
    "text": "the code it is actually pretty simple and you just need a a python script and a t",
    "start": "278479",
    "end": "284840"
  },
  {
    "text": "text diffing tool it can be made a lot more complicated but for the sake of discussion the simplest way to do it is",
    "start": "284840",
    "end": "291000"
  },
  {
    "text": "describe here if you think about it because classes and name spaces suggest group of",
    "start": "291000",
    "end": "297039"
  },
  {
    "text": "related code which may turn correspond to a program feature or functionality diffing them may give us",
    "start": "297039",
    "end": "302960"
  },
  {
    "text": "an idea if a feature or functionality was removed or",
    "start": "302960",
    "end": "308120"
  },
  {
    "text": "added so using ID the python I wrote a script to enumerate all functions and",
    "start": "309440",
    "end": "314600"
  },
  {
    "text": "variable names and then extract their name name space or class portion I sort",
    "start": "314600",
    "end": "320400"
  },
  {
    "text": "I sorted the resulting name space list remove the duplicates and dump the name SPAC list into a file",
    "start": "320400",
    "end": "327039"
  },
  {
    "text": "here then finally I did the resulting name space list using the standard diff 2 and the result will be something",
    "start": "327039",
    "end": "333479"
  },
  {
    "text": "similar to",
    "start": "333479",
    "end": "336160"
  },
  {
    "text": "this here's what the output look like in a text editor that supports the Deep output",
    "start": "340240",
    "end": "346039"
  },
  {
    "text": "format in the first output the the following remove classes suggest possible changes in the support for EMF",
    "start": "346039",
    "end": "352919"
  },
  {
    "text": "and WF images the second output which which list new name spaces under the",
    "start": "352919",
    "end": "358639"
  },
  {
    "text": "cast D names space suggest new dome object types which that are exposed bya the D",
    "start": "358639",
    "end": "365720"
  },
  {
    "text": "API some interesting output you will find includes new name spaces or classes that suggest ported code from another",
    "start": "367560",
    "end": "374280"
  },
  {
    "text": "rendering engine the example shown suggest ported Cod from another rendering engine blink in this case for",
    "start": "374280",
    "end": "381680"
  },
  {
    "text": "the new web audio support in Ed",
    "start": "381680",
    "end": "385280"
  },
  {
    "text": "HTML of course the method has its caveats first the results are suggestions further analysis is needed",
    "start": "387960",
    "end": "394520"
  },
  {
    "text": "because it might be the case that a class or a nam space might have been renamed in that if that is the case you",
    "start": "394520",
    "end": "400520"
  },
  {
    "text": "will you will find a new name space plus a deleted name space Additionally the",
    "start": "400520",
    "end": "405560"
  },
  {
    "text": "method of course requires the AV the availability of symbols finally the this simple diffing",
    "start": "405560",
    "end": "411800"
  },
  {
    "text": "method can be used to diff functions and Method names to identify the changes and functionality of classes for example or",
    "start": "411800",
    "end": "418360"
  },
  {
    "text": "strings then you strings may give you clues about what the new functionalities are and finally imports and exports new",
    "start": "418360",
    "end": "425919"
  },
  {
    "text": "Imports suggest new libraries and functions being being used by the binary",
    "start": "425919",
    "end": "431039"
  },
  {
    "text": "and Export suggest new functionalities exposed by the [Music]",
    "start": "431039",
    "end": "437720"
  },
  {
    "text": "binary so with that let's move on to the discussion of edge htmls attack",
    "start": "437720",
    "end": "444250"
  },
  {
    "text": "[Music] surface in the next next slide you see a",
    "start": "444250",
    "end": "450440"
  },
  {
    "text": "diagram like the one you see on the screen the left side describes the type of input and the center names the H HTML",
    "start": "450440",
    "end": "457919"
  },
  {
    "text": "class that processes the input and the rightmost side is the library used by the H HTML class to perform the actual",
    "start": "457919",
    "end": "465520"
  },
  {
    "text": "paring of the input type if if applicable note that the listed H HTM",
    "start": "465520",
    "end": "470759"
  },
  {
    "text": "HED HTML class are the entero class most of them use other H HTML classes for the",
    "start": "470759",
    "end": "477240"
  },
  {
    "text": "processing the purpose of listing them is that you can use them as a starting point when you want to analyze how HED",
    "start": "477240",
    "end": "483879"
  },
  {
    "text": "HTML handle certain types of input for example if you if you want to understand",
    "start": "483879",
    "end": "489240"
  },
  {
    "text": "how XML based markup parsing work you can begin by setting a breakpoint to all",
    "start": "489240",
    "end": "495000"
  },
  {
    "text": "methods of the cxml pre-class and then start your analysis from",
    "start": "495000",
    "end": "501120"
  },
  {
    "text": "there the first set of attack vectors are the markup and sty parsing performed by H HTML if you look at the parser for",
    "start": "503280",
    "end": "510759"
  },
  {
    "text": "HTML and XML XML based markups you'll notice that there are two sets of parsers the first parser are the pre",
    "start": "510759",
    "end": "518279"
  },
  {
    "text": "parsers here and here they basically perform the initial parsing of the markup and pre-download",
    "start": "518279",
    "end": "525760"
  },
  {
    "text": "requir reference resources such as CSS CSS files image files and then they also",
    "start": "525760",
    "end": "531040"
  },
  {
    "text": "store the part tags to to get to a tag stream the post parsers here and here",
    "start": "531040",
    "end": "540240"
  },
  {
    "text": "fesh the tags from the tag stream performs additional parsing if necessary",
    "start": "541480",
    "end": "546720"
  },
  {
    "text": "and then eventually resorting resulting to the creation of dumb objects that represent the part",
    "start": "546720",
    "end": "552600"
  },
  {
    "text": "types H HTML uses it own internal classes for parsing HTML and CSS files",
    "start": "552600",
    "end": "558680"
  },
  {
    "text": "for XML based markup such as xhtml SVG XML H HTML uses XML light for the XML",
    "start": "558680",
    "end": "567360"
  },
  {
    "text": "parsing there's also an X LT filter that first check if the XML file is",
    "start": "567360",
    "end": "572800"
  },
  {
    "text": "referencing an a St sheet if it is the XML file is first transformed and the",
    "start": "572800",
    "end": "578600"
  },
  {
    "text": "resulting output is is fed back to the parser to the mark of parser this exslt filter depends on XML",
    "start": "578600",
    "end": "586240"
  },
  {
    "text": "light for the initial scanning of the XML in order to identify if it is referencing an X XSL Styles sheet and",
    "start": "586240",
    "end": "593959"
  },
  {
    "text": "then it uses msxml 6 for the actual transformation of the XML",
    "start": "593959",
    "end": "599519"
  },
  {
    "text": "finally code code for supporting code for supporting binary behaviors which includes bin binary behaviors such as",
    "start": "599519",
    "end": "606600"
  },
  {
    "text": "vml was removed in h HTML that in that in turn further contributes to the attx",
    "start": "606600",
    "end": "612279"
  },
  {
    "text": "surface reduction in h",
    "start": "612279",
    "end": "615480"
  },
  {
    "text": "HTML mentioned in the mark of parsing was XML light XML light is a lightweight",
    "start": "617560",
    "end": "622760"
  },
  {
    "text": "XML parser and and adverti as a performant XML parser therefore the",
    "start": "622760",
    "end": "628240"
  },
  {
    "text": "reason it is used for for for the passing of xmla based markups H HTML",
    "start": "628240",
    "end": "633760"
  },
  {
    "text": "specifically uses the XML lights I exml reader interface when reading the XML",
    "start": "633760",
    "end": "639040"
  },
  {
    "text": "noes from XL from XML based markups so for XML based inputs one of the first",
    "start": "639040",
    "end": "644680"
  },
  {
    "text": "code to touch the XML file will be in XML [Music]",
    "start": "644680",
    "end": "650720"
  },
  {
    "text": "light I I also mentioned that H H HTML also uses msxml 6 for the XML",
    "start": "650720",
    "end": "656760"
  },
  {
    "text": "transformation H HTML specifically uses the IXL domum document interface for",
    "start": "656760",
    "end": "662360"
  },
  {
    "text": "loading the XML and the XSL sty sheet and then performing the XML transformation what this means in terms",
    "start": "662360",
    "end": "668920"
  },
  {
    "text": "of attack surface attack Vector is that the attacker can remotely Reach This XML loading and transformation code in msxml",
    "start": "668920",
    "end": "676720"
  },
  {
    "text": "6 via an XML file that reference an XSL Styles",
    "start": "676720",
    "end": "682279"
  },
  {
    "text": "sheet the second set of attack vertos I I'll discuss are the image decoding code",
    "start": "684160",
    "end": "689639"
  },
  {
    "text": "the image decoding routines can be remotely reached via direct link to the image or various HTML tags the names the",
    "start": "689639",
    "end": "696560"
  },
  {
    "text": "names of the H HTML classes that handles image processing starts with this with the string C IMG Tas",
    "start": "696560",
    "end": "705120"
  },
  {
    "text": "WC however these H HTML classes just relies on the Windows Imaging component",
    "start": "705120",
    "end": "710760"
  },
  {
    "text": "library for the actual decoding of the image an interesting change is that in h",
    "start": "710760",
    "end": "716079"
  },
  {
    "text": "HTML WF and EMF image support report bya GDI was removed therefore reducing the",
    "start": "716079",
    "end": "722360"
  },
  {
    "text": "attack surface in terms of image",
    "start": "722360",
    "end": "726040"
  },
  {
    "text": "processing as mentioned Windows Imaging component is used for the actual image decoding therefore the image decod the",
    "start": "728360",
    "end": "735000"
  },
  {
    "text": "image decoders in Windows Imaging component are remotely reachable to an attacker via the rendering engine",
    "start": "735000",
    "end": "741160"
  },
  {
    "text": "Windows Imaging component is a built in Windows component that any application can use for image decoding or encoding",
    "start": "741160",
    "end": "748600"
  },
  {
    "text": "HH uses this IWC Imaging Factory create decoder for instantiating the decoder",
    "start": "748600",
    "end": "755680"
  },
  {
    "text": "for a particular image",
    "start": "755680",
    "end": "758920"
  },
  {
    "text": "format after image decoding we now go to audio and video content decoding audio",
    "start": "761480",
    "end": "767320"
  },
  {
    "text": "audio and video content can can be passed to the rendering engine via a direct link or via the audio on audio",
    "start": "767320",
    "end": "773920"
  },
  {
    "text": "and video tags the C media element class in HTML uses the media Foundation Li",
    "start": "773920",
    "end": "779920"
  },
  {
    "text": "library for the actual decoding of the audio video content also in addition to",
    "start": "779920",
    "end": "785639"
  },
  {
    "text": "media content processing H HTML supports audio video captioning by the track",
    "start": "785639",
    "end": "792120"
  },
  {
    "text": "tag H HTML supports two captioning standards ttml and web VT ttml is XML",
    "start": "792120",
    "end": "799199"
  },
  {
    "text": "based therefore H H HTML uses XML light for the parsing web VT on the other hand",
    "start": "799199",
    "end": "805519"
  },
  {
    "text": "is a simple line based text format and Edge HTML has the internal parser to parse",
    "start": "805519",
    "end": "812639"
  },
  {
    "text": "it as mentioned media Foundation is the component used by HTML for decoding",
    "start": "815560",
    "end": "820959"
  },
  {
    "text": "audio and video content similar to Windows Imaging component is a built-in Windows component and it can be used by",
    "start": "820959",
    "end": "827720"
  },
  {
    "text": "other applications for audio and video playback it is it is a rather large framework supporting a number of media",
    "start": "827720",
    "end": "834160"
  },
  {
    "text": "container formats and codecs H HTML specifically use the IMF media engine",
    "start": "834160",
    "end": "839720"
  },
  {
    "text": "interface of media foundation for setting up the media source and control and Playback again similar to Windows",
    "start": "839720",
    "end": "846880"
  },
  {
    "text": "Imaging component media Foundation is another security critical library because its decoder are reachable to an",
    "start": "846880",
    "end": "853000"
  },
  {
    "text": "attacker via the rendering engine another attack Vector of course",
    "start": "853000",
    "end": "860120"
  },
  {
    "text": "is the is the font rendering in HTML using the fun pH CSS rule arbitrary",
    "start": "860120",
    "end": "865639"
  },
  {
    "text": "funds can be passed to the rendering engine hhd supports ttf OTF and W funds",
    "start": "865639",
    "end": "872120"
  },
  {
    "text": "formats and they are rendered via direct ride if the fund format is W the",
    "start": "872120",
    "end": "877519"
  },
  {
    "text": "compress ttf or OTF font is first is first extracted and then passed to the r",
    "start": "877519",
    "end": "883160"
  },
  {
    "text": "an interesting change is that eot fund support was removed in h HTML because the passing of eot fonts requires the",
    "start": "883160",
    "end": "890360"
  },
  {
    "text": "use of T2 embed in the GDI Library the number of libraries depended upon by H H",
    "start": "890360",
    "end": "895800"
  },
  {
    "text": "HTML to R to render for or par fund was reduced therefore another attx surface",
    "start": "895800",
    "end": "901839"
  },
  {
    "text": "reduction in h HTML as mentioned direct R is used for",
    "start": "901839",
    "end": "908560"
  },
  {
    "text": "the font rendering in HTML direct R is part of the direct direct X family of",
    "start": "908560",
    "end": "913800"
  },
  {
    "text": "apis and like GDI direct right parses the font in the user mode process where",
    "start": "913800",
    "end": "919040"
  },
  {
    "text": "it is hosted therefore the font parsing code is sandbox in the same AG content process that hosts the rendering engine",
    "start": "919040",
    "end": "926680"
  },
  {
    "text": "the recite is discussed in the excellent one vulnerability to them presentation",
    "start": "926680",
    "end": "931839"
  },
  {
    "text": "needless to say direct C is a is another security critical library because it's its font forcing code are remotely",
    "start": "931839",
    "end": "938480"
  },
  {
    "text": "reachable via the rendering engine lastly one of the largest attack",
    "start": "938480",
    "end": "945839"
  },
  {
    "text": "surface in the rendering engine is the Dom API via the Dom API JavaScript can",
    "start": "945839",
    "end": "951600"
  },
  {
    "text": "interact directly with the Dom objects in the rendering engine this this Dom objects main turn execute code in other",
    "start": "951600",
    "end": "958240"
  },
  {
    "text": "internal render ing engine objects and may invoke code in in the libraries they use if",
    "start": "958240",
    "end": "965079"
  },
  {
    "text": "applicable here is an example JavaScript code calls document that write in the",
    "start": "965600",
    "end": "970800"
  },
  {
    "text": "rendering engine code that transfer call to the D object is executed the Dom",
    "start": "970800",
    "end": "975920"
  },
  {
    "text": "object in turn will invoke methods in in other internal rendering objects because of this Dom API calls can change the",
    "start": "975920",
    "end": "982959"
  },
  {
    "text": "state of the D Tree the Dom objects and other internal rendering engine objects",
    "start": "982959",
    "end": "990199"
  },
  {
    "text": "and because of unexpected State changes unexpected Dom API call input or incorrect State when a d API is called",
    "start": "990440",
    "end": "997519"
  },
  {
    "text": "memory corruption vulnerabilities may result an example is the use ofree Illustrated on the screen in this",
    "start": "997519",
    "end": "1004000"
  },
  {
    "text": "particular case CMS HTML Ed object was unexpectedly freed when document that",
    "start": "1004000",
    "end": "1010399"
  },
  {
    "text": "right was called resting resulting to a use of the free condition",
    "start": "1010399",
    "end": "1016560"
  },
  {
    "text": "using the diffing method I described in the overview part of this presentation 18 new D object types were",
    "start": "1019560",
    "end": "1026000"
  },
  {
    "text": "found this new object this new Dom object types represent new code or code",
    "start": "1026000",
    "end": "1031160"
  },
  {
    "text": "code passs that are reachable to to an attacker via the Dom API the complete the complete list can",
    "start": "1031160",
    "end": "1037959"
  },
  {
    "text": "be found in the white paper and as an example this listing shows the new Dom object types to support the new the new",
    "start": "1037959",
    "end": "1044640"
  },
  {
    "text": "xat API and the new xslt API in hht of [Music]",
    "start": "1044640",
    "end": "1052319"
  },
  {
    "text": "Dome next the properties and methods of Dome object types can be enumerated using JavaScript JavaScript for in",
    "start": "1052400",
    "end": "1059240"
  },
  {
    "text": "statement and another way to enumerate properties and methods is via quering idas names",
    "start": "1059240",
    "end": "1066440"
  },
  {
    "text": "window once you have the list of properties and methods you can also diff them to identify changes in already",
    "start": "1070000",
    "end": "1076159"
  },
  {
    "text": "existing do D object types in the example Dom document evaluate is a new",
    "start": "1076159",
    "end": "1081760"
  },
  {
    "text": "method that is used for evaluating expat",
    "start": "1081760",
    "end": "1085960"
  },
  {
    "text": "Expressions finally though technically not part of the rendering engine and aree and are performing another set of",
    "start": "1087600",
    "end": "1094000"
  },
  {
    "text": "complex parsing and rendering themselves the builing PDF render and windows and the pre-installed Adobe Flash Player can",
    "start": "1094000",
    "end": "1101120"
  },
  {
    "text": "be considered as just one of the many dependencies that H that edge HTML uses to render their respective formats",
    "start": "1101120",
    "end": "1108320"
  },
  {
    "text": "because they pre-installed and then and they can be instantiated by default from an attacker standpoint",
    "start": "1108320",
    "end": "1115520"
  },
  {
    "text": "being able to instantiate additional complex renderers have certain advantages such as one these complex",
    "start": "1115520",
    "end": "1121400"
  },
  {
    "text": "renderers have another set of attack surface and vulnerabilities that attackers can leverage and two their",
    "start": "1121400",
    "end": "1127600"
  },
  {
    "text": "functionalities can be repurposed to bypass exploit mitigation an example is",
    "start": "1127600",
    "end": "1132840"
  },
  {
    "text": "when flash jit generated code was leveraged to bypass control flow guard and another example is and exploit used",
    "start": "1132840",
    "end": "1139480"
  },
  {
    "text": "the well-known flash Vector object corruption technique to bypass aslr though this had been mitigated they show",
    "start": "1139480",
    "end": "1146159"
  },
  {
    "text": "they showed us how software functionalities can be leveraged for exploitation The Flash Vector mitigation",
    "start": "1146159",
    "end": "1152720"
  },
  {
    "text": "was described in Google's Project zero Blog The Flash jit CFG bypass mitigation will be described in a later",
    "start": "1152720",
    "end": "1160559"
  },
  {
    "text": "slide to summarize in the area of image and font rendering HED HTML attack",
    "start": "1161840",
    "end": "1167320"
  },
  {
    "text": "surface had been reduced because of the removal of support for EMF images WF",
    "start": "1167320",
    "end": "1172760"
  },
  {
    "text": "images and eot fonts the code in the librar that process this file formats and the history of remotely exploitable",
    "start": "1172760",
    "end": "1180400"
  },
  {
    "text": "vulnerabilities removal of support for BML also further contributes to the attx surface reduction in",
    "start": "1180400",
    "end": "1187280"
  },
  {
    "text": "HTML however as with many other modern browser new features are added and this",
    "start": "1187280",
    "end": "1192679"
  },
  {
    "text": "new features are exposed by new Dom object types properties methods and updated Mark of styles mark up and St",
    "start": "1192679",
    "end": "1199720"
  },
  {
    "text": "specifications in the case of H htmls new attack vectors were found in the Dom API in the form of new Dom object types",
    "start": "1199720",
    "end": "1207039"
  },
  {
    "text": "and the addition of new properties and methods in already existing Dom object",
    "start": "1207039",
    "end": "1212720"
  },
  {
    "text": "types also the following libraries are identified as being used by H HTML",
    "start": "1212720",
    "end": "1219159"
  },
  {
    "text": "xmlite for XML parsing msxml for XML transformation Windows Imaging component",
    "start": "1219159",
    "end": "1225400"
  },
  {
    "text": "for IM for image decoding media foundation for audio video decoding direct right for font rendering and the",
    "start": "1225400",
    "end": "1232200"
  },
  {
    "text": "built and the built-in wi RT PDF renderer for PDF rendering and of course the pre-installed Adobe Flash Player for",
    "start": "1232200",
    "end": "1239120"
  },
  {
    "text": "Flash rendering by identifying how these libraries are being used by HTML we can",
    "start": "1239120",
    "end": "1245799"
  },
  {
    "text": "further recognize their their importance since now we have an additional understanding on how they are being used",
    "start": "1245799",
    "end": "1251880"
  },
  {
    "text": "by Ed HTML and how attackers might be able to reach code in these libraries via malicious input",
    "start": "1251880",
    "end": "1260600"
  },
  {
    "text": "now that we have an understanding of H html's attack surface let's now take a look at the exploit",
    "start": "1263960",
    "end": "1269960"
  },
  {
    "text": "mitigations that an attacker will need to bypass in order to successfully exploit a vulnerability in HML or any of",
    "start": "1269960",
    "end": "1277720"
  },
  {
    "text": "its dependencies in this in this in this",
    "start": "1277720",
    "end": "1284360"
  },
  {
    "text": "part I'll first discuss the exploit mitigations applied to the content process where H HTML is hosted because",
    "start": "1284360",
    "end": "1290720"
  },
  {
    "text": "that would affect how H HTML vulnerabilities are exploited next I'll discuss the mitigations applied to HTML",
    "start": "1290720",
    "end": "1297880"
  },
  {
    "text": "and the H HTML dependencies I previously discussed in the Pres presentation and finally I discuss the",
    "start": "1297880",
    "end": "1304559"
  },
  {
    "text": "mitigations applied specifically to HTML with each and with each mitigation",
    "start": "1304559",
    "end": "1310159"
  },
  {
    "text": "I'll also discuss non publish Bypass or witness that were discovered or researched by V various security",
    "start": "1310159",
    "end": "1316120"
  },
  {
    "text": "researchers so let's",
    "start": "1316120",
    "end": "1321120"
  },
  {
    "text": "begin in 6 superbit Windows 10 The Edge content process that holds H the H htmo",
    "start": "1321919",
    "end": "1327919"
  },
  {
    "text": "rendering engine is by default running 64bit 64bits tradition 64bits mitigates",
    "start": "1327919",
    "end": "1335559"
  },
  {
    "text": "traditional hip spraying which involve which involves blind spraying the hip with attacker control values and the",
    "start": "1335559",
    "end": "1342039"
  },
  {
    "text": "attacker will be fairly successful in landing in landing the controll data at a particular address the content process",
    "start": "1342039",
    "end": "1348880"
  },
  {
    "text": "also has depth and aslr operating with high entropy and force aslr",
    "start": "1348880",
    "end": "1354200"
  },
  {
    "text": "enabled High entropy gives additional High entropy aslr gives additional entropy to where memory regions can be",
    "start": "1354200",
    "end": "1361360"
  },
  {
    "text": "relocated while while Force aslr prevents loading of DLS that do not support aslr from being loaded at a",
    "start": "1361360",
    "end": "1368600"
  },
  {
    "text": "static address previously attackers had found different different ways to load non ASL",
    "start": "1368600",
    "end": "1374480"
  },
  {
    "text": "dlss in browsers and use them to bypass aslr and DEP with Force aslr those",
    "start": "1374480",
    "end": "1380240"
  },
  {
    "text": "techniques are mitigated app container on the other hand is a process isolation mechanism first introduced in Windows 8",
    "start": "1380240",
    "end": "1387520"
  },
  {
    "text": "and was used in I enhanced protected mode sandbox in addition to limiting read",
    "start": "1387520",
    "end": "1392799"
  },
  {
    "text": "read and right access app container also limits the process capabilities such as Network",
    "start": "1392799",
    "end": "1398520"
  },
  {
    "text": "capabilities it is a much better Sun sandboxing mechanism compared to low Integrity which only limits the process",
    "start": "1398520",
    "end": "1404880"
  },
  {
    "text": "right access this is the this table is this table is",
    "start": "1404880",
    "end": "1411320"
  },
  {
    "text": "the comparison of the M mitigation applied to to the content process of H",
    "start": "1411320",
    "end": "1416480"
  },
  {
    "text": "Edge and iie on different Windows version you'll notice that the mitigations apply to the edge content",
    "start": "1416480",
    "end": "1422440"
  },
  {
    "text": "process is similar to that of immersive I and Windows 8 where they are both running 64bit and sandbox by up by up",
    "start": "1422440",
    "end": "1430320"
  },
  {
    "text": "container in contrast desktop IE on Windows 10 windowss 8 and Windows 7 all",
    "start": "1430320",
    "end": "1435960"
  },
  {
    "text": "runs 32bit and only sandbox using low by [Music]",
    "start": "1435960",
    "end": "1442880"
  },
  {
    "text": "default not that we know that that comprehensive exploit mitigations are applied to the content process the next",
    "start": "1445520",
    "end": "1452039"
  },
  {
    "text": "question is that are there any published or by published bypass against those",
    "start": "1452039",
    "end": "1457840"
  },
  {
    "text": "mitigations for 64bit depending on the vulnerability a relative hip hip spray",
    "start": "1457840",
    "end": "1463840"
  },
  {
    "text": "may be possible in Cas in cases where the vulnerability involves a valid hit pointer being added an attacker",
    "start": "1463840",
    "end": "1470720"
  },
  {
    "text": "controlled or erroneous value in a pointer computation since the bug already involves a valid hit pointer the",
    "start": "1470720",
    "end": "1477080"
  },
  {
    "text": "attacker would just need to groom the Heap so that the attack and Control Data will be relative to the Heap pointer for",
    "start": "1477080",
    "end": "1483440"
  },
  {
    "text": "aslr and consequently dep since fource as aslr is enabled which means loading",
    "start": "1483440",
    "end": "1488960"
  },
  {
    "text": "of non aslr DLR is not possible in Edge that mean that leaves an attacker with",
    "start": "1488960",
    "end": "1494000"
  },
  {
    "text": "two options to bypass depth and aslr in Edge the first one is to take a advantage of pointers in predictable",
    "start": "1494000",
    "end": "1500039"
  },
  {
    "text": "memory regions such as shared user data and the second one is to use a vulnerability to disclose memory",
    "start": "1500039",
    "end": "1506520"
  },
  {
    "text": "contents because Microsoft is actively removing pointers in shared user data attackers are now mostly left in using a",
    "start": "1506520",
    "end": "1513399"
  },
  {
    "text": "vulnerability to disclose memory contents a common technique is to use a vulnerability to modify the length of an",
    "start": "1513399",
    "end": "1520399"
  },
  {
    "text": "array in order to have a red anywhere primitive finally for up container there",
    "start": "1520399",
    "end": "1527480"
  },
  {
    "text": "are several ways to escape the up container sandbox and other sandboxes for that matter this includes exploiting kernal",
    "start": "1527480",
    "end": "1535039"
  },
  {
    "text": "vulnerabilities since code can since code can can still interact with the Kel in multiple different ways even with it",
    "start": "1535039",
    "end": "1542000"
  },
  {
    "text": "even when it is sandbox and the Kel and Kel mode vulnerabilities allow elevation to to a very high privilege level we can",
    "start": "1542000",
    "end": "1549880"
  },
  {
    "text": "expect the that a large sh of sandbox Escape will be via Cal mod vulnerabilities another option is",
    "start": "1549880",
    "end": "1556760"
  },
  {
    "text": "exploiting broker processes sandbox sandboxing Technologies uses a broker process in order to perform privileged",
    "start": "1556760",
    "end": "1563360"
  },
  {
    "text": "actions on behalf of the sandbox process these Brokers May in turn have vulnerabilities that an attacker can",
    "start": "1563360",
    "end": "1570000"
  },
  {
    "text": "leverage to escape the sandbox finally there are some resources",
    "start": "1570000",
    "end": "1576640"
  },
  {
    "text": "that sandbox process still has right access to if these rable resources are trusted and used by a higher privilege",
    "start": "1576640",
    "end": "1583960"
  },
  {
    "text": "privilege process you may be able to control the behavior of the higher privilege process and eventually use",
    "start": "1583960",
    "end": "1589559"
  },
  {
    "text": "that to use that control to escape the sandbox so that's it for the content",
    "start": "1589559",
    "end": "1595559"
  },
  {
    "text": "process mitigations I'll now discuss the additional exploit mitigations applied to HTML and its",
    "start": "1595559",
    "end": "1603440"
  },
  {
    "text": "dependencies most of you know most you most of you already know GS and and this",
    "start": "1604320",
    "end": "1609399"
  },
  {
    "text": "mitigation is Thoroughly discussed in various papers but since this is an applied mitigation it is included here",
    "start": "1609399",
    "end": "1615679"
  },
  {
    "text": "GS is applied to H HTML and it dependencies this mitigation involves storing a security cookie in the stack",
    "start": "1615679",
    "end": "1621960"
  },
  {
    "text": "just after the local buffers and then checking the security cookie before the function returns to make sure that the",
    "start": "1621960",
    "end": "1628039"
  },
  {
    "text": "that the return address and for 64-bit compile code the save X x64 registers",
    "start": "1628039",
    "end": "1634200"
  },
  {
    "text": "were not overwritten via Vaper overflow for the weakness as you may have guessed by from looking at the",
    "start": "1634200",
    "end": "1640679"
  },
  {
    "text": "diagram it will only detect a linear overflow but if an attacker but if an",
    "start": "1640679",
    "end": "1647919"
  },
  {
    "text": "attack has the ability to specifically control where to write data",
    "start": "1647919",
    "end": "1653080"
  },
  {
    "text": "to such as a controllable stock buffer index or pointer the attacker can write",
    "start": "1653080",
    "end": "1658240"
  },
  {
    "text": "anywhere beyond the stock cookie and therefore will not be detected by the chck so this mitigation is effective",
    "start": "1658240",
    "end": "1664799"
  },
  {
    "text": "against linear overflow but not if an attacker control the stock buffer poter or",
    "start": "1664799",
    "end": "1671240"
  },
  {
    "text": "index next recently introduce exploit mitigation applied to H HTML and its",
    "start": "1676200",
    "end": "1681320"
  },
  {
    "text": "dependencies is control flow guard when CFG is enabled the compiler",
    "start": "1681320",
    "end": "1686480"
  },
  {
    "text": "we will add checks to ensure that the the destination of indirect costs is",
    "start": "1686480",
    "end": "1691960"
  },
  {
    "text": "valid this exploit mitigation attempts to detect and prevent abnormal control flow abnormal control flow which can",
    "start": "1691960",
    "end": "1699039"
  },
  {
    "text": "occur if an exploit is trying to redirect execution to rope guides in select in select executable called",
    "start": "1699039",
    "end": "1705640"
  },
  {
    "text": "addresses in order to bypass dep internals of this exper mitigations are",
    "start": "1705640",
    "end": "1710919"
  },
  {
    "text": "well researched and published in various papers and and presentations one by one published",
    "start": "1710919",
    "end": "1717360"
  },
  {
    "text": "bypass technique is by taking advantage of the of flash jit generated code which due to its Dynamic nature any indirect",
    "start": "1717360",
    "end": "1724399"
  },
  {
    "text": "calls made inside it will not be covered by CFG this bypass technique however is now",
    "start": "1724399",
    "end": "1730080"
  },
  {
    "text": "mitigated in flesh the mitigation involves additionally legit generating",
    "start": "1730080",
    "end": "1735200"
  },
  {
    "text": "code that performs a cfd check which is basically generating a call to this",
    "start": "1735200",
    "end": "1742240"
  },
  {
    "text": "function whenever a call instruction is",
    "start": "1742240",
    "end": "1746840"
  },
  {
    "text": "generated other publish ideas to bypass CFG includes jumping to valid API address such as low low library with a",
    "start": "1747519",
    "end": "1755120"
  },
  {
    "text": "dll and a UNC path a requirement of course is that you will need to control the API call parameter another is",
    "start": "1755120",
    "end": "1762720"
  },
  {
    "text": "operating stock data such as return address such as return address on the stack Direct requirement of course is",
    "start": "1762720",
    "end": "1769159"
  },
  {
    "text": "that you will need to find a way to disclose the stack [Music]",
    "start": "1769159",
    "end": "1775140"
  },
  {
    "text": "address we now go to the exploit mitigations specifically applied to HTML an exper mitigations applied to H",
    "start": "1778720",
    "end": "1786519"
  },
  {
    "text": "HTML but not in its dependencies is virtual table guard or VT guard VT guard was first introduced in",
    "start": "1786519",
    "end": "1793840"
  },
  {
    "text": "IE10 and its purpose is to detect an invalid versal function table which can occur if an exploit had corrupted a C++",
    "start": "1793840",
    "end": "1801640"
  },
  {
    "text": "object in memory this mitigation works by adding an aslr randomized value VT guard in the",
    "start": "1801640",
    "end": "1808600"
  },
  {
    "text": "virtual function table of covered classes which is then checked before performing a virtual function call so if",
    "start": "1808600",
    "end": "1815120"
  },
  {
    "text": "in this case object o is modified its virtual its virtual",
    "start": "1815120",
    "end": "1820600"
  },
  {
    "text": "function table pointer will point to an attacker controlled data if the attacker",
    "start": "1820600",
    "end": "1825799"
  },
  {
    "text": "don't have the value of VT guard theck detects the anomaly and will prevent further execution of the code a",
    "start": "1825799",
    "end": "1832120"
  },
  {
    "text": "shortcoming of this mitigation is that it is only applied to select H HTML classes and it can be bypassed if the",
    "start": "1832120",
    "end": "1839240"
  },
  {
    "text": "address of VT guard is leaked via memory memory content",
    "start": "1839240",
    "end": "1844799"
  },
  {
    "text": "disclosure finally another mitigation applied to H HTML and it dependencies is",
    "start": "1849240",
    "end": "1856559"
  },
  {
    "text": "mgc in addition to HTML the Trident rendering engine in IE on Windows 10",
    "start": "1856600",
    "end": "1862639"
  },
  {
    "text": "also have this mitigation in place similar to memory protector which was introduced last year this mitigates use",
    "start": "1862639",
    "end": "1869519"
  },
  {
    "text": "after freeze by preventing by preventing the freeing of a St reference for of",
    "start": "1869519",
    "end": "1874799"
  },
  {
    "text": "still reference memory chunks however unlike memory protector which only checks the registers in the stack for",
    "start": "1874799",
    "end": "1881200"
  },
  {
    "text": "references mgc additionally scans the content of mgc chunks to pointer to",
    "start": "1881200",
    "end": "1886360"
  },
  {
    "text": "other mg chunks this means that this mitigation covers covers more U uif",
    "start": "1886360",
    "end": "1892200"
  },
  {
    "text": "cases compared to memory protector the implementation of mgc is",
    "start": "1892200",
    "end": "1897880"
  },
  {
    "text": "also much more sophisticated and in turn much more complex compared to memory protector this is because it uses a",
    "start": "1897880",
    "end": "1905039"
  },
  {
    "text": "separate manage ship called the mgc Hep and the and for the allocation and then",
    "start": "1905039",
    "end": "1910519"
  },
  {
    "text": "it uses a concurrent Mark and Swift garbage collector to reclaim un reference mgc",
    "start": "1910519",
    "end": "1915960"
  },
  {
    "text": "chunks for most of it functionality it relies on the chakra JavaScript engine memory management",
    "start": "1915960",
    "end": "1923679"
  },
  {
    "text": "routines the M GC Heap and the garbage and the garbage collector and the garbage collector can be visualized as",
    "start": "1928399",
    "end": "1935799"
  },
  {
    "text": "follows Chung of memory called segments are allocated using virtual aloc then",
    "start": "1935799",
    "end": "1941559"
  },
  {
    "text": "this segments are divided into 4096 byte Pages a continuous group of these pages",
    "start": "1941559",
    "end": "1948000"
  },
  {
    "text": "than treated as a block which is which is in turn used in the allocation of similar similarly sized objects via a",
    "start": "1948000",
    "end": "1954639"
  },
  {
    "text": "bucketing scheme when an object needs to be allocated mgc will allocate a chunk From",
    "start": "1954639",
    "end": "1961080"
  },
  {
    "text": "the Block in the appropriate bucket and then flug the chunk as root root means",
    "start": "1961080",
    "end": "1966880"
  },
  {
    "text": "root means that the object or chunk is directly referenced by the program and therefore should not be garbage",
    "start": "1966880",
    "end": "1973240"
  },
  {
    "text": "collected so let's assume that that the last allocation was in this chunk",
    "start": "1973240",
    "end": "1979840"
  },
  {
    "text": "here so we have here four root Chun in this block so 1 2 3",
    "start": "1980120",
    "end": "1985919"
  },
  {
    "text": "4 then when an object is to be freed mgc will attempt to locate the block where",
    "start": "1985919",
    "end": "1991360"
  },
  {
    "text": "the object chunk is located let's again let's again use this last chunk here as an",
    "start": "1991360",
    "end": "1998960"
  },
  {
    "text": "example mgc will Zero out the chunk so it will sear this out and then",
    "start": "1998960",
    "end": "2005159"
  },
  {
    "text": "clear the root flag of the chunk by being unrooted the chunk will be candidate for garbage collection if",
    "start": "2005159",
    "end": "2012200"
  },
  {
    "text": "reference to it are not found so in this case we now have three root chunks 1 2 3 and then one unrooted",
    "start": "2012200",
    "end": "2021080"
  },
  {
    "text": "chunk the last one garbage collection on the other hand",
    "start": "2021080",
    "end": "2026279"
  },
  {
    "text": "is triggered when the total size of unrooted chunks reaches a dynamically computed threshold",
    "start": "2026279",
    "end": "2032840"
  },
  {
    "text": "value once the threshold is reach the garbage collection will be triggered",
    "start": "2032840",
    "end": "2039679"
  },
  {
    "text": "the garbage the garbage collector is a mark and sweep uses a mark and sweep algorithm chunks that are not that are",
    "start": "2040279",
    "end": "2047080"
  },
  {
    "text": "not marked after the marking operation will be made available for reallocation so the first thing the",
    "start": "2047080",
    "end": "2053878"
  },
  {
    "text": "garbage collector will do is first re reset the GC Mark for all for all the",
    "start": "2053879",
    "end": "2059638"
  },
  {
    "text": "chunks so the so the GC marks for all these chunks be will be",
    "start": "2059639",
    "end": "2065240"
  },
  {
    "text": "cleared next the the garbage collector will Mark all root chunks so if we",
    "start": "2065240",
    "end": "2071079"
  },
  {
    "text": "follow our example these three root chunks here will be",
    "start": "2071079",
    "end": "2077919"
  },
  {
    "text": "marked and the last one will remain unmarked because it is unrooted next the garbage collector",
    "start": "2078000",
    "end": "2085520"
  },
  {
    "text": "start scanning starts scanning the contents of fruit chunks for references to other",
    "start": "2085520",
    "end": "2091320"
  },
  {
    "text": "chunks if a reference is found the chunk is Mark so for example the first chunk",
    "start": "2091320",
    "end": "2097280"
  },
  {
    "text": "here has a pointer to this last chunk this last chunk will be marked and",
    "start": "2097280",
    "end": "2104240"
  },
  {
    "text": "there and thereby preventing it from being reclaimed by the garbage collector similarly the garbage",
    "start": "2104240",
    "end": "2110520"
  },
  {
    "text": "collector also scans the contents of the stack and the registers for references to MC chunks",
    "start": "2110520",
    "end": "2118640"
  },
  {
    "text": "and then Mark them if references are [Music] found so as a summary if a pointer to an",
    "start": "2118640",
    "end": "2125079"
  },
  {
    "text": "unrooted chunk is found in the in the BGC chunks or in the stack or in the reg",
    "start": "2125079",
    "end": "2131320"
  },
  {
    "text": "or in the registers the unrooted the unrooted chunk will not be reclaimed by the garbage collector therefore",
    "start": "2131320",
    "end": "2137320"
  },
  {
    "text": "mitigating a use of the free",
    "start": "2137320",
    "end": "2141040"
  },
  {
    "text": "condition mgc is enabled by default one way to configure it in both IH and ie is",
    "start": "2145320",
    "end": "2151800"
  },
  {
    "text": "via VIA the override memory protection setting configuration which can be set by the",
    "start": "2151800",
    "end": "2157640"
  },
  {
    "text": "following register entry if you are root causing a rendering engine bug it would be it",
    "start": "2157640",
    "end": "2164079"
  },
  {
    "text": "would be best to temporarily set this to zero and then enable page",
    "start": "2164079",
    "end": "2169838"
  },
  {
    "text": "ship as of this writing mgc and memory protector still have no known bypass for",
    "start": "2172040",
    "end": "2177440"
  },
  {
    "text": "covered cases but as with other exploit mitigations new bypass techniques may be developed in the future however note",
    "start": "2177440",
    "end": "2185000"
  },
  {
    "text": "that that exploit exploits were demonst ated for UF cases not covered by memory",
    "start": "2185000",
    "end": "2190480"
  },
  {
    "text": "protector also there are published resarch to to using memory protector to bypass aslr on 32bit IE and",
    "start": "2190480",
    "end": "2198160"
  },
  {
    "text": "approximating bottom M allocation address range in 64bit",
    "start": "2198160",
    "end": "2203400"
  },
  {
    "text": "IE so to summarize comprehensive comprehensive mitigations applied to the",
    "start": "2208480",
    "end": "2213839"
  },
  {
    "text": "edge content process Edge HTML and its dependencies with all these exploit mitigations in",
    "start": "2213839",
    "end": "2220040"
  },
  {
    "text": "place an attacker would need to invest more in finding exploitable vulnerabilities in HTML and another set",
    "start": "2220040",
    "end": "2226839"
  },
  {
    "text": "of investment in developing reliable exploit for them nonetheless motivated attackers",
    "start": "2226839",
    "end": "2232560"
  },
  {
    "text": "will continue will continually find noal ways to bypass these mitigations and we",
    "start": "2232560",
    "end": "2237680"
  },
  {
    "text": "could expect that this exploit mitigations will continue to evolve over time",
    "start": "2237680",
    "end": "2244560"
  },
  {
    "text": "to [Music]",
    "start": "2248240",
    "end": "2252169"
  },
  {
    "text": "conclude so it is inevitable that the attack surface of H HTML and other",
    "start": "2253520",
    "end": "2258680"
  },
  {
    "text": "browser rendering engines will continue to expand as new as new web standards are implemented most of the increase in",
    "start": "2258680",
    "end": "2265839"
  },
  {
    "text": "the attack surface will continue will come from the parsing and translat of new markup and sty specifications and",
    "start": "2265839",
    "end": "2272839"
  },
  {
    "text": "most and most notably in the new functionalities that will be exposed to the developer and attackers alike via",
    "start": "2272839",
    "end": "2279000"
  },
  {
    "text": "the Dom API however this the increase in attack surface in h h HTML is balanced by the",
    "start": "2279000",
    "end": "2285800"
  },
  {
    "text": "comprehensive exploit mitigations in place also new or additional research in",
    "start": "2285800",
    "end": "2291160"
  },
  {
    "text": "the following areas related to H HTML will be both important and interesting",
    "start": "2291160",
    "end": "2297000"
  },
  {
    "text": "as they are libraries and feat or features that are remotely reachable and are and are widely",
    "start": "2297000",
    "end": "2303000"
  },
  {
    "text": "used this includes this includes inter internal research called audit and fing",
    "start": "2303000",
    "end": "2308680"
  },
  {
    "text": "of the following Windows component which are used by by Ed htmls XML light msxml",
    "start": "2308680",
    "end": "2314680"
  },
  {
    "text": "6 Windows Imaging component media Foundation direct write and the winrt",
    "start": "2314680",
    "end": "2319839"
  },
  {
    "text": "PDF renderer some of them may already have public research such such direct right",
    "start": "2319839",
    "end": "2325640"
  },
  {
    "text": "and we did more of them so we have an understanding of the security posture of this security critical and remotely",
    "start": "2325640",
    "end": "2332280"
  },
  {
    "text": "reachable components also mgc is a new mitigation",
    "start": "2332280",
    "end": "2337599"
  },
  {
    "text": "and I and I only scratched a surface in terms of its internals further research of its internals including the",
    "start": "2337599",
    "end": "2344359"
  },
  {
    "text": "allocation and Reclamation algorithms how mgc Heap can be can be groomed and",
    "start": "2344359",
    "end": "2350560"
  },
  {
    "text": "also checking if Heap metadata attacks are possible and of course researching how mgc can be bypassed these types of",
    "start": "2350560",
    "end": "2358119"
  },
  {
    "text": "research will be beneficial to the understanding of of its weaknesses and eventually improvements to mgc",
    "start": "2358119",
    "end": "2366720"
  },
  {
    "text": "here are the reference for the bypass techniques discussed in this presentation a more complete list of",
    "start": "2369680",
    "end": "2375359"
  },
  {
    "text": "references are available in the white",
    "start": "2375359",
    "end": "2379119"
  },
  {
    "text": "paper and thanks for listening and and if you have any questions let me know",
    "start": "2386160",
    "end": "2392800"
  },
  {
    "text": "h",
    "start": "2397440",
    "end": "2400000"
  }
]