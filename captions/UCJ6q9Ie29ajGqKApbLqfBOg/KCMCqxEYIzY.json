[
  {
    "start": "0",
    "end": "102000"
  },
  {
    "text": "okay so let's get started I'll take you thank you all for being here I'm going",
    "start": "0",
    "end": "5730"
  },
  {
    "text": "to talk today about code obfuscation and the training of dynamic static and",
    "start": "5730",
    "end": "11940"
  },
  {
    "text": "symbolic approaches for Delta squishy okay so am i I'm Robyn Davis and Stella",
    "start": "11940",
    "end": "18330"
  },
  {
    "text": "PC students at the Atomic Energy Commission in France I'm working with the bottom bar down which is a full-time",
    "start": "18330",
    "end": "24090"
  },
  {
    "text": "researcher we basically working in the software safety safety and security lab",
    "start": "24090",
    "end": "31980"
  },
  {
    "text": "which is primarily doing a safety for critical embedded systems are known for",
    "start": "31980",
    "end": "38579"
  },
  {
    "text": "it's a platform for analyzing C code but I'm part of the small team that is",
    "start": "38579",
    "end": "44910"
  },
  {
    "text": "working on binary for security okay so what's the context what to go so the",
    "start": "44910",
    "end": "52500"
  },
  {
    "text": "part is there is a lot of malware in the wild some of the some of them are up to",
    "start": "52500",
    "end": "57690"
  },
  {
    "text": "speed so we'd like to address them and to get rid of sophistication in order to",
    "start": "57690",
    "end": "63359"
  },
  {
    "text": "perform some more in-depth analysis so the first thing is trying to locate",
    "start": "63359",
    "end": "68490"
  },
  {
    "text": "obfuscation if there is any and in second step trying to remove it possible and all that the goal is to recover some",
    "start": "68490",
    "end": "77159"
  },
  {
    "text": "kind of eye level view of the program which is usually the control flow graphs the challenges static dynamic and",
    "start": "77159",
    "end": "85619"
  },
  {
    "text": "symbolic approaches used alone are sometimes are not enough for addressing",
    "start": "85619",
    "end": "91189"
  },
  {
    "text": "binaries that are fitted with different sophistications and obviously we have some scalability",
    "start": "91189",
    "end": "98490"
  },
  {
    "text": "and robustness issues when dealing with instruct code our proposal is first a",
    "start": "98490",
    "end": "106140"
  },
  {
    "text": "new symbolic method for addressing infeasibility based problems I'm going",
    "start": "106140",
    "end": "111720"
  },
  {
    "text": "to talk about it after that and we propose the combinations are handling",
    "start": "111720",
    "end": "117240"
  },
  {
    "text": "multiple kinds of applications on by mixing different approaches what web",
    "start": "117240",
    "end": "122430"
  },
  {
    "text": "achieved so far is a set of tools for analyzing buyer needs some detection",
    "start": "122430",
    "end": "129300"
  },
  {
    "text": "algorithms for several obfuscation and I will show great example on external",
    "start": "129300",
    "end": "136710"
  },
  {
    "text": "malware okay so the long term objectives is to use a dynamic disassembly which is",
    "start": "136710",
    "end": "146670"
  },
  {
    "start": "138000",
    "end": "177000"
  },
  {
    "text": "meant to be safe because our instruction decode it are being executed",
    "start": "146670",
    "end": "152610"
  },
  {
    "text": "so we have the subset of the program that were sure to be executive all and we'd like to improve it",
    "start": "152610",
    "end": "160350"
  },
  {
    "text": "we've static disassembly but making the static design be more smart if we can",
    "start": "160350",
    "end": "166440"
  },
  {
    "text": "say by guiding it with symbolic execution and obfuscation related",
    "start": "166440",
    "end": "172590"
  },
  {
    "text": "information so what's the agenda today",
    "start": "172590",
    "end": "178620"
  },
  {
    "start": "177000",
    "end": "208000"
  },
  {
    "text": "I'm going to do some quick recall but disassembling and dynamic symbolic",
    "start": "178620",
    "end": "183930"
  },
  {
    "text": "executions then I will present our two proposals then I will just talk rapidly",
    "start": "183930",
    "end": "191910"
  },
  {
    "text": "up the the binstock platform that have been working on for the past few years and then I will move on to the the for",
    "start": "191910",
    "end": "199110"
  },
  {
    "text": "the two case studies the first is on several Packers and the last is is on",
    "start": "199110",
    "end": "205739"
  },
  {
    "text": "external ok so what's like to disassemble of the scaly code the ID is",
    "start": "205739",
    "end": "214650"
  },
  {
    "start": "208000",
    "end": "353000"
  },
  {
    "text": "to are recover some usable representation of the program getting",
    "start": "214650",
    "end": "220290"
  },
  {
    "text": "rid of what everything that is yields listen to the program ok so yeah and so",
    "start": "220290",
    "end": "228959"
  },
  {
    "text": "and this is an assertion essential tasks to perform before any in-depth analysis",
    "start": "228959",
    "end": "234330"
  },
  {
    "text": "to understand what the program is really doing ok so the desire somebody",
    "start": "234330",
    "end": "242100"
  },
  {
    "text": "processes as a critical it can be divided into three steps the first step",
    "start": "242100",
    "end": "247350"
  },
  {
    "text": "is the cut discovery on so finding into the big block of bytes",
    "start": "247350",
    "end": "252870"
  },
  {
    "text": "what's code what data into the program into the section it implies to deal with",
    "start": "252870",
    "end": "258530"
  },
  {
    "text": "instructions of your lapping for instance on x86 the same bytes can be",
    "start": "258530",
    "end": "264060"
  },
  {
    "text": "shared between two different instructions on the we're where your start decoding so",
    "start": "264060",
    "end": "270870"
  },
  {
    "text": "that's the first challenge while disassembling the second step is the control flow graph reconstructions so",
    "start": "270870",
    "end": "277800"
  },
  {
    "text": "basically creating the nodes and hedges to encode the flow of the program so it",
    "start": "277800",
    "end": "284699"
  },
  {
    "text": "implies to deal with indirect control flow like jump a dynamic jump and sit",
    "start": "284699",
    "end": "290009"
  },
  {
    "text": "like this functions that are never returning and yeah and a lot that is the",
    "start": "290009",
    "end": "297720"
  },
  {
    "text": "partitioning namely trying to create some segmentation into the control flow",
    "start": "297720",
    "end": "303419"
  },
  {
    "text": "graph to create some different functions in order to make it more of visible",
    "start": "303419",
    "end": "310169"
  },
  {
    "text": "unusable for a user program view so trying to recovering the functions it's",
    "start": "310169",
    "end": "317490"
  },
  {
    "text": "kind of difficult because functions can share some parts of their code that they",
    "start": "317490",
    "end": "322889"
  },
  {
    "text": "might not be contiguous into the binary and it also implies to deal with tail",
    "start": "322889",
    "end": "328530"
  },
  {
    "text": "calls it's when you call a function by making a single jump okay obfuscation",
    "start": "328530",
    "end": "337830"
  },
  {
    "text": "the broad definition of it is any me that aims at slowing down the disease's",
    "start": "337830",
    "end": "344550"
  },
  {
    "text": "only and the analysis process of a program either for human or automated",
    "start": "344550",
    "end": "350880"
  },
  {
    "text": "algorithm so there's plenty of application used so far and I'm not",
    "start": "350880",
    "end": "358979"
  },
  {
    "start": "353000",
    "end": "444000"
  },
  {
    "text": "going to talk about all of them but what you can identify into them is that there",
    "start": "358979",
    "end": "365400"
  },
  {
    "text": "is in the general sense to kind of add sophistication the the applications that",
    "start": "365400",
    "end": "371849"
  },
  {
    "text": "are more targeting the control of the program hiding on the edges in the graph",
    "start": "371849",
    "end": "377699"
  },
  {
    "text": "and the application that are targeting the data of the program like ciphering",
    "start": "377699",
    "end": "383310"
  },
  {
    "text": "string hiding the contents or hiding honey valuable assets into the program in",
    "start": "383310",
    "end": "389969"
  },
  {
    "text": "order to prevent some prevent signatures or things like this so we can there as a",
    "start": "389969",
    "end": "399180"
  },
  {
    "text": "control obfuscation there is you have the flattening jump encoding virtual machines and so on and what you",
    "start": "399180",
    "end": "407430"
  },
  {
    "text": "can see is that on this obfuscation also have an impact on the analysis that you",
    "start": "407430",
    "end": "413010"
  },
  {
    "text": "can perform on it as an example the last of discussion is the obfuscation using",
    "start": "413010",
    "end": "418740"
  },
  {
    "text": "using signal on exceptions and it is typically the kind of sophistication that we cannot handle in the static way",
    "start": "418740",
    "end": "425900"
  },
  {
    "text": "because we cannot know when an exception is going to be raised and things like this so the application have an impact",
    "start": "425900",
    "end": "434130"
  },
  {
    "text": "on the kind of analysis we can perform on it and I'm going to talk about two of",
    "start": "434130",
    "end": "439890"
  },
  {
    "text": "them today so that I will present some detection algorithm the first one is opak predicates on the",
    "start": "439890",
    "end": "448050"
  },
  {
    "start": "444000",
    "end": "522000"
  },
  {
    "text": "back predicate is typically a predicate that is always true or always false but this property is difficult to two",
    "start": "448050",
    "end": "455940"
  },
  {
    "text": "digits just by looking at the predicate you have an example on the right arm",
    "start": "455940",
    "end": "462410"
  },
  {
    "text": "here rigged regardless of the values that can be taken by X or Y on this",
    "start": "462410",
    "end": "470310"
  },
  {
    "text": "predicate would always be true so below you have the Assembly of this predicate",
    "start": "470310",
    "end": "477810"
  },
  {
    "text": "and you basically have one of the two branches that is dead so the question is",
    "start": "477810",
    "end": "483240"
  },
  {
    "text": "okay why why doing this the answer is that it can be tell us to grow",
    "start": "483240",
    "end": "490470"
  },
  {
    "text": "artificially the size of the code by hiding some dead code into death in the dead branches and by the way droning the",
    "start": "490470",
    "end": "498419"
  },
  {
    "text": "genuine cut into it so you can use whatever whatever is invariant into your",
    "start": "498419",
    "end": "504930"
  },
  {
    "text": "program to encode opaque predicates it can be Herod Matic like here it can be",
    "start": "504930",
    "end": "510120"
  },
  {
    "text": "some variant or on your data structure could be pointer aliasing concurrency in",
    "start": "510120",
    "end": "516510"
  },
  {
    "text": "things like this so we are going to to deal with that obfuscation today and the",
    "start": "516510",
    "end": "523260"
  },
  {
    "start": "522000",
    "end": "600000"
  },
  {
    "text": "second obfuscation is the course tag tempering the constant tempering is",
    "start": "523260",
    "end": "528300"
  },
  {
    "text": "basically the mean of violating the compilation scheme saying that",
    "start": "528300",
    "end": "534310"
  },
  {
    "text": "we are read instruction is always returning to the color and because a red",
    "start": "534310",
    "end": "541720"
  },
  {
    "text": "instruction is basically just a jump on the top value on the stack it depends at runtime what's on the",
    "start": "541720",
    "end": "548770"
  },
  {
    "text": "stack at this moment to know where you're going to jump and if you have an example on the right so this bit of code",
    "start": "548770",
    "end": "557200"
  },
  {
    "text": "is basically the call will push the address of the pop on the stack the top",
    "start": "557200",
    "end": "564040"
  },
  {
    "text": "will pop its own address it will then increment it in the head push it back",
    "start": "564040",
    "end": "569800"
  },
  {
    "text": "again on the stack and the return instruction is basically going to jump one byte further",
    "start": "569800",
    "end": "576930"
  },
  {
    "text": "after the RET instruction so that static disassembly would stop these are",
    "start": "576930",
    "end": "584050"
  },
  {
    "text": "something at the RET instruction not seeing like the pelo payload is really located after so that's the kind of",
    "start": "584050",
    "end": "592180"
  },
  {
    "text": "tricks that are kind of annoying when you want to disassemble obfuscated",
    "start": "592180",
    "end": "597279"
  },
  {
    "text": "program okay the obfuscation it's basically we would like it to be",
    "start": "597279",
    "end": "604540"
  },
  {
    "text": "the full reverting of the obfuscating transformations but sometimes I mean",
    "start": "604540",
    "end": "612520"
  },
  {
    "text": "often it's impossible to do the reverse operations because we are loading informations in the obfuscation path so",
    "start": "612520",
    "end": "620620"
  },
  {
    "text": "we consider the application the fact of simplifying the code is in order to",
    "start": "620620",
    "end": "625870"
  },
  {
    "text": "facilitate further analysis okay so a",
    "start": "625870",
    "end": "632170"
  },
  {
    "start": "630000",
    "end": "714000"
  },
  {
    "text": "quick recall that disassembly we consider correct a disassembly if it",
    "start": "632170",
    "end": "637810"
  },
  {
    "text": "only disassembled genuine executable instructions so that instructions not",
    "start": "637810",
    "end": "645190"
  },
  {
    "text": "which is assembled and we call a disassembly complete if managed to disassemble on the other although",
    "start": "645190",
    "end": "651430"
  },
  {
    "text": "instruction so what we basically have is with a static approach you are meant to",
    "start": "651430",
    "end": "657310"
  },
  {
    "text": "disassemble the whole program but you can be fooled into disassembling some",
    "start": "657310",
    "end": "662500"
  },
  {
    "text": "that data bytes or dead branches and you're basically",
    "start": "662500",
    "end": "668080"
  },
  {
    "text": "blocked by all the dynamic jump here with the jump EAX for instance so you",
    "start": "668080",
    "end": "674200"
  },
  {
    "text": "the Daniel is do scale but it's not promised too many application like self",
    "start": "674200",
    "end": "679390"
  },
  {
    "text": "modification and so on on the other hand dynamic disassembly will disassemble a",
    "start": "679390",
    "end": "687519"
  },
  {
    "text": "subset of the program but we are sure it to be executable and the main advantage",
    "start": "687519",
    "end": "695290"
  },
  {
    "text": "of dynamics that is dropped to a usually self modification and this kind of",
    "start": "695290",
    "end": "700600"
  },
  {
    "text": "obfuscation the shortcoming of this method is that it dependent on the input so that in",
    "start": "700600",
    "end": "708130"
  },
  {
    "text": "theory if you want to cover the whole program you have to provide all the possible inputs to your program and this",
    "start": "708130",
    "end": "715690"
  },
  {
    "start": "714000",
    "end": "802000"
  },
  {
    "text": "is where dynamic symbolic execution comes in which is also known as conchal",
    "start": "715690",
    "end": "721180"
  },
  {
    "text": "execution so symbolic execution is basically the mean of simulating the",
    "start": "721180",
    "end": "727600"
  },
  {
    "text": "program using symbolic values rather than constant values in order to obtain",
    "start": "727600",
    "end": "733750"
  },
  {
    "text": "some relationship on the path so as an example you have this small snippet of",
    "start": "733750",
    "end": "740950"
  },
  {
    "text": "code where there is two nested if I would like to know what are the conditions following to reach the print",
    "start": "740950",
    "end": "747250"
  },
  {
    "text": "instructions so in the middle you have basically the the graph of the functions",
    "start": "747250",
    "end": "752740"
  },
  {
    "text": "and in order to reach the print okay yes hey that should be less than ten and",
    "start": "752740",
    "end": "759520"
  },
  {
    "text": "it's also should be greater than B so that gives us some relationship on the",
    "start": "759520",
    "end": "765490"
  },
  {
    "text": "path and that leads to the given formula which is a less than ten and a greater",
    "start": "765490",
    "end": "772449"
  },
  {
    "text": "than B and a solution for that is a equal five and for instance be equal one",
    "start": "772449",
    "end": "778560"
  },
  {
    "text": "usually the last step are we hand it to like of the shelf SMT solver and going",
    "start": "778560",
    "end": "788649"
  },
  {
    "text": "dynamic so dynamic symbolic execution in the mean of working on the dynamic path",
    "start": "788649",
    "end": "794260"
  },
  {
    "text": "so the first task you don't choose it you just run your program and you obtain the path of execution and you render the",
    "start": "794260",
    "end": "800829"
  },
  {
    "text": "top of it so the question is for this question why why using a dynamic symbolic execution",
    "start": "800829",
    "end": "807630"
  },
  {
    "start": "802000",
    "end": "848000"
  },
  {
    "text": "and an answer for this question is first obfuscation usually alter the syntax of",
    "start": "807630",
    "end": "816970"
  },
  {
    "text": "the program breaking the nodes edges of the graph but you should keep the semantics of the program because you",
    "start": "816970",
    "end": "824170"
  },
  {
    "text": "want your program to still do what it's meant to do after application and by the way a DAC allows to find new paths like",
    "start": "824170",
    "end": "833020"
  },
  {
    "text": "in the previous example with a and B we would have the satisfying inputs for the",
    "start": "833020",
    "end": "839260"
  },
  {
    "text": "two parameters of the fictions to get into that path so that that's valuable",
    "start": "839260",
    "end": "845080"
  },
  {
    "text": "analysis in our case a more complicated example so let's consider that on we",
    "start": "845080",
    "end": "852460"
  },
  {
    "text": "have a switch with for K three cases the Assembly obtained and what we have",
    "start": "852460",
    "end": "859240"
  },
  {
    "text": "obtained with dynamic execution so we obtain a piece of the control flow graph",
    "start": "859240",
    "end": "865990"
  },
  {
    "text": "and if you have if we want for instance to reach the case C which is meant to be",
    "start": "865990",
    "end": "873610"
  },
  {
    "text": "two we get that path and we obtained the relationship on that path in order to to",
    "start": "873610",
    "end": "881020"
  },
  {
    "text": "take this path into the program so he tell us to generate inputs for tearing",
    "start": "881020",
    "end": "887140"
  },
  {
    "text": "path but as you can notice here we have missed one of the target of the jump eix",
    "start": "887140",
    "end": "895240"
  },
  {
    "text": "of the switch so we can basically ask okay what could be the values for EAX at that point of the program so that we can",
    "start": "895240",
    "end": "903820"
  },
  {
    "text": "maybe find new jump targets so it basically gives the given formula you",
    "start": "903820",
    "end": "911290"
  },
  {
    "text": "want EAX to be different from zero and two and the solution for that is one because we have missed one of the denote",
    "start": "911290",
    "end": "921510"
  },
  {
    "text": "so that's the main advantage of using dynamic symbolic connection in theory so",
    "start": "921510",
    "end": "929290"
  },
  {
    "text": "going dynamic AB the advantage of",
    "start": "929290",
    "end": "934360"
  },
  {
    "text": "having feasible path so we are showing it to be suitable into the program we",
    "start": "934360",
    "end": "939399"
  },
  {
    "text": "can potentially generate new inputs and it allows to thwart basic tricks of Fox",
    "start": "939399",
    "end": "944619"
  },
  {
    "text": "education like code overlapping cells modification and things like this so in",
    "start": "944619",
    "end": "950649"
  },
  {
    "text": "comparison to static and dynamic it's robust and correct thanks to dynamic",
    "start": "950649",
    "end": "956100"
  },
  {
    "text": "aspect and it's more complete because it allows to generate new paths",
    "start": "956100",
    "end": "962110"
  },
  {
    "text": "the main shortcomings of this method is that it has some scalability issues",
    "start": "962110",
    "end": "967509"
  },
  {
    "text": "because when you have you obtain some strong relation on the path that it",
    "start": "967509",
    "end": "973569"
  },
  {
    "text": "might be really difficult to solve and that makes it really difficult to scale then okay so we have dynamic simmer",
    "start": "973569",
    "end": "983290"
  },
  {
    "text": "institution it allows us to find new target for dynamic gems to cover new branches and so on but what if instead",
    "start": "983290",
    "end": "990519"
  },
  {
    "text": "we want to check some incredibility properties like we want to make sure that read instruction is always going to",
    "start": "990519",
    "end": "999970"
  },
  {
    "text": "return to the cold instructions or another example for back predicate we",
    "start": "999970",
    "end": "1005009"
  },
  {
    "text": "want to to check that we are always going to check to take one of the two",
    "start": "1005009",
    "end": "1011069"
  },
  {
    "text": "branches so we would like to check the infallibility of some events so in the",
    "start": "1011069",
    "end": "1016439"
  },
  {
    "text": "case of Papa cricket it will be the increase ability of going into one of the two branches so there is a problem",
    "start": "1016439",
    "end": "1024750"
  },
  {
    "text": "the Thunderer forwards DSE is not only adapt for such problem and that's why we",
    "start": "1024750",
    "end": "1032279"
  },
  {
    "text": "propose a new approach which is the backward bounded DSC so it's a",
    "start": "1032279",
    "end": "1038399"
  },
  {
    "text": "complementary approach to forward DSC so",
    "start": "1038399",
    "end": "1043500"
  },
  {
    "text": "the basic idea is that you have for instance here a conditional jump and you",
    "start": "1043500",
    "end": "1048720"
  },
  {
    "text": "would like to check that we cannot take for instance one of the two branches so",
    "start": "1048720",
    "end": "1053970"
  },
  {
    "text": "you're going to execute it symbolically in a backward manner if you don't go",
    "start": "1053970",
    "end": "1059519"
  },
  {
    "text": "back enough you will have you will not prove it to be infeasible if you manage",
    "start": "1059519",
    "end": "1067169"
  },
  {
    "text": "for and here to read them to the email you will prove that you cannot get into the",
    "start": "1067169",
    "end": "1075390"
  },
  {
    "text": "branch and if you manage to go up to here for instance you are complete",
    "start": "1075390",
    "end": "1080490"
  },
  {
    "text": "because you have backtracked on all the dependencies of the registers another",
    "start": "1080490",
    "end": "1088049"
  },
  {
    "text": "exam is for call stack tampering so basically if you have four read instructions here you go back to the",
    "start": "1088049",
    "end": "1095789"
  },
  {
    "text": "return to the coal by symbolically executing it backward and you can have a",
    "start": "1095789",
    "end": "1101519"
  },
  {
    "text": "false negative if you don't go back enough and and uh you can be correct if",
    "start": "1101519",
    "end": "1108330"
  },
  {
    "text": "you find here there we have the tempering and you can manage to be",
    "start": "1108330",
    "end": "1114330"
  },
  {
    "text": "complete if you cover all the branches leading to that read instruction okay so",
    "start": "1114330",
    "end": "1120480"
  },
  {
    "text": "other summary the back part bounded DAC",
    "start": "1120480",
    "end": "1126500"
  },
  {
    "start": "1124000",
    "end": "1347000"
  },
  {
    "text": "is bounded so the main advantage to this approach is that it's scale to whatever",
    "start": "1126500",
    "end": "1132659"
  },
  {
    "text": "track execution trust length you are dealing with and that's important for obfuscation and it does not solve the",
    "start": "1132659",
    "end": "1141090"
  },
  {
    "text": "same problem that stand or DAC so it's a complimentary approach the point is that",
    "start": "1141090",
    "end": "1147630"
  },
  {
    "text": "here for instance if you go back four steps backward from the logical point of",
    "start": "1147630",
    "end": "1153600"
  },
  {
    "text": "view you are going to over approximate all the possible paths leading to that location and moving one step further if",
    "start": "1153600",
    "end": "1161700"
  },
  {
    "text": "you have proved your property by moving four steps backward it will still be",
    "start": "1161700",
    "end": "1167450"
  },
  {
    "text": "infeasible by moving five steps so and",
    "start": "1167450",
    "end": "1173250"
  },
  {
    "text": "it's not forced negative neither false positive free but the rates are quite",
    "start": "1173250",
    "end": "1179010"
  },
  {
    "text": "low okay what about the bound selection",
    "start": "1179010",
    "end": "1185389"
  },
  {
    "text": "so typically for caustic tempering we are going to return from the red to the cold and for back for decades",
    "start": "1185389",
    "end": "1192980"
  },
  {
    "text": "the point is finding the right balance between the false negative you can we",
    "start": "1192980",
    "end": "1198630"
  },
  {
    "text": "can have on the false positive and by bit marking classical back predicate that",
    "start": "1198630",
    "end": "1203759"
  },
  {
    "text": "you have found usually 16 to 20 instruction backward with enough for",
    "start": "1203759",
    "end": "1210210"
  },
  {
    "text": "proving the the opacity of predicate so",
    "start": "1210210",
    "end": "1216269"
  },
  {
    "text": "the idea is to use this algorithm into a combination of dynamic disassembly",
    "start": "1216269",
    "end": "1222779"
  },
  {
    "text": "static disassembly and dynamic symbolic execution and the high D is to compute",
    "start": "1222779",
    "end": "1229729"
  },
  {
    "text": "some obfuscation related data with symbolic execution and provide it to",
    "start": "1229729",
    "end": "1236690"
  },
  {
    "text": "static disassembly in order to preventing it to disassemble dead branches I'm telling it to disassemble",
    "start": "1236690",
    "end": "1245129"
  },
  {
    "text": "read targets and things like this so that is from a safe a partial graph you",
    "start": "1245129",
    "end": "1256460"
  },
  {
    "text": "improve it with static disassembly guided by dynamic symbolic execution and",
    "start": "1256460",
    "end": "1262229"
  },
  {
    "text": "you get potentially with dynamic symbolic execution by the way generate new inputs for generating new traces and",
    "start": "1262229",
    "end": "1268440"
  },
  {
    "text": "so on so has an example here you we have",
    "start": "1268440",
    "end": "1274019"
  },
  {
    "text": "a partial graph obtained by running the program we have handled some targets for",
    "start": "1274019",
    "end": "1281940"
  },
  {
    "text": "dynamic jumps because we are doing it dynamically we can induce some layers of",
    "start": "1281940",
    "end": "1289529"
  },
  {
    "text": "self modification because we are simply going to execute them then you can",
    "start": "1289529",
    "end": "1296519"
  },
  {
    "text": "enlarge the the control flow graph we static disassembly and also preventing",
    "start": "1296519",
    "end": "1303330"
  },
  {
    "text": "the static is a zombie to disassemble for instance here a dead branches if you",
    "start": "1303330",
    "end": "1308580"
  },
  {
    "text": "manage to prove that it's so back we can man instruct the static dessert for me",
    "start": "1308580",
    "end": "1315119"
  },
  {
    "text": "to disassemble wet target if they are not returning to the call and obviously",
    "start": "1315119",
    "end": "1320789"
  },
  {
    "text": "we can instruct a statically that's only not to disassemble the instruction right",
    "start": "1320789",
    "end": "1327690"
  },
  {
    "text": "after the call if we never written to it followed by basically student some more",
    "start": "1327690",
    "end": "1333679"
  },
  {
    "text": "safe and precise either somebody of the program okay so",
    "start": "1333679",
    "end": "1339080"
  },
  {
    "text": "this combination and these algorithms you are implementing it them into bin sack which is our platform for binary",
    "start": "1339080",
    "end": "1346340"
  },
  {
    "text": "analysis it's basically composed of three entities the main platform we bin check",
    "start": "1346340",
    "end": "1352670"
  },
  {
    "text": "which is doing static analysis symbolic executions and many other",
    "start": "1352670",
    "end": "1357800"
  },
  {
    "text": "functionalities we are using a tool called pin Tech which is our dynamic instrumentation which is basically based",
    "start": "1357800",
    "end": "1364730"
  },
  {
    "text": "on pin so for now we only do x86 and the",
    "start": "1364730",
    "end": "1370130"
  },
  {
    "text": "last entity is hydrosect which is a hide a plugin for triggering analysis",
    "start": "1370130",
    "end": "1377060"
  },
  {
    "text": "recovering the result and so on and all these three entities our community with",
    "start": "1377060",
    "end": "1382400"
  },
  {
    "text": "misses queuing and 0 mq okay so pins like is based on pin not the latest",
    "start": "1382400",
    "end": "1390620"
  },
  {
    "text": "versions but the one before he can generate obviously execution trace in",
    "start": "1390620",
    "end": "1395990"
  },
  {
    "text": "protobuf it works on Linux Windows we can configure it with JSON file for",
    "start": "1395990",
    "end": "1401060"
  },
  {
    "text": "instance if you'd like to do some on-the-fly value patching or all these",
    "start": "1401060",
    "end": "1406220"
  },
  {
    "text": "kind of things and it keep tracks of the self modification layer that we we might",
    "start": "1406220",
    "end": "1411530"
  },
  {
    "text": "be executing problem is that we don't have all the anti debug all the mtv vm",
    "start": "1411530",
    "end": "1419240"
  },
  {
    "text": "control measures that might be used by malware for evading such instrumentation",
    "start": "1419240",
    "end": "1426220"
  },
  {
    "start": "1425000",
    "end": "1871000"
  },
  {
    "text": "then bin sec it basically provides a front-end for x86 into our intermediate",
    "start": "1426220",
    "end": "1432620"
  },
  {
    "text": "representation and provide some static analysis abstract interpretation and I",
    "start": "1432620",
    "end": "1439100"
  },
  {
    "text": "did implemented the dynamic symbolic execution so we provide many",
    "start": "1439100",
    "end": "1444640"
  },
  {
    "text": "functionalities for pass coverage and so on and the most critical points on which",
    "start": "1444640",
    "end": "1454760"
  },
  {
    "text": "we have invested most of our time was the path predicate optimization because",
    "start": "1454760",
    "end": "1461480"
  },
  {
    "text": "in the end the problem is always the scalability of the formula you are going",
    "start": "1461480",
    "end": "1467060"
  },
  {
    "text": "to generate so this is the most critical part you have to to generate formula that are",
    "start": "1467060",
    "end": "1474560"
  },
  {
    "text": "optimized enough to be solvable in a reasonable amount of time so there's a",
    "start": "1474560",
    "end": "1480390"
  },
  {
    "text": "lot of other dynamic symbolic execution out there free time I am s2e and",
    "start": "1480390",
    "end": "1486660"
  },
  {
    "text": "basically all the CGG challenger of the Doppler challenge either",
    "start": "1486660",
    "end": "1494250"
  },
  {
    "text": "it's a arm plugin for either that leverage the results of the analysis",
    "start": "1494250",
    "end": "1499620"
  },
  {
    "text": "into either because it provides some nice UI and high-level functionality for",
    "start": "1499620",
    "end": "1506460"
  },
  {
    "text": "manipulating binaries so we take advantage of this and it basically do",
    "start": "1506460",
    "end": "1512610"
  },
  {
    "text": "the post analysis of the results okay so",
    "start": "1512610",
    "end": "1517950"
  },
  {
    "text": "that's great but let's move on to the concrete studies so we selected 33",
    "start": "1517950",
    "end": "1526050"
  },
  {
    "text": "Packers from the wall and we say okay let's try to find if there is some OPAC",
    "start": "1526050",
    "end": "1531720"
  },
  {
    "text": "predicates or contact tampering into them so we basically analyze 30 33 of",
    "start": "1531720",
    "end": "1539220"
  },
  {
    "text": "them we bounded the execution to with 10 million instructions and the gold was",
    "start": "1539220",
    "end": "1545610"
  },
  {
    "text": "basically to perform some kind of fully automated and systematic analysis of the",
    "start": "1545610",
    "end": "1551160"
  },
  {
    "text": "Packers to to validate our approaches so",
    "start": "1551160",
    "end": "1556590"
  },
  {
    "text": "this is the results they are not complete but this is some of them that's",
    "start": "1556590",
    "end": "1562680"
  },
  {
    "text": "kind of dense but what we can quickly see is that ok the analysis scale",
    "start": "1562680",
    "end": "1568320"
  },
  {
    "text": "because we managed to thanks to the backboard bound edse we managed to",
    "start": "1568320",
    "end": "1573380"
  },
  {
    "text": "analyze multimillion tracks lamp paths so the techniques works well and it",
    "start": "1573380",
    "end": "1581670"
  },
  {
    "text": "basically managed also to find some good matches for OPIC predicates and caustic",
    "start": "1581670",
    "end": "1586920"
  },
  {
    "text": "tempering and with that amount of values it's beyond false positive rate and the",
    "start": "1586920",
    "end": "1595140"
  },
  {
    "text": "last aspect that was surprising is for instance some of the factors only have",
    "start": "1595140",
    "end": "1600929"
  },
  {
    "text": "one tempering for the read instructions and it",
    "start": "1600929",
    "end": "1606120"
  },
  {
    "text": "appeared that it was Packer that were doing the tail transition to the original entry point of the program by",
    "start": "1606120",
    "end": "1613650"
  },
  {
    "text": "doing a push and right instructions so obviously the RET instruction is going to be detected as tempered okay",
    "start": "1613650",
    "end": "1622890"
  },
  {
    "text": "what we have found into into it so for instance in AC products we found plenty",
    "start": "1622890",
    "end": "1628560"
  },
  {
    "text": "of a pack predicate and there were basically just chaining our to strictly",
    "start": "1628560",
    "end": "1634280"
  },
  {
    "text": "exclusive conditions so GS g NS and we found all the possible alternatives so g",
    "start": "1634280",
    "end": "1641010"
  },
  {
    "text": "PG and PG o GN o and so on why not we",
    "start": "1641010",
    "end": "1646320"
  },
  {
    "text": "found in armadillo door is e^x is e^x it's obviously going to be zero so we",
    "start": "1646320",
    "end": "1652680"
  },
  {
    "text": "are always going to take one punch that's primitive but still working on",
    "start": "1652680",
    "end": "1659010"
  },
  {
    "text": "from contact tampering into for instance HP product so this is basically the four",
    "start": "1659010",
    "end": "1664320"
  },
  {
    "text": "first instruction of the program this push push read read so basically when",
    "start": "1664320",
    "end": "1669630"
  },
  {
    "text": "you disassemble with Ida it just gives you four instruction so it's not really worth it",
    "start": "1669630",
    "end": "1676670"
  },
  {
    "text": "another one that we found also in AC product so we perform a call and then we",
    "start": "1676670",
    "end": "1682440"
  },
  {
    "text": "modify at the top of the stack the value will just return to it so we're going to jump somewhere else another caustic",
    "start": "1682440",
    "end": "1691170"
  },
  {
    "text": "tampering that you found in aspect this time and the dynamic instrumentation yielded that we did entered into a new",
    "start": "1691170",
    "end": "1698910"
  },
  {
    "text": "process modification layer and so you can see the tampering here push zero in",
    "start": "1698910",
    "end": "1705150"
  },
  {
    "text": "red but on dynamically at the execution at wrong time did instruction the move",
    "start": "1705150",
    "end": "1712410"
  },
  {
    "text": "is going to patch the push instructions with the original trim point and then jumped into the original program so",
    "start": "1712410",
    "end": "1720150"
  },
  {
    "text": "that's why we detected that we did enter into a new soft modification layer last",
    "start": "1720150",
    "end": "1726120"
  },
  {
    "text": "example is an attack predicate in aspect so you have moved 0 into BL compare dl",
    "start": "1726120",
    "end": "1732930"
  },
  {
    "text": "to 0 and GN z so when i reversed the program I'm looking to it I was like",
    "start": "1732930",
    "end": "1738780"
  },
  {
    "text": "okay that'll apply predicates our algorithm will manage to find it but",
    "start": "1738780",
    "end": "1744390"
  },
  {
    "text": "under our while looking at the results the resultant yeah now it's okay I've covered the two branches so I was like",
    "start": "1744390",
    "end": "1752040"
  },
  {
    "text": "okay there's something wrong with my algorithms but by looking at the dynamic execution trace I just can kind of the",
    "start": "1752040",
    "end": "1759960"
  },
  {
    "text": "same trick and it appeared that the instructions that is on the right branch",
    "start": "1759960",
    "end": "1764970"
  },
  {
    "text": "is going to patch the opcodes of the move so that later on when you come back",
    "start": "1764970",
    "end": "1771240"
  },
  {
    "text": "in the GN that you're going to take the other branch and that's pretty much why",
    "start": "1771240",
    "end": "1778080"
  },
  {
    "text": "we validate the fact that it's interesting to retain the dynamic symbolic execution rather than purely",
    "start": "1778080",
    "end": "1785190"
  },
  {
    "text": "static because purely static stability section whom have detected such are",
    "start": "1785190",
    "end": "1790740"
  },
  {
    "text": "tricks okay so let's go on to the the",
    "start": "1790740",
    "end": "1797280"
  },
  {
    "text": "big deal external so you've probably heard about this group for the past few",
    "start": "1797280",
    "end": "1804720"
  },
  {
    "text": "months so they goes by the name of 850 28 fancy bare surfaces that need one",
    "start": "1804720",
    "end": "1810930"
  },
  {
    "text": "storm and so on they have been targeting lots of with entities they - you German",
    "start": "1810930",
    "end": "1819210"
  },
  {
    "text": "Parliament's TVs like Mon in France and recently the Democratic National",
    "start": "1819210",
    "end": "1825240"
  },
  {
    "text": "Committee GMC it basically used lots of",
    "start": "1825240",
    "end": "1830750"
  },
  {
    "text": "zero days to to spread it to infect the the targets and very recently yeah very",
    "start": "1830750",
    "end": "1839340"
  },
  {
    "text": "recently an electoral ballot is this Monday Monday there was the release of",
    "start": "1839340",
    "end": "1846870"
  },
  {
    "text": "the details by Google of zero day into flash and Windows 10 for sandbox escape",
    "start": "1846870",
    "end": "1852840"
  },
  {
    "text": "and it appeared that it was this group that was using it for targeting the",
    "start": "1852840",
    "end": "1858960"
  },
  {
    "text": "targets so they also use plenty of tools droppers downloaders rootkit boot kit",
    "start": "1858960",
    "end": "1866850"
  },
  {
    "text": "and so on and we are going to focus on external okay so the main",
    "start": "1866850",
    "end": "1875270"
  },
  {
    "text": "malware is expedient it's running on the infected machines and they're going to",
    "start": "1875270",
    "end": "1881990"
  },
  {
    "text": "find trying to reach the CNC server the control command server and if you cannot",
    "start": "1881990",
    "end": "1887390"
  },
  {
    "text": "connect to it directly it's going to find on the internal network if you can find the external malware or to connect",
    "start": "1887390",
    "end": "1895610"
  },
  {
    "text": "to the CMT through it so external is basically a proxy a ciphering proxy that",
    "start": "1895610",
    "end": "1903710"
  },
  {
    "text": "is going to encapsulate all the connections to rc4 cipher and",
    "start": "1903710",
    "end": "1909230"
  },
  {
    "text": "encapsulate the whole thing into TLS and a friend of mine John Caliphate that",
    "start": "1909230",
    "end": "1915289"
  },
  {
    "start": "1912000",
    "end": "2014000"
  },
  {
    "text": "would like to thank providing me three samples of external the first one is has",
    "start": "1915289",
    "end": "1924620"
  },
  {
    "text": "been compiled in June 2015 if dates are correct and it probably melted two other",
    "start": "1924620",
    "end": "1931070"
  },
  {
    "text": "samples and the point is on the two other samples are twice bigger than the",
    "start": "1931070",
    "end": "1938270"
  },
  {
    "text": "original sample almost so first the first one is 1.1 megabytes and the to",
    "start": "1938270",
    "end": "1944120"
  },
  {
    "text": "order at 2.1 and 1.8 megabytes so and if",
    "start": "1944120",
    "end": "1949429"
  },
  {
    "text": "dates are still correct they have been combined like the second one I think about one week later and the",
    "start": "1949429",
    "end": "1954830"
  },
  {
    "text": "other one few months later so that will be surprising to add so that much new",
    "start": "1954830",
    "end": "1959960"
  },
  {
    "text": "functionalities into the program within the small range of time so just by looking into it we we found lots and",
    "start": "1959960",
    "end": "1968059"
  },
  {
    "text": "lots and lots of a pack for decades so the first question was ok can we remove",
    "start": "1968059",
    "end": "1973880"
  },
  {
    "text": "it and the answer is yes so far it works",
    "start": "1973880",
    "end": "1979130"
  },
  {
    "text": "well and one of the main questions was are there new functionality into G up to",
    "start": "1979130",
    "end": "1985280"
  },
  {
    "text": "scale it binaries because what we would analyze a few scary binaries if you have not obsessed gated one and the answer",
    "start": "1985280",
    "end": "1992120"
  },
  {
    "text": "lies that we'd like to know if there is new functionalities into the duplicated samples and the answer for that is I",
    "start": "1992120",
    "end": "1999650"
  },
  {
    "text": "don't know okay but because I've get rid of the obfuscation this is the next step toward",
    "start": "1999650",
    "end": "2006910"
  },
  {
    "text": "finding there is a function actually I'm going to to give some insights of there or not there is new tonight into it so",
    "start": "2006910",
    "end": "2014860"
  },
  {
    "start": "2014000",
    "end": "2166000"
  },
  {
    "text": "what the analysis context so first we are going to go fully static in a",
    "start": "2014860",
    "end": "2020710"
  },
  {
    "text": "position to what we have presented before because it appeared that the malware was not using any access",
    "start": "2020710",
    "end": "2027130"
  },
  {
    "text": "modification features so we basically have the whole CFG even though it's really big and a good argument is that",
    "start": "2027130",
    "end": "2034600"
  },
  {
    "text": "we don't want to connect to the command control server neither to wait for clients to connect on the the proxy in",
    "start": "2034600",
    "end": "2042370"
  },
  {
    "text": "order to obtain some relevant executions so we are going to do it for aesthetic",
    "start": "2042370",
    "end": "2048360"
  },
  {
    "text": "so first that we perform our epic predicate detection with our backward bounded GC and so on we will try to",
    "start": "2048360",
    "end": "2056770"
  },
  {
    "text": "recover some high-level predicates so trying to find what kind of predicates",
    "start": "2056770",
    "end": "2062919"
  },
  {
    "text": "the absolute then if everything goes right in the two first steps we should",
    "start": "2062920",
    "end": "2068950"
  },
  {
    "text": "be able to remove all dead code and the spurious instructions so basically it's",
    "start": "2068950",
    "end": "2074980"
  },
  {
    "text": "various instructions or instructions that are involved into the OPAC predicate computation but only for that",
    "start": "2074980",
    "end": "2082330"
  },
  {
    "text": "so if you manage to prove that there is not bad predicate you can basically get",
    "start": "2082330",
    "end": "2087669"
  },
  {
    "text": "rid of the instruction that are completing it and last if anything goes",
    "start": "2087670",
    "end": "2093550"
  },
  {
    "text": "right up to here we normally should be able to extract the unab CA d CFG of the",
    "start": "2093550",
    "end": "2101110"
  },
  {
    "text": "program okay so a few points about the",
    "start": "2101110",
    "end": "2106390"
  },
  {
    "text": "high-level predicate recovery so the goal is to complete the dependency on",
    "start": "2106390",
    "end": "2112900"
  },
  {
    "text": "the predicate in order to backtrack all the the instructions involved in the",
    "start": "2112900",
    "end": "2118120"
  },
  {
    "text": "computation so on the left you have an example of an applied predicates that",
    "start": "2118120",
    "end": "2123430"
  },
  {
    "text": "you have flown into eternal and on the right you have the formula generated in",
    "start": "2123430",
    "end": "2131200"
  },
  {
    "text": "SMT so if you basically backtrack on the two parameters of the compare you",
    "start": "2131200",
    "end": "2137799"
  },
  {
    "text": "can basically normally recreate the expressions that is being computed for",
    "start": "2137799",
    "end": "2144400"
  },
  {
    "text": "instance here its beauty meal and so on and you fold the whole thing you obtain",
    "start": "2144400",
    "end": "2151059"
  },
  {
    "text": "the predicate synthesized and by replacing the register with XYZ and so",
    "start": "2151059",
    "end": "2157450"
  },
  {
    "text": "on so the idea of this is was trying to identify the different patterns that",
    "start": "2157450",
    "end": "2164559"
  },
  {
    "text": "I've used okay what about the results so the two binaries basically have three",
    "start": "2164559",
    "end": "2172980"
  },
  {
    "start": "2166000",
    "end": "2604000"
  },
  {
    "text": "30,000 conditional gems that we all text the the symbolic eviction took one hour",
    "start": "2172980",
    "end": "2180700"
  },
  {
    "text": "mostly and the synthesis also but I was not I didn't really optimized it it was",
    "start": "2180700",
    "end": "2189190"
  },
  {
    "text": "in Python running into I dog it's kind of yeah I could have done better and so",
    "start": "2189190",
    "end": "2194980"
  },
  {
    "text": "basically the analysis of the two temples took 1 hour and half which is okay if you have time or if you want to",
    "start": "2194980",
    "end": "2203440"
  },
  {
    "text": "take for many coffees with okay so",
    "start": "2203440",
    "end": "2210430"
  },
  {
    "text": "basically Alf of the conditional objects or genuine conditional jumps which are right which is good and the significant",
    "start": "2210430",
    "end": "2217599"
  },
  {
    "text": "amount of them are effects and among them we managed to find what are the how",
    "start": "2217599",
    "end": "2224529"
  },
  {
    "text": "many false positive and false negative there were and the question is how do we have obtained the false positive and",
    "start": "2224529",
    "end": "2231819"
  },
  {
    "text": "false negative and this is basically because the synthesis yelled that they",
    "start": "2231819",
    "end": "2237039"
  },
  {
    "text": "only use two different predicates into the program so the well-known seven x y",
    "start": "2237039",
    "end": "2244720"
  },
  {
    "text": "square and so on and another one that we have never seen elsewhere in other obfuscators which might be good for",
    "start": "2244720",
    "end": "2252520"
  },
  {
    "text": "doing some signatures or I don't know and using these two patterns have been",
    "start": "2252520",
    "end": "2257589"
  },
  {
    "text": "able to identify among the result which predicates were false positive and which",
    "start": "2257589",
    "end": "2262839"
  },
  {
    "text": "one were false negative and we basically miss really few of them",
    "start": "2262839",
    "end": "2268950"
  },
  {
    "text": "okay then then I try to find what was",
    "start": "2268950",
    "end": "2274330"
  },
  {
    "text": "bad ik distributions of the obfuscation within the the functions and it appeared",
    "start": "2274330",
    "end": "2279460"
  },
  {
    "text": "that most of the functions are not obfuscated at all so three thousands of",
    "start": "2279460",
    "end": "2286570"
  },
  {
    "text": "them are not sophisticated and by looking at them it was basically the the",
    "start": "2286570",
    "end": "2291940"
  },
  {
    "text": "functions of the statically linked libraries that were embedded into the program they are using open ssl and so",
    "start": "2291940",
    "end": "2299080"
  },
  {
    "text": "on and all these functions are not officiated why not but it allows us to narrow the analysis on the obfuscated",
    "start": "2299080",
    "end": "2306940"
  },
  {
    "text": "sample so we only have like 500 frictions remaining so that's a lot but",
    "start": "2306940",
    "end": "2313540"
  },
  {
    "text": "that's better than three thousands of them the code coverage so we started",
    "start": "2313540",
    "end": "2322510"
  },
  {
    "text": "from five hundred thousands instruction by propagating the liveness of",
    "start": "2322510",
    "end": "2330210"
  },
  {
    "text": "instructions we obtain two hundred thousands of them that were still alive and when you remove the dead instruction",
    "start": "2330210",
    "end": "2337270"
  },
  {
    "text": "and spurious instructions you obtain basically our difference with the an",
    "start": "2337270",
    "end": "2344140"
  },
  {
    "text": "upscale example which is for the simple one forty seven thousand instruction and",
    "start": "2344140",
    "end": "2350020"
  },
  {
    "text": "for the second temple is nine thousand instructions so that's actually really",
    "start": "2350020",
    "end": "2356350"
  },
  {
    "text": "low could that be noise that remains from our analogy that could have meet",
    "start": "2356350",
    "end": "2362920"
  },
  {
    "text": "some spurious instruction also on so we",
    "start": "2362920",
    "end": "2368110"
  },
  {
    "text": "with these results we are kind of not optimistic about the fact that there is",
    "start": "2368110",
    "end": "2373990"
  },
  {
    "text": "really new functionalities in dedicated samples so basically you have the",
    "start": "2373990",
    "end": "2382960"
  },
  {
    "text": "control flow graph of a function I took the first one I've found when you",
    "start": "2382960",
    "end": "2388330"
  },
  {
    "text": "perform the analysis you are able to to flag the basic blocks if their lives dead and so on and this allows you to",
    "start": "2388330",
    "end": "2395890"
  },
  {
    "text": "extract from it the unassociated",
    "start": "2395890",
    "end": "2401369"
  },
  {
    "text": "control flow graph okay so I'm going to do a quick demo so I'm going to run",
    "start": "2401369",
    "end": "2411769"
  },
  {
    "text": "binstock power as a server so it turns",
    "start": "2413030",
    "end": "2418320"
  },
  {
    "text": "locally on my machine and then I'm going to launch Shia so this is external this",
    "start": "2418320",
    "end": "2431610"
  },
  {
    "text": "is one of the first function function is the start function it's kind of big but",
    "start": "2431610",
    "end": "2439650"
  },
  {
    "text": "not that much",
    "start": "2439650",
    "end": "2442460"
  },
  {
    "text": "I'm loading hide effect our plugin I'm",
    "start": "2445580",
    "end": "2453960"
  },
  {
    "text": "going to connect to VIN cyclically so so here we are we are connected and I'm",
    "start": "2453960",
    "end": "2460560"
  },
  {
    "text": "going to trigger the analogy that developed for for these samples the static go back so the back predicate",
    "start": "2460560",
    "end": "2466619"
  },
  {
    "text": "analysis but statically we set the bound to 16 it should be enough for most of",
    "start": "2466619",
    "end": "2472770"
  },
  {
    "text": "them and with and I'm going only to",
    "start": "2472770",
    "end": "2481020"
  },
  {
    "text": "analyze this routine okay so these basically generates design configuration",
    "start": "2481020",
    "end": "2488880"
  },
  {
    "text": "pilot is going to be sent to be insect along with all the sub passes of the",
    "start": "2488880",
    "end": "2494420"
  },
  {
    "text": "conditional jumps of the functions and B okay so start there is 45 conditional",
    "start": "2494420",
    "end": "2501270"
  },
  {
    "text": "jumps in the functions so it processes them all and here it is so among the 45",
    "start": "2501270",
    "end": "2510900"
  },
  {
    "text": "conditional jumps there is only two of them that were genuine and 43 of the",
    "start": "2510900",
    "end": "2516270"
  },
  {
    "text": "others were back predicates and we can double check it by looking at the",
    "start": "2516270",
    "end": "2521490"
  },
  {
    "text": "predicates that have been synthesized and as you can see it's always the same kind of sometimes we did not manage to",
    "start": "2521490",
    "end": "2528750"
  },
  {
    "text": "replace the register by a placeholder but we can basically see that their whole",
    "start": "2528750",
    "end": "2534270"
  },
  {
    "text": "the same predicates and among them there was only two that were not the back so",
    "start": "2534270",
    "end": "2540870"
  },
  {
    "text": "at the top of that I've implemented like fancy functionalities for highlighting",
    "start": "2540870",
    "end": "2546540"
  },
  {
    "text": "in the control flow graph what is that what is alive so so that tells us to",
    "start": "2546540",
    "end": "2551940"
  },
  {
    "text": "quickly see what what's of interest I can also a lie highlight the spurious",
    "start": "2551940",
    "end": "2559260"
  },
  {
    "text": "instructions here you can see that all this insertions are just calculating the",
    "start": "2559260",
    "end": "2565080"
  },
  {
    "text": "OPAC predicates so if you remove it you can basically have the pain and at the",
    "start": "2565080",
    "end": "2573600"
  },
  {
    "text": "top of that we can have like to hide a ap I have done some extractions to",
    "start": "2573600",
    "end": "2581280"
  },
  {
    "text": "reduce CFG and here it is so this is",
    "start": "2581280",
    "end": "2589770"
  },
  {
    "text": "basically the function without all the spirits instruction and date code which is more visible and usable for further",
    "start": "2589770",
    "end": "2598110"
  },
  {
    "text": "analysis okay so it's back to you okay",
    "start": "2598110",
    "end": "2605490"
  },
  {
    "text": "so what are your conclusions about external so manual checking of extracted CFG with the original functions of the",
    "start": "2605490",
    "end": "2612960"
  },
  {
    "text": "first samples didn't yield really significant differences or any new",
    "start": "2612960",
    "end": "2620580"
  },
  {
    "text": "functionalities but that would really require more in-depth blood similarity like bindi for so long for trying to",
    "start": "2620580",
    "end": "2629940"
  },
  {
    "text": "find this among these 500 remaining functions you can find something of interest the application itself is",
    "start": "2629940",
    "end": "2637830"
  },
  {
    "text": "natural II it was kind of great because they managed to create some four",
    "start": "2637830",
    "end": "2646380"
  },
  {
    "text": "dependencies between the instantiation of variables when they are usage to the predicate so the depth might be quite",
    "start": "2646380",
    "end": "2654960"
  },
  {
    "text": "big and also they do some code reuse",
    "start": "2654960",
    "end": "2660900"
  },
  {
    "text": "code sharing between the predicates so all the predicated nor are not standalone",
    "start": "2660900",
    "end": "2667130"
  },
  {
    "text": "are relying on each other for computing some parts and so on so I kind of caught sharing and dependency bit with each",
    "start": "2667130",
    "end": "2674120"
  },
  {
    "text": "other and I would ally and I chef if you want to have more information about the",
    "start": "2674120",
    "end": "2680480"
  },
  {
    "text": "external excitement and so on I highly recommend the presentation visiting the",
    "start": "2680480",
    "end": "2685490"
  },
  {
    "text": "beer del by John Calvin JC Campos Santa magic tree it has been presented that we can but it's going to be presented at",
    "start": "2685490",
    "end": "2693020"
  },
  {
    "text": "but counts how this year okay what about",
    "start": "2693020",
    "end": "2698450"
  },
  {
    "start": "2697000",
    "end": "2781000"
  },
  {
    "text": "the takeaways of beans ik so this is definitely the tip of what can be done we've been sick I've only shown what you",
    "start": "2698450",
    "end": "2705710"
  },
  {
    "text": "can do with dynamic symbolic execution but bins like also allows to do abstract interpretation stimulations",
    "start": "2705710",
    "end": "2712670"
  },
  {
    "text": "it has some optimization and many interesting things so more is it to come",
    "start": "2712670",
    "end": "2718430"
  },
  {
    "text": "the platform is really young types of documentation stabilize the API is that",
    "start": "2718430",
    "end": "2724610"
  },
  {
    "text": "it's coming but still we can download it try to experiment with it if you have",
    "start": "2724610",
    "end": "2731090"
  },
  {
    "text": "any questions just ask we are available and the main takeaway",
    "start": "2731090",
    "end": "2737630"
  },
  {
    "text": "of the torque is backward boundaries DSU scales well and we have managed to to",
    "start": "2737630",
    "end": "2745250"
  },
  {
    "text": "show it on packers that are kind of huge in terms of execution trust length the",
    "start": "2745250",
    "end": "2752900"
  },
  {
    "text": "backward bounded days are yelled really good results on this channel because we managed to to get rid of the obfuscation",
    "start": "2752900",
    "end": "2760010"
  },
  {
    "text": "and we definitely think that combining dynamic static and symbolic analysis and",
    "start": "2760010",
    "end": "2769010"
  },
  {
    "text": "approaches is definitely the way to go on obfuscated binaries in order to",
    "start": "2769010",
    "end": "2775600"
  },
  {
    "text": "handle the different kind of sophistication we can meet to this program and that's all for me",
    "start": "2775600",
    "end": "2782840"
  },
  {
    "start": "2781000",
    "end": "3032000"
  },
  {
    "text": "thank you if you have any questions are the happy to answer",
    "start": "2782840",
    "end": "2787630"
  },
  {
    "text": "yeah we yeah um even though for instance",
    "start": "2836760",
    "end": "2843280"
  },
  {
    "text": "on external even though sometimes they have some for dependency we managed to",
    "start": "2843280",
    "end": "2850420"
  },
  {
    "text": "recover enough constraints on the input so that we can prove the opacity of the",
    "start": "2850420",
    "end": "2855520"
  },
  {
    "text": "predicate so you don't need to backtrack all the dependency but by backtrack for",
    "start": "2855520",
    "end": "2862240"
  },
  {
    "text": "the example of a predicate should backtrack enough to recover enough constraints on the variables you will be",
    "start": "2862240",
    "end": "2868510"
  },
  {
    "text": "able to prove the infeasibility yeah",
    "start": "2868510",
    "end": "2876839"
  },
  {
    "text": "yeah maybe basically for for your question tried multiple bound for this",
    "start": "2878760",
    "end": "2885010"
  },
  {
    "text": "problem and found out that 16 to 20 was kind of great yeah it was the best and",
    "start": "2885010",
    "end": "2891580"
  },
  {
    "text": "between for negative and false positive to because there are still some false positive or false negative",
    "start": "2891580",
    "end": "2898859"
  },
  {
    "text": "okay depression was you know if we're",
    "start": "2908770",
    "end": "2913990"
  },
  {
    "text": "the modelers in parallelization and the answer for that you should normally execute symbolically",
    "start": "2913990",
    "end": "2922250"
  },
  {
    "text": "all the thread separately and yeah it's kind of difficult to model that the interactions in memory that can have",
    "start": "2922250",
    "end": "2928990"
  },
  {
    "text": "yeah that's kind of complicated we basically don't do it for now",
    "start": "2928990",
    "end": "2935440"
  },
  {
    "text": "okay so there is no questions yeah I'm not",
    "start": "2941710",
    "end": "2966860"
  },
  {
    "text": "looked into the CD flattening discussion but yeah that would be a very great deal",
    "start": "2966860",
    "end": "2972470"
  },
  {
    "text": "to try to find to write down them for the limit but I'm not really sure that",
    "start": "2972470",
    "end": "2978680"
  },
  {
    "text": "if for the specific cases using it backward is really valuable I don't know how yeah sure yeah so",
    "start": "2978680",
    "end": "3003040"
  },
  {
    "text": "that's why we still have some photos even false negatives sometimes just because we took the wrong",
    "start": "3003040",
    "end": "3008050"
  },
  {
    "text": "branch we will falsely believe that it's a fact and a predicate while we could",
    "start": "3008050",
    "end": "3014950"
  },
  {
    "text": "have come from somewhere else and then of Stetz replying your questions",
    "start": "3014950",
    "end": "3021150"
  },
  {
    "text": "okay so thank you all",
    "start": "3025530",
    "end": "3029430"
  }
]