[
  {
    "start": "0",
    "end": "218000"
  },
  {
    "text": "okay hello and welcome to our talk when good turns evil using intellect checks",
    "start": "0",
    "end": "6240"
  },
  {
    "text": "to stealthily steal bitcoins great that so many of you showed up so I hope this",
    "start": "6240",
    "end": "12599"
  },
  {
    "text": "is an interesting talk for a lot of you let's talk shortly about the outline of",
    "start": "12599",
    "end": "18420"
  },
  {
    "text": "this talk today you all know bitcoins and then you have this wallets there that you need to",
    "start": "18420",
    "end": "25710"
  },
  {
    "text": "store your bitcoins and then you have your private key in your Bitcoin wallet that you have to protect at all costs so",
    "start": "25710",
    "end": "32189"
  },
  {
    "text": "no one should have your private key that you use for your Bitcoin wallet otherwise anybody could use your private",
    "start": "32189",
    "end": "39870"
  },
  {
    "text": "key to make transactions with your money literally stealing your money which",
    "start": "39870",
    "end": "46170"
  },
  {
    "text": "would be really bad so you really want to protect your Bitcoin wallet and then",
    "start": "46170",
    "end": "51629"
  },
  {
    "text": "you have this nice Hardware feature by Intel it's called intellect checks that",
    "start": "51629",
    "end": "57090"
  },
  {
    "text": "allows you to run applications in secure nkf and hardware",
    "start": "57090",
    "end": "63180"
  },
  {
    "text": "so it's hardware support it isolation it allows you to run programs store data",
    "start": "63180",
    "end": "68189"
  },
  {
    "text": "and make it completely secure so that no one can get access to your code tree",
    "start": "68189",
    "end": "73799"
  },
  {
    "text": "data everything is encrypted has enforced the CPU so what's better than",
    "start": "73799",
    "end": "81020"
  },
  {
    "text": "using that combining that with your Bitcoin wallet so implementing your Bitcoin wallet inside in less x26 urine",
    "start": "81020",
    "end": "88229"
  },
  {
    "text": "cave which protects your private key by encrypting the memory by not allowing",
    "start": "88229",
    "end": "94560"
  },
  {
    "text": "any other application or operating system to access the data to access your private key so that sounds like",
    "start": "94560",
    "end": "101100"
  },
  {
    "text": "something we might want to do right true so we have this nice technology but as",
    "start": "101100",
    "end": "106950"
  },
  {
    "text": "an attacker why not use this technology as well we can also use SGX to hide",
    "start": "106950",
    "end": "112079"
  },
  {
    "text": "ourselves from the operating systems and the antivirus software because no one can look what we are doing and maybe as",
    "start": "112079",
    "end": "118920"
  },
  {
    "text": "an attack here we can also attack other enclaves running inside SGX if we can do so we can steal the",
    "start": "118920",
    "end": "126360"
  },
  {
    "text": "bitcoins and you do again okay so that was the outline to our",
    "start": "126360",
    "end": "133450"
  },
  {
    "text": "persons my name is Michael Schwarz I'm a PhD student at Cass University of",
    "start": "133450",
    "end": "138670"
  },
  {
    "text": "Technology in Austria I'm working on side-channel attacks on",
    "start": "138670",
    "end": "143770"
  },
  {
    "text": "microarchitecture attacks so all the attacks that exploit some side effects",
    "start": "143770",
    "end": "149430"
  },
  {
    "text": "we only do that in software so we work on software based side-channel attacks to exfiltrate secrets anywhere typically",
    "start": "149430",
    "end": "158470"
  },
  {
    "text": "using the cache or the branch picture or the DRM you can reach me on Twitter",
    "start": "158470",
    "end": "164470"
  },
  {
    "text": "it's my twitter handle there you can write me an email if you have questions if you want to get in any contact",
    "start": "164470",
    "end": "170290"
  },
  {
    "text": "we will also be here for the rest of the conference so you can just come to us and talk to us if you're interested in",
    "start": "170290",
    "end": "178090"
  },
  {
    "text": "that stuff and my name is Moritz lip I'm also a PhD student at Carleton",
    "start": "178090",
    "end": "183220"
  },
  {
    "text": "University University of Technology I also focus on side-channel attacks you",
    "start": "183220",
    "end": "188410"
  },
  {
    "text": "can also contact me on Twitter or via email or just talk talk to us later on but we were not the only one working on",
    "start": "188410",
    "end": "195340"
  },
  {
    "text": "those subjects so our research team consists of Daniel Cruz came on teen Maurice Samuel Weiser to Omashu star and",
    "start": "195340",
    "end": "202720"
  },
  {
    "text": "Shepherd manga also from crass University of Technology and under Spock who is working at G theta advanced",
    "start": "202720",
    "end": "209739"
  },
  {
    "text": "analytics so let's dive back into our topic how does s GX work exactly so we",
    "start": "209739",
    "end": "217570"
  },
  {
    "text": "have seen there is some hardware support for running things securely so but the",
    "start": "217570",
    "end": "222610"
  },
  {
    "start": "218000",
    "end": "360000"
  },
  {
    "text": "others that actually works so I guess not all of you have heard about sjx and how that really works so I'll give a",
    "start": "222610",
    "end": "228160"
  },
  {
    "text": "brief introduction to STX and if you're talking about applications we usually have one application with the",
    "start": "228160",
    "end": "235290"
  },
  {
    "text": "secrets in there and all the code and with the STX model we split our",
    "start": "235290",
    "end": "240970"
  },
  {
    "text": "application so we split it into an untrusted part we don't have any secrets",
    "start": "240970",
    "end": "246100"
  },
  {
    "text": "or anything critical stored and this untrusted part is responsible to create this M cave and this anchor is the",
    "start": "246100",
    "end": "254590"
  },
  {
    "text": "trusted part of our application containing all the secrets or the code that should not be attackable",
    "start": "254590",
    "end": "262079"
  },
  {
    "text": "and everything is stored in there it's encrypted in a DRM and if you wanted to",
    "start": "262079",
    "end": "268800"
  },
  {
    "text": "call any function inside the secure anklet we have to go through a Colgate it's similar to how untrusted",
    "start": "268800",
    "end": "275759"
  },
  {
    "text": "applications interact with the operating system they use this cause there here we have a call kit with all calls and",
    "start": "275759",
    "end": "282349"
  },
  {
    "text": "recalls and we call into this Colgate and it gets dispatched to the correct trusted function we wants to call",
    "start": "282349",
    "end": "289039"
  },
  {
    "text": "distrusted function does all the computation with the secrets in there and then if it's done returns and in the",
    "start": "289039",
    "end": "296550"
  },
  {
    "text": "untrusted part we just get the result of this operation which was done in a in",
    "start": "296550",
    "end": "302099"
  },
  {
    "text": "the trusted part and then we can continue our whole computation and trusted pad with the secretly computed",
    "start": "302099",
    "end": "309479"
  },
  {
    "text": "secret of the trust part and the nice thing about that is that it uses quite",
    "start": "309479",
    "end": "316020"
  },
  {
    "text": "some protection even in a way that we can assume that X trust model assumes",
    "start": "316020",
    "end": "321870"
  },
  {
    "text": "that the operating system is compromised so the operating system is evil we have",
    "start": "321870",
    "end": "328349"
  },
  {
    "text": "a virus for example and tries to get the secrets out of the end cave and we can't",
    "start": "328349",
    "end": "334020"
  },
  {
    "text": "do that so there's no access from the operating system to the end cave we are protected against a certain hardware",
    "start": "334020",
    "end": "339090"
  },
  {
    "text": "text such as sniffing on a dram pass or doing cold boot attack because the T Ram",
    "start": "339090",
    "end": "344250"
  },
  {
    "text": "is encrypted and we can't see anything that's going on in there",
    "start": "344250",
    "end": "349409"
  },
  {
    "text": "in fact the operating system sees everything that's executed in there just as one single function call cannot",
    "start": "349409",
    "end": "355469"
  },
  {
    "text": "intercept anything there doesn't see anything so quite a good protection that's why people decided okay let's use",
    "start": "355469",
    "end": "363270"
  },
  {
    "start": "360000",
    "end": "415000"
  },
  {
    "text": "that feature of our Intel CPU to implement Bitcoin wallets in there for example destice let's say s x NK for",
    "start": "363270",
    "end": "371610"
  },
  {
    "text": "blockchain applications we have a bit bake up a Bitcoin wallet that's implemented in an intellect yes even on",
    "start": "371610",
    "end": "379440"
  },
  {
    "text": "a payment channel called T chain that's using s X as a trusted third party and",
    "start": "379440",
    "end": "386569"
  },
  {
    "text": "we took one of the snippets out of the paper there and the tea chain paper the office",
    "start": "386569",
    "end": "393330"
  },
  {
    "text": "assume that the trusted execution environment guarantees to hold and do not consider that they'll hold and they",
    "start": "393330",
    "end": "399660"
  },
  {
    "text": "do not consider site channels so side channel attacks are out of scope for their trust model and we might see that",
    "start": "399660",
    "end": "408090"
  },
  {
    "text": "this is not something you want to have that you consider site ran out of scope",
    "start": "408090",
    "end": "413870"
  },
  {
    "text": "okay but we need something for blockchain uh bitcoins right yes so",
    "start": "413870",
    "end": "419520"
  },
  {
    "text": "before we see that side channels are not a good idea to make them out of scope we need to think what are we going to put",
    "start": "419520",
    "end": "425610"
  },
  {
    "text": "into our SP xing life so of course we are going to put the grip to there because we have our private key which we",
    "start": "425610",
    "end": "431400"
  },
  {
    "text": "want to protect and what we want to do we want to sign our transactions so that no one else can take our money and shall",
    "start": "431400",
    "end": "438150"
  },
  {
    "text": "spend it that's why we have those signatures for instance like a nice a signature and it works as following we",
    "start": "438150",
    "end": "444600"
  },
  {
    "text": "have a simple exponentiation with our private key which we want to protect and if you want to implement that you use",
    "start": "444600",
    "end": "451950"
  },
  {
    "text": "square and multiply for instance and the nice thing is that when they keep it is",
    "start": "451950",
    "end": "457710"
  },
  {
    "text": "one you use square and multiply and if it's a zero you just use square so the",
    "start": "457710",
    "end": "464430"
  },
  {
    "text": "implementation is quite forward and you do this for every bit in your key and as",
    "start": "464430",
    "end": "470340"
  },
  {
    "text": "you can see the multiplier operation corresponds with the one in the key and if by any chance you can possible",
    "start": "470340",
    "end": "478020"
  },
  {
    "text": "monitor whenever the multiply operation is caught you can directly infer when a",
    "start": "478020",
    "end": "483720"
  },
  {
    "text": "one bit has been set in the key and therefore you can find out what the key is",
    "start": "483720",
    "end": "489110"
  },
  {
    "text": "so you do this for every bit but with bitcoins we use elliptic curves",
    "start": "489110",
    "end": "495930"
  },
  {
    "start": "492000",
    "end": "538000"
  },
  {
    "text": "so if we use ECDSA to sign our transactions and it's quite similar but",
    "start": "495930",
    "end": "503100"
  },
  {
    "text": "we use point multiplication instead of the RSA exponentiation and when we want",
    "start": "503100",
    "end": "508980"
  },
  {
    "text": "to implement that we use mm net instead of square and multiply or the constant",
    "start": "508980",
    "end": "514169"
  },
  {
    "text": "time montgomery letter which is nice because it protects us against timing citations and also our side channels",
    "start": "514170",
    "end": "522430"
  },
  {
    "text": "but what you have to keep in mind that both algorithms use secret dependent",
    "start": "522430",
    "end": "528580"
  },
  {
    "text": "memory accesses so they access some memory locations dependent on the key",
    "start": "528580",
    "end": "534790"
  },
  {
    "text": "and why this is important we see in a second because for instance we have",
    "start": "534790",
    "end": "541000"
  },
  {
    "start": "538000",
    "end": "615000"
  },
  {
    "text": "so-called cache attacks like the primal probe attack and cache attacks exploits",
    "start": "541000",
    "end": "546970"
  },
  {
    "text": "timing differences depending on whether data has been loaded into the cache so",
    "start": "546970",
    "end": "552190"
  },
  {
    "text": "the timing access to this data is fast or we have a cache miss where the data has not been in the cache so we have to",
    "start": "552190",
    "end": "559300"
  },
  {
    "text": "load it from the memory and the timing access is slow so priming probe can be",
    "start": "559300",
    "end": "566470"
  },
  {
    "text": "used to monitor memory accesses and this corresponds to what we want if we want",
    "start": "566470",
    "end": "572440"
  },
  {
    "text": "to attack like the signature creation where we have those secret dependent memory accesses so maybe we can use",
    "start": "572440",
    "end": "578830"
  },
  {
    "text": "priming probe to find out the key and what is important that the prime",
    "start": "578830",
    "end": "584770"
  },
  {
    "text": "improper tech only attacks a part of the CPU cache namely a cache set which we",
    "start": "584770",
    "end": "591580"
  },
  {
    "text": "will see in a second where we illustrate how the attack is working what's nice",
    "start": "591580",
    "end": "596800"
  },
  {
    "text": "about the attack that it also works across CPU cores so we do not care if",
    "start": "596800",
    "end": "602110"
  },
  {
    "text": "one application is running on the first core and the target application is running on the other core because we can",
    "start": "602110",
    "end": "608140"
  },
  {
    "text": "still apply the attack because on Intel the last level cache is shared among all",
    "start": "608140",
    "end": "613600"
  },
  {
    "text": "costs so how does Prime and Rope work on the left you see the address space of",
    "start": "613600",
    "end": "620560"
  },
  {
    "start": "615000",
    "end": "699000"
  },
  {
    "text": "the attacker on the right of the victim and in the middle you see the cache so",
    "start": "620560",
    "end": "625990"
  },
  {
    "text": "the first step what the attacker is doing it just loads addresses that he owns into the cache filling up one",
    "start": "625990",
    "end": "633310"
  },
  {
    "text": "entire cache set so every data that is in the cache set belongs to the attacker",
    "start": "633310",
    "end": "639510"
  },
  {
    "text": "now the attacker schedules the victim the victim maybe decides on depending",
    "start": "639510",
    "end": "646150"
  },
  {
    "text": "what he is doing to load an address that maps to the same cache set and therefore",
    "start": "646150",
    "end": "652300"
  },
  {
    "text": "loading data into the cache and evicting data out of the cash that belongs to the",
    "start": "652300",
    "end": "657730"
  },
  {
    "text": "attacker and in that case this happens two times so the cash that is not filled",
    "start": "657730",
    "end": "663310"
  },
  {
    "text": "anymore with data belonging to the attacker but also data belonging to the victim what you take can now can do he",
    "start": "663310",
    "end": "671230"
  },
  {
    "text": "can broke if his own dater is still in the cash but just measuring how long it takes to access those addresses and as",
    "start": "671230",
    "end": "678850"
  },
  {
    "text": "we can see the first block is still in the cache so the address loading is very",
    "start": "678850",
    "end": "685300"
  },
  {
    "text": "fast but for the second block it has been evicted by the victim so the memory access is slow and therefore we have a",
    "start": "685300",
    "end": "692260"
  },
  {
    "text": "time difference where we can deduce if something has been accessed and loaded into the cache by the victim so we can",
    "start": "692260",
    "end": "701410"
  },
  {
    "start": "699000",
    "end": "788000"
  },
  {
    "text": "combine this to attack how does this work okay so we have this algorithm with",
    "start": "701410",
    "end": "707950"
  },
  {
    "text": "secret dependent memory accesses and then we have an attack that detects memory accesses so we want to combine",
    "start": "707950",
    "end": "715150"
  },
  {
    "text": "itself somehow we have our victim that has set before uses SGX to protect the",
    "start": "715150",
    "end": "722020"
  },
  {
    "text": "private key and all the signature we of course need some API to interact with",
    "start": "722020",
    "end": "727240"
  },
  {
    "text": "this secure end cave with our wallet API there and on the other side we have the",
    "start": "727240",
    "end": "733630"
  },
  {
    "text": "attacker and the attacker wants to also leverage intellect X to stay stealthy",
    "start": "733630",
    "end": "739660"
  },
  {
    "text": "because it's also the attacker can use sjx to get protection from anything else",
    "start": "739660",
    "end": "744790"
  },
  {
    "text": "so that no antivirus can detect or stop it that's why we want to implement our",
    "start": "744790",
    "end": "751090"
  },
  {
    "text": "key extractor within the s3 xn cave and just have a benign loader that does",
    "start": "751090",
    "end": "757810"
  },
  {
    "text": "nothing else then create the endlave and call the attack function which is inside",
    "start": "757810",
    "end": "763120"
  },
  {
    "text": "the sjx in cave it's only Hardware side they can run in different course we",
    "start": "763120",
    "end": "769420"
  },
  {
    "text": "don't care about that they have their own l1 l2 cache but they have their",
    "start": "769420",
    "end": "775570"
  },
  {
    "text": "shared last level cache which makes it perfectly applicable to mount a brahmin",
    "start": "775570",
    "end": "780700"
  },
  {
    "text": "probotector because I have to share cache and we can wear this on top what you told us you really want to mount a crime",
    "start": "780700",
    "end": "786870"
  },
  {
    "text": "and protect in SJ yes that's not that easy not at all because first you want",
    "start": "786870",
    "end": "793500"
  },
  {
    "start": "788000",
    "end": "846000"
  },
  {
    "text": "to measure if something has been loaded into the cache or not so you need a really high precision timer like a DTSC",
    "start": "793500",
    "end": "799860"
  },
  {
    "text": "but inside SJ x you don't have the timer so you cannot measure with the high precision in addition you do not have",
    "start": "799860",
    "end": "807240"
  },
  {
    "text": "any syscalls that you could use for instance go to craft event interface on linux where you could also get a high",
    "start": "807240",
    "end": "813870"
  },
  {
    "text": "precision timer you don't have syscalls at all how do you want to do that also you do not have any shared memory you do",
    "start": "813870",
    "end": "821550"
  },
  {
    "text": "not have any information about physical addresses that you need to build up the eviction set because it's not that",
    "start": "821550",
    "end": "827190"
  },
  {
    "text": "straightforward to just fill the cache you also do not have any large pages",
    "start": "827190",
    "end": "832290"
  },
  {
    "text": "that you could use to get some information about the physical addresses you have nothing of that okay okay let's",
    "start": "832290",
    "end": "839100"
  },
  {
    "text": "start simple okay if I don't have access to the to the high precision timer I just build my own timer I mean you want",
    "start": "839100",
    "end": "845850"
  },
  {
    "text": "to build the time I mean the timing resolution must be in the order of",
    "start": "845850",
    "end": "852510"
  },
  {
    "start": "846000",
    "end": "885000"
  },
  {
    "text": "cyclists so very very precise how do you want to do that I mean that simple you're learnt programming right I just",
    "start": "852510",
    "end": "859260"
  },
  {
    "text": "start a fret and this fret continuously increment securable variable and the",
    "start": "859260",
    "end": "865260"
  },
  {
    "text": "doses all the time does nothing else and then I can use this global variable as my timestamp because I don't need any",
    "start": "865260",
    "end": "871080"
  },
  {
    "text": "Volkov it's for me it's sufficient to measure tiny differences so it's totally fine if does this doesn't correspond 20",
    "start": "871080",
    "end": "878250"
  },
  {
    "text": "seconds or something I just need something that counts monotonically okay this should work let me try that out so",
    "start": "878250",
    "end": "885990"
  },
  {
    "text": "for our DT you see we have one increment per cycle which is very nice so I",
    "start": "885990",
    "end": "892020"
  },
  {
    "text": "implement your idea with a loop and actually that's not that bad it's",
    "start": "892020",
    "end": "897690"
  },
  {
    "text": "roughly five cycles that it takes to increment once so maybe we can already use them but popula not even close to",
    "start": "897690",
    "end": "905100"
  },
  {
    "text": "RTC but I know assembly I can I can do it better than than my compiler see it is a",
    "start": "905100",
    "end": "912030"
  },
  {
    "text": "lot better that's not okay but okay I get it but I have a",
    "start": "912030",
    "end": "918320"
  },
  {
    "text": "really cool idea instead of incrementing this memory location which has to fetch",
    "start": "918320",
    "end": "923330"
  },
  {
    "text": "it from the memory then increment it put it back to the memory I do something else I use the register increment the",
    "start": "923330",
    "end": "929600"
  },
  {
    "text": "register all the time and then just move the register only to the memory so that don't have to read from the memory and",
    "start": "929600",
    "end": "934610"
  },
  {
    "text": "this should be faster look at that whoa it's even more precise than the",
    "start": "934610",
    "end": "940400"
  },
  {
    "text": "hacker provided timeout by Intel so it's really cool we can we have solved that",
    "start": "940400",
    "end": "945440"
  },
  {
    "text": "problem right yeah apparently so can use that we have a timer but there's only",
    "start": "945440",
    "end": "950660"
  },
  {
    "text": "one out of many problems that you have to solve because as I said the cache set is determined by some bits of the",
    "start": "950660",
    "end": "957590"
  },
  {
    "start": "953000",
    "end": "1021000"
  },
  {
    "text": "physical address and you have no information about that so without any knowledge you cannot build an eviction",
    "start": "957590",
    "end": "963140"
  },
  {
    "text": "set regardless if you have a time or not that that's a good point actually",
    "start": "963140",
    "end": "968320"
  },
  {
    "text": "but I remember something and it was this DRAM side channel attack I pass let all",
    "start": "968320",
    "end": "974570"
  },
  {
    "text": "in 2016 and they reverse engineered how memory actually maps to the physically",
    "start": "974570",
    "end": "981020"
  },
  {
    "text": "DRAM the theme in there and what they found is that we have timing differences",
    "start": "981020",
    "end": "986330"
  },
  {
    "text": "depending on varrick's exactly the memory is in the DRAM and now we have a dimer because if you look at the DRAM in",
    "start": "986330",
    "end": "994310"
  },
  {
    "text": "detail we have it's divided into borders and every time we had a rope border",
    "start": "994310",
    "end": "1002110"
  },
  {
    "text": "you know exactly that's aligned with our pages that the 18 least significant bits",
    "start": "1002110",
    "end": "1008110"
  },
  {
    "text": "are 0 so that's of the physical address so we get at least parts of the physical",
    "start": "1008110",
    "end": "1013240"
  },
  {
    "text": "address which are sufficient because we only need 16 bits of the physical address so I'm sure that if we can find",
    "start": "1013240",
    "end": "1020200"
  },
  {
    "text": "a robot that's fine and if you now look at a physical page a 4 kilobyte page",
    "start": "1020200",
    "end": "1025890"
  },
  {
    "start": "1021000",
    "end": "1053000"
  },
  {
    "text": "that's really divided into different rows in the theorem so we have two rows",
    "start": "1025890",
    "end": "1031060"
  },
  {
    "text": "on the right side 10 different banks and groups and channels and that's really",
    "start": "1031060",
    "end": "1037150"
  },
  {
    "text": "divided into so every part of a 4 kilobyte page maps to different rows in",
    "start": "1037150",
    "end": "1042280"
  },
  {
    "text": "the T Ram and that depends on the on how much theorem you have on the micro architecture of the CPU but",
    "start": "1042280",
    "end": "1049149"
  },
  {
    "text": "we know it for most of them so we can do a nice trick we choose two addresses and",
    "start": "1049149",
    "end": "1055409"
  },
  {
    "start": "1053000",
    "end": "1108000"
  },
  {
    "text": "we choose it with a certain distance so that they both fall in different rows of",
    "start": "1055409",
    "end": "1062049"
  },
  {
    "text": "the DRAM we know the rows as so that's not too hard and we choose a distance so",
    "start": "1062049",
    "end": "1067269"
  },
  {
    "text": "that we go into a different row in the same Bank of the DRAM that we always",
    "start": "1067269",
    "end": "1072970"
  },
  {
    "text": "have that case if a new Row starts at directly to row Bora we get such a",
    "start": "1072970",
    "end": "1078429"
  },
  {
    "text": "conflict there and then we know from a high timing that we at the beginning of a new row and with that we know 18 bits",
    "start": "1078429",
    "end": "1085899"
  },
  {
    "text": "of the physical address and we can just iterate over a memory there match the timing with our now good timer and get",
    "start": "1085899",
    "end": "1094299"
  },
  {
    "text": "timing differences and high timings when we add the raw water and I tried that",
    "start": "1094299",
    "end": "1099309"
  },
  {
    "text": "and you can see it actually works so we have this timing Peaks here but new row",
    "start": "1099309",
    "end": "1104860"
  },
  {
    "text": "starts and at these others I know to visit the address impressive so now to",
    "start": "1104860",
    "end": "1111039"
  },
  {
    "start": "1108000",
    "end": "1150000"
  },
  {
    "text": "sum it up you use the accounting primitive to measure the tearoom accesses then through the different side",
    "start": "1111039",
    "end": "1117039"
  },
  {
    "text": "channels you determine to robot us with the knowledge that for robot us the",
    "start": "1117039",
    "end": "1122379"
  },
  {
    "text": "least significant 18 bits are set to zero you know that the map to the cache sub 0 so you can use that to build the",
    "start": "1122379",
    "end": "1129399"
  },
  {
    "text": "eviction set for the primal proper deck that we explained earlier and then you can just mount the primary over there on",
    "start": "1129399",
    "end": "1135820"
  },
  {
    "text": "the buffer containing the multiplier monitoring whenever you keep it is set to 1 otherwise to 0 and therefore you",
    "start": "1135820",
    "end": "1143049"
  },
  {
    "text": "can get the private key exactly see really easy it sounds nice in theory but does this",
    "start": "1143049",
    "end": "1148869"
  },
  {
    "text": "really work let's look at the results so we actually did that for 40 4096 bit RSA",
    "start": "1148869",
    "end": "1156309"
  },
  {
    "start": "1150000",
    "end": "1219000"
  },
  {
    "text": "private key how with an embed TLS running in an egg cave and attacking",
    "start": "1156309",
    "end": "1161919"
  },
  {
    "text": "that from a different angle and see there's the key yeah easy to see right the noise okay",
    "start": "1161919",
    "end": "1168460"
  },
  {
    "text": "coughs where's the key maybe you should add some some simple pre-processing simple moving average",
    "start": "1168460",
    "end": "1175330"
  },
  {
    "text": "over that gives us already some spikes there and if we look closely at them they",
    "start": "1175330",
    "end": "1182909"
  },
  {
    "text": "really corresponds to the key bits of the private key so we can see a spike",
    "start": "1182909",
    "end": "1188159"
  },
  {
    "text": "there corresponds to a 1 and if you don't have a spike then this is zero the",
    "start": "1188159",
    "end": "1193469"
  },
  {
    "text": "zeros are faster to calculate because we don't have to so many operations so they are not so they are bit smaller than the",
    "start": "1193469",
    "end": "1200309"
  },
  {
    "text": "ones but that's just simple matching the ones in the zeros in there so we can",
    "start": "1200309",
    "end": "1205919"
  },
  {
    "text": "actually extract the private key from the cave you're using the prime and prophetic right yes so you have many",
    "start": "1205919",
    "end": "1212399"
  },
  {
    "text": "cache hits many cache misses we have a performance counter so we can just",
    "start": "1212399",
    "end": "1217499"
  },
  {
    "text": "monitor whenever you mount the attack and it's easily detectable yeah that's a",
    "start": "1217499",
    "end": "1223349"
  },
  {
    "start": "1219000",
    "end": "1258000"
  },
  {
    "text": "few mount brahmin prophetic by the way why when I do that in these checks and gave ok then I have this additional",
    "start": "1223349",
    "end": "1230339"
  },
  {
    "text": "protection where the S checks and give protects me as an attacker and does not",
    "start": "1230339",
    "end": "1235799"
  },
  {
    "text": "allow me it doesn't allow anyone to see the performance counters so if we look at the performance counters showing me",
    "start": "1235799",
    "end": "1242609"
  },
  {
    "text": "the cache hits and misses and I do that inside s checks I can't see anything and this small bars",
    "start": "1242609",
    "end": "1248879"
  },
  {
    "text": "here are just the noise outside the end cave by calling the functions there and the load application the API so",
    "start": "1248879",
    "end": "1255649"
  },
  {
    "text": "perfectly hidden and we do anything",
    "start": "1255649",
    "end": "1261179"
  },
  {
    "start": "1258000",
    "end": "1308000"
  },
  {
    "text": "against of course so we can of course fix that on a source level we can so we",
    "start": "1261179",
    "end": "1268950"
  },
  {
    "text": "have the scatter deck that attack attack our code and if we can change the code then we can also fix stuff there so what",
    "start": "1268950",
    "end": "1276989"
  },
  {
    "text": "we should do what we should have done four years now sad thing is doesn't happen that often is that we have to use",
    "start": "1276989",
    "end": "1283859"
  },
  {
    "text": "side-channel resistant crypto implementations so we have such implementations we can do things for our",
    "start": "1283859",
    "end": "1290700"
  },
  {
    "text": "s our RSA for example if exponent blinding we have pit sliced implementations that do not have secret",
    "start": "1290700",
    "end": "1297839"
  },
  {
    "text": "dependent memory accesses anymore and then I have no chance of attacking your",
    "start": "1297839",
    "end": "1302909"
  },
  {
    "text": "crypto implementation inside the SJ x NK so we really should use that we could of",
    "start": "1302909",
    "end": "1310619"
  },
  {
    "start": "1308000",
    "end": "1400000"
  },
  {
    "text": "course do everything on the operating system but before that you said that we do not",
    "start": "1310619",
    "end": "1315800"
  },
  {
    "text": "trust the operating system that's of course right so that would weaken our fred model because sjx assumes that we",
    "start": "1315800",
    "end": "1322700"
  },
  {
    "text": "do not trust the operating system still we could add some countermeasures to the",
    "start": "1322700",
    "end": "1327740"
  },
  {
    "text": "operating system like given them an API to inspect the code or enable certain",
    "start": "1327740",
    "end": "1333380"
  },
  {
    "text": "performance counters for last level cache hits and misses so the operating system can at least detect that",
    "start": "1333380",
    "end": "1339770"
  },
  {
    "text": "something is going on not exactly what but that something is odd we can implement a flight implement stuff like",
    "start": "1339770",
    "end": "1346670"
  },
  {
    "text": "enclaved coloring prevent cross nkf attack which means every end cave that",
    "start": "1346670",
    "end": "1352400"
  },
  {
    "text": "is started gets different part of the cache with different cache sets and if you don't have the same cache set in the",
    "start": "1352400",
    "end": "1358490"
  },
  {
    "text": "last level cache then we simply cannot mount a primate probe attack so that",
    "start": "1358490",
    "end": "1363500"
  },
  {
    "text": "prevents any attack cross an cave meaning is an attacker cannot use a SJ x",
    "start": "1363500",
    "end": "1369590"
  },
  {
    "text": "NK to stealthily mount this brahmin probe attack and I can only do it from",
    "start": "1369590",
    "end": "1376010"
  },
  {
    "text": "the outside and it's easier to detect so we could do that we could also add some randomization as we do all the time",
    "start": "1376010",
    "end": "1382130"
  },
  {
    "text": "everywhere to make addicts harder like a heap randomization then my multiplier would be all the time somewhere else",
    "start": "1382130",
    "end": "1390160"
  },
  {
    "text": "that doesn't solve anything but it makes it harder for an attacker because it's not that predictable where",
    "start": "1390160",
    "end": "1396980"
  },
  {
    "text": "he has to attack and it makes attacks a lot harder but sure that weakens the rustman the trust model",
    "start": "1396980",
    "end": "1402860"
  },
  {
    "start": "1400000",
    "end": "1501000"
  },
  {
    "text": "so finally we should get rid of that in hardware so we can't do that insulin has",
    "start": "1402860",
    "end": "1409190"
  },
  {
    "text": "to do that until could add things to s3x for example there's already this cache",
    "start": "1409190",
    "end": "1416809"
  },
  {
    "text": "allocation technology that participates the cache so that different applications",
    "start": "1416809",
    "end": "1422059"
  },
  {
    "text": "cannot influence each other in the cache and that could be combined with s X so",
    "start": "1422059",
    "end": "1429320"
  },
  {
    "text": "that if we enter n cave it automatically partitions the cache and every N cave",
    "start": "1429320",
    "end": "1434990"
  },
  {
    "text": "gets a different part and no application can access this part of the last last",
    "start": "1434990",
    "end": "1440090"
  },
  {
    "text": "level cache because only for the N cave and then the anguish is complete",
    "start": "1440090",
    "end": "1446060"
  },
  {
    "text": "isolated in the cash and no one can mount a prime and Robotech on the cash",
    "start": "1446060",
    "end": "1451160"
  },
  {
    "text": "right now that's only controllable by the operating system but that could be",
    "start": "1451160",
    "end": "1456230"
  },
  {
    "text": "combined with sjx in hardware we could also have some form of secure memory",
    "start": "1456230",
    "end": "1462950"
  },
  {
    "text": "element like providing a small memory element that's not yet it's never",
    "start": "1462950",
    "end": "1468200"
  },
  {
    "text": "cacheable just for certain operations inside the in cave like signing operations encryption operations so it's",
    "start": "1468200",
    "end": "1475970"
  },
  {
    "text": "not shared with the insecure world and then we cannot attack that because we",
    "start": "1475970",
    "end": "1482990"
  },
  {
    "text": "don't have existed in that must be must be of course also mutually exclusive to one end cave otherwise we again get this",
    "start": "1482990",
    "end": "1490220"
  },
  {
    "text": "gross cross and Cave attacks so there are some of the things we could do to",
    "start": "1490220",
    "end": "1496250"
  },
  {
    "text": "prevent such attacks to not lose our Bitcoin private key true so you cannot",
    "start": "1496250",
    "end": "1502640"
  },
  {
    "start": "1501000",
    "end": "1545000"
  },
  {
    "text": "steal my bitcoins anymore but we have another nice attack that we want to show you where we exploit non sidechain bus",
    "start": "1502640",
    "end": "1509780"
  },
  {
    "text": "but we utilize sizegenetics to actually exploit them so imagine a scenario where",
    "start": "1509780",
    "end": "1516710"
  },
  {
    "text": "we now have sidechain resistant crypto so you cannot attack it anymore you cannot steal my bitcoins anymore",
    "start": "1516710",
    "end": "1522530"
  },
  {
    "text": "which is nice for me because they are mine and we put everything inside the",
    "start": "1522530",
    "end": "1527870"
  },
  {
    "text": "English and as you said we do not have any source code the binary is encrypted from the enclaves so we cannot inspect",
    "start": "1527870",
    "end": "1534560"
  },
  {
    "text": "it from the outside so it's basically a black box that has an Mei that we can",
    "start": "1534560",
    "end": "1540020"
  },
  {
    "text": "talk to and that's it and for instance what you could do in that scenario would",
    "start": "1540020",
    "end": "1545360"
  },
  {
    "start": "1545000",
    "end": "1615000"
  },
  {
    "text": "be a simple DRM video player because if you buy a video you should only be able",
    "start": "1545360",
    "end": "1551510"
  },
  {
    "text": "to watch it like once or twice or in a certain time period because otherwise you have to pay another time so I can",
    "start": "1551510",
    "end": "1559010"
  },
  {
    "text": "earn more money if you want to watch my video which is the classical digital rights management scenario where sex is",
    "start": "1559010",
    "end": "1566720"
  },
  {
    "text": "also useful to implement things like that so we have an encrypted video file",
    "start": "1566720",
    "end": "1572090"
  },
  {
    "text": "with a signed header so you can obtain put the file the header contains ability period",
    "start": "1572090",
    "end": "1579170"
  },
  {
    "text": "which states when you allow to watch the fine so you can only watch it for one week for instance after you bought it",
    "start": "1579170",
    "end": "1585020"
  },
  {
    "text": "and the video player checks whether the current time is within this period otherwise it would not allow you to play",
    "start": "1585020",
    "end": "1592190"
  },
  {
    "text": "it and also if the signature is valid because if you have modified the file it would also not play the video so we have",
    "start": "1592190",
    "end": "1598640"
  },
  {
    "text": "a nice secure AM video player it will play the file even using impulse",
    "start": "1598640",
    "end": "1604340"
  },
  {
    "text": "protected audio video path so you cannot just record the video and then what",
    "start": "1604340",
    "end": "1609380"
  },
  {
    "text": "should again because it just use the screen recorder you cannot use that because of that technology yeah right I",
    "start": "1609380",
    "end": "1616370"
  },
  {
    "start": "1615000",
    "end": "1648000"
  },
  {
    "text": "really do not like your M so yeah I want I know I stole your bitcoins and that",
    "start": "1616370",
    "end": "1623690"
  },
  {
    "text": "you thought you protected and I want to keep my stone bitcoins so I don't want to pay for the same movie over and over",
    "start": "1623690",
    "end": "1630860"
  },
  {
    "text": "if I want to watch it again so I really don't like you're good you're in DRM play and scheme so I want to break that",
    "start": "1630860",
    "end": "1638450"
  },
  {
    "text": "yeah okay so this time it won't be a cash it back on Krypton yes it's a",
    "start": "1638450",
    "end": "1644480"
  },
  {
    "text": "resistant crypt in there yeah so let's take a look at our code we have a simple",
    "start": "1644480",
    "end": "1649670"
  },
  {
    "text": "function which gets DTM file as a parameter which is our protected video",
    "start": "1649670",
    "end": "1654800"
  },
  {
    "text": "and then the first thing that we do we check the signature so whenever you tamper with the file we detect that we",
    "start": "1654800",
    "end": "1662030"
  },
  {
    "text": "return and you are not able to watch the video because this is what we want the second check that we do is we check if",
    "start": "1662030",
    "end": "1669260"
  },
  {
    "text": "the file has expired in the mean time so we get a secure timestamp and when it's",
    "start": "1669260",
    "end": "1674870"
  },
  {
    "text": "one week after you put it you're not allowed to watch it anymore so we have a second sanity check which is working and",
    "start": "1674870",
    "end": "1681920"
  },
  {
    "text": "we detect that and in the end if everything is fine if you fought for it",
    "start": "1681920",
    "end": "1687320"
  },
  {
    "text": "if you haven't temper the video file you can actually watch it so this is what we wanted to do in the first place",
    "start": "1687320",
    "end": "1694030"
  },
  {
    "start": "1694000",
    "end": "1730000"
  },
  {
    "text": "but although the code looks correct right no I haven't seen any part in",
    "start": "1694030",
    "end": "1699920"
  },
  {
    "text": "there so that but there's a problem there because as Schenk's English can",
    "start": "1699920",
    "end": "1706310"
  },
  {
    "text": "access knowledge life memory because this is convenient and therefore",
    "start": "1706310",
    "end": "1711770"
  },
  {
    "text": "memories of between the new life and the load of and this can create race conditions do we",
    "start": "1711770",
    "end": "1719320"
  },
  {
    "text": "have any idea why this could be a problem oh now I see it that's something there's a problem with our code because",
    "start": "1719320",
    "end": "1725950"
  },
  {
    "text": "now we also have my teeth reading right you can run things in parallel so if we",
    "start": "1725950",
    "end": "1731680"
  },
  {
    "text": "go back at the code I see we have this this year my which is the Nash object--",
    "start": "1731680",
    "end": "1737950"
  },
  {
    "text": "because we don't want to copy everything in there we just provide the point as we see and it is a shared memory object and",
    "start": "1737950",
    "end": "1744850"
  },
  {
    "text": "then we access the shared memory to check the signature and afterwards we",
    "start": "1744850",
    "end": "1751030"
  },
  {
    "text": "access again to check whether it's still valid but in the meantime I could in",
    "start": "1751030",
    "end": "1756910"
  },
  {
    "text": "parallel change the headers and make it about it so the signature check was okay",
    "start": "1756910",
    "end": "1762700"
  },
  {
    "text": "and then I change the headers and then the signature is never checked again and the validity period yeah miss then",
    "start": "1762700",
    "end": "1769750"
  },
  {
    "start": "1769000",
    "end": "1806000"
  },
  {
    "text": "fetched afterwards we have a time of checked a time of you Spock we check something before then and reuse it",
    "start": "1769750",
    "end": "1775120"
  },
  {
    "text": "afterwards and we expect it not to change in the meantime so after the signature check we can do anything with",
    "start": "1775120",
    "end": "1782080"
  },
  {
    "text": "the header that we wanted to do and this allows us to set an arbitrary validity",
    "start": "1782080",
    "end": "1788320"
  },
  {
    "text": "period because we can just change that in the header which is only signed and because we access the memory twice we",
    "start": "1788320",
    "end": "1795970"
  },
  {
    "text": "fetch something twice from the memory we also called host box double fetch box",
    "start": "1795970",
    "end": "1801480"
  },
  {
    "text": "because we fetch it twice the same data from the memory but we cheated right I",
    "start": "1801480",
    "end": "1809740"
  },
  {
    "start": "1806000",
    "end": "1853000"
  },
  {
    "text": "mean if we have the code it's really easy to see if we know this kind of Park then we can see that so that's this",
    "start": "1809740",
    "end": "1817240"
  },
  {
    "text": "really cheating because you said we don't have the code we don't have the binary so we cannot analyze it for such",
    "start": "1817240",
    "end": "1823810"
  },
  {
    "text": "facts so that still like security by obscurity righteousness kind of fine I",
    "start": "1823810",
    "end": "1829810"
  },
  {
    "text": "get what you're saying but you're not entirely correct because as we've seen memory accesses are visible in the cache",
    "start": "1829810",
    "end": "1837190"
  },
  {
    "text": "so also if you run your code it will access memory of course and those accesses can be visible in the cache so",
    "start": "1837190",
    "end": "1843940"
  },
  {
    "text": "what we can do we can again use a cache attack to observe those memory accesses and therefore the deck if a double fetch",
    "start": "1843940",
    "end": "1851230"
  },
  {
    "text": "back has occurred a lot and this time we even have shared memory which makes",
    "start": "1851230",
    "end": "1857200"
  },
  {
    "start": "1853000",
    "end": "1923000"
  },
  {
    "text": "everything easier so we do not have to use crime and probe the prime and pro protect where we have to build our",
    "start": "1857200",
    "end": "1862450"
  },
  {
    "text": "eviction set and have to have so much knowledge we can make use of the shared",
    "start": "1862450",
    "end": "1867670"
  },
  {
    "text": "memory and what we can do is the so called flush and reload attack so we constantly flush the address that you",
    "start": "1867670",
    "end": "1875110"
  },
  {
    "text": "are changing from the cache using the CL flash instruction which is an",
    "start": "1875110",
    "end": "1880270"
  },
  {
    "text": "unprivileged x86 instruction which just removes one address from the cache so it",
    "start": "1880270",
    "end": "1886510"
  },
  {
    "text": "won't be in the cache the next time someone accessible then we just schedule",
    "start": "1886510",
    "end": "1891760"
  },
  {
    "text": "the victim the victim may access the address loading the data back into the cache or just do not access the data",
    "start": "1891760",
    "end": "1898510"
  },
  {
    "text": "then it won't be in the cache and the next time we measure the excess time we can indeed distinguish if the data has",
    "start": "1898510",
    "end": "1906160"
  },
  {
    "text": "been loaded to the cache or not and therefore if the victim also has accessed the data so if the excess is",
    "start": "1906160",
    "end": "1913930"
  },
  {
    "text": "fast the victim has access to data we can see this in our trace and we know if it has",
    "start": "1913930",
    "end": "1921070"
  },
  {
    "text": "been accessed a second time that we have a double fetch pocket so if we look at a simple plot from such an experiment it's",
    "start": "1921070",
    "end": "1927550"
  },
  {
    "text": "easily visible the point of time where the victim process has access to Tator",
    "start": "1927550",
    "end": "1933880"
  },
  {
    "text": "in the scenario of our video player where the data has been accessed twice",
    "start": "1933880",
    "end": "1940210"
  },
  {
    "text": "we can also see that in the trace so we have those two distinct spikes telling",
    "start": "1940210",
    "end": "1945880"
  },
  {
    "text": "us that the video player has access the data twice and that this might be a",
    "start": "1945880",
    "end": "1950950"
  },
  {
    "text": "problem so we see the first axis and the second axis so cached X also allows us",
    "start": "1950950",
    "end": "1958630"
  },
  {
    "start": "1954000",
    "end": "2159000"
  },
  {
    "text": "to dynamically detect double fetch box in black boxes so for instance in an",
    "start": "1958630",
    "end": "1964030"
  },
  {
    "text": "average X in play or in trust zone trust let what we do not have the code where the binary is",
    "start": "1964030",
    "end": "1970470"
  },
  {
    "text": "encrypted and where we just can use this solution to detect a double Fishbach so",
    "start": "1970470",
    "end": "1978660"
  },
  {
    "text": "how reliable is that yeah the thing is the further apart those memory accesses",
    "start": "1978660",
    "end": "1984180"
  },
  {
    "text": "are the higher the probability of course because our attack code also needs to",
    "start": "1984180",
    "end": "1989340"
  },
  {
    "text": "execute some instructions and the minimum time that we've measured is around 600 cycles that those memory",
    "start": "1989340",
    "end": "1997110"
  },
  {
    "text": "accesses need to be a part so that we can detect it using the flash and reload side channel so I'm not I'm not good in",
    "start": "1997110",
    "end": "2004010"
  },
  {
    "text": "psychics as in units of can you give me an estimate how long is 600 cycle this is only a few memory accesses so that's",
    "start": "2004010",
    "end": "2010970"
  },
  {
    "text": "not a lot okay so one memory axis is like 200 cycles so exactly so about three memory accesses and if the time",
    "start": "2010970",
    "end": "2019160"
  },
  {
    "text": "between those exercises is more than 3000 cycles which is also not a lot if",
    "start": "2019160",
    "end": "2024560"
  },
  {
    "text": "we have seen the code where it does some computation we have a detection rate that is very close to 100% so we can say",
    "start": "2024560",
    "end": "2032330"
  },
  {
    "text": "for sure if there has been a double fetch or not and using this we have an",
    "start": "2032330",
    "end": "2038930"
  },
  {
    "text": "automatic solution to detect these double fetch facts in many many scenarios okay so that",
    "start": "2038930",
    "end": "2045440"
  },
  {
    "text": "means we have this nice we can again use a side channel we can again use the cache so powerful microarchitecture",
    "start": "2045440",
    "end": "2052100"
  },
  {
    "text": "element to detect double fetches in any black box anywhere we don't have access to the code or to the binary which is",
    "start": "2052100",
    "end": "2059419"
  },
  {
    "text": "nice but I'm more the kind of guy that tries to destroy things and to make them",
    "start": "2059419",
    "end": "2065540"
  },
  {
    "text": "more secure so I like the detecting stuff but I also want to exploit it can",
    "start": "2065540",
    "end": "2071120"
  },
  {
    "text": "we can we exploit that I mean that I want to exploit that not that easy I mean you need to change the value in",
    "start": "2071120",
    "end": "2077148"
  },
  {
    "text": "this small time window that we have otherwise you cannot exploit it which would break my video player and when we",
    "start": "2077149",
    "end": "2084888"
  },
  {
    "text": "take a look at state-of-the-art exploitation what they do is they just flip the value constantly all the time",
    "start": "2084889",
    "end": "2091128"
  },
  {
    "text": "and hope that they hit the time frame so that they can really exploit that and this has a very very low",
    "start": "2091129",
    "end": "2097700"
  },
  {
    "text": "ability so the chances that you can exploit it are not were behind but I have an idea we just need a trigger we",
    "start": "2097700",
    "end": "2105890"
  },
  {
    "text": "just need some way to to detect when the first axis was as a trigger right now",
    "start": "2105890",
    "end": "2113839"
  },
  {
    "text": "this could help and you said detection is easy because we can see it in the cache so why not use the cache",
    "start": "2113839",
    "end": "2120470"
  },
  {
    "text": "side-channel as a trigger because we can already detect all the memory accesses in the cache and if we know when the",
    "start": "2120470",
    "end": "2128000"
  },
  {
    "text": "first axis was then we also know when we have to change our values right we",
    "start": "2128000",
    "end": "2135050"
  },
  {
    "text": "detect the first axis we do not even care about the second axis so it's even better than the detection we really",
    "start": "2135050",
    "end": "2140990"
  },
  {
    "text": "don't care how far the two accesses are part we only need to detect the first one and if we see the first one we",
    "start": "2140990",
    "end": "2148099"
  },
  {
    "text": "simply change the value afterwards to the value we want to have because after first access we know the sanity check is",
    "start": "2148099",
    "end": "2154160"
  },
  {
    "text": "done and we can change our value to something we want to have in there and",
    "start": "2154160",
    "end": "2159190"
  },
  {
    "text": "if we look at that in the trace so we see the detection and we have the first",
    "start": "2159190",
    "end": "2164690"
  },
  {
    "text": "access and then we have this time window onto the until the second access but we perfectly get a trigger signal on the",
    "start": "2164690",
    "end": "2170630"
  },
  {
    "text": "first access so we just modify the value in there gives us enough time to do that",
    "start": "2170630",
    "end": "2176510"
  },
  {
    "text": "and set it to any value we want to have any validity period and then on the",
    "start": "2176510",
    "end": "2181880"
  },
  {
    "text": "second access of your erm player it already works with the wrong value the",
    "start": "2181880",
    "end": "2188690"
  },
  {
    "text": "value I have provided so so this again sounds very nice in theory I actually",
    "start": "2188690",
    "end": "2196160"
  },
  {
    "text": "brought the video player with me so can you really exploit that I hope so",
    "start": "2196160",
    "end": "2202150"
  },
  {
    "start": "2197000",
    "end": "2407000"
  },
  {
    "text": "so let's look at that so I have the",
    "start": "2202150",
    "end": "2210589"
  },
  {
    "text": "video player code in here and I already prepared the attack code because I don't",
    "start": "2210589",
    "end": "2215780"
  },
  {
    "text": "have that much time and I just commented in and what we see here is that we have",
    "start": "2215780",
    "end": "2221329"
  },
  {
    "text": "this ankov call to play the file and we want to attack this header field this bill well it too",
    "start": "2221329",
    "end": "2227770"
  },
  {
    "text": "and we just want to set it to a different well it's to our period",
    "start": "2227770",
    "end": "2233350"
  },
  {
    "text": "afterwards so first you need to show yep let me show if the players working as expected when you're not running yet yes",
    "start": "2233350",
    "end": "2239710"
  },
  {
    "text": "first let me show that the player does something so let's first start the",
    "start": "2239710",
    "end": "2251920"
  },
  {
    "text": "player with something okay start the player with some demo",
    "start": "2251920",
    "end": "2261940"
  },
  {
    "text": "video and it says okay I can watch this on till 2020 so you've bought it I",
    "start": "2261940",
    "end": "2268480"
  },
  {
    "text": "bought it yeah and oh no it's something wrong screen and I can actually see some",
    "start": "2268480",
    "end": "2274990"
  },
  {
    "text": "video playing okay that's fine so the play is actually working and then I have one video a part that I wanted to",
    "start": "2274990",
    "end": "2281530"
  },
  {
    "text": "watch that's movie and so no one find has expired oh she saw I didn't pay for",
    "start": "2281530",
    "end": "2289780"
  },
  {
    "text": "it okay but as I still want to watch it so I comment in my tech code so until",
    "start": "2289780",
    "end": "2299619"
  },
  {
    "text": "when should we make it playable any favorite year in the audience that's in",
    "start": "2299619",
    "end": "2304990"
  },
  {
    "text": "the future you can say anything okay",
    "start": "2304990",
    "end": "2311619"
  },
  {
    "text": "figure out I hope to see library accept state that's fine future okay then",
    "start": "2311619",
    "end": "2318820"
  },
  {
    "text": "should be ready done today yes field I wasn't then what we simply do I start my attack function that creates another",
    "start": "2318820",
    "end": "2326320"
  },
  {
    "text": "threat does the multi-threading part in this red I have to flash it reload that I access the trigger and if it finds the",
    "start": "2326320",
    "end": "2333940"
  },
  {
    "text": "first axis then it changes divided you to the one that we want to have so let's",
    "start": "2333940",
    "end": "2342040"
  },
  {
    "text": "rebuild layer we don't change anything in the N key if we don't have access to ink if just the functions outside and",
    "start": "2342040",
    "end": "2348040"
  },
  {
    "text": "then I want to play the movie",
    "start": "2348040",
    "end": "2352950"
  },
  {
    "text": "on screen and it says well it until",
    "start": "2354860",
    "end": "2365720"
  },
  {
    "text": "January 3000 somewhere a long time to watch this movie and we can say play and",
    "start": "2365720",
    "end": "2374200"
  },
  {
    "text": "we can actually watch this movie and we have defeated this DRM protection that",
    "start": "2374200",
    "end": "2380450"
  },
  {
    "text": "you have implemented there so this actually works really reliable with the",
    "start": "2380450",
    "end": "2385820"
  },
  {
    "text": "double fetch detection and then exploitation here and we have this video",
    "start": "2385820",
    "end": "2390950"
  },
  {
    "text": "running which we should not be able to you so it does work what we proposed",
    "start": "2390950",
    "end": "2399850"
  },
  {
    "text": "perfect true so how can we prevent that because we do not want to end with my",
    "start": "2399850",
    "end": "2405530"
  },
  {
    "text": "broken video plays so double fetches itself are not bad because sometimes",
    "start": "2405530",
    "end": "2413000"
  },
  {
    "start": "2407000",
    "end": "2490000"
  },
  {
    "text": "they are necessary sometimes you need to code it in a way that you have double fetches the only problem that you have",
    "start": "2413000",
    "end": "2418580"
  },
  {
    "text": "is when you change the value and this leads to an actually exploit where you",
    "start": "2418580",
    "end": "2423680"
  },
  {
    "text": "can do something like with the video player where you're then allowed to watch the video even if your would have",
    "start": "2423680",
    "end": "2429950"
  },
  {
    "text": "not been otherwise so we have a problem there and nowadays we even have",
    "start": "2429950",
    "end": "2435260"
  },
  {
    "text": "frameworks that allow us to exploit such race conditions in a very very good way",
    "start": "2435260",
    "end": "2440660"
  },
  {
    "text": "and with the cash trigger that we've just seen they also get very reliable so",
    "start": "2440660",
    "end": "2446870"
  },
  {
    "text": "we as we have seen in the demo it worked right away so but I have an idea how we",
    "start": "2446870",
    "end": "2452750"
  },
  {
    "text": "could fix that okay so the problem was I mean we have this time in between to",
    "start": "2452750",
    "end": "2459470"
  },
  {
    "text": "change the value but we can't just ensure that both the defects we leave",
    "start": "2459470",
    "end": "2465290"
  },
  {
    "text": "the doubles matches in there which has to ensure that both accesses are atomic so they appear as one I mean you have so",
    "start": "2465290",
    "end": "2472490"
  },
  {
    "text": "many instructions in between yeah I know that'll just be maybe that doesn't work",
    "start": "2472490",
    "end": "2477800"
  },
  {
    "text": "on the CPU CPU architectures we have right now because yeah of course we can only do that some certain things in",
    "start": "2477800",
    "end": "2483680"
  },
  {
    "text": "parallel we can't make them exactly at the same time so they cannot be really atomic but",
    "start": "2483680",
    "end": "2490610"
  },
  {
    "start": "2490000",
    "end": "2537000"
  },
  {
    "text": "maybe it's enough if they look atomic so from an attackers perspective so they",
    "start": "2490610",
    "end": "2497280"
  },
  {
    "text": "are not atomic of course not so we have to fetch one once do something fetch again so that cannot be one operation we",
    "start": "2497280",
    "end": "2504119"
  },
  {
    "text": "just can't do that in our cpu architecture but we can we want to make them look atomic so that even though",
    "start": "2504119",
    "end": "2510480"
  },
  {
    "text": "they are not atomic the attacker thinks they're atomic because the attacker cannot see any time window in between",
    "start": "2510480",
    "end": "2518010"
  },
  {
    "text": "that I can only sees one operation actually the idea is very good and as",
    "start": "2518010",
    "end": "2523200"
  },
  {
    "text": "you maybe know we have such mechanisms already in modern interest abuse we have",
    "start": "2523200",
    "end": "2528780"
  },
  {
    "text": "include tsx which provides exactly this functionality that accesses a",
    "start": "2528780",
    "end": "2534240"
  },
  {
    "text": "peer-to-peer atomic in hardware and the idea is that in t FX is an",
    "start": "2534240",
    "end": "2540990"
  },
  {
    "start": "2537000",
    "end": "2578000"
  },
  {
    "text": "implementation of Hardware transactional memory that you might know from databases so we ensure that multiple",
    "start": "2540990",
    "end": "2548280"
  },
  {
    "text": "reads and writes are atomic and we just wrapped all those operations that we",
    "start": "2548280",
    "end": "2553680"
  },
  {
    "text": "want to be appearing atomic in one transaction and if something conflicts",
    "start": "2553680",
    "end": "2559470"
  },
  {
    "text": "we just roll back to the previous state so nothing has actually changed we can detect that and therefore if no conflict",
    "start": "2559470",
    "end": "2567300"
  },
  {
    "text": "has occurred everything is fine everything appeared atomic and we're good and by coincidence this is implemented",
    "start": "2567300",
    "end": "2575520"
  },
  {
    "text": "using the cache so how does this work we",
    "start": "2575520",
    "end": "2580740"
  },
  {
    "start": "2578000",
    "end": "2683000"
  },
  {
    "text": "have to catch in the middle again on the left fret 0 on the right of thread 1 and",
    "start": "2580740",
    "end": "2586160"
  },
  {
    "text": "fret 0 uses X begin to begin such a transaction then it will execute some",
    "start": "2586160",
    "end": "2592920"
  },
  {
    "text": "instructions and end the transaction with X and if this completes everything",
    "start": "2592920",
    "end": "2598619"
  },
  {
    "text": "is fine otherwise deterrence action will depart and we will go to the else path",
    "start": "2598619",
    "end": "2603660"
  },
  {
    "text": "so fret 0 with some data therefore we",
    "start": "2603660",
    "end": "2609270"
  },
  {
    "text": "have read set and also fret 1 reads the same data no values have changed so",
    "start": "2609270",
    "end": "2614940"
  },
  {
    "text": "is to define the second step fret 0 rijalallah theta and Fred 1 actually",
    "start": "2614940",
    "end": "2622230"
  },
  {
    "text": "write something so we're going to update the read set within the read set no",
    "start": "2622230",
    "end": "2628230"
  },
  {
    "text": "values have been changed everything is still fine but now in the third step",
    "start": "2628230",
    "end": "2633810"
  },
  {
    "text": "Fred one write something into the data within the read set which read zero",
    "start": "2633810",
    "end": "2639750"
  },
  {
    "text": "tries to read so actually Fred one modify the value in therefore we acquire the transaction you",
    "start": "2639750",
    "end": "2648450"
  },
  {
    "text": "might have noticed something now actually what we see in this example is a typical double fetch bar where we have",
    "start": "2648450",
    "end": "2656310"
  },
  {
    "text": "the first access to the value then the other Fred modifies the value and then",
    "start": "2656310",
    "end": "2662490"
  },
  {
    "text": "we have the second access where we reused at them so exactly at the back that we've seen earlier but this time",
    "start": "2662490",
    "end": "2669300"
  },
  {
    "text": "the transactional costs and therefore we can detect that and do not continue the",
    "start": "2669300",
    "end": "2674819"
  },
  {
    "text": "rest of our application so we still do not do that by playing the video as we've detected your attack okay so we",
    "start": "2674819",
    "end": "2685500"
  },
  {
    "start": "2683000",
    "end": "2744000"
  },
  {
    "text": "can now detect it and that works really reliable because it's implemented in hardware so have a feature that we can",
    "start": "2685500",
    "end": "2691440"
  },
  {
    "text": "use and so we we also created a small library of that called drop it that",
    "start": "2691440",
    "end": "2698220"
  },
  {
    "text": "prevents such exploitation of double fetch parks using TSX you also have it",
    "start": "2698220",
    "end": "2705300"
  },
  {
    "text": "open source you can try it out it's especially useful in nest egg scenario that we only have small code bases where",
    "start": "2705300",
    "end": "2715230"
  },
  {
    "text": "we want to actually protect them from any exploitation so we can just wrap it with this library it's really easy to",
    "start": "2715230",
    "end": "2722099"
  },
  {
    "text": "use in the easiest case we only have three additional lines of codes that are",
    "start": "2722099",
    "end": "2727410"
  },
  {
    "text": "sufficient to protect any type of fetch from being exploited and we can apply",
    "start": "2727410",
    "end": "2732900"
  },
  {
    "text": "that to our code it doesn't only work for for sjx code we also did that in a Linux kernel it also works there to",
    "start": "2732900",
    "end": "2740730"
  },
  {
    "text": "protect everything but let's let's look how easy it is to use it on our code",
    "start": "2740730",
    "end": "2746200"
  },
  {
    "start": "2744000",
    "end": "2808000"
  },
  {
    "text": "if we have this your mplayer with the file we just have some initialization we",
    "start": "2746200",
    "end": "2752110"
  },
  {
    "text": "say okay we're going to retry ten times so if it fails for some other reason which might be the case case because the",
    "start": "2752110",
    "end": "2758530"
  },
  {
    "text": "cache is used a lot by other applications running at the same time then we might want to retry do not have",
    "start": "2758530",
    "end": "2766630"
  },
  {
    "text": "any false positives there and then we just say start the protection and anti protection started before the first",
    "start": "2766630",
    "end": "2773530"
  },
  {
    "text": "fetch and it after the second fetch and everything in between is atomic for any",
    "start": "2773530",
    "end": "2780220"
  },
  {
    "text": "outside attacker any outside viewer and if someone tries to exploit that it will",
    "start": "2780220",
    "end": "2786640"
  },
  {
    "text": "fail more than ten times and then we just go out there and say some something",
    "start": "2786640",
    "end": "2791980"
  },
  {
    "text": "fishy is going on we don't want to continue here and everything is safe so",
    "start": "2791980",
    "end": "2798220"
  },
  {
    "text": "this really is just three additional lines of code that we can add there to",
    "start": "2798220",
    "end": "2803650"
  },
  {
    "text": "make an exploit impossible using this hyper protection so it's really",
    "start": "2803650",
    "end": "2810280"
  },
  {
    "start": "2808000",
    "end": "2888000"
  },
  {
    "text": "efficient and easy if we have this is a complex problem double fetches are",
    "start": "2810280",
    "end": "2816190"
  },
  {
    "text": "really hard to detect they are really hard to fix because they are necessary and then we need complex workarounds",
    "start": "2816190",
    "end": "2825040"
  },
  {
    "text": "retry logic and other and different logics to prevent double fed exploitation but if we have tsx then we",
    "start": "2825040",
    "end": "2832660"
  },
  {
    "text": "have a really easy solution for many double-fudge scenarios to fix them or make them non exploitable it's also fast",
    "start": "2832660",
    "end": "2840040"
  },
  {
    "text": "it's implemented in hardware it's better than any software lock work around our",
    "start": "2840040",
    "end": "2845050"
  },
  {
    "text": "versions if you use traditional locking traditional tsx is approximately 18",
    "start": "2845050",
    "end": "2850780"
  },
  {
    "text": "percent faster than traditional locking so even gives you better performance and better protection of course one of the",
    "start": "2850780",
    "end": "2858850"
  },
  {
    "text": "critics years it's limited to CPUs have to INTRUST abuse and to new Intel CPUs",
    "start": "2858850",
    "end": "2865090"
  },
  {
    "text": "that have that feature because not all of them have but many CPUs that have the",
    "start": "2865090",
    "end": "2872290"
  },
  {
    "text": "SGX extension also have the TS exist extension so we can secure most of our",
    "start": "2872290",
    "end": "2877930"
  },
  {
    "text": "anchor with the teeth with the tsx feature which is really cool makes easy to",
    "start": "2877930",
    "end": "2884599"
  },
  {
    "text": "protect that back from being exploited so in the beginning you stole my",
    "start": "2884599",
    "end": "2891140"
  },
  {
    "start": "2888000",
    "end": "2900000"
  },
  {
    "text": "bitcoins but we fix that then you broke my video player but we also fixed that",
    "start": "2891140",
    "end": "2897020"
  },
  {
    "text": "so what did we learn today what we learned main takeaways side channels can",
    "start": "2897020",
    "end": "2905119"
  },
  {
    "text": "cost you money doesn't matter whether I directly steal your bitcoins or if I do not pay you for watching the video or",
    "start": "2905119",
    "end": "2912290"
  },
  {
    "text": "for whatever reason citations are something you should consider new Fred",
    "start": "2912290",
    "end": "2917750"
  },
  {
    "text": "model they are nowadays not that hard to mount we have many side channels so they",
    "start": "2917750",
    "end": "2923480"
  },
  {
    "text": "can really cost you money because in TECA can use them so it's really",
    "start": "2923480",
    "end": "2929000"
  },
  {
    "start": "2927000",
    "end": "2955000"
  },
  {
    "text": "important that you do not consider side channels out of scope as we have also seen in the beginning of this year side",
    "start": "2929000",
    "end": "2935930"
  },
  {
    "text": "channels are very applicable even in the scenario of SGX and very many other",
    "start": "2935930",
    "end": "2942650"
  },
  {
    "text": "scenarios wherever you reso of wherever you share resources you might run into a problem with side channels therefore do",
    "start": "2942650",
    "end": "2949609"
  },
  {
    "text": "not consider them out of scope and keep that in mind also if you use those technologies exactly and do not take",
    "start": "2949609",
    "end": "2958220"
  },
  {
    "text": "Hardware extensions as the Silver Bullet that you just can add to your code with",
    "start": "2958220",
    "end": "2964369"
  },
  {
    "text": "all your bugs with all this exploitable stuff in there so if you have exploitable code which bucks in there it",
    "start": "2964369",
    "end": "2971210"
  },
  {
    "text": "doesn't matter whether it's normal Park as we've seen memory corruptions or double fetches use after freeze whatever",
    "start": "2971210",
    "end": "2978290"
  },
  {
    "text": "something that's known for a while or whether it's something that's only for a",
    "start": "2978290",
    "end": "2983410"
  },
  {
    "text": "exploitable side channels like non side channel resistance crypto or atom memory",
    "start": "2983410",
    "end": "2989660"
  },
  {
    "text": "secret dependent memory accesses that can be exploited with side channels if you have exploitable code and you put it",
    "start": "2989660",
    "end": "2996740"
  },
  {
    "text": "in a secure and Cave doesn't matter whether it's in Tech's arm trust zone it's applicable to all of the hardware",
    "start": "2996740",
    "end": "3005609"
  },
  {
    "text": "in caves then you do not get secure code with that you only get",
    "start": "3005609",
    "end": "3012339"
  },
  {
    "text": "exploitable in caves so then the a code inside your hangar F is exploitable and",
    "start": "3012339",
    "end": "3017440"
  },
  {
    "text": "that can be even worse because you rely on it to be secure and then it's an",
    "start": "3017440",
    "end": "3022989"
  },
  {
    "text": "organized target for an attacker because they take a knows exactly where your secrets are so you should not have",
    "start": "3022989",
    "end": "3029259"
  },
  {
    "text": "exploitable code just put in to secure hardware elements but you have to write",
    "start": "3029259",
    "end": "3035380"
  },
  {
    "text": "secure codes so that you can use then in addition this half of features to make",
    "start": "3035380",
    "end": "3040390"
  },
  {
    "text": "it really secure so that's one of the really important takeaways if you write software using such hardware features",
    "start": "3040390",
    "end": "3048900"
  },
  {
    "text": "okay and this concludes our presentation so thanks for your attention and we are",
    "start": "3048900",
    "end": "3055779"
  },
  {
    "start": "3051000",
    "end": "3212000"
  },
  {
    "text": "open for any questions",
    "start": "3055779",
    "end": "3058650"
  },
  {
    "text": "[Applause] yes yes exactly so the side channel",
    "start": "3061740",
    "end": "3078570"
  },
  {
    "text": "leakage is still there so for the first attack a few months a genetic for example on crypto that cannot be",
    "start": "3078570",
    "end": "3085770"
  },
  {
    "text": "prevented with this library test but there is a paper from last year using security where a team of researchers",
    "start": "3085770",
    "end": "3093710"
  },
  {
    "text": "found a solution to also use in the TSX to prevent side channel leakage because",
    "start": "3093710",
    "end": "3099600"
  },
  {
    "text": "it's implemented in the cache so you can also see if someone does a cache attack with that and evict something from the",
    "start": "3099600",
    "end": "3106320"
  },
  {
    "text": "cache then that can be detected within TSX because your read set is destroyed",
    "start": "3106320",
    "end": "3111900"
  },
  {
    "text": "or your right set and it supports so the operation reports before any leakage occurs so you can also use it against",
    "start": "3111900",
    "end": "3118740"
  },
  {
    "text": "cache attacks so from outside the NK if",
    "start": "3118740",
    "end": "3128369"
  },
  {
    "text": "it's a bit if yes from outside NK if",
    "start": "3128369",
    "end": "3133500"
  },
  {
    "text": "it's even easier to do because you have all the features you can get physical addresses because in this attack model",
    "start": "3133500",
    "end": "3140040"
  },
  {
    "text": "you have root privileges so you get physical addresses you can easily built",
    "start": "3140040",
    "end": "3145230"
  },
  {
    "text": "your eviction sets for Prime and pro you can also tamper with the scheduling of",
    "start": "3145230",
    "end": "3152010"
  },
  {
    "text": "the enclaves so you can for example the x-step framework that allows you to only",
    "start": "3152010",
    "end": "3158330"
  },
  {
    "text": "let ankov execute a few instruction ten interrupted then attack again the cache",
    "start": "3158330",
    "end": "3164190"
  },
  {
    "text": "so it's basically slows down the nkf extremely which makes it a lot easier to",
    "start": "3164190",
    "end": "3170180"
  },
  {
    "text": "exploit this attacks from the outside so if you are not in n cave it's a lot younger you're also visible to the",
    "start": "3170180",
    "end": "3176640"
  },
  {
    "text": "operating system so you cannot hide within the ink layer as we've seen with the performance yeah there are detection",
    "start": "3176640",
    "end": "3182730"
  },
  {
    "text": "mechanisms presented in two thousand fifteen or sixteen blackhat that use the",
    "start": "3182730",
    "end": "3189660"
  },
  {
    "text": "performance counter to detect ongoing cash attacks and then you could stop them",
    "start": "3189660",
    "end": "3195530"
  },
  {
    "text": "so if there any more questions but if you are still interested you can check",
    "start": "3196950",
    "end": "3202240"
  },
  {
    "text": "out the white paper which has much more detailed information in there otherwise you can talk to us later on and thank",
    "start": "3202240",
    "end": "3208810"
  },
  {
    "text": "you again",
    "start": "3208810",
    "end": "3211020"
  }
]