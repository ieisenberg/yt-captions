[
  {
    "text": "[Music]",
    "start": "1180",
    "end": "14730"
  },
  {
    "text": "hello everyone my name is alex matrosov and today i will be representing the efi explorer",
    "start": "15759",
    "end": "21840"
  },
  {
    "text": "team uh which is actually andrei igor and philip and today andrew and me will",
    "start": "21840",
    "end": "28560"
  },
  {
    "text": "be presenting our research which we did a couple of months before this conference so basically",
    "start": "28560",
    "end": "36160"
  },
  {
    "text": "uh our talk is about hunting for ufi firm vulnerabilities at scale",
    "start": "36160",
    "end": "41680"
  },
  {
    "text": "with automated static analysis we try to provide the tool which is powerful enough to find the",
    "start": "41680",
    "end": "49120"
  },
  {
    "text": "vulnerability potential vulnerability patterns with static analysis",
    "start": "49120",
    "end": "54239"
  },
  {
    "text": "in collaboration with idapro and x-rays so in the past uh i am",
    "start": "54239",
    "end": "61039"
  },
  {
    "text": "already present with eugene radionov gabriel barbosa and rodrigo branco",
    "start": "61039",
    "end": "66080"
  },
  {
    "text": "uh the research uh about distribution distribution uh distributing reconstruction of",
    "start": "66080",
    "end": "72080"
  },
  {
    "text": "high-level intermediate representation for large-scale malware analysis we did uh mower analysis at scale and",
    "start": "72080",
    "end": "79600"
  },
  {
    "text": "we analyzed the patterns which has been reconstructed from hex raysde compiler and ida pro",
    "start": "79600",
    "end": "86560"
  },
  {
    "text": "it's been presented in 2015 and we learned it a lot how we can scale ida for the analysis",
    "start": "86560",
    "end": "94479"
  },
  {
    "text": "in this research actually we'll be focused on vulnerability research and",
    "start": "94479",
    "end": "99920"
  },
  {
    "text": "how we can scale the plug-in based uh on ida pro and",
    "start": "99920",
    "end": "105759"
  },
  {
    "text": "hex-raysd compiler to gain uh some power of the static analysis to",
    "start": "105759",
    "end": "112320"
  },
  {
    "text": "reconstruct uh interesting vulnerability patterns which we'll talk about today so we will start with",
    "start": "112320",
    "end": "120320"
  },
  {
    "text": "motivation and how our automated vulnerability search is working",
    "start": "120320",
    "end": "125439"
  },
  {
    "text": "uh where we cover the methodology and few very common vulnerability patterns",
    "start": "125439",
    "end": "131440"
  },
  {
    "text": "like smm cloud get variable and get variable for smm and not really frequently",
    "start": "131440",
    "end": "139120"
  },
  {
    "text": "discussed get variable inside the platform utilization stage",
    "start": "139120",
    "end": "145920"
  },
  {
    "text": "and in the end we will demonstrate the statistics by vendor and actually all the",
    "start": "145920",
    "end": "152800"
  },
  {
    "text": "images we analyzed in this research been pretty recently released in this year",
    "start": "152800",
    "end": "159360"
  },
  {
    "text": "and of course we have a lot of plans to continue this research and develop new functionality for efi",
    "start": "159360",
    "end": "166239"
  },
  {
    "text": "explorer so let's start what is actually a file explorer if i explore",
    "start": "166239",
    "end": "173120"
  },
  {
    "text": "it is a ida pro plugin which is helping to reconstruct uh ufi related",
    "start": "173120",
    "end": "180319"
  },
  {
    "text": "data structures and interfaces if you look on this slide you can clearly see it is some",
    "start": "180319",
    "end": "187680"
  },
  {
    "text": "complex type like a structure but it's unknown for this environment",
    "start": "187680",
    "end": "194400"
  },
  {
    "text": "and it's why it is not recognized by this disassembly listing",
    "start": "194400",
    "end": "201200"
  },
  {
    "text": "but as example with gidra you have plugins like efi seek or the",
    "start": "201200",
    "end": "207680"
  },
  {
    "text": "firmware utils which is add to local type database",
    "start": "207680",
    "end": "212959"
  },
  {
    "text": "sometimes related to uefi environment it's create much more understandable",
    "start": "212959",
    "end": "220480"
  },
  {
    "text": "and useful uh analysis and reconstruction for ufi binaries",
    "start": "220480",
    "end": "228159"
  },
  {
    "text": "but we want to create not only a helper for reconstructing ufi",
    "start": "228159",
    "end": "234720"
  },
  {
    "text": "binaries we want to create environment which will be powerful enough to simplify reverse",
    "start": "234720",
    "end": "241599"
  },
  {
    "text": "engineering work for who you fire ecosystem basically uh efi explorer have 3k",
    "start": "241599",
    "end": "249680"
  },
  {
    "text": "component it's efi analyzer which is simplifying reconstruction of ufi specific types and protocols",
    "start": "249680",
    "end": "258079"
  },
  {
    "text": "and we have uh efi loader which is actually unified loader for full image",
    "start": "258079",
    "end": "266479"
  },
  {
    "text": "of firmware it's loading to entire idb and basically uh",
    "start": "266479",
    "end": "273040"
  },
  {
    "text": "you can analyze with a single idb that all firmware drivers contain in",
    "start": "273040",
    "end": "279280"
  },
  {
    "text": "this image which is very helpful and uh much more powerful to analyze",
    "start": "279280",
    "end": "287360"
  },
  {
    "text": "and devel reveal the cross-reference between these drivers",
    "start": "287360",
    "end": "292560"
  },
  {
    "text": "and of course finding common types of vulnerabilities it's very cool and we implement some",
    "start": "292560",
    "end": "300240"
  },
  {
    "text": "static pattern analyzers for particular vulnerability classes and have a lot of",
    "start": "300240",
    "end": "306000"
  },
  {
    "text": "uh interesting ideas how we can improve it with a power of hexaze microcode and",
    "start": "306000",
    "end": "312400"
  },
  {
    "text": "intermediate representation like c trees especially for the data flow reconstruction",
    "start": "312400",
    "end": "319360"
  },
  {
    "text": "so uh on this uh decompiler listing you can see how cooperation between x-rays and efi",
    "start": "319360",
    "end": "327039"
  },
  {
    "text": "explorer works and actually this looks like",
    "start": "327039",
    "end": "332560"
  },
  {
    "text": "a real source code file because it's very readable most of the types is reconstructed and",
    "start": "332560",
    "end": "339120"
  },
  {
    "text": "you have you have a lot of hints about this flow what is actually going on there",
    "start": "339120",
    "end": "346720"
  },
  {
    "text": "but um as example uh efi explorer can fight automatically at",
    "start": "346880",
    "end": "353919"
  },
  {
    "text": "software semi handlers um and without uh efi",
    "start": "353919",
    "end": "359199"
  },
  {
    "text": "explorer uh on on the hexaysd compiler stage as",
    "start": "359199",
    "end": "365600"
  },
  {
    "text": "clearly we can see on the left side of the slide it is a red deck decompiler which is doesn't collaborate with the",
    "start": "365600",
    "end": "372479"
  },
  {
    "text": "local types databases inside the idb and clearly it's",
    "start": "372479",
    "end": "377680"
  },
  {
    "text": "not understandable listing and not annotated enough to make it readable it's actually why we",
    "start": "377680",
    "end": "385840"
  },
  {
    "text": "highly recommend uh to collaborate with uh x-rays uh with uh either pro",
    "start": "385840",
    "end": "392479"
  },
  {
    "text": "reconstructed assem an annotated assembly x-ray sd compiler because",
    "start": "392479",
    "end": "397680"
  },
  {
    "text": "it is actually might make create much more readable listings on the the compilot flow but of",
    "start": "397680",
    "end": "404000"
  },
  {
    "text": "course remember to look on actual assembly code because without understanding assembly it's hard to spot",
    "start": "404000",
    "end": "411199"
  },
  {
    "text": "the mistakes in the compilation so uh how it started so you find eliza",
    "start": "411199",
    "end": "418240"
  },
  {
    "text": "was not i would not say simple but much much more simpler than we have in",
    "start": "418240",
    "end": "425919"
  },
  {
    "text": "nowadays because we add a lot of functionality for uh platform initialization stage which is",
    "start": "425919",
    "end": "432160"
  },
  {
    "text": "not very uh don't have a lot of coverage on other plugins",
    "start": "432160",
    "end": "438160"
  },
  {
    "text": "uh we have uh we added some vulnerability patterns recognition we",
    "start": "438160",
    "end": "444160"
  },
  {
    "text": "added a lot of uh additional um additional uh heuristics and",
    "start": "444160",
    "end": "451919"
  },
  {
    "text": "as example for smi handlers and for cpu state detection for",
    "start": "451919",
    "end": "457120"
  },
  {
    "text": "uh smm clouds and much more so uh actually in september we got a",
    "start": "457120",
    "end": "464800"
  },
  {
    "text": "fourth third prize uh of the x-rays uh plug-in contest and thanks x-rays to uh support of",
    "start": "464800",
    "end": "472720"
  },
  {
    "text": "uh our potential and uh usefulness of efi explorer",
    "start": "472720",
    "end": "479520"
  },
  {
    "text": "plug-in uh we're very proud of this honor because if i explore it's pretty young project it just",
    "start": "479520",
    "end": "485840"
  },
  {
    "text": "started on the beginning of this year and uh get a lot of traction and we get",
    "start": "485840",
    "end": "490879"
  },
  {
    "text": "a lot of feedback from researchers who are using it daily [Music] so what is actually motivation for this",
    "start": "490879",
    "end": "498720"
  },
  {
    "text": "particular presentation and research behind so uh think about",
    "start": "498720",
    "end": "504240"
  },
  {
    "text": "we have the hardware uh threat modeling firmware threat modeling and operating system thread modeling",
    "start": "504240",
    "end": "510639"
  },
  {
    "text": "most of these thread models is disconnected from each other and basically as boot uh process going",
    "start": "510639",
    "end": "517919"
  },
  {
    "text": "uh to the high um high level stacks on the operating system level",
    "start": "517919",
    "end": "523518"
  },
  {
    "text": "then we gain much more signals for threat intelligence forensics and actually uh threat detection but",
    "start": "523519",
    "end": "531360"
  },
  {
    "text": "if you go down to the stack it's much less signals is exist and actually produced",
    "start": "531360",
    "end": "539360"
  },
  {
    "text": "so we have clearly lack of threat intel and forensics on the firmware level and threat and",
    "start": "539360",
    "end": "546160"
  },
  {
    "text": "hardware level so in our research we try to fill",
    "start": "546160",
    "end": "551440"
  },
  {
    "text": "the gap on the firmware level and give forensic and threat analysts very useful tool",
    "start": "551440",
    "end": "559600"
  },
  {
    "text": "for simplifying research and save a lot of time",
    "start": "559600",
    "end": "564560"
  },
  {
    "text": "okay and uh it's a good example actually from the firmware side it is",
    "start": "564720",
    "end": "571200"
  },
  {
    "text": "a non-volatile memory actually if you're not familiar with ufi firmware",
    "start": "571200",
    "end": "577040"
  },
  {
    "text": "it has a nvram storage for variables which is actually very powerful configuration data storage",
    "start": "577040",
    "end": "584399"
  },
  {
    "text": "with a lot of information inside but also it's frequently used",
    "start": "584399",
    "end": "591519"
  },
  {
    "text": "by operating system and hardware vendors to store very weird stuff by the way but also we",
    "start": "591519",
    "end": "600160"
  },
  {
    "text": "know some cases where in vram variables being abused by firmware implants so okay",
    "start": "600160",
    "end": "608399"
  },
  {
    "text": "and this uh picture actually demonstrate how boot flow transform access",
    "start": "608399",
    "end": "615519"
  },
  {
    "text": "to environment variables access as example from platform initialization stage we have",
    "start": "615519",
    "end": "622720"
  },
  {
    "text": "access to the firmware uh to the nvram storage and it's not actually split",
    "start": "622720",
    "end": "628480"
  },
  {
    "text": "between level of access compared to the dixie phase where we",
    "start": "628480",
    "end": "634160"
  },
  {
    "text": "have the interfaces uh for system management mode and uh for the dixie for the normal dxc",
    "start": "634160",
    "end": "642000"
  },
  {
    "text": "and it's separated uh for with a different access privileges",
    "start": "642000",
    "end": "647040"
  },
  {
    "text": "and of course we have operating system interfaces to get uh enumerate uh the firmware uh",
    "start": "647040",
    "end": "653760"
  },
  {
    "text": "variables uh environ variables and actually these uh direct memory access uh",
    "start": "653760",
    "end": "661279"
  },
  {
    "text": "you have enough power to basically avoid uh native operating system",
    "start": "661279",
    "end": "667120"
  },
  {
    "text": "interface and uh understand what actually uh is missing or a hidden from",
    "start": "667120",
    "end": "675040"
  },
  {
    "text": "operating system native interface because sometimes uh microsoft and some other vendors try",
    "start": "675040",
    "end": "681920"
  },
  {
    "text": "to hide the variables accessible from native apis",
    "start": "681920",
    "end": "686959"
  },
  {
    "text": "okay let's talk about environment as a persistent uh storage actually inveram variables",
    "start": "686959",
    "end": "694079"
  },
  {
    "text": "have a two different types it is a runtime storage when it's stored you and accessible during um",
    "start": "694079",
    "end": "702720"
  },
  {
    "text": "during operating system work and it's only accessible after",
    "start": "702720",
    "end": "710000"
  },
  {
    "text": "operating after the system only when the system is running but we have a persistent storage on the",
    "start": "710000",
    "end": "716160"
  },
  {
    "text": "spy flash where the variables is stored and it survives actually array board",
    "start": "716160",
    "end": "723120"
  },
  {
    "text": "so uh in this storage we have enough variables which is create some dangerous uh attack",
    "start": "723120",
    "end": "730000"
  },
  {
    "text": "surface and what is interesting these regions uh with environment",
    "start": "730000",
    "end": "736320"
  },
  {
    "text": "persistent storage doesn't covered by intel boot guard and can be abused by the attacker with a",
    "start": "736320",
    "end": "743120"
  },
  {
    "text": "physical access which is make very dangerous supply chain attack vector and arbitrary code",
    "start": "743120",
    "end": "749279"
  },
  {
    "text": "execution over the get variable it's quite common and attack attacker can modify persistent",
    "start": "749279",
    "end": "756079"
  },
  {
    "text": "environment storage variable to install fileless dxe smm or pi",
    "start": "756079",
    "end": "761519"
  },
  {
    "text": "implant which is based on some shell code and not feasible on",
    "start": "761519",
    "end": "769440"
  },
  {
    "text": "the driver driver level or basically it's hard to spot",
    "start": "769440",
    "end": "776000"
  },
  {
    "text": "uh during execution or even sometimes runtime forensics so",
    "start": "776000",
    "end": "783440"
  },
  {
    "text": "most security solutions inspect only ufi drivers but doesn't look on persistent",
    "start": "783440",
    "end": "789839"
  },
  {
    "text": "nvram storage which is create a lot of interesting possibilities for the attacker",
    "start": "789839",
    "end": "796160"
  },
  {
    "text": "as example uh platform length variable is quite common case because",
    "start": "796160",
    "end": "804240"
  },
  {
    "text": "it's edk uh normal variable for uh language uh uh in like for choosing the language",
    "start": "804240",
    "end": "812399"
  },
  {
    "text": "for the platform and on this screenshot we can see the issue where it's",
    "start": "812399",
    "end": "818079"
  },
  {
    "text": "basically the size is now but we can control this size and platform",
    "start": "818079",
    "end": "825360"
  },
  {
    "text": "variable is actually also can controlled by by the attacker we'll talk about this",
    "start": "825360",
    "end": "831279"
  },
  {
    "text": "vectors a bit further and andrew will be covered with a lot of additional details",
    "start": "831279",
    "end": "837839"
  },
  {
    "text": "also i want to shoot out to the researchers which is make some",
    "start": "837839",
    "end": "843760"
  },
  {
    "text": "research about uh make uh environment runtime persistence not in spice uh storage but uh",
    "start": "843760",
    "end": "852320"
  },
  {
    "text": "persistence enough for uh hiding from a modern edr solution and endpoints",
    "start": "852320",
    "end": "860800"
  },
  {
    "text": "so pay attention on these links it's quite cool research there but also in vram persistent storage with",
    "start": "860800",
    "end": "867920"
  },
  {
    "text": "the physical access to the target machine will was mention it in say",
    "start": "867920",
    "end": "873519"
  },
  {
    "text": "vault 7 leaks before which is mean this vector is known for years and already abused",
    "start": "873519",
    "end": "880600"
  },
  {
    "text": "[Music] very interesting work actually also will be",
    "start": "880600",
    "end": "886000"
  },
  {
    "text": "discussed on this conference in uh arsenal session uh pay attention on e5 files because",
    "start": "886000",
    "end": "892720"
  },
  {
    "text": "collaboration between e5 us and efi explorer it's very powerful",
    "start": "892720",
    "end": "899360"
  },
  {
    "text": "and it's actually can used for a e5 fast can used for proof",
    "start": "899360",
    "end": "906000"
  },
  {
    "text": "the findings potential findings found by efi explorer",
    "start": "906000",
    "end": "912880"
  },
  {
    "text": "but if you talk about the fuzzing think about limitation of black box fuzzing",
    "start": "912880",
    "end": "918399"
  },
  {
    "text": "of a file basically we have a code coverage based on feedback loop with a very",
    "start": "918399",
    "end": "926160"
  },
  {
    "text": "limited static corpus and of course random input mutations",
    "start": "926160",
    "end": "931839"
  },
  {
    "text": "having only initial knowledge and may need extra reverse engineering work to create more",
    "start": "931839",
    "end": "937680"
  },
  {
    "text": "precise and violet corpus which is actually can be covered by efi",
    "start": "937680",
    "end": "943120"
  },
  {
    "text": "explorer and platform simulation like cmx with combination of symbolic execution",
    "start": "943120",
    "end": "949440"
  },
  {
    "text": "can fill this gap and provide more feedback loop and test coverage in",
    "start": "949440",
    "end": "956000"
  },
  {
    "text": "general so i think um excite project from intel",
    "start": "956000",
    "end": "961440"
  },
  {
    "text": "where i contribute in the previous years was very useful in this case",
    "start": "961440",
    "end": "967040"
  },
  {
    "text": "and of course efi explorer can provide some coverage and helping with corpus generation for potential targets",
    "start": "967040",
    "end": "975759"
  },
  {
    "text": "okay and few words about disclosure we have ongoing disclosure with with",
    "start": "976959",
    "end": "982560"
  },
  {
    "text": "intel where nvidia offensive research is covered multiple vulnerabilities with get",
    "start": "982560",
    "end": "988240"
  },
  {
    "text": "variable on different different levels but it's taken a while and",
    "start": "988240",
    "end": "994320"
  },
  {
    "text": "this disclosure date will be something in april 2020 and i hope soon",
    "start": "994320",
    "end": "1001519"
  },
  {
    "text": "we can discuss more broadly these issues maybe on the next bloodhead",
    "start": "1001519",
    "end": "1007680"
  },
  {
    "text": "thank you and i think andrew it's your turn continues this presentation thank you very much hello my name is",
    "start": "1008480",
    "end": "1015920"
  },
  {
    "text": "andrei and i will talk about efi explorer and its automated vulnerability charge capability",
    "start": "1015920",
    "end": "1021440"
  },
  {
    "text": "and how we do it to make sure that it works well at scale and how we make sure",
    "start": "1021440",
    "end": "1028160"
  },
  {
    "text": "that our methodology is kind of sound to the best of what we can do",
    "start": "1028160",
    "end": "1034079"
  },
  {
    "text": "first let's talk about the data sets and type of data we collected we have uh ice rock about 400 of firmware images",
    "start": "1034079",
    "end": "1042160"
  },
  {
    "text": "we have associated a little bit more close to 1000 from our images and we have lino about 84 from our",
    "start": "1042160",
    "end": "1049600"
  },
  {
    "text": "images total all of them were released in 2020 which means that if we find the security issues",
    "start": "1049600",
    "end": "1056720"
  },
  {
    "text": "there it's likely valid and it exists and it's pretty much of a concern",
    "start": "1056720",
    "end": "1061919"
  },
  {
    "text": "for for users which rely on that product we use three types of measurements in",
    "start": "1061919",
    "end": "1068320"
  },
  {
    "text": "order to understand how well is ufi explorer is doing its job",
    "start": "1068320",
    "end": "1073520"
  },
  {
    "text": "first we measured object recognition such as boot services and runtime services if you want to get more information",
    "start": "1073520",
    "end": "1080240"
  },
  {
    "text": "about how we measured basically um that",
    "start": "1080240",
    "end": "1086080"
  },
  {
    "text": "fundamental components recovery how well is if i explorer is doing its kind",
    "start": "1086080",
    "end": "1091919"
  },
  {
    "text": "of baseline things you can take a look at our echo party presentation let us know if you have any feedback",
    "start": "1091919",
    "end": "1099120"
  },
  {
    "text": "reach out to us and feel free to investigate and inspect it if you want",
    "start": "1099120",
    "end": "1105840"
  },
  {
    "text": "to get additional information about our measurements this part is unfortunately",
    "start": "1105840",
    "end": "1111919"
  },
  {
    "text": "a little bit out of scope of this research two things at the bottom are in scope of the research measuring",
    "start": "1111919",
    "end": "1118880"
  },
  {
    "text": "attack surface and running automated vulnerability scanners we will present those numbers later and",
    "start": "1118880",
    "end": "1125760"
  },
  {
    "text": "this is what we collected for all of the vendors and this is what we collected per",
    "start": "1125760",
    "end": "1131280"
  },
  {
    "text": "face per boot per boot face such as dc smm and platform initiation",
    "start": "1131280",
    "end": "1139120"
  },
  {
    "text": "now let's talk about each vulnerability pattern we start from smm call out",
    "start": "1139120",
    "end": "1145919"
  },
  {
    "text": "this is a well-known attack vector it's well known for years and um it unfortunately retains",
    "start": "1145919",
    "end": "1153120"
  },
  {
    "text": "its significant place in the security oh that's it's well known unfortunately",
    "start": "1153120",
    "end": "1160080"
  },
  {
    "text": "oh hopefully depending on your point of view to understand what it is",
    "start": "1160080",
    "end": "1165120"
  },
  {
    "text": "you should know that there's my hander this is something kind of a function handler",
    "start": "1165120",
    "end": "1171840"
  },
  {
    "text": "part of the interface communication interface between operating system and the smram and if",
    "start": "1171840",
    "end": "1179360"
  },
  {
    "text": "a code inside smm run tries to dereference the",
    "start": "1179360",
    "end": "1186400"
  },
  {
    "text": "drt pointer or gps pointer bad things can happen for one reason",
    "start": "1186400",
    "end": "1191600"
  },
  {
    "text": "those tables do not guarantee to exist after the exit build services is called",
    "start": "1191600",
    "end": "1198000"
  },
  {
    "text": "and basically this memory is under control of the attacker if we assume attacker",
    "start": "1198000",
    "end": "1205200"
  },
  {
    "text": "is for example coming from an operating system trying to escalate privilege to bring -2 or whatever you call it",
    "start": "1205200",
    "end": "1213600"
  },
  {
    "text": "if this happens then this is a vulnerability which attacker can take advantage of how do we",
    "start": "1213600",
    "end": "1219600"
  },
  {
    "text": "find it this more important question how do we find it statically well we just iterate through all the smi",
    "start": "1219600",
    "end": "1226880"
  },
  {
    "text": "handlers tries try to find all the references to those variables and once we find it we flag it for the",
    "start": "1226880",
    "end": "1233919"
  },
  {
    "text": "manual review and sounds like relatively simple",
    "start": "1233919",
    "end": "1241120"
  },
  {
    "text": "but that requires a lot of static analysis beforehand",
    "start": "1241120",
    "end": "1246159"
  },
  {
    "text": "here's how the uh registration of smi handler is happening inside of firmware",
    "start": "1246159",
    "end": "1252000"
  },
  {
    "text": "you can see the legit firmware registering as my handler so it's just a matter of",
    "start": "1252000",
    "end": "1257360"
  },
  {
    "text": "calling smms of activate dispatch protocol and then get an interface and then actually call in a",
    "start": "1257360",
    "end": "1263120"
  },
  {
    "text": "register where the source in my handler is just a argument it's a pointer to a function",
    "start": "1263120",
    "end": "1270480"
  },
  {
    "text": "we are able to analyze those constructs and then extract the argument and from there we understand that this is",
    "start": "1270480",
    "end": "1276320"
  },
  {
    "text": "an smile handler this thing points to a function which is a function of interest in any",
    "start": "1276320",
    "end": "1281840"
  },
  {
    "text": "way this is exactly the same code but in decompiled form pretty straightforward register is my",
    "start": "1281840",
    "end": "1288880"
  },
  {
    "text": "order from there we know this function is my handler now how we find vulnerabilities",
    "start": "1288880",
    "end": "1294640"
  },
  {
    "text": "i would say potential security vulnerabilities there we just iteratively and recursively go",
    "start": "1294640",
    "end": "1300400"
  },
  {
    "text": "through all the functions from that as my under and find references to drt or gps",
    "start": "1300400",
    "end": "1307360"
  },
  {
    "text": "runtime services pointer or boot services pointer question is how do we know where they",
    "start": "1307360",
    "end": "1313120"
  },
  {
    "text": "are located well is because efi explorer is able to collect them beforehand",
    "start": "1313120",
    "end": "1318320"
  },
  {
    "text": "and we store them separately and we just compare whether these dereference is dereferencing",
    "start": "1318320",
    "end": "1324880"
  },
  {
    "text": "actually a memory we know already is marked as",
    "start": "1324880",
    "end": "1330080"
  },
  {
    "text": "gbs or team the algorithms are pretty similar [Music]",
    "start": "1330080",
    "end": "1336000"
  },
  {
    "text": "with one additional step you can also get the same information for the whole image versus just for a single driver",
    "start": "1336000",
    "end": "1344320"
  },
  {
    "text": "we we can use fix loader which interactively goes through all the drivers and does the same thing",
    "start": "1344799",
    "end": "1350640"
  },
  {
    "text": "and from there you get sms mi handlers from the whole firmware what's new and what's interesting there",
    "start": "1350640",
    "end": "1357280"
  },
  {
    "text": "uh compared to what existed before is that we do that statically without running firmware",
    "start": "1357280",
    "end": "1364080"
  },
  {
    "text": "just by having a firmware damp another way of doing that is for example",
    "start": "1364080",
    "end": "1369360"
  },
  {
    "text": "to find a vulnerability let's say in um it is my handler or in",
    "start": "1369360",
    "end": "1376240"
  },
  {
    "text": "uh whatever and then execute code in uh as environment and and then take this",
    "start": "1376240",
    "end": "1383280"
  },
  {
    "text": "and run dump extract it and find this in my handlers from from the memory",
    "start": "1383280",
    "end": "1388480"
  },
  {
    "text": "we approach the same thing but slightly from a different perspective",
    "start": "1388480",
    "end": "1393760"
  },
  {
    "text": "just we do that statically and it works",
    "start": "1393760",
    "end": "1397440"
  },
  {
    "text": "speaking about the numbers i would say that leonardo is actually relatively",
    "start": "1399039",
    "end": "1405360"
  },
  {
    "text": "good at a dark surface the number the average number of smi handler",
    "start": "1405360",
    "end": "1411919"
  },
  {
    "text": "is my hundreds per firmware in case of linoa is only 20. but ice rock analysis are slightly",
    "start": "1411919",
    "end": "1418880"
  },
  {
    "text": "slightly worse with with respect to that mandrake we chose and with respect to how we",
    "start": "1418880",
    "end": "1424400"
  },
  {
    "text": "collected and lenovo is also relatively good with respect to magic",
    "start": "1424400",
    "end": "1430080"
  },
  {
    "text": "of the number of potentially triggered asymmetrical laws however we found a few interesting",
    "start": "1430080",
    "end": "1436000"
  },
  {
    "text": "things in our data sets we still work on that vulnerability it's",
    "start": "1436000",
    "end": "1442880"
  },
  {
    "text": "in process of disclosure but it's a straightforward call out this is",
    "start": "1442880",
    "end": "1448480"
  },
  {
    "text": "smi handler from from one of the firmwares it uses a read",
    "start": "1448480",
    "end": "1454159"
  },
  {
    "text": "save state to read registers which are controlled by attacker and then depending on the values of the",
    "start": "1454159",
    "end": "1460880"
  },
  {
    "text": "registers there's a lot of code we just skipped because there's a",
    "start": "1460880",
    "end": "1466400"
  },
  {
    "text": "very very long switch statement and once it goes inside",
    "start": "1466400",
    "end": "1473840"
  },
  {
    "text": "inside one of the locations depending on the value of v45",
    "start": "1475760",
    "end": "1480799"
  },
  {
    "text": "it just mistakenly tries to deliver a grt it's probably god which might have been",
    "start": "1480799",
    "end": "1486640"
  },
  {
    "text": "forgotten or maybe left by mistake or something like that but there's nothing great in that",
    "start": "1486640",
    "end": "1494559"
  },
  {
    "text": "let's talk about get variable patterns uh we investigate this situation",
    "start": "1494559",
    "end": "1499600"
  },
  {
    "text": "from three angles we try to understand get variable calls from the smm phase",
    "start": "1499600",
    "end": "1507760"
  },
  {
    "text": "from the dixie phase and from the platform initialization stage and later we will tell how different is",
    "start": "1507760",
    "end": "1514320"
  },
  {
    "text": "the situation at all of the boot stages and of course this attack vector and",
    "start": "1514320",
    "end": "1520720"
  },
  {
    "text": "security vulnerability is well known for many years but we just try to investigate something",
    "start": "1520720",
    "end": "1526080"
  },
  {
    "text": "which is which is still still valid still relevant and",
    "start": "1526080",
    "end": "1532640"
  },
  {
    "text": "try to understand and infer some information about how vendors are doing",
    "start": "1532640",
    "end": "1538799"
  },
  {
    "text": "and what is uh the state of the security in in that regard and if we try to cut it",
    "start": "1539360",
    "end": "1546240"
  },
  {
    "text": "in that dimension so before we go to um the explanation of our vulnerability",
    "start": "1546240",
    "end": "1552240"
  },
  {
    "text": "checkers let's take a look at the cat variable the variable is the standard edk2",
    "start": "1552240",
    "end": "1557600"
  },
  {
    "text": "library code you can find it freely just by going to adk your repository",
    "start": "1557600",
    "end": "1564799"
  },
  {
    "text": "one slight thing which might be not immediately obvious or might be misunderstood sometimes",
    "start": "1564799",
    "end": "1572960"
  },
  {
    "text": "somewhere it is that this function takes a few arguments including data and data",
    "start": "1572960",
    "end": "1579520"
  },
  {
    "text": "size both of them come as pointers and data size",
    "start": "1579520",
    "end": "1585600"
  },
  {
    "text": "is a pointer which is updated even if the data is not being copied in the case",
    "start": "1585600",
    "end": "1592400"
  },
  {
    "text": "if the function tries to get and we're unvariable and then sees that the",
    "start": "1592400",
    "end": "1598640"
  },
  {
    "text": "environment variable is larger than the value of the data size which is being supplied as an argument",
    "start": "1598640",
    "end": "1604960"
  },
  {
    "text": "it returns an error yes but at the same time it updates data size and that thing might not be",
    "start": "1604960",
    "end": "1611919"
  },
  {
    "text": "immediately immediately clear to in some situations um anyway",
    "start": "1611919",
    "end": "1621120"
  },
  {
    "text": "and using that information how do we find potential security vulnerabilities",
    "start": "1621120",
    "end": "1626799"
  },
  {
    "text": "well we just started from something simple let's just try to find sequences of",
    "start": "1626799",
    "end": "1633360"
  },
  {
    "text": "two get variables in a row which use the same data size and which is not initialized and see",
    "start": "1633360",
    "end": "1640159"
  },
  {
    "text": "what it yields us and surprisingly this pattern works pretty well",
    "start": "1640159",
    "end": "1645200"
  },
  {
    "text": "we were able to find a lot of interesting things in our data sets here is the output of our",
    "start": "1645200",
    "end": "1652559"
  },
  {
    "text": "static analyzer you can see where the condition",
    "start": "1652559",
    "end": "1658240"
  },
  {
    "text": "is met condition consisting of three different things when all of them together not true",
    "start": "1658240",
    "end": "1665279"
  },
  {
    "text": "static analyzer returns a result for us for a later manual investigation",
    "start": "1665279",
    "end": "1671039"
  },
  {
    "text": "this is an example of what could possibly happen well not not quite possibly sometimes",
    "start": "1671039",
    "end": "1678559"
  },
  {
    "text": "this is what actually happens in the firmware like in this case there is a data variable straight",
    "start": "1678559",
    "end": "1686240"
  },
  {
    "text": "statically sized data on a stack and there are two get",
    "start": "1686240",
    "end": "1692240"
  },
  {
    "text": "variable calls one of them calls uh tries to get the value of the nvr variable then it",
    "start": "1692240",
    "end": "1700480"
  },
  {
    "text": "checks that whether the ufi buffer too small is returned but then it never checks that the",
    "start": "1700480",
    "end": "1707600"
  },
  {
    "text": "updated data size is actually is smaller than the",
    "start": "1707600",
    "end": "1713360"
  },
  {
    "text": "actual amount of data which is allocated on the stack for the data",
    "start": "1713360",
    "end": "1718960"
  },
  {
    "text": "variable if this variable is controlled by an attacker then this is",
    "start": "1718960",
    "end": "1724000"
  },
  {
    "text": "going to be a very straightforward buffer overflow speaking of security um speaking of",
    "start": "1724000",
    "end": "1730640"
  },
  {
    "text": "exploitation primitive this primitive is pretty much powerful because it allows tech overwrite and",
    "start": "1730640",
    "end": "1738000"
  },
  {
    "text": "the length is controlled and the contact is controlled something which does not always happen",
    "start": "1738000",
    "end": "1745679"
  },
  {
    "text": "and when it happens it gives a lot to an attacker [Music] here is what might also go wrong when",
    "start": "1745679",
    "end": "1752960"
  },
  {
    "text": "the same data size is being used to retrieve the values of two different",
    "start": "1752960",
    "end": "1758399"
  },
  {
    "text": "variable names and if this data size",
    "start": "1758399",
    "end": "1763520"
  },
  {
    "text": "is not re-initialized and then if also there is no logic which would",
    "start": "1763520",
    "end": "1771600"
  },
  {
    "text": "skip all the later processing and stop all the later get variables when buffer too small is returned then",
    "start": "1771600",
    "end": "1778559"
  },
  {
    "text": "bad things can happen so the first call will implicitly update the data size will not do anything but the second call",
    "start": "1778559",
    "end": "1786240"
  },
  {
    "text": "will actually do something um useful for an attacker and something dangerous for",
    "start": "1786240",
    "end": "1791919"
  },
  {
    "text": "the end user and maybe something not very interesting not very exciting",
    "start": "1791919",
    "end": "1797039"
  },
  {
    "text": "to investigate for the vendor i mean speaking easily there's going to",
    "start": "1797039",
    "end": "1802720"
  },
  {
    "text": "be a security vulnerability if we talk about numbers i would say get",
    "start": "1802720",
    "end": "1808240"
  },
  {
    "text": "variable in its initial straightforward form",
    "start": "1808240",
    "end": "1813919"
  },
  {
    "text": "and dixie stage as a part of runtime services [Music]",
    "start": "1813919",
    "end": "1819200"
  },
  {
    "text": "run services table speaking of that the attack surface is quite large i",
    "start": "1819200",
    "end": "1825039"
  },
  {
    "text": "would say it's quite massive ice rock asus and we know",
    "start": "1825039",
    "end": "1831279"
  },
  {
    "text": "has a massive number of calls in the dixie stage the lower is slightly better at the",
    "start": "1831279",
    "end": "1836799"
  },
  {
    "text": "attack surface if you look at this metric but it's slightly uh worse than ice rock and asus if you",
    "start": "1836799",
    "end": "1844240"
  },
  {
    "text": "take a look at the metric of a number of potential security vulnerabilities triggered by",
    "start": "1844240",
    "end": "1850000"
  },
  {
    "text": "our static analyzer i'll be straight here that this",
    "start": "1850000",
    "end": "1856480"
  },
  {
    "text": "this pattern of course is like any any of our buttons requiring a manual review",
    "start": "1856480",
    "end": "1863519"
  },
  {
    "text": "so not all of them are immediately exploitable security vulnerabilities",
    "start": "1863519",
    "end": "1868720"
  },
  {
    "text": "but a lot of them when we tried them turn out to be pretty straightforward security issues",
    "start": "1868720",
    "end": "1875039"
  },
  {
    "text": "indeed not all but many of them um the example",
    "start": "1875039",
    "end": "1883039"
  },
  {
    "text": "we show here is again straightforward almost textbook buffer of law this",
    "start": "1883039",
    "end": "1890000"
  },
  {
    "text": "this code is taken from one driver which belongs to one of the vendors",
    "start": "1890000",
    "end": "1895519"
  },
  {
    "text": "the data here is again stack variable statically sized this",
    "start": "1895519",
    "end": "1902159"
  },
  {
    "text": "environment variable which is being read is platform link and the data",
    "start": "1902159",
    "end": "1909919"
  },
  {
    "text": "size is being implicitly updated however no one checks this data size is actually",
    "start": "1909919",
    "end": "1917760"
  },
  {
    "text": "less or equal than the number of bytes available than the size of the data on the stack",
    "start": "1917760",
    "end": "1925039"
  },
  {
    "text": "the same situation with get variable happens on the smn stage there is a special protocol called efi",
    "start": "1926399",
    "end": "1932399"
  },
  {
    "text": "smm variable protocol and it's just a matter of getting that",
    "start": "1932399",
    "end": "1938240"
  },
  {
    "text": "protocol and then using that point of that protocol as a",
    "start": "1938240",
    "end": "1946159"
  },
  {
    "text": "table to pointer a table to functions and then using some get variable",
    "start": "1946159",
    "end": "1951360"
  },
  {
    "text": "function or other functions pretty straightforward additional step is just to one nested one nested step",
    "start": "1951360",
    "end": "1960399"
  },
  {
    "text": "is to find those interfaces and to understand this is actually a cement variable protocol once we do",
    "start": "1960399",
    "end": "1967760"
  },
  {
    "text": "that the algorithm of how we find and check that this is a potential security",
    "start": "1967760",
    "end": "1973039"
  },
  {
    "text": "vulnerability is exactly the same as before just see that there is a sequence of two",
    "start": "1973039",
    "end": "1979120"
  },
  {
    "text": "uh get variable calls using the same data size uh reference in the same data size",
    "start": "1979120",
    "end": "1984559"
  },
  {
    "text": "argument which is not initialized and see what it yields us again this is",
    "start": "1984559",
    "end": "1990080"
  },
  {
    "text": "the output of our static analyzer this is an example what could go wrong for example",
    "start": "1990080",
    "end": "1997600"
  },
  {
    "text": "if there is a sequence of two calls which obtain same or different variable names",
    "start": "1997600",
    "end": "2005679"
  },
  {
    "text": "and this data size is implicitly updated updated underneath by",
    "start": "2005679",
    "end": "2010880"
  },
  {
    "text": "the edk library code and this behavior is not properly handled this results in a",
    "start": "2010880",
    "end": "2016799"
  },
  {
    "text": "buffer or fall whether it's a buffer or a stack or buffer on a heap",
    "start": "2016799",
    "end": "2023679"
  },
  {
    "text": "in this context this doesn't matter much but it's just going to cause out of bound right",
    "start": "2023679",
    "end": "2029840"
  },
  {
    "text": "whatever place the data is allocated at more interesting is the statistics uh we noticed that the",
    "start": "2029840",
    "end": "2037840"
  },
  {
    "text": "smm which as you remember um quite a privileged place um like thinkably you should should",
    "start": "2037840",
    "end": "2045279"
  },
  {
    "text": "probably as a vendor should probably protect it and this is kind of from that perspective this is what probably",
    "start": "2045279",
    "end": "2051919"
  },
  {
    "text": "happening because if we compare that with the amount of get variable calls on a dixie stage from",
    "start": "2051919",
    "end": "2057599"
  },
  {
    "text": "runtime services the uh the average number that num amount of attack surface is",
    "start": "2057599",
    "end": "2065358"
  },
  {
    "text": "quite smaller and the amount of potential security vulnerabilities triggered is near zero for example it's",
    "start": "2065359",
    "end": "2072560"
  },
  {
    "text": "i think literally zero cases for ice rock and for us it's something like three cases per",
    "start": "2072560",
    "end": "2079118"
  },
  {
    "text": "800 firmers so it's going to be a few",
    "start": "2079119",
    "end": "2085280"
  },
  {
    "text": "one zero point i think something like that i fully know",
    "start": "2085280",
    "end": "2091280"
  },
  {
    "text": "it's average number is about is about one one vulnerability pattern per firmware",
    "start": "2091280",
    "end": "2098800"
  },
  {
    "text": "[Music] as for the results what we found this is",
    "start": "2098800",
    "end": "2104320"
  },
  {
    "text": "a real code from the real firmware from the 2020",
    "start": "2104320",
    "end": "2109680"
  },
  {
    "text": "or near that in somewhere in 2020",
    "start": "2109680",
    "end": "2115280"
  },
  {
    "text": "um it is an um i think a well-known product and the",
    "start": "2115280",
    "end": "2121280"
  },
  {
    "text": "situation happening here is exactly as we explained before there's a data size",
    "start": "2121280",
    "end": "2127599"
  },
  {
    "text": "it is initialized once but then this value on a stack is implicitly updated with",
    "start": "2127599",
    "end": "2132880"
  },
  {
    "text": "the first call and no one checks that this",
    "start": "2132880",
    "end": "2138000"
  },
  {
    "text": "[Music] the situation is happening no one checks the data size is updated and the second call calls",
    "start": "2138190",
    "end": "2146079"
  },
  {
    "text": "overflow data and data variable now platform incentivation stage what",
    "start": "2146079",
    "end": "2152160"
  },
  {
    "text": "happens with the get variable and how get variable works is kind of very very similar to what we",
    "start": "2152160",
    "end": "2158880"
  },
  {
    "text": "know from from the explanation before",
    "start": "2158880",
    "end": "2164320"
  },
  {
    "text": "however this attack vector is we believe it's under slightly under research",
    "start": "2164320",
    "end": "2170410"
  },
  {
    "text": "[Music] and it works very similar to smm",
    "start": "2170410",
    "end": "2175440"
  },
  {
    "text": "there is a ppi which is also an interface as a developer you get that interface",
    "start": "2175440",
    "end": "2180480"
  },
  {
    "text": "and then user interface to call things like get variable and things like that",
    "start": "2180480",
    "end": "2186640"
  },
  {
    "text": "um again how we find the security vulnerability related to that well the hard part is to",
    "start": "2186640",
    "end": "2194560"
  },
  {
    "text": "get all of those get variable goals by locating all the places where",
    "start": "2194560",
    "end": "2200960"
  },
  {
    "text": "pii services is used to obtain that interface and then transfer that interface somewhere and",
    "start": "2200960",
    "end": "2207839"
  },
  {
    "text": "then using that interface as a as a table of",
    "start": "2207839",
    "end": "2214960"
  },
  {
    "text": "function pointers and then using that get variable function pointer just calling that",
    "start": "2214960",
    "end": "2220079"
  },
  {
    "text": "variable and after that what we do is quite similar we just use a data size",
    "start": "2220079",
    "end": "2226960"
  },
  {
    "text": "as a as a marker we try to find a sequence of two get variable calls in a row using the",
    "start": "2226960",
    "end": "2232960"
  },
  {
    "text": "same data size and mark it as a potential security issue of",
    "start": "2232960",
    "end": "2239440"
  },
  {
    "text": "those conditions in that as for the matrix situation is slightly",
    "start": "2239440",
    "end": "2244800"
  },
  {
    "text": "more interesting there is a much less attack surface if",
    "start": "2244800",
    "end": "2250480"
  },
  {
    "text": "you if you compare it with a dixie stage but if we compare that to the number of",
    "start": "2250480",
    "end": "2257119"
  },
  {
    "text": "potential security vulnerabilities triggered on that dixie stage the numbers here and the platform",
    "start": "2257119",
    "end": "2262880"
  },
  {
    "text": "initialization stage is actually larger that means that the dark surface",
    "start": "2262880",
    "end": "2268160"
  },
  {
    "text": "might be not so large but there are many more potential places",
    "start": "2268160",
    "end": "2274960"
  },
  {
    "text": "which might seem might seem to imply a lot of possible possible explanations",
    "start": "2274960",
    "end": "2284640"
  },
  {
    "text": "for example it might be that security researchers did not actually uh completely look at this compared to",
    "start": "2284640",
    "end": "2292079"
  },
  {
    "text": "how the dcrs invent stage was investigated maybe maybe not or",
    "start": "2292079",
    "end": "2297599"
  },
  {
    "text": "maybe vendors did not actually look at this place from the security",
    "start": "2297599",
    "end": "2303359"
  },
  {
    "text": "perspective themselves or maybe there is another explanation but this all is",
    "start": "2303359",
    "end": "2309359"
  },
  {
    "text": "restrained and constrained with the metrics we choose and the metrics we use here",
    "start": "2309359",
    "end": "2316320"
  },
  {
    "text": "and to how we collect those metrics of course",
    "start": "2316320",
    "end": "2321359"
  },
  {
    "text": "but again talking about the results we were able to find a lot of security issues there in the",
    "start": "2323119",
    "end": "2330320"
  },
  {
    "text": "process of disclosure and this is one one interesting example quite quite",
    "start": "2330320",
    "end": "2337040"
  },
  {
    "text": "illustrative data size is [Music] a variable um allocation on the stack",
    "start": "2337040",
    "end": "2344400"
  },
  {
    "text": "and then it implicitly updated after the first call and no one nothing or either nothing or nor one",
    "start": "2344400",
    "end": "2352640"
  },
  {
    "text": "checks or maybe handles a situation where this",
    "start": "2352640",
    "end": "2358480"
  },
  {
    "text": "data size is updated underneath implicitly and there is",
    "start": "2358480",
    "end": "2363760"
  },
  {
    "text": "no obvious check for the air conditioners such as buffer to small in a way that",
    "start": "2363760",
    "end": "2370880"
  },
  {
    "text": "second call to get variable is being executed as well regardless of",
    "start": "2370880",
    "end": "2377920"
  },
  {
    "text": "what happens with the data size [Music] now as we researched all of those",
    "start": "2377920",
    "end": "2383920"
  },
  {
    "text": "vectors let's talk about the overall stats and overall results",
    "start": "2383920",
    "end": "2391680"
  },
  {
    "text": "so we just collected the whole table and this table is for the whole um",
    "start": "2392960",
    "end": "2399920"
  },
  {
    "text": "for the for the whole range of all attack vectors and all the",
    "start": "2399920",
    "end": "2405359"
  },
  {
    "text": "ways we tried to measure attack surface from there we see again",
    "start": "2405359",
    "end": "2410480"
  },
  {
    "text": "that the dixie stage is uh has a massive attack surface the cement stage is kind of well",
    "start": "2410480",
    "end": "2416079"
  },
  {
    "text": "protected and the pii stage is something interesting lean always is",
    "start": "2416079",
    "end": "2421280"
  },
  {
    "text": "slightly better that in some ways but not in all ways",
    "start": "2421280",
    "end": "2427520"
  },
  {
    "text": "attack surface is slightly uh slightly lower if you talk about this on my handlers",
    "start": "2428160",
    "end": "2433440"
  },
  {
    "text": "well now but let's say in other aspects such as a",
    "start": "2433440",
    "end": "2440000"
  },
  {
    "text": "number of well say uh number of but",
    "start": "2440000",
    "end": "2447920"
  },
  {
    "text": "smm get variable calls uh lenovo is kind of a little bit a little bit worse",
    "start": "2447920",
    "end": "2456480"
  },
  {
    "text": "in that regard but however this again is constrained and restrained",
    "start": "2456480",
    "end": "2461520"
  },
  {
    "text": "to the metrics we choose and approach we use",
    "start": "2461520",
    "end": "2466560"
  },
  {
    "text": "if we try to summarize all of all of the results per",
    "start": "2466560",
    "end": "2472720"
  },
  {
    "text": "boot stage the situation gets a little bit slightly more clear",
    "start": "2472720",
    "end": "2478800"
  },
  {
    "text": "for the dixie stage there is a massive attack surface and there is a relatively",
    "start": "2478800",
    "end": "2485760"
  },
  {
    "text": "little amount of potential security vulnerabilities smm which is inside um important trusted boundary and in",
    "start": "2485760",
    "end": "2494720"
  },
  {
    "text": "kind of a place relatively privileged is kind of relatively protected",
    "start": "2494720",
    "end": "2502560"
  },
  {
    "text": "but the pii stage is not not entirely researched and seems to be",
    "start": "2502560",
    "end": "2510240"
  },
  {
    "text": "like a good place to dig into because [Music]",
    "start": "2510240",
    "end": "2515280"
  },
  {
    "text": "the amount of potential security security vulnerability is triggered with regard to get variable related to",
    "start": "2515280",
    "end": "2522800"
  },
  {
    "text": "its attack surface is quite larger than for example a digit stage",
    "start": "2522800",
    "end": "2528160"
  },
  {
    "text": "so the platform initialization is something where i would suppose",
    "start": "2528160",
    "end": "2533680"
  },
  {
    "text": "we might look further in some and find something something interesting now let's talk about future plans all of",
    "start": "2533680",
    "end": "2541040"
  },
  {
    "text": "our partners have one thing in common they are bound pretty",
    "start": "2541040",
    "end": "2546480"
  },
  {
    "text": "pretty pretty much to the assembler to to how",
    "start": "2546480",
    "end": "2552640"
  },
  {
    "text": "we find the patterns in assembler and how we handle um different flavors of code generation",
    "start": "2552640",
    "end": "2558240"
  },
  {
    "text": "we are able to do that and it actually works and it works pretty well if we",
    "start": "2558240",
    "end": "2563520"
  },
  {
    "text": "tune our heuristics very well and we do that for example just because for efi there are not so",
    "start": "2563520",
    "end": "2570400"
  },
  {
    "text": "many compilers a lot of um a lot of build pipelines rely on",
    "start": "2570400",
    "end": "2576560"
  },
  {
    "text": "i think microsoft visual c plus plus in order to get authentic code or something similar to that there's no",
    "start": "2576560",
    "end": "2583359"
  },
  {
    "text": "such diversity in compilers and so there's more um from from a statistical",
    "start": "2583359",
    "end": "2589839"
  },
  {
    "text": "perspective more more stable more stationary",
    "start": "2589839",
    "end": "2597760"
  },
  {
    "text": "more stationary picture uh if we if we talk about how what is the distribution of",
    "start": "2597920",
    "end": "2604960"
  },
  {
    "text": "different code generations or different code patterns resulting from different",
    "start": "2604960",
    "end": "2610160"
  },
  {
    "text": "compilers but then however it presents a problem",
    "start": "2610160",
    "end": "2615920"
  },
  {
    "text": "and one of the problems is that we're not able to fully upload things we are not good at",
    "start": "2615920",
    "end": "2623599"
  },
  {
    "text": "and those things are understanding what are the arguments of a function there are so many calling conventions",
    "start": "2623599",
    "end": "2629760"
  },
  {
    "text": "there are potentially so many architectures and",
    "start": "2629760",
    "end": "2634960"
  },
  {
    "text": "even even with this restrained number of compiler compiler generate generation",
    "start": "2634960",
    "end": "2642480"
  },
  {
    "text": "options there is still a lot of things we cannot handle in general case",
    "start": "2642480",
    "end": "2647760"
  },
  {
    "text": "let us just upload it to um to the disassembler and its intermediate representations",
    "start": "2647760",
    "end": "2654160"
  },
  {
    "text": "they are built for that so it seems to be a very natural next step for us",
    "start": "2654160",
    "end": "2659440"
  },
  {
    "text": "let's take a look at the code same code which on the left side looks into the assembly",
    "start": "2659440",
    "end": "2664640"
  },
  {
    "text": "form and the right side it looks in a form of a microcode when",
    "start": "2664640",
    "end": "2672000"
  },
  {
    "text": "it's being translated to an intermediate presentation [Music]",
    "start": "2672000",
    "end": "2678640"
  },
  {
    "text": "and a slightly more compressed form is a form of decompiler",
    "start": "2678640",
    "end": "2685359"
  },
  {
    "text": "you can see it on top [Music] what is the most important thing we get",
    "start": "2685359",
    "end": "2690880"
  },
  {
    "text": "for us in terms of estimated vulnerability finding well it's arguments of a function and",
    "start": "2690880",
    "end": "2698000"
  },
  {
    "text": "information about the argument such as length types and whatever else you can find",
    "start": "2698000",
    "end": "2705520"
  },
  {
    "text": "once the type of uh the of a table is known then the",
    "start": "2705520",
    "end": "2712640"
  },
  {
    "text": "all the work all the heavy lifting work can be can be safely uploaded to uh",
    "start": "2712640",
    "end": "2719599"
  },
  {
    "text": "to whatever is doing translation and lifting or whatever optimization on all and all of the magic",
    "start": "2719599",
    "end": "2725760"
  },
  {
    "text": "which is intermediate representation uh doing well so and then after that",
    "start": "2725760",
    "end": "2732079"
  },
  {
    "text": "becomes very easy very easy to find patterns like that and to write more expressive and more",
    "start": "2732079",
    "end": "2737920"
  },
  {
    "text": "powerful patterns and uh basically do not work too much trying to find",
    "start": "2737920",
    "end": "2745359"
  },
  {
    "text": "workarounds uh on compiler optimizations and blowout specifics",
    "start": "2745359",
    "end": "2752640"
  },
  {
    "text": "um you can take a look at how c3s look like on the right for on the right side you",
    "start": "2752720",
    "end": "2759119"
  },
  {
    "text": "can see how abstract syntax tree looks like basically it's one one of the standard",
    "start": "2759119",
    "end": "2764640"
  },
  {
    "text": "things not very much different from how you would expect abstract syntax tree to look like",
    "start": "2764640",
    "end": "2770319"
  },
  {
    "text": "there's a block block by an expression expression has an assignment and an assignment has two nodes data size and some value",
    "start": "2770319",
    "end": "2778400"
  },
  {
    "text": "this form x-rays c3s is a more high-level representation and it's",
    "start": "2778400",
    "end": "2784640"
  },
  {
    "text": "very good at data flow analysis which means it's very good at finding when a particular value is",
    "start": "2784640",
    "end": "2791680"
  },
  {
    "text": "assigned to a particular variable for example but it's of course much more useful to",
    "start": "2791680",
    "end": "2799200"
  },
  {
    "text": "too many other problems as well this is just an example hex-ray c3s is not the only",
    "start": "2799200",
    "end": "2806800"
  },
  {
    "text": "way of representing a code in intermediate form",
    "start": "2806800",
    "end": "2813359"
  },
  {
    "text": "there is also a microcode level which has been shown in the previous slide this is",
    "start": "2813359",
    "end": "2818800"
  },
  {
    "text": "a more low level more i would say",
    "start": "2818800",
    "end": "2823760"
  },
  {
    "text": "more intermediary intermediate representation something in the middle between x-ray c3s and the pure assembly",
    "start": "2823839",
    "end": "2831040"
  },
  {
    "text": "it is very good in a way that it it doesn't go that long to do a lot of optimizations",
    "start": "2831040",
    "end": "2838000"
  },
  {
    "text": "and trying to extract",
    "start": "2838000",
    "end": "2842880"
  },
  {
    "text": "what x-ray c3 is doing it's more deterministic and it works very well for uh semantical",
    "start": "2843440",
    "end": "2850880"
  },
  {
    "text": "things for algorithmic things but a little bit less for the data flow analysis",
    "start": "2850880",
    "end": "2858220"
  },
  {
    "text": "[Music] now let's finally go to our conclusions",
    "start": "2858220",
    "end": "2864240"
  },
  {
    "text": "what we want to say is that for firmware and uefi in particular static analysis",
    "start": "2864240",
    "end": "2871200"
  },
  {
    "text": "works and the static analysis is based on a bunch of well-tuned and",
    "start": "2871200",
    "end": "2877920"
  },
  {
    "text": "well-understood heuristics and of course it's also based on a deep understanding of how firmware works as well",
    "start": "2877920",
    "end": "2887119"
  },
  {
    "text": "and those well-tuned heuristics work surprisingly well for recovery of important structures such as function",
    "start": "2887119",
    "end": "2893440"
  },
  {
    "text": "calls and grt variables where they're allocated or referenced but that's something we already know",
    "start": "2893440",
    "end": "2899920"
  },
  {
    "text": "what we know now in this research is that it actually works pretty well for also automated attack surface",
    "start": "2899920",
    "end": "2906160"
  },
  {
    "text": "measurement and it works pretty well for finding potential security vulnerabilities",
    "start": "2906160",
    "end": "2911280"
  },
  {
    "text": "which also result in real security vulnerabilities so it's good at assimilated vault",
    "start": "2911280",
    "end": "2916960"
  },
  {
    "text": "hunting another point we want to make is that firmware vendors",
    "start": "2916960",
    "end": "2922480"
  },
  {
    "text": "probably if we make some assumption that they did it they probably did well",
    "start": "2922480",
    "end": "2928559"
  },
  {
    "text": "on attack surface reduction or maybe we can just say that attack",
    "start": "2928559",
    "end": "2934079"
  },
  {
    "text": "surface is kind of not not terrible in some cases but still however",
    "start": "2934079",
    "end": "2942319"
  },
  {
    "text": "well-known uh attack vectors well known for years and uh well understood for many many",
    "start": "2942319",
    "end": "2948880"
  },
  {
    "text": "years they still exist and there's still a little bit of a concern in 2020 even",
    "start": "2948880",
    "end": "2954880"
  },
  {
    "text": "for some vendors which are not which are considered to be",
    "start": "2954880",
    "end": "2961599"
  },
  {
    "text": "uh good on providing quality products in a way but it depends on",
    "start": "2961599",
    "end": "2970400"
  },
  {
    "text": "who you compare it to uh those vectors are um the smi uh",
    "start": "2970400",
    "end": "2977440"
  },
  {
    "text": "uh callouts uh well-known attack vectors and get variable various ways of misusing get variables",
    "start": "2977440",
    "end": "2983920"
  },
  {
    "text": "from a dixie stage from smm stage and from a platform insanitation stage",
    "start": "2983920",
    "end": "2991520"
  },
  {
    "text": "from there we want to say that we despite the fact that we built a thing",
    "start": "2991839",
    "end": "2998400"
  },
  {
    "text": "which works and we give it to security researchers",
    "start": "2998400",
    "end": "3003440"
  },
  {
    "text": "we as a community still need more more tools like that and tools",
    "start": "3003440",
    "end": "3010160"
  },
  {
    "text": "other than that which would help ufi security as a whole uh we would need open usable and working",
    "start": "3010160",
    "end": "3017520"
  },
  {
    "text": "instrument for ufi there is always lack of good instrument",
    "start": "3017520",
    "end": "3023119"
  },
  {
    "text": "for that for that space i would suggest that a lot of tools would would be quite",
    "start": "3023119",
    "end": "3030079"
  },
  {
    "text": "useful for vulnerability research for reverse engineering for automation of those tasks forensics and for data",
    "start": "3030079",
    "end": "3035920"
  },
  {
    "text": "science there are still a lot of open problems there and there's still much less instrument to investigate and",
    "start": "3035920",
    "end": "3043200"
  },
  {
    "text": "to inspect what's actually in there and what's hidden there what's hidden there by the attackers what's hidden",
    "start": "3043200",
    "end": "3049200"
  },
  {
    "text": "there by threat actors what's hidden there by vendors and what's hidden there",
    "start": "3049200",
    "end": "3054559"
  },
  {
    "text": "by whoever else we just didn't know and from there when we have tools and",
    "start": "3054559",
    "end": "3061119"
  },
  {
    "text": "instruments when we have more of that it's about right time for a much broader audience to take a look at the problem",
    "start": "3061119",
    "end": "3067599"
  },
  {
    "text": "of potential uefa implants i would say potential because actually",
    "start": "3067599",
    "end": "3072880"
  },
  {
    "text": "no one knows what's there and it's about right time to take a look",
    "start": "3072880",
    "end": "3078319"
  },
  {
    "text": "and try to answer this question because it's just interesting to know what's what's in there",
    "start": "3078319",
    "end": "3083920"
  },
  {
    "text": "what implants might be there who knows",
    "start": "3083920",
    "end": "3088558"
  },
  {
    "text": "this is all thank you for your attention and stay safe",
    "start": "3090400",
    "end": "3096240"
  }
]