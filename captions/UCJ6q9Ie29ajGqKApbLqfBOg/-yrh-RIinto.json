[
  {
    "start": "0",
    "end": "131000"
  },
  {
    "text": "hello and welcome everybody to my talk analyzing and breaking cue annex exploit mitigations and peering G's for",
    "start": "30",
    "end": "5670"
  },
  {
    "text": "automotive industrial medical and other embedded systems my name is Jose vessels and I'm an independent security",
    "start": "5670",
    "end": "12150"
  },
  {
    "text": "researcher with midnight blue where I mainly focus on a better system security I previously worked as a researcher at",
    "start": "12150",
    "end": "18480"
  },
  {
    "text": "the University of Twente in the Netherlands focusing on the critical infrastructure protection mainly and most of this work was done as part of my",
    "start": "18480",
    "end": "25619"
  },
  {
    "text": "master's thesis at the Eindhoven University of Technology also in the Netherlands and this research was done",
    "start": "25619",
    "end": "31009"
  },
  {
    "text": "together with my colleague Ali Abbas II he's a PhD candidate at the hind Open",
    "start": "31009",
    "end": "36059"
  },
  {
    "text": "University of Technology and a visiting researcher at the rural university of bokram in Germany where he mainly",
    "start": "36059",
    "end": "41070"
  },
  {
    "text": "focuses on industrial control systems security and embedded binary security so",
    "start": "41070",
    "end": "46410"
  },
  {
    "text": "I want to start off with a little road map today I'm gonna start with an introduction to cue annex what exactly",
    "start": "46410",
    "end": "52710"
  },
  {
    "text": "is it then I'm gonna move on to the operating system and security architecture outline before discussing",
    "start": "52710",
    "end": "57899"
  },
  {
    "text": "the given Experion G's and the exploitation and finishing off with some final remarks so what exactly is given X",
    "start": "57899",
    "end": "65610"
  },
  {
    "text": "Q annex is a unix-like POSIX compliant real-time embedded operating system was",
    "start": "65610",
    "end": "70740"
  },
  {
    "text": "initially released in 1982 and later acquired by blackberry which is also its current owner it's closed source and",
    "start": "70740",
    "end": "77700"
  },
  {
    "text": "proprietary there are two main lines of queuing excu nix 6.6 these days released",
    "start": "77700",
    "end": "83880"
  },
  {
    "text": "in March of 2014 which is a 32-bit operating system in UNIX 7 which is a",
    "start": "83880",
    "end": "89490"
  },
  {
    "text": "64-bit operating system which was released in March of 2017 it's most famously known for use in",
    "start": "89490",
    "end": "96270"
  },
  {
    "text": "mobile devices such as BlackBerry 10 and like very tablet operating systems where it forms the core basis of the operating",
    "start": "96270",
    "end": "102119"
  },
  {
    "text": "system but really this is only the tip of the iceberg of conics usage especially these days",
    "start": "102119",
    "end": "107310"
  },
  {
    "text": "it's far more well known for its use for example in automotive systems blackberry",
    "start": "107310",
    "end": "112920"
  },
  {
    "text": "absolutely dominates the infotainment market you find it in a lot of in vehicle in for infotainment systems in telematics",
    "start": "112920",
    "end": "118770"
  },
  {
    "text": "control units and so on as you can see for example most famously it was used in",
    "start": "118770",
    "end": "123780"
  },
  {
    "text": "the infotainment unit which featured in the hack by Charlie Miller and Chris valasek an",
    "start": "123780",
    "end": "130780"
  },
  {
    "text": "or use of Q Nixon automotive is as part of blackberry radar which is a fleet monitoring solution used for trailers",
    "start": "130780",
    "end": "137440"
  },
  {
    "start": "131000",
    "end": "131000"
  },
  {
    "text": "flatbeds fans heavy equipment and here it provides asset tracking and telematics functionality which allows",
    "start": "137440",
    "end": "143230"
  },
  {
    "text": "for cargo integrity and anti-theft functionality as well as preventative maintenance and operational efficiency",
    "start": "143230",
    "end": "149520"
  },
  {
    "text": "and finally use of Q Knicks and automotive systems or projected use is",
    "start": "149520",
    "end": "154930"
  },
  {
    "text": "it used in autonomous vehicles so blackberry Korea has created an Innovation Center for connected and",
    "start": "154930",
    "end": "160570"
  },
  {
    "text": "autonomous vehicles and partner with various big players and vidya delphi",
    "start": "160570",
    "end": "165730"
  },
  {
    "text": "automotive Baidu which all seek to integrate Q and X as part of their self driving car platforms and the industrial",
    "start": "165730",
    "end": "174340"
  },
  {
    "start": "173000",
    "end": "173000"
  },
  {
    "text": "sector are you encountered in the more high-end systems as well for example in the nuclear HMI systems by Westinghouse",
    "start": "174340",
    "end": "181030"
  },
  {
    "text": "a flat panel display system which forms an interface between the safety system processor and and I human machine",
    "start": "181030",
    "end": "188950"
  },
  {
    "text": "interface this place this runs on Q annex a much older version that I'm gonna discuss today q Nix for but yeah",
    "start": "188950",
    "end": "196209"
  },
  {
    "text": "you can see that this is a quite an important sector to work to take a look at as well it's used in defense",
    "start": "196209",
    "end": "201579"
  },
  {
    "start": "201000",
    "end": "201000"
  },
  {
    "text": "applications a lot too one example but just one out of many is the fact that it's used in the Harris Falcon 3 line of",
    "start": "201579",
    "end": "207910"
  },
  {
    "text": "tactical radios work UNIX forms the basis of the operating system there and you can find it in medical sector as",
    "start": "207910",
    "end": "215049"
  },
  {
    "start": "213000",
    "end": "213000"
  },
  {
    "text": "well surgical robots such as the one by DLR or it's used in micro surgery",
    "start": "215049",
    "end": "220140"
  },
  {
    "text": "applications another very interesting use case is in carrier routers because Q",
    "start": "220140",
    "end": "226750"
  },
  {
    "start": "222000",
    "end": "222000"
  },
  {
    "text": "and X as you can see on the right of the slide from the basis of Cisco's iOS 6 are operating system which runs on the C",
    "start": "226750",
    "end": "233730"
  },
  {
    "text": "rs.12000 and ASR 9000 series and neuro",
    "start": "233730",
    "end": "239079"
  },
  {
    "start": "239000",
    "end": "239000"
  },
  {
    "text": "of course many many more critical systems where you can find Q annex from inertial control sectors such as surface",
    "start": "239079",
    "end": "244660"
  },
  {
    "text": "mining control turbine controllers to defense and aerospace such as anti-tank guidance or UAVs real safety equipments",
    "start": "244660",
    "end": "252310"
  },
  {
    "text": "and cancer therapy machines so this should be sufficient reason to be interested in the security of Q and X",
    "start": "252310",
    "end": "258180"
  },
  {
    "text": "now what some of you might have seen my talk at and not last year's but the year before",
    "start": "258180",
    "end": "263710"
  },
  {
    "start": "259000",
    "end": "259000"
  },
  {
    "text": "that wheel of fortune and the CCC which discussed PRNG issues and various",
    "start": "263710",
    "end": "269259"
  },
  {
    "text": "embedded operating systems including cue annex now in this talk I will discuss new cue annex 7 user space in kernel",
    "start": "269259",
    "end": "276280"
  },
  {
    "text": "space peering G's which were introduced as part of that assessment or as a result of that assessment I should say",
    "start": "276280",
    "end": "282729"
  },
  {
    "text": "and the exploit mitigations in Kunik 6 & 7 which have not been discussed before yet so let's start off with the",
    "start": "282729",
    "end": "289539"
  },
  {
    "text": "operating system and security architecture of QNX ik UNIX is a true microkernel",
    "start": "289539",
    "end": "294699"
  },
  {
    "start": "292000",
    "end": "292000"
  },
  {
    "text": "architecture which means that only the most basic operating system functionalities such as the scheduler message passing and interrupt handling",
    "start": "294699",
    "end": "301449"
  },
  {
    "text": "is located in the kernel you can see on the on the left while all other functionality is included in user space",
    "start": "301449",
    "end": "307690"
  },
  {
    "text": "so these things run a separate processes outside of the kernel and that includes traditional functionality which would be",
    "start": "307690",
    "end": "314139"
  },
  {
    "text": "located in the kernel in a monolithic operating system such as file system functionality various kinds of drivers",
    "start": "314139",
    "end": "320020"
  },
  {
    "text": "protocol stacks you name it and the result of this is that it's a much more robust operating",
    "start": "320020",
    "end": "327490"
  },
  {
    "text": "system because if one of these operating components system components fails and it doesn't bring down the entire kernel",
    "start": "327490",
    "end": "333789"
  },
  {
    "text": "with it so that allows for great use in safety and survivability applications in",
    "start": "333789",
    "end": "341500"
  },
  {
    "start": "341000",
    "end": "341000"
  },
  {
    "text": "order for these components of the operating system to communicate with each other qnx works by IPC message",
    "start": "341500",
    "end": "347560"
  },
  {
    "text": "passing and this is basically a client-server architecture where you have a client application such as some",
    "start": "347560",
    "end": "353020"
  },
  {
    "text": "process running in user space communicating with another functionality of the operating system or a protocol",
    "start": "353020",
    "end": "359770"
  },
  {
    "text": "stack or a driver residing user space and communicating through the microkernel by passing messages which",
    "start": "359770",
    "end": "366520"
  },
  {
    "text": "are specific to this particular functionality so the attack surface",
    "start": "366520",
    "end": "372909"
  },
  {
    "start": "371000",
    "end": "371000"
  },
  {
    "text": "roughly looks as follows as you can see here on the slide now on the right side",
    "start": "372909",
    "end": "379029"
  },
  {
    "text": "you have the remote attack surface Fork UNIX which consists of the network managers various kinds of packet drivers",
    "start": "379029",
    "end": "385080"
  },
  {
    "text": "protocol modules different things like the communications device drivers and",
    "start": "385080",
    "end": "390789"
  },
  {
    "text": "various networks services which are used to in most UNIX environments and on the left you have",
    "start": "390789",
    "end": "396070"
  },
  {
    "text": "the local attack surface which consists of that process manager the path manager memory manager resource managers for",
    "start": "396070",
    "end": "403300"
  },
  {
    "text": "various custom IO and lures the PPS architecture and various kinds of device",
    "start": "403300",
    "end": "408670"
  },
  {
    "text": "drivers which might be written by third-party applications file system graphics and audio stuff and of course",
    "start": "408670",
    "end": "415390"
  },
  {
    "text": "there's the microkernel itself but because there is so little functionality in there the attack surface there is",
    "start": "415390",
    "end": "420610"
  },
  {
    "text": "very limited as well on the plus side for attackers at least is the fact that",
    "start": "420610",
    "end": "426220"
  },
  {
    "text": "you don't actually need to attack the microkernel to get root access attacking",
    "start": "426220",
    "end": "431440"
  },
  {
    "text": "one of the processes that runners root locally can be sufficient for elevating",
    "start": "431440",
    "end": "436660"
  },
  {
    "text": "privileges as well so a little bit about blackberry and by the communiques",
    "start": "436660",
    "end": "442150"
  },
  {
    "start": "439000",
    "end": "439000"
  },
  {
    "text": "security history so there hasn't been a ton of research out there most of the",
    "start": "442150",
    "end": "447460"
  },
  {
    "text": "research that has been out there has been a byproduct of the BlackBerry mobile research mainly in the period from 2011 to 2014 this was followed by",
    "start": "447460",
    "end": "457090"
  },
  {
    "text": "some research on Kunik sie PCP PS and kernel call security by Alex Plaskett at all in 2016 various individual",
    "start": "457090",
    "end": "465340"
  },
  {
    "text": "vulnerabilities were discovered over the years as you can see on the pie chart on the right this was mainly set UID logic",
    "start": "465340",
    "end": "472180"
  },
  {
    "text": "bugs and various kinds of memory corruption issues buffer overflows and so on what's interesting to see is that",
    "start": "472180",
    "end": "479940"
  },
  {
    "text": "you can find a lot of set UID logic bugs that you would expect to encounter in a",
    "start": "479940",
    "end": "485290"
  },
  {
    "text": "very old unix-like system you know if you go back to the early 2000s there are",
    "start": "485290",
    "end": "491110"
  },
  {
    "text": "a lot of memory corruption issues in various standard utility still even in the graphical user interface that were",
    "start": "491110",
    "end": "497650"
  },
  {
    "text": "discovered and lots of insecure permission settings so this was the attack surface in the security history",
    "start": "497650",
    "end": "504670"
  },
  {
    "text": "when I started looking at Unix another interesting thing to notice is",
    "start": "504670",
    "end": "510640"
  },
  {
    "text": "that Q Nix had received some interest from the CIA which was revealed in the",
    "start": "510640",
    "end": "516370"
  },
  {
    "text": "WikiLeaks fall seven releases or they listed it as one of the targets for the embedded development branch because of",
    "start": "516370",
    "end": "523810"
  },
  {
    "text": "its use in automotive systems now they hadn't done any work as of 2014 according to",
    "start": "523810",
    "end": "529560"
  },
  {
    "text": "the leaks of course we don't know if anything has advanced past that so to summarize there has been no prior",
    "start": "529560",
    "end": "535860"
  },
  {
    "text": "work on exploit mitigations or peering G's Fork UNIX up until this point and there has been almost no prior work on",
    "start": "535860",
    "end": "541950"
  },
  {
    "text": "any of the internals so far but that's changing so to start off Kunik supports",
    "start": "541950",
    "end": "548490"
  },
  {
    "start": "545000",
    "end": "545000"
  },
  {
    "text": "a minimal set of native system calls because it's true microkernel and these system calls mainly related to threading",
    "start": "548490",
    "end": "554640"
  },
  {
    "text": "message passing signals clocks interrupt handlers and all this very basic functionality and for comparison q Nix",
    "start": "554640",
    "end": "560880"
  },
  {
    "text": "has less than 90 system calls compared to Linux which is over 300 so you can see how lightweight and have small the",
    "start": "560880",
    "end": "567390"
  },
  {
    "text": "attack surface for the microkernel is here the prototypes release things are defined in the neutrino dot H header",
    "start": "567390",
    "end": "573840"
  },
  {
    "text": "file of course because it's a POSIX compliant operating system it does implement all the system call",
    "start": "573840",
    "end": "580230"
  },
  {
    "text": "functionality that comes with it at weight does this is by implementing these functions in Lib C as message",
    "start": "580230",
    "end": "586200"
  },
  {
    "text": "passing stops which basically wrap around calls to other uses space processes which actually implement it",
    "start": "586200",
    "end": "591840"
  },
  {
    "text": "instead of native system calls the way this works is native system calls are",
    "start": "591840",
    "end": "597840"
  },
  {
    "text": "invoked with the usual instructions sis enter interrupt 0 X 28 as WI or SP see",
    "start": "597840",
    "end": "604440"
  },
  {
    "text": "on arm SC on PowerPC the system call number is located in a X on x86 on",
    "start": "604440",
    "end": "611820"
  },
  {
    "text": "register 12 on arm and on register 0 on PPC and the listings for for this system",
    "start": "611820",
    "end": "618840"
  },
  {
    "text": "called invocation stubs are in kernel calls of age and the system call entry point in the in the microkernel is",
    "start": "618840",
    "end": "627000"
  },
  {
    "text": "located at the Kerr entry or curses enter symbol and here the registers are saved switch is made to the kernel stack",
    "start": "627000",
    "end": "634110"
  },
  {
    "text": "the active kernel thread is retrieved and then we wait until we are on the right CPU and we acquire a kernel and",
    "start": "634110",
    "end": "640560"
  },
  {
    "text": "actually dispatch the kernel call which is done by a simple call to the system called index in the kernel called table",
    "start": "640560",
    "end": "648830"
  },
  {
    "text": "so the communiques boot process",
    "start": "648830",
    "end": "653090"
  },
  {
    "start": "649000",
    "end": "649000"
  },
  {
    "text": "Nik UNIX boot process works by after power on having hardware being",
    "start": "655820",
    "end": "661140"
  },
  {
    "text": "initialized then having the initial program loader the IPL copy the image file system the ifs to RAM then you get",
    "start": "661140",
    "end": "669660"
  },
  {
    "text": "a startup program which depends on the kind of architecture around for example a startup program for the BIOS if",
    "start": "669660",
    "end": "675660"
  },
  {
    "text": "there's one present which configures the system interrupt controllers and so on which then passes control to the actual",
    "start": "675660",
    "end": "682140"
  },
  {
    "text": "microkernel called proc antio onk UNIX which sets up the kernel and then runs the boot file a build file such as a",
    "start": "682140",
    "end": "689190"
  },
  {
    "text": "boot script which initializes the drivers in user space and our operating system components and then the full",
    "start": "689190",
    "end": "695790"
  },
  {
    "text": "system is initialized AK UNIX firmware is relatively straightforward there are",
    "start": "695790",
    "end": "701490"
  },
  {
    "start": "698000",
    "end": "698000"
  },
  {
    "text": "very various q Nix operating system packages Kunik Skaar Kunik safety Unix",
    "start": "701490",
    "end": "706680"
  },
  {
    "text": "medical but under the hood these are all roughly the same it's all the same try no microkernel and the core services",
    "start": "706680",
    "end": "713550"
  },
  {
    "text": "binaries are the same as well the only differences here are really unusual and",
    "start": "713550",
    "end": "719390"
  },
  {
    "text": "binaries that you find packaged with the decor and the microkernel binaries the",
    "start": "719390",
    "end": "725279"
  },
  {
    "text": "QX images come in three flavors an operating system image which is called the ifs and pictured on the right of the",
    "start": "725279",
    "end": "731550"
  },
  {
    "text": "slide well it looks like a flash file system image called the EFS and then we",
    "start": "731550",
    "end": "737070"
  },
  {
    "text": "have an embedded transaction file system image called the ETFs and these can be combined into a single image stored on a",
    "start": "737070",
    "end": "743730"
  },
  {
    "text": "NAND flash chip as you can see on the right of the of the slide so this is how you might encounter this in some",
    "start": "743730",
    "end": "750089"
  },
  {
    "text": "embedded systems now unpacking it is very easy because UNIX has provided us",
    "start": "750089",
    "end": "756120"
  },
  {
    "text": "with a dump ifs and dump EFS utilities so if you encounter a firmware image and you chop it into the EFS and the EFS",
    "start": "756120",
    "end": "762750"
  },
  {
    "text": "faul faul segments then you can quickly unpack it with these standard utilities",
    "start": "762750",
    "end": "768360"
  },
  {
    "text": "that have been provided by communiques and the Kunik memory layout is divided",
    "start": "768360",
    "end": "773700"
  },
  {
    "start": "771000",
    "end": "771000"
  },
  {
    "text": "into a kernel space part and a user space part which are separated so that only the microkernel truly runs into",
    "start": "773700",
    "end": "781140"
  },
  {
    "text": "kernel space user space has separate of sensitive code from regular applications by means of virtual private",
    "start": "781140",
    "end": "788750"
  },
  {
    "text": "memory at least if a memory management unit is present on part of the hardware and this allows you to enforce unix-like",
    "start": "788750",
    "end": "796279"
  },
  {
    "text": "process access controls as you can see on the bottom of the slide AK UNIX user",
    "start": "796279",
    "end": "801800"
  },
  {
    "start": "801000",
    "end": "801000"
  },
  {
    "text": "management is really what you're used to in most unix-like environments if your user and file permission model which is",
    "start": "801800",
    "end": "808610"
  },
  {
    "text": "all mostly the same etc pass would be group and shadow files you have the",
    "start": "808610",
    "end": "814399"
  },
  {
    "text": "usual login utilities you have some support for mandatory access control listings and what's interesting is that",
    "start": "814399",
    "end": "820339"
  },
  {
    "text": "qx6 hashes use sha-256 or five one two by default but there is",
    "start": "820339",
    "end": "825680"
  },
  {
    "text": "big backwards compatibility support for md5 des crypt and a legacy Kunik script",
    "start": "825680",
    "end": "831970"
  },
  {
    "text": "hashing scheme which is not really a hashing scheme because it's fully invertible as you can see on the right",
    "start": "831970",
    "end": "838459"
  },
  {
    "text": "of the slide news posting from 2000 and what's interesting is that this backwards",
    "start": "838459",
    "end": "843649"
  },
  {
    "text": "compatibility is enabled in some systems for backwards compatibility support with",
    "start": "843649",
    "end": "849500"
  },
  {
    "text": "older build images so you might still encounter punic 6 images where you have",
    "start": "849500",
    "end": "854810"
  },
  {
    "text": "des crypt or md5 and that's interesting for embedded systems because a crack",
    "start": "854810",
    "end": "859970"
  },
  {
    "text": "root or maintenance password in embedded systems can have a very high shelf life because of course updates are not as",
    "start": "859970",
    "end": "865930"
  },
  {
    "text": "frequent there as you might expect in the general-purpose world as of queuing X 7 or patched versions of Kunik 6.6 the",
    "start": "865930",
    "end": "873439"
  },
  {
    "text": "default hashing scheme is pbkdf2 I would sha-256 or sha-512 so that's an",
    "start": "873439",
    "end": "879230"
  },
  {
    "text": "improvement qnx process management is done by the process manager which is",
    "start": "879230",
    "end": "884990"
  },
  {
    "start": "881000",
    "end": "881000"
  },
  {
    "text": "combined with a microkernel in one executable and it runs as a root process with PID 1 and invokes a microkernel in",
    "start": "884990",
    "end": "892819"
  },
  {
    "text": "the same way as every other process despite the fact that it's packaged with within the same executable but it has a",
    "start": "892819",
    "end": "898910"
  },
  {
    "text": "special flag which allows it to call a specific system call called ring zero",
    "start": "898910",
    "end": "904490"
  },
  {
    "text": "which allows you to execute arbitrary code within ring zero if you're in possession of this this process flag at",
    "start": "904490",
    "end": "911600"
  },
  {
    "text": "our support for usual POSIX stuff spawn fork exact all the can stuff and qnx uses the elf format for",
    "start": "911600",
    "end": "917590"
  },
  {
    "text": "its binaries what's interesting to note is is that if the filesystem is on a block oriented device code and data are",
    "start": "917590",
    "end": "924850"
  },
  {
    "text": "loaded into main memory but if the filesystem is on a memory map device for example on flash it can be executed in",
    "start": "924850",
    "end": "931690"
  },
  {
    "text": "place which means that multiple instances of the same process will share code memory that's something to keep in",
    "start": "931690",
    "end": "938350"
  },
  {
    "text": "mind Kunik support for process abilities in a form of proc manager ability which",
    "start": "938350",
    "end": "944950"
  },
  {
    "text": "is very similar to the Linux capabilities model you can obtain capabilities before dropping root privileges if you want to be able to do",
    "start": "944950",
    "end": "951520"
  },
  {
    "text": "some things but not allow all of the things to a particular process you can",
    "start": "951520",
    "end": "956530"
  },
  {
    "text": "restrict actions for even root processes in this way and this is integral to q and XS rootless execution security model",
    "start": "956530",
    "end": "964510"
  },
  {
    "text": "by ensuring some degree of the principle of least privilege abilities have a domain for rude users or non-root users",
    "start": "964510",
    "end": "971890"
  },
  {
    "text": "they have a range restricting it to certain values inheritability lock",
    "start": "971890",
    "end": "976930"
  },
  {
    "text": "ability etcetera so you can for example if you want to be able to use the spawn set your ID system call you can restrict",
    "start": "976930",
    "end": "982870"
  },
  {
    "text": "the range for the set you Eddie's they're allowed to be spawned by a certain process and you can specify",
    "start": "982870",
    "end": "988180"
  },
  {
    "text": "custom abilities as well if you're a system integrator now there are some",
    "start": "988180",
    "end": "993610"
  },
  {
    "start": "992000",
    "end": "992000"
  },
  {
    "text": "limitations to this model which are not actually included in the documentation or discussed out there if people want to",
    "start": "993610",
    "end": "1000420"
  },
  {
    "text": "adopt a rootless execution model so it's up to the developers and the system integrators to really get this right you",
    "start": "1000420",
    "end": "1007350"
  },
  {
    "text": "need to watch out with inheritability because in heritability is inheritable itself and that means that if you want",
    "start": "1007350",
    "end": "1013380"
  },
  {
    "text": "an ability to be inheritable by a child process but not by the child processes of that child process then you need to",
    "start": "1013380",
    "end": "1019710"
  },
  {
    "text": "explicitly state this some system calls honor this inheritability others do not",
    "start": "1019710",
    "end": "1025709"
  },
  {
    "text": "and this is not very well documented which do and which do not some functionality remains uncovered by",
    "start": "1025710",
    "end": "1032130"
  },
  {
    "text": "capabilities file system functionality for example networking functionality so don't treat this like an actual sandbox",
    "start": "1032130",
    "end": "1038069"
  },
  {
    "text": "which some people do but it's not some capabilities don't have ranges for example if you want to be able to spawn",
    "start": "1038070",
    "end": "1044730"
  },
  {
    "text": "processes you cannot specify which process you are allowed to spawn in which you are not various",
    "start": "1044730",
    "end": "1050240"
  },
  {
    "text": "capabilities can be used to elevate privileges to route even if you're not and some of these are very clear for",
    "start": "1050240",
    "end": "1056900"
  },
  {
    "text": "example the spawns at UID system call but in some other cases it's not that clear for example the 8 interrupts all",
    "start": "1056900",
    "end": "1062690"
  },
  {
    "text": "it's not a true sandbox and you can see here why for example let's say you have a low privilege child process and you",
    "start": "1062690",
    "end": "1069590"
  },
  {
    "start": "1065000",
    "end": "1065000"
  },
  {
    "text": "have IO and intra privileges then you can use this to attach a custom interrupt service routine handler which",
    "start": "1069590",
    "end": "1075919"
  },
  {
    "text": "runs in kernel space and allows you to invoke arbitrary microkernel code obviously for security people it's it's",
    "start": "1075919",
    "end": "1082760"
  },
  {
    "text": "very you know obvious to say well if I can run an interrupt service routine then I can execute within microkernel",
    "start": "1082760",
    "end": "1089360"
  },
  {
    "text": "and then it's game over but for system integrators who can come from a security background this is not",
    "start": "1089360",
    "end": "1094940"
  },
  {
    "text": "that clear especially of all these different calls and the implications are not well documented another interesting",
    "start": "1094940",
    "end": "1103340"
  },
  {
    "start": "1102000",
    "end": "1102000"
  },
  {
    "text": "part of the attack surface is qnet which is a native networking protocol which is",
    "start": "1103340",
    "end": "1108679"
  },
  {
    "text": "laid on top of anything with a packet driver so I previously discussed the IPC",
    "start": "1108679",
    "end": "1113690"
  },
  {
    "text": "security model and this can be extended using qnet so instead of having the communication",
    "start": "1113690",
    "end": "1119570"
  },
  {
    "text": "between components and one microkernel you can extend this over any kind of interconnect so Ethernet or some kind of",
    "start": "1119570",
    "end": "1126679"
  },
  {
    "text": "serial link or whatever and then you can lay qnet on top of that and communicate between different components and",
    "start": "1126679",
    "end": "1133460"
  },
  {
    "text": "different micro kernels so you can have a distributed computing application",
    "start": "1133460",
    "end": "1139630"
  },
  {
    "text": "which interesting is that this is very useful for applications such as inter",
    "start": "1139630",
    "end": "1144860"
  },
  {
    "start": "1140000",
    "end": "1140000"
  },
  {
    "text": "module communication in industrial control systems let's say you have a factory floor and you have one",
    "start": "1144860",
    "end": "1150529"
  },
  {
    "text": "application which is distributed among different machines and you want these to be able to communicate with the same",
    "start": "1150529",
    "end": "1155929"
  },
  {
    "text": "microkernel then you can use this application it's useful in automotive for example if you want to share a",
    "start": "1155929",
    "end": "1161659"
  },
  {
    "text": "cellular modem or a Bluetooth transceiver among many ECU's in some automotive application and it's used in",
    "start": "1161659",
    "end": "1168770"
  },
  {
    "text": "large routers with multiple interface cards for example the lwm IPC and",
    "start": "1168770",
    "end": "1174049"
  },
  {
    "text": "Cisco's iOS X are operating system the way it works qnet is that once you plug in",
    "start": "1174049",
    "end": "1182030"
  },
  {
    "text": "this this driver the net directory is populated by a discovered or mapped qnet",
    "start": "1182030",
    "end": "1187220"
  },
  {
    "text": "nodes as you can see on the slide here and it's really meant to be used among",
    "start": "1187220",
    "end": "1193370"
  },
  {
    "text": "trusted notes this is what they say so they say you know don't expect much security wise it's meant to be used only",
    "start": "1193370",
    "end": "1200180"
  },
  {
    "text": "among trusts at nodes but while this might have been true in the past many of these nodes can no longer be considered",
    "start": "1200180",
    "end": "1207320"
  },
  {
    "text": "trusted in many embedded environments for example another motive system which might have been closed now might have an",
    "start": "1207320",
    "end": "1213770"
  },
  {
    "text": "infotainment or a telematics unit with an internet facing or network facing a text surface so you can no longer",
    "start": "1213770",
    "end": "1220040"
  },
  {
    "text": "consider all of the nodes on that particular Network trusted qnet does not",
    "start": "1220040",
    "end": "1225200"
  },
  {
    "text": "have any kind of authentication it simply passes a user ID as part of the Q net packet to a remote machine and then",
    "start": "1225200",
    "end": "1231770"
  },
  {
    "text": "it trusts that you're not lying this is interesting because you can execute commands remotely over Q net as you can",
    "start": "1231770",
    "end": "1238820"
  },
  {
    "text": "see on the slide here on a local machine and there I'm executing it on a remote node and executing this command without",
    "start": "1238820",
    "end": "1245510"
  },
  {
    "text": "any kind of authentication this means that if I compromised a single qnx machine on a network with multiple qnx",
    "start": "1245510",
    "end": "1253070"
  },
  {
    "text": "machines or the underlying network link then I have access to all the Q net nodes at the particular UID level I",
    "start": "1253070",
    "end": "1259130"
  },
  {
    "text": "already possess on my own machine there's no Q net packet integrity or authentication so I can forge these even",
    "start": "1259130",
    "end": "1266450"
  },
  {
    "text": "if I'm not rude on my local machine then I can still Forge a route ID now there is some kind of protection here in the",
    "start": "1266450",
    "end": "1273740"
  },
  {
    "text": "form of the map any and map route options which are simple similar to the BSD and the vests options and this",
    "start": "1273740",
    "end": "1280820"
  },
  {
    "text": "allows you to map any incoming UID to a low privileged UID so that means that on",
    "start": "1280820",
    "end": "1286130"
  },
  {
    "text": "a particular machine if I receive an incoming packet I can say regardless of whether it's route or whatever I map it",
    "start": "1286130",
    "end": "1292100"
  },
  {
    "text": "to nobody and at least limit some of the harm the problem is that this was not",
    "start": "1292100",
    "end": "1297410"
  },
  {
    "start": "1296000",
    "end": "1296000"
  },
  {
    "text": "implemented fully correctly I discovered a elevation of privileged vulnerability here read permissions of any operations",
    "start": "1297410",
    "end": "1304490"
  },
  {
    "text": "executed over Q net are not properly resolved by the resource manager and it allows for arbitrary remote read access",
    "start": "1304490",
    "end": "1311270"
  },
  {
    "text": "over Union regardless of privileges and this can also be used of course for local arbitrary read access by making a read",
    "start": "1311270",
    "end": "1318140"
  },
  {
    "text": "rug request originated from a remote node so instead of reading locally I dispatch it through",
    "start": "1318140",
    "end": "1323930"
  },
  {
    "text": "Q net over a remote node to actually disclose the local shadow file regardless of my low privileges as you",
    "start": "1323930",
    "end": "1330950"
  },
  {
    "text": "can see there this bypasses these map M&E and map route settings patches",
    "start": "1330950",
    "end": "1336200"
  },
  {
    "text": "available but Q net security is really fundamentally broken if you encounter Q net in an embedded says setting you're",
    "start": "1336200",
    "end": "1343850"
  },
  {
    "text": "usually golden Q niché's has great debugging capabilities sorry Zack UNIX moment x ide which",
    "start": "1343850",
    "end": "1350600"
  },
  {
    "start": "1345000",
    "end": "1345000"
  },
  {
    "text": "integrates gdb debugger capabilities by means of the PD bug utility this allows",
    "start": "1350600",
    "end": "1357230"
  },
  {
    "text": "for process level debugging over serial or tcp/ip this is wrapped by the Q con",
    "start": "1357230",
    "end": "1362900"
  },
  {
    "text": "utility which is used for remote IDE connectivity this starts the PD buck utility on port 8000 a great thing to",
    "start": "1362900",
    "end": "1370760"
  },
  {
    "text": "notice is again here is no authentication so if system integrators failed to remove the debugging utility",
    "start": "1370760",
    "end": "1377810"
  },
  {
    "text": "then you can upload or download files and run anything as route by default on this system and there's already a",
    "start": "1377810",
    "end": "1383780"
  },
  {
    "text": "Metasploit module for this so keep an eye out for that debugging is also",
    "start": "1383780",
    "end": "1389360"
  },
  {
    "text": "facilitated by the dumper utility which is a service that produces post crash core dumps by default in the for dumps",
    "start": "1389360",
    "end": "1395360"
  },
  {
    "text": "directory you can also direct lead dump or running process using this utility and this is very nice for integration",
    "start": "1395360",
    "end": "1401900"
  },
  {
    "text": "into fuzzers if you want to collect all these post-mortem crashes and there is also kernel debugging capability over",
    "start": "1401900",
    "end": "1408200"
  },
  {
    "text": "serial using K debug this needs to be included with the IFS because it's not by default you may need to build this",
    "start": "1408200",
    "end": "1415100"
  },
  {
    "text": "from source depending on the architecture you're using and you need a debuggable version of proc antio for",
    "start": "1415100",
    "end": "1421430"
  },
  {
    "text": "this it's really a pain in the ass to get it working but it can be done if you have the time to spare finally kernel",
    "start": "1421430",
    "end": "1429860"
  },
  {
    "text": "dumps come in a particular format as you can see here you have your signal code",
    "start": "1429860",
    "end": "1435500"
  },
  {
    "text": "and fault options which indicate which can be looked up in the corresponding",
    "start": "1435500",
    "end": "1441290"
  },
  {
    "text": "header files you have the kernel code and data location where the crash occurred you",
    "start": "1441290",
    "end": "1446450"
  },
  {
    "text": "have the kernel state at the time of the crash you have the kernel stack base process and thread IDs on the CPUs that",
    "start": "1446450",
    "end": "1452929"
  },
  {
    "text": "are currently active processing threat flags basically anything you want to get a good look and what cost a particular",
    "start": "1452929",
    "end": "1459109"
  },
  {
    "text": "kernel crash so that brings us to the pseudo-random number generators",
    "start": "1459109",
    "end": "1465909"
  },
  {
    "start": "1473000",
    "end": "1473000"
  },
  {
    "text": "so why take a look at the pier in geez well first of all because the PNG is",
    "start": "1473150",
    "end": "1478190"
  },
  {
    "text": "form the foundation of the wider cryptographic ecosystem and received wisdom for many developers and system",
    "start": "1478190",
    "end": "1484490"
  },
  {
    "text": "integrators is if you need secure randomness just use that random and in my opinion secure randomness provision",
    "start": "1484490",
    "end": "1491809"
  },
  {
    "text": "is a core task of any modern operating system so you should be able to expect some kind of secure pseudo-random number",
    "start": "1491809",
    "end": "1498830"
  },
  {
    "text": "generator to be provided by the operating system secondly because the strength of some exploit mitigations",
    "start": "1498830",
    "end": "1505010"
  },
  {
    "text": "should depend in part on the strength of the peer in G's for example if I can predict the stack canary or the ASLR",
    "start": "1505010",
    "end": "1511520"
  },
  {
    "text": "addresses it makes exploit development a lot easier so you want strong peer in G's to be present on your system now Q",
    "start": "1511520",
    "end": "1519320"
  },
  {
    "start": "1518000",
    "end": "1518000"
  },
  {
    "text": "Nix has two security-oriented peering G's the first is the use of space PNG which is accessed through the dev random",
    "start": "1519320",
    "end": "1526190"
  },
  {
    "text": "interface and this is handled by the user space service random which is run as root",
    "start": "1526190",
    "end": "1531230"
  },
  {
    "text": "this is started after boot by the startup script as you can see here it's",
    "start": "1531230",
    "end": "1536360"
  },
  {
    "text": "run run as a user space service and then you have a second kernel space PNG",
    "start": "1536360",
    "end": "1542390"
  },
  {
    "text": "introduced in Kunik 7 which is implemented in a microkernel as a function named random value and this",
    "start": "1542390",
    "end": "1548210"
  },
  {
    "text": "cannot be accessed directly in the user space it's only for kernel space now the Kunik 6 def random user space",
    "start": "1548210",
    "end": "1556400"
  },
  {
    "start": "1553000",
    "end": "1553000"
  },
  {
    "text": "PNG was covered in our talk wheel of fortune' at 33 c 3 so give a brief recap",
    "start": "1556400",
    "end": "1562670"
  },
  {
    "text": "here the underlying PNG is based on the yellow PNG by Bruce Schneier at all but",
    "start": "1562670",
    "end": "1568370"
  },
  {
    "text": "it turned out to be based on an older version of yarrow and not the reference hero 160 so it was a version that was",
    "start": "1568370",
    "end": "1574700"
  },
  {
    "text": "put out before yarrow was actually fully will not standardized but fully finalized and on top of that they",
    "start": "1574700",
    "end": "1581809"
  },
  {
    "text": "integrated a bunch of sketchy cryptographic design decisions or I'll save you the details but just to give",
    "start": "1581809",
    "end": "1587540"
  },
  {
    "text": "you an overview the boot time entropy gathering happens on the top right you",
    "start": "1587540",
    "end": "1594679"
  },
  {
    "text": "have the clock time the clock cycles the process pids and device names which were all concatenated and pulled through",
    "start": "1594679",
    "end": "1600559"
  },
  {
    "text": "sha-1 and that creates the initial state of course that that ensures terrible",
    "start": "1600559",
    "end": "1606029"
  },
  {
    "text": "diamond trip equality because you know the process IDs and the device names are not gonna vary on an embedded system on",
    "start": "1606029",
    "end": "1612210"
  },
  {
    "text": "every startup and the clock cycles and clock time just provide too little entropy to make for a good initial State",
    "start": "1612210",
    "end": "1618409"
  },
  {
    "text": "on top of that they had broken receive control which meant that the the runtime",
    "start": "1618409",
    "end": "1623909"
  },
  {
    "text": "entropy collection which happens on the bottom of the slide was implemented and it was running but they never actually",
    "start": "1623909",
    "end": "1629999"
  },
  {
    "text": "mixed any of the entropy gathered at runtime back into the pool again so the only entropy that was in the system was",
    "start": "1629999",
    "end": "1636119"
  },
  {
    "text": "the one that was present at boot time so yeah that was quite terrible then the",
    "start": "1636119",
    "end": "1641190"
  },
  {
    "text": "runtime entropy selection was also left up to system integrators so they had to decide for example from what interrupt",
    "start": "1641190",
    "end": "1648539"
  },
  {
    "text": "sources to gather their entropy and this is kind of a hard decision if you're not a security engineer so there was a lot",
    "start": "1648539",
    "end": "1655739"
  },
  {
    "text": "of rope for people to hang themselves with now after our assessment of communiques six",
    "start": "1655739",
    "end": "1661859"
  },
  {
    "text": "we contacted blackberry and gave them some some some design advice and they",
    "start": "1661859",
    "end": "1668759"
  },
  {
    "text": "incorporated this into the nuke UNIX dev random Kunik seven dev random user space",
    "start": "1668759",
    "end": "1674099"
  },
  {
    "text": "PNG they now use the Heimdall fortuna implementation and they have some new entropy sources they have new reset",
    "start": "1674099",
    "end": "1680190"
  },
  {
    "text": "control mechanism the overall quality seems much better than qx6 and the potential for weaknesses still remains",
    "start": "1680190",
    "end": "1686429"
  },
  {
    "text": "depending on system integration conditions but is a little bit less so what does it look like well it looks",
    "start": "1686429",
    "end": "1692700"
  },
  {
    "text": "like this so the source is in green are the new sources on Q and x7 so now you",
    "start": "1692700",
    "end": "1699089"
  },
  {
    "text": "have a seed file source which basically means that once the system starts up you can specify a particular file with some",
    "start": "1699089",
    "end": "1705869"
  },
  {
    "text": "entropy and this will be used as boot time entropy to be mixed into the entropy pool and when the system shuts",
    "start": "1705869",
    "end": "1711359"
  },
  {
    "text": "down it can write this to a file again and so you have new entropy for the next boot and this is to really address low",
    "start": "1711359",
    "end": "1717330"
  },
  {
    "text": "boot time entropy conditions which are really common in embedded systems because at boot time there's not a lot of activity going on the second new",
    "start": "1717330",
    "end": "1725639"
  },
  {
    "text": "source is the user supplied entropy so users can write our own entropy gathering daemon which can be whatever",
    "start": "1725639",
    "end": "1731489"
  },
  {
    "text": "people want depending on the embedded device they're using even number generator and then they can",
    "start": "1731489",
    "end": "1737370"
  },
  {
    "text": "simply write to the dev random interface and add entropy to the pool it's",
    "start": "1737370",
    "end": "1742470"
  },
  {
    "text": "interesting to notice that this interface is left right world writable by default which can be a problem",
    "start": "1742470",
    "end": "1748470"
  },
  {
    "text": "depending on how many other entropy sources have been selected so you might want to watch out for that if you if you",
    "start": "1748470",
    "end": "1755130"
  },
  {
    "text": "encounter a UNIX system finally they have a new receipt source which works by",
    "start": "1755130",
    "end": "1760410"
  },
  {
    "text": "using our C for random which basically is seeded with output of the PNG itself",
    "start": "1760410",
    "end": "1766080"
  },
  {
    "text": "which is not bad but in in addition it uses the process ID again the time of",
    "start": "1766080",
    "end": "1771660"
  },
  {
    "text": "day and the user ID which are static so that doesn't add a whole lot it's better",
    "start": "1771660",
    "end": "1776669"
  },
  {
    "text": "but it's still not not perfect to be honest in addition to the Qun x7 user",
    "start": "1776669",
    "end": "1783390"
  },
  {
    "start": "1781000",
    "end": "1781000"
  },
  {
    "text": "space PNG is now also introduced colonel PNG for randomness that is needed within a microkernel itself because you know",
    "start": "1783390",
    "end": "1790530"
  },
  {
    "text": "the user space PNG starts up after boot and you might need early boot randomness the communiques",
    "start": "1790530",
    "end": "1796679"
  },
  {
    "text": "seven kernel PNG is used for a SLR stack Canaries and that kind of functionality",
    "start": "1796679",
    "end": "1801960"
  },
  {
    "text": "and it works basically as follows so you have a couple of sources clock cycles",
    "start": "1801960",
    "end": "1807210"
  },
  {
    "text": "the currently active process ID the currently the current time in nanoseconds the wakeup timer which is",
    "start": "1807210",
    "end": "1815850"
  },
  {
    "text": "basically a timer that is set for the kernel to trigger some activity and various kinds of these sources are all",
    "start": "1815850",
    "end": "1821520"
  },
  {
    "text": "concatenated into one PNG input block that's pulled through sha-256 and that",
    "start": "1821520",
    "end": "1827130"
  },
  {
    "text": "results in appear in G state the spear in G state is chopped into 32 bit blocks the first block is kept secret and is",
    "start": "1827130",
    "end": "1834450"
  },
  {
    "text": "stored as a salt and the next block that's output as a 32 bit random value",
    "start": "1834450",
    "end": "1840330"
  },
  {
    "text": "and then when the next call is made the this salt is included as part of the new input and these boot then the next block",
    "start": "1840330",
    "end": "1848850"
  },
  {
    "text": "is taken the next block in the next block and the next block until the PNG state is exhausted and then the whole",
    "start": "1848850",
    "end": "1854010"
  },
  {
    "text": "thing starts again in addition to these sources there is now also assist random",
    "start": "1854010",
    "end": "1860669"
  },
  {
    "text": "system call and this new system call which requires a certain communiques capability allows users to",
    "start": "1860669",
    "end": "1868789"
  },
  {
    "text": "supply some randomness for the criminal PNG as well this is a big improvement",
    "start": "1868789",
    "end": "1874249"
  },
  {
    "text": "over kianak 7 which did not have any kind of secure and earnest in the kernel",
    "start": "1874249",
    "end": "1879789"
  },
  {
    "text": "and this brings us to the exploit mitigations so weíll look at exploit",
    "start": "1879789",
    "end": "1894320"
  },
  {
    "start": "1884000",
    "end": "1884000"
  },
  {
    "text": "mitigations well the mitigations in the general-purpose world didn't come falling from the sky and there is a",
    "start": "1894320",
    "end": "1901249"
  },
  {
    "text": "history of weaknesses and bypasses in the general-purpose world which have led to the current state of hardening that",
    "start": "1901249",
    "end": "1908149"
  },
  {
    "text": "we've come to expect there for example if you look at Windows it took years and years to get to the point where we are",
    "start": "1908149",
    "end": "1913639"
  },
  {
    "text": "now and the same holds for for Linux and smartphone operating systems iOS and we",
    "start": "1913639",
    "end": "1920480"
  },
  {
    "text": "don't have a history like this in most embedded systems communiques doesn't have a history like this",
    "start": "1920480",
    "end": "1926480"
  },
  {
    "text": "so that's a reason to start taking an offensive look and the implementations of their mitigation and I have to say",
    "start": "1926480",
    "end": "1933320"
  },
  {
    "text": "that qnx is already doing quite well comparative to many other embedded operating systems because they even",
    "start": "1933320",
    "end": "1939200"
  },
  {
    "text": "bother to implement any mitigations in the first place so CUNY to exploit",
    "start": "1939200",
    "end": "1944779"
  },
  {
    "start": "1942000",
    "end": "1942000"
  },
  {
    "text": "mitigations for what does it have support it has support for data execution prevention and as support for",
    "start": "1944779",
    "end": "1950509"
  },
  {
    "text": "address space layout randomization and a support for stack Canaries and it has support for relocation read-only but",
    "start": "1950509",
    "end": "1956749"
  },
  {
    "text": "none of these are enabled by default so yeah it might still be that even if you",
    "start": "1956749",
    "end": "1961879"
  },
  {
    "text": "encounter latest version of unix in a system that none of these medications",
    "start": "1961879",
    "end": "1967100"
  },
  {
    "text": "are actually enabled despite them being supported and it might still be exploding like it's the 90s but at least",
    "start": "1967100",
    "end": "1973879"
  },
  {
    "text": "they they are supported in theory so the you should surpass expect any kind of",
    "start": "1973879",
    "end": "1979490"
  },
  {
    "text": "support for advanced mitigation such as feed table protection control flow integrity kernel data and code isolation",
    "start": "1979490",
    "end": "1986480"
  },
  {
    "text": "none of this is present just the ones that are listed here QX DP works by being based on hardware",
    "start": "1986480",
    "end": "1994340"
  },
  {
    "start": "1991000",
    "end": "1991000"
  },
  {
    "text": "based DP support the a bit on on x86 the example on arm that",
    "start": "1994340",
    "end": "2000860"
  },
  {
    "text": "kind of stuff there is support for the x86 architecture for the ARM architecture",
    "start": "2000860",
    "end": "2005930"
  },
  {
    "text": "version six however there is no support for this feature on MIPS and for PowerPC",
    "start": "2005930",
    "end": "2012380"
  },
  {
    "text": "it varies but you know that's that's a logical considering PowerPC there are",
    "start": "2012380",
    "end": "2019070"
  },
  {
    "text": "the problem with given X DP is the fact that it has insecure default settings so",
    "start": "2019070",
    "end": "2024590"
  },
  {
    "text": "by default the stack is always left executable even if you're running on a",
    "start": "2024590",
    "end": "2029630"
  },
  {
    "text": "system with an X support and even if this is enabled the stack will still be left executable and any new stack elf",
    "start": "2029630",
    "end": "2037280"
  },
  {
    "text": "program headers in the old binary are completely ignored by the program loader so even if you set up your linker",
    "start": "2037280",
    "end": "2043730"
  },
  {
    "text": "correct even if you have you know the correct architecture all that kind of stuff you will still have an executable stack you can only make this tag",
    "start": "2043730",
    "end": "2051710"
  },
  {
    "text": "non-executive all by specifying this particular start up flag in the microkernel startup options which makes",
    "start": "2051710",
    "end": "2058550"
  },
  {
    "text": "it stack not execute all and the problem here is that this is a system-wide setting without opt outs so if you ever",
    "start": "2058550",
    "end": "2064610"
  },
  {
    "text": "for whatever reason need legacy executables or an executable switch for",
    "start": "2064610",
    "end": "2069710"
  },
  {
    "text": "example have executable code on the stack for whatever reason then it's not backwards compatibility for this stuff",
    "start": "2069710",
    "end": "2074960"
  },
  {
    "text": "so for this reason they decided not to fix their particular situation and the",
    "start": "2074960",
    "end": "2080389"
  },
  {
    "text": "issue is still present on Kunik 6 & 7 and it makes for an interesting thing if",
    "start": "2080390",
    "end": "2085850"
  },
  {
    "text": "you see a Q and X image inspect whether that flag is within the microkernel startup options because if it's not you",
    "start": "2085850",
    "end": "2092360"
  },
  {
    "text": "don't even have to bother with a lot of the other stuff that brings us to the second mitigation unix ASLR this is",
    "start": "2092360",
    "end": "2099350"
  },
  {
    "text": "again enabled by starting the microkernel with specific flag child",
    "start": "2099350",
    "end": "2104660"
  },
  {
    "text": "process inherent our parents is lower settings and these can be enabled or disabled on a per process basis so you",
    "start": "2104660",
    "end": "2111320"
  },
  {
    "text": "have a good opt-out scheme here place if people specify it right objects are",
    "start": "2111320",
    "end": "2116780"
  },
  {
    "text": "randomized at the base address level which is not very fine-grained but it goes for most a SLR implementations and",
    "start": "2116780",
    "end": "2123620"
  },
  {
    "text": "all memory objects are randomized except for the kernel code image which you know it's only",
    "start": "2123620",
    "end": "2130190"
  },
  {
    "text": "terrible if you really value kasl are a lot and embedded systems you can see here all the things on the right of the",
    "start": "2130190",
    "end": "2136940"
  },
  {
    "text": "slide that are randomized by given X a SLR by position independent executables",
    "start": "2136940",
    "end": "2142610"
  },
  {
    "text": "are disabled by default in the tool chain and you can really see the result of this that no system binaries by",
    "start": "2142610",
    "end": "2148520"
  },
  {
    "text": "default have any PI in the images you your encounter so people will need to explicitly build their base system and",
    "start": "2148520",
    "end": "2156080"
  },
  {
    "text": "any subsequent executables when on the fault toolchain settings to have PI enabled so in order to figure out how Q",
    "start": "2156080",
    "end": "2164330"
  },
  {
    "text": "annex SLR works under the hood reverse-engineer the memory manager and it's mapped out in in short form here",
    "start": "2164330",
    "end": "2170480"
  },
  {
    "text": "and what it really comes down to is that basically all the memory functionality",
    "start": "2170480",
    "end": "2176000"
  },
  {
    "text": "is under the hood implemented using a map and randomization happens at two points which are colored in blue stack",
    "start": "2176000",
    "end": "2183590"
  },
  {
    "text": "randomized and map find VA and both of them rely on the same random number",
    "start": "2183590",
    "end": "2189230"
  },
  {
    "text": "generator so let's start with map find VA which is a function that among other",
    "start": "2189230",
    "end": "2194810"
  },
  {
    "start": "2191000",
    "end": "2191000"
  },
  {
    "text": "things randomizes virtual addresses which are returned by the M map call and the randomization here happens as you",
    "start": "2194810",
    "end": "2201020"
  },
  {
    "text": "can see on the right of the slide by subtracting or adding a random value from or to the found virtual address so",
    "start": "2201020",
    "end": "2206840"
  },
  {
    "text": "it takes a lower 32 bits of the random number generator result bitwise left shift and by 12 extracts a lower 24 bits",
    "start": "2206840",
    "end": "2213860"
  },
  {
    "text": "and then applies that to the end result and the problem already the first",
    "start": "2213860",
    "end": "2220100"
  },
  {
    "text": "problem is that it contributes and most twelve bits of entropy here because of the bit mask that's applied but as well",
    "start": "2220100",
    "end": "2226040"
  },
  {
    "text": "see this is worse in practice the second function is stack randomized and well it",
    "start": "2226040",
    "end": "2231920"
  },
  {
    "start": "2228000",
    "end": "2228000"
  },
  {
    "text": "does what it says on the tin it randomizes the stack start address so once you allocate is stack either when",
    "start": "2231920",
    "end": "2237440"
  },
  {
    "text": "the process is started itself or when a new thread is spawned with its own stack this function that's applied to any",
    "start": "2237440",
    "end": "2244130"
  },
  {
    "text": "allocated new stack and the randomization happens as you can see on the right of the slide again in the same",
    "start": "2244130",
    "end": "2249500"
  },
  {
    "text": "fashion by subtracting a random value from the original stack pointer you take the lower 32 bits of the random number",
    "start": "2249500",
    "end": "2255320"
  },
  {
    "text": "generator result bit was left shift them by 4 and that most the lower 11 bits are extracted again because of this bit mask",
    "start": "2255320",
    "end": "2263730"
  },
  {
    "text": "it contributes at most 7 bits of entropy depending on the stack size as you can",
    "start": "2263730",
    "end": "2268799"
  },
  {
    "text": "see how the the bit mask is constructed there and again this is worse in practice this is mitigated a little bit",
    "start": "2268799",
    "end": "2275819"
  },
  {
    "text": "by the fact that it's combined with the results of map find VA because any stack is first allocated using M map and then",
    "start": "2275819",
    "end": "2281910"
  },
  {
    "text": "this function gets applied but in practice that doesn't really matter the",
    "start": "2281910",
    "end": "2291299"
  },
  {
    "start": "2287000",
    "end": "2287000"
  },
  {
    "text": "real problem is that Kunik 6 is a SLR has a weak random number generator these",
    "start": "2291299",
    "end": "2297180"
  },
  {
    "text": "upper bounds we gave of 12 bits and 7 bits are actually optimistic so Kunik 6",
    "start": "2297180",
    "end": "2302999"
  },
  {
    "text": "is a SLR uses a random number generator that's basically a single call to the clock cycle system call a clock cycles",
    "start": "2302999",
    "end": "2310259"
  },
  {
    "text": "as the name already says retrieves a 64 bit freerunning cycle counter an",
    "start": "2310259",
    "end": "2315359"
  },
  {
    "text": "implementation of which is architecture-specific so next 86 it will be a simple call to our DTSC which",
    "start": "2315359",
    "end": "2322200"
  },
  {
    "text": "receives the time stamp counter armed it's the result of some some emulation of this functionality on MIPS it will",
    "start": "2322200",
    "end": "2328529"
  },
  {
    "text": "retrieve the counter register and PPC TBF and on Super HD TMU so it's all more",
    "start": "2328529",
    "end": "2334470"
  },
  {
    "text": "or less similar to our DTSC now this is not a strong use of randomness we",
    "start": "2334470",
    "end": "2342690"
  },
  {
    "text": "evaluated the actual entropy of this this particular use and we measured processes across different boot sessions",
    "start": "2342690",
    "end": "2349619"
  },
  {
    "text": "and various different kinds of processes and harvested their memory object addresses then we evaluated them using",
    "start": "2349619",
    "end": "2356430"
  },
  {
    "text": "the nist SP 890 be and should be source testing tool to obtain min entropy",
    "start": "2356430",
    "end": "2361680"
  },
  {
    "text": "estimates and just a brief reminder 256 bits of uniformly random data should",
    "start": "2361680",
    "end": "2367140"
  },
  {
    "text": "correspond to 256 bits of min and trippy now the average min entropy of an ASL",
    "start": "2367140",
    "end": "2372749"
  },
  {
    "text": "are protected address and qnx is four point four seven bits and this is very weak if you compare it to for example on",
    "start": "2372749",
    "end": "2379529"
  },
  {
    "text": "the right of the slide mainline linux aslr or the pax SLR implementations we have entropy between",
    "start": "2379529",
    "end": "2387150"
  },
  {
    "text": "27 bits or at least 5.7 bits of entropy and why is this a",
    "start": "2387150",
    "end": "2394320"
  },
  {
    "start": "2393000",
    "end": "2393000"
  },
  {
    "text": "problem well this is a problem for example remotely because of brute-forcing attacks if you have memory",
    "start": "2394320",
    "end": "2404190"
  },
  {
    "text": "layered inheritance which you haven't qyx that means that if you fork a process the child process will copy the",
    "start": "2404190",
    "end": "2410880"
  },
  {
    "text": "memory layout of the parent and this happens after a SLR is applied so that",
    "start": "2410880",
    "end": "2416670"
  },
  {
    "text": "means that a child will have the same a SLR randomization applied to it as the",
    "start": "2416670",
    "end": "2422010"
  },
  {
    "text": "parent now if you have an attacker for example attacking a network application which upon every new",
    "start": "2422010",
    "end": "2429420"
  },
  {
    "text": "connection Forks a client a child process to handle this client connection then an attacker can brute force this",
    "start": "2429420",
    "end": "2436110"
  },
  {
    "text": "address and try one candidate the child will will will die if it's not the",
    "start": "2436110",
    "end": "2441420"
  },
  {
    "text": "correct address and then the next one will be respond and the next one in the next one the next one and if you don't",
    "start": "2441420",
    "end": "2446850"
  },
  {
    "text": "have enough entropy in this in these addresses your brute force might be successful within a reasonable time",
    "start": "2446850",
    "end": "2453600"
  },
  {
    "text": "frame and is this reasonable within practice well yes as you can see on the",
    "start": "2453600",
    "end": "2458610"
  },
  {
    "text": "left of the slide you have a demo vulnerable service protected by Q annex",
    "start": "2458610",
    "end": "2463830"
  },
  {
    "text": "a SLR and on the right of the slide in 23 seconds you can remotely exploit this and pop a root so that that's not a lot",
    "start": "2463830",
    "end": "2471540"
  },
  {
    "text": "of good for a SLR of course not only does it have a weak random number",
    "start": "2471540",
    "end": "2478080"
  },
  {
    "start": "2474000",
    "end": "2474000"
  },
  {
    "text": "generator there are a lot of attack factors outside of that as well which includes a lot of local information",
    "start": "2478080",
    "end": "2483210"
  },
  {
    "text": "leaks and I'm gonna discuss two of them but there are many many more out there than I'm sure anyone who takes a glance",
    "start": "2483210",
    "end": "2489420"
  },
  {
    "text": "at it will find for example in the process file system there was a very",
    "start": "2489420",
    "end": "2495390"
  },
  {
    "text": "interesting info leak ik unix-like many unix-like systems as a virtual process file system which for every entry in",
    "start": "2495390",
    "end": "2502580"
  },
  {
    "text": "every running process as an corresponding entry in this directory with information about the process and",
    "start": "2502580",
    "end": "2508860"
  },
  {
    "text": "you can query this information using the DEF CDL API which retrieves information such as the memory map current register",
    "start": "2508860",
    "end": "2516510"
  },
  {
    "text": "values and all that kind of juicy information as you can see on the top of the slide the permissions are set the",
    "start": "2516510",
    "end": "2523080"
  },
  {
    "text": "world readable which is very interesting because that allows you to she can see",
    "start": "2523080",
    "end": "2528359"
  },
  {
    "text": "here retrieve as a low privileged user the complete memory layout of high",
    "start": "2528359",
    "end": "2533369"
  },
  {
    "text": "privileged processes including microkernel which kind of defeats the purpose of any a SLR because the goal of",
    "start": "2533369",
    "end": "2539519"
  },
  {
    "text": "a SLR is not so much randomization as it is the insurance of memory layout secrecy to prevent code reuse attacks",
    "start": "2539519",
    "end": "2546170"
  },
  {
    "text": "the interesting thing is that even if you can't compile your own utility to exploit this locally you can use the PID",
    "start": "2546170",
    "end": "2554069"
  },
  {
    "text": "end utility which is provided by Q and it's itself to achieve a similar result so that's very nice second information",
    "start": "2554069",
    "end": "2562229"
  },
  {
    "start": "2561000",
    "end": "2561000"
  },
  {
    "text": "leaked I discovered was recited in LD debug which is an environment variable which allows you to specify some",
    "start": "2562229",
    "end": "2568979"
  },
  {
    "text": "information for debugging and the interesting thing is that it has a debug option called all which you can use to",
    "start": "2568979",
    "end": "2576420"
  },
  {
    "text": "start an application with full debugging capabilities but this does not do any kind of privilege checking so if I have",
    "start": "2576420",
    "end": "2583499"
  },
  {
    "text": "a set UID binary that's set UID root I started and I'm a low privileged user it",
    "start": "2583499",
    "end": "2589829"
  },
  {
    "text": "fully ignores the fact that I don't have privileges to do whatever I want and then you can see that all the mapped",
    "start": "2589829",
    "end": "2597140"
  },
  {
    "text": "loaded libraries such as Lipsy and the program image base are disclosed to me",
    "start": "2597140",
    "end": "2602160"
  },
  {
    "text": "regardless of any kind of a SLR or privilege settings now in Kunik seven as",
    "start": "2602160",
    "end": "2609479"
  },
  {
    "start": "2607000",
    "end": "2607000"
  },
  {
    "text": "a result of these reporting's they made some changes as laura is still disabled by default and there's no case a lot but",
    "start": "2609479",
    "end": "2616229"
  },
  {
    "text": "they do use the kernel PNG we previously discussed now so it's it's the entropy is much better in theory unfortunately",
    "start": "2616229",
    "end": "2624269"
  },
  {
    "text": "despite using this new random number generator and having a 64-bit address space and Q and X 7 the low theoretical",
    "start": "2624269",
    "end": "2630690"
  },
  {
    "text": "upper bounds remained because they forgot to remove these bit masks so still the they are bounded by seven bits",
    "start": "2630690",
    "end": "2637950"
  },
  {
    "text": "for the stack and twelve bits excuse me and twelve bits for everything else and as you can see here the code is always",
    "start": "2637950",
    "end": "2646049"
  },
  {
    "text": "loaded into the lower 32 bits of the address space so this this really reduces the usefulness of a SLR even on",
    "start": "2646049",
    "end": "2652710"
  },
  {
    "text": "Q and X 7 I've been told by blackberry working on changing this but I haven't had any any update yet so even new",
    "start": "2652710",
    "end": "2660480"
  },
  {
    "text": "communiques 7 has this problem they did fix the LD debug issue but",
    "start": "2660480",
    "end": "2666299"
  },
  {
    "text": "unfortunately they did not completely fix the proc FS issue what they did as you can see on the slide is restrict any",
    "start": "2666299",
    "end": "2674670"
  },
  {
    "text": "kind of reading using the PID end utility which is included with given X by default so this does two privilege",
    "start": "2674670",
    "end": "2681059"
  },
  {
    "text": "checking but if you write your own C application that discloses this",
    "start": "2681059",
    "end": "2686609"
  },
  {
    "text": "information you can still read from higher privileged processes so there's an info leak that's that we an out dirty",
    "start": "2686609",
    "end": "2692400"
  },
  {
    "text": "use that brings us to the stack Canaries kyun X uses GCC stack smashing protector",
    "start": "2692400",
    "end": "2698700"
  },
  {
    "start": "2694000",
    "end": "2694000"
  },
  {
    "text": "for this so you're probably all familiar with that and the computer compiler side it's what we're used to and it's mostly",
    "start": "2698700",
    "end": "2705930"
  },
  {
    "text": "okay on the operating system side however the implementations are custom and user space master cannery is",
    "start": "2705930",
    "end": "2712170"
  },
  {
    "text": "generated the program startup when Lipsy is loaded but it doesn't use lip as a space guard setup function but a custom",
    "start": "2712170",
    "end": "2718319"
  },
  {
    "text": "init cookie functions to actually initialize the master cannery again the",
    "start": "2718319",
    "end": "2724349"
  },
  {
    "start": "2723000",
    "end": "2723000"
  },
  {
    "text": "problem here is low entropy so it draws entropy from three sources only two of which are relevant to phase lares",
    "start": "2724349",
    "end": "2730739"
  },
  {
    "text": "enabled and all of them are again based on clock cycles here you can see our DTSC and it's sort would be the address",
    "start": "2730739",
    "end": "2737910"
  },
  {
    "text": "of a local stack variable and the address of the function itself which are only randomized if aslr is enabled and",
    "start": "2737910",
    "end": "2743279"
  },
  {
    "text": "of course also rely on clock cycles again we did an evaluation of the entropy here as well across three",
    "start": "2743279",
    "end": "2750119"
  },
  {
    "text": "configurations without a SLR with asel arabic without pi and with a SLR and pi",
    "start": "2750119",
    "end": "2755489"
  },
  {
    "text": "and the average minute reprieve found to be seven point seven nine bits which is less than ideal because using a secure",
    "start": "2755489",
    "end": "2762299"
  },
  {
    "text": "random number generator you should have had 24 bits of min and repeat considering that they use one byte for a",
    "start": "2762299",
    "end": "2768390"
  },
  {
    "text": "null byte in Terminator style cannery form so this is unusual space but in",
    "start": "2768390",
    "end": "2775410"
  },
  {
    "start": "2773000",
    "end": "2773000"
  },
  {
    "text": "kernel space the problems with the Canaries are even worse because the microkernel is nice loaded nor linked against Lipsy the",
    "start": "2775410",
    "end": "2782690"
  },
  {
    "text": "master can you generation cannot be done by any cookies unfortunately q annex forgot to implement any kind of",
    "start": "2782690",
    "end": "2789170"
  },
  {
    "text": "replacement master kanri generation routine and as a result kernel-space canneries are used everywhere throughout",
    "start": "2789170",
    "end": "2795950"
  },
  {
    "text": "the microkernel but they're never actually generated sort of always left to zero which is a very predictable",
    "start": "2795950",
    "end": "2801740"
  },
  {
    "text": "gamma-ray value and makes it more or less useless as of Kunik 7 they have",
    "start": "2801740",
    "end": "2807859"
  },
  {
    "start": "2806000",
    "end": "2806000"
  },
  {
    "text": "some changes they're now enabled by default the Canaries it generates 64 bit Canaries and as per our advice in",
    "start": "2807859",
    "end": "2815540"
  },
  {
    "text": "userspace kyun X now mixes in an alpha ciliary factor value with the unit cookie stuff which is basically drawn",
    "start": "2815540",
    "end": "2822260"
  },
  {
    "text": "from the kernel space P&G transport it to user space and mixed in with the previous stuff we saw and for kernel",
    "start": "2822260",
    "end": "2829099"
  },
  {
    "text": "space they simply concatenate two 32-bit kernel PNG values during very early boot",
    "start": "2829099",
    "end": "2834440"
  },
  {
    "text": "so stack Canaries are more or less fixed in communiques 7 now that brings us to",
    "start": "2834440",
    "end": "2840260"
  },
  {
    "start": "2839000",
    "end": "2839000"
  },
  {
    "text": "the final mitigation relocation read only to explain what is lesser-known",
    "start": "2840260",
    "end": "2845810"
  },
  {
    "text": "mitigation is about dynamically linked binaries use relocation to do runtime lookup of symbols that reside in shared",
    "start": "2845810",
    "end": "2852589"
  },
  {
    "text": "libraries as you can see on the right of the slide and this relocation data is a",
    "start": "2852589",
    "end": "2857630"
  },
  {
    "text": "very popular target for overriding to hijack control flow because of our hijack one of the got BLT entries for",
    "start": "2857630",
    "end": "2864200"
  },
  {
    "text": "example then once this particular function gets called I can hijack control flow it's interesting because",
    "start": "2864200",
    "end": "2870440"
  },
  {
    "text": "this this particular area doesn't get randomized in many systems and one of",
    "start": "2870440",
    "end": "2878630"
  },
  {
    "text": "these implementations of this mitigation is partial railroad where we can reorder elf sections so that internal data like",
    "start": "2878630",
    "end": "2885560"
  },
  {
    "text": "the global offset table and structures and stuff like that precedes any program data like the data and the BSS section",
    "start": "2885560",
    "end": "2892640"
  },
  {
    "text": "the relocation data is then made we only by covering it with a kernel Rio segment",
    "start": "2892640",
    "end": "2897770"
  },
  {
    "text": "after relocation but the problem is because of what they call lazy binding",
    "start": "2897770",
    "end": "2903160"
  },
  {
    "text": "the PLT god will still be writable and why is that the case because most of",
    "start": "2903160",
    "end": "2908390"
  },
  {
    "text": "these symbols will be looked up only runtime which means that you cannot make them readable right away because they",
    "start": "2908390",
    "end": "2915390"
  },
  {
    "text": "need to be writable during dynamic lookup and that means that the most interesting part of the of these these",
    "start": "2915390",
    "end": "2922680"
  },
  {
    "text": "sections will still be writable and this is well full railroad comes in this basically works by disabling lazy",
    "start": "2922680",
    "end": "2929130"
  },
  {
    "text": "binding and resolving all the symbols at load time which makes for slower load times but you know that's that's the the",
    "start": "2929130",
    "end": "2936239"
  },
  {
    "text": "price you have to pay and then appeal to God as only read is also read only",
    "start": "2936239",
    "end": "2942229"
  },
  {
    "start": "2941000",
    "end": "2941000"
  },
  {
    "text": "unfortunately on-q annex they did implement this but they implemented it in a fully broken way on the left you",
    "start": "2942739",
    "end": "2949229"
  },
  {
    "text": "can see the implementation on Debian where the canoe railroad segment covers all of the sections including the global",
    "start": "2949229",
    "end": "2955109"
  },
  {
    "text": "offset table and on the right you can see the implementation on Q and X 6.6 and here you can see that they forgot to",
    "start": "2955109",
    "end": "2963119"
  },
  {
    "text": "relocate the global offset table before the program data so the program data is",
    "start": "2963119",
    "end": "2968519"
  },
  {
    "text": "in between all these internal data sections and and the got which means",
    "start": "2968519",
    "end": "2974099"
  },
  {
    "text": "that the god is not actually me made read-only and that means that even though you set up your linker correctly",
    "start": "2974099",
    "end": "2980819"
  },
  {
    "text": "and you think you're protected by rail row the God is still rideable here you",
    "start": "2980819",
    "end": "2986369"
  },
  {
    "text": "can see how that works out in practice on the left you have an Debian Linux one application protected railroad and we",
    "start": "2986369",
    "end": "2992880"
  },
  {
    "text": "cannot write to the particular enter entry in the gob PLT and on the right",
    "start": "2992880",
    "end": "2998400"
  },
  {
    "text": "you have the same application with the same linker settings on cue annex 6.6 and we can actually bypass that despite",
    "start": "2998400",
    "end": "3005420"
  },
  {
    "text": "the protection which should have been active so we also found a local bypass",
    "start": "3005420",
    "end": "3010670"
  },
  {
    "start": "3008000",
    "end": "3008000"
  },
  {
    "text": "which was very weird apparently all the debug has an undocumented option called imposter which does nothing except for",
    "start": "3010670",
    "end": "3017660"
  },
  {
    "text": "disabling railroad without any kind of privilege checks this is nice if you want to exploit set UID binaries locally",
    "start": "3017660",
    "end": "3024259"
  },
  {
    "text": "now both of these issues are fixed with patches fork UNIX 6.6 and QX 7 however",
    "start": "3024259",
    "end": "3029289"
  },
  {
    "text": "that brings us to the final remarks so we disclosed all the issues we discussed the Blackberry most of these issues are",
    "start": "3029289",
    "end": "3036259"
  },
  {
    "start": "3032000",
    "end": "3032000"
  },
  {
    "text": "fixed in seven patches 46.6 are available for some of these issues but it will take",
    "start": "3036259",
    "end": "3043160"
  },
  {
    "text": "lots and lots of time before these patches will filter down to the OEMs and end-users in embedded systems people",
    "start": "3043160",
    "end": "3050390"
  },
  {
    "text": "will need to recompile the the operating system ship new firmware images these",
    "start": "3050390",
    "end": "3055700"
  },
  {
    "text": "firmware images will have to be loaded on whatever system so these issues are discussed might be out there in real",
    "start": "3055700",
    "end": "3061160"
  },
  {
    "text": "world systems for years and years to come and in conclusion most of the mitigations were okay on the toolchain",
    "start": "3061160",
    "end": "3067579"
  },
  {
    "start": "3063000",
    "end": "3063000"
  },
  {
    "text": "site and some weak defaults and lingering mistakes but that wasn't the problem but the problems really reside",
    "start": "3067579",
    "end": "3072859"
  },
  {
    "text": "on the operating system side because communiques cannot benefit directly from any work that has been done in general",
    "start": "3072859",
    "end": "3078200"
  },
  {
    "text": "purpose operating system security because it cannot easily port one to one because of a different architectural",
    "start": "3078200",
    "end": "3083780"
  },
  {
    "text": "legacy and the result is a lot of homebrew DIY mitigations what's really evident is the lack of prior attention",
    "start": "3083780",
    "end": "3090109"
  },
  {
    "text": "by security researchers the vulnerabilities that you saw here feel like they're from the early 2000s and we",
    "start": "3090109",
    "end": "3096799"
  },
  {
    "text": "can see time and time again that embedded random number generator design remains difficult entropy issues mean",
    "start": "3096799",
    "end": "3102380"
  },
  {
    "text": "that the design burden usually rests with system integrators and that presents a lot of troubling issues on a",
    "start": "3102380",
    "end": "3109910"
  },
  {
    "text": "positive note q Nix at least attempts to keep up with general purpose operating system security at one of the few non",
    "start": "3109910",
    "end": "3115910"
  },
  {
    "text": "line x bsd and windows-based embedded operating systems with any kind of exploit mitigations whatsoever they had",
    "start": "3115910",
    "end": "3122569"
  },
  {
    "text": "a quick and extensive vendor response and integration of our feedback sometimes directly into the code and",
    "start": "3122569",
    "end": "3127839"
  },
  {
    "text": "what we really need is more attention to embedded operating system security in general you can expect some more Kunik",
    "start": "3127839",
    "end": "3135020"
  },
  {
    "text": "stuff later this year at infiltrate in Miami and that's it if there's any",
    "start": "3135020",
    "end": "3140750"
  },
  {
    "text": "questions I'll take them now yeah",
    "start": "3140750",
    "end": "3149380"
  },
  {
    "text": "[Music]",
    "start": "3151270",
    "end": "3154369"
  },
  {
    "text": "[Music] you mean if they had any driver support",
    "start": "3157580",
    "end": "3164190"
  },
  {
    "text": "for tearing G's stuff like that no I I hadn't seen anything there but I suspect",
    "start": "3164190",
    "end": "3169200"
  },
  {
    "text": "that there are board support packages for particular things maybe by",
    "start": "3169200",
    "end": "3174810"
  },
  {
    "text": "blackberry maybe by third-party vendors but by default they have a very very",
    "start": "3174810",
    "end": "3180360"
  },
  {
    "text": "respect restricted space of entropy sources so I haven't seen anything there already like out-of-the-box TNG support",
    "start": "3180360",
    "end": "3187530"
  },
  {
    "text": "for anything like I don't know what's present on some arm course or whatever there's nothing like that by default any",
    "start": "3187530",
    "end": "3197760"
  },
  {
    "text": "other questions",
    "start": "3197760",
    "end": "3200330"
  },
  {
    "text": "all right thank you [Applause]",
    "start": "3206550",
    "end": "3214519"
  }
]