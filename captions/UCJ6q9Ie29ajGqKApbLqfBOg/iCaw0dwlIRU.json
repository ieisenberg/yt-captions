[
  {
    "start": "0",
    "end": "68000"
  },
  {
    "text": "this session is the Beast is in your memory return oriented programming attacks against modern control flow into",
    "start": "280",
    "end": "6520"
  },
  {
    "text": "Integrity protection techniques um and your speakers are Ahmed sadegi and Daniel",
    "start": "6520",
    "end": "12679"
  },
  {
    "text": "Layman thank you thank you very much introduction uh just a question you in",
    "start": "12679",
    "end": "18439"
  },
  {
    "text": "the back are you hear me okay thank you so my name is Ahmad sadiki uh from",
    "start": "18439",
    "end": "24359"
  },
  {
    "text": "Technical University uh dhad in Germany and Intel uh research lab uh for secure",
    "start": "24359",
    "end": "30599"
  },
  {
    "text": "Computing also in located in darad Germany uh this is a joint work with my",
    "start": "30599",
    "end": "36079"
  },
  {
    "text": "students uh Luca Davi and um Daniel lemman who is here as a co-speaker and",
    "start": "36079",
    "end": "42480"
  },
  {
    "text": "um with a colleague of mine from University of North Carolina at Chapel",
    "start": "42480",
    "end": "47719"
  },
  {
    "text": "Hill so the subject of this talk is the beast in your memory as you see it uh and it is about code reuse attacks",
    "start": "47719",
    "end": "54559"
  },
  {
    "text": "actually the arms race between code reuse attacks and the defenses which",
    "start": "54559",
    "end": "60680"
  },
  {
    "text": "seem to be a very hot topic of research both in Academia and in Industrial",
    "start": "60680",
    "end": "65840"
  },
  {
    "text": "Research um let me start with the outline of uh the talk we going to give",
    "start": "65840",
    "end": "71920"
  },
  {
    "start": "68000",
    "end": "68000"
  },
  {
    "text": "you first a very uh high level introduction to um return ored programming attacks for those of you who",
    "start": "71920",
    "end": "77799"
  },
  {
    "text": "have not heard about it so we are talking about known knowns this is Citation of former Secretary of Defense",
    "start": "77799",
    "end": "84759"
  },
  {
    "text": "Donald Trumps F and people try to make sin over it so does it make sense I",
    "start": "84759",
    "end": "90119"
  },
  {
    "text": "think in that case in in case of my talk it makes sense and then I'm going to talk about control flow Integrity which",
    "start": "90119",
    "end": "96600"
  },
  {
    "text": "is a kind of mitigation techniques against these kind of",
    "start": "96600",
    "end": "101880"
  },
  {
    "text": "attacks General mitigation techniques um then uh we talk about",
    "start": "101880",
    "end": "108159"
  },
  {
    "text": "something which is actually I mean the talk has a kind of pessimistic news um",
    "start": "108159",
    "end": "113560"
  },
  {
    "text": "that is that currently we have no practical and secure defense against uh",
    "start": "113560",
    "end": "118759"
  },
  {
    "text": "return oriented programming code reuse attacks and uh we will show you why because we bypass uh we show how to",
    "start": "118759",
    "end": "125840"
  },
  {
    "text": "bypass the the recent so-called cause grained uh control for integrity so the",
    "start": "125840",
    "end": "131560"
  },
  {
    "text": "defense all the available practical uh defense methods and then Daniel will",
    "start": "131560",
    "end": "137480"
  },
  {
    "text": "also show you how to attack EMT which is a Microsoft uh detection uh tool",
    "start": "137480",
    "end": "145280"
  },
  {
    "text": "available for everyone um against retic programming and he showed how to bypass",
    "start": "145280",
    "end": "151319"
  },
  {
    "text": "this tool although it is Honorable that companies like Microsoft are trying to",
    "start": "151319",
    "end": "156760"
  },
  {
    "text": "uh reduce the number of these attacks because these attacks are very ingenuous and very",
    "start": "156760",
    "end": "163360"
  },
  {
    "text": "important um and then I if there is time I will give some um let's say a brief uh",
    "start": "163360",
    "end": "170360"
  },
  {
    "text": "introduction to um new research directions and future work so I think the to this community",
    "start": "170360",
    "end": "177760"
  },
  {
    "start": "175000",
    "end": "175000"
  },
  {
    "text": "the motivation behind all kind of runtime attacks is clear clear but just",
    "start": "177760",
    "end": "183000"
  },
  {
    "text": "to go through it um and point out some some important facts so we have many applications we want to have more",
    "start": "183000",
    "end": "189920"
  },
  {
    "text": "features and the software is complex and sophisticated um there are different",
    "start": "189920",
    "end": "195720"
  },
  {
    "text": "developers involved and sometimes we sacrifice security for uh for the sake",
    "start": "195720",
    "end": "202200"
  },
  {
    "text": "of functionality uh and also efficiency this is why we have native code in many",
    "start": "202200",
    "end": "208080"
  },
  {
    "text": "places uh so there is a large uh attack surface for runtime attacks um and there",
    "start": "208080",
    "end": "215080"
  },
  {
    "text": "is no ultimate solution for that in the sense that we have no uh ultimate secure programming language that you can use",
    "start": "215080",
    "end": "223280"
  },
  {
    "text": "everywhere however when we talk about complexity of software sometimes we forget that these attacks runtime",
    "start": "223280",
    "end": "229599"
  },
  {
    "text": "attacks also are very severe very crucial against embedded systems and",
    "start": "229599",
    "end": "235640"
  },
  {
    "text": "embedded systems are actually they are pervasive they are every there they are",
    "start": "235640",
    "end": "240680"
  },
  {
    "text": "in your cars they are in your critical infrastructure and these attacks although we uh always think that",
    "start": "240680",
    "end": "246959"
  },
  {
    "text": "embedded systems are much easier and developing uh FM bear for them is easy",
    "start": "246959",
    "end": "252400"
  },
  {
    "text": "and not so complex like for PCs we still have these attacks on ident systems so",
    "start": "252400",
    "end": "259040"
  },
  {
    "start": "258000",
    "end": "258000"
  },
  {
    "text": "just to give a flavor of runtime attacks usually a program you can um kind of",
    "start": "259040",
    "end": "265040"
  },
  {
    "text": "extract a Control Pro graph from this program where the nodes of this graph",
    "start": "265040",
    "end": "270280"
  },
  {
    "text": "are the so-called basic blocks these are set of instructions assembly",
    "start": "270280",
    "end": "275720"
  },
  {
    "text": "instructions with a uh let's say well- defined entry and well- defined exit",
    "start": "275720",
    "end": "281240"
  },
  {
    "text": "point and entry could be any uh instruction that is Target of a branch",
    "start": "281240",
    "end": "287280"
  },
  {
    "text": "and the exit is any branch for example an indirect or direct uh or call or",
    "start": "287280",
    "end": "293400"
  },
  {
    "text": "direct or uh jump uh or a return now if",
    "start": "293400",
    "end": "298960"
  },
  {
    "text": "uh there is a war ability in one of these bbls for example buff overflow",
    "start": "298960",
    "end": "304039"
  },
  {
    "text": "then the adversary can this is the normal approach can either inject the",
    "start": "304039",
    "end": "309080"
  },
  {
    "text": "code so change the control flow of the program or use the the already the code that is",
    "start": "309080",
    "end": "316639"
  },
  {
    "text": "already resding in the program's memory so in the sense that we use the code",
    "start": "316639",
    "end": "322160"
  },
  {
    "text": "again code reuse attacks for example the libraries in the case of code injection",
    "start": "322160",
    "end": "328160"
  },
  {
    "text": "modern systems they use uh data execution prevention or sometimes it is also known by writable",
    "start": "328160",
    "end": "335160"
  },
  {
    "text": "or executable memory pages so you can uh tag a memory page as executable or",
    "start": "335160",
    "end": "340199"
  },
  {
    "text": "writable to kind of uh protect the data segment uh against code execution so it",
    "start": "340199",
    "end": "347600"
  },
  {
    "text": "is only writable not executable so since there are such a",
    "start": "347600",
    "end": "353280"
  },
  {
    "text": "um um let's say prevention uh methods and measures in place we just uh focus",
    "start": "353280",
    "end": "359479"
  },
  {
    "text": "on on code reuse attack because they are more severe and also I think more elegant and in in reality in practice it",
    "start": "359479",
    "end": "366319"
  },
  {
    "text": "is always a combination of these boots so we go for uh code reuse",
    "start": "366319",
    "end": "371759"
  },
  {
    "text": "attacks now sometimes I use return oriented programming interchangeably for",
    "start": "371759",
    "end": "377440"
  },
  {
    "start": "373000",
    "end": "373000"
  },
  {
    "text": "for code reuse attack what is the basic idea behind this attack so if you have a piece of uh text and you check take some",
    "start": "377440",
    "end": "386000"
  },
  {
    "text": "of the letters and put them in a semantically meaningful uh way together then you generate a new word in this",
    "start": "386000",
    "end": "393759"
  },
  {
    "text": "case return oriented programming and this is the principle how these attacks work they use the the code which is",
    "start": "393759",
    "end": "400960"
  },
  {
    "text": "already uh existing in in the program memory chain them together and generate",
    "start": "400960",
    "end": "406720"
  },
  {
    "text": "a payload for an attack now it is very important to know what are the assumptions and what is the",
    "start": "406720",
    "end": "413560"
  },
  {
    "start": "409000",
    "end": "409000"
  },
  {
    "text": "underlying adversary model because in many Publications actually this is not very precisely mentioned so it just give",
    "start": "413560",
    "end": "420720"
  },
  {
    "text": "you a rough informal U introduction of that so the first thing that these",
    "start": "420720",
    "end": "426360"
  },
  {
    "text": "attacks like many other attacks typically assume is that there is a vulnerability in your application like",
    "start": "426360",
    "end": "433160"
  },
  {
    "text": "buff overflow this is a very typical assumption and the application has access to some libraries some code the",
    "start": "433160",
    "end": "441360"
  },
  {
    "text": "second assumption is that the adversary knows the memory layout this is a very important assumption because memory",
    "start": "441360",
    "end": "447639"
  },
  {
    "text": "leakage is is real we cannot assume that",
    "start": "447639",
    "end": "453199"
  },
  {
    "text": "adversary doesn't know the memory layout of your program so this is what we assume the third one is the adversary",
    "start": "453199",
    "end": "459639"
  },
  {
    "text": "has access to a code space and this is where the adversary takes all these",
    "start": "459639",
    "end": "465800"
  },
  {
    "text": "instructions and put them together in a so-called Gadget and Gadget means a",
    "start": "465800",
    "end": "471240"
  },
  {
    "text": "meaningful operation so you put instructions in such a way together that",
    "start": "471240",
    "end": "476319"
  },
  {
    "text": "they U execute a meaningful oper operation and of course these operations",
    "start": "476319",
    "end": "483039"
  },
  {
    "text": "can be like move and whatever call and any other operation that you can put together and for that in many attacks",
    "start": "483039",
    "end": "489759"
  },
  {
    "text": "they use the shared libraries and of course at the end the",
    "start": "489759",
    "end": "495479"
  },
  {
    "text": "attacker can put the payload on a data uh area and just run the payload how",
    "start": "495479",
    "end": "502680"
  },
  {
    "text": "does it work in a in a classical way a return oriented programming so if you have a program stack and program code",
    "start": "502680",
    "end": "509919"
  },
  {
    "start": "503000",
    "end": "503000"
  },
  {
    "text": "there are sequences of code that the adversary wants to access and run these",
    "start": "509919",
    "end": "515080"
  },
  {
    "text": "are assembl instructions and they end with a return and assume that the adversary",
    "start": "515080",
    "end": "521279"
  },
  {
    "text": "even wants to change the value of some of the registers okay so the payload is put on the stack the",
    "start": "521279",
    "end": "529519"
  },
  {
    "text": "payload consist of return addresses and also some values you put them together",
    "start": "529519",
    "end": "535680"
  },
  {
    "text": "and then the stack point that shows the first return address that means this return address executes the first",
    "start": "535680",
    "end": "542640"
  },
  {
    "text": "sequence and then there is a return it comes back to the stack to the second address the stack point of course will",
    "start": "542640",
    "end": "548720"
  },
  {
    "text": "be uh incremented and then the second sequence is run where the values that I",
    "start": "548720",
    "end": "555680"
  },
  {
    "text": "want as an adversary to put into the register are popped from the stack and",
    "start": "555680",
    "end": "560839"
  },
  {
    "text": "put in the stored in the register and that goes on and on until the whole",
    "start": "560839",
    "end": "566240"
  },
  {
    "text": "attack or all the gadgets are executed of course a return oriented programming",
    "start": "566240",
    "end": "571839"
  },
  {
    "start": "568000",
    "end": "568000"
  },
  {
    "text": "this is why classically it is called return oriented program because it uses return addresses however this is not the",
    "start": "571839",
    "end": "578519"
  },
  {
    "text": "case today uh today we use only principle of of return programming if",
    "start": "578519",
    "end": "583920"
  },
  {
    "text": "you look at the history of this is only a snapshot not not really I don't have a let's say claim of uh completeness here",
    "start": "583920",
    "end": "591240"
  },
  {
    "text": "uh it goes back to many years ago as uh people started with attacks like return to LEAP C where you just use the",
    "start": "591240",
    "end": "597640"
  },
  {
    "text": "functions you jump to the functions that are in a library and I personally see",
    "start": "597640",
    "end": "603399"
  },
  {
    "text": "return to lipi as as a instantiation of a generalized return ored programming",
    "start": "603399",
    "end": "609440"
  },
  {
    "text": "now um in the last years if you see that there is a dense uh U let's say you see",
    "start": "609440",
    "end": "615800"
  },
  {
    "text": "that there are more and more attacks in this area both in in both in different communities even Academia started to get",
    "start": "615800",
    "end": "622800"
  },
  {
    "text": "interested in that beside the hacker communities but also at blackhe hat there were many uh papers that use Prin",
    "start": "622800",
    "end": "629320"
  },
  {
    "text": "principles of returned programming and what is important about this attack is that they use the already existing code",
    "start": "629320",
    "end": "636240"
  },
  {
    "text": "and things like attestation in the sense of trusted Computing group so to check the Integrity of the code in a system",
    "start": "636240",
    "end": "644279"
  },
  {
    "text": "you assume a trust anchor and you compute a hash value over the binary and",
    "start": "644279",
    "end": "649560"
  },
  {
    "text": "show it to a verifier and the verifier Compares it to a um uh to some reference",
    "start": "649560",
    "end": "655120"
  },
  {
    "text": "values now if the the attack is there but the uh the code has not changed because we",
    "start": "655120",
    "end": "661519"
  },
  {
    "text": "don't do any code injection the hash value stays the same so we can even bypass any attestation algorithm that we",
    "start": "661519",
    "end": "668240"
  },
  {
    "text": "know at least what is actually propagated by industry um there are also these attacks",
    "start": "668240",
    "end": "675120"
  },
  {
    "text": "have been used uh on mobile phones on different uh uh CPUs and recently we see",
    "start": "675120",
    "end": "681920"
  },
  {
    "text": "them in many commercial um um many commercial products and also open source",
    "start": "681920",
    "end": "689000"
  },
  {
    "text": "product that are exploited by means of these attacks and uh last year we showed",
    "start": "689000",
    "end": "695000"
  },
  {
    "text": "that blackhe hat us uh we showed that there is also a possibility to have a real exploit which is called Just in",
    "start": "695000",
    "end": "702720"
  },
  {
    "text": "Time return oriented programming so it is just in time it does everything really during the uh",
    "start": "702720",
    "end": "710680"
  },
  {
    "text": "runtime so the problem is that existing R attacks they don't need really need to",
    "start": "710680",
    "end": "716760"
  },
  {
    "text": "rely on on returns they can use jumps they can use uh uh they can jump in",
    "start": "716760",
    "end": "723639"
  },
  {
    "text": "between let's say in the middle of of of of instruction depending on the processor architecture so and the second",
    "start": "723639",
    "end": "730720"
  },
  {
    "text": "thing is that they have shown to be touring complete touring complete means that you can emulate arbitrary program",
    "start": "730720",
    "end": "738600"
  },
  {
    "text": "Behavior having specific operations you can put them together and generate a",
    "start": "738600",
    "end": "743760"
  },
  {
    "text": "arbitrary program Behavior this is what we are also going to show here a general defense against these attacks is called",
    "start": "743760",
    "end": "751720"
  },
  {
    "text": "control flow Integrity indeed you want to guarantee the Integrity of your uh program flow so in runtime you check if",
    "start": "751720",
    "end": "759199"
  },
  {
    "text": "the program flow is running as intended Al as a predefined control flow if this",
    "start": "759199",
    "end": "765399"
  },
  {
    "text": "is the case you let the program run otherwise you terminate so how does it work the first",
    "start": "765399",
    "end": "773399"
  },
  {
    "start": "770000",
    "end": "770000"
  },
  {
    "text": "publication in this area I mean decent publication was by Microsoft a body at all and uh so you have a control graph",
    "start": "773399",
    "end": "781120"
  },
  {
    "text": "of your code you label the nodes the nodes just to recall nodes are basic",
    "start": "781120",
    "end": "787560"
  },
  {
    "text": "blocks set of well- defined instructions now when you label them for",
    "start": "787560",
    "end": "796560"
  },
  {
    "text": "example one of the bbls gets uh label a and the other one label B and the CFI",
    "start": "796560",
    "end": "803360"
  },
  {
    "text": "tool checks in runtime if exit a is pointing or branch branching to label B",
    "start": "803360",
    "end": "811040"
  },
  {
    "text": "which is the legitimate uh program R if not in that case it's the red one it",
    "start": "811040",
    "end": "818040"
  },
  {
    "text": "doesn't it terminates so there is of course an advantage you have a kind of fine grain",
    "start": "818040",
    "end": "826160"
  },
  {
    "start": "821000",
    "end": "821000"
  },
  {
    "text": "protection that means every branching is checked so to say however there are",
    "start": "826160",
    "end": "833079"
  },
  {
    "text": "problems with this uh proposal first of all is uh um control flow graph coverage",
    "start": "833079",
    "end": "839600"
  },
  {
    "text": "is an important problem how do you know that your graph because they do a static analysis you don't know that you have",
    "start": "839600",
    "end": "846399"
  },
  {
    "text": "the whole graph because at run time you may have you may have changed the",
    "start": "846399",
    "end": "852240"
  },
  {
    "text": "graph another thing is that they require in their original solution they require",
    "start": "852240",
    "end": "857519"
  },
  {
    "text": "deback symbols and also compiler support which is not available in third party",
    "start": "857519",
    "end": "863320"
  },
  {
    "text": "applications you don't have access to this information another aspect is",
    "start": "863320",
    "end": "868519"
  },
  {
    "text": "performance overhead that could go up to 50% because you check remember the graph",
    "start": "868519",
    "end": "874920"
  },
  {
    "text": "you check every branching so people started to think about",
    "start": "874920",
    "end": "882399"
  },
  {
    "start": "879000",
    "end": "879000"
  },
  {
    "text": "solutions that they call we call it cause grain CFI or control for uh",
    "start": "882399",
    "end": "888079"
  },
  {
    "text": "integrity and the difference here is that they try to be very practical so",
    "start": "888079",
    "end": "893399"
  },
  {
    "text": "they try to um be efficient as possible and uh there are many proposals",
    "start": "893399",
    "end": "900160"
  },
  {
    "text": "as very very established security conferences in the last two years it's a really hot topic of research they are",
    "start": "900160",
    "end": "907120"
  },
  {
    "text": "called differently like rocker or k bouncer or CFI for CS uh binaries uh or",
    "start": "907120",
    "end": "914240"
  },
  {
    "text": "CFI compact CFI randomization it is a CF ccfi rockard and Microsoft emit that",
    "start": "914240",
    "end": "922240"
  },
  {
    "text": "Daniel is going to show how to uh bypass it now uh K bounds received the the",
    "start": "922240",
    "end": "929279"
  },
  {
    "text": "Microsoft blue hat prize which is around $250,000 I mean it's a good for a PhD",
    "start": "929279",
    "end": "935720"
  },
  {
    "text": "student maybe not in Las Vegas but somebody somewhere else um indeed the",
    "start": "935720",
    "end": "942000"
  },
  {
    "text": "question is okay why so many different uh systems and uh are they going to work",
    "start": "942000",
    "end": "948240"
  },
  {
    "text": "in in uh in practice what they promise so what is a general idea behind",
    "start": "948240",
    "end": "954120"
  },
  {
    "start": "951000",
    "end": "951000"
  },
  {
    "text": "all these schemes one idea is that you have this control program",
    "start": "954120",
    "end": "960319"
  },
  {
    "text": "you just label everything in the original CFI now you use some labels",
    "start": "960319",
    "end": "967279"
  },
  {
    "text": "more than once in that case you don't have you don't have really many labels you just",
    "start": "967279",
    "end": "973040"
  },
  {
    "text": "reduce the number of labels or let's say the number of checkpoints and you can also apply some specific policies on it",
    "start": "973040",
    "end": "980120"
  },
  {
    "text": "we're going to see that in a minute however this means that you have also many options for branching because",
    "start": "980120",
    "end": "986800"
  },
  {
    "text": "you reduce the number of labels and this leads to something which we call false",
    "start": "986800",
    "end": "992040"
  },
  {
    "text": "negatives so there is an attack but you don't recognize it as an attack so the promise is that because of",
    "start": "992040",
    "end": "1000800"
  },
  {
    "text": "reducing of number of uh labels we get more efficiency that is true another",
    "start": "1000800",
    "end": "1007079"
  },
  {
    "text": "question is how can I compensate these reducing of labels",
    "start": "1007079",
    "end": "1012440"
  },
  {
    "text": "because I have false negatives so to reduce the false negatives some of these schemes use",
    "start": "1012440",
    "end": "1020839"
  },
  {
    "start": "1015000",
    "end": "1015000"
  },
  {
    "text": "eristics what does it mean they start to think about okay how is the behavior of",
    "start": "1021399",
    "end": "1027760"
  },
  {
    "text": "the control flow graph if if I see the control flow graph how can I estimate the behavior if it's a malicious",
    "start": "1027760",
    "end": "1034319"
  },
  {
    "text": "behavior or not I will come to that later so let us go through how these uh uh schemes work in a at a very high",
    "start": "1034319",
    "end": "1042600"
  },
  {
    "start": "1036000",
    "end": "1036000"
  },
  {
    "text": "level so first of all you have your application and the first observation was okay when I want to check the flow",
    "start": "1042600",
    "end": "1049039"
  },
  {
    "text": "of the program maybe I don't check every branching I just check whenever there is",
    "start": "1049039",
    "end": "1054520"
  },
  {
    "text": "a critical function like a Windows API or a system call a critical system call",
    "start": "1054520",
    "end": "1059880"
  },
  {
    "text": "is invoked only in those cases I in start trigger my my",
    "start": "1059880",
    "end": "1065640"
  },
  {
    "text": "checks so K Bouncer and rocker these are the two tools one of uh two of those",
    "start": "1065640",
    "end": "1072080"
  },
  {
    "text": "tools they don't do binary instrumentation they just hook into",
    "start": "1072080",
    "end": "1077280"
  },
  {
    "text": "these critical functions and whenever the these fre critical functions are invoked they start their",
    "start": "1077280",
    "end": "1084799"
  },
  {
    "text": "checks so but how do they if they don't know the the branching information because they don't do binary",
    "start": "1084799",
    "end": "1091240"
  },
  {
    "text": "instrumentation how do they know the branching information they get this branching information from a register at",
    "start": "1091240",
    "end": "1098720"
  },
  {
    "text": "on on Intel CPU which is called last Branch record it records the last 16",
    "start": "1098720",
    "end": "1105400"
  },
  {
    "text": "branching whatever is was uh was running and the this information is uh",
    "start": "1105400",
    "end": "1113159"
  },
  {
    "text": "taken by these tools and then they do some they apply some policies to it that",
    "start": "1113159",
    "end": "1118559"
  },
  {
    "text": "we are going to see and due to that policies they can estimate is it an",
    "start": "1118559",
    "end": "1123760"
  },
  {
    "text": "attack or not and rer even goes further and hooks",
    "start": "1123760",
    "end": "1129520"
  },
  {
    "text": "into the paging system in the sense that it loads for example two pages it marks it as from the application code it marks",
    "start": "1129520",
    "end": "1136799"
  },
  {
    "text": "it as executable the rest is non exec utable and then after these two pages",
    "start": "1136799",
    "end": "1143840"
  },
  {
    "text": "checked are checked then it starts with the rest but then the the check is",
    "start": "1143840",
    "end": "1149840"
  },
  {
    "text": "triggered because during this uh uh um execution of these uh two pages and um",
    "start": "1149840",
    "end": "1156799"
  },
  {
    "text": "other tools like uh Microsoft EMT and robard which is the kind of basis of of",
    "start": "1156799",
    "end": "1162240"
  },
  {
    "text": "uh uh U Microsoft Mt they don't use any",
    "start": "1162240",
    "end": "1167840"
  },
  {
    "text": "uh last gr so any hardware Assistance or no register of the CPU because uh not",
    "start": "1167840",
    "end": "1173159"
  },
  {
    "text": "every uh CPU has this U um register what they do they they base their analysis",
    "start": "1173159",
    "end": "1179919"
  },
  {
    "text": "only on urtic and we will come to that so they they kind of simulate the behavior of",
    "start": "1179919",
    "end": "1187080"
  },
  {
    "text": "stack or uh more concretely stack pointer and then they decide there is",
    "start": "1187080",
    "end": "1194720"
  },
  {
    "text": "also other uh uh approaches for example CF 5 by uh four Cuts they just get the",
    "start": "1194720",
    "end": "1201880"
  },
  {
    "text": "binary they do an analysis of this binary they they indeed instrument the",
    "start": "1201880",
    "end": "1207159"
  },
  {
    "text": "whole binary so they have they developed lots of tools to instrument uh every",
    "start": "1207159",
    "end": "1212360"
  },
  {
    "text": "binary code according to their claim and then they uh use um kind of policy on",
    "start": "1212360",
    "end": "1218640"
  },
  {
    "text": "that but their policies are not like the original uh CFI uh their policies are more",
    "start": "1218640",
    "end": "1226320"
  },
  {
    "text": "relaxed so what are these policies I was talking about one of these policies is",
    "start": "1226320",
    "end": "1231600"
  },
  {
    "start": "1229000",
    "end": "1229000"
  },
  {
    "text": "called call preceded return address what does it mean in this in the original CFI",
    "start": "1231600",
    "end": "1237799"
  },
  {
    "text": "where you really check every branching returns when you have return",
    "start": "1237799",
    "end": "1242880"
  },
  {
    "text": "address returns need to Target their original",
    "start": "1242880",
    "end": "1248120"
  },
  {
    "text": "colar and for that they do something which is not very efficient they take uh",
    "start": "1248120",
    "end": "1254240"
  },
  {
    "text": "they copy every legitimate return address to a another stack which is",
    "start": "1254240",
    "end": "1259559"
  },
  {
    "text": "called Shadow stack and whenever a return wants to come back the the CFI",
    "start": "1259559",
    "end": "1264600"
  },
  {
    "text": "Checker checks is that the the the actual stack and the address on the",
    "start": "1264600",
    "end": "1270240"
  },
  {
    "text": "shadow stack the legitimate one are equal if yes continue if not",
    "start": "1270240",
    "end": "1275760"
  },
  {
    "text": "terminate and the cor grain cfis where you just have loser policies to be more",
    "start": "1275760",
    "end": "1281880"
  },
  {
    "text": "practical the returns only allow to uh to Target a valid call site and we will",
    "start": "1281880",
    "end": "1288880"
  },
  {
    "text": "see what the valid call site means so if you have an application you have two functions and a library function and as",
    "start": "1288880",
    "end": "1296880"
  },
  {
    "text": "you see this application it has a call here to the library function and here",
    "start": "1296880",
    "end": "1302120"
  },
  {
    "text": "there is also a call there's also a call to open and right now if one of them so these are assembl",
    "start": "1302120",
    "end": "1310360"
  },
  {
    "text": "instructions after the call so the call is made you go to the library function",
    "start": "1310360",
    "end": "1315559"
  },
  {
    "text": "you run it you get the return you come back but then you come back to a",
    "start": "1315559",
    "end": "1320960"
  },
  {
    "text": "instruction which is preceded with a call so it is call preceded the instruction when you come back to this",
    "start": "1320960",
    "end": "1326760"
  },
  {
    "text": "stack there must be a call instruction before you so to say and this is of",
    "start": "1326760",
    "end": "1332760"
  },
  {
    "text": "course allowed according to this policy but also these two are allowed because the instructions after the call the the",
    "start": "1332760",
    "end": "1340279"
  },
  {
    "text": "return is coming to in instruction directly after a call however if it is not the case that",
    "start": "1340279",
    "end": "1347200"
  },
  {
    "text": "you go to this instruction which is which is before a call then it is not allowed so as you see we have different",
    "start": "1347200",
    "end": "1353760"
  },
  {
    "text": "options different call sites so it's a valid call site and this is what you can uh exploit for an",
    "start": "1353760",
    "end": "1359799"
  },
  {
    "start": "1359000",
    "end": "1359000"
  },
  {
    "text": "attack how about the uh heuristics what kind of heuristics these schemes are",
    "start": "1359799",
    "end": "1365400"
  },
  {
    "text": "using they use evaluation um methods so they evaluate a",
    "start": "1365400",
    "end": "1371039"
  },
  {
    "text": "lot of attacks and they see uh to extract certain parameters for example to see how many instructions have have",
    "start": "1371039",
    "end": "1378679"
  },
  {
    "text": "been used for this attack and usually R gadgets are a chain of a small chain of",
    "start": "1378679",
    "end": "1387039"
  },
  {
    "text": "instructions as you see here in the picture for example there is one R sequence that does some function uh it",
    "start": "1387039",
    "end": "1394039"
  },
  {
    "text": "is maybe consist of three instructions another one con consist of four instruction and so on so and if at one",
    "start": "1394039",
    "end": "1402039"
  },
  {
    "text": "place they extract these parameters due massive evaluation with many real life or real",
    "start": "1402039",
    "end": "1407799"
  },
  {
    "text": "world applications to see when applications crash if they change the parameters and uh you can you",
    "start": "1407799",
    "end": "1414559"
  },
  {
    "text": "can compare it to for example RSA encryption when when people uh want to increase the security they they increase",
    "start": "1414559",
    "end": "1421080"
  },
  {
    "text": "the length of the uh prime factors and here is like I have parameters and if I",
    "start": "1421080",
    "end": "1426960"
  },
  {
    "text": "see an attack I I just adjust my parameters in case of K bouncer um the",
    "start": "1426960",
    "end": "1434159"
  },
  {
    "text": "the winner of Microsoft blue hat prize uh they put n which which is the number",
    "start": "1434159",
    "end": "1439400"
  },
  {
    "text": "of sequences and S which is the number of instructions within each sequence",
    "start": "1439400",
    "end": "1446080"
  },
  {
    "text": "must be smaller than 20 so if n is eight they start an alarm and this is shown",
    "start": "1446080",
    "end": "1452960"
  },
  {
    "text": "here in the picture okay now the claim is all these tools including Microsoft",
    "start": "1452960",
    "end": "1459720"
  },
  {
    "text": "EMT uh use Co grain CFI and could indeed",
    "start": "1459720",
    "end": "1465360"
  },
  {
    "text": "uh resist even during uh complete uh return return oriented programming attacks so of course I I just put a a",
    "start": "1465360",
    "end": "1474640"
  },
  {
    "text": "voodoo picture here I'm not saying that they are lying but I'm saying that there are problems",
    "start": "1474640",
    "end": "1482159"
  },
  {
    "start": "1482000",
    "end": "1482000"
  },
  {
    "text": "there okay so what is our contribution uh first of all there is a systematic",
    "start": "1482159",
    "end": "1489240"
  },
  {
    "text": "approach of all these uh mitigation uh",
    "start": "1489240",
    "end": "1494440"
  },
  {
    "text": "techniques uh which are written in our technical report it's it's not it's it's",
    "start": "1494440",
    "end": "1499520"
  },
  {
    "text": "relatively long but uh it is really categorized and a systemat also a",
    "start": "1499520",
    "end": "1505399"
  },
  {
    "text": "systematization of knowledge and then about all kind of uh mitigation",
    "start": "1505399",
    "end": "1510520"
  },
  {
    "text": "techniques the second thing is that we show that even if you take a",
    "start": "1510520",
    "end": "1517120"
  },
  {
    "text": "small Gadget space small instruction space and how you how do you prove that",
    "start": "1517120",
    "end": "1524960"
  },
  {
    "text": "this space of instruction is minimal there's no proof for that because if you are in the software world it's very",
    "start": "1524960",
    "end": "1531159"
  },
  {
    "text": "complicated in practice you just take a uh let's say library function that many",
    "start": "1531159",
    "end": "1537000"
  },
  {
    "text": "application are are using and it is small enough like 800 kilobytes and this is for example uh Daniel is going to",
    "start": "1537000",
    "end": "1544120"
  },
  {
    "text": "talk about it kernel 32 in U um on the",
    "start": "1544120",
    "end": "1549720"
  },
  {
    "text": "windows so and then we show that even on on that small uh space you can find",
    "start": "1549720",
    "end": "1555880"
  },
  {
    "text": "toing uh complete gadgets and then we instantiate that into real world",
    "start": "1555880",
    "end": "1562000"
  },
  {
    "start": "1561000",
    "end": "1561000"
  },
  {
    "text": "exploits so now what we did um we took all these schemes and their policies as",
    "start": "1562000",
    "end": "1567640"
  },
  {
    "text": "you see in this table this is a very simplified table a uh an enhanced really",
    "start": "1567640",
    "end": "1573240"
  },
  {
    "text": "comprehensive one is in in our technical report so if you see there is a CFI policy and there are different schemes",
    "start": "1573240",
    "end": "1579880"
  },
  {
    "text": "as you see it for example in this row there are different schemes and there are different policies for example call",
    "start": "1579880",
    "end": "1586720"
  },
  {
    "text": "preceded uh return and or chain of s short sequences the the",
    "start": "1586720",
    "end": "1592080"
  },
  {
    "text": "euristic so konsai use both of these approaches roer not not both of them and",
    "start": "1592080",
    "end": "1599399"
  },
  {
    "text": "so on and what is also important is time of CFI check when do you trigger your",
    "start": "1599399",
    "end": "1605279"
  },
  {
    "text": "check in some schemes it is only when a critical uh um function is uh um invoked",
    "start": "1605279",
    "end": "1613640"
  },
  {
    "text": "in some schemes it is at any instrumented branch",
    "start": "1613640",
    "end": "1619440"
  },
  {
    "text": "but what we did we combined all these schemes and we we generated a kind of",
    "start": "1619440",
    "end": "1625600"
  },
  {
    "text": "uber CFI policy and this CFI policy uh",
    "start": "1625600",
    "end": "1632919"
  },
  {
    "text": "constitutes of all of most uh uh strict",
    "start": "1632919",
    "end": "1641240"
  },
  {
    "text": "um policy of each of them so that means it's a very conservative uh estimation",
    "start": "1641240",
    "end": "1648480"
  },
  {
    "text": "and it checks at any time and still we show how to break even this Uber CFI uh",
    "start": "1648480",
    "end": "1656880"
  },
  {
    "text": "chain so now we go to the second part okay thank you a lot so now that we've",
    "start": "1656880",
    "end": "1662519"
  },
  {
    "text": "heard what Co grain CFI is all about and what the policies are let's actually come to the part where we break stuff",
    "start": "1662519",
    "end": "1668440"
  },
  {
    "text": "and for a starters let's um recap some of our assumptions for the attack and",
    "start": "1668440",
    "end": "1673760"
  },
  {
    "start": "1669000",
    "end": "1669000"
  },
  {
    "text": "the first one was that the attacker can and will bypass aslr dur or not as part",
    "start": "1673760",
    "end": "1679320"
  },
  {
    "text": "of our attack but he can do because and we think that's a reasonable assumption because of two reasons first of all",
    "start": "1679320",
    "end": "1685960"
  },
  {
    "text": "that's what actually happens in practice in a lot of times so aslr is broken if it wasn't we wouldn't need CFI after all",
    "start": "1685960",
    "end": "1692960"
  },
  {
    "text": "and uh secondly there was a talk like on last year's black blackhead that showed that by our colleague Luca and Kevin",
    "start": "1692960",
    "end": "1699960"
  },
  {
    "text": "that um even A fine grain variant of aslr can be broken by return oriented programming more specifically by Justin",
    "start": "1699960",
    "end": "1706399"
  },
  {
    "text": "Time Rob so there's that we say aslr can be broken and secondly and that's an",
    "start": "1706399",
    "end": "1713000"
  },
  {
    "text": "assumption that actually makes our life as an attacker harder is we assume that we have access only to a single shared",
    "start": "1713000",
    "end": "1718799"
  },
  {
    "text": "Library so uh recollecting the um the thing ammad said was uh it's very hard",
    "start": "1718799",
    "end": "1725159"
  },
  {
    "text": "to prove that this attack is generalizable and not only applicable to our demo to our operating system to this",
    "start": "1725159",
    "end": "1730919"
  },
  {
    "text": "very library that we are targeting so what we would like to show is that if you restrict yourself to a very small",
    "start": "1730919",
    "end": "1736720"
  },
  {
    "text": "code base and you can do it still then the question is well if I have an even larger code base in real world then it's",
    "start": "1736720",
    "end": "1742559"
  },
  {
    "text": "going to work anyhow so that's what we did and we chose konel 32 dll which is roughly 840 kiloby so that's not too",
    "start": "1742559",
    "end": "1749039"
  },
  {
    "text": "large and which is very handy it's loaded into every process in Windows so that comes great for an attacker and uh",
    "start": "1749039",
    "end": "1756320"
  },
  {
    "text": "so let's uh recap our our workflow so the high level workflow of an of a Rob",
    "start": "1756320",
    "end": "1761559"
  },
  {
    "text": "attacker is actually not so much news so uh let's do it in a quick way first we",
    "start": "1761559",
    "end": "1766640"
  },
  {
    "text": "take our konal 30 2dl as our Gadget space so that's where we are going to find sequences and we do that by",
    "start": "1766640",
    "end": "1773360"
  },
  {
    "text": "disassembling and chosing all the sequences that end in a return that's return oriented programming and What We",
    "start": "1773360",
    "end": "1779600"
  },
  {
    "text": "additionally do is we only choose those sequences that are call preceded and that's because of the first policy that",
    "start": "1779600",
    "end": "1786360"
  },
  {
    "text": "am just told you about that is returns may only target call preceded sequences so if all of our sequences are called",
    "start": "1786360",
    "end": "1792799"
  },
  {
    "text": "preceded we're fine that's that's nice and given those sequences we now as an attack need to think about which of",
    "start": "1792799",
    "end": "1799360"
  },
  {
    "text": "those sequences are of actual use to us for that you can use various tools what we did is just a simple command line",
    "start": "1799360",
    "end": "1806039"
  },
  {
    "text": "filter tool that lets you pipe in those list of um sequences and you can choose",
    "start": "1806039",
    "end": "1811399"
  },
  {
    "text": "the ones based on uh which registers are used throughout the sequence how long the sequence is which instructions are",
    "start": "1811399",
    "end": "1817480"
  },
  {
    "text": "used and then you get a couple of subsets of sequences for example a number of sequences that can be used to",
    "start": "1817480",
    "end": "1823840"
  },
  {
    "text": "pop values from the stack or a number of sequences that modify eax register and stuff like that and finally when you've",
    "start": "1823840",
    "end": "1830200"
  },
  {
    "text": "got those sequences you have to combine those manually for our approach to what",
    "start": "1830200",
    "end": "1835880"
  },
  {
    "text": "in a Rob context is called a gadget am might also told you about that it's like an encapsuled uh functionality like a",
    "start": "1835880",
    "end": "1843360"
  },
  {
    "text": "Rob instruction so it does very simple things for example you could have",
    "start": "1843360",
    "end": "1849640"
  },
  {
    "text": "gadgets that move re uh move values between registers or you could have a gadget that adds values together you",
    "start": "1849640",
    "end": "1855159"
  },
  {
    "text": "could have a call Gadget stuff like that and once you have got those gadgets you can combine those relatively",
    "start": "1855159",
    "end": "1860720"
  },
  {
    "text": "independently to form a r payload a r attack and that does whatever you need to as an",
    "start": "1860720",
    "end": "1866240"
  },
  {
    "text": "attacker and that was actually the second of our uh contributions was uh we",
    "start": "1866240",
    "end": "1871399"
  },
  {
    "start": "1867000",
    "end": "1867000"
  },
  {
    "text": "show you that you can find Gadgets in Kern 32d that form a touring complete Gadget set so what that means is we find",
    "start": "1871399",
    "end": "1878320"
  },
  {
    "text": "a couple of Gadget types for example load and memory store and memory uh and and loading of registers um uh through",
    "start": "1878320",
    "end": "1885880"
  },
  {
    "text": "Pop instructions and we can we can find all types that are necessary to form",
    "start": "1885880",
    "end": "1891399"
  },
  {
    "text": "touring to form touring complete computations and on the left side you see the Gat Types on the right side you",
    "start": "1891399",
    "end": "1897279"
  },
  {
    "text": "see sequences that could possibly be used to realize such a functionality so if you for example if you consider",
    "start": "1897279",
    "end": "1904440"
  },
  {
    "text": "something like this you see um that sequence is it's call preceded that's",
    "start": "1904440",
    "end": "1909880"
  },
  {
    "text": "what we always assume and it ends in a red instruction which we omitted for readability but um it actually loads the",
    "start": "1909880",
    "end": "1917159"
  },
  {
    "text": "uh it stores a value that is currently in ESI and puts that at the place of EBP plus some offset but that's always um",
    "start": "1917159",
    "end": "1924159"
  },
  {
    "text": "easy to fix now of course Turing complete this is not just about loading values and storing values we actually",
    "start": "1924159",
    "end": "1930120"
  },
  {
    "start": "1926000",
    "end": "1926000"
  },
  {
    "text": "want to perform Sun operation on it and that's where arithmetics and Logics come into place and there we show you there's",
    "start": "1930120",
    "end": "1936559"
  },
  {
    "text": "a couple of sequences to do for example Edition or uh exclusive or but finally",
    "start": "1936559",
    "end": "1941720"
  },
  {
    "text": "touring completen this is not just about executing a straight line of code you actually want to jump between different",
    "start": "1941720",
    "end": "1948399"
  },
  {
    "text": "operations and specifically you want your touring machine to be able to have conditional execution based on the",
    "start": "1948399",
    "end": "1953919"
  },
  {
    "text": "current state of the machine so that's why you need conditional branches and in a Rob context a branch means a",
    "start": "1953919",
    "end": "1959519"
  },
  {
    "text": "modification of the stack pointer because the stack pointer serves as the instruction poter during a Rober Tech so",
    "start": "1959519",
    "end": "1965480"
  },
  {
    "text": "what you can do for an unconditional branch is you can use any instruction that loads the stack pointer to the appropriate value that's pretty easy",
    "start": "1965480",
    "end": "1972320"
  },
  {
    "text": "actually but what is quite difficult is to find a gadget that conditionally sets your ESP so that's a conditional branch",
    "start": "1972320",
    "end": "1979320"
  },
  {
    "text": "in the r context that's not easy to do what you can do instead is and that's what we did you can do a conditional",
    "start": "1979320",
    "end": "1984840"
  },
  {
    "text": "load of eax store your x to the memory and pop that into ESP and then you've got your conditional Branch so there's",
    "start": "1984840",
    "end": "1991080"
  },
  {
    "text": "that so now that we have seen a shorted excerpt of our sequences that are tour incomplete we could actually all go home",
    "start": "1991080",
    "end": "1998399"
  },
  {
    "text": "and say well okay we can perform arbitrary computation why bother that's it but of course we all know we're not",
    "start": "1998399",
    "end": "2005320"
  },
  {
    "text": "only interested in emulating touring machines but in performing actual practical exploitation and doing stuff",
    "start": "2005320",
    "end": "2010760"
  },
  {
    "text": "and for that we need some other useful gadgets two of those I'll show you in a second so the first one is a function",
    "start": "2010760",
    "end": "2017159"
  },
  {
    "text": "call Gadget and some of you that are familiar with return programming might say well why do I need that Gadget I",
    "start": "2017159",
    "end": "2023760"
  },
  {
    "text": "could just return into a function that's classic return to lipy but the point is the first of our policies allows returns",
    "start": "2023760",
    "end": "2030240"
  },
  {
    "text": "only to Target call preceded sequences and the function the code of a function is rarely co- preceded there's not going",
    "start": "2030240",
    "end": "2035840"
  },
  {
    "text": "to be a call in front of a function so when you want to call a function you actually need a call Gadget a dedicated",
    "start": "2035840",
    "end": "2041120"
  },
  {
    "text": "Gadget and you could find a sequence such as the one on the right where you have an indirect call to the function uh",
    "start": "2041120",
    "end": "2047760"
  },
  {
    "text": "you go to the function the function itself returns it returns to that return and that return Then proceeds with a",
    "start": "2047760",
    "end": "2053599"
  },
  {
    "text": "rented programming attack and then there is a second necessary gadget for our",
    "start": "2053599",
    "end": "2058760"
  },
  {
    "text": "attack and that is what we call a long no operation Gadget and what that is about I'll show you now so so far we have said all of our",
    "start": "2058760",
    "end": "2067720"
  },
  {
    "start": "2065000",
    "end": "2065000"
  },
  {
    "text": "sequences or called proceeded so we're basically fine with the first policy we'll never get into any trouble with that but the second policy was about",
    "start": "2067720",
    "end": "2074320"
  },
  {
    "text": "juristic it was about if I have a a short SE um if I had a long chain of very short instruction sequences that's",
    "start": "2074320",
    "end": "2081520"
  },
  {
    "text": "fishy and the the mitigations will actually terminate your process so in order to bypass these euristic you will",
    "start": "2081520",
    "end": "2088398"
  },
  {
    "text": "need a long sequence in our case a sequence longer than 20 instructions and you will need to put that sequence after",
    "start": "2088399",
    "end": "2094720"
  },
  {
    "text": "every while or so after short sequences that you had executed before just to",
    "start": "2094720",
    "end": "2100480"
  },
  {
    "text": "like stop this urtic from working but on the other hand if you have found such a long sequence it will have a lot of",
    "start": "2100480",
    "end": "2107640"
  },
  {
    "text": "instructions of course and a lot of instructions are doing a lot of things and most of these things you don't want",
    "start": "2107640",
    "end": "2112960"
  },
  {
    "text": "them to be done because your long sequence should only break your euristic but it shouldn't otherwise affect your R",
    "start": "2112960",
    "end": "2119079"
  },
  {
    "text": "attack so what you would like to have and that's why we called it a long knob is we want to have a long sequence that",
    "start": "2119079",
    "end": "2124480"
  },
  {
    "text": "doesn't have any side effects now you might ask how how can you find that well of course the first Trace is you search",
    "start": "2124480",
    "end": "2130280"
  },
  {
    "text": "for a sequence that uses as few registers as possible and during finding those sequences we saw that what suits",
    "start": "2130280",
    "end": "2137160"
  },
  {
    "text": "Us best are sequences that perform a lot of memory rights because those are instructions where you can uh put the",
    "start": "2137160",
    "end": "2144200"
  },
  {
    "text": "memory rights in some region where you don't care about but otherwise those instructions aren't going to break your R payload so that's nice and to show you",
    "start": "2144200",
    "end": "2151680"
  },
  {
    "text": "how such a long knob could be incorporated into an exploit let me just give you a an example stack so dur",
    "start": "2151680",
    "end": "2157640"
  },
  {
    "text": "during a return oned programming you have maybe executed some gadgets prior to your long knob and once that's done",
    "start": "2157640",
    "end": "2165520"
  },
  {
    "text": "you think oh that's all too many short sequences I need to put a long knob in between so that's the long sequence I",
    "start": "2165520",
    "end": "2172640"
  },
  {
    "text": "told you about and just as I promised it has it has 14 memory rights going to ESI",
    "start": "2172640",
    "end": "2178480"
  },
  {
    "text": "and EDI registers um locations pointed to by ESI and EDI it has some other",
    "start": "2178480",
    "end": "2184319"
  },
  {
    "text": "instructions just simply fed and at the end it pops couple of values into registers now I see first of all you",
    "start": "2184319",
    "end": "2191960"
  },
  {
    "text": "need to set ESI and EDI appropriately to make that long knob work and secondly you have those Pop instructions to eax",
    "start": "2191960",
    "end": "2199560"
  },
  {
    "text": "so those three registers will get uh will get written new values to during",
    "start": "2199560",
    "end": "2204720"
  },
  {
    "text": "the long knob execution and that's not what we wanted we wanted a side effect free long knob so what you can do to",
    "start": "2204720",
    "end": "2210480"
  },
  {
    "text": "obtain such as uh such a gadget is you first um execute a couple of other",
    "start": "2210480",
    "end": "2216280"
  },
  {
    "text": "gadgets uh they are um five sequences in effect and those uh five sequences will store",
    "start": "2216280",
    "end": "2223400"
  },
  {
    "text": "the old or the current values of the used registers in some place in memory specifically on the stack and now before",
    "start": "2223400",
    "end": "2231160"
  },
  {
    "text": "the long knob sequence we execute a preparation or setup sequence and that sets ESI and EDI appropriately to point",
    "start": "2231160",
    "end": "2239079"
  },
  {
    "text": "to a place in memory where we can write to but that doesn't otherwise matter to our attack and now we finally can",
    "start": "2239079",
    "end": "2245280"
  },
  {
    "text": "execute the long knob sequence and it will perform the memory rights to the",
    "start": "2245280",
    "end": "2250520"
  },
  {
    "text": "memory area that we set up earlier and now what it's going to do is it pops EDI",
    "start": "2250520",
    "end": "2256119"
  },
  {
    "text": "ESI and E eax and what's fortunate is we put the save values just on the stack so",
    "start": "2256119",
    "end": "2261760"
  },
  {
    "text": "that the pops will actually load the old values back into the register no side effect Tada and that's where the rotch",
    "start": "2261760",
    "end": "2268880"
  },
  {
    "text": "can continue with the next sequence so that's an example of how such a long sequence could um could be incorporated",
    "start": "2268880",
    "end": "2274760"
  },
  {
    "text": "but in fact you know it's a bit more complicated than that but I bu the details but if anybody is interested like it's it's in the",
    "start": "2274760",
    "end": "2281560"
  },
  {
    "text": "slides okay so now it's actually really time for the demo but before I come to",
    "start": "2281560",
    "end": "2287240"
  },
  {
    "text": "that let me give you a short reminder on what EMT is and actually that's funny because just yesterday I got a business",
    "start": "2287240",
    "end": "2293280"
  },
  {
    "text": "gift about EMT and it says it helps raise the bar against attackers and it",
    "start": "2293280",
    "end": "2298680"
  },
  {
    "text": "works well for the Enterprise and that's marvelous and I actually think it is a great tool it's it's meant for end users",
    "start": "2298680",
    "end": "2304960"
  },
  {
    "text": "it has a comprehensive uh user interface so it's actually the first Co grain CFI solution that you can actually use in an",
    "start": "2304960",
    "end": "2311119"
  },
  {
    "text": "end user that's not an academic project that's nice and uh as we've told you earlier",
    "start": "2311119",
    "end": "2316680"
  },
  {
    "text": "it's based on a proposal called rard now let's dive into the five dedicated",
    "start": "2316680",
    "end": "2322119"
  },
  {
    "start": "2320000",
    "end": "2320000"
  },
  {
    "text": "mitigations that EMT offers against return returned programming and uh so",
    "start": "2322119",
    "end": "2327200"
  },
  {
    "text": "the first three ones are actually not so much specific to uh what we told you earlier they are more specific to the",
    "start": "2327200",
    "end": "2333520"
  },
  {
    "text": "wind IPI so for example the load lip um mitigation prevent vents you to",
    "start": "2333520",
    "end": "2338640"
  },
  {
    "text": "dynamically load during the runtime a dll from a remote path so that's a very sensible uh mitigation but uh as has",
    "start": "2338640",
    "end": "2346119"
  },
  {
    "text": "been shown earlier that that can be bypassed but what we care more about is actually the remaining two mitigations",
    "start": "2346119",
    "end": "2352040"
  },
  {
    "text": "the first one is called caller and what it does is it ensures that you can never",
    "start": "2352040",
    "end": "2357400"
  },
  {
    "text": "return into a win API function so you need to call the win API function and",
    "start": "2357400",
    "end": "2362599"
  },
  {
    "text": "that's like somewhat related to what I told you earlier about the call Gadget we need such a call Gadget and secondly",
    "start": "2362599",
    "end": "2369040"
  },
  {
    "text": "there is a mitigation called simulate execution flow and what it does is it saves a couple of words from the stack",
    "start": "2369040",
    "end": "2374400"
  },
  {
    "text": "and then it simulates how the stack pointer would behave based on the following instructions like push pop or",
    "start": "2374400",
    "end": "2380079"
  },
  {
    "text": "any stack pointer modifying instruction and then whenever it encounters a return it checks that that return address is",
    "start": "2380079",
    "end": "2386280"
  },
  {
    "text": "pointing to a call preceded location so with those two mitigations in mind you",
    "start": "2386280",
    "end": "2392079"
  },
  {
    "text": "can see that those actually correspond to the first policy that we've we've presented to you if all of your returns",
    "start": "2392079",
    "end": "2397440"
  },
  {
    "text": "are only targeting call preceded uh sequences you're never going to have a problem with those okay so now we are not the first",
    "start": "2397440",
    "end": "2404720"
  },
  {
    "start": "2403000",
    "end": "2403000"
  },
  {
    "text": "ones to show a demo on how emit can be circumvented in fact there's been a couple of Works previously but at least",
    "start": "2404720",
    "end": "2411720"
  },
  {
    "text": "those two for example they evade the checks of EMT simply by using or not",
    "start": "2411720",
    "end": "2417000"
  },
  {
    "text": "simply but by using some implementation specific of EMT for example they simply jump over the hook in the critical",
    "start": "2417000",
    "end": "2423400"
  },
  {
    "text": "function the check never gets executed so you never have to worry about what it enforces okay that's that's very nice the",
    "start": "2423400",
    "end": "2429800"
  },
  {
    "text": "solution but uh maybe we can get more General than that and then there's another uh talk bypassing him at 4.1 but",
    "start": "2429800",
    "end": "2437440"
  },
  {
    "text": "even those have seriously fundamentally different goals than what we did first",
    "start": "2437440",
    "end": "2442680"
  },
  {
    "text": "of all we are not limited to EMT so even though we show you the demo on EMT uh it",
    "start": "2442680",
    "end": "2447720"
  },
  {
    "text": "should in principle work for all the course grain CFI solutions that we targeted and secondly we are not caring",
    "start": "2447720",
    "end": "2453960"
  },
  {
    "text": "about how these policies are enforced like how the implementation of those programs are but what we care about is",
    "start": "2453960",
    "end": "2459880"
  },
  {
    "text": "what the checks actually check what is the enforcement on the control flow and as long as we can build a control Flor",
    "start": "2459880",
    "end": "2466200"
  },
  {
    "text": "that corresponds to this policies we are fine and we never have to worry whether those checks are executed when and how",
    "start": "2466200",
    "end": "2473040"
  },
  {
    "text": "often we simply always comply to them and of course uh as I told you it's",
    "start": "2473040",
    "end": "2478560"
  },
  {
    "text": "not only about EMT so we also have to care about the euristic and we use the long knob throughout our exploits uh",
    "start": "2478560",
    "end": "2484520"
  },
  {
    "text": "that I told you earlier and our like high level go is to raise the awareness that course grain CFI on its own is not",
    "start": "2484520",
    "end": "2491640"
  },
  {
    "text": "going to be a comprehensive solution to the RW problem okay so what we did is we took",
    "start": "2491640",
    "end": "2497960"
  },
  {
    "start": "2496000",
    "end": "2496000"
  },
  {
    "text": "some uh real world exploits they are both successfully um prevented and detected by EMT so that's nice and what",
    "start": "2497960",
    "end": "2505440"
  },
  {
    "text": "we show is that you can take those exploits and replace the gadgets that they used with gadgets that we use uh",
    "start": "2505440",
    "end": "2512400"
  },
  {
    "text": "that we extracted that I showed you earlier and because all of those gadgets and the whole Rob chain are comp Ling to",
    "start": "2512400",
    "end": "2517560"
  },
  {
    "text": "the policies they now work with EMT in place and also with all the other Solutions we don't show you right now so",
    "start": "2517560",
    "end": "2525640"
  },
  {
    "text": "so far for the demo let me actually check marvelous",
    "start": "2525640",
    "end": "2531480"
  },
  {
    "text": "okay so what you see here is uh the M GOI just as graphical user interface just as I showed you earlier what you",
    "start": "2531480",
    "end": "2538160"
  },
  {
    "text": "can do is you can configure on a per application bases uh what mitigations should be active and as you can see we",
    "start": "2538160",
    "end": "2545839"
  },
  {
    "text": "we activated uh the mitigations for Adobe Reader and for the purpose of this demonstration let's deactivate all of",
    "start": "2545839",
    "end": "2553720"
  },
  {
    "text": "those and see that of course you can perform",
    "start": "2553720",
    "end": "2560559"
  },
  {
    "text": "exploits okay so here we go Adobe Reader we have the original exploit and",
    "start": "2562480",
    "end": "2569280"
  },
  {
    "text": "of course it's only proof of concept so you'll see the calculator being executed",
    "start": "2569280",
    "end": "2576359"
  },
  {
    "text": "yeah okay so now EMT comes and we",
    "start": "2580640",
    "end": "2586760"
  },
  {
    "text": "see that it will actually prevent this exploit so that's a very nice",
    "start": "2586760",
    "end": "2593119"
  },
  {
    "text": "solution as a first step to raise the bar for",
    "start": "2593119",
    "end": "2598000"
  },
  {
    "text": "ancker oh yeah okay so now you take the exploit and what you will see is that",
    "start": "2599680",
    "end": "2605280"
  },
  {
    "text": "amme actually detected the exploit based on that call mitigation I explained earlier so obviously a win API function",
    "start": "2605280",
    "end": "2611640"
  },
  {
    "text": "was returned into and not called so that's not going to work but what we",
    "start": "2611640",
    "end": "2616880"
  },
  {
    "text": "have done is we have taken that exploit that vulnerability used only the gadgets that we extracted from koner 32 dll they are",
    "start": "2616880",
    "end": "2624079"
  },
  {
    "text": "all cor proceded and we are using a function call gget to well a",
    "start": "2624079",
    "end": "2631640"
  },
  {
    "text": "function call gget to uh call the to call the wi IPI function so we",
    "start": "2631640",
    "end": "2639640"
  },
  {
    "text": "are compatible with the policies that are enforced and we'll see",
    "start": "2639640",
    "end": "2647400"
  },
  {
    "text": "so yeah [Applause]",
    "start": "2647880",
    "end": "2655200"
  },
  {
    "text": "okay so um just to take the last two slides um before everybody goes to sleep",
    "start": "2656640",
    "end": "2665280"
  },
  {
    "text": "um there is of course uh other let's say there are other other efforts uh out there we are not the only",
    "start": "2665280",
    "end": "2673480"
  },
  {
    "text": "ones who want to do uh this kind of stuff and analyze uh tools that uh try",
    "start": "2673480",
    "end": "2681319"
  },
  {
    "text": "to detect or even prevent um return oriented programming which is now",
    "start": "2681319",
    "end": "2686599"
  },
  {
    "text": "increasing I mean it's it's amazing how how uh many exploits are now using these",
    "start": "2686599",
    "end": "2692119"
  },
  {
    "text": "principles so there are some other works mostly academic works but most of",
    "start": "2692119",
    "end": "2699040"
  },
  {
    "text": "them um focus on specific implementation and this was not uh the",
    "start": "2699040",
    "end": "2705920"
  },
  {
    "text": "goal that uh we were following uh we wanted to have something more General because usually ad hoc Solutions lead to",
    "start": "2705920",
    "end": "2713920"
  },
  {
    "text": "uh problems and then again other at hoc Solutions lead to even bigger problems",
    "start": "2713920",
    "end": "2719319"
  },
  {
    "text": "we learn from the past hopefully and this is why there are methodological",
    "start": "2719319",
    "end": "2725640"
  },
  {
    "text": "differences here one of is that we are Sim simultaneously consider considering",
    "start": "2725640",
    "end": "2731400"
  },
  {
    "text": "different policies doesn't matter if if a scheme is using juristic or using uh",
    "start": "2731400",
    "end": "2738000"
  },
  {
    "text": "uh relaxed policies like call preceded um instructions or returns um we don't",
    "start": "2738000",
    "end": "2744480"
  },
  {
    "text": "care about that because we have this this Uber uh CFI uh um check um tool um",
    "start": "2744480",
    "end": "2754000"
  },
  {
    "text": "we have very let's say strict policies the second thing is that that mentioned several times we wanted to have a",
    "start": "2754000",
    "end": "2761839"
  },
  {
    "text": "small space of uh instructions as small as",
    "start": "2761839",
    "end": "2767079"
  },
  {
    "text": "possible and show that you can still generate arbitrary Behavior which is",
    "start": "2767079",
    "end": "2772359"
  },
  {
    "text": "more let's say that means a t in completeness uh that means finding gadgets that generate operations and",
    "start": "2772359",
    "end": "2779680"
  },
  {
    "text": "those operations together can emulate any machine uh this is first first first",
    "start": "2779680",
    "end": "2787119"
  },
  {
    "text": "let's say glance it is from academic point of view is very interesting but if you look at it it's a general solution",
    "start": "2787119",
    "end": "2793800"
  },
  {
    "text": "and then the question is who is going to instantiate all of these things and uh we showed it in case of EMT but it also",
    "start": "2793800",
    "end": "2800359"
  },
  {
    "text": "works for all other proposed schemes in this area so what is actually this uh",
    "start": "2800359",
    "end": "2806400"
  },
  {
    "start": "2804000",
    "end": "2804000"
  },
  {
    "text": "solution indeed um there is no solution today and we are very sad about it of",
    "start": "2806400",
    "end": "2813359"
  },
  {
    "text": "course but it also keeps the business alive because because uh if there are ultimate Solutions then security people",
    "start": "2813359",
    "end": "2820319"
  },
  {
    "text": "will not have anything to do so it is good for our business first of all second uh realistic Rob attacks are",
    "start": "2820319",
    "end": "2828000"
  },
  {
    "text": "still possible we showed it to you there are also others who can show you uh that some other schemes don't work so that",
    "start": "2828000",
    "end": "2834480"
  },
  {
    "text": "means we we need to fundamentally change our view to these things also EMT which is again Microsoft is uh not my uh",
    "start": "2834480",
    "end": "2843800"
  },
  {
    "text": "sponsor but maybe sponsor of blackhead I don't know but it doesn't matter they did a good thing arble thing they tried",
    "start": "2843800",
    "end": "2850559"
  },
  {
    "text": "to do something against these attacks and even if uh it doesn't work it",
    "start": "2850559",
    "end": "2856359"
  },
  {
    "text": "doesn't mean that it's a bad uh approach so especially in uh we have",
    "start": "2856359",
    "end": "2862680"
  },
  {
    "text": "this Intel Research Institute and Intel has uh obviously lots of uh",
    "start": "2862680",
    "end": "2867839"
  },
  {
    "text": "Semiconductor in uh technology and we are looking into uh Hardware assisted",
    "start": "2867839",
    "end": "2874400"
  },
  {
    "text": "schemes which actually have more more fundamental more basic solutions to these problems why harbard is good",
    "start": "2874400",
    "end": "2881240"
  },
  {
    "text": "because we we talked about uh tools like EMT but where is this tool actually",
    "start": "2881240",
    "end": "2886839"
  },
  {
    "text": "stored okay it is a kernel maybe um um module but it doesn't matter you have to",
    "start": "2886839",
    "end": "2893640"
  },
  {
    "text": "kind of uh uh uh protect that tool as well and if you use the original CFI",
    "start": "2893640",
    "end": "2899559"
  },
  {
    "text": "where you generate a control flow graph you also need to protect that control flow graph where do you do that still in",
    "start": "2899559",
    "end": "2906440"
  },
  {
    "text": "soft and you can change it if if the adversary has enough uh let's say means",
    "start": "2906440",
    "end": "2912720"
  },
  {
    "text": "to access that graph so we need a fundamental solution um and for that uh",
    "start": "2912720",
    "end": "2918960"
  },
  {
    "text": "maybe uh Hardware uh software codesign would be very appropriate their",
    "start": "2918960",
    "end": "2925359"
  },
  {
    "text": "dedicated CFI uh instructions in Hardware they have the authority to",
    "start": "2925359",
    "end": "2931599"
  },
  {
    "text": "access the graph of the code the increase of code performance because there's a CPU",
    "start": "2931599",
    "end": "2937960"
  },
  {
    "text": "instruction and they also avoid side effects that are uh Incorporated in in",
    "start": "2937960",
    "end": "2944200"
  },
  {
    "text": "software uh based Solutions uh the trade-off here would be",
    "start": "2944200",
    "end": "2950280"
  },
  {
    "text": "to use certain uh uh small number of instructions that change the let's say",
    "start": "2950280",
    "end": "2958559"
  },
  {
    "text": "the state of the CPU if you are interested I will be here the whole week",
    "start": "2958559",
    "end": "2964160"
  },
  {
    "text": "and uh you can ask me uh about it and when we go out and drink some beer we",
    "start": "2964160",
    "end": "2969799"
  },
  {
    "text": "can ask more about it but there is a solution that you can use",
    "start": "2969799",
    "end": "2975640"
  },
  {
    "text": "a small set of uh instructions and then Multiplex it",
    "start": "2975640",
    "end": "2981280"
  },
  {
    "text": "towards a more complex um protection mechanism for of course complex behavior",
    "start": "2981280",
    "end": "2988680"
  },
  {
    "text": "these are the advantages of using specific uh CFI instructions in the CPU",
    "start": "2988680",
    "end": "2994880"
  },
  {
    "text": "and with that I just finished there if you want to know more information just",
    "start": "2994880",
    "end": "2999960"
  },
  {
    "text": "go to our website you will see also other um approaches thank",
    "start": "2999960",
    "end": "3007680"
  },
  {
    "text": "you",
    "start": "3012760",
    "end": "3015760"
  },
  {
    "text": "questions could you please use the microphone thank you",
    "start": "3019920",
    "end": "3026480"
  },
  {
    "text": "um what uh versions of EMT have you looked at with your Technique here uh so",
    "start": "3027520",
    "end": "3033319"
  },
  {
    "text": "the version of EMT I'll repeat the question and maybe you come here okay so what is the version of Emma that we are",
    "start": "3033319",
    "end": "3039599"
  },
  {
    "text": "targeting right now okay so the version is 4.1 which was as of the creation of our exploit the recent version and uh of",
    "start": "3039599",
    "end": "3047920"
  },
  {
    "text": "course there has been very recently I think four days ago or a week ago or something it was a new version of EMT um",
    "start": "3047920",
    "end": "3054280"
  },
  {
    "text": "but maybe somebody uh I I stand corrected if it's wrong but as far as I know they added an additional feature",
    "start": "3054280",
    "end": "3060240"
  },
  {
    "text": "called attx surface reduction where you could exclude modules from the running",
    "start": "3060240",
    "end": "3065400"
  },
  {
    "text": "application but otherwise there weren't weren't uh much changes to the enforced policies so in principle I think our",
    "start": "3065400",
    "end": "3072760"
  },
  {
    "text": "method applies also to the new version of",
    "start": "3072760",
    "end": "3076880"
  },
  {
    "text": "EMT okay are we going to release the code that finds gadgets uh well",
    "start": "3081200",
    "end": "3087960"
  },
  {
    "text": "okay how much do you pay he said um well technically um well we have",
    "start": "3087960",
    "end": "3095079"
  },
  {
    "text": "no plans yet but I mean we can we can talk and uh I think it's no big big deal",
    "start": "3095079",
    "end": "3100200"
  },
  {
    "text": "talk",
    "start": "3100200",
    "end": "3103200"
  },
  {
    "text": "yeah",
    "start": "3107520",
    "end": "3110520"
  },
  {
    "text": "yeah would you please use the microphone sorry",
    "start": "3115520",
    "end": "3121160"
  },
  {
    "text": "sorry uh did you look at any other uh libraries besides colel 32 so yeah we also looked in anti-d dll",
    "start": "3121720",
    "end": "3130240"
  },
  {
    "text": "and in kernel Blas dll but uh I mean I I think personally that there's no big",
    "start": "3130240",
    "end": "3135760"
  },
  {
    "text": "difference uh between those and actually much of the functions that are present in kernel 32 dll are just wrappers",
    "start": "3135760",
    "end": "3142000"
  },
  {
    "text": "around lower level apis and anti-d and so on so I I don't think there's much of",
    "start": "3142000",
    "end": "3147079"
  },
  {
    "text": "a difference",
    "start": "3147079",
    "end": "3149599"
  },
  {
    "text": "actually so if you have any open questions you looked at uh how this",
    "start": "3153200",
    "end": "3158240"
  },
  {
    "text": "applies to other processors as well okay once again again",
    "start": "3158240",
    "end": "3164240"
  },
  {
    "text": "again",
    "start": "3164400",
    "end": "3167400"
  },
  {
    "text": "how other architecture yeah yeah in in in general the the this",
    "start": "3170480",
    "end": "3176839"
  },
  {
    "text": "is what uh this was actually one of the purposes of this uh research is was that",
    "start": "3176839",
    "end": "3182920"
  },
  {
    "text": "it it should be actually independent of of the architecture which is this is why",
    "start": "3182920",
    "end": "3188280"
  },
  {
    "text": "we try to systematically analyze but indeed some of these solutions they are",
    "start": "3188280",
    "end": "3194480"
  },
  {
    "text": "based on specific processors like for example if you use lbr the last Branch",
    "start": "3194480",
    "end": "3200160"
  },
  {
    "text": "register it is devoted to to the Intel processor so we have to also see what kind of policy but Our concern were",
    "start": "3200160",
    "end": "3208799"
  },
  {
    "text": "policies and those policies whenever you use those policies doesn't matter from which architecture you should be able to",
    "start": "3208799",
    "end": "3215839"
  },
  {
    "text": "defeat it so so now it seems like that's a tool",
    "start": "3215839",
    "end": "3221599"
  },
  {
    "text": "based solution do you see this functionality being wrapped into future operating systems you don't have to go",
    "start": "3221599",
    "end": "3227839"
  },
  {
    "text": "out get so actually what I would say um what we've seen already repat the question",
    "start": "3227839",
    "end": "3234680"
  },
  {
    "text": "repeat the question okay so the question was BAS basically if we could see those tool-based Solutions being incorporated into operating systems in the future if",
    "start": "3234680",
    "end": "3242040"
  },
  {
    "text": "okay so um of course I'm in no ways affiliated with uh EMT so I can't like",
    "start": "3242040",
    "end": "3248040"
  },
  {
    "text": "give any definite answer but what we've seen in the past is that EMT is often used as a prototype or what we've seen",
    "start": "3248040",
    "end": "3254040"
  },
  {
    "text": "is that it's used as a like prototype uh to test how compatible are these defenses with commercial applications",
    "start": "3254040",
    "end": "3261200"
  },
  {
    "text": "and if uh if we actually find out for example that um mandatory aslr so",
    "start": "3261200",
    "end": "3266400"
  },
  {
    "text": "forcing aslr in every binary in the uh that's currently running if it works and",
    "start": "3266400",
    "end": "3271640"
  },
  {
    "text": "no binary is is breaking then it will probably get incorporated into operating systems and if I remember correctly",
    "start": "3271640",
    "end": "3277960"
  },
  {
    "text": "that's already what happened for example with aslr in Windows 8 where they force it uh on the binaries unless you opt out",
    "start": "3277960",
    "end": "3285920"
  },
  {
    "text": "while in earlier stage it was the other way around you had to opt in to have aslr and binaries enabled so I think yes",
    "start": "3285920",
    "end": "3292559"
  },
  {
    "text": "that's probably going to happen okay guys thank you very much for your",
    "start": "3292559",
    "end": "3298720"
  },
  {
    "text": "patience thank you [Applause]",
    "start": "3298720",
    "end": "3304619"
  }
]