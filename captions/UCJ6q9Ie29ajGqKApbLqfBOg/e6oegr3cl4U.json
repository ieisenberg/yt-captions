[
  {
    "start": "0",
    "end": "83000"
  },
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "welcome to my talk the container on Windows we escaped The Silo in this talk",
    "start": "7820",
    "end": "13200"
  },
  {
    "text": "I'm going to demonstrate our malicious Windows container can impact the host it",
    "start": "13200",
    "end": "18600"
  },
  {
    "text": "is running on my name is Iran Segal I've been in the cyber security field for over seven",
    "start": "18600",
    "end": "25320"
  },
  {
    "text": "years currently I'm a research team lead in safe breach Labs my experience",
    "start": "25320",
    "end": "31140"
  },
  {
    "text": "involved vulnerability research on Windows and weather devices",
    "start": "31140",
    "end": "36660"
  },
  {
    "text": "so I'm going to start with a background of Windows process isolated containers",
    "start": "36660",
    "end": "41940"
  },
  {
    "text": "then I'll continue to how to gain anti-system inside of the container",
    "start": "41940",
    "end": "47820"
  },
  {
    "text": "after again the empty system I'll show the method I use in order to find two",
    "start": "47820",
    "end": "52920"
  },
  {
    "text": "vulnerabilities that can impact the host after that I'll show a demo containing",
    "start": "52920",
    "end": "58260"
  },
  {
    "text": "chain of vulnerabilities and we will finish with the Q a",
    "start": "58260",
    "end": "63300"
  },
  {
    "text": "so the goal of the research is to find what is the impact of an attacker",
    "start": "63300",
    "end": "69180"
  },
  {
    "text": "crafted Windows container on the host it is running on I chose this research because containers",
    "start": "69180",
    "end": "75780"
  },
  {
    "text": "are everywhere this attack Vector is a real old one and reverse engineering Windows kernel is",
    "start": "75780",
    "end": "82619"
  },
  {
    "text": "fun so let's deep dive into Windows containers",
    "start": "82619",
    "end": "88860"
  },
  {
    "start": "83000",
    "end": "265000"
  },
  {
    "text": "containers are similar to Virtual machines each container is Created from",
    "start": "88860",
    "end": "94020"
  },
  {
    "text": "a container image which contains all the dependencies for the container for",
    "start": "94020",
    "end": "99720"
  },
  {
    "text": "example the application that will it will run the file system or registry and",
    "start": "99720",
    "end": "105960"
  },
  {
    "text": "the configurations of the OS container image contains all the",
    "start": "105960",
    "end": "111840"
  },
  {
    "text": "dependencies therefore it's easy to manage and deploy like VMS",
    "start": "111840",
    "end": "117180"
  },
  {
    "text": "but in Windows it is possible to deploy the containers via two methods which defines",
    "start": "117180",
    "end": "124619"
  },
  {
    "text": "the degree of the isolation process isolated containers and hyperly",
    "start": "124619",
    "end": "129660"
  },
  {
    "text": "isolated containers hypermic isolated containers are very",
    "start": "129660",
    "end": "135120"
  },
  {
    "text": "similar to Virtual machines they have their own kernel and they communicate over the hyper-v",
    "start": "135120",
    "end": "142099"
  },
  {
    "text": "of windows is the container can't interact directly",
    "start": "142099",
    "end": "147540"
  },
  {
    "text": "with the container with the host it has to go over the hyper-v interface",
    "start": "147540",
    "end": "154160"
  },
  {
    "text": "therefore the most secure but it comes with computation and overhead",
    "start": "154160",
    "end": "160800"
  },
  {
    "text": "process isolated containers are similar to The Linux containers the entire",
    "start": "160800",
    "end": "166019"
  },
  {
    "text": "container runs from the user mode but process isolated containers are interact directly with the kernel",
    "start": "166019",
    "end": "173160"
  },
  {
    "text": "and are isolated from the host via multiple aspects",
    "start": "173160",
    "end": "178200"
  },
  {
    "text": "so yeah but in order to validate that the",
    "start": "178200",
    "end": "185640"
  },
  {
    "text": "container won't be able to impact the host there are few mitigations in the kernel",
    "start": "185640",
    "end": "190800"
  },
  {
    "text": "that violates it for example it prevents loading driver from the container to the",
    "start": "190800",
    "end": "196800"
  },
  {
    "text": "house to the kernel in this presentation I'm going to focus only on process isolated containers",
    "start": "196800",
    "end": "204659"
  },
  {
    "text": "so when we are running a task list inside windows container we see lots of",
    "start": "204659",
    "end": "210360"
  },
  {
    "text": "system processors which are related to the OS itself unlikely not",
    "start": "210360",
    "end": "216319"
  },
  {
    "text": "which doesn't contain system processes inside the container",
    "start": "216319",
    "end": "221340"
  },
  {
    "text": "these differences between the windows container and the layer container are",
    "start": "221340",
    "end": "226379"
  },
  {
    "text": "because of the architecture of the kernel itself both Linux and windows containers are",
    "start": "226379",
    "end": "233760"
  },
  {
    "text": "running from the user mode only in order to validate that the container can impact impact the host",
    "start": "233760",
    "end": "241200"
  },
  {
    "text": "Linux container is monolithic therefore all its basic functionality is",
    "start": "241200",
    "end": "246360"
  },
  {
    "text": "implemented in the kernel itself plan like Windows which some of its",
    "start": "246360",
    "end": "252480"
  },
  {
    "text": "functionality is implemented in the user mode while other is implemented in the kernel therefore Windows containers",
    "start": "252480",
    "end": "259320"
  },
  {
    "text": "contain Services System services such as SVC host",
    "start": "259320",
    "end": "265100"
  },
  {
    "text": "so let's deep dive into how process isolated containers are implemented",
    "start": "265100",
    "end": "272040"
  },
  {
    "text": "there are two parts for Windows containers the engine which manage all",
    "start": "272040",
    "end": "277440"
  },
  {
    "text": "the containers for example Docker container and the OS part the windows",
    "start": "277440",
    "end": "282840"
  },
  {
    "text": "part which responsible for the isolation isolating the container from The Host",
    "start": "282840",
    "end": "290040"
  },
  {
    "text": "I'm gonna Focus only on the Windows part",
    "start": "290040",
    "end": "295380"
  },
  {
    "text": "when a new windows container begins it creates an environment request for the container such as object namespace file",
    "start": "295380",
    "end": "303240"
  },
  {
    "text": "system job object and create the processes that are running inside of the container",
    "start": "303240",
    "end": "310220"
  },
  {
    "text": "Windows container isolation is separated into three parts job object namespaces and layers",
    "start": "310259",
    "end": "318660"
  },
  {
    "text": "this stock I'm going to focus on bypassing the candle isolation of the job object",
    "start": "318660",
    "end": "324780"
  },
  {
    "text": "so let's understand what is a job object job objects were created in Windows a",
    "start": "324780",
    "end": "330120"
  },
  {
    "text": "long long time ago to Google processes as a single unit and manage the",
    "start": "330120",
    "end": "336479"
  },
  {
    "text": "resources for example CPU time memory time and limit CR memory limits and so",
    "start": "336479",
    "end": "342300"
  },
  {
    "text": "on but in order to support isolation as well the job object is required to be",
    "start": "342300",
    "end": "348419"
  },
  {
    "text": "converted into Asylum Asylum provide basic isolation",
    "start": "348419",
    "end": "355139"
  },
  {
    "text": "but it is not enough for containers which which require much more",
    "start": "355139",
    "end": "360240"
  },
  {
    "text": "so in order to have all these capabilities this Styler have to be",
    "start": "360240",
    "end": "366360"
  },
  {
    "text": "converted into server Asylum so any server Siler is also a silo",
    "start": "366360",
    "end": "374479"
  },
  {
    "text": "we converted our Silo to server Silo which support redirection of resources",
    "start": "374639",
    "end": "379800"
  },
  {
    "text": "now we can redirect to resources for example registry Network stock and",
    "start": "379800",
    "end": "385560"
  },
  {
    "text": "object manager to use resources from the container image not from the host",
    "start": "385560",
    "end": "393199"
  },
  {
    "text": "but this isolation is not enough as I said before the kernel requires to",
    "start": "393199",
    "end": "400460"
  },
  {
    "text": "mitigate dangerous systems for example a load driver",
    "start": "400460",
    "end": "406740"
  },
  {
    "text": "so if it was possible to do to load driver directly from the container it",
    "start": "406740",
    "end": "413220"
  },
  {
    "text": "wasn't it could not be that isolated and the container could have escaped so some",
    "start": "413220",
    "end": "419580"
  },
  {
    "text": "validations were added to the content to the kernel and validate that if the",
    "start": "419580",
    "end": "426360"
  },
  {
    "text": "context of the thread that did the ciscal is inside of",
    "start": "426360",
    "end": "431819"
  },
  {
    "text": "the container it will block the request and won't load the driver",
    "start": "431819",
    "end": "438360"
  },
  {
    "text": "as you can see here in the screenshot so let's deep dive into this mechanism",
    "start": "438360",
    "end": "444419"
  },
  {
    "text": "so when the kernel need to detect if the current process is isolated such as in a",
    "start": "444419",
    "end": "450780"
  },
  {
    "text": "container it checks for Server Silo in the e-thread or E process struct",
    "start": "450780",
    "end": "457620"
  },
  {
    "text": "which are the structs in the Canon that represent the threads and processes",
    "start": "457620",
    "end": "464819"
  },
  {
    "text": "the kernel need to check all the job objects which attach to the ethread and",
    "start": "464819",
    "end": "469860"
  },
  {
    "text": "E process struct in order to validate that because",
    "start": "469860",
    "end": "475139"
  },
  {
    "text": "it is possible to attach multiple job objects to a single thread or process",
    "start": "475139",
    "end": "481759"
  },
  {
    "text": "another example of a flow in the kernel which required to validate if the process that did the ciscal is inside of",
    "start": "481919",
    "end": "489180"
  },
  {
    "text": "the container or not is process list in this flow the kernel just skips the",
    "start": "489180",
    "end": "496319"
  },
  {
    "text": "processes that are outside of the container and because of that when a process inside of the container",
    "start": "496319",
    "end": "503940"
  },
  {
    "text": "that a process Lays it gets only the processes which are inside of the",
    "start": "503940",
    "end": "509699"
  },
  {
    "text": "container so after we understood how containers work let's gain empty system inside of",
    "start": "509699",
    "end": "516899"
  },
  {
    "start": "511000",
    "end": "571000"
  },
  {
    "text": "the container when running Docker run command with",
    "start": "516899",
    "end": "522240"
  },
  {
    "text": "user flag we can Define the user that the container will start for example",
    "start": "522240",
    "end": "528440"
  },
  {
    "text": "container user which is a weak user I would have expected the container to run",
    "start": "528440",
    "end": "534540"
  },
  {
    "text": "as weak user but as you can see on the slide some processors inside of the",
    "start": "534540",
    "end": "541260"
  },
  {
    "text": "container are running a system the only process running as a container",
    "start": "541260",
    "end": "547140"
  },
  {
    "text": "user is CMD that we started it means that the container can communicate with",
    "start": "547140",
    "end": "553920"
  },
  {
    "text": "processes with system permissions and more interestingly these processes are",
    "start": "553920",
    "end": "559620"
  },
  {
    "text": "loaded from the container image itself that we can control so no matter what the user flag was",
    "start": "559620",
    "end": "567120"
  },
  {
    "text": "indicated it means that we can gain system permissions",
    "start": "567120",
    "end": "572540"
  },
  {
    "text": "so let's understand how to use this discovery and gaining real system permissions",
    "start": "572880",
    "end": "580620"
  },
  {
    "text": "in order to craft a container image that will run a system always we can follow",
    "start": "580620",
    "end": "587459"
  },
  {
    "text": "four simple steps first con start the container in our lab with system",
    "start": "587459",
    "end": "592740"
  },
  {
    "text": "permissions and then we will create a service that",
    "start": "592740",
    "end": "597779"
  },
  {
    "text": "will run a system start it and convert the container into container image that",
    "start": "597779",
    "end": "604320"
  },
  {
    "text": "it will be possible to deploy it again zero I showed you is not the only way we",
    "start": "604320",
    "end": "612000"
  },
  {
    "text": "can gain system permissions via multiple ways and I'm sure there are even more than the ones that are showed here",
    "start": "612000",
    "end": "619140"
  },
  {
    "text": "because we control the image so we can override system 32 executables that are",
    "start": "619140",
    "end": "624540"
  },
  {
    "text": "loaded from the container startup use dll side loading modify Windows configuration changing the registry and",
    "start": "624540",
    "end": "632279"
  },
  {
    "text": "even changing the permissions of the container user that we are starting",
    "start": "632279",
    "end": "638839"
  },
  {
    "start": "638000",
    "end": "787000"
  },
  {
    "text": "so we gain system permissions inside the container but we can't do anything we",
    "start": "639660",
    "end": "645420"
  },
  {
    "text": "want on the host because we are still isolated and we can do anything we want",
    "start": "645420",
    "end": "650940"
  },
  {
    "text": "with this system so in order to understand how to break the isolation we need to learn about two",
    "start": "650940",
    "end": "658140"
  },
  {
    "text": "past vulnerabilities of container Escape vulnerability represents a method for",
    "start": "658140",
    "end": "665760"
  },
  {
    "text": "finding a vulnerability in containers the first method is to look for apis",
    "start": "665760",
    "end": "673200"
  },
  {
    "text": "that Microsoft just forgot to block unit 42 found the vulnerability in",
    "start": "673200",
    "end": "678839"
  },
  {
    "text": "object manager symbolically the LED a process inside of the container access",
    "start": "678839",
    "end": "683880"
  },
  {
    "text": "any hard drive on the host which means that the container can write arbitrary",
    "start": "683880",
    "end": "690000"
  },
  {
    "text": "files and control the file system the second method is to try to bypass",
    "start": "690000",
    "end": "696300"
  },
  {
    "text": "Microsoft mitigations for sure found a way to bypass the",
    "start": "696300",
    "end": "701399"
  },
  {
    "text": "kernel validation of the server silo by creating a new style object which is not",
    "start": "701399",
    "end": "707100"
  },
  {
    "text": "a cell Asylum Microsoft added the support for containers after most of the kernel apis",
    "start": "707100",
    "end": "714000"
  },
  {
    "text": "were written therefore I chose to look for this first method for looking for",
    "start": "714000",
    "end": "720140"
  },
  {
    "text": "apis with Microsoft just forgot to block",
    "start": "720140",
    "end": "724940"
  },
  {
    "text": "foreign I'll focus on vulnerable fiscals but",
    "start": "725160",
    "end": "730380"
  },
  {
    "text": "there are over 500 CS cards and each one of them is huge so I had to find better",
    "start": "730380",
    "end": "736140"
  },
  {
    "text": "patterns to look for so as I said before it has to be a Cisco",
    "start": "736140",
    "end": "742140"
  },
  {
    "text": "and the second very check it that there are no validations of isolation",
    "start": "742140",
    "end": "748500"
  },
  {
    "text": "this means that Microsoft possibly forgot to add them the third one is tricky",
    "start": "748500",
    "end": "755820"
  },
  {
    "text": "checking administrator privileges if the Cisco have admin privilege",
    "start": "755820",
    "end": "761339"
  },
  {
    "text": "requires admin privileges it means that the impact of the Cisco is high which",
    "start": "761339",
    "end": "767459"
  },
  {
    "text": "means that we can impact the host drastically it can be a major inflict or",
    "start": "767459",
    "end": "773940"
  },
  {
    "text": "it can impact the host in a way that it won't boot again",
    "start": "773940",
    "end": "779100"
  },
  {
    "text": "so I thought about writing escape to validate that but it was easy to do it",
    "start": "779100",
    "end": "784620"
  },
  {
    "text": "manually so I didn't have to after I built this recipe my life become",
    "start": "784620",
    "end": "790860"
  },
  {
    "start": "787000",
    "end": "881000"
  },
  {
    "text": "much easier and I began to find vulnerable assist goals",
    "start": "790860",
    "end": "796500"
  },
  {
    "text": "a quick trivia and the first function that took my my eye was anti-quare",
    "start": "796500",
    "end": "802740"
  },
  {
    "text": "system information this function contains huge switch case",
    "start": "802740",
    "end": "808380"
  },
  {
    "text": "over the enum which contains about 200 options it's not possible to reverse it",
    "start": "808380",
    "end": "815519"
  },
  {
    "text": "manually luckily I had symbols so I could choose only the interesting enum",
    "start": "815519",
    "end": "821220"
  },
  {
    "text": "values and focus on them so I wrote a small code the trigger only the",
    "start": "821220",
    "end": "826500"
  },
  {
    "text": "interesting ones and I found an interesting result so when I call this this call with the",
    "start": "826500",
    "end": "833880"
  },
  {
    "text": "enum value of CIS handle information it returned to me a list of all the handles",
    "start": "833880",
    "end": "840360"
  },
  {
    "text": "and the other sets of objects in the kernel itself and all the processes on the hospital",
    "start": "840360",
    "end": "848100"
  },
  {
    "text": "which means that we can see process ideas of other containers and processes",
    "start": "848100",
    "end": "854700"
  },
  {
    "text": "that are running on the host but it is not possible to use these",
    "start": "854700",
    "end": "860100"
  },
  {
    "text": "handles or other cells because we can't open process to a process which outside",
    "start": "860100",
    "end": "865920"
  },
  {
    "text": "of the container or duplicate the handle of him so it is a minor in folic",
    "start": "865920",
    "end": "873420"
  },
  {
    "text": "so we can get all the process IDs of all the processes on the host but I want",
    "start": "873420",
    "end": "879660"
  },
  {
    "text": "much more so I continue to learn addition is this call I found was a",
    "start": "879660",
    "end": "885480"
  },
  {
    "start": "881000",
    "end": "1103000"
  },
  {
    "text": "anti-system debug control anti-system debug control is similar to",
    "start": "885480",
    "end": "891240"
  },
  {
    "text": "the previous one it's also I have multiple options depend on the enum",
    "start": "891240",
    "end": "896519"
  },
  {
    "text": "value I saw that this function called multiple interesting functions such as enable",
    "start": "896519",
    "end": "903360"
  },
  {
    "text": "kernel debugger but all these options were blocked and only if the current",
    "start": "903360",
    "end": "910980"
  },
  {
    "text": "debugger is enabled sorry only if it's disabled",
    "start": "910980",
    "end": "917100"
  },
  {
    "text": "the only two options that on a clean windows machine will work are dump user",
    "start": "917100",
    "end": "923639"
  },
  {
    "text": "mode which won't give me any actual value because I need an open handle to",
    "start": "923639",
    "end": "928680"
  },
  {
    "text": "it and kernel dump which definitely will do the work",
    "start": "928680",
    "end": "934860"
  },
  {
    "text": "so in order to do a candle dump from the container I need to fill this truck",
    "start": "934860",
    "end": "940019"
  },
  {
    "text": "since the bug life dump control which contains two important",
    "start": "940019",
    "end": "945980"
  },
  {
    "text": "parameters handle to a file in the container it's easy and flags for dump and Page",
    "start": "945980",
    "end": "955260"
  },
  {
    "text": "control which defines how the dump will look like and what it will contain",
    "start": "955260",
    "end": "962040"
  },
  {
    "text": "I took a source code from the internet that triggered the camera dump I change it a bit and managed to call Acura Dam",
    "start": "962040",
    "end": "968880"
  },
  {
    "text": "to do a counter dump and read it from inside the container",
    "start": "968880",
    "end": "974779"
  },
  {
    "text": "so let's look about what we've done and the flags the flags were",
    "start": "975440",
    "end": "981720"
  },
  {
    "text": "undocumented and the ones that I found listed here the interesting one is dump user space",
    "start": "981720",
    "end": "988860"
  },
  {
    "text": "memory and the hyper-v pages I attach a VM with the kernel debugger",
    "start": "988860",
    "end": "996899"
  },
  {
    "text": "and try to do the dump with the VM and it worked I managed to dump all user",
    "start": "996899",
    "end": "1002959"
  },
  {
    "text": "mode hyper-v and all the flags that I found but on a clean windows machine",
    "start": "1002959",
    "end": "1010220"
  },
  {
    "text": "all the flags work except one dumping the user mode and so if the kernel",
    "start": "1010220",
    "end": "1017180"
  },
  {
    "text": "debugger is enabled we can dump LS which contains all the processes and all the",
    "start": "1017180",
    "end": "1023720"
  },
  {
    "text": "passwords in Windows yeah so if we can dump else we can",
    "start": "1023720",
    "end": "1029120"
  },
  {
    "text": "access it but on a regular machines",
    "start": "1029120",
    "end": "1035839"
  },
  {
    "text": "current debugger is not enabled so let's understand how to gain passwords with the camera dump",
    "start": "1035839",
    "end": "1042860"
  },
  {
    "text": "so there are multiple ways to get them the first one is process list we can access from the current dump all the",
    "start": "1042860",
    "end": "1049760"
  },
  {
    "text": "processes and the parameters they can access and we can access the environment",
    "start": "1049760",
    "end": "1056360"
  },
  {
    "text": "variables that are passed through we can access the arguments and in addition to",
    "start": "1056360",
    "end": "1062780"
  },
  {
    "text": "that we can read and query all the registry and that are loaded on the host",
    "start": "1062780",
    "end": "1070640"
  },
  {
    "text": "itself and sometimes passwords are stored there as well and if current debugger is enabled it it",
    "start": "1070640",
    "end": "1078440"
  },
  {
    "text": "is possible to gain all the password much easier with elders and of course Canon debugger is not only",
    "start": "1078440",
    "end": "1085460"
  },
  {
    "text": "about passwords we can see lots of other interesting information for example edrs",
    "start": "1085460",
    "end": "1092960"
  },
  {
    "text": "detect which one are running from view event logs stack traces kernel memory",
    "start": "1092960",
    "end": "1100340"
  },
  {
    "text": "and much more additional vulnerability I found is",
    "start": "1100340",
    "end": "1106820"
  },
  {
    "start": "1103000",
    "end": "1275000"
  },
  {
    "text": "related to the ue5 so in order to understand the impact and how we can use",
    "start": "1106820",
    "end": "1112400"
  },
  {
    "text": "this vulnerability I give a little bit of a background when we bought a new Windows PC it",
    "start": "1112400",
    "end": "1119960"
  },
  {
    "text": "probably will boot in the following sequence first the UEFI in the CPU loads",
    "start": "1119960",
    "end": "1126620"
  },
  {
    "text": "the UEFI drivers and devices then the UEFI reads the envelope memory in order",
    "start": "1126620",
    "end": "1134240"
  },
  {
    "text": "to know how to continue the boot then the boot sequence path from the ue5",
    "start": "1134240",
    "end": "1141500"
  },
  {
    "text": "to the windows on the third step Windows Begins the",
    "start": "1141500",
    "end": "1146780"
  },
  {
    "text": "boot sequence Windows pulls the configuration from BCD which are stored on the EFI partition and then it",
    "start": "1146780",
    "end": "1154640"
  },
  {
    "text": "contains the boat until Windows fully loaded let's focus on the Android storage",
    "start": "1154640",
    "end": "1161960"
  },
  {
    "text": "so the environment contains a configuration of the ue5 these configurations are not stored on",
    "start": "1161960",
    "end": "1169100"
  },
  {
    "text": "the hard disk but on a chip on the motherboard this memory is shared between the",
    "start": "1169100",
    "end": "1174980"
  },
  {
    "text": "operating system Windows and the UEFI itself in order to access a environment",
    "start": "1174980",
    "end": "1182480"
  },
  {
    "text": "variable we need to know its good unique identifier and its name",
    "start": "1182480",
    "end": "1189919"
  },
  {
    "text": "two examples of interesting environment variables are good and boot order",
    "start": "1189919",
    "end": "1197780"
  },
  {
    "text": "boot is a variable the defined for the UEFI how to boot using a specific method",
    "start": "1197780",
    "end": "1204320"
  },
  {
    "text": "for example boot from a specific file boot from hard disk Network and so on",
    "start": "1204320",
    "end": "1211700"
  },
  {
    "text": "boot order defines the order of the boot whether we are going to Define put from",
    "start": "1211700",
    "end": "1218179"
  },
  {
    "text": "CD first hard disk first and so on the boot variable sometimes a link to a",
    "start": "1218179",
    "end": "1227299"
  },
  {
    "text": "file system files on the file system but these files are found in the EFI",
    "start": "1227299",
    "end": "1233240"
  },
  {
    "text": "partition in FAT32 so the container can access them",
    "start": "1233240",
    "end": "1238720"
  },
  {
    "text": "so we can't use it",
    "start": "1238720",
    "end": "1242559"
  },
  {
    "text": "the UEFI support multiple types and flags",
    "start": "1244039",
    "end": "1249280"
  },
  {
    "text": "the variables can be permanent or they can be a volatile",
    "start": "1249280",
    "end": "1255620"
  },
  {
    "text": "and it is possible to Mark each variable when it is possible to access it for",
    "start": "1255620",
    "end": "1262220"
  },
  {
    "text": "example access on boot only so it is not possible to access him from the windows",
    "start": "1262220",
    "end": "1269780"
  },
  {
    "text": "part or is it possible only to access it from the Windows File",
    "start": "1269780",
    "end": "1276080"
  },
  {
    "start": "1275000",
    "end": "1601000"
  },
  {
    "text": "after we finished the introduction let's jump to the group of vulnerable ciscals which are related to the NVM API",
    "start": "1276080",
    "end": "1287080"
  },
  {
    "text": "the first capability we need is listing environment variables on the host",
    "start": "1288380",
    "end": "1293900"
  },
  {
    "text": "we do that at using the anti",
    "start": "1293900",
    "end": "1299440"
  },
  {
    "text": "-venom Barbers which are accessible from the",
    "start": "1299740",
    "end": "1305179"
  },
  {
    "text": "the container the Bell from the host itself",
    "start": "1305179",
    "end": "1312039"
  },
  {
    "text": "without reading them which lead us to to the seconds is called",
    "start": "1313400",
    "end": "1321039"
  },
  {
    "text": "create a specific environment model that we already know the good and the",
    "start": "1321500",
    "end": "1327260"
  },
  {
    "text": "name from before Microsoft didn't block The Cisco from the container as well",
    "start": "1327260",
    "end": "1334280"
  },
  {
    "text": "and the last capability we need is writing the NVM variables",
    "start": "1334280",
    "end": "1341299"
  },
  {
    "text": "and so now we can get read write and list all the andron",
    "start": "1341299",
    "end": "1347900"
  },
  {
    "text": "Barbers that are in the host so let's understand what we can do with",
    "start": "1347900",
    "end": "1353659"
  },
  {
    "text": "it after the container is killed and start over all its storage under some",
    "start": "1353659",
    "end": "1361280"
  },
  {
    "text": "configurations are reverted environment storage is permanent",
    "start": "1361280",
    "end": "1368240"
  },
  {
    "text": "so we can use use this storage in order to store persistent storage and this",
    "start": "1368240",
    "end": "1376220"
  },
  {
    "text": "information will be stored between container reboots host reboots and",
    "start": "1376220",
    "end": "1381980"
  },
  {
    "text": "because NVM variables are stored on the motherboard itself it can stay even up",
    "start": "1381980",
    "end": "1387620"
  },
  {
    "text": "between formats additional impact is that we can",
    "start": "1387620",
    "end": "1394460"
  },
  {
    "text": "communicate between two containers isolated containers both of the containers can communicate",
    "start": "1394460",
    "end": "1402440"
  },
  {
    "text": "with NVM storage so we can read one variable and write it",
    "start": "1402440",
    "end": "1409460"
  },
  {
    "text": "from another which leads us to a possible exfiltration data between them",
    "start": "1409460",
    "end": "1416780"
  },
  {
    "text": "but the most interesting impact is triggering permanent denial of service",
    "start": "1416780",
    "end": "1421820"
  },
  {
    "text": "of the host because the UEFI passes the environment bubble",
    "start": "1421820",
    "end": "1427100"
  },
  {
    "text": "it is possible to change some of them and make the host unbootable forever",
    "start": "1427100",
    "end": "1434059"
  },
  {
    "text": "by changing the boot and boot order doesn't prevent the ufi from booting",
    "start": "1434059",
    "end": "1440419"
  },
  {
    "text": "because Windows back because the ufi have backup configuration which are",
    "start": "1440419",
    "end": "1446900"
  },
  {
    "text": "flashed on the ue5 therefore I have to look for other flows",
    "start": "1446900",
    "end": "1454120"
  },
  {
    "text": "so another variable found in the NVM is hddp",
    "start": "1454880",
    "end": "1461480"
  },
  {
    "text": "writing non-valid value to it will do the job and it will cause permanent",
    "start": "1461480",
    "end": "1466700"
  },
  {
    "text": "denial of service to The Host this variable is read only on the boot",
    "start": "1466700",
    "end": "1474400"
  },
  {
    "text": "so after changing this variable nothing will happen on the host",
    "start": "1474400",
    "end": "1480380"
  },
  {
    "text": "only after the host will shut down and it will shut down as expected",
    "start": "1480380",
    "end": "1486440"
  },
  {
    "text": "and try to boot up again it it won't be possible to load with the windows again",
    "start": "1486440",
    "end": "1493340"
  },
  {
    "text": "so it doesn't matter how much restart you try to do for the host it won't work",
    "start": "1493340",
    "end": "1498860"
  },
  {
    "text": "but this variable exists only on some ureifies on VMware UEFI",
    "start": "1498860",
    "end": "1506659"
  },
  {
    "text": "if we will run Windows container inside windows VM running VMware machine for",
    "start": "1506659",
    "end": "1513559"
  },
  {
    "text": "example es6 VMware Workstation the UEFI of the windows VM is a vulnerable",
    "start": "1513559",
    "end": "1521000"
  },
  {
    "text": "component so when we are writing HTTP variable from the container",
    "start": "1521000",
    "end": "1527960"
  },
  {
    "text": "it will cause the vimo VM to permanent denial of service",
    "start": "1527960",
    "end": "1534520"
  },
  {
    "text": "the host of the machine won't be impacted by this so let's deep dive into the vulnerable",
    "start": "1544159",
    "end": "1550940"
  },
  {
    "text": "component in the UEFI the UEFI is built from multiple parts",
    "start": "1550940",
    "end": "1557779"
  },
  {
    "text": "the vulnerable one is BDS driver which responsible for selecting which device",
    "start": "1557779",
    "end": "1564679"
  },
  {
    "text": "to boot from the root cause in the BDS dxc",
    "start": "1564679",
    "end": "1572960"
  },
  {
    "text": "is that it reads the HTTP variable and because we are overwrite it with invalid",
    "start": "1572960",
    "end": "1580520"
  },
  {
    "text": "value it jumps to the function assert efil",
    "start": "1580520",
    "end": "1585940"
  },
  {
    "text": "which Loops over which breaks the boot sequence",
    "start": "1585940",
    "end": "1592100"
  },
  {
    "text": "and call the permanent denial of service because the UEFI now can't continue and",
    "start": "1592100",
    "end": "1597500"
  },
  {
    "text": "load the windows part so let's jump to the demo in this demo",
    "start": "1597500",
    "end": "1604700"
  },
  {
    "start": "1601000",
    "end": "1728000"
  },
  {
    "text": "I'll show the Privileges relation that I showed before using a malicious Windows",
    "start": "1604700",
    "end": "1611299"
  },
  {
    "text": "container and how I caused the permanent denial of service to a VMware via",
    "start": "1611299",
    "end": "1618640"
  },
  {
    "text": "so here sorry",
    "start": "1621220",
    "end": "1626500"
  },
  {
    "text": "here I'm going to start a weak Windows container",
    "start": "1627080",
    "end": "1634220"
  },
  {
    "text": "with a malicious content so as you can see here the user doesn't",
    "start": "1634220",
    "end": "1642140"
  },
  {
    "text": "have pre-admin privileges but there is a background service that",
    "start": "1642140",
    "end": "1648260"
  },
  {
    "text": "attached to it that reads into reads the input file and writes the output to the",
    "start": "1648260",
    "end": "1655700"
  },
  {
    "text": "output and it runs a system if I'll use this capability in order to",
    "start": "1655700",
    "end": "1662120"
  },
  {
    "text": "override the environment variable HTTP and use the service you can see in here",
    "start": "1662120",
    "end": "1670640"
  },
  {
    "text": "that it wrote six times a to the variable",
    "start": "1670640",
    "end": "1676400"
  },
  {
    "text": "then nothing will happen until the restart so now we will need to wait for the",
    "start": "1676400",
    "end": "1683000"
  },
  {
    "text": "restart and it will shut down as expected everything will go smooth",
    "start": "1683000",
    "end": "1689559"
  },
  {
    "text": "but when the UEFI will try to load it again and read this environment it will",
    "start": "1689559",
    "end": "1697460"
  },
  {
    "text": "fail to continue so as you can see here VMware VM started",
    "start": "1697460",
    "end": "1705559"
  },
  {
    "text": "in its settings and in stock on this it won't",
    "start": "1705559",
    "end": "1711980"
  },
  {
    "text": "continue this step forever",
    "start": "1711980",
    "end": "1715778"
  },
  {
    "text": "thank you so let's explain how the demo works",
    "start": "1721340",
    "end": "1728299"
  },
  {
    "start": "1728000",
    "end": "1969000"
  },
  {
    "text": "so before the demo I created the back door service which run a system and it",
    "start": "1728299",
    "end": "1734779"
  },
  {
    "text": "reads and writes to the input and output files and when we override the variable HTTP",
    "start": "1734779",
    "end": "1743120"
  },
  {
    "text": "it and to restart the machine it triggered the permanent denial of service",
    "start": "1743120",
    "end": "1749360"
  },
  {
    "text": "it is not easy to mitigate these vulnerabilities without official patch for Microsoft",
    "start": "1749360",
    "end": "1755480"
  },
  {
    "text": "but there are a few walk arounds and that we can use in order to validate",
    "start": "1755480",
    "end": "1762080"
  },
  {
    "text": "that we will not we want to be vulnerable to this one and these flows",
    "start": "1762080",
    "end": "1767600"
  },
  {
    "text": "the first and easiest way to do is to use hyperview isolation and not process",
    "start": "1767600",
    "end": "1773000"
  },
  {
    "text": "isolated containers but it would cost us with the performance overhead",
    "start": "1773000",
    "end": "1779720"
  },
  {
    "text": "the another way is to just trust the container images that you want and only",
    "start": "1779720",
    "end": "1786220"
  },
  {
    "text": "use signed once and the other way is another solution is",
    "start": "1786220",
    "end": "1793940"
  },
  {
    "text": "to assume that any process in any container that run in Windows is system",
    "start": "1793940",
    "end": "1801860"
  },
  {
    "text": "so you should Define it in the is the network topology",
    "start": "1801860",
    "end": "1809320"
  },
  {
    "text": "container input scanning used in order to ensure that there are no privileged escalation or malicious content exists",
    "start": "1810200",
    "end": "1817039"
  },
  {
    "text": "in the image I tested my container against container image scanning which didn't detect the",
    "start": "1817039",
    "end": "1823460"
  },
  {
    "text": "privilege escalation but only after I really dug into them into their website",
    "start": "1823460",
    "end": "1829340"
  },
  {
    "text": "I discovered that the don't officially supported but they do show that the",
    "start": "1829340",
    "end": "1835580"
  },
  {
    "text": "image is clean and sadly I could not put my hands on a",
    "start": "1835580",
    "end": "1841340"
  },
  {
    "text": "container image scanning product let's support Windows containers",
    "start": "1841340",
    "end": "1846940"
  },
  {
    "text": "regarding the vendor responses and the previous escalation and",
    "start": "1847340",
    "end": "1852620"
  },
  {
    "text": "Microsoft said that because it may only admin Stratos can start the containers",
    "start": "1852620",
    "end": "1859460"
  },
  {
    "text": "there is no privilege escalation here and regarding the current dump they said",
    "start": "1859460",
    "end": "1865640"
  },
  {
    "text": "that it is not a vulnerability because we need a system permissions inside of the",
    "start": "1865640",
    "end": "1872539"
  },
  {
    "text": "container but they do plan to fix it in the future",
    "start": "1872539",
    "end": "1879320"
  },
  {
    "text": "regarding the environment variable attack which we can read and write environment variables from inside of the",
    "start": "1879320",
    "end": "1886760"
  },
  {
    "text": "container they defined it as moderate denial of service but it is outside of the scope of",
    "start": "1886760",
    "end": "1894200"
  },
  {
    "text": "Windows security update and they do plan to fix it and regarding the last one the VMware",
    "start": "1894200",
    "end": "1902299"
  },
  {
    "text": "ue5 variable hddp female treated as functional issue it",
    "start": "1902299",
    "end": "1908659"
  },
  {
    "text": "because it impacts only the VM itself and it requires admin privileges inside",
    "start": "1908659",
    "end": "1914840"
  },
  {
    "text": "of them and but they do plan to fix it",
    "start": "1914840",
    "end": "1919960"
  },
  {
    "text": "I uploaded all the tools and cards that I use how to do a privilege escalation",
    "start": "1920240",
    "end": "1926120"
  },
  {
    "text": "using your malicious container image how to do care dump and the",
    "start": "1926120",
    "end": "1932059"
  },
  {
    "text": "modifications that I did there and a manual for how to cause permanent denial",
    "start": "1932059",
    "end": "1938120"
  },
  {
    "text": "of service like I showed here and down",
    "start": "1938120",
    "end": "1943279"
  },
  {
    "text": "I would like to thank Mickey for help me reversing the female ufi",
    "start": "1943279",
    "end": "1949220"
  },
  {
    "text": "and I would like to credit multiple other researchers that I best my research on top of them",
    "start": "1949220",
    "end": "1956960"
  },
  {
    "text": "thank you for joining moving to the Q a [Music]",
    "start": "1956960",
    "end": "1964170"
  },
  {
    "text": "[Music]",
    "start": "1968020",
    "end": "1971109"
  }
]