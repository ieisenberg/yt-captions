[
  {
    "text": "okay So uh thank you everyone being here So uh today we will talk about the DBI",
    "start": "320",
    "end": "6799"
  },
  {
    "text": "detection and the escape So my name is Ching Mi I'm the",
    "start": "6799",
    "end": "12400"
  },
  {
    "text": "security researcher So this work is joined work with my friend Dr uh Kasan",
    "start": "12400",
    "end": "17920"
  },
  {
    "text": "and Dr Yao So they all uh work together to build different uh escape capability",
    "start": "17920",
    "end": "26400"
  },
  {
    "text": "So before our talk we want to uh review the typical DBI architecture firstly So",
    "start": "26400",
    "end": "32558"
  },
  {
    "text": "today if you look at the DBI implementation the most important part",
    "start": "32559",
    "end": "37760"
  },
  {
    "text": "is you can uh provides the capability to translate the native code as git",
    "start": "37760",
    "end": "46000"
  },
  {
    "text": "compiler to another native code During this phase you can insert the",
    "start": "46000",
    "end": "52520"
  },
  {
    "text": "instrumentation framework or uh capability to target code that's a way",
    "start": "52520",
    "end": "57840"
  },
  {
    "text": "you can monitor the binary today to do the binary translation this kind of",
    "start": "57840",
    "end": "62879"
  },
  {
    "text": "thing So here we just list the basic component For example you have to",
    "start": "62879",
    "end": "68720"
  },
  {
    "text": "implement the git compiler to translate the native to native and also the uh",
    "start": "68720",
    "end": "75040"
  },
  {
    "text": "target code will be kept in code cache So that's the uh basic memory you put",
    "start": "75040",
    "end": "82560"
  },
  {
    "text": "all target code in code cache and uh uh execute but at the same time you can monitor the code behavior So because you",
    "start": "82560",
    "end": "89920"
  },
  {
    "text": "want to do the instrument uh instrumentation so you have to call back to the instrumentation framework in DBI",
    "start": "89920",
    "end": "98079"
  },
  {
    "text": "then you can do some uh cool stuff For example you say I want to count how many",
    "start": "98079",
    "end": "103320"
  },
  {
    "text": "instruction this code used right You can use this kind of interface to inspect",
    "start": "103320",
    "end": "109040"
  },
  {
    "text": "the every instruction and get counter guess the behavior This kind of thing also the instrumentation framework",
    "start": "109040",
    "end": "115200"
  },
  {
    "text": "itself has to access some OS uh resource So you you can have the emulation",
    "start": "115200",
    "end": "121200"
  },
  {
    "text": "interface this kind of thing So this picture basically shows the whole architecture if you want to build this",
    "start": "121200",
    "end": "127280"
  },
  {
    "text": "kind of uh DVI capability So that that's a way you can build",
    "start": "127280",
    "end": "132840"
  },
  {
    "text": "that So DBI is very interesting and very powerful tool In past years people did a",
    "start": "132840",
    "end": "139920"
  },
  {
    "text": "bunch of uh research say how can we detect the DBI The reason is people use",
    "start": "139920",
    "end": "146319"
  },
  {
    "text": "DBI to do different security usage For example you could use DBI to analyze",
    "start": "146319",
    "end": "153040"
  },
  {
    "text": "malware or you you use DBI to uh analyze the explore do the explor uh detection",
    "start": "153040",
    "end": "159680"
  },
  {
    "text": "right So this kind of capability will be very powerful But if you can uh detect",
    "start": "159680",
    "end": "165760"
  },
  {
    "text": "the DBI uh before you active the malicious code then of course you can avoid lots of uh detection right That's",
    "start": "165760",
    "end": "172879"
  },
  {
    "text": "why people uh do this kind of research So uh uh here I just list the three uh",
    "start": "172879",
    "end": "179519"
  },
  {
    "text": "past research about the detection part So that's all about detect ping detect",
    "start": "179519",
    "end": "184720"
  },
  {
    "text": "the dynamic re So this slides I listed the uh",
    "start": "184720",
    "end": "189760"
  },
  {
    "text": "previous uh uh methodology to detect So of course you can use uh some signature",
    "start": "189760",
    "end": "196400"
  },
  {
    "text": "like file or some uh uh strange behavior So if you are interested in that you can",
    "start": "196400",
    "end": "203360"
  },
  {
    "text": "read the paper I list here to get more idea about the detection but today we",
    "start": "203360",
    "end": "209440"
  },
  {
    "text": "just want to talk about some new detection methodology So we discovered and we want to share that to community",
    "start": "209440",
    "end": "215840"
  },
  {
    "text": "say how we can detect the DBI utility So uh here we want to see we can",
    "start": "215840",
    "end": "224959"
  },
  {
    "text": "have two different approach to do detection So why is simple way to do the",
    "start": "224959",
    "end": "232080"
  },
  {
    "text": "uh passive detection with gating code So the basic idea is uh sometimes you can",
    "start": "232080",
    "end": "237519"
  },
  {
    "text": "write some code the code can run correctly in native mode but if you run",
    "start": "237519",
    "end": "243840"
  },
  {
    "text": "that in DBI environment then device just crash right so that's very straightforward way to stop the uh uh uh",
    "start": "243840",
    "end": "251519"
  },
  {
    "text": "stop the uh inspection and detect the uh uh uh DBI this kind of environment but",
    "start": "251519",
    "end": "257519"
  },
  {
    "text": "that's passive way you cannot actively uh detect say which environment this kind of thing so we also you talk about",
    "start": "257519",
    "end": "264880"
  },
  {
    "text": "a couple approach we did to do the active detection then with that approach you can know okay so the DBI is running",
    "start": "264880",
    "end": "273040"
  },
  {
    "text": "and also even you can know what kind of DBI is running",
    "start": "273040",
    "end": "278320"
  },
  {
    "text": "right so for the passive uh detection with Ging code that's pretty straightforward here uh we just list the",
    "start": "278919",
    "end": "286240"
  },
  {
    "text": "two example say uh what kind of thing you can use here the first thing is the",
    "start": "286240",
    "end": "291440"
  },
  {
    "text": "uh unsupported instruction So that will be interesting because sometimes you",
    "start": "291440",
    "end": "297199"
  },
  {
    "text": "know the JIT compiler in DBI need to do the translation from binary to binary",
    "start": "297199",
    "end": "302320"
  },
  {
    "text": "right So at that time they have to do the de assembly they try to understand the assembly code in the original code",
    "start": "302320",
    "end": "309600"
  },
  {
    "text": "piece and translate to uh target uh uh code uh in the code cache So some code",
    "start": "309600",
    "end": "316080"
  },
  {
    "text": "itself not supported by DB environment For example here the fire return So the",
    "start": "316080",
    "end": "323120"
  },
  {
    "text": "fire return not supported by ping right if you deassembly the pin dr you can see",
    "start": "323120",
    "end": "328320"
  },
  {
    "text": "the string there very clear ping does not support far return So if you put the",
    "start": "328320",
    "end": "334400"
  },
  {
    "text": "far return in your code and in native mode you just make sure the far return return to correct place but the same",
    "start": "334400",
    "end": "342080"
  },
  {
    "text": "code if you run with the DBI you can see the DBI just stop it will not go ahead",
    "start": "342080",
    "end": "348639"
  },
  {
    "text": "to procedure uh following instruction they just stop there So another thing is",
    "start": "348639",
    "end": "354960"
  },
  {
    "text": "uh it could uh detect the DBI with the unsupported behavior So that means some",
    "start": "354960",
    "end": "362560"
  },
  {
    "text": "behavior actually not supported by DB today For example uh we found the uh",
    "start": "362560",
    "end": "369199"
  },
  {
    "text": "cross mode code itself uh not supported by DBI very well So for",
    "start": "369199",
    "end": "376160"
  },
  {
    "text": "example in the wall 64 you want to run the code in 32bit",
    "start": "376160",
    "end": "382240"
  },
  {
    "text": "mode you have to uh use the uh wall 64 environment But in sim uh sim uh context",
    "start": "382240",
    "end": "389120"
  },
  {
    "text": "you could switch the code go the 64-bit mode that's supported by uh OS So I I",
    "start": "389120",
    "end": "394479"
  },
  {
    "text": "will discuss the detail later with that approach you have to do the uh mode",
    "start": "394479",
    "end": "400319"
  },
  {
    "text": "switch So this one not support by DBI today For example here I put the uh blue",
    "start": "400319",
    "end": "407759"
  },
  {
    "text": "uh box here So in 164 bit uh environment if the uh 32bit running the CS selector",
    "start": "407759",
    "end": "416639"
  },
  {
    "text": "the value is uh 23 If you are in the uh",
    "start": "416639",
    "end": "421840"
  },
  {
    "text": "64bit mode then the selector is 33 So if you do this kind of switch then DBI just",
    "start": "421840",
    "end": "428720"
  },
  {
    "text": "show you the uh original uh the the same uh selector But if you code you you",
    "start": "428720",
    "end": "435199"
  },
  {
    "text": "write the code especially for 64-bit but the DBI didn't support 64-bit they just",
    "start": "435199",
    "end": "441199"
  },
  {
    "text": "run the code as 32bit of course you will get crash right that's very",
    "start": "441199",
    "end": "447240"
  },
  {
    "text": "straightforward so now let's back to the active detection with cross mode so the",
    "start": "447240",
    "end": "453759"
  },
  {
    "text": "cross mode idea is very straightforward so today in uh wall 64 environment",
    "start": "453759",
    "end": "461440"
  },
  {
    "text": "uh OS will part uh two different uh CS selector here at least see the CS uh",
    "start": "461440",
    "end": "468400"
  },
  {
    "text": "23rd 23 and the 33 So the 23 uh means current code running in uh uh 32-bit",
    "start": "468400",
    "end": "477039"
  },
  {
    "text": "mode The 33 means the current code running in 64-bit mode So if if the 30",
    "start": "477039",
    "end": "485919"
  },
  {
    "text": "uh if if in 32 uh 32bit mode the CPU will decode the instruction as 32-bit",
    "start": "485919",
    "end": "491440"
  },
  {
    "text": "instruction But if in 64-bit mode the CPU will decode the uh uh the following",
    "start": "491440",
    "end": "497199"
  },
  {
    "text": "instruction as 64-bit uh instruction So think about the decoder algorithm or decoder mapping probably up code that's",
    "start": "497199",
    "end": "504160"
  },
  {
    "text": "sometimes totally different right So same code probably uh work in 32-bit but crashing 64-bit but of course maybe uh",
    "start": "504160",
    "end": "512159"
  },
  {
    "text": "they can work uh correctly but the many different right So why the uh CPU can",
    "start": "512159",
    "end": "517919"
  },
  {
    "text": "recognize the different uh instruction mode because the CS selector in uh",
    "start": "517919",
    "end": "522959"
  },
  {
    "text": "usually uh from the uh for the code segment uh descriptor uh you can use the",
    "start": "522959",
    "end": "529000"
  },
  {
    "text": "uh the uh basic uh the descriptive table to search out the uh descriptor itself",
    "start": "529000",
    "end": "534800"
  },
  {
    "text": "So we have one bit called by error bit that's indicate ter CPU while the code",
    "start": "534800",
    "end": "541080"
  },
  {
    "text": "running which mode should be used to decode the instruction right so that's a",
    "start": "541080",
    "end": "546959"
  },
  {
    "text": "basic uh facility there so once you have the basic",
    "start": "546959",
    "end": "553760"
  },
  {
    "text": "facility then you have to transfer the mode right so usually we provide a couple uh instruction to do this kind of",
    "start": "553760",
    "end": "560080"
  },
  {
    "text": "thing for example we can do the mode transfer with far jump We can do the far",
    "start": "560080",
    "end": "565600"
  },
  {
    "text": "call and the far return also of course we can do area to provide the mode",
    "start": "565600",
    "end": "570760"
  },
  {
    "text": "transfer So here we just uh uh list example So the uh DB part we just see",
    "start": "570760",
    "end": "578800"
  },
  {
    "text": "how you implement the assembly code to do the far jump this kind of thing So once you do the far branch the CPU will",
    "start": "578800",
    "end": "586800"
  },
  {
    "text": "automatically switch to another selector If that selector is 32 uh uh 33 then",
    "start": "586800",
    "end": "593040"
  },
  {
    "text": "they switch to 64-bit If that selector is uh uh uh 23 so select to the 32-bit",
    "start": "593040",
    "end": "601680"
  },
  {
    "text": "mode So because the different CPU mode they support different decoder right so",
    "start": "601800",
    "end": "609360"
  },
  {
    "text": "we we could support the compatability mode that that means some compat compatible instruction could work for",
    "start": "609360",
    "end": "616320"
  },
  {
    "text": "both side uh so but some instruction total to totally different so that's not",
    "start": "616320",
    "end": "622959"
  },
  {
    "text": "uh compatible but here we want to show some uh uh DBI detection with the uh",
    "start": "622959",
    "end": "629120"
  },
  {
    "text": "compatible instruction that could cause some interesting behavior so for example here let's look",
    "start": "629120",
    "end": "636160"
  },
  {
    "text": "at the code piece here so the left side is 64-bit uh instruction right side is",
    "start": "636160",
    "end": "641519"
  },
  {
    "text": "32-bit instruction but you can see the binary or the op code totally same the Decoder itself will decode the",
    "start": "641519",
    "end": "650000"
  },
  {
    "text": "assembly code as same But if you run that in runtime the",
    "start": "650000",
    "end": "655920"
  },
  {
    "text": "behavior different why because see the assembly code here say first one is move",
    "start": "655920",
    "end": "662480"
  },
  {
    "text": "ESP to EX Okay So second one that that's mostly same but second one see call then",
    "start": "662480",
    "end": "670000"
  },
  {
    "text": "the function return then you move the ESP to EBX then we do the S right So",
    "start": "670000",
    "end": "676720"
  },
  {
    "text": "from logic that's totally same But if you look at the CPU behavior the call",
    "start": "676720",
    "end": "684880"
  },
  {
    "text": "instruction will put the uh uh instruction to the uh uh uh puts the",
    "start": "684880",
    "end": "691200"
  },
  {
    "text": "instruction to the uh uh uh stack and the pop because at that time the CPU",
    "start": "691200",
    "end": "698160"
  },
  {
    "text": "oper the ESP operation based on uh eight bytes that's 64 bit right So that means",
    "start": "698160",
    "end": "706120"
  },
  {
    "text": "if after the execution if in 64bit mode then after sub the data is eight but in",
    "start": "706120",
    "end": "714640"
  },
  {
    "text": "32 bits that's should be four So you can see the binary is post same but the",
    "start": "714640",
    "end": "719920"
  },
  {
    "text": "behavior will cost a little bit different So based on this methology you can easily detect the DBI environment",
    "start": "719920",
    "end": "728120"
  },
  {
    "text": "because once the DBI running the debug will not translate the selector to the",
    "start": "728120",
    "end": "734880"
  },
  {
    "text": "33 the the Jagy compiler will force that go 23 So after execution you always get",
    "start": "734880",
    "end": "741920"
  },
  {
    "text": "the data as a four But if you run that in native mode the data will be eight",
    "start": "741920",
    "end": "747839"
  },
  {
    "text": "Right So this is one very simple approach we can do the DB DBI detection",
    "start": "747839",
    "end": "754000"
  },
  {
    "text": "with cross mode code Then we look at the uh how other",
    "start": "754000",
    "end": "762320"
  },
  {
    "text": "ways to do the detection So one simple way is code cache signature So if you",
    "start": "762320",
    "end": "768480"
  },
  {
    "text": "look at the uh implementation in ping so they will put some special signature uh",
    "start": "768480",
    "end": "773920"
  },
  {
    "text": "in the beginning of the code cache For example here is feed beef right So",
    "start": "773920",
    "end": "778959"
  },
  {
    "text": "that's just design So you can you can easily search the uh signature in memory",
    "start": "778959",
    "end": "785279"
  },
  {
    "text": "So for example here we put the two picture The first one is you just search in native mode Then high likely nothing",
    "start": "785279",
    "end": "793440"
  },
  {
    "text": "there because we're not running in the DBI environment But if you run ping to",
    "start": "793440",
    "end": "800399"
  },
  {
    "text": "instrument the uh target code then you can search out a bunch of uh signature",
    "start": "800399",
    "end": "806079"
  },
  {
    "text": "here for here is 67 So a lot right and also because this uh tie to the",
    "start": "806079",
    "end": "812959"
  },
  {
    "text": "implementation detail so you can easily figure out you're running on pin or in dynamic real of course this case for pin",
    "start": "812959",
    "end": "820279"
  },
  {
    "text": "right So that's very straightforward So beyond that another approach you can",
    "start": "820279",
    "end": "827680"
  },
  {
    "text": "uh detect the DBI is think about uh your original code the J compiler will",
    "start": "827680",
    "end": "833839"
  },
  {
    "text": "translate the original code go code cache So high likely the same code but two copy in memory right So you can",
    "start": "833839",
    "end": "841760"
  },
  {
    "text": "write some weird uh signature in assembly code to make sure your function starts from special instruction then you",
    "start": "841760",
    "end": "849920"
  },
  {
    "text": "can search in memory see how many copy in memory for similar pattern So that's",
    "start": "849920",
    "end": "857040"
  },
  {
    "text": "a basic idea to uh detect the code cache right So for example here just very",
    "start": "857040",
    "end": "863600"
  },
  {
    "text": "simple function So left side is the signature function So when you call this",
    "start": "863600",
    "end": "870720"
  },
  {
    "text": "uh function the DBI will translate the code go memory Then after that you can search then you found okay I have",
    "start": "870720",
    "end": "877760"
  },
  {
    "text": "multiple copy because the original code is read only high likely right but",
    "start": "877760",
    "end": "884079"
  },
  {
    "text": "today's the code cache still read executable so once you can know what's",
    "start": "884079",
    "end": "889680"
  },
  {
    "text": "the read rewrite executable what's the read only right much easier to uh guess",
    "start": "889680",
    "end": "894800"
  },
  {
    "text": "ID say which one in code cache so for example here we use the code to detect",
    "start": "894800",
    "end": "901680"
  },
  {
    "text": "the signature then we can In native mode we only have one of course because",
    "start": "901680",
    "end": "906959"
  },
  {
    "text": "that's the code I designed But in the DBI mode in ping or under pin or dynamic",
    "start": "906959",
    "end": "913519"
  },
  {
    "text": "real you can figure out two because that that's the way the DBI uh code cache",
    "start": "913519",
    "end": "918800"
  },
  {
    "text": "works right So and of course another interesting thing is here I'm not sure the the value here is clear So you can",
    "start": "918800",
    "end": "928079"
  },
  {
    "text": "always search two value So the first value during the",
    "start": "928079",
    "end": "933440"
  },
  {
    "text": "first value just equal to the original code offset because of course after you",
    "start": "933440",
    "end": "939760"
  },
  {
    "text": "compile the code the offset is fixed nobody change that right but if the code",
    "start": "939760",
    "end": "946160"
  },
  {
    "text": "instrument by DBI then you could get total different offset so for example",
    "start": "946160",
    "end": "951519"
  },
  {
    "text": "here by uh yellow color the offset totally different right that's because",
    "start": "951519",
    "end": "956880"
  },
  {
    "text": "during the runtime translation the JIT compiler could put the code go different",
    "start": "956880",
    "end": "961920"
  },
  {
    "text": "place because it totally manipulates the code once the code structure and instruction deass assembly correctly So",
    "start": "961920",
    "end": "968639"
  },
  {
    "text": "whatever you will get correct result but they could put the code in arbitrary place depends on",
    "start": "968639",
    "end": "976800"
  },
  {
    "text": "design So once you get particle copy how you detect the code is rewrite",
    "start": "977800",
    "end": "983199"
  },
  {
    "text": "executable that's one interesting thing because uh sometimes the uh DBI will uh hook the system API to block the uh",
    "start": "983199",
    "end": "991360"
  },
  {
    "text": "special for example virtual query this kind of function to uh allow you get the real uh property for this memory So you",
    "start": "991360",
    "end": "999199"
  },
  {
    "text": "have to think about how to avoid this kind of uh API call to detect that So for example the easiest way is uh you",
    "start": "999199",
    "end": "1005759"
  },
  {
    "text": "can try the code uh try cache this kind of try to modify the code if you can modify code and read the simply uh read",
    "start": "1005759",
    "end": "1012480"
  },
  {
    "text": "the content that's same as expected of course that's writable right but the",
    "start": "1012480",
    "end": "1018160"
  },
  {
    "text": "unreal code is not writable because that's in the uh text section and that's",
    "start": "1018160",
    "end": "1023519"
  },
  {
    "text": "read only read write read executable only so now we can uh see another",
    "start": "1023519",
    "end": "1031360"
  },
  {
    "text": "approach for the DBI detection So uh you know the TSR is very common uh",
    "start": "1031360",
    "end": "1037438"
  },
  {
    "text": "techniques or facility for people to enable multi- thread programming right you have to keep some critical data per",
    "start": "1037439",
    "end": "1045319"
  },
  {
    "text": "thread So in Windows they have the facility like APIs like TRS uh alloc get",
    "start": "1045319",
    "end": "1052240"
  },
  {
    "text": "value set value and the free so that will allow you to get space in per",
    "start": "1052240",
    "end": "1057600"
  },
  {
    "text": "thread memory you put some content there This one only tile to current thread",
    "start": "1057600",
    "end": "1063120"
  },
  {
    "text": "right that's a basic facility to enable that so DBI2 also need keep something",
    "start": "1063120",
    "end": "1069280"
  },
  {
    "text": "per thread so they use that so that's very straightforward to detect DBI and",
    "start": "1069280",
    "end": "1074960"
  },
  {
    "text": "also even you can know which one so for example here we write code to list all",
    "start": "1074960",
    "end": "1081280"
  },
  {
    "text": "uh thread uh TS uh value you see if I didn't assign special TS value I expect",
    "start": "1081280",
    "end": "1089200"
  },
  {
    "text": "all value from the KS is equals zero right because that's clean one and",
    "start": "1089200",
    "end": "1094880"
  },
  {
    "text": "nobody use that but same code if you run under DBI then you could get to the",
    "start": "1094880",
    "end": "1102400"
  },
  {
    "text": "different result that could be interesting here the first one we run under pin you can see the uh off uh the",
    "start": "1102400",
    "end": "1109679"
  },
  {
    "text": "index one and the index two equal to some pointer that's not zero right later",
    "start": "1109679",
    "end": "1116240"
  },
  {
    "text": "on we will discuss that but you see they have to put some critical value under",
    "start": "1116240",
    "end": "1121280"
  },
  {
    "text": "that data structure and that's a way you can detect So here this one about the uh uh",
    "start": "1121280",
    "end": "1129919"
  },
  {
    "text": "dynamic real So if you run the dynamic real then you can see the later uh index",
    "start": "1129919",
    "end": "1139120"
  },
  {
    "text": "for example the the uh 53 after that bunch of value there So as per design",
    "start": "1139120",
    "end": "1146480"
  },
  {
    "text": "the DBI to uh the dynamic rule will put bunch of data there So bas this one you",
    "start": "1146480",
    "end": "1152080"
  },
  {
    "text": "can easily detect the DBI right very straightforward Okay now we can discuss",
    "start": "1152080",
    "end": "1159200"
  },
  {
    "text": "some more interesting thing because think about the DBI one the DBI translation they will do some weird",
    "start": "1159200",
    "end": "1166160"
  },
  {
    "text": "thing for example here So if you use the assembly code right rewrites the",
    "start": "1166160",
    "end": "1172919"
  },
  {
    "text": "EBX after translation if you look at the code cache you will see some weird",
    "start": "1172919",
    "end": "1178640"
  },
  {
    "text": "result For example here the instruction change to ESI they move the ESI go EX",
    "start": "1178640",
    "end": "1184880"
  },
  {
    "text": "not EBX to EX Why they do that Because the DBI implementation they need to keep",
    "start": "1184880",
    "end": "1190960"
  },
  {
    "text": "some critical uh control data structure this kind of thing So they are using EBX",
    "start": "1190960",
    "end": "1196799"
  },
  {
    "text": "I mean ping especially talk to ping So they're using EBX So if you want to do",
    "start": "1196799",
    "end": "1202880"
  },
  {
    "text": "some operation on EBX so they will do some manipulation during the translation to avoid trouble from you Right This is",
    "start": "1202880",
    "end": "1212120"
  },
  {
    "text": "straightforward So actually the original EBX value will be keep in some place",
    "start": "1212120",
    "end": "1219679"
  },
  {
    "text": "because EBX uh take over by pin So the EBX value you are using for your",
    "start": "1219679",
    "end": "1225600"
  },
  {
    "text": "programming the value back up in some place So actually",
    "start": "1225600",
    "end": "1231960"
  },
  {
    "text": "here so on the uh code cache running we",
    "start": "1231960",
    "end": "1237039"
  },
  {
    "text": "will see the value in epx point to some place if we uh see the property here you",
    "start": "1237039",
    "end": "1244640"
  },
  {
    "text": "can see that's readr executable then if you look at the beginning of the uh base",
    "start": "1244640",
    "end": "1251360"
  },
  {
    "text": "address you see that's a feedb so that's in code cache that mean when the",
    "start": "1251360",
    "end": "1258159"
  },
  {
    "text": "function your function gets called under DBI uh environment in code cache at that",
    "start": "1258159",
    "end": "1263720"
  },
  {
    "text": "time EBX point to some critical data structure right so they will not allow",
    "start": "1263720",
    "end": "1271120"
  },
  {
    "text": "you to change that but they have to back up the value used",
    "start": "1271120",
    "end": "1277760"
  },
  {
    "text": "by original code to some place right so we just found we just did some simple",
    "start": "1277760",
    "end": "1284480"
  },
  {
    "text": "research and found the original EBX value put on the EBX context could cache",
    "start": "1284480",
    "end": "1291440"
  },
  {
    "text": "contacts plus uh 24hset So they keep that So then the idea is very simple So",
    "start": "1291440",
    "end": "1299600"
  },
  {
    "text": "if you can change something correctly change the uh backup",
    "start": "1299600",
    "end": "1305799"
  },
  {
    "text": "EBX then you use the assembly instruction to read EBX You don't need",
    "start": "1305799",
    "end": "1312480"
  },
  {
    "text": "specify offsize this kind of you just read the EBX the assembly code translated by DBI will read the value",
    "start": "1312480",
    "end": "1319600"
  },
  {
    "text": "from this offset because that that's a back up the EBX value right then you can",
    "start": "1319600",
    "end": "1325480"
  },
  {
    "text": "see the EBX value you read out is some predefined by yourself so if you put",
    "start": "1325480",
    "end": "1331520"
  },
  {
    "text": "some signature there then that's straightforward to figure out that's under DBI environment in ping",
    "start": "1331520",
    "end": "1337919"
  },
  {
    "text": "environment right so we just go through uh four different active detection methodology",
    "start": "1337919",
    "end": "1344960"
  },
  {
    "text": "You can see that's very straightforward So DBI detection is very easy very",
    "start": "1344960",
    "end": "1350200"
  },
  {
    "text": "simple So lots of thing we can do I just list uh four different approach new",
    "start": "1350200",
    "end": "1357159"
  },
  {
    "text": "approach So now let's back to another topic Today we want to discuss DBI",
    "start": "1357159",
    "end": "1363320"
  },
  {
    "text": "escape So you can detect DBI you can avoid to run the malicious code But can",
    "start": "1363320",
    "end": "1369600"
  },
  {
    "text": "you run malicious code without any inspection from DBI That would be cool",
    "start": "1369600",
    "end": "1375200"
  },
  {
    "text": "right You try to analyze one mware then the mware is running but suddenly they",
    "start": "1375200",
    "end": "1380240"
  },
  {
    "text": "escape Then the facility you are using totally doesn't work even take over by malicious code That's very dangerous",
    "start": "1380240",
    "end": "1386880"
  },
  {
    "text": "right So we want to show some case how you do this kind of thing How we can achieve this kind of thing",
    "start": "1386880",
    "end": "1394000"
  },
  {
    "text": "But before we do that we want to back to one simple discussion what's mean DBI",
    "start": "1394000",
    "end": "1399799"
  },
  {
    "text": "escape right what's kind of thing we can see okay we are running in DBI escape so",
    "start": "1399799",
    "end": "1406080"
  },
  {
    "text": "that's about the basic uh different methtoy or different judgment this kind of thing so how how you think about that",
    "start": "1406080",
    "end": "1412799"
  },
  {
    "text": "so we just list couple uh uh thing here to see we want to see if you do this",
    "start": "1412799",
    "end": "1418799"
  },
  {
    "text": "kind of thing that probably that's DVI escape so first thing is uh bandage uh",
    "start": "1418799",
    "end": "1423960"
  },
  {
    "text": "instruction if you can run the uh far return far return in pin context of",
    "start": "1423960",
    "end": "1432080"
  },
  {
    "text": "course that's a escape because the jett compiler suppose remove this kind of",
    "start": "1432080",
    "end": "1439200"
  },
  {
    "text": "instruction it will not allow you to run this kind of instruction because once you can run the far then that's mean you",
    "start": "1439200",
    "end": "1446400"
  },
  {
    "text": "can switch to 64-bit mode then totally out of control so if you can do that",
    "start": "1446400",
    "end": "1451440"
  },
  {
    "text": "that's why it's cap uh escape case So second thing",
    "start": "1451440",
    "end": "1456760"
  },
  {
    "text": "is we talk about the EBX usage right So think about if in the code cache",
    "start": "1456760",
    "end": "1464159"
  },
  {
    "text": "environment you can modify EBX point to the EBX to something",
    "start": "1464159",
    "end": "1470000"
  },
  {
    "text": "totally controlled by yourself then you take over because lots of critical data",
    "start": "1470000",
    "end": "1475279"
  },
  {
    "text": "there then you just take over the DBI of course following you you you have to implement some code to uh totally uh",
    "start": "1475279",
    "end": "1482240"
  },
  {
    "text": "cover DBI uh function but you take over So the third one interesting say in deb",
    "start": "1482240",
    "end": "1488640"
  },
  {
    "text": "environment for example the pin so they have to run the original code in code cache right but at the same",
    "start": "1488640",
    "end": "1496400"
  },
  {
    "text": "time pin has only code do the instrumentation so they have dedicated",
    "start": "1496400",
    "end": "1502840"
  },
  {
    "text": "stack not the same stack as OS defined for uh original code so they have",
    "start": "1502840",
    "end": "1509120"
  },
  {
    "text": "dedicated stack to do this kind of thing they have to put lots of uh written pointer or function pointer on stack",
    "start": "1509120",
    "end": "1515600"
  },
  {
    "text": "Right So if you can run your code under DBI stack of course you escape because",
    "start": "1515600",
    "end": "1522880"
  },
  {
    "text": "you totally control the uh stack part You can point you can initial some uh drop or something whatever you can take",
    "start": "1522880",
    "end": "1529279"
  },
  {
    "text": "over that right So the the the the next one interesting is if you can run the",
    "start": "1529279",
    "end": "1534720"
  },
  {
    "text": "control the instruction in DBI critical context that's mean in DBI environment",
    "start": "1534720",
    "end": "1542640"
  },
  {
    "text": "they try to uh control the target coding uh uh in code cache right they have lots",
    "start": "1542640",
    "end": "1548559"
  },
  {
    "text": "of facility data critical context kept in code cache or some place if you can",
    "start": "1548559",
    "end": "1554000"
  },
  {
    "text": "modify that and uh uh take over that so you run the controlled data struct uh",
    "start": "1554000",
    "end": "1559120"
  },
  {
    "text": "instruction with this kind of environment and context of course you escape the DBI that's out of control",
    "start": "1559120",
    "end": "1565720"
  },
  {
    "text": "right so of course if you can hijack the DBI control flow that's another thing",
    "start": "1565720",
    "end": "1571200"
  },
  {
    "text": "right because the DBI you can think about that's basically like sandbox they want to run the code in code cache and",
    "start": "1571200",
    "end": "1577279"
  },
  {
    "text": "fully controlled by DBI uh engine to make sure everything you did they can see if you control the uh you change the",
    "start": "1577279",
    "end": "1584880"
  },
  {
    "text": "hijack the control flow then lots of things they cannot see of of course you do the escape part and of course if the",
    "start": "1584880",
    "end": "1593880"
  },
  {
    "text": "instrumentation client totally compromised by your code that's also you",
    "start": "1593880",
    "end": "1599600"
  },
  {
    "text": "you you take over that So that's all about the basic uh method or some idea",
    "start": "1599600",
    "end": "1605919"
  },
  {
    "text": "see how you break the limitation from DBI So we want to show another one",
    "start": "1605919",
    "end": "1611600"
  },
  {
    "text": "interesting here is we are using hardware feature to monitor DBI escape because think about whatever the",
    "start": "1611600",
    "end": "1619600"
  },
  {
    "text": "code in code cache or in original code for hardware that's just the execution",
    "start": "1619600",
    "end": "1625360"
  },
  {
    "text": "uh event right so if you can use some event to check all branch instruction",
    "start": "1625360",
    "end": "1631679"
  },
  {
    "text": "this kind of thing of course you can get enough data say uh the target code did the uh DBI escape so for example So here",
    "start": "1631679",
    "end": "1639600"
  },
  {
    "text": "we are using the PMU So we designed special tool to monitor and collect the",
    "start": "1639600",
    "end": "1645679"
  },
  {
    "text": "user space application execution trace So with that approach we collect lots of",
    "start": "1645679",
    "end": "1651120"
  },
  {
    "text": "data Then from the data pattern you can easily see this code did the escape or",
    "start": "1651120",
    "end": "1658200"
  },
  {
    "text": "not So here for example we use the utility to collect the data If the the",
    "start": "1658200",
    "end": "1664880"
  },
  {
    "text": "the first one if the code running in native mode without DBI then we collect a bunch of event but same code if you",
    "start": "1664880",
    "end": "1672080"
  },
  {
    "text": "use the DBI to instrument then you get ping and dynamic real you see the interact call you catched from PMI",
    "start": "1672080",
    "end": "1679760"
  },
  {
    "text": "that's totally different because the DB part has to inject bunch of instruction",
    "start": "1679760",
    "end": "1687760"
  },
  {
    "text": "to implement the instrumentation function right they have to do that the actual code there you have to do that So",
    "start": "1687760",
    "end": "1695600"
  },
  {
    "text": "that's a way we can collect this kind of data So but back to the oh that that's",
    "start": "1695600",
    "end": "1702080"
  },
  {
    "text": "another example here See we collect this kind of data say uh we can collect the from address for example every time the",
    "start": "1702080",
    "end": "1709200"
  },
  {
    "text": "indirect call happen we collect the from address then we get bunch of lock So",
    "start": "1709200",
    "end": "1714480"
  },
  {
    "text": "based on the data we found some very interesting picture So for example here that's a pin we got lots of data So the",
    "start": "1714480",
    "end": "1723200"
  },
  {
    "text": "the first uh picture here uh without the DBI then we collect the data from two uh",
    "start": "1723200",
    "end": "1728960"
  },
  {
    "text": "log then we draw this kind of bar uh the circle you can see the if we call some",
    "start": "1728960",
    "end": "1734399"
  },
  {
    "text": "very special function the dummy function there anything about the dummy function",
    "start": "1734399",
    "end": "1739520"
  },
  {
    "text": "call we we mark that as red color right in the native mode the red red point the",
    "start": "1739520",
    "end": "1746320"
  },
  {
    "text": "port within the circle the hook code circle right because of course that's",
    "start": "1746320",
    "end": "1752080"
  },
  {
    "text": "native mode all code uh connection just within same program But if you run ping with the DBI",
    "start": "1752080",
    "end": "1762640"
  },
  {
    "text": "then you can see left side So you can the the code move up a",
    "start": "1762640",
    "end": "1768240"
  },
  {
    "text": "lot because the code really running is not your original code is the code in",
    "start": "1768240",
    "end": "1774240"
  },
  {
    "text": "code cache So the memory layout change a little bit right and also if you do the",
    "start": "1774240",
    "end": "1782360"
  },
  {
    "text": "escape then of course you can call into original code directly you can catch the lock see the from to address related to",
    "start": "1782360",
    "end": "1789840"
  },
  {
    "text": "the dummy function in memory from original code then you can see the red",
    "start": "1789840",
    "end": "1795360"
  },
  {
    "text": "color about that function after escape case that's still keep in similar place",
    "start": "1795360",
    "end": "1801279"
  },
  {
    "text": "as previous but that's far away from the rest of So you did the escape If you don't have",
    "start": "1801279",
    "end": "1808880"
  },
  {
    "text": "the escape then you can see same picture right side but you don't have the red color uh the the point because you never",
    "start": "1808880",
    "end": "1817039"
  },
  {
    "text": "trigger that special path from hardware perspective So that's interesting picture we show see uh whether the code",
    "start": "1817039",
    "end": "1825120"
  },
  {
    "text": "itself did the escape or not So that's a facility you can monitor the whole uh",
    "start": "1825120",
    "end": "1830640"
  },
  {
    "text": "code logic So we we did similar thing for dynamic re that's also a similar pattern",
    "start": "1830640",
    "end": "1836799"
  },
  {
    "text": "So that's very interesting picture So now we talk about we talk",
    "start": "1836799",
    "end": "1842799"
  },
  {
    "text": "about how to uh uh uh what's the criteria for escape this kind of thing right So now we want to talk about see",
    "start": "1842799",
    "end": "1848399"
  },
  {
    "text": "how we do the escape in our case So let's back to the previous uh uh the",
    "start": "1848399",
    "end": "1854080"
  },
  {
    "text": "architecture uh diagram So you have bunch of place to the escape For example",
    "start": "1854080",
    "end": "1859600"
  },
  {
    "text": "the first one if compiler has bug that you allow transfer some special code in",
    "start": "1859600",
    "end": "1865039"
  },
  {
    "text": "code cache Of course you take over then you can do the escape or you can attack the code cache to make sure the code",
    "start": "1865039",
    "end": "1871360"
  },
  {
    "text": "cache running controlled code by yourself So you can do the escape and also you can compromise the",
    "start": "1871360",
    "end": "1877039"
  },
  {
    "text": "instrumentation interface and of course even the emulation interface So bunch of",
    "start": "1877039",
    "end": "1882480"
  },
  {
    "text": "you do that So today we just releas uh uh approach we did So first one is code",
    "start": "1882480",
    "end": "1888480"
  },
  {
    "text": "cache So we want to do the code cache manipulation So you can do uh something like you run some code then you use",
    "start": "1888480",
    "end": "1895760"
  },
  {
    "text": "other code check the code cache then monitor that uh modify that then run",
    "start": "1895760",
    "end": "1901200"
  },
  {
    "text": "again then probably you take over and also you can do say I get code",
    "start": "1901200",
    "end": "1907440"
  },
  {
    "text": "running in code cache but the code itself will be used to address current",
    "start": "1907440",
    "end": "1912559"
  },
  {
    "text": "code cache then modify following code Then once you call into the following code you take over right So that's",
    "start": "1912559",
    "end": "1919840"
  },
  {
    "text": "another approach Then of course if you can change the DBS stack you can take",
    "start": "1919840",
    "end": "1926080"
  },
  {
    "text": "over right they have a bunch of call instruction puts the return address in stack you change that stack then the",
    "start": "1926080",
    "end": "1932480"
  },
  {
    "text": "stack value and point to your code right you can take over easily and also lot of",
    "start": "1932480",
    "end": "1938720"
  },
  {
    "text": "ping and ping client callback this kind of thing that's writable then in memory if you can change that you take over and",
    "start": "1938720",
    "end": "1945039"
  },
  {
    "text": "also some critical data structure right so finally we will use one uh example",
    "start": "1945039",
    "end": "1950240"
  },
  {
    "text": "with us to uh uh uh with the uh uh file return to enable the cross mode code So",
    "start": "1950240",
    "end": "1956720"
  },
  {
    "text": "let's show the escape part because file return this kind of thing banned by DBI",
    "start": "1956720",
    "end": "1962159"
  },
  {
    "text": "you should not run that if you can run the file return and switch the mode correctly definitely you escape the DBI",
    "start": "1962159",
    "end": "1970320"
  },
  {
    "text": "and another uh interesting thing is in 64-bit mode today if you run the 32-bit",
    "start": "1970320",
    "end": "1975440"
  },
  {
    "text": "DBI in 64bit mode no any hook from the DBI so this total blend you can you can",
    "start": "1975440",
    "end": "1982720"
  },
  {
    "text": "do whatever you want Before that we we want to show one",
    "start": "1982720",
    "end": "1987840"
  },
  {
    "text": "result people did a couple years ago I think for DBI escape they they talking about the approach like uh run the",
    "start": "1987840",
    "end": "1994080"
  },
  {
    "text": "function modify uh cook catch and run So that's very interesting",
    "start": "1994080",
    "end": "1999640"
  },
  {
    "text": "approach So we show the basic uh result here So the first one about say we run",
    "start": "1999640",
    "end": "2005600"
  },
  {
    "text": "the code then we use the DBI instrumentation catch the uh call instruction counter right then we run",
    "start": "2005600",
    "end": "2013360"
  },
  {
    "text": "the DBI with without the uh escape but we run additional code like right side",
    "start": "2013360",
    "end": "2021120"
  },
  {
    "text": "now you can see the value here much more than the original one of course because every act actual code you add the every",
    "start": "2021120",
    "end": "2028799"
  },
  {
    "text": "instru uh call instruction will be catched by DBI if you add the counter",
    "start": "2028799",
    "end": "2034159"
  },
  {
    "text": "But if you do the escape then you can see you did a lot of uh extra call but",
    "start": "2034159",
    "end": "2041360"
  },
  {
    "text": "the DBI facility cannot catch that because you escape the environment it cannot",
    "start": "2041360",
    "end": "2048398"
  },
  {
    "text": "catch So similar thing for uh dynam that's we got uh very similar result",
    "start": "2048919",
    "end": "2056760"
  },
  {
    "text": "here So now uh that's another approach we talk about the uh uh self modifying",
    "start": "2056760",
    "end": "2062560"
  },
  {
    "text": "uh code cache So you can build some very simple patency I write the code the code itself to search the signature create by",
    "start": "2062560",
    "end": "2069599"
  },
  {
    "text": "yourself At that time you uh you can pending the uh put bunch of knobs after",
    "start": "2069599",
    "end": "2075358"
  },
  {
    "text": "the signature But during runtime once you address that signature you can change the code cache directly Then",
    "start": "2075359",
    "end": "2081118"
  },
  {
    "text": "after your code then your controlled code run then you can take over right So very",
    "start": "2081119",
    "end": "2088399"
  },
  {
    "text": "straightforward So another thing here is stack If you can take over stack of",
    "start": "2088599",
    "end": "2093919"
  },
  {
    "text": "course you can do the escape So here I show some very uh simple code piece",
    "start": "2093919",
    "end": "2099520"
  },
  {
    "text": "actually from ping that's exactly the uh uh manure the stack So once the code uh",
    "start": "2099520",
    "end": "2106000"
  },
  {
    "text": "in code cache finish we call this kind of code to save the OS defense stack in",
    "start": "2106000",
    "end": "2114480"
  },
  {
    "text": "data structure then load pin itself on the stack to ESP Then they start",
    "start": "2114480",
    "end": "2122079"
  },
  {
    "text": "following uh function at that time Of course you can just if you take over",
    "start": "2122079",
    "end": "2127680"
  },
  {
    "text": "that bunch of data you can take right So uh here actually I can show another",
    "start": "2127680",
    "end": "2133599"
  },
  {
    "text": "interesting uh data here So if you uh run the instruction like",
    "start": "2133599",
    "end": "2139400"
  },
  {
    "text": "E9 like here at that time the ESP already changed to DBI uh the pin uh",
    "start": "2139400",
    "end": "2147200"
  },
  {
    "text": "ESP pin stack So you see this value So if you look at the uh value for",
    "start": "2147200",
    "end": "2154560"
  },
  {
    "text": "this uh memory you will find actually this one just within same code cache but",
    "start": "2154560",
    "end": "2162160"
  },
  {
    "text": "almost uh the top top uh uh part So the DBI the pin use top part same code cache",
    "start": "2162160",
    "end": "2169760"
  },
  {
    "text": "but top part as the stack So if once you know that you can easily change the uh the value in stack then you can change",
    "start": "2169760",
    "end": "2176800"
  },
  {
    "text": "the return point a bunch of thing right easily to take over and another thing for uh this part",
    "start": "2176800",
    "end": "2184800"
  },
  {
    "text": "is actually the as back to TRS So previously we see uh KS in underpin",
    "start": "2184800",
    "end": "2191839"
  },
  {
    "text": "provides some weird value right but if we inspect the value you will find some interesting thing for example the value",
    "start": "2191839",
    "end": "2197760"
  },
  {
    "text": "here is uh one n uh 3000 1 0 right so if",
    "start": "2197760",
    "end": "2204560"
  },
  {
    "text": "you look at this uh page at beginning that's also feed that's pin signature",
    "start": "2204560",
    "end": "2210560"
  },
  {
    "text": "right and if you look at the 1 offset that's exactly value used in code cache",
    "start": "2210560",
    "end": "2219440"
  },
  {
    "text": "context as EBX that's a critical data structure there right so that mean with",
    "start": "2219440",
    "end": "2225680"
  },
  {
    "text": "TRS you can easily address these kinds of critical data structure if you replace TSP TRS replace TRS then you can",
    "start": "2225680",
    "end": "2235839"
  },
  {
    "text": "easily provide fake data then that's the EBI run in your controlled context you",
    "start": "2235839",
    "end": "2242800"
  },
  {
    "text": "can totally take over that so another critical ical data here",
    "start": "2242800",
    "end": "2248480"
  },
  {
    "text": "is you see the ping has some uh special segment for example the do mv MV and",
    "start": "2248480",
    "end": "2256560"
  },
  {
    "text": "also in ping uh plug-in they also include another one like pin uh uh",
    "start": "2256560",
    "end": "2261880"
  },
  {
    "text": "client so bunch of uh critical function in pin client this kind of place so if",
    "start": "2261880",
    "end": "2268880"
  },
  {
    "text": "you change that you just um uh you you just allow your code called by ping in",
    "start": "2268880",
    "end": "2275440"
  },
  {
    "text": "ping environment So at that time of course you take over the whole system the pin uh DBI",
    "start": "2275440",
    "end": "2283240"
  },
  {
    "text": "environment So here is uh one example So in pin call back you see some",
    "start": "2283240",
    "end": "2289920"
  },
  {
    "text": "data you can easily change but that data could be used as callback or some data",
    "start": "2289920",
    "end": "2296800"
  },
  {
    "text": "from that one could be used as callback So that's mean you can control right",
    "start": "2296800",
    "end": "2304079"
  },
  {
    "text": "So of course and also the uh in ping is itself the pin client",
    "start": "2304079",
    "end": "2310240"
  },
  {
    "text": "callback is kind itself in memory as data structure That's another example If you change the memory then you can take",
    "start": "2310240",
    "end": "2316640"
  },
  {
    "text": "over the uh control flow because when the call happens it call to whatever place you",
    "start": "2316640",
    "end": "2323440"
  },
  {
    "text": "point So here is uh the the escape uh uh",
    "start": "2323640",
    "end": "2328960"
  },
  {
    "text": "uh de example we did So see when escape happen the CS change to 33 and the frame",
    "start": "2328960",
    "end": "2339040"
  },
  {
    "text": "size uh stack frame size as as eight So",
    "start": "2339040",
    "end": "2344240"
  },
  {
    "text": "that's straightforward and in dynamic real we also did a very similar thing So",
    "start": "2344240",
    "end": "2349680"
  },
  {
    "text": "now I can show one uh simple demo for this piece",
    "start": "2349680",
    "end": "2355480"
  },
  {
    "text": "Okay you can see this is the native mode I run that So we only found one uh signature then we finish We did nothing",
    "start": "2391040",
    "end": "2398079"
  },
  {
    "text": "right But if we want run that with",
    "start": "2398079",
    "end": "2402960"
  },
  {
    "text": "pin Oh Oh sorry How can I show the demo",
    "start": "2403720",
    "end": "2410839"
  },
  {
    "text": "Oh thank you Yeah So if we want to run that with under",
    "start": "2410839",
    "end": "2418800"
  },
  {
    "text": "pin this one Yes So the code will search the signature Then they found the code in",
    "start": "2419400",
    "end": "2426079"
  },
  {
    "text": "cook cache this kind of place Then you can manipulate Then we can enable fol Right",
    "start": "2426079",
    "end": "2433480"
  },
  {
    "text": "Then you can see we totally took take over the DBI and trans the code go",
    "start": "2434240",
    "end": "2439280"
  },
  {
    "text": "64-bit mode Now after that you can run uping nothing will be monitored by DBI",
    "start": "2439280",
    "end": "2445040"
  },
  {
    "text": "So if you do the malicious code or something they never can see that So that's a escape",
    "start": "2445040",
    "end": "2453400"
  },
  {
    "text": "So we run the same code for uh dynam So we can see the result",
    "start": "2488160",
    "end": "2495440"
  },
  {
    "text": "here Okay uh after searching and uh now this one under debug and uh we also come to the",
    "start": "2495880",
    "end": "2503760"
  },
  {
    "text": "uh act mode So once you switch to 32 bit C4 mode the DBI cannot control that you",
    "start": "2503760",
    "end": "2510880"
  },
  {
    "text": "fully take over the",
    "start": "2510880",
    "end": "2513920"
  },
  {
    "text": "DBI Okay So this is a demo for uh escape part So now we want to bring another",
    "start": "2520119",
    "end": "2526640"
  },
  {
    "text": "thing See lots of people want to do this kind of thing for drop defense So our",
    "start": "2526640",
    "end": "2532079"
  },
  {
    "text": "conclusion is today if you use the DI to do the drop defense you will stop",
    "start": "2532079",
    "end": "2537599"
  },
  {
    "text": "something but you bring some new attack surface for example code cache huge",
    "start": "2537599",
    "end": "2544920"
  },
  {
    "text": "memory in huge uh code cache size memory in in memory there rewrite",
    "start": "2544920",
    "end": "2552119"
  },
  {
    "text": "executable people can easily put share code there and use the device keep done",
    "start": "2552119",
    "end": "2558240"
  },
  {
    "text": "you can you cannot stop So that's why we think you can defense",
    "start": "2558240",
    "end": "2564400"
  },
  {
    "text": "defense some old explore but you can makes the new explore very easier",
    "start": "2564400",
    "end": "2570000"
  },
  {
    "text": "because it provides the rewrite executable buffer that we should bind for many",
    "start": "2570000",
    "end": "2576119"
  },
  {
    "text": "years So now let's summarize the talk we did So we we just did code some new uh",
    "start": "2576119",
    "end": "2582960"
  },
  {
    "text": "detection uh DBI detection methodology and also we discuss what's kind of thing we can think about as the DBI escape We",
    "start": "2582960",
    "end": "2591359"
  },
  {
    "text": "also go through couple example different way to to deeply uh discuss the DB",
    "start": "2591359",
    "end": "2597920"
  },
  {
    "text": "escape case So we want to see that's very straightforward very easy right previously I think lots of people think",
    "start": "2597920",
    "end": "2604240"
  },
  {
    "text": "DB escape is pretty hard or something that's actually very easy So DB is very",
    "start": "2604240",
    "end": "2609839"
  },
  {
    "text": "powerful tool to to defend against the the existing explorer But if you use",
    "start": "2609839",
    "end": "2614960"
  },
  {
    "text": "that today's implementation to do the defense then actually you bring another big surface that cause lots of trouble",
    "start": "2614960",
    "end": "2624359"
  },
  {
    "text": "Right So basically that's it I can take couple questions if people have question",
    "start": "2624359",
    "end": "2631280"
  },
  {
    "text": "Thank you Yeah please",
    "start": "2631280",
    "end": "2636440"
  },
  {
    "text": "Yeah please",
    "start": "2638079",
    "end": "2641400"
  },
  {
    "text": "Yeah to be honest the uh first thing I want to say is they have design problem",
    "start": "2647200",
    "end": "2652720"
  },
  {
    "text": "because you run targeted code in same process without additional",
    "start": "2652720",
    "end": "2660599"
  },
  {
    "text": "protection So once people figure out the V they easily bypass that's that's the design methodology problem but back to",
    "start": "2660599",
    "end": "2668800"
  },
  {
    "text": "detail lots of design uh the detail implementation problem there so in my",
    "start": "2668800",
    "end": "2674319"
  },
  {
    "text": "mind I think lots of trouble there so whatever from architecture design design",
    "start": "2674319",
    "end": "2679839"
  },
  {
    "text": "uh perspective of the implementation lots of problems there so DBI escape should be pretty straightforward and",
    "start": "2679839",
    "end": "2686079"
  },
  {
    "text": "very easy yeah thank you hopefully uh answer your",
    "start": "2686079",
    "end": "2692240"
  },
  {
    "text": "Okay Do we have any qu questions Okay Thank you very much for",
    "start": "2696079",
    "end": "2702960"
  },
  {
    "text": "your time [Applause]",
    "start": "2702960",
    "end": "2708359"
  }
]