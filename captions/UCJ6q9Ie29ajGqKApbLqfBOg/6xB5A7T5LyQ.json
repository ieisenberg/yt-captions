[
  {
    "start": "0",
    "end": "80000"
  },
  {
    "text": "my name is Jesse Chan you can call me Lewis so happy to be here to talk about",
    "start": "0",
    "end": "5879"
  },
  {
    "text": "slap slap Fung Shui in the Linux kernel if time allows I will also include some",
    "start": "5879",
    "end": "11880"
  },
  {
    "text": "techniques to bypass Elena's kernel mitigations in this talk at the very",
    "start": "11880",
    "end": "19080"
  },
  {
    "text": "beginning I'd like to show many spare minute to introduce myself and my",
    "start": "19080",
    "end": "24119"
  },
  {
    "text": "collaborators again my name is Louis you can follow me on Twitter I am a PhD",
    "start": "24119",
    "end": "30660"
  },
  {
    "text": "student from Penn State doing exploitation and vulnerability analysis",
    "start": "30660",
    "end": "36030"
  },
  {
    "text": "I'm looking for the next two years some internship in both academia and industry if you know of any suitable",
    "start": "36030",
    "end": "43350"
  },
  {
    "text": "positions please contact me the guy in the middle is she my advisor at Penn",
    "start": "43350",
    "end": "49350"
  },
  {
    "text": "State he's also a very teen scholar at a JD talk home mom's our biggest",
    "start": "49350",
    "end": "54660"
  },
  {
    "text": "e-commerce companies in the world the man in the rightmost is Jimmy he is a",
    "start": "54660",
    "end": "60390"
  },
  {
    "text": "director of security Research Center in Silicon Valley of JD dot-com Jimmy looks",
    "start": "60390",
    "end": "66990"
  },
  {
    "text": "so angry since I'm talking about slap slap feng shui I'd like to first to",
    "start": "66990",
    "end": "73710"
  },
  {
    "text": "briefly introduce a walking fashion of them in the kernel dynamic memory is",
    "start": "73710",
    "end": "79920"
  },
  {
    "text": "organized into slab cache which is basically continuous pages each slab",
    "start": "79920",
    "end": "86100"
  },
  {
    "start": "80000",
    "end": "135000"
  },
  {
    "text": "cache is divided into slots for holding objects free slots are organized into a",
    "start": "86100",
    "end": "92640"
  },
  {
    "text": "single list with a hat pointer for allocation and sorry sir okay for",
    "start": "92640",
    "end": "100950"
  },
  {
    "text": "allocation the Conner holds the object by retrieving a slot from the free deist",
    "start": "100950",
    "end": "106140"
  },
  {
    "text": "hat then head pointer moves towards the next slot in the list objects English in",
    "start": "106140",
    "end": "113310"
  },
  {
    "text": "the same staff cache of similar size or in the same style type for the",
    "start": "113310",
    "end": "119040"
  },
  {
    "text": "allocation the kana recycles it back to the head and updates the had pointer in",
    "start": "119040",
    "end": "125070"
  },
  {
    "text": "this way slab slab a locator works in a first in last out fashion and the both",
    "start": "125070",
    "end": "130560"
  },
  {
    "text": "allocation and de-allocation occur at a Freda stat let's Cesar why they",
    "start": "130560",
    "end": "137310"
  },
  {
    "start": "135000",
    "end": "212000"
  },
  {
    "text": "adopted exploitation approach for use after free vulnerability in the linux kernel at the very beginning the",
    "start": "137310",
    "end": "144959"
  },
  {
    "text": "vulnerable object possesses a slot and encloses a function pointer targeting a",
    "start": "144959",
    "end": "150450"
  },
  {
    "text": "benign address the kind of visits the fields of the vulnerable object vial of",
    "start": "150450",
    "end": "155909"
  },
  {
    "text": "pointer we can exploit the use of the free vulnerability in three steps in the",
    "start": "155909",
    "end": "164099"
  },
  {
    "text": "first step is a vulnerable object is freed and the slot holding it is recycled for following allocations the",
    "start": "164099",
    "end": "172019"
  },
  {
    "text": "dangling pointer occurs and is not notified the adversary's can continue to",
    "start": "172019",
    "end": "178500"
  },
  {
    "text": "visit to the freedom Emery including the function pointer at this moment the",
    "start": "178500",
    "end": "184560"
  },
  {
    "text": "function pointer still targets denying edges in the second step the adversary's",
    "start": "184560",
    "end": "191250"
  },
  {
    "text": "perform heap spray to allocate an object to the same slot as a vulnerable object",
    "start": "191250",
    "end": "196949"
  },
  {
    "text": "and I will write its function pointer to a malicious edges finally in the third",
    "start": "196949",
    "end": "203910"
  },
  {
    "text": "step with the reference overwritten function pointer wires a dangling pointer to hijackers okona execution the",
    "start": "203910",
    "end": "213269"
  },
  {
    "text": "workflow of slab Auto a bounded right exploitation is slightly similar the",
    "start": "213269",
    "end": "219449"
  },
  {
    "text": "overflow represented in shadow corrupts the vulnerable object in green as well",
    "start": "219449",
    "end": "225239"
  },
  {
    "text": "as a following memory region in the slab we can also exploit this Auto bound",
    "start": "225239",
    "end": "230879"
  },
  {
    "text": "right in three steps the first step is to allocate a victim object in red which",
    "start": "230879",
    "end": "238049"
  },
  {
    "text": "encloses a function pointer next to the vulnerable object at this moment is a",
    "start": "238049",
    "end": "244139"
  },
  {
    "text": "function pointer targets a benign address in the second estab would",
    "start": "244139",
    "end": "249359"
  },
  {
    "text": "trigger the security bug to overwrite the function pointer to a malicious edges finally in the third step with the",
    "start": "249359",
    "end": "258120"
  },
  {
    "text": "reference a function pointer to hijack a Toccoa execution to disable mitigations and escalate privilege",
    "start": "258120",
    "end": "265780"
  },
  {
    "text": "even with ZZZ widely adopted the exploitation approaches for use after",
    "start": "265780",
    "end": "271010"
  },
  {
    "text": "free and slat Otto abounded right it's is still challenging to craft an exploit",
    "start": "271010",
    "end": "277810"
  },
  {
    "start": "277000",
    "end": "417000"
  },
  {
    "text": "the first challenge is to determine which objects are useful for a given",
    "start": "277810",
    "end": "283160"
  },
  {
    "text": "security bug the victim object the vulnerable object and a spray object",
    "start": "283160",
    "end": "288770"
  },
  {
    "text": "should be of similar size or in the same step you are in the same same type to be",
    "start": "288770",
    "end": "294680"
  },
  {
    "text": "allocated to the same slab cache besides the victim object should enclose",
    "start": "294680",
    "end": "300650"
  },
  {
    "text": "a function pointer or other senate of data and their offsets should be within",
    "start": "300650",
    "end": "305900"
  },
  {
    "text": "the memory corruption range so that we can corrupt them during exploitation for",
    "start": "305900",
    "end": "311870"
  },
  {
    "text": "spray object the content of it must be contourable so that we can use it for",
    "start": "311870",
    "end": "317360"
  },
  {
    "text": "overwrite the second challenge is how to allocate the allocate and the reference",
    "start": "317360",
    "end": "323420"
  },
  {
    "text": "that current objects using system call sequence and arguments as object",
    "start": "323420",
    "end": "329240"
  },
  {
    "text": "operations happened inside kernel the director interface between counter space and user space a system call the third",
    "start": "329240",
    "end": "338240"
  },
  {
    "text": "challenge is how to manipulate slab to obtain desired layout along with",
    "start": "338240",
    "end": "344150"
  },
  {
    "text": "allocations of the vulnerable object as a victim object and a spray object other",
    "start": "344150",
    "end": "349310"
  },
  {
    "text": "objects can be allocated of read generating set a effect to a slab layout",
    "start": "349310",
    "end": "354790"
  },
  {
    "text": "the possible layouts can vary case-by-case and will summarize them",
    "start": "354790",
    "end": "359870"
  },
  {
    "text": "into two situations the filter situation is a target slot is unoccupied whereas a",
    "start": "359870",
    "end": "366050"
  },
  {
    "text": "victim object is allocated to another slot the second situation is a target",
    "start": "366050",
    "end": "371600"
  },
  {
    "text": "slot is taking over by asset effect object both federations influence the",
    "start": "371600",
    "end": "377660"
  },
  {
    "text": "slab layout and thus the function pointer will not be overwritten as expected when corruption happens is not",
    "start": "377660",
    "end": "386090"
  },
  {
    "text": "easy to eliminate the SATA effect because in a single system call the",
    "start": "386090",
    "end": "391250"
  },
  {
    "text": "vulnerable object and the side effect object can be allocated sequentially making a devii code to correct the",
    "start": "391250",
    "end": "398360"
  },
  {
    "text": "layout through facing all the challenges are listed so far a very common in developing exploits",
    "start": "398360",
    "end": "405439"
  },
  {
    "text": "for slab based the vulnerabilities not only for use after free and a slab out",
    "start": "405439",
    "end": "411409"
  },
  {
    "text": "of on the right but also for other types such as double free to tackle the three",
    "start": "411409",
    "end": "419179"
  },
  {
    "start": "417000",
    "end": "464000"
  },
  {
    "text": "challenges we build a canal architect a database which in which will record Conor objects useful for exploitation as",
    "start": "419179",
    "end": "427009"
  },
  {
    "text": "well as system calls and corresponding arguments to allocate deallocate and",
    "start": "427009",
    "end": "432229"
  },
  {
    "text": "dereference them this addresses change' wong and 22.i are described with the",
    "start": "432229",
    "end": "438259"
  },
  {
    "text": "details in the first part of this roadmap in a second apart I will explain",
    "start": "438259",
    "end": "444050"
  },
  {
    "text": "how we add a just a slab layout systematically to overrun o to overcome challenges 3 where a defect happens",
    "start": "444050",
    "end": "452559"
  },
  {
    "text": "finally in the third part I will go through some tricks that may interest to you I also have a diamond session for",
    "start": "452559",
    "end": "460039"
  },
  {
    "text": "you so that you can gain some hands-on experience following existing research",
    "start": "460039",
    "end": "467300"
  },
  {
    "start": "464000",
    "end": "494000"
  },
  {
    "text": "works one straightforward solution to change the Wang and the 22 is to boot up",
    "start": "467300",
    "end": "472639"
  },
  {
    "text": "the kernel and around aggression test we monitor the allocation de-allocation and",
    "start": "472639",
    "end": "478249"
  },
  {
    "text": "the reference of objects in the kernel and call rates them to a system calls invoked in a regression test a suite",
    "start": "478249",
    "end": "486519"
  },
  {
    "text": "well this solution works well for use user space programs we cannot apply it",
    "start": "486519",
    "end": "492079"
  },
  {
    "text": "directly to the kernel the first reason is a kernel huge code base after booting",
    "start": "492079",
    "end": "500149"
  },
  {
    "text": "up the system there are hundreds of thousands of objects and nearly 1 million pointers the number of objects",
    "start": "500149",
    "end": "507199"
  },
  {
    "text": "is much larger than that in user space programs why not of why not all of them",
    "start": "507199",
    "end": "513018"
  },
  {
    "text": "are useful additionally the Linux kernel has over 300 system calls with various",
    "start": "513019",
    "end": "519289"
  },
  {
    "text": "combinations of arguments which is also a huge search space to make things worse",
    "start": "519289",
    "end": "525980"
  },
  {
    "text": "system calls are not independent for example if you want to send a network",
    "start": "525980",
    "end": "531589"
  },
  {
    "text": "message you mean you need vbeaute socket in advance the complex",
    "start": "531589",
    "end": "537230"
  },
  {
    "text": "around town context further increases the difficulty the second reason is",
    "start": "537230",
    "end": "543379"
  },
  {
    "text": "Elena's kernel runs in an asynchronous fashion as an example the real copy",
    "start": "543379",
    "end": "549470"
  },
  {
    "text": "update mechanism first registers a function pointer while delays is the",
    "start": "549470",
    "end": "554660"
  },
  {
    "text": "reference after a grace period when seen such the reference we have already lost",
    "start": "554660",
    "end": "560179"
  },
  {
    "text": "the clue for where the function pointer is registered the third reason is the",
    "start": "560179",
    "end": "565879"
  },
  {
    "text": "Linux kernel is a multitasker system user space processors kernel threads as",
    "start": "565879",
    "end": "571399"
  },
  {
    "text": "well as hardware interrupts can trigger color execution which also operate",
    "start": "571399",
    "end": "576410"
  },
  {
    "text": "objects generating noise and the failings a straightforward solution",
    "start": "576410",
    "end": "582459"
  },
  {
    "start": "582000",
    "end": "635000"
  },
  {
    "text": "considering all these constraints were proposed about a solution to resolve both challenges our solution filter uses",
    "start": "582459",
    "end": "590119"
  },
  {
    "text": "static analysis to identify useful objects from the source code we learn",
    "start": "590119",
    "end": "596089"
  },
  {
    "text": "the program sites where identified objects are allocated T allocated and the T referenced along the kernel call",
    "start": "596089",
    "end": "603079"
  },
  {
    "text": "graph which face from the sites of interest back to the system call system",
    "start": "603079",
    "end": "608149"
  },
  {
    "text": "covers that can potentially reach these sites static analysis offers us the",
    "start": "608149",
    "end": "613999"
  },
  {
    "text": "information about which which kernel objects are useful as well as which",
    "start": "613999",
    "end": "619189"
  },
  {
    "text": "system calls we can use to operate these objects to eliminate false positives of",
    "start": "619189",
    "end": "625669"
  },
  {
    "text": "static analysis and complete the system course with arguments we'll run kind of",
    "start": "625669",
    "end": "631160"
  },
  {
    "text": "fuzzing to try go to object operations in wrong time in static analysis we'll",
    "start": "631160",
    "end": "637639"
  },
  {
    "start": "635000",
    "end": "678000"
  },
  {
    "text": "focus on two types of objects that are useful for exploitation the first type",
    "start": "637639",
    "end": "643249"
  },
  {
    "text": "is victim object which typically has a function pointer or data object pointer",
    "start": "643249",
    "end": "649269"
  },
  {
    "text": "attackers can overwrite these pointers to a malicious code address or a fake",
    "start": "649269",
    "end": "654739"
  },
  {
    "text": "object prepared in the vents so after hydral control flow we defined",
    "start": "654739",
    "end": "661040"
  },
  {
    "text": "the two reference sites as a program statements where interact call happens",
    "start": "661040",
    "end": "666680"
  },
  {
    "text": "considering asynchronous callbacks we also overlooked carrying two functions like k3 ICU which registers a",
    "start": "666680",
    "end": "674760"
  },
  {
    "text": "callback to reference to Frieza object the second type is spray object which",
    "start": "674760",
    "end": "682650"
  },
  {
    "start": "678000",
    "end": "700000"
  },
  {
    "text": "most of the content can be controlled Kona invokes functions like copy from",
    "start": "682650",
    "end": "687810"
  },
  {
    "text": "user to migrate the data from you know space to Kona space leveraging this",
    "start": "687810",
    "end": "693090"
  },
  {
    "text": "feature the adversary's can prepare exploit a payload and have them decide in the counter space where the sites of",
    "start": "693090",
    "end": "702210"
  },
  {
    "start": "700000",
    "end": "781000"
  },
  {
    "text": "interest will build a cannot object that either we build a conical graph and perform",
    "start": "702210",
    "end": "707310"
  },
  {
    "text": "reached by analysis to identify potential system costs and the example",
    "start": "707310",
    "end": "713250"
  },
  {
    "text": "on the right half of the slide we can we can tell that system call set socket",
    "start": "713250",
    "end": "718320"
  },
  {
    "text": "option can reach the allocation site in the function IP MC join group because",
    "start": "718320",
    "end": "724170"
  },
  {
    "text": "there is a path from the Cisco entry to the allocation site we use this result",
    "start": "724170",
    "end": "729720"
  },
  {
    "text": "to restrict a system calls used in fuzzy so as to improve the efficiency to",
    "start": "729720",
    "end": "735860"
  },
  {
    "text": "better serve our purpose we customize a call graph with delete function notes in",
    "start": "735860",
    "end": "741720"
  },
  {
    "text": "the initial text section from the graph because they are not used after the",
    "start": "741720",
    "end": "747480"
  },
  {
    "text": "condor boots up we also delete call edges between independent modules to make the graph",
    "start": "747480",
    "end": "754140"
  },
  {
    "text": "more accurate we add edges of asynchronous callbacks so that sites will asynchronously",
    "start": "754140",
    "end": "761250"
  },
  {
    "text": "reference its registered can also be can also be traced since the call graph",
    "start": "761250",
    "end": "767280"
  },
  {
    "text": "still involves false positives which means not all the system costs identified can really trigger objects",
    "start": "767280",
    "end": "774390"
  },
  {
    "text": "operations we run Connor fussing for further confirmation and completing the",
    "start": "774390",
    "end": "779550"
  },
  {
    "text": "arguments as I mentioned in previous slides the kernel is a multitasker",
    "start": "779550",
    "end": "786990"
  },
  {
    "start": "781000",
    "end": "844000"
  },
  {
    "text": "system which can generate noises to our kernel fuzzing the noises come from two",
    "start": "786990",
    "end": "792270"
  },
  {
    "text": "sources one sauce is objects of the same type in our fuzzing executor",
    "start": "792270",
    "end": "798899"
  },
  {
    "text": "because we want to bind allocation de-allocation and DD reference to the",
    "start": "798899",
    "end": "804449"
  },
  {
    "text": "same object during exploitation we need to distinguish the operations of other",
    "start": "804449",
    "end": "810329"
  },
  {
    "text": "objects to prevent confusion analysis is",
    "start": "810329",
    "end": "815399"
  },
  {
    "text": "system calls from other processors kernel threads and hardware interrupts the also triggers okona execution",
    "start": "815399",
    "end": "822360"
  },
  {
    "text": "resulting in allocation de-allocation and the reference of cone objects to",
    "start": "822360",
    "end": "827730"
  },
  {
    "text": "eliminate noises in kernel phasing we instrument checking after the size of interest to examine first it is our",
    "start": "827730",
    "end": "835499"
  },
  {
    "text": "fuzzy akka scooter that manipulates the object and a second almond all manipulations are tied to one object",
    "start": "835499",
    "end": "844399"
  },
  {
    "text": "Rani against erosion 4.15 from the modules enabled by default no",
    "start": "844399",
    "end": "850740"
  },
  {
    "text": "configuration and authority to other modules the static analysis identifies",
    "start": "850740",
    "end": "856970"
  },
  {
    "text": "124 victim objects and the four spray objects through kono fussing with",
    "start": "856970",
    "end": "862980"
  },
  {
    "text": "further confirm allocations of 75 objects and the references of nearly 30",
    "start": "862980",
    "end": "868769"
  },
  {
    "text": "objects average of passing time is two minutes till now we have resolved gender",
    "start": "868769",
    "end": "875730"
  },
  {
    "text": "one and 22 by building a canal object database the next challenge is to",
    "start": "875730",
    "end": "881670"
  },
  {
    "text": "eliminate sad effect on slab layout the layout at adjustment involves many",
    "start": "881670",
    "end": "888209"
  },
  {
    "start": "885000",
    "end": "935000"
  },
  {
    "text": "possibilities first of all the desire of the layout depends on the vulnerability",
    "start": "888209",
    "end": "893790"
  },
  {
    "text": "and the varies case-by-case giving a new vulnerability it has a new corruption",
    "start": "893790",
    "end": "899579"
  },
  {
    "text": "range and a different control of a corruption value secondly the SATA",
    "start": "899579",
    "end": "904920"
  },
  {
    "text": "effect also depends on the vulnerability for example the numbers of allocations",
    "start": "904920",
    "end": "910319"
  },
  {
    "text": "and deallocations in each system call can be different giving a new vulnerability the allocation order of",
    "start": "910319",
    "end": "918119"
  },
  {
    "text": "the vulnerable object is not consistent neither therefore instead of covering",
    "start": "918119",
    "end": "924959"
  },
  {
    "text": "all possibilities case-by-case will summarize them in the two situations based on the position",
    "start": "924959",
    "end": "931499"
  },
  {
    "text": "relations changer object and the target is lot the first a situation is the target slot is",
    "start": "931499",
    "end": "939000"
  },
  {
    "start": "935000",
    "end": "949000"
  },
  {
    "text": "unoccupied assuming that the target is the third slot in the free list let's",
    "start": "939000",
    "end": "944790"
  },
  {
    "text": "see why it is not occupied during exploitation we allocated a vulnerable",
    "start": "944790",
    "end": "951690"
  },
  {
    "start": "949000",
    "end": "979000"
  },
  {
    "text": "object possessing the first slot in list and the header pointer moves to a second",
    "start": "951690",
    "end": "957150"
  },
  {
    "text": "slot then we allocate the victim object to a second slot leaving our target",
    "start": "957150",
    "end": "964020"
  },
  {
    "text": "leaving a target slot unoccupied the side effect happens because there are",
    "start": "964020",
    "end": "970410"
  },
  {
    "text": "too few allocations in this case we allocated two objects while Zarda of the",
    "start": "970410",
    "end": "976710"
  },
  {
    "text": "target slot or the third our solution is to add more allocations before the",
    "start": "976710",
    "end": "983550"
  },
  {
    "text": "victim object as in the original exploitation we allocate the vulnerable",
    "start": "983550",
    "end": "988770"
  },
  {
    "text": "object in the first step in a second step however we allocate an extra dummy",
    "start": "988770",
    "end": "995040"
  },
  {
    "text": "object from the database we built two slides the head pointer towards the",
    "start": "995040",
    "end": "1000320"
  },
  {
    "text": "third slot finally in the third step we allocate a victim object to occupy the",
    "start": "1000320",
    "end": "1007190"
  },
  {
    "text": "target slot and obtain the desired layout compared with original",
    "start": "1007190",
    "end": "1013250"
  },
  {
    "text": "exploitation we add one more allocation in the second step to fix the issue",
    "start": "1013250",
    "end": "1019750"
  },
  {
    "start": "1020000",
    "end": "1050000"
  },
  {
    "text": "y is easy to deal with the first situation it requires some tricks to",
    "start": "1020740",
    "end": "1026000"
  },
  {
    "text": "handle a second situation where the target slot is occupied assume that our",
    "start": "1026000",
    "end": "1031610"
  },
  {
    "text": "target is the second slot in list let's see why the victim object cannot possess",
    "start": "1031610",
    "end": "1037160"
  },
  {
    "text": "our target slot in the first step we allocate the vulnerable object along",
    "start": "1037160",
    "end": "1043819"
  },
  {
    "text": "with a side-effect object which occupies a second which occupies our target slot",
    "start": "1043820",
    "end": "1050260"
  },
  {
    "start": "1050000",
    "end": "1071000"
  },
  {
    "text": "when allocating the victim object in a second staff obviously we cannot obtain",
    "start": "1050260",
    "end": "1056120"
  },
  {
    "text": "the desired layout the reason is there are too many allocations before the",
    "start": "1056120",
    "end": "1062330"
  },
  {
    "text": "victim object a straightforward solution is to reduce allocations by deallocating the set",
    "start": "1062330",
    "end": "1069470"
  },
  {
    "text": "effect object as in the original exploitation we allocate the vulnerable",
    "start": "1069470",
    "end": "1075260"
  },
  {
    "start": "1071000",
    "end": "1087000"
  },
  {
    "text": "object and the side effect object in the first step in a second step we D",
    "start": "1075260",
    "end": "1080510"
  },
  {
    "text": "allocate the side effect object popping out a free slot which saves room for the",
    "start": "1080510",
    "end": "1086120"
  },
  {
    "text": "victim object finally in the third step we allocated a victim object and obtain",
    "start": "1086120",
    "end": "1092060"
  },
  {
    "start": "1087000",
    "end": "1100000"
  },
  {
    "text": "the desired layout while this solution looks perfect and elegant it encounters",
    "start": "1092060",
    "end": "1098660"
  },
  {
    "text": "with two programs the first program is was froze the program has a generality",
    "start": "1098660",
    "end": "1104480"
  },
  {
    "start": "1100000",
    "end": "1133000"
  },
  {
    "text": "as a set effect object is closely related to the vulnerability given new",
    "start": "1104480",
    "end": "1110570"
  },
  {
    "text": "vulnerability we needed to figure out new system calls and arguments to free",
    "start": "1110570",
    "end": "1115700"
  },
  {
    "text": "the SATA effect object sorry the second",
    "start": "1115700",
    "end": "1120740"
  },
  {
    "text": "problem is a vulnerable object can also be free be free along with the satyr",
    "start": "1120740",
    "end": "1126470"
  },
  {
    "text": "that object it's very critical because without the vulnerable object how do we",
    "start": "1126470",
    "end": "1131810"
  },
  {
    "text": "trigger the vulnerability alternatively our solution is to reorganize the free",
    "start": "1131810",
    "end": "1137810"
  },
  {
    "text": "list and switch the order of the target slot we allocate three dummy objects in",
    "start": "1137810",
    "end": "1143750"
  },
  {
    "text": "the photo step then we'll freeze them in the auto second third and the first as",
    "start": "1143750",
    "end": "1150310"
  },
  {
    "text": "the allocation is at the head of the list the list is reorganized in this new",
    "start": "1150310",
    "end": "1157040"
  },
  {
    "text": "list the target slots are Dalia third with this new model we allocate the",
    "start": "1157040",
    "end": "1163220"
  },
  {
    "start": "1160000",
    "end": "1183000"
  },
  {
    "text": "vulnerable object to a foster slot and the side-effect object 2/3 to a second",
    "start": "1163220",
    "end": "1168650"
  },
  {
    "text": "slot this time the target slot is untouched because it is a third slot in",
    "start": "1168650",
    "end": "1174230"
  },
  {
    "text": "the list we allocate the victim object to possess the target slot and obtain",
    "start": "1174230",
    "end": "1180110"
  },
  {
    "text": "the desired layout we use 27",
    "start": "1180110",
    "end": "1185390"
  },
  {
    "start": "1183000",
    "end": "1372000"
  },
  {
    "text": "vulnerabilities to evaluate the effectiveness of our approach the evaluation set consists of three types",
    "start": "1185390",
    "end": "1192740"
  },
  {
    "text": "of vulnerability including use of the free double free and slap Autobahn right our goal is to",
    "start": "1192740",
    "end": "1200120"
  },
  {
    "text": "obtain the control floor hijacking primitive because it is Jo enough to bypass mitigations and complete an",
    "start": "1200120",
    "end": "1206929"
  },
  {
    "text": "exploit we succeed in 14 cases with public exploits and the three cases",
    "start": "1206929",
    "end": "1212960"
  },
  {
    "text": "without public exploits among the nine failure cases six are because POC",
    "start": "1212960",
    "end": "1220549"
  },
  {
    "text": "manifests limited capability for example overflow happens inside a vulnerable",
    "start": "1220549",
    "end": "1226309"
  },
  {
    "text": "object without corrupting others our approach considers its capability as",
    "start": "1226309",
    "end": "1232850"
  },
  {
    "text": "limited and failed to generate an exploit this result enlightens our",
    "start": "1232850",
    "end": "1238520"
  },
  {
    "text": "future work to continue exploring more capability of security bugs for",
    "start": "1238520",
    "end": "1244070"
  },
  {
    "text": "remaining three cases the vulnerability is in special cache in which we do not",
    "start": "1244070",
    "end": "1249200"
  },
  {
    "text": "find suitable objects for exploitation to resolve this issue we can include",
    "start": "1249200",
    "end": "1254840"
  },
  {
    "text": "more modules for analysis after describing the key ideas I'd like to go",
    "start": "1254840",
    "end": "1261380"
  },
  {
    "text": "through some tricks in this procedure the first trick is how to create an",
    "start": "1261380",
    "end": "1268130"
  },
  {
    "text": "initial slab cache it is important because in our layout in our layout",
    "start": "1268130",
    "end": "1273770"
  },
  {
    "text": "manipulation will assume that all slots are chained sequentially this assumption",
    "start": "1273770",
    "end": "1279350"
  },
  {
    "text": "doesn't we always hold after the kernel boots up the objects are allocated in the freed the slot list is messed up to",
    "start": "1279350",
    "end": "1289040"
  },
  {
    "text": "deal with this we use the fragmentation which basically allocates a number of",
    "start": "1289040",
    "end": "1294650"
  },
  {
    "text": "objects and forces a kernel to create a new slab cache in which all slots are",
    "start": "1294650",
    "end": "1300650"
  },
  {
    "text": "chained sequentially the second trick is how to calculate a SATA effector layout",
    "start": "1300650",
    "end": "1306770"
  },
  {
    "text": "or does a layout to look like what's the order of the target slot and how many",
    "start": "1306770",
    "end": "1312140"
  },
  {
    "text": "allocations and deallocations in the SATA effect we also leave the questions",
    "start": "1312140",
    "end": "1317720"
  },
  {
    "text": "using EV trees will run the plc in our own mesh machine and law coring",
    "start": "1317720",
    "end": "1323960"
  },
  {
    "text": "two allocations and deallocations to our impure sees execution through analyzing the lock we can learn",
    "start": "1323960",
    "end": "1330960"
  },
  {
    "text": "the order of each each slab operation and calculate the SATA effect layout the",
    "start": "1330960",
    "end": "1338010"
  },
  {
    "text": "third trick is how to short an exploit window to minimize the inference of other corner object corner activities on",
    "start": "1338010",
    "end": "1345270"
  },
  {
    "text": "layout as I mentioned the color is a multitasker system other use of space",
    "start": "1345270",
    "end": "1350700"
  },
  {
    "text": "processors kernel threads and hardware interrupts can't wriggle slab activities",
    "start": "1350700",
    "end": "1356240"
  },
  {
    "text": "while we can not control them we can minimize their inference unveiled by",
    "start": "1356240",
    "end": "1361440"
  },
  {
    "text": "shortening exploit window the trick is to put critical operation after",
    "start": "1361440",
    "end": "1367250"
  },
  {
    "text": "defragmentation so that we can finish at adjustment as soon as possible okay demo",
    "start": "1367250",
    "end": "1374460"
  },
  {
    "start": "1372000",
    "end": "1582000"
  },
  {
    "text": "part b opens",
    "start": "1374460",
    "end": "1379130"
  },
  {
    "text": "this one",
    "start": "1386249",
    "end": "1389429"
  },
  {
    "text": "is it too small but don't worry I have already posted it to my personal page so",
    "start": "1394910",
    "end": "1401760"
  },
  {
    "text": "you can find a video from my page so basically we have several scripts to",
    "start": "1401760",
    "end": "1409500"
  },
  {
    "text": "connect a virtual machine is to connect the voter machine and carbecue virtual",
    "start": "1409500",
    "end": "1415260"
  },
  {
    "text": "machine that you copy is a fire copy the exploit from the house to choose a virtual machine start virtual machines",
    "start": "1415260",
    "end": "1422010"
  },
  {
    "text": "to boot a bizarre kernel we won't start",
    "start": "1422010",
    "end": "1427320"
  },
  {
    "text": "a virtual machine to boot up the kernel I modified the kernel a little bit to",
    "start": "1427320",
    "end": "1432630"
  },
  {
    "text": "print out the address of objects so that we can see how the layout at adjustment",
    "start": "1432630",
    "end": "1439560"
  },
  {
    "text": "goes after booting up the kernel we copy the exploiter choose a rotor machine",
    "start": "1439560",
    "end": "1447470"
  },
  {
    "text": "then we connect to the virtual machine and the wrong exploit in the exploit the",
    "start": "1447470",
    "end": "1453270"
  },
  {
    "text": "first step is to set up the environment which is basically to build has a socket",
    "start": "1453270",
    "end": "1460200"
  },
  {
    "text": "and open fires and sprays a pelota to the face map it takes a like about 10",
    "start": "1460200",
    "end": "1470250"
  },
  {
    "text": "seconds",
    "start": "1470250",
    "end": "1472850"
  },
  {
    "text": "and the second established to do defragmentation which is to allocate a",
    "start": "1478190",
    "end": "1483650"
  },
  {
    "text": "lot objects to feel odd hosts of a slab and the foster kono to create a new slab",
    "start": "1483650",
    "end": "1489140"
  },
  {
    "text": "cache and in the new style cache all sloths archana sequentially the third",
    "start": "1489140",
    "end": "1494810"
  },
  {
    "text": "step is to allocated a vulnerable protect to the slab and the slab is came",
    "start": "1494810",
    "end": "1500120"
  },
  {
    "text": "up came out of 256 then we allocate a victim object to the slab and you can",
    "start": "1500120",
    "end": "1508160"
  },
  {
    "text": "see the victor value of objects address of the vulnerable object is here",
    "start": "1508160",
    "end": "1514280"
  },
  {
    "text": "which ends with E zero zero and this is and if we allocate the victim object",
    "start": "1514280",
    "end": "1521740"
  },
  {
    "text": "directly you will get you another slot which endo is two zero zero which is not",
    "start": "1521740",
    "end": "1527300"
  },
  {
    "text": "after the vulnerable object so we feel an object to a slab and then allocated a",
    "start": "1527300",
    "end": "1534860"
  },
  {
    "text": "victim object which whose address is F 0 0 which is right after the vulnerable",
    "start": "1534860",
    "end": "1540110"
  },
  {
    "text": "object in the next step we trigger the vulnerability to overwrite the function",
    "start": "1540110",
    "end": "1546440"
  },
  {
    "text": "pointer in the victim object and finally we to reference the function pointer to",
    "start": "1546440",
    "end": "1551450"
  },
  {
    "text": "hijack a second execution and you can see the value of our IP the program",
    "start": "1551450",
    "end": "1559460"
  },
  {
    "text": "counter register the value rhino is the ffff and data beef which is the",
    "start": "1559460",
    "end": "1566780"
  },
  {
    "text": "malicious address",
    "start": "1566780",
    "end": "1569620"
  },
  {
    "text": "yes",
    "start": "1572150",
    "end": "1575150"
  },
  {
    "text": "since we still have time I want you I rapped you briefly in to introduce a",
    "start": "1580149",
    "end": "1585350"
  },
  {
    "start": "1582000",
    "end": "1592000"
  },
  {
    "text": "general mitigation by passing in the Linux kernel this is the joint work with",
    "start": "1585350",
    "end": "1590480"
  },
  {
    "text": "my friend Wei Wu Lena's kernel is one of the most security critical components in",
    "start": "1590480",
    "end": "1597260"
  },
  {
    "text": "the world many mitigations across different levels have been designed implemented and enabled to harden the",
    "start": "1597260",
    "end": "1604669"
  },
  {
    "text": "kernel at the very beginning attackers",
    "start": "1604669",
    "end": "1609919"
  },
  {
    "text": "would corrupt the kernel crops a code pointer or the function pointer to",
    "start": "1609919",
    "end": "1615409"
  },
  {
    "text": "hijack as a control flow to a malicious shellcode prepared in the user space the",
    "start": "1615409",
    "end": "1622309"
  },
  {
    "text": "show code consists of instructions for privilege escalation to mitigate this",
    "start": "1622309",
    "end": "1628490"
  },
  {
    "text": "attack the Linux kernel introduces SM EP on Intel to block executing user space",
    "start": "1628490",
    "end": "1634429"
  },
  {
    "text": "code in kernel mode attackers then choose to corrupt the data pointer to",
    "start": "1634429",
    "end": "1640760"
  },
  {
    "text": "write refer to a fig object prepared in the Udo space through the corrupted data",
    "start": "1640760",
    "end": "1646340"
  },
  {
    "text": "pointer of the adversary's hijack user control flow by D referencing the malicious function pointer in the fake",
    "start": "1646340",
    "end": "1653000"
  },
  {
    "text": "object considering this exploitation approach to add developers further",
    "start": "1653000",
    "end": "1658340"
  },
  {
    "text": "introduced SM ap or Intel for defense the name of this defense is P am unarmed",
    "start": "1658340",
    "end": "1666250"
  },
  {
    "text": "now the adversary's have cannot take advantage of the Udo space therefore",
    "start": "1666250",
    "end": "1671480"
  },
  {
    "text": "they tend to the counter space injecting the shellcode in fees map which is the",
    "start": "1671480",
    "end": "1678019"
  },
  {
    "text": "right top part which maps all the",
    "start": "1678019",
    "end": "1684049"
  },
  {
    "text": "physical page the name of this attack is return to dir the Linux kernel",
    "start": "1684049",
    "end": "1690919"
  },
  {
    "text": "circumvents this by not allowing code executing execution in the feast map then other Vasari's have no choices",
    "start": "1690919",
    "end": "1698299"
  },
  {
    "text": "but you've makes make use of some cutted functions like call user mode helper",
    "start": "1698299",
    "end": "1704120"
  },
  {
    "text": "which Fox our process and rounds are given executable the adversary's can",
    "start": "1704120",
    "end": "1710090"
  },
  {
    "text": "provide a malicious executable for the guarded function an attack and I'll end this exploitation",
    "start": "1710090",
    "end": "1717120"
  },
  {
    "text": "approach from the blocks of Google project zero and it was quickly mitigated by the developers using a",
    "start": "1717120",
    "end": "1724740"
  },
  {
    "text": "white list only executables in the whitelist can be loaded and executed",
    "start": "1724740",
    "end": "1731000"
  },
  {
    "text": "another common exploitation approach is to hijack control flow to the function",
    "start": "1731000",
    "end": "1736500"
  },
  {
    "text": "native right cr4 to disable SMA P&S mep so that tradition no attacks such as",
    "start": "1736500",
    "end": "1743670"
  },
  {
    "text": "shell code injection and a fill and the fake object confusion can be used",
    "start": "1743670",
    "end": "1749090"
  },
  {
    "text": "five-oh this is also mitigated by using virtualization based hypervisor so far",
    "start": "1749090",
    "end": "1757050"
  },
  {
    "text": "many exploitation approaches have been proposed and lots of them are medicated",
    "start": "1757050",
    "end": "1762690"
  },
  {
    "text": "is it possible to have a new exploitation approach that is that is",
    "start": "1762690",
    "end": "1768450"
  },
  {
    "text": "generally enough to bypass all these medications which only control flow hijacking primitive retail oriented",
    "start": "1768450",
    "end": "1775620"
  },
  {
    "text": "programming is promising however the program with obvious it only works for",
    "start": "1775620",
    "end": "1782340"
  },
  {
    "text": "stack overflow which corrupts the return Jazz on stack can we do our P in Co no",
    "start": "1782340",
    "end": "1788820"
  },
  {
    "text": "space regardless of the vulnerability types the answer is yes we proposed a",
    "start": "1788820",
    "end": "1795750"
  },
  {
    "start": "1792000",
    "end": "1882000"
  },
  {
    "text": "general mitigation bypassing approach which is roughly divided into four steps",
    "start": "1795750",
    "end": "1801120"
  },
  {
    "text": "in the first step we obtain the control flow hijacking primitive as long as a",
    "start": "1801120",
    "end": "1807570"
  },
  {
    "text": "vulnerability gives us this primitive we don't restrict the vulnerability type in",
    "start": "1807570",
    "end": "1813080"
  },
  {
    "text": "the second step we fought one hijacking in the two hijackings via Conor counties",
    "start": "1813080",
    "end": "1819600"
  },
  {
    "text": "which we call bridging granted the bridging guard it has to interact jumps",
    "start": "1819600",
    "end": "1824730"
  },
  {
    "text": "or interact course we use a first hijacking to direct Connor execution to",
    "start": "1824730",
    "end": "1831180"
  },
  {
    "text": "a disclosure cottage which begins with invoking copy to user function as as SMA",
    "start": "1831180",
    "end": "1838290"
  },
  {
    "text": "P and s MEP is temporarily disabled to our incopy to you so we can leak start",
    "start": "1838290",
    "end": "1844170"
  },
  {
    "text": "nary to youdo space without triggering any or kana panic for a second hijacking",
    "start": "1844170",
    "end": "1851220"
  },
  {
    "text": "will use it to direct the corner execution to a stack overflow cottage which begins with invoking copy from",
    "start": "1851220",
    "end": "1858570"
  },
  {
    "text": "user function s ma p and s mep is also temporary temper already disabled during",
    "start": "1858570",
    "end": "1865230"
  },
  {
    "text": "copy from user we copied the ROP payload pass canary likud in a filter hijacking",
    "start": "1865230",
    "end": "1871680"
  },
  {
    "text": "to the Conner stack in this way the return address in the kernel stack is",
    "start": "1871680",
    "end": "1877080"
  },
  {
    "text": "overwritten and return our into the programming is conducted okay so another",
    "start": "1877080",
    "end": "1884100"
  },
  {
    "text": "terminal is for the for the phones",
    "start": "1884100",
    "end": "1890070"
  },
  {
    "text": "replacing the bypassing technique",
    "start": "1890070",
    "end": "1894350"
  },
  {
    "text": "also they have several script and we're on the ghost go script that you would",
    "start": "1906160",
    "end": "1913580"
  },
  {
    "text": "have the colonel was and this time I",
    "start": "1913580",
    "end": "1919809"
  },
  {
    "text": "recover the corner and current does and doesn't print out the edges and logging",
    "start": "1919809",
    "end": "1927289"
  },
  {
    "text": "the color using account user and the password is one two three four five six",
    "start": "1927289",
    "end": "1934419"
  },
  {
    "text": "and before the exploitation we print out the ID which UID is one there was error",
    "start": "1934419",
    "end": "1942320"
  },
  {
    "text": "arrow which means we are calling users and we're on exploit and the X for it",
    "start": "1942320",
    "end": "1949429"
  },
  {
    "text": "basically does the same thing as phone straight demo and build up set up the environment and duty fragmentation and",
    "start": "1949429",
    "end": "1956600"
  },
  {
    "text": "allocated a vulnerable object victim object and trigger the vulnerability and the finally hijack the cone execution",
    "start": "1956600",
    "end": "1964130"
  },
  {
    "text": "and bypass medications after they exploit you can see let you ID is zero",
    "start": "1964130",
    "end": "1970640"
  },
  {
    "text": "which means we are loot right now and GID is is a cop look at the Jerry",
    "start": "1970640",
    "end": "1979970"
  },
  {
    "text": "doesn't make any sense because it's it's a it's a data that it's a malicious data",
    "start": "1979970",
    "end": "1985299"
  },
  {
    "text": "okay",
    "start": "1985299",
    "end": "1988299"
  },
  {
    "start": "1997000",
    "end": "2025000"
  },
  {
    "text": "so in closing I would like to summarize this presentation and Joe conclusions we",
    "start": "1997600",
    "end": "2004690"
  },
  {
    "text": "identify objects useful for canal exploitation to build O'Conner arbitrator database to eliminate side",
    "start": "2004690",
    "end": "2011529"
  },
  {
    "text": "effects during exploitation were proposed to algorithms to obtain to obtain the desired slab layout we",
    "start": "2011529",
    "end": "2019389"
  },
  {
    "text": "evaluated our approach using 27 vulnerabilities and demonstrated its effectiveness",
    "start": "2019389",
    "end": "2025379"
  },
  {
    "start": "2025000",
    "end": "2140000"
  },
  {
    "text": "okay thanks for listening I hope you enjoy this presentation again my name is",
    "start": "2025379",
    "end": "2030580"
  },
  {
    "text": "Luis you can follow me on Twitter or contact me using email if you want to know more about me and my other projects",
    "start": "2030580",
    "end": "2037600"
  },
  {
    "text": "feel free to check out my post on the page and I have already posted the demo video to the page and I'm actively",
    "start": "2037600",
    "end": "2045429"
  },
  {
    "text": "looking for the next two years some internship so if you know of any suitable positions please let me know",
    "start": "2045429",
    "end": "2051128"
  },
  {
    "text": "and I'd like to open the floor for questions",
    "start": "2051129",
    "end": "2055679"
  },
  {
    "text": "[Applause]",
    "start": "2056739",
    "end": "2063610"
  },
  {
    "text": "when you find vulnerable objects both for heap shaping and the vulnerable",
    "start": "2081790",
    "end": "2091340"
  },
  {
    "text": "objects that contain the pointers the data pointers don't you have to group them into sizes",
    "start": "2091340",
    "end": "2096980"
  },
  {
    "text": "because they have they reside in the same free list yes cause like the slap",
    "start": "2096980",
    "end": "2102530"
  },
  {
    "text": "slap organized objects based on the size or mr. according to the type so this is",
    "start": "2102530",
    "end": "2111500"
  },
  {
    "text": "dumped in the static analysis causing a steady analysis you can calculate the",
    "start": "2111500",
    "end": "2116869"
  },
  {
    "text": "size of the object right but when you",
    "start": "2116869",
    "end": "2124850"
  },
  {
    "text": "shot the numbers he told you found 27 mm volleyball okay yeah whatever 124 of 13",
    "start": "2124850",
    "end": "2135590"
  },
  {
    "text": "objects and 4 spray objects but they don't have to be necessarily the same size or the same type yes they are not",
    "start": "2135590",
    "end": "2141710"
  },
  {
    "start": "2140000",
    "end": "2177000"
  },
  {
    "text": "of the same type or it so just like in total 124 and I I didn't to classify",
    "start": "2141710",
    "end": "2148760"
  },
  {
    "text": "them into different types or into different designs yes so if for example ability can allow",
    "start": "2148760",
    "end": "2153920"
  },
  {
    "text": "you to do to deal with objects of some certain size that doesn't have matching",
    "start": "2153920",
    "end": "2161000"
  },
  {
    "text": "mm-hmm object okay so what you do so like basically from the size eight to a",
    "start": "2161000",
    "end": "2168140"
  },
  {
    "text": "size like 2048 for all these different sizes that we find the objects fall off",
    "start": "2168140",
    "end": "2176510"
  },
  {
    "text": "there and if for some special special cash cost some cash is organized based",
    "start": "2176510",
    "end": "2182660"
  },
  {
    "start": "2177000",
    "end": "2253000"
  },
  {
    "text": "on the type and for some special cases we find positions for a specific type",
    "start": "2182660",
    "end": "2188810"
  },
  {
    "text": "and it also finds them and the good thing is like the kernel Linux kernel has a feature named merge and the merge",
    "start": "2188810",
    "end": "2196760"
  },
  {
    "text": "will merge a general cache with special cache so sometimes we are find like even",
    "start": "2196760",
    "end": "2202970"
  },
  {
    "text": "if it is a tick it is claimed like a special cash and actually after Koerner boots up it has merged away the general",
    "start": "2202970",
    "end": "2209900"
  },
  {
    "text": "cache so for such kind of special cache we also find objects to exploit them thank you",
    "start": "2209900",
    "end": "2219700"
  },
  {
    "text": "so one of the things that confuses me here is is that you are building a",
    "start": "2225900",
    "end": "2233730"
  },
  {
    "text": "database of all the slabs and their types and so on mm-hmm from a user perspective lens perspective",
    "start": "2233730",
    "end": "2241740"
  },
  {
    "text": "are you doing I mean you would have to have the right credentials in order to",
    "start": "2241740",
    "end": "2248210"
  },
  {
    "text": "just go so let me crass clarify your",
    "start": "2248210",
    "end": "2256080"
  },
  {
    "start": "2253000",
    "end": "2523000"
  },
  {
    "text": "question is it like that you are asking about you know space allocate oh uh one",
    "start": "2256080",
    "end": "2262170"
  },
  {
    "text": "of the basically saying is is that all this happens in Colonel yes which is",
    "start": "2262170",
    "end": "2267600"
  },
  {
    "text": "very good I enjoyed but from an",
    "start": "2267600",
    "end": "2272640"
  },
  {
    "text": "exploiting point of view mm-hmm how would you do without actually already",
    "start": "2272640",
    "end": "2277740"
  },
  {
    "text": "hacking the colonel so from a user land perspective mm-hmm where is the exploit because if I can do it from user land",
    "start": "2277740",
    "end": "2285480"
  },
  {
    "text": "mm-hmm with those credentials to do what you're doing mm-hmm then there's a lot of other",
    "start": "2285480",
    "end": "2290610"
  },
  {
    "text": "things I'd rather do yes yes like cause this work is are you say that I guess",
    "start": "2290610",
    "end": "2297060"
  },
  {
    "text": "based on the kernel because we need to have a vulnerability in the kernel right",
    "start": "2297060",
    "end": "2302430"
  },
  {
    "text": "by fall user space programs I say if you want to do is a phone tree in the you",
    "start": "2302430",
    "end": "2308040"
  },
  {
    "text": "know Spears programs you need to some more Java development because the you know space educators have different",
    "start": "2308040",
    "end": "2313920"
  },
  {
    "text": "features okay so so what you're doing basically is pointing out the vulnerability with inside the kernel this always not about",
    "start": "2313920",
    "end": "2321890"
  },
  {
    "text": "discovering one abilities is about how to exploit the vulnerabilities but if",
    "start": "2321890",
    "end": "2328170"
  },
  {
    "text": "you were gonna exploit it you would exploit it from were within the kernel I mean yes the assumption is like we have",
    "start": "2328170",
    "end": "2335850"
  },
  {
    "text": "vulnerabilities in kernel and it targets kernel so of course we do not exploit",
    "start": "2335850",
    "end": "2342270"
  },
  {
    "text": "the firmware you add to the kernel level I'm just trying to see where I",
    "start": "2342270",
    "end": "2351510"
  },
  {
    "text": "understand what you're saying and I see it as a vulnerability there mm-hmm and it should be fixed if it can which",
    "start": "2351510",
    "end": "2357230"
  },
  {
    "text": "being reorganized in the slab mechanisms especially the defragmentation part of",
    "start": "2357230",
    "end": "2363920"
  },
  {
    "text": "it but I don't understand the gain I'm trying to see if I was an attacker",
    "start": "2363920",
    "end": "2370340"
  },
  {
    "text": "mm-hmm how I can gain this without actually building maybe dynamically",
    "start": "2370340",
    "end": "2375530"
  },
  {
    "text": "loadable kernel objects possible mm-hmm but even then I'd have to have the credentials to load them and if I had",
    "start": "2375530",
    "end": "2381590"
  },
  {
    "text": "the credentials to do that they're not going to other things that are more profitable we're not trying to say from an exploiting point of view but if this",
    "start": "2381590",
    "end": "2388700"
  },
  {
    "text": "is problems in the kernel I think that's a good point yes course as a tech house in you know",
    "start": "2388700",
    "end": "2396770"
  },
  {
    "text": "space you can interact with a kernel using system calls right since we have",
    "start": "2396770",
    "end": "2402080"
  },
  {
    "text": "identified objects as we are as a system calls and arguments to operate them you",
    "start": "2402080",
    "end": "2407119"
  },
  {
    "text": "can use these system calls and arguments to like to indirectly inference the",
    "start": "2407119",
    "end": "2412790"
  },
  {
    "text": "current execution and give objects a correct but mm-hmm the system calls that",
    "start": "2412790",
    "end": "2418400"
  },
  {
    "text": "I execute will be run in the context of the process that runs yes and the",
    "start": "2418400",
    "end": "2423560"
  },
  {
    "text": "context of the process will have credentials mm-hmm and if those credentials are not rooted yes you're",
    "start": "2423560",
    "end": "2433369"
  },
  {
    "text": "right so it's like this is the process this is another process generally runs",
    "start": "2433369",
    "end": "2439130"
  },
  {
    "text": "in zero own context their respective respectively and H but the underlying",
    "start": "2439130",
    "end": "2445790"
  },
  {
    "text": "the kernel they like to respond to the Europe use of space programs system Corp",
    "start": "2445790",
    "end": "2453410"
  },
  {
    "text": "I like to allocate objects in the kernel space and in the currently share of the",
    "start": "2453410",
    "end": "2459980"
  },
  {
    "text": "cache so that you can use these such kind of stuff to inference the kernels",
    "start": "2459980",
    "end": "2466630"
  },
  {
    "text": "things yes how I answer your questions",
    "start": "2466630",
    "end": "2474430"
  },
  {
    "text": "okay any questions",
    "start": "2475330",
    "end": "2483770"
  },
  {
    "text": "okay thank you thank you a great talk the in the last part you introduces your",
    "start": "2489740",
    "end": "2498660"
  },
  {
    "text": "Tecla to buy you mean by passing by parts of mitigations my question is in",
    "start": "2498660",
    "end": "2505920"
  },
  {
    "text": "the last two years under law and apple",
    "start": "2505920",
    "end": "2511530"
  },
  {
    "text": "introduces some medication like I say if I wore the occasion to mitigate his",
    "start": "2511530",
    "end": "2517670"
  },
  {
    "text": "allergy mmm-hmm you talk so so how do you sing about it",
    "start": "2517670",
    "end": "2523140"
  },
  {
    "start": "2523000",
    "end": "2657000"
  },
  {
    "text": "so are you asking about the PA see ya cause it's like kind of controller",
    "start": "2523140",
    "end": "2529620"
  },
  {
    "text": "integrity protection maximum and this this medication bypassing the assumption",
    "start": "2529620",
    "end": "2535170"
  },
  {
    "text": "of it is like we have control from hijacking primitive so if giving a PA see I don't think we can bypass the",
    "start": "2535170",
    "end": "2543030"
  },
  {
    "text": "medication I could confuse if I can hijack the controlling a control flow I",
    "start": "2543030",
    "end": "2551460"
  },
  {
    "text": "so I can I just just set the faces the",
    "start": "2551460",
    "end": "2561270"
  },
  {
    "text": "domain the Colorama of the process and I can use the iPod to direct rail rather",
    "start": "2561270",
    "end": "2569160"
  },
  {
    "text": "than Carlo so I can get the route process I do not lead to bypass SMI",
    "start": "2569160",
    "end": "2575610"
  },
  {
    "text": "pianist and we EP because color allowed me to do lot so what kind of",
    "start": "2575610",
    "end": "2581910"
  },
  {
    "text": "exploitation can be kind of progress terrified at a bit so so I mean you can",
    "start": "2581910",
    "end": "2588530"
  },
  {
    "text": "hijackers contour floor so I can a hiding a point or two point you like Carlos or Kate so so get control and I",
    "start": "2588530",
    "end": "2599520"
  },
  {
    "text": "considered a the domain and the current process of to Carlos so I can ensure",
    "start": "2599520",
    "end": "2610830"
  },
  {
    "text": "that you just the Saturday addr limit to minus one so I can read it read already",
    "start": "2610830",
    "end": "2616920"
  },
  {
    "text": "the car directly you mean like you hijacks a cone execution - yes okay no III don't",
    "start": "2616920",
    "end": "2624460"
  },
  {
    "text": "be a leader to bypass the mitigations bypass system because like our all goes",
    "start": "2624460",
    "end": "2633160"
  },
  {
    "text": "back to we want to do our P which is because it's turing-complete and can basically do whatever you want to do",
    "start": "2633160",
    "end": "2639580"
  },
  {
    "text": "so this is our mango oh yeah yeah gather your point yeah okay thank you thank you",
    "start": "2639580",
    "end": "2649960"
  },
  {
    "text": "very much [Applause]",
    "start": "2649960",
    "end": "2658960"
  }
]