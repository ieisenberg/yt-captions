[
  {
    "text": "[Music] foreign ecosystem",
    "start": "1740",
    "end": "8220"
  },
  {
    "text": "[Music] first let me introduce our team we",
    "start": "16580",
    "end": "23100"
  },
  {
    "text": "belong to the battle alt secure team and focus on the security of the Android and",
    "start": "23100",
    "end": "28740"
  },
  {
    "text": "the Linux platform our duty is to discover zero de vulnerability and",
    "start": "28740",
    "end": "34500"
  },
  {
    "text": "explore possible defensive Solutions",
    "start": "34500",
    "end": "38480"
  },
  {
    "text": "here is the agenda for over today's presentation firstly we will briefly introduce some physical knowledge about",
    "start": "40140",
    "end": "47760"
  },
  {
    "text": "the unique domain socket secondly usage scenarios you may wonder where the unique domain",
    "start": "47760",
    "end": "54719"
  },
  {
    "text": "circuit is used in each section will answer this question suddenly common vulnerabilities and case",
    "start": "54719",
    "end": "62699"
  },
  {
    "text": "study normally the third part application can directly connect to a",
    "start": "62699",
    "end": "67860"
  },
  {
    "text": "vendor circular service security but Access Control accounts of",
    "start": "67860",
    "end": "74760"
  },
  {
    "text": "all security issues in these two sections we will elaborate on this",
    "start": "74760",
    "end": "80520"
  },
  {
    "text": "and in the end we will introduce some automated analysis methods",
    "start": "80520",
    "end": "87380"
  },
  {
    "text": "let's first understand some basic concepts the unique domain socket is also known as UDS or IPC circulator for",
    "start": "88560",
    "end": "96900"
  },
  {
    "text": "convenience we will use the name UDS data for UTS is a data Communications",
    "start": "96900",
    "end": "103140"
  },
  {
    "text": "endpoint for exchanging data between processes executing on the same host",
    "start": "103140",
    "end": "109740"
  },
  {
    "text": "but shown in the figure is easier and the communication mode are very similar",
    "start": "109740",
    "end": "114899"
  },
  {
    "text": "to the network circuit but rather than using an online Network protocol",
    "start": "114899",
    "end": "121140"
  },
  {
    "text": "for communication occurs entirely within the kernel so it's more suitable for the local APC",
    "start": "121140",
    "end": "128959"
  },
  {
    "text": "tabs and namespaces like the network circuit the UDS also has three tabs so",
    "start": "129899",
    "end": "136739"
  },
  {
    "text": "extreme 60 gram and the circular sequence packet the stream circuit is",
    "start": "136739",
    "end": "142440"
  },
  {
    "text": "stream oriented works like a pep and the diagram circuit is datagram oriented",
    "start": "142440",
    "end": "148560"
  },
  {
    "text": "it's similar to a message queue the sequence packet circuit is connection",
    "start": "148560",
    "end": "154319"
  },
  {
    "text": "oriented but also preserves the message boundaries",
    "start": "154319",
    "end": "159480"
  },
  {
    "text": "and use UDS can use a name to identify identify itself you can use the cell",
    "start": "159480",
    "end": "166200"
  },
  {
    "text": "system name space and found the name to the system pass or use the abstract",
    "start": "166200",
    "end": "173160"
  },
  {
    "text": "namespace which is independent of the file system",
    "start": "173160",
    "end": "178560"
  },
  {
    "text": "and using that state or SS command you can list all unique domain sockets on a",
    "start": "178560",
    "end": "184140"
  },
  {
    "text": "device and you can see their tips and names if a name starting with at means it uses",
    "start": "184140",
    "end": "191580"
  },
  {
    "text": "the abstract namespace Android approve as many encapsulated if",
    "start": "191580",
    "end": "198780"
  },
  {
    "text": "she has to use the UDS knowing this FCS is very helpful for",
    "start": "198780",
    "end": "204180"
  },
  {
    "text": "reverse analysis as a Java layer you can use local circuit",
    "start": "204180",
    "end": "209280"
  },
  {
    "text": "and the local server circulator to create a UDS",
    "start": "209280",
    "end": "214319"
  },
  {
    "text": "the local storage operator is the most common MPI it encapsulates multiple",
    "start": "214319",
    "end": "219840"
  },
  {
    "text": "low-level FCS such as band analysis it can create a server circuit listening at",
    "start": "219840",
    "end": "226620"
  },
  {
    "text": "a specified name indeed most unique domain sockets are",
    "start": "226620",
    "end": "233760"
  },
  {
    "text": "created in the native code because there are more fingering than if there's",
    "start": "233760",
    "end": "238920"
  },
  {
    "text": "the UDS facility is a standard component of the posix operating system so we can",
    "start": "238920",
    "end": "244920"
  },
  {
    "text": "use opposite socket HCI just assess the domain to the AF Unix",
    "start": "244920",
    "end": "250140"
  },
  {
    "text": "on the other hand you can use some encapsulated HS such as circuit local",
    "start": "250140",
    "end": "255900"
  },
  {
    "text": "server and circular local client they are more coming into but no not",
    "start": "255900",
    "end": "261540"
  },
  {
    "text": "included in the indicate access control is a key point",
    "start": "261540",
    "end": "268560"
  },
  {
    "text": "there are many ways to do access control for the UDS first if a UTS is bound to a",
    "start": "268560",
    "end": "275100"
  },
  {
    "text": "fair system pass then we can use the fair permissions to control who can write the circuit file this is the easy",
    "start": "275100",
    "end": "282479"
  },
  {
    "text": "history secondly the get sock opt API can get a client's credential which is the ucred",
    "start": "282479",
    "end": "290100"
  },
  {
    "text": "structure it contains the prcpid uid and the GID",
    "start": "290100",
    "end": "295740"
  },
  {
    "text": "then you can use this information to determine whether to deny the request",
    "start": "295740",
    "end": "302479"
  },
  {
    "text": "in practice using acid Linux to do access control is the most common way",
    "start": "303900",
    "end": "309240"
  },
  {
    "text": "the SE nuts has good support for the UDS there are three related classes stock",
    "start": "309240",
    "end": "315660"
  },
  {
    "text": "fail stock unique stream socket and the Unix degrees",
    "start": "315660",
    "end": "320699"
  },
  {
    "text": "the software class is used for the circuit Affair object and the rest are used for the process",
    "start": "320699",
    "end": "327780"
  },
  {
    "text": "object we can't control which domain can better to a specified software",
    "start": "327780",
    "end": "334680"
  },
  {
    "text": "like policy 1 in the figure it means all domains are allowed to write the low DW",
    "start": "334680",
    "end": "340320"
  },
  {
    "text": "circuit fail we also can control which domain can connect to a circuit created a specified",
    "start": "340320",
    "end": "347699"
  },
  {
    "text": "process like policy 2 in the figure it means all domains are allowed to connect to the",
    "start": "347699",
    "end": "355280"
  },
  {
    "text": "linuxgram Circuit created by the login process in addition Android also provides some",
    "start": "355280",
    "end": "363539"
  },
  {
    "text": "macros for setting as signals policies you can find a lot in AOSP",
    "start": "363539",
    "end": "370759"
  },
  {
    "text": "next I will introduce some usage scenarios of the UDS which will help us",
    "start": "372240",
    "end": "378300"
  },
  {
    "text": "synchronize systematically about this attack service we analyzed the udl services on various",
    "start": "378300",
    "end": "385020"
  },
  {
    "text": "devices one by one and summarize the most important scenarios",
    "start": "385020",
    "end": "390539"
  },
  {
    "text": "this usage scenarios can be divided into categories the first is diagnostic tools such as",
    "start": "390539",
    "end": "398580"
  },
  {
    "text": "log management tools analog and the exception management tools the second is",
    "start": "398580",
    "end": "404100"
  },
  {
    "text": "the complex the whole modules such as GPS let's see some real world examples",
    "start": "404100",
    "end": "411919"
  },
  {
    "text": "the first is log management tools logs are the most important information for troubleshooting you know Android",
    "start": "412080",
    "end": "419400"
  },
  {
    "text": "device there are literally two login systems one is the Android standard login system and the other is the",
    "start": "419400",
    "end": "426720"
  },
  {
    "text": "Windows login system let's first look at the Android standard open system",
    "start": "426720",
    "end": "433580"
  },
  {
    "text": "is occur whether using local API application or using local command all",
    "start": "433580",
    "end": "440220"
  },
  {
    "text": "requests are handled by the login just like the architecture in the diagram",
    "start": "440220",
    "end": "447680"
  },
  {
    "text": "not D contains the three modules each module listens on a UDS to export the",
    "start": "448199",
    "end": "453840"
  },
  {
    "text": "interface then you can write logs to the low DW socket with logs from the low Dr circuit",
    "start": "453840",
    "end": "460740"
  },
  {
    "text": "and the center commands to the log D socket and this is also how locate command",
    "start": "460740",
    "end": "467220"
  },
  {
    "text": "works the Windows login system is more",
    "start": "467220",
    "end": "473520"
  },
  {
    "text": "complicated Android contains many Hardware modules",
    "start": "473520",
    "end": "478680"
  },
  {
    "text": "if logos of Hardware modules are all printed to the standard login system and",
    "start": "478680",
    "end": "484259"
  },
  {
    "text": "the mixed with applications log it will be difficult to troubleshoot",
    "start": "484259",
    "end": "489479"
  },
  {
    "text": "hardware issues so a better way is to develop another login system",
    "start": "489479",
    "end": "495199"
  },
  {
    "text": "the diagram shows the architecture of a Windows login system",
    "start": "495199",
    "end": "500220"
  },
  {
    "text": "the top layer is a management application debugger UI system developers can use it can use it",
    "start": "500220",
    "end": "508379"
  },
  {
    "text": "to manage logs and below the debugger UI is various logins and they are",
    "start": "508379",
    "end": "515459"
  },
  {
    "text": "responsible for collecting logs of different modules",
    "start": "515459",
    "end": "520500"
  },
  {
    "text": "mobile of T is the most important one kernel modules log",
    "start": "520500",
    "end": "527100"
  },
  {
    "text": "each demands listens on a UDS to receive command synthesize the debugger UI",
    "start": "527100",
    "end": "532980"
  },
  {
    "text": "the next layer is about how each demand get logs and the different modules print",
    "start": "532980",
    "end": "538500"
  },
  {
    "text": "logs in different Hobbies kernel modules usually use the virtual file system and the user space process",
    "start": "538500",
    "end": "545700"
  },
  {
    "text": "is usually use the index domain circuit",
    "start": "545700",
    "end": "550399"
  },
  {
    "text": "exception management tools also used a lot of your next domain sockets",
    "start": "551880",
    "end": "557060"
  },
  {
    "text": "AOSP the tombstone D and the system server all use the UDS to receive",
    "start": "557060",
    "end": "562980"
  },
  {
    "text": "exception information but our Focus today is not on them many vendors would develop additional",
    "start": "562980",
    "end": "570360"
  },
  {
    "text": "tools to enhance the existing reception system such as a",
    "start": "570360",
    "end": "575640"
  },
  {
    "text": "Android exception engine e is a powerful tool if I can cache",
    "start": "575640",
    "end": "581399"
  },
  {
    "text": "exceptions soon from the Java code native code and the human kernel code",
    "start": "581399",
    "end": "587820"
  },
  {
    "text": "is also prior has various supporting tools such as rtt which can dump runtime",
    "start": "587820",
    "end": "594540"
  },
  {
    "text": "information of a process assuming in the figure it contains the",
    "start": "594540",
    "end": "600120"
  },
  {
    "text": "exception table I think it's convenient to query which module occurs an exception at what time",
    "start": "600120",
    "end": "607200"
  },
  {
    "text": "and you can get four pack check information",
    "start": "607200",
    "end": "611600"
  },
  {
    "text": "the full implementation of the aea is extremely complex and is a closed",
    "start": "613260",
    "end": "619140"
  },
  {
    "text": "software fortunately we only need to focus on the UDS part",
    "start": "619140",
    "end": "625380"
  },
  {
    "text": "assume in the figure the AED demand listens on three unique domain sockets",
    "start": "625380",
    "end": "630839"
  },
  {
    "text": "the AED and the aed32 circuits are used to receive exception information the",
    "start": "630839",
    "end": "636839"
  },
  {
    "text": "rttd socket is used to explore the star interfaces for dumping long-time",
    "start": "636839",
    "end": "642660"
  },
  {
    "text": "information the AE has instrumented the activity",
    "start": "642660",
    "end": "648060"
  },
  {
    "text": "manager service and the Crackdown so the application instead occurs the activity",
    "start": "648060",
    "end": "654779"
  },
  {
    "text": "manager service will connect to the Ed circuit and the reported the exception information",
    "start": "654779",
    "end": "661320"
  },
  {
    "text": "the native reception occurs the questions will connect to the ad32 circuit and the send the tombstone field",
    "start": "661320",
    "end": "668940"
  },
  {
    "text": "parts the tombstone file holds the exception detail",
    "start": "668940",
    "end": "674720"
  },
  {
    "text": "other usage scenarios I will exchange they are assuming the",
    "start": "677339",
    "end": "683399"
  },
  {
    "text": "diagram of our defines a standard interface for Hardware vendors to implement which",
    "start": "683399",
    "end": "690779"
  },
  {
    "text": "enables Android to be agnostic about low level driver implementations",
    "start": "690779",
    "end": "696779"
  },
  {
    "text": "a complex the whole module usually consists of two types of process",
    "start": "696779",
    "end": "701940"
  },
  {
    "text": "what is the whole Services used to provide the standard interfaces for the",
    "start": "701940",
    "end": "707220"
  },
  {
    "text": "framework and the other is image responsible for implementing specific",
    "start": "707220",
    "end": "713399"
  },
  {
    "text": "functionality so what does this have to do with the UDS",
    "start": "713399",
    "end": "720060"
  },
  {
    "text": "answer is the UTS is the main accuracy method between these processes",
    "start": "720060",
    "end": "727220"
  },
  {
    "text": "let's look at a example the diagram shows the architecture of a",
    "start": "729079",
    "end": "735060"
  },
  {
    "text": "GPS module it contains two Hardware vendor services and the three demons",
    "start": "735060",
    "end": "741720"
  },
  {
    "text": "two Services provide the framework with standard interface to use GSS and LT",
    "start": "741720",
    "end": "748380"
  },
  {
    "text": "precisioning protocol and the core functions are implied",
    "start": "748380",
    "end": "753560"
  },
  {
    "text": "implemented as three elements which LPS DPG is responsible for the GPS",
    "start": "753560",
    "end": "762720"
  },
  {
    "text": "modules log MLG is responsible for Genesis related",
    "start": "762720",
    "end": "768420"
  },
  {
    "text": "functions and httpsd is responsible for a GPS",
    "start": "768420",
    "end": "776399"
  },
  {
    "text": "using network information to access the positioning iftml provides some low-level interfaces",
    "start": "776399",
    "end": "783240"
  },
  {
    "text": "through the UDS and the processes in all operators through the UTS",
    "start": "783240",
    "end": "790019"
  },
  {
    "text": "and this communication model is very common in Hardware modules",
    "start": "790019",
    "end": "796040"
  },
  {
    "text": "so far we have seen some UDS services we also analyzed many other UTS services",
    "start": "798720",
    "end": "806760"
  },
  {
    "text": "and they have some common features first they are usually run in the high",
    "start": "806760",
    "end": "812639"
  },
  {
    "text": "privileged documents as a system over root and are responsible for some sensitive tasks such as reading and",
    "start": "812639",
    "end": "820440"
  },
  {
    "text": "waiting system fails talking to the driver and",
    "start": "820440",
    "end": "826800"
  },
  {
    "text": "UDS is a good attack service the second is unimportant but I usually",
    "start": "827880",
    "end": "835079"
  },
  {
    "text": "Overlook the feature these services are usually a node of a completed data flow diagram",
    "start": "835079",
    "end": "842519"
  },
  {
    "text": "assuming the figure in complex module various IPC methods connect multiple",
    "start": "842519",
    "end": "849600"
  },
  {
    "text": "processes at different layers the UDS is just one of them",
    "start": "849600",
    "end": "855240"
  },
  {
    "text": "they are made there are many parts to attack a UDS service",
    "start": "855240",
    "end": "860700"
  },
  {
    "text": "you can do this Upstream node to forward the attack payload and the way which",
    "start": "860700",
    "end": "866399"
  },
  {
    "text": "will works in multiple scenarios",
    "start": "866399",
    "end": "870560"
  },
  {
    "text": "next I will introduce some common vulnerabilities we found in Vendor",
    "start": "873899",
    "end": "879420"
  },
  {
    "text": "demons let's show in the diagram",
    "start": "879420",
    "end": "884459"
  },
  {
    "text": "a typical UDF server usually has four states each data may have different",
    "start": "884459",
    "end": "890459"
  },
  {
    "text": "problems the first is to initialize enable different functions according to the",
    "start": "890459",
    "end": "898260"
  },
  {
    "text": "configuration sometimes misconfiguration can cause serious issues",
    "start": "898260",
    "end": "904380"
  },
  {
    "text": "there is too late and the received requests there may be a problem of when you ready to access control",
    "start": "904380",
    "end": "911699"
  },
  {
    "text": "and the next is to pass the request and forward it to the Handler there may be",
    "start": "911699",
    "end": "916740"
  },
  {
    "text": "some memory corruption vulnerabilities last is to handle the request there may",
    "start": "916740",
    "end": "923279"
  },
  {
    "text": "be some logical vulnerabilities let's go into some more details",
    "start": "923279",
    "end": "930440"
  },
  {
    "text": "first is in this configuration vulnerabilities they are common in the diagnostic tools",
    "start": "931680",
    "end": "937740"
  },
  {
    "text": "there are two common mistakes and they all result in something or rest interfaces to be exported",
    "start": "937740",
    "end": "945300"
  },
  {
    "text": "the first is packaging configuration mistakes it can cause internal debugging",
    "start": "945300",
    "end": "950339"
  },
  {
    "text": "tools to be packaged into the distribution room",
    "start": "950339",
    "end": "955500"
  },
  {
    "text": "second is run configuration mistakes it can cause diagnostic tools to run in the",
    "start": "955500",
    "end": "961560"
  },
  {
    "text": "Raw model for example we one one eight species",
    "start": "961560",
    "end": "968459"
  },
  {
    "text": "is the information leakage in our ability the downstream manufacturers configure",
    "start": "968459",
    "end": "976320"
  },
  {
    "text": "it to the debug mode and causing something your rest interfaces exported",
    "start": "976320",
    "end": "982980"
  },
  {
    "text": "and the attacker can use this services to obtain some sensitive information",
    "start": "982980",
    "end": "988320"
  },
  {
    "text": "but in normal mode these interfaces are only available for the root privilege",
    "start": "988320",
    "end": "995100"
  },
  {
    "text": "foreign control as we mentioned earlier 50s service",
    "start": "995100",
    "end": "1001579"
  },
  {
    "text": "usually undertakes some high previewed tasks therefore the must be guaranteed",
    "start": "1001579",
    "end": "1006680"
  },
  {
    "text": "that is a fantastic application contact sensitive services but in practice",
    "start": "1006680",
    "end": "1013639"
  },
  {
    "text": "many Access Control strategies are unrelated there are four common mistakes",
    "start": "1013639",
    "end": "1019699"
  },
  {
    "text": "first Downstream vendors May disable acid Linux doing so will shorten the",
    "start": "1019699",
    "end": "1025220"
  },
  {
    "text": "development cycle and unfortunately this situation has improved a lot",
    "start": "1025220",
    "end": "1032139"
  },
  {
    "text": "second does the Performing authentication in the console SDK",
    "start": "1032179",
    "end": "1037339"
  },
  {
    "text": "but an attacker can be passed at the SDK and directly connect to the service",
    "start": "1037339",
    "end": "1043760"
  },
  {
    "text": "so using run authentication methods such as obtaining the client's process name",
    "start": "1043760",
    "end": "1049040"
  },
  {
    "text": "and then checking whether the process name is in the red list this is invalid because the process name",
    "start": "1049040",
    "end": "1056539"
  },
  {
    "text": "can be said actually first there are any attack paths that",
    "start": "1056539",
    "end": "1063380"
  },
  {
    "text": "can bypass the access control for example let's show in the figure you",
    "start": "1063380",
    "end": "1068600"
  },
  {
    "text": "have a fail pass to attack the Target and if the target has access control then password fails",
    "start": "1068600",
    "end": "1076580"
  },
  {
    "text": "at the amount remaining four parts there may be a very little attacker pass",
    "start": "1076580",
    "end": "1082220"
  },
  {
    "text": "and this is beyond the reach of the target itself the",
    "start": "1082220",
    "end": "1088240"
  },
  {
    "text": "cv0346 is a real world example we can bypass the XC Lux to achieve common",
    "start": "1088240",
    "end": "1093860"
  },
  {
    "text": "injection we will show detail in the case study section memory corruption with an immunity",
    "start": "1093860",
    "end": "1101419"
  },
  {
    "text": "is common in passing and the processing requests such as stack Overflow and",
    "start": "1101419",
    "end": "1106700"
  },
  {
    "text": "integer overflow in addition we use a multi-trading to process quests",
    "start": "1106700",
    "end": "1112940"
  },
  {
    "text": "if synchronization measures are not taken it because we have vulnerability the",
    "start": "1112940",
    "end": "1120520"
  },
  {
    "text": "cv053 is a real world example if the typical integer overflow vulnerability",
    "start": "1120520",
    "end": "1125660"
  },
  {
    "text": "in passing TRV data structures using the tool to subtract the headers",
    "start": "1125660",
    "end": "1133100"
  },
  {
    "text": "lens to get the part business but the last can be negative and we need",
    "start": "1133100",
    "end": "1139100"
  },
  {
    "text": "to cover to assigned there will became a huge number and the resulting physical",
    "start": "1139100",
    "end": "1144740"
  },
  {
    "text": "workflow the last is logical vulnerability",
    "start": "1144740",
    "end": "1151220"
  },
  {
    "text": "it's often caused the better lack of input validation first of all UDS Services I have access",
    "start": "1151220",
    "end": "1158240"
  },
  {
    "text": "control so when you think your service will not be accessed as a contrasted",
    "start": "1158240",
    "end": "1163520"
  },
  {
    "text": "application you are left you are likely to trust your input and directly use it",
    "start": "1163520",
    "end": "1170000"
  },
  {
    "text": "for example the series 39616 is a common injection",
    "start": "1170000",
    "end": "1175820"
  },
  {
    "text": "vulnerability in a network management demand the root cause is marked with the",
    "start": "1175820",
    "end": "1181039"
  },
  {
    "text": "black box in the figure the team directly use an input to concatenate the commander an attacker",
    "start": "1181039",
    "end": "1188960"
  },
  {
    "text": "can use this probability to execute arbitrary command",
    "start": "1188960",
    "end": "1194380"
  },
  {
    "text": "next my partner Yahoo will show some real world real world vulnerabilities",
    "start": "1194539",
    "end": "1199880"
  },
  {
    "text": "and demonstrate how to bypass success control",
    "start": "1199880",
    "end": "1205220"
  },
  {
    "text": "thank you",
    "start": "1205220",
    "end": "1208000"
  },
  {
    "text": "hello everyone I'm yahan next let me introduce our real world 1bt mining of",
    "start": "1222919",
    "end": "1229760"
  },
  {
    "text": "udx and up to April 20s we have found 12 issues in total covered for well-known",
    "start": "1229760",
    "end": "1237380"
  },
  {
    "text": "windows and God's acknowledgments from three of them now all the",
    "start": "1237380",
    "end": "1243020"
  },
  {
    "text": "vulnerabilities are reported have been fixed by leaders and in this part we",
    "start": "1243020",
    "end": "1249200"
  },
  {
    "text": "will make two cases to show that sex restriction cannot solve all these",
    "start": "1249200",
    "end": "1255140"
  },
  {
    "text": "security problems there are restrictions in both cases but we still have other way to bypass",
    "start": "1255140",
    "end": "1264039"
  },
  {
    "text": "the first case is a command injection that we found in Block management demon",
    "start": "1264860",
    "end": "1270440"
  },
  {
    "text": "with the Restriction bypass it could finally lead to an articulation of",
    "start": "1270440",
    "end": "1276020"
  },
  {
    "text": "privileges from Shell to system the root cause is directly using the",
    "start": "1276020",
    "end": "1282380"
  },
  {
    "text": "availity input the log mode will behave like this before recording the log management",
    "start": "1282380",
    "end": "1288500"
  },
  {
    "text": "demon will do such a check but rather the saving directory access the size",
    "start": "1288500",
    "end": "1293960"
  },
  {
    "text": "limit so some of that wider the saving directory access the size limit so some",
    "start": "1293960",
    "end": "1301640"
  },
  {
    "text": "of the previously saved logs will be deleted such deletion is performed by",
    "start": "1301640",
    "end": "1308299"
  },
  {
    "text": "command R and RP and in this case user can determine the",
    "start": "1308299",
    "end": "1315380"
  },
  {
    "text": "receiving directory that means we can control the vulnerable Theory so in",
    "start": "1315380",
    "end": "1321799"
  },
  {
    "text": "instance we can inject a mailbox log into the CMD using separators such as",
    "start": "1321799",
    "end": "1327440"
  },
  {
    "text": "simple",
    "start": "1327440",
    "end": "1329860"
  },
  {
    "text": "since we have found the probability the next work is to study how to check the",
    "start": "1332840",
    "end": "1338900"
  },
  {
    "text": "vulnerability with that move along the domain provides several log management",
    "start": "1338900",
    "end": "1344000"
  },
  {
    "text": "commands through UDS for configuration recording control and so on",
    "start": "1344000",
    "end": "1351340"
  },
  {
    "text": "we should be able to trigger the vulnerabilities of new tests following",
    "start": "1351340",
    "end": "1356840"
  },
  {
    "text": "the shown process first we set the size limit and then we",
    "start": "1356840",
    "end": "1362480"
  },
  {
    "text": "inject the malware command into the log pass and then we record logs several",
    "start": "1362480",
    "end": "1368720"
  },
  {
    "text": "times to treat the cleanup and at that time Uber login should execute the",
    "start": "1368720",
    "end": "1375559"
  },
  {
    "text": "injective command is a real simple and clear process but",
    "start": "1375559",
    "end": "1381559"
  },
  {
    "text": "when we run the talk we found that the UDS cannot be connected because the",
    "start": "1381559",
    "end": "1387919"
  },
  {
    "text": "Linux blocks the request and the logs shown here",
    "start": "1387919",
    "end": "1394299"
  },
  {
    "text": "so the problem now is how to bypass the access restriction and our idea is to",
    "start": "1398260",
    "end": "1406460"
  },
  {
    "text": "find such a proxy it should be allowed to access the vulnerable Udi service and it should",
    "start": "1406460",
    "end": "1413720"
  },
  {
    "text": "also have an exported interface which can forward our malicious requests",
    "start": "1413720",
    "end": "1420200"
  },
  {
    "text": "since the restrictions are performed basically news we first analyze the IC",
    "start": "1420200",
    "end": "1426559"
  },
  {
    "text": "rules to find out which domain can access this GPS",
    "start": "1426559",
    "end": "1431780"
  },
  {
    "text": "and we use the IC Search tool and we finally found that the domain platform",
    "start": "1431780",
    "end": "1438620"
  },
  {
    "text": "if you can connect the UDS mobile login",
    "start": "1438620",
    "end": "1443659"
  },
  {
    "text": "so we have privacy mentioned that there is a platform app named the power UI it",
    "start": "1443659",
    "end": "1451520"
  },
  {
    "text": "is allowed to access the vulnerable Udi service and even better there is a",
    "start": "1451520",
    "end": "1458000"
  },
  {
    "text": "exported broadcast receiver in the app to receive our log measurement once we",
    "start": "1458000",
    "end": "1465200"
  },
  {
    "text": "can pass our log commands just to be broadcast to this proxy",
    "start": "1465200",
    "end": "1472419"
  },
  {
    "text": "so now there are two attack patches first is directly connect to you yes and",
    "start": "1474679",
    "end": "1483380"
  },
  {
    "text": "send our malicious pill to the mobile login well the second is to send our",
    "start": "1483380",
    "end": "1490580"
  },
  {
    "text": "payload to the debug view back through the broadcasting and then let's debugger",
    "start": "1490580",
    "end": "1495799"
  },
  {
    "text": "UI Force to udx well the first part is blocked by",
    "start": "1495799",
    "end": "1502580"
  },
  {
    "text": "selinix note well the second is a Facebook bypass we then write a expose here",
    "start": "1502580",
    "end": "1511100"
  },
  {
    "text": "as well we inject command or am I and the result shows that we have",
    "start": "1511100",
    "end": "1519140"
  },
  {
    "text": "successfully gained the average of system so in summary we Face problems when",
    "start": "1519140",
    "end": "1526820"
  },
  {
    "text": "trying to connect to the UDS directly but we found an upstream process that",
    "start": "1526820",
    "end": "1532880"
  },
  {
    "text": "have two backpacks",
    "start": "1532880",
    "end": "1536140"
  },
  {
    "text": "and next is the second Case Case two is",
    "start": "1538400",
    "end": "1544400"
  },
  {
    "text": "a auto form right vulnerability we found income with a bypass of access",
    "start": "1544400",
    "end": "1550039"
  },
  {
    "text": "restriction it can be exported to make arbitrary objects right and could lead",
    "start": "1550039",
    "end": "1557000"
  },
  {
    "text": "to an escalation of privilege this vulnerability has been fixed by",
    "start": "1557000",
    "end": "1564440"
  },
  {
    "text": "window but it's not the disclosure date yet so we won't mention any specific",
    "start": "1564440",
    "end": "1569900"
  },
  {
    "text": "vendor and model name and the root cause of the vulnerability is also the directly using a relative",
    "start": "1569900",
    "end": "1579020"
  },
  {
    "text": "input well this is very common in service",
    "start": "1579020",
    "end": "1584659"
  },
  {
    "text": "that's untrusted app cannot access the vulnerable demon exports are",
    "start": "1584659",
    "end": "1591200"
  },
  {
    "text": "interface for citing configuration through udis auto parts are here",
    "start": "1591200",
    "end": "1598179"
  },
  {
    "text": "and in this case user can Define the receiving directory that means we can",
    "start": "1598179",
    "end": "1605059"
  },
  {
    "text": "control the vulnerable Theory so in instance we can inject a malware command",
    "start": "1605059",
    "end": "1611600"
  },
  {
    "text": "into the CMD using separate terms such as simple",
    "start": "1611600",
    "end": "1616720"
  },
  {
    "text": "since we have found the vulnerability the next work is to study how to check",
    "start": "1619600",
    "end": "1625580"
  },
  {
    "text": "the volatility with that we allowed them and provides several log management",
    "start": "1625580",
    "end": "1630919"
  },
  {
    "text": "commands through UDS for configuration recording control so on",
    "start": "1630919",
    "end": "1638539"
  },
  {
    "text": "we should be able to trigger the vulnerabilities of new tests following",
    "start": "1638539",
    "end": "1643700"
  },
  {
    "text": "the strong process first we set the size limit and then we",
    "start": "1643700",
    "end": "1649400"
  },
  {
    "text": "inject the malware command into the log pass and then we record logs several",
    "start": "1649400",
    "end": "1655640"
  },
  {
    "text": "times to treat the cleaner and at that time should ask you the injective command",
    "start": "1655640",
    "end": "1664880"
  },
  {
    "text": "is a real simple and clear process but when we run the talk we found that the",
    "start": "1664880",
    "end": "1671360"
  },
  {
    "text": "UDS cannot be connected because the Linux blocks the request and the logs",
    "start": "1671360",
    "end": "1678620"
  },
  {
    "text": "show here",
    "start": "1678620",
    "end": "1681100"
  },
  {
    "text": "so the problem now is how to bypass the access restriction and our idea is to",
    "start": "1685159",
    "end": "1693200"
  },
  {
    "text": "find such a proxy it should be allowed to access the vulnerable Udi service and it should",
    "start": "1693200",
    "end": "1700700"
  },
  {
    "text": "also have an executive interface which can forward our malicious requests",
    "start": "1700700",
    "end": "1707059"
  },
  {
    "text": "since the restrictions are performed by the news we first analyze the IC rules",
    "start": "1707059",
    "end": "1713840"
  },
  {
    "text": "to find out which domain can access this GPS and we use the IC Search tool and we",
    "start": "1713840",
    "end": "1722299"
  },
  {
    "text": "finally found that the domain platform ATP can connect the UDS mobile login",
    "start": "1722299",
    "end": "1730460"
  },
  {
    "text": "so we have privacy merchandise there is a platform ABP named the power UI it is",
    "start": "1730460",
    "end": "1738559"
  },
  {
    "text": "allowed to access the vulnerable Udi service and the inviter there is a",
    "start": "1738559",
    "end": "1744799"
  },
  {
    "text": "exported broadcast receiver in the ATP to receive or log measurement costs we",
    "start": "1744799",
    "end": "1751940"
  },
  {
    "text": "can pass our log mounts just to be broadcast to this proxy",
    "start": "1751940",
    "end": "1759278"
  },
  {
    "text": "so now there are two attack patches first",
    "start": "1761539",
    "end": "1766840"
  },
  {
    "text": "is directly connect to you yes and send our malicious pill to the mobile login",
    "start": "1766840",
    "end": "1773200"
  },
  {
    "text": "well the second is to send our payload to the debug you back through the",
    "start": "1773200",
    "end": "1779840"
  },
  {
    "text": "Broadcasting and then let's debugger UI Force to udx",
    "start": "1779840",
    "end": "1786200"
  },
  {
    "text": "well the first part is blocked by selinix note while the second is a",
    "start": "1786200",
    "end": "1792380"
  },
  {
    "text": "Facebook bypass we don't write a exposed here",
    "start": "1792380",
    "end": "1797960"
  },
  {
    "text": "password we inject command who am I and the result shows that we have",
    "start": "1797960",
    "end": "1805940"
  },
  {
    "text": "successfully gained the average of system so in summary we Face problems when",
    "start": "1805940",
    "end": "1813500"
  },
  {
    "text": "trying to connect to the UDS directly but we found an upstream process that",
    "start": "1813500",
    "end": "1819679"
  },
  {
    "text": "have two backups",
    "start": "1819679",
    "end": "1823000"
  },
  {
    "text": "and next is the second Case Case two is",
    "start": "1825320",
    "end": "1831260"
  },
  {
    "text": "a auto form right vulnerability we found income with a bypass of access",
    "start": "1831260",
    "end": "1836840"
  },
  {
    "text": "restriction it can be exported to make arbitrary objects right and could lead",
    "start": "1836840",
    "end": "1843919"
  },
  {
    "text": "to an escalation of privilege this vulnerability has been fixed by",
    "start": "1843919",
    "end": "1851299"
  },
  {
    "text": "window but it's not the disclosure that yet so we won't mention any specific",
    "start": "1851299",
    "end": "1856700"
  },
  {
    "text": "vendor and modeling and the root cause of the vulnerability is also the directly using a validate",
    "start": "1856700",
    "end": "1865880"
  },
  {
    "text": "input uh well this is very common in service",
    "start": "1865880",
    "end": "1871520"
  },
  {
    "text": "that's untrusted app cannot access the vulnerable statement exports are",
    "start": "1871520",
    "end": "1878120"
  },
  {
    "text": "interface for citing configuration through udis um other configurations are saved into a",
    "start": "1878120",
    "end": "1885200"
  },
  {
    "text": "global array and which configuration to modify is determined by an index",
    "start": "1885200",
    "end": "1891279"
  },
  {
    "text": "provided by user so from this example code we can see if",
    "start": "1891279",
    "end": "1898100"
  },
  {
    "text": "here the V4 is 1 and there is no Bank check for the index then we can control",
    "start": "1898100",
    "end": "1904399"
  },
  {
    "text": "the index to write outputs",
    "start": "1904399",
    "end": "1908620"
  },
  {
    "text": "the photo studies how to trigger this vulnerability the UDS service provides",
    "start": "1909740",
    "end": "1915260"
  },
  {
    "text": "an interface for setting configuration here we can control 16 integers from",
    "start": "1915260",
    "end": "1920360"
  },
  {
    "text": "parallel known as CMD index we want to V4",
    "start": "1920360",
    "end": "1926179"
  },
  {
    "text": "by citing before we can disable the check of the index by citing index and",
    "start": "1926179",
    "end": "1932240"
  },
  {
    "text": "CMD we can control where to write and we want V3 are actually written value then",
    "start": "1932240",
    "end": "1939799"
  },
  {
    "text": "we know we should be able to write an arbitrary address by sending these integers to the IDI service however the",
    "start": "1939799",
    "end": "1948380"
  },
  {
    "text": "links blocks to request once again",
    "start": "1948380",
    "end": "1952179"
  },
  {
    "text": "so we also have to find another attack pass to bypass a satisfaction the",
    "start": "1956799",
    "end": "1963080"
  },
  {
    "text": "procedure of communication program of this UD as show like this here the",
    "start": "1963080",
    "end": "1968360"
  },
  {
    "text": "entertainment is the UTI service it implements the function on Communications with driver",
    "start": "1968360",
    "end": "1974960"
  },
  {
    "text": "and there is a hardware box service it provides an interface for free helping",
    "start": "1974960",
    "end": "1982279"
  },
  {
    "text": "the report to indirectly communicate is the weather there and framework also has",
    "start": "1982279",
    "end": "1989059"
  },
  {
    "text": "an aid activities for application have the application to indirectly",
    "start": "1989059",
    "end": "1994220"
  },
  {
    "text": "communicate with the entertainment there are three podcasts first is",
    "start": "1994220",
    "end": "2001919"
  },
  {
    "text": "the UBS [Music]",
    "start": "2001919",
    "end": "2007980"
  },
  {
    "text": "service and then Hardware vendor service falls to the udx service",
    "start": "2007980",
    "end": "2014799"
  },
  {
    "text": "foreign",
    "start": "2014799",
    "end": "2017799"
  },
  {
    "text": "[Music]",
    "start": "2024500",
    "end": "2031500"
  },
  {
    "text": "[Music]",
    "start": "2038250",
    "end": "2041359"
  },
  {
    "text": "and in summary because the untrusted app is generally a ble to assess the Udi",
    "start": "2053260",
    "end": "2060339"
  },
  {
    "text": "service the implementation security of the UDS is often ignored however access",
    "start": "2060339",
    "end": "2066580"
  },
  {
    "text": "restrictions cannot solve all the security problems you can service is",
    "start": "2066580",
    "end": "2073179"
  },
  {
    "text": "usually a node in communication flowchart access restrictions can only determine who can't access the Udi",
    "start": "2073179",
    "end": "2081339"
  },
  {
    "text": "service but cannot determine how Upstream process use this",
    "start": "2081339",
    "end": "2086378"
  },
  {
    "text": "UD Enterprise careful a vital way to ensure Security is to improve its own security rather",
    "start": "2086379",
    "end": "2094599"
  },
  {
    "text": "than entirely depends on the excess restriction",
    "start": "2094599",
    "end": "2099780"
  },
  {
    "text": "okay next part we are going to introduce some automatic analysis methods which",
    "start": "2100740",
    "end": "2108099"
  },
  {
    "text": "can help to improve the efficiency of udx vulnerability mining",
    "start": "2108099",
    "end": "2114420"
  },
  {
    "text": "General mining steps can be summarized as follow first we should find the Target and do",
    "start": "2114420",
    "end": "2123460"
  },
  {
    "text": "the information ever and second it would be 109 and third we should find a way to",
    "start": "2123460",
    "end": "2131380"
  },
  {
    "text": "bypass the access restriction in it is necessary",
    "start": "2131380",
    "end": "2136480"
  },
  {
    "text": "so how can we improve the efficiency of these steps",
    "start": "2136480",
    "end": "2142560"
  },
  {
    "text": "that's the information can reinforce",
    "start": "2142839",
    "end": "2147420"
  },
  {
    "text": "information process information under the Linux policy",
    "start": "2148680",
    "end": "2153820"
  },
  {
    "text": "socket information includes namespace type and so on and therefore our system",
    "start": "2153820",
    "end": "2160180"
  },
  {
    "text": "socket we also need this Linux context",
    "start": "2160180",
    "end": "2165760"
  },
  {
    "text": "for process information we may need the binary pass pause utilizer before it",
    "start": "2165760",
    "end": "2171520"
  },
  {
    "text": "reverse engine and we also need just the Linux context of the process",
    "start": "2171520",
    "end": "2177220"
  },
  {
    "text": "well this Linux proxy is required for attack pass analysis",
    "start": "2177220",
    "end": "2183180"
  },
  {
    "text": "fortunately there are many great tools for information gathering we can obtain",
    "start": "2183180",
    "end": "2188740"
  },
  {
    "text": "enough information by combining existing tools for example the Link's rules can",
    "start": "2188740",
    "end": "2195220"
  },
  {
    "text": "be exported by a cut system five as the Linux policy like this command and then",
    "start": "2195220",
    "end": "2202720"
  },
  {
    "text": "analyze the bias IC search tools",
    "start": "2202720",
    "end": "2207660"
  },
  {
    "text": "and we have combine these tools with python and ADB here the root permission",
    "start": "2209859",
    "end": "2216640"
  },
  {
    "text": "is required the figure shows a result of the two the two kind enumerate all Udi",
    "start": "2216640",
    "end": "2223480"
  },
  {
    "text": "service on the device and list some basic information such as Linux contacts",
    "start": "2223480",
    "end": "2229119"
  },
  {
    "text": "of socket file and process the process a binary file and so on we can use this",
    "start": "2229119",
    "end": "2236200"
  },
  {
    "text": "tool to help us quickly find the udl service",
    "start": "2236200",
    "end": "2242520"
  },
  {
    "text": "so for the Second Step do you want to be mining it is more difficult to realize",
    "start": "2243780",
    "end": "2250960"
  },
  {
    "text": "the automation optimization in white box cases we can use wireless called",
    "start": "2250960",
    "end": "2257140"
  },
  {
    "text": "analysis tools to improve efficiency such as code ql and suit",
    "start": "2257140",
    "end": "2262599"
  },
  {
    "text": "but for blackbox one repeat mining we'll still use traditional reverse engine",
    "start": "2262599",
    "end": "2269520"
  },
  {
    "text": "because they are leaking a well a well-performed automatic analysis method",
    "start": "2269520",
    "end": "2277060"
  },
  {
    "text": "this figure shows an example of automatic vulnerability mining in white",
    "start": "2277060",
    "end": "2282220"
  },
  {
    "text": "box cases we use port URL to run plus the command injection vulnerability we",
    "start": "2282220",
    "end": "2290260"
  },
  {
    "text": "conduct a static trained analyze to find out whether there is a parts that the",
    "start": "2290260",
    "end": "2296440"
  },
  {
    "text": "data read from the received buffer flows to the system command",
    "start": "2296440",
    "end": "2302280"
  },
  {
    "text": "and the code QR is very effective for code analyzing as well as the study 10",
    "start": "2302280",
    "end": "2309760"
  },
  {
    "text": "analysis but there is a disadvantage that we have to model Wireless Library",
    "start": "2309760",
    "end": "2317560"
  },
  {
    "text": "functions before using the code QR because it is needed a lot of manual effort it's",
    "start": "2317560",
    "end": "2326140"
  },
  {
    "text": "actually you'll be modeling some container class of the CVP",
    "start": "2326140",
    "end": "2332880"
  },
  {
    "text": "okay finally the final step if we have successfully found a UDS vulnerability",
    "start": "2334060",
    "end": "2342099"
  },
  {
    "text": "but if we found that it cannot be assessed directly by the Enterprise app",
    "start": "2342099",
    "end": "2347460"
  },
  {
    "text": "and then we need to find another path to bypass the access restriction",
    "start": "2347460",
    "end": "2353920"
  },
  {
    "text": "and our solution is trying to draw a complete data flow diagram of the model",
    "start": "2353920",
    "end": "2362200"
  },
  {
    "text": "an example is shown in the figure the data flow diagram contains mining nodes",
    "start": "2362200",
    "end": "2368560"
  },
  {
    "text": "and edges here the nodes represent a process and",
    "start": "2368560",
    "end": "2373960"
  },
  {
    "text": "the edges represent different communication methods such as spanner Hardware run and UDS",
    "start": "2373960",
    "end": "2381280"
  },
  {
    "text": "well from this program we can see which process",
    "start": "2381280",
    "end": "2386880"
  },
  {
    "text": "communicate with other process with what communication method",
    "start": "2386880",
    "end": "2394320"
  },
  {
    "text": "well the key point of optimization in this step is to automatically find both",
    "start": "2394320",
    "end": "2401020"
  },
  {
    "text": "ends of the IPC finding pairs of given UDS is quite",
    "start": "2401020",
    "end": "2408820"
  },
  {
    "text": "difficult because product doesn't provide such an interface",
    "start": "2408820",
    "end": "2414400"
  },
  {
    "text": "but there's still some ways to try to find which process can connect it to",
    "start": "2414400",
    "end": "2421240"
  },
  {
    "text": "a given udx we can gather under normal size the restrictions I IC search",
    "start": "2421240",
    "end": "2428859"
  },
  {
    "text": "but those Linux rules only tells us which domain is allowed but not a",
    "start": "2428859",
    "end": "2436060"
  },
  {
    "text": "specific process so the difficulty lies in how to list all the processes that belong to a given",
    "start": "2436060",
    "end": "2444280"
  },
  {
    "text": "domain find the owner and the user of the",
    "start": "2444280",
    "end": "2449560"
  },
  {
    "text": "bundle service we can use a tool in the bin down for analysis however window",
    "start": "2449560",
    "end": "2456280"
  },
  {
    "text": "relies on tick bug effects which is turned off on Android 11.",
    "start": "2456280",
    "end": "2461800"
  },
  {
    "text": "so generally speaking there are some analysis methods can be used to obtain",
    "start": "2461800",
    "end": "2468400"
  },
  {
    "text": "complete communication flow but it is still very difficult to realize a",
    "start": "2468400",
    "end": "2474280"
  },
  {
    "text": "complete optimization and in the end we summarize our topic as",
    "start": "2474280",
    "end": "2482260"
  },
  {
    "text": "follow which are some main conclusions that first qds are widely used in Vendor",
    "start": "2482260",
    "end": "2490960"
  },
  {
    "text": "demons and the windows often ignore their security because the untrusted app",
    "start": "2490960",
    "end": "2497800"
  },
  {
    "text": "cannot directly assess the udx well the access control policy cannot",
    "start": "2497800",
    "end": "2504640"
  },
  {
    "text": "solve all security problems so it is very highly recommended to pay attention",
    "start": "2504640",
    "end": "2512500"
  },
  {
    "text": "to the security of the service implementation itself rather than depending on the access",
    "start": "2512500",
    "end": "2520300"
  },
  {
    "text": "control and for the vulnerability remediation",
    "start": "2520300",
    "end": "2525820"
  },
  {
    "text": "um all the vendors have worked diligently with us to remediate the",
    "start": "2525820",
    "end": "2532540"
  },
  {
    "text": "security issues and all vulnerabilities have been fixed in the patch are",
    "start": "2532540",
    "end": "2539260"
  },
  {
    "text": "available so we also have several Future Works to",
    "start": "2539260",
    "end": "2544480"
  },
  {
    "text": "do on the one hand we need to future study the automatic analysis method to",
    "start": "2544480",
    "end": "2551980"
  },
  {
    "text": "improve our tools and on the other hand we notice that Udi service is not the",
    "start": "2551980",
    "end": "2558579"
  },
  {
    "text": "end point it is also an entrance to the driver so we will go deeper into these parts to",
    "start": "2558579",
    "end": "2565780"
  },
  {
    "text": "see what happens that's all for our speak",
    "start": "2565780",
    "end": "2572160"
  },
  {
    "text": "uh is there any question",
    "start": "2573900",
    "end": "2577859"
  },
  {
    "text": "[Music]",
    "start": "2579080",
    "end": "2582150"
  },
  {
    "text": "[Music]",
    "start": "2585990",
    "end": "2589080"
  }
]