[
  {
    "start": "0",
    "end": "236000"
  },
  {
    "text": "good afternoon and welcome to HTTP decent cut ax requests smuggling reborn",
    "start": "30",
    "end": "5930"
  },
  {
    "text": "have you ever seen a system that was so complex it just had to be vulnerable",
    "start": "5930",
    "end": "11870"
  },
  {
    "text": "these days we rely on layer upon layer of abstraction to have the faintest understanding of what's really going on",
    "start": "11870",
    "end": "18420"
  },
  {
    "text": "with a website or we tell each other things like HTTP is stateless and you",
    "start": "18420",
    "end": "24539"
  },
  {
    "text": "send one request you get one response but what if both of those were just kind of wat in this",
    "start": "24539",
    "end": "32189"
  },
  {
    "text": "session I'm gonna share with you new tools and techniques to D synchronize complex systems smash through the",
    "start": "32189",
    "end": "38250"
  },
  {
    "text": "barriers around HTTP requests and make websites rain exploits on their visitors",
    "start": "38250",
    "end": "43559"
  },
  {
    "text": "I lost art Adan this research around a year ago when I came up with a theory",
    "start": "43559",
    "end": "50399"
  },
  {
    "text": "and the theory was if you're trying to select a topic to research then the best",
    "start": "50399",
    "end": "56190"
  },
  {
    "text": "topic is the one that you're the most nervous about actually looking at and so I asked myself what topic am I really",
    "start": "56190",
    "end": "62820"
  },
  {
    "text": "scared of and the answer for me personally was HTTP requests smuggling I saw a really thrilling presentation on",
    "start": "62820",
    "end": "70560"
  },
  {
    "text": "this topic a few years ago at Def Con called hiding wiki's in HTTP and it was",
    "start": "70560",
    "end": "76430"
  },
  {
    "text": "absolutely a cool presentation and a cool sounding technique but there were a",
    "start": "76430",
    "end": "81509"
  },
  {
    "text": "whole number of warning flags that meant that that really put me off actually",
    "start": "81509",
    "end": "86580"
  },
  {
    "text": "tacking this topic myself the first one was that this technique was first documented way back in 2005 and yeah I'd",
    "start": "86580",
    "end": "94770"
  },
  {
    "text": "never seen anyone successfully use this technique on a live web site which left me wondering if it really worked or it",
    "start": "94770",
    "end": "101340"
  },
  {
    "text": "was just some theoretical waste of time also my technical understanding of the",
    "start": "101340",
    "end": "106439"
  },
  {
    "text": "topic just wasn't up to scratch and as such some of the dire happens made absolutely no sense to me no matter how",
    "start": "106439",
    "end": "113040"
  },
  {
    "text": "much I stared at them and then there was some quite concerning statements on some",
    "start": "113040",
    "end": "119040"
  },
  {
    "text": "of the slides one of them said you will not earn any bounties using this technique and then another one if you",
    "start": "119040",
    "end": "126299"
  },
  {
    "text": "were said you will surly not be considered like a white hat if you even probe any live web site",
    "start": "126299",
    "end": "133410"
  },
  {
    "text": "it's to see if they're vulnerable to this technique because this technique is just so dangerous so at the time I left",
    "start": "133410",
    "end": "141450"
  },
  {
    "text": "this topic well alone but this year to test my theory out I thought I'd try it out and see what happened and quite a",
    "start": "141450",
    "end": "149160"
  },
  {
    "text": "few things happened I did manage to earn some bounties using it and no one's called me a black hat for it so far",
    "start": "149160",
    "end": "155910"
  },
  {
    "text": "although one go on Twitter did call me a terrorist but I got quite a few",
    "start": "155910",
    "end": "161370"
  },
  {
    "text": "interesting reactions from people one guy was so surprised by the vulnerability as I found it in his site",
    "start": "161370",
    "end": "167490"
  },
  {
    "text": "that he appeared to decide that I was just faking the entire thing in some kind of digital slit so I've had to",
    "start": "167490",
    "end": "174810"
  },
  {
    "text": "trick him into paying me a bounty and at the opposite end of the spectrum another",
    "start": "174810",
    "end": "181110"
  },
  {
    "text": "guy like the vulnerability I found in his company's website so much he decided to take that a technique for himself and",
    "start": "181110",
    "end": "187170"
  },
  {
    "text": "try and make himself some bug bounties on the slide behind my back reusing this technique now of course he didn't tell",
    "start": "187170",
    "end": "194070"
  },
  {
    "text": "me he was doing this but then he went into some technical issues with the technique and decided the best way to",
    "start": "194070",
    "end": "201270"
  },
  {
    "text": "solve these was to pretend to be someone else and send me an email asking for help with his which didn't work out too",
    "start": "201270",
    "end": "209160"
  },
  {
    "text": "well for him but out of all of this of all this stuff all this chaos I've been able to bring",
    "start": "209160",
    "end": "216780"
  },
  {
    "text": "you reliable methods of digital and safe methods of finding desynchronization",
    "start": "216780",
    "end": "222540"
  },
  {
    "text": "vulnerabilities and exploiting them methodology in talling to bring clarity to a topic that's been overlooked for",
    "start": "222540",
    "end": "229230"
  },
  {
    "text": "far too long and new methods to trigger d synchronisation and exploit the",
    "start": "229230",
    "end": "234330"
  },
  {
    "text": "results so first I'll talk about what",
    "start": "234330",
    "end": "240209"
  },
  {
    "start": "236000",
    "end": "236000"
  },
  {
    "text": "makes this attack possible and what to do next what to do when a target is",
    "start": "240209",
    "end": "246720"
  },
  {
    "text": "vulnerable how to exploit that then I'll take a look at a whole bunch of case studies all looking at real websites",
    "start": "246720",
    "end": "252560"
  },
  {
    "text": "that I was able to exploit during this research then I've got an an all new",
    "start": "252560",
    "end": "258269"
  },
  {
    "text": "section that hasn't previously been presented it anywhere else looking at what's changed in the threat landscape",
    "start": "258270",
    "end": "263430"
  },
  {
    "text": "since I first gave this presentation at blackhat USA they will also be there would",
    "start": "263430",
    "end": "269419"
  },
  {
    "text": "normally be a live demo but due to some technical issues the Apple's fault I'm",
    "start": "269419",
    "end": "275030"
  },
  {
    "text": "going to be using a video instead after that I'll talk about defense how",
    "start": "275030",
    "end": "280069"
  },
  {
    "text": "to prevent these attacks and then wrap up and take five minutes of questions so what is this attack what makes it",
    "start": "280069",
    "end": "287419"
  },
  {
    "text": "possible well if you picture a website as an end user it probably looks something like this because that's all",
    "start": "287419",
    "end": "294289"
  },
  {
    "text": "that you can directly see but behind the scenes most modern websites are speaking to each other using a chain of web",
    "start": "294289",
    "end": "301759"
  },
  {
    "text": "servers speaking HTTP over a stream based transport layer protocol like TCP",
    "start": "301759",
    "end": "307610"
  },
  {
    "text": "or TLS and for the sake of performance these streams are heavily reused",
    "start": "307610",
    "end": "313580"
  },
  {
    "text": "following the HTTP 1.1 keepalive protocol which means the requests are just placed back to back on these",
    "start": "313580",
    "end": "320360"
  },
  {
    "text": "streams and every server in the chain is expected to pass the HTTP HTTP headers",
    "start": "320360",
    "end": "325729"
  },
  {
    "text": "to work out how long the each message is and therefore where that message stops and where the next one starts so we've",
    "start": "325729",
    "end": "333889"
  },
  {
    "text": "got requests from users from all over the world being funneled through this tiny pool of TCP and TLS streams to the",
    "start": "333889",
    "end": "340339"
  },
  {
    "text": "back end which then has to pass them to spin them back up into individual requests what could possibly go wrong",
    "start": "340339",
    "end": "347240"
  },
  {
    "text": "well what if an attacker sends an ambiguous request one that's been",
    "start": "347240",
    "end": "352460"
  },
  {
    "start": "348000",
    "end": "348000"
  },
  {
    "text": "deliberately crafted so the front end and the back end disagree about how long this messages so in this example here",
    "start": "352460",
    "end": "360460"
  },
  {
    "text": "the front end thinks this blue and orange block of data is one request so",
    "start": "360460",
    "end": "365629"
  },
  {
    "text": "it's immediately sending the whole thing down the stream to the back end but for some reason the back end thinks this",
    "start": "365629",
    "end": "371930"
  },
  {
    "text": "message finishes with the second blue block and therefore it thinks the orange bit of data is the start of the next",
    "start": "371930",
    "end": "378919"
  },
  {
    "text": "request and it's just going to wait for that a second request to be finished",
    "start": "378919",
    "end": "383960"
  },
  {
    "text": "until that request is completed and what's going to complete that request well someone else sending a request to",
    "start": "383960",
    "end": "390349"
  },
  {
    "text": "the application so effectively with with requests smuggling we can apply and",
    "start": "390349",
    "end": "396139"
  },
  {
    "text": "arbitrary prefix to someone else's request that's the core primitive of",
    "start": "396139",
    "end": "401760"
  },
  {
    "text": "this technique and every single exploit done in this entire presentation is using this basic basic concept it's",
    "start": "401760",
    "end": "411050"
  },
  {
    "text": "because you can't see directly what's happening behind the front end it's really easy to get kind of confused and",
    "start": "411050",
    "end": "417840"
  },
  {
    "text": "tangled up with stuff but just bear in mind everything is using that one simple technique now let's zoom in and see what",
    "start": "417840",
    "end": "427229"
  },
  {
    "text": "the data actually looks like so here this is an example of an ambiguous request",
    "start": "427229",
    "end": "433169"
  },
  {
    "start": "428000",
    "end": "428000"
  },
  {
    "text": "this one's ambiguous because we're using an absolutely classic old-school D synchronization technique we've simply",
    "start": "433169",
    "end": "439530"
  },
  {
    "text": "specified the content length header twice in this example the front end has used the first content header which is",
    "start": "439530",
    "end": "446400"
  },
  {
    "text": "six so it's forded all the data including the orange g2 the back end the back end has looked at the second",
    "start": "446400",
    "end": "452550"
  },
  {
    "text": "content length header and thereby it thinks the orange G is the start of the next request so in the next real request",
    "start": "452550",
    "end": "459660"
  },
  {
    "text": "that actually turns up the user is going to get a response that says something like unknown method G post so far so",
    "start": "459660",
    "end": "467729"
  },
  {
    "text": "simple the only catch with this technique is that this is so old-school and classic",
    "start": "467729",
    "end": "473910"
  },
  {
    "text": "that it doesn't actually work on anything that's worth hacking these days what does work on plenty of interesting",
    "start": "473910",
    "end": "479639"
  },
  {
    "text": "systems still is using chunked encoding cult encoding is an alternative to use",
    "start": "479639",
    "end": "486389"
  },
  {
    "start": "481000",
    "end": "481000"
  },
  {
    "text": "in the content length it's an alternative way of specifying the length of the message whereby instead of",
    "start": "486389",
    "end": "491580"
  },
  {
    "text": "specifying it upfront you send transfer encoding chunked and that triggers the server to parse the body of the request",
    "start": "491580",
    "end": "497820"
  },
  {
    "text": "and until it reaches the terminating chunk which is a zero followed by an",
    "start": "497820",
    "end": "502860"
  },
  {
    "text": "empty line so in this example here if the front-end looks at the content length and the backend",
    "start": "502860",
    "end": "509550"
  },
  {
    "text": "treats this message is being chunked we'll see exactly the same result that we saw on the previous slide where the",
    "start": "509550",
    "end": "515310"
  },
  {
    "text": "legitimate user will get a response saying something like unknown method G",
    "start": "515310",
    "end": "520320"
  },
  {
    "text": "post now what if that desynchronization happens the other way round what if it's",
    "start": "520320",
    "end": "526770"
  },
  {
    "text": "the front end that treats the messages being chomped and the back end that uses the looks of the content well",
    "start": "526770",
    "end": "532500"
  },
  {
    "start": "532000",
    "end": "532000"
  },
  {
    "text": "we can still exploit that we just have to change what our payroll looks like slightly and we have this small limitation in that the malicious prefix",
    "start": "532500",
    "end": "540870"
  },
  {
    "text": "applied by the attacker which is which is shown in orange on every slide when the desynchronisation happens this way",
    "start": "540870",
    "end": "547170"
  },
  {
    "text": "round has to end with a zero followed by a new line but in general that's not going to cause us any problems the other",
    "start": "547170",
    "end": "557580"
  },
  {
    "text": "point worth mentioning is if you just look at it like this you might wonder why the content length is 3 when there's",
    "start": "557580",
    "end": "563640"
  },
  {
    "text": "only one visible byte of data that's because every line on every slide unless mentioned otherwise ends with the",
    "start": "563640",
    "end": "570420"
  },
  {
    "text": "standard HTTP line ending which is slash are slash in I'm gonna mention that again a little bit later so why does",
    "start": "570420",
    "end": "579420"
  },
  {
    "text": "this technique work on so many systems well I think we've got to give some credit to the specification RFC to 6 1 6",
    "start": "579420",
    "end": "587280"
  },
  {
    "text": "which is the original spec says if you get a message that has a content then and is chunked you should give priority",
    "start": "587280",
    "end": "593580"
  },
  {
    "text": "to the chunks and that is taken to implicitly say that these messages are",
    "start": "593580",
    "end": "600600"
  },
  {
    "text": "fine you shouldn't reject them you don't need to normalize them just process them in this way and everything will be fine",
    "start": "600600",
    "end": "607010"
  },
  {
    "text": "and the fact is if you've got one server in your chain that disobeys that and",
    "start": "607010",
    "end": "612960"
  },
  {
    "text": "prioritizes the con look at the content length in it everything will not be fine when I first found this technique that",
    "start": "612960",
    "end": "620940"
  },
  {
    "text": "exploit there worked on every single website on the Academy on the Akamai",
    "start": "620940",
    "end": "627000"
  },
  {
    "text": "content delivery network which is quite a lot of interesting websites so they",
    "start": "627000",
    "end": "634620"
  },
  {
    "text": "patched that within 24 hours of this presentation like at USA but there's",
    "start": "634620",
    "end": "639750"
  },
  {
    "text": "still plenty of interesting techniques you can you can use to try and force websites to try and force servers to",
    "start": "639750",
    "end": "647250"
  },
  {
    "text": "fall back to using the content length and thereby get D synchronized all you have to do is hide the transfer encoding",
    "start": "647250",
    "end": "654750"
  },
  {
    "text": "chunked header from one server in the chain in such a way that the other servers do see it for example golang",
    "start": "654750",
    "end": "663330"
  },
  {
    "text": "their paste be processing library let's you put white space before the",
    "start": "663330",
    "end": "669120"
  },
  {
    "text": "colon after the header name and they will treat that message as being chunked but most other systems won't and thereby",
    "start": "669120",
    "end": "676050"
  },
  {
    "text": "you can use that to 2d synchronize them that resulted in a CVE so if you update",
    "start": "676050",
    "end": "681270"
  },
  {
    "text": "goal and that will patch that and that had some interesting knock-on effects on everything else built on golang such as",
    "start": "681270",
    "end": "687620"
  },
  {
    "text": "kubernetes there's other techniques out there so some servers grep the transfer",
    "start": "687620",
    "end": "693600"
  },
  {
    "text": "encoding header for the word chunked instead of actually tokenizing it so they'll think that that message there is",
    "start": "693600",
    "end": "699660"
  },
  {
    "text": "chunked and there's loads of other techniques you can use this is just a tiny sampling of them but every",
    "start": "699660",
    "end": "706170"
  },
  {
    "text": "technique on this on this slide is one that I've successfully used on a real system and the ones highlighted in",
    "start": "706170",
    "end": "711420"
  },
  {
    "text": "orange your techniques that I came with that I came up with myself that I haven't seen documented anywhere else",
    "start": "711420",
    "end": "719150"
  },
  {
    "start": "719000",
    "end": "719000"
  },
  {
    "text": "now that's the core of how to do synchronous systems which is a really",
    "start": "719150",
    "end": "724860"
  },
  {
    "text": "powerful building block but if we just try and hit a server with this building block will run into hazards and",
    "start": "724860",
    "end": "731070"
  },
  {
    "text": "complications and waste a lot of time so to avoid that from happening I've",
    "start": "731070",
    "end": "736800"
  },
  {
    "text": "developed this methodology to guide us in a step by step controlled manner towards a successful exploit the first",
    "start": "736800",
    "end": "746940"
  },
  {
    "start": "745000",
    "end": "745000"
  },
  {
    "text": "step is to detect when a server is vulnerable to desynchronization now the",
    "start": "746940",
    "end": "752310"
  },
  {
    "text": "obvious way of doing this is to send several requests in a row where the first one is designed to poison the",
    "start": "752310",
    "end": "759120"
  },
  {
    "text": "backend with some kind of malicious prefix and then the follow-ups are normal our normal requests and if they",
    "start": "759120",
    "end": "766290"
  },
  {
    "text": "get an unexpected response that was probably caused by the malicious prefix and that shows they're vulnerable",
    "start": "766290",
    "end": "772310"
  },
  {
    "text": "however this technique is incredibly unreliable because if you're targeting",
    "start": "772310",
    "end": "778980"
  },
  {
    "text": "any live website that has any kind of traffic volume the chances are someone",
    "start": "778980",
    "end": "784530"
  },
  {
    "text": "else is going to get hit by the poison prefix so there where the website is just going to break for them or their",
    "start": "784530",
    "end": "790020"
  },
  {
    "text": "file won't save or they'll get redirected to your website or something and also you won't find the",
    "start": "790020",
    "end": "796740"
  },
  {
    "text": "vulnerability because your follow-up requests will be affected so this that approach gets tons",
    "start": "796740",
    "end": "804060"
  },
  {
    "text": "of false negatives as such I've developed an approach based on a kind of",
    "start": "804060",
    "end": "810180"
  },
  {
    "text": "timing technique which gets almost no false negatives so how will this",
    "start": "810180",
    "end": "815940"
  },
  {
    "text": "technique how this requesters process depends on what the fun end and back end servers do if both systems look at the",
    "start": "815940",
    "end": "823500"
  },
  {
    "text": "content length is forded we get the response everything's fine if the front end treats this message is",
    "start": "823500",
    "end": "829620"
  },
  {
    "text": "being chunked and then when they try and pass the chunk size cue they will reject the message immediately everything's",
    "start": "829620",
    "end": "837450"
  },
  {
    "text": "fine right but if the front end looks at the content length header and thereby",
    "start": "837450",
    "end": "842550"
  },
  {
    "text": "only forwards the blue data and the back end treats that message is being chunked than the back end will time out while",
    "start": "842550",
    "end": "848730"
  },
  {
    "text": "waiting for the next chunk size to turn up and thereby if we send that request and we get a timeout and we can",
    "start": "848730",
    "end": "855870"
  },
  {
    "text": "replicate that behavior that almost proves that that system is vulnerable to",
    "start": "855870",
    "end": "861330"
  },
  {
    "text": "the synchronization and we can use a similar technique when the D synchronization happens the other way",
    "start": "861330",
    "end": "867240"
  },
  {
    "text": "around so because here we're finding this vulnerability based on influence",
    "start": "867240",
    "end": "872640"
  },
  {
    "text": "you will get some false positives but they're quite rare and the key thing is",
    "start": "872640",
    "end": "878580"
  },
  {
    "text": "you'll get vastly less false negatives then you will with the classic technique for example on one live target this",
    "start": "878580",
    "end": "886320"
  },
  {
    "text": "approach said that this said that this website was vulnerable every single time",
    "start": "886320",
    "end": "891480"
  },
  {
    "text": "you ran this technique whereas the most full request technique took me 800",
    "start": "891480",
    "end": "896820"
  },
  {
    "text": "attempts to prove that the target was really vulnerable and that's 800 other real users who probably just experienced",
    "start": "896820",
    "end": "903690"
  },
  {
    "text": "the website breaking for them which is not always ideal so once you've got this",
    "start": "903690",
    "end": "912060"
  },
  {
    "start": "909000",
    "end": "909000"
  },
  {
    "text": "timing technique working then it's time to eat then if you need more evidence which if your bug bounty hunting you",
    "start": "912060",
    "end": "918270"
  },
  {
    "text": "almost certainly do you need to prove the system is really vulnerable and",
    "start": "918270",
    "end": "923460"
  },
  {
    "text": "start doing this multiple request technique so here this is what an attack",
    "start": "923460",
    "end": "929790"
  },
  {
    "text": "might look like we've got one for when the front end uses that chunk in coding and wonderful when the",
    "start": "929790",
    "end": "935520"
  },
  {
    "text": "front-end uses the content length so you send your attack and then you send a",
    "start": "935520",
    "end": "940980"
  },
  {
    "text": "normal request and in this example here if you get a 4/4 for your normal request",
    "start": "940980",
    "end": "946710"
  },
  {
    "text": "shown in green that proves that this system is vulnerable to decentralization",
    "start": "946710",
    "end": "952760"
  },
  {
    "text": "when a server is potentially vulnerable you should be trying this technique on every URL on the target website because",
    "start": "952760",
    "end": "960750"
  },
  {
    "text": "websites might be routing different URLs to different back-end systems behind the scenes",
    "start": "960750",
    "end": "966350"
  },
  {
    "text": "also if the back-end server doesn't like them try me",
    "start": "966350",
    "end": "972540"
  },
  {
    "text": "request the one shown in blue then it might respond with a 400 or 500 code and",
    "start": "972540",
    "end": "977910"
  },
  {
    "text": "when servers do that they often close the connection to the front end which will make the attack fail",
    "start": "977910",
    "end": "983160"
  },
  {
    "text": "so in general you want to try and target endpoints that expect to receive a post",
    "start": "983160",
    "end": "989970"
  },
  {
    "text": "request and try and preserve any parameters for those endpoints might want and then just bear in mind even if",
    "start": "989970",
    "end": "997380"
  },
  {
    "text": "you do all of that you still might have to do this 800 times the forward actually works so that's the theory of",
    "start": "997380",
    "end": "1006530"
  },
  {
    "text": "how to detect and confirm the vulnerability now we can finally take a",
    "start": "1006530",
    "end": "1012350"
  },
  {
    "text": "look at what damage we can do so every system that I'm going to look at here is",
    "start": "1012350",
    "end": "1017600"
  },
  {
    "text": "a real website I've I've exploited Jonas research with this technique I've unfortunately had to adapt quite a new",
    "start": "1017600",
    "end": "1023960"
  },
  {
    "text": "company names because of private bug bounty programs and other annoying things like that but I'd like to give a",
    "start": "1023960",
    "end": "1030050"
  },
  {
    "text": "shout out to every company that actually let me name them please remember these are the guys that are now secure also",
    "start": "1030050",
    "end": "1037850"
  },
  {
    "text": "during this section I'll keep a running total of the bounties earned during this research as usual of these bounties I",
    "start": "1037850",
    "end": "1045230"
  },
  {
    "text": "don't get anything 50% gets spent by my company on beer and the other 50% goes",
    "start": "1045230",
    "end": "1050630"
  },
  {
    "text": "to local charities so right the easiest",
    "start": "1050630",
    "end": "1056270"
  },
  {
    "start": "1052000",
    "end": "1052000"
  },
  {
    "text": "attack the probably the most conceptually simple attack you can do with request smuggling is to bypass",
    "start": "1056270",
    "end": "1062540"
  },
  {
    "text": "security roles that have been implemented on the front end system so on this software vendor they had a front-end",
    "start": "1062540",
    "end": "1069420"
  },
  {
    "text": "configured to block access to slash admin but using request smuggling we can",
    "start": "1069420",
    "end": "1075210"
  },
  {
    "text": "basically hide the fact that we're accessing a slash admin so from the front ends point of view we're just",
    "start": "1075210",
    "end": "1080970"
  },
  {
    "text": "accessing the vote of the website twice but the back end grants us access to the",
    "start": "1080970",
    "end": "1087420"
  },
  {
    "text": "admin page so far so simple so hopefully that makes sense or nothing else is",
    "start": "1087420",
    "end": "1093960"
  },
  {
    "text": "going to make sense right now one header",
    "start": "1093960",
    "end": "1100170"
  },
  {
    "start": "1098000",
    "end": "1098000"
  },
  {
    "text": "that almost every server user some variation of is exported for and on a",
    "start": "1100170",
    "end": "1106170"
  },
  {
    "text": "well configured system you can't spoof your IP using this header directly because the front end",
    "start": "1106170",
    "end": "1111570"
  },
  {
    "text": "system will rewrite this header or remove it entirely but with requests",
    "start": "1111570",
    "end": "1116610"
  },
  {
    "text": "smuggling the from the front ends point of view your smuggled requests headers",
    "start": "1116610",
    "end": "1121770"
  },
  {
    "text": "are part of the body and thereby head of rewrite involves don't get apply to them",
    "start": "1121770",
    "end": "1126930"
  },
  {
    "text": "and therefore you can spoof your IP and make it look like it's coming from anywhere which is not that exciting I",
    "start": "1126930",
    "end": "1133590"
  },
  {
    "text": "got a stunning three hundred dollar bounty using this so I'm not saying you're going to get rich quick with it",
    "start": "1133590",
    "end": "1139230"
  },
  {
    "text": "but it's a technique worth knowing particularly because it works on practically every single target that is vulnerable to requests mugging and also",
    "start": "1139230",
    "end": "1146940"
  },
  {
    "text": "it has a slightly less obvious use so imagine you've got the time out",
    "start": "1146940",
    "end": "1152580"
  },
  {
    "text": "technique working on a really high traffic website so you've got pretty much no chance of the confirmation stage",
    "start": "1152580",
    "end": "1158910"
  },
  {
    "text": "where you send a multiple requests ever working well what if you smuggle a request that looks something like this",
    "start": "1158910",
    "end": "1164820"
  },
  {
    "text": "but in in the x-forwarded-for header you put a unique host name if you get a DNS",
    "start": "1164820",
    "end": "1171330"
  },
  {
    "text": "lookup from the backend for that host name that proves that has been interpreted as a separate request by the",
    "start": "1171330",
    "end": "1178140"
  },
  {
    "text": "backend and thereby proves that this server is really vulnerable to a quest modelling so the really interesting",
    "start": "1178140",
    "end": "1188850"
  },
  {
    "start": "1184000",
    "end": "1184000"
  },
  {
    "text": "behavior on applications is often going to come from applications specific headers and to exploit those we need to",
    "start": "1188850",
    "end": "1196020"
  },
  {
    "text": "know what they are and luckily most of the time there's an easy",
    "start": "1196020",
    "end": "1201720"
  },
  {
    "text": "to find out we we just need an end point on the application that expects to receive a post request and and reflects",
    "start": "1201720",
    "end": "1209610"
  },
  {
    "text": "one parameter so here I'm targeting New Relic and I'm smuggling and attempt to",
    "start": "1209610",
    "end": "1215490"
  },
  {
    "text": "log in and I'm making sure that the email that I try and login with is the last parameter in the request so when I",
    "start": "1215490",
    "end": "1222870"
  },
  {
    "text": "send in my follow-up it gets concatenated on to the email address that I'm trying to log in with and that",
    "start": "1222870",
    "end": "1230490"
  },
  {
    "text": "request that gets concatenated there is being concatenated after it's been rewritten by the front end and the front",
    "start": "1230490",
    "end": "1236610"
  },
  {
    "text": "end is stuck a whole load of really interesting looking headers onto it and some of those headers are going to come",
    "start": "1236610",
    "end": "1243510"
  },
  {
    "text": "and useful shortly so targeting New",
    "start": "1243510",
    "end": "1249870"
  },
  {
    "start": "1247000",
    "end": "1247000"
  },
  {
    "text": "Relic having found the names of these headers it became apparent that the back end was actually an internal Fox itself so I can",
    "start": "1249870",
    "end": "1256530"
  },
  {
    "text": "access other internal systems but they all came back with this redirect to",
    "start": "1256530",
    "end": "1262530"
  },
  {
    "text": "HTTPS because my system was bit because my request was being downgraded to http",
    "start": "1262530",
    "end": "1267600"
  },
  {
    "text": "by the front end on the way yet but by looking at the head as they were using I",
    "start": "1267600",
    "end": "1272610"
  },
  {
    "text": "saw their front end was using the exported photo header and by sticking that on I could actually get access to",
    "start": "1272610",
    "end": "1277890"
  },
  {
    "text": "these internal systems so I went hunting for juicy stuff and I found this",
    "start": "1277890",
    "end": "1284250"
  },
  {
    "text": "revision check euro that came back with a really kind of taunting error message it said not authorised with header and",
    "start": "1284250",
    "end": "1291210"
  },
  {
    "text": "then there was a colon but it didn't tell me the name of the header that I needed to authorize myself with and I",
    "start": "1291210",
    "end": "1298230"
  },
  {
    "text": "thought it might be the XML external service header that we also saw earlier but that didn't work that actually gave",
    "start": "1298230",
    "end": "1304860"
  },
  {
    "text": "me less access so at this point what I could have done is review is retried",
    "start": "1304860",
    "end": "1313170"
  },
  {
    "text": "that request reflection technique that I did on their login page on a whole bunch of other new eloch endpoints until I",
    "start": "1313170",
    "end": "1320370"
  },
  {
    "text": "found the Whitehead na but at the time I'd spent quite quite a while on this I",
    "start": "1320370",
    "end": "1326400"
  },
  {
    "text": "was feeling a bit frustrated and lazy so instead I decided to cheat and to look at my notes from last time I compromised",
    "start": "1326400",
    "end": "1332910"
  },
  {
    "text": "New Relic and that revealed the service gateway account ID and service gateway is New",
    "start": "1332910",
    "end": "1339040"
  },
  {
    "text": "Relic admin headers and using those in conjunction with request smuggling to",
    "start": "1339040",
    "end": "1344260"
  },
  {
    "text": "access it in their core internal API I could impersonate every user as an admin",
    "start": "1344260",
    "end": "1350050"
  },
  {
    "text": "and basically get a full control over everything I got there max bounty for that which was nice and they found that",
    "start": "1350050",
    "end": "1357940"
  },
  {
    "text": "the root cause of the D synchronization was their big IP front end server and",
    "start": "1357940",
    "end": "1363040"
  },
  {
    "text": "big IP responded by issuing an advisory not a patch so you probably want to read",
    "start": "1363040",
    "end": "1370780"
  },
  {
    "text": "that advisory and apply the recommendations in there if you're using a big IP right now so what we've seen",
    "start": "1370780",
    "end": "1380980"
  },
  {
    "start": "1377000",
    "end": "1377000"
  },
  {
    "text": "here sorry my notes on the system over there huni's notes I do power lis so",
    "start": "1380980",
    "end": "1389460"
  },
  {
    "text": "wait we've seen it's really you can get some really nice exploits on the systems",
    "start": "1389460",
    "end": "1395040"
  },
  {
    "text": "if you're willing to put a whole bunch of time in but there's some much easier more straightforward techniques focused",
    "start": "1395040",
    "end": "1402040"
  },
  {
    "text": "on exploiting other users and my favorite one of these is store in other",
    "start": "1402040",
    "end": "1407680"
  },
  {
    "text": "people's requests in the target application so here I'm targeting Trello",
    "start": "1407680",
    "end": "1414010"
  },
  {
    "text": "which is a well-known notetaking application and I've smuggled a request",
    "start": "1414010",
    "end": "1419320"
  },
  {
    "text": "to update my bio and I'm not gonna send a follow up request myself so someone else's request is going to get",
    "start": "1419320",
    "end": "1425650"
  },
  {
    "text": "concatenated on the end of it and then I can just browse to my bio and find their request in full which includes all of",
    "start": "1425650",
    "end": "1433240"
  },
  {
    "text": "the session cookies regardless of whether they're secure or hate or hate to be only or whatever and this request",
    "start": "1433240",
    "end": "1441070"
  },
  {
    "text": "required this technique requires no user interaction it's just I send that and I",
    "start": "1441070",
    "end": "1446620"
  },
  {
    "text": "get access to someone's account as they while I was in the web site and I can just replay that as many times as I like",
    "start": "1446620",
    "end": "1452890"
  },
  {
    "text": "and pretty much just hijack everyone's accounts really easily I also found this",
    "start": "1452890",
    "end": "1458860"
  },
  {
    "text": "technique worked on a different target where there was no obvious way to persistently store text data but what I",
    "start": "1458860",
    "end": "1465340"
  },
  {
    "text": "could do was make the victims request get-get-get",
    "start": "1465340",
    "end": "1471159"
  },
  {
    "text": "concatenated into a support request thought I filed so when I then received",
    "start": "1471159",
    "end": "1476409"
  },
  {
    "text": "an e-mailed response from the support agent that let me hijack the victims account there's another core point here",
    "start": "1476409",
    "end": "1488970"
  },
  {
    "text": "so it like the other core point okay many of you you probably saw this and",
    "start": "1488970",
    "end": "1495159"
  },
  {
    "text": "you thought hang on a second why is he stealing session cookies when",
    "start": "1495159",
    "end": "1501100"
  },
  {
    "text": "he could be stealing usernames and passwords from people trying to log in and there's a limitation with this",
    "start": "1501100",
    "end": "1507279"
  },
  {
    "text": "technique which is that you can only stick generally still data as far as the first ampersand because everything after",
    "start": "1507279",
    "end": "1514840"
  },
  {
    "text": "that gets interpreted as being a different parameter and generally gets ignored by the application the core",
    "start": "1514840",
    "end": "1521830"
  },
  {
    "text": "exception is that if the website does log in using JSON then yeah you probably can steal people's usernames and",
    "start": "1521830",
    "end": "1528429"
  },
  {
    "text": "passwords in plain text directly unless of course the victim has an ampersand in",
    "start": "1528429",
    "end": "1534129"
  },
  {
    "text": "their password right okay so that branch",
    "start": "1534129",
    "end": "1543519"
  },
  {
    "start": "1537000",
    "end": "1537000"
  },
  {
    "text": "of attack is really easy and it would be my go-to technique when it works what if",
    "start": "1543519",
    "end": "1548799"
  },
  {
    "text": "you can't persistently store requests well there's a whole nother branch of attacks based on serving up harmful",
    "start": "1548799",
    "end": "1555369"
  },
  {
    "text": "responses to other people actively using the application this example is a bit",
    "start": "1555369",
    "end": "1562179"
  },
  {
    "text": "rubbish but it gets the concept across really well so on this target I already found some reflected cross-site",
    "start": "1562179",
    "end": "1568149"
  },
  {
    "text": "scripting effective cross-site scripting is okay but it's a bit rubbish mainly",
    "start": "1568149",
    "end": "1573519"
  },
  {
    "text": "because it requires interaction from the victim to hijack their account they have",
    "start": "1573519",
    "end": "1578860"
  },
  {
    "text": "to click a link I send them or visit a page I control or something like that so it can be serious but it's generally no",
    "start": "1578860",
    "end": "1585789"
  },
  {
    "text": "good for mass exploitation but with requests with requests smuggling I can",
    "start": "1585789",
    "end": "1590830"
  },
  {
    "text": "simply smuggle a request that triggers this cross-site scripting payload to come back and then some random other",
    "start": "1590830",
    "end": "1596649"
  },
  {
    "text": "person browse on the website is going to get hit by the response with my payload in it",
    "start": "1596649",
    "end": "1601770"
  },
  {
    "text": "and I'm gonna get control of their account there's a couple of other",
    "start": "1601770",
    "end": "1607060"
  },
  {
    "text": "benefits to this technique which is that you can use this with cross-site scripting issues that are normally run",
    "start": "1607060",
    "end": "1614260"
  },
  {
    "text": "exploitable like XSS in the use of agent header and XSS in post requests that",
    "start": "1614260",
    "end": "1619900"
  },
  {
    "text": "have C surf tokens so it is pretty powerful now while I was in the middle",
    "start": "1619900",
    "end": "1628030"
  },
  {
    "start": "1624000",
    "end": "1624000"
  },
  {
    "text": "of this research and I was testing a particular target that I can't name I",
    "start": "1628030",
    "end": "1633870"
  },
  {
    "text": "happened to load their homepage when the developer tool is open which is unusual",
    "start": "1633870",
    "end": "1639130"
  },
  {
    "text": "but this message popped up it said my browser couldn't connect to this IP and",
    "start": "1639130",
    "end": "1645520"
  },
  {
    "text": "that was a bit worrying because I recognized that IP that's the IP of the burp collaborator",
    "start": "1645520",
    "end": "1651130"
  },
  {
    "text": "server and it shouldn't be popping up on someone else's homepage most of the time",
    "start": "1651130",
    "end": "1656400"
  },
  {
    "text": "and so I did some digging to figure out what was going on because this was",
    "start": "1656400",
    "end": "1662020"
  },
  {
    "text": "coming up no matter what browser I use no matter what Network I connected from it was just part of this website and it",
    "start": "1662020",
    "end": "1670210"
  },
  {
    "text": "turned out basically I'd been trying to trigger a redirect to my server using a payload something like this and I was",
    "start": "1670210",
    "end": "1676660"
  },
  {
    "text": "sending the follow-up request but obviously my follow up hand arrived fast enough and someone else at that time on",
    "start": "1676660",
    "end": "1683560"
  },
  {
    "text": "the website was trying to fetch an image and so that are the user got me directed to the collaborator and you know that's",
    "start": "1683560",
    "end": "1690820"
  },
  {
    "text": "not the end of the world right it's just one person who cares about them but unfortunately a cache saw that happening",
    "start": "1690820",
    "end": "1698550"
  },
  {
    "text": "so the cache saw the user tried to fetch this image and they saw the server respond with this redirect to burp",
    "start": "1698550",
    "end": "1705420"
  },
  {
    "text": "collaborator and so the cache saved that and for the next few days whenever you load the homepage of that site you try",
    "start": "1705420",
    "end": "1713110"
  },
  {
    "text": "to fetch this image from my server so on the one hand we've shown how easy it is",
    "start": "1713110",
    "end": "1720940"
  },
  {
    "text": "to do cache poisoning with with request smuggling it's so easy you can do it by",
    "start": "1720940",
    "end": "1726400"
  },
  {
    "text": "accident but on the other hand this is probably the biggest risk of something",
    "start": "1726400",
    "end": "1731560"
  },
  {
    "text": "quite bad happening by accident and it's just something to bear in mind before you try on like",
    "start": "1731560",
    "end": "1736870"
  },
  {
    "text": "your local website without asking them or something like that so on the New Relic we saw that their",
    "start": "1736870",
    "end": "1745030"
  },
  {
    "text": "back end was an internal proxy that gave access to internal stuff if we change the host header on this so I I found",
    "start": "1745030",
    "end": "1754120"
  },
  {
    "text": "they were chaining two CD ends on to each other which it's which it seems crazy but I saw a few times I saw like I",
    "start": "1754120",
    "end": "1760360"
  },
  {
    "text": "can write chained on to CloudFlare and here I saw I can why I chained on to Akamai but you could de synchronize in",
    "start": "1760360",
    "end": "1767470"
  },
  {
    "text": "between Akamai and Akamai so by changing the host header in the smuggled of the",
    "start": "1767470",
    "end": "1772870"
  },
  {
    "text": "quest you could serve up content from any website on Akamai's network on this particular target site and that would",
    "start": "1772870",
    "end": "1779800"
  },
  {
    "text": "then get cached and overwrite whatever page you were trying to access so it's always worth having to play with the",
    "start": "1779800",
    "end": "1785470"
  },
  {
    "text": "host header now when looking at Red Hat directly I happened to be looking for a",
    "start": "1785470",
    "end": "1792610"
  },
  {
    "start": "1787000",
    "end": "1787000"
  },
  {
    "text": "vulnerability that I could change to try and prove the severity and I found this dom-based open redirects and it raised",
    "start": "1792610",
    "end": "1799540"
  },
  {
    "text": "an interesting challenge because with requests smuggling we've got control over the URL that the backend server",
    "start": "1799540",
    "end": "1806620"
  },
  {
    "text": "thinks the user is trying to access but we don't control the URL in the user's",
    "start": "1806620",
    "end": "1812140"
  },
  {
    "text": "browser so something like this isn't directly exploitable but I went hunting",
    "start": "1812140",
    "end": "1818800"
  },
  {
    "text": "further on RedHat and I found a local leader echt so this isn't an open redirect it's harmless by itself but",
    "start": "1818800",
    "end": "1825730"
  },
  {
    "text": "using that I could take control over the euro in the victim's browser and put them on the page that had the dom-based",
    "start": "1825730",
    "end": "1832000"
  },
  {
    "text": "opened me dive act and then get them to an arbitrary destination without their consent and this technique can be used",
    "start": "1832000",
    "end": "1839500"
  },
  {
    "text": "on any kind of Dom based vulnerability pretty much just to make it extra table",
    "start": "1839500",
    "end": "1845460"
  },
  {
    "text": "so we've seen that local redirects can help us exploit Dom based issues but",
    "start": "1845460",
    "end": "1852580"
  },
  {
    "start": "1847000",
    "end": "1847000"
  },
  {
    "text": "actually quite a few local redirects turn into open redirects when you've got requests smuggling because you can show",
    "start": "1852580",
    "end": "1859420"
  },
  {
    "text": "the host header for example on Apache and some versions of IAS if you try and",
    "start": "1859420",
    "end": "1865660"
  },
  {
    "text": "access a folder that and you miss the trailing slash you'll just get a redirect that puts the slash on the folder name but the host",
    "start": "1865660",
    "end": "1872890"
  },
  {
    "text": "part of that redirect is populated using the host fare using the host header so",
    "start": "1872890",
    "end": "1878230"
  },
  {
    "text": "you can really easily trigger a redirect to your own site this technique combines",
    "start": "1878230",
    "end": "1884500"
  },
  {
    "text": "really nicely with cache poisoning because you can take a JavaScript file there's part of the targets home page",
    "start": "1884500",
    "end": "1890620"
  },
  {
    "text": "and convert it into a redirect to a malicious javascript file on your own website and then you basically get full",
    "start": "1890620",
    "end": "1896740"
  },
  {
    "text": "control over the accounts of everyone that ever goes to that website because this technique is so easy and quite high",
    "start": "1896740",
    "end": "1903100"
  },
  {
    "text": "and quite high impact this became my default technique for exploiting this",
    "start": "1903100",
    "end": "1908680"
  },
  {
    "text": "vulnerability during this research and I got a decent number of bounties using it",
    "start": "1908680",
    "end": "1913920"
  },
  {
    "text": "now there's a couple of extra points worth mentioning here right if you can",
    "start": "1913920",
    "end": "1919330"
  },
  {
    "text": "get a redirect like this to your site that uses a 307 status code that's great",
    "start": "1919330",
    "end": "1924400"
  },
  {
    "text": "news because if a browser is doing a post request for example to log someone",
    "start": "1924400",
    "end": "1930550"
  },
  {
    "text": "in and it receives a 307 redirects then it will repost that data ie their user",
    "start": "1930550",
    "end": "1936580"
  },
  {
    "text": "name and password to the third party website so you can just make people's browsers send you their usernames and",
    "start": "1936580",
    "end": "1942490"
  },
  {
    "text": "passwords in plain text with no user interaction whatsoever the other point is that some websites have a lot of",
    "start": "1942490",
    "end": "1949300"
  },
  {
    "text": "thick clients talking to them like non browser-based haste HTTP clients and",
    "start": "1949300",
    "end": "1954940"
  },
  {
    "text": "they may have that reposting behavior even on 301 redirects and alike so it's",
    "start": "1954940",
    "end": "1960910"
  },
  {
    "text": "always worth a shot now one of the websites that this technique worked on",
    "start": "1960910",
    "end": "1968820"
  },
  {
    "start": "1963000",
    "end": "1963000"
  },
  {
    "text": "was PayPal so on cedar paypal.com they had this JavaScript file that was used",
    "start": "1968820",
    "end": "1975100"
  },
  {
    "text": "in all sorts of places and if you try to access slash web static they do a video",
    "start": "1975100",
    "end": "1981520"
  },
  {
    "text": "X to put a slash on the end there were a couple of caches first catch was they",
    "start": "1981520",
    "end": "1987700"
  },
  {
    "text": "concatenated their two hosts headers in the resulting request on the back end but that was easily fixed just by",
    "start": "1987700",
    "end": "1993850"
  },
  {
    "text": "sticking a question mark on the end of the first host header the second problem is that this V Direct uses the HTTP",
    "start": "1993850",
    "end": "2001620"
  },
  {
    "text": "protocol not HTTP so it gets blocked by mixed content protection in web browsers when we're",
    "start": "2001620",
    "end": "2009150"
  },
  {
    "text": "trying to hijack a JavaScript file fortunately there are ways around that",
    "start": "2009150",
    "end": "2014429"
  },
  {
    "text": "in Safari and edge and ie which I don't have time to go into here but they're in",
    "start": "2014429",
    "end": "2019440"
  },
  {
    "text": "last year's presentation on cache poisoning so in Safari on edge and on",
    "start": "2019440",
    "end": "2024720"
  },
  {
    "text": "Pay Pal I could basically replace this javascript file with a malicious one of my own now where's this javascript file",
    "start": "2024720",
    "end": "2031050"
  },
  {
    "text": "used pay files login page great however there's a bit of a catch here which is",
    "start": "2031050",
    "end": "2038429"
  },
  {
    "start": "2032000",
    "end": "2032000"
  },
  {
    "text": "that PayPal's login page also uses CSP and CSP would block that redirect as it",
    "start": "2038429",
    "end": "2046110"
  },
  {
    "text": "was on a different domain right but PayPal's login page also happened to",
    "start": "2046110",
    "end": "2051300"
  },
  {
    "text": "load a different page in an iframe and that was on see doc paypal.com it also",
    "start": "2051300",
    "end": "2057330"
  },
  {
    "text": "imported my poisoned poisoned herbal javascript file and it didn't use CSP so that meant I could take control over the",
    "start": "2057330",
    "end": "2064320"
  },
  {
    "text": "contents of this iframe but because it was on a different domain to the parent I couldn't just steal the user's paypal",
    "start": "2064320",
    "end": "2070260"
  },
  {
    "text": "username and password off the parent page so I was still more or less stuck at this point but then my colleague go",
    "start": "2070260",
    "end": "2077638"
  },
  {
    "text": "with hey he's found an endpoint on paypal calm slash us slash gifts I had a",
    "start": "2077639",
    "end": "2083010"
  },
  {
    "text": "couple of really cool properties the first property is that once again it imported my malicious JavaScript file",
    "start": "2083010",
    "end": "2088830"
  },
  {
    "text": "the second property is maybe because it was a static page it didn't have CSP so",
    "start": "2088830",
    "end": "2094679"
  },
  {
    "text": "I could first hijack the iframe you on see doc paypal.com",
    "start": "2094679",
    "end": "2100650"
  },
  {
    "text": "and then use a JavaScript client-side redirect to change the iframe location to paypal.com slash us slash gifts and",
    "start": "2100650",
    "end": "2107670"
  },
  {
    "text": "then that would get rehydrated by my malicious javascript file and then I",
    "start": "2107670",
    "end": "2112800"
  },
  {
    "text": "could just grab the user's PayPal password off the parent page and send it off to my website all with no user",
    "start": "2112800",
    "end": "2118859"
  },
  {
    "text": "interaction the quiet I reported to that that to PayPal and got a $19,000 bounty",
    "start": "2118859",
    "end": "2124350"
  },
  {
    "text": "for it which was pretty cool and they patched it really fast and they asked me",
    "start": "2124350",
    "end": "2131250"
  },
  {
    "start": "2128000",
    "end": "2128000"
  },
  {
    "text": "do you think this patch is solid and what they've done is they'd made the",
    "start": "2131250",
    "end": "2137039"
  },
  {
    "text": "front end server Akamai unsurprisingly block any requests that had the word",
    "start": "2137039",
    "end": "2143729"
  },
  {
    "text": "chomped in the chance for encoding header and I took a look at this and I",
    "start": "2143729",
    "end": "2149009"
  },
  {
    "text": "spent like half half a day on it I would say and just poked at it and said yeah that seems fairly secure to me it's",
    "start": "2149009",
    "end": "2157170"
  },
  {
    "text": "fairly obvious where this is going so a couple of weeks later I happen to try out a new D synchronization technique",
    "start": "2157170",
    "end": "2164819"
  },
  {
    "text": "where I simply used HTTP line wrapping now this is a perfectly legal request as",
    "start": "2164819",
    "end": "2172319"
  },
  {
    "text": "per the RFC and I didn't really expect it to work on any systems I very nearly didn't try it",
    "start": "2172319",
    "end": "2178440"
  },
  {
    "text": "because I thought it was such a bad idea but it's always worth trying bad ideas and in this case it didn't desynchronize",
    "start": "2178440",
    "end": "2185969"
  },
  {
    "text": "a single server out there except for PayPal's so once again gave me control",
    "start": "2185969",
    "end": "2191400"
  },
  {
    "text": "over their login page they quite generously paid out another 25 bounty for it okay",
    "start": "2191400",
    "end": "2199380"
  },
  {
    "text": "so we've seen a whole bunch of different attacks that you can do and now on my trusty pilot was going to put the demo",
    "start": "2199380",
    "end": "2205109"
  },
  {
    "text": "on right okay here we are local application running Bugzilla and we're",
    "start": "2205109",
    "end": "2212039"
  },
  {
    "text": "going to try and desync remise it so here I'm gonna use the open source tool that I've released as part of this",
    "start": "2212039",
    "end": "2217799"
  },
  {
    "text": "research so I'm gonna go launch smuggle probe I've disabled all the techniques",
    "start": "2217799",
    "end": "2223019"
  },
  {
    "text": "apart from the one that's actually going to work for the sake of speed and I'm gonna press ok and then look at flow which is just going to show me what",
    "start": "2223019",
    "end": "2229049"
  },
  {
    "text": "payloads this scanner is sending and you can see here it's using the timeout",
    "start": "2229049",
    "end": "2234150"
  },
  {
    "text": "based technique that I showed you and it's getting timeouts and the reason it's causing these synchronization is",
    "start": "2234150",
    "end": "2240920"
  },
  {
    "text": "because if you look at the line ending before transfer encoding is it just ends",
    "start": "2240920",
    "end": "2246029"
  },
  {
    "text": "in 0a when lines are supposed to end in 0d 0a so that's what's causing a the d",
    "start": "2246029",
    "end": "2252569"
  },
  {
    "text": "synchronization to it to happen one of the server's thinks that is a new line and one of them doesn't think it's new",
    "start": "2252569",
    "end": "2258900"
  },
  {
    "text": "line so if we go over here wait a couple seconds it should find the vulnerability",
    "start": "2258900",
    "end": "2265880"
  },
  {
    "text": "there we go and it's just showing you how it caused this timeout and now if we won't click",
    "start": "2265880",
    "end": "2271470"
  },
  {
    "text": "on this we've got the smuggle attack option and that pops open a turbo intruder window which has some Python",
    "start": "2271470",
    "end": "2277890"
  },
  {
    "text": "code you don't need to worry about Python code really the key thing is this prefix variable that's the malicious",
    "start": "2277890",
    "end": "2283289"
  },
  {
    "text": "prefix which will get applied to the user's request so here we send the",
    "start": "2283289",
    "end": "2288359"
  },
  {
    "text": "attack once in loads of hummus follow-ups and you can see all the harms Phillips got a 200 except for one which",
    "start": "2288359",
    "end": "2295289"
  },
  {
    "text": "got a 5/4 which suggests that the attack has actually worked so now we know this",
    "start": "2295289",
    "end": "2302609"
  },
  {
    "text": "target is vulnerable the next step is to try and prove that we can do some damage",
    "start": "2302609",
    "end": "2308869"
  },
  {
    "text": "I'm just gonna straight that this is not forged just by changing the the prefix",
    "start": "2308869",
    "end": "2315029"
  },
  {
    "text": "and showing that we get a different kind of spots coming back so on bugzilla anyone can register an account by",
    "start": "2315029",
    "end": "2321390"
  },
  {
    "text": "default and file a bug and put an attachment on the bug I put HTML and JavaScript in the attachment but that's",
    "start": "2321390",
    "end": "2327749"
  },
  {
    "text": "fine because it gets rendered on a sandbox domain as you can see here so thanks to the same origin policy by",
    "start": "2327749",
    "end": "2333930"
  },
  {
    "text": "itself this is genuinely completely secure but maybe with requests smuggling",
    "start": "2333930",
    "end": "2339059"
  },
  {
    "text": "we can make use of that because that file is actually being served from the same back-end system so I'm gonna take",
    "start": "2339059",
    "end": "2347160"
  },
  {
    "text": "the request to load the malicious attachment from the back-end system and",
    "start": "2347160",
    "end": "2352410"
  },
  {
    "text": "I'm gonna use that as my malicious prefix in the desynchronization attack",
    "start": "2352410",
    "end": "2358559"
  },
  {
    "text": "and basically one of the normal follow ups should end up getting this malicious",
    "start": "2358559",
    "end": "2363749"
  },
  {
    "text": "attachment coming back to them and sure enough here you can see the length of",
    "start": "2363749",
    "end": "2369779"
  },
  {
    "text": "one of them is shorter so this request is being sent to the real web app but",
    "start": "2369779",
    "end": "2374789"
  },
  {
    "text": "coming back from coming back we've got the malicious attachment so the final step is just to prove yeah this",
    "start": "2374789",
    "end": "2380099"
  },
  {
    "text": "definitely works and I'm just going to comment out the victim requests so I'm",
    "start": "2380099",
    "end": "2385710"
  },
  {
    "text": "going to leave the back-end poisoned and then for anyone on the web site doesn't matter what they click they're going to",
    "start": "2385710",
    "end": "2391559"
  },
  {
    "text": "get this harmful response coming back and it's gonna steal their password great and that is the demo X",
    "start": "2391559",
    "end": "2400890"
  },
  {
    "text": "so that got thank you thanks there was a",
    "start": "2400890",
    "end": "2412410"
  },
  {
    "text": "fully working live demo for that but sadly not to be that got a thousand dollar bounty which took the total earn",
    "start": "2412410",
    "end": "2419160"
  },
  {
    "text": "during this research so far - just over 90 thousand dots so I first presented",
    "start": "2419160",
    "end": "2427740"
  },
  {
    "text": "this as I mentioned at blackhat USA in August summer what's happened since then",
    "start": "2427740",
    "end": "2434390"
  },
  {
    "text": "well one thing that's happened luckily is quite a few people have patched their",
    "start": "2434390",
    "end": "2439590"
  },
  {
    "start": "2436000",
    "end": "2436000"
  },
  {
    "text": "systems and that's great but it's also a kind of a double-edged sword because as",
    "start": "2439590",
    "end": "2445140"
  },
  {
    "text": "I mentioned that timing technique that I recommend using to probe for the vulnerability gets a small number of",
    "start": "2445140",
    "end": "2452460"
  },
  {
    "text": "false positives and the more systems that patch this vulnerability the worse the false positive rate gets but in on",
    "start": "2452460",
    "end": "2460020"
  },
  {
    "text": "the other hand because there's less vulnerable systems the chance of you doing accidental damage is lower and as",
    "start": "2460020",
    "end": "2466200"
  },
  {
    "text": "such as of today I've released an update to that tool or we'll be doing like half",
    "start": "2466200",
    "end": "2471300"
  },
  {
    "text": "an hour that supports automatically trying the follow-up attack that the",
    "start": "2471300",
    "end": "2477360"
  },
  {
    "text": "dangerous version that proves that a server is really absolutely definitely vulnerable it's still disabled by",
    "start": "2477360",
    "end": "2484080"
  },
  {
    "text": "default because it could cause some damage as we saw with it accidental cache poisoning earlier now I think the",
    "start": "2484080",
    "end": "2491310"
  },
  {
    "start": "2490000",
    "end": "2490000"
  },
  {
    "text": "key area is to push this research forward are to find new desynchronization techniques and there's",
    "start": "2491310",
    "end": "2498300"
  },
  {
    "text": "loads of ways of doing that one of them is to look at the source code so Emil happened to be looking at the gene",
    "start": "2498300",
    "end": "2505470"
  },
  {
    "text": "unicorn source code which is a Python web server in order to patch at the synchronization vulnerability in it and",
    "start": "2505470",
    "end": "2512400"
  },
  {
    "text": "while he was patching that he happened to find another D synchronization vulnerability which you can see here so",
    "start": "2512400",
    "end": "2519450"
  },
  {
    "text": "they're looking at the transfer encoding header and they're just comparing it with the word chopped which might sound",
    "start": "2519450",
    "end": "2525720"
  },
  {
    "text": "fairly sensible but unfortunately the RFC says you can have a sequence of",
    "start": "2525720",
    "end": "2530910"
  },
  {
    "text": "transfer encoding and also RFC to six ones six defines are really useful encoding",
    "start": "2530910",
    "end": "2537840"
  },
  {
    "text": "for lazy people called identity which doesn't actually do anything except confuse service like Gian unicorn",
    "start": "2537840",
    "end": "2543450"
  },
  {
    "text": "meaning that you can exploit them so that request is perfectly legal as per the RFC but it will be synchronized some",
    "start": "2543450",
    "end": "2549840"
  },
  {
    "text": "systems out there there's loads of other sources so one that I've had quite a lot",
    "start": "2549840",
    "end": "2555480"
  },
  {
    "start": "2551000",
    "end": "2551000"
  },
  {
    "text": "of success with recently is looking at wife bypass research that other people have done and just repurposing it to",
    "start": "2555480",
    "end": "2562140"
  },
  {
    "text": "cause desynchronisation also web to null found a stack overflow post mentioning",
    "start": "2562140",
    "end": "2569400"
  },
  {
    "text": "that some web servers will detox more requests thereby making this technique",
    "start": "2569400",
    "end": "2574650"
  },
  {
    "text": "fail so I've added and I've added an option to the tool that just pads all",
    "start": "2574650",
    "end": "2579960"
  },
  {
    "text": "the requests out to like 60 to 60 kilobytes to try and prevent this from happening and finally personal experience goes a",
    "start": "2579960",
    "end": "2588300"
  },
  {
    "text": "long way so I mentioned this timing technique is really good because it doesn't get false negatives well it gets",
    "start": "2588300",
    "end": "2595740"
  },
  {
    "text": "one false negative which he felt which is a certain version of Apache traffic",
    "start": "2595740",
    "end": "2601500"
  },
  {
    "text": "server is so confused that it this one piece of code alternates in between",
    "start": "2601500",
    "end": "2607650"
  },
  {
    "text": "using the content lengths and the and the chunks so to find that vulnerable",
    "start": "2607650",
    "end": "2613380"
  },
  {
    "text": "system simply check the skip straight to prefer skip straight to proof of concept",
    "start": "2613380",
    "end": "2618390"
  },
  {
    "text": "box and the tool will find it and we'll also cause havoc and get loads of false",
    "start": "2618390",
    "end": "2623790"
  },
  {
    "text": "positives and false negatives so it's not ideal but it will find this one system out there and trust me there are",
    "start": "2623790",
    "end": "2629220"
  },
  {
    "text": "some people that haven't patched that yet even though they really should have defense well firstly as far as helping",
    "start": "2629220",
    "end": "2636750"
  },
  {
    "start": "2635000",
    "end": "2635000"
  },
  {
    "text": "people replicate it go just make sure you're using the content at all that doesn't automatically fix the content",
    "start": "2636750",
    "end": "2642390"
  },
  {
    "text": "length for you like KO or they won't find the vulnerability as far as",
    "start": "2642390",
    "end": "2647520"
  },
  {
    "text": "actually preventing it goes well ultimately this is really a vulnerability in Haiti's view 1.1 so the",
    "start": "2647520",
    "end": "2653400"
  },
  {
    "text": "ideal fix is to use haiti to be to exclusively to talk to back-end systems i don't think many people are doing that",
    "start": "2653400",
    "end": "2660810"
  },
  {
    "text": "right now but there's an alternative fix which is to have the front-end normalised ambiguous requests before",
    "start": "2660810",
    "end": "2667380"
  },
  {
    "text": "routing them onward to the back end and that approach is backed up by RFC 7230 the best place",
    "start": "2667380",
    "end": "2675900"
  },
  {
    "text": "to try and fix this vulnerability is on the front end because on the back end the only real way to fix is if you",
    "start": "2675900",
    "end": "2682050"
  },
  {
    "text": "receive an ambiguous request you have to drop the request just reject it with a 500 and drop the connection as well",
    "start": "2682050",
    "end": "2688980"
  },
  {
    "text": "which is not a great use of experience some people have said this is the kind",
    "start": "2688980",
    "end": "2694710"
  },
  {
    "text": "of thing that wafts are perfect for fixing and I think it's a little bit more nuanced than that so if you've got",
    "start": "2694710",
    "end": "2702360"
  },
  {
    "text": "a laugh and you put it in front of everything and it does heavy normalization yep that's great that's a valid fix but",
    "start": "2702360",
    "end": "2709200"
  },
  {
    "text": "if what your wife is doing is just passively looking at the other traffic on the wire and trying to spot attacks I",
    "start": "2709200",
    "end": "2715410"
  },
  {
    "text": "think it's probably going to fail as soon as someone comes up with a nudie synchronization technique so it's",
    "start": "2715410",
    "end": "2721860"
  },
  {
    "text": "certainly not a complete solution by itself if that's the strategy that it's using finally we've got a little case",
    "start": "2721860",
    "end": "2728820"
  },
  {
    "text": "study so this technique after the presentation was found to work on a lot",
    "start": "2728820",
    "end": "2733860"
  },
  {
    "text": "of websites running Amazon's application load balancer and initially if you were",
    "start": "2733860",
    "end": "2739620"
  },
  {
    "text": "vulnerable to get it fixed you had to email Amazon and get their support to fix it a while later they",
    "start": "2739620",
    "end": "2746460"
  },
  {
    "text": "deployed a fix globally for everyone and it looked like a pretty cool fix but unfortunately it broke some stuff and",
    "start": "2746460",
    "end": "2753630"
  },
  {
    "text": "some people kicked off on Twitter and now it's been disabled by default so if",
    "start": "2753630",
    "end": "2759390"
  },
  {
    "start": "2757000",
    "end": "2757000"
  },
  {
    "text": "you're using application load balancer then you'll probably want to find that setting in and and turn it on to get",
    "start": "2759390",
    "end": "2765390"
  },
  {
    "text": "some kind of resilience against these attacks now why was the distinct Rinna's ation",
    "start": "2765390",
    "end": "2771240"
  },
  {
    "text": "happening there well it was once again due to ambiguity in between lines in ending in slash are slash in verses just",
    "start": "2771240",
    "end": "2777990"
  },
  {
    "text": "/aa and just slash it and that sent me thinking why did the hasty to be",
    "start": "2777990",
    "end": "2784910"
  },
  {
    "text": "specification authors decide that lines in HTTP should end in a two character sequence it just seems like it's asking",
    "start": "2784910",
    "end": "2791850"
  },
  {
    "text": "for trouble to me and I've come to the conclusion that the the real reason for",
    "start": "2791850",
    "end": "2796950"
  },
  {
    "text": "this is typewriters which there's quite a lot about the security of the web",
    "start": "2796950",
    "end": "2802230"
  },
  {
    "text": "currently so there's a whole bunch of further reading available online in",
    "start": "2802230",
    "end": "2808109"
  },
  {
    "text": "particular I drew attention to their free online labs thought we're hosting where you can practice these",
    "start": "2808109",
    "end": "2813750"
  },
  {
    "text": "vulnerabilities in a safe environment where you won't accidentally take out anyone's website and the three key",
    "start": "2813750",
    "end": "2820800"
  },
  {
    "text": "things to take away are that HTTP requests modeling is real as much as you",
    "start": "2820800",
    "end": "2826140"
  },
  {
    "text": "don't want to think about it her HTTP 1.1 parsing is a security critical",
    "start": "2826140",
    "end": "2831720"
  },
  {
    "text": "function and request modeling isn't going anywhere soon I'm going to take",
    "start": "2831720",
    "end": "2836910"
  },
  {
    "text": "about three minutes of questions now and if you have any more after that a feel free to come and chat to me at the back",
    "start": "2836910",
    "end": "2842280"
  },
  {
    "text": "or send me an email don't forget to follow me on Twitter thank you for listening",
    "start": "2842280",
    "end": "2848420"
  },
  {
    "text": "you",
    "start": "2853960",
    "end": "2856020"
  }
]