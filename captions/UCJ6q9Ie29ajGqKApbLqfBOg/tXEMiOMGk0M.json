[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "now it is my pleasure to Welcome to the stage Ron Markovich",
    "start": "7639",
    "end": "14820"
  },
  {
    "text": "and uh Gabby nicobilly",
    "start": "14820",
    "end": "19320"
  },
  {
    "text": "thank you hi everybody um have you ever tried to execute and",
    "start": "21359",
    "end": "27840"
  },
  {
    "text": "analyze the malware that expects to receive commands from a remote and commandment control center only to find",
    "start": "27840",
    "end": "33660"
  },
  {
    "text": "out that the This Server is now unavailable unavailable and you don't",
    "start": "33660",
    "end": "38940"
  },
  {
    "text": "have fast traffic captures of that malware so you don't really know the correct commands to fit to that malware",
    "start": "38940",
    "end": "44760"
  },
  {
    "text": "in order in order to get it to start doing some interesting stuff well at that point you pretty much have only one",
    "start": "44760",
    "end": "50700"
  },
  {
    "text": "option which is to statically reverse engineer the malware and very manually",
    "start": "50700",
    "end": "57079"
  },
  {
    "text": "and this is the task that takes a a lot of time and effort to figure out exactly",
    "start": "57079",
    "end": "64378"
  },
  {
    "text": "what is the communication protocol of the malware today we offer to you Pizza a tool that will help you automatically",
    "start": "64379",
    "end": "71580"
  },
  {
    "text": "extract the communication protocol of a malware or any other executable directly",
    "start": "71580",
    "end": "76920"
  },
  {
    "text": "from its a binary so first thing first",
    "start": "76920",
    "end": "83840"
  },
  {
    "text": "um let's do some introductions run",
    "start": "84000",
    "end": "89520"
  },
  {
    "text": "all right so hello everybody my name is Van Markovich I'm a master's student from the technion and all of this",
    "start": "89700",
    "end": "97560"
  },
  {
    "text": "research is a part of my thesis and I'm gabina kibley I'm a senior",
    "start": "97560",
    "end": "104340"
  },
  {
    "text": "architecture at the technion in Ron's supervisor I'm also a distinguished researcher at the radwar formerly I was",
    "start": "104340",
    "end": "110939"
  },
  {
    "text": "the CTO of a national research lab at Rafael and visiting scholar at Stanford",
    "start": "110939",
    "end": "116159"
  },
  {
    "text": "University and this research will not have been possible without our third partner",
    "start": "116159",
    "end": "121259"
  },
  {
    "text": "professor of Greenberg from the technion okay so our agenda for today first we're",
    "start": "121259",
    "end": "128880"
  },
  {
    "text": "going to talk about what is exactly protocol reverse engineering and why it is an important task",
    "start": "128880",
    "end": "135599"
  },
  {
    "text": "then we'll talk about what is exactly pizza and show you some demo examples",
    "start": "135599",
    "end": "140940"
  },
  {
    "text": "and finally we will talk about how busy does its magic",
    "start": "140940",
    "end": "146099"
  },
  {
    "text": "okay so let's start with by motivation and the background what is exactly protocol reverse",
    "start": "146099",
    "end": "153300"
  },
  {
    "text": "engineering so let's take for example uh an English conversation and let's say",
    "start": "153300",
    "end": "158580"
  },
  {
    "text": "that you would like to learn the rules of the conversation in English and now let's assume that you don't know a word",
    "start": "158580",
    "end": "165060"
  },
  {
    "text": "in English and you don't really want to learn English from scratch you just want to learn to recite the sentences at the",
    "start": "165060",
    "end": "172620"
  },
  {
    "text": "correct times in order to be able to Converse in English for example you just want to",
    "start": "172620",
    "end": "178560"
  },
  {
    "text": "learn that it is appropriate to start an English conversation with a high or a low and if someone asks you how are you",
    "start": "178560",
    "end": "186720"
  },
  {
    "text": "one possible answer would be I'm fine and for example Tuesday okay so uh protocol reverse engineering",
    "start": "186720",
    "end": "194400"
  },
  {
    "text": "is exactly just that learning the rules of the conversation but we learn the rules of the conversation not between",
    "start": "194400",
    "end": "201060"
  },
  {
    "text": "two humans but between two programs and the rules of the conversation between two programs simply is called a protocol",
    "start": "201060",
    "end": "207659"
  },
  {
    "text": "and this is an example of a protocol uh called the SMS represents States and its",
    "start": "207659",
    "end": "213959"
  },
  {
    "text": "states represents the messages the the program expects through a receive or",
    "start": "213959",
    "end": "219900"
  },
  {
    "text": "send at that at that particular state for example here is a partial view of",
    "start": "219900",
    "end": "225060"
  },
  {
    "text": "the SFTP State machine on the server side and here we can learn that the",
    "start": "225060",
    "end": "231540"
  },
  {
    "text": "server at the initial State expects to receive an allow message this is the alcohol receive",
    "start": "231540",
    "end": "237860"
  },
  {
    "text": "and then in the next step if it should send the 250 okay message and then on",
    "start": "237860",
    "end": "244080"
  },
  {
    "text": "the third state should they receive either one of the two messages either made from or reset",
    "start": "244080",
    "end": "250980"
  },
  {
    "text": "and based on the actual messages they will it will receive it will transition then to the next state another important",
    "start": "250980",
    "end": "259440"
  },
  {
    "text": "piece of information is the message formats uh we for example we would like to know that they received two messages",
    "start": "259440",
    "end": "266340"
  },
  {
    "text": "actually all messages that we begin with the the character received and then",
    "start": "266340",
    "end": "272460"
  },
  {
    "text": "white space and then two and then column and so on and so forth so when we say protocol reverse engineering of an",
    "start": "272460",
    "end": "280320"
  },
  {
    "text": "executable we actually mean learning the protocol State machine and the protocols",
    "start": "280320",
    "end": "285900"
  },
  {
    "text": "message formats as implemented by that executable okay so now that we understand what is",
    "start": "285900",
    "end": "291780"
  },
  {
    "text": "exactly protocol reverse engineering let's talk about the why do we want to do this",
    "start": "291780",
    "end": "297479"
  },
  {
    "text": "first motivation is finding bugs not all programs are created perfectly and they",
    "start": "297479",
    "end": "302880"
  },
  {
    "text": "are in implementation bugs in the protocol you may implement the protocol incorrectly",
    "start": "302880",
    "end": "308759"
  },
  {
    "text": "let's see an example let's say there is a client that speaks to the server and sends it some data another server we",
    "start": "308759",
    "end": "316139"
  },
  {
    "text": "should we will need to stop accepting data after the the finished message and",
    "start": "316139",
    "end": "321419"
  },
  {
    "text": "let's say there is a bug in the server and it will it will accept data after",
    "start": "321419",
    "end": "326880"
  },
  {
    "text": "the finished message so perhaps an attacker May exploit this bug so",
    "start": "326880",
    "end": "332580"
  },
  {
    "text": "basically we would like to uncover such bugs now one option would be simply do",
    "start": "332580",
    "end": "337979"
  },
  {
    "text": "testing which is fine but testing usually will not cover each and every",
    "start": "337979",
    "end": "344280"
  },
  {
    "text": "state of the protocol and all the kernel cases so another option might be protocol reverse engineering which means",
    "start": "344280",
    "end": "350780"
  },
  {
    "text": "extracting the protocol State machine from the program and then comparing it",
    "start": "350780",
    "end": "356220"
  },
  {
    "text": "to the intended protocol State machine and see if there are any discrepancies yet another motivation is finding back",
    "start": "356220",
    "end": "362940"
  },
  {
    "text": "doors let's take an example that an attacker implanted the vector in your software and now using a specially",
    "start": "362940",
    "end": "370680"
  },
  {
    "text": "crafted command it will gain access to a privileged file okay so obviously",
    "start": "370680",
    "end": "377520"
  },
  {
    "text": "testing will not uncover this bug because simply the the special command is not part of the protocol right so an",
    "start": "377520",
    "end": "385199"
  },
  {
    "text": "option to uncover this Vector is do protocol reverse engineering extract the",
    "start": "385199",
    "end": "390600"
  },
  {
    "text": "community the protocol State machine from the program and then see if there are any odd",
    "start": "390600",
    "end": "396919"
  },
  {
    "text": "commands that should not be there and it's another motivation which I",
    "start": "396919",
    "end": "403680"
  },
  {
    "text": "already mentioned is analyzing a malware let's say you have a malware and you want to feed it with the correct tense",
    "start": "403680",
    "end": "409800"
  },
  {
    "text": "at the correct commands in order to get it to do something interesting and stop",
    "start": "409800",
    "end": "414960"
  },
  {
    "text": "playing with it and analyzing it so you would need to do you would need to know",
    "start": "414960",
    "end": "420180"
  },
  {
    "text": "the the commands it is expecting and for that you might need to do a protocol",
    "start": "420180",
    "end": "425460"
  },
  {
    "text": "reverse engineering and to understand which commands the malware",
    "start": "425460",
    "end": "431160"
  },
  {
    "text": "expects so hopefully you've Now understand the",
    "start": "431160",
    "end": "436979"
  },
  {
    "text": "protocol reverse engineering is also an important and important task but unfortunately for protocol reverse",
    "start": "436979",
    "end": "443580"
  },
  {
    "text": "engineering is also a hard task because it is very manual process it's simply",
    "start": "443580",
    "end": "449280"
  },
  {
    "text": "opening a reverse engineering program like Ida and start analyzing the actual",
    "start": "449280",
    "end": "455280"
  },
  {
    "text": "binary and finding the exact communication protocol bit by bit it's",
    "start": "455280",
    "end": "461400"
  },
  {
    "text": "very hard and time consuming and it may take days or even weeks depending on the complexity of the executable or the",
    "start": "461400",
    "end": "467819"
  },
  {
    "text": "protocols actually in my last position at the national Resource Center I've",
    "start": "467819",
    "end": "472979"
  },
  {
    "text": "seen many researchers struggle with this with this exact same problem and it it",
    "start": "472979",
    "end": "478979"
  },
  {
    "text": "was very frustrating frustrating and it took them a lot of time to do their job and this is actually what initially",
    "start": "478979",
    "end": "485819"
  },
  {
    "text": "inspired us to take on This research and our goal is very simple given an",
    "start": "485819",
    "end": "491280"
  },
  {
    "text": "executable we would like to somehow magically as and it is automatically as possible extract the state machine",
    "start": "491280",
    "end": "498780"
  },
  {
    "text": "protocol and the commands and the message formats from the executable",
    "start": "498780",
    "end": "505139"
  },
  {
    "text": "simple enough and we also had some assumptions or known assumptions in order to do their",
    "start": "505139",
    "end": "511440"
  },
  {
    "text": "researches practical as possible first up is that we did not assume we",
    "start": "511440",
    "end": "516779"
  },
  {
    "text": "have past traffic captures meaning we don't even know the legitimate",
    "start": "516779",
    "end": "523099"
  },
  {
    "text": "legitimate messages of the protocol this is like learning rules of the English conversation without ever hearing a word",
    "start": "523099",
    "end": "530880"
  },
  {
    "text": "in English uh another non-assumption is that we do",
    "start": "530880",
    "end": "536760"
  },
  {
    "text": "not assume we have an active protocol peer meaning there is a remote executable that will talk to our",
    "start": "536760",
    "end": "541980"
  },
  {
    "text": "executable for example in the malware case there there the CNC server is down",
    "start": "541980",
    "end": "547140"
  },
  {
    "text": "and it will not no longer communicate with uh the malware so in our analogy we",
    "start": "547140",
    "end": "554519"
  },
  {
    "text": "only have one English speaker and we assume we do not have the source code",
    "start": "554519",
    "end": "560880"
  },
  {
    "text": "for the executable we can only rely on the binary code and if you like in the",
    "start": "560880",
    "end": "566940"
  },
  {
    "text": "uh in our analogy we would like to learn the rules of the English conversation by",
    "start": "566940",
    "end": "572220"
  },
  {
    "text": "simply peering into the brain of the English speaker um so",
    "start": "572220",
    "end": "577800"
  },
  {
    "text": "um now that you understand what our research is all about let's see the bottom line and see the tool in action",
    "start": "577800",
    "end": "585420"
  },
  {
    "text": "run",
    "start": "585420",
    "end": "587899"
  },
  {
    "text": "all right so uh thank you Gabby now don't you know what protocol reverse engineering is uh let's discuss the",
    "start": "590459",
    "end": "596700"
  },
  {
    "text": "development of our tool and see it in action oops",
    "start": "596700",
    "end": "602459"
  },
  {
    "text": "so when we first began this research we created a very simple toy example this",
    "start": "602459",
    "end": "610380"
  },
  {
    "text": "example is basically a client that implements a very simple protocol in this protocol the client simply sends a",
    "start": "610380",
    "end": "617339"
  },
  {
    "text": "login message to the server and then according to the response from the server which is either okay1 or K2",
    "start": "617339",
    "end": "624320"
  },
  {
    "text": "response with either logout 1 or logout 2. um we we began reverse engineering this",
    "start": "624320",
    "end": "632220"
  },
  {
    "text": "client manually and then step by step we automated the process and this is an",
    "start": "632220",
    "end": "637980"
  },
  {
    "text": "email from the very first time that our method could reverse engineer the",
    "start": "637980",
    "end": "643380"
  },
  {
    "text": "protocol of uh of this client",
    "start": "643380",
    "end": "647660"
  },
  {
    "text": "um but then we wanted to get to some more realistic stuff so we worked with",
    "start": "650700",
    "end": "656579"
  },
  {
    "text": "the an SMTP client that we found online and analyzed its protocol as well and",
    "start": "656579",
    "end": "662820"
  },
  {
    "text": "during that process we also developed several optimizations in order to improve the performances of our method",
    "start": "662820",
    "end": "668880"
  },
  {
    "text": "and uh yeah this is an email from The Virtuous time that our method could reverse engineer the state machine of",
    "start": "668880",
    "end": "676079"
  },
  {
    "text": "the SMTP client and our method could also reverse engineer the message formats for this client and all of this",
    "start": "676079",
    "end": "684420"
  },
  {
    "text": "information is extracted only from the binary of of data CTP client",
    "start": "684420",
    "end": "691519"
  },
  {
    "text": "um yeah but then kovid came and is there anyone in the audience who does not know",
    "start": "691800",
    "end": "697260"
  },
  {
    "text": "what Zoom is today well back then uh it was not that uh familiar",
    "start": "697260",
    "end": "706140"
  },
  {
    "text": "um so yeah then resume this research and wanted to get uh to get with to work",
    "start": "706140",
    "end": "713640"
  },
  {
    "text": "with some more realistic stuff and we looked for a rat or malware that we can",
    "start": "713640",
    "end": "719160"
  },
  {
    "text": "work with rat is a remote Administration tool it is uh it is installed by an attacker and",
    "start": "719160",
    "end": "726120"
  },
  {
    "text": "then it allows him to remotely control the machine and ghost tract is an example for such",
    "start": "726120",
    "end": "732660"
  },
  {
    "text": "rat it is a very famous threat and uh we",
    "start": "732660",
    "end": "738899"
  },
  {
    "text": "we applied the we applied our method on this rat so let's see our tool in action",
    "start": "738899",
    "end": "746899"
  },
  {
    "text": "well um first we identify manually in either the functions that send and receive",
    "start": "747480",
    "end": "754140"
  },
  {
    "text": "messages of that binary we later discuss why this",
    "start": "754140",
    "end": "759240"
  },
  {
    "text": "is important and then we we created a python snippet that uses our tool",
    "start": "759240",
    "end": "765660"
  },
  {
    "text": "provides the information on the binary as well as the procedures that send and",
    "start": "765660",
    "end": "770700"
  },
  {
    "text": "receive messages and our tool is composed with is composed of a server that interacts",
    "start": "770700",
    "end": "778019"
  },
  {
    "text": "directly with a binary and the client that actually learns the state machine of its protocol so when we start both",
    "start": "778019",
    "end": "785639"
  },
  {
    "text": "the clients in the server the learning uh the reverse engineering of the protocol occurs and as you can see the",
    "start": "785639",
    "end": "792480"
  },
  {
    "text": "state machine is being learned step by step as well as the message types of the protocol as you can see to the right",
    "start": "792480",
    "end": "800100"
  },
  {
    "text": "now this is a time lapse but the overall process process took two minutes and",
    "start": "800100",
    "end": "805800"
  },
  {
    "text": "this work could take hours even days and our tool do do it by two minutes",
    "start": "805800",
    "end": "815120"
  },
  {
    "text": "so so it will finish in a second yeah so here it is this is the final",
    "start": "817019",
    "end": "824639"
  },
  {
    "text": "State machine of the ghost Rod protocol",
    "start": "824639",
    "end": "830399"
  },
  {
    "text": "and again this process that could take hours even days uh took the the tool to",
    "start": "830399",
    "end": "838980"
  },
  {
    "text": "perform two minutes so um now once we now work for the color",
    "start": "838980",
    "end": "845040"
  },
  {
    "text": "versus engineering is and once we saw the tool in action I I invited Gabby to discuss the",
    "start": "845040",
    "end": "853440"
  },
  {
    "text": "internals of our tool okay great okay I hope you are impressed",
    "start": "853440",
    "end": "860820"
  },
  {
    "text": "right two minutes right",
    "start": "860820",
    "end": "864380"
  },
  {
    "text": "of two weeks okay so let's see how the magic is done okay",
    "start": "867180",
    "end": "873199"
  },
  {
    "text": "so our tool actually is composed of two uh components as Ron mentioned the client and the server or two or a",
    "start": "874079",
    "end": "882420"
  },
  {
    "text": "question component and an answering component the client is the question component this is the actual component",
    "start": "882420",
    "end": "888420"
  },
  {
    "text": "the learn the turns the the state machine it runs it but simply asking questions it is based on an algorithm",
    "start": "888420",
    "end": "895680"
  },
  {
    "text": "algorithm called the estar algorithm which will I will describe there shortly and the the part that answers them is",
    "start": "895680",
    "end": "903660"
  },
  {
    "text": "the answering the component which is based on the symbolic execution this is",
    "start": "903660",
    "end": "909000"
  },
  {
    "text": "the server okay let's talk about the the question component there's the algorithm this is",
    "start": "909000",
    "end": "915000"
  },
  {
    "text": "a an automated learning algorithm Loosely speaking is just an algorithm that turns State machines okay it is",
    "start": "915000",
    "end": "921839"
  },
  {
    "text": "well established a protocol algorithm that was a",
    "start": "921839",
    "end": "927320"
  },
  {
    "text": "presented in 1997 By Dana glueing and its aim is to identify an unknown",
    "start": "927320",
    "end": "934620"
  },
  {
    "text": "regular set from examples of members and non-members in our case in an unregular",
    "start": "934620",
    "end": "940920"
  },
  {
    "text": "set it's simply the set of all messages exchanges as permitted by the protocol okay which is essentially described",
    "start": "940920",
    "end": "947699"
  },
  {
    "text": "using a protocols the protocol State machine and it runs this state Machine",
    "start": "947699",
    "end": "952880"
  },
  {
    "text": "by simply finding examples of members and non-members of this set or in other",
    "start": "952880",
    "end": "958980"
  },
  {
    "text": "words it simply asks questions of this type um is a given message exchange valued by",
    "start": "958980",
    "end": "965760"
  },
  {
    "text": "the protocol yes algorithm simply asked over and over again such questions and",
    "start": "965760",
    "end": "971579"
  },
  {
    "text": "it assumes there is someone or something that can answer such such a question and",
    "start": "971579",
    "end": "977760"
  },
  {
    "text": "based on the the answer to these questions it will then construct more questions of this type and then it will",
    "start": "977760",
    "end": "983399"
  },
  {
    "text": "learn piece by piece the the protocol State machine algorithm will now go into the details",
    "start": "983399",
    "end": "991079"
  },
  {
    "text": "of it but it is very uh clever one and very efficient so it doesn't need to ask",
    "start": "991079",
    "end": "996360"
  },
  {
    "text": "about each and every or every message Exchange in order to get the complete",
    "start": "996360",
    "end": "1003980"
  },
  {
    "text": "view of the of the state machine the number of questions of uh as it is it",
    "start": "1003980",
    "end": "1009380"
  },
  {
    "text": "called as it is as they are called membership queries the number of membership queries that it will ask is",
    "start": "1009380",
    "end": "1015980"
  },
  {
    "text": "simply polynomial in the in the number of states of the protocol",
    "start": "1015980",
    "end": "1021920"
  },
  {
    "text": "so for example if you go back to the English conversation if the air star algorithm now like to learn protocol",
    "start": "1021920",
    "end": "1028938"
  },
  {
    "text": "State machine of the English conversation the rules of the conversation it would simply ask",
    "start": "1028939",
    "end": "1034160"
  },
  {
    "text": "questions of this type is uh is this conversation valid is saying hi and then",
    "start": "1034160",
    "end": "1041540"
  },
  {
    "text": "receiving a low and then saying how are you and I'm fine is this a valid English",
    "start": "1041540",
    "end": "1046640"
  },
  {
    "text": "conversation and again it assumed that something or someone can answer this question and the answer is it should be",
    "start": "1046640",
    "end": "1053120"
  },
  {
    "text": "a yes and another question might be is this conversation valid hi hello how are",
    "start": "1053120",
    "end": "1058820"
  },
  {
    "text": "you Tuesday and of course should be a no another example here is a a protocol",
    "start": "1058820",
    "end": "1066320"
  },
  {
    "text": "where the client sends a in any message the server sends a startup message and",
    "start": "1066320",
    "end": "1072080"
  },
  {
    "text": "then the server receives data and finish and let's say they start algorithm and I would like to uh learn the protocol",
    "start": "1072080",
    "end": "1079580"
  },
  {
    "text": "State machine of that of that protocol so it would simply ask questions of of",
    "start": "1079580",
    "end": "1084860"
  },
  {
    "text": "this type for example is it okay for the server to receive an init message and",
    "start": "1084860",
    "end": "1090380"
  },
  {
    "text": "then send a stop message is it okay for the server to receive two init messages back to back okay this type of questions",
    "start": "1090380",
    "end": "1097720"
  },
  {
    "text": "and based on those the answers to those questions it will then piece by piece",
    "start": "1097720",
    "end": "1104919"
  },
  {
    "text": "gather the the protocol State machine",
    "start": "1104919",
    "end": "1109720"
  },
  {
    "text": "but there is a problem here uh as I explained it so far have you noticed it",
    "start": "1110179",
    "end": "1116419"
  },
  {
    "text": "um our assumption or basic assumption is that we do not know the legitimate messages of the of the protocol so how",
    "start": "1116419",
    "end": "1123080"
  },
  {
    "text": "can the extra algorithm even ask about sequences of those of those messages if",
    "start": "1123080",
    "end": "1128120"
  },
  {
    "text": "he doesn't really know the actual messages this is the problem so let's say let's say for the sake of the",
    "start": "1128120",
    "end": "1134419"
  },
  {
    "text": "exposition of the algorithm let's say assume that we do know the uh the messages of the protocol and then we",
    "start": "1134419",
    "end": "1141200"
  },
  {
    "text": "will relax the this assumption and show you how the real algorithm works",
    "start": "1141200",
    "end": "1147460"
  },
  {
    "text": "so to sum up the uh the question part of the the algorithm uh the question part",
    "start": "1149179",
    "end": "1154460"
  },
  {
    "text": "simply asks questions of the of this type is is a given sequence of message types valid for the protocol for the",
    "start": "1154460",
    "end": "1160760"
  },
  {
    "text": "protocol a lot and it expects to receive either yes or no and the part that answers those questions is based on",
    "start": "1160760",
    "end": "1167000"
  },
  {
    "text": "symbolic executions this is the only part in our product in our tool that interacts with the actual binary",
    "start": "1167000",
    "end": "1173539"
  },
  {
    "text": "executable and generally speaking and the answering component of the symbolic",
    "start": "1173539",
    "end": "1180280"
  },
  {
    "text": "execution simply tries to find um valid execution path in the",
    "start": "1180280",
    "end": "1187700"
  },
  {
    "text": "executable that are that correspond to the to the message to the sequence of messages that was asked by the question",
    "start": "1187700",
    "end": "1194600"
  },
  {
    "text": "component if there are valid execution path that correspond to the sequence of",
    "start": "1194600",
    "end": "1200240"
  },
  {
    "text": "messages at hand then the answer should be yes otherwise it should be no now a",
    "start": "1200240",
    "end": "1206660"
  },
  {
    "text": "run will deep dive into the answering component a symbolic execution",
    "start": "1206660",
    "end": "1212559"
  },
  {
    "text": "all right so thank you Gabby again so let's discuss what symbolic execution",
    "start": "1214580",
    "end": "1222320"
  },
  {
    "text": "is symbolic execution is a static analysis method it is a very powerful one but in",
    "start": "1222320",
    "end": "1229039"
  },
  {
    "text": "our case it allows us to sorry yeah so symbolic execution in our case",
    "start": "1229039",
    "end": "1237260"
  },
  {
    "text": "allows us to explore the executions of the binary that follow a given set of",
    "start": "1237260",
    "end": "1242360"
  },
  {
    "text": "constraints um now when we talk about the constraints we mean constraints on the",
    "start": "1242360",
    "end": "1248660"
  },
  {
    "text": "program inputs let's say for example here the program inputs are inserted",
    "start": "1248660",
    "end": "1254960"
  },
  {
    "text": "into variables X and Y the inputs are A and B so if we want to find all",
    "start": "1254960",
    "end": "1261260"
  },
  {
    "text": "executions that match the constraint that a is greater than 3 then the symbolic execution engine will find",
    "start": "1261260",
    "end": "1267559"
  },
  {
    "text": "these two executions but if we also add a constraint that b equals to",
    "start": "1267559",
    "end": "1274419"
  },
  {
    "text": "2789 then we are left only with this one execution",
    "start": "1274419",
    "end": "1280899"
  },
  {
    "text": "um so how do we use the symbolic execution to actually check if a sequence of message types is valid for",
    "start": "1282020",
    "end": "1287660"
  },
  {
    "text": "the protocol we analyze so uh let's see how we do that",
    "start": "1287660",
    "end": "1293539"
  },
  {
    "text": "um assume we are given the sequence of any starting data and then the the",
    "start": "1293539",
    "end": "1299840"
  },
  {
    "text": "program receives a message from the network then we add a constraint that this message is is of the type in it",
    "start": "1299840",
    "end": "1307520"
  },
  {
    "text": "this way the symbolic execution will discard execution paths that do not follow this constraint and we'll only",
    "start": "1307520",
    "end": "1314960"
  },
  {
    "text": "consider now on the true branch of the of the program then when the program",
    "start": "1314960",
    "end": "1320720"
  },
  {
    "text": "sends a start message and we constraint the message to be start the symbolic",
    "start": "1320720",
    "end": "1329780"
  },
  {
    "text": "execution says that the programming did sends a start message and resumes this",
    "start": "1329780",
    "end": "1336260"
  },
  {
    "text": "execution path then when receive is called for another another time we",
    "start": "1336260",
    "end": "1342200"
  },
  {
    "text": "constrained it to the third message which is receiving of data making the symbolic execution follow only X",
    "start": "1342200",
    "end": "1349400"
  },
  {
    "text": "execution path where where the received message is actually data and this way we",
    "start": "1349400",
    "end": "1357500"
  },
  {
    "text": "are left with execution paths that follows the constraints of the sequence",
    "start": "1357500",
    "end": "1363020"
  },
  {
    "text": "of message types and we can say that that the sequence is valid for the",
    "start": "1363020",
    "end": "1368240"
  },
  {
    "text": "protocol now let's see an example for what happens if the sequence is not valid in",
    "start": "1368240",
    "end": "1373280"
  },
  {
    "text": "the protocol when the first message when we are asked about the sequence of receiving data initially and the",
    "start": "1373280",
    "end": "1381260"
  },
  {
    "text": "symbolic execution inserts this constraint of the received message and",
    "start": "1381260",
    "end": "1386900"
  },
  {
    "text": "then the true branch is discarded leaving us with an execution that errors",
    "start": "1386900",
    "end": "1392900"
  },
  {
    "text": "this way we know that the execution there are no valid executions of the",
    "start": "1392900",
    "end": "1398360"
  },
  {
    "text": "binary that follow the sequence of messages and we concluded the sequence is not valid",
    "start": "1398360",
    "end": "1405440"
  },
  {
    "text": "so to formalize this assume we are given a sequence of message types then whenever a send or receive occurs in the",
    "start": "1405440",
    "end": "1413000"
  },
  {
    "text": "program then we add the constraint to match this message to match the appropriate message",
    "start": "1413000",
    "end": "1419840"
  },
  {
    "text": "type and therefore we uh we can actually illustrate this as a trimmed tree of all",
    "start": "1419840",
    "end": "1428000"
  },
  {
    "text": "the executions when we're finally we're left only with executions that follow",
    "start": "1428000",
    "end": "1433400"
  },
  {
    "text": "this sequence if in the end of this process we are left with at least one execution that is valid that follows the",
    "start": "1433400",
    "end": "1440539"
  },
  {
    "text": "constraints then we can say that the sequence is valid for the protocol",
    "start": "1440539",
    "end": "1445960"
  },
  {
    "text": "but remember we said that we constrained messages to the sequence we are given",
    "start": "1446799",
    "end": "1452240"
  },
  {
    "text": "how do we do that well in order to do that we need to intercept the symbolic execution whenever send or receive",
    "start": "1452240",
    "end": "1459440"
  },
  {
    "text": "procedures of the binary are called and therefore we require the use of our method to manually identify the",
    "start": "1459440",
    "end": "1466700"
  },
  {
    "text": "procedures that actually send or receive messages and in this example uh this is",
    "start": "1466700",
    "end": "1472700"
  },
  {
    "text": "the the SMTP example and it is the the SMTP right function that writes a line",
    "start": "1472700",
    "end": "1481280"
  },
  {
    "text": "to the socket or the SMTP get line that reads the line from the socket and receives messages",
    "start": "1481280",
    "end": "1488120"
  },
  {
    "text": "so um yeah this is a requirement from the user of our method",
    "start": "1488120",
    "end": "1493760"
  },
  {
    "text": "but there is a problem still remember we said that we do not know in advance the",
    "start": "1493760",
    "end": "1500120"
  },
  {
    "text": "message types of the protocol so we need to discover them how do we do that well",
    "start": "1500120",
    "end": "1506320"
  },
  {
    "text": "we extend the symbolic execution part of our method and say that whenever a",
    "start": "1506320",
    "end": "1512360"
  },
  {
    "text": "sequence is valid for the protocol it will also return a set of message types that can follow the sequence given",
    "start": "1512360",
    "end": "1519860"
  },
  {
    "text": "the elster algorithm is also extended in order to to gather the set of message",
    "start": "1519860",
    "end": "1525200"
  },
  {
    "text": "types step by step so the set of message types is actually learned on the Fly",
    "start": "1525200",
    "end": "1533659"
  },
  {
    "text": "let's see that again in in an example so assume that the symbolic execution",
    "start": "1533659",
    "end": "1540140"
  },
  {
    "text": "validated the sequence of receiving unit initially so we are left only with the",
    "start": "1540140",
    "end": "1545539"
  },
  {
    "text": "true Branch here and then we wait to see what message types can follow the",
    "start": "1545539",
    "end": "1552620"
  },
  {
    "text": "sequence so the symbolic the the program then",
    "start": "1552620",
    "end": "1557799"
  },
  {
    "text": "sends a data message and there is a feature of the symbolic execution engine",
    "start": "1557799",
    "end": "1563539"
  },
  {
    "text": "that allows us to get examples for values uh for for that message so what",
    "start": "1563539",
    "end": "1570620"
  },
  {
    "text": "we do is we get examples for the message that can that is sent after the after",
    "start": "1570620",
    "end": "1577340"
  },
  {
    "text": "the sequence and we'll later discuss what we do with those examples but let's",
    "start": "1577340",
    "end": "1583940"
  },
  {
    "text": "see another example so if we are given the sequence of init and start and we",
    "start": "1583940",
    "end": "1589400"
  },
  {
    "text": "want to to know what message types can follow this sequence well again we we are left with the with",
    "start": "1589400",
    "end": "1597140"
  },
  {
    "text": "the execution constraint to this sequence and wait for another send or",
    "start": "1597140",
    "end": "1603020"
  },
  {
    "text": "receive to happen in the program well the next thing that happens is that the",
    "start": "1603020",
    "end": "1608240"
  },
  {
    "text": "program receives a message but we can't do what we just did with this with sending message said because a received",
    "start": "1608240",
    "end": "1615740"
  },
  {
    "text": "message is symbolic value it is not known and the we need to to do something",
    "start": "1615740",
    "end": "1621980"
  },
  {
    "text": "else here well what we do is we let the message to",
    "start": "1621980",
    "end": "1627200"
  },
  {
    "text": "be passed uh to be passed by the program once the message is passed as you can",
    "start": "1627200",
    "end": "1632720"
  },
  {
    "text": "see here in this example the for the program checks for some",
    "start": "1632720",
    "end": "1638539"
  },
  {
    "text": "characteristics of the of the message and then the symbolic execution knows uh",
    "start": "1638539",
    "end": "1645500"
  },
  {
    "text": "well if we are in the true branch of this condition the message must begin with uh with an Adder that identifies it",
    "start": "1645500",
    "end": "1653779"
  },
  {
    "text": "as a data message so we actually wait for the message to be passed and only",
    "start": "1653779",
    "end": "1659960"
  },
  {
    "text": "then we get examples from the symbolic execution engine for them for the",
    "start": "1659960",
    "end": "1665779"
  },
  {
    "text": "possible values of the of the received message so it is not it is not entirely",
    "start": "1665779",
    "end": "1672200"
  },
  {
    "text": "unknown but remember that we are we we get a set",
    "start": "1672200",
    "end": "1679100"
  },
  {
    "text": "of examples for for that for uh for the messages uh we need to uh come up with",
    "start": "1679100",
    "end": "1685220"
  },
  {
    "text": "the message type from those examples uh so there are many ways that this can be",
    "start": "1685220",
    "end": "1690679"
  },
  {
    "text": "done but uh a simple approach that worked for us is to Simply find the common features to all the messages",
    "start": "1690679",
    "end": "1698440"
  },
  {
    "text": "meaning the common bytes the bytes that are the same value for all the messages",
    "start": "1698440",
    "end": "1704320"
  },
  {
    "text": "in the set of examples and um",
    "start": "1704320",
    "end": "1709880"
  },
  {
    "text": "and this way we we use the common features of the messages to identify the",
    "start": "1709880",
    "end": "1716419"
  },
  {
    "text": "message types next um let's see an example for that so assume we're given this set of examples",
    "start": "1716419",
    "end": "1723940"
  },
  {
    "text": "and we see that the the common features for all of these messages is the format",
    "start": "1723940",
    "end": "1731179"
  },
  {
    "text": "of the receipt to message which is received white space to colon and so on",
    "start": "1731179",
    "end": "1737059"
  },
  {
    "text": "so forth so actually we will characterize the message type of receipt",
    "start": "1737059",
    "end": "1742760"
  },
  {
    "text": "tool with the with this with this format",
    "start": "1742760",
    "end": "1748220"
  },
  {
    "text": "so to title together we just discussed that our algorithm uses l-star in order",
    "start": "1748220",
    "end": "1755900"
  },
  {
    "text": "to ask if sequences of message types are valid in the protocol and the symbolic",
    "start": "1755900",
    "end": "1761960"
  },
  {
    "text": "execution first validate if a sequence is valid or not and if the sequence is",
    "start": "1761960",
    "end": "1767600"
  },
  {
    "text": "valid it also provides the message types that can follow this sequence the Ulster",
    "start": "1767600",
    "end": "1772880"
  },
  {
    "text": "algorithm dance then gathers the set of message types and and learn learns it",
    "start": "1772880",
    "end": "1779659"
  },
  {
    "text": "step by step so let's see an illustrative example to",
    "start": "1779659",
    "end": "1784940"
  },
  {
    "text": "summarize it all assume that the l-star algorithm asks if",
    "start": "1784940",
    "end": "1790340"
  },
  {
    "text": "this empty sequence is valid in the protocol well in most protocols in",
    "start": "1790340",
    "end": "1795799"
  },
  {
    "text": "actually in every product called The Empty sequence is considered valid and the symbolic execution will answer that",
    "start": "1795799",
    "end": "1803480"
  },
  {
    "text": "yes this sequence is valid and a message the message types that can follow this sequence are the are receiving the init",
    "start": "1803480",
    "end": "1813080"
  },
  {
    "text": "so in it is added to the set of message types and then the LST algorithm asks if",
    "start": "1813080",
    "end": "1819080"
  },
  {
    "text": "receiving init is a valid sequence and the symbolic execution answers that yes it is a valid sequence and the message",
    "start": "1819080",
    "end": "1826340"
  },
  {
    "text": "types that can follow this sequence are star data and finish then it asks if",
    "start": "1826340",
    "end": "1832039"
  },
  {
    "text": "anything starts is a valid sequence the symbolic execution answers that this is a valid sequence and",
    "start": "1832039",
    "end": "1839020"
  },
  {
    "text": "and the set of message types that can follow are already known already",
    "start": "1839020",
    "end": "1844399"
  },
  {
    "text": "contained in the set of message types then it asks if receiving data initially",
    "start": "1844399",
    "end": "1850520"
  },
  {
    "text": "is a valid sequence and the symbolic execution will answer that no it is not a valid sequence",
    "start": "1850520",
    "end": "1857179"
  },
  {
    "text": "asking if anything data is a valid sequence yes it is a valid sequence and",
    "start": "1857179",
    "end": "1863020"
  },
  {
    "text": "and again the set of message types reveals nothing new",
    "start": "1863020",
    "end": "1870320"
  },
  {
    "text": "and then asking if if the sequence unit data and finish is valid and the",
    "start": "1870320",
    "end": "1875480"
  },
  {
    "text": "symbolic execution answers yes this is a valid sequence but there is no message type that can follow this sequence",
    "start": "1875480",
    "end": "1884140"
  },
  {
    "text": "all right so that's it for the internal for method I will now invite Gabby again to summarize and conclude thank you",
    "start": "1886039",
    "end": "1893899"
  },
  {
    "text": "okay thanks Ron um so before we wrap up uh just a few uh",
    "start": "1893899",
    "end": "1900260"
  },
  {
    "text": "indeed caveats and limitations to this tool as you have seen the only way for",
    "start": "1900260",
    "end": "1908179"
  },
  {
    "text": "which our tool to interact with the binary executable is using the symbolic execution this means that our tool is as",
    "start": "1908179",
    "end": "1915380"
  },
  {
    "text": "good or as bad as the symbolic executing engine we use or it uses currently PC",
    "start": "1915380",
    "end": "1921799"
  },
  {
    "text": "only supports a single symbolic execution and engine called anger which",
    "start": "1921799",
    "end": "1926840"
  },
  {
    "text": "is a fantastic tool it does a lot of great things",
    "start": "1926840",
    "end": "1932140"
  },
  {
    "text": "however it does has its limitations for example it has some trouble supporting multiple threads and doesn't fully",
    "start": "1932140",
    "end": "1938600"
  },
  {
    "text": "support the windows windows API this means that two and also the the pizza tool will have trouble",
    "start": "1938600",
    "end": "1946120"
  },
  {
    "text": "analyzing executables such as analyzing such",
    "start": "1946120",
    "end": "1951340"
  },
  {
    "text": "executables this is definitely our future work to expand our I have a piece",
    "start": "1951340",
    "end": "1958520"
  },
  {
    "text": "of support and more symbolic execution engines to help the the tools support more types of",
    "start": "1958520",
    "end": "1966080"
  },
  {
    "text": "executables so to summarize you've just seen a pizza",
    "start": "1966080",
    "end": "1972620"
  },
  {
    "text": "a tool that will allow you to automatically extract the communication protocol and from an executable thereby",
    "start": "1972620",
    "end": "1980419"
  },
  {
    "text": "dramatically increasing decreasing the time it takes for you to analyze the malware or any other executable it can",
    "start": "1980419",
    "end": "1987740"
  },
  {
    "text": "take minutes instead of days or even weeks so with that I do invite you to",
    "start": "1987740",
    "end": "1995299"
  },
  {
    "text": "download them the tool and access the the repo and start playing with it and",
    "start": "1995299",
    "end": "2001179"
  },
  {
    "text": "let us know what you think [Music]",
    "start": "2001179",
    "end": "2007680"
  },
  {
    "text": "[Music]",
    "start": "2011530",
    "end": "2014619"
  }
]