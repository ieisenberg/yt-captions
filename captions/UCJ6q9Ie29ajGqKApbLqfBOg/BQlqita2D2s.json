[
  {
    "text": "the the next talk is a compendium of container escapes we're in South Seas a",
    "start": "30",
    "end": "5310"
  },
  {
    "text": "B e with Brandon Edwards and Nick Freeman I guess we don't have them yeah",
    "start": "5310",
    "end": "15839"
  },
  {
    "text": "we have mics on all right yeah what's good yeah thanks everybody for coming along this afternoon and",
    "start": "15839",
    "end": "21840"
  },
  {
    "text": "thanks a black hat for having us here as well it's pretty good I'm Nick Brian and",
    "start": "21840",
    "end": "27449"
  },
  {
    "text": "today we're gonna be talking about container scapes we both work I catch late where we both have on linux and the",
    "start": "27449",
    "end": "35790"
  },
  {
    "text": "way to protect against attacks on the existence I didn't know we were doing accidents today Nick so my name is",
    "start": "35790",
    "end": "43590"
  },
  {
    "text": "Brandon Edwards work with me Etta Capps late hacking on Linux stuff so a",
    "start": "43590",
    "end": "51539"
  },
  {
    "text": "bit about the scope for this afternoon what we're gonna do is talk about getting from a contained process outside",
    "start": "51539",
    "end": "58260"
  },
  {
    "text": "onto the underlying Linux host not from a malicious image that you can deploy with crazy flags not going from",
    "start": "58260",
    "end": "63989"
  },
  {
    "text": "container to container and not talking about orchestrators the scenario is that we're in a container maybe one that's",
    "start": "63989",
    "end": "69990"
  },
  {
    "text": "running on an Orchestrator but focuses on the attack pictures available from within that container if you want to",
    "start": "69990",
    "end": "76680"
  },
  {
    "text": "know about attacking communities we hope that you went to walking time travel to in cold waters talk yesterday at 1:30",
    "start": "76680",
    "end": "82770"
  },
  {
    "text": "p.m. in lagoon jko we're also specifically discussing containers on linux so we won't be covering any other",
    "start": "82770",
    "end": "88979"
  },
  {
    "text": "of the inferior operating systems for all Linux kernel related information",
    "start": "88979",
    "end": "94229"
  },
  {
    "text": "we'll be referring to the 4x series it also worth noting that the container ecosystem like we had to scope this town",
    "start": "94229",
    "end": "99990"
  },
  {
    "text": "because the ecosystem is huge and if you tried to cover all the different enumerations of deployment it would be massive mean there's no way we could do",
    "start": "99990",
    "end": "106049"
  },
  {
    "text": "it in 15-minute talk so that means we're only covering their predominant widely deployed runtimes and environments that",
    "start": "106049",
    "end": "112380"
  },
  {
    "text": "makes it means like dr. Cooper Nettie's out of scope for things like redheads pod man or firecracker so these are the",
    "start": "112380",
    "end": "120119"
  },
  {
    "text": "volumes of the convenien we're presenting today first up before we get into any escapology we're gonna cover some",
    "start": "120119",
    "end": "125460"
  },
  {
    "text": "container basics so seeing the stage of how we can break down the walls and get out of the container the first volume is all about",
    "start": "125460",
    "end": "131640"
  },
  {
    "text": "vulnerabilities that have been found and sometimes patched in container engines we weren't spend too much time here if",
    "start": "131640",
    "end": "137239"
  },
  {
    "text": "you want to tie this to give the person a fish versus teacher person to fish this is giving you the fish and the fish",
    "start": "137239",
    "end": "143540"
  },
  {
    "text": "is being did for a while and probably smells a bit bad but it can help explain some of the importance of the basics",
    "start": "143540",
    "end": "148670"
  },
  {
    "text": "you're gonna go through first after that we're gonna switch to more practical information on how to break out of a",
    "start": "148670",
    "end": "153739"
  },
  {
    "text": "container and this is teaching you how to fish so the second volume covers ways in which containers can be in securely",
    "start": "153739",
    "end": "158900"
  },
  {
    "text": "deployed or configured to increase their attack surface or otherwise weaken them and then techniques we outlined in this",
    "start": "158900",
    "end": "164060"
  },
  {
    "text": "section will probably give you the most mileage when you're trying to break out of a container and finally in volume three we're gonna cover how the kernel",
    "start": "164060",
    "end": "170060"
  },
  {
    "text": "can and it has been exploited to escape containers and we will cover how you can and shouldn't try to break out of",
    "start": "170060",
    "end": "175670"
  },
  {
    "text": "container using that currently exploit here all right so now we're under the first volume in our compendium this is a",
    "start": "175670",
    "end": "182359"
  },
  {
    "text": "basic you know required reading container basics so this is pretty dumb",
    "start": "182359",
    "end": "187579"
  },
  {
    "text": "but containers in our virtual machines we it was necessary to put this in because there's still a lot of confusion",
    "start": "187579",
    "end": "193250"
  },
  {
    "text": "around this containers often complain with the MS they don't have their own kernel they don't have their own drivers",
    "start": "193250",
    "end": "198440"
  },
  {
    "text": "they don't have their own virtualized hardware they're just tasks and what",
    "start": "198440",
    "end": "204290"
  },
  {
    "text": "does it tasks well the kernel calls processes and threads tasks and a container is a task or a set of tasks with special properties to isolate them",
    "start": "204290",
    "end": "211159"
  },
  {
    "text": "and restrict their access to system resources you can see on the screen here where I've poorly depicted a process tree show and imaginary scenario of",
    "start": "211159",
    "end": "217400"
  },
  {
    "text": "tasks where we have a container engine running an engine X container and like all the other tasks it descends from in",
    "start": "217400",
    "end": "222799"
  },
  {
    "text": "it so proxy pretty special file system that allows accident information from",
    "start": "222799",
    "end": "229909"
  },
  {
    "text": "the kernel currently uses task types to define tasks and you can refer to many of the task attributes by clearing its",
    "start": "229909",
    "end": "235940"
  },
  {
    "text": "pet entry in the profile system that's pretty much we're gonna say about the task truck for now but we will",
    "start": "235940",
    "end": "240949"
  },
  {
    "text": "definitely touch on it in a kernel section just remember that basically it holds most of the isolation mechanisms",
    "start": "240949",
    "end": "246049"
  },
  {
    "text": "that make the container contain and this is a mostly accurate mapping of type",
    "start": "246049",
    "end": "251209"
  },
  {
    "text": "entries of protein trees for reference not really gonna speak to it but you can beat away them so we've established what",
    "start": "251209",
    "end": "256789"
  },
  {
    "text": "containers are that they're tasked with just special properties what are those properties those are credentials capabilities where",
    "start": "256789",
    "end": "263840"
  },
  {
    "text": "the filesystem route is located namespaces see groups Linux security modules and sometimes",
    "start": "263840",
    "end": "268849"
  },
  {
    "text": "comm it's largely the job of the container engine to apply these different properties and we'll cover more of that in later sections but for",
    "start": "268849",
    "end": "275659"
  },
  {
    "text": "now know that when we mention a container engine we mean a thing that instills the environment the facilitate containers first we're gonna start off",
    "start": "275659",
    "end": "282110"
  },
  {
    "text": "by covering what each of these different properties are so the first Canadian attribute is credentials and that's",
    "start": "282110",
    "end": "289310"
  },
  {
    "text": "because all tasks have credentials but it becomes important so credentials are used to associate a user identity to a",
    "start": "289310",
    "end": "294470"
  },
  {
    "text": "task these are the user and group IDs for permission checks like when you're trying to access files the diagram on",
    "start": "294470",
    "end": "301009"
  },
  {
    "text": "the right is from a page in the Linux program interface released in 2010 by no starch press it shows the relationship",
    "start": "301009",
    "end": "306440"
  },
  {
    "text": "between various set UID syscall functions and their effects on the effective real and stored user IDs and",
    "start": "306440",
    "end": "312880"
  },
  {
    "text": "it looks a little witchy actually so on the Left we have a picture of the seal",
    "start": "312880",
    "end": "318800"
  },
  {
    "text": "of Lilith which according to a fringe Geo Cities page I found on wayback machine is supposedly from a book called the Sun of great knowledge also know",
    "start": "318800",
    "end": "325370"
  },
  {
    "text": "start to press circuit 1225 hmm so we'll",
    "start": "325370",
    "end": "333259"
  },
  {
    "text": "be referring to them more when we talk about names faces username sizes later on the one important thing to note here is that credentials are not a course",
    "start": "333259",
    "end": "339560"
  },
  {
    "text": "enough mechanism to restrict container privileges and to address the cost enter",
    "start": "339560",
    "end": "345380"
  },
  {
    "text": "credentials capabilities were introduced in around kernel 3.0 which was released in the middle-ages root privileges were separated into",
    "start": "345380",
    "end": "352039"
  },
  {
    "text": "different groups known as capabilities times change and being root is no longer necessarily quite root enough you can be",
    "start": "352039",
    "end": "358610"
  },
  {
    "text": "semi-group quasi brute the majorie no fruits the diet poker bridge just one capability not written up capabilities",
    "start": "358610",
    "end": "367639"
  },
  {
    "text": "are used as a key isolation mechanism by some container engines shown here the capabilities that docker assigns and you",
    "start": "367639",
    "end": "373069"
  },
  {
    "text": "contain this by default so no you can load a kernel module you can't go to remount things not all container engines",
    "start": "373069",
    "end": "379009"
  },
  {
    "text": "take the same approach alexei by default grants pretty much every capability but it relies on using the in spaces instead",
    "start": "379009",
    "end": "384500"
  },
  {
    "text": "to reduce the scope of the capabilities like you can be kept this app and inside the container and without breaking the",
    "start": "384500",
    "end": "389599"
  },
  {
    "text": "host the containers root filesystem is another property which sets it apart from other tasks the caters route is",
    "start": "389599",
    "end": "395719"
  },
  {
    "text": "often placed in a special file system mount modern doctor for example uses overlay a the operation of which supports",
    "start": "395719",
    "end": "402310"
  },
  {
    "text": "management of layers so that modified data does not actually affect the underlying container image instead any",
    "start": "402310",
    "end": "408020"
  },
  {
    "text": "modifications made on this overlay FS are stored in a diff directory here's",
    "start": "408020",
    "end": "414169"
  },
  {
    "text": "some pseudocode that you probably can't read or some pseudo terminal output that's not very readable showing the overlay at a festive directory that the",
    "start": "414169",
    "end": "420409"
  },
  {
    "text": "TLD arc here is that the containers route mount is actually a path that's reachable for at least any modified data",
    "start": "420409",
    "end": "425780"
  },
  {
    "text": "from the hosts file system and this becomes important we start talking about container escapes because it's useful to know the hosts path to reach files with",
    "start": "425780",
    "end": "431870"
  },
  {
    "text": "attacker controlled content and it's in this case available through the overlay FS upper directory so Dix up at name",
    "start": "431870",
    "end": "440599"
  },
  {
    "text": "spaces which give process is a different view of a hosts resource they're pretty importantly container land and normally",
    "start": "440599",
    "end": "445759"
  },
  {
    "text": "one of the first things people think about when you talk about containers as an analogy think of them like a private karaoke room you're still inside",
    "start": "445759",
    "end": "452020"
  },
  {
    "text": "karaoke paola but you can only hear yourself or you want of your friends in the room with you but the employees can",
    "start": "452020",
    "end": "458360"
  },
  {
    "text": "definitely hear you even if they don't wonder there are a bunch of namespaces as you can see we're only going to talk",
    "start": "458360",
    "end": "463819"
  },
  {
    "text": "about a couple of them the first is the ped namespace and this is what makes head start at one inside container the",
    "start": "463819",
    "end": "471199"
  },
  {
    "text": "user namespace which Maps you IDs so that route inside the container is actually a garbage UID on the host and",
    "start": "471199",
    "end": "476659"
  },
  {
    "text": "the mountain namespace which defines what the root of a containers file system is for this you need caps as",
    "start": "476659",
    "end": "482750"
  },
  {
    "text": "admin to make new namespaces of most types except for user name spaces so",
    "start": "482750",
    "end": "488659"
  },
  {
    "text": "seen groups or troll groups impose resource limit limits on tasks this is really mostly about hardware so this",
    "start": "488659",
    "end": "494300"
  },
  {
    "text": "mostly stops containers from messing with hardware peripherals other devices they don't really impact our escape technique so we're not gonna spend any",
    "start": "494300",
    "end": "500569"
  },
  {
    "text": "more time on them LSMs Linux security modules like a parmer nessie linux are",
    "start": "500569",
    "end": "506509"
  },
  {
    "text": "however something we are going to spend time on because they're an important component in what makes a container contained they're used for much more in theaters",
    "start": "506509",
    "end": "513500"
  },
  {
    "text": "obviously but they're they're pivotal here in containers and add a good extra layer of defense so for containers",
    "start": "513500",
    "end": "520010"
  },
  {
    "text": "lynnster modules are used to reduce access to system calls and sensitive file paths and to prevent containers from mounting new writable proc and sis",
    "start": "520010",
    "end": "526430"
  },
  {
    "text": "FS entries for example or p trace and other programs or any potentially other dangerous behaviors that a container may",
    "start": "526430",
    "end": "532430"
  },
  {
    "text": "want to take even if the task has required capabilities and privilege to do those things these LSMs get in the",
    "start": "532430",
    "end": "538080"
  },
  {
    "text": "way and they generally prevent those we're going through and they generally help reduce the attack surface for the containers even if they've been running",
    "start": "538080",
    "end": "543570"
  },
  {
    "text": "with extra privilege so for dr. a Parma represents one of the strongest defenses but it's certainly not perfect say comps",
    "start": "543570",
    "end": "551670"
  },
  {
    "text": "another mechanism used to isolate containerized processes by restricting access to system goals the default dr. second policy is pretty",
    "start": "551670",
    "end": "558630"
  },
  {
    "text": "comprehensive and locks down a number of potential potentially not-so-good system",
    "start": "558630",
    "end": "564060"
  },
  {
    "text": "calls you want in containers to do and it also it makes others which you would",
    "start": "564060",
    "end": "569370"
  },
  {
    "text": "not be able to do like unshare require caps as admin so it can put some extra restrictions in place this is kind of",
    "start": "569370",
    "end": "575610"
  },
  {
    "text": "relevant because the number of kernel exploits for quiet you to have unshare available in order to get caps as admin",
    "start": "575610",
    "end": "581490"
  },
  {
    "text": "and user name space so you can create other namespaces as an aside Alexi",
    "start": "581490",
    "end": "586950"
  },
  {
    "text": "doesn't really go freaking you listen say combat base Lee just limits loading of parental modules there's another",
    "start": "586950",
    "end": "593820"
  },
  {
    "text": "aside state comps entirely new to by kubernetes which makes a lot of publicly available pill exploits work really good when that",
    "start": "593820",
    "end": "601110"
  },
  {
    "text": "wouldn't work on that plain old docker installation could work pretty well on a container running under kubernetes",
    "start": "601110",
    "end": "606210"
  },
  {
    "text": "Oh a handful of weeks ago this PR was opened so it's for a markdown document",
    "start": "606210",
    "end": "611790"
  },
  {
    "text": "but it's a good sign that Security's is actually thinking of taking this a couple of but more seriously so this",
    "start": "611790",
    "end": "619290"
  },
  {
    "text": "hideous image somewhat conveys how we think about the container security model the blue being what you think you can do",
    "start": "619290",
    "end": "624870"
  },
  {
    "text": "for example I've got unlimited and unlimited train pass and C is like in travel anywhere orange being what you",
    "start": "624870",
    "end": "631920"
  },
  {
    "text": "can actually do so that train pass is actually only valid to students or you can only use it during weekends and red",
    "start": "631920",
    "end": "637950"
  },
  {
    "text": "being where you can do it so maybe it's only available on certain train lines in the city I can travel throughout the",
    "start": "637950",
    "end": "643470"
  },
  {
    "text": "world on it even if I am a student and it is the weekend yeah I'm sorry it's",
    "start": "643470",
    "end": "650430"
  },
  {
    "text": "not my best work after that typically abbreviated introduction to containers the section is going to briefly hop",
    "start": "650430",
    "end": "656850"
  },
  {
    "text": "through some vulnerabilities in container engines and and their impact like you say this can be pretty light",
    "start": "656850",
    "end": "662010"
  },
  {
    "text": "because these things are for the most part patched and weren't helped you too much in the real world",
    "start": "662010",
    "end": "668070"
  },
  {
    "text": "first up talkin motor soccer balls today can be lumped into a handful of",
    "start": "668070",
    "end": "673680"
  },
  {
    "text": "categories week prop Commission's host file descriptors and host parks rip the",
    "start": "673680",
    "end": "679949"
  },
  {
    "text": "leakage and some links and the Athene leakage and siblings all can kind of go hand in hand but not necessarily a",
    "start": "679949",
    "end": "685769"
  },
  {
    "text": "one-to-one mapping the first one I'm just going to touch on briefly 2018",
    "start": "685769",
    "end": "690990"
  },
  {
    "text": "36:31 this led malicious measures image",
    "start": "690990",
    "end": "696259"
  },
  {
    "text": "deployed to right it's airway same",
    "start": "696259",
    "end": "702779"
  },
  {
    "text": "attributes so you could null out apparmor ec linux make em combined and",
    "start": "702779",
    "end": "707880"
  },
  {
    "text": "remove all of the restrictions that the engine was kind of relying on being there",
    "start": "707880",
    "end": "713940"
  },
  {
    "text": "the second is actually just from this year 15 6 X 4 which is a race condition",
    "start": "713940",
    "end": "719190"
  },
  {
    "text": "in police and Lincoln's Corp which was mean to make sure that symlink was followed within the container and Alton",
    "start": "719190",
    "end": "724649"
  },
  {
    "text": "the host and didn't really do that so if you want the race condition and with a few other prerequisites you",
    "start": "724649",
    "end": "731100"
  },
  {
    "text": "could write to an average relocation on the on the horse which is not great we",
    "start": "731100",
    "end": "736920"
  },
  {
    "text": "will spend a minute or two on the interesting run sieve on from earlier this year because it touches on some of",
    "start": "736920",
    "end": "742980"
  },
  {
    "text": "the complexities of running things in a container so a couple of things use frenzy for some background regular",
    "start": "742980",
    "end": "751470"
  },
  {
    "text": "container exists look something like this rinse your fork and apply isolation controls like namespaces as it goes and",
    "start": "751470",
    "end": "757680"
  },
  {
    "text": "in sup still being a copy over NC sitting inside the inside the container",
    "start": "757680",
    "end": "763519"
  },
  {
    "text": "in this case they say yeah entry points like Java desk job something a Java",
    "start": "763519",
    "end": "768899"
  },
  {
    "text": "process letting container run seizing and execute that entry point the Java process and that's what PS would kind of",
    "start": "768899",
    "end": "775649"
  },
  {
    "text": "look like but if that entry point was actually a link to proc self exe we have",
    "start": "775649",
    "end": "781439"
  },
  {
    "text": "a problem because proc selfie is gonna reference the run see binary back on the host and this means out in provisioned",
    "start": "781439",
    "end": "788009"
  },
  {
    "text": "and inside the container now has access to a sense of host resource now our",
    "start": "788009",
    "end": "794430"
  },
  {
    "text": "mistress process can get ahold of the pod script appoint you the host Francine this is mostly most easily done with a",
    "start": "794430",
    "end": "800520"
  },
  {
    "text": "malicious library that will be loaded by Renzi when it runs inside the container",
    "start": "800520",
    "end": "806310"
  },
  {
    "text": "and it can hijack that part of the scripta and it won't be able to write to it at this point because run she's still running can get a tick busy but we were",
    "start": "806310",
    "end": "814140"
  },
  {
    "text": "able to write to it later if we wait until that run C exec dies and opens it",
    "start": "814140",
    "end": "820140"
  },
  {
    "text": "with write permissions and clobber it we can put our own bed or uncie in place",
    "start": "820140",
    "end": "825480"
  },
  {
    "text": "just easing up then bypassing the hippie across to the new digs a process which keeps on trying to open it for right until run C's stopped doing its thing",
    "start": "825480",
    "end": "832890"
  },
  {
    "text": "and then our evil process couldn't clobber away so we're gonna show a quick",
    "start": "832890",
    "end": "838529"
  },
  {
    "text": "demo of this which is mostly based on the original POC by the bug finders who",
    "start": "838529",
    "end": "844170"
  },
  {
    "text": "were nominated for a partner yep I believe the small changes we made were",
    "start": "844170",
    "end": "850339"
  },
  {
    "text": "making the senior reverse shell into the container and maintaining the functionality of run C instead of kind",
    "start": "850339",
    "end": "857399"
  },
  {
    "text": "of breaking it okay see if this will",
    "start": "857399",
    "end": "863700"
  },
  {
    "text": "work so we'll set off by running a",
    "start": "863700",
    "end": "870630"
  },
  {
    "text": "Python container and you see it's just us inside the containers nothing else in",
    "start": "870630",
    "end": "876870"
  },
  {
    "text": "there I'm going to copy over our payload from the host just showing like doing a",
    "start": "876870",
    "end": "883350"
  },
  {
    "text": "witch of Renzi you can see it's still a binary at this point which is a good thing expecting the payload inside the",
    "start": "883350",
    "end": "889350"
  },
  {
    "text": "container and you'll run NATO s H which downloads a few tools that we need and",
    "start": "889350",
    "end": "895220"
  },
  {
    "text": "kind of sets us up to put Salamis just",
    "start": "895220",
    "end": "901200"
  },
  {
    "text": "slips a pump in place and this us when we exec it will overwrite it so if we",
    "start": "901200",
    "end": "907380"
  },
  {
    "text": "file ONC again now we've got a batch script there which is probably not ideal we can still do run see things and it's",
    "start": "907380",
    "end": "915540"
  },
  {
    "text": "gone back to being a binary which is good but over in afrontan we've got a reverse shell and you can see our file",
    "start": "915540",
    "end": "921660"
  },
  {
    "text": "path is to the containers directory on the host and we can dock a PS to see all the processes out of the container good",
    "start": "921660",
    "end": "930380"
  },
  {
    "text": "we're also gonna chat about rocket for a sec and so this set of rocket vulnerability",
    "start": "930589",
    "end": "936810"
  },
  {
    "text": "is kind of similar to the Renzi escape and that involves the same kind of mechanism liking taking into a container",
    "start": "936810",
    "end": "942380"
  },
  {
    "text": "this yeah this diagram should look kind of familiar the difference in the nature of these TV",
    "start": "942380",
    "end": "947640"
  },
  {
    "text": "is that rocket doesn't actually drop anything and there's no stay calm all the capabilities are still in place and cgroups an applied and because rocket in",
    "start": "947640",
    "end": "954870"
  },
  {
    "text": "tow requires you to run as a route not dropping anything as a super bad the",
    "start": "954870",
    "end": "960660"
  },
  {
    "text": "good thing I guess or something is that it's not getting patched Rockets basically abandoned we're at this point",
    "start": "960660",
    "end": "965670"
  },
  {
    "text": "with red head favoring pod man so happy hunting if you do actually find someone who runs rocket so that summarizes the",
    "start": "965670",
    "end": "973260"
  },
  {
    "text": "section on bugs or weaknesses in container engines in themselves we're gonna move on to volume 2 of our compendium escape via a weakness and",
    "start": "973260",
    "end": "978870"
  },
  {
    "text": "deployment where we'll be summarizing each of these as bad ideas",
    "start": "978870",
    "end": "984020"
  },
  {
    "text": "so the first bad idea is the doctor socket the doctor socket our container d socket is a UNIX socket used to manage",
    "start": "984080",
    "end": "990480"
  },
  {
    "text": "the container engine whenever you run a docker command you're really actually running a docker client that's talking over this socket to the docker daemon",
    "start": "990480",
    "end": "998180"
  },
  {
    "text": "just beef a CDP it's really simple but you really should not expose this because any jerk can just curl against",
    "start": "998180",
    "end": "1004070"
  },
  {
    "text": "it or run a docker to point at it in order to schedule privileged containers on with host mounts and fully take over",
    "start": "1004070",
    "end": "1010490"
  },
  {
    "text": "the system you would ask why would anyone want to expose the darker socket into the container but people do this so",
    "start": "1010490",
    "end": "1016760"
  },
  {
    "text": "they can run docker inside of docker and go another level it taper with inception but because you're still talking to the",
    "start": "1016760",
    "end": "1023000"
  },
  {
    "text": "docker that's outside of your container when you schedule something you pop out of of the container you schedule into",
    "start": "1023000",
    "end": "1029300"
  },
  {
    "text": "instance speaking of privileged containers and bad ideas that's actually bad idea",
    "start": "1029300",
    "end": "1034819"
  },
  {
    "text": "number two if you run a docker container with the - - privilege flag you're basically throwing away all of the",
    "start": "1034820",
    "end": "1040100"
  },
  {
    "text": "isolation features from a security standpoint so no Linux security modules like a parmer you'll have full",
    "start": "1040100",
    "end": "1046550"
  },
  {
    "text": "capabilities so none of the that capability drop stuff and it's you know all the dangers so one example of the",
    "start": "1046550",
    "end": "1054740"
  },
  {
    "text": "gate is like install a module a kernel module from your privilege container and it's obviously game over privilege",
    "start": "1054740",
    "end": "1061610"
  },
  {
    "text": "containers can also register user mode helper programs a couple weeks ago now Felix will he'll manage to fitness",
    "start": "1061610",
    "end": "1067130"
  },
  {
    "text": "using AC group use remote helper program into a single tweet this is one of a variety of many different user mode",
    "start": "1067130",
    "end": "1072980"
  },
  {
    "text": "helpers which can be used to escape from privileged container and the exploitation pattern of that's going to be something we'll be covering so",
    "start": "1072980",
    "end": "1078620"
  },
  {
    "text": "actually we're gonna segue here to talk about user mode helper programs airhorn airhorn airhorn user mode helper",
    "start": "1078620",
    "end": "1085550"
  },
  {
    "text": "programs or programs return VOC by the kernel is an event-driven callback these programs are often invoked in a",
    "start": "1085550",
    "end": "1090800"
  },
  {
    "text": "privileged context in the host namespace and will execute the full capabilities consequently the ability to register",
    "start": "1090800",
    "end": "1095840"
  },
  {
    "text": "user mode helper program from within a container facilitates an escape as it allows the controlled program for within the container to be executed by a",
    "start": "1095840",
    "end": "1101630"
  },
  {
    "text": "privileged k thread outside of the container in this segue we're going to go through this generic pattern to show what the steps are that are repeatable",
    "start": "1101630",
    "end": "1107660"
  },
  {
    "text": "and then we'll give you a couple of specific examples so imagine that we",
    "start": "1107660",
    "end": "1113540"
  },
  {
    "text": "started out by popping a container that was deployed with - - privileged flag and we want to escape the first step is",
    "start": "1113540",
    "end": "1119930"
  },
  {
    "text": "to figure out the the overlay FS path this was the path which if you recall from before and the root filesystem part",
    "start": "1119930",
    "end": "1126650"
  },
  {
    "text": "is a path on the host that can reach files that have been modified or created within the container by default with",
    "start": "1126650",
    "end": "1131690"
  },
  {
    "text": "docker you can determine this from within a container by reading the up order entry of Etsy M tab the overlay FS",
    "start": "1131690",
    "end": "1137510"
  },
  {
    "text": "path should look similar here to what we had before the next thing you would do",
    "start": "1137510",
    "end": "1142670"
  },
  {
    "text": "is prepend your payload with this path so that we have a path that reaches our payload from the host file system",
    "start": "1142670",
    "end": "1149470"
  },
  {
    "text": "perfect so use remote helper programs",
    "start": "1149470",
    "end": "1155030"
  },
  {
    "text": "all involve the use of some sort of special file system be it proc FS or C group FS so sometimes you'll have the",
    "start": "1155030",
    "end": "1162050"
  },
  {
    "text": "ability to write to that file system or sometimes you'll have to mount it to get access to these remote helper callback file that you'll need to write to so",
    "start": "1162050",
    "end": "1168470"
  },
  {
    "text": "this next step here is demonstrating that we were mounting up the special FS as part of the pattern with the endpoint",
    "start": "1168470",
    "end": "1175700"
  },
  {
    "text": "mounted we then would echo a payload into whatever the callback file is for that user mode helper so in the C group",
    "start": "1175700",
    "end": "1181280"
  },
  {
    "text": "tweet with by Felix that was the release agent C group release agent callback",
    "start": "1181280",
    "end": "1186590"
  },
  {
    "text": "file but the pattern generally remains the same across different ones as well now that we've ecwid our payload into",
    "start": "1186590",
    "end": "1192710"
  },
  {
    "text": "that callback file that specifies what should be called when the event takes place the kernel knows who to call when it needs help which will be our payload",
    "start": "1192710",
    "end": "1197900"
  },
  {
    "text": "residing within the container and with colonel aware of what's in the event takes place we can either trigger the",
    "start": "1197900",
    "end": "1203210"
  },
  {
    "text": "trigger or wait for the related event to occur when it does Kay thread will",
    "start": "1203210",
    "end": "1209210"
  },
  {
    "text": "execute whatever helper program was mapped to that event and thus the containers escaped and the in container payload is now running as root on the",
    "start": "1209210",
    "end": "1214790"
  },
  {
    "text": "host well we use the example of running with - - privilege it might seem a",
    "start": "1214790",
    "end": "1220340"
  },
  {
    "text": "little lame and sure like that was a bad idea to deploy stuff it's important remember that this is a pattern that can be used in lots of scenarios where you",
    "start": "1220340",
    "end": "1226340"
  },
  {
    "text": "have some sort of crack in the container security model and so will be you know anything from sensitive mounts to even",
    "start": "1226340",
    "end": "1232730"
  },
  {
    "text": "use use in kernel exploitation itself so we'll be will be circling back to this a couple times so at this point we've got",
    "start": "1232730",
    "end": "1239390"
  },
  {
    "text": "a demo I have to stand over here so I can actually see the screen and talk about what's going on I click it here oh",
    "start": "1239390",
    "end": "1247460"
  },
  {
    "text": "man so we're running a privileged",
    "start": "1247460",
    "end": "1253250"
  },
  {
    "text": "container as you can see it's highlighted here first thing we're going",
    "start": "1253250",
    "end": "1259610"
  },
  {
    "text": "to do is get the IP for a connected back shell from the host out throughout this all of our demos involve getting connected back shells from the host so",
    "start": "1259610",
    "end": "1266180"
  },
  {
    "text": "we're gonna write a boilerplate bash dev TCP connect back shell with the same IP",
    "start": "1266180",
    "end": "1271940"
  },
  {
    "text": "that we've discovered make that executable we now are going to begin",
    "start": "1271940",
    "end": "1279830"
  },
  {
    "text": "writing the actual escape to register the release the the user mode helper which is here in this case is the C",
    "start": "1279830",
    "end": "1285140"
  },
  {
    "text": "group release agent so the first thing we do is get this overlay the overlay path I did not come up with this pretty",
    "start": "1285140",
    "end": "1290480"
  },
  {
    "text": "regex that's Felix's work that's taken from his tweet and we use it all through a lot of our demos it's one of the most useful things I think is how to get to",
    "start": "1290480",
    "end": "1297020"
  },
  {
    "text": "that path that can reach into the container so we prepend that path to our payload",
    "start": "1297020",
    "end": "1302840"
  },
  {
    "text": "of shell and we put that into the release agent that's the callback file I then try to escape them and we then",
    "start": "1302840",
    "end": "1313580"
  },
  {
    "text": "simply run the escape it waits a couple seconds and that cat starts listening it connects back in so usually when you can",
    "start": "1313580",
    "end": "1319160"
  },
  {
    "text": "see no job control in this shell as a hacker your job your job is pleated actually but as you can see we're per PS",
    "start": "1319160",
    "end": "1324950"
  },
  {
    "text": "on the host in the out of the container namespace we can even run docker commands or type wall on the terminals root",
    "start": "1324950",
    "end": "1331510"
  },
  {
    "text": "so these are some of the user mode helpers that are confirmed for being useful in container scapes it's not just",
    "start": "1335010",
    "end": "1342610"
  },
  {
    "text": "C group so you have you have everything from the release agent which we just saw",
    "start": "1342610",
    "end": "1348550"
  },
  {
    "text": "but another example has been format misc which is what determines the handler for like shebangs when you run like a Python",
    "start": "1348550",
    "end": "1354040"
  },
  {
    "text": "script or a shell script that when you explode a little bit differently we can use another score pattern which will be",
    "start": "1354040",
    "end": "1359200"
  },
  {
    "text": "we'll be showing here in a little bit this is a helper when a program called when a program crashes to generate a core dump so this is the program",
    "start": "1359200",
    "end": "1364780"
  },
  {
    "text": "actually goes collects the info and dumps in maybe reports stuff back to your distro we'll be we'll be demoing a",
    "start": "1364780",
    "end": "1370390"
  },
  {
    "text": "few of these as well for a scape another container based on different conditions",
    "start": "1370390",
    "end": "1374880"
  },
  {
    "text": "so while docker drops a bunch of capabilities by default sometimes people or systems add them",
    "start": "1375780",
    "end": "1381310"
  },
  {
    "text": "back in we have a couple on this slide that have some security implications but largely speak to caps as admin which is",
    "start": "1381310",
    "end": "1387760"
  },
  {
    "text": "largely considered true root that can kind of vary depending on the container",
    "start": "1387760",
    "end": "1392800"
  },
  {
    "text": "run time and any other sims interfering for example epimer would restrict mount",
    "start": "1392800",
    "end": "1400180"
  },
  {
    "text": "but it wouldn't necessarily respect BPA and some operating systems like CentOS 7",
    "start": "1400180",
    "end": "1406030"
  },
  {
    "text": "is less restricted if you have two same and you can remount proc readwrite and things like this which can enable a",
    "start": "1406030",
    "end": "1411280"
  },
  {
    "text": "bunch of the user hood helpers there Brandon was just talking about also running as Bruce is lousy",
    "start": "1411280",
    "end": "1417700"
  },
  {
    "text": "excessive inside the container Inge not doing that helps the fourth and final",
    "start": "1417700",
    "end": "1423490"
  },
  {
    "text": "bad idea we're going to discuss our sensitive mounts here we're gonna go into proc but extends beyond that and",
    "start": "1423490",
    "end": "1429130"
  },
  {
    "text": "actually a couple weeks ago there was or last week maybe at times all born into one there was a post about how a log",
    "start": "1429130",
    "end": "1434980"
  },
  {
    "text": "mount could be used to escape from kubernetes in general having host resources volume mounted into your",
    "start": "1434980",
    "end": "1440320"
  },
  {
    "text": "container can present a security risk and should be avoided or done very carefully for this example that we will",
    "start": "1440320",
    "end": "1445960"
  },
  {
    "text": "be using proc so by the way here's an",
    "start": "1445960",
    "end": "1451060"
  },
  {
    "text": "app armour the epimer policy for proc this is what protects a lot of the things we're about to do from normally happening the thing is the app armour is",
    "start": "1451060",
    "end": "1457570"
  },
  {
    "text": "path based so the volume mount that we've gotten in that that is to slash host /proc doesn't fit the pattern",
    "start": "1457570",
    "end": "1462610"
  },
  {
    "text": "that's being matched here and that's the restrictions no longer apply so you can easily shoot yourself in the foot thinking like oh it'll protect from",
    "start": "1462610",
    "end": "1469179"
  },
  {
    "text": "proc and it's like no it protects them the /proc so we can read and write to any it's anything in this new prop",
    "start": "1469179",
    "end": "1474970"
  },
  {
    "text": "because it's not being protected the ability to write this proc amount exposes user mode helper programs such",
    "start": "1474970",
    "end": "1480340"
  },
  {
    "text": "as the core pod pattern helper that we just introduced and as you notice from the slide we've got forces in the back",
    "start": "1480340",
    "end": "1486249"
  },
  {
    "text": "proc mount is attached user mode callback that we're escaping at black hair right so yeah we'll actually demo",
    "start": "1486249",
    "end": "1497979"
  },
  {
    "text": "that a little bit the core pattern one in the next section when we circle back to it to show that it can also be used",
    "start": "1497979",
    "end": "1503409"
  },
  {
    "text": "under even more scenarios we don't want to have a repeat a demo all over the place this is just a summary of bad",
    "start": "1503409",
    "end": "1510789"
  },
  {
    "text": "ideas we're sure you have plenty up your arm there other way to figure cell from the foot as well this is just some of",
    "start": "1510789",
    "end": "1515830"
  },
  {
    "text": "the ways that people seem to do it most regularly so now on to volume 3 which is",
    "start": "1515830",
    "end": "1521529"
  },
  {
    "text": "escaping via kernel exploitation it should be pretty obvious but the",
    "start": "1521529",
    "end": "1527529"
  },
  {
    "text": "security model of containers is predicated on kernel integrity one thing that we're gonna discussions discuss in",
    "start": "1527529",
    "end": "1532539"
  },
  {
    "text": "this section is how any kernel vulnerability which can be exploited to get arbitrary code execution and the kernel can also enable ask a pre but",
    "start": "1532539",
    "end": "1539049"
  },
  {
    "text": "we're actually gonna start off with a vulnerability like an example vulnerability that doesn't grant you this in the kernel but does still allow",
    "start": "1539049",
    "end": "1545200"
  },
  {
    "text": "you to escape demonstrate this we'll be walking through how exploiting dirty cow the implications of which are mostly in user land can be used to break out of a",
    "start": "1545200",
    "end": "1551619"
  },
  {
    "text": "container dirty cow is a vulnerability affecting the kernels copy-on-write mechanism there's a lot of nuance in",
    "start": "1551619",
    "end": "1558700"
  },
  {
    "text": "detail behind the mechanics of the copy-on-write mechanism and RD cow has itself exploited each topic would",
    "start": "1558700",
    "end": "1563799"
  },
  {
    "text": "actually warrant its own presentation here if not even a longer slot somewhere so for the sake of brevity we're going",
    "start": "1563799",
    "end": "1569200"
  },
  {
    "text": "to grossly summarize the mechanism in its exploitation so that we can jump into how you can use it for a scape artistry so the exploitation of dirty",
    "start": "1569200",
    "end": "1576879"
  },
  {
    "text": "cow allowed for an unprivileged task to write to a read-only memory mapping including a shared file member memory",
    "start": "1576879",
    "end": "1582220"
  },
  {
    "text": "mappings which resulted modified data being written back to the mapped file this could be used to overwrite library",
    "start": "1582220",
    "end": "1588190"
  },
  {
    "text": "code on disk which will then later be executed by privileged programs and enabling a local privilege escalation which okay cool but",
    "start": "1588190",
    "end": "1595659"
  },
  {
    "text": "that sounds like you have to be somewhere in an environment where something with more privileges files that you share and if containers",
    "start": "1595659",
    "end": "1601390"
  },
  {
    "text": "have isolated file systems who cares of a container task can corrupt shared objects in the container",
    "start": "1601390",
    "end": "1607440"
  },
  {
    "text": "introducing the virtual dynamic shared objects which is a special map being shared from the kernel with user land to",
    "start": "1607440",
    "end": "1613059"
  },
  {
    "text": "provide quick access to frequently used functions without the pain the overhead of assist call for example calling time",
    "start": "1613059",
    "end": "1619740"
  },
  {
    "text": "so on the Left we have a container that's running in its own namespace and isolated and on the right we have host",
    "start": "1619740",
    "end": "1625240"
  },
  {
    "text": "emic tasks face which is a privilege and Protoss running in the host despite",
    "start": "1625240",
    "end": "1630640"
  },
  {
    "text": "having separate virtual address spaces and the container having namespaces at the night when they look up at the sky they see the same video so so this means",
    "start": "1630640",
    "end": "1639130"
  },
  {
    "text": "that the leaked container process can exploit dirty cow to modify the VDS so mapping and add some totally sweet new",
    "start": "1639130",
    "end": "1645400"
  },
  {
    "text": "bonus features to it and everyone else who has the map in a video which is",
    "start": "1645400",
    "end": "1650409"
  },
  {
    "text": "every other task including a host emic task face will include these sweet new bonus features so when hosting make",
    "start": "1650409",
    "end": "1655960"
  },
  {
    "text": "fast-pace asks what time it is it's party time let's talk about I want",
    "start": "1655960",
    "end": "1664179"
  },
  {
    "text": "to move here so that was like a one-off of like oh you can't get code execution from this in the kernel but you can in user land so that can help you get out",
    "start": "1664179",
    "end": "1670240"
  },
  {
    "text": "of container I think we should talk about are talking about the means by which you can get out painter when you",
    "start": "1670240",
    "end": "1675970"
  },
  {
    "text": "can get arbitrary code execution in the kernel we'll start by covering some common goals and patterns of kernel exploitation by doing this we're really",
    "start": "1675970",
    "end": "1686559"
  },
  {
    "text": "going to go over the we're going to genera size the the kernel exploitation patterns and how those can apply to to",
    "start": "1686559",
    "end": "1692230"
  },
  {
    "text": "get an escape without even talking about container specific structures and then we'll get into the container specific structures so let's say you're in user",
    "start": "1692230",
    "end": "1699190"
  },
  {
    "text": "space and you've got a memory corruption bug or use after free in the kernel what are the standard exploitation patterns first step is usually performing the",
    "start": "1699190",
    "end": "1706150"
  },
  {
    "text": "laborious work of setting up the bug this is the key demon egg nobility of grooming the memory layout or walking some object into a specific vulnerable",
    "start": "1706150",
    "end": "1711760"
  },
  {
    "text": "state once your bug is set up you're ready to trigger it and inflict influence on whatever data structures they're now under your control perhaps",
    "start": "1711760",
    "end": "1717909"
  },
  {
    "text": "corrupting a function pointer or return address from that point of having control of execution flow the next step",
    "start": "1717909",
    "end": "1723850"
  },
  {
    "text": "in the pattern is to wrap like it's hot and usually you plan on a function like native right CR for to disable snappings",
    "start": "1723850",
    "end": "1729010"
  },
  {
    "text": "map once you have Stefan's map disabled you then return to your and code this is one of the cooler parts",
    "start": "1729010",
    "end": "1735100"
  },
  {
    "text": "about Colonel exploitation code now rain is ring zero as returned back because they can execute in userspace and so",
    "start": "1735100",
    "end": "1741400"
  },
  {
    "text": "your payload that's running is ring zero is actually something you can write and see and this is one yet this is one more",
    "start": "1741400",
    "end": "1747700"
  },
  {
    "text": "fun parts once you have your payload executing in user land the final step in textbook pattern for this exploitation",
    "start": "1747700",
    "end": "1752920"
  },
  {
    "text": "is to call back in to prepare and commit new privileged credentials to the currently running task which gives your",
    "start": "1752920",
    "end": "1757930"
  },
  {
    "text": "tasks privileges now you can spawn your route shell and do your stuff this is a very commonly repeated pattern across a",
    "start": "1757930",
    "end": "1763570"
  },
  {
    "text": "lot of exploits all the way back to like spender stuff so here's the task struct and we can see that there's the task",
    "start": "1763570",
    "end": "1769840"
  },
  {
    "text": "struct member cred is a pointer to provincials for this task the cred struct which is as we've just demonstrated one of the key targets of",
    "start": "1769840",
    "end": "1776560"
  },
  {
    "text": "Linux exploitation for privilege escalation actually contains references to a vast majority of the security",
    "start": "1776560",
    "end": "1781750"
  },
  {
    "text": "mechanisms used by containers so control the cred struct allows setting things like credentials to make the task group",
    "start": "1781750",
    "end": "1787090"
  },
  {
    "text": "as well as possessing full capabilities but it goes beyond that you'll see that the void star security pointer there is",
    "start": "1787090",
    "end": "1792640"
  },
  {
    "text": "kind of ambiguous but that's where app armor lives and so when you have the new credentials you also have no new no app armor constraints being applied to the",
    "start": "1792640",
    "end": "1798880"
  },
  {
    "text": "task it's worth noting that we can see that user name space is also affected by this but it's not really because it's a",
    "start": "1798880",
    "end": "1806080"
  },
  {
    "text": "different pointer than the one that's in the NS proxy of the task struct so it kind of puts the task into this weird state where for some operations like",
    "start": "1806080",
    "end": "1812590"
  },
  {
    "text": "file operations you are true root because of the user name space control that comes out the credential struct but",
    "start": "1812590",
    "end": "1818260"
  },
  {
    "text": "for doing other things like mounts that comes out the NS proxy struct and so it's like depending on what you're doing you may or may not have new privileges",
    "start": "1818260",
    "end": "1826620"
  },
  {
    "text": "cool I think after so after Queen the new credit struct that you know with the vanilla is sort of textbook kernel",
    "start": "1829230",
    "end": "1835420"
  },
  {
    "text": "equitation pattern this is more or less what a task security model really looks like most of the doors have been opened",
    "start": "1835420",
    "end": "1841060"
  },
  {
    "text": "set comp is still there but most of its meaningful the directives are based on your capability set so it's less of a",
    "start": "1841060",
    "end": "1846580"
  },
  {
    "text": "barrier sorry so before we get into faints our",
    "start": "1846580",
    "end": "1854710"
  },
  {
    "text": "kernel struck manipulation let's just start from this textbook kernel pattern and and walk about like once you've",
    "start": "1854710",
    "end": "1860650"
  },
  {
    "text": "called commit threads and gotten your new credential structs assuming that there's no user namespace",
    "start": "1860650",
    "end": "1865960"
  },
  {
    "text": "set which again doctor and kubernetes do not set by default you can get you can start to do a lot of the same tricks as",
    "start": "1865960",
    "end": "1871150"
  },
  {
    "text": "if you had been passed the privilege flag this means that the same user mode and helper payload start to apply so now",
    "start": "1871150",
    "end": "1877420"
  },
  {
    "text": "finally we'll visualize the the core pattern one that we had mentioned before",
    "start": "1877420",
    "end": "1882660"
  },
  {
    "text": "looking fake so we're in a container and I don't know how to use a mouse and so",
    "start": "1884940",
    "end": "1895210"
  },
  {
    "text": "the first thing we're gonna do is show that we don't have capabilities I actually learned that I could have just run Kappa sage - print but you guys get",
    "start": "1895210",
    "end": "1901840"
  },
  {
    "text": "to suffer through me copy and pasting for an extra 20 seconds but you can see our capabilities are pretty limited here",
    "start": "1901840",
    "end": "1907210"
  },
  {
    "text": "there's just that reduced set that we have in here we have a privilege escalation exploit and a program to crash the privilege escalation it's not",
    "start": "1907210",
    "end": "1914140"
  },
  {
    "text": "one that we wrote it's actually from Android Konovalov at Google we just took it off the shelf and as an example of",
    "start": "1914140",
    "end": "1919540"
  },
  {
    "text": "like take a textbook kernel exploit turn it into a container escape so crash is a",
    "start": "1919540",
    "end": "1929380"
  },
  {
    "text": "really dumb program we're just gonna show you is nothing up our sleeve we're a disassemble it you're gonna see it's got two instructions we extra route our",
    "start": "1929380",
    "end": "1936970"
  },
  {
    "text": "ax and then we try to write something to that as a pointer as an address it's a dumb bug we run crash okay it's a sick",
    "start": "1936970",
    "end": "1944020"
  },
  {
    "text": "fault okay so we've got our crashing programming this is important because for core pattern we're going to need to have a crash to trigger that event so",
    "start": "1944020",
    "end": "1949660"
  },
  {
    "text": "let's set up our callback for our shell again so get our IP address gonna get shell a little shell script back in here",
    "start": "1949660",
    "end": "1956860"
  },
  {
    "text": "for again our dev tcp standard connect back and we're gonna paste in this stuff",
    "start": "1956860",
    "end": "1971320"
  },
  {
    "text": "and I'll pause here to talk through it okay so we are we're in a container",
    "start": "1971320",
    "end": "1978760"
  },
  {
    "text": "we've escalated privileges there's an existing proc thing present so we're gonna mount a new proc mount that has",
    "start": "1978760",
    "end": "1984550"
  },
  {
    "text": "readwrite there are other ways you can you can work around this we may be able get into if there's time for me at the end but in short you can see that this",
    "start": "1984550",
    "end": "1992050"
  },
  {
    "text": "also follows a lot of the same pattern of the other exploits that we were talking about so we need to get the",
    "start": "1992050",
    "end": "1997960"
  },
  {
    "text": "IFS which we do thanks again Felix we prepend that to our payload we echo that into core pattern what determines what",
    "start": "1997960",
    "end": "2003659"
  },
  {
    "text": "happens when a crash happens we're going to make it executable and then we're gonna we're going to run the escape in",
    "start": "2003659",
    "end": "2010320"
  },
  {
    "text": "the background because it's going to connect back to us ah so first we run a privilege escalation right this is we've",
    "start": "2010320",
    "end": "2017279"
  },
  {
    "text": "now updated our cred struct and this is probably unnecessary but to show you look our caps have changed we've got",
    "start": "2017279",
    "end": "2022980"
  },
  {
    "text": "better capabilities so we run the escape in the background and we actually have",
    "start": "2022980",
    "end": "2028740"
  },
  {
    "text": "to get out of the root shell that it gave us because it ended up disabling a bunch of networking so we had to go back to our foe root shell and then as you",
    "start": "2028740",
    "end": "2035669"
  },
  {
    "text": "can see a second later we get our connect back from the crash being called by the escape and now we are on the host",
    "start": "2035669",
    "end": "2043549"
  },
  {
    "text": "so things can be a little different if the container is actually using user name spaces they help for a lot of",
    "start": "2046940",
    "end": "2053250"
  },
  {
    "text": "different things but not so much when you're inside the kernel you can just apply a few extra steps ultimately we",
    "start": "2053250",
    "end": "2058648"
  },
  {
    "text": "just want to apply some properties of an Alec container task to our in container task and there are a whole bunch of",
    "start": "2058649",
    "end": "2063690"
  },
  {
    "text": "routes we can take for this so it's come in touch with a couple this approach is",
    "start": "2063690",
    "end": "2068790"
  },
  {
    "text": "largely taken from a public container escape exploit published in March by cyber rack and we're gonna spend a",
    "start": "2068790",
    "end": "2074339"
  },
  {
    "text": "minute or two going over their steps in short they focused on stealing some privileged namespaces the mount and the",
    "start": "2074339",
    "end": "2080490"
  },
  {
    "text": "hood namespaces copying these from and our container process gave us the processes view that processes view of",
    "start": "2080490",
    "end": "2088169"
  },
  {
    "text": "the whole system from root down prog answers all good things so to escape by",
    "start": "2088169",
    "end": "2095070"
  },
  {
    "text": "stealing namespaces we first needed a namespace to steal an NES proxy that's outside of the container",
    "start": "2095070",
    "end": "2100770"
  },
  {
    "text": "well this exploit did was copy its in its proxies Mountain namespace today in",
    "start": "2100770",
    "end": "2106260"
  },
  {
    "text": "container in it or in container had one which gives out in container in its super powers note that in s proxy is not",
    "start": "2106260",
    "end": "2114000"
  },
  {
    "text": "exactly the same as the Innis proxy of the init process it's a global that can",
    "start": "2114000",
    "end": "2119070"
  },
  {
    "text": "contain all the initial that does contain all of the initial namespaces for the system and we use the switch",
    "start": "2119070",
    "end": "2124619"
  },
  {
    "text": "attached namespaces as function here as it holds our hand and does a heap of divorce so after",
    "start": "2124619",
    "end": "2131240"
  },
  {
    "text": "our pet one now has the ultimate pony namespace instead of the kind of lame horse mount namespace down there and at",
    "start": "2131240",
    "end": "2140150"
  },
  {
    "text": "this point in our process the our exposure still has the containers file system here so if you're inspecting",
    "start": "2140150",
    "end": "2147380"
  },
  {
    "text": "prog-rock one is not true in it it is like cheaper lame in it so we can get",
    "start": "2147380",
    "end": "2153440"
  },
  {
    "text": "the father scripture file descriptor of that in the process and open proc one in its mount and apply Cygnus on that so",
    "start": "2153440",
    "end": "2164390"
  },
  {
    "text": "stiffness is going to apply the namespace referred to in their part descriptor to the calling process and it",
    "start": "2164390",
    "end": "2171890"
  },
  {
    "text": "can be filtered by the second argument zero means everything once our exploit completes and spawns a",
    "start": "2171890",
    "end": "2177980"
  },
  {
    "text": "shell that shows only have the same file system view as the outer container process so we can see things on proc run",
    "start": "2177980",
    "end": "2184940"
  },
  {
    "text": "other containers that kind of thing this is a cut-down version of the public exploit we mentioned and it works for",
    "start": "2184940",
    "end": "2191390"
  },
  {
    "text": "the most part but there are few things that are not like I've never seen it right with this approach the first thing",
    "start": "2191390",
    "end": "2198050"
  },
  {
    "text": "is that the published exploit also states the pig namespace on the child in the same manner as if there's a mountain",
    "start": "2198050",
    "end": "2203690"
  },
  {
    "text": "namespace and we didn't include it in the walkthrough here because even if you do do this it doesn't actually work you",
    "start": "2203690",
    "end": "2210740"
  },
  {
    "text": "can't enter you can use it into a child namespaces but you can go into a lower",
    "start": "2210740",
    "end": "2215840"
  },
  {
    "text": "per namespace you can't go into the hotz bit namespace it honestly it's better",
    "start": "2215840",
    "end": "2220850"
  },
  {
    "text": "not to bother with like messing with ped namespaces the mapping and tracking of pins and bursts and hashmaps and",
    "start": "2220850",
    "end": "2226540"
  },
  {
    "text": "parent-child and skipping structures non trivial and prone to making weird things happen in the kernel and you really",
    "start": "2226540",
    "end": "2236000"
  },
  {
    "text": "don't need to worry about the pad namespace the other thing that's a little bit off about this approach is that the containers in the process",
    "start": "2236000",
    "end": "2244359"
  },
  {
    "text": "sitting there to have the same namespace as real in it is not the best idea",
    "start": "2244359",
    "end": "2249619"
  },
  {
    "text": "because their processes there's all things that's good one and guess what happens if you try and spawn in your",
    "start": "2249619",
    "end": "2254690"
  },
  {
    "text": "process when you think you'll pick one but you're not paid one you get killed the whole container gets killed and",
    "start": "2254690",
    "end": "2260930"
  },
  {
    "text": "often the whole system locks out as well which is optimal so we can take more of a cool",
    "start": "2260930",
    "end": "2267859"
  },
  {
    "text": "egg guy approach and steal a different resource from a more privileged process and this is what we do now contain your scape exploit which we released like a",
    "start": "2267859",
    "end": "2274219"
  },
  {
    "text": "handful of days I think after the first one and who this we're going to talk about the a pest drugs which holds",
    "start": "2274219",
    "end": "2281269"
  },
  {
    "text": "information about the task current pulse in position with Patrick's one for the road file system and one for CW dating",
    "start": "2281269",
    "end": "2288380"
  },
  {
    "text": "and the path strength itself contains india-based mount and this contains reference to the mountain name space is",
    "start": "2288380",
    "end": "2293929"
  },
  {
    "text": "appropriate to it so copying the hippies trucks of a non containerized process over to your exploit process is quick",
    "start": "2293929",
    "end": "2300439"
  },
  {
    "text": "win and you'll get paul paestum access to borrow this if a strikes of an uncontained process we first need to",
    "start": "2300439",
    "end": "2306319"
  },
  {
    "text": "find an uncontained process to reference there are few ways to do so we're gonna use a little loop that checks the pin",
    "start": "2306319",
    "end": "2311569"
  },
  {
    "text": "value that you see in TAS trucks okay this pit is the real code that the host",
    "start": "2311569",
    "end": "2317150"
  },
  {
    "text": "name space sees not the inner name space pizza seen inside child name spaces are inside a set of different structures",
    "start": "2317150",
    "end": "2322869"
  },
  {
    "text": "which we don't really need to worry about for this exercise but if you go the namespace cropping route you definitely need to worry about and this",
    "start": "2322869",
    "end": "2331519"
  },
  {
    "text": "is a quick alert that it's basically it's gonna Traverse up to the real parent injury and the task tries to check if the given task peds one and",
    "start": "2331519",
    "end": "2339369"
  },
  {
    "text": "that is not like cheapo container pit one so keep on looping and when it's",
    "start": "2339369",
    "end": "2345259"
  },
  {
    "text": "there we can swap it out and we can copy real in its airstrikes over to our",
    "start": "2345259",
    "end": "2352009"
  },
  {
    "text": "process it's super quick demo of this so",
    "start": "2352009",
    "end": "2361819"
  },
  {
    "text": "we're gonna start by running a container this one does have cycle and combined just like revenues and spread a few",
    "start": "2361819",
    "end": "2369229"
  },
  {
    "text": "commands install a couple of tools and admin privileges user and switch to they use them",
    "start": "2369229",
    "end": "2375670"
  },
  {
    "text": "so just showing our current capabilities we have just a standard Bacchus hit nothing too exciting nothing on home do",
    "start": "2381010",
    "end": "2389000"
  },
  {
    "text": "a cheer we are in a container so just gonna copy over container scrapings",
    "start": "2389000",
    "end": "2394700"
  },
  {
    "text": "whether it's just using justice justice and starting them and a different screen window and we'll run our escape exploit",
    "start": "2394700",
    "end": "2401080"
  },
  {
    "text": "so now if we get capabilities again we have all of them just great we can see",
    "start": "2401080",
    "end": "2409460"
  },
  {
    "text": "all the questions of the writing on the system and we can also see that them and",
    "start": "2409460",
    "end": "2414800"
  },
  {
    "text": "since we opened up just before but we can't kill it because we're not in the same good namespace we can see it",
    "start": "2414800",
    "end": "2419960"
  },
  {
    "text": "because our proxies it but we can't actually reference it but we can now start a privileged container and mapping",
    "start": "2419960",
    "end": "2426470"
  },
  {
    "text": "the hosts use the hosted namespace and map in the hosts root filesystem and once you've done them and just route",
    "start": "2426470",
    "end": "2431870"
  },
  {
    "text": "them through the mapped in one and we can kill the the process with fire so",
    "start": "2431870",
    "end": "2440870"
  },
  {
    "text": "missing around pet namespaces really isn't necessary it's more trouble than it's worth alright so we're at time we're getting",
    "start": "2440870",
    "end": "2447920"
  },
  {
    "text": "close to it we may have a little bit of extra time here so if so we may show an extra video which I think right 10",
    "start": "2447920",
    "end": "2453170"
  },
  {
    "text": "minutes but let's let's wrap up with our takeaways the differences in container",
    "start": "2453170",
    "end": "2459680"
  },
  {
    "text": "engines deployment tools Linux distributions greatly affect how secure containers are so like running docker on",
    "start": "2459680",
    "end": "2464930"
  },
  {
    "text": "your own to run that exploit you'd have to remove seccomp but running kubernetes you don't have to remove SATCOM because it just doesn't apply SATCOM the same",
    "start": "2464930",
    "end": "2471500"
  },
  {
    "text": "container engine will operate different on different linux distros some container engines really don't care like",
    "start": "2471500",
    "end": "2476600"
  },
  {
    "text": "rocket abstractions provided by the orchestration can make things worse again kubernetes and abstraction upon",
    "start": "2476600",
    "end": "2482150"
  },
  {
    "text": "abstraction layers is a whole nother tire fire hi openshift user namespaces are one of the best",
    "start": "2482150",
    "end": "2489470"
  },
  {
    "text": "isolation mechanisms when they don't enable privilege escalations themselves so like well it's an effective mechanism",
    "start": "2489470",
    "end": "2495080"
  },
  {
    "text": "to use the CVE that we have up here from 2018 with a kernel bug and UID mapping that actually let you break out so it's",
    "start": "2495080",
    "end": "2500990"
  },
  {
    "text": "a little ironic when the goal is to like isolate the user and it lets you break out of it namespace engine bugs are",
    "start": "2500990",
    "end": "2508820"
  },
  {
    "text": "awesome but probably not how you're going to get popped where WC Mobile container",
    "start": "2508820",
    "end": "2514080"
  },
  {
    "text": "bugs but they're all pretty trains it in nature they're gonna get patched an issue use rocket I suppose much more",
    "start": "2514080",
    "end": "2519750"
  },
  {
    "text": "useful for attackers are the techniques exploiting poorly configured containers with extra privileges because there are",
    "start": "2519750",
    "end": "2524880"
  },
  {
    "text": "infinite flaws and layer 8 and we're who's deploying containers order the term so that's probably how you can end",
    "start": "2524880",
    "end": "2530430"
  },
  {
    "text": "up getting out there are also of course streaming supplied bugs in the kernel the namespace one is one we just",
    "start": "2530430",
    "end": "2536700"
  },
  {
    "text": "mentioned but really for any decent kernel bug you can pound include container scape dot H and turn it into a portal gun good thing there aren't that",
    "start": "2536700",
    "end": "2544140"
  },
  {
    "text": "many kernel bugs accepts so this is this is a screenshot of sis bot that's just running out there on the internet",
    "start": "2544140",
    "end": "2549240"
  },
  {
    "text": "publishing kernel bugs every day as it finds them in like part of why I really wanted to submit this talk was you know",
    "start": "2549240",
    "end": "2555780"
  },
  {
    "text": "when the run seed bug came out everyone lost their minds but then when a kernel bugs are being cranked out every day",
    "start": "2555780",
    "end": "2561480"
  },
  {
    "text": "nobody bats an eyelid so anyway I like once that we saw was in 2018 the kernel",
    "start": "2561480",
    "end": "2567390"
  },
  {
    "text": "gained a delta on average of about 900 lines of code today so this will will not dry up very soon yeah",
    "start": "2567390",
    "end": "2575910"
  },
  {
    "text": "thanks everyone for coming along I hope you learned something please check out vlog and the coming weeks put some blog",
    "start": "2575910",
    "end": "2580920"
  },
  {
    "text": "posts that will go into more detail some of these sections and you know company in the store yep thank you",
    "start": "2580920",
    "end": "2586870"
  },
  {
    "text": "[Applause]",
    "start": "2586870",
    "end": "2591020"
  }
]