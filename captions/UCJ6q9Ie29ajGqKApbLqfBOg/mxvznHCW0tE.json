[
  {
    "text": "can anyone hear me at all right thank you so I've got a bit of a cold at the moment so um my voice is a bit off well",
    "start": "680",
    "end": "9000"
  },
  {
    "text": "good morning everybody and thank you very much for coming uh today we're going to be speaking about SQL injection",
    "start": "9000",
    "end": "15080"
  },
  {
    "text": "and data mining through inference this is a a well it's not a a a new technique",
    "start": "15080",
    "end": "21760"
  },
  {
    "text": "per se uh but it's an improvement of a technique that was introduced a few years ago um which obviously we we'll",
    "start": "21760",
    "end": "29240"
  },
  {
    "text": "discuss so for those that don't know in this room uh SQL injection that's a very",
    "start": "29240",
    "end": "36399"
  },
  {
    "text": "long-winded explanation it's quite simple as an attacker we can piggyback our own SQL statements on top of a",
    "start": "36399",
    "end": "43239"
  },
  {
    "text": "predefined application query and have the database server on the back end of the application do something that it",
    "start": "43239",
    "end": "49039"
  },
  {
    "text": "wasn't intended ever to do so we just say we can use this to um",
    "start": "49039",
    "end": "56280"
  },
  {
    "text": "drill for data we can use it to exploit buffer overflows in the database Bank and we you know it's super injection is",
    "start": "56280",
    "end": "62879"
  },
  {
    "text": "a major problem uh probably as high whisker problem as a a buffer overflow",
    "start": "62879",
    "end": "70840"
  },
  {
    "text": "as far as I'm concerned anyway so let's go a quick history of",
    "start": "70840",
    "end": "77640"
  },
  {
    "text": "sual injection because it's an interesting reading on Christmas day in 1988 Flack",
    "start": "77640",
    "end": "83960"
  },
  {
    "text": "54 was released and in that RFP uh one of the uh you know that that day's uh",
    "start": "83960",
    "end": "91400"
  },
  {
    "text": "good uh web hackers um Russ uh Russell pron I can't remember his Sur name",
    "start": "91400",
    "end": "96640"
  },
  {
    "text": "properly but rainforest poy anyway released an article called empti Web technology vulner vulnerabilities and it",
    "start": "96640",
    "end": "103479"
  },
  {
    "text": "talks about hacking via SQL he doesn't use the term SQL injection specifically",
    "start": "103479",
    "end": "108560"
  },
  {
    "text": "but it's the first Fay it's the first introduction of SQL injection kind of",
    "start": "108560",
    "end": "113799"
  },
  {
    "text": "attack in a public forum certainly that I know of I mean whether RFP actually",
    "start": "113799",
    "end": "119920"
  },
  {
    "text": "vented secret injection or or not is another matter I haven't actually had the the opportunity to ask",
    "start": "119920",
    "end": "125759"
  },
  {
    "text": "him after that came uh an advisory from Air who were owned by macro media now um",
    "start": "125759",
    "end": "132800"
  },
  {
    "text": "on February 4th 1999 basically um the the advisory spoke of multiple um SQL",
    "start": "132800",
    "end": "140480"
  },
  {
    "text": "statements and dynamic queries the fact that SQL Server would batch SQL queries what they fa to realize of course at",
    "start": "140480",
    "end": "146480"
  },
  {
    "text": "that time was that you could do Union selction and regardless of the fact that batching excuse me batching was allowed",
    "start": "146480",
    "end": "154959"
  },
  {
    "text": "in SQL Server other databases servers were just as vulnerable using Union",
    "start": "154959",
    "end": "160599"
  },
  {
    "text": "selects and so on 3 months after that RFP again and",
    "start": "160599",
    "end": "167480"
  },
  {
    "text": "Matthew asley released an advisory um with the title of anti odbc remote",
    "start": "167480",
    "end": "172680"
  },
  {
    "text": "compromise they're speaking about injecting arbitary VBA uh into access",
    "start": "172680",
    "end": "178640"
  },
  {
    "text": "SQL queries so it's not SQL uh injection for you know data mining purposes it's",
    "start": "178640",
    "end": "184879"
  },
  {
    "text": "you know to get it issue a sh",
    "start": "184879",
    "end": "188799"
  },
  {
    "text": "command and then again RFP RFP made all the the initial inroads into into uh SEC",
    "start": "190400",
    "end": "196640"
  },
  {
    "text": "injection basically uh February February 2000 he wrote um an article how I ha",
    "start": "196640",
    "end": "202840"
  },
  {
    "text": "packet storm and again you know at this stage s injection the term hasn't been",
    "start": "202840",
    "end": "208680"
  },
  {
    "text": "used in public they're like find anywhere in September 2000 I speak about",
    "start": "208680",
    "end": "213720"
  },
  {
    "text": "SQL injection or well I don't use the term again uh as part of my uh Speech here in Amsterdam Chris five years ago",
    "start": "213720",
    "end": "220680"
  },
  {
    "text": "I'm getting old um application assessments on IIs but again SQL injection the term",
    "start": "220680",
    "end": "228239"
  },
  {
    "text": "itself is not used I do say SQL insertion but not uh SQL injection I",
    "start": "228239",
    "end": "233439"
  },
  {
    "text": "think the first time uh first time SQL injection is actually used in a public forum is chipan of SQL security.com",
    "start": "233439",
    "end": "242400"
  },
  {
    "text": "he uh released a a paper called the SQL injection fact um at and about the same time",
    "start": "242400",
    "end": "250480"
  },
  {
    "text": "actually s the Sans Institute were using the term SQL injection in some of their",
    "start": "250480",
    "end": "256160"
  },
  {
    "text": "you know you know issues for the week kind of situation but uh the the onlyest",
    "start": "256160",
    "end": "261440"
  },
  {
    "text": "one I can find where the term SQL injection is used um uh is is after chip",
    "start": "261440",
    "end": "266960"
  },
  {
    "text": "Andrew's uh paper uh in April 2001 I present another paper",
    "start": "266960",
    "end": "272720"
  },
  {
    "text": "at black cat called um remote web application disassembly disassembly with LBC messages at the time I didn't know",
    "start": "272720",
    "end": "279560"
  },
  {
    "text": "this was called SQL injection because I hadn't seen chips paper and um that's",
    "start": "279560",
    "end": "285039"
  },
  {
    "text": "basically the first real effort I made in terms of looking at this and basically red on odbc messages to work",
    "start": "285039",
    "end": "292080"
  },
  {
    "text": "so it was fairly PS in that respect in January 2002 Chris anley releases",
    "start": "292080",
    "end": "298000"
  },
  {
    "text": "Advanced squet injection one of the best papers out there um it was the first",
    "start": "298000",
    "end": "303080"
  },
  {
    "text": "real paper to analyze SQL injection to any great degree well actually when to",
    "start": "303080",
    "end": "308440"
  },
  {
    "text": "say the first paper Kevin spent two days beforehand released the paper but I I I",
    "start": "308440",
    "end": "314120"
  },
  {
    "text": "rate Chris ANS more uh not because he works for the same company as me but because Kevin spent makes some conclus",
    "start": "314120",
    "end": "320639"
  },
  {
    "text": "draws some conclusions that are incorrect in his paper there are some fundamental flaws in Kevin's paper there",
    "start": "320639",
    "end": "326120"
  },
  {
    "text": "aren't in Chris's that's why that's why I've ordered it that way in June 2002 Chris",
    "start": "326120",
    "end": "332199"
  },
  {
    "text": "Builds on his paper with more advanced SQL injection and he introduces the uh a",
    "start": "332199",
    "end": "339400"
  },
  {
    "text": "a method called time using time delays essentially whereby we can um introduce",
    "start": "339400",
    "end": "347240"
  },
  {
    "text": "a delay in the query such that if a given bit within a given bite of a sub",
    "start": "347240",
    "end": "353680"
  },
  {
    "text": "select is set to one it will wait 5 seconds if it's not set to if it's set",
    "start": "353680",
    "end": "359280"
  },
  {
    "text": "to zero then return immediately now I'm going to build on on that as far as I'm concerned",
    "start": "359280",
    "end": "366039"
  },
  {
    "text": "we infer from the fact that there's a delay that the the data is a given",
    "start": "366039",
    "end": "372000"
  },
  {
    "text": "number you know it's the bit is set that to me is inference and there are so many",
    "start": "372000",
    "end": "377599"
  },
  {
    "text": "many more interesting ways of and easier ways of doing inference um attacks than",
    "start": "377599",
    "end": "382919"
  },
  {
    "text": "using time delays time delays obviously takes time um and to be accurate you need a long longer delay and the longer",
    "start": "382919",
    "end": "390479"
  },
  {
    "text": "the sorry excuse me the longer the delay you know the more time it's going to take",
    "start": "390479",
    "end": "396639"
  },
  {
    "text": "um it's it's it's funny that Chris didn't think about it at the time because it's a very easy step forward uh",
    "start": "396639",
    "end": "403840"
  },
  {
    "text": "when you sit down and uh analyze it August 2002",
    "start": "403840",
    "end": "410599"
  },
  {
    "text": "Cesaro is he in here I'm sure I saw him",
    "start": "410599",
    "end": "416840"
  },
  {
    "text": "sayar keeping in another talk releases a paper an excellent paper manipulating",
    "start": "416840",
    "end": "422479"
  },
  {
    "text": "SQL server using SQL injection at the same time he released a toour called Data Thief that basically used the open",
    "start": "422479",
    "end": "428759"
  },
  {
    "text": "roset function to get data out as we'll see later on that's what I call an outof",
    "start": "428759",
    "end": "433919"
  },
  {
    "text": "bounded um attack and then in September 2003 um OA",
    "start": "433919",
    "end": "440199"
  },
  {
    "text": "M and anaki schan released another great paper called blindfolded SQL injection",
    "start": "440199",
    "end": "445960"
  },
  {
    "text": "basically most other papers have relied on the fact that you could get some kind of of useful information back in the SQL",
    "start": "445960",
    "end": "452199"
  },
  {
    "text": "injection eror sorry in in the era that you could you know then build in that",
    "start": "452199",
    "end": "458120"
  },
  {
    "text": "they basically took a situation whereby you get none of that useful information and you know build an attack from there",
    "start": "458120",
    "end": "464720"
  },
  {
    "text": "so working from a blind situation in late September 2003 sanctum Inc another",
    "start": "464720",
    "end": "470599"
  },
  {
    "text": "paper by Kevin spet was you know they released their take on bring ESC injection essentially addressed the same",
    "start": "470599",
    "end": "476120"
  },
  {
    "text": "issues but again um I think um the the first well yeah the first paper was uh",
    "start": "476120",
    "end": "482840"
  },
  {
    "text": "much more interesting and and and drills uh down further back at 2004 last year",
    "start": "482840",
    "end": "490159"
  },
  {
    "text": "uh in Vegas um o x90g released squeal which um is now called absen I believe",
    "start": "490159",
    "end": "499159"
  },
  {
    "text": "um it's a tool for um SEL injection so that's a quick rundown of",
    "start": "499159",
    "end": "505319"
  },
  {
    "text": "of the history of SQL injection um it's",
    "start": "505319",
    "end": "510800"
  },
  {
    "text": "it's one of those things that everybody knows about but when you look at you know when you're doing an application assessment on the site 92 well probably",
    "start": "510800",
    "end": "518039"
  },
  {
    "text": "about seven times out of 10 if it's feeding into a database at some point on some page it will be vul vulnerable to",
    "start": "518039",
    "end": "524440"
  },
  {
    "text": "SQL injection everyone knows about it yet no one seems to be well that's hypo obviously there's",
    "start": "524440",
    "end": "532040"
  },
  {
    "text": "people out there who do protect against it and and build their application securely but it's one of those things where people just really haven't Cutten",
    "start": "532040",
    "end": "538680"
  },
  {
    "text": "on to the fact yet um so that we've been saying it you know since the year 2000 at least saying well",
    "start": "538680",
    "end": "546040"
  },
  {
    "text": "since I PRS paper since 1998 you've got to fix this and S years",
    "start": "546040",
    "end": "551360"
  },
  {
    "text": "ago and people still aren't doing this so anyway data mining with SQL injection data mining neither to say is getting",
    "start": "551360",
    "end": "558120"
  },
  {
    "text": "data out of the backend database server with SQL injection as far as I'm",
    "start": "558120",
    "end": "563519"
  },
  {
    "text": "concerned there are three three classes of data mining inband out of band and",
    "start": "563519",
    "end": "568920"
  },
  {
    "text": "infer inference is what we're going to discuss in depth but before we do that let's discuss inband and",
    "start": "568920",
    "end": "575279"
  },
  {
    "text": "outband so an inband attack an inbound attack is where data",
    "start": "575279",
    "end": "582839"
  },
  {
    "text": "is included in the response from the web server so that could be in a well-rendered web page you know the",
    "start": "582839",
    "end": "589519"
  },
  {
    "text": "results um you let's say you have a um a bookstore uh an online bookstore where",
    "start": "589519",
    "end": "596519"
  },
  {
    "text": "you can search for uh book titles by given an author you can basically",
    "start": "596519",
    "end": "602079"
  },
  {
    "text": "because it's vulnerable to secret injection say you know author is through single quote Union select you know names",
    "start": "602079",
    "end": "610640"
  },
  {
    "text": "from uh usernames from user table kind of thing and dump people's usernames so",
    "start": "610640",
    "end": "615720"
  },
  {
    "text": "that would be an endband attack it's being rendered within the web page sometimes you can get the data out by an",
    "start": "615720",
    "end": "622000"
  },
  {
    "text": "aror message sometimes as um well anything included you know in",
    "start": "622000",
    "end": "629440"
  },
  {
    "text": "the same Communication channel between you and the web server as far as I'm concerned is an inband um",
    "start": "629440",
    "end": "635480"
  },
  {
    "text": "attack an out of band attack is where data is retrieved using another Communication channel I.E we could for",
    "start": "635480",
    "end": "642040"
  },
  {
    "text": "example in article use the UT uh U HTTP request function you know to select data",
    "start": "642040",
    "end": "648079"
  },
  {
    "text": "from a table and then send that back out to us um over a given Port one of the",
    "start": "648079",
    "end": "654200"
  },
  {
    "text": "useful things with uh U hp. request is that we can specify um a port so let's",
    "start": "654200",
    "end": "660279"
  },
  {
    "text": "say their firewall has you know um egress rules that allow say outbound SSH",
    "start": "660279",
    "end": "665680"
  },
  {
    "text": "connections on Port 22 we can get out potentially to our box on Port 22 and get data out that way but it requires a",
    "start": "665680",
    "end": "671920"
  },
  {
    "text": "separate Communication channel again open row Set uh which is you know runs",
    "start": "671920",
    "end": "677920"
  },
  {
    "text": "at the heart of uh Cesar's data Thief open road set will get a SQL Server a",
    "start": "677920",
    "end": "683600"
  },
  {
    "text": "Microsoft SQL Server to connect back out to us on you know a database communication channel uh s 1433 TCP 1433",
    "start": "683600",
    "end": "693079"
  },
  {
    "text": "and connect back out we can use xpor sendmail to email us the data that's an",
    "start": "693079",
    "end": "698600"
  },
  {
    "text": "out of band attack so let's now look at inference",
    "start": "698600",
    "end": "705839"
  },
  {
    "text": "attacks at the core of an inference attack is a",
    "start": "705839",
    "end": "711000"
  },
  {
    "text": "question does this is this condition me if so do one thing if the condition is",
    "start": "711000",
    "end": "716760"
  },
  {
    "text": "not met do another actually the SQL query will take actions based",
    "start": "716760",
    "end": "723079"
  },
  {
    "text": "upon the answer in other words can we go back to Chris an's time delay that he you know introduced in more advanced SQL",
    "start": "723079",
    "end": "730120"
  },
  {
    "text": "injection this is this is the text of um his his time delay method it relies on",
    "start": "730120",
    "end": "736000"
  },
  {
    "text": "the fact that SQL Server batches queries um so basically he's declaring a",
    "start": "736000",
    "end": "742959"
  },
  {
    "text": "a buffer at s he then selects DB name into that he then checks basically using",
    "start": "742959",
    "end": "749680"
  },
  {
    "text": "the sub substring function by extracting the first bite uh and checking the first",
    "start": "749680",
    "end": "755600"
  },
  {
    "text": "bit doing an uh a bitwise and operation on that to check whether the bit of the",
    "start": "755600",
    "end": "761639"
  },
  {
    "text": "first bite of the DB name function result is set or Not by iterating",
    "start": "761639",
    "end": "768199"
  },
  {
    "text": "through the bites and the bits from one to 1 to8 we can essentially determine using this",
    "start": "768199",
    "end": "775360"
  },
  {
    "text": "time delay um whether you know we we can want what the data is basically but",
    "start": "775360",
    "end": "781040"
  },
  {
    "text": "obviously there's a couple of problems um with this that need to be improved upon firstly it's a SQL Server type",
    "start": "781040",
    "end": "788079"
  },
  {
    "text": "because it relies on batching we need to find a way that doesn't rely on batching secondly there are time delays involved",
    "start": "788079",
    "end": "794000"
  },
  {
    "text": "and if you don't want to hang around then we need to improve [Music]",
    "start": "794000",
    "end": "800399"
  },
  {
    "text": "that as a few examples of what we could do uh as an inflence attack we could for",
    "start": "800399",
    "end": "806680"
  },
  {
    "text": "example use another time delay mechanism M um or alternatively we could generate",
    "start": "806680",
    "end": "813399"
  },
  {
    "text": "get the the web server to generate a 200 response if the bit's set or a 500",
    "start": "813399",
    "end": "819880"
  },
  {
    "text": "response if it's not set now that's an interesting one we we'll look at response variation you know by",
    "start": "819880",
    "end": "827199"
  },
  {
    "text": "requesting um one uh by requesting a web page with one",
    "start": "827199",
    "end": "832279"
  },
  {
    "text": "parameter and then with another parameter is there any variation in those two pages by using those",
    "start": "832279",
    "end": "838240"
  },
  {
    "text": "variations we can basically um use inference to determine whether a given bit was set or not and a wildly Sil",
    "start": "838240",
    "end": "846199"
  },
  {
    "text": "example we could if we s uh if we s fit basically have um the the logic of the",
    "start": "846199",
    "end": "854320"
  },
  {
    "text": "of the query basically connect out to um uh an SMTP server send them out to the",
    "start": "854320",
    "end": "861160"
  },
  {
    "text": "tax support department of you know some organization across in the United States wherever send one email saying please",
    "start": "861160",
    "end": "868399"
  },
  {
    "text": "you know contact me about my modem problem if the bit's set if the bit's not set send them Ma please contact me",
    "start": "868399",
    "end": "875199"
  },
  {
    "text": "on this telephone number about a monitor problem if I get a telephone call there a couple days later saying we're calling",
    "start": "875199",
    "end": "881800"
  },
  {
    "text": "about your mod problem I know the bit of the first bite was one you know it was",
    "start": "881800",
    "end": "886920"
  },
  {
    "text": "set so it's a really Sil example but it shows we're at Absolute Liberty to do whatever we want to do in",
    "start": "886920",
    "end": "894199"
  },
  {
    "text": "here so the way we get it to work with um all",
    "start": "894199",
    "end": "900399"
  },
  {
    "text": "uh mod rdbms's basically and avoiding the the batching problem is use a case statement and SQL you really quite",
    "start": "900399",
    "end": "907000"
  },
  {
    "text": "simple you do select case r condition whatever that condition is and it will",
    "start": "907000",
    "end": "912680"
  },
  {
    "text": "be using if this bit is set you know do one thing then do one thing else do",
    "start": "912680",
    "end": "918839"
  },
  {
    "text": "another end thing that's that's the core of a case [Music]",
    "start": "918839",
    "end": "926519"
  },
  {
    "text": "statement inference through web server response codes what we need to do is find a way of generating a query that",
    "start": "926600",
    "end": "933839"
  },
  {
    "text": "when it's compiled will not generate an error but will generate an err when the",
    "start": "933839",
    "end": "939199"
  },
  {
    "text": "given branch is executed so for example um when the conditions met return one if",
    "start": "939199",
    "end": "946880"
  },
  {
    "text": "it's not met do divide by zero one divided by Zer we all know you can't do that and that's going to you know cause",
    "start": "946880",
    "end": "953279"
  },
  {
    "text": "an error essentially that will compile fine on everything except M SQL uh which",
    "start": "953279",
    "end": "959480"
  },
  {
    "text": "we'll get to in a minute um sorry it will compile on everything but whether it returns an error or not is is another",
    "start": "959480",
    "end": "965279"
  },
  {
    "text": "man my CP will not return an error everyone else does um so we can ually",
    "start": "965279",
    "end": "970480"
  },
  {
    "text": "divide by zero uh and indeed that's the example we're going to use inally um on",
    "start": "970480",
    "end": "977839"
  },
  {
    "text": "actually we'll get to my in a [Music] minute um so continuing on web server",
    "start": "977839",
    "end": "984759"
  },
  {
    "text": "response codes um what's really well with SQL Server",
    "start": "984759",
    "end": "990839"
  },
  {
    "text": "Oracle in db2 my ask you have because it doesn't error it just returns null we can't",
    "start": "990839",
    "end": "997240"
  },
  {
    "text": "force the web server to generate a 500 response unfortunately the infx only be",
    "start": "997240",
    "end": "1002319"
  },
  {
    "text": "C driver so if you're doing this on a Windows system returns 200 even in the event of an error that's just one of the",
    "start": "1002319",
    "end": "1009000"
  },
  {
    "text": "Cs of the odbc um infix RBC driver uh another interesting thing about that is",
    "start": "1009000",
    "end": "1015120"
  },
  {
    "text": "if you put a single quote in it does some plasting before it sends to the database server and if it doesn't if",
    "start": "1015120",
    "end": "1021199"
  },
  {
    "text": "it's not VI SQL it will not send the query it will just return a general error so the informix OBC driver is you",
    "start": "1021199",
    "end": "1028798"
  },
  {
    "text": "know got its own rules and regulations essentially we also have to remember that we don't have to generate you know",
    "start": "1028799",
    "end": "1034959"
  },
  {
    "text": "the at generating an internal server error it could be uh on SQL injection we",
    "start": "1034959",
    "end": "1040160"
  },
  {
    "text": "are redirected to another page using a a 3 or2 redirect",
    "start": "1040160",
    "end": "1046000"
  },
  {
    "text": "um the uh plc module in Oracle application server will not generate a",
    "start": "1046000",
    "end": "1051720"
  },
  {
    "text": "500 internal server error it will return a 404 instead even though you know we",
    "start": "1051720",
    "end": "1057679"
  },
  {
    "text": "the we're getting the error um from the database server it's just more PC will",
    "start": "1057679",
    "end": "1062760"
  },
  {
    "text": "not return a 500 response it just returns a 400 response another problem with this is that it leaves a large",
    "start": "1062760",
    "end": "1068960"
  },
  {
    "text": "number of 500 responses in the log files if anyone is looking at you know their",
    "start": "1068960",
    "end": "1075600"
  },
  {
    "text": "uh log files they're going to Noti something's going on why are we getting all these like 500 response messages",
    "start": "1075600",
    "end": "1081360"
  },
  {
    "text": "they're going to dig deeper and say what the hell is all this squel doing in these query strings you know so um",
    "start": "1081360",
    "end": "1088000"
  },
  {
    "text": "that's one of the problems with using generating errors basically and but it's quick it's really",
    "start": "1088000",
    "end": "1094200"
  },
  {
    "text": "really quick you know we can get data um in no time at",
    "start": "1094200",
    "end": "1100320"
  },
  {
    "text": "all so because my SQL and um infinix",
    "start": "1101159",
    "end": "1106400"
  },
  {
    "text": "don't you know work well for us you know they they always return 200s uh we we",
    "start": "1106400",
    "end": "1112360"
  },
  {
    "text": "can't use that um as um a generic technique so we have to look at response",
    "start": "1112360",
    "end": "1118039"
  },
  {
    "text": "variations essentially uh the way we can do that is by parameter splitting and balancing which I'll discuss in a minute",
    "start": "1118039",
    "end": "1124200"
  },
  {
    "text": "this also avoids the 500 responses you know uh problem being in the L FS so",
    "start": "1124200",
    "end": "1130840"
  },
  {
    "text": "what do I mean by parameter splitting and balancing if I look at the word NGS software in",
    "start": "1130840",
    "end": "1136360"
  },
  {
    "text": "SQL these four statements uh these uh top four are equivalent so the top one",
    "start": "1136360",
    "end": "1143000"
  },
  {
    "text": "is for SQL Server the plus sign is used as a concatenator operator the double pump is the concatenator operator on",
    "start": "1143000",
    "end": "1150039"
  },
  {
    "text": "like Oracle uh db2 and infomix so we would use that instead on on those",
    "start": "1150039",
    "end": "1157120"
  },
  {
    "text": "versions um instead of saying MGS software um we",
    "start": "1157120",
    "end": "1163720"
  },
  {
    "text": "can do a subselect that returns R and then concatenate it with you know the uh",
    "start": "1163720",
    "end": "1169039"
  },
  {
    "text": "onto the NGS software and then stick the E on the end um and uh do the same for",
    "start": "1169039",
    "end": "1175600"
  },
  {
    "text": "SQL Server now here's here's what we're going to do if the bit's set we're going to return that that's going to you",
    "start": "1175600",
    "end": "1182840"
  },
  {
    "text": "know the the web response the web page will return one thing if the bit is not",
    "start": "1182840",
    "end": "1188480"
  },
  {
    "text": "set instead of returning R we'll return Zed so instead of it being NGS software",
    "start": "1188480",
    "end": "1193919"
  },
  {
    "text": "it will be NGS softw you know what softw you know what is is going to return an",
    "start": "1193919",
    "end": "1199640"
  },
  {
    "text": "entirely different page um so again we can do the same with numeric data if we",
    "start": "1199640",
    "end": "1205799"
  },
  {
    "text": "have a um a news. ASP or a news.php um application you know that takes an ID",
    "start": "1205799",
    "end": "1214200"
  },
  {
    "text": "ID equals two 1+ one will do fine 1 plus a subselect that returns one if the bit",
    "start": "1214200",
    "end": "1220799"
  },
  {
    "text": "set will return the same responses if it was two if it's not if the bit's not set",
    "start": "1220799",
    "end": "1226120"
  },
  {
    "text": "return zero that would be 1 plus 0 we're going to get an entirely different response so this way we're getting 200",
    "start": "1226120",
    "end": "1232240"
  },
  {
    "text": "responses but we're looking at the the differences in in the the web page to",
    "start": "1232240",
    "end": "1237440"
  },
  {
    "text": "determine whether the bits set or",
    "start": "1237440",
    "end": "1241840"
  },
  {
    "text": "not in trying to come up with a generic method if you're going to right at all which which I have done and and I'm not",
    "start": "1243760",
    "end": "1250600"
  },
  {
    "text": "happy with it so I'm not going to relase it today I'll release it um uh later on once I've finished uh you know getting",
    "start": "1250600",
    "end": "1256799"
  },
  {
    "text": "all the coding errors out and everything like that but to to find a generic method that's going to work with all rdbms's with",
    "start": "1256799",
    "end": "1264559"
  },
  {
    "text": "little or no modification uh we have to look at all different application",
    "start": "1264559",
    "end": "1269600"
  },
  {
    "text": "environments cold fusion management is the most annoying one um it converts",
    "start": "1269600",
    "end": "1274840"
  },
  {
    "text": "double quotes to amp sand quot semicolon converts Ampersand to amp sand amp",
    "start": "1274840",
    "end": "1281559"
  },
  {
    "text": "semicolon so that we can't use that like the bitwise um you know and operator in",
    "start": "1281559",
    "end": "1288720"
  },
  {
    "text": "server now uh it converts greater than signs to",
    "start": "1288720",
    "end": "1294159"
  },
  {
    "text": "you know amson GT and and less than so if we're trying to do some comparisons like if you know this data if this",
    "start": "1294159",
    "end": "1301360"
  },
  {
    "text": "condition is greater than one do one thing if this condition is less than one do another thing kind of thing um we",
    "start": "1301360",
    "end": "1307360"
  },
  {
    "text": "can't use that c man management will double up",
    "start": "1307360",
    "end": "1312720"
  },
  {
    "text": "single quotes which incidentally means that the attack Vector is usually going to be numeric but it just means that if",
    "start": "1312720",
    "end": "1318240"
  },
  {
    "text": "we're sending a query across with single quotes in it even in numeric uh injection areas um it's going to double",
    "start": "1318240",
    "end": "1324400"
  },
  {
    "text": "up our um quotes and and screw it over so we we can't have single quotes in our",
    "start": "1324400",
    "end": "1330520"
  },
  {
    "text": "uh query PHP often does the same thing uh doubles up sing quotes of mic quotes",
    "start": "1330520",
    "end": "1337000"
  },
  {
    "text": "are run so let's try and you know bypass these problems in a in a generic fashion",
    "start": "1337000",
    "end": "1342880"
  },
  {
    "text": "if we are going to be using the greater than sign at any point we know that CF f",
    "start": "1342880",
    "end": "1348679"
  },
  {
    "text": "m is going to turned that into absam GT before it sends to the database server so we need to find another way and we",
    "start": "1348679",
    "end": "1353840"
  },
  {
    "text": "can use between x and y basically it's it does the same task but avoids the the",
    "start": "1353840",
    "end": "1359720"
  },
  {
    "text": "greater than sign we we know that the ampan sign can be mangled as well so",
    "start": "1359720",
    "end": "1366440"
  },
  {
    "text": "instead of using the uh aband uh bitwise operator for things like SQL Server we",
    "start": "1366440",
    "end": "1373600"
  },
  {
    "text": "can use the exor um which isn't mangled by any app environment that I found so",
    "start": "1373600",
    "end": "1378640"
  },
  {
    "text": "unless of course someone customly in a custom way mangles it so the the reason that works is because if we say um a",
    "start": "1378640",
    "end": "1386600"
  },
  {
    "text": "exorb you know bet equals c if C is greater than a we know the bet is not",
    "start": "1386600",
    "end": "1392360"
  },
  {
    "text": "set if um C is less than a then we know that the bit is set so what we would say",
    "start": "1392360",
    "end": "1398480"
  },
  {
    "text": "is a ex or one aor two aor like four um 860 and so on um and if we we use the",
    "start": "1398480",
    "end": "1407279"
  },
  {
    "text": "between x and y basically to determine whether it's set or not to avoid single",
    "start": "1407279",
    "end": "1414400"
  },
  {
    "text": "quotes use the CH or CH functions so",
    "start": "1414400",
    "end": "1419600"
  },
  {
    "text": "Char 65 is converted to um an uppercase",
    "start": "1419600",
    "end": "1424910"
  },
  {
    "text": "[Music] a uh in incidentally infomix doesn't",
    "start": "1424910",
    "end": "1433120"
  },
  {
    "text": "support the uh actually it doesn't yeah it doesn't support char um and neither does it",
    "start": "1433120",
    "end": "1440559"
  },
  {
    "text": "support the asky function as well which is quite annoying as we'll see later [Music]",
    "start": "1440559",
    "end": "1446240"
  },
  {
    "text": "on so let's look at some um oh I'm missing numeric data I I'll connect that",
    "start": "1446240",
    "end": "1454080"
  },
  {
    "text": "in a minute so if we're injecting into um string data here's what we would do",
    "start": "1454080",
    "end": "1460480"
  },
  {
    "text": "um with SQL Server basically what's going on here is we have",
    "start": "1460480",
    "end": "1466159"
  },
  {
    "text": "a a subquery so could be select attap version which",
    "start": "1466159",
    "end": "1472960"
  },
  {
    "text": "goes in there the sub substring function basically we tell it which bite we're",
    "start": "1472960",
    "end": "1478799"
  },
  {
    "text": "interested in uh and return only one bite in length",
    "start": "1478799",
    "end": "1485120"
  },
  {
    "text": "we exore that with the bit that we're interested in uh then we do is it between zero and",
    "start": "1485120",
    "end": "1491799"
  },
  {
    "text": "the same number so we have to do the same subquery um you know and return the same",
    "start": "1491799",
    "end": "1497120"
  },
  {
    "text": "value and when remember we talked about parameter splitting and balancing unnown",
    "start": "1497120",
    "end": "1502600"
  },
  {
    "text": "value if we want an e returned then we put in here um what 65 uh 69 we put in",
    "start": "1502600",
    "end": "1511279"
  },
  {
    "text": "69 in there um if the bit is set of course if the",
    "start": "1511279",
    "end": "1516640"
  },
  {
    "text": "bit is not set then this Char one divided by zero is going to execute which is going to generate our internal",
    "start": "1516640",
    "end": "1523120"
  },
  {
    "text": "server error and you can see here you know we're using the plus as the concatenator",
    "start": "1523120",
    "end": "1529720"
  },
  {
    "text": "operat and this is the single quote and we need to close it up at the other end as [Music]",
    "start": "1529720",
    "end": "1537829"
  },
  {
    "text": "well with Oracle when we're de well there should have been a SQL Ser in new America as well by the way that's why um",
    "start": "1539679",
    "end": "1546360"
  },
  {
    "text": "I'll have to WR that at the end if we're doing um Oracle if we're injecting into",
    "start": "1546360",
    "end": "1552480"
  },
  {
    "text": "a numeric field again we're using something very similar we have the substra function which is the equivalent",
    "start": "1552480",
    "end": "1560440"
  },
  {
    "text": "on of substring on SQL Server we again do our sub query we take the first you",
    "start": "1560440",
    "end": "1566799"
  },
  {
    "text": "know whatever bike we're interested in convert it to a numeric field use the",
    "start": "1566799",
    "end": "1572720"
  },
  {
    "text": "bit and um function this is an undocumented function uh use the bit and",
    "start": "1572720",
    "end": "1578559"
  },
  {
    "text": "function uh to determine whether the bit is set or not it's just does a bit bit",
    "start": "1578559",
    "end": "1583760"
  },
  {
    "text": "wise and operation so if it's between uh 1 and 255 then return zero um else do",
    "start": "1583760",
    "end": "1591760"
  },
  {
    "text": "the um excuse me else do the uh divide",
    "start": "1591760",
    "end": "1597080"
  },
  {
    "text": "by zero string data essentially be doing the same thing um but obviously we need",
    "start": "1597080",
    "end": "1605279"
  },
  {
    "text": "to use concatenation operators and put the single quotes in of course the only difference is uh we again we're",
    "start": "1605279",
    "end": "1612520"
  },
  {
    "text": "introducing the TR known value um assuming the known value is e we we put",
    "start": "1612520",
    "end": "1617600"
  },
  {
    "text": "in there 60 [Music]",
    "start": "1617600",
    "end": "1622599"
  },
  {
    "text": "9 with my SQL we're going to have to because we we",
    "start": "1624159",
    "end": "1630279"
  },
  {
    "text": "can't get it to generate an error actually no we",
    "start": "1630279",
    "end": "1635720"
  },
  {
    "text": "can but it relies on having the file privilege and if you've got the file privilege um you can do much more",
    "start": "1635720",
    "end": "1643480"
  },
  {
    "text": "interesting things you know and generally you don't have it in in a in a well you know a sem secure that you're",
    "start": "1643480",
    "end": "1650279"
  },
  {
    "text": "not going to have the file privilege but essentially what you do is um you know use a file on on any of the the file",
    "start": "1650279",
    "end": "1657520"
  },
  {
    "text": "functions that doesn't exist at compile time that goes through fine but because the file doesn't exist that's going to generate an error on execution time but",
    "start": "1657520",
    "end": "1665960"
  },
  {
    "text": "on the working on the assumption that we do not have access to any of the file",
    "start": "1665960",
    "end": "1671000"
  },
  {
    "text": "functions uh we we uh use page variation uh responses here and again it's very",
    "start": "1671000",
    "end": "1677519"
  },
  {
    "text": "similar uh we use the substring function the asky function um using the exor",
    "start": "1677519",
    "end": "1683880"
  },
  {
    "text": "operator here um and do the same thing you know it's it's the same technique",
    "start": "1683880",
    "end": "1689480"
  },
  {
    "text": "basically with slight variations string data again here's here's an interesting",
    "start": "1689480",
    "end": "1694760"
  },
  {
    "text": "one for you um the plus um operator doesn't work in the same way as it does",
    "start": "1694760",
    "end": "1701080"
  },
  {
    "text": "on SQL Server if I say plus z um on a",
    "start": "1701080",
    "end": "1706880"
  },
  {
    "text": "string it will return all record sets um and if I say plus one it returns",
    "start": "1706880",
    "end": "1715600"
  },
  {
    "text": "no record sets so I think it's doing some kind of evaluation of is it true or",
    "start": "1715600",
    "end": "1721039"
  },
  {
    "text": "not um so it will be like Select Staff from table where 1 equals 1 well that's true so it returns everything um Select",
    "start": "1721039",
    "end": "1728519"
  },
  {
    "text": "Staff on table where 1 equals zero is false so nothing's returned I think it's working on that principle uh I haven't L",
    "start": "1728519",
    "end": "1734480"
  },
  {
    "text": "looked at the source code to work out what's going on you don't really need to know as far as this is concerned all we",
    "start": "1734480",
    "end": "1740279"
  },
  {
    "text": "need to know is that's how it you know that's how it works um",
    "start": "1740279",
    "end": "1746120"
  },
  {
    "text": "so with string de we just you know add zero to the end of it um if the bit set",
    "start": "1746120",
    "end": "1753600"
  },
  {
    "text": "if it's not set add one and we we we check whether a record set is returned",
    "start": "1753600",
    "end": "1759840"
  },
  {
    "text": "or not now infix remember I said that it doesn't support um the asy function the asky",
    "start": "1759840",
    "end": "1767519"
  },
  {
    "text": "function in is available in in most rdbms's um and basically it takes a",
    "start": "1767519",
    "end": "1773840"
  },
  {
    "text": "character and converts it to its um decimal equivalent",
    "start": "1773840",
    "end": "1780960"
  },
  {
    "text": "um because it does its product we have to do you know our own version in line",
    "start": "1780960",
    "end": "1787039"
  },
  {
    "text": "of an asky statement we we have to check you know the number and you know the U",
    "start": "1787039",
    "end": "1793240"
  },
  {
    "text": "the letter and basically say if it matches this give me back you know 69 and then",
    "start": "1793240",
    "end": "1798640"
  },
  {
    "text": "inject that into the rest of your query and so on uh what what I found",
    "start": "1798640",
    "end": "1803919"
  },
  {
    "text": "interesting is is that infx supports the bit Val function you know something is",
    "start": "1803919",
    "end": "1810279"
  },
  {
    "text": "as deep and interesting as manipulating bits but it doesn't support something as simple as a a TR or an asky",
    "start": "1810279",
    "end": "1817800"
  },
  {
    "text": "[Music] function and again uh it uses the uh",
    "start": "1817800",
    "end": "1825799"
  },
  {
    "text": "double pipes con nature as opposed to [Music]",
    "start": "1825799",
    "end": "1831240"
  },
  {
    "text": "plus so I'm going to show you uh this in operation I just need to",
    "start": "1831240",
    "end": "1838559"
  },
  {
    "text": "switch computers",
    "start": "1838559",
    "end": "1842240"
  },
  {
    "text": "not right",
    "start": "1853960",
    "end": "1857960"
  },
  {
    "text": "come",
    "start": "1865480",
    "end": "1867639"
  },
  {
    "text": "on right I tell you what I'm just going to shut down and restart this because it was in suspend mode and I'm",
    "start": "1877080",
    "end": "1884399"
  },
  {
    "text": "wondering if that's disabling the LCD function um so I'm going to restart it",
    "start": "1884399",
    "end": "1889840"
  },
  {
    "text": "um and take questions if there are any whilst it's",
    "start": "1889840",
    "end": "1897158"
  },
  {
    "text": "[Music] rebooting so are there any excuse me are",
    "start": "1907730",
    "end": "1916000"
  },
  {
    "text": "there any questions at this stage of the game L I'm waiting on this",
    "start": "1916000",
    "end": "1920760"
  },
  {
    "text": "rebooting no questions how much long do we have to go",
    "start": "1923039",
    "end": "1929960"
  },
  {
    "text": "by the way 14 minutes 14 1 4 4",
    "start": "1929960",
    "end": "1938600"
  },
  {
    "text": "Z zip through that one quickly didn't we you have question in the",
    "start": "1938720",
    "end": "1945880"
  },
  {
    "text": "back what do you think of um I for example the fact that um there are",
    "start": "1945880",
    "end": "1955720"
  },
  {
    "text": "[Music]",
    "start": "1957500",
    "end": "1960819"
  },
  {
    "text": "manys by want to Ms",
    "start": "1963279",
    "end": "1968519"
  },
  {
    "text": "server I play [Music]",
    "start": "1968519",
    "end": "1974329"
  },
  {
    "text": "make those prop here we do something yeah you can",
    "start": "1978399",
    "end": "1987039"
  },
  {
    "text": "um yeah right um let's say you're looking for the string but I'll just",
    "start": "1987720",
    "end": "1995720"
  },
  {
    "text": "just in case uh people didn't have the question it's essentially um actually if I had the question I'm sure everyone else had the",
    "start": "1995720",
    "end": "2001639"
  },
  {
    "text": "question that's silly um if you're also looking for this uh",
    "start": "2001639",
    "end": "2007000"
  },
  {
    "text": "string X CMD shell and and relying on",
    "start": "2007000",
    "end": "2012240"
  },
  {
    "text": "that then yeah it's game because if we're exec arbit SQL we can execute arbitary tsql and I can encode in any",
    "start": "2012240",
    "end": "2021120"
  },
  {
    "text": "way I see fit in an infinite number of ways the word xpor CMD shell you know I",
    "start": "2021120",
    "end": "2027720"
  },
  {
    "text": "can say exor it with um 67 and then like subtract from each you",
    "start": "2027720",
    "end": "2035320"
  },
  {
    "text": "know bite of the string uh the number 10 and DX Y and Z then we're left with",
    "start": "2035320",
    "end": "2040960"
  },
  {
    "text": "exponent score CMD shell um as our final result which we can then just embed",
    "start": "2040960",
    "end": "2046200"
  },
  {
    "text": "within an exact statement kind of thing remember that's you know we're dealing with a programmable system here",
    "start": "2046200",
    "end": "2052480"
  },
  {
    "text": "unfortunately um it depends on what keyword are being looks for as well if you're looking for um",
    "start": "2052480",
    "end": "2059760"
  },
  {
    "text": "select um then you can potentially encode it in",
    "start": "2059760",
    "end": "2065158"
  },
  {
    "text": "certain ways or if you're looking for a single quote [Music] um I'm just trying I'm just trying to",
    "start": "2065159",
    "end": "2072800"
  },
  {
    "text": "think of I've got a good uh example of this a single quote can be encoded in a number of different ways for example",
    "start": "2072800",
    "end": "2079520"
  },
  {
    "text": "percent 27 percent u0027 percent FF um sorry percent U FF",
    "start": "2079520",
    "end": "2087560"
  },
  {
    "text": "EF I think is converted to a single quote percent uh U to be something or",
    "start": "2087560",
    "end": "2093878"
  },
  {
    "text": "other is converted to a single quote so if your IDS system isn't looking for those kind of variations then that's",
    "start": "2093879",
    "end": "2100040"
  },
  {
    "text": "going to get through um in pver wrote a really good paper on well in response to",
    "start": "2100040",
    "end": "2108720"
  },
  {
    "text": "um Mr K mahoni I think his name is for an",
    "start": "2108720",
    "end": "2113960"
  },
  {
    "text": "Indian company uh he he wrote a paper on you know IDs signatures for SQL",
    "start": "2113960",
    "end": "2120320"
  },
  {
    "text": "injection and in response to that and per work paper saying it's Folly to even attempt to do so um so what",
    "start": "2120320",
    "end": "2128240"
  },
  {
    "text": "that's that's a good uh authoritative uh paper to read on that one interesting",
    "start": "2128240",
    "end": "2134079"
  },
  {
    "text": "thing is some people remove strings you know bad strings from a query before",
    "start": "2134079",
    "end": "2140240"
  },
  {
    "text": "sending it across so if the usual input contains the word select they'll strip it out you know they'll use replace and",
    "start": "2140240",
    "end": "2147320"
  },
  {
    "text": "replace it with nothing uh Chris anley came up with an interesting way of bypass and that and that's submitting",
    "start": "2147320",
    "end": "2153240"
  },
  {
    "text": "sell select act so when they strip out select what's you're left with is the",
    "start": "2153240",
    "end": "2158640"
  },
  {
    "text": "word select and that gets through kind of thing you know obviously if they're just you know putting it through one",
    "start": "2158640",
    "end": "2163880"
  },
  {
    "text": "pass just give us a sec here um the thing",
    "start": "2163880",
    "end": "2172440"
  },
  {
    "text": "is is it worth you know doing it it it might be worth adding idea signatures",
    "start": "2172440",
    "end": "2179000"
  },
  {
    "text": "simply because um it's going to catch script kites you",
    "start": "2179000",
    "end": "2185280"
  },
  {
    "text": "know people who aren't attempting to evade it so it might be worth the effort I would",
    "start": "2185280",
    "end": "2193400"
  },
  {
    "text": "say if you're going to spend that kind of time and money just fix your application you",
    "start": "2193400",
    "end": "2199720"
  },
  {
    "text": "know all",
    "start": "2200359",
    "end": "2203640"
  },
  {
    "text": "right just need to change the screen s",
    "start": "2209760",
    "end": "2214960"
  },
  {
    "text": "go",
    "start": "2233880",
    "end": "2236880"
  },
  {
    "text": "this is the tool that I'm not going to release today but once I've you know finished it then I",
    "start": "2250480",
    "end": "2255839"
  },
  {
    "text": "will okay uh let's do that and",
    "start": "2255839",
    "end": "2263720"
  },
  {
    "text": "open",
    "start": "2263839",
    "end": "2266839"
  },
  {
    "text": "w so this basically here let me increase the font size",
    "start": "2270640",
    "end": "2277838"
  },
  {
    "text": "this basically here is the request we're making um the uh application you know the",
    "start": "2282440",
    "end": "2290200"
  },
  {
    "text": "program uh called SQL injector surprisingly uh basically looks for this",
    "start": "2290200",
    "end": "2295599"
  },
  {
    "text": "in your request uh and replaces that with um the attack basically that's you",
    "start": "2295599",
    "end": "2302119"
  },
  {
    "text": "know that's where the valuable that's where the vector lies basically",
    "start": "2302119",
    "end": "2307960"
  },
  {
    "text": "um so if we run this there's certain um things it can do at the moment like uh",
    "start": "2307960",
    "end": "2314880"
  },
  {
    "text": "work out what the the database server is on on the back end um you would specify",
    "start": "2314880",
    "end": "2320440"
  },
  {
    "text": "minus a which stands for Action as as database and it'll go and look for what kind of databases but as we're injecting",
    "start": "2320440",
    "end": "2327040"
  },
  {
    "text": "into a as part of the wear Clause here um that's the action where we're going",
    "start": "2327040",
    "end": "2332680"
  },
  {
    "text": "to inject in a Weare Clause sis objects is a known value that works you know we get our data back um having worked out",
    "start": "2332680",
    "end": "2341640"
  },
  {
    "text": "that it's an mssql box on the back end you know using the database function um",
    "start": "2341640",
    "end": "2346720"
  },
  {
    "text": "we insert here that the good code we're looking for the good um response com",
    "start": "2346720",
    "end": "2352560"
  },
  {
    "text": "from the web server is 2 200 the error code is 500 um this is the text file",
    "start": "2352560",
    "end": "2358240"
  },
  {
    "text": "that contains our request and because I'm running this locally um and the socket's not timing up because um",
    "start": "2358240",
    "end": "2368040"
  },
  {
    "text": "because it's crap um I have to specify a time out so this is now running and it's",
    "start": "2368040",
    "end": "2376400"
  },
  {
    "text": "basically doing what we discussed in",
    "start": "2376400",
    "end": "2380279"
  },
  {
    "text": "here what's going on here right uh this I put a default query in for each of",
    "start": "2381440",
    "end": "2387280"
  },
  {
    "text": "them um we get the database version back um if you don't specify your own query",
    "start": "2387280",
    "end": "2393680"
  },
  {
    "text": "which you can do with a a query file minus qf uh you can basically uh it uses",
    "start": "2393680",
    "end": "2398800"
  },
  {
    "text": "the default one um so it's just banging away for each B",
    "start": "2398800",
    "end": "2404920"
  },
  {
    "text": "we have to make um eight requests essentially working on the assumption that we're not just dealing with um you",
    "start": "2404920",
    "end": "2413359"
  },
  {
    "text": "know asky data we assuming that one of the bites might have the most significant bit set we have to request",
    "start": "2413359",
    "end": "2418839"
  },
  {
    "text": "the eighth you know bit essentially if we can guarantee that um the",
    "start": "2418839",
    "end": "2427720"
  },
  {
    "text": "uh the the data is asking in nature then",
    "start": "2428119",
    "end": "2433359"
  },
  {
    "text": "we don't have to ask for the E bit and we assume it's we we can assume it's zero so again you you're making some",
    "start": "2433359",
    "end": "2439240"
  },
  {
    "text": "time savings there so whilst this is going on in the",
    "start": "2439240",
    "end": "2444680"
  },
  {
    "text": "background is are there any other questions at",
    "start": "2444680",
    "end": "2449559"
  },
  {
    "text": "all got about 36 minutes by my",
    "start": "2449800",
    "end": "2455160"
  },
  {
    "text": "Reckoning yep through uh having had this conversation",
    "start": "2455160",
    "end": "2461680"
  },
  {
    "text": "with you before yes but thank you for the question uh yeah it can be speeded up um one of the things with uh time",
    "start": "2461680",
    "end": "2470530"
  },
  {
    "text": "[Music] delays is by making multiple requests in",
    "start": "2470530",
    "end": "2476280"
  },
  {
    "text": "a mul threaded situation you can actually be causing delay simply because of the load um be because there is we're",
    "start": "2476280",
    "end": "2483960"
  },
  {
    "text": "not um waiting on any time delays uh it can take as long as it you know needs",
    "start": "2483960",
    "end": "2491079"
  },
  {
    "text": "um to to come back so we're not going to be that results aren't going to be sked so yeah we could if we wanted to um have",
    "start": "2491079",
    "end": "2498440"
  },
  {
    "text": "four threads running here and each thread request the you know the the nth",
    "start": "2498440",
    "end": "2504520"
  },
  {
    "text": "bit so uh sorry the uh nth bite and eight you know threads whatever",
    "start": "2504520",
    "end": "2512560"
  },
  {
    "text": "kind of thing so yeah it could be uh optimized in uh you know threaded",
    "start": "2512560",
    "end": "2518200"
  },
  {
    "text": "situation but this at the moment is not using you it's a single threaded app at",
    "start": "2518200",
    "end": "2523880"
  },
  {
    "text": "the moment you got another good question",
    "start": "2523880",
    "end": "2529599"
  },
  {
    "text": "G",
    "start": "2530200",
    "end": "2533200"
  },
  {
    "text": "[Music] that exactly the same thing or the plus",
    "start": "2535310",
    "end": "2543839"
  },
  {
    "text": "and the P would that be enough to stop um",
    "start": "2543839",
    "end": "2550240"
  },
  {
    "text": "no well it would stop them as as they currently are um but instead of using",
    "start": "2550240",
    "end": "2557200"
  },
  {
    "text": "like the p p you could possibly use like the concat function kind of thing so",
    "start": "2557200",
    "end": "2562880"
  },
  {
    "text": "again I mean I haven't sat down and and Ru out but I'm I'm sure that given you",
    "start": "2562880",
    "end": "2568040"
  },
  {
    "text": "enough time you could work out a way of doing it um I mean as it happens you're having to encode V plus anyway is",
    "start": "2568040",
    "end": "2574040"
  },
  {
    "text": "percent 2B because the web server will treat a plus sign obviously as a space",
    "start": "2574040",
    "end": "2579720"
  },
  {
    "text": "um and that will be converted to a space as part of the query so if you mean plus you know as it as an addition operator",
    "start": "2579720",
    "end": "2586520"
  },
  {
    "text": "then you send that across as plus UHC 2B anyway and the same with an equal sign if if there's an equal sign then there",
    "start": "2586520",
    "end": "2593280"
  },
  {
    "text": "then convert that to percent 3D as well and so on but yeah so it's an",
    "start": "2593280",
    "end": "2598839"
  },
  {
    "text": "interesting question if we um take all you know text whether you know all or G",
    "start": "2598839",
    "end": "2607440"
  },
  {
    "text": "text and and convert it to its like HTML friendly equivalent would it stop it",
    "start": "2607440",
    "end": "2614440"
  },
  {
    "text": "probably you know who knows I I don't have an answer it sounds like it will",
    "start": "2614440",
    "end": "2619920"
  },
  {
    "text": "but then you could possibly B pass it sure um since we' got a bit of time",
    "start": "2619920",
    "end": "2629000"
  },
  {
    "text": "um are there any sort of in detection s of systems that are being developed or they're already there to help pick up on",
    "start": "2629000",
    "end": "2635359"
  },
  {
    "text": "these sorts of types of attacks well there are whether there are any good in it is is another question I don't",
    "start": "2635359",
    "end": "2643200"
  },
  {
    "text": "think database IPS is robust enough to stop a determined wely attacker at this",
    "start": "2643200",
    "end": "2650599"
  },
  {
    "text": "stage of the game to be honest though um the best IPS you can get for a database",
    "start": "2650599",
    "end": "2656040"
  },
  {
    "text": "server is stick some kind of middle W Front and put business Logic on there",
    "start": "2656040",
    "end": "2661520"
  },
  {
    "text": "you know and the business logic says you know this is the queries we run and people can insert you know using bind",
    "start": "2661520",
    "end": "2668280"
  },
  {
    "text": "variables these are this is what people can do to me that is the best kind of ips you can get it's like they can't",
    "start": "2668280",
    "end": "2674760"
  },
  {
    "text": "access the database server directly they have to go through this app which we know is not vulnerable to SQL injection because we're using bind variables they",
    "start": "2674760",
    "end": "2681800"
  },
  {
    "text": "can't run a query an arit query like select star from DBA users because the",
    "start": "2681800",
    "end": "2688000"
  },
  {
    "text": "bus business logic doesn't do that there's nothing in the the business logic that does such a query you know so",
    "start": "2688000",
    "end": "2694119"
  },
  {
    "text": "to me that's the best kind of um I IPS you know system for database servers",
    "start": "2694119",
    "end": "2699880"
  },
  {
    "text": "just stick business logic in front of it that and force everyone to go through that logic has there been prevalence of",
    "start": "2699880",
    "end": "2706319"
  },
  {
    "text": "internal users trying these sorts of uh attacks on internal databases I",
    "start": "2706319",
    "end": "2712839"
  },
  {
    "text": "um well internal attackers can usually get direct access to the database anyway and have don't have to do this um this",
    "start": "2712839",
    "end": "2719599"
  },
  {
    "text": "might be useful in terms of anonymizing it and going through the account defined on the application you know um but then",
    "start": "2719599",
    "end": "2727400"
  },
  {
    "text": "again you you rarely hear of Insider attacks because they're always covered up or they're not even discovered you",
    "start": "2727400",
    "end": "2733240"
  },
  {
    "text": "know so i' I've got no data either way on that unfortunately I was just thinking in",
    "start": "2733240",
    "end": "2738880"
  },
  {
    "text": "terms of linking it with the um uh and how would you uh I suppose you could run",
    "start": "2738880",
    "end": "2744440"
  },
  {
    "text": "the same sort of middleware or that's that's what I'm saying you you stuck your your database server in the deepest darkest corner of your network and in",
    "start": "2744440",
    "end": "2750720"
  },
  {
    "text": "front of that the only route to that is through the middleware basically you know and problem solved if if the DBA",
    "start": "2750720",
    "end": "2758359"
  },
  {
    "text": "wants to do anything he goes up to the console you know or you know SSH is in or something like that but you cannot",
    "start": "2758359",
    "end": "2764960"
  },
  {
    "text": "get direct access to the database Services you know so as you can see it's quite merely",
    "start": "2764960",
    "end": "2770960"
  },
  {
    "text": "chugging away um dumping the results of Select version let's actually look at",
    "start": "2770960",
    "end": "2777640"
  },
  {
    "text": "the log file as well because that um incidentally if um you're",
    "start": "2777640",
    "end": "2784680"
  },
  {
    "text": "injecting into say a post uh you know parameter the um post data um",
    "start": "2784680",
    "end": "2791319"
  },
  {
    "text": "generally post data is not logged M query strings are post dat is not so um",
    "start": "2791319",
    "end": "2797640"
  },
  {
    "text": "you know these attacks can often go unnoticed um see",
    "start": "2797640",
    "end": "2804440"
  },
  {
    "text": "[Music]",
    "start": "2808750",
    "end": "2811900"
  },
  {
    "text": "so as you can see we're not actually generating you know logging the qu string here it's not loged by default um",
    "start": "2837960",
    "end": "2843839"
  },
  {
    "text": "but you can see all these 500 200 responses so if you're seeing something like this you know in log files you've",
    "start": "2843839",
    "end": "2850760"
  },
  {
    "text": "got to question what the hell is going on here you know look at the time",
    "start": "2850760",
    "end": "2857240"
  },
  {
    "text": "stamps same request different",
    "start": "2857480",
    "end": "2862160"
  },
  {
    "text": "responses I mean there's no point in you know getting it all up but as we can see um what version of super",
    "start": "2868160",
    "end": "2875839"
  },
  {
    "text": "server how we ex which ASP was attacking and which by the the request file that I",
    "start": "2875839",
    "end": "2883280"
  },
  {
    "text": "specified if we go to the with the Min option I'll say this is",
    "start": "2883280",
    "end": "2888800"
  },
  {
    "text": "the this file contains the web request which is that",
    "start": "2888800",
    "end": "2894240"
  },
  {
    "text": "basically and we you know the code basically looks for that string there",
    "start": "2894240",
    "end": "2901079"
  },
  {
    "text": "and replaces that with the uh the name text that works which ass CIS objects so",
    "start": "2901079",
    "end": "2908359"
  },
  {
    "text": "we take that out we actually show you this in operation [Music]",
    "start": "2908359",
    "end": "2916359"
  },
  {
    "text": "um so all that's doing is doing um select name from CIS objects where name",
    "start": "2922880",
    "end": "2930280"
  },
  {
    "text": "equals user input um so going back to",
    "start": "2930280",
    "end": "2935720"
  },
  {
    "text": "what I was saying earlier I could go percent 2B single quote",
    "start": "2935720",
    "end": "2941119"
  },
  {
    "text": "here you know and it still returns so that's essentially what I'm I'm I'm doing here I take this bar here replace",
    "start": "2941119",
    "end": "2950960"
  },
  {
    "text": "that the um replace that with CIS objects and then split the word CIS",
    "start": "2950960",
    "end": "2957960"
  },
  {
    "text": "objects here and put in my",
    "start": "2957960",
    "end": "2963799"
  },
  {
    "text": "subquery and if the bit set um return s yeah if the bit is not set",
    "start": "2963799",
    "end": "2972280"
  },
  {
    "text": "return like Char 1 divided by Z that's causing the internal server error so that's what we're doing essentially with",
    "start": "2972280",
    "end": "2978319"
  },
  {
    "text": "that we we we read that press in the name text and then inject into",
    "start": "2978319",
    "end": "2983750"
  },
  {
    "text": "[Music] that excuse me sure um here you're",
    "start": "2983750",
    "end": "2989480"
  },
  {
    "text": "you're assuming that you're going to get like a 500 uh server error um have you",
    "start": "2989480",
    "end": "2995160"
  },
  {
    "text": "thought about like uh any like no I'm not assuming that what I'm doing is having hacked the",
    "start": "2995160",
    "end": "3000960"
  },
  {
    "text": "application around I know that if I put in um DX Y and Zed I can generate an",
    "start": "3000960",
    "end": "3006400"
  },
  {
    "text": "internal server error if it was a if I was screwing around with this and I saw that it was redirecting me to like",
    "start": "3006400",
    "end": "3012200"
  },
  {
    "text": "another page instead of doing 500 I would put EC equals 30 or2 whatever the",
    "start": "3012200",
    "end": "3017920"
  },
  {
    "text": "I mean sometimes depending upon the application the error code is 200 and you have to put that in you know so so",
    "start": "3017920",
    "end": "3025200"
  },
  {
    "text": "you're not assuming that it is know it is you know the S difference so well",
    "start": "3025200",
    "end": "3030559"
  },
  {
    "text": "does that you just my question was about to say like what right yeah thank",
    "start": "3030559",
    "end": "3038480"
  },
  {
    "text": "you so as as no more questions I think we give you guys an extended",
    "start": "3038480",
    "end": "3045799"
  },
  {
    "text": "break oh so one more question at the back you R through a",
    "start": "3045799",
    "end": "3051720"
  },
  {
    "text": "sample understanding exactly",
    "start": "3051720",
    "end": "3056119"
  },
  {
    "text": "okay right so here is a um I I don't think you guys can",
    "start": "3059680",
    "end": "3066880"
  },
  {
    "text": "probably read that at the back so what it says is uh http1 127.0 Z1",
    "start": "3066880",
    "end": "3072799"
  },
  {
    "text": "URL uh SQL Server obsp question mark object equals user input if I put a",
    "start": "3072799",
    "end": "3078799"
  },
  {
    "text": "single quote in here I'm I'm getting uh the page cannot be displayed unclos quotation mark",
    "start": "3078799",
    "end": "3086599"
  },
  {
    "text": "before the character string CIS object quote quote kind of thing so I know this app is vulnerable to SQL",
    "start": "3086599",
    "end": "3092440"
  },
  {
    "text": "injection um having assuming I didn't get that nice error message I just got there was a problem please contact the",
    "start": "3092440",
    "end": "3098799"
  },
  {
    "text": "system administrator I'm I'm going to probe and say well why is it doing that so I'm going to say like well I know CIS",
    "start": "3098799",
    "end": "3105599"
  },
  {
    "text": "objects Returns the text CIS objects in the data so if I go sis you know take",
    "start": "3105599",
    "end": "3113280"
  },
  {
    "text": "off the S of the off the end and go CIS object T it returns nothing so I'm then",
    "start": "3113280",
    "end": "3120240"
  },
  {
    "text": "going to go percent 2B you know plus in other words and stick s on the end so that if",
    "start": "3120240",
    "end": "3129079"
  },
  {
    "text": "it's SQL injection uh that is going to be the if I'm injecting into SQL that will be",
    "start": "3129079",
    "end": "3135319"
  },
  {
    "text": "executed as the concatenation operator you know and add the S onto the end of CIS object and return",
    "start": "3135319",
    "end": "3142799"
  },
  {
    "text": "data so I now know that's you know avable to Super",
    "start": "3142799",
    "end": "3148200"
  },
  {
    "text": "injection um and to work out whether it's",
    "start": "3148200",
    "end": "3154680"
  },
  {
    "text": "um you know a uh an SQL server on the back end I could",
    "start": "3154680",
    "end": "3161880"
  },
  {
    "text": "go uh select at version as a sub select",
    "start": "3161880",
    "end": "3169119"
  },
  {
    "text": "basically and then add that on to the end of the the process",
    "start": "3169119",
    "end": "3175240"
  },
  {
    "text": "it doesn't return anything but the fact that it returned if I do select at something",
    "start": "3176760",
    "end": "3185599"
  },
  {
    "text": "else or select Fubar whatever I'm going to get an error um and regardless of",
    "start": "3185599",
    "end": "3191640"
  },
  {
    "text": "what this error text is assuming it just says the page cannot be displayed and ignore the nice you know text down",
    "start": "3191640",
    "end": "3198920"
  },
  {
    "text": "here um the fact that it you know I got as 200 response or be it no X was",
    "start": "3198920",
    "end": "3207000"
  },
  {
    "text": "returned when I did select attap version that says to me that it's either running my SQL or SQL Server because we know",
    "start": "3207000",
    "end": "3215200"
  },
  {
    "text": "that works both with SQL server and MySQL and we can put in if if that",
    "start": "3215200",
    "end": "3221599"
  },
  {
    "text": "doesn't return we can then put in say um a function that we know exists on Oracle",
    "start": "3221599",
    "end": "3226799"
  },
  {
    "text": "and nothing else um and if that returns then we know it's an oracle back end and",
    "start": "3226799",
    "end": "3232119"
  },
  {
    "text": "so on but the point is within here this is where we're doing um our inference",
    "start": "3232119",
    "end": "3240000"
  },
  {
    "text": "attack we split the the known parameter which is CIS objects we split that into CIS",
    "start": "3240000",
    "end": "3247520"
  },
  {
    "text": "object and the S well actually we take off the S we we split it into you know CIS object and a",
    "start": "3247520",
    "end": "3258440"
  },
  {
    "text": "subquery that has a case statement in it and it will return the S if the bit is",
    "start": "3258440",
    "end": "3264200"
  },
  {
    "text": "set and it will return um a divide by zero if the if the bit's not set so we",
    "start": "3264200",
    "end": "3270599"
  },
  {
    "text": "can look at that and say it's now you know it's vulnerable secet injection we inject our sub you know Sub sub select",
    "start": "3270599",
    "end": "3279079"
  },
  {
    "text": "in there with our case statement it does the processing it checks whether the bit set or not and by in looking at the",
    "start": "3279079",
    "end": "3285720"
  },
  {
    "text": "server response we can infer from that whether the bit was set or not um",
    "start": "3285720",
    "end": "3292400"
  },
  {
    "text": "talking about inference again and in line and U sorry INB out of band attex",
    "start": "3292400",
    "end": "3298200"
  },
  {
    "text": "with inference there is no direct transfer of data across the network in any formal fashion we're looking at a",
    "start": "3298200",
    "end": "3304960"
  },
  {
    "text": "property of of the response of a given query to determine whether it is of course with inband and out of band",
    "start": "3304960",
    "end": "3311480"
  },
  {
    "text": "attacks there is an actual transfer of data so um it's just uh an another",
    "start": "3311480",
    "end": "3319400"
  },
  {
    "text": "interesting way of looking at the differences between inband out band and and inference attacks so did did that",
    "start": "3319400",
    "end": "3325960"
  },
  {
    "text": "answer you question in terms of the attack Factor yes I AER you would you go after",
    "start": "3325960",
    "end": "3332000"
  },
  {
    "text": "say your your tabl try enumerate enate table names oh yeah whatever whatever",
    "start": "3332000",
    "end": "3338319"
  },
  {
    "text": "you want to do um once once you found your you know your attack Vector the payload Vector is is entirely up to you",
    "start": "3338319",
    "end": "3345640"
  },
  {
    "text": "the default query in the tool basically does select attack version for SQL Server it does um select Min Banner from",
    "start": "3345640",
    "end": "3357319"
  },
  {
    "text": "uh the do sign version in in Oracle which again Returns the version",
    "start": "3357319",
    "end": "3363520"
  },
  {
    "text": "information let's have a look uh I can tell you what each",
    "start": "3363520",
    "end": "3372119"
  },
  {
    "text": "does it's a horrible bit of code before I I publish it I want to you know to tied it up basically and comment it",
    "start": "3373119",
    "end": "3379640"
  },
  {
    "text": "because I understand what's going on but anyone else is probably going to look at that and say what the hell is he doing there you know okay so SQL Server would",
    "start": "3379640",
    "end": "3387680"
  },
  {
    "text": "be select atap version select Banner from V dollar version for Oracle IBM db2 there's no way that I",
    "start": "3387680",
    "end": "3396000"
  },
  {
    "text": "can reasonable way um that I can find for IBM",
    "start": "3396000",
    "end": "3402000"
  },
  {
    "text": "db2 um we can s we can get the client version back and it turns out that the",
    "start": "3402000",
    "end": "3409359"
  },
  {
    "text": "client version is often the same as the server version but it's not guaranteed to be the same as the server version",
    "start": "3409359",
    "end": "3414880"
  },
  {
    "text": "that's why I've not put it in there I'm still hunting for a really good query that will get me the version back um in",
    "start": "3414880",
    "end": "3421960"
  },
  {
    "text": "infomix we use the DB info function uh version comma full from cismas colon",
    "start": "3421960",
    "end": "3428640"
  },
  {
    "text": "infix do any table we want it has to exist of course and you have to be able to select from it one of the interesting",
    "start": "3428640",
    "end": "3435440"
  },
  {
    "text": "things with infomix is you cannot revoke um public select permissions on",
    "start": "3435440",
    "end": "3442520"
  },
  {
    "text": "any of the system catalog tables such as CIS tables you know um or or the the CIS or tables",
    "start": "3442520",
    "end": "3450240"
  },
  {
    "text": "that Define people's level of privileges which to me is uh",
    "start": "3450240",
    "end": "3456680"
  },
  {
    "text": "floid servas uh select attap version and MySQL",
    "start": "3457680",
    "end": "3463359"
  },
  {
    "text": "select that version um to work out what database server is",
    "start": "3463359",
    "end": "3469039"
  },
  {
    "text": "in use the functions I'm injecting",
    "start": "3469039",
    "end": "3476319"
  },
  {
    "text": "are as follows",
    "start": "3476319",
    "end": "3482400"
  },
  {
    "text": "um if it's Microsoft SQL server and we're dealing with numeric",
    "start": "3482400",
    "end": "3488400"
  },
  {
    "text": "data um atap packets received minus attap packet received",
    "start": "3488400",
    "end": "3495359"
  },
  {
    "text": "um sorry add that and then subtract it which obviously is equal to zero if that",
    "start": "3495359",
    "end": "3501200"
  },
  {
    "text": "returns fine then we know superal server if the bit and operation works",
    "start": "3501200",
    "end": "3508799"
  },
  {
    "text": "fine uh we know it's Oracle if the mod function works and proceeding that with",
    "start": "3508799",
    "end": "3514720"
  },
  {
    "text": "cismas Cod on infomix dood then we know it's infomix if it's um MySQL we can do",
    "start": "3514720",
    "end": "3522119"
  },
  {
    "text": "connection ID um if it's Microsoft Access we just go and a in a you know that's doesn't",
    "start": "3522119",
    "end": "3531440"
  },
  {
    "text": "work none of these work on any of the others so we can use that to determine uh you know the backend database server",
    "start": "3531440",
    "end": "3538720"
  },
  {
    "text": "um if it's string data we're injecting into uh the DB name function we inject",
    "start": "3538720",
    "end": "3545440"
  },
  {
    "text": "if it's Microsoft SQL Server data sis. database name if it's article can cap",
    "start": "3545440",
    "end": "3552720"
  },
  {
    "text": "you know again proceeding with cismas INF Co on infomix if it's infex convert the connection ID to",
    "start": "3552720",
    "end": "3560280"
  },
  {
    "text": "character um if it's my SQL and again the the access query uh which really",
    "start": "3560280",
    "end": "3566119"
  },
  {
    "text": "isn't that interesting but by injecting these in and making no assumptions about",
    "start": "3566119",
    "end": "3571720"
  },
  {
    "text": "the back end we look at the responses and the the one which returns a 200",
    "start": "3571720",
    "end": "3577280"
  },
  {
    "text": "response or the one that returns us the response we expect when we're not causing an error or or whatever um",
    "start": "3577280",
    "end": "3585079"
  },
  {
    "text": "that's the one you know that's the database server that it it's running so we can work out very easily what is you",
    "start": "3585079",
    "end": "3590640"
  },
  {
    "text": "know running okay any more questions",
    "start": "3590640",
    "end": "3597680"
  },
  {
    "text": "John hman at the back there is that your hand up Gareth is that your hand",
    "start": "3597680",
    "end": "3604920"
  },
  {
    "text": "up let me down okay cool well thank you very much everybody for coming I hope this has been useful",
    "start": "3604920",
    "end": "3612558"
  },
  {
    "text": "[Music] I'll discuss to you the theory some of",
    "start": "3624310",
    "end": "3629359"
  },
  {
    "text": "the premise as I go along and uh during the talk uh feel free to interrupt me",
    "start": "3629359",
    "end": "3634720"
  },
  {
    "text": "anytime if you think I'm rambling on if you can't hear me well if you think I'm not making sense or if you have a",
    "start": "3634720",
    "end": "3641119"
  },
  {
    "text": "question just flag me down and I'll take care of that okay so we shall go ahead",
    "start": "3641119",
    "end": "3648599"
  },
  {
    "text": "um the purpose of this talk as I mentioned is to illustrate the limitations of automated assessment to",
    "start": "3648599",
    "end": "3656839"
  },
  {
    "text": "I mean don't take this stock as a complete dis on automated assessment tools they have their value but they",
    "start": "3656839",
    "end": "3663480"
  },
  {
    "text": "don't have as much value as their commercial vendors claim it to be you",
    "start": "3663480",
    "end": "3668720"
  },
  {
    "text": "you don't click go and it's going to analyze your website completely and give you a fancy Report with all the flaws I",
    "start": "3668720",
    "end": "3675240"
  },
  {
    "text": "mean just like you can't you can't be a penetration testing company by just clicking nessus and handing out nessus",
    "start": "3675240",
    "end": "3681599"
  },
  {
    "text": "reports although there are many companies who do that um but uh this is just to illustrate the same thing I mean",
    "start": "3681599",
    "end": "3689440"
  },
  {
    "text": "you can keep on arguing to people and shoving them Theory but what I decided is let's put it into practice let's",
    "start": "3689440",
    "end": "3696119"
  },
  {
    "text": "create a website or a web application as a challenge okay if your crawler can",
    "start": "3696119",
    "end": "3701280"
  },
  {
    "text": "successfully crawl and assess this website you're good but most likely I've",
    "start": "3701280",
    "end": "3706680"
  },
  {
    "text": "not seen any crawler that does it so far of course I mean next year maybe there's something else you know it's security is",
    "start": "3706680",
    "end": "3713559"
  },
  {
    "text": "a cat and mouse game you keep on being one step step ahead so U that's the",
    "start": "3713559",
    "end": "3719079"
  },
  {
    "text": "purpose is to illustrate the limitations of automated assessment tools also Identify some new areas of research and",
    "start": "3719079",
    "end": "3726079"
  },
  {
    "text": "sometime later on in the talk I'll make a Shameless pitch for collaboration because I am seeking people who can help",
    "start": "3726079",
    "end": "3732000"
  },
  {
    "text": "me in putting more uh energy into this tool and uh with with this work I also",
    "start": "3732000",
    "end": "3739359"
  },
  {
    "text": "want to give some insight to web application developers what they can do to fortify some applications",
    "start": "3739359",
    "end": "3746640"
  },
  {
    "text": "so that's the whole game of the talk um so now let me talk a little bit about",
    "start": "3746640",
    "end": "3753000"
  },
  {
    "text": "what automated web assessment is you know when we built crawlers and spiders",
    "start": "3753000",
    "end": "3758359"
  },
  {
    "text": "and app testers uh most of the commercial and non-commercial automated assessment",
    "start": "3758359",
    "end": "3764920"
  },
  {
    "text": "tools will do the following I mean they will test the web server try to identify what web server it is I wrote a tool",
    "start": "3764920",
    "end": "3772119"
  },
  {
    "text": "called HTT print which does that without looking at server banners strings I mean that used to be a part of my talks last",
    "start": "3772119",
    "end": "3778279"
  },
  {
    "text": "year once you identified the web server you acquired the target then what you do",
    "start": "3778279",
    "end": "3783599"
  },
  {
    "text": "is you crawl the web application you just take the beginning page spider through all the links go recursively",
    "start": "3783599",
    "end": "3789520"
  },
  {
    "text": "keep on fetching links and get all sorts of data back analyze the responses analyze the headers analyze the content",
    "start": "3789520",
    "end": "3797119"
  },
  {
    "text": "cut up the content start taking regular expressions from the content try to make sense match it with your signatures",
    "start": "3797119",
    "end": "3803000"
  },
  {
    "text": "match it with your fingerprints match it with whatever you have in the back end you classify the resources gathered in",
    "start": "3803000",
    "end": "3809559"
  },
  {
    "text": "this manner some uh some spiders are nice enough to draw a big colored maps",
    "start": "3809559",
    "end": "3814680"
  },
  {
    "text": "with lines and graphs and you know 3D rendering and whatnot you can do that as well you map the application then the",
    "start": "3814680",
    "end": "3822480"
  },
  {
    "text": "most uh important point is try to identify all the attack points you know figure out what are the different",
    "start": "3822480",
    "end": "3829319"
  },
  {
    "text": "interfaces of the web application where are the possibly weak areas and try to",
    "start": "3829319",
    "end": "3835079"
  },
  {
    "text": "automatically exploit those say any you know you have a form or you have a",
    "start": "3835079",
    "end": "3840319"
  },
  {
    "text": "parameter you can try tricks like SQL injection cross-site scripting all the classic attack stuff you try to the tool",
    "start": "3840319",
    "end": "3847559"
  },
  {
    "text": "also tries to identify authentication points that is if you have a form or some point which accepts credentials",
    "start": "3847559",
    "end": "3854480"
  },
  {
    "text": "typically users and passwords then you try a Brute Force against that and",
    "start": "3854480",
    "end": "3859599"
  },
  {
    "text": "tomorrow my friend Roloff will show you a tool called crowbar which does that but so so you can go ahead try to Brute",
    "start": "3859599",
    "end": "3867440"
  },
  {
    "text": "Force accounts get in then comes the actual task of Performing the taxs you",
    "start": "3867440",
    "end": "3872559"
  },
  {
    "text": "know once you've identified the attack points you launch some automated attacks exploits against it you get back all the",
    "start": "3872559",
    "end": "3878839"
  },
  {
    "text": "results then you compile into a big big report you know nice PDF report or HTML",
    "start": "3878839",
    "end": "3884119"
  },
  {
    "text": "with xslt and whatever fancy stuff you have these days and then you say hand it",
    "start": "3884119",
    "end": "3889279"
  },
  {
    "text": "to your client you're done so that is what automated web assessment does now if we look look inside how are",
    "start": "3889279",
    "end": "3897240"
  },
  {
    "text": "these crawlers and testing tools implemented we've written two of them",
    "start": "3897240",
    "end": "3904760"
  },
  {
    "text": "and we've written two of the fastest and the best so I can give you all the Insight what it takes to write a proper",
    "start": "3904760",
    "end": "3912000"
  },
  {
    "text": "crawler what do crawlers do inside the testing logic entirely",
    "start": "3912000",
    "end": "3918279"
  },
  {
    "text": "depends upon HTTP responses and HTTP response codes I mean at a minimum if if",
    "start": "3918279",
    "end": "3926160"
  },
  {
    "text": "you know that everybody in the world is nice and decent and follows the HTTP RFC",
    "start": "3926160",
    "end": "3932039"
  },
  {
    "text": "very nicely for every resource not found you will get a 404 back for every server",
    "start": "3932039",
    "end": "3937839"
  },
  {
    "text": "error you'll get a 500 error code back for every resource that exists you'll get a 200 back and so on so the first",
    "start": "3937839",
    "end": "3944520"
  },
  {
    "text": "primitive assumption is send a request check for the response if it exists it does not exist it caused an error and",
    "start": "3944520",
    "end": "3950799"
  },
  {
    "text": "then determine what it was now we all know that these responses can be easily",
    "start": "3950799",
    "end": "3955839"
  },
  {
    "text": "customized and hardly I mean hardly anybody uh follows the HTTP RFC",
    "start": "3955839",
    "end": "3962760"
  },
  {
    "text": "completely to the te um you can I mean the first and the most easiest thing to",
    "start": "3962760",
    "end": "3969000"
  },
  {
    "text": "do to throw Crawlers for a toss is to just make every response come back as",
    "start": "3969000",
    "end": "3974400"
  },
  {
    "text": "200 okay an error response a not existent response anything comes back as 200 okay you run some tool like ncto",
    "start": "3974400",
    "end": "3982119"
  },
  {
    "text": "whisker against it it just flag every vulnerability has in the database and show you that yes this server is",
    "start": "3982119",
    "end": "3988000"
  },
  {
    "text": "vulnerable to 3,000 different types of attacks you know it sucks you should take it off your network that's not",
    "start": "3988000",
    "end": "3994200"
  },
  {
    "text": "really so it's just fake responses coming back so to come around that modern",
    "start": "3994200",
    "end": "4000240"
  },
  {
    "text": "crawlers try to identify error signatures in the theory is first you try to look for a resource that you know",
    "start": "4000240",
    "end": "4006480"
  },
  {
    "text": "doesn't exist in the Crawlers that I built you know I send a request for",
    "start": "4006480",
    "end": "4012079"
  },
  {
    "text": "antidisestablishmentarianism and if see if that string comes back I mean if the whatever the response is I will treat it",
    "start": "4012079",
    "end": "4018119"
  },
  {
    "text": "as a false response I mean say if if a 200 comes back then I know that this server is sending not existent response",
    "start": "4018119",
    "end": "4025079"
  },
  {
    "text": "has 200 okays and then whenever I go ahead and scan the rest of the application I will try to see if the",
    "start": "4025079",
    "end": "4032359"
  },
  {
    "text": "response matches the same error signature then I treat it as a 200 okay so first look for stuff that I know",
    "start": "4032359",
    "end": "4038200"
  },
  {
    "text": "doesn't exist then begin crawling the application then I came up with a technique called page signatures which",
    "start": "4038200",
    "end": "4045279"
  },
  {
    "text": "was was my earlier talk last year is to how to intelligently identify responses",
    "start": "4045279",
    "end": "4051520"
  },
  {
    "text": "based upon their structure s some I did some fancy fancy math with it uh some",
    "start": "4051520",
    "end": "4057640"
  },
  {
    "text": "string frequency analysis and partly bordering on fuzzy logic and without I",
    "start": "4057640",
    "end": "4064400"
  },
  {
    "text": "mean I I don't care what the HTTP response code is or I don't look for regular regular Expressions I just",
    "start": "4064400",
    "end": "4070880"
  },
  {
    "text": "analyze the response structurally and see if it's an error string or not on",
    "start": "4070880",
    "end": "4076160"
  },
  {
    "text": "somewhat like you know pattern matching or image recognition type of stuff but on text strings so that is what the page",
    "start": "4076160",
    "end": "4083520"
  },
  {
    "text": "signatures did that gave a lot of accuracy to crawlers so yeah like I said uh error",
    "start": "4083520",
    "end": "4091039"
  },
  {
    "text": "signatures work on the principle of sending a request for a non-existent page you record the signature you send a",
    "start": "4091039",
    "end": "4097278"
  },
  {
    "text": "malformed request you get whatever error response you have and you proceed with Crawling by identifying signatures from",
    "start": "4097279",
    "end": "4104238"
  },
  {
    "text": "the responses and not really looking at the response codes now how do you eliminate false",
    "start": "4104239",
    "end": "4110920"
  },
  {
    "text": "positives in um how do you eliminate false positives when you're looking at results I mean false positives is what's",
    "start": "4110920",
    "end": "4117159"
  },
  {
    "text": "going to kill your testing or really make your testing succeed if your report has a lot of false positives then why",
    "start": "4117159",
    "end": "4124400"
  },
  {
    "text": "did you even bother doing the automated test you should have done it manually anyway so to compare and eliminate false",
    "start": "4124400",
    "end": "4131199"
  },
  {
    "text": "positives you have four different methods I mean you typically look at error sign signatures and throw away any",
    "start": "4131199",
    "end": "4137880"
  },
  {
    "text": "responses that match the error signature you compare strings and if you find that",
    "start": "4137880",
    "end": "4143040"
  },
  {
    "text": "certain error codes or certain error strings appear within the response you throw those away you can compare regular",
    "start": "4143040",
    "end": "4149960"
  },
  {
    "text": "expressions and sometimes you can use fuzzy logic you have a threshold defined that any signatures below this threshold",
    "start": "4149960",
    "end": "4157000"
  },
  {
    "text": "are tell tail signs of an error and any signatures Above This threshold are you know valid responses so you have some",
    "start": "4157000",
    "end": "4164560"
  },
  {
    "text": "sort of false positive Eliminator built into a crawler as well so now actually let us look at what",
    "start": "4164560",
    "end": "4171400"
  },
  {
    "text": "a crawler really is you know to understand I mean if you want to defeat a crawler you have to understand",
    "start": "4171400",
    "end": "4177199"
  },
  {
    "text": "completely what crawlers do inside and out so a crawler or any automated",
    "start": "4177199",
    "end": "4183080"
  },
  {
    "text": "assessment tool is a functional HTTP Client First it it does send HTTP",
    "start": "4183080",
    "end": "4188640"
  },
  {
    "text": "requests does receive HTTP responses and has the ability to parse the HTTP",
    "start": "4188640",
    "end": "4193920"
  },
  {
    "text": "responses as well as far as Behavior goes a crawler should",
    "start": "4193920",
    "end": "4199560"
  },
  {
    "text": "mimic the browser as far as possible I mean the only other thing a browser does",
    "start": "4199560",
    "end": "4206000"
  },
  {
    "text": "is render things in a visual form and let users fill out inputs graphically",
    "start": "4206000",
    "end": "4212760"
  },
  {
    "text": "let users point and click and things like that but inside the engine is still",
    "start": "4212760",
    "end": "4218040"
  },
  {
    "text": "you know former request receiver reply interpret and render the response so",
    "start": "4218040",
    "end": "4223320"
  },
  {
    "text": "should send requests receive the response pass the HT HTTP response header pass the HTTP response contents",
    "start": "4223320",
    "end": "4230480"
  },
  {
    "text": "it should then sift through the HTML that was received as a response it should also recover from any malformed",
    "start": "4230480",
    "end": "4237520"
  },
  {
    "text": "HTML errors especially sites which are generated in front page they suck because all the HTML is broken but",
    "start": "4237520",
    "end": "4244520"
  },
  {
    "text": "somehow I being the broken browser always renders a broken HTML so your",
    "start": "4244520",
    "end": "4249800"
  },
  {
    "text": "crawler mean try to even if you have a simple page with five lines in front page you'll notice that the HTML content",
    "start": "4249800",
    "end": "4256719"
  },
  {
    "text": "is rarely below 100 kilobytes there'll be like some non-broken spaces and some",
    "start": "4256719",
    "end": "4262600"
  },
  {
    "text": "TD divs and fonts and all sorts of crap injected in the HTML to to let a to let",
    "start": "4262600",
    "end": "4269880"
  },
  {
    "text": "a crawler make sense of that is sometimes it front page pages are a good",
    "start": "4269880",
    "end": "4275480"
  },
  {
    "text": "candidate test for crawlers found a way of getting around those is uh there's a project called",
    "start": "4275480",
    "end": "4282000"
  },
  {
    "text": "HTML tidy written by the w3c Consortium what you do is you just take",
    "start": "4282000",
    "end": "4287840"
  },
  {
    "text": "all the HTML pass it through HTML tidy and then put it into a Dom renderer and",
    "start": "4287840",
    "end": "4293159"
  },
  {
    "text": "then start taking the tags out of it that you can get around front page crap you can get around broken tags crap",
    "start": "4293159",
    "end": "4299040"
  },
  {
    "text": "using HTML tidy it's pretty neat trick if you want to use it so anyway this is",
    "start": "4299040",
    "end": "4304560"
  },
  {
    "text": "what a crawler is now let's really see what are the different ways that you can",
    "start": "4304560",
    "end": "4309639"
  },
  {
    "text": "defeat a crawler so the first question that we have have to ask is for any",
    "start": "4309639",
    "end": "4317480"
  },
  {
    "text": "anything looking from a web server perspective any request that we see coming in I mean is it really coming",
    "start": "4317480",
    "end": "4324639"
  },
  {
    "text": "from a browser or is it really coming from a crawler you know so we want to identify is this request being sent by a",
    "start": "4324639",
    "end": "4332320"
  },
  {
    "text": "human sitting on a browser or is this request being sent by a trained monkey or a",
    "start": "4332320",
    "end": "4338280"
  },
  {
    "text": "crawler so far crawlers have become very smart they've overcome lots of hurdles",
    "start": "4338280",
    "end": "4344120"
  },
  {
    "text": "but I mean there's an end to smartness at the automatic",
    "start": "4344120",
    "end": "4349600"
  },
  {
    "text": "level the premise of uh this this whole discussion is this one sentence that",
    "start": "4349600",
    "end": "4356159"
  },
  {
    "text": "humans and crawlers use a web application in different ways and if you",
    "start": "4356159",
    "end": "4361320"
  },
  {
    "text": "are if you are a web server and a human is navigating through the web",
    "start": "4361320",
    "end": "4366639"
  },
  {
    "text": "application through a browser the usage pattern generated will be much different",
    "start": "4366639",
    "end": "4373400"
  },
  {
    "text": "than how crawlers will tackle navigating through a web application humans will",
    "start": "4373400",
    "end": "4379000"
  },
  {
    "text": "inherently use some smartness no matter how stupid they are but crawlers will",
    "start": "4379000",
    "end": "4384080"
  },
  {
    "text": "like do everything completely mechanically I mean if you sometimes look at an access log and sort it",
    "start": "4384080",
    "end": "4390000"
  },
  {
    "text": "chronologically you can find out that oh wow you know the average rate of requests is like three per second that's",
    "start": "4390000",
    "end": "4396840"
  },
  {
    "text": "damn fast you know it's a really quick human who can read and click excessively fast no that's not really true then if",
    "start": "4396840",
    "end": "4404639"
  },
  {
    "text": "you look at that usage patterns in a in a log you'll find out that if it's a",
    "start": "4404639",
    "end": "4409840"
  },
  {
    "text": "crawler it'll do something like depth for search or breadth for search very systematic very mechanical there will be",
    "start": "4409840",
    "end": "4416560"
  },
  {
    "text": "no deviations to a path taken it will just like follow everything given to it",
    "start": "4416560",
    "end": "4423000"
  },
  {
    "text": "first come first served put it in a queue then start tackling the rest of it and then empty the queue back sometimes",
    "start": "4423000",
    "end": "4429400"
  },
  {
    "text": "if you're a human you just want to you visually recognize what are the important areas like whoever click on",
    "start": "4429400",
    "end": "4435320"
  },
  {
    "text": "and about us or contact the company page you know you just the first things that you do is you go to the bulk of the area",
    "start": "4435320",
    "end": "4442320"
  },
  {
    "text": "first and then you look at the peripheral stuff so usage patterns usage paths usage times all",
    "start": "4442320",
    "end": "4450159"
  },
  {
    "text": "these things differ so you know there since there exists a difference between the way humans use a web application and",
    "start": "4450159",
    "end": "4457440"
  },
  {
    "text": "a crawler uses a web application we can do something to only let humans use the",
    "start": "4457440",
    "end": "4462719"
  },
  {
    "text": "application and not let crawlers use it so just to you know have a comparison",
    "start": "4462719",
    "end": "4468560"
  },
  {
    "text": "between browsers versus crawlers this is not this does not apply",
    "start": "4468560",
    "end": "4473639"
  },
  {
    "text": "to all crawlers I mean to a certain extent crawlers can become smart but the first and foremost thing the most",
    "start": "4473639",
    "end": "4480000"
  },
  {
    "text": "primitive thing to check for is a well formed HTTP request header you know browsers will have a very well formed",
    "start": "4480000",
    "end": "4486840"
  },
  {
    "text": "HTTP request header they'll have a they'll have of course a get request or anything they'll have all the nice",
    "start": "4486840",
    "end": "4493120"
  },
  {
    "text": "accept tags they'll have a h hdp referrer they'll have a good user agent string and for different types of",
    "start": "4493120",
    "end": "4500199"
  },
  {
    "text": "resources presented the except tags and all those things will keep on changing of course it's very easy for a crawler",
    "start": "4500199",
    "end": "4506199"
  },
  {
    "text": "to mimic that so that's a no-brainer but some silly crawlers can get defeated by",
    "start": "4506199",
    "end": "4511239"
  },
  {
    "text": "just checking for HTTP request headers you know if your request header is not well formed if it does not you know have",
    "start": "4511239",
    "end": "4517760"
  },
  {
    "text": "the host tag or anything just don't serve it anything the next distinguishing part is",
    "start": "4517760",
    "end": "4524679"
  },
  {
    "text": "cooking replays and primitive crawlers never replayed cookies back browsers",
    "start": "4524679",
    "end": "4531080"
  },
  {
    "text": "replay cookies so if a cookie has been received it will be properly replayed uh crawlers don't do that so again it's",
    "start": "4531080",
    "end": "4538920"
  },
  {
    "text": "very easy for crawlers to incorporate proper cookie replay another trick that I used to defeat crawlers quite",
    "start": "4538920",
    "end": "4545480"
  },
  {
    "text": "rudimentary was to just keep on feeding cookies and cookie expiry a lot of",
    "start": "4545480",
    "end": "4551000"
  },
  {
    "text": "crawlers will keep on receiving cookies but they'll never expire cookies so if I see an expired cookie coming back I said",
    "start": "4551000",
    "end": "4557760"
  },
  {
    "text": "oops you're you're a crawler go away but uh anyway so cookie handling can also be",
    "start": "4557760",
    "end": "4563920"
  },
  {
    "text": "mimicked very well by crawlers so that does not constitute a full",
    "start": "4563920",
    "end": "4568960"
  },
  {
    "text": "test the third trick to try to throw crawlers off guard is forced HTTP",
    "start": "4568960",
    "end": "4575320"
  },
  {
    "text": "compression most modern browsers modern meaning the new Mo the millas and the",
    "start": "4575320",
    "end": "4581760"
  },
  {
    "text": "the I45 plus browsers the gecko browsers and",
    "start": "4581760",
    "end": "4587280"
  },
  {
    "text": "even the K uh what is it the Conqueror based browsers the KD core web core web",
    "start": "4587280",
    "end": "4595360"
  },
  {
    "text": "kit core based browsers they all have inbuilt gzip decoding capabilities so usually the way",
    "start": "4595360",
    "end": "4603840"
  },
  {
    "text": "gzip encoding for web pages works is the browser has to be able to request if it",
    "start": "4603840",
    "end": "4609800"
  },
  {
    "text": "wants output in gzip form so if it says that if you can accept gzip then the",
    "start": "4609800",
    "end": "4615520"
  },
  {
    "text": "server will try to send gzip data if you somehow I've noticed if you even just force gzip data down a browser's throat",
    "start": "4615520",
    "end": "4623480"
  },
  {
    "text": "without the browser asking for it most browsers will still be able to render it and show it back to you so if you",
    "start": "4623480",
    "end": "4629320"
  },
  {
    "text": "somehow have the ability to force gzip compression to turn on for everything and you have a primitive crawler the",
    "start": "4629320",
    "end": "4636360"
  },
  {
    "text": "crawler will just be getting binary crap back and not be able to sift through it again it's not difficult to overcome at",
    "start": "4636360",
    "end": "4643159"
  },
  {
    "text": "all you just put a gunzip proxy or you buil the gunzip library in the crawler",
    "start": "4643159",
    "end": "4648560"
  },
  {
    "text": "code and it'll be able to decrypt I mean expand the gzip data and pass through it",
    "start": "4648560",
    "end": "4654760"
  },
  {
    "text": "I mean these are three primitive things 50% of the Crawlers get defeated by just",
    "start": "4654760",
    "end": "4659880"
  },
  {
    "text": "these little tricks but then we can come into some Advanced tricks and where a",
    "start": "4659880",
    "end": "4666000"
  },
  {
    "text": "lot of crawlers fail is when it comes to JavaScript the science of you know",
    "start": "4666000",
    "end": "4672880"
  },
  {
    "text": "crawlers properly interpreting Java JavaScript is not yet I mean it's not yet done I'm not saying it is impossible",
    "start": "4672880",
    "end": "4680199"
  },
  {
    "text": "I'm saying if you try to build a full-on crawler with full JavaScript interpretation it's a large effort it'll",
    "start": "4680199",
    "end": "4687880"
  },
  {
    "text": "cause you loss of hair and uh you know you never really",
    "start": "4687880",
    "end": "4693400"
  },
  {
    "text": "know what the action is going to what action is going to be taken so even",
    "start": "4693400",
    "end": "4698480"
  },
  {
    "text": "though you can interpret all the JavaScript code whether you really want to interpret it or not sometimes the",
    "start": "4698480",
    "end": "4704480"
  },
  {
    "text": "Javas script code is even sensitive it's like if a mouse over happens or if this click happens then I want this to happen",
    "start": "4704480",
    "end": "4711120"
  },
  {
    "text": "and then I want this to happen and sometimes links or paths are dynamically generated so even if you can interpret",
    "start": "4711120",
    "end": "4718360"
  },
  {
    "text": "it the sequence of interpretation based on events is still a difficult things",
    "start": "4718360",
    "end": "4723639"
  },
  {
    "text": "there are crawlers in the market there are people who advertise saying we can",
    "start": "4723639",
    "end": "4729560"
  },
  {
    "text": "browse we can we have the ability to crawl through JavaScript um unless you have evidence",
    "start": "4729560",
    "end": "4736239"
  },
  {
    "text": "to the contrary my statement is they ly They Don't Really interpret the",
    "start": "4736239",
    "end": "4741880"
  },
  {
    "text": "JavaScript completely but what they do is look for Strings look for regular Expressions that match HTTP requests or",
    "start": "4741880",
    "end": "4749760"
  },
  {
    "text": "match paths and just keep on concatenating and trying these paths out so it's just like sifting through the",
    "start": "4749760",
    "end": "4756320"
  },
  {
    "text": "code grapping through it and then trying out each possible link so uh you know JavaScript is is one",
    "start": "4756320",
    "end": "4764920"
  },
  {
    "text": "of the areas where browsers and crawlers that is by browsers I means humans on browsers and crawlers I mean automatic",
    "start": "4764920",
    "end": "4771159"
  },
  {
    "text": "crawling logic they get defeated so if you want to separate you",
    "start": "4771159",
    "end": "4778440"
  },
  {
    "text": "know try to now we try to identify that how do we distinguish human usage versus a crawler",
    "start": "4778440",
    "end": "4784040"
  },
  {
    "text": "usage you can attack the wizig principle the um you have you seen uh are you",
    "start": "4784040",
    "end": "4791360"
  },
  {
    "text": "familiar with the capture tests completely automated programs to tell",
    "start": "4791360",
    "end": "4796760"
  },
  {
    "text": "computers and humans apart you know whenever you sign up for a new Yahoo account or something like that you get",
    "start": "4796760",
    "end": "4802719"
  },
  {
    "text": "this you get a graphic box with some numbers and text in it which is either skewed or distorted or you know has",
    "start": "4802719",
    "end": "4809719"
  },
  {
    "text": "random dots it looks like some idiot has played with every Photoshop filter and then generated that image that's a",
    "start": "4809719",
    "end": "4816159"
  },
  {
    "text": "capture test because uh Optical Character readers the Crawlers will not",
    "start": "4816159",
    "end": "4821440"
  },
  {
    "text": "be able to know what that string is in the box but humans have an ability to",
    "start": "4821440",
    "end": "4827760"
  },
  {
    "text": "visually overcome errors so if you can read that no matter if the letters are written in this way or the letters are",
    "start": "4827760",
    "end": "4833679"
  },
  {
    "text": "written in that way you can still type that string out and you'll succeed so unless you give the correct string you",
    "start": "4833679",
    "end": "4839760"
  },
  {
    "text": "can't go forward that's a capture test we can Implement some capture principles",
    "start": "4839760",
    "end": "4844920"
  },
  {
    "text": "in our in our web application it would actually be stupid",
    "start": "4844920",
    "end": "4850080"
  },
  {
    "text": "for every click to have a capture test on it so like yeah if you want to log in you have this enter this number if you",
    "start": "4850080",
    "end": "4855800"
  },
  {
    "text": "want to see a report you enter that number that's painful people can't use your web app of course it'll prevent a",
    "start": "4855800",
    "end": "4861560"
  },
  {
    "text": "crawler from going through it completely but that's not something that we can do so we can use certain other principles I",
    "start": "4861560",
    "end": "4869400"
  },
  {
    "text": "mean for examples example you can sprinkle clear pixels with links that go",
    "start": "4869400",
    "end": "4875400"
  },
  {
    "text": "to Nowhere in a page humans will never click on CLE clear pixels you they're",
    "start": "4875400",
    "end": "4881320"
  },
  {
    "text": "just too tiny too hidden all over the different all over the page if per",
    "start": "4881320",
    "end": "4886760"
  },
  {
    "text": "chance you know somebody is just moving the mouse in sleep and falls on the",
    "start": "4886760",
    "end": "4892000"
  },
  {
    "text": "click button and it hits that clear pixel your probabilities are coming very",
    "start": "4892000",
    "end": "4897280"
  },
  {
    "text": "close to plane crashes earthquakes and tsunamis and if that happen just tell the okay please reset and do it again",
    "start": "4897280",
    "end": "4903800"
  },
  {
    "text": "you know don't don't bother about doing tracking all that but I mean if developers still believe that hidden",
    "start": "4903800",
    "end": "4910520"
  },
  {
    "text": "fields are secure then you can very well assume that people won't click on clear pixels so one of the things you can do",
    "start": "4910520",
    "end": "4917239"
  },
  {
    "text": "is inject clear pixels on your page and see if something clicks it then you can",
    "start": "4917239",
    "end": "4922560"
  },
  {
    "text": "be sure that this is not a human it's like a burger alarm or a booby trap I mean this button is not supposed to be",
    "start": "4922560",
    "end": "4929520"
  },
  {
    "text": "clicked so if you came clicking on it you're not supposed to do that so you you throw now so that's what we can",
    "start": "4929520",
    "end": "4935960"
  },
  {
    "text": "that's one way to separate a human from a crawler a crawler will never know better between is this a real button to",
    "start": "4935960",
    "end": "4942920"
  },
  {
    "text": "click or is this a clear pixel to click and they'll click on everything that they see so you trap them right there",
    "start": "4942920",
    "end": "4949120"
  },
  {
    "text": "secondly while browsing a site or while using an application humans don't cause",
    "start": "4949120",
    "end": "4955520"
  },
  {
    "text": "a lot of Errors crawlers do because crawlers sort of bumble around the application they make requests they",
    "start": "4955520",
    "end": "4961480"
  },
  {
    "text": "don't care about errors being generated but while crawling or while analyzing an",
    "start": "4961480",
    "end": "4967520"
  },
  {
    "text": "application crawlers make a lot of Errors you know they will report you stuff that succeeded but in doing that a",
    "start": "4967520",
    "end": "4975320"
  },
  {
    "text": "lot of Errors will be generated whenever a human browses through a site they do",
    "start": "4975320",
    "end": "4980400"
  },
  {
    "text": "not generate many errors sometimes errors will be generated inadvertently",
    "start": "4980400",
    "end": "4985760"
  },
  {
    "text": "if you know there's a broken link and the site administrator has not fixed it or some it's few and far in between the",
    "start": "4985760",
    "end": "4992719"
  },
  {
    "text": "error rate is very very low so if you can sort of count how many errors were",
    "start": "4992719",
    "end": "4998840"
  },
  {
    "text": "made by a particular connection we can identify is this a crawler or is this a human",
    "start": "4998840",
    "end": "5005120"
  },
  {
    "text": "and then you know humans have the ability of recognizing visually recognizing an error situation like see",
    "start": "5005120",
    "end": "5012520"
  },
  {
    "text": "if you return a message which has you know it has a sign on it saying you know this area is broken uh currently under",
    "start": "5012520",
    "end": "5020199"
  },
  {
    "text": "construction but the HTTP response code is 200 okay a crawler won't know any",
    "start": "5020199",
    "end": "5025520"
  },
  {
    "text": "better crawler would think this is a valid page but when we see that response in a browser we know that this is an",
    "start": "5025520",
    "end": "5032239"
  },
  {
    "text": "error so you you can try to trick crawlers and humans in visual",
    "start": "5032239",
    "end": "5037280"
  },
  {
    "text": "recognition of an errors crawlers can fail all these tests so now if you come with ways to",
    "start": "5037280",
    "end": "5043760"
  },
  {
    "text": "bog down crawlers you know how do we how do we now try to defeat the Crawlers you",
    "start": "5043760",
    "end": "5049719"
  },
  {
    "text": "one of the ways to do it is to have random error responses never the same error response every time so every 40",
    "start": "5049719",
    "end": "5056760"
  },
  {
    "text": "four will contain something unique and something different so even if you look for an error signature you're never",
    "start": "5056760",
    "end": "5062760"
  },
  {
    "text": "going to get that error back so I mean good luck keep on looking it's going to be a randomly generated error message",
    "start": "5062760",
    "end": "5069000"
  },
  {
    "text": "every time so now you don't know what your real positive is and what your real negative is it will cause a lot of false",
    "start": "5069000",
    "end": "5076239"
  },
  {
    "text": "positives in error identification I mean if you if you want to be really smart and Generate random error responses you",
    "start": "5076239",
    "end": "5082280"
  },
  {
    "text": "can keep altering the HTML structure you can use dictionary words I use words",
    "start": "5082280",
    "end": "5088639"
  },
  {
    "text": "like /c/ password or odbc error so you know spice of the error response is a as",
    "start": "5088639",
    "end": "5094520"
  },
  {
    "text": "well so guys will think wow you know I'm I'm finding some real cool stuff here so going to build up a big report of all",
    "start": "5094520",
    "end": "5101239"
  },
  {
    "text": "sorts of strings that I found like wow it was possible to recover the ATC password file through this type of an",
    "start": "5101239",
    "end": "5107440"
  },
  {
    "text": "attack it was an error I'm sorry um and you have custom error handlers what you",
    "start": "5107440",
    "end": "5113760"
  },
  {
    "text": "do is you you map your custom error Handler to such a program which generates random errors and most of the",
    "start": "5113760",
    "end": "5120760"
  },
  {
    "text": "web servers allow you to do this so the whole idea is you you want to make the crawler crawl through errors you want to",
    "start": "5120760",
    "end": "5127119"
  },
  {
    "text": "drag its nose through all that junk and then you know you end up with so many errors never give the crawler any proper",
    "start": "5127119",
    "end": "5133719"
  },
  {
    "text": "response crawler keeps on generating like 880,000 links found in this application until it dies out of memory",
    "start": "5133719",
    "end": "5140960"
  },
  {
    "text": "whatnot um I mean just when I finish up these slides I'll give you a demo of all the stuff that I've done was pretty",
    "start": "5140960",
    "end": "5147679"
  },
  {
    "text": "interesting it defeated all the Crawlers that I wrote and uh I have yet to see a commercial crawler pass this test",
    "start": "5147679",
    "end": "5156239"
  },
  {
    "text": "uh the other thing that you can do is you can Generate random hyperlinks that is links that go to nowhere and you have",
    "start": "5156360",
    "end": "5164280"
  },
  {
    "text": "these hyperlinks generated in these error responses if you're a human you will see that something is wrong you'll",
    "start": "5164280",
    "end": "5169719"
  },
  {
    "text": "never click on these but if it's a crawler you get an error there are more links in that response so it'll follow",
    "start": "5169719",
    "end": "5175119"
  },
  {
    "text": "all these other links which will generate more errors and add infinum you know you just get a whole lot of error",
    "start": "5175119",
    "end": "5180800"
  },
  {
    "text": "messages and you the crawler is spent all the four five hours crawling through error messages generated in the report",
    "start": "5180800",
    "end": "5186600"
  },
  {
    "text": "whereas the real page has been just left away sometimes you can be mean and throw up non-existing error conditions saying",
    "start": "5186600",
    "end": "5193360"
  },
  {
    "text": "un close quotation mark in you know this line This blah blah blah. ASP odbc error",
    "start": "5193360",
    "end": "5199719"
  },
  {
    "text": "with SQL ladyb driver crawler will say yep I found a SQL injection over here",
    "start": "5199719",
    "end": "5204840"
  },
  {
    "text": "you throw up non-existent HTML forms the crawler will try to fill it in and try to brute force and waste more",
    "start": "5204840",
    "end": "5211239"
  },
  {
    "text": "time so uh this was some of the this was some of the theory and the premise",
    "start": "5211239",
    "end": "5216960"
  },
  {
    "text": "behind defeating crawlers what I want to introduce you now is a tool called PHP",
    "start": "5216960",
    "end": "5223199"
  },
  {
    "text": "guard that I've written it's a PHP based crawler defeating mechanism it's just basically it's PHP code that you include",
    "start": "5223199",
    "end": "5230239"
  },
  {
    "text": "and drop it into your application you rewrite a little bit of your application to incorporate PHP guard and then try to",
    "start": "5230239",
    "end": "5238840"
  },
  {
    "text": "force a crawler to grow go through this and see what happens but uh",
    "start": "5238840",
    "end": "5245320"
  },
  {
    "text": "before I begin showing you PHP guard are there any questions at this point or any",
    "start": "5245320",
    "end": "5250719"
  },
  {
    "text": "comments yes uh this mechanism uh basically kills",
    "start": "5250719",
    "end": "5257239"
  },
  {
    "text": "off bones does it also kill off uh web search",
    "start": "5257239",
    "end": "5262880"
  },
  {
    "text": "spiders um interesting question question was this mechanism",
    "start": "5262880",
    "end": "5269119"
  },
  {
    "text": "kills off crawlers now does this mechanism also kill off webar",
    "start": "5269119",
    "end": "5275040"
  },
  {
    "text": "spiders um yes it has the potential to completely kill off web search",
    "start": "5275040",
    "end": "5281000"
  },
  {
    "text": "spiders what uh we must distinguish what we're trying to protect versus what",
    "start": "5281000",
    "end": "5286119"
  },
  {
    "text": "we're trying to let a search engine pick up for",
    "start": "5286119",
    "end": "5291280"
  },
  {
    "text": "example if you have if on your website you have the first few pages as static",
    "start": "5291280",
    "end": "5297520"
  },
  {
    "text": "Pages information dissemination Pages you don't I mean you would rather like a",
    "start": "5297520",
    "end": "5302679"
  },
  {
    "text": "search engine to pick them up and next step with with a tool like PHP guard you",
    "start": "5302679",
    "end": "5307840"
  },
  {
    "text": "have the ability of just protecting certain areas like you you may choose to",
    "start": "5307840",
    "end": "5313560"
  },
  {
    "text": "protect all areas beyond the authentication point so the interactive application can be",
    "start": "5313560",
    "end": "5319520"
  },
  {
    "text": "fortified some normal pages that you want them to be searched should be left",
    "start": "5319520",
    "end": "5324560"
  },
  {
    "text": "open to search for example everything that is allowed in your robots. txt",
    "start": "5324560",
    "end": "5330480"
  },
  {
    "text": "don't include PHP guard on it I mean for the rest of the stuff you can put PHP gu so you have to you have to choose",
    "start": "5330480",
    "end": "5337480"
  },
  {
    "text": "between what you want to put through this versus what you want a crawler to",
    "start": "5337480",
    "end": "5342679"
  },
  {
    "text": "pick up um any other",
    "start": "5342679",
    "end": "5347800"
  },
  {
    "text": "questions it's it's a trade-off you know a SP a web search engine thing is also a",
    "start": "5347800",
    "end": "5354210"
  },
  {
    "text": "[Music]",
    "start": "5354210",
    "end": "5359880"
  },
  {
    "text": "crawler okay let me go into PHP guard",
    "start": "5359880",
    "end": "5365480"
  },
  {
    "text": "um sorry so PHP guard is implemented a set",
    "start": "5365480",
    "end": "5371080"
  },
  {
    "text": "of PHP scripts it's very very easy to incorporate in any PHP driven",
    "start": "5371080",
    "end": "5376400"
  },
  {
    "text": "application all you do is just do you include the PHP gu. PHP file and you",
    "start": "5376400",
    "end": "5381719"
  },
  {
    "text": "make a couple of calls to invoke it at the beginning of every PHP page I'm not a very Shar PHP coder so if there's some",
    "start": "5381719",
    "end": "5389400"
  },
  {
    "text": "PHP crack coders in here who know how to put it into classes and have them automatically load up in inits great I",
    "start": "5389400",
    "end": "5396679"
  },
  {
    "text": "would love to collaborate with you but uh this for if you look at the PHP card",
    "start": "5396679",
    "end": "5402920"
  },
  {
    "text": "PHP guard code and say this code is this code sucks from a PHP coding standpoint don't blame me because I'm admitting it",
    "start": "5402920",
    "end": "5409280"
  },
  {
    "text": "sucks okay I'm I'm not admitting it's the best or the sharpest of all PHP code but it's built to demonstrate this point",
    "start": "5409280",
    "end": "5416119"
  },
  {
    "text": "bloody well um these Concepts again are very simple you can incorporate it in ASP or net or",
    "start": "5416119",
    "end": "5423560"
  },
  {
    "text": "GSP or any XYZ programming language that you like I just picked PHP because it",
    "start": "5423560",
    "end": "5428600"
  },
  {
    "text": "was easy for me to do it because I was also spending some time to learn PHP that way so yes I'm actively seeking",
    "start": "5428600",
    "end": "5436159"
  },
  {
    "text": "collaborators it'll be publicly available soon as soon as I can get onto the internet and upload the code I hope",
    "start": "5436159",
    "end": "5442600"
  },
  {
    "text": "to do that by this evening um I said that this will be publicly available soon in my other talk in Las Vegas but",
    "start": "5442600",
    "end": "5450320"
  },
  {
    "text": "then I never bothered making it publicly available I then spent some time in",
    "start": "5450320",
    "end": "5455560"
  },
  {
    "text": "getting married so that was a good excuse of not doing that well now I'm back in the game so yeah more goodies",
    "start": "5455560",
    "end": "5462639"
  },
  {
    "text": "coming from me now um okay so features of PHP guard PHP",
    "start": "5462639",
    "end": "5470440"
  },
  {
    "text": "guard one thing it does on the side is enforces very strict session control it",
    "start": "5470440",
    "end": "5476040"
  },
  {
    "text": "PHP guard hinges upon PHP session management apis no cookies or pages are",
    "start": "5476040",
    "end": "5481600"
  },
  {
    "text": "sent and it will track track the usage Behavior with sessions so you know one",
    "start": "5481600",
    "end": "5487760"
  },
  {
    "text": "of the things it maintains is an error count and working on some code to force",
    "start": "5487760",
    "end": "5492840"
  },
  {
    "text": "HTTP compression as soon as I can figure out php's output buffering and gzip routines very well I can do that but it",
    "start": "5492840",
    "end": "5499480"
  },
  {
    "text": "keeps on breaking uh okay so do I just pause no",
    "start": "5499480",
    "end": "5506679"
  },
  {
    "text": "problem he's switching the take so uh I can't even take questions during this",
    "start": "5506679",
    "end": "5511760"
  },
  {
    "text": "time right no so all have [Music]",
    "start": "5511760",
    "end": "5518229"
  },
  {
    "text": "[Music]",
    "start": "5521420",
    "end": "5524489"
  },
  {
    "text": "water yes you ask a question what about the performance uh about uh what",
    "start": "5527880",
    "end": "5534840"
  },
  {
    "text": "performance you get after I mean like did you have",
    "start": "5534840",
    "end": "5538960"
  },
  {
    "text": "something I",
    "start": "5542840",
    "end": "5546880"
  }
]