[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "good afternoon and welcome to practical web cache poisoning have you ever been",
    "start": "30",
    "end": "6509"
  },
  {
    "text": "working away and just noticed something that wasn't quite right and thought that's strange but that's rather complex",
    "start": "6509",
    "end": "14580"
  },
  {
    "text": "I think I'll just deal with that later on when I have more free time for years",
    "start": "14580",
    "end": "20340"
  },
  {
    "text": "web cache poisoning has been a vulnerability that people didn't want to think about it's existed mostly as one",
    "start": "20340",
    "end": "26789"
  },
  {
    "text": "of these theoretical vulnerabilities that are more often used to scare people than actually proven to exist and for",
    "start": "26789",
    "end": "35820"
  },
  {
    "text": "years I lived in fear of web cache poisoning and it's notorious complexity but I recently found myself in a",
    "start": "35820",
    "end": "42660"
  },
  {
    "text": "situation where I had no choice but to try it and discovered that actually web cache poisoning is wonderful so today in",
    "start": "42660",
    "end": "50879"
  },
  {
    "text": "this session I'm gonna share with you practical tools and techniques to detect explore and exploit web cache poisoning",
    "start": "50879",
    "end": "58440"
  },
  {
    "text": "I don't normally share the story of how I got started on research because it's",
    "start": "58440",
    "end": "64080"
  },
  {
    "start": "62000",
    "end": "62000"
  },
  {
    "text": "generally pretty dry but this one time I'm gonna make an exception",
    "start": "64080",
    "end": "69180"
  },
  {
    "text": "I started out about a year ago with a simple plan and a lot of optimism I",
    "start": "69180",
    "end": "75450"
  },
  {
    "text": "wrote this tool to find hidden query parameters called parameter and my plan",
    "start": "75450",
    "end": "80700"
  },
  {
    "text": "was I was going to run this tool on lots of sites it would find some really cool weird parameters I'd find some awesome",
    "start": "80700",
    "end": "87270"
  },
  {
    "text": "bugs and those and I'd give a talk about that and it started off quite well I",
    "start": "87270",
    "end": "92970"
  },
  {
    "text": "found some quite remarkable query parameters like this one here but the",
    "start": "92970",
    "end": "99570"
  },
  {
    "text": "next step just went horribly wrong the most interesting thing I could find in these query parameters that was actually",
    "start": "99570",
    "end": "106409"
  },
  {
    "text": "serious over and over was bullying old reflected cross-site scripting which is not something that I really want to give",
    "start": "106409",
    "end": "112740"
  },
  {
    "text": "a talk about and so I thought okay well this hasn't worked out but maybe all the",
    "start": "112740",
    "end": "119759"
  },
  {
    "text": "cool vulnerabilities are actually hiding in cookies so I hacked on my code to guess",
    "start": "119759",
    "end": "125130"
  },
  {
    "text": "cookie names as well set it running and found something that looked super promising and about eight hours later I",
    "start": "125130",
    "end": "132569"
  },
  {
    "text": "got absolutely nowhere and had to actually that was a waste of time as well and at this stage I only really had",
    "start": "132569",
    "end": "140790"
  },
  {
    "text": "one option left which was so once again hack up the code and this time make it guess HTTP headers so I did this and I",
    "start": "140790",
    "end": "149190"
  },
  {
    "text": "set out guessing headers and found loads of weird and wonderful headers and yet",
    "start": "149190",
    "end": "154890"
  },
  {
    "text": "once again in these headers I found nothing perfect for site scripting which I was pretty sick off at this point",
    "start": "154890",
    "end": "161310"
  },
  {
    "text": "and of course site scripting in headers is even less interesting than normal reflected exercise because there's no",
    "start": "161310",
    "end": "167940"
  },
  {
    "text": "way for me to make someone else's browser send a header across to mate there was only one tiny glimmer of hope",
    "start": "167940",
    "end": "175920"
  },
  {
    "text": "which was that summer some of these servers that had exercise in their headers used caching and just maybe I",
    "start": "175920",
    "end": "183180"
  },
  {
    "text": "could use their caches as an exploit delivery mechanism for my header based",
    "start": "183180",
    "end": "188250"
  },
  {
    "text": "XSS so I try this as an absolute last resort and quite surprisingly it",
    "start": "188250",
    "end": "194700"
  },
  {
    "text": "actually worked so first I'm gonna talk about what cache poisoning is and how",
    "start": "194700",
    "end": "200400"
  },
  {
    "start": "197000",
    "end": "197000"
  },
  {
    "text": "you can find it then I'll demonstrate cache poisoning on a bunch of well-known websites and show what goes wrong and",
    "start": "200400",
    "end": "208470"
  },
  {
    "text": "what goes well and then also do a live demo on a very well-known piece of software and talk about how not to get",
    "start": "208470",
    "end": "215580"
  },
  {
    "text": "your cache poisoned and then finally wrap up and take five minutes of questions so first of all a bit of",
    "start": "215580",
    "end": "225120"
  },
  {
    "start": "223000",
    "end": "223000"
  },
  {
    "text": "context as to this presentation in this presentation I'm not going to be talking",
    "start": "225120",
    "end": "230489"
  },
  {
    "text": "about browser cache poisoning browsers have built-in caches these are client-side caches and from a security",
    "start": "230489",
    "end": "237390"
  },
  {
    "text": "point of view from the cache poisoning point of view they're not that interesting so I'm not talking about those I'm talking about server-side",
    "start": "237390",
    "end": "244140"
  },
  {
    "text": "caches also web cache poisoning is not web cache deception web cache deception",
    "start": "244140",
    "end": "250530"
  },
  {
    "text": "is a really cool technique that was there was there was a blackout presentation on it last year and it's",
    "start": "250530",
    "end": "256950"
  },
  {
    "text": "about tricking caches into storing sensitive information belonging to users so that the attacker can get access to",
    "start": "256950",
    "end": "263070"
  },
  {
    "text": "it web cache poisoning is about using caches to save malicious payloads",
    "start": "263070",
    "end": "270330"
  },
  {
    "text": "so those payloads get served up to other users so it's kind of related but the inverse and the way you exploit them and",
    "start": "270330",
    "end": "276360"
  },
  {
    "text": "find them is completely different also this is not about web cache poisoning",
    "start": "276360",
    "end": "281850"
  },
  {
    "text": "uses in response splitting or request smuggling these are both cool techniques that will get your cache poisoning in",
    "start": "281850",
    "end": "287370"
  },
  {
    "text": "the right circumstances but a lot of the time they they don't really work and",
    "start": "287370",
    "end": "293250"
  },
  {
    "text": "they're not the topic of this presentation finally and most",
    "start": "293250",
    "end": "298350"
  },
  {
    "text": "importantly tactical web cache poisoning is not theoretical every example I'm",
    "start": "298350",
    "end": "304590"
  },
  {
    "text": "using in this entire presentation is based on a real system that I've proven can be exploited using this technique so",
    "start": "304590",
    "end": "314040"
  },
  {
    "text": "first let's take a very quick look at how caching is supposed to work here",
    "start": "314040",
    "end": "319500"
  },
  {
    "text": "we've got three users fetching the same resource one after the other this resource might be an image or a",
    "start": "319500",
    "end": "325170"
  },
  {
    "text": "JavaScript file or even just a HTML web page and when the cache sees this",
    "start": "325170",
    "end": "331080"
  },
  {
    "text": "resource being fetched for the first time it saves a local copy of it which means it can then the serve that copy up",
    "start": "331080",
    "end": "336450"
  },
  {
    "text": "to other users without having to communicate with the backend server which speeds the website up and",
    "start": "336450",
    "end": "342410"
  },
  {
    "text": "everyone's happy our objective with web cache poisoning is to send a request to",
    "start": "342410",
    "end": "348990"
  },
  {
    "text": "the server that causes a harmful malicious response to come back to me and then we want the cache to save that",
    "start": "348990",
    "end": "355560"
  },
  {
    "start": "349000",
    "end": "349000"
  },
  {
    "text": "and serve it up to other users the first step to achieving this is to ask the",
    "start": "355560",
    "end": "362730"
  },
  {
    "text": "question how does the cache know that those first three users are all fetching the same resource",
    "start": "362730",
    "end": "368630"
  },
  {
    "text": "it can't be doing a full on byte by byte can Paris on the on the on their HTTP",
    "start": "368630",
    "end": "374340"
  },
  {
    "start": "370000",
    "end": "370000"
  },
  {
    "text": "requests because HTTP requests are full of all kinds of junk for example if those users had different",
    "start": "374340",
    "end": "379980"
  },
  {
    "text": "web browsers the user-agent header would be different so the caching wouldn't really work caches addressed this",
    "start": "379980",
    "end": "387720"
  },
  {
    "text": "problem with the concept of cache keats they say we only care about certain",
    "start": "387720",
    "end": "393390"
  },
  {
    "text": "parts of the of the request generally just the host header and the request light so this is all that the cache does",
    "start": "393390",
    "end": "400650"
  },
  {
    "text": "a comparison or to work out if two requests are accessing the same results and that's",
    "start": "400650",
    "end": "408489"
  },
  {
    "text": "all well and good but it leads us on to the next question which is well what",
    "start": "408489",
    "end": "414369"
  },
  {
    "text": "happens if there's something important and it's not included in the cache key",
    "start": "414369",
    "end": "419519"
  },
  {
    "text": "this is where things start to get interesting so here we have two requests",
    "start": "419519",
    "end": "427259"
  },
  {
    "start": "425000",
    "end": "425000"
  },
  {
    "text": "to the same website to the same URL to retrieve a white paper but one of them is trying to fetch it in English and the",
    "start": "427259",
    "end": "433989"
  },
  {
    "text": "other one is trying to fetch it in Spanish thanks to this language cookie and that's absolutely fine and that would",
    "start": "433989",
    "end": "439929"
  },
  {
    "text": "work just great until you per cache in front of this website once you don't once you do that",
    "start": "439929",
    "end": "447129"
  },
  {
    "text": "it will break because the cookie header is not part of the default cache key and so the cache is completely oblivious to",
    "start": "447129",
    "end": "454239"
  },
  {
    "text": "this language cookie and that means that if the English user were to fetch this",
    "start": "454239",
    "end": "459849"
  },
  {
    "text": "white paper first they would accidentally poison the cache with the English version of the white paper and",
    "start": "459849",
    "end": "464919"
  },
  {
    "text": "all the users of other languages would end up receiving the white paper in English and by itself well obviously",
    "start": "464919",
    "end": "472089"
  },
  {
    "text": "that's just a harmless nuisance but this is the behavior that we're going to turn",
    "start": "472089",
    "end": "477189"
  },
  {
    "text": "to our advantage in effect everything that's not part of the cache key is part",
    "start": "477189",
    "end": "483969"
  },
  {
    "text": "of the cache poisoning attack surface so",
    "start": "483969",
    "end": "491289"
  },
  {
    "start": "489000",
    "end": "489000"
  },
  {
    "text": "how do you find cache poisoning well the first step is to identify a non keyed",
    "start": "491289",
    "end": "497079"
  },
  {
    "text": "input so probably a HTTP header or a cookie and I'm releasing the tour",
    "start": "497079",
    "end": "502809"
  },
  {
    "text": "program miner as an open source tool that works in the Pro and free versions of up so everyone can just run that tool",
    "start": "502809",
    "end": "509589"
  },
  {
    "text": "when that will hopefully do a decent job of finding some uncle'd inputs on your site once you've found the input the",
    "start": "509589",
    "end": "516339"
  },
  {
    "text": "next step is to work out if you can do anything interesting with it if genuinely all you can do with this",
    "start": "516339",
    "end": "522159"
  },
  {
    "text": "input is change the language like in the example I just showed you well that's pretty boring right that's not really",
    "start": "522159",
    "end": "527740"
  },
  {
    "text": "worth following up on but a lot of inputs can be used for more interesting stuff while you're doing these two",
    "start": "527740",
    "end": "535320"
  },
  {
    "text": "depp's it's absolutely crucial to specify a random cache buster a parameter that changes its value on",
    "start": "535320",
    "end": "541860"
  },
  {
    "text": "every request if you don't do this then you you risk getting a response from the",
    "start": "541860",
    "end": "547560"
  },
  {
    "text": "cache rather than from the backend server and that will effectively make any unhealed inputs that you're sending",
    "start": "547560",
    "end": "553820"
  },
  {
    "text": "completely invisible I think that this is why cache poisoning has remained so",
    "start": "553820",
    "end": "559830"
  },
  {
    "text": "low-profile for so many years even though once you know how to do it it's actually pretty easy once you found that",
    "start": "559830",
    "end": "568620"
  },
  {
    "text": "once you've found your unkeyed input and established it has some kind of exploit potential the next step is just to try",
    "start": "568620",
    "end": "574110"
  },
  {
    "text": "and get it saved in the cache and you may find that already happened because it's kind of a job of caches to save",
    "start": "574110",
    "end": "580500"
  },
  {
    "text": "stuff so they can be quite aggressive about it but if your response hasn't been saved in the cache then you will",
    "start": "580500",
    "end": "586710"
  },
  {
    "text": "need to fingerprint the cache fools because they may be saying things like we're only going to cache responses with",
    "start": "586710",
    "end": "591750"
  },
  {
    "text": "certain file extensions or certain status codes and so on and then you'll just need to troll the app to find the",
    "start": "591750",
    "end": "597030"
  },
  {
    "text": "target page as to find a page that fulfills the conditions and that you can poison during this step it's important",
    "start": "597030",
    "end": "605280"
  },
  {
    "text": "to have a static safety parameter I'm going to talk more about that shortly and that is pretty much all the theory",
    "start": "605280",
    "end": "612450"
  },
  {
    "text": "of cache poisoning so let's take a look",
    "start": "612450",
    "end": "618840"
  },
  {
    "text": "at what happens when we apply this methodology to some real websites now part of the goal of the section is just",
    "start": "618840",
    "end": "626310"
  },
  {
    "text": "that I want to show you the cache poisoning does work on real sites but I've chosen these specific examples to",
    "start": "626310",
    "end": "633330"
  },
  {
    "text": "show you some of the challenges you may run into with cache poisoning and give you some ideas as to how to deal with",
    "start": "633330",
    "end": "638940"
  },
  {
    "text": "those challenges as usual I've only targeted sites that have bug bounty",
    "start": "638940",
    "end": "643950"
  },
  {
    "text": "programs and all the specific examples I'm showing you here have been fixed but",
    "start": "643950",
    "end": "649710"
  },
  {
    "text": "the technique still work on many other websites I've exploited targets with all",
    "start": "649710",
    "end": "654960"
  },
  {
    "text": "of the caches that you can see logos off here and ultimately I think basically all caches can potentially be poisoned",
    "start": "654960",
    "end": "661920"
  },
  {
    "text": "using this technique because it's a design flaw in caches rather than an exploit for a specific",
    "start": "661920",
    "end": "668279"
  },
  {
    "text": "caching system so to begin we're going",
    "start": "668279",
    "end": "673350"
  },
  {
    "start": "671000",
    "end": "671000"
  },
  {
    "text": "to take a look at the home page of red tap home made of Red Hat popular Linux distribution now if you look at the home",
    "start": "673350",
    "end": "682199"
  },
  {
    "text": "page you might think this doesn't look very promising because we've got this cache control no cache headers it",
    "start": "682199",
    "end": "687990"
  },
  {
    "text": "explicitly says don't catch this and also there's no other headers that suggest that this site is actually using",
    "start": "687990",
    "end": "695189"
  },
  {
    "text": "caching so it would be tempting to give up at this point but that would be a",
    "start": "695189",
    "end": "700199"
  },
  {
    "text": "mistake because headers will lighten so if you run parameter on this and and",
    "start": "700199",
    "end": "706230"
  },
  {
    "text": "tell it to guess headers it will quickly find that the x4 did host header is",
    "start": "706230",
    "end": "711420"
  },
  {
    "start": "709000",
    "end": "709000"
  },
  {
    "text": "reflected inside a particular piece of HTML and so that's our monkeyed input",
    "start": "711420",
    "end": "718050"
  },
  {
    "text": "right and the next step is just to see well what damage can we do this now what",
    "start": "718050",
    "end": "724980"
  },
  {
    "text": "do you think the most obvious attack to try here mitts its cross-site scripting",
    "start": "724980",
    "end": "730559"
  },
  {
    "text": "right and sure enough we can break out of that input and inject arbitrary JavaScript into the response now by",
    "start": "730559",
    "end": "738480"
  },
  {
    "start": "731000",
    "end": "731000"
  },
  {
    "text": "itself this is useless right because we're only exploiting ourselves we are a hundred percent relying on their cache",
    "start": "738480",
    "end": "745050"
  },
  {
    "text": "to deliver this exploit to genuine users so we need to see if this has been saved",
    "start": "745050",
    "end": "750930"
  },
  {
    "text": "in the cache and to do that we just send the same request but we don't send any",
    "start": "750930",
    "end": "756029"
  },
  {
    "text": "any funny headers so we're just doing what a normal user would do and then we look at the response and sure enough our",
    "start": "756029",
    "end": "763019"
  },
  {
    "text": "malicious JavaScript has come back so that was it we just got full control",
    "start": "763019",
    "end": "768360"
  },
  {
    "text": "over the home page of write a calm and it wasn't very difficult right the only",
    "start": "768360",
    "end": "774480"
  },
  {
    "text": "other point that I should make is this safe equals one parameter that's highlighted in blue that's not part of",
    "start": "774480",
    "end": "781529"
  },
  {
    "text": "Red Hat's website that's something I've manually specified because if I didn't do that there was a risk that a lot of",
    "start": "781529",
    "end": "789089"
  },
  {
    "text": "genuine visitors to Red Hat site would start seeing pop-ups and they might get bit upset",
    "start": "789089",
    "end": "795678"
  },
  {
    "text": "so headers will lie to you but they will also tell you useful",
    "start": "796100",
    "end": "801750"
  },
  {
    "text": "things so having just mentioned that safety parameter let's pretend you a malicious person and you genuinely want",
    "start": "801750",
    "end": "809190"
  },
  {
    "text": "to poison the actual homepage of the site this is slightly more difficult",
    "start": "809190",
    "end": "815460"
  },
  {
    "text": "because this means you're in a kind of a race with all the genuine users of the website because you want your malicious",
    "start": "815460",
    "end": "821340"
  },
  {
    "text": "response to be cached rather than normal innocent response so you need your request to be the first request to hit",
    "start": "821340",
    "end": "828750"
  },
  {
    "text": "the server after the cache entry expires and sometimes headers will really help",
    "start": "828750",
    "end": "834960"
  },
  {
    "text": "you out when you're trying to to achieve that so this is the homepage of unity3d com makers of a well-known computer game",
    "start": "834960",
    "end": "842700"
  },
  {
    "start": "836000",
    "end": "836000"
  },
  {
    "text": "engine and we can inject JavaScript and stuff with this X host header but the",
    "start": "842700",
    "end": "849060"
  },
  {
    "text": "interesting thing is these age and max age headers taken together specify the",
    "start": "849060",
    "end": "855000"
  },
  {
    "text": "exact second that this response is going to expire in the cache so that tells us",
    "start": "855000",
    "end": "861210"
  },
  {
    "text": "the exact second that we need to start spamming our payload to the server in order to take full control of its site",
    "start": "861210",
    "end": "869660"
  },
  {
    "start": "871000",
    "end": "871000"
  },
  {
    "text": "HTTP headers can give you can give you other clues too so here we've got a different website which unfortunately I",
    "start": "871820",
    "end": "877830"
  },
  {
    "text": "can't name but it is quite well known and once again we can inject JavaScript",
    "start": "877830",
    "end": "883110"
  },
  {
    "text": "using the exported host header I think there's something in rails that just adds support for this header by default",
    "start": "883110",
    "end": "888900"
  },
  {
    "text": "so if you're using rails you might want to share that out but the interesting thing here is this very user agent",
    "start": "888900",
    "end": "896700"
  },
  {
    "text": "header so that's an instruction to the cache to add the user agent into the",
    "start": "896700",
    "end": "902040"
  },
  {
    "text": "cache key so that means that this request that I've sent here will poison the cache but they will only poison it",
    "start": "902040",
    "end": "908880"
  },
  {
    "text": "for other people using the same web browser as me and that's both a blessing",
    "start": "908880",
    "end": "915540"
  },
  {
    "text": "and a curse it's a bit of a headache because if I want to poison the majority of visitors then I need to send this",
    "start": "915540",
    "end": "923160"
  },
  {
    "text": "request over and over with every possible user agent but on the other hand it gives me the chance to be a bit",
    "start": "923160",
    "end": "930060"
  },
  {
    "text": "more creative with an elective about who I target for example",
    "start": "930060",
    "end": "935519"
  },
  {
    "text": "perhaps I happen to know that the development team for this website always uses Microsoft edge well that means I",
    "start": "935519",
    "end": "942899"
  },
  {
    "text": "can poison the cache for everyone who's not using edge and then the developers are going to have a really hard time",
    "start": "942899",
    "end": "948629"
  },
  {
    "text": "figuring out why all of their users keep getting exploited okay so I've looked at",
    "start": "948629",
    "end": "958649"
  },
  {
    "start": "956000",
    "end": "956000"
  },
  {
    "text": "three websites and in each case the poison has been done using basic reflected cross-site scripting although",
    "start": "958649",
    "end": "965220"
  },
  {
    "text": "through the cache poisoning we've escalated it to stored XSS so it's still serious but it's not always that easy on",
    "start": "965220",
    "end": "971569"
  },
  {
    "text": "this website catalog data.gov the exported host header is reflected inside",
    "start": "971569",
    "end": "978269"
  },
  {
    "text": "this data site root attribute and their encoding this input so we can't just",
    "start": "978269",
    "end": "983670"
  },
  {
    "text": "break out and inject HTML to exploit this we need to figure out what this",
    "start": "983670",
    "end": "990059"
  },
  {
    "text": "attribute is actually for so to do that I set up ahead of injection role in burp",
    "start": "990059",
    "end": "995279"
  },
  {
    "text": "so we just add this exported host header to all of my traffic and then I just browse the site and what I found was",
    "start": "995279",
    "end": "1002600"
  },
  {
    "text": "when I loaded certain pages my browser sent a request to the collaborator server to fetch some",
    "start": "1002600",
    "end": "1008740"
  },
  {
    "text": "internationalization data from it so using this on keyed input with cache",
    "start": "1008740",
    "end": "1015290"
  },
  {
    "text": "poisoning we can make people visiting this website fetch some kind of internationalization",
    "start": "1015290",
    "end": "1021049"
  },
  {
    "text": "data from our website let's have a look at what this data is supposed to look like it's meant to be a mapping of",
    "start": "1021049",
    "end": "1028668"
  },
  {
    "text": "English phrases into the phrase in a different language and the translated",
    "start": "1028669",
    "end": "1034760"
  },
  {
    "text": "phrase is just concatenated into the dot so what we can do is to everybody use",
    "start": "1034760",
    "end": "1041839"
  },
  {
    "text": "our translation file and then we can make our own custom translation file the",
    "start": "1041839",
    "end": "1047329"
  },
  {
    "text": "translates English phrases into malicious HTML that exploits users so",
    "start": "1047329",
    "end": "1052580"
  },
  {
    "text": "the end the end was all of this is that if anyone views a page on that website that has the text show more on it then",
    "start": "1052580",
    "end": "1059870"
  },
  {
    "text": "my exploit fights and this is a really this thing where you",
    "start": "1059870",
    "end": "1066460"
  },
  {
    "text": "where you serve up malicious JSON by tricking the scientist requesting JSON",
    "start": "1066460",
    "end": "1071680"
  },
  {
    "text": "from your website is a really common pattern with cache poisoning",
    "start": "1071680",
    "end": "1077340"
  },
  {
    "start": "1079000",
    "end": "1079000"
  },
  {
    "text": "now after that exploit I forgot to delete the header injection match from",
    "start": "1079080",
    "end": "1084430"
  },
  {
    "text": "the place role in burp and a few days later when I was just tidying stuff up and closing everything down I noticed a",
    "start": "1084430",
    "end": "1091270"
  },
  {
    "text": "really weird request and hit the collaborator server so it the null",
    "start": "1091270",
    "end": "1097870"
  },
  {
    "text": "origin is quite rare by itself but I at this point I'd never seen a lowercase",
    "start": "1097870",
    "end": "1103570"
  },
  {
    "text": "origin header coming from the browser before and it definitely didn't look",
    "start": "1103570",
    "end": "1109240"
  },
  {
    "text": "like this request had come from data gov and investigating it turned out that it",
    "start": "1109240",
    "end": "1114370"
  },
  {
    "text": "came from a core Firefox feature called Mozilla shield so this is a system for",
    "start": "1114370",
    "end": "1121620"
  },
  {
    "start": "1116000",
    "end": "1116000"
  },
  {
    "text": "silently installing extensions in the background for research and and",
    "start": "1121620",
    "end": "1127210"
  },
  {
    "text": "marketing purposes it's turned on by default in Firefox and you may have actually heard of it because they hit",
    "start": "1127210",
    "end": "1133000"
  },
  {
    "text": "the news last year when they installed a mr. robot extension er on a lot of systems and it was meant to be invisible",
    "start": "1133000",
    "end": "1138520"
  },
  {
    "text": "when it wasn't and some people got upset so when you open Firefox it sends this",
    "start": "1138520",
    "end": "1145420"
  },
  {
    "text": "request which is to fetch a list of URLs that contain recipes and the recipes",
    "start": "1145420",
    "end": "1151570"
  },
  {
    "text": "specify what extensions should be installed and it also resends this request like every 30 minutes or",
    "start": "1151570",
    "end": "1157780"
  },
  {
    "text": "something like that that's fine but of course for me burp had injected this",
    "start": "1157780",
    "end": "1163480"
  },
  {
    "text": "header exported host and that had overridden the URLs in the response and",
    "start": "1163480",
    "end": "1170190"
  },
  {
    "text": "they were using caching in that header wasn't in the cache key so the end effect was I could make every Firefox",
    "start": "1170190",
    "end": "1177700"
  },
  {
    "text": "browser on the planet connect to my system to fetch this list of recipes",
    "start": "1177700",
    "end": "1183490"
  },
  {
    "text": "which specify what extensions to install so that's pretty cool that's like 15",
    "start": "1183490",
    "end": "1188500"
  },
  {
    "text": "million browsers or something like that right so I raises the question well ok or what",
    "start": "1188500",
    "end": "1194020"
  },
  {
    "text": "can you do with these recipes now unfortunately for me Mozilla was smart",
    "start": "1194020",
    "end": "1199450"
  },
  {
    "text": "enough to these recipes so I couldn't just make my own malicious extension and then install",
    "start": "1199450",
    "end": "1204940"
  },
  {
    "text": "install that on 50 million computers but what I could do was replay old recipes",
    "start": "1204940",
    "end": "1211809"
  },
  {
    "text": "so for a start I could reinstall the mr. robot extension on everyone which would be hilarious but more practically",
    "start": "1211809",
    "end": "1220030"
  },
  {
    "text": "speaking I could look through all the extensions that had ever been been",
    "start": "1220030",
    "end": "1225190"
  },
  {
    "text": "supported by this system find one with a known vulnerability and then basically forcibly inflict that vulnerability on",
    "start": "1225190",
    "end": "1231970"
  },
  {
    "text": "every copy of Firefox worldwide also there were some unsigned versions of",
    "start": "1231970",
    "end": "1238390"
  },
  {
    "text": "these recipes which are used by Firefox but they are apparently used by Mumbai",
    "start": "1238390",
    "end": "1243820"
  },
  {
    "text": "by Mozilla's back end recipe development infrastructure so I could potentially",
    "start": "1243820",
    "end": "1250540"
  },
  {
    "text": "have used that to gain access to that infrastructure got hold of the signing key and then got my 50 million browser",
    "start": "1250540",
    "end": "1256179"
  },
  {
    "text": "botnet they patched this one remarkably fast when I reported it so a reoccurring",
    "start": "1256179",
    "end": "1267790"
  },
  {
    "text": "theme in cache poisoning is that we'll find some kind of unkeyed input and at first glance it will look completely",
    "start": "1267790",
    "end": "1273400"
  },
  {
    "text": "useless like this exported host header on this website of a well-known computer game that I can't name this value is",
    "start": "1273400",
    "end": "1281919"
  },
  {
    "text": "reflected in the domain attribute of the setcookie header now as far as I know that's more or less useless also on this",
    "start": "1281919",
    "end": "1289390"
  },
  {
    "start": "1288000",
    "end": "1288000"
  },
  {
    "text": "website the exported scheme header if you set that value to anything other than HTTP the server responds with a",
    "start": "1289390",
    "end": "1297370"
  },
  {
    "text": "redirect to itself once again harmless but if you send both of these headers at",
    "start": "1297370",
    "end": "1304929"
  },
  {
    "text": "the same time then suddenly we've got a redirect to a web site of our choice and",
    "start": "1304929",
    "end": "1310290"
  },
  {
    "text": "because this is being done at the server level and they've got the caching setup right I can effectively replace any",
    "start": "1310290",
    "end": "1317470"
  },
  {
    "text": "response on the entire server any URL on the whole site with a redirect to my",
    "start": "1317470",
    "end": "1322870"
  },
  {
    "text": "site so using that I could read about post requests to steal with C surf tokens and I could also redirect JSON",
    "start": "1322870",
    "end": "1330309"
  },
  {
    "text": "fetches in order to serve up malicious JSON and once again get dom-based cross-site scripting on",
    "start": "1330309",
    "end": "1335789"
  },
  {
    "text": "various pages much like why I did earlier on data.gov",
    "start": "1335789",
    "end": "1341090"
  },
  {
    "text": "now some systems go beyond using headers to generate your goals and they use it",
    "start": "1342080",
    "end": "1347909"
  },
  {
    "text": "for internal routing which is really pretty cool so go tyre comm is hosted using HubSpot",
    "start": "1347909",
    "end": "1354779"
  },
  {
    "text": "and HubSpot appear to use the exported server header to work out which client",
    "start": "1354779",
    "end": "1360000"
  },
  {
    "text": "you are now we can't exploit this directly because their encoding the input to exploit this I needed to",
    "start": "1360000",
    "end": "1367259"
  },
  {
    "text": "register myself on good hire comm make my own website put some malicious HTML",
    "start": "1367259",
    "end": "1372509"
  },
  {
    "text": "on that which they let me because there's my own website and then trick good hire man to serve in that up and trick",
    "start": "1372509",
    "end": "1378509"
  },
  {
    "text": "HubSpot into serving that up on good fire com so using this and then of",
    "start": "1378509",
    "end": "1385679"
  },
  {
    "text": "course cloud from there would cash that and serve out to everybody accessing code wire so using this I could take",
    "start": "1385679",
    "end": "1392309"
  },
  {
    "text": "full control over any page on any website hosted on HubSpot now I reported",
    "start": "1392309",
    "end": "1399240"
  },
  {
    "text": "this to good hire because those were the guys with the bug bounty program and they passed it on to HubSpot who had",
    "start": "1399240",
    "end": "1405149"
  },
  {
    "text": "decided to resolve the issue by permanently banning my IP address which",
    "start": "1405149",
    "end": "1411870"
  },
  {
    "text": "wasn't very polite but I've checked back and it does look like they have fixed the root issue so if you if you're using",
    "start": "1411870",
    "end": "1418649"
  },
  {
    "text": "hub spot then I think you're probably okay right now this one is my",
    "start": "1418649",
    "end": "1424980"
  },
  {
    "start": "1422000",
    "end": "1422000"
  },
  {
    "text": "second-favorite attack in this research partly because I'm exploiting a security company",
    "start": "1424980",
    "end": "1431750"
  },
  {
    "text": "because they use their own security product on their website so blogs or",
    "start": "1431750",
    "end": "1437940"
  },
  {
    "text": "CloudFlare com he's hosted using ghost and ghost is doing something with the",
    "start": "1437940",
    "end": "1446580"
  },
  {
    "text": "exported host header but if we try the attack that just works on HubSpot and",
    "start": "1446580",
    "end": "1451639"
  },
  {
    "text": "specify our own domain name after signing up with ghost it doesn't work",
    "start": "1451639",
    "end": "1456990"
  },
  {
    "text": "they give the correct response after a mysterious 10-second wait which I never figured out the cause off to exploit",
    "start": "1456990",
    "end": "1465659"
  },
  {
    "text": "this site we need to kind of hit point in ghost stack and we can do that",
    "start": "1465659",
    "end": "1471220"
  },
  {
    "text": "by instead of specifying our custom ghost domain name we can specify our",
    "start": "1471220",
    "end": "1476920"
  },
  {
    "text": "ghost subdomain which triggers a redirect to our custom domain so using this so I could replace any response on",
    "start": "1476920",
    "end": "1483070"
  },
  {
    "text": "that site with a redirect to my domain however when it came to getting this",
    "start": "1483070",
    "end": "1490060"
  },
  {
    "text": "stored in the cache things got a bit tricky because CloudFlare site was",
    "start": "1490060",
    "end": "1495310"
  },
  {
    "text": "configured to only cache things with certain file extensions so I could we",
    "start": "1495310",
    "end": "1502030"
  },
  {
    "start": "1496000",
    "end": "1496000"
  },
  {
    "text": "live eight images which was kind of funny I could just hijack any images on any of their blog posts but when I tried",
    "start": "1502030",
    "end": "1509980"
  },
  {
    "text": "to do something useful with it and hijack JavaScript I ran into quite a",
    "start": "1509980",
    "end": "1515350"
  },
  {
    "text": "significant problem which is that this redirect the ghost was issuing was using the HTTP protocol rather than HTTP and",
    "start": "1515350",
    "end": "1522970"
  },
  {
    "text": "that means that browsers mixed content protection kicks in and blocks this redirect effectively completely",
    "start": "1522970",
    "end": "1529480"
  },
  {
    "text": "preventing my attack from working how I spent ages trying to find Oh to find a",
    "start": "1529480",
    "end": "1536710"
  },
  {
    "text": "way around this and how I was even considering just contacting ghost support and just asking them to change",
    "start": "1536710",
    "end": "1542950"
  },
  {
    "text": "the redirect to HTTPS but never obviously somebody echoes with that plan",
    "start": "1542950",
    "end": "1548260"
  },
  {
    "text": "so I didn't go ahead with that in the end what I decided to do instead was to",
    "start": "1548260",
    "end": "1554050"
  },
  {
    "text": "try and crowdsource a solution so I built a replica of this mixed content",
    "start": "1554050",
    "end": "1559210"
  },
  {
    "text": "problem and I stuck it in my online hacking game and then I tweeted saying here's a challenge there's no known",
    "start": "1559210",
    "end": "1565960"
  },
  {
    "start": "1560000",
    "end": "1560000"
  },
  {
    "text": "solution and the first person to to solve it I will get half the back half the bug bounty and that led to a great",
    "start": "1565960",
    "end": "1573610"
  },
  {
    "text": "community response and two solid solutions the first one was someone",
    "start": "1573610",
    "end": "1580780"
  },
  {
    "text": "found that in Safari if the website you'll be directing to is in safaris strict Transport Security cache then it",
    "start": "1580780",
    "end": "1589000"
  },
  {
    "text": "will get automatically upgraded to HTTPS before the mixed content protection got",
    "start": "1589000",
    "end": "1594760"
  },
  {
    "text": "capensis so that means I can exploit Safari users also someone then found",
    "start": "1594760",
    "end": "1601410"
  },
  {
    "text": "in Microsoft edge if your response sent",
    "start": "1601410",
    "end": "1606780"
  },
  {
    "text": "over HTTP is a 302 redirect to HTTPS URL edge will just follow that and execute",
    "start": "1606780",
    "end": "1613740"
  },
  {
    "text": "it which is which is great for me so this so that means this exploit will work on edge users as well and it's also",
    "start": "1613740",
    "end": "1620970"
  },
  {
    "text": "a full mixed content bypass edge so if there's any Microsoft people in the audience you might want to look at that",
    "start": "1620970",
    "end": "1628350"
  },
  {
    "text": "one so using this the end result is if you went to blogs or CloudFlare comm or any",
    "start": "1628350",
    "end": "1633540"
  },
  {
    "text": "other website hosted on Ghost Dog I could take full control over the site",
    "start": "1633540",
    "end": "1640230"
  },
  {
    "text": "over your account on there if you were using edge or Safari and if not well I could still hide write images which",
    "start": "1640230",
    "end": "1645540"
  },
  {
    "text": "would be useful for tracking purposes at least right now things are beginning to",
    "start": "1645540",
    "end": "1653550"
  },
  {
    "start": "1650000",
    "end": "1650000"
  },
  {
    "text": "get more difficult so here using this X",
    "start": "1653550",
    "end": "1658740"
  },
  {
    "text": "footed host header yet again we can take control over this Open Graph Yoel meta",
    "start": "1658740",
    "end": "1665370"
  },
  {
    "text": "property we can't break out and get exercise so we need to figure out what this property is for Open Graph is a",
    "start": "1665370",
    "end": "1672080"
  },
  {
    "text": "protocol by Facebook for specifying what happens when your website is shared so",
    "start": "1672080",
    "end": "1677280"
  },
  {
    "text": "if someone presses the share button on your page or if someone just shares your URL on Facebook and so using this value",
    "start": "1677280",
    "end": "1685530"
  },
  {
    "text": "that we can control we can effectively make someone share arbitrary content",
    "start": "1685530",
    "end": "1690630"
  },
  {
    "text": "when they try to share this webpage now it took to get this cache that I had to find a specific page on the site that",
    "start": "1690630",
    "end": "1697080"
  },
  {
    "text": "had the right caching headers and I also had to specify this session ID cookie",
    "start": "1697080",
    "end": "1702360"
  },
  {
    "text": "for some reason but even after doing all of that my like hijacking attack wasn't",
    "start": "1702360",
    "end": "1708930"
  },
  {
    "text": "working and it turned out that this target was using CloudFlare and they",
    "start": "1708930",
    "end": "1714000"
  },
  {
    "text": "have a lot of caches and Facebook was hitting a different cache from the one that I was poisoning so Facebook was",
    "start": "1714000",
    "end": "1720840"
  },
  {
    "text": "hitting a cache that was in Atlanta so I googled for cheap VPN servers in Atlanta",
    "start": "1720840",
    "end": "1728330"
  },
  {
    "text": "found one and then use that to do the poisoning and that successfully poisoned",
    "start": "1728330",
    "end": "1733860"
  },
  {
    "text": "the fact the cache that face it was hidden so here's a quick demo I've had to redact it quite heavily",
    "start": "1733860",
    "end": "1739120"
  },
  {
    "text": "unfortunately so on this webpage well-known computer games someone",
    "start": "1739120",
    "end": "1744310"
  },
  {
    "text": "presses share and they end up sharing my content something particularly cool",
    "start": "1744310",
    "end": "1749800"
  },
  {
    "text": "about this is that Facebook have their own cache so that malicious Open Graph",
    "start": "1749800",
    "end": "1758080"
  },
  {
    "text": "viewer will get cached in Facebook's cache as well as CloudFlare cache and that means that even if they fix the",
    "start": "1758080",
    "end": "1764170"
  },
  {
    "text": "vulnerability and then clear that clear the cowled flare cache they'll still continue to have their likes hijacked",
    "start": "1764170",
    "end": "1769750"
  },
  {
    "text": "until Facebook's cache expires as well so it's quite a persistent kind of attack so that was great but do we",
    "start": "1769750",
    "end": "1778960"
  },
  {
    "start": "1777000",
    "end": "1777000"
  },
  {
    "text": "really need to hire a VPS every single time that we want to poison a specific",
    "start": "1778960",
    "end": "1784960"
  },
  {
    "text": "cache whoa I decided to just do a bit of research to find out so CloudFlare has a north cache caches",
    "start": "1784960",
    "end": "1791200"
  },
  {
    "text": "you can see them all here and they have this fantastic feature which is on any cloud flower website you can send a",
    "start": "1791200",
    "end": "1798160"
  },
  {
    "text": "request to CD and the CGI / trace and you'll get some metadata back and included in that metadata is the",
    "start": "1798160",
    "end": "1805060"
  },
  {
    "text": "highlighted line which tells you which cache your request is hid",
    "start": "1805060",
    "end": "1810450"
  },
  {
    "text": "so I wrote a little bash one-liner that sends a request to my target website to",
    "start": "1810450",
    "end": "1817480"
  },
  {
    "text": "this trace page and it votes this this request through every single go through",
    "start": "1817480",
    "end": "1823960"
  },
  {
    "text": "every single IP the CloudFlare oh and then it looks at which cache this",
    "start": "1823960",
    "end": "1829210"
  },
  {
    "text": "request hits so their end result is that gave me a list of which IP I could send my request to to poison which cache so",
    "start": "1829210",
    "end": "1838110"
  },
  {
    "text": "generally speaking I you you can poison cache in Ann Arbor Qi location worldwide",
    "start": "1838110",
    "end": "1844360"
  },
  {
    "text": "without using a VPS as long as you're willing to do a bit of recon now at this",
    "start": "1844360",
    "end": "1852700"
  },
  {
    "start": "1850000",
    "end": "1850000"
  },
  {
    "text": "stage we've seen quite a few different attacks almost all of them have been doing some kind of host overrides just",
    "start": "1852700",
    "end": "1858430"
  },
  {
    "text": "because that header is widely supported by a lot of frameworks I'd also found",
    "start": "1858430",
    "end": "1864940"
  },
  {
    "text": "exploit using some weird one-off headers like bucket translate and path underscore",
    "start": "1864940",
    "end": "1871050"
  },
  {
    "text": "info but oh and I found one amazing one last week that hasn't been passed yet",
    "start": "1871050",
    "end": "1877230"
  },
  {
    "text": "but they had a Web Application Firewall that was scanning all there were all the request headers for Bert collaborator",
    "start": "1877230",
    "end": "1884070"
  },
  {
    "text": "net so you can specify an arbitrary request header for a burp collaborator don't net in it and the RAF would block",
    "start": "1884070",
    "end": "1891510"
  },
  {
    "text": "this request and then that would get saved in the cache so you could effectively make the RAF think that",
    "start": "1891510",
    "end": "1897840"
  },
  {
    "text": "every single visitor to any page on the website was a hacker and just block",
    "start": "1897840",
    "end": "1903860"
  },
  {
    "text": "anyway what I won't introduce you to is my favorite header which is the ex",
    "start": "1903860",
    "end": "1910470"
  },
  {
    "text": "original Yogo header it also has a companion which is ex rewrite URL which",
    "start": "1910470",
    "end": "1916470"
  },
  {
    "text": "is supported on the same systems and does exactly the same thing this header",
    "start": "1916470",
    "end": "1921500"
  },
  {
    "text": "overrides the path that's used by the server so even before we get into cache",
    "start": "1921500",
    "end": "1928500"
  },
  {
    "text": "poisoning it's really quite useful because for example on unities website there my favorite example if we access",
    "start": "1928500",
    "end": "1937140"
  },
  {
    "text": "slash admin they've got a front-end server that blocks that but if you put slash admin in the ex original URL their",
    "start": "1937140",
    "end": "1943800"
  },
  {
    "text": "front in server doesn't see this header and lets it through it now the reason",
    "start": "1943800",
    "end": "1949560"
  },
  {
    "text": "this head is so awesome is because it's supported by an unbelievable number of systems well I originally spotted this",
    "start": "1949560",
    "end": "1956700"
  },
  {
    "text": "header on some targets that were running Drupal 8 and when I reported it to",
    "start": "1956700",
    "end": "1962550"
  },
  {
    "text": "Drupal the developer was like what is this header I've never seen this before and I can't find any references to in",
    "start": "1962550",
    "end": "1969780"
  },
  {
    "text": "our code base and it turns out Drupal 8 is partly built on Symphony and Symphony",
    "start": "1969780",
    "end": "1977580"
  },
  {
    "text": "has this header in it but the only reason that the symphony framework has this header is becoming because it comes",
    "start": "1977580",
    "end": "1983910"
  },
  {
    "text": "from Zend so I think if an if in effect if you're using any framework that's",
    "start": "1983910",
    "end": "1989400"
  },
  {
    "text": "built on a framework that's me want a framework that's using his end you end up supporting this header so let's have",
    "start": "1989400",
    "end": "1996210"
  },
  {
    "text": "a look at what we can do with it here",
    "start": "1996210",
    "end": "2002289"
  },
  {
    "start": "1999000",
    "end": "1999000"
  },
  {
    "text": "yes so if the target is using an external cash like CloudFlare like every example I've shown you so far",
    "start": "2002410",
    "end": "2008510"
  },
  {
    "text": "then we can replace any path on the server with the response to any other",
    "start": "2008510",
    "end": "2015200"
  },
  {
    "text": "path so for example on store unity comm",
    "start": "2015200",
    "end": "2021650"
  },
  {
    "text": "we can't do anything with the query because the query in that header is ignored but we can sort the paths around",
    "start": "2021650",
    "end": "2029030"
  },
  {
    "text": "so the effect of sending this request to their server is if someone tries to",
    "start": "2029030",
    "end": "2034280"
  },
  {
    "text": "fetch the unity for education page they get the unity for gambling page which",
    "start": "2034280",
    "end": "2040490"
  },
  {
    "text": "looks like this so that's definitely entertaining and obviously there's more",
    "start": "2040490",
    "end": "2045980"
  },
  {
    "text": "harmful things we can do that do with this right like we can swap the change password page for the logout page so you",
    "start": "2045980",
    "end": "2052700"
  },
  {
    "text": "can't change your password but to really prove how dangerous this header is I",
    "start": "2052700",
    "end": "2058700"
  },
  {
    "text": "need a case study and for the case study I'm gonna use a vanilla installation of",
    "start": "2058700",
    "end": "2064250"
  },
  {
    "text": "Drupal 8 so triple 8 also has an",
    "start": "2064250",
    "end": "2071030"
  },
  {
    "start": "2066000",
    "end": "2066000"
  },
  {
    "text": "internal cache which is enabled by default and this cache is aware of the ex original URL header so we shouldn't",
    "start": "2071030",
    "end": "2077628"
  },
  {
    "text": "be able to do internal cache poisoning with this header right but when my colleague gareth hayes was helping me",
    "start": "2077629",
    "end": "2084679"
  },
  {
    "text": "out testing one of these sites he noticed something wasn't quite right and eventually figured out that Drupal's",
    "start": "2084679",
    "end": "2091970"
  },
  {
    "text": "internal cache has a bug in how it handles this ex original URL header probably because they don't know that",
    "start": "2091970",
    "end": "2098360"
  },
  {
    "text": "the head of exists so this cache thinks that the query string in this header is",
    "start": "2098360",
    "end": "2104090"
  },
  {
    "text": "used so what we've got is kind of the inverse of what I just showed you so now",
    "start": "2104090",
    "end": "2109490"
  },
  {
    "text": "we're doing cache poisoning on a Drupal site that does not have an external cache we can't do anything with the path",
    "start": "2109490",
    "end": "2115750"
  },
  {
    "text": "but we can effectively replace the response to any query string with the response to any other query so the end",
    "start": "2115750",
    "end": "2122390"
  },
  {
    "text": "result of sending this is if someone does a search for kittens they get search results for snuff",
    "start": "2122390",
    "end": "2127430"
  },
  {
    "text": "and that's obviously that example is not that great but this is really quite",
    "start": "2127430",
    "end": "2133160"
  },
  {
    "text": "powerful by itself but for generic mass exploitation of Drupal sites we need one",
    "start": "2133160",
    "end": "2140000"
  },
  {
    "text": "more ingredient and luckily Drupal provides so Drupal",
    "start": "2140000",
    "end": "2146000"
  },
  {
    "start": "2142000",
    "end": "2142000"
  },
  {
    "text": "has this feature on any response that's a redirect if you specify a parameter called destination you can",
    "start": "2146000",
    "end": "2152809"
  },
  {
    "text": "overwrite the destination of the redirect and they do some filtering and stuff to try and make sure this isn't",
    "start": "2152809",
    "end": "2158869"
  },
  {
    "text": "redirecting you to an external site but we can bypass that fairly easily so by",
    "start": "2158869",
    "end": "2164780"
  },
  {
    "text": "itself this is just an open video X right it's it's like it's nothing but now we've got all the ingredients that",
    "start": "2164780",
    "end": "2170329"
  },
  {
    "text": "we need to really have some fun so business Pinterest comm uses Drupal",
    "start": "2170329",
    "end": "2178609"
  },
  {
    "start": "2174000",
    "end": "2174000"
  },
  {
    "text": "and on certain pages they import JavaScript files via redirects so what",
    "start": "2178609",
    "end": "2186859"
  },
  {
    "text": "we can do is we can use internal cache poisoning to change the parameters on this javascript import and using the",
    "start": "2186859",
    "end": "2193760"
  },
  {
    "text": "ability to change parameters we're going to inject the destination parameter and the end result is that when someone",
    "start": "2193760",
    "end": "2200510"
  },
  {
    "text": "loads any of these pages on business da pinterest calm these pages that are meant to be completely static they end",
    "start": "2200510",
    "end": "2207200"
  },
  {
    "text": "up importing javascript from my website and i get full control over their account so that's pretty cool but that's",
    "start": "2207200",
    "end": "2214849"
  },
  {
    "text": "still not a full-on exploitation of all Drupal sites because we were like we're using this we can only hijack existing",
    "start": "2214849",
    "end": "2222410"
  },
  {
    "text": "redirect what we really want to do is hijack arbitrary responses from the",
    "start": "2222410",
    "end": "2228349"
  },
  {
    "text": "server now in every example that I've shown you so far we've poisoned the",
    "start": "2228349",
    "end": "2234770"
  },
  {
    "text": "cache in order to exploit the end user the victim but Drupal is generally used",
    "start": "2234770",
    "end": "2240770"
  },
  {
    "text": "with two caches you've got this internal cache that's turned on by default and then every so every example of it that",
    "start": "2240770",
    "end": "2247190"
  },
  {
    "text": "I've seen in the wild has also had another cache like varnish because if you don't have something like that and",
    "start": "2247190",
    "end": "2252230"
  },
  {
    "text": "then it's incredibly slow so what if the victim of the first cache poisoning",
    "start": "2252230",
    "end": "2258020"
  },
  {
    "text": "attack is the other cache we can do a kind of two-stage attack so",
    "start": "2258020",
    "end": "2264220"
  },
  {
    "text": "the first stage is roughly similar to why I just showed you on business top Pinterest we're going to poison an",
    "start": "2264220",
    "end": "2270180"
  },
  {
    "text": "arbitrary redirect response in the internal Drupal cache but then we can",
    "start": "2270180",
    "end": "2276580"
  },
  {
    "text": "send another request which will effectively use the poisoned internal",
    "start": "2276580",
    "end": "2282070"
  },
  {
    "text": "cache to move this poison to an arbitrary location in the external cache",
    "start": "2282070",
    "end": "2287560"
  },
  {
    "text": "and the end result of that is that we can replace any response on the server with a redirect to our site which is",
    "start": "2287560",
    "end": "2294160"
  },
  {
    "text": "really quite powerful browsers weren't built with that kind of attack in mind and for example on stored or unity com",
    "start": "2294160",
    "end": "2302080"
  },
  {
    "text": "you can try and download the Unity installer but using this cache poisoning you could rely back the download so they",
    "start": "2302080",
    "end": "2309940"
  },
  {
    "text": "would be on unity com they click download button they're still on unity calm but the Installer actually came",
    "start": "2309940",
    "end": "2315880"
  },
  {
    "text": "from my website and it's malware and you can use this kind of technique on any",
    "start": "2315880",
    "end": "2322750"
  },
  {
    "text": "Drupal 8 site so let's try and do a quick demo of this which is hopefully",
    "start": "2322750",
    "end": "2330450"
  },
  {
    "text": "going to work so here's as this is have just a vanilla installation of Drupal 8",
    "start": "2330450",
    "end": "2336580"
  },
  {
    "text": "the only configuration I've done is I've turned on caching and I've put a varnish",
    "start": "2336580",
    "end": "2342280"
  },
  {
    "text": "cache in front of it if so first let me just quickly show if you right click and tell kram winner to",
    "start": "2342280",
    "end": "2348490"
  },
  {
    "text": "guess headers then that will find some headers hopefully and all and also as of",
    "start": "2348490",
    "end": "2357070"
  },
  {
    "text": "about now there's an update to burp so the active scan will also find this",
    "start": "2357070",
    "end": "2363040"
  },
  {
    "text": "stuff let's see okay well the active",
    "start": "2363040",
    "end": "2368980"
  },
  {
    "text": "scan worked anyway so here we can see that that's spotted that and for my know",
    "start": "2368980",
    "end": "2375370"
  },
  {
    "text": "we'll probably find the headers eventually but it's it's trying millions and millions of headers so it does take",
    "start": "2375370",
    "end": "2380920"
  },
  {
    "text": "a while sometimes so let's try and do this attack on it the first thing you",
    "start": "2380920",
    "end": "2386680"
  },
  {
    "text": "need to do is just find a redirects so we have one right here and then we're just going to take that take that path",
    "start": "2386680",
    "end": "2394309"
  },
  {
    "text": "and we're gonna hit it using the X original your head and others destinations so now we're trying to",
    "start": "2394309",
    "end": "2401479"
  },
  {
    "text": "poison the internal cache and that seems to be working and we've poisoned so",
    "start": "2401479",
    "end": "2406549"
  },
  {
    "text": "we've poisoned that URL on the internal cache hacen and so what we're gonna do",
    "start": "2406549",
    "end": "2413059"
  },
  {
    "text": "now is try and shift this poison into the external cache so we're going to leave this head of exactly the same but",
    "start": "2413059",
    "end": "2420499"
  },
  {
    "text": "change the path so we should get the same response hopefully yes great so now",
    "start": "2420499",
    "end": "2427670"
  },
  {
    "text": "the cache at that point should be poisoned in varnish so now we're going to resend this this request as a normal",
    "start": "2427670",
    "end": "2434689"
  },
  {
    "text": "user would and it looks like it is poisoned so now if I just go to this",
    "start": "2434689",
    "end": "2440809"
  },
  {
    "text": "website and press the login button then with a bit of luck yeah we end up on my",
    "start": "2440809",
    "end": "2447890"
  },
  {
    "text": "hostile website which just has a replica of the login page eagerly waiting for your credentials so there was a chord",
    "start": "2447890",
    "end": "2464989"
  },
  {
    "text": "there was a coordinated security release by symphony drupal wins end last week to fix this issue",
    "start": "2464989",
    "end": "2470390"
  },
  {
    "text": "it was super low profile so please install that if you haven't also there's",
    "start": "2470390",
    "end": "2475819"
  },
  {
    "text": "probably loads of other frameworks based on Zend that won't back port this fix for years so it's definitely still",
    "start": "2475819",
    "end": "2482359"
  },
  {
    "text": "something that you want to watch out for and I'd like to give a brief shout out to the unity security team for letting",
    "start": "2482359",
    "end": "2488269"
  },
  {
    "text": "them letting me use them in tons of examples here which they didn't have to because it's a private by bounty program",
    "start": "2488269",
    "end": "2495160"
  },
  {
    "text": "ok defense now the best defense against cache poisoning is obviously not to use",
    "start": "2495160",
    "end": "2502579"
  },
  {
    "start": "2496000",
    "end": "2496000"
  },
  {
    "text": "caching the my it sound like unrealistic advice but I think some people they",
    "start": "2502579",
    "end": "2508849"
  },
  {
    "text": "might do something like oh I'm experiencing a DDoS I'm gonna sign up for CloudFlare and they don't actually",
    "start": "2508849",
    "end": "2514489"
  },
  {
    "text": "particularly need cloud flares caching but it's turned on by default so they end up runnable to cache poisoning so",
    "start": "2514489",
    "end": "2521089"
  },
  {
    "text": "just turn it off if you don't need it dadless of whether you're intentionally",
    "start": "2521089",
    "end": "2526220"
  },
  {
    "text": "using caching though some of your some of your visitors may be going through servers that are doing caching so it",
    "start": "2526220",
    "end": "2535960"
  },
  {
    "text": "everyone should avoid on on qidan per avoid taking input from haiti to be headers and cookies as much as possible",
    "start": "2535960",
    "end": "2544100"
  },
  {
    "text": "and also all audit your application with with parameter to see if you can find",
    "start": "2544100",
    "end": "2549410"
  },
  {
    "text": "any unkeyed inputs that your framework has just sneaked in the support for if you find them the best thing to do is",
    "start": "2549410",
    "end": "2555860"
  },
  {
    "text": "just to disable these but if that's not an option for some reason you may be able to configure the caching layer to",
    "start": "2555860",
    "end": "2562190"
  },
  {
    "text": "automatically strip the headers and has a last resort well if you need this header you can always add it into the",
    "start": "2562190",
    "end": "2569330"
  },
  {
    "text": "cache key which effectively means that it can't be used for cache poisoning so",
    "start": "2569330",
    "end": "2577100"
  },
  {
    "text": "you can grab the white paper online paramo is open source you can grab that",
    "start": "2577100",
    "end": "2582800"
  },
  {
    "text": "too and also for the first time this year i've built an online cache",
    "start": "2582800",
    "end": "2588020"
  },
  {
    "text": "poisoning challenge in my hacking game so you can have a shot at that to get",
    "start": "2588020",
    "end": "2593300"
  },
  {
    "text": "some practical experience with it without accidentally taking out any websites so the three key things to take",
    "start": "2593300",
    "end": "2601340"
  },
  {
    "start": "2599000",
    "end": "2599000"
  },
  {
    "text": "away the header based input is inherently dangerous frameworks can hide",
    "start": "2601340",
    "end": "2607270"
  },
  {
    "text": "lethal functionality and cache poisoning is not theoretical I'm going to take",
    "start": "2607270",
    "end": "2614150"
  },
  {
    "text": "five minutes of questions now if you've got any more after that feel free to come and speak to me at the back or just",
    "start": "2614150",
    "end": "2620150"
  },
  {
    "text": "chat me an email don't forget to follow me on Twitter thank you for listening",
    "start": "2620150",
    "end": "2625870"
  },
  {
    "text": "[Applause]",
    "start": "2626870",
    "end": "2636219"
  }
]