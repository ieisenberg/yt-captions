[
  {
    "text": "good morning everyone Welcome to my talk firm pass the hash to code execution on",
    "start": "2560",
    "end": "8000"
  },
  {
    "text": "Schneider Electric M340 PLC's We have a lot to cover today So let's get started",
    "start": "8000",
    "end": "13920"
  },
  {
    "text": "My name is Amir Zman I'm an embedded security researcher and MSE graduate student",
    "start": "13920",
    "end": "20960"
  },
  {
    "text": "under the supervision of professor of vishai wall at Tel Aviv University So before we start let's provide some",
    "start": "20960",
    "end": "28160"
  },
  {
    "text": "background information and motivation of the field we are going to talk today So with the growth of industry 4.0",
    "start": "28160",
    "end": "35480"
  },
  {
    "text": "revolution industrial devices including PLC's programmable logic controllers are",
    "start": "35480",
    "end": "42160"
  },
  {
    "text": "increasingly connected to the internet which brings a whole world of features",
    "start": "42160",
    "end": "47520"
  },
  {
    "text": "and improved efficiency However it also exposed them to cyber security risks",
    "start": "47520",
    "end": "55680"
  },
  {
    "text": "PSC vendors are increasingly improving and enhancing their protocols in terms",
    "start": "55680",
    "end": "61199"
  },
  {
    "text": "of cyber security while maintaining their operational functionality",
    "start": "61199",
    "end": "66439"
  },
  {
    "text": "However are these improvements are sufficient to connect our PLC's to the",
    "start": "66439",
    "end": "71720"
  },
  {
    "text": "internet We hopefully have an answer for this question by the end of this presentation",
    "start": "71720",
    "end": "78159"
  },
  {
    "text": "So in our research we researched the Schneider Electactic Modicon M340 PLC's",
    "start": "78159",
    "end": "84240"
  },
  {
    "text": "with the latest version of 3.6 as of October",
    "start": "84240",
    "end": "89560"
  },
  {
    "text": "2024 These PLC's are pretty much common They are widely used in various industries such as water and water",
    "start": "89560",
    "end": "97360"
  },
  {
    "text": "wastewater management oil and gas food and beverage and many more",
    "start": "97360",
    "end": "104079"
  },
  {
    "text": "First let's meet our setup that will accompany us throughout the talk today We have our engineering station on",
    "start": "104079",
    "end": "110960"
  },
  {
    "text": "our left This engineering station is aimed for configuring and monitoring the PLC",
    "start": "110960",
    "end": "116320"
  },
  {
    "text": "We refer to it as a PC for short On our on our right we have our",
    "start": "116320",
    "end": "122159"
  },
  {
    "text": "M340 processor module which we referred for short as a PLC The PC will act as",
    "start": "122159",
    "end": "129920"
  },
  {
    "text": "the client The PLC will act as the host In between we have our communication channel which is transmit the humus",
    "start": "129920",
    "end": "139800"
  },
  {
    "text": "protocol So the humus protocol is a proprietary protocol invented by Schneider aimed for configuring and",
    "start": "139800",
    "end": "146319"
  },
  {
    "text": "monitoring their PLC's It basically transmit over TCP modus over TCP",
    "start": "146319",
    "end": "152640"
  },
  {
    "text": "protocol with a unique modbus function code of 5A As we can see down below we",
    "start": "152640",
    "end": "158400"
  },
  {
    "text": "can see the modus header standard one alongside with the humus message with a fiveway unique function code We have two",
    "start": "158400",
    "end": "166480"
  },
  {
    "text": "types of sessions we may encounter We have public session which does not require any any authentication process",
    "start": "166480",
    "end": "174760"
  },
  {
    "text": "beforehand and also is the default session between the PC and the PLC On",
    "start": "174760",
    "end": "180400"
  },
  {
    "text": "the other hand we have reserved session which does require prior authentication",
    "start": "180400",
    "end": "185920"
  },
  {
    "text": "and we denote it as both sides have a green border over them as well as the",
    "start": "185920",
    "end": "191120"
  },
  {
    "text": "communication channel and this is how you know that a result session is",
    "start": "191120",
    "end": "196319"
  },
  {
    "text": "established between both sides We have two types of messages as well We have",
    "start": "196319",
    "end": "201680"
  },
  {
    "text": "public messages which can be transmitted both in public and reserved sessions So",
    "start": "201680",
    "end": "207760"
  },
  {
    "text": "the fact that they can be transmitted over public sessions is pretty obvious But the fact also that they can be",
    "start": "207760",
    "end": "213840"
  },
  {
    "text": "transmitted over reset sessions means that they basically can be transmitted",
    "start": "213840",
    "end": "219200"
  },
  {
    "text": "any time regardless the ongoing session They do not have privilege access rights",
    "start": "219200",
    "end": "225040"
  },
  {
    "text": "and they don't have any authentication measure to identify them We represent",
    "start": "225040",
    "end": "230959"
  },
  {
    "text": "them as a simple envelope On the other hand we have reserved messages which can be transmitted only in reserved sessions",
    "start": "230959",
    "end": "238560"
  },
  {
    "text": "They do have privilege access rights and they have a signature that is their",
    "start": "238560",
    "end": "244480"
  },
  {
    "text": "authentication measure to verify their authenticity We denote them as an envelope with a red stamp over them The",
    "start": "244480",
    "end": "251280"
  },
  {
    "text": "red stamp stands for the signature So let's have some examples to",
    "start": "251280",
    "end": "256400"
  },
  {
    "text": "just to clarify it On our left we can see read memory block which is not privileged message opposed to write",
    "start": "256400",
    "end": "263600"
  },
  {
    "text": "memory block which modifies the memory It's a privileged message Also we have get pulsey info on our left which is not",
    "start": "263600",
    "end": "270880"
  },
  {
    "text": "privileged opposed to beginning or downloading or uploading a project which is privileged And I hope we got a",
    "start": "270880",
    "end": "279400"
  },
  {
    "text": "point We have already met our PC and PLC Now let's show our attack setup This is",
    "start": "279400",
    "end": "285199"
  },
  {
    "text": "where we come into the picture So we will act as the attacker as we can see down below The attacker is located on",
    "start": "285199",
    "end": "292240"
  },
  {
    "text": "the same network as the PC and the PLC And now let's introduce our pathway to",
    "start": "292240",
    "end": "298479"
  },
  {
    "text": "achieve RC of our shell code over the PLC So we name it as our stairway to RC",
    "start": "298479",
    "end": "304240"
  },
  {
    "text": "It basically steps that are each step is the basis for the next one And our first",
    "start": "304240",
    "end": "311039"
  },
  {
    "text": "step is to perform man in the middle tech in order to remove read restrictions rate access restrictions",
    "start": "311039",
    "end": "317199"
  },
  {
    "text": "over the PLC Once we have that we leverage full rate access on demand Then",
    "start": "317199",
    "end": "322479"
  },
  {
    "text": "we proceed to inject our shell code and then modify the memory for RC on demand",
    "start": "322479",
    "end": "328479"
  },
  {
    "text": "So let's take a moment over the on demand thing on demand means that rather",
    "start": "328479",
    "end": "334000"
  },
  {
    "text": "being limited to perform all these texts within a single result session which we",
    "start": "334000",
    "end": "340080"
  },
  {
    "text": "could do and we could do the modification and even the execution We show methods that enables us to perform",
    "start": "340080",
    "end": "348960"
  },
  {
    "text": "these operations the modification and later on the execution whenever we want",
    "start": "348960",
    "end": "354000"
  },
  {
    "text": "anytime we want regardless the ongoing session which is more powerful and let us more freedom to act our operations",
    "start": "354000",
    "end": "361680"
  },
  {
    "text": "whenever we want as the attacker Then we have our memory set up for RC and we are",
    "start": "361680",
    "end": "367120"
  },
  {
    "text": "good to go to our last step remote executing our show code also on demand",
    "start": "367120",
    "end": "372479"
  },
  {
    "text": "and then our show code will be executed on the PLC So having that in mind we're good to",
    "start": "372479",
    "end": "378960"
  },
  {
    "text": "go to authentication process and let's break it down step by step So our first",
    "start": "378960",
    "end": "384080"
  },
  {
    "text": "stage will be project password hash acquisition So the project password hash will be the",
    "start": "384080",
    "end": "391759"
  },
  {
    "text": "hash form of the project password as it's stored in the PLC memory It's not",
    "start": "391759",
    "end": "397840"
  },
  {
    "text": "it is not stored as the plain text but in its hash form The project password hash and its sold",
    "start": "397840",
    "end": "405280"
  },
  {
    "text": "are generated once we create a new project And we can compute the possible",
    "start": "405280",
    "end": "410800"
  },
  {
    "text": "the password hash We name it shortly as password hash as a shadow 256 of",
    "start": "410800",
    "end": "415840"
  },
  {
    "text": "combining the password salt with the password of the project And keep in mind that both the password hash and the",
    "start": "415840",
    "end": "423759"
  },
  {
    "text": "password salt remain unchanged even if we modify the project So it is useful",
    "start": "423759",
    "end": "430240"
  },
  {
    "text": "for us in the attacker point of view because once we have them we can be",
    "start": "430240",
    "end": "435759"
  },
  {
    "text": "safely sure that they won't change over the time regardless the ongoing session",
    "start": "435759",
    "end": "442080"
  },
  {
    "text": "So let's see how the transmission works So first the engineer is prompt to",
    "start": "442080",
    "end": "447520"
  },
  {
    "text": "provide a project password Then the PC sends request for the PLC for read",
    "start": "447520",
    "end": "453120"
  },
  {
    "text": "memory block and PLC responds with the password salt Then the password hash is",
    "start": "453120",
    "end": "458479"
  },
  {
    "text": "computed on the PC side as we've just seen from version 3.50 Now we're in",
    "start": "458479",
    "end": "466240"
  },
  {
    "text": "version 3.56 The pass the password hash is no longer can be extracted as a plain",
    "start": "466240",
    "end": "471840"
  },
  {
    "text": "text over the traffic So by conventional methods we cannot extract the password hash So keep it in mind because we will",
    "start": "471840",
    "end": "480080"
  },
  {
    "text": "may refer it as the attacker when we will talk about our attacks",
    "start": "480080",
    "end": "485520"
  },
  {
    "text": "Now we're moving to our next stage nonsus exchange stage So we found we",
    "start": "485520",
    "end": "491360"
  },
  {
    "text": "discovered that during this stage a defment mechanism of exchange key is",
    "start": "491360",
    "end": "497400"
  },
  {
    "text": "involved and now the nons are not transmitted in their um in their as a plain text but in their",
    "start": "497400",
    "end": "505599"
  },
  {
    "text": "encrypted form over the traffic and both sides agree on their generated the",
    "start": "505599",
    "end": "511680"
  },
  {
    "text": "public defy helman keys and then they generate their shared defy helman key",
    "start": "511680",
    "end": "516800"
  },
  {
    "text": "and there from there they derive the aes as symmetric very standard and the",
    "start": "516800",
    "end": "522560"
  },
  {
    "text": "implementation is made as plain vanilla which means that it is exposed to man-in-the-middle attacks It does not",
    "start": "522560",
    "end": "529760"
  },
  {
    "text": "have any certificate authorities or pre-shared keys or whatsoever So it is",
    "start": "529760",
    "end": "535200"
  },
  {
    "text": "exposed and again as the attacker we may want to utilize it later on when we will",
    "start": "535200",
    "end": "540480"
  },
  {
    "text": "talk about our attacks So let's see how the transmission works So we can see",
    "start": "540480",
    "end": "546080"
  },
  {
    "text": "down below we have our two sides generated their random nons and just to",
    "start": "546080",
    "end": "551360"
  },
  {
    "text": "make it more convenience let's agree on color coding So the purple elements will refer to the PC and the blue elements",
    "start": "551360",
    "end": "557760"
  },
  {
    "text": "will refer to the PLC and then we can see that both sides",
    "start": "557760",
    "end": "563120"
  },
  {
    "text": "transmit their nons in their in its encrypted form as we can see up above",
    "start": "563120",
    "end": "568880"
  },
  {
    "text": "the envelopes Then each side receives the encrypted not and",
    "start": "568880",
    "end": "574560"
  },
  {
    "text": "decrypts it on each side So by the end of this stage we have both sides have the decrypted notes of each side Then",
    "start": "574560",
    "end": "582080"
  },
  {
    "text": "we're good to go to our last stage of the authentication process The authentication secret",
    "start": "582080",
    "end": "587959"
  },
  {
    "text": "transmission So the authentication secret is basically a key that aim for the PLC to verify the PC authenticity",
    "start": "587959",
    "end": "597440"
  },
  {
    "text": "Both sides compute their authentication authentication secret on their side and",
    "start": "597440",
    "end": "603839"
  },
  {
    "text": "based on the data that they have the computation is as follows It sh",
    "start": "603839",
    "end": "610040"
  },
  {
    "text": "256 of the PLC nons combining with the salt combining with the password hash",
    "start": "610040",
    "end": "616320"
  },
  {
    "text": "combining with the PC nons So let's see how it works So we can see down below that both sides have computed their",
    "start": "616320",
    "end": "623279"
  },
  {
    "text": "authentication secret and the PC transmitted authentication secrets to the",
    "start": "623279",
    "end": "628839"
  },
  {
    "text": "PLC The PLC compares it to its own and if they are equal then the PC responds",
    "start": "628839",
    "end": "635360"
  },
  {
    "text": "with the session key which we name here has a reserved ID It's basically a one",
    "start": "635360",
    "end": "640720"
  },
  {
    "text": "bite key that identifies the session and then we have established our reserve session between both parties and that",
    "start": "640720",
    "end": "648079"
  },
  {
    "text": "means we have completed our authentication process successfully Now we have and more thing",
    "start": "648079",
    "end": "654160"
  },
  {
    "text": "to keep in mind that from all the data that we gathered over the authentication process such as",
    "start": "654160",
    "end": "660640"
  },
  {
    "text": "the password hash the password nons the non the password h ash the sold",
    "start": "660640",
    "end": "667279"
  },
  {
    "text": "the keys whatsoever are not used but the nons only the nons are used in terms of",
    "start": "667279",
    "end": "674160"
  },
  {
    "text": "signing reserved messages over the ongoing established reserved session So",
    "start": "674160",
    "end": "679600"
  },
  {
    "text": "again keep it in mind It may be considered as a security flaw because it just",
    "start": "679600",
    "end": "685399"
  },
  {
    "text": "denounces So let's talk about signing the messages So in order to sign the",
    "start": "685399",
    "end": "691680"
  },
  {
    "text": "messages we need some more data We need to get a PLC ID which is a four byte vector that identifies the PLC and it is",
    "start": "691680",
    "end": "699920"
  },
  {
    "text": "hardcoded to the PLC memory In order to retrieve it we easily do it by sending a",
    "start": "699920",
    "end": "706560"
  },
  {
    "text": "public message which is get PLC and from then we get our PLC ID From there we",
    "start": "706560",
    "end": "711760"
  },
  {
    "text": "compute two intermediate new intermediate variables that are the hash form of these nons we've just stop we",
    "start": "711760",
    "end": "719040"
  },
  {
    "text": "just established for the session So the hash form is computed as a SH 256 of the",
    "start": "719040",
    "end": "724720"
  },
  {
    "text": "PLC ID combining with the nons respectively to each side Then we compute our signature as sh 56 of the",
    "start": "724720",
    "end": "732880"
  },
  {
    "text": "hashed nons of the PC combining with the message we want to sign and combining",
    "start": "732880",
    "end": "740000"
  },
  {
    "text": "with the hash nons of the P of the PLC This is how we have the signature",
    "start": "740000",
    "end": "745839"
  },
  {
    "text": "And just again to keep in mind and it will be useful in our text that the",
    "start": "745839",
    "end": "751360"
  },
  {
    "text": "Nosis themselves are not saved in the memory once they're deleted from the memory once the authentication process",
    "start": "751360",
    "end": "757440"
  },
  {
    "text": "has been completed However the hash form of the nonsis is saved later on Again it",
    "start": "757440",
    "end": "764720"
  },
  {
    "text": "will be useful when we will talk about our text So now we're only left with covering the",
    "start": "764720",
    "end": "770800"
  },
  {
    "text": "memory access of our humans and then we will be good to go to our text So stay tuned We will get there",
    "start": "770800",
    "end": "776680"
  },
  {
    "text": "shortly We have for my left a read access The read access we use the read physical address message which is a",
    "start": "776680",
    "end": "783360"
  },
  {
    "text": "public one and it gets address and size On the other hand we have right access which is a reserved message and it we",
    "start": "783360",
    "end": "790800"
  },
  {
    "text": "use the right physical address message which gets address size and data Now let's go over the read",
    "start": "790800",
    "end": "797800"
  },
  {
    "text": "access So first let's a brief have a brief look over the CPU memory space So",
    "start": "797800",
    "end": "803760"
  },
  {
    "text": "we can see from our left are the lowest address to our right the highest address and it divided into three three",
    "start": "803760",
    "end": "810680"
  },
  {
    "text": "sections Internal memories external memories and internal peripers For us",
    "start": "810680",
    "end": "816560"
  },
  {
    "text": "the most important memory area is the RAM memory area which is located within the external memories memory memory area",
    "start": "816560",
    "end": "824160"
  },
  {
    "text": "of the CPU memory space So we want to get access to this memory So now before",
    "start": "824160",
    "end": "830959"
  },
  {
    "text": "version 3.3 not included there was basically information leak an information leakage which let anyone who",
    "start": "830959",
    "end": "838000"
  },
  {
    "text": "can send read physical address messages to get access to any address over the",
    "start": "838000",
    "end": "844399"
  },
  {
    "text": "CPU memory space So we can see in the green area the read accessible memory",
    "start": "844399",
    "end": "849440"
  },
  {
    "text": "which is basically the entire CPU memory space Then this leakage was fixed",
    "start": "849440",
    "end": "854519"
  },
  {
    "text": "However we may ask ourselves how indeed behind the scenes",
    "start": "854519",
    "end": "860160"
  },
  {
    "text": "it was fixed What memory is now accessible using the read physical address messages and if there is any So",
    "start": "860160",
    "end": "867600"
  },
  {
    "text": "in order to answer these questions we use reverse engineering So from reverse engineering we found that there is a",
    "start": "867600",
    "end": "874480"
  },
  {
    "text": "linear correlation between the highest address we can access to which we name here as address rate address read top to",
    "start": "874480",
    "end": "882880"
  },
  {
    "text": "the address read limiter which is our independent variable So and we have also our address",
    "start": "882880",
    "end": "890720"
  },
  {
    "text": "read base which is the lowest address accessible and a constant which is the",
    "start": "890720",
    "end": "896160"
  },
  {
    "text": "gradient of the equation Both the address read base and the constant are",
    "start": "896160",
    "end": "901600"
  },
  {
    "text": "hardcoded fixed size and cannot be modified even if we use the read physical write physical address messages",
    "start": "901600",
    "end": "908959"
  },
  {
    "text": "but keep in mind that the address read limiter is is indeed modifiable So again",
    "start": "908959",
    "end": "914800"
  },
  {
    "text": "as the attacker keep it in mind So now before the information",
    "start": "914800",
    "end": "920720"
  },
  {
    "text": "leakage was fixed the area was as we see here and then the area now that is read",
    "start": "920720",
    "end": "927120"
  },
  {
    "text": "accessible is way way smaller and specifically the excludes the entire RAM",
    "start": "927120",
    "end": "933680"
  },
  {
    "text": "memory So now we don't have access to the memory RAM the RAM memory area again",
    "start": "933680",
    "end": "940560"
  },
  {
    "text": "keep it in mind we may want to have access to after we perform our text",
    "start": "940560",
    "end": "946959"
  },
  {
    "text": "So let's talk about the right access We have two key points we want to say about it First every writable memory area is",
    "start": "946959",
    "end": "956079"
  },
  {
    "text": "also potentially can be executed This is because the CPU does not have non-execute bit functionality which",
    "start": "956079",
    "end": "963519"
  },
  {
    "text": "enables us to do so And by default the operating system sets every executable",
    "start": "963519",
    "end": "970079"
  },
  {
    "text": "memory page which is basically a code memory to be right protected against",
    "start": "970079",
    "end": "976480"
  },
  {
    "text": "again against right physical address messages to protect the memory the code from being",
    "start": "976480",
    "end": "981959"
  },
  {
    "text": "modified So these two key notes we want to keep in mind because we will refer to it later",
    "start": "981959",
    "end": "989279"
  },
  {
    "text": "Now we once we've covered all this we're good to go directly to our text",
    "start": "989279",
    "end": "994920"
  },
  {
    "text": "So let's go back to our stairway to RC and start from step one We'll perform",
    "start": "994920",
    "end": "1002320"
  },
  {
    "text": "man the middle attack to to remove the read access",
    "start": "1002320",
    "end": "1007720"
  },
  {
    "text": "restrictions But we may ask ourselves but why do we need to perform the man in",
    "start": "1007720",
    "end": "1012880"
  },
  {
    "text": "the middle attack So as we said before the password h ash from version 3.50 is",
    "start": "1012880",
    "end": "1020160"
  },
  {
    "text": "no longer can be extracted over the traffic at least by conventional methods",
    "start": "1020160",
    "end": "1025520"
  },
  {
    "text": "So in theory if we had have had our password hash we could establish our own reserve session with the PLC But since",
    "start": "1025520",
    "end": "1032798"
  },
  {
    "text": "we don't have it we rely on the PC to initiate a legitimate authentication",
    "start": "1032799",
    "end": "1038678"
  },
  {
    "text": "process and especially the nonsense exchange stage with the PLC in order to",
    "start": "1038679",
    "end": "1045640"
  },
  {
    "text": "intercept the messages while manipulating the network and have the",
    "start": "1045640",
    "end": "1051039"
  },
  {
    "text": "nons still the nonsense during this stage So let's see how do we do it First",
    "start": "1051039",
    "end": "1056559"
  },
  {
    "text": "we are waiting for the nonsense exchange the defang on public key exchange as we",
    "start": "1056559",
    "end": "1062640"
  },
  {
    "text": "can see here and we are waiting for the nonsense and now we're good to go to our",
    "start": "1062640",
    "end": "1067760"
  },
  {
    "text": "first attack performing the man in the middle attack So we can see here that we",
    "start": "1067760",
    "end": "1073039"
  },
  {
    "text": "tunnled the traffic through us and intercepting the messages of the nonsense in order to have the decrypted",
    "start": "1073039",
    "end": "1078320"
  },
  {
    "text": "form of the nonsense on our side as well as at both sides of the PC and the PLC",
    "start": "1078320",
    "end": "1084559"
  },
  {
    "text": "And just for convenience and recalling the color coding So the purple elements",
    "start": "1084559",
    "end": "1090400"
  },
  {
    "text": "refer to the PC and the blue elements were referred to the PLC So having that",
    "start": "1090400",
    "end": "1097919"
  },
  {
    "text": "we can see that a result session is established between the PC and the PLC and we are the attacker have the",
    "start": "1097919",
    "end": "1104160"
  },
  {
    "text": "nonsense of the ongoing session So you may notice that we as the attacker",
    "start": "1104160",
    "end": "1111600"
  },
  {
    "text": "haven't gone through any of authentication process or authorization whatsoever with the PLC So we are un",
    "start": "1111600",
    "end": "1120280"
  },
  {
    "text": "unauthenticated with the PLC However if we can construct valid",
    "start": "1120280",
    "end": "1126640"
  },
  {
    "text": "messages valid result messages and sign them using the nonses and send it send",
    "start": "1126640",
    "end": "1133600"
  },
  {
    "text": "these messages to the PLC the PLC will accept our messages even though we are not authenticated So again this is can be",
    "start": "1133600",
    "end": "1141039"
  },
  {
    "text": "considered as a security flaw and we use it a lot when we perform our attacks because we are",
    "start": "1141039",
    "end": "1146679"
  },
  {
    "text": "unauthenticated and we still can impact the PLC Now let's take a look We have our",
    "start": "1146679",
    "end": "1153440"
  },
  {
    "text": "bot length bottom left the diagram that illustrates the CPU memory space and",
    "start": "1153440",
    "end": "1158720"
  },
  {
    "text": "especially the accessible memory area And now we perform our second attack to",
    "start": "1158720",
    "end": "1164559"
  },
  {
    "text": "modify the memory to allow read anywhere on demand So let's see how we do it Now",
    "start": "1164559",
    "end": "1170240"
  },
  {
    "text": "we have the ability to send write physical message address messages and if",
    "start": "1170240",
    "end": "1175679"
  },
  {
    "text": "we remember the address read limiter value that it is mod modifiable So if we",
    "start": "1175679",
    "end": "1182160"
  },
  {
    "text": "modify override its value to our to our wish so we can make the read accessible",
    "start": "1182160",
    "end": "1188880"
  },
  {
    "text": "memory area much larger and especially include the entire RAM memory So now",
    "start": "1188880",
    "end": "1194160"
  },
  {
    "text": "basically we have access to the entire memory of the RAM and we can do it on",
    "start": "1194160",
    "end": "1199520"
  },
  {
    "text": "the map because we use read physical address messages which are public So we have completed our first step We have",
    "start": "1199520",
    "end": "1206960"
  },
  {
    "text": "read physical read anywhere from the RAM on de on demand Now we proceed to our",
    "start": "1206960",
    "end": "1213360"
  },
  {
    "text": "second step We'll inject our shell code and then set up the memory for RC on",
    "start": "1213360",
    "end": "1219520"
  },
  {
    "text": "demand So let's see how we do it We have two initial states that we may encounter over the session First a public session",
    "start": "1219520",
    "end": "1226880"
  },
  {
    "text": "is ongoing and the second one a reserve session is already ongoing So let's cover the first option So if a public",
    "start": "1226880",
    "end": "1235200"
  },
  {
    "text": "session is ongoing we can okay even though we said that the",
    "start": "1235200",
    "end": "1240799"
  },
  {
    "text": "password hash cannot be extracted over the humus traffic since we have patched our PSC",
    "start": "1240799",
    "end": "1246720"
  },
  {
    "text": "and now we have read anywhere from the RAM we can use the read physical address messages to directly access to the",
    "start": "1246720",
    "end": "1253120"
  },
  {
    "text": "password hash and do extract it over the traffic So we extract the password hash",
    "start": "1253120",
    "end": "1258480"
  },
  {
    "text": "we name it as pass the hash Then once we have the password hash on our hand in our hands we can use it to establish our",
    "start": "1258480",
    "end": "1265200"
  },
  {
    "text": "own reserve session with the PLC which means we have access to a reserve session and can sign messages So just to",
    "start": "1265200",
    "end": "1273200"
  },
  {
    "text": "keep the consistence of the color coding the gray elements will refer to the",
    "start": "1273200",
    "end": "1278520"
  },
  {
    "text": "attacker and now we proceed to our option two What if a reserved session is",
    "start": "1278520",
    "end": "1284559"
  },
  {
    "text": "ongoing So if your Z session is ongoing then we can similarly use the read",
    "start": "1284559",
    "end": "1289600"
  },
  {
    "text": "physical address messages in order to read the hashed form of the nons So once",
    "start": "1289600",
    "end": "1295440"
  },
  {
    "text": "having the hash form the non on the of the nonses we are able is it is",
    "start": "1295440",
    "end": "1301360"
  },
  {
    "text": "equivalent to have the nonsense themselves in terms of signing the reserved messages over the ongoing",
    "start": "1301360",
    "end": "1308480"
  },
  {
    "text": "session So once again we have access to a reserved session So it doesn't really matter with",
    "start": "1308480",
    "end": "1315039"
  },
  {
    "text": "each option we start with both the next states will the next steps will be the",
    "start": "1315039",
    "end": "1320960"
  },
  {
    "text": "same for both So for our case we'll proceed with option one but it doesn't really matter So now we are good to go",
    "start": "1320960",
    "end": "1328480"
  },
  {
    "text": "to our last attack We can note here that we have two attacks but basically we can",
    "start": "1328480",
    "end": "1334159"
  },
  {
    "text": "refer to them as one attack because they share the same principles of operation",
    "start": "1334159",
    "end": "1339840"
  },
  {
    "text": "So explaining one of them will apply to the other as well So we can explain one",
    "start": "1339840",
    "end": "1345600"
  },
  {
    "text": "of them and we have two ways to perform these",
    "start": "1345600",
    "end": "1350679"
  },
  {
    "text": "attacks So let's see down below we have a illustration diagram of the section of",
    "start": "1350679",
    "end": "1358080"
  },
  {
    "text": "the RAM and we have two types of memory We have a writable memory area which is",
    "start": "1358080",
    "end": "1363200"
  },
  {
    "text": "colored in lighter green tone you can see down below And we have write protected memory area which is colored",
    "start": "1363200",
    "end": "1369919"
  },
  {
    "text": "in darker green tone which is also referred to the firmware code And first",
    "start": "1369919",
    "end": "1375280"
  },
  {
    "text": "we inject our shell code into a writable memory area using the right physical address",
    "start": "1375280",
    "end": "1381320"
  },
  {
    "text": "message Having that let's take a deeper look over the memory So we can see here that we have two specific functions",
    "start": "1381320",
    "end": "1388159"
  },
  {
    "text": "which we'll name as source function and destination function Both are located in the",
    "start": "1388159",
    "end": "1395440"
  },
  {
    "text": "firmware code which is right protected And also we have a function pointer secondary function pointer which is",
    "start": "1395440",
    "end": "1400960"
  },
  {
    "text": "located in a modifiable memory area And the way that the source function will",
    "start": "1400960",
    "end": "1407679"
  },
  {
    "text": "eventually will invoke the destination function is by first triggering the",
    "start": "1407679",
    "end": "1413280"
  },
  {
    "text": "function pointer the secondary function pointer and then the function pointer will direct to the destination",
    "start": "1413280",
    "end": "1419960"
  },
  {
    "text": "function and I assume that many of you may guess that the function pointer is",
    "start": "1419960",
    "end": "1425600"
  },
  {
    "text": "located in modifiable memory area which its value can be overridden So if we use again the write",
    "start": "1425600",
    "end": "1434159"
  },
  {
    "text": "physical address messages we can change the value that the function pointer points instead of the destination",
    "start": "1434159",
    "end": "1441120"
  },
  {
    "text": "function to redirect it to our shell code So by that we have completed",
    "start": "1441120",
    "end": "1447440"
  },
  {
    "text": "successfully our second step We have our memory ready and set up for executing",
    "start": "1447440",
    "end": "1453679"
  },
  {
    "text": "our shell code So now we proceed to our last step Our last step will be remote",
    "start": "1453679",
    "end": "1461200"
  },
  {
    "text": "executing our shell code on demand Again we will see how we do it So we have a brief look over the left",
    "start": "1461200",
    "end": "1469120"
  },
  {
    "text": "that shows the flow diagram from the source code to our shell code after the",
    "start": "1469120",
    "end": "1475120"
  },
  {
    "text": "patch after the second step We can see here from the top we have our shell code",
    "start": "1475120",
    "end": "1480799"
  },
  {
    "text": "not shell code shell source function Then it will trigger the secondary",
    "start": "1480799",
    "end": "1485919"
  },
  {
    "text": "function pointer From there it will redirect to our show code instead of the destination function And now we are the",
    "start": "1485919",
    "end": "1493200"
  },
  {
    "text": "attacker will send a specific public message which can be transmitted any time regardless the ongoing session And",
    "start": "1493200",
    "end": "1500799"
  },
  {
    "text": "what it will do behind the scenes it will invoke the source function which will trigger the secondary function",
    "start": "1500799",
    "end": "1507919"
  },
  {
    "text": "pointer the modified one and then it will eventually trigger a shell code By",
    "start": "1507919",
    "end": "1513840"
  },
  {
    "text": "that we have successfully and have reached to our goal to remote execute",
    "start": "1513840",
    "end": "1520240"
  },
  {
    "text": "our shell code on the PLC on demand So we have our shell code executed and now it's a great time for a",
    "start": "1520240",
    "end": "1528000"
  },
  {
    "text": "demo So what we will see in our demo So in our demo we will see an execution of",
    "start": "1528000",
    "end": "1533440"
  },
  {
    "text": "a shell code that toggles an LED over the M340 PLC panel So once we power on",
    "start": "1533440",
    "end": "1541760"
  },
  {
    "text": "the PLC an LED that indicates the",
    "start": "1541760",
    "end": "1547760"
  },
  {
    "text": "operational functionality of the SD card slot is turned on constantly which means the operation is okay and our shell code",
    "start": "1547760",
    "end": "1556000"
  },
  {
    "text": "will toggle this LED off and then we'll resume to the normal operation of the",
    "start": "1556000",
    "end": "1561520"
  },
  {
    "text": "PLC So this way we'll visibly can see that the shell code is executed and it's",
    "start": "1561520",
    "end": "1568240"
  },
  {
    "text": "easy for us to understand it So let's see how do we do",
    "start": "1568240",
    "end": "1573400"
  },
  {
    "text": "it First our sh our PS is powered on and take a look at the LED It turns on This",
    "start": "1573400",
    "end": "1580799"
  },
  {
    "text": "is normal Now we the attacker tunnel the traffic through us",
    "start": "1580799",
    "end": "1587120"
  },
  {
    "text": "Now the PC will reserve the PLC using the",
    "start": "1587120",
    "end": "1592480"
  },
  {
    "text": "password Now we perform first tech the many the middle tech and reserve session is established",
    "start": "1595640",
    "end": "1603600"
  },
  {
    "text": "between the PC and the PLC Now we have a JSON file with all the data that gathered especially the stolen nonsense",
    "start": "1603600",
    "end": "1610000"
  },
  {
    "text": "and decrypted form of course Now we can proceed to our second attack",
    "start": "1610000",
    "end": "1617279"
  },
  {
    "text": "to modify the read address limiter and using the session key and the nonsis we've just",
    "start": "1617279",
    "end": "1624880"
  },
  {
    "text": "stolen Now we have a full read access Now the PC will unreserved for the PLC",
    "start": "1624919",
    "end": "1630880"
  },
  {
    "text": "for the general case and we can send the read physical address on demand to read",
    "start": "1630880",
    "end": "1636320"
  },
  {
    "text": "for this instance the password hash So we pass the hash as we can see",
    "start": "1636320",
    "end": "1642400"
  },
  {
    "text": "here Having this now we turn the traffic back to its normal",
    "start": "1642679",
    "end": "1648279"
  },
  {
    "text": "state for general case and we can establish our own result",
    "start": "1648279",
    "end": "1653919"
  },
  {
    "text": "session with the PLC as the attacker using the password hash You can see",
    "start": "1653919",
    "end": "1661400"
  },
  {
    "text": "here now our reset session is established and we have the nonsense of the session and as well the session key",
    "start": "1661400",
    "end": "1667760"
  },
  {
    "text": "and we use it to perform a last detect to modify the memory for RC So we can see here that we use the session key and",
    "start": "1667760",
    "end": "1675600"
  },
  {
    "text": "the",
    "start": "1675600",
    "end": "1677679"
  },
  {
    "text": "nonsense Now our memory is modified So the shell code is injected and the function pointer is modified The",
    "start": "1682919",
    "end": "1688720"
  },
  {
    "text": "attacker will unresolved from the PLC for general case And now we trigger sugar So take a look at the LED over the",
    "start": "1688720",
    "end": "1694399"
  },
  {
    "text": "SD card slot It will turn off and the",
    "start": "1694399",
    "end": "1699760"
  },
  {
    "text": "PLC resume to its normal operation Now we've just seen a demo that shows",
    "start": "1699760",
    "end": "1706240"
  },
  {
    "text": "basically summarizes the attack chain that we've just covered over our talk So",
    "start": "1706240",
    "end": "1712960"
  },
  {
    "text": "it's a great example to see how things works in real time",
    "start": "1712960",
    "end": "1719279"
  },
  {
    "text": "Now proceed for the reporting to Schneider Electric of vulnerabilities So first we want to",
    "start": "1719279",
    "end": "1725840"
  },
  {
    "text": "thank Schneider Electric for collaborating us in disclosing the vulnerabilities once we have reported to",
    "start": "1725840",
    "end": "1731559"
  },
  {
    "text": "them They have released firmware update of 3.65 65 recently that addresses the",
    "start": "1731559",
    "end": "1739520"
  },
  {
    "text": "read address bypass read limiter bypass and the two RC's we've introduced which",
    "start": "1739520",
    "end": "1746320"
  },
  {
    "text": "in results in blocking the attack chain we've just shown they also",
    "start": "1746320",
    "end": "1752799"
  },
  {
    "text": "um also recommends mitigation s such as activating the memory activation memory",
    "start": "1752799",
    "end": "1758679"
  },
  {
    "text": "protection blocking unauthorized access to the mod bus over TCP port",
    "start": "1758679",
    "end": "1763840"
  },
  {
    "text": "implementing a VPN and so on And they have recently published security notifications for further information",
    "start": "1763840",
    "end": "1770000"
  },
  {
    "text": "you can refer to after this talk And now let's talk about the",
    "start": "1770000",
    "end": "1775720"
  },
  {
    "text": "takeaways What will you take from this talk So first first let's talk about the",
    "start": "1775720",
    "end": "1782720"
  },
  {
    "text": "takeaways for the vendors So PLC's the current generation",
    "start": "1782720",
    "end": "1787840"
  },
  {
    "text": "PLC's have constraints They have limited computing resources and they have the",
    "start": "1787840",
    "end": "1793520"
  },
  {
    "text": "demand for backward compatibilities Having said that Vernos",
    "start": "1793520",
    "end": "1799360"
  },
  {
    "text": "should always enhance and improve and continuously work on improving their",
    "start": "1799360",
    "end": "1805360"
  },
  {
    "text": "propriety protocols in terms of cyber security in order to address such threats as we highlighted today So we",
    "start": "1805360",
    "end": "1813120"
  },
  {
    "text": "have to improve it all the time even we if we consider the constraints and the",
    "start": "1813120",
    "end": "1818880"
  },
  {
    "text": "next generation PLC's should have in mind to have the state-of-the-art",
    "start": "1818880",
    "end": "1825279"
  },
  {
    "text": "security protocols as are widely accepted today in their protocols of the",
    "start": "1825279",
    "end": "1831640"
  },
  {
    "text": "PLC's while maintaining the operational the backward compatibility",
    "start": "1831640",
    "end": "1836760"
  },
  {
    "text": "functionality there is always a trade-off but it is very important to have the highest level of",
    "start": "1836760",
    "end": "1843000"
  },
  {
    "text": "security Let's talk about the takeaways for the users So current current",
    "start": "1843000",
    "end": "1848240"
  },
  {
    "text": "generation PLC's weren't made to be connected to the internet They weren't designed for",
    "start": "1848240",
    "end": "1855120"
  },
  {
    "text": "that They were initially designed 20 30 years ago and they are",
    "start": "1855120",
    "end": "1862000"
  },
  {
    "text": "not able to protect against more cyber security risks which are present in the global internet So as an immediate",
    "start": "1862000",
    "end": "1869399"
  },
  {
    "text": "result users should avoid connecting their PLC's directly to the internet as",
    "start": "1869399",
    "end": "1875760"
  },
  {
    "text": "well Of course users should have essential have the firmware latest",
    "start": "1875760",
    "end": "1882240"
  },
  {
    "text": "firmware updates and software as well follow the the recommendations of the",
    "start": "1882240",
    "end": "1887279"
  },
  {
    "text": "vendors in order to have the highest level of security over their products So it's very important to apply these",
    "start": "1887279",
    "end": "1893960"
  },
  {
    "text": "measures and if I can summarize the whole presentation and",
    "start": "1893960",
    "end": "1899200"
  },
  {
    "text": "refer to the question we have just talked about in the beginning of our presentation",
    "start": "1899200",
    "end": "1905640"
  },
  {
    "text": "PLC are not ready for connecting to the internet yet Their protocols are not",
    "start": "1905640",
    "end": "1912159"
  },
  {
    "text": "sufficient enough for safely sec safely and securely connecting them in terms of cyber security risks So avoid connecting",
    "start": "1912159",
    "end": "1919840"
  },
  {
    "text": "them to the internet Our presentation",
    "start": "1919840",
    "end": "1925080"
  },
  {
    "text": "slides as well as the right white paper of the research will be available on",
    "start": "1925080",
    "end": "1931480"
  },
  {
    "text": "blacket website after this talk And lastly thank you all for listening",
    "start": "1931480",
    "end": "1941480"
  },
  {
    "text": "[Applause] Um thanks I can regard to questions if",
    "start": "1941930",
    "end": "1949919"
  },
  {
    "text": "you have to if you have some",
    "start": "1949919",
    "end": "1954240"
  },
  {
    "text": "Thanks Hello Is this on Hello Yeah thank you for the presentation Very",
    "start": "1969399",
    "end": "1976000"
  },
  {
    "text": "interesting I was wondering that uh 15 years ago I heard the same statement",
    "start": "1976000",
    "end": "1981519"
  },
  {
    "text": "that we should not connect PLC's to the internet We are now in 2024 We are hearing the same statement",
    "start": "1981519",
    "end": "1989120"
  },
  {
    "text": "Uh can you say some thoughts why didn't uh we haven't we seen a serious change",
    "start": "1989120",
    "end": "1995440"
  },
  {
    "text": "in this time I may have assumption for this that",
    "start": "1995440",
    "end": "2001440"
  },
  {
    "text": "these PLC's are always adapted to be improved",
    "start": "2001440",
    "end": "2006960"
  },
  {
    "text": "and the current generation PC adapted to be improved and make the best efforts to protect",
    "start": "2006960",
    "end": "2014360"
  },
  {
    "text": "against cyber security risks which are exists but they have constraints which",
    "start": "2014360",
    "end": "2020720"
  },
  {
    "text": "follow and we we have facing over the time that probably",
    "start": "2020720",
    "end": "2029600"
  },
  {
    "text": "a new generation of PLC's a new line of products will be have to be implemented",
    "start": "2029600",
    "end": "2035159"
  },
  {
    "text": "to implemented from initially have in mind the cyber security risks and",
    "start": "2035159",
    "end": "2040720"
  },
  {
    "text": "implementing the state-of-the-art protocols which is I won't say impossible it's everything is possible",
    "start": "2040720",
    "end": "2048240"
  },
  {
    "text": "but it's very hard and might be have to have some actions in reinventing things",
    "start": "2048240",
    "end": "2054720"
  },
  {
    "text": "so this is my assumption Sure",
    "start": "2054720",
    "end": "2058919"
  },
  {
    "text": "I mean I I have relatively little experience with the area of PLC's but",
    "start": "2065839",
    "end": "2072000"
  },
  {
    "text": "the ability to for an arbitrary person to just read accesses access the memory",
    "start": "2072000",
    "end": "2078000"
  },
  {
    "text": "seems to be a bit much to give people Is there a reason why this sort of stuff",
    "start": "2078000",
    "end": "2083520"
  },
  {
    "text": "isn't locked behind a weaker level of authentication for uh you know resources",
    "start": "2083520",
    "end": "2088638"
  },
  {
    "text": "that would need that as opposed to just being completely public So yeah I let's see if I understand it",
    "start": "2088639",
    "end": "2095760"
  },
  {
    "text": "well You say that having the red access is considered or is not",
    "start": "2095760",
    "end": "2101920"
  },
  {
    "text": "considered as a security flaw Well it's in most situations being able to",
    "start": "2101920",
    "end": "2107440"
  },
  {
    "text": "dispense bits of memory content without any extra level between it is seen as a security flaw in of itself Yeah Security",
    "start": "2107440",
    "end": "2114880"
  },
  {
    "text": "flaw and so why is that open to to everyone as an unauthenticated You say",
    "start": "2114880",
    "end": "2120079"
  },
  {
    "text": "after the fix of the information leakage Yeah like is um it depends also",
    "start": "2120079",
    "end": "2127359"
  },
  {
    "text": "assumption okay because I'm not the producer of it but it depends on the",
    "start": "2127359",
    "end": "2133280"
  },
  {
    "text": "functionality you want to have the users to have to so it is a matter of decision",
    "start": "2133280",
    "end": "2138800"
  },
  {
    "text": "of the developers of the product they can in theory block any read access to",
    "start": "2138800",
    "end": "2147920"
  },
  {
    "text": "they can also make it in if you see our case to be let's say reserved message to",
    "start": "2147920",
    "end": "2153920"
  },
  {
    "text": "be more protected in instead of public message But also it's a matter of",
    "start": "2153920",
    "end": "2158960"
  },
  {
    "text": "development uh issue that's in my assumption it it",
    "start": "2158960",
    "end": "2164720"
  },
  {
    "text": "depends on each product you refer to and what abilities you want to have the users to use and it depends which user",
    "start": "2164720",
    "end": "2172599"
  },
  {
    "text": "because in my opinion I think that like normal basic users won't use this",
    "start": "2172599",
    "end": "2179280"
  },
  {
    "text": "message because they are not in terms of being researchers So um but again the",
    "start": "2179280",
    "end": "2186160"
  },
  {
    "text": "the simple answer is it depends So this is the matter of the developers If I",
    "start": "2186160",
    "end": "2191359"
  },
  {
    "text": "could is this working Nice Uh if I could add to that uh answer um first of all",
    "start": "2191359",
    "end": "2198000"
  },
  {
    "text": "you know we as security researchers don't know right we're this is like uh natural sciences We see what the world",
    "start": "2198000",
    "end": "2204240"
  },
  {
    "text": "is doing what Schneider decides and we tell you about it So that question really needs to go to Schneider Why did",
    "start": "2204240",
    "end": "2210400"
  },
  {
    "text": "they have a simplistic uh uh access model I could imagine that historically",
    "start": "2210400",
    "end": "2216000"
  },
  {
    "text": "the need to read memory is part of the control protocol You want the uh Bart",
    "start": "2216000",
    "end": "2221040"
  },
  {
    "text": "Simpson look in the in the control room to see what the values are of the sensors and whatnot And for that you",
    "start": "2221040",
    "end": "2226400"
  },
  {
    "text": "need to read memory So there's a function to do it and we abused it to read memory that was not supposed to be",
    "start": "2226400",
    "end": "2232000"
  },
  {
    "text": "read by Bart Simpson but only by the engineering system That's I would say",
    "start": "2232000",
    "end": "2237839"
  },
  {
    "text": "the reason behind it But again this is a choice made by Schneider or by their competitors",
    "start": "2237839",
    "end": "2244320"
  },
  {
    "text": "Thank you Thank you",
    "start": "2244320",
    "end": "2248119"
  },
  {
    "text": "Thank you so much [Applause]",
    "start": "2252800",
    "end": "2258679"
  }
]