[
  {
    "start": "0",
    "end": "86000"
  },
  {
    "text": "foreign",
    "start": "1979",
    "end": "4159"
  },
  {
    "text": "Welcome to our talk my name is Tao Yen this is my coach speaker Ken today we're",
    "start": "10700",
    "end": "16740"
  },
  {
    "text": "glad to be here to share our research about using Code patterns to find a bug variants and exploitation Primitives in",
    "start": "16740",
    "end": "23279"
  },
  {
    "text": "binaries with the help of our new panel search too you can see our title is a secure",
    "start": "23279",
    "end": "29279"
  },
  {
    "text": "statement actually it's a valid Circle query which can be processed by all new pattern search too and you can use it to",
    "start": "29279",
    "end": "36480"
  },
  {
    "text": "find code patterns like whatever you want we are security researchers from Pilot",
    "start": "36480",
    "end": "42480"
  },
  {
    "text": "networks we have vulnerability researchers control winner conference speakers in the meantime we are regular",
    "start": "42480",
    "end": "49500"
  },
  {
    "text": "patent inventors for new defense and detection techniques",
    "start": "49500",
    "end": "54780"
  },
  {
    "text": "here's the agenda firstly we'll cover background challenges why we need codependent search and why we need a new",
    "start": "54780",
    "end": "61680"
  },
  {
    "text": "code pattern search too for binaries second we'll cover everything about a",
    "start": "61680",
    "end": "67560"
  },
  {
    "text": "new pattern Source 2 for boundaries and then we'll introduce how we create",
    "start": "67560",
    "end": "73080"
  },
  {
    "text": "and search for unique code patterns in windows binaries with R2 and final",
    "start": "73080",
    "end": "79080"
  },
  {
    "text": "vulnerability variants and exportation Primitives last summary and takeaways",
    "start": "79080",
    "end": "85880"
  },
  {
    "start": "86000",
    "end": "86000"
  },
  {
    "text": "why we need cold static code analysis on one hand developers made similar",
    "start": "86759",
    "end": "92159"
  },
  {
    "text": "mistakes repeatedly for example there are huge number of memory copies string copy vulnerabilities most of them are",
    "start": "92159",
    "end": "99000"
  },
  {
    "text": "caused by not carefully checking the copy lens",
    "start": "99000",
    "end": "104040"
  },
  {
    "text": "besides there are some bad apis such as SM printf or return unexpected lens",
    "start": "104040",
    "end": "110040"
  },
  {
    "text": "which will be misunderstood or misused by Developers on the other hand similar vulnerable",
    "start": "110040",
    "end": "116880"
  },
  {
    "text": "codes appear everywhere but might possibly be patched in one place",
    "start": "116880",
    "end": "122759"
  },
  {
    "text": "so in those situations static code analysis a way to locate possible vulnerable codes",
    "start": "122759",
    "end": "129360"
  },
  {
    "text": "if we can categorize a similar vulnerabilities and extract code patterns code pattern search is a good",
    "start": "129360",
    "end": "136739"
  },
  {
    "text": "method for vulnerability variance Discovery however",
    "start": "136739",
    "end": "141780"
  },
  {
    "start": "141000",
    "end": "141000"
  },
  {
    "text": "code pattern extraction is not always easy to complicate it or too simple are",
    "start": "141780",
    "end": "147300"
  },
  {
    "text": "both not good besides there's no code pattern search to to effect eventually",
    "start": "147300",
    "end": "154319"
  },
  {
    "text": "um a search coder pattern a huge amount of binary modules called curl is awesome",
    "start": "154319",
    "end": "159599"
  },
  {
    "text": "but it is only for open source code software in our presentation we'll",
    "start": "159599",
    "end": "164760"
  },
  {
    "text": "introduce our research and practices to solve those challenges",
    "start": "164760",
    "end": "169980"
  },
  {
    "text": "then we'll come to the first part a new pattern search 2 for binaries I will hand it over to my code speaker Ken",
    "start": "169980",
    "end": "178700"
  },
  {
    "text": "all right before we get to the juicy part I will do a brief intro on the biofin the tool that we build ourselves",
    "start": "181860",
    "end": "187680"
  },
  {
    "text": "because Pac-Man to the best of our knowledge let us know of the short solutions they could do binary core",
    "start": "187680",
    "end": "193200"
  },
  {
    "text": "pattern search in binaries we also decided to build our own quality language because to facilitate the",
    "start": "193200",
    "end": "200220"
  },
  {
    "text": "research and then automate aware the pivot task but it does get quite annoying at times",
    "start": "200220",
    "end": "207120"
  },
  {
    "text": "we have to constantly modify in the scripts uh enrollment against thousand binaries",
    "start": "207120",
    "end": "213360"
  },
  {
    "text": "the tools built on either python x-rays API the dependency on c3's reversal",
    "start": "213360",
    "end": "219480"
  },
  {
    "text": "makes the tool for my agnostic and generic Mark you it is not a full blown tool",
    "start": "219480",
    "end": "225239"
  },
  {
    "text": "because it's primary driven by our research it should be sufficient for hunting bug variants and core patterns",
    "start": "225239",
    "end": "232440"
  },
  {
    "text": "they have security implications some tweaking stack is needed though for Generate reverse engineering",
    "start": "232440",
    "end": "239720"
  },
  {
    "text": "here's a list of features they are currently supported the search Primitives are not only capable of",
    "start": "239720",
    "end": "245280"
  },
  {
    "text": "finding variants and functions for our interests but also called patterns like integral flow expression in loops and",
    "start": "245280",
    "end": "252840"
  },
  {
    "text": "conditional checks in addition enter and intra binary cross references are also also supported and",
    "start": "252840",
    "end": "259380"
  },
  {
    "text": "of course the analysis is like a must-have nowadays this is how our Tools looks like on the",
    "start": "259380",
    "end": "266460"
  },
  {
    "text": "high level Leviathan is the top layer that handles user interaction as well as parsings queries and dispatching jobs",
    "start": "266460",
    "end": "272940"
  },
  {
    "text": "here is the second layer that interacts with our Leviathan library to carry all the work the third layer Leviathan util",
    "start": "272940",
    "end": "280800"
  },
  {
    "text": "is our library provides abstraction to either pros apis and structures for our handlers",
    "start": "280800",
    "end": "287100"
  },
  {
    "text": "you may notice that the inputs from query mode and script mode they have they have different rounds in the first",
    "start": "287100",
    "end": "292500"
  },
  {
    "text": "two layers eventually Leo tap into this layer to get a drop down at last all the heavy",
    "start": "292500",
    "end": "298320"
  },
  {
    "text": "lifting is done by either Pro and the hexade compiler",
    "start": "298320",
    "end": "303560"
  },
  {
    "text": "in addition to aforementioned code basis we have three databases command database",
    "start": "303560",
    "end": "309240"
  },
  {
    "text": "is used to encue jobs it's from this database they are handled that will",
    "start": "309240",
    "end": "314639"
  },
  {
    "text": "fetch the command query based on command hash and does the work analysis results as you may have guessed",
    "start": "314639",
    "end": "320699"
  },
  {
    "text": "it is used to store the result the result of each job is stored as a table this allows quicker lookup if the query",
    "start": "320699",
    "end": "327300"
  },
  {
    "text": "has already been executed before when being info contains workspace that",
    "start": "327300",
    "end": "332699"
  },
  {
    "text": "stores the basic information of the binaries as well as the let the user wish to query",
    "start": "332699",
    "end": "339259"
  },
  {
    "start": "339000",
    "end": "339000"
  },
  {
    "text": "so what is a workspace exactly in our terms essentially is a database table",
    "start": "339660",
    "end": "345000"
  },
  {
    "text": "that contains all the basic info of all binaries in a specified directory this",
    "start": "345000",
    "end": "350400"
  },
  {
    "text": "basic info includes function names Imports and Etc a workspace is created via any command",
    "start": "350400",
    "end": "357419"
  },
  {
    "text": "when a user wishes to work on a set of binaries in addition to info extraction there are some simple heuristics like",
    "start": "357419",
    "end": "365220"
  },
  {
    "text": "kick in and categorize the binaries for example a system Services likely",
    "start": "365220",
    "end": "370800"
  },
  {
    "text": "have specific permission related enforce like impersonation and reverse self",
    "start": "370800",
    "end": "376620"
  },
  {
    "text": "services like RPC interface typically have higher privileges so it's also",
    "start": "376620",
    "end": "381720"
  },
  {
    "text": "worthwhile extracting this info we did so by leveraging the idol plugin code of fine RPC",
    "start": "381720",
    "end": "388020"
  },
  {
    "text": "the characterization can speed up the subsequent search process because the user may only be interested in the",
    "start": "388020",
    "end": "395220"
  },
  {
    "text": "subset of binaries they share similar features and functionalities",
    "start": "395220",
    "end": "401180"
  },
  {
    "text": "here's a list of commands like advising career supports init initialize the",
    "start": "401240",
    "end": "406560"
  },
  {
    "text": "workspace set workspace is like switching to an existing workspace show workspace pretty much shows the current",
    "start": "406560",
    "end": "413280"
  },
  {
    "text": "info of law workspace query enters the prompt for",
    "start": "413280",
    "end": "418319"
  },
  {
    "text": "the command uh query and create an access that's pretty self-explanatory",
    "start": "418319",
    "end": "425160"
  },
  {
    "text": "this is a diagram that shows what happens underneath when the user initialize a workspace the main Handler",
    "start": "425160",
    "end": "431580"
  },
  {
    "text": "first creates an empty workspace or empty table provides sorry it involves the init",
    "start": "431580",
    "end": "438060"
  },
  {
    "text": "Handler to process all the binaries in the directory in extract all the relevant info and store them in the",
    "start": "438060",
    "end": "444060"
  },
  {
    "text": "workspace foreign this is the workflow when the",
    "start": "444060",
    "end": "450060"
  },
  {
    "start": "447000",
    "end": "447000"
  },
  {
    "text": "user enters a query command as a prompt when the main Handler receives and process a query it fetches the target",
    "start": "450060",
    "end": "457139"
  },
  {
    "text": "list of binaries from the workspace for the Target filter and then enqueue the",
    "start": "457139",
    "end": "462780"
  },
  {
    "text": "command query when handlers involved against the binaries it first fetches the command query does the job and save",
    "start": "462780",
    "end": "470039"
  },
  {
    "text": "the result finally the main Handler fetches and displays the result",
    "start": "470039",
    "end": "477740"
  },
  {
    "text": "there are two search modes that the user can initiate in there at the query prompt the first one is the SQL query",
    "start": "478440",
    "end": "485099"
  },
  {
    "text": "mode just like any typical SQL query it's designed to find a result in one or",
    "start": "485099",
    "end": "491580"
  },
  {
    "text": "multiple SQL statements and then there's a script mode it offers more control on",
    "start": "491580",
    "end": "497280"
  },
  {
    "text": "the granular level since its comp is a combo of python script plus our custom query syntax and apis which we will get",
    "start": "497280",
    "end": "504720"
  },
  {
    "text": "to in a second a library mode that only has partial access to all of the biotense",
    "start": "504720",
    "end": "510360"
  },
  {
    "text": "capabilities script mode has full access and thus it can yield results with better accuracy",
    "start": "510360",
    "end": "517820"
  },
  {
    "text": "the query parcel is based on SQL Parts a python package for processing SQL",
    "start": "518719",
    "end": "524399"
  },
  {
    "text": "queries since we have our own syntax implementation it's nowhere near any of the real",
    "start": "524399",
    "end": "530760"
  },
  {
    "text": "SQL query process used in real databases while this mode only has access to a",
    "start": "530760",
    "end": "535800"
  },
  {
    "text": "subset of capabilities that we provide in the marathon is there enough to handle common texts",
    "start": "535800",
    "end": "541500"
  },
  {
    "text": "like conditional checks on functions arguments as well as for analysis within the function",
    "start": "541500",
    "end": "547920"
  },
  {
    "text": "as shown in our design and diagram architecture slide every dispatch SQL",
    "start": "547920",
    "end": "553380"
  },
  {
    "text": "query command is handled by a general Handler the idar Handler",
    "start": "553380",
    "end": "558600"
  },
  {
    "text": "this is what a query format look like output filter is the selected output",
    "start": "558600",
    "end": "564420"
  },
  {
    "text": "that a user wishes to display is the binaries in your target workspace it can be a subset of binaries depending",
    "start": "564420",
    "end": "571980"
  },
  {
    "text": "on the qualifier this is where the binary characterization comes in handy as the",
    "start": "571980",
    "end": "577080"
  },
  {
    "text": "hand the user may choose availability Service as Target for example finally we have our own constraints like",
    "start": "577080",
    "end": "584339"
  },
  {
    "text": "keywords and operators to narrow down our search here are some examples that we actually",
    "start": "584339",
    "end": "591300"
  },
  {
    "text": "use for bar hunting the first one is looking for Target function with specific argument and type",
    "start": "591300",
    "end": "598320"
  },
  {
    "text": "the second one is searching for Target function in all binaries in the current workspace",
    "start": "598320",
    "end": "603899"
  },
  {
    "text": "the last one is looking for functions containing the target function call in your target binary",
    "start": "603899",
    "end": "610380"
  },
  {
    "text": "if search functions are found do flow analysis from a second argument of source function till the third argument",
    "start": "610380",
    "end": "616680"
  },
  {
    "text": "of sync function in order to get our big back end and",
    "start": "616680",
    "end": "622500"
  },
  {
    "text": "handlers to work with the user Supply SQL queries these queries first have to",
    "start": "622500",
    "end": "627779"
  },
  {
    "text": "be parsed and transformed into a format that both the handlers and the backend can understand which is a python",
    "start": "627779",
    "end": "633779"
  },
  {
    "text": "dictionary and this is exactly what a query parser does as you can see here the conditions and the corresponding key",
    "start": "633779",
    "end": "640500"
  },
  {
    "text": "value pairs are color coded in the same color to give you a better visual on the",
    "start": "640500",
    "end": "645660"
  },
  {
    "text": "mapping once the query is parsed and stored in the queue it's unfetched by the either",
    "start": "645660",
    "end": "652320"
  },
  {
    "text": "Handler as shown in a snippet the Handler extracts the desired key value",
    "start": "652320",
    "end": "657360"
  },
  {
    "text": "Pairs and passes the value to the appropriate API based on the keys in",
    "start": "657360",
    "end": "662579"
  },
  {
    "text": "this example the query command is looking for functions containing calls to import function low Library EX",
    "start": "662579",
    "end": "669300"
  },
  {
    "text": "with specific arguments this the plus the argument sorry lastly Handler first",
    "start": "669300",
    "end": "674459"
  },
  {
    "text": "initializes import color Tracer and then sets the anchor condition before you",
    "start": "674459",
    "end": "679920"
  },
  {
    "text": "finally search for match functions the reason why we chose python",
    "start": "679920",
    "end": "686279"
  },
  {
    "text": "dictionary because it makes these two criteria first you can nicely represent your parse user input second it works",
    "start": "686279",
    "end": "694079"
  },
  {
    "text": "well with the condition back lookup and very value comparison in a structured manner since it's straightforward to",
    "start": "694079",
    "end": "700620"
  },
  {
    "text": "convert a dictionary to Json and vice versa it does provide some degree of flexibility for future changes if any",
    "start": "700620",
    "end": "707160"
  },
  {
    "text": "and of course this design is now final we'll go with flow when it will adjust how we receive it",
    "start": "707160",
    "end": "714620"
  },
  {
    "start": "714000",
    "end": "714000"
  },
  {
    "text": "as mentioned earlier SQL query mode only has partial access to the search parameters",
    "start": "714620",
    "end": "720720"
  },
  {
    "text": "it is not by Design it's simply because it's hard to abstract certain patterns nicely in SQL format as you can see here",
    "start": "720720",
    "end": "728820"
  },
  {
    "text": "in this one um the format can be quite convoluted",
    "start": "728820",
    "end": "734100"
  },
  {
    "text": "it's technically doable but it's not very user friendly in addition now all features are worthwhile incorporating",
    "start": "734100",
    "end": "740279"
  },
  {
    "text": "them into SQL query mode and that's what will result to a stream mode",
    "start": "740279",
    "end": "746000"
  },
  {
    "text": "the plugin used in script mode is specialized version by creating our generic query Handler totally",
    "start": "746880",
    "end": "752399"
  },
  {
    "text": "customizable by the user within this plugin the user can leverage all search Primitives and API to find core patterns",
    "start": "752399",
    "end": "759600"
  },
  {
    "text": "of their interest this is what the format looks like pretty similar to the SQL query format",
    "start": "759600",
    "end": "766920"
  },
  {
    "text": "the only difference is the keyword pattern this is how the Handler knows",
    "start": "766920",
    "end": "771959"
  },
  {
    "text": "which mode you should operate in and this is how a screen mode plugin may",
    "start": "771959",
    "end": "778860"
  },
  {
    "start": "775000",
    "end": "775000"
  },
  {
    "text": "look like in this example the query invokes a plug-in code into overflow which searches for integer overflow",
    "start": "778860",
    "end": "786000"
  },
  {
    "text": "expressions here's C5 traversal is the key API that's used to Traverse the C trees and",
    "start": "786000",
    "end": "791639"
  },
  {
    "text": "control flow graph the set constraint functions is a function that allows us to do flow intent analysis",
    "start": "791639",
    "end": "798240"
  },
  {
    "text": "by passing the first argument constraints we effectively Define the scope the second argument is optional",
    "start": "798240",
    "end": "804839"
  },
  {
    "text": "and is expression pattern that represents the core pattern that a traverser should look out for while it",
    "start": "804839",
    "end": "810899"
  },
  {
    "text": "traverses the tree in this case it's looking for integer overflow expression pattern",
    "start": "810899",
    "end": "816720"
  },
  {
    "text": "the third argument is also optional it's used for specifying 10 sanitizer we",
    "start": "816720",
    "end": "823019"
  },
  {
    "text": "Implement our 10 sanitizer this way because there's so many ways to skin the cat",
    "start": "823019",
    "end": "829759"
  },
  {
    "start": "830000",
    "end": "830000"
  },
  {
    "text": "so this is our utility and such parameters provided by Leviathan",
    "start": "830279",
    "end": "836579"
  },
  {
    "text": "basic utility apis are essentially just a wrappers that wrap around the Ida Pros apis for our need",
    "start": "836579",
    "end": "843120"
  },
  {
    "text": "import color Tracer is a helper performance function matching as well as common color tracing",
    "start": "843120",
    "end": "850560"
  },
  {
    "text": "conditional checks on their arguments and value are actually done by C fund traverser",
    "start": "850560",
    "end": "855839"
  },
  {
    "text": "C fund traversal is the soul of Leviathan it provides apis and",
    "start": "855839",
    "end": "860940"
  },
  {
    "text": "let users can use to do function matching copy them search as well as tend",
    "start": "860940",
    "end": "867660"
  },
  {
    "text": "analysis so this is the format and example for function matching we have seen this",
    "start": "867660",
    "end": "874440"
  },
  {
    "text": "before when we're talking about query mode and how it works",
    "start": "874440",
    "end": "879620"
  },
  {
    "text": "and this is how it works underneath for condition one you traversal first Finds",
    "start": "881040",
    "end": "886380"
  },
  {
    "text": "Its coal C item and then checks for the function name if the function is indeed a match",
    "start": "886380",
    "end": "893220"
  },
  {
    "text": "it then proceeds to check the subsequent conditions condition 2 and 3 applies to argument",
    "start": "893220",
    "end": "899639"
  },
  {
    "text": "one's value and type so the traversal travels to argument ones corresponding C item extract is",
    "start": "899639",
    "end": "907139"
  },
  {
    "text": "type and value and just a check against the target values condition 4 requires checking augment",
    "start": "907139",
    "end": "913920"
  },
  {
    "text": "3's value along with a bit mask so this time you try pressure extract",
    "start": "913920",
    "end": "919079"
  },
  {
    "text": "argumentaries value apply the beef mask and just a check",
    "start": "919079",
    "end": "924920"
  },
  {
    "text": "our expression matching format on the other hand is quite different since its intended usage is for specifying",
    "start": "925560",
    "end": "932040"
  },
  {
    "text": "expression as well as hand sanitization",
    "start": "932040",
    "end": "936680"
  },
  {
    "text": "here's an example of real values the other condition is like an anchor and the C item matching the anchor condition",
    "start": "937800",
    "end": "944339"
  },
  {
    "text": "is like a current pointer as the nested although necessary conditions won't be",
    "start": "944339",
    "end": "950760"
  },
  {
    "text": "checked unless the anchor conditions are met next is like the next pointer it",
    "start": "950760",
    "end": "957300"
  },
  {
    "text": "instructs where the sea function traversal should move the anchor to this is important because our expression",
    "start": "957300",
    "end": "963000"
  },
  {
    "text": "pattern matching is relative not absolute",
    "start": "963000",
    "end": "967940"
  },
  {
    "text": "and this is how it works underneath the conditions and and the corresponding keyword pairs are again uh color coded",
    "start": "968339",
    "end": "975600"
  },
  {
    "text": "in the same color to give you a better visualization the dash pink arrows indicate the places",
    "start": "975600",
    "end": "981360"
  },
  {
    "text": "that the anchors was previously pointing to a pointing to them the solid pink",
    "start": "981360",
    "end": "986459"
  },
  {
    "text": "arrow means this is where the anchor is currently pointing at know that every condition is relative to",
    "start": "986459",
    "end": "992699"
  },
  {
    "text": "where the current anchor is as a traveler troubles down a tree or",
    "start": "992699",
    "end": "997740"
  },
  {
    "text": "condition must be evaluated to be true otherwise it will just stop and quit and thus the expression fashion is not",
    "start": "997740",
    "end": "1004519"
  },
  {
    "text": "considered a matched full constraint is used to set boundaries for our 4 and 10 analysis",
    "start": "1004519",
    "end": "1012259"
  },
  {
    "text": "boundaries are defined by all path from the source to the sink each basic block in a path contains a",
    "start": "1012259",
    "end": "1019579"
  },
  {
    "text": "list of C item indices Each of which are ordered by silica line numbers and our",
    "start": "1019579",
    "end": "1025760"
  },
  {
    "text": "SC trip also is done in that order additional expression matching and tension can be applied",
    "start": "1025760",
    "end": "1032720"
  },
  {
    "text": "during the process essentially just like a dictionary of dictionaries in the code",
    "start": "1032720",
    "end": "1039400"
  },
  {
    "text": "python has this awesome feature that allows one to add attributes to object at runtime",
    "start": "1039760",
    "end": "1045500"
  },
  {
    "text": "and this is exactly how I do my painting by adding the tended attribute to every C item as soon as the source is set in",
    "start": "1045500",
    "end": "1052340"
  },
  {
    "text": "concept constraints the 10 starts to propagate conventional propagation rules during the propagation process the",
    "start": "1052340",
    "end": "1059360"
  },
  {
    "text": "variables are of course tracked so we know whether the variable of our interest at a specific line is tinted or not",
    "start": "1059360",
    "end": "1068559"
  },
  {
    "text": "LeBron also supports correspondary course references it is done by our cross ref cross ref Handler",
    "start": "1070220",
    "end": "1077419"
  },
  {
    "text": "which basically leverages all the apis that we have just described in this example the Handler first find the core",
    "start": "1077419",
    "end": "1084320"
  },
  {
    "text": "path to export from the cross 4 sync from the previous job",
    "start": "1084320",
    "end": "1089840"
  },
  {
    "text": "Eden tries to find the colors that involve this export functions in this current job",
    "start": "1089840",
    "end": "1095000"
  },
  {
    "text": "finally it enumerates the core path of all colors in search for crossfall",
    "start": "1095000",
    "end": "1100039"
  },
  {
    "text": "source and that's how you build a relationship from the source to the sink now that we",
    "start": "1100039",
    "end": "1106039"
  },
  {
    "text": "have some high level understanding about the towards capabilities I will hand it back over to Tao and he",
    "start": "1106039",
    "end": "1111500"
  },
  {
    "text": "will show you how this tool is used in real bug hunting",
    "start": "1111500",
    "end": "1115840"
  },
  {
    "text": "thank you Kim so we know all details about our new pattern search too for binaries let's",
    "start": "1116840",
    "end": "1122480"
  },
  {
    "text": "see how we use it to search unique patterns and find vulnerability variants and Export exploitation Primitives",
    "start": "1122480",
    "end": "1129980"
  },
  {
    "text": "we'll introduce four unique code patterns covering memory corruption vulnerability logic vulnerability and",
    "start": "1129980",
    "end": "1135620"
  },
  {
    "text": "exploitation Primitives let's start from the simple but classical fire hydrating vulnerabilities",
    "start": "1135620",
    "end": "1142700"
  },
  {
    "start": "1138000",
    "end": "1138000"
  },
  {
    "text": "you can see there are two seed vulnerabilities the first is the classical DL hijacking",
    "start": "1142700",
    "end": "1150020"
  },
  {
    "text": "vulnerability you can see the vulnerable function called Low library to load a",
    "start": "1150020",
    "end": "1155299"
  },
  {
    "text": "non-existing DL so if the attacker create a fake DL in a",
    "start": "1155299",
    "end": "1162020"
  },
  {
    "text": "directory from the past environmental variable and when the nervous function is called the fake DL will be low load",
    "start": "1162020",
    "end": "1170240"
  },
  {
    "text": "successfully the second one is driver installer file hijacking and you can see this file pass",
    "start": "1170240",
    "end": "1177260"
  },
  {
    "text": "can be fully controlled by the standard user so the standard user can modify override or create a fake hello phase.if",
    "start": "1177260",
    "end": "1186559"
  },
  {
    "text": "and lead to some unexpected situations",
    "start": "1186559",
    "end": "1192340"
  },
  {
    "start": "1191000",
    "end": "1191000"
  },
  {
    "text": "it's a straightforward to abstract the vulnerability model for the file",
    "start": "1192740",
    "end": "1197900"
  },
  {
    "text": "hydrating pattern you can see firstly create a fake file trigger the file access and high privilege application",
    "start": "1197900",
    "end": "1205580"
  },
  {
    "text": "access as missing file and the load or open the fixed file which will lead to",
    "start": "1205580",
    "end": "1210919"
  },
  {
    "text": "privilege escalation Wireless bypass Etc",
    "start": "1210919",
    "end": "1216440"
  },
  {
    "start": "1216000",
    "end": "1216000"
  },
  {
    "text": "based on that we can extract the classical DL hijacking vulnerability",
    "start": "1216440",
    "end": "1221960"
  },
  {
    "text": "pattern you can see we will firstly search sensitive API calls such as low",
    "start": "1221960",
    "end": "1227840"
  },
  {
    "text": "Library load rbex and query optional delay loaded API Which is less recognized but can also lead to DL",
    "start": "1227840",
    "end": "1235039"
  },
  {
    "text": "hijacking vulnerabilities you know we also don't want to make sure the DL file",
    "start": "1235039",
    "end": "1241100"
  },
  {
    "text": "is a constant string and not ends with a DOT DL now start with API Dash now",
    "start": "1241100",
    "end": "1246740"
  },
  {
    "text": "loaded as data or resource and most importantly not existing in a system",
    "start": "1246740",
    "end": "1252020"
  },
  {
    "text": "directory with that we can create code queries for those three sensitive apis you can see",
    "start": "1252020",
    "end": "1260299"
  },
  {
    "text": "our queries search the the function contain the sensitive apis and check the",
    "start": "1260299",
    "end": "1266660"
  },
  {
    "text": "argument type value and uh and last we'll uh check if the DL",
    "start": "1266660",
    "end": "1274400"
  },
  {
    "text": "file is not existing in a system directory running those queries we got those kind",
    "start": "1274400",
    "end": "1281059"
  },
  {
    "text": "of results load Library six four um low Library ex five to one and the",
    "start": "1281059",
    "end": "1287539"
  },
  {
    "text": "query optional delay load API will find file result permutation the last one which is very interesting it is related",
    "start": "1287539",
    "end": "1294679"
  },
  {
    "text": "hyper-v host Computer Service and named VM compute and the vulnerable function",
    "start": "1294679",
    "end": "1300320"
  },
  {
    "text": "actually called the query optional delay loaded API to load a",
    "start": "1300320",
    "end": "1306220"
  },
  {
    "text": "ccglaunchpad.dl which cannot be found found in the system directories",
    "start": "1306220",
    "end": "1312500"
  },
  {
    "text": "to find the triage we Traverse all call Path aesthetically and find a",
    "start": "1312500",
    "end": "1317659"
  },
  {
    "text": "interesting course deck the vulnerable function is finally called by the service me which means the Window",
    "start": "1317659",
    "end": "1324919"
  },
  {
    "text": "Service started already started and the vulnerable function will be called and",
    "start": "1324919",
    "end": "1330260"
  },
  {
    "text": "we can create a fake file in the directory from the past environmental variable such as say Python and the",
    "start": "1330260",
    "end": "1337159"
  },
  {
    "text": "window admin start or restart the VM compute service or fake ccg Launchpad",
    "start": "1337159",
    "end": "1343880"
  },
  {
    "text": "audio where I'll be loading into the um process successfully",
    "start": "1343880",
    "end": "1349340"
  },
  {
    "start": "1349000",
    "end": "1349000"
  },
  {
    "text": "second second reporting pattern you can see there are two parts in the state of vulnerability",
    "start": "1349340",
    "end": "1356900"
  },
  {
    "text": "the first part is uh we read a report Point data it calls divisor control with",
    "start": "1356900",
    "end": "1363440"
  },
  {
    "text": "the divisor control code get it get a repairs point",
    "start": "1363440",
    "end": "1368480"
  },
  {
    "text": "to get a replacement data and you can see there are some filtering uh by",
    "start": "1368480",
    "end": "1374659"
  },
  {
    "text": "comparing the repairs Point tags after that in the the function in the right",
    "start": "1374659",
    "end": "1380299"
  },
  {
    "text": "figure is used to process reposition data and you can see this line of the",
    "start": "1380299",
    "end": "1385340"
  },
  {
    "text": "code which has the integral flow there's a word value at a constant",
    "start": "1385340",
    "end": "1391039"
  },
  {
    "text": "assigned to our word value when the integer flow happens",
    "start": "1391039",
    "end": "1396380"
  },
  {
    "text": "now this check will be bypassed and the memory copy will cause a lot of boundary",
    "start": "1396380",
    "end": "1402380"
  },
  {
    "text": "access vulnerabilities and we extract the vulnerability model",
    "start": "1402380",
    "end": "1408380"
  },
  {
    "start": "1405000",
    "end": "1405000"
  },
  {
    "text": "for this pattern like this Saturday price point data trigger reverse Point data access high",
    "start": "1408380",
    "end": "1415100"
  },
  {
    "text": "privilege applications get a reverse Point data finally the low privileged user controllable data will return to",
    "start": "1415100",
    "end": "1421760"
  },
  {
    "text": "the higher privilege applications there are two parts in it firstly",
    "start": "1421760",
    "end": "1428960"
  },
  {
    "text": "comparing our filtering according to the reverse Point tax and then process",
    "start": "1428960",
    "end": "1435520"
  },
  {
    "text": "reporting data based on the vulnerability model we extract the the vulnerability pattern",
    "start": "1435520",
    "end": "1442760"
  },
  {
    "text": "like this you can see there are two steps the first step is to find the reports Point read to do that we will",
    "start": "1442760",
    "end": "1450559"
  },
  {
    "text": "search the threshold Control Function and check the signal argument to see if",
    "start": "1450559",
    "end": "1457460"
  },
  {
    "text": "it is the get over parse point and we'll search the code of comparing the output buffer with the reverse Point tags",
    "start": "1457460",
    "end": "1465500"
  },
  {
    "text": "in the second step to we find uh we want to find the",
    "start": "1465500",
    "end": "1472280"
  },
  {
    "text": "integer flow exactly for to do that we will do tending from",
    "start": "1472280",
    "end": "1478820"
  },
  {
    "text": "the audible buffer to the memory copy and we we we will check if there are",
    "start": "1478820",
    "end": "1484400"
  },
  {
    "text": "word Value Plus a constant and assign a sum to our value which lead to the",
    "start": "1484400",
    "end": "1490720"
  },
  {
    "text": "integer flow and we will also make sure there's a no integer flow check",
    "start": "1490720",
    "end": "1498200"
  },
  {
    "start": "1498000",
    "end": "1498000"
  },
  {
    "text": "with that we can create the queries in query mode to find the replace Point",
    "start": "1498200",
    "end": "1504919"
  },
  {
    "text": "rate you can see the query I will search device control and check the second",
    "start": "1504919",
    "end": "1510260"
  },
  {
    "text": "agreement value and also check the fifth",
    "start": "1510260",
    "end": "1516260"
  },
  {
    "text": "argument to see if the if there's a equal or not equal to a number of constant lists",
    "start": "1516260",
    "end": "1523179"
  },
  {
    "text": "here is uh here are examples of the WCI related",
    "start": "1523179",
    "end": "1529240"
  },
  {
    "text": "reports Point tags after running the query we we can get",
    "start": "1529240",
    "end": "1534440"
  },
  {
    "text": "some results now the the functions which call we which uh find a replace Point",
    "start": "1534440",
    "end": "1542900"
  },
  {
    "text": "rate and if you want to step further to find your price point data process and you",
    "start": "1542900",
    "end": "1549200"
  },
  {
    "text": "can create a queries like this find search the function which contain the",
    "start": "1549200",
    "end": "1554539"
  },
  {
    "text": "replace Point read function and do the tinting from the output buffer to the memory copy",
    "start": "1554539",
    "end": "1560720"
  },
  {
    "text": "finding reports Point read and the person data process is good enough for us to get some results to to to review",
    "start": "1560720",
    "end": "1568039"
  },
  {
    "text": "to find that possible vulnerabilities but if you want to accurately find the",
    "start": "1568039",
    "end": "1574039"
  },
  {
    "text": "integer flow we can also Implement in or in in the script mode you can see there are four steps in the",
    "start": "1574039",
    "end": "1581059"
  },
  {
    "text": "script mode the first step is to find a reverse Point rate which share the same",
    "start": "1581059",
    "end": "1586340"
  },
  {
    "text": "logic with the query mode it is used import color tweezer just to find the",
    "start": "1586340",
    "end": "1592580"
  },
  {
    "text": "target anchor function device or control and you see Funk C func traversal class",
    "start": "1592580",
    "end": "1598940"
  },
  {
    "text": "to find the reverse point tag or comparison after that in the Second Step we'll find all the colors of",
    "start": "1598940",
    "end": "1606260"
  },
  {
    "text": "the replace point point read function and the inner third step will find the",
    "start": "1606260",
    "end": "1612679"
  },
  {
    "text": "integer flow of for in all the colors with our customized expression matching",
    "start": "1612679",
    "end": "1619220"
  },
  {
    "text": "mechanism here is a detail of the expression matching mechanism you can see the first",
    "start": "1619220",
    "end": "1627020"
  },
  {
    "text": "expression is to search and match this line of the code which has the integral",
    "start": "1627020",
    "end": "1633559"
  },
  {
    "text": "flow and you can see we we will search assign operator and we will check if",
    "start": "1633559",
    "end": "1640220"
  },
  {
    "text": "there are arithmetic operation and the number pointer and also",
    "start": "1640220",
    "end": "1645940"
  },
  {
    "text": "we have the sanitizer expression to find if there's a integer flow lens check",
    "start": "1645940",
    "end": "1654520"
  },
  {
    "text": "Ronnie running those scripts and queries we've got five results and some of them",
    "start": "1655279",
    "end": "1662779"
  },
  {
    "text": "got our cves and some of the some of them were silently patched by by",
    "start": "1662779",
    "end": "1668659"
  },
  {
    "text": "Microsoft and worth mentioning we have um one more results",
    "start": "1668659",
    "end": "1674900"
  },
  {
    "text": "um which is still vulnerable so we have to hide details about it",
    "start": "1674900",
    "end": "1680960"
  },
  {
    "text": "and we we can confirm all the results has a vulnerable integral flow and a lot",
    "start": "1680960",
    "end": "1688640"
  },
  {
    "text": "of boundary access vulnerabilities in different binaries",
    "start": "1688640",
    "end": "1693679"
  },
  {
    "text": "here's another example to find a triage RBC interface function is one kind of",
    "start": "1693679",
    "end": "1698840"
  },
  {
    "text": "entry point we finally find the connection between the vulnerable function with the RPC interface function",
    "start": "1698840",
    "end": "1705440"
  },
  {
    "text": "statically and so we can create a RPC interface",
    "start": "1705440",
    "end": "1713779"
  },
  {
    "text": "function in the RBC client and the salary personally data in the meantime to crash the app info service",
    "start": "1713779",
    "end": "1722140"
  },
  {
    "start": "1721000",
    "end": "1721000"
  },
  {
    "text": "third pattern ACL over Rhythm pattern um the set of vulnerability for this",
    "start": "1722480",
    "end": "1728240"
  },
  {
    "text": "pattern is very interesting which we use in the Pontoon 2021y and you can see the",
    "start": "1728240",
    "end": "1733640"
  },
  {
    "text": "vulnerable code will call a gnm security info to get the ACL of a file with error",
    "start": "1733640",
    "end": "1740360"
  },
  {
    "text": "4 in the ecl and calculates ecl and set the new ecl to the same file by calling",
    "start": "1740360",
    "end": "1747440"
  },
  {
    "text": "sending secret info so if the attacker can redirect the file to a system file",
    "start": "1747440",
    "end": "1752720"
  },
  {
    "text": "in this time frame and the system files ecl will be",
    "start": "1752720",
    "end": "1758059"
  },
  {
    "text": "overwritten with a rifle very interesting vulnerability and uh",
    "start": "1758059",
    "end": "1763220"
  },
  {
    "text": "you can see this is how we abstract the vulnerability model firstly Cadence cream for core to get",
    "start": "1763220",
    "end": "1771080"
  },
  {
    "text": "the easier of the file with everyone full and the window surname Supreme 4 is",
    "start": "1771080",
    "end": "1778640"
  },
  {
    "text": "called the file is redirect redirected to the system file",
    "start": "1778640",
    "end": "1783860"
  },
  {
    "text": "and after the uh sending screening for execution the system files ecl will be",
    "start": "1783860",
    "end": "1789980"
  },
  {
    "text": "overwritten which can lead to the privilege escalation directly",
    "start": "1789980",
    "end": "1795620"
  },
  {
    "text": "based on that we can extract the vulnerability pattern is easy to understand find the km security info CMC",
    "start": "1795620",
    "end": "1804620"
  },
  {
    "text": "cream for and check the second argument to see if it is file object and the",
    "start": "1804620",
    "end": "1809659"
  },
  {
    "text": "final common color directly and indirectly with that we create a that queries",
    "start": "1809659",
    "end": "1818980"
  },
  {
    "text": "inquiry mode to search this pattern and you can see uh the query while search",
    "start": "1818980",
    "end": "1825260"
  },
  {
    "text": "function containing ganym screen for sending Supreme 4 and check the argument too and just set the trace indirect flag",
    "start": "1825260",
    "end": "1834620"
  },
  {
    "text": "execution the queries we got a 32 result out of",
    "start": "1834620",
    "end": "1839679"
  },
  {
    "text": "637 elevated service binaries but we can now disclose it right now",
    "start": "1839679",
    "end": "1845600"
  },
  {
    "text": "since they are still not patched actually we we have to blur several slides in this section unfortunately",
    "start": "1845600",
    "end": "1852799"
  },
  {
    "text": "since we were asked to hide all details by Microsoft it's a big pity",
    "start": "1852799",
    "end": "1858279"
  },
  {
    "text": "but we guarantee we'll publish all slides after they are fully patched in January next year",
    "start": "1858279",
    "end": "1865700"
  },
  {
    "text": "vulnerability confirmation pattern result charge demo",
    "start": "1865700",
    "end": "1874039"
  },
  {
    "text": "last words for this pattern this is very interesting uh zero this story the initial funding",
    "start": "1874039",
    "end": "1881179"
  },
  {
    "text": "did not meet the Microsoft criteria but after based on that we found a new",
    "start": "1881179",
    "end": "1886399"
  },
  {
    "text": "attacking vector and reported five new vulnerabilities Microsoft confirmed them Grant but bounty to us but when we",
    "start": "1886399",
    "end": "1894799"
  },
  {
    "text": "request for vulnerability disclosure at blackhead the we were asked to hide all",
    "start": "1894799",
    "end": "1900020"
  },
  {
    "text": "the details until January 2023 because they are fixing the design issues",
    "start": "1900020",
    "end": "1906620"
  },
  {
    "text": "very interesting right nah the last pattern a pool spray pattern",
    "start": "1906620",
    "end": "1913520"
  },
  {
    "text": "code patterns not work only for the vulnerability variance Discovery but",
    "start": "1913520",
    "end": "1919399"
  },
  {
    "text": "also work work for the exploitation Primitives kernel pool spray is very important to",
    "start": "1919399",
    "end": "1924620"
  },
  {
    "text": "the exploitation in this case we want to figure out how RDP client send what kind",
    "start": "1924620",
    "end": "1931940"
  },
  {
    "text": "of pdus to the RDP server for the canopy spree here is how we abstract the kernel",
    "start": "1931940",
    "end": "1939260"
  },
  {
    "text": "pool primitive model you can see the RDP client send one video continuing many",
    "start": "1939260",
    "end": "1946039"
  },
  {
    "text": "fields or many many pdus with client controllable data to the RDP server RDP",
    "start": "1946039",
    "end": "1951919"
  },
  {
    "text": "server receive and process our RDP pdu and allocate many kernel pools and do",
    "start": "1951919",
    "end": "1959000"
  },
  {
    "text": "the data copy tool that just allocated kernel pools",
    "start": "1959000",
    "end": "1966158"
  },
  {
    "start": "1965000",
    "end": "1965000"
  },
  {
    "text": "based on that we extract the post-free Primitive pattern and you can see there are two steps the first step is to find",
    "start": "1966740",
    "end": "1973760"
  },
  {
    "text": "a data copy to do that we will firstly search kernel play location and then",
    "start": "1973760",
    "end": "1980480"
  },
  {
    "text": "find the memory copy to just allocated kernel pool there are two ways for that",
    "start": "1980480",
    "end": "1985760"
  },
  {
    "text": "purpose memory memory copy API and the memory right taking a loop besides we",
    "start": "1985760",
    "end": "1993019"
  },
  {
    "text": "also need to figure out which pdu can lead to the data copy for this purpose we have X reference Handler to find a",
    "start": "1993019",
    "end": "2001000"
  },
  {
    "text": "core path from the RDP video data processing function to the data copy",
    "start": "2001000",
    "end": "2006340"
  },
  {
    "text": "function firstly we we found the MCS IC",
    "start": "2006340",
    "end": "2011440"
  },
  {
    "text": "raw input as RDP video data processing function but it contains the virtual function call in a course deck which",
    "start": "2011440",
    "end": "2019059"
  },
  {
    "text": "lead to the failure of the static function X reference search so we change",
    "start": "2019059",
    "end": "2025500"
  },
  {
    "text": "X flow source to the mcsn data callback function as RDP pdu data processing",
    "start": "2025500",
    "end": "2033220"
  },
  {
    "text": "function with that we can create a queries inquiry mode to find data copy with",
    "start": "2033220",
    "end": "2039340"
  },
  {
    "start": "2034000",
    "end": "2034000"
  },
  {
    "text": "memory copy you can see the query search the function containing allocated pool with tag and a memory",
    "start": "2039340",
    "end": "2046179"
  },
  {
    "text": "copy and we do tending we we will find it if there's a uh data flow from the",
    "start": "2046179",
    "end": "2055480"
  },
  {
    "text": "return address of allocated pool is tagged to the destination address of the memory copy and we found several results",
    "start": "2055480",
    "end": "2063878"
  },
  {
    "text": "in term DD and module and you can see ICA Channel input internal function is",
    "start": "2063879",
    "end": "2069398"
  },
  {
    "text": "exactly what we want and then we'll connect rdpdo to data",
    "start": "2069399",
    "end": "2076839"
  },
  {
    "start": "2073000",
    "end": "2073000"
  },
  {
    "text": "copy with memory copy uh let's like we mentioned before we have X reference",
    "start": "2076839",
    "end": "2082118"
  },
  {
    "text": "Handler to find the core path between the RDP video data percentage function and the data",
    "start": "2082119",
    "end": "2090339"
  },
  {
    "text": "copy function we just found and we have found two results including",
    "start": "2090339",
    "end": "2096638"
  },
  {
    "text": "the cost stack of the first results you can see there's a interesting function named",
    "start": "2096639",
    "end": "2103119"
  },
  {
    "text": "invalidate rect according to the function name we found we we found a",
    "start": "2103119",
    "end": "2109900"
  },
  {
    "text": "specific pdu named refresh react pdu which can do the pull spray similarly",
    "start": "2109900",
    "end": "2117240"
  },
  {
    "text": "from the cost deck of second results we have increasing function I say Channel",
    "start": "2117240",
    "end": "2122980"
  },
  {
    "text": "imported ex and we finally found a video named uh client name request video in",
    "start": "2122980",
    "end": "2130420"
  },
  {
    "text": "the virtual file system so it saves us a lot of time to Traverse",
    "start": "2130420",
    "end": "2137099"
  },
  {
    "text": "stolen pages of our RDP documents we mentioned before there's another way",
    "start": "2137099",
    "end": "2145480"
  },
  {
    "text": "to do the data copy memory right in Loop and you can see this expression is to",
    "start": "2145480",
    "end": "2152380"
  },
  {
    "text": "search the memory right this kind of memory memory right and in a loop and we",
    "start": "2152380",
    "end": "2160540"
  },
  {
    "text": "finally found two results in rdpwd module and you can see handle persistent cash list",
    "start": "2160540",
    "end": "2167619"
  },
  {
    "text": "function is exactly what we want and",
    "start": "2167619",
    "end": "2173140"
  },
  {
    "text": "after that we connect card video data RDP pdu or two data copy with a memory",
    "start": "2173140",
    "end": "2179980"
  },
  {
    "text": "right in Loop and similarly we found the core stack and uploading to the",
    "start": "2179980",
    "end": "2187480"
  },
  {
    "text": "function name handle persistent cash list we found a specific pu named",
    "start": "2187480",
    "end": "2192940"
  },
  {
    "text": "persistent k-list pdu which can be used to do the Canon pool spree",
    "start": "2192940",
    "end": "2199359"
  },
  {
    "text": "finally we created three different ways for the put spray with RDP video which",
    "start": "2199359",
    "end": "2205060"
  },
  {
    "text": "can be used in a well-known RDP vulnerability blue cape",
    "start": "2205060",
    "end": "2210220"
  },
  {
    "text": "and they are totally different with a published published methods",
    "start": "2210220",
    "end": "2217500"
  },
  {
    "text": "you can refer more details in your blue hat talk",
    "start": "2217500",
    "end": "2222700"
  },
  {
    "start": "2222000",
    "end": "2222000"
  },
  {
    "text": "last summary and the takeaways um firstly with the help of hex hex Ray",
    "start": "2222700",
    "end": "2229599"
  },
  {
    "text": "apis is definitely viable to create a codependent Search tool for binaries the",
    "start": "2229599",
    "end": "2235180"
  },
  {
    "text": "idea of code pattern search Primitives can also be used in other study code static analysis tools such as",
    "start": "2235180",
    "end": "2243520"
  },
  {
    "text": "binja ghidra second we prove code pattern search not only work for memory",
    "start": "2243520",
    "end": "2250900"
  },
  {
    "text": "corruption vulnerabilities but it can also be used to find to find logic bugs which can not easily be found by fuzzy",
    "start": "2250900",
    "end": "2259420"
  },
  {
    "text": "or manually color review and also can be used to find a new less recognized",
    "start": "2259420",
    "end": "2266040"
  },
  {
    "text": "attacking surface and a new exploitation Primitives",
    "start": "2266040",
    "end": "2271060"
  },
  {
    "text": "um third in each case we disclose the entire process of how to use code",
    "start": "2271060",
    "end": "2277180"
  },
  {
    "text": "patterns to automatically final vulnerabilities and exploitation Primitives in windows with R2 I hope you",
    "start": "2277180",
    "end": "2285099"
  },
  {
    "text": "can get some Inspirations from our detailed disclosures last words we want",
    "start": "2285099",
    "end": "2290859"
  },
  {
    "text": "to mention there's a no Silver Bullet for bug hunting although you have the power tool",
    "start": "2290859",
    "end": "2296800"
  },
  {
    "text": "to facilitate your research deeply understanding your target is still the",
    "start": "2296800",
    "end": "2302740"
  },
  {
    "text": "most important thing here is some links and references and",
    "start": "2302740",
    "end": "2309040"
  },
  {
    "text": "now we take questions thank you for listening",
    "start": "2309040",
    "end": "2314340"
  },
  {
    "text": "[Applause] [Music]",
    "start": "2314340",
    "end": "2321420"
  },
  {
    "text": "[Music]",
    "start": "2325260",
    "end": "2328369"
  }
]