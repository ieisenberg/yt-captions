[
  {
    "text": "[Music] [Laughter]",
    "start": "1610",
    "end": "10260"
  },
  {
    "text": "this morning we have advanced arm exploitation with stepen and Steven and special guest so please give a round of",
    "start": "10920",
    "end": "18320"
  },
  {
    "text": "applause and enjoy the",
    "start": "18320",
    "end": "21439"
  },
  {
    "text": "talk thank you thank you all right so",
    "start": "25240",
    "end": "31320"
  },
  {
    "text": "that was a pre-introduction and we'll introduce ourselves individually also so",
    "start": "31320",
    "end": "37640"
  },
  {
    "text": "uh as you said we're stepen and Steven we run a Blog called Don't stuff beans up your nose I'll give you a little background",
    "start": "37640",
    "end": "44480"
  },
  {
    "text": "about us because you probably never heard of us before um uh we're former co-workers we used to",
    "start": "44480",
    "end": "50239"
  },
  {
    "text": "work with each other at a defense contractor doing infos stuff and now we do this blog together and blog about",
    "start": "50239",
    "end": "56719"
  },
  {
    "text": "computer stuff and infos stuff little about me I'm an independent security researcher right now uh I was",
    "start": "56719",
    "end": "63359"
  },
  {
    "text": "formerly a director of information security at a bank uh until a couple months ago before that I was also",
    "start": "63359",
    "end": "68960"
  },
  {
    "text": "independent but then before that I worked at Modano and prior to that McAfee and a defense",
    "start": "68960",
    "end": "75240"
  },
  {
    "text": "contractor uh was a founding member of kin shotto and did all the ctfs and",
    "start": "75240",
    "end": "80479"
  },
  {
    "text": "stuff with him and seesaw and all that kind of stuff and I do talks and stuff all around Lawler on the other hand uh is",
    "start": "80479",
    "end": "89119"
  },
  {
    "text": "this go uh currently I'm basically an independent security researcher prior to this I was on Mandy and maare Analysis",
    "start": "89119",
    "end": "96159"
  },
  {
    "text": "team obviously we work together uh doing defense stuff I used to write sonar simulators for a living um specialize in",
    "start": "96159",
    "end": "104360"
  },
  {
    "text": "kernel development software exploitation vulnerability analysis blah blah blah blah and as you can tell he's very",
    "start": "104360",
    "end": "110439"
  },
  {
    "text": "enthused about everything anyway uh so then we have a",
    "start": "110439",
    "end": "116320"
  },
  {
    "text": "special guest also George werki from Strike thanks for having me so my name is k vaski I work as a security",
    "start": "116320",
    "end": "122640"
  },
  {
    "text": "researcher at CR strike and those guys were nice enough to invite me here to share some of the exploit techniques",
    "start": "122640",
    "end": "128399"
  },
  {
    "text": "that I've been using on Android recently cool so um yeah so we're going to talk about",
    "start": "128399",
    "end": "134560"
  },
  {
    "text": "software exploitation on arm which we know runs on iPads iPhones pretty much every mobile platform um but we'll give",
    "start": "134560",
    "end": "141440"
  },
  {
    "text": "you a little background about how we got into this stuff first uh we did a talk last year called Hardware hacking for",
    "start": "141440",
    "end": "146599"
  },
  {
    "text": "software people which was kind of like um it was just more fun basically like",
    "start": "146599",
    "end": "151640"
  },
  {
    "text": "little things you can do to mess around with Hardwares and pics and ic's and stuff but that's actually was was the",
    "start": "151640",
    "end": "156800"
  },
  {
    "text": "impetus for us getting into this arm and embedded stuff because with those debug interfaces that we started to find on",
    "start": "156800",
    "end": "162239"
  },
  {
    "text": "Hardware we started to see bugs and crashes and stuff and the next step is obviously exploitation so we wanted to",
    "start": "162239",
    "end": "167560"
  },
  {
    "text": "learn about uh about arm a little bit so then uh we'll talk about the",
    "start": "167560",
    "end": "173280"
  },
  {
    "text": "background and then we'll actually give you some of the uh information about the class that we actually ended up",
    "start": "173280",
    "end": "179319"
  },
  {
    "text": "developing we'll talk about some of the unique research I guess we came up with um doing r on arm and like some really",
    "start": "179319",
    "end": "186319"
  },
  {
    "text": "interesting exploitation techniques that we that we developed we didn't really see it publicly demonstrated before so",
    "start": "186319",
    "end": "192560"
  },
  {
    "text": "we'll talk about that so first things first this is kind of uh this is kind of what got me",
    "start": "192560",
    "end": "198720"
  },
  {
    "text": "started I started reading a lot of like Electronics plugs and stuff and seeing cool people take apart Nintendo DSes and",
    "start": "198720",
    "end": "204239"
  },
  {
    "text": "stuff it's like what is this I know nothing about it I studied physics I wasn't I didn't even do computer stuff",
    "start": "204239",
    "end": "210000"
  },
  {
    "text": "so um this stuff was interesting to me I had basic enm skills so I started looking into it doing a little reading",
    "start": "210000",
    "end": "216840"
  },
  {
    "text": "and the thing I wanted to learn is how all these these chips and stuff communicated and did a little research and basically found out that there are a",
    "start": "216840",
    "end": "223560"
  },
  {
    "text": "lot of standard interfaces like what looks like chaos down on a PCB is actually really standardized there's",
    "start": "223560",
    "end": "228799"
  },
  {
    "text": "like ITC there's microwire there's SPI there's all these interesting little serial protocols and you can interface",
    "start": "228799",
    "end": "234200"
  },
  {
    "text": "with them and they're from a security standpoint uh there's a lot of trust inherent Trust in the PCB so like you",
    "start": "234200",
    "end": "241319"
  },
  {
    "text": "can have eom talk to a controller via a very standard serial protocol that you",
    "start": "241319",
    "end": "246480"
  },
  {
    "text": "can tap so I started doing that I started tapping these buses and listening to what these little chips were talking to each other and",
    "start": "246480",
    "end": "252840"
  },
  {
    "text": "saying so this is the kind of stuff that uses these protocols I started finding these things in uh batteries temperature",
    "start": "252840",
    "end": "258519"
  },
  {
    "text": "monitors uh bus controllers um everything I started seeing all this stuff pretty much everywhere and then I",
    "start": "258519",
    "end": "265040"
  },
  {
    "text": "started talking to friends about it and I think last year Charlie Mill did talk on i2c and MacBook batteries and I",
    "start": "265040",
    "end": "272400"
  },
  {
    "text": "helped them out with some of that work because it turns out that your MacBook talks to your battery via i2c so uh we",
    "start": "272400",
    "end": "278600"
  },
  {
    "text": "did a little work on that kind of stuff so so then of course finding it everywhere I started making it relevant",
    "start": "278600",
    "end": "284440"
  },
  {
    "text": "to my infos research so I started finding these Deb interfaces and routers and uh one other cool place that is",
    "start": "284440",
    "end": "290479"
  },
  {
    "text": "found is inside of VGA your monitor talks to your computer via i2c across the VGA bus which is cool and you can",
    "start": "290479",
    "end": "296000"
  },
  {
    "text": "tap it um so I started seeing it everywhere and so I let loose on a cable",
    "start": "296000",
    "end": "302240"
  },
  {
    "text": "modem found these exposed pens interfaced to the pens using my Hardware Tech techniques which I'm not going to",
    "start": "302240",
    "end": "308720"
  },
  {
    "text": "get into today but uh and then watch the thing boot saw it had a ecost real time",
    "start": "308720",
    "end": "314680"
  },
  {
    "text": "operating system and then started some fuzzing and then boom right started seeing bugs and this happened on a lot",
    "start": "314680",
    "end": "320800"
  },
  {
    "text": "of different appliances started seeing lots of cool crashes what next so that's when we started getting",
    "start": "320800",
    "end": "327759"
  },
  {
    "text": "into learning more about embedded platform forms and um and reverse engineering on embedded platforms my",
    "start": "327759",
    "end": "333880"
  },
  {
    "text": "machine's x86 all my exploitation experience is X x86 same with Steve and we were kind of excited to like learn",
    "start": "333880",
    "end": "340160"
  },
  {
    "text": "something new so first things first is we built a a lab based on qmu to",
    "start": "340160",
    "end": "345440"
  },
  {
    "text": "simulate the arm Hardware we got comfortable with our tool change GDB and uh looking at",
    "start": "345440",
    "end": "352600"
  },
  {
    "text": "disassemblies and Ida and stuff like that um and then we started writing vulnerable apps the first thing you're",
    "start": "352600",
    "end": "358560"
  },
  {
    "text": "going to do when you want to learn EXP exploitations you write sample code Snippets you maybe open Mark Dow's book or John via's book and you look at",
    "start": "358560",
    "end": "365560"
  },
  {
    "text": "insecure code samples you compile them disassemble them and you start to actually figure out how to exploit them so we did that on arm and so we started",
    "start": "365560",
    "end": "372919"
  },
  {
    "text": "developing these techniques and actually writing Shell Code and trying to make make our exploits work and we ran into a",
    "start": "372919",
    "end": "378919"
  },
  {
    "text": "lot of problems with qmu along the way and we wanted a real Hardware platform to run and we'll go into a little bit",
    "start": "378919",
    "end": "384400"
  },
  {
    "text": "maybe later about why it's better to have the the bare metal aside from just bling Factor",
    "start": "384400",
    "end": "391160"
  },
  {
    "text": "um so we looked around for a hardware platform and um we didn't really find",
    "start": "391160",
    "end": "397720"
  },
  {
    "text": "anything that was great like phones are pretty annoying to use and interface with it's it's difficult to build your tool chain for you know kind of like",
    "start": "397720",
    "end": "405039"
  },
  {
    "text": "Android and kind of weird Linux based operating systems and stuff we found a few kind of open Hardware platforms just",
    "start": "405039",
    "end": "411960"
  },
  {
    "text": "like Raspberry Pi which is really popular now uh the Beagle board the arm mini there's just a whole bunch of these",
    "start": "411960",
    "end": "417759"
  },
  {
    "text": "different arm Arm based boards s and the one we landed on was the",
    "start": "417759",
    "end": "423080"
  },
  {
    "text": "gumstick it was a really open it was a really mature developer Community around it so we uh we went with that there were",
    "start": "423080",
    "end": "428879"
  },
  {
    "text": "kernel modules people were constantly making patches and stuff so we went with the gum sticks and the gum sticks are",
    "start": "428879",
    "end": "434479"
  },
  {
    "text": "pretty cool because they they're just like little tiny really low power PCS",
    "start": "434479",
    "end": "439759"
  },
  {
    "text": "that have an arm chip and they're also like standard Linux builds and stuff that you can get for them and you can",
    "start": "439759",
    "end": "445280"
  },
  {
    "text": "just download isos and DDM to little micro SD card and you're up and running",
    "start": "445280",
    "end": "450400"
  },
  {
    "text": "so this is the this is the board we ended up getting um it's the Toby development board uh we got the gumstick",
    "start": "450400",
    "end": "456960"
  },
  {
    "text": "swatter computer on module or com um and it slots into the the",
    "start": "456960",
    "end": "463000"
  },
  {
    "text": "toby and then we started buying a lot of these things cuz obviously we wanted to use them ourselves and uh when we",
    "start": "463000",
    "end": "469280"
  },
  {
    "text": "eventually taught the class we wanted everyone to be able to use one so then all of these uh these sample",
    "start": "469280",
    "end": "477120"
  },
  {
    "text": "little bits of code that we wrote while we were learning about exploitation ourselves we realized we could just turn into lab exercises for a course and so",
    "start": "477120",
    "end": "484479"
  },
  {
    "text": "we did that so we uh we built out um kind of a a progression of exploitation",
    "start": "484479",
    "end": "489840"
  },
  {
    "text": "so like simple stack overflows all the way up through kind of Heap exploitation and then we did a lot of the protection",
    "start": "489840",
    "end": "496000"
  },
  {
    "text": "mechanisms after that so like xn and aslr and we eventually bypassed all of those so that's a little bit about what",
    "start": "496000",
    "end": "502319"
  },
  {
    "text": "we'll talk about so then word got out about the research we were doing and kind of the class we were putting together and we",
    "start": "502319",
    "end": "508960"
  },
  {
    "text": "had a few offers so we took a few contracts to get some real world experience and uh we wrote some exploits",
    "start": "508960",
    "end": "515640"
  },
  {
    "text": "and um and then things just really start started to develop and we put all this",
    "start": "515640",
    "end": "521640"
  },
  {
    "text": "kind of information in cleansed it a little bit um and built this really really big course the course is",
    "start": "521640",
    "end": "528399"
  },
  {
    "text": "basically three to five days um and we did it a very compressed version here at blackhead a two-day course like an",
    "start": "528399",
    "end": "534839"
  },
  {
    "text": "intensive kind of thing where we just jumped right into stack overflows and uh xn and stuff like that but the natural",
    "start": "534839",
    "end": "542279"
  },
  {
    "text": "progression is about 3 to 5 days it's about 900 slides across 15 to 20 lectures we have like 20 to 25 Hands-On",
    "start": "542279",
    "end": "549560"
  },
  {
    "text": "exploitation things um we have a 100 page lab 100 page lab manual uh with a",
    "start": "549560",
    "end": "555680"
  },
  {
    "text": "bunch of like uh you know arm notes Ida gachas GDB gachas just really",
    "start": "555680",
    "end": "560920"
  },
  {
    "text": "interesting stuff and then we wrote a lot of C code obviously not just the lab exercises but we wrote helper libraries",
    "start": "560920",
    "end": "566240"
  },
  {
    "text": "to help you uh build your rock payloads for instance we we we'll talk about the r stuff later but we went through and",
    "start": "566240",
    "end": "572920"
  },
  {
    "text": "found 35 R gadgets and built a r Library so you can just chain together your uh",
    "start": "572920",
    "end": "578600"
  },
  {
    "text": "what you want and you know you're off to the to the races so what the course teaches is",
    "start": "578600",
    "end": "586079"
  },
  {
    "text": "basically how to reverse engineer arm binaries um how to debug uh arm binaries",
    "start": "586079",
    "end": "591360"
  },
  {
    "text": "elf specifically um how to exploit stack overflows how to do X defeat",
    "start": "591360",
    "end": "596560"
  },
  {
    "text": "xn um we do Heap overflow we do stack pivoting we found some awesome pivoting",
    "start": "596560",
    "end": "602040"
  },
  {
    "text": "gadgets which we're going to talk about a little bit later how to defeat aslr all that kind of",
    "start": "602040",
    "end": "608320"
  },
  {
    "text": "stuff so we first debuted this course publicly at canc West and it sold out",
    "start": "609240",
    "end": "615240"
  },
  {
    "text": "which was really uh which was really amazing so and then after that course we had a lot of people follow uh follow up",
    "start": "615240",
    "end": "621800"
  },
  {
    "text": "with us people took home the hardware and because the really nice thing about these this platform is that because it's",
    "start": "621800",
    "end": "627399"
  },
  {
    "text": "all on one piece of Hardware that you can just plug into your home network and just SSH into your whole tool chain is",
    "start": "627399",
    "end": "633360"
  },
  {
    "text": "right there so on your work machine all you need is a SSH client and then you SSH into your lab environment you got",
    "start": "633360",
    "end": "639200"
  },
  {
    "text": "GDB you're just you pick up right where you left off we added some other features in there like readon file systems so you can't screw yourself up",
    "start": "639200",
    "end": "645720"
  },
  {
    "text": "and um like like a lot of little interesting things so um people were really excited about that we got a lot",
    "start": "645720",
    "end": "651240"
  },
  {
    "text": "of positive feedback and then we said well maybe we'll try this thing at black hat and then we offered it at black hat",
    "start": "651240",
    "end": "656279"
  },
  {
    "text": "and it sold out so it's like uh it's was really surprising and it's been it's been really nice uh this is a lab setup",
    "start": "656279",
    "end": "663160"
  },
  {
    "text": "at KC West um and we gave all these machines away to the students so they could take",
    "start": "663160",
    "end": "668519"
  },
  {
    "text": "it home and do this stuff but one interesting thing about the popularity of this course is that it really shows",
    "start": "668519",
    "end": "674320"
  },
  {
    "text": "us that there's a desire not only to learn this stuff but that we're also transitioning this is kind of me on my",
    "start": "674320",
    "end": "680200"
  },
  {
    "text": "infos SEC Podium right now if I can for just a second we're kind of transitioning into the post PC",
    "start": "680200",
    "end": "685240"
  },
  {
    "text": "exploitation environment um you know it's interesting phones are more interesting like if you want",
    "start": "685240",
    "end": "691120"
  },
  {
    "text": "to get information or as a Target in general like it's always with you it's always on it's Internet connected it's",
    "start": "691120",
    "end": "697120"
  },
  {
    "text": "got a modem inside of it it's got a GPS unit I mean there's it's more",
    "start": "697120",
    "end": "702440"
  },
  {
    "text": "interesting than the machine that you leave on your desk for eight hours a day",
    "start": "702440",
    "end": "708160"
  },
  {
    "text": "so so um it shows that we're definitely moving into a new world and we were kind of really happy to to see that kind of",
    "start": "708160",
    "end": "714200"
  },
  {
    "text": "response and it's nice for us to be positioned to to share this information with the community and and so now into",
    "start": "714200",
    "end": "720560"
  },
  {
    "text": "the actual information so we'll we'll share a little bit of the interesting stuff that we developed for the course",
    "start": "720560",
    "end": "726839"
  },
  {
    "text": "um H specifically um we'll talk first about r on arm um just kind of in",
    "start": "726839",
    "end": "732519"
  },
  {
    "text": "generic terms and how we defeated in our lab environment uh or how we defeated xn",
    "start": "732519",
    "end": "738040"
  },
  {
    "text": "using Ro in our lab environment and how you could kind of use the same techniques to defeat code signing or",
    "start": "738040",
    "end": "743320"
  },
  {
    "text": "whatever um and then we'll have George come up and talk about his experience with Rob specifically on Android for a a",
    "start": "743320",
    "end": "749880"
  },
  {
    "text": "specific bug that'll get demoed later on today so do you want to you want to do this we",
    "start": "749880",
    "end": "758040"
  },
  {
    "text": "can just tag team it okay all so uh why would you uh give a crap about R I think",
    "start": "758040",
    "end": "765040"
  },
  {
    "text": "since 2008 everyone pretty much Knows Why R is important prior to 2008 I think",
    "start": "765040",
    "end": "771560"
  },
  {
    "text": "no one really new so uh but we we'll go over it briefly the reasons are you know",
    "start": "771560",
    "end": "778360"
  },
  {
    "text": "xn X never so you can't execute code off the stacker Heap anymore say he so how do you get around that how do you build",
    "start": "778360",
    "end": "785399"
  },
  {
    "text": "a payload that can still exploit someone when you cannot actually exploit Shell Code and the answer is the answer is Rob",
    "start": "785399",
    "end": "791519"
  },
  {
    "text": "code signing if you have some annoying platform that just insists on",
    "start": "791519",
    "end": "797560"
  },
  {
    "text": "dictatorial control over all code on the system then you have to somehow bypass",
    "start": "797560",
    "end": "802680"
  },
  {
    "text": "that so the general idea behind R is um",
    "start": "802680",
    "end": "808000"
  },
  {
    "text": "you're going to bounce out of a lot of Bounce points all over existing text regions from a legitimate computer",
    "start": "808000",
    "end": "815360"
  },
  {
    "text": "program and what you want to bounce out of is little Snippets of code and the terminology that people use nowadays I",
    "start": "815360",
    "end": "822320"
  },
  {
    "text": "used to just call this rep Topsy but now you know we have special terms for everything so he's still salty you find",
    "start": "822320",
    "end": "830120"
  },
  {
    "text": "you find you find code sequences that end in an indirect Branch ideally they",
    "start": "830120",
    "end": "835800"
  },
  {
    "text": "reference parameters and data off the stack and ideally the indirect branch is",
    "start": "835800",
    "end": "841759"
  },
  {
    "text": "loaded from the stack you'd like everything to be as stack based as possible so that you can just crap your",
    "start": "841759",
    "end": "847720"
  },
  {
    "text": "stuff onto the stack and then just start wopping away just you know blah blah blah return",
    "start": "847720",
    "end": "853240"
  },
  {
    "text": "blah blah blah return blah blah blah return and each Gadget basically uh I",
    "start": "853240",
    "end": "858320"
  },
  {
    "text": "mean basically it's it has to do something useful what does useful mean well it",
    "start": "858320",
    "end": "864720"
  },
  {
    "text": "means useful to you the exploit developer and it has to have an indirect branch and usually it has to be say like",
    "start": "864720",
    "end": "871120"
  },
  {
    "text": "at most 7 to 10 instructions before it does the indirect Branch because if you're going to execute a gadget that",
    "start": "871120",
    "end": "878440"
  },
  {
    "text": "executes 2,000 instructions the odds that you or a",
    "start": "878440",
    "end": "884079"
  },
  {
    "text": "magical artificially intelligent solver will be able to keep track of all the constraints on that code and make sure",
    "start": "884079",
    "end": "890800"
  },
  {
    "text": "that it doesn't explode before it actually does indirect branch is virtually nil so usually you just stick",
    "start": "890800",
    "end": "897279"
  },
  {
    "text": "to 3 to five instru instructions ending ending in an indirect branch that that's a gadget and the gadget is just a",
    "start": "897279",
    "end": "904320"
  },
  {
    "text": "pointer to somewhere in like libc or Colonel 32 or what whatever and you just put a bunch of gadgets on the stack one",
    "start": "904320",
    "end": "910639"
  },
  {
    "text": "after the other their addresses so just to make it relevant to those who aren't like kind of the uninitiated basically",
    "start": "910639",
    "end": "917440"
  },
  {
    "text": "the synonym we're using for R uh I think Dino came up with it because someone's",
    "start": "917440",
    "end": "922680"
  },
  {
    "text": "girlfriend over some beers said something uh when he was explaining Rob to her he said she said oh it's kind of",
    "start": "922680",
    "end": "928360"
  },
  {
    "text": "like a ransom note remember back in the day like the Murder She Wrote days like people would snip bits of magazine to to",
    "start": "928360",
    "end": "934880"
  },
  {
    "text": "make sentences so that they couldn't do handwriting recognition and find out who the bad guy was that's kind of what",
    "start": "934880",
    "end": "940319"
  },
  {
    "text": "we're doing is that we're using bits of code that already exist in the process space pointers like Stephen said to existing code to piece together an",
    "start": "940319",
    "end": "947759"
  },
  {
    "text": "execution path that does what we want but it's not code that we wrote It's code that we're using natively in the process so that's that's a gadget a",
    "start": "947759",
    "end": "954720"
  },
  {
    "text": "gadget is a little snippet basically right so so one of the things",
    "start": "954720",
    "end": "960279"
  },
  {
    "text": "that you'll IM immediately uh learn when you're trying to do arm exploitation is that even if you want to do like regular",
    "start": "960279",
    "end": "968240"
  },
  {
    "text": "old return to Lipsy right I just want to return to system and pass him the string bsh so that he'll just execute menus H",
    "start": "968240",
    "end": "975759"
  },
  {
    "text": "right you actually just can't even do that on arm without doing R because",
    "start": "975759",
    "end": "981680"
  },
  {
    "text": "unlike on x86 where all the parameters are on the stack you have return address and then parameters on the stack and",
    "start": "981680",
    "end": "988360"
  },
  {
    "text": "then another return address and parameters on the stack on arm you need to load the parameters into registers so",
    "start": "988360",
    "end": "994519"
  },
  {
    "text": "it it is a necessity that you have gadgets that will load your parameters into registers and then bounce to",
    "start": "994519",
    "end": "1000519"
  },
  {
    "text": "another Gadget which loads another parameter into a different register and then bounces to a gadget that will bounce to the function that you want to call so even if you want to do a really",
    "start": "1000519",
    "end": "1008360"
  },
  {
    "text": "simple return to Lipsy that would be like three dwords on a stack in x86 in",
    "start": "1008360",
    "end": "1013480"
  },
  {
    "text": "arm it would it could easily be depending on what gadgets you have available like 12 DS on the stack the",
    "start": "1013480",
    "end": "1021560"
  },
  {
    "text": "reason for that is basically calling convention on arm is to pass everything and register it's kind of like Fast call on x86 so that's why you have to pass",
    "start": "1021560",
    "end": "1029038"
  },
  {
    "text": "parameters and registers because there's basically no other way to do it on arm yeah so in our class though I mean",
    "start": "1029039",
    "end": "1034880"
  },
  {
    "text": "occasionally you get lucky with with gadgets like here's an example liy plus 98 uh 918 DC you'll find this gadget I",
    "start": "1034880",
    "end": "1041798"
  },
  {
    "text": "think in just about every gy implementation it's from the G something",
    "start": "1041799",
    "end": "1046839"
  },
  {
    "text": "something Mount function and it's it's a function that's used um to assist in uh",
    "start": "1046839",
    "end": "1051919"
  },
  {
    "text": "G GPR if I remember correctly the profiling stuff and what it does is it hooks functions and then calls a",
    "start": "1051919",
    "end": "1058120"
  },
  {
    "text": "profiling function and then calls back to the original function so in order to do that it has to save the original uh",
    "start": "1058120",
    "end": "1065360"
  },
  {
    "text": "volatile registers that were passed to the original function on the stack somewhere and then when the profiling",
    "start": "1065360",
    "end": "1070880"
  },
  {
    "text": "function is done pop them off the stack and return so this is an example of a",
    "start": "1070880",
    "end": "1076720"
  },
  {
    "text": "gadget that helps you do return to Lipsy really easily it's going to pop four parameters off the stack on arm",
    "start": "1076720",
    "end": "1084120"
  },
  {
    "text": "those are the first four parameters of any function which is usually suffices for just about any regular old C",
    "start": "1084120",
    "end": "1090200"
  },
  {
    "text": "function it's going to Branch a function address into R12 it's going to pop LR off LR is the arm equivalent of the",
    "start": "1090200",
    "end": "1096760"
  },
  {
    "text": "saved return address it's on arm it goes in a register it doesn't automatically go on the stack and then it'll Branch to",
    "start": "1096760",
    "end": "1103320"
  },
  {
    "text": "that function so for example this gadget plus parameters the function you want to",
    "start": "1103320",
    "end": "1108480"
  },
  {
    "text": "call and then the next function suffices to do simple return to Lipsy on",
    "start": "1108480",
    "end": "1115400"
  },
  {
    "text": "arm if you're exploiting an arm platform that uses  so to back up a little bit",
    "start": "1115400",
    "end": "1121080"
  },
  {
    "text": "basically what we're attempting to do is just demonstrate to you um at a high",
    "start": "1121080",
    "end": "1126840"
  },
  {
    "text": "level our high our technique um is to basically defeat Ina by calling a",
    "start": "1126840",
    "end": "1133840"
  },
  {
    "text": "function called impr protect and impr protect is basically going to like um like virtual protect on Windows change",
    "start": "1133840",
    "end": "1140400"
  },
  {
    "text": "the page permissions so uh we want to make sure that the region of memory we're trying to execute out of is",
    "start": "1140400",
    "end": "1146039"
  },
  {
    "text": "actually executable so our attempt is to use this R chain to try to change the",
    "start": "1146039",
    "end": "1152039"
  },
  {
    "text": "permissions of memory so we're going to try to call impr Protect and we're going to demonstrate how difficult just",
    "start": "1152039",
    "end": "1157159"
  },
  {
    "text": "calling impr protect is using arm and how we kind of got around it so",
    "start": "1157159",
    "end": "1162240"
  },
  {
    "text": "well well actually in this example just calling M protect is easy for example this R chain yeah yeah yeah we'll get to",
    "start": "1162240",
    "end": "1169440"
  },
  {
    "text": "that um would pop this raping would call M protect on a stack address and then",
    "start": "1169440",
    "end": "1175960"
  },
  {
    "text": "jump into it so if you're exploiting like a regular old Linux router um with",
    "start": "1175960",
    "end": "1182320"
  },
  {
    "text": "no aslr you could just change the page permissions on the stack make it executable and then bounce into it and",
    "start": "1182320",
    "end": "1190240"
  },
  {
    "text": "and the way it would work is first he would pop off 408",
    "start": "1190240",
    "end": "1195360"
  },
  {
    "text": "b8c that would go to this little Gadget that then pops that stack address bdff",
    "start": "1195360",
    "end": "1200520"
  },
  {
    "text": "Doo into r0o that's the first parameter to M protect 2,000 that's two pages",
    "start": "1200520",
    "end": "1206240"
  },
  {
    "text": "second parameter M protect seven that's the awesomest page permissions in the world that would be the third parameter",
    "start": "1206240",
    "end": "1213039"
  },
  {
    "text": "to M protect R3 we don't care what that is so it's crap dead beef then the address of n protect and then we say put",
    "start": "1213039",
    "end": "1221000"
  },
  {
    "text": "into LR BD fd100 we we're going to pretend that's where our knop sled is on the on the stack so that would call M",
    "start": "1221000",
    "end": "1228919"
  },
  {
    "text": "protect and load LR with the address of the stack so that when M protect is done doing its thing it will return to",
    "start": "1228919",
    "end": "1237159"
  },
  {
    "text": "the stack and then we can just dump Shell Code there but we're going to show how much more complicated this gets when",
    "start": "1237159",
    "end": "1243640"
  },
  {
    "text": "you want to do what is a seemingly trivial thing let's say we wanted to",
    "start": "1243640",
    "end": "1248679"
  },
  {
    "text": "call let's say we don't exactly know where our shell code is in memory okay",
    "start": "1248679",
    "end": "1254880"
  },
  {
    "text": "and so we want to use map to all at readable writable executable",
    "start": "1254880",
    "end": "1261559"
  },
  {
    "text": "memory and we know just pretend that where we've where the exploit occurs we",
    "start": "1261559",
    "end": "1267880"
  },
  {
    "text": "know R six points to our Shell Code in the Heap somewhere we don't know exactly where it is we just know R six points in",
    "start": "1267880",
    "end": "1274440"
  },
  {
    "text": "into the Heap so we want to copy whatever is from R six into the uh",
    "start": "1274440",
    "end": "1280120"
  },
  {
    "text": "buffer returned by map and then we want to jump into the buffer so if you wanted to do this in like C or like pseudo C",
    "start": "1280120",
    "end": "1287880"
  },
  {
    "text": "you know it be like three lines of code you know buff equals m map M Copy buff",
    "start": "1287880",
    "end": "1293440"
  },
  {
    "text": "comma R6 if R6 was accessible directly through C but it's not you know and then",
    "start": "1293440",
    "end": "1299440"
  },
  {
    "text": "a function cast on Buff to just jump into it it would be super simple so it should be easy and R",
    "start": "1299440",
    "end": "1304720"
  },
  {
    "text": "right oh so first map takes six arguments not just not just three or",
    "start": "1304720",
    "end": "1311279"
  },
  {
    "text": "four so we can't just load a bunch of stuff into r0 to",
    "start": "1311279",
    "end": "1316120"
  },
  {
    "text": "R3 that's actually pretty easy to get around because um we could use for",
    "start": "1316919",
    "end": "1322760"
  },
  {
    "text": "example that Gadget we just showed you that loads the registers off the uh stack r0 to R3 and subsequent arguments",
    "start": "1322760",
    "end": "1330039"
  },
  {
    "text": "just go after that on the stack and so you just um so we can just put that",
    "start": "1330039",
    "end": "1338200"
  },
  {
    "text": "Gadget there the gadget r0 R1 R2 R3 a pointer to M protect LR would have",
    "start": "1338200",
    "end": "1345080"
  },
  {
    "text": "to be another Gadget that would pop two more things off the stack and then do",
    "start": "1345080",
    "end": "1350200"
  },
  {
    "text": "pop PC and then put argument five and six right after",
    "start": "1350200",
    "end": "1355360"
  },
  {
    "text": "that that that's not insurmountable so step two to call M Copy to copy our",
    "start": "1355360",
    "end": "1361559"
  },
  {
    "text": "Shell Code over but wait how do we move with r r six into R1 because we have to",
    "start": "1361559",
    "end": "1369799"
  },
  {
    "text": "take R six the the register we know our shell code is in and move it into R1 so",
    "start": "1369799",
    "end": "1375159"
  },
  {
    "text": "that it's the source argument of M Copy and while we're doing this we have to",
    "start": "1375159",
    "end": "1382159"
  },
  {
    "text": "make sure that r0 which was the return address from map doesn't get trashed because if we lose R zero we don't know",
    "start": "1382159",
    "end": "1391600"
  },
  {
    "text": "where our executable buffer is anymore so how do you do that so if you had some",
    "start": "1391600",
    "end": "1397520"
  },
  {
    "text": "semantic solver like a lot of people have that are scientists like real computer scientists then you could",
    "start": "1397520",
    "end": "1403120"
  },
  {
    "text": "probably write something that would actually solve for this and actually find the gadgets you need but we actually had to do it manually so uh",
    "start": "1403120",
    "end": "1408919"
  },
  {
    "text": "these are the gadgets we found so I I searched through lipy for a",
    "start": "1408919",
    "end": "1414720"
  },
  {
    "text": "while and I found a few gadgets so here's one the one at the top lamia R3",
    "start": "1414720",
    "end": "1420000"
  },
  {
    "text": "r0 R1 R2 R3 so that loads from the pointer at R3 four dwords into the",
    "start": "1420000",
    "end": "1426080"
  },
  {
    "text": "registers r0 to R3 he then writes those right back out to R4 he branches after",
    "start": "1426080",
    "end": "1431720"
  },
  {
    "text": "he branches he trashes r0 with R5 that's a shame pops two registers off the stack and branches to LR the second one is is",
    "start": "1431720",
    "end": "1438720"
  },
  {
    "text": "just like um two bytes later it's the same thing he just writes to R4 so we",
    "start": "1438720",
    "end": "1444320"
  },
  {
    "text": "could think of the first Gadget as being read from memory and the second Gadget is being right to memory the first",
    "start": "1444320",
    "end": "1450480"
  },
  {
    "text": "Gadget the the caveat being there that the address you read from has to well that that you also need to have a dummy",
    "start": "1450480",
    "end": "1456400"
  },
  {
    "text": "memory location in R4 to write to right and then we find a few other",
    "start": "1456400",
    "end": "1462080"
  },
  {
    "text": "gadgets okay uh one of them moves R six into r0 one of them loads a value into LR off",
    "start": "1462080",
    "end": "1469880"
  },
  {
    "text": "the stack and jumps into it one of them just loads a value into R4 one of them loads a value into R3 one of them is a",
    "start": "1469880",
    "end": "1476880"
  },
  {
    "text": "ROP knop that pop PC that's like a knop in R it does nothing it just moves on to",
    "start": "1476880",
    "end": "1482399"
  },
  {
    "text": "the next instruction or the next R instruction and the last one moves r0 into R3 and branches to LR so obviously",
    "start": "1482399",
    "end": "1489200"
  },
  {
    "text": "we're done at this point we're done owned so you can do this like for",
    "start": "1489200",
    "end": "1495240"
  },
  {
    "text": "example if you want to move R six into R1 it's only takes about 14 easy",
    "start": "1495240",
    "end": "1501000"
  },
  {
    "text": "steps and I'm not going to belabor all of these steps right here I just want to",
    "start": "1501000",
    "end": "1506840"
  },
  {
    "text": "say that the point with r is at least in my experience you're trying to find gadgets and you end up with a bunch of",
    "start": "1506840",
    "end": "1515880"
  },
  {
    "text": "can can you use four-letter words here yeah you end up with a bunch of shitty gadgets that suck and none of them do",
    "start": "1515880",
    "end": "1521520"
  },
  {
    "text": "what you want them to do and they always do something annoying like that first Gadget there he trashes R zero thank you",
    "start": "1521520",
    "end": "1528520"
  },
  {
    "text": "very much why why did you do that and you have to work around it and because",
    "start": "1528520",
    "end": "1533919"
  },
  {
    "text": "you have to work around it with the gadgets that you have available to you you end up with a 14-step process to do",
    "start": "1533919",
    "end": "1541080"
  },
  {
    "text": "something incredibly trivial that would literally take one regular assembly",
    "start": "1541080",
    "end": "1547880"
  },
  {
    "text": "instruction so we we just screw around with this and blah blah blah blah blah we just sitting in a python script like",
    "start": "1547880",
    "end": "1554120"
  },
  {
    "text": "manually pasting heximal values into a big buffer that we're going to send to our own process and you end up with that",
    "start": "1554120",
    "end": "1559919"
  },
  {
    "text": "that does it pop on your registers you call map you clean up the stack you load LR with",
    "start": "1559919",
    "end": "1566679"
  },
  {
    "text": "a pop PC blah blah blah blah blah blah blah and eventually you get down to your me copy and you can BR and then you can",
    "start": "1566679",
    "end": "1571720"
  },
  {
    "text": "Branch into R zero and you are an elite",
    "start": "1571720",
    "end": "1579039"
  },
  {
    "text": "hacker so uh we found most of those gadgets manually and then stitch them",
    "start": "1581279",
    "end": "1586399"
  },
  {
    "text": "together to do just that example and it was a lot of painstaking work so we originally did it manually like opened a",
    "start": "1586399",
    "end": "1593279"
  },
  {
    "text": "hex editor and just like wrote hex decimal values in and pasted it onto the stack and see if the chain would go and",
    "start": "1593279",
    "end": "1599399"
  },
  {
    "text": "just did it over and over and over and over again but that's hard and it's painstaking so we for the purposes of",
    "start": "1599399",
    "end": "1605240"
  },
  {
    "text": "the course wrote a library that uh bundles a lot of those individual gadgets together that you can uh use",
    "start": "1605240",
    "end": "1611960"
  },
  {
    "text": "like kind of highle classes to to chain these gadgets together so just you use",
    "start": "1611960",
    "end": "1617240"
  },
  {
    "text": "like a generic class instantiation and then you can just kind of with uh these kind of Reserve words that we gave uh",
    "start": "1617240",
    "end": "1623679"
  },
  {
    "text": "like load and Branch to LR and then it'll it'll build your your payload for you with some simple arguments so uh",
    "start": "1623679",
    "end": "1630640"
  },
  {
    "text": "that's what the students in the class actually use to build their raw payload so they didn't have to do it manually like we did when we first first started",
    "start": "1630640",
    "end": "1637039"
  },
  {
    "text": "out so here's you want to talk this so there are two uh there there a couple",
    "start": "1637039",
    "end": "1642440"
  },
  {
    "text": "different things we're going to talk about and this is some of the interesting stuff that we found along the way uh one of them is um finding",
    "start": "1642440",
    "end": "1649320"
  },
  {
    "text": "gadgets so we found that there's some really unique things about arms specifically that make exploitation easier because of the gadgets you can",
    "start": "1649320",
    "end": "1655320"
  },
  {
    "text": "find right and and we refer to I guess the technique we use as misaligned",
    "start": "1655320",
    "end": "1661440"
  },
  {
    "text": "instructions and that is a misnomer that's why it's in quotes because there is no such thing as misaligned",
    "start": "1661440",
    "end": "1667120"
  },
  {
    "text": "instructions on arm all arm instructions are aligned on word halfword boundaries",
    "start": "1667120",
    "end": "1673519"
  },
  {
    "text": "to use Arm par Lance 16 bits if you're in thumb or thumb two mode and 32 bits",
    "start": "1673519",
    "end": "1679320"
  },
  {
    "text": "if you're in arm mode so I remember reading a paper about someone talking about r on arm I don't know where it was just from some University and they were",
    "start": "1679320",
    "end": "1686640"
  },
  {
    "text": "like well probably finding pivots and and stuff on arm is a lot harder because unlike on x86 where there is no",
    "start": "1686640",
    "end": "1693039"
  },
  {
    "text": "alignment you can't have you can't have misaligned instructions and I thought that's that's exact",
    "start": "1693039",
    "end": "1700399"
  },
  {
    "text": "exactly so because it's an example right like like pop r0 PC that's a pretty cool",
    "start": "1700399",
    "end": "1705919"
  },
  {
    "text": "Gadget because it lets us load a value into r Z very easily but if you think for about 5 Seconds how often would a",
    "start": "1705919",
    "end": "1712679"
  },
  {
    "text": "compiler emit pop r0 PC in compiled code never never never because why would you",
    "start": "1712679",
    "end": "1719960"
  },
  {
    "text": "need to save a volatile register across function calls you wouldn't so he would",
    "start": "1719960",
    "end": "1725360"
  },
  {
    "text": "never want to restore the save value of R zero maybe if it maybe if it was a",
    "start": "1725360",
    "end": "1730799"
  },
  {
    "text": "return value but if it was a return value he'd probably move it'd be a move from some other register into R zero he",
    "start": "1730799",
    "end": "1736799"
  },
  {
    "text": "wouldn't just be popping It Off um so how can you get gadgets like that before before we talk about that we're",
    "start": "1736799",
    "end": "1742399"
  },
  {
    "text": "going to just mention he mentioned thumb arm and uh yeah we go over this just a moment so so they're different so the",
    "start": "1742399",
    "end": "1748120"
  },
  {
    "text": "unique thing about arm is that it can run in different instruction modes unlike x86 I guess just extensions are",
    "start": "1748120",
    "end": "1753919"
  },
  {
    "text": "kind of like different instruction modes but whatever arm has the different instruction modes but what's interesting about is you can switch dynamically to",
    "start": "1753919",
    "end": "1759960"
  },
  {
    "text": "them on the Fly based on what instruction is in the instruction planter so um there are three major",
    "start": "1759960",
    "end": "1766559"
  },
  {
    "text": "modes actually two two major modes in the two we care about four four modes total so there's arm",
    "start": "1766559",
    "end": "1772840"
  },
  {
    "text": "mode which is 32-bit um thumb mode here you do thumb mode oh here I just want to make reference one other thing on the",
    "start": "1772840",
    "end": "1778720"
  },
  {
    "text": "arm mode SL so so we said there's arm mode and thumb mode okay so here's arm mode and how do you get the processor",
    "start": "1778720",
    "end": "1785240"
  },
  {
    "text": "into arm mode how do you convince it to switch to arm mode the answer what's talking about right here",
    "start": "1785240",
    "end": "1791640"
  },
  {
    "text": "the answer is um right down at the bottom there if any of those instructions load PC where the low order",
    "start": "1791640",
    "end": "1798679"
  },
  {
    "text": "bit is clear you're in arm mode now so yeah thumb mode is uh in contrast",
    "start": "1798679",
    "end": "1805519"
  },
  {
    "text": "to arm mode which is 32-bit thumb mode is 16bit mode uh fixed with and then there's thumb two which is kind of like",
    "start": "1805519",
    "end": "1812080"
  },
  {
    "text": "a a spin-off of that which was was later it allows for you to access 32-bit instructions from 16bit mode which is uh",
    "start": "1812080",
    "end": "1819080"
  },
  {
    "text": "something that we actually found useful but they are still 16bit aligned yeah so that's actually very useful so then",
    "start": "1819080",
    "end": "1825760"
  },
  {
    "text": "there's another another Mode called thumb e which is like some stupid thing with those old feature phones like we",
    "start": "1825760",
    "end": "1831200"
  },
  {
    "text": "would play like Java Games but uh oh no that's something different anyway Telly",
    "start": "1831200",
    "end": "1837240"
  },
  {
    "text": "and oh that's supposed to say Gizelle there's one other Mode called Gizelle mode where arm chips can actually",
    "start": "1837240",
    "end": "1843640"
  },
  {
    "text": "natively execute Java bite code um that is probably a whole interesting realm of",
    "start": "1843640",
    "end": "1849240"
  },
  {
    "text": "research for someone else to do because that would be hard so uh so here's here's where we talk",
    "start": "1849240",
    "end": "1857360"
  },
  {
    "text": "about this concept of misaligned instructions right this is pretty cool we we like this this is really so do you",
    "start": "1857360",
    "end": "1863159"
  },
  {
    "text": "see a pop a pop r0 R2 PC in here no yeah",
    "start": "1863159",
    "end": "1869000"
  },
  {
    "text": "but scroll over yeah so if we undefine that instruction go back notice that I I",
    "start": "1869000",
    "end": "1876679"
  },
  {
    "text": "don't know if you can see it super that B.W lock 35 f1a that's a thumb 2",
    "start": "1876679",
    "end": "1883600"
  },
  {
    "text": "instruction so it's a 32-bit wide it's a branch to That Fun a branch to that so",
    "start": "1883600",
    "end": "1888679"
  },
  {
    "text": "he's just branching somewhere if you undefine it you can see it's a 4 by instruction but what if we branched to",
    "start": "1888679",
    "end": "1897880"
  },
  {
    "text": "305 e excuse me 3050f because we would want the",
    "start": "1898519",
    "end": "1905279"
  },
  {
    "text": "processor to be in thumb mode when he got there we'd say Branch to 3050f raise it by raising though the",
    "start": "1905279",
    "end": "1912919"
  },
  {
    "text": "processor would go sweet the low bit set I will Branch to 3050 e right and switch",
    "start": "1912919",
    "end": "1919679"
  },
  {
    "text": "myself into thumb mode right and what do you get you get pop r0 R2 PC yep so",
    "start": "1919679",
    "end": "1926120"
  },
  {
    "text": "that's how you get cool gadgets on arm yep Flex oh what's",
    "start": "1926120",
    "end": "1934760"
  },
  {
    "text": "up so cool so then we do this and then we do some uh we show the students a lot of other different R tricks um and we'll",
    "start": "1934760",
    "end": "1942480"
  },
  {
    "text": "just talk about a couple of those the first one is when you're writing R and just Shell Code in general it's it's",
    "start": "1942480",
    "end": "1947960"
  },
  {
    "text": "nice to have places to do scratch space especially with rock cuz sometimes the gadget you'll find will like need to",
    "start": "1947960",
    "end": "1953919"
  },
  {
    "text": " stuff out to memory somewhere like uh you'll do an exchange or kind of a um a LM or something whatever and it's",
    "start": "1953919",
    "end": "1960799"
  },
  {
    "text": "going to need to actually write to memory and you need a place that's kind of like safe to just kind of put garbage into and so Steve actually found this",
    "start": "1960799",
    "end": "1967960"
  },
  {
    "text": "technique so I don't know if you can call it a technique I mean basically you find some place that it doesn't matter",
    "start": "1967960",
    "end": "1973120"
  },
  {
    "text": "if you trash memory yeah I was trashing globals and sometimes my would just crash so he did and easiest way to do",
    "start": "1973120",
    "end": "1978679"
  },
  {
    "text": "that is you're like okay if I know that we're talking about Lipsy here but it could be whatever module you've memory",
    "start": "1978679",
    "end": "1983840"
  },
  {
    "text": "leaked or whatever you're like I know his BSS or his data is e528 bytes long",
    "start": "1983840",
    "end": "1989720"
  },
  {
    "text": "but the OS always alloc you know it can't just allocate e528 bytes worth of stores virtual memory it's always at",
    "start": "1989720",
    "end": "1997480"
  },
  {
    "text": "least a page so you know that you have like however many bytes that is e2000",
    "start": "1997480",
    "end": "2003679"
  },
  {
    "text": "minus E15 that that's you can do whatever you want there no one will touch you don't have to worry about accidentally trashing a global variable",
    "start": "2003679",
    "end": "2010159"
  },
  {
    "text": "or some critical region of the Heap and crashing the process during your R yeah that's a really useful trick so that's",
    "start": "2010159",
    "end": "2016480"
  },
  {
    "text": "one trick we teach uh the next one is uh you just I don't know what this one is",
    "start": "2016480",
    "end": "2023320"
  },
  {
    "text": "yeah so um like here's just an example right if you don't have gadgets um that",
    "start": "2023320",
    "end": "2028960"
  },
  {
    "text": "will say directly move R2 to R1 or R3 into R2 or R1 into R3 how do you work",
    "start": "2028960",
    "end": "2034080"
  },
  {
    "text": "around that right if you just couldn't find a gadget like that at all well if you had have um other gadgets that can read and",
    "start": "2034080",
    "end": "2041440"
  },
  {
    "text": "write from memory you can always write your registers out to your scratch space",
    "start": "2041440",
    "end": "2047159"
  },
  {
    "text": "and then subsequently have another Gadget that will read from that memory location into",
    "start": "2047159",
    "end": "2052280"
  },
  {
    "text": "the register you want so if you need to transition R7 to R2 and you can't find",
    "start": "2052280",
    "end": "2057878"
  },
  {
    "text": "anything that will move R7 to R2 you can always find something that will transition R7 to something something to",
    "start": "2057879",
    "end": "2065480"
  },
  {
    "text": "scratch space scratch space to something else something else to the register you want so even if you think you can't get",
    "start": "2065480",
    "end": "2073320"
  },
  {
    "text": "the gadgets you need if you're creative enough you usually can and and taking advantage of memory reads and wrs is a",
    "start": "2073320",
    "end": "2079520"
  },
  {
    "text": "good way to do that so if you had a solver you could probably just do this automatically but we don't because we",
    "start": "2079520",
    "end": "2085118"
  },
  {
    "text": "ghetto Styles I I I'm down on solvers too I'm not I'm not a big solver yeah I",
    "start": "2085119",
    "end": "2091118"
  },
  {
    "text": "went to the MIT smt convention thing and I just sat there and drooled the whole time I didn't understand a damn word",
    "start": "2091119",
    "end": "2097400"
  },
  {
    "text": "that said there and I I didn't feel bad cuz Charlie Miller was like yeah that shit's stupid anyway",
    "start": "2097400",
    "end": "2104320"
  },
  {
    "text": "so so then there's a third trick we teach um this is just a little asky trick yeah I mean if if you're if you're",
    "start": "2104320",
    "end": "2111440"
  },
  {
    "text": "this is not even a trick like if you really understand computers this isn't a thing but you know if you're like oh how",
    "start": "2111440",
    "end": "2117880"
  },
  {
    "text": "am I going to build an asy string or how am I going to build a sock at structure or how am I going to how am I going to build a a you know whatever a fake",
    "start": "2117880",
    "end": "2125440"
  },
  {
    "text": "certificate in memory well like whatever just treat it as a pointer yeah treat it",
    "start": "2125440",
    "end": "2130560"
  },
  {
    "text": "as pointers and values you find your gadgets that you need to just write dwords to memory and and if you can you",
    "start": "2130560",
    "end": "2137359"
  },
  {
    "text": "can just paste whatever you want in memory and create you know obviously whatever kind of data structure and memory you need to get the job done even",
    "start": "2137359",
    "end": "2144560"
  },
  {
    "text": "if you can't find a Rob Gadget that will do stir copy for you so we use a lot of",
    "start": "2144560",
    "end": "2150480"
  },
  {
    "text": "these techniques and then uh in our course basically by the last day our students are uh building their own R",
    "start": "2150480",
    "end": "2156960"
  },
  {
    "text": "payloads they actually build a full connect back root shell rck payload to",
    "start": "2156960",
    "end": "2162079"
  },
  {
    "text": "defeat a remote Heap overflow and xn aslr on those gum sticks so um these",
    "start": "2162079",
    "end": "2169960"
  },
  {
    "text": "things are real and people are actually learning this stuff um and I'd like to play a new game which is how bored is",
    "start": "2169960",
    "end": "2175119"
  },
  {
    "text": "George right now but you got to get up anyway and talk about r on Android so the a lot of",
    "start": "2175119",
    "end": "2181599"
  },
  {
    "text": "the techniques we talked about we found out even cooler people were really using in the real world not on little gum",
    "start": "2181599",
    "end": "2186640"
  },
  {
    "text": "sticks all right I hope you can hear me well so",
    "start": "2186640",
    "end": "2192040"
  },
  {
    "text": "I um or rather Jonathan Drake Ean Jan Drake and I were doing an exploit for",
    "start": "2192040",
    "end": "2198160"
  },
  {
    "text": "Android 4.0.1 which we're going to demo in uh M talk later today um and yeah I'm",
    "start": "2198160",
    "end": "2204839"
  },
  {
    "text": "going to talk a little bit of the techniques that we used there specifically the Rob so um what did we",
    "start": "2204839",
    "end": "2210480"
  },
  {
    "text": "use yeah uh what we tried to use was we took the shittiest bug uh from webkit",
    "start": "2210480",
    "end": "2216119"
  },
  {
    "text": "that could be out there which is really really hard to exploit and we still try to exploit it right so it is a really",
    "start": "2216119",
    "end": "2222280"
  },
  {
    "text": "really neat exploit because it's such a shitty shitty bug um so let's let's get",
    "start": "2222280",
    "end": "2227800"
  },
  {
    "text": "stra into into it right it's a use after free vulnerability in the web kit render Arena which there's like tons out there",
    "start": "2227800",
    "end": "2234560"
  },
  {
    "text": "some one day some zero day um so if you have a methodology for exploring render Arena Buck your golden because I mean",
    "start": "2234560",
    "end": "2241040"
  },
  {
    "text": "those are really really hard bucks but once you know how understand how to exploit them there's a lot of them so",
    "start": "2241040",
    "end": "2246960"
  },
  {
    "text": "this is really hard to read for me and probably for anybody else too um so we hijack a virtual function",
    "start": "2246960",
    "end": "2253119"
  },
  {
    "text": "pointer um that's just the easiest see exploitation thing you can do it straightforward um and so the very first",
    "start": "2253119",
    "end": "2259760"
  },
  {
    "text": "call side which you can see there um really really sucked a lot because uh data that we control is at deference",
    "start": "2259760",
    "end": "2267280"
  },
  {
    "text": "register r0 plus hex 17c which is pretty hard to Pivot to so uh what do we do",
    "start": "2267280",
    "end": "2276119"
  },
  {
    "text": "well we try to hijack another call site so instead of starting some lead drop chain there we just point this virtual",
    "start": "2276119",
    "end": "2282560"
  },
  {
    "text": "function pointer to a b XLR which is like a return so uh we just ignore that we're being called there we we're not",
    "start": "2282560",
    "end": "2288680"
  },
  {
    "text": "even taking control there okay so we get to another call site and that's kind of",
    "start": "2288680",
    "end": "2293839"
  },
  {
    "text": "like the first trick if it's really hard to Pivot from the call side we don't need to control PC right just return so",
    "start": "2293839",
    "end": "2300319"
  },
  {
    "text": "second call site looks a lot nicer if you can read it if you got like I don't know really good classes um so on the",
    "start": "2300319",
    "end": "2307520"
  },
  {
    "text": "second call side um because the virtual function pointer table gets D referenced into a volatile register which which is",
    "start": "2307520",
    "end": "2314119"
  },
  {
    "text": "R2 here um we actually control the data at R2 +",
    "start": "2314119",
    "end": "2319359"
  },
  {
    "text": "17c and on x86 that might be like a doable mission right so you could add",
    "start": "2319359",
    "end": "2325319"
  },
  {
    "text": "something and then point the stack pointer to do that and we tried really really hard to find a pivot Gadget uh",
    "start": "2325319",
    "end": "2331480"
  },
  {
    "text": "using those misaligned instruction technique I just call it misinterpretation of mode technique",
    "start": "2331480",
    "end": "2337119"
  },
  {
    "text": "there probably some academic name for it too um and we tried really hard uh and we had no real tools we just had crappy",
    "start": "2337119",
    "end": "2343880"
  },
  {
    "text": "Pyon script uh that parses object dump output um which is not really a tool",
    "start": "2343880",
    "end": "2349079"
  },
  {
    "text": "right um and we didn't find a pivot gadget for that so that was really sad we did this awesome return trick and",
    "start": "2349079",
    "end": "2355359"
  },
  {
    "text": "still no good but we found a really really nice Mar pivot Gadget in the Linker so the",
    "start": "2355359",
    "end": "2361680"
  },
  {
    "text": "Linker has to you just got to download the slides and then you can steal all the gadgets if you canot read them now",
    "start": "2361680",
    "end": "2367839"
  },
  {
    "text": "um it has to deal with exception handling exception unwinding and so on and that's why the Linker in Android",
    "start": "2367839",
    "end": "2373319"
  },
  {
    "text": "contains this really nice register which is called restore core registers right",
    "start": "2373319",
    "end": "2378640"
  },
  {
    "text": "and it takes um buffer from R zero adds hex 34 and it pops um later on stack",
    "start": "2378640",
    "end": "2386200"
  },
  {
    "text": "pointer link register and program counter from there that's like ideal that's what we want so um this worked",
    "start": "2386200",
    "end": "2392839"
  },
  {
    "text": "almost great for us because R Zer is the dis pointer in in this case where we have it and uh even though the fully",
    "start": "2392839",
    "end": "2400200"
  },
  {
    "text": "user controlled data was in the v table um it was possible to hijack something in this point as well get some music",
    "start": "2400200",
    "end": "2406680"
  },
  {
    "text": "Control Data in there uh which since we're in the ren Arena was actually CSS values so the exploit has like nice CSS",
    "start": "2406680",
    "end": "2413560"
  },
  {
    "text": "that has some pixel values in decimal that actually map to addresses um because that's yeah how it's going to",
    "start": "2413560",
    "end": "2419720"
  },
  {
    "text": "end up um so we almost control that um except that we our control starts at hex",
    "start": "2419720",
    "end": "2426440"
  },
  {
    "text": "38 and instead of hex 34 so we just like one word Miss Al line but luckily this awesome function",
    "start": "2426440",
    "end": "2433960"
  },
  {
    "text": "restore core registers which takes it the the argument and R zero is also called from other sites and those other",
    "start": "2433960",
    "end": "2440680"
  },
  {
    "text": "sites um load like the location from R5 or R4 and add four to it and you know",
    "start": "2440680",
    "end": "2448680"
  },
  {
    "text": "with the call site magic we did and so on we actually found a call site after returning ones that um has our stuff in",
    "start": "2448680",
    "end": "2455800"
  },
  {
    "text": "R5 then four gets added to R5 that gets moved into R zero and our awesome pivot",
    "start": "2455800",
    "end": "2460839"
  },
  {
    "text": "Gadget is being called so it's kind of a like bigger Gadget thing um normally you don't want to do anything that calls",
    "start": "2460839",
    "end": "2467200"
  },
  {
    "text": "anything and then returns from that but in this specific case the function doesn't really return it just pops the",
    "start": "2467200",
    "end": "2472560"
  },
  {
    "text": "program counter and that's how we take control right so that's that's the awesome thing about the Linker I mean the one thing that why we used as the",
    "start": "2472560",
    "end": "2478599"
  },
  {
    "text": "Linker is they forgot or well they didn't randomize the Linker in 4.0 which is you know we don't need even an info",
    "start": "2478599",
    "end": "2484599"
  },
  {
    "text": "leak uh and the other thing is even if you need infoag on fora 1 it's always really great to use a Linker because",
    "start": "2484599",
    "end": "2490640"
  },
  {
    "text": "it's full of such awesome gadgets right that even compiler generated in there that are meant to be there okay so we",
    "start": "2490640",
    "end": "2498800"
  },
  {
    "text": "have kind of the pivot Gadget um or uh and and now how are we pivoting it's this is like copied from the exploit",
    "start": "2498800",
    "end": "2505480"
  },
  {
    "text": "it's maybe hard to read but it says like bottom margin of this element is this which is a program C and it's the top",
    "start": "2505480",
    "end": "2511400"
  },
  {
    "text": "margin which is going to be the link register and then there's another the right margin is going to be the St pointer that's really funny",
    "start": "2511400",
    "end": "2517920"
  },
  {
    "text": "um so what did we set those values to well so as I've said it's CSS and the",
    "start": "2517920",
    "end": "2523240"
  },
  {
    "text": "thing with CSS and webit is the high nibble will be cleared which is you know how webkit handles CSS stuff it actually",
    "start": "2523240",
    "end": "2529440"
  },
  {
    "text": "handles some Flags in the high nibble there um so we cannot have the high nibble set and the Linker has a high",
    "start": "2529440",
    "end": "2534839"
  },
  {
    "text": "nible set but what is the other thing that does not get randomized in Android yeah it's a base executable itself they",
    "start": "2534839",
    "end": "2539960"
  },
  {
    "text": "don't have position a pen and executables which is great there's a pop PC instruction in there there's a b XLR",
    "start": "2539960",
    "end": "2546079"
  },
  {
    "text": "instruction in there so um we point the PC which well because we're in arm mode",
    "start": "2546079",
    "end": "2551240"
  },
  {
    "text": "right now we point it to a b XLR we point LR to a thumb mode pop PC",
    "start": "2551240",
    "end": "2556800"
  },
  {
    "text": "instruction and then we actually are doing our R so what are we setting the stack pointer to well we need to have an",
    "start": "2556800",
    "end": "2563319"
  },
  {
    "text": "absolute value so what do you do if you you know not really lead with Rob yeah you do some Heap spraying so the robs",
    "start": "2563319",
    "end": "2569400"
  },
  {
    "text": "actually sprayed onto the Heap with Rob knob slabs Rob slabs I don't know how those are called but there's like a lot",
    "start": "2569400",
    "end": "2575480"
  },
  {
    "text": "of Pop PC words on the swag followed by our actual Rob chain and um yeah we can",
    "start": "2575480",
    "end": "2581920"
  },
  {
    "text": "actually now use Rob Gadget that end either in poyc or B XLR because B XLR or",
    "start": "2581920",
    "end": "2587640"
  },
  {
    "text": "LR actually points to pop PC So eventually everything that you execute as a gadget ends in pop PC and uh that's",
    "start": "2587640",
    "end": "2594599"
  },
  {
    "text": "really useful for Rob right because can you explain real quick arm on arm you can pop into PC I we forgot to say oh",
    "start": "2594599",
    "end": "2600760"
  },
  {
    "text": "right okay yeah so on arm you can pop into PC which is basically like return",
    "start": "2600760",
    "end": "2606720"
  },
  {
    "text": "right on on x86 is a return instruction on X8 on armit just pop BC you pop ail",
    "start": "2606720",
    "end": "2611960"
  },
  {
    "text": "into the program counter thing on armit you can pop a lot of registers at the same time okay and so that's our our",
    "start": "2611960",
    "end": "2619280"
  },
  {
    "text": "awesome pivoting right you know with SE sprain stuff um and from there it's just really assembling a standard Ro chain so",
    "start": "2619280",
    "end": "2626760"
  },
  {
    "text": "um ideally you would do something like uh okay I know this is a stack pointer",
    "start": "2626760",
    "end": "2631880"
  },
  {
    "text": "so I'm going to relatively to that get this into a register and it so it's page aligned and then and protected which",
    "start": "2631880",
    "end": "2638160"
  },
  {
    "text": "would be the really nice way uh but we were kind of under time pressure and um so josha came up with this awesome",
    "start": "2638160",
    "end": "2645119"
  },
  {
    "text": "technique that I will call the insanely large shell coat poking R chain so we're",
    "start": "2645119",
    "end": "2650720"
  },
  {
    "text": "poking the entire shell coat four bites at a time was like two rob gadets each which results in I don't know like six",
    "start": "2650720",
    "end": "2657680"
  },
  {
    "text": "double words into into known fixed memory location so there's like this I",
    "start": "2657680",
    "end": "2662760"
  },
  {
    "text": "don't know terabytes of rchain that make sure the shut is at at some point in",
    "start": "2662760",
    "end": "2667839"
  },
  {
    "text": "memory um but that gives us a non address and then we can you know uh and protect this non address and because the",
    "start": "2667839",
    "end": "2673559"
  },
  {
    "text": "Linker is a Linker it of course contains and protect because it needs to protect stuff in memory yeah and then from there",
    "start": "2673559",
    "end": "2679440"
  },
  {
    "text": "it's just jumping to the Shell Code because Android doesn't have minitary code signing like Nest the iOS has but",
    "start": "2679440",
    "end": "2685040"
  },
  {
    "text": "then again on iOS like we're using webkit bux right and what is the awesome only processor on iOS that can execute",
    "start": "2685040",
    "end": "2690800"
  },
  {
    "text": "unsigned code yeah mobile Safari so great it doesn't have M protect but it doesn't have M Copy to the jit region",
    "start": "2690800",
    "end": "2696880"
  },
  {
    "text": "right okay so there's another cool gaset I had to share that we wanted to use because",
    "start": "2696880",
    "end": "2703079"
  },
  {
    "text": "it's really really cool but we did not end up using it um it's it's one of those gadgets that you said like it's",
    "start": "2703079",
    "end": "2708559"
  },
  {
    "text": "impossible to control all the side effects um it's going to be exploding right in your face the the Linker is a",
    "start": "2708559",
    "end": "2714520"
  },
  {
    "text": "Linker right and what does the Linker need to do it links in dynamically stuff into memory so there's this huge",
    "start": "2714520",
    "end": "2720720"
  },
  {
    "text": "function that is called uh DL link image which you know handles an elf program",
    "start": "2720720",
    "end": "2727079"
  },
  {
    "text": "section header um and if you jump into it it's going to be expecting like the uh elf header to be in R4 and there's an",
    "start": "2727079",
    "end": "2735480"
  },
  {
    "text": "like it's a huge function and it calls M protect on the stuff and there's even a free Branch at the end of it so um it",
    "start": "2735480",
    "end": "2742000"
  },
  {
    "text": "would be really funny like you could have an elf header instead of a shell code and like a elf program section and",
    "start": "2742000",
    "end": "2748520"
  },
  {
    "text": "the Linker takes care of linking that in for you that would have been really funny but we didn't not end up using",
    "start": "2748520",
    "end": "2754880"
  },
  {
    "text": "that so um I'm going to be talking about a little bit about the uh Heap massaging",
    "start": "2754880",
    "end": "2760760"
  },
  {
    "text": "uh somebody's doing like a talk massaging the Heap into submission that's really awesome title so um with",
    "start": "2760760",
    "end": "2767119"
  },
  {
    "text": "with the whole Ren tree thing it's uh really really Uh custom weird allocator",
    "start": "2767119",
    "end": "2773440"
  },
  {
    "text": "and you know those guys are going to say a little bit more about Advanced Heap stuff um we're just looking at use of",
    "start": "2773440",
    "end": "2779280"
  },
  {
    "text": "free which normally is is easy to exploit so what's what's the ratry right the ratry is basically um so you have",
    "start": "2779280",
    "end": "2786680"
  },
  {
    "text": "the document object model tree which is everything everybody everybody knows it from JavaScript right and the render",
    "start": "2786680",
    "end": "2792359"
  },
  {
    "text": "tree is what webkit creates from the doc document object model for rendering so",
    "start": "2792359",
    "end": "2798240"
  },
  {
    "text": "they're not one to one the same but like if you have like a paragraph that is split in two text Fields whatever then",
    "start": "2798240",
    "end": "2804920"
  },
  {
    "text": "it will be two notes and the render Tre and so on so it's it's what uh webkit uses for rendering um the thing with",
    "start": "2804920",
    "end": "2811520"
  },
  {
    "text": "with rendering is um it's composed of this so no pardon the different slide design",
    "start": "2811520",
    "end": "2817680"
  },
  {
    "text": "um the thing um so actually these slides are from a presentation I gave in Paris earlier this year um you should check it",
    "start": "2817680",
    "end": "2823440"
  },
  {
    "text": "out if you want to know more about the web K he um so the render tree is",
    "start": "2823440",
    "end": "2828599"
  },
  {
    "text": "updated a lot like if you scroll if you resize the window it always needs to create a new render tree even if the",
    "start": "2828599",
    "end": "2833800"
  },
  {
    "text": "document object model tree uh model thing tree is staying the same um so it",
    "start": "2833800",
    "end": "2838920"
  },
  {
    "text": "happens a lot and um because that means that these no industry are allocated and",
    "start": "2838920",
    "end": "2844240"
  },
  {
    "text": "deallocated a lot um that means you need a very fast allocator and you know what",
    "start": "2844240",
    "end": "2849760"
  },
  {
    "text": "what do people do if they need a very fast allocator they add their own allocator right so what did the web",
    "start": "2849760",
    "end": "2855640"
  },
  {
    "text": "developers do yo dog I heard you like allocators so I put an allocator into your allocator so you can allocate while",
    "start": "2855640",
    "end": "2861200"
  },
  {
    "text": "you're allocating so there's this awesome thing that is called the render Arena which is what they use for",
    "start": "2861200",
    "end": "2867200"
  },
  {
    "text": "allocating these render objects and how did they implement it the render arer is really an allocator and an allocator as",
    "start": "2867200",
    "end": "2873440"
  },
  {
    "text": "in it uses Malo to allocate large chunks of memory that it will then split into",
    "start": "2873440",
    "end": "2878839"
  },
  {
    "text": "smaller chunks in its own subi so um it's it's called Arenas and those are",
    "start": "2878839",
    "end": "2884079"
  },
  {
    "text": "allocated with fast mailo which means if you're on like a desktop an i 10 Safari whatever it's going to be TC mailo if",
    "start": "2884079",
    "end": "2890119"
  },
  {
    "text": "you're on Android it's going to be the system allocated the lmic it's there's this rumor that TC mic is being used on",
    "start": "2890119",
    "end": "2896280"
  },
  {
    "text": "Android which is totally not true it's the system allocated the lmic which has big implications on your HEAP massaging",
    "start": "2896280",
    "end": "2902119"
  },
  {
    "text": "into submission right so how does that look in the source code um they overload",
    "start": "2902119",
    "end": "2908119"
  },
  {
    "text": "the render objects operate a new to use this render Arena um and since every",
    "start": "2908119",
    "end": "2913280"
  },
  {
    "text": "render object is and render thing is derived from that object that means everything is going to be using the render arer for all the render objects",
    "start": "2913280",
    "end": "2921000"
  },
  {
    "text": "and that also means we're only going to end up with runer objects on the Heap so if you're saying like oh it's used after",
    "start": "2921000",
    "end": "2926440"
  },
  {
    "text": "fre I'm just going to allocate a string there and put my contents in there it's not going to work you can only put your",
    "start": "2926440",
    "end": "2931920"
  },
  {
    "text": "Runner stuff in there and that means all data you're going to control is going to be you know uh mangled CSS values which",
    "start": "2931920",
    "end": "2939359"
  },
  {
    "text": "ises isn't really nice for um for exploitation but wait is it really that",
    "start": "2939359",
    "end": "2945720"
  },
  {
    "text": "only thing that you can control let's see how really allocation works right allocation is basically I don't know",
    "start": "2945720",
    "end": "2952960"
  },
  {
    "text": "it's not even first fit it's just you know um it's just put stuff in the buffer without heat headers right so um",
    "start": "2952960",
    "end": "2959960"
  },
  {
    "text": "all the allocation sizes are running up to eight bytes and what it first does is see like okay do I have a free slot of",
    "start": "2959960",
    "end": "2966599"
  },
  {
    "text": "the that specific size um if so reuse that and for that purpose it has a single link list of of uh free blocks",
    "start": "2966599",
    "end": "2974480"
  },
  {
    "text": "much like the free list in the low fragmentation Heap on Windows and if it doesn't have a chunk of the size already",
    "start": "2974480",
    "end": "2980359"
  },
  {
    "text": "it will just do simple forward allocation so it puts this blog right after the the last free block it doesn't",
    "start": "2980359",
    "end": "2985599"
  },
  {
    "text": "even have it just has one pointer that says like this is the next address you can allocate from and it does this for all the blocks and yeah there's no",
    "start": "2985599",
    "end": "2992079"
  },
  {
    "text": "inline information to overwrite which you know might be interesting for buffer overflow but since it's just C++ glasses",
    "start": "2992079",
    "end": "2997160"
  },
  {
    "text": "there's no real overflows there anyway so delocation works the same way right",
    "start": "2997160",
    "end": "3002240"
  },
  {
    "text": "you have like if you free you have the last block is a fre as the first and then the second block is fre third block",
    "start": "3002240",
    "end": "3007319"
  },
  {
    "text": "is freed which means you'll end up with this link list and um so the first four",
    "start": "3007319",
    "end": "3013160"
  },
  {
    "text": "bites of every free chunk are a poter to the next free Chunk in this link list and there's no coalescing of free chunks",
    "start": "3013160",
    "end": "3019040"
  },
  {
    "text": "that's two neighboring free chunks there still going to be chunks of that specific size so they're not never going to change size and that's great for us",
    "start": "3019040",
    "end": "3025520"
  },
  {
    "text": "because we don't have to worry about alizing it's easier to um to massage the",
    "start": "3025520",
    "end": "3030839"
  },
  {
    "text": "heat so that's that's how the ren Arina stuff works and I'm going to get back to that later um after you guys talk a",
    "start": "3030839",
    "end": "3037640"
  },
  {
    "text": "little bit about it okay we have like uh seven minutes",
    "start": "3037640",
    "end": "3044760"
  },
  {
    "text": "left in this thing so we got to go a little bit a little bit Speedy uh we're going to talk a little bit about um",
    "start": "3044760",
    "end": "3051559"
  },
  {
    "text": "about some more advanced exploitation topics do you want to just double team this again yeah",
    "start": "3051559",
    "end": "3058000"
  },
  {
    "text": "right so he already talked about pivoting we already about talked about r on the stack that's great can use it on",
    "start": "3058280",
    "end": "3063559"
  },
  {
    "text": "the Heap the answer is yes because although normally you don't you just mentioned the pivots and pivoting is",
    "start": "3063559",
    "end": "3070240"
  },
  {
    "text": "pretty I guess everybody knows about pivots now um he's so bitter he's bitter",
    "start": "3070240",
    "end": "3076920"
  },
  {
    "text": "yeah yeah he's old school it's okay Steve yeah abolutely um so if there's nothing on the stack",
    "start": "3076920",
    "end": "3083599"
  },
  {
    "text": "how can you the the question is you know how how do you how do you pivot how can we gain control of the stack pointer on",
    "start": "3083599",
    "end": "3089440"
  },
  {
    "text": "x86 it's easy you find 9C pop pop pop return to exchange e ax ESP pop up up",
    "start": "3089440",
    "end": "3096079"
  },
  {
    "text": "return it works like practically all the time um so this is what we want to do",
    "start": "3096079",
    "end": "3101760"
  },
  {
    "text": "right do D how can we do that how can we make the SP Point into the",
    "start": "3101760",
    "end": "3108079"
  },
  {
    "text": "heat the problem with a arm is even with",
    "start": "3108079",
    "end": "3113119"
  },
  {
    "text": "whatever you want to call it misaligned I don't know whatever you at least in my experience you pretty",
    "start": "3113119",
    "end": "3118640"
  },
  {
    "text": "much never find move into SP r0 or anything like that you can't just find",
    "start": "3118640",
    "end": "3123920"
  },
  {
    "text": "the 9C or the whatever the exchange register ESP op code is followed by some",
    "start": "3123920",
    "end": "3130280"
  },
  {
    "text": "C3 it it doesn't happen so uh what do we have to do well you could use a",
    "start": "3130280",
    "end": "3137119"
  },
  {
    "text": "intermediary basically yeah so like uh one thing you will find is that R7 is",
    "start": "3137119",
    "end": "3143680"
  },
  {
    "text": "often used as a frame register but sometimes is not used as a frame register so you can find uh a lot of",
    "start": "3143680",
    "end": "3149079"
  },
  {
    "text": "code sequences it'll move R7 into SP by frame register we mean basically EBP EBP",
    "start": "3149079",
    "end": "3154200"
  },
  {
    "text": "it's like the arm equivalent of EVP but it's sort of up to the compiler to decide to use it that way um but R7 is",
    "start": "3154200",
    "end": "3162520"
  },
  {
    "text": "typically not used all that much in actual exploits especially since if you're doing any vtable based anything",
    "start": "3162520",
    "end": "3167960"
  },
  {
    "text": "r0o is basically usually what's going to point to your stuff because it's this the this",
    "start": "3167960",
    "end": "3174000"
  },
  {
    "text": "pointer so typically at least for C++ based exploits I don't know usually",
    "start": "3174000",
    "end": "3179599"
  },
  {
    "text": "pivoting off r0 is where you want to go but it's hard to find it yeah but it's hard to find that stuff but again right",
    "start": "3179599",
    "end": "3187160"
  },
  {
    "text": "whatever you want to call misaligned instruction sequences this is an example we're bliing into M",
    "start": "3187160",
    "end": "3192520"
  },
  {
    "text": "map but if we decided that it was arm code instead next slide shows it we're",
    "start": "3192520",
    "end": "3199839"
  },
  {
    "text": "uh loading out of r0o all of these totally awesome registers like SP and LR",
    "start": "3199839",
    "end": "3205240"
  },
  {
    "text": "NPC so that's like a pivot right there you've gained control of SP and",
    "start": "3205240",
    "end": "3210599"
  },
  {
    "text": "PC boom you can rob um",
    "start": "3210599",
    "end": "3217960"
  },
  {
    "text": "yeah George oh speed",
    "start": "3217960",
    "end": "3223680"
  },
  {
    "text": "like two minutes right so um we got to use after free on the seep uh we only",
    "start": "3223680",
    "end": "3229839"
  },
  {
    "text": "control very very little data and CSS sucks for getting a lot of data there right um so we got the we know that the",
    "start": "3229839",
    "end": "3237559"
  },
  {
    "text": "arena comes from the system allocated so how can we use that to actually Control Data better the idea is instead of doing",
    "start": "3237559",
    "end": "3243880"
  },
  {
    "text": "you know normal block space sprays that you normally do when you use a heap exploitation what you can do is you can",
    "start": "3243880",
    "end": "3250760"
  },
  {
    "text": "spray entire heaps in this case because the arena is a heap on the Heap which means when we're doing allocations on",
    "start": "3250760",
    "end": "3256920"
  },
  {
    "text": "the Heap We can spray heaps on the Heap right and then we free them again and",
    "start": "3256920",
    "end": "3262000"
  },
  {
    "text": "that means we control the data that is on the heat before stuff gets allocated there and now know why I had this your",
    "start": "3262000",
    "end": "3267280"
  },
  {
    "text": "dog thing because it really gets confusing right so what you do is you on the normal Heap you spray Arena sized",
    "start": "3267280",
    "end": "3273160"
  },
  {
    "text": "objects like strings that contain the data that you want to be there later you free them again you trigger enough Arena",
    "start": "3273160",
    "end": "3280040"
  },
  {
    "text": "allocations so that the arena allocator decides I need more Arenas to allocate arer chunks uh and it takes one of your",
    "start": "3280040",
    "end": "3287760"
  },
  {
    "text": "previously free chunks and that's how you control the content within an arena so the idea here basically is uh you can",
    "start": "3287760",
    "end": "3295240"
  },
  {
    "text": "see it on this diagram pretty well um what we want to control is a virtual function table right and",
    "start": "3295240",
    "end": "3301680"
  },
  {
    "text": "the virtual function pointer is the first pointer within a a C++ clause and what is also the first pointer in a",
    "start": "3301680",
    "end": "3307880"
  },
  {
    "text": "block is this freelist chunk so what you can do is not without any addresses use",
    "start": "3307880",
    "end": "3313079"
  },
  {
    "text": "this Arena um allocator to actually um move the the virtual function poter",
    "start": "3313079",
    "end": "3319599"
  },
  {
    "text": "right in there of the data you control after the use after free because remember if you use after free gets",
    "start": "3319599",
    "end": "3325280"
  },
  {
    "text": "triggered the junk gets free um if the last chunk um is a previously free chunk",
    "start": "3325280",
    "end": "3330799"
  },
  {
    "text": "of any size this means or of the same size sorry that means that the uh single",
    "start": "3330799",
    "end": "3336319"
  },
  {
    "text": "link list pointer will Point into that free chunk now here comes the trick if your virtual function poter inside the",
    "start": "3336319",
    "end": "3343200"
  },
  {
    "text": "table is beyond or bigger than the size of the specific block that means that",
    "start": "3343200",
    "end": "3349079"
  },
  {
    "text": "the call of the virtual function pointer table will go into uninitialized Data",
    "start": "3349079",
    "end": "3354280"
  },
  {
    "text": "now here's a trick because we we allocated the chunk before and had a string there this analized data is",
    "start": "3354280",
    "end": "3360720"
  },
  {
    "text": "actually under our control so that's how you can actually put like full 32bit values there uh control all the virtual",
    "start": "3360720",
    "end": "3367319"
  },
  {
    "text": "function table and yeah do awesome stuff so um it it it sound simple it's",
    "start": "3367319",
    "end": "3375400"
  },
  {
    "text": "pretty hard to pull off actually um H so the bonus is you can have anything in",
    "start": "3375400",
    "end": "3381119"
  },
  {
    "text": "your viral table but um you require a lot of Primitives you need Primitives for allocating stuff on the Ren arer and",
    "start": "3381119",
    "end": "3387200"
  },
  {
    "text": "freeing stuff you need perius for allocating and freeing strings uh on the real normal Heap and just cring strings",
    "start": "3387200",
    "end": "3394960"
  },
  {
    "text": "does not work because of the garbage collector unescape which is praised by immunity doesn't work uh only more",
    "start": "3394960",
    "end": "3401079"
  },
  {
    "text": "anymore it's only one single free and we want to spray a lot of mariners um the alalo is a coalescing heap allocator so",
    "start": "3401079",
    "end": "3408319"
  },
  {
    "text": "we need to split it and have like blocking stuff in there and so on and yeah have a lot of fun debuging this",
    "start": "3408319",
    "end": "3414640"
  },
  {
    "text": "with GDB which by the way is pretty broken on Android anyway and crushes all the time so yeah what we needed was",
    "start": "3414640",
    "end": "3421599"
  },
  {
    "text": "something better and faster than GDB and that's what we built in-house um not going to have time to talk about this",
    "start": "3421599",
    "end": "3427039"
  },
  {
    "text": "anymore but yeah that's it sorry that's fine so conclusion it's it's actually pretty",
    "start": "3427039",
    "end": "3433680"
  },
  {
    "text": "hard all right so um some of the conclusions we're wrapping it up um I think we got like two minutes left um so",
    "start": "3435640",
    "end": "3443200"
  },
  {
    "text": "we did this pretty well we timed it up pretty well uh our conclusion is basically that the world's changing we're in a post PC exploitation",
    "start": "3443200",
    "end": "3449319"
  },
  {
    "text": "environment arm is really fun you guys should check out some arm stuff and check out our blog and and learn about",
    "start": "3449319",
    "end": "3455200"
  },
  {
    "text": "arm shell coating and we're going to be posting a lot of the slides and materials and stuff from the chorus onto",
    "start": "3455200",
    "end": "3460280"
  },
  {
    "text": "the blog pretty soon and um and that this stuff is real as George is proven like there's these georgean Jay duck",
    "start": "3460280",
    "end": "3466599"
  },
  {
    "text": "actually you guys can actually find really cool bugs you guys can find really cool bugs and exploit them and",
    "start": "3466599",
    "end": "3472839"
  },
  {
    "text": "it's it's a fun new kind of territory so uh thanks for for listening and uh",
    "start": "3472839",
    "end": "3478200"
  },
  {
    "text": "that's it",
    "start": "3478200",
    "end": "3481440"
  },
  {
    "text": "[Applause]",
    "start": "3484710",
    "end": "3487828"
  }
]