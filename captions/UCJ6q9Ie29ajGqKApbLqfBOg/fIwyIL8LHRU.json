[
  {
    "text": "[Music]",
    "start": "1550",
    "end": "4810"
  },
  {
    "text": "hey everybody welcome to this talk elf section docking that's a very long",
    "start": "8120",
    "end": "13980"
  },
  {
    "text": "title we'll talk about elves hopefully those elves are not going to be very evil to us",
    "start": "13980",
    "end": "19199"
  },
  {
    "text": "but um to set this stage um Dimitri I am with IBM X-Force where I do research for",
    "start": "19199",
    "end": "27960"
  },
  {
    "text": "a phantom defense and previously I did the red team operations and some malware",
    "start": "27960",
    "end": "33600"
  },
  {
    "text": "work and setting or absec so one of the things that we're going to",
    "start": "33600",
    "end": "40379"
  },
  {
    "text": "talk about is um we're going to talk about it from the offensive standpoint",
    "start": "40379",
    "end": "46140"
  },
  {
    "text": "um one of the probably good things that happens to uh red team operators when",
    "start": "46140",
    "end": "51960"
  },
  {
    "text": "the red team operator fails right and then the idea start flow and we start fixing",
    "start": "51960",
    "end": "60420"
  },
  {
    "text": "things that we did not know about before situations we were not in before or",
    "start": "60420",
    "end": "65760"
  },
  {
    "text": "environments we were not uh in before right and so from that perspective we",
    "start": "65760",
    "end": "72479"
  },
  {
    "text": "can learn a lot of things of the fail them as part of our talk we're gonna look at",
    "start": "72479",
    "end": "78600"
  },
  {
    "text": "evolution of viability of static pay loads in Linux we're gonna see how that's done now and how we can do better",
    "start": "78600",
    "end": "85080"
  },
  {
    "text": "and ultimately how we fixed our failures and we're gonna start working our way",
    "start": "85080",
    "end": "90600"
  },
  {
    "text": "down to the common denominator which is the elf section and use it as a unit of a payload",
    "start": "90600",
    "end": "96659"
  },
  {
    "text": "so static delivery Dynamic delivery all of that we're going to discuss and uh we'll move on to L section",
    "start": "96659",
    "end": "104100"
  },
  {
    "text": "docking the actual concept that helped us solve our issue and finish up the",
    "start": "104100",
    "end": "111000"
  },
  {
    "text": "engagement properly and last but not least we're gonna have a demo of things that uh we pretty much",
    "start": "111000",
    "end": "118680"
  },
  {
    "text": "came up through uh through the time that we were fixing our issues and we're going to give some guidance to how this",
    "start": "118680",
    "end": "126420"
  },
  {
    "text": "sort of concept of l dot can be detected and um",
    "start": "126420",
    "end": "131700"
  },
  {
    "text": "uh you know mitigated by by companies so they say crowdstrike and Trend Micro",
    "start": "131700",
    "end": "137340"
  },
  {
    "text": "in the report that 90 of cloud workloads is run in Linux I would agree with that",
    "start": "137340",
    "end": "142920"
  },
  {
    "text": "we see Linux all the time in clouds but also what's interesting is that in",
    "start": "142920",
    "end": "147959"
  },
  {
    "text": "2021 and I would imagine 2020 2022 there's a 35 year-over-year increase in",
    "start": "147959",
    "end": "155340"
  },
  {
    "text": "Linux malware Linux is just interesting it runs uh it",
    "start": "155340",
    "end": "160860"
  },
  {
    "text": "runs workloads so it must have some interesting data or access but the interesting things that this",
    "start": "160860",
    "end": "168239"
  },
  {
    "text": "report reported on uh was the shift from ransomware which we've seen before it",
    "start": "168239",
    "end": "173760"
  },
  {
    "text": "just kind of set it forget it get the quick win get Roi in this stage into stealthy things like whiners a",
    "start": "173760",
    "end": "181440"
  },
  {
    "text": "Resurgence of warm capabilities on Linux believe it or not and uh preference for long-term",
    "start": "181440",
    "end": "187980"
  },
  {
    "text": "operations as opposed to coming and do the thing and get out and obviously preference for file less",
    "start": "187980",
    "end": "194819"
  },
  {
    "text": "execution because of the detection capabilities that have been growing over the past years",
    "start": "194819",
    "end": "201000"
  },
  {
    "text": "but there is a caveat to the files of file less execution in memory execution we're going to look at that as well",
    "start": "201000",
    "end": "208260"
  },
  {
    "text": "so when we are um looking at it from the operation from offensive operation",
    "start": "208260",
    "end": "214560"
  },
  {
    "text": "we have roughly a couple of choices to deliver payload first is the dynamic side which which probably empirically",
    "start": "214560",
    "end": "221099"
  },
  {
    "text": "counts up to the 70 now um where you essentially deploy the",
    "start": "221099",
    "end": "227099"
  },
  {
    "text": "Stager um then you fetch the payload from the outside maybe you do some reconnaissance",
    "start": "227099",
    "end": "232680"
  },
  {
    "text": "of where you're at situational awareness or whatnot then you load and execute that payload Dynamic side right",
    "start": "232680",
    "end": "240000"
  },
  {
    "text": "the static side is basically bundling everything that you need for a One-Shot deployment",
    "start": "240000",
    "end": "246480"
  },
  {
    "text": "and you may think that okay well there are trade-offs right it's it's a dial",
    "start": "246480",
    "end": "253140"
  },
  {
    "text": "sometimes you need one sometimes you need the the other but the interesting part is that the dynamic part the 70 of",
    "start": "253140",
    "end": "260100"
  },
  {
    "text": "it is there for a reason because of the flexibility detonation dependencies can be accounted",
    "start": "260100",
    "end": "266460"
  },
  {
    "text": "for you know where you deploy and you can assess the environment and things like this",
    "start": "266460",
    "end": "271860"
  },
  {
    "text": "but also you lose a lot of things you probably lose a lot of time and release capabilities dormancy maybe an issue if",
    "start": "271860",
    "end": "279900"
  },
  {
    "text": "you're generating a lot of traffic maybe you're trying to figure out where you",
    "start": "279900",
    "end": "285540"
  },
  {
    "text": "are in the system and also the static side has issues because you have",
    "start": "285540",
    "end": "290699"
  },
  {
    "text": "coupling variants right you need to figure out the the bundle that you're going to deploy and that's going to be",
    "start": "290699",
    "end": "296100"
  },
  {
    "text": "it so there are designed desired Dynamic traits for the dynamic",
    "start": "296100",
    "end": "303660"
  },
  {
    "text": "um execution arguably less chance of detection because you're you're working in in",
    "start": "303660",
    "end": "309720"
  },
  {
    "text": "stages maybe right there's more flexibility but there's also",
    "start": "309720",
    "end": "315600"
  },
  {
    "text": "um undesired State on the static side uh which is you're much heavier because you need to bundle the entire payload with",
    "start": "315600",
    "end": "322259"
  },
  {
    "text": "the loader and uh you probably have a lot more chances of detection if you're not doing",
    "start": "322259",
    "end": "327780"
  },
  {
    "text": "it properly uh because we're going to look at how things are done now and",
    "start": "327780",
    "end": "333180"
  },
  {
    "text": "you're going to see that it may not be ideal for what you're trying to do less flexibility we've talked about that",
    "start": "333180",
    "end": "340020"
  },
  {
    "text": "but I still have this this this thing in my mind that static is 30 and dynamic is",
    "start": "340020",
    "end": "345780"
  },
  {
    "text": "70. yes the market is probably right that they're moving to Dynamic but there's probably something left in aesthetic and",
    "start": "345780",
    "end": "352500"
  },
  {
    "text": "so we need to look at um at what what's still available in the static to kind of",
    "start": "352500",
    "end": "358440"
  },
  {
    "text": "counter what defense can be mounted on the dynamic side right so here we're",
    "start": "358440",
    "end": "364320"
  },
  {
    "text": "trying to improve static delivery as opposed to Dynamic delivery which is a lot more understood",
    "start": "364320",
    "end": "370740"
  },
  {
    "text": "before we sort of look at the solutions or some of the ideas we kind of need to",
    "start": "370740",
    "end": "376199"
  },
  {
    "text": "take a history trip into how we actually embed payloads right now",
    "start": "376199",
    "end": "382440"
  },
  {
    "text": "it's um it's kind of been there for a while and there are only a few ways that",
    "start": "382440",
    "end": "387900"
  },
  {
    "text": "you can do it on Linux one of the ways is your standard turn the binary into hex to our new payload or a shell code",
    "start": "387900",
    "end": "394740"
  },
  {
    "text": "into a hex and stick it into a variable right which is going to be into Data",
    "start": "394740",
    "end": "400259"
  },
  {
    "text": "section placed in the data section it will be it'll be there for you to retrieve and you can do it with a couple",
    "start": "400259",
    "end": "406740"
  },
  {
    "text": "of tools that's very rudimentary and you can be",
    "start": "406740",
    "end": "412020"
  },
  {
    "text": "sure that we're on time or statically somebody is going to catch you",
    "start": "412020",
    "end": "417120"
  },
  {
    "text": "then you can use the compilation and linking and say okay well if I want to",
    "start": "417120",
    "end": "423080"
  },
  {
    "text": "data be in a section why don't I specify which section I'm going to place that data in and you can actually do it",
    "start": "423080",
    "end": "429840"
  },
  {
    "text": "through a compiler setup you can you can educate the",
    "start": "429840",
    "end": "435000"
  },
  {
    "text": "compiler where you want to place your data you can do it in GCC with attributes you essentially specify a",
    "start": "435000",
    "end": "441180"
  },
  {
    "text": "section and say hey my payload is going to be in that section and then the binary is going to be a separate section",
    "start": "441180",
    "end": "446520"
  },
  {
    "text": "where it gets loaded it's also possible to be traced because the reason uh the",
    "start": "446520",
    "end": "453060"
  },
  {
    "text": "way you invoke or find that payload is when the memory is the the section is",
    "start": "453060",
    "end": "459240"
  },
  {
    "text": "loaded into the memory you can look into that and say hey I found my payload give it to me I'm gonna bootstrap and and run",
    "start": "459240",
    "end": "468300"
  },
  {
    "text": "if you do not like to use GCC you can go directly to assembly and you can actually do",
    "start": "468300",
    "end": "474539"
  },
  {
    "text": "um in bin directive or whatever your compiler allows you to do and you know",
    "start": "474539",
    "end": "480539"
  },
  {
    "text": "you basic list of a elf executable into your binary and uh is going to be a",
    "start": "480539",
    "end": "487440"
  },
  {
    "text": "similar linking you are going to find an external variable from your loader in the memory it's still going to be loaded",
    "start": "487440",
    "end": "493620"
  },
  {
    "text": "and you go from there similar to GCC but without the overhang",
    "start": "493620",
    "end": "499220"
  },
  {
    "text": "you can um pretty much replicate what assembly does on on the side if you want to do it",
    "start": "499379",
    "end": "505560"
  },
  {
    "text": "in the C language you can do inline assembly um there are tools that exist",
    "start": "505560",
    "end": "511860"
  },
  {
    "text": "that do it a little bit better a little bit more ergonomic if you will but the thing of it is it doesn't change",
    "start": "511860",
    "end": "518580"
  },
  {
    "text": "the way you actually interact with that payload because the one thing that you always",
    "start": "518580",
    "end": "524880"
  },
  {
    "text": "need to do is you need to educate the elf you need to construct the elf binary and the way you would do it you would",
    "start": "524880",
    "end": "531720"
  },
  {
    "text": "say okay that's a data section via products prog bits directive right and that's very important so however which",
    "start": "531720",
    "end": "538560"
  },
  {
    "text": "way you're taking which road you're taking to create your uh or embed your payload into the binary is still going",
    "start": "538560",
    "end": "545459"
  },
  {
    "text": "to be possible to introspect that and find it and so before we move on I think it",
    "start": "545459",
    "end": "552360"
  },
  {
    "text": "makes sense to kind of look deeper into what those sections are I've talked about prog bits I've talked about memory",
    "start": "552360",
    "end": "558360"
  },
  {
    "text": "loading but in reality Alpha elf uh standard specifies that your binary",
    "start": "558360",
    "end": "564899"
  },
  {
    "text": "consists of sections in every section has flags and based on those flags or",
    "start": "564899",
    "end": "570600"
  },
  {
    "text": "attributes your uh your system loader is going to be behaving and most of the time the",
    "start": "570600",
    "end": "576899"
  },
  {
    "text": "data is marked as loadable into the memory well that makes sense right because how do you find things in memory",
    "start": "576899",
    "end": "583860"
  },
  {
    "text": "you need to be able to to Traverse that memory and access it something needs to be there so something needs to be loaded",
    "start": "583860",
    "end": "589740"
  },
  {
    "text": "from the disk into the memory so but not all the section not not all sections",
    "start": "589740",
    "end": "597360"
  },
  {
    "text": "not all types of section in elf standard uh do that by default carry that",
    "start": "597360",
    "end": "602519"
  },
  {
    "text": "attribute of uh assuming the load into the memory by default and so we can take",
    "start": "602519",
    "end": "607620"
  },
  {
    "text": "advantage of that uh little thing here so",
    "start": "607620",
    "end": "613940"
  },
  {
    "text": "the real issue when you're trying to embed the payload into into static",
    "start": "613940",
    "end": "619380"
  },
  {
    "text": "binary is that your compiler betrays you and you link and betrays you because",
    "start": "619380",
    "end": "624600"
  },
  {
    "text": "they want to be a good good helpers right good good servants and they",
    "start": "624600",
    "end": "630779"
  },
  {
    "text": "actually want to try and Link everything so when you're loading things into the",
    "start": "630779",
    "end": "635880"
  },
  {
    "text": "memory when you're executing the um the loader then you are actually able",
    "start": "635880",
    "end": "641700"
  },
  {
    "text": "to find what you put in there so there are challenges with breaking that",
    "start": "641700",
    "end": "648839"
  },
  {
    "text": "linkage right what can you do there's not much you can do you have to have a very uh a sort of valid elf to",
    "start": "648839",
    "end": "657420"
  },
  {
    "text": "work with so data carrying sections that carry product builds flags are PT loaded",
    "start": "657420",
    "end": "663660"
  },
  {
    "text": "basically it's a it's a term for hey take that session load load it into the",
    "start": "663660",
    "end": "668760"
  },
  {
    "text": "memory so static linking equals detection",
    "start": "668760",
    "end": "674060"
  },
  {
    "text": "so how do we embed in a better way if you start thinking about it then you",
    "start": "674640",
    "end": "681300"
  },
  {
    "text": "have a couple of choices you can avoid OS loader basically something that is",
    "start": "681300",
    "end": "687180"
  },
  {
    "text": "going to execute your your Elf right and how do you how do you do that",
    "start": "687180",
    "end": "693480"
  },
  {
    "text": "um by not so so you can actually educate the loader not to look at the section not to load it but it's very very messy",
    "start": "693480",
    "end": "699720"
  },
  {
    "text": "and remember you're executing this on the adversarial system there may not be",
    "start": "699720",
    "end": "705120"
  },
  {
    "text": "compilers there they may not be tools there and every single move kills you",
    "start": "705120",
    "end": "710339"
  },
  {
    "text": "so we started looking at this uh Curious property that not all elf sections are",
    "start": "710339",
    "end": "715800"
  },
  {
    "text": "actually loadable into the memory by default and uh what happens if we just avoid",
    "start": "715800",
    "end": "721680"
  },
  {
    "text": "setting Flex on sections right it's there it's data but it's not loadable",
    "start": "721680",
    "end": "726899"
  },
  {
    "text": "or and or look at something that is inherently known by the loader ld.so on",
    "start": "726899",
    "end": "734760"
  },
  {
    "text": "Linux that is not going to be loaded into the memory and one such thing as shd node type of Elf section",
    "start": "734760",
    "end": "741540"
  },
  {
    "text": "it's very widespread actually every executable or almost every executable that comes by default on Linux has that",
    "start": "741540",
    "end": "748560"
  },
  {
    "text": "right is the section then that compiler uses just to to put like API version",
    "start": "748560",
    "end": "754200"
  },
  {
    "text": "version or perhaps developers can convey some licensing information in it it's",
    "start": "754200",
    "end": "759660"
  },
  {
    "text": "just the data it's a record structured data in your Elf the structure of it is very simple it's",
    "start": "759660",
    "end": "766500"
  },
  {
    "text": "a record with a prepended size of the record of the data in it and maybe a",
    "start": "766500",
    "end": "771959"
  },
  {
    "text": "little bit of a header metadata how many records you would have and if you do read elf on sections on",
    "start": "771959",
    "end": "778860"
  },
  {
    "text": "every system uh executable that comes by default you will see that uh sht node is",
    "start": "778860",
    "end": "785940"
  },
  {
    "text": "available so that's nice um let's move on further",
    "start": "785940",
    "end": "792779"
  },
  {
    "text": "so so far we think that the idea is to create a dormant section in elf that",
    "start": "792779",
    "end": "798300"
  },
  {
    "text": "doesn't get loaded by default by the loader into the memory but if we were to do it in the same",
    "start": "798300",
    "end": "806399"
  },
  {
    "text": "single executable we have challenges because again section is a section and",
    "start": "806399",
    "end": "812040"
  },
  {
    "text": "the structure of a section it has to be somehow tied to the loader it needs to find its",
    "start": "812040",
    "end": "817380"
  },
  {
    "text": "um its um its relationship to the variable where that section um kind of linked into",
    "start": "817380",
    "end": "823980"
  },
  {
    "text": "so graphically it's uh it's kind of like okay well you can take a section you can create it you can put it into the binary",
    "start": "823980",
    "end": "830940"
  },
  {
    "text": "and then say it's not loadable right our job is to decouple that payload",
    "start": "830940",
    "end": "836279"
  },
  {
    "text": "completely from compiler and Link in Linker so compiler linkers should not know about",
    "start": "836279",
    "end": "841860"
  },
  {
    "text": "them so if compiler and linkers are are our",
    "start": "841860",
    "end": "847320"
  },
  {
    "text": "enemies in this case what do we want we want to create an else section",
    "start": "847320",
    "end": "853860"
  },
  {
    "text": "outside of your loader completely standalone maybe create a loader that will somehow",
    "start": "853860",
    "end": "862560"
  },
  {
    "text": "know about that binary know about that section but but do it in such a way that",
    "start": "862560",
    "end": "869040"
  },
  {
    "text": "is not inherently compiled or linked with it okay so so far the idea is to break the",
    "start": "869040",
    "end": "879420"
  },
  {
    "text": "offset relationship from the loader to the payload to a complete separation between sections where the payloaders",
    "start": "879420",
    "end": "886260"
  },
  {
    "text": "exist and sections that belong to the loader itself so you can think of it as a payload is",
    "start": "886260",
    "end": "893160"
  },
  {
    "text": "going to be a completely foreign section to The Entity that elf is for the loader",
    "start": "893160",
    "end": "899399"
  },
  {
    "text": "and that's essentially the docking part right you dock section to the executable",
    "start": "899399",
    "end": "904920"
  },
  {
    "text": "that is the loader so if compiler is the problem and we're",
    "start": "904920",
    "end": "910620"
  },
  {
    "text": "trying to decouple the payload and we're avoiding operating system loader right",
    "start": "910620",
    "end": "915839"
  },
  {
    "text": "how do we do this well if before we were able to compile a",
    "start": "915839",
    "end": "921000"
  },
  {
    "text": "section into the um into into that binary now we take a binary and dock it to the",
    "start": "921000",
    "end": "929040"
  },
  {
    "text": "executable that is the loader maintaining the ABI compatibility the",
    "start": "929040",
    "end": "934139"
  },
  {
    "text": "binary compatibility of sections within the elf as opposed to API compatibility",
    "start": "934139",
    "end": "939600"
  },
  {
    "text": "by code and essentially what that looks like is it's a it's a framework where you can",
    "start": "939600",
    "end": "946740"
  },
  {
    "text": "split it between what you do on a safe side your red side and on your blue side",
    "start": "946740",
    "end": "951959"
  },
  {
    "text": "which is the you know in in your environments over there right where you deploy the malware",
    "start": "951959",
    "end": "958199"
  },
  {
    "text": "you would have three components you would have a packer or a injector you",
    "start": "958199",
    "end": "964260"
  },
  {
    "text": "would have a loader that is completely unaware what is being loaded into it and you will have you would have a payload",
    "start": "964260",
    "end": "970079"
  },
  {
    "text": "that is in the form of a section right and so the um the injector or a packer would marry",
    "start": "970079",
    "end": "977940"
  },
  {
    "text": "the two together like Legos they're completely uh segmented by any kind of",
    "start": "977940",
    "end": "984420"
  },
  {
    "text": "memory reference but they would live in the same binary so binary is good because that's a",
    "start": "984420",
    "end": "992880"
  },
  {
    "text": "standalone thing that we can work with and the loader Standalone loader is also good because it's generic it just needs",
    "start": "992880",
    "end": "999060"
  },
  {
    "text": "to know how to load not what it loads so the",
    "start": "999060",
    "end": "1006019"
  },
  {
    "text": "uh what are the the help section docking trades that we're trying to kind of figure out with that idea of completely",
    "start": "1006019",
    "end": "1013100"
  },
  {
    "text": "minor separation well the elf is the Standalone loader is",
    "start": "1013100",
    "end": "1018380"
  },
  {
    "text": "completely devoid of a payload that's a given you can give it to to the victim it's going to",
    "start": "1018380",
    "end": "1024380"
  },
  {
    "text": "stay there it doesn't need to carry any kind of payload have generic mechanisms",
    "start": "1024380",
    "end": "1030980"
  },
  {
    "text": "to find its own section that it doesn't know about but we can instruct it to do so right find the",
    "start": "1030980",
    "end": "1038000"
  },
  {
    "text": "offset in its own binary load it up and go from there so we",
    "start": "1038000",
    "end": "1043100"
  },
  {
    "text": "create a separation the payload itself is also created separately it's not directly entangled",
    "start": "1043100",
    "end": "1049400"
  },
  {
    "text": "or coupled with the loader that is going to go into no more putting data into the",
    "start": "1049400",
    "end": "1055840"
  },
  {
    "text": "variable right no more close coupling of that",
    "start": "1055840",
    "end": "1061700"
  },
  {
    "text": "you leave you'll also gain on dormancy so for example loader can sit there for",
    "start": "1061700",
    "end": "1067400"
  },
  {
    "text": "months right without doing anything and then it can find magically its own",
    "start": "1067400",
    "end": "1072500"
  },
  {
    "text": "payload somewhere in its own binary so very dormancy controls better packing",
    "start": "1072500",
    "end": "1078440"
  },
  {
    "text": "one of the challenges with packing is uh they first need the temporary file system a lot of times to unpack and",
    "start": "1078440",
    "end": "1085820"
  },
  {
    "text": "that's a detectable event second um they are fairly well",
    "start": "1085820",
    "end": "1092539"
  },
  {
    "text": "um kind of you know traced and their behavior is the the entropy for the",
    "start": "1092539",
    "end": "1098600"
  },
  {
    "text": "Packer is very uh is very is very um obvious right and then last but not",
    "start": "1098600",
    "end": "1104780"
  },
  {
    "text": "least um has anybody tried to actually look back in packet or something that is",
    "start": "1104780",
    "end": "1110600"
  },
  {
    "text": "frozen uh python executable for example if you're taking your entire toolkit with you it's very very hard because",
    "start": "1110600",
    "end": "1117919"
  },
  {
    "text": "it's not a regular elf when you're freezing let's say python executables so in our case we need to get over that as",
    "start": "1117919",
    "end": "1125000"
  },
  {
    "text": "well but that also creates a possibility for you to create fat binaries you can",
    "start": "1125000",
    "end": "1130640"
  },
  {
    "text": "have multiple sections and a table of contacts where your tools reside in that binary and you basically call one by one",
    "start": "1130640",
    "end": "1137299"
  },
  {
    "text": "or whichever you want right so there are possibilities from the red team operating perspective to kind of avoid a",
    "start": "1137299",
    "end": "1144980"
  },
  {
    "text": "lot of different things that kind of hinder your progress and also injector the thing that",
    "start": "1144980",
    "end": "1151880"
  },
  {
    "text": "basically marries the two Legos Lego pieces can also be shipped to the to the",
    "start": "1151880",
    "end": "1158720"
  },
  {
    "text": "victim's side if you want to what you can do you can actually create dormant stages in different executables and load",
    "start": "1158720",
    "end": "1165919"
  },
  {
    "text": "executable load those stages from one executable to another right because there is no more linear",
    "start": "1165919",
    "end": "1171740"
  },
  {
    "text": "tracing you can work with your own sections or you can work and find other executable sections and load them up",
    "start": "1171740",
    "end": "1179780"
  },
  {
    "text": "so that is the elf back Factory right it's it's sort of the the concept with",
    "start": "1179780",
    "end": "1185419"
  },
  {
    "text": "the proof of concept if you will where you implement that sort of idea that",
    "start": "1185419",
    "end": "1191299"
  },
  {
    "text": "sort of Separation um I've marked um the pieces here with uh red and blue",
    "start": "1191299",
    "end": "1197960"
  },
  {
    "text": "just to signify where in a evolution of your malware deployment or location or",
    "start": "1197960",
    "end": "1204919"
  },
  {
    "text": "disposition and malware uh your pieces fall right for example elf injector may",
    "start": "1204919",
    "end": "1210620"
  },
  {
    "text": "be usually um for one time shot you're storing it in the safe side and you deliver the",
    "start": "1210620",
    "end": "1216320"
  },
  {
    "text": "bundle which is you know what we're trying to do in the static side or you know if your",
    "start": "1216320",
    "end": "1222320"
  },
  {
    "text": "environment allows you if you're not detected you can place a injector on a",
    "start": "1222320",
    "end": "1227360"
  },
  {
    "text": "victim side to create those pipelines with different executables and Achieve",
    "start": "1227360",
    "end": "1232520"
  },
  {
    "text": "different dormancy variables and kind of maybe even do it across um you know various binaries if you will",
    "start": "1232520",
    "end": "1240260"
  },
  {
    "text": "but um so payload attachment and reattachment in field can be achieved",
    "start": "1240260",
    "end": "1245780"
  },
  {
    "text": "the um the other curious thing we've talked about the we we said that fileless malware is preferable but the",
    "start": "1245780",
    "end": "1253520"
  },
  {
    "text": "reason why it's preferable is because detections are less instrumented on a memory right than it is on disk",
    "start": "1253520",
    "end": "1261140"
  },
  {
    "text": "however it's a statement that is not always true and you have to see uh in a specific",
    "start": "1261140",
    "end": "1268880"
  },
  {
    "text": "environment what kills you and what makes you live a little bit longer right and so for example if you if you uh if",
    "start": "1268880",
    "end": "1277760"
  },
  {
    "text": "you blend into the noise and that noise is disk so be it right you you adapt and overcome right in the disc land if if",
    "start": "1277760",
    "end": "1285080"
  },
  {
    "text": "you are very um in in very kind of quiet environment that is instrumented by defense then you",
    "start": "1285080",
    "end": "1291200"
  },
  {
    "text": "may try different things and file less malware may work for you but to show how",
    "start": "1291200",
    "end": "1296299"
  },
  {
    "text": "we can actually load section in a fileless manner we",
    "start": "1296299",
    "end": "1301520"
  },
  {
    "text": "um we we have some things in the elf pack that allows you to do that we're going to go through that as well but um",
    "start": "1301520",
    "end": "1307880"
  },
  {
    "text": "the main thing with with sections and uh loading into",
    "start": "1307880",
    "end": "1313640"
  },
  {
    "text": "the memory is that you don't need to do and protect and protect is when you have",
    "start": "1313640",
    "end": "1318799"
  },
  {
    "text": "a piece of shell codes somewhere in your binary you load it up and say okay we'll make that make that segment executable",
    "start": "1318799",
    "end": "1325520"
  },
  {
    "text": "and the moment you do that um nobody knows what's going to happen",
    "start": "1325520",
    "end": "1331220"
  },
  {
    "text": "right so mprotect kind of kills you um and uh payloading section is that you",
    "start": "1331220",
    "end": "1337820"
  },
  {
    "text": "can have two loaders nothing prevents you from dropping two binaries that are completely different to loaders that may",
    "start": "1337820",
    "end": "1343460"
  },
  {
    "text": "load uh each other's payloads off of each other sections right so a lot of giving you a little bit more flexibility",
    "start": "1343460",
    "end": "1350840"
  },
  {
    "text": "into what you can do with static things so the file is execution",
    "start": "1350840",
    "end": "1356299"
  },
  {
    "text": "um there are two options that we've implemented um that are known so far at least to me option A is the user exec",
    "start": "1356299",
    "end": "1364340"
  },
  {
    "text": "um essentially it's the we take a metal payload for for this demonstration it's",
    "start": "1364340",
    "end": "1371120"
  },
  {
    "text": "which is really just a generation of implant from Metasploit and we use",
    "start": "1371120",
    "end": "1378740"
  },
  {
    "text": "uh user exact to basically overlay the section that gets loaded into onto the",
    "start": "1378740",
    "end": "1384020"
  },
  {
    "text": "memory of the loader itself wiping it clean and therefore there is no exact uh system call right and we're going to see",
    "start": "1384020",
    "end": "1390799"
  },
  {
    "text": "later how we detect that and we can kind of move past the detection there so user",
    "start": "1390799",
    "end": "1398600"
  },
  {
    "text": "exact uh knows the center knows this exit which is useful but the downside is",
    "start": "1398600",
    "end": "1403700"
  },
  {
    "text": "that you will never use that loader again because the memory is overlaid you can't really perpetually do anything",
    "start": "1403700",
    "end": "1409220"
  },
  {
    "text": "with that loader anymore in memory right and the other beauty of shipping",
    "start": "1409220",
    "end": "1415220"
  },
  {
    "text": "sections in the in the payload in Standalone section is that you can have uh real",
    "start": "1415220",
    "end": "1421820"
  },
  {
    "text": "binaries you don't need to do any kind of uh you know things that you would with the",
    "start": "1421820",
    "end": "1428360"
  },
  {
    "text": "Shell Code if you can turn your your malware into an elf and dock it dock it",
    "start": "1428360",
    "end": "1434000"
  },
  {
    "text": "into the loader that's all you're going to have the second option b is a",
    "start": "1434000",
    "end": "1439179"
  },
  {
    "text": "memfdcreate which is you know kind of known to a lot of Defenders",
    "start": "1439179",
    "end": "1445400"
  },
  {
    "text": "um it creates Anonymous file in the proc file system and it executes a Cisco 34",
    "start": "1445400",
    "end": "1452720"
  },
  {
    "text": "319 I believe um to do that right but it's it's also detectable it has the exact the e in it",
    "start": "1452720",
    "end": "1461260"
  },
  {
    "text": "but the plus is that you can do it perpetually more than once",
    "start": "1461260",
    "end": "1466760"
  },
  {
    "text": "so as far as detection um if you take about so we're talking about",
    "start": "1466760",
    "end": "1473900"
  },
  {
    "text": "static things so we have to work towards the static detection as well if you take bin walk and if you take metal which is",
    "start": "1473900",
    "end": "1480620"
  },
  {
    "text": "msf payload which we're working with here just for demonstration purposes and you run a build block on it it's going",
    "start": "1480620",
    "end": "1486919"
  },
  {
    "text": "to light up like a like a Christmas tree right it's gonna be very very even if",
    "start": "1486919",
    "end": "1492440"
  },
  {
    "text": "you um obfuscated then it will still figure out different heuristics to latch onto",
    "start": "1492440",
    "end": "1498679"
  },
  {
    "text": "the way uh metal works right but if you're running a bin walk on sectioned",
    "start": "1498679",
    "end": "1505419"
  },
  {
    "text": "loader that has a section to it attached to it then you see very few things and",
    "start": "1505419",
    "end": "1511460"
  },
  {
    "text": "those things are even less because what you see in the slide there is just me turning on debug in my uh executable",
    "start": "1511460",
    "end": "1518900"
  },
  {
    "text": "um to to be able to show where um you know the difference usually you would not see anything okay",
    "start": "1518900",
    "end": "1524840"
  },
  {
    "text": "now bin walk is is good because if you are Defender",
    "start": "1524840",
    "end": "1530020"
  },
  {
    "text": "you can actually uh look at the entropy of executable and see how much how well",
    "start": "1530020",
    "end": "1537020"
  },
  {
    "text": "it matches with uh with what you expect and so from that perspective uh section",
    "start": "1537020",
    "end": "1542779"
  },
  {
    "text": "docking actually moves the needle out a little bit right because it's no longer your metal that you're deploying it is",
    "start": "1542779",
    "end": "1549320"
  },
  {
    "text": "your your bundled but it's done such a way that it changes the entropy so but but for for for for people who will be",
    "start": "1549320",
    "end": "1557240"
  },
  {
    "text": "working with this concept and who needs to detect that um you know use it use the entropy uh to",
    "start": "1557240",
    "end": "1563360"
  },
  {
    "text": "detect that and also the dynamic side I know we're working with the static side but the",
    "start": "1563360",
    "end": "1569179"
  },
  {
    "text": "dynamic detection is also an anime of ours um so there are a couple a couple of",
    "start": "1569179",
    "end": "1575000"
  },
  {
    "text": "couple of things to take care of so BPF in Linux world has come up to be a very",
    "start": "1575000",
    "end": "1580580"
  },
  {
    "text": "useful tool for Defenders to look at things and uh essentially it's a kernel uh",
    "start": "1580580",
    "end": "1586580"
  },
  {
    "text": "instrumentation that can be modified at the user land and basically say hey here's the trace point that I would like",
    "start": "1586580",
    "end": "1593659"
  },
  {
    "text": "uh Colonel to look at and report it back to me if you know something happens some",
    "start": "1593659",
    "end": "1599360"
  },
  {
    "text": "event happens or a system called called right so for example CIS enter MFD open",
    "start": "1599360",
    "end": "1604480"
  },
  {
    "text": "MFG exit or remember the yeah exit MMD open or uh Center exact so BPF",
    "start": "1604480",
    "end": "1613640"
  },
  {
    "text": "um can do that for you that's why we wanted to use the user exec or MFD to be able to play with it a little bit right",
    "start": "1613640",
    "end": "1619760"
  },
  {
    "text": "it depends which environment you're in um you should be able to uh to do that",
    "start": "1619760",
    "end": "1625100"
  },
  {
    "text": "and the other thing is Yara right um Yara the way it works right now from",
    "start": "1625100",
    "end": "1630980"
  },
  {
    "text": "command line it doesn't detect section loading but you can actually instrument it from if you drop into uh we'll see",
    "start": "1630980",
    "end": "1637820"
  },
  {
    "text": "that later there's a Code out there that can parse the elf and basically look for SSG node",
    "start": "1637820",
    "end": "1644120"
  },
  {
    "text": "sections or maybe you can do it by by size whatever the case may be however well you know your environment and what",
    "start": "1644120",
    "end": "1649940"
  },
  {
    "text": "you're expecting it to be so now the demo I'm gonna narrate",
    "start": "1649940",
    "end": "1655279"
  },
  {
    "text": "through the demo uh there are a lot of moving Parts we're gonna see execution of through user exec",
    "start": "1655279",
    "end": "1662240"
  },
  {
    "text": "uh we're gonna see docking obviously and then we're gonna go through some of the detection capabilities and and see how",
    "start": "1662240",
    "end": "1668419"
  },
  {
    "text": "that they manifest",
    "start": "1668419",
    "end": "1671559"
  },
  {
    "text": "all right so we're starting up with the setup simulated environment",
    "start": "1674840",
    "end": "1679880"
  },
  {
    "text": "um different tabs the victim tab where you obviously deploy your malware",
    "start": "1679880",
    "end": "1686360"
  },
  {
    "text": "um and then you we use metasploits uh callback to basically",
    "start": "1686360",
    "end": "1692299"
  },
  {
    "text": "catch HTTP as reverse payload just for the for the sake of it right you can use",
    "start": "1692299",
    "end": "1698419"
  },
  {
    "text": "anything you want to to catch that but essentially that's what it is we don't have any any section sessions right now",
    "start": "1698419",
    "end": "1704539"
  },
  {
    "text": "so let's just try to dock the uh the section with our payload into",
    "start": "1704539",
    "end": "1711740"
  },
  {
    "text": "into the loader marry them up together right like Legos so the loader or the",
    "start": "1711740",
    "end": "1717200"
  },
  {
    "text": "Packer takes the loader and takes the uh the metal elf which is the payload and",
    "start": "1717200",
    "end": "1722240"
  },
  {
    "text": "says okay well here's my cradle I'm gonna give you a cradle which is you know the usable part of it",
    "start": "1722240",
    "end": "1729200"
  },
  {
    "text": "um that you're gonna ship to um to the victim side and um I'm going to specify the name of",
    "start": "1729200",
    "end": "1736940"
  },
  {
    "text": "that section where the loader is going to look uh for um for it's for the section it needs to",
    "start": "1736940",
    "end": "1743840"
  },
  {
    "text": "get the payload out or whatnot and then some of the other features of that of",
    "start": "1743840",
    "end": "1749419"
  },
  {
    "text": "that loader is that it has a way to mine the keys out of the section to decrypt",
    "start": "1749419",
    "end": "1755600"
  },
  {
    "text": "the payload itself and so one of the uh things that we've done here is we're saying okay well go ahead and uh use a",
    "start": "1755600",
    "end": "1763159"
  },
  {
    "text": "another section really the key the keys uh had a block is going to be and then I'll give you a key for it right so we",
    "start": "1763159",
    "end": "1770840"
  },
  {
    "text": "can play with uh metal on top above your station on top of mining your own keys",
    "start": "1770840",
    "end": "1776000"
  },
  {
    "text": "out of the block right so just uh just an example what we had to do for for that engagement to be able to do that",
    "start": "1776000",
    "end": "1782600"
  },
  {
    "text": "once this is done uh we can we can actually launch oh yeah so we're seeing",
    "start": "1782600",
    "end": "1788899"
  },
  {
    "text": "that the there are different options there's memfd or if you want to do user exact if you want to background the",
    "start": "1788899",
    "end": "1795500"
  },
  {
    "text": "execution or if you want to change the name in the process table or uh whatever the case may be you you should be able",
    "start": "1795500",
    "end": "1801860"
  },
  {
    "text": "to do that um and also last but not least is to you you can pass arguments to your payload",
    "start": "1801860",
    "end": "1808039"
  },
  {
    "text": "so for example payload may have some variables that it needs to have and the loader should be able to uh to kind of",
    "start": "1808039",
    "end": "1813799"
  },
  {
    "text": "do that for um for it so let's see how we can actually execute",
    "start": "1813799",
    "end": "1820399"
  },
  {
    "text": "that",
    "start": "1820399",
    "end": "1822640"
  },
  {
    "text": "right so we're specifying the key that the loader is going to look at a bunch of debugging information don't pay",
    "start": "1826340",
    "end": "1832100"
  },
  {
    "text": "attention but essentially that's what happens user exec loads the the elf",
    "start": "1832100",
    "end": "1838820"
  },
  {
    "text": "section that is being found right and then we go back to our our",
    "start": "1838820",
    "end": "1844340"
  },
  {
    "text": "callback and we're seeing the session session here it is a full-fledged session right we can do anything we want",
    "start": "1844340",
    "end": "1850760"
  },
  {
    "text": "in it uh the payload came from from completely unknown binary that gets",
    "start": "1850760",
    "end": "1856039"
  },
  {
    "text": "docked to the loader and just to kind of show that it doesn't only get created",
    "start": "1856039",
    "end": "1861559"
  },
  {
    "text": "but you can actually run commands through it right but the Curious part about it after this",
    "start": "1861559",
    "end": "1867260"
  },
  {
    "text": "is done right is we're going to repeat the exercise but this time the exercise is going to be geared towards how you",
    "start": "1867260",
    "end": "1875600"
  },
  {
    "text": "detect and what you see on the back end so clean it all up um start it back up",
    "start": "1875600",
    "end": "1881179"
  },
  {
    "text": "and let's let's just look at the detection so the detection part",
    "start": "1881179",
    "end": "1886220"
  },
  {
    "text": "um first of all let's look at BPF Trace in here we have a configuration file where we say rudimentary things like",
    "start": "1886220",
    "end": "1893600"
  },
  {
    "text": "Center exact center um uh exit an MFD and whatever the case may",
    "start": "1893600",
    "end": "1899720"
  },
  {
    "text": "be and just basically say hey give me a flag where I detect something on a",
    "start": "1899720",
    "end": "1905899"
  },
  {
    "text": "system when that happens so BPF Trace is is I I think is a",
    "start": "1905899",
    "end": "1911600"
  },
  {
    "text": "breakthrough I think it's very useful but we obviously need to work around that",
    "start": "1911600",
    "end": "1917419"
  },
  {
    "text": "to deploy BPF Trace it's a it's a super user capability you would have to have",
    "start": "1917419",
    "end": "1923000"
  },
  {
    "text": "um on on the system you would do it obviously as a um as an admin or as a security",
    "start": "1923000",
    "end": "1929539"
  },
  {
    "text": "personnel um and we'll repeat the same exercise only this time we're going back to how",
    "start": "1929539",
    "end": "1936320"
  },
  {
    "text": "detection happens so my tmac session is a little bit in",
    "start": "1936320",
    "end": "1942440"
  },
  {
    "text": "the mix here um here we uh do the bundling again",
    "start": "1942440",
    "end": "1947480"
  },
  {
    "text": "um to be able to to see how obviously the assist exact happens because we are executing the shell command and then",
    "start": "1947480",
    "end": "1954500"
  },
  {
    "text": "we're launching the the the loader uh or the Cradle which is a",
    "start": "1954500",
    "end": "1959960"
  },
  {
    "text": "loader with with Doc section and uh the only thing that we see after that is uh",
    "start": "1959960",
    "end": "1965480"
  },
  {
    "text": "as far as CIS enter like a system call which is supposed to execute something some payload we don't know what it is it",
    "start": "1965480",
    "end": "1971779"
  },
  {
    "text": "doesn't have HTTP callback it doesn't have any network traffic all it does it has hostname and that's unfortunately is",
    "start": "1971779",
    "end": "1977480"
  },
  {
    "text": "a courtesy of metal itself there's not much you can do unless you can clean up metal itself and and uh get rid of that",
    "start": "1977480",
    "end": "1984620"
  },
  {
    "text": "but I believe it's done so you can actually connect to something and you have again you have a session",
    "start": "1984620",
    "end": "1991039"
  },
  {
    "text": "um only now BPF tradition doesn't see the HTTP callbacks or anything like that",
    "start": "1991039",
    "end": "1996100"
  },
  {
    "text": "innocuous uh host name call right Yara uh similar uh tracing only now you",
    "start": "1996100",
    "end": "2005019"
  },
  {
    "text": "have a code that should be able to do it at the static site uh and you say okay well let me go",
    "start": "2005019",
    "end": "2011980"
  },
  {
    "text": "through all my executables on the entire system dump SSG nodes for example or",
    "start": "2011980",
    "end": "2017679"
  },
  {
    "text": "maybe dump some other sections and see what what I can get from there right",
    "start": "2017679",
    "end": "2022779"
  },
  {
    "text": "because now as a Defender you should be able to worry about the sizes of your",
    "start": "2022779",
    "end": "2028059"
  },
  {
    "text": "sections what type of thing is in there and whether it's sht node or not and why",
    "start": "2028059",
    "end": "2034120"
  },
  {
    "text": "SSG node is in this executable and why is it why there are more than one right",
    "start": "2034120",
    "end": "2039700"
  },
  {
    "text": "so you really need to kind of go through and uh and see that so not obviously not",
    "start": "2039700",
    "end": "2044799"
  },
  {
    "text": "a lot of uh environments are instrumented against that at the moment so we can Live Another Day right if you",
    "start": "2044799",
    "end": "2051220"
  },
  {
    "text": "will but as you can see SSG node is uh is is really a large where the payload",
    "start": "2051220",
    "end": "2057760"
  },
  {
    "text": "is it's um it's not very good Yara you know has API interface and um Defenders",
    "start": "2057760",
    "end": "2065618"
  },
  {
    "text": "can go through and uh detect it um through their tools",
    "start": "2065619",
    "end": "2072700"
  },
  {
    "text": "so that's basically what lpac elf back uh",
    "start": "2072700",
    "end": "2078638"
  },
  {
    "text": "does so the takeaways the takeaways are help",
    "start": "2078639",
    "end": "2086260"
  },
  {
    "text": "suction docking lives in a gray area between fully static compilation of your",
    "start": "2086260",
    "end": "2093280"
  },
  {
    "text": "payloads into your loaders right and allows you as an operator malware writer",
    "start": "2093280",
    "end": "2099760"
  },
  {
    "text": "to be able to kind of stretch your lifespan depending which environment you're you're in",
    "start": "2099760",
    "end": "2106300"
  },
  {
    "text": "because it gives you more flexibility if you have more flexibility on the dynamic side you now get more flexibility on the",
    "start": "2106300",
    "end": "2113260"
  },
  {
    "text": "static side yet you may achieve dormancy you may work in air-gapped environments",
    "start": "2113260",
    "end": "2119020"
  },
  {
    "text": "if you want right with some variable because you can have multiple payloads stage in different sections and you can",
    "start": "2119020",
    "end": "2125440"
  },
  {
    "text": "kind of call whichever you want elf Duncan achieves ABI not API",
    "start": "2125440",
    "end": "2131200"
  },
  {
    "text": "compatibility because elf is the common denominator what we're working with",
    "start": "2131200",
    "end": "2136720"
  },
  {
    "text": "uh so no API changes happens unless elf changes which you know it's been on version one for 30",
    "start": "2136720",
    "end": "2144160"
  },
  {
    "text": "plus years um and um you know elf docking overcomes",
    "start": "2144160",
    "end": "2149260"
  },
  {
    "text": "uh uh Packers in memory so you can bring your impact you can bring your Frozen uh",
    "start": "2149260",
    "end": "2157240"
  },
  {
    "text": "interpreters if you will right like Ruby or whatever the case may be and uh you",
    "start": "2157240",
    "end": "2163000"
  },
  {
    "text": "do not have to uncompress you do not have to have any kind of header and you don't have to have tmpfs to be able to",
    "start": "2163000",
    "end": "2169660"
  },
  {
    "text": "do that from the defensive perspective we've shown what uh what defense can do",
    "start": "2169660",
    "end": "2176619"
  },
  {
    "text": "how they can do both an aesthetic side Dynamic side and uh you know",
    "start": "2176619",
    "end": "2182760"
  },
  {
    "text": "kind of say that that's a new way of of bringing them malware into into the",
    "start": "2182760",
    "end": "2188680"
  },
  {
    "text": "environment and create tools against that but the offense obviously can work further to do deeper packing do",
    "start": "2188680",
    "end": "2195940"
  },
  {
    "text": "encryption as we've done here and uh we can use the concept of factories to",
    "start": "2195940",
    "end": "2201280"
  },
  {
    "text": "basically borrow cradles borrow different segments of different executables to continue living in the um",
    "start": "2201280",
    "end": "2208480"
  },
  {
    "text": "in in the victim's land so we've got three minutes left uh I can",
    "start": "2208480",
    "end": "2214780"
  },
  {
    "text": "take some questions and here's the code for the proof of concept um you guys can you know it's it's MIT",
    "start": "2214780",
    "end": "2221200"
  },
  {
    "text": "you can uh extend it play with it submit bugs right",
    "start": "2221200",
    "end": "2228839"
  },
  {
    "text": "and I'll take questions if any [Music]",
    "start": "2229060",
    "end": "2237150"
  },
  {
    "text": "cool thank you very much I'll be available outside or you know if anybody has questions offline I'll be able to",
    "start": "2239320",
    "end": "2246040"
  },
  {
    "text": "answer thank you very much for coming [Applause] [Music]",
    "start": "2246040",
    "end": "2251740"
  },
  {
    "text": "foreign [Music]",
    "start": "2251740",
    "end": "2259599"
  }
]