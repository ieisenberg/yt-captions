[
  {
    "start": "0",
    "end": "82000"
  },
  {
    "text": "good morning everyone we're going to get started um welcome to capturing zero days exploits with perfectly placed",
    "start": "80",
    "end": "6600"
  },
  {
    "text": "Hardware traps you are in the Jasmine ballroom and this presentation is by Cody Pierce Matt SPAC and Kenneth Fitch",
    "start": "6600",
    "end": "14480"
  },
  {
    "text": "um before we begin a few brief notes um please stop by the business Hall located",
    "start": "14480",
    "end": "19520"
  },
  {
    "text": "in Bayside AB during the day and for the welcome reception um from 5:30 to 9:",
    "start": "19520",
    "end": "27080"
  },
  {
    "text": "tonight the black hat Arsenal is on in the Palm foyer on level three and join",
    "start": "27080",
    "end": "33480"
  },
  {
    "text": "us for the pony Awards in manderlay Bay BCD at 6:30 thanks for putting your",
    "start": "33480",
    "end": "39320"
  },
  {
    "text": "phones on vibrate it makes it easier for the rest of us to ignore the ringing while you're waiting for your voicemail",
    "start": "39320",
    "end": "44559"
  },
  {
    "text": "to pick it up and with that let's get started",
    "start": "44559",
    "end": "50760"
  },
  {
    "text": "hello guess get this mic straight uh good morning everybody um as she",
    "start": "50760",
    "end": "56840"
  },
  {
    "text": "introduced us um we're going to be talking about capturing zero day exploits with perfectly placed Hardware",
    "start": "56840",
    "end": "62160"
  },
  {
    "text": "traps it's kind of a mouthful but uh we're going to step through all of it and um you know walk through it um I'm",
    "start": "62160",
    "end": "69280"
  },
  {
    "text": "Cody Pierce I'm a director of vulnerability research at ingame and um with me presenting with me are Matt",
    "start": "69280",
    "end": "75360"
  },
  {
    "text": "speac and Kenneth Fitch who are also vulnerability researchers at ingame and uh let's let's Dive Right",
    "start": "75360",
    "end": "81960"
  },
  {
    "text": "In so you know we're going to be talking about two main things and that's hardware assisted control flow integrity",
    "start": "81960",
    "end": "88880"
  },
  {
    "text": "and they kind of work in independently but we're going to combine them throughout the talk to show you that our research comes out with um some pretty",
    "start": "88880",
    "end": "96479"
  },
  {
    "text": "strong detection um but um I'm going to just kind of introduce some of the",
    "start": "96479",
    "end": "101840"
  },
  {
    "text": "topics at a high level and these guys are going to really drill down into the technical aspect of it um so first to",
    "start": "101840",
    "end": "107680"
  },
  {
    "start": "107000",
    "end": "187000"
  },
  {
    "text": "kind of set the stage on on where we started with our research and why we uh went down this path um as exploit",
    "start": "107680",
    "end": "115000"
  },
  {
    "text": "writers and is is having a lot of experience in exploitation and vulnerability research we know that um",
    "start": "115000",
    "end": "121119"
  },
  {
    "text": "exploitation is uh increasingly more sophisticated it's very Dynamic like all",
    "start": "121119",
    "end": "126280"
  },
  {
    "text": "of security um it's um inherently creative and so that's one of the maybe",
    "start": "126280",
    "end": "132040"
  },
  {
    "text": "differences in in vulnerabilities and exploitation that it's hard to plan for the creativity of an exploit Rider or an",
    "start": "132040",
    "end": "139280"
  },
  {
    "text": "exploit in something like the security development life cycle where you can model you can um you know you can",
    "start": "139280",
    "end": "145280"
  },
  {
    "text": "validate and verify um you can do a good job of doing code reviews and things of that nature but it's very hard to kind",
    "start": "145280",
    "end": "150440"
  },
  {
    "text": "of flip that and say how would I exploit this bug if if I found it or if someone else found it and um we think that kind",
    "start": "150440",
    "end": "156959"
  },
  {
    "text": "of adds to the dynamic nature of exploitation and why it's it's interesting and why it's also hard to uh",
    "start": "156959",
    "end": "163959"
  },
  {
    "text": "provide defenses and protections for it and uh finally you know as far as um an",
    "start": "163959",
    "end": "170560"
  },
  {
    "text": "attacker first a Defender a well- financed um attacker with zero days that",
    "start": "170560",
    "end": "176440"
  },
  {
    "text": "is um advanced in exploitation is a very very hard adversary because of uh how",
    "start": "176440",
    "end": "182080"
  },
  {
    "text": "much leverage and and how much control they might have over the program that you're trying to",
    "start": "182080",
    "end": "187159"
  },
  {
    "start": "187000",
    "end": "328000"
  },
  {
    "text": "defend so this is kind of something I came up with to demonstrate that you know we have kill chains we have all",
    "start": "187159",
    "end": "193239"
  },
  {
    "text": "these stages of of persistence and whatnot it actually happens in in exploitation as well there's different",
    "start": "193239",
    "end": "199640"
  },
  {
    "text": "phases so as an exploit begins it goes through these phases and finally ends in",
    "start": "199640",
    "end": "204840"
  },
  {
    "text": "uh persistence or uh you know back door malware actually being put to disc or memory executed and so this is to",
    "start": "204840",
    "end": "212080"
  },
  {
    "text": "illuminate really what um we kind of see is under the hood at a high level what happens in an exploit and an exploit as",
    "start": "212080",
    "end": "218480"
  },
  {
    "text": "it runs um so you have these three areas um I'm not going to talk too much about pre- exploitation I find it incredibly",
    "start": "218480",
    "end": "226000"
  },
  {
    "text": "difficult to try to defend on the pre- exploitation side because things like software identification are uh they",
    "start": "226000",
    "end": "231599"
  },
  {
    "text": "happen so often that your false positive rates are going to be um extremely high",
    "start": "231599",
    "end": "236720"
  },
  {
    "text": "so the final two is the exploitation phase where you know this is the point when the attacker um is really going from maybe",
    "start": "236720",
    "end": "244959"
  },
  {
    "text": "benign to uh malicious or starting to overtake the program and their exploit",
    "start": "244959",
    "end": "250120"
  },
  {
    "text": "is really starting to uh groom the Heap starting to prepare to trigger a vulnerability trigger that defeat aslr",
    "start": "250120",
    "end": "258040"
  },
  {
    "text": "leak memory um and then you know the bottom one is code execution so they've",
    "start": "258040",
    "end": "263120"
  },
  {
    "text": "they've prepped the environment they're about to execute their payload um whether that's a r chain or whatever",
    "start": "263120",
    "end": "270199"
  },
  {
    "text": "and that takes us to the post exploitation stage and that's where you have return oriented programming you have your payload executing uh Coe is",
    "start": "270199",
    "end": "277639"
  },
  {
    "text": "something that that that we call a continuation of execution where they repair the process so it doesn't crash",
    "start": "277639",
    "end": "283400"
  },
  {
    "text": "and alert a user and then persistence and persistence is is starting to really get into malware um and and you know",
    "start": "283400",
    "end": "290039"
  },
  {
    "text": "looking for PE and executables and stuff and and so for what we're going to be talking about and where we think there's",
    "start": "290039",
    "end": "295400"
  },
  {
    "text": "a lot of strength is going towards this exportation phase and specifically code execution and uh Matt will dig into the",
    "start": "295400",
    "end": "302639"
  },
  {
    "text": "details of of what that looks like but basically what we're saying is um we want to really stick to uh early",
    "start": "302639",
    "end": "310199"
  },
  {
    "text": "detection and detection at this layer because it gives us uh we still maintain The High Ground um as far as a Defender",
    "start": "310199",
    "end": "317560"
  },
  {
    "text": "when it comes to exploitation uh we we'll show a little bit later that once you get into return oriented programming",
    "start": "317560",
    "end": "323080"
  },
  {
    "text": "payload execution you've you're kind of fighting on the same ground as as an as an attacker so I'm going to some of the",
    "start": "323080",
    "end": "330039"
  },
  {
    "start": "328000",
    "end": "336000"
  },
  {
    "text": "highle concepts that we'll be talking about first one is the hardware assistance piece to ours",
    "start": "330039",
    "end": "335639"
  },
  {
    "text": "um there's a couple of things we're going to be using that are are are in the microarchitecture of the processor",
    "start": "335639",
    "end": "342039"
  },
  {
    "text": "and um these are to highlight kind of what we'll be digging into a little bit um obviously we have the CPU core",
    "start": "342039",
    "end": "347360"
  },
  {
    "text": "everybody's familiar with we're going to talk about the performance monitoring unit which gives us the perfectly placed",
    "start": "347360",
    "end": "353280"
  },
  {
    "text": "trap portion of our uh of our long title and um the branch prediction unit so the",
    "start": "353280",
    "end": "359520"
  },
  {
    "start": "359000",
    "end": "460000"
  },
  {
    "text": "the first thing to really go over at a high level is the performance monitoring unit this is um a unit in the",
    "start": "359520",
    "end": "364720"
  },
  {
    "text": "architecture that is historically been designed for debugging optimization uh",
    "start": "364720",
    "end": "370360"
  },
  {
    "text": "to get performance events out of a running system and they're they're very low level there's dozens and dozens of",
    "start": "370360",
    "end": "376520"
  },
  {
    "text": "them and what developers do is they're able to measure how their program executes um whether how many you know uh",
    "start": "376520",
    "end": "384240"
  },
  {
    "text": "cash flushes things of that nature so that they can go back and and fine-tune these things but and this is a slide which is",
    "start": "384240",
    "end": "391800"
  },
  {
    "text": "some of them again there's there's dozens uh clock cycles and and whatnot um and you can refer to the Intel manual",
    "start": "391800",
    "end": "398039"
  },
  {
    "text": "if you want to really really get crazy with them but what what we're really kind of basing our inspiration off of is",
    "start": "398039",
    "end": "404319"
  },
  {
    "text": "a performance monitoring unit as a security device and and no longer just a device for developers to optimize code",
    "start": "404319",
    "end": "411199"
  },
  {
    "text": "and this is some of the prior art and prior research that was really inspiring to us that came up with a novel idea of",
    "start": "411199",
    "end": "417520"
  },
  {
    "text": "using the performance monitoring unit as a security tool for certain things and this first one um was the first one we",
    "start": "417520",
    "end": "425199"
  },
  {
    "text": "could kind of find that that started to put these uh building blocks in place and uh they built upon that uh and some",
    "start": "425199",
    "end": "431240"
  },
  {
    "text": "followon research and then over the last uh few years people have been kind of getting more into this uh using",
    "start": "431240",
    "end": "437360"
  },
  {
    "text": "different Hardware features for exploit prevention um K bouncer is a really popular one Microsoft hosted at a blue",
    "start": "437360",
    "end": "443840"
  },
  {
    "text": "hat prize and they won the the top prize for that and then uh the next one that was a um and a thread talk but you know",
    "start": "443840",
    "end": "452280"
  },
  {
    "text": "then these are focused more on the the r side of things but again you know this kind of got us really pumped about the idea and what we could do with it as a",
    "start": "452280",
    "end": "458960"
  },
  {
    "text": "security device so the next one to talk about is the branch prediction unit um",
    "start": "458960",
    "end": "464199"
  },
  {
    "start": "460000",
    "end": "536000"
  },
  {
    "text": "the branch prediction unit is another uh another feature just like um the",
    "start": "464199",
    "end": "469639"
  },
  {
    "text": "performance monitoring unit this one's a lot more opaque and it's not available to program or to really touch in fact",
    "start": "469639",
    "end": "475400"
  },
  {
    "text": "it's it's kind of a black box uh but the purpose of it is to predict",
    "start": "475400",
    "end": "481440"
  },
  {
    "text": "branches and um again back to just making systems more performant Intel AMD",
    "start": "481440",
    "end": "487919"
  },
  {
    "text": "all of those all those people with these highly um you know multicores multi-",
    "start": "487919",
    "end": "493680"
  },
  {
    "text": "threads um all these things need to make the systems more and more efficient just to get the most out of them and so the",
    "start": "493680",
    "end": "499360"
  },
  {
    "text": "branch prediction unit is is a a fairly large part of that and what it does is it just it makes the pipelining of",
    "start": "499360",
    "end": "504759"
  },
  {
    "text": "instructions more efficient so anytime you have a execution on multiple process processors you have to Cache",
    "start": "504759",
    "end": "511159"
  },
  {
    "text": "instructions or your performance is terrible and so what the branch prediction unit is will try to pre-cache",
    "start": "511159",
    "end": "516360"
  },
  {
    "text": "instructions so that when a branch happens which can be 20% of code in in in a C++ application um it's already",
    "start": "516360",
    "end": "523599"
  },
  {
    "text": "predicted it it's already pumped that Pipeline and it's ready to go if it Mis predicts it flushes the cach and it's",
    "start": "523599",
    "end": "529480"
  },
  {
    "text": "it's a really bad performance thing so again it's kind of a it's kind of a black box and uh so I've",
    "start": "529480",
    "end": "537399"
  },
  {
    "start": "536000",
    "end": "584000"
  },
  {
    "text": "included um a little more about it two fully symmetric integer units that's",
    "start": "537399",
    "end": "542440"
  },
  {
    "text": "twice the G4 two load and store units twice the G4 and massive Branch",
    "start": "542440",
    "end": "548480"
  },
  {
    "text": "prediction logic which I don't know what it does predicts branches I don't know",
    "start": "548480",
    "end": "554540"
  },
  {
    "text": "[Music] but it's a good",
    "start": "554540",
    "end": "559600"
  },
  {
    "text": "thing that's how we felt about it trying to dig into Intel manuals and it's it's good to know Steve Jobs uh said it much",
    "start": "559600",
    "end": "566120"
  },
  {
    "text": "better than I could have um so all of these kind of work concert right like we're we're using Hardware features but",
    "start": "566120",
    "end": "572240"
  },
  {
    "text": "there's so many Hardware features that we're using and it's all uh the purpose of the next piece but um again these",
    "start": "572240",
    "end": "578920"
  },
  {
    "text": "guys will go into technical detail so um you know just to represent the system here and then you know the next piece is",
    "start": "578920",
    "end": "586360"
  },
  {
    "start": "584000",
    "end": "659000"
  },
  {
    "text": "control flow Integrity so if we have the hardware piece the control flow Integrity is kind of the software piece",
    "start": "586360",
    "end": "592000"
  },
  {
    "text": "and and what we want to do with control flow Integrity just some background is it's to enforce legitimate control flow",
    "start": "592000",
    "end": "597920"
  },
  {
    "text": "and it's traditionally done with compiler instrumentation um there's many",
    "start": "597920",
    "end": "603760"
  },
  {
    "text": "different policies that you can enforce and control flow Integrity but the basic idea is you want to just validate all",
    "start": "603760",
    "end": "609800"
  },
  {
    "text": "control flow um it's a side effect of exploits that that we see all the time um and it's a constant theme so it's a",
    "start": "609800",
    "end": "615880"
  },
  {
    "text": "great place to try to build up a defense there to do detection and prevention so in normal without control",
    "start": "615880",
    "end": "623160"
  },
  {
    "text": "flow Integrity um you'll have a control flow transfer jump to a destination and",
    "start": "623160",
    "end": "629160"
  },
  {
    "text": "an exploit writer the destination is all a virtual memory that's executable so you know there's it's just there's no",
    "start": "629160",
    "end": "634399"
  },
  {
    "text": "limitation on what they can call in a lot of cases and that's where they really get the creativity and what CFI",
    "start": "634399",
    "end": "640360"
  },
  {
    "text": "hopes to do is enforce a policy um so when there is a a control flow change",
    "start": "640360",
    "end": "646120"
  },
  {
    "text": "there's a policy that checks that it's valid and if it is it continues and if it's not you have an opportunity as a",
    "start": "646120",
    "end": "651519"
  },
  {
    "text": "Defender to do something about it and that may be terminate alert or or whatnot dump memory things of that",
    "start": "651519",
    "end": "658040"
  },
  {
    "text": "nature and so there's a lot of CFI implementations uh you know it's not a",
    "start": "658040",
    "end": "663240"
  },
  {
    "start": "659000",
    "end": "767000"
  },
  {
    "text": "New Concept it's been in in uh academic research for a long time vendors are starting to really kind of push on on",
    "start": "663240",
    "end": "669240"
  },
  {
    "text": "doing uh control flow implementations uh some that you may have heard of is control flow Guard from",
    "start": "669240",
    "end": "675160"
  },
  {
    "text": "Microsoft uh Intel just released a specification hope hoping to get some support on their control flow",
    "start": "675160",
    "end": "680720"
  },
  {
    "text": "enforcement technology and then uh the pxs team are always coming out with really great uh mitigations and",
    "start": "680720",
    "end": "686560"
  },
  {
    "text": "preventions uh are doing it as well so so they you know with their indirect control transfer protection uh they're",
    "start": "686560",
    "end": "692920"
  },
  {
    "text": "able to enforce some some CFI policies but what we kind of where we started our research is we we knew that there was",
    "start": "692920",
    "end": "699399"
  },
  {
    "text": "kind of a gap right these uh all require recompilation uh most of them require",
    "start": "699399",
    "end": "704600"
  },
  {
    "text": "new software new kernels in the latest operating system so for instance control flow guard is is is uh much better on",
    "start": "704600",
    "end": "711920"
  },
  {
    "text": "Windows 10 um or or it was when it came out and some of these are not",
    "start": "711920",
    "end": "717240"
  },
  {
    "text": "crossplatform so we found this this is a really green field for us to do some research that would kind of elevate this",
    "start": "717240",
    "end": "723279"
  },
  {
    "text": "into into a dynamic runtime CFI uh using these Hardware features so some of the",
    "start": "723279",
    "end": "729560"
  },
  {
    "text": "the the parameters we set out with were to not have access to source code to be",
    "start": "729560",
    "end": "734920"
  },
  {
    "text": "crossplatform to Support 32 and 64-bit um and no pre-processing of",
    "start": "734920",
    "end": "740680"
  },
  {
    "text": "binaries a lot of the research wants to do something called control FL flow graph reconstruction and it's a really",
    "start": "740680",
    "end": "746680"
  },
  {
    "text": "hard problem so it's it's kind of better to not try to do that it doesn't scale well um and then not be specific to",
    "start": "746680",
    "end": "754000"
  },
  {
    "text": "certain bug classes or exploit techniques like R and finally uh since",
    "start": "754000",
    "end": "759120"
  },
  {
    "text": "we were using Hardware features and we didn't want the overhead to be something that was unusable uh in the real",
    "start": "759120",
    "end": "767160"
  },
  {
    "start": "767000",
    "end": "808000"
  },
  {
    "text": "world and finally before we get into the details of all this um I I wanted to",
    "start": "767160",
    "end": "772480"
  },
  {
    "text": "talk about real world verification uh we're we're huge fans of using real exploits real software um and just as",
    "start": "772480",
    "end": "780360"
  },
  {
    "text": "much data as we can get there's an incredibly Rich amount of data in the exploit world that we can Harvest to",
    "start": "780360",
    "end": "785800"
  },
  {
    "text": "actually test some of these ideas as we begin to research them and prove them out and uh Kenneth will get into some of",
    "start": "785800",
    "end": "791600"
  },
  {
    "text": "that but these are some of the areas where we drew from uh cyber Grand Challenge publishes all of their",
    "start": "791600",
    "end": "797160"
  },
  {
    "text": "exploits um and all their vulnerable programs so uh you can check them out there uh research Community like project",
    "start": "797160",
    "end": "803720"
  },
  {
    "text": "zero all great great resources to test out these types of things so with that",
    "start": "803720",
    "end": "809560"
  },
  {
    "start": "808000",
    "end": "822000"
  },
  {
    "text": "um I'll get over to Matt who's going to get into the details of",
    "start": "809560",
    "end": "814480"
  },
  {
    "text": "CFI all right yes so I'm going to talk about uh kind of our overall uh the",
    "start": "817040",
    "end": "822120"
  },
  {
    "start": "822000",
    "end": "955000"
  },
  {
    "text": "overall approach to our research and it kind of stems from the main hypothesis that you know a hijacked uh indirect",
    "start": "822120",
    "end": "829120"
  },
  {
    "text": "branch is almost always going to be mispredicted by the branch prediction unit you know since the the branch",
    "start": "829120",
    "end": "834399"
  },
  {
    "text": "prediction unit is built largely on kind of a branch history and so the fact that",
    "start": "834399",
    "end": "839759"
  },
  {
    "text": "this call site is now jumping to some new address is is you know going to be",
    "start": "839759",
    "end": "845920"
  },
  {
    "text": "mispredicted and so that was kind of um you know the the hypothesis we we were",
    "start": "845920",
    "end": "852240"
  },
  {
    "text": "focused on and uh a lot of the prior art has been focused more on on r as Cody",
    "start": "852240",
    "end": "857560"
  },
  {
    "text": "mentioned and so we instead wanted to focus on uh on validating the uh the",
    "start": "857560",
    "end": "863160"
  },
  {
    "text": "non- return indirect branches so you know you could have an indirect jump an indirect call uh and we'll get into that",
    "start": "863160",
    "end": "869839"
  },
  {
    "text": "in a little bit but kind of the overall approach we we went with was um we're going to use the pmu to trap um every",
    "start": "869839",
    "end": "878440"
  },
  {
    "text": "single time a mispredicted indirect call occurs and then use our interrupt",
    "start": "878440",
    "end": "883639"
  },
  {
    "text": "service routine to make the decision whether the branch is valid or not and so um and we we started out working with",
    "start": "883639",
    "end": "891560"
  },
  {
    "text": "with Linux 64 bit just because it's much easier to work on Linux um and so kind of a",
    "start": "891560",
    "end": "900440"
  },
  {
    "text": "visual highle picture of the same same thing and we'll step through each of",
    "start": "900440",
    "end": "906399"
  },
  {
    "text": "these but we've we're using the hardware assisted piece the pmu is giving us that call back at these strategic times our",
    "start": "906399",
    "end": "912440"
  },
  {
    "text": "interrupt service routine is going to do some sort of analysis and then we'll ignore the the user mode part because",
    "start": "912440",
    "end": "919639"
  },
  {
    "text": "we're going to get into that but if you're like us one of your kind of first questions might be you isn't this going",
    "start": "919639",
    "end": "925279"
  },
  {
    "text": "to be very expensive you're interrupting all these mispredicted branches and so",
    "start": "925279",
    "end": "932000"
  },
  {
    "text": "um and through our research we found that it's it's not not as bad as as we",
    "start": "932000",
    "end": "937199"
  },
  {
    "text": "initially thought and you know with with uh Branch prediction unit um becoming",
    "start": "937199",
    "end": "943839"
  },
  {
    "text": "improving through each generation of of the Intel's microarchitecture there's sort of a direct correlation there",
    "start": "943839",
    "end": "950120"
  },
  {
    "text": "between um how many Mis predicts and and what the overhead would be but hopefully you'll see in the slides uh that that",
    "start": "950120",
    "end": "957959"
  },
  {
    "start": "955000",
    "end": "1003000"
  },
  {
    "text": "overhead is not not not that bad and kind of another way to think about it if you compare some of these different CFI",
    "start": "957959",
    "end": "963759"
  },
  {
    "text": "approaches there's obviously pros and cons to everything Cody noted we we did not want to require recompilation of",
    "start": "963759",
    "end": "971319"
  },
  {
    "text": "source code but kind of a different way to think about it is that all of these approaches have overhead even if you're",
    "start": "971319",
    "end": "977240"
  },
  {
    "text": "compiling in 10 instructions to validate some sort of call uh that's 10 added",
    "start": "977240",
    "end": "982800"
  },
  {
    "text": "instructions and since we're using mispredicted branches that's only going to be a subset a fraction of of times at",
    "start": "982800",
    "end": "990240"
  },
  {
    "text": "that call site whereas with a a compiled in or patched in CFI that that added",
    "start": "990240",
    "end": "996399"
  },
  {
    "text": "overhead is going to be applied every single time um that call site is is",
    "start": "996399",
    "end": "1002680"
  },
  {
    "text": "invoked but so walking through each of these uh so with respect to the pmu there's been a lot of great uh talks uh",
    "start": "1002680",
    "end": "1009759"
  },
  {
    "start": "1003000",
    "end": "1032000"
  },
  {
    "text": "threads a couple years ago Black Cat last year which really highlighted you how to how to write code to control the",
    "start": "1009759",
    "end": "1016199"
  },
  {
    "text": "pmu so we're not going to go into that but how a high level there's you know a handful of model specific registers that",
    "start": "1016199",
    "end": "1021480"
  },
  {
    "text": "you need in order to configure and access the counters and and enable interrupts and clear",
    "start": "1021480",
    "end": "1027480"
  },
  {
    "text": "interupts uh but the Intel manual is also a great great reference for for the",
    "start": "1027480",
    "end": "1032600"
  },
  {
    "start": "1032000",
    "end": "1078000"
  },
  {
    "text": "pmu as far as uh indirect indirect branches there's a couple that that jump",
    "start": "1032600",
    "end": "1038438"
  },
  {
    "text": "out in the manual there's uh branches mispredicted retired and and branches",
    "start": "1038439",
    "end": "1043558"
  },
  {
    "text": "mispredicted uh executed um the main difference is the uh the the retired one",
    "start": "1043559",
    "end": "1049240"
  },
  {
    "text": "is a little bit more precise so we opted uh for that um that particular event",
    "start": "1049240",
    "end": "1055200"
  },
  {
    "text": "because more precise means fewer interrupts which means better better",
    "start": "1055200",
    "end": "1060600"
  },
  {
    "text": "performance [Music] sure uh so so the the next part then is",
    "start": "1060600",
    "end": "1067240"
  },
  {
    "text": "our uh our interrupt service routine which is kind of kind of making making",
    "start": "1067240",
    "end": "1072919"
  },
  {
    "text": "the uh the decision or you know doing something once these interrupts occur",
    "start": "1072919",
    "end": "1079120"
  },
  {
    "start": "1078000",
    "end": "1145000"
  },
  {
    "text": "and so to kind of if you're not familiar with the pmu I you might you know",
    "start": "1079120",
    "end": "1085039"
  },
  {
    "text": "visualizing how this all work sometimes is useful but we see we've got some some assembly here and in the left left hand",
    "start": "1085039",
    "end": "1091360"
  },
  {
    "text": "column we've got our counter value which we've set at minus one each time the counter overflows that's when the uh the",
    "start": "1091360",
    "end": "1097640"
  },
  {
    "text": "interrupt will be delivered and so in an Ideal World here we're counting indirect mispredicted indirect calls and we see",
    "start": "1097640",
    "end": "1104200"
  },
  {
    "text": "this indirect call occurs the counter overflows the interrupts uh delay and then our ISR could just grab the saved",
    "start": "1104200",
    "end": "1111520"
  },
  {
    "text": "instruction pointer from the the thread that was interrupted the problem is that's not how it works uh all the time so",
    "start": "1111520",
    "end": "1119320"
  },
  {
    "text": "something called interrupt instruction skid can occur where um Bas you and it",
    "start": "1119320",
    "end": "1125000"
  },
  {
    "text": "can be highly dependent on you know what what's going on in the system uh but as well as where the event where the the",
    "start": "1125000",
    "end": "1132000"
  },
  {
    "text": "Overflow occurs in the instruction pipeline but what you'll often see is is",
    "start": "1132000",
    "end": "1137120"
  },
  {
    "text": "the counter overflows and then some number of instructions later the interrupt will finally be delivered and",
    "start": "1137120",
    "end": "1142360"
  },
  {
    "text": "so because of this we can't just uh we can't just use the the saved instruction",
    "start": "1142360",
    "end": "1147480"
  },
  {
    "text": "planner because there's no guarantee that that saved instruction planner was actually the branch destination uh for",
    "start": "1147480",
    "end": "1153520"
  },
  {
    "text": "the the indirect call that was just mispredicted and uh so the bottom line is we we need a more precise way uh to",
    "start": "1153520",
    "end": "1160480"
  },
  {
    "text": "get that that Branch Target address and that's where the Intel's last Branch recording comes into play and the lbr is",
    "start": "1160480",
    "end": "1167480"
  },
  {
    "text": "kind of the you know main main focus of the K balancer uh paper that Cody",
    "start": "1167480",
    "end": "1172679"
  },
  {
    "text": "mentioned and same with with M with the pmu the lbr is controlled and accessed through a handful of of",
    "start": "1172679",
    "end": "1179200"
  },
  {
    "text": "msrs a couple you know the lbr is a circular stack that just logs the the",
    "start": "1179200",
    "end": "1184640"
  },
  {
    "text": "most recent branches and a couple of the msrs to note the uh lbr select allows",
    "start": "1184640",
    "end": "1189919"
  },
  {
    "text": "you to control what type of branches are logged uh and the uh the top of Stack",
    "start": "1189919",
    "end": "1195520"
  },
  {
    "text": "gives you the offset into into the lbr register so you know which the which was the actual last branch that",
    "start": "1195520",
    "end": "1202159"
  },
  {
    "text": "occurred and so with that lbr select MSR uh I've highlighted highlighted the bits",
    "start": "1202159",
    "end": "1208600"
  },
  {
    "text": "here that that we can set to zero so that we can basically tell the ALB to Only log branches indirect calls that",
    "start": "1208600",
    "end": "1216880"
  },
  {
    "text": "occur in user mode um and then interestingly in the",
    "start": "1216880",
    "end": "1222559"
  },
  {
    "text": "the lbr registers from the actual from and two addresses in the from we can we",
    "start": "1222559",
    "end": "1227679"
  },
  {
    "text": "see this mispredicted bit um which we can use to sort of validate that yeah the branch was actually mispredicted",
    "start": "1227679",
    "end": "1234960"
  },
  {
    "text": "because we found that on occasion you'll get a a mispredicted branch and either",
    "start": "1234960",
    "end": "1240480"
  },
  {
    "text": "the branch wasn't actually mispredicted or it wasn't wasn't logged to the lbr because it wasn't uh the appropriate",
    "start": "1240480",
    "end": "1246120"
  },
  {
    "text": "call type so once we we add the lbr then we can we can take care of this",
    "start": "1246120",
    "end": "1251200"
  },
  {
    "text": "instruction skit issue so the next time we see this you know some number of instructions pass the entry point tofu",
    "start": "1251200",
    "end": "1258840"
  },
  {
    "text": "here uh we finally get our interrupt delivered and our ISR can then just read",
    "start": "1258840",
    "end": "1264120"
  },
  {
    "text": "the top of the stack off the lbr we see this entry jumping from 107 to Fu the",
    "start": "1264120",
    "end": "1270600"
  },
  {
    "text": "address of Fu and then we can take that address and apply our CFI policy whatever that may be uh you know to",
    "start": "1270600",
    "end": "1277360"
  },
  {
    "text": "validate the destination so at this point we had a system uh in place that could basically trap and and capture the",
    "start": "1277360",
    "end": "1284400"
  },
  {
    "text": "the branches that that were mispredicted so what do we do with that data so our first our first iteration we basically",
    "start": "1284400",
    "end": "1290600"
  },
  {
    "text": "just piped all of these branches to user space and dumped them into a big pile of of branches and then so that we could",
    "start": "1290600",
    "end": "1296760"
  },
  {
    "text": "kind of postprocess the data and uh we we really wanted to work with with",
    "start": "1296760",
    "end": "1304080"
  },
  {
    "start": "1299000",
    "end": "1344000"
  },
  {
    "text": "real world data so kind of our first our first success was we we took one of the Cyber Grand Challenge samples uh this",
    "start": "1304080",
    "end": "1309840"
  },
  {
    "text": "was a this particular sample was a use after free and we profiled our system on",
    "start": "1309840",
    "end": "1316240"
  },
  {
    "text": "this this uh particular program and we can see at the end this mispredicted",
    "start": "1316240",
    "end": "1321279"
  },
  {
    "text": "branch which actually denotes the Hijacked Call we can see it trying to jump to 414141 and so from there you",
    "start": "1321279",
    "end": "1327360"
  },
  {
    "text": "know we can look up and see the the the assembly for from the from address to",
    "start": "1327360",
    "end": "1333000"
  },
  {
    "text": "see what the call was and and the appropriate source code but the bottom line here for us was this was kind of a",
    "start": "1333000",
    "end": "1338799"
  },
  {
    "text": "validation that um you know we're we're moving down the right path um so from",
    "start": "1338799",
    "end": "1344400"
  },
  {
    "start": "1344000",
    "end": "1421000"
  },
  {
    "text": "there we wanted to work with with uh a little bit more real world data so we uh",
    "start": "1344400",
    "end": "1349520"
  },
  {
    "text": "we chose an ex a uh proof of concept exploit for a flashbug uh from Chris",
    "start": "1349520",
    "end": "1355720"
  },
  {
    "text": "Evans and uh at the time we were working with Linux 64-bit and this particular PC worked uh quite well on on 64-bit Linux",
    "start": "1355720",
    "end": "1364200"
  },
  {
    "text": "so we we went through the same procedure we uh profiled Chrome captured all the",
    "start": "1364200",
    "end": "1369640"
  },
  {
    "text": "mispredicted indirect calls but then when we kind of looked through the data we didn't see the hijack showing up and",
    "start": "1369640",
    "end": "1376120"
  },
  {
    "text": "as it turns out the reason was as you can see uh his his particular trigger was on right fights which uh actually resulted",
    "start": "1376120",
    "end": "1383080"
  },
  {
    "text": "in an indirect jump being mispredicted and so this kind of",
    "start": "1383080",
    "end": "1389080"
  },
  {
    "text": "uh inspired us to to uh explore a couple things so",
    "start": "1389080",
    "end": "1394159"
  },
  {
    "text": "first uh we we kind of rewrote the POC to instead hijack uh different virtual",
    "start": "1394159",
    "end": "1400559"
  },
  {
    "text": "functions for the B object uh and then this basically gave us two things one it",
    "start": "1400559",
    "end": "1405799"
  },
  {
    "text": "gave us a bunch of unique data data points so one vulnerability 16 data points of unique call site hijacks but",
    "start": "1405799",
    "end": "1413080"
  },
  {
    "text": "it also kind of gave us some insight into you know how often are we going to deal with an indirect jumping hijack",
    "start": "1413080",
    "end": "1419279"
  },
  {
    "text": "versus a call um and so from there we became kind of curious on uh just in general so we applied some",
    "start": "1419279",
    "end": "1427799"
  },
  {
    "text": "Ida python processing to some popular binaries on Windows and Linux that would you would think would be uh where a lot",
    "start": "1427799",
    "end": "1435159"
  },
  {
    "text": "of call site or uh control flow hijacks would originate from uh JavaScript Flash",
    "start": "1435159",
    "end": "1442200"
  },
  {
    "text": "binaries and as as we found um you know indirect jumps are a little bit more prevalent on Windows I mean I'm sorry on",
    "start": "1442200",
    "end": "1450279"
  },
  {
    "text": "Linux and uh that that really you know",
    "start": "1450279",
    "end": "1455720"
  },
  {
    "text": "we do need to consider indirect jumps uh as a potential hijack a call site in",
    "start": "1455720",
    "end": "1461039"
  },
  {
    "text": "this particular talk we're just going to be talking about indirect calls but we thought it was kind of kind of",
    "start": "1461039",
    "end": "1467399"
  },
  {
    "text": "interesting um to kind of plot that data so now we had a system where we",
    "start": "1467399",
    "end": "1474279"
  },
  {
    "start": "1470000",
    "end": "1564000"
  },
  {
    "text": "were capturing these mispredicted branches storing them and kind of postprocessing them to to see if whether",
    "start": "1474279",
    "end": "1481600"
  },
  {
    "text": "our hijacked uh call was was collected or not and so this is where we decided",
    "start": "1481600",
    "end": "1489679"
  },
  {
    "text": "can we do this in in real time um and sort of query some sort of weight list",
    "start": "1489679",
    "end": "1495440"
  },
  {
    "text": "and decide whether the the branch just ination is is a bran a branch destination that should occur from a",
    "start": "1495440",
    "end": "1501559"
  },
  {
    "text": "from a uh indirect call site and so we used Firefox with the dromeo JavaScript",
    "start": "1501559",
    "end": "1507480"
  },
  {
    "text": "Benchmark to generate a ton of of data so we had like 160 some million branches",
    "start": "1507480",
    "end": "1514039"
  },
  {
    "text": "and we basically iterated on that data over and over until we could sort of categorize every Branch um and so what",
    "start": "1514039",
    "end": "1520440"
  },
  {
    "text": "we came up with was about 2third of that data came from uh functions that you",
    "start": "1520440",
    "end": "1526159"
  },
  {
    "text": "could find in the uh relocation section um which should be expected from an indirect call um we saw",
    "start": "1526159",
    "end": "1534039"
  },
  {
    "text": "some from exports uh some some Branch data that wasn't actually a mispredicted",
    "start": "1534039",
    "end": "1539559"
  },
  {
    "text": "branch and then something we call callbacks which are basically code pointers that are being passed in as",
    "start": "1539559",
    "end": "1544919"
  },
  {
    "text": "arguments to to another function and then finally a chunk of of branches that are going to to a jit code page because",
    "start": "1544919",
    "end": "1552200"
  },
  {
    "text": "this is Javascript uh but the important thing here was that we were able to basically take 16 7 million branches and Whittle",
    "start": "1552200",
    "end": "1559080"
  },
  {
    "text": "it down to zero that we couldn't account for and so from there we we uh decided",
    "start": "1559080",
    "end": "1565159"
  },
  {
    "start": "1564000",
    "end": "1579000"
  },
  {
    "text": "to try to do this in real time so in the kernel we would build this white list and every time a mispredicted indirect",
    "start": "1565159",
    "end": "1571600"
  },
  {
    "text": "call occurred we would validate the the uh destination address to make sure it was a legit",
    "start": "1571600",
    "end": "1579360"
  },
  {
    "start": "1579000",
    "end": "1607000"
  },
  {
    "text": "destination and so basically our our Whit list generation each time a new image is loaded into a process we're",
    "start": "1579360",
    "end": "1585440"
  },
  {
    "text": "protecting uh we we want to find all code pointer addresses uh present in that that image so scanning relocations",
    "start": "1585440",
    "end": "1592960"
  },
  {
    "text": "exports the the call backs I was referring to and uh where a code pointer is basically some sort of uh address",
    "start": "1592960",
    "end": "1600320"
  },
  {
    "text": "that's pointing into the text section um and uh so once we had the system in",
    "start": "1600320",
    "end": "1606320"
  },
  {
    "text": "place uh um you know we we were uh pretty satisfied with the results on",
    "start": "1606320",
    "end": "1612279"
  },
  {
    "text": "Linux but um Kenny's going to come up and talk about some of the uh headaches",
    "start": "1612279",
    "end": "1617640"
  },
  {
    "text": "we encountered when we tried to move to to uh Windows",
    "start": "1617640",
    "end": "1623080"
  },
  {
    "text": "64bit thanks yeah so that now that Matt's uh covered some of the uh cover our",
    "start": "1624200",
    "end": "1630760"
  },
  {
    "text": "methodology pretty much uh I'm going to talk about some of the particular implementation challenges we had when we tried to take this technique and make it",
    "start": "1630760",
    "end": "1637080"
  },
  {
    "text": "into a workable prototype and I'm really going to highlight three basic things uh receiving the PM pmu interrupts and then",
    "start": "1637080",
    "end": "1643960"
  },
  {
    "text": "clearing them once we've received them and the issue of thread tracking which turn to be a pretty big deal for",
    "start": "1643960",
    "end": "1649520"
  },
  {
    "text": "us um so receiving P interrupts on Windows requires registering with the",
    "start": "1649520",
    "end": "1655360"
  },
  {
    "text": "interrupt controller to get to to have our Handler be called when the interrupt happens and we knew that we could modify",
    "start": "1655360",
    "end": "1661200"
  },
  {
    "text": "the IDT directly but we also knew that on at least 64-bit Windows patch guard was not going to like that and going to",
    "start": "1661200",
    "end": "1666960"
  },
  {
    "text": "block us so we did a little digging and we found a uh mostly undocumented",
    "start": "1666960",
    "end": "1672120"
  },
  {
    "text": "current routine in how dll called help set system information and if you pass",
    "start": "1672120",
    "end": "1677559"
  },
  {
    "text": "an information class of how profile Source interrupt Handler into it it actually has an internal really nice uh",
    "start": "1677559",
    "end": "1684559"
  },
  {
    "text": "mechanism for registering a call back specifically for performance interrupts and uh there it's reachable through how",
    "start": "1684559",
    "end": "1690640"
  },
  {
    "text": "dispatch table so there's a reliable way to get to that that unexported function and here's just a little code",
    "start": "1690640",
    "end": "1696760"
  },
  {
    "start": "1694000",
    "end": "1703000"
  },
  {
    "text": "snippet of what that looks like um I'm not going to dig into it but it's really just a basic call back",
    "start": "1696760",
    "end": "1702919"
  },
  {
    "start": "1703000",
    "end": "1715000"
  },
  {
    "text": "registration um and here's some examples of how you would use it it's very simple you just create buffer passing your",
    "start": "1703240",
    "end": "1708799"
  },
  {
    "text": "function pointer to the function and it registers it and then deregistering is the same",
    "start": "1708799",
    "end": "1714760"
  },
  {
    "start": "1715000",
    "end": "1742000"
  },
  {
    "text": "thing um so once we started this we were able to register the interrupt we were",
    "start": "1715159",
    "end": "1720519"
  },
  {
    "text": "getting uh Branch Miss prediction interrupts uh correctly in our Handler but we got one the first time and we",
    "start": "1720519",
    "end": "1726960"
  },
  {
    "text": "realized that we actually have to clear the interrupt and tell the interrupt controller that we had received it and",
    "start": "1726960",
    "end": "1732720"
  },
  {
    "text": "to continue receiving interrupts in the future and it turned out this was a little bit tricky it required some work",
    "start": "1732720",
    "end": "1738240"
  },
  {
    "text": "and some research to figure out how to do it correctly um specifically because",
    "start": "1738240",
    "end": "1743559"
  },
  {
    "start": "1742000",
    "end": "1790000"
  },
  {
    "text": "there are two different interfaces the Intel is defined XA pick and x2a pick and which one is used by Windows depends",
    "start": "1743559",
    "end": "1750279"
  },
  {
    "text": "on both their availability and which version of Windows you're running so for xap it's been around a long time pennium",
    "start": "1750279",
    "end": "1756159"
  },
  {
    "text": "4 um and it's the default on Windows 7 and the registers in the apic are access",
    "start": "1756159",
    "end": "1762559"
  },
  {
    "text": "through physical memory so uh we were required to map that physical memory into the virtual dress space so we can",
    "start": "1762559",
    "end": "1768640"
  },
  {
    "text": "use it and we used mm map biospace to do that and wrote to it and that was a little bit of work to get that working",
    "start": "1768640",
    "end": "1774760"
  },
  {
    "text": "uh X2 apic which is fairly new and is used on Windows 8 through 10 uh actually",
    "start": "1774760",
    "end": "1779840"
  },
  {
    "text": "was really easy it uses msrs and to uh to talk to the interrupt controller so",
    "start": "1779840",
    "end": "1785320"
  },
  {
    "text": "uh that was pretty trivial we just do a right MSR call to do it and to do the same thing on Linux for",
    "start": "1785320",
    "end": "1792640"
  },
  {
    "start": "1790000",
    "end": "1808000"
  },
  {
    "text": "comparison was trivial there's a call uh register nmi Handler in the Linux",
    "start": "1792640",
    "end": "1797679"
  },
  {
    "text": "Colonel that lets you register it and deregister it and it was really straightforward this is actually the",
    "start": "1797679",
    "end": "1803159"
  },
  {
    "text": "first one we did and I took us maybe a day or two to",
    "start": "1803159",
    "end": "1808519"
  },
  {
    "start": "1808000",
    "end": "1837000"
  },
  {
    "text": "do and uh the last major issue and the one we spent most of our time on was the idea of thread tracking so the pmu",
    "start": "1808840",
    "end": "1815760"
  },
  {
    "text": "doesn't have any awareness of threads on the system or process context it's always running until you turn it off and",
    "start": "1815760",
    "end": "1822399"
  },
  {
    "text": "that didn't work for us we don't want to monitor the entire system all the time we only want to monitor certain key threads like uh browsers and office",
    "start": "1822399",
    "end": "1830159"
  },
  {
    "text": "applications things like that um so we needed a way to limit our monitoring to just particular",
    "start": "1830159",
    "end": "1837399"
  },
  {
    "start": "1837000",
    "end": "1870000"
  },
  {
    "text": "processes and on Windows it wasn't straightforward at all we actually spent quite a bit of time on trying to come up",
    "start": "1837399",
    "end": "1843000"
  },
  {
    "text": "with a solution for this um there's no explicit mechanism in Windows to say hey",
    "start": "1843000",
    "end": "1848679"
  },
  {
    "text": "let me know when a a context switch happens and a new thread gets put onto a processor or when that that Contex",
    "start": "1848679",
    "end": "1855120"
  },
  {
    "text": "switch uh is ended or when the the thread goes off of the processor um so",
    "start": "1855120",
    "end": "1861080"
  },
  {
    "text": "that was a major problem we have no way of knowing when that is happening and we had to have a way to trct the threads as",
    "start": "1861080",
    "end": "1866919"
  },
  {
    "text": "they were being shifted in and out uh so the eventual approach we we",
    "start": "1866919",
    "end": "1873399"
  },
  {
    "start": "1870000",
    "end": "1928000"
  },
  {
    "text": "came to uh use this asynchronous procedure call so according to Microsoft when an APC is cued to a thread system",
    "start": "1873399",
    "end": "1879279"
  },
  {
    "text": "ISS to software interrupt the next time the thread is scheduled it will run the APC function so in other words it's",
    "start": "1879279",
    "end": "1884799"
  },
  {
    "text": "essentially a queue of functions that get executed at first availability which turns out to be when the contact switch",
    "start": "1884799",
    "end": "1890559"
  },
  {
    "text": "happens and the thread gets scheduled for the processor so that was perfect that's that was exactly what we looking for it's a basically a call back to to",
    "start": "1890559",
    "end": "1898679"
  },
  {
    "text": "let us know when the contact switch happens but it turns out it wasn't quite that simple um we don't want to track",
    "start": "1898679",
    "end": "1905399"
  },
  {
    "text": "all the threads on the system to know when they get swapped out we really don't want to know when the ones we care about happen and there was no way to",
    "start": "1905399",
    "end": "1912159"
  },
  {
    "text": "know when the thread gets swapped out as opposed to in and also is a secondary",
    "start": "1912159",
    "end": "1917919"
  },
  {
    "text": "difficulty if you try to register an APC Handler from inside an APC Handler for",
    "start": "1917919",
    "end": "1923559"
  },
  {
    "text": "the current threat it goes into an infinite Loop and locks everything up uh so the final solution we arrived",
    "start": "1923559",
    "end": "1930799"
  },
  {
    "start": "1928000",
    "end": "1964000"
  },
  {
    "text": "at was to schedule kernel APC for every thread that we want to track and then we configure the pmu to trap all the",
    "start": "1930799",
    "end": "1936799"
  },
  {
    "text": "mispredicted branches when that contact switch happens and we continue to monitor we continue to apply our",
    "start": "1936799",
    "end": "1943399"
  },
  {
    "text": "protections until we see an interrupt for the wrong thread and at that point we know that our our original thread has",
    "start": "1943399",
    "end": "1948720"
  },
  {
    "text": "been swapped out we can turn off the pmu stop monitoring and make sure that the APC is rescheduled for the for the",
    "start": "1948720",
    "end": "1955080"
  },
  {
    "text": "process we care about and uh so when it comes back in we'll know and continue",
    "start": "1955080",
    "end": "1960159"
  },
  {
    "text": "doing that uh until we don't want to answer anymore and this is a a diagram of how",
    "start": "1960159",
    "end": "1967279"
  },
  {
    "start": "1964000",
    "end": "1992000"
  },
  {
    "text": "it works it's a little dense but basically uh the yellow lines of the apcs that are happening the blocks are",
    "start": "1967279",
    "end": "1972440"
  },
  {
    "text": "the different thread or thread Quantum that are happening on the processor and the uh the vertical lines uh are the",
    "start": "1972440",
    "end": "1979360"
  },
  {
    "text": "interrupts that occur so the red ones are when like for if we see an interrupt for Cal then we don't care we",
    "start": "1979360",
    "end": "1986279"
  },
  {
    "text": "immediately stop monitoring turn off the pmu and wait for a new APC to",
    "start": "1986279",
    "end": "1992559"
  },
  {
    "start": "1992000",
    "end": "2015000"
  },
  {
    "text": "happen and to contrast again for Linux this was pretty trivial uh it was nice",
    "start": "1992559",
    "end": "1998159"
  },
  {
    "text": "enough to give us uh registrations for callbacks when something gets scheduled in or scheduled out so and compared to",
    "start": "1998159",
    "end": "2005840"
  },
  {
    "text": "the uh hours and hours and hours of work on Windows this was just a matter of a little bit of work on lenux and we were",
    "start": "2005840",
    "end": "2012720"
  },
  {
    "text": "pretty happy about that uh so so the second section I'm",
    "start": "2012720",
    "end": "2018320"
  },
  {
    "start": "2015000",
    "end": "2145000"
  },
  {
    "text": "going to talk about are the results uh specifically what was the performance overhead and what was the actual",
    "start": "2018320",
    "end": "2024279"
  },
  {
    "text": "efficacy of this how did how did it do in detecting exploits so as Matt mentioned earlier uh",
    "start": "2024279",
    "end": "2031880"
  },
  {
    "text": "we expected to get a lot of interrupts one for every mispredicted branch that happens uh we weren't it initially",
    "start": "2031880",
    "end": "2037440"
  },
  {
    "text": "weren't sure how many that was going to be or what kind of overhead it was going to generate for the processor when we were doing",
    "start": "2037440",
    "end": "2043159"
  },
  {
    "text": "it and there was also you know the small APC overhead for the monitoring uh switching on and off and we didn't even",
    "start": "2043159",
    "end": "2050520"
  },
  {
    "text": "know if this was going to be feasible at first so we did some testing and uh the main result we saw",
    "start": "2050520",
    "end": "2056480"
  },
  {
    "text": "from the testing was that as the micro architecture progressed uh our our",
    "start": "2056480",
    "end": "2061560"
  },
  {
    "text": "theory is that the branch Miss prediction unit gets better so the interrupts uh went down over time with",
    "start": "2061560",
    "end": "2067200"
  },
  {
    "text": "different microarchitectures so with Sandy bridge and iy Bridge they're about the same this is for one run of Google's octane",
    "start": "2067200",
    "end": "2074240"
  },
  {
    "text": "JavaScript Benchmark so it saw between 13 and 14 million interrupts over uh",
    "start": "2074240",
    "end": "2080358"
  },
  {
    "text": "maybe 15 20 seconds and Haswell and Skylake went down",
    "start": "2080359",
    "end": "2086878"
  },
  {
    "text": "considerably so uh the end result of the all the performance testing we ran out",
    "start": "2087040",
    "end": "2092800"
  },
  {
    "text": "PassMark and Google octane under Internet Explorer and we chose met is sort of the industry standard uh",
    "start": "2092800",
    "end": "2099560"
  },
  {
    "text": "protection uh product that was sort of comparable to what we were doing just to see what an acceptable level overhead",
    "start": "2099560",
    "end": "2105920"
  },
  {
    "text": "was We compare ourselves to and for PassMark we saw about a 99% overhead for",
    "start": "2105920",
    "end": "2112440"
  },
  {
    "text": "hcfi and EM was about 3% that's about what we expected and for octane we were",
    "start": "2112440",
    "end": "2117880"
  },
  {
    "text": "about 7% EMT was 20% and we were a little surprised by that but the conclusion we've drawn is that uh the",
    "start": "2117880",
    "end": "2126000"
  },
  {
    "text": "interrupts uh really the the way the monitoring happens is different so it",
    "start": "2126000",
    "end": "2131440"
  },
  {
    "text": "varies widely uh between what different applications or code you're running in the application so the the performance",
    "start": "2131440",
    "end": "2138599"
  },
  {
    "text": "overhead shifts depending on what you're doing considerably um but generally we see it about 10% or less um and",
    "start": "2138599",
    "end": "2147200"
  },
  {
    "start": "2145000",
    "end": "2171000"
  },
  {
    "text": "subjectively uh we run this on our own systems on our browsers and office applications and things and we really",
    "start": "2147200",
    "end": "2153520"
  },
  {
    "text": "don't know it's any system slow down it's perfectly eable we can stream video and uh do pretty much anything we",
    "start": "2153520",
    "end": "2160280"
  },
  {
    "text": "want uh so now that we knew that was the performance was acceptable and we could actually use this we needed to test to",
    "start": "2160280",
    "end": "2167480"
  },
  {
    "text": "see how it actually performed against exploits so we went to metlo we grabbed a handful of a metas modules and tested",
    "start": "2167480",
    "end": "2174839"
  },
  {
    "start": "2171000",
    "end": "2208000"
  },
  {
    "text": "them and after just a little bit of tweaking we found that we detected 100% of the modules which was awesome but",
    "start": "2174839",
    "end": "2183160"
  },
  {
    "text": "we decided that testing as displ wasn't really a good test because a lot of the",
    "start": "2183160",
    "end": "2189000"
  },
  {
    "text": "mplay modules share a similar method of exploitation and what we really wanted because of the way this CFI works is a",
    "start": "2189000",
    "end": "2197240"
  },
  {
    "text": "diversity of techniques instead of exploits we don't we don't care about the vly as much as how it's exploited so",
    "start": "2197240",
    "end": "2203200"
  },
  {
    "text": "we went to virus total and we started collecting some samples uh and we we sort of decided",
    "start": "2203200",
    "end": "2211040"
  },
  {
    "start": "2208000",
    "end": "2228000"
  },
  {
    "text": "somewhat arbitrarily to focus on exploit kit so we pulled uh 48 different virus samples from 7 differ exploit kits and",
    "start": "2211040",
    "end": "2218400"
  },
  {
    "text": "that was about 20 unique cves for for those 48 samples and uh we ran a test an",
    "start": "2218400",
    "end": "2224119"
  },
  {
    "text": "automated test bed to test CFI against all of them and we also uh did a little",
    "start": "2224119",
    "end": "2230560"
  },
  {
    "start": "2228000",
    "end": "2315000"
  },
  {
    "text": "analysis on each sample we bend them into three different techniques uh General categories ones that used R ones",
    "start": "2230560",
    "end": "2239040"
  },
  {
    "text": "that used a what we're calling a ro plus technique a which is a it's a flash",
    "start": "2239040",
    "end": "2244400"
  },
  {
    "text": "exploitation technique that uses a wrapper of V protect to Mark shoko's xq W jump to it so it's not a traditional",
    "start": "2244400",
    "end": "2250599"
  },
  {
    "text": "Rob exploit a technique B which is very similar but it uses uh method apply and",
    "start": "2250599",
    "end": "2255920"
  },
  {
    "text": "action script uh it was pioneered by fatalia toropov um and Cody's going to go into a",
    "start": "2255920",
    "end": "2262359"
  },
  {
    "text": "little more detail with case studies on how these work later so the final",
    "start": "2262359",
    "end": "2268040"
  },
  {
    "text": "detection Matrix we um were able to detect 95% of R which is 37 37 of the 48",
    "start": "2268040",
    "end": "2275200"
  },
  {
    "text": "samples we tested we had one technique a sample which we detected and 10",
    "start": "2275200",
    "end": "2280280"
  },
  {
    "text": "technique B which we detected 100% too and EMT did fantastic get Ro but it",
    "start": "2280280",
    "end": "2285680"
  },
  {
    "text": "didn't detect any of the roess techniques and the same data split by",
    "start": "2285680",
    "end": "2291720"
  },
  {
    "text": "bug class um we had more or less 100% uh for some of the other ones it the 80 we",
    "start": "2291720",
    "end": "2297800"
  },
  {
    "text": "had 83.3% and that was really more of a the the exploit exploitation technique",
    "start": "2297800",
    "end": "2303079"
  },
  {
    "text": "instead of the actual vulnerability and uh I think the takeaway from this is that the",
    "start": "2303079",
    "end": "2308640"
  },
  {
    "text": "vulnerability doesn't matter for this technique it's really what happens after the vulnerability has been",
    "start": "2308640",
    "end": "2314880"
  },
  {
    "text": "triggered and uh now I'm going to turn over to Cody to go over some case [Music]",
    "start": "2314880",
    "end": "2324560"
  },
  {
    "start": "2315000",
    "end": "2359000"
  },
  {
    "text": "studies cool thanks um yeah we're just going to walk through a couple of case studies uh real quickly so we have time",
    "start": "2324560",
    "end": "2331599"
  },
  {
    "text": "for questions and whatnot but this is again when we look at Rob and and Kenny mentioned roess um A and B these are",
    "start": "2331599",
    "end": "2339599"
  },
  {
    "text": "things that we're seeing trending over the last two years that are becoming more prevalent than than the traditional",
    "start": "2339599",
    "end": "2344640"
  },
  {
    "text": "rot based exploitation techniques and it was it was something that we really kind of were shooting for from the beginning",
    "start": "2344640",
    "end": "2349800"
  },
  {
    "text": "to to uh not just stick to to certain uh you know old old uh exploitation",
    "start": "2349800",
    "end": "2355520"
  },
  {
    "text": "techniques and so with the case studies we wanted to kind of Drive dive a little bit deeper um using the first one as a",
    "start": "2355520",
    "end": "2363400"
  },
  {
    "start": "2359000",
    "end": "2445000"
  },
  {
    "text": "classic R technique and you can see from the instruction here um this is a double free and jscript um out of the magnitude",
    "start": "2363400",
    "end": "2371760"
  },
  {
    "text": "exploit kit and this is uh condensed uh of what happens when that exploit starts",
    "start": "2371760",
    "end": "2378560"
  },
  {
    "text": "and if you remember I was talking in the beginning about uh the phases um this",
    "start": "2378560",
    "end": "2383960"
  },
  {
    "text": "top is going to be the initial code execution control flow hijack and then you get into the traditional R Gadget of",
    "start": "2383960",
    "end": "2390960"
  },
  {
    "text": "a stack pivot um and some Coe stuff and then eventually uh virtual protect on",
    "start": "2390960",
    "end": "2397440"
  },
  {
    "text": "the payload uh to to begin that process and with our system um and what we've",
    "start": "2397440",
    "end": "2402839"
  },
  {
    "text": "been discussing we see that when we ran our our testing that that Kenny mentioned we actually detect that branch",
    "start": "2402839",
    "end": "2409560"
  },
  {
    "text": "and so we're able to detect it before uh it gets into the later stages of the exploitation uh",
    "start": "2409560",
    "end": "2416760"
  },
  {
    "text": "phase uh EMT again you know emt's the industry standard it's recommended in the dod it's it's it's it's great um we",
    "start": "2416760",
    "end": "2424520"
  },
  {
    "text": "we use it because it's industry standard but we wanted to show it as a comparison to what we're talking about with more aggressive um early detection and and",
    "start": "2424520",
    "end": "2431240"
  },
  {
    "text": "they pick it up eventually in the virtual protect stub because they're hook based so they're waiting for a call",
    "start": "2431240",
    "end": "2437920"
  },
  {
    "text": "to happen so that they can then instrument we're real-time Dynamic so as soon as a indirect happens we're",
    "start": "2437920",
    "end": "2443839"
  },
  {
    "text": "checking which is is earlier um in our basketball analogy here where we're getting the block but",
    "start": "2443839",
    "end": "2450119"
  },
  {
    "text": "but Tim Duncan as he met uh is is going to get it but he may just be a little bit",
    "start": "2450119",
    "end": "2455319"
  },
  {
    "text": "behind and so then we get into the roess techniques and this is the last case study that we're going to quickly walk",
    "start": "2455319",
    "end": "2460920"
  },
  {
    "start": "2456000",
    "end": "2508000"
  },
  {
    "text": "through but it it highlights that um you know this is a a different bug class it's a heap overflow um it's it's flash",
    "start": "2460920",
    "end": "2469079"
  },
  {
    "text": "it's also found in many exploit kits but they've they're not using RS so they are using a technique that is hard for uh",
    "start": "2469079",
    "end": "2476760"
  },
  {
    "text": "hook based prevention to uh to uh understand and there's two control flow",
    "start": "2476760",
    "end": "2482720"
  },
  {
    "text": "hijacks which we kind of were surprised by but it makes sense when we look at it there's actually a control flow hijack",
    "start": "2482720",
    "end": "2488520"
  },
  {
    "text": "at the very beginning when the bug is triggered but then there's a control flow hijack uh or you know one that we",
    "start": "2488520",
    "end": "2494520"
  },
  {
    "text": "can pick up with uh the jump to payload which is abnormal and it'll be mispredicted by the branch prediction",
    "start": "2494520",
    "end": "2500800"
  },
  {
    "text": "unit and this particular one actually bypasses EMT and uh and some others um",
    "start": "2500800",
    "end": "2506040"
  },
  {
    "text": "so we we thought it would be an interesting one to show and again we go through and demonstrate that that the",
    "start": "2506040",
    "end": "2511920"
  },
  {
    "start": "2508000",
    "end": "2537000"
  },
  {
    "text": "initial control flow hijack is actually um more related to the vulnerability and",
    "start": "2511920",
    "end": "2517000"
  },
  {
    "text": "it is a first step before exploitation actually Begins the the the process where they take over the the application",
    "start": "2517000",
    "end": "2524560"
  },
  {
    "text": "and uh using the performance monitoring unit we actually pick that up and we can enforce our CFI policy and unfortunately",
    "start": "2524560",
    "end": "2533160"
  },
  {
    "text": "um this is sh the second one but unfortunately on this one uh EMT doesn't",
    "start": "2533160",
    "end": "2538359"
  },
  {
    "text": "even pick it up and it completely gets byass so in our analogy here they're they're kind of standing behind um and",
    "start": "2538359",
    "end": "2546319"
  },
  {
    "text": "not getting the block and and again you know this is tongue and cheek we're not really trying to pick on EMT too much",
    "start": "2546319",
    "end": "2551599"
  },
  {
    "text": "but uh we really do believe in in early detection uh for a solid un bypassable",
    "start": "2551599",
    "end": "2557640"
  },
  {
    "text": "or at least a resilient um exploit defense so some future work it's not a",
    "start": "2557640",
    "end": "2562960"
  },
  {
    "start": "2561000",
    "end": "2626000"
  },
  {
    "text": "silver bullet there's no such thing uh there's there's kind of work to be done to really flesh this out hypervisors are",
    "start": "2562960",
    "end": "2569040"
  },
  {
    "text": "are the biggest kind of barrier right now the hypervisors like Zen don't",
    "start": "2569040",
    "end": "2574720"
  },
  {
    "text": "support all the hardware features that we need they support a lot of them uh the big one is lbr and PMI and lbr",
    "start": "2574720",
    "end": "2583000"
  },
  {
    "text": "events so um we did patch Zen I wrote the patch",
    "start": "2583000",
    "end": "2588200"
  },
  {
    "text": "for Zen to implement it but after one minute running it crashed horribly so um",
    "start": "2588200",
    "end": "2593839"
  },
  {
    "text": "it's not an easy one but it is kind of lacking there and then the second one you saw in in Matt's uh pie chart that",
    "start": "2593839",
    "end": "2600839"
  },
  {
    "text": "uh just in time code pages are difficult and the reason that just in time code pages are difficult is because they're",
    "start": "2600839",
    "end": "2606720"
  },
  {
    "text": "unbacked by a module so it's hard to understand if they're legitimate if an attacker has Heap sprayed or something like that and um often times they're",
    "start": "2606720",
    "end": "2613800"
  },
  {
    "text": "just trampoline code so they may be very small uh pieces of instructions and that's a little bit difficult to pick",
    "start": "2613800",
    "end": "2620079"
  },
  {
    "text": "out when you're when you're trying to pick out some um anomalies so um it it more research to be done",
    "start": "2620079",
    "end": "2626359"
  },
  {
    "start": "2626000",
    "end": "2715000"
  },
  {
    "text": "there and finally to wrap um exploit defense is is uh constantly evolving",
    "start": "2626359",
    "end": "2633440"
  },
  {
    "text": "like everything that we're doing in security and so you know we need to get earlier and better prevention and",
    "start": "2633440",
    "end": "2639079"
  },
  {
    "text": "detection strategies and you know we're hoping this research kind of pushes some of that to leverage Hardware uh compile",
    "start": "2639079",
    "end": "2645599"
  },
  {
    "text": "time Solutions are great and and and by all means um it's something we have to do in a secure development perspective",
    "start": "2645599",
    "end": "2651839"
  },
  {
    "text": "but we think there's there's uh room for runtime defenses uh Dynamic defenses things that just enforce CFI uh you know",
    "start": "2651839",
    "end": "2660400"
  },
  {
    "text": "all the time um on branch mispredictions and let's not be so focused on the",
    "start": "2660400",
    "end": "2667400"
  },
  {
    "text": "techniques that we know about today let's think about you know the core issue and and the techniques that might",
    "start": "2667400",
    "end": "2673599"
  },
  {
    "text": "come out later or or you know best case just uh try to cut them off before they",
    "start": "2673599",
    "end": "2679040"
  },
  {
    "text": "even have those opportunities and and kind of finally the uh exploits will continue to look normal uh we see it in",
    "start": "2679040",
    "end": "2685160"
  },
  {
    "text": "malware where they're um starting to use maless uh Cy Administration tools to to",
    "start": "2685160",
    "end": "2691240"
  },
  {
    "text": "ex to uh um you know execute code or whatever and exploits will continue to",
    "start": "2691240",
    "end": "2696720"
  },
  {
    "text": "do the same thing where they continue to use legitimate code and and reuse code",
    "start": "2696720",
    "end": "2701920"
  },
  {
    "text": "so um on Hardware assisted control flow Integrity we're just huge fans of",
    "start": "2701920",
    "end": "2707440"
  },
  {
    "text": "control flow Integrity we're huge fans of Hardware this was our research to try to bridge the two to to make a a",
    "start": "2707440",
    "end": "2713319"
  },
  {
    "text": "real-time defense um and those CFI policies can get as complex as we want them again",
    "start": "2713319",
    "end": "2719160"
  },
  {
    "text": "we're competing with performance so we do have a powerful place in the interrupt service routine to do",
    "start": "2719160",
    "end": "2724400"
  },
  {
    "text": "additional checking um one thing is we don't add code to userland it's all kernel so uh there's there's a lot that",
    "start": "2724400",
    "end": "2730599"
  },
  {
    "text": "we can do there um finally uh before we open up questions just just some thanks",
    "start": "2730599",
    "end": "2735720"
  },
  {
    "text": "um some people in game Aaron lamb uh Gabe landow and Andrea and then caffeine",
    "start": "2735720",
    "end": "2740800"
  },
  {
    "text": "runs a great blog where he breaks down exploit kits and uh we use that information a lot so uh and finally",
    "start": "2740800",
    "end": "2747000"
  },
  {
    "text": "fellow researchers on exploits and uh other vendors working on the problem so we'll take um a few minutes for question",
    "start": "2747000",
    "end": "2755200"
  },
  {
    "text": "four minutes for questions if anybody has",
    "start": "2755200",
    "end": "2758960"
  },
  {
    "text": "them I I couldn't hear can you say that",
    "start": "2763760",
    "end": "2768640"
  },
  {
    "start": "2771000",
    "end": "2814000"
  },
  {
    "text": "again oh yeah false positives you know the false positives happen really when you're doing the uh call site validation",
    "start": "2771200",
    "end": "2778720"
  },
  {
    "text": "and so we've done rigorous testing to basically browse many websites uh you know try as much as we can to be uh",
    "start": "2778720",
    "end": "2785480"
  },
  {
    "text": "normal uh like exercise the application like a user would and many libraries and dlls",
    "start": "2785480",
    "end": "2792040"
  },
  {
    "text": "load and our whel list processing can pick out what's legitimate and then we continue with that and we haven't you",
    "start": "2792040",
    "end": "2798440"
  },
  {
    "text": "know we've seen some false positives but they're they're they're actually surprisingly few and far between so as",
    "start": "2798440",
    "end": "2803599"
  },
  {
    "text": "long as you're able to identify the relocations and the legitimate call sites appropriately for an application",
    "start": "2803599",
    "end": "2809800"
  },
  {
    "text": "uh in all the libraries it's it's it's fairly low what what microc controller",
    "start": "2809800",
    "end": "2816119"
  },
  {
    "start": "2814000",
    "end": "2837000"
  },
  {
    "text": "architectures did you explore specifically I'm interested do you know this your mechanisms would be available on an arm processor yeah actually um",
    "start": "2816119",
    "end": "2824079"
  },
  {
    "text": "thanks for the softball question Matt did a talk at at Recon that he could talk a little bit more um for for a",
    "start": "2824079",
    "end": "2829599"
  },
  {
    "text": "minute or so about using it the performance monitoring unit is on every microarchitecture outside of the really",
    "start": "2829599",
    "end": "2834960"
  },
  {
    "text": "really small um commodity ones yeah so uh yeah you the overall approach applies",
    "start": "2834960",
    "end": "2841920"
  },
  {
    "start": "2837000",
    "end": "2888000"
  },
  {
    "text": "to arm um some of the newer arm V8 ores have uh events in fact focused on",
    "start": "2841920",
    "end": "2848960"
  },
  {
    "text": "mispredicted indirect calls the problem with arm is that it doesn't have a last Branch recording mechanism like Intel so",
    "start": "2848960",
    "end": "2856880"
  },
  {
    "text": "uh you would almost have to tie into one of the uh the trace either the embedded",
    "start": "2856880",
    "end": "2863960"
  },
  {
    "text": "Trace macro cell or program flow Trace if you could somehow combine those two pieces so that because the instruction",
    "start": "2863960",
    "end": "2870640"
  },
  {
    "text": "skid problem also occurs on arm so that uh validating that uh or I should say",
    "start": "2870640",
    "end": "2876520"
  },
  {
    "text": "getting that precise Branch destination is the only kind of Unsolved [Music]",
    "start": "2876520",
    "end": "2883359"
  },
  {
    "text": "problem okay I think that's it thanks everybody there you go",
    "start": "2883359",
    "end": "2890880"
  }
]