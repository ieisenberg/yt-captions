[
  {
    "start": "0",
    "end": "16000"
  },
  {
    "text": "today I'm going to introduce to a very interesting piece of technology which is",
    "start": "0",
    "end": "5970"
  },
  {
    "text": "part which is actually part of Manila Colonel called use the over IP and also",
    "start": "5970",
    "end": "11219"
  },
  {
    "text": "I will show how to exploit it so first",
    "start": "11219",
    "end": "17430"
  },
  {
    "start": "16000",
    "end": "60000"
  },
  {
    "text": "of all a little bit about myself my name is Cigna I work for CloudFlare I'm a",
    "start": "17430",
    "end": "24449"
  },
  {
    "text": "systems engineer there my primary interest are security in crypto I also",
    "start": "24449",
    "end": "30570"
  },
  {
    "text": "like to work on low-level things like Linux kernel different firmware and bias",
    "start": "30570",
    "end": "37980"
  },
  {
    "text": "and other stuff I'm more daughter than a breaker so I know I'm not professional",
    "start": "37980",
    "end": "44300"
  },
  {
    "text": "InfoSec person but you may ask why am i presenting a vulnerability so I usually",
    "start": "44300",
    "end": "49739"
  },
  {
    "text": "try to stay alert if I want to use some kind of a system or a framework I do try to check if it's open source that the",
    "start": "49739",
    "end": "57210"
  },
  {
    "text": "sanity of its implementation so our plan for today is I will briefly describe you",
    "start": "57210",
    "end": "64439"
  },
  {
    "start": "60000",
    "end": "100000"
  },
  {
    "text": "to you what USB over IP is we will then go over how it's implemented in Linux",
    "start": "64439",
    "end": "72680"
  },
  {
    "text": "also I will show briefly show you how to export a USB device over IP network then",
    "start": "72680",
    "end": "80400"
  },
  {
    "text": "we will jump into vulnerable USB IP code in the Linux kernel and we will discuss",
    "start": "80400",
    "end": "86340"
  },
  {
    "text": "potential exploit impacts and lastly I will if you do want to use this",
    "start": "86340",
    "end": "91920"
  },
  {
    "text": "technology I will give you some tips how to make your USB IP setup secure but",
    "start": "91920",
    "end": "99600"
  },
  {
    "text": "first since this vulnerability disclosure you're probably all wondering like am i vulnerable so let's check how",
    "start": "99600",
    "end": "109710"
  },
  {
    "start": "100000",
    "end": "153000"
  },
  {
    "text": "many of you have previously heard about USB IP no-one that's good so probably",
    "start": "109710",
    "end": "118380"
  },
  {
    "text": "you're all are safe so the general rule of thumb is that if you never heard of",
    "start": "118380",
    "end": "124649"
  },
  {
    "text": "the USB or ap and you never use it you're safe if you do use",
    "start": "124649",
    "end": "132569"
  },
  {
    "text": "us VIP but didn't patch your Colonel from last year so sorry did patch your",
    "start": "132569",
    "end": "140099"
  },
  {
    "text": "Colonel from last year you're reasonably safe and if you didn't touch your Linux",
    "start": "140099",
    "end": "145500"
  },
  {
    "text": "kernel from last year so probably you have bigger problems so I cannot help you sorry",
    "start": "145500",
    "end": "152359"
  },
  {
    "text": "what is USB IP so USB basically and it",
    "start": "152359",
    "end": "159389"
  },
  {
    "start": "153000",
    "end": "215000"
  },
  {
    "text": "does what it sounds it should do so it's a framework which allows you to share",
    "start": "159389",
    "end": "165480"
  },
  {
    "text": "devices over the network it's implemented in driver or device agnostic",
    "start": "165480",
    "end": "170760"
  },
  {
    "text": "way it's not implemented for a particular types of USB devices so it works on the lower level and it can",
    "start": "170760",
    "end": "178049"
  },
  {
    "text": "support almost any USB device so it does that by sending your B's over to plain",
    "start": "178049",
    "end": "186120"
  },
  {
    "text": "TCP connections so your B is stands for USB request block it's a basic building",
    "start": "186120",
    "end": "192810"
  },
  {
    "text": "block of the USB protocol the lowest message which is used by all USB devices",
    "start": "192810",
    "end": "198419"
  },
  {
    "text": "and use the host to transmit and receive data and this framework is implemented",
    "start": "198419",
    "end": "205440"
  },
  {
    "text": "for Linux and windows so we will particularly focus on Linux",
    "start": "205440",
    "end": "210510"
  },
  {
    "text": "implementation today because it's interesting from owner ability point of view so this picture shows the basic",
    "start": "210510",
    "end": "218430"
  },
  {
    "start": "215000",
    "end": "295000"
  },
  {
    "text": "architecture of the USD ap framework this slide was taken from the original",
    "start": "218430",
    "end": "225629"
  },
  {
    "text": "project website where you see the link to it sorry no HTTP and so it's the project",
    "start": "225629",
    "end": "235199"
  },
  {
    "text": "website contains very detailed information about the framework also it has references to the original papers of",
    "start": "235199",
    "end": "242189"
  },
  {
    "text": "the authors who design the framework and their design decisions it is important",
    "start": "242189",
    "end": "248849"
  },
  {
    "text": "to understand here the roles in the framework so it's a traditional",
    "start": "248849",
    "end": "254569"
  },
  {
    "text": "client-server architecture so server in USD AP terminology is the site which",
    "start": "254569",
    "end": "261269"
  },
  {
    "text": "actually export USB devices so or serves USB devices so it's a site",
    "start": "261269",
    "end": "267130"
  },
  {
    "text": "where you plug the plug in real physical devices and expose them to the IP",
    "start": "267130",
    "end": "272650"
  },
  {
    "text": "network client on the other hand is a site which imports USB devices so you",
    "start": "272650",
    "end": "281170"
  },
  {
    "text": "don't like anything to the client you just contact the server input the device and the USB API framework ensures that",
    "start": "281170",
    "end": "288250"
  },
  {
    "text": "this device appears to be as it was locally plugged into the client so",
    "start": "288250",
    "end": "296380"
  },
  {
    "start": "295000",
    "end": "499000"
  },
  {
    "text": "particularly Linux here are the components which implement the USB IP so",
    "start": "296380",
    "end": "304120"
  },
  {
    "text": "we see clients and servers there the components are represented in green so on the server side you see a user space",
    "start": "304120",
    "end": "311740"
  },
  {
    "text": "daemon which is called USB IPD and it communicates with two kernel modules",
    "start": "311740",
    "end": "317770"
  },
  {
    "text": "they're called USD AP host and USB IP core on the client side you have the USB",
    "start": "317770",
    "end": "326020"
  },
  {
    "text": "AP client utility in userspace and again two kernel modules one is again US v AP",
    "start": "326020",
    "end": "331510"
  },
  {
    "text": "core and one is virtual host controller interface so it's a virtual USB host",
    "start": "331510",
    "end": "337930"
  },
  {
    "text": "controller USB IP core is like a part of a shared code between clients and",
    "start": "337930",
    "end": "344620"
  },
  {
    "text": "servers so you can think of it as a kernel level library I'm not sure why it's implemented in a separate module",
    "start": "344620",
    "end": "350380"
  },
  {
    "text": "but that's why how it works and on the server side you can see that this subsystem can talk to real USB host",
    "start": "350380",
    "end": "360160"
  },
  {
    "text": "controller driver so the basic process of using USB ap is as follows so imagine",
    "start": "360160",
    "end": "366850"
  },
  {
    "text": "you plug in a real physical device to the server so at some so the server's",
    "start": "366850",
    "end": "372880"
  },
  {
    "text": "real USB host controller enumerate this device and reports to the USB subsystem",
    "start": "372880",
    "end": "379960"
  },
  {
    "text": "of the server that a new device is in the system and Linux will typically try",
    "start": "379960",
    "end": "386979"
  },
  {
    "text": "to load the appropriate device driver to manage this device and that's it so",
    "start": "386979",
    "end": "392710"
  },
  {
    "text": "that's how that that's what happens when you plug in so now at some point you want to expose",
    "start": "392710",
    "end": "399949"
  },
  {
    "text": "this device of the network so what you do is you instruct USDA PD money to send",
    "start": "399949",
    "end": "405800"
  },
  {
    "text": "a comment to the server's USB subsystem you call comment to export the device",
    "start": "405800",
    "end": "412639"
  },
  {
    "text": "and what happens is that USB a piece USB subsystem just attaches the real device",
    "start": "412639",
    "end": "419599"
  },
  {
    "text": "driver and then begins to forward all the data to the USB ap host driver it",
    "start": "419599",
    "end": "428899"
  },
  {
    "text": "means that USB ap hosted rival becomes the device driver on the server for the",
    "start": "428899",
    "end": "434029"
  },
  {
    "text": "this particular USB device so and at this point the device is considered",
    "start": "434029",
    "end": "439610"
  },
  {
    "text": "exportable at some point later a client comes into play so the client contacts",
    "start": "439610",
    "end": "447139"
  },
  {
    "text": "the USB ap server and asks if it can import any device so what happens then",
    "start": "447139",
    "end": "455569"
  },
  {
    "text": "is the USB AP host driver establishes a",
    "start": "455569",
    "end": "461659"
  },
  {
    "text": "logical connection to virtual host controller on the client side and begins",
    "start": "461659",
    "end": "467629"
  },
  {
    "text": "forwarding all your bits there and virtual host controller on the client",
    "start": "467629",
    "end": "473779"
  },
  {
    "text": "side in its turn just injects them to the USB subsystem of the client so and",
    "start": "473779",
    "end": "480529"
  },
  {
    "text": "it reports that as if a new device was plugged in and the same happens as on",
    "start": "480529",
    "end": "487129"
  },
  {
    "text": "the server side so Linux is the subsystem will try to load the appropriate device driver which now",
    "start": "487129",
    "end": "493490"
  },
  {
    "text": "begins to manage the remote device on the server so this is how it typically",
    "start": "493490",
    "end": "501740"
  },
  {
    "start": "499000",
    "end": "681000"
  },
  {
    "text": "looks from the shell we will focus here on the client side of operations because",
    "start": "501740",
    "end": "507529"
  },
  {
    "text": "it's party of particular interest today so imagine you already configured a",
    "start": "507529",
    "end": "512839"
  },
  {
    "text": "server to export one USB device and from clients what you do you have the clients",
    "start": "512839",
    "end": "519318"
  },
  {
    "text": "use VIP utility and you first you request a list of exportable devices",
    "start": "519319",
    "end": "525500"
  },
  {
    "text": "from a particular server so you just send the list command the IP address of the server or hostname",
    "start": "525500",
    "end": "533399"
  },
  {
    "text": "so in this example we see that the server particularly imports one USB",
    "start": "533399",
    "end": "540430"
  },
  {
    "text": "device you can see its properties so you can see vendor ID and Product ID you can",
    "start": "540430",
    "end": "547810"
  },
  {
    "text": "see the physical device path and some other useful information and what is",
    "start": "547810",
    "end": "553660"
  },
  {
    "text": "useful here you see this when 1/1 it's a bus ID and device ID of the device so",
    "start": "553660",
    "end": "560920"
  },
  {
    "text": "you need it later so if you want to import this particular device you execute the clients utility again you",
    "start": "560920",
    "end": "570160"
  },
  {
    "text": "just send the attach command again you send the IP address of the server and",
    "start": "570160",
    "end": "575680"
  },
  {
    "text": "you specify which particular device you want to import so when I originally saw",
    "start": "575680",
    "end": "584769"
  },
  {
    "text": "this my expectation was that the USB IP subsystem in conceptually is very",
    "start": "584769",
    "end": "591550"
  },
  {
    "text": "similar to a typical VPN and in VPN case well both sides have some kind of a",
    "start": "591550",
    "end": "598450"
  },
  {
    "text": "virtual a network interface driver and some user space process attached to it",
    "start": "598450",
    "end": "604480"
  },
  {
    "text": "so on one side the user space process extracts the low-level network packets",
    "start": "604480",
    "end": "610180"
  },
  {
    "text": "from the from the virtual interface forward them to the other side and the other side and just injects them back",
    "start": "610180",
    "end": "619360"
  },
  {
    "text": "into the network stack of the of its for",
    "start": "619360",
    "end": "625720"
  },
  {
    "text": "its network stack here I got interested that on the client side on the server",
    "start": "625720",
    "end": "631839"
  },
  {
    "text": "side we have this daemon which runs in background but on client side we have only the USB AP client utility and we",
    "start": "631839",
    "end": "638800"
  },
  {
    "text": "when you import the device it immediately exit exit so I was wondering",
    "start": "638800",
    "end": "644890"
  },
  {
    "text": "like how does it work internally like does it fork itself or somehow and I",
    "start": "644890",
    "end": "651610"
  },
  {
    "text": "started to search this user space process which talks to the kernel and injects a low-level USB data but",
    "start": "651610",
    "end": "659770"
  },
  {
    "text": "surprisingly I haven't found any so the interesting part here that once",
    "start": "659770",
    "end": "666280"
  },
  {
    "text": "you import the device the appliance utility exits and there is no other processes additional processes are",
    "start": "666280",
    "end": "673240"
  },
  {
    "text": "running in your system and I was like what how did how can it work then then I",
    "start": "673240",
    "end": "682150"
  },
  {
    "start": "681000",
    "end": "770000"
  },
  {
    "text": "start digging into the source code and turns out that the way how it works",
    "start": "682150",
    "end": "687570"
  },
  {
    "text": "really is the following so first when you send the list comment what it",
    "start": "687570",
    "end": "694270"
  },
  {
    "text": "basically does is the client utility open the TCP connection to the server since requests give me the list of",
    "start": "694270",
    "end": "701590"
  },
  {
    "text": "devices the server just sends a reply the client displays the reply and closes",
    "start": "701590",
    "end": "706660"
  },
  {
    "text": "a TCP connection and that's it the interesting part is when you send the",
    "start": "706660",
    "end": "712300"
  },
  {
    "text": "request to import the device so what it does again the client sends imported",
    "start": "712300",
    "end": "719110"
  },
  {
    "text": "quest the server does some plain sanity checks that the device still plugged in",
    "start": "719110",
    "end": "725710"
  },
  {
    "text": "is still exportable and sends a success response to the client and after that",
    "start": "725710",
    "end": "731880"
  },
  {
    "text": "both sides just pass the socket this file descriptor which represents this",
    "start": "731880",
    "end": "737800"
  },
  {
    "text": "TCP connection directly to the kernel and after that the kernel handles all",
    "start": "737800",
    "end": "744550"
  },
  {
    "text": "the network communication so basically the application level protocol for USB",
    "start": "744550",
    "end": "752260"
  },
  {
    "text": "IP is implemented directly in the colonel and colonel is your service which actually sends and receives data",
    "start": "752260",
    "end": "759520"
  },
  {
    "text": "and which is sounded very very scary",
    "start": "759520",
    "end": "764590"
  },
  {
    "text": "so it gets me interested more and I started to check the kernel level implementation which brings us to the",
    "start": "764590",
    "end": "772480"
  },
  {
    "start": "770000",
    "end": "835000"
  },
  {
    "text": "vulnerable USB IP code so to describe it",
    "start": "772480",
    "end": "777490"
  },
  {
    "text": "I will first give a quick introduction to what a USB ap network protocol is so",
    "start": "777490",
    "end": "785590"
  },
  {
    "text": "it's very simple it's a message based protocol on top of playing TCP connection so as most of the protocols",
    "start": "785590",
    "end": "794710"
  },
  {
    "text": "it has Heather and section and a data section so data section contains the your B data",
    "start": "794710",
    "end": "803439"
  },
  {
    "text": "this USB request block data which is being forwarded obviously it has some lengths and like",
    "start": "803439",
    "end": "810490"
  },
  {
    "text": "most of the protocols this length is filled in the header so if you want to",
    "start": "810490",
    "end": "817899"
  },
  {
    "text": "see additional information here is the link to the protocol description it's",
    "start": "817899",
    "end": "823089"
  },
  {
    "text": "part of official Cardinal documentation so the protocol is rather simple it contains I think like 6 or messages in",
    "start": "823089",
    "end": "832300"
  },
  {
    "text": "total so it's very easy to read which brings us to the client side receiving",
    "start": "832300",
    "end": "839470"
  },
  {
    "start": "835000",
    "end": "925000"
  },
  {
    "text": "code so if you strip down all unnecessary part the receiving code",
    "start": "839470",
    "end": "845050"
  },
  {
    "text": "basically both boils down to two basic operation one is parse the header and",
    "start": "845050",
    "end": "851589"
  },
  {
    "text": "the second one is receive the rest of the data from the network if you dive in",
    "start": "851589",
    "end": "858850"
  },
  {
    "text": "into the parcel header function the interesting part here is that it takes",
    "start": "858850",
    "end": "866379"
  },
  {
    "text": "the length from the header and initializes one field in the Yerba data",
    "start": "866379",
    "end": "871569"
  },
  {
    "text": "structure and your B data structure is an internal representation of USB",
    "start": "871569",
    "end": "878199"
  },
  {
    "text": "request block so this data structure is used by the kernel to pass data between",
    "start": "878199",
    "end": "884259"
  },
  {
    "text": "different USB subsystems device drivers and the devices themselves and if you",
    "start": "884259",
    "end": "891279"
  },
  {
    "text": "boil down to receive the network the rest of the data part what you see is",
    "start": "891279",
    "end": "897850"
  },
  {
    "text": "that this value is then used to initialize the local size variable and",
    "start": "897850",
    "end": "903579"
  },
  {
    "text": "then this size variable is used to receive all the rest of the data so",
    "start": "903579",
    "end": "910449"
  },
  {
    "text": "unfortunately there are no checks in between that this size variable the",
    "start": "910449",
    "end": "917769"
  },
  {
    "text": "value of the size variable is actually smaller than the pointer which you'll be",
    "start": "917769",
    "end": "922929"
  },
  {
    "text": "transfer buffer points to so as a result we have",
    "start": "922929",
    "end": "929220"
  },
  {
    "start": "925000",
    "end": "1139000"
  },
  {
    "text": "Colonel chip buffer overflow so basically it is possible to write arbitrary data to your be transfer",
    "start": "929379",
    "end": "938300"
  },
  {
    "text": "buffer and you can always write past the boundary but what is this your B",
    "start": "938300",
    "end": "944300"
  },
  {
    "text": "transfer buffer so as I mentioned is the basic year B structure and the transfer",
    "start": "944300",
    "end": "951230"
  },
  {
    "text": "buffer is usually allocated by the kernel or device drivers so most of the",
    "start": "951230",
    "end": "957410"
  },
  {
    "text": "cases it's allocated from kernel heap so as a result this is a kernel hip exploit",
    "start": "957410",
    "end": "966309"
  },
  {
    "text": "and another interesting point to note that because how USB protocol is",
    "start": "966309",
    "end": "973670"
  },
  {
    "text": "originally designed so in this lowest level USB protocol is always cost the device if you do even receive some data",
    "start": "973670",
    "end": "981829"
  },
  {
    "text": "from the device it's still done by request from the host so this structure",
    "start": "981829",
    "end": "986870"
  },
  {
    "text": "is allocated even before the we actually",
    "start": "986870",
    "end": "992749"
  },
  {
    "text": "send a request to the server in u.s. VAP terminology so basically we cannot",
    "start": "992749",
    "end": "998929"
  },
  {
    "text": "adjust the buffer size based on the response we receive and another point",
    "start": "998929",
    "end": "1007120"
  },
  {
    "text": "that if you try to send malicious packets to us b.a.p client from network",
    "start": "1007120",
    "end": "1013389"
  },
  {
    "text": "go interview even if you have like some network kind of a network analyzer the traffic looks totally valid so for",
    "start": "1013389",
    "end": "1021910"
  },
  {
    "text": "example if you send a packet with which",
    "start": "1021910",
    "end": "1027579"
  },
  {
    "text": "has a length field 128 bytes and the data attached to it is 128 bytes it's",
    "start": "1027579",
    "end": "1034418"
  },
  {
    "text": "completely valid package in terms of us VAP protocol but you may never know that",
    "start": "1034419",
    "end": "1040510"
  },
  {
    "text": "this packet is destined for USB transfer buffer which is only 64 bytes long so",
    "start": "1040510",
    "end": "1049840"
  },
  {
    "text": "this vulnerability received the following number it's CV 2016 3 9 double",
    "start": "1049840",
    "end": "1056289"
  },
  {
    "text": "v it's actually received very high Steve",
    "start": "1056289",
    "end": "1061970"
  },
  {
    "text": "ESS score by US national security vulnerability database and probably",
    "start": "1061970",
    "end": "1068300"
  },
  {
    "text": "because this X this vulnerability can be",
    "start": "1068300",
    "end": "1074060"
  },
  {
    "text": "exploited directly from the network and the attacker basically requires no",
    "start": "1074060",
    "end": "1079700"
  },
  {
    "text": "authentication to do it and although I'm",
    "start": "1079700",
    "end": "1085550"
  },
  {
    "text": "not favor of giving nicknames to vulnerabilities practice shows that if a",
    "start": "1085550",
    "end": "1090830"
  },
  {
    "text": "vulnerability has meaningful link nickname it's easily remembered and it",
    "start": "1090830",
    "end": "1096080"
  },
  {
    "text": "is easier to communicate between security professionals when you say like oh do you know about TV now number blah",
    "start": "1096080",
    "end": "1104510"
  },
  {
    "text": "blah blah said what's about and when you say hey you know about heartless yes you",
    "start": "1104510",
    "end": "1110300"
  },
  {
    "text": "know about Beast yes and hopefully now if I say hey you know about you both",
    "start": "1110300",
    "end": "1117130"
  },
  {
    "text": "you'll say yes unfortunately usually these vulnerabilities have a",
    "start": "1117130",
    "end": "1124340"
  },
  {
    "text": "logo as well unfortunately I'm a very bad designer so I didn't do a logo but",
    "start": "1124340",
    "end": "1131360"
  },
  {
    "text": "if someone wants to contribute a logo please contact me I will be very",
    "start": "1131360",
    "end": "1136670"
  },
  {
    "text": "grateful okay so what are the requisite",
    "start": "1136670",
    "end": "1142520"
  },
  {
    "start": "1139000",
    "end": "1267000"
  },
  {
    "text": "is to exploit this vulnerability so as I",
    "start": "1142520",
    "end": "1149180"
  },
  {
    "text": "mentioned before your potential victim has to actually use USB over IP most",
    "start": "1149180",
    "end": "1156560"
  },
  {
    "text": "Linux u.s. VIP is enabled in most popular Linux distributions",
    "start": "1156560",
    "end": "1162470"
  },
  {
    "text": "however they are compiled as modules and the official instructions even require",
    "start": "1162470",
    "end": "1168020"
  },
  {
    "text": "you to load these kernel modules before you want to use USB IP so if you don't",
    "start": "1168020",
    "end": "1175310"
  },
  {
    "text": "use you ABAP USB IP you didn't load the modules you don't have the vulnerable",
    "start": "1175310",
    "end": "1180410"
  },
  {
    "text": "code so you're safe secondly your it has to be client in us beat IP",
    "start": "1180410",
    "end": "1187990"
  },
  {
    "text": "terminology that is the site which actually imports USB devices I haven't",
    "start": "1187990",
    "end": "1194710"
  },
  {
    "text": "found any issues with the server so far it seems the code there is proper",
    "start": "1194710",
    "end": "1200830"
  },
  {
    "text": "validates the buffer sizes so it is only possible to exploit the client also your",
    "start": "1200830",
    "end": "1209140"
  },
  {
    "text": "victim has to import at least one USB device as you saw from previous diagram",
    "start": "1209140",
    "end": "1216630"
  },
  {
    "text": "once the client became vulnerable only when he imports the socket into the",
    "start": "1216630",
    "end": "1223510"
  },
  {
    "text": "linux kernel so before that the client is reasonably safe so you either have to",
    "start": "1223510",
    "end": "1229900"
  },
  {
    "text": "hijack an existing connection or you have to somehow trick the client to",
    "start": "1229900",
    "end": "1236289"
  },
  {
    "text": "import the device and you as an attacker you have to either hijack the clients",
    "start": "1236289",
    "end": "1242860"
  },
  {
    "text": "network although it may be easy because the USB IP uses plain TCP without any",
    "start": "1242860",
    "end": "1249370"
  },
  {
    "text": "encryption or authentication you still have to get on the clients network and do a mighty em there or you can just try",
    "start": "1249370",
    "end": "1258490"
  },
  {
    "text": "to hijack the USB API server and try to modify the behavior to send malicious",
    "start": "1258490",
    "end": "1263890"
  },
  {
    "text": "responses to the client okay let's do",
    "start": "1263890",
    "end": "1269200"
  },
  {
    "start": "1267000",
    "end": "1649000"
  },
  {
    "text": "some demo just a minute and I will switch the desktop",
    "start": "1269200",
    "end": "1278039"
  },
  {
    "text": "okay here for demo purposes we have a use Linux system and for simplicity I",
    "start": "1294659",
    "end": "1305259"
  },
  {
    "text": "will run client and server on the same system but you can imagine they're two different systems because you can just",
    "start": "1305259",
    "end": "1312970"
  },
  {
    "text": "use local host network to communicate between each other and this is like",
    "start": "1312970",
    "end": "1318220"
  },
  {
    "text": "playing Ubuntu system so except that I compiled vanilla kernel which is still",
    "start": "1318220",
    "end": "1325570"
  },
  {
    "text": "vulnerable to USB over a p2 u-boat attack because now it has been patched",
    "start": "1325570",
    "end": "1332080"
  },
  {
    "text": "in most distributions so the first so the right side is a server so I will not",
    "start": "1332080",
    "end": "1340720"
  },
  {
    "text": "hijack the network for this demo I will just pretend that I'm controlling the",
    "start": "1340720",
    "end": "1346629"
  },
  {
    "text": "USB ap server and for this specifically I wrote a simple go program which",
    "start": "1346629",
    "end": "1352179"
  },
  {
    "text": "emulates the USB ap server so it doesn't require any physical devices it exposes",
    "start": "1352179",
    "end": "1357490"
  },
  {
    "text": "a one virtual malicious fake device so we will start the server here okay and",
    "start": "1357490",
    "end": "1366429"
  },
  {
    "text": "as you can see I am another attacker I don't even require any privileges I",
    "start": "1366429",
    "end": "1373090"
  },
  {
    "text": "just run it from playing user as long as I'm compliant to USB IP protocol I am okay to trick the client the time and",
    "start": "1373090",
    "end": "1379840"
  },
  {
    "text": "totally valid server so on the client side we now will first of all we will",
    "start": "1379840",
    "end": "1386679"
  },
  {
    "text": "check which devices have been imported so we launch the client utility and we",
    "start": "1386679",
    "end": "1393480"
  },
  {
    "text": "specify so we specify the common list and we launch the client utility and",
    "start": "1393480",
    "end": "1402519"
  },
  {
    "text": "specify address on the server yeah so he I have a logging on the",
    "start": "1402519",
    "end": "1408639"
  },
  {
    "text": "server so I'm saying sending a fake device list and on the client we see that one devices is being exportable it",
    "start": "1408639",
    "end": "1416830"
  },
  {
    "text": "has a vendor ID and Product ID of that beef and has a physical path of",
    "start": "1416830",
    "end": "1423160"
  },
  {
    "text": "dangerous UAB demo sorry I'm croissant",
    "start": "1423160",
    "end": "1435470"
  },
  {
    "text": "yes sure I will not increase the server because I will not touch the server now",
    "start": "1435470",
    "end": "1443140"
  },
  {
    "text": "this is okay okay so we see that the server actually tries to show that that",
    "start": "1443140",
    "end": "1450860"
  },
  {
    "text": "one device has been X purple so next thing we should do is first of all as I mentioned we need to load the kernel",
    "start": "1450860",
    "end": "1456650"
  },
  {
    "text": "modules USB AP core and the virtual host",
    "start": "1456650",
    "end": "1471080"
  },
  {
    "text": "controller interface ok and now we can",
    "start": "1471080",
    "end": "1480560"
  },
  {
    "text": "try to actually import a device so the server is configured in a way that once",
    "start": "1480560",
    "end": "1487340"
  },
  {
    "text": "we import this device when the socket will be passed to the Linux kernel and we will see actual you will be traffic",
    "start": "1487340",
    "end": "1493310"
  },
  {
    "text": "it will send a bigger response than the declined expect so and we hopefully will",
    "start": "1493310",
    "end": "1500180"
  },
  {
    "text": "crash the system but it usually crashes but we'll see like if if the demagogue",
    "start": "1500180",
    "end": "1507680"
  },
  {
    "text": "is willing to help today ok so so now to import the device we",
    "start": "1507680",
    "end": "1513620"
  },
  {
    "text": "need super user privileges again we say",
    "start": "1513620",
    "end": "1521390"
  },
  {
    "text": "attach we specify the address of the server and then we specify which device",
    "start": "1521390",
    "end": "1530090"
  },
  {
    "text": "we want to import so it's basically this one 1/1 if you have more devices you",
    "start": "1530090",
    "end": "1538910"
  },
  {
    "text": "will have 1/2 1 2 X 3 or 2/1 or whatever ok",
    "start": "1538910",
    "end": "1546190"
  },
  {
    "text": "okay it didn't crash apparently but we still see some error on the damask let's",
    "start": "1548380",
    "end": "1555190"
  },
  {
    "text": "check the mask output oh I cannot check",
    "start": "1555190",
    "end": "1561430"
  },
  {
    "text": "the damask output so yeah you see extracted in the damask output so",
    "start": "1561430",
    "end": "1569080"
  },
  {
    "text": "apparently we wrote some garbage and the Linux cannot work anymore let's try from",
    "start": "1569080",
    "end": "1575710"
  },
  {
    "text": "the server side oh okay",
    "start": "1575710",
    "end": "1581620"
  },
  {
    "text": "so we crash the system it doesn't scale",
    "start": "1581620",
    "end": "1590640"
  },
  {
    "text": "so it says here that reboot is needed oh",
    "start": "1590640",
    "end": "1597240"
  },
  {
    "text": "well okay",
    "start": "1597240",
    "end": "1604860"
  },
  {
    "text": "okay so this is like one of the simplest attack possible but you can do more",
    "start": "1627610",
    "end": "1635700"
  },
  {
    "text": "because this is easy you just handsome garbage you try to over a over item",
    "start": "1635700",
    "end": "1641440"
  },
  {
    "text": "structures with garbage and most probably the system will crash because it will try to dereference some kind of",
    "start": "1641440",
    "end": "1647620"
  },
  {
    "text": "invalid point what can you do more as we just saw you can definitely do denial of",
    "start": "1647620",
    "end": "1653770"
  },
  {
    "start": "1649000",
    "end": "1744000"
  },
  {
    "text": "service so I showed you that easy you can try to do data injection so instead",
    "start": "1653770",
    "end": "1662200"
  },
  {
    "text": "of sending some garbage you can actually try to send some meaningful data and overwrite some pointers so if you",
    "start": "1662200",
    "end": "1669790"
  },
  {
    "text": "overwrite some data you will get data injection if you overwrite some function",
    "start": "1669790",
    "end": "1675460"
  },
  {
    "text": "pointers you may get a code execution so remember that this is the kernel heap",
    "start": "1675460",
    "end": "1682090"
  },
  {
    "text": "exploit code execution is much harder here than if you have a stack in with",
    "start": "1682090",
    "end": "1688510"
  },
  {
    "text": "case of stack exploits it's easy you just override the return address of the function and your codes been executed",
    "start": "1688510",
    "end": "1695290"
  },
  {
    "text": "with kernel hip exploit due to the random nature of memory allocators it's",
    "start": "1695290",
    "end": "1702990"
  },
  {
    "text": "harder but it's still possible I will not go in detail how to do that but you",
    "start": "1702990",
    "end": "1709690"
  },
  {
    "text": "can actually reuse any previous kernel heat owner abilities so some of them",
    "start": "1709690",
    "end": "1715330"
  },
  {
    "text": "have a very detailed explanation how to achieve meaningful result with data injection or code execution so one",
    "start": "1715330",
    "end": "1722650"
  },
  {
    "text": "particular example is this blog post so to you previously use the vulnerability",
    "start": "1722650",
    "end": "1728460"
  },
  {
    "text": "which leads to kernel heap exploitation and this blog post has step by step with",
    "start": "1728460",
    "end": "1734380"
  },
  {
    "text": "code examples how to gain code execution on the compromised system and elevate",
    "start": "1734380",
    "end": "1741670"
  },
  {
    "text": "your privileges where however US VAP",
    "start": "1741670",
    "end": "1749430"
  },
  {
    "start": "1744000",
    "end": "1928000"
  },
  {
    "text": "vulnerability is actually more flexible for the attacker than the most of the",
    "start": "1749430",
    "end": "1754930"
  },
  {
    "text": "other kernel vulnerabilities so and to explain this flexibility I will briefly on very",
    "start": "1754930",
    "end": "1762269"
  },
  {
    "text": "high-level describe how kernel memory allocator works so basically Linux kernel for its heap",
    "start": "1762269",
    "end": "1772139"
  },
  {
    "text": "memory reserves and continues memory regions called slab caches and each caches has a specific sign attached to",
    "start": "1772139",
    "end": "1780809"
  },
  {
    "text": "it so it means that if we have a slab cache so they - it means that the whole",
    "start": "1780809",
    "end": "1786240"
  },
  {
    "text": "memory regions is broken into equal chunks of 32 bytes if you have slab",
    "start": "1786240",
    "end": "1792330"
  },
  {
    "text": "cache 64 you have this memory region broken into 64 bytes and if you have to",
    "start": "1792330",
    "end": "1798600"
  },
  {
    "text": "flop cache 128 you have memory region broken in equally 128 bytes and I mean",
    "start": "1798600",
    "end": "1805860"
  },
  {
    "text": "it doesn't have to be power of 2 the rough sizes and between this slide just briefly shows what slop caches are",
    "start": "1805860",
    "end": "1813360"
  },
  {
    "text": "available so for example if your kernel code requests some memory it requests",
    "start": "1813360",
    "end": "1820470"
  },
  {
    "text": "like let's say 28 bytes and users came a lot functions for that so what kernel actually does it rounds",
    "start": "1820470",
    "end": "1827820"
  },
  {
    "text": "up to the nearest available slop cache and if there are free chunks there so",
    "start": "1827820",
    "end": "1834750"
  },
  {
    "text": "technically if your code will request would request 28 bytes it will find the",
    "start": "1834750",
    "end": "1840840"
  },
  {
    "text": "free slot most probably find a free slot in slop cache 32 and return you this",
    "start": "1840840",
    "end": "1847889"
  },
  {
    "text": "chunk so your code actually receives a little bit more memory than requested but it's totally transparent as not its",
    "start": "1847889",
    "end": "1854340"
  },
  {
    "text": "last memory so if you can exploit that so what you can override you can",
    "start": "1854340",
    "end": "1860190"
  },
  {
    "text": "overwrite any data in your chunk and any chance which is follows your buffer so",
    "start": "1860190",
    "end": "1868110"
  },
  {
    "text": "if the other chunks in the slab cache were allocated to a different subsystem",
    "start": "1868110",
    "end": "1873299"
  },
  {
    "text": "you're basically injecting data to these other subsystems so what differentiates",
    "start": "1873299",
    "end": "1880139"
  },
  {
    "text": "us b.a.p vulnerability from other vulnerabilities that most of the vulnerabilities can exploit only a",
    "start": "1880139",
    "end": "1887850"
  },
  {
    "text": "particular cache size so for example if we have an exploit of in Slab page 32 we",
    "start": "1887850",
    "end": "1895140"
  },
  {
    "text": "actually to get a meaningful output we need to find other objects which are",
    "start": "1895140",
    "end": "1900960"
  },
  {
    "text": "allocated from the same slub cache and then tailor our attack to try to override those specific objects in USB",
    "start": "1900960",
    "end": "1908970"
  },
  {
    "text": "AP case interesting part that the attacker has somewhat control which slab",
    "start": "1908970",
    "end": "1914730"
  },
  {
    "text": "cache can exploit so he can just select whatever structure he wants to exploit",
    "start": "1914730",
    "end": "1920490"
  },
  {
    "text": "and just tailor their attack that to a specific slab cache so this is",
    "start": "1920490",
    "end": "1926870"
  },
  {
    "text": "achievable in the following way so remember if an attacker can hijack your",
    "start": "1926870",
    "end": "1932160"
  },
  {
    "text": "USB ap connection the attacker can actually emulate any USB device on the",
    "start": "1932160",
    "end": "1937530"
  },
  {
    "text": "client system so the steps would be that you if you are an attacker and you want",
    "start": "1937530",
    "end": "1944070"
  },
  {
    "text": "to exploit a particular flop cache of a particular size you just find a USB a",
    "start": "1944070",
    "end": "1950640"
  },
  {
    "text": "USB any USB driver in the Linux subsystem which allocates transfer",
    "start": "1950640",
    "end": "1956760"
  },
  {
    "text": "buffers from the same slab cache and thankfully there are a lot of USB drivers and Linux kernels so you can",
    "start": "1956760",
    "end": "1962610"
  },
  {
    "text": "select anyone when you hijack the connection you first you emulate this",
    "start": "1962610",
    "end": "1968190"
  },
  {
    "text": "USB AP sorry USB device and so the target so most modern Linux",
    "start": "1968190",
    "end": "1973950"
  },
  {
    "text": "distributions will load the this device driver automatically when we see that the device appeared in the system and",
    "start": "1973950",
    "end": "1980850"
  },
  {
    "text": "when the driver has been loaded it will start allocating objects in your desired",
    "start": "1980850",
    "end": "1986400"
  },
  {
    "text": "slab cache and then you perform your attack okay",
    "start": "1986400",
    "end": "1994800"
  },
  {
    "start": "1994000",
    "end": "2080000"
  },
  {
    "text": "still interested in using USB over IP okay if you still do then here are some",
    "start": "1994800",
    "end": "2003380"
  },
  {
    "text": "tips which will help you harden the USB 80 setups so first if you're still",
    "start": "2003380",
    "end": "2009620"
  },
  {
    "text": "thinking of using it just please reconsider maybe if you have a device",
    "start": "2009620",
    "end": "2015470"
  },
  {
    "text": "and you want to share it between different systems and the device is",
    "start": "2015470",
    "end": "2021770"
  },
  {
    "text": "cheap just buy another one so it's probably safer because still even though",
    "start": "2021770",
    "end": "2027650"
  },
  {
    "text": "your system may be already patched and protected from the vulnerability the",
    "start": "2027650",
    "end": "2033290"
  },
  {
    "text": "attacker can still emulate any USB device on the client system and this is",
    "start": "2033290",
    "end": "2038360"
  },
  {
    "text": "still pretty scary so attacker can just simulate a screen for example you get all your screenshots or a mouse and try",
    "start": "2038360",
    "end": "2047300"
  },
  {
    "text": "to disrupt your work or whatever if you still keen on using it definitely patch",
    "start": "2047300",
    "end": "2053240"
  },
  {
    "text": "your system and this advice applies to everything actually if you're using Linux you should patch quickly and patch",
    "start": "2053240",
    "end": "2060169"
  },
  {
    "text": "often most distributions provide you with security updates and security",
    "start": "2060169",
    "end": "2066050"
  },
  {
    "text": "advisories and Cardinal is very important part of that because it's very high privileged and different",
    "start": "2066050",
    "end": "2073730"
  },
  {
    "text": "vulnerabilities as being discovered every day so definitely stay on top of security patches protect your traffic",
    "start": "2073730",
    "end": "2083138"
  },
  {
    "start": "2080000",
    "end": "2177000"
  },
  {
    "text": "unfortunately original USB IP doesn't have any built-in security mechanism",
    "start": "2083139",
    "end": "2090378"
  },
  {
    "text": "apart from a very simple access control which can limit the connection to USB ap",
    "start": "2090379",
    "end": "2096830"
  },
  {
    "text": "server from specific IP addresses but in today's world what an IP address so it",
    "start": "2096830",
    "end": "2102830"
  },
  {
    "text": "can be easily spooked so as you saw the attacker can attack a client even if the",
    "start": "2102830",
    "end": "2111440"
  },
  {
    "text": "system is patched if the attacker can hijack the TCP connection so if you",
    "start": "2111440",
    "end": "2116720"
  },
  {
    "text": "somehow wrap the connection in TLS or IPSec for example it even doesn't have",
    "start": "2116720",
    "end": "2123560"
  },
  {
    "text": "to be encrypted because encryption is important but at least authenticated you prevent the attacker from hijacking",
    "start": "2123560",
    "end": "2130190"
  },
  {
    "text": "the traffic and do this even in your internal network because with even if",
    "start": "2130190",
    "end": "2137360"
  },
  {
    "text": "you're home and you have just a plain home Wi-Fi you know the state of the",
    "start": "2137360",
    "end": "2142520"
  },
  {
    "text": "modern IT world and how secure IT devices so you may never expect who is",
    "start": "2142520",
    "end": "2149120"
  },
  {
    "text": "sitting on your home networking doing what and definitely ensure your USB IP",
    "start": "2149120",
    "end": "2156320"
  },
  {
    "text": "server is sufficiently protected and proper access control mechanisms are in place because if the attacker will not",
    "start": "2156320",
    "end": "2163490"
  },
  {
    "text": "be able to hijacked your network that the next step would be probably to hijack your USB ap server and take it",
    "start": "2163490",
    "end": "2170330"
  },
  {
    "text": "control of it and try to spoof the responses it sends okay here are",
    "start": "2170330",
    "end": "2179420"
  },
  {
    "start": "2177000",
    "end": "2260000"
  },
  {
    "text": "additional resources if you want to read more so this is the link the first one",
    "start": "2179420",
    "end": "2184700"
  },
  {
    "text": "is a link to original blog post I wrote about this vulnerability it has a very detailed source listing and shows where",
    "start": "2184700",
    "end": "2192500"
  },
  {
    "text": "the vulnerability particular is and all the code flow which leads to it second",
    "start": "2192500",
    "end": "2198470"
  },
  {
    "text": "if you want to play with my malicious USB ap server you can download it from",
    "start": "2198470",
    "end": "2204350"
  },
  {
    "text": "github and it's actually a go program originally as a proof of concept",
    "start": "2204350",
    "end": "2210470"
  },
  {
    "text": "I wrote a C server it was very ugly so I decided to rewrite it and go and now it's a very plain simple go program",
    "start": "2210470",
    "end": "2217430"
  },
  {
    "text": "which is go gettable go buildable using all your standard go tools so it's very easy to start using it and then the link",
    "start": "2217430",
    "end": "2227120"
  },
  {
    "text": "to the original CVA database it's useful because it has many links attached to it",
    "start": "2227120",
    "end": "2232850"
  },
  {
    "text": "of different kernel distributions and forums which discuss the vulnerability and provide more details of the",
    "start": "2232850",
    "end": "2239930"
  },
  {
    "text": "potential impact and more constraints and the last one is the national",
    "start": "2239930",
    "end": "2246770"
  },
  {
    "text": "vulnerability database which provides the Steve ESS score it has a detailed breakdown why this vulnerability",
    "start": "2246770",
    "end": "2253760"
  },
  {
    "text": "received high CBS s core although it's not widely used",
    "start": "2253760",
    "end": "2259210"
  },
  {
    "start": "2260000",
    "end": "2413000"
  },
  {
    "text": "okay so blackhat soundbites first of all",
    "start": "2260319",
    "end": "2267099"
  },
  {
    "text": "never sacrifice security for performance so I was puzzled why the authors of the",
    "start": "2267099",
    "end": "2275779"
  },
  {
    "text": "USB AP framework implemented the net application Network protocol directly in",
    "start": "2275779",
    "end": "2282949"
  },
  {
    "text": "the kernel it sounds very dangerous I scan I read through the articles and I was seeking",
    "start": "2282949",
    "end": "2289909"
  },
  {
    "text": "for evidence that it was impossible to do the other way but unfortunately I",
    "start": "2289909",
    "end": "2295099"
  },
  {
    "text": "haven't found any what I found is a one sentence that says hey but by the way we",
    "start": "2295099",
    "end": "2301909"
  },
  {
    "text": "want to avoid this extra buffer copy between quiet kernel and user space so we just put everything in the kernel so",
    "start": "2301909",
    "end": "2309559"
  },
  {
    "text": "don't do that if if this performance doesn't hit you so leave it leave this",
    "start": "2309559",
    "end": "2316309"
  },
  {
    "text": "extra buffer overflow extra buffer coffee for the sake of security I know",
    "start": "2316309",
    "end": "2322669"
  },
  {
    "text": "another big company actual that similar it implements application level protocol",
    "start": "2322669",
    "end": "2327829"
  },
  {
    "text": "directly in kernel I will not name the company but last time I checked they",
    "start": "2327829",
    "end": "2333319"
  },
  {
    "text": "still had this HTTP implementation in Windows 7 so the secondly always",
    "start": "2333319",
    "end": "2340699"
  },
  {
    "text": "validate your input so if you are designing a system which communicates to other system even if it's a library",
    "start": "2340699",
    "end": "2347799"
  },
  {
    "text": "especially if it communicates about a network or if you communicate between kernel user space always expect that",
    "start": "2347799",
    "end": "2354589"
  },
  {
    "text": "your input might be malicious hijacked and try to do as much sanity checks as possible on the Institut receive and",
    "start": "2354589",
    "end": "2363099"
  },
  {
    "text": "lastly consider this provision principle so this is what is not done in the USB",
    "start": "2363099",
    "end": "2368929"
  },
  {
    "text": "AP framework so you should break your code into modules it's understandable",
    "start": "2368929",
    "end": "2376519"
  },
  {
    "text": "that such frameworks such as USB a Pyrrhic some parts of it require very high privileges to inject low-level USB",
    "start": "2376519",
    "end": "2384650"
  },
  {
    "text": "data into the kernel so if you break your code into modules properly and",
    "start": "2384650",
    "end": "2390450"
  },
  {
    "text": "and make the modules which require quite privileges as small as possible they",
    "start": "2390450",
    "end": "2396510"
  },
  {
    "text": "will be easy to review easy to audit and you will dramatically reduce the attacks",
    "start": "2396510",
    "end": "2403549"
  },
  {
    "text": "surface for your curve so and everything else should be as we privileged as",
    "start": "2403549",
    "end": "2410970"
  },
  {
    "text": "possible that's it",
    "start": "2410970",
    "end": "2417020"
  },
  {
    "text": "any questions yes",
    "start": "2419359",
    "end": "2431420"
  },
  {
    "text": "so the question was what's the probability of you're able to crush the",
    "start": "2437700",
    "end": "2442900"
  },
  {
    "text": "target system actually very high during my demo development I crashed the system",
    "start": "2442900",
    "end": "2449560"
  },
  {
    "text": "nine of ten times I did specifically make a batch which dumps the memory if",
    "start": "2449560",
    "end": "2455590"
  },
  {
    "text": "the system did not rise that's why I tried to run the mask and show you that I definitely did the buffer overflow but",
    "start": "2455590",
    "end": "2462690"
  },
  {
    "text": "most of the times tragedy it also depends on how much of the buffer you",
    "start": "2462690",
    "end": "2468910"
  },
  {
    "text": "will override so by default the server I implemented overrides the cache by 512",
    "start": "2468910",
    "end": "2478840"
  },
  {
    "text": "bytes which is pretty large so there is a big probability I will keep some kind of a control structure if you override",
    "start": "2478840",
    "end": "2485410"
  },
  {
    "text": "the buffer for example for one byte or for two bytes the probability is much lower so you can actually use it system",
    "start": "2485410",
    "end": "2492070"
  },
  {
    "text": "but if you do want to price the system it's very definitely you're going to crash so even if if you didn't write the",
    "start": "2492070",
    "end": "2499810"
  },
  {
    "text": "system for the first time the next time it crashes so is within two attempts",
    "start": "2499810",
    "end": "2506880"
  },
  {
    "text": "yes please so the story of it is",
    "start": "2511690",
    "end": "2524849"
  },
  {
    "text": "actually very simple as I mentioned I'm not an intersect portion I don't",
    "start": "2524849",
    "end": "2529960"
  },
  {
    "text": "specifically look for vulnerabilities what I wanted to do I wanted to I had a",
    "start": "2529960",
    "end": "2535750"
  },
  {
    "text": "like my own project I wanted to design a framework which emulate USB devices and",
    "start": "2535750",
    "end": "2542740"
  },
  {
    "text": "software so I started thinking okay what I need to do so first of all I need a",
    "start": "2542740",
    "end": "2547809"
  },
  {
    "text": "virtual USB host controller driver and obviously I didn't want to write it from scratch and I started searching around",
    "start": "2547809",
    "end": "2553990"
  },
  {
    "text": "what options are available and stumbled upon the USB a/b technology so my",
    "start": "2553990",
    "end": "2559930"
  },
  {
    "text": "original intent was not actually to expose devices of the network but just",
    "start": "2559930",
    "end": "2565990"
  },
  {
    "text": "we use the same driver to emulate USB devices in software locally and the",
    "start": "2565990",
    "end": "2571809"
  },
  {
    "text": "reason I start digging into the source code because I wanted to find out what the interface of communicating with this",
    "start": "2571809",
    "end": "2577329"
  },
  {
    "text": "driver and while doing that I figure out that indeed it does network",
    "start": "2577329",
    "end": "2582400"
  },
  {
    "text": "communication is directly from the kernel and when I start looking deeply I just saw this vulnerability so I may say",
    "start": "2582400",
    "end": "2589599"
  },
  {
    "text": "it was just found by accident yes",
    "start": "2589599",
    "end": "2597900"
  },
  {
    "text": "so the question was are there any popular projects with using this",
    "start": "2601390",
    "end": "2606770"
  },
  {
    "text": "software and no unfortunately I even",
    "start": "2606770",
    "end": "2611780"
  },
  {
    "text": "were very surprised that that's this framework is part of the vanilla kernel",
    "start": "2611780",
    "end": "2617480"
  },
  {
    "text": "source tree because I never heard about it and I didn't see any use case so",
    "start": "2617480",
    "end": "2623270"
  },
  {
    "text": "that's why I assume it's highly like an popular or just people do not know about",
    "start": "2623270",
    "end": "2629000"
  },
  {
    "text": "it as well",
    "start": "2629000",
    "end": "2631569"
  },
  {
    "text": "thank you [Applause]",
    "start": "2644760",
    "end": "2651860"
  }
]