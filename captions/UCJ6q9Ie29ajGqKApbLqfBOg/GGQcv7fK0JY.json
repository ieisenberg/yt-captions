[
  {
    "text": "first of all Who am I I am a mostly a penetration tester and my day job",
    "start": "0",
    "end": "6690"
  },
  {
    "text": "consisting reviewing code and tried to find a way to breach into clients code",
    "start": "6690",
    "end": "14120"
  },
  {
    "text": "also friends code to my own code because when I code I always start to code with a security",
    "start": "14120",
    "end": "22430"
  },
  {
    "text": "oriented mind and lately I noticed that one language is getting started in the",
    "start": "22430",
    "end": "32509"
  },
  {
    "text": "programming scene and it's pretty widespread Google is sponsoring it so",
    "start": "32510",
    "end": "37890"
  },
  {
    "text": "yeah it's widespread enough it is a relatively young language because it's",
    "start": "37890",
    "end": "45030"
  },
  {
    "text": "only ten years old and people are starting to use that mostly in security",
    "start": "45030",
    "end": "50160"
  },
  {
    "text": "tools CloudFlare is using a lot of go Google is using a lot of go and docker",
    "start": "50160",
    "end": "55289"
  },
  {
    "text": "for example is completely written go so I started to think what if I wanted to",
    "start": "55289",
    "end": "61770"
  },
  {
    "text": "know how to look for vulnerabilities in",
    "start": "61770",
    "end": "67530"
  },
  {
    "text": "some go code and I'm not talking about finding some old days in the runtime",
    "start": "67530",
    "end": "72900"
  },
  {
    "text": "that I'm going to report and get patched the week after rolling new versions of",
    "start": "72900",
    "end": "78270"
  },
  {
    "text": "go it's way too easy you find a vulnerability in the go runtime I'm",
    "start": "78270",
    "end": "83580"
  },
  {
    "text": "pretty sure that it's going to be fixed incredibly fast so I started to look",
    "start": "83580",
    "end": "90960"
  },
  {
    "text": "into usual stuff memory safety garbage collection those are pretty strong I",
    "start": "90960",
    "end": "97860"
  },
  {
    "text": "wasn't able to find any memory problem",
    "start": "97860",
    "end": "103079"
  },
  {
    "text": "not in on a design level at least and since the language is itself garbage",
    "start": "103079",
    "end": "108689"
  },
  {
    "text": "collector garbage collected it is very unlikely to find some memory leak in",
    "start": "108689",
    "end": "115049"
  },
  {
    "text": "some go code on the web server side go implements an HTTP server itself so I",
    "start": "115049",
    "end": "124619"
  },
  {
    "text": "went to look into it and except for the complete lack of anti-isis or token",
    "start": "124619",
    "end": "132090"
  },
  {
    "text": "there is a pretty good anti XSS filter there is sequel prevention so you're not",
    "start": "132090",
    "end": "141650"
  },
  {
    "text": "we are very unlikely to find those two and lastly it has built-in thread safe",
    "start": "141650",
    "end": "151220"
  },
  {
    "text": "constructs and data structures so I didn't expect to find many erase",
    "start": "151220",
    "end": "157110"
  },
  {
    "text": "conditions either so I started digging because that's what I do as a job new",
    "start": "157110",
    "end": "165150"
  },
  {
    "text": "features usually bring coders to confusion if you find a language that",
    "start": "165150",
    "end": "172620"
  },
  {
    "text": "has new features you should look into it you should start to see if you can find",
    "start": "172620",
    "end": "178829"
  },
  {
    "text": "anything wrong with those new features not in the language itself but on how do people expect them to behave one of the",
    "start": "178829",
    "end": "187920"
  },
  {
    "text": "main features that go introduces our goo routines which is which are basically",
    "start": "187920",
    "end": "194060"
  },
  {
    "text": "threads or at least they're they behave like threads there are function calls",
    "start": "194060",
    "end": "201889"
  },
  {
    "text": "preceded by the go statement so those are just functions run in a concurrent",
    "start": "201889",
    "end": "210870"
  },
  {
    "text": "way which means all the code that runs inside function is concluded with all",
    "start": "210870",
    "end": "217769"
  },
  {
    "text": "the code around the go statement so the line before I go statement is concurrent",
    "start": "217769",
    "end": "222900"
  },
  {
    "text": "with the code called inside go statement so I decided to give it a try and I",
    "start": "222900",
    "end": "231349"
  },
  {
    "text": "would ask you to look at this slide and try to think what is the output of this",
    "start": "231349",
    "end": "241019"
  },
  {
    "text": "code it's just five lines of code to which two lines are just parents's so",
    "start": "241019",
    "end": "248750"
  },
  {
    "text": "from zero to nine included on a new thread or on a new goroutine print I",
    "start": "248750",
    "end": "259220"
  },
  {
    "text": "which should be easy to guess and I expected it to be something at there",
    "start": "259930",
    "end": "265760"
  },
  {
    "text": "this is what I got like 10 times 10 and since 10 is not even in the source code",
    "start": "265760",
    "end": "271940"
  },
  {
    "text": "the number 10 is not even the source I was like well I did not see that coming",
    "start": "271940",
    "end": "279110"
  },
  {
    "text": "and my reaction to these was how would I",
    "start": "279110",
    "end": "284990"
  },
  {
    "text": "expect you to print 10 10 times the",
    "start": "284990",
    "end": "290150"
  },
  {
    "text": "answer is in the fact that goroutines in order to be very lightweight had to",
    "start": "290150",
    "end": "297440"
  },
  {
    "text": "give up something from traditional threads they are multiplexed on them if",
    "start": "297440",
    "end": "305270"
  },
  {
    "text": "you spoon a thousand goo routines on your server you're not going to see a",
    "start": "305270",
    "end": "310640"
  },
  {
    "text": "thousand threads your process you're gonna you're only going to see as many threads as many operative system",
    "start": "310640",
    "end": "319010"
  },
  {
    "text": "threads as your number of physical cores on your machine the go runtime is going",
    "start": "319010",
    "end": "326120"
  },
  {
    "text": "to do the rest of the work for you so it's going to schedule internally all the goroutines the second problem in the",
    "start": "326120",
    "end": "335930"
  },
  {
    "text": "code this e before is that there was one free variable the index of the for loop",
    "start": "335930",
    "end": "343460"
  },
  {
    "text": "was a free variable which means that it was captured like in this example inside",
    "start": "343460",
    "end": "351289"
  },
  {
    "text": "a function that didn't declare or receive that as a parameter in this",
    "start": "351289",
    "end": "356690"
  },
  {
    "text": "example I'm just declaring the hello string and putting it inside a free VAR",
    "start": "356690",
    "end": "362960"
  },
  {
    "text": "variable and I'm using it from inside the code of another function that I",
    "start": "362960",
    "end": "368510"
  },
  {
    "text": "declare inline this is the way you create a lambda in go and if I call this",
    "start": "368510",
    "end": "376789"
  },
  {
    "text": "function which is called F and I give it the argument closures it means hello",
    "start": "376789",
    "end": "383000"
  },
  {
    "text": "closures because it kept the reference to that variable that will survive until",
    "start": "383000",
    "end": "389720"
  },
  {
    "text": "the garbage collector notices that you're not using either that variable or the",
    "start": "389720",
    "end": "395540"
  },
  {
    "text": "functioning self anymore so there is a dependency graph inside the garbage collector that keeps track of all the",
    "start": "395540",
    "end": "402890"
  },
  {
    "text": "references to the variables even if they are inside a lambda going back to these",
    "start": "402890",
    "end": "409130"
  },
  {
    "text": "we have a sort of mix of closures and",
    "start": "409130",
    "end": "415180"
  },
  {
    "text": "goroutines which is help to debug and not only because it is concurrent and",
    "start": "415180",
    "end": "422240"
  },
  {
    "text": "parallel but also because you have to keep in mind that I is only declared",
    "start": "422240",
    "end": "427850"
  },
  {
    "text": "once in this code so all the gore teams will have the same reference to the same",
    "start": "427850",
    "end": "433550"
  },
  {
    "text": "piece of memory which once the cycle is concluded will equal 10 so why do I",
    "start": "433550",
    "end": "443180"
  },
  {
    "text": "always get 10 all the time I run that code a million times",
    "start": "443180",
    "end": "448580"
  },
  {
    "text": "it always yielded 10 times 10 because the go scheduler is not stupid they try",
    "start": "448580",
    "end": "454340"
  },
  {
    "text": "to optimize it as much as possible so if the run times if the run time sees that",
    "start": "454340",
    "end": "460250"
  },
  {
    "text": "it can keep going and keep processing stuff it will do that printing to",
    "start": "460250",
    "end": "466910"
  },
  {
    "text": "standard output is a blocking operation creating a new thread is a blocking operation it requires memory so what it",
    "start": "466910",
    "end": "474320"
  },
  {
    "text": "does it tries to run as much as it can until it needs to perform some blocking",
    "start": "474320",
    "end": "481370"
  },
  {
    "text": "operation unless you force it to yield it will keep going so this schedule in",
    "start": "481370",
    "end": "488840"
  },
  {
    "text": "this scheduling that I was dealing with was complex it looked into my code in",
    "start": "488840",
    "end": "495320"
  },
  {
    "text": "you it knew what I was doing what as a pro/con what I was programming and that",
    "start": "495320",
    "end": "500780"
  },
  {
    "text": "caused the code to behave in a different way than I expected it to this is the",
    "start": "500780",
    "end": "507740"
  },
  {
    "text": "fix which is even weirder than the problem and this fix is not something I",
    "start": "507740",
    "end": "514849"
  },
  {
    "text": "made up because I would never ever think of this solution I took that from the",
    "start": "514850",
    "end": "520580"
  },
  {
    "text": "official documentation so this is something the go developer",
    "start": "520580",
    "end": "526520"
  },
  {
    "text": "and designers thought was a good idea which is change the scope of the",
    "start": "526520",
    "end": "531830"
  },
  {
    "text": "variable if you read Eclair I inside the loop you are masking the original one in",
    "start": "531830",
    "end": "539600"
  },
  {
    "text": "which is almost like ginger that as a parameter to your GU routine just in a",
    "start": "539600",
    "end": "545720"
  },
  {
    "text": "closer way and that below is the taken",
    "start": "545720",
    "end": "552620"
  },
  {
    "text": "from effective go which is a post on your official go documentation they",
    "start": "552620",
    "end": "559970"
  },
  {
    "text": "really Claire a request inside the loop just to avoid this problem so in order",
    "start": "559970",
    "end": "569420"
  },
  {
    "text": "to understand what was going on I need to see something that they worked on to",
    "start": "569420",
    "end": "574550"
  },
  {
    "text": "solve this problem in a better way than really clearing variables inside your loops so they provided the people with a",
    "start": "574550",
    "end": "580790"
  },
  {
    "text": "sort of thread safe data structure which can be both buffered or unbuffered those",
    "start": "580790",
    "end": "589280"
  },
  {
    "text": "are called channels channels are meant to solve most of these problems spoiler",
    "start": "589280",
    "end": "594950"
  },
  {
    "text": "they do not but they're meant for that you can either have a buffered one which",
    "start": "594950",
    "end": "600500"
  },
  {
    "text": "will mean that you have to read from a",
    "start": "600500",
    "end": "607970"
  },
  {
    "text": "channel in order for the routine that is trying to write to it in order for",
    "start": "607970",
    "end": "614660"
  },
  {
    "text": "according to proceed it needs the other go team to read from an embosser channel",
    "start": "614660",
    "end": "620570"
  },
  {
    "text": "if the channel is instead buffered you can keep going and just write to the",
    "start": "620570",
    "end": "626090"
  },
  {
    "text": "buffer and wait only when the buffer is full so you can a synchronous feel a",
    "start": "626090",
    "end": "632000"
  },
  {
    "text": "buffer and one other go team will pick it up you can also close channels which means that the other go things can keep",
    "start": "632000",
    "end": "639590"
  },
  {
    "text": "reading from it until the buffer is empty and they will then finish their",
    "start": "639590",
    "end": "645050"
  },
  {
    "text": "loop this is how you loop over a channel you just use the channel as a collection",
    "start": "645050",
    "end": "652370"
  },
  {
    "text": "and when the channel is closed somewhere in the code",
    "start": "652370",
    "end": "658040"
  },
  {
    "text": "if the loop ends so one example this is",
    "start": "658040",
    "end": "665010"
  },
  {
    "text": "one very simple serve function you could see in an HTTP server that just get a",
    "start": "665010",
    "end": "673350"
  },
  {
    "text": "channel of HTTP requests and range is over it in order to process them but",
    "start": "673350",
    "end": "680700"
  },
  {
    "text": "since you don't want your server to hang while processing an HTTP request because",
    "start": "680700",
    "end": "686640"
  },
  {
    "text": "you wanted to keep responding this server was processing all the requests",
    "start": "686640",
    "end": "692310"
  },
  {
    "text": "on a new go routine which is good except it's not because they were doing the",
    "start": "692310",
    "end": "699029"
  },
  {
    "text": "exact same thing that I did the first one in the first 10 line of code that you see these is bad because they",
    "start": "699029",
    "end": "707810"
  },
  {
    "text": "started giving the wrong responses to HTTP requests because the last request",
    "start": "707810",
    "end": "714540"
  },
  {
    "text": "was the one deciding who was gonna respond to so this is bad if you're",
    "start": "714540",
    "end": "724620"
  },
  {
    "text": "trying to look into go code to try and find some race condition go statements",
    "start": "724620",
    "end": "730950"
  },
  {
    "text": "inside any loop are a really nice spot to look into I found some really nasty",
    "start": "730950",
    "end": "737820"
  },
  {
    "text": "stuff and they're almost not thinkable and the only way to find those is not",
    "start": "737820",
    "end": "744149"
  },
  {
    "text": "using testing because if you do unit testing it's very unlikely to incur in race condition because you're testing",
    "start": "744149",
    "end": "750329"
  },
  {
    "text": "what you expect to happen not you not what you don't expect to happen at this point I said okay",
    "start": "750329",
    "end": "759560"
  },
  {
    "text": "variable scoping is weird but I can deal with it I can find easy solutions to",
    "start": "759560",
    "end": "765420"
  },
  {
    "text": "that there is an aware scheduler that behaves nicely if you look at",
    "start": "765420",
    "end": "771029"
  },
  {
    "text": "performances less nicely if you look at the coder the programmer but who cares",
    "start": "771029",
    "end": "776459"
  },
  {
    "text": "about them so I wondered how exactly aware is the scheduler and I kept",
    "start": "776459",
    "end": "783480"
  },
  {
    "text": "digging a little bit of theory sorry about that",
    "start": "783480",
    "end": "788740"
  },
  {
    "text": "on a machine you have some operating system threads that are spoon in the",
    "start": "788740",
    "end": "793780"
  },
  {
    "text": "exact same number as your course on your server then you have some logical",
    "start": "793780",
    "end": "799870"
  },
  {
    "text": "processors that are also in the same number as your course that the go run",
    "start": "799870",
    "end": "805840"
  },
  {
    "text": "thing is going to spawn for you each logical processor has a queue of",
    "start": "805840",
    "end": "811870"
  },
  {
    "text": "goroutines and when a guru team performs a yielding operation like reading from a",
    "start": "811870",
    "end": "817270"
  },
  {
    "text": "file your logical processor is going to go to the next go routine and execute",
    "start": "817270",
    "end": "822790"
  },
  {
    "text": "that one instead this is tasks which is almost unnoticeable it is so fast that",
    "start": "822790",
    "end": "830920"
  },
  {
    "text": "you can't possibly detect any thread switching cost in go because even if a",
    "start": "830920",
    "end": "836890"
  },
  {
    "text": "garbage collection happens in this switch which could happen it is still",
    "start": "836890",
    "end": "842560"
  },
  {
    "text": "going to take less than two milliseconds go run thing is incredible fasting that so you can save a lot of time in task",
    "start": "842560",
    "end": "849310"
  },
  {
    "text": "switching because discrete task switching only happens when one processor is scheduling by the operative",
    "start": "849310",
    "end": "855700"
  },
  {
    "text": "system instead of the other one which shouldn't happen so this is an",
    "start": "855700",
    "end": "861460"
  },
  {
    "text": "example of how go sees your code there is a ghost statement in your code which",
    "start": "861460",
    "end": "867430"
  },
  {
    "text": "is usually gets ignored when you spawn a go routine that is very unlikely to get",
    "start": "867430",
    "end": "873010"
  },
  {
    "text": "scheduled then there is some blocking operation and in that case the run thing is going to switch to the go routine",
    "start": "873010",
    "end": "880300"
  },
  {
    "text": "that you just pound because can't go on on that one so performs the whatever computation you",
    "start": "880300",
    "end": "887080"
  },
  {
    "text": "have on the other one if it encounters another blocking operation like writing to a channel which is blocking operation",
    "start": "887080",
    "end": "895200"
  },
  {
    "text": "it switches back to the other goat in order to elicit fries if data is ready",
    "start": "895200",
    "end": "902640"
  },
  {
    "text": "all those calls and I mean every time your scheduler switches routine it must",
    "start": "902640",
    "end": "911320"
  },
  {
    "text": "be decided at compile time go run time decides where a guru teen",
    "start": "911320",
    "end": "919510"
  },
  {
    "text": "can switch its context during compilation so there is no chance",
    "start": "919510",
    "end": "926380"
  },
  {
    "text": "that a goroutine can get interrupted if the compiler didn't think that was a good idea which gets us to the second",
    "start": "926380",
    "end": "935890"
  },
  {
    "text": "weird piece of code please try to guess",
    "start": "935890",
    "end": "942250"
  },
  {
    "text": "if this line gets it's a cute executed or not does this code print done or not",
    "start": "942250",
    "end": "952170"
  },
  {
    "text": "anyone wants to try keep in mind that",
    "start": "959430",
    "end": "965230"
  },
  {
    "text": "the first piece of code that I'll show you their showed you was deterministic it was 10 times then every time so I",
    "start": "965230",
    "end": "973240"
  },
  {
    "text": "didn't expect these to behave differently it doesn't get printed in",
    "start": "973240",
    "end": "981910"
  },
  {
    "text": "shape well depends on the number of cores that you have on your computer which is even",
    "start": "981910",
    "end": "989650"
  },
  {
    "text": "weirder because when a goroutine is spawned if you have another logical",
    "start": "989650",
    "end": "995080"
  },
  {
    "text": "processor ready to get X get started and execute that it's going to happen so you",
    "start": "995080",
    "end": "1000510"
  },
  {
    "text": "if you have two different processors you",
    "start": "1000510",
    "end": "1006090"
  },
  {
    "text": "get the run thing to execute both branches which means when the sleep is",
    "start": "1006090",
    "end": "1013020"
  },
  {
    "text": "encountered by the main go routine it will sleep it will not find another go",
    "start": "1013020",
    "end": "1019620"
  },
  {
    "text": "routine to schedule so you will keep waiting until it reaches the end of the",
    "start": "1019620",
    "end": "1025890"
  },
  {
    "text": "program and exit when at least one go routine reaches end of the program the",
    "start": "1025890",
    "end": "1032520"
  },
  {
    "text": "program ends so also the endless loop will end the other case if you're less",
    "start": "1032520",
    "end": "1041730"
  },
  {
    "text": "lucky and you only have one core the sleep will make the granting schedule",
    "start": "1041730",
    "end": "1048510"
  },
  {
    "text": "the other loop and spoiler this is not a yielding operation",
    "start": "1048510",
    "end": "1055140"
  },
  {
    "text": "incrementing a variable is not something that yields control it doesn't make sense because it is computational there",
    "start": "1055140",
    "end": "1060899"
  },
  {
    "text": "is no IO there is no blocking call here so this the runtime doesn't embed a scheduler",
    "start": "1060899",
    "end": "1067529"
  },
  {
    "text": "call in this snippet of code which means this goroutine will get executed and",
    "start": "1067529",
    "end": "1072929"
  },
  {
    "text": "will never yield execution again Gorton's have to yield its execution and",
    "start": "1072929",
    "end": "1081740"
  },
  {
    "text": "I discovered that because I was trying to deploy some code some very simple",
    "start": "1082340",
    "end": "1089010"
  },
  {
    "text": "piece of code which had an are coded main loop that only had to do some",
    "start": "1089010",
    "end": "1094140"
  },
  {
    "text": "computation and thus canary goroutine that did some other job I needed it to",
    "start": "1094140",
    "end": "1099870"
  },
  {
    "text": "be fast and to do some computation so it worked perfectly on my laptop which is a",
    "start": "1099870",
    "end": "1105419"
  },
  {
    "text": "quad-core but on my raspy 0 it didn't run go is supposed to run on every",
    "start": "1105419",
    "end": "1113279"
  },
  {
    "text": "architecture in the same way which didn't happen for me so if you want to",
    "start": "1113279",
    "end": "1119730"
  },
  {
    "text": "try and see if the code you are inspecting or writing is vulnerable to this kind of thing so to evolve to a",
    "start": "1119730",
    "end": "1126960"
  },
  {
    "text": "goroutine taking control of your program just set this variable to 1 at the start",
    "start": "1126960",
    "end": "1133080"
  },
  {
    "text": "of your program this will tell the runtime that you only have one core and it will execute everything synchronously",
    "start": "1133080",
    "end": "1139860"
  },
  {
    "text": "on one logical processor doesn't matter how many calls you have and I have found some weird behaviors appearing only if",
    "start": "1139860",
    "end": "1147990"
  },
  {
    "text": "you do that at the beginning of your tests and this is where I found an",
    "start": "1147990",
    "end": "1154740"
  },
  {
    "text": "actual production code containing this problem this was taken from a parser a",
    "start": "1154740",
    "end": "1163169"
  },
  {
    "text": "JSON parser they were analyzing UTF code",
    "start": "1163169",
    "end": "1170029"
  },
  {
    "text": "points to parse the JSON so they copy pasted these very same snippet of code",
    "start": "1170029",
    "end": "1177210"
  },
  {
    "text": "over and over in different places which worked every time except one as you can",
    "start": "1177210",
    "end": "1184590"
  },
  {
    "text": "see here they're ranging over a collection of which you don't see the type because go",
    "start": "1184590",
    "end": "1191610"
  },
  {
    "text": "as the column equal operator that allows you to say this variable is going to be",
    "start": "1191610",
    "end": "1198780"
  },
  {
    "text": "of the type of the single element of this collection so it allows you to",
    "start": "1198780",
    "end": "1205470"
  },
  {
    "text": "write code faster so without having to care about typing which is terrible",
    "start": "1205470",
    "end": "1212280"
  },
  {
    "text": "because once in all the code they were passing their list of bytes to this go",
    "start": "1212280",
    "end": "1219720"
  },
  {
    "text": "routine and if you have a list of byte this loop is never going to end because",
    "start": "1219720",
    "end": "1226920"
  },
  {
    "text": "it overflows every time it reaches to 155 and goes back to zero so this is",
    "start": "1226920",
    "end": "1233630"
  },
  {
    "text": "always true and the code completely hanged you want to ask something okay",
    "start": "1233630",
    "end": "1242300"
  },
  {
    "text": "but there is something even worse I was thinking okay I can if I can find a go",
    "start": "1242300",
    "end": "1248940"
  },
  {
    "text": "routine that doesn't yield execution I can potentially block one core of the",
    "start": "1248940",
    "end": "1254400"
  },
  {
    "text": "server but that's still not enough if you're trying to ddos some someone big",
    "start": "1254400",
    "end": "1261000"
  },
  {
    "text": "and you block one core in production and that's somewhat of a damage but that's",
    "start": "1261000",
    "end": "1267360"
  },
  {
    "text": "not that much you are very unlikely to find one non-blocking one blocking",
    "start": "1267360",
    "end": "1275400"
  },
  {
    "text": "routine for every core of the server so I needed something better which is what",
    "start": "1275400",
    "end": "1281970"
  },
  {
    "text": "I found because garbage collection cannot possibly be executed as synchronously",
    "start": "1281970",
    "end": "1290660"
  },
  {
    "text": "because it has to free memory you cannot free or allocate memory a synchronously",
    "start": "1290660",
    "end": "1297030"
  },
  {
    "text": "in a safe way if someone is concurrently trying to read or write that memory for",
    "start": "1297030",
    "end": "1303420"
  },
  {
    "text": "example if you're trying to access an array and you try to append an element",
    "start": "1303420",
    "end": "1308460"
  },
  {
    "text": "at the end you need to be sure that you're not putting the element somewhere",
    "start": "1308460",
    "end": "1314670"
  },
  {
    "text": "random and you want to be sure that there is no way the programmer has to think about",
    "start": "1314670",
    "end": "1322190"
  },
  {
    "text": "allocations if you want to have a garbage collected memory safe language",
    "start": "1322190",
    "end": "1327810"
  },
  {
    "text": "the garbage collector has to be synchronous looking at the sources of",
    "start": "1327810",
    "end": "1335490"
  },
  {
    "text": "the garbage collector I found out that they called the main functions function",
    "start": "1335490",
    "end": "1342510"
  },
  {
    "text": "that does that job stop the word when a garbage collection is needed the ranting",
    "start": "1342510",
    "end": "1349650"
  },
  {
    "text": "stops everything and asks every guru teen to yield execution which will",
    "start": "1349650",
    "end": "1357450"
  },
  {
    "text": "happen at the next function call so when the next function is going to be called",
    "start": "1357450",
    "end": "1362640"
  },
  {
    "text": "by a go routine it will instead stop and wait for the garbage collector to start",
    "start": "1362640",
    "end": "1369660"
  },
  {
    "text": "the word again but it asks politely which means that if you have a go",
    "start": "1369660",
    "end": "1376170"
  },
  {
    "text": "routine that doesn't want to give up context the garbage collection will never happen so if if you can stop one",
    "start": "1376170",
    "end": "1384750"
  },
  {
    "text": "garden in a non yielding way so you can find at least one go routine in a server",
    "start": "1384750",
    "end": "1390660"
  },
  {
    "text": "that does not yield execution you get to",
    "start": "1390660",
    "end": "1396060"
  },
  {
    "text": "stop the entire server and you don't even need to every run an infinite loop",
    "start": "1396060",
    "end": "1403140"
  },
  {
    "text": "as in the previous examples it just had to be a very long computation which the",
    "start": "1403140",
    "end": "1409980"
  },
  {
    "text": "runtime doesn't want to interrupt in that precise moment nothing else can",
    "start": "1409980",
    "end": "1415950"
  },
  {
    "text": "happen because every girl routine is waiting for the garbage collector to restart the world but the garbage",
    "start": "1415950",
    "end": "1422700"
  },
  {
    "text": "collector is waiting for the blocking goroutine to yield execution which will never almost never happen this is the",
    "start": "1422700",
    "end": "1431190"
  },
  {
    "text": "very same example as before but instead was sleep I'm just invoking the",
    "start": "1431190",
    "end": "1436680"
  },
  {
    "text": "collector you can put these in a Gollum script and see that these never runs",
    "start": "1436680",
    "end": "1444630"
  },
  {
    "text": "doesn't matter how many cores you have you can have 128 cores",
    "start": "1444630",
    "end": "1450180"
  },
  {
    "text": "these will not yield execution so these call to the garbage collector",
    "start": "1450180",
    "end": "1457530"
  },
  {
    "text": "will not be ending there are two",
    "start": "1457530",
    "end": "1467130"
  },
  {
    "text": "solutions to this and I saw both being used one is always perform your",
    "start": "1467130",
    "end": "1476130"
  },
  {
    "text": "computation in functions that you are sure the compiler will not compile",
    "start": "1476130",
    "end": "1481410"
  },
  {
    "text": "inline which is crazy don't do this this is not the solution this is just some",
    "start": "1481410",
    "end": "1487679"
  },
  {
    "text": "weird guy on the internet telling me that I was wrong because he wanted to be right do not roll your loop in a",
    "start": "1487679",
    "end": "1496290"
  },
  {
    "text": "recursive way just to prove me wrong please that is just unreadable the other",
    "start": "1496290",
    "end": "1501929"
  },
  {
    "text": "solution is channels and they perform",
    "start": "1501929",
    "end": "1507390"
  },
  {
    "text": "pretty good they're blocking the yield execution they allow you to pass data",
    "start": "1507390",
    "end": "1513450"
  },
  {
    "text": "from one voting to another in a safe way so they seemed to be a solution at least",
    "start": "1513450",
    "end": "1519270"
  },
  {
    "text": "for this problem spoiler they're not but I kept digging",
    "start": "1519270",
    "end": "1526700"
  },
  {
    "text": "so 30s have to yield execution scheduling must be taken into account",
    "start": "1526700",
    "end": "1533340"
  },
  {
    "text": "while you write your code be sure to put some yielding call in your loops if you",
    "start": "1533340",
    "end": "1539190"
  },
  {
    "text": "want them to be scheduled in a nice way this schedule is not pre-emptive it cannot pre-emptive routine it can only",
    "start": "1539190",
    "end": "1546570"
  },
  {
    "text": "wait for it to yield execution but then I wondered coming from a context of web",
    "start": "1546570",
    "end": "1553200"
  },
  {
    "text": "programming I always used to see web servers killed processes when they took",
    "start": "1553200",
    "end": "1560760"
  },
  {
    "text": "too long if you're used to PHP this is pretty standard you can set a maximum execution time for your server and when",
    "start": "1560760",
    "end": "1568620"
  },
  {
    "text": "it sees that the process is taking too long to render a page it just kills it so I wondered how do I kill a go routine",
    "start": "1568620",
    "end": "1575059"
  },
  {
    "text": "you can't well you can nuke the server farm which is not a scalable solution",
    "start": "1575059",
    "end": "1582470"
  },
  {
    "text": "the routine can return or the program has to end there is no",
    "start": "1582470",
    "end": "1589590"
  },
  {
    "text": "other way to stop a goroutine because the go statement does not return anything you cannot assign a variable",
    "start": "1589590",
    "end": "1596600"
  },
  {
    "text": "when you invoke a go statement the value will not be compiled in any way because",
    "start": "1596600",
    "end": "1603360"
  },
  {
    "text": "go does not return a pointer to the thread or to the ball routine",
    "start": "1603360",
    "end": "1609230"
  },
  {
    "text": "they must be signaled and asked to end so if you have some process in a server",
    "start": "1609230",
    "end": "1616080"
  },
  {
    "text": "doing some computation and the server needs to stop it the only way is for the Guru team to be waiting for a signal any",
    "start": "1616080",
    "end": "1623070"
  },
  {
    "text": "signal you can use a mutex you can use a channel you can use whatever you want but the go team needs to see a signal in",
    "start": "1623070",
    "end": "1630750"
  },
  {
    "text": "order to end because goroutines are not garbage collected if you lose the",
    "start": "1630750",
    "end": "1636240"
  },
  {
    "text": "references to all the guru teens and you should have no way to communicate with",
    "start": "1636240",
    "end": "1641759"
  },
  {
    "text": "them the garbage collector is not going to notice that the go teens will keep",
    "start": "1641759",
    "end": "1648210"
  },
  {
    "text": "being in memory and will pile up to",
    "start": "1648210",
    "end": "1654269"
  },
  {
    "text": "solve this problem the go language provides a construct which looks like a",
    "start": "1654269",
    "end": "1662850"
  },
  {
    "text": "nice solution doesn't really solve the problem but tries to select allows you",
    "start": "1662850",
    "end": "1670139"
  },
  {
    "text": "to read from multiple channels at the same time in a non blocking manner so if data is ready to be read you can perform",
    "start": "1670139",
    "end": "1678629"
  },
  {
    "text": "the computation you need you can also read if the channel has been as busy as been closed because you can read two",
    "start": "1678629",
    "end": "1685080"
  },
  {
    "text": "values from a channel the first one will contain data if there's any the second one will contain false if the channel",
    "start": "1685080",
    "end": "1691799"
  },
  {
    "text": "has been closed the default statement if you put there in the Select will be non",
    "start": "1691799",
    "end": "1698549"
  },
  {
    "text": "blocking if the default statement is not in the Select block the Select will stop",
    "start": "1698549",
    "end": "1705929"
  },
  {
    "text": "until one of the two channels here is ready this is used to signal goroutines",
    "start": "1705929",
    "end": "1712529"
  },
  {
    "text": "and send them information if you want for example to close a goroutine you",
    "start": "1712529",
    "end": "1718259"
  },
  {
    "text": "just use a channel to tell hey please stop die horribly some way do",
    "start": "1718259",
    "end": "1725530"
  },
  {
    "text": "something so I'm going back to PHP which is pretty widespread I still have to",
    "start": "1725530",
    "end": "1731200"
  },
  {
    "text": "understand why PHP allows you to set execution time for anything and if that",
    "start": "1731200",
    "end": "1740290"
  },
  {
    "text": "is exceeded the run time will kill it for you and even if you don't set this",
    "start": "1740290",
    "end": "1747730"
  },
  {
    "text": "variable even if you don't call this function ever anywhere in your code PHP is going to set it to 30 seconds which",
    "start": "1747730",
    "end": "1756250"
  },
  {
    "text": "is a pain if you're trying to write something in WebSocket but keep this in",
    "start": "1756250",
    "end": "1761410"
  },
  {
    "text": "mind PHP like many other line web oriented languages as a built-in system",
    "start": "1761410",
    "end": "1768040"
  },
  {
    "text": "to prevent you from running a thread for too long and so does go this is taken",
    "start": "1768040",
    "end": "1777580"
  },
  {
    "text": "from the official documentation of the standard go library timeout handler I",
    "start": "1777580",
    "end": "1783040"
  },
  {
    "text": "don't know if you can read it but it says that it returns an handler that",
    "start": "1783040",
    "end": "1788470"
  },
  {
    "text": "runs age which is your handler with a given time limit so at first I thought I",
    "start": "1788470",
    "end": "1796990"
  },
  {
    "text": "did miss something in my analysis I must have missed something because as far as",
    "start": "1796990",
    "end": "1802600"
  },
  {
    "text": "I understood there is no way to do this",
    "start": "1802600",
    "end": "1807840"
  },
  {
    "text": "not I was not surprised when I discovered that this is not magic",
    "start": "1810330",
    "end": "1815410"
  },
  {
    "text": "because the standard library is written in go so if the standard library can do",
    "start": "1815410",
    "end": "1822310"
  },
  {
    "text": "something that good can't do you are missing something this is a simple",
    "start": "1822310",
    "end": "1829900"
  },
  {
    "text": "example I just created that the most simple HTTP handler that you can build",
    "start": "1829900",
    "end": "1837990"
  },
  {
    "text": "because it only has the serve HTTP function that function slept for 10",
    "start": "1837990",
    "end": "1845740"
  },
  {
    "text": "seconds and printed something to standard output then I run the web",
    "start": "1845740",
    "end": "1851920"
  },
  {
    "text": "server with handler with a two-second maximum execution time limit",
    "start": "1851920",
    "end": "1858660"
  },
  {
    "text": "turns out these gets printed every time because the standard library cannot kill",
    "start": "1858660",
    "end": "1866130"
  },
  {
    "text": "your goroutine no one can unless you do unsafe stuff with the runtime which",
    "start": "1866130",
    "end": "1871890"
  },
  {
    "text": "requires you to use pointer arithmetic money in that case you're screwed anyway so don't even bother one nice thing",
    "start": "1871890",
    "end": "1880200"
  },
  {
    "text": "about go which I suggest you to do if you're inspecting some code looking for vulnerabilities is that it is very well",
    "start": "1880200",
    "end": "1888840"
  },
  {
    "text": "documented but it is documented on in one place which is the standard documentation and if you click on the",
    "start": "1888840",
    "end": "1897150"
  },
  {
    "text": "name of a functioning standard documentation you are dropped to the source code of that function",
    "start": "1897150",
    "end": "1905720"
  },
  {
    "text": "documentation tells you that it just runs for a given time but it doesn't",
    "start": "1905720",
    "end": "1911610"
  },
  {
    "text": "tell you how is that done the source code does so this is stripped from the",
    "start": "1911610",
    "end": "1921630"
  },
  {
    "text": "original sources is just a piece of the original standard library they are using",
    "start": "1921630",
    "end": "1930179"
  },
  {
    "text": "a GU routine to serve your HTTP server",
    "start": "1930179",
    "end": "1935610"
  },
  {
    "text": "and they are setting up a timer to write into a channel after a certain amount of",
    "start": "1935610",
    "end": "1943919"
  },
  {
    "text": "time has passed then they select in a blocking way from the two channels if",
    "start": "1943919",
    "end": "1951660"
  },
  {
    "text": "the go routine and first it handles if it means that it has handled the HTTP",
    "start": "1951660",
    "end": "1960990"
  },
  {
    "text": "request everything is gone right so all can proceed if a timeout has occurred",
    "start": "1960990",
    "end": "1969059"
  },
  {
    "text": "the selector will proceed but there was no code anywhere to tell my go routine",
    "start": "1969059",
    "end": "1975299"
  },
  {
    "text": "please die because the interface for",
    "start": "1975299",
    "end": "1980970"
  },
  {
    "text": "HTTP server does not give you a way",
    "start": "1980970",
    "end": "1986290"
  },
  {
    "text": "to tell the server please kill these goroutine if something is taking too long to end you cannot possibly tell the",
    "start": "1986290",
    "end": "1994720"
  },
  {
    "text": "run time to kill your goal team because it you don't accept a channel if you see",
    "start": "1994720",
    "end": "2000630"
  },
  {
    "text": "my code the survey HTTP GET our response",
    "start": "2000630",
    "end": "2005940"
  },
  {
    "text": "writer and an HTTP request which is not",
    "start": "2005940",
    "end": "2011460"
  },
  {
    "text": "something that allows me to to close my go routine if it's taking too long I",
    "start": "2011460",
    "end": "2016830"
  },
  {
    "text": "cannot possibly write the code to understand X in that signal so it keeps running this is a nice piece of advice",
    "start": "2016830",
    "end": "2025680"
  },
  {
    "text": "that I've learned by reading goal sources if the standard library can't do",
    "start": "2025680",
    "end": "2032550"
  },
  {
    "text": "something or can do something so can you the standard library is",
    "start": "2032550",
    "end": "2039390"
  },
  {
    "text": "written go pretty good one pretty readable one is very well documented and commented if you have a doubt if you",
    "start": "2039390",
    "end": "2047640"
  },
  {
    "text": "think the documentation is enough or the deployment ation doesn't give you what you want click on the function read the",
    "start": "2047640",
    "end": "2054810"
  },
  {
    "text": "sources I have found so many problem and so many missing things in the documentation that allowed me to find",
    "start": "2054810",
    "end": "2061740"
  },
  {
    "text": "vulnerabilities in production code of some companies that were relying blindly on the docs you should expect your code",
    "start": "2061740",
    "end": "2072690"
  },
  {
    "text": "to behave as the sources tell not just dogs there is another problem with a",
    "start": "2072690",
    "end": "2080429"
  },
  {
    "text": "call show that I showed you before this is the solution they were implemented",
    "start": "2080429",
    "end": "2086990"
  },
  {
    "text": "they decided to use two channels one to do some kind of job and another one to",
    "start": "2086990",
    "end": "2095669"
  },
  {
    "text": "end the process the process is in some way on the main go routine they just",
    "start": "2095669",
    "end": "2102800"
  },
  {
    "text": "sent some work to do they started these go routine and when the go team needed",
    "start": "2102800",
    "end": "2110310"
  },
  {
    "text": "to hand to end they wrote to a channel now try to find what's the problem with",
    "start": "2110310",
    "end": "2117030"
  },
  {
    "text": "this code",
    "start": "2117030",
    "end": "2119540"
  },
  {
    "text": "because there is a big one staring at us which is what happens if you want to use",
    "start": "2125049",
    "end": "2133220"
  },
  {
    "text": "more than one goroutine to do the job it happens your road code to run on one",
    "start": "2133220",
    "end": "2139400"
  },
  {
    "text": "core then you realize a this fancy new server has two let's spawn to go",
    "start": "2139400",
    "end": "2144740"
  },
  {
    "text": "routines instead of one to do the job and in turn I need to be done this doesn't scale so the best solution that",
    "start": "2144740",
    "end": "2153500"
  },
  {
    "text": "I saw a most brilliant one was that one they spawned it three times so that",
    "start": "2153500",
    "end": "2159140"
  },
  {
    "text": "thought well we have trigger things let's tell them all to end it works it",
    "start": "2159140",
    "end": "2165680"
  },
  {
    "text": "is a solution not a nice one maybe doesn't scale well because you have to",
    "start": "2165680",
    "end": "2172520"
  },
  {
    "text": "keep track of how many goroutines you have around which the runtime should be doing and it works so if you want to",
    "start": "2172520",
    "end": "2179720"
  },
  {
    "text": "have some unmaintainable code that is the right solution for you if you like",
    "start": "2179720",
    "end": "2185150"
  },
  {
    "text": "to maintain the code sometimes in the future you have to pick another solution",
    "start": "2185150",
    "end": "2190490"
  },
  {
    "text": "which is not the one on the right this solution has a huge problem but it is",
    "start": "2190490",
    "end": "2196940"
  },
  {
    "text": "very well adopted because if you look on Stack Overflow how do we end the",
    "start": "2196940",
    "end": "2202339"
  },
  {
    "text": "goroutine if I have many goroutines or questions like that all the solutions",
    "start": "2202339",
    "end": "2208180"
  },
  {
    "text": "contains something like these I tried to correct the solution I replied to the",
    "start": "2208180",
    "end": "2215390"
  },
  {
    "text": "original thread but my answer is not the most liked one doesn't look like they",
    "start": "2215390",
    "end": "2222589"
  },
  {
    "text": "like it in this case they were spawning",
    "start": "2222589",
    "end": "2227900"
  },
  {
    "text": "all the workers and then they were writing to the done channel in order to",
    "start": "2227900",
    "end": "2233240"
  },
  {
    "text": "make it scale they added the sound code in case of closure they decided when",
    "start": "2233240",
    "end": "2239930"
  },
  {
    "text": "someone signals this go team to close propagate the signal over this channel",
    "start": "2239930",
    "end": "2245329"
  },
  {
    "text": "and return which kills a goroutine which seemed like a proper solution",
    "start": "2245329",
    "end": "2251840"
  },
  {
    "text": "but what happens when the last guru teen tries to write to the channel the main",
    "start": "2251840",
    "end": "2258110"
  },
  {
    "text": "goal teen is not waiting for the last one to end so you have a one guru teen",
    "start": "2258110",
    "end": "2263210"
  },
  {
    "text": "the last one of the chain hanging this example new channel created goroutine",
    "start": "2263210",
    "end": "2269420"
  },
  {
    "text": "please die it tries to write to the done it reads to dinner from the done channel",
    "start": "2269420",
    "end": "2276740"
  },
  {
    "text": "then it tries to write to it but no one is listening so it blocked agar teen is",
    "start": "2276740",
    "end": "2283850"
  },
  {
    "text": "a very small thing it requires only sixteen bytes of memory so it takes a",
    "start": "2283850",
    "end": "2292280"
  },
  {
    "text": "long time before you realize what is eating up your memory and if an attacker",
    "start": "2292280",
    "end": "2300650"
  },
  {
    "text": "realizes that before you this is going to bend that is going to end really bad because you have no way to debug this",
    "start": "2300650",
    "end": "2308950"
  },
  {
    "text": "unless of course you are here the right",
    "start": "2308950",
    "end": "2314270"
  },
  {
    "text": "way to close guru teens is not this one",
    "start": "2314270",
    "end": "2320090"
  },
  {
    "text": "either because I saw that fix so I write",
    "start": "2320090",
    "end": "2325910"
  },
  {
    "text": "to the Dan Channel and then in order to allow the last goroutine to end I just",
    "start": "2325910",
    "end": "2331550"
  },
  {
    "text": "read from the sine channel so I collect the signal at the end well doesn't work",
    "start": "2331550",
    "end": "2337370"
  },
  {
    "text": "because as I said before you can't know how many guru teens around so in this",
    "start": "2337370",
    "end": "2344360"
  },
  {
    "text": "case what's the most likely thing to happen is that you have your main",
    "start": "2344360",
    "end": "2349640"
  },
  {
    "text": "routine to write to the Dan channel some working writing back to it and since the",
    "start": "2349640",
    "end": "2357170"
  },
  {
    "text": "go runtime is really aware of your code and where your code is in memory it",
    "start": "2357170",
    "end": "2362990"
  },
  {
    "text": "detects that the mas the closest piece of code to the level one cache in your",
    "start": "2362990",
    "end": "2368960"
  },
  {
    "text": "processor is the last that run so it's faster to schedule that back again so it",
    "start": "2368960",
    "end": "2374000"
  },
  {
    "text": "will reschedule your main goal routine which will read from the damn channel and all the other GU routines will not",
    "start": "2374000",
    "end": "2381410"
  },
  {
    "text": "have the chance to read that signal because the main goal routine took the signal",
    "start": "2381410",
    "end": "2388520"
  },
  {
    "text": "from the channel which is not there anymore so they'll keep running which is even worse that the previous solution",
    "start": "2388520",
    "end": "2394550"
  },
  {
    "text": "which only leaked one these are the solution leaks all of them but one this",
    "start": "2394550",
    "end": "2401300"
  },
  {
    "text": "is the right solution just close the channel when you close the channel all",
    "start": "2401300",
    "end": "2407270"
  },
  {
    "text": "the Select statements that are trying to read from it will read from it a null",
    "start": "2407270",
    "end": "2414740"
  },
  {
    "text": "value but they will need they will read from your channel which means you can",
    "start": "2414740",
    "end": "2420290"
  },
  {
    "text": "broadcast over a channel and have all the guru teens listening ready to detect",
    "start": "2420290",
    "end": "2429280"
  },
  {
    "text": "that your code is asking politely for",
    "start": "2429280",
    "end": "2434300"
  },
  {
    "text": "your goal teens to end and you can do",
    "start": "2434300",
    "end": "2439640"
  },
  {
    "text": "that with the first loop that I show you which is not very used and I still have",
    "start": "2439640",
    "end": "2445280"
  },
  {
    "text": "to understand why or you can also read from the channel the status of the",
    "start": "2445280",
    "end": "2450590"
  },
  {
    "text": "channel if it is closed and if the status is not okay just and your go team",
    "start": "2450590",
    "end": "2459250"
  },
  {
    "text": "the main takeaway is from my journey into the go runtime our keep in mind",
    "start": "2459280",
    "end": "2466610"
  },
  {
    "text": "race conditions for loops only declare were bound one variable it's very",
    "start": "2466610",
    "end": "2471980"
  },
  {
    "text": "tempting to spawn goroutines in loops that is not a good idea unless of course",
    "start": "2471980",
    "end": "2478040"
  },
  {
    "text": "you mask your variables with variables that are called in the same way to prevent race conditions which is",
    "start": "2478040",
    "end": "2484040"
  },
  {
    "text": "unreadable always dive into sources the standard library is written in go and",
    "start": "2484040",
    "end": "2490240"
  },
  {
    "text": "most of that go tries to keep these in mind for example you can interrupt an",
    "start": "2490240",
    "end": "2497270"
  },
  {
    "text": "HTTP request by closing a channel but that is not intuitive you should always",
    "start": "2497270",
    "end": "2504340"
  },
  {
    "text": "dive into what you're seeing that doesn't really adds up to what you",
    "start": "2504340",
    "end": "2509420"
  },
  {
    "text": "expect it to be try to follow signals when you see channels using a way so",
    "start": "2509420",
    "end": "2515960"
  },
  {
    "text": "that they're never closed always try to see if there are co-routines expecting some values on",
    "start": "2515960",
    "end": "2523250"
  },
  {
    "text": "them because they will likely be leaked and those bugs can be can go unnoticed",
    "start": "2523250",
    "end": "2530110"
  },
  {
    "text": "for a long time since go routines are not that big and last check for yielding",
    "start": "2530110",
    "end": "2538400"
  },
  {
    "text": "calls long pieces of code that do not return value or make blocking calls are",
    "start": "2538400",
    "end": "2544990"
  },
  {
    "text": "atomic in go they cannot be interrupted and no garbage collection can happen",
    "start": "2544990",
    "end": "2551420"
  },
  {
    "text": "during those pieces of code so always be sure to follow your code if some",
    "start": "2551420",
    "end": "2558050"
  },
  {
    "text": "attacker can find some piece of code in your go library that allows them to call",
    "start": "2558050",
    "end": "2565220"
  },
  {
    "text": "a function that is thirty second to run that is going to block all your server",
    "start": "2565220",
    "end": "2573170"
  },
  {
    "text": "for thirty seconds and that was it thank",
    "start": "2573170",
    "end": "2579140"
  },
  {
    "text": "you do you have any questions about",
    "start": "2579140",
    "end": "2587960"
  },
  {
    "text": "these yes oh Cutler",
    "start": "2587960",
    "end": "2595119"
  },
  {
    "text": "right so the question is does it still apply to go 1.8 yes it does e and it",
    "start": "2601080",
    "end": "2609730"
  },
  {
    "text": "will likely apply to all future one point star go versions because those are",
    "start": "2609730",
    "end": "2615640"
  },
  {
    "text": "not o days those are not vulnerabilities inside the runtime those are design",
    "start": "2615640",
    "end": "2621010"
  },
  {
    "text": "flows so they will stay there until we see go 2.0 which will probably keep",
    "start": "2621010",
    "end": "2628210"
  },
  {
    "text": "those because those flaws allow the runtime to be efficient those are",
    "start": "2628210",
    "end": "2634570"
  },
  {
    "text": "necessary evils to have an efficient go runtime there is no easy way to take",
    "start": "2634570",
    "end": "2640150"
  },
  {
    "text": "that away like for example knowing when",
    "start": "2640150",
    "end": "2645220"
  },
  {
    "text": "to schedule that is important yeah",
    "start": "2645220",
    "end": "2651869"
  },
  {
    "text": "so you're saying so you're asking okay",
    "start": "2668290",
    "end": "2680630"
  },
  {
    "text": "the proper way to yield is to use channels but which one is more efficient",
    "start": "2680630",
    "end": "2686360"
  },
  {
    "text": "to use non inline function or to use channels well I didn't benchmark that",
    "start": "2686360",
    "end": "2693490"
  },
  {
    "text": "but one thing I'm pretty sure about is that it's pretty hard to see to foresee",
    "start": "2693490",
    "end": "2700700"
  },
  {
    "text": "if the compiler is going to compile your function inline or not that is the only",
    "start": "2700700",
    "end": "2706580"
  },
  {
    "text": "issue with that because you could potentially have an in a non inline",
    "start": "2706580",
    "end": "2711980"
  },
  {
    "text": "function that gets inline compiled in the next go version because that is not in the in the design document they",
    "start": "2711980",
    "end": "2719560"
  },
  {
    "text": "decided to cap that for for them died aside evening the next version they are",
    "start": "2719560",
    "end": "2725870"
  },
  {
    "text": "not going to inline anything or to inline everything so unless your function is deeply recursive its pre are",
    "start": "2725870",
    "end": "2734840"
  },
  {
    "text": "to say if it is going to be inlined or not yes",
    "start": "2734840",
    "end": "2744099"
  },
  {
    "text": "or what do you mean if you want to give up context so your question is how can I",
    "start": "2746680",
    "end": "2759150"
  },
  {
    "text": "yield execution e yes these coal will",
    "start": "2759150",
    "end": "2779080"
  },
  {
    "text": "tell the runtime to schedule another Gorton these is a yield",
    "start": "2779080",
    "end": "2786480"
  },
  {
    "text": "I can't you so you're asking if these",
    "start": "2792070",
    "end": "2799180"
  },
  {
    "text": "will still execute yeah",
    "start": "2799180",
    "end": "2810570"
  },
  {
    "text": "you have an infinite loop it will keep running no there is no way from outside that goroutine to tell it to stop",
    "start": "2810570",
    "end": "2816090"
  },
  {
    "text": "unless it's listened in front of that call yet the cool language itself should",
    "start": "2816090",
    "end": "2830430"
  },
  {
    "text": "be able to stop a goroutine but it",
    "start": "2830430",
    "end": "2836730"
  },
  {
    "text": "doesn't really do that if you look into the sources I don't know if you are go",
    "start": "2836730",
    "end": "2843150"
  },
  {
    "text": "developer but if you look into the sources you see that the ranting doesn't",
    "start": "2843150",
    "end": "2848250"
  },
  {
    "text": "really care about 3nt calls so if you",
    "start": "2848250",
    "end": "2855060"
  },
  {
    "text": "are asking the runtime should be able to preemptively preemptively interrupt a",
    "start": "2855060",
    "end": "2862170"
  },
  {
    "text": "goo routine it could by in this case it does not they didn't write it that way",
    "start": "2862170",
    "end": "2868380"
  },
  {
    "text": "they can't do that so even if you use some weird reflection things you still",
    "start": "2868380",
    "end": "2877950"
  },
  {
    "text": "can't preemptively interrupt a goroutine you can't tell the runtime to stop",
    "start": "2877950",
    "end": "2885570"
  },
  {
    "text": "schedule well you can tell the runtime to stop scheduling algorithm but it means that with the reflection you have",
    "start": "2885570",
    "end": "2891000"
  },
  {
    "text": "to deep dive into the runtime find the viral that is keeping track of that protein and raising that value we've",
    "start": "2891000",
    "end": "2896490"
  },
  {
    "text": "done safe pointer which is not good in production you could that you could",
    "start": "2896490",
    "end": "2902250"
  },
  {
    "text": "probably do that I'm not sure I haven't tried but no there is no simple way to preemptively stop a goroutine",
    "start": "2902250",
    "end": "2910670"
  },
  {
    "text": "anyone else yeah",
    "start": "2914390",
    "end": "2920269"
  },
  {
    "text": "I did not contact them because they are aware of those stuff I put together some",
    "start": "2928500",
    "end": "2936960"
  },
  {
    "text": "piece of design documents from 2013 in which they were deliberately deciding to",
    "start": "2936960",
    "end": "2944880"
  },
  {
    "text": "take this call they decided that they were taking the risk of having some",
    "start": "2944880",
    "end": "2951480"
  },
  {
    "text": "server somewhere paying the price for their choices instead of give up efficiency they decided to do that there",
    "start": "2951480",
    "end": "2960360"
  },
  {
    "text": "is a document from 2013 and then there you can see it from comments inside the",
    "start": "2960360",
    "end": "2967500"
  },
  {
    "text": "sources if you read the sources you see that who wrote the scheduler which is only 4,000 lines long not that big you",
    "start": "2967500",
    "end": "2976140"
  },
  {
    "text": "see that they are saying these will not allow us to know where this is going",
    "start": "2976140",
    "end": "2984890"
  },
  {
    "text": "yet there was actually purpose of this talk but yeah I was thinking about doing",
    "start": "3000700",
    "end": "3006950"
  },
  {
    "text": "that after after is but does this",
    "start": "3006950",
    "end": "3012109"
  },
  {
    "text": "information are public they're just not on the spotlight under the spotlight so",
    "start": "3012109",
    "end": "3017119"
  },
  {
    "text": "yeah if you think yeah you're right there should be more awareness about",
    "start": "3017119",
    "end": "3022999"
  },
  {
    "text": "these I will I will contact the go team about that Thanks",
    "start": "3022999",
    "end": "3032019"
  },
  {
    "text": "okay so thank you for coming and whoever",
    "start": "3033700",
    "end": "3041299"
  },
  {
    "text": "of goroutines [Applause]",
    "start": "3041299",
    "end": "3050530"
  }
]