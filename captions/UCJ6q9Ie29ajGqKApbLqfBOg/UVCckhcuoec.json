[
  {
    "text": "uh now it's time to start uh hello let me introduce to you about myself my name",
    "start": "520",
    "end": "5920"
  },
  {
    "text": "is y Park and I'm from Republic of Korea and I'm a security",
    "start": "5920",
    "end": "12040"
  },
  {
    "text": "researcher now let's start this session in this talk I would like to talk about the Android pcker and how can you impact",
    "start": "12040",
    "end": "19039"
  },
  {
    "text": "the Android application protected by Android Pekka generally with your unrooted Android",
    "start": "19039",
    "end": "26640"
  },
  {
    "text": "device first of all we should know about the Android Packer there are some papers that explaining features of Android",
    "start": "26960",
    "end": "33920"
  },
  {
    "text": "Packers so we are going to re we are going to briefly leave it recently there",
    "start": "33920",
    "end": "39920"
  },
  {
    "text": "are many commercial and Packers such Asami banker degard and LEF D Android",
    "start": "39920",
    "end": "46800"
  },
  {
    "text": "Packers are similarly working to upx upx is a very simple Packer for binary on",
    "start": "46800",
    "end": "52920"
  },
  {
    "text": "Windows and Linux generally most of Packers are based on execution compression technique and the Android",
    "start": "52920",
    "end": "59399"
  },
  {
    "text": "Packers are also based on excution and compression technique too and we we can distinguish them to two types by main P",
    "start": "59399",
    "end": "67560"
  },
  {
    "text": "main packing mechanism they use first one is memory patch based P packing and",
    "start": "67560",
    "end": "73600"
  },
  {
    "text": "second one is dynamic code loading based packing now we examine how these two",
    "start": "73600",
    "end": "78880"
  },
  {
    "text": "packing mechanism work first one is dynamic code loading",
    "start": "78880",
    "end": "84320"
  },
  {
    "text": "based packing this type of packing loads is cable code in file or in memory and",
    "start": "84320",
    "end": "90520"
  },
  {
    "text": "there are some interfaces that is provided by Android platform for loading executable code dynamically these",
    "start": "90520",
    "end": "97280"
  },
  {
    "text": "interfaces are on Java level and on Native level both on on Java level for",
    "start": "97280",
    "end": "103240"
  },
  {
    "text": "example there are text class loader test class loader and text file these interfaces are documented API on the",
    "start": "103240",
    "end": "110280"
  },
  {
    "text": "other hand there are also some undocumented interfaces like method openex file in Tex class Tex file class",
    "start": "110280",
    "end": "118039"
  },
  {
    "text": "these undocumented interfaces are in form of private method or native function but we can invoke them through",
    "start": "118039",
    "end": "125240"
  },
  {
    "text": "Java Reflection and some techniques that calling unexported functions documented",
    "start": "125240",
    "end": "131239"
  },
  {
    "text": "interface is take files as parameter but as you can as you can see on slide",
    "start": "131239",
    "end": "136440"
  },
  {
    "text": "documented interfaces take by array it means that we can load executable code on memory dynamically usually it is",
    "start": "136440",
    "end": "143560"
  },
  {
    "text": "known that ex code on memory can be loaded because there there is no public",
    "start": "143560",
    "end": "148599"
  },
  {
    "text": "API for it in platform apart from interfaces showing in this slide uh",
    "start": "148599",
    "end": "154280"
  },
  {
    "text": "there are more interfaces can be used for dynamic code",
    "start": "154280",
    "end": "159360"
  },
  {
    "text": "loading this slide shows some functions for dynamic code loading and relations between the functions on the slide you",
    "start": "160200",
    "end": "167560"
  },
  {
    "text": "can see function names in green and it represent documented interfaces and red",
    "start": "167560",
    "end": "173000"
  },
  {
    "text": "ones are undocumented interfaces when you want to use Dynamic code loading technique for your Android application",
    "start": "173000",
    "end": "179120"
  },
  {
    "text": "we usually going to use P class loer and DX class loer class on top of the slide",
    "start": "179120",
    "end": "184640"
  },
  {
    "text": "if we see below the of the two classes these classes invoke three functions in",
    "start": "184640",
    "end": "190280"
  },
  {
    "text": "green of De F class uh the three functions in green of Dex F class are",
    "start": "190280",
    "end": "195799"
  },
  {
    "text": "invoking red functions just below of them as you can see these functions take two types of parameters first one is a",
    "start": "195799",
    "end": "203000"
  },
  {
    "text": "path of of De file to load and the other one is a bite array so these functions",
    "start": "203000",
    "end": "210080"
  },
  {
    "text": "we can load some code into our running Android application functions that load",
    "start": "210080",
    "end": "215480"
  },
  {
    "text": "uh load code into memory dynamically are undocumented but as I mentioned in previous slide we can call the functions",
    "start": "215480",
    "end": "222640"
  },
  {
    "text": "through Java flection and some techniques calling unexported",
    "start": "222640",
    "end": "228680"
  },
  {
    "text": "functions now we are going to see how Android Packers use the dynamic code loading technique in this slide",
    "start": "229159",
    "end": "235760"
  },
  {
    "text": "protected APK file has two files first one is that classic deex file for unpacking and loading decrypted deex",
    "start": "235760",
    "end": "242640"
  },
  {
    "text": "file and the other one is original deex file it encrypted and it will be decrypted at in runtime when the",
    "start": "242640",
    "end": "250480"
  },
  {
    "text": "protected APK is installed and executed certain class of classes de that",
    "start": "250480",
    "end": "255920"
  },
  {
    "text": "performs unpacking and loading is executed most verely it can be achieved",
    "start": "255920",
    "end": "261799"
  },
  {
    "text": "by modifying application tag in Android manifest file the unpack code executed",
    "start": "261799",
    "end": "267240"
  },
  {
    "text": "most most verely can be form of java fight code or motion code by loading",
    "start": "267240",
    "end": "274199"
  },
  {
    "text": "additional unpacking module in this slide unpacking routine is in unpa ASO in Native level unpa ASO loads encrypted",
    "start": "274199",
    "end": "283520"
  },
  {
    "text": "de fire to memory and decrypt it on memory",
    "start": "283520",
    "end": "288840"
  },
  {
    "text": "and then decrypted deex is stored to Temporary file after that loader in classes Dex low is the C Dex that is",
    "start": "288840",
    "end": "296479"
  },
  {
    "text": "just uh stored to file temporarily Ro functions for dynamic code loading like",
    "start": "296479",
    "end": "302919"
  },
  {
    "text": "Tex class loader and P class loader and at last decp Dex file is removed a lot",
    "start": "302919",
    "end": "310440"
  },
  {
    "text": "of under Packers are employing this mechanism now uh this method is a little",
    "start": "310440",
    "end": "319600"
  },
  {
    "text": "different from previous one a method in previous slide is using tempor dropped by to load it decrypted file but this",
    "start": "319600",
    "end": "327280"
  },
  {
    "text": "method loads it in memory directly not in file this method Works through",
    "start": "327280",
    "end": "332360"
  },
  {
    "text": "undocumented interfaces that take F array as parameter that I mentioned previously by working like that it will",
    "start": "332360",
    "end": "339880"
  },
  {
    "text": "fix the Recon of previous method by temporary file now this is packing mechanism based",
    "start": "339880",
    "end": "347520"
  },
  {
    "text": "on memory patch previous method used the mechanism that loads decrypted de in",
    "start": "347520",
    "end": "353080"
  },
  {
    "text": "memory directly in this method Andro Packer encrypts the partier code of original text so there is no additional",
    "start": "353080",
    "end": "360000"
  },
  {
    "text": "loading of deck two key differences are whether to encrypt all areas or or",
    "start": "360000",
    "end": "365639"
  },
  {
    "text": "hottier areas of original deck and whether it loads secondary Tex file",
    "start": "365639",
    "end": "371360"
  },
  {
    "text": "dynamically as you can see on this slide under Packer firstly modifies the application tag in Android manifestor",
    "start": "371360",
    "end": "377599"
  },
  {
    "text": "file by doing so unpacking Soo file can be easily loaded into memory by",
    "start": "377599",
    "end": "383240"
  },
  {
    "text": "unpacking Soo in encrypted areas of classes Dex on memory can be decrypted",
    "start": "383240",
    "end": "389000"
  },
  {
    "text": "and exed and because this method doesn't use secondary de fire it doesn't cause a",
    "start": "389000",
    "end": "394720"
  },
  {
    "text": "class load problem that is usually caused by the process system server I personally think that this type of",
    "start": "394720",
    "end": "401240"
  },
  {
    "text": "packing mechanism is the most close implementation of execution compression technique at this point we can know the",
    "start": "401240",
    "end": "409240"
  },
  {
    "text": "one common weakness of Android Packers that the almost Android Packers unpack",
    "start": "409240",
    "end": "414280"
  },
  {
    "text": "directly after excution I actively utilize the wickness to do unpacking",
    "start": "414280",
    "end": "421520"
  },
  {
    "text": "uh okay now I will talk about how to logically unpack thesea Android",
    "start": "422680",
    "end": "428520"
  },
  {
    "text": "applications this is a picture we seen in previous slide as you can see that red line box represent the wickness of",
    "start": "428520",
    "end": "435199"
  },
  {
    "text": "this packing mechanism the weakness of this mechanism is that it drops file that has decreed de so you can just pick",
    "start": "435199",
    "end": "442800"
  },
  {
    "text": "up the drop buy like picking up coin it's",
    "start": "442800",
    "end": "448199"
  },
  {
    "text": "simple and this method doesn't drop by and decrypted deex is loaded in memory",
    "start": "448240",
    "end": "453759"
  },
  {
    "text": "directly according to the weakness of Android Packers we identified and crypted original deex is going to be",
    "start": "453759",
    "end": "460520"
  },
  {
    "text": "already decrypted after a main activity appears on the screen of device because",
    "start": "460520",
    "end": "465919"
  },
  {
    "text": "recent Android Packers are unpacking all encrypted code just after execution therefore we can dump it and that time",
    "start": "465919",
    "end": "473720"
  },
  {
    "text": "it is quite simple in this case as I know and all",
    "start": "473720",
    "end": "480080"
  },
  {
    "text": "you do know this mechanism also can be simply broken through memory dump actually all packing mechanism I",
    "start": "480080",
    "end": "487599"
  },
  {
    "text": "mentioned pre before can be broken by memory dump it is also",
    "start": "487599",
    "end": "494400"
  },
  {
    "text": "straightforward however it's not simple as we think because recent Android Packers uh employ various anti analysis",
    "start": "495080",
    "end": "501919"
  },
  {
    "text": "techniques such as anti debuging appication and exion environmental detection so it would be very difficult",
    "start": "501919",
    "end": "509520"
  },
  {
    "text": "and timec consuming work to someone on attacker view like app cracker and someone on Defender view like moer and",
    "start": "509520",
    "end": "516320"
  },
  {
    "text": "list but you can unpack the pack under applications employing these anti analysis techniques with my unpacking",
    "start": "516320",
    "end": "522599"
  },
  {
    "text": "method even it doesn't need a root privilege so all people who want to unpack with their unrooted device can",
    "start": "522599",
    "end": "531000"
  },
  {
    "text": "protected Android application easily now let's see how it work",
    "start": "531000",
    "end": "538320"
  },
  {
    "text": "uh each one of challenges can be solved through through existing anti anti",
    "start": "539880",
    "end": "545120"
  },
  {
    "text": "analysis techniques however real world pack and application emplo various anti",
    "start": "545120",
    "end": "550519"
  },
  {
    "text": "analysis techniques multiply that is why we can't analyze the pack and application fast and easily so we need",
    "start": "550519",
    "end": "558279"
  },
  {
    "text": "to utilize combination of solutions for these",
    "start": "558279",
    "end": "563320"
  },
  {
    "text": "challenges to analyze the p p application easily you need to satisfy",
    "start": "563480",
    "end": "568600"
  },
  {
    "text": "these conditions first is that don't use emulator and don't require root privilege environment",
    "start": "568600",
    "end": "574920"
  },
  {
    "text": "detection techniques such as anti-vm and routin detection has been being Advanced consistently and papers related to these",
    "start": "574920",
    "end": "582519"
  },
  {
    "text": "techniques has been released every year and next don't use debugger that is",
    "start": "582519",
    "end": "587959"
  },
  {
    "text": "based on P trace and jdwp jdwp is Java debug wired protocol and it uses for",
    "start": "587959",
    "end": "594399"
  },
  {
    "text": "deing of Java application it will be detected by anti deving this things",
    "start": "594399",
    "end": "600120"
  },
  {
    "text": "always bother us uh if you want to analyze the p p application with the dynamic analysis maybe you will need the",
    "start": "600120",
    "end": "607399"
  },
  {
    "text": "tool like debuger but if you simply want to unpack it you you don't surely need",
    "start": "607399",
    "end": "612880"
  },
  {
    "text": "the tool like debuger next uh applications developed",
    "start": "612880",
    "end": "618320"
  },
  {
    "text": "by Java language traditionally utilize code of application against the reverse engineering and a lot of Android Packers",
    "start": "618320",
    "end": "625079"
  },
  {
    "text": "protect their unpacking routine through additional packing and of ation so",
    "start": "625079",
    "end": "630480"
  },
  {
    "text": "analyzing OPC code mely would be very hard and time consuming work for app",
    "start": "630480",
    "end": "636639"
  },
  {
    "text": "cracker or M on the list usually a item before a last item pick up coin and dump",
    "start": "636639",
    "end": "643560"
  },
  {
    "text": "represent a logical unpacking method uh we seen in previous slide it means it",
    "start": "643560",
    "end": "649519"
  },
  {
    "text": "means that we need some method to extract fire to open and dump memory whenever we want and last item is about",
    "start": "649519",
    "end": "657639"
  },
  {
    "text": "making process environment for un Hing in my unpacking method I did it through hooking this is the key of of this",
    "start": "657639",
    "end": "665560"
  },
  {
    "text": "unpacking method this method hooks functions what whatever we want on",
    "start": "665560",
    "end": "670639"
  },
  {
    "text": "unlooted device all tricks used in this unpacking method are based on",
    "start": "670639",
    "end": "677519"
  },
  {
    "text": "hooking now I will talk about how can we hook the function on unrooted device in",
    "start": "677920",
    "end": "684560"
  },
  {
    "text": "Android platform there is a feature which I called wait for debug feature we can deug the Android application through",
    "start": "684560",
    "end": "690920"
  },
  {
    "text": "the feature if the Dey is set wait for deug flag it will be waiting for",
    "start": "690920",
    "end": "696760"
  },
  {
    "text": "debugger just after execution in this state any application code developed by Android application developer is not",
    "start": "696760",
    "end": "704399"
  },
  {
    "text": "executed and even optimized deex file is not loaded yet uh if you see memory you",
    "start": "704399",
    "end": "711200"
  },
  {
    "text": "can see that the apps APK file is loaded but o but odex file in Dex cachy",
    "start": "711200",
    "end": "716959"
  },
  {
    "text": "directory is not loaded in that state if we connect to Target application through jdwp uh the",
    "start": "716959",
    "end": "724519"
  },
  {
    "text": "application will be normally executed and initialized and then the apps code will be executed finally at this point",
    "start": "724519",
    "end": "731480"
  },
  {
    "text": "when anti analysis code of application detects jdwp connection the P of application will be terminated",
    "start": "731480",
    "end": "738000"
  },
  {
    "text": "incorrectly to circumvent anti jdwp we can just inject our unpacking code into",
    "start": "738000",
    "end": "744639"
  },
  {
    "text": "app process that is waiting for deug through jdwp and detach from",
    "start": "744639",
    "end": "750760"
  },
  {
    "text": "C injection technique through jdwp is already wellknown technique so I will not review it in this",
    "start": "750760",
    "end": "757120"
  },
  {
    "text": "to with this tra we will not be detected by anti jdwp and we didn't use P Trace",
    "start": "757120",
    "end": "764480"
  },
  {
    "text": "so we also be not be detected by antip Trace and anti GDB and we did unpacking",
    "start": "764480",
    "end": "771120"
  },
  {
    "text": "on unoted device so we can be we can't be detected by enir detection by the way",
    "start": "771120",
    "end": "778760"
  },
  {
    "text": "there is one problem Android manifest file have to be set theable flag to",
    "start": "778760",
    "end": "783880"
  },
  {
    "text": "enable jdwp in Target applications process in Android platform so we needed to do re repackaging the pack Andro",
    "start": "783880",
    "end": "792000"
  },
  {
    "text": "application we want to analyze because of repackaging we are going to face a",
    "start": "792000",
    "end": "797360"
  },
  {
    "text": "problem caused by self Integrity check however we can solve this problem through",
    "start": "797360",
    "end": "804160"
  },
  {
    "text": "hooking when we connect to the app that is waiting for deaga through jdwp we",
    "start": "804160",
    "end": "809440"
  },
  {
    "text": "send a request method request method entry event to the app process then if",
    "start": "809440",
    "end": "815079"
  },
  {
    "text": "the apps main thread on D pure machine tries to interpret and execute any",
    "start": "815079",
    "end": "820199"
  },
  {
    "text": "method the main thread will be suspended and we can control execution flow of the main main thread using control of the",
    "start": "820199",
    "end": "827600"
  },
  {
    "text": "main thread we catch uh we we can inject our unpacking code into the app process",
    "start": "827600",
    "end": "834160"
  },
  {
    "text": "and it construct construct process environment for unpacking throughout hooking even there are no extion flow we",
    "start": "834160",
    "end": "840920"
  },
  {
    "text": "didn't know because the app process that is waiting for diva is suspended before",
    "start": "840920",
    "end": "846120"
  },
  {
    "text": "finish app process initialization therefore we can inject our unpacking code into the app process",
    "start": "846120",
    "end": "853279"
  },
  {
    "text": "through jdwp and detach from it uh with this injected unpacking module everyone",
    "start": "853279",
    "end": "860800"
  },
  {
    "text": "who want to unpack can easily extract unpacked fire or dump memory from the",
    "start": "860800",
    "end": "866480"
  },
  {
    "text": "almost 100 Packers which have been released at most recently and so the",
    "start": "866480",
    "end": "871959"
  },
  {
    "text": "title of this session is we can still correct you and from now I will talk about how",
    "start": "871959",
    "end": "880600"
  },
  {
    "text": "well known Android Packers such as deard and uami work first is a dexguard the",
    "start": "880600",
    "end": "886639"
  },
  {
    "text": "deard is very powerful under Packer and oppos cator that that is it's close to protector so I focus on only how to",
    "start": "886639",
    "end": "894680"
  },
  {
    "text": "unpack it first of all you can see some log of love cat this this log is generated by Tex",
    "start": "894680",
    "end": "901519"
  },
  {
    "text": "card in Android platform when the Android application tries to load the additional text file dynamically that L",
    "start": "901519",
    "end": "908600"
  },
  {
    "text": "is the in the slide are generated by diic pure machine so we can know whether",
    "start": "908600",
    "end": "914839"
  },
  {
    "text": "that the fact of Android application dynamically lows additional Dex file",
    "start": "914839",
    "end": "921240"
  },
  {
    "text": "easily class encryption of Des card loads two Des file dynamically first one is unpacking code including class",
    "start": "922240",
    "end": "929040"
  },
  {
    "text": "descriptor and the loader second one is unpacked Dex to extract the unpacked deex I hooked open function in bionic",
    "start": "929040",
    "end": "937160"
  },
  {
    "text": "actually your unpacking method can be different from me because you can hook every functions you want so you can make",
    "start": "937160",
    "end": "944199"
  },
  {
    "text": "your own unpacking modu with your creative with my unpacking method you",
    "start": "944199",
    "end": "949560"
  },
  {
    "text": "can just wait until that the unpack text are instructed but in case of Des card",
    "start": "949560",
    "end": "956160"
  },
  {
    "text": "despite the instructed Dex is unpack class in the unpa Dex is officiated so",
    "start": "956160",
    "end": "962079"
  },
  {
    "text": "we can't analyze code logic well however we can anyway extract unpa DX from an",
    "start": "962079",
    "end": "967639"
  },
  {
    "text": "Android application packed by Des card next is eami theam is also well",
    "start": "967639",
    "end": "975759"
  },
  {
    "text": "known under the Packer developed by a company in China you load additional",
    "start": "975759",
    "end": "981279"
  },
  {
    "text": "Dex additional Dex directly on memory so we can't extract the unpacked de through",
    "start": "981279",
    "end": "987920"
  },
  {
    "text": "simply hooking of open function moreover it checks Integrity Integrity of each",
    "start": "987920",
    "end": "993240"
  },
  {
    "text": "APK file so we need to circumvent it this type of Integrity checking is circumvented through that we redirect",
    "start": "993240",
    "end": "1000600"
  },
  {
    "text": "accessing of repackaged APK file in data app directory to original AP in data",
    "start": "1000600",
    "end": "1006440"
  },
  {
    "text": "local TMP directory I copied by doing so we can bypass the Integrity check routin",
    "start": "1006440",
    "end": "1013399"
  },
  {
    "text": "of isami easily and then we can dump memory because isami loads on pack Dex",
    "start": "1013399",
    "end": "1019000"
  },
  {
    "text": "memory directly and it performs Dynamic loading through the function dbm text",
    "start": "1019000",
    "end": "1024600"
  },
  {
    "text": "fire open parer in lb dbm model and the function is exported so we can easily",
    "start": "1024600",
    "end": "1030720"
  },
  {
    "text": "hook it and extract unpa de uh leab is also an Android Packer I",
    "start": "1030720",
    "end": "1039360"
  },
  {
    "text": "think it is little known this Packer is developed by a company in Republic of",
    "start": "1039360",
    "end": "1044720"
  },
  {
    "text": "Korea the LEF also checks its Integrity in same way with Jammy so we can",
    "start": "1044720",
    "end": "1050080"
  },
  {
    "text": "circumvent it in same way with before and you can exract unpa Dex through",
    "start": "1050080",
    "end": "1056160"
  },
  {
    "text": "hooking a open function because the LEF uses the temporary file to load impact tax",
    "start": "1056160",
    "end": "1062799"
  },
  {
    "text": "dynamically now okay now I will demonstrate two wellknown Android Packers bank and APK",
    "start": "1063480",
    "end": "1071520"
  },
  {
    "text": "protect first one is a bank bker is a under Packer developed by a company in China and it uses temporary fire to load",
    "start": "1071520",
    "end": "1079320"
  },
  {
    "text": "unpacked fire and it employs various anti analysis technique such as anti jdwp antip trace and emulat detection",
    "start": "1079320",
    "end": "1087159"
  },
  {
    "text": "now I'm going to show you how to unpack",
    "start": "1087159",
    "end": "1091159"
  },
  {
    "text": "it I prepared the stample packed by Bank uh people hand so let me install it",
    "start": "1099120",
    "end": "1108039"
  },
  {
    "text": "first",
    "start": "1108039",
    "end": "1110759"
  },
  {
    "text": "it is uh setable so if I launch this app it will be uh terminated incorrectly",
    "start": "1115320",
    "end": "1122640"
  },
  {
    "text": "because it's it's Sur Integrity",
    "start": "1122640",
    "end": "1127679"
  },
  {
    "text": "check this app",
    "start": "1131000",
    "end": "1135360"
  },
  {
    "text": "uh after a moment it is terminated Suddenly It's because self integr to",
    "start": "1136720",
    "end": "1144159"
  },
  {
    "text": "check so let me unpack",
    "start": "1144159",
    "end": "1148200"
  },
  {
    "text": "it what is",
    "start": "1155520",
    "end": "1158919"
  },
  {
    "text": "problem for",
    "start": "1167720",
    "end": "1171720"
  },
  {
    "text": "displ",
    "start": "1214919",
    "end": "1217440"
  },
  {
    "text": "station oh there is some problem uh now now",
    "start": "1223960",
    "end": "1230679"
  },
  {
    "text": "uh let me unpack it",
    "start": "1230679",
    "end": "1234600"
  },
  {
    "text": "continuously after installation uh now I will pick",
    "start": "1238520",
    "end": "1246120"
  },
  {
    "text": "it first I need to set vable debug",
    "start": "1246640",
    "end": "1251919"
  },
  {
    "text": "feature set",
    "start": "1251919",
    "end": "1255399"
  },
  {
    "text": "yeah if I launch the app this will be waiting for thebo like this and",
    "start": "1271960",
    "end": "1281278"
  },
  {
    "text": "now I will inject my code into app process",
    "start": "1302600",
    "end": "1308600"
  },
  {
    "text": "oh screen is too small yeah it's done now I",
    "start": "1330960",
    "end": "1336840"
  },
  {
    "text": "can unpacking is done we can extract it",
    "start": "1336840",
    "end": "1343080"
  },
  {
    "text": "yeah as you can see u under class class",
    "start": "1356159",
    "end": "1361400"
  },
  {
    "text": "Point text file is unpa text so let me extract it and compare it with P one",
    "start": "1361400",
    "end": "1370240"
  },
  {
    "text": "yeah I I will open it with",
    "start": "1383440",
    "end": "1387759"
  },
  {
    "text": "jb2 uh first this is pack packed one by banku",
    "start": "1403039",
    "end": "1409760"
  },
  {
    "text": "oh no no as you can see class list is is less",
    "start": "1409760",
    "end": "1419080"
  },
  {
    "text": "it's small but if you see unpack",
    "start": "1419080",
    "end": "1424200"
  },
  {
    "text": "one can see all of classes and code",
    "start": "1424200",
    "end": "1430880"
  },
  {
    "text": "um yeah let me repackage it with unpacked Tex",
    "start": "1430880",
    "end": "1437440"
  },
  {
    "text": "we can repackage it with uh",
    "start": "1445640",
    "end": "1449840"
  },
  {
    "text": "apk2 yeah and replace classes Tex file with my my",
    "start": "1461080",
    "end": "1468679"
  },
  {
    "text": "unpacked",
    "start": "1468679",
    "end": "1471240"
  },
  {
    "text": "one and just repackage",
    "start": "1476279",
    "end": "1480760"
  },
  {
    "text": "it and I need to sign it",
    "start": "1488399",
    "end": "1493760"
  },
  {
    "text": "and I will inst it",
    "start": "1515360",
    "end": "1520200"
  },
  {
    "text": "yeah it's success uh if I launch the app this app is unpacked so we got now uh",
    "start": "1540520",
    "end": "1548200"
  },
  {
    "text": "complet unpacked APK file and",
    "start": "1548200",
    "end": "1553600"
  },
  {
    "text": "next is APK protect APK protect patches",
    "start": "1558919",
    "end": "1564000"
  },
  {
    "text": "encrypted code regions of Cl DX image in memory to unpack APK protector checks",
    "start": "1564000",
    "end": "1570120"
  },
  {
    "text": "it's Integrity of optimized de image in memory but we don't modify coding process of repackaging we just insert a",
    "start": "1570120",
    "end": "1577960"
  },
  {
    "text": "de flag into into Android manifestor file in APK file so it's not a problem",
    "start": "1577960",
    "end": "1584080"
  },
  {
    "text": "to us I'll will show you",
    "start": "1584080",
    "end": "1588440"
  },
  {
    "text": "I also prepared the sample protected by APK protect beforehand so I need",
    "start": "1600919",
    "end": "1608279"
  },
  {
    "text": "to install it",
    "start": "1608279",
    "end": "1612760"
  },
  {
    "text": "it this have also set is be is setable so it will but it's not terminated",
    "start": "1619279",
    "end": "1628120"
  },
  {
    "text": "because we didn't modify the code and APK protected checks is integrity check",
    "start": "1628120",
    "end": "1633679"
  },
  {
    "text": "Integrity uh using odex image on memory so with did this is not problem to us",
    "start": "1633679",
    "end": "1642919"
  },
  {
    "text": "we can unpack it uh using memory dump",
    "start": "1649840",
    "end": "1655360"
  },
  {
    "text": "[Music]",
    "start": "1691430",
    "end": "1694489"
  },
  {
    "text": "and inject I inject my compacting module the injection is done",
    "start": "1707799",
    "end": "1716320"
  },
  {
    "text": "and now we can dump memory dump is very simple",
    "start": "1716320",
    "end": "1725799"
  },
  {
    "text": "now in temp directory there is impact be file it's a impact deex file",
    "start": "1743519",
    "end": "1751880"
  },
  {
    "text": "so let me exract it and compare it with P",
    "start": "1751880",
    "end": "1757919"
  },
  {
    "text": "one uh unpa be file we trct is odex file so we",
    "start": "1766200",
    "end": "1772640"
  },
  {
    "text": "needed to do odex thing it's very simple",
    "start": "1772640",
    "end": "1777559"
  },
  {
    "text": "things is done and I will open it with JB",
    "start": "1783200",
    "end": "1790120"
  },
  {
    "text": "uh this is this is a p one",
    "start": "1800200",
    "end": "1805720"
  },
  {
    "text": "so the class list is follow we see rain activity code on",
    "start": "1806200",
    "end": "1813480"
  },
  {
    "text": "create",
    "start": "1813480",
    "end": "1815840"
  },
  {
    "text": "method JV uh failed de compilation because the code is encrypted and we F",
    "start": "1820600",
    "end": "1828559"
  },
  {
    "text": "code on create method uh t f disassembly",
    "start": "1828559",
    "end": "1833799"
  },
  {
    "text": "so but we if we if we see the impact",
    "start": "1833799",
    "end": "1839880"
  },
  {
    "text": "one yeah we can see code of method on create uh another class is",
    "start": "1842799",
    "end": "1852039"
  },
  {
    "text": "saying you can see the code of method on receive but impact",
    "start": "1856399",
    "end": "1863600"
  },
  {
    "text": "one oh you can see you can't see the",
    "start": "1870519",
    "end": "1877200"
  },
  {
    "text": "code let's back to the",
    "start": "1878960",
    "end": "1882880"
  },
  {
    "text": "presentation now it's conclusion uh we with this unpacking method you don't need to analyze unpack code detail you",
    "start": "1884960",
    "end": "1892240"
  },
  {
    "text": "need just a prediction and tracing through hooking some functions and I developed a powerful tool that can",
    "start": "1892240",
    "end": "1898679"
  },
  {
    "text": "analyze a complicated and overated code fastly and easily I will show you when",
    "start": "1898679",
    "end": "1904639"
  },
  {
    "text": "I'm given a chance for it and now as you know uh we can unpack almost 100 Packers",
    "start": "1904639",
    "end": "1911480"
  },
  {
    "text": "with weight for debug feature and function hooking through code injection and also I think that compan devel",
    "start": "1911480",
    "end": "1919039"
  },
  {
    "text": "companies developing Android Packer leads to response to this technique so",
    "start": "1919039",
    "end": "1924840"
  },
  {
    "text": "uh this is the end of my presentation and thank you",
    "start": "1924840",
    "end": "1929890"
  },
  {
    "text": "[Applause]",
    "start": "1929890",
    "end": "1936840"
  },
  {
    "text": "yeah any question",
    "start": "1936840",
    "end": "1942840"
  },
  {
    "text": "yeah pardon oh",
    "start": "1942840",
    "end": "1948080"
  },
  {
    "text": "oh yeah I want to do so but my",
    "start": "1948080",
    "end": "1953600"
  },
  {
    "text": "company didn't permit it yet so if my company permit it I I can do it I can do",
    "start": "1953600",
    "end": "1961639"
  },
  {
    "text": "it",
    "start": "1961639",
    "end": "1964159"
  },
  {
    "text": "legit nothing yeah okay it's done",
    "start": "1966840",
    "end": "1971799"
  },
  {
    "text": "and thank you",
    "start": "1974639",
    "end": "1978840"
  }
]