[
  {
    "text": "hi uh Welcome to our talk in this talk we are going to bypass AMD platform",
    "start": "4560",
    "end": "11719"
  },
  {
    "text": "secure boot we are going to activate some soft locked features um on a Tesla",
    "start": "11719",
    "end": "17880"
  },
  {
    "text": "and we go one step further and extract some Hardware bound authentication keys",
    "start": "17880",
    "end": "23080"
  },
  {
    "text": "from Teslas this story began around one year ago when Ole uh approached us o already",
    "start": "23080",
    "end": "32000"
  },
  {
    "text": "owned a Tesla and was interested in how its digital systems worked in detail but",
    "start": "32000",
    "end": "38480"
  },
  {
    "text": "ever since Tesla switched to AMD based CPUs o wasn't able to be the king of his",
    "start": "38480",
    "end": "45000"
  },
  {
    "text": "car anymore so he contacted us because we worked a lot with AMD in the past uh",
    "start": "45000",
    "end": "51760"
  },
  {
    "text": "we started in around 2019 to published research about its um secure processor",
    "start": "51760",
    "end": "58920"
  },
  {
    "text": "especially but why would you jailbreak a car in the first place well many reasons one of",
    "start": "58920",
    "end": "66119"
  },
  {
    "text": "them could be like o that you want to just look around so curiosity one could",
    "start": "66119",
    "end": "71400"
  },
  {
    "text": "be that you want to entirely replace its software or something in between you",
    "start": "71400",
    "end": "76680"
  },
  {
    "text": "just want to activate some features you would normally pay for one of which in a",
    "start": "76680",
    "end": "81920"
  },
  {
    "text": "Tesla could be the rear seat heaters um even though your Tesla might",
    "start": "81920",
    "end": "87479"
  },
  {
    "text": "have them installed in order to be able to use them you would have to pay another",
    "start": "87479",
    "end": "93960"
  },
  {
    "text": "$300 so in the talk we are going to um we are going to first analyze the boot",
    "start": "93960",
    "end": "100640"
  },
  {
    "text": "and firmware security of Teslas in the second part Nicholas will show you how",
    "start": "100640",
    "end": "106520"
  },
  {
    "text": "we applied voltage glitching to the system and in the third part hun Nicholas will get into some crypto and",
    "start": "106520",
    "end": "113240"
  },
  {
    "text": "see and show you how we um extracted some car unique secrets from the",
    "start": "113240",
    "end": "119240"
  },
  {
    "text": "firmware PPM so this is a model 3 car computer",
    "start": "119240",
    "end": "125320"
  },
  {
    "text": "it's located behind the glove box you can buy it on eBay from salvaged cars for around",
    "start": "125320",
    "end": "131680"
  },
  {
    "text": "$400 when you take the top cap off then you will see the infotainment and",
    "start": "131680",
    "end": "137160"
  },
  {
    "text": "connectivity ECU um this is the one that we will focus on in this talk however to give",
    "start": "137160",
    "end": "143480"
  },
  {
    "text": "you a complete picture there's more layers to this um the whole thing is water cooled there's some space for a GP",
    "start": "143480",
    "end": "149840"
  },
  {
    "text": "Q daughter board for the premium cars and then one layer below there's this custom dual sock arm64 based system this",
    "start": "149840",
    "end": "157879"
  },
  {
    "text": "is the autopilot which we will not cover today so back to this IC board if we",
    "start": "157879",
    "end": "164920"
  },
  {
    "text": "flip this one there's um The Backs side and the first chip that's uh that's",
    "start": "164920",
    "end": "172680"
  },
  {
    "text": "important to us is the Gateway an nxp based microcontroller power PC um",
    "start": "172680",
    "end": "178360"
  },
  {
    "text": "instruction set architecture um has some free archers based operating system it has an SD card for storing",
    "start": "178360",
    "end": "185120"
  },
  {
    "text": "some some logs it boots from internal flash but most importantly it manages",
    "start": "185120",
    "end": "190560"
  },
  {
    "text": "the so-called car configuration the car configuration lists um what um paid or",
    "start": "190560",
    "end": "198840"
  },
  {
    "text": "otherwise hardware and software features the car has um they effect car",
    "start": "198840",
    "end": "204360"
  },
  {
    "text": "performance the battery capacity yes there are Teslas out there with a bigger battery than what the user is able to",
    "start": "204360",
    "end": "210959"
  },
  {
    "text": "use and the level of autopilot the car region is another detail um and for us and this",
    "start": "210959",
    "end": "219280"
  },
  {
    "text": "demonstration we are mostly interested in the rear seat heaters the second chip and the one we",
    "start": "219280",
    "end": "225920"
  },
  {
    "text": "feel most competent for is this infotainment Apu it's a zen1 CPU AMD Zen",
    "start": "225920",
    "end": "233159"
  },
  {
    "text": "one it has a Vega GPU inside it runs a more or less recent Linux um has a it",
    "start": "233159",
    "end": "239840"
  },
  {
    "text": "firmware and recovery system on SPI Flash and the system and user partition are stored in nvme this chip was",
    "start": "239840",
    "end": "246159"
  },
  {
    "text": "previously based on Intel and in the very beginning on Nvidia Tegra we're not the first ones to attack Teslas the",
    "start": "246159",
    "end": "253400"
  },
  {
    "text": "freef fall and over the a tech um did um used a web kit based um exploit with",
    "start": "253400",
    "end": "261320"
  },
  {
    "text": "some more zero days to get all the way to can buas and open the trunk then at",
    "start": "261320",
    "end": "266960"
  },
  {
    "text": "Pon to own FL acetate um did the same same thing this time on chromium because Tesla switched from webkit to chromium",
    "start": "266960",
    "end": "274000"
  },
  {
    "text": "the Tor attack complemented this whole scheme by taking a drone that would spawn an access point the Tesla Service",
    "start": "274000",
    "end": "280880"
  },
  {
    "text": "Network that the Tesla would um automatically connect to and um then they used a um a buck in the conman DHCP",
    "start": "280880",
    "end": "290360"
  },
  {
    "text": "uh stack uh sin active did the same thing again at Ponto own 2022 what all of these attacks have in",
    "start": "290360",
    "end": "297840"
  },
  {
    "text": "common is that they threaten model is these are Outsiders who um are either",
    "start": "297840",
    "end": "303639"
  },
  {
    "text": "completely remote or in physical proximity they want to get access to the car uh anyways and um how they did it",
    "start": "303639",
    "end": "311720"
  },
  {
    "text": "was through software based vulnerabilities these were all fixed over the air um by",
    "start": "311720",
    "end": "317720"
  },
  {
    "text": "Tesla our threat model is a bit different we are an Insider and we already have physical digital access to",
    "start": "317720",
    "end": "324639"
  },
  {
    "text": "the car our goal is to tweak the car Beyond its normal um behavior and for",
    "start": "324639",
    "end": "331600"
  },
  {
    "text": "example activate some soft lock features it could also help to lift repair and regulation restrictions so as an Insider",
    "start": "331600",
    "end": "339240"
  },
  {
    "text": "we're not limited to software-based attacks um and let's look at how this works",
    "start": "339240",
    "end": "346440"
  },
  {
    "text": "during boot so um when you hook up to the infotainment system um is through to its",
    "start": "346440",
    "end": "355280"
  },
  {
    "text": "serial pot you will see that the x86 boots up with with um cor boot an open",
    "start": "355280",
    "end": "361600"
  },
  {
    "text": "source x86 firmware project and this first cor boot stage will then verify",
    "start": "361600",
    "end": "367840"
  },
  {
    "text": "load and verify the Tesla OS loader a component by by Tesla that will um load",
    "start": "367840",
    "end": "375039"
  },
  {
    "text": "the actual Linux kernel the first component that's stored on the nvme and not on the SPI Flash the Linux kernel",
    "start": "375039",
    "end": "381680"
  },
  {
    "text": "now will only load the root file system um and and continue running if it's able",
    "start": "381680",
    "end": "387960"
  },
  {
    "text": "to verify this one so what you see here is a chain of trust",
    "start": "387960",
    "end": "393160"
  },
  {
    "text": "these four stages secure each other through um yeah cryptographic",
    "start": "393160",
    "end": "399520"
  },
  {
    "text": "signatures so how do we get our root shell here many options we could spawn a Serial shell on boot we could add an SSH",
    "start": "399520",
    "end": "407000"
  },
  {
    "text": "key what we did is we added a non SSH password to the system but this of",
    "start": "407000",
    "end": "412120"
  },
  {
    "text": "course requires changes to the root file system so this will break this chain of trust",
    "start": "412120",
    "end": "419039"
  },
  {
    "text": "and the Linux kernel won't happily verify the root file system anymore but",
    "start": "419039",
    "end": "424319"
  },
  {
    "text": "fail how did it um verify it in the first place that's through DM Varity DM",
    "start": "424319",
    "end": "430039"
  },
  {
    "text": "Varity is a target for the device mapper kernel module that allows transparent",
    "start": "430039",
    "end": "435520"
  },
  {
    "text": "Integrity checking of block devices on Linux so whenever a block is read into memory it's also hashed and parallel",
    "start": "435520",
    "end": "442599"
  },
  {
    "text": "using a hash tree or a Merkel tree um it can then then um efficiently compute",
    "start": "442599",
    "end": "450000"
  },
  {
    "text": "if um this is part of a trusted file system and the whole file system can be",
    "start": "450000",
    "end": "456039"
  },
  {
    "text": "represented by this root hash intermediate hashes are stored alongside the data on",
    "start": "456039",
    "end": "461520"
  },
  {
    "text": "disk so what we did here is we went into the Linux kernel and did a very simple P",
    "start": "461520",
    "end": "468520"
  },
  {
    "text": "patch by um saying don't restart on corruption but ignore",
    "start": "468520",
    "end": "474759"
  },
  {
    "text": "Corruptions as you can um as you might imagine this will will now allow the",
    "start": "474759",
    "end": "480319"
  },
  {
    "text": "Linux kernel to accept the root file system but now the Linux kernel is the tainted one three ways to fix this",
    "start": "480319",
    "end": "488280"
  },
  {
    "text": "either we try to generate a valid signature of the Linux kernel that the Tesla would accept well we can't do that",
    "start": "488280",
    "end": "496479"
  },
  {
    "text": "because we don't control the private key to the public key used here secondly we could uh exchange The Trusted public Key",
    "start": "496479",
    "end": "503319"
  },
  {
    "text": "by the Tesla S loader we tried to do that through some cor boot utils but didn't succeed so we went again for the",
    "start": "503319",
    "end": "510319"
  },
  {
    "text": "hecky way you see here an exerpt from Gyra on the left you see the um disassembly on the right the",
    "start": "510319",
    "end": "516719"
  },
  {
    "text": "decompilation of the teslo S loader and there you can see this um big if statement so if this succeeds it says",
    "start": "516719",
    "end": "525600"
  },
  {
    "text": "successfully verified image otherwise it um says invelop boot image and won't continue booting so we just took that",
    "start": "525600",
    "end": "533279"
  },
  {
    "text": "conditional jump here replaced by an unconditional jump U no rocket science um and this allowed us to boot the Linux",
    "start": "533279",
    "end": "540240"
  },
  {
    "text": "kernel or would have allowed us um if it wasn't for cor now failing to verify the",
    "start": "540240",
    "end": "546200"
  },
  {
    "text": "Tesla S loader I'm not going to bore you with this patch it's the very same Library it's the V boot Library verified",
    "start": "546200",
    "end": "553519"
  },
  {
    "text": "boot library that was originally developed by the Chromebook team and added to core boot that's used here we",
    "start": "553519",
    "end": "559040"
  },
  {
    "text": "did a very similar patch here and when we did this patch the system would just",
    "start": "559040",
    "end": "565600"
  },
  {
    "text": "not boot anymore at all why is that enter the AMD secq processor an arm V7",
    "start": "565600",
    "end": "574120"
  },
  {
    "text": "microcontroller included in the AMD soor highly privileged has a variety of responsibilities one of which is um",
    "start": "574120",
    "end": "581480"
  },
  {
    "text": "being Hardware root of trust so um the way it works is that this amds comes up",
    "start": "581480",
    "end": "588600"
  },
  {
    "text": "before the x86 even comes up and its off chip boot loader will verify the very",
    "start": "588600",
    "end": "594880"
  },
  {
    "text": "first code that's run on the x86 in this case the core boot payload but since we",
    "start": "594880",
    "end": "600560"
  },
  {
    "text": "patched it it will fail this whole procedure is called AMD platform secure Boot and even though we've looked at a",
    "start": "600560",
    "end": "607440"
  },
  {
    "text": "lot of AMD based systems in the past years this is the first time we've seen this in action so bad luck here we could",
    "start": "607440",
    "end": "615200"
  },
  {
    "text": "now go ahead and Patch the off chip bootloader and we have the tooling to do that PSP tool for example allows you to",
    "start": "615200",
    "end": "621279"
  },
  {
    "text": "change these data structures but then the ROM boot loader won't accept the off chip boot loader anymore well it's a",
    "start": "621279",
    "end": "627079"
  },
  {
    "text": "chain of trust after all so we need to talk about the sp's",
    "start": "627079",
    "end": "633079"
  },
  {
    "text": "vulnerabilities in 2019 there was the off bootloader buffer",
    "start": "633079",
    "end": "638120"
  },
  {
    "text": "overflow that was very handy in this case but because it allowed arbitrary code execution and that also means you",
    "start": "638120",
    "end": "644040"
  },
  {
    "text": "can skip the check it was fixed by firmware updates in 2020 even handier",
    "start": "644040",
    "end": "649160"
  },
  {
    "text": "there was a ROM bootloader buff overflow so ROM stands for read only memory as you probably know this one wasn't",
    "start": "649160",
    "end": "655600"
  },
  {
    "text": "fixable through software by AMD and to our knowledge it was only fixed in newer Generations like Zen 2",
    "start": "655600",
    "end": "662880"
  },
  {
    "text": "and onwards but it seemed Tesla got special treatment here and this these",
    "start": "662880",
    "end": "668600"
  },
  {
    "text": "fixes were back ported to Tesla's then one Apu as well so let's step back now and look at",
    "start": "668600",
    "end": "675160"
  },
  {
    "text": "Tesla's security as far as we know in 2014 there were open X servers all",
    "start": "675160",
    "end": "680560"
  },
  {
    "text": "around hardcoded passwords you just had to connect via internet and basically were roote there was also no code",
    "start": "680560",
    "end": "686800"
  },
  {
    "text": "signing now in 2023 looks pretty solid there's firmware and operating system",
    "start": "686800",
    "end": "692560"
  },
  {
    "text": "signing there's a chain of trust during Boot and this fruit of trust most importantly is in the AMD sock so with",
    "start": "692560",
    "end": "702040"
  },
  {
    "text": "that we had to get another weapon from our Arenal and with this I'm going to",
    "start": "702040",
    "end": "707360"
  },
  {
    "text": "hand you over to",
    "start": "707360",
    "end": "710839"
  },
  {
    "text": "Nicholas okay so I'll talk about um how we hotwired the infotainment system um",
    "start": "713200",
    "end": "719040"
  },
  {
    "text": "um for this we will first have a look at how a regular early boot verification looks like um at first the AMD secure",
    "start": "719040",
    "end": "726600"
  },
  {
    "text": "processor loads the AMD root key from SPI flash uh then computes uh the hash",
    "start": "726600",
    "end": "732200"
  },
  {
    "text": "of this AMD root key and Compares uh the computed hash to a hash that is uh",
    "start": "732200",
    "end": "737760"
  },
  {
    "text": "stored in readon memory um if this is successful the ASP",
    "start": "737760",
    "end": "743440"
  },
  {
    "text": "loads and verifies the offer boot loader using this Arc and um what's interesting",
    "start": "743440",
    "end": "748720"
  },
  {
    "text": "here is that um Tesla has its own custom root key here and doesn't use the AMD",
    "start": "748720",
    "end": "754880"
  },
  {
    "text": "one anymore but um as an attacker we would like um to replace uh the Rd root Key by",
    "start": "754880",
    "end": "762720"
  },
  {
    "text": "our own one uh but in this case um the key verification would uh would just",
    "start": "762720",
    "end": "768360"
  },
  {
    "text": "fail uh and the boot process is uh stopped completely um but let's uh think",
    "start": "768360",
    "end": "774360"
  },
  {
    "text": "about what happens if we could do something about this here",
    "start": "774360",
    "end": "779720"
  },
  {
    "text": "um okay so fault injection is a method where an attacker induces faults by altering the ic's environment for this",
    "start": "779720",
    "end": "787600"
  },
  {
    "text": "we could um hit an IC with a laser or with em radiation for example but we",
    "start": "787600",
    "end": "793279"
  },
  {
    "text": "could also try to modify the clock signal or the supply voltage um in case of voltage glitching",
    "start": "793279",
    "end": "800839"
  },
  {
    "text": "um the supply voltage is lower for a very short amount of time um just as you",
    "start": "800839",
    "end": "805920"
  },
  {
    "text": "can see on the picture below um let's consider a password check where",
    "start": "805920",
    "end": "812600"
  },
  {
    "text": "the user types in a wrong password normally um this check would just fail but if we are now if we now inject a",
    "start": "812600",
    "end": "819480"
  },
  {
    "text": "fault into the processor it may ignore the comparison and um this check would not",
    "start": "819480",
    "end": "825079"
  },
  {
    "text": "fail anymore but unfortunately in in most",
    "start": "825079",
    "end": "830199"
  },
  {
    "text": "cases we introduce other errors like uh system locks or system resets so most",
    "start": "830199",
    "end": "836160"
  },
  {
    "text": "faults are useless for us as an attacker and that's why we um have to adjust the",
    "start": "836160",
    "end": "841560"
  },
  {
    "text": "glitch uh which brings us to the three main challenges um first we need to figure",
    "start": "841560",
    "end": "847519"
  },
  {
    "text": "out when the targeted check happens um to be able to precisely trigger the actual",
    "start": "847519",
    "end": "853360"
  },
  {
    "text": "attack and secondly it is important to choose uh proper glitch parameters uh in",
    "start": "853360",
    "end": "859160"
  },
  {
    "text": "case of voltage glitching uh these could be for example the voltage drop steepness or the width of the voltage",
    "start": "859160",
    "end": "866160"
  },
  {
    "text": "drop and um finally um we must be able to identify if the attack was successful",
    "start": "866160",
    "end": "874040"
  },
  {
    "text": "and we must find a way to reset the target uh as fast as possible so that we are able to try as many parameters as",
    "start": "874040",
    "end": "880680"
  },
  {
    "text": "possible in a short amount of time okay so that's uh from where we are",
    "start": "880680",
    "end": "886720"
  },
  {
    "text": "coming uh the arc is replaced by our own key but its verification is going to fail",
    "start": "886720",
    "end": "892720"
  },
  {
    "text": "um so our plan is now to glitch the AR verification so that our custom root",
    "start": "892720",
    "end": "898279"
  },
  {
    "text": "root key is accepted and this would also allow us um to reassign the modified of",
    "start": "898279",
    "end": "903880"
  },
  {
    "text": "boot loader which then will get verified uh or successfully verified",
    "start": "903880",
    "end": "909519"
  },
  {
    "text": "too um to make this happen uh we first need to find out uh when the AR verif",
    "start": "909519",
    "end": "915959"
  },
  {
    "text": "Arc verification takes place during boot um here you can see a SPI trace of a",
    "start": "915959",
    "end": "922120"
  },
  {
    "text": "regular boot with the original uh root key and the only thing we can tell is that the MD root key is loaded right",
    "start": "922120",
    "end": "929800"
  },
  {
    "text": "here but we don't know when it gets verified um but now we flipped a bit in",
    "start": "929800",
    "end": "935519"
  },
  {
    "text": "the uh root key verification and captured another SPI trace and with the modified uh root key",
    "start": "935519",
    "end": "944120"
  },
  {
    "text": "the SPI activity just stops completely uh after loading the key",
    "start": "944120",
    "end": "949440"
  },
  {
    "text": "which means that the root key must be verified um during this red dotted time",
    "start": "949440",
    "end": "955160"
  },
  {
    "text": "window here and this time window is small enough uh so that we can just Brute Force um uh the correct time when",
    "start": "955160",
    "end": "962680"
  },
  {
    "text": "we have to trigger the glitch okay so after this root key verification the object boot loader is",
    "start": "962680",
    "end": "969120"
  },
  {
    "text": "loaded and and verified of course okay so we now know when we have",
    "start": "969120",
    "end": "976680"
  },
  {
    "text": "to trigger the glitch but we don't know um how to inject the actual voltage drop um for this we will have a look at um",
    "start": "976680",
    "end": "983639"
  },
  {
    "text": "how the AMD so is powered um it is powered by an external voltage regulator",
    "start": "983639",
    "end": "989519"
  },
  {
    "text": "that is connected uh to the S3 I2 bus of the AMD s so so that the S so itself is",
    "start": "989519",
    "end": "996399"
  },
  {
    "text": "able to set its its own voltage um it supports uh two voltage",
    "start": "996399",
    "end": "1002440"
  },
  {
    "text": "domains uh namely V sock and V core and we stock is responsible uh to to power",
    "start": "1002440",
    "end": "1009199"
  },
  {
    "text": "the uh amdp here so we stock is the voltage rail we would like to inject our",
    "start": "1009199",
    "end": "1015120"
  },
  {
    "text": "voltage drop okay um our glitch setup um looks",
    "start": "1015120",
    "end": "1020600"
  },
  {
    "text": "like this um we have a Teensy micro um Tey microcontroller that is responsible",
    "start": "1020600",
    "end": "1026678"
  },
  {
    "text": "uh for the whole glitch it is uh connected to the sv2 bus so that we are able to inject svi 2 packets um and so",
    "start": "1026679",
    "end": "1035438"
  },
  {
    "text": "that we are able to control the output voltage of the voltage regulator directly um it is also connected uh to",
    "start": "1035439",
    "end": "1042760"
  },
  {
    "text": "the ATX reset line so that we are able to reset the target as fast as possible and of course monitors uh the spib bus",
    "start": "1042760",
    "end": "1051600"
  },
  {
    "text": "um so that we are able to to trigger the glitch right on time uh this whole setup is controlled",
    "start": "1051600",
    "end": "1057840"
  },
  {
    "text": "by an external PC um so that we are able to adjust the uh voltage glitch",
    "start": "1057840",
    "end": "1062960"
  },
  {
    "text": "parameters and to capture some logs okay for for our tech only three",
    "start": "1062960",
    "end": "1069280"
  },
  {
    "text": "wires uh have to be solded to the infotainment board uh two wires to the SBI 2 bus for data and clock and one",
    "start": "1069280",
    "end": "1077679"
  },
  {
    "text": "wire to the SPI chip select line yeah in in reality our setup looks",
    "start": "1077679",
    "end": "1084000"
  },
  {
    "text": "a little bit Messier more like more like this um here you can see the sv2 bus",
    "start": "1084000",
    "end": "1090120"
  },
  {
    "text": "connection um here's our geny microcontroller and in this this case we",
    "start": "1090120",
    "end": "1095799"
  },
  {
    "text": "also sold out some more wires to the spib bus so that we are able to um to",
    "start": "1095799",
    "end": "1101039"
  },
  {
    "text": "debug the whole glitch attack using using our logic analyzer interesting here is that um",
    "start": "1101039",
    "end": "1108760"
  },
  {
    "text": "Tesla misuses an HDMI connector for debugging purposes and we were able to",
    "start": "1108760",
    "end": "1115120"
  },
  {
    "text": "uh connect the ATX reset line the serial output and an additional SPI programmer",
    "start": "1115120",
    "end": "1120400"
  },
  {
    "text": "through that uh connector um this um additional SPI programmer is used to uh read and write",
    "start": "1120400",
    "end": "1127720"
  },
  {
    "text": "to the flashship directly for example to modify the AMD root key or to modify uh",
    "start": "1127720",
    "end": "1132760"
  },
  {
    "text": "other firmware components okay so let's go through uh",
    "start": "1132760",
    "end": "1138120"
  },
  {
    "text": "the actual voltage glitching steps um here you can see a logic analyzer trace of of our glitch setup um on the left",
    "start": "1138120",
    "end": "1145679"
  },
  {
    "text": "side the signals from top to bottom are the svi 2 uh bus uh clock and data then",
    "start": "1145679",
    "end": "1152000"
  },
  {
    "text": "there's the targets voltage and um there's uh the SPI chip select signal",
    "start": "1152000",
    "end": "1158080"
  },
  {
    "text": "one was captured during a failed attempt and the other one was captured during a successful uh",
    "start": "1158080",
    "end": "1165280"
  },
  {
    "text": "attempt um first uh the initial voltage is set um you can see the SBI 2 packet",
    "start": "1165280",
    "end": "1171679"
  },
  {
    "text": "here which is sent by the CPU itself and this packet tells the voltage regulator",
    "start": "1171679",
    "end": "1177120"
  },
  {
    "text": "to rise uh the target's voltage and we also used this first uh data packet to",
    "start": "1177120",
    "end": "1183720"
  },
  {
    "text": "detect that the target begins booting and that triggers uh the attack logic",
    "start": "1183720",
    "end": "1189080"
  },
  {
    "text": "that runs uh on the tetiny microcontroller yeah after the initial",
    "start": "1189080",
    "end": "1195640"
  },
  {
    "text": "voltage is reached um the voltage regul lat start sending Telemetry packets but",
    "start": "1195640",
    "end": "1201360"
  },
  {
    "text": "as we would like to be able to inject our sv2 commands uh at anytime the Teenz",
    "start": "1201360",
    "end": "1208120"
  },
  {
    "text": "just disables this Telemetry functionality by injecting a sv2 command and it also adjusts uh vck another time",
    "start": "1208120",
    "end": "1217120"
  },
  {
    "text": "here um in this step the AMD secc processor awakens and starts uh loading",
    "start": "1217120",
    "end": "1222880"
  },
  {
    "text": "data from the SPI Flash and that's why we see activity on the SPI chip select line here",
    "start": "1222880",
    "end": "1229320"
  },
  {
    "text": "um this activity is also used by by the tiny uh so the tetiny starts counting",
    "start": "1229320",
    "end": "1234480"
  },
  {
    "text": "the chip select edges until it is time uh to glitch uh the",
    "start": "1234480",
    "end": "1240480"
  },
  {
    "text": "Target and yeah this time is just now so now it's time to glitch and the teensi",
    "start": "1240480",
    "end": "1245600"
  },
  {
    "text": "just injects a packet to make uh first the voltage drop and then it injects",
    "start": "1245600",
    "end": "1250960"
  },
  {
    "text": "another packet uh to make the voltage rise again and to find out if this this",
    "start": "1250960",
    "end": "1258360"
  },
  {
    "text": "attack attempt was successful or not the tinz still monitors the chip select line",
    "start": "1258360",
    "end": "1263559"
  },
  {
    "text": "and if it becomes active again we can say that more data is loaded and this also indicates that our attempt was",
    "start": "1263559",
    "end": "1270799"
  },
  {
    "text": "successful on a failed attempt no more data is loaded um the chip select line",
    "start": "1270799",
    "end": "1276039"
  },
  {
    "text": "will stay inactive and the Teenz resets the target to retry the the",
    "start": "1276039",
    "end": "1282760"
  },
  {
    "text": "attack um yeah to give you a short recap um we should now be able to circumvent this check now and with this we should",
    "start": "1282760",
    "end": "1290400"
  },
  {
    "text": "also be able to patch all boot stages um using our custom key and and of course",
    "start": "1290400",
    "end": "1296720"
  },
  {
    "text": "the glitch itself and yeah we have put our own SSH password into the root file system and we connected the the",
    "start": "1296720",
    "end": "1303279"
  },
  {
    "text": "infotainment system to a PC wi its ethernet",
    "start": "1303279",
    "end": "1308480"
  },
  {
    "text": "connection okay so yeah Welcome to our lab um as you can see we don't have an actual car but we have the Monitor and",
    "start": "1308480",
    "end": "1314240"
  },
  {
    "text": "the infotainment board and in this video you can see that we have haven't bought the optional rear seat heaters so we are",
    "start": "1314240",
    "end": "1321360"
  },
  {
    "text": "not allowed to to use them although we we don't have any seeds",
    "start": "1321360",
    "end": "1326480"
  },
  {
    "text": "but so um yeah this is a snippet from the car configuration um the rear City",
    "start": "1326480",
    "end": "1331799"
  },
  {
    "text": "he do have the id13 and we would like to set uh this value to one but first uh of course we",
    "start": "1331799",
    "end": "1338480"
  },
  {
    "text": "need to get uh a root shell on the infotainment system um this video should demonstrate",
    "start": "1338480",
    "end": "1345520"
  },
  {
    "text": "uh the glitching attack on the right side you can see um our glitch script that runs many glitch attempts as fast",
    "start": "1345520",
    "end": "1352799"
  },
  {
    "text": "as possible um on the top top left side there's the serial console to watch the boot lock and on the bottom left uh you",
    "start": "1352799",
    "end": "1360200"
  },
  {
    "text": "can see the SSH console where we will lock in as route to the infotainment",
    "start": "1360200",
    "end": "1367480"
  },
  {
    "text": "system okay so now we will start the glitch script and as you can see many attempts are rushing through now we had",
    "start": "1367960",
    "end": "1374960"
  },
  {
    "text": "a successful attempt and on the left side we will see that the boot lock will",
    "start": "1374960",
    "end": "1380720"
  },
  {
    "text": "start and after a while we should be able to loog in VI SS using our Uh",
    "start": "1380720",
    "end": "1387440"
  },
  {
    "text": "custom password yeah now we are on the infotainment",
    "start": "1387440",
    "end": "1393200"
  },
  {
    "text": "system and we will retrieve the Gateway configuration for id13 it is set to zero",
    "start": "1393200",
    "end": "1399679"
  },
  {
    "text": "we will set it to one now and check if the Gateway accepted",
    "start": "1399679",
    "end": "1406640"
  },
  {
    "text": "this and it accept did this but um now we will have to check if the re do are",
    "start": "1406640",
    "end": "1413480"
  },
  {
    "text": "enabled and for this we go back to our La we just rebooted the infotainment system and let's see if the rear SE",
    "start": "1413480",
    "end": "1421080"
  },
  {
    "text": "heers are available",
    "start": "1421080",
    "end": "1424480"
  },
  {
    "text": "now okay so now we activated the rear SE heers and yeah our Tech worked",
    "start": "1428320",
    "end": "1435840"
  },
  {
    "text": "uh",
    "start": "1436880",
    "end": "1439880"
  },
  {
    "text": "and while the car configuration survives uh normal infotainment reboots um the",
    "start": "1443279",
    "end": "1448400"
  },
  {
    "text": "voltage glitching attack is of course not persistent but um the infotainment",
    "start": "1448400",
    "end": "1453640"
  },
  {
    "text": "system doesn't reboot very often and additionally we could make this glitching attack more convenient using a",
    "start": "1453640",
    "end": "1459320"
  },
  {
    "text": "custom PCB or modchip or something like this but this is more an implementation detail maybe someone of you wants to",
    "start": "1459320",
    "end": "1465960"
  },
  {
    "text": "wants to work on this um yeah um our demo was possible because",
    "start": "1465960",
    "end": "1471200"
  },
  {
    "text": "the rear seat heaters have been an insecure configuration item that was not checked",
    "start": "1471200",
    "end": "1476240"
  },
  {
    "text": "by the Gateway but with infotainment version 20224 the item uh was upgraded to be a",
    "start": "1476240",
    "end": "1483039"
  },
  {
    "text": "secured one um just like the full safe driving feature for example so being",
    "start": "1483039",
    "end": "1488320"
  },
  {
    "text": "roote on the infotainment is not sufficient anymore and we would need another vulnerability in the Gateway",
    "start": "1488320",
    "end": "1493640"
  },
  {
    "text": "firmware to carry out the the same attack again but um um these",
    "start": "1493640",
    "end": "1498799"
  },
  {
    "text": "vulnerabilities um exist um here's one that was presented by Zen active during",
    "start": "1498799",
    "end": "1504000"
  },
  {
    "text": "last PTO own and it allowed to run unsigned uh firmware on the Gateway",
    "start": "1504000",
    "end": "1510960"
  },
  {
    "text": "chip okay so but we got uh one more thing for you um Nicholas will tell you",
    "start": "1510960",
    "end": "1516120"
  },
  {
    "text": "about how he extracted more secrets from the",
    "start": "1516120",
    "end": "1520960"
  },
  {
    "text": "Tesla thank you Nicholas so um yeah you saw the title we're going to talk about",
    "start": "1521559",
    "end": "1528039"
  },
  {
    "text": "the secrets that we extracted from the Tesla and the first secret that is actually present on this Tesla are the",
    "start": "1528039",
    "end": "1533799"
  },
  {
    "text": "so-called car credentials these are used by the car to authenticate against uh",
    "start": "1533799",
    "end": "1539000"
  },
  {
    "text": "the Tesla servers for example to download firmware upgrades or to receive uh updates to the car configuration and",
    "start": "1539000",
    "end": "1546600"
  },
  {
    "text": "it's an asymmetric uh RSA key um that is unique for each car it's also used to",
    "start": "1546600",
    "end": "1553200"
  },
  {
    "text": "identify the car furthermore we have a lot of user data on Tesla cars so a lot",
    "start": "1553200",
    "end": "1559679"
  },
  {
    "text": "of details about the phones that are connected which locations and when were visited by this Tesla car as well as",
    "start": "1559679",
    "end": "1566320"
  },
  {
    "text": "Wi-Fi passwords and account tokens for uh yeah accounts that you logged into with your",
    "start": "1566320",
    "end": "1572039"
  },
  {
    "text": "Tesla and the security of these used to be pretty bad so everything uh used to",
    "start": "1572039",
    "end": "1577679"
  },
  {
    "text": "be clear text which caused some bad press for Tesla so here for example we",
    "start": "1577679",
    "end": "1582919"
  },
  {
    "text": "have some news articles about uh car hackers who bought infotainment units just like we did off of eBay and were",
    "start": "1582919",
    "end": "1589840"
  },
  {
    "text": "able to extract pretty sensitive user data from these cars and because of this",
    "start": "1589840",
    "end": "1595760"
  },
  {
    "text": "Tesla is now uh using uh TPM based security so TPMS are trusted platform",
    "start": "1595760",
    "end": "1601799"
  },
  {
    "text": "modules are small cry cryptographic modules that can seal cryptographic",
    "start": "1601799",
    "end": "1606960"
  },
  {
    "text": "materials like the car credentials or dis encryption keys for the now encrypted user data partition and uh",
    "start": "1606960",
    "end": "1614919"
  },
  {
    "text": "DPMS can manage access so for example um they uh can enforce that the car",
    "start": "1614919",
    "end": "1620399"
  },
  {
    "text": "credentials can be used by the Tesla car but the real key can't be copied off of",
    "start": "1620399",
    "end": "1626039"
  },
  {
    "text": "the system and can only be used by the hardware um yeah with the TPM and",
    "start": "1626039",
    "end": "1631919"
  },
  {
    "text": "luckily for us actually Tesla uses amd's uh firmware TPM here which is usually",
    "start": "1631919",
    "end": "1637399"
  },
  {
    "text": "TPMS are dedicated IC but in this case uh it's actually software running on the AMD secure processor um that implements",
    "start": "1637399",
    "end": "1645799"
  },
  {
    "text": "this DPM specification and as it turns out uh we already wrote a paper about um yeah attacking this",
    "start": "1645799",
    "end": "1653240"
  },
  {
    "text": "firmware TPM uh by AMD where we extracted the internal state of the",
    "start": "1653240",
    "end": "1659399"
  },
  {
    "text": "firmware TPM and used that to unseal TPM objects TPM objects are um the sealed",
    "start": "1659399",
    "end": "1666679"
  },
  {
    "text": "cryptographic material um because um TPMS are rather small and you don't store everything on the TPM but you seal",
    "start": "1666679",
    "end": "1674120"
  },
  {
    "text": "it with the TPM and then load it when you are uh when you you want to use it and actually for our Tesla attack we had",
    "start": "1674120",
    "end": "1680880"
  },
  {
    "text": "to go further than this attack and uh Implement uh more complex unsealing to",
    "start": "1680880",
    "end": "1687080"
  },
  {
    "text": "actually be able to allow arbitrary TPM objects now to be unsealed and with that",
    "start": "1687080",
    "end": "1693240"
  },
  {
    "text": "um we extracted the car credentials which gave us access uh to the Tesla end",
    "start": "1693240",
    "end": "1699240"
  },
  {
    "text": "points uh meant for cars as well as re-enabling the uh yeah user privacy",
    "start": "1699240",
    "end": "1706159"
  },
  {
    "text": "leaking um from a uh board Tesla infotainment",
    "start": "1706159",
    "end": "1711200"
  },
  {
    "text": "unit so um in general here we have a simplified boot overview and the encrypted user data partition uh is now",
    "start": "1711200",
    "end": "1718600"
  },
  {
    "text": "is also part of the nvme and the operating system would like to get access to this uh in order to do that it",
    "start": "1718600",
    "end": "1724640"
  },
  {
    "text": "needs to communicate with the firmware TPM which is actually a small application run on the AMD secure",
    "start": "1724640",
    "end": "1731919"
  },
  {
    "text": "processor while um the operating system is also running and it's run as one one",
    "start": "1731919",
    "end": "1737559"
  },
  {
    "text": "of the many applications that can be run under the uh secure OS micr kernel which",
    "start": "1737559",
    "end": "1743399"
  },
  {
    "text": "uh yeah is in control of the AMD secure processor while the operating system is",
    "start": "1743399",
    "end": "1748880"
  },
  {
    "text": "booted and in general it will work like this the operating system can communicate with the amdp to ask the",
    "start": "1748880",
    "end": "1755200"
  },
  {
    "text": "firm TPM for the key for the user data partition which will return and which",
    "start": "1755200",
    "end": "1760519"
  },
  {
    "text": "the operating system then can use to unlock the user data partition and now we Zoom a little bit into the details",
    "start": "1760519",
    "end": "1766600"
  },
  {
    "text": "here we because the Firma DPM application needs some persistent State that's actually stored on the SPI flash",
    "start": "1766600",
    "end": "1774440"
  },
  {
    "text": "chip alongside all of the firmware and so on and um the uh dis encryption key",
    "start": "1774440",
    "end": "1780600"
  },
  {
    "text": "is actually stored in a TPM object that's stored in clear text at the header of the encrypted user data",
    "start": "1780600",
    "end": "1787159"
  },
  {
    "text": "partition so what will happen in detail is the operating system will load this DPM object give it to the ftpm",
    "start": "1787159",
    "end": "1793880"
  },
  {
    "text": "application to unseal uh which will return the now unsealed contents the dis",
    "start": "1793880",
    "end": "1799120"
  },
  {
    "text": "encryption key which can be used to unlock the user data partition we'll look at TPM objects in detail now so TPM",
    "start": "1799120",
    "end": "1806720"
  },
  {
    "text": "objects um have a public part which contains metadata what kind of algorithm",
    "start": "1806720",
    "end": "1812080"
  },
  {
    "text": "and uh when it this object is allowed to be used as well as the public key if it's an asymmetric object then we have a",
    "start": "1812080",
    "end": "1818760"
  },
  {
    "text": "private part of the TPM object which no surprises here contains the private key",
    "start": "1818760",
    "end": "1823919"
  },
  {
    "text": "but also a authentication value if for example user in put is used to um yeah",
    "start": "1823919",
    "end": "1829880"
  },
  {
    "text": "allow unseating of the object and a cryptographic seed value which will get",
    "start": "1829880",
    "end": "1834960"
  },
  {
    "text": "to in a second this uh for this TPM object actually only the private part is encrypted and integrity protected and um",
    "start": "1834960",
    "end": "1843960"
  },
  {
    "text": "this is the ceiling and um every TPM object is actually sealed against a",
    "start": "1843960",
    "end": "1849360"
  },
  {
    "text": "parent object so whenever you want to load our seal TBM object you already have to have the parent object loaded",
    "start": "1849360",
    "end": "1855720"
  },
  {
    "text": "and um the encryption keys for this tobl loaded TPM object are actually derived",
    "start": "1855720",
    "end": "1861919"
  },
  {
    "text": "from um the seed value of the parent object as well as the public part of this TPM object and it's important to",
    "start": "1861919",
    "end": "1869279"
  },
  {
    "text": "note here that everything uh all the algorithms needed for the ceiling are well specified by the DPM specification",
    "start": "1869279",
    "end": "1876200"
  },
  {
    "text": "um because later on we're going to see some cases where this is not the case uh yeah which caused a lot of reverse",
    "start": "1876200",
    "end": "1882399"
  },
  {
    "text": "engineering efforts for us in general uh now uh this looks as follows you have a",
    "start": "1882399",
    "end": "1888399"
  },
  {
    "text": "TBM object that's sealed against a parent object this parent object might seal other TBM objects so we arrive at a",
    "start": "1888399",
    "end": "1895000"
  },
  {
    "text": "three structure or more precisely a forest structure of TPM objects and at the root of this Forest lie the",
    "start": "1895000",
    "end": "1901159"
  },
  {
    "text": "so-called primary objects which are also just regular TPM objects they are just",
    "start": "1901159",
    "end": "1906720"
  },
  {
    "text": "uh not derived uh sorry not sealed by parent objects they are derived from a so-called primary",
    "start": "1906720",
    "end": "1912960"
  },
  {
    "text": "seed and um if you are a user and you want to use a a TPM object like this one",
    "start": "1912960",
    "end": "1918600"
  },
  {
    "text": "for example now you need to do something that we call a TPM hierarchy walk so you",
    "start": "1918600",
    "end": "1923880"
  },
  {
    "text": "first need to derive a primary object load any intermediate parent objects and finally you are able to unseal your",
    "start": "1923880",
    "end": "1930559"
  },
  {
    "text": "target object and from the user's point of view actually the primary seed can",
    "start": "1930559",
    "end": "1936200"
  },
  {
    "text": "just be considered to be there which hints at the underlying storage structure because the only thing that",
    "start": "1936200",
    "end": "1941960"
  },
  {
    "text": "the TPM actually needs to store persistently is this primary seed",
    "start": "1941960",
    "end": "1947200"
  },
  {
    "text": "everything else can either be derived at runtime or stored uh externally for",
    "start": "1947200",
    "end": "1952919"
  },
  {
    "text": "example on uh the nvme uh or the uh header of your encrypted",
    "start": "1952919",
    "end": "1958840"
  },
  {
    "text": "Drive okay uh now uh I talked about us um being able to extract the nonvolatile",
    "start": "1958840",
    "end": "1965279"
  },
  {
    "text": "ftpm data and I mean that is exactly the uh the place where these primary seeds",
    "start": "1965279",
    "end": "1970440"
  },
  {
    "text": "are stored and of course it needs to be Integrity protected and encrypted and uh",
    "start": "1970440",
    "end": "1975960"
  },
  {
    "text": "in order to extract Ed we reverse engineered this um key derivation algorithm for our fall TPM paper um you",
    "start": "1975960",
    "end": "1982840"
  },
  {
    "text": "don't need to look at uh detail here just at the bottom you have the two storage and integrity keys and in the",
    "start": "1982840",
    "end": "1990399"
  },
  {
    "text": "middle here in this key derivation algorithm the uh AMD root Keys actually mixed in which is a little bit uh",
    "start": "1990399",
    "end": "1997519"
  },
  {
    "text": "annoying for us because when we uh rooted the system we replace the AMD root key to get root access and that",
    "start": "1997519",
    "end": "2004120"
  },
  {
    "text": "means that now we arrive at different uh non data keys and the firmware TPM",
    "start": "2004120",
    "end": "2009480"
  },
  {
    "text": "cannot load its um the original ftpm State anymore okay um the primary source of",
    "start": "2009480",
    "end": "2016320"
  },
  {
    "text": "entropy for this key derivation is actually something called a chip unique secret which is just a cryptographic",
    "start": "2016320",
    "end": "2021519"
  },
  {
    "text": "value unique to each AMD CPU and um we would like to extract that to be able to",
    "start": "2021519",
    "end": "2028360"
  },
  {
    "text": "perform this whole key derivation offline um it's actually not as easy because this value is not directly",
    "start": "2028360",
    "end": "2034480"
  },
  {
    "text": "accessible to software running on the amdp it is stored in a cryptographic",
    "start": "2034480",
    "end": "2039880"
  },
  {
    "text": "co-processor but uh we can nevertheless extract an intermediate value here the so-called seed which as only other input",
    "start": "2039880",
    "end": "2047720"
  },
  {
    "text": "has a constant so it's basically as good as extracting the chip chip unique secret our Tech looks the following we",
    "start": "2047720",
    "end": "2054599"
  },
  {
    "text": "have here our regular boot flow and the nonvolatile data is actually encrypted and integrity protected at normally the",
    "start": "2054599",
    "end": "2061839"
  },
  {
    "text": "key uh the secret is passed on from the ROM boot loader to the ftpm application inside the cryptographic co-processor",
    "start": "2061839",
    "end": "2068919"
  },
  {
    "text": "with our glitch now we execute a small payload right after the r boot loader to extract um this uh chip unique secret or",
    "start": "2068919",
    "end": "2076118"
  },
  {
    "text": "actually the seat that we derived from it and with that we are now able to uh derive the encryption keys for um the",
    "start": "2076119",
    "end": "2083720"
  },
  {
    "text": "nonvolatile data and decrypt it offline overall um we now uh want to also",
    "start": "2083720",
    "end": "2089679"
  },
  {
    "text": "offline perform the cybery walk wide we have a TPM object that we have want to",
    "start": "2089679",
    "end": "2095000"
  },
  {
    "text": "unseal uh and we uh now would need to do this whole hierarchy work in order to",
    "start": "2095000",
    "end": "2100920"
  },
  {
    "text": "actually get the correct unsealing Keys um for this process we need the TPM",
    "start": "2100920",
    "end": "2106160"
  },
  {
    "text": "objects which we just assume to have because they're stored externally we need to uh do these uh ceiling steps",
    "start": "2106160",
    "end": "2113200"
  },
  {
    "text": "which are uh specified by the tpn spec so we know how to do those but how do we get the primary objects for our fall TPM",
    "start": "2113200",
    "end": "2120880"
  },
  {
    "text": "paper we actually done here because the particular primary objects we were interested in are actually cached inside",
    "start": "2120880",
    "end": "2126599"
  },
  {
    "text": "the nonvolatile data which uh meant that we could just use those and uh unseal uh",
    "start": "2126599",
    "end": "2132599"
  },
  {
    "text": "TPM objects from here but for the Tesla case we actually they use different primary objects that are not cached and",
    "start": "2132599",
    "end": "2139800"
  },
  {
    "text": "therefore we need to go all the way back to the primary seat the primary seed is part of the uh nonvolatile data so we",
    "start": "2139800",
    "end": "2145720"
  },
  {
    "text": "have access to that and the now we have this derivation step which is kind of um",
    "start": "2145720",
    "end": "2151960"
  },
  {
    "text": "uh yeah it's not as well specified as the ceiling step because it doesn't need to be um let's look into this uh",
    "start": "2151960",
    "end": "2158560"
  },
  {
    "text": "derivation step so here we have a primary object that we want to derive um in the derivation step you",
    "start": "2158560",
    "end": "2165760"
  },
  {
    "text": "have a object template as input and this object template will give you most of the fields of the primary object already",
    "start": "2165760",
    "end": "2173720"
  },
  {
    "text": "uh the other fields are derived from a deterministic random bit generator um",
    "start": "2173720",
    "end": "2178839"
  },
  {
    "text": "and that is uh seeded with the input template and the primary seed for this",
    "start": "2178839",
    "end": "2184560"
  },
  {
    "text": "object um and uh all of this is specified the only thing that's not specified by the TPM specification is",
    "start": "2184560",
    "end": "2191800"
  },
  {
    "text": "actually which exact algorithm should be used in this deterministic random bit",
    "start": "2191800",
    "end": "2197480"
  },
  {
    "text": "generator and that caused a lot of reverse engineering which I wanted to present here but sadly we have no time",
    "start": "2197480",
    "end": "2202800"
  },
  {
    "text": "so we'll just have to imagine it um but yeah after afterwards we are now able to",
    "start": "2202800",
    "end": "2208760"
  },
  {
    "text": "unseal arbitrary TPM objects because we have this hierarchy work we just reverse engineered the last two steps we do have",
    "start": "2208760",
    "end": "2215680"
  },
  {
    "text": "access to the encryp Red nonv Data because it's just part of the SPI flash chip we have executed our payload to",
    "start": "2215680",
    "end": "2222599"
  },
  {
    "text": "leak a secret seat from the CPU which we can use to unlock the nonvolatile data which gives us access to the primary",
    "start": "2222599",
    "end": "2229440"
  },
  {
    "text": "seat all right so um if you fell asleep during all of that cryptography then uh Now's the Time to wake up because I'm",
    "start": "2229440",
    "end": "2235680"
  },
  {
    "text": "going to show you how it looks in practice in practice the car credentials are just a file start on the Tesla which",
    "start": "2235680",
    "end": "2241520"
  },
  {
    "text": "we copied off of it here it's a pem encoded um object with here the type Trust software STC to um private key and",
    "start": "2241520",
    "end": "2250839"
  },
  {
    "text": "basically this is the uh yeah this is the representation of the TPM object um",
    "start": "2250839",
    "end": "2255880"
  },
  {
    "text": "we've written a little python script that implements all of the derivation and unsealing logic and as inputs we",
    "start": "2255880",
    "end": "2262319"
  },
  {
    "text": "give it the encrypted nonv data together with the extracted secret and the TPM",
    "start": "2262319",
    "end": "2267880"
  },
  {
    "text": "object and it will spit out a clear text version of the yeah now unsealed in this",
    "start": "2267880",
    "end": "2274920"
  },
  {
    "text": "case car credentials which we can now just use with a regular op SSL and uh that's what we do here we",
    "start": "2274920",
    "end": "2282599"
  },
  {
    "text": "connect to a Tesla endpoint um with open SSL and as authentication we we use our",
    "start": "2282599",
    "end": "2290599"
  },
  {
    "text": "clear text extracted car credentials together with a certificate for these car credentials and uh yeah you can see",
    "start": "2290599",
    "end": "2297640"
  },
  {
    "text": "that with the file we now created with the clear text version we are able to do that from everywhere not only from the",
    "start": "2297640",
    "end": "2303920"
  },
  {
    "text": "Tesla car and yeah we in this case just get some information about the car back",
    "start": "2303920",
    "end": "2309680"
  },
  {
    "text": "from Tesla's production servers similarly uh it works with the dis encryption Keys here we have some Json",
    "start": "2309680",
    "end": "2315760"
  },
  {
    "text": "in the looks header of the um of the encrypted user data partition with a TPM",
    "start": "2315760",
    "end": "2321079"
  },
  {
    "text": "object a similar Pyon script allows us to get the raw dis encryption key which we can then use to uh um load the uh",
    "start": "2321079",
    "end": "2330800"
  },
  {
    "text": "encrypted partition and at the bottom here you actually see that we are able to access the phone book which which",
    "start": "2330800",
    "end": "2336560"
  },
  {
    "text": "I've blurred mostly just left than two names um yeah of this um private",
    "start": "2336560",
    "end": "2342560"
  },
  {
    "text": "data okay that's all for our talk um to summarize um we've given you an overview",
    "start": "2342560",
    "end": "2349839"
  },
  {
    "text": "of Tesla's boot security which ref find to be rather good and from the software",
    "start": "2349839",
    "end": "2355000"
  },
  {
    "text": "and software architectural side everything seems secure but with our Hardware attack or voltage F injection",
    "start": "2355000",
    "end": "2360720"
  },
  {
    "text": "attack we are still able to root the infotainment unit and unlock the re C Tas and it's important to note here that",
    "start": "2360720",
    "end": "2367040"
  },
  {
    "text": "this rooting attack is not mitigable without replacing Hardware on this Tesla",
    "start": "2367040",
    "end": "2373240"
  },
  {
    "text": "infotainment board what this Tesla did mitigate was the rear seat heers being",
    "start": "2373240",
    "end": "2379119"
  },
  {
    "text": "an unsecured config item so now you would have to find an additional attack against the gateway to redo the",
    "start": "2379119",
    "end": "2386000"
  },
  {
    "text": "unlocking attack finally I just showed you that we EXT extracted the car",
    "start": "2386000",
    "end": "2391160"
  },
  {
    "text": "credentials as well as the dis encryption keys and hopefully this will be of use to independent repairing",
    "start": "2391160",
    "end": "2397200"
  },
  {
    "text": "people that work on Teslas what do we learn from our talk well artificially disabling features that are available on",
    "start": "2397200",
    "end": "2404240"
  },
  {
    "text": "the hardware that you own does open up a new threat model for producers of the side hardware and uh furthermore it",
    "start": "2404240",
    "end": "2411240"
  },
  {
    "text": "seems that corot and Linux here really kept car hickers up until this point",
    "start": "2411240",
    "end": "2416599"
  },
  {
    "text": "from uh owning a Tesla which is a good sign for the project security and",
    "start": "2416599",
    "end": "2422359"
  },
  {
    "text": "finally um when you have the threat model I just talked about then you need to consider physical attacks because the",
    "start": "2422359",
    "end": "2428800"
  },
  {
    "text": "people owning your Hardware have access to the hardware we've responsibly disclosed everything of course and Tesla",
    "start": "2428800",
    "end": "2435560"
  },
  {
    "text": "informed us about the updated situation with the re heers and yeah that is",
    "start": "2435560",
    "end": "2440960"
  },
  {
    "text": "everything for our talk I would uh like to thank o for his very important help and I hope he can be the king of his car",
    "start": "2440960",
    "end": "2447480"
  },
  {
    "text": "again and if you want to look at our code everything is available on GitHub so uh yeah here's the link thank",
    "start": "2447480",
    "end": "2455319"
  },
  {
    "text": "you",
    "start": "2455319",
    "end": "2458319"
  },
  {
    "text": "you",
    "start": "2461640",
    "end": "2464640"
  }
]