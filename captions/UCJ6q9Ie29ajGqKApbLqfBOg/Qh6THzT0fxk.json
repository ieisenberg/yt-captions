[
  {
    "text": "[Music]",
    "start": "1740",
    "end": "4810"
  },
  {
    "text": "hello everyone welcome to our talk this is leo wu from battle security",
    "start": "9120",
    "end": "15200"
  },
  {
    "text": "in this talk i will talk about our research about the android ion driver we",
    "start": "15200",
    "end": "20560"
  },
  {
    "text": "found a series of vulnerabilities in an android ion driver",
    "start": "20560",
    "end": "25680"
  },
  {
    "text": "and they're just like hayden mines in ion and we named the series of vulnerability",
    "start": "25680",
    "end": "31359"
  },
  {
    "text": "explosion in this talk we will dive into explosion",
    "start": "31359",
    "end": "36559"
  },
  {
    "text": "the research is finished by me and my colleagues sri li and tim xia",
    "start": "36559",
    "end": "42160"
  },
  {
    "text": "and here are some introductions about us i am interested in enjoying linux bug",
    "start": "42160",
    "end": "47680"
  },
  {
    "text": "hunting and exploit i found over 200 vulnerabilities in the last two years and i am top one in",
    "start": "47680",
    "end": "55120"
  },
  {
    "text": "android chipsets security program and the media tech mobile security program she only is interested",
    "start": "55120",
    "end": "62320"
  },
  {
    "text": "in android analytics linux kernel accounting and he's the author of one",
    "start": "62320",
    "end": "67680"
  },
  {
    "text": "click root master and so on tim sha is a staff security researcher at batu",
    "start": "67680",
    "end": "73520"
  },
  {
    "text": "and he is also a previous pacsafe sec and hitb speaker",
    "start": "73520",
    "end": "79920"
  },
  {
    "text": "let's get start here is the agenda of our talk first of all i will introduce ion about what it",
    "start": "80640",
    "end": "87759"
  },
  {
    "text": "is used for and why we research about it second i will show some basic use of ion",
    "start": "87759",
    "end": "94240"
  },
  {
    "text": "and then i will dive into the explosion and talk about how we found",
    "start": "94240",
    "end": "99520"
  },
  {
    "text": "those vulnerabilities after that i will make some reflections on explosion",
    "start": "99520",
    "end": "105439"
  },
  {
    "text": "at last i will discuss the future work so let's have a look at the what is ion",
    "start": "105439",
    "end": "113439"
  },
  {
    "text": "io is a general generalized memory pro manager introduced by google to address",
    "start": "113439",
    "end": "119200"
  },
  {
    "text": "the issue of fragmented memory management interfaces across different",
    "start": "119200",
    "end": "124320"
  },
  {
    "text": "android devices at the very beginning there are many drivers enjoyed doing the similar memory",
    "start": "124320",
    "end": "132480"
  },
  {
    "text": "allocation work for example some some of them are used to allocate physically physically",
    "start": "132480",
    "end": "139760"
  },
  {
    "text": "contiguous memory buffers where others are used to allocate non-contiguous",
    "start": "139760",
    "end": "144959"
  },
  {
    "text": "memory buffers google noticed this fragmented memory allocation",
    "start": "144959",
    "end": "150160"
  },
  {
    "text": "components and introduced ion ion centralized all kinds of memory",
    "start": "150160",
    "end": "156080"
  },
  {
    "text": "allocation needs in ion there are many different memory pools",
    "start": "156080",
    "end": "161360"
  },
  {
    "text": "each memory pool is called ion heap and every ion heap can be used to",
    "start": "161360",
    "end": "166959"
  },
  {
    "text": "allocate a specific kind of memory buffer for example the ion heap system is used to allocate",
    "start": "166959",
    "end": "175120"
  },
  {
    "text": "memory buffer based on the vim lock and also vendors can use ir interfaces to add",
    "start": "175120",
    "end": "182560"
  },
  {
    "text": "their own custom ion heap to allocate any special memory buffer they need",
    "start": "182560",
    "end": "190319"
  },
  {
    "text": "except for the functionality of ion there are some other features of ion",
    "start": "191200",
    "end": "196959"
  },
  {
    "text": "that interest us a lot first ion is a common android driver so",
    "start": "196959",
    "end": "203040"
  },
  {
    "text": "any vulnerability in it can affect many android devices",
    "start": "203040",
    "end": "208640"
  },
  {
    "text": "although ion started to be replaced with dma buff in android 12. millions of",
    "start": "208640",
    "end": "215120"
  },
  {
    "text": "devices still use ion and will and it and it will survive for",
    "start": "215120",
    "end": "220239"
  },
  {
    "text": "a long time due to the fragmentation of android",
    "start": "220239",
    "end": "225280"
  },
  {
    "text": "second the ion device can be accessed by on trust apps",
    "start": "225280",
    "end": "230799"
  },
  {
    "text": "making it a perfect exploitation target just like the binder device",
    "start": "230799",
    "end": "238480"
  },
  {
    "text": "third as i mentioned ion is a memory management component vulnerabilities in",
    "start": "239200",
    "end": "245280"
  },
  {
    "text": "memory memory management components are proven to be dangerous such as the dirty",
    "start": "245280",
    "end": "251599"
  },
  {
    "text": "call at last ion went over multiple refactors",
    "start": "251599",
    "end": "257040"
  },
  {
    "text": "from upstream around 2012 the first version of ion known as legacy ion was introduced and",
    "start": "257040",
    "end": "265199"
  },
  {
    "text": "in 2017 the first refactor to iron happened after that in 2019 the second",
    "start": "265199",
    "end": "272639"
  },
  {
    "text": "refactor to iron happened in 2021 ion started to be replaced with",
    "start": "272639",
    "end": "278800"
  },
  {
    "text": "dma buff hips in android android 12",
    "start": "278800",
    "end": "283840"
  },
  {
    "text": "so we started to think about why there are multiple refactors and why ion ends up",
    "start": "283840",
    "end": "290639"
  },
  {
    "text": "with a removal in android kernels maybe there are some insecurity issues",
    "start": "290639",
    "end": "296720"
  },
  {
    "text": "in it after a long time of bug hunting we have",
    "start": "296720",
    "end": "302000"
  },
  {
    "text": "found over 40 vulnerabilities in ion which we named explosion",
    "start": "302000",
    "end": "307759"
  },
  {
    "text": "and millions of devices are affected",
    "start": "307759",
    "end": "311840"
  },
  {
    "text": "before diving into explosion let's have a look at the use of lexi ion",
    "start": "313840",
    "end": "319039"
  },
  {
    "text": "this can help us understand the vulnerabilities in explosion later and because the lexi ion is the first",
    "start": "319039",
    "end": "326240"
  },
  {
    "text": "version of ion it shows us a complete design and implementation of ion",
    "start": "326240",
    "end": "333840"
  },
  {
    "text": "so let's have a look at the use of ion first of all we can use ion to allocate",
    "start": "334400",
    "end": "340080"
  },
  {
    "text": "memory buffers from user space and then for for for a user process it can open",
    "start": "340080",
    "end": "347280"
  },
  {
    "text": "the ion device and then it will get a client fd after this we can use the ion",
    "start": "347280",
    "end": "354479"
  },
  {
    "text": "lock command to allocate a memory buffer with cisco io control",
    "start": "354479",
    "end": "360479"
  },
  {
    "text": "this operation will trigger ion to create an ion hand object and ion buffer object",
    "start": "360479",
    "end": "367360"
  },
  {
    "text": "will be associated with this ion hand object and this ion buffer object object",
    "start": "367360",
    "end": "374639"
  },
  {
    "text": "represents the memory buffer allocated for the user process",
    "start": "374639",
    "end": "379759"
  },
  {
    "text": "the io handle id will be copied into the user process with this ion handle id",
    "start": "379759",
    "end": "386400"
  },
  {
    "text": "the user process can do further operations to the memory buffer",
    "start": "386400",
    "end": "392560"
  },
  {
    "text": "also a user process can free the memory buffer from user space this can be",
    "start": "392880",
    "end": "398240"
  },
  {
    "text": "finished with uh an ionfree command we only need to pass the ir handle id to",
    "start": "398240",
    "end": "404319"
  },
  {
    "text": "the ion driver and then all these kernel objects and the memory buffer will be released",
    "start": "404319",
    "end": "413120"
  },
  {
    "text": "and buffer sharing is a really important feature of ion we can map a memory buffer into both",
    "start": "413280",
    "end": "419840"
  },
  {
    "text": "user space and kernel space with ion to finish that we can use the ion share",
    "start": "419840",
    "end": "425599"
  },
  {
    "text": "command to send a buffer sharing request to ion and ion will create a dme buff object to",
    "start": "425599",
    "end": "433759"
  },
  {
    "text": "associate with the ion buffer and the and the fd of this",
    "start": "433759",
    "end": "440720"
  },
  {
    "text": "dm buff object will be exported to the user space and then the user process can map the",
    "start": "440720",
    "end": "448080"
  },
  {
    "text": "memory buffer into user space space by mapping the then buff fd and",
    "start": "448080",
    "end": "454240"
  },
  {
    "text": "also we can use a few apis to map the memory buffer into kernel space",
    "start": "454240",
    "end": "460880"
  },
  {
    "text": "after these operations kernel space and user space will share this same memory",
    "start": "460880",
    "end": "465919"
  },
  {
    "text": "buffer and also the ion driver is a base driver",
    "start": "465919",
    "end": "472880"
  },
  {
    "text": "which can be used by kernel drivers drivers in kernel space can allocate",
    "start": "472880",
    "end": "477919"
  },
  {
    "text": "memory buffers with api ion lock and they can also free memory buffers with",
    "start": "477919",
    "end": "483199"
  },
  {
    "text": "api ion-free there there is also an api ir map kernel",
    "start": "483199",
    "end": "489199"
  },
  {
    "text": "to map a memory buffer into kernel space we need to note that the virtual address",
    "start": "489199",
    "end": "494639"
  },
  {
    "text": "of the memory buffer will be cached in the i arm but for object to accelerate",
    "start": "494639",
    "end": "500879"
  },
  {
    "text": "the map operation and api ion map kernel is used to unmap",
    "start": "500879",
    "end": "506000"
  },
  {
    "text": "the memory buffer from kernel kernel space",
    "start": "506000",
    "end": "511280"
  },
  {
    "text": "so for now we have know some basic use of ion and it's time for us to dive into",
    "start": "511599",
    "end": "516800"
  },
  {
    "text": "explosion when we decided to do bug hunting in the ion driver the very first question was",
    "start": "516800",
    "end": "524800"
  },
  {
    "text": "where to start and how can we find bugs in ir more efficiently of course we can",
    "start": "524800",
    "end": "530959"
  },
  {
    "text": "do the job just like the old days but what is the most",
    "start": "530959",
    "end": "536959"
  },
  {
    "text": "no what is the best weight for us after we know more and more about ion",
    "start": "536959",
    "end": "542800"
  },
  {
    "text": "we found that ion is very different from those regular drivers there are a few characteristics of it",
    "start": "542800",
    "end": "551440"
  },
  {
    "text": "so we thought that maybe we should do targeted bug hunting for each characteristic of ion",
    "start": "551440",
    "end": "558720"
  },
  {
    "text": "because we can use some targeted methods to guide our bug counting which could be",
    "start": "558720",
    "end": "564480"
  },
  {
    "text": "more efficient and the final result proves that our strategy is correct",
    "start": "564480",
    "end": "571680"
  },
  {
    "text": "so far we have found four characteristics of ion each one of them",
    "start": "573040",
    "end": "578640"
  },
  {
    "text": "can can be a perspective for us to do the target targeted by counting the first",
    "start": "578640",
    "end": "584959"
  },
  {
    "text": "characteristic is that ion is a base driver used by vendors",
    "start": "584959",
    "end": "590399"
  },
  {
    "text": "the second one is the customization of ion the third one is vendors",
    "start": "590399",
    "end": "595839"
  },
  {
    "text": "modification modification to ion and the last one is the buffer sharing",
    "start": "595839",
    "end": "601600"
  },
  {
    "text": "feature of ion so far we have found the vulnerabilities buried",
    "start": "601600",
    "end": "607200"
  },
  {
    "text": "in these four characteristics",
    "start": "607200",
    "end": "611720"
  },
  {
    "text": "and all these vulnerabilities formed explosion",
    "start": "612800",
    "end": "618360"
  },
  {
    "text": "so in the following sections i will discuss these four characteristics of ion and talk about how we found",
    "start": "619279",
    "end": "626399"
  },
  {
    "text": "vulnerabilities in each of them some typical vulnerabilities will be detailed",
    "start": "626399",
    "end": "631440"
  },
  {
    "text": "too here is the architecture of legacy ion",
    "start": "631440",
    "end": "638720"
  },
  {
    "text": "as you can see the ion driver is here",
    "start": "638720",
    "end": "643920"
  },
  {
    "text": "and and there are many interfaces for user space uh you know and the user's process can",
    "start": "644839",
    "end": "652079"
  },
  {
    "text": "call these interfaces through cisco like io control",
    "start": "652079",
    "end": "658760"
  },
  {
    "text": "the first characteristic of ion is that ion is the base driver used by vendor",
    "start": "660000",
    "end": "665760"
  },
  {
    "text": "drivers there are many ion interfaces of four kernel space such as ion lock",
    "start": "665760",
    "end": "672240"
  },
  {
    "text": "ion 3 ir map kernel and so on these interfaces can be used by vendor",
    "start": "672240",
    "end": "678160"
  },
  {
    "text": "drivers to finish their work",
    "start": "678160",
    "end": "682240"
  },
  {
    "text": "the second characteristic of ion is the customization of ion",
    "start": "683440",
    "end": "688800"
  },
  {
    "text": "ion provides the interface for vendors to add their own custom io hip",
    "start": "688800",
    "end": "694880"
  },
  {
    "text": "and also ion provides the interface for vendors to add their",
    "start": "694880",
    "end": "699920"
  },
  {
    "text": "custom ion io control commands to operate our memory buffers as a result there will be many",
    "start": "699920",
    "end": "707200"
  },
  {
    "text": "customizations added by vendors to ion",
    "start": "707200",
    "end": "712160"
  },
  {
    "text": "the third the third characteristic of ion is the vendor's motive modifications",
    "start": "712320",
    "end": "718399"
  },
  {
    "text": "to ion core ion core is developed and maintained upstream",
    "start": "718399",
    "end": "723760"
  },
  {
    "text": "usually vendors just use the interfaces of ion core to do their work but actually we",
    "start": "723760",
    "end": "731120"
  },
  {
    "text": "found that many vendors would modif modify ion core for some purpose such as",
    "start": "731120",
    "end": "737120"
  },
  {
    "text": "debug debugging the last characteristic is the buffer",
    "start": "737120",
    "end": "743440"
  },
  {
    "text": "sharing feature of ion a memory buffer can be mapped into kernel space and user",
    "start": "743440",
    "end": "748560"
  },
  {
    "text": "space at the same time this could be a really interesting feature because several kinds of",
    "start": "748560",
    "end": "754320"
  },
  {
    "text": "vulnerabilities have been found in such features after the overview of these four",
    "start": "754320",
    "end": "761519"
  },
  {
    "text": "characteristics let's get into each of them and i will disclose some bug counting methods and",
    "start": "761519",
    "end": "768560"
  },
  {
    "text": "some some vulnerabilities related to each characteristic",
    "start": "768560",
    "end": "775000"
  },
  {
    "text": "first of all we know that ion is a base driver used by vendor drivers there are many ion core interfaces",
    "start": "775680",
    "end": "782720"
  },
  {
    "text": "provided for the kernel and we found that ion core",
    "start": "782720",
    "end": "788560"
  },
  {
    "text": "interfaces are widely used in the vendor drivers including camera drivers",
    "start": "788560",
    "end": "794560"
  },
  {
    "text": "video drivers and many other vendor special drivers when we try to handbox in this",
    "start": "794560",
    "end": "801360"
  },
  {
    "text": "characteristic there are two aspects to be considered",
    "start": "801360",
    "end": "807279"
  },
  {
    "text": "the first aspect is that there could be vulnerabilities in iron core interfaces this this kind of",
    "start": "807839",
    "end": "814959"
  },
  {
    "text": "vulnerability could affect all vendor drivers the second aspect is that vendor drivers",
    "start": "814959",
    "end": "821200"
  },
  {
    "text": "might misuse ion core interfaces resulting in some vulnerabilities",
    "start": "821200",
    "end": "829079"
  },
  {
    "text": "so according to these aspects we analyzed the design and implementation of all ion",
    "start": "829760",
    "end": "836720"
  },
  {
    "text": "core apis for kernel space and their correct usage for vendor drivers we also",
    "start": "836720",
    "end": "842000"
  },
  {
    "text": "checked the code of many vendor drivers to say if they use the apis correctly",
    "start": "842000",
    "end": "848800"
  },
  {
    "text": "and we finally found some typical vulnerabilities there are two vulnerabilities from ion core which are",
    "start": "848800",
    "end": "857120"
  },
  {
    "text": "cve 2021 0929 and cve 2021",
    "start": "857120",
    "end": "864120"
  },
  {
    "text": "39714 there is a vulnerability caused by vendor drivers misuse of ion core apis",
    "start": "864120",
    "end": "871199"
  },
  {
    "text": "which is cv 2022-20110",
    "start": "871199",
    "end": "875480"
  },
  {
    "text": "let's have have a look at the cve 2021 0929 and seventy two thousand twenty two",
    "start": "877440",
    "end": "885199"
  },
  {
    "text": "two zero one one zero uh c two thousand twenty one zero nine",
    "start": "885199",
    "end": "891839"
  },
  {
    "text": "tonight uh will affect ion version one two and three the root cause of it is",
    "start": "891839",
    "end": "897199"
  },
  {
    "text": "that ion co exposed an api to user space which it shouldn't be",
    "start": "897199",
    "end": "903519"
  },
  {
    "text": "a use after free issue would be introduced into vendor drivers by our ion core in a specific use",
    "start": "903519",
    "end": "911760"
  },
  {
    "text": "scenario here is an ion use",
    "start": "911760",
    "end": "918560"
  },
  {
    "text": "scenario that can be seen in many vendor drivers in the user space it can create a dma",
    "start": "918560",
    "end": "924959"
  },
  {
    "text": "buff fd with ion and this dma buff fd will be passed to the vendor driver",
    "start": "924959",
    "end": "931120"
  },
  {
    "text": "through the syscalls like i o control and then the vendor driver will create an i o handle object by importing the",
    "start": "931120",
    "end": "938959"
  },
  {
    "text": "dma buff fd after that the function io map kernel will be called to map the",
    "start": "938959",
    "end": "944639"
  },
  {
    "text": "memory buffer represented by the i o handle into kernel space",
    "start": "944639",
    "end": "950639"
  },
  {
    "text": "the kernel virtual address will be returned from function io map kernel the vendor driver would reference the",
    "start": "950639",
    "end": "958240"
  },
  {
    "text": "kernovator address to do some work like writing data into the virtual address",
    "start": "958240",
    "end": "965279"
  },
  {
    "text": "this use scenario is simple but we started looking in when we started",
    "start": "965600",
    "end": "970880"
  },
  {
    "text": "looking to the interfaces provided by the dme buff fd",
    "start": "970880",
    "end": "976399"
  },
  {
    "text": "we found something interesting there is a command in the i o control of",
    "start": "976399",
    "end": "983279"
  },
  {
    "text": "dma buff fd which is a sync command used to do memory sync operations",
    "start": "983279",
    "end": "989519"
  },
  {
    "text": "but we found that with this command we can unmap the kernel virtual address",
    "start": "989519",
    "end": "995440"
  },
  {
    "text": "mapped by the function iomap kernel as you can see here the virtual address gets unmapped in the",
    "start": "995440",
    "end": "1002560"
  },
  {
    "text": "kernel space as a result i use f3 would happen in a",
    "start": "1002560",
    "end": "1009199"
  },
  {
    "text": "risk condition like this you can manage to unmap the kernel virtual address right before the vendor",
    "start": "1009199",
    "end": "1014800"
  },
  {
    "text": "driver is going to reference it this will definitely cause the use of",
    "start": "1014800",
    "end": "1019839"
  },
  {
    "text": "free the most interesting point of this vulnerability is that you cannot trigger",
    "start": "1019839",
    "end": "1026880"
  },
  {
    "text": "it in ion core it can only be triggered in the in the specific use scenario of",
    "start": "1026880",
    "end": "1032880"
  },
  {
    "text": "vendor drivers this makes it a really typical vulnerability introduced by ion core but",
    "start": "1032880",
    "end": "1039918"
  },
  {
    "text": "affects vendor drivers cve 2021 22",
    "start": "1039919",
    "end": "1047720"
  },
  {
    "text": "20110 is a vulnerability affecting a vendor's devices with ion version 1.",
    "start": "1047720",
    "end": "1055120"
  },
  {
    "text": "the root cause of it is the misuse of ion core api by a vendor driver a use",
    "start": "1055120",
    "end": "1060720"
  },
  {
    "text": "after free will happen by triggering the issue as we know that iomap kernel is used to",
    "start": "1060720",
    "end": "1068160"
  },
  {
    "text": "map the memory buffer into kernel space the kernel over to address will be cached in the the draw field of the ion",
    "start": "1068160",
    "end": "1075919"
  },
  {
    "text": "buffer object there is also a reference count field k-map count for the v address field",
    "start": "1075919",
    "end": "1083280"
  },
  {
    "text": "we can see that during the map operation in this function both v a drawer and",
    "start": "1083280",
    "end": "1088960"
  },
  {
    "text": "keymap count are protected by two by two mutex locks",
    "start": "1088960",
    "end": "1095520"
  },
  {
    "text": "this can prevent issues from happening in a risk condition",
    "start": "1095520",
    "end": "1100640"
  },
  {
    "text": "the vita draw of ion buffer is an internal data of ion so if vendor",
    "start": "1100640",
    "end": "1106240"
  },
  {
    "text": "drivers want to get the virtual address of a memory buffer they should call the function io map kernel instead of",
    "start": "1106240",
    "end": "1113200"
  },
  {
    "text": "accessing the address field of ion buffer directly because that would cause",
    "start": "1113200",
    "end": "1118720"
  },
  {
    "text": "the uef in a risk condition",
    "start": "1118720",
    "end": "1123840"
  },
  {
    "text": "in a driver of offender a we found that it's accessing the via draw and keymap",
    "start": "1124400",
    "end": "1130559"
  },
  {
    "text": "count field of ion buffer object directly without taking the mutex locks",
    "start": "1130559",
    "end": "1138240"
  },
  {
    "text": "this would cause use after three in a risk condition like this",
    "start": "1138240",
    "end": "1144080"
  },
  {
    "text": "as you can see in thread a right after it has gotten the",
    "start": "1144080",
    "end": "1149600"
  },
  {
    "text": "kernel virtual address from the v a draw of ion buffer konova trade this kernel",
    "start": "1149600",
    "end": "1155600"
  },
  {
    "text": "virtual address can be unmapped um unmapped in thread b with the function",
    "start": "1155600",
    "end": "1160799"
  },
  {
    "text": "iron map kernel and then one thread a reference says the kernel thread virtual",
    "start": "1160799",
    "end": "1166400"
  },
  {
    "text": "address the uaf would happen this vulnerability is a typical one",
    "start": "1166400",
    "end": "1172640"
  },
  {
    "text": "caused by vendor drivers misuse of ion core api",
    "start": "1172640",
    "end": "1178679"
  },
  {
    "text": "let's have a look at the customization of ion ion provides several interfaces",
    "start": "1179679",
    "end": "1185440"
  },
  {
    "text": "for vendors to do customizations so we were wondering could there be some",
    "start": "1185440",
    "end": "1191360"
  },
  {
    "text": "security issues in the customization code",
    "start": "1191360",
    "end": "1195840"
  },
  {
    "text": "vendors can use the function ion device add heap to add their custom custom i or",
    "start": "1196960",
    "end": "1202720"
  },
  {
    "text": "hip every ion heap must implement its iron hip operations our hip operations",
    "start": "1202720",
    "end": "1209440"
  },
  {
    "text": "contains the functions used for memory allocation free and map map",
    "start": "1209440",
    "end": "1215679"
  },
  {
    "text": "operations and so on vendors need to implement these functions for their",
    "start": "1215679",
    "end": "1221200"
  },
  {
    "text": "custom iohip and also vendors can add custom i o control",
    "start": "1221200",
    "end": "1228000"
  },
  {
    "text": "commands for their own buffer operations",
    "start": "1228000",
    "end": "1234520"
  },
  {
    "text": "we found that most vendors would add their own customer ir hips and most",
    "start": "1234640",
    "end": "1239760"
  },
  {
    "text": "vendors would add a custom io control commands such as vendor a and vendor b",
    "start": "1239760",
    "end": "1245440"
  },
  {
    "text": "as you can see these two vendors add their own io control i o control commands",
    "start": "1245440",
    "end": "1253759"
  },
  {
    "text": "in android ecosystem the customization is proven to be more vulnerable",
    "start": "1253840",
    "end": "1259760"
  },
  {
    "text": "so they might be one of the vulnerabilities in the customizations of ion",
    "start": "1259760",
    "end": "1266559"
  },
  {
    "text": "so after a long time of bug hunting in the customizations of ion we found dozens of vulnerabilities",
    "start": "1267120",
    "end": "1274320"
  },
  {
    "text": "many of them can be used to do privilege escalation all the vulnerabilities in this page had",
    "start": "1274320",
    "end": "1281520"
  },
  {
    "text": "already been fixed by vendors",
    "start": "1281520",
    "end": "1285120"
  },
  {
    "text": "vendors modification to ion core is an important characteristic of ion we know",
    "start": "1286720",
    "end": "1292880"
  },
  {
    "text": "that ion core is a maintained upstream and vendors should not modify the ion",
    "start": "1292880",
    "end": "1298559"
  },
  {
    "text": "core but the truth is that some vendors are doing more modifications to ion core",
    "start": "1298559",
    "end": "1305840"
  },
  {
    "text": "for example we found that vendor a adds some commands into the orig original",
    "start": "1306080",
    "end": "1311440"
  },
  {
    "text": "function io ion control and vendor b adds some debug code into the original",
    "start": "1311440",
    "end": "1317679"
  },
  {
    "text": "interface ion unlock all these modifications might introduce",
    "start": "1317679",
    "end": "1324799"
  },
  {
    "text": "issues there are two aspects we need to pay attention to the first aspect is that vulnerable",
    "start": "1324799",
    "end": "1332320"
  },
  {
    "text": "modifications can introduce can introduce new vulnerabilities into ion",
    "start": "1332320",
    "end": "1337520"
  },
  {
    "text": "core the second aspect is that code much conflict conflicts can happen due to the",
    "start": "1337520",
    "end": "1344080"
  },
  {
    "text": "modifications the missing patch might cause the no vulnerabilities not fixed",
    "start": "1344080",
    "end": "1349760"
  },
  {
    "text": "and the wrong patch might introduce some new vulnerabilities",
    "start": "1349760",
    "end": "1355279"
  },
  {
    "text": "according to the assumption we analyzed the modifications made by many vendors",
    "start": "1357200",
    "end": "1362559"
  },
  {
    "text": "and also they investigated dozens of no issues of ion and checked if they are",
    "start": "1362559",
    "end": "1368480"
  },
  {
    "text": "fixed well in the downstream up vendors and it turned out that our assumption",
    "start": "1368480",
    "end": "1375120"
  },
  {
    "text": "was correct and we found a few vulnerabilities there is a vulnerability introduced by a",
    "start": "1375120",
    "end": "1381440"
  },
  {
    "text": "vendor due to the vulnerable modifications which is cv 2021 2021.0422",
    "start": "1381440",
    "end": "1389158"
  },
  {
    "text": "and there are two vulnerabilities due to the missing patch and two vulnerabilities due to the one patch",
    "start": "1390000",
    "end": "1396559"
  },
  {
    "text": "let's have a look at the city 2021 319",
    "start": "1396559",
    "end": "1403200"
  },
  {
    "text": "to understand how the vulnerabilities get introduced because of the missing",
    "start": "1403200",
    "end": "1408960"
  },
  {
    "text": "patch the vulnerable this vulnerability affects our vendors",
    "start": "1408960",
    "end": "1415360"
  },
  {
    "text": "devices with ion version 1. the root cause of it is that the patch of a no",
    "start": "1415360",
    "end": "1421440"
  },
  {
    "text": "issue is missing and this results in a use after free issue",
    "start": "1421440",
    "end": "1428320"
  },
  {
    "text": "let's have a look at this known issue it happens at the ion 3 ion control command",
    "start": "1429120",
    "end": "1435200"
  },
  {
    "text": "as we already know with ion 3 command we can manage to release an ion handle object",
    "start": "1435200",
    "end": "1442799"
  },
  {
    "text": "but to it but with this word of ion 3",
    "start": "1442799",
    "end": "1448960"
  },
  {
    "text": "if we try to call ionfree command in you the space can continuously we will",
    "start": "1448960",
    "end": "1454480"
  },
  {
    "text": "release ion handle object to matter how many time it has been referenced by others to be more specific",
    "start": "1454480",
    "end": "1462080"
  },
  {
    "text": "the iron handle object in kernel space can be released at any time from user space",
    "start": "1462080",
    "end": "1469120"
  },
  {
    "text": "as a result a use of free issue would happen in many places where the ir hand",
    "start": "1471679",
    "end": "1476799"
  },
  {
    "text": "object gets used for example the the use after we use after free issue will",
    "start": "1476799",
    "end": "1482320"
  },
  {
    "text": "happen in the ion lock command like you can see",
    "start": "1482320",
    "end": "1487679"
  },
  {
    "text": "what else quite a few uaf would happen in vendors",
    "start": "1487679",
    "end": "1493039"
  },
  {
    "text": "customizations if the i o handle gets used there",
    "start": "1493039",
    "end": "1498720"
  },
  {
    "text": "actually the issue has been assigned cvid in 2017. here is the patch for it",
    "start": "1499520",
    "end": "1506799"
  },
  {
    "text": "but the effect is although five years have have passed away a patch for this vulnerability has not been applied in",
    "start": "1506799",
    "end": "1513760"
  },
  {
    "text": "many android kernel branches including some android common kernel branches upstream kernel branches and",
    "start": "1513760",
    "end": "1520720"
  },
  {
    "text": "also some vendors kernel branches this this issue is a typical one due to",
    "start": "1520720",
    "end": "1526320"
  },
  {
    "text": "the missing patch",
    "start": "1526320",
    "end": "1529840"
  },
  {
    "text": "let's see the last characteristic of ion which is the buffer sharing feature of",
    "start": "1531679",
    "end": "1536880"
  },
  {
    "text": "ion actually the buffer sharing feature of ion is a",
    "start": "1536880",
    "end": "1543279"
  },
  {
    "text": "really attractive characteristic that has been researched by several security",
    "start": "1543279",
    "end": "1549200"
  },
  {
    "text": "teams for example there is a paper android ion hazard",
    "start": "1549200",
    "end": "1554400"
  },
  {
    "text": "and two kinds of vulnerabilities introduced by iom buffer sharing are",
    "start": "1554400",
    "end": "1559919"
  },
  {
    "text": "revealed in this paper and also in another in another blog",
    "start": "1559919",
    "end": "1566480"
  },
  {
    "text": "written by the researcher from google project zero the double fetch vulnerability introduced by buffer",
    "start": "1566480",
    "end": "1573440"
  },
  {
    "text": "sharing of ion is revealed and the double fetch double fetch is like this",
    "start": "1573440",
    "end": "1580240"
  },
  {
    "text": "in kernel space the memory buffer will be fetched fetched twice the first fetch is for the checking",
    "start": "1580240",
    "end": "1587120"
  },
  {
    "text": "operation to make sure the data in the memory buffer is valid and for the second fetch the data in the",
    "start": "1587120",
    "end": "1594159"
  },
  {
    "text": "memory buffer will be used and but because the memory buffer is shared between user space and kernel",
    "start": "1594159",
    "end": "1600400"
  },
  {
    "text": "space the user process can do some malicious updates to the memory buffer",
    "start": "1600400",
    "end": "1606799"
  },
  {
    "text": "and this will make the checks in the first fetch invalid and issues might happen when kernel",
    "start": "1606799",
    "end": "1614480"
  },
  {
    "text": "uses the data in the memory buffer according to the pattern of the double",
    "start": "1614480",
    "end": "1621440"
  },
  {
    "text": "fetch issue we found three more but double fetch issues a vendor's apu",
    "start": "1621440",
    "end": "1628000"
  },
  {
    "text": "driver and here is a question we can think about",
    "start": "1628000",
    "end": "1635760"
  },
  {
    "text": "is i own the only component that has the buffer sharing feature maybe we can find",
    "start": "1636400",
    "end": "1641760"
  },
  {
    "text": "find more double fetch issues in the buffer sharing feature of other components",
    "start": "1641760",
    "end": "1647840"
  },
  {
    "text": "such as the dma buff dma buff subsystem",
    "start": "1647840",
    "end": "1653720"
  },
  {
    "text": "after all these discussions about characteristics and the vulnerabilities buried in each",
    "start": "1655760",
    "end": "1661760"
  },
  {
    "text": "of them it's time for us to see what we can do with exploit",
    "start": "1661760",
    "end": "1666840"
  },
  {
    "text": "explosion we succeeded in getting root of android devices with one vulnerability in",
    "start": "1666840",
    "end": "1674159"
  },
  {
    "text": "explosion and we bypassed the ksrr and disabled",
    "start": "1674159",
    "end": "1681039"
  },
  {
    "text": "the s linux this can be finished from any untrusted app with no additional privilege needed",
    "start": "1681039",
    "end": "1690640"
  },
  {
    "text": "and actually there are few other vulnerabilities in explosion we can also use to finish pre",
    "start": "1690640",
    "end": "1697520"
  },
  {
    "text": "village escalation and the exploit video is here if you want to see",
    "start": "1697520",
    "end": "1706080"
  },
  {
    "text": "let's make some reflections on explosion we already knew that ion has went over quite a few effectors from upstream so",
    "start": "1707279",
    "end": "1715360"
  },
  {
    "text": "in some way ion keeps improving in many aspects and the first version of ion which is",
    "start": "1715360",
    "end": "1722640"
  },
  {
    "text": "legacy ion has been used since around 2012 and now many android devices are",
    "start": "1722640",
    "end": "1729039"
  },
  {
    "text": "still using it there are many bug fixes and optimizations from time to time",
    "start": "1729039",
    "end": "1736880"
  },
  {
    "text": "and then in 2017 ion gets refactored ion clients and handles are removed some",
    "start": "1736880",
    "end": "1744880"
  },
  {
    "text": "i o control commands are removed too this makes ion more brief",
    "start": "1744880",
    "end": "1749919"
  },
  {
    "text": "which brings more security in 2019",
    "start": "1749919",
    "end": "1755679"
  },
  {
    "text": "in order to adapt ion to generic kernel image ion",
    "start": "1755679",
    "end": "1761120"
  },
  {
    "text": "android common kernel version 5.4 introduced a framework for",
    "start": "1761120",
    "end": "1767960"
  },
  {
    "text": "modularizing vendor custom io hips while keeping the ion core built in to be more",
    "start": "1767960",
    "end": "1774399"
  },
  {
    "text": "specific the ion core becomes a part of the gki image and vendors cannot do any",
    "start": "1774399",
    "end": "1781600"
  },
  {
    "text": "modification to ion core anymore so this will be definitely so this will",
    "start": "1781600",
    "end": "1787440"
  },
  {
    "text": "definitely get rid of vulnerabilities caused by the missing patch the wrong",
    "start": "1787440",
    "end": "1792880"
  },
  {
    "text": "patch or vulnerable modifications from vendors",
    "start": "1792880",
    "end": "1798320"
  },
  {
    "text": "after two years ion started to get replaced with dma buff heaps in some",
    "start": "1799679",
    "end": "1805440"
  },
  {
    "text": "devices of android 12. according to the official statements from google dme buff",
    "start": "1805440",
    "end": "1811760"
  },
  {
    "text": "heaps have have some advantages in security abs stability and standardization",
    "start": "1811760",
    "end": "1821120"
  },
  {
    "text": "however we have noticed that millions of devices are still using android version",
    "start": "1821120",
    "end": "1826159"
  },
  {
    "text": "version 11 10 or even older android versions lots of work still needs to be done by",
    "start": "1826159",
    "end": "1832799"
  },
  {
    "text": "vendors to make sure ion is not attacked",
    "start": "1832799",
    "end": "1837840"
  },
  {
    "text": "so here are some suggestions for vendors first vendors should apply the ref",
    "start": "1840159",
    "end": "1846640"
  },
  {
    "text": "apply the refactors as soon as possible we make this suggestion for a reason as",
    "start": "1846640",
    "end": "1852640"
  },
  {
    "text": "mentioned io has been refactored upstream since in its kernel of 4.12",
    "start": "1852640",
    "end": "1859360"
  },
  {
    "text": "which makes ir more brief but we noticed that some vendors didn't apply this",
    "start": "1859360",
    "end": "1864880"
  },
  {
    "text": "refactor even in their 4.14 kernels this can be dangerous because the older",
    "start": "1864880",
    "end": "1872000"
  },
  {
    "text": "version may not be maintained well by the upstream community",
    "start": "1872000",
    "end": "1877440"
  },
  {
    "text": "second vendors should apply the patch quickly and carefully sometimes patching",
    "start": "1877440",
    "end": "1883120"
  },
  {
    "text": "vulnerability is not that simple especially when some code has been",
    "start": "1883120",
    "end": "1888480"
  },
  {
    "text": "modified modified by vendors code merging conflicts can happen",
    "start": "1888480",
    "end": "1893760"
  },
  {
    "text": "third vendors might must understand the ion apis well this can help vendors get rid of some",
    "start": "1893760",
    "end": "1901120"
  },
  {
    "text": "api use issues at last vendors should be careful when they do customizations to ion",
    "start": "1901120",
    "end": "1908720"
  },
  {
    "text": "because the customization is always attractive for bug hunters",
    "start": "1908720",
    "end": "1915360"
  },
  {
    "text": "it's time for us to discuss the future work we know that ion has been replaced with",
    "start": "1917120",
    "end": "1923519"
  },
  {
    "text": "dma buff hips in some devices and of android 12. so are the dmv dma buff hips",
    "start": "1923519",
    "end": "1930720"
  },
  {
    "text": "secure we found that dme buff is uh is very similar to ion",
    "start": "1930720",
    "end": "1937519"
  },
  {
    "text": "first of all dma buff component is also a base driver used by kernel drivers",
    "start": "1937519",
    "end": "1944399"
  },
  {
    "text": "uh this is just like ion they are also customization",
    "start": "1944399",
    "end": "1949519"
  },
  {
    "text": "interfaces in dma buff vendors can use this interface to do",
    "start": "1949519",
    "end": "1954880"
  },
  {
    "text": "their custom customizations and buffer sharing is also a feature of",
    "start": "1954880",
    "end": "1961120"
  },
  {
    "text": "dma buff our next so our next step is to to use the bug hunting methods we used",
    "start": "1961120",
    "end": "1968320"
  },
  {
    "text": "in ion to do some more research on the dma buff component to say",
    "start": "1968320",
    "end": "1974960"
  },
  {
    "text": "if there are issues in it well uh",
    "start": "1974960",
    "end": "1980799"
  },
  {
    "text": "thanks to cheng foo ball mo infant chu fang young lin wu and haiko for helping me with my",
    "start": "1980799",
    "end": "1989200"
  },
  {
    "text": "slides and they just make made great suggestions",
    "start": "1989200",
    "end": "1995360"
  },
  {
    "text": "and by the way because of the limited time i have put the details of other ion",
    "start": "1996240",
    "end": "2002320"
  },
  {
    "text": "vulnerabilities we have found in the supplement part supplement",
    "start": "2002320",
    "end": "2007519"
  },
  {
    "text": "supplement part of the slides you can read them if you are interested",
    "start": "2007519",
    "end": "2014559"
  },
  {
    "text": "and now i will take questions from the audience",
    "start": "2015600",
    "end": "2023158"
  },
  {
    "text": "[Music]",
    "start": "2023420",
    "end": "2026489"
  },
  {
    "text": "[Music]",
    "start": "2030340",
    "end": "2033419"
  }
]