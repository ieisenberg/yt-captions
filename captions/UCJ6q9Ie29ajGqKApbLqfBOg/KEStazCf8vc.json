[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "thank you thanks thanks for introduction",
    "start": "6859",
    "end": "14519"
  },
  {
    "text": "so welcome to my talk um I'm going to start with an introduction about us my name is Jim",
    "start": "14519",
    "end": "21900"
  },
  {
    "text": "Haley I am a PhD student at Northwestern University my research focuses on system",
    "start": "21900",
    "end": "27900"
  },
  {
    "text": "security I found box exploit box and feedback the guy in the middle is",
    "start": "27900",
    "end": "34700"
  },
  {
    "text": "who is also a puree student at Northwestern University he is a CTF guy",
    "start": "34700",
    "end": "40739"
  },
  {
    "text": "which are very similar research interests both of us are advised by Siri Xing who",
    "start": "40739",
    "end": "46800"
  },
  {
    "text": "is a professor at Northwestern University",
    "start": "46800",
    "end": "51620"
  },
  {
    "text": "so 30 pipe this is mentioned in the title 30 pack is named for the kernel",
    "start": "52620",
    "end": "59760"
  },
  {
    "text": "vulnerability CV 2022-0847 it's an initializer bug a Linux kernels",
    "start": "59760",
    "end": "66960"
  },
  {
    "text": "type subsystem the bug affects kernel V 5.8 and higher",
    "start": "66960",
    "end": "72900"
  },
  {
    "text": "one of the most interesting thing about the knee pipe is its exploitation",
    "start": "72900",
    "end": "78060"
  },
  {
    "text": "unlike unconventional kernel exploitation it doesn't hijack control flow",
    "start": "78060",
    "end": "83220"
  },
  {
    "text": "it's a data holding exploitation so no rock is needed and it doesn't have to",
    "start": "83220",
    "end": "89340"
  },
  {
    "text": "bypass kslr the effect of the exploitation is also different",
    "start": "89340",
    "end": "95159"
  },
  {
    "text": "it doesn't execute code with kernel privilege instead it can override any",
    "start": "95159",
    "end": "101400"
  },
  {
    "text": "files as long as we have read permission to it with such capability 35 even",
    "start": "101400",
    "end": "108000"
  },
  {
    "text": "demonstrated local privilege escalation or Android system",
    "start": "108000",
    "end": "113179"
  },
  {
    "text": "3D pipe is so powerful and has attracted so many attentions but what we learned from dirt you have",
    "start": "114299",
    "end": "122640"
  },
  {
    "text": "from my understanding I think the one of the most interesting thing I learned is",
    "start": "122640",
    "end": "129119"
  },
  {
    "text": "data only attack is powerful it brings many benefits",
    "start": "129119",
    "end": "134760"
  },
  {
    "text": "first a data only attack method could allow you to write a universal exploit",
    "start": "134760",
    "end": "141180"
  },
  {
    "text": "what does universal mean it means that the exploit code Quran",
    "start": "141180",
    "end": "146580"
  },
  {
    "text": "calls different kernels different architectures without any modification",
    "start": "146580",
    "end": "152160"
  },
  {
    "text": "second it doesn't have to deal with CFI which is an effective mitigation for",
    "start": "152160",
    "end": "158340"
  },
  {
    "text": "roughs CFI is enabling Android kernel which makes Android kernel exploitation much",
    "start": "158340",
    "end": "164580"
  },
  {
    "text": "harder third most mitigation focuses on protecting",
    "start": "164580",
    "end": "169920"
  },
  {
    "text": "control flow Integrity very few mitigation in Linux kernel protects data",
    "start": "169920",
    "end": "175080"
  },
  {
    "text": "only integrity that's why there's no effect exploiting mitigation for dirty pipe so we need",
    "start": "175080",
    "end": "183120"
  },
  {
    "text": "those mitigations this all sounds interesting but 35 is",
    "start": "183120",
    "end": "191760"
  },
  {
    "text": "not perfect first 35 candle is gapped from container",
    "start": "191760",
    "end": "197580"
  },
  {
    "text": "actively escaping from container can only be done under certain conditions where the whole",
    "start": "197580",
    "end": "204300"
  },
  {
    "text": "The holster is interacting with the container in this case 35 can overwrite the file",
    "start": "204300",
    "end": "211260"
  },
  {
    "text": "on the host to execute the command but this can be achieved when the host",
    "start": "211260",
    "end": "217019"
  },
  {
    "text": "is doing nothing in other words 35 cannot actively escape from container",
    "start": "217019",
    "end": "225000"
  },
  {
    "text": "second 35 is just a bug it's not a generic exploitation method that could",
    "start": "225000",
    "end": "232080"
  },
  {
    "text": "benefit other bugs in this talk I would like to introduce a",
    "start": "232080",
    "end": "238080"
  },
  {
    "text": "new exploitation method named 30 Christ the high level idea of the required is",
    "start": "238080",
    "end": "243659"
  },
  {
    "text": "to swap then its kernel credentials the method has several advantages first",
    "start": "243659",
    "end": "250260"
  },
  {
    "text": "it's a generic exploitation method it's very simple which just needs a few",
    "start": "250260",
    "end": "256019"
  },
  {
    "text": "steps but it's very effective second similar to dirty path you could",
    "start": "256019",
    "end": "262260"
  },
  {
    "text": "write a data only exploit and without dealing with CFI and Rob staff third",
    "start": "262260",
    "end": "269160"
  },
  {
    "text": "with 30 credits you are capable of escaping from container actively which cannot be done by Dirty pipe",
    "start": "269160",
    "end": "278060"
  },
  {
    "text": "so some summary here first the required is a generic exploitation method well 30",
    "start": "278639",
    "end": "285300"
  },
  {
    "text": "pipe is a bug second both of them could generate data only Universal exploit",
    "start": "285300",
    "end": "291780"
  },
  {
    "text": "third since they are data only so they could bypass CFI fourth Duty credit",
    "start": "291780",
    "end": "299040"
  },
  {
    "text": "can actively escape from container which 30 type is not capable of",
    "start": "299040",
    "end": "305100"
  },
  {
    "text": "last but not least 3D pipe is a bug that has been fixed so the thread has been removed",
    "start": "305100",
    "end": "312300"
  },
  {
    "text": "as the exploitation method 30 30 quad is not available",
    "start": "312300",
    "end": "320240"
  },
  {
    "text": "foreign attacks kernel credentials what are",
    "start": "325860",
    "end": "331979"
  },
  {
    "text": "kernel credentials in short kernel credentials are property",
    "start": "331979",
    "end": "337860"
  },
  {
    "text": "that carry privileged information in kernel according to Colonel's documentation",
    "start": "337860",
    "end": "343680"
  },
  {
    "text": "there are they are the representation of users privilege and capability",
    "start": "343680",
    "end": "349380"
  },
  {
    "text": "it Linux Kernel's implementation there are two main types of credentials",
    "start": "349380",
    "end": "354620"
  },
  {
    "text": "credentials and open file credentials task credential is for each kernel task",
    "start": "354620",
    "end": "360860"
  },
  {
    "text": "while open file credential includes the privileged information to an open file",
    "start": "360860",
    "end": "367440"
  },
  {
    "text": "with those credentials Security checks X on them to examine the privilege",
    "start": "367440",
    "end": "374100"
  },
  {
    "text": "I will give examples of how kernel implements learn and how to use them",
    "start": "374100",
    "end": "379940"
  },
  {
    "text": "first task credentials it's implemented as strong Credit in Linux kernel",
    "start": "380639",
    "end": "387479"
  },
  {
    "text": "each kernel task references to a scrap thread allocated on Heap the credit is",
    "start": "387479",
    "end": "393000"
  },
  {
    "text": "used to examine user privilege for unpreviewed user the crowd is",
    "start": "393000",
    "end": "398100"
  },
  {
    "text": "unprivileged when there is a new unprivileged user spawning a new kernel task",
    "start": "398100",
    "end": "405360"
  },
  {
    "text": "kernel will allocate a unprivileged crap on a free memory slot",
    "start": "405360",
    "end": "410520"
  },
  {
    "text": "if a user is privileged kernel will allocate a privilege required on the Heap",
    "start": "410520",
    "end": "418080"
  },
  {
    "text": "users with privileged credentials are viewed as root users and this is how",
    "start": "418080",
    "end": "423720"
  },
  {
    "text": "kernel uses task credentials next open file credentials it's",
    "start": "423720",
    "end": "430919"
  },
  {
    "text": "implemented as scrap file a Linux kernel similar to straw crime it's stored on",
    "start": "430919",
    "end": "436919"
  },
  {
    "text": "kernel Heap a new straw file will be created on kernel Heap on the file or file is",
    "start": "436919",
    "end": "444060"
  },
  {
    "text": "opened the straw file contains several fields that we need to care about",
    "start": "444060",
    "end": "450060"
  },
  {
    "text": "first it contains how the file is opened for example on the slice the file is",
    "start": "450060",
    "end": "457560"
  },
  {
    "text": "opened in read and write mode then the F mode field will have the corresponding",
    "start": "457560",
    "end": "462900"
  },
  {
    "text": "Flags this the file track has a reference to",
    "start": "462900",
    "end": "468000"
  },
  {
    "text": "the struck thread of users who open it",
    "start": "468000",
    "end": "472580"
  },
  {
    "text": "the straw file encodes Lafell which is under operation on the slice the straw",
    "start": "473699",
    "end": "479639"
  },
  {
    "text": "file enclosed the dummy file which is what we just opened",
    "start": "479639",
    "end": "485060"
  },
  {
    "text": "when the file is open the access information to the file will be transferred to the struct file so kernel",
    "start": "486120",
    "end": "494099"
  },
  {
    "text": "checks on the straw file to see if the access is allowed so let's take a look",
    "start": "494099",
    "end": "499919"
  },
  {
    "text": "at this example when we try to write content to the file we just opened",
    "start": "499919",
    "end": "505800"
  },
  {
    "text": "kernel will checks whether the F mode in this rough L contains a red flag",
    "start": "505800",
    "end": "510960"
  },
  {
    "text": "since we open the file in the in the with the red permission so the permission check will be satisfied",
    "start": "510960",
    "end": "519000"
  },
  {
    "text": "and eventually the content will be written to the disk",
    "start": "519000",
    "end": "524120"
  },
  {
    "text": "however if a file is opened with read only mode which doesn't specify relative",
    "start": "524120",
    "end": "531540"
  },
  {
    "text": "information the kernel will create a file object with read alien flag in a f",
    "start": "531540",
    "end": "537120"
  },
  {
    "text": "read fmodel field we will try to write to this file the rest is called will",
    "start": "537120",
    "end": "543600"
  },
  {
    "text": "will be denied because the permission check on the file will fail",
    "start": "543600",
    "end": "550160"
  },
  {
    "text": "and they eventually write into disk will fail and this is how kernel uses open",
    "start": "550440",
    "end": "556380"
  },
  {
    "text": "file credential so with the background in mind then I'm going to",
    "start": "556380",
    "end": "563580"
  },
  {
    "text": "talk about how dirty crap attacks in these kernel credentials the high level idea of the required is",
    "start": "563580",
    "end": "570600"
  },
  {
    "text": "to swap kernel credentials specifically it swaps unprivileged credentials with",
    "start": "570600",
    "end": "577440"
  },
  {
    "text": "privileged credentials to escalate privilege in the following I'm going to talk about two parts of attacks which",
    "start": "577440",
    "end": "584760"
  },
  {
    "text": "are attack attacking task credentials and open vowel credentials",
    "start": "584760",
    "end": "590779"
  },
  {
    "text": "first attacking task credentials in Linux kernel each kernel task",
    "start": "590820",
    "end": "597839"
  },
  {
    "text": "references to a structure on a heap the first step of the attack is to",
    "start": "597839",
    "end": "605040"
  },
  {
    "text": "utilize kernel box to free an unprivileged required that belongs to the attacker's task",
    "start": "605040",
    "end": "613160"
  },
  {
    "text": "once the credit is freed the memory slot will be marked as freed by the HIPAA",
    "start": "613440",
    "end": "618540"
  },
  {
    "text": "allocator in the second step we spawn new new",
    "start": "618540",
    "end": "624899"
  },
  {
    "text": "privileged kernel tasks which indeed will allocate a privileged",
    "start": "624899",
    "end": "630420"
  },
  {
    "text": "credential on the Kernel Heap the Hebrew allocator will reuse the freedom memory",
    "start": "630420",
    "end": "635700"
  },
  {
    "text": "slot and place the new credit on it after this step the credit of the",
    "start": "635700",
    "end": "642060"
  },
  {
    "text": "attacker's task will change from the unpreviewed credit to create privilege",
    "start": "642060",
    "end": "647220"
  },
  {
    "text": "request then they can operate as privileged users and this is how dirty",
    "start": "647220",
    "end": "653220"
  },
  {
    "text": "crack attacks task credential next I'm going to talk about how Duty",
    "start": "653220",
    "end": "659940"
  },
  {
    "text": "credit attacks open file credentials which is straw file in kernels",
    "start": "659940",
    "end": "665100"
  },
  {
    "text": "implementation struct file is used to exam permission",
    "start": "665100",
    "end": "671880"
  },
  {
    "text": "when accessing the file we opened when the permission check is done the",
    "start": "671880",
    "end": "677519"
  },
  {
    "text": "right operation of the file system will be invoked to do the real content right",
    "start": "677519",
    "end": "684740"
  },
  {
    "text": "so the first step of attacking open file credential is to free the file struct in",
    "start": "684899",
    "end": "690839"
  },
  {
    "text": "kernel memory this step should be happening after the permission check is satisfied but before",
    "start": "690839",
    "end": "699060"
  },
  {
    "text": "the right into the file system is is beginning",
    "start": "699060",
    "end": "704940"
  },
  {
    "text": "after freeing the Rafael in the kernel Heap memory the memory slot becomes free",
    "start": "704940",
    "end": "711000"
  },
  {
    "text": "the full reuse in the second step we open a file that",
    "start": "711000",
    "end": "717779"
  },
  {
    "text": "we that we want to overwrite for example we open the ETC password file",
    "start": "717779",
    "end": "723660"
  },
  {
    "text": "since it is a password file is not readable for unpreviewed users we open",
    "start": "723660",
    "end": "728820"
  },
  {
    "text": "that in read-only mode this operation will allocate a new file struct with read-only flag on the Kernel",
    "start": "728820",
    "end": "736920"
  },
  {
    "text": "Heap and the Hebrew allocator will reuse the",
    "start": "736920",
    "end": "742860"
  },
  {
    "text": "freed memory and eventually this allocation will recline the memory",
    "start": "742860",
    "end": "748860"
  },
  {
    "text": "slot we just read after this step the struct file in kernel Heap will be swapped from the",
    "start": "748860",
    "end": "755760"
  },
  {
    "text": "dummy file to the ETC password file because the permission check on the file",
    "start": "755760",
    "end": "761760"
  },
  {
    "text": "has been done before the right Cisco will not be denied even though the F mode of a straw file is",
    "start": "761760",
    "end": "768420"
  },
  {
    "text": "real it's real early in step 3 when kernel continues to",
    "start": "768420",
    "end": "775139"
  },
  {
    "text": "execute it will do the actual file right on a disk this time since we have",
    "start": "775139",
    "end": "780959"
  },
  {
    "text": "swapped the file struct it actually writes the content to the ETC password file",
    "start": "780959",
    "end": "787019"
  },
  {
    "text": "and this is how the required attacks open file credentials [Music]",
    "start": "787019",
    "end": "793079"
  },
  {
    "text": "so in summary the required follows three steps to launch your attack first three",
    "start": "793079",
    "end": "801480"
  },
  {
    "text": "the attackers unprivileged credential with the vulnerability second we claim the freed memory slots",
    "start": "801480",
    "end": "808740"
  },
  {
    "text": "by allocating a privileged credential third after the credential is swapped the",
    "start": "808740",
    "end": "815579"
  },
  {
    "text": "attacker can operate as previous users",
    "start": "815579",
    "end": "820220"
  },
  {
    "text": "these three steps sound pretty straightforward but doing so is challenging",
    "start": "821579",
    "end": "827160"
  },
  {
    "text": "first three required requires the capability on the credential object",
    "start": "827160",
    "end": "832320"
  },
  {
    "text": "which is challenging when the vulnerability doesn't have such capability",
    "start": "832320",
    "end": "838459"
  },
  {
    "text": "this is because both cred and the file objects are allocated on dedicated",
    "start": "838860",
    "end": "843899"
  },
  {
    "text": "memory cache well most of vulnerability do not happen on those two memory caches",
    "start": "843899",
    "end": "850519"
  },
  {
    "text": "indeed they may happen on generic memory caches which I use mostly about a kernel",
    "start": "850519",
    "end": "859500"
  },
  {
    "text": "besides most of vulnerability may not have three capability",
    "start": "859500",
    "end": "864620"
  },
  {
    "text": "our solution to it is to Pivot vulnerability capability",
    "start": "866040",
    "end": "871200"
  },
  {
    "text": "in the following I'm going to talk about how to Pivot invalid right which is Auto",
    "start": "871200",
    "end": "877139"
  },
  {
    "text": "Bond rate and use of the free ride and pivoting invalid free which is double",
    "start": "877139",
    "end": "883440"
  },
  {
    "text": "free for example so first pved invalids right",
    "start": "883440",
    "end": "890820"
  },
  {
    "text": "thank you to Pivot invalid's right capability to",
    "start": "890820",
    "end": "896100"
  },
  {
    "text": "freeing a credential object our idea is to leverage victim objects",
    "start": "896100",
    "end": "903180"
  },
  {
    "text": "that contains a reference to a credential object let's look at the code on the right side",
    "start": "903180",
    "end": "909959"
  },
  {
    "text": "the request key of struct contains a reference to a struct to a quest object",
    "start": "909959",
    "end": "916920"
  },
  {
    "text": "when it's allocated on kernel Heap its memory layout could be similar to the picture on the left side",
    "start": "916920",
    "end": "923339"
  },
  {
    "text": "we have a victim object it contains a pointer pointing to a credential object",
    "start": "923339",
    "end": "929459"
  },
  {
    "text": "in its own memory cache",
    "start": "929459",
    "end": "933500"
  },
  {
    "text": "from a hip for hip overflow we put such a victim object right after the Overflow",
    "start": "934500",
    "end": "940740"
  },
  {
    "text": "object so the credit field will be in the Overflow memory region",
    "start": "940740",
    "end": "946560"
  },
  {
    "text": "for use of the free we overlap the use of the free object with the",
    "start": "946560",
    "end": "952019"
  },
  {
    "text": "victim object in the meantime the credit field is also in other memory region of",
    "start": "952019",
    "end": "957720"
  },
  {
    "text": "the use of free ride next we trigger the vulnerability and",
    "start": "957720",
    "end": "964320"
  },
  {
    "text": "partially overwrite the credit pointer making a reference to another credential object",
    "start": "964320",
    "end": "970440"
  },
  {
    "text": "the credential object is managed by reference count the pointer change will cause a reference counter unbalance",
    "start": "970440",
    "end": "979500"
  },
  {
    "text": "at the end when we trigger the free of the vulnerability we will free the credential object with the tempered",
    "start": "979500",
    "end": "986220"
  },
  {
    "text": "reference and this is how we pivot invalid to write",
    "start": "986220",
    "end": "991980"
  },
  {
    "text": "next PVD in value free for invalid free vulnerability we have",
    "start": "991980",
    "end": "999360"
  },
  {
    "text": "two references referencing to the same object so a possible memory layout could be",
    "start": "999360",
    "end": "1005959"
  },
  {
    "text": "like this in the first step we free the vulnerable",
    "start": "1005959",
    "end": "1011899"
  },
  {
    "text": "object from a reference second we free all the object in the",
    "start": "1011899",
    "end": "1020000"
  },
  {
    "text": "same memory cache which eventually will free the memory page for the cache",
    "start": "1020000",
    "end": "1027160"
  },
  {
    "text": "in the third step we allocate a bunch of credential objects to reclaim the freed",
    "start": "1027319",
    "end": "1032660"
  },
  {
    "text": "memory page this process is called cross-cash attack after this the memory slot of the",
    "start": "1032660",
    "end": "1039860"
  },
  {
    "text": "vulnerable object will be okay will be occupied by credential object so the",
    "start": "1039860",
    "end": "1045860"
  },
  {
    "text": "remainder reference will be pointing to a credential object",
    "start": "1045860",
    "end": "1051160"
  },
  {
    "text": "finally we utilize the reference which is a dangling pointer to free the",
    "start": "1051380",
    "end": "1056840"
  },
  {
    "text": "credential object and this is a process of activity in value free",
    "start": "1056840",
    "end": "1064299"
  },
  {
    "text": "the Second Challenge is how to allocate allocate preview the credential as unpreviewed users",
    "start": "1065840",
    "end": "1073539"
  },
  {
    "text": "in Linux kernel unprivileged users come with unprivileged task credentials",
    "start": "1073760",
    "end": "1079640"
  },
  {
    "text": "so you cannot directly allocate the privilege credentials a simple solution to it is to",
    "start": "1079640",
    "end": "1086980"
  },
  {
    "text": "just waiting for privileged users to do so but it's unpredictable which could",
    "start": "1086980",
    "end": "1093620"
  },
  {
    "text": "influence the successful rate so we should take a look for something that is more determined",
    "start": "1093620",
    "end": "1100460"
  },
  {
    "text": "deterministic we figured out there are two types of",
    "start": "1100460",
    "end": "1106520"
  },
  {
    "text": "solutions one is from user space we could trigger the privileged user space",
    "start": "1106520",
    "end": "1112100"
  },
  {
    "text": "process Elaine is Kernel executables with roots seoid could run as root users so they",
    "start": "1112100",
    "end": "1120320"
  },
  {
    "text": "come with privileged credentials those X cable includes Su and mount",
    "start": "1120320",
    "end": "1126620"
  },
  {
    "text": "by simply executing them we could force kernel to allocate the privileged required",
    "start": "1126620",
    "end": "1133340"
  },
  {
    "text": "other than suyd executables some demons running as rude users who also allocate",
    "start": "1133340",
    "end": "1140539"
  },
  {
    "text": "privilege credentials in linear credentials in kernel for example SS key we could interact",
    "start": "1140539",
    "end": "1148880"
  },
  {
    "text": "with it by establishing excess connections to the system and it will",
    "start": "1148880",
    "end": "1154160"
  },
  {
    "text": "allocate the previous price for us",
    "start": "1154160",
    "end": "1158559"
  },
  {
    "text": "another solution is from the kernel space privilege required could be allocated",
    "start": "1159320",
    "end": "1165080"
  },
  {
    "text": "through new privileged kernels threat for some place calls",
    "start": "1165080",
    "end": "1170660"
  },
  {
    "text": "if the user space sends too many requests to Kernel kernel will spawn new kernel workers to",
    "start": "1170660",
    "end": "1177740"
  },
  {
    "text": "handle the requests which will allocate a new privilege credentials for those workers as a result",
    "start": "1177740",
    "end": "1184039"
  },
  {
    "text": "another way from kernel space is to invoke the user mode helper which is to",
    "start": "1184039",
    "end": "1189799"
  },
  {
    "text": "load kernel modules from user space when a user mode helpers requested kernel will spawn new kernel threads to",
    "start": "1189799",
    "end": "1198080"
  },
  {
    "text": "execute a user space boundary as a result this allocates new privilege",
    "start": "1198080",
    "end": "1203419"
  },
  {
    "text": "credentials those are the solutions to our Second Challenge",
    "start": "1203419",
    "end": "1209740"
  },
  {
    "text": "the third challenge is to stabilize file exploitation when attacking open file",
    "start": "1210080",
    "end": "1215480"
  },
  {
    "text": "credentials when swapping open file credentials we",
    "start": "1215480",
    "end": "1222140"
  },
  {
    "text": "could confuse a kernel to validate to write data to another file the timing of",
    "start": "1222140",
    "end": "1227720"
  },
  {
    "text": "doing a swap is really important if a swap starts before the permission",
    "start": "1227720",
    "end": "1233240"
  },
  {
    "text": "check the F mode of the file object will be read only which results in deny of",
    "start": "1233240",
    "end": "1239480"
  },
  {
    "text": "the right Cisco if the swap happens after writing to the",
    "start": "1239480",
    "end": "1246380"
  },
  {
    "text": "disk kernel will just write dummy file instead of Etc passwords",
    "start": "1246380",
    "end": "1254259"
  },
  {
    "text": "so the swap must happen between the permission check and that the actual",
    "start": "1255140",
    "end": "1260240"
  },
  {
    "text": "file right this time window is crucial to the successful of the attack",
    "start": "1260240",
    "end": "1267140"
  },
  {
    "text": "but this time we know is very small because writing content to the file happens very quickly",
    "start": "1267140",
    "end": "1273740"
  },
  {
    "text": "during the swap during this time this small time Windows might be unstable or",
    "start": "1273740",
    "end": "1279260"
  },
  {
    "text": "even invisible so our solution to this is to extend the",
    "start": "1279260",
    "end": "1286760"
  },
  {
    "text": "time window to make the attack deterministic the first solution is that we could",
    "start": "1286760",
    "end": "1293059"
  },
  {
    "text": "utilize user fold ft or fuse to pause kernel execution during this time window when the kernel",
    "start": "1293059",
    "end": "1300080"
  },
  {
    "text": "access user space memory that is managed by the user folder FD or fuse kernel",
    "start": "1300080",
    "end": "1305419"
  },
  {
    "text": "execution will be paused before kernel V 4.13 we could pause",
    "start": "1305419",
    "end": "1313580"
  },
  {
    "text": "kernel execution it's import our Vector function let's look at the red V function on the",
    "start": "1313580",
    "end": "1320419"
  },
  {
    "text": "slice it's the implementation of writing Vector data to a file",
    "start": "1320419",
    "end": "1326000"
  },
  {
    "text": "in the function currently offers a check permission it checks whether the file struck is",
    "start": "1326000",
    "end": "1333500"
  },
  {
    "text": "created with write permission after the check is satisfied kernel",
    "start": "1333500",
    "end": "1338539"
  },
  {
    "text": "Imports virtual data from user space this is the point where we could pause",
    "start": "1338539",
    "end": "1344120"
  },
  {
    "text": "kernel execution which useful FD of use",
    "start": "1344120",
    "end": "1349240"
  },
  {
    "text": "this technique was used in gen Horn's exploitation for cve 2016 4557 by instead of the kernel V",
    "start": "1350539",
    "end": "1360140"
  },
  {
    "text": "4.13 this is the less the implementation of",
    "start": "1360140",
    "end": "1366740"
  },
  {
    "text": "the red wave function the import of our Vector has been moved before the permission check so even",
    "start": "1366740",
    "end": "1373880"
  },
  {
    "text": "though we could pause the execution at the import of our Vector we are no longer able to extend the time window so",
    "start": "1373880",
    "end": "1381020"
  },
  {
    "text": "we should look for something else it turns out that we could pause kernel",
    "start": "1381020",
    "end": "1388580"
  },
  {
    "text": "execution as generic performance write function the function is in the extra layer of",
    "start": "1388580",
    "end": "1395480"
  },
  {
    "text": "the red Cisco so different file system uses before invoking their own right",
    "start": "1395480",
    "end": "1402200"
  },
  {
    "text": "function in other words it will be caused by the red system in",
    "start": "1402200",
    "end": "1407600"
  },
  {
    "text": "most of our systems after the permission check and the pitfall of the actual file right",
    "start": "1407600",
    "end": "1412940"
  },
  {
    "text": "at the beginning of the function it will try to make a page fault on the user space buffer to avoid a possible data",
    "start": "1412940",
    "end": "1420200"
  },
  {
    "text": "log and this page falls indeed will access the user space memory as a result we",
    "start": "1420200",
    "end": "1426559"
  },
  {
    "text": "could utilize this access to pause current execution thus we could extend the time windows",
    "start": "1426559",
    "end": "1434380"
  },
  {
    "text": "the first solution requires user for the FD or fuse to pause execution but",
    "start": "1436340",
    "end": "1442100"
  },
  {
    "text": "sometimes those two techniques are unavailable for example in the docker",
    "start": "1442100",
    "end": "1447260"
  },
  {
    "text": "so we should develop something else some other Solutions that don't utilize those two techniques",
    "start": "1447260",
    "end": "1455900"
  },
  {
    "text": "and finally we found that there is a file lock in the rest that's fair system",
    "start": "1455900",
    "end": "1462860"
  },
  {
    "text": "right which could be utilized but first what is file lock",
    "start": "1462860",
    "end": "1469940"
  },
  {
    "text": "a Linux kernel each file has its own unique unknown object the file lock is maintained by the inode",
    "start": "1469940",
    "end": "1477440"
  },
  {
    "text": "object the log mechanism is used in the valve systems grader operation",
    "start": "1477440",
    "end": "1484640"
  },
  {
    "text": "this is the function the functional slice is a red operation of ext4 file system",
    "start": "1484640",
    "end": "1491659"
  },
  {
    "text": "at the beginning of the function kernel will try to lock the eye note of the",
    "start": "1491659",
    "end": "1496880"
  },
  {
    "text": "object after the writer is done the lock will be released this lock mechanism ensures",
    "start": "1496880",
    "end": "1503900"
  },
  {
    "text": "the rate of multiple thread will be done in order",
    "start": "1503900",
    "end": "1508940"
  },
  {
    "text": "The Muse this diagram to illustrate how this work so assuming that we have two threads",
    "start": "1508940",
    "end": "1516620"
  },
  {
    "text": "says write a and squared B thread a and try B ground LSM time and the red to the",
    "start": "1516620",
    "end": "1523820"
  },
  {
    "text": "same file both of them will pass the access permission check before doing the right thread a will",
    "start": "1523820",
    "end": "1531260"
  },
  {
    "text": "lock the file from the eye note but rather B will have to wait for the lock",
    "start": "1531260",
    "end": "1536600"
  },
  {
    "text": "until the right of the thread a is done and the lock is released with this lock the right operation will",
    "start": "1536600",
    "end": "1544279"
  },
  {
    "text": "be done one by one the question is what if thread a write a",
    "start": "1544279",
    "end": "1551539"
  },
  {
    "text": "large amount of data say four gigabytes which might take a dozen of seconds",
    "start": "1551539",
    "end": "1557480"
  },
  {
    "text": "thing thread B will have two ways at least the same time to get a lock which",
    "start": "1557480",
    "end": "1564020"
  },
  {
    "text": "leaves a larger time window between the permission check and doing the right in this way we could expand on time",
    "start": "1564020",
    "end": "1571220"
  },
  {
    "text": "windows and the exploitation could be done deterministically",
    "start": "1571220",
    "end": "1576980"
  },
  {
    "text": "all right demo demo time so we use this cve for the demonstration",
    "start": "1577640",
    "end": "1585399"
  },
  {
    "text": "so we start with a low privileged user on the left side is centaurs with kernel",
    "start": "1587059",
    "end": "1593480"
  },
  {
    "text": "4.18 on the right side it's Ubuntu 20 with kernel 5.4",
    "start": "1593480",
    "end": "1599120"
  },
  {
    "text": "before running the attack the ETC passport is intact the exploit code in two systems has the",
    "start": "1599120",
    "end": "1605600"
  },
  {
    "text": "same empty check mt5 checksum which means they are the same X Y code",
    "start": "1605600",
    "end": "1611179"
  },
  {
    "text": "then we build a build and run exploit and finally",
    "start": "1611179",
    "end": "1617000"
  },
  {
    "text": "let's see",
    "start": "1617000",
    "end": "1619720"
  },
  {
    "text": "and finally we tempered the ETS last board this Behavior could be done to",
    "start": "1627100",
    "end": "1632480"
  },
  {
    "text": "escalate privilege to root",
    "start": "1632480",
    "end": "1636158"
  },
  {
    "text": "we also have a demo on Android with kernel CFI enabled",
    "start": "1637700",
    "end": "1643880"
  },
  {
    "text": "we removed some checks to make sure this vulnerability could be",
    "start": "1643880",
    "end": "1649220"
  },
  {
    "text": "triggered or enjoyed so originally the file couldn't be read written by",
    "start": "1649220",
    "end": "1654799"
  },
  {
    "text": "improved users and it's intact then we run exploit and eventually we",
    "start": "1654799",
    "end": "1661760"
  },
  {
    "text": "tempered the content",
    "start": "1661760",
    "end": "1665140"
  },
  {
    "text": "all right so here I want to summarize some advantages of 3D craft",
    "start": "1673360",
    "end": "1680539"
  },
  {
    "text": "first it's a generic exploitation method that could Empower kernel exploitation",
    "start": "1680539",
    "end": "1685640"
  },
  {
    "text": "for different bugs the method applies to container and Android kernel",
    "start": "1685640",
    "end": "1692120"
  },
  {
    "text": "second the method is simple it just swaps kernel credentials but it's very",
    "start": "1692120",
    "end": "1699559"
  },
  {
    "text": "effective and Powerful as a data method to request doesn't have",
    "start": "1699559",
    "end": "1705200"
  },
  {
    "text": "to deal with kslr and the CFI and there's no public mitigation is",
    "start": "1705200",
    "end": "1710600"
  },
  {
    "text": "available now so 30 quad is exploitation friendly you",
    "start": "1710600",
    "end": "1716779"
  },
  {
    "text": "could write a dirty pipe like the universal exploit they could work they could work on different kernels",
    "start": "1716779",
    "end": "1722960"
  },
  {
    "text": "without any code change",
    "start": "1722960",
    "end": "1726700"
  },
  {
    "text": "so we have such a powerful exploitation method what can we possibly do to mitigate it",
    "start": "1728120",
    "end": "1735020"
  },
  {
    "text": "and protect users do we have any mitigation suggestions",
    "start": "1735020",
    "end": "1740059"
  },
  {
    "text": "yes we do the fundamental problem of the required is that the kernel credentials are",
    "start": "1740059",
    "end": "1748340"
  },
  {
    "text": "isolated based on object type not on privilege level so I'm previewed credentials and",
    "start": "1748340",
    "end": "1754940"
  },
  {
    "text": "privileged credentials will share the same memory cache and it will be overlapped with each other",
    "start": "1754940",
    "end": "1761120"
  },
  {
    "text": "therefore they could be swapped with this in mind our solution is",
    "start": "1761120",
    "end": "1767539"
  },
  {
    "text": "straightforward we isolate the privileged credentials into different different memory region specifically we",
    "start": "1767539",
    "end": "1775580"
  },
  {
    "text": "I sold them into virtual memory so there is no Swap and no cross-cash attack",
    "start": "1775580",
    "end": "1781940"
  },
  {
    "text": "anymore we have a prototype implementation and you could find the code it might get a",
    "start": "1781940",
    "end": "1787399"
  },
  {
    "text": "variable finally some take",
    "start": "1787399",
    "end": "1793880"
  },
  {
    "text": "a presentation first we introduce a new exploitation",
    "start": "1793880",
    "end": "1799100"
  },
  {
    "text": "method named the required the code concept of 3D crime is to swap kernel",
    "start": "1799100",
    "end": "1805520"
  },
  {
    "text": "credentials to escalate privilege second to realize the idea we developed",
    "start": "1805520",
    "end": "1812659"
  },
  {
    "text": "principled approach to tackle different challenges third dirty crowd impulse kernel",
    "start": "1812659",
    "end": "1819740"
  },
  {
    "text": "exploitation it makes exploit to be Universal they exploit the bypass all",
    "start": "1819740",
    "end": "1826399"
  },
  {
    "text": "defenses available in Linux kernel and work across different kernels versions and architectures",
    "start": "1826399",
    "end": "1833059"
  },
  {
    "text": "last but not least we introduce effect effective defense against the 30 credit card",
    "start": "1833059",
    "end": "1839779"
  },
  {
    "text": "the defense isolated privilege credentials which solve the problem fundamentally",
    "start": "1839779",
    "end": "1846440"
  },
  {
    "text": "that's all of my talk I would like to thank my collaborators again for the help in the think and think so dark heck",
    "start": "1846440",
    "end": "1854419"
  },
  {
    "text": "for providing this cute logo for the decreased it's my not only to represent my work here",
    "start": "1854419",
    "end": "1861639"
  },
  {
    "text": "foreign",
    "start": "1861919",
    "end": "1864100"
  },
  {
    "text": "[Music]",
    "start": "1867910",
    "end": "1871009"
  }
]