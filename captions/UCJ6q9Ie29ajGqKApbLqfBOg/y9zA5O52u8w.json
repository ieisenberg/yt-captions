[
  {
    "text": "uh hello one two okay the mic is working so hi I'm Nikos I'm a cryptography",
    "start": "3159",
    "end": "8599"
  },
  {
    "text": "researcher at fireblocks this is Oren he's a security researcher at fireblocks",
    "start": "8599",
    "end": "15200"
  },
  {
    "text": "and we will be talking about how to hack cryptocurrency wallets so what's a cryptocurrency",
    "start": "15200",
    "end": "21279"
  },
  {
    "text": "wallet well in order to spend let's say Bitcoin you need a wallet that wallet",
    "start": "21279",
    "end": "26920"
  },
  {
    "text": "holds a key that key allows you to sign transactions these transactions uh these",
    "start": "26920",
    "end": "33920"
  },
  {
    "text": "signatures you can broadcast to the blockchain in order to send uh cryptocurrency to your favorite people",
    "start": "33920",
    "end": "41120"
  },
  {
    "text": "so what's the problem with this setup well there is a single point of failure because the key is sitting in your",
    "start": "41120",
    "end": "47000"
  },
  {
    "text": "mobile let's say and it is waiting to be stolen how can you uh minimize this risk",
    "start": "47000",
    "end": "52280"
  },
  {
    "text": "well you can use multi- party computation also known as MPC so what's",
    "start": "52280",
    "end": "57920"
  },
  {
    "text": "MPC so at a very high level the idea is that instead of having the key in one place the key is split into",
    "start": "57920",
    "end": "65880"
  },
  {
    "text": "shares and these shares reside with distinct parties actually NPC promises much more",
    "start": "65880",
    "end": "74000"
  },
  {
    "text": "than this because the key is never assembled in one place in order to",
    "start": "74000",
    "end": "79840"
  },
  {
    "text": "calculate their key shares the parties run an interactive protocol and then",
    "start": "79840",
    "end": "85200"
  },
  {
    "text": "every time they want to sign a transaction they run a different uh Interactive protocol to calculate the",
    "start": "85200",
    "end": "91600"
  },
  {
    "text": "resulting signature so small aside MPC is much bigger than what I just",
    "start": "91600",
    "end": "98479"
  },
  {
    "text": "described which is the use case of threshold signatures it is the crown jewel of modern",
    "start": "98479",
    "end": "105520"
  },
  {
    "text": "cryptography basically anything you can do with a trusted centralized party you",
    "start": "105520",
    "end": "110640"
  },
  {
    "text": "can do trustless with MPC there are countless examples I'm not going to go",
    "start": "110640",
    "end": "116479"
  },
  {
    "text": "uh over them but what I will say is that commercial adop option has been a bit slow so NPC has been around since the",
    "start": "116479",
    "end": "122560"
  },
  {
    "text": "80s the most significant commercial application was the Danish sugar bead",
    "start": "122560",
    "end": "127640"
  },
  {
    "text": "auction of 2008 and with the Advent of blockchain Technologies NPC has found its first",
    "start": "127640",
    "end": "134640"
  },
  {
    "text": "kiler applications and it is protecting billions of dollars in digital assets",
    "start": "134640",
    "end": "139959"
  },
  {
    "text": "well we're here to talk about attacking MPC wallets well what could be an outcome of such an attack well one thing",
    "start": "139959",
    "end": "146400"
  },
  {
    "text": "could be a denial of service if I somehow managed to freeze wallet uh not",
    "start": "146400",
    "end": "151519"
  },
  {
    "text": "so you can't spend your crypto that's a problem uh a more uh severe thing would be signature forgery let's say Nikas and",
    "start": "151519",
    "end": "158760"
  },
  {
    "text": "I we have an MPC wallet together and I tell them hey let's sign this $10 transaction and because I'm leveraging",
    "start": "158760",
    "end": "165400"
  },
  {
    "text": "some flow in the NPC protocol actually made him inadvertently without him knowing sign a totally different",
    "start": "165400",
    "end": "171480"
  },
  {
    "text": "transaction so that's a problem but the much bigger potential outcome if an attack could be is complete private key",
    "start": "171480",
    "end": "178159"
  },
  {
    "text": "exfiltration whereas I tell him hey let's sign this transaction he signs but actually he leaked his entire private",
    "start": "178159",
    "end": "183760"
  },
  {
    "text": "keyshare to me and now I can sign whatever I want whenever I want no longer requiring his consent today's",
    "start": "183760",
    "end": "190920"
  },
  {
    "text": "attack will be focused solely on this the most critical uh outcome potential outcome of an attack on an NPC wallet we",
    "start": "190920",
    "end": "196959"
  },
  {
    "text": "will show you three different attacks each one of them will result in private kyss filtration so while we will be",
    "start": "196959",
    "end": "204239"
  },
  {
    "text": "talking about attacking MPC wallets I would like you to have this threat model in mind so we here you can see uh a few",
    "start": "204239",
    "end": "210920"
  },
  {
    "text": "different NPC uh parties with that have an NPC wall together and one of them",
    "start": "210920",
    "end": "217400"
  },
  {
    "text": "namely Alice will be acting maliciously now either she woke up one day she decided to be evil or maybe she was",
    "start": "217400",
    "end": "224000"
  },
  {
    "text": "compromised by an attacker and now they're using her identity whatever the case of her motivation she her goal",
    "start": "224000",
    "end": "230840"
  },
  {
    "text": "waking up in the morning would be to exfiltrate all the other counterparties key sh key shares so and she will do",
    "start": "230840",
    "end": "238640"
  },
  {
    "text": "that by just signing normal looking transactions with them using the MPC protocol so the research findings that",
    "start": "238640",
    "end": "246159"
  },
  {
    "text": "brought us here today has affected many parties it affected some of the biggest crypto wallets it has affected a number",
    "start": "246159",
    "end": "252959"
  },
  {
    "text": "of crypto custodians it affected the most popular consumer MPC wallet and",
    "start": "252959",
    "end": "258720"
  },
  {
    "text": "also some of the most popular open- Source MPC libraries namely we",
    "start": "258720",
    "end": "264080"
  },
  {
    "text": "discovered four novel attacks including three zero days we it affected 16",
    "start": "264080",
    "end": "269199"
  },
  {
    "text": "vendors and libraries we will be releasing at the end of this talk four fully working proof of concept exploit",
    "start": "269199",
    "end": "275360"
  },
  {
    "text": "codes we actually use these proof of concept exploits against two vendor production environments and leaked our",
    "start": "275360",
    "end": "281800"
  },
  {
    "text": "own private Keys the last thing I want to stress is most of our attacks are not implementation specific we will be",
    "start": "281800",
    "end": "288919"
  },
  {
    "text": "attacking MPC protocols at the protocol level so the three attacks we'll be covering today we'll start with the most",
    "start": "288919",
    "end": "294960"
  },
  {
    "text": "popular two-party signing protocol it's called lindel 17 carrying out the attack will require somewhat high level of",
    "start": "294960",
    "end": "301479"
  },
  {
    "text": "interactivity then we'll go on to the second attack attacking the most popular multi-party signing protocol the gg8",
    "start": "301479",
    "end": "308280"
  },
  {
    "text": "gg20 family of protocols last but not least we'll touch on what we call a do-it-yourself protocol because it",
    "start": "308280",
    "end": "314240"
  },
  {
    "text": "doesn't adhere very closely to any academic paper great so in order to uh understand",
    "start": "314240",
    "end": "321199"
  },
  {
    "text": "our attacks we're going to need a few items of background material uh the first item in the background is the math",
    "start": "321199",
    "end": "329080"
  },
  {
    "text": "thankfully no advanced math we're not going to be talking about elliptic curves or even",
    "start": "329080",
    "end": "335440"
  },
  {
    "text": "abstract groups the only thing you need to know for today is the modulo operator what's the modulo operator well very",
    "start": "335440",
    "end": "342479"
  },
  {
    "text": "simply x modulo n is the remainder of x divided by n so five module of 5 is zero",
    "start": "342479",
    "end": "348919"
  },
  {
    "text": "because five is divisible by itself and 6 modu of 5 is equal to 1 because 6 is greater than five and there's the",
    "start": "348919",
    "end": "355720"
  },
  {
    "text": "Overflow good the next item in the background is homomorphic encryption",
    "start": "355720",
    "end": "360919"
  },
  {
    "text": "what is that well it's a special kind of encryption that allows computation on encrypted data without decrypting the",
    "start": "360919",
    "end": "368800"
  },
  {
    "text": "cipher text so let's look at an example let's say that Alice sends an encryption of the number 42 to Bob so here and",
    "start": "368800",
    "end": "376360"
  },
  {
    "text": "throughout the talk we will be using color coding for values that only one party knows or the other so that will be",
    "start": "376360",
    "end": "382639"
  },
  {
    "text": "red for values that only Alice knows and blue for values that only Bob knows Bob",
    "start": "382639",
    "end": "388960"
  },
  {
    "text": "uh re receives the encryption of 42 and he can operate on this encryption he can for example multiply by the value two",
    "start": "388960",
    "end": "395560"
  },
  {
    "text": "and then add the number 100 he does so obliviously without knowing what's happening inside the cipher text Alice",
    "start": "395560",
    "end": "403440"
  },
  {
    "text": "after receiving uh Bob's message she can decrypt the value obtain the result",
    "start": "403440",
    "end": "410280"
  },
  {
    "text": "without ever knowing which two particular values Bob used so Bob could have used two and 100 or he could have",
    "start": "410280",
    "end": "416319"
  },
  {
    "text": "used zero and 184 that's homomorphic encryption there are",
    "start": "416319",
    "end": "421720"
  },
  {
    "text": "many kinds of homomorphic encryption we will not be diving into uh any of them we will be only looking at the most",
    "start": "421720",
    "end": "427520"
  },
  {
    "text": "vanilla kind which is parameterized by a public key n this is a number which is",
    "start": "427520",
    "end": "433520"
  },
  {
    "text": "the product of two big primes and this detail will become relevant later in the",
    "start": "433520",
    "end": "438919"
  },
  {
    "text": "talk great so the last item in the background is the ecdsa signature scheme",
    "start": "438919",
    "end": "444280"
  },
  {
    "text": "this is the most popular uh signature scheme in the blockchain space it is",
    "start": "444280",
    "end": "449440"
  },
  {
    "text": "used by Bitcoin it is used by ethereum among uh other blockchains great so in",
    "start": "449440",
    "end": "454840"
  },
  {
    "text": "order to sign in an ecdsa fashion ah and also all the protocols we'll be looking at will be realizing this scheme so in",
    "start": "454840",
    "end": "461400"
  },
  {
    "text": "order to sign in an ecdsa fashion uh you do something like this so you sample a",
    "start": "461400",
    "end": "466840"
  },
  {
    "text": "random value K this value is called the ephemeral key it just it is chosen aresh",
    "start": "466840",
    "end": "473000"
  },
  {
    "text": "with every signature and it is a secret value then to calculate the signature",
    "start": "473000",
    "end": "478159"
  },
  {
    "text": "you simply compute a a function of the message to be signed so that's the transaction the ephemeral key K the",
    "start": "478159",
    "end": "485199"
  },
  {
    "text": "private key X as well as a value L which is a constant a public constant",
    "start": "485199",
    "end": "490919"
  },
  {
    "text": "associated with the ecdsa signature scheme so that's what you would do if uh",
    "start": "490919",
    "end": "496680"
  },
  {
    "text": "uh only one party was involved but what about two parties well the idea that we've already alluded to at the",
    "start": "496680",
    "end": "502400"
  },
  {
    "text": "beginning of the talk is that instead of having the secret material in one place we will split the secret material among",
    "start": "502400",
    "end": "508560"
  },
  {
    "text": "along uh um among the parties okay so with that in",
    "start": "508560",
    "end": "513800"
  },
  {
    "text": "mind let's look at our first exploit so we will be showing how to compromise",
    "start": "513800",
    "end": "520039"
  },
  {
    "text": "implementations of the Le of the lindel 17 protocol this is the most popular",
    "start": "520039",
    "end": "525120"
  },
  {
    "text": "two- party signing protocol and there were more than five uh uh affected vendors and open- Source projects so the",
    "start": "525120",
    "end": "531680"
  },
  {
    "text": "lind 17 protocol goes something like this there's a key generation phase the parties choose random shares of the",
    "start": "531680",
    "end": "539200"
  },
  {
    "text": "private key so that would be X1 for Alice and X2 for Bob and then something",
    "start": "539200",
    "end": "544800"
  },
  {
    "text": "interesting happens Bob encrypts his key share under a homomorphic scheme that he",
    "start": "544800",
    "end": "550640"
  },
  {
    "text": "controls and he sends that value to Alice the important thing to remember is",
    "start": "550640",
    "end": "557120"
  },
  {
    "text": "that only Bob can decrypt this thing but Alice can operate on it and this will be relevant for the signing phase so what",
    "start": "557120",
    "end": "564480"
  },
  {
    "text": "does the signing f look like first we need to address the elephant in the room this is a",
    "start": "564480",
    "end": "570880"
  },
  {
    "text": "cryptography talk formulas are going to appear everybody's an adult here nothing",
    "start": "570880",
    "end": "576399"
  },
  {
    "text": "bad is going to happen good so what does the signing process looks like so the idea of the",
    "start": "576399",
    "end": "582680"
  },
  {
    "text": "signing process is that Alice will send an encrypted partial signature to Bob",
    "start": "582680",
    "end": "589200"
  },
  {
    "text": "and she will calculate this partial signature by homomorphically evaluating the encryption C during key generation",
    "start": "589200",
    "end": "597240"
  },
  {
    "text": "specifically she would send this value so the only reason I am displaying this value is to show you that almost all the",
    "start": "597240",
    "end": "603760"
  },
  {
    "text": "ingredients of the ecdsa signature scheme are there we have our X's we have the message and we also have Alice's K1",
    "start": "603760",
    "end": "612360"
  },
  {
    "text": "the only thing that's missing is Bob's K2 so how do you finalize this signature",
    "start": "612360",
    "end": "617440"
  },
  {
    "text": "well it's actually fairly simple Bob simply decrypts what what he obtains",
    "start": "617440",
    "end": "622920"
  },
  {
    "text": "from Alice he multiplies by his contribution to the private key share and he reduces everything modulo the",
    "start": "622920",
    "end": "630399"
  },
  {
    "text": "ecdsa constant at this point in order to check",
    "start": "630399",
    "end": "635639"
  },
  {
    "text": "that it's a valid signature he simply applies the algorithm for",
    "start": "635639",
    "end": "640760"
  },
  {
    "text": "verification because what happens if Alice deviates from the protocol what",
    "start": "640760",
    "end": "645800"
  },
  {
    "text": "happens if let's say Alice falls asleep and she forgets to multiply by her K1 at this point Bob will fail to verify the",
    "start": "645800",
    "end": "653320"
  },
  {
    "text": "resulting signature and he will notify uh Alice of this or maybe maybe the",
    "start": "653320",
    "end": "659360"
  },
  {
    "text": "signature doesn't make it to the blockchain what happens then well to",
    "start": "659360",
    "end": "664720"
  },
  {
    "text": "answer this question we will consult with the paper and the paper has this",
    "start": "664720",
    "end": "669839"
  },
  {
    "text": "very interesting instruction it says that any abort so any invalid signature",
    "start": "669839",
    "end": "676519"
  },
  {
    "text": "will imply no later execution which means in Practical terms that if Bob",
    "start": "676519",
    "end": "683160"
  },
  {
    "text": "detects an invalid signature then the wallet is locked well putting ver serial",
    "start": "683160",
    "end": "689519"
  },
  {
    "text": "hats on after learning about this we thought well how about we leverage this into a denial of service attack and we",
    "start": "689519",
    "end": "696120"
  },
  {
    "text": "managed to freeze somebody's wallet so we found some open source implementations that implemented lindel",
    "start": "696120",
    "end": "702120"
  },
  {
    "text": "17 and we set up to try it out so we made Alice send some nonsense partial signature and tried it out surprisingly",
    "start": "702120",
    "end": "710760"
  },
  {
    "text": "nothing happened no wallets were ever locked so we could try again and again and again so we were kind of bummed our",
    "start": "710760",
    "end": "718320"
  },
  {
    "text": "attack didn't work work we went back to the drawing board and asked ourselves why was that assumption there as part of",
    "start": "718320",
    "end": "724160"
  },
  {
    "text": "the protocol if no implementation in a while does it so the paper is actually very very clear about this it says the",
    "start": "724160",
    "end": "732040"
  },
  {
    "text": "problem is that Alice may send an incorrect partial signature to Bob in which case the mere fact that Bob aborts",
    "start": "732040",
    "end": "738760"
  },
  {
    "text": "or not can leak a single bit about Bob's key share now doing one plus one taking",
    "start": "738760",
    "end": "744880"
  },
  {
    "text": "this intuition into some kind of hypothetical attack scenario it might look something like this so malicious",
    "start": "744880",
    "end": "751519"
  },
  {
    "text": "Alice would craft a partial signature that fails to finalize depending on one",
    "start": "751519",
    "end": "757000"
  },
  {
    "text": "bit of Bob's keyshare and then she'll just wait to see if it finalized or not then she could do it again targeting the",
    "start": "757000",
    "end": "763519"
  },
  {
    "text": "second bit do it again and again each time knowing whether the beat is one or zero depending on whether the signature",
    "start": "763519",
    "end": "769480"
  },
  {
    "text": "verified or not fast forward 256 signatures voila she has his entire",
    "start": "769480",
    "end": "775480"
  },
  {
    "text": "keyshare and she can sign whatever she wants by passing the promise of the MPC protocol this is a bit simple if you",
    "start": "775480",
    "end": "783000"
  },
  {
    "text": "just try to ex like visualize it to actually carry out this attack mathematically you need a cryptographer",
    "start": "783000",
    "end": "789600"
  },
  {
    "text": "like Nikos so that's where uh we stopped relying on the paper and we had to think",
    "start": "789600",
    "end": "795760"
  },
  {
    "text": "for ourselves and what we did is we had a long hard look at the partial",
    "start": "795760",
    "end": "800959"
  },
  {
    "text": "signature that Alice sends and we Tred to mess around with it we Tred to mess",
    "start": "800959",
    "end": "806120"
  },
  {
    "text": "around with the X we try to mess around with the message with a K trying to",
    "start": "806120",
    "end": "811320"
  },
  {
    "text": "create a significant leakage but nothing happened but then the crypto Gods smiled",
    "start": "811320",
    "end": "818040"
  },
  {
    "text": "on us and we had a breakthrough basically we realized the following by switching the modulus so instead of",
    "start": "818040",
    "end": "825480"
  },
  {
    "text": "using the ecdsa constant we use the public key of the homomorphic encryption",
    "start": "825480",
    "end": "831240"
  },
  {
    "text": "scheme these two values are equal after Bob decrypt if and only if X2 modulo K1",
    "start": "831240",
    "end": "837839"
  },
  {
    "text": "is equal to Z zero I will remind you that X2 is Bob's secret and K1 is the value that Alice controls so I will",
    "start": "837839",
    "end": "845639"
  },
  {
    "text": "spare you the mathematical mumbo jumbo and I will give it to you in in in a picture so the idea is that Alice can",
    "start": "845639",
    "end": "852920"
  },
  {
    "text": "attack so she can switch the modulus and if the signature is valid she learns",
    "start": "852920",
    "end": "858279"
  },
  {
    "text": "that K1 divides X2 if the signature is invalid she learns that K1 does not",
    "start": "858279",
    "end": "864680"
  },
  {
    "text": "divide X2 so why is this interesting it's interesting because this is an tag that already leaks the least significant",
    "start": "864680",
    "end": "871000"
  },
  {
    "text": "bit why because Alice can simply choose K1 equals 2 and in this case she obtains",
    "start": "871000",
    "end": "877079"
  },
  {
    "text": "leakage X2 modul 2 equals Zer and this corresponds exactly to Bob's least",
    "start": "877079",
    "end": "882519"
  },
  {
    "text": "significant bits great so that gives us one bit what about the rest of them well for the next",
    "start": "882519",
    "end": "888920"
  },
  {
    "text": "bit the natural strategy is to use the next power of two namely four in this",
    "start": "888920",
    "end": "894639"
  },
  {
    "text": "case Alice learns whether X2 is divisible by four so that's great if the first bit were",
    "start": "894639",
    "end": "902120"
  },
  {
    "text": "zero because if the first bit was not zero then this leakage is absolutely",
    "start": "902120",
    "end": "907360"
  },
  {
    "text": "useless because the signature will always fail and in reality the desired leakage is whether X2 minus1 modul of 4",
    "start": "907360",
    "end": "915079"
  },
  {
    "text": "is equal to zero so how do we get this leakage well to get this leakage we",
    "start": "915079",
    "end": "920440"
  },
  {
    "text": "simply need to massage uh the algebra namely Alice needs to offset the",
    "start": "920440",
    "end": "926480"
  },
  {
    "text": "partial signature that she sends to Bob by a value that depends on uh the bits",
    "start": "926480",
    "end": "932839"
  },
  {
    "text": "that she already exfiltrated so to summarize in order to exfiltrate the ith bits Alice sets K1",
    "start": "932839",
    "end": "941160"
  },
  {
    "text": "equals to 2 to the I she offsets the partial signature by a value that",
    "start": "941160",
    "end": "947040"
  },
  {
    "text": "depends on whatever she already knows about Bob's key and in the end depending",
    "start": "947040",
    "end": "952519"
  },
  {
    "text": "on whether the signature validates or not she obtains the eyth bit as leakage",
    "start": "952519",
    "end": "958639"
  },
  {
    "text": "so we actually wanted to see if this would work so again we found an open source implementation the most popular",
    "start": "958639",
    "end": "965120"
  },
  {
    "text": "one of the Lindo 7 protocol published by Zango and we tried to see if it would work running the POC looks like this so",
    "start": "965120",
    "end": "973120"
  },
  {
    "text": "we're starting to sign and each signature as you can see on the right hand side leaks us a single bit about",
    "start": "973120",
    "end": "978199"
  },
  {
    "text": "the other party's key share we know if it's a one or zero if it failed or not so doing this",
    "start": "978199",
    "end": "984759"
  },
  {
    "text": "256 times each time targeting a different big and leaking it we can now",
    "start": "984759",
    "end": "990759"
  },
  {
    "text": "get Bob's entire key share combine it with our own key share and print the master private key in beautiful hexad",
    "start": "990759",
    "end": "997959"
  },
  {
    "text": "diml format and spend away so we have disclosed this to the affected vendors",
    "start": "997959",
    "end": "1004160"
  },
  {
    "text": "and they have a mitigated sense how did they do that well they simply follow the",
    "start": "1004160",
    "end": "1009839"
  },
  {
    "text": "purpose recommendation for example once you detect a failure don't sign again",
    "start": "1009839",
    "end": "1015639"
  },
  {
    "text": "there might be other ways to mitigate this to to uh explain one more way one",
    "start": "1015639",
    "end": "1020800"
  },
  {
    "text": "could mitigate this attack we'll need to uh introduce a new cryptographic primitive it's called a zero knowledge",
    "start": "1020800",
    "end": "1026199"
  },
  {
    "text": "proof what is it simply it's a proof that yields the validity of a statement and nothing else to illustrate with an",
    "start": "1026199",
    "end": "1033640"
  },
  {
    "text": "example Alice can encrypt a number X send it to Bob along with the zero",
    "start": "1033640",
    "end": "1038678"
  },
  {
    "text": "knowledge proof that proves the number is within some range for example 1 to 42",
    "start": "1038679",
    "end": "1043880"
  },
  {
    "text": "now Bobs verifies this zero knowledge proof and if it verifies he can be convinced that now what he holds is",
    "start": "1043880",
    "end": "1051000"
  },
  {
    "text": "indeed an encryption of a number between 1 and 42 and he learns nothing else by",
    "start": "1051000",
    "end": "1056080"
  },
  {
    "text": "it so taking this intuition of this new cryptographic primitive maybe we could",
    "start": "1056080",
    "end": "1062559"
  },
  {
    "text": "add a zero knowledge proof to the protocol to make sure that Alice does not deviate from the protocol when she",
    "start": "1062559",
    "end": "1068679"
  },
  {
    "text": "computes the partial signature congratulations we've done",
    "start": "1068679",
    "end": "1074080"
  },
  {
    "text": "we're done with the first attack of the day and now we're on to the second attack of the day uh compromising the",
    "start": "1074080",
    "end": "1079159"
  },
  {
    "text": "most popular two part the most popular multi-party signing protocols the gg8 and gg20 family of protocols there have",
    "start": "1079159",
    "end": "1085640"
  },
  {
    "text": "been more than 10 vendors and open source libraries affected by this so when we explain the lindle protocol we",
    "start": "1085640",
    "end": "1091799"
  },
  {
    "text": "actually explain how it works end to endend but theg Protocols are quite complicated they actually take between",
    "start": "1091799",
    "end": "1097960"
  },
  {
    "text": "seven and nine rounds to create each sign and we don't have the time for it",
    "start": "1097960",
    "end": "1103200"
  },
  {
    "text": "so luckily for us the entire attack actually only takes place during the very first round the re first round",
    "start": "1103200",
    "end": "1110760"
  },
  {
    "text": "implements what's called a m multiplication to addition so we'll dive into this round and explain first how it",
    "start": "1110760",
    "end": "1116679"
  },
  {
    "text": "works what is multiplication to addition it's a way to transform two multiplicative shares in this example K",
    "start": "1116679",
    "end": "1123480"
  },
  {
    "text": "and X into two additive shares Alpha and beta where this equation holds so how",
    "start": "1123480",
    "end": "1130640"
  },
  {
    "text": "does the paper say to do this basically it says that Alice would encrypt her",
    "start": "1130640",
    "end": "1136120"
  },
  {
    "text": "multiplicative share K and set send it to Bob along with the zero knowledge proof now Bob can operate on this",
    "start": "1136120",
    "end": "1142720"
  },
  {
    "text": "homomorphic Cipher text he can multiply it by his X by his multiplicative share",
    "start": "1142720",
    "end": "1149120"
  },
  {
    "text": "and to make sure that he's not leaking anything about his X he adds a mask to it now Alice decrypts this value and",
    "start": "1149120",
    "end": "1155720"
  },
  {
    "text": "that's her Alpha and B Bob's beta is minus the mass that he chose now as you",
    "start": "1155720",
    "end": "1161120"
  },
  {
    "text": "can see x * X is indeed equal to Alpha plus beta there's one very important",
    "start": "1161120",
    "end": "1167679"
  },
  {
    "text": "thing about if K andx are 256 bits as they are in",
    "start": "1167679",
    "end": "1172919"
  },
  {
    "text": "ecdsa signatures the mass needs to be bigger than 500 and 12 bits to actually",
    "start": "1172919",
    "end": "1178360"
  },
  {
    "text": "mask the value so to explain the intuition behind this we'll show it visually using small numbers so first of",
    "start": "1178360",
    "end": "1185919"
  },
  {
    "text": "all if we didn't use a mask at all and Alice would get after the crypting she",
    "start": "1185919",
    "end": "1191200"
  },
  {
    "text": "would get x x k she knows K right she chose it she could just uh divide it by K and get X in the clear so this clearly",
    "start": "1191200",
    "end": "1197400"
  },
  {
    "text": "doesn't work that's why we have the mask so now adding The Mask completely masks",
    "start": "1197400",
    "end": "1203159"
  },
  {
    "text": "Bob's X and this works fine but what if the mask is not sufficiently big what if",
    "start": "1203159",
    "end": "1210120"
  },
  {
    "text": "let's say k is even bigger than the mask and I want you to remember that Alice has full control over K she chooses it a",
    "start": "1210120",
    "end": "1217080"
  },
  {
    "text": "fresh during every signature generation so in this example we can see that",
    "start": "1217080",
    "end": "1222360"
  },
  {
    "text": "adding The Mask actually hides nothing the most significant bits that Alice",
    "start": "1222360",
    "end": "1228960"
  },
  {
    "text": "receives once she decrypts the cipher text leak Bob's X entirely well how",
    "start": "1228960",
    "end": "1235159"
  },
  {
    "text": "about we do this how about we start signing as as Alice acting maliciously we choose a really big K and in one go",
    "start": "1235159",
    "end": "1242679"
  },
  {
    "text": "exfiltrate all the other parties secret shares well remember that zero knowledge",
    "start": "1242679",
    "end": "1247720"
  },
  {
    "text": "proof that I mentioned that Alis is sending it actually includes a zero knowledge range proof okay making sure",
    "start": "1247720",
    "end": "1252799"
  },
  {
    "text": "that is no long low no bigger than 256 bits which makes this attack Impossible",
    "start": "1252799",
    "end": "1258440"
  },
  {
    "text": "well hold on tight we're going to dive into how this zero knowledge proof works to see if there's something that we can",
    "start": "1258440",
    "end": "1264280"
  },
  {
    "text": "do about it okay so how does the Zer knowledge proof even look like it's a bunch of numbers one of those numbers is",
    "start": "1264280",
    "end": "1270840"
  },
  {
    "text": "Zed it's a number that's relevant for the range proof aspect of the proof and it's calculated calculated as follows it",
    "start": "1270840",
    "end": "1278360"
  },
  {
    "text": "equals to W which is a small random number Alice chooses plus k k is the number that Alice is trying to prove is",
    "start": "1278360",
    "end": "1285320"
  },
  {
    "text": "sufficiently small times a hash that the depends on W everything modu n now when",
    "start": "1285320",
    "end": "1291480"
  },
  {
    "text": "Bob receives this he verifies all the other numbers that are not relevant for the attack and also make sure that Zed",
    "start": "1291480",
    "end": "1297919"
  },
  {
    "text": "is small enough and as you can see if K is too big then Zed is not going to be small so it will fail the range proof I",
    "start": "1297919",
    "end": "1305720"
  },
  {
    "text": "want to emphasize that Alice has to adhere to this formula of calculating",
    "start": "1305720",
    "end": "1311480"
  },
  {
    "text": "Zed because if she doesn't some of the other verification that Bob does would fail so how can we cheat in this range",
    "start": "1311480",
    "end": "1318120"
  },
  {
    "text": "proof while adhering to calculating this formula as follows what we'll do we'll",
    "start": "1318120",
    "end": "1323400"
  },
  {
    "text": "actually Focus only on this part of the equation and what we'll try to do is we'll try to zero it out right if we",
    "start": "1323400",
    "end": "1330279"
  },
  {
    "text": "manage to zero it out then Zed will only be equal to W no matter how big K will",
    "start": "1330279",
    "end": "1335520"
  },
  {
    "text": "be it will pass the verification so how will we do that we will use something",
    "start": "1335520",
    "end": "1340880"
  },
  {
    "text": "called the Chinese remainder theorem and in this case because n as Nikos said",
    "start": "1340880",
    "end": "1346240"
  },
  {
    "text": "earlier is a product of two prime numbers if this value we're trying to zero out module each one of those primes",
    "start": "1346240",
    "end": "1353640"
  },
  {
    "text": "zeros out then it also means that the value zeros out module n which is what we're trying to achieve so looking at it",
    "start": "1353640",
    "end": "1361400"
  },
  {
    "text": "through these lens we'll try to zero out the left hand equations one by one and if we manage to do that then we will",
    "start": "1361400",
    "end": "1367880"
  },
  {
    "text": "have achieved our goal of zeroing out the right hand equation so the first half is actually quite simple we choose",
    "start": "1367880",
    "end": "1375120"
  },
  {
    "text": "K so we could choose K to be equal to Q then by definition Q mode Q zeros out",
    "start": "1375120",
    "end": "1380919"
  },
  {
    "text": "and we're done with the first half of it now what about the second equation how can we zero it out modul P well what if",
    "start": "1380919",
    "end": "1389960"
  },
  {
    "text": "the hash that depends on W just happens to be a multiple of P then also P mode P",
    "start": "1389960",
    "end": "1395080"
  },
  {
    "text": "Zeros out right is this likely to just randomly happen not really but because",
    "start": "1395080",
    "end": "1400679"
  },
  {
    "text": "we choose W how about we Brute Force W such as the hash that depends on it happens to be a multiple of p is this",
    "start": "1400679",
    "end": "1406720"
  },
  {
    "text": "even feasible no it's not Fe feasible because the paper says that n needs to be 248 bits",
    "start": "1406720",
    "end": "1413919"
  },
  {
    "text": "which makes p and Q each over a th000 bits of size so what are we going to do",
    "start": "1413919",
    "end": "1420159"
  },
  {
    "text": "what if instead of choosing n remember Alice is choosing n during the key",
    "start": "1420159",
    "end": "1426039"
  },
  {
    "text": "generation phase which happens once per wallet but what if instead of choosing it it be comprised of two symmetrically",
    "start": "1426039",
    "end": "1431640"
  },
  {
    "text": "sized prime numbers she would choose it to be comprised of two very asymmetrically sized prime numbers",
    "start": "1431640",
    "end": "1437000"
  },
  {
    "text": "whereas one p is only 16 bit size which is boot forceable in an instance and Q is",
    "start": "1437000",
    "end": "1443000"
  },
  {
    "text": "sufficiently large for makeup for the size that n needs to be H you might be thinking wait isn't",
    "start": "1443000",
    "end": "1449480"
  },
  {
    "text": "there some zero knowledge proof to make sure that n can't be chosen in this way it turns out that there is no zero",
    "start": "1449480",
    "end": "1455080"
  },
  {
    "text": "knowledge proof for checking that there are no small factors for n and the only thing that the implementations we looked",
    "start": "1455080",
    "end": "1461279"
  },
  {
    "text": "at checked is whether n is square free I won't be diving into the technical definition of square uh freeness so it",
    "start": "1461279",
    "end": "1469520"
  },
  {
    "text": "looks like uh we're done it looks like we can choose the uh n with the small",
    "start": "1469520",
    "end": "1474880"
  },
  {
    "text": "factor and then set K to be a big value then cheat in the range proof and then",
    "start": "1474880",
    "end": "1479919"
  },
  {
    "text": "exfiltrate all of the X's of the honest parties not so fast why because remember",
    "start": "1479919",
    "end": "1487960"
  },
  {
    "text": "the MTA formula so this is the value that Alice decrypt uh during the MTA so",
    "start": "1487960",
    "end": "1494919"
  },
  {
    "text": "actually there is a pesy modulo and operation happening there",
    "start": "1494919",
    "end": "1500200"
  },
  {
    "text": "implicitly and uh why it happens is not very important the point is that it's",
    "start": "1500200",
    "end": "1505480"
  },
  {
    "text": "unavoidable and this will mess with our leakage why because K is almost as big",
    "start": "1505480",
    "end": "1511200"
  },
  {
    "text": "as n and let's see what happens when we reduce uh uh Things modulo N so here we",
    "start": "1511200",
    "end": "1516399"
  },
  {
    "text": "have K and N they are 16 bits apart and when we consider the value of K * X plus",
    "start": "1516399",
    "end": "1522440"
  },
  {
    "text": "the mask we see the X in the clear in the most significant bits however as",
    "start": "1522440",
    "end": "1527919"
  },
  {
    "text": "soon as we apply the modul operation the most significant x uh the most",
    "start": "1527919",
    "end": "1533640"
  },
  {
    "text": "significant bits of X they disappear they they go bye-bye they they fall off a cliff and the we we only get partial",
    "start": "1533640",
    "end": "1540960"
  },
  {
    "text": "leakage on X what is the explicit leakage that we get we only get X mode P",
    "start": "1540960",
    "end": "1548080"
  },
  {
    "text": "where p is a small Prime and and we don't get X in in the full so",
    "start": "1548080",
    "end": "1555960"
  },
  {
    "text": "we would like to have a way to obtain uh X in the clear worry not Nikos once",
    "start": "1555960",
    "end": "1564039"
  },
  {
    "text": "again the Chinese remainer theor comes to our rescue now how does it help us this time so to explain it let's take a",
    "start": "1564039",
    "end": "1571120"
  },
  {
    "text": "number xal 23 right there's a myriad ways we can encode this number like we",
    "start": "1571120",
    "end": "1576440"
  },
  {
    "text": "can all see on the screen the number encoded decimally we can encode it hexad decimally so on and so forth actually we",
    "start": "1576440",
    "end": "1582039"
  },
  {
    "text": "can also use CRT to encode numbers how would that look like we would divide the",
    "start": "1582039",
    "end": "1587159"
  },
  {
    "text": "number with a few different small prime numbers and save the remainder of these",
    "start": "1587159",
    "end": "1592440"
  },
  {
    "text": "divisions Now using just this information we could feed it back into the CRT algorithm to reconstruct the",
    "start": "1592440",
    "end": "1599399"
  },
  {
    "text": "original number now this looks a bit like magic but it has its limitations namely this would only work to encode a",
    "start": "1599399",
    "end": "1606200"
  },
  {
    "text": "number that's as big as the product of the primes we used so if we used three",
    "start": "1606200",
    "end": "1611640"
  },
  {
    "text": "five and seven as in this example we can only encode a number of size up to 105",
    "start": "1611640",
    "end": "1616919"
  },
  {
    "text": "but in our example example we're in our use case we're trying to encode a number X which is 256 bits of size so to do",
    "start": "1616919",
    "end": "1625039"
  },
  {
    "text": "that we'll need 16 small prime numbers of 16 bits of size each so if we can get these 16",
    "start": "1625039",
    "end": "1633279"
  },
  {
    "text": "leakages one by one we could feed them into the CRT algorithm and reconstruct",
    "start": "1633279",
    "end": "1638840"
  },
  {
    "text": "the keyshare in its entirety is there a problem for us to do that actually there",
    "start": "1638840",
    "end": "1644480"
  },
  {
    "text": "is we only have one n n is chosen during the key generation phase and not during",
    "start": "1644480",
    "end": "1651279"
  },
  {
    "text": "the signature generation phase so we only have one n and therefore one p per wallet so we can only use this attack",
    "start": "1651279",
    "end": "1658840"
  },
  {
    "text": "that we described to achieve the very first leakage which is 16 bits of size",
    "start": "1658840",
    "end": "1664960"
  },
  {
    "text": "um what can we do now well what if during the key generation where Alis",
    "start": "1664960",
    "end": "1671799"
  },
  {
    "text": "chooses n instead of choosing it to be this handsome looking value which is the",
    "start": "1671799",
    "end": "1677200"
  },
  {
    "text": "product of two prime numbers she would choose this to be this monstrosity which is the product of 16 small prime numbers",
    "start": "1677200",
    "end": "1684440"
  },
  {
    "text": "times Q which is a big prime number to make for the desired size of n some of you might be saying well maybe",
    "start": "1684440",
    "end": "1691760"
  },
  {
    "text": "there's some like zero knowledge proof in the protocol that says you can choose n to be this monstrosity it turns out that there is no zero knowledge proof",
    "start": "1691760",
    "end": "1698720"
  },
  {
    "text": "for checking how many primes the N has the only thing the parties check is whether n is square free and I'm still",
    "start": "1698720",
    "end": "1704679"
  },
  {
    "text": "not telling you what square freeness is so so it looks like we're at the Finish",
    "start": "1704679",
    "end": "1709919"
  },
  {
    "text": "Line we can extract all of these remainders and then in the end we can get the X in the clear so how do we do",
    "start": "1709919",
    "end": "1716960"
  },
  {
    "text": "that well remember when n was the normal looking n we said k equals q and we got",
    "start": "1716960",
    "end": "1722159"
  },
  {
    "text": "leakage X mode P now that we have the Bizarro n we set k equal n / Pi and we",
    "start": "1722159",
    "end": "1728840"
  },
  {
    "text": "get leakage X mode Pi so this happens in 16 different signature sessions how does",
    "start": "1728840",
    "end": "1734880"
  },
  {
    "text": "it happen in the first session we choose uh k over P1 we get leakage X mode P1 in",
    "start": "1734880",
    "end": "1739919"
  },
  {
    "text": "the second signature session we get leakage X mode P2 and so on and so forth until in the end we get leakage X mode",
    "start": "1739919",
    "end": "1747120"
  },
  {
    "text": "p16 we feed all of these remainders into the CRT algorithm and we recover X in",
    "start": "1747120",
    "end": "1753519"
  },
  {
    "text": "the clear but will this actually work so we said again we found an open source",
    "start": "1753519",
    "end": "1759360"
  },
  {
    "text": "implementation of the gg20 protocol and we try to see if it would work or running the exploit looks",
    "start": "1759360",
    "end": "1766600"
  },
  {
    "text": "like this it starts by choosing 16 small prime numbers to make the Bizarro n then",
    "start": "1766600",
    "end": "1772240"
  },
  {
    "text": "we start signing each time we're choosing K to get a specific leakage of",
    "start": "1772240",
    "end": "1777519"
  },
  {
    "text": "uh X over mod pi and then we cheat in the range proof and and we get that",
    "start": "1777519",
    "end": "1782720"
  },
  {
    "text": "leakage so we need to do this 16 times 16 signature ceremonies we take all of",
    "start": "1782720",
    "end": "1788880"
  },
  {
    "text": "the leakage that we get from all of them we feed it into CRT and then we can reconstruct Bob's keyshare in its",
    "start": "1788880",
    "end": "1795440"
  },
  {
    "text": "entirety now we can combine it with our own print it in heximal format load it up to our metamask or whatnot and sign away so",
    "start": "1795440",
    "end": "1804559"
  },
  {
    "text": "we've disclosed this to all the affected parties and they have remedied this how could one go about doing that well one",
    "start": "1804559",
    "end": "1811600"
  },
  {
    "text": "could add the zero knowledge proof for proving the wellformedness of Alice's nend to make sure that she can't choose",
    "start": "1811600",
    "end": "1816760"
  },
  {
    "text": "this uh weird looking nend that is required to carry out the attack all right we are done with the",
    "start": "1816760",
    "end": "1824519"
  },
  {
    "text": "second attack of the day and we're uh at our third and last one right so for this last attack we will be showing you how",
    "start": "1824519",
    "end": "1831840"
  },
  {
    "text": "to compromise a do-it-yourself protocol that we found in the wild we will be exfiltrating the key in one signature",
    "start": "1831840",
    "end": "1839080"
  },
  {
    "text": "actually in less than one signature in the first round of the first signature and the protocol uh goes something like",
    "start": "1839080",
    "end": "1845000"
  },
  {
    "text": "this so it is also MTA based however in in this protocol there are no zero",
    "start": "1845000",
    "end": "1850480"
  },
  {
    "text": "knowledge proofs uh accompanying the cipher text that the parties uh send",
    "start": "1850480",
    "end": "1856240"
  },
  {
    "text": "furthermore the mask that Bob chooses is chosen to be as big as n it's a random",
    "start": "1856240",
    "end": "1862159"
  },
  {
    "text": "number that's as big as n and why is this detail important it's important because our previous attack is no longer",
    "start": "1862159",
    "end": "1868480"
  },
  {
    "text": "relevant why because no matter how big K is the mask is always going to hide X so",
    "start": "1868480",
    "end": "1876399"
  },
  {
    "text": "what can we do about this well we can do the following without the zero knowledge proof Alice can send something that's",
    "start": "1876399",
    "end": "1883240"
  },
  {
    "text": "not even a cipher text for example she can send the value four in doing so by carefully choosing a",
    "start": "1883240",
    "end": "1892639"
  },
  {
    "text": "malicious n a malicious n that is not Square free mind you Bob will",
    "start": "1892639",
    "end": "1898240"
  },
  {
    "text": "inadvertedly send back his X in the clear actually it's not really in the",
    "start": "1898240",
    "end": "1903480"
  },
  {
    "text": "clear you need to do some data processing and there's a bunch of primes involved and you need to do CRT and then",
    "start": "1903480",
    "end": "1908919"
  },
  {
    "text": "there's like brute forcing but everything happens in seconds so um you can think about this L",
    "start": "1908919",
    "end": "1916320"
  },
  {
    "text": "attack as a compress rest version of the second attack that we showed you basically instead of doing 16 signature",
    "start": "1916320",
    "end": "1922320"
  },
  {
    "text": "ceremonies to get this leakage we do only one and then we Brute Force the numbers offline and do CRT to",
    "start": "1922320",
    "end": "1930039"
  },
  {
    "text": "reconstruct it so this demo is going to be quick don't blink we sign we do the MTA now we're doing the brute forcing",
    "start": "1930039",
    "end": "1936360"
  },
  {
    "text": "we're feding uh the results into CRT and voila we have the key share of the other",
    "start": "1936360",
    "end": "1943919"
  },
  {
    "text": "party great so in uh conclusion uh what did we see today so",
    "start": "1944159",
    "end": "1950279"
  },
  {
    "text": "we presented uh a few novel zero day attacks and we showed how to",
    "start": "1950279",
    "end": "1957360"
  },
  {
    "text": "exfiltrate uh the key from a bunch of MPC systems as of today MPC is the gold",
    "start": "1957360",
    "end": "1966240"
  },
  {
    "text": "standard for protecting digital assets but it is not a commodity yet it is a",
    "start": "1966240",
    "end": "1974600"
  },
  {
    "text": "sophisticated technology that requires expertise in order to be on top of",
    "start": "1974600",
    "end": "1979679"
  },
  {
    "text": "things and follow the latest research we hope that our findings today contributes",
    "start": "1979679",
    "end": "1986159"
  },
  {
    "text": "to the security of the field and the health of the ecosystem so here you can find the",
    "start": "1986159",
    "end": "1993919"
  },
  {
    "text": "exploits that the poc's that Orin presented as well as the technical white",
    "start": "1993919",
    "end": "1999399"
  },
  {
    "text": "paper explaining the tax we will be taking questions now or offline thank",
    "start": "1999399",
    "end": "2006639"
  },
  {
    "text": "you very [Applause]",
    "start": "2006639",
    "end": "2017630"
  },
  {
    "text": "much right and the microphones are in the aisles test hey um I'm Amic show",
    "start": "2020679",
    "end": "2027080"
  },
  {
    "text": "with un cered we do cryptocurrency wallet vulnerability development we broke like the treaser recently with the",
    "start": "2027080",
    "end": "2032120"
  },
  {
    "text": "T and the one the one key so I'm sure you saw that how is your experience with responsible discl closure CU we're",
    "start": "2032120",
    "end": "2037440"
  },
  {
    "text": "having a huge problem at our company when we find vulnerabilities that are affecting wide swats of people like you guys are we're going through a",
    "start": "2037440",
    "end": "2042919"
  },
  {
    "text": "disclosure right now for early uh library for web wallets but like were they easy coming from you guys I'd love",
    "start": "2042919",
    "end": "2049200"
  },
  {
    "text": "to chat with you after about that because we have a lot of things that you might be able to help with but were they receptive was it quick or were people",
    "start": "2049200",
    "end": "2055320"
  },
  {
    "text": "like get away because a lot of cryptocurrency projects are like it's not a problem they'll even dock themselves online saying it's not a",
    "start": "2055320",
    "end": "2061158"
  },
  {
    "text": "problem but they Le the Vol yeah I think it's we we've learned a",
    "start": "2061159",
    "end": "2066320"
  },
  {
    "text": "lot we might have made some uh uh learning mistakes throughout disclosing this but uh one thing we've learned is",
    "start": "2066320",
    "end": "2071919"
  },
  {
    "text": "that like it really matters uh how you do it so just you know the most gracious way the most friendly way and usually uh",
    "start": "2071919",
    "end": "2080280"
  },
  {
    "text": "like when we present it that way we have receptive responses of course not",
    "start": "2080280",
    "end": "2085320"
  },
  {
    "text": "everybody's like that and some people don't take it very easily so it's it depends yeah well I have wor St history",
    "start": "2085320",
    "end": "2091760"
  },
  {
    "text": "afterwards but uh Co sounds about about accurate right thank you",
    "start": "2091760",
    "end": "2098879"
  },
  {
    "text": "as you guys are doing your research um how do you think about Edwards cures Bas signatures so eddsa for like Salon keys",
    "start": "2100880",
    "end": "2108079"
  },
  {
    "text": "and things like that is it obviously K is not relevant so I didn't know if you had any commentary on Edward signatures",
    "start": "2108079",
    "end": "2113640"
  },
  {
    "text": "so so what's the question whether it's like it's a better scheme compared to ecdsa or uh yeah I mean commentary on",
    "start": "2113640",
    "end": "2120320"
  },
  {
    "text": "that and just other attack vectors right I I think as you look at more modern crypto right like a lot of people are",
    "start": "2120320",
    "end": "2126079"
  },
  {
    "text": "heading that way polka dot with Sr 25519 how do you think about protecting that as you know ecdsa it will be so in",
    "start": "2126079",
    "end": "2133839"
  },
  {
    "text": "the context of npcc or as a signature in the so in the context of NPC doing like",
    "start": "2133839",
    "end": "2139280"
  },
  {
    "text": "a NPC for EDSA is simpler and there are fewer like mistakes that you can make so",
    "start": "2139280",
    "end": "2145160"
  },
  {
    "text": "it's probably better for the for for for threat it's it's better I don't know if",
    "start": "2145160",
    "end": "2150200"
  },
  {
    "text": "it's better or worse but it's simpler and it yields fewer mistakes maybe that's an answer",
    "start": "2150200",
    "end": "2158800"
  },
  {
    "text": "all right thank you very much thank",
    "start": "2164280",
    "end": "2168240"
  },
  {
    "text": "you",
    "start": "2169920",
    "end": "2172920"
  }
]