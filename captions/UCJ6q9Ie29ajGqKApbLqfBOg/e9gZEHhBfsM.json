[
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14700"
  },
  {
    "text": "hi everyone i'm daniel comoromi head of research at tusk security labs and with my colleague laurent we'll be talking",
    "start": "14960",
    "end": "20640"
  },
  {
    "text": "about pawning huawei base bands this presentation will be divided into three chapters and we each will try to",
    "start": "20640",
    "end": "26880"
  },
  {
    "text": "highlight a takeaway that answers one of these questions first the mobile phones are more than",
    "start": "26880",
    "end": "32640"
  },
  {
    "text": "containers for running app store apps and they should be threat modeled for accordingly second that buck hunting is very rarely",
    "start": "32640",
    "end": "39440"
  },
  {
    "text": "a straight line from start to finish and the third takeaway for us is that low-level security can be about a lot",
    "start": "39440",
    "end": "45920"
  },
  {
    "text": "more than auditing code of typical parsers that just happen to be running in a different execution context",
    "start": "45920",
    "end": "53519"
  },
  {
    "text": "so to start let's talk about why we picked are victorians at our as our research target and the answer to that",
    "start": "54079",
    "end": "60079"
  },
  {
    "text": "question is essentially in the name kirin meaning unicorn so friendly fluffy little target at least that's what we",
    "start": "60079",
    "end": "66400"
  },
  {
    "text": "thought in the beginning but more on that later so why do we think that well first of all huawei baseband has been researched",
    "start": "66400",
    "end": "72479"
  },
  {
    "text": "before a source code leak publicly exists for a long time and of course the android side",
    "start": "72479",
    "end": "79119"
  },
  {
    "text": "is known for it can be rooted and it's pretty debug friendly for instance the",
    "start": "79119",
    "end": "84240"
  },
  {
    "text": "modem crash logs are accessible without root and it was also shown in",
    "start": "84240",
    "end": "89360"
  },
  {
    "text": "previous research that the memory isolation wasn't complete so for example the android side can straight see the",
    "start": "89360",
    "end": "95520"
  },
  {
    "text": "memory of the modem that's where we started so we thought this would be a good target but of course we wanted to",
    "start": "95520",
    "end": "101360"
  },
  {
    "text": "pick something in the baseband which would be novel in a way so our definition of a good target there was",
    "start": "101360",
    "end": "107600"
  },
  {
    "text": "that it should be a part of the 3gb stack implementation that is not in the leak",
    "start": "107600",
    "end": "112720"
  },
  {
    "text": "and something that would be different than prior baseband zero days that have been published which for the most part",
    "start": "112720",
    "end": "118560"
  },
  {
    "text": "are all in the area of nest and information elements where the tlv parsing in",
    "start": "118560",
    "end": "124799"
  },
  {
    "text": "itself has the straightforward bug of the length is not checked and the third aspect here for us was",
    "start": "124799",
    "end": "131200"
  },
  {
    "text": "that one thing about huawei basement hardening that was known is that everywhere instead of man copy they use",
    "start": "131200",
    "end": "136879"
  },
  {
    "text": "a safe variant which actually check which actually catches out this typical tlv-based overflows",
    "start": "136879",
    "end": "144080"
  },
  {
    "text": "and the answer for the target finding for us lied in the difference between the nas and the as layer in 3gpp so what",
    "start": "144080",
    "end": "150720"
  },
  {
    "text": "are these nas is the non-access stratum what that means is that it's the part that is",
    "start": "150720",
    "end": "156560"
  },
  {
    "text": "actually a logical link between entities where one endpoint is the mobile phone but the other endpoint is an entity",
    "start": "156560",
    "end": "162800"
  },
  {
    "text": "inside the operator's network and the functionality here are the things that you would first think of as what the",
    "start": "162800",
    "end": "168080"
  },
  {
    "text": "baseband does it manages the mobility the connectivity like calls and texts and the data sessions as well",
    "start": "168080",
    "end": "175040"
  },
  {
    "text": "in contrast the access stratum is basically the final link it's the actual",
    "start": "175040",
    "end": "180560"
  },
  {
    "text": "wireless link between the cell tower and the mobile phone",
    "start": "180560",
    "end": "186959"
  },
  {
    "text": "and accordingly the protocol the protocol that is part of the access stratum has uh the the responsibility of",
    "start": "186959",
    "end": "194879"
  },
  {
    "text": "dealing with the management of the radio link the radio channels themselves",
    "start": "194879",
    "end": "200080"
  },
  {
    "text": "and as it turns out rrm the radio resource management layer was exactly the target that we were looking for both",
    "start": "200080",
    "end": "206959"
  },
  {
    "text": "because it's a pretty complex implementation even though it's for gsm it had a lot of 3g and 4g revisions",
    "start": "206959",
    "end": "212879"
  },
  {
    "text": "later and also because it actually uses a form of bit based encoding which is different",
    "start": "212879",
    "end": "218959"
  },
  {
    "text": "from your typical information element dlvs so how does that work exactly",
    "start": "218959",
    "end": "224720"
  },
  {
    "text": "and this is where we get introduced to csn1 or concrete syntax notation well i'm sure you would",
    "start": "224720",
    "end": "230799"
  },
  {
    "text": "have heard about asn1 and csn is very similar the difference is essentially in that first letter",
    "start": "230799",
    "end": "236400"
  },
  {
    "text": "whereas in asn 1 you have abstract object types like sequences enumerations integers and that allows that syntax to",
    "start": "236400",
    "end": "243680"
  },
  {
    "text": "to use that grammar for all kinds of different protocols in csn1 you don't have these kind of",
    "start": "243680",
    "end": "248879"
  },
  {
    "text": "address abstract types at all you only have bit conditionals and bit length fields and from there everything in the",
    "start": "248879",
    "end": "255040"
  },
  {
    "text": "definition ties the grammar syntax and the particular protocol protocol together",
    "start": "255040",
    "end": "260639"
  },
  {
    "text": "if you're interested in the all the details then these are the specification numbers that you can look at if you want",
    "start": "260639",
    "end": "266320"
  },
  {
    "text": "to read thousands of pages uh i would hope that you'll be encouraged to do so after our presentation",
    "start": "266320",
    "end": "273039"
  },
  {
    "text": "so what is uh interesting for us in a contracting concrete syntax notation uh",
    "start": "273360",
    "end": "278880"
  },
  {
    "text": "well it's that it's not actually that concrete even though it seems straightforward not everything is fixed",
    "start": "278880",
    "end": "284320"
  },
  {
    "text": "there are still like an asn 1 variable length elements which can be explicit and implicit explicit not so interesting",
    "start": "284320",
    "end": "291840"
  },
  {
    "text": "for our presentation we're going to focus on the implicit form which comes in this uh syntax that you see on the",
    "start": "291840",
    "end": "297520"
  },
  {
    "text": "slide with this star star one notation and what that means is that when the decoder encounters the fields like this",
    "start": "297520",
    "end": "304160"
  },
  {
    "text": "then what it does is when you see a one bit that means that there's one more repetition of the field and you keep",
    "start": "304160",
    "end": "309360"
  },
  {
    "text": "going with new repetitions that you have to parse out as long as you don't get a zero bit",
    "start": "309360",
    "end": "314960"
  },
  {
    "text": "this also exists in the other format in the specification of course where the rows of the bits are flipped",
    "start": "314960",
    "end": "320720"
  },
  {
    "text": "so the question obviously that follows is where where are in the syntax the length constraints for these kind of",
    "start": "320720",
    "end": "326160"
  },
  {
    "text": "repetitions and the answer unfortunately or fortunately depending on how you're looking at it is nowhere",
    "start": "326160",
    "end": "332720"
  },
  {
    "text": "unlike information element tls and unlike the esn1 syntax constraints are just not part of the grammar",
    "start": "332720",
    "end": "339199"
  },
  {
    "text": "if you dig enough into the specification then in some cases we highlight one on the slide you can find written text that",
    "start": "339199",
    "end": "345840"
  },
  {
    "text": "says oh by the way and you should have not more than 96 repetitions let's say",
    "start": "345840",
    "end": "351039"
  },
  {
    "text": "but by and large even this is not there and so that's that's basically going to be our bot",
    "start": "351039",
    "end": "356960"
  },
  {
    "text": "class unbound recursive repetitions and you can see that this is a very interesting uh proposition that the",
    "start": "356960",
    "end": "364000"
  },
  {
    "text": "specification itself doesn't say anything about constraints that means that if you would have an implementation",
    "start": "364000",
    "end": "369600"
  },
  {
    "text": "that followed the specification perfectly you would it would still not have constraints in other words it's",
    "start": "369600",
    "end": "375520"
  },
  {
    "text": "left up to the implementer to decide and that is typically a good news for the buck hunter",
    "start": "375520",
    "end": "381280"
  },
  {
    "text": "so then it's time to fire up your kidja and start looking at how how it actually",
    "start": "381280",
    "end": "386400"
  },
  {
    "text": "implements csn1 turns out the implementation was fairly complicated but long story short it's just two",
    "start": "386400",
    "end": "393280"
  },
  {
    "text": "two-stage process and the first one is a stack-based virtual machine and here of course we had to spend a bunch of time",
    "start": "393280",
    "end": "399440"
  },
  {
    "text": "understanding the binary uh compact format of the opcode",
    "start": "399440",
    "end": "405280"
  },
  {
    "text": "definitions for the various little vm programs that represent the decoding of certain messages and also understand the",
    "start": "405280",
    "end": "411919"
  },
  {
    "text": "role of the vm but finally we figured out after writing our own decompiler you can see an example of the output on the",
    "start": "411919",
    "end": "418080"
  },
  {
    "text": "screen that long story short the vm doesn't do any unserialization per se there's no copying yet it only takes the",
    "start": "418080",
    "end": "425120"
  },
  {
    "text": "message to identify the fields that are present and then there's a second stage and that's actually regular code so it's",
    "start": "425120",
    "end": "431280"
  },
  {
    "text": "easier to comprehend and that's the one that does the copying and it's important to point out that the copying itself",
    "start": "431280",
    "end": "436639"
  },
  {
    "text": "will always happen into a fixed sized union that contains the unserialized version of each message",
    "start": "436639",
    "end": "444400"
  },
  {
    "text": "so your question is going to be well where are the validity checks from the decompilation phase we were able to",
    "start": "444400",
    "end": "450000"
  },
  {
    "text": "conclude that it's not in the vm so that follows that it should be in the unserialization code but as it turned",
    "start": "450000",
    "end": "456319"
  },
  {
    "text": "out it also was not there it was basically not anywhere so at this point",
    "start": "456319",
    "end": "461919"
  },
  {
    "text": "we have instances of the actual bug class in fact every single unbound",
    "start": "461919",
    "end": "466960"
  },
  {
    "text": "repetition in this code is basically a bug so great for us we have",
    "start": "466960",
    "end": "472319"
  },
  {
    "text": "you know lots of bugs except of course bugs are not the same thing as exploitable vulnerability primitives and",
    "start": "472319",
    "end": "479599"
  },
  {
    "text": "we found that out through a lot of blood sweat and tears and that was all lauren's work until we finally were",
    "start": "479599",
    "end": "486479"
  },
  {
    "text": "able to find some that actually worked as good vulnerabilities well before i go into a detail of uh",
    "start": "486479",
    "end": "493440"
  },
  {
    "text": "describing one let's talk about drawbacks and advantages of this bug class that we have defined here",
    "start": "493440",
    "end": "500000"
  },
  {
    "text": "one drawback is the bit encoding itself when you think about it this will mean that in many cases you will in the",
    "start": "500000",
    "end": "505919"
  },
  {
    "text": "grammar for example take three bits and decode it into a byte or take seven bits decode that into a byte and what that's",
    "start": "505919",
    "end": "512080"
  },
  {
    "text": "going to mean of course is that in the output even if you do everything right for your perspective and you can",
    "start": "512080",
    "end": "518399"
  },
  {
    "text": "corrupt for example a pointer you might not be able to create all the values that you want for that pointer",
    "start": "518399",
    "end": "524240"
  },
  {
    "text": "the other constraint was the size of the inputs lots of these rr messages the",
    "start": "524240",
    "end": "529279"
  },
  {
    "text": "system information messages in particular are very short 21 or 23 bytes typically",
    "start": "529279",
    "end": "534399"
  },
  {
    "text": "so that naturally limits the number of repetitions you can cram inside and then finally on the flip side there's the",
    "start": "534399",
    "end": "540480"
  },
  {
    "text": "output location and size as i mentioned the whole thing goes into one fixed union which is actually on the bss for",
    "start": "540480",
    "end": "547839"
  },
  {
    "text": "most cases uh which is not as good because already you don't get a direct stack or heat",
    "start": "547839",
    "end": "553760"
  },
  {
    "text": "buffer overflow primitive even if you can go outside that union and secondly because it's one union for all the",
    "start": "553760",
    "end": "559040"
  },
  {
    "text": "messages it's actually very large in size so in practice a lot of these unbound repetitions lead to overflows",
    "start": "559040",
    "end": "565279"
  },
  {
    "text": "where you basically just run out of bits and you don't actually get to corrupt anything on the flip side there are many",
    "start": "565279",
    "end": "571120"
  },
  {
    "text": "advantages though the biggest ones is that because these repetitions show up in a lot of nested",
    "start": "571120",
    "end": "577680"
  },
  {
    "text": "structures so it's a structure inside the structure inside the structure what we get is that",
    "start": "577680",
    "end": "583600"
  },
  {
    "text": "in many cases with a single extra input bit we can actually create a large increment in where we're writing in the",
    "start": "583600",
    "end": "589760"
  },
  {
    "text": "output so that can create scenarios where even with few inputs we actually managed to corrupt far enough and the",
    "start": "589760",
    "end": "596080"
  },
  {
    "text": "second part was the huge variance uh in the end even if we only count the cases that we could turn into meaningful",
    "start": "596080",
    "end": "602399"
  },
  {
    "text": "corruptions we ended up with several hundreds of cases and if you would look at every bug instance i mean you could",
    "start": "602399",
    "end": "608399"
  },
  {
    "text": "use the lame joke that the entire specification was a bug but of course somebody had to go and",
    "start": "608399",
    "end": "614320"
  },
  {
    "text": "find a particular vulnerability that works and laura put in all that work",
    "start": "614320",
    "end": "619680"
  },
  {
    "text": "and long story short we actually ended up with a couple pretty good ones you can see like an out of bound right stack",
    "start": "619680",
    "end": "625360"
  },
  {
    "text": "buffer floor heat buffer overflow so in the interest of time i'm only going to describe one of them in detail",
    "start": "625360",
    "end": "631519"
  },
  {
    "text": "but in the white paper that we have also published with this presentation you can see the details for all the other ones",
    "start": "631519",
    "end": "637360"
  },
  {
    "text": "so here we're gonna go middle out so we're gonna start from where finally the bug hits and then work our way back to",
    "start": "637360",
    "end": "643680"
  },
  {
    "text": "understanding why that's actually a triggerable and reachable bug that's the way we did it in practice as",
    "start": "643680",
    "end": "648720"
  },
  {
    "text": "well so here we don't know exactly where we are yet or how we get here all you want to do is if you look at the slide",
    "start": "648720",
    "end": "654880"
  },
  {
    "text": "you see that here we have a function where an input will be this used bits field",
    "start": "654880",
    "end": "659920"
  },
  {
    "text": "which is an integer and it's checked with the function but you can see that the check is rounded down to byte size",
    "start": "659920",
    "end": "665839"
  },
  {
    "text": "so if you can control the four bytes it's a textbook trivial bypass and then it flows into a straight stack buffer",
    "start": "665839",
    "end": "671839"
  },
  {
    "text": "overflow so that's pretty great but is this reachable at all well as it turns out if we then go back",
    "start": "671839",
    "end": "678320"
  },
  {
    "text": "a step and see which message we are in and what the definition of that is for the csm1 grammar",
    "start": "678320",
    "end": "684000"
  },
  {
    "text": "we find out that this type of cell selection messages message fields can",
    "start": "684000",
    "end": "689440"
  },
  {
    "text": "contain uh four different types of district descriptors that are for the different uh radio access technologies",
    "start": "689440",
    "end": "695360"
  },
  {
    "text": "eu trend meaning lte utren and then gsm well the sad panda part is that as it",
    "start": "695360",
    "end": "701040"
  },
  {
    "text": "turns out where the used bits comes from the number of fdd cells is actually fixed so",
    "start": "701040",
    "end": "706560"
  },
  {
    "text": "no matter our buck pattern we cannot use that directly to have a corrupt integer value however there are other fields as",
    "start": "706560",
    "end": "713519"
  },
  {
    "text": "you can see highlighted that use the unbound repetition and with that in theory you could use the one field",
    "start": "713519",
    "end": "719519"
  },
  {
    "text": "inside the structure to corrupt the other field and end up with this good use bits that you want but of course it all decide it all",
    "start": "719519",
    "end": "726079"
  },
  {
    "text": "depends on what the final structure out line is of the actual unserialized",
    "start": "726079",
    "end": "731760"
  },
  {
    "text": "output and then when we looked at that we find that inside the union for this",
    "start": "731760",
    "end": "737200"
  },
  {
    "text": "particular message the different descriptors they are not treated as a union but as a struct so they are there",
    "start": "737200",
    "end": "742399"
  },
  {
    "text": "sequentially one after the other and also this means there's no which redwatch chosen flag instead the handler",
    "start": "742399",
    "end": "749279"
  },
  {
    "text": "code will select the first one which had a non-zero item count and this is where all the stars aligned for us because",
    "start": "749279",
    "end": "756320"
  },
  {
    "text": "there was a discrepancy between the priority of which one is checked first and the structure outline of which one",
    "start": "756320",
    "end": "762560"
  },
  {
    "text": "comes first in memory in fact the eu trunk comes first so you can corrupt all the other ones with that one with the",
    "start": "762560",
    "end": "767680"
  },
  {
    "text": "repetitions but the utron has the higher priority so there's our attack we use a",
    "start": "767680",
    "end": "774079"
  },
  {
    "text": "corrupt too many repetitions eu crep eu trend description to create a used bits field inside the",
    "start": "774079",
    "end": "781279"
  },
  {
    "text": "utrend with an items count that will trick the handler to think that we actually had",
    "start": "781279",
    "end": "787040"
  },
  {
    "text": "utrend to begin with so that sounds good but just because we have repetitions that can reach that far",
    "start": "787040",
    "end": "793519"
  },
  {
    "text": "you're not sure that the overlap comes out correct remember with the bits there's all these limits that you have to get lucky or you have to get correct",
    "start": "793519",
    "end": "800720"
  },
  {
    "text": "and here uh finally uh was the step where and once again laurent had to work",
    "start": "800720",
    "end": "806000"
  },
  {
    "text": "quite a bit to figure out if we can get the right count and right types of repetitions but the long story short is",
    "start": "806000",
    "end": "813040"
  },
  {
    "text": "that it worked out and we were able to create an encoding",
    "start": "813040",
    "end": "818079"
  },
  {
    "text": "which was accepted decoded and created as a result of fake huge and unserialized version with the right",
    "start": "818079",
    "end": "825120"
  },
  {
    "text": "numbers or the right field values that created the stack buffer overflow so great for us and at that point all",
    "start": "825120",
    "end": "833040"
  },
  {
    "text": "right you have a poc which shows clearly you have stack control you have a prefetch abort with a control pc",
    "start": "833040",
    "end": "840160"
  },
  {
    "text": "so we can all go home but not quite first of all obviously exploitation would need a lot of other steps",
    "start": "840160",
    "end": "846639"
  },
  {
    "text": "remember that our final goal is to actually break outside the baseband as well but even before we get to that",
    "start": "846639",
    "end": "853040"
  },
  {
    "text": "the target that we worked on our friendly target was a kirin 970 it was android 9 at the time",
    "start": "853040",
    "end": "858560"
  },
  {
    "text": "at that time that was a fully up-to-date phone so okay we know we have a zero day but what about the newer devices",
    "start": "858560",
    "end": "865040"
  },
  {
    "text": "that was the thing that we wanted to see if we can also target and so as we turn to the newer devices",
    "start": "865040",
    "end": "871600"
  },
  {
    "text": "well this is where we basically ran into a brick wall and laurent will now take the second",
    "start": "871600",
    "end": "877760"
  },
  {
    "text": "chapter to tell you how we managed to run through that brick wall",
    "start": "877760",
    "end": "884040"
  },
  {
    "text": "so after the initial success of finding box in the 970 basement firmware we wanted to analyze the modem of modem",
    "start": "888240",
    "end": "895120"
  },
  {
    "text": "images of newer devices but we failed way before the actual bug hunting we found out that uh huawei started to",
    "start": "895120",
    "end": "901120"
  },
  {
    "text": "encrypt the modem images uh they also discontinued the boots of the run log",
    "start": "901120",
    "end": "906160"
  },
  {
    "text": "possibility in 2018 so rooting the kerner as a feature was out",
    "start": "906160",
    "end": "912639"
  },
  {
    "text": "and it uh later turned out uh old modern debug facilities have been also removed uh the",
    "start": "912639",
    "end": "918880"
  },
  {
    "text": "kerner is now also isolated from the modem the direct reading of modern memory from android is not possible and",
    "start": "918880",
    "end": "926160"
  },
  {
    "text": "also crash logs are restricted or gone in short we learned the hard way that",
    "start": "926160",
    "end": "932079"
  },
  {
    "text": "our knowledge of asian culture was lacking in the fact that kirin does not quite mean unicorn at this",
    "start": "932079",
    "end": "939440"
  },
  {
    "text": "point we were stuck uh this is where our research took an unexpected turn from pawning baseband uh",
    "start": "939440",
    "end": "946320"
  },
  {
    "text": "to pawning huawei's uh sakura boot so based on all their devices we try to",
    "start": "946320",
    "end": "952880"
  },
  {
    "text": "enumerate the firmware image chain uh which finally loads the modem the bottom",
    "start": "952880",
    "end": "958160"
  },
  {
    "text": "loading is initiated by the corner uh and actually loaded by the tos which",
    "start": "958160",
    "end": "963279"
  },
  {
    "text": "eventually loaded by uh fastboot and fuzzboot is started by loader to our",
    "start": "963279",
    "end": "968320"
  },
  {
    "text": "great relief up until uh 990 uh the axler image is still preserved in plain",
    "start": "968320",
    "end": "973920"
  },
  {
    "text": "text so finally we found something we could analyze on the other hand we immediately",
    "start": "973920",
    "end": "979680"
  },
  {
    "text": "realized that we didn't even know what are the axolotls responsibilities and its position in the blood chain",
    "start": "979680",
    "end": "987279"
  },
  {
    "text": "uh the good process of huawei care begins with a power management controller after that",
    "start": "987279",
    "end": "993920"
  },
  {
    "text": "huawei phones have a quite unique way of boot up the boot cpu is not the application cpu",
    "start": "993920",
    "end": "1001360"
  },
  {
    "text": "like a arm cortex a series but a much more simple one in this case it's a cortex m3",
    "start": "1001360",
    "end": "1008320"
  },
  {
    "text": "microcontroller in the kerner sources this core is referred as lpmcu which probably stands",
    "start": "1008320",
    "end": "1015519"
  },
  {
    "text": "for a low power microcontroller the bootrom and the following acceler stage initialize the slc to make it prepare",
    "start": "1015519",
    "end": "1023279"
  },
  {
    "text": "for the acpu course the first image uh to run on the acpu in",
    "start": "1023279",
    "end": "1028959"
  },
  {
    "text": "es3 level is fastboot which has several duties in the bring up process it does without saying",
    "start": "1028959",
    "end": "1035438"
  },
  {
    "text": "that every firmware loading process is cryptographically verified",
    "start": "1035439",
    "end": "1041199"
  },
  {
    "text": "based on a prepended certificate chain of the images we don't have time to talk",
    "start": "1041199",
    "end": "1047600"
  },
  {
    "text": "to go into details about the header format and other details of the verification but our white paper contains a lot more",
    "start": "1047600",
    "end": "1054480"
  },
  {
    "text": "details so check that out um by uh carrying 990 uh huawei reduced the",
    "start": "1054480",
    "end": "1061440"
  },
  {
    "text": "privilege level of fastboot image from year three to year one and introduced a dedicated bi to a",
    "start": "1061440",
    "end": "1069360"
  },
  {
    "text": "firmware to offload the procedures that needs es3 level access",
    "start": "1069360",
    "end": "1075120"
  },
  {
    "text": "still regardless of the chip version it is easy to see and that",
    "start": "1075120",
    "end": "1080720"
  },
  {
    "text": "by hijacking the axillary stage one could gain complete control of what code to run on the acpu",
    "start": "1080720",
    "end": "1089039"
  },
  {
    "text": "next we had to investigate the attack surface of the ax loader fortunately soon we found out that there's an",
    "start": "1089679",
    "end": "1096080"
  },
  {
    "text": "alternate boot pass in which we can have a chance to interact with the axolotl directly",
    "start": "1096080",
    "end": "1102720"
  },
  {
    "text": "this mode is the usb download mode which can be triggered with a corrupted extrovert image typically called a soft",
    "start": "1102720",
    "end": "1109600"
  },
  {
    "text": "brick device or via test point test point is usually a tiny pad exposed",
    "start": "1109600",
    "end": "1115280"
  },
  {
    "text": "on the back side of the pcb and the way to trigger is is to pull it to ground",
    "start": "1115280",
    "end": "1120799"
  },
  {
    "text": "every huawei phone we've seen so far has this feature uh we suspect this is",
    "start": "1120799",
    "end": "1126559"
  },
  {
    "text": "because of factory flashing or for repairability reasons",
    "start": "1126559",
    "end": "1131600"
  },
  {
    "text": "uh we actually found about this test point only for much older huawei",
    "start": "1131600",
    "end": "1138400"
  },
  {
    "text": "device some online forums so at first we weren't sure whether this will work on",
    "start": "1138400",
    "end": "1144400"
  },
  {
    "text": "our target devices too but luckily trier error worked and we didn't find it",
    "start": "1144400",
    "end": "1151120"
  },
  {
    "text": "too difficult to find the location of the tespon uh on 980",
    "start": "1151120",
    "end": "1156400"
  },
  {
    "text": "devices and and later on the newer 990 devices of course this mode",
    "start": "1156400",
    "end": "1162960"
  },
  {
    "text": "the um the download images are still verified uh in the exact same",
    "start": "1162960",
    "end": "1169120"
  },
  {
    "text": "manner uh just like the ones being read from a flash storage so without vulnerability you are still",
    "start": "1169120",
    "end": "1176240"
  },
  {
    "text": "stuck so at this point we fired up gitra and",
    "start": "1176240",
    "end": "1182320"
  },
  {
    "text": "look for bugs in the accelerator code the plaintext image has a flat format so it's not",
    "start": "1182320",
    "end": "1189039"
  },
  {
    "text": "difficult to get it to load correctly first we have to understand the protocol",
    "start": "1189039",
    "end": "1194559"
  },
  {
    "text": "that is used in usb download mode the phone enumerates as a serial over usb device as it turns out the communication",
    "start": "1194559",
    "end": "1201679"
  },
  {
    "text": "over a serial line uses a slightly modified version of the ages old axe modern fight transfer protocol to",
    "start": "1201679",
    "end": "1208880"
  },
  {
    "text": "quickly summarize the main building blocks of the blocks are four different types of chunks",
    "start": "1208880",
    "end": "1215919"
  },
  {
    "text": "as you can see on the slides well that seems uh quite uh simple right",
    "start": "1215919",
    "end": "1222720"
  },
  {
    "text": "well it turns out uh still a lot could go uh wrong and it and it",
    "start": "1222720",
    "end": "1228480"
  },
  {
    "text": "went wrong uh luckily we ended up finding a bunch of exploitable vulnerabilities in the",
    "start": "1228480",
    "end": "1234799"
  },
  {
    "text": "axolotl code better still after successful exploitation",
    "start": "1234799",
    "end": "1240240"
  },
  {
    "text": "we were able to down the bootrom code and not only did we find that some of",
    "start": "1240240",
    "end": "1246880"
  },
  {
    "text": "the bugs also affects uh the bootrom code and we also found several that were",
    "start": "1246880",
    "end": "1252320"
  },
  {
    "text": "bootrom specific finally although we started with 980 uh we later able to verify that most of",
    "start": "1252320",
    "end": "1260400"
  },
  {
    "text": "these were also there and exploitable on 990.",
    "start": "1260400",
    "end": "1265840"
  },
  {
    "text": "due to the different memory maps uh exploitation uh in axler and bootron was",
    "start": "1265840",
    "end": "1271840"
  },
  {
    "text": "different also from uh this box led to arbitrary write and others to segment show buffer",
    "start": "1271840",
    "end": "1278799"
  },
  {
    "text": "overflows so they needed uh different steps long story short",
    "start": "1278799",
    "end": "1283919"
  },
  {
    "text": "we managed to exploit each of this full arbitrary code execution on lpmcu and",
    "start": "1283919",
    "end": "1289520"
  },
  {
    "text": "yeah er-3 level on the acpu unfortunately since we have limited time",
    "start": "1289520",
    "end": "1296480"
  },
  {
    "text": "today we are only going to discuss the first one in details if you are interested",
    "start": "1296480",
    "end": "1302080"
  },
  {
    "text": "the details of all the other exploits please check out uh",
    "start": "1302080",
    "end": "1308159"
  },
  {
    "text": "our white paper the first vulnerability uh is which we",
    "start": "1308159",
    "end": "1313520"
  },
  {
    "text": "call the hadry sandbag was present in the bootroom bootstrap",
    "start": "1313520",
    "end": "1318559"
  },
  {
    "text": "code of at least the kirin 980 and 990 chipsets the axon protocol is stateful",
    "start": "1318559",
    "end": "1325280"
  },
  {
    "text": "as it must know the current download address when uh when the data chunk arrives there are",
    "start": "1325280",
    "end": "1331520"
  },
  {
    "text": "many state variables but for for this bug uh the most important ones are the",
    "start": "1331520",
    "end": "1338559"
  },
  {
    "text": "download address the size of the file and the next expected sequence counter",
    "start": "1338559",
    "end": "1343600"
  },
  {
    "text": "the first cause of this vulnerability is the fact that address and size parameters",
    "start": "1343600",
    "end": "1349120"
  },
  {
    "text": "were always updated before the validation the second cause is that there is no",
    "start": "1349120",
    "end": "1355280"
  },
  {
    "text": "state a reset when a validation decides a head chunk is involved",
    "start": "1355280",
    "end": "1361679"
  },
  {
    "text": "the third cause was that the state checking only prevented data chunks uh sand",
    "start": "1361679",
    "end": "1368480"
  },
  {
    "text": "without a valid hedge chunk but it did not prevent it multiple head chunks",
    "start": "1368480",
    "end": "1374000"
  },
  {
    "text": "as a result we can get this very strong arbitrary right primitive in three simple steps",
    "start": "1374000",
    "end": "1380640"
  },
  {
    "text": "first first of all send a sender a head chunk with a welded wires",
    "start": "1380640",
    "end": "1386960"
  },
  {
    "text": "this will set the next next state",
    "start": "1386960",
    "end": "1392080"
  },
  {
    "text": "to 1 allowing data chunks to be sent while still allowing hedgehog to be",
    "start": "1392080",
    "end": "1398240"
  },
  {
    "text": "stunned then send a head shine with a malicious address the address state of variable",
    "start": "1398240",
    "end": "1405120"
  },
  {
    "text": "will be updated why the next sequence is left intact",
    "start": "1405120",
    "end": "1411200"
  },
  {
    "text": "finally proceed to a data chance and override your arbitrary address with arbitrary data well a pretty good booth",
    "start": "1411200",
    "end": "1418480"
  },
  {
    "text": "from expert primitive i'd say equipment",
    "start": "1418480",
    "end": "1423919"
  },
  {
    "text": "ability to arbitrary with an arbitrary right primitive our next goal was to turn it into code",
    "start": "1423919",
    "end": "1430720"
  },
  {
    "text": "execution the good news is that bootram does not use any kind of memory",
    "start": "1430720",
    "end": "1436000"
  },
  {
    "text": "protection so the whole astron region is readable writable executable",
    "start": "1436000",
    "end": "1441039"
  },
  {
    "text": "but of course existing butron code overwrite is not possible because of the the read-only nature of the memory what",
    "start": "1441039",
    "end": "1448240"
  },
  {
    "text": "we can do is to overwrite the push-return address on stack and even though we can't patch code",
    "start": "1448240",
    "end": "1455840"
  },
  {
    "text": "we don't even have to the code we want to to be executed can be simply downloaded",
    "start": "1455840",
    "end": "1462960"
  },
  {
    "text": "in place of the x loader because even if a cryptographic verification fails the",
    "start": "1462960",
    "end": "1468799"
  },
  {
    "text": "data remains intact in memory in practice we want to keep the communication",
    "start": "1468799",
    "end": "1474320"
  },
  {
    "text": "channel alive to be able to interact with our injected payload and obviously",
    "start": "1474320",
    "end": "1479600"
  },
  {
    "text": "we would eventually want to continue the boot process anyway the most convenient way to achieve that",
    "start": "1479600",
    "end": "1486960"
  },
  {
    "text": "is to start from the original explorer code and modify just a small portion of",
    "start": "1486960",
    "end": "1492240"
  },
  {
    "text": "the xml protocol by implementing a custom message handler",
    "start": "1492240",
    "end": "1498000"
  },
  {
    "text": "moving on to newer devices absolute battery method fails because uh 990",
    "start": "1498000",
    "end": "1503279"
  },
  {
    "text": "huawei because from 990 huawei encrypted the xlr images as well however",
    "start": "1503279",
    "end": "1510960"
  },
  {
    "text": "we were happy to see that a previous headrest and bug still worked with 990.",
    "start": "1510960",
    "end": "1516880"
  },
  {
    "text": "nonetheless this left us in dark as there is no plaintext bootrom or x loader code to",
    "start": "1516880",
    "end": "1523919"
  },
  {
    "text": "analyze or patch so we wrote a full black box exploit based on the bootrom code of a 980",
    "start": "1523919",
    "end": "1530559"
  },
  {
    "text": "series we created some heuristics to autonomously find a booth through the uh the the x",
    "start": "1530559",
    "end": "1536480"
  },
  {
    "text": "modem protocol handler which is the foundation of the communication channel downloading data",
    "start": "1536480",
    "end": "1542480"
  },
  {
    "text": "from the host to the phone uh is supported by the design of xml protocol but thanks to the huawei specific",
    "start": "1542480",
    "end": "1549840"
  },
  {
    "text": "extension through the inquiry chunk a four byte of data can be uploaded to the",
    "start": "1549840",
    "end": "1554880"
  },
  {
    "text": "host this opened up a possibility to implement a very primitive interactive",
    "start": "1554880",
    "end": "1560159"
  },
  {
    "text": "payload which can be used to down the plain text x loader or bootstrap code",
    "start": "1560159",
    "end": "1565760"
  },
  {
    "text": "dumping was painfully slow at 4 by per second it took about seven hours to dump the whole boot rom",
    "start": "1565760",
    "end": "1573520"
  },
  {
    "text": "there were some minor disruptions uh with [Music] the axillary decryption as manual",
    "start": "1573520",
    "end": "1579919"
  },
  {
    "text": "manually invoking the decryption function caused a crash the reason is",
    "start": "1579919",
    "end": "1584960"
  },
  {
    "text": "still unknown otherwise we knew that uh xlr decryption works",
    "start": "1584960",
    "end": "1590960"
  },
  {
    "text": "because the form does power on so we simply left the original code pass to",
    "start": "1590960",
    "end": "1596000"
  },
  {
    "text": "the decrypt the external image and then right before the execution would have handed over to the axler we set a",
    "start": "1596000",
    "end": "1604000"
  },
  {
    "text": "breakpoint and uh hijacked the control flow the breakpoint exception ends up in",
    "start": "1604000",
    "end": "1609279"
  },
  {
    "text": "our um in our custom debug handler uh from where uh we were able to uh down the",
    "start": "1609279",
    "end": "1615760"
  },
  {
    "text": "plain text tax loader in about uh 15 hours",
    "start": "1615760",
    "end": "1621200"
  },
  {
    "text": "so uh a little demo time we",
    "start": "1621360",
    "end": "1627360"
  },
  {
    "text": "we start from from from a",
    "start": "1627360",
    "end": "1632559"
  },
  {
    "text": "powered off device you right pro of the phone because",
    "start": "1632559",
    "end": "1638559"
  },
  {
    "text": "the test point can be only triggered at boot time now i press",
    "start": "1638559",
    "end": "1644799"
  },
  {
    "text": "the button which triggers the test point and then we can see that the",
    "start": "1644799",
    "end": "1651679"
  },
  {
    "text": "device is enumerated as a usb serial converter",
    "start": "1651679",
    "end": "1658080"
  },
  {
    "text": "first we download the patch tax loader of course it's patched so at the verification",
    "start": "1658080",
    "end": "1663919"
  },
  {
    "text": "force which results in a other enumeration then we execute uh the",
    "start": "1663919",
    "end": "1671600"
  },
  {
    "text": "uh the the vulnerability the head result bug",
    "start": "1671600",
    "end": "1676960"
  },
  {
    "text": "and it uh and it helps to to start the x folder and finally we load the fastboot image",
    "start": "1676960",
    "end": "1684880"
  },
  {
    "text": "uh with a friendly little message with uh which shows that we clearly",
    "start": "1684880",
    "end": "1692000"
  },
  {
    "text": "clearly managed to modify the uh fastboot code",
    "start": "1692000",
    "end": "1697279"
  },
  {
    "text": "uh so now we have a full code execution in eos 3. we can take that into two",
    "start": "1697279",
    "end": "1704320"
  },
  {
    "text": "direction first we can read write fuses and the ufs sx loader",
    "start": "1704320",
    "end": "1710559"
  },
  {
    "text": "uh up to 970 we could directly down the as key and decrypt the firmware's",
    "start": "1710559",
    "end": "1716159"
  },
  {
    "text": "offline from 980 the key can be read out directly but we can use the crypto",
    "start": "1716159",
    "end": "1722000"
  },
  {
    "text": "engine as a decrypt oracle images aren't coupled to a single device so we can",
    "start": "1722000",
    "end": "1727440"
  },
  {
    "text": "decrypt an image of any lte for practical a practical",
    "start": "1727440",
    "end": "1733039"
  },
  {
    "text": "occurring chipset time second we can continue uh",
    "start": "1733039",
    "end": "1738640"
  },
  {
    "text": "continue up the chain uh always patching out the relevant checks uh from images until we end up",
    "start": "1738640",
    "end": "1745440"
  },
  {
    "text": "with for example a rooted canner uh in practice there were a number of gauchos involved in this for example due",
    "start": "1745440",
    "end": "1752320"
  },
  {
    "text": "to size constraints in the white paper we provide the details",
    "start": "1752320",
    "end": "1758480"
  },
  {
    "text": "the bottom line is that we end up with seemingly successful",
    "start": "1758480",
    "end": "1764159"
  },
  {
    "text": "loading the modified modem and uh and it and they just crashed",
    "start": "1764159",
    "end": "1770320"
  },
  {
    "text": "like almost all the time not exactly all the time but in in in a ways that made no sense to us",
    "start": "1770320",
    "end": "1777760"
  },
  {
    "text": "mooring ways that started to make us question everything we know about arm assembly",
    "start": "1777760",
    "end": "1785039"
  },
  {
    "text": "okay no know what it was a time to go back to bang",
    "start": "1785039",
    "end": "1790640"
  },
  {
    "text": "reversing the to figure out the modemo has changed how the modem has changed",
    "start": "1790640",
    "end": "1797840"
  },
  {
    "text": "since kirin 970. this part actually took",
    "start": "1797840",
    "end": "1803840"
  },
  {
    "text": "a quite bit again first of all we we ended up building our self",
    "start": "1803840",
    "end": "1809279"
  },
  {
    "text": "debugger to be able to dynamically test things you can again find initial details on",
    "start": "1809279",
    "end": "1815360"
  },
  {
    "text": "the implementation of our debug debugger in the white paper once we had this",
    "start": "1815360",
    "end": "1821440"
  },
  {
    "text": "we were able to map out how how exploit hardening has changed as you can see from the table",
    "start": "1821440",
    "end": "1828960"
  },
  {
    "text": "huawei was has been busy improving the modem's security",
    "start": "1828960",
    "end": "1834880"
  },
  {
    "text": "which is nice i want to point out the aslr in practical",
    "start": "1834880",
    "end": "1840799"
  },
  {
    "text": "that was introduced in 990 because the cortex r8 processor has no",
    "start": "1840799",
    "end": "1846720"
  },
  {
    "text": "mmu this is implemented as a pure physical address shift",
    "start": "1846720",
    "end": "1852480"
  },
  {
    "text": "which provides about 14 bits of entropy however",
    "start": "1852480",
    "end": "1858159"
  },
  {
    "text": "the basement images are still a flat image that is not compiled to be position independent",
    "start": "1858159",
    "end": "1864960"
  },
  {
    "text": "so at first we were downfolded that how asr is possible if the image is not a",
    "start": "1864960",
    "end": "1871360"
  },
  {
    "text": "position independent at all eventually we figured out that",
    "start": "1871360",
    "end": "1876399"
  },
  {
    "text": "huawei has added a custom relocation table into the flat image and the modem",
    "start": "1876399",
    "end": "1881440"
  },
  {
    "text": "loading process itself includes a relinking stage that rewrites every uh",
    "start": "1881440",
    "end": "1888159"
  },
  {
    "text": "every single hard-coded address value in the modem image based on",
    "start": "1888159",
    "end": "1893519"
  },
  {
    "text": "the shift has been chosen now it's clear that the problem was whatever",
    "start": "1893519",
    "end": "1899360"
  },
  {
    "text": "we patched code the relocation sometimes rewrote our",
    "start": "1899360",
    "end": "1904960"
  },
  {
    "text": "instructions to solve this uh the first four had to reverse engineer and then patch some",
    "start": "1904960",
    "end": "1912240"
  },
  {
    "text": "functionality in the trisome that enabled the aslr shift",
    "start": "1912240",
    "end": "1917360"
  },
  {
    "text": "and then we just modified the relocation table itself in order to make sure that parts of the code that we page",
    "start": "1917360",
    "end": "1925360"
  },
  {
    "text": "was not touched by relocations with this at last had a fairly robust",
    "start": "1925360",
    "end": "1931039"
  },
  {
    "text": "debug environment to consider further basement exploitation",
    "start": "1931039",
    "end": "1937679"
  },
  {
    "text": "and so in the final chapter we take a look at how you could use the type of primitives for the remote that we talked",
    "start": "1942240",
    "end": "1948399"
  },
  {
    "text": "about before and turn that into a complete control of the platform here it's important to point out that the",
    "start": "1948399",
    "end": "1954960"
  },
  {
    "text": "presentation has followed the same timeline as our research so of course by the time we got around all the",
    "start": "1954960",
    "end": "1960399"
  },
  {
    "text": "bootloader stuff the previously reported baseband box have of course been fixed to huawei uh uh with all over the year",
    "start": "1960399",
    "end": "1967200"
  },
  {
    "text": "updates to their credit so by this time on a fresh device where we look for sandbox escapes of course they wouldn't",
    "start": "1967200",
    "end": "1973600"
  },
  {
    "text": "have worked nonetheless we wanted to see how you could complete a chain assuming",
    "start": "1973600",
    "end": "1978720"
  },
  {
    "text": "a starting primitive and here our mindset was let's not try to create the longest",
    "start": "1978720",
    "end": "1984159"
  },
  {
    "text": "possible chain but the simplest solution so we wanted to see if you could use an arbitrary right of course you have now",
    "start": "1984159",
    "end": "1990159"
  },
  {
    "text": "seen even a stack buffer overflow doesn't give you that on a huawei baseband but with a heap of flow it's",
    "start": "1990159",
    "end": "1995679"
  },
  {
    "text": "possible again you can check in the white paper how you could transform a heap or flow into an arbitrary ride",
    "start": "1995679",
    "end": "2002320"
  },
  {
    "text": "how you could use that and get a single step towards uh code execution at el3",
    "start": "2002320",
    "end": "2009279"
  },
  {
    "text": "so at this point you want to consider what the other service looks like if you're inside the base band and you",
    "start": "2009279",
    "end": "2014559"
  },
  {
    "text": "could look for the most trivial approach is basically the messaging that goes between the basement and android and",
    "start": "2014559",
    "end": "2020640"
  },
  {
    "text": "find typical parsing bugs there or you could think about the dma capable devices that the basement is supposed to",
    "start": "2020640",
    "end": "2026559"
  },
  {
    "text": "control and see if if you program up those for transactions whether they are limited like they should or third option",
    "start": "2026559",
    "end": "2033919"
  },
  {
    "text": "would be to look around at all the other cores outside the basement and the application processor and see if we can",
    "start": "2033919",
    "end": "2038960"
  },
  {
    "text": "create a lateral movement into a pro into a core that is maybe more powerful than the basement in terms of the",
    "start": "2038960",
    "end": "2044840"
  },
  {
    "text": "isolation but the most interesting thing would be if we could hit right to the core of the sock and figure out how",
    "start": "2044840",
    "end": "2052638"
  },
  {
    "text": "the boss fabric actually controls ddr memory accesses and whether we can abuse that",
    "start": "2052639",
    "end": "2058878"
  },
  {
    "text": "so the first step in the case of how i means icc which is the intercommunication core we really",
    "start": "2058879",
    "end": "2064720"
  },
  {
    "text": "unfortunately don't have time to get into details of these bugs i just want to point out that these were actually fined by",
    "start": "2064720",
    "end": "2070158"
  },
  {
    "text": "another researcher on the team uh so credit goes to jim for that um beyond that please check out the white paper",
    "start": "2070159",
    "end": "2076560"
  },
  {
    "text": "for the details and then came the second thing that i mentioned is the direct memory access",
    "start": "2076560",
    "end": "2082638"
  },
  {
    "text": "so here uh obviously step one is get the data sheet read everything try it out",
    "start": "2082639",
    "end": "2087760"
  },
  {
    "text": "and maybe it works of course we didn't have the data sheet so the challenge in these cases is how do you figure out for",
    "start": "2087760",
    "end": "2093280"
  },
  {
    "text": "a black box like a sock what device it's supposed to have how you program it how you control it for us it was a",
    "start": "2093280",
    "end": "2099280"
  },
  {
    "text": "combination of dynamic testing and probing with our modem debugger and just trying things and looking around and",
    "start": "2099280",
    "end": "2104960"
  },
  {
    "text": "scanning and looking at the linux kernel source to find a jumping of points and",
    "start": "2104960",
    "end": "2110480"
  },
  {
    "text": "long story short we are able to identify the address map and a control register",
    "start": "2110480",
    "end": "2116320"
  },
  {
    "text": "addresses for peripherals and figure out uh some dma engines like the one that's",
    "start": "2116320",
    "end": "2121520"
  },
  {
    "text": "supposed to be controlled by the modem to talk to the application processor as well as another one that's uh the modem",
    "start": "2121520",
    "end": "2127280"
  },
  {
    "text": "is tied to to talk to the iomc u another core and we also had to figure out how to control these first we of course tried",
    "start": "2127280",
    "end": "2134560"
  },
  {
    "text": "well are these maybe standard armed dnas like a dma330 or 230. but that was a",
    "start": "2134560",
    "end": "2139680"
  },
  {
    "text": "fail because that didn't work at all on the on the controller register areas that they they had but then we got lucky by",
    "start": "2139680",
    "end": "2147280"
  },
  {
    "text": "looking more around the linux kernel we found the dma engine which is programmed by a linux kernel driver of course this",
    "start": "2147280",
    "end": "2153200"
  },
  {
    "text": "is a limited dma engine it makes sense for the linux kernel to be able to be master of it it has nothing to do with",
    "start": "2153200",
    "end": "2158560"
  },
  {
    "text": "the base pen it's nothing to do with basement sandbox escape except that it works in the same way functions in the",
    "start": "2158560",
    "end": "2164000"
  },
  {
    "text": "same way as these other dma engines so from linux kernel source code we were able to figure out how to program these",
    "start": "2164000",
    "end": "2169599"
  },
  {
    "text": "black box dma engines and basically here we turn into a euro meme because we tried with the edma and",
    "start": "2169599",
    "end": "2176079"
  },
  {
    "text": "it didn't work and so then we got sad because it seemed to us well all our you know great",
    "start": "2176079",
    "end": "2181520"
  },
  {
    "text": "knowledge of dma got us absolutely nowhere but then we figured well let's try the other dma engine because maybe they you know didn't set that one right",
    "start": "2181520",
    "end": "2189200"
  },
  {
    "text": "and that worked and then suddenly what we got was full uh memory control of",
    "start": "2189200",
    "end": "2194480"
  },
  {
    "text": "secure world memory trust zone and everything so that's a nice cbe and you know finding a bug like this is good if",
    "start": "2194480",
    "end": "2200320"
  },
  {
    "text": "you want to report it but it's interesting that we have no idea about the discrepancy so we wanted to figure",
    "start": "2200320",
    "end": "2205920"
  },
  {
    "text": "out why things happened this way and that's basically going to be the last step of our",
    "start": "2205920",
    "end": "2212960"
  },
  {
    "text": "of our journey and that is something called dmss which is essentially the memory firewall of",
    "start": "2212960",
    "end": "2219839"
  },
  {
    "text": "kirin socks so how did we get here well again one thing that was a big hint for us is",
    "start": "2219839",
    "end": "2225760"
  },
  {
    "text": "the kernel source we looked around that and found some hints at certain addresses that seemed to have got to do",
    "start": "2225760",
    "end": "2231599"
  },
  {
    "text": "with programming the ddr but that wouldn't have been enough but it gave us hints to where to look in trust",
    "start": "2231599",
    "end": "2237680"
  },
  {
    "text": "zone code so we did some reverse engineering and then we finally found the places where these things are",
    "start": "2237680",
    "end": "2242720"
  },
  {
    "text": "actually being uh programmed when i say these things the mss uses a concept of asi entries which is basically similar",
    "start": "2242720",
    "end": "2250320"
  },
  {
    "text": "to a pt in a page table and basically what that means is that with one asi entry based on a master id which",
    "start": "2250320",
    "end": "2256400"
  },
  {
    "text": "identifies a core like one of the processors i mean you can say",
    "start": "2256400",
    "end": "2261760"
  },
  {
    "text": "this score for this physical address can access this memory with with these types",
    "start": "2261760",
    "end": "2267040"
  },
  {
    "text": "of access rights and so from here we knew that well trust zone can control these asy",
    "start": "2267040",
    "end": "2273280"
  },
  {
    "text": "entries uh but on a secure platform nobody else could well well we looked into that what we",
    "start": "2273280",
    "end": "2279520"
  },
  {
    "text": "realized is well there's a bit of a logic issue here because now we know the thing that",
    "start": "2279520",
    "end": "2284960"
  },
  {
    "text": "protects things is the dmss and the dms is a ddr memory arbiter meaning it protects accesses to ddr memory the",
    "start": "2284960",
    "end": "2292000"
  },
  {
    "text": "problem was that the control registers that we're talking about for controlling dmss itself",
    "start": "2292000",
    "end": "2297280"
  },
  {
    "text": "well those are not part of the ddr memory and of course what follows here is that",
    "start": "2297280",
    "end": "2302800"
  },
  {
    "text": "well nothing prevents the base band from accessing the asy entries themselves so you can directly reprogram them from",
    "start": "2302800",
    "end": "2309200"
  },
  {
    "text": "memory from the base van and from that point on uh increase your access to ddr",
    "start": "2309200",
    "end": "2315839"
  },
  {
    "text": "memory however way you like except there was one more wrinkle and this is the final bug i mentioned for me it's the",
    "start": "2315839",
    "end": "2321280"
  },
  {
    "text": "pick of the bunch to be honest because the basement couldn't directly access these physical addresses that would be",
    "start": "2321280",
    "end": "2327200"
  },
  {
    "text": "required to program the dmss but that was because of the basement's own mpu and here you could say that the",
    "start": "2327200",
    "end": "2332640"
  },
  {
    "text": "baseband's own mpu doesn't matter if you have code execution but remember we were thinking about only using a single right",
    "start": "2332640",
    "end": "2339119"
  },
  {
    "text": "primitive you don't want to have to have the a priority requirement of getting around firmware versions getting around",
    "start": "2339119",
    "end": "2344960"
  },
  {
    "text": "aslr you just want to do a single right repeatedly and what we found is that due",
    "start": "2344960",
    "end": "2351520"
  },
  {
    "text": "to power management reasons what the baseband does is it actually turns off the mpu whenever it goes into a sleep",
    "start": "2351520",
    "end": "2357280"
  },
  {
    "text": "cycle and it when it turns it back on coming back on there's a cache from where it gets the entries that it",
    "start": "2357280",
    "end": "2363280"
  },
  {
    "text": "reprograms the mpu with however the problem with this cache was that it was writable but it was only",
    "start": "2363280",
    "end": "2368880"
  },
  {
    "text": "written at boot time so there you go if you have your right primitive you use it you rewrite the cache you wait for the",
    "start": "2368880",
    "end": "2374480"
  },
  {
    "text": "modem to go to sleep which happens quickly it comes back then you do writes again for example the dmss and you're",
    "start": "2374480",
    "end": "2381359"
  },
  {
    "text": "done and so all that's left essentially is to show a demo so let's skip right to that",
    "start": "2381359",
    "end": "2387599"
  },
  {
    "text": "we have two the first one shows that from the baseband you can take over trust zone you can see",
    "start": "2387599",
    "end": "2393359"
  },
  {
    "text": "on the video that first the one finger doesn't work with the fingerprint reader of course that's controlled by truss",
    "start": "2393359",
    "end": "2398560"
  },
  {
    "text": "zone but after our exploit will run and that's simulated here as i said uh on these this is at that point a zero day",
    "start": "2398560",
    "end": "2405599"
  },
  {
    "text": "but by the that time the basement bug is in so we use the bootloader stuff to uh",
    "start": "2405599",
    "end": "2410800"
  },
  {
    "text": "be able to inject a modern poc and the end result is of course now both fingers",
    "start": "2410800",
    "end": "2416720"
  },
  {
    "text": "work and then finally no presentation would be complete without arusha exploit",
    "start": "2416720",
    "end": "2422240"
  },
  {
    "text": "remote route so that's the last one that we show so you can see again we triggered the",
    "start": "2422240",
    "end": "2428560"
  },
  {
    "text": "poc and we end up with a route",
    "start": "2428560",
    "end": "2434400"
  },
  {
    "text": "with a root shot finally i wanted to share some notes about how the disclosure went uh but we certainly are",
    "start": "2434400",
    "end": "2441359"
  },
  {
    "text": "running out of time so we'll do that in the q a thank you",
    "start": "2441359",
    "end": "2447720"
  }
]