[
  {
    "start": "0",
    "end": "13000"
  },
  {
    "text": "hi my name is egg Academy I'm a security researcher at IBM security systems and today I will present an attack that we",
    "start": "0",
    "end": "6990"
  },
  {
    "text": "developed in the Linux random number generator on Android I will begin to",
    "start": "6990",
    "end": "12990"
  },
  {
    "text": "talk with what motivated us to conduct this research and why we needed to",
    "start": "12990",
    "end": "18090"
  },
  {
    "start": "13000",
    "end": "62000"
  },
  {
    "text": "attack the random number generator will then have a brief simplified overview of how the random number generator works",
    "start": "18090",
    "end": "24630"
  },
  {
    "text": "and i'll point out a flaw and its design",
    "start": "24630",
    "end": "29630"
  },
  {
    "text": "using this knowledge i will be able to outline our attack framework and put a",
    "start": "30170",
    "end": "35430"
  },
  {
    "text": "two manifestations of that framework the first one requires some local presence",
    "start": "35430",
    "end": "40559"
  },
  {
    "text": "of the attacker on the device and another manifestation can be employed",
    "start": "40559",
    "end": "47670"
  },
  {
    "text": "remotely by the attacker finally we will discuss current mitigations that are",
    "start": "47670",
    "end": "53820"
  },
  {
    "text": "used in new devices and how some of them might not be as good as they seem so the",
    "start": "53820",
    "end": "62609"
  },
  {
    "start": "62000",
    "end": "158000"
  },
  {
    "text": "story is that over a year ago we found the classic stack-based buffer overflow vulnerability in one of the most",
    "start": "62609",
    "end": "69119"
  },
  {
    "text": "critical services in android the key stop service the keystore Service is",
    "start": "69119",
    "end": "74220"
  },
  {
    "text": "responsible of stowing crypto related data such as private RSA keys beeping credentials etc we reported our findings",
    "start": "74220",
    "end": "82830"
  },
  {
    "text": "to Google and they fixed it in KitKat we also publish the white paper regarding",
    "start": "82830",
    "end": "88619"
  },
  {
    "text": "this vulnerability and more information can be found there in order to create a",
    "start": "88619",
    "end": "94290"
  },
  {
    "text": "working exploit an attacker must overcome several defense mechanisms an",
    "start": "94290",
    "end": "101899"
  },
  {
    "text": "alphanumeric filter which is imposed by the key stop service and other defense mechanisms which are imposed by the",
    "start": "101899",
    "end": "108180"
  },
  {
    "text": "operating system for instance other space laudanum ization SLR data",
    "start": "108180",
    "end": "114689"
  },
  {
    "text": "execution prevention dep or depth and stack Canaries the alphanumeric filter",
    "start": "114689",
    "end": "121710"
  },
  {
    "text": "and the depth defense mechanisms can be bypassed using an alphanumeric return",
    "start": "121710",
    "end": "127860"
  },
  {
    "text": "oriented programming shellcode and regarding SLR what we've seen is that",
    "start": "127860",
    "end": "132870"
  },
  {
    "text": "whenever we crash the Keystone service the operating system responds it with a new randomized",
    "start": "132870",
    "end": "139560"
  },
  {
    "text": "other space layout and an attacker can use this property to defeat SLR in our",
    "start": "139560",
    "end": "147090"
  },
  {
    "text": "eyes the most formidable obstacle an attacker would face when a Kuenn trying to exploit this vulnerability with be",
    "start": "147090",
    "end": "154140"
  },
  {
    "text": "with overcoming the stack Canaries defense mechanism on Android stack",
    "start": "154140",
    "end": "164160"
  },
  {
    "start": "158000",
    "end": "440000"
  },
  {
    "text": "Canaries are 400 bytes that are used to detect stack-based buffer overflows",
    "start": "164160",
    "end": "169590"
  },
  {
    "text": "before the execution of malicious code can occur the enforcement of stock",
    "start": "169590",
    "end": "177150"
  },
  {
    "text": "analyst requires a joint effort between the compiler and the operating system on the one hand the operating system of 400",
    "start": "177150",
    "end": "184740"
  },
  {
    "text": "bytes to process and on the other the other hand the processes binary image must be compiled with stap protection",
    "start": "184740",
    "end": "193010"
  },
  {
    "text": "when the step protecto flag is used the compiler eads code to the prologue and epilogue of each function in the",
    "start": "193010",
    "end": "200460"
  },
  {
    "text": "prologue it adds code that saves a copy of the star canary just before just",
    "start": "200460",
    "end": "206400"
  },
  {
    "text": "after the saved return others and in the epilogue just before the code that jumps",
    "start": "206400",
    "end": "212970"
  },
  {
    "text": "to that save return others it adds code that checks if the original value of the",
    "start": "212970",
    "end": "218430"
  },
  {
    "text": "stack canary is the same as a saved copy of the stack and I if there is a mismatch the program will crash itself",
    "start": "218430",
    "end": "227810"
  },
  {
    "text": "okay so before Android 4.3 when the",
    "start": "228050",
    "end": "233730"
  },
  {
    "text": "Bionic lipsy which is an Android slips implementation was loaded it directly",
    "start": "233730",
    "end": "239580"
  },
  {
    "text": "expected for random bytes from the random number generator on Android 4.3",
    "start": "239580",
    "end": "245640"
  },
  {
    "text": "and onwards when the burn Eclipse is",
    "start": "245640",
    "end": "251010"
  },
  {
    "text": "loaded it takes the most the four most significant bytes of something we call",
    "start": "251010",
    "end": "256980"
  },
  {
    "text": "the 80 random the idea random is a process as a is a pointer to 1600 bytes",
    "start": "256980",
    "end": "263280"
  },
  {
    "text": "that each process has the AET random gets allocated doing the process creation and every",
    "start": "263280",
    "end": "270930"
  },
  {
    "text": "process has it in its outer space I know it's bosses creation model is a",
    "start": "270930",
    "end": "276330"
  },
  {
    "text": "unix-like process Kardashian model where a parent process uses the fork system call to create a child process which is",
    "start": "276330",
    "end": "283620"
  },
  {
    "text": "identical to its parent and then usually please remember this the exact system call is used to replace the child's",
    "start": "283620",
    "end": "291120"
  },
  {
    "text": "binary image with a new one now the exact system call does a lot of things",
    "start": "291120",
    "end": "296580"
  },
  {
    "text": "but two important things that it does also is that it enforces a SLR meaning",
    "start": "296580",
    "end": "303420"
  },
  {
    "text": "it determines the address space layout of the process and the other thing is that it populates the auxiliary vector",
    "start": "303420",
    "end": "310500"
  },
  {
    "text": "of the process the auxiliary vector is a mechanism of communicating information from Colonel to userspace the auxiliary",
    "start": "310500",
    "end": "319020"
  },
  {
    "text": "vector has a pointer which is called the 80 random which points the 16 and bytes",
    "start": "319020",
    "end": "324390"
  },
  {
    "text": "which are somewhere in the process outer space so whenever the exact system call",
    "start": "324390",
    "end": "330480"
  },
  {
    "text": "is used 16 and 0 bytes are extracted form the hardened number generator I'll",
    "start": "330480",
    "end": "335940"
  },
  {
    "text": "placed somewhere in the other space of the process and I'll pointed to by the",
    "start": "335940",
    "end": "341490"
  },
  {
    "text": "1800 pointer and again on Android 4.3 and onwards when the burn eclipse ii",
    "start": "341490",
    "end": "348450"
  },
  {
    "text": "loads it takes them for most significant bytes of the 18 random and place them as",
    "start": "348450",
    "end": "354450"
  },
  {
    "text": "the candidate value please remember this the process creation model we will get",
    "start": "354450",
    "end": "359730"
  },
  {
    "text": "back to it when i'll describe one of our attack vectors okay so there are some",
    "start": "359730",
    "end": "367170"
  },
  {
    "text": "techniques that are used to overcome stack Canaries the first technique is a",
    "start": "367170",
    "end": "372180"
  },
  {
    "text": "naive brute-force attack which is inefficient inning and impractical to do",
    "start": "372180",
    "end": "378000"
  },
  {
    "text": "so on a real device other techniques require some special feature from the",
    "start": "378000",
    "end": "384630"
  },
  {
    "text": "process we want to attack for example an information leak which reveals parts or even the whole canary value and if you",
    "start": "384630",
    "end": "392700"
  },
  {
    "text": "are really lucky you could somehow overwrite the structure guard pointer",
    "start": "392700",
    "end": "397770"
  },
  {
    "text": "which points to that to the candidate value in the process",
    "start": "397770",
    "end": "403490"
  },
  {
    "text": "unfortunately none of these known techniques were applicable in our case so we had to take it the rather",
    "start": "403669",
    "end": "411150"
  },
  {
    "text": "different approach and instead of trying to alter or bypass the stock canary",
    "start": "411150",
    "end": "416340"
  },
  {
    "text": "protection we thought why not to attack",
    "start": "416340",
    "end": "423139"
  },
  {
    "text": "the source of under- in the system which creates which gives us actually the random bytes of that canada value so",
    "start": "423139",
    "end": "430470"
  },
  {
    "text": "what we did we really constructed the state of the other mobile generator",
    "start": "430470",
    "end": "436639"
  },
  {
    "text": "using the attacker will show today okay so let's wrap up things so we found a",
    "start": "436639",
    "end": "442320"
  },
  {
    "start": "440000",
    "end": "488000"
  },
  {
    "text": "vulnerability in a critical service in android in an effort to exploit it we had to overcome a stack an array we will",
    "start": "442320",
    "end": "449220"
  },
  {
    "text": "unable to do so using an using node techniques can arrays are 400 bytes that",
    "start": "449220",
    "end": "455250"
  },
  {
    "text": "are extracted from the Linux random number generator and initially we aim to",
    "start": "455250",
    "end": "461550"
  },
  {
    "text": "find weakness in the random number generator so we could have some intelligent guess of what that Canada",
    "start": "461550",
    "end": "468210"
  },
  {
    "text": "value may be and instead we end up with a full-fledged attack on the Linux random number generator on Android okay",
    "start": "468210",
    "end": "476390"
  },
  {
    "text": "so now we know why we want to attack the random number generator before we get to",
    "start": "476390",
    "end": "481650"
  },
  {
    "text": "how we actually do it a brief simplified overview of how the random number generator actually works so the linux on",
    "start": "481650",
    "end": "490229"
  },
  {
    "text": "the mobile generator maintains three pools a pool is just a buffer of bytes",
    "start": "490229",
    "end": "495570"
  },
  {
    "text": "the input pool the blocking pool and the no blocking poor environmental noise",
    "start": "495570",
    "end": "501500"
  },
  {
    "text": "such as time experiment input events or timings between this access event is",
    "start": "501500",
    "end": "508520"
  },
  {
    "text": "inserted into the input pool and an estimate of how much entropy was",
    "start": "508520",
    "end": "514800"
  },
  {
    "text": "inserted is kept by the counter by the random number generator if if the random",
    "start": "514800",
    "end": "521459"
  },
  {
    "text": "number generator is working properly this environmental noise which is in the input pool would propagate into the",
    "start": "521459",
    "end": "530190"
  },
  {
    "text": "blocking pool and the Knobloch input remember that if okay",
    "start": "530190",
    "end": "535520"
  },
  {
    "text": "the random number generator offers three output interfaces to Carter devices the",
    "start": "535520",
    "end": "542400"
  },
  {
    "text": "dev random and the dev on them and one function the get on and bites function the dev random character device return",
    "start": "542400",
    "end": "550050"
  },
  {
    "text": "on bytes regardless of the amount of entropy which is which is in the pool if",
    "start": "550050",
    "end": "557190"
  },
  {
    "text": "there is insufficient amount of entropy it blocks until more on top is obtained",
    "start": "557190",
    "end": "562850"
  },
  {
    "text": "the dev you random character device return on the bites regardless of the",
    "start": "562850",
    "end": "568050"
  },
  {
    "text": "amount of entropy which is in the pool so the dev you Adam never blocks the",
    "start": "568050",
    "end": "576420"
  },
  {
    "text": "gate and bites function works in a similar manner to the dev you random character device but it was designed to",
    "start": "576420",
    "end": "584550"
  },
  {
    "text": "be used within the colonel for example they called the exit system call it",
    "start": "584550",
    "end": "589920"
  },
  {
    "text": "eventually extracts 69 and bites right so it uses the get on and bites function to extract those bites and place them",
    "start": "589920",
    "end": "596700"
  },
  {
    "text": "somewhere in the process outer space which appointed by at 18-under it's very",
    "start": "596700",
    "end": "603360"
  },
  {
    "text": "about the dating on them you'll see what two more things when bites are requested",
    "start": "603360",
    "end": "610110"
  },
  {
    "text": "form the pools from any pool what really happens underneath is some kind of a feedback loop and by two requested so n",
    "start": "610110",
    "end": "618330"
  },
  {
    "text": "bytes are extracted then they are hashed using shell one function are mixed again",
    "start": "618330",
    "end": "624540"
  },
  {
    "text": "to the pool then n bytes are extracted again and another hash another shell 1",
    "start": "624540",
    "end": "631650"
  },
  {
    "text": "is performed so essentially the output of the other number generator is hashed twice using the sha-1 cryptographic hash",
    "start": "631650",
    "end": "638670"
  },
  {
    "text": "function and another thing is that gardless of the amount of bytes",
    "start": "638670",
    "end": "644610"
  },
  {
    "text": "requested from the random number generator the random number generator X",
    "start": "644610",
    "end": "649740"
  },
  {
    "text": "starts in blocks of 10 bytes and targets if necessary so for example if you want",
    "start": "649740",
    "end": "654840"
  },
  {
    "text": "a 99 bites it will extract 10 bytes and plank it okay so on the left you see the",
    "start": "654840",
    "end": "664320"
  },
  {
    "text": "environmental noise which is mixed or pushed into the input ball on top of the input to land the Knobloch",
    "start": "664320",
    "end": "670069"
  },
  {
    "text": "people what you see is a time value which is mixed in we call this time",
    "start": "670069",
    "end": "675110"
  },
  {
    "text": "value the seed of the pools when the random number module is initialized when",
    "start": "675110",
    "end": "681800"
  },
  {
    "text": "the counter boots up these time values are mixed into the pools and and on the",
    "start": "681800",
    "end": "689420"
  },
  {
    "text": "right you see that feedback loop that I've talked before that I've said before",
    "start": "689420",
    "end": "694689"
  },
  {
    "text": "every extraction make some make some",
    "start": "694689",
    "end": "699889"
  },
  {
    "text": "bites get every extraction final bites results in some bites or hashed bites",
    "start": "699889",
    "end": "706999"
  },
  {
    "text": "expand mixed back into the pool as I've",
    "start": "706999",
    "end": "712399"
  },
  {
    "text": "said the colonel keeps an estimate of how much entropy there is in the pool we",
    "start": "712399",
    "end": "718220"
  },
  {
    "text": "call this estimate the kec the cannon on top account if the KSC exceeds the 192",
    "start": "718220",
    "end": "725569"
  },
  {
    "text": "bit limit noise from the input pool is mixed into the non-blocking pool but if",
    "start": "725569",
    "end": "732740"
  },
  {
    "text": "there is low boot I'm entropy it means that during boot time noise from the input pool is never mixed to the",
    "start": "732740",
    "end": "741290"
  },
  {
    "text": "non-blocking pool and what we are left with is quite a degenerated random number generator which only depends on",
    "start": "741290",
    "end": "747589"
  },
  {
    "text": "the non-working pool the time seed and the order of extractions form the random",
    "start": "747589",
    "end": "754129"
  },
  {
    "text": "number generator for non blocking pool with that in mind I'll just have a quick",
    "start": "754129",
    "end": "759499"
  },
  {
    "start": "757000",
    "end": "848000"
  },
  {
    "text": "overview of the boot timeline of a regular device so the device powers on",
    "start": "759499",
    "end": "765170"
  },
  {
    "text": "then the bootloader loads the kernel image into the memory and then the",
    "start": "765170",
    "end": "771379"
  },
  {
    "text": "counter starts to boot eventually the random number generator model is initialized this is the place where the",
    "start": "771379",
    "end": "778100"
  },
  {
    "text": "non-blocking pool and the input pool and the blocking people are seeded with this time value then the colonel boot is",
    "start": "778100",
    "end": "785509"
  },
  {
    "text": "finished the colonel caused the init process which starts the Android",
    "start": "785509",
    "end": "792499"
  },
  {
    "text": "platform boot start opposes the other",
    "start": "792499",
    "end": "798110"
  },
  {
    "text": "two events yes every time we thank lock of the device",
    "start": "798110",
    "end": "804999"
  },
  {
    "text": "okay on Sam on some embedded devices we've read place now henninger has has",
    "start": "804999",
    "end": "813129"
  },
  {
    "text": "an excellent article on this some better devices the input the seed the seeds of",
    "start": "813129",
    "end": "819429"
  },
  {
    "text": "the proofs are zero actually so it's very predictable okay so at the next two",
    "start": "819429",
    "end": "824439"
  },
  {
    "text": "events may occur in a different order but it is irrelevant to our attack the",
    "start": "824439",
    "end": "830619"
  },
  {
    "text": "order so the first event is the event that noise from the input book is mixed",
    "start": "830619",
    "end": "836439"
  },
  {
    "text": "into the non-blocking pool and the other event is the event that the phone is ready to use for example you can use",
    "start": "836439",
    "end": "841990"
  },
  {
    "text": "your whatsapp application you can start chatting okay so before I get into what",
    "start": "841990",
    "end": "850329"
  },
  {
    "start": "848000",
    "end": "903000"
  },
  {
    "text": "we actually did how we actually contributed so when we before we",
    "start": "850329",
    "end": "857499"
  },
  {
    "text": "actually start the research we stumbled upon many many papers that talked about",
    "start": "857499",
    "end": "864929"
  },
  {
    "text": "this vulnerability lobu time entropy vulnerability on embedded devices but",
    "start": "864929",
    "end": "870990"
  },
  {
    "text": "many papers only postulated that lobu time entropy can result in a practical",
    "start": "870990",
    "end": "876910"
  },
  {
    "text": "low-cost attack and this is where we enter none of them actually presented",
    "start": "876910",
    "end": "882519"
  },
  {
    "text": "this kind of attack so our contribution is we present a practical wrentham on",
    "start": "882519",
    "end": "888399"
  },
  {
    "text": "time and to end attack on this we also formalize the attack and give a measure",
    "start": "888399",
    "end": "893949"
  },
  {
    "text": "of its complexity which can be fine found in the white paper and we demonstrate a proof-of-concept against",
    "start": "893949",
    "end": "900639"
  },
  {
    "text": "current mobile platforms sorry",
    "start": "900639",
    "end": "906959"
  },
  {
    "start": "903000",
    "end": "958000"
  },
  {
    "text": "okay so a teaser what can be achieved using our attack will saying that given",
    "start": "910930",
    "end": "916790"
  },
  {
    "text": "a leak of a value extracted from the new blocking pool I call that they get on a bus function get its bite it random",
    "start": "916790",
    "end": "924860"
  },
  {
    "text": "bytes from the number Kapoor and low boot I'm entropy the state of the random number generator can be predicted or",
    "start": "924860",
    "end": "931640"
  },
  {
    "text": "determined until external entropy is too high until noise from in people is mixed",
    "start": "931640",
    "end": "936920"
  },
  {
    "text": "into the non-blocking pool okay one note",
    "start": "936920",
    "end": "943460"
  },
  {
    "text": "we actually in a white paper we describe a mole in tagaytay attack flow which we",
    "start": "943460",
    "end": "949070"
  },
  {
    "text": "also tackle the the event will input the input pool is mixed into the non-blocking pool so if you are",
    "start": "949070",
    "end": "954800"
  },
  {
    "text": "interested please read the white paper in an attack framework we use the random",
    "start": "954800",
    "end": "961940"
  },
  {
    "start": "958000",
    "end": "1105000"
  },
  {
    "text": "number generator against itself many times the first instance of of this is",
    "start": "961940",
    "end": "968210"
  },
  {
    "text": "what we do with the leak value recall that a leak is just a sequence of random bytes from the non-blocking pool okay so",
    "start": "968210",
    "end": "976730"
  },
  {
    "text": "we call lobu time entropy degenerates the random number generator and the output of the random number generator is",
    "start": "976730",
    "end": "983690"
  },
  {
    "text": "hashed twice using sha-1 shell 1 is the cryptographic hash function and",
    "start": "983690",
    "end": "989890"
  },
  {
    "text": "cryptographic hash functions are designed to be collision resistant meaning that if you wanna crypto got",
    "start": "989890",
    "end": "996620"
  },
  {
    "text": "cryptographic hash functions function on two different inputs it is improbable",
    "start": "996620",
    "end": "1003820"
  },
  {
    "text": "that the output would be the same using",
    "start": "1003820",
    "end": "1008980"
  },
  {
    "text": "that it is highly unlikely that random number generators or non-blocking puts",
    "start": "1008980",
    "end": "1014080"
  },
  {
    "text": "non-blocking pools that are seated with different seeds will result in the same",
    "start": "1014080",
    "end": "1019360"
  },
  {
    "text": "output regardless of the order of extractions so the immediate result of",
    "start": "1019360",
    "end": "1024730"
  },
  {
    "text": "this is that every leak which is just a sequence of an Ombuds form the new blocking poo is almost certainly the",
    "start": "1024730",
    "end": "1031959"
  },
  {
    "text": "offspring of one specific scene with that in mind we can now describe the",
    "start": "1031959",
    "end": "1039069"
  },
  {
    "text": "full attack framework will saying that given a leak from the new blocking pool",
    "start": "1039069",
    "end": "1044620"
  },
  {
    "text": "of the rail under memo generator for example a victim device we could",
    "start": "1044620",
    "end": "1049900"
  },
  {
    "text": "simulate many many offline random number generators with different seeds and compared extractions with an online leak",
    "start": "1049900",
    "end": "1059010"
  },
  {
    "text": "again due to sharon's collision resistant property if one of the simulated random number generators",
    "start": "1059190",
    "end": "1064830"
  },
  {
    "text": "produces a sequence of random bytes that is the same as the leak value we almost certainly found the seed of the victims",
    "start": "1064830",
    "end": "1072730"
  },
  {
    "text": "random number generator of the victims non-blocking poo once we have the seed",
    "start": "1072730",
    "end": "1078640"
  },
  {
    "text": "of the knob lock in pool of the victims under number generator we can produce the same outputs of the real unnormal",
    "start": "1078640",
    "end": "1085480"
  },
  {
    "text": "generator until noise from the input pool is mixed into the non-blocking pool and again in the white pepper we",
    "start": "1085480",
    "end": "1094090"
  },
  {
    "text": "demonstrated a more integrated tack flow which takes the event well input well noise from the input pool is mixed into",
    "start": "1094090",
    "end": "1101050"
  },
  {
    "text": "the normal people if you're interested read it ok so you've seen the itat",
    "start": "1101050",
    "end": "1107530"
  },
  {
    "start": "1105000",
    "end": "1236000"
  },
  {
    "text": "framework we actually faced several problems with it the non-blocking",
    "start": "1107530",
    "end": "1113050"
  },
  {
    "text": "pussied is 8 bytes long and say we consider only the nano second part which",
    "start": "1113050",
    "end": "1118930"
  },
  {
    "text": "is only 4 bytes and assuming that the nanosecond are uniformly distributed we have 30 30 bit of entropy or over 1",
    "start": "1118930",
    "end": "1127120"
  },
  {
    "text": "billion different seed values so essentially we need to simulate over 1",
    "start": "1127120",
    "end": "1133930"
  },
  {
    "text": "billion different random number generators and compares compare the extractions yeah of course this can be",
    "start": "1133930",
    "end": "1142930"
  },
  {
    "text": "done offline with cloud servers oh I don't know some government agency power",
    "start": "1142930",
    "end": "1149340"
  },
  {
    "text": "computation power but we wanted to make a practical low-cost attack on this as",
    "start": "1149340",
    "end": "1155590"
  },
  {
    "text": "we will see an offline study of the",
    "start": "1155590",
    "end": "1161170"
  },
  {
    "text": "device reveals that the actual entropy is less but this is only teaser we'll get to it another problem that we faced",
    "start": "1161170",
    "end": "1168070"
  },
  {
    "text": "is that there is some kind of a hidden entropy sauce which is concurrency the",
    "start": "1168070",
    "end": "1174940"
  },
  {
    "text": "developers of the random number condom number model didn't patil didn't put a lock on the extract",
    "start": "1174940",
    "end": "1182049"
  },
  {
    "text": "and mix function operations of the random number generator so essentially if two threads requests random bytes",
    "start": "1182049",
    "end": "1189549"
  },
  {
    "text": "concurrently the state or the contents of the pool may change anywhere in the",
    "start": "1189549",
    "end": "1195279"
  },
  {
    "text": "middle of the hash computation so this is bad but again as another teaser we",
    "start": "1195279",
    "end": "1200500"
  },
  {
    "text": "will see that there is there is some maybe there is some bias in the",
    "start": "1200500",
    "end": "1205539"
  },
  {
    "text": "concurrency that we can make use of and other two problems is what can actually",
    "start": "1205539",
    "end": "1213490"
  },
  {
    "text": "be attacked we need some early booth service oh that uses randomness because",
    "start": "1213490",
    "end": "1222759"
  },
  {
    "text": "remember that we given a seed we simulate a random number generator on proofs that are generated by the victims",
    "start": "1222759",
    "end": "1229750"
  },
  {
    "text": "on the number generator and another problem is where can we get the leak value so to make things simpler I we",
    "start": "1229750",
    "end": "1241110"
  },
  {
    "start": "1236000",
    "end": "1329000"
  },
  {
    "text": "segmented or divided the boot time line we've seen that concurrency takes place",
    "start": "1241110",
    "end": "1249610"
  },
  {
    "text": "only when the colonel boot is finished we call so the time from the time the",
    "start": "1249610",
    "end": "1255220"
  },
  {
    "text": "colonel booth is finished and onwards we call this concurrency hell another",
    "start": "1255220",
    "end": "1262240"
  },
  {
    "text": "segment is from the time the random number generator module is initialized to the time the colonel finished boot we",
    "start": "1262240",
    "end": "1269289"
  },
  {
    "text": "call this the best leaked target segment why because they then we don't need to",
    "start": "1269289",
    "end": "1276399"
  },
  {
    "text": "take into consideration the concurrency hell 0 noise from the input pool being mixed into the non-blocking pour another",
    "start": "1276399",
    "end": "1283990"
  },
  {
    "text": "segment is what we call the good lick target segment which is from the time",
    "start": "1283990",
    "end": "1289149"
  },
  {
    "text": "the platform starts to boot and the time the noise from the input pool is mixed",
    "start": "1289149",
    "end": "1294309"
  },
  {
    "text": "into the non-blocking pool and the last segment is what we call the bed leak",
    "start": "1294309",
    "end": "1300580"
  },
  {
    "text": "target segment which across from the time the input pool is mixed into the Knobloch people and unloads again this",
    "start": "1300580",
    "end": "1310940"
  },
  {
    "text": "we also made an attack that takes this into consideration so only for the",
    "start": "1310940",
    "end": "1316649"
  },
  {
    "text": "attack at present here this is a bad leak target you can the other number generator is still vulnerable of using",
    "start": "1316649",
    "end": "1324090"
  },
  {
    "text": "leaks and targets from the bed league target segment and other two things so",
    "start": "1324090",
    "end": "1331259"
  },
  {
    "start": "1329000",
    "end": "1349000"
  },
  {
    "text": "leaks or attack targets from the best league target segment we call them a candle boo time leak or a kernel boo",
    "start": "1331259",
    "end": "1338099"
  },
  {
    "text": "time attack target and licks or targets from the good lick target segment we call a platform boot time leak or a",
    "start": "1338099",
    "end": "1344839"
  },
  {
    "text": "platform boot time attack target okay with that in mind we can now we have it",
    "start": "1344839",
    "end": "1352499"
  },
  {
    "start": "1349000",
    "end": "1381000"
  },
  {
    "text": "the theoretic the theory behind our TAC framework we now see how we can actually",
    "start": "1352499",
    "end": "1358379"
  },
  {
    "text": "use it so we'll have some malware which the model has no root exploit don't",
    "start": "1358379",
    "end": "1365969"
  },
  {
    "text": "worry and format malo we'll see how we derive the non-blocking pussied of the",
    "start": "1365969",
    "end": "1371159"
  },
  {
    "text": "random number generator of some victim device and from that seed will see how we reconstruct the pistols cannery value",
    "start": "1371159",
    "end": "1380479"
  },
  {
    "start": "1381000",
    "end": "1503000"
  },
  {
    "text": "okay so just the disclaimer we have nothing against Samsung we love them we",
    "start": "1381169",
    "end": "1387179"
  },
  {
    "text": "just happen to have a device of them okay good so we took our device and we",
    "start": "1387179",
    "end": "1394799"
  },
  {
    "text": "went to do went into the Samsung website and downloaded the colonel we then",
    "start": "1394799",
    "end": "1401339"
  },
  {
    "text": "excessively use the point k command the plenty command is used i cannot develop",
    "start": "1401339",
    "end": "1406889"
  },
  {
    "text": "us to debug the colonel and output from the plane k command is pushed into the",
    "start": "1406889",
    "end": "1413489"
  },
  {
    "text": "kernel ring buffer so in order to find some bias in the seed value we put",
    "start": "1413489",
    "end": "1421589"
  },
  {
    "text": "blinkers on the input and down the not working put seeds in order to find",
    "start": "1421589",
    "end": "1427099"
  },
  {
    "text": "relevant attack clicks or attack targets we put print case commands on the get on",
    "start": "1427099",
    "end": "1433559"
  },
  {
    "text": "and bites function in order to catch some bias in the concurrency we fix the",
    "start": "1433559",
    "end": "1440249"
  },
  {
    "text": "seeds some of the experiments we fix the seeds and we we taste the concurrency and",
    "start": "1440249",
    "end": "1447010"
  },
  {
    "text": "order of extraction we traced the order of extractions from the non-blocking poo",
    "start": "1447010",
    "end": "1455260"
  },
  {
    "text": "so in total we rebooted the device more than 2,000 times each time we dumped the",
    "start": "1455260",
    "end": "1461660"
  },
  {
    "text": "colonel ring buffer to a file so imagine hearing this thing over 2,000 times it",
    "start": "1461660",
    "end": "1471290"
  },
  {
    "text": "haunted us and everyone in the office hated us okay oh yeah yeah well after",
    "start": "1471290",
    "end": "1482890"
  },
  {
    "text": "2,000 samples we actually realize that we have the counter we can just put a",
    "start": "1482890",
    "end": "1489160"
  },
  {
    "text": "comment on this thing but we didn't ok",
    "start": "1489160",
    "end": "1497710"
  },
  {
    "text": "so we hunted with this we continued our work and what we found when we analyzed",
    "start": "1497710",
    "end": "1505790"
  },
  {
    "start": "1503000",
    "end": "1535000"
  },
  {
    "text": "the logs we found a platform boot I'm leak which can be used against a",
    "start": "1505790",
    "end": "1511460"
  },
  {
    "text": "platform boot time attack target the plot on buitin leaks is form the",
    "start": "1511460",
    "end": "1519710"
  },
  {
    "text": "androids posts creation model application process crashing model which is not as the post crashing model so",
    "start": "1519710",
    "end": "1526850"
  },
  {
    "text": "annoyed designers chose to spawn every application process by foking in master",
    "start": "1526850",
    "end": "1532040"
  },
  {
    "text": "poses desire bosses zygote is brought up by in it so it's doing platform boot I'm",
    "start": "1532040",
    "end": "1539120"
  },
  {
    "start": "1535000",
    "end": "1586000"
  },
  {
    "text": "and is and exit click recall the exact yeah exit mins 69 and bites are",
    "start": "1539120",
    "end": "1546140"
  },
  {
    "text": "extracted from the random number generator placed in the process other space Saget's was other space and are",
    "start": "1546140",
    "end": "1552920"
  },
  {
    "text": "pointed to by the 1800 pointer ok so that the zagat process was spawned using",
    "start": "1552920",
    "end": "1561950"
  },
  {
    "text": "a unix-like traditional process creation model but application processes for",
    "start": "1561950",
    "end": "1567890"
  },
  {
    "text": "example your water poses are created doing the zagat process Cashin model which only folks and master poses",
    "start": "1567890",
    "end": "1575539"
  },
  {
    "text": "what is the exit system call record that the xik is the one who enforces other",
    "start": "1575539",
    "end": "1580759"
  },
  {
    "text": "space layout randomization and the one that assigns to 80 random so all",
    "start": "1580759",
    "end": "1587389"
  },
  {
    "start": "1586000",
    "end": "1654000"
  },
  {
    "text": "applications in other it has the same canary the same 80 random and largely the same other space layout this is a",
    "start": "1587389",
    "end": "1595279"
  },
  {
    "text": "serious vulnerability in other it it is also an oven not vulnerability and there is a great paper called from zygote",
    "start": "1595279",
    "end": "1602269"
  },
  {
    "text": "tumola which is a form some MIT go it is a great read and it offers a mitigations",
    "start": "1602269",
    "end": "1608929"
  },
  {
    "text": "to that problem read it so again we have",
    "start": "1608929",
    "end": "1614330"
  },
  {
    "text": "the zygote master process and we have applications for example what's up or contacts the water or contacts",
    "start": "1614330",
    "end": "1622129"
  },
  {
    "text": "application like every other application share the same 80 random as zygotes",
    "start": "1622129",
    "end": "1628519"
  },
  {
    "text": "because the exact system call is never used so what if we just have another",
    "start": "1628519",
    "end": "1633799"
  },
  {
    "text": "process which just looks on its own 80 random this is the only thing that our",
    "start": "1633799",
    "end": "1640940"
  },
  {
    "text": "model is doing it looks only in its own on its own 18 Adam and sends it to some",
    "start": "1640940",
    "end": "1646429"
  },
  {
    "text": "cloud service which computes the seed of the victim device okay so this i got is",
    "start": "1646429",
    "end": "1656779"
  },
  {
    "start": "1654000",
    "end": "1687000"
  },
  {
    "text": "i got 18 animas a leak it's a platform boot I'm leak which means that it occurs",
    "start": "1656779",
    "end": "1661820"
  },
  {
    "text": "in the concurrency health phase we must a concurrency into consideration an",
    "start": "1661820",
    "end": "1668239"
  },
  {
    "text": "offline study of the samples revealed bias toward a specific extraction path",
    "start": "1668239",
    "end": "1673460"
  },
  {
    "text": "or extraction order of extractions from the non-blocking pool what we've seen is",
    "start": "1673460",
    "end": "1679849"
  },
  {
    "text": "that twenty percent of the samples had zygotes 80 random bytes somewhere in the",
    "start": "1679849",
    "end": "1685039"
  },
  {
    "text": "extraction path this means that given a leak given zygotes 80 random and",
    "start": "1685039",
    "end": "1691519"
  },
  {
    "text": "assuming we try all possible to to the 30 possible seeds the chance to find the",
    "start": "1691519",
    "end": "1697009"
  },
  {
    "text": "seed of the random number generator is one-fifth okay but even more than that",
    "start": "1697009",
    "end": "1705259"
  },
  {
    "text": "i'll often in study revealed that the actual Shannon entropy of the the enthalpy of the non-blocking",
    "start": "1705259",
    "end": "1712340"
  },
  {
    "text": "pussied is much less than what we estimated we estimated it to be 30 bit it is actually much less it is around 24",
    "start": "1712340",
    "end": "1720409"
  },
  {
    "text": "bits just to give you the proportions 30 bit of entropy means that there are",
    "start": "1720409",
    "end": "1727279"
  },
  {
    "text": "other a billion different values of the seed of the no blocking poo and 24 bits",
    "start": "1727279",
    "end": "1733370"
  },
  {
    "text": "means that only about 7 million different seeds needs to take we need to",
    "start": "1733370",
    "end": "1741169"
  },
  {
    "text": "take into consideration what 16 and run it up okay over 16 million okay yes and",
    "start": "1741169",
    "end": "1751539"
  },
  {
    "text": "what and even more we also found that what you see here is a probability mass",
    "start": "1751539",
    "end": "1757880"
  },
  {
    "text": "function of the ranges of seeds and we see that the are some seeds are more",
    "start": "1757880",
    "end": "1765620"
  },
  {
    "text": "probable than others so we can actually optimize our attack out we can optimize",
    "start": "1765620",
    "end": "1772760"
  },
  {
    "text": "the process where we find where we simulate random number generators with different seeds we can just take from",
    "start": "1772760",
    "end": "1779630"
  },
  {
    "text": "the range the range is the most more probable and use them first okay so now",
    "start": "1779630",
    "end": "1789620"
  },
  {
    "start": "1789000",
    "end": "1828000"
  },
  {
    "text": "we've got the seed and we are we looked",
    "start": "1789620",
    "end": "1796039"
  },
  {
    "text": "at the early boot services because most of them of them use the takes use the",
    "start": "1796039",
    "end": "1803240"
  },
  {
    "text": "economic value and given a seed the probability of finding a cannery of",
    "start": "1803240",
    "end": "1809000"
  },
  {
    "text": "early boot service is provided in this in this table so as you can see some of",
    "start": "1809000",
    "end": "1814789"
  },
  {
    "text": "them some of the early boot processes we can actually with one hundred percent",
    "start": "1814789",
    "end": "1819970"
  },
  {
    "text": "find the candidate value but the Keystone is a 16 106 percent so in total",
    "start": "1819970",
    "end": "1828590"
  },
  {
    "start": "1828000",
    "end": "1895000"
  },
  {
    "text": "given zygotes 81 them the probability of guessing the Keystone's Kennedy value is",
    "start": "1828590",
    "end": "1833659"
  },
  {
    "text": "1 over 100 which is one percent so imagine every 100 boots that a device",
    "start": "1833659",
    "end": "1842480"
  },
  {
    "text": "performs we are if you believe in probability we can find the Keystone Kennedy value so",
    "start": "1842480",
    "end": "1849890"
  },
  {
    "text": "if our model goes viral one percent of",
    "start": "1849890",
    "end": "1855830"
  },
  {
    "text": "all devices that are infected will probably yield we can probably guess",
    "start": "1855830",
    "end": "1861140"
  },
  {
    "text": "correctly the candidate value of the Keystone but remember where we came from we needed to guess 32 on the bits just",
    "start": "1861140",
    "end": "1870110"
  },
  {
    "text": "to give you how to show you how how how much are how the mattock is our",
    "start": "1870110",
    "end": "1878210"
  },
  {
    "text": "reduction this is the probability of finding a guess incorrectly 32 bits set",
    "start": "1878210",
    "end": "1885230"
  },
  {
    "text": "32 bits so as you can see this is a dramatic reduction hey with that in mind",
    "start": "1885230",
    "end": "1892280"
  },
  {
    "text": "we now continue to the demo to the Tom",
    "start": "1892280",
    "end": "1898000"
  },
  {
    "start": "1895000",
    "end": "2077000"
  },
  {
    "text": "ok so the 18 random X 2 third 0 is just a simple application which sends the 80",
    "start": "1898000",
    "end": "1905630"
  },
  {
    "text": "random to a cloud service ok so let's stop ok what you see here is the 18",
    "start": "1905630",
    "end": "1914000"
  },
  {
    "text": "annum of the process which is actually zygotes at random and in the IP just the",
    "start": "1914000",
    "end": "1919370"
  },
  {
    "text": "IBM cloud server",
    "start": "1919370",
    "end": "1922540"
  },
  {
    "text": "we're sending it got into the cloud service and we are we initialize many a",
    "start": "1929850",
    "end": "1938710"
  },
  {
    "text": "worker threads that simulate on the memo generators in we hope to find the seed",
    "start": "1938710",
    "end": "1947520"
  },
  {
    "text": "good as you can see we found the seed of the victims device random the Knobloch",
    "start": "1958669",
    "end": "1964909"
  },
  {
    "text": "input seed of the victims device under number generator with that on the left",
    "start": "1964909",
    "end": "1971149"
  },
  {
    "text": "you see the real crystal candy it was obtained using an instrumentation just",
    "start": "1971149",
    "end": "1976700"
  },
  {
    "text": "we print k they get on a bus function on the Keystone process and we just saw the",
    "start": "1976700",
    "end": "1982999"
  },
  {
    "text": "four most significant bites you can also a you know yeah entirely correct yeah of",
    "start": "1982999",
    "end": "2039549"
  },
  {
    "text": "course we took in the white pepper way yeah okay good so with the seed value we",
    "start": "2039549",
    "end": "2046330"
  },
  {
    "text": "got to see value recall and we simulate many random number generators and recall",
    "start": "2046330",
    "end": "2051460"
  },
  {
    "text": "that we have a probability of fine and six percent of 6 101 hundred and we find",
    "start": "2051460",
    "end": "2057658"
  },
  {
    "text": "the canary value yeah yeah okay",
    "start": "2057659",
    "end": "2062940"
  },
  {
    "text": "right so we found the kind of value and are you you've been shown you a",
    "start": "2066550",
    "end": "2074540"
  },
  {
    "text": "probabilistic attack on this we now turn to the second attack vector which is a",
    "start": "2074540",
    "end": "2081730"
  },
  {
    "start": "2077000",
    "end": "2123000"
  },
  {
    "text": "cat which some of it is a deterministic attack on this use a simple emil ping 6",
    "start": "2081730",
    "end": "2087530"
  },
  {
    "text": "to get the non-blocking pussied of the",
    "start": "2087530",
    "end": "2093230"
  },
  {
    "text": "random number generator of some device and from that we can make some we can",
    "start": "2093230",
    "end": "2100090"
  },
  {
    "text": "attack some we can make ipv6 violent ejection or guessing the key so can I",
    "start": "2100090",
    "end": "2105740"
  },
  {
    "text": "value ok so again we again we have nothing personal guest again something",
    "start": "2105740",
    "end": "2112340"
  },
  {
    "text": "we just happen to have another device of them we little dit with pin Ches and we",
    "start": "2112340",
    "end": "2118550"
  },
  {
    "text": "fix the seeds and again haunted with the sound when we analyzed the logs what",
    "start": "2118550",
    "end": "2127580"
  },
  {
    "start": "2123000",
    "end": "2136000"
  },
  {
    "text": "we've seen is that there is a kernel boot time leak that can be used to attack a kernel boot time target while",
    "start": "2127580",
    "end": "2138589"
  },
  {
    "start": "2136000",
    "end": "2292000"
  },
  {
    "text": "the colonel is brought up and ipv6 model is being a national initialized and extract 400 bites from the random number",
    "start": "2138589",
    "end": "2146210"
  },
  {
    "text": "generator so it's a kernel boot time lick recall ok we call the these sound bites and when we audited the kernel",
    "start": "2146210",
    "end": "2154730"
  },
  {
    "text": "code of the s2 device of Android 4.1 4.2",
    "start": "2154730",
    "end": "2159970"
  },
  {
    "text": "we've seen that the ipv6 fragment identifier is computed by a deterministic function f and the",
    "start": "2159970",
    "end": "2168589"
  },
  {
    "text": "function is irrelevant because we can just take it from the from the county code but what is relevant is the inputs",
    "start": "2168589",
    "end": "2176060"
  },
  {
    "text": "and outputs of this function so the first input is the land which is just a",
    "start": "2176060",
    "end": "2182240"
  },
  {
    "text": "foreign bytes that are extracted doing colonel boo time and another input is the ipv6 destination address of the",
    "start": "2182240",
    "end": "2190099"
  },
  {
    "text": "packet so when an IP fragment is ipv6",
    "start": "2190099",
    "end": "2196160"
  },
  {
    "text": "fragment is constructed it is being sent from a sender to",
    "start": "2196160",
    "end": "2201820"
  },
  {
    "text": "receiver so this is the address of the receiver and the output of this",
    "start": "2201820",
    "end": "2207790"
  },
  {
    "text": "deterministic function is the ipv6 fragment ID d'appel the ipv6 destination",
    "start": "2207790",
    "end": "2217180"
  },
  {
    "text": "others and the ipv6 fragment ID is our leak why because I'll because we can",
    "start": "2217180",
    "end": "2229200"
  },
  {
    "text": "because our land was extracted during",
    "start": "2229200",
    "end": "2234400"
  },
  {
    "text": "the colonel boot time we can it is the camera concurrency doesn't take place",
    "start": "2234400",
    "end": "2240609"
  },
  {
    "text": "during this time we can simulate many random number generators up to that land value and feed it into the deterministic",
    "start": "2240609",
    "end": "2247570"
  },
  {
    "text": "function f yeah right I think it's not",
    "start": "2247570",
    "end": "2259810"
  },
  {
    "text": "actually I think that if you have the same inputs it has some counter and it's",
    "start": "2259810",
    "end": "2266260"
  },
  {
    "text": "in the in the kernel and so fuggin tidies are never I think in this kernel",
    "start": "2266260",
    "end": "2275260"
  },
  {
    "text": "version it was only incremented I want each time yep okay so but we call that",
    "start": "2275260",
    "end": "2284470"
  },
  {
    "text": "the inputs of the F function is also at the ipv6 destination others so we need",
    "start": "2284470",
    "end": "2291280"
  },
  {
    "text": "some clever way getting that others with that in mind a brief overview of ipv6",
    "start": "2291280",
    "end": "2298510"
  },
  {
    "start": "2292000",
    "end": "2364000"
  },
  {
    "text": "segmentation and ICP v6 echo request so IP packets that exceeds the path MTU the",
    "start": "2298510",
    "end": "2304960"
  },
  {
    "text": "path maximum transmission unit are divided into fragments which are then sent and then we assembled by the",
    "start": "2304960",
    "end": "2311710"
  },
  {
    "text": "receiver each fragment of the packet contains the same fragment ID which is",
    "start": "2311710",
    "end": "2318160"
  },
  {
    "text": "used by the receiver to identify fragments of a particular packet sorry",
    "start": "2318160",
    "end": "2324839"
  },
  {
    "text": "but the problem ipv6 fragmentation doesn't happen very often we need to",
    "start": "2324839",
    "end": "2331180"
  },
  {
    "text": "make it happen so pink six is the same utility you know",
    "start": "2331180",
    "end": "2336470"
  },
  {
    "text": "of ipv4 the pink natok utility is utility for sending an icmpv6 echo",
    "start": "2336470",
    "end": "2343160"
  },
  {
    "text": "request which requires the target to send icmp echo applies with the same",
    "start": "2343160",
    "end": "2348740"
  },
  {
    "text": "exact data so if we send an ICMP echo",
    "start": "2348740",
    "end": "2354470"
  },
  {
    "text": "request with data larger than the path maximum transmission needed we will actually make the receiver send the",
    "start": "2354470",
    "end": "2361579"
  },
  {
    "text": "fragmented apply with that in mind we now a described scenario so we are in",
    "start": "2361579",
    "end": "2369859"
  },
  {
    "start": "2364000",
    "end": "2453000"
  },
  {
    "text": "the Amsterdam Schiphol Airport and our attacker a comes and he installs a",
    "start": "2369859",
    "end": "2376640"
  },
  {
    "text": "malicious Wi-Fi hotspot called skipper skipper 3 our victim V once free",
    "start": "2376640",
    "end": "2386390"
  },
  {
    "text": "internet connectivity doesn't want to pay much money to is a service provider so he connects this schiphol free SSID",
    "start": "2386390",
    "end": "2395349"
  },
  {
    "text": "then the only thing our attacker is doing is sending a fog method icmpv6",
    "start": "2395349",
    "end": "2400670"
  },
  {
    "text": "echo request which usually make the",
    "start": "2400670",
    "end": "2405770"
  },
  {
    "text": "victim send a fragmented ICMP echo reply",
    "start": "2405770",
    "end": "2411760"
  },
  {
    "text": "so now the victim be computed the ipv6",
    "start": "2411760",
    "end": "2417460"
  },
  {
    "text": "fragment ID with the attackers ipv6 sauce others they call that the",
    "start": "2417460",
    "end": "2423440"
  },
  {
    "text": "attackers sauce others is the victims destination others on its echo reply so",
    "start": "2423440",
    "end": "2430609"
  },
  {
    "text": "our tackle a knows the ipv6 fragment ID and the ipv6 destination Alice which is",
    "start": "2430609",
    "end": "2437930"
  },
  {
    "text": "great because now we can actually compute we can actually turn on many",
    "start": "2437930",
    "end": "2445279"
  },
  {
    "text": "similar than internal generators with different seeds and compared with the leak value what we found that the s2",
    "start": "2445279",
    "end": "2454309"
  },
  {
    "start": "2453000",
    "end": "2527000"
  },
  {
    "text": "device was quite alarming what you've seen is that the actual entropy of the non-blocking proceed is way less than 30",
    "start": "2454309",
    "end": "2462770"
  },
  {
    "text": "bit it's only 19 bits which is above 500 different seed options correct",
    "start": "2462770",
    "end": "2474140"
  },
  {
    "text": "okay 500,000 betta options so again so the immensity of this we estimated that",
    "start": "2474140",
    "end": "2481390"
  },
  {
    "text": "the entropy of the nanoseconds would be 30 bit over 1 1,000,000,000 okay and",
    "start": "2481390",
    "end": "2488210"
  },
  {
    "text": "then we are on the s4 device we found that the entropy is 24 bits which is",
    "start": "2488210",
    "end": "2494509"
  },
  {
    "text": "over 16 million different seed options and then on the s2 device we found that",
    "start": "2494509",
    "end": "2501049"
  },
  {
    "text": "the entropy of the non-blocking proceed is way less than that only five hundred",
    "start": "2501049",
    "end": "2507160"
  },
  {
    "text": "thousand different seed values so this attack can be done almost in real time",
    "start": "2507160",
    "end": "2513259"
  },
  {
    "text": "it's a verb and we also found that the r-mo problem some of the ranges of the",
    "start": "2513259",
    "end": "2520309"
  },
  {
    "text": "seeds are more probable than the other so we can actually even optimize it further okay so given the seed what can",
    "start": "2520309",
    "end": "2529430"
  },
  {
    "start": "2527000",
    "end": "2569000"
  },
  {
    "text": "we actually attack we could use we can make an ipv6 five-minute injection we",
    "start": "2529430",
    "end": "2535339"
  },
  {
    "text": "can derive the exact fragment ID which will be used for any destination others by the device we didn't find many use",
    "start": "2535339",
    "end": "2545329"
  },
  {
    "text": "cases for this we can only maybe inject some data or some dos attack the other",
    "start": "2545329",
    "end": "2551900"
  },
  {
    "text": "thing is that the candidate value of early boot process process can be guests",
    "start": "2551900",
    "end": "2559460"
  },
  {
    "text": "also so for instance with the probability of fun in 20 we can compute",
    "start": "2559460",
    "end": "2564950"
  },
  {
    "text": "the key stores canary value given the seed and other other early boot services",
    "start": "2564950",
    "end": "2572630"
  },
  {
    "text": "that we can guess correctly the canary value are presented in this table okay",
    "start": "2572630",
    "end": "2582400"
  },
  {
    "start": "2591000",
    "end": "2708000"
  },
  {
    "text": "so some color mitigations that are used in new devices so one mitigation is to",
    "start": "2591710",
    "end": "2600840"
  },
  {
    "text": "save entropy across boots which means that on shut down random number random",
    "start": "2600840",
    "end": "2607770"
  },
  {
    "text": "bytes are extracted from the random number generator I'll placed somewhere in the file system and then on startup",
    "start": "2607770",
    "end": "2616610"
  },
  {
    "text": "this file is injected into the pools of the random number generator now this",
    "start": "2616610",
    "end": "2625920"
  },
  {
    "text": "mitigation depends on that the file system must be mounted which means it",
    "start": "2625920",
    "end": "2631260"
  },
  {
    "text": "must occur during the platform boot time we'll get to why this is a problem and",
    "start": "2631260",
    "end": "2637100"
  },
  {
    "text": "also an attacker piant could make the device shut down before the input pool",
    "start": "2637100",
    "end": "2644730"
  },
  {
    "text": "is mixed into the non-blocking pool so actually this file may be also a vulnerable to low boot time attacks",
    "start": "2644730",
    "end": "2651410"
  },
  {
    "text": "another another mitigation is a trusted external entropy injection for example",
    "start": "2651410",
    "end": "2658859"
  },
  {
    "text": "form a network service or random.org or Ubuntu's pollinates server service the",
    "start": "2658859",
    "end": "2666780"
  },
  {
    "text": "problem with this one is that it depends on the network stock being initialized and that and some cryptographic",
    "start": "2666780",
    "end": "2677150"
  },
  {
    "text": "protocols that are available in during the platform boot time for example it",
    "start": "2678290",
    "end": "2683640"
  },
  {
    "text": "uses ssl certificate pinning the problem with this kind of mitigation is that",
    "start": "2683640",
    "end": "2690450"
  },
  {
    "text": "what they're saying actually that there is some external entropy entropy and they inject it during the platform boot",
    "start": "2690450",
    "end": "2698700"
  },
  {
    "text": "time but what if we have a kernel boot I'm leak and the caribou time target this this mitigation doesn't help us",
    "start": "2698700",
    "end": "2707990"
  },
  {
    "start": "2708000",
    "end": "2827000"
  },
  {
    "text": "recall that another mitigation is to initialize the seeds using a hard R",
    "start": "2708859",
    "end": "2714570"
  },
  {
    "text": "random number generator they call that what made our can vary a low-cost and efficient is",
    "start": "2714570",
    "end": "2721960"
  },
  {
    "text": "that the actual entropy of the seeds of the pools was very low so but if they're",
    "start": "2721960",
    "end": "2730870"
  },
  {
    "text": "full 8 bytes of the random number generator that blocking of the pools of the random number generator are seeded",
    "start": "2730870",
    "end": "2737230"
  },
  {
    "text": "by 200 number generator which is provided by the harbor unless this",
    "start": "2737230",
    "end": "2742990"
  },
  {
    "text": "Hardware random number generator is compromised by some government agency we can the entropy is increased",
    "start": "2742990",
    "end": "2750490"
  },
  {
    "text": "dramatically of the seeds of the pores so it will be very hard to conduct our",
    "start": "2750490",
    "end": "2756430"
  },
  {
    "text": "attack but is it may still be feasible but will take a lot of time exactly you",
    "start": "2756430",
    "end": "2772600"
  },
  {
    "text": "could think of some good rainbow table for this baby but okay you're back okay",
    "start": "2772600",
    "end": "2781360"
  },
  {
    "text": "so another mitigation is to mix device specific data to the pools for example",
    "start": "2781360",
    "end": "2787420"
  },
  {
    "text": "the posts are cheap ID it will make the the we make the life of the attacker",
    "start": "2787420",
    "end": "2794200"
  },
  {
    "text": "very difficult because he needs no to guess some specific values of the device",
    "start": "2794200",
    "end": "2800290"
  },
  {
    "text": "and finally in newell kernels the even",
    "start": "2800290",
    "end": "2805510"
  },
  {
    "text": "more mitigations that allows for more butta mental p on devices with low boot I'm entropy we didn't get into them",
    "start": "2805510",
    "end": "2812500"
  },
  {
    "text": "because it requires some inner most a more deep overview of how the random",
    "start": "2812500",
    "end": "2820090"
  },
  {
    "text": "number generator works but you can find relevant information on them in our paper okay talk wrap up so we we found",
    "start": "2820090",
    "end": "2830560"
  },
  {
    "start": "2827000",
    "end": "2877000"
  },
  {
    "text": "that linux based devices with low boot I'm entropy melo a practical low-cost",
    "start": "2830560",
    "end": "2835840"
  },
  {
    "text": "attack on the random number generator the attack requires and often study of the device and an online leak and allows",
    "start": "2835840",
    "end": "2843070"
  },
  {
    "text": "the attacker to predict the random number which is generated by the victims son de novo generator we've seen two",
    "start": "2843070",
    "end": "2848950"
  },
  {
    "text": "manifestations of this attack framework one which is probabilistic and requires some local presence in the device and",
    "start": "2848950",
    "end": "2855270"
  },
  {
    "text": "another manifestation which is a remote which can be employed remotely but which",
    "start": "2855270",
    "end": "2861760"
  },
  {
    "text": "is deterministic but can also we can also guess the canary value of early boot process processes with someone with",
    "start": "2861760",
    "end": "2869320"
  },
  {
    "text": "some probability finally we've seen some mitigation and how some of them might not be as good as they seem to be thank",
    "start": "2869320",
    "end": "2878680"
  },
  {
    "text": "you for listening and attending yes",
    "start": "2878680",
    "end": "2891070"
  },
  {
    "text": "please yeah of course but we call that",
    "start": "2891070",
    "end": "2909030"
  },
  {
    "text": "you need that driver of your of your of your RF to be initialized before it will",
    "start": "2909030",
    "end": "2918790"
  },
  {
    "text": "be initialized after the kernel driver of the after the random number generator",
    "start": "2918790",
    "end": "2925480"
  },
  {
    "text": "model is initialized so in the time gap between the when the random number generator is initialized to the time the",
    "start": "2925480",
    "end": "2932170"
  },
  {
    "text": "art of model of a civilized initialized it may be still be run up yeah yeah you",
    "start": "2932170",
    "end": "2951790"
  },
  {
    "text": "are right that in the s4 attack you're at do if you have a platform boot I'm",
    "start": "2951790",
    "end": "2957760"
  },
  {
    "text": "leak and a platform boot time attack target the new method is correct but as I've said as I've shown here this is the",
    "start": "2957760",
    "end": "2967030"
  },
  {
    "text": "same problem but just that if you have a caribou time lichte and Colonel gutom",
    "start": "2967030",
    "end": "2973660"
  },
  {
    "text": "target your method can be silly Vytas",
    "start": "2973660",
    "end": "2978329"
  },
  {
    "start": "2982000",
    "end": "3431000"
  },
  {
    "text": "exactly exactly but we've seen that there is some talk on the Linux kernel",
    "start": "2984380",
    "end": "2990019"
  },
  {
    "text": "developers forms that they actually want to inject entropy to the pools during",
    "start": "2990019",
    "end": "2995789"
  },
  {
    "text": "the bootloader time so we'll see where it develops yeah exactly of course yes",
    "start": "2995789",
    "end": "3009140"
  },
  {
    "text": "please yeah",
    "start": "3009140",
    "end": "3014380"
  },
  {
    "text": "yeah it may affect they compare the",
    "start": "3047349",
    "end": "3072200"
  },
  {
    "text": "computation time but what we've seen in New York illness that the actual function is is way a way it's not that",
    "start": "3072200",
    "end": "3081500"
  },
  {
    "text": "at a monistic it depends on random bytes that are extracted there on time of the",
    "start": "3081500",
    "end": "3086930"
  },
  {
    "text": "fog medication fun event a dictation of",
    "start": "3086930",
    "end": "3092359"
  },
  {
    "text": "course yeah",
    "start": "3092359",
    "end": "3105400"
  },
  {
    "text": "say that the entropy and the file system that i was thinking is neatly reboots the memories not being clear so if you",
    "start": "3110140",
    "end": "3118670"
  },
  {
    "text": "would store the entropy and on location of the memory retrieve it this is a very",
    "start": "3118670",
    "end": "3126650"
  },
  {
    "text": "good point what we've seen is that on some okay so when the pools are defined",
    "start": "3126650",
    "end": "3134690"
  },
  {
    "text": "that are defined using a static see directive and they are not initialized",
    "start": "3134690",
    "end": "3143210"
  },
  {
    "text": "with deals with 0 so if in memory the pages that were allocated a so on",
    "start": "3143210",
    "end": "3151460"
  },
  {
    "text": "specific on some specific lumps the app the transistors are in such a way that",
    "start": "3151460",
    "end": "3158500"
  },
  {
    "text": "it will always nullify or make pages",
    "start": "3158500",
    "end": "3163730"
  },
  {
    "text": "data to be 0 but what we've seen is that in some devices the RAM is the ram",
    "start": "3163730",
    "end": "3173750"
  },
  {
    "text": "memory is is of a kind which which if it",
    "start": "3173750",
    "end": "3180800"
  },
  {
    "text": "is not allocated by the random number generator we have some noise and not non deterministic noise that we need to",
    "start": "3180800",
    "end": "3187030"
  },
  {
    "text": "encounter so on some devices this number random this random number generator is",
    "start": "3187030",
    "end": "3193910"
  },
  {
    "text": "very impressible",
    "start": "3193910",
    "end": "3197170"
  },
  {
    "text": "if you think about people do you think about a video in the reboot process the",
    "start": "3204240",
    "end": "3210369"
  },
  {
    "text": "brown is not losing the contents is there it becomes yeah of course is there",
    "start": "3210369",
    "end": "3226480"
  },
  {
    "text": "any way to access later or a minute after the boots tied to access the exact",
    "start": "3226480",
    "end": "3232210"
  },
  {
    "text": "real time clock value because if you could do it be put outside the very",
    "start": "3232210",
    "end": "3237670"
  },
  {
    "text": "precise claw you how much time it passed since boots time until you are allowed",
    "start": "3237670",
    "end": "3245980"
  },
  {
    "text": "to measure and get information you know the pc you're allowed to check what is",
    "start": "3245980",
    "end": "3251830"
  },
  {
    "text": "the cup amenia nanoseconds happened since books time and then you can walk",
    "start": "3251830",
    "end": "3257050"
  },
  {
    "text": "backwards yes we actually searched for",
    "start": "3257050",
    "end": "3269290"
  },
  {
    "text": "this kind of for this kind of thing because it will make our attack first more simple we didn't find any method",
    "start": "3269290",
    "end": "3278050"
  },
  {
    "text": "that we can use yeah the second in a",
    "start": "3278050",
    "end": "3285130"
  },
  {
    "text": "minute okay the seconds we can guess because the second you can just add in a",
    "start": "3285130",
    "end": "3291880"
  },
  {
    "text": "boot the device couple of times and just so see what the second doing when the",
    "start": "3291880",
    "end": "3298089"
  },
  {
    "text": "pools are mixed well the pool are seeded with the time value yes please saw",
    "start": "3298089",
    "end": "3306269"
  },
  {
    "text": "but the same entropy each time you mean",
    "start": "3315720",
    "end": "3321510"
  },
  {
    "text": "um just I don't understand oh no no okay",
    "start": "3328890",
    "end": "3341380"
  },
  {
    "text": "no okay it may be um okay so that's it",
    "start": "3341380",
    "end": "3368109"
  },
  {
    "text": "up one final question this yes",
    "start": "3368109",
    "end": "3375480"
  },
  {
    "text": "yeah okay it's a good question what",
    "start": "3385949",
    "end": "3393880"
  },
  {
    "text": "we've seen is that current cpu manufactures giving an opcode for",
    "start": "3393880",
    "end": "3402130"
  },
  {
    "text": "accessing the tool on the number generator for example there are decedent out of the land comments so essentially",
    "start": "3402130",
    "end": "3407829"
  },
  {
    "text": "you could call use the animal generator",
    "start": "3407829",
    "end": "3412959"
  },
  {
    "text": "with just a simple the hardware random number generator with a simple opcode but this is not very common in today's",
    "start": "3412959",
    "end": "3421449"
  },
  {
    "text": "architectures but in the future maybe ok guys thank you for attending",
    "start": "3421449",
    "end": "3428759"
  }
]