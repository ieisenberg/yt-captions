[
  {
    "text": "as you said this talk is Apple's predicament uh ands predicate exploits on iOS and Mac OS my name is aamit uh I",
    "start": "2560",
    "end": "9360"
  },
  {
    "text": "also go by Alkali all right let's get into it a little bit more about me uh so I'm",
    "start": "9360",
    "end": "15080"
  },
  {
    "text": "currently a vulnerability researcher at Vigilant Labs uh though the research for this talk was done while I was at the",
    "start": "15080",
    "end": "20680"
  },
  {
    "text": "trellix advanced Research Center um I'm also the author of the radius 2 symbolic execution framework uh which uses RAR 2",
    "start": "20680",
    "end": "28080"
  },
  {
    "text": "to quickly and easily perform uh Bic execution and Tain analysis on binaries from many different architectures um so",
    "start": "28080",
    "end": "35000"
  },
  {
    "text": "check that out if it sounds interesting to you um and I'm Aline SEC on Twitter uh I mean X and Alkali infos exchange on",
    "start": "35000",
    "end": "44120"
  },
  {
    "text": "madon all right so on the agenda for today first we're going to talk about why we should care about NS predicates",
    "start": "44120",
    "end": "50000"
  },
  {
    "text": "um and then we're going to cover what an NS pricate actually is uh then I'll discuss the mitigations that Apple has",
    "start": "50000",
    "end": "55879"
  },
  {
    "text": "added to make NS predicates less powerful and how those could be bypassed um we'll go over some of the",
    "start": "55879",
    "end": "62399"
  },
  {
    "text": "vulnerabilities I discovered and exploited in the course of This research uh and finally we'll talk about uh what",
    "start": "62399",
    "end": "67960"
  },
  {
    "text": "can still be done with NS",
    "start": "67960",
    "end": "71118"
  },
  {
    "text": "predicate all right so let's talk about where all this sort of began uh with the forced entry exploit um so I've been",
    "start": "73520",
    "end": "79840"
  },
  {
    "text": "obsessed with NS predicat since I read the the second part of project Zero's blog post about for about the forc entry",
    "start": "79840",
    "end": "85640"
  },
  {
    "text": "attack uh so it was an exploit chain uh targeting iOS that was found in in 2021",
    "start": "85640",
    "end": "91159"
  },
  {
    "text": "in the wild um and so their first post covered the iMessage exploit that sent this fake GIF uh that was actually a PDF",
    "start": "91159",
    "end": "98799"
  },
  {
    "text": "um which exploited an integer overflow in the jbig 2 image compression codec um",
    "start": "98799",
    "end": "103960"
  },
  {
    "text": "it was this absolutely wild incredible exploit uh that used the operations on groups of pixels uh to create an entire",
    "start": "103960",
    "end": "111399"
  },
  {
    "text": "virtual machine um many of you probably know about it um the ultimate purpose of",
    "start": "111399",
    "end": "117200"
  },
  {
    "text": "this virtual machine in this instance was to create and evaluate an NS predicate which sent another NS",
    "start": "117200",
    "end": "122960"
  },
  {
    "text": "predicate to an unsandboxed process um so while the iMessage exploit",
    "start": "122960",
    "end": "130039"
  },
  {
    "text": "received most of the attention rightly so because it was crazy um I was fascinated by the sandbox escape and by",
    "start": "130039",
    "end": "136920"
  },
  {
    "text": "these NS predicates these powerful little strings that defeated all of iOS",
    "start": "136920",
    "end": "142560"
  },
  {
    "text": "security so why was I so fascinated uh the answer is because iOS hacking is is",
    "start": "142560",
    "end": "147640"
  },
  {
    "text": "hard it's very hard um the reason why is they uh have common mitigations like",
    "start": "147640",
    "end": "153160"
  },
  {
    "text": "aslr uh address based layout randomization um though in the case of iOS the aslr is a little bit limited",
    "start": "153160",
    "end": "160319"
  },
  {
    "text": "which we'll get to later um but more importantly iOS has other less common measures like strict code signing uh",
    "start": "160319",
    "end": "166840"
  },
  {
    "text": "which prevents any dynamically generated code from being executed um only code signed with an apple approved",
    "start": "166840",
    "end": "172480"
  },
  {
    "text": "certificate can run these devices in their normal form of operation and every other form of scripting has either been",
    "start": "172480",
    "end": "177879"
  },
  {
    "text": "removed like apple script or been heavily sandboxed like the JavaScript engine um additionally modern iPhones",
    "start": "177879",
    "end": "184720"
  },
  {
    "text": "and Macs have pack or pointer authentication codes um these codes are made up of some of the previously unused",
    "start": "184720",
    "end": "190680"
  },
  {
    "text": "top bits of pointers and special instructions set and check them in order to PR prevent uh code reuse methods like",
    "start": "190680",
    "end": "198120"
  },
  {
    "text": "R return return oriented programming um so if you have a function pointer that's",
    "start": "198120",
    "end": "203239"
  },
  {
    "text": "overwritten on like the stack or the Heap uh those top bits will no longer match their expected value and an",
    "start": "203239",
    "end": "208560"
  },
  {
    "text": "exception will be raised when it's called from one of those special Branch instructions",
    "start": "208560",
    "end": "216280"
  },
  {
    "text": "um finally apps run in a sandbox with permissions restricted to only what the app needs to function uh access to",
    "start": "216360",
    "end": "223599"
  },
  {
    "text": "sensitive content is often done through interprocess communication with more privileged system processes um and all",
    "start": "223599",
    "end": "230439"
  },
  {
    "text": "these things in totality make it very difficult for hackers who really want to find a way to reliably perform arbitrary",
    "start": "230439",
    "end": "237560"
  },
  {
    "text": "operations dynamically um ideally outside of any sandbox and so we'll see",
    "start": "237560",
    "end": "242879"
  },
  {
    "text": "that this is what NS predicates are actually great for so in order to understand a little",
    "start": "242879",
    "end": "249480"
  },
  {
    "text": "bit more about the security on iOS we're going to first have some background in Objective C which is the language that most of the user space code is written",
    "start": "249480",
    "end": "256000"
  },
  {
    "text": "in uh a lot of new code is written in Swift uh there's still the majority of",
    "start": "256000",
    "end": "261239"
  },
  {
    "text": "the shared libraries on the OS are uh Objective C so it's a super set of C",
    "start": "261239",
    "end": "266560"
  },
  {
    "text": "with objectoriented programming Concepts uh added way similar to Small Talk um",
    "start": "266560",
    "end": "271880"
  },
  {
    "text": "it's based on message passing where methods are invoked dynamically at runtime by name uh and these names are",
    "start": "271880",
    "end": "278160"
  },
  {
    "text": "called selectors in the parament of objective c um so methods can be added",
    "start": "278160",
    "end": "283720"
  },
  {
    "text": "and removed at runtime and have their signatures change um it's very Dynamic language and",
    "start": "283720",
    "end": "290680"
  },
  {
    "text": "it's also possible to access properties and call methods without arguments using strings concatenated with periods these",
    "start": "290680",
    "end": "296720"
  },
  {
    "text": "strings are called key paths and they're going to be very important in the context of an predicates as",
    "start": "296720",
    "end": "302120"
  },
  {
    "text": "well so this is like the most basic hello world example uh but it's actually got most of the AR elements we care",
    "start": "302120",
    "end": "308400"
  },
  {
    "text": "about so we can see that there's this NS string which is just the basic mutable string class and we're going to call",
    "start": "308400",
    "end": "313759"
  },
  {
    "text": "string by pending string on it uh the method names are kind of weird because they have like that that argument name",
    "start": "313759",
    "end": "319000"
  },
  {
    "text": "within them um just takes them getting used to uh so we're calling that on the string hello with the argument world uh",
    "start": "319000",
    "end": "325080"
  },
  {
    "text": "to get the Anna string hello world uh then we use the key path string. uppergate string. utf8 string to get a C",
    "start": "325080",
    "end": "330800"
  },
  {
    "text": "string pointer uh which we can print with print F and the ATS in front of the quotes just make an easy way to create",
    "start": "330800",
    "end": "336759"
  },
  {
    "text": "constant and a strings um and similarly similarly other other types like NS arrays and NS dictionaries can be",
    "start": "336759",
    "end": "342600"
  },
  {
    "text": "created with the app sign before brackets all right so we're not slides in and I haven't talked about what the",
    "start": "342600",
    "end": "348720"
  },
  {
    "text": "hell an an predicate is yet uh so let's get into that um the Apple documentation",
    "start": "348720",
    "end": "354680"
  },
  {
    "text": "says that they are a definition of logical conditions for constraining a search for a fetch or for in memory",
    "start": "354680",
    "end": "359840"
  },
  {
    "text": "filtering uh this definition like kind of sucks uh they're just strings that are used to filter objects and arrays um",
    "start": "359840",
    "end": "368080"
  },
  {
    "text": "so if you had like a student object you might select students in Array with predicate with a predicate like grade",
    "start": "368080",
    "end": "373199"
  },
  {
    "text": "equal 7 or first name like ju and h less than 16 uh these strings are actually",
    "start": "373199",
    "end": "378960"
  },
  {
    "text": "format strings so you can use percent uh percent escaped strings like percent sign D to include a number that is",
    "start": "378960",
    "end": "385520"
  },
  {
    "text": "passed to predicate with format in order to initialize an an predicate uh and they Implement uh NS coding which just",
    "start": "385520",
    "end": "392039"
  },
  {
    "text": "means that they can be serialized um and sent over inter interprocess",
    "start": "392039",
    "end": "397360"
  },
  {
    "text": "communication to other processes or completely remotely to other devices um and they are ubiquitous on iOS and Mac",
    "start": "397360",
    "end": "404560"
  },
  {
    "text": "OS uh first party and third party libraries and apps uh and his predicates are",
    "start": "404560",
    "end": "411199"
  },
  {
    "text": "everywhere to expand on the the last point a little bit uh we should discuss xpc it's a common form of interprocess",
    "start": "411319",
    "end": "418400"
  },
  {
    "text": "communication where one process can call methods on a remote object in another process um when xbc is used to call a",
    "start": "418400",
    "end": "425879"
  },
  {
    "text": "remote method the arguments are passed by the sender and they're serialized or archived as it's known on iOS Mac OS and",
    "start": "425879",
    "end": "432639"
  },
  {
    "text": "sent to the Target where they are deserialized um it's common to see NS predicate arguments used to filter the",
    "start": "432639",
    "end": "438080"
  },
  {
    "text": "results of one of these remote calls in order to minimize the number of objects that need to be serialized by that",
    "start": "438080",
    "end": "444039"
  },
  {
    "text": "Target process and then deserialized when the receiver gets them um this is foreshadowing uh just in case it was not",
    "start": "444039",
    "end": "450680"
  },
  {
    "text": "already abundantly clear um it's going to be very important that NS predicates are sent around via uh via",
    "start": "450680",
    "end": "457800"
  },
  {
    "text": "xpc um so here's just a small example of an NS predicate in action um we're taking an array that contains some like",
    "start": "457879",
    "end": "464080"
  },
  {
    "text": "file names and we use the predicate path extension equals pi to to filter out the",
    "start": "464080",
    "end": "469240"
  },
  {
    "text": "one that's python uh the resulting array contains that single entry script. Pi so",
    "start": "469240",
    "end": "474280"
  },
  {
    "text": "that's just kind of a typical usage of of an as predicate for just filtering",
    "start": "474280",
    "end": "480800"
  },
  {
    "text": "arrays so to get a little bit better understanding of what's going on within a predicate um the NS predicate string",
    "start": "480800",
    "end": "486159"
  },
  {
    "text": "is parsed by code generated with flex in the foundation framework um it's parsed into piece that's called uh NS",
    "start": "486159",
    "end": "492360"
  },
  {
    "text": "expressions and NS predicate operators uh in this example from code colorist um a predicate named name equals Apple um",
    "start": "492360",
    "end": "500280"
  },
  {
    "text": "is pared into three pieces uh NS keyth expression name um the equals equals NS",
    "start": "500280",
    "end": "506400"
  },
  {
    "text": "equality predicate operator and a constant uh value expression containing the constant and a string",
    "start": "506400",
    "end": "512399"
  },
  {
    "text": "Apple can see that yeah um the key path expression is also a function expression",
    "start": "512399",
    "end": "517800"
  },
  {
    "text": "so it can be further broken down into an operand self showing that it acts on the objects being filtered uh the selector",
    "start": "517800",
    "end": "524120"
  },
  {
    "text": "which is value for key and the key path specifier which is just name in this case um this is all a bit complicated",
    "start": "524120",
    "end": "531519"
  },
  {
    "text": "but it's not really necessary to fully understand this like as structure um more important for us is the question of",
    "start": "531519",
    "end": "536760"
  },
  {
    "text": "what can an NS pred NS predicate do and the answer to that question is",
    "start": "536760",
    "end": "541959"
  },
  {
    "text": "anything um sort of uh it used to be anything now there's a big asteris since",
    "start": "541959",
    "end": "547560"
  },
  {
    "text": "Apple has taken many steps to make NS predicates uh much less powerful much less useful for exploits um in fact",
    "start": "547560",
    "end": "553600"
  },
  {
    "text": "nearly all the techniques I'm going to talk about today no longer work as they're being presented um some of them work with some tweaks um but let's just",
    "start": "553600",
    "end": "561839"
  },
  {
    "text": "take a look at n prates as they were and at the limits of what could be done with them so while first glance uh and it's",
    "start": "561839",
    "end": "569560"
  },
  {
    "text": "did not look interesting they're actually a powerful scripting language",
    "start": "569560",
    "end": "575160"
  },
  {
    "text": "um so as code colorist said in his blog post you know eval um and his predicates are essentially the eval function for",
    "start": "575160",
    "end": "581320"
  },
  {
    "text": "objective c kind of like the eval function in JavaScript or python um so the scripting capability is is due in",
    "start": "581320",
    "end": "588079"
  },
  {
    "text": "large part to the function keyword which allows any method to be called on an object with any number of arbitrary",
    "start": "588079",
    "end": "594079"
  },
  {
    "text": "arguments um code colorist also discovered that the cast keyword just another expression uh in a predicate uh",
    "start": "594079",
    "end": "601120"
  },
  {
    "text": "this cast keyword could be used with class as the second argument to get a reference to any class essentially functioning like NS class from string if",
    "start": "601120",
    "end": "607680"
  },
  {
    "text": "you've done Objective C program so an interesting thing is that",
    "start": "607680",
    "end": "613920"
  },
  {
    "text": "this functionality is both intended and quite old um function Expressions were added in Mac OS 10.5 around the Year",
    "start": "613920",
    "end": "619760"
  },
  {
    "text": "2007 which means they've been in iOS since the very beginning so there this Dynamic code was possible this entire",
    "start": "619760",
    "end": "628200"
  },
  {
    "text": "time um and this is the official Apple documentation showing how to use function Expressions so it's not like",
    "start": "628200",
    "end": "634560"
  },
  {
    "text": "they were secret or anything um with the cast class trick it was",
    "start": "634560",
    "end": "641200"
  },
  {
    "text": "possible to to use helpful classes like CN file Services which had this uh DL",
    "start": "641200",
    "end": "646560"
  },
  {
    "text": "Sim method uh to get the pack signed address of any exported function um so",
    "start": "646560",
    "end": "652519"
  },
  {
    "text": "just to recap Little but you know that's the pointer authentication codes we can get the correct upper bits using uh this",
    "start": "652519",
    "end": "658000"
  },
  {
    "text": "DL Sim method um and these addresses could be called with n invocation which has a method uh",
    "start": "658000",
    "end": "663639"
  },
  {
    "text": "invoke using imp um and that could be used to call the function with any number of arbitrary arguments uh",
    "start": "663639",
    "end": "670200"
  },
  {
    "text": "effectively now both the objectoriented methods of objective c we can call with",
    "start": "670200",
    "end": "675519"
  },
  {
    "text": "the the function expressions and then we can use this trick to call any you know simple C uh exported functions without",
    "start": "675519",
    "end": "682560"
  },
  {
    "text": "restriction so this means that anything that could be done in an Objective C program could be accomplished completely",
    "start": "682560",
    "end": "688360"
  },
  {
    "text": "dynamically within an Anis predicate completely sidest stepping aslr code signing and pack uh it was",
    "start": "688360",
    "end": "696839"
  },
  {
    "text": "beautiful uh so until now the only predicates that we have seen have been like first name equals Swan so it's",
    "start": "696839",
    "end": "702360"
  },
  {
    "text": "understandable if you are very confused about uh how NS predicates can be used as a scripting language um but it turns",
    "start": "702360",
    "end": "708240"
  },
  {
    "text": "out this the syntax of NS predicate is actually surpris surprisingly rich and capable of representing all the concepts",
    "start": "708240",
    "end": "714959"
  },
  {
    "text": "that we care about in a scripting language um first we have variables and variable",
    "start": "714959",
    "end": "720680"
  },
  {
    "text": "assignment using these dollar sign strings um we have uh the function and",
    "start": "720680",
    "end": "726959"
  },
  {
    "text": "key path Expressions that we kind of briefly discussed um to call any methods uh then there are these NS aggregate",
    "start": "726959",
    "end": "733160"
  },
  {
    "text": "Expressions which are used to create arrays but uh we can also use them to create series of Expressions that will",
    "start": "733160",
    "end": "739600"
  },
  {
    "text": "be evaluated sequentially which will essentially form the lines of our script um finally subquery and trary",
    "start": "739600",
    "end": "746800"
  },
  {
    "text": "expressions can be used to create loops uh and conditionals respectively and so these can be used for control",
    "start": "746800",
    "end": "753720"
  },
  {
    "text": "flow additionally all the normal arithmetic and bitwise math operators can be used in an predicates and we'll",
    "start": "753720",
    "end": "759760"
  },
  {
    "text": "see this become very useful when we're calculating addresses uh using offsets",
    "start": "759760",
    "end": "766040"
  },
  {
    "text": "later so this is a pi Objective C script so it's just like python bindings for objective c that you can get um and this",
    "start": "766040",
    "end": "773000"
  },
  {
    "text": "evaluates an N predicate script and it just this script makes two variables standard out which is a file handle",
    "start": "773000",
    "end": "779480"
  },
  {
    "text": "and proc info which is the process information um the objects are instantiated using the cast class trick",
    "start": "779480",
    "end": "786040"
  },
  {
    "text": "that we talked about um and then it uses a tary expression as an if statement so",
    "start": "786040",
    "end": "791279"
  },
  {
    "text": "that if the process name is python it prints out its python uh to standard",
    "start": "791279",
    "end": "796800"
  },
  {
    "text": "output um all these expressions are wrapped in Brackets so they form a single and it's aggregate expression and",
    "start": "796800",
    "end": "802199"
  },
  {
    "text": "each line here evaluates sequentially so that's just a a little",
    "start": "802199",
    "end": "807480"
  },
  {
    "text": "example of of how they can be basically used for arbitrary programs so before forc entur these NS",
    "start": "807480",
    "end": "814720"
  },
  {
    "text": "predicate scripts were essentially unrestricted uh with the exception of predicates that were sent over xpc uh",
    "start": "814720",
    "end": "820480"
  },
  {
    "text": "these predicates were often limited using these things called NS predicate visitors uh implementations of a",
    "start": "820480",
    "end": "825800"
  },
  {
    "text": "protocol where methods were were used to check the components of an un untrusted",
    "start": "825800",
    "end": "831040"
  },
  {
    "text": "ANS pricate uh were safe to evaluate um these implementations use the Expression",
    "start": "831040",
    "end": "836600"
  },
  {
    "text": "type property of a and expression um to check whether an expression was a",
    "start": "836600",
    "end": "842600"
  },
  {
    "text": "function or a key path and if that were the case it would only allow specific instances only allow a subset of key",
    "start": "842600",
    "end": "848680"
  },
  {
    "text": "paths or functions um however without these restrictions and as predicates were basically",
    "start": "848680",
    "end": "854279"
  },
  {
    "text": "arbitrary code execution and they were used as such in forced entry and now that we understand a",
    "start": "854279",
    "end": "861240"
  },
  {
    "text": "little bit more about uh NS predicates and their capabilities uh we can",
    "start": "861240",
    "end": "866920"
  },
  {
    "text": "understand the the forced entry sandboxes so uh there was that crazy big jbig 2 VM",
    "start": "866920",
    "end": "875480"
  },
  {
    "text": "uh it was used to create a fake object in memory that when deallocated evaluated an array of NS function",
    "start": "875480",
    "end": "882320"
  },
  {
    "text": "Expressions uh these Expressions cleaned up after the initial exploit and they it",
    "start": "882320",
    "end": "887839"
  },
  {
    "text": "deleted the the the GIF that was actually a PDF and crafted a second payload another array of objects that",
    "start": "887839",
    "end": "894160"
  },
  {
    "text": "was sent to the unsandboxed com Center process uh these objects were chosen such that when the target deserialized",
    "start": "894160",
    "end": "900920"
  },
  {
    "text": "them it would immediately evaluate a new NS predicate uh which collected a bunch of device information uh before",
    "start": "900920",
    "end": "907040"
  },
  {
    "text": "downloading Val another ANS predicate payload that again could do anything after",
    "start": "907040",
    "end": "913240"
  },
  {
    "text": "that so after forc entry and the increased visibility of code colors earlier blog post um a few new",
    "start": "917079",
    "end": "923360"
  },
  {
    "text": "restrictions were placed on Anis predicate objects um so there these two denialists that were added which",
    "start": "923360",
    "end": "928880"
  },
  {
    "text": "prevented the use of a number of inherently dangerous classes and methods uh with particular focus on classes and",
    "start": "928880",
    "end": "934480"
  },
  {
    "text": "methods that allowed performing arbitrary method invocations um and initializing arbitrary objects they",
    "start": "934480",
    "end": "940199"
  },
  {
    "text": "really tried to prevent initializing things that weren't expected um the cast",
    "start": "940199",
    "end": "945519"
  },
  {
    "text": "class trick was uh forbidden and calling class methods as opposed to instance methods on objects was also prevented um",
    "start": "945519",
    "end": "953959"
  },
  {
    "text": "uh it's important to note though that uh these changes only affected first-party Apple apps and processes uh NS",
    "start": "953959",
    "end": "960800"
  },
  {
    "text": "predicates evalua third party apps had this very small Deni list of classes and methods I don't even know if there were",
    "start": "960800",
    "end": "966360"
  },
  {
    "text": "any methods um and they were essentially effectively as powerful as before um so",
    "start": "966360",
    "end": "972920"
  },
  {
    "text": "only Apple was protected uh so these differences were implemented with a a",
    "start": "972920",
    "end": "978240"
  },
  {
    "text": "single flag value um called predicate security Flags uh that was set for Apple processes when the class and its",
    "start": "978240",
    "end": "984759"
  },
  {
    "text": "predicate utilities was initialized so this this one flag is all that controls these you know higher security",
    "start": "984759",
    "end": "993040"
  },
  {
    "text": "features here we can see one of the denial list of the classes um which so it prevents the use of the the class you",
    "start": "993040",
    "end": "999560"
  },
  {
    "text": "see here it's this is larger and this is also kind of like the modern version so it's quite large now um But it includes",
    "start": "999560",
    "end": "1005399"
  },
  {
    "text": "things like NS bundle which is used to load other shed libraries so to try to prevent you from loading other libraries",
    "start": "1005399",
    "end": "1011720"
  },
  {
    "text": "and things like NS coder to prevent deserializing new arbitrary objects again trying to just prevent uh",
    "start": "1011720",
    "end": "1017480"
  },
  {
    "text": "arbitrary objects from from getting into your predicate uh additionally Apple removed",
    "start": "1017480",
    "end": "1023880"
  },
  {
    "text": "the CN file Services DL Sim method that we use used both in NS predicate and uh slop exploits uh which is the selector",
    "start": "1023880",
    "end": "1031038"
  },
  {
    "text": "oriented programming um and it had proved to be like super useful for attackers so there's a reason they uh",
    "start": "1031039",
    "end": "1037839"
  },
  {
    "text": "removed it and they've been removing other instances of DL Sim since then um",
    "start": "1037839",
    "end": "1044558"
  },
  {
    "text": "Rel relatedly the NS invocation uh class was also included in the Forbidden",
    "start": "1044559",
    "end": "1050000"
  },
  {
    "text": "classes list and it generally made it generally they made it more difficult to use for exploits they added this like",
    "start": "1050000",
    "end": "1055679"
  },
  {
    "text": "magic Canary value um and kind of changed the way it worked that it was a little bit less",
    "start": "1055679",
    "end": "1062840"
  },
  {
    "text": "flexible um however we shall see that these denialists were like way way way too small um and the fact that the",
    "start": "1062840",
    "end": "1070720"
  },
  {
    "text": "security was enforced based on the single single writable flag value made it incredible incredibly vulnerable",
    "start": "1070720",
    "end": "1076880"
  },
  {
    "text": "incredibly fragile um um the get Value method of NS value could be used to perform arbitrary rights uh overwriting",
    "start": "1076880",
    "end": "1083960"
  },
  {
    "text": "any address with any desired value um this meant that the security flag could just be unset by calling a get value on",
    "start": "1083960",
    "end": "1091400"
  },
  {
    "text": "the number zero with the address of the security flag as the argument simple as that uh importantly",
    "start": "1091400",
    "end": "1098520"
  },
  {
    "text": "even though iOS has aslr libraries are slid by the same amount in every process with the slide being chosen at startups",
    "start": "1098520",
    "end": "1104159"
  },
  {
    "text": "so um if you had code execution in another process already you could just calculate the values of any address um",
    "start": "1104159",
    "end": "1111240"
  },
  {
    "text": "using offsets um and there are many different ways to leak an address from within a predicate itself so it's",
    "start": "1111240",
    "end": "1116400"
  },
  {
    "text": "trivial to use an offset from a know address to find that flag address 100% reliably um similarly the lengths of the",
    "start": "1116400",
    "end": "1123679"
  },
  {
    "text": "denialist dictionaries could just be set to zero and then they would it' be like they don't exist at all um removing any",
    "start": "1123679",
    "end": "1129760"
  },
  {
    "text": "remaining forbidden elements so all the techniques uh",
    "start": "1129760",
    "end": "1135120"
  },
  {
    "text": "described in the previous slide could be seen uh here in this predicate which disables all the the security features",
    "start": "1135120",
    "end": "1140440"
  },
  {
    "text": "that were added um so we can see uh that we use this uh hashtag self. has to get",
    "start": "1140440",
    "end": "1148600"
  },
  {
    "text": "the address of NS predicate utilities so when you call has on a class it just",
    "start": "1148600",
    "end": "1153640"
  },
  {
    "text": "Returns the uh address of that class as a NS number um with this we can see uh",
    "start": "1153640",
    "end": "1160919"
  },
  {
    "text": "the offsets to get the addresses of the security flags and the lengths of the deny list so they're just being calculated from offsets from that NS",
    "start": "1160919",
    "end": "1167960"
  },
  {
    "text": "predic utilities class and this is all being done from within the predicate um once we have these",
    "start": "1167960",
    "end": "1174080"
  },
  {
    "text": "addresses then we can simply use that get value to overwrite them um reverting and as predicates to fully unrestricted",
    "start": "1174080",
    "end": "1180200"
  },
  {
    "text": "State uh so here we also see what I call the MVP of NS predicate scripts which is",
    "start": "1180200",
    "end": "1185360"
  },
  {
    "text": "non- retained object value it's just kind of a way to uh take an s number and treat it as a pointer to an object um",
    "start": "1185360",
    "end": "1192080"
  },
  {
    "text": "it's kind of like dereferencing a pointer within NS predicate is how I think about it um and it can be used to",
    "start": "1192080",
    "end": "1197799"
  },
  {
    "text": "access any class by reference uh when the cast class trick is forbidden um but",
    "start": "1197799",
    "end": "1202960"
  },
  {
    "text": "remember the cast class trick will be unforbidden once once this is performed so then you can just keep using it which",
    "start": "1202960",
    "end": "1208760"
  },
  {
    "text": "is nice um however after a tweet of mine that",
    "start": "1208760",
    "end": "1213880"
  },
  {
    "text": "may or not may not have been influential uh Apple added additional powerful restrictions namely that the arguments",
    "start": "1213880",
    "end": "1220240"
  },
  {
    "text": "of function Expressions could not be pointer types um and they did this by inspecting the method signatures uh",
    "start": "1220240",
    "end": "1226240"
  },
  {
    "text": "which are strings of characters representing the types uh that a method uses the the carrot and the uh question",
    "start": "1226240",
    "end": "1233799"
  },
  {
    "text": "mark types refer to data and function pointers respectively and they were forbidden in processes with that uh high",
    "start": "1233799",
    "end": "1240400"
  },
  {
    "text": "security flag set um in predicates um in N is function Expressions particularly",
    "start": "1240400",
    "end": "1246840"
  },
  {
    "text": "um however they overlooked the asteris type which is uh refers to character pointers refers to C C strings um I",
    "start": "1246840",
    "end": "1254919"
  },
  {
    "text": "don't know why this type exists in the first place since there should just be encoded carrots c um but it worked out for us here um this means that we could",
    "start": "1254919",
    "end": "1262760"
  },
  {
    "text": "simply achieve the exact same kind of arbitrary right that we had before but now we just use get C string instead of",
    "start": "1262760",
    "end": "1268360"
  },
  {
    "text": "get value so this predicate accomplishes the",
    "start": "1268360",
    "end": "1274360"
  },
  {
    "text": "same thing as the previous one shown um however it uses the function set tobg predicate security scoping it's kind of",
    "start": "1274360",
    "end": "1280679"
  },
  {
    "text": "a mouthful um to unset the high security flag after setting our internal release",
    "start": "1280679",
    "end": "1286320"
  },
  {
    "text": "type to three so this is a that's necessary because the predicate high security flag was moved um from a static",
    "start": "1286320",
    "end": "1292840"
  },
  {
    "text": "address static offset um to the Heap so it was harder to find um luckily an",
    "start": "1292840",
    "end": "1299320"
  },
  {
    "text": "utilities just gave us this nice convenient method to unset it regardless um again uh from here the predicate can",
    "start": "1299320",
    "end": "1306720"
  },
  {
    "text": "be used to fully script objective seat just as before just just like before there are any security features",
    "start": "1306720",
    "end": "1313360"
  },
  {
    "text": "added uh this is that uh set debug predicate security scoping method um which could unset that high security",
    "start": "1313360",
    "end": "1319120"
  },
  {
    "text": "flag U now stored at CF predicate policy data plus o x30 um but only if that OS",
    "start": "1319120",
    "end": "1325559"
  },
  {
    "text": "variant has internal content function returns true and this is what we accomplished by setting the internal",
    "start": "1325559",
    "end": "1331360"
  },
  {
    "text": "release type to three in the predicate that allows us to have this function return true and allow us to",
    "start": "1331360",
    "end": "1337279"
  },
  {
    "text": "unset the high security flag so while I've demonstrated how to",
    "start": "1337279",
    "end": "1342600"
  },
  {
    "text": "get around the limits uh that Apple placed on as pricate I still haven't shown how to call arbitrary functions",
    "start": "1342600",
    "end": "1348919"
  },
  {
    "text": "now that they've removed that DL Sim Gadget um luckily there is still at least one more signed reference to DL",
    "start": "1348919",
    "end": "1354919"
  },
  {
    "text": "Sim that we could get and that's using this DL Sim Funk method of a class in DBT instruments Foundation it's just",
    "start": "1354919",
    "end": "1361039"
  },
  {
    "text": "kind of like a developer tools Library um so this address uh could be used with",
    "start": "1361039",
    "end": "1366320"
  },
  {
    "text": "apply function info uh method a method of RB stroke accumulator so that's a a",
    "start": "1366320",
    "end": "1371720"
  },
  {
    "text": "method a class in render boox framework um to call DL Sim and get the zero",
    "start": "1371720",
    "end": "1377440"
  },
  {
    "text": "context signed address of any exported function um in turn these signed",
    "start": "1377440",
    "end": "1382799"
  },
  {
    "text": "addresses of functions could be also used in that apply function info uh method uh with up to four arbitrary",
    "start": "1382799",
    "end": "1388520"
  },
  {
    "text": "arguments or uh more arbitrary arguments if it was okay not to have control of that fifth argument which would become",
    "start": "1388520",
    "end": "1394400"
  },
  {
    "text": "the the function pointer um this effectively bypasses pack as even though",
    "start": "1394400",
    "end": "1399559"
  },
  {
    "text": "it's not possible to assign arbitrary pointers which is generally what you want from like a full pack bypass um the",
    "start": "1399559",
    "end": "1405440"
  },
  {
    "text": "the combination of the scripting capabilities of NS predicate and the use of any exported function is basically",
    "start": "1405440",
    "end": "1411159"
  },
  {
    "text": "more than enough to accomplish anything that you want to and this is that apply function",
    "start": "1411159",
    "end": "1417400"
  },
  {
    "text": "method uh we can see that it uses this baz instruction to call the function pointer passes the first argument um",
    "start": "1417400",
    "end": "1424240"
  },
  {
    "text": "this is an instruction that authenticates and calls pointers signed with uh zero context values exactly as",
    "start": "1424240",
    "end": "1430320"
  },
  {
    "text": "we need in order to use the reference to dlim and the values the function pointers that dlim returns which are",
    "start": "1430320",
    "end": "1436960"
  },
  {
    "text": "also that zero contact signed putting all the pieces together",
    "start": "1436960",
    "end": "1442960"
  },
  {
    "text": "this is an NS predicate that calls nslog on iOS 16.3 after removing all the",
    "start": "1442960",
    "end": "1448840"
  },
  {
    "text": "mitigations protecting Apple processes it's like probably very difficult to see but the point is that it's it's",
    "start": "1448840",
    "end": "1454039"
  },
  {
    "text": "complicated but it's still possible in is 16.3 beta to to do anything with NS",
    "start": "1454039",
    "end": "1459919"
  },
  {
    "text": "predicate uh using these techniques um all it takes us some creativity some knowledge of objective c and the useful",
    "start": "1459919",
    "end": "1466240"
  },
  {
    "text": "classes that are already defined in the shared libraries of",
    "start": "1466240",
    "end": "1470398"
  },
  {
    "text": "iOS now that we can do anything uh again within an as predicate uh similar to what was possible before forth entry",
    "start": "1472360",
    "end": "1478799"
  },
  {
    "text": "there is uh only one potential impediment uh to exploiting processes that evaluate NS predicates um and",
    "start": "1478799",
    "end": "1484960"
  },
  {
    "text": "that's an predicate visitors so um the most surprising thing I found in",
    "start": "1484960",
    "end": "1491080"
  },
  {
    "text": "my research was that it was possible to just say no to nearly all Anis predicate visitors um each Damon uh implements",
    "start": "1491080",
    "end": "1498760"
  },
  {
    "text": "their own version of this protocol in order to only allow those expressions in in predicates which it expects to be in",
    "start": "1498760",
    "end": "1504520"
  },
  {
    "text": "a normal and its predicate argument um it uses the expression type property to check what kind of expression each",
    "start": "1504520",
    "end": "1510960"
  },
  {
    "text": "component of a predicate is so that simple expressions like constant values uh can just be allowed and other more",
    "start": "1510960",
    "end": "1517159"
  },
  {
    "text": "dangerous ones like function Expressions can be forbidden or limited so like a lot of them have like a set of selectors",
    "start": "1517159",
    "end": "1523799"
  },
  {
    "text": "that you're allowed to use in function expressions or a set of key paths that you're allowed to use um however the expression type was just",
    "start": "1523799",
    "end": "1531039"
  },
  {
    "text": "this integer that was read directly from the serialized data sent by an untrusted process this means that setting every",
    "start": "1531039",
    "end": "1536640"
  },
  {
    "text": "expression type to zero uh in a malicious an predicate led the receiver to interpret it as only containing",
    "start": "1536640",
    "end": "1542200"
  },
  {
    "text": "constant values uh bypassing any additional validation um so it never saw",
    "start": "1542200",
    "end": "1547440"
  },
  {
    "text": "that any of them were function Expressions so it never checked to see what functions they",
    "start": "1547440",
    "end": "1553240"
  },
  {
    "text": "were uh so here's an example of a NS predicate visitor implementation for photo library queries so we can see here",
    "start": "1554840",
    "end": "1561000"
  },
  {
    "text": "that it uses that expression type property um to decide whether additional checks need to be made on each",
    "start": "1561000",
    "end": "1566399"
  },
  {
    "text": "expression that it visits um so like it checks to see if it's a key path expression using these uh bit bit",
    "start": "1566399",
    "end": "1571679"
  },
  {
    "text": "operations and then checks the key paath um and then here we can see at the",
    "start": "1571679",
    "end": "1578200"
  },
  {
    "text": "bottom that the only implementation of expression type the getter for this property uh was something that simply",
    "start": "1578200",
    "end": "1584399"
  },
  {
    "text": "returns to the number stored at the offset uh 16 um and this number is taken directly from",
    "start": "1584399",
    "end": "1589880"
  },
  {
    "text": "the archive data uh in NS expression in it with coder which is that method that does the deserialization and we're going",
    "start": "1589880",
    "end": "1596279"
  },
  {
    "text": "to see that here um so this XML on the right um is the serialized",
    "start": "1596279",
    "end": "1602000"
  },
  {
    "text": "representation of an an expression the the one to the left um so we can see that uh hopefully you can see it um that",
    "start": "1602000",
    "end": "1609600"
  },
  {
    "text": "the expression type is just this an integer within this XML so you could just set that to whatever you wanted and it would say okay this is a zero type so",
    "start": "1609600",
    "end": "1617000"
  },
  {
    "text": "it's fine um with this bypass uh processes that",
    "start": "1617000",
    "end": "1622919"
  },
  {
    "text": "were otherwise protected by NS predicate visitors in addition to the standard first party ands predicate M mitigations",
    "start": "1622919",
    "end": "1628679"
  },
  {
    "text": "were now vulnerable to 100% reliable arbitrary code execution uh apps that",
    "start": "1628679",
    "end": "1633720"
  },
  {
    "text": "were vulnerable apps and process that were vulnerable included C do D and context store D which aggregate user",
    "start": "1633720",
    "end": "1639840"
  },
  {
    "text": "Behavior data on the device um App Store D which it can install new applications",
    "start": "1639840",
    "end": "1646000"
  },
  {
    "text": "OS log service which can re any of the process logs uh and springboard it's kind of the the home app similar to",
    "start": "1646000",
    "end": "1652080"
  },
  {
    "text": "explored Exe on Windows um and it has many different sensitive",
    "start": "1652080",
    "end": "1657159"
  },
  {
    "text": "permissions a s",
    "start": "1657159",
    "end": "1661000"
  },
  {
    "text": "more um so by exploring these vulnerable processes a M's app could gain access to location data message contents um and",
    "start": "1664480",
    "end": "1671880"
  },
  {
    "text": "you even install apps potentially on the Target and maybe paired devices as well um so lots of sense sensitive",
    "start": "1671880",
    "end": "1677799"
  },
  {
    "text": "permissions sensitive entitlements these these processes contain um so it's pretty simple to find",
    "start": "1677799",
    "end": "1684399"
  },
  {
    "text": "xpc service clients that uh send NS predicates like this one um this one's CD interaction recorder um just by",
    "start": "1684399",
    "end": "1691440"
  },
  {
    "text": "grepping The Objective C headers and that's a great thing about reversing Objective C libraries and apps is that",
    "start": "1691440",
    "end": "1697559"
  },
  {
    "text": "they must contain this Header information because of the dynamic dispatching of methods because they they",
    "start": "1697559",
    "end": "1703559"
  },
  {
    "text": "have this Dynamic runtime they need all this information um and so their tools to extract this all this header data um",
    "start": "1703559",
    "end": "1711320"
  },
  {
    "text": "here we see that many methods take an Anis predicate argument and this predicate is sent to that coreu D",
    "start": "1711320",
    "end": "1718440"
  },
  {
    "text": "service this is just a a little Freer script that which when attached to a process with the entitlement to",
    "start": "1718440",
    "end": "1723919"
  },
  {
    "text": "communicate with cord D send an an predicate that will cause it to crash on access to a AAA just a simple crash PC",
    "start": "1723919",
    "end": "1731120"
  },
  {
    "text": "um it uses the method count contacts using predicate error which takes a predicate AR argument and sends it to",
    "start": "1731120",
    "end": "1736679"
  },
  {
    "text": "cord d um and before calling this method uh the function expression has his expression",
    "start": "1736679",
    "end": "1743600"
  },
  {
    "text": "type set to zero so that it bypasses the NS predicate visitor that corded",
    "start": "1743600",
    "end": "1749080"
  },
  {
    "text": "uses similarly this script attacks the OS log Service uh xpc service um every",
    "start": "1749080",
    "end": "1754600"
  },
  {
    "text": "app can communicate with this service so it can be directly exploited to gain access to arbitrary logs potentially with sensitive information or it can",
    "start": "1754600",
    "end": "1761279"
  },
  {
    "text": "just be used as a way to uh have code execution persist outside of a malicious",
    "start": "1761279",
    "end": "1766360"
  },
  {
    "text": "app um after the app is is closed or",
    "start": "1766360",
    "end": "1771120"
  },
  {
    "text": "deleted on the iPad any app can communicate with the springboard uh xpc service that determines which app scene",
    "start": "1771559",
    "end": "1778279"
  },
  {
    "text": "should be used for handling different events um this is done using an NX predicate uh provided by an app um the",
    "start": "1778279",
    "end": "1785240"
  },
  {
    "text": "predicate is validated using this uh UI Target content identifier predicate validator class um so it's",
    "start": "1785240",
    "end": "1792120"
  },
  {
    "text": "implementation of an N predicate visitor however like the others it relies on this expression type value to turn",
    "start": "1792120",
    "end": "1797279"
  },
  {
    "text": "determine whether expressions are safe and that means by using a a malicious NS",
    "start": "1797279",
    "end": "1802320"
  },
  {
    "text": "predicate visitor we can take any NX predicate and use the visitor to set all of its expression types to be zero which",
    "start": "1802320",
    "end": "1808720"
  },
  {
    "text": "will denote the constant value so that's what this uh NS predicate visitor",
    "start": "1808720",
    "end": "1813679"
  },
  {
    "text": "does so this is um the actual predicate that we're going to use to exploit springboard in a second here um first it",
    "start": "1814840",
    "end": "1821559"
  },
  {
    "text": "uses the the get C string method to perform the arbitrary rights necessary to clear the denialist and set the",
    "start": "1821559",
    "end": "1826720"
  },
  {
    "text": "internal Rel type to three before calling uh set tobg predicate security scoping um that unsets the high security",
    "start": "1826720",
    "end": "1833279"
  },
  {
    "text": "flag uh finally it uses ands file manager which previously was a forbidden class uh to copy the contents of user",
    "start": "1833279",
    "end": "1840120"
  },
  {
    "text": "notifications to the crash report directory so they can be easily copied off the device uh in a real scenario they could be zipped up and sent over",
    "start": "1840120",
    "end": "1846640"
  },
  {
    "text": "HTTP uh to a server that an attack controls um there's lots of different classes for for doing those sorts of",
    "start": "1846640",
    "end": "1853039"
  },
  {
    "text": "things um that we could get access to um the predicate then accepts our evil NS predicate visitor which sets all the",
    "start": "1853039",
    "end": "1859039"
  },
  {
    "text": "expression types to zero in order to evade the NS predicate visitor in UI kit core um and finally the predicate is",
    "start": "1859039",
    "end": "1866760"
  },
  {
    "text": "assigned to the scene activation conditions which is what sends it to springboard to be evaluated when an",
    "start": "1866760",
    "end": "1871880"
  },
  {
    "text": "event um like opening the app using one of the shortcuts is generated okay so I never took my iPad",
    "start": "1871880",
    "end": "1882398"
  },
  {
    "text": "out sorry about that it's supposed to be a live demo um should have set it up",
    "start": "1886159",
    "end": "1895519"
  },
  {
    "text": "beforehand all right but I guess I'll talk that while while I try to do this so I got to take off this thing the",
    "start": "1895519",
    "end": "1901760"
  },
  {
    "text": "computer only has two ports stupid MacBook um so we are going to be um",
    "start": "1901760",
    "end": "1908720"
  },
  {
    "text": "exploiting that uh springboard uh vulnerability on an iPad um using these",
    "start": "1908720",
    "end": "1915240"
  },
  {
    "text": "that predicate that we saw to copy all the user notifications um",
    "start": "1915240",
    "end": "1921880"
  },
  {
    "text": "to to this computer again in a real scenario would probably be sent over like HTTP but",
    "start": "1922039",
    "end": "1930080"
  },
  {
    "text": "um a going to work come",
    "start": "1930200",
    "end": "1934120"
  },
  {
    "text": "on sorry",
    "start": "1938159",
    "end": "1942840"
  },
  {
    "text": "um gota wait for quick time to work sorry",
    "start": "1943279",
    "end": "1949080"
  },
  {
    "text": "all right I'm going to keep talking while I try to set this up",
    "start": "1954840",
    "end": "1960240"
  },
  {
    "text": "um we have the uh like we saw before we have that predicate visitor which is",
    "start": "1961200",
    "end": "1966639"
  },
  {
    "text": "going to to set the expression types to to zero",
    "start": "1966639",
    "end": "1972159"
  },
  {
    "text": "um no okay well I have a video of the the demo so I guess I'll just show that",
    "start": "1972639",
    "end": "1978480"
  },
  {
    "text": "sorry about that um so this is this is the um malicious app uh being loaded um",
    "start": "1978480",
    "end": "1985080"
  },
  {
    "text": "so we can see our notifications here that we have the uh iMessage that says this is a secret um and then we are uh",
    "start": "1985080",
    "end": "1993360"
  },
  {
    "text": "going to open up our malicious app which sends those notifications over to the left there where we have a script",
    "start": "1993360",
    "end": "1998480"
  },
  {
    "text": "waiting to receive them and we can see that it uh gets that notification",
    "start": "1998480",
    "end": "2005398"
  },
  {
    "text": "information",
    "start": "2005960",
    "end": "2008960"
  },
  {
    "text": "[Applause] thanks thank you sorry for the technical",
    "start": "2012380",
    "end": "2019519"
  },
  {
    "text": "difficulties um so conclusion um so how should app",
    "start": "2019519",
    "end": "2025080"
  },
  {
    "text": "developers use NS predicate safely um if you went by Apple's developer documentation you might think that",
    "start": "2025080",
    "end": "2030320"
  },
  {
    "text": "they're not dangerous at all um there are no warnings uh anywhere uh in any",
    "start": "2030320",
    "end": "2036240"
  },
  {
    "text": "documentation that they should be handled with care um but that's wrong",
    "start": "2036240",
    "end": "2041760"
  },
  {
    "text": "but simply if you can avoid them you you should avoid them um sometimes it's not possible like if you're using chord data",
    "start": "2041760",
    "end": "2048638"
  },
  {
    "text": "um but where possible use block predicates instead of string based predicates um never use an untrusted",
    "start": "2048639",
    "end": "2054960"
  },
  {
    "text": "string and predicate with format or with the K uh keyth format string um don't un",
    "start": "2054960",
    "end": "2061240"
  },
  {
    "text": "uh unarchive and evaluate untrusted NS predicate objects and any predicate that",
    "start": "2061240",
    "end": "2066320"
  },
  {
    "text": "has been on archive should probably be considered untrusted from a file or over the network",
    "start": "2066320",
    "end": "2072560"
  },
  {
    "text": "um and don't use any dynamically allocated strings for the format string as that could just take a simple Heap",
    "start": "2072560",
    "end": "2079320"
  },
  {
    "text": "overflow and turn it into an 100% reliable arbitrary code execution just by overwriting that",
    "start": "2079320",
    "end": "2086359"
  },
  {
    "text": "string luckily the uh for the security of iOS and for Mac OS devices Apple's",
    "start": "2088520",
    "end": "2094240"
  },
  {
    "text": "finally finally begun to limit NS predicates uh in a way that is less easily bypassed uh the return and",
    "start": "2094240",
    "end": "2100320"
  },
  {
    "text": "argument types of function Expressions uh must be objects even in third party",
    "start": "2100320",
    "end": "2105400"
  },
  {
    "text": "apps um and there's no flag that can be overwritten anymore to change this um NS predicate could still be used by",
    "start": "2105400",
    "end": "2112000"
  },
  {
    "text": "malicious malicious apps to bypass any kind of meaningful App Store review um as far as I know there is no review to",
    "start": "2112000",
    "end": "2120680"
  },
  {
    "text": "make sure there there's no downloading and evaluating of dynamic and its predicates",
    "start": "2120680",
    "end": "2125800"
  },
  {
    "text": "um and in fact this Behavior actually occurs within their own apps and libraries so you would think they'd",
    "start": "2125800",
    "end": "2130839"
  },
  {
    "text": "probably get rid of it there first um however a lot can still be accomplished with these an predicates even in a",
    "start": "2130839",
    "end": "2137960"
  },
  {
    "text": "context where you don't control the entire environment um and this is unlikely to change until Apple",
    "start": "2137960",
    "end": "2144160"
  },
  {
    "text": "fundamentally Alters the behavior of function and keath expressions um until then they're basically landmines",
    "start": "2144160",
    "end": "2150560"
  },
  {
    "text": "scattered everywhere waiting to explode and destroy the effectiveness of all the Amazing Security uh features that iOS",
    "start": "2150560",
    "end": "2156560"
  },
  {
    "text": "has um for now they remain Apple's predicament and that's it thank",
    "start": "2156560",
    "end": "2164880"
  },
  {
    "text": "you",
    "start": "2165440",
    "end": "2168440"
  }
]