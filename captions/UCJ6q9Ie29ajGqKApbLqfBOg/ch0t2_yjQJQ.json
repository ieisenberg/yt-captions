[
  {
    "text": "all right well thank you very much for coming to this talk I am super super",
    "start": "2720",
    "end": "8360"
  },
  {
    "text": "excited uh to be here today to present uh logo fail and the security",
    "start": "8360",
    "end": "13799"
  },
  {
    "text": "implication of image parsing during system boot just a quick introduction I am",
    "start": "13799",
    "end": "20080"
  },
  {
    "text": "Fabio Pagani I work at Bly in the research uh team at binly I mainly focus",
    "start": "20080",
    "end": "27119"
  },
  {
    "text": "on vulnerability and threat research and on analysis with a focus on fuding and",
    "start": "27119",
    "end": "32920"
  },
  {
    "text": "dynamic analysis of course uh logo fail was not",
    "start": "32920",
    "end": "38960"
  },
  {
    "text": "a singl man effort but it was rather a collective push from the entire Bly",
    "start": "38960",
    "end": "45960"
  },
  {
    "text": "research team so uh I just want to say a big thanks to Alex matov jagor vasilenko",
    "start": "45960",
    "end": "52600"
  },
  {
    "text": "Alex yov samma and Anto ianov for their great contribution to this project but",
    "start": "52600",
    "end": "60199"
  },
  {
    "text": "uh okay I guess you all here to hear about logo fail and um logo fail is an",
    "start": "60199",
    "end": "66760"
  },
  {
    "text": "example of a vulnerability related to the processing of untrusted data from",
    "start": "66760",
    "end": "73479"
  },
  {
    "text": "ufi firmware components uh we actually worked quite a lot on this at binly and uh for instance",
    "start": "73479",
    "end": "82520"
  },
  {
    "text": "uh last year we discovered a new class of attacks that we call data only",
    "start": "82520",
    "end": "89159"
  },
  {
    "text": "attacks against against the ufi firmware and the root cause of these attacks is",
    "start": "89159",
    "end": "95000"
  },
  {
    "text": "um because there is insecure handling of content that comes from R right areas of",
    "start": "95000",
    "end": "102720"
  },
  {
    "text": "the firmware which can be tampered by an attacker so from them mvam in particular and these attacks are",
    "start": "102720",
    "end": "110640"
  },
  {
    "text": "impactful because they allow to bypass secure Boot and also uh all the",
    "start": "110640",
    "end": "116320"
  },
  {
    "text": "different shades of Hardware verified uh hard based verified boot such as the boot guard also when these when these",
    "start": "116320",
    "end": "124159"
  },
  {
    "text": "problems and these attacks happen at the beginning of the ufi boot process like",
    "start": "124159",
    "end": "129959"
  },
  {
    "text": "in the prei stage they can also lead to to the compromise of Intel to sorry to other to the",
    "start": "129959",
    "end": "137040"
  },
  {
    "text": "compromise of security protection such as Intel ppam and so you know in our cast to",
    "start": "137040",
    "end": "143959"
  },
  {
    "text": "secure the ufi firmware supply chain we actually started exploring new attack",
    "start": "143959",
    "end": "149440"
  },
  {
    "text": "surf es and we went back to our platform and we actually observed that the number",
    "start": "149440",
    "end": "157560"
  },
  {
    "text": "of image parsers in firmware are increasing and image parsers are",
    "start": "157560",
    "end": "162800"
  },
  {
    "text": "actually common and now I'm sure that many of you are asking yourself but why",
    "start": "162800",
    "end": "168159"
  },
  {
    "text": "do we even need to have image parsers during boot well for sure there is a lot of",
    "start": "168159",
    "end": "175159"
  },
  {
    "text": "graphical elements for instance in the setup interface that needs to be uh",
    "start": "175159",
    "end": "180239"
  },
  {
    "text": "pared and rendered but then there is also another element that is always",
    "start": "180239",
    "end": "185879"
  },
  {
    "text": "always shown during Boot and uh this is the boot logo right as soon you as soon",
    "start": "185879",
    "end": "193080"
  },
  {
    "text": "as you start up your machine uh one of the first thing that you see on the screen is actually the a logo from the",
    "start": "193080",
    "end": "198599"
  },
  {
    "text": "device vendor and at this point we recalled that the boot logo can be uh",
    "start": "198599",
    "end": "206879"
  },
  {
    "text": "customized and this is mainly done for branding pures or you know maybe if you're a gamer and you want just to put",
    "start": "206879",
    "end": "213959"
  },
  {
    "text": "a super cool logo uh then you know the vendors let you do so and at this point",
    "start": "213959",
    "end": "220680"
  },
  {
    "text": "it's when we connected the dots so what if these image parsing libraries are",
    "start": "220680",
    "end": "228239"
  },
  {
    "text": "used to parse and display the boot logo and what if this boot logo can actually",
    "start": "228239",
    "end": "235079"
  },
  {
    "text": "be customized from the operating system and so we went on the Internet and try",
    "start": "235079",
    "end": "240760"
  },
  {
    "text": "to find past research in this area and uh the only bug that we found related to",
    "start": "240760",
    "end": "246360"
  },
  {
    "text": "this was presented at black hat USA 2009 where uh Rafal and Alex uh found the bug",
    "start": "246360",
    "end": "255840"
  },
  {
    "text": "in the BMP parser of tianocore reference code and they actually exploded this bug",
    "start": "255840",
    "end": "263800"
  },
  {
    "text": "uh unfortunately history repeat itself and the computer security is not an exception and uh so here we are 15 years",
    "start": "263800",
    "end": "272720"
  },
  {
    "text": "later where we have modern ufi firmware not supporting a single image format but",
    "start": "272720",
    "end": "280280"
  },
  {
    "text": "supporting multiple of them from common formats such as PNG to esoteric stuff",
    "start": "280280",
    "end": "287400"
  },
  {
    "text": "such as PCX and TGA and the second bad news is that user",
    "start": "287400",
    "end": "293960"
  },
  {
    "text": "can actually pass image data to these um to these parsers",
    "start": "293960",
    "end": "300240"
  },
  {
    "text": "and uh through the through all the various log customization that the vendors",
    "start": "300240",
    "end": "305360"
  },
  {
    "text": "allow uh the third bad news is that the image parsing is done during boot in",
    "start": "305360",
    "end": "310720"
  },
  {
    "text": "particular particularly during the Dixie phase um it's done by code that is",
    "start": "310720",
    "end": "317479"
  },
  {
    "text": "written in C so it's very prone to memory corruption errors and problems",
    "start": "317479",
    "end": "323319"
  },
  {
    "text": "and the Char on top is that in the ufi world there are little to no mitigation",
    "start": "323319",
    "end": "329759"
  },
  {
    "text": "for the exploitation of software vulnerability so what could go wrong",
    "start": "329759",
    "end": "336120"
  },
  {
    "text": "well I guess you might at this point imagine how the stuff went but meet logo",
    "start": "336120",
    "end": "341600"
  },
  {
    "text": "fail logo fail is a new set of security vulnerabilities that affect parsing",
    "start": "341600",
    "end": "348280"
  },
  {
    "text": "libraries libraries used during the device boot process as you can see in this diagram um the supply chain",
    "start": "348280",
    "end": "356000"
  },
  {
    "text": "ecosystem of ufi is super complex we have the Silicon vendor that produce a",
    "start": "356000",
    "end": "363440"
  },
  {
    "text": "reference implementation which is called edk2 and then this reference",
    "start": "363440",
    "end": "368880"
  },
  {
    "text": "implementation is um improved by ibvs such as inside Ami and Phoenix and this",
    "start": "368880",
    "end": "376840"
  },
  {
    "text": "improved version then is sent to uh oems and device",
    "start": "376840",
    "end": "381919"
  },
  {
    "text": "vendors and since logo fail affects the um the reference implementation from the",
    "start": "381919",
    "end": "390280"
  },
  {
    "text": "ibvs then we have a basically an impact on the entire ecosystem of",
    "start": "390280",
    "end": "396680"
  },
  {
    "text": "ufi uh logo fail as I said is ufi and ibv specific and this also means that is",
    "start": "396680",
    "end": "402639"
  },
  {
    "text": "a cross silicone attack and we found actually devices um vulnerable to logo",
    "start": "402639",
    "end": "408400"
  },
  {
    "text": "fail both in x86 and arm also uh the uh 150 days embargo uh",
    "start": "408400",
    "end": "419080"
  },
  {
    "text": "Lees today uh we spend a consider amount of time working with vendors to make sure",
    "start": "419080",
    "end": "425039"
  },
  {
    "text": "that you know they understand the problem and the release patches and I'm happy to say that you guys are one of",
    "start": "425039",
    "end": "431000"
  },
  {
    "text": "the first people in the world to uh hear about all the details all the story",
    "start": "431000",
    "end": "436479"
  },
  {
    "text": "behind logo fail but what are the implication of of",
    "start": "436479",
    "end": "441960"
  },
  {
    "text": "logo fail um in particular with um in particular on the recent",
    "start": "441960",
    "end": "448120"
  },
  {
    "text": "discoveries that were done in the ufi world um attacks such as button drop",
    "start": "448120",
    "end": "454080"
  },
  {
    "text": "they mostly focus on bypassing secure Boot and by and impacting the boot",
    "start": "454080",
    "end": "460960"
  },
  {
    "text": "loaders and these attacks can be General detected with a signature based uh",
    "start": "460960",
    "end": "466520"
  },
  {
    "text": "scanning on the other hand logo fail goes a step further because uh as we can",
    "start": "466520",
    "end": "473080"
  },
  {
    "text": "see with logo fail we are able to uh get down to the firware level to the Dixie",
    "start": "473080",
    "end": "479039"
  },
  {
    "text": "phas and this allows us to bypass secure boot but also to bypass other security",
    "start": "479039",
    "end": "486879"
  },
  {
    "text": "features okay so I think that was enough for introduction uh let's get a little",
    "start": "486879",
    "end": "492520"
  },
  {
    "text": "bit more technical let's see uh what we found the first step in this exploration",
    "start": "492520",
    "end": "499360"
  },
  {
    "text": "was to find the image parsers and he actually turned out that finding them is",
    "start": "499360",
    "end": "506000"
  },
  {
    "text": "not that difficult in particular for inside and Phoenix we can just search",
    "start": "506000",
    "end": "512560"
  },
  {
    "text": "for the the color name and we will immediately find the Dixie modules which",
    "start": "512560",
    "end": "518719"
  },
  {
    "text": "implement the image parser for AMI this is a little bit more difficult and it requires a little bit",
    "start": "518719",
    "end": "524959"
  },
  {
    "text": "more reversing because Ami basically put all of its code in in a single module",
    "start": "524959",
    "end": "532120"
  },
  {
    "text": "called Ami TC so we need to do a little bit more of reversing but uh nothing um",
    "start": "532120",
    "end": "537760"
  },
  {
    "text": "too difficult and at this point we find where the image passing libraries and",
    "start": "537760",
    "end": "545200"
  },
  {
    "text": "functions are located and so now we want to understand where the data that they",
    "start": "545200",
    "end": "551200"
  },
  {
    "text": "actually comp pass comes from and um also uh for for implementing this",
    "start": "551200",
    "end": "557399"
  },
  {
    "text": "analysis we just did a lot of reversing actually with Fi Explorer which is a",
    "start": "557399",
    "end": "563760"
  },
  {
    "text": "plugin for Ida that we developed at binarily and uh we basically start from",
    "start": "563760",
    "end": "570160"
  },
  {
    "text": "the image passsing functions and then just look backwards to understand where",
    "start": "570160",
    "end": "575279"
  },
  {
    "text": "the data is actually coming from um nothing too fancy honestly uh but uh",
    "start": "575279",
    "end": "582200"
  },
  {
    "text": "when you do this process it you will find that uh in many cases the data",
    "start": "582200",
    "end": "587800"
  },
  {
    "text": "source um where the image is read from is a firmer volume and in general firal",
    "start": "587800",
    "end": "594600"
  },
  {
    "text": "volumes are signed by boot guard so they cannot be uh comp compromised by an",
    "start": "594600",
    "end": "601399"
  },
  {
    "text": "attacker however in many other cases you will also find different uh OEM specific",
    "start": "601399",
    "end": "610440"
  },
  {
    "text": "customizations um one of the most common one is uh for instance that the firmware",
    "start": "610440",
    "end": "617200"
  },
  {
    "text": "reads the logo from a specified location on the ESP so you can just drop a logo",
    "start": "617200",
    "end": "622920"
  },
  {
    "text": "there reboot and then the firmer will pick the the logo from the from the",
    "start": "622920",
    "end": "628040"
  },
  {
    "text": "ESP in other cases instead the logo is stored into an unsigned volume of a",
    "start": "628040",
    "end": "635040"
  },
  {
    "text": "firmer update so we can just store our image there Flash update and this will",
    "start": "635040",
    "end": "640800"
  },
  {
    "text": "be enough to install our logo finally sometimes envm variables",
    "start": "640800",
    "end": "646040"
  },
  {
    "text": "are involved into this process and in certain cases we have an EnV run",
    "start": "646040",
    "end": "651240"
  },
  {
    "text": "variable which contains the path to the logo and in other cases instead the",
    "start": "651240",
    "end": "656639"
  },
  {
    "text": "Environ variable actually contains the uh the logo",
    "start": "656639",
    "end": "662519"
  },
  {
    "text": "itself so um allowing users in general to customize their logo is an acceptable",
    "start": "662519",
    "end": "670880"
  },
  {
    "text": "behavior right uh only though if the image passing libraries don't contain uh",
    "start": "670880",
    "end": "676959"
  },
  {
    "text": "any security bug and so we decided to use some fuding to actually check how secure these um this parser",
    "start": "676959",
    "end": "685040"
  },
  {
    "text": "are um turns out that um fuding uh image parsers in particular ufi image parsers",
    "start": "685040",
    "end": "692480"
  },
  {
    "text": "is uh not that complicated actually first of all uh dixy modules where the",
    "start": "692480",
    "end": "698120"
  },
  {
    "text": "parser are implemented are RP files so it's very easy to um parse them and to",
    "start": "698120",
    "end": "705800"
  },
  {
    "text": "load them in memory and also the uh ufi",
    "start": "705800",
    "end": "711040"
  },
  {
    "text": "environment uh that they need to run uh it's very minimal and we just need to um",
    "start": "711040",
    "end": "719040"
  },
  {
    "text": "set certain ufi tables which are used by the modules and after we set these pointers in the in the data section of",
    "start": "719040",
    "end": "726240"
  },
  {
    "text": "the module then the the parcel will just run um happily and as a fer we actually",
    "start": "726240",
    "end": "733519"
  },
  {
    "text": "developed some new emulation based capabilities that we were able",
    "start": "733519",
    "end": "739279"
  },
  {
    "text": "to um to integrate with Leb AFL the U last um component that we need",
    "start": "739279",
    "end": "748560"
  },
  {
    "text": "the for fuding is a fuding harness and we actually needed to write the harness for each of the parser that we uh that",
    "start": "748560",
    "end": "756079"
  },
  {
    "text": "we identified and the the harness it's very important because it works as a bridge between uh the fer and the FED",
    "start": "756079",
    "end": "764480"
  },
  {
    "text": "module uh our harnesses what they do is that they mainly bring the module in",
    "start": "764480",
    "end": "771279"
  },
  {
    "text": "initialized state and then they prepare the call to uh a parsing function and",
    "start": "771279",
    "end": "778839"
  },
  {
    "text": "finally they basically get fer generated data they inject it inside the inside",
    "start": "778839",
    "end": "784279"
  },
  {
    "text": "the target module and then they just run the they just run the paring function and then they check for crashes so at",
    "start": "784279",
    "end": "792000"
  },
  {
    "text": "this point uh we have all the ingredients that we need for fuding and uh what happens when you fuds",
    "start": "792000",
    "end": "801320"
  },
  {
    "text": "parsers which are written in C and that were never FS",
    "start": "801320",
    "end": "807000"
  },
  {
    "text": "before well you get hundreds of crashes you get crashes crashes everywhere so",
    "start": "807000",
    "end": "812839"
  },
  {
    "text": "many crashes that uh we decided it was actually good investment to um extend",
    "start": "812839",
    "end": "819760"
  },
  {
    "text": "our internal program analysis framework to help us triaging them because otherwise it was going to be a nightmare",
    "start": "819760",
    "end": "826680"
  },
  {
    "text": "and uh humans you know in general don't scale as well as uh as",
    "start": "826680",
    "end": "832399"
  },
  {
    "text": "machines um this is actually an excerpt of all the different uh root causes that",
    "start": "832440",
    "end": "837560"
  },
  {
    "text": "we identified and uh we in total found 21 uni unique",
    "start": "837560",
    "end": "844160"
  },
  {
    "text": "root causes and 50 of which we deem to be very likely",
    "start": "844160",
    "end": "850199"
  },
  {
    "text": "exploitable as you can see from the CW column uh we actually found several",
    "start": "850199",
    "end": "855240"
  },
  {
    "text": "different B bug classes from less serious n pointer references and out of bound reads to",
    "start": "855240",
    "end": "863440"
  },
  {
    "text": "higher impact Global buffer overflows and E overflows uh just want to add though a",
    "start": "863440",
    "end": "869639"
  },
  {
    "text": "little peculiarity uh a little note since we're working with firmware and um",
    "start": "869639",
    "end": "876199"
  },
  {
    "text": "even less serious um vulnerabilities such as outof bound reads can actually",
    "start": "876199",
    "end": "883079"
  },
  {
    "text": "lead to a denial service attack but a denial service attack during boot means",
    "start": "883079",
    "end": "890519"
  },
  {
    "text": "that the device will not boot and so the device actually is breaked right uh the",
    "start": "890519",
    "end": "896800"
  },
  {
    "text": "the operating system will never even get a chance to start so they are these bug",
    "start": "896800",
    "end": "902680"
  },
  {
    "text": "classes are for sure less serious uh but they can still have a big impact for instance on",
    "start": "902680",
    "end": "909240"
  },
  {
    "text": "organizations and you will actually find all the details about all the other bugs in a blog post that we will",
    "start": "909240",
    "end": "915040"
  },
  {
    "text": "release uh today I just want to go now uh and show",
    "start": "915040",
    "end": "921000"
  },
  {
    "text": "you a couple of these um bugs that we found the first one is in the BMP parser",
    "start": "921000",
    "end": "926839"
  },
  {
    "text": "developed by inside and uh um as you can see in the first box we are accessing an array BLT buffer",
    "start": "926839",
    "end": "935759"
  },
  {
    "text": "depending on using as an index uh multiple variables and uh when pixel8",
    "start": "935759",
    "end": "944240"
  },
  {
    "text": "and I are zero then we will access BLT",
    "start": "944240",
    "end": "949680"
  },
  {
    "text": "buffer at index uh pixel width time minus one which is minus pixel width",
    "start": "949680",
    "end": "956560"
  },
  {
    "text": "right and since pixel WI with is taken directly from the BMP header this means",
    "start": "956560",
    "end": "962360"
  },
  {
    "text": "that we can access basically any memory below BLT buffer and this turns into a",
    "start": "962360",
    "end": "969120"
  },
  {
    "text": "security problem in the second box because the BLT variable which is initialized with this address is",
    "start": "969120",
    "end": "975720"
  },
  {
    "text": "actually used as a target for a write and uh in for this write we also control",
    "start": "975720",
    "end": "981240"
  },
  {
    "text": "the content that that we are writing uh so by using this bug we can basically do",
    "start": "981240",
    "end": "988040"
  },
  {
    "text": "an ARB RI anywhere um just below the BLT",
    "start": "988040",
    "end": "994959"
  },
  {
    "text": "buffer this other bug was instead found find in the jpeg parser developed by",
    "start": "994959",
    "end": "1001680"
  },
  {
    "text": "Ami and uh here the problem is that the developers assume that a JPEG cannot",
    "start": "1001680",
    "end": "1009440"
  },
  {
    "text": "contain more than four youthman tables and so they simply statically locate um",
    "start": "1009440",
    "end": "1014880"
  },
  {
    "text": "this array called the youan tables with four um entries uh the problem is though uh is that as",
    "start": "1014880",
    "end": "1021839"
  },
  {
    "text": "an attacker we can put you know more than four youthman tables and the index",
    "start": "1021839",
    "end": "1027280"
  },
  {
    "text": "used to access the Ean tables array is not checked so it can be more than four",
    "start": "1027280",
    "end": "1033280"
  },
  {
    "text": "and um this means that we can basically overflow on global data with pointers to",
    "start": "1033280",
    "end": "1039520"
  },
  {
    "text": "our image which you know can become a",
    "start": "1039520",
    "end": "1044678"
  },
  {
    "text": "problem so uh just a couple of takeaways from uh this fuding experiment um I am",
    "start": "1044679",
    "end": "1052400"
  },
  {
    "text": "very confident in saying that um none of these libraries were ever ever fuds by",
    "start": "1052400",
    "end": "1059200"
  },
  {
    "text": "ibvs or oems and I can say so because we found crashes in every parser that uh we",
    "start": "1059200",
    "end": "1066720"
  },
  {
    "text": "tested the first crashes actually were found just after a few seconds of",
    "start": "1066720",
    "end": "1072559"
  },
  {
    "text": "fuding and also actually some parser even crash with images downloaded from",
    "start": "1072559",
    "end": "1078720"
  },
  {
    "text": "the internet so with images that should be should be valid and I just Al also want to take a",
    "start": "1078720",
    "end": "1086520"
  },
  {
    "text": "second to thanks the internet archive uh because do you remember at the beginning",
    "start": "1086520",
    "end": "1092000"
  },
  {
    "text": "of a presentation I said that uh we found a PCX a parer for PCX which is",
    "start": "1092000",
    "end": "1098320"
  },
  {
    "text": "something that honestly I never heard before and actually turned out that you know finding a good Corpus for the fer",
    "start": "1098320",
    "end": "1106360"
  },
  {
    "text": "is not easy uh until we found this ISO from stored on the internet archive with",
    "start": "1106360",
    "end": "1113200"
  },
  {
    "text": "1700 images of bears and planes and whatever that actually turned out to be",
    "start": "1113200",
    "end": "1118280"
  },
  {
    "text": "a very good Corpus for our fer and helped us explore the uh",
    "start": "1118280",
    "end": "1124559"
  },
  {
    "text": "parser all right so um at this point you know we could have just stopped here and",
    "start": "1124799",
    "end": "1131720"
  },
  {
    "text": "call it a day and that's actually what we did because we got in touch with oems",
    "start": "1131720",
    "end": "1137440"
  },
  {
    "text": "uh but then we also decided to go a step further we actually want to develop a",
    "start": "1137440",
    "end": "1142480"
  },
  {
    "text": "proof of concept to really show the impact of our findings so we went and we",
    "start": "1142480",
    "end": "1148480"
  },
  {
    "text": "bought a real device a loving Center M70 we updated the the BIOS to a version",
    "start": "1148480",
    "end": "1156520"
  },
  {
    "text": "to the latest version of the time we extracted the image parser from the BIOS we F them and then we uh basically uh",
    "start": "1156520",
    "end": "1164159"
  },
  {
    "text": "started selecting a crash that we can turn into a into a a proof of",
    "start": "1164159",
    "end": "1170159"
  },
  {
    "text": "concept and uh we found one of these crashes uh that um was both targeting a",
    "start": "1170159",
    "end": "1177320"
  },
  {
    "text": "simple format and also it was very likely to be exploitable in the PNG parser uh developed by Ami that is",
    "start": "1177320",
    "end": "1185320"
  },
  {
    "text": "present on this device uh before I show you the back door uh I just want to remind I how PNG Works in particular for",
    "start": "1185320",
    "end": "1193280"
  },
  {
    "text": "this parser and uh what it does this parer is to First first of all find the",
    "start": "1193280",
    "end": "1199840"
  },
  {
    "text": "I Adder chunk that contains a bunch of information about the image such as the width and the height and then uh it",
    "start": "1199840",
    "end": "1207880"
  },
  {
    "text": "basically takes all the a chunks and stores them into a um into a",
    "start": "1207880",
    "end": "1214559"
  },
  {
    "text": "buffer and uh this buffer is then uh decompressed into a third buffer called",
    "start": "1214559",
    "end": "1221480"
  },
  {
    "text": "that we call out buffer and this is actually the final data that we will be displayed on the on the screen and the",
    "start": "1221480",
    "end": "1229039"
  },
  {
    "text": "buet you selected as a starting point is an integer overflow on the 32-bit value",
    "start": "1229039",
    "end": "1235600"
  },
  {
    "text": "used as allocation size as you can see on the screenshot we are calling the",
    "start": "1235600",
    "end": "1242039"
  },
  {
    "text": "allocate zero pool function uh and we pass a value that depends on PNG width",
    "start": "1242039",
    "end": "1248880"
  },
  {
    "text": "and this PNG width is what is read from the PNG adder and uh the problem is that this",
    "start": "1248880",
    "end": "1256480"
  },
  {
    "text": "multiplication can actually overflow when PNG width becomes uh you know large",
    "start": "1256480",
    "end": "1263559"
  },
  {
    "text": "enough and uh what it turns out is that um we will basically allocate an output",
    "start": "1263559",
    "end": "1271080"
  },
  {
    "text": "buffer which is not big enough to contain the uncompressed data and by",
    "start": "1271080",
    "end": "1278039"
  },
  {
    "text": "using this bug is actually very straightforward to get a e overflow with",
    "start": "1278039",
    "end": "1285320"
  },
  {
    "text": "arbitrary content and arbitrary length but wait a minute so how does e",
    "start": "1285320",
    "end": "1292400"
  },
  {
    "text": "exploitation even work for ufi uh you know if you were pointing the Linux",
    "start": "1292400",
    "end": "1297480"
  },
  {
    "text": "kernel or some other um some other Target we will maybe just go on the",
    "start": "1297480",
    "end": "1302600"
  },
  {
    "text": "internet and find some recent V traps and maybe try to cannibalize some techniques from there but uh for ufi",
    "start": "1302600",
    "end": "1308880"
  },
  {
    "text": "there is not anything out there the second big problem is that um we don't",
    "start": "1308880",
    "end": "1314120"
  },
  {
    "text": "have uh any debugging capabilities on the device because because Intel DCI",
    "start": "1314120",
    "end": "1319400"
  },
  {
    "text": "doesn't work on new CPU models and also Intel boot card uh prevents replacing",
    "start": "1319400",
    "end": "1327000"
  },
  {
    "text": "modules so we cannot for instance try to inject some debugging stabs into any of",
    "start": "1327000",
    "end": "1333159"
  },
  {
    "text": "the modules because boot guard will prevent us to do so and uh the other big",
    "start": "1333159",
    "end": "1339520"
  },
  {
    "text": "problem is that we actually don't get any sort of output even on Crash we just see a blank screen but okay let's maybe",
    "start": "1339520",
    "end": "1347000"
  },
  {
    "text": "solve one problem at the time so how the ufi works is actually pretty simple the",
    "start": "1347000",
    "end": "1353799"
  },
  {
    "text": "ufi is pool based meaning that the I manager um keeps different free list",
    "start": "1353799",
    "end": "1361840"
  },
  {
    "text": "which are sorted by size and when it receive a memory allocation request uh",
    "start": "1361840",
    "end": "1367200"
  },
  {
    "text": "via the allocate pool function which is basically Malo uh it just finds the correct fre list un links the first",
    "start": "1367200",
    "end": "1374320"
  },
  {
    "text": "element and then return this element to to the caller",
    "start": "1374320",
    "end": "1379960"
  },
  {
    "text": "once we call free on a chunk uh the IP manager will take some metadata from the",
    "start": "1380400",
    "end": "1387080"
  },
  {
    "text": "pool and pool tail objects and these metadata are uh are basically all the",
    "start": "1387080",
    "end": "1392840"
  },
  {
    "text": "information that the manager needs to put this chunk back into the correct free",
    "start": "1392840",
    "end": "1399240"
  },
  {
    "text": "list and uh you know from this uh from these internals of the ufi and this is",
    "start": "1399240",
    "end": "1406720"
  },
  {
    "text": "also what happens in many other allocation uh allocator sorry um this",
    "start": "1406720",
    "end": "1412559"
  },
  {
    "text": "means that um allocated and free chunks actually Co coexist in memory they are",
    "start": "1412559",
    "end": "1418799"
  },
  {
    "text": "in the same Pages they are one after the other and uh since we are exploiting an nip overflow this means that we can then",
    "start": "1418799",
    "end": "1427480"
  },
  {
    "text": "overflow either in an allocated chunk or uh in a free chunk but there is a little",
    "start": "1427480",
    "end": "1434600"
  },
  {
    "text": "problem guys is that we don't have any debugging capabilities so we cannot just",
    "start": "1434600",
    "end": "1439919"
  },
  {
    "text": "put the break point where the Overflow happens and check what's after our chunk um so we don't even know what we",
    "start": "1439919",
    "end": "1447559"
  },
  {
    "text": "are overflowing into now some good news finally uh the",
    "start": "1447559",
    "end": "1453760"
  },
  {
    "text": "first good news is that uh um ufi memory is actually not cleared after the",
    "start": "1453760",
    "end": "1460400"
  },
  {
    "text": "operating system start so if the operating system doesn't overwrite it uh",
    "start": "1460400",
    "end": "1465679"
  },
  {
    "text": "we can just dump the mem M used by ufi it's somewhere there in in memory and",
    "start": "1465679",
    "end": "1472039"
  },
  {
    "text": "the second good news is that um uh the developers of this Library forgot to",
    "start": "1472039",
    "end": "1477760"
  },
  {
    "text": "call free on the output buffer so this means that by simply using a pattern we",
    "start": "1477760",
    "end": "1484279"
  },
  {
    "text": "can search where where out our output buffer is and now I know that",
    "start": "1484279",
    "end": "1489440"
  },
  {
    "text": "everybody's looking at what's allocated after the output buffer because this is what uh you know looks like we can",
    "start": "1489440",
    "end": "1497159"
  },
  {
    "text": "overflow in into the problem is that this is actually not the object that we can",
    "start": "1497159",
    "end": "1503760"
  },
  {
    "text": "corrupt because this view of the memory uh is a view that we get way after the",
    "start": "1503760",
    "end": "1511080"
  },
  {
    "text": "Overflow can happen and so this means that uh thep layout and thep um chunks",
    "start": "1511080",
    "end": "1518039"
  },
  {
    "text": "the state actually change so what we looking at is actually the last object",
    "start": "1518039",
    "end": "1523520"
  },
  {
    "text": "that was left there not the object that is there uh at the Overflow time so we",
    "start": "1523520",
    "end": "1529000"
  },
  {
    "text": "basically need to find a way to with our overflow to fix the object which is",
    "start": "1529000",
    "end": "1535039"
  },
  {
    "text": "there so we can uh basically inspect it and see if you can corrupt it and we actually found this technique um to",
    "start": "1535039",
    "end": "1541640"
  },
  {
    "text": "preserve e chunks which is um we actually found it by reading the",
    "start": "1541640",
    "end": "1547320"
  },
  {
    "text": "free the source code of of the free function and as you can see in the Box",
    "start": "1547320",
    "end": "1552840"
  },
  {
    "text": "one of the first thing that the free function does is to check if the",
    "start": "1552840",
    "end": "1559679"
  },
  {
    "text": "signature of the chunk that we are freeing matches a certain value uh and",
    "start": "1559679",
    "end": "1566559"
  },
  {
    "text": "if it doesn't free simply returns with an invalid parameter error so if the",
    "start": "1566559",
    "end": "1574200"
  },
  {
    "text": "signature doesn't match the chunk that we are free freeing is not put back into the fre list and is not",
    "start": "1574200",
    "end": "1580720"
  },
  {
    "text": "reused so this means that with our overflow we can simply corrupt the",
    "start": "1580720",
    "end": "1586320"
  },
  {
    "text": "signature of the next chunk and that chunk will stay there because it it will not be reused for any other",
    "start": "1586320",
    "end": "1592919"
  },
  {
    "text": "uh any further memory allocation and the technique works as you can see here we",
    "start": "1592919",
    "end": "1599279"
  },
  {
    "text": "just brought an X where the signature of the allocated chunk is and what we're",
    "start": "1599279",
    "end": "1604840"
  },
  {
    "text": "looking at finally is the object which is there at the Overflow",
    "start": "1604840",
    "end": "1610640"
  },
  {
    "text": "time okay let's do a little recap what we achieved so far is that we have",
    "start": "1610640",
    "end": "1616760"
  },
  {
    "text": "arbitrary FL on the E we can prevent the next Chunk from being freed and we can",
    "start": "1616760",
    "end": "1623080"
  },
  {
    "text": "also inspect the object which is stored into the next chunk so what's left uh we",
    "start": "1623080",
    "end": "1630399"
  },
  {
    "text": "need to find first of all a good candidate for corruption and we also need to get code",
    "start": "1630399",
    "end": "1636760"
  },
  {
    "text": "execution out of it um now in general um e overflows",
    "start": "1636760",
    "end": "1643240"
  },
  {
    "text": "usually uh require um strong allocation and the location Primitives what I mean",
    "start": "1643240",
    "end": "1649240"
  },
  {
    "text": "I mean that the attacker usually does hundreds of allocations and delocation in arbitrary order to basically bring",
    "start": "1649240",
    "end": "1656679"
  },
  {
    "text": "the Hep in a state that is favorable to the attacker um we don't have such a good",
    "start": "1656679",
    "end": "1662679"
  },
  {
    "text": "Primitives in our case but uh we can actually influence the state of the hip",
    "start": "1662679",
    "end": "1670039"
  },
  {
    "text": "by adding and removing uh certain PNG chunks and changing their sizes so",
    "start": "1670039",
    "end": "1676720"
  },
  {
    "text": "basically uh by you know doing these modifications to the PNG we can actually",
    "start": "1676720",
    "end": "1682240"
  },
  {
    "text": "influence the state of the and so this means that our outut buffer will be allocated in different uh portion of the",
    "start": "1682240",
    "end": "1689600"
  },
  {
    "text": "memory and uh after a while of trying with this combination of B&G chunks we",
    "start": "1689600",
    "end": "1694960"
  },
  {
    "text": "found that uh our output buffer was allocated just before a protocol entry",
    "start": "1694960",
    "end": "1703039"
  },
  {
    "text": "and at this point you know we finally felt that adrenaline rush we knew that",
    "start": "1703039",
    "end": "1708399"
  },
  {
    "text": "we were going to bring this home uh because protocols and protocol entry are",
    "start": "1708399",
    "end": "1714159"
  },
  {
    "text": "a super core Concept in ufi and uh protocol entry has actually",
    "start": "1714159",
    "end": "1721240"
  },
  {
    "text": "multiple pointers to objects that reference um interfaces and function",
    "start": "1721240",
    "end": "1727720"
  },
  {
    "text": "pointers so this means that by overflowing inside the protocol entry we",
    "start": "1727720",
    "end": "1733120"
  },
  {
    "text": "can change where these pointer points and so we can maybe you know uh Force the ufi system to call one of",
    "start": "1733120",
    "end": "1741760"
  },
  {
    "text": "the one of our interfaces and uh we actually sorry we",
    "start": "1741760",
    "end": "1748200"
  },
  {
    "text": "actually had the multiple venue of corruption uh either corrupting objects related to the",
    "start": "1748200",
    "end": "1754320"
  },
  {
    "text": "protocols interface or object related to the notification system and in the end",
    "start": "1754320",
    "end": "1759840"
  },
  {
    "text": "we decided to Target the second one and uh long story short what happens is that",
    "start": "1759840",
    "end": "1766000"
  },
  {
    "text": "um the ufi as um this event system and events are",
    "start": "1766000",
    "end": "1772919"
  },
  {
    "text": "generated when Protocols are installed so with our overflow we can um simply",
    "start": "1772919",
    "end": "1780240"
  },
  {
    "text": "recreate all the structures that are needed by the ufi event system such that",
    "start": "1780240",
    "end": "1787159"
  },
  {
    "text": "when the protocol that we specify in the protocol entry is installed our cack Handler function will be",
    "start": "1787159",
    "end": "1794799"
  },
  {
    "text": "executed no worries we will actually publish the blog post with all the details about the exploitation I know",
    "start": "1794799",
    "end": "1800880"
  },
  {
    "text": "maybe it's a little bit difficult to to see for the first time um but uh",
    "start": "1800880",
    "end": "1806200"
  },
  {
    "text": "basically using this technique when this protocol that we specifying protocol entry will be installed we will get uh",
    "start": "1806200",
    "end": "1812799"
  },
  {
    "text": "you know our call back Handler function called and the last bit that we need to",
    "start": "1812799",
    "end": "1818120"
  },
  {
    "text": "sort is uh where we want to jump and turns out that finally this is very easy",
    "start": "1818120",
    "end": "1824480"
  },
  {
    "text": "uh in ufi because the memory region where mvam variables are stored is more",
    "start": "1824480",
    "end": "1831559"
  },
  {
    "text": "often not executable and uh and is always mapped at the same address so this means that",
    "start": "1831559",
    "end": "1838000"
  },
  {
    "text": "we can simply store our Shell Code there and it's is going to be always there and",
    "start": "1838000",
    "end": "1843720"
  },
  {
    "text": "it's going to be in a region which is um um executable um at this stage you",
    "start": "1843720",
    "end": "1851600"
  },
  {
    "text": "have full control over the platform and uh that's actually what you want to show",
    "start": "1851600",
    "end": "1856919"
  },
  {
    "text": "with our Shell Code we didn't just settle for a simple Shell Code that can print an L word or you know a pone",
    "start": "1856919",
    "end": "1863080"
  },
  {
    "text": "message or some some some stuff like that we actually did somot Advanced Shell Code uh because what it does is",
    "start": "1863080",
    "end": "1870279"
  },
  {
    "text": "that uh it first of all disables secure boot so it can start a second stage",
    "start": "1870279",
    "end": "1876480"
  },
  {
    "text": "payload that we store on the dis and this second stage payload is able to uh",
    "start": "1876480",
    "end": "1884840"
  },
  {
    "text": "replace the an NTFS driver that is loaded with a driver",
    "start": "1884840",
    "end": "1890880"
  },
  {
    "text": "that supports wres to the file system so that the second stage payload is then",
    "start": "1890880",
    "end": "1896919"
  },
  {
    "text": "also able to create a file on the Windows File system and you know this is just to Showcase a little bit uh uh some",
    "start": "1896919",
    "end": "1904039"
  },
  {
    "text": "Advanced behaviors of threats at this uh at this level okay let's put it all together",
    "start": "1904039",
    "end": "1911440"
  },
  {
    "text": "then I just have a a short demo video to show and then we are done uh",
    "start": "1911440",
    "end": "1917840"
  },
  {
    "text": "how a logo fil ATT Tax Works and how we uh develop our proof of concept first of",
    "start": "1917840",
    "end": "1923000"
  },
  {
    "text": "all we store a malicious PNG on the ESP or in the MV Ram depending on different",
    "start": "1923000",
    "end": "1929840"
  },
  {
    "text": "customization method which are used in the firmware uh then we create all the",
    "start": "1929840",
    "end": "1935039"
  },
  {
    "text": "notification objects such as protocol notify the I event and the Shell Code",
    "start": "1935039",
    "end": "1940840"
  },
  {
    "text": "and we store them in mvam we save a second second stage p on",
    "start": "1940840",
    "end": "1945880"
  },
  {
    "text": "disk and we reboot this system now uh the system will start to boot and as soon as it will pick up our",
    "start": "1945880",
    "end": "1955480"
  },
  {
    "text": "um PNG image will parse it and the he overflow will",
    "start": "1955480",
    "end": "1960679"
  },
  {
    "text": "happen the he overflow will corrupt the protocol entry and we'll set all the pointers to the protocol notify and to",
    "start": "1960679",
    "end": "1968360"
  },
  {
    "text": "the I event structure that we stored in vam when the protocol that we specified",
    "start": "1968360",
    "end": "1974000"
  },
  {
    "text": "during the corruption during the overflow will be installed we will achieve uh arbitrary code execution and",
    "start": "1974000",
    "end": "1981240"
  },
  {
    "text": "um this arbitary code execution we will be seen with a Shell Code running that is also able to um run a second stage",
    "start": "1981240",
    "end": "1990240"
  },
  {
    "text": "payload all right so we actually have a cool demo",
    "start": "1990240",
    "end": "1995679"
  },
  {
    "text": "uh let's see if it works hopefully does cool so this is the demo that we uh",
    "start": "1995679",
    "end": "2001200"
  },
  {
    "text": "recorded on the device that I showed you at the beginning of of this section and as you can see here we are just logging",
    "start": "2001200",
    "end": "2006760"
  },
  {
    "text": "in inside the windows 11 machine then we start the terminal with the admin",
    "start": "2006760",
    "end": "2014399"
  },
  {
    "text": "privileges we now check that uh modern security features such as secure Boot",
    "start": "2014399",
    "end": "2020120"
  },
  {
    "text": "and boot guard are actually enabled so you know we didn't cut any corner to make this demo and we finally execute",
    "start": "2020120",
    "end": "2029159"
  },
  {
    "text": "our PC this all creates all the enir stuff it saves the PNG and now we reboot the",
    "start": "2029159",
    "end": "2036159"
  },
  {
    "text": "system now as soon as the system will reboot you will see a message printed on",
    "start": "2036159",
    "end": "2042600"
  },
  {
    "text": "the screen and This Is Us printing from firmware uh which is pretty cool I think",
    "start": "2042600",
    "end": "2048839"
  },
  {
    "text": "and now as you can see we log in into windows and our second stage perod was able uh to inject a file on the Windows",
    "start": "2048839",
    "end": "2057280"
  },
  {
    "text": "F system so it it worked out in the",
    "start": "2057280",
    "end": "2063599"
  },
  {
    "text": "end thank you guys this was very very painful to uh to develop because of the",
    "start": "2063599",
    "end": "2070280"
  },
  {
    "text": "not debugging capabilities and the basically blank screen or working behavior that device has so I really",
    "start": "2070280",
    "end": "2076200"
  },
  {
    "text": "appreciate these round of applauses uh okay let me just recap and",
    "start": "2076200",
    "end": "2082440"
  },
  {
    "text": "we are done um the majority of ufi firmware out there contains uh",
    "start": "2082440",
    "end": "2087679"
  },
  {
    "text": "vulnerable image parsers uh and we found that hundreds of devices from Lenovo Intel and Acer",
    "start": "2087679",
    "end": "2096320"
  },
  {
    "text": "actually allow uh logo customization and so they are very likely exploit",
    "start": "2096320",
    "end": "2102040"
  },
  {
    "text": "exploitable uh for like an attack that that we just show in the video logo fail",
    "start": "2102040",
    "end": "2108119"
  },
  {
    "text": "doesn't require any sort of physical access it can be done entirely from the",
    "start": "2108119",
    "end": "2113359"
  },
  {
    "text": "operating system and uh it targets uh is cross silicon because it targets both x86 and",
    "start": "2113359",
    "end": "2120560"
  },
  {
    "text": "armed devices and also modern defenses such as secure boot or boot guard are",
    "start": "2120560",
    "end": "2126160"
  },
  {
    "text": "completely effective uh against it I just also want to take a second to",
    "start": "2126160",
    "end": "2132640"
  },
  {
    "text": "uh say big thanks to sear CC for helping us coordinating this massive",
    "start": "2132640",
    "end": "2138760"
  },
  {
    "text": "industrywide disclosure and I also want to take a second this is more a little bit on on a",
    "start": "2138760",
    "end": "2145000"
  },
  {
    "text": "s side of things H is that unfortunately not all vendors follow strict embargo",
    "start": "2145000",
    "end": "2151280"
  },
  {
    "text": "date and some of them um they publish details uh a week before they supposed",
    "start": "2151280",
    "end": "2158359"
  },
  {
    "text": "to and that's not all that's not it because they also don't credit the vendors and this is you know not a",
    "start": "2158359",
    "end": "2165880"
  },
  {
    "text": "behavior that I think in 2023 should be acceptable anymore in the security Community I thought you know we left",
    "start": "2165880",
    "end": "2171480"
  },
  {
    "text": "this stuff in in the past all right guys so that was it thank",
    "start": "2171480",
    "end": "2176800"
  },
  {
    "text": "you very much for your attention if you have any question please just go to the microphone if you see me around the",
    "start": "2176800",
    "end": "2181920"
  },
  {
    "text": "conference please just come and talk with me I'm always super happy to talk about fmer security and of course don't",
    "start": "2181920",
    "end": "2188040"
  },
  {
    "text": "forget to update your fmer thank you very [Applause]",
    "start": "2188040",
    "end": "2199749"
  },
  {
    "text": "much maybe a short",
    "start": "2203400",
    "end": "2208119"
  },
  {
    "text": "question so have you considered to try to read out the memory using PCI",
    "start": "2208640",
    "end": "2215160"
  },
  {
    "text": "Express um no that's that's something that we didn't consider okay but yeah I",
    "start": "2215160",
    "end": "2220839"
  },
  {
    "text": "think I think you you can do some uh something with that but that will require some um physical access to the",
    "start": "2220839",
    "end": "2226960"
  },
  {
    "text": "device right thank you so I have a question on",
    "start": "2226960",
    "end": "2233720"
  },
  {
    "text": "um two things first thing is so to in order to use this vulnerability you need to be you need to have administrator",
    "start": "2233720",
    "end": "2239599"
  },
  {
    "text": "privileges because to write in the ESP you need to be root on Linux or admin on Windows to write a UF variable you need",
    "start": "2239599",
    "end": "2245880"
  },
  {
    "text": "to also be some sort of administrator so in the context of secure boot you need to",
    "start": "2245880",
    "end": "2250960"
  },
  {
    "text": "compromise completely the machine first which is already booted in order to further compromise the fare right y so",
    "start": "2250960",
    "end": "2258720"
  },
  {
    "text": "uh my first question is what do we expect to gain from um if we already have all those privileges the best we",
    "start": "2258720",
    "end": "2264800"
  },
  {
    "text": "can do is persistence right or is there more to is there more to that no I I I definitely see your point um what I can",
    "start": "2264800",
    "end": "2272079"
  },
  {
    "text": "say is that uh we are uh going over a boundary which we should not be able to",
    "start": "2272079",
    "end": "2279240"
  },
  {
    "text": "um to you know to overcome because you know you shouldn't be able to execute a Dixie code from the operating system and",
    "start": "2279240",
    "end": "2286160"
  },
  {
    "text": "you know even if you have the highest privileges on the OS so this is what we want to show to Showcase here okay and",
    "start": "2286160",
    "end": "2292680"
  },
  {
    "text": "also um depending at what stage of Dixie the the the um the parsing happens",
    "start": "2292680",
    "end": "2300680"
  },
  {
    "text": "you might be able to actually have some U stronger primitive than just by passing secure boot so you can implant",
    "start": "2300680",
    "end": "2307960"
  },
  {
    "text": "really um some um some boot kit or some stuff like that that level that that was",
    "start": "2307960",
    "end": "2313040"
  },
  {
    "text": "my followup question quickly um you talk about secure boot what about maure boot in this context uh I'm not super",
    "start": "2313040",
    "end": "2320480"
  },
  {
    "text": "familiar with that if I have to be honest uh just if you can just shoot as an email uh I think that would be you",
    "start": "2320480",
    "end": "2325760"
  },
  {
    "text": "know the the best way sure thank you so much",
    "start": "2325760",
    "end": "2330880"
  },
  {
    "text": "thanks so thank you for fantastic talk um my first question was just to ask",
    "start": "2330880",
    "end": "2336319"
  },
  {
    "text": "from from the uh guy before me so I go with my second one um if there is a",
    "start": "2336319",
    "end": "2341880"
  },
  {
    "text": "system uh so that the hardware is encrypted by bit Locker or something else um this logo fil is it able to to",
    "start": "2341880",
    "end": "2350480"
  },
  {
    "text": "write in the encrypted area or just can decrypt it honestly I'm not super",
    "start": "2350480",
    "end": "2356240"
  },
  {
    "text": "familiar with beat Locker as well so I I don't know I think that's the best answer that that I can give you um I",
    "start": "2356240",
    "end": "2363839"
  },
  {
    "text": "will I will I will check and uh you know maybe we do some exploration in that in that area as well but again if you shoot",
    "start": "2363839",
    "end": "2369960"
  },
  {
    "text": "us an email you know we will uh we will figure it out okay perfect thank you hello thank you for talk for your",
    "start": "2369960",
    "end": "2377240"
  },
  {
    "text": "talk uh could you explain how you U injected your logo from operation system",
    "start": "2377240",
    "end": "2382920"
  },
  {
    "text": "because for the good vendor uh right access to the SPI Flash",
    "start": "2382920",
    "end": "2388240"
  },
  {
    "text": "in any place is forbidden yeah yeah yes some vendors like gigabyte allows you to",
    "start": "2388240",
    "end": "2395079"
  },
  {
    "text": "rewrite flesh at all but you know I I I definitely see your point uh we actually",
    "start": "2395079",
    "end": "2400599"
  },
  {
    "text": "found that uh you know the oems actually have different customizations that allow",
    "start": "2400599",
    "end": "2408160"
  },
  {
    "text": "they have different methods that allow a logo to be customized and in certain cases uh you",
    "start": "2408160",
    "end": "2414319"
  },
  {
    "text": "know the logo is just red from the ESP so you don't need to flash anything the Spy flash it's already well locked as as",
    "start": "2414319",
    "end": "2422000"
  },
  {
    "text": "you as you said so you don't need to compromise anything there you just need to store your logo in the I I hope I got",
    "start": "2422000",
    "end": "2428920"
  },
  {
    "text": "your question uh I understand I I mean that from operation system you don't",
    "start": "2428920",
    "end": "2433960"
  },
  {
    "text": "have access uh direct access to spare controller because it's available only from smm yeah for example you updating",
    "start": "2433960",
    "end": "2441160"
  },
  {
    "text": "your framew through smm and smm in general checks check signature or",
    "start": "2441160",
    "end": "2446240"
  },
  {
    "text": "something like this and how you bypass this we don't need to bypass it because",
    "start": "2446240",
    "end": "2451920"
  },
  {
    "text": "these mechanism are already embedded into the firmware of your device so your fare without changing anything",
    "start": "2451920",
    "end": "2460000"
  },
  {
    "text": "will already go and check if there is any image in uh on the ESP or inside an",
    "start": "2460000",
    "end": "2467400"
  },
  {
    "text": "NV variable or other stuff if you refer to the second case um the the section where the logo is",
    "start": "2467400",
    "end": "2476200"
  },
  {
    "text": "stored is actually unsigned so we can just store a logo there in the capsule",
    "start": "2476200",
    "end": "2481480"
  },
  {
    "text": "update and then we can just use that to flash and nobody will complain bio guard",
    "start": "2481480",
    "end": "2486760"
  },
  {
    "text": "or or any other smm uh smm stuff because that that part is not",
    "start": "2486760",
    "end": "2493280"
  },
  {
    "text": "signed so we don't need to compromise the Spy flash or to put any additional",
    "start": "2493280",
    "end": "2498640"
  },
  {
    "text": "code there it's everything is is already there all the logic is already there we just need to basically save the the logo",
    "start": "2498640",
    "end": "2504599"
  },
  {
    "text": "where the firmare expects it I see it means that you got uh the origin capsule",
    "start": "2504599",
    "end": "2509960"
  },
  {
    "text": "from I don't know from internet and just uh remove original image and push uh put",
    "start": "2509960",
    "end": "2515480"
  },
  {
    "text": "your image inside site and just uh trigger uh fir update proced yes but",
    "start": "2515480",
    "end": "2520839"
  },
  {
    "text": "that that doesn't work for every oems that works only for the that you know",
    "start": "2520839",
    "end": "2526079"
  },
  {
    "text": "yeah leave because sometimes the whole capsule has a signatur at all yeah exactly exactly exactly yes yeah thank",
    "start": "2526079",
    "end": "2532880"
  },
  {
    "text": "you no worries we are done okay sorry let's",
    "start": "2532880",
    "end": "2539359"
  },
  {
    "text": "just have a quick chat later so sorry do I talk now chat after that just one okay",
    "start": "2539359",
    "end": "2547000"
  },
  {
    "text": "okay cool um you said that um if you just do the sorts of blind fuzzing of it",
    "start": "2547000",
    "end": "2553319"
  },
  {
    "text": "without trying to construction exploit it breaks the device to what extent does it break the device is it something",
    "start": "2553319",
    "end": "2558720"
  },
  {
    "text": "where I can fix something on the hard disk or is it a full Hardware mess up",
    "start": "2558720",
    "end": "2564240"
  },
  {
    "text": "because I could see you know a reasonably low skill attacker you know filling an entire Enterprise's PC that",
    "start": "2564240",
    "end": "2571079"
  },
  {
    "text": "and just killing everything at a yes that's that's that's something that unfortunately can happen uh because I",
    "start": "2571079",
    "end": "2576680"
  },
  {
    "text": "mean the device is bricked in the sense not that is broken but you know all the",
    "start": "2576680",
    "end": "2582440"
  },
  {
    "text": "hardware works well the problem is that U once the firmware starts to basically",
    "start": "2582440",
    "end": "2590319"
  },
  {
    "text": "the firmware just throw an exception a page fold or whatever and so the CPU will stop there at the parsing uh the",
    "start": "2590319",
    "end": "2596200"
  },
  {
    "text": "parsing routines it will not progress to the operating system and um depending on",
    "start": "2596200",
    "end": "2601599"
  },
  {
    "text": "the customization mechanism that are implemented in the firmware uh in some cases you may need to uh remove the hard",
    "start": "2601599",
    "end": "2609520"
  },
  {
    "text": "drive and remove the logo from the ESP so when you put the drive back and you just boot the firmware will not find the",
    "start": "2609520",
    "end": "2615880"
  },
  {
    "text": "logo there and and it will not just uh it will just boot but in other cases instead like in the UN signed firware",
    "start": "2615880",
    "end": "2623720"
  },
  {
    "text": "capsule update for those cases you need to go there and to really um attach the",
    "start": "2623720",
    "end": "2630280"
  },
  {
    "text": "Spy flash ship and to erase the place where this is yeah because you don't",
    "start": "2630280",
    "end": "2635839"
  },
  {
    "text": "have a controller right of on on the device it's um yeah can be a problem",
    "start": "2635839",
    "end": "2642079"
  },
  {
    "text": "than thank you all right perfect no I I think I think we're done let's just have a chat",
    "start": "2642079",
    "end": "2649000"
  },
  {
    "text": "all right thank you very much [Applause] again",
    "start": "2649000",
    "end": "2656119"
  }
]