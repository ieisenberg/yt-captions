[
  {
    "start": "0",
    "end": "107000"
  },
  {
    "text": "hi everyone like candy just said my name's Jorden and I work at Microsoft's offensive cyber security research team",
    "start": "30",
    "end": "7490"
  },
  {
    "text": "today I'm going to be talking to you about exploiting hyper-v and you might be wondering okay York and Microsoft",
    "start": "7490",
    "end": "14400"
  },
  {
    "text": "what are you talking about this what's the point and so it turns out this team that I work on Microsoft to us are you",
    "start": "14400",
    "end": "21050"
  },
  {
    "text": "probably have not heard of but we are continuously writing exploits for",
    "start": "21050",
    "end": "26519"
  },
  {
    "text": "Microsoft products and the whole idea behind that is that we are hoping to that by developing these exploits",
    "start": "26519",
    "end": "33180"
  },
  {
    "text": "ourselves we will be able to get ahead of attackers and try to figure out not only where vulnerabilities are but also",
    "start": "33180",
    "end": "39000"
  },
  {
    "text": "what kind of exploit techniques will be necessary to exploit these vulnerabilities right and if we are able",
    "start": "39000",
    "end": "45000"
  },
  {
    "text": "to do that then we can come up with mitigation strategies mitigation technology that we can implement in",
    "start": "45000",
    "end": "50399"
  },
  {
    "text": "Windows before these attack techniques are actually used in the wild and so hyper-v is a target that we had you know",
    "start": "50399",
    "end": "58230"
  },
  {
    "text": "last year and I feel like it's a pretty good example of our work in terms of you",
    "start": "58230",
    "end": "64290"
  },
  {
    "text": "know giving diving deep into a component finding some vulnerabilities explaining",
    "start": "64290",
    "end": "69479"
  },
  {
    "text": "those vulnerabilities and then using our learnings from this whole operation in applying them to Windows in order to",
    "start": "69479",
    "end": "76229"
  },
  {
    "text": "harden it and so that's basically you know I just basically laid out the entire talk for you we're gonna be",
    "start": "76229",
    "end": "82020"
  },
  {
    "text": "looking at vulnerabilities in hyper-v we're going to be exploiting them and then we are going to be talking about",
    "start": "82020",
    "end": "87540"
  },
  {
    "text": "how we can make Windows better and harder to exploit in this context in addition to that there will be a live",
    "start": "87540",
    "end": "93780"
  },
  {
    "text": "demo towards the end of the talk so please don't leave like them it will be pretty cool and yeah let's get going so",
    "start": "93780",
    "end": "100799"
  },
  {
    "text": "the first thing is if we want to talk about hyper-v we need to actually understand what hyper-v is and I don't",
    "start": "100799",
    "end": "106619"
  },
  {
    "text": "expect any of you in the audience to be like intimately familiar with the well you know all the details of how hyper-v",
    "start": "106619",
    "end": "112680"
  },
  {
    "start": "107000",
    "end": "487000"
  },
  {
    "text": "works so I'm going to start a very very high level essentially this is hyper-v right if you were to use hyper-v and",
    "start": "112680",
    "end": "118860"
  },
  {
    "text": "your desktop machine this is what you would see you have your own little desktop up there and you have a little window and that little window you have",
    "start": "118860",
    "end": "124439"
  },
  {
    "text": "your own like little other desktop right so what's going on here is you have the host operating system which is hosting",
    "start": "124439",
    "end": "130560"
  },
  {
    "text": "these virtual machines and in window you have the guest operating system which is running inside of one of",
    "start": "130560",
    "end": "135720"
  },
  {
    "text": "those virtual machines and so what hyper-v is is it's the virtualization stack if that makes it possible for that",
    "start": "135720",
    "end": "142110"
  },
  {
    "text": "guest operating system to run when I look at it from a slightly more detailed point of view this is what you would get",
    "start": "142110",
    "end": "148590"
  },
  {
    "text": "to the left you have the host operating system once again so right you have the guest operating system and what you can",
    "start": "148590",
    "end": "154650"
  },
  {
    "text": "see is that the host operating system is able to talk to Hardware directly for the most part and the guest operating",
    "start": "154650",
    "end": "161760"
  },
  {
    "text": "system is not both of them are able to talk to this thing called the hypervisor which is kind of you know blob in there it's you know a level of security",
    "start": "161760",
    "end": "169650"
  },
  {
    "text": "superior to the kernel it has its own memory like even though host operating system is not meant to be able to mess",
    "start": "169650",
    "end": "175440"
  },
  {
    "text": "with that and so the hypervisor is able to talk to hardware the host operating system is able to talk the hardware but",
    "start": "175440",
    "end": "181080"
  },
  {
    "text": "the guest to us is not and you might be wondering okay well that's cool that",
    "start": "181080",
    "end": "186090"
  },
  {
    "text": "makes sense except it doesn't because what if a program in my guest OS wants to access network what if it wants to",
    "start": "186090",
    "end": "192150"
  },
  {
    "text": "access the storage it has to be able to do that somehow and so let's take an example of this process food at exe",
    "start": "192150",
    "end": "198450"
  },
  {
    "text": "which is running user mode and the guest OS so Fuu dot exe wants to access a file off of a hard disk right it's going to",
    "start": "198450",
    "end": "205890"
  },
  {
    "text": "do that by you know using some system calls to talk to the guest operating",
    "start": "205890",
    "end": "210989"
  },
  {
    "text": "system guest OS typically would just go and talk directly to the the hard drive",
    "start": "210989",
    "end": "216209"
  },
  {
    "text": "unfortunately like I just mentioned a couple times the guest OS does not have access to hardware so what happens",
    "start": "216209",
    "end": "221280"
  },
  {
    "text": "instead is the i/o stack in the kernel guest OS is going to talk to this driver",
    "start": "221280",
    "end": "227609"
  },
  {
    "text": "that lives in the guest OS kernel that's called store VSC so the SC in this context stands for virtualization",
    "start": "227609",
    "end": "233910"
  },
  {
    "text": "service client or consumer or one of those two and basically the idea is that",
    "start": "233910",
    "end": "239370"
  },
  {
    "text": "this store via C is going to kind of provide an interface that looks like a hard drive and is instead going to talk",
    "start": "239370",
    "end": "246120"
  },
  {
    "text": "to this big blob in the middle called VM bus and the n bus you can think of as a communication channel between the guest",
    "start": "246120",
    "end": "252060"
  },
  {
    "text": "and the host right and so then on the other end of the N bus of course in the host you're going to have the equivalent",
    "start": "252060",
    "end": "257190"
  },
  {
    "text": "to store BSC Villas in the host store VSP and so in this case VSP is virtualization service provider and",
    "start": "257190",
    "end": "262770"
  },
  {
    "text": "basically that's just going to decode whatever it is at store BSC is asking for and then do that operation",
    "start": "262770",
    "end": "269250"
  },
  {
    "text": "on the guest colonel it's going to go through its own i/o stack and that's going to jump into the hardware so we're",
    "start": "269250",
    "end": "275039"
  },
  {
    "text": "going to talk about hard disk get the sectors the you know the guest OS might be asking for and that's just gonna be",
    "start": "275039",
    "end": "281940"
  },
  {
    "text": "that which is cool if you think about this like a sandbox model you can really",
    "start": "281940",
    "end": "287250"
  },
  {
    "text": "think about the hoe stress of being a you know being a broker right has the ability to intercept every i/o access",
    "start": "287250",
    "end": "292680"
  },
  {
    "text": "essentially that the guest OS is going to have and so I can decide okay I want you to be able to access this piece of",
    "start": "292680",
    "end": "297960"
  },
  {
    "text": "hardware I want you to be able to access this piece of harder but not naturally like this other piece of hardware right and middle that of course the guest OS",
    "start": "297960",
    "end": "304410"
  },
  {
    "text": "does not have access to old memory it only has access to a few CPU cores which are is decided by the hypervisor and so",
    "start": "304410",
    "end": "309830"
  },
  {
    "text": "yeah we have like a very tight grip on what the guest OS has access to or not",
    "start": "309830",
    "end": "316370"
  },
  {
    "text": "now the thing is I just talked about VM bus as like this kind of blob communications channel between the host",
    "start": "316370",
    "end": "322050"
  },
  {
    "text": "and the guest didn't really explain how it works and it's kind of important the thing is you might be thinking okay if",
    "start": "322050",
    "end": "328020"
  },
  {
    "text": "you looked at that last slide we actually have the guest to us and the host to us have access to the hypervisor right so we might as well just use the",
    "start": "328020",
    "end": "333630"
  },
  {
    "text": "hypervisor has that communications channel of course you don't really want to do that because context switches into the hypervisor all the time archive",
    "start": "333630",
    "end": "339270"
  },
  {
    "text": "expensive so instead what you're gonna do is use this concept of shared memory between the guest in the host and",
    "start": "339270",
    "end": "344570"
  },
  {
    "text": "basically what's got was gonna be happening there is you're just gonna pick a piece of memory in physical",
    "start": "344570",
    "end": "350039"
  },
  {
    "text": "memory and you're going to be able to map it in both the hosts memory space and the guest memory space once that",
    "start": "350039",
    "end": "356669"
  },
  {
    "text": "happens you can kind of have the embossed interpret that piece of memory as a ring buffer which means that you",
    "start": "356669",
    "end": "362009"
  },
  {
    "text": "know you're just going to copy a packet into it and another packet in another packet and then from once you run out of space just start over and so based on",
    "start": "362009",
    "end": "370500"
  },
  {
    "text": "that transferring data to and from the host is pretty simple you just have this packet in your VSC you copy it into the",
    "start": "370500",
    "end": "377520"
  },
  {
    "text": "ring buffer since that piece of memory is shared the package just like magically shows up everywhere this piece",
    "start": "377520",
    "end": "382889"
  },
  {
    "text": "of memory is mapped out and then the host will be alerted that there's a packet in there it's going to grab it interpret it do whatever it wants with",
    "start": "382889",
    "end": "389699"
  },
  {
    "text": "it and then that'll be that the only problem with that is of course this we have ring buffer and you know this these",
    "start": "389699",
    "end": "396419"
  },
  {
    "text": "machines are highly well you know modern machines have a lot of threads a lot of different components",
    "start": "396419",
    "end": "402130"
  },
  {
    "text": "might want to be able to talk to the host to us and using a ring buffer for that is kind of problematic if you're",
    "start": "402130",
    "end": "407949"
  },
  {
    "text": "going to be locking the ring buffer constantly in order to talk to the host OS side of things you are not going to",
    "start": "407949",
    "end": "415300"
  },
  {
    "text": "be able to send a lot of packets at least not a lot of packets they're really big because if you're gonna be constantly copying memory in and out of",
    "start": "415300",
    "end": "421960"
  },
  {
    "text": "the ring buffer well that takes time everything is serialized because the spring buffer and that's not ideal so in",
    "start": "421960",
    "end": "428110"
  },
  {
    "text": "order to palette like deal with that problem we introduced this concept of shared memory that is that can be sent",
    "start": "428110",
    "end": "434289"
  },
  {
    "text": "from the guest to the host through VM bus and so you have this kind of thing there the GP ADL I call it a G paddle",
    "start": "434289",
    "end": "440740"
  },
  {
    "text": "that stands for guest physical address descriptor list if you're familiar with with Windows kernel lingo this is",
    "start": "440740",
    "end": "448210"
  },
  {
    "text": "basically an MDL that can span you know the the boundary between the host and the guest so the idea is that the guest",
    "start": "448210",
    "end": "454840"
  },
  {
    "text": "is going to allocate this piece of memory there's going to say okay I want to send that piece of memory over to the host and instead of copying that memory",
    "start": "454840",
    "end": "461349"
  },
  {
    "text": "in and out of the vorenii buffer is just going to basically give a reference to that piece of memory and then that piece",
    "start": "461349",
    "end": "466900"
  },
  {
    "text": "of memory is going to be mapped into the host OS and the host OS at that point can do whatever it wants with it I could",
    "start": "466900",
    "end": "471940"
  },
  {
    "text": "copy memory out of it can't copy memory into it it can keep it map or on map it or whatever and that's basically the way",
    "start": "471940",
    "end": "478599"
  },
  {
    "text": "you're going to be able to send larger amounts of data a hilar higher frequency than you would be able to adjust a ring",
    "start": "478599",
    "end": "484990"
  },
  {
    "text": "buffer so at this point you are essentially hyper-v experts at least as",
    "start": "484990",
    "end": "491020"
  },
  {
    "start": "487000",
    "end": "937000"
  },
  {
    "text": "far as I'm concerned because I'm not a hyper-v expert this is basically all I know about it and you know I'm I'm here",
    "start": "491020",
    "end": "497110"
  },
  {
    "text": "to write exploits right here at 5:00 ulnar abilities and so once we have this level of context for hyper-v which is",
    "start": "497110",
    "end": "502300"
  },
  {
    "text": "all you're going to need for rest of the talk we are going to be looking into a specific component and this component is",
    "start": "502300",
    "end": "508030"
  },
  {
    "text": "VM switch VMs which is just the VSP that provides network access to the guests",
    "start": "508030",
    "end": "514180"
  },
  {
    "text": "there's really nothing fancy here it's basically the same diagram as showing you earlier except that VM switch is",
    "start": "514180",
    "end": "520659"
  },
  {
    "text": "going to be accessing the network card instead of a hard disk right so the",
    "start": "520659",
    "end": "525700"
  },
  {
    "text": "thing that you're going to notice here first is much like store VSP VM switch war lives in the host OS kernel",
    "start": "525700",
    "end": "531649"
  },
  {
    "text": "so that means that we are able to find a vulnerability in the EM switch and compromise you know the host through VM",
    "start": "531649",
    "end": "537079"
  },
  {
    "text": "switch then we'll have full control over the host OS we won't have to escalate out of user mode or anything we'll just",
    "start": "537079",
    "end": "543740"
  },
  {
    "text": "kind of be there we'll be done it'll be great so that makes it a pretty good target the other thing to know about VM",
    "start": "543740",
    "end": "550339"
  },
  {
    "text": "switch is the way that it works is it implements this protocol which is the",
    "start": "550339",
    "end": "555800"
  },
  {
    "text": "Ardis protocol which stands for remote network device interface something and basically that's a protocol that was",
    "start": "555800",
    "end": "561800"
  },
  {
    "text": "introduced by Microsoft awhile ago that is typically used to access network cards over USB",
    "start": "561800",
    "end": "566959"
  },
  {
    "text": "so really the emphasis you can kind of think of as a USB network card that is",
    "start": "566959",
    "end": "571999"
  },
  {
    "text": "exposed over VN bus I'm really simplifying things but that's basically how it works and so thinking about how",
    "start": "571999",
    "end": "578480"
  },
  {
    "text": "to interact with VM search you're gonna have two types of messages right I'm going to have the messages that you sent",
    "start": "578480",
    "end": "583550"
  },
  {
    "text": "to VMs which to kind of set up VM switch tell it okay this is a protocol version I want to use these are the buffers I",
    "start": "583550",
    "end": "589399"
  },
  {
    "text": "want to use this is the size of the packets unless N and so on and then you're going to have the second layer of messages which are these are in this",
    "start": "589399",
    "end": "595639"
  },
  {
    "text": "messages which are going to let you interact with VMs which basically in the same way that you would interact with",
    "start": "595639",
    "end": "600740"
  },
  {
    "text": "the you know USB network card right and so knowing that it kind of makes sense to start looking at the initialization",
    "start": "600740",
    "end": "607459"
  },
  {
    "text": "sequence of yet a VM switch right like image so think of it like to the left once again you have the host all right",
    "start": "607459",
    "end": "613129"
  },
  {
    "text": "you have the guest and so bringing up VMs which is basically just sending a few secrets of a few messages the first",
    "start": "613129",
    "end": "619220"
  },
  {
    "text": "thing is going to be agreeing on which on which protocol versions to use so",
    "start": "619220",
    "end": "624259"
  },
  {
    "text": "you're going to have the protocol version 4 VMs which they first sent then the protocol version 4 the actual or and dis protocol that sense and so let's you",
    "start": "624259",
    "end": "631879"
  },
  {
    "text": "know basically that's just how it works and then B after that you're going to be sending these receive buffers and send",
    "start": "631879",
    "end": "638179"
  },
  {
    "text": "buffers so the receive buffer and send buffer basically what's going to be used so first off they are shared pieces of",
    "start": "638179",
    "end": "644029"
  },
  {
    "text": "memory they are G paddles so the guest OS allocates them in its own memory space sends it over through the EM bus",
    "start": "644029",
    "end": "650119"
  },
  {
    "text": "to the host to us host to us Maps it and then they're going to be used to basically transfer our in dispatches the",
    "start": "650119",
    "end": "657019"
  },
  {
    "text": "reason to use those rather than just the M bus directly is what I was saying earlier that well this is exactly the kind of case",
    "start": "657019",
    "end": "663770"
  },
  {
    "text": "that you would not want to use VN bus for all the time because network packets are going to be large they're going to",
    "start": "663770",
    "end": "669080"
  },
  {
    "text": "be happening at very high frequency so a ring buffer is really not ideal for that especially since things can happen out",
    "start": "669080",
    "end": "674450"
  },
  {
    "text": "of order and all that so basically you we introduce a send buffer which is going to be used by the guests to send",
    "start": "674450",
    "end": "679820"
  },
  {
    "text": "packets and the receive buffer which is going to be used by the guests to receive packets and that's just",
    "start": "679820",
    "end": "685100"
  },
  {
    "text": "basically you can think of those as alternative communications channels that the games are going to use so in terms",
    "start": "685100",
    "end": "692780"
  },
  {
    "text": "of looking a little more in detail at how these receive buffers and send buffers look like how they work right so",
    "start": "692780",
    "end": "701240"
  },
  {
    "text": "we we said we have these messages that sets them up in the hosts OS so we send them over we send this big blob of",
    "start": "701240",
    "end": "707480"
  },
  {
    "text": "memory for each the receive buffer and send buffer the thing is we want to be able to send and receive more than one pack at a time so what happens is the",
    "start": "707480",
    "end": "714320"
  },
  {
    "text": "hosts to us is responsible for subdividing the receive buffer and the send buffer into smaller sub allocations",
    "start": "714320",
    "end": "720470"
  },
  {
    "text": "the reason for that is you want to be able to send or receive more than one pack at a time because again networks are nightmare and there's a lot of",
    "start": "720470",
    "end": "727130"
  },
  {
    "text": "packets all the time and you have to deal with that and so the important thing here is the host OS is the one who",
    "start": "727130",
    "end": "732980"
  },
  {
    "text": "makes that decision and sends back those bounds for sub allocations next if we",
    "start": "732980",
    "end": "738650"
  },
  {
    "text": "have a the guest wants to send an R in this packet this gets it's a query packet which just means you know asking",
    "start": "738650",
    "end": "744350"
  },
  {
    "text": "for things like the MAC address or something like that from the from the host is going to generate its R in this",
    "start": "744350",
    "end": "749420"
  },
  {
    "text": "packet locally is then going to send it into the send buffer just copy into the send buffer because once again it's a",
    "start": "749420",
    "end": "754880"
  },
  {
    "text": "piece of shared memory and once that happens it's going to send a message over vm bus to let the the host vm",
    "start": "754880",
    "end": "762140"
  },
  {
    "text": "switch know hey there's a message there's a packet in my send buffer please read it please take care of it",
    "start": "762140",
    "end": "768140"
  },
  {
    "text": "once the host sees that is going to copy it into its own memory space it sounds weak to acknowledge to the",
    "start": "768140",
    "end": "775310"
  },
  {
    "text": "guest okay I've read it out you can now use the send buffer for something else like this ml for solace of obligation",
    "start": "775310",
    "end": "781400"
  },
  {
    "text": "for something else then it's going to handle it and then it's going to copy the completion message into the receive",
    "start": "781400",
    "end": "787580"
  },
  {
    "text": "buffer let the guests know that there's a packet in the receive buffer sub",
    "start": "787580",
    "end": "792800"
  },
  {
    "text": "allocation number two and then the guest is going to copy that and you know take into account that whatever has happened and",
    "start": "792800",
    "end": "799980"
  },
  {
    "text": "acknowledge to their guests to the host okay we're done we could you can now copy more stuff into this receive buffer",
    "start": "799980",
    "end": "806040"
  },
  {
    "text": "selves allocation so that's that's basically how it works in terms of sending and receiving the artists",
    "start": "806040",
    "end": "812550"
  },
  {
    "text": "messages what's interesting here is we're not just using the receive buffers we're still also sending these things",
    "start": "812550",
    "end": "818190"
  },
  {
    "text": "over vm bus and the thing that's kind of interesting about that is the reason to",
    "start": "818190",
    "end": "823380"
  },
  {
    "text": "use the receive buffers and ascend buffers as far as I can tell is to kind of have this really highly paralyzed way",
    "start": "823380",
    "end": "830310"
  },
  {
    "text": "of handling those messages and you know having this level of a synchronicity",
    "start": "830310",
    "end": "835320"
  },
  {
    "text": "even though but the thing is like the M bus by its very nature because as a ring buffer everything is serialized so it",
    "start": "835320",
    "end": "841200"
  },
  {
    "text": "kind of doesn't entirely make sense right how do you narrate it - so looking",
    "start": "841200",
    "end": "847380"
  },
  {
    "text": "more specifically at how the host OS vm switch handles those messages it doesn't",
    "start": "847380",
    "end": "852990"
  },
  {
    "text": "just handle them directly and so we're going to take a look at that let's say you have the guest that has sent these",
    "start": "852990",
    "end": "858750"
  },
  {
    "text": "two messages through the send buffer it lets the host OS know through through",
    "start": "858750",
    "end": "865020"
  },
  {
    "text": "through VM bus the host received them and then instead of just handling them",
    "start": "865020",
    "end": "870210"
  },
  {
    "text": "directly it's going to copy them into a queue and then acknowledge that has received them then it's going to do the",
    "start": "870210",
    "end": "875820"
  },
  {
    "text": "same thing for the second message put it into a queue acknowledge that has received that message and you know that's basically at that point and the",
    "start": "875820",
    "end": "882360"
  },
  {
    "text": "reason for that is that once again you know all of VM bus messages are handled in a very serialize way and this is on",
    "start": "882360",
    "end": "888150"
  },
  {
    "text": "single thread and you don't want to be stalling that thread for however long it takes to actually handle those messages which is why they're put in the queue",
    "start": "888150",
    "end": "894180"
  },
  {
    "text": "and then they are actually handled by these two separate worker threads which you can think of as actually belonging",
    "start": "894180",
    "end": "899940"
  },
  {
    "text": "to VM switch so then they're going to be used they're they're going to be copied out of the queue they're going to",
    "start": "899940",
    "end": "905490"
  },
  {
    "text": "actually be handled and then the results are going to be copied from they're going to be copied into the",
    "start": "905490",
    "end": "912240"
  },
  {
    "text": "receive buffer by the actual worker thread as opposed to the VM bus thread and you know I know all these details",
    "start": "912240",
    "end": "917370"
  },
  {
    "text": "are kind of boring but they will all come up later so try to pay attention and so after that the the host OS is",
    "start": "917370",
    "end": "924360"
  },
  {
    "text": "going to acknowledge that has you know finished this message it has placed the completion message to the receive buffer it's going to do",
    "start": "924360",
    "end": "930720"
  },
  {
    "text": "the same thing for the for the other message acknowledge it to the guests and that's basically it okay so once again",
    "start": "930720",
    "end": "938100"
  },
  {
    "start": "937000",
    "end": "1302000"
  },
  {
    "text": "you're now complete VMs which experts at least as far as I know I don't really know much more about VM search than that",
    "start": "938100",
    "end": "944069"
  },
  {
    "text": "and I'm gonna try and now walk you through how I actually found the vulnerability that I did and how I",
    "start": "944069",
    "end": "949740"
  },
  {
    "text": "exploited it and all that so we just took a look at the VM switch initialization sequence you know sending",
    "start": "949740",
    "end": "956519"
  },
  {
    "text": "a few packets first negotiating the protocol version all that so that every end knows what to talk about but one way",
    "start": "956519",
    "end": "963809"
  },
  {
    "text": "to kind of find vulnerabilities typically is you know you have these very well defined sequences what if you mess with that sequence right what if",
    "start": "963809",
    "end": "969959"
  },
  {
    "text": "you send one message before the other or what if you send one message multiple times like do things new interesting",
    "start": "969959",
    "end": "975029"
  },
  {
    "text": "things happen turns out interesting interesting things do happen if you send a receive buffer multiple times so for example here we're",
    "start": "975029",
    "end": "981930"
  },
  {
    "text": "gonna have the guest define G BL 0 so share memory between the guest in the host and it's going to send first",
    "start": "981930",
    "end": "987360"
  },
  {
    "text": "receive buffer it's like okay the host is going to map chip l0 as its receive buffer and you have a pointer that",
    "start": "987360",
    "end": "992699"
  },
  {
    "text": "points to it fully cool after that is going to but it's going to do a second G",
    "start": "992699",
    "end": "998430"
  },
  {
    "text": "battle and instead of sending it as a send buffer is going to send it as a receive buffer and what happens here is interesting is that the receive buffer",
    "start": "998430",
    "end": "1004490"
  },
  {
    "text": "pointer is updated right it now points to G paddle 1 instead of G powell 0 even though we are not actually supposed to",
    "start": "1004490",
    "end": "1011000"
  },
  {
    "text": "be able to have more than one received buffer in fact there's no longer any reference to the old jeep l0 mapping and",
    "start": "1011000",
    "end": "1016670"
  },
  {
    "text": "the host OS VM switch it's just kind of there it's still mapped there and well that doesn't seem like a huge deal but",
    "start": "1016670",
    "end": "1023389"
  },
  {
    "text": "yeah if you keep doing it it just keeps happening and at that point you may be thinking okay well that's kind of weird",
    "start": "1023389",
    "end": "1028490"
  },
  {
    "text": "but at worst it's probably just a memory leak right because you keep mapping more and more memory into the host and even",
    "start": "1028490",
    "end": "1034220"
  },
  {
    "text": "then you're really just mapping one more physical memory you're not really allocating new stuff into like the hosts",
    "start": "1034220",
    "end": "1039829"
  },
  {
    "text": "pool or anything so even if it is a memory leak it's probably kind of tiny insignificant but the thing that's",
    "start": "1039829",
    "end": "1046520"
  },
  {
    "text": "interesting is if you look at the way that the receive buffer is initialized and in turn how it's updated because it",
    "start": "1046520",
    "end": "1054409"
  },
  {
    "text": "turns out we are able to send the receive buffer more than once that operation is not atomic and because you",
    "start": "1054409",
    "end": "1060860"
  },
  {
    "text": "know the team did not initially expect the bill from an attacker to send more than one receive buffer there is also no locking",
    "start": "1060860",
    "end": "1066890"
  },
  {
    "text": "on this operation and so if you take a look at how the buffer update works there are three steps right because the",
    "start": "1066890",
    "end": "1074179"
  },
  {
    "text": "first step is what I was just showing in this slide before is updating the receive buffer pointer right so it's",
    "start": "1074179",
    "end": "1079610"
  },
  {
    "text": "pretty straightforward the thing is as mentioned before the hostfest is also responsible for generating sub",
    "start": "1079610",
    "end": "1086120"
  },
  {
    "text": "allocations into that receive buffer and then sending them back to the guest to us and so that's actually what the step",
    "start": "1086120",
    "end": "1092750"
  },
  {
    "text": "of a second step is is actually generating that list of sub a location is have the the of the receive buffer",
    "start": "1092750",
    "end": "1100159"
  },
  {
    "text": "and then the third step is to actually update those allocations and so it might",
    "start": "1100159",
    "end": "1106700"
  },
  {
    "text": "not seem like a huge deal if you take a look at how this works let's assume that we have GPL l0g paddle 1 both mapped in",
    "start": "1106700",
    "end": "1113870"
  },
  {
    "text": "the guests toe and the host OS and host the guest OS decides ok let's use the powell 0 as our receive buffer so the",
    "start": "1113870",
    "end": "1121909"
  },
  {
    "text": "host was like okey-dokey here we are we have a pointer and now we have sub allocations to that receive buffer it's",
    "start": "1121909",
    "end": "1127370"
  },
  {
    "text": "all good but now the guest to us is being annoying as telling it to use the GPL 1",
    "start": "1127370",
    "end": "1134390"
  },
  {
    "text": "instead of GPL 0 as a receive buffer well the first step is to update the pointer to receive buffer right and so",
    "start": "1134390",
    "end": "1141200"
  },
  {
    "text": "as that happens first step the point is going to be updated and implicitly the",
    "start": "1141200",
    "end": "1147860"
  },
  {
    "text": "stub allocation bounds are all going to be applied to this new receipt buffer and this specific case because we have",
    "start": "1147860",
    "end": "1153710"
  },
  {
    "text": "GL one smaller than GPL 0 those sub allocation bounds are actually going to",
    "start": "1153710",
    "end": "1159200"
  },
  {
    "text": "go out of bounds of that receive buffer and well I'm you don't really tell you that it's not a great thing and the of",
    "start": "1159200",
    "end": "1167149"
  },
  {
    "text": "course you know if you let go if you let generates new sub Alka sub allocation downs and you kind of like let it go all",
    "start": "1167149",
    "end": "1173210"
  },
  {
    "text": "the way to step 3 it's totally fine after that you know you end up with a perfectly valid received buffer like a",
    "start": "1173210",
    "end": "1179360"
  },
  {
    "text": "really good received buffer and it's really possible to use it unfortunately you do end up with like this tiny window",
    "start": "1179360",
    "end": "1186049"
  },
  {
    "text": "during step 2 where you are able to potentially write data out of bounds",
    "start": "1186049",
    "end": "1192500"
  },
  {
    "text": "from that receive buffer and well it is like a really tiny window right this is basically generating the",
    "start": "1192500",
    "end": "1200400"
  },
  {
    "text": "sub allocations for receive buffer that's really just dividing the size of the receive buffer by the number of sub",
    "start": "1200400",
    "end": "1205920"
  },
  {
    "text": "allocations and then you know generating like some data structures and stuff so it's really just a few probably a few",
    "start": "1205920",
    "end": "1212160"
  },
  {
    "text": "hundreds of cycles but it is a possibility right because as mentioned earlier we do have these are NIST worker",
    "start": "1212160",
    "end": "1217830"
  },
  {
    "text": "threads that are running in the background working on are in this packets and so if those are running",
    "start": "1217830",
    "end": "1224190"
  },
  {
    "text": "while you update these sub allocations and you can somehow make them write to",
    "start": "1224190",
    "end": "1229380"
  },
  {
    "text": "the receive buffer as the sub allocations are being generated then you'll be able to write data about and",
    "start": "1229380",
    "end": "1235140"
  },
  {
    "text": "so that's basically the vulnerability and now in terms of exploiting it you",
    "start": "1235140",
    "end": "1241650"
  },
  {
    "text": "really have to deal with three things which are kind of annoying the first thing is okay can we even control it's",
    "start": "1241650",
    "end": "1247140"
  },
  {
    "text": "gonna be written to this receive buffer because once again there's gonna be written by the arm dist worker threads not by data that you necessarily",
    "start": "1247140",
    "end": "1254070"
  },
  {
    "text": "directly control as the guest to us so that might be tricky second thing is can we even win the race",
    "start": "1254070",
    "end": "1259620"
  },
  {
    "text": "as mentioned this is a really a fairly tight race and again you're doing this from the guests OS but you are not the",
    "start": "1259620",
    "end": "1266190"
  },
  {
    "text": "one that is directly racing the host OS you've basically got to get the host OS to race itself and well I mean that's",
    "start": "1266190",
    "end": "1272790"
  },
  {
    "text": "kind of annoying and the third thing of course is okay even if we do have the ability to read to you know hit the race",
    "start": "1272790",
    "end": "1279870"
  },
  {
    "text": "and control what's being written can we even put a useful corruption target behind the receive buffer because",
    "start": "1279870",
    "end": "1285120"
  },
  {
    "text": "typically you know at least for me in my experience for kernel exploitation I'm used to having an out of bounds right",
    "start": "1285120",
    "end": "1290700"
  },
  {
    "text": "out of a pool buffer right I don't know where these shared buffers are mapped this is not on the pool for sure so",
    "start": "1290700",
    "end": "1297720"
  },
  {
    "text": "gotta take a look at that and try to figure out if I can do anything useful with that and that's what we're gonna",
    "start": "1297720",
    "end": "1302730"
  },
  {
    "start": "1302000",
    "end": "1374000"
  },
  {
    "text": "get into right now so the first thing is can we even write useful data to the receive buffer out of bounds the short",
    "start": "1302730",
    "end": "1310230"
  },
  {
    "text": "answer is yes it's actually not that difficult take a look at how the are in this the artists protocol works",
    "start": "1310230",
    "end": "1316460"
  },
  {
    "text": "basically every message that you send to your network card is going to have a complete message and some of the",
    "start": "1316460",
    "end": "1322650"
  },
  {
    "text": "complete messages such as the complete message for the oranges query message include a you know a buffer at the end",
    "start": "1322650",
    "end": "1330290"
  },
  {
    "text": "the buffer that can contain arbitrary data and so basically the kind of data",
    "start": "1330290",
    "end": "1335480"
  },
  {
    "text": "that you're going to be querying through this is gonna be stuff like I mentioned earlier for example of the network cards",
    "start": "1335480",
    "end": "1340700"
  },
  {
    "text": "MAC address right and these are things that you might be able to set through the are in this set message so basically",
    "start": "1340700",
    "end": "1348230"
  },
  {
    "text": "the idea from here is you're gonna like find in oh it that is handled by a VM switch that lets you set some data that",
    "start": "1348230",
    "end": "1355460"
  },
  {
    "text": "can be returned through the query message and I'm not gonna go into detail in terms of like which messages actually",
    "start": "1355460",
    "end": "1361400"
  },
  {
    "text": "allow you to do that but this is the basic idea it's really simple and from that you can actually control a fair amount of data that is going to be",
    "start": "1361400",
    "end": "1367580"
  },
  {
    "text": "written out of bounds and you actually even control the length it's gonna be written and at that point you know",
    "start": "1367580",
    "end": "1373520"
  },
  {
    "text": "that's like yay we got number one down number two is a little trickier how do",
    "start": "1373520",
    "end": "1379880"
  },
  {
    "text": "we win that race well the first thing to know is a you know we've been talking",
    "start": "1379880",
    "end": "1386300"
  },
  {
    "text": "about how these aren't this messages are be are being handled in parallel in in",
    "start": "1386300",
    "end": "1392030"
  },
  {
    "text": "the background by these worker threads right and so ideally what you would want is okay maybe you have this queue right",
    "start": "1392030",
    "end": "1398030"
  },
  {
    "text": "maybe I can just like queue a bunch of messages and they're all gonna be handled in the background one after the",
    "start": "1398030",
    "end": "1403580"
  },
  {
    "text": "other and each one is going to be completed and going to be written to receive buffer unfortunately if you take a look",
    "start": "1403580",
    "end": "1410300"
  },
  {
    "text": "at what happens if you try to do that so here we have like two or threads practice there's actually five but let's say there's only two you have these two",
    "start": "1410300",
    "end": "1417680"
  },
  {
    "text": "worker threads there's three messages that are queued and what happens is the worker threads each pick up a message it",
    "start": "1417680",
    "end": "1425090"
  },
  {
    "text": "handles it then it writes it to receive buffer and after that you would expect it they actually grab the fir'd message",
    "start": "1425090",
    "end": "1431330"
  },
  {
    "text": "and handle it unfortunately know what happens after that is because they alert the guests that hey there's something to",
    "start": "1431330",
    "end": "1438380"
  },
  {
    "text": "grab the receive buffer right now you should go and do that it's going to actually wait for the guests to say okay",
    "start": "1438380",
    "end": "1443780"
  },
  {
    "text": "I grabbed it from the receive buffer and you can now use that slot and receive buffer once again so basically unless",
    "start": "1443780",
    "end": "1450830"
  },
  {
    "text": "the guest actually sends one of these acknowledges acknowledgment messages",
    "start": "1450830",
    "end": "1456200"
  },
  {
    "text": "these worker threads are just going to be stuck and once you do receive an acknowledgment",
    "start": "1456200",
    "end": "1461730"
  },
  {
    "text": "it's not going to be stuck anymore is just gonna keep handling message after message after message the problem is in",
    "start": "1461730",
    "end": "1467070"
  },
  {
    "text": "our case these acknowledgement messages have to be sent over of a VM bus channel which once again is completely",
    "start": "1467070",
    "end": "1472110"
  },
  {
    "text": "serialized and that's also being that's also a channel that we have to send the",
    "start": "1472110",
    "end": "1477300"
  },
  {
    "text": "new receive buffer over so basically the receive buffer message and the you know the acknowledgement message cannot ever",
    "start": "1477300",
    "end": "1483390"
  },
  {
    "text": "be handled at the same time so you cannot actually unlock this thread as you are trying to hit the race which is",
    "start": "1483390",
    "end": "1490200"
  },
  {
    "text": "kind of a problem so it's one idea down but if you think about it the very",
    "start": "1490200",
    "end": "1496800"
  },
  {
    "text": "reason that these messages are that these worker threads are being blocked until it receives it receives an",
    "start": "1496800",
    "end": "1503610"
  },
  {
    "text": "acknowledgement from the guest is that as mentioned they all kind of like use a",
    "start": "1503610",
    "end": "1508770"
  },
  {
    "text": "few slots of the receive message of the receive buffer and you know they want to",
    "start": "1508770",
    "end": "1513810"
  },
  {
    "text": "make sure that whatever is in those slots has been read out before they write something else to them but so so",
    "start": "1513810",
    "end": "1521820"
  },
  {
    "text": "that's a problem because every message in the Ardis protocol actually has a complete message and so every message I",
    "start": "1521820",
    "end": "1526920"
  },
  {
    "text": "sent over is going to be doing that I think it's going to be right in to receive buffer and waiting for it unless you take a look at the failure pass",
    "start": "1526920",
    "end": "1533720"
  },
  {
    "text": "fortunately if you look at pal VMs which handles certain are in dismiss it turns",
    "start": "1533720",
    "end": "1539910"
  },
  {
    "text": "out that certain failure paths will cause it to never try to write to the receive buffer it's just going to return",
    "start": "1539910",
    "end": "1545250"
  },
  {
    "text": "you know an error and it's just going to skip that message and jump to the next message in the queue and so there's this",
    "start": "1545250",
    "end": "1552660"
  },
  {
    "text": "idea then of the Cascade of failure which is also the title of my autobiography biography cascade of",
    "start": "1552660",
    "end": "1560610"
  },
  {
    "text": "failure being that okay you're just going to queue a bunch of messages that are going to fail and that's going to create a sufficient time differential",
    "start": "1560610",
    "end": "1567360"
  },
  {
    "text": "that you are able to control as an attacker such that you can try to hit the race because maybe we can't get",
    "start": "1567360",
    "end": "1573300"
  },
  {
    "text": "messages to continuously writes a receive buffer but all we really need is one buffer like one message to write to",
    "start": "1573300",
    "end": "1580470"
  },
  {
    "text": "the receive buffer and the only difficulty then is like we need to be able to control when that message is going to be written to the receive",
    "start": "1580470",
    "end": "1586020"
  },
  {
    "text": "buffer but if we are able to have an arbitrary number of messages fail before",
    "start": "1586020",
    "end": "1591240"
  },
  {
    "text": "that then we'll be fine and so trying to visualize that you can see you can",
    "start": "1591240",
    "end": "1596710"
  },
  {
    "text": "imagine locate each worker fred is already handling an actual valid message okay it's going to handle it it's going to",
    "start": "1596710",
    "end": "1602350"
  },
  {
    "text": "send them back to the the guests and then it's going to be blocked then the guest is going to send one",
    "start": "1602350",
    "end": "1608320"
  },
  {
    "text": "acknowledgement or VM bus and that's kind of what's going to start this whole cascade you can see our in this message",
    "start": "1608320",
    "end": "1614830"
  },
  {
    "text": "is three to seven or each have like that little crash thingy there that just means it's a malformed packet and so as",
    "start": "1614830",
    "end": "1621910"
  },
  {
    "text": "soon as gonna be tried to be handled it's going to go into there it's gonna fail and it's just going to go to mess",
    "start": "1621910",
    "end": "1627190"
  },
  {
    "text": "next message the next message next message and as you can tell that took a few seconds so in practice so just be",
    "start": "1627190",
    "end": "1632620"
  },
  {
    "text": "like a few you know microseconds or now seconds or whatever but the whole point is that we created this time differential and from there this actual",
    "start": "1632620",
    "end": "1640720"
  },
  {
    "text": "last message is going to be written to a receive buffer and so if your control that data then we're all good the only",
    "start": "1640720",
    "end": "1647200"
  },
  {
    "text": "difficulty of that is well you know you want to win that race but you don't actually know how long do you want to",
    "start": "1647200",
    "end": "1652900"
  },
  {
    "text": "wait right you and you don't even know how long you are going to be waiting by you only know that the amount of time",
    "start": "1652900",
    "end": "1658179"
  },
  {
    "text": "believe it's time differential that you're creating is proportional to the number of messages that are gonna fail but you don't know how long like one",
    "start": "1658179",
    "end": "1665140"
  },
  {
    "text": "message failure is gonna take right you also don't know how long you've been I want to wait so it's kind of annoying but maybe we are able to distinguish",
    "start": "1665140",
    "end": "1673090"
  },
  {
    "text": "between the race being too early like us being too early in the race for us being too late in the race and if we're able",
    "start": "1673090",
    "end": "1679539"
  },
  {
    "text": "to do that then we can just adjust the number of failure messages to increase if we too early or decrease if we're too",
    "start": "1679539",
    "end": "1685539"
  },
  {
    "text": "late and so taking a look at what happens if you're too early well if you're too early you're actually just",
    "start": "1685539",
    "end": "1691150"
  },
  {
    "text": "gonna be writing to the old receive buffer with the correct sub page in bounds and so your message is ends up in",
    "start": "1691150",
    "end": "1696820"
  },
  {
    "text": "here and since the receive buffer is something that shared between the guest and the host well as a guest you can",
    "start": "1696820",
    "end": "1701890"
  },
  {
    "text": "just like read from that receive buffer and and see that okay we were truly let's try again if you're too late it's",
    "start": "1701890",
    "end": "1708309"
  },
  {
    "text": "gonna be the same thing but with a new receive buffer because we will if you don't hit the race inherently you're",
    "start": "1708309",
    "end": "1715120"
  },
  {
    "text": "going to be writing into the bounds of one of your receiver buffers and so the only difference is which receive buffer",
    "start": "1715120",
    "end": "1720760"
  },
  {
    "text": "are you writing into and you were able to distinguish those because as the guests you are able to",
    "start": "1720760",
    "end": "1726070"
  },
  {
    "text": "read from that memory and so if you're just right though well you're not gonna see anything in either of those receipt",
    "start": "1726070",
    "end": "1731860"
  },
  {
    "text": "buffers because by definition you're writing out of bounds which is what you want at that point all you have to do is celebrate so we are able to win the race",
    "start": "1731860",
    "end": "1739420"
  },
  {
    "start": "1738000",
    "end": "2231000"
  },
  {
    "text": "and we're able to write our betray data out of Bounce it's pretty great the only",
    "start": "1739420",
    "end": "1744550"
  },
  {
    "text": "thing is we still have no idea where a buffer is have no idea we're actually corrupting just calves annoying so you",
    "start": "1744550",
    "end": "1753070"
  },
  {
    "text": "know pulling up KD doing bang address what you're gonna see is that well there's a bunch of other G paddles and",
    "start": "1753070",
    "end": "1759100"
  },
  {
    "text": "other m deals or allocating to that memory region but the other thing that is allocated that memory region which is",
    "start": "1759100",
    "end": "1764590"
  },
  {
    "text": "really nice is kernel thread stacks and that is a very juicy attack target",
    "start": "1764590",
    "end": "1770080"
  },
  {
    "text": "because really all you have to do is like overwrite one return address on there you get robbed and you're done so",
    "start": "1770080",
    "end": "1776170"
  },
  {
    "text": "it's kind of blessing the only thing is you know it's also not because it turns",
    "start": "1776170",
    "end": "1784990"
  },
  {
    "text": "out you know if you have this allocator right and you want to somehow place one target after your buffer you need to be",
    "start": "1784990",
    "end": "1792220"
  },
  {
    "text": "able to basically massage the allocator into doing that but difficulty is as a guest to us you're not you don't really",
    "start": "1792220",
    "end": "1798460"
  },
  {
    "text": "have any control over what threads are going to be created the hosts to us at least not directly and so that means if",
    "start": "1798460",
    "end": "1804700"
  },
  {
    "text": "you can't create new threads the host way so you can't create new stacks if you can't create new stacks you're going to have to try to corrupt an existing",
    "start": "1804700",
    "end": "1810040"
  },
  {
    "text": "stack and that's also difficult so there's basically three things to deal with it's okay first off how this is allocated even work secondly can we you",
    "start": "1810040",
    "end": "1817660"
  },
  {
    "text": "know place a stack at a known address and in order to do that well then offset in order to do that we actually also",
    "start": "1817660",
    "end": "1823270"
  },
  {
    "text": "need to be able to place the stack in the first place so a lot of non-trivial stuff well the first thing is well actually do",
    "start": "1823270",
    "end": "1829750"
  },
  {
    "text": "the allocator is kind of trivial it's kind of nice so this the name is region that contains these MD LS and all these",
    "start": "1829750",
    "end": "1836260"
  },
  {
    "text": "stacks is assistant PT region and the allocator for that is just a bit map",
    "start": "1836260",
    "end": "1842020"
  },
  {
    "text": "based allocator so you can see the right it's an artistic representation of this bitmap in orange you're going to see bit",
    "start": "1842020",
    "end": "1849040"
  },
  {
    "text": "ones which you know mean that a page is allocated and blue is going to be bit 0",
    "start": "1849040",
    "end": "1855430"
  },
  {
    "text": "between set of pages now okay and the way that this allocator works is basically it has this little yellow",
    "start": "1855430",
    "end": "1860710"
  },
  {
    "text": "arrow in there that yellow that the yellow arrow is called the hint and that's basically a heuristic for where",
    "start": "1860710",
    "end": "1867250"
  },
  {
    "text": "the bitmap alligator is going to start scanning into the bitmap and so in terms of allocating something into that that",
    "start": "1867250",
    "end": "1874300"
  },
  {
    "text": "memory region it's actually really simple the allocate just scans the bitmap if it finds a group of bits they're contiguous",
    "start": "1874300",
    "end": "1881350"
  },
  {
    "text": "they're big enough for what you want just going to place that memory there if it doesn't is going to add some more memory so as an example let's say we",
    "start": "1881350",
    "end": "1887920"
  },
  {
    "text": "want to allocate five pages the hint is right in the middle there it's right before a big free region and so it",
    "start": "1887920",
    "end": "1893440"
  },
  {
    "text": "actually does already have five pages right available there it's just going to allocate it and update the hint to go",
    "start": "1893440",
    "end": "1899020"
  },
  {
    "text": "after that allocation such that you don't have to scan that again next time let's say you want to allocate five",
    "start": "1899020",
    "end": "1904300"
  },
  {
    "text": "pages again well you don't have five pages immediately available so that little arrow is just going to scan the",
    "start": "1904300",
    "end": "1910870"
  },
  {
    "text": "bitmap and find five pages here allocated there and then you are going",
    "start": "1910870",
    "end": "1916150"
  },
  {
    "text": "to be done now let's say you want to allocate 17 pages well you actually don't really have any you know free",
    "start": "1916150",
    "end": "1922840"
  },
  {
    "text": "memory in there that has 17 contiguous pages so instead it's going to expand",
    "start": "1922840",
    "end": "1928210"
  },
  {
    "text": "the bitmap it does that in groups of 2 megabytes and then place those 17 pages",
    "start": "1928210",
    "end": "1933400"
  },
  {
    "text": "there and that's that the annoying thing if you end up doing that is that the",
    "start": "1933400",
    "end": "1938890"
  },
  {
    "text": "hint is not actually updated which can come in handy or can become annoying based on what you're trying to do you",
    "start": "1938890",
    "end": "1945490"
  },
  {
    "text": "know just something to know now okay so we understand how the Ella care works it's actually pretty simple but we need",
    "start": "1945490",
    "end": "1951490"
  },
  {
    "text": "to be able to interact with that allocator in a meaningful way we need two things we need to actually be able to ideally allocate arbitrary amounts of",
    "start": "1951490",
    "end": "1959890"
  },
  {
    "text": "data arbitrary times and that's actually really easy because we have this vulnerability where we are able to map",
    "start": "1959890",
    "end": "1965559"
  },
  {
    "text": "receive buffers and send buffers over and over and over again and since these rd paddles ng paddle size is controlled",
    "start": "1965559",
    "end": "1971559"
  },
  {
    "text": "by the attacker because it's controlled with a guess to us you can basically allocate any piece of",
    "start": "1971559",
    "end": "1976660"
  },
  {
    "text": "memory of any size which is a really nice primitive next thing is need to be able to allocate new kernel thread",
    "start": "1976660",
    "end": "1982780"
  },
  {
    "text": "stacks such that we can place them after a received buffer and that's that's actually really annoying",
    "start": "1982780",
    "end": "1988840"
  },
  {
    "text": "once as I mentioned there's like really no good way like there's obviously no by design way to do that from a guest and",
    "start": "1988840",
    "end": "1994870"
  },
  {
    "text": "so the best way I found how to do that is to notice that the M switch and a lot",
    "start": "1994870",
    "end": "1999970"
  },
  {
    "text": "of the M bus based services actually rely on the NT system worker thread pool",
    "start": "1999970",
    "end": "2006960"
  },
  {
    "text": "the reasoning being that once again vm vm buff messages are all serialized we'd",
    "start": "2006960",
    "end": "2012419"
  },
  {
    "text": "rather be doing that in parallel so basically it'll read a message submit a task to the worker pool then the worker",
    "start": "2012419",
    "end": "2017940"
  },
  {
    "text": "pool was going to take on that task handle it and in the meantime like the vm bus thread can let go on to handling",
    "start": "2017940",
    "end": "2023700"
  },
  {
    "text": "another vm bus message but so the way that the thread pool works is whenever it gets a task if there's a three free",
    "start": "2023700",
    "end": "2031769"
  },
  {
    "text": "thread inside that pool it's just going to use that thread right and so no new thread is created a new stack which is",
    "start": "2031769",
    "end": "2037529"
  },
  {
    "text": "not great for us but if there is if all the other threads are already busy it's",
    "start": "2037529",
    "end": "2043259"
  },
  {
    "text": "going to actually create a new thread add it to the pool and that's going to create a new stack so the idea is",
    "start": "2043259",
    "end": "2048480"
  },
  {
    "text": "basically just kind of find a message that is easy enough to hit and we'll submit a task to that pool and just kind",
    "start": "2048480",
    "end": "2055589"
  },
  {
    "text": "of flood it just just send a bunch of them and the host of s is going to be submitting all of those to the empty",
    "start": "2055589",
    "end": "2061908"
  },
  {
    "text": "kernel worker or thread pool and eventually it will create some new messages something with some new threads",
    "start": "2061909",
    "end": "2067440"
  },
  {
    "text": "and it's still going to create some of stacks and ideally it will place it where we want i was also helped by the",
    "start": "2067440",
    "end": "2073710"
  },
  {
    "text": "fact that VMs which at the time had a tiny bug which would cause certain worker threads to be deadlocked and it",
    "start": "2073710",
    "end": "2080878"
  },
  {
    "text": "would just like wait on a mutex forever which was kind of annoying but also actually came in really handy because that way you can just make sure that and",
    "start": "2080879",
    "end": "2087990"
  },
  {
    "text": "like any arbitrary number of worker threads that you want is just going to stay you know busy forever and that lets",
    "start": "2087990",
    "end": "2094679"
  },
  {
    "text": "you allocate new ones so at this point this like okay we basically have a really hacky way of of creating new",
    "start": "2094679",
    "end": "2101099"
  },
  {
    "text": "kernel thread sacks ideally we really only want to be able we really only want to have to like spawn a single one and",
    "start": "2101099",
    "end": "2106800"
  },
  {
    "text": "so that's where we have to go into how to massage the the heap boy give kernel",
    "start": "2106800",
    "end": "2112430"
  },
  {
    "text": "assistant PT region and basically just have like these five steps that kind of",
    "start": "2112430",
    "end": "2118710"
  },
  {
    "text": "just work the idea being of like first want to spray one mega by blocks and we do that in order to",
    "start": "2118710",
    "end": "2125120"
  },
  {
    "text": "kind of fill in these gaps to make sure that our later allocations will not be going all the way up in there so we do",
    "start": "2125120",
    "end": "2130610"
  },
  {
    "text": "that by spraying a bunch of receive buffers or send buffers or whatever it's pretty simple and the next thing is we",
    "start": "2130610",
    "end": "2136970"
  },
  {
    "text": "want to allocate a buffer that is equal to in length to two megabytes minus one",
    "start": "2136970",
    "end": "2142580"
  },
  {
    "text": "page and the reason for that is if we this is the maximum size that we can allocate that it will create a new",
    "start": "2142580",
    "end": "2148910"
  },
  {
    "text": "region like a new two megabyte region expansion at the bottom of the bitmap without actually like putting it",
    "start": "2148910",
    "end": "2155630"
  },
  {
    "text": "somewhere else and the reason that it's interesting is that this is actually going to be a receive buffer if you'll recall we need to actually hit the race",
    "start": "2155630",
    "end": "2161960"
  },
  {
    "text": "several times before we are actually able to to hit the right number of failure messages and so you want to be",
    "start": "2161960",
    "end": "2168230"
  },
  {
    "text": "able to place your buffer in the location where you know that the next time you have an allocation it will end",
    "start": "2168230",
    "end": "2174740"
  },
  {
    "text": "up in the same location because we want to be able to repeat that race over and over and over again and so making it the",
    "start": "2174740",
    "end": "2181310"
  },
  {
    "text": "biggest size possible allows us to do that and then you just allocate a one",
    "start": "2181310",
    "end": "2186590"
  },
  {
    "text": "megabyte buffer that's just basically to take care of possible alignment issues",
    "start": "2186590",
    "end": "2191930"
  },
  {
    "text": "I'm not going to get into that but there's something in the appendix for that and after that you're going to",
    "start": "2191930",
    "end": "2197660"
  },
  {
    "text": "allocate something that is one megabyte minus the size of the kernel stack and then that's going to update the hint and",
    "start": "2197660",
    "end": "2203650"
  },
  {
    "text": "because the hint is right before that thing there you can just allocate a new",
    "start": "2203650",
    "end": "2208760"
  },
  {
    "text": "stack it's going to be there and you end up being able to place a kernel stack and you know not an arbitrary offset",
    "start": "2208760",
    "end": "2217400"
  },
  {
    "text": "from the function buffer but a known offset that's really all you want because at this point then we can manufacture our receive buffers in such",
    "start": "2217400",
    "end": "2224420"
  },
  {
    "text": "a way that we know that the sub allocation that we care about will be placed to overlap with that kernel stack",
    "start": "2224420",
    "end": "2231160"
  },
  {
    "start": "2231000",
    "end": "2267000"
  },
  {
    "text": "so we're good at this point we have filled in all three of those requirements and we are actually able to",
    "start": "2231160",
    "end": "2237770"
  },
  {
    "text": "write write memory out of bounds and everything is awesome the only thing is since we were corrupting a kernel thread",
    "start": "2237770",
    "end": "2242930"
  },
  {
    "text": "stack we actually need to bypass KS LR as you probably hopefully know the end of host OS all memory is kind of",
    "start": "2242930",
    "end": "2249620"
  },
  {
    "text": "randomized so we don't really know you know whoa",
    "start": "2249620",
    "end": "2255089"
  },
  {
    "text": "we want to override a fret stack the reason one will read the threat stack is to overwrite a return address we can't overwrite a return address",
    "start": "2255089",
    "end": "2260999"
  },
  {
    "text": "unless we know what to overwrite it with so we need to know the location of some code and the host to us in order to do",
    "start": "2260999",
    "end": "2266519"
  },
  {
    "text": "that and so that's what bypassing Kas floor means is just finding the address of a piece of code that is known and the",
    "start": "2266519",
    "end": "2274319"
  },
  {
    "start": "2267000",
    "end": "2630000"
  },
  {
    "text": "first way to do that is actually just define it in info leak and so the info",
    "start": "2274319",
    "end": "2279749"
  },
  {
    "text": "leak that I found for this for this text plate is actually really like quite simple basically this is how these like",
    "start": "2279749",
    "end": "2286799"
  },
  {
    "text": "this is the structure of a use by both the host OS and the guest OS for VM switch messages and you have this Union",
    "start": "2286799",
    "end": "2292979"
  },
  {
    "text": "right the thing about unions is not every member of a union has to be the same length so for example you have like",
    "start": "2292979",
    "end": "2299099"
  },
  {
    "text": "one message to the left here that has one more field than the one to the right and that's totally fine except that you",
    "start": "2299099",
    "end": "2306839"
  },
  {
    "text": "know once you do size of that struct it's gonna be used at the same size everywhere and that means that if you",
    "start": "2306839",
    "end": "2314759"
  },
  {
    "text": "allocate that structure on the stack never fully initialize it and just send",
    "start": "2314759",
    "end": "2320190"
  },
  {
    "text": "over like the entire size of that structure well you return a bunch of initialized stack bytes and",
    "start": "2320190",
    "end": "2325729"
  },
  {
    "text": "uninitialized stack bytes are pretty great for us because they typically contain return addresses and so we were",
    "start": "2325729",
    "end": "2330779"
  },
  {
    "text": "able to get a return address from VM switch which is awesome and with that return address we are able to you know",
    "start": "2330779",
    "end": "2336119"
  },
  {
    "text": "build a rope chain and get code execution and all that fun stuff and so we're done except for not as it turns",
    "start": "2336119",
    "end": "2343229"
  },
  {
    "text": "out that info leak is awesome but it only worked on older versions of Windows a time that was Windows Server 2012 r2",
    "start": "2343229",
    "end": "2349130"
  },
  {
    "text": "so we were actually targeting Windows 10 so oops let's find something else and actually",
    "start": "2349130",
    "end": "2355920"
  },
  {
    "text": "that new method that other method that were going to talk about does not include a new vulnerability it's just a way of you know dealing with case law",
    "start": "2355920",
    "end": "2362609"
  },
  {
    "text": "without you know finding a new bug and the thing to know about ksl on Windows",
    "start": "2362609",
    "end": "2368069"
  },
  {
    "text": "at least for for drivers is that each driver is gonna be aligned to this 0 X",
    "start": "2368069",
    "end": "2373229"
  },
  {
    "text": "10,000 byte boundary so that means is that if you overwrite the lower two bytes of an address within that module",
    "start": "2373229",
    "end": "2380279"
  },
  {
    "text": "well you can change the offset within the module without having any information about where the module is",
    "start": "2380279",
    "end": "2385650"
  },
  {
    "text": "and so if you'll recall we have the ability to write arbitrary data you know semi-controlled offset",
    "start": "2385650",
    "end": "2391380"
  },
  {
    "text": "inside of the host inside of like that criminal threat stack so it means that we can totally just overwrite the lower",
    "start": "2391380",
    "end": "2396960"
  },
  {
    "text": "two bites of something so we can see the example down there is we have this actual valid return address on the stack",
    "start": "2396960",
    "end": "2402480"
  },
  {
    "text": "and instead we overwrite the lower two bytes and then it's going to point towards a rap gadget in this case just",
    "start": "2402480",
    "end": "2408630"
  },
  {
    "text": "pop our fifteen ret which is not really useful and that's kind of the thing though it's like okay we can jump to",
    "start": "2408630",
    "end": "2414090"
  },
  {
    "text": "robbed gadget cool but we only have like 0 X 10 bytes which is like 64 K of range",
    "start": "2414090",
    "end": "2419700"
  },
  {
    "text": "or something and well we can't really do anything useful with just one Rob gadget or can't we thinking about the",
    "start": "2419700",
    "end": "2427950"
  },
  {
    "text": "allocations again right we had this thread stack right after a receive buffer and we still have the ability to",
    "start": "2427950",
    "end": "2434370"
  },
  {
    "text": "map more shared memories so what if we allocated like say a send buffer right before right after a thread stack and we",
    "start": "2434370",
    "end": "2441510"
  },
  {
    "text": "have this shared memory between the guest in the host right after the Fed stack and then we have the ability to jump to one rock",
    "start": "2441510",
    "end": "2447210"
  },
  {
    "text": "gadget well this Rob Petch is pretty great because it's just going to do RSP plus equals like almost a whole page",
    "start": "2447210",
    "end": "2453360"
  },
  {
    "text": "worth of data and so thinking about it you have like the thread stack at the top here on the right you have this you",
    "start": "2453360",
    "end": "2461820"
  },
  {
    "text": "know you have this this return addressed there you overwrite it to jump to that Rob gadget okay and then what's gonna",
    "start": "2461820",
    "end": "2468030"
  },
  {
    "text": "happen RSP is going to go from your kernel thread stack right into shared",
    "start": "2468030",
    "end": "2473670"
  },
  {
    "text": "memory say okay this is cool we can like control more data that's gonna be interpreted as being the stack that's",
    "start": "2473670",
    "end": "2479580"
  },
  {
    "text": "nice but of course once you hit ret well it's just gonna crash because the guest to us doesn't really have any way of",
    "start": "2479580",
    "end": "2485670"
  },
  {
    "text": "knowing what to put in there that's the whole point we're trying to get and a slower bypass but what's cool about that is it's going to crash and when an x86",
    "start": "2485670",
    "end": "2494010"
  },
  {
    "text": "CPU crashes at least on Windows it's going to put the return address of where the crash happened on to the stack which",
    "start": "2494010",
    "end": "2500010"
  },
  {
    "text": "means as a guest who has access to that share memory I can actually read back that return address of where the crash",
    "start": "2500010",
    "end": "2506820"
  },
  {
    "text": "happened and then the exception handler of Windows is going to be using my shared",
    "start": "2506820",
    "end": "2512100"
  },
  {
    "text": "memory as a stack for the exception handling and so as an attacker I can both read and write from that and I can",
    "start": "2512100",
    "end": "2518070"
  },
  {
    "text": "redirect execution from the exception handler into anywhere I want and so that's how you bypass chaos floor",
    "start": "2518070",
    "end": "2523869"
  },
  {
    "text": "without an info leak you basically just move the stack into shared memory doesn't work for many",
    "start": "2523869",
    "end": "2529300"
  },
  {
    "text": "things but in this case it came in pretty handy so as a result we have Rob",
    "start": "2529300",
    "end": "2534520"
  },
  {
    "text": "and by extension Constitution on windows 10 from a guest VM which is cool but",
    "start": "2534520",
    "end": "2540610"
  },
  {
    "text": "let's see how that works in practice I do a live demo ok ok I can't see",
    "start": "2540610",
    "end": "2549750"
  },
  {
    "text": "just a second just making sure I can",
    "start": "2549750",
    "end": "2557440"
  },
  {
    "text": "actually see the screen ok ok so this is",
    "start": "2557440",
    "end": "2565060"
  },
  {
    "text": "running Windows Server 2012 r2 just running on this little laptop here which is not server you know whatever and this",
    "start": "2565060",
    "end": "2571240"
  },
  {
    "text": "is a a VM here right so what I'm gonna do is I'm gonna pop up my super elite",
    "start": "2571240",
    "end": "2578320"
  },
  {
    "text": "hacker shell and I first want to grab the VM bus channel that is being used by",
    "start": "2578320",
    "end": "2586540"
  },
  {
    "text": "VM switch okay so let's just return to address of that and the guest OS then what check that my info leaked actually",
    "start": "2586540",
    "end": "2591640"
  },
  {
    "text": "works um this is for God okay",
    "start": "2591640",
    "end": "2603430"
  },
  {
    "text": "I just hung it didn't crash or anything it's just hanging there okay I guess no",
    "start": "2603430",
    "end": "2612970"
  },
  {
    "text": "live demo okay I mean I keep going and try to get that working as possible but",
    "start": "2612970",
    "end": "2620800"
  },
  {
    "text": "this was supposed to work is it supposed to be really cool so let's keep going in",
    "start": "2620800",
    "end": "2626500"
  },
  {
    "text": "the meantime in the meantime what's happening what's happening is what want",
    "start": "2626500",
    "end": "2633040"
  },
  {
    "start": "2630000",
    "end": "2710000"
  },
  {
    "text": "to do is okay so we have this exploit which as you just saw we're super well super reliable is really awesome and",
    "start": "2633040",
    "end": "2638890"
  },
  {
    "text": "based on that we have like this whole host of data I just got right and so data that we get from like",
    "start": "2638890",
    "end": "2647370"
  },
  {
    "text": "writing these exploits is it's a couple things it's first like the the vulnerability discovery right it's a little process now we are able to know",
    "start": "2647370",
    "end": "2653400"
  },
  {
    "text": "okay where to look for for for more you know for more vulnerabilities how do you",
    "start": "2653400",
    "end": "2659100"
  },
  {
    "text": "want to do that the the best way for us to do that really for for vulnerabilities is either going to be",
    "start": "2659100",
    "end": "2664320"
  },
  {
    "text": "introducing mitigations that we believe are actually going to you know kill",
    "start": "2664320",
    "end": "2669420"
  },
  {
    "text": "certain certain types of vulnerabilities but that's typically difficult and",
    "start": "2669420",
    "end": "2676380"
  },
  {
    "text": "instead what we want to do most likely is going to be stuff like a lot of code review internally or you know",
    "start": "2676380",
    "end": "2683340"
  },
  {
    "text": "introducing a bug bounty that pays out $250,000 for working exploit next thing we can do is learn from our exploits",
    "start": "2683340",
    "end": "2690350"
  },
  {
    "text": "techniques that we use and hopefully introduce some new I'm sorry I'm trying",
    "start": "2690350",
    "end": "2697560"
  },
  {
    "text": "to do two things at once it's really difficult yes so introduce some new some",
    "start": "2697560",
    "end": "2705240"
  },
  {
    "text": "new mitigation that will break these exploit techniques and so in order and",
    "start": "2705240",
    "end": "2710790"
  },
  {
    "start": "2710000",
    "end": "2767000"
  },
  {
    "text": "so we kind of did that and in addition to like kind of trying to break the whole post exploitation game right in",
    "start": "2710790",
    "end": "2715980"
  },
  {
    "text": "terms of breaking the post exploitation game is not necessarily going to be introducing more mitigations although",
    "start": "2715980",
    "end": "2721080"
  },
  {
    "text": "that's definitely a part of it it's going to be reacting things in such a way that you know we make the targets",
    "start": "2721080",
    "end": "2726720"
  },
  {
    "text": "less interesting and so in terms of mitigation that we introduced the first",
    "start": "2726720",
    "end": "2732030"
  },
  {
    "text": "and most obvious thing I think is just going to be separating the kernel stacks from the rest of memory the reasoning",
    "start": "2732030",
    "end": "2739440"
  },
  {
    "text": "between behind that is that this way you'll never be able to overflow from any buffer into a kernel stack and so",
    "start": "2739440",
    "end": "2745530"
  },
  {
    "text": "that's just better not only for hyper-v which has all these you know has all these buffers that are handling that are",
    "start": "2745530",
    "end": "2754140"
  },
  {
    "text": "working in in that same memory region but also for other you know drivers that",
    "start": "2754140",
    "end": "2760500"
  },
  {
    "text": "use MBL's and map physical memory and all that and so so that's the first",
    "start": "2760500",
    "end": "2765540"
  },
  {
    "text": "mitigation the the second thing that we can look into is more much more general mitigations things like hvc iso",
    "start": "2765540",
    "end": "2771600"
  },
  {
    "start": "2767000",
    "end": "2827000"
  },
  {
    "text": "hypervisor enforce code integrity which makes it such that attackers cannot check new unsigned code into the host OS",
    "start": "2771600",
    "end": "2777480"
  },
  {
    "text": "kernel in addition to that we have things like K CFG which you know is preventing the takeover of certain",
    "start": "2777480",
    "end": "2784950"
  },
  {
    "text": "function pointers and things like that in the host OS kernel and so that's just",
    "start": "2784950",
    "end": "2789990"
  },
  {
    "text": "like very general hardening that we are definitely doing in like these features have existed for a little while but now",
    "start": "2789990",
    "end": "2795150"
  },
  {
    "text": "there's like more and more effort to make it happen by default on more platforms addition to that we are",
    "start": "2795150",
    "end": "2801300"
  },
  {
    "text": "actually investing with Intel and other partners in security features are actually implemented in Hardware the",
    "start": "2801300",
    "end": "2807780"
  },
  {
    "text": "main one of those that would actually totally apply to this exploit is CT which is going to be a you know a",
    "start": "2807780",
    "end": "2813840"
  },
  {
    "text": "hardware implemented shadow stack which is going to make it such that you cannot just overwrite a return address with",
    "start": "2813840",
    "end": "2819480"
  },
  {
    "text": "whatever the whatever you want and that prevents Rob and that prevents this exploit in addition to other stuff in",
    "start": "2819480",
    "end": "2825180"
  },
  {
    "text": "terms of more architectural changes that would change the post exploitation game you've got you've got okay this works we",
    "start": "2825180",
    "end": "2837510"
  },
  {
    "text": "are going to switch back to this demo as soon as I can connect back in there but",
    "start": "2837510",
    "end": "2845040"
  },
  {
    "text": "yeah so the thing I was saying is you actually have sort of VSPs that live in the the host OS user mode and the reason",
    "start": "2845040",
    "end": "2850830"
  },
  {
    "text": "that that's interesting is that most of as user mode is gonna be isolated on a",
    "start": "2850830",
    "end": "2855930"
  },
  {
    "text": "per VM basis so if you break into the amore process well you've only really broken into one vm's worker process",
    "start": "2855930",
    "end": "2861570"
  },
  {
    "text": "unlike this where you're gonna see you actually are able to do a lot of things so hopefully so this actually shows that",
    "start": "2861570",
    "end": "2868619"
  },
  {
    "text": "the exploit actually worked and I'm just going to skip a few things let's see",
    "start": "2868619",
    "end": "2875720"
  },
  {
    "text": "first wanna so this is actually listing the processes in the host OS from the",
    "start": "2875720",
    "end": "2881460"
  },
  {
    "text": "guest OS right so you have a list of this and well I mean you don't really have like any reason to believe that any",
    "start": "2881460",
    "end": "2886770"
  },
  {
    "text": "of this is legitimate because anyone can come up a list of pidz but let's see if we can inject a DLL",
    "start": "2886770",
    "end": "2892859"
  },
  {
    "text": "into the host to us explorer.exe yes we",
    "start": "2892859",
    "end": "2898770"
  },
  {
    "text": "can [Applause]",
    "start": "2898770",
    "end": "2902820"
  },
  {
    "text": "okay this is cool that actually worked for once well not for once but so yes so the",
    "start": "2905090",
    "end": "2910800"
  },
  {
    "text": "thing was in addition to that I'm also running a second VM on this machine because I want my demos to be really",
    "start": "2910800",
    "end": "2916350"
  },
  {
    "text": "complicated and we're gonna do is rejection I like I log into that VM no",
    "start": "2916350",
    "end": "2922590"
  },
  {
    "text": "particular reason and from the original guests not kissed can actually list what",
    "start": "2922590",
    "end": "2928650"
  },
  {
    "text": "other partitions are living in there okay so you have two and three I'm gonna guess that we're two because sure and",
    "start": "2928650",
    "end": "2935640"
  },
  {
    "text": "then we can actually grab the other guests okay it's going to kind of hook",
    "start": "2935640",
    "end": "2942510"
  },
  {
    "text": "into the other VM and at this point we are actually able to come on so there",
    "start": "2942510",
    "end": "2960660"
  },
  {
    "text": "were a few more things for the demo but you know first failure kind of breaks things anyway I have about three seconds",
    "start": "2960660",
    "end": "2967800"
  },
  {
    "text": "left so the whole point is like yeah you have one being with a process per VM and so if you break into that very important process in one of those VIPs VSPs that",
    "start": "2967800",
    "end": "2974700"
  },
  {
    "text": "is in the worker process well you've only really broken into that worker process if you want to have full access to all the other VMs like I just showed",
    "start": "2974700",
    "end": "2981300"
  },
  {
    "text": "you you still need to escalate to like a kernel level and so this is something that we're definitely trying to invest",
    "start": "2981300",
    "end": "2987780"
  },
  {
    "text": "in in terms of well we are actually hardening also the worker process even more so than the kernel",
    "start": "2987780",
    "end": "2993720"
  },
  {
    "text": "you know improvements the sandbox improvements to our scene mitigations and addition to that you know we are trying to move more and more hyper-v",
    "start": "2993720",
    "end": "3000560"
  },
  {
    "text": "components into user mode because it's just a much better security posture and",
    "start": "3000560",
    "end": "3006820"
  },
  {
    "text": "ok now my slides okay and the last thing I want to talk about is just hyper-v Avanti so what I just demoed here assume",
    "start": "3007420",
    "end": "3014210"
  },
  {
    "text": "you have worked the first time is worth $250,000 to Microsoft and keep in mind",
    "start": "3014210",
    "end": "3019850"
  },
  {
    "text": "this is about Oh month's work of work so if you want to make you know one two or",
    "start": "3019850",
    "end": "3025010"
  },
  {
    "text": "three years worth of salary in a month please submit to our bounty pay really well",
    "start": "3025010",
    "end": "3030800"
  },
  {
    "text": "and there's actually more and more resources out there in terms of getting started one good thing one good resource",
    "start": "3030800",
    "end": "3037160"
  },
  {
    "text": "to like get started is actually a talk that was yesterday by Jovi Alec and Nico",
    "start": "3037160",
    "end": "3042430"
  },
  {
    "text": "so the slides should be available online in addition to that we actually have a lot of really well documented guests I'd",
    "start": "3042430",
    "end": "3048080"
  },
  {
    "text": "driver code that is in on github so you can just like click on that and figure",
    "start": "3048080",
    "end": "3053660"
  },
  {
    "text": "out how these VSPs work just by looking at VSC source code really well documented honestly maybe better documents and then some internal",
    "start": "3053660",
    "end": "3059930"
  },
  {
    "text": "code and in addition to that we have been publishing a bunch of hyper-v symbols so a lot for you get started",
    "start": "3059930",
    "end": "3066440"
  },
  {
    "text": "with and hopefully we'll hear from you and about you thank you for your time [Applause]",
    "start": "3066440",
    "end": "3073429"
  }
]