[
  {
    "text": "hi everyone uh thanks so much for coming",
    "start": "120",
    "end": "2200"
  },
  {
    "text": "to this late last presentation of the",
    "start": "2200",
    "end": "4759"
  },
  {
    "text": "day today I'm going to talk about",
    "start": "4759",
    "end": "7120"
  },
  {
    "text": "redefinition in ecmascript this is a",
    "start": "7120",
    "end": "9840"
  },
  {
    "text": "short talk about a specific class of",
    "start": "9840",
    "end": "11840"
  },
  {
    "text": "bugs that I've been finding a lot of",
    "start": "11840",
    "end": "13480"
  },
  {
    "text": "lately and I think is a little bit",
    "start": "13480",
    "end": "15200"
  },
  {
    "text": "underdocumented so today I'm going to",
    "start": "15200",
    "end": "17640"
  },
  {
    "text": "explain what I mean by redefinition in",
    "start": "17640",
    "end": "19640"
  },
  {
    "text": "ecmascript and the sort of problems it",
    "start": "19640",
    "end": "21600"
  },
  {
    "text": "can cause I'll also go through some bugs",
    "start": "21600",
    "end": "24119"
  },
  {
    "text": "that I found that involve redefinition",
    "start": "24119",
    "end": "25920"
  },
  {
    "text": "and explain how they work and how to",
    "start": "25920",
    "end": "27439"
  },
  {
    "text": "reach them but before I begin I should",
    "start": "27439",
    "end": "30080"
  },
  {
    "text": "introduce myself I'm Natalie sanovich",
    "start": "30080",
    "end": "32680"
  },
  {
    "text": "and I'm a security researcher on",
    "start": "32680",
    "end": "34200"
  },
  {
    "text": "Google's Project zero and I'm a flash",
    "start": "34200",
    "end": "36640"
  },
  {
    "text": "Enthusiast and I'm an ecmascript",
    "start": "36640",
    "end": "38320"
  },
  {
    "text": "Enthusiast and I love making the sad",
    "start": "38320",
    "end": "40320"
  },
  {
    "text": "puzzle piece",
    "start": "40320",
    "end": "42320"
  },
  {
    "text": "appear so to start off I'm going to give",
    "start": "42320",
    "end": "44520"
  },
  {
    "text": "a quick example of what I mean by",
    "start": "44520",
    "end": "47120"
  },
  {
    "text": "redefinition this piece of code in",
    "start": "47120",
    "end": "49239"
  },
  {
    "text": "JavaScript for your browser um has two",
    "start": "49239",
    "end": "52520"
  },
  {
    "text": "functions one is document. WR which is",
    "start": "52520",
    "end": "55239"
  },
  {
    "text": "wrapped by this function f and that's",
    "start": "55239",
    "end": "57440"
  },
  {
    "text": "the function that puts a text on your",
    "start": "57440",
    "end": "60559"
  },
  {
    "text": "screen in the browser and then there's a",
    "start": "60559",
    "end": "62559"
  },
  {
    "text": "second function here alert and that's",
    "start": "62559",
    "end": "64600"
  },
  {
    "text": "the one that spawns the modal dialogue",
    "start": "64600",
    "end": "66400"
  },
  {
    "text": "with the dismiss button and I'm doing",
    "start": "66400",
    "end": "68400"
  },
  {
    "text": "alert equals F alert equals document.",
    "start": "68400",
    "end": "70920"
  },
  {
    "text": "write and then calling alert and there's",
    "start": "70920",
    "end": "73680"
  },
  {
    "text": "really three things that can happen here",
    "start": "73680",
    "end": "76360"
  },
  {
    "text": "behind door number one is that the",
    "start": "76360",
    "end": "78680"
  },
  {
    "text": "original function alert fires behind",
    "start": "78680",
    "end": "81720"
  },
  {
    "text": "door number two is that the second",
    "start": "81720",
    "end": "84520"
  },
  {
    "text": "function document. WR fires and then the",
    "start": "84520",
    "end": "87119"
  },
  {
    "text": "third possibility is that the browser",
    "start": "87119",
    "end": "89360"
  },
  {
    "text": "just kind of get gives up on executing",
    "start": "89360",
    "end": "91640"
  },
  {
    "text": "script and what happens at least most of",
    "start": "91640",
    "end": "94240"
  },
  {
    "text": "the time is this middle case usually",
    "start": "94240",
    "end": "96680"
  },
  {
    "text": "when you do F1 equals F2 in a browser",
    "start": "96680",
    "end": "99479"
  },
  {
    "text": "and then call F1 it's actually F2 that",
    "start": "99479",
    "end": "101799"
  },
  {
    "text": "executes and that's what I'm going to",
    "start": "101799",
    "end": "103479"
  },
  {
    "text": "talk about although sometimes sometimes",
    "start": "103479",
    "end": "106360"
  },
  {
    "text": "these other guys happen and this depends",
    "start": "106360",
    "end": "108920"
  },
  {
    "text": "on your browser and your ecmascript",
    "start": "108920",
    "end": "110640"
  },
  {
    "text": "implementation and also specifically",
    "start": "110640",
    "end": "112520"
  },
  {
    "text": "what function you're trying to overwrite",
    "start": "112520",
    "end": "114799"
  },
  {
    "text": "so there's interesting bugs with the",
    "start": "114799",
    "end": "115920"
  },
  {
    "text": "middle case so I'm going to talk about",
    "start": "115920",
    "end": "117320"
  },
  {
    "text": "those bugs and also if you're happening",
    "start": "117320",
    "end": "119159"
  },
  {
    "text": "to get the two side cases how you can",
    "start": "119159",
    "end": "121640"
  },
  {
    "text": "get yourself towards this middle case",
    "start": "121640",
    "end": "123640"
  },
  {
    "text": "and reach an issue that is happening due",
    "start": "123640",
    "end": "126200"
  },
  {
    "text": "to",
    "start": "126200",
    "end": "127440"
  },
  {
    "text": "redefinition so what I'm going to talk",
    "start": "127440",
    "end": "129239"
  },
  {
    "text": "about more specifically is um what",
    "start": "129239",
    "end": "132280"
  },
  {
    "text": "happens if a function gets redefined",
    "start": "132280",
    "end": "134879"
  },
  {
    "text": "that the virtual machine relies on what",
    "start": "134879",
    "end": "137519"
  },
  {
    "text": "if the virtual machine is executing",
    "start": "137519",
    "end": "139840"
  },
  {
    "text": "ecmascript and it's in a native function",
    "start": "139840",
    "end": "142080"
  },
  {
    "text": "and then it needs to call into",
    "start": "142080",
    "end": "143280"
  },
  {
    "text": "ecmascript again for a different reason",
    "start": "143280",
    "end": "146200"
  },
  {
    "text": "for example let's say there's a call",
    "start": "146200",
    "end": "147720"
  },
  {
    "text": "back or some function that's only",
    "start": "147720",
    "end": "149519"
  },
  {
    "text": "described in ecmascript and what happens",
    "start": "149519",
    "end": "152480"
  },
  {
    "text": "is that sometimes the virtual machine",
    "start": "152480",
    "end": "154160"
  },
  {
    "text": "makes assumptions about what will happen",
    "start": "154160",
    "end": "156640"
  },
  {
    "text": "sometimes it assumes that this function",
    "start": "156640",
    "end": "158480"
  },
  {
    "text": "has not been overridden even though it",
    "start": "158480",
    "end": "160280"
  },
  {
    "text": "has and this can lead to all sorts of",
    "start": "160280",
    "end": "162560"
  },
  {
    "text": "interesting issues I've seen Usef freeze",
    "start": "162560",
    "end": "165239"
  },
  {
    "text": "I've seen overflows I've seen type",
    "start": "165239",
    "end": "166680"
  },
  {
    "text": "confusions all sorts of",
    "start": "166680",
    "end": "168440"
  },
  {
    "text": "bugs I've heard these types of bugs",
    "start": "168440",
    "end": "170599"
  },
  {
    "text": "called re-entrance vulnerabilities but I",
    "start": "170599",
    "end": "172519"
  },
  {
    "text": "don't really like that term because",
    "start": "172519",
    "end": "174159"
  },
  {
    "text": "re-entrance isn't always required",
    "start": "174159",
    "end": "176519"
  },
  {
    "text": "sometimes all that's required is",
    "start": "176519",
    "end": "177959"
  },
  {
    "text": "redefining a method and then calling",
    "start": "177959",
    "end": "179560"
  },
  {
    "text": "something else and that's it flash seems",
    "start": "179560",
    "end": "182319"
  },
  {
    "text": "especially susceptible to these types of",
    "start": "182319",
    "end": "184080"
  },
  {
    "text": "issues on Project zero we' found 24 of",
    "start": "184080",
    "end": "186680"
  },
  {
    "text": "them in the past six months most of them",
    "start": "186680",
    "end": "189400"
  },
  {
    "text": "are in action script too because uh",
    "start": "189400",
    "end": "191400"
  },
  {
    "text": "that's the AC implementation that allows",
    "start": "191400",
    "end": "193159"
  },
  {
    "text": "the most to be redefined although",
    "start": "193159",
    "end": "195239"
  },
  {
    "text": "there's also been a few bugs in",
    "start": "195239",
    "end": "197400"
  },
  {
    "text": "as3 and I'm definitely not the first",
    "start": "197400",
    "end": "199799"
  },
  {
    "text": "person to think of this in fact the",
    "start": "199799",
    "end": "201760"
  },
  {
    "text": "first time I heard of such a thing was",
    "start": "201760",
    "end": "203440"
  },
  {
    "text": "in at at woot in 2009 and there was this",
    "start": "203440",
    "end": "206680"
  },
  {
    "text": "talk where basically the authors were",
    "start": "206680",
    "end": "208560"
  },
  {
    "text": "able to bypass origin policy by using",
    "start": "208560",
    "end": "211879"
  },
  {
    "text": "redefinition they made one function",
    "start": "211879",
    "end": "213799"
  },
  {
    "text": "equal to a function they defined and",
    "start": "213799",
    "end": "216159"
  },
  {
    "text": "then um this was called into different",
    "start": "216159",
    "end": "217959"
  },
  {
    "text": "context and the script was actually",
    "start": "217959",
    "end": "219560"
  },
  {
    "text": "executed in that context and this sort",
    "start": "219560",
    "end": "222120"
  },
  {
    "text": "of thing still happens there's actually",
    "start": "222120",
    "end": "223879"
  },
  {
    "text": "a similar issue this JS privilege",
    "start": "223879",
    "end": "226000"
  },
  {
    "text": "escalation in Firefox in 2014 that",
    "start": "226000",
    "end": "229200"
  },
  {
    "text": "involved function",
    "start": "229200",
    "end": "230720"
  },
  {
    "text": "redefinition but there's also these",
    "start": "230720",
    "end": "232519"
  },
  {
    "text": "memory corruption issues that can happen",
    "start": "232519",
    "end": "234720"
  },
  {
    "text": "due to uh VM assumptions and there's",
    "start": "234720",
    "end": "237599"
  },
  {
    "text": "been two of them that I know of there's",
    "start": "237599",
    "end": "239200"
  },
  {
    "text": "probably more in the past two years",
    "start": "239200",
    "end": "241599"
  },
  {
    "text": "there was an overflow in Chrome and",
    "start": "241599",
    "end": "243280"
  },
  {
    "text": "there was a use after free in Firefox",
    "start": "243280",
    "end": "245959"
  },
  {
    "text": "and recently there was the hacking team",
    "start": "245959",
    "end": "247920"
  },
  {
    "text": "dump and there were five issues in Flash",
    "start": "247920",
    "end": "250680"
  },
  {
    "text": "discovered in this dump and actually",
    "start": "250680",
    "end": "252319"
  },
  {
    "text": "four of them involve function",
    "start": "252319",
    "end": "253959"
  },
  {
    "text": "redefinition which shows that this is",
    "start": "253959",
    "end": "255959"
  },
  {
    "text": "really a type of attack that is used by",
    "start": "255959",
    "end": "258280"
  },
  {
    "text": "attackers in the",
    "start": "258280",
    "end": "260040"
  },
  {
    "text": "wild so um how do you actually redefine",
    "start": "260040",
    "end": "262800"
  },
  {
    "text": "a method the most simple way is using",
    "start": "262800",
    "end": "265720"
  },
  {
    "text": "the equality operator and this is the",
    "start": "265720",
    "end": "268400"
  },
  {
    "text": "easiest in action script too in action",
    "start": "268400",
    "end": "270400"
  },
  {
    "text": "script 2 everything can be redefined as",
    "start": "270400",
    "end": "272880"
  },
  {
    "text": "everything there's no guarantee this",
    "start": "272880",
    "end": "274759"
  },
  {
    "text": "will compile sometimes you have to write",
    "start": "274759",
    "end": "276880"
  },
  {
    "text": "the bite code by hand and sometimes",
    "start": "276880",
    "end": "279639"
  },
  {
    "text": "there's readon properties so you have to",
    "start": "279639",
    "end": "281360"
  },
  {
    "text": "fix them using this method called as set",
    "start": "281360",
    "end": "283320"
  },
  {
    "text": "props but in action script 2 um anything",
    "start": "283320",
    "end": "285440"
  },
  {
    "text": "can be defined with anything a",
    "start": "285440",
    "end": "287600"
  },
  {
    "text": "JavaScript is basically the same a",
    "start": "287600",
    "end": "289680"
  },
  {
    "text": "JavaScript can redefine anything as",
    "start": "289680",
    "end": "291440"
  },
  {
    "text": "anything um with one um exception if you",
    "start": "291440",
    "end": "294680"
  },
  {
    "text": "try to redefine one native method as",
    "start": "294680",
    "end": "297000"
  },
  {
    "text": "another native method it will um not",
    "start": "297000",
    "end": "299960"
  },
  {
    "text": "work so you need to put a wrapper around",
    "start": "299960",
    "end": "301479"
  },
  {
    "text": "the second um n native method and that's",
    "start": "301479",
    "end": "304000"
  },
  {
    "text": "why I had the wrapper in the example I",
    "start": "304000",
    "end": "305520"
  },
  {
    "text": "showed at the beginning um but this",
    "start": "305520",
    "end": "307400"
  },
  {
    "text": "doesn't really actually stop you from",
    "start": "307400",
    "end": "309120"
  },
  {
    "text": "doing anything it's just you need to",
    "start": "309120",
    "end": "310479"
  },
  {
    "text": "make sure you remember to put the",
    "start": "310479",
    "end": "311840"
  },
  {
    "text": "wrapper around the function before you",
    "start": "311840",
    "end": "313400"
  },
  {
    "text": "redefine it action script 3 is much more",
    "start": "313400",
    "end": "316639"
  },
  {
    "text": "restricted classes need to be defined",
    "start": "316639",
    "end": "319280"
  },
  {
    "text": "with uh basically the dynamic keyword",
    "start": "319280",
    "end": "321160"
  },
  {
    "text": "for uh functions to be able to redefine",
    "start": "321160",
    "end": "322960"
  },
  {
    "text": "with be redefined with the quality but",
    "start": "322960",
    "end": "324960"
  },
  {
    "text": "fortunately there's a lot of other ways",
    "start": "324960",
    "end": "326360"
  },
  {
    "text": "you can redefine stuff in action script",
    "start": "326360",
    "end": "328199"
  },
  {
    "text": "3 which I'll talk about later",
    "start": "328199",
    "end": "331199"
  },
  {
    "text": "so to give an example of this type of",
    "start": "331199",
    "end": "333479"
  },
  {
    "text": "bug I'm going to go through this bug in",
    "start": "333479",
    "end": "335160"
  },
  {
    "text": "filter processing and um just as to",
    "start": "335160",
    "end": "338440"
  },
  {
    "text": "start going through the bugs I want to",
    "start": "338440",
    "end": "339639"
  },
  {
    "text": "mention that these were all reported to",
    "start": "339639",
    "end": "341080"
  },
  {
    "text": "Adobe and they've all been fixed and I",
    "start": "341080",
    "end": "343000"
  },
  {
    "text": "really appreciate that they fixed these",
    "start": "343000",
    "end": "344960"
  },
  {
    "text": "issues quickly um I'm not going to go",
    "start": "344960",
    "end": "346840"
  },
  {
    "text": "through the history of every bug but",
    "start": "346840",
    "end": "348160"
  },
  {
    "text": "don't worry um they've all been fixed so",
    "start": "348160",
    "end": "351039"
  },
  {
    "text": "this issue um is in this filter Setter",
    "start": "351039",
    "end": "354160"
  },
  {
    "text": "for about an object and what this code",
    "start": "354160",
    "end": "356039"
  },
  {
    "text": "does is it starts off by creating a blur",
    "start": "356039",
    "end": "358479"
  },
  {
    "text": "filter and and then it calls the filter",
    "start": "358479",
    "end": "361160"
  },
  {
    "text": "Setter on the button object and sets it",
    "start": "361160",
    "end": "363039"
  },
  {
    "text": "to the filter and what this does um in",
    "start": "363039",
    "end": "366120"
  },
  {
    "text": "the VM is it in the button object it",
    "start": "366120",
    "end": "368759"
  },
  {
    "text": "creates ARR an array to hold these",
    "start": "368759",
    "end": "370560"
  },
  {
    "text": "filter objects and then it copies the",
    "start": "370560",
    "end": "372160"
  },
  {
    "text": "blur filter and then what I do is I",
    "start": "372160",
    "end": "374599"
  },
  {
    "text": "redefine the blur filter Constructor as",
    "start": "374599",
    "end": "376759"
  },
  {
    "text": "the convolution filter Constructor using",
    "start": "376759",
    "end": "379160"
  },
  {
    "text": "equality and then this code calls the",
    "start": "379160",
    "end": "382160"
  },
  {
    "text": "getter and what that does is that copies",
    "start": "382160",
    "end": "384720"
  },
  {
    "text": "the uh filter out of the button array",
    "start": "384720",
    "end": "387280"
  },
  {
    "text": "back into a temporary array and then it",
    "start": "387280",
    "end": "389800"
  },
  {
    "text": "tries to create an action script object",
    "start": "389800",
    "end": "391720"
  },
  {
    "text": "to point to it but what happens here is",
    "start": "391720",
    "end": "394560"
  },
  {
    "text": "because the Constructor for that action",
    "start": "394560",
    "end": "396400"
  },
  {
    "text": "script object has been read a find it",
    "start": "396400",
    "end": "398520"
  },
  {
    "text": "actually calls the wrong Constructor and",
    "start": "398520",
    "end": "400720"
  },
  {
    "text": "this is tight confusion because you have",
    "start": "400720",
    "end": "402960"
  },
  {
    "text": "a convolution filter and action script",
    "start": "402960",
    "end": "405319"
  },
  {
    "text": "um pointing to a blur filter backing",
    "start": "405319",
    "end": "407280"
  },
  {
    "text": "object and just to give a feeling of",
    "start": "407280",
    "end": "409440"
  },
  {
    "text": "what's Happening Here this is pseudo",
    "start": "409440",
    "end": "411240"
  },
  {
    "text": "code um for the VM basically it's taking",
    "start": "411240",
    "end": "414000"
  },
  {
    "text": "a blur filter and casting it to a",
    "start": "414000",
    "end": "415759"
  },
  {
    "text": "convolution filter so this can often",
    "start": "415759",
    "end": "418039"
  },
  {
    "text": "mean that integers are confused with",
    "start": "418039",
    "end": "419919"
  },
  {
    "text": "pointers pointers are confused with",
    "start": "419919",
    "end": "421479"
  },
  {
    "text": "integers it's actually a fairly bad bug",
    "start": "421479",
    "end": "424599"
  },
  {
    "text": "to give a second example um this is",
    "start": "424599",
    "end": "426840"
  },
  {
    "text": "another flash issue and this is one",
    "start": "426840",
    "end": "428960"
  },
  {
    "text": "where I had to do a bit more massaging",
    "start": "428960",
    "end": "431039"
  },
  {
    "text": "to actually make it compile so you can",
    "start": "431039",
    "end": "433599"
  },
  {
    "text": "see I have this varb equals flash.net",
    "start": "433599",
    "end": "435840"
  },
  {
    "text": "and then b. file reference equals q and",
    "start": "435840",
    "end": "438160"
  },
  {
    "text": "then Q is actually a wrapper around the",
    "start": "438160",
    "end": "440599"
  },
  {
    "text": "bitmap data Constructor but what this is",
    "start": "440599",
    "end": "442879"
  },
  {
    "text": "actually doing is once again um just",
    "start": "442879",
    "end": "445000"
  },
  {
    "text": "redefining the file reference",
    "start": "445000",
    "end": "446440"
  },
  {
    "text": "Constructor as the bitmap data",
    "start": "446440",
    "end": "448199"
  },
  {
    "text": "Constructor and then then what this bug",
    "start": "448199",
    "end": "450160"
  },
  {
    "text": "does is I create the file reference list",
    "start": "450160",
    "end": "452280"
  },
  {
    "text": "and then I call browse on it and that's",
    "start": "452280",
    "end": "454280"
  },
  {
    "text": "the function that brings all the files",
    "start": "454280",
    "end": "455879"
  },
  {
    "text": "up on the screen so you can select one",
    "start": "455879",
    "end": "458160"
  },
  {
    "text": "but then when you select one it tries to",
    "start": "458160",
    "end": "460000"
  },
  {
    "text": "create this file reference object to um",
    "start": "460000",
    "end": "462319"
  },
  {
    "text": "hold the name of the file you selected",
    "start": "462319",
    "end": "464479"
  },
  {
    "text": "but since the um Constructor has been",
    "start": "464479",
    "end": "466280"
  },
  {
    "text": "overwritten it actually creates a bitmap",
    "start": "466280",
    "end": "468039"
  },
  {
    "text": "data object and once again that's type",
    "start": "468039",
    "end": "470400"
  },
  {
    "text": "confusion the code starts assuming that",
    "start": "470400",
    "end": "472680"
  },
  {
    "text": "the object was created was a bitmap data",
    "start": "472680",
    "end": "474879"
  },
  {
    "text": "was a file reference object when it was",
    "start": "474879",
    "end": "477479"
  },
  {
    "text": "not so and not every acos script",
    "start": "477479",
    "end": "480280"
  },
  {
    "text": "implementation supports a quality and",
    "start": "480280",
    "end": "482840"
  },
  {
    "text": "not every method supports a quality so",
    "start": "482840",
    "end": "484800"
  },
  {
    "text": "another option you have is to use a",
    "start": "484800",
    "end": "486400"
  },
  {
    "text": "proxy object and these are in JavaScript",
    "start": "486400",
    "end": "489400"
  },
  {
    "text": "and action script 3 and they basically",
    "start": "489400",
    "end": "491879"
  },
  {
    "text": "allow U methods that handle variable",
    "start": "491879",
    "end": "494159"
  },
  {
    "text": "access to be defined and you can",
    "start": "494159",
    "end": "495919"
  },
  {
    "text": "basically Define everything you can",
    "start": "495919",
    "end": "497240"
  },
  {
    "text": "Define what happens if a getter gets",
    "start": "497240",
    "end": "498759"
  },
  {
    "text": "called what happens if a Setter gets",
    "start": "498759",
    "end": "500039"
  },
  {
    "text": "called what happens if an unknown field",
    "start": "500039",
    "end": "501720"
  },
  {
    "text": "gets access what happens if you",
    "start": "501720",
    "end": "503080"
  },
  {
    "text": "enumerate whatever and these have caused",
    "start": "503080",
    "end": "505800"
  },
  {
    "text": "a few bugs and Firefox um so I've got an",
    "start": "505800",
    "end": "508560"
  },
  {
    "text": "example of a bug and Flash here this was",
    "start": "508560",
    "end": "511599"
  },
  {
    "text": "found by Ian beer and this was actually",
    "start": "511599",
    "end": "513959"
  },
  {
    "text": "in the open source components of flash",
    "start": "513959",
    "end": "516080"
  },
  {
    "text": "so I have the VM code so starting with",
    "start": "516080",
    "end": "519200"
  },
  {
    "text": "the VM code um of this stringify",
    "start": "519200",
    "end": "521760"
  },
  {
    "text": "function what it does is it takes an",
    "start": "521760",
    "end": "524080"
  },
  {
    "text": "object in action script and it",
    "start": "524080",
    "end": "525680"
  },
  {
    "text": "enumerates over it to figure out how",
    "start": "525680",
    "end": "527800"
  },
  {
    "text": "many fields it has how many properties",
    "start": "527800",
    "end": "529720"
  },
  {
    "text": "it has and then it allocates an array",
    "start": "529720",
    "end": "532800"
  },
  {
    "text": "based on that number of properties and",
    "start": "532800",
    "end": "534440"
  },
  {
    "text": "then it enumerates again and copies them",
    "start": "534440",
    "end": "536440"
  },
  {
    "text": "into the array but what it doesn't",
    "start": "536440",
    "end": "538240"
  },
  {
    "text": "account for is what if this is a proxy",
    "start": "538240",
    "end": "540640"
  },
  {
    "text": "object so it's easy enough to um",
    "start": "540640",
    "end": "543120"
  },
  {
    "text": "Implement a proxy object where the first",
    "start": "543120",
    "end": "544920"
  },
  {
    "text": "time you enumerate it it's really small",
    "start": "544920",
    "end": "547399"
  },
  {
    "text": "and then the second time you enumerate",
    "start": "547399",
    "end": "548640"
  },
  {
    "text": "it it's really large so basically it",
    "start": "548640",
    "end": "550399"
  },
  {
    "text": "enumerates Alex and then the second time",
    "start": "550399",
    "end": "552519"
  },
  {
    "text": "it enumerates it's way too big and you",
    "start": "552519",
    "end": "554079"
  },
  {
    "text": "get an",
    "start": "554079",
    "end": "555320"
  },
  {
    "text": "overflow another interesting way you can",
    "start": "555320",
    "end": "557760"
  },
  {
    "text": "redefine stuff if you can't use equality",
    "start": "557760",
    "end": "560160"
  },
  {
    "text": "is using conversion operators and these",
    "start": "560160",
    "end": "562640"
  },
  {
    "text": "are pretty",
    "start": "562640",
    "end": "564000"
  },
  {
    "text": "interesting uh they're they're",
    "start": "564000",
    "end": "566079"
  },
  {
    "text": "implemented in action script to and also",
    "start": "566079",
    "end": "567839"
  },
  {
    "text": "to some extent in JavaScript and",
    "start": "567839",
    "end": "570000"
  },
  {
    "text": "basically they're used um for conversion",
    "start": "570000",
    "end": "572120"
  },
  {
    "text": "so the two most common of them is value",
    "start": "572120",
    "end": "574440"
  },
  {
    "text": "of and this is called when you need to",
    "start": "574440",
    "end": "576519"
  },
  {
    "text": "convert an object to an integer and",
    "start": "576519",
    "end": "579200"
  },
  {
    "text": "there's two string which is used to",
    "start": "579200",
    "end": "580839"
  },
  {
    "text": "convert an object to a string and this",
    "start": "580839",
    "end": "582560"
  },
  {
    "text": "is used very frequently for logging and",
    "start": "582560",
    "end": "585120"
  },
  {
    "text": "what's really interesting in action",
    "start": "585120",
    "end": "587200"
  },
  {
    "text": "script is if you call a function for",
    "start": "587200",
    "end": "589519"
  },
  {
    "text": "example where one parameter is a number",
    "start": "589519",
    "end": "591519"
  },
  {
    "text": "and then the other parameter is a string",
    "start": "591519",
    "end": "593880"
  },
  {
    "text": "a lot of the time if you provide",
    "start": "593880",
    "end": "595920"
  },
  {
    "text": "something that's not a number as the",
    "start": "595920",
    "end": "597279"
  },
  {
    "text": "first parameter it'll call value of on",
    "start": "597279",
    "end": "599120"
  },
  {
    "text": "it and if you provide something that's",
    "start": "599120",
    "end": "600880"
  },
  {
    "text": "not a string as the second parameter it",
    "start": "600880",
    "end": "602480"
  },
  {
    "text": "will call to string on it um so this can",
    "start": "602480",
    "end": "605079"
  },
  {
    "text": "cause a lot of interesting bugs for",
    "start": "605079",
    "end": "607279"
  },
  {
    "text": "example there's this bug it's the",
    "start": "607279",
    "end": "608680"
  },
  {
    "text": "convolution filter bug and this kind of",
    "start": "608680",
    "end": "611240"
  },
  {
    "text": "has an interesting history I found it in",
    "start": "611240",
    "end": "613320"
  },
  {
    "text": "February and then a very similar bug was",
    "start": "613320",
    "end": "615600"
  },
  {
    "text": "used to win pone to own in March and",
    "start": "615600",
    "end": "617760"
  },
  {
    "text": "then it turned up in the hacking team",
    "start": "617760",
    "end": "619200"
  },
  {
    "text": "dump so at least three people",
    "start": "619200",
    "end": "621000"
  },
  {
    "text": "independently discovered this bug and",
    "start": "621000",
    "end": "623800"
  },
  {
    "text": "the way this works is it involves um",
    "start": "623800",
    "end": "626560"
  },
  {
    "text": "using value of with the filter Matrix",
    "start": "626560",
    "end": "629320"
  },
  {
    "text": "Setter and what this Setter does is it",
    "start": "629320",
    "end": "631920"
  },
  {
    "text": "basically takes an array from action",
    "start": "631920",
    "end": "633720"
  },
  {
    "text": "script and then copies it into a native",
    "start": "633720",
    "end": "635399"
  },
  {
    "text": "array and the actual order of operations",
    "start": "635399",
    "end": "638360"
  },
  {
    "text": "is you call the setter it deletes the",
    "start": "638360",
    "end": "640680"
  },
  {
    "text": "original Matrix and then it reic the new",
    "start": "640680",
    "end": "642839"
  },
  {
    "text": "Matrix and then it copies the numbers",
    "start": "642839",
    "end": "644680"
  },
  {
    "text": "into the Matrix but what this bug is is",
    "start": "644680",
    "end": "648000"
  },
  {
    "text": "you call the Matrix Setter and it",
    "start": "648000",
    "end": "650959"
  },
  {
    "text": "deletes the old Matrix It reall the new",
    "start": "650959",
    "end": "653320"
  },
  {
    "text": "Matrix it copies the numbers except the",
    "start": "653320",
    "end": "655360"
  },
  {
    "text": "numbers aren't actually numbers so it",
    "start": "655360",
    "end": "656880"
  },
  {
    "text": "calls into value of and then it calls",
    "start": "656880",
    "end": "658800"
  },
  {
    "text": "The Matrix Etc again and then this",
    "start": "658800",
    "end": "661160"
  },
  {
    "text": "deletes the array reic it copies in this",
    "start": "661160",
    "end": "663760"
  },
  {
    "text": "the new array you provide as the",
    "start": "663760",
    "end": "664880"
  },
  {
    "text": "parameter and then it returns but wait",
    "start": "664880",
    "end": "666959"
  },
  {
    "text": "the array you're currently copying into",
    "start": "666959",
    "end": "668480"
  },
  {
    "text": "has already been deleted and that's a",
    "start": "668480",
    "end": "670120"
  },
  {
    "text": "use after free um so this is an example",
    "start": "670120",
    "end": "672959"
  },
  {
    "text": "of what you call a re-entrance",
    "start": "672959",
    "end": "674440"
  },
  {
    "text": "vulnerability it's one where if you go",
    "start": "674440",
    "end": "676760"
  },
  {
    "text": "into a function twice when it's not",
    "start": "676760",
    "end": "678880"
  },
  {
    "text": "expecting that you can um change",
    "start": "678880",
    "end": "681000"
  },
  {
    "text": "properties in an unexpected way and it",
    "start": "681000",
    "end": "682639"
  },
  {
    "text": "leads to a bug here's another example of",
    "start": "682639",
    "end": "686240"
  },
  {
    "text": "a bug that involves a value of and this",
    "start": "686240",
    "end": "689040"
  },
  {
    "text": "was found in the hacking team dump and",
    "start": "689040",
    "end": "691399"
  },
  {
    "text": "it was also part of the open source",
    "start": "691399",
    "end": "693160"
  },
  {
    "text": "flash component so there's code for it",
    "start": "693160",
    "end": "696320"
  },
  {
    "text": "and this one's an action script three",
    "start": "696320",
    "end": "698079"
  },
  {
    "text": "and it involves redefining value of",
    "start": "698079",
    "end": "700240"
  },
  {
    "text": "although you'll notice in this case um",
    "start": "700240",
    "end": "702680"
  },
  {
    "text": "you actually have to extend the class",
    "start": "702680",
    "end": "704399"
  },
  {
    "text": "create a subass to redefine value of but",
    "start": "704399",
    "end": "706959"
  },
  {
    "text": "um that's easy enough to do in this case",
    "start": "706959",
    "end": "709399"
  },
  {
    "text": "and this is in the index array of the",
    "start": "709399",
    "end": "713360"
  },
  {
    "text": "bite array class so you call b subz",
    "start": "713360",
    "end": "716079"
  },
  {
    "text": "equals n and n is a an object that has",
    "start": "716079",
    "end": "719600"
  },
  {
    "text": "value of redefined and it gets converted",
    "start": "719600",
    "end": "721800"
  },
  {
    "text": "to an integer so it can be converted to",
    "start": "721800",
    "end": "723760"
  },
  {
    "text": "a bite um so it's probably easiest to",
    "start": "723760",
    "end": "727079"
  },
  {
    "text": "see what's happening here from the VM",
    "start": "727079",
    "end": "729079"
  },
  {
    "text": "code the first thing that happens is",
    "start": "729079",
    "end": "730760"
  },
  {
    "text": "there's this bite array object which is",
    "start": "730760",
    "end": "732240"
  },
  {
    "text": "the native bite array that backs the",
    "start": "732240",
    "end": "734120"
  },
  {
    "text": "ecmascript object and it is indexed at",
    "start": "734120",
    "end": "737240"
  },
  {
    "text": "the index you provide and then that's",
    "start": "737240",
    "end": "738600"
  },
  {
    "text": "just a pointer and then the right side",
    "start": "738600",
    "end": "740720"
  },
  {
    "text": "gets evaluated and it gets calls into",
    "start": "740720",
    "end": "742839"
  },
  {
    "text": "this integer function which calls value",
    "start": "742839",
    "end": "744839"
  },
  {
    "text": "of and then that can do something such",
    "start": "744839",
    "end": "747040"
  },
  {
    "text": "as changing the array length that causes",
    "start": "747040",
    "end": "748639"
  },
  {
    "text": "it to be gect and then it writes just",
    "start": "748639",
    "end": "750760"
  },
  {
    "text": "one bite back to that array that's been",
    "start": "750760",
    "end": "752440"
  },
  {
    "text": "freed which is a pretty small use after",
    "start": "752440",
    "end": "754519"
  },
  {
    "text": "free but it was enough for a working",
    "start": "754519",
    "end": "758079"
  },
  {
    "text": "exploit so another um interesting",
    "start": "758079",
    "end": "761440"
  },
  {
    "text": "function that can cause redefinition",
    "start": "761440",
    "end": "763199"
  },
  {
    "text": "issues is watches and these are things",
    "start": "763199",
    "end": "766399"
  },
  {
    "text": "that can be used to interfere especially",
    "start": "766399",
    "end": "767959"
  },
  {
    "text": "when a property is said especially",
    "start": "767959",
    "end": "769880"
  },
  {
    "text": "inside a Native function um so",
    "start": "769880",
    "end": "773399"
  },
  {
    "text": "specifically what a watch does um you",
    "start": "773399",
    "end": "775160"
  },
  {
    "text": "can see the call to watch in this",
    "start": "775160",
    "end": "776519"
  },
  {
    "text": "example and basically you specif if the",
    "start": "776519",
    "end": "779519"
  },
  {
    "text": "property of an object then you specify a",
    "start": "779519",
    "end": "781399"
  },
  {
    "text": "function and every time that um object",
    "start": "781399",
    "end": "784639"
  },
  {
    "text": "then gets set this function gets called",
    "start": "784639",
    "end": "786480"
  },
  {
    "text": "and you have the opportunity to either",
    "start": "786480",
    "end": "788399"
  },
  {
    "text": "return um what it was set to and then",
    "start": "788399",
    "end": "790600"
  },
  {
    "text": "that won't change the property or you",
    "start": "790600",
    "end": "792560"
  },
  {
    "text": "have the option of returning something",
    "start": "792560",
    "end": "794360"
  },
  {
    "text": "different and then that will change",
    "start": "794360",
    "end": "797480"
  },
  {
    "text": "change what the property got set to um",
    "start": "797480",
    "end": "799720"
  },
  {
    "text": "so this specific bug is once again in",
    "start": "799720",
    "end": "801680"
  },
  {
    "text": "this file reference list and one",
    "start": "801680",
    "end": "804040"
  },
  {
    "text": "subtlety here is that you can't set a",
    "start": "804040",
    "end": "805800"
  },
  {
    "text": "watch on something that doesn't exist so",
    "start": "805800",
    "end": "807480"
  },
  {
    "text": "I have to create the property file list",
    "start": "807480",
    "end": "809160"
  },
  {
    "text": "first and then set a watch on it and",
    "start": "809160",
    "end": "810959"
  },
  {
    "text": "then I call browse which is once again",
    "start": "810959",
    "end": "812600"
  },
  {
    "text": "the thing that makes all the files",
    "start": "812600",
    "end": "813959"
  },
  {
    "text": "appear on the screen and then when you",
    "start": "813959",
    "end": "816320"
  },
  {
    "text": "select a file it tries to create this",
    "start": "816320",
    "end": "818399"
  },
  {
    "text": "file list except since it's already been",
    "start": "818399",
    "end": "820720"
  },
  {
    "text": "created and has a watch on it the watch",
    "start": "820720",
    "end": "822680"
  },
  {
    "text": "gets called and then the watch can",
    "start": "822680",
    "end": "825320"
  },
  {
    "text": "return something different which is of",
    "start": "825320",
    "end": "826600"
  },
  {
    "text": "the wrong type um to the function and",
    "start": "826600",
    "end": "829959"
  },
  {
    "text": "then this is type confusion um",
    "start": "829959",
    "end": "831880"
  },
  {
    "text": "specifically this uh integer will get",
    "start": "831880",
    "end": "833759"
  },
  {
    "text": "interpreted as a pointer because it",
    "start": "833759",
    "end": "835279"
  },
  {
    "text": "thinks it's an object that's being",
    "start": "835279",
    "end": "836720"
  },
  {
    "text": "returned but it's not",
    "start": "836720",
    "end": "839199"
  },
  {
    "text": "one more example of this is this Net",
    "start": "839199",
    "end": "842120"
  },
  {
    "text": "Connection bug and this is an",
    "start": "842120",
    "end": "843279"
  },
  {
    "text": "interesting one because this is kind of",
    "start": "843279",
    "end": "844560"
  },
  {
    "text": "a time of check time of use bug so to",
    "start": "844560",
    "end": "848199"
  },
  {
    "text": "start off I create the property so that",
    "start": "848199",
    "end": "850600"
  },
  {
    "text": "I can set the watch on it and then I",
    "start": "850600",
    "end": "852240"
  },
  {
    "text": "create this Net Connection and then set",
    "start": "852240",
    "end": "854040"
  },
  {
    "text": "it to the Proto and this is just to um",
    "start": "854040",
    "end": "856199"
  },
  {
    "text": "pass an unrelated check in the connect",
    "start": "856199",
    "end": "858160"
  },
  {
    "text": "function and then I called The Connect",
    "start": "858160",
    "end": "860160"
  },
  {
    "text": "function and the first thing the connect",
    "start": "860160",
    "end": "861880"
  },
  {
    "text": "function does is it makes sure that the",
    "start": "861880",
    "end": "864079"
  },
  {
    "text": "thing that's coming in is of the right",
    "start": "864079",
    "end": "865720"
  },
  {
    "text": "type of this Net Connection type and and",
    "start": "865720",
    "end": "869240"
  },
  {
    "text": "then it sets the",
    "start": "869240",
    "end": "870560"
  },
  {
    "text": "URI and the URI because it has a watch",
    "start": "870560",
    "end": "873040"
  },
  {
    "text": "on it calls into this function which is",
    "start": "873040",
    "end": "874839"
  },
  {
    "text": "once again just a wrapper around the bit",
    "start": "874839",
    "end": "877000"
  },
  {
    "text": "map data Constructor which then redef",
    "start": "877000",
    "end": "879759"
  },
  {
    "text": "basically redefines this object so that",
    "start": "879759",
    "end": "881600"
  },
  {
    "text": "it's now a bitmap data object so then",
    "start": "881600",
    "end": "885680"
  },
  {
    "text": "when you return to the uh main function",
    "start": "885680",
    "end": "888399"
  },
  {
    "text": "it's a bit met data object except um the",
    "start": "888399",
    "end": "891600"
  },
  {
    "text": "function assumes it's a Net Connection",
    "start": "891600",
    "end": "893120"
  },
  {
    "text": "object and that causes problems so",
    "start": "893120",
    "end": "896399"
  },
  {
    "text": "basically this is bypassing the check",
    "start": "896399",
    "end": "898079"
  },
  {
    "text": "the check happens then you call call",
    "start": "898079",
    "end": "899240"
  },
  {
    "text": "into the URI and it changes the",
    "start": "899240",
    "end": "901240"
  },
  {
    "text": "situation so that the uh check now is",
    "start": "901240",
    "end": "904440"
  },
  {
    "text": "violated and then it and then it makes",
    "start": "904440",
    "end": "908199"
  },
  {
    "text": "other calls with that",
    "start": "908199",
    "end": "910279"
  },
  {
    "text": "assumption so now I'm going to go",
    "start": "910279",
    "end": "912160"
  },
  {
    "text": "through a couple of other methods that I",
    "start": "912160",
    "end": "914480"
  },
  {
    "text": "think are possible to use to cause these",
    "start": "914480",
    "end": "916120"
  },
  {
    "text": "types of issues um these are ones either",
    "start": "916120",
    "end": "918560"
  },
  {
    "text": "where I haven't found a bug yet but I",
    "start": "918560",
    "end": "920000"
  },
  {
    "text": "think it's possible or 90 days hasn't",
    "start": "920000",
    "end": "921959"
  },
  {
    "text": "passed on that bug yet um the first one",
    "start": "921959",
    "end": "925320"
  },
  {
    "text": "is subclassing um in fact the bay issue",
    "start": "925320",
    "end": "928839"
  },
  {
    "text": "I showed you did use subclassing but I",
    "start": "928839",
    "end": "930600"
  },
  {
    "text": "think there's more Pro um more things",
    "start": "930600",
    "end": "932720"
  },
  {
    "text": "that could be used in subclassing to",
    "start": "932720",
    "end": "934560"
  },
  {
    "text": "redefine methods other than just value",
    "start": "934560",
    "end": "936839"
  },
  {
    "text": "of in particular I think there could be",
    "start": "936839",
    "end": "938800"
  },
  {
    "text": "situations in Virtual machines where",
    "start": "938800",
    "end": "941079"
  },
  {
    "text": "they check that something is of Type X",
    "start": "941079",
    "end": "943199"
  },
  {
    "text": "but really it might be a subx and then",
    "start": "943199",
    "end": "946600"
  },
  {
    "text": "uh and then that could be used to um",
    "start": "946600",
    "end": "949040"
  },
  {
    "text": "redefine methods in ways that are",
    "start": "949040",
    "end": "950639"
  },
  {
    "text": "unexpected basically in action script 3",
    "start": "950639",
    "end": "953199"
  },
  {
    "text": "any n non-final properties can be",
    "start": "953199",
    "end": "955160"
  },
  {
    "text": "replaced with um other methods or",
    "start": "955160",
    "end": "958440"
  },
  {
    "text": "Getters or Setter so I think this is a",
    "start": "958440",
    "end": "960360"
  },
  {
    "text": "possible way to cause bugs uh by",
    "start": "960360",
    "end": "962880"
  },
  {
    "text": "redefining",
    "start": "962880",
    "end": "964279"
  },
  {
    "text": "functions another possibility is",
    "start": "964279",
    "end": "966959"
  },
  {
    "text": "underscore underscore resolve which is",
    "start": "966959",
    "end": "969560"
  },
  {
    "text": "um it's underscore underscore resolve in",
    "start": "969560",
    "end": "971279"
  },
  {
    "text": "action script 2 and then it's underscore",
    "start": "971279",
    "end": "973240"
  },
  {
    "text": "underscore lookup in JavaScript and",
    "start": "973240",
    "end": "975680"
  },
  {
    "text": "these are what I call Last Resort",
    "start": "975680",
    "end": "977360"
  },
  {
    "text": "functions these are if something is",
    "start": "977360",
    "end": "979759"
  },
  {
    "text": "undefined they will get called so for",
    "start": "979759",
    "end": "982040"
  },
  {
    "text": "example if you Define resolve as a",
    "start": "982040",
    "end": "983959"
  },
  {
    "text": "method in action script and then you",
    "start": "983959",
    "end": "985920"
  },
  {
    "text": "call on that object a field that doesn't",
    "start": "985920",
    "end": "988519"
  },
  {
    "text": "exist resolve will get called so these",
    "start": "988519",
    "end": "991199"
  },
  {
    "text": "are useful in two different ways they're",
    "start": "991199",
    "end": "993160"
  },
  {
    "text": "actually a good way to find this type of",
    "start": "993160",
    "end": "994759"
  },
  {
    "text": "issue because if you don't set any",
    "start": "994759",
    "end": "997800"
  },
  {
    "text": "properties in an object and then you set",
    "start": "997800",
    "end": "999399"
  },
  {
    "text": "resolve and then you put logging in",
    "start": "999399",
    "end": "1001040"
  },
  {
    "text": "there you can actually use it to figure",
    "start": "1001040",
    "end": "1002319"
  },
  {
    "text": "out in a native call what stuff is",
    "start": "1002319",
    "end": "1005079"
  },
  {
    "text": "actually getting accessed by the virtual",
    "start": "1005079",
    "end": "1007120"
  },
  {
    "text": "machine so that can be an interesting",
    "start": "1007120",
    "end": "1008959"
  },
  {
    "text": "experiment just to see everything that's",
    "start": "1008959",
    "end": "1010240"
  },
  {
    "text": "getting called but also this could be",
    "start": "1010240",
    "end": "1012399"
  },
  {
    "text": "used to redefine methods as well um",
    "start": "1012399",
    "end": "1015839"
  },
  {
    "text": "maybe if the virtual machine calls into",
    "start": "1015839",
    "end": "1018199"
  },
  {
    "text": "them and accesses a property that",
    "start": "1018199",
    "end": "1020319"
  },
  {
    "text": "doesn't exist maybe it's not expecting",
    "start": "1020319",
    "end": "1021959"
  },
  {
    "text": "that it's defined with resolves and",
    "start": "1021959",
    "end": "1023959"
  },
  {
    "text": "unexpected Behavior will",
    "start": "1023959",
    "end": "1025880"
  },
  {
    "text": "occur the last one is Getters and",
    "start": "1025880",
    "end": "1028319"
  },
  {
    "text": "Setters and these are functions that can",
    "start": "1028319",
    "end": "1030720"
  },
  {
    "text": "be defined that execute script when",
    "start": "1030720",
    "end": "1032600"
  },
  {
    "text": "they're called by NA when they're called",
    "start": "1032600",
    "end": "1034438"
  },
  {
    "text": "in general including Bina native",
    "start": "1034439",
    "end": "1036798"
  },
  {
    "text": "functions um they can be done in action",
    "start": "1036799",
    "end": "1039240"
  },
  {
    "text": "script 2 action script 3 and JavaScript",
    "start": "1039240",
    "end": "1041798"
  },
  {
    "text": "using different functions and there",
    "start": "1041799",
    "end": "1043438"
  },
  {
    "text": "actually was an issue in JavaScript um",
    "start": "1043439",
    "end": "1046438"
  },
  {
    "text": "in Chrome that was caused by this um",
    "start": "1046439",
    "end": "1049440"
  },
  {
    "text": "situation it was an issue where um for a",
    "start": "1049440",
    "end": "1052360"
  },
  {
    "text": "certain object um a getter and a Setter",
    "start": "1052360",
    "end": "1055320"
  },
  {
    "text": "for length was defined when the code",
    "start": "1055320",
    "end": "1057480"
  },
  {
    "text": "assumed that length was just a property",
    "start": "1057480",
    "end": "1059840"
  },
  {
    "text": "and what that meant was that the getter",
    "start": "1059840",
    "end": "1061960"
  },
  {
    "text": "and Setter could return a different",
    "start": "1061960",
    "end": "1064080"
  },
  {
    "text": "value for length each time and once",
    "start": "1064080",
    "end": "1066200"
  },
  {
    "text": "again this was an overflow where the",
    "start": "1066200",
    "end": "1067600"
  },
  {
    "text": "first time it returned the value it was",
    "start": "1067600",
    "end": "1068919"
  },
  {
    "text": "small and the second time it returned",
    "start": "1068919",
    "end": "1070880"
  },
  {
    "text": "the value it was large but I think",
    "start": "1070880",
    "end": "1073400"
  },
  {
    "text": "there's a lot of possibilities for",
    "start": "1073400",
    "end": "1075120"
  },
  {
    "text": "Getters and Setters in finding these",
    "start": "1075120",
    "end": "1076520"
  },
  {
    "text": "types of bugs uh not just by returning",
    "start": "1076520",
    "end": "1078600"
  },
  {
    "text": "something different time for Fields but",
    "start": "1078600",
    "end": "1080120"
  },
  {
    "text": "there's also the possibility that they",
    "start": "1080120",
    "end": "1081640"
  },
  {
    "text": "can execute script when it's unexpected",
    "start": "1081640",
    "end": "1083840"
  },
  {
    "text": "and change properties in objects and",
    "start": "1083840",
    "end": "1086320"
  },
  {
    "text": "maybe buypass checks or do other things",
    "start": "1086320",
    "end": "1088159"
  },
  {
    "text": "that are unexpected and I think this is",
    "start": "1088159",
    "end": "1090600"
  },
  {
    "text": "mostly something that will impact um",
    "start": "1090600",
    "end": "1093280"
  },
  {
    "text": "JavaScript though um in Flash and this",
    "start": "1093280",
    "end": "1095960"
  },
  {
    "text": "is actually well documented the native",
    "start": "1095960",
    "end": "1097559"
  },
  {
    "text": "use of Getters and Setters is fairly",
    "start": "1097559",
    "end": "1099320"
  },
  {
    "text": "common uncommon due to optimization so",
    "start": "1099320",
    "end": "1102440"
  },
  {
    "text": "usually if a native call is expecting",
    "start": "1102440",
    "end": "1104960"
  },
  {
    "text": "something to be a field it won't call a",
    "start": "1104960",
    "end": "1106840"
  },
  {
    "text": "getter or a set if it's not supposed to",
    "start": "1106840",
    "end": "1108919"
  },
  {
    "text": "be there um so the last thing I'm going",
    "start": "1108919",
    "end": "1111919"
  },
  {
    "text": "to um go through is how do you actually",
    "start": "1111919",
    "end": "1114679"
  },
  {
    "text": "find these types of issues and there's a",
    "start": "1114679",
    "end": "1117039"
  },
  {
    "text": "few different ways one good way is code",
    "start": "1117039",
    "end": "1119679"
  },
  {
    "text": "review if you have the code if you can",
    "start": "1119679",
    "end": "1122200"
  },
  {
    "text": "find functions that call that cause",
    "start": "1122200",
    "end": "1124559"
  },
  {
    "text": "calls into script or call fields or",
    "start": "1124559",
    "end": "1126880"
  },
  {
    "text": "access fields of an object that sort of",
    "start": "1126880",
    "end": "1128760"
  },
  {
    "text": "thing it's easy enough to figure out",
    "start": "1128760",
    "end": "1130679"
  },
  {
    "text": "where the calls into these um things",
    "start": "1130679",
    "end": "1133520"
  },
  {
    "text": "that cause script execution are and then",
    "start": "1133520",
    "end": "1135360"
  },
  {
    "text": "use that to find areas to look for these",
    "start": "1135360",
    "end": "1137919"
  },
  {
    "text": "types of vulnerability",
    "start": "1137919",
    "end": "1139840"
  },
  {
    "text": "another possibility is using reverse",
    "start": "1139840",
    "end": "1141679"
  },
  {
    "text": "engineering I actually think the",
    "start": "1141679",
    "end": "1142880"
  },
  {
    "text": "majority of these types of bugs are",
    "start": "1142880",
    "end": "1144320"
  },
  {
    "text": "found using Ida and this is the same",
    "start": "1144320",
    "end": "1147919"
  },
  {
    "text": "concept basically if you can find the",
    "start": "1147919",
    "end": "1149880"
  },
  {
    "text": "function in Ida where um there's calls",
    "start": "1149880",
    "end": "1152039"
  },
  {
    "text": "into script or where um object",
    "start": "1152039",
    "end": "1154760"
  },
  {
    "text": "properties are accessed um you can use",
    "start": "1154760",
    "end": "1156799"
  },
  {
    "text": "that to find where um places where it's",
    "start": "1156799",
    "end": "1160480"
  },
  {
    "text": "a good idea to look for these types of",
    "start": "1160480",
    "end": "1162280"
  },
  {
    "text": "bugs another possibility is the API",
    "start": "1162280",
    "end": "1165280"
  },
  {
    "text": "docks once you've seen a few of these",
    "start": "1165280",
    "end": "1166919"
  },
  {
    "text": "types of bugs uh just by reading through",
    "start": "1166919",
    "end": "1168600"
  },
  {
    "text": "the the API it can be evident where",
    "start": "1168600",
    "end": "1170640"
  },
  {
    "text": "other good areas to Target are in",
    "start": "1170640",
    "end": "1172799"
  },
  {
    "text": "particular if a function takes an object",
    "start": "1172799",
    "end": "1175559"
  },
  {
    "text": "or an array as a parameter and that's",
    "start": "1175559",
    "end": "1177440"
  },
  {
    "text": "usually a concern because you know that",
    "start": "1177440",
    "end": "1180000"
  },
  {
    "text": "the object is going to need to be",
    "start": "1180000",
    "end": "1181360"
  },
  {
    "text": "converted into some other type or if",
    "start": "1181360",
    "end": "1183520"
  },
  {
    "text": "it's an array then the things in the",
    "start": "1183520",
    "end": "1184720"
  },
  {
    "text": "array are going to need to be converted",
    "start": "1184720",
    "end": "1185840"
  },
  {
    "text": "to another type and that could lead to",
    "start": "1185840",
    "end": "1188080"
  },
  {
    "text": "calls to value of or two string which",
    "start": "1188080",
    "end": "1189880"
  },
  {
    "text": "can cause a lot of problems and finally",
    "start": "1189880",
    "end": "1192440"
  },
  {
    "text": "specialized fuzzers it's funny I've",
    "start": "1192440",
    "end": "1195240"
  },
  {
    "text": "never actually met anyone who's done",
    "start": "1195240",
    "end": "1196880"
  },
  {
    "text": "this using a specialized fuzzer but when",
    "start": "1196880",
    "end": "1198799"
  },
  {
    "text": "I talk to people Everyone always knows a",
    "start": "1198799",
    "end": "1201240"
  },
  {
    "text": "guy who has a fuzzer that does this sort",
    "start": "1201240",
    "end": "1203039"
  },
  {
    "text": "of thing so well I've never personally",
    "start": "1203039",
    "end": "1205120"
  },
  {
    "text": "done this I think that it's actually a",
    "start": "1205120",
    "end": "1207440"
  },
  {
    "text": "strong possibility you could find bugs",
    "start": "1207440",
    "end": "1208799"
  },
  {
    "text": "using fuzzing if you had a fuzzer that",
    "start": "1208799",
    "end": "1210679"
  },
  {
    "text": "had a strong understanding of both how",
    "start": "1210679",
    "end": "1212840"
  },
  {
    "text": "you can redefine methods and um of what",
    "start": "1212840",
    "end": "1216080"
  },
  {
    "text": "methods a specific MX script",
    "start": "1216080",
    "end": "1218039"
  },
  {
    "text": "implementation",
    "start": "1218039",
    "end": "1219960"
  },
  {
    "text": "supports um so that's it in conclusion",
    "start": "1219960",
    "end": "1223520"
  },
  {
    "text": "ecmascript is largely too Dynamic for",
    "start": "1223520",
    "end": "1225320"
  },
  {
    "text": "its own good well redefinition is a",
    "start": "1225320",
    "end": "1227960"
  },
  {
    "text": "useful Fe in a lot of different",
    "start": "1227960",
    "end": "1229480"
  },
  {
    "text": "situations it's important to be careful",
    "start": "1229480",
    "end": "1231640"
  },
  {
    "text": "when implementing it to make sure that",
    "start": "1231640",
    "end": "1233880"
  },
  {
    "text": "it doesn't cause a lot of security",
    "start": "1233880",
    "end": "1235760"
  },
  {
    "text": "problems and while this research is",
    "start": "1235760",
    "end": "1237880"
  },
  {
    "text": "specific to um action script um there's",
    "start": "1237880",
    "end": "1240120"
  },
  {
    "text": "nothing I think in here that's actually",
    "start": "1240120",
    "end": "1241640"
  },
  {
    "text": "specific to flash um other ecmascript",
    "start": "1241640",
    "end": "1244360"
  },
  {
    "text": "engines can and have in the past had",
    "start": "1244360",
    "end": "1246280"
  },
  {
    "text": "similar issues and I don't think they're",
    "start": "1246280",
    "end": "1248320"
  },
  {
    "text": "all gone so I'm going to end with the",
    "start": "1248320",
    "end": "1250640"
  },
  {
    "text": "thought to go forth and find bugs",
    "start": "1250640",
    "end": "1253000"
  },
  {
    "text": "whether you're a developer who's",
    "start": "1253000",
    "end": "1254440"
  },
  {
    "text": "responsible for maintaining an",
    "start": "1254440",
    "end": "1255640"
  },
  {
    "text": "ecmascript engine or whether you're a",
    "start": "1255640",
    "end": "1257600"
  },
  {
    "text": "security researcher who's responsible",
    "start": "1257600",
    "end": "1259240"
  },
  {
    "text": "for reviewing one it's important to",
    "start": "1259240",
    "end": "1261720"
  },
  {
    "text": "understand how redefining can affect",
    "start": "1261720",
    "end": "1263640"
  },
  {
    "text": "your security model doing so I think",
    "start": "1263640",
    "end": "1266240"
  },
  {
    "text": "could help you find and fix a lot of",
    "start": "1266240",
    "end": "1268960"
  },
  {
    "text": "bugs um so that's it I'd like to open",
    "start": "1268960",
    "end": "1271320"
  },
  {
    "text": "the floor for questions",
    "start": "1271320",
    "end": "1274559"
  },
  {
    "text": "now and also I've got my contact info",
    "start": "1277640",
    "end": "1280159"
  },
  {
    "text": "there so if you're a shy feel free to",
    "start": "1280159",
    "end": "1281919"
  },
  {
    "text": "contact me um if you have any questions",
    "start": "1281919",
    "end": "1283960"
  },
  {
    "text": "I love answering them",
    "start": "1283960",
    "end": "1287760"
  },
  {
    "text": "[Applause]",
    "start": "1289260",
    "end": "1292380"
  },
  {
    "text": "um sorry can you repeat that do any of",
    "start": "1301559",
    "end": "1303559"
  },
  {
    "text": "the modern um javascri",
    "start": "1303559",
    "end": "1307320"
  },
  {
    "text": "framewor um he asked if um any modern",
    "start": "1309360",
    "end": "1312200"
  },
  {
    "text": "JavaScript uh engines such as angular or",
    "start": "1312200",
    "end": "1314559"
  },
  {
    "text": "JS have these types of issues or if I've",
    "start": "1314559",
    "end": "1316480"
  },
  {
    "text": "just focused on flash",
    "start": "1316480",
    "end": "1318720"
  },
  {
    "text": "um personally I've just focused on flash",
    "start": "1318720",
    "end": "1320799"
  },
  {
    "text": "and I went through um some old bugs to",
    "start": "1320799",
    "end": "1322640"
  },
  {
    "text": "see if I could find similar bugs and",
    "start": "1322640",
    "end": "1324039"
  },
  {
    "text": "other Frameworks and I've seen a few in",
    "start": "1324039",
    "end": "1326960"
  },
  {
    "text": "browsers uh but like not at the quantity",
    "start": "1326960",
    "end": "1331600"
  },
  {
    "text": "that I saw in Flash",
    "start": "1331600",
    "end": "1335799"
  },
  {
    "text": "funny results or has has that is that",
    "start": "1348640",
    "end": "1350760"
  },
  {
    "text": "mostly protected against yeah sorry the",
    "start": "1350760",
    "end": "1353559"
  },
  {
    "text": "mic just turned on in the middle of the",
    "start": "1353559",
    "end": "1354799"
  },
  {
    "text": "question so oh sorry Hi um did you do",
    "start": "1354799",
    "end": "1357960"
  },
  {
    "text": "any Research into into uh like",
    "start": "1357960",
    "end": "1359960"
  },
  {
    "text": "manipulating sort of the pseudo",
    "start": "1359960",
    "end": "1361120"
  },
  {
    "text": "variables that are provided by the VM",
    "start": "1361120",
    "end": "1362640"
  },
  {
    "text": "like the the arguments pseudo array for",
    "start": "1362640",
    "end": "1365240"
  },
  {
    "text": "uh vartic functions and like maybe",
    "start": "1365240",
    "end": "1367279"
  },
  {
    "text": "manipulating or is that mostly protected",
    "start": "1367279",
    "end": "1369279"
  },
  {
    "text": "against now yeah I did try playing with",
    "start": "1369279",
    "end": "1372400"
  },
  {
    "text": "that a bit and it's fairly easy because",
    "start": "1372400",
    "end": "1375880"
  },
  {
    "text": "of function. apply that's supported by",
    "start": "1375880",
    "end": "1378039"
  },
  {
    "text": "love the script engines to play with",
    "start": "1378039",
    "end": "1379960"
  },
  {
    "text": "that sort of thing and you know well I",
    "start": "1379960",
    "end": "1381919"
  },
  {
    "text": "played with it um I I haven't found any",
    "start": "1381919",
    "end": "1385520"
  },
  {
    "text": "bugs recently in",
    "start": "1385520",
    "end": "1388640"
  },
  {
    "text": "that oh is there another question",
    "start": "1402520",
    "end": "1405640"
  },
  {
    "text": "or oh sorry",
    "start": "1405640",
    "end": "1409880"
  },
  {
    "text": "so we",
    "start": "1422640",
    "end": "1424960"
  },
  {
    "text": "went uh yeah he asked if I tried using",
    "start": "1429240",
    "end": "1432520"
  },
  {
    "text": "the function keyword for late read",
    "start": "1432520",
    "end": "1434799"
  },
  {
    "text": "definition and no I haven't",
    "start": "1434799",
    "end": "1438960"
  },
  {
    "text": "um so any more",
    "start": "1445039",
    "end": "1448799"
  },
  {
    "text": "questions sorry if uh I understand",
    "start": "1461159",
    "end": "1463400"
  },
  {
    "text": "correctly you asked if um what this type",
    "start": "1463400",
    "end": "1466840"
  },
  {
    "text": "of bug looks like in the C code that",
    "start": "1466840",
    "end": "1469640"
  },
  {
    "text": "actually implements the",
    "start": "1469640",
    "end": "1471480"
  },
  {
    "text": "function yeah I had a couple of examples",
    "start": "1471480",
    "end": "1474399"
  },
  {
    "text": "in there but typically um basically what",
    "start": "1474399",
    "end": "1476520"
  },
  {
    "text": "it looks like in the code is that",
    "start": "1476520",
    "end": "1478279"
  },
  {
    "text": "there's some sort of function that gets",
    "start": "1478279",
    "end": "1479720"
  },
  {
    "text": "called that can cause in some situations",
    "start": "1479720",
    "end": "1482120"
  },
  {
    "text": "a call into ecmascript um typically so",
    "start": "1482120",
    "end": "1485200"
  },
  {
    "text": "there are functions you can look for in",
    "start": "1485200",
    "end": "1487039"
  },
  {
    "text": "the code that are kind of indicative",
    "start": "1487039",
    "end": "1488600"
  },
  {
    "text": "that this sort of problem can occur",
    "start": "1488600",
    "end": "1492840"
  },
  {
    "text": "okay I think that's um it here thanks a",
    "start": "1499039",
    "end": "1501200"
  },
  {
    "text": "lot everyone",
    "start": "1501200",
    "end": "1504398"
  },
  {
    "text": "[Applause]",
    "start": "1504920",
    "end": "1508880"
  }
]