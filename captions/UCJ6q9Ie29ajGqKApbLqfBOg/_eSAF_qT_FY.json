[
  {
    "text": "all right Thank You Stephanie so welcome every line I'm here to talk to you today",
    "start": "0",
    "end": "5130"
  },
  {
    "text": "about something that I didn't really think was possible at first but it's",
    "start": "5130",
    "end": "10889"
  },
  {
    "text": "it's gonna be interesting so the the idea of backdoors is kind of thrown around a lot today to the point that",
    "start": "10889",
    "end": "16859"
  },
  {
    "text": "it's it's largely lost all meaning but what I'm going to talk to you about today is is not the management engine it's not",
    "start": "16859",
    "end": "24359"
  },
  {
    "text": "the platform security processor it's none of the things that people are normally so concerned about it's it's",
    "start": "24359",
    "end": "29609"
  },
  {
    "text": "something that we never really saw coming and I think something a lot more interesting but before you again like",
    "start": "29609",
    "end": "36239"
  },
  {
    "text": "any good research start off with a disclaimer I did all this research on my own in my own time I was an independent",
    "start": "36239",
    "end": "42960"
  },
  {
    "text": "consultant and none of this reflects in any way the beliefs or actions of my current employer but with that my name",
    "start": "42960",
    "end": "49860"
  },
  {
    "text": "is Christopher Thomas I'm a cyber security researcher I've tinkered with a lot of different things over the years but uh the last couple years what I've",
    "start": "49860",
    "end": "56550"
  },
  {
    "text": "been interested in is low level processor exploitation and vulnerability research so let's start off with a demo",
    "start": "56550",
    "end": "63090"
  },
  {
    "text": "of kind of what I mean by that and the kinds of things we can unlock and specifically let's look at what we're going to explore today in this in this",
    "start": "63090",
    "end": "70830"
  },
  {
    "text": "presentation so I am logged into a system just a regular system unmodified running default OS configuration I'm",
    "start": "70830",
    "end": "77670"
  },
  {
    "text": "logged in and as a non privileged easier named Delta I'm going to open up dot C file called demo dot C and Emma dot C is",
    "start": "77670",
    "end": "85229"
  },
  {
    "text": "a very simple file all we do is we load an address into the EAX register then we've got a label and then we've got all",
    "start": "85229",
    "end": "90900"
  },
  {
    "text": "of these bound instructions so the x86 bound instruction is not a very common instruction you might not be familiar",
    "start": "90900",
    "end": "97079"
  },
  {
    "text": "with bound but the idea behind the x86 bound instruction is it will take an address and it will take a second",
    "start": "97079",
    "end": "103290"
  },
  {
    "text": "address and see if the first address is within the bounds specified by the second address now you'll notice this bound instruction has a rather unusual",
    "start": "103290",
    "end": "110610"
  },
  {
    "text": "set of second addresses associated with it these are basically look like random numbers and in fact this processor does",
    "start": "110610",
    "end": "116430"
  },
  {
    "text": "not have access to the memory at that address that's being specified and like anything else in x86 if you don't have",
    "start": "116430",
    "end": "122909"
  },
  {
    "text": "access to the memory that you're trying to use you will get a general protection exception or in Linux a segmentation",
    "start": "122909",
    "end": "127950"
  },
  {
    "text": "fault so despite the fact that sorry about that despite the fact that all of these",
    "start": "127950",
    "end": "133170"
  },
  {
    "text": "registers we know are going to cause segmentation faults at the at the end",
    "start": "133170",
    "end": "138720"
  },
  {
    "text": "we're still going to try to launch a shell and see if anything happens so let's let's give this a try we'll",
    "start": "138720",
    "end": "145180"
  },
  {
    "text": "compile this little program we will execute it and sure enough this like we",
    "start": "145180",
    "end": "152080"
  },
  {
    "text": "expected we get a segmentation fault and our user hasn't changed so that's something I'm terribly interesting here",
    "start": "152080",
    "end": "157450"
  },
  {
    "text": "but if I go back into this program I'm gonna make one tiny little change I'm gonna add wine x86 instruction it's an",
    "start": "157450",
    "end": "163390"
  },
  {
    "text": "instruction that's so secure or so obscure and unknown it doesn't actually have a name in fact it doesn't it's not",
    "start": "163390",
    "end": "170140"
  },
  {
    "text": "supposed to exist I have to write this in machine code Oh F 3 F is the one instruction I'm going to add to the",
    "start": "170140",
    "end": "175810"
  },
  {
    "text": "beginning of my executable and when I execute this instruction the fundamental nature of all the subsequent valid",
    "start": "175810",
    "end": "181990"
  },
  {
    "text": "instructions is going to change and what I'm going to be able to do is use those instructions to reach directly into the kernel bypassing all the processors",
    "start": "181990",
    "end": "188380"
  },
  {
    "text": "security mechanisms in order to give myself root access on this system so",
    "start": "188380",
    "end": "193690"
  },
  {
    "text": "this",
    "start": "193690",
    "end": "195840"
  },
  {
    "text": "so this kind of thing is not supposed to exist and the rest of this presentation",
    "start": "200230",
    "end": "207400"
  },
  {
    "text": "is gonna be a long convoluted journey sort of seeing how I came across this this feature and the whole thing begins",
    "start": "207400",
    "end": "213340"
  },
  {
    "text": "with the idea of rings of privilege so in the beginning thirty years ago in x86 there was no concept of separation of",
    "start": "213340",
    "end": "219489"
  },
  {
    "text": "privileges on the processor basically any code running on the processor had the same permissions as any other code running on the processor and things were",
    "start": "219489",
    "end": "225730"
  },
  {
    "text": "basically chaos there was nothing stopping minesweeper from having the exact same privileges as the kernel and",
    "start": "225730",
    "end": "231459"
  },
  {
    "text": "that's not a good situation to begin and so thirty years ago they implemented the idea of separation of privileges",
    "start": "231459",
    "end": "237519"
  },
  {
    "text": "different rings of execution on x86 processors and maybe with something like this",
    "start": "237519",
    "end": "242860"
  },
  {
    "text": "only some code would have complete unfettered access to the entire system unrestricted access to the system's",
    "start": "242860",
    "end": "248680"
  },
  {
    "text": "hardware and that was the kernel code that would live inside of the most privileged ring-ring zero then outside",
    "start": "248680",
    "end": "254290"
  },
  {
    "text": "of ring zero slightly less privileged code would live in ring whine less privileged madden ring - and our least",
    "start": "254290",
    "end": "259419"
  },
  {
    "text": "privileged code where we would throw all of our user code would live in ring 3 and then fundamental idea of separation",
    "start": "259419",
    "end": "264789"
  },
  {
    "text": "is why we can have some sort of confidence that our mind super game is not also harvesting credentials from my",
    "start": "264789",
    "end": "271060"
  },
  {
    "text": "banking account sitting in another process because in order for a ring three code to do anything of importance",
    "start": "271060",
    "end": "276669"
  },
  {
    "text": "it has to go through very very strict careful Hardware security checks in order to ask ring zero to do something",
    "start": "276669",
    "end": "283990"
  },
  {
    "text": "for it so that's the fundamental basis of all security and x86 processors today",
    "start": "283990",
    "end": "289030"
  },
  {
    "text": "but we started digging deeper basically this this ring model wasn't well suited",
    "start": "289030",
    "end": "295510"
  },
  {
    "text": "for running multiple operating systems on one processor we needed something more privileged than ring zero in order to handle that so we invented the",
    "start": "295510",
    "end": "301840"
  },
  {
    "text": "hypervisor and since it was more privileged in ring zero colloquially we kind of called that ring minus one but",
    "start": "301840",
    "end": "307030"
  },
  {
    "text": "there's some things we didn't want hypervisor to do we threw all those things into system management mode and since that was more privileged in the",
    "start": "307030",
    "end": "312460"
  },
  {
    "text": "hypervisor we called that ring -2 and then a couple of years ago some researchers came along they said hey there's this entirely different",
    "start": "312460",
    "end": "318990"
  },
  {
    "text": "processor sitting on the platform that can actually do things that the x86 processor can't do so we started calling",
    "start": "318990",
    "end": "325060"
  },
  {
    "text": "out ring minus three and it's just sort of getting ridiculous at this point but if you've been following this research as it sort of expanded over the last",
    "start": "325060",
    "end": "331870"
  },
  {
    "text": "twenty and the back of your head you probably even think like can we go further how deep does this rabbit hole go and that's",
    "start": "331870",
    "end": "338380"
  },
  {
    "text": "sort of the question I I set out the answer when I went down this path so when I'm not sort of beginning research",
    "start": "338380",
    "end": "345700"
  },
  {
    "text": "on something really big and unknown I found a good place to start is sometimes with patents because sometimes you can",
    "start": "345700",
    "end": "351400"
  },
  {
    "text": "find information in patents that you can't find in any other documentation so given this idea of this privilege model",
    "start": "351400",
    "end": "358300"
  },
  {
    "text": "of these rings of privilege and x86 imagination surprise without sifting through patents and I saw this little",
    "start": "358300",
    "end": "364180"
  },
  {
    "text": "blurb just sort of nonchalantly buried in the in the middle of a patent on that",
    "start": "364180",
    "end": "369490"
  },
  {
    "text": "completely different idea it said additionally accessing some of the internal control registers can enable",
    "start": "369490",
    "end": "374800"
  },
  {
    "text": "the user to bypass security mechanisms for example allowing ring 0 access at ring 3 my head kind of exploded when I",
    "start": "374800",
    "end": "381700"
  },
  {
    "text": "saw this like all of our security on x86 is based around this idea of rings of privilege and this little blurb is",
    "start": "381700",
    "end": "388750"
  },
  {
    "text": "telling me there may be some way to circumvent all of that in one fell swoop but they go on to say in addition these",
    "start": "388750",
    "end": "394390"
  },
  {
    "text": "control registers may reveal information that the processor designers wish to keep proprietary well that's kind of",
    "start": "394390",
    "end": "399940"
  },
  {
    "text": "understandable if I had some circumvention for all the privilege mechanisms on the processor I'd probably",
    "start": "399940",
    "end": "405040"
  },
  {
    "text": "want to keep that proprietary too but then they go on to say for these reasons the various activity 6 processor manufacturers have not publicly",
    "start": "405040",
    "end": "411580"
  },
  {
    "text": "documented any description of the address or function of some of the control amsr so so that makes sense but",
    "start": "411580",
    "end": "417580"
  },
  {
    "text": "that means we're probably dealing with something undocumented that we don't have a lot of access to so I did what",
    "start": "417580",
    "end": "423010"
  },
  {
    "text": "any rational person would do in this situation I went out and bought fifty-seven computers to start doing some research on to see if I could dig",
    "start": "423010",
    "end": "429400"
  },
  {
    "text": "into this idea a little bit further so I had some idea based on the patent owner",
    "start": "429400",
    "end": "434650"
  },
  {
    "text": "in the patent time frame I had some idea for what processor I might be trying to look at here but but patents are a funny",
    "start": "434650",
    "end": "440770"
  },
  {
    "text": "thing where the intellectual property gets bought by different entities and ideas sort of trickle through the",
    "start": "440770",
    "end": "445840"
  },
  {
    "text": "industry in weird ways I sort of want to cast a wide net to try to analyze this",
    "start": "445840",
    "end": "451840"
  },
  {
    "text": "this idea of a ring circumvention mechanism but eventually what I settled",
    "start": "451840",
    "end": "456880"
  },
  {
    "text": "on was a processor with a system with a b a c 3 processor so v is one of the",
    "start": "456880",
    "end": "462940"
  },
  {
    "text": "three major x86 manufacturers and c 3 is a that they had a while back so these were",
    "start": "462940",
    "end": "468800"
  },
  {
    "text": "specifically targeted at embedded systems they're marketed towards point-of-sales kiosks ATMs gaming since we're in Vegas",
    "start": "468800",
    "end": "475729"
  },
  {
    "text": "you might want to start poking around after this digital digital signage healthcare digital media industrial",
    "start": "475729",
    "end": "481309"
  },
  {
    "text": "automation and of course you can still find them in pcs and laptops so this is",
    "start": "481309",
    "end": "486349"
  },
  {
    "text": "a system I eventually pull off my shelf for this research and what I'm going to talk about for the rest of this presentation this is a thin client with",
    "start": "486349",
    "end": "492919"
  },
  {
    "text": "a c 3mm aia core inside of it and i'll talk later on about how this issue might",
    "start": "492919",
    "end": "500179"
  },
  {
    "text": "affect other processors but for now that's the system we're going to be focused on now I was unable to find a",
    "start": "500179",
    "end": "505519"
  },
  {
    "text": "developer manual for this processor that would have been a really useful starting point but you know even the patents sort",
    "start": "505519",
    "end": "510679"
  },
  {
    "text": "of hinted at the idea that a lot of this stuff's not going to be documented so that means we have to find some other",
    "start": "510679",
    "end": "515870"
  },
  {
    "text": "path forward so what you can do in the situation what I did was sort of try to follow a trail of patent breadcrumbs",
    "start": "515870",
    "end": "523339"
  },
  {
    "text": "just try to read different patents that might be related to one another in order to try to piece together as much",
    "start": "523339",
    "end": "528620"
  },
  {
    "text": "information about this this backdoor as as I can so this this quote isn't",
    "start": "528620",
    "end": "534560"
  },
  {
    "text": "actually from one of the patents I ended up using this was just another patent that I stumbled across along the way but",
    "start": "534560",
    "end": "539899"
  },
  {
    "text": "in order to give you some idea of what kind of things you're dealing with when you're reading this patent literature I wanted to quickly give you an example of",
    "start": "539899",
    "end": "546920"
  },
  {
    "text": "some some patents speak so this says figure 3 shows an embodiment of a cache memory referring to figure 3 in one",
    "start": "546920",
    "end": "553040"
  },
  {
    "text": "embodiment cache memory 3 xx multi-way cache memory and another embodiment cache memory 3 xx comprises multiple",
    "start": "553040",
    "end": "558680"
  },
  {
    "text": "physical sections in one embodiment cache memory 3 xx is logically divided into multiple sections in one embodiment",
    "start": "558680",
    "end": "564050"
  },
  {
    "text": "cache memory 3 xx includes for cash flows ie cash weigh 310 cash weigh 311 catch weigh 312 and cash flow 314 in one",
    "start": "564050",
    "end": "571189"
  },
  {
    "text": "embodiment a process or sequester's one or more cache ways to store or at or 2xq processor microcode like this is the",
    "start": "571189",
    "end": "578569"
  },
  {
    "text": "most convoluted legalese I've ever had to sift through and it is just so incredibly tedious trying to drive any",
    "start": "578569",
    "end": "584449"
  },
  {
    "text": "information from patent literature so you can imagine how awful it is to try to sift through a hundred pages of this",
    "start": "584449",
    "end": "591529"
  },
  {
    "text": "kind of text and just to put that in perspective that one four-page patent",
    "start": "591529",
    "end": "596660"
  },
  {
    "text": "had the phrase in one embodiment hundred and forty two times like trying",
    "start": "596660",
    "end": "602060"
  },
  {
    "text": "to do research this way is absolutely painful but if you're persistent it can it can start to pay off so after a lot",
    "start": "602060",
    "end": "609110"
  },
  {
    "text": "of work I narrowed in on these six patents that seem to have some loosely related ideas that might be able to",
    "start": "609110",
    "end": "614690"
  },
  {
    "text": "point me in the right direction for circumventing the ring privilege model in x86 so some of the key ideas from",
    "start": "614690",
    "end": "622250"
  },
  {
    "text": "these patents that I sort of sort of narrowed in on was it look like at the time via was embedding an on x86 core",
    "start": "622250",
    "end": "630680"
  },
  {
    "text": "alongside their x86 cores in the c3 processor this non x86 core was a risk",
    "start": "630680",
    "end": "636260"
  },
  {
    "text": "type arbiter architecture and the patents didn't have a consistent term for this but I started calling this the deeply embedded core the debt they also",
    "start": "636260",
    "end": "643670"
  },
  {
    "text": "talked about something called a global configuration register it was a register that would be exposed to the x86 Court",
    "start": "643670",
    "end": "649279"
  },
  {
    "text": "through a model specific register and the patent suggested that this global configuration register could activate",
    "start": "649279",
    "end": "655880"
  },
  {
    "text": "the risk core they also talked about what was called a launch instruction it would be a new instruction added to the",
    "start": "655880",
    "end": "662150"
  },
  {
    "text": "x86 instruction set architecture where once the risk core was activated you could use the launch instruction to",
    "start": "662150",
    "end": "668270"
  },
  {
    "text": "start instruction a sequence of risk instructions so so what does that leave",
    "start": "668270",
    "end": "673790"
  },
  {
    "text": "us well this is all sort of wild speculation at this point is piecing together little pieces of different patents but if our assumptions about",
    "start": "673790",
    "end": "680480"
  },
  {
    "text": "this deeply embedded core are correct that means they could be used as sort of a backdoor or a means of surreptitiously",
    "start": "680480",
    "end": "687680"
  },
  {
    "text": "circumventing all of the processor security checks so that's obviously something worth diving into a lot",
    "start": "687680",
    "end": "693890"
  },
  {
    "text": "further so let's start at the beginning how would we go about activating this circumvention mechanism well there's",
    "start": "693890",
    "end": "700880"
  },
  {
    "text": "there's three little tidbits from the various patents I was able to pick up on that might point us in the right direction here we've got one patent that",
    "start": "700880",
    "end": "707870"
  },
  {
    "text": "says a model specific register can be used to circumvent processor security checks we've got another patent that",
    "start": "707870",
    "end": "713510"
  },
  {
    "text": "says a model specific register can be used to activate the new instruction in x86 and we've got a third patent that",
    "start": "713510",
    "end": "719420"
  },
  {
    "text": "suggests that a launch instruction can be used to switch to a RISC instruction sequence so if you put these three",
    "start": "719420",
    "end": "725480"
  },
  {
    "text": "things together and sort of fill in the gaps it sounds like there's some model specific register bit that enable the",
    "start": "725480",
    "end": "731150"
  },
  {
    "text": "new x86 instruction that activates a risk cord that can bypass the processor security checks so",
    "start": "731150",
    "end": "737690"
  },
  {
    "text": "let's start with the first step in that chain this model-specific register so just a little bit of background for",
    "start": "737690",
    "end": "742940"
  },
  {
    "text": "people not familiar with the idea of MSRs on x86 so MSR SR 64-bit control registers and they are really really",
    "start": "742940",
    "end": "749420"
  },
  {
    "text": "varied they're used for things like debugging and performance monitoring and cache configuration and feature configuration basically anything not",
    "start": "749420",
    "end": "755360"
  },
  {
    "text": "directly related to computation can be talked into the the MSRs on x86 and",
    "start": "755360",
    "end": "760430"
  },
  {
    "text": "unlike the registers you might be more familiar with like EAX or edx on x86 MSRs are accessed by address not by name",
    "start": "760430",
    "end": "768350"
  },
  {
    "text": "and the MSR addresses go from 0 to 4 billion so the way you access a specific",
    "start": "768350",
    "end": "773600"
  },
  {
    "text": "MSR is you load its address and the dec X register and then you use the read MSR and write MSR instructions in order to",
    "start": "773600",
    "end": "780050"
  },
  {
    "text": "access the contents of that MSR so theoretically one of these Emma stars will allow us to eventually bypass",
    "start": "780050",
    "end": "787100"
  },
  {
    "text": "security mechanisms on the processor but there's a saving grace here you can only access MSRs from ring 0 code so even",
    "start": "787100",
    "end": "795350"
  },
  {
    "text": "though we might be able to enable a backdoor on the processor it should require one time ring 0 kernel level",
    "start": "795350",
    "end": "802010"
  },
  {
    "text": "access in order to activate or maybe not we'll revisit this part later but just",
    "start": "802010",
    "end": "808040"
  },
  {
    "text": "so that we can move the research forward for now let's assume that we have one time ring 0 access just to tinker with",
    "start": "808040",
    "end": "814460"
  },
  {
    "text": "the MSR s in order to get the rest of this chain active and we'll revisit that",
    "start": "814460",
    "end": "819620"
  },
  {
    "text": "limitation later on so going back to that original patent I talked about they do mention that the varies x86 processor",
    "start": "819620",
    "end": "826400"
  },
  {
    "text": "manufacturers have not publicly documented any description of the address or function of some of the",
    "start": "826400",
    "end": "831890"
  },
  {
    "text": "control MSRs so that leaves us in a bit of conundrum if we don't have any documentation for",
    "start": "831890",
    "end": "838190"
  },
  {
    "text": "which MSR we're looking at how are we going to find a wine that activates these secretive features so step one it",
    "start": "838190",
    "end": "845000"
  },
  {
    "text": "seems to be let's just figure out which Emma stars are implemented by the processor ignoring any documentation or",
    "start": "845000",
    "end": "851240"
  },
  {
    "text": "anything else like that let's figure out which ns ours actually exists on the processor and this one's a pretty easy",
    "start": "851240",
    "end": "856640"
  },
  {
    "text": "one to solve basically what you can do is in a kernel module set your general",
    "start": "856640",
    "end": "862100"
  },
  {
    "text": "protection exception handler to be specific function under your controller you can with the lidt instruction to reconfigure",
    "start": "862100",
    "end": "868940"
  },
  {
    "text": "that exception handler then you're going to load an MSR address into the ECX register so let's say I wanted to figure",
    "start": "868940",
    "end": "874520"
  },
  {
    "text": "out does MSR 133 7 exist on this processor I'll load 133 7 into the ECX",
    "start": "874520",
    "end": "880520"
  },
  {
    "text": "register then I'm going to try to read that model specific register and then if I don't get a fault that means that the",
    "start": "880520",
    "end": "887240"
  },
  {
    "text": "MSR exists whether or not the documentation says that hema SAR exists it must exist if I don't get a fault on",
    "start": "887240",
    "end": "893480"
  },
  {
    "text": "the other hand if my exception handler gets controlled that means that that MSR does not exist so this is a really",
    "start": "893480",
    "end": "899270"
  },
  {
    "text": "really simple way to iterate through all the possible EMA czars and figure out which exists on the processor which",
    "start": "899270",
    "end": "904370"
  },
  {
    "text": "don't exist on a processor so when I ran this little algorithm on my targets III",
    "start": "904370",
    "end": "909470"
  },
  {
    "text": "processor what I found were that it had 1,300 implemented model specific registers meta is a way more than would",
    "start": "909470",
    "end": "916250"
  },
  {
    "text": "be typical on an x86 processor and kind of threw a wrench in this whole process that's too many MSRs to analyze I think",
    "start": "916250",
    "end": "923960"
  },
  {
    "text": "one bit and one of these MS ours is going to activate this this new x86 instruction but I can't sift through",
    "start": "923960",
    "end": "930890"
  },
  {
    "text": "1,300 MSRs on my own so the next question is well which of these ms ARS are actually unique which really could",
    "start": "930890",
    "end": "937610"
  },
  {
    "text": "be the ones that I'm looking for what are the interesting ones that I should be focused on so I came up with this",
    "start": "937610",
    "end": "942770"
  },
  {
    "text": "idea for sort of a timing side channel attack on on the processor where",
    "start": "942770",
    "end": "948590"
  },
  {
    "text": "basically what I would do would be to act calculate the access times for all four billion possible MSRs so what that",
    "start": "948590",
    "end": "957020"
  },
  {
    "text": "looks like is we have a read MSR instruction and then on either side of that read MSR instruction we have some",
    "start": "957020",
    "end": "962180"
  },
  {
    "text": "serialized read time stamp counter instructions and that lets me measure exactly how much time it takes to read",
    "start": "962180",
    "end": "968150"
  },
  {
    "text": "any given model specific register so what that ends up looking like is is",
    "start": "968150",
    "end": "973310"
  },
  {
    "text": "this on the x-axis here I've got my four billion possible MSRs on this platform",
    "start": "973310",
    "end": "978380"
  },
  {
    "text": "on the y-axis is the amount of time it takes to access each of those MSRs in",
    "start": "978380",
    "end": "983810"
  },
  {
    "text": "green I'm showing the MSR that actually exists on the processor in red are the unimplemented MSRs so this is some",
    "start": "983810",
    "end": "990860"
  },
  {
    "text": "really really interesting insights into the processor that would normally be totally off-limits to us we can actually sort of peer under the micro code and",
    "start": "990860",
    "end": "997190"
  },
  {
    "text": "understand what's happening with these various emissaries using this timing side channel so I want to throw out an",
    "start": "997190",
    "end": "1003610"
  },
  {
    "text": "observation here may be that functionally different MSR should have different access times so for example",
    "start": "1003610",
    "end": "1010390"
  },
  {
    "text": "accessing the time stamp counter MSR should take a different amount of time and accessing a thermal sensor and I saw",
    "start": "1010390",
    "end": "1016480"
  },
  {
    "text": "and that's because each of those Emma stars is going to a different micro code implementing them that micro cuts going to take different amounts of times to",
    "start": "1016480",
    "end": "1022540"
  },
  {
    "text": "execute so I would expect the access times for each MSR to be different if the MSR czar very different on the other",
    "start": "1022540",
    "end": "1028240"
  },
  {
    "text": "hand functional equivalent MSR should have approximately the same access time so for example there's something called",
    "start": "1028240",
    "end": "1033640"
  },
  {
    "text": "the MTR are the memory type range registers in x86 it's a set of MSRs that control caching behavior for different",
    "start": "1033640",
    "end": "1040209"
  },
  {
    "text": "regions of memory what I would expect would be that MT rr0 would have roughly the same access time as MTR r1 because",
    "start": "1040209",
    "end": "1047048"
  },
  {
    "text": "even though they control different regions of memory they're functionally equivalent MSRs so what that means is",
    "start": "1047049",
    "end": "1053020"
  },
  {
    "text": "that this timing attack gives me a way to differentiate between light and unlike and the Czar's and I'm going to",
    "start": "1053020",
    "end": "1059890"
  },
  {
    "text": "define like MSRs as Jason MSRs with equal are functionally related access",
    "start": "1059890",
    "end": "1064960"
  },
  {
    "text": "times so then specifically I want to throw out this hypothesis that the global configuration register this model",
    "start": "1064960",
    "end": "1070990"
  },
  {
    "text": "specific register hinted at and these patents is probably unique it doesn't",
    "start": "1070990",
    "end": "1076179"
  },
  {
    "text": "make sense to have multiple functionally equivalent versions of the GCR this thing should have a bit that",
    "start": "1076179",
    "end": "1082809"
  },
  {
    "text": "activates a new x86 instruction that I can use for circumventing protections and it doesn't make a lot of sense to",
    "start": "1082809",
    "end": "1088990"
  },
  {
    "text": "have several of these different registers all doing the same thing so when I started looking at my timing",
    "start": "1088990",
    "end": "1094000"
  },
  {
    "text": "graph I can begin to pick out the functionally unique MSRs in this in this",
    "start": "1094000",
    "end": "1099460"
  },
  {
    "text": "graph it's the one said are separate from the other MSRs on the system so when I begin to",
    "start": "1099460",
    "end": "1106210"
  },
  {
    "text": "identify the functionally unique MSRs I'm able to actually hair down that original list of MSRs a lot more so",
    "start": "1106210",
    "end": "1113530"
  },
  {
    "text": "using the side channel I found 43 unique model specific registers from the 1,300",
    "start": "1113530",
    "end": "1119080"
  },
  {
    "text": "that are actually implemented on the processor so that's that's really exciting for me that means it seems like my research can move forward 43 cm it",
    "start": "1119080",
    "end": "1125919"
  },
  {
    "text": "sounds like a much more tractable number of model specific registers to analyze than 13-hundred",
    "start": "1125919",
    "end": "1131140"
  },
  {
    "text": "the problem is 43 and ours is still 27:52 bits to check at 64",
    "start": "1131140",
    "end": "1137420"
  },
  {
    "text": "bits of piece that is a lot of bits to sift through I want to find one bit that activates this this launch instruction",
    "start": "1137420",
    "end": "1143330"
  },
  {
    "text": "this new x86 instruction but that's too many bits for me to go through by hand",
    "start": "1143330",
    "end": "1148610"
  },
  {
    "text": "especially when you consider the magnitude of the x86 instruction set so theoretically one of these bits enables",
    "start": "1148610",
    "end": "1154160"
  },
  {
    "text": "a new x86 instruction well if we look at how many possible x86 instructions there can be it turns out there's a lot x86 is",
    "start": "1154160",
    "end": "1161510"
  },
  {
    "text": "a really really complicated architecture and an upper bound on the number of possible at ten six instructions would",
    "start": "1161510",
    "end": "1167870"
  },
  {
    "text": "be something like 1.3 undecillion instructions so I'm looking for a single",
    "start": "1167870",
    "end": "1173210"
  },
  {
    "text": "new instruction amongst 1.3 undecillion possible instructions even if I take a",
    "start": "1173210",
    "end": "1179300"
  },
  {
    "text": "really really generous estimate and say that I can scan one billion possible",
    "start": "1179300",
    "end": "1184430"
  },
  {
    "text": "instructions a second we can do like a quick Fermi calculation to see like 1.3 undecillion divided by a billion divided",
    "start": "1184430",
    "end": "1191210"
  },
  {
    "text": "by 60 seconds in a minute divided by 60 minutes an hour divided by 24 hours-a-day divided by 365 days a year",
    "start": "1191210",
    "end": "1197630"
  },
  {
    "text": "means scanning for a new instruction X 86 is going to take approximately one eternity so I don't have time to sit",
    "start": "1197630",
    "end": "1204560"
  },
  {
    "text": "around waiting to find this this new instruction especially when I've got to do a scan for every bit and I'm looking",
    "start": "1204560",
    "end": "1210290"
  },
  {
    "text": "at about 2700 eternities trying to find which bit activates this new x86",
    "start": "1210290",
    "end": "1215690"
  },
  {
    "text": "instruction so I was really fortunate in this case because I actually looked at this exact problem last year and",
    "start": "1215690",
    "end": "1221510"
  },
  {
    "text": "developed this tool called stance after so what's an sector does is it finds an intelligent way to scan through the x86",
    "start": "1221510",
    "end": "1227950"
  },
  {
    "text": "instruction set it uses page fault analysis and a depth first search algorithm to quickly find all the x86",
    "start": "1227950",
    "end": "1234550"
  },
  {
    "text": "instructions of interest on a processor so I still can't run San v or 2700",
    "start": "1234550",
    "end": "1242480"
  },
  {
    "text": "different times it takes about a day to scan a processor but this at least opens up some opportunity from from moving",
    "start": "1242480",
    "end": "1248750"
  },
  {
    "text": "forward what I can do is I can look at each of those 2700 Candidate MSR bits and I can try to toggle each of them one",
    "start": "1248750",
    "end": "1256010"
  },
  {
    "text": "by one not doing an instruction scan between each one but I can just try to toggle each of these bits one at a time",
    "start": "1256010",
    "end": "1262400"
  },
  {
    "text": "of course I'm going to run to some problems these are configuration bits that can the deepest workings of the processor",
    "start": "1262400",
    "end": "1268159"
  },
  {
    "text": "and I have no idea what they do so a lot of them are going to lock the processor free z/os panic the kernel or just reset",
    "start": "1268159",
    "end": "1274730"
  },
  {
    "text": "the system entirely so this is still something that's not really doable by hand but we we can automate this process",
    "start": "1274730",
    "end": "1281360"
  },
  {
    "text": "so I developed a simple setup where I would have a target system the vs III",
    "start": "1281360",
    "end": "1287269"
  },
  {
    "text": "processor would have a wire soldered on to its power switch and that wires connected to a relay and that relay is",
    "start": "1287269",
    "end": "1293570"
  },
  {
    "text": "connected to a master system the target system boots from the master over the network and the master system can SSH",
    "start": "1293570",
    "end": "1299929"
  },
  {
    "text": "into the target and assign it jobs basically it can SSH into the target and",
    "start": "1299929",
    "end": "1304940"
  },
  {
    "text": "start toggling its potential MSR bits one by one and what the master will do",
    "start": "1304940",
    "end": "1310700"
  },
  {
    "text": "is it will detect when the target is frozen or panicked or locked and use that relay in order to power cycle the",
    "start": "1310700",
    "end": "1316340"
  },
  {
    "text": "target so this way I can automate the process of trying to toggle each of these 2700 MSR bits one by one and we're",
    "start": "1316340",
    "end": "1323450"
  },
  {
    "text": "going to see how many can I get on before the system becomes unstable so through hundreds of automated reboots",
    "start": "1323450",
    "end": "1329419"
  },
  {
    "text": "the saying ran for about a week and I was able to identify exactly which of those bits could be toggled without the",
    "start": "1329419",
    "end": "1335149"
  },
  {
    "text": "system having any sort of visible side effects so so with that done I would go in and I would Tabo all the stable MSR",
    "start": "1335149",
    "end": "1342740"
  },
  {
    "text": "bits that I could possibly access and then run the sand sifters scanning tool in order to see if any new instructions",
    "start": "1342740",
    "end": "1349460"
  },
  {
    "text": "had appeared on that x86 processor so so that looks something like like this so",
    "start": "1349460",
    "end": "1354919"
  },
  {
    "text": "since after it is scanning scanning the system for it for new instructions using",
    "start": "1354919",
    "end": "1361129"
  },
  {
    "text": "it's it's page fault analysis depth-first search thing I sort of started watching this taking this video",
    "start": "1361129",
    "end": "1366259"
  },
  {
    "text": "in the middle of a search but if you let this scan for about a day what you'll eventually find is sand sifter will spit",
    "start": "1366259",
    "end": "1373460"
  },
  {
    "text": "out some some new information for us so there we go after about a day of scanning sand",
    "start": "1373460",
    "end": "1380059"
  },
  {
    "text": "sifter finds exactly one new instruction in x86 that was not supposed to be there",
    "start": "1380059",
    "end": "1385879"
  },
  {
    "text": "it finds a Oh F 3 F so judging from the patent literature this is what they're calling the launch instruction this is",
    "start": "1385879",
    "end": "1392779"
  },
  {
    "text": "the new x86 instruction and enabled by some bit in the global configuration register so with GD being a little try",
    "start": "1392779",
    "end": "1399539"
  },
  {
    "text": "I was able to figure out that this launch instruction is effectively a jump EAX instruction it just jumps to",
    "start": "1399539",
    "end": "1405149"
  },
  {
    "text": "whatever address is in the EAX register so now I want to know which of those bits that I activated was really",
    "start": "1405149",
    "end": "1411029"
  },
  {
    "text": "responsible for enabling this this much instruction fortunately now that I know what the instruction is I no longer have",
    "start": "1411029",
    "end": "1417419"
  },
  {
    "text": "to run complete sense after scans in order to test my theories basically what I can do is I can activate a candidate",
    "start": "1417419",
    "end": "1423929"
  },
  {
    "text": "MSR bit and see if Oh Oh F 3 F exists on the processor if it doesn't that wasn't",
    "start": "1423929",
    "end": "1429600"
  },
  {
    "text": "the correct MSR but if it does and I found a bit that I'm after so using this approach I was able to determine pretty",
    "start": "1429600",
    "end": "1434999"
  },
  {
    "text": "quickly that MSR number 1107 on the processor activates this launch instruction so 1107 must be what the",
    "start": "1434999",
    "end": "1442379"
  },
  {
    "text": "patents are calling the global configuration register the register that will unlock this new functionality going",
    "start": "1442379",
    "end": "1449549"
  },
  {
    "text": "further what I suspect at this point is that by unlocking this other risk core",
    "start": "1449549",
    "end": "1455909"
  },
  {
    "text": "on the processor I will use that core to circumvent all of the security checks built into x86 that that really opens up",
    "start": "1455909",
    "end": "1464279"
  },
  {
    "text": "some phenomenal opportunities and exploitation so because of that power I called that specific bit in MSR 1107",
    "start": "1464279",
    "end": "1472590"
  },
  {
    "text": "the god mode bit is basically bits 0 of that register was the one ultimately responsible for enabling this new x86",
    "start": "1472590",
    "end": "1479460"
  },
  {
    "text": "instruction so so with this I figured out the god mode bid I figured out what",
    "start": "1479460",
    "end": "1485340"
  },
  {
    "text": "the launch instruction is now the question is how do I actually execute instructions on this risk core so we can",
    "start": "1485340",
    "end": "1492840"
  },
  {
    "text": "dive into the patents a little bit more to try to speculate on how this might work and the patents include some interesting figures for this brutal",
    "start": "1492840",
    "end": "1498869"
  },
  {
    "text": "instruction set pipeline and what they suggest is that some time after fetching an instruction that instruction might be",
    "start": "1498869",
    "end": "1505200"
  },
  {
    "text": "sent to the x86 core or if the risk score has been activated it might be sent to the risk core so I I went",
    "start": "1505200",
    "end": "1510359"
  },
  {
    "text": "through a lot of trial and error and a lot of different models for exactly how this would work and I ended up settling on something like this where what's",
    "start": "1510359",
    "end": "1517649"
  },
  {
    "text": "essentially hard to happen is an assertion is going to fetch from the instruction cache it's going to go to",
    "start": "1517649",
    "end": "1523200"
  },
  {
    "text": "some x86 pre decoder that's basically going to break that instruction part apart into its basic components",
    "start": "1523200",
    "end": "1530460"
  },
  {
    "text": "then those components are going to pass a check the processor is going to check has the risk or been activated with that",
    "start": "1530460",
    "end": "1537150"
  },
  {
    "text": "launch instruction or not if it is not it's going to pass those components over to the full x86 decoder and those are",
    "start": "1537150",
    "end": "1543690"
  },
  {
    "text": "going to go through the x86 pipeline if it has it's going to break off one of these components and send it over to the",
    "start": "1543690",
    "end": "1550080"
  },
  {
    "text": "risk decoder and execute that as a risk instruction instead in other words with this setup there is some x86 instruction",
    "start": "1550080",
    "end": "1557820"
  },
  {
    "text": "where if the processor is in risk mode it can pass a portion of itself over to",
    "start": "1557820",
    "end": "1563430"
  },
  {
    "text": "the RISC processor and since this x86 instruction he essentially joins the two cores it joins the x86 in the risk core",
    "start": "1563430",
    "end": "1569880"
  },
  {
    "text": "I started calling this the the bridge instruction but we don't know what this instruction is yet I have no idea how to",
    "start": "1569880",
    "end": "1576150"
  },
  {
    "text": "actually feed instructions to this risk court that I've activated so to find the",
    "start": "1576150",
    "end": "1582600"
  },
  {
    "text": "bridge instruction it should be sufficient to detect that our RISC instruction has the execute has been",
    "start": "1582600",
    "end": "1587730"
  },
  {
    "text": "executed but that's easier said than done I have no idea what this risk core looks",
    "start": "1587730",
    "end": "1592800"
  },
  {
    "text": "like I don't know what instruction execution on that core should look like so how are we going to detect if we've",
    "start": "1592800",
    "end": "1598620"
  },
  {
    "text": "successfully executed a RISC instruction well there is one easy way the theory here is that if this core actually does",
    "start": "1598620",
    "end": "1604950"
  },
  {
    "text": "provide a way to get around the processor security checks then there should be some risk instruction that",
    "start": "1604950",
    "end": "1612120"
  },
  {
    "text": "when executed in ring 3 would corrupt the system basically that would give us something really easy to detect if the",
    "start": "1612120",
    "end": "1618690"
  },
  {
    "text": "processor locks or the kernel panics or the system resets that would be a sure",
    "start": "1618690",
    "end": "1623880"
  },
  {
    "text": "sign that we executed a RISC instruction because none of those things should be able to happen if you're just executing",
    "start": "1623880",
    "end": "1630330"
  },
  {
    "text": "ring 3 x86 instructions so if we detect any of that behavior we know that we've found a corrupting RISC instruction and",
    "start": "1630330",
    "end": "1637230"
  },
  {
    "text": "therefore found the x86 bridge instruction as well so I explore this I",
    "start": "1637230",
    "end": "1642900"
  },
  {
    "text": "sort of poor part the heart of sand sifter and repurposed it for a brute-force buzzing of the the processor",
    "start": "1642900",
    "end": "1648870"
  },
  {
    "text": "and what's Ancestors going to do now is it's going to execute that launch instruction before every x86 instruction",
    "start": "1648870",
    "end": "1654780"
  },
  {
    "text": "that it generates and what since if there's trying to do is it's trying to generate a processor lock and you'll see that we just did that",
    "start": "1654780",
    "end": "1661020"
  },
  {
    "text": "after fuzzing the processor for little bit basically when you observe",
    "start": "1661020",
    "end": "1666179"
  },
  {
    "text": "that the processors lock when from ring three we locked the processor that indicates that we've found that bridge",
    "start": "1666179",
    "end": "1672480"
  },
  {
    "text": "instruction that we're looking for we found a way to send commands to that x86 core or to that risk court embedded",
    "start": "1672480",
    "end": "1679080"
  },
  {
    "text": "alongside the x86 core so it takes about a full hour of buzzing to find us but what's en cetera uncovered was that",
    "start": "1679080",
    "end": "1685260"
  },
  {
    "text": "a bound EAX instruction in x86 is able to send instructions over to the risk",
    "start": "1685260",
    "end": "1690419"
  },
  {
    "text": "core after that core has been activated specifically bound he X has a 32-bit",
    "start": "1690419",
    "end": "1697049"
  },
  {
    "text": "constant value in it and it's this 32 bit constant value that forms the actual",
    "start": "1697049",
    "end": "1702120"
  },
  {
    "text": "risk instruction that will be sent to that deeply embedded core that might be able to bypass processor security checks",
    "start": "1702120",
    "end": "1708690"
  },
  {
    "text": "so so we're getting further we figured out how to execute instructions on the",
    "start": "1708690",
    "end": "1714120"
  },
  {
    "text": "deck I use this bridge instruction to send it and risk instruction so so the",
    "start": "1714120",
    "end": "1719220"
  },
  {
    "text": "next question is what do I actually want to execute like what do these instructions look like what architecture",
    "start": "1719220",
    "end": "1724860"
  },
  {
    "text": "am I even dealing with if I want to use this actually circumvent security checks I need to answer these these questions",
    "start": "1724860",
    "end": "1730679"
  },
  {
    "text": "so so the obvious first approach to dealing with this unknown architecture is just assume that it's some common",
    "start": "1730679",
    "end": "1736980"
  },
  {
    "text": "architecture there's really no need to reinvent the wheel adding a new core to your your x86 processor so maybe this",
    "start": "1736980",
    "end": "1743370"
  },
  {
    "text": "thing is some common architecture that we've seen before so to test that we can basically try generating simple",
    "start": "1743370",
    "end": "1748740"
  },
  {
    "text": "instructions in some common architecture like arm power PC or MIPS how might generate instruction like add one to our",
    "start": "1748740",
    "end": "1755970"
  },
  {
    "text": "zero forearm and I could try executing that on the deeply embedded core and see what happens",
    "start": "1755970",
    "end": "1761220"
  },
  {
    "text": "the the challenge here is without knowing anything about that deeply embedded core there's no obvious way for",
    "start": "1761220",
    "end": "1767370"
  },
  {
    "text": "me to necessarily check the results of an instruction so sure I can generate some simple RISC instruction and try to",
    "start": "1767370",
    "end": "1773220"
  },
  {
    "text": "execute it but I don't know what I'm looking for after it executes so the good thing here is that there is still a",
    "start": "1773220",
    "end": "1779280"
  },
  {
    "text": "simple way to rule out architectures what I was observing is that a lot of the risk instructions I tried to execute",
    "start": "1779280",
    "end": "1785220"
  },
  {
    "text": "would actually lock the processor so if I generated a really simple instruction",
    "start": "1785220",
    "end": "1790230"
  },
  {
    "text": "like add one to ours zero for RISC architecture and I tried to execute that on the deck and the",
    "start": "1790230",
    "end": "1795690"
  },
  {
    "text": "processor locked up that's a pretty good sign that that wasn't the architecture that I was expecting so I can rule out",
    "start": "1795690",
    "end": "1802799"
  },
  {
    "text": "that this is armed if it's choking on simple arm instructions unfortunately when I took this approach I pretty",
    "start": "1802799",
    "end": "1808619"
  },
  {
    "text": "quickly ruled out 30 very common RISC architectures for that deeply embedded",
    "start": "1808619",
    "end": "1813629"
  },
  {
    "text": "core now I still think that this thing is probably based off of some common architecture there'd be no reason to",
    "start": "1813629",
    "end": "1819509"
  },
  {
    "text": "spend something up from scratch but it's probably heavily enough modified that I couldn't recognize it so so that means",
    "start": "1819509",
    "end": "1825210"
  },
  {
    "text": "I've got to sort of deal with this deeply embedded core as a black box I've got to treat this as an unknown",
    "start": "1825210",
    "end": "1830909"
  },
  {
    "text": "architecture and figure out how it's actually communicate with it so to do that we've got to basically",
    "start": "1830909",
    "end": "1836239"
  },
  {
    "text": "reverse-engineer the instruction format for that deeply embedded core and I spent enough time on this I I made up my",
    "start": "1836239",
    "end": "1842729"
  },
  {
    "text": "own name for this I called started calling it the deeply embedded instruction set that dies so this dies",
    "start": "1842729",
    "end": "1848460"
  },
  {
    "text": "might look like and and how we might begin to to reverse engineer so one idea",
    "start": "1848460",
    "end": "1853710"
  },
  {
    "text": "would be we could execute a RISC instruction and basically try to observe its results like I said the challenge",
    "start": "1853710",
    "end": "1858989"
  },
  {
    "text": "with that though is we don't know what the risk is a looks like so there's not",
    "start": "1858989",
    "end": "1864119"
  },
  {
    "text": "necessarily an easy way to observe the results of an of an instruction but as I started reading more into the patent literature I saw that there are hints",
    "start": "1864119",
    "end": "1870450"
  },
  {
    "text": "that this risk court and the x86 core had a partially shared register file",
    "start": "1870450",
    "end": "1876419"
  },
  {
    "text": "which means we should be able to observe the results of at least some of these risk instructions from the x86 core so",
    "start": "1876419",
    "end": "1883440"
  },
  {
    "text": "this is a diagram from the patent literature where they're sort of showing in an arm core and how some of the",
    "start": "1883440",
    "end": "1888749"
  },
  {
    "text": "register registers are shared with the x86 core on the processor so what that means is we could do something like this",
    "start": "1888749",
    "end": "1894330"
  },
  {
    "text": "and this is just sort of a rough summary we could generate a processor State so we could generate some buffers in kernel",
    "start": "1894330",
    "end": "1899849"
  },
  {
    "text": "memory generate some buffers and user memory generate a state for all the processor registers and we could load",
    "start": "1899849",
    "end": "1906389"
  },
  {
    "text": "that state onto the processor after we loaded up this state will execute the",
    "start": "1906389",
    "end": "1911549"
  },
  {
    "text": "launch instruction followed by an x86 bridge instruction the bridge instruction will feed a RISC instruction",
    "start": "1911549",
    "end": "1917519"
  },
  {
    "text": "over to the deeply embedded core and let that instruction execute after that",
    "start": "1917519",
    "end": "1923309"
  },
  {
    "text": "instruction execute Simon deeply embedded poor what we're going to do is read the state off of the processor will read out",
    "start": "1923309",
    "end": "1928500"
  },
  {
    "text": "all the registers will read out all the buffers that we set up and then we'll see if anything's changed between that",
    "start": "1928500",
    "end": "1933600"
  },
  {
    "text": "input and output state to see if we can start deciphering what effect that randomly generated instruction had so",
    "start": "1933600",
    "end": "1941280"
  },
  {
    "text": "nothing's ever simple with this another challenge came up I'm dealing with an unknown instruction set with unfettered",
    "start": "1941280",
    "end": "1948480"
  },
  {
    "text": "access to ring 0 so I'm just trying to randomly generate these RISC instructions and see what happens but it",
    "start": "1948480",
    "end": "1955110"
  },
  {
    "text": "turns out it's really really easy then to generate an instruction that causes a kernel panic or a processor lock or",
    "start": "1955110",
    "end": "1960180"
  },
  {
    "text": "system reboots and in practice I could only execute about 20 random RISC instructions before the system became",
    "start": "1960180",
    "end": "1966990"
  },
  {
    "text": "unrecoverable corrupted and had to be rebooted so even after optimization the",
    "start": "1966990",
    "end": "1972540"
  },
  {
    "text": "fastest I can get one of these systems to boot was about two minutes so some quick calculations suggested that",
    "start": "1972540",
    "end": "1978420"
  },
  {
    "text": "gathering enough data to reverse-engineer the entire instruction set at this rate was going to take",
    "start": "1978420",
    "end": "1984300"
  },
  {
    "text": "months and months so I decided to expand the original system that that I had",
    "start": "1984300",
    "end": "1989490"
  },
  {
    "text": "built for fuzzing this so what we see down here are instead of one target I've",
    "start": "1989490",
    "end": "1995790"
  },
  {
    "text": "now got seven of these inclined targets if you look closely you can see a little green wire coming out of the chassis of",
    "start": "1995790",
    "end": "2002300"
  },
  {
    "text": "each of these all hooked up to this relay up here the relay is hooked up to a master system that can use that relay",
    "start": "2002300",
    "end": "2010190"
  },
  {
    "text": "in order to power cycle each individual target the targets network boot through the master and the master once each",
    "start": "2010190",
    "end": "2016280"
  },
  {
    "text": "system is booted we'll SSH into the target and give it a fuzzing task the master records the results of the",
    "start": "2016280",
    "end": "2022700"
  },
  {
    "text": "fuzzing as they occur into a database and when it detects that one of these targets has become corrupted if the",
    "start": "2022700",
    "end": "2029090"
  },
  {
    "text": "colonel is panicked the system's frozen or what-have-you it will use the relays in order to power cycle that specific frozen target so we",
    "start": "2029090",
    "end": "2037820"
  },
  {
    "text": "can see what this thing's looks like in action so what I'm going to do is I'm going to start a fuzzing job on the",
    "start": "2037820",
    "end": "2044150"
  },
  {
    "text": "master it's going to generate some fuzzing tasks for each of the targets and once it's done that it'll start",
    "start": "2044150",
    "end": "2050720"
  },
  {
    "text": "power powering up each of these that targets one by one so if you watch the lights on the relay and if you listen",
    "start": "2050720",
    "end": "2056300"
  },
  {
    "text": "carefully you can hear the relays clicking you'll see that each of these targets is powering up one by one if you watch the",
    "start": "2056300",
    "end": "2061490"
  },
  {
    "text": "little green LEDs and the targets you'll see them coming up and it'll take about two minutes for those targets to",
    "start": "2061490",
    "end": "2067550"
  },
  {
    "text": "completely come up but once it does we can actually start to see some fuzzing",
    "start": "2067550",
    "end": "2073010"
  },
  {
    "text": "results occurring so what we're seeing scrolling by on the a master system now is every once in a while you'll see a",
    "start": "2073010",
    "end": "2080330"
  },
  {
    "text": "state if there is one scroll by on the screen and the master is recording each of those discs as they occur and my hope",
    "start": "2080330",
    "end": "2087500"
  },
  {
    "text": "is that I'll be able to analyze those discs offline later in order to detect what changes each instruction is having",
    "start": "2087500",
    "end": "2092840"
  },
  {
    "text": "but of course every once in a while one of these instructions will lock the system and you can see the relay blinking as the master is now resetting",
    "start": "2092840",
    "end": "2099740"
  },
  {
    "text": "frozen target systems so this thing ran for about three weeks I collected 15 gigabytes of logs about",
    "start": "2099740",
    "end": "2107150"
  },
  {
    "text": "2.3 million different state disks for four thousand hours of compute time in order to try to gather enough",
    "start": "2107150",
    "end": "2112609"
  },
  {
    "text": "information to reverse engineer this unknown instruction set so the very first thing I wanted to figure out after",
    "start": "2112609",
    "end": "2117800"
  },
  {
    "text": "I collected this giant collection of logs was is any of my theory correct",
    "start": "2117800",
    "end": "2123890"
  },
  {
    "text": "am i actually able to circumvent ring protections through this embedded risk core on the processor and I was really",
    "start": "2123890",
    "end": "2130970"
  },
  {
    "text": "excited when I found this first instruction a seven seven one nine five six three an instruction that I executed",
    "start": "2130970",
    "end": "2137330"
  },
  {
    "text": "in ring three sending that instruction over to the deeply embedded core from the bridge instruction and we can see",
    "start": "2137330",
    "end": "2142970"
  },
  {
    "text": "that EDX got loaded with a new value here EDX became eight zero zero five zero zero three three that is the value",
    "start": "2142970",
    "end": "2150140"
  },
  {
    "text": "of this control register zero so CR 0 is supposed to be a register that is only accessible to ring zero but we just read",
    "start": "2150140",
    "end": "2157640"
  },
  {
    "text": "it in ring 3 using the deeply embedded core and we're not limited to leaking data from ring zero we can actually",
    "start": "2157640",
    "end": "2164710"
  },
  {
    "text": "write data that only ring zero should have access to so for example only ring",
    "start": "2164710",
    "end": "2169790"
  },
  {
    "text": "zero should be able to modify the debug registers in x86 but here we can actually see that this deck instruction",
    "start": "2169790",
    "end": "2176270"
  },
  {
    "text": "this a deeply embedded instruction was able to write the value of EBP into the",
    "start": "2176270",
    "end": "2181340"
  },
  {
    "text": "dr zero register so this is a really good sign things we're looking looking promising to be able to use this",
    "start": "2181340",
    "end": "2186710"
  },
  {
    "text": "backdoor for privilege escalation purposes so really when we've started tearing the boundaries of rings when we can",
    "start": "2186710",
    "end": "2192630"
  },
  {
    "text": "reach directly into the kernel we can do whatever we want at that point but I wanted to come up with some sort of",
    "start": "2192630",
    "end": "2197750"
  },
  {
    "text": "simple interesting proof-of-concept payload to demonstrate the capabilities",
    "start": "2197750",
    "end": "2202920"
  },
  {
    "text": "of this of this deeply embedded core on the processor so I thought an easy easy proof-of-concept would be privileged",
    "start": "2202920",
    "end": "2210360"
  },
  {
    "text": "escalation payload and the privilege escalation payload would look something like this it's the very first thing we",
    "start": "2210360",
    "end": "2216030"
  },
  {
    "text": "want to do is we want to read the global descriptor table register and an x86",
    "start": "2216030",
    "end": "2221070"
  },
  {
    "text": "global descriptor table register is going to point us to the global descriptor table and one of the entries in the global descriptor table is going",
    "start": "2221070",
    "end": "2227310"
  },
  {
    "text": "to be for the FS segment register we can theoretically if we can circumvent rank",
    "start": "2227310",
    "end": "2232860"
  },
  {
    "text": "protections we can reach directly into kernel memory and pull out that segment descriptor from the global descriptor",
    "start": "2232860",
    "end": "2238020"
  },
  {
    "text": "table and there's some bit fields in that segment descriptor that will give us a pointer to our processes task",
    "start": "2238020",
    "end": "2244800"
  },
  {
    "text": "structure and again if we are able to reach into kernel memory and pull out information we can grab a pointer to",
    "start": "2244800",
    "end": "2252390"
  },
  {
    "text": "what's called the cred structure that sits within this test structure so the credit structure is going to hold my",
    "start": "2252390",
    "end": "2258360"
  },
  {
    "text": "processes permissions so with that test of the credential structure what I'm",
    "start": "2258360",
    "end": "2263790"
  },
  {
    "text": "going to do is I'm going to give myself root permissions root and Linux is basically defined by zero so I'm going",
    "start": "2263790",
    "end": "2269760"
  },
  {
    "text": "to use my range circumvention techniques in order to write the value root to the",
    "start": "2269760",
    "end": "2274800"
  },
  {
    "text": "new ID the GID the EU ID and the eg ID in that credentials structure so at",
    "start": "2274800",
    "end": "2280770"
  },
  {
    "text": "least that's what our payload theoretically looks like the next question is can we actually build this thing using this deeply embedded core",
    "start": "2280770",
    "end": "2288180"
  },
  {
    "text": "now if you look carefully at the payload there's really only a few places where we actually bypass the ring boundaries",
    "start": "2288180",
    "end": "2294090"
  },
  {
    "text": "where we actually reach into Kirk ring zero and start modifying things so those",
    "start": "2294090",
    "end": "2299190"
  },
  {
    "text": "are really the only places where I need this deeply embedded core to do my work for me but it is kind of fun to write",
    "start": "2299190",
    "end": "2306170"
  },
  {
    "text": "instructions for this the secret core on the processor and make it do interesting things so I thought would be a little",
    "start": "2306170",
    "end": "2311880"
  },
  {
    "text": "more interesting to actually try to write this entire payload in and instructions for that deeply embedded",
    "start": "2311880",
    "end": "2317940"
  },
  {
    "text": "core as opposed to just the kernel accesses that I needed so so to build that payload well I'm in",
    "start": "2317940",
    "end": "2323930"
  },
  {
    "text": "a situation where I've got 50 gigabytes of of logs I basically got start sifting",
    "start": "2323930",
    "end": "2329060"
  },
  {
    "text": "through this thing for primitives so this actually starts to feel a lot like building a rope chain where conceptually",
    "start": "2329060",
    "end": "2334850"
  },
  {
    "text": "I know what I'm trying to accomplish but I need to figure out how to use my individual pieces in order to accomplish that so we can start looking for through",
    "start": "2334850",
    "end": "2341660"
  },
  {
    "text": "those logs for some some things to help us out so for example I want to find a gdt read instruction from that det-cord",
    "start": "2341660",
    "end": "2348620"
  },
  {
    "text": "sure enough I can find a three one three which seems to read the global descriptor table register into the EBS register I need a kernel read primitive",
    "start": "2348620",
    "end": "2356150"
  },
  {
    "text": "I need some way to read kernel memory from that deeply embedded core sure enough I can find an instruction that does a d-- 4:07 read this single bite",
    "start": "2356150",
    "end": "2363590"
  },
  {
    "text": "out of kernel memory and into a processor register I need a kernel right privilege I can find out to e2 b7 does",
    "start": "2363590",
    "end": "2370700"
  },
  {
    "text": "exactly that it wrote the the low bit of ECX into a kernel memory buffer so this",
    "start": "2370700",
    "end": "2376460"
  },
  {
    "text": "is this is promising but sifting through these logs like this just doesn't scale very well I really wanted to be able to",
    "start": "2376460",
    "end": "2383030"
  },
  {
    "text": "write robust payload it's a lot of different things for this deeply embedded core so I needed some way to automate this approach that wouldn't",
    "start": "2383030",
    "end": "2389360"
  },
  {
    "text": "require me to manually go through 15 gigabytes of logs so I started looking for a way to reverse engineer this",
    "start": "2389360",
    "end": "2396410"
  },
  {
    "text": "deeply embedded instruction set and an automated fashion so my idea here was if we could extract instruction behavior",
    "start": "2396410",
    "end": "2402740"
  },
  {
    "text": "from the set of state disks I could start to identify bit patterns index they're in these risk instructions so I",
    "start": "2402740",
    "end": "2409550"
  },
  {
    "text": "built a tool for this that I called the collector and basically what that's going to do is it's going to help us automatically your verse engineer this",
    "start": "2409550",
    "end": "2415580"
  },
  {
    "text": "unknown instruction said so the clutter starts out by trying to look at state dips and identify basic patterns and",
    "start": "2415580",
    "end": "2422030"
  },
  {
    "text": "then so for example it'll look for words being copied around in the state if it'll look for immediate values being loaded into registers you know for one",
    "start": "2422030",
    "end": "2428690"
  },
  {
    "text": "register being transferred to another register to look for memory rights memory reads and increments decrements",
    "start": "2428690",
    "end": "2434020"
  },
  {
    "text": "shifts media loads and look for various arithmetic and bitwise instructions just",
    "start": "2434020",
    "end": "2439160"
  },
  {
    "text": "by looking at patterns in these state differential records so what we give you",
    "start": "2439160",
    "end": "2445100"
  },
  {
    "text": "is it will start classifying instructions based on the patterns that it observed so for example here it's",
    "start": "2445100",
    "end": "2450680"
  },
  {
    "text": "telling me well these are all the instructions that I found for you that transferred information from one register to another now the very first",
    "start": "2450680",
    "end": "2457600"
  },
  {
    "text": "thing the collector is going to do at this point after it generates this instruction then it's is it's going to try to resolve what do these individual",
    "start": "2457600",
    "end": "2464500"
  },
  {
    "text": "bits me in this instruction so through a through some manual analysis I was able to figure out for example that the eex",
    "start": "2464500",
    "end": "2471400"
  },
  {
    "text": "register is encoded by the bits 0 0 0 0 and the ECX register is encoded by the",
    "start": "2471400",
    "end": "2476830"
  },
  {
    "text": "bits 0 0 0 1 so the first thing that collector is going to do is it's going to check for each of these instructions",
    "start": "2476830",
    "end": "2482650"
  },
  {
    "text": "based on the register change that I'm observing can I find those bit patterns somewhere in this instruction so it'll",
    "start": "2482650",
    "end": "2490210"
  },
  {
    "text": "pull out patterns like this this is basically everywhere in this entire set of data that those individual registers",
    "start": "2490210",
    "end": "2496600"
  },
  {
    "text": "could have been encoded in their corresponding instructions and what you'll see is that there are patterns",
    "start": "2496600",
    "end": "2502330"
  },
  {
    "text": "here there's only one location and this is a set of register the set of",
    "start": "2502330",
    "end": "2507610"
  },
  {
    "text": "instructions where that pattern is it's consistent so the collector is able to infer well it has to be these two",
    "start": "2507610",
    "end": "2513880"
  },
  {
    "text": "columns encoding your your registers one column encoding the source one column encoding the destination and we can use",
    "start": "2513880",
    "end": "2520840"
  },
  {
    "text": "that same technique to pull out other bit patterns so for example here we're trying to resolve which what op codes",
    "start": "2520840",
    "end": "2526600"
  },
  {
    "text": "are being used to encode these different instructions and you'll see that it's not perfect ideally we would see all",
    "start": "2526600",
    "end": "2531700"
  },
  {
    "text": "these registers would say with all these instructions with exactly the same opcode pattern and that's not what we",
    "start": "2531700",
    "end": "2537460"
  },
  {
    "text": "see some of the later ones don't really follow the patterns that we saw on some of the earlier ones but that's okay the collector will deal with that it'll just",
    "start": "2537460",
    "end": "2543730"
  },
  {
    "text": "try to pick out the patterns that are the most probable or the most common it",
    "start": "2543730",
    "end": "2548830"
  },
  {
    "text": "will even do things like try to pick out don't care bits or bit set have some unusual statistical properties that",
    "start": "2548830",
    "end": "2554320"
  },
  {
    "text": "might indicate that they do something even though we don't know what they did and then it'll Jam all this information",
    "start": "2554320",
    "end": "2559660"
  },
  {
    "text": "together in order to automatically derive a bit encoding for that specific instruction so based on the beans that",
    "start": "2559660",
    "end": "2567070"
  },
  {
    "text": "the collector was finding he's a sort of being coatings that I came up with in the basic instructions I had to work with for the deeply embedded core I've",
    "start": "2567070",
    "end": "2573820"
  },
  {
    "text": "got instructions to load the global descriptor table I've got instructions to move data around load immediate",
    "start": "2573820",
    "end": "2579160"
  },
  {
    "text": "values read data out of memory write data to memory i've got all the basic primitives I need now in order to implement that payload",
    "start": "2579160",
    "end": "2585050"
  },
  {
    "text": "that I was trying to implement so so at this point I decided to go all out and I",
    "start": "2585050",
    "end": "2591890"
  },
  {
    "text": "wrote a complete assembler for this custom assembly language that they called the dice assembler which",
    "start": "2591890",
    "end": "2597080"
  },
  {
    "text": "basically means that I can write instructions and one of their primitive forms like this at a high level and then get it encoded into a binary format I",
    "start": "2597080",
    "end": "2603710"
  },
  {
    "text": "can then wrap each of those instructions in the x86 bridge instruction and send that instruction over to the wrist core",
    "start": "2603710",
    "end": "2609770"
  },
  {
    "text": "in order to execute that instruction so looking at our payload again in dice assembly it looks something like this we",
    "start": "2609770",
    "end": "2616520"
  },
  {
    "text": "grab the global descriptor table register we calculate an offset to that FS descriptor we use our ring for",
    "start": "2616520",
    "end": "2624890"
  },
  {
    "text": "Convention instructions in order to pull out the scripture descriptor directly out of kernel memory and parse its bit",
    "start": "2624890",
    "end": "2630560"
  },
  {
    "text": "patterns at that point we've got a pointer to the task struct so we'll pull up how apart that pointer in order to",
    "start": "2630560",
    "end": "2635630"
  },
  {
    "text": "get appointed to the cred struct will pull apart that pointer in order to start writing out the UID the G ID the",
    "start": "2635630",
    "end": "2641120"
  },
  {
    "text": "EU ID and the eg ID fields all in this custom deeply embedded instruction set",
    "start": "2641120",
    "end": "2646820"
  },
  {
    "text": "for that alternate core on the processor so collectively that looks something like this we actually build that into a",
    "start": "2646820",
    "end": "2652790"
  },
  {
    "text": "working payload we've got our introductory instructions that are going to be the the launch instruction to",
    "start": "2652790",
    "end": "2658190"
  },
  {
    "text": "activate the deeply embedded core and then we've got each of those assembled dice instructions wrapped and the bridge",
    "start": "2658190",
    "end": "2664490"
  },
  {
    "text": "instructions so that I can feed it over to that embedded core fine even we're done we launch a shell in order to try",
    "start": "2664490",
    "end": "2671570"
  },
  {
    "text": "to try to get our privilege escalation so one more time revisiting that demo from the beginning now now that we",
    "start": "2671570",
    "end": "2677060"
  },
  {
    "text": "understand how all the different pieces work we began by unlocking the backdoor by executing that secret x86 launch",
    "start": "2677060",
    "end": "2683750"
  },
  {
    "text": "instruction that was enabled by the god mode bid after we've executed the launch instruction the processor is ready to",
    "start": "2683750",
    "end": "2689360"
  },
  {
    "text": "start accepting RISC instructions but we're only if we get those instructions over to the risk core by wrapping the",
    "start": "2689360",
    "end": "2694910"
  },
  {
    "text": "instruction in the x86 bridge instructions so that bound EAX instruction is now how we can send these",
    "start": "2694910",
    "end": "2701120"
  },
  {
    "text": "individual risk instructions over to that deeply embedded core in order to get it to execute exactly what we want",
    "start": "2701120",
    "end": "2707240"
  },
  {
    "text": "in order to make it circumvent the processor security checks that we're trying to get around finally we'll execute a shell in order to view our",
    "start": "2707240",
    "end": "2715820"
  },
  {
    "text": "results so once again we simply compile this program and check who we are we're still a",
    "start": "2715820",
    "end": "2721740"
  },
  {
    "text": "regular user will relaunch this program and see that we've become route so I'm",
    "start": "2721740",
    "end": "2727920"
  },
  {
    "text": "only gonna have seriously throw this out but this is sort of like a ring - floor on the processor so marine - 3 was a",
    "start": "2727920",
    "end": "2734730"
  },
  {
    "text": "core that was completely separate from the x86 processor this is a little bit",
    "start": "2734730",
    "end": "2740069"
  },
  {
    "text": "more deeply embedded it's sort of a secret kool-aid located core alongside the x86 core unlike green - 3 it has",
    "start": "2740069",
    "end": "2746609"
  },
  {
    "text": "unrestricted access to the x86 cores register file it's got shared execution pipeline with",
    "start": "2746609",
    "end": "2752819"
  },
  {
    "text": "the x86 core which in many ways makes this more powerful than ring - 3 was but at the same time the whole thing's",
    "start": "2752819",
    "end": "2759150"
  },
  {
    "text": "nebulous this deep and the whole ring model has sort of completely shattered by this point but it is sort of an",
    "start": "2759150",
    "end": "2764220"
  },
  {
    "text": "interesting thing to think about so that leaves us with this this is direct ring",
    "start": "2764220",
    "end": "2769650"
  },
  {
    "text": "3 - ring 0 hardware privilege escalation on x86 this has never been done that",
    "start": "2769650",
    "end": "2776400"
  },
  {
    "text": "every other every other can't at this kind of thing has used operating system code or other program code in order to",
    "start": "2776400",
    "end": "2782599"
  },
  {
    "text": "exploit some flaw this is purely a hardware circumvention mechanism for the",
    "start": "2782599",
    "end": "2787980"
  },
  {
    "text": "fundamental ring privilege model behind all of our processors fortunately it shouldn't be that big of a deal we",
    "start": "2787980",
    "end": "2794520"
  },
  {
    "text": "slowly ring zero access in order to get this whole thing kicked off the whole rest of the pipeline can be done in ring",
    "start": "2794520",
    "end": "2800190"
  },
  {
    "text": "3 but the first change that that toggling the god mode bit had to be done",
    "start": "2800190",
    "end": "2805950"
  },
  {
    "text": "with ring 0 access at least that's the theory as I started poking around some",
    "start": "2805950",
    "end": "2811290"
  },
  {
    "text": "of these other systems I had in my stockpile that turned out to not be the case so what we're looking at here is",
    "start": "2811290",
    "end": "2817410"
  },
  {
    "text": "another via C 3 plus so this is a Samuel 2 core I've just booted up the system",
    "start": "2817410",
    "end": "2822420"
  },
  {
    "text": "from scratch nothing else has been modified nothing else been touched on it we're under login as an unprivileged",
    "start": "2822420",
    "end": "2828089"
  },
  {
    "text": "user I could have dumped all this over cereal I didn't have the right setup for that but after we login to the system",
    "start": "2828089",
    "end": "2835970"
  },
  {
    "text": "and what we're going to do is install the MSR kernel module in order to gain",
    "start": "2836420",
    "end": "2844260"
  },
  {
    "text": "access to the NSR we're not going to modify them but na I'm going to read them out I don't have the read em it's our tool on this so I'm just going to",
    "start": "2844260",
    "end": "2850470"
  },
  {
    "text": "hex dump out a specific MSR bit so I'm looking at the global configuration register on this",
    "start": "2850470",
    "end": "2855670"
  },
  {
    "text": "processor and when I do that you'll see the low byte the global configuration register is d7 that is 1 1 0 1 0 1 1 1",
    "start": "2855670",
    "end": "2863320"
  },
  {
    "text": "the low bit of this register is the god mode bid that means the God would bit is active by default on a freshly booted",
    "start": "2863320",
    "end": "2869830"
  },
  {
    "text": "Samuel 2 core that means that any unprivileged code on this system could have access to Colonel at any time which",
    "start": "2869830",
    "end": "2877960"
  },
  {
    "text": "which is a scary prospect and when you sort of blow away the x86 ring",
    "start": "2877960",
    "end": "2883870"
  },
  {
    "text": "protection model entirely all of our other protections fall apart antivirus does nothing now ASLR depth",
    "start": "2883870",
    "end": "2891460"
  },
  {
    "text": "they're easily circumvented when you can just directly reach into ring 0 code-signing control flow integrity",
    "start": "2891460",
    "end": "2896470"
  },
  {
    "text": "kernel integrity checks don't do anything when there's no more separation between the rings so so it's a scary",
    "start": "2896470",
    "end": "2903340"
  },
  {
    "text": "prospect but there are mitigations so one approach would be to update the microcode to lock down the god mode bit",
    "start": "2903340",
    "end": "2908860"
  },
  {
    "text": "or we can update micro code to disable the bridge instructions so that we couldn't feed instructions to the deeply",
    "start": "2908860",
    "end": "2914350"
  },
  {
    "text": "embedded core alternatively we can update the OS and firmware to disable that god mode bit and just periodically",
    "start": "2914350",
    "end": "2920110"
  },
  {
    "text": "check its status to make sure it hasn't been enabled but at the end of the day this is an older processor it's not in",
    "start": "2920110",
    "end": "2925360"
  },
  {
    "text": "widespread use and I don't mean to throw me under the bus I think this was a good idea that just had a flaw on its",
    "start": "2925360",
    "end": "2930670"
  },
  {
    "text": "implementation their target market was embedded and this was probably a useful feature for their customers so instead",
    "start": "2930670",
    "end": "2937390"
  },
  {
    "text": "we should take this as a case study backdoors do exist in hardware but we",
    "start": "2937390",
    "end": "2944530"
  },
  {
    "text": "can find them with the right techniques so looking forward I do think this is a",
    "start": "2944530",
    "end": "2949960"
  },
  {
    "text": "big deal this isn't just a c3 problem this isn't just an x86 problem this is an overall flaw or an overall problem in",
    "start": "2949960",
    "end": "2957010"
  },
  {
    "text": "all of computer engineering where these black boxes that were trusting for all of our computation we have no way to",
    "start": "2957010",
    "end": "2963280"
  },
  {
    "text": "introspect them so whether or not these Hardware backdoors exist anywhere else this is a problem that's going to",
    "start": "2963280",
    "end": "2970240"
  },
  {
    "text": "continue to haunt us until we have a way to look into these black boxes so I think that's the big takeaway here is",
    "start": "2970240",
    "end": "2976180"
  },
  {
    "text": "whenever we find something secretive or off-limits we have security researchers need to push deeper because that's how",
    "start": "2976180",
    "end": "2981730"
  },
  {
    "text": "we establish trust that's how cybersecurity should work so along those",
    "start": "2981730",
    "end": "2987990"
  },
  {
    "text": "lines I've open sourced all this information all the tools techniques code and data from this are available online now you can scan anything scan",
    "start": "2987990",
    "end": "2995100"
  },
  {
    "text": "everything and I really really hope people will build off of this for future research and know let's dive deeper and",
    "start": "2995100",
    "end": "3000590"
  },
  {
    "text": "deeper into into processor security I do",
    "start": "3000590",
    "end": "3005870"
  },
  {
    "text": "want to quickly pitch a side project project nightshift I'll talk more about this in a few days but it turns out that you can use that side channel attack",
    "start": "3005870",
    "end": "3013190"
  },
  {
    "text": "that I demonstrated in order to reveal password-protected registers in some x86 processors so I'll be demonstrating that",
    "start": "3013190",
    "end": "3019610"
  },
  {
    "text": "at Def Con if you're around but beyond that you can find all this work right now on my github that's github comics or",
    "start": "3019610",
    "end": "3027050"
  },
  {
    "text": "Exe ax EAX that's project Rosen bridge is this specific project you can also",
    "start": "3027050",
    "end": "3033980"
  },
  {
    "text": "find the scenes if you're fuzzer there the mops cater single instructions C compilers there some other fun stuff",
    "start": "3033980",
    "end": "3039680"
  },
  {
    "text": "I've done over the years is all there if you have any feedback or ideas on this I would absolutely love to hear it I'm",
    "start": "3039680",
    "end": "3045650"
  },
  {
    "text": "totally out of time now but you can grab me after the talk you can shoot me an email or a contact me on Twitter at X or",
    "start": "3045650",
    "end": "3052100"
  },
  {
    "text": "Y ax e ax ax or same thing at gmail.com so thank you everybody for attending and",
    "start": "3052100",
    "end": "3057230"
  },
  {
    "text": "that's all I got",
    "start": "3057230",
    "end": "3059890"
  }
]