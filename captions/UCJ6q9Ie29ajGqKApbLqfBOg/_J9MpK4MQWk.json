[
  {
    "start": "0",
    "end": "104000"
  },
  {
    "text": "today we are going to be speaking about wrangling with a ghost which is essentially a inside story about how",
    "start": "30",
    "end": "5609"
  },
  {
    "text": "spectral meltdown was mitigated within Microsoft yesterday there was a panel",
    "start": "5609",
    "end": "11370"
  },
  {
    "text": "about the industry cooperation and mitigating specter meltdown which was",
    "start": "11370",
    "end": "18660"
  },
  {
    "text": "really interesting also today there is a talk in the last slot about meltdown if",
    "start": "18660",
    "end": "26250"
  },
  {
    "text": "you're interested in technical details on meltdown that is probably the better talk to go to because we're going to",
    "start": "26250",
    "end": "32668"
  },
  {
    "text": "talk mostly about mitigation we're going to skip relatively quickly over the attacks that also makes our talk kind of",
    "start": "32669",
    "end": "40079"
  },
  {
    "text": "orthogonal to the two other spectrum of down talks that have been yet on the past so spectrum meltdown one two ponies",
    "start": "40079",
    "end": "48059"
  },
  {
    "text": "yesterday so we kind of think that it's a relevant talk so without further ado",
    "start": "48059",
    "end": "54149"
  },
  {
    "text": "my name is Anna's I am a security researcher and I should mention here that I did this research while I was",
    "start": "54149",
    "end": "61620"
  },
  {
    "text": "employed by gee data and bounced analytics and while under contract with Microsoft the presentation here does not",
    "start": "61620",
    "end": "68430"
  },
  {
    "text": "reflect the views of my previous nor my current employer and I'm Christopher so",
    "start": "68430",
    "end": "76110"
  },
  {
    "text": "I'm a security engineer and the nsrc in the UK office alright so Spector and meltdown these",
    "start": "76110",
    "end": "83880"
  },
  {
    "text": "issues gained a huge amount of interest from the research community when they were first disclosed earlier this year",
    "start": "83880",
    "end": "89310"
  },
  {
    "text": "because they represent a fundamentally new class of Hardware vulnerability which is an extremely rare occurrence",
    "start": "89310",
    "end": "94860"
  },
  {
    "text": "and the scope of the impact is just massive potentially leaking information",
    "start": "94860",
    "end": "99990"
  },
  {
    "text": "across nearly every security boundary that we rely on so when we were first",
    "start": "99990",
    "end": "106049"
  },
  {
    "start": "104000",
    "end": "104000"
  },
  {
    "text": "made aware of these issues in June last year we kicked off our Incident Response process and this is the typical process",
    "start": "106049",
    "end": "113250"
  },
  {
    "text": "that Microsoft follows whenever we're made aware of a security vulnerability either being actively exploited in the",
    "start": "113250",
    "end": "119070"
  },
  {
    "text": "wild or just a high threat risk that requires mobilizing a large number of people within Microsoft in particular",
    "start": "119070",
    "end": "126420"
  },
  {
    "text": "perspective we realized we were dealing with a fundamentally new class of vulnerability and we decided to bring in an expert anders",
    "start": "126420",
    "end": "135640"
  },
  {
    "start": "135000",
    "end": "135000"
  },
  {
    "text": "so once again why do why does Microsoft care about these issues because they were relevant to nearly every security",
    "start": "135880",
    "end": "142610"
  },
  {
    "text": "boundary we rely on so if an attacker has some kind of code execution even",
    "start": "142610",
    "end": "149240"
  },
  {
    "text": "within a scripting environment such as JavaScript they might potentially be able to leak information across a security boundary",
    "start": "149240",
    "end": "155650"
  },
  {
    "text": "so this affects potentially hyper-v Windows kernel and the browser so before",
    "start": "155650",
    "end": "165350"
  },
  {
    "text": "one can actually start mitigating a new class of vulnerabilities one has to think about what are these",
    "start": "165350",
    "end": "171680"
  },
  {
    "text": "vulnerabilities especially when it's a new class and what we did was we made a",
    "start": "171680",
    "end": "177130"
  },
  {
    "text": "made a taxonomy and a framework to reason about not only the attacks but",
    "start": "177130",
    "end": "182360"
  },
  {
    "text": "also how the mitigation could look like and this is going to be the topic of this section of the talk but before we",
    "start": "182360",
    "end": "189860"
  },
  {
    "start": "189000",
    "end": "189000"
  },
  {
    "text": "can get that far we need to talk a little bit about how modern CPUs actually work just for context so",
    "start": "189860",
    "end": "195910"
  },
  {
    "text": "usually we think of programs as recipes that execute one instruction after the",
    "start": "195910",
    "end": "202250"
  },
  {
    "text": "other sequentially and in fact this is how programmers usually try to write their programs turns out that if the CPU",
    "start": "202250",
    "end": "209510"
  },
  {
    "text": "interpreted the program in that same way it would be rather slow so modern CPUs",
    "start": "209510",
    "end": "216230"
  },
  {
    "text": "especially the high the high performance general CPUs do many things at the same",
    "start": "216230",
    "end": "224180"
  },
  {
    "text": "time and this takes a couple of different in a couple of different ways",
    "start": "224180",
    "end": "229670"
  },
  {
    "text": "the first way is pipelining pipelining means that when it takes an instruction in it works on this instruction doing",
    "start": "229670",
    "end": "236450"
  },
  {
    "text": "bits and parts of it through multiple stages but simply lot essentially like an assembly line the second thing is",
    "start": "236450",
    "end": "244070"
  },
  {
    "text": "monitor views are superscalar that means nothing more that it they are capable of working out and march on more",
    "start": "244070",
    "end": "250600"
  },
  {
    "text": "instructions num1 at the same time and we'll take a look about how that works in a second",
    "start": "250600",
    "end": "256879"
  },
  {
    "text": "then we have out of order execution so out of order execution means that the",
    "start": "256879",
    "end": "262590"
  },
  {
    "text": "instructions are no longer treated like a recipe they are actually executed when the dependencies resolved and when",
    "start": "262590",
    "end": "269879"
  },
  {
    "text": "resources are available so this makes it possible to execute things out of order and this again is a speed-up to my",
    "start": "269879",
    "end": "276449"
  },
  {
    "text": "session finally we're going to talk about speculative execution as well and",
    "start": "276449",
    "end": "283219"
  },
  {
    "text": "speculative execution is essentially when the pipeline is working on data that is predicted instead of actually",
    "start": "283219",
    "end": "290099"
  },
  {
    "text": "calculated we'll also be talking a lot about that so here you see a very small",
    "start": "290099",
    "end": "296009"
  },
  {
    "text": "assembler program that consists of two more instructions and an instruction the first and the third instruction here",
    "start": "296009",
    "end": "304050"
  },
  {
    "text": "don't have any dependencies which means that if we want to start to run this program on a CPU these both instructions",
    "start": "304050",
    "end": "312180"
  },
  {
    "text": "are ready to start running at any time whereas the middle instruction depends on the result from the first which means",
    "start": "312180",
    "end": "318539"
  },
  {
    "text": "that this is not ready it has to wait for the first instruction so when we actually start executing this program on",
    "start": "318539",
    "end": "324690"
  },
  {
    "text": "I wanting to CPU will have that the first and the third instruction will",
    "start": "324690",
    "end": "330029"
  },
  {
    "start": "330000",
    "end": "330000"
  },
  {
    "text": "start executing this is both superscalar because we were executing two instructions at once and it is also out",
    "start": "330029",
    "end": "337259"
  },
  {
    "text": "of order because the third instruction shouldn't execute and rip recipe order",
    "start": "337259",
    "end": "342270"
  },
  {
    "text": "until the second instruction action was done the advantage of doing it this way is that since we're executing two extra",
    "start": "342270",
    "end": "348330"
  },
  {
    "text": "instruction at once this program will take the time of one more than one ad",
    "start": "348330",
    "end": "353460"
  },
  {
    "text": "whereas if we were executing in a program order recipe order it would be the time of two miles in one ad which is",
    "start": "353460",
    "end": "359819"
  },
  {
    "text": "for cost a lot more so about speculation",
    "start": "359819",
    "end": "366330"
  },
  {
    "start": "364000",
    "end": "364000"
  },
  {
    "text": "when we went into this we made a very general spec definition of what speculation is more general than you",
    "start": "366330",
    "end": "374009"
  },
  {
    "text": "normally find in textbooks so our definition of speculative execution was that it's speculative whenever the",
    "start": "374009",
    "end": "381240"
  },
  {
    "text": "pipeline is working with data that may turn out to be wrong that is predicted",
    "start": "381240",
    "end": "386550"
  },
  {
    "text": "in some kind of way so why does CPU predict data well",
    "start": "386550",
    "end": "391760"
  },
  {
    "text": "typically it's because real data arrives late they're calculated later in the process and that it can be predicted",
    "start": "391760",
    "end": "398780"
  },
  {
    "text": "very well so if you get this situation instead of waiting for the data you can predict it if you predict it correctly",
    "start": "398780",
    "end": "405470"
  },
  {
    "text": "you win if you predict it wrongly you unroll so speculative execution consists",
    "start": "405470",
    "end": "414260"
  },
  {
    "text": "of many kind of things you can speculate on say conditional conditional live jig",
    "start": "414260",
    "end": "421070"
  },
  {
    "text": "you can speculate on the instruction pointer where that has to go you can speculate on the values of registers you",
    "start": "421070",
    "end": "427220"
  },
  {
    "text": "can defer error handling things like this so when this prediction is actually",
    "start": "427220",
    "end": "433220"
  },
  {
    "text": "unrolled all the results that are that comes from working with the mispredicted",
    "start": "433220",
    "end": "440120"
  },
  {
    "text": "data are just dropped just completely removed from the CPU and this includes",
    "start": "440120",
    "end": "445280"
  },
  {
    "text": "registers memory operations things like that and when these things are then",
    "start": "445280",
    "end": "451880"
  },
  {
    "text": "dropped execution will pick up where the prediction was made because now we have the right data however there is this",
    "start": "451880",
    "end": "460190"
  },
  {
    "text": "tiny snack here not everything is rolled back and an example of what's not rolled",
    "start": "460190",
    "end": "466250"
  },
  {
    "text": "back when speculative execution is unrolled is the caches so speculative",
    "start": "466250",
    "end": "472310"
  },
  {
    "text": "execution can actually load a cache and will not unload it afterwards so we need",
    "start": "472310",
    "end": "477830"
  },
  {
    "text": "to talk a bit about memory uses and caches so it turns out that main memory",
    "start": "477830",
    "end": "483110"
  },
  {
    "text": "that is DRAM modules reading data from those are really really slow compared to how fast a modern CPU actually is and",
    "start": "483110",
    "end": "491170"
  },
  {
    "text": "one should also notice here that memory access patents are not random this they",
    "start": "491170",
    "end": "497180"
  },
  {
    "text": "can in terms of rejected in some way and the way that this works is that usually",
    "start": "497180",
    "end": "502910"
  },
  {
    "text": "CPUs tend to use the same memory again and again and there's a solution for CPU",
    "start": "502910",
    "end": "509600"
  },
  {
    "text": "designers to this to make this faster and this is to make a very small cache inside of the CPU not in MIT just part",
    "start": "509600",
    "end": "515150"
  },
  {
    "text": "of main memory but inside the CPU and keep the most recent memory access in there",
    "start": "515150",
    "end": "520710"
  },
  {
    "text": "serve memory requests from this cache if possible and this of course makes it a lot faster so this also entails the site",
    "start": "520710",
    "end": "530940"
  },
  {
    "text": "channel so that an attacker can time how fast a memory accesses and if it's fast",
    "start": "530940",
    "end": "537510"
  },
  {
    "text": "well it was recently used and this of course means that he is able to tell",
    "start": "537510",
    "end": "542550"
  },
  {
    "text": "something about memory access pattern made by whoever executed before him",
    "start": "542550",
    "end": "548580"
  },
  {
    "text": "which again means he's able to tell something about that and we're gonna see this a lot going through this",
    "start": "548580",
    "end": "555060"
  },
  {
    "text": "presentation so the fundamental idea about spectral meltdown is that when the",
    "start": "555060",
    "end": "561360"
  },
  {
    "start": "558000",
    "end": "558000"
  },
  {
    "text": "CPU unroll speculative execution it doesn't unroll everything the cache",
    "start": "561360",
    "end": "566490"
  },
  {
    "text": "is the example here and that through",
    "start": "566490",
    "end": "571650"
  },
  {
    "text": "this side channel we were capable of recovering information that was used",
    "start": "571650",
    "end": "577440"
  },
  {
    "text": "during the speculate execution and the results here can then be recovered",
    "start": "577440",
    "end": "582720"
  },
  {
    "text": "through the side channel and in some cases these results contain private data and we have leakage of private data",
    "start": "582720",
    "end": "589410"
  },
  {
    "text": "between security domains so moving on to spectral variant one so spectral Rayyan",
    "start": "589410",
    "end": "596400"
  },
  {
    "start": "592000",
    "end": "592000"
  },
  {
    "text": "one works with prediction of conditional branches so the thing about a conditional branch is that you don't",
    "start": "596400",
    "end": "603600"
  },
  {
    "text": "know where it goes until it's been executed however we want the pipeline to be full to have it full of instructions",
    "start": "603600",
    "end": "610290"
  },
  {
    "text": "to work on from the out of order execution engine for this reason the CPU",
    "start": "610290",
    "end": "617670"
  },
  {
    "text": "predicts the conditional branches because it can do that right up the top at the pipeline and keep on filling the",
    "start": "617670",
    "end": "622830"
  },
  {
    "text": "rest of the pipeline so we have this delay here that I was talking about",
    "start": "622830",
    "end": "628050"
  },
  {
    "text": "before this actually works quite well",
    "start": "628050",
    "end": "633180"
  },
  {
    "text": "modern CPUs are capable of predicting conditional branches above 99% of the",
    "start": "633180",
    "end": "639000"
  },
  {
    "text": "times correctly however we said before that conditional branches are predicted",
    "start": "639000",
    "end": "645570"
  },
  {
    "text": "on past history of the CPU and this is a problem because if it's an attacker is",
    "start": "645570",
    "end": "651390"
  },
  {
    "text": "running on the CPU he actually determined past behavior and he determines how these things will predict be predicted",
    "start": "651390",
    "end": "657869"
  },
  {
    "text": "and this allows the attacker to determine the prediction and if we look",
    "start": "657869",
    "end": "663839"
  },
  {
    "text": "at the code but below the blue thing we'll see what essentially will be a",
    "start": "663839",
    "end": "670139"
  },
  {
    "text": "conditional branch and we have an untrusted index in here so if the",
    "start": "670139",
    "end": "675569"
  },
  {
    "text": "prediction is wrong or no matter what the predictor no matter what the value of the",
    "start": "675569",
    "end": "681959"
  },
  {
    "text": "untrusted index with the wrong prediction the the code below the if",
    "start": "681959",
    "end": "687029"
  },
  {
    "text": "statement can execute speculatively so this means that the second line of the",
    "start": "687029",
    "end": "694799"
  },
  {
    "text": "code is capable of accessing in in a buffer indexed on our untrusted index",
    "start": "694799",
    "end": "702179"
  },
  {
    "text": "and this untrusted index can take any value meaning that we essentially have arbitrary load of memory into the CPU",
    "start": "702179",
    "end": "710459"
  },
  {
    "text": "this is enough in and of itself not a big problem the problem comes with a search statement and the search",
    "start": "710459",
    "end": "717209"
  },
  {
    "text": "statement is essentially loading into the cache some address depending on the",
    "start": "717209",
    "end": "724649"
  },
  {
    "text": "value that we read from arbitrary memory so we take the cache in a way that",
    "start": "724649",
    "end": "731639"
  },
  {
    "text": "discloses what the value of the memory the arbitrary memory that we read in the",
    "start": "731639",
    "end": "737459"
  },
  {
    "text": "previous statement in other words we're capable of reading arbitrary memory using the side channel timing attack we",
    "start": "737459",
    "end": "743999"
  },
  {
    "text": "described on under the caches so if you're wondering what that 40 in that statement is it's because caches don't",
    "start": "743999",
    "end": "750959"
  },
  {
    "text": "really work on bytes they works on blocks of 64 bytes and 40 hexes 64 bytes",
    "start": "750959",
    "end": "756679"
  },
  {
    "text": "and to be able to distinguish between all different values you need to",
    "start": "756679",
    "end": "762689"
  },
  {
    "text": "multiply by that the consequence of having this code somewhere in your computer is that if an attacker can",
    "start": "762689",
    "end": "769980"
  },
  {
    "text": "execute this code can find execute or",
    "start": "769980",
    "end": "775139"
  },
  {
    "text": "generate and execute this code he'll be able to read memory at the privileged",
    "start": "775139",
    "end": "780869"
  },
  {
    "text": "count the privilege level where they found this code so if this is a kernel",
    "start": "780869",
    "end": "785970"
  },
  {
    "text": "or the hypervisor or in clave doesn't matter he's capable of reading the memory with a high privilege",
    "start": "785970",
    "end": "792390"
  },
  {
    "text": "this is a clear violation of basic security principles so moving on to",
    "start": "792390",
    "end": "798990"
  },
  {
    "text": "respect to variant two this time around if not conditional branches is indirect",
    "start": "798990",
    "end": "804180"
  },
  {
    "start": "799000",
    "end": "799000"
  },
  {
    "text": "branches and in our back branches is not predicted whether they are taken or not taken because they're always taken",
    "start": "804180",
    "end": "810360"
  },
  {
    "text": "they are predicted where they are going to go so like before indirect branches",
    "start": "810360",
    "end": "816570"
  },
  {
    "text": "can be trained but there is a special thing about indirect branches that it's not just a single bit that has to be",
    "start": "816570",
    "end": "822060"
  },
  {
    "text": "predicted it's an entire address and for this reason the CPU keeps a table where",
    "start": "822060",
    "end": "828930"
  },
  {
    "text": "any indirect branch past behavior is stored this is called the branch target buffer of btp and because you can't have",
    "start": "828930",
    "end": "836340"
  },
  {
    "text": "a table for every possible indirect jump it actually is indexed with just a",
    "start": "836340",
    "end": "842610"
  },
  {
    "text": "subset of the bit of the address of the indirect jump this means that if an address if an attacker knows which bit",
    "start": "842610",
    "end": "849180"
  },
  {
    "text": "this is and this can be reverse engineered and has been reversed engineered he can just allocate a piece",
    "start": "849180",
    "end": "855210"
  },
  {
    "text": "of memory put an indirect branch in a location that collides with this and",
    "start": "855210",
    "end": "860370"
  },
  {
    "text": "then he could start training his indirect branch to go wherever he likes meaning that an attacker is capable of",
    "start": "860370",
    "end": "867480"
  },
  {
    "text": "picking code in the security domain where he found the indirect branch",
    "start": "867480",
    "end": "874790"
  },
  {
    "text": "essentially anywhere so I try to illustrate this here with the read 5,000 rx equals that it should go to 5,000 put",
    "start": "874790",
    "end": "882660"
  },
  {
    "text": "speculatively it can go anywhere and an attacker can make it go to 4141 if he likes the assembler code in the lower",
    "start": "882660",
    "end": "889260"
  },
  {
    "text": "part of the slide this is same as the C code and the previous slide it just reads memory and persists into the cache",
    "start": "889260",
    "end": "897230"
  },
  {
    "text": "so this makes the attack a lot worse from from a defender perspective because now we don't need to have a long blog",
    "start": "897230",
    "end": "905960"
  },
  {
    "text": "consistent code we can actually just have a in Eric branch and and the rest of the code that an attacker needs",
    "start": "905960",
    "end": "911339"
  },
  {
    "text": "somewhere which is of course much more flexible again the consequences of this",
    "start": "911339",
    "end": "917850"
  },
  {
    "text": "is an attacker is capable of reading they shouldn't be able to memory to read",
    "start": "917850",
    "end": "923189"
  },
  {
    "text": "that is in the security domain where he finds these two things which leads us on",
    "start": "923189",
    "end": "930809"
  },
  {
    "text": "to the third variant the third variant is also known as meltdown and it is",
    "start": "930809",
    "end": "937019"
  },
  {
    "start": "933000",
    "end": "933000"
  },
  {
    "text": "fundamentally different from spectra in that perspective you need to find to create this code you could bring it with",
    "start": "937019",
    "end": "943350"
  },
  {
    "text": "you an attacker can write all the code that is needed for this attack so this is the first major difference",
    "start": "943350",
    "end": "949230"
  },
  {
    "text": "the second major difference is that this is not about branches so what happens",
    "start": "949230",
    "end": "954540"
  },
  {
    "text": "here is that when a user tries to access kernel memory the colonel says no you're",
    "start": "954540",
    "end": "960749"
  },
  {
    "text": "not allowed to do this it's both an exception and stop program execution which is great because then you can't",
    "start": "960749",
    "end": "967199"
  },
  {
    "text": "read kernel memory except what happens in some CPUs is that when you try to read kernel memory the CPU speculates oh",
    "start": "967199",
    "end": "974879"
  },
  {
    "text": "he's just reading from memory I should give it to him and at some point a little later it will discover oh there",
    "start": "974879",
    "end": "981029"
  },
  {
    "text": "should be an exception and this gives an attacker a window to do the exact same",
    "start": "981029",
    "end": "986040"
  },
  {
    "text": "trick as before persist the memory into the cache and side-channel it out afterwards and this leads to the",
    "start": "986040",
    "end": "993779"
  },
  {
    "text": "situation where an unprivileged user is capable of reading arbitrary kernel mode",
    "start": "993779",
    "end": "999029"
  },
  {
    "text": "memory and that again is a clear violation of standard operating system",
    "start": "999029",
    "end": "1004309"
  },
  {
    "text": "security so now that we have seen the three variant that we were presented",
    "start": "1004309",
    "end": "1010459"
  },
  {
    "start": "1008000",
    "end": "1008000"
  },
  {
    "text": "with in June last year we go on to building economy about that the first",
    "start": "1010459",
    "end": "1016189"
  },
  {
    "text": "question we need to raise this why do we want to create a taxonomy the thing is when you design medications especially",
    "start": "1016189",
    "end": "1023770"
  },
  {
    "text": "mitigations which relies who comes with a new class of vulnerabilities you want",
    "start": "1023770",
    "end": "1031220"
  },
  {
    "text": "to be systematic about it you don't want to mitigate the three examples that we were sent from Google project zero you",
    "start": "1031220",
    "end": "1038270"
  },
  {
    "text": "want to mitigate every possible variation of these and to do this you",
    "start": "1038270",
    "end": "1043970"
  },
  {
    "text": "need a taxonomy to reason about how this thing actually works when does it break",
    "start": "1043970",
    "end": "1049190"
  },
  {
    "text": "down when doesn't it break down so we went on to work on a taxonomy and what we noticed",
    "start": "1049190",
    "end": "1055940"
  },
  {
    "text": "was that there are four steps that are required for an attacker to run a speculative execution attack the first",
    "start": "1055940",
    "end": "1064270"
  },
  {
    "text": "thing that an attacker needs to do he needs to get wrong data into the",
    "start": "1064270",
    "end": "1070460"
  },
  {
    "text": "pipeline and we call that call the process gaining speculation and we call",
    "start": "1070460",
    "end": "1078410"
  },
  {
    "text": "the primitive the code that actually does this that for specter of you will need to find from milp and he'll need to write we call this a speculation",
    "start": "1078410",
    "end": "1085220"
  },
  {
    "text": "primitive and this essentially gets wrong data into the pipeline the second",
    "start": "1085220",
    "end": "1090380"
  },
  {
    "text": "thing that an attacker needs to make sure is that once he is in speculation",
    "start": "1090380",
    "end": "1096790"
  },
  {
    "text": "the CPU will try to rectify this as soon as possible and he wants to delay that so that he",
    "start": "1096790",
    "end": "1102830"
  },
  {
    "text": "can run the code that persists persist the secret data into the cache of some",
    "start": "1102830",
    "end": "1108440"
  },
  {
    "text": "work somewhere else to make sure that he can read it out later so there's a race",
    "start": "1108440",
    "end": "1113690"
  },
  {
    "text": "condition here and he needs to make sure he can win that and we talked about a window for speculative execution and",
    "start": "1113690",
    "end": "1119240"
  },
  {
    "text": "hence we're talking about Windows gadgets and the third step he needs to",
    "start": "1119240",
    "end": "1124430"
  },
  {
    "text": "do is he actually needs to write the secret in to a side channel where he can",
    "start": "1124430",
    "end": "1130490"
  },
  {
    "text": "read it later we call this this disclosure tachat and finally he needs",
    "start": "1130490",
    "end": "1136220"
  },
  {
    "text": "to get the information back from the cache or wherever he stored it in whatever side channel he used and we",
    "start": "1136220",
    "end": "1141950"
  },
  {
    "text": "call this the disclosure primitive this is where he gets the data back so he's able to work with it and disclose it or",
    "start": "1141950",
    "end": "1147800"
  },
  {
    "text": "do whatever evil he wants to do with it oh sorry so it should be fairly obvious",
    "start": "1147800",
    "end": "1157190"
  },
  {
    "text": "that if any of these steps breaks there is no speculative attack and when you",
    "start": "1157190",
    "end": "1163100"
  },
  {
    "text": "think of it like this this is very important information for somebody who wants to mitigate this stuff I'm taking",
    "start": "1163100",
    "end": "1169790"
  },
  {
    "text": "a closer look at some of these things so gaining speculation the speculation primitive essentially we have three",
    "start": "1169790",
    "end": "1175970"
  },
  {
    "start": "1173000",
    "end": "1173000"
  },
  {
    "text": "versions or we have three versions of it we have misprediction on conditional branches we have misprediction on",
    "start": "1175970",
    "end": "1183050"
  },
  {
    "text": "indirect branches both of which could be trained the in break branches a bit more sophisticated",
    "start": "1183050",
    "end": "1189260"
  },
  {
    "text": "there allows an attacker more possibilities and finally we have the meltdown version where we have an",
    "start": "1189260",
    "end": "1194810"
  },
  {
    "text": "interrupt that is delivered after it should be and allows execution to be",
    "start": "1194810",
    "end": "1200660"
  },
  {
    "text": "continued with data that a that shouldn't be present in the pipeline so",
    "start": "1200660",
    "end": "1208430"
  },
  {
    "start": "1208000",
    "end": "1208000"
  },
  {
    "text": "the second is window gadgets maintaining speculation so the thing here is that once we an attacker executes the",
    "start": "1208430",
    "end": "1215380"
  },
  {
    "text": "speculation gadget he is on a race condition against the CPU finding out",
    "start": "1215380",
    "end": "1220400"
  },
  {
    "text": "that it was working on predicted data mispredicted data and to win this race",
    "start": "1220400",
    "end": "1228530"
  },
  {
    "text": "condition he needs to have some code that gives him time and he also needs to",
    "start": "1228530",
    "end": "1234680"
  },
  {
    "text": "make sure that the code he actually wants to execute can execute out of order so there are some limits about how",
    "start": "1234680",
    "end": "1242060"
  },
  {
    "text": "the code that generates the windows has to look and window gadgets can occur",
    "start": "1242060",
    "end": "1249380"
  },
  {
    "text": "naturally that is kind of the entire point why the CPU is able to do out of order execution but in some",
    "start": "1249380",
    "end": "1255740"
  },
  {
    "text": "circumstances there are some ways that an attacker can actually engineer having",
    "start": "1255740",
    "end": "1261380"
  },
  {
    "text": "good window gadgets and the actual",
    "start": "1261380",
    "end": "1266810"
  },
  {
    "text": "window size is very difficult to reason about because it derived from a lot of",
    "start": "1266810",
    "end": "1272600"
  },
  {
    "text": "things the first is the actual hardware on which was running the second is how",
    "start": "1272600",
    "end": "1278720"
  },
  {
    "text": "the dependencies that the code looks like and the third is what other congestion are happening on the CPU at",
    "start": "1278720",
    "end": "1285620"
  },
  {
    "text": "the time that is running so it's kind of difficult but you can in big terms reason about what kind of windows you're",
    "start": "1285620",
    "end": "1292820"
  },
  {
    "text": "looking at the third will catch it that",
    "start": "1292820",
    "end": "1298310"
  },
  {
    "text": "we need is the disclosure gadget and the disclosure gadget is centrally just",
    "start": "1298310",
    "end": "1303410"
  },
  {
    "text": "writing into a side channel and the example here is the cache that we have",
    "start": "1303410",
    "end": "1308540"
  },
  {
    "text": "before and it needs to run within the speculative window and the fourth and",
    "start": "1308540",
    "end": "1313970"
  },
  {
    "start": "1313000",
    "end": "1313000"
  },
  {
    "text": "final is of course getting the data back from wherever we started before using some",
    "start": "1313970",
    "end": "1320000"
  },
  {
    "text": "kind of primitive we call it the disclosure primitive and we can generalize a bit more about that but",
    "start": "1320000",
    "end": "1327460"
  },
  {
    "text": "let's go into specific instead so taking each of the four components with",
    "start": "1327460",
    "end": "1332540"
  },
  {
    "text": "examples we've had it before conditional branches indirect branches and deferred",
    "start": "1332540",
    "end": "1338480"
  },
  {
    "text": "into interrupts the techniques that we knew on June and when we go on to window",
    "start": "1338480",
    "end": "1347180"
  },
  {
    "text": "gadgets we have a couple of special cases the first case here is when we have dependencies on a load loading",
    "start": "1347180",
    "end": "1354650"
  },
  {
    "text": "something from memory so this is the case where the attacker is actually capable of engineering the gadget so if",
    "start": "1354650",
    "end": "1361160"
  },
  {
    "text": "you make sure that the value here in P is not in the cache it will load much",
    "start": "1361160",
    "end": "1367400"
  },
  {
    "text": "much slower than if it were and this actually increases his window size if there's a dependency on this value and",
    "start": "1367400",
    "end": "1373760"
  },
  {
    "text": "in this fashion he can create a lot of window for himself so something like",
    "start": "1373760",
    "end": "1379070"
  },
  {
    "text": "this is likely to occur naturally in code and he can then engineer situation",
    "start": "1379070",
    "end": "1384110"
  },
  {
    "text": "where his window gets big enough you can take this to an extreme so if you have a chain on dependent load from cache",
    "start": "1384110",
    "end": "1391100"
  },
  {
    "start": "1387000",
    "end": "1387000"
  },
  {
    "text": "memory you can create very large windows up to the theoretical limit that is",
    "start": "1391100",
    "end": "1396920"
  },
  {
    "text": "determined by the hardware that however is not very likely to be present in much",
    "start": "1396920",
    "end": "1402290"
  },
  {
    "text": "naturally occurring code and the final thing is a bit more worrying in natural",
    "start": "1402290",
    "end": "1407810"
  },
  {
    "text": "occurring code this is because if you have integer operations on the same variable that too can cause a window to",
    "start": "1407810",
    "end": "1415880"
  },
  {
    "text": "be created and that is something that is likely to occur in a natural occurring",
    "start": "1415880",
    "end": "1421730"
  },
  {
    "text": "code meaning that it's likely to find gadgets window gadgets in natural",
    "start": "1421730",
    "end": "1427490"
  },
  {
    "text": "occurring codes just by having somebody do something on whatever into job even",
    "start": "1427490",
    "end": "1433940"
  },
  {
    "text": "floating point so of course there can be more window gadgets than the ones I",
    "start": "1433940",
    "end": "1440990"
  },
  {
    "text": "listed here in fact there could be an infinite number of them but we haven't done Tia about how they could look like",
    "start": "1440990",
    "end": "1448230"
  },
  {
    "text": "the next step is the disclosure gadget we talked about two levels of in directions a lot so far because getting",
    "start": "1448230",
    "end": "1455520"
  },
  {
    "text": "arbitrary memory persisting an arbitrary memory into the cache this is the second one and in the box here but it's easy to",
    "start": "1455520",
    "end": "1462780"
  },
  {
    "text": "realize that if say you have some secret value X that is used in speculative",
    "start": "1462780",
    "end": "1468330"
  },
  {
    "text": "execution and you do a load on that you'll load the cache for that as well and this means you have another",
    "start": "1468330",
    "end": "1473940"
  },
  {
    "text": "disclosure catered with just one level of indirection and you can do three levels of indirection as well that will",
    "start": "1473940",
    "end": "1479730"
  },
  {
    "text": "leave leaked memory too and you can probably do a lot of other things that will write something into some side",
    "start": "1479730",
    "end": "1485370"
  },
  {
    "text": "channel and this is important to notice when you want to do mitigations because it becomes more than just the case that",
    "start": "1485370",
    "end": "1492690"
  },
  {
    "text": "we had before and in this the examples that we got from project zero and",
    "start": "1492690",
    "end": "1498440"
  },
  {
    "text": "finally we have the disclosure primitive here we're just listing disclosure primitive that relates to to the cache",
    "start": "1498440",
    "end": "1504780"
  },
  {
    "text": "because that is what we have been doing this in this talk so we have the classic flash and we load the fashion we load that is essentially what I've described",
    "start": "1504780",
    "end": "1511410"
  },
  {
    "text": "so far requires that the attacker and the victim code actually shares some memory that is not a strict requirement",
    "start": "1511410",
    "end": "1519320"
  },
  {
    "text": "there are other attacks on the cache called evict and time and there is prime",
    "start": "1519320",
    "end": "1525720"
  },
  {
    "text": "and probe which don't have this requirement which can lead data without actually sharing memory with the",
    "start": "1525720",
    "end": "1532140"
  },
  {
    "text": "attacker between attacker and victim if you want to know more about these two",
    "start": "1532140",
    "end": "1537420"
  },
  {
    "text": "attacks I did a talk at hack in the Box in 2016 that covered these kind of attacks in much more detail so once we",
    "start": "1537420",
    "end": "1547290"
  },
  {
    "start": "1546000",
    "end": "1546000"
  },
  {
    "text": "have a taxonomy in place we need to look at where are these scenarios relevant so the first thing that we did was we came",
    "start": "1547290",
    "end": "1554700"
  },
  {
    "text": "up with some categories of disclosure and the first category is what happened",
    "start": "1554700",
    "end": "1560280"
  },
  {
    "text": "inside a virtualized system this is relevant for things like Asscher for hyper-v and this is like disclosure",
    "start": "1560280",
    "end": "1566670"
  },
  {
    "text": "between two guests or disclosure of memory between the hypervisors itself and an a process you we have another",
    "start": "1566670",
    "end": "1576390"
  },
  {
    "text": "category about what happens in a in an operating system and here we're talking about disclosure",
    "start": "1576390",
    "end": "1582410"
  },
  {
    "text": "from Colonel between processes and we've had a final category about enclaves and",
    "start": "1582410",
    "end": "1588350"
  },
  {
    "text": "enclaves are sensitive because they're supposed to be secured about against anybody in any scenario and then we had",
    "start": "1588350",
    "end": "1597110"
  },
  {
    "text": "listed all the scenarios that we could find I'm not going to read them and realize that spectrum version 1 and",
    "start": "1597110",
    "end": "1605000"
  },
  {
    "text": "version 2 actually is relevant for everything here whereas the meltdown",
    "start": "1605000",
    "end": "1610270"
  },
  {
    "text": "appears to be only irrelevant between four operating systems and only between",
    "start": "1610270",
    "end": "1615770"
  },
  {
    "text": "the kernel and the user and that leaves the systemic systematization part of",
    "start": "1615770",
    "end": "1621950"
  },
  {
    "text": "this talk thank you so now we can begin to reason about the kind of mitigations",
    "start": "1621950",
    "end": "1627440"
  },
  {
    "text": "we can put in place for these types of attacks so we defined three mitigation tactics the first of which is preventing",
    "start": "1627440",
    "end": "1635540"
  },
  {
    "start": "1630000",
    "end": "1630000"
  },
  {
    "text": "speculation techniques and specifically what we mean by this is we want to prevent unsafe speculation where the",
    "start": "1635540",
    "end": "1641810"
  },
  {
    "text": "speculation primitive could lead to a disclosure capture the second tactic we have is removing sensitive content from",
    "start": "1641810",
    "end": "1648560"
  },
  {
    "text": "memory so the idea here is to eliminate entire attack scenarios or simply limit",
    "start": "1648560",
    "end": "1655040"
  },
  {
    "text": "the severity of what speculative what a speculative read could actually disclose",
    "start": "1655040",
    "end": "1661340"
  },
  {
    "text": "and the final tactic we had was removing observation channels so the idea here is",
    "start": "1661340",
    "end": "1667850"
  },
  {
    "text": "to make it as difficult as possible or even impossible for an attacker to observe changes to the cache state for",
    "start": "1667850",
    "end": "1674840"
  },
  {
    "text": "example and infer secrets from that but the key point here is there's no silver",
    "start": "1674840",
    "end": "1680450"
  },
  {
    "text": "bullet that each of the attack scenarios will require a different combination of mitigations both hardware and software",
    "start": "1680450",
    "end": "1689170"
  },
  {
    "text": "okay so starting with removing speculation techniques once more the",
    "start": "1689170",
    "end": "1694400"
  },
  {
    "text": "goal here is to prevent unsafe speculation which could lead to a disclosure capture first thing we can do",
    "start": "1694400",
    "end": "1701240"
  },
  {
    "text": "is have some kind of serialization of the instruction pipeline so on x86 we",
    "start": "1701240",
    "end": "1706970"
  },
  {
    "text": "have the L offense instruction which has the neat property of acting as a speculation barrier so if we think back",
    "start": "1706970",
    "end": "1712730"
  },
  {
    "text": "to this variant one code pattern we can use the elephants after performing the",
    "start": "1712730",
    "end": "1718360"
  },
  {
    "start": "1718000",
    "end": "1718000"
  },
  {
    "text": "balance check and this will create the guarantee that speculation won't be able to continue on from past this point",
    "start": "1718360",
    "end": "1724620"
  },
  {
    "text": "where untrusted index is greater than or equal to length second thing we can do",
    "start": "1724620",
    "end": "1730419"
  },
  {
    "text": "is have some kind of implicit sterilization so thinking back to variant one again we can use a",
    "start": "1730419",
    "end": "1736659"
  },
  {
    "text": "conditional move instruction to set untrusted index to a zero register if it",
    "start": "1736659",
    "end": "1743350"
  },
  {
    "text": "is greater than or equal to length and this will force the miss speculated path to execute the subsequent two array",
    "start": "1743350",
    "end": "1750309"
  },
  {
    "text": "operations with untrusted and index being zero which won't disclose a sensitive secret and to do this we have",
    "start": "1750309",
    "end": "1757840"
  },
  {
    "text": "Q Spector command line flag in visual C++ which will automatically detect",
    "start": "1757840",
    "end": "1763330"
  },
  {
    "text": "potentially vulnerable code patterns and insert appropriate sterilization similarly for Microsoft edge we have",
    "start": "1763330",
    "end": "1770429"
  },
  {
    "text": "mitigations in the chat for a JavaScript engine which prevent an attacker from being able to create these kind of",
    "start": "1770429",
    "end": "1777130"
  },
  {
    "text": "vulnerable code patterns to disclose memory the next thing we can do is have",
    "start": "1777130",
    "end": "1782890"
  },
  {
    "start": "1781000",
    "end": "1781000"
  },
  {
    "text": "some kind of workload isolation so as we heard earlier indirect branches are",
    "start": "1782890",
    "end": "1788049"
  },
  {
    "text": "predicted based on past behavior which is stored in the branch target buffer",
    "start": "1788049",
    "end": "1793950"
  },
  {
    "text": "these kind of prediction states are generally either shared per core or hyper thread in the case of simultaneous",
    "start": "1793950",
    "end": "1801610"
  },
  {
    "text": "multithreading is enabled so what we can do is we can assign a certain core to",
    "start": "1801610",
    "end": "1809169"
  },
  {
    "text": "guest VM for example and leave the others for the host and what this will",
    "start": "1809169",
    "end": "1814539"
  },
  {
    "text": "do is it will prevent a malicious guest from being able to collide the branch prediction state and trigger unsafe",
    "start": "1814539",
    "end": "1822970"
  },
  {
    "text": "speculation from an indirect branch of the host and to do this hyper V supports",
    "start": "1822970",
    "end": "1829059"
  },
  {
    "text": "min route and CPU groups which can be used to schedule the behavior of the",
    "start": "1829059",
    "end": "1835330"
  },
  {
    "text": "guest the next thing we can do is make use of the indirect branch control",
    "start": "1835330",
    "end": "1841120"
  },
  {
    "start": "1837000",
    "end": "1837000"
  },
  {
    "text": "features which are provided by micro code updates by Intel and AMD",
    "start": "1841120",
    "end": "1846200"
  },
  {
    "text": "so we have three new options we have IBRS which kind of acts as a way of",
    "start": "1846200",
    "end": "1851840"
  },
  {
    "text": "creating two different privileged domains so we set IVRS to zero for the",
    "start": "1851840",
    "end": "1858320"
  },
  {
    "text": "lower privileged state and then on transition into the higher privileged states such as on kernel entry we can",
    "start": "1858320",
    "end": "1863960"
  },
  {
    "text": "set IBRS to one and this will create the guarantee that the higher privileged state will not be influenced by",
    "start": "1863960",
    "end": "1869890"
  },
  {
    "text": "prediction changes made by the less privileged context the next thing we",
    "start": "1869890",
    "end": "1875240"
  },
  {
    "text": "have is IB PB which essentially allows the operating system to flush this",
    "start": "1875240",
    "end": "1880340"
  },
  {
    "text": "prediction state so this might be used when switching context switching",
    "start": "1880340",
    "end": "1886669"
  },
  {
    "text": "processes or switching guest virtual machines for the hypervisor scenario the",
    "start": "1886669",
    "end": "1892610"
  },
  {
    "text": "final thing we have is s dibp so as we saw when in the case where simultaneous",
    "start": "1892610",
    "end": "1898250"
  },
  {
    "text": "multithreading has enabled two co-located threads on a single core might share some prediction state so if",
    "start": "1898250",
    "end": "1905000"
  },
  {
    "text": "we have higher privilege contexts running and a lower privilege context running on the same core the lower",
    "start": "1905000",
    "end": "1911510"
  },
  {
    "text": "privileged context might be able to collide the branch prediction state so setting s GI be p21 just prevents this",
    "start": "1911510",
    "end": "1917840"
  },
  {
    "text": "attack scenario and all versions of Windows client that are supported make",
    "start": "1917840",
    "end": "1924110"
  },
  {
    "text": "use of these features the next thing we can do to prevent speculation techniques",
    "start": "1924110",
    "end": "1930650"
  },
  {
    "text": "is used non speculated or safely speculated indirect jumps so on Intel",
    "start": "1930650",
    "end": "1936830"
  },
  {
    "text": "CPUs the far jump and far ret instructions which are indirect jumps that also change the code segment will",
    "start": "1936830",
    "end": "1943280"
  },
  {
    "text": "not be speculated so we can replace indirect branches with these instructions and this will guarantee",
    "start": "1943280",
    "end": "1949549"
  },
  {
    "text": "that miss speculation will never occur from an indirect branch",
    "start": "1949549",
    "end": "1954790"
  },
  {
    "text": "similarly for AMD CPUs we can use the elephants instruction and will guarantee",
    "start": "1954790",
    "end": "1961250"
  },
  {
    "text": "also that Miss speculation will never occur from an indirect branch there was",
    "start": "1961250",
    "end": "1967730"
  },
  {
    "text": "also this proposal by Google for Rhett Pauline and this essentially can be used",
    "start": "1967730",
    "end": "1976460"
  },
  {
    "text": "to control speculation after an indirect branch so speculation could go to an",
    "start": "1976460",
    "end": "1983000"
  },
  {
    "text": "infinite loop say where as architectural II the jump will resolve as normal Windows kernel and hyper-v are using a",
    "start": "1983000",
    "end": "1990500"
  },
  {
    "text": "combination of these to best optimize performance so moving on to the second",
    "start": "1990500",
    "end": "1997910"
  },
  {
    "text": "tactic removing sensitive content from memory once more the goal here is to",
    "start": "1997910",
    "end": "2003270"
  },
  {
    "text": "limit the sensitivity of memory that speculation could read and disclose the",
    "start": "2003270",
    "end": "2013000"
  },
  {
    "text": "first thing we can do is have hypervisor address space segregation so as the",
    "start": "2013000",
    "end": "2018250"
  },
  {
    "text": "hypervisor runs we can map guest physical memory on demand as its required as opposed to historically",
    "start": "2018250",
    "end": "2024220"
  },
  {
    "text": "where the hypervisor would have all guest physical memory Maps at all times",
    "start": "2024220",
    "end": "2029380"
  },
  {
    "text": "and so what this means is that if a malicious vm performs a hyper call and",
    "start": "2029380",
    "end": "2035680"
  },
  {
    "text": "tries to induce unsafe speculation it will only ever have access to its own guest physical memory and so will not be",
    "start": "2035680",
    "end": "2042940"
  },
  {
    "text": "able to disclose guest physical memory from other virtual machines running on the host the next thing we have this is",
    "start": "2042940",
    "end": "2052149"
  },
  {
    "start": "2050000",
    "end": "2050000"
  },
  {
    "text": "specific to variant 3 the kernel user information disclosure scenario is KB a",
    "start": "2052150",
    "end": "2057340"
  },
  {
    "text": "shadow so previously in user mode execution the kernel page table entries",
    "start": "2057340",
    "end": "2063159"
  },
  {
    "text": "would be mapped but just marked as inaccessible with KB a shadow we",
    "start": "2063160",
    "end": "2068530"
  },
  {
    "text": "guarantee the user mode execution only however has access to its own page tables we add the kernel page tables",
    "start": "2068530",
    "end": "2075520"
  },
  {
    "text": "back in when we transition to the kernel as as needed all supported versions of",
    "start": "2075520",
    "end": "2083110"
  },
  {
    "text": "Windows client enable this by default and final tactic removing observation",
    "start": "2083110",
    "end": "2090070"
  },
  {
    "text": "channels once more the goal here is to make it difficult for an attacker or even impossible to observe changes to",
    "start": "2090070",
    "end": "2097000"
  },
  {
    "text": "the cache state and infer secrets from that the first thing we have is mapping",
    "start": "2097000",
    "end": "2102460"
  },
  {
    "text": "guest physical memory as uncatchable so if we have some system physical memory",
    "start": "2102460",
    "end": "2108190"
  },
  {
    "text": "we can map it as write back cache for the guest so it will be no performance packed for the guests itself but for the",
    "start": "2108190",
    "end": "2115180"
  },
  {
    "text": "hypervisor we can map it as uncatchable and what this will do is it will create the guarantee that if the hypervisor",
    "start": "2115180",
    "end": "2122740"
  },
  {
    "text": "performs a speculative load on this guest physical memory it will obey the",
    "start": "2122740",
    "end": "2128650"
  },
  {
    "text": "uncatchable property and so won't be able to make any cash cash changes that",
    "start": "2128650",
    "end": "2134920"
  },
  {
    "text": "will be observable to the guests through a flash memory load primitive so this acts as a generic mitigation for yes to",
    "start": "2134920",
    "end": "2143200"
  },
  {
    "text": "host a flash memory load the other thing we can do similarly to prevent guest to",
    "start": "2143200",
    "end": "2149740"
  },
  {
    "text": "guest flash and reload disclosure primitive is simply ensure that we never share any physical memory between two",
    "start": "2149740",
    "end": "2156010"
  },
  {
    "text": "guests so we ensure they always have their own copy of everything and this",
    "start": "2156010",
    "end": "2161589"
  },
  {
    "text": "ensures that changes made to the cache and one guest cannot be observed by",
    "start": "2161589",
    "end": "2167680"
  },
  {
    "text": "another through the flush and reload primitive which requires shared cache lines finally we can decrease the time",
    "start": "2167680",
    "end": "2176440"
  },
  {
    "start": "2173000",
    "end": "2173000"
  },
  {
    "text": "of precision in the browser so there's this API performance start now which is accessible to JavaScript which",
    "start": "2176440",
    "end": "2182920"
  },
  {
    "text": "previously could be used to time a single indirect a single load and then",
    "start": "2182920",
    "end": "2188619"
  },
  {
    "text": "determine whether that address was in the cache or not now what we do is we decrease the precision of this timer and",
    "start": "2188619",
    "end": "2194500"
  },
  {
    "text": "we also add random jitter to prevent clock edging techniques which makes it much more difficult for an attacker to",
    "start": "2194500",
    "end": "2202200"
  },
  {
    "text": "perform a speculative attack in the browser so for closing remarks I just",
    "start": "2202200",
    "end": "2209470"
  },
  {
    "text": "want to reiterate the point that there's a large number of attack scenarios and for each of them we require a different",
    "start": "2209470",
    "end": "2215319"
  },
  {
    "start": "2211000",
    "end": "2211000"
  },
  {
    "text": "combination of hardware and software mitigations to prevent the problem as best as possible thinking back to the",
    "start": "2215319",
    "end": "2222789"
  },
  {
    "text": "variants themselves variant 1 well they're all Hardware vulnerabilities",
    "start": "2222789",
    "end": "2228270"
  },
  {
    "text": "variant 1 is going to require software changes so that might be using the Hugh specter command line flag to insert",
    "start": "2228270",
    "end": "2234279"
  },
  {
    "text": "appropriate serialization variant 2 is mitigated by the operating system by",
    "start": "2234279",
    "end": "2241329"
  },
  {
    "text": "making use of the indirect branch controls for example and finally variant",
    "start": "2241329",
    "end": "2246370"
  },
  {
    "text": "is completely mitigated with KVA shadow so once more userland execution never",
    "start": "2246370",
    "end": "2252580"
  },
  {
    "text": "has kernel page table entries mapped since then we've received also some new",
    "start": "2252580",
    "end": "2258520"
  },
  {
    "start": "2256000",
    "end": "2256000"
  },
  {
    "text": "variants which I just like to go over briefly the first of which is",
    "start": "2258520",
    "end": "2263730"
  },
  {
    "text": "speculative store bypass which worked by creating mispredictions between data",
    "start": "2263730",
    "end": "2270190"
  },
  {
    "text": "dependencies of store and load instructions the mitigation for this is the same as variant one just adding",
    "start": "2270190",
    "end": "2277740"
  },
  {
    "text": "serialization to the pipeline for vulnerable code patterns alternatively",
    "start": "2277740",
    "end": "2283660"
  },
  {
    "text": "there is a feature of the CPU which can be used to disable this memory disambiguation optimisation but that is",
    "start": "2283660",
    "end": "2292570"
  },
  {
    "text": "disabled by default as no vulnerable code patents have efan have been found affecting Microsoft code the second of",
    "start": "2292570",
    "end": "2300580"
  },
  {
    "text": "which is the lazy floating-point state restore so 32-bit versions of Windows prior to 10 would make this optimization",
    "start": "2300580",
    "end": "2307210"
  },
  {
    "text": "where when context switching between processes instead of always just copying",
    "start": "2307210",
    "end": "2312250"
  },
  {
    "text": "the floating-point registers they would simply mark them as inaccessible and then restore them on first use through",
    "start": "2312250",
    "end": "2318760"
  },
  {
    "text": "triggering an exception the problem with this was speculative execution could",
    "start": "2318760",
    "end": "2324160"
  },
  {
    "text": "reach stale floating point register values from prior process as the",
    "start": "2324160",
    "end": "2331930"
  },
  {
    "text": "exception could be deferred similar to variant 3 the mitigation for this is",
    "start": "2331930",
    "end": "2337660"
  },
  {
    "text": "simply to disable this optimization which is done and the latest version of all windows 10 the bounce bounce check",
    "start": "2337660",
    "end": "2346870"
  },
  {
    "text": "by PI store this was where a conditional branch would mispredict leading to an outer bounds right speculatively and if",
    "start": "2346870",
    "end": "2352990"
  },
  {
    "text": "this speculative outer bounds right corrupted an indirect branch target this could lead to speculation that an",
    "start": "2352990",
    "end": "2360430"
  },
  {
    "text": "arbitrary attacker controlled address if that was then called similar to how variant two works so that's powerful",
    "start": "2360430",
    "end": "2367720"
  },
  {
    "text": "because it could lead to disclosure primitive the mitigation for this is once again identifying vulnerable code",
    "start": "2367720",
    "end": "2374620"
  },
  {
    "text": "patterns and inserting appropriate serialization then moving on to finally in that",
    "start": "2374620",
    "end": "2382530"
  },
  {
    "text": "Spectre which was the first attack demonstrated over the network the",
    "start": "2382530",
    "end": "2388770"
  },
  {
    "text": "mitigation for this is once more just detecting vulnerable Co patterns and inserting serialization but we we expect",
    "start": "2388770",
    "end": "2397200"
  },
  {
    "start": "2396000",
    "end": "2396000"
  },
  {
    "text": "this to be a continuing subject of research and so we've launched our speculative execution side-channel",
    "start": "2397200",
    "end": "2402300"
  },
  {
    "text": "bounty the max payout for this is 250 K USD for new variants we also have more",
    "start": "2402300",
    "end": "2410790"
  },
  {
    "text": "information about the variants themselves and developer guidelines on tech nap globe so I just like to finish",
    "start": "2410790",
    "end": "2419130"
  },
  {
    "text": "by saying thank you to everyone who is involved in this research and the mitigations it's been a tremendous",
    "start": "2419130",
    "end": "2425070"
  },
  {
    "text": "undertaking I would like to join in that thanks and I would also like to thank",
    "start": "2425070",
    "end": "2430410"
  },
  {
    "text": "Microsoft for allowing to me to be a part of that process and for allowing me to be here today and of course to all of",
    "start": "2430410",
    "end": "2438570"
  },
  {
    "text": "you guys who came to to watch this talk thank you very much",
    "start": "2438570",
    "end": "2443750"
  },
  {
    "text": "[Music]",
    "start": "2445680",
    "end": "2448579"
  }
]