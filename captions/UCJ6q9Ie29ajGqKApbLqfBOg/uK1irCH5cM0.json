[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": "thank you for coming to our talk today we will be talking about how we do",
    "start": "30",
    "end": "5279"
  },
  {
    "text": "fuzzing of real-world software at production scale of tens of thousands of",
    "start": "5279",
    "end": "11219"
  },
  {
    "text": "course and in a fully automated way I am Abhishek I'm from the Google Chrome",
    "start": "11219",
    "end": "18900"
  },
  {
    "text": "security team and I founded cluster",
    "start": "18900",
    "end": "24510"
  },
  {
    "text": "first eight years back with just like a single machine under my desk and now it",
    "start": "24510",
    "end": "30570"
  },
  {
    "text": "has grown into a massive compute cluster of 25,000 codes and I'm Oliver on the",
    "start": "30570",
    "end": "37860"
  },
  {
    "text": "late developer of customers and the tech lead for OSS files so why do we do",
    "start": "37860",
    "end": "45090"
  },
  {
    "start": "43000",
    "end": "153000"
  },
  {
    "text": "fuzzing fuzzing is a really interesting way to find bugs think of it like",
    "start": "45090",
    "end": "51570"
  },
  {
    "text": "pushing a program so hard that it just falls off a cliff into this unexpected",
    "start": "51570",
    "end": "57180"
  },
  {
    "text": "state and this really turns up interesting memory corruption issues let",
    "start": "57180",
    "end": "64049"
  },
  {
    "text": "me talk a little bit about the history of fuzzy fuzzing really became prominent",
    "start": "64049",
    "end": "69900"
  },
  {
    "text": "in 2013 when American fuzzy law or AFL",
    "start": "69900",
    "end": "75180"
  },
  {
    "text": "launched this was an effort by Michael szalinski in his time at Google and this",
    "start": "75180",
    "end": "83009"
  },
  {
    "text": "really started an era of smart fuzzing fuzzing was really not blind anymore it",
    "start": "83009",
    "end": "89430"
  },
  {
    "text": "had this code coverage feedback loop which would continuously improve fuzzing over time a year later",
    "start": "89430",
    "end": "97680"
  },
  {
    "text": "costea from dynamic tools team also at Google launched lyft fuzzer and this",
    "start": "97680",
    "end": "104250"
  },
  {
    "text": "made fuzzer writing as simple as unit test in December of 2016 our team",
    "start": "104250",
    "end": "112500"
  },
  {
    "text": "launched Oasis fuzz which made fuzzing a seamless experience for the open source",
    "start": "112500",
    "end": "118530"
  },
  {
    "text": "developers these open source developers are already constrained by time and",
    "start": "118530",
    "end": "124020"
  },
  {
    "text": "resources so making things simple is really important right now we have 250",
    "start": "124020",
    "end": "130830"
  },
  {
    "text": "open source projects integrated with the service so think of your popular crypto library",
    "start": "130830",
    "end": "137190"
  },
  {
    "text": "like open SSL or XML library like Lib XML - or font library free type or image",
    "start": "137190",
    "end": "145020"
  },
  {
    "text": "parsing libraries like image magiclip PNG all of those are integrated with",
    "start": "145020",
    "end": "150690"
  },
  {
    "text": "this service so let's bust some myths",
    "start": "150690",
    "end": "156120"
  },
  {
    "start": "153000",
    "end": "264000"
  },
  {
    "text": "first these are some fuzzing myths which we have heard over the years and wanted",
    "start": "156120",
    "end": "161520"
  },
  {
    "text": "to clear them upfront before diving deeper one of the first things we hear",
    "start": "161520",
    "end": "167400"
  },
  {
    "text": "quite a lot is fuzzing is only for security researchers or security teams",
    "start": "167400",
    "end": "173900"
  },
  {
    "text": "this is not really true we have worked with hundreds of developers and they",
    "start": "173900",
    "end": "179940"
  },
  {
    "text": "enjoy fuzzing if it's seamlessly integrated in their workflows the second",
    "start": "179940",
    "end": "185340"
  },
  {
    "text": "myth we have heard quite a lot is fuzzing only find security vulnerabilities this is also not true",
    "start": "185340",
    "end": "192380"
  },
  {
    "text": "fuzzing has been used to find very critical stability vulnerabilities as well like those pesky null pointer",
    "start": "192380",
    "end": "199560"
  },
  {
    "text": "dereferences another myth we hear quite a lot is we don't need fuzzing because",
    "start": "199560",
    "end": "207060"
  },
  {
    "text": "our project is very well unit tested you have to understand that unit testing",
    "start": "207060",
    "end": "213150"
  },
  {
    "text": "only tests a small subset of the expected input search space so to give",
    "start": "213150",
    "end": "218820"
  },
  {
    "text": "you an example sequin light library claims to have 100% branch test coverage",
    "start": "218820",
    "end": "224630"
  },
  {
    "text": "but when we added structure of air fuzzers we first started finding dozens",
    "start": "224630",
    "end": "229680"
  },
  {
    "text": "of new security vulnerabilities and finally my favorite one is people feel",
    "start": "229680",
    "end": "237209"
  },
  {
    "text": "their project is secure if there are no open bugs that's also not true you",
    "start": "237209",
    "end": "243510"
  },
  {
    "text": "really need to see what quality of fuzzers you have and the code coverage they achieve if you have really bad and",
    "start": "243510",
    "end": "251010"
  },
  {
    "text": "inefficient fuzzers that let's say are running into constant error conditions",
    "start": "251010",
    "end": "256609"
  },
  {
    "text": "you won't really find new bugs and always have a false sense of security",
    "start": "256609",
    "end": "263299"
  },
  {
    "start": "264000",
    "end": "352000"
  },
  {
    "text": "so how do we really scale this fuzzing one of the first things that comes to a",
    "start": "265410",
    "end": "272010"
  },
  {
    "text": "person's mind is let's just add more machines or more VMs to this problem and",
    "start": "272010",
    "end": "277650"
  },
  {
    "text": "that solves it as a defender that's not the only problem you have you need to",
    "start": "277650",
    "end": "284310"
  },
  {
    "text": "have scalable fuzzing processes another thing you have to understand is your",
    "start": "284310",
    "end": "292320"
  },
  {
    "text": "security team no matter what size it is let's say 1% 2% 10 percents even more",
    "start": "292320",
    "end": "298050"
  },
  {
    "text": "cannot really scale to writing and maintaining all the fuzzers for your",
    "start": "298050",
    "end": "303150"
  },
  {
    "text": "project developers on the other hand understand the code much better and can",
    "start": "303150",
    "end": "310140"
  },
  {
    "text": "write more efficient and complete fuzzers and finally fuzzing is really",
    "start": "310140",
    "end": "317400"
  },
  {
    "text": "scalable if it's seamlessly integrated in the software development lifecycle so",
    "start": "317400",
    "end": "323670"
  },
  {
    "text": "your developers don't need to know the complexity of your fuzzing sub system",
    "start": "323670",
    "end": "329670"
  },
  {
    "text": "all they need to do is input a further and check it as part of the codebase and",
    "start": "329670",
    "end": "336470"
  },
  {
    "text": "get us output two things one is the bugs that they are expecting or not expecting",
    "start": "336470",
    "end": "343290"
  },
  {
    "text": "and the other thing is ways to improve the faster that they have already written so what does an ideal fuzzing",
    "start": "343290",
    "end": "356010"
  },
  {
    "start": "352000",
    "end": "431000"
  },
  {
    "text": "workflow look like in our ideal fuzzing workflow developer is the initiator of",
    "start": "356010",
    "end": "361770"
  },
  {
    "text": "this fuzzing workflow they write a further check it into source then the",
    "start": "361770",
    "end": "368400"
  },
  {
    "text": "build system picks it and puts it on a cloud storage location then thousands of",
    "start": "368400",
    "end": "377220"
  },
  {
    "text": "these fuzzing BOTS kick in start finding hundreds of new crashes then the sub",
    "start": "377220",
    "end": "384480"
  },
  {
    "text": "system automatically deduplicate them on to a set of unique bugs we also attach",
    "start": "384480",
    "end": "391020"
  },
  {
    "text": "some extra metadata to the crash so things like who really introduced this",
    "start": "391020",
    "end": "396720"
  },
  {
    "text": "regression what's the minimized crash looks like and so on once we do that we file the",
    "start": "396720",
    "end": "404600"
  },
  {
    "text": "bug either to that same developer who wrote the fuzzer or the developer who introduced that",
    "start": "404600",
    "end": "412250"
  },
  {
    "text": "regression after that this developer",
    "start": "412250",
    "end": "417410"
  },
  {
    "text": "fixes the bug and finally there is a daily cron job that runs that tries to",
    "start": "417410",
    "end": "423650"
  },
  {
    "text": "verify if this fix was actually correct and automatically closes the bug so what",
    "start": "423650",
    "end": "433430"
  },
  {
    "start": "431000",
    "end": "487000"
  },
  {
    "text": "is cluster fuss cluster first project is actually an implementation of this",
    "start": "433430",
    "end": "438590"
  },
  {
    "text": "fuzzing workflow that I just described it it has been open source in February",
    "start": "438590",
    "end": "445010"
  },
  {
    "text": "of this year and is actively developed and maintained it automates everything",
    "start": "445010",
    "end": "451820"
  },
  {
    "text": "in this fuzzing workflow except of for the writing and bug fixing it has been",
    "start": "451820",
    "end": "459410"
  },
  {
    "text": "tested at scale for like smaller projects with let's say a few dozen codes or a wide variety of projects on",
    "start": "459410",
    "end": "467540"
  },
  {
    "text": "tens of thousands of cores it's the only public example of an",
    "start": "467540",
    "end": "474140"
  },
  {
    "text": "infrastructure that runs on all popular platforms so it works on Linux Mac Windows and Android it powers our oasis",
    "start": "474140",
    "end": "483350"
  },
  {
    "text": "for service and all of googles fuzzing",
    "start": "483350",
    "end": "487870"
  },
  {
    "text": "so let's go over the fuzzing lifecycle in more detail with that I hand over to",
    "start": "488830",
    "end": "495200"
  },
  {
    "text": "my colleague all of them thank you happy",
    "start": "495200",
    "end": "500810"
  },
  {
    "text": "Shack so obviously the first step of starting fighting at all is to write buzzers and",
    "start": "500810",
    "end": "507090"
  },
  {
    "text": "I'll give an overview of how we've approached this in the various projects we've worked on so before we write any",
    "start": "507090",
    "end": "515310"
  },
  {
    "start": "512000",
    "end": "611000"
  },
  {
    "text": "buzzes we have to figure out what we want to fuzz so they should start with attack surface enumeration where we look for where",
    "start": "515310",
    "end": "522900"
  },
  {
    "text": "untrusted input is consumed in our program and this is obviously specific to every application so let's take a",
    "start": "522900",
    "end": "529530"
  },
  {
    "text": "look at example at chrome which is a web browser so Chrome has a multi-process model and we have a sandbox renderer",
    "start": "529530",
    "end": "537000"
  },
  {
    "text": "process which is directly experience to bad untrusted input such as HTML Javascript images video so these are all",
    "start": "537000",
    "end": "545880"
  },
  {
    "text": "obviously things that we need to be first we also have more privileged",
    "start": "545880",
    "end": "550920"
  },
  {
    "text": "processes in chrome which aren't as experienced directly to untrusted input but they Hearst these very privileged",
    "start": "550920",
    "end": "557520"
  },
  {
    "text": "IPC services that could potentially be exploited by a compromised renderer process so IPC processes are IPC",
    "start": "557520",
    "end": "565230"
  },
  {
    "text": "services are something that we also want to fuzz otherwise they might cause",
    "start": "565230",
    "end": "570750"
  },
  {
    "text": "sandbox escapes so beyond attack surface enumeration another way to look with it and so to look for third-party libraries",
    "start": "570750",
    "end": "578160"
  },
  {
    "text": "so we've encountered countless countless third-party libraries and we found that most of them actually severely lacking",
    "start": "578160",
    "end": "584940"
  },
  {
    "text": "in quality and can be extremely buggy in nature so they're obviously things that",
    "start": "584940",
    "end": "590130"
  },
  {
    "text": "you want to fuzz and pauses are more generally any complicated processing of input data is another thing that you",
    "start": "590130",
    "end": "596610"
  },
  {
    "text": "want to fuzz buzzes tend to do very well and this kind of code and finally if you",
    "start": "596610",
    "end": "601920"
  },
  {
    "text": "have a vulnerability rewards program you can use the reports that you get from there as a feedback for where you might",
    "start": "601920",
    "end": "607380"
  },
  {
    "text": "be missing out on fuzzy coverage okay so",
    "start": "607380",
    "end": "613440"
  },
  {
    "start": "611000",
    "end": "676000"
  },
  {
    "text": "now out to some actual fuzzy so the based most basic form of fuzzing is known as blackbox fuzzing a blackbox",
    "start": "613440",
    "end": "620970"
  },
  {
    "text": "phaser is just a program that generates or mutates files of a particular format",
    "start": "620970",
    "end": "626180"
  },
  {
    "text": "say for example you might have a HTML parser fuzzer this would just be a program which spits out random but valid",
    "start": "626180",
    "end": "632490"
  },
  {
    "text": "HTML files and then these files are fed one by to a target application say for example",
    "start": "632490",
    "end": "637620"
  },
  {
    "text": "chrome in the hopes of triggering a crash and these black box forces can",
    "start": "637620",
    "end": "643019"
  },
  {
    "text": "generate these test cases completely from scratch or they can pause and mutate existing test cases from a corpus",
    "start": "643019",
    "end": "650660"
  },
  {
    "text": "so we've seen that well-written blackbox fuzzes can be very effective of finding",
    "start": "650660",
    "end": "655860"
  },
  {
    "text": "vulnerabilities but they have some problems they tend to be quite slow which means they require more resources",
    "start": "655860",
    "end": "661560"
  },
  {
    "text": "to run and they require considerable effort to write so in most of my time",
    "start": "661560",
    "end": "666990"
  },
  {
    "text": "was we see that a written by experienced security engineers which makes this whole process kind of difficult to scale",
    "start": "666990",
    "end": "675800"
  },
  {
    "start": "676000",
    "end": "741000"
  },
  {
    "text": "so going back to the example of chrome we use a variety of black box fuzzies to",
    "start": "677060",
    "end": "682769"
  },
  {
    "text": "do fuzzing against the entire Chrome binary so we have HTML or Dom fuzzers to",
    "start": "682769",
    "end": "688860"
  },
  {
    "text": "test blink which is Chrome's rendering engine and are various JavaScript Web API is we also have JavaScript puzzles",
    "start": "688860",
    "end": "696149"
  },
  {
    "text": "to test v8 of JavaScript engine and on the right you can see a snippet of one",
    "start": "696149",
    "end": "701519"
  },
  {
    "text": "of the test cases generated by alpha Z and lastly as I mentioned before we have",
    "start": "701519",
    "end": "706829"
  },
  {
    "text": "a lot of IPC services so we have fuzzies that fuzz these more privileged IPC",
    "start": "706829",
    "end": "711959"
  },
  {
    "text": "services we also support simulating random user gesture ease this is",
    "start": "711959",
    "end": "718230"
  },
  {
    "text": "particularly useful when you're fuzzing application that has a GUI as they can obviously trigger more code and",
    "start": "718230",
    "end": "724430"
  },
  {
    "text": "hopefully cause more bugs to be triggered so the thing with black box",
    "start": "724430",
    "end": "729630"
  },
  {
    "text": "fuzzes is that there are dumb they're not guided by any feedback from the target it's fuzzy and they're purely",
    "start": "729630",
    "end": "736170"
  },
  {
    "text": "based on the rules and algorithms of your father so grey box fuzzing on the",
    "start": "736170",
    "end": "743730"
  },
  {
    "start": "741000",
    "end": "805000"
  },
  {
    "text": "other hand is a slightly different approach to fuzzy there AFL or American fuzz develop started this revolution of",
    "start": "743730",
    "end": "750420"
  },
  {
    "text": "sorts a few years ago with courage grandeur fuzzing which is a form of grey box fuzzing the idea is that a fuzzing engine guides as",
    "start": "750420",
    "end": "758370"
  },
  {
    "text": "mutations in a smart way by using a coverage feedback it gets from running the target is fuzzing in a feedback loop",
    "start": "758370",
    "end": "767240"
  },
  {
    "text": "so NFL star fuzzing was really successful and found countless bugs in many real-world software and it's kind",
    "start": "767360",
    "end": "774709"
  },
  {
    "text": "of become the de-facto way to fuzz things these days and then later another team at Google developed something",
    "start": "774709",
    "end": "781160"
  },
  {
    "text": "called lip flutter and it's based on the same coverage guided fuzzing principles as AFL however it's also in process and",
    "start": "781160",
    "end": "789049"
  },
  {
    "text": "it's aimed to make writing forces more easy for general developers and being in",
    "start": "789049",
    "end": "796189"
  },
  {
    "text": "process it also means that sometimes it can be up to something like five times faster than an out of process AFL faster",
    "start": "796189",
    "end": "803589"
  },
  {
    "start": "805000",
    "end": "1008000"
  },
  {
    "text": "so with lip fuzzer you can write a fuzzer in as little as five lines of code and we call these things first",
    "start": "805660",
    "end": "811999"
  },
  {
    "text": "targets so as you can see it's very similar to writing something that might be look like a unit test and the idea is",
    "start": "811999",
    "end": "819199"
  },
  {
    "text": "you write this top function which accepts in some data provided by the fuzzing engine and in G's put this",
    "start": "819199",
    "end": "824809"
  },
  {
    "text": "daughter and they pass it to some function or API that you want to fuzz and then the fuzzing engine sees the",
    "start": "824809",
    "end": "831019"
  },
  {
    "text": "current coverage from running the input daughter against this stub and then uses it to guide future mutations and get",
    "start": "831019",
    "end": "836959"
  },
  {
    "text": "more interesting data for your buzzer and the great thing is you should be able to write this first target once and",
    "start": "836959",
    "end": "843169"
  },
  {
    "text": "it should work seamlessly with multiple fuzzing engines likely fodder and AFL so",
    "start": "843169",
    "end": "851809"
  },
  {
    "text": "the great thing about gray box fuzzing is that you no longer have to write custom mutation or generation logic the",
    "start": "851809",
    "end": "858139"
  },
  {
    "text": "fuzzing engine can kind of learn the input format just by using this coverage feedback loop and this becomes",
    "start": "858139",
    "end": "865069"
  },
  {
    "text": "especially effective if you provide a dictionary or seed corpus to help it get started so ultimately what this means is",
    "start": "865069",
    "end": "873439"
  },
  {
    "text": "that general developers can very easily learn to write effective fuzzers and this is in fact the key to how we scale",
    "start": "873439",
    "end": "880009"
  },
  {
    "text": "our fuzzing so when we want gray box version and",
    "start": "880009",
    "end": "886730"
  },
  {
    "text": "when you want black box was in it turns out with a project like Chrome we still need both so grey box fuzzing is really",
    "start": "886730",
    "end": "893779"
  },
  {
    "text": "great when you're fuzzy in smaller more targeted components and it's great because you can educate developers",
    "start": "893779",
    "end": "899569"
  },
  {
    "text": "easily to write them and there can be thousands of times faster than an equivalent black box buzzer but we've also found a black box",
    "start": "899569",
    "end": "907649"
  },
  {
    "text": "fuzziness doing necessary so we still want to do large integration style testing of applications rather than",
    "start": "907649",
    "end": "914459"
  },
  {
    "text": "testing just the smaller individual components and coverage greater person",
    "start": "914459",
    "end": "919529"
  },
  {
    "text": "doesn't dare tend to do very well with very large binary say with chrome and",
    "start": "919529",
    "end": "925100"
  },
  {
    "text": "large rural programs can also sometimes be very non-deterministic which again",
    "start": "925100",
    "end": "930510"
  },
  {
    "text": "makes the coverage gardens less useful and finally you might have some very",
    "start": "930510",
    "end": "935820"
  },
  {
    "text": "complex input formats to say for example PDFs where coverage Cardiff Austin has",
    "start": "935820",
    "end": "940829"
  },
  {
    "text": "some trouble mutating and generating files in an effective way so we've also",
    "start": "940829",
    "end": "950399"
  },
  {
    "text": "done some work to bridge some of the gaps between grey box and black box fuzzing and we do this by making a grey",
    "start": "950399",
    "end": "957089"
  },
  {
    "text": "box mutations most with specific to the format that we fuzzy and one way to do",
    "start": "957089",
    "end": "962519"
  },
  {
    "text": "this is to write a custom mutator or to define the input format by using protobufs using a library called lip",
    "start": "962519",
    "end": "968970"
  },
  {
    "text": "protobuf Mutato so this is a bit of work but we've had some great successes here",
    "start": "968970",
    "end": "975240"
  },
  {
    "text": "Abhishek mentioned the example with sequel Lite the secret light as abstract mansion has a hundred percent branched",
    "start": "975240",
    "end": "981660"
  },
  {
    "text": "test coverage that has been well fust by just playing grey box was in for maybe a few years and when we worked on",
    "start": "981660",
    "end": "988589"
  },
  {
    "text": "a structure where phaser for a secret light we ended up shaking out about about a dozen or so new bugs some of",
    "start": "988589",
    "end": "994800"
  },
  {
    "text": "them are security vulnerabilities as well if you want to find out more another member of our team called",
    "start": "994800",
    "end": "1000649"
  },
  {
    "text": "Jonathan Messman gave a detailed talk on this a black cat USA this year so be sure to check that out if you're",
    "start": "1000649",
    "end": "1006290"
  },
  {
    "text": "interested so here's just a quick example of what this might look like on the Left we define a paragraph that",
    "start": "1006290",
    "end": "1013399"
  },
  {
    "start": "1008000",
    "end": "1059000"
  },
  {
    "text": "describes that in / format in this case SQL create table statement so the",
    "start": "1013399",
    "end": "1019640"
  },
  {
    "text": "fuzzing engine and the protocol potater will take this protocol definition and generate paragraphs that conform to this",
    "start": "1019640",
    "end": "1025640"
  },
  {
    "text": "format and then on the right you have a fuzzer which takes this protobufs and then from",
    "start": "1025640",
    "end": "1031188"
  },
  {
    "text": "it generates an actual SQL statement and then this can be passed to the SQL",
    "start": "1031189",
    "end": "1036659"
  },
  {
    "text": "engine for fuzzing so you can also imagine this approach working for testing API calls so you could define a",
    "start": "1036659",
    "end": "1044519"
  },
  {
    "text": "paragraph message for every single function in your API or interface and then your fuzzer you can take this protobufs and make the",
    "start": "1044519",
    "end": "1051169"
  },
  {
    "text": "according make the cause of chording lee to fuzz the api interface so as we",
    "start": "1051169",
    "end": "1060779"
  },
  {
    "start": "1059000",
    "end": "1117000"
  },
  {
    "text": "mentioned already the k2 scaling fuzzing is not through just throwing more calls at the problem but actually through",
    "start": "1060779",
    "end": "1066659"
  },
  {
    "text": "educating developers so as an example our team has a very modest number of",
    "start": "1066659",
    "end": "1073589"
  },
  {
    "text": "five security engineers but we are responsible for the fashion of almost all of Google so to get developers to",
    "start": "1073589",
    "end": "1081119"
  },
  {
    "text": "actually write puzzles you have to remove as much friction as possible to help them get started this means writing",
    "start": "1081119",
    "end": "1086549"
  },
  {
    "text": "good documentation good examples to point them to for writing a good efficient fuzzer build systems of build system support and",
    "start": "1086549",
    "end": "1093210"
  },
  {
    "text": "stuff like that so more generally what you want to do is make this great box 14 through Lib buzzer or AFL a first-class",
    "start": "1093210",
    "end": "1099779"
  },
  {
    "text": "citizen in the development process and make it as ubiquitous as writing a unit test and one last note here is that",
    "start": "1099779",
    "end": "1106679"
  },
  {
    "text": "developers often better at writing fuzzers than security engineers which in this approach because they understand",
    "start": "1106679",
    "end": "1112589"
  },
  {
    "text": "they're encouraged a lot better so now",
    "start": "1112589",
    "end": "1118679"
  },
  {
    "start": "1117000",
    "end": "1122000"
  },
  {
    "text": "that we have fuzzers we need to set up a build pipeline so far as puzzles should",
    "start": "1118679",
    "end": "1124169"
  },
  {
    "text": "be built with compile time instrumentation such as address sanitizer and memory sanitizer these are",
    "start": "1124169",
    "end": "1130019"
  },
  {
    "text": "built into the clang over vm compilers and they can help catch more memory",
    "start": "1130019",
    "end": "1135570"
  },
  {
    "text": "safety issues and a very modest performance penalty and address sanitizer actually works on most major",
    "start": "1135570",
    "end": "1141450"
  },
  {
    "text": "platforms including windows so we also need to build a fuzzing engine and compile the fuzzers with courage",
    "start": "1141450",
    "end": "1147979"
  },
  {
    "text": "instrumentation for the fuzzing engine to do its magic and once again if you're using crying this can be as easy as",
    "start": "1147979",
    "end": "1153539"
  },
  {
    "text": "adding a single command line flag to their compilation flags",
    "start": "1153539",
    "end": "1158898"
  },
  {
    "start": "1160000",
    "end": "1255000"
  },
  {
    "text": "so one thing with most software noticed is that if you have asserts and similar debug logging in your code they tend not",
    "start": "1161370",
    "end": "1168570"
  },
  {
    "text": "to do very well in the face of untrusted input so they can cause very noisy crashes which can actually actually hide",
    "start": "1168570",
    "end": "1174510"
  },
  {
    "text": "nasty real crashes so in the interests of speed and catching more interesting",
    "start": "1174510",
    "end": "1180990"
  },
  {
    "text": "bugs we recommend fuzzing a build where these the assertions are disabled but if",
    "start": "1180990",
    "end": "1187350"
  },
  {
    "text": "you're dedicated and you want to still want to catch these two such failures you can still have an additional build",
    "start": "1187350",
    "end": "1192360"
  },
  {
    "text": "to catch them another factor is optimization able so we want fuzzes to",
    "start": "1192360",
    "end": "1197940"
  },
  {
    "text": "be fast so they can explore more state faster but at the same time if you turn up the optimization level of your",
    "start": "1197940",
    "end": "1204810"
  },
  {
    "text": "compiler that might do for these things like optimizing our branches and this makes coverage kind of fuzzing worse so",
    "start": "1204810",
    "end": "1212250"
  },
  {
    "text": "you want to find a compromise between speed and being able to find bugs and we've actually seen more bugs being",
    "start": "1212250",
    "end": "1219840"
  },
  {
    "text": "found this way by turning down optimization levels so if you're familiar with clang or GCC optimization",
    "start": "1219840",
    "end": "1225210"
  },
  {
    "text": "levels you might want to set something like a one as opposed to a zero or two",
    "start": "1225210",
    "end": "1230360"
  },
  {
    "text": "and finally this building infrastructure should be continuous and she automatically build new revisions of",
    "start": "1230360",
    "end": "1236640"
  },
  {
    "text": "your codebase as often as possible and ideally it should be an extension of any existing build infrastructure so you",
    "start": "1236640",
    "end": "1242820"
  },
  {
    "text": "don't have to have extra maintenance burden and this finally these builds",
    "start": "1242820",
    "end": "1248040"
  },
  {
    "text": "should be stored somewhere maybe in a cloud that is easily accessible by your fuzzing infrastructure so now that we",
    "start": "1248040",
    "end": "1257910"
  },
  {
    "start": "1255000",
    "end": "1262000"
  },
  {
    "text": "have builds we can actually talk about the fuzzy machines a rough approximation",
    "start": "1257910",
    "end": "1264600"
  },
  {
    "start": "1262000",
    "end": "1314000"
  },
  {
    "text": "of how we scale our fuzzing in terms of our fuzzing BOTS is shown here so the majority are fuzzy things done on this",
    "start": "1264600",
    "end": "1271140"
  },
  {
    "text": "cheap preemptable or spot cloud VMs instances these instances that have way",
    "start": "1271140",
    "end": "1276390"
  },
  {
    "text": "cheaper but they can be shut down at any time by the cloud infrastructure the fuzz in itself can be interrupted",
    "start": "1276390",
    "end": "1282480"
  },
  {
    "text": "without much harm so it doesn't matter so we can scale a lot more cheaply by using these instances however we also",
    "start": "1282480",
    "end": "1289410"
  },
  {
    "text": "have a bunch of more important tasks that we need in a tower infrastructure to do that can't be interrupted which",
    "start": "1289410",
    "end": "1294690"
  },
  {
    "text": "we'll talk about in the later slides so we have a very small number of more expensive machines carrying out these tasks and these tasks are all just",
    "start": "1294690",
    "end": "1302570"
  },
  {
    "text": "distributed by a task queue that's for every single platform we have and then",
    "start": "1302570",
    "end": "1308040"
  },
  {
    "text": "we have a global data store where we write crashes data - so on a single",
    "start": "1308040",
    "end": "1316860"
  },
  {
    "start": "1314000",
    "end": "1389000"
  },
  {
    "text": "fuzzum bots the first step of fuzzing is to pick which first target to run so in a large project like Chrome you can have",
    "start": "1316860",
    "end": "1323580"
  },
  {
    "text": "hundreds if not thousands of first targets and not all of them might be worth fuzzing as an example you might have a very",
    "start": "1323580",
    "end": "1330960"
  },
  {
    "text": "simple fuzzer that's testing something like sha-1 hashing it's not very likely you'll find memory corruption bug in",
    "start": "1330960",
    "end": "1337110"
  },
  {
    "text": "that on the other hand you might have a fuzzy which is testing xml parsing which is more complex and buckram bug prone so",
    "start": "1337110",
    "end": "1344580"
  },
  {
    "text": "you want to give more CPU cycles to that especially when you have limited CPU resources so what we do is we",
    "start": "1344580",
    "end": "1350760"
  },
  {
    "text": "automatically prioritize which first targets to run based on the stats and metrics we collect from them from",
    "start": "1350760",
    "end": "1356490"
  },
  {
    "text": "running them already so we want to prioritize targets that aren't tiny and",
    "start": "1356490",
    "end": "1361910"
  },
  {
    "text": "actively gain any coverage over targets that aren't making much progress in",
    "start": "1361910",
    "end": "1368340"
  },
  {
    "text": "getting new coverage or if they're very small however maybe targets that are crashing instantly because of some",
    "start": "1368340",
    "end": "1373950"
  },
  {
    "text": "configuration issue and also some sanitizers are more useful than others",
    "start": "1373950",
    "end": "1378990"
  },
  {
    "text": "so address sanitizer caches the majority of our security issues so we give more",
    "start": "1378990",
    "end": "1384450"
  },
  {
    "text": "cycles to address sanitizer so every",
    "start": "1384450",
    "end": "1391290"
  },
  {
    "start": "1389000",
    "end": "1492000"
  },
  {
    "text": " target also builds up a corpus of inputs as a runs and gains coverage",
    "start": "1391290",
    "end": "1396650"
  },
  {
    "text": "this is shared between all facing bots so when a fuzzing job starts on a single",
    "start": "1396650",
    "end": "1402180"
  },
  {
    "text": "fuzzy machine it downloads the current global corpus and it starts fuzzing from that and then once it's done you might",
    "start": "1402180",
    "end": "1409200"
  },
  {
    "text": "have found new inputs that cause new coverage say you upload those files back into the global corpus now because we",
    "start": "1409200",
    "end": "1415680"
  },
  {
    "text": "are fuzzy in parallel it's possible that we'll be uploading redundant units that cover the same thing so we have a",
    "start": "1415680",
    "end": "1421620"
  },
  {
    "text": "periodic job that we call corpus printing that does something called accomplish distillation on a liberal",
    "start": "1421620",
    "end": "1427050"
  },
  {
    "text": "corpus this means that we take the corpus and that we minimize it such that the number",
    "start": "1427050",
    "end": "1432900"
  },
  {
    "text": "of hours is as small as possible but the coverage it the coverage has is still",
    "start": "1432900",
    "end": "1437910"
  },
  {
    "text": "the same we also have this thing called a quarantine occasionally things in your",
    "start": "1437910",
    "end": "1444540"
  },
  {
    "text": "corpus might start crashing a target and this would kind of hinder your fuzzing because it will just bail out on a crash",
    "start": "1444540",
    "end": "1451200"
  },
  {
    "text": "and not make any good progress so for those cases we will put those two test cases into a quarantine and once they",
    "start": "1451200",
    "end": "1458040"
  },
  {
    "text": "stop crashing we'll put them back into the main corpus and we also have this trick called cross pollination this is",
    "start": "1458040",
    "end": "1465360"
  },
  {
    "text": "where we take the corpus of other buzzards and we try to add them to our corpus for our current target this is",
    "start": "1465360",
    "end": "1472980"
  },
  {
    "text": "useful if you have multiple fuzzers that are fuzzy in the same or similar input format for example if you have multiple",
    "start": "1472980",
    "end": "1479850"
  },
  {
    "text": "JPEG libraries in your project you would have something multiple JPEG buzzes and it's very likely that the corpora for",
    "start": "1479850",
    "end": "1487140"
  },
  {
    "text": "the photos to fuzzles can be shared when",
    "start": "1487140",
    "end": "1494190"
  },
  {
    "start": "1492000",
    "end": "1532000"
  },
  {
    "text": "it comes to fasten yourself there's also no perfect search eristic for example lip buzzer comes with different optional",
    "start": "1494190",
    "end": "1500820"
  },
  {
    "text": "search strategies such as value profiling and also automatically",
    "start": "1500820",
    "end": "1506090"
  },
  {
    "text": "generated dictionaries and additionally we can apply our own search strategies such as starting with only a subset of a",
    "start": "1506090",
    "end": "1513300"
  },
  {
    "text": "global corpus instead of the entire corpus and this can have really mixed results depending on which target they",
    "start": "1513300",
    "end": "1518820"
  },
  {
    "text": "used on we also have additional mutaters such as read AMSA and we're working on",
    "start": "1518820",
    "end": "1524340"
  },
  {
    "text": "an ml based mutator as well but again these get mixed results based on which target we use them one so how do we tell",
    "start": "1524340",
    "end": "1534180"
  },
  {
    "start": "1532000",
    "end": "1599000"
  },
  {
    "text": "which combination of fuzzing strategies to use so ultimately we want to pick the set of strategies such that we maximize",
    "start": "1534180",
    "end": "1541080"
  },
  {
    "text": "the coverage growth of our target but it's really not easy to figure this out ahead of time how often we want to run a",
    "start": "1541080",
    "end": "1550080"
  },
  {
    "text": "particular strategy with a limited set of CPUs so there's an academic name for this which is the multi-armed bandit",
    "start": "1550080",
    "end": "1556620"
  },
  {
    "text": "problem and how we try to solve this is we have a hard coded table",
    "start": "1556620",
    "end": "1561720"
  },
  {
    "text": "of weights and we on an initial set of",
    "start": "1561720",
    "end": "1566970"
  },
  {
    "text": "runs we pick random strategies based on those weights and then our subsequent runs because we have metrics and stats",
    "start": "1566970",
    "end": "1573690"
  },
  {
    "text": "from those runs wrecking users to inform our future ones of future strategy selection so hopefully what we end up",
    "start": "1573690",
    "end": "1581130"
  },
  {
    "text": "with is we pick a set of strategies that's close to the optimal set for each target now that we have a scalable",
    "start": "1581130",
    "end": "1592140"
  },
  {
    "text": "fighting pattern going we are faced with another very important problem which is how do we triage these thousands of",
    "start": "1592140",
    "end": "1598020"
  },
  {
    "text": "crashes so the first part of triage is",
    "start": "1598020",
    "end": "1603450"
  },
  {
    "start": "1599000",
    "end": "1653000"
  },
  {
    "text": "deduplication so what we do is for each crash we generate a triple and the",
    "start": "1603450",
    "end": "1609270"
  },
  {
    "text": "triple consists of a crash type the type of a crash can be like a user after three and all your reference stuff like that which are at the crash state which",
    "start": "1609270",
    "end": "1616500"
  },
  {
    "text": "is a string derived from the stack trace and whether or not this crash is a security bug so the crash States which",
    "start": "1616500",
    "end": "1623880"
  },
  {
    "text": "is generated from the stack trace is the most important part here and is taken as the top three interesting frames from",
    "start": "1623880",
    "end": "1630480"
  },
  {
    "text": "the stack so we filter our frames that aren't very interesting to us for deduplication purposes such as inline",
    "start": "1630480",
    "end": "1636870"
  },
  {
    "text": "frames like Lipsy functions or just general logging functions and in the case of out of memory conditions or",
    "start": "1636870",
    "end": "1643260"
  },
  {
    "text": "timeouts it's not easy to get a reliable stack trace that's consistent for them so we only found one of those at a time",
    "start": "1643260",
    "end": "1651980"
  },
  {
    "text": "so let's go through an example here we have a crash in Chrome",
    "start": "1652400",
    "end": "1657510"
  },
  {
    "start": "1653000",
    "end": "1697000"
  },
  {
    "text": "which is actually a debug check failure and to generate the crash state for this",
    "start": "1657510",
    "end": "1664140"
  },
  {
    "text": "we take the error message from the D check failure and then we'll skip over",
    "start": "1664140",
    "end": "1669270"
  },
  {
    "text": "the first three frames and the reason being is the first frame is a Lipsy function that's not very interesting for",
    "start": "1669270",
    "end": "1674820"
  },
  {
    "text": "deduplication the second one is a login function not interesting and the third one is an",
    "start": "1674820",
    "end": "1679830"
  },
  {
    "text": "inline frame and it's very likely that's not interesting for the duplication purposes so then we skip over those",
    "start": "1679830",
    "end": "1685740"
  },
  {
    "text": "three and take the next two and the result we have here is a string that's both human readable and also can be used",
    "start": "1685740",
    "end": "1691620"
  },
  {
    "text": "as part of a key for deduplicating crashes",
    "start": "1691620",
    "end": "1696020"
  },
  {
    "start": "1697000",
    "end": "1739000"
  },
  {
    "text": "so while we have the deduplication method are just described it's not enough unique bugs can manifests with",
    "start": "1697940",
    "end": "1705240"
  },
  {
    "text": "very similar but subtly different statuses so before we find any bugs we",
    "start": "1705240",
    "end": "1710730"
  },
  {
    "text": "do a second round of deduplication called grouping we use something called string at a distance to compare all the",
    "start": "1710730",
    "end": "1716580"
  },
  {
    "text": "crashes we have and group the ones that are under some threshold and this is what we're very well for us on",
    "start": "1716580",
    "end": "1722460"
  },
  {
    "text": "real-world real-world bugs so on the right we have for crashes they look very similar but they're actually very subtly",
    "start": "1722460",
    "end": "1729149"
  },
  {
    "text": "different and it's very likely that they all have the same root cause so instead of filing for bugs for these were only",
    "start": "1729149",
    "end": "1735210"
  },
  {
    "text": "following one book another time",
    "start": "1735210",
    "end": "1741210"
  },
  {
    "start": "1739000",
    "end": "1809000"
  },
  {
    "text": "providing a minimize repeat user is also very important to get a developer to fix a bug they can otherwise a very",
    "start": "1741210",
    "end": "1748500"
  },
  {
    "text": "complicated reproducer will need more time to analyze and understand it can",
    "start": "1748500",
    "end": "1755129"
  },
  {
    "text": "also help make free production less flaky because if you remove the unnecessary parts of a reproducer",
    "start": "1755129",
    "end": "1760789"
  },
  {
    "text": "there's unnecessary parts could actually potentially prevent the actual book from getting triggered so first i generated",
    "start": "1760789",
    "end": "1767460"
  },
  {
    "text": "test cases can be hundreds of kilobytes if not megabytes long and we found that most of a time you can minimize this",
    "start": "1767460",
    "end": "1773190"
  },
  {
    "text": "down to buy orders several orders of magnitude so example here we have a test case that's 43 kilobytes we can minimize",
    "start": "1773190",
    "end": "1780240"
  },
  {
    "text": "it at the end to 470 bytes so if you use their father in NFL they have this",
    "start": "1780240",
    "end": "1785700"
  },
  {
    "text": "functionality built into them and it's very fast if you have black box fuzzies we also built our own black box",
    "start": "1785700",
    "end": "1792690"
  },
  {
    "text": "minimization it's a bit slower but it works well with more complicated test cases like HTML as well because HTML can",
    "start": "1792690",
    "end": "1799799"
  },
  {
    "text": "have dependencies you can have gestures and you can have command line argument dependencies as well and we handle all",
    "start": "1799799",
    "end": "1806220"
  },
  {
    "text": "of them in our experience a large chunk",
    "start": "1806220",
    "end": "1811289"
  },
  {
    "start": "1809000",
    "end": "1860000"
  },
  {
    "text": "of bugs that we find actually regressions the number here we have is 40% so this means most of the bugs",
    "start": "1811289",
    "end": "1818039"
  },
  {
    "text": "fuzzing finds bugs that Irish recently introduced to the cred base and this is",
    "start": "1818039",
    "end": "1823889"
  },
  {
    "text": "why continuous version is very important so to help with triage with the format",
    "start": "1823889",
    "end": "1829280"
  },
  {
    "text": "bisect or binary search to figure out which commit caused the book and we can",
    "start": "1829280",
    "end": "1834770"
  },
  {
    "text": "reuse the exact same builds that we just used for fuzzing here and the more frequently get builds the more precise",
    "start": "1834770",
    "end": "1841370"
  },
  {
    "text": "that bisection range we get so as an example with Chrome we build every single revision that we get in our code",
    "start": "1841370",
    "end": "1848030"
  },
  {
    "text": "base so a lot of a time our bear sex can point us to the exact commits that cause the regression and this means we can",
    "start": "1848030",
    "end": "1853910"
  },
  {
    "text": "revert far earlier and prevent code a buggy curve for making it through production and now Abhishek will",
    "start": "1853910",
    "end": "1861950"
  },
  {
    "start": "1860000",
    "end": "1988000"
  },
  {
    "text": "continue Thank You Oliver",
    "start": "1861950",
    "end": "1867010"
  },
  {
    "text": "so some of our most useful features that we have in philosophers came from",
    "start": "1867010",
    "end": "1872480"
  },
  {
    "text": "developer requests and this is an example of one of them we call it variant analysis what this really means",
    "start": "1872480",
    "end": "1880340"
  },
  {
    "text": "is once developer creates a crash from a particular build configuration they find",
    "start": "1880340",
    "end": "1885680"
  },
  {
    "text": "it really hard to try to create all the possible build configuration just to",
    "start": "1885680",
    "end": "1890750"
  },
  {
    "text": "understand the crash signature to give you an example a very simple and",
    "start": "1890750",
    "end": "1896270"
  },
  {
    "text": "important use case is a developer gets a crash from a release build and they want",
    "start": "1896270",
    "end": "1901730"
  },
  {
    "text": "to reproduce it again in a debug but just to know if it triggered any assertion because that can point to the",
    "start": "1901730",
    "end": "1907670"
  },
  {
    "text": "root cause and maybe even the CV arity of the bug so we do that automatically and if you can think of different",
    "start": "1907670",
    "end": "1914510"
  },
  {
    "text": "configurations there can be many like think of the various sanitizers we have like a science and you beasts and",
    "start": "1914510",
    "end": "1921220"
  },
  {
    "text": "different platforms architectures like 32-bit 64-bit x86 so all this is done",
    "start": "1921220",
    "end": "1928820"
  },
  {
    "text": "automatically another example I have here is sometimes it can help with",
    "start": "1928820",
    "end": "1934670"
  },
  {
    "text": "understanding some of the root causes by just looking at the crash signature so as you can see here this is a binutils",
    "start": "1934670",
    "end": "1941870"
  },
  {
    "text": "library crash that shows up as an undefined shift in ub san so you will",
    "start": "1941870",
    "end": "1949010"
  },
  {
    "text": "probably guess that this expression itself overflows so one of the first",
    "start": "1949010",
    "end": "1955010"
  },
  {
    "text": "thing that comes to mind is probably the size member itself is",
    "start": "1955010",
    "end": "1960390"
  },
  {
    "text": "overflowed and that's causing this expression to overflow but when you look",
    "start": "1960390",
    "end": "1965430"
  },
  {
    "text": "at the a sound signature it tells you it's a he buffer it's a global buffer overflow what this really means is the",
    "start": "1965430",
    "end": "1972780"
  },
  {
    "text": "book the overflow actually happened when accessing the size member so something is really wrong with the opcode pointer",
    "start": "1972780",
    "end": "1979710"
  },
  {
    "text": "itself so that's an easy analysis without trying to go through the hassle",
    "start": "1979710",
    "end": "1985650"
  },
  {
    "text": "of reproducing through different birds now we have all the metadata for these",
    "start": "1985650",
    "end": "1993390"
  },
  {
    "start": "1988000",
    "end": "2054000"
  },
  {
    "text": "crashes these are all unique crashes what do we do you might think of a",
    "start": "1993390",
    "end": "1999060"
  },
  {
    "text": "manual tree Archer kicking in and trying to analyze each and every bug report and clicking a file button just to give you",
    "start": "1999060",
    "end": "2007280"
  },
  {
    "text": "an example of our OSS for instance itself we get like 150 bucks a week",
    "start": "2007280",
    "end": "2013120"
  },
  {
    "text": "that's really hard for any manual triage or triage yours to go through so with",
    "start": "2013120",
    "end": "2020330"
  },
  {
    "text": "our proven deduplication method we are able to file all bugs automatically",
    "start": "2020330",
    "end": "2025430"
  },
  {
    "text": "without any developer or annoyance we also attach this special label called",
    "start": "2025430",
    "end": "2031970"
  },
  {
    "text": "false blocker what this really means is if your fuzzer is running into some top",
    "start": "2031970",
    "end": "2038210"
  },
  {
    "text": "crashes we these can be even like stability issues we try to highlight it",
    "start": "2038210",
    "end": "2043550"
  },
  {
    "text": "to the developer to fix them soon because they will make your further more",
    "start": "2043550",
    "end": "2048580"
  },
  {
    "text": "productive and even finding more security vulnerabilities here are some",
    "start": "2048580",
    "end": "2056060"
  },
  {
    "start": "2054000",
    "end": "2073000"
  },
  {
    "text": "examples of the crashes we found in the popular open ssl library many of these",
    "start": "2056060",
    "end": "2062419"
  },
  {
    "text": "for just like one day regressions which the developer fixed before they could",
    "start": "2062419",
    "end": "2067639"
  },
  {
    "text": "become anything serious or even made to any release channels here is an example",
    "start": "2067640",
    "end": "2075440"
  },
  {
    "start": "2073000",
    "end": "2111000"
  },
  {
    "text": "test case report that we share with the developer this includes all the crash",
    "start": "2075440",
    "end": "2081320"
  },
  {
    "text": "metadata information and another thing to highlight here is the stack trace",
    "start": "2081320",
    "end": "2086480"
  },
  {
    "text": "section so let's say if developer starts working on a bug a week later from the",
    "start": "2086480",
    "end": "2092960"
  },
  {
    "text": "original report they still want to know the stack trace on tip of tree trunk so we periodically",
    "start": "2092960",
    "end": "2099559"
  },
  {
    "text": "update it automatically so that they don't get a stale version and we're line",
    "start": "2099559",
    "end": "2104960"
  },
  {
    "text": "numbers don't mismatch or there is let us say a code refactoring that has happened now once you have a steady",
    "start": "2104960",
    "end": "2114470"
  },
  {
    "start": "2111000",
    "end": "2189000"
  },
  {
    "text": "stream of these bugs how do you prioritize fixing them so with the",
    "start": "2114470",
    "end": "2120079"
  },
  {
    "text": "volume of bugs that you will find or that we find it's really hard to do like",
    "start": "2120079",
    "end": "2128020"
  },
  {
    "text": "important and like in-depth exploitability analysis on each one of them so let's say even if you have a",
    "start": "2128020",
    "end": "2135170"
  },
  {
    "text": "team like project zero you cannot really scale to analyzing hundreds of these bugs so what we do here is we do a rough",
    "start": "2135170",
    "end": "2144440"
  },
  {
    "text": "prioritization based on the crash types these we deduce from the what we get",
    "start": "2144440",
    "end": "2152150"
  },
  {
    "text": "from the sanitizer stack trace so for example I use after free bug is classified as a security bug where as a",
    "start": "2152150",
    "end": "2159950"
  },
  {
    "text": "null pointer dereference which is 99 percent of the time not important is",
    "start": "2159950",
    "end": "2165049"
  },
  {
    "text": "classified as a functional bug we also do some prioritization based on the",
    "start": "2165049",
    "end": "2170599"
  },
  {
    "text": "product itself so to give you an example of Chrome we have different processes running at different privilege levels so",
    "start": "2170599",
    "end": "2177920"
  },
  {
    "text": "like a renderer crash which is in a sandbox process is less severe than a",
    "start": "2177920",
    "end": "2184039"
  },
  {
    "text": "browser process crash which is unsigned boxed and finally we have filed this bug",
    "start": "2184039",
    "end": "2193279"
  },
  {
    "start": "2189000",
    "end": "2242000"
  },
  {
    "text": "developer has fixed it what do we do next do we really assume that the developer",
    "start": "2193279",
    "end": "2198650"
  },
  {
    "text": "has fixed this correctly in our experience with chrome we have seen",
    "start": "2198650",
    "end": "2203690"
  },
  {
    "text": "developers making mistakes and I think this is common with any product developers might test your fix",
    "start": "2203690",
    "end": "2210920"
  },
  {
    "text": "incorrectly in a non instrumented build and what happens next is they will just",
    "start": "2210920",
    "end": "2216529"
  },
  {
    "text": "order you when your release notes go out so to avoid that kind of scenario we",
    "start": "2216529",
    "end": "2221869"
  },
  {
    "text": "make sure we verify the fix automatically as part of the infrastructure and",
    "start": "2221869",
    "end": "2227510"
  },
  {
    "text": "another advantage of this thing which is if let's say an unrelated batch or a",
    "start": "2227510",
    "end": "2232880"
  },
  {
    "text": "code refactoring fix this bug you get to know about it automatically and can",
    "start": "2232880",
    "end": "2238190"
  },
  {
    "text": "uptake that fix orally on finally what",
    "start": "2238190",
    "end": "2245090"
  },
  {
    "start": "2242000",
    "end": "2313000"
  },
  {
    "text": "else can you do you can actually plug in your external reports that you get from",
    "start": "2245090",
    "end": "2251359"
  },
  {
    "text": "your vulnerability rewards program into the fuzzing infrastructure itself this",
    "start": "2251359",
    "end": "2256850"
  },
  {
    "text": "is really beneficial and worked well for us because it gives us all the features",
    "start": "2256850",
    "end": "2262460"
  },
  {
    "text": "of automated triage so things like automated deduplication fix verification comes for free we have",
    "start": "2262460",
    "end": "2270020"
  },
  {
    "text": "also taken it to the next level by hosting this thing called a fuzzy reward program what this means is instead of a",
    "start": "2270020",
    "end": "2279310"
  },
  {
    "text": "reporter running there further one time on their single machine under their desk",
    "start": "2279310",
    "end": "2286150"
  },
  {
    "text": "we run it continuously at scale on our cloud and this gives even much better",
    "start": "2286150",
    "end": "2292910"
  },
  {
    "text": "reports and higher quality reports get filed ultimately in the bug tracker we",
    "start": "2292910",
    "end": "2299630"
  },
  {
    "text": "have reporters which have submitted fuzzers years back and they are still finding new vulnerabilities because code",
    "start": "2299630",
    "end": "2307310"
  },
  {
    "text": "regresses over time and they get paid automatically now you have got all the",
    "start": "2307310",
    "end": "2317030"
  },
  {
    "start": "2313000",
    "end": "2326000"
  },
  {
    "text": "bugs you have fixed all the bugs what do you Nick do next to get more bugs you",
    "start": "2317030",
    "end": "2323780"
  },
  {
    "text": "need to improve your fuzzers so what we do here is we give these metrics to the",
    "start": "2323780",
    "end": "2331220"
  },
  {
    "start": "2326000",
    "end": "2362000"
  },
  {
    "text": "fuzzer author to make changes to the further and make them more efficient so",
    "start": "2331220",
    "end": "2336890"
  },
  {
    "text": "one of the things as an example here is execution speed so we want the fuzzers",
    "start": "2336890",
    "end": "2342080"
  },
  {
    "text": "to be fast so we recommend like they should have at least a thousand executions per second we also recommend",
    "start": "2342080",
    "end": "2350270"
  },
  {
    "text": "that they don't run into any blocking issues so things like they shouldn't run into any out of memory issues leaks or",
    "start": "2350270",
    "end": "2356780"
  },
  {
    "text": "timeouts",
    "start": "2356780",
    "end": "2359410"
  },
  {
    "start": "2362000",
    "end": "2383000"
  },
  {
    "text": "we also shared this view which we call as crash statistics this gives a",
    "start": "2362450",
    "end": "2367859"
  },
  {
    "text": "high-level overview to the developer on which top crashes there further is",
    "start": "2367859",
    "end": "2373470"
  },
  {
    "text": "running into what are the frequency for those crashes and which platforms or let's say devices like Android devices",
    "start": "2373470",
    "end": "2381180"
  },
  {
    "text": "it impacts and this one is kind of like",
    "start": "2381180",
    "end": "2387240"
  },
  {
    "start": "2383000",
    "end": "2446000"
  },
  {
    "text": "developers favorite which is knowing what parts of the code that this first targets really hits the unfortunate part",
    "start": "2387240",
    "end": "2395700"
  },
  {
    "text": "here is code coverage cannot be really collected during fuzzing time there are",
    "start": "2395700",
    "end": "2401700"
  },
  {
    "text": "two reasons for it one is it makes the first target extremely slow like at",
    "start": "2401700",
    "end": "2406920"
  },
  {
    "text": "least a four to five weeks slowdown and there is just too much data to",
    "start": "2406920",
    "end": "2412440"
  },
  {
    "text": "accumulate for every fuzzing session so things like which lines are covered which functions are covered which",
    "start": "2412440",
    "end": "2419369"
  },
  {
    "text": "regions or expressions are covered that's just too much data to capture in every fuzzing run so what we do instead",
    "start": "2419369",
    "end": "2426960"
  },
  {
    "text": "here is in a daily run we would run every father with the minimized corpus",
    "start": "2426960",
    "end": "2433260"
  },
  {
    "text": "and use that to generate up our first target report and also combine them to",
    "start": "2433260",
    "end": "2440250"
  },
  {
    "text": "like a power of project report so let's",
    "start": "2440250",
    "end": "2448770"
  },
  {
    "start": "2446000",
    "end": "2454000"
  },
  {
    "text": "discuss some more applications of fuzzing like everyone loves finding security bugs but what else can we find",
    "start": "2448770",
    "end": "2456080"
  },
  {
    "text": "fuzzing has been recently very useful has been used to find correctness bugs",
    "start": "2456080",
    "end": "2462359"
  },
  {
    "text": "so to give you an example we have this project called crypto fuzz as part of",
    "start": "2462359",
    "end": "2467700"
  },
  {
    "text": "our OSS first service this tries to compare different cryptographic applications to make sure that passing",
    "start": "2467700",
    "end": "2475770"
  },
  {
    "text": "let's say the same input produces the same output and it tests across libraries like open SSL new TLS etc you",
    "start": "2475770",
    "end": "2485310"
  },
  {
    "text": "can also use correctness fuzzing to compare different implementations of the",
    "start": "2485310",
    "end": "2490710"
  },
  {
    "text": "same product across let's say different compilers or optimization levels to give you an",
    "start": "2490710",
    "end": "2497280"
  },
  {
    "text": "example if you have code that you it's written in handwritten assembly for performance and have also have a pure C",
    "start": "2497280",
    "end": "2504150"
  },
  {
    "text": "implementation you want to ensure that this handwritten assembly code is correct so you can use it for that and",
    "start": "2504150",
    "end": "2512120"
  },
  {
    "text": "as we mentioned before fuzzing really finds interesting and critical stability",
    "start": "2512120",
    "end": "2518490"
  },
  {
    "text": "vulnerability or stability buds and if you fix those you will have a more",
    "start": "2518490",
    "end": "2523500"
  },
  {
    "text": "productive further fuzzing can also be",
    "start": "2523500",
    "end": "2529680"
  },
  {
    "text": "used to guide your future design and development decisions so to give you an example let's say you have a third-party",
    "start": "2529680",
    "end": "2537870"
  },
  {
    "text": "library to integrate let's say JSON CPP which is like a fast JSON parsing",
    "start": "2537870",
    "end": "2543240"
  },
  {
    "text": "library you want to ensure that three months later when you upgrade to a new",
    "start": "2543240",
    "end": "2549180"
  },
  {
    "text": "version of this library it's still secure while being fast so to make those",
    "start": "2549180",
    "end": "2556950"
  },
  {
    "text": "decisions you should ensure that that library is continuously first and at",
    "start": "2556950",
    "end": "2562380"
  },
  {
    "text": "least for the open source libraries you can use Oasis fuzz as a prerequisite",
    "start": "2562380",
    "end": "2567780"
  },
  {
    "text": "before integrating such libraries fuzzing has also been used to guide some",
    "start": "2567780",
    "end": "2575190"
  },
  {
    "text": "of the security mitigation efforts so to give you an example like for better",
    "start": "2575190",
    "end": "2581490"
  },
  {
    "text": "sandboxing or a locator hardening where let's say our area of bugs you have seen",
    "start": "2581490",
    "end": "2587720"
  },
  {
    "text": "happening recorrect you see bugs happening in a recurring fashion so you can actually take a",
    "start": "2587720",
    "end": "2594390"
  },
  {
    "text": "performance hit and add those security mitigations and finally let's go over",
    "start": "2594390",
    "end": "2603000"
  },
  {
    "text": "what results we have so we have some great results across chrome this is",
    "start": "2603000",
    "end": "2609540"
  },
  {
    "start": "2605000",
    "end": "2629000"
  },
  {
    "text": "where we started then we moved to oh s s fuzzing using our OSS for a service and recently",
    "start": "2609540",
    "end": "2617130"
  },
  {
    "text": "we started fuzzing all of Google overall we have found 40,000 bucks so far this",
    "start": "2617130",
    "end": "2623640"
  },
  {
    "text": "includes both stability or like functional and security bugs in terms of just",
    "start": "2623640",
    "end": "2631440"
  },
  {
    "text": "security vulnerabilities alone we have found more than 8500 issues in chrome",
    "start": "2631440",
    "end": "2637680"
  },
  {
    "text": "and OSS fuzz and the more important thing to know here is we don't just find",
    "start": "2637680",
    "end": "2644190"
  },
  {
    "text": "bugs we actually get them fixed so thanks to this automated triage process in OSS land we have more than 91 percent",
    "start": "2644190",
    "end": "2652770"
  },
  {
    "text": "of the bugs fixed and that's something unheard of another thing we do is we do",
    "start": "2652770",
    "end": "2660270"
  },
  {
    "text": "this one-on-one evangelism with the developers so that fuzzing becomes as ubiquitous as unit testing we also hold",
    "start": "2660270",
    "end": "2669390"
  },
  {
    "text": "like a yearly contest where developers compete on different fuzzer metrics in a",
    "start": "2669390",
    "end": "2675810"
  },
  {
    "text": "leaders board style in a leaderboard style fashion and get fancy shrugs",
    "start": "2675810",
    "end": "2683330"
  },
  {
    "text": "many years it has helped us in even getting like let's say a 25% more first",
    "start": "2683330",
    "end": "2690120"
  },
  {
    "text": "targets than before we have some great results outside of Google as well so our",
    "start": "2690120",
    "end": "2698070"
  },
  {
    "start": "2693000",
    "end": "2729000"
  },
  {
    "text": "OSS first platform has a very visible impact on the security of the OSS",
    "start": "2698070",
    "end": "2703380"
  },
  {
    "text": "ecosystem so if you can think of your favorite open-source library we have CVS",
    "start": "2703380",
    "end": "2709830"
  },
  {
    "text": "in those so like crypto libraries like open SSL XML library like Lib XML - we",
    "start": "2709830",
    "end": "2717780"
  },
  {
    "text": "have even a CVS in the larger browser engines like WebKit Geico and so on so what is our plan for the",
    "start": "2717780",
    "end": "2727950"
  },
  {
    "text": "near future what's next we have seen",
    "start": "2727950",
    "end": "2733170"
  },
  {
    "start": "2729000",
    "end": "2842000"
  },
  {
    "text": "that 40% of the bugs we find our regressions so we can stop some of them",
    "start": "2733170",
    "end": "2739830"
  },
  {
    "text": "if actually we first as part of your continuous integration so like Travis or",
    "start": "2739830",
    "end": "2745950"
  },
  {
    "text": "github actions if we can let us say at least you like five minutes of fuzzing as part of every seal that gets checked",
    "start": "2745950",
    "end": "2753270"
  },
  {
    "text": "in before getting checked in we can actually stop it and prevent the bug from being sneaked",
    "start": "2753270",
    "end": "2760320"
  },
  {
    "text": "in the first place the second idea we have is everyone in",
    "start": "2760320",
    "end": "2766650"
  },
  {
    "text": "the industry focuses a lot on like mostly AFL and some focus on lift further surfacing engines but we really",
    "start": "2766650",
    "end": "2774119"
  },
  {
    "text": "want to evaluate all the work that is coming from academics every year there",
    "start": "2774119",
    "end": "2779819"
  },
  {
    "text": "are at least a hundred new research papers on fuzzing that use these artificial further benchmarks for Lava M",
    "start": "2779819",
    "end": "2786900"
  },
  {
    "text": "we want to really change that we want to give them more real-world software to",
    "start": "2786900",
    "end": "2792000"
  },
  {
    "text": "evaluate against and share that with the community at scale we want to continue",
    "start": "2792000",
    "end": "2799290"
  },
  {
    "text": "improving our fuzzing efficiency so we have some ideas on leveraging more of",
    "start": "2799290",
    "end": "2805440"
  },
  {
    "text": "the different sanitizers like there is a new one called data flow sanitizer which",
    "start": "2805440",
    "end": "2811349"
  },
  {
    "text": "can guide you towards which input bytes are better or will give better results",
    "start": "2811349",
    "end": "2817260"
  },
  {
    "text": "when mutated and finally we want to support more languages right now we have",
    "start": "2817260",
    "end": "2824790"
  },
  {
    "text": "focused quite a lot on the memory unsafe languages like C C++ we have support in",
    "start": "2824790",
    "end": "2831299"
  },
  {
    "text": "our infrastructure for go and rust but we just want to add support for more languages it should be pretty simple",
    "start": "2831299",
    "end": "2838710"
  },
  {
    "text": "it's just a few more parsing signatures and that brings us to the end I have",
    "start": "2838710",
    "end": "2847380"
  },
  {
    "start": "2842000",
    "end": "2945000"
  },
  {
    "text": "three key takeaways for you the first one is security should be or fuzzing",
    "start": "2847380",
    "end": "2855030"
  },
  {
    "text": "should be everyone's job not just a fancy tool for your security team it",
    "start": "2855030",
    "end": "2860880"
  },
  {
    "text": "should be an integral part in the day-to-day development workflow there is",
    "start": "2860880",
    "end": "2867270"
  },
  {
    "text": "no one-size-fits-all solution to fuzzing you have to combine different fuzzing",
    "start": "2867270",
    "end": "2872730"
  },
  {
    "text": "engines like live further AFL with the different fuzzing strategies we",
    "start": "2872730",
    "end": "2878130"
  },
  {
    "text": "mentioned like to give you an example like value profiling corpus subset and mesh them together for optimal fuzzing",
    "start": "2878130",
    "end": "2884869"
  },
  {
    "text": "performance finally you don't really need to scale your security teams you",
    "start": "2884869",
    "end": "2892140"
  },
  {
    "text": "need to instead focus on automating your workflows and skillful writing with the",
    "start": "2892140",
    "end": "2898830"
  },
  {
    "text": "developers so that it becomes as ubiquitous as unit testing to give you",
    "start": "2898830",
    "end": "2905070"
  },
  {
    "text": "an example we are a team of five but we manage 5000 first targets across chrome",
    "start": "2905070",
    "end": "2910380"
  },
  {
    "text": "OSS and all of Google thank you that brings us to the end with that we",
    "start": "2910380",
    "end": "2924450"
  },
  {
    "text": "open the round to questions",
    "start": "2924450",
    "end": "2927589"
  },
  {
    "text": "unlike someone",
    "start": "2933530",
    "end": "2936890"
  },
  {
    "text": "yeah",
    "start": "2940740",
    "end": "2943740"
  },
  {
    "start": "2945000",
    "end": "2965000"
  },
  {
    "text": "hello yes so I have like a few questions I don't know how much time we have but",
    "start": "2946060",
    "end": "2952780"
  },
  {
    "text": "when writing the fascist have you run into any synchronization issues with",
    "start": "2952780",
    "end": "2959090"
  },
  {
    "text": "fascist when they are synchronizing the corpus and so on any concurrency issues",
    "start": "2959090",
    "end": "2965500"
  },
  {
    "start": "2965000",
    "end": "2987000"
  },
  {
    "text": "so most of the fathers are more unit tests style fathers so if you if you",
    "start": "2965890",
    "end": "2972920"
  },
  {
    "text": "really care about concurrency issues you can run a build with like thread sanitizer and that will help you catch",
    "start": "2972920",
    "end": "2979640"
  },
  {
    "text": "those data races but we haven't really run into those things okay",
    "start": "2979640",
    "end": "2989600"
  },
  {
    "text": "the other one is I've seen that you have of course facets for v8 and so on which",
    "start": "2989600",
    "end": "2995810"
  },
  {
    "text": "which stool in do you use to generate that the grammars too fast v8 we use",
    "start": "2995810",
    "end": "3001090"
  },
  {
    "text": "d'amato you use mercenary fascist a brave on open source we use open source like",
    "start": "3001090",
    "end": "3010420"
  },
  {
    "text": "JavaScript parsing libraries to like at the ast and stuff we have custom custom written",
    "start": "3010420",
    "end": "3015490"
  },
  {
    "text": "fuzzers that mutaters ast is in the output the test cases that we use to fuzz them and could you name in any of",
    "start": "3015490",
    "end": "3022180"
  },
  {
    "text": "these open source tools or D'Amato is one of them or so we use babel in one of",
    "start": "3022180",
    "end": "3028900"
  },
  {
    "text": "your father's is that's a javascript library which pauses javascript and the",
    "start": "3028900",
    "end": "3035320"
  },
  {
    "text": "host has abilities to turn a STS into real JavaScript code so it works for us okay and the last two questions do you",
    "start": "3035320",
    "end": "3043720"
  },
  {
    "text": "have any on classifies do you have any any faster attack Longley processes and",
    "start": "3043720",
    "end": "3051100"
  },
  {
    "text": "the last question is on type confusion bugs which usually they don't crash by",
    "start": "3051100",
    "end": "3056410"
  },
  {
    "text": "themselves do you have a hardness do you have a template for these guys kind of bugs so type confusion bugs you can",
    "start": "3056410",
    "end": "3062920"
  },
  {
    "start": "3060000",
    "end": "3101000"
  },
  {
    "text": "easily catch with the undefined behavior sanitizer by enabling a V pointer check",
    "start": "3062920",
    "end": "3068350"
  },
  {
    "text": "so that explicitly catches type confusion bugs for long live processes",
    "start": "3068350",
    "end": "3075500"
  },
  {
    "text": "we have both of these lifts fossil-based phasers which run for longer like even hours at a time so they will catch those",
    "start": "3075500",
    "end": "3082070"
  },
  {
    "text": "things for blackbox fuzzer inside cluster fuzz itself we have this random",
    "start": "3082070",
    "end": "3088070"
  },
  {
    "text": "randomize timeout so for some of the runs it will pick or run Chrome for longer duration than just the default",
    "start": "3088070",
    "end": "3095450"
  },
  {
    "text": "which is like 10 seconds or something so it randomly picks those automatically",
    "start": "3095450",
    "end": "3102190"
  },
  {
    "text": "any other questions I thanks for a talk so I have two questions the first is for",
    "start": "3102190",
    "end": "3108860"
  },
  {
    "text": "v8 have you tried to fast it with lib protobuf mutator so writing a JavaScript",
    "start": "3108860",
    "end": "3115250"
  },
  {
    "text": "grandma I saw some work on that I think we have but because v8 is kind of crazy",
    "start": "3115250",
    "end": "3122330"
  },
  {
    "text": "under the hood coverage credit fuzzing hasn't done so well for us or for for",
    "start": "3122330",
    "end": "3127730"
  },
  {
    "text": "examples are like did non determinism from the garbage collector and just the",
    "start": "3127730",
    "end": "3132980"
  },
  {
    "text": "way it generates code under the hood it just doesn't make it very effective when",
    "start": "3132980",
    "end": "3138470"
  },
  {
    "text": "we apply coverage grant fuzz into it so for DOM and JavaScript fuzzing I would",
    "start": "3138470",
    "end": "3146030"
  },
  {
    "text": "say the black box further have worked much better because there you can define different rules and the thing that",
    "start": "3146030",
    "end": "3153140"
  },
  {
    "text": "really works well is if you mutate existing tests of what we take is we take v8s we take JavaScript tests from",
    "start": "3153140",
    "end": "3160730"
  },
  {
    "text": "other browsers and Oliver was mentioning this fuzzer which does it like combines",
    "start": "3160730",
    "end": "3166970"
  },
  {
    "text": "those tests but understands their structure or ast using babel and then mutates those yes I said we're so our",
    "start": "3166970",
    "end": "3173900"
  },
  {
    "text": "blackbox javascript buzzer just text parts of test cases from whatever we can",
    "start": "3173900",
    "end": "3179270"
  },
  {
    "text": "find and then transmission together into something that makes sense to the engine Thanks and the second question is you",
    "start": "3179270",
    "end": "3186260"
  },
  {
    "start": "3183000",
    "end": "3199000"
  },
  {
    "text": "mentioned the corpus sharing rate so do you do that automatically like you get",
    "start": "3186260",
    "end": "3191330"
  },
  {
    "text": "for example some new JPEG parser and then you match the capacity that would fit those JPEG files automatically or",
    "start": "3191330",
    "end": "3198590"
  },
  {
    "text": "how do you do it so right now it's more randomized because we have these five",
    "start": "3198590",
    "end": "3203630"
  },
  {
    "text": "thousand targets and when we do the score press pruning once a day we would cross",
    "start": "3203630",
    "end": "3209180"
  },
  {
    "text": "pollinate it with some of the corpuses from other of fuzzers like let's say",
    "start": "3209180",
    "end": "3214520"
  },
  {
    "text": "five or ten per day we are working on doing this more until intelligently by",
    "start": "3214520",
    "end": "3219950"
  },
  {
    "text": "understanding the format by this pollination method itself like when you",
    "start": "3219950",
    "end": "3226160"
  },
  {
    "text": "do merging you know the coverage of that corpus so you can intelligently know oh",
    "start": "3226160",
    "end": "3231770"
  },
  {
    "text": "this corpus is from let's say image files or this corpus is let's a font",
    "start": "3231770",
    "end": "3238880"
  },
  {
    "text": "file so we are working on that and that will be added in cluster for us pretty soon",
    "start": "3238880",
    "end": "3245020"
  },
  {
    "start": "3244000",
    "end": "3256000"
  },
  {
    "text": "any other questions yes yes thank you for his dog I was wondering if machine",
    "start": "3245619",
    "end": "3252140"
  },
  {
    "text": "learning could be interesting in producing some fuzzing data yes so as we",
    "start": "3252140",
    "end": "3259010"
  },
  {
    "start": "3256000",
    "end": "3302000"
  },
  {
    "text": "mentioned before we have this mutator which actually improves the corpus",
    "start": "3259010",
    "end": "3264500"
  },
  {
    "text": "itself using this machine learning model called RNN what it does is it tries to",
    "start": "3264500",
    "end": "3269960"
  },
  {
    "text": "Train from different corpus items and then tries to produce similar looking",
    "start": "3269960",
    "end": "3275750"
  },
  {
    "text": "test cases which we think would be more valid then let's say a simple mutator",
    "start": "3275750",
    "end": "3282349"
  },
  {
    "text": "that Lafosse or have so we have some good results specially on text-based formats for that and it's already",
    "start": "3282349",
    "end": "3288859"
  },
  {
    "text": "integrated as part of cluster furs thank you any other questions this one in the",
    "start": "3288859",
    "end": "3295460"
  },
  {
    "text": "back",
    "start": "3295460",
    "end": "3297670"
  },
  {
    "start": "3302000",
    "end": "3327000"
  },
  {
    "text": "hi thanks for the talk so since there is another trend in fuzzing field which",
    "start": "3303030",
    "end": "3308650"
  },
  {
    "text": "called hybrid fighting so if if like OSS fast try to combine like other",
    "start": "3308650",
    "end": "3314830"
  },
  {
    "text": "techniques such as ten analysis or a constraint solving what well you what the point should be we notice",
    "start": "3314830",
    "end": "3321970"
  },
  {
    "text": "too like combining this two technology or is there any future plan for Google",
    "start": "3321970",
    "end": "3327099"
  },
  {
    "start": "3327000",
    "end": "3358000"
  },
  {
    "text": "to be honest sir I believe we've tried countless of these fancy con colic",
    "start": "3327099",
    "end": "3334270"
  },
  {
    "text": "execution tools and we haven't really had much success with them on real-world programs they tend to do well unlike",
    "start": "3334270",
    "end": "3342670"
  },
  {
    "text": "Tway examples but when you apply them to real examples in say OSS fuzz",
    "start": "3342670",
    "end": "3348940"
  },
  {
    "text": "they don't do it very well at the same time I wish I'd mentioned we have a project where we invite academics to to",
    "start": "3348940",
    "end": "3359380"
  },
  {
    "text": "add their work that they're fuzzy engine work to our evaluation service where we",
    "start": "3359380",
    "end": "3366460"
  },
  {
    "text": "try to run benchmarks to actually figure out what fuzzing techniques are actually useful in the real world",
    "start": "3366460",
    "end": "3374250"
  },
  {
    "text": "so thanks for a great talk as you said the functions name and the stack trace",
    "start": "3379650",
    "end": "3386440"
  },
  {
    "text": "is very important when dealing and grouping the crashes what do you do when the entire stack is corrupted and you",
    "start": "3386440",
    "end": "3393940"
  },
  {
    "text": "cannot recover the stack crash trace in",
    "start": "3393940",
    "end": "3400240"
  },
  {
    "start": "3398000",
    "end": "3430000"
  },
  {
    "text": "many of the cases like when we see a corrupted stack we would so for example",
    "start": "3400240",
    "end": "3405310"
  },
  {
    "text": "in a library that is not instrumented we would just have like the library name so we would just use that as a",
    "start": "3405310",
    "end": "3411790"
  },
  {
    "text": "deduplication method or sometimes we would just use let's say the first target name itself so there will be just",
    "start": "3411790",
    "end": "3418780"
  },
  {
    "text": "one bug file for that but there isn't really a solution for those cases we",
    "start": "3418780",
    "end": "3425710"
  },
  {
    "text": "just have to fix the instrumentation part of the thing yeah I guess to expand",
    "start": "3425710",
    "end": "3431770"
  },
  {
    "start": "3430000",
    "end": "3451000"
  },
  {
    "text": "on that like if you're using like address sanitizer most of the time this is very rare because like a SAM will",
    "start": "3431770",
    "end": "3438220"
  },
  {
    "text": "catch it before the stack gets so corrupted and in the cases that we can't",
    "start": "3438220",
    "end": "3443860"
  },
  {
    "text": "we just have a placeholder that everything gets kind of bucket into any",
    "start": "3443860",
    "end": "3452830"
  },
  {
    "text": "other questions thank you everyone Oh",
    "start": "3452830",
    "end": "3459240"
  },
  {
    "start": "3472000",
    "end": "3503000"
  },
  {
    "text": "so this is not strictly a technical question but I think the biggest challenge for most people in this room",
    "start": "3473130",
    "end": "3479970"
  },
  {
    "text": "and introducing fuzzing will be convincing the powers that be that this is a good investment and you're saying",
    "start": "3479970",
    "end": "3486569"
  },
  {
    "text": "you're doing this with a small team but you've managed to push a lot of the work outside of it right to the developers",
    "start": "3486569",
    "end": "3492480"
  },
  {
    "text": "how do you sell that effectively to your dev teams because this is competing with",
    "start": "3492480",
    "end": "3498299"
  },
  {
    "text": "feature development etc so any hints",
    "start": "3498299",
    "end": "3503480"
  },
  {
    "start": "3503000",
    "end": "3577000"
  },
  {
    "text": "okay so the way we have made this really simple is the other security team have",
    "start": "3503480",
    "end": "3509940"
  },
  {
    "text": "first tried to make it simple in the build system itself like supporting all",
    "start": "3509940",
    "end": "3515730"
  },
  {
    "text": "of these memory sanitizer tools and making the fuzzer writing as simple as",
    "start": "3515730",
    "end": "3520980"
  },
  {
    "text": "writing like just 20 lines of code and once you have that then if you talk to a developer and tell them like oh you",
    "start": "3520980",
    "end": "3527700"
  },
  {
    "text": "write a unit test in ten lines you can write a fuzzer in ten lines and get really awesome bugs and this is not just",
    "start": "3527700",
    "end": "3534029"
  },
  {
    "text": "security because that's another thing to interest people it will catch user stability crashes in the wild so we",
    "start": "3534029",
    "end": "3540750"
  },
  {
    "text": "actually sell them on both and that's how we are able to convince them and the results speak for themselves",
    "start": "3540750",
    "end": "3546930"
  },
  {
    "text": "they get a bug which they have written our 10 line fuzzer for and they can fix it quickly and get the results that's",
    "start": "3546930",
    "end": "3554369"
  },
  {
    "text": "what excites them it's how is this pipeline really automated so that's has how it really",
    "start": "3554369",
    "end": "3561750"
  },
  {
    "text": "worked well for us any other questions",
    "start": "3561750",
    "end": "3570950"
  },
  {
    "text": "thank you everyone for staying that late and enjoy your evening",
    "start": "3571619",
    "end": "3577460"
  }
]