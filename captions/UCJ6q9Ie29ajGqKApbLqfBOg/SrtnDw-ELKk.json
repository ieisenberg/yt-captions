[
  {
    "text": "[Music]",
    "start": "5210",
    "end": "30898"
  },
  {
    "text": "hello good morning everybody uh should we start is",
    "start": "48199",
    "end": "53719"
  },
  {
    "text": "everything okay okay",
    "start": "53719",
    "end": "58320"
  },
  {
    "text": "okay uh I'm going to be speaking on detection and evasion of web application attacks uh now a little bit of",
    "start": "60760",
    "end": "68439"
  },
  {
    "text": "housekeeping before I start uh some of the slides on your printed uh material",
    "start": "68439",
    "end": "73479"
  },
  {
    "text": "might be quite different from what showing up on screen because I was working on this till the very last minute so the updated slides will be",
    "start": "73479",
    "end": "80119"
  },
  {
    "text": "available on the blackhead website for you uh the other issue is",
    "start": "80119",
    "end": "85240"
  },
  {
    "text": "that I'm going to give you a little bit of a background about how this all came about being",
    "start": "85240",
    "end": "90600"
  },
  {
    "text": "uh we were approached by a company which wanted uh a way in which we could detect whether their clients or their systems",
    "start": "90600",
    "end": "96920"
  },
  {
    "text": "were being attacked uh using SQL injection AC cross side scripting attacks so the first idea that we had",
    "start": "96920",
    "end": "103320"
  },
  {
    "text": "was hey why don't you go and look into your web servers logs you know you might see some uh information out there which",
    "start": "103320",
    "end": "108640"
  },
  {
    "text": "might give you indications of whether an attack is taking place or not unfortunately that fell through because",
    "start": "108640",
    "end": "115240"
  },
  {
    "text": "in your web servers logs you do not get post data you only get data that is sent",
    "start": "115240",
    "end": "120439"
  },
  {
    "text": "as part of a get HP request so then the idea was that uh wherever this",
    "start": "120439",
    "end": "126680"
  },
  {
    "text": "information might be it might be coming uh as the traffic is flowing into your network so if you could do a regular",
    "start": "126680",
    "end": "132959"
  },
  {
    "text": "expression match and see if if the regular Expressions match with what is typically sent as part of a SQL",
    "start": "132959",
    "end": "139120"
  },
  {
    "text": "injection or a cross- side scripting attack uh the the couple of tools that we use since since uh the idea was not",
    "start": "139120",
    "end": "147040"
  },
  {
    "text": "to develop a whole new solution but to see what exists in if it can be tweaked into doing web app detection uh we use",
    "start": "147040",
    "end": "153680"
  },
  {
    "text": "two tools we basically use the snot uh intrusion detection system and we used",
    "start": "153680",
    "end": "159040"
  },
  {
    "text": "uh mod security which is uh an additional module that comes with Apache web Ser so what we're going to be seeing",
    "start": "159040",
    "end": "165440"
  },
  {
    "text": "out here is uh mainly uh snot intrusion detection system being used with regular",
    "start": "165440",
    "end": "170760"
  },
  {
    "text": "Expressions to detect web application attacks and then we're going to see where uh snot will actually fail to",
    "start": "170760",
    "end": "176879"
  },
  {
    "text": "detect snot essentially as you would know is a signature based B uh mechanism primarily it's signature based so there",
    "start": "176879",
    "end": "183560"
  },
  {
    "text": "are there are certain attacks where signature based detection mechanisms would absolutely fail so we're going to",
    "start": "183560",
    "end": "188640"
  },
  {
    "text": "look at that and then we're going to look at some possible solutions uh where we might still be able to catch these",
    "start": "188640",
    "end": "193799"
  },
  {
    "text": "attacks taking",
    "start": "193799",
    "end": "196519"
  },
  {
    "text": "place now a couple of things from what I need from your end is uh when I'm",
    "start": "201200",
    "end": "207400"
  },
  {
    "text": "showing you a particular signature and I'm saying that this is the attack and this is the signature which will detect that attack you could just raise your",
    "start": "207400",
    "end": "213040"
  },
  {
    "text": "hand on Hollow and say Hey you know that signature is crap I have an attack that will try that can actually evade that",
    "start": "213040",
    "end": "218200"
  },
  {
    "text": "signature so if you give me input like that then that helps us write better signatures with SN because the problem",
    "start": "218200",
    "end": "223519"
  },
  {
    "text": "out here is that the team that has written these signatures is the team that has actually launched those attacks",
    "start": "223519",
    "end": "229680"
  },
  {
    "text": "so it's pretty trivial to write a signature for an attack that you're going to launch you know what kind of traffic you're going to send so you're",
    "start": "229680",
    "end": "235159"
  },
  {
    "text": "going to write that kind of signature which will catch that kind of an attack the idea out here is to make it uh as",
    "start": "235159",
    "end": "241079"
  },
  {
    "text": "generic as possible to try and uh catch attacks which other people might send in which which we may not have been able to",
    "start": "241079",
    "end": "247400"
  },
  {
    "text": "imagine when we wrote those signatures",
    "start": "247400",
    "end": "251360"
  },
  {
    "text": "okay so we're looking at two types of broad level uh detection techniques uh",
    "start": "253599",
    "end": "259160"
  },
  {
    "text": "what I call as static detection and then what I call as Dynamic detection static detection is typically what happens post",
    "start": "259160",
    "end": "264960"
  },
  {
    "text": "event you've already been hacked or you suspect that somebody used a web application vulnerability to break into",
    "start": "264960",
    "end": "270080"
  },
  {
    "text": "your website and uh what you want to do now is go into your web service logs or your application logs and figure out",
    "start": "270080",
    "end": "276479"
  },
  {
    "text": "what went wrong uh since log analysis is something that is covered quite a lot in depth in various uh websites we're not",
    "start": "276479",
    "end": "283520"
  },
  {
    "text": "going to go too much in depth and see what log analysis mechanisms you're supposed to use what we're going to",
    "start": "283520",
    "end": "288639"
  },
  {
    "text": "concentrate on is dynamic detection okay here I divided into two parts signature based and anomaly based and then the",
    "start": "288639",
    "end": "296400"
  },
  {
    "text": "idea is going to be to take a typical set of web application attacks uh what I've done out here is I've taken the OS",
    "start": "296400",
    "end": "303680"
  },
  {
    "text": "top 10 on the OS website there is uh a top 10 list of vulnerabilities in web",
    "start": "303680",
    "end": "310120"
  },
  {
    "text": "applications so the idea out here is to see uh those 10 different types of attacks which exploit those",
    "start": "310120",
    "end": "316080"
  },
  {
    "text": "vulnerabilities and then see how we can actually catch those attacks taking",
    "start": "316080",
    "end": "321720"
  },
  {
    "text": "place okay right now as the situation exists a lot of companies are putting Mission critical data on their web",
    "start": "324400",
    "end": "330360"
  },
  {
    "text": "applications this is stuff that we all know about and you are allowing people to come in through code 80 so the",
    "start": "330360",
    "end": "336120"
  },
  {
    "text": "attacks have all moved up the layers and move moved on to the web application layer and a lot of discussion of web",
    "start": "336120",
    "end": "342039"
  },
  {
    "text": "application security really focuses on how do you prevent web application attacks by doing better uh by following",
    "start": "342039",
    "end": "349000"
  },
  {
    "text": "better coding practices or uh how do you actually attack a web application so",
    "start": "349000",
    "end": "354360"
  },
  {
    "text": "there's a lot of stuff out there on breaking web applications and on secure coding what's what's not out there a lot",
    "start": "354360",
    "end": "360440"
  },
  {
    "text": "is how do you detect that an attack is taking place at this point of time so a",
    "start": "360440",
    "end": "365479"
  },
  {
    "text": "lot of solutions and products are coming into their own just about now you have a bunch of products out there that do",
    "start": "365479",
    "end": "371319"
  },
  {
    "text": "application Level intrusion detection system again since uh the idea out here is not to focus on Commercial Solutions",
    "start": "371319",
    "end": "377280"
  },
  {
    "text": "we'll not be looking at a lot of those in depth unless of course those guys are willing to pay me for this existing",
    "start": "377280",
    "end": "384520"
  },
  {
    "text": "detection methods are being tested before customers really accept this as a standard like uh network based intrusion",
    "start": "384520",
    "end": "391000"
  },
  {
    "text": "detection systems although Gartner might disagree are standard standardized Solutions right now so application Level",
    "start": "391000",
    "end": "396440"
  },
  {
    "text": "idas Solutions will become standardized going into the",
    "start": "396440",
    "end": "401280"
  },
  {
    "text": "future although this is going to be a primarily a textual based solution I thought I'd put in a nice uh graphical",
    "start": "402759",
    "end": "409199"
  },
  {
    "text": "picture about where this solution will actually fit in now your ideas could be normally your network",
    "start": "409199",
    "end": "416319"
  },
  {
    "text": "based ideas could be debated it could be in front of the firewall or behind the firewall but out here you want your",
    "start": "416319",
    "end": "421800"
  },
  {
    "text": "application Level ideas to be as close as possible to your web application so in the case of mod security with Apache",
    "start": "421800",
    "end": "427360"
  },
  {
    "text": "it actually runs on the web server itself or secure is or URL scan these are these are solutions that are going",
    "start": "427360",
    "end": "433280"
  },
  {
    "text": "to run on the web server as filtering mechanisms themselves so you want your application Level ideas to be as close",
    "start": "433280",
    "end": "438639"
  },
  {
    "text": "as possible to the web server okay now I've done this sort of a",
    "start": "438639",
    "end": "446680"
  },
  {
    "text": "rough classification again I'm not sure if this classification is standard or not uh",
    "start": "446680",
    "end": "452160"
  },
  {
    "text": "and uh I broadly classify them into static and dynamic and then Dynamic is further classified into normally based",
    "start": "452160",
    "end": "458120"
  },
  {
    "text": "and signature based now if you're planning to conduct an effective and a thorough web",
    "start": "458120",
    "end": "464759"
  },
  {
    "text": "application uh investigation uh there are certain fields of information that you need some of these are common across",
    "start": "464759",
    "end": "470800"
  },
  {
    "text": "any any network based intrusion you need the IP address from where the traffic is coming you need the Tim stamp but you",
    "start": "470800",
    "end": "477360"
  },
  {
    "text": "also need the HTTP method that was used and you need the uniform resource indicator that was requested by the user",
    "start": "477360",
    "end": "484680"
  },
  {
    "text": "or the attacker as the case might be",
    "start": "484680",
    "end": "489879"
  },
  {
    "text": "however what you also need and what you will not find in your web servers logs is the entire set of hdp data the attack",
    "start": "489879",
    "end": "497039"
  },
  {
    "text": "could be sent as part of HTTP headers or it could be sent as part of a cookie or it could be sent as part of post data so",
    "start": "497039",
    "end": "503800"
  },
  {
    "text": "essentially what we're looking at is the entire set of traffic coming from an end user or an attacker to your particular",
    "start": "503800",
    "end": "512000"
  },
  {
    "text": "website like we discussed static techniques will typically happen after the event has already occurred so you're",
    "start": "513240",
    "end": "519320"
  },
  {
    "text": "going to look at parsing the log files and the aim is forensics investigation whereas in Dynamic detection techniques",
    "start": "519320",
    "end": "524800"
  },
  {
    "text": "the idea out here is to trigger an alarm when the attack is actually taking place so this is more real time as in when the",
    "start": "524800",
    "end": "530279"
  },
  {
    "text": "attack is happening in static detection techniques you're going to typically look at the",
    "start": "530279",
    "end": "535959"
  },
  {
    "text": "web server logs if you're using a three Tire architecture you probably look at your application server logs as well if",
    "start": "535959",
    "end": "542519"
  },
  {
    "text": "your application has been written in a way in which it creates an audit Trail for example I think there is another presentation on detecting web",
    "start": "542519",
    "end": "549680"
  },
  {
    "text": "application attacks by coding a web application differently so if in case your web application is coded where it",
    "start": "549680",
    "end": "554920"
  },
  {
    "text": "creates uh in-depth audit Trail then you would want to go through the application audit logs also the operating system",
    "start": "554920",
    "end": "561720"
  },
  {
    "text": "logs would not be very effective information if you're trying to uh do a forensics on a web application attack",
    "start": "561720",
    "end": "567640"
  },
  {
    "text": "that has occurred however in all of these pieces of information what's missing is post data",
    "start": "567640",
    "end": "573680"
  },
  {
    "text": "most of the information that gets sent from a browser in the HTML input Fields is going to be sent as post data that's",
    "start": "573680",
    "end": "579360"
  },
  {
    "text": "missing from your uh web servers logs from your uh applications logs HTTP",
    "start": "579360",
    "end": "584480"
  },
  {
    "text": "headers are also only partially represented you do not have the entire set of HTTP headers that could get sent",
    "start": "584480",
    "end": "589560"
  },
  {
    "text": "from a client's machine and cookie or referal data might also be used as uh as",
    "start": "589560",
    "end": "596320"
  },
  {
    "text": "input for malicious traffic again this would not NE get shown on all the web servers for example let's look at an is",
    "start": "596320",
    "end": "602959"
  },
  {
    "text": "web server log entry is allows various options to be turned on on what kind of information you want to get logged uh by",
    "start": "602959",
    "end": "610279"
  },
  {
    "text": "is so if you choose all the all the options available the maximum entry that you get is something that looks like",
    "start": "610279",
    "end": "616360"
  },
  {
    "text": "this now in this if I told you that this is a SQL injection attack you would say there's no way that we can determine if",
    "start": "616360",
    "end": "622640"
  },
  {
    "text": "it's a SQL injection attack or not but actually it is because this is exactly what we're going to do right now we're going to use uh this particular web page",
    "start": "622640",
    "end": "630399"
  },
  {
    "text": "SQL inject 2. HTML and inject SQL injection uh traffic into that but there",
    "start": "630399",
    "end": "636200"
  },
  {
    "text": "is no way that you can look at the web server logs and figure out if a SQL injection attack is taking place so where are the areas that a SQL",
    "start": "636200",
    "end": "643560"
  },
  {
    "text": "in static detection will fail to detect an attack if the attack is against a web server where somebody's trying to",
    "start": "643560",
    "end": "649440"
  },
  {
    "text": "overflow a buffer within some HTTP headers that are not there in the web servers logs that fails if it's a SQL",
    "start": "649440",
    "end": "655839"
  },
  {
    "text": "injection or cross-site scripting or a parameter manipulation attack in fields that fails as",
    "start": "655839",
    "end": "661519"
  },
  {
    "text": "well forced browsing forced browsing is an attack where an attacker will try to",
    "start": "661519",
    "end": "666880"
  },
  {
    "text": "access a sensitive area without going through previous authentication so let's say he tries to access a page called",
    "start": "666880",
    "end": "672959"
  },
  {
    "text": "orders. PHP without going through a previous page called login.php which",
    "start": "672959",
    "end": "678000"
  },
  {
    "text": "would have authenticated him to allow him to access that page so that's forced browsing now if you wanted to deter and",
    "start": "678000",
    "end": "683519"
  },
  {
    "text": "force browsing it would be pretty tedious to do because you'd have to go through your web servers logs You' have",
    "start": "683519",
    "end": "688880"
  },
  {
    "text": "to a particular access to orders. PHP then you'd have to trace back and see whether there was a successful login on",
    "start": "688880",
    "end": "695079"
  },
  {
    "text": "login.php or not which is not very easy to do just looking at your web servers Lots so that's an area that's going to",
    "start": "695079",
    "end": "700720"
  },
  {
    "text": "be difficult to detect using static detection but some attacks are pretty",
    "start": "700720",
    "end": "705920"
  },
  {
    "text": "trivial to detect using static detection for example the first stage of an attack",
    "start": "705920",
    "end": "710959"
  },
  {
    "text": "would be an attack against the web server using automated tools open source such as nto or nessus or any of the",
    "start": "710959",
    "end": "717079"
  },
  {
    "text": "commercial tools available these would show show up uh very easily in a web service logs okay there would be ton",
    "start": "717079",
    "end": "723399"
  },
  {
    "text": "loads of entries and we'll see these in fact even your snot idas will uh trigger alarms all over the place uh when you",
    "start": "723399",
    "end": "730200"
  },
  {
    "text": "use these uh automated attack tools HTML hidden field attacks HTML",
    "start": "730200",
    "end": "737240"
  },
  {
    "text": "hidden field attacks are where developers Place certain Fields as hidden HTML fields and expect that this",
    "start": "737240",
    "end": "742480"
  },
  {
    "text": "information will uh Traverse back onto their web server as it is they do not take into consideration sometimes that",
    "start": "742480",
    "end": "748199"
  },
  {
    "text": "it's very trivial for attacker to use a proxy C AC paros proxy to modify this",
    "start": "748199",
    "end": "754160"
  },
  {
    "text": "information as it's passing back to the web server so uh if if if an attacker tried to manipulate this kind of",
    "start": "754160",
    "end": "760519"
  },
  {
    "text": "information it would be trivial for him to do that and it would be difficult for for us to detect that because it would",
    "start": "760519",
    "end": "766320"
  },
  {
    "text": "not get shown up if it's post data if it's get data it would get shown up in your web server",
    "start": "766320",
    "end": "771639"
  },
  {
    "text": "blocks another attack that is typically launched is is either an authentication brute forcing or a session ID brute",
    "start": "771639",
    "end": "777880"
  },
  {
    "text": "forcing ATT this would get shown up only partially in your web service logs you'd see ton loads of access to a page such",
    "start": "777880",
    "end": "784199"
  },
  {
    "text": "as orders. PHP but you may not actually see the session ID that that's being",
    "start": "784199",
    "end": "789399"
  },
  {
    "text": "enumerated across the entire uh web application that brings us to what's",
    "start": "789399",
    "end": "796560"
  },
  {
    "text": "really the core of the entire presentation which is dynamic detection techniques now Dynamic detection techniques you could either use an",
    "start": "796560",
    "end": "802920"
  },
  {
    "text": "application Level firewall a deep inspection firewall uh they're trying to tweak that to detect customize web",
    "start": "802920",
    "end": "808360"
  },
  {
    "text": "application as well you could use uh solutions that have their core Focus",
    "start": "808360",
    "end": "813480"
  },
  {
    "text": "only on application security so there are commercial solutions that do detection only of application Level",
    "start": "813480",
    "end": "819120"
  },
  {
    "text": "attacks or what we're going to try and attempt here is to take something like Snot and try and stretch it and make and",
    "start": "819120",
    "end": "825519"
  },
  {
    "text": "see if it can detect web application Level attacks the advantages that you have",
    "start": "825519",
    "end": "830959"
  },
  {
    "text": "with uh Dynamic detection is that you get the entire set of HTTP headers you get get data post data you get cookie",
    "start": "830959",
    "end": "838120"
  },
  {
    "text": "data you get all the information that you would need to carry out an effective",
    "start": "838120",
    "end": "843839"
  },
  {
    "text": "investigation this is a slide comparison uh a rough comparison table that I drew up between signature based and anomaly",
    "start": "845560",
    "end": "851800"
  },
  {
    "text": "based signature based is easier to implement anomaly based is more difficult to implement you need slightly",
    "start": "851800",
    "end": "857360"
  },
  {
    "text": "more complicated algorithms for anomaly based signature based you could take something like Snot and TW it up again",
    "start": "857360",
    "end": "863759"
  },
  {
    "text": "it's cheaper and a do-it-yourself solution so if if there's a if you're doing a cost benefit and you figure out",
    "start": "863759",
    "end": "869160"
  },
  {
    "text": "that you know maybe it's not justified to buy a commercial level anomaly based application IDs you might go in for",
    "start": "869160",
    "end": "875720"
  },
  {
    "text": "something like Snot if your signatures are too generic you would get a lot of false positives",
    "start": "875720",
    "end": "882519"
  },
  {
    "text": "for example we're going to look at a SQL injection signature which is very generic which would fly which would trigger all over the place so even for",
    "start": "882519",
    "end": "889399"
  },
  {
    "text": "genuine traffic you would see that signature being alerted a normally base theoretically should have less false positives but it",
    "start": "889399",
    "end": "896839"
  },
  {
    "text": "would have false negatives as well attacker might be really smart and evade the learning mechanism that an anomaly",
    "start": "896839",
    "end": "902519"
  },
  {
    "text": "based ideas goes through signature based traditionally",
    "start": "902519",
    "end": "907600"
  },
  {
    "text": "has been used more for detecting web server attacks rather than for detecting attacks against the web",
    "start": "907600",
    "end": "914240"
  },
  {
    "text": "application however uh if you actually go to the snot go through the snot rule set you will realize that snot has more",
    "start": "916680",
    "end": "922720"
  },
  {
    "text": "than 850 signatures out of uh almost 2,000 which are only for web server",
    "start": "922720",
    "end": "928000"
  },
  {
    "text": "attacks uh some of these are for web applications a large majority of these are for attacks against let's say the is",
    "start": "928000",
    "end": "934720"
  },
  {
    "text": "web server or the Apache web server in fact the uh the signatures for",
    "start": "934720",
    "end": "940839"
  },
  {
    "text": "detecting cross-site scripting will not even trigger for a standard cross site scripting",
    "start": "940839",
    "end": "946560"
  },
  {
    "text": "attack one of the products that's going to uh really help you if you're doing if",
    "start": "947000",
    "end": "952240"
  },
  {
    "text": "you're doing a lower cost solution is mod security especially if you have uh if you're using Apache as your web",
    "start": "952240",
    "end": "957720"
  },
  {
    "text": "server uh mod security supports what are called as P compatible regular Expressions if you're a Unix",
    "start": "957720",
    "end": "963160"
  },
  {
    "text": "administrator regular Expressions is standard stuff for you so you can use uh regular Expressions within mod security",
    "start": "963160",
    "end": "969120"
  },
  {
    "text": "directives which which are similar to Apache directives and figure out if an attack is taking place or not based on a",
    "start": "969120",
    "end": "975480"
  },
  {
    "text": "pattern match the thing with Mod security is that you can go right in depth you can say that on this",
    "start": "975480",
    "end": "981040"
  },
  {
    "text": "particular PE or PHP page I want this particular field to have only this kind of information or you can say that apart",
    "start": "981040",
    "end": "987279"
  },
  {
    "text": "from this particular field on this particular page on any other field I do not want this kind of so you can do",
    "start": "987279",
    "end": "992720"
  },
  {
    "text": "pretty fine grin uh checks using mod security however mod Security will still",
    "start": "992720",
    "end": "997839"
  },
  {
    "text": "fail to do what standard signature based detection fails to do it will not be able to detect an authentication brute",
    "start": "997839",
    "end": "1003759"
  },
  {
    "text": "forcing it will not be able to detect uh a session ID brute forcing if somebody is crawling through your website mod",
    "start": "1003759",
    "end": "1009959"
  },
  {
    "text": "security does not have directors to protect you from that as well or to alert you for that and if somebody does",
    "start": "1009959",
    "end": "1015959"
  },
  {
    "text": "html hidden field uh manipulation again that would not get detected also mod security uh the the",
    "start": "1015959",
    "end": "1023319"
  },
  {
    "text": "the author or the developer of mod security has provided a p script which converts the existing snot rule set into",
    "start": "1023319",
    "end": "1030079"
  },
  {
    "text": "uh mod security directives so you could use that to have one solution for your Apache webite uh on Windows if you're",
    "start": "1030079",
    "end": "1037120"
  },
  {
    "text": "using is uh you you typically want to go with something like URL scan in case you don't want commercial products",
    "start": "1037120",
    "end": "1043160"
  },
  {
    "text": "unfortunately URL scan at this point of time does not support uh regular expressions",
    "start": "1043160",
    "end": "1050360"
  },
  {
    "text": "so let's look at the attacks one by one the first attack that an attacker is going to use is he's going to try and break the web server okay this is",
    "start": "1052080",
    "end": "1059120"
  },
  {
    "text": "typically done using standard attack tools that are available such as nessus or nto these tools have IDs evasion",
    "start": "1059120",
    "end": "1065840"
  },
  {
    "text": "techniques but you will see that even the IDS evasion techniques will still get triggered by snot so we're going to look at a small demo uh where I'm going",
    "start": "1065840",
    "end": "1072799"
  },
  {
    "text": "to trigger off uh nto on a particular website so let's look at that",
    "start": "1072799",
    "end": "1080840"
  },
  {
    "text": "this is where all your alerts from snot will come I have not installed uh let me explain what the setup really is uh this",
    "start": "1086720",
    "end": "1092679"
  },
  {
    "text": "is this is going this laptop is going to be the attack machine and there's another laptop out here which has the web server and the database server set",
    "start": "1092679",
    "end": "1098640"
  },
  {
    "text": "up okay so this is going to be the target for us the intrusion detection system is running on this machine it",
    "start": "1098640",
    "end": "1103880"
  },
  {
    "text": "could be running on this machine as well okay so what we're going to do is uh we're going to use ncto to attack the",
    "start": "1103880",
    "end": "1114200"
  },
  {
    "text": "Target and in this case what I'm going to ask you to do is to check for all attacks which is generic usually nto",
    "start": "1114960",
    "end": "1121480"
  },
  {
    "text": "will see the web server banner and then configure its attack range only for that",
    "start": "1121480",
    "end": "1127080"
  },
  {
    "text": "web I'm also going to trigger off not and launch this at this stage you",
    "start": "1127159",
    "end": "1134600"
  },
  {
    "text": "will see that there are a lot of alerts that will start cropping up out here",
    "start": "1134600",
    "end": "1140720"
  },
  {
    "text": "okay as you can see if you go right to the end there are three and a half thousand lines of",
    "start": "1142760",
    "end": "1149679"
  },
  {
    "text": "alerts that will come and these alerts will continue to come so we're going to clear this",
    "start": "1149679",
    "end": "1155000"
  },
  {
    "text": "up and this is something that I'm going to have to do often because I'm going to tweak the rules of snot so I'm going to",
    "start": "1155000",
    "end": "1160799"
  },
  {
    "text": "have to restart snot over and over again now what we're going to do",
    "start": "1160799",
    "end": "1166279"
  },
  {
    "text": "is see now that's M's law you know something has to go wrong and",
    "start": "1167720",
    "end": "1174679"
  },
  {
    "text": "okay I always thought I should actually have done this on",
    "start": "1175080",
    "end": "1179880"
  },
  {
    "text": "Linux okay now start ncto back up again and nto gives you IDs evasion uh techniques which are it gives you nine",
    "start": "1193919",
    "end": "1200400"
  },
  {
    "text": "types of IDs evasion techniques going from using case in sensitivity to using",
    "start": "1200400",
    "end": "1205440"
  },
  {
    "text": "uh double encoding URL encoding Unicode encoding so what we're going to do is we're going to take the",
    "start": "1205440",
    "end": "1212440"
  },
  {
    "text": "entire uh set of evasion techniques and throw it at the web",
    "start": "1212440",
    "end": "1217679"
  },
  {
    "text": "server and shoot up not again and you will see that the alerts",
    "start": "1217679",
    "end": "1223640"
  },
  {
    "text": "do come they're far less than the alerts that you saw in a standard dto attack okay that's one second most of the",
    "start": "1223640",
    "end": "1229440"
  },
  {
    "text": "alerts that you will see are called double decoding attacks because in this type of innovation attack he's sending",
    "start": "1229440",
    "end": "1234919"
  },
  {
    "text": "out he's encoding the uh first URL encoding and then Unicode encoding the characters so you're going to look at",
    "start": "1234919",
    "end": "1240799"
  },
  {
    "text": "most of the alerts as double decoding attacks we'll come back to this a little later because snot will take a while to actually start alerting on",
    "start": "1240799",
    "end": "1248919"
  },
  {
    "text": "this the next stage that an attack uh the other thing that I wanted to point out is for most of these attacks in the",
    "start": "1249520",
    "end": "1255080"
  },
  {
    "text": "brackets I've put uh numbers such as A10 A1 these actually represent uh",
    "start": "1255080",
    "end": "1260520"
  },
  {
    "text": "correspond to the O top 10 list of vulnerabilities so if you want to correspond with that that's the number",
    "start": "1260520",
    "end": "1267200"
  },
  {
    "text": "you go with the next attack would be where he tries to download the entire uh website this is website crawling uh the",
    "start": "1267200",
    "end": "1274320"
  },
  {
    "text": "idea of course is to figure out the uh logic with which the web application has been built HTML command so on and so",
    "start": "1274320",
    "end": "1280039"
  },
  {
    "text": "forth again there is no there is no signature that you can write for this this is this is an anomaly of of of uh",
    "start": "1280039",
    "end": "1287799"
  },
  {
    "text": "the behavior okay it's not an anomaly of of uh the protocol so what's happening",
    "start": "1287799",
    "end": "1292960"
  },
  {
    "text": "out here is that you have a single IP address connecting to all the possible links within your web server okay within",
    "start": "1292960",
    "end": "1298720"
  },
  {
    "text": "your web application and for those of you who might have attended s's lecture yesterday uh where he spoke about uh",
    "start": "1298720",
    "end": "1305799"
  },
  {
    "text": "defeating crawling tools uh you will realize that the key difference is where a human being will take a definite",
    "start": "1305799",
    "end": "1312720"
  },
  {
    "text": "amount of time between of clicking between links a tool will do it much faster so one of the ideas we had was",
    "start": "1312720",
    "end": "1319000"
  },
  {
    "text": "that it might be possible to write a snot pre-processor for this snot pre-processors are pieces of code that",
    "start": "1319000",
    "end": "1325320"
  },
  {
    "text": "will try and detect attached attacks with signatures typically cannot so you would have you have pre-processors for",
    "start": "1325320",
    "end": "1331480"
  },
  {
    "text": "uh Port scans you have a pre-processor for TCP fragmentation attacks and you have one for uh HTML encoding attacks so",
    "start": "1331480",
    "end": "1338960"
  },
  {
    "text": "the idea could be that it might just be possible to write a snot preprocessor for this the problem though is that this",
    "start": "1338960",
    "end": "1345880"
  },
  {
    "text": "might be stretching out snot as an idea little far in the sense that in a practical implementation in a production",
    "start": "1345880",
    "end": "1352000"
  },
  {
    "text": "environment package might start to drop so I'm not sure if this would work",
    "start": "1352000",
    "end": "1357200"
  },
  {
    "text": "or not in this particular situation what would work ideally is anomaly based detection because this is a clearcut",
    "start": "1357200",
    "end": "1364080"
  },
  {
    "text": "anomaly from a clearcut variance from what is normally accepted",
    "start": "1364080",
    "end": "1369480"
  },
  {
    "text": "traffic the next attack we're going to look at is a cross-side scripting attack as is commonly known a cross-side",
    "start": "1370240",
    "end": "1375840"
  },
  {
    "text": "scripting attack is more against the end user rather than the we side and the typical snot signatures that exist for",
    "start": "1375840",
    "end": "1382480"
  },
  {
    "text": "cross-side scripting attacks I've highlighted what what snot tries to pick out uh which is the script tag and in",
    "start": "1382480",
    "end": "1388919"
  },
  {
    "text": "the second attack it tries in the second signature is trying to pick up the image source tag both common ways of attacking",
    "start": "1388919",
    "end": "1396320"
  },
  {
    "text": "of exploiting cross-site scripting vulnerability however uh there are numerous ways in",
    "start": "1396320",
    "end": "1402240"
  },
  {
    "text": "which uh these signatures can easily be evaded so what you're really looking at",
    "start": "1402240",
    "end": "1407799"
  },
  {
    "text": "is just looking at at the opening HTML tag and the closing HTML tag okay so if if you're looking out for that you're",
    "start": "1407799",
    "end": "1413720"
  },
  {
    "text": "always going to catch any and every type of crossr scripting attack plus you might end up catching a lot of other things as well okay so that's the",
    "start": "1413720",
    "end": "1420520"
  },
  {
    "text": "problem that we're going to see okay you can see that snard has uh",
    "start": "1420520",
    "end": "1426200"
  },
  {
    "text": "spewed out some alerts and as you can see most of them are double decoding attacks but not as many as uh you saw",
    "start": "1426200",
    "end": "1434880"
  },
  {
    "text": "with the default nict to run now the problem is that we're running this with one attack machine and one target",
    "start": "1434880",
    "end": "1440039"
  },
  {
    "text": "machine in a production environment you would have SN Tri off a whole bunch of alarms okay so finding out something",
    "start": "1440039",
    "end": "1447520"
  },
  {
    "text": "like uh 10 alerts related to somebody attacking using nto would be very difficult to do",
    "start": "1447520",
    "end": "1454600"
  },
  {
    "text": "that shut this off",
    "start": "1457559",
    "end": "1462399"
  },
  {
    "text": "and okay now for the cross side scripting attack what we've done is buil a very rudimentary search page this is a",
    "start": "1465720",
    "end": "1471520"
  },
  {
    "text": "standard uh uh location where an attacker will try and figure out if you're vulnerable to cross site",
    "start": "1471520",
    "end": "1477360"
  },
  {
    "text": "scripting or not the idea is of course that whatever input you're putting in has to come out as",
    "start": "1477360",
    "end": "1483279"
  },
  {
    "text": "output can you see uh can you see at the back what's being typed",
    "start": "1484080",
    "end": "1489398"
  },
  {
    "text": "out so what you might try to do is launch a standard",
    "start": "1490080",
    "end": "1495200"
  },
  {
    "text": "alert and if the site is vulnerable you'll see this popping up of course this is only proof of concept so a",
    "start": "1495679",
    "end": "1501399"
  },
  {
    "text": "simple snot signature for this might look something of this",
    "start": "1501399",
    "end": "1506080"
  },
  {
    "text": "sort in this case what I've done is I've commented out most of the other snot rule",
    "start": "1507159",
    "end": "1512640"
  },
  {
    "text": "sets so what we have out here is this first signature uh which says this checks for",
    "start": "1512640",
    "end": "1518799"
  },
  {
    "text": "attacks which contain the HTML tags so let me explain what this does if you're",
    "start": "1518799",
    "end": "1524200"
  },
  {
    "text": "familiar with the snot uh rule bases I'm not going to get into those uh details what I'm only going to talk about is",
    "start": "1524200",
    "end": "1530080"
  },
  {
    "text": "pcre the pcre keyword tells not that what follows is a PE compatible regular expression so all that we're going to do",
    "start": "1530080",
    "end": "1536399"
  },
  {
    "text": "is write regular expressions for this in this case what we're looking at is percentage 3C which is the URL encoded",
    "start": "1536399",
    "end": "1542200"
  },
  {
    "text": "value of the opening HTML tag then we're looking at one or more non- new line characters and then a closing HTML tag",
    "start": "1542200",
    "end": "1549279"
  },
  {
    "text": "so when we have this sort of a rule in place what you will see is that a",
    "start": "1549279",
    "end": "1555440"
  },
  {
    "text": "standard attempt such as this will get easily flagged off and if an attacker is on your website",
    "start": "1555440",
    "end": "1560679"
  },
  {
    "text": "the first thing that he's going to do is typically do something like this or he might do it a little less uh over the",
    "start": "1560679",
    "end": "1566480"
  },
  {
    "text": "radar he might go under the radar and say put a bold tag or an underlined tag okay but what what you're always going",
    "start": "1566480",
    "end": "1572240"
  },
  {
    "text": "to see is the tags coming in so let's see if the rule triggered or",
    "start": "1572240",
    "end": "1577520"
  },
  {
    "text": "not and here you can see that there are three uh alerts that you got for the cross-site scripting attempts this is a",
    "start": "1577520",
    "end": "1583279"
  },
  {
    "text": "very rudimentary uh regular expression that you could write the problem with",
    "start": "1583279",
    "end": "1588760"
  },
  {
    "text": "this is that if you have a web web application where you're allowing users to input HTML tag say you have a blog or",
    "start": "1588760",
    "end": "1594880"
  },
  {
    "text": "you have users you know uh posting on news groups if if your web application supports that kind of functionality then",
    "start": "1594880",
    "end": "1602399"
  },
  {
    "text": "these alerts would trigger off even for that so the idea out here would be to actually put this as part of mod",
    "start": "1602399",
    "end": "1607880"
  },
  {
    "text": "security and and and and put an exclamation mark in the mod security directive which would say that this",
    "start": "1607880",
    "end": "1613840"
  },
  {
    "text": "signature applies to all the pages inside my web application except the page which accepts uh HTML taags so you",
    "start": "1613840",
    "end": "1620760"
  },
  {
    "text": "could do that with Mod security that's not possible with snot you can't do that fine grain level of checks with snot so",
    "start": "1620760",
    "end": "1626200"
  },
  {
    "text": "this would trigger off for uh almost any any any traffic that contains uh opening",
    "start": "1626200",
    "end": "1632159"
  },
  {
    "text": "tags and closing",
    "start": "1632159",
    "end": "1634960"
  },
  {
    "text": "tags uh regular Expressions by the way also work with E's secure is the idea",
    "start": "1638840",
    "end": "1644000"
  },
  {
    "text": "out here is not to push EI so we're not going to demo secure is a whole lot uh",
    "start": "1644000",
    "end": "1649480"
  },
  {
    "text": "but if you have is then then what you want to go with is that solution uh Microsoft of course has a free tool",
    "start": "1649480",
    "end": "1655440"
  },
  {
    "text": "called URL scan which does only keyword matching at this point of time uh they of course tell me that they might be",
    "start": "1655440",
    "end": "1660840"
  },
  {
    "text": "building a regular expression functionality in it but not sure when that will be",
    "start": "1660840",
    "end": "1666600"
  },
  {
    "text": "out this is the signature that we looked at for uh cross-side scripting and like I said this will",
    "start": "1666600",
    "end": "1673440"
  },
  {
    "text": "catch almost any remote attempt to attack cross-site scripting it'll give you false positives",
    "start": "1673440",
    "end": "1680120"
  },
  {
    "text": "the other kind of a vulnerability that exists in websites is malicious redirection sometimes websites have this",
    "start": "1680480",
    "end": "1685799"
  },
  {
    "text": "functionality where they'll redirect you either to another location within the web application or they'll redirect you",
    "start": "1685799",
    "end": "1690919"
  },
  {
    "text": "to a partner website so this can be used by a malicious attacker to redirect another user of that website to a",
    "start": "1690919",
    "end": "1697120"
  },
  {
    "text": "malicious website for example you could do something like this you could take the IP address of your own website you",
    "start": "1697120",
    "end": "1703240"
  },
  {
    "text": "could convert it into octal or hex and then convert it further into URL and coded values so what you would see is in",
    "start": "1703240",
    "end": "1709200"
  },
  {
    "text": "the last line redirect PHP Target is equal to now that string actually corresponds to",
    "start": "1709200",
    "end": "1715200"
  },
  {
    "text": "192.168.0.1 which is completely obfuscated so the effect of such an attack is again the same as a cross-side",
    "start": "1715200",
    "end": "1720919"
  },
  {
    "text": "scripting attack okay you're sending a user to a website which he didn't intend to go",
    "start": "1720919",
    "end": "1726640"
  },
  {
    "text": "to now it's not going to be easy to write a signature for this because the the range of uh sites that you could be",
    "start": "1728360",
    "end": "1735159"
  },
  {
    "text": "sent to is is you know infinite so what we're looking at is actually writing a",
    "start": "1735159",
    "end": "1740760"
  },
  {
    "text": "white list of sites where a user should be redirected to and then blocking out everything else this is again not",
    "start": "1740760",
    "end": "1746200"
  },
  {
    "text": "possible with snot you can't do that with snot what you can do with Mod security is you can say that this string",
    "start": "1746200",
    "end": "1752120"
  },
  {
    "text": "this is this these are the list of accepted strings and anything other than that is is uh malicious and again this",
    "start": "1752120",
    "end": "1759240"
  },
  {
    "text": "is something that very that is very easily caught with anomally based detection because during the learning phase of anomaly based detection the the",
    "start": "1759240",
    "end": "1765600"
  },
  {
    "text": "product would actually learn which are the weit that users are typically redirected to so any variance from that",
    "start": "1765600",
    "end": "1771399"
  },
  {
    "text": "would get flagged off",
    "start": "1771399",
    "end": "1776880"
  },
  {
    "text": "yes with snot are you saying with snot you want to alert",
    "start": "1785240",
    "end": "1792080"
  },
  {
    "text": "uh yeah you could do that you're right you could do that but uh another possible solution might be mod security",
    "start": "1793880",
    "end": "1800559"
  },
  {
    "text": "to do that basically you're attempting to create a white list you're seeing anything other than that that's",
    "start": "1800559",
    "end": "1807559"
  },
  {
    "text": "right the next attack like I said is forced browsing again this is something that's difficult to do with the",
    "start": "1808880",
    "end": "1814360"
  },
  {
    "text": "signature based detection but would be much easier with an anomaly based",
    "start": "1814360",
    "end": "1819880"
  },
  {
    "text": "solution now the attack that created a slight bit of controversy uh we actually wrote an article about this on security",
    "start": "1821320",
    "end": "1827519"
  },
  {
    "text": "Focus and uh uh guys from a company called impa came along and said hey you know these are the attacks that would",
    "start": "1827519",
    "end": "1834000"
  },
  {
    "text": "actually evade all of those signatures which is a good thing because it allowed us to write those signatures better so",
    "start": "1834000",
    "end": "1839039"
  },
  {
    "text": "initially this talk was titled detection of web application attacks after that paper came out I had to modify this and",
    "start": "1839039",
    "end": "1844240"
  },
  {
    "text": "say detection and evasion of web application attacks so what we're going to look at is some standard SQL",
    "start": "1844240",
    "end": "1849960"
  },
  {
    "text": "injection attacks being launched against a web application uh certain signatures uh within snot which will detect that",
    "start": "1849960",
    "end": "1856440"
  },
  {
    "text": "and then certain techniques to evade those detection mechanisms now in in a uh again I've",
    "start": "1856440",
    "end": "1862880"
  },
  {
    "text": "created a very rudimentary uh SQL injection page the only difference between this and what you would see on a",
    "start": "1862880",
    "end": "1868159"
  },
  {
    "text": "lot of others websites is that you can actually see what's being typed on the password and the text area it's a text area of a text input because we're going",
    "start": "1868159",
    "end": "1874480"
  },
  {
    "text": "to type in some stuff out here so a standard attack might be uh to feed in a username password and if that username",
    "start": "1874480",
    "end": "1881600"
  },
  {
    "text": "password exists the idea is to put a a single code to close that a semicolon and a Double Dash to end that then",
    "start": "1881600",
    "end": "1887120"
  },
  {
    "text": "whatever comes here is ignored if a user call test actually exist on that particular uh database you would be",
    "start": "1887120",
    "end": "1893360"
  },
  {
    "text": "authenticated through now in this part particular attack the attack is",
    "start": "1893360",
    "end": "1898480"
  },
  {
    "text": "successful because of these SQL meta characters so what you want to look out for is a single code semicolon the",
    "start": "1898480",
    "end": "1904039"
  },
  {
    "text": "Double Dash now your the first idea might be to write a signature for this",
    "start": "1904039",
    "end": "1909639"
  },
  {
    "text": "which looks something like this okay this is the rule for SQL",
    "start": "1909639",
    "end": "1917320"
  },
  {
    "text": "injection which will catch all attacks and what we're looking out here is for the single code or its URL",
    "start": "1917320",
    "end": "1924200"
  },
  {
    "text": "encoded value a Double Dash a semicolon or a hash sign these are again all SQL",
    "start": "1924200",
    "end": "1929679"
  },
  {
    "text": "meta characters the problem with this you will find is that this is too generic rule as soon as you put this in",
    "start": "1929679",
    "end": "1935080"
  },
  {
    "text": "place in a production environment this rule will fire all over the place so it might be easy to show this in a in in in",
    "start": "1935080",
    "end": "1940679"
  },
  {
    "text": "a test environment where we have one one target machine and one attack machine but it does not typically work in",
    "start": "1940679",
    "end": "1946039"
  },
  {
    "text": "production environment it give you too many false",
    "start": "1946039",
    "end": "1950600"
  },
  {
    "text": "positives okay",
    "start": "1972639",
    "end": "1976639"
  },
  {
    "text": "let try that one more",
    "start": "1978080",
    "end": "1981240"
  },
  {
    "text": "time okay this is deja vu we were once with a company and we were trying to prove that signature based detection",
    "start": "1985840",
    "end": "1991679"
  },
  {
    "text": "works and we're sitting there with these signature and saying the not rule will fire just about now it's just going to",
    "start": "1991679",
    "end": "1996799"
  },
  {
    "text": "fire and never fired but this did fire this morning so let's give it a fews",
    "start": "1996799",
    "end": "2004679"
  },
  {
    "text": "oh sure we have to uncomment",
    "start": "2010480",
    "end": "2013880"
  },
  {
    "text": "it okay we going to come back to that a little later and hope that it fires a little",
    "start": "2027120",
    "end": "2033240"
  },
  {
    "text": "lat",
    "start": "2033240",
    "end": "2036240"
  },
  {
    "text": "who it did so you get uh snog basically buffers the attacks to the alerts will",
    "start": "2039600",
    "end": "2044840"
  },
  {
    "text": "not get printed immediately to alert. IDs so you can see that it's triggered for that very trivial attack",
    "start": "2044840",
    "end": "2051440"
  },
  {
    "text": "against against site that's vulnerable now typically once an attacker is trying",
    "start": "2051440",
    "end": "2057760"
  },
  {
    "text": "to determine if the site is vulnerable or not the next attempt might be a standard Boolean uh string which is the",
    "start": "2057760",
    "end": "2063520"
  },
  {
    "text": "very famous one or 1 equal to one in this case since it's a string uh since the information is going back into a",
    "start": "2063520",
    "end": "2070919"
  },
  {
    "text": "wire car and not a numeric value uh I'm going to have to manipulate using these single codes so again a standard",
    "start": "2070919",
    "end": "2077000"
  },
  {
    "text": "signature for this looks something like this and what I'm going to do is I'm going to commend this signature back",
    "start": "2077000",
    "end": "2082320"
  },
  {
    "text": "because that's what's going to fire first and this is what that signature",
    "start": "2082320",
    "end": "2088480"
  },
  {
    "text": "looks like out here what we're doing is we're taking we're looking at first for the",
    "start": "2088480",
    "end": "2094158"
  },
  {
    "text": "single code or its URL and coded value then we looking for the letter O and then the letter R okay the idea is that",
    "start": "2094159",
    "end": "2101520"
  },
  {
    "text": "if you write if you try and write a two specific a signature for one or one equal to one you might find that it actually does get evaded because it's",
    "start": "2101520",
    "end": "2107839"
  },
  {
    "text": "pretty D through that",
    "start": "2107839",
    "end": "2111760"
  },
  {
    "text": "so again when when we're trying to the other problem with this is going to be that we essentially looking out for the letters o and R now this could be as",
    "start": "2135119",
    "end": "2142320"
  },
  {
    "text": "part of standard HTTP traffic that gets sent to your web server for example if you have order ID is equal to o123 this",
    "start": "2142320",
    "end": "2148680"
  },
  {
    "text": "might get triggered so you have a problem with this so again this this is too gener uh too specific a signature",
    "start": "2148680",
    "end": "2154119"
  },
  {
    "text": "and it might yield uh sorry it's too generic a signature it might false positives however what will happen is",
    "start": "2154119",
    "end": "2160920"
  },
  {
    "text": "eventually the attacker will realize that you are vulnerable to SQL injection and that is a stage at which he's going to try and input certain uh SQL",
    "start": "2160920",
    "end": "2168440"
  },
  {
    "text": "statements such as insert update delete select or Union okay so the initial attempt might be to just look",
    "start": "2168440",
    "end": "2175040"
  },
  {
    "text": "for these particular values so I'm going to enable that",
    "start": "2175040",
    "end": "2180359"
  },
  {
    "text": "signature look out for the keywords insert update delete select or Union",
    "start": "2180359",
    "end": "2187079"
  },
  {
    "text": "the idea out here is of course to close this particular query and assuming I have figured out",
    "start": "2199720",
    "end": "2205560"
  },
  {
    "text": "the name of the table at the back end I would try and insert a new user",
    "start": "2205560",
    "end": "2212599"
  },
  {
    "text": "out there close that query and everything",
    "start": "2212599",
    "end": "2218119"
  },
  {
    "text": "out that comes after that it gives me an authentication failure which is fine because I'm not trying to authenticate",
    "start": "2218119",
    "end": "2223599"
  },
  {
    "text": "what I'm trying to do is to execute uh a query at the back end",
    "start": "2223599",
    "end": "2229160"
  },
  {
    "text": "database so here you can see that this particular signature has been fired on",
    "start": "2232240",
    "end": "2237839"
  },
  {
    "text": "twice because of that attempt now one of the evasion techniques that",
    "start": "2237839",
    "end": "2243359"
  },
  {
    "text": "works very simply with this is simply to inject a c Style comment out",
    "start": "2243359",
    "end": "2249880"
  },
  {
    "text": "here so between ins and er you can actually insert a comment out here so",
    "start": "2249880",
    "end": "2256119"
  },
  {
    "text": "what this does is uh it still executes the same thing",
    "start": "2256119",
    "end": "2262000"
  },
  {
    "text": "okay but you don't get the alert right now because you because you don't have the keyword insert occurring anymore so",
    "start": "2262000",
    "end": "2269839"
  },
  {
    "text": "your alerts don't trigger so then the idea is then the idea would be to actually watch out for uh C commands",
    "start": "2269839",
    "end": "2278079"
  },
  {
    "text": "occurring which is this particular signature which test for forward slash asterisk and asterisk forward slash with",
    "start": "2278079",
    "end": "2284560"
  },
  {
    "text": "anything in between that so in this case again we have a p",
    "start": "2284560",
    "end": "2289839"
  },
  {
    "text": "compatible regular expression which is looking at for the forward slash escape the forward slash and escape the asteris",
    "start": "2289839",
    "end": "2298520"
  },
  {
    "text": "so now you can see that the SQL evasion attacks do get uh the the alerts do get",
    "start": "2318720",
    "end": "2324040"
  },
  {
    "text": "triggered off the other thing might be to look out for other keywords which are specific to",
    "start": "2324040",
    "end": "2330119"
  },
  {
    "text": "the particular database being used for example Microsoft SQL Server allows you to execute uh extended stored procedures",
    "start": "2330119",
    "end": "2336440"
  },
  {
    "text": "and stored procedures what you could do is you could look out for the keyword exact followed by one or more white",
    "start": "2336440",
    "end": "2341920"
  },
  {
    "text": "spaces and then either an s or an X followed by a p so this is what would be used typically to execute a backend",
    "start": "2341920",
    "end": "2348560"
  },
  {
    "text": "extended storage procedure or storage procedure you could look out for that as",
    "start": "2348560",
    "end": "2354400"
  },
  {
    "text": "well so we've covered this uh what's really happening out here is we've uh seen these uh regular Expressions being",
    "start": "2362119",
    "end": "2368359"
  },
  {
    "text": "triggered off this this this one is for uh SQL meta characters like we discussed this leads to a lot of false positives",
    "start": "2368359",
    "end": "2375400"
  },
  {
    "text": "sometimes it would trigger off even for genuine input we've seen that these are problems that occur even when you're trying to do input",
    "start": "2375400",
    "end": "2382119"
  },
  {
    "text": "validation and again with Mod security you could make it really fine grin to work for a specific field on a specific",
    "start": "2382119",
    "end": "2390280"
  },
  {
    "text": "page Boolean SQL injection the idea was of course to make the backend query it",
    "start": "2392880",
    "end": "2398880"
  },
  {
    "text": "always results in a value true which could be done in a variety of ways so what you're actually only one to look out for is the keyword uh single code",
    "start": "2398880",
    "end": "2406760"
  },
  {
    "text": "followed by an or some of the other keywords we said uh",
    "start": "2406760",
    "end": "2413640"
  },
  {
    "text": "we discussed were important to check out for these These are the evasion techniques you could do URL encoding again snot has a pre-processor to deal",
    "start": "2413640",
    "end": "2420560"
  },
  {
    "text": "with that wide spaces you could put your signatures with one or more or zero or more wi spaces as the case might be if",
    "start": "2420560",
    "end": "2427480"
  },
  {
    "text": "SQL commands are being used to evade you could use uh signatur to detect for that as",
    "start": "2427480",
    "end": "2433960"
  },
  {
    "text": "well buffer overflows are not common against web applications as such buffer overflows yield much better results",
    "start": "2435599",
    "end": "2442319"
  },
  {
    "text": "against uh web servers so they are not always launched against a web application however you can sometimes",
    "start": "2442319",
    "end": "2448119"
  },
  {
    "text": "get interesting uh interesting uh results when you try and uh feed in a lot of a large amount of data to a",
    "start": "2448119",
    "end": "2453640"
  },
  {
    "text": "particular field which enters into a function for example in this case you can see that it's not just a mistake in",
    "start": "2453640",
    "end": "2459880"
  },
  {
    "text": "the handling of the large buffer but there also another mistake which is the error Pages error information is being",
    "start": "2459880",
    "end": "2464960"
  },
  {
    "text": "disclosed to the end usage so one of the signatures might uh that",
    "start": "2464960",
    "end": "2470079"
  },
  {
    "text": "might look that might work for this is to look out for uh the query string will typically contain information of the",
    "start": "2470079",
    "end": "2476480"
  },
  {
    "text": "type name equal to Value so what you're looking for is the is equal to sign followed by a very large string",
    "start": "2476480",
    "end": "2483839"
  },
  {
    "text": "and followed by an IR sign which closes that particular name equal to Value pair",
    "start": "2483839",
    "end": "2489200"
  },
  {
    "text": "however uh this is a pretty lousy signature because it it won't work all the time we've seen that in production",
    "start": "2489200",
    "end": "2495440"
  },
  {
    "text": "now this is where anomaly based works really well because anomaly based one of the parameters that you're taking into",
    "start": "2495440",
    "end": "2500920"
  },
  {
    "text": "account during the learning phase is is the expected length of the input parameter so any variance from that will",
    "start": "2500920",
    "end": "2507599"
  },
  {
    "text": "be immediately flagged off by uh an anomal based intrusion protction",
    "start": "2507599",
    "end": "2514160"
  },
  {
    "text": "system command execution against s has a whole bunch of signatures to check out for Unix as well as Windows command",
    "start": "2514160",
    "end": "2521079"
  },
  {
    "text": "execution so that's pretty standard stuff you can write a signature based detection for that however snart",
    "start": "2521079",
    "end": "2526760"
  },
  {
    "text": "signatures can sometimes misfire for example if somebody tries an LS attack and LS could be as part of normal input",
    "start": "2526760",
    "end": "2533680"
  },
  {
    "text": "also so you have a problem with that the null bite poison attack is another type of attack which is pretty",
    "start": "2533680",
    "end": "2539880"
  },
  {
    "text": "simple trival to write a signature for all you're looking out for is percentage 00 which is the NB character Tri WR",
    "start": "2539880",
    "end": "2547920"
  },
  {
    "text": "signature for that as well again some other meta characters",
    "start": "2547920",
    "end": "2553599"
  },
  {
    "text": "that might be used to execute commands at the back end now where are the areas that",
    "start": "2553599",
    "end": "2559680"
  },
  {
    "text": "signature based detection will actually fail to work uh like we said one of the one of the attacks that is pretty",
    "start": "2559680",
    "end": "2566000"
  },
  {
    "text": "standard is an HTML hidden field manipulation attack now this is something which is almost impossible to",
    "start": "2566000",
    "end": "2571839"
  },
  {
    "text": "write a signature for for example if you're an e-commerce website selling you know maybe thousands of goods it's very",
    "start": "2571839",
    "end": "2577440"
  },
  {
    "text": "difficult to write a signature which says that for this particular good I expect only this value to come in so",
    "start": "2577440",
    "end": "2582480"
  },
  {
    "text": "standard attack that works against this is where you take an amount field and of course manipulate this is pretty old hat",
    "start": "2582480",
    "end": "2588200"
  },
  {
    "text": "I mean this you would be pretty lucky to find these kind of vulnerabilities on web apps nowadays but this still pop up",
    "start": "2588200",
    "end": "2593960"
  },
  {
    "text": "all the time so this is something where you can't write a signature for example if I change the value 879 to something",
    "start": "2593960",
    "end": "2600839"
  },
  {
    "text": "like 8 or seven or nine it would be very difficult to write a signature for this",
    "start": "2600839",
    "end": "2607000"
  },
  {
    "text": "another generic type of an attack is called as an input invalid input where the web application is expecting certain",
    "start": "2607800",
    "end": "2614480"
  },
  {
    "text": "uh numbers in we feed and alphabets this is what could happen uh this is again a real life example where we fed in the",
    "start": "2614480",
    "end": "2620280"
  },
  {
    "text": "letters a a where a number was expected so in this case you can see that it's not only given the Java exception but",
    "start": "2620280",
    "end": "2626400"
  },
  {
    "text": "you also come to know about the backend Oracle application server and the version that it's being used uh again",
    "start": "2626400",
    "end": "2632359"
  },
  {
    "text": "it's it's pretty uh difficult to write a snot signature for this you could write",
    "start": "2632359",
    "end": "2637800"
  },
  {
    "text": "a mod security directive",
    "start": "2637800",
    "end": "2641440"
  },
  {
    "text": "yes you could uh that's one of the slides that we cover you for example if you're doing uh authentication brute",
    "start": "2645960",
    "end": "2652280"
  },
  {
    "text": "forcing you're going to get an authentication failed output message so you could write a snot signature for",
    "start": "2652280",
    "end": "2657359"
  },
  {
    "text": "that but if if you work with intrusion detection systems in production environment you see that those kind of",
    "start": "2657359",
    "end": "2662720"
  },
  {
    "text": "Errors pop up a lot but you could write a signature which does outgoing prod also that's a",
    "start": "2662720",
    "end": "2670760"
  },
  {
    "text": "valid so uh coming actually to the point that I was making this is authentication and authorization brot Force attacks",
    "start": "2672640",
    "end": "2679079"
  },
  {
    "text": "again what you would see in your web server logs is something like get order. PHP and you would not see the order ID",
    "start": "2679079",
    "end": "2685359"
  },
  {
    "text": "is equal to the value if it's post data you would not see that in your web servers blogs all you would see is",
    "start": "2685359",
    "end": "2690760"
  },
  {
    "text": "multiple accesses to the page get order. PHP so this is something that again it's difficult to write a snart signature for",
    "start": "2690760",
    "end": "2697920"
  },
  {
    "text": "or or do signature based detection of",
    "start": "2697920",
    "end": "2702520"
  },
  {
    "text": "this you would not see the actual order ID being uh being visible in the web",
    "start": "2706280",
    "end": "2712480"
  },
  {
    "text": "service loocks uh one of the ideas we had was to",
    "start": "2712480",
    "end": "2717599"
  },
  {
    "text": "write some sort of a rule based correlation which says that uh if if I",
    "start": "2717599",
    "end": "2722640"
  },
  {
    "text": "see this particular alert once and if I see it 10 more times in the next one minute then that's that's an",
    "start": "2722640",
    "end": "2727680"
  },
  {
    "text": "authentication proof Force happening because in any production environment there are ton loads of failed authentication messages that you will",
    "start": "2727680",
    "end": "2733960"
  },
  {
    "text": "get and a large majority of these will be genuine attempts users will actually be making genuine mistakes in supplying",
    "start": "2733960",
    "end": "2739400"
  },
  {
    "text": "usernames passwords so what you want to really see is a malicious attempt and the difference between a genuine attempt",
    "start": "2739400",
    "end": "2745200"
  },
  {
    "text": "and a malicious attempt will be repetitiveness so if you could if you could write a rule based correlation engine which basically says that if",
    "start": "2745200",
    "end": "2752559"
  },
  {
    "text": "there is an if there is an authentication failure once and if it happens uh m number of times then I want",
    "start": "2752559",
    "end": "2758079"
  },
  {
    "text": "to flag that off now again uh the idea that you give you could actually look for an outgoing authentication failed",
    "start": "2758079",
    "end": "2764000"
  },
  {
    "text": "error message but you would be flooded with those in in a normal",
    "start": "2764000",
    "end": "2769520"
  },
  {
    "text": "environment again one of the ideas that we had was whether it's possible or not to ride a snot preprocessor for this",
    "start": "2771240",
    "end": "2777119"
  },
  {
    "text": "this is something that we would be exploring in the coming few",
    "start": "2777119",
    "end": "2781680"
  },
  {
    "text": "weeks anomally based detection is based on the assumption that you can actually Define normal traffic with any uh",
    "start": "2783520",
    "end": "2789720"
  },
  {
    "text": "whether it's a network based IDs which works uh based on normally based or it's any other application Level ideas it",
    "start": "2789720",
    "end": "2795839"
  },
  {
    "text": "will go through two phases one is the learning phase and one is the detection phase in the learning phase what we are",
    "start": "2795839",
    "end": "2801160"
  },
  {
    "text": "typically going to be looking at is uh the input length uh which Fields will",
    "start": "2801160",
    "end": "2806599"
  },
  {
    "text": "have what kind of input lengths any variance from that will be flagged off character distribution of parameter",
    "start": "2806599",
    "end": "2811760"
  },
  {
    "text": "string structure uh here you could use finite State automat or language Theory that's typically most of the products",
    "start": "2811760",
    "end": "2818240"
  },
  {
    "text": "used uh you could also look at whether parameters are absent or present during normal traffic because an attacker will",
    "start": "2818240",
    "end": "2824920"
  },
  {
    "text": "typically uh if if it's a normal user the parameters will always appear in the same order and they will always be",
    "start": "2824920",
    "end": "2831319"
  },
  {
    "text": "present or they will not be present it will be standard traffic that you see if it's an attacker the traffic might",
    "start": "2831319",
    "end": "2836960"
  },
  {
    "text": "actually uh differ some parameters might occur might not occur or their order might change so an anomaly based engine",
    "start": "2836960",
    "end": "2843240"
  },
  {
    "text": "is going to basically look at these kind of parameters uh also what is important uh there are",
    "start": "2843240",
    "end": "2849119"
  },
  {
    "text": "some anomal based engines that will actually do the learning phase based on your previous web servers logs now",
    "start": "2849119",
    "end": "2854440"
  },
  {
    "text": "that's not good enough because you're missing out on a lot of critical data so a good anomaly based detection solution",
    "start": "2854440",
    "end": "2861079"
  },
  {
    "text": "should actually look at real live traffic rather than at uh the web servers blogs during the learning",
    "start": "2861079",
    "end": "2868160"
  },
  {
    "text": "phase uh currently of course there are only commercial products that dominate this field uh just to be comprehensive",
    "start": "2868160",
    "end": "2874800"
  },
  {
    "text": "I've included a slide uh which does mentioned some of these again uh I have personally not evaluated any of these I",
    "start": "2874800",
    "end": "2881599"
  },
  {
    "text": "cannot which one is good and which is not good or whether any of them",
    "start": "2881599",
    "end": "2886839"
  },
  {
    "text": "are some of the key points uh any questions before I",
    "start": "2886839",
    "end": "2892599"
  },
  {
    "text": "conclude",
    "start": "2893240",
    "end": "2896240"
  },
  {
    "text": "yeah because a lot of the critical information would not be there in the Web Service blogs you would not have",
    "start": "2901400",
    "end": "2907040"
  },
  {
    "text": "Header information you will not have post information this the kind of information that you would have when you're analyzing the entire set of",
    "start": "2907040",
    "end": "2913559"
  },
  {
    "text": "traffic going across on web service logs would be not containing as much",
    "start": "2913559",
    "end": "2921280"
  },
  {
    "text": "information uh both no performance tradeoffs would be better evaluated",
    "start": "2931160",
    "end": "2937119"
  },
  {
    "text": "signature based and anomaly based that's where you would want and if if you actually observe most of the commercial",
    "start": "2937119",
    "end": "2943440"
  },
  {
    "text": "anomaly based products actually do load balancing as well so a lot of them try to counter counteract the performance",
    "start": "2943440",
    "end": "2950839"
  },
  {
    "text": "hit that will occur because of this kind of intrusion detection that's taking",
    "start": "2950839",
    "end": "2955880"
  },
  {
    "text": "place which not you would have the regular trade-off which happens with any other signature based",
    "start": "2955880",
    "end": "2962160"
  },
  {
    "text": "detection so uh as we seen for a large majority of the attackers uh the the uh",
    "start": "2964920",
    "end": "2970720"
  },
  {
    "text": "runof-the-mill attacks would actually get CAU using signature based attacks so you could use that as a first line of defense but eventually you'll realize",
    "start": "2970720",
    "end": "2977960"
  },
  {
    "text": "that if if you have uh really Mission critical application running then you want a commercial application Level ID",
    "start": "2977960",
    "end": "2984240"
  },
  {
    "text": "is being used and maybe the best solution in fact",
    "start": "2984240",
    "end": "2989359"
  },
  {
    "text": "most of the commercial Solutions I suppose actually use a combination of signature based and anomal based to",
    "start": "2989359",
    "end": "2995119"
  },
  {
    "text": "detect application Level point of",
    "start": "2995119",
    "end": "2999240"
  },
  {
    "text": "time and finally uh like most of the other speakers you know talk about it's essentially all about the money so it's",
    "start": "3002720",
    "end": "3009359"
  },
  {
    "text": "really what kind of information are you trying to protect how important is it to you and and then you do a cost benefit",
    "start": "3009359",
    "end": "3016280"
  },
  {
    "text": "of whether a signature base is good enough or you want",
    "start": "3016280",
    "end": "3020680"
  },
  {
    "text": "toe there are some references you might want to go through uh our article on security Focus SQL",
    "start": "3023200",
    "end": "3031079"
  },
  {
    "text": "signature evasion article bya mod security homage and one of the better",
    "start": "3031079",
    "end": "3036920"
  },
  {
    "text": "papers on noral detection which was released sometime last",
    "start": "3036920",
    "end": "3042799"
  },
  {
    "text": "year any",
    "start": "3043040",
    "end": "3046319"
  },
  {
    "text": "questions okay thank you [Applause]",
    "start": "3052920",
    "end": "3060800"
  },
  {
    "text": "e",
    "start": "3115520",
    "end": "3118520"
  },
  {
    "text": "e",
    "start": "3145520",
    "end": "3148520"
  },
  {
    "text": "e",
    "start": "3175440",
    "end": "3178440"
  },
  {
    "text": "e",
    "start": "3205440",
    "end": "3208440"
  },
  {
    "text": "e",
    "start": "3235440",
    "end": "3238440"
  },
  {
    "text": "e",
    "start": "3265359",
    "end": "3268359"
  },
  {
    "text": "e",
    "start": "3295319",
    "end": "3298319"
  },
  {
    "text": "e e",
    "start": "3325319",
    "end": "3329319"
  },
  {
    "text": "e",
    "start": "3415240",
    "end": "3418240"
  },
  {
    "text": "e",
    "start": "3445160",
    "end": "3448160"
  },
  {
    "text": "e",
    "start": "3475119",
    "end": "3478119"
  },
  {
    "text": "e",
    "start": "3505119",
    "end": "3508119"
  },
  {
    "text": "e",
    "start": "3535039",
    "end": "3538039"
  },
  {
    "text": "e",
    "start": "3565039",
    "end": "3568039"
  },
  {
    "text": "e",
    "start": "3595039",
    "end": "3598039"
  },
  {
    "text": "e",
    "start": "3624960",
    "end": "3627960"
  },
  {
    "text": "e",
    "start": "3654920",
    "end": "3657920"
  },
  {
    "text": "e",
    "start": "3684920",
    "end": "3687920"
  },
  {
    "text": "e",
    "start": "3714839",
    "end": "3717839"
  },
  {
    "text": "e",
    "start": "3744839",
    "end": "3747839"
  },
  {
    "text": "e e",
    "start": "3774839",
    "end": "3778839"
  }
]