[
  {
    "text": "[Music] foreign",
    "start": "1730",
    "end": "6720"
  },
  {
    "text": "suggests we're going to discuss about fuzzing so it's a journey into phasing webassembly virtual machine",
    "start": "11059",
    "end": "17220"
  },
  {
    "text": "so it will be mainly focus on the step the different step you need to do",
    "start": "17220",
    "end": "24720"
  },
  {
    "text": "in order to do fuzzing when you are targeting a huge and complex Target that is in that case the web",
    "start": "24720",
    "end": "31740"
  },
  {
    "text": "assembly virtual machine so of course we found bugs I will not discuss too much about them and even less about",
    "start": "31740",
    "end": "37920"
  },
  {
    "text": "exploitation it's really more focused on fuzzing and I hope you will find a lot of interesting points to apply that on",
    "start": "37920",
    "end": "45180"
  },
  {
    "text": "other targets so my name is Patrick I'm the founder and CEO of closing Labs so",
    "start": "45180",
    "end": "50280"
  },
  {
    "text": "as the name suggests we are doing phasing and with the military research so mainly on I mean I would say",
    "start": "50280",
    "end": "56460"
  },
  {
    "text": "different targets and the main goal for us is really to develop further custom further and also Custom Security tool so",
    "start": "56460",
    "end": "64619"
  },
  {
    "text": "the main focus we are doing is mainly us to go and a browserver housing in",
    "start": "64619",
    "end": "70140"
  },
  {
    "text": "general so a quick introduction to webassembly so webassembly have been introduced in",
    "start": "70140",
    "end": "77159"
  },
  {
    "text": "2017 officially with the MVP 1.0 it's a",
    "start": "77159",
    "end": "82500"
  },
  {
    "text": "binary instrumentation so in binary instrumentation format instruction format but it's just not a",
    "start": "82500",
    "end": "89700"
  },
  {
    "text": "binary format it's a binary format plus a text-based representation plus a stack",
    "start": "89700",
    "end": "96420"
  },
  {
    "text": "based virtual machine that means a complete architecture as itself so it's natively supported by all the",
    "start": "96420",
    "end": "104100"
  },
  {
    "text": "major browsers since quite some time now and the main goal of webassembly is",
    "start": "104100",
    "end": "109140"
  },
  {
    "text": "basically not to replace JavaScript is to be in addition to JavaScript in order",
    "start": "109140",
    "end": "114180"
  },
  {
    "text": "to be more fast and so on so all webassembly works basically you",
    "start": "114180",
    "end": "121380"
  },
  {
    "text": "have two steps the first one is basically the compilation so you have your classical piece of source code and",
    "start": "121380",
    "end": "127560"
  },
  {
    "text": "you will compile that into webassembly it will be your compilation Target so there is some tools like llvms that",
    "start": "127560",
    "end": "134220"
  },
  {
    "text": "actually supports webassembly as a Target and script 10 bin REM and and some others so at the end you have",
    "start": "134220",
    "end": "141720"
  },
  {
    "text": "something like that like the Fibonacci function in C C plus plus or rest and you're going to compile that into the",
    "start": "141720",
    "end": "148379"
  },
  {
    "text": "binary files that is the webassembly module on the other part you have the runtime",
    "start": "148379",
    "end": "154080"
  },
  {
    "text": "and host environment so your web assembly VM that will actually take as",
    "start": "154080",
    "end": "159780"
  },
  {
    "text": "an inputer webassembly module will decode and execute the module you have",
    "start": "159780",
    "end": "166500"
  },
  {
    "text": "the most famous One let's say is V8 that actually contain a webassembly virtual",
    "start": "166500",
    "end": "172560"
  },
  {
    "text": "machine and you have also like wasmer and wasn't time that are actually pretty famous",
    "start": "172560",
    "end": "178400"
  },
  {
    "text": "so the way it's work when you are providing a webassembly module it will go to multiple stage so the first one is",
    "start": "178400",
    "end": "186900"
  },
  {
    "text": "the decoding and the passing so from this binary format the webassembly vvm",
    "start": "186900",
    "end": "192120"
  },
  {
    "text": "will actually create an internal module representation then it will do the validation phase",
    "start": "192120",
    "end": "198360"
  },
  {
    "text": "meaning that it will decode the module and check for particular stuff like type",
    "start": "198360",
    "end": "203640"
  },
  {
    "text": "checking and some others then you have the instantiation basically it will create a module",
    "start": "203640",
    "end": "210360"
  },
  {
    "text": "instance and you will create some additional stuff so you can think of memories Global tables and some others",
    "start": "210360",
    "end": "219000"
  },
  {
    "text": "so that's basically a quick overview of the VM and the host interaction and",
    "start": "219000",
    "end": "224819"
  },
  {
    "text": "different object so in one side on the top you have a bunch of memories a bunch",
    "start": "224819",
    "end": "230040"
  },
  {
    "text": "of globals and tables those one are created by the host",
    "start": "230040",
    "end": "235080"
  },
  {
    "text": "and basically this one will be shared to the web assembly instance that is at the",
    "start": "235080",
    "end": "240840"
  },
  {
    "text": "bottom the webassem resistance is actually immutable meaning that once the webassembly module is loaded and",
    "start": "240840",
    "end": "248340"
  },
  {
    "text": "instantiated there is no way to modify the function body the function contact",
    "start": "248340",
    "end": "253920"
  },
  {
    "text": "the indirect function table and the execution stack it's not a classic stack",
    "start": "253920",
    "end": "259380"
  },
  {
    "text": "I mean it's a stack for um like you just push and pop some data",
    "start": "259380",
    "end": "264900"
  },
  {
    "text": "on it so it's kind of really Limited in that way so that's why we are telling",
    "start": "264900",
    "end": "270300"
  },
  {
    "text": "that actually webassembly is sandboxed that's typically for this kind of reason",
    "start": "270300",
    "end": "276240"
  },
  {
    "text": "finally once the webassembly module is ready to go you have the execution and",
    "start": "276240",
    "end": "282180"
  },
  {
    "text": "in that case the host will maybe provide some argument to a specific function",
    "start": "282180",
    "end": "287880"
  },
  {
    "text": "that will be exported and then it will run the webassembly module the specific",
    "start": "287880",
    "end": "293759"
  },
  {
    "text": "byte code of webassembly and do the job so in terms of so that's just the",
    "start": "293759",
    "end": "301020"
  },
  {
    "text": "webassembly VM and of course this webassembly VM will need a host a host environment so usually we are speaking",
    "start": "301020",
    "end": "308340"
  },
  {
    "text": "about browsers like what I've done at the beginning but it's not the only us that is actually running webassembly VM",
    "start": "308340",
    "end": "314699"
  },
  {
    "text": "one other case is basically blockchains that can use webassembly VM for like",
    "start": "314699",
    "end": "321540"
  },
  {
    "text": "smart contracts in in general and there is plenty of other one",
    "start": "321540",
    "end": "327060"
  },
  {
    "text": "for Standalone VM so that's this case so you can think of a webassembly VM that is running on the server you can think",
    "start": "327060",
    "end": "333720"
  },
  {
    "text": "of edge Computing iot blockchain node.js that is actually running a web assembly",
    "start": "333720",
    "end": "339840"
  },
  {
    "text": "as well over V8 and so on on the browser side you have a bunch of applications that",
    "start": "339840",
    "end": "346979"
  },
  {
    "text": "actually really leverage on webassembly you can think of everything that is really intensive in computation like",
    "start": "346979",
    "end": "354300"
  },
  {
    "text": "video audio image processing this kind of stuff video game and also complex web",
    "start": "354300",
    "end": "359820"
  },
  {
    "text": "apps see like Google Earth for example to give you a quick history Google Earth",
    "start": "359820",
    "end": "367020"
  },
  {
    "text": "before was only available on Chrome because it was using something called native clients that was like a precursor",
    "start": "367020",
    "end": "373740"
  },
  {
    "text": "of webassembly but since they switched back they evolved into webassembly it's",
    "start": "373740",
    "end": "379560"
  },
  {
    "text": "not possible to for you to run Google Earth and whatever web browser that support webassembly",
    "start": "379560",
    "end": "386340"
  },
  {
    "text": "so in this talk we're gonna mainly focus on this part that means providing a web",
    "start": "386340",
    "end": "391560"
  },
  {
    "text": "assembly module to the Target that will be the virtual machine and our final goal will be Italy to find",
    "start": "391560",
    "end": "399000"
  },
  {
    "text": "bugs in all those different stage so that's what we're gonna do and my goal is to show you how you can basically",
    "start": "399000",
    "end": "406699"
  },
  {
    "text": "improve your fuzzing process over time to basically reach more in the paths",
    "start": "406699",
    "end": "414120"
  },
  {
    "text": "into the webassembly VM so the first technique I used was",
    "start": "414120",
    "end": "419280"
  },
  {
    "text": "coverage guided fuzzing it's pretty easy the main reason for that is since the first stage is actually the",
    "start": "419280",
    "end": "426000"
  },
  {
    "text": "decoding of a binary coverage guided phasing is actually switching pretty well",
    "start": "426000",
    "end": "431280"
  },
  {
    "text": "so the main goal for us will be to provide a corporate so the Corpus that will be contained that will contain",
    "start": "431280",
    "end": "436979"
  },
  {
    "text": "webassembly module basically we're going to provide that to a further the further will do the mutation meaning that it",
    "start": "436979",
    "end": "443580"
  },
  {
    "text": "will add Randomness into the webassembly binary and then it will provide that to",
    "start": "443580",
    "end": "448860"
  },
  {
    "text": "the webassembly vvm at the same time you were monitoring the coverage so we monitor oh deep and or",
    "start": "448860",
    "end": "456360"
  },
  {
    "text": "interesting this sample is and based on that we will either classify that as an",
    "start": "456360",
    "end": "461520"
  },
  {
    "text": "interesting sample if we get a crush we are keeping the crash on one side and so on so it's basically the way it works",
    "start": "461520",
    "end": "470039"
  },
  {
    "text": "so for the input I mentioned the web does only binary format so it's not that",
    "start": "470039",
    "end": "475199"
  },
  {
    "text": "complicated if you take a look at the structure you have one Adder that is composed of one magic number A plus a",
    "start": "475199",
    "end": "481800"
  },
  {
    "text": "version so the magic number is a null byte Asm and then you have 11 sections that are",
    "start": "481800",
    "end": "488880"
  },
  {
    "text": "unique and one custom section that can be in a limited amount of time",
    "start": "488880",
    "end": "496460"
  },
  {
    "text": "so the first Target I first was basically a bunch of Standalone VM and passing libraries so mainly written in C",
    "start": "496620",
    "end": "503699"
  },
  {
    "text": "and C plus plus the main reason for that is I was working a lot on reversing and",
    "start": "503699",
    "end": "510000"
  },
  {
    "text": "Analysis of web assembly module so I was using those tool and I decided that it",
    "start": "510000",
    "end": "515039"
  },
  {
    "text": "could be a good shot to actually fuss them at the same time so I Target on I",
    "start": "515039",
    "end": "520740"
  },
  {
    "text": "Target basically been a VM webm3 and some other and even redirect2 since I",
    "start": "520740",
    "end": "527640"
  },
  {
    "text": "was using that for reversing as well so nothing complicated I mean I will not",
    "start": "527640",
    "end": "534300"
  },
  {
    "text": "focus too much on that that's the classical stuff if you are doing phasing coverage guided fuzzing I've used AFL on",
    "start": "534300",
    "end": "540360"
  },
  {
    "text": "First and AFL plus Blues my favorite is actually on first but AFL plus first is definitely a good content there and",
    "start": "540360",
    "end": "548519"
  },
  {
    "text": "after running a bunch of stuff and just basically instrumenting the target using",
    "start": "548519",
    "end": "555660"
  },
  {
    "text": "the class the custom version the custom GCC or clang of unk's first or AFL I was",
    "start": "555660",
    "end": "562380"
  },
  {
    "text": "able to basically make those stuff to run and already start to find some crashes so it was really easy not that",
    "start": "562380",
    "end": "569160"
  },
  {
    "text": "complicated so that's the good part the actually most complicated part is",
    "start": "569160",
    "end": "574620"
  },
  {
    "text": "actually include the traging because I was triggering a lot of different bugs so I report a bunch of them already and",
    "start": "574620",
    "end": "583260"
  },
  {
    "text": "as you can see the most common bug that we actually found was out of born",
    "start": "583260",
    "end": "588300"
  },
  {
    "text": "semester gener and so on so that was the common bugs at",
    "start": "588300",
    "end": "594360"
  },
  {
    "text": "this stage that is in that case the parsing of the web assembly module",
    "start": "594360",
    "end": "599760"
  },
  {
    "text": "so the first Improvement I've made in my phrasing strategy was basically to reuse",
    "start": "599760",
    "end": "604800"
  },
  {
    "text": "the corporate between all Targets the main reason of that is since all those targets are written differently they",
    "start": "604800",
    "end": "612060"
  },
  {
    "text": "follow the same specification but the implementation is different so there is a clear real value of reusing one",
    "start": "612060",
    "end": "620100"
  },
  {
    "text": "corpora to another because what one tool will do in terms of the CFG and so on",
    "start": "620100",
    "end": "625740"
  },
  {
    "text": "and the different checks it will do will might might not be the same as another one so it was the first step and then",
    "start": "625740",
    "end": "632760"
  },
  {
    "text": "the second step was also to add all the crashes that iPhone on one sample directly into the global corpora that I",
    "start": "632760",
    "end": "639779"
  },
  {
    "text": "was using again the main reason is it might be a crash for one program but it could be a really interesting sample for",
    "start": "639779",
    "end": "646500"
  },
  {
    "text": "another one so there is no reason I have I'm not doing that",
    "start": "646500",
    "end": "652100"
  },
  {
    "text": "then I decided to do in-process fuzzing so in process fuzzing is basically let's",
    "start": "652260",
    "end": "658740"
  },
  {
    "text": "say optimized way to do fuzzing the main goal is basically you will get your",
    "start": "658740",
    "end": "664800"
  },
  {
    "text": "further that will actually run your Target in the same process so it will be way faster and in that case you don't",
    "start": "664800",
    "end": "672420"
  },
  {
    "text": "need to restart the process you can just for every test cases replace them in",
    "start": "672420",
    "end": "677880"
  },
  {
    "text": "memory and provide that to to your Target and so on and so on so it's way",
    "start": "677880",
    "end": "682920"
  },
  {
    "text": "faster the main reason I've been doing that only on reverse and python since I",
    "start": "682920",
    "end": "688320"
  },
  {
    "text": "was already playing with CNC plus plus and finding bugs it was",
    "start": "688320",
    "end": "693360"
  },
  {
    "text": "not worth it at the time to basically create fuzzing harnesses for for them it",
    "start": "693360",
    "end": "698399"
  },
  {
    "text": "was already working well I mean I was happy with the result so um I decided that it was the good shot",
    "start": "698399",
    "end": "703860"
  },
  {
    "text": "to actually Target something else and basically try some other tools so in",
    "start": "703860",
    "end": "709680"
  },
  {
    "text": "that case I first the Standalone VM and passing Library mainly on Rust so you",
    "start": "709680",
    "end": "715560"
  },
  {
    "text": "can think of wasmail wasam time was Ambassador and so on so this kind of web",
    "start": "715560",
    "end": "720600"
  },
  {
    "text": "assembly runtime and Standalone VM and I also Target two other tools that I",
    "start": "720600",
    "end": "726240"
  },
  {
    "text": "was using like piwazam that is a python interpreter and webassembly.js that is a JavaScript",
    "start": "726240",
    "end": "733019"
  },
  {
    "text": "library for webassemian Channel so the result of that when you are doing",
    "start": "733019",
    "end": "739560"
  },
  {
    "text": "in-process phasing on the rest you have a bunch of tools that are available the funny part is actually those tools are",
    "start": "739560",
    "end": "745380"
  },
  {
    "text": "binding to the classical CNC plus plus tool so if you are already familiar with",
    "start": "745380",
    "end": "750720"
  },
  {
    "text": "them it should be pretty easy for you to basically ramp up into a rest in process fuzzing so I was using cargo first on",
    "start": "750720",
    "end": "757920"
  },
  {
    "text": "first rust and AFL West and the main part in that case is to write the",
    "start": "757920",
    "end": "763860"
  },
  {
    "text": "phasing harness so with some log the documentation is pretty good but even in that case I mean Rusty is not that",
    "start": "763860",
    "end": "770040"
  },
  {
    "text": "complicated to to read so you can it's pretty straightforward and most of the",
    "start": "770040",
    "end": "775860"
  },
  {
    "text": "time the name of the function are pretty clear of what it's doing so I've made that for basically all the",
    "start": "775860",
    "end": "782880"
  },
  {
    "text": "target I was mentioning previously so a bunch of facing RMS and then I was",
    "start": "782880",
    "end": "788579"
  },
  {
    "text": "running the stuff so it was not that complex uh what you just need to write the phasing RNs learn a bit or to to",
    "start": "788579",
    "end": "795660"
  },
  {
    "text": "play with the framework and you are good to go for python MGS I was using asterisk so",
    "start": "795660",
    "end": "803399"
  },
  {
    "text": "it's a python fuzzing framework it's actually based on lip fuzzer and GS",
    "start": "803399",
    "end": "808740"
  },
  {
    "text": "files so again you just need to write the facing RNs so you don't need to know",
    "start": "808740",
    "end": "814019"
  },
  {
    "text": "exactly all the language work and the expert in development and reduce",
    "start": "814019",
    "end": "819120"
  },
  {
    "text": "language you follow while the black fuzzing on this template and then you",
    "start": "819120",
    "end": "824820"
  },
  {
    "text": "you are more or less good to go so the result of that was like 62 bucks uh",
    "start": "824820",
    "end": "830339"
  },
  {
    "text": "mainly on Rust actually um and the type of bug I actually found",
    "start": "830339",
    "end": "835980"
  },
  {
    "text": "was a panicking macros index out of bond unwrapping overflows and so on so just",
    "start": "835980",
    "end": "843000"
  },
  {
    "text": "to mention um we say that rest is memory safe that's true but it doesn't mean there is",
    "start": "843000",
    "end": "848760"
  },
  {
    "text": "no availability typically this one in the context of a CLI application it's",
    "start": "848760",
    "end": "855180"
  },
  {
    "text": "it's not critical but if you are using that in a library on a server and you",
    "start": "855180",
    "end": "860700"
  },
  {
    "text": "are able to trigger a panic in rest that means you are crushing the server and for blockchain software in the same way",
    "start": "860700",
    "end": "866760"
  },
  {
    "text": "you are crushing the whole network or at least the node so that's clearly critical and that's really important to",
    "start": "866760",
    "end": "873899"
  },
  {
    "text": "to have that in mind so the Improvement I made at this point",
    "start": "873899",
    "end": "880920"
  },
  {
    "text": "was basically to improve my corpora I was reaching a point where actually the",
    "start": "880920",
    "end": "886139"
  },
  {
    "text": "coverage was not evolving that much so I basically took a look at the official",
    "start": "886139",
    "end": "891600"
  },
  {
    "text": "test Suite of webassembly and also at some existing phasing Copperas that was",
    "start": "891600",
    "end": "897120"
  },
  {
    "text": "available on GitHub and I add that to my copies again the main goal is",
    "start": "897120",
    "end": "904019"
  },
  {
    "text": "I maybe have won a specific binary that will actually contain a dedicated",
    "start": "904019",
    "end": "910440"
  },
  {
    "text": "feature on webassembly that I was not aware of and it's maybe worth it to put",
    "start": "910440",
    "end": "916199"
  },
  {
    "text": "it in place then we are going to the validation",
    "start": "916199",
    "end": "922019"
  },
  {
    "text": "phase so I've been fuzzing a lot the decoding Parts finding a lot of bugs but",
    "start": "922019",
    "end": "928380"
  },
  {
    "text": "then I reached the point where basically my web assembly module was correct in term of the structure the",
    "start": "928380",
    "end": "935339"
  },
  {
    "text": "binary structure but in terms of the content there was invalid so the first",
    "start": "935339",
    "end": "940680"
  },
  {
    "text": "step of course is to add some new fuzzing harnesses dedicated to First deuce on tripods that are the validation",
    "start": "940680",
    "end": "947540"
  },
  {
    "text": "function and then I decide to also take a look a bit more at the validation",
    "start": "947540",
    "end": "954959"
  },
  {
    "text": "mechanism to learn a bit more which kind of stuff was actually checked at this",
    "start": "954959",
    "end": "960420"
  },
  {
    "text": "point so there is a bunch of stuff like the type the especially the type and the",
    "start": "960420",
    "end": "967620"
  },
  {
    "text": "kind of op code and also interact with each other so there is a huge work on",
    "start": "967620",
    "end": "972839"
  },
  {
    "text": "that and it's really interesting uh to to learn more from this from this stuff",
    "start": "972839",
    "end": "979260"
  },
  {
    "text": "so photogram are best fuzzing usually we are writing a grammar and so on so I've",
    "start": "979260",
    "end": "986160"
  },
  {
    "text": "used grammar based using in a bit different way in that case my goal since we have the",
    "start": "986160",
    "end": "992660"
  },
  {
    "text": "webassembly text format available that is called the what I decide to grab all",
    "start": "992660",
    "end": "998759"
  },
  {
    "text": "the what files that I was able to find and using some tool to basically convert",
    "start": "998759",
    "end": "1005480"
  },
  {
    "text": "its text format into webassembly module so that's the good part with these",
    "start": "1005480",
    "end": "1011839"
  },
  {
    "text": "specifications that have been designed like that in mind at the beginning you",
    "start": "1011839",
    "end": "1017000"
  },
  {
    "text": "can go from a what file to text format that is on the right easily to the",
    "start": "1017000",
    "end": "1022519"
  },
  {
    "text": "binary format and so on so we can also and that's been for us for debugging and",
    "start": "1022519",
    "end": "1028220"
  },
  {
    "text": "even to write some edge cases use this text format representation",
    "start": "1028220",
    "end": "1033500"
  },
  {
    "text": "so it looked like that it's not that complicated you have the next s",
    "start": "1033500",
    "end": "1038660"
  },
  {
    "text": "expression like to basically Define the module section and so on and then you",
    "start": "1038660",
    "end": "1044240"
  },
  {
    "text": "have a linear representation that will contain the function body and the low level instruction so it's pretty easy to",
    "start": "1044240",
    "end": "1050179"
  },
  {
    "text": "read to be honest I mean if you want to do reversing on that it's definitely not that complicated if you are doing a bit",
    "start": "1050179",
    "end": "1056960"
  },
  {
    "text": "of reversing in terms of the MVP instruction set it was not that big the data type are",
    "start": "1056960",
    "end": "1063860"
  },
  {
    "text": "pretty limited it's basically integral you have some control flow operator",
    "start": "1063860",
    "end": "1069740"
  },
  {
    "text": "that's why it's a turing complete instruction set you have some memory operators to load",
    "start": "1069740",
    "end": "1075740"
  },
  {
    "text": "and store from the memory some local and Global variable some arithmetic operators constant and also some",
    "start": "1075740",
    "end": "1082100"
  },
  {
    "text": "conversion operators that basically allow you to switch from let's say float32 to integer 64.",
    "start": "1082100",
    "end": "1089840"
  },
  {
    "text": "so when I said that actually the instruction set is not that too complicated that's why for example the",
    "start": "1089840",
    "end": "1095780"
  },
  {
    "text": "for the integer 32 and the integer 64 that's basically the exact same up code it's just that is specific for one",
    "start": "1095780",
    "end": "1102980"
  },
  {
    "text": "format or another so there is let's say already Alpha do stuff that",
    "start": "1102980",
    "end": "1108320"
  },
  {
    "text": "are actually pretty redundant and easy to understand so by doing that I actually found some",
    "start": "1108320",
    "end": "1115460"
  },
  {
    "text": "vulnerability more or less by accident because when I was converting this what file into webassembly module I was at",
    "start": "1115460",
    "end": "1122960"
  },
  {
    "text": "the same time doing some phrasing because why not and actually found some bugs inside so it was mainly assertion",
    "start": "1122960",
    "end": "1131000"
  },
  {
    "text": "failure and one out of bond memory error so not that interesting and especially",
    "start": "1131000",
    "end": "1136820"
  },
  {
    "text": "even the tools are not supposed to be run into a server and so on so even the",
    "start": "1136820",
    "end": "1144140"
  },
  {
    "text": "impact was not that interesting but I mean there's still some free bugs so why not",
    "start": "1144140",
    "end": "1150440"
  },
  {
    "text": "so the strategy Improvement I've made in that case what was since I was aware of",
    "start": "1150440",
    "end": "1155960"
  },
  {
    "text": "the text format and the internal structure I decided to try to write write some edge cases about that",
    "start": "1155960",
    "end": "1162940"
  },
  {
    "text": "typically I mentioned there is some section and this section are unique so what is happening basically if you try",
    "start": "1162940",
    "end": "1169460"
  },
  {
    "text": "to duplicate the unique one and the custom one I try to change the ordering to see if some tools are actually",
    "start": "1169460",
    "end": "1177140"
  },
  {
    "text": "dependent of that and so on and so on I even create a polygrot webassembly",
    "start": "1177140",
    "end": "1182480"
  },
  {
    "text": "module that is at the same time a valid HTML file and a valid webassembly module",
    "start": "1182480",
    "end": "1187520"
  },
  {
    "text": "just for fun but actually at TNN sync I found any box with that but at least it",
    "start": "1187520",
    "end": "1194419"
  },
  {
    "text": "was funny so it was the first step I got even more",
    "start": "1194419",
    "end": "1200179"
  },
  {
    "text": "stuff in my copper that's good but it's still not enough uh I mean when I'm",
    "start": "1200179",
    "end": "1205220"
  },
  {
    "text": "fuzzing in that case at this moment that's mean I will be stuck I will always go to the decoding phases",
    "start": "1205220",
    "end": "1211820"
  },
  {
    "text": "and then going to the validation phases so what I decide to use is structure",
    "start": "1211820",
    "end": "1217100"
  },
  {
    "text": "overpassing where basically I will directly since I have knowledge of the",
    "start": "1217100",
    "end": "1223820"
  },
  {
    "text": "web assembly module structure internally I will be able to generate valid webassembly module directly from scratch",
    "start": "1223820",
    "end": "1230539"
  },
  {
    "text": "inside my further so it's really good I",
    "start": "1230539",
    "end": "1235940"
  },
  {
    "text": "will not lose time on in passing so it will still go in the passing phase but what I mean by that is instead of",
    "start": "1235940",
    "end": "1242600"
  },
  {
    "text": "sending let's say 100 file into the process and maybe 50 of them are",
    "start": "1242600",
    "end": "1248360"
  },
  {
    "text": "rejected for invalid formats in that case 100 of them will actually go",
    "start": "1248360",
    "end": "1253820"
  },
  {
    "text": "through the validation phases so that was a really efficient in that",
    "start": "1253820",
    "end": "1259280"
  },
  {
    "text": "way so the way I've used that is basically by leveraging on inverse what",
    "start": "1259280",
    "end": "1264440"
  },
  {
    "text": "we call the arbitrary trait so you basically have already a bunch of tools",
    "start": "1264440",
    "end": "1270740"
  },
  {
    "text": "that you saw in rest that actually Define a webassembly module structure so by using the arbitrary trait I'm forcing",
    "start": "1270740",
    "end": "1278559"
  },
  {
    "text": "basically my further to try to fill this structure by random byte to to get",
    "start": "1278559",
    "end": "1285380"
  },
  {
    "text": "something valid in the same way you have wazam Smith that is actually even better that was",
    "start": "1285380",
    "end": "1292100"
  },
  {
    "text": "released a bit after I was doing that and typically this web assembly test",
    "start": "1292100",
    "end": "1297260"
  },
  {
    "text": "care generator will generate web assembly modules that are always valid",
    "start": "1297260",
    "end": "1302419"
  },
  {
    "text": "at the same time so I retarget all my stuff in Pro by doing in process fuzzing",
    "start": "1302419",
    "end": "1309620"
  },
  {
    "text": "for the at least the rush libraries and I at the end I also Target the other one",
    "start": "1309620",
    "end": "1314960"
  },
  {
    "text": "since the corpora was actually shared between each other so that's also the good part",
    "start": "1314960",
    "end": "1320900"
  },
  {
    "text": "so it was not that complicated again you just need to do a bunch of rest in that",
    "start": "1320900",
    "end": "1325940"
  },
  {
    "text": "case arbitrary trade can be a bit challenging but that's okay so iPhone xero newbergs directly using that but",
    "start": "1325940",
    "end": "1333740"
  },
  {
    "text": "the fact is since the new stuff was generated and put directly in the copper",
    "start": "1333740",
    "end": "1339080"
  },
  {
    "text": "I don't monitor exactly which new bugs",
    "start": "1339080",
    "end": "1344840"
  },
  {
    "text": "what are the input file that actually triggered these bugs after mutation so I",
    "start": "1344840",
    "end": "1350659"
  },
  {
    "text": "might actually I found some bugs using this technique but I don't know so at",
    "start": "1350659",
    "end": "1356120"
  },
  {
    "text": "least it increased the coverage since I was filling my corpora with only valid",
    "start": "1356120",
    "end": "1361340"
  },
  {
    "text": "web assembly modules that are interesting so at the end we have the instant",
    "start": "1361340",
    "end": "1368240"
  },
  {
    "text": "session and the invocation and in that case I decided to use differential phasing so that could look weird because",
    "start": "1368240",
    "end": "1374600"
  },
  {
    "text": "differential forzing is not something that is really common um to be honest so first of all I create",
    "start": "1374600",
    "end": "1382100"
  },
  {
    "text": "some new fuzzing harnesses to actually instant set my module and then I decide",
    "start": "1382100",
    "end": "1388520"
  },
  {
    "text": "to basically Implement differential refusing using some really simple scripts so the goal of differential",
    "start": "1388520",
    "end": "1395000"
  },
  {
    "text": "phasing in that case is you're going to provide a web assembly module to your",
    "start": "1395000",
    "end": "1400220"
  },
  {
    "text": "different targets and you can monitor the result it could be really simple like monitoring the return code or it",
    "start": "1400220",
    "end": "1407480"
  },
  {
    "text": "could be more complex like like checking the exact return value so",
    "start": "1407480",
    "end": "1414140"
  },
  {
    "text": "by doing that my goal is really to identify for one given webassembly module what are the result of all the",
    "start": "1414140",
    "end": "1421159"
  },
  {
    "text": "different targets I have and if some of them are actually rejecting the module or validating the module and it's",
    "start": "1421159",
    "end": "1428179"
  },
  {
    "text": "different than the other that means something wrong is happening so differential for me the phasing is for",
    "start": "1428179",
    "end": "1434419"
  },
  {
    "text": "me to really maybe most efficient technique to find logic bugs the",
    "start": "1434419",
    "end": "1439460"
  },
  {
    "text": "downside is of course you need to have multiple implementation of the same Target or maybe different version of the",
    "start": "1439460",
    "end": "1447620"
  },
  {
    "text": "same Target that's usually what we have with like regression testing that's exactly what we are doing and so on so",
    "start": "1447620",
    "end": "1454460"
  },
  {
    "text": "some famous differential facing protection for example crypto first and the goal is to find cryptographic",
    "start": "1454460",
    "end": "1461419"
  },
  {
    "text": "vulnerability in the different implementation so it's done by Guido vancran and another one is Beacon first",
    "start": "1461419",
    "end": "1468559"
  },
  {
    "text": "that is another project of mine and it was basically fuzzing at around 2.0",
    "start": "1468559",
    "end": "1474320"
  },
  {
    "text": "validation clients by doing differential fuzzing again the same goal finding",
    "start": "1474320",
    "end": "1479419"
  },
  {
    "text": "logic bugs so logic bugs can look not so appealing",
    "start": "1479419",
    "end": "1485360"
  },
  {
    "text": "to be honest it's always depending of the context and who are running the web",
    "start": "1485360",
    "end": "1490760"
  },
  {
    "text": "assembly module typically what you will have most of the time are an implemented",
    "start": "1490760",
    "end": "1496760"
  },
  {
    "text": "feature especially on webassembly so it will require you a lot of debugging and",
    "start": "1496760",
    "end": "1503659"
  },
  {
    "text": "manual analysis to determine if there is no false positive so that's the downside",
    "start": "1503659",
    "end": "1508820"
  },
  {
    "text": "but on the other way if we are going in the context of blockchains a logic bug",
    "start": "1508820",
    "end": "1515900"
  },
  {
    "text": "like this one meaning you are providing a web assembly module as a smart",
    "start": "1515900",
    "end": "1520940"
  },
  {
    "text": "contract and it will be executed and so on and the result can be different between clients that's typically the",
    "start": "1520940",
    "end": "1528679"
  },
  {
    "text": "sign of a concerns juiceberg so it's really really critical I mean it's one of the most critical vulnerability you",
    "start": "1528679",
    "end": "1534740"
  },
  {
    "text": "can have in production software in general so for the further nothing that",
    "start": "1534740",
    "end": "1540200"
  },
  {
    "text": "complicated just a python script or batch script is enough I've used rest as",
    "start": "1540200",
    "end": "1545299"
  },
  {
    "text": "well you can basically Target all the different um I mean I was targeting all the different",
    "start": "1545299",
    "end": "1551720"
  },
  {
    "text": "targets I implemented because I mean I already got the all the phasing harness",
    "start": "1551720",
    "end": "1557240"
  },
  {
    "text": "so it was really easy for that so it was not that complicated but yeah it needed",
    "start": "1557240",
    "end": "1563659"
  },
  {
    "text": "again it requires a lot of manual analysis to to determine if yes or not",
    "start": "1563659",
    "end": "1569960"
  },
  {
    "text": "you have something ability so I found two birds in wabits that is one of the",
    "start": "1569960",
    "end": "1575000"
  },
  {
    "text": "most choose Library written since in that case yeah it was incorrect",
    "start": "1575000",
    "end": "1581419"
  },
  {
    "text": "validation or rejection of web assembly module but what about brothers because since",
    "start": "1581419",
    "end": "1588559"
  },
  {
    "text": "the beginning I'm speaking more evenly more on Standalone VM so let's talk",
    "start": "1588559",
    "end": "1594620"
  },
  {
    "text": "quickly about browsers and actually the stuff that they got that is a bit more special",
    "start": "1594620",
    "end": "1599900"
  },
  {
    "text": "so typically web assembly the webassembly vvm is part of the JavaScript online and so it's directly",
    "start": "1599900",
    "end": "1607700"
  },
  {
    "text": "inside a spider monkey JavaScript code or V8 for the most famous one and we",
    "start": "1607700",
    "end": "1614120"
  },
  {
    "text": "have multiple stuff that are actually involved the web assembly of course you",
    "start": "1614120",
    "end": "1619820"
  },
  {
    "text": "have the web assembly runtime that is exactly the same that what I've shown you and then you also have the",
    "start": "1619820",
    "end": "1625279"
  },
  {
    "text": "JavaScript interrupt that's mean that's all those webassembly API that allow you",
    "start": "1625279",
    "end": "1630320"
  },
  {
    "text": "to communicate from JavaScript to the webassembly VM so for this one I mean",
    "start": "1630320",
    "end": "1636200"
  },
  {
    "text": "there is plenty of them actually the MDM is really a good documentation for that and using those JavaScript API you are",
    "start": "1636200",
    "end": "1645020"
  },
  {
    "text": "able to basically instantiate a webassembly module you can create some",
    "start": "1645020",
    "end": "1650240"
  },
  {
    "text": "memory some Global some tables so all the stuff I told you that was basically shared between the um the host and the",
    "start": "1650240",
    "end": "1659299"
  },
  {
    "text": "web from the instance and we are doing something like that so when you are",
    "start": "1659299",
    "end": "1664580"
  },
  {
    "text": "dealing with JavaScript code in that case doing something like coverage guided fuzzing is not that easy and",
    "start": "1664580",
    "end": "1673460"
  },
  {
    "text": "especially if you want to mutate your input file you will need to you need to",
    "start": "1673460",
    "end": "1678799"
  },
  {
    "text": "deal with JavaScript syntax so definitely not the best so for that usually I'm using grammar",
    "start": "1678799",
    "end": "1685580"
  },
  {
    "text": "based fuzzing so that's what I've done the only downside is you will need to write the grammar so it could be time",
    "start": "1685580",
    "end": "1691640"
  },
  {
    "text": "consuming but I mean the webassembly apis are not that huge so that's what",
    "start": "1691640",
    "end": "1696860"
  },
  {
    "text": "I've done with Dharma and tomato and do store will basically generate some",
    "start": "1696860",
    "end": "1702200"
  },
  {
    "text": "sequence of webassembly JavaScript API like the one on the bottom and after",
    "start": "1702200",
    "end": "1708740"
  },
  {
    "text": "that I will provide this Javascript file directly to the GSM join and it will basically create some objects and Target",
    "start": "1708740",
    "end": "1716539"
  },
  {
    "text": "the extra new part of of the online that",
    "start": "1716539",
    "end": "1721940"
  },
  {
    "text": "we have that is the JavaScript interrupt and also the web assembly runtime by",
    "start": "1721940",
    "end": "1726980"
  },
  {
    "text": "effect I've also use a really good tool named facility for wasm it's basically firstly",
    "start": "1726980",
    "end": "1733580"
  },
  {
    "text": "with some patch to add web assembly on it so that's what you have on the top",
    "start": "1733580",
    "end": "1739400"
  },
  {
    "text": "right it's actually generating some really good stuff and it was working",
    "start": "1739400",
    "end": "1744440"
  },
  {
    "text": "pretty well so at the end it was long but not that complex to create",
    "start": "1744440",
    "end": "1752059"
  },
  {
    "text": "those grammar and it actually triggers some bugs that in that case are not public or duplicates on some other one",
    "start": "1752059",
    "end": "1759440"
  },
  {
    "text": "so that's working well usually when I'm teaching browser phrasing I always",
    "start": "1759440",
    "end": "1765220"
  },
  {
    "text": "invite people to actually use grammar base using for that it's also a really",
    "start": "1765220",
    "end": "1770240"
  },
  {
    "text": "good way for you to learn more about your targets because you will need basically to implement all the spec on",
    "start": "1770240",
    "end": "1776299"
  },
  {
    "text": "that so that's the that's the good point so that's the webassembly VM the fact is",
    "start": "1776299",
    "end": "1783980"
  },
  {
    "text": "since we are running inside a browser there is what also what we call also the webassem legit enzymes so usually the",
    "start": "1783980",
    "end": "1792500"
  },
  {
    "text": "classical way is let's say for JavaScript you have your JavaScript it will be passed into AST it will be",
    "start": "1792500",
    "end": "1798980"
  },
  {
    "text": "converted into bytecode and it will be interpreted after some time when the code will be hot it will go through the",
    "start": "1798980",
    "end": "1806360"
  },
  {
    "text": "jit and join and you will get like a optimized machine code that will be executed each time you are calling the",
    "start": "1806360",
    "end": "1812840"
  },
  {
    "text": "function so the fact is they actually implement the same concept for",
    "start": "1812840",
    "end": "1818419"
  },
  {
    "text": "webassembly so when you are providing a webassembly module the first time it will be interpreted so nothing fancy in",
    "start": "1818419",
    "end": "1826340"
  },
  {
    "text": "that case and if we become hot it will go through the jit compilers and be",
    "start": "1826340",
    "end": "1833539"
  },
  {
    "text": "optimized generate machine code and be execute it as well so for spider monkey we have like a",
    "start": "1833539",
    "end": "1840260"
  },
  {
    "text": "switch here compilers JavaScript as well and for V8",
    "start": "1840260",
    "end": "1845960"
  },
  {
    "text": "we have liftoff and turbo fan that are the the one that are used",
    "start": "1845960",
    "end": "1851000"
  },
  {
    "text": "so the main goal for me with in that case different shelf using against the digital design is basically to reproduce",
    "start": "1851000",
    "end": "1858440"
  },
  {
    "text": "a concept and a technique that is already used for classical JavaScript that is we have a function we are",
    "start": "1858440",
    "end": "1867440"
  },
  {
    "text": "calling this function with some argument we are getting a result then we force the optimization by the compilers and we",
    "start": "1867440",
    "end": "1873860"
  },
  {
    "text": "are calling again the function what we opt to find is basically a difference between the interpretation and the",
    "start": "1873860",
    "end": "1881299"
  },
  {
    "text": "compilation result and typically those kind of stuff lead to",
    "start": "1881299",
    "end": "1886460"
  },
  {
    "text": "um incorrect optimization so that's the good part the fact is",
    "start": "1886460",
    "end": "1892220"
  },
  {
    "text": "since we also have webassembly compilers we can perfectly apply the exact same technique for webassembly and in that",
    "start": "1892220",
    "end": "1899840"
  },
  {
    "text": "case I will load I will generate a webassembly module that will do some",
    "start": "1899840",
    "end": "1905000"
  },
  {
    "text": "operation I will load that using JavaScript I will call this function I",
    "start": "1905000",
    "end": "1910760"
  },
  {
    "text": "mean call this module this module by default will be optimized by liftoff and",
    "start": "1910760",
    "end": "1916820"
  },
  {
    "text": "I will force the optimization in order to make turbo fan to optimize the web",
    "start": "1916820",
    "end": "1925220"
  },
  {
    "text": "assembly module and this particular function the main goal again let's say that you provide an argument to a function the",
    "start": "1925220",
    "end": "1933320"
  },
  {
    "text": "goal is to find for the same argument two different results on that so that's",
    "start": "1933320",
    "end": "1939440"
  },
  {
    "text": "a technique that actually is is working well it's General it's actually not that",
    "start": "1939440",
    "end": "1946159"
  },
  {
    "text": "complicated to do but the downside is you need to generate valid webassembly",
    "start": "1946159",
    "end": "1951320"
  },
  {
    "text": "module and especially valid web assembly module that contain interesting bytecode",
    "start": "1951320",
    "end": "1957559"
  },
  {
    "text": "inside so that's what you can see on the",
    "start": "1957559",
    "end": "1962679"
  },
  {
    "text": "upper right is basically the the code generated by liftoff so it's a pure",
    "start": "1962679",
    "end": "1970820"
  },
  {
    "text": "assembly and then you can see on the bottom the card generated by chobofan so",
    "start": "1970820",
    "end": "1976460"
  },
  {
    "text": "the way it will go from one to the other is by doing a lot of optimization on the",
    "start": "1976460",
    "end": "1981740"
  },
  {
    "text": "bytecode and leveraging on a bunch of profiling data that he actually retrieve",
    "start": "1981740",
    "end": "1989539"
  },
  {
    "text": "at runtime and yeah again the goal is is this one is the one on the right and the",
    "start": "1989539",
    "end": "1996200"
  },
  {
    "text": "one at the bottom is actually doing the same stuff that's the goal we want to",
    "start": "1996200",
    "end": "2001240"
  },
  {
    "text": "find out so for the moment nurburgs are found with that it's actually a recent stuff",
    "start": "2001240",
    "end": "2008620"
  },
  {
    "text": "I've made for all the the rest of the research it was basically um taking me a bunch of months and years to",
    "start": "2008620",
    "end": "2017860"
  },
  {
    "text": "do over all these process over the time and basically also adapt all my tooling to the modification",
    "start": "2017860",
    "end": "2025120"
  },
  {
    "text": "in webassembly so this one is still in progress I will let you know if I'm finding any any bugs on that the the",
    "start": "2025120",
    "end": "2032320"
  },
  {
    "text": "fact is I have not so there is something big research about jit and gine fuzzing",
    "start": "2032320",
    "end": "2038380"
  },
  {
    "text": "and vulnerability research in like incorrect optimization and so on really a bunch of",
    "start": "2038380",
    "end": "2044700"
  },
  {
    "text": "research done by Samuel from Project zero and Amy from red to system and so",
    "start": "2044700",
    "end": "2052358"
  },
  {
    "text": "on but on the web assembly side I have not seen a lot of stuff actually so if",
    "start": "2052359",
    "end": "2057878"
  },
  {
    "text": "someone is doing something similar please please come to to see me at the end I will be really happy to to discuss",
    "start": "2057879",
    "end": "2064540"
  },
  {
    "text": "that so the final result of all this journey is basically something like 120 bugs",
    "start": "2064540",
    "end": "2072398"
  },
  {
    "text": "more or less some of them I maybe just forget the final couple of size it's",
    "start": "2072399",
    "end": "2078280"
  },
  {
    "text": "like 2 million web assembly modules so as I mentioned the fact that I'm storing everything between all those different",
    "start": "2078280",
    "end": "2084339"
  },
  {
    "text": "tools targeting something like more than 20 30 targets it's just starting to be a",
    "start": "2084339",
    "end": "2090220"
  },
  {
    "text": "really huge couple the good part is when you have something like that if there is",
    "start": "2090220",
    "end": "2095260"
  },
  {
    "text": "a new tool that comes in the wild and that is actually passing webassembly",
    "start": "2095260",
    "end": "2101380"
  },
  {
    "text": "binary I can just take all my corpora doing copies minimization on it and I",
    "start": "2101380",
    "end": "2107260"
  },
  {
    "text": "will get something that will reach a huge part of the coverage for free so it took me around two years not full",
    "start": "2107260",
    "end": "2114520"
  },
  {
    "text": "time of course I would say maybe six months full time to to do all of it uh",
    "start": "2114520",
    "end": "2119800"
  },
  {
    "text": "something like 84 fuzzing RMS is more or less I actually released an open source",
    "start": "2119800",
    "end": "2124960"
  },
  {
    "text": "tool a web assemblyment I'm fuzzing it's I released maybe two two years ago so it",
    "start": "2124960",
    "end": "2131140"
  },
  {
    "text": "might need to be updated but it's in progress the interesting stuff we can",
    "start": "2131140",
    "end": "2137140"
  },
  {
    "text": "see is that actually coverage guided fuzzing and in process fuzzing that we can consider are actually using similar",
    "start": "2137140",
    "end": "2143920"
  },
  {
    "text": "technique but just one is faster than the other one is the stuff that actually find the most bugs so that's always",
    "start": "2143920",
    "end": "2152320"
  },
  {
    "text": "showing that it should be a default stuff to be done by the developer because I clearly it was clearly not",
    "start": "2152320",
    "end": "2160240"
  },
  {
    "text": "difficult to to implement that so there is no valid reason to for you to not put any fuzzing and coverage graduate",
    "start": "2160240",
    "end": "2167260"
  },
  {
    "text": "phasing in your CI especially because you basically are fuzzing framework for all the language that exist more or less",
    "start": "2167260",
    "end": "2174280"
  },
  {
    "text": "so that was nice the challenges it's it's complicated to update everything I",
    "start": "2174280",
    "end": "2180820"
  },
  {
    "text": "mean all the different targets evolved and I mean I have a full-time job so um",
    "start": "2180820",
    "end": "2186160"
  },
  {
    "text": "and it's not that um so that's why also the fact that",
    "start": "2186160",
    "end": "2191560"
  },
  {
    "text": "there is a different web assembly features um is an issue especially for",
    "start": "2191560",
    "end": "2197740"
  },
  {
    "text": "differential phasing as I mentioned because one might support it and not the other one",
    "start": "2197740",
    "end": "2203740"
  },
  {
    "text": "and then you also need to adapt to multiple phrasing framework so that's actually the good part I mean it's a",
    "start": "2203740",
    "end": "2209920"
  },
  {
    "text": "it's a nice excuse to basically try to first everything and um and so on so",
    "start": "2209920",
    "end": "2216220"
  },
  {
    "text": "some future Next Step I'm planning actually to implement and and first like",
    "start": "2216220",
    "end": "2222339"
  },
  {
    "text": "the go there is some tool some web assembly VM written and go so I'm planning to First",
    "start": "2222339",
    "end": "2227800"
  },
  {
    "text": "this one as well maybe some Java one uh there'll be some implementation as well",
    "start": "2227800",
    "end": "2233500"
  },
  {
    "text": "and also since uh recently the announce webassembly MVP 2.0 I'm also planning to",
    "start": "2233500",
    "end": "2240280"
  },
  {
    "text": "basically update my facing analysis and maybe find some new bugs in those new features that will be added into",
    "start": "2240280",
    "end": "2248380"
  },
  {
    "text": "so I hope you learn a lot and that my journey into fuzzing can help you to",
    "start": "2248380",
    "end": "2254079"
  },
  {
    "text": "basically copy past this journey but just change the Target and please let me",
    "start": "2254079",
    "end": "2259599"
  },
  {
    "text": "know if you are doing fuzzing and you want to discuss more about that I mean you have my Twitter and I'm pretty",
    "start": "2259599",
    "end": "2265420"
  },
  {
    "text": "responsive so thank you [Applause]",
    "start": "2265420",
    "end": "2272380"
  },
  {
    "text": "[Music]",
    "start": "2272380",
    "end": "2275669"
  },
  {
    "text": "[Music]",
    "start": "2279530",
    "end": "2282619"
  }
]