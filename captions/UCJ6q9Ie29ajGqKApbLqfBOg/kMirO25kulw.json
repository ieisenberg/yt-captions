[
  {
    "text": "[Music]",
    "start": "1180",
    "end": "14730"
  },
  {
    "text": "hello and welcome to portable data exfiltration xss for pdfs in this talk i'm going to",
    "start": "17520",
    "end": "25119"
  },
  {
    "text": "show you how to booby trap a pdf document track when a pdf is opened or closed",
    "start": "25119",
    "end": "32078"
  },
  {
    "text": "even when loaded from a file system and exfiltrate the contents of an",
    "start": "32079",
    "end": "38399"
  },
  {
    "text": "unknown pdf on both acrobat and on chrome all these techniques use a pdf injection",
    "start": "38399",
    "end": "47600"
  },
  {
    "text": "my colleague james kettle was watching a black hat talk about pdfs and he was looking at the pdf",
    "start": "48079",
    "end": "54879"
  },
  {
    "text": "code and thought to himself this looks injectable and he got back to the office and we had",
    "start": "54879",
    "end": "61280"
  },
  {
    "text": "a discussion about the pdf presentation and he said to me",
    "start": "61280",
    "end": "67280"
  },
  {
    "text": "pdf code is totally injectable and i responded i think it's impossible you wouldn't",
    "start": "67280",
    "end": "73200"
  },
  {
    "text": "know the structure of the pdf the xref table wouldn't work the objects wouldn't be linked to",
    "start": "73200",
    "end": "79040"
  },
  {
    "text": "i just can't see how that would work but that didn't stop me there i then began to test for pdf injection",
    "start": "79040",
    "end": "87840"
  },
  {
    "text": "so first i'm going to cover injection theory how you can get user input inside a pdf",
    "start": "87840",
    "end": "93600"
  },
  {
    "text": "why you just can't inject arbitrary content i'll talk about my methodology i use to",
    "start": "93600",
    "end": "99119"
  },
  {
    "text": "test the various libraries i'll discuss two libraries that i exploited and i will",
    "start": "99119",
    "end": "105439"
  },
  {
    "text": "discuss exploiting the injections on chrome and acrobat as well as a hybrid injection that works",
    "start": "105439",
    "end": "111600"
  },
  {
    "text": "on both i'll wrap up with defense and that will leave five minutes for",
    "start": "111600",
    "end": "116799"
  },
  {
    "text": "questions so server-side pdf generation is",
    "start": "116799",
    "end": "123200"
  },
  {
    "text": "everywhere it's in invoices in receipts in e-tickets even pair slips in boarding passes the",
    "start": "123200",
    "end": "130239"
  },
  {
    "text": "list is endless so there's plenty of opportunity to get user input inside a pdf document",
    "start": "130239",
    "end": "137920"
  },
  {
    "text": "if you think of a pdf injection point as xss for example and imagine your xss uh",
    "start": "137920",
    "end": "146239"
  },
  {
    "text": "vulnerability executes within a parenthesis and in a function call then this is the",
    "start": "146239",
    "end": "152560"
  },
  {
    "text": "same sort of situation you get with pdf injection like in a javascript injection you need",
    "start": "152560",
    "end": "159440"
  },
  {
    "text": "to ensure that the syntax is valid so your injection needs to be valid and the existing chord needs to be valid and",
    "start": "159440",
    "end": "166400"
  },
  {
    "text": "this means you need to repair the chord before the injection as well as after",
    "start": "166400",
    "end": "171440"
  },
  {
    "text": "the injection so how a pdf is structured so we have",
    "start": "171440",
    "end": "177280"
  },
  {
    "text": "objects we have the xrf table and we've got the trailer so the objects allow you to define",
    "start": "177280",
    "end": "183599"
  },
  {
    "text": "images and text streams the xref table points to each of those images in the document",
    "start": "183599",
    "end": "190480"
  },
  {
    "text": "and the trailer is at the end of the document and specifies the root",
    "start": "190480",
    "end": "196000"
  },
  {
    "text": "object so here's what an object looks like in pdf code",
    "start": "196840",
    "end": "202319"
  },
  {
    "text": "so this is the first object with one the revision of the object which is zero",
    "start": "202319",
    "end": "208000"
  },
  {
    "text": "and then the keyword for the starting of the object and this is a dictionary so dictionaries",
    "start": "208000",
    "end": "215440"
  },
  {
    "text": "begin with those characters and we also have a dictionary key in this case pages",
    "start": "215440",
    "end": "221120"
  },
  {
    "text": "so pages refers to the amount of pages in the document and you'll notice the two space zero",
    "start": "221120",
    "end": "229200"
  },
  {
    "text": "space are this is a reference in pdf code so what references do is allow",
    "start": "229200",
    "end": "236080"
  },
  {
    "text": "you to link to other objects in the pdf document so this is get this is",
    "start": "236080",
    "end": "241360"
  },
  {
    "text": "saying go to uh object number two revision number zero and link that",
    "start": "241360",
    "end": "248720"
  },
  {
    "text": "to that object and that will define how many pages are on the page",
    "start": "248720",
    "end": "254480"
  },
  {
    "text": "and that's the end of the dictionary so this is super basic uh intro to how a pdf object is",
    "start": "254480",
    "end": "260880"
  },
  {
    "text": "structured but it'll give you enough information to understand the rest of this talk",
    "start": "260880",
    "end": "268000"
  },
  {
    "text": "this is the xref table so an xrf table always begins with the xref keyword now",
    "start": "268000",
    "end": "275440"
  },
  {
    "text": "uh the pdf specification specifies that you have a blank object at the start with a",
    "start": "275440",
    "end": "283040"
  },
  {
    "text": "specific revision number so this this one is free and that's what f indicates after that",
    "start": "283040",
    "end": "291440"
  },
  {
    "text": "object that is not used in the pdf document you have the first object and",
    "start": "291440",
    "end": "297600"
  },
  {
    "text": "the number refers to the position in the document where this object occurs so in this case it's 10 so",
    "start": "297600",
    "end": "304320"
  },
  {
    "text": "it's saying at 10 position of the document the first object is located",
    "start": "304320",
    "end": "311759"
  },
  {
    "text": "the start xref keyword tells you where the start of the xref table occurs",
    "start": "311759",
    "end": "319199"
  },
  {
    "text": "so in this case it's 430 so this tells you tells the clients where",
    "start": "319199",
    "end": "325360"
  },
  {
    "text": "the xrf table begins so i want to give you a little bit of",
    "start": "325360",
    "end": "331039"
  },
  {
    "text": "information about how the pdf is paused this is an ultra high level view of it",
    "start": "331039",
    "end": "336479"
  },
  {
    "text": "just so you can understand where our injections occur so the start xref is read and points to",
    "start": "336479",
    "end": "343039"
  },
  {
    "text": "the xref table the xref table then lists all the objects",
    "start": "343039",
    "end": "348400"
  },
  {
    "text": "so the client the pdf client will look through all of the xrf table",
    "start": "348400",
    "end": "353759"
  },
  {
    "text": "to gather all the objects and if you're going to do an injection it's probably going to",
    "start": "353759",
    "end": "359199"
  },
  {
    "text": "occur within an object itself so our payload will be executed within an object so our payload",
    "start": "359199",
    "end": "366560"
  },
  {
    "text": "will be executed when the object's executed and then the document is rendered",
    "start": "366560",
    "end": "372479"
  },
  {
    "text": "so we have text streams and we have annotations in a text stream you can define your own",
    "start": "374000",
    "end": "380560"
  },
  {
    "text": "text using a parenthesis so we have an object here which is",
    "start": "380560",
    "end": "386479"
  },
  {
    "text": "number four it's got a length with the dictionary key length and the stream indicates it's a stream",
    "start": "386479",
    "end": "393360"
  },
  {
    "text": "object the b team stands for begin text and we have the font and the font size",
    "start": "393360",
    "end": "401120"
  },
  {
    "text": "and then finally we have where our injection can occur so inside parenthesis you can",
    "start": "401120",
    "end": "408720"
  },
  {
    "text": "define your text which will be displayed on screen so if you can inject some a closing",
    "start": "408720",
    "end": "413919"
  },
  {
    "text": "parenthesis then you can inject your own chord but there's a couple of problems we have here so",
    "start": "413919",
    "end": "420880"
  },
  {
    "text": "if the length is different when you inject your code then the object won't be rendered and",
    "start": "420880",
    "end": "428319"
  },
  {
    "text": "you'll need knowledge about the pdf when you inject here in order to link to other objects so i",
    "start": "428319",
    "end": "436000"
  },
  {
    "text": "tried this on various libraries and i was unsuccessful in exploiting text text streams and this was because for",
    "start": "436000",
    "end": "443280"
  },
  {
    "text": "two reasons one the um the parentheses were escaped",
    "start": "443280",
    "end": "448400"
  },
  {
    "text": "correctly by the library and two the you you couldn't inject any chord",
    "start": "448400",
    "end": "454960"
  },
  {
    "text": "because that would break the structure of the pdf so i was unsuccessful in exploiting text",
    "start": "454960",
    "end": "460319"
  },
  {
    "text": "streams however i encountered annotations",
    "start": "460319",
    "end": "465759"
  },
  {
    "text": "and annotations are great they'll let you specify a link anywhere in the document so you",
    "start": "465759",
    "end": "472720"
  },
  {
    "text": "create a new annotation you give it a rectangle an area on the page to click you give it a border or whatever",
    "start": "472720",
    "end": "480720"
  },
  {
    "text": "and you specify an action and that action can have a uri property or a",
    "start": "480720",
    "end": "486720"
  },
  {
    "text": "uri dictionary key and in parenthesis you can specify a uri so our injection",
    "start": "486720",
    "end": "494080"
  },
  {
    "text": "can occur here and this looks miles more promising for pdf injection attacks because we don't",
    "start": "494080",
    "end": "501840"
  },
  {
    "text": "need knowledge of the pdf we can just inject another annotation and that won't affect the length",
    "start": "501840",
    "end": "508240"
  },
  {
    "text": "of the object so it looks far more promising to inject inside",
    "start": "508240",
    "end": "514000"
  },
  {
    "text": "annotations so i was testing various libraries i",
    "start": "514000",
    "end": "520159"
  },
  {
    "text": "think i got to about eight and i came up with the following methodology",
    "start": "520159",
    "end": "525760"
  },
  {
    "text": "identify construct and they exploit so first you need to identify can you",
    "start": "525760",
    "end": "531760"
  },
  {
    "text": "break out of or can you use backslashes to escape the escapes added by the library i tried",
    "start": "531760",
    "end": "539839"
  },
  {
    "text": "multi-byte characters so i use for example 5c 29 which is the",
    "start": "539839",
    "end": "545440"
  },
  {
    "text": "backslash and a closing parenthesis and the library may convert those multi-characters to",
    "start": "545440",
    "end": "550959"
  },
  {
    "text": "single back characters and allow you to escape the annotation",
    "start": "550959",
    "end": "557600"
  },
  {
    "text": "i tried overflowing the ascii values so higher than the maximum amount allowed",
    "start": "557600",
    "end": "562720"
  },
  {
    "text": "in ascii and that could overflow to other characters that might bypass the check",
    "start": "562720",
    "end": "570000"
  },
  {
    "text": "i tried causing parsing errors by injecting nulls and injecting endeavour file markers",
    "start": "570640",
    "end": "578720"
  },
  {
    "text": "and also comments once i identified that the library was",
    "start": "578720",
    "end": "585279"
  },
  {
    "text": "vulnerable then i tried to construct the attack so there's two ways to construct the",
    "start": "585279",
    "end": "590880"
  },
  {
    "text": "attack you can call the alert one function if you have a pdf that is not blind",
    "start": "590880",
    "end": "597279"
  },
  {
    "text": "so you've got a reflected pdf injection vulnerability so you can use the alert function so",
    "start": "597279",
    "end": "604399"
  },
  {
    "text": "it's app.alert in acrobat or in chrome and that will tell you whether the injection",
    "start": "604399",
    "end": "611200"
  },
  {
    "text": "was successful but if you have a blind vulnerability so a blind pdf injection",
    "start": "611200",
    "end": "617120"
  },
  {
    "text": "you have no idea what the pdf structure is going to be like you",
    "start": "617120",
    "end": "623600"
  },
  {
    "text": "don't actually interact with the pdf somebody else does but you have no idea what that pdf",
    "start": "623600",
    "end": "629519"
  },
  {
    "text": "looks like then you can use a callback using the submit form function in javascript or the submit form",
    "start": "629519",
    "end": "636320"
  },
  {
    "text": "function in pdf actions and then once you've identified that the",
    "start": "636320",
    "end": "641360"
  },
  {
    "text": "the victim has clicked on um somewhere in the pdf and your um your exploit then you can build your",
    "start": "641360",
    "end": "648880"
  },
  {
    "text": "exploit to steal the contents of that unknown pdf using the submit form function",
    "start": "648880",
    "end": "654959"
  },
  {
    "text": "or you can steal the contents of the pdf without javascript using the submit form action",
    "start": "654959",
    "end": "662480"
  },
  {
    "text": "so on two vulnerable libraries so i tested around eight libraries until i encountered a",
    "start": "663600",
    "end": "670560"
  },
  {
    "text": "vulnerable one [Music] the first vulnerable library was called pdf hyphen lib",
    "start": "670560",
    "end": "676399"
  },
  {
    "text": "this is an npm uh module and works with node and it gets around 52 well over 52 000",
    "start": "676399",
    "end": "685120"
  },
  {
    "text": "weekly downloads but they made a pretty huge mistake so",
    "start": "685120",
    "end": "690480"
  },
  {
    "text": "here's some javascript on the um displayed on screen that allows you to",
    "start": "690480",
    "end": "697120"
  },
  {
    "text": "construct a pdf and you can create an annotation and",
    "start": "697120",
    "end": "702240"
  },
  {
    "text": "that annotation has a helper which is called pdfstring.off",
    "start": "702240",
    "end": "708320"
  },
  {
    "text": "so if we zoom into that this is the vulnerable code so the uri property",
    "start": "708320",
    "end": "714880"
  },
  {
    "text": "is using this function and your input lands inside this function and what you can do",
    "start": "714880",
    "end": "721440"
  },
  {
    "text": "you can inject a parenthesis to break out of that text stream or annotation uri stream",
    "start": "721440",
    "end": "729200"
  },
  {
    "text": "and you can break your you can inject your own pdf code",
    "start": "729200",
    "end": "735200"
  },
  {
    "text": "the next library i encountered it is jspdf this has over a quarter of a million",
    "start": "736000",
    "end": "741760"
  },
  {
    "text": "weekly downloads so it's quite popular they have it you can define annotations",
    "start": "741760",
    "end": "749120"
  },
  {
    "text": "using their api and in their api they have a url property",
    "start": "749120",
    "end": "754160"
  },
  {
    "text": "and the url property was vulnerable to pdf injection like the previous example",
    "start": "754160",
    "end": "760079"
  },
  {
    "text": "so here your input occurs in this url property and you can inject parenthesis to inject",
    "start": "760079",
    "end": "765920"
  },
  {
    "text": "your own pdf code so now let's talk about exploiting",
    "start": "765920",
    "end": "771600"
  },
  {
    "text": "injections on acrobat so this is the alert one of pdf",
    "start": "771600",
    "end": "777519"
  },
  {
    "text": "injection so like you've got an alert one in javascript this is the same sort of",
    "start": "777519",
    "end": "782560"
  },
  {
    "text": "style for pdf injection so first we break out of the pdf string",
    "start": "782560",
    "end": "788240"
  },
  {
    "text": "using the closing parenthesis we use the js dictionary to define our javascript",
    "start": "788240",
    "end": "794160"
  },
  {
    "text": "so in this case app.alert1 we repair the existing action using an opening",
    "start": "794160",
    "end": "801040"
  },
  {
    "text": "parenthesis and then this will create an alert box to prove that our injection worked",
    "start": "801040",
    "end": "807519"
  },
  {
    "text": "i use this style of injection across many different injections",
    "start": "807519",
    "end": "813040"
  },
  {
    "text": "to prove my injection worked and then build up on that and improve it",
    "start": "813040",
    "end": "818560"
  },
  {
    "text": "so although i had javascript execution there was a couple of challenges and",
    "start": "819600",
    "end": "824959"
  },
  {
    "text": "those challenges were the limitations of acrobat javascript",
    "start": "824959",
    "end": "830399"
  },
  {
    "text": "you couldn't access the dom you couldn't read cookies you only had a basic selection of",
    "start": "830399",
    "end": "837199"
  },
  {
    "text": "objects to choose from so although you've got javascript execution you're limited",
    "start": "837199",
    "end": "842480"
  },
  {
    "text": "on what you can do in acrobat javascript",
    "start": "842480",
    "end": "847199"
  },
  {
    "text": "but i thought well we can exfiltrate the contents of the pdf so we've got javascript",
    "start": "848160",
    "end": "854560"
  },
  {
    "text": "execution why don't we get the contents of the pdf so here i injected the",
    "start": "854560",
    "end": "862240"
  },
  {
    "text": "submit form function and called it to an external collaborator url and",
    "start": "862240",
    "end": "868399"
  },
  {
    "text": "passed the submit as property to the submit form um function object",
    "start": "868399",
    "end": "877040"
  },
  {
    "text": "and specified pdf this would then steal the contents of the entire pdf",
    "start": "877040",
    "end": "883199"
  },
  {
    "text": "which is pretty cool because if you have a blind pdf injection then you can get the entire contents of",
    "start": "883199",
    "end": "888480"
  },
  {
    "text": "that pdf whenever the user clicks anywhere on the pdf",
    "start": "888480",
    "end": "894399"
  },
  {
    "text": "you can also do this without javascript which might be important when a client",
    "start": "894800",
    "end": "900000"
  },
  {
    "text": "does not support javascript but allows you to use the submit form action so here i'm injecting",
    "start": "900000",
    "end": "908880"
  },
  {
    "text": "a new annotation i specify the submit form action give it an external collaborator url and",
    "start": "908880",
    "end": "916079"
  },
  {
    "text": "then pass the opening parenthesis to continue the",
    "start": "916079",
    "end": "924240"
  },
  {
    "text": "rest of the code i use the flags dictionary key",
    "start": "924240",
    "end": "931279"
  },
  {
    "text": "and if you specify 256 then this means the entire contents of",
    "start": "931279",
    "end": "937839"
  },
  {
    "text": "the pdf will be submitted to that external location so this is really handy for",
    "start": "937839",
    "end": "943360"
  },
  {
    "text": "blind pdf injection and i found a way to booby trap the",
    "start": "943360",
    "end": "950480"
  },
  {
    "text": "entire pdf document so no matter where the victim clicks on the page",
    "start": "950480",
    "end": "956560"
  },
  {
    "text": "this javascript or submit form action will be called",
    "start": "956560",
    "end": "962880"
  },
  {
    "text": "so first i inject a separate annotation i specify the wrecked dictionary key which",
    "start": "962880",
    "end": "970079"
  },
  {
    "text": "specifies where on the page you want the annotation to be clickable so in this case it's the",
    "start": "970079",
    "end": "977199"
  },
  {
    "text": "x and y coordinate and the width and height and this makes the entire page clickable",
    "start": "977199",
    "end": "982560"
  },
  {
    "text": "and then i use the existing parenthesis to complete the injection",
    "start": "982560",
    "end": "988560"
  },
  {
    "text": "you can also execute automatically on acrobat which is really powerful because you can",
    "start": "989680",
    "end": "995360"
  },
  {
    "text": "inject an annotation and all the victim needs to do is open the pdf you can do this using the",
    "start": "995360",
    "end": "1001839"
  },
  {
    "text": "pv dictionary key once that's been specified then the annotation will execute",
    "start": "1001839",
    "end": "1009040"
  },
  {
    "text": "automatically when the page is loaded there is also a pc dictionary key",
    "start": "1009040",
    "end": "1018560"
  },
  {
    "text": "and this executes when the pdf is closed so you can do an injection",
    "start": "1018560",
    "end": "1025839"
  },
  {
    "text": "on a blind pdf injection the victim can open the pdf",
    "start": "1025839",
    "end": "1030959"
  },
  {
    "text": "you know when the victim has opened it and when the victim has closed it it is super powerful",
    "start": "1030959",
    "end": "1039038"
  },
  {
    "text": "so then i came up with the shortest possible xs a pdf vector and",
    "start": "1039039",
    "end": "1047280"
  },
  {
    "text": "here we have the existing chord on the page and on acrobat what you can do is reuse the existing annotation regardless",
    "start": "1047280",
    "end": "1055679"
  },
  {
    "text": "of what it is so in this case it's a uri but it will allow you to inject um",
    "start": "1055679",
    "end": "1061280"
  },
  {
    "text": "your own value for the the current annotation and execute javascript and this is the",
    "start": "1061280",
    "end": "1067919"
  },
  {
    "text": "shortest that i managed to get the vector2 so it's pretty cool we inject a javascript",
    "start": "1067919",
    "end": "1075120"
  },
  {
    "text": "that uses the existing action we call the alert function and we use the existing parenthesis to",
    "start": "1075120",
    "end": "1081919"
  },
  {
    "text": "complete the injection so i think that's probably the shortest",
    "start": "1081919",
    "end": "1087520"
  },
  {
    "text": "pdf injection vector possible but i challenge you to try and find one shorter",
    "start": "1088240",
    "end": "1095840"
  },
  {
    "text": "so i've mentioned that we can open you can track when a pdf is opened or",
    "start": "1096640",
    "end": "1103200"
  },
  {
    "text": "closed automatically from an annotation but what about when you're loading a pdf",
    "start": "1103200",
    "end": "1109840"
  },
  {
    "text": "from the file system well there are a couple of challenges",
    "start": "1109840",
    "end": "1115200"
  },
  {
    "text": "post requests are blocked so the user gets a prompt whether to allow or deny them",
    "start": "1115200",
    "end": "1121280"
  },
  {
    "text": "well that's not very good for an attacker is there a way that we can make a",
    "start": "1121280",
    "end": "1127440"
  },
  {
    "text": "request automatically regardless if the user clicks allow or deny",
    "start": "1127440",
    "end": "1133520"
  },
  {
    "text": "well i wrote an enumerator to do just that so i wrote an enumerator to loop through",
    "start": "1133520",
    "end": "1139919"
  },
  {
    "text": "all the objects and call every single function",
    "start": "1139919",
    "end": "1144960"
  },
  {
    "text": "and pass the collaborator url as the argument and i skipped the functions that i knew",
    "start": "1144960",
    "end": "1153440"
  },
  {
    "text": "required a prompt and then waited to see what results i would get i",
    "start": "1153440",
    "end": "1160480"
  },
  {
    "text": "found a function it's called cbs shared review if offline dialogue wow okay that's a",
    "start": "1160480",
    "end": "1168240"
  },
  {
    "text": "mouthful that is interesting though um so what happens",
    "start": "1168240",
    "end": "1174240"
  },
  {
    "text": "is it makes a dns request regardless what option you choose in the",
    "start": "1174240",
    "end": "1179520"
  },
  {
    "text": "prompt which is really cool because we can track when a user opens or closes the pdf from the",
    "start": "1179520",
    "end": "1186480"
  },
  {
    "text": "file system and we can enumerate the contents of the pdf using dns",
    "start": "1186480",
    "end": "1192480"
  },
  {
    "text": "and steal the contents of the pdf and this is what the dialog looks like",
    "start": "1192480",
    "end": "1198320"
  },
  {
    "text": "so when you execute the function it makes the dns request and it says acrobat reader cannot",
    "start": "1198320",
    "end": "1206159"
  },
  {
    "text": "connect to the review server and then shows the reverse dns so i know that",
    "start": "1206159",
    "end": "1211200"
  },
  {
    "text": "that has worked correctly and i get an interaction in burp to tell to tell me that the",
    "start": "1211200",
    "end": "1217840"
  },
  {
    "text": "request has been made and you've got two options work offline or keep trying and it",
    "start": "1217840",
    "end": "1223280"
  },
  {
    "text": "doesn't matter which they click which is cool so you can track when the user open and close a pdf",
    "start": "1223280",
    "end": "1231360"
  },
  {
    "text": "without any user interaction",
    "start": "1231360",
    "end": "1235840"
  },
  {
    "text": "so i was quite pleased with exploiting acrobat but i wanted to exploit chrome too",
    "start": "1236559",
    "end": "1243440"
  },
  {
    "text": "so i wanted to use my existing injections on chrome but they all failed",
    "start": "1243440",
    "end": "1251120"
  },
  {
    "text": "so i tried all the existing vectors and they didn't work so then i tried to overwrite the url",
    "start": "1251520",
    "end": "1260000"
  },
  {
    "text": "so instead of executing javascript i simply tried to change the url so i did this by injecting an additional",
    "start": "1260000",
    "end": "1267760"
  },
  {
    "text": "annotation in the annotations array and specified a uri and specified an",
    "start": "1267760",
    "end": "1273280"
  },
  {
    "text": "external url and um this allowed me to",
    "start": "1273280",
    "end": "1278559"
  },
  {
    "text": "overwrite the url which was pretty cool so i could overwrite the existing action",
    "start": "1278559",
    "end": "1283919"
  },
  {
    "text": "with a new action that would then change the url but we can't exfiltrate the pdf from",
    "start": "1283919",
    "end": "1289520"
  },
  {
    "text": "that so there was a couple of challenges so",
    "start": "1289520",
    "end": "1295440"
  },
  {
    "text": "the acrobat vectors didn't work javascript didn't work in annotations we could use over we",
    "start": "1295440",
    "end": "1303280"
  },
  {
    "text": "could overwrite the url which was something but it was still not as impressive as",
    "start": "1303280",
    "end": "1308720"
  },
  {
    "text": "executing javascript so can we make javascript work work in chrome",
    "start": "1308720",
    "end": "1315520"
  },
  {
    "text": "well this was my first attempt to create javascript execution from a pdf",
    "start": "1316080",
    "end": "1321440"
  },
  {
    "text": "injection on chrome and as you can see it's a lot of code a",
    "start": "1321440",
    "end": "1326640"
  },
  {
    "text": "lot of pdf injection and some of parts of it requires",
    "start": "1326640",
    "end": "1332000"
  },
  {
    "text": "knowledge and references to different objects in the pdf which of course we can't have because we",
    "start": "1332000",
    "end": "1337600"
  },
  {
    "text": "have no knowledge of this pdf so i managed to reduce a lot of that",
    "start": "1337600",
    "end": "1344320"
  },
  {
    "text": "code and um with this injection vector",
    "start": "1344320",
    "end": "1349360"
  },
  {
    "text": "this will execute javascript on chrome first the field type is required so in",
    "start": "1349360",
    "end": "1355440"
  },
  {
    "text": "this case a button and the value of the button in this case it doesn't matter we just put here",
    "start": "1355440",
    "end": "1361840"
  },
  {
    "text": "but whenever you have the um if you link the annotation to a submit",
    "start": "1361840",
    "end": "1369840"
  },
  {
    "text": "form button then chrome will allow javascript execution on that annotation",
    "start": "1369840",
    "end": "1375520"
  },
  {
    "text": "which is super handy so there was a couple of challenges so",
    "start": "1375520",
    "end": "1382799"
  },
  {
    "text": "no knowledge of the pdf is needed which is cool but we are restricted by pdf",
    "start": "1382799",
    "end": "1389200"
  },
  {
    "text": "and the capabilities of the javascript so i could call the submit form function",
    "start": "1389200",
    "end": "1396799"
  },
  {
    "text": "but it will not enable me to steal the entire contents of the pdf so it doesn't support all the features",
    "start": "1396799",
    "end": "1404240"
  },
  {
    "text": "that acrobat supports so there was a couple of challenges there that i needed to solve",
    "start": "1404240",
    "end": "1411200"
  },
  {
    "text": "so of course i wrote an enumerator and i enumerated every",
    "start": "1411440",
    "end": "1416559"
  },
  {
    "text": "object and property and firstly a for loop and used get on",
    "start": "1416559",
    "end": "1422400"
  },
  {
    "text": "property names to gather all the properties then because um acrobat doesn't allow",
    "start": "1422400",
    "end": "1429440"
  },
  {
    "text": "the console object like acrobat does um i had to output the data",
    "start": "1429440",
    "end": "1436480"
  },
  {
    "text": "in chunks so i could gather all the information in an alert box",
    "start": "1436480",
    "end": "1441760"
  },
  {
    "text": "so here i add the various properties to the chunks",
    "start": "1441760",
    "end": "1448320"
  },
  {
    "text": "of the data and then output each of the chunks to give me a list of properties",
    "start": "1448320",
    "end": "1454000"
  },
  {
    "text": "supported by that object and i found some cool functions get page",
    "start": "1454000",
    "end": "1461200"
  },
  {
    "text": "number of words get page nth word these sound really promising for stealing the contents of",
    "start": "1461200",
    "end": "1467039"
  },
  {
    "text": "the pdf so here's how i extracted text from",
    "start": "1467039",
    "end": "1473279"
  },
  {
    "text": "a chrome pdf injection so i used the base uh injection as i",
    "start": "1473279",
    "end": "1480559"
  },
  {
    "text": "mentioned previously so we inject the form button",
    "start": "1480559",
    "end": "1486320"
  },
  {
    "text": "on the parent dictionary key and then we inject our annotation",
    "start": "1486320",
    "end": "1493520"
  },
  {
    "text": "with javascript and then i'll loop through the words on the page so first i use get",
    "start": "1493520",
    "end": "1500080"
  },
  {
    "text": "page number of words then i use get page nth word to get me a specific word on the page",
    "start": "1500080",
    "end": "1506640"
  },
  {
    "text": "and then i store them in an array and then output each of the or",
    "start": "1506640",
    "end": "1513600"
  },
  {
    "text": "words on the page and that will show me the words of the pdf and then i could submit that to an",
    "start": "1513600",
    "end": "1519039"
  },
  {
    "text": "external server so a user would have to click anywhere on the page i could then steal the contents of that",
    "start": "1519039",
    "end": "1525760"
  },
  {
    "text": "unknown pdf totally blind and it could go to my server",
    "start": "1525760",
    "end": "1531200"
  },
  {
    "text": "another cool technique that i came up with is using ssrf via a pdf injection",
    "start": "1532799",
    "end": "1540559"
  },
  {
    "text": "which is really exciting because i'll allow you to change to change different vulnerabilities together",
    "start": "1540559",
    "end": "1546799"
  },
  {
    "text": "so here again i use the base chrome injection that i mentioned and this time instead of injecting a",
    "start": "1546799",
    "end": "1554000"
  },
  {
    "text": "form button i inject a text field and give this text field",
    "start": "1554000",
    "end": "1559279"
  },
  {
    "text": "a parameter name so using the t dictionary key you can specify a parameter name and the v dictionary",
    "start": "1559279",
    "end": "1566640"
  },
  {
    "text": "key will allow you to specify a parameter value and then i use the submit form function and pass these",
    "start": "1566640",
    "end": "1573919"
  },
  {
    "text": "arguments to the submit form function that will allow me to make a request and this is what the request looks like",
    "start": "1573919",
    "end": "1580720"
  },
  {
    "text": "so interestingly there's no content type header but i can control the um",
    "start": "1580720",
    "end": "1587360"
  },
  {
    "text": "the post of the the post parameters so here i control through and bar and",
    "start": "1587360",
    "end": "1593039"
  },
  {
    "text": "also interestingly you can embed raw new lines in the request",
    "start": "1593039",
    "end": "1598240"
  },
  {
    "text": "which can be useful for other attacks such as request smuggling",
    "start": "1598240",
    "end": "1604158"
  },
  {
    "text": "after exploiting chrome injections i thought how about one that works on both clients",
    "start": "1606080",
    "end": "1613440"
  },
  {
    "text": "that would be pretty interesting and the way i can i can do that is reuse the existing annotation on",
    "start": "1613440",
    "end": "1619840"
  },
  {
    "text": "acrobat so here we reuse the existing annotation and then which is a uri but we inject",
    "start": "1619840",
    "end": "1626559"
  },
  {
    "text": "javascript acrobat happily allows that and that executes using the existing annotation",
    "start": "1626559",
    "end": "1631840"
  },
  {
    "text": "on acrobat and then we inject a further annotation with a rectangle specific for",
    "start": "1631840",
    "end": "1639200"
  },
  {
    "text": "chrome so it will cover half the page or something and then when the victim clicks on that",
    "start": "1639200",
    "end": "1644799"
  },
  {
    "text": "it would then execute javascript on chrome and if they click on the existing annotation that would work",
    "start": "1644799",
    "end": "1650799"
  },
  {
    "text": "on acrobat so now i'd like to give you a demo of a",
    "start": "1650799",
    "end": "1656880"
  },
  {
    "text": "real-time chrome injection",
    "start": "1656880",
    "end": "1660559"
  },
  {
    "text": "[Music] so here we have the jspdf library",
    "start": "1662380",
    "end": "1669760"
  },
  {
    "text": "they have this cool interface where you can use javascript in this box and then generate a pdf in",
    "start": "1669760",
    "end": "1676480"
  },
  {
    "text": "this box so here",
    "start": "1676480",
    "end": "1680640"
  },
  {
    "text": "we create a new jspdf object we set the font size we create an",
    "start": "1681520",
    "end": "1687279"
  },
  {
    "text": "annotation and that annotation allows you to specify the x and y coordinates and the",
    "start": "1687279",
    "end": "1692320"
  },
  {
    "text": "width and height we give the annotation a type of the link on the url and our input will go here",
    "start": "1692320",
    "end": "1700880"
  },
  {
    "text": "and also add the text so you have this library supports",
    "start": "1700880",
    "end": "1709679"
  },
  {
    "text": "client-side javascript as well as server-side javascript so the server-side stuff works with node.js",
    "start": "1709679",
    "end": "1716720"
  },
  {
    "text": "and the client-side stuff works in the browser which is pretty cool for a demonstration",
    "start": "1716720",
    "end": "1723039"
  },
  {
    "text": "so um we'll take the injection that i mentioned in my talk so",
    "start": "1723039",
    "end": "1729360"
  },
  {
    "text": "here we're um injecting a new annotation with a rectangle for the area",
    "start": "1729360",
    "end": "1735600"
  },
  {
    "text": "we use the dictionary key to specify the form button and we use our",
    "start": "1735600",
    "end": "1743039"
  },
  {
    "text": "we inject javascript that will just simply call the alert box so if i copy that",
    "start": "1743039",
    "end": "1749760"
  },
  {
    "text": "and then if we inject into the url property",
    "start": "1750320",
    "end": "1756660"
  },
  {
    "text": "[Music] so this is injecting raw pdf code in the url property so normally the",
    "start": "1756660",
    "end": "1764159"
  },
  {
    "text": "attack would occur in a post request for example but for the purposes of demoing",
    "start": "1764159",
    "end": "1769679"
  },
  {
    "text": "i'm showing you a client-side javascript representation instead",
    "start": "1769679",
    "end": "1775520"
  },
  {
    "text": "so we've injected our pdf code and now as you can see the entire document is clickable you",
    "start": "1775520",
    "end": "1781279"
  },
  {
    "text": "click on it and we get our alert box so that's how a pdf injection would work so this could",
    "start": "1781279",
    "end": "1789520"
  },
  {
    "text": "apply to a non-blind situation where you know the structure",
    "start": "1789520",
    "end": "1794720"
  },
  {
    "text": "of the pdf or a blind situation where you would call the submit form function to post to an",
    "start": "1794720",
    "end": "1800960"
  },
  {
    "text": "external url now interestingly chrome will",
    "start": "1800960",
    "end": "1806159"
  },
  {
    "text": "only allow you to call javascript or sorry not call javascript to call the",
    "start": "1806159",
    "end": "1811760"
  },
  {
    "text": "form submission or the with a user interaction event so that's something to bear in mind",
    "start": "1811760",
    "end": "1823840"
  },
  {
    "text": "so um whilst testing various pdf generation software and testing various",
    "start": "1824000",
    "end": "1830240"
  },
  {
    "text": "sites i came across a hr application that was vulnerable to pdf upload",
    "start": "1830240",
    "end": "1836960"
  },
  {
    "text": "and what was interesting was i could use insert scripts fantastic technique",
    "start": "1836960",
    "end": "1843679"
  },
  {
    "text": "to read same origin resources and that was really cool but",
    "start": "1843679",
    "end": "1850640"
  },
  {
    "text": "the waff was blocking the pdf user agent so my my attack wasn't working which was",
    "start": "1850640",
    "end": "1856720"
  },
  {
    "text": "so unfortunate but thankfully i came around i found a solution",
    "start": "1856720",
    "end": "1862000"
  },
  {
    "text": "to to bypass that by using cash resources so as long as the uh resource was cached",
    "start": "1862000",
    "end": "1869360"
  },
  {
    "text": "i could read that using this technique without uh triggering the waff which was pretty",
    "start": "1869360",
    "end": "1876840"
  },
  {
    "text": "cool so to wrap up um pdf libraries should",
    "start": "1876840",
    "end": "1882799"
  },
  {
    "text": "escape pdf strings that includes parenthesis and backslashes if you don't escape any of those",
    "start": "1882799",
    "end": "1888960"
  },
  {
    "text": "characters then you're in trouble too and vulnerable to pdf injection you can",
    "start": "1888960",
    "end": "1894320"
  },
  {
    "text": "confirm that your software is not vulnerable to these attacks by using",
    "start": "1894320",
    "end": "1900799"
  },
  {
    "text": "the vectors mentioned in this post and then confirming that none of them execute",
    "start": "1900799",
    "end": "1906880"
  },
  {
    "text": "consider putting validation on user input going inside pdfs to prevent these sort of attacks",
    "start": "1906880",
    "end": "1915200"
  },
  {
    "text": "so i was inspired greatly by a lot of people for this pdf talk but in particular um insert script",
    "start": "1916480",
    "end": "1924080"
  },
  {
    "text": "was definitely um very inspirational for my talk his talk on pdf mess with the web",
    "start": "1924080",
    "end": "1932080"
  },
  {
    "text": "was fantastic and groundbreaking um i really enjoyed that um and i didn't know anything about a",
    "start": "1932080",
    "end": "1938399"
  },
  {
    "text": "pdf until i watched albertini's talk on how to write a pdf",
    "start": "1938399",
    "end": "1944000"
  },
  {
    "text": "and that was so useful and so easy to understand um it was um brilliant uh work from him",
    "start": "1944000",
    "end": "1951519"
  },
  {
    "text": "and without that i would not have been able to do this talk and also ben and cody they inspired the",
    "start": "1951519",
    "end": "1959440"
  },
  {
    "text": "uh ssrf attack that i proposed based on their work with using pdfs and",
    "start": "1959440",
    "end": "1964720"
  },
  {
    "text": "using ssrf attack so what do i want to tell you to take",
    "start": "1964720",
    "end": "1970880"
  },
  {
    "text": "away from this talk well vulnerable libraries make user input inside pdfs dangerous chrome and acrobat",
    "start": "1970880",
    "end": "1979200"
  },
  {
    "text": "enable these injections and one link can compromise the contents of a",
    "start": "1979200",
    "end": "1985039"
  },
  {
    "text": "pdf if you want some further reading and",
    "start": "1985039",
    "end": "1990080"
  },
  {
    "text": "also injection samples then please visit our post here",
    "start": "1990080",
    "end": "1995200"
  },
  {
    "text": "and i hope you've enjoyed this talk and i'll take five minutes for questions thank you",
    "start": "1995200",
    "end": "2003440"
  }
]