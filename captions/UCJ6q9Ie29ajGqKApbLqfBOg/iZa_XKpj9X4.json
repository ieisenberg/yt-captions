[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "this session is brought to you by Thomas Tek Alex badui Shan delin Steve Thomas",
    "start": "320",
    "end": "8519"
  },
  {
    "text": "from [Applause]",
    "start": "8519",
    "end": "20070"
  },
  {
    "text": "Montano my people thank",
    "start": "22680",
    "end": "27840"
  },
  {
    "text": "you some move the mics around or you know just",
    "start": "28960",
    "end": "35520"
  },
  {
    "text": "project thanks for coming guys uh I guess let's just get started here uh",
    "start": "35520",
    "end": "40640"
  },
  {
    "start": "39000",
    "end": "103000"
  },
  {
    "text": "we're going to go over a quick problem here and here uh I'm going to describe RSA really quick if you don't know it uh",
    "start": "40640",
    "end": "47079"
  },
  {
    "text": "each party in RSA has a public key and a private key public key is these are all",
    "start": "47079",
    "end": "54120"
  },
  {
    "text": "integers uh is a modulus n and a public exponent e uh private keys are that same",
    "start": "54120",
    "end": "60640"
  },
  {
    "text": "modulus n and a private integer D so it's super simple for encryption and",
    "start": "60640",
    "end": "66960"
  },
  {
    "text": "decryption when we do encryption it's just the plain text to that public um e",
    "start": "66960",
    "end": "73520"
  },
  {
    "text": "value mod n and for decryption we do the cipher text to the D uh secret D value",
    "start": "73520",
    "end": "80439"
  },
  {
    "text": "mod n now we get to choose what e we use and",
    "start": "80439",
    "end": "86640"
  },
  {
    "text": "since this is exponentiation we'd like to choose something small smaller so it's quicker a little bit more optimized",
    "start": "86640",
    "end": "93159"
  },
  {
    "text": "but there's issues with choosing Small E for instance like eal 3 we open",
    "start": "93159",
    "end": "99799"
  },
  {
    "text": "ourselves up to broadcast attacks cube root of tax now let's take a look at Salt stack",
    "start": "99799",
    "end": "106520"
  },
  {
    "start": "103000",
    "end": "162000"
  },
  {
    "text": "if you don't know stalt stack it's like a replacement for puppet or anible and we're just trying to run commands on our",
    "start": "106520",
    "end": "113439"
  },
  {
    "text": "remote servers and instead of using SSH they use RSA can anybody see what the",
    "start": "113439",
    "end": "120280"
  },
  {
    "text": "issue with their RSA implementation",
    "start": "120280",
    "end": "125118"
  },
  {
    "text": "is like a like a show of hands if you if you if you get the problem here so uh so yeah so so so saltstack",
    "start": "125479",
    "end": "133680"
  },
  {
    "text": "chose the most efficient of the RSA public exponence which would be one the",
    "start": "133680",
    "end": "138840"
  },
  {
    "text": "the most priceless thing about this GitHub issue report is the uh the comment from the team there where don't",
    "start": "138840",
    "end": "145319"
  },
  {
    "text": "worry people uh we didn't use the public he is not one just the public exponent as one you can see from the uh the",
    "start": "145319",
    "end": "150720"
  },
  {
    "text": "formula for actually how you do RSA RSA you raise the message to the eth power",
    "start": "150720",
    "end": "156640"
  },
  {
    "text": "and if e is one then RSA is quite fast um and quite",
    "start": "156640",
    "end": "161720"
  },
  {
    "text": "useful I would argue that an exponent of zero is actually more efficient than an exponent of",
    "start": "161720",
    "end": "167680"
  },
  {
    "start": "162000",
    "end": "433000"
  },
  {
    "text": "one so I guess like the the the motivation for this talk is just the degree to which nobody who implements",
    "start": "167680",
    "end": "175480"
  },
  {
    "text": "cryptography gets it right um there's a zillion zillion vulnerabilities out there and like if you ever get time and",
    "start": "175480",
    "end": "181519"
  },
  {
    "text": "you can remember from all these talks you're going to see um this one piece of device go to the thread on GitHub I wish",
    "start": "181519",
    "end": "187200"
  },
  {
    "text": "I had a link for it where they uh where they show that that problem and they have people explaining it there's all",
    "start": "187200",
    "end": "192319"
  },
  {
    "text": "sorts of crazy crypto nonsense on that thread that people believe so some of what we want to do today is just to demystify some of this stuff so I guess",
    "start": "192319",
    "end": "199360"
  },
  {
    "text": "um you know there's going to be a lot of detail on this talk we're going to talk pretty fast um we we did a dry run of",
    "start": "199360",
    "end": "204920"
  },
  {
    "text": "this talk beforehand it took us about 50 minutes so I'm going to talk really I'm going to talk about this fast for the rest of the talk so um you know you're",
    "start": "204920",
    "end": "210799"
  },
  {
    "text": "not going to walk out of this talk knowing how to exploit RSA padding oracles I can't do that with a slide deck right but I can show you how",
    "start": "210799",
    "end": "217519"
  },
  {
    "text": "straightforward the attacks are and give you the motivation to go figure this stuff out for yourself and we'll talk later on about how we're going to make",
    "start": "217519",
    "end": "223080"
  },
  {
    "text": "it even easier for you to do that so the takeaway for this kind of just let the math wash over you like a you know a",
    "start": "223080",
    "end": "228840"
  },
  {
    "text": "poetry of insecurity and all that and just kind of you know trust us that one of the points of this talk is just this",
    "start": "228840",
    "end": "234799"
  },
  {
    "text": "stuff is simpler than than you think it is so I guess before we start we're going to go through a lot of different",
    "start": "234799",
    "end": "239879"
  },
  {
    "text": "crypto attacks in this talk and we're going to talk about the crypto challenges so there's some um you know just some details some background um",
    "start": "239879",
    "end": "246799"
  },
  {
    "text": "about cryptography Fields groups that differencing a group in a ring the differencing a PRP and a prf by Stell structure linear algebra so a little bit",
    "start": "246799",
    "end": "253360"
  },
  {
    "text": "of that we want to get the stuff that you need to know about that out of the way first so um let's just take that off the table right now none none of this is",
    "start": "253360",
    "end": "261799"
  },
  {
    "text": "a problem when people try to learn cryptography if you go to a source trying to learn cryptography the very first things they start you out with is",
    "start": "261799",
    "end": "267520"
  },
  {
    "text": "like what's a feell network and things like that we've gone through almost all of the attacks that we know how to exploit at",
    "start": "267520",
    "end": "273960"
  },
  {
    "text": "Modano in this talk and none of them require any of this theory in fact if you want to learn this Theory the right",
    "start": "273960",
    "end": "279240"
  },
  {
    "text": "way to learn it is to code the attacks first so that that stuff will make sense to you so the backstory here is um we",
    "start": "279240",
    "end": "286360"
  },
  {
    "text": "got pretty good at finding crypto vulnerabilities and software and like I said earlier like if you're not looking for crypto vulnerabilities on projects",
    "start": "286360",
    "end": "292520"
  },
  {
    "text": "you're missing some amazing amazing bugs so I wanted the rest of my team to know how to find these bugs so I write this",
    "start": "292520",
    "end": "297960"
  },
  {
    "text": "text file with a bunch of crypto EX exercises in it right and we wind up with this pretty interesting set of",
    "start": "297960",
    "end": "303400"
  },
  {
    "text": "crypto vulnerabilities and we're thinking you know this would make a pretty great blog post right we should find a way to share this and kind of",
    "start": "303400",
    "end": "309280"
  },
  {
    "text": "stake a claim on this crypto stuff I have a slight problem with posting the entire text file to the internet and",
    "start": "309280",
    "end": "315520"
  },
  {
    "text": "that is that um I have a mental illness um which leads me to be you know",
    "start": "315520",
    "end": "321360"
  },
  {
    "text": "completely addicted to winning Message Board arguments and arguments on Twitter and the problem I basically have is",
    "start": "321360",
    "end": "327400"
  },
  {
    "text": "there are people who shall remain nameless that I will end up arguing with on Twitter and I don't want to arm them",
    "start": "327400",
    "end": "333840"
  },
  {
    "text": "with the jargon that would allow me not to Trump them in arguments by busting out my own jargon right like I don't",
    "start": "333840",
    "end": "339360"
  },
  {
    "text": "want them to know what a CTR nons Collision is I don't want them to have those words right if they're going to have those words I want them to know",
    "start": "339360",
    "end": "346000"
  },
  {
    "text": "what it means so we have a solution the solution we came up with just out of necessity to keep these terrible Secrets",
    "start": "346000",
    "end": "351759"
  },
  {
    "text": "out of the hands of people who might win arguments with me online is we carved the challenges up into sets of eight and",
    "start": "351759",
    "end": "358720"
  },
  {
    "text": "what we did was if you emailed us and asked us for a set of eight we would give you the first set of crypto challenges and in order to get the next",
    "start": "358720",
    "end": "365199"
  },
  {
    "text": "set of crypto challenges you would have to send us back the code that you use to exploit those challenges um so we carved",
    "start": "365199",
    "end": "371720"
  },
  {
    "text": "it up into sets we tuned the sets up a little bit we embedded a lot of kid inpl and wuang lyrics and the sets just to",
    "start": "371720",
    "end": "376880"
  },
  {
    "text": "spice things up and um yeah so the net result here is the only way you get crypto terminology and by the way it was",
    "start": "376880",
    "end": "383319"
  },
  {
    "text": "pretty amazing that almost nobody leaked anything we did this with a lot of people almost nobody the honor System",
    "start": "383319",
    "end": "389080"
  },
  {
    "text": "for this work brilliantly right so in order to get the jargon you have to know how to code so what happens is there's",
    "start": "389080",
    "end": "394759"
  },
  {
    "text": "this guy if you if you're not familiar with pinboard or with the idol words blog I think he might be the best writer",
    "start": "394759",
    "end": "400120"
  },
  {
    "text": "on the internet well he's also a really excellent programmer and he wrote a little blog post about doing the crypto",
    "start": "400120",
    "end": "405919"
  },
  {
    "text": "challenges and that blog post this is not the best screenshot but this blog post was for a long time on the top of",
    "start": "405919",
    "end": "411199"
  },
  {
    "text": "Hacker News um a lot of people saw it and a lot of people ended up doing the",
    "start": "411199",
    "end": "417199"
  },
  {
    "text": "crypto challenges way more than we expected before before this blog post happened we were doing everything",
    "start": "417199",
    "end": "422560"
  },
  {
    "text": "manually people would send us the sets and we'd be an apple mail and dragging things around and doing manual replies",
    "start": "422560",
    "end": "428000"
  },
  {
    "text": "and then suddenly like you know more than 10,000 people are doing them so huge numbers of people are doing the",
    "start": "428000",
    "end": "433720"
  },
  {
    "start": "433000",
    "end": "494000"
  },
  {
    "text": "challenges uh and so the these people who who did the challenges submitted them in a variety of languages and so",
    "start": "433720",
    "end": "440400"
  },
  {
    "text": "you see at the top there uh this is basically a breakdown of uh the kinds of languages that people submitted",
    "start": "440400",
    "end": "445759"
  },
  {
    "text": "Solutions in so python obviously dominant there with like 40% of the market then you have uh going down the",
    "start": "445759",
    "end": "452879"
  },
  {
    "text": "chart goang and Ruby coming in at second and third um kind of like a few other uh",
    "start": "452879",
    "end": "459479"
  },
  {
    "text": "traditional kind of imperative uh you know objectoriented procedural kind of languages a lot of",
    "start": "459479",
    "end": "465280"
  },
  {
    "text": "people like picked up languages to do the crypto challenges with that's what mach told people to do is if you want to learn a new language this is a great way",
    "start": "465280",
    "end": "470960"
  },
  {
    "text": "to do it is to pick up the crypto challenges and try to learn it so it's like a running joke how many people started with so you know your high",
    "start": "470960",
    "end": "477919"
  },
  {
    "text": "schals your closures your scholar like the more exotic languages on here you know we we see a few of these things uh",
    "start": "477919",
    "end": "484440"
  },
  {
    "text": "a lot of those people didn't finish um I'm guessing probably because they just weren't that familiar with the environment and we saw some even more",
    "start": "484440",
    "end": "491120"
  },
  {
    "text": "exotic stuff um so uh I guess you can flip yeah little",
    "start": "491120",
    "end": "497440"
  },
  {
    "text": "little hard to read this but lots and lots and lots of different languages here there's a long tale of languages basically and we got Solutions we got",
    "start": "497440",
    "end": "503599"
  },
  {
    "text": "complete set six solutions for all these languages everything on here at least one person finished so it was pretty",
    "start": "503599",
    "end": "509000"
  },
  {
    "text": "impressive like we have a rosetta code for all these different languages which we're publishing uh one of the more exotic",
    "start": "509000",
    "end": "515599"
  },
  {
    "start": "511000",
    "end": "540000"
  },
  {
    "text": "ones is so you know Microsoft Excel someone submitted some Solutions in Microsoft Excel and so this is like an",
    "start": "515599",
    "end": "521760"
  },
  {
    "text": "implementation of uh the AES block Cipher in Excel and when we say Excel we",
    "start": "521760",
    "end": "527600"
  },
  {
    "text": "don't mean like VB script we mean uh like table like cell references so like",
    "start": "527600",
    "end": "534320"
  },
  {
    "text": "someone wrote all the like AES boxes out into Excel and then wrote These references is this is amazing this is",
    "start": "534320",
    "end": "541880"
  },
  {
    "start": "540000",
    "end": "562000"
  },
  {
    "text": "the coolest thing so this is a this this is the same guy by the",
    "start": "541880",
    "end": "548040"
  },
  {
    "text": "way but this is a a postcript file that kind of kind of illustrates AES but all",
    "start": "548040",
    "end": "554760"
  },
  {
    "text": "the images you see are also generated by an implementation of AES written in postcript embedded in the",
    "start": "554760",
    "end": "562279"
  },
  {
    "text": "file and then you know obviously the most exotic you know kind of out there language for cryptography is Javascript",
    "start": "562800",
    "end": "571360"
  },
  {
    "start": "571000",
    "end": "726000"
  },
  {
    "text": "so uh cryptocat is a uh JavaScript app that uh they try to do uh usable",
    "start": "573120",
    "end": "581040"
  },
  {
    "text": "encryption uh and also there's cats the cats are are very important to",
    "start": "581040",
    "end": "586680"
  },
  {
    "text": "the security of cryptocat so so um crypto cat it's like a messaging application it's the like supposedly the",
    "start": "586680",
    "end": "592360"
  },
  {
    "text": "air apparent to pgp it's a it's the the standard Bearer for usable cryptography and for the the thing we want to",
    "start": "592360",
    "end": "598760"
  },
  {
    "text": "illustrate here we want to talk about a little bit here um we so cryptocat uses elliptic curve Tiffy Helman in order to",
    "start": "598760",
    "end": "604800"
  },
  {
    "text": "get the two parties that are chatting with each other or the however many parties are chatting with each other to share keys and we want to talk a little",
    "start": "604800",
    "end": "610279"
  },
  {
    "text": "bit about how they got that wrong so so uh during this time frame uh you",
    "start": "610279",
    "end": "617120"
  },
  {
    "text": "could actually uh break the uh public keys and decrypt the",
    "start": "617120",
    "end": "623440"
  },
  {
    "text": "chat and we're going to talk a little bit about how that worked right so um an interesting thing to look at here is",
    "start": "623440",
    "end": "628800"
  },
  {
    "text": "just look at the time period here from May 7th 2012 to June 3rd 2013 now a a",
    "start": "628800",
    "end": "635360"
  },
  {
    "text": "lot of things were happening I'm sure Beyonce had a new album in that period of time lots of things were happening with politics and Congress and all that",
    "start": "635360",
    "end": "642079"
  },
  {
    "text": "one other thing was happening at the same time um while this was happening uh that's an ECB encrypted Edward Snowden",
    "start": "642079",
    "end": "648360"
  },
  {
    "text": "if you can see it properly I don't know how the resolution works but um you know that whole Snowden thing was happening",
    "start": "648360",
    "end": "654720"
  },
  {
    "text": "so you're wondering like why does it matter like certainly Snowden is not relying on cats for the security of his",
    "start": "654720",
    "end": "661839"
  },
  {
    "text": "Communications with Glenn Greenwald that couldn't possibly be happening um but it did actually happen",
    "start": "661839",
    "end": "667800"
  },
  {
    "text": "uh uh the time frame ex uh isn't exactly uh known uh but uh anything early June",
    "start": "667800",
    "end": "677639"
  },
  {
    "text": "or earlier uh would have been easily broken I'm still kind of head explody",
    "start": "677639",
    "end": "682880"
  },
  {
    "text": "you about how they were Glen green Greenwell was unable to get OTR working OTR was not usable enough so they",
    "start": "682880",
    "end": "688560"
  },
  {
    "text": "switched to crypto cat for extra usability um but the time frames here match up pretty nicely um so assuming",
    "start": "688560",
    "end": "695680"
  },
  {
    "text": "that like and it's it's more than it's the June 3rd is the period where the fix went in but then there's a lag after the",
    "start": "695680",
    "end": "701200"
  },
  {
    "text": "fix goes in after the fix for the Firefox module for crypto cat goes in before Firefox or before Milla approves",
    "start": "701200",
    "end": "706440"
  },
  {
    "text": "it right it's I don't know how long it is it's like a well for Firefox it's two weeks it's two weeks so two weeks after",
    "start": "706440",
    "end": "713399"
  },
  {
    "text": "June 3rd is when that fix would have been applied so I guess long story short if NSA was say collecting all of crypto",
    "start": "713399",
    "end": "719800"
  },
  {
    "text": "cats chats which I'm sure they weren't doing I'm sure there's way too many cryptocat chats for them to have been collecting them they can go back and",
    "start": "719800",
    "end": "725240"
  },
  {
    "text": "decrypt all those chats and uh you know some things went wrong there I think um",
    "start": "725240",
    "end": "731040"
  },
  {
    "start": "726000",
    "end": "782000"
  },
  {
    "text": "so this is the old Dy helmet stuff we might want to go fast through this but like uh so uh basically what this was uh",
    "start": "731040",
    "end": "737040"
  },
  {
    "text": "this was before uh they switched to elliptic curve Diffy Helman uh they kept on changing the size of the private key",
    "start": "737040",
    "end": "745800"
  },
  {
    "text": "so uh that's 10 to the 64 then they reduced it to 10 to 32 that's actually",
    "start": "745800",
    "end": "753199"
  },
  {
    "text": "uh breakable uh basically 10 32 is breakable yeah uh because uh with uh tax",
    "start": "753199",
    "end": "761880"
  },
  {
    "text": "that we'll talk later about uh it's you can get that down to uh 10 to the 16 so",
    "start": "761880",
    "end": "767800"
  },
  {
    "text": "and then we've got 32 to the 26 I guess apparently and you know the back story on this better than I do but like there's there's commit messages that go",
    "start": "767800",
    "end": "774120"
  },
  {
    "text": "with us where they're saying these are performance improvements right like we're we're shaving bites off of the performance the key here get to it",
    "start": "774120",
    "end": "779519"
  },
  {
    "text": "faster and faster while dragging dippy Helman performance down it goes from 26 to 24 got the last two",
    "start": "779519",
    "end": "786000"
  },
  {
    "text": "bites down so like to clarify when you say it's breakable like what is the like what is the what kind of investment",
    "start": "786000",
    "end": "791800"
  },
  {
    "text": "would you have to make to break that um uh well for this uh it' be",
    "start": "791800",
    "end": "799279"
  },
  {
    "text": "uh I well actually don't know this one spe specifically but it's like a few",
    "start": "799279",
    "end": "805360"
  },
  {
    "text": "thousand to you know more and this is the especially f this one uh basically they",
    "start": "805360",
    "end": "813560"
  },
  {
    "start": "806000",
    "end": "838000"
  },
  {
    "text": "uh uh mistak uh strings for uh big in for the big in Li Library uh basically",
    "start": "813560",
    "end": "821760"
  },
  {
    "text": "uh instead of using uh 15 bit integers uh they were using",
    "start": "821760",
    "end": "827480"
  },
  {
    "text": "decimal so uh basically it ended up being 2 * 10 16 was the key space square",
    "start": "827480",
    "end": "836320"
  },
  {
    "text": "rooted so this is uh key strength over",
    "start": "836320",
    "end": "843040"
  },
  {
    "start": "838000",
    "end": "905000"
  },
  {
    "text": "time uh the line goes up when like uh what that's that's June when they finally applied your fixes to it uh when",
    "start": "843040",
    "end": "849839"
  },
  {
    "text": "it gets to the very top the very top so there's a there's a step like there's a step early on there where they got it a",
    "start": "849839",
    "end": "855480"
  },
  {
    "text": "little bit stronger so the the punchline to the story is um I guess it's de crypto cat which we should talk a little",
    "start": "855480",
    "end": "861560"
  },
  {
    "text": "bit about but there's a period of time in here this long red line there is a period of time where you can take a",
    "start": "861560",
    "end": "866600"
  },
  {
    "text": "digital ocean droplet and take Collective messages from cryptocat and break the elliptic curve Dy helmet the",
    "start": "866600",
    "end": "872720"
  },
  {
    "text": "reason there because they got strings and iners Confused among other problems in cryptocat right and there's a little",
    "start": "872720",
    "end": "877839"
  },
  {
    "text": "jump there where an early fix got in there this is important because it's important to cryptocat team to say that",
    "start": "877839",
    "end": "883519"
  },
  {
    "text": "you know nothing really serious was on the crypto cat Network during that time but that first bump there that takes it",
    "start": "883519",
    "end": "889519"
  },
  {
    "text": "out of the realm of breaking in an addition a digital lotion droplet basically it's uh $20 million roughly uh",
    "start": "889519",
    "end": "896800"
  },
  {
    "text": "to generate a table uh to break it well it takes about a month to generate",
    "start": "896800",
    "end": "902079"
  },
  {
    "text": "roughly then about a week per key uh so the attack that you would use",
    "start": "902079",
    "end": "909279"
  },
  {
    "start": "905000",
    "end": "1011000"
  },
  {
    "text": "is baby step giant step um basically uh this is just pseudo code for it uh you",
    "start": "909279",
    "end": "917000"
  },
  {
    "text": "uh basically uh set half the bits to zero like the trailing bits to zero for",
    "start": "917000",
    "end": "923320"
  },
  {
    "text": "one and you generate all those keys store them to disk then when you want to",
    "start": "923320",
    "end": "929000"
  },
  {
    "text": "break a key uh the other bits that you weren't using before uh you uh basically",
    "start": "929000",
    "end": "936839"
  },
  {
    "text": "take the public key then subtract it by those and then look it up in the table",
    "start": "936839",
    "end": "942199"
  },
  {
    "text": "then uh basically it square roots so like the studo code you're looking at here the the real point is not that you",
    "start": "942199",
    "end": "948519"
  },
  {
    "text": "totally understand how baby step giant step is a classical algorithm for breaking um Diffy helmet for solving the",
    "start": "948519",
    "end": "954560"
  },
  {
    "text": "discret log problem which is what underpins Diffy Helman the important thing is not that you understand exactly how this Cod works the important thing",
    "start": "954560",
    "end": "960199"
  },
  {
    "text": "is that you see how short it is right it's very very simple very classical number Theory code to uh to break this",
    "start": "960199",
    "end": "965720"
  },
  {
    "text": "we could have set up a crypto challenge easily for implementing baby step giant step was actually important to one of the things that comes later um that",
    "start": "965720",
    "end": "971920"
  },
  {
    "text": "we're that we're doing in a later set for the crypto the crypto challenges right so the important thing here is that the code is really simple now one",
    "start": "971920",
    "end": "978560"
  },
  {
    "text": "of the reasons we're stumbling a little bit at this point is that um I gave him just last night to set the demo up for",
    "start": "978560",
    "end": "983759"
  },
  {
    "text": "this and the demo involves him building some giant bloom filter to accelerate baby step giant step and",
    "start": "983759",
    "end": "989440"
  },
  {
    "text": "well uh it's uh basically you get like 300 gigs of SSD and I wanted to uh set",
    "start": "989440",
    "end": "996959"
  },
  {
    "text": "up a 8 uh Bloom filter k equal 8 so that uh I would only have to dis like one in",
    "start": "996959",
    "end": "1004120"
  },
  {
    "text": "uh 256 there was a sweet demo here and I sabotaged it I made a mistake so uh",
    "start": "1004120",
    "end": "1011040"
  },
  {
    "start": "1011000",
    "end": "1126000"
  },
  {
    "text": "basically the bloom filter didn't work so instead of being under a second it would have been uh like 256 seconds",
    "start": "1011040",
    "end": "1018959"
  },
  {
    "text": "because so this de crypto cat is the most well-known thing that happened to crypto cat it involves very simple very",
    "start": "1018959",
    "end": "1025160"
  },
  {
    "text": "basic cryptography code and a decent sized virtual machine on digital ocean and from that it takes what minutes to",
    "start": "1025160",
    "end": "1031520"
  },
  {
    "text": "break individual cryptocat messages seconds I'm sorry I'm insulting your code right it takes seconds to break",
    "start": "1031520",
    "end": "1036880"
  },
  {
    "text": "cryptocat messages because of vulnerabilities in crypto cat but that is not the only thing that is wrong with",
    "start": "1036880",
    "end": "1042280"
  },
  {
    "text": "cryptocat and you know kind of tying into what we're doing with the challenges here you can go through cryptocat which is a fairly important",
    "start": "1042280",
    "end": "1048120"
  },
  {
    "text": "piece of crypto code that lots of people use and look at and find a number of different vulnerabilities that first vulnerability the asct with colliding",
    "start": "1048120",
    "end": "1055240"
  },
  {
    "text": "nonsense makes the messages even easier to break yeah they set the IV to zero right so um you know we looked at some",
    "start": "1055240",
    "end": "1061799"
  },
  {
    "text": "of the old DH code a couple days ago there's a bunch of RSA problems in it like you can just take a tour of that code and find a bunch of cool challenges",
    "start": "1061799",
    "end": "1068400"
  },
  {
    "text": "to implement and so um we want to talk a little bit about kind of what those vulnerabilities are and how they tie",
    "start": "1068400",
    "end": "1073679"
  },
  {
    "text": "into the crypto challenges Alex this is I think yeah yeah so set one here was just really setting the stage for the",
    "start": "1073679",
    "end": "1079200"
  },
  {
    "text": "crypto challenges and here we've got some basic functions uh xoring repeating",
    "start": "1079200",
    "end": "1084440"
  },
  {
    "text": "key exor uh that you're going to be using later in the challenges uh this is",
    "start": "1084440",
    "end": "1089760"
  },
  {
    "text": "BAS basically just used to prove that one you can code um so you can hopefully",
    "start": "1089760",
    "end": "1096039"
  },
  {
    "text": "then get the rest of it get the jargon and then move on the set to uh that one embarrassingly enough for me was the",
    "start": "1096039",
    "end": "1102320"
  },
  {
    "text": "hardest that uh repeating keysor took me about 2 weeks to do um actually how many",
    "start": "1102320",
    "end": "1107600"
  },
  {
    "text": "people have actually done the challenges or started them it's good news for us CU this is",
    "start": "1107600",
    "end": "1113080"
  },
  {
    "text": "news to a lot of you but uh yeah so um yeah there's there's only one tricky",
    "start": "1113080",
    "end": "1118200"
  },
  {
    "text": "only one tricky attack in that first set which is an academic kind of crypto 101 you're using a repeating key exor thing",
    "start": "1118200",
    "end": "1123799"
  },
  {
    "text": "which turns out to be valuable in a later set two so so set two we move into like a little bit more of the meat here",
    "start": "1123799",
    "end": "1129559"
  },
  {
    "text": "we introduced uh black Cipher modes uh some some good attacks here uh but we really get into some good stuff in set",
    "start": "1129559",
    "end": "1136320"
  },
  {
    "text": "three so set set two also has um a bunch of EC ECB motor this is the first set",
    "start": "1136320",
    "end": "1141559"
  },
  {
    "text": "where if you've implemented these you're already way better on pentest just two sets in and you are finding remote code",
    "start": "1141559",
    "end": "1147360"
  },
  {
    "text": "execution vulnerabilities in real world applications based on block Cipher modes so this is more block Cipher modes uh",
    "start": "1147360",
    "end": "1154679"
  },
  {
    "start": "1151000",
    "end": "1185000"
  },
  {
    "text": "with the famous CBC padding Oracle here and we also move into some uh Ming twister RNG State um attacks here as",
    "start": "1154679",
    "end": "1162600"
  },
  {
    "text": "well so this is stream ciphers this is breaking Randomness the meren Twister is the random number generator that Rand",
    "start": "1162600",
    "end": "1168360"
  },
  {
    "text": "gives you and python PHP and Ruby um so breaking those Rand number generators breaking stream ciphers derived from",
    "start": "1168360",
    "end": "1174440"
  },
  {
    "text": "them things like that so um you can see in the bottom we're Al also noting how many people finish so like roughly a",
    "start": "1174440",
    "end": "1179720"
  },
  {
    "text": "thousand people finish that first set and like maybe 500 finished the second set and we're we're gradually tapering",
    "start": "1179720",
    "end": "1185039"
  },
  {
    "start": "1185000",
    "end": "1217000"
  },
  {
    "text": "off as we go forward here uh set for we do more CTR mode stuff uh introduce hash",
    "start": "1185039",
    "end": "1190880"
  },
  {
    "text": "functions L uh linkless exension attacks uh starting in the H Max here we talked",
    "start": "1190880",
    "end": "1196080"
  },
  {
    "text": "more about CTR but we did a black hat talk a couple years ago where we talked talked about how to exploit CTR and colliding ances but just so you know CTR",
    "start": "1196080",
    "end": "1202360"
  },
  {
    "text": "is how you turn AES from a block Cipher into a stream Cipher it's the most important block Cipher mode in um in",
    "start": "1202360",
    "end": "1209440"
  },
  {
    "text": "well block cryptography right and uh it's there are things that go terribly wrong and it that allow you to break it and then the length extension thing is",
    "start": "1209440",
    "end": "1215679"
  },
  {
    "text": "really important here too so then set five we finally introduced like public key quotography",
    "start": "1215679",
    "end": "1221240"
  },
  {
    "start": "1217000",
    "end": "1244000"
  },
  {
    "text": "uh we do DIY Helman SRP and then uh some",
    "start": "1221240",
    "end": "1226360"
  },
  {
    "text": "cool RSA attacks down there that's not a very cool RSA attack it's a pretty weak RSA",
    "start": "1226360",
    "end": "1232799"
  },
  {
    "text": "attack okay and so in set six uh you know the continuation of public key",
    "start": "1232799",
    "end": "1237840"
  },
  {
    "text": "stuff uh we have some DSA and then finally C culminating in the uh RSA",
    "start": "1237840",
    "end": "1243120"
  },
  {
    "text": "pading Oracle this is a Daniel blacken Beer's uh 1998 attack on",
    "start": "1243120",
    "end": "1249039"
  },
  {
    "start": "1244000",
    "end": "1334000"
  },
  {
    "text": "SSL um so this is a pretty cool attack and uh like still like mostly under the",
    "start": "1249039",
    "end": "1255799"
  },
  {
    "text": "radar but it's something you can actually find in like application Level uh cryptography um so basically for people",
    "start": "1255799",
    "end": "1262360"
  },
  {
    "text": "who aren't familiar with a padding article this is basically like a plain text recovery attack so the attacker has",
    "start": "1262360",
    "end": "1267480"
  },
  {
    "text": "like a piece of Cipher text and they can talk to the server that decrypts and if they can detect errors in decryption uh",
    "start": "1267480",
    "end": "1275360"
  },
  {
    "text": "they can kind of piece together enough information to recover the original uh",
    "start": "1275360",
    "end": "1280480"
  },
  {
    "text": "plain text so if you want to see how this comes up in like the real world where you'd see this in an actual pentest imagine you have like a payment",
    "start": "1280480",
    "end": "1286360"
  },
  {
    "text": "processing application right and imagine that Payment Processing Company has clients to have their own web apps right",
    "start": "1286360",
    "end": "1292240"
  },
  {
    "text": "and they want they want their clients to be able to RSA encrypt credit card numbers so that those clients won't be",
    "start": "1292240",
    "end": "1297480"
  },
  {
    "text": "PCI encumbered they can do the RSA um on their side and then send the RSA encrypted messages to the payment",
    "start": "1297480",
    "end": "1302880"
  },
  {
    "text": "processor and then you want to imagine our attacker capturing those RSA encrypted credit card numbers and the",
    "start": "1302880",
    "end": "1308320"
  },
  {
    "text": "thing to kind of get in your head here is that a credit card number is really small right so a credit card number fits",
    "start": "1308320",
    "end": "1313799"
  },
  {
    "text": "usually when you encrypt with RSA you do a combination of RSA and an actual block CER but people they see things like",
    "start": "1313799",
    "end": "1320640"
  },
  {
    "text": "small fixed size numbers like you know credit card numbers fit nicely into RSA moduli and so they think they're just",
    "start": "1320640",
    "end": "1326559"
  },
  {
    "text": "going to encrypt that directly and so you'll find that in a lot of places where people do um RSA that way that",
    "start": "1326559",
    "end": "1331760"
  },
  {
    "text": "they have this vulnerability so uh just to go into a",
    "start": "1331760",
    "end": "1338120"
  },
  {
    "start": "1334000",
    "end": "1615000"
  },
  {
    "text": "little bit of detail on the way RSA padding is used so uh RSA padding is actually necessary for security so like",
    "start": "1338120",
    "end": "1345200"
  },
  {
    "text": "when we do padding in other uh modes of encryption so like in particular like in symmetric encryption like people often",
    "start": "1345200",
    "end": "1351240"
  },
  {
    "text": "try to avoid having to do padding at all so like for stream Cipher it's like you don't require any padding but for RSA",
    "start": "1351240",
    "end": "1357120"
  },
  {
    "text": "it's actually necessary uh you know RSA encrypting just a raw message is like",
    "start": "1357120",
    "end": "1363520"
  },
  {
    "text": "triv trivially broken so like uh we like we can't even go into it here but um we",
    "start": "1363520",
    "end": "1368960"
  },
  {
    "text": "have we have an exercise in set six that breaks unpadded RSA messages which is also great to know because RSA is really",
    "start": "1368960",
    "end": "1374640"
  },
  {
    "text": "simple like we showed in the first couple slides there right it's just like you know take a number raise it to the nth power and then it's encrypted right",
    "start": "1374640",
    "end": "1380279"
  },
  {
    "text": "so it's deceptive because people JavaScript programmers for instance will get a big num library and Implement just",
    "start": "1380279",
    "end": "1386080"
  },
  {
    "text": "the math for RSA and then it's like they're going to like play with it a little bit and see that it works and encrypts things and then stop there it's",
    "start": "1386080",
    "end": "1391799"
  },
  {
    "text": "like I now have enough technology to encrypt messages with RSA you will find unpadded RSA implementations in the real",
    "start": "1391799",
    "end": "1398400"
  },
  {
    "text": "world now the vulnerability that we're going to describe here is more complicated we're breaking padded RSA my friend Nate Lawson from whom we got",
    "start": "1398400",
    "end": "1404919"
  },
  {
    "text": "three quarters of these challenges come from Nate Lawson right um he's like our mentor for cryptography right my friend",
    "start": "1404919",
    "end": "1409960"
  },
  {
    "text": "Nate Lawson likes to say that we shouldn't call RSA padding padding and in Block ciper crypto we're trying to",
    "start": "1409960",
    "end": "1415760"
  },
  {
    "text": "get rid of padding as much as possible cryptographers prefer CTR mode to CBC mode because CBC mode has padding and",
    "start": "1415760",
    "end": "1421200"
  },
  {
    "text": "CTR mode doesn't right you want to avoid padding with block for crypto well in RSA it's not like that we should call RSA padding armoring instead of padding",
    "start": "1421200",
    "end": "1428559"
  },
  {
    "text": "because without the armoring on RSA RSA has no security whatsoever but this what we're showing you right here this is",
    "start": "1428559",
    "end": "1434320"
  },
  {
    "text": "padded RSA it is the default the deao standard padding used for for almost every RSA implementation you'll see it's",
    "start": "1434320",
    "end": "1440880"
  },
  {
    "text": "not the best padding everyone knows it's not the best padding but if you see a fresh RSA implementation this is the padding that they're probably using you",
    "start": "1440880",
    "end": "1446679"
  },
  {
    "text": "should probably explain it now start talking over you so the the way this padding actually works is basically uh",
    "start": "1446679",
    "end": "1452640"
  },
  {
    "text": "the idea is to fill the entire uh size of the modulus the public key modulus",
    "start": "1452640",
    "end": "1458360"
  },
  {
    "text": "and so what we do for this is uh we start with a leading bite and it's just uh it's just the bite two and then we",
    "start": "1458360",
    "end": "1465480"
  },
  {
    "text": "have a random padding string and then we have a null delimit and followed by the the actual message um and so what we're",
    "start": "1465480",
    "end": "1472679"
  },
  {
    "text": "actually going to exploit here is the fact that that leading bite is fixed at two uh that tells us actually a lot of",
    "start": "1472679",
    "end": "1478520"
  },
  {
    "text": "information about uh just the bounds of the message that we're encrypting and it turns out that that's going to be",
    "start": "1478520",
    "end": "1484360"
  },
  {
    "text": "exploitable so remember the vulnerability that we're talking about here is we're exploiting a padding Oracle and I don't know show of hands",
    "start": "1484360",
    "end": "1490000"
  },
  {
    "text": "real quick how many people have heard of the CBC padding Oracle before it's pretty popular crypto attack but you know great so the idea behind the pading",
    "start": "1490000",
    "end": "1497320"
  },
  {
    "text": "orle again is you have an application that's receiving messages that are receiving Cipher text from what they",
    "start": "1497320",
    "end": "1502960"
  },
  {
    "text": "hope is a valid person talking to it and the very first thing they do after they decrypt the messages they check the padding you have to check the padding to",
    "start": "1502960",
    "end": "1509399"
  },
  {
    "text": "see if it's a valid message and a padding Oracle is what happens when the target behaves differently based on",
    "start": "1509399",
    "end": "1514520"
  },
  {
    "text": "whether the padding is valid or not you can see why it might behave differently like in open SSL for instance if you try to decrypt a message and it has unvalid",
    "start": "1514520",
    "end": "1521080"
  },
  {
    "text": "padding you're going to get an exception so in the Ruby bindings the python bindings for you know open cell if you",
    "start": "1521080",
    "end": "1526360"
  },
  {
    "text": "have a message with bad padding it raises an exception and you can imagine in a web application for instance you're going to see the exception you'll get a",
    "start": "1526360",
    "end": "1531760"
  },
  {
    "text": "500 error or at least a different error based on whether the padding is valid or not and what we're going to do is we're going to exploit just that one signal",
    "start": "1531760",
    "end": "1538880"
  },
  {
    "text": "just the fact that the padding was valid or not valid which you can imagine is very easy for an application to",
    "start": "1538880",
    "end": "1544039"
  },
  {
    "text": "accidentally revealed to us right and from just knowing whether the padding is valid or not in this case with RSA",
    "start": "1544039",
    "end": "1549120"
  },
  {
    "text": "padding knowing that the message starts properly with two is going to tell us enough to decrypt the entire message",
    "start": "1549120",
    "end": "1555320"
  },
  {
    "text": "again this is the deao standard padding for almost every piece of software fielded with RSA encryption so I don't",
    "start": "1555320",
    "end": "1562000"
  },
  {
    "text": "know if you went to the end of the slides before I stepped on you there but um I guess I guess the only other thing to mention is that uh obviously the the",
    "start": "1562000",
    "end": "1569360"
  },
  {
    "text": "messages are going to be between you know two 00000000 extending and 2 FF so we can",
    "start": "1569360",
    "end": "1576679"
  },
  {
    "text": "call those lower and upper bounds 2B and 3B basically for the the purposes of these slides yeah every RSA message",
    "start": "1576679",
    "end": "1583240"
  },
  {
    "text": "every RSA Cipher text is a scalar integer it's a single number this is true of RSA and I think people think",
    "start": "1583240",
    "end": "1589279"
  },
  {
    "text": "it's true of everything but it's not true of AES and other crypto but in RSA crypto every number is simply every",
    "start": "1589279",
    "end": "1594440"
  },
  {
    "text": "message is simply a number and so for a message to have valid padding that message has to start with two so the",
    "start": "1594440",
    "end": "1600080"
  },
  {
    "text": "message has to be between 2B and 3B two 0 and two FF right so that sounds bad",
    "start": "1600080",
    "end": "1606799"
  },
  {
    "text": "but 2bb 2 FF is a gigantic number right so the fact that we've constrained it there shouldn't affect the security that",
    "start": "1606799",
    "end": "1612799"
  },
  {
    "text": "much at all but it does here because it bounds the size of the message so almost none of you know what this is but this",
    "start": "1612799",
    "end": "1618559"
  },
  {
    "start": "1615000",
    "end": "1644000"
  },
  {
    "text": "is a little iOS like algebra application I have my kids do right so like if you can make the Frog chalk to the lizard",
    "start": "1618559",
    "end": "1624640"
  },
  {
    "text": "drag the lizard across the line or whatever you're learning algebra while you do that so people on the audience if",
    "start": "1624640",
    "end": "1630000"
  },
  {
    "text": "you can pass a ninth grade algebra test or if you can make the Frog talk to the lizard Dr across the line this app it's",
    "start": "1630000",
    "end": "1635480"
  },
  {
    "text": "called Dragon Box you can go download it do this before you learn black black and Boer this attack that we're talking",
    "start": "1635480",
    "end": "1640679"
  },
  {
    "text": "about go do the little Alig application it's all the math you're need for this attack right so we said uh oh you have",
    "start": "1640679",
    "end": "1646320"
  },
  {
    "start": "1644000",
    "end": "1706000"
  },
  {
    "text": "one more thing to say Okay so this is cool by the way this property of RSA is really neat so the way we're actually",
    "start": "1646320",
    "end": "1651520"
  },
  {
    "text": "going to exploit this is that uh there's a property of RSA that we can kind of uh",
    "start": "1651520",
    "end": "1660039"
  },
  {
    "text": "we can multiply Cipher text together and get the same result as if we had multiplied the plain text together before encryption so you can see we have",
    "start": "1660039",
    "end": "1667200"
  },
  {
    "text": "this we have this plain text 355 set up and we encrypt that and we get 609 uh likewise we encrypt uh the plain",
    "start": "1667200",
    "end": "1675519"
  },
  {
    "text": "text to so suppose we want to double the ENC the original plain text message and we get eight back obviously two to the",
    "start": "1675519",
    "end": "1682039"
  },
  {
    "text": "thir power is eight so if you follow this you can multiply cyber text in RSA RSA is homomorphic with respect to",
    "start": "1682039",
    "end": "1688799"
  },
  {
    "text": "multiplication if You' ever heard of homomorphic encryption that's the idea that you can do operations on Cypher",
    "start": "1688799",
    "end": "1694159"
  },
  {
    "text": "text and have them actually work right well in RSA you can multiply Cipher text together I can multiply the encryption",
    "start": "1694159",
    "end": "1699360"
  },
  {
    "text": "of two and the encryption of four and get back two times 4 as plain text that's just a property of the math",
    "start": "1699360",
    "end": "1704840"
  },
  {
    "text": "behind RSA and we're going to exploit it here right so you can see uh basically the",
    "start": "1704840",
    "end": "1710919"
  },
  {
    "text": "attack we want to carry out is we have the cipher Tex C which is that's our captured RSA encrypted credit card",
    "start": "1710919",
    "end": "1716760"
  },
  {
    "text": "number this is something we've observed on the wire or in some other circumstance and we know that P has",
    "start": "1716760",
    "end": "1722240"
  },
  {
    "text": "valid padding so what we want to try to do here is we want to find some integer",
    "start": "1722240",
    "end": "1727919"
  },
  {
    "text": "s such that we can multiply P by S and get back another integer with valid padding uh and that's going to leak a",
    "start": "1727919",
    "end": "1735559"
  },
  {
    "text": "little bit of information about p and we can use use that uh you know basically",
    "start": "1735559",
    "end": "1741480"
  },
  {
    "text": "to eventually reconstruct P entirely so we have the captured message C and we have our corrupting influence s s is",
    "start": "1741480",
    "end": "1747679"
  },
  {
    "text": "this number that we're multiplying into the cipher text we're going to start with a very small s we're going to start with two or three or four and we're",
    "start": "1747679",
    "end": "1753720"
  },
  {
    "text": "going to keep doing that we're going to keep multiplying s into the cipher text and we're going to send that corrupted message to the server and we're going to",
    "start": "1753720",
    "end": "1760039"
  },
  {
    "text": "see if we get valid padding back or not and so that's the Oracle the Oracle is us saying well if you multiply this number into this Cipher text and you get",
    "start": "1760039",
    "end": "1766640"
  },
  {
    "text": "back a padding a valid padding then you know that that message had valid padding and that's the Oracle here so um here's",
    "start": "1766640",
    "end": "1772679"
  },
  {
    "start": "1770000",
    "end": "2228000"
  },
  {
    "text": "the math and again like I said let this wash over you like a calm wave of mappiness so um the first line here that",
    "start": "1772679",
    "end": "1779039"
  },
  {
    "text": "you're seeing that is just a simple expression of modular arithmetic almost everybody in the audience if you sat",
    "start": "1779039",
    "end": "1784120"
  },
  {
    "text": "down and coded this kind of would have an easy intuitive sense of how modular multiplication works this is clock math",
    "start": "1784120",
    "end": "1789760"
  },
  {
    "text": "right you multiply X and Y together you take it mod n it's the remainder after you divide out n right so on the top",
    "start": "1789760",
    "end": "1796120"
  },
  {
    "text": "line there the left hand side is the normal way that we express modular arithmetic if you wrote out the equation that's what you'd say but to understand",
    "start": "1796120",
    "end": "1802679"
  },
  {
    "text": "this attack or to kind of follow it you have to write it a different way so the right hand side of that equation is the same thing we're expressing the exact",
    "start": "1802679",
    "end": "1809880"
  },
  {
    "text": "same mathematical operation so what we're doing here is we're taking the simple product the very large number right that number is going to be way",
    "start": "1809880",
    "end": "1816159"
  },
  {
    "text": "bigger than the modulus right and so instead of taking the remainder dividing and taking the remainder what we're going to do is we're going to count how",
    "start": "1816159",
    "end": "1822000"
  },
  {
    "text": "many times we wrap the modulus that's the number R we're just going to subtract that off it so the important thing to understand here is just that",
    "start": "1822000",
    "end": "1827519"
  },
  {
    "text": "the left hand side of that and the right hand side of that is the same equation the same thing just two different ways",
    "start": "1827519",
    "end": "1832679"
  },
  {
    "text": "of expressing it on the bottom um you'll note that both of those equations are the same equation right all I did was I",
    "start": "1832679",
    "end": "1838480"
  },
  {
    "text": "flipped the left hand side and the right hand side if you graduated 8th grade please tell me you understand that right so um X let X be the corrupted Cipher",
    "start": "1838480",
    "end": "1847559"
  },
  {
    "text": "text that we have back now when we refer to X we're saying we we started s at two at three at four at five we sent these",
    "start": "1847559",
    "end": "1853399"
  },
  {
    "text": "messages in eventually we got one that had valid padding that's X when we talk about X that is a corrupted message with",
    "start": "1853399",
    "end": "1859320"
  },
  {
    "text": "valid padding now we know just from the way RSA works that for us to have gotten that message X must be the original",
    "start": "1859320",
    "end": "1866159"
  },
  {
    "text": "plain text times s our corrupting influence 2 3 four five eventually valid padding minus RN again just from the",
    "start": "1866159",
    "end": "1872919"
  },
  {
    "text": "definition of modular arithmetic that's how you express that so the corrupted message works out to this expression of",
    "start": "1872919",
    "end": "1878399"
  },
  {
    "text": "the plain text which we don't know times s which we do know minus RN we know what n is but we don't know what R is R is",
    "start": "1878399",
    "end": "1884799"
  },
  {
    "text": "the number of times we've wrapped the modules now BAS basic algebra we can take those expressions and solve them",
    "start": "1884799",
    "end": "1890799"
  },
  {
    "text": "for different unknowns we don't know the plain text we don't know the number of times that we've wrapped the module so",
    "start": "1890799",
    "end": "1895960"
  },
  {
    "text": "what we're going to do is basic algebra we're to get P by itself on the left hand side of the equation and if you do",
    "start": "1895960",
    "end": "1901639"
  },
  {
    "text": "that it works out that P is going to be X Plus RN / s again X our corrupted message R the number of times we WRA the",
    "start": "1901639",
    "end": "1908440"
  },
  {
    "text": "modulus and the modulus over s the number that we know that we multiplied into the message to get the valid the",
    "start": "1908440",
    "end": "1914600"
  },
  {
    "text": "valid plain text now it looks like we've solved our essay here at this point because we have P by itself on the left",
    "start": "1914600",
    "end": "1919639"
  },
  {
    "text": "hand side but we obviously haven't because we don't know what R is there are unknowns on the right hand side of the equation we can do the same thing",
    "start": "1919639",
    "end": "1925080"
  },
  {
    "text": "for R exact same set of steps we're solving for now the number of times we've wrapped the modulus now we get an",
    "start": "1925080",
    "end": "1930360"
  },
  {
    "text": "expression just like that P expression before basic algebra P works out to that R works out to this P * s the plain text",
    "start": "1930360",
    "end": "1937320"
  },
  {
    "text": "x s minus the corrupted message Over N now there's no like if you just look at it and it took me a while right if you",
    "start": "1937320",
    "end": "1943519"
  },
  {
    "text": "just look at it there's no intuitive reason why R works out to P * s - X over n I'm not smart enough to see that",
    "start": "1943519",
    "end": "1949559"
  },
  {
    "text": "instantly but if you do the algebra it just does right just do the steps get R by itself on the left hand side and it",
    "start": "1949559",
    "end": "1954919"
  },
  {
    "text": "works out to this right so here's the cool thing that black and bucker does right we don't know what R is we don't know exactly what p is but we know",
    "start": "1954919",
    "end": "1961120"
  },
  {
    "text": "something about those numbers we know they have valid padding so what we're going to do is for the unknowns we're",
    "start": "1961120",
    "end": "1966320"
  },
  {
    "text": "going to substitute in the balance we know the message has to be between two 0000 and two f f f f f f we're going to",
    "start": "1966320",
    "end": "1972960"
  },
  {
    "text": "put the intervals and plug them into the equation we do that for p we do that for R we do that for s",
    "start": "1972960",
    "end": "1978559"
  },
  {
    "text": "right and so basically what this is going to give us is like a a boundary for R so we'll have like a range of R",
    "start": "1978559",
    "end": "1984679"
  },
  {
    "text": "values that are possible and while it took us a long time to find the first",
    "start": "1984679",
    "end": "1990200"
  },
  {
    "text": "successful s value that would give us uh a valid uh a validly padded X",
    "start": "1990200",
    "end": "1997360"
  },
  {
    "text": "message uh we can now find many more uh values for s that are successful uh",
    "start": "1997360",
    "end": "2004559"
  },
  {
    "text": "pretty quickly so before it would be on the order of like 10,000 or 100,000 attempts before we find a successful s",
    "start": "2004559",
    "end": "2010919"
  },
  {
    "text": "but now it's going to be maybe like 10 attempts and each successful s we find",
    "start": "2010919",
    "end": "2016720"
  },
  {
    "text": "is going to help us narrow the bounds on our message uh by a great margin it's",
    "start": "2016720",
    "end": "2023760"
  },
  {
    "text": "essentially going to allow us to cut it in half each time and so to get some perspective of this I'm sorry for stepping on you this but I love making",
    "start": "2023760",
    "end": "2029679"
  },
  {
    "text": "this point right so you're thinking RSA 2048 you have numbers that are so large you can imagine brute forcing RSA right",
    "start": "2029679",
    "end": "2036600"
  },
  {
    "text": "but we're dealing with numbers that are so large that to count forward through all that number space to go from 0 to 2048 and just count that space right",
    "start": "2036600",
    "end": "2043600"
  },
  {
    "text": "we're talking heat death of the universe amounts of time to brute force all those individual numbers the whole 2K space",
    "start": "2043600",
    "end": "2050158"
  },
  {
    "text": "the two kilobit space of numbers that we're working in here so what this is allowing us to do here as we do this as",
    "start": "2050159",
    "end": "2055320"
  },
  {
    "text": "we find these intervals and plug them in and find new X values and S values and all that um what it's doing is instead of us counting slowly forward from the",
    "start": "2055320",
    "end": "2062480"
  },
  {
    "text": "beginning of the message space all the way to the end of the message space what it's doing is it's allowing us to find to jump for forward in that space to",
    "start": "2062480",
    "end": "2069040"
  },
  {
    "text": "rule out large swaths of the space of the numbers there it's essentially us traveling it's essentially letting us",
    "start": "2069040",
    "end": "2074320"
  },
  {
    "text": "travel forward in time so instead of having to wait for 10 million years to get through the whole Space it's going",
    "start": "2074320",
    "end": "2079358"
  },
  {
    "text": "to let us jump several million years I should have worked out with the cost of those like how much you're saving every time you do it but every time you",
    "start": "2079359",
    "end": "2085679"
  },
  {
    "text": "compute these intervals and you do this over and over again iterate the algorithm every time you do it it's drastically cutting through the whole",
    "start": "2085679",
    "end": "2091440"
  },
  {
    "text": "Space of the RSA modulus so what it does basically is it turns like a linear search into a log a",
    "start": "2091440",
    "end": "2097839"
  },
  {
    "text": "logarithmic one um so it basically makes this attack feasible and actually really cheap um so we we have a short demo here",
    "start": "2097839",
    "end": "2105000"
  },
  {
    "text": "that we're going to show so what you're seeing here in action is uh the results",
    "start": "2105000",
    "end": "2110079"
  },
  {
    "text": "of repeated successful uh s queries so if you follow",
    "start": "2110079",
    "end": "2115200"
  },
  {
    "text": "the the red bite as it goes along that's kind of like values locking in like bite by bite so you can see we're we're",
    "start": "2115200",
    "end": "2121280"
  },
  {
    "text": "recovering the high order bytes first you can see the 00002 uh that's that leading two we were",
    "start": "2121280",
    "end": "2128200"
  },
  {
    "text": "talking about and that green zero that is the null delimiter uh kind of",
    "start": "2128200",
    "end": "2134240"
  },
  {
    "text": "highlighting the end of the padding string in the beginning of the actual plane text message which you can see where we're covering now you can see",
    "start": "2134240",
    "end": "2140079"
  },
  {
    "text": "that this is basically going along uh at like a linear Pace like it's not taking us a longer time to recover the lower",
    "start": "2140079",
    "end": "2146520"
  },
  {
    "text": "order bit it's like we're moving along through it and this is going very quickly so this is with like a a 10",
    "start": "2146520",
    "end": "2151880"
  },
  {
    "text": "24-bit key um so this this is like a very feasible attack to bring off and",
    "start": "2151880",
    "end": "2157440"
  },
  {
    "text": "like an application Level setting for for a while um you know this this attack",
    "start": "2157440",
    "end": "2163200"
  },
  {
    "text": "used to be called the million message attack and it was called the million message attack so as to make it sound",
    "start": "2163200",
    "end": "2168520"
  },
  {
    "text": "less feasible it was found originally in TLS this vulnerability exists in TLS in fact just a couple weeks ago the Java",
    "start": "2168520",
    "end": "2175160"
  },
  {
    "text": "implementation of TLS was found to have this vulnerability it didn't spit out like the reason people didn't find it until recently was it didn't spit out an",
    "start": "2175160",
    "end": "2181720"
  },
  {
    "text": "error about valid padding but the behavior of the target changed based on whether the padding was valid or not I",
    "start": "2181720",
    "end": "2186920"
  },
  {
    "text": "can't remember which Java TLS implementation was but it was a really cool vulnerability report where they got the blank and Backer attack to work",
    "start": "2186920",
    "end": "2192800"
  },
  {
    "text": "against TLS with a modern TLS Library just based on Behavior differences if the the padding was valid or the padding",
    "start": "2192800",
    "end": "2198240"
  },
  {
    "text": "wasn't valid so like million message attack is supposed to tell you that there's a hard attack to to carry off",
    "start": "2198240",
    "end": "2203319"
  },
  {
    "text": "but we've done it in web web pent test settings so every time as you watched those red bites go by and it was locking",
    "start": "2203319",
    "end": "2208640"
  },
  {
    "text": "in on the red bites those are network queries right it's going to take some time to go through it but at the end of it you've decrypted the message what",
    "start": "2208640",
    "end": "2214240"
  },
  {
    "text": "you've done is you've tricked the server into taking these CER texts and revealing the plain text of the message",
    "start": "2214240",
    "end": "2220640"
  },
  {
    "text": "for you from that so uh ninth grade algebra",
    "start": "2220640",
    "end": "2227240"
  },
  {
    "text": "study it uh so so we originally had six sets",
    "start": "2227240",
    "end": "2234200"
  },
  {
    "text": "we released a seven set about a year ago uh it was a little bit more esoteric but it had a little bit of interesting stuff",
    "start": "2234200",
    "end": "2240000"
  },
  {
    "text": "in there so we had some CBC Mac stuff um you see that if you're doing embedded work we have some compression side",
    "start": "2240000",
    "end": "2246160"
  },
  {
    "text": "channels which uh if you're if you're familiar with the crime attack on TLS from a few years ago that's what that's",
    "start": "2246160",
    "end": "2252040"
  },
  {
    "text": "about um a little bit of stuff about the rc4 single bite biases uh so all these are going to be public hopefully by the",
    "start": "2252040",
    "end": "2258440"
  },
  {
    "text": "end of today but at no later than tomorrow with Solutions in every language that we can get releases for we've got about 10 of them right now so",
    "start": "2258440",
    "end": "2265200"
  },
  {
    "text": "it'll be Crypt pals.com I should have put the URL on the screen but Crypt pals.com every one of these exercises",
    "start": "2265200",
    "end": "2270720"
  },
  {
    "text": "spelled out so all you got to be able to do is code um go do the exercises they're pretty great great way to learn",
    "start": "2270720",
    "end": "2275839"
  },
  {
    "text": "crypto um so we're going to go a little bit faster the next attack we want to show you is um pretty badass um so",
    "start": "2275839",
    "end": "2283119"
  },
  {
    "text": "that's set seven and then set eight so set eight is the last set we think we're going to do um so we did some number Theory earlier in set five and set and",
    "start": "2283119",
    "end": "2289720"
  },
  {
    "text": "set six we have really good coverage of block Cipher cryptography in set three and four and two um set8 all ECC um so",
    "start": "2289720",
    "end": "2297040"
  },
  {
    "text": "we're not going to break down all of set we haven't released set8 yet to anybody no one's seen it yet but we're going to tease it with uh one very cool very",
    "start": "2297040",
    "end": "2303400"
  },
  {
    "text": "practical attack against um elliptic curve Dy heland so um TIY Helman um I'm",
    "start": "2303400",
    "end": "2309280"
  },
  {
    "start": "2306000",
    "end": "2407000"
  },
  {
    "text": "not going to take too much time explaining TIY Helman but it's just a way it is it's the simplest number theoretic crypto algorithm it's the",
    "start": "2309280",
    "end": "2315040"
  },
  {
    "text": "simplest public key crypto algorithm um you can go to Wikipedia right now and get examples of TIY Helman and then go",
    "start": "2315040",
    "end": "2320839"
  },
  {
    "text": "into you know python or the IRB and Ruby or whatever very much worth doing this go just go to Wikipedia and do an",
    "start": "2320839",
    "end": "2326359"
  },
  {
    "text": "example of Dy Helm and just you know do it so basically the idea is you start with a large prime number and G which is",
    "start": "2326359",
    "end": "2332000"
  },
  {
    "text": "a small number that both sides agree on right and then both sides generate lower case a lower case b those are private",
    "start": "2332000",
    "end": "2337160"
  },
  {
    "text": "keys keys right and so to go from your private key and generate a public key you raise G to the eighth power you",
    "start": "2337160",
    "end": "2342400"
  },
  {
    "text": "raise G to the secret key power you cap a other side gets Cap B you exchange cap a and Cap B so you know Alice has",
    "start": "2342400",
    "end": "2349119"
  },
  {
    "text": "lowercase a and uppercase B and Bob has lowercase b and uppercase a right and they can both raise those numbers to the",
    "start": "2349119",
    "end": "2355160"
  },
  {
    "text": "other power right and magically they're going to agree on the same number this is this underpins all of TLS forward",
    "start": "2355160",
    "end": "2360839"
  },
  {
    "text": "secrecy for instance this is how TLS generates new keys on the fly so the NSA can't capture traffic break keys go back",
    "start": "2360839",
    "end": "2366880"
  },
  {
    "text": "in time and Crypt other messes how you generate Emeral key so DIY Helman we're going to talk about elliptic curve DIY Helman just so you get a sense of you",
    "start": "2366880",
    "end": "2373400"
  },
  {
    "text": "know we got submissions and all the different languages this is what a c submission implementing Dy Helman looks like very small is my point here very",
    "start": "2373400",
    "end": "2380400"
  },
  {
    "text": "simple algorithm this is goang goang only looks long because the guy put the whole constant that we asked him to put in there also pretty small not much",
    "start": "2380400",
    "end": "2386720"
  },
  {
    "text": "longer than C goang great language do it um that's hasell just hasal is very Advanced language we like a lot um and",
    "start": "2386720",
    "end": "2393400"
  },
  {
    "text": "there's there's Ruby so you know just we have we'll get don't cheat and read this Solutions but we'll make them available",
    "start": "2393400",
    "end": "2398680"
  },
  {
    "text": "to you guys hopefully tomorrow right but that's Diffy Helman in a couple different languages really that is all of Diffy Helman this is not artificial",
    "start": "2398680",
    "end": "2404720"
  },
  {
    "text": "this is all the code that it would take to implement Dy helmet a little bit trickier to implement elliptic curve Dy helmet and if you're going to implement",
    "start": "2404720",
    "end": "2410599"
  },
  {
    "text": "Dy helmet in 2014 you're going to use elliptic curve to do it and we're going to show you how to break um popular",
    "start": "2410599",
    "end": "2415680"
  },
  {
    "text": "implementations of elliptic curve dippy Helman we're going to we're going to do a point off curve attack on elliptic curve this is a two-step attack the",
    "start": "2415680",
    "end": "2422680"
  },
  {
    "text": "first part of the attack is similar to BL and Bucker and that we are tricking the server into revealing fragments of",
    "start": "2422680",
    "end": "2427960"
  },
  {
    "text": "the keys and Steve and Alex are going to explain how that works and then Sean and Alex are going to explain how you take those key fragments and put them back",
    "start": "2427960",
    "end": "2434480"
  },
  {
    "start": "2434000",
    "end": "2477000"
  },
  {
    "text": "together so uh first to describe uh elliptic curve uh the cyclical group for",
    "start": "2434480",
    "end": "2441119"
  },
  {
    "text": "it uh we need to learn how or I need to talk about how Clock Works uh so",
    "start": "2441119",
    "end": "2446240"
  },
  {
    "text": "basically what we're going to focus on is just adding so uh 4 + 10 modulo uh 13",
    "start": "2446240",
    "end": "2454040"
  },
  {
    "text": "would be one you could tell time I think you're good with that uh so consider uh there",
    "start": "2454040",
    "end": "2461839"
  },
  {
    "text": "that there's a magical hash function that masks what that number actually is",
    "start": "2461839",
    "end": "2468079"
  },
  {
    "text": "but clock math still actually works so hash of 4 plus hash of 10 would still be",
    "start": "2468079",
    "end": "2473480"
  },
  {
    "text": "hash of one sorry I'm thirsty so with elliptic",
    "start": "2473480",
    "end": "2479920"
  },
  {
    "text": "curve uh there's three parameters there's the curve itself uh the P Point uh that's the generator uh and the moduo",
    "start": "2479920",
    "end": "2489160"
  },
  {
    "text": "prime we're showing you this by the way so if you understand Diffy Helman if you've implemented Diffy Helman ever um",
    "start": "2489160",
    "end": "2495040"
  },
  {
    "text": "ECC is just a different mathematical domain that we do Diffy helmet in right you need a couple of basic operations to",
    "start": "2495040",
    "end": "2501240"
  },
  {
    "text": "operate on elliptic curves and then you take Diffy Helman as Diffy Helman as is and you do it in the elliptic curve",
    "start": "2501240",
    "end": "2507400"
  },
  {
    "text": "domain and it suddenly becomes much stronger much faster and so these are the parameters that you need the base point the shape of the curve and all",
    "start": "2507400",
    "end": "2513839"
  },
  {
    "text": "that to do elliptic curve Diffy helmet so uh basically uh that magical hash",
    "start": "2513839",
    "end": "2520440"
  },
  {
    "start": "2514000",
    "end": "2549000"
  },
  {
    "text": "function uh is basically like uh scalar uh Point",
    "start": "2520440",
    "end": "2526440"
  },
  {
    "text": "multiplication um so the way uh multiplication works on elliptic curves",
    "start": "2526440",
    "end": "2532880"
  },
  {
    "text": "is uh you add two points and you can only add two points or double a point so",
    "start": "2532880",
    "end": "2540119"
  },
  {
    "text": "same thing uh 4 * p + 10 * P would be 1 *",
    "start": "2540119",
    "end": "2545160"
  },
  {
    "text": "P so um yeah we should actually fly through this so and then we don't need this slide anymore so Alex you're attack",
    "start": "2545160",
    "end": "2552640"
  },
  {
    "start": "2549000",
    "end": "2699000"
  },
  {
    "text": "yeah so here we're attacking Li the Cur to vman like we said and there's a few things that enable us to do this attack",
    "start": "2552640",
    "end": "2559800"
  },
  {
    "text": "first is you see the um the curve shape up there that's the equation for the curve the only two bits of information",
    "start": "2559800",
    "end": "2567960"
  },
  {
    "text": "that distinguish two different curves are that A and B parameter and one thing that enables the",
    "start": "2567960",
    "end": "2574319"
  },
  {
    "text": "attack is the fact that some of them some implementations of that addition or",
    "start": "2574319",
    "end": "2580079"
  },
  {
    "text": "Point doubling do not take into account that b parameter so you see here I have",
    "start": "2580079",
    "end": "2585960"
  },
  {
    "text": "um two curves one b equal 7 the larger curve and one b equal 8 so if I gave you",
    "start": "2585960",
    "end": "2592720"
  },
  {
    "text": "a point on the b equal 7 curve and I told you to double it you would give me",
    "start": "2592720",
    "end": "2598079"
  },
  {
    "text": "back a point on that curve if we're not taking in account the the curve shape",
    "start": "2598079",
    "end": "2603359"
  },
  {
    "text": "there so you imagine that the outer curve there is a secure curve it's a curve that we've chosen carefully or nist chose it for us or whatever that",
    "start": "2603359",
    "end": "2609599"
  },
  {
    "text": "equation is a it's a curve in the short wire STW form it's the basis per for instance the nist curves for instance so",
    "start": "2609599",
    "end": "2614800"
  },
  {
    "text": "just understand that outer curve two curves each Al like in shape but they have different B parameters and the one",
    "start": "2614800",
    "end": "2620000"
  },
  {
    "text": "with b equal 7 here is a secure curve it's one we've chosen carefully the one that on the inside is an insecure curve",
    "start": "2620000",
    "end": "2625760"
  },
  {
    "text": "it's one that Alex has chosen carefully and the trick here is that we can get a victim to compute on the wrong curve so",
    "start": "2625760",
    "end": "2632880"
  },
  {
    "text": "the the thing there can you go back sure so if you consider that function as like a function of x to determine y then you",
    "start": "2632880",
    "end": "2639240"
  },
  {
    "text": "use the input X and the fixed A and B to determine a y but if you have a receiver",
    "start": "2639240",
    "end": "2645680"
  },
  {
    "text": "who's willing to take an X and A Y and do computations on them then the B becomes sort of unimportant and you can",
    "start": "2645680",
    "end": "2652920"
  },
  {
    "text": "use the X and Y to determine the B so you can imagine like if by by that equation if you have you know xals 1",
    "start": "2652920",
    "end": "2659119"
  },
  {
    "text": "maybe y should equal 10 right so now you have a protocol where they're standing both coordinates on the on the curve",
    "start": "2659119",
    "end": "2664240"
  },
  {
    "text": "right so xal 1 y should equal 10 right we already know that it should equal 10 cuz the formula tells it it tells it it",
    "start": "2664240",
    "end": "2670440"
  },
  {
    "text": "tells us it should right but instead of saying y equal 10 we say yal 10,000 right that is a point often outer space",
    "start": "2670440",
    "end": "2676559"
  },
  {
    "text": "it is nowhere near the curve it's not a point on the curve right and also doesn't help us that much to say Y is 10,000 right but if we're careful about",
    "start": "2676559",
    "end": "2683240"
  },
  {
    "text": "what we say Y is we don't say Y is 10,000 we don't put the point off in outer space we target it really specifically to land on a different",
    "start": "2683240",
    "end": "2689559"
  },
  {
    "text": "curve right so instead of being outer space instead of Y is 10,000 maybe Y is four or something like that right and",
    "start": "2689559",
    "end": "2694920"
  },
  {
    "text": "that point puts it on the insec curve that we want the target to operate on so",
    "start": "2694920",
    "end": "2700480"
  },
  {
    "start": "2699000",
    "end": "2772000"
  },
  {
    "text": "we get what we get from that is like we'll take a step back in the honest setting if I'm communicating with Alice",
    "start": "2700480",
    "end": "2706079"
  },
  {
    "text": "here I'm going to be sending a point that is on the original curve and that",
    "start": "2706079",
    "end": "2711119"
  },
  {
    "text": "point uh corresponds with a generator of the curve generator of the curve is just a point that uh encompasses every single",
    "start": "2711119",
    "end": "2719640"
  },
  {
    "text": "possible point on the curve Now by sending a um a point from a bad curve",
    "start": "2719640",
    "end": "2728400"
  },
  {
    "text": "I'm pinpointing you I'm forcing you to do the operation on my curve and then your operation with your secret key can",
    "start": "2728400",
    "end": "2735079"
  },
  {
    "text": "only take a few different values and that's where the leak of your secret key comes into play so if you're able to do",
    "start": "2735079",
    "end": "2742480"
  },
  {
    "text": "this multiple times you get multiple pieces of the secret key mod some number",
    "start": "2742480",
    "end": "2749200"
  },
  {
    "text": "G which was in this case would be like the order of so we've collected all these links and now we're going to try",
    "start": "2749200",
    "end": "2754599"
  },
  {
    "text": "and explain the Chinese remainder theorem in 5 minutes that's how much time we have left but imagine you've done this over and over again you've",
    "start": "2754599",
    "end": "2760000"
  },
  {
    "text": "gotten different insecure points on this bad curve you can by the way do this with popular elliptic curve you know DIY",
    "start": "2760000",
    "end": "2765440"
  },
  {
    "text": "helmet software it'll allow you to extract secret keys from your target right so we set up this condition this",
    "start": "2765440",
    "end": "2770800"
  },
  {
    "text": "set of little formulas right and so um we're going to really quickly just try to explain the Chinese remainder theorem for you right um You don't need to",
    "start": "2770800",
    "end": "2777640"
  },
  {
    "start": "2772000",
    "end": "2864000"
  },
  {
    "text": "understand CRT from this talk you just need to know that it's possible for you to implement it so the backstory for this is you have a Chinese General",
    "start": "2777640",
    "end": "2783800"
  },
  {
    "text": "there's been a big battle he's got x amount of soldiers left you know they're their arms are all hacked off and some of them are standing and some of them",
    "start": "2783800",
    "end": "2789240"
  },
  {
    "text": "are dead you want to count them really quickly so here's a math magic trick here right so you want to count this little army of little soldiers that you",
    "start": "2789240",
    "end": "2795280"
  },
  {
    "text": "have here so instead of actually trying to count these individually which would take a long time what you do instead is you say they're soldiers you're can tell",
    "start": "2795280",
    "end": "2800720"
  },
  {
    "text": "them to do things so tell them to line up in groups of five don't count the soldiers just remember you said five and",
    "start": "2800720",
    "end": "2806200"
  },
  {
    "text": "there's one guy left right you count the one one is easy to count you know however many that is is not easy to",
    "start": "2806200",
    "end": "2811359"
  },
  {
    "text": "count now we say line up in groups of seven right again we know seven and we just count one the remainder after we",
    "start": "2811359",
    "end": "2816640"
  },
  {
    "text": "have them go into groups of seven right and then finally we say do it in groups of 11 and we know this time it's three 1",
    "start": "2816640",
    "end": "2822480"
  },
  {
    "text": "1 3 and then there's a formula that will go from the groups of five groups of",
    "start": "2822480",
    "end": "2827520"
  },
  {
    "text": "seven groups of 11 and 1 one3 and we can work that back to the original count it",
    "start": "2827520",
    "end": "2832880"
  },
  {
    "text": "turns out the number is going to be 36 now we have all this math on this page here the real Point here is we've unrolled all of the Chinese remainer",
    "start": "2832880",
    "end": "2839480"
  },
  {
    "text": "theorem for you right here just to give you a sense that this is not complicated math these numbers just kind of distribute into these formulas you could",
    "start": "2839480",
    "end": "2845599"
  },
  {
    "text": "implement this even if you not a programmer in Ruby or python in a couple of minutes and just test it and get it",
    "start": "2845599",
    "end": "2851079"
  },
  {
    "text": "working and CRT is very very valuable for doing number theor at crypto you'll use it a lot so um that is the Chinese",
    "start": "2851079",
    "end": "2857040"
  },
  {
    "text": "remainder theorem and we're going to use that to tie together the key for I have no idea if we have enough time to do the demo but I think the next slide was the",
    "start": "2857040",
    "end": "2862400"
  },
  {
    "text": "demo um you could probably at this point catch us afterwards to we can let me see",
    "start": "2862400",
    "end": "2868000"
  },
  {
    "start": "2864000",
    "end": "2947000"
  },
  {
    "text": "if I can switch over to it how do I do I totally have the",
    "start": "2868000",
    "end": "2875039"
  },
  {
    "text": "demo this is going to be like the fastest and least intelligible demo of all time so um Alex implemented this",
    "start": "2875240",
    "end": "2881960"
  },
  {
    "text": "attack in sage just to show you guys what it looks like Sage is just python that's like a python version of that lab so what's the first box here the first",
    "start": "2881960",
    "end": "2888319"
  },
  {
    "text": "box is just setting up a uh doubling and adding formulas without using that b parameter from the curve equation so",
    "start": "2888319",
    "end": "2894880"
  },
  {
    "text": "when I head evaluate what am I seeing you're seeing the pop-up menu uh the next little box uh sets up",
    "start": "2894880",
    "end": "2902119"
  },
  {
    "text": "the fake toy curve equation and you can see Alice setting her secret key to 1 2",
    "start": "2902119",
    "end": "2908119"
  },
  {
    "text": "3 4 next I have pregenerated a couple of invalet curve points that I'm just um",
    "start": "2908119",
    "end": "2915559"
  },
  {
    "text": "initializing right here the next box I'm simulating sending",
    "start": "2915559",
    "end": "2920599"
  },
  {
    "text": "those curve points to Alice this is the point at which if you were doing this attack for real and we hav't we we got this attack from Watson lad who is a",
    "start": "2920599",
    "end": "2927599"
  },
  {
    "text": "genius cryptographer grad student at Berkeley who is inexplicably Alla our intern this year this is one of the",
    "start": "2927599",
    "end": "2933000"
  },
  {
    "text": "things that happens when you do crypto challenges that cryptographers take you seriously and now one of them who is much smarter than we are is now one of",
    "start": "2933000",
    "end": "2938839"
  },
  {
    "text": "our interns and he implemented this inside of a day in Python targeting real TLS implementations we've simulated that",
    "start": "2938839",
    "end": "2944680"
  },
  {
    "text": "here in sage just you can kind of see what the math looks like but there you go so those are just showing the responses from Alice uh now we work",
    "start": "2944680",
    "end": "2951319"
  },
  {
    "start": "2947000",
    "end": "2959000"
  },
  {
    "text": "backwards from her responses to the small little scaler bit of the secret key that we' have um gotten from",
    "start": "2951319",
    "end": "2958799"
  },
  {
    "text": "her uh the next box shows the extended U",
    "start": "2958799",
    "end": "2964200"
  },
  {
    "text": "gcd algorithm which is an important part for CRT but as you can see it's it's a",
    "start": "2964200",
    "end": "2970160"
  },
  {
    "text": "couple lines of code when you go to implement the Chinese remainder theorum which please do go try to implement the Chinese remainder theorem the the one",
    "start": "2970160",
    "end": "2976040"
  },
  {
    "text": "interesting part of implementing it is you have to implement the extended ukian algorithm for gcd the gcd algorithm the",
    "start": "2976040",
    "end": "2981319"
  },
  {
    "text": "ukian gcd algorithm is grade school math look at it it's just not complicated EGD is the worst named algorithm in all of",
    "start": "2981319",
    "end": "2987599"
  },
  {
    "text": "mathematics it's the extended gcd but it doesn't compute the gcd it can be something totally different just understand this code is very simple",
    "start": "2987599",
    "end": "2993920"
  },
  {
    "text": "right you can just look at it you don't have to understand it I barely understand it but I can do this attack I can make this work right so that was him",
    "start": "2993920",
    "end": "2999680"
  },
  {
    "text": "implementing egcb and get to work on that point this is basically just like an implementation detail for doing",
    "start": "2999680",
    "end": "3004839"
  },
  {
    "text": "Chinese her remainder theorem like you actually don't need do I hit evaluate here I'll hit evalate here and then the",
    "start": "3004839",
    "end": "3010040"
  },
  {
    "text": "final box is actually just doing the CRT with that um uh little function there which gives us the private key from the",
    "start": "3010040",
    "end": "3016240"
  },
  {
    "text": "server so not as cool as Sean's demo but it gives you a sense of what it's like so um he's about to hook us off the stage we had a lot of content in here so",
    "start": "3016240",
    "end": "3023119"
  },
  {
    "text": "um you know there we go but like again Crypt pals.com will have all the exercises online totally free we'd love",
    "start": "3023119",
    "end": "3028839"
  },
  {
    "text": "it if you guys took some time you know looked at the solutions send us polar requests for the other people's Solutions ask us questions this is stuff",
    "start": "3028839",
    "end": "3035880"
  },
  {
    "text": "we believe in a lot so um look thank you very much also um Sean and Alex both have very very cool crypto attacks that",
    "start": "3035880",
    "end": "3041640"
  },
  {
    "text": "are even cooler than the stuff that we talked about here double bite rc4 a partial non disclosure and ecdsa both of",
    "start": "3041640",
    "end": "3047559"
  },
  {
    "text": "them will explain that to you if you want to hear why I hate DNS se you can catch me to talk about dnsc um whatever",
    "start": "3047559",
    "end": "3053200"
  },
  {
    "text": "Steve wants to talk to you about so thank you thank you very very very much ATT",
    "start": "3053200",
    "end": "3059520"
  }
]