[
  {
    "start": "0",
    "end": "74000"
  },
  {
    "text": "[Music]",
    "start": "4710",
    "end": "8000"
  },
  {
    "text": "welcome to black hat Windows 2K security held February 14th through the 15th 2001",
    "start": "18359",
    "end": "24160"
  },
  {
    "text": "in Las Vegas Nevada the following videotape was recorded live at the conference and produced by the sound of",
    "start": "24160",
    "end": "30000"
  },
  {
    "text": "knowledge Incorporated this is videotape number 18 deep knowledge track auditing binaries",
    "start": "30000",
    "end": "37200"
  },
  {
    "text": "for security",
    "start": "37200",
    "end": "40079"
  },
  {
    "text": "vulnerabilities to speak about auditing close Source applications for security vulnerabilities such as buffer overflows",
    "start": "43160",
    "end": "49320"
  },
  {
    "text": "and format string bugs and um my speech will consist of two parts one part which will start now",
    "start": "49320",
    "end": "56520"
  },
  {
    "text": "and will be more the more straightforward part where I just talk and explain relatively simple stuff and",
    "start": "56520",
    "end": "63719"
  },
  {
    "text": "then there will be a coffee break and afterwards um we'll have another half which is well the more complex stuff so",
    "start": "63719",
    "end": "72280"
  },
  {
    "text": "um short speech outline I'll start up with some legal considerations because",
    "start": "72280",
    "end": "77400"
  },
  {
    "start": "74000",
    "end": "74000"
  },
  {
    "text": "by reverse engineering other people's applications you're threading on thin ice then I'll introduce you to the topic",
    "start": "77400",
    "end": "85200"
  },
  {
    "text": "of auditing binaries and explain what different approaches to auditing binaries is these days what is being",
    "start": "85200",
    "end": "91720"
  },
  {
    "text": "done and so on then afterwards I'll recapitulate C",
    "start": "91720",
    "end": "96960"
  },
  {
    "text": "C++ programming mistakes that can lead to remote code execution",
    "start": "96960",
    "end": "102759"
  },
  {
    "text": "afterwards I'll explain how to find them in a binary and then I'll have a demonstration how I used the stuff I",
    "start": "102759",
    "end": "108799"
  },
  {
    "text": "just explained to find a buffer a format string bug this time in Netscape Enterprise web server which is now",
    "start": "108799",
    "end": "114360"
  },
  {
    "text": "called iws for I Planet web server so um that's going to be the first half then",
    "start": "114360",
    "end": "120960"
  },
  {
    "text": "we'll take a break which is very important and go on to the second part",
    "start": "120960",
    "end": "126240"
  },
  {
    "text": "which will be a bit less structured and I'll cover a variety of topics ranging from problems encountered when reverse",
    "start": "126240",
    "end": "133160"
  },
  {
    "text": "engineering o op applications um to manual structure and",
    "start": "133160",
    "end": "138720"
  },
  {
    "text": "automatic structure reconstruction and I'll cover automating the process of auditing binaries to a",
    "start": "138720",
    "end": "144599"
  },
  {
    "text": "certain degree because it's a very boring process you would spend a lot of time in a disassembler just hitting away it's stuff and looking at functions",
    "start": "144599",
    "end": "151440"
  },
  {
    "text": "which well are not really dangerous so um I'm a lazy bastard I'd like to have",
    "start": "151440",
    "end": "156640"
  },
  {
    "text": "as little work as possible so I'll go into automating what I'm",
    "start": "156640",
    "end": "162120"
  },
  {
    "text": "doing then I'll have afterwards because I don't have anything to talk about anymore a free time to discuss the topic",
    "start": "162560",
    "end": "169040"
  },
  {
    "text": "with anybody from the audience and if not we can just um quit earlier because I mean it's the last speech of the",
    "start": "169040",
    "end": "174440"
  },
  {
    "text": "conference and I don't think anybody's really into it to stay here until like 6 o' anyways let's just start with the",
    "start": "174440",
    "end": "181760"
  },
  {
    "text": "next slide legal considerations um by reverse engineering an application",
    "start": "181760",
    "end": "187000"
  },
  {
    "text": "you're breaking the shrink rep shrink rep agreement that comes with it each time you install something you have to",
    "start": "187000",
    "end": "192760"
  },
  {
    "text": "click on this nice shrink W license where you basically forfeit all your rights to um reverse engineer DEC",
    "start": "192760",
    "end": "198640"
  },
  {
    "text": "compile whatever so when you actually find a bug in a binary and You' spoken",
    "start": "198640",
    "end": "203760"
  },
  {
    "text": "the license agreement you techn technically become liable to all the damage you do so if you publish it and",
    "start": "203760",
    "end": "209280"
  },
  {
    "text": "the suffers an image loss you're liable for that or you can be held liable for that",
    "start": "209280",
    "end": "214840"
  },
  {
    "text": "theoretically so up until now I haven't been sued yet I'm waiting for Netscape and uh when I was in Amsterdam",
    "start": "214840",
    "end": "221840"
  },
  {
    "text": "Jennifer grck told me that she would defend me in a case that I got sued over that but I mean there's another simple",
    "start": "221840",
    "end": "227360"
  },
  {
    "text": "way not to get Su just don't publish your work if you find something so",
    "start": "227360",
    "end": "235280"
  },
  {
    "text": "um that it's a valid well it hasn't been really challenged yet because no company tried",
    "start": "238680",
    "end": "244959"
  },
  {
    "text": "to sue anybody else who would then in in turn challenge it dcss yeah but dcss is a different kind",
    "start": "244959",
    "end": "251840"
  },
  {
    "text": "of thing in that case somebody sued and you could challenge it but um anywise I don't think that most companies are",
    "start": "251840",
    "end": "257359"
  },
  {
    "text": "willing to go after me because I don't have any money",
    "start": "257359",
    "end": "262280"
  },
  {
    "text": "so um there is a European Union law dating back to 1991 um which is a u directive on the",
    "start": "262600",
    "end": "270080"
  },
  {
    "start": "265000",
    "end": "265000"
  },
  {
    "text": "legal protection of computer programs which is not really a law which is a directive to courts to act in a certain",
    "start": "270080",
    "end": "275919"
  },
  {
    "text": "manner so it is a bit of weird European Union politics it grants everybody the",
    "start": "275919",
    "end": "280960"
  },
  {
    "text": "right to decompile programs for interoperability purposes and for fixing bugs for error correction now it does",
    "start": "280960",
    "end": "287800"
  },
  {
    "text": "not allow you to find errors it allows you to fix errors that's a distinction",
    "start": "287800",
    "end": "292919"
  },
  {
    "text": "that is um very important here because technically there are some other European Union laws that only allow",
    "start": "292919",
    "end": "299560"
  },
  {
    "text": "allow you to do quality assurance by doing anything a normal user would do so by reverse engineering you're doing",
    "start": "299560",
    "end": "305320"
  },
  {
    "text": "something a normal user would not do so if you admit to having found the bug by reverse engineering you may well you",
    "start": "305320",
    "end": "312600"
  },
  {
    "text": "could get into trouble but once the bug is public you can do reverse engineering to fix it but these two rights cannot be",
    "start": "312600",
    "end": "319000"
  },
  {
    "text": "contracted away so the shrink web license at this point is void and null so",
    "start": "319000",
    "end": "325479"
  },
  {
    "text": "um it's a bit of a shaky situation in the US we have a bit of a better situation because the dmca specifically",
    "start": "325479",
    "end": "332680"
  },
  {
    "text": "gives everybody the right to reverse engineer for interoperability for encryption research and for security",
    "start": "332680",
    "end": "338880"
  },
  {
    "text": "testing so security testing is what we're doing so we're pretty safe on the other hand I'm not sure whether the",
    "start": "338880",
    "end": "344160"
  },
  {
    "text": "rights granted in the dmca can be contracted away so you better ask your local lawyer or just don't get",
    "start": "344160",
    "end": "351080"
  },
  {
    "text": "sued um now why would anybody want to look at disassembly all day or weeks why",
    "start": "351080",
    "end": "357600"
  },
  {
    "start": "352000",
    "end": "352000"
  },
  {
    "text": "would anybody actually want to do this there are several reason reasons if you're a black hat the main reason is many interesting systems Banks firewalls",
    "start": "357600",
    "end": "364720"
  },
  {
    "text": "and so on are running on close Source I mean how many open source firewalls are around it it's all firewall one gaunlet",
    "start": "364720",
    "end": "371400"
  },
  {
    "text": "sidewind Whatever firewalls seem to be all closed source and it's really interesting to look at those things um secondly new security V",
    "start": "371400",
    "end": "380160"
  },
  {
    "text": "vulnerabilities are every SS admin's nightmare somebody walks into your system which is like well Netscape",
    "start": "380160",
    "end": "385880"
  },
  {
    "text": "Enterprise web server and Lotus Domino SMTP server behind the firewall one it just hops from the Lotus Domino to the I",
    "start": "385880",
    "end": "394120"
  },
  {
    "text": "don't know Netscape Enterprise and starts connect collecting everything like harvesting pop passwords from the",
    "start": "394120",
    "end": "399319"
  },
  {
    "text": "SMTP server and so on you're screwed majorly and when that happens with zero day exploits you don't see it",
    "start": "399319",
    "end": "405759"
  },
  {
    "text": "coming um I actually I started this entire security crap by doing pen testing in Asia and there was a case",
    "start": "405759",
    "end": "411919"
  },
  {
    "text": "where we were auditing a bank and they had this set kind of setup with ncape Enterprise and lotos Domino behind a 511 and it looked really tight from the",
    "start": "411919",
    "end": "418840"
  },
  {
    "text": "outside on the the inside on the inside Network all connections were going off our SSL so if anybody compromised the Box on the inside you couldn't sniff",
    "start": "418840",
    "end": "425000"
  },
  {
    "text": "passw passwords but um I did some work on lotos Domino and came up with a nice overflow which we could exploit and",
    "start": "425000",
    "end": "432400"
  },
  {
    "text": "which then in turn allowed us to harvest pop passwords because everybody was locking in over SSL but at in in the",
    "start": "432400",
    "end": "439280"
  },
  {
    "text": "server memory of the pop server the passwords were still there in clear Tex so um they got screwed",
    "start": "439280",
    "end": "446120"
  },
  {
    "text": "majorly anyways if you're whab there are a few reasons to do the same thing first off you can annoy your vendor and",
    "start": "446120",
    "end": "452240"
  },
  {
    "text": "it's fun to do that and secondly you can get an impression how good the code is you're looking at if you look at an",
    "start": "452240",
    "end": "458400"
  },
  {
    "text": "application it takes you a day to find an overflow just don't buy it I mean seriously if you if you can see that the",
    "start": "458400",
    "end": "464199"
  },
  {
    "text": "code you can get an impression how well or with how much Security in mind the code has been written and if it's crap",
    "start": "464199",
    "end": "471080"
  },
  {
    "text": "it's crap and you will not deploy it so it's um actually it would be a good thing to do their software certification",
    "start": "471080",
    "end": "478199"
  },
  {
    "text": "like icsa is doing that and um it would be a good idea if icsa would actually look at the programs that",
    "start": "478199",
    "end": "484400"
  },
  {
    "text": "they're certifying instead of just looking at the abstract architecture and getting money for it but apparently there are no people",
    "start": "484400",
    "end": "490360"
  },
  {
    "text": "that are actually paying for having a reverse engineer look at products anyways going to the different",
    "start": "490360",
    "end": "495879"
  },
  {
    "start": "494000",
    "end": "494000"
  },
  {
    "text": "approaches for auditing binaries there are there's approach a stress testing",
    "start": "495879",
    "end": "501159"
  },
  {
    "text": "they're about a gazillion Pearl scripts they'll do that and there's uh n omx for those that don't know Pearl and like GUI",
    "start": "501159",
    "end": "508360"
  },
  {
    "text": "and then there's um retina which is a network security scanner by EI which claims to have fantastic AI to mine for",
    "start": "508360",
    "end": "515360"
  },
  {
    "text": "holds it's basically the same AI That's built into Pearl it's a great product anyways uh this works by having",
    "start": "515360",
    "end": "523518"
  },
  {
    "text": "like constructing long strings walking the protocol sending them to the to the server and hoping it'll crash um the",
    "start": "523519",
    "end": "530120"
  },
  {
    "text": "advantages of this are that a stress testing tool that has been written for a particular protocol like for SMTP can be",
    "start": "530120",
    "end": "536279"
  },
  {
    "text": "reused for any SMTP server out there so so um you write it once and you use it many times second Advantage is it will",
    "start": "536279",
    "end": "543760"
  },
  {
    "text": "work automatically so you start your stress testing tool you go out to lunch and after that you'll have a buffer overflow or you won't so um you don't",
    "start": "543760",
    "end": "551320"
  },
  {
    "text": "need to spend days in front of the decom or disassembler and uh soft eyes or whatever then it will does not really",
    "start": "551320",
    "end": "558600"
  },
  {
    "text": "require much skill to use I mean everybody can just start or I mean just about everybody knows Pearl and very few",
    "start": "558600",
    "end": "565399"
  },
  {
    "text": "people know assembly so it's much easier to get somebody to write a stress",
    "start": "565399",
    "end": "570760"
  },
  {
    "text": "testing tool than to get somebody to look at the disassembly uh the cons of the entire approach are that you have to know the",
    "start": "570760",
    "end": "576480"
  },
  {
    "text": "protocol before you start if they're using an undocumented protocol proprietary protocol whatever you'll",
    "start": "576480",
    "end": "582240"
  },
  {
    "text": "have no clue what to look for or what kind of strings to construct so you have to figure out the protocol first",
    "start": "582240",
    "end": "588480"
  },
  {
    "text": "secondly complex problems will be missed I've seen situations where you could overflow uh a buffer on the stack but",
    "start": "588480",
    "end": "595320"
  },
  {
    "text": "you couldn't actually well overflow anything useful just a string that got passed to a print F function afterwards",
    "start": "595320",
    "end": "601760"
  },
  {
    "text": "for as format string so you had a combination basically where you overflow something which would could then be used",
    "start": "601760",
    "end": "607760"
  },
  {
    "text": "for format string attack so those are things that you will definitely not find using stress",
    "start": "607760",
    "end": "613440"
  },
  {
    "text": "testing um thirdly you will not find any undocumented options you will not find out if the program is actually adhering",
    "start": "613440",
    "end": "620040"
  },
  {
    "text": "to the RFC if they have some weird functions or misbehaving functions in there you will not figure it out and um",
    "start": "620040",
    "end": "626839"
  },
  {
    "text": "you'll miss all back doors then there's approach B which Joey demonstrated in blackhead Singapore last",
    "start": "626839",
    "end": "633480"
  },
  {
    "start": "630000",
    "end": "630000"
  },
  {
    "text": "year or was it the year before which is basically you take a reverse engineer he sits down in front of the disassembly",
    "start": "633480",
    "end": "639240"
  },
  {
    "text": "and then he starts looking for the rec V call or wherever data is coming in and starts reading the disassembly from there but the problem with this or the",
    "start": "639240",
    "end": "646279"
  },
  {
    "text": "pro of this approach is that you'll find very very complex things if you actually read the entire disassembly but seriously um the process",
    "start": "646279",
    "end": "655399"
  },
  {
    "text": "like nobody's ever going to read an entire application in the dis assembly it'll take you weeks and you'll be",
    "start": "655399",
    "end": "661480"
  },
  {
    "text": "bogged down chasing down tentacles in big applications like Netscape Enterprise you go through a whole bunch",
    "start": "661480",
    "end": "667040"
  },
  {
    "text": "of functions which have no security impact have no bad coding in them and you'll be old before you find",
    "start": "667040",
    "end": "673160"
  },
  {
    "text": "something and um you need highly specialized auditor you need somebody like Joey or somebody like me or",
    "start": "673160",
    "end": "678480"
  },
  {
    "text": "somebody who's insane enough to spend his free time in front of the disassembler to do it and there's a very",
    "start": "678480",
    "end": "683839"
  },
  {
    "text": "big danger that the auditor will burn out it happened to me a few times before I came up with scripting that just sit",
    "start": "683839",
    "end": "689160"
  },
  {
    "text": "in front of an application and after a week you are burned out on that application you don't feel like looking at it anymore and your work gets Sher",
    "start": "689160",
    "end": "694880"
  },
  {
    "text": "you just are not focused on it anymore so um it's a good thing to do but um why",
    "start": "694880",
    "end": "702360"
  },
  {
    "text": "make your life hard when you can make your life easier that's where the third approach comes into play that's what I'm",
    "start": "702360",
    "end": "708320"
  },
  {
    "start": "706000",
    "end": "706000"
  },
  {
    "text": "doing it's looking for suspicious constructs um there are a lot of C functions that are known to be",
    "start": "708320",
    "end": "714320"
  },
  {
    "text": "problematic St strr copy Str strn copy and so on So You BAS basically try to",
    "start": "714320",
    "end": "720000"
  },
  {
    "text": "identify those suspicious codes code constructs sorry and um once you",
    "start": "720000",
    "end": "725560"
  },
  {
    "text": "identify a suspicious construct you work from there you analyze it further and look whether it's actually exploitable",
    "start": "725560",
    "end": "731040"
  },
  {
    "text": "so the advantage of this is you have reasonable depth you're going a lot deeper than stress testing and you'll",
    "start": "731040",
    "end": "737120"
  },
  {
    "text": "find some very very obscure problems already um secondly it takes it saves a",
    "start": "737120",
    "end": "742600"
  },
  {
    "text": "lot of time in comparison to approach b a lot of time I'm speaking like Factor",
    "start": "742600",
    "end": "749040"
  },
  {
    "text": "five Factor 10 and um the M most important part is that you can automate",
    "start": "749040",
    "end": "754920"
  },
  {
    "text": "the process of scanning for suspicious conards so you have a script or a program that scans through binary looks",
    "start": "754920",
    "end": "761240"
  },
  {
    "text": "for stuff that's suspicious and then tells you about it and you can look at at it later on and figure out whether it's actually dangerous we're going to",
    "start": "761240",
    "end": "767600"
  },
  {
    "text": "go into that in the second half of the speech now the cons are that you will since you're not like reading every line",
    "start": "767600",
    "end": "773519"
  },
  {
    "text": "of code you'll miss problems you're not actually doing a full-blown audit you can't be sure that you haven't missed",
    "start": "773519",
    "end": "778680"
  },
  {
    "text": "anything anything um secondly you need to be highly specialized thirdly the",
    "start": "778680",
    "end": "784440"
  },
  {
    "text": "reading the code backwards is very very frustrating in a way because frequently you'll have stuff where you you find",
    "start": "784440",
    "end": "791079"
  },
  {
    "text": "something that's suspicious you find something that looks exploitable and you figure out for some reason it's not um I",
    "start": "791079",
    "end": "796639"
  },
  {
    "text": "was at the CCC Congress uh around New Year and a friend of mine and me we audited NC ftpd which is a close Source",
    "start": "796639",
    "end": "802920"
  },
  {
    "text": "FTP demon for um Linux for format string bugs because we assumed that NC fpd",
    "start": "802920",
    "end": "808240"
  },
  {
    "text": "hadn't been audited for that and we found a few occasions where we had format string bugs but when we traced",
    "start": "808240",
    "end": "813720"
  },
  {
    "text": "the code backwards which took a few hours we figured out that you need root in order to supply those things because",
    "start": "813720",
    "end": "819279"
  },
  {
    "text": "you'd have to write to certain files so and those files are root owned and only root can write to them so exporting",
    "start": "819279",
    "end": "825839"
  },
  {
    "text": "something when your roote doesn't really make sense so it was like Hey we got something and C fpd in two hour laters",
    "start": "825839",
    "end": "831040"
  },
  {
    "text": "you're like well next Target so um it can be frustrating and",
    "start": "831040",
    "end": "838279"
  },
  {
    "text": "if you don't find anything you still have to read the entire application so um skills that the",
    "start": "838279",
    "end": "845600"
  },
  {
    "start": "844000",
    "end": "844000"
  },
  {
    "text": "auditor needs is first off good understanding of Assembly Language and compiler internals and probably",
    "start": "845600",
    "end": "851079"
  },
  {
    "text": "executable structure is important as well you need Assembly Language for reading the stuff and compiler internals",
    "start": "851079",
    "end": "856680"
  },
  {
    "text": "for recognizing the structures or the the things for recognizing how a particular compiler does a particular",
    "start": "856680",
    "end": "862440"
  },
  {
    "text": "thing in order to identify what's suspicious then you need a good knowledge of c and C++ and the coding",
    "start": "862440",
    "end": "868000"
  },
  {
    "text": "mistakes that lead to problems because only if you know what's happening on a CA level you can actually know what's",
    "start": "868000",
    "end": "873880"
  },
  {
    "text": "happening on an assembly level at that point so that's something you really need and you need a lot of endurance",
    "start": "873880",
    "end": "880279"
  },
  {
    "text": "patience time more endurance more patience more time a lot of chocolate against frustration and um",
    "start": "880279",
    "end": "888639"
  },
  {
    "text": "time then yeah code different languages might have",
    "start": "888639",
    "end": "895920"
  },
  {
    "text": "different uh constructs to be an expert in Cobalt if I want to reverse engineer a Cobalt",
    "start": "895920",
    "end": "903120"
  },
  {
    "text": "binary or something like that you have any thoughts on that actually I've never looked at Cobalt",
    "start": "903120",
    "end": "908440"
  },
  {
    "text": "binaries I just use that as an example I um I actually I'm specializing in C and",
    "start": "908440",
    "end": "914079"
  },
  {
    "text": "C++ stuff because um there's a lot of stuff that's known to be problematic in C I mean c was basically not designed to",
    "start": "914079",
    "end": "921399"
  },
  {
    "text": "be insecure but it's it's a very hard language to use and it give the programmer a lot more rope to hang",
    "start": "921399",
    "end": "926440"
  },
  {
    "text": "himself with than he actually needs and and um stuff like Ada for example does not have the same properties so I'll",
    "start": "926440",
    "end": "933639"
  },
  {
    "text": "only go into C stuff here and I I haven't played a lot with anything but see I've played a bit with dely but",
    "start": "933639",
    "end": "939959"
  },
  {
    "text": "there are no security vulnerabilities there I've just played with Source Code retrieval or reconstruction so anyways",
    "start": "939959",
    "end": "946920"
  },
  {
    "text": "the only tool that the auditor really needs is ID Pro um I was saying that in my class and everybody already had a",
    "start": "946920",
    "end": "952480"
  },
  {
    "start": "949000",
    "end": "949000"
  },
  {
    "text": "copy of it so um I'm ad doing advertisement here for that company anyways um it's a dis assembler and it's",
    "start": "952480",
    "end": "959639"
  },
  {
    "text": "basically the only disassembler that's um well that's worth not blowing to hell",
    "start": "959639",
    "end": "966079"
  },
  {
    "text": "it's a great program um basically it's the first disassembler that can be called a disassembler it does great work",
    "start": "966079",
    "end": "971160"
  },
  {
    "text": "it does um automatic reconstruction of um the stack frame it automatically",
    "start": "971160",
    "end": "976279"
  },
  {
    "text": "recognizes statically linked Library calls can disassemble anything from myips spark x86 your PlayStation my",
    "start": "976279",
    "end": "983199"
  },
  {
    "text": "toaster whatever um you get really awesome technical support the author added five to six features to the",
    "start": "983199",
    "end": "989759"
  },
  {
    "text": "internal scripting language because I was crashing it all the time with my scripts so um you you ask the author",
    "start": "989759",
    "end": "995839"
  },
  {
    "text": "something and he'll get back to you within a day or two and explain every like explain this stuff to you if you",
    "start": "995839",
    "end": "1001480"
  },
  {
    "text": "have as questions about internal structures and of Ida and so on he'll document that for you it's very very",
    "start": "1001480",
    "end": "1007079"
  },
  {
    "text": "it's great technical support and um well you have a powerful plug-in SDK and CPU",
    "start": "1007079",
    "end": "1013720"
  },
  {
    "text": "module SDK so if Ida isn't doing what you want it to you can make it do what you wanted to it's a great",
    "start": "1013720",
    "end": "1021680"
  },
  {
    "text": "product okay let's go into recapitulating what kind of SE problems there are I guess it's old news to",
    "start": "1021680",
    "end": "1028160"
  },
  {
    "text": "everybody in this room that string copy can be dangerous so I will not go into that if if a string copy copies user",
    "start": "1028160",
    "end": "1034480"
  },
  {
    "text": "supplied our non-static data into a buffer it's inherently dangerous um if a Sprint F expands any",
    "start": "1034480",
    "end": "1041959"
  },
  {
    "text": "string that is not static in the binary into a buffer well then we have",
    "start": "1041959",
    "end": "1047520"
  },
  {
    "text": "something that's dangerous as well and we usually can identify that with a by looking for a present s in the format",
    "start": "1047520",
    "end": "1054799"
  },
  {
    "text": "string then there's the entire scanner family which is quite dangerous as well if somebody pares user supplied input",
    "start": "1054840",
    "end": "1063080"
  },
  {
    "text": "while passes these things into like strings into buffers using the pr PR s from it string then you should have",
    "start": "1063080",
    "end": "1069960"
  },
  {
    "text": "should have a look at that as well because that's dangerous then there's the supposedly",
    "start": "1069960",
    "end": "1076120"
  },
  {
    "text": "safe prototypes in C now um these supposedly safe prototypes have their",
    "start": "1076120",
    "end": "1082320"
  },
  {
    "text": "pit FS on their own and um they're a lot of fun to look at because nowadays there are very few plain string copy overflows",
    "start": "1082320",
    "end": "1089159"
  },
  {
    "text": "around but there are lot of mistakes when using Str strn cpy or Str strn cat so um the problem with sdrn cpy is that",
    "start": "1089159",
    "end": "1098200"
  },
  {
    "text": "it does not properly null terminate once the end of maxland like the maxand",
    "start": "1098200",
    "end": "1103480"
  },
  {
    "text": "parameter the amount of Maximum bytes that we're copying is maxed out so once we reach this number there will be no",
    "start": "1103480",
    "end": "1110400"
  },
  {
    "text": "null termination of the buffer so if we're copying a large string into a smaller buffer and we're",
    "start": "1110400",
    "end": "1116919"
  },
  {
    "text": "using the code we had on the slide before uh I'll quickly go back to that wait a second with size of destination",
    "start": "1116919",
    "end": "1124480"
  },
  {
    "text": "buffer then our our string will not be null terminated and any subsequent",
    "start": "1124480",
    "end": "1130159"
  },
  {
    "text": "operations on this string will operate on the data behind our original string as well that can lead to a variety of",
    "start": "1130159",
    "end": "1136559"
  },
  {
    "text": "problems from buffer overflows to to um well data disclosure on the stack to uh",
    "start": "1136559",
    "end": "1142280"
  },
  {
    "text": "pointer corruption due to some kind of string parsing and so on so um once you",
    "start": "1142280",
    "end": "1148240"
  },
  {
    "text": "have a Str strn copy which copies stuff with the size of destination buffer in",
    "start": "1148240",
    "end": "1154919"
  },
  {
    "text": "instead of size of destination buffer minus one as maximum parameter it's dangerous next thing my favorite is s",
    "start": "1154919",
    "end": "1162720"
  },
  {
    "text": "strncat um sdrn cat does always n terminate but it n terminates one bite",
    "start": "1162720",
    "end": "1170159"
  },
  {
    "text": "after Max L so if you take um if you max out the entire length that you're well",
    "start": "1170159",
    "end": "1176440"
  },
  {
    "text": "told the function to use it will write a n bite behind that Maxum so if you use",
    "start": "1176440",
    "end": "1182679"
  },
  {
    "text": "size off as size of destination buffer as maximum parameter you write a null B",
    "start": "1182679",
    "end": "1188559"
  },
  {
    "text": "bite behind your original buffer and on the x86 calling con or CPU and calling",
    "start": "1188559",
    "end": "1194320"
  },
  {
    "text": "convention you can usually override EBP or the low or B of EBP at that point",
    "start": "1194320",
    "end": "1199559"
  },
  {
    "text": "it's called oneoff or um poison nbte and the entire stack frame will then slide down one function layer outwards so you",
    "start": "1199559",
    "end": "1206960"
  },
  {
    "text": "can basically Supply ESP at that point when you can supply ESP you can supply EIP and you're in trouble again so",
    "start": "1206960",
    "end": "1214559"
  },
  {
    "text": "that's something that happens frequently and um another thing that's nice about sdn cat is it has to deal with Dynamic",
    "start": "1214559",
    "end": "1221919"
  },
  {
    "text": "maxent parameters I mean Str strn copy will always will have or should have a",
    "start": "1221919",
    "end": "1227640"
  },
  {
    "text": "static Max L parameter now s strncat doesn't know how long the string is it's",
    "start": "1227640",
    "end": "1232679"
  },
  {
    "text": "appending to so you have to do some arithmetic on it or calculations on it and that raises the danger of screwing",
    "start": "1232679",
    "end": "1238600"
  },
  {
    "text": "them up and pushing the Maxum parameter to a negative value and as we all know negative values are represented by very",
    "start": "1238600",
    "end": "1244559"
  },
  {
    "text": "very big values in the computer so you'll have a maximum length your of of the string you're pending of like four",
    "start": "1244559",
    "end": "1250880"
  },
  {
    "text": "billion characters which is the long string to aend so um if we consider a code like",
    "start": "1250880",
    "end": "1257080"
  },
  {
    "text": "this an Str Str end cat into a destination buffer um from a source and",
    "start": "1257080",
    "end": "1263679"
  },
  {
    "text": "um well actually I I fumbled here so um this is just a regular thing where we",
    "start": "1263679",
    "end": "1269520"
  },
  {
    "text": "write an extra null bite behind the original buffer so um when we're maxing",
    "start": "1269520",
    "end": "1275279"
  },
  {
    "text": "out this buffer we'll fill up the entire buffer and then s strn cat will n terate off string and write a null bite behind",
    "start": "1275279",
    "end": "1282000"
  },
  {
    "text": "our original buffer so this code is dangerous and um I was talking about",
    "start": "1282000",
    "end": "1289320"
  },
  {
    "text": "Dynamic Maxin values um in this case can anyway well",
    "start": "1289320",
    "end": "1295760"
  },
  {
    "text": "let's just assume that Source One is a relatively long buffer so first off um",
    "start": "1295760",
    "end": "1301600"
  },
  {
    "text": "we'll copy a limited amount of characters into buffer and then we'll append Source two to our original buffer",
    "start": "1301600",
    "end": "1309120"
  },
  {
    "text": "now you see those calculations over there sorry I don't have a laser pointer but um there's the size of buff minus s",
    "start": "1309120",
    "end": "1315480"
  },
  {
    "text": "like string length of source one now Source One is not buffer so Source one can be a very high value so at this",
    "start": "1315480",
    "end": "1321799"
  },
  {
    "text": "point we can push the en entire maxan parameter into the negatives and therefore we'll append a string of",
    "start": "1321799",
    "end": "1328159"
  },
  {
    "text": "arbitrary size with the SR end cat so this has to be well this is one",
    "start": "1328159",
    "end": "1334120"
  },
  {
    "text": "of the more fun things to look at because it happens in a lot of very security conscious code why we're at",
    "start": "1334120",
    "end": "1340320"
  },
  {
    "start": "1340000",
    "end": "1340000"
  },
  {
    "text": "security conscious code this is code written by atack can anybody spot the mistake um the data at CHP pointer DNS",
    "start": "1340320",
    "end": "1347159"
  },
  {
    "text": "label is user Supply and there is a buffer overflow in there so if anybody spots the mistake I'd be",
    "start": "1347159",
    "end": "1355960"
  },
  {
    "text": "happy no",
    "start": "1364640",
    "end": "1367799"
  },
  {
    "text": "one sorry",
    "start": "1375480",
    "end": "1379960"
  },
  {
    "text": "if what is [Music]",
    "start": "1386039",
    "end": "1391890"
  },
  {
    "text": "negative 127 then consider",
    "start": "1392400",
    "end": "1400799"
  },
  {
    "text": "is yeah be yeah okay that's it um congratulations I had nobody in my class",
    "start": "1400799",
    "end": "1407760"
  },
  {
    "text": "well were you in my class uh in the trainings okay because I nobody in my",
    "start": "1407760",
    "end": "1413120"
  },
  {
    "text": "class Get It Anyways congratulations to finding this um this is code from loft's",
    "start": "1413120",
    "end": "1418919"
  },
  {
    "text": "anti- Sniff and basically what happens is that int is assigned value Char is",
    "start": "1418919",
    "end": "1425679"
  },
  {
    "text": "assigned value or is assigned variable and at this point if we have a value of over 127 for the first bite of DNS label",
    "start": "1425679",
    "end": "1433640"
  },
  {
    "text": "then um the highest order bite will be extended all the way through count so you have a really big value or a",
    "start": "1433640",
    "end": "1439919"
  },
  {
    "text": "negative a negative value at this point now if you have a negative value in count then um we can basically make make",
    "start": "1439919",
    "end": "1448080"
  },
  {
    "text": "this check pass because count is negative the string length will be added to it so um we can deduct from the",
    "start": "1448080",
    "end": "1454159"
  },
  {
    "text": "string length of the buffer we already have so we pass this check and then go on to overflow the buffer right",
    "start": "1454159",
    "end": "1460919"
  },
  {
    "text": "here now um cast scrubs are fun because",
    "start": "1460919",
    "end": "1466360"
  },
  {
    "text": "it happens mostly to people that are right in or that are supposed to be writing secure code it happened to Loft it happened to Route the current editor",
    "start": "1466360",
    "end": "1472640"
  },
  {
    "text": "of Frack when you fix gopher D so um if you're looking for stuff in Secure or",
    "start": "1472640",
    "end": "1480080"
  },
  {
    "text": "supposedly secure applications look for cast scups there's been an s s sshd bug",
    "start": "1480080",
    "end": "1485720"
  },
  {
    "text": "on uh bugre week ago or so in 1X versions which was a real subtle cast",
    "start": "1485720",
    "end": "1490880"
  },
  {
    "text": "screw up and um well just tells you that even well",
    "start": "1490880",
    "end": "1497440"
  },
  {
    "text": "audited code can contain cast scrubs did anybody look at that sshd stuff",
    "start": "1497440",
    "end": "1503120"
  },
  {
    "text": "actually it's interesting because um it if I was going to imple like to",
    "start": "1503120",
    "end": "1509120"
  },
  {
    "text": "place a back door in an open source software I'd write code and I'd put a real subtle cast screw up in there and",
    "start": "1509120",
    "end": "1515520"
  },
  {
    "text": "then I get my code added to the CVS tree because like three or four people would be reading it and they'd be missing the point and the code that was exploitable",
    "start": "1515520",
    "end": "1521640"
  },
  {
    "text": "in sshd almost I'm not implying that core SDI added a back door but that code",
    "start": "1521640",
    "end": "1526799"
  },
  {
    "text": "at that point looks more like a constructed vulnerability than a coding",
    "start": "1526799",
    "end": "1531840"
  },
  {
    "text": "screw up and afterwards after this comes out I wouldn't be liable for anything",
    "start": "1531840",
    "end": "1537120"
  },
  {
    "text": "because nobody can prove to me that I'm I'm smarter than I look so um cast scrubs are definitely",
    "start": "1537120",
    "end": "1544080"
  },
  {
    "text": "fun and play with them now everybody knows about format string vulnerabilities by now um they become",
    "start": "1544080",
    "end": "1551000"
  },
  {
    "text": "public Last Summer with the Vu FP sploit they have been around to or available to",
    "start": "1551000",
    "end": "1556039"
  },
  {
    "text": "certain people in the underground for a couple of years before that and uh I assume that everybody is familiar that",
    "start": "1556039",
    "end": "1561600"
  },
  {
    "text": "you can exploit format strings by adding person n characters to the format string anyways um any call any call of",
    "start": "1561600",
    "end": "1570080"
  },
  {
    "text": "the any print F family call is that passes user Supply data as a format string is dangerous and you can Define",
    "start": "1570080",
    "end": "1577760"
  },
  {
    "text": "this as an argument efficiency because well a good a proper properly coded",
    "start": "1577760",
    "end": "1583480"
  },
  {
    "text": "print F call has two arguments the format string and the stuff that's get gets extended in the format string",
    "start": "1583480",
    "end": "1589840"
  },
  {
    "text": "there's no reason ever to only have one argument in a print F unless it's enclosed in double quotes like print F",
    "start": "1589840",
    "end": "1597000"
  },
  {
    "text": "hello world so anytime you have a print F that",
    "start": "1597000",
    "end": "1602720"
  },
  {
    "text": "has only one argument or which lacks one argument and which is not encl one",
    "start": "1602720",
    "end": "1608960"
  },
  {
    "text": "argument is not enclosed in double quote it's",
    "start": "1608960",
    "end": "1612480"
  },
  {
    "text": "dangerous okay um for those is there anybody here who doesn't know assembly okay that's good last time I",
    "start": "1615360",
    "end": "1621679"
  },
  {
    "text": "was holding this speech in Amsterdam there were like three people in my entire room who knew assembly so that",
    "start": "1621679",
    "end": "1626880"
  },
  {
    "text": "was pretty sad thing anyways um when looking at disassembly um one has to",
    "start": "1626880",
    "end": "1632760"
  },
  {
    "text": "identify which arguments are passed to a certain C function and usually if you're looking at the nth argument you have to",
    "start": "1632760",
    "end": "1638320"
  },
  {
    "text": "look for the nth push before the call First argument first push before the call second argument second push before",
    "start": "1638320",
    "end": "1644840"
  },
  {
    "text": "the call and third argument third push before the call so that's just for those",
    "start": "1644840",
    "end": "1651320"
  },
  {
    "text": "of you that are not all that familiar with C calling",
    "start": "1651320",
    "end": "1656559"
  },
  {
    "text": "conventions so this is how a suspicious string copy call looks in the disassembly we have the call to the",
    "start": "1656559",
    "end": "1663039"
  },
  {
    "start": "1657000",
    "end": "1657000"
  },
  {
    "text": "string copy function which has been recognized by Ida by the disassembler as a Target buffer or as a",
    "start": "1663039",
    "end": "1669159"
  },
  {
    "text": "source buffer we do not have a static string we have something that's dynamically generated or generated on",
    "start": "1669159",
    "end": "1674480"
  },
  {
    "text": "the Fly runtime could be user supplied and whever destination buffer which is on the stack which is 400 hex bytes long",
    "start": "1674480",
    "end": "1682399"
  },
  {
    "text": "so this has to be considered dangerous and should be investigated then we have a Sprint F",
    "start": "1682399",
    "end": "1688120"
  },
  {
    "text": "here in the disassembly which targets a static stuff stack buffer of 100 hex bytes and which",
    "start": "1688120",
    "end": "1696120"
  },
  {
    "text": "expands two non-static strings into it using percent s in the format string so",
    "start": "1696120",
    "end": "1703600"
  },
  {
    "text": "this is dangerous as well then there's the s scanf for scanf",
    "start": "1703600",
    "end": "1709480"
  },
  {
    "text": "function call here which um has a format string which contains percent s and",
    "start": "1709480",
    "end": "1716080"
  },
  {
    "text": "which passes the stuff or passes several strings with these person s signs into these stack buffers here so this scanf",
    "start": "1716080",
    "end": "1723440"
  },
  {
    "text": "call has to be considered dangerous as well is anybody keeping track how often I said dangerous",
    "start": "1723440",
    "end": "1730600"
  },
  {
    "text": "today anyways um an strn cpy call which is dangerous as well",
    "start": "1731120",
    "end": "1738159"
  },
  {
    "text": "this one is copying data from a dynamic Source into a stack buffer again and we",
    "start": "1738159",
    "end": "1743480"
  },
  {
    "text": "have a maxand parameter of 4,000 bytes now if our buffer is only 4,000 bytes long no null BTE will be appended to it",
    "start": "1743480",
    "end": "1750360"
  },
  {
    "text": "it will not be null terminated so we look at the stack frame in Ida and we",
    "start": "1750360",
    "end": "1755559"
  },
  {
    "text": "can see that the buffer is only 4,000 bytes long so this would be dangerous as",
    "start": "1755559",
    "end": "1764039"
  },
  {
    "text": "well um then we have an Str cat here which substracts something from the",
    "start": "1764600",
    "end": "1770799"
  },
  {
    "text": "maxand parameter before calling sdrn cat so um if you have an srn cat which",
    "start": "1770799",
    "end": "1776000"
  },
  {
    "text": "substracts something from your maxl parameter you should probably be looking into that as well because perhaps you can push the maxlang into the negative",
    "start": "1776000",
    "end": "1782720"
  },
  {
    "text": "at some point then when it comes to detecting cast scrubs um it's going to be a bit",
    "start": "1782720",
    "end": "1789360"
  },
  {
    "text": "tough as we've seen before they're already well pretty tough to find in the source and they're really really a",
    "start": "1789360",
    "end": "1796360"
  },
  {
    "text": "to find in the disassembly um something that's usually good to be on the lookout for is looking for",
    "start": "1796360",
    "end": "1803799"
  },
  {
    "text": "functions that use size t for memory copying like fgs like strn copy then",
    "start": "1803799",
    "end": "1810840"
  },
  {
    "text": "looking whether the size T parameter the Max L parameter that is being passed um is dynamic is not something hard right",
    "start": "1810840",
    "end": "1819120"
  },
  {
    "text": "like 3,000 bytes and if it's Dynamic you look at all the accesses to this size T",
    "start": "1819120",
    "end": "1825039"
  },
  {
    "text": "parameter beforehand so if it was loaded with a move S6 instruction move with sign extend then that's dangerous as",
    "start": "1825039",
    "end": "1832480"
  },
  {
    "text": "we've seen before in The Loft code then or other otherwise if it's being subtracted from then it's dangerous as",
    "start": "1832480",
    "end": "1840000"
  },
  {
    "text": "well because we can perhaps push it into the negatives so um cast scrubs are really tough to find",
    "start": "1840000",
    "end": "1847320"
  },
  {
    "text": "and if you find one be happy and applaud yourself and take a vacation for a week somewhere really nice where there's no",
    "start": "1847320",
    "end": "1852360"
  },
  {
    "text": "computer around um farm and string vulnerabilities they are really easy to find in the source and they will not be",
    "start": "1852360",
    "end": "1857960"
  },
  {
    "text": "around for long so let's all enjoy them while they're here and um in the source they're very",
    "start": "1857960",
    "end": "1863559"
  },
  {
    "text": "easy to spot due to the fact that we can immediately see does this print F family function call have an argument",
    "start": "1863559",
    "end": "1869399"
  },
  {
    "text": "deficiency or not in the disassembly we usually have well we can pretty much",
    "start": "1869399",
    "end": "1875840"
  },
  {
    "text": "estimate whether a call has an argument deficiency or not at least an unoptimized code because after after the",
    "start": "1875840",
    "end": "1882960"
  },
  {
    "text": "call after the call we have the C stack correction where the compiler corrects",
    "start": "1882960",
    "end": "1888480"
  },
  {
    "text": "the stack again I mean it pushes stuff on the stack and after the call it has to take that stuff off the stack again so it adds the number of bytes the",
    "start": "1888480",
    "end": "1895559"
  },
  {
    "text": "parameters used up to the stack after the call so um we can identify argument",
    "start": "1895559",
    "end": "1902440"
  },
  {
    "text": "deficiencies by looking at the stack correction now in this case we have a",
    "start": "1902440",
    "end": "1907639"
  },
  {
    "text": "Sprint F Sprint F has to have three parameters to be correct Target buffer",
    "start": "1907639",
    "end": "1913440"
  },
  {
    "text": "format string data that is being expanded into the format string so um we have only two double words here",
    "start": "1913440",
    "end": "1922440"
  },
  {
    "text": "so this is an argument efficiency and we have a form string that is dynamic instead of static so it's not enclosed",
    "start": "1922440",
    "end": "1928480"
  },
  {
    "text": "in square brackets in the in the source so it's dangerous now um does anybody have a",
    "start": "1928480",
    "end": "1935720"
  },
  {
    "start": "1933000",
    "end": "1933000"
  },
  {
    "text": "watch I don't know whether I'm going through this too fast 313 oh god well we have to chat a",
    "start": "1935720",
    "end": "1945080"
  },
  {
    "text": "bit later like at the end of this anyways um I'm going after Netscape",
    "start": "1945080",
    "end": "1950440"
  },
  {
    "text": "Enterprise as HTML dll I had a buffer overflow in that one last fall which I",
    "start": "1950440",
    "end": "1956360"
  },
  {
    "text": "presented in Amsterdam and um basically I was too lazy to get another Target and",
    "start": "1956360",
    "end": "1962320"
  },
  {
    "text": "the shtml D was already disassembled on my computer and this is a really small computer and has 32 megabytes of ram so",
    "start": "1962320",
    "end": "1968799"
  },
  {
    "text": "disassembly takes forever and ever so I decided just to use what I already have plus the shtml code has been WR that's",
    "start": "1968799",
    "end": "1977120"
  },
  {
    "text": "well it's been written it's been added code in the 4.0 version and new code is",
    "start": "1977120",
    "end": "1983080"
  },
  {
    "text": "bad code secondly um well I've worked with it before and they had a simple buffer overflow in a Sprint F statement",
    "start": "1983080",
    "end": "1990120"
  },
  {
    "text": "it was so simple that I was pretty sure I'd find another thing and this shtml DL",
    "start": "1990120",
    "end": "1995639"
  },
  {
    "text": "was written shortly before format St boxs were published and we all know how close Source works if it a well if the",
    "start": "1995639",
    "end": "2001919"
  },
  {
    "text": "customer is not complaining we're not going to audit our code so we can be pretty sure that this that has never",
    "start": "2001919",
    "end": "2007559"
  },
  {
    "text": "been audited for format string bugs so um well I I looked at the disassembly",
    "start": "2007559",
    "end": "2015320"
  },
  {
    "text": "and inside Netscape Enterprise there's an internal logging function called in log error which is basically a wrapper",
    "start": "2015320",
    "end": "2021799"
  },
  {
    "text": "around vprintf and which will write error messages to the error log pretty",
    "start": "2021799",
    "end": "2027200"
  },
  {
    "text": "straightforward um it is a Sprint of like function and uh first thing when we're looking at it is figuring out how",
    "start": "2027200",
    "end": "2034480"
  },
  {
    "text": "much stack correction we actually need like what what would be proper usage of this function and what is",
    "start": "2034480",
    "end": "2040399"
  },
  {
    "text": "not we can see in this example that um we have two format characters in The Format string so we have eight bytes in",
    "start": "2040399",
    "end": "2047720"
  },
  {
    "text": "total on the stack as format like as parameters to the format string now we only need one",
    "start": "2047720",
    "end": "2054480"
  },
  {
    "text": "format string character to have like good code we don't have need to have several of them but we have to have a",
    "start": "2054480",
    "end": "2060200"
  },
  {
    "text": "real format string with one for character in there so we can calculate",
    "start": "2060200",
    "end": "2065599"
  },
  {
    "text": "that the correct stack correct in this case minus 4 is the stack correction",
    "start": "2065599",
    "end": "2070760"
  },
  {
    "text": "that we need so 1 C minus 4 is the 18 Hecks that's the correct number of",
    "start": "2070760",
    "end": "2077638"
  },
  {
    "text": "arguments or the correct stack correction for an inlock error call is that clear to",
    "start": "2077639",
    "end": "2083158"
  },
  {
    "text": "everybody anything unclear no is my audience talking to",
    "start": "2083159",
    "end": "2089679"
  },
  {
    "text": "me no all right you're SC us n you were",
    "start": "2089679",
    "end": "2096040"
  },
  {
    "text": "scaring me before anyways back to business um now when",
    "start": "2096040",
    "end": "2103760"
  },
  {
    "text": "looking through the S HTML dll I found this nice construct where we have um an",
    "start": "2103760",
    "end": "2110200"
  },
  {
    "text": "argument efficiency I mean 14 is less than 18 everybody can like understand that and then we have a dynamic format",
    "start": "2110200",
    "end": "2118480"
  },
  {
    "text": "string so I looked like traced the code backwards and looked where this format string was being constructed and in this",
    "start": "2121160",
    "end": "2127320"
  },
  {
    "text": "code where there is basically a statically compiled string copy the rep eove SD rep eove SB and so on and or it",
    "start": "2127320",
    "end": "2135599"
  },
  {
    "text": "copies or is it a M Copy it's probably a M Copy in this case anyways um it's copying the string not a valid SSI tag",
    "start": "2135599",
    "end": "2143119"
  },
  {
    "text": "column into our buffer or into the buffer that is being passed as format string later on then I went a bit",
    "start": "2143119",
    "end": "2149480"
  },
  {
    "text": "further to see what happens and um I found this which is basically some um C++ safe string class",
    "start": "2149480",
    "end": "2158760"
  },
  {
    "text": "code which will ensure that the buffer we're coping to is large enough in order to prevent buffer overflows so they're",
    "start": "2158760",
    "end": "2165599"
  },
  {
    "text": "trying to prevent buffer overflows here and um well have this string class size",
    "start": "2165599",
    "end": "2171880"
  },
  {
    "text": "checking and then they are pending user Supply data so at this point I knew this was",
    "start": "2171880",
    "end": "2178240"
  },
  {
    "text": "vulnerable and this was vulnerable to a n nonvalid SSI tag because they have this error message not a valid SSI tag",
    "start": "2178240",
    "end": "2184560"
  },
  {
    "text": "double dot or column so um I start creating an HTML file a small one this",
    "start": "2184560",
    "end": "2190800"
  },
  {
    "text": "one here um which basically is just a small shtml file which has an invalid",
    "start": "2190800",
    "end": "2198599"
  },
  {
    "text": "invalid SSI tag of s and a couple of format string characters afterwards um which are just they're not used to",
    "start": "2198599",
    "end": "2205079"
  },
  {
    "text": "exploit anything they'll just print out the stack at that point so um create this file enabled Netscape Enterprise to",
    "start": "2205079",
    "end": "2212319"
  },
  {
    "text": "parel this file and um",
    "start": "2212319",
    "end": "2218680"
  },
  {
    "text": "well you have to wait a second for my okay and then I parsed requested the file from the web server it was pared I",
    "start": "2218800",
    "end": "2224920"
  },
  {
    "text": "looked at the arrow log and bingo we have a nice format string bug which is exploitable as soon as you can write to",
    "start": "2224920",
    "end": "2231880"
  },
  {
    "text": "an shtml file or to a file that's been parsed by the shtml parser so",
    "start": "2231880",
    "end": "2239079"
  },
  {
    "text": "um that was fun I contacted ncape about this um the last time I contacted them",
    "start": "2239359",
    "end": "2245359"
  },
  {
    "text": "about about for overflow it took half year to get back to me and this time they were really quick 3 days later they",
    "start": "2245359",
    "end": "2251440"
  },
  {
    "text": "gave me binary which was fixed apparently and which had full debug info in there which was very nice for me as",
    "start": "2251440",
    "end": "2257560"
  },
  {
    "text": "well and um they've been having this fixed binary for eight weeks now and",
    "start": "2257560",
    "end": "2262839"
  },
  {
    "text": "they say they're not ready to put the fix up on the web page so please don't publish this yet so I assume that you're",
    "start": "2262839",
    "end": "2269839"
  },
  {
    "text": "all Security Professionals you're not going to do anything stupid with this so this is disclosed to a small audience it",
    "start": "2269839",
    "end": "2276160"
  },
  {
    "text": "will be on back track as soon as Netscape decides that they've had enough time well not doing anything and leaving",
    "start": "2276160",
    "end": "2281800"
  },
  {
    "text": "the executable there another funny thing about Netscape is um I told them that",
    "start": "2281800",
    "end": "2287680"
  },
  {
    "text": "they have this problem in multiple instances they have multiple calls to this in log error call which are",
    "start": "2287680",
    "end": "2293280"
  },
  {
    "text": "problematic which I didn't look at because I got my exploit and they should fix all of them when I looked at the",
    "start": "2293280",
    "end": "2299440"
  },
  {
    "text": "fixed version they sent me they fixed one so um well that's the way close",
    "start": "2299440",
    "end": "2305280"
  },
  {
    "text": "Source seems to work anyways I'm just trying to um waste some time here right now because this is basically the first",
    "start": "2305280",
    "end": "2311440"
  },
  {
    "text": "half of my presentation um are there any questions or anything you people want to talk",
    "start": "2311440",
    "end": "2317440"
  },
  {
    "text": "about or yeah okay",
    "start": "2317440",
    "end": "2323680"
  },
  {
    "text": "so I passed I passed user in",
    "start": "2323680",
    "end": "2329560"
  },
  {
    "text": "direct you say it's Expos what can you do with it you can print you can execute arbitrary code on",
    "start": "2329560",
    "end": "2336880"
  },
  {
    "text": "the server how do you do that okay um actually it's a Pity I don't have my",
    "start": "2336880",
    "end": "2342560"
  },
  {
    "text": "presentation I did a speech on that in uh Bin on new years anyways um the trick",
    "start": "2342560",
    "end": "2348359"
  },
  {
    "text": "is that if you have a well we we'll take a sprintf call which passes user Supply",
    "start": "2348359",
    "end": "2355119"
  },
  {
    "text": "data and now you supply this buffer and then you can basically do you know about",
    "start": "2355119",
    "end": "2360960"
  },
  {
    "text": "the person n character person n will write the length of the string that has been written sof far or that would have",
    "start": "2360960",
    "end": "2367480"
  },
  {
    "text": "been written so far into a location which has been given in the in the print",
    "start": "2367480",
    "end": "2373800"
  },
  {
    "text": "F call so um basically what you do is you start popping the stack by doing",
    "start": "2373800",
    "end": "2380040"
  },
  {
    "text": "something like percent um LX for example which will pop four bites of the stack you walk upwards the stack until you're",
    "start": "2380040",
    "end": "2386839"
  },
  {
    "text": "in your in your own buffer and then you do something like um percent any number",
    "start": "2386839",
    "end": "2392319"
  },
  {
    "text": "you want LX you buffer refer your string to",
    "start": "2392319",
    "end": "2397839"
  },
  {
    "text": "the bite you want to write and then you use the person n to write one bite or",
    "start": "2397839",
    "end": "2403280"
  },
  {
    "text": "write uh like word at once and will write arbitrary data into arbitrary",
    "start": "2403280",
    "end": "2409240"
  },
  {
    "text": "memory memory locations what you do on Linux normally is you overwrite a pointer in the go in the global offer",
    "start": "2409240",
    "end": "2415640"
  },
  {
    "text": "table where all the dynamically linked functions are put in and next time that function get gets called your code gets",
    "start": "2415640",
    "end": "2421520"
  },
  {
    "text": "controlled under NT the import table is usually right protected so you can't do that but you can do some pretty nifty",
    "start": "2421520",
    "end": "2427079"
  },
  {
    "text": "stuff with overwriting exception handlers in memory or trying to overwrite stack addresses which is not very stable but works sometimes so um it",
    "start": "2427079",
    "end": "2435960"
  },
  {
    "text": "is exploitable I mean have you looked at the W FTP exploit okay well format strings are",
    "start": "2435960",
    "end": "2442359"
  },
  {
    "text": "exploitable and um actually I think they're easier to exploit than buffer overflows because you can write to any",
    "start": "2442359",
    "end": "2447520"
  },
  {
    "text": "location in memory and not just to the stuff behind your buffer and even once people Implement um ex non-executable",
    "start": "2447520",
    "end": "2453800"
  },
  {
    "text": "Pages format string box will still remain dangerous because you can manipulate variables inside the the",
    "start": "2453800",
    "end": "2460560"
  },
  {
    "text": "application so like a buen bleen is he authenticated can be overwritten with true so why you cannot execute code",
    "start": "2460560",
    "end": "2467400"
  },
  {
    "text": "anymore you can still manipulate a lot so format string bugs are definitely fun any other questions or any other way",
    "start": "2467400",
    "end": "2474599"
  },
  {
    "text": "to waste our time now",
    "start": "2474599",
    "end": "2482440"
  },
  {
    "text": "sorry on",
    "start": "2485240",
    "end": "2491440"
  },
  {
    "text": "yeah the offset that you talking",
    "start": "2492240",
    "end": "2497160"
  },
  {
    "text": "about 18 mention the",
    "start": "2497800",
    "end": "2503680"
  },
  {
    "text": "offset uh I'm not sure what exactly you speaking about can I have a look at that",
    "start": "2506599",
    "end": "2513640"
  },
  {
    "text": "so SL an example OFW 41 s HTML okay is conru a",
    "start": "2513640",
    "end": "2520440"
  },
  {
    "text": "second like this right here okay like you're saying this form string Dynamic yeah um like where I can't see okay",
    "start": "2520440",
    "end": "2529160"
  },
  {
    "text": "where do I input my exp where you put your exploit on that",
    "start": "2529160",
    "end": "2535560"
  },
  {
    "text": "code um well wait a",
    "start": "2535560",
    "end": "2540400"
  },
  {
    "text": "second find I well the exp goes into this the person",
    "start": "2542400",
    "end": "2548200"
  },
  {
    "text": "LX and stuff the buffer we have after the sick is the buffer that our exploit",
    "start": "2548200",
    "end": "2553839"
  },
  {
    "text": "goes into so um if we can actually well if if we can print the stack as we could",
    "start": "2553839",
    "end": "2561280"
  },
  {
    "text": "in this example we can start doing some other stuff like trying to pop from the stack getting into our own buffer and",
    "start": "2561280",
    "end": "2567079"
  },
  {
    "text": "then exploiting so basically your shell code and everything or not not necessarily the Shell Code but the",
    "start": "2567079",
    "end": "2572960"
  },
  {
    "text": "addresses you're willing to write to and the format strings that actually exploit everything thing would go into this string which is right after this S",
    "start": "2572960",
    "end": "2582440"
  },
  {
    "text": "I did that answer your question",
    "start": "2582640",
    "end": "2586920"
  },
  {
    "text": "or all right anything else okay your",
    "start": "2591160",
    "end": "2598000"
  },
  {
    "text": "you um for debugging my exploits yes but I'm doing a lot of crossplatform work",
    "start": "2598040",
    "end": "2604599"
  },
  {
    "text": "I'm looking at spark disassembly a lot at uh I've looked at a few embedded things and",
    "start": "2604599",
    "end": "2611200"
  },
  {
    "text": "um well I use ADB for debugging on sun I use GDB for debugging on Linux and I use",
    "start": "2611200",
    "end": "2617960"
  },
  {
    "text": "soft eyes on on NT so um when you're actually looking into exploiting stuff",
    "start": "2617960",
    "end": "2624079"
  },
  {
    "text": "you'll need a debugger but while looking for the suspicious stuff you don't necessarily need it yet so any other",
    "start": "2624079",
    "end": "2631359"
  },
  {
    "text": "questions yeah",
    "start": "2631359",
    "end": "2638079"
  },
  {
    "text": "usually sorry",
    "start": "2639240",
    "end": "2643680"
  },
  {
    "text": "usually for example yeah okay soat most of",
    "start": "2644319",
    "end": "2650480"
  },
  {
    "text": "the overlow by all the",
    "start": "2650480",
    "end": "2656359"
  },
  {
    "text": "and there other ways Plus Code well there's a lot of C++",
    "start": "2660960",
    "end": "2669079"
  },
  {
    "text": "code that still calls Legacy functions in some way and um well there's there's",
    "start": "2669079",
    "end": "2675760"
  },
  {
    "text": "stuff in C++ usually which is not a basic string overflow but you can have like um array overflows where you",
    "start": "2675760",
    "end": "2681280"
  },
  {
    "text": "overflow an array of anything like double words or whatever so um at that point it usually comes down to supplying",
    "start": "2681280",
    "end": "2687640"
  },
  {
    "text": "wrong values for the C++ code to copy um it there isn't like standard",
    "start": "2687640",
    "end": "2693760"
  },
  {
    "text": "functions in C++ that are immediately broken but a lot of C++ code I mean even C++ uses",
    "start": "2693760",
    "end": "2700920"
  },
  {
    "text": "printf so um and if you can overwrite the code like overwrite allocated",
    "start": "2700920",
    "end": "2706880"
  },
  {
    "text": "buffers Malo buffers at that point you can write to arbitrary locations and memory as well so",
    "start": "2706880",
    "end": "2713319"
  },
  {
    "text": "um C++ is a good thing but this shtml D is a good example where C like",
    "start": "2713319",
    "end": "2719319"
  },
  {
    "text": "supposedly safe programming breaks the neck of the program in the end because they break the inter operability with",
    "start": "2719319",
    "end": "2725640"
  },
  {
    "text": "leg code at this point if they had used Straight C and they had been aware of",
    "start": "2725640",
    "end": "2731000"
  },
  {
    "text": "everything they wouldn't have done the format string bar here and the format string bug basically came around because",
    "start": "2731000",
    "end": "2737079"
  },
  {
    "text": "um their great standard string class was doing all the formatting for them so",
    "start": "2737079",
    "end": "2742200"
  },
  {
    "text": "they were just passing the already formatted string as format string any other",
    "start": "2742200",
    "end": "2749000"
  },
  {
    "text": "questions no well um what time is it",
    "start": "2749000",
    "end": "2756839"
  },
  {
    "text": "330 3:30 um should we go into the second",
    "start": "2756839",
    "end": "2762599"
  },
  {
    "text": "half already or should we take a break right",
    "start": "2762599",
    "end": "2766760"
  },
  {
    "text": "now okay so we'll take a break right",
    "start": "2769599",
    "end": "2774119"
  },
  {
    "text": "now",
    "start": "2784800",
    "end": "2787800"
  },
  {
    "text": "in a big application like for example uh in imil which isn't all that",
    "start": "2839040",
    "end": "2844720"
  },
  {
    "text": "big you have a whole lot of Cs to Sprint if",
    "start": "2844720",
    "end": "2849760"
  },
  {
    "text": "in this case we have 1223 which is not that much but um it's",
    "start": "2849760",
    "end": "2856760"
  },
  {
    "text": "a bit annoying to go every one of th those and they have like percent D in The Format string or person X in the",
    "start": "2856760",
    "end": "2863160"
  },
  {
    "text": "format string and they're not really interesting so um I'll go over a script",
    "start": "2863160",
    "end": "2868839"
  },
  {
    "start": "2867000",
    "end": "2867000"
  },
  {
    "text": "that does check for these criteria first off it checks whether or it should check whether the string",
    "start": "2868839",
    "end": "2875079"
  },
  {
    "text": "expands data into a buffer using person s then it should look whether this call",
    "start": "2875079",
    "end": "2882599"
  },
  {
    "text": "targets a stack buffer furthermore it should look out for argument deficiencies in order to find format",
    "start": "2882599",
    "end": "2889240"
  },
  {
    "text": "bugs and then it should check if an argument efficiency is found whether the",
    "start": "2889240",
    "end": "2895040"
  },
  {
    "text": "format string is dynamic or static so those are the criteria the",
    "start": "2895040",
    "end": "2900440"
  },
  {
    "text": "script will be on the lookout for and um I'll just go over the code",
    "start": "2900440",
    "end": "2906280"
  },
  {
    "text": "and then we'll have a demonstration of the script running um first off in order to",
    "start": "2906280",
    "end": "2913880"
  },
  {
    "text": "actually check whether the stack correction of a printf call is right or is wrong like it's big enough or too",
    "start": "2913880",
    "end": "2920319"
  },
  {
    "text": "small we have to retrieve the stack correction somehow from the binary so this is an this function in Ida's",
    "start": "2920319",
    "end": "2927200"
  },
  {
    "text": "internal scripting language which is called IDC which will basically you you feed it the pointer to the call which",
    "start": "2927200",
    "end": "2934480"
  },
  {
    "text": "you're looking at and it will then start tracing the code from on from there on",
    "start": "2934480",
    "end": "2939839"
  },
  {
    "text": "until it finds an at ESP instruction so as soon as it finds an add ESP instruction it will return the",
    "start": "2939839",
    "end": "2947559"
  },
  {
    "text": "value that has been",
    "start": "2947559",
    "end": "2950640"
  },
  {
    "text": "added any questions about this code no",
    "start": "2956359",
    "end": "2962960"
  },
  {
    "text": "okay um then the second thing I had to write is this um get binary string well",
    "start": "2962960",
    "end": "2969920"
  },
  {
    "text": "the problem with Ida's internal scripting language is that it doesn't have any function that allows me to",
    "start": "2969920",
    "end": "2976040"
  },
  {
    "text": "retrieve a string of bytes from the executable so when we're looking at the format string we have to somehow",
    "start": "2976040",
    "end": "2983040"
  },
  {
    "text": "retrieve that and to put it into an IDC variable an IDC string in order to do checks on it like check whether it",
    "start": "2983040",
    "end": "2989160"
  },
  {
    "text": "contains a present s or even check whether it's dynamic or not so this short function here will basically read",
    "start": "2989160",
    "end": "2995680"
  },
  {
    "text": "out the string out of a binary by first creating an empty string and then",
    "start": "2995680",
    "end": "3001480"
  },
  {
    "text": "reading one bite at a time and then looping that until we find either a null",
    "start": "3001480",
    "end": "3007319"
  },
  {
    "text": "bite or an FF and then I will use um idc's internal sprintf like function to",
    "start": "3007319",
    "end": "3013559"
  },
  {
    "text": "append the single bite we just read to the string we already have with that person s person",
    "start": "3013559",
    "end": "3019119"
  },
  {
    "text": "C so that code clear well because FF is something that",
    "start": "3019119",
    "end": "3026839"
  },
  {
    "text": "is probably not a valid string it's just something that happened to me frequently that when I was looking",
    "start": "3026839",
    "end": "3033200"
  },
  {
    "text": "at strings that were not static but I had to well was reading in arbitrary",
    "start": "3033200",
    "end": "3039640"
  },
  {
    "text": "memory and um once you hit FF you're pretty safe that this is not a valid string you could probably add other",
    "start": "3039640",
    "end": "3045440"
  },
  {
    "text": "non-display displayable characters to do to do a good script here would be to check whether the bite is within the",
    "start": "3045440",
    "end": "3051640"
  },
  {
    "text": "range of displayable characters but I was too lazy to do that",
    "start": "3051640",
    "end": "3057200"
  },
  {
    "text": "so I will probably clutter up the code as well and would not make anything clearer",
    "start": "3057200",
    "end": "3062880"
  },
  {
    "text": "here then um the next thing we have to do is we have to write a function that ret retrieves the nth argument to a",
    "start": "3062880",
    "end": "3072680"
  },
  {
    "text": "call so when we're looking at for examp for the format string in a Sprint F function we have to retrieve the second",
    "start": "3072680",
    "end": "3078760"
  },
  {
    "text": "argument first argument is the destination buffer second argument is the for the format string um um we have",
    "start": "3078760",
    "end": "3086359"
  },
  {
    "text": "to have a function that locates this particular value now um usually we look",
    "start": "3086359",
    "end": "3091880"
  },
  {
    "text": "for the nth push before a call I explained that before um then we have to check whether",
    "start": "3091880",
    "end": "3097799"
  },
  {
    "text": "a register or an immediate value was pushed now if a register was pushed we",
    "start": "3097799",
    "end": "3102960"
  },
  {
    "text": "have to find out where this register was loaded and what it was loaded with and then return that",
    "start": "3102960",
    "end": "3108040"
  },
  {
    "text": "value and um in case in case an immediate value was pushed like an",
    "start": "3108040",
    "end": "3113160"
  },
  {
    "text": "offset to a string we just return that Val value so this is very very simple argument",
    "start": "3113160",
    "end": "3120720"
  },
  {
    "text": "tunneler um I've written a few more advanced ones in IDC which do full",
    "start": "3120720",
    "end": "3125760"
  },
  {
    "text": "recursion and so on that was when I always got the IDC language to crash because originally it wouldn't support",
    "start": "3125760",
    "end": "3131000"
  },
  {
    "text": "more than six layers of recursion and when we looking at large trees then well six layers is nothing and main thing is",
    "start": "3131000",
    "end": "3138599"
  },
  {
    "text": "that this code will not Trace back if an argument to a call has been an argument",
    "start": "3138599",
    "end": "3145000"
  },
  {
    "text": "to the function calling it so if you have a function that gets past the pointer and that function is using a",
    "start": "3145000",
    "end": "3150559"
  },
  {
    "text": "string copy to copy into that point into the buffer at the point it was passed this script will just give up and do",
    "start": "3150559",
    "end": "3156359"
  },
  {
    "text": "nothing so it's just checking for stuff that's actually being generated in the",
    "start": "3156359",
    "end": "3162640"
  },
  {
    "text": "function so um starts out by tracing the code backwards Until the End push is",
    "start": "3162640",
    "end": "3168400"
  },
  {
    "text": "called or is found um in this case we have n which is the number of argument",
    "start": "3168400",
    "end": "3174160"
  },
  {
    "text": "we're getting so we're tracing upwards one instruction at a time and each time we find a push we decrement m n and as",
    "start": "3174160",
    "end": "3180680"
  },
  {
    "text": "soon as n is zero we know that we have the push we need from that push",
    "start": "3180680",
    "end": "3186599"
  },
  {
    "text": "on um we get the operant type of the push and if it's a register the operant",
    "start": "3186599",
    "end": "3193760"
  },
  {
    "text": "type will be one so um if it is a register then we",
    "start": "3193760",
    "end": "3199200"
  },
  {
    "text": "trace the code backwards from where we are at until the last time the register was the first oper to an assembly",
    "start": "3199200",
    "end": "3206680"
  },
  {
    "text": "instruction now we all know Intel syntax says that the destination of an assembly",
    "start": "3206680",
    "end": "3212200"
  },
  {
    "text": "instruction is always the first operant so well as soon as we have any",
    "start": "3212200",
    "end": "3218640"
  },
  {
    "text": "assembly instruction that has our register as first operant we know it's being loaded with a value this code just does",
    "start": "3218640",
    "end": "3226640"
  },
  {
    "text": "that and uh then Returns the value we found and if it wasn't register in the",
    "start": "3226640",
    "end": "3231680"
  },
  {
    "text": "first place we return the value that was pushed so that code clear to every clear",
    "start": "3231680",
    "end": "3237200"
  },
  {
    "text": "to everybody",
    "start": "3237200",
    "end": "3242280"
  },
  {
    "text": "okay sorry this this code is not doing conditional execution backtracking I've",
    "start": "3242720",
    "end": "3248799"
  },
  {
    "text": "have I have a few very very freaking complex scripts that I can't read myself anymore which um basically trace the",
    "start": "3248799",
    "end": "3256119"
  },
  {
    "text": "code flow backwards and then going get if they get into Infinite Loop they'll have to keep track which places they",
    "start": "3256119",
    "end": "3261520"
  },
  {
    "text": "already visited gets really messy and really ugly at that point and you're probably out of your league if you're",
    "start": "3261520",
    "end": "3267200"
  },
  {
    "text": "trying to do that in IDC I have a bunch of IDC scripts where which were very ambitious to start with and they got",
    "start": "3267200",
    "end": "3273720"
  },
  {
    "text": "more complex and complex and complex until I figured out I needed structures IDC doesn't have structures so I",
    "start": "3273720",
    "end": "3279520"
  },
  {
    "text": "implemented structures in IDC by conting strings I know I'm insane yes um anyways",
    "start": "3279520",
    "end": "3286880"
  },
  {
    "text": "uh that got so unman unmanageable that I decided to restart the entire thing and do it as an Ida plugin with an Ida",
    "start": "3286880",
    "end": "3293480"
  },
  {
    "text": "plugin you get full C++ structure structures link list trees all the stuff that you want and for complex analysis",
    "start": "3293480",
    "end": "3300440"
  },
  {
    "text": "scripts will not do but scripts are very nice because they take next to no time to write so if you're auditing and",
    "start": "3300440",
    "end": "3307640"
  },
  {
    "text": "building the tool you're using for auditing takes longer than auditing then you will not build that tool but if",
    "start": "3307640",
    "end": "3313280"
  },
  {
    "text": "scripting takes like 10 minutes and saves you 4 hours then you'll script so um well main point is that you",
    "start": "3313280",
    "end": "3323119"
  },
  {
    "text": "can go go into a lot of Det detail when it comes to automatic analysis there are certain people with who have a lot of",
    "start": "3323119",
    "end": "3329559"
  },
  {
    "text": "time on their hand and a lot of funding from somewhere who actually have tools that do very complex analysis of",
    "start": "3329559",
    "end": "3334839"
  },
  {
    "text": "binaries and um this is just an example that every one of us can do the same",
    "start": "3334839",
    "end": "3340319"
  },
  {
    "text": "thing if this gets you nosy you'll well you can start writing plugins in Ida",
    "start": "3340319",
    "end": "3345559"
  },
  {
    "text": "problem with plugins is you get 15 header files no documentation and um you're on your own it's fun nonetheless",
    "start": "3345559",
    "end": "3352400"
  },
  {
    "text": "so if you're going to go into complex St like stuff like argument backtracking and um while tracing back the entire",
    "start": "3352400",
    "end": "3359799"
  },
  {
    "text": "call tree and reconstructing well where what argument is accessed you shouldn't be using the",
    "start": "3359799",
    "end": "3366319"
  },
  {
    "text": "scripting language now um this is the sprintf auditing call or the sprintf auditing",
    "start": "3366319",
    "end": "3372480"
  },
  {
    "text": "function it's basically a function which you feed the a particular sprintf call",
    "start": "3372480",
    "end": "3379680"
  },
  {
    "text": "and it will then evaluate the danger of that Sprint of call um first off it starts by cleaning",
    "start": "3379680",
    "end": "3386119"
  },
  {
    "text": "up the arguments you given you give it because usually you'll pass something like like offset whatever to it or it'll",
    "start": "3386119",
    "end": "3394079"
  },
  {
    "text": "pass off wait wait a second no this this code sorry I screwed up this code will",
    "start": "3394079",
    "end": "3399720"
  },
  {
    "text": "clean up the arguments um the format string arguments because if you're pushing a pointer to the format string",
    "start": "3399720",
    "end": "3407200"
  },
  {
    "text": "Ida will put the string offset in front of it so what this line is doing it's just stripping the the word offset out",
    "start": "3407200",
    "end": "3413559"
  },
  {
    "text": "of there so um then the script gets the stack",
    "start": "3413559",
    "end": "3419920"
  },
  {
    "text": "correction of our sprintf call and then Compares it to a lower like to the value",
    "start": "3419920",
    "end": "3425760"
  },
  {
    "text": "of 12 which is the correct correction for a sprintf call and um if we actually",
    "start": "3425760",
    "end": "3431680"
  },
  {
    "text": "do have an argument deficiency it will try to um check how long the format",
    "start": "3431680",
    "end": "3437760"
  },
  {
    "text": "string is now the smallest lered format string is two bytes which is person",
    "start": "3437760",
    "end": "3444559"
  },
  {
    "text": "something or um I don't know anyways when assuming the format string is smaller than two",
    "start": "3444559",
    "end": "3452039"
  },
  {
    "text": "bytes then we'll assume that it's not a format string but something that's dynamically",
    "start": "3452039",
    "end": "3457079"
  },
  {
    "text": "generated so in this case um we're going to put out a message we have a format",
    "start": "3457079",
    "end": "3463440"
  },
  {
    "text": "string problem here uh the slide is skipping over that but we'll demonstrate that in a minute so um the second thing",
    "start": "3463440",
    "end": "3472000"
  },
  {
    "text": "the script will do is it will look for a percent s in the format string by using S strr S strr and if a person s is found",
    "start": "3472000",
    "end": "3480760"
  },
  {
    "text": "it will look whether the target buffer is a stack variable now this is all very cheap string matching in Ida this is not",
    "start": "3480760",
    "end": "3487520"
  },
  {
    "text": "checking for heat buffers this is not checking for Malo buffers this is just checking for stack buffers so again it's",
    "start": "3487520",
    "end": "3493680"
  },
  {
    "text": "not a very in-depth analysis but it's getting the job done to a certain degree and personally I'm happy as soon as I",
    "start": "3493680",
    "end": "3499880"
  },
  {
    "text": "found one exploit I don't need now when I'm looking at binaries I don't need to secure them I need to break them so it's",
    "start": "3499880",
    "end": "3506680"
  },
  {
    "text": "okay if I miss a couple of more obscure problems as long as I find one so um I don't don't really care that",
    "start": "3506680",
    "end": "3515039"
  },
  {
    "text": "much about having a great accuracy now um if these this condition",
    "start": "3515039",
    "end": "3520280"
  },
  {
    "text": "these conditions are met then we'll put out a message hey we have an overflow problem here please look in this so this",
    "start": "3520280",
    "end": "3527160"
  },
  {
    "text": "is the entire Sprint have auditing script now or the main function which will start by asking the",
    "start": "3527160",
    "end": "3533640"
  },
  {
    "text": "user for an address whether the sprintf call is located and then it'll go through um",
    "start": "3533640",
    "end": "3540240"
  },
  {
    "text": "once for each call to the sprintf location it will call the audit Sprint F",
    "start": "3540240",
    "end": "3545400"
  },
  {
    "text": "function and after that has been done it will repeat the same process for all data references to the spr a function so",
    "start": "3545400",
    "end": "3552240"
  },
  {
    "text": "if you have an indirect call it'll pass through all these calls as well any questions concerning the code",
    "start": "3552240",
    "end": "3559079"
  },
  {
    "text": "I've presented so far no okay we can have a short demon",
    "start": "3559079",
    "end": "3564839"
  },
  {
    "text": "ation right now um now normally we'd have to go into",
    "start": "3564839",
    "end": "3571720"
  },
  {
    "text": "imail and look at every single sprintf call and see",
    "start": "3571720",
    "end": "3577319"
  },
  {
    "text": "whether the format string contains a present s or whether it has an argument efficiency now um we're not going to do",
    "start": "3577319",
    "end": "3584359"
  },
  {
    "text": "that we're just going to take our script it's a slow box please excuse",
    "start": "3584359",
    "end": "3593038"
  },
  {
    "text": "that our script will ask us for an",
    "start": "3593640",
    "end": "3599640"
  },
  {
    "text": "address we feed it an an address and then it will",
    "start": "3599640",
    "end": "3605000"
  },
  {
    "text": "run and put out all the suspicious calls and their addresses and now we can have a look at",
    "start": "3605000",
    "end": "3611640"
  },
  {
    "text": "every single suspicious call that it put out and evaluate whether this this call",
    "start": "3611640",
    "end": "3616720"
  },
  {
    "text": "was dangerous or not is that clear to everybody okay all right um what time is",
    "start": "3616720",
    "end": "3625359"
  },
  {
    "text": "it right now 5 4 5 to 4 so are we going to take a",
    "start": "3625359",
    "end": "3632240"
  },
  {
    "text": "break right now and then I don't have a microphone anymore",
    "start": "3632240",
    "end": "3637640"
  },
  {
    "text": "um okay um what I suppose that we do right now is um we'll go off to the",
    "start": "3637640",
    "end": "3642760"
  },
  {
    "text": "coffee break and then we come back and look at an strn cpy auditing script and",
    "start": "3642760",
    "end": "3648599"
  },
  {
    "text": "then we look a bit into automated structure reconstruction and if uh your head's not hurting by then then we can still go",
    "start": "3648599",
    "end": "3655240"
  },
  {
    "text": "into threat evaluation like um risk evaluation when we have a dangerous call and so on so is that all right with",
    "start": "3655240",
    "end": "3662640"
  },
  {
    "text": "everybody or any questions right now or anything you'd like to do in the second half",
    "start": "3662640",
    "end": "3669400"
  },
  {
    "text": "nothing okay something that I noticed about American audiences is they seem to be a lot quieter than the European ones",
    "start": "3669400",
    "end": "3675119"
  },
  {
    "text": "I mean I didn't have quite such a technical audience in Europe took me one and a half hours for the stuff that I",
    "start": "3675119",
    "end": "3680760"
  },
  {
    "text": "covered until our first break there but um there were asking me questions at least all the time so I felt I had",
    "start": "3680760",
    "end": "3686720"
  },
  {
    "text": "something to do nothing here okay",
    "start": "3686720",
    "end": "3691319"
  },
  {
    "text": "break",
    "start": "3713440",
    "end": "3716440"
  }
]