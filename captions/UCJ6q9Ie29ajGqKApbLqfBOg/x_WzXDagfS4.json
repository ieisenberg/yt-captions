[
  {
    "text": "so just you start it huh starting with a quick introduction as to what our online payment systems who am i what do i talk",
    "start": "60",
    "end": "8099"
  },
  {
    "text": "about this what can you do with the types of a text I've I'm presenting and",
    "start": "8099",
    "end": "13980"
  },
  {
    "text": "how do you go about doing them not necessarily in that order I just wanna",
    "start": "13980",
    "end": "19980"
  },
  {
    "text": "make clear that this is not a PCI talk if used on a thought that I was talking about PCI compliance it's the wrong one",
    "start": "19980",
    "end": "28859"
  },
  {
    "text": "I will try to avoid naming individual payment gateways because these issues",
    "start": "28859",
    "end": "34020"
  },
  {
    "text": "affect pretty much all of them to some degree and if I were to sort of showcase",
    "start": "34020",
    "end": "39270"
  },
  {
    "text": "having gateway X and you think that I moved to another one I'll be safe you",
    "start": "39270",
    "end": "44520"
  },
  {
    "text": "probably act so I don't want to sort of point any fingers and one of the other",
    "start": "44520",
    "end": "52469"
  },
  {
    "text": "things is that most of the plugins for open source tools like OS commerce and",
    "start": "52469",
    "end": "59070"
  },
  {
    "text": "card whatever they're often written by a third-party developer and not necessarily bedded to the payment",
    "start": "59070",
    "end": "65729"
  },
  {
    "text": "gateway vendor standard so as far as like implementation bugs go they vary a",
    "start": "65729",
    "end": "73140"
  },
  {
    "text": "lot try to avoid some feedback right",
    "start": "73140",
    "end": "78479"
  },
  {
    "text": "it's a bit of my credentials married got two kids whereas a penetration tester a",
    "start": "78479",
    "end": "84090"
  },
  {
    "text": "bit of a tech head geek I write a blog kind of pretend to write a blog and I",
    "start": "84090",
    "end": "90360"
  },
  {
    "text": "think I've got that I didn't like a year and a half I run a few projects mostly aimed at identifying security flaws or",
    "start": "90360",
    "end": "100579"
  },
  {
    "text": "exploiting vulnerabilities so primarily aimed at I guess penetration testers and",
    "start": "100579",
    "end": "105990"
  },
  {
    "text": "by cantos I also contribute to some well-known",
    "start": "105990",
    "end": "111020"
  },
  {
    "text": "open source projects in what a little spare time I have so dumping into",
    "start": "111020",
    "end": "119390"
  },
  {
    "text": "payment gateways are effectively the point-of-sale system for a web shop so",
    "start": "119390",
    "end": "125219"
  },
  {
    "text": "in an almost have to walk in you walk up to a cash register the hand of a cash the payment gateway is the equivalent in",
    "start": "125219",
    "end": "131700"
  },
  {
    "text": "the web sense that you run website you want to you know do some sales the payment gateway is",
    "start": "131700",
    "end": "138160"
  },
  {
    "text": "effectively the cash register but it's typically outsourced to somebody else so quickly reduction we'll",
    "start": "138160",
    "end": "149290"
  },
  {
    "text": "talk a bit about you know what are the actors in the normal online transaction talk about some definitions we'll look",
    "start": "149290",
    "end": "156040"
  },
  {
    "text": "at time ago a pice and I will move on into the actual design vulnerabilities",
    "start": "156040",
    "end": "161430"
  },
  {
    "text": "talking bit about the use of cryptography and finally we're going to",
    "start": "161430",
    "end": "166450"
  },
  {
    "text": "discuss some implementation bugs I got a couple of demos for most of these things",
    "start": "166450",
    "end": "172770"
  },
  {
    "text": "so we'll start off with the customer just you know happy guy wants to shop online get a stuff delivered to his door",
    "start": "172770",
    "end": "179980"
  },
  {
    "text": "and not have his credit card details stolen the merchant he wants to supply",
    "start": "179980",
    "end": "186300"
  },
  {
    "text": "the goods or services wants to Mexico cash and most of the the Sun force in",
    "start": "186300",
    "end": "193330"
  },
  {
    "text": "this presentation actually affect the merchant not the customer or the bank or",
    "start": "193330",
    "end": "199150"
  },
  {
    "text": "peridot at the end so the payment gateway typically large financial",
    "start": "199150",
    "end": "204820"
  },
  {
    "text": "institutions or in some cases small startups they take a fraction of each",
    "start": "204820",
    "end": "211360"
  },
  {
    "text": "transaction typically and and basically that's how they generate",
    "start": "211360",
    "end": "216610"
  },
  {
    "text": "their money and then there's the attacker who I suppose scans the",
    "start": "216610",
    "end": "223390"
  },
  {
    "text": "internet for things to destroy if you believe a popular press in this case it",
    "start": "223390",
    "end": "229510"
  },
  {
    "text": "would typically be either you know board kids or organized crime while the",
    "start": "229510",
    "end": "237340"
  },
  {
    "text": "attacks that we're going to discuss don't really scale to sort of millions of dollars of damage unless you dude and",
    "start": "237340",
    "end": "243580"
  },
  {
    "text": "across the internet there's still enough traction I think that the organizer Krong would be willing to repeat these",
    "start": "243580",
    "end": "251049"
  },
  {
    "text": "top attacks over and over however we don't really see them in the world just",
    "start": "251049",
    "end": "256989"
  },
  {
    "text": "because it's easier to steal you know 80 million credit card numbers from some",
    "start": "256989",
    "end": "262150"
  },
  {
    "text": "random corporation but things get more and more difficult we",
    "start": "262150",
    "end": "268540"
  },
  {
    "text": "might eventually end up seeing some of these attacks I've been working with the PO",
    "start": "268540",
    "end": "273550"
  },
  {
    "text": "several payment gateways from last two years there are mitigations in place for a lot of these attacks but there isn't",
    "start": "273550",
    "end": "280419"
  },
  {
    "text": "really any some incentives for the customers to move on and so I think while this sort of a lull between these",
    "start": "280419",
    "end": "287229"
  },
  {
    "text": "things are being exploded in the wall and a solution exists it's sort of time to try to push people to move on to a",
    "start": "287229",
    "end": "295300"
  },
  {
    "text": "safer alternative sorry yeah so if",
    "start": "295300",
    "end": "300580"
  },
  {
    "text": "you're a pen tester or sort of implementing a payment gateway we want to play around with them you should use",
    "start": "300580",
    "end": "308020"
  },
  {
    "text": "test card numbers so you don't have to charge your card all the time so these",
    "start": "308020",
    "end": "313330"
  },
  {
    "text": "are typical numbers that I tend to put into any sort of payment form on them and implementation testing um there are",
    "start": "313330",
    "end": "320919"
  },
  {
    "text": "often additional numbers that might be specific to the timing gateway that",
    "start": "320919",
    "end": "326139"
  },
  {
    "text": "returns certain behavior if you wanted to test for insufficient funds on a card or card cancelled etc you can usually",
    "start": "326139",
    "end": "334810"
  },
  {
    "text": "find that sort of information in the developer's guide from the pen we go away so it's always look worth having a",
    "start": "334810",
    "end": "343090"
  },
  {
    "text": "look at the developers card or the documentation when you're testing the type of these type of things because",
    "start": "343090",
    "end": "348760"
  },
  {
    "text": "there might be bugs in the implementation in in the integration etc",
    "start": "348760",
    "end": "354310"
  },
  {
    "text": "so the primary means of utilizing a",
    "start": "354310",
    "end": "359770"
  },
  {
    "text": "payment gateway when you run a website the source tab is through an API and the",
    "start": "359770",
    "end": "365050"
  },
  {
    "text": "typical operations from an API I think's like charging a card carrying the status",
    "start": "365050",
    "end": "370060"
  },
  {
    "text": "of the card preauth and some class if you're like a hotel or a camping place",
    "start": "370060",
    "end": "376500"
  },
  {
    "text": "where you sort of you want to take a deposit but not necessary Chardin manage",
    "start": "376500",
    "end": "381520"
  },
  {
    "text": "your recurring payments if if you offer a subscription services and refunds for",
    "start": "381520",
    "end": "387300"
  },
  {
    "text": "unhappy customers they're typically accessed through two environments",
    "start": "387300",
    "end": "395139"
  },
  {
    "text": "there's the sandbox which is what you meant to be using when you're developing your plugins or integrating",
    "start": "395139",
    "end": "400390"
  },
  {
    "text": "win with the Panigale that's an environment where it's fine to file it",
    "start": "400390",
    "end": "406930"
  },
  {
    "text": "won't actually charge your cards it's sort of its playground and then there's production now the details the merchant",
    "start": "406930",
    "end": "415900"
  },
  {
    "text": "account configuration is typically shared between these two environments so if you are an attacker it's better to",
    "start": "415900",
    "end": "422770"
  },
  {
    "text": "test your exploit against the sandbox regionals if there's something wrong with it you know like you have a typo",
    "start": "422770",
    "end": "428110"
  },
  {
    "text": "sign the sandbox will basically give you a nice error message saying that you made a mistake but it won't throw up any",
    "start": "428110",
    "end": "434650"
  },
  {
    "text": "flags and sort of fraud detection systems typically with they don't monitor the development so example that",
    "start": "434650",
    "end": "442780"
  },
  {
    "text": "is trying to buy part we're playing with an actual redirect top payment the",
    "start": "442780",
    "end": "451660"
  },
  {
    "text": "sandbox Garcia invalidates a configuration page contact the merchants and so you can you can tweak your",
    "start": "451660",
    "end": "457420"
  },
  {
    "text": "exploit against the sandbox until that works and then move on to production from there so looking at how the various",
    "start": "457420",
    "end": "467740"
  },
  {
    "text": "transactions work for the different ways to implement the pantego is direct API is something that we see a fair bit and",
    "start": "467740",
    "end": "476140"
  },
  {
    "text": "typically this means that the merchant carries the burden of being PCI",
    "start": "476140",
    "end": "481360"
  },
  {
    "text": "compliant VI received the credit card data directly to themself but I'd pass it on to the payment gateway to charge",
    "start": "481360",
    "end": "486970"
  },
  {
    "text": "the card so we'll start with being a checkout page you know you'll do a post",
    "start": "486970",
    "end": "492310"
  },
  {
    "text": "directly to the merchants website Sam here's my credit card numbers the amount that I want to pay for the goods that",
    "start": "492310",
    "end": "499960"
  },
  {
    "text": "I'm buying then when the Milton data receive sir they go I had them at his shop request",
    "start": "499960",
    "end": "505450"
  },
  {
    "text": "to the payment gateway in this case event occasion it's enabled and so you",
    "start": "505450",
    "end": "513039"
  },
  {
    "text": "wouldn't be able to impersonate so the merchant because you would have to knead the dough urea that you would have to",
    "start": "513040",
    "end": "518380"
  },
  {
    "text": "know the username and password then having Gateway charges to card sends",
    "start": "518380",
    "end": "523599"
  },
  {
    "text": "back a status whether or not an impairment was received there's a receipt more information than",
    "start": "523599",
    "end": "529690"
  },
  {
    "text": "that and then based on that the merchant will send back some HTML saying if I'm more successful or payment file please try",
    "start": "529690",
    "end": "537430"
  },
  {
    "text": "again contact support whatever so that's sort of the very straight and narrow",
    "start": "537430",
    "end": "543960"
  },
  {
    "text": "simple implementation but it has the PCI requirements so a lot of people are",
    "start": "543960",
    "end": "551470"
  },
  {
    "text": "moving on to things like a hosted payment solution where the payer the payment gateway takes the credit card",
    "start": "551470",
    "end": "558550"
  },
  {
    "text": "details directly so the merchant doesn't actually have any involvement in the payment transaction and that way you",
    "start": "558550",
    "end": "567790"
  },
  {
    "text": "avoid having to be PCI compliant but it means that there's a disconnect between the merchant and the payment gateway and",
    "start": "567790",
    "end": "573510"
  },
  {
    "text": "so there's some room there for abuse and simple stuff with an example of this",
    "start": "573510",
    "end": "579210"
  },
  {
    "text": "yeah you start you get the checkout page it sounds back HTML and this is straight",
    "start": "579210",
    "end": "588310"
  },
  {
    "text": "post from you know the browser to the payment gateway which effectively means",
    "start": "588310",
    "end": "593980"
  },
  {
    "text": "that you're making but the customer is making the API call on behalf of the merchant basically means of the API for",
    "start": "593980",
    "end": "603370"
  },
  {
    "text": "the payment gateway for this merchant is kind of public and so if you were able to work out certain details that are",
    "start": "603370",
    "end": "612400"
  },
  {
    "text": "used to validate that this is a legitimate merchant account you could",
    "start": "612400",
    "end": "617650"
  },
  {
    "text": "mess around with this biggest so post",
    "start": "617650",
    "end": "623200"
  },
  {
    "text": "goes directly to the payment gateway with your credit card details pama gateway sends back a redirect",
    "start": "623200",
    "end": "629950"
  },
  {
    "text": "saying yeah I've charged you and I please go back to the merchant gateway and provide the following details so as",
    "start": "629950",
    "end": "636730"
  },
  {
    "text": "you can see there's a whole bunch of data here in the it's all the data here",
    "start": "636730",
    "end": "643240"
  },
  {
    "text": "in in the redirect saying and at least the payment amount cetera then browser",
    "start": "643240",
    "end": "650620"
  },
  {
    "text": "says here redirects to dimension website mention website receives the details and",
    "start": "650620",
    "end": "656080"
  },
  {
    "text": "then based on what the browser provides determines whether or not time it's been received gives you a receipt",
    "start": "656080",
    "end": "662220"
  },
  {
    "text": "you know might initiate pick in place if if you're one of us",
    "start": "662220",
    "end": "667710"
  },
  {
    "text": "this is nope you running all this commercial one of these popular solutions they often have integration",
    "start": "667710",
    "end": "674290"
  },
  {
    "text": "for peek in place or warehouse shipping so them are not even validate the funds",
    "start": "674290",
    "end": "681550"
  },
  {
    "text": "clearing goes into an account they'll just get [ __ ] straight away different",
    "start": "681550",
    "end": "686800"
  },
  {
    "text": "alternative it is without using a direct post you take it back into a white label",
    "start": "686800",
    "end": "693210"
  },
  {
    "text": "page on the payment gateway before doing the post with the credit card details it's the same kind of stuff you have to",
    "start": "693210",
    "end": "701110"
  },
  {
    "text": "check a page checkout page in this case redirects you instead of giving you HTML form so and as you can see in the in",
    "start": "701110",
    "end": "710200"
  },
  {
    "text": "here this all the time and data and the redirect yeah you send that to the",
    "start": "710200",
    "end": "717700"
  },
  {
    "text": "family iPad we got a sense back HTML form saying please give me credit card details you send the credit card details",
    "start": "717700",
    "end": "724330"
  },
  {
    "text": "and then Pam again boy charges to card sent you back to the merchant website",
    "start": "724330",
    "end": "729670"
  },
  {
    "text": "saying okay well yeah he's the details to provide the merchants you know transaction ID etc which you browse a",
    "start": "729670",
    "end": "738340"
  },
  {
    "text": "sense of dimension and merch and then decides whether or not you know tissue to recede shape etc so same kind of deal",
    "start": "738340",
    "end": "745030"
  },
  {
    "text": "and there's also an alternative which some people believe is offers more",
    "start": "745030",
    "end": "752320"
  },
  {
    "text": "security which is essentially the same thing but so you go to check a page",
    "start": "752320",
    "end": "758830"
  },
  {
    "text": "redirect back to the mission okay I mentioned Gateway sensor form you post credit card details directly to the",
    "start": "758830",
    "end": "766060"
  },
  {
    "text": "payment gateway but instead of the payment gateway redirecting you back to the merchant with the details",
    "start": "766060",
    "end": "772510"
  },
  {
    "text": "it makes it post requests directly to a hidden URL that's supposedly only the",
    "start": "772510",
    "end": "778840"
  },
  {
    "text": "merchant and the payment gateway now so",
    "start": "778840",
    "end": "784780"
  },
  {
    "text": "that'll make the post request they're written then no sorry well payment has been received and then the payment",
    "start": "784780",
    "end": "793030"
  },
  {
    "text": "gateway just basically read Rex you're back to like a Thank You page so this you're not giving transactional",
    "start": "793030",
    "end": "798820"
  },
  {
    "text": "details or receipt details through the browser this way and it's potentially",
    "start": "798820",
    "end": "804160"
  },
  {
    "text": "less I potentially harder for an attacker to know where the endpoint is to attack the yes I'll pad you here's",
    "start": "804160",
    "end": "812950"
  },
  {
    "text": "the details URL so there is a logical",
    "start": "812950",
    "end": "818560"
  },
  {
    "text": "fallacy with that and Matt is if you're using an open source solution and you're using a plug-in that's to say you're",
    "start": "818560",
    "end": "823960"
  },
  {
    "text": "always Khmers and you're using plugin for this time in this type of hammond gateway the return URL is always the",
    "start": "823960",
    "end": "831070"
  },
  {
    "text": "same in the plugin so you know it might be hidden but at the same time it's",
    "start": "831070",
    "end": "837940"
  },
  {
    "text": "known if you go look at the source code you'll find it if it's a custom implementation humans still tend to name",
    "start": "837940",
    "end": "844780"
  },
  {
    "text": "things in a sensible manner so you can usually just go looking for things like return or taemin taemin received top of",
    "start": "844780",
    "end": "852670"
  },
  {
    "text": "pages on the website typically find it so to finish this up just to the",
    "start": "852670",
    "end": "858670"
  },
  {
    "text": "straight HTML page and just assume payment received there's also a third",
    "start": "858670",
    "end": "864390"
  },
  {
    "text": "integration which is where the merchant directly speaks to the Pamuk OS of this",
    "start": "864390",
    "end": "869860"
  },
  {
    "text": "not a customer involvement a typical example of that is when you refund money and the customer is called up and said",
    "start": "869860",
    "end": "876250"
  },
  {
    "text": "no you sent me an iPad in a screen which broke and I'll send it back and give me my money back so the customer has no involvement in",
    "start": "876250",
    "end": "883450"
  },
  {
    "text": "this even though there's been a prior transaction it's just basically a straight-up soap request typically and",
    "start": "883450",
    "end": "892170"
  },
  {
    "text": "you're done when it gets refunded to the customer so if an attacker where to go",
    "start": "892170",
    "end": "902860"
  },
  {
    "text": "after these any of these top of transactions this typically two ways you",
    "start": "902860",
    "end": "909550"
  },
  {
    "text": "do this you either go in on this component where it's transmitting the",
    "start": "909550",
    "end": "914590"
  },
  {
    "text": "transactional data to the pieman cowboy it's a URL mod and do it 302 redirect and URL will have things like the amount",
    "start": "914590",
    "end": "922470"
  },
  {
    "text": "thousand dollars you can change that to one dollar and then you can plate the payment and",
    "start": "922470",
    "end": "927939"
  },
  {
    "text": "hopefully the the website on the other end doesn't validate that the payment",
    "start": "927939",
    "end": "933249"
  },
  {
    "text": "amount matches it just goes yep status is paid it's a receipt number and it",
    "start": "933249",
    "end": "939879"
  },
  {
    "text": "ships you in your iPad or you know laptop whatever and the other thing",
    "start": "939879",
    "end": "945789"
  },
  {
    "text": "that's typically done is to just bypass the first steps so you go straight from the checkout page and then you go to the",
    "start": "945789",
    "end": "952899"
  },
  {
    "text": "thank you payment has been received page and just spoof the transactional details",
    "start": "952899",
    "end": "958109"
  },
  {
    "text": "and since since the merchant is disconnected from the payment gateway they might not have a way to validate",
    "start": "958109",
    "end": "963369"
  },
  {
    "text": "whether or not these details are correct and so there are several CVS applied to",
    "start": "963369",
    "end": "971919"
  },
  {
    "text": "these type of attacks I think the oldest one I found goes back to 2002 but those",
    "start": "971919",
    "end": "978699"
  },
  {
    "text": "are only the vulnerabilities that have been given a CBE I mean these things dead back to life yeah early 80s",
    "start": "978699",
    "end": "984459"
  },
  {
    "text": "probably and it still largely a problem so you know traditional attacks it's",
    "start": "984459",
    "end": "991269"
  },
  {
    "text": "changed apparent amount just in the Europe changed change it to a cent yeah and they solve this with something",
    "start": "991269",
    "end": "998109"
  },
  {
    "text": "that they call request validation or you spoof the payment received and they saw",
    "start": "998109",
    "end": "1005339"
  },
  {
    "text": "this with responsive elevation now you might ask what our request and response validation it's basically a fancy name",
    "start": "1005339",
    "end": "1013709"
  },
  {
    "text": "for a message authentication code typically it's it's also referred to as",
    "start": "1013709",
    "end": "1020369"
  },
  {
    "text": "fingerprint see signature etc but they're basically they hash the details",
    "start": "1020369",
    "end": "1026220"
  },
  {
    "text": "and then they send a hash along with it and if the Hat so if you change the amount in the transaction detailed the",
    "start": "1026220",
    "end": "1033839"
  },
  {
    "text": "hash and along a mattress and the transaction gets aborted so samples of",
    "start": "1033839",
    "end": "1040259"
  },
  {
    "text": "request validation typically it only protects the vital components of the transaction so the actual URL in a",
    "start": "1040259",
    "end": "1047069"
  },
  {
    "text": "redirect is quite big in love and contain things like the customer information",
    "start": "1047069",
    "end": "1053029"
  },
  {
    "text": "transactional data description of items bort etc and so they don't hatch the whole thing",
    "start": "1053029",
    "end": "1059490"
  },
  {
    "text": "they just attack these are the things that we think are kind of important to validate whether or not the transaction",
    "start": "1059490",
    "end": "1065310"
  },
  {
    "text": "is valid and let make sure that they don't change the amount or the currency",
    "start": "1065310",
    "end": "1071720"
  },
  {
    "text": "so some examples of this you know straight up sha-1 this thing's the the",
    "start": "1071720",
    "end": "1078030"
  },
  {
    "text": "blue details are the account IDs of the merchant account reference the red is a",
    "start": "1078030",
    "end": "1083310"
  },
  {
    "text": "shared secret which is meant to ensure that people can't just generate",
    "start": "1083310",
    "end": "1088500"
  },
  {
    "text": "different hashes because they won't have all the messages or you know instead of",
    "start": "1088500",
    "end": "1095070"
  },
  {
    "text": "an initialization vector and before different order of things in the other",
    "start": "1095070",
    "end": "1100950"
  },
  {
    "text": "one has an md5 or an md5 Plus the secret key and as you can see each",
    "start": "1100950",
    "end": "1107310"
  },
  {
    "text": "implementation is slightly different but they're also very similar and so when",
    "start": "1107310",
    "end": "1114240"
  },
  {
    "text": "you're dealing with payment gateways each payment gateway has their own way of doing things so from the sort of",
    "start": "1114240",
    "end": "1120150"
  },
  {
    "text": "implementation perspective they're slightly different but from the sound perspective it's the same things like yep you're generating a hash and the",
    "start": "1120150",
    "end": "1128310"
  },
  {
    "text": "hash consists of values plus yeah your secret [ __ ] secret responsible lessons",
    "start": "1128310",
    "end": "1135990"
  },
  {
    "text": "the same thing only protects the Bartlett details typically that's just a merging idea the",
    "start": "1135990",
    "end": "1141180"
  },
  {
    "text": "transaction ID and the amount so examples of that you can see it's",
    "start": "1141180",
    "end": "1146790"
  },
  {
    "text": "they're almost the same as the initial amount or the initial example which was request a location so request all the",
    "start": "1146790",
    "end": "1153870"
  },
  {
    "text": "Dyson is applied when by the merchant when it's sending the use of the",
    "start": "1153870",
    "end": "1159060"
  },
  {
    "text": "customer to the payment gateway and then the response validation is used by the payment gateway when you're sending the",
    "start": "1159060",
    "end": "1165390"
  },
  {
    "text": "user back to the merchant and so the shared secret is known to both the",
    "start": "1165390",
    "end": "1173100"
  },
  {
    "text": "merchant and the payment gateway so otherwise that couldn't possibly validate it so when you're dealing with",
    "start": "1173100",
    "end": "1180360"
  },
  {
    "text": "request or response validation you have a couple of options you can bypass the validation you can abuse some of the",
    "start": "1180360",
    "end": "1187950"
  },
  {
    "text": "cryptographic properties or you can defeat validation which eliminates the use of signatures",
    "start": "1187950",
    "end": "1194250"
  },
  {
    "text": "all together really so typical wise to bypass it is HDD parameter pollution so",
    "start": "1194250",
    "end": "1202710"
  },
  {
    "text": "basically you define the same parameter more than once hopefully the if it's vulnerable the",
    "start": "1202710",
    "end": "1209730"
  },
  {
    "text": "hash check signature check will use the first parameter and then the actual charging card will use the second",
    "start": "1209730",
    "end": "1215070"
  },
  {
    "text": "parameter and typical example of that is you know a PHP page receives it and then",
    "start": "1215070",
    "end": "1220230"
  },
  {
    "text": "sends it to a self back-end we're having two elements defined in XML we'll course",
    "start": "1220230",
    "end": "1225420"
  },
  {
    "text": "XML to use the letter you can abuse unprotected parameters so since they",
    "start": "1225420",
    "end": "1231270"
  },
  {
    "text": "only protect the vital parameters of the transaction say if you're buying a subscription service you can just modify",
    "start": "1231270",
    "end": "1237660"
  },
  {
    "text": "the expiry date so you still paying the full price but instead of having the service expire after a month it'll",
    "start": "1237660",
    "end": "1243630"
  },
  {
    "text": "expire after you know a century or or more which basically means that you getting a little stuff for free and this",
    "start": "1243630",
    "end": "1250740"
  },
  {
    "text": "also abuse of application logic so examples of this is enabling pre",
    "start": "1250740",
    "end": "1257760"
  },
  {
    "text": "authentication or preauth for payment received and some payment gateways have",
    "start": "1257760",
    "end": "1263970"
  },
  {
    "text": "this where instead of having transaction details change in order to make the",
    "start": "1263970",
    "end": "1270210"
  },
  {
    "text": "transaction change from the charge to just preauth of an amount they have an",
    "start": "1270210",
    "end": "1275430"
  },
  {
    "text": "additional parameter which isn't part of the signature so you append this",
    "start": "1275430",
    "end": "1280620"
  },
  {
    "text": "parameter and instead of charging your card it generates exactly the same details back to the merchant but with",
    "start": "1280620",
    "end": "1288630"
  },
  {
    "text": "the additional parameter of pre off one and so if the validation code doesn't",
    "start": "1288630",
    "end": "1294960"
  },
  {
    "text": "check for the presence of preauth all the other parameters are identical and so you're been paid 50 bucks but instead",
    "start": "1294960",
    "end": "1302130"
  },
  {
    "text": "it's just pre-authorized 50 bucks so if",
    "start": "1302130",
    "end": "1309030"
  },
  {
    "text": "you can't if you can't use any of those you might be able to attack the crypto so in the examples that we saw there",
    "start": "1309030",
    "end": "1315690"
  },
  {
    "text": "using md5 sha-1 now they're typically vulnerable to",
    "start": "1315690",
    "end": "1321660"
  },
  {
    "text": "length extension attacks it's a lot easier on md5 than this Shalem no but I'm sure we'll see",
    "start": "1321660",
    "end": "1327480"
  },
  {
    "text": "research to eventually the feature I want as well if you don't know what a chelate extension attack is the short",
    "start": "1327480",
    "end": "1334850"
  },
  {
    "text": "description is that the hashing algorithm works on a chunk a set amount",
    "start": "1334850",
    "end": "1341039"
  },
  {
    "text": "of bytes and then if if it doesn't have enough parts it'll pad and if it has",
    "start": "1341039",
    "end": "1346380"
  },
  {
    "text": "small bites it'll sort of compress the middle section of it and what you can do",
    "start": "1346380",
    "end": "1352770"
  },
  {
    "text": "is without knowing the the key which is K in this case you can add padding and",
    "start": "1352770",
    "end": "1359940"
  },
  {
    "text": "then append a different message which is m2 in this case and because of the way",
    "start": "1359940",
    "end": "1365279"
  },
  {
    "text": "that the block chaining works you will actually discard the unknown data and",
    "start": "1365279",
    "end": "1373380"
  },
  {
    "text": "sort of overratted with your data so you can have two different messages or you",
    "start": "1373380",
    "end": "1379559"
  },
  {
    "text": "can append padding and a different message to the deed to the non details",
    "start": "1379559",
    "end": "1385020"
  },
  {
    "text": "of the signature transactions data and actually have the hash collide and then",
    "start": "1385020",
    "end": "1391140"
  },
  {
    "text": "that way you can pass validation checks sadly length extinction tax up pretty",
    "start": "1391140",
    "end": "1397440"
  },
  {
    "text": "costly I wouldn't you know you have to do it on a pure transactional basis",
    "start": "1397440",
    "end": "1403460"
  },
  {
    "text": "finding md5 collisions even it is with all the advancements in crypto it's",
    "start": "1403460",
    "end": "1409020"
  },
  {
    "text": "still a CPU intensive exercise so there",
    "start": "1409020",
    "end": "1414990"
  },
  {
    "text": "are a much better solution we can just defeat the request validation and the",
    "start": "1414990",
    "end": "1420510"
  },
  {
    "text": "way you go about that is you look at how the fingerprint this matter these are the details that the server-side script",
    "start": "1420510",
    "end": "1427980"
  },
  {
    "text": "from the merchants website used to generate the request validation so you",
    "start": "1427980",
    "end": "1433289"
  },
  {
    "text": "know vital details best merchant account ID there's the secret shared key transactions heart reference ID an",
    "start": "1433289",
    "end": "1440940"
  },
  {
    "text": "amount and a timestamp and then the browser submits the following",
    "start": "1440940",
    "end": "1446669"
  },
  {
    "text": "information to the payment gateway there's a merchant IV transaction type reference ID the amount time step and a",
    "start": "1446669",
    "end": "1452250"
  },
  {
    "text": "fingerprint as well as a result Europe there are often additional parameters but these are the one step",
    "start": "1452250",
    "end": "1458230"
  },
  {
    "text": "sort of matter so if we compare them side-by-side you can see that they are",
    "start": "1458230",
    "end": "1463330"
  },
  {
    "text": "basically the same now some of you might already see the problem here but let me",
    "start": "1463330",
    "end": "1469419"
  },
  {
    "text": "highlight that for you we have an unknown password and a known hash with a",
    "start": "1469419",
    "end": "1475299"
  },
  {
    "text": "whole bunch of other time texts so effectively we can treat the rest of the",
    "start": "1475299",
    "end": "1482290"
  },
  {
    "text": "plan text as soft and just apply standard password cracking techniques",
    "start": "1482290",
    "end": "1489030"
  },
  {
    "text": "now the shared secret it's usually vendor-supplied it never changes in fact there is no",
    "start": "1489030",
    "end": "1496540"
  },
  {
    "text": "option of like changing and you have to open support requests wait for like a week and as soon as they change the key",
    "start": "1496540",
    "end": "1501820"
  },
  {
    "text": "your website is broken because you have the wrong key and now signatures don't",
    "start": "1501820",
    "end": "1506980"
  },
  {
    "text": "match anymore so typically it never changes furthermore it's often converted to a",
    "start": "1506980",
    "end": "1513549"
  },
  {
    "text": "pre case or lower case just to make it easier for developers not to screw up but that just stacks the odds further in",
    "start": "1513549",
    "end": "1520090"
  },
  {
    "text": "the attackers favor because now your key space that you have to brute-force is significantly reduced so an attacker",
    "start": "1520090",
    "end": "1528640"
  },
  {
    "text": "could just sign up to the payment gateway that they're looking to abuse receive one of these cards and because",
    "start": "1528640",
    "end": "1534669"
  },
  {
    "text": "they you know supplied by the vendor that will typically let you know how long it is and what kind of complex do",
    "start": "1534669",
    "end": "1541000"
  },
  {
    "text": "you dealing with and then you just you know optimize your password cracking card for for that so what we what I'm",
    "start": "1541000",
    "end": "1549100"
  },
  {
    "text": "usually seen in in the world I suppose one of the UM pentesting is typically it's eight characters of bad - it's",
    "start": "1549100",
    "end": "1558940"
  },
  {
    "text": "really bad I suppose complexity there are some that includes meta characters",
    "start": "1558940",
    "end": "1564220"
  },
  {
    "text": "but they tend to be safe and so you know to prevent things like an apostrophe",
    "start": "1564220",
    "end": "1570250"
  },
  {
    "text": "breaking it because of SQL injection they tend to stick this of application our case and even if they use uppercase",
    "start": "1570250",
    "end": "1579490"
  },
  {
    "text": "lowercase complex so they sometimes they cast it to uppercase or to lowercase and they actually defeat their own password",
    "start": "1579490",
    "end": "1585309"
  },
  {
    "text": "complexity in general I know one the payment get whether uses 10",
    "start": "1585309",
    "end": "1591299"
  },
  {
    "text": "character passwords there might be more than this particular one but even Tanis is not strong enough the big card",
    "start": "1591299",
    "end": "1598530"
  },
  {
    "text": "vendors use 32 character hex value typically the right from a HSM and the",
    "start": "1598530",
    "end": "1605460"
  },
  {
    "text": "ones I have spoken to are already in the process of moving to a 64 character shared secret and if you're dealing with",
    "start": "1605460",
    "end": "1614220"
  },
  {
    "text": "those you have to fall back on the key length extension because you can't crack them in a human lifetime so when you",
    "start": "1614220",
    "end": "1623220"
  },
  {
    "text": "want to crack this you can move to the cloud because everything is in the cloud these days why just a cloud well rather",
    "start": "1623220",
    "end": "1631559"
  },
  {
    "text": "than going out and buying dedicated cracking hardware setting it up you can",
    "start": "1631559",
    "end": "1636750"
  },
  {
    "text": "just hop on Amazon launch couple of instances Amazon office GPU I think",
    "start": "1636750",
    "end": "1643890"
  },
  {
    "text": "don't think Google does yet but I'm sure it's in the pipeline find a readily",
    "start": "1643890",
    "end": "1649559"
  },
  {
    "text": "available image you don't have to do the install and typically there's like a shell script that you can just run that",
    "start": "1649559",
    "end": "1655440"
  },
  {
    "text": "will install all the development libraries for you and you know within five minutes of hitting start on your",
    "start": "1655440",
    "end": "1661890"
  },
  {
    "text": "instance and Amazon you're up and running and you can also make that elastic if you're not using GPU because",
    "start": "1661890",
    "end": "1669299"
  },
  {
    "text": "you can't elastic graphics cards so you",
    "start": "1669299",
    "end": "1675720"
  },
  {
    "text": "can for example use John the Ripper John the Ripper has great support for dynamic formats I recommend getting the jumbo",
    "start": "1675720",
    "end": "1683490"
  },
  {
    "text": "distribution it comes with all the good use of supplied patches it supports distributed cracking over",
    "start": "1683490",
    "end": "1690480"
  },
  {
    "text": "MPI so you can you can fire up as many instances as you want or you could just use elastic because John the Ripper",
    "start": "1690480",
    "end": "1698850"
  },
  {
    "text": "doesn't require GPU you can also use both CUDA and OpenCL with John if you're",
    "start": "1698850",
    "end": "1705750"
  },
  {
    "text": "using the Jumbo distribution however the CUDA library so the CUDA code is is",
    "start": "1705750",
    "end": "1711419"
  },
  {
    "text": "sadly lacking and the OpenCL is not really optimized for performance so",
    "start": "1711419",
    "end": "1716850"
  },
  {
    "text": "while it is available then if you're happy to write your own OpenCL or CUDA kernels",
    "start": "1716850",
    "end": "1723390"
  },
  {
    "text": "I don't see why you should not use John the Ripper for this so what you can do",
    "start": "1723390",
    "end": "1729420"
  },
  {
    "text": "is you can go in and just define dynamic format so in this guess oops so just",
    "start": "1729420",
    "end": "1740190"
  },
  {
    "text": "created signature there and then down here we'd say yeah tech clean buffer",
    "start": "1740190",
    "end": "1747559"
  },
  {
    "text": "start by adding some salt then append the password add some more salt and then",
    "start": "1747559",
    "end": "1752880"
  },
  {
    "text": "crypt at md5 and effectively we include a test which contains this bit here is",
    "start": "1752880",
    "end": "1759960"
  },
  {
    "text": "the end result hash is the first salt is",
    "start": "1759960",
    "end": "1765090"
  },
  {
    "text": "the second salt all the way down there and that's what the password would be and then you can validate that but using",
    "start": "1765090",
    "end": "1772470"
  },
  {
    "text": "John - - test format the format that you've defined if you are using John I",
    "start": "1772470",
    "end": "1778650"
  },
  {
    "text": "would recommend that you also up that John that confer user specific John dot-com to make sure that you match the",
    "start": "1778650",
    "end": "1784710"
  },
  {
    "text": "password complexity in characters as well as like you know which character",
    "start": "1784710",
    "end": "1789929"
  },
  {
    "text": "sets you're using as otherwise John would waste a lot of time cracking you know shorter passwords longer passwords",
    "start": "1789929",
    "end": "1796620"
  },
  {
    "text": "made of characters that don't necessarily belong in there so and what",
    "start": "1796620",
    "end": "1803309"
  },
  {
    "text": "you would need in order to do that you have a bit of pill code here which this",
    "start": "1803309",
    "end": "1808440"
  },
  {
    "text": "doesn't actually where there's a typo on it but the concept is the same you are",
    "start": "1808440",
    "end": "1813450"
  },
  {
    "text": "in the form you find all the form elements that you're after and then you just print mark this as a dynamic hash",
    "start": "1813450",
    "end": "1821309"
  },
  {
    "text": "there and then you put that in a file and you just let John have a go at it",
    "start": "1821309",
    "end": "1828360"
  },
  {
    "text": "nope if you are using John with jumbo you can update the mag fault to enable",
    "start": "1828360",
    "end": "1834690"
  },
  {
    "text": "MPI so you can do distributed cracking across multiple hosts MPI is pretty easy",
    "start": "1834690",
    "end": "1840000"
  },
  {
    "text": "to set up you create a host file enable SSH authentication for your user key",
    "start": "1840000",
    "end": "1846240"
  },
  {
    "text": "based authentication so you can't rely on passwords and then basically use MPI except John with whatever parameters you",
    "start": "1846240",
    "end": "1854550"
  },
  {
    "text": "would normally do then NPR takes care of the rest so it's really easy to do distributed stuck with",
    "start": "1854550",
    "end": "1862170"
  },
  {
    "text": "NPR however you're better off using GPU",
    "start": "1862170",
    "end": "1867570"
  },
  {
    "text": "it correctly at perform CPU for hash calculations Scouts by the number of GPU",
    "start": "1867570",
    "end": "1873450"
  },
  {
    "text": "cores or devices that you have in in your books you can use either CUDA or",
    "start": "1873450",
    "end": "1879090"
  },
  {
    "text": "OpenCL depending on what the vastus you have and like I said some cloud providers have an Amazon office Nvidia",
    "start": "1879090",
    "end": "1885840"
  },
  {
    "text": "so you can use either CUDA or open CL as to why you would choose one or the other",
    "start": "1885840",
    "end": "1892049"
  },
  {
    "text": "it really comes down to personal preference most of the modern tools tend to use OpenCL simply because CUDA only",
    "start": "1892049",
    "end": "1900360"
  },
  {
    "text": "works with nvidia open CL works with a plethora of things there are some",
    "start": "1900360",
    "end": "1906540"
  },
  {
    "text": "technical differences in yen sense that curia you have to manage your own threading more than often see also",
    "start": "1906540",
    "end": "1913470"
  },
  {
    "text": "manage distribution of tasks across the number of course you have available however since I found cute a lot easier",
    "start": "1913470",
    "end": "1921570"
  },
  {
    "text": "to deal with partly because a socket C coding and partly because could actually",
    "start": "1921570",
    "end": "1926580"
  },
  {
    "text": "allows you to do some things that aren't necessarily great with like buffer offsets and pointer traversals so I",
    "start": "1926580",
    "end": "1934160"
  },
  {
    "text": "wrote mine in CUDA but there's no reason where you couldn't use OpenCL this",
    "start": "1934160",
    "end": "1939929"
  },
  {
    "text": "plenty of open source options that you can use to build on you don't necessarily have to build a cracker from the start john the ripper like I mentioned crypto",
    "start": "1939929",
    "end": "1947160"
  },
  {
    "text": "has multi for source and other very comprehensive GPS tracker uses",
    "start": "1947160",
    "end": "1952610"
  },
  {
    "text": "OpenCL and supports distributed cracking but it doesn't use MPI it has its own",
    "start": "1952610",
    "end": "1958710"
  },
  {
    "text": "service life model was cracker had to play with it uses open CL and",
    "start": "1958710",
    "end": "1966840"
  },
  {
    "text": "thus distributed cracking over MPI but it's basically just a proof-of-concept",
    "start": "1966840",
    "end": "1972530"
  },
  {
    "text": "white pixel diffused GPU cracker sin to",
    "start": "1972530",
    "end": "1979470"
  },
  {
    "text": "debase one that supports multiple salts are based one on that OCR crack as we",
    "start": "1979470",
    "end": "1984570"
  },
  {
    "text": "have a look at it see what compiles to see what sort of coding style with and just the limit from there there",
    "start": "1984570",
    "end": "1990769"
  },
  {
    "text": "are other alternatives but those seda wants to die so I went with so for the",
    "start": "1990769",
    "end": "1996919"
  },
  {
    "text": "demo we're going to demo a number of different things and I think we'll start",
    "start": "1996919",
    "end": "2003250"
  },
  {
    "text": "off with that's alright so the first",
    "start": "2003250",
    "end": "2030039"
  },
  {
    "text": "time I was going to be based around the fact that if you have a hidden return of validation page you can just brute force",
    "start": "2030039",
    "end": "2037179"
  },
  {
    "text": "it so I've written a very basic brutal script that spits out a whole bunch of lines see you're something that and it",
    "start": "2037179",
    "end": "2047320"
  },
  {
    "text": "basically gives you like a big list of files you can choose to load that into bit or you know part type of the double",
    "start": "2047320",
    "end": "2054429"
  },
  {
    "text": "you get I've got this sorry let's move that up to the top and if you can read",
    "start": "2054429",
    "end": "2060069"
  },
  {
    "text": "that but it's basically runs it for the second brevity I I only grabbed for the",
    "start": "2060069",
    "end": "2066368"
  },
  {
    "text": "ones that are relevant and then in a loop I do ahead requests and if that had request returns with 200 okay a lack of",
    "start": "2066369",
    "end": "2074169"
  },
  {
    "text": "the URL so if you run that against my web shop instance here it should come",
    "start": "2074169",
    "end": "2082148"
  },
  {
    "text": "back fairly quickly with the valid URL",
    "start": "2082149",
    "end": "2087628"
  },
  {
    "text": "yeah so if that was like a hidden URL",
    "start": "2088200",
    "end": "2093368"
  },
  {
    "text": "you could sort of still find it just because humans tend to name these things in a in a sensible manner and then once",
    "start": "2093369",
    "end": "2102160"
  },
  {
    "text": "you find it you can proceed with the other attacks sorry all right all right",
    "start": "2102160",
    "end": "2110349"
  },
  {
    "text": "this so so we go to our webshop and we start",
    "start": "2110349",
    "end": "2128190"
  },
  {
    "text": "off we're gonna buy a MacBook Air you go to price thank you just go with that we'll go to checkout",
    "start": "2128190",
    "end": "2135420"
  },
  {
    "text": "page oh uh just sort of register rest in",
    "start": "2135420",
    "end": "2140910"
  },
  {
    "text": "new user",
    "start": "2140910",
    "end": "2143240"
  },
  {
    "text": "say maybe I've sang a bit more recognizable some best lovin go with",
    "start": "2148069",
    "end": "2178799"
  },
  {
    "text": "that scroll down a bit I was sorry I",
    "start": "2178799",
    "end": "2187559"
  },
  {
    "text": "can't doesn't like first then that",
    "start": "2187559",
    "end": "2191269"
  },
  {
    "text": "okay should have tried to the Democrats",
    "start": "2209920",
    "end": "2216790"
  },
  {
    "text": "sorry yeah yeah yeah thank you for that",
    "start": "2218170",
    "end": "2244480"
  },
  {
    "text": "agreed the terms of services and then instead of actually making the payment",
    "start": "2244480",
    "end": "2250270"
  },
  {
    "text": "will will get the dumb source select all",
    "start": "2250270",
    "end": "2255380"
  },
  {
    "text": "that save that page and call it order",
    "start": "2255380",
    "end": "2264308"
  },
  {
    "text": "then we'll go back into our demo I don't do it sup which gives us this",
    "start": "2265420",
    "end": "2274549"
  },
  {
    "text": "dynamic hash which we can use and John the Ripper if I go to my box in the",
    "start": "2274549",
    "end": "2285349"
  },
  {
    "text": "cloud I can I'm around this before the",
    "start": "2285349",
    "end": "2299510"
  },
  {
    "text": "sad thing about as you can see this thing's been running for over two hours John the Ripper it's not particularly",
    "start": "2299510",
    "end": "2305390"
  },
  {
    "text": "fast when you're using GPU as our CPU so",
    "start": "2305390",
    "end": "2310660"
  },
  {
    "text": "rather than doing John the Ripper we'll practice in",
    "start": "2310660",
    "end": "2318040"
  },
  {
    "text": "yeah it's slightly different in this case just texted us arguments some lacy",
    "start": "2330050",
    "end": "2341360"
  },
  {
    "text": "Sam will say the first bit here is the hash that we're going to crack and then",
    "start": "2343820",
    "end": "2352190"
  },
  {
    "text": "we give it a salt in front of the password and then a salt that the behind",
    "start": "2352190",
    "end": "2359640"
  },
  {
    "text": "the password and we know that it's a six characters now I've chosen six just",
    "start": "2359640",
    "end": "2364950"
  },
  {
    "text": "because I want the demo to go a bit faster but basically you adjust this based on what payment gateway you would",
    "start": "2364950",
    "end": "2371190"
  },
  {
    "text": "be targeting because they all they're all slightly different so in this case",
    "start": "2371190",
    "end": "2377630"
  },
  {
    "text": "these guys something isn't looking on oh there it is so in this case that's the",
    "start": "2379280",
    "end": "2388080"
  },
  {
    "text": "password there once I know the password I can go back into my demo and then I",
    "start": "2388080",
    "end": "2395100"
  },
  {
    "text": "can sign the request from order with the password or generate a payment message a",
    "start": "2395100",
    "end": "2405090"
  },
  {
    "text": "transaction ID sign this and then basically they give me this URL to visit",
    "start": "2405090",
    "end": "2413540"
  },
  {
    "text": "I'll just while we do this scene onnu orders in in my webshop we go back to",
    "start": "2413900",
    "end": "2423330"
  },
  {
    "text": "this one well then visit a spoofed Iran",
    "start": "2423330",
    "end": "2435110"
  },
  {
    "text": "just like that my cat",
    "start": "2435110",
    "end": "2438950"
  },
  {
    "text": "so water confirmed what number six and",
    "start": "2443290",
    "end": "2448540"
  },
  {
    "text": "then if we go in to my shop here",
    "start": "2448540",
    "end": "2453610"
  },
  {
    "text": "I'll see here I have a new order shall",
    "start": "2453610",
    "end": "2460150"
  },
  {
    "text": "Louis Hyman accept it as you can see there even though we didn't pay we can",
    "start": "2460150",
    "end": "2469210"
  },
  {
    "text": "also take advantage of unprotected parameters in this case selves sorry",
    "start": "2469210",
    "end": "2476040"
  },
  {
    "text": "cause the dumb selection will get back to this one so what we'll do is well um",
    "start": "2476040",
    "end": "2484560"
  },
  {
    "text": "we'll make another order for the same amount and then this time I'll register",
    "start": "2484560",
    "end": "2493810"
  },
  {
    "text": "this is a different user",
    "start": "2493810",
    "end": "2497160"
  },
  {
    "text": "scroll down a bit address sorry I'm not",
    "start": "2511820",
    "end": "2530190"
  },
  {
    "text": "read on that okay just liveryman third",
    "start": "2530190",
    "end": "2536700"
  },
  {
    "text": "great to attempt service this this time I'm not gonna bother getting the DOMA",
    "start": "2536700",
    "end": "2542820"
  },
  {
    "text": "because the shopping cart IDs are sequential and since no one else is",
    "start": "2542820",
    "end": "2548100"
  },
  {
    "text": "using it I would normally extract a shopping cart ID because in this case",
    "start": "2548100",
    "end": "2553740"
  },
  {
    "text": "the shopping cart ID is being ran in a go back to this so because it is being",
    "start": "2553740",
    "end": "2561530"
  },
  {
    "text": "included here as a custom variable and it's not protected by the signature so",
    "start": "2561530",
    "end": "2568590"
  },
  {
    "text": "we'll just attack the one that were used for shopping cart number seven the order we just passed will rerun it but in this",
    "start": "2568590",
    "end": "2574410"
  },
  {
    "text": "camera time we're making for shopping cart number eight and then that will run",
    "start": "2574410",
    "end": "2580800"
  },
  {
    "text": "for a little wall here",
    "start": "2580800",
    "end": "2585290"
  },
  {
    "text": "uh-huh confirmed this time order ideas there are seven I can get back in here",
    "start": "2589619",
    "end": "2596880"
  },
  {
    "text": "so all orders and then seven here and you can see that it says demo to Hyman",
    "start": "2596880",
    "end": "2603250"
  },
  {
    "text": "received even though we didn't PI so it's also vulnerable to replay attacks",
    "start": "2603250",
    "end": "2609250"
  },
  {
    "text": "and unprotected parameter tampering so",
    "start": "2609250",
    "end": "2618750"
  },
  {
    "text": "from a next trick next trick I'm gonna",
    "start": "2618750",
    "end": "2627099"
  },
  {
    "text": "be looking at a SQL injection so if I go",
    "start": "2627099",
    "end": "2633700"
  },
  {
    "text": "to so I feel good at this one so I have",
    "start": "2633700",
    "end": "2656559"
  },
  {
    "text": "this the girl and have a look at my VM",
    "start": "2656559",
    "end": "2670779"
  },
  {
    "text": "here see that it runs mask out proxy and",
    "start": "2670779",
    "end": "2677380"
  },
  {
    "text": "I have um there's an SQL injection this",
    "start": "2677380",
    "end": "2682470"
  },
  {
    "text": "one here see how I got it yeah",
    "start": "2682470",
    "end": "2687180"
  },
  {
    "text": "there's a preauth preauth escrow",
    "start": "2693549",
    "end": "2700190"
  },
  {
    "text": "injection part of the problem with having SQL injections in this class is",
    "start": "2700190",
    "end": "2705499"
  },
  {
    "text": "that the shared secret has to be stored in plain text in the database in order for the merchant to be able to validate",
    "start": "2705499",
    "end": "2713989"
  },
  {
    "text": "the requests coming in and that the site is in this case we could go visit and",
    "start": "2713989",
    "end": "2724190"
  },
  {
    "text": "this URL that's how you do it and so if",
    "start": "2724190",
    "end": "2739069"
  },
  {
    "text": "we do a typical example I equals B sorry",
    "start": "2739069",
    "end": "2748549"
  },
  {
    "text": "i sir I or B in so that doesn't really help as it's a sub select better example",
    "start": "2748549",
    "end": "2759259"
  },
  {
    "text": "I guess is we bracket record like that you can see the lot straightaway we can go here and see that my scope proxies",
    "start": "2759259",
    "end": "2766759"
  },
  {
    "text": "picked up yes kill injection I put and also the page a lot for this it's very",
    "start": "2766759",
    "end": "2773900"
  },
  {
    "text": "fast so once we take it back and yes curl statements working the",
    "start": "2773900",
    "end": "2780200"
  },
  {
    "text": "benchmark makes it sleep and so typical blind SQL injection do that extract the",
    "start": "2780200",
    "end": "2785749"
  },
  {
    "text": "password a couple of characters I'm going to take you that long once you have that you can straight up spoof or",
    "start": "2785749",
    "end": "2793420"
  },
  {
    "text": "hijacked the API access on behalf of the merchant now with this one and they also",
    "start": "2793420",
    "end": "2799869"
  },
  {
    "text": "happen to be quite helpful that I have have a debug log of curl requests made",
    "start": "2799869",
    "end": "2809089"
  },
  {
    "text": "by the module and so what we can do with that is just extract the credentials",
    "start": "2809089",
    "end": "2818930"
  },
  {
    "text": "straight from there so if we go to this nice and see that we get I had",
    "start": "2818930",
    "end": "2837590"
  },
  {
    "text": "to be basic in there and then you basically pop that into by 60/40 card",
    "start": "2837590",
    "end": "2844340"
  },
  {
    "text": "get you assignment passwords try to ice and just yeah what",
    "start": "2844340",
    "end": "2870579"
  },
  {
    "text": "yeah ah yeah so you'll see there it's",
    "start": "2881870",
    "end": "2902640"
  },
  {
    "text": "that's the username password itself one two three and then by 64 compliance because it's got DOS line endings but",
    "start": "2902640",
    "end": "2912440"
  },
  {
    "text": "that's not a problem so as you can see from sort of the last two bugs as soon",
    "start": "2912440",
    "end": "2923250"
  },
  {
    "text": "see from the last two books have some proper resolution",
    "start": "2923250",
    "end": "2930560"
  },
  {
    "text": "so once you have access to the API and you can Sun request some of the other",
    "start": "2945630",
    "end": "2950859"
  },
  {
    "text": "things you can do is issue your own refunds so rather than spoofing payments you can",
    "start": "2950859",
    "end": "2955869"
  },
  {
    "text": "actually make a genuine payment the payment will appear in the merchants account you'll get your goods and then",
    "start": "2955869",
    "end": "2961960"
  },
  {
    "text": "you'll just refund your on transaction if you're feeling particularly evil you",
    "start": "2961960",
    "end": "2968710"
  },
  {
    "text": "can just loop through every possible transaction and refund all of them which",
    "start": "2968710",
    "end": "2974559"
  },
  {
    "text": "is or it is a good way to get rid of your competition I suppose so in conclusion don't rely on the",
    "start": "2974559",
    "end": "2982450"
  },
  {
    "text": "browser to drive traffic between the merch and website and the payment gateway crypto is pretty hard you know",
    "start": "2982450",
    "end": "2989289"
  },
  {
    "text": "you can either use more than one unknown variable in request validation or use a long secret or even better use token",
    "start": "2989289",
    "end": "2997119"
  },
  {
    "text": "based redirection so that the browser never touches any of the transactional details it's also recommended that you",
    "start": "2997119",
    "end": "3005400"
  },
  {
    "text": "know you protect all the parameters used in the request use a hides Mac so that",
    "start": "3005400",
    "end": "3011039"
  },
  {
    "text": "you can't be attacked with key length extension attacks you know however even",
    "start": "3011039",
    "end": "3017940"
  },
  {
    "text": "if they have weak requests elevation doesn't necessarily mean that they have an exploitable vulnerability there are",
    "start": "3017940",
    "end": "3023970"
  },
  {
    "text": "some mitigating factors around you know luckily there will always be",
    "start": "3023970",
    "end": "3031079"
  },
  {
    "text": "implementation bugs which makes me happy and keeps me job if you do want to work",
    "start": "3031079",
    "end": "3037109"
  },
  {
    "text": "for Bank bugs in panic our implementation the following prices are a few good places to look",
    "start": "3037109",
    "end": "3043019"
  },
  {
    "text": "vulnerable bender code you know arbitrary valuation it's always handy",
    "start": "3043019",
    "end": "3048680"
  },
  {
    "text": "bad SSL practices this one is absolutely everywhere there was like a bug in PHP",
    "start": "3048680",
    "end": "3054950"
  },
  {
    "text": "that it wouldn't work with certain certain versions or certain pass levels",
    "start": "3054950",
    "end": "3060869"
  },
  {
    "text": "of Windows so basically every PHP developer ever to avoid breakage turns",
    "start": "3060869",
    "end": "3065940"
  },
  {
    "text": "up SSL verification by default and even if you do enable it",
    "start": "3065940",
    "end": "3071730"
  },
  {
    "text": "in all the versions of PHP having enabled it didn't actually do correct",
    "start": "3071730",
    "end": "3078210"
  },
  {
    "text": "validation so you can still man in middle them and if it's more recent but",
    "start": "3078210",
    "end": "3083369"
  },
  {
    "text": "not the very latest pretty much every language has had bugs so at the end mid",
    "start": "3083369",
    "end": "3089940"
  },
  {
    "text": "last year those whole bunch from CV 2013",
    "start": "3089940",
    "end": "3095030"
  },
  {
    "text": "something for PHP one for Ruby one for Python one for Java basically if the",
    "start": "3095030",
    "end": "3100619"
  },
  {
    "text": "certificate common name had a null byte in it it would terminate and just validate half the certificate net so or",
    "start": "3100619",
    "end": "3107550"
  },
  {
    "text": "coming in so you can always man in the Middle East thinks if you happen to have access on the data center side",
    "start": "3107550",
    "end": "3115530"
  },
  {
    "text": "another one is peach pit stop jargon it was always good when comparing hashes in PHP if you don't use the triple",
    "start": "3115530",
    "end": "3121530"
  },
  {
    "text": "comparison operator PHP will quite happily can do it one one hash to a",
    "start": "3121530",
    "end": "3127680"
  },
  {
    "text": "float and treat the other hash as a string frankly to null and go well null",
    "start": "3127680",
    "end": "3133050"
  },
  {
    "text": "is kind of similar to this float so we'll just we'll claim that they match",
    "start": "3133050",
    "end": "3138170"
  },
  {
    "text": "because typecast so again this thing",
    "start": "3138170",
    "end": "3143640"
  },
  {
    "text": "isn't like every PHP plugin I've ever seen for pammi gos they used to double comparison so lots of bugs to be had any",
    "start": "3143640",
    "end": "3152130"
  },
  {
    "text": "questions no questions all good all",
    "start": "3152130",
    "end": "3161819"
  },
  {
    "text": "right these slides were actually a bit more updated than the ones that were on the CD I spotted a couple of mistakes",
    "start": "3161819",
    "end": "3168480"
  },
  {
    "text": "so slide endemic card can be found here I will be pushing to the git repo",
    "start": "3168480",
    "end": "3174990"
  },
  {
    "text": "sometime after I get off stage so go grab them while they're fresh yeah and",
    "start": "3174990",
    "end": "3182280"
  },
  {
    "text": "that's it",
    "start": "3182280",
    "end": "3184579"
  }
]