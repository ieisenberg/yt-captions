[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "hi everyone thank you for attending uh welcome to jailbreak do it yourself my",
    "start": "160",
    "end": "5480"
  },
  {
    "text": "name is Max I'm here with Alex and Vlad and we are FR team a few words about us",
    "start": "5480",
    "end": "11599"
  },
  {
    "text": "we are security research team mostly focus it on software and Hardware exploitation we made a VAR jailbreak for",
    "start": "11599",
    "end": "17279"
  },
  {
    "text": "IAS TV even the watch as and we are contributing to a jailbreak",
    "start": "17279",
    "end": "23279"
  },
  {
    "start": "23000",
    "end": "23000"
  },
  {
    "text": "community so before jumping into a jailbreak let's make a quick overview of iOS security iOS security start from a",
    "start": "23279",
    "end": "30000"
  },
  {
    "text": "secure boot chain when the each element in a boot chain got uh properly checked",
    "start": "30000",
    "end": "35760"
  },
  {
    "text": "to be signed by Apple and reject the boot chain if if it's not the next thing",
    "start": "35760",
    "end": "40840"
  },
  {
    "text": "after iOS is loaded is a mandatory code signing so all code that's running on iOS should be signed by Apple or should",
    "start": "40840",
    "end": "48120"
  },
  {
    "text": "be signed by a trusted party the sandbox which is limiting application access to a file system to",
    "start": "48120",
    "end": "54719"
  },
  {
    "text": "some critical apis uh and apple made a really good War",
    "start": "54719",
    "end": "60160"
  },
  {
    "text": "on exploit mitigations like Heap and stack canaries like islr like de and",
    "start": "60160",
    "end": "66799"
  },
  {
    "text": "Harding Safari G in the iOS 10 release next the data protection which",
    "start": "66799",
    "end": "73159"
  },
  {
    "text": "secure user partition based on a p code on or the touch ID secur clay processor",
    "start": "73159",
    "end": "78880"
  },
  {
    "text": "which use it as a secure crypto operations as a provider for Apple",
    "start": "78880",
    "end": "84240"
  },
  {
    "text": "pay and one more thing is Kel patch protector it's a new mitigation debuted",
    "start": "84240",
    "end": "89439"
  },
  {
    "text": "in is 9 it's a special monitor that can continuously check for caral",
    "start": "89439",
    "end": "95600"
  },
  {
    "text": "integrity so what is a jailbreak so basically jailbreak is a process of",
    "start": "95600",
    "end": "101399"
  },
  {
    "start": "96000",
    "end": "96000"
  },
  {
    "text": "hacking your device as as a user you cannot get a full access to a file system you can add around something like",
    "start": "101399",
    "end": "108040"
  },
  {
    "text": "SSH demon on your phone and tunnel uh to your phone so in a case to get a full",
    "start": "108040",
    "end": "114799"
  },
  {
    "text": "access install any c party applications and utils you need to jail to jailbreak or he device nowadays the exploit chain",
    "start": "114799",
    "end": "121960"
  },
  {
    "text": "is required and it could take like up to from three to seven or eight exploits in",
    "start": "121960",
    "end": "128280"
  },
  {
    "text": "a chain to get a fully unteer jailbreak as we talk about the unteer",
    "start": "128280",
    "end": "133360"
  },
  {
    "start": "132000",
    "end": "132000"
  },
  {
    "text": "there are two types of jailbreak taser and uner the main difference as is in a",
    "start": "133360",
    "end": "139440"
  },
  {
    "text": "deser jailbreak it effect will be invalidated after device got rebooted so this mean after the device rebooted you",
    "start": "139440",
    "end": "145840"
  },
  {
    "text": "need to run exploit again which do all the Kel patches in case of unate",
    "start": "145840",
    "end": "151120"
  },
  {
    "text": "jailbreak will be running automatically on device boot so the next thing is what are the",
    "start": "151120",
    "end": "159239"
  },
  {
    "start": "156000",
    "end": "156000"
  },
  {
    "text": "possible initial attack Vector how to like install the payload which contain a",
    "start": "159239",
    "end": "164280"
  },
  {
    "text": "Jailbreak on the device the most easy and the most popular way is making application archive install it on device",
    "start": "164280",
    "end": "171640"
  },
  {
    "text": "which will basically uh trigger the exploit code the USB p is pretty um",
    "start": "171640",
    "end": "178680"
  },
  {
    "text": "pretty good attack we can exploit USB commments itself or use USB as a one of",
    "start": "178680",
    "end": "185239"
  },
  {
    "text": "the stages when the file was exploited got copied to a device and we'll be use it in the by the next stage of course",
    "start": "185239",
    "end": "190799"
  },
  {
    "text": "the web kit SMS and baseband like mobile Safari like any um libraries that you do",
    "start": "190799",
    "end": "197799"
  },
  {
    "text": "uh image rendering in uh iMessages and of course Wi-Fi and uh LTE baseband",
    "start": "197799",
    "end": "205200"
  },
  {
    "text": "that's a really good Target for remote jailbreaks so let's assume you want to",
    "start": "205200",
    "end": "211680"
  },
  {
    "start": "209000",
    "end": "209000"
  },
  {
    "text": "make a jailbreak and you have a zero days well in this case the process will",
    "start": "211680",
    "end": "216959"
  },
  {
    "text": "be not that hard you you just need to write exploit chain which will patch out all the security restrictions um in the",
    "start": "216959",
    "end": "223400"
  },
  {
    "text": "system optionally install persistent binary and SSH or any other remote shell",
    "start": "223400",
    "end": "229439"
  },
  {
    "start": "229000",
    "end": "229000"
  },
  {
    "text": "but as we know the zero days are pretty expensive so what if you don't have a zero days jailbreak is still",
    "start": "229439",
    "end": "237959"
  },
  {
    "text": "doable and there are so many uh public PC's and uh write ups uh on iOS bug like",
    "start": "238560",
    "end": "248400"
  },
  {
    "text": "Google project zero do a really great things by publishing PCS and pangu team pangu block is really good they they",
    "start": "248400",
    "end": "255200"
  },
  {
    "text": "describe a lot of is exploitation the main difference that uh all those public",
    "start": "255200",
    "end": "261440"
  },
  {
    "text": "sources they do not contain the information how to m a full J break how to uh disable is restrictions how to",
    "start": "261440",
    "end": "268840"
  },
  {
    "text": "bypass a Kel p protection which is really really critical if you want to make any Canal page so that the things",
    "start": "268840",
    "end": "275800"
  },
  {
    "text": "we want to uh solve in our talk we want to show a step-by-step guide how to make a jailbreak at",
    "start": "275800",
    "end": "282520"
  },
  {
    "text": "home so I will start with our bit code execution strategies or how to bypass",
    "start": "282520",
    "end": "288840"
  },
  {
    "start": "284000",
    "end": "284000"
  },
  {
    "text": "initial uh code initial code signing checks so first of all there is a",
    "start": "288840",
    "end": "294840"
  },
  {
    "text": "well-known techniques return oriented programming which is well documented and I will not focus on it uh too",
    "start": "294840",
    "end": "302600"
  },
  {
    "text": "much the next thing is binder with maug so main idea is to exploit Dynamic",
    "start": "302600",
    "end": "308919"
  },
  {
    "text": "Linker and hide executable segment um by overlapping it is",
    "start": "308919",
    "end": "314160"
  },
  {
    "text": "non-executable so when kernel see binary see okay there is no executable segment",
    "start": "314160",
    "end": "319840"
  },
  {
    "text": "so I shouldn't check a Cod sign here next thing is Javascript core JavaScript core is very interesting because it",
    "start": "319840",
    "end": "325800"
  },
  {
    "text": "contain a special memory region that could be readable writable and executable in the same time so if we can",
    "start": "325800",
    "end": "332160"
  },
  {
    "text": "exploit it and leak the jit region address we can overwrite it with a Shell Code and basically yeah run and sign",
    "start": "332160",
    "end": "338440"
  },
  {
    "text": "code there is of course there poor man way to um to run and sign code or sign",
    "start": "338440",
    "end": "344520"
  },
  {
    "text": "it code now Apple allow any Apple ID uh use it as a code signature but this",
    "start": "344520",
    "end": "351120"
  },
  {
    "text": "signature will be invalidated in a week the next thing is a Sandbox so a",
    "start": "351120",
    "end": "358280"
  },
  {
    "text": "way to attack sand boxes time of check time of use bux in combination with the SIM links so for",
    "start": "358280",
    "end": "364199"
  },
  {
    "text": "example uh we can use a race condition in a services in Mobile Installation",
    "start": "364199",
    "end": "369280"
  },
  {
    "text": "services that will verify a file and before it got copied to a file system we can replace a file on a dis or use a SIM",
    "start": "369280",
    "end": "376520"
  },
  {
    "text": "links attack uh for example changing the p in a p list uh to something we control",
    "start": "376520",
    "end": "382919"
  },
  {
    "text": "which leads when the application will be installed by mobile installation services it will install our file to an",
    "start": "382919",
    "end": "388280"
  },
  {
    "text": "interesting pass that followed by Sim link xpc xpc is really good mechanism to",
    "start": "388280",
    "end": "394840"
  },
  {
    "text": "uh communicate between the processes and if we found xpc buug we can basically send action commments to other processes",
    "start": "394840",
    "end": "402160"
  },
  {
    "text": "hey please copy this file from folder a to folder b or to mode this file to to",
    "start": "402160",
    "end": "407720"
  },
  {
    "text": "be executable and so on xpc is pretty powerful and if you get a kernel right",
    "start": "407720",
    "end": "413960"
  },
  {
    "text": "primitive uh the sandbox bypass is really trivial we can disable it locally for our prodct by updating the proc",
    "start": "413960",
    "end": "420800"
  },
  {
    "text": "structure in a kernel memory or even globally uh by patching a K I will show",
    "start": "420800",
    "end": "426160"
  },
  {
    "text": "it a little bit later the next thing is what is the strategies through escalate Privileges",
    "start": "426160",
    "end": "432039"
  },
  {
    "start": "428000",
    "end": "428000"
  },
  {
    "text": "and why we really need it so in is most of the critical system apis they require",
    "start": "432039",
    "end": "437840"
  },
  {
    "text": "to be root for usage like task for ped H gate special Port even remount can be",
    "start": "437840",
    "end": "442919"
  },
  {
    "text": "used without being root so the general idea is to find a service d rning as",
    "start": "442919",
    "end": "448720"
  },
  {
    "text": "root and find what libraries it is loading and Bas it on COD sign by P or",
    "start": "448720",
    "end": "455560"
  },
  {
    "text": "base it on something like jump to a r chain before uh Cod sign in the library",
    "start": "455560",
    "end": "461680"
  },
  {
    "text": "will be trigger it we can run a code with the system with with a root",
    "start": "461680",
    "end": "467520"
  },
  {
    "text": "privileges again the kernel page if you get a kernel right it's pretty easy to update the kernel memory the correct",
    "start": "467520",
    "end": "474319"
  },
  {
    "text": "structure and right uh root permission there I will show it a little bit later",
    "start": "474319",
    "end": "480400"
  },
  {
    "start": "480000",
    "end": "480000"
  },
  {
    "text": "the next thing is kisr so Apple introduced U other space layout randomization starting iOS",
    "start": "480400",
    "end": "488360"
  },
  {
    "text": "4.3 and they added uh Kar to to a kernel starting from is6 so the idea behind the",
    "start": "489680",
    "end": "496720"
  },
  {
    "text": "mitigation is that Kel address got randomized each time device is Boot and for attacker before like attacking oral",
    "start": "496720",
    "end": "504560"
  },
  {
    "text": "he need to know where it is located a pretty popular way to the Li's",
    "start": "504560",
    "end": "510319"
  },
  {
    "text": "information leak so the idea is to that we can use something like structure size",
    "start": "510319",
    "end": "516279"
  },
  {
    "text": "mismatching and uh some of the Kel memory will be copied to a user mode and",
    "start": "516279",
    "end": "522839"
  },
  {
    "text": "usually one pointer is enough to understand the Kel Bas address Mark do",
    "start": "522839",
    "end": "529000"
  },
  {
    "text": "and tar man they made a really good write up on there on early random uh weaknesses which allow to even the Brute",
    "start": "529000",
    "end": "535720"
  },
  {
    "text": "Force the kaisar slide as well as work by eser I can say even in I 10 it's possible to",
    "start": "535720",
    "end": "542320"
  },
  {
    "text": "brute force kisr all we need is a kernel R primitive and continuously check for a kernel",
    "start": "542320",
    "end": "550200"
  },
  {
    "text": "heater in a memory so for example iron beer was using this technique in the Mach portal",
    "start": "550200",
    "end": "556720"
  },
  {
    "text": "jailbreak the next thing is dep data execution prevention uh again JavaScript core is",
    "start": "556720",
    "end": "564279"
  },
  {
    "start": "558000",
    "end": "558000"
  },
  {
    "text": "really good Target as it uh contains the jit region which is writable readable EX",
    "start": "564279",
    "end": "569399"
  },
  {
    "text": "utable if you can link this address overwrite with a Shell Code we bypass a dep uh it could be a teet from a",
    "start": "569399",
    "end": "577800"
  },
  {
    "text": "userland uh for example if you found a bug in a way how the pages got locked",
    "start": "577800",
    "end": "584519"
  },
  {
    "text": "for example we can map uh writable page overwrite it with a Shell Code switch it to be executable and if we found any way",
    "start": "584519",
    "end": "592000"
  },
  {
    "text": "to lock a page it will be never page out and code sign Handler will be uh not",
    "start": "592000",
    "end": "597360"
  },
  {
    "text": "triggered on this page basically we can run Shell Code in a user mode so the last",
    "start": "597360",
    "end": "603240"
  },
  {
    "text": "attack we know was in is 93 using mlog or I service of course we can do a Kel",
    "start": "603240",
    "end": "610680"
  },
  {
    "text": "page so with a Kel page we can overwrite VM map enter VM map protect and with",
    "start": "610680",
    "end": "616839"
  },
  {
    "text": "this easily allocate readable writable executable pages in userland if there are not other options R is still an",
    "start": "616839",
    "end": "623640"
  },
  {
    "text": "option return rate and program away so the next problem is there are so",
    "start": "623640",
    "end": "630160"
  },
  {
    "start": "626000",
    "end": "626000"
  },
  {
    "text": "many kernel builds there are so many devices and making like a table with all the offsets is not a trivial task so we",
    "start": "630160",
    "end": "637600"
  },
  {
    "text": "need to solve a problem how to find a offsets for patch just dynamically in a",
    "start": "637600",
    "end": "642920"
  },
  {
    "text": "memory so for this purposes patch finders I use it there are a few ways to make a patch finder like a static or a",
    "start": "642920",
    "end": "649600"
  },
  {
    "text": "dynamic uh static patch finder is based on string or bite references then you",
    "start": "649600",
    "end": "657040"
  },
  {
    "text": "find a xra to it and made additional instruction allal for find a function",
    "start": "657040",
    "end": "662120"
  },
  {
    "text": "start or interesting variable or so again it's not that good as it based it",
    "start": "662120",
    "end": "668079"
  },
  {
    "text": "on a on a pattern machine other ways to make it is a dynamic Pinder idea behind",
    "start": "668079",
    "end": "673680"
  },
  {
    "text": "it there is a stru in a kernel that never never really change it for example CIS CTL uh match CIS skulls those tables",
    "start": "673680",
    "end": "683279"
  },
  {
    "text": "just grow so they did not really change anything in in the middle so as soon as you can link the address of cisal table",
    "start": "683279",
    "end": "690480"
  },
  {
    "text": "you automatically resolve more than 500 uh functions in a c in combination",
    "start": "690480",
    "end": "696399"
  },
  {
    "text": "with instruction ulations uh instead of bite patterns it will be like a pretty powerful",
    "start": "696399",
    "end": "702639"
  },
  {
    "text": "tool so let's assume we have a patch finder uh what we should patch in a kernel to get like",
    "start": "702639",
    "end": "710920"
  },
  {
    "start": "703000",
    "end": "703000"
  },
  {
    "text": "jailbreak we need to make a page to become easily become a rout we made to",
    "start": "711560",
    "end": "717399"
  },
  {
    "text": "page to easily export Kel task Port which is a task for pit we need to",
    "start": "717399",
    "end": "722480"
  },
  {
    "text": "disable Cod signments sand box and finally remount system partition as readable writable I'll focus on each of",
    "start": "722480",
    "end": "729680"
  },
  {
    "text": "these patches a little bit detail so escalating privileges as I say",
    "start": "729680",
    "end": "736000"
  },
  {
    "text": "uh most of the apis critical system API they required route to work task for pit",
    "start": "736000",
    "end": "742560"
  },
  {
    "text": "Mount host get special ports and so on so in a case to use this apis we need to",
    "start": "742560",
    "end": "749440"
  },
  {
    "text": "prev a pretty popular way is if we byass a caral page protector to page caral",
    "start": "749440",
    "end": "755320"
  },
  {
    "text": "directly which is a set ID Cal which is there is a check that uh comparing real",
    "start": "755320",
    "end": "762120"
  },
  {
    "text": "uid with effective uid there's like a set of those checks so all we need to do to find it uh in a set ID function and",
    "start": "762120",
    "end": "769279"
  },
  {
    "text": "basically patch to skip this condition at all this is how it looks like so it's",
    "start": "769279",
    "end": "775040"
  },
  {
    "start": "773000",
    "end": "773000"
  },
  {
    "text": "a CID function there is like a set of checks that compare real uid with effective uid so all we",
    "start": "775040",
    "end": "782480"
  },
  {
    "text": "need to patch is to make sure there is uh that the code will not jump in this",
    "start": "782480",
    "end": "788760"
  },
  {
    "text": "condition the next thing is a caral task so uh the task Port is a type of",
    "start": "788760",
    "end": "796880"
  },
  {
    "text": "macport type and uh it has a pointer to struct task in a Kel memory so if you",
    "start": "796880",
    "end": "806760"
  },
  {
    "text": "have a uh send right to this uh Port we can control over virtual memory of any",
    "start": "806760",
    "end": "813360"
  },
  {
    "text": "process we can control of the thread and so on so in a case of Kernel if we get a",
    "start": "813360",
    "end": "819040"
  },
  {
    "text": "kernel task Port we can control the kernel memory so it's like readable writable primitive we can allocate",
    "start": "819040",
    "end": "825680"
  },
  {
    "text": "memory in a kernel and so on uh there is a lot of uols that require kernel task",
    "start": "825680",
    "end": "832199"
  },
  {
    "text": "port to be exported mostly the USS are for working with a Kel so what are the possib ways to",
    "start": "832199",
    "end": "839800"
  },
  {
    "text": "export the can task Port first of all there is a function called task for ped which is basically a return the task",
    "start": "839800",
    "end": "846519"
  },
  {
    "text": "port for interesting Bid And of course there are checks to make sure we cannot export the canal task so we can patch",
    "start": "846519",
    "end": "853360"
  },
  {
    "text": "this one we can even reimplement the task for pit in rope the basic idea to",
    "start": "853360",
    "end": "858800"
  },
  {
    "text": "implement only the functionality we need and Skip in the checks it may be not not",
    "start": "858800",
    "end": "864360"
  },
  {
    "text": "that real uh and uh if there are no other ways we can always find a Kel task",
    "start": "864360",
    "end": "870639"
  },
  {
    "text": "port in a memory and Export it this is how the task for pit page may",
    "start": "870639",
    "end": "877680"
  },
  {
    "start": "874000",
    "end": "874000"
  },
  {
    "text": "look like so uh Apple hardcoded check for pit zero which",
    "start": "877680",
    "end": "883320"
  },
  {
    "text": "is a kernel pit to make sure that any process cannot export the canot askk so",
    "start": "883320",
    "end": "889959"
  },
  {
    "text": "what we need to do we need to null out this check but it's not that easy as it there",
    "start": "889959",
    "end": "896120"
  },
  {
    "text": "are additional checks in a case if you are running not not as roote so if they are not roote we need to patch out task",
    "start": "896120",
    "end": "903120"
  },
  {
    "text": "for pit postic checks again we need to patch out pit zero check and PCH out C",
    "start": "903120",
    "end": "909000"
  },
  {
    "text": "create isure so these two additional checks which are checking for do we have a permissions to export this task port",
    "start": "909000",
    "end": "915959"
  },
  {
    "text": "and are running as rout uh again to get the task port for",
    "start": "915959",
    "end": "921920"
  },
  {
    "text": "interesting process next thing is Apple mobile file",
    "start": "921920",
    "end": "927000"
  },
  {
    "start": "924000",
    "end": "924000"
  },
  {
    "text": "Integrity so it's like a main module that is checking",
    "start": "927000",
    "end": "932720"
  },
  {
    "text": "for uh that code is signed that it is properly signed by a certificate that",
    "start": "932720",
    "end": "938279"
  },
  {
    "text": "the entitlements match the hashes that are in a code sign uh it Grant access to",
    "start": "938279",
    "end": "944800"
  },
  {
    "text": "other processes task board and have a restrictions on M map and and so on so it's like a pretty pretty powerful Kel",
    "start": "944800",
    "end": "953240"
  },
  {
    "text": "extension and for sure for making a full jailbreak",
    "start": "953240",
    "end": "958319"
  },
  {
    "text": "we need to disable ay a few ways of doing that there is a",
    "start": "958319",
    "end": "964319"
  },
  {
    "text": "really interesting um boot argument called be ay get out of my way uh and it is doesn't exist on",
    "start": "964319",
    "end": "972600"
  },
  {
    "text": "release um car relase device but there is it but an still respect this boot",
    "start": "972600",
    "end": "978680"
  },
  {
    "text": "argument so this mean if you find the variable that reads the value of anig get out of my way and Patch it directly",
    "start": "978680",
    "end": "985199"
  },
  {
    "text": "in kernel you will get anig out of my way functionality the same same thing we need to enable the debug mode the debug",
    "start": "985199",
    "end": "993839"
  },
  {
    "text": "mode will disable a lot of um security features like a Cod sign and uh like",
    "start": "993839",
    "end": "1000360"
  },
  {
    "text": "something in a remount other way we can patch only interesting policies uh directly in AI",
    "start": "1000360",
    "end": "1007680"
  },
  {
    "text": "text this is how it looks like as I say AI init respect ay and IG get out of my",
    "start": "1007680",
    "end": "1014920"
  },
  {
    "text": "way boot arguments if they exist it read the uh responding value of this boot",
    "start": "1014920",
    "end": "1020600"
  },
  {
    "text": "arguments and set the variables so we can directly patch this variables to get I'm get out of my way",
    "start": "1020600",
    "end": "1028280"
  },
  {
    "text": "functionality the next thing is AI policy patches so aial extension have a",
    "start": "1028280",
    "end": "1034360"
  },
  {
    "start": "1029000",
    "end": "1029000"
  },
  {
    "text": "pointer to Mac policy configuration which is basically a structure and one of the fields contain Mac policy",
    "start": "1034360",
    "end": "1040880"
  },
  {
    "text": "operations and this operations are basically pointers to Mac hooks aimc",
    "start": "1040880",
    "end": "1047558"
  },
  {
    "text": "hooks so what we can do we can look for Apple mobile file Integrity string find",
    "start": "1047559",
    "end": "1053440"
  },
  {
    "text": "a reference to it and a few instruction uh top we will see a reference to Mark",
    "start": "1053440",
    "end": "1059799"
  },
  {
    "text": "policy operations which is like an array like this and if we N Out all of these",
    "start": "1059799",
    "end": "1066039"
  },
  {
    "text": "pointers no ampy hooks will be triggered we can well there is there is a list of AIP",
    "start": "1066039",
    "end": "1073600"
  },
  {
    "text": "policies to patch and we can patch only the interesting one so as we see here there is M map checks like for team",
    "start": "1073600",
    "end": "1080280"
  },
  {
    "text": "uh there is ECT check there is even file check Library validation or V not check",
    "start": "1080280",
    "end": "1085640"
  },
  {
    "text": "signature so there's a lot of interesting things here next thing is a",
    "start": "1085640",
    "end": "1092760"
  },
  {
    "text": "Sandbox as I say sandbo prevents uh application of getting full access to a",
    "start": "1094559",
    "end": "1101000"
  },
  {
    "text": "file system it prevents of usage of the critical system apis and if you want to",
    "start": "1101000",
    "end": "1106720"
  },
  {
    "text": "use this apis you basically need to patch the box there's a few ways of doing it in iOS there's a function",
    "start": "1106720",
    "end": "1113320"
  },
  {
    "text": "called SB evaluate which triggers in the most of sandbox hooks so basically it's",
    "start": "1113320",
    "end": "1119440"
  },
  {
    "text": "Grant uh ATS for for an action the action could be different like a file ATS like export Kel task or",
    "start": "1119440",
    "end": "1127799"
  },
  {
    "text": "so so we can patch this sb8 always return true so everything is granted for",
    "start": "1127799",
    "end": "1133000"
  },
  {
    "text": "any action well it's it's doable but not a good idea because it will lead that",
    "start": "1133000",
    "end": "1139679"
  },
  {
    "text": "any application downloaded from App Store or for uh or any s party application now we full have full access",
    "start": "1139679",
    "end": "1145919"
  },
  {
    "text": "to file system which is not good which is a really big privacy league so better",
    "start": "1145919",
    "end": "1151200"
  },
  {
    "text": "to just hook as B8 and uh check for interesting action and Grant access only",
    "start": "1151200",
    "end": "1156679"
  },
  {
    "text": "for interesting action we need or as a alternative way Page standand books mic",
    "start": "1156679",
    "end": "1161760"
  },
  {
    "text": "policies directly this is how it looks like again uh standbook carel extension have a pointer to ma policy",
    "start": "1161760",
    "end": "1168080"
  },
  {
    "start": "1163000",
    "end": "1163000"
  },
  {
    "text": "configuration which is a structure which is one of the field have mac policy operations pointer",
    "start": "1168080",
    "end": "1174000"
  },
  {
    "text": "ma po policy operations basically a pointer to a Sandbox hooks so if you look for seid Bell",
    "start": "1174000",
    "end": "1182080"
  },
  {
    "text": "sandbox policy string in a sandbox extension we'll find a reference to it",
    "start": "1182080",
    "end": "1188520"
  },
  {
    "text": "and a few uh bites to up we will see a if a few bites bottom story we will",
    "start": "1188520",
    "end": "1195400"
  },
  {
    "text": "see a pointer to MK policy operations and and the M policy operation will look",
    "start": "1195400",
    "end": "1201799"
  },
  {
    "text": "like this so it's like an array which contain a pointers to hooks so we can null out every or N Out just interesting",
    "start": "1201799",
    "end": "1209679"
  },
  {
    "text": "hooks so here is an incomplete list of uh sandbox hooks for example as we see",
    "start": "1209679",
    "end": "1215760"
  },
  {
    "start": "1210000",
    "end": "1210000"
  },
  {
    "text": "bind good check it uh St good check it uh Mount good check it R name and so on",
    "start": "1215760",
    "end": "1221559"
  },
  {
    "text": "so we can disable only like partial hooks the next thing is a MC Mount and",
    "start": "1221559",
    "end": "1227720"
  },
  {
    "text": "my friend Vlad will talk more about that okay let's discuss mm",
    "start": "1227720",
    "end": "1235679"
  },
  {
    "text": "problem so if you need to change iOS configuration uh install persistent and",
    "start": "1235679",
    "end": "1242159"
  },
  {
    "text": "uh many other examples uh you have to remount root partition which is uh read",
    "start": "1242159",
    "end": "1248559"
  },
  {
    "text": "only access by default without",
    "start": "1248559",
    "end": "1252559"
  },
  {
    "text": "jailbreak but you can just uh call MC Mount uh",
    "start": "1254000",
    "end": "1259840"
  },
  {
    "text": "CIS because there are many checks inside it uh so we have two general ways how we",
    "start": "1259840",
    "end": "1268200"
  },
  {
    "text": "can uh bypass this problem first we can uh just patch these checks first you can",
    "start": "1268200",
    "end": "1275840"
  },
  {
    "text": "uh call Mar Mount command function so actually Mar Mount",
    "start": "1275840",
    "end": "1283640"
  },
  {
    "text": "uh call Mark Mount after all it checks",
    "start": "1283640",
    "end": "1289200"
  },
  {
    "text": "so if you look at MC Mount CIS uh you will see code that uh",
    "start": "1291559",
    "end": "1298640"
  },
  {
    "text": "prevents uh mounting uh partitions with other flags other than R",
    "start": "1298640",
    "end": "1304640"
  },
  {
    "text": "only so if we patch this check we can call Mount function from user",
    "start": "1304640",
    "end": "1312840"
  },
  {
    "text": "mode but that's not all because um there are additional checks inside",
    "start": "1312840",
    "end": "1319080"
  },
  {
    "text": "white weight willum manager Cur extension uh meod called uh map",
    "start": "1319080",
    "end": "1326320"
  },
  {
    "text": "fire so root partition is still right only",
    "start": "1326320",
    "end": "1334320"
  },
  {
    "text": "AIS okay first of all we need a patch M fire uh check and from IOS 9 32 first",
    "start": "1334919",
    "end": "1344600"
  },
  {
    "text": "beta uh first appeared new function called P can has configuration so you",
    "start": "1344600",
    "end": "1350360"
  },
  {
    "text": "need to bypass this check",
    "start": "1350360",
    "end": "1353840"
  },
  {
    "start": "1354000",
    "end": "1354000"
  },
  {
    "text": "too uh here you can see two checks inside map fire",
    "start": "1355720",
    "end": "1361000"
  },
  {
    "text": "function uh first call pay can has configuration uh you can uh patch it in",
    "start": "1361000",
    "end": "1368840"
  },
  {
    "text": "different ways for example you can patch just got inside white volum volume",
    "start": "1368840",
    "end": "1373919"
  },
  {
    "text": "manager and uh you can just force uh",
    "start": "1373919",
    "end": "1380039"
  },
  {
    "text": "return one in the p and has configuration function itself and second",
    "start": "1380039",
    "end": "1385200"
  },
  {
    "text": "check check is right protected flag uh of partition class so you can patch this",
    "start": "1385200",
    "end": "1392320"
  },
  {
    "text": "uh bite directly or you can just patch this check but for that you need uh",
    "start": "1392320",
    "end": "1398600"
  },
  {
    "text": "bypass kernal patch protection it's uh next big topic and Alex will explain",
    "start": "1398600",
    "end": "1406200"
  },
  {
    "text": "you hello everyone so as you noticed we need to make quite",
    "start": "1406440",
    "end": "1412400"
  },
  {
    "text": "a few patches and current patch protection is a thing preventing us from doing that so let let's take a look how",
    "start": "1412400",
    "end": "1419320"
  },
  {
    "text": "it works and how to bypass it so kernal par protections randomly checks for",
    "start": "1419320",
    "end": "1424760"
  },
  {
    "start": "1422000",
    "end": "1422000"
  },
  {
    "text": "curent Pages uh translation tables and some system registers it's also executing on exception level three so we",
    "start": "1424760",
    "end": "1431440"
  },
  {
    "text": "can't really disable it but uh we can apply patches and remove it between",
    "start": "1431440",
    "end": "1436600"
  },
  {
    "text": "checks but if there any other way yes it is so let's dive into the deep into the",
    "start": "1436600",
    "end": "1443360"
  },
  {
    "start": "1441000",
    "end": "1441000"
  },
  {
    "text": "iOS and find out how it works so it all starts with uh",
    "start": "1443360",
    "end": "1449240"
  },
  {
    "text": "interrupt the interrupt uh Handler sets the CP ACR access trap on el1 and then",
    "start": "1449240",
    "end": "1458400"
  },
  {
    "text": "it sets the smid or 14 point register uh instruction trap for E zero then it",
    "start": "1458400",
    "end": "1464559"
  },
  {
    "text": "disables interrupts to prevent uh going to this Handler again then on exception",
    "start": "1464559",
    "end": "1469600"
  },
  {
    "text": "level zero uh when smid or floating Point instru instruction is executed uh",
    "start": "1469600",
    "end": "1475520"
  },
  {
    "text": "the Trap is triggered where the kernel is emulating a floating Point instruction or smid instruction and then",
    "start": "1475520",
    "end": "1481600"
  },
  {
    "text": "it's actually trying to remove the smid Trap uh by changing CP ACR register this",
    "start": "1481600",
    "end": "1490120"
  },
  {
    "text": "triggers another trap in the exception level three and there the kernel checks",
    "start": "1490120",
    "end": "1496000"
  },
  {
    "text": "all the hashes for the translation table pages and registers then it removes uh",
    "start": "1496000",
    "end": "1501679"
  },
  {
    "text": "CPAC trap and then it removes uh smid floating Point trap and finally it skips",
    "start": "1501679",
    "end": "1508399"
  },
  {
    "text": "uh jumps over the instruction the cpsr instruction in al1 then it enables interupts again so the next time it will",
    "start": "1508399",
    "end": "1516000"
  },
  {
    "text": "start it from scratch so as you can see we can't really stop K patch protection from",
    "start": "1516000",
    "end": "1521880"
  },
  {
    "text": "checking original pages but if you think about it for a moment we can't really stop k p protection from changing",
    "start": "1521880",
    "end": "1527520"
  },
  {
    "text": "original pages PES so let's say we're going to use Pages which are not so",
    "start": "1527520",
    "end": "1532880"
  },
  {
    "text": "original take a look at the translation table we have several levels and a Pages",
    "start": "1532880",
    "end": "1538279"
  },
  {
    "start": "1534000",
    "end": "1534000"
  },
  {
    "text": "now let's copy the level one table so after the copy we have",
    "start": "1538279",
    "end": "1543320"
  },
  {
    "start": "1541000",
    "end": "1541000"
  },
  {
    "text": "descriptors pointing to the original level two table now let's create another",
    "start": "1543320",
    "end": "1549279"
  },
  {
    "text": "copy of the level two table and change the scriptor in a level one table to actually point to this new uh allocated",
    "start": "1549279",
    "end": "1555840"
  },
  {
    "text": "one so this that's what we have so now repeat the same trick for the level three table like that so now we have",
    "start": "1555840",
    "end": "1564240"
  },
  {
    "text": "level three copy with all the descriptors pointing to the original pages in the kernel for the kernel so",
    "start": "1564240",
    "end": "1571399"
  },
  {
    "text": "now let's allocate some pages in the kernel which we really want to patch and then update uh descriptors in a uh level",
    "start": "1571399",
    "end": "1579000"
  },
  {
    "text": "three like that so essentially we have two tables one is a original tables",
    "start": "1579000",
    "end": "1585000"
  },
  {
    "text": "table and another one is the partial copy of translation table with our Pages",
    "start": "1585000",
    "end": "1591360"
  },
  {
    "text": "patched so it all looks complicated and you actually need to consider a lot of",
    "start": "1591360",
    "end": "1598000"
  },
  {
    "text": "uh we things like granules then uh initial levels and addressing region um",
    "start": "1598000",
    "end": "1604960"
  },
  {
    "text": "in fried apple we love tools and uh in order to manipulate table translation",
    "start": "1604960",
    "end": "1611320"
  },
  {
    "start": "1605000",
    "end": "1605000"
  },
  {
    "text": "easily we actually implemented the barbecue framework so this framework helps us to walk through the descriptors",
    "start": "1611320",
    "end": "1616799"
  },
  {
    "text": "on various levels and modif ified if necessary then it's a C++ template based",
    "start": "1616799",
    "end": "1623440"
  },
  {
    "text": "lightweight framework with a c wrapper so it can uh relocate tables for you in",
    "start": "1623440",
    "end": "1630480"
  },
  {
    "text": "just literally a couple of lines and also the big bonus it can check some of",
    "start": "1630480",
    "end": "1636120"
  },
  {
    "text": "your dump mistakes on the compile time so but let's get back to the bypass",
    "start": "1636120",
    "end": "1641240"
  },
  {
    "text": "technique though as I mentioned above the uh CPAC access triggers K PCH",
    "start": "1641240",
    "end": "1646760"
  },
  {
    "text": "protection checks but let's replace it with branches link uh uh instruction to",
    "start": "1646760",
    "end": "1652559"
  },
  {
    "text": "some CPAC trampoline which we place somewhere in a kernel like replacing a",
    "start": "1652559",
    "end": "1657880"
  },
  {
    "text": "knops and this trampoline actually jumps to the Shell Code let's call it CPAC",
    "start": "1657880",
    "end": "1663240"
  },
  {
    "text": "hook in this CPAC hook we are restoring the original values of ttbr then we",
    "start": "1663240",
    "end": "1669919"
  },
  {
    "text": "actually trigger uh CP uh kpp by accessing cpcr and then when everything",
    "start": "1669919",
    "end": "1676679"
  },
  {
    "text": "is done and all checks are performed we're restoring the uh our fake values of",
    "start": "1676679",
    "end": "1682279"
  },
  {
    "text": "ttbr but is it it uh well not really because our devices like to sleep and",
    "start": "1682279",
    "end": "1688080"
  },
  {
    "text": "when they wake the kernel actually restores all the CPU State uh and during",
    "start": "1688080",
    "end": "1694519"
  },
  {
    "text": "this restore process there's a functions called ttbr restore and our fake tbrs are actually overwritten with original",
    "start": "1694519",
    "end": "1700840"
  },
  {
    "text": "ones so like the address of this T TBI restore is calculated uh based on a",
    "start": "1700840",
    "end": "1707279"
  },
  {
    "text": "virtual base plus some offset we can't change this offset but what we can do we can replace a virtual base so if we hack",
    "start": "1707279",
    "end": "1716279"
  },
  {
    "text": "it like uh you can see this formula on the right and then we are falling into",
    "start": "1716279",
    "end": "1721840"
  },
  {
    "text": "the ttbi restore hook function and this ttpr restore function which is a Shell Code obviously we can restore the",
    "start": "1721840",
    "end": "1728600"
  },
  {
    "text": "virtual base then we need to restore the V register then we need to set our fake",
    "start": "1728600",
    "end": "1734559"
  },
  {
    "text": "ttbi registers and then call the original ttbi regor skipping just two first instructions now kpp is finally",
    "start": "1734559",
    "end": "1740640"
  },
  {
    "text": "bypassed but this tricker unfortunately Clos closed in um iOS 10.2 but there's",
    "start": "1740640",
    "end": "1747039"
  },
  {
    "text": "another one when you can hook uh the deep sleep and ID sleep handlers as well but it's a lot more involved",
    "start": "1747039",
    "end": "1753919"
  },
  {
    "text": "unfortunately so after that you may like to have all the same patches and the Cals applied when your device rebooted",
    "start": "1753919",
    "end": "1761880"
  },
  {
    "start": "1755000",
    "end": "1755000"
  },
  {
    "text": "in order to do it this is called persistence and in order to do that you need to find service that spawns on boot",
    "start": "1761880",
    "end": "1767440"
  },
  {
    "text": "then you need to make sure that it's actually running and rout and then you need to find some user land Cod sign bug",
    "start": "1767440",
    "end": "1773960"
  },
  {
    "text": "and then using a Sim link to a system service you can exact this binary to bypass Cod",
    "start": "1773960",
    "end": "1780159"
  },
  {
    "text": "sign so in our jailbreak we're using JavaScript core interpreter which is signed by Apple and what's good about it",
    "start": "1780159",
    "end": "1786799"
  },
  {
    "start": "1781000",
    "end": "1781000"
  },
  {
    "text": "it can execute code and RX segment so we are copying in at a system service to be spawn and boot so this what it looks",
    "start": "1786799",
    "end": "1793880"
  },
  {
    "text": "like so we're replacing RT by DD service by GC and then we're creating early boot",
    "start": "1793880",
    "end": "1801000"
  },
  {
    "start": "1794000",
    "end": "1794000"
  },
  {
    "text": "uh file which is essentially a JavaScript exploit with a payload so when the system starts it execute n by D",
    "start": "1801000",
    "end": "1807440"
  },
  {
    "text": "minus uh early boot which essentially JavaScript with JavaScript exploit",
    "start": "1807440",
    "end": "1813120"
  },
  {
    "text": "so it's it looks easy but the payload needs to be crafted specially because uh",
    "start": "1813120",
    "end": "1818720"
  },
  {
    "text": "you don't have mat order or anything like that in there so our payload doesn't actually have input and uh we",
    "start": "1818720",
    "end": "1826240"
  },
  {
    "text": "need to find in the memory DLC then we need to update address then we need to resolve all the UT and then",
    "start": "1826240",
    "end": "1833480"
  },
  {
    "text": "finally we using some code sign bypass trick we need to run our jailbreak",
    "start": "1833480",
    "end": "1838640"
  },
  {
    "text": "binary to restore all the patches in the kernel so after that it's nice actually",
    "start": "1838640",
    "end": "1843840"
  },
  {
    "text": "to have some SSH access to your I device so you can do this in two different ways you can install CD or copy Dr drop beer",
    "start": "1843840",
    "end": "1851399"
  },
  {
    "text": "then on a desktop computer you just using TCP relay which creates a tunnel to your device and then you use regular",
    "start": "1851399",
    "end": "1857080"
  },
  {
    "text": "SSH with a password Alpine to access your device but it's not really needed",
    "start": "1857080",
    "end": "1862720"
  },
  {
    "start": "1862000",
    "end": "1862000"
  },
  {
    "text": "for security researchers but for most people uh jailbreaks means CD and to",
    "start": "1862720",
    "end": "1868120"
  },
  {
    "text": "install CD you need to copy tar somewhere then you need to use tar to extract CD bootstrap to put all the",
    "start": "1868120",
    "end": "1873399"
  },
  {
    "text": "files to the right places and then if you don't want cdia to sim link all the system files to some to bigger partition",
    "start": "1873399",
    "end": "1879880"
  },
  {
    "text": "because system partition is pretty small uh we need to create a CD no stach file",
    "start": "1879880",
    "end": "1885480"
  },
  {
    "text": "which prevents cdia from doing this then you need to use UI cache to flash UI and",
    "start": "1885480",
    "end": "1891000"
  },
  {
    "text": "finally get a CD icon on the screen as we know apple is working hard",
    "start": "1891000",
    "end": "1896760"
  },
  {
    "start": "1895000",
    "end": "1895000"
  },
  {
    "text": "on security enhancements and in iOS T they introduced quite a few so let's uh",
    "start": "1896760",
    "end": "1902399"
  },
  {
    "text": "the first one is like next new Heap layout but it's very well described and",
    "start": "1902399",
    "end": "1907679"
  },
  {
    "text": "by various security researchers and many many write tabs and articles so I would like to concentrate on ay sandbox and uh",
    "start": "1907679",
    "end": "1913960"
  },
  {
    "text": "curent patch protection So speaking about ay the introduced new function Mis",
    "start": "1913960",
    "end": "1919279"
  },
  {
    "text": "validate signature and copy info which is actually using CD hash and can be hooked or replaced with just CDF equal",
    "start": "1919279",
    "end": "1926720"
  },
  {
    "text": "to bypass code sign easily then they fix the race condition inv validate code directory hash and Demon so you can't",
    "start": "1926720",
    "end": "1932840"
  },
  {
    "text": "replace file uh after signature is checked but policy patches still",
    "start": "1932840",
    "end": "1939120"
  },
  {
    "text": "work so for for sandbox they introduced new profiles new operations and new hooks so if you need to get uh something",
    "start": "1939120",
    "end": "1948039"
  },
  {
    "text": "functions to work so you need to patch some of these new Hooks and policies as we described above but most important",
    "start": "1948039",
    "end": "1955440"
  },
  {
    "text": "thing is uh Capa enhancements so they introduce new Kel cach layout when the",
    "start": "1955440",
    "end": "1960960"
  },
  {
    "text": "code and the uh data cons they stitch together so and God segments actually protected so no more like easy Hooks and",
    "start": "1960960",
    "end": "1969559"
  },
  {
    "text": "interesting thing they actually introduced some Hardware mitigations on iOS 7 iOS 7 plus so let's talk about",
    "start": "1969559",
    "end": "1975039"
  },
  {
    "start": "1975000",
    "end": "1975000"
  },
  {
    "text": "this Hardware mitigations so they started to use things called amcc which we believe stands for apple memory",
    "start": "1975039",
    "end": "1981320"
  },
  {
    "text": "control chip or Access Memory control chip which watches memory region for any access and it prevents writing inside",
    "start": "1981320",
    "end": "1987639"
  },
  {
    "text": "the region or execute code outside the region so let's take a look how it's initialized so on a start Kel performs",
    "start": "1987639",
    "end": "1996080"
  },
  {
    "text": "several stages to initialize itself and one of these stages is actually uh amcc",
    "start": "1996080",
    "end": "2001799"
  },
  {
    "text": "initialization so they're actually taking the prelink uh virtual address and then last virtual address of the",
    "start": "2001799",
    "end": "2007960"
  },
  {
    "text": "segment and then converting them to physical address then they using these values to set amcc registers then they",
    "start": "2007960",
    "end": "2014960"
  },
  {
    "text": "station these values as well in the global variables as we know after divde wakes we need to restore the CPU state",
    "start": "2014960",
    "end": "2021600"
  },
  {
    "text": "so what happens in a low level uh reset Handler they're actually restoring all",
    "start": "2021600",
    "end": "2027039"
  },
  {
    "text": "the amcc registers from the stash ones so now we have PCH protector working back",
    "start": "2027039",
    "end": "2033600"
  },
  {
    "text": "again so what is the future of jailbreaks it's not that shiny because iOS is getting more and more secure and",
    "start": "2033600",
    "end": "2040000"
  },
  {
    "start": "2035000",
    "end": "2035000"
  },
  {
    "text": "more and more stuff has moved to the hardware side also exploits uh will be",
    "start": "2040000",
    "end": "2045120"
  },
  {
    "text": "more valuable and unlikely appear on the public but there will be still bugs and nice write ups and researchers will",
    "start": "2045120",
    "end": "2052440"
  },
  {
    "text": "share some researchers will share information for free so there is still hope now let's go to the demo and I",
    "start": "2052440",
    "end": "2059638"
  },
  {
    "text": "would like to note that if we have a different exploit chains for the um for",
    "start": "2059639",
    "end": "2065760"
  },
  {
    "text": "our jailbreaks the actual structure and and the flow is almost identical so let's start with 4.1 jailbreak and I",
    "start": "2065760",
    "end": "2072638"
  },
  {
    "text": "would like to ask Max to help me with that thank you Alex yeah so uh we made a various jailbreaks and we start for them",
    "start": "2072639",
    "end": "2079158"
  },
  {
    "text": "in an 841 jailbreak so the general idea that we made the same structure in all",
    "start": "2079159",
    "end": "2085079"
  },
  {
    "text": "jailbreaks for iOS 8 I 9 I 10 uh and we're trying to connect oops",
    "start": "2085079",
    "end": "2092240"
  },
  {
    "text": "we're trying to connect to a device uh using the known port on a device",
    "start": "2092240",
    "end": "2098079"
  },
  {
    "text": "Local Host um TCP relay and local host on a known address so as we see the",
    "start": "2098079",
    "end": "2104880"
  },
  {
    "text": "connection got refused so we're running I device Sy log to show like step by step how the",
    "start": "2104880",
    "end": "2111040"
  },
  {
    "text": "exploit works so we're starting from a patch from exploiting a kernel finding the patches uh writing patches to a",
    "start": "2111040",
    "end": "2119680"
  },
  {
    "text": "kernel and finally sping SSH so now if you're trying to connect",
    "start": "2119680",
    "end": "2124920"
  },
  {
    "text": "to a device the connection will succeed and to prove that there is like",
    "start": "2124920",
    "end": "2130720"
  },
  {
    "text": "basically the same Kel version that we just found it we'll compare the ex",
    "start": "2130720",
    "end": "2135800"
  },
  {
    "text": "versions here so as we see the EX version is the",
    "start": "2135800",
    "end": "2141480"
  },
  {
    "text": "same yeah the next jail break is IOS 9 jailbreak and this one differs from",
    "start": "2141680",
    "end": "2147240"
  },
  {
    "text": "other ones because it has a persistence in it yeah again the same structure so",
    "start": "2147240",
    "end": "2152280"
  },
  {
    "text": "we trying to connect a device for an N Port connection got infused uh now we filter uh everything",
    "start": "2152280",
    "end": "2159359"
  },
  {
    "text": "in I devic loog to show only the our exploit and connection and connected and",
    "start": "2159359",
    "end": "2165400"
  },
  {
    "text": "disconnected in events so exploit got started Kel dump it patches",
    "start": "2165400",
    "end": "2172720"
  },
  {
    "text": "applied we install the persistent binary which means that the next time device will be booted it will run our exploit",
    "start": "2172720",
    "end": "2179280"
  },
  {
    "text": "once again now I try to connect to device with the same",
    "start": "2179280",
    "end": "2185280"
  },
  {
    "text": "address and it suceeds",
    "start": "2185280",
    "end": "2189560"
  },
  {
    "text": "we got a shell uh we use your name- a to prove that xersion is the same we just",
    "start": "2191000",
    "end": "2199720"
  },
  {
    "text": "exploited yeah so the next thing I'm going to reboot a device and prove that",
    "start": "2201280",
    "end": "2207359"
  },
  {
    "text": "uh explo will be run once again when the system will be booted it may take some time as caral load car a load all the",
    "start": "2207359",
    "end": "2214839"
  },
  {
    "text": "extensions it load all the systems services so it's usually based on a on a",
    "start": "2214839",
    "end": "2220800"
  },
  {
    "text": "device type it's pretty fast on 6s and stuff unfortunately we can't have logs from",
    "start": "2220800",
    "end": "2227160"
  },
  {
    "text": "our payload so like we're waiting yeah yeah as we see here after device got",
    "start": "2227160",
    "end": "2232440"
  },
  {
    "text": "connected exploit starts again but now we are not installing uh the persistent binary and it's found in the SSH so",
    "start": "2232440",
    "end": "2240839"
  },
  {
    "text": "we're trying to connect the device once again using the same address we got a shell",
    "start": "2240839",
    "end": "2248640"
  },
  {
    "text": "we use your name d a again we like comparing the exu",
    "start": "2248640",
    "end": "2256760"
  },
  {
    "text": "versions on a in a log and device we just found it they the same the next",
    "start": "2256760",
    "end": "2261880"
  },
  {
    "text": "demo is IOS 10 and you please not that it has exactly same flow so but the",
    "start": "2261880",
    "end": "2268640"
  },
  {
    "text": "exploit chain is actually different yeah we just just want to show is all the demo that the structure is the same uh",
    "start": "2268640",
    "end": "2274720"
  },
  {
    "text": "but the only one thing is different the ACT exploitation so again trying to connect",
    "start": "2274720",
    "end": "2281440"
  },
  {
    "text": "the device connection go to Fus it running General",
    "start": "2281440",
    "end": "2286280"
  },
  {
    "text": "exploit which you'll find and apply all the Pates and Spa in",
    "start": "2286480",
    "end": "2292160"
  },
  {
    "text": "SSH now if we try to connect to a device with the same",
    "start": "2292960",
    "end": "2299040"
  },
  {
    "text": "address we got the shell spawned you name the A and the version",
    "start": "2299319",
    "end": "2305440"
  },
  {
    "text": "is the same the next is TV OS which is a different device but apparently in the",
    "start": "2305440",
    "end": "2310800"
  },
  {
    "text": "same structure yeah look we get a Apple TV 4 and we say okay so it's pretty",
    "start": "2310800",
    "end": "2316319"
  },
  {
    "text": "similar than the is why not why not exploit the T so this is how it looks like again",
    "start": "2316319",
    "end": "2324000"
  },
  {
    "text": "we're trying to SSH to it's not working uh we take the similar exploits",
    "start": "2324000",
    "end": "2331160"
  },
  {
    "text": "we use it for is 10 with a some various modification to kle patch protector",
    "start": "2331160",
    "end": "2338640"
  },
  {
    "text": "looking a base dumping a kernel finding a patches sping",
    "start": "2339960",
    "end": "2345400"
  },
  {
    "text": "SSH now we try to SSH to a TV so the TV that we just show uh it was Apple TV 4",
    "start": "2352400",
    "end": "2360760"
  },
  {
    "text": "running TV 10.1 so as you see we got a shell spaed",
    "start": "2360760",
    "end": "2366960"
  },
  {
    "text": "on and with un name this a we can prove that the version is the same that just found it finally watch totally different",
    "start": "2366960",
    "end": "2375079"
  },
  {
    "text": "device but who would have thought same structure yeah so uh we got a watch ask",
    "start": "2375079",
    "end": "2381240"
  },
  {
    "text": "hm why not why not try to Pound The Watch so it's it's the explanation is a",
    "start": "2381240",
    "end": "2387359"
  },
  {
    "text": "little bit different uh as you cannot connect directly to a watch so we need to set up a Bluetooth proxy over the",
    "start": "2387359",
    "end": "2395000"
  },
  {
    "text": "watch and the uh iOS device Dev and proxy between the device and a Mac it",
    "start": "2395000",
    "end": "2400960"
  },
  {
    "text": "makes some time cuz watch is slow device and we have to use xcode unfortunately",
    "start": "2400960",
    "end": "2406079"
  },
  {
    "text": "yeah uh unfortunately I devices log cannot read the watch logs so that's why we need to use uh ex code output to show",
    "start": "2406079",
    "end": "2413920"
  },
  {
    "text": "how the exploit works it will take some time because uh",
    "start": "2413920",
    "end": "2420000"
  },
  {
    "text": "watch is pretty slow device unfortunately but like let's be",
    "start": "2420000",
    "end": "2425480"
  },
  {
    "text": "patient okay it's running it's just a couple of",
    "start": "2425480",
    "end": "2430680"
  },
  {
    "text": "seconds yeah we get exploit starting on a watch it's obviously it will be more",
    "start": "2436079",
    "end": "2442480"
  },
  {
    "text": "slowly like Kel dump sometimes take like for 20 seconds for us yeah now it's a",
    "start": "2442480",
    "end": "2448920"
  },
  {
    "text": "bit faster yeah we got SSH SP it so the next step what we need to do we need to set up the Bluetooth proxy over the",
    "start": "2448920",
    "end": "2456000"
  },
  {
    "text": "device and a port 22 on a watch I use a script that I written to bind Port 533",
    "start": "2456000",
    "end": "2462839"
  },
  {
    "text": "to a watch Port 22 and I just SSH to this non port on a",
    "start": "2462839",
    "end": "2468880"
  },
  {
    "text": "device as we see the shell got founded on a watch you got your name we got a root",
    "start": "2468880",
    "end": "2476079"
  },
  {
    "text": "EXO version on a watch one two and it's exactly the same we just show in X code",
    "start": "2476079",
    "end": "2482960"
  },
  {
    "text": "so the watch is founded okay let's up this talk so",
    "start": "2482960",
    "end": "2488760"
  },
  {
    "start": "2486000",
    "end": "2486000"
  },
  {
    "text": "jailbreak is totally doable with just public bugs and public write ups and you",
    "start": "2488760",
    "end": "2494440"
  },
  {
    "text": "can use patches and uh description for kpp bypass from this St to Jil all",
    "start": "2494440",
    "end": "2500359"
  },
  {
    "text": "devices and ex yeah so the check the X X is a great source of",
    "start": "2500359",
    "end": "2508200"
  },
  {
    "text": "bugs and possible zero days and as well as doing a really great um help to",
    "start": "2508200",
    "end": "2514760"
  },
  {
    "text": "understand how the kernel works so we we spend a lot of time time uh inspecting the ex servces thank you very much uh we have",
    "start": "2514760",
    "end": "2521800"
  },
  {
    "text": "Fri app team um if you have question follow us on Twitter and I think we still have a time for questions",
    "start": "2521800",
    "end": "2530440"
  },
  {
    "text": "[Applause]",
    "start": "2533650",
    "end": "2537510"
  }
]