[
  {
    "text": "hello everyone my name is Kazuki matu and thank you for coming to my talk since there's lots of awesome",
    "start": "2760",
    "end": "9360"
  },
  {
    "text": "presentations doing in parallel so here I would like to give some talks about ufi biocurity it's",
    "start": "9360",
    "end": "17240"
  },
  {
    "text": "basically about putting a back door inside a small ROM chip on the pcie devices and investigating what can they",
    "start": "17240",
    "end": "25519"
  },
  {
    "text": "do so before going into the talk let me quickly introduce myself I I am a security researcher at ffri security",
    "start": "25519",
    "end": "33200"
  },
  {
    "text": "which is a security company in Japan but last year I was a master student at W",
    "start": "33200",
    "end": "39239"
  },
  {
    "text": "University and this research was done during my Master's Degree with my current",
    "start": "39239",
    "end": "45520"
  },
  {
    "text": "company my interests are mainly in ufi security but I'm also interested in",
    "start": "45520",
    "end": "50800"
  },
  {
    "text": "justic Computing Windows Kel and most of that negative",
    "start": "50800",
    "end": "57239"
  },
  {
    "text": "Rings here are my cont contributors left are the security researchers in my company and right is my professor at my",
    "start": "58120",
    "end": "65439"
  },
  {
    "text": "University I would like to express my gratitude here again uh they gave me a lots of useful advices even though their",
    "start": "65439",
    "end": "71840"
  },
  {
    "text": "expertise are over in different",
    "start": "71840",
    "end": "76079"
  },
  {
    "text": "areas okay so let's get into the main topic these five keyword are going to be",
    "start": "77040",
    "end": "82280"
  },
  {
    "text": "important in this talk first bias is a system firware that initializes the OS",
    "start": "82280",
    "end": "88400"
  },
  {
    "text": "and boost the Mach sorry initializes the hardware and boost the and ufi is a",
    "start": "88400",
    "end": "94320"
  },
  {
    "text": "standard for the buyers ufi defines seven boo phases from",
    "start": "94320",
    "end": "99960"
  },
  {
    "text": "uh Power on to shutdown but you don't have to remember all these in my presentations we only focus on this dexi",
    "start": "99960",
    "end": "106640"
  },
  {
    "text": "phase where most of the devices are abstracted by dexi modules or dexi",
    "start": "106640",
    "end": "113439"
  },
  {
    "text": "drivers IND dexy modules abstracts the access to the device by creating uifi",
    "start": "113439",
    "end": "119280"
  },
  {
    "text": "protocol so for example there is simple file system protocol for accessing",
    "start": "119280",
    "end": "125320"
  },
  {
    "text": "diss most of the dexi modules are unloaded before the OS boots up however",
    "start": "125320",
    "end": "131440"
  },
  {
    "text": "some persist in memory during runtime and those are called runtime dexi",
    "start": "131440",
    "end": "137920"
  },
  {
    "text": "drivers next is about what is Oram AKA option ROMs Oram is a small membership",
    "start": "139239",
    "end": "146200"
  },
  {
    "text": "on the pcie devices and it contains nexi drivers that initializes this device so",
    "start": "146200",
    "end": "153000"
  },
  {
    "text": "if you plug this PC on E device and boost the machine the BIOS will load the dexi modules from this Oram and use it",
    "start": "153000",
    "end": "160159"
  },
  {
    "text": "to initialize and use this device orams are present both in",
    "start": "160159",
    "end": "165560"
  },
  {
    "text": "external devices like these and there are also in internal devices well not all PCI devices have",
    "start": "165560",
    "end": "173519"
  },
  {
    "text": "ORS but they are mostly present in network cards storage devices graphic",
    "start": "173519",
    "end": "178560"
  },
  {
    "text": "cards and adapters what's inside this Oram is actually",
    "start": "178560",
    "end": "183959"
  },
  {
    "text": "different between Legacy bias and ufi but in this St we only focus on",
    "start": "183959",
    "end": "191120"
  },
  {
    "text": "ufi so keeping the previous background in mind this research is about",
    "start": "192360",
    "end": "197519"
  },
  {
    "text": "investigating what kind the back doors stored inside the sorum do what are the merits of putting it there and how to",
    "start": "197519",
    "end": "204720"
  },
  {
    "text": "defend against them we investigated this by implementing three proof of Concepts",
    "start": "204720",
    "end": "210200"
  },
  {
    "text": "or own factors and each will be described in more details",
    "start": "210200",
    "end": "216080"
  },
  {
    "text": "later so to begin with I will expl explain the merits of putting a factor",
    "start": "216599",
    "end": "221640"
  },
  {
    "text": "inside Oram the First Merit is that it is a stealthier place to put moreare and",
    "start": "221640",
    "end": "227319"
  },
  {
    "text": "other than HD or SSD which is a common place to put mware most DFI mware places",
    "start": "227319",
    "end": "233439"
  },
  {
    "text": "itself and SBI flashship well there are lots of tools",
    "start": "233439",
    "end": "238959"
  },
  {
    "text": "to read flashship content and some edrs are beginning to look displac too so it",
    "start": "238959",
    "end": "244680"
  },
  {
    "text": "is less detectable but it is getting more detectable however there are no versal",
    "start": "244680",
    "end": "252079"
  },
  {
    "text": "ways to read or contents there are no tools for that so placing it here will",
    "start": "252079",
    "end": "257359"
  },
  {
    "text": "make it even more stealthier the second Merit is that back",
    "start": "257359",
    "end": "262759"
  },
  {
    "text": "doors inside or arm can directly infect ufi layer without touching usand or",
    "start": "262759",
    "end": "268360"
  },
  {
    "text": "kernel so most malas or bors have to be installed from the userland installer so",
    "start": "268360",
    "end": "274600"
  },
  {
    "text": "it has to be top down infection however for oral moas it is opposite and it is",
    "start": "274600",
    "end": "280600"
  },
  {
    "text": "bottom up infection so overall Factor inside Oram",
    "start": "280600",
    "end": "286160"
  },
  {
    "text": "can be stealthier and more",
    "start": "286160",
    "end": "290160"
  },
  {
    "text": "powerful so now we understand merits but how can we insert factors inside",
    "start": "292120",
    "end": "298320"
  },
  {
    "text": "oron one Cas is when device venders puts factors inside their own devices during",
    "start": "298320",
    "end": "303759"
  },
  {
    "text": "the supply chain we especially focus on this scenario because when you want to get a",
    "start": "303759",
    "end": "309440"
  },
  {
    "text": "PC if you can trust the PC manufacturers or the BIOS spender you can say that the",
    "start": "309440",
    "end": "315240"
  },
  {
    "text": "SP flashship does not contain Qi factors however PC manufacturers",
    "start": "315240",
    "end": "322199"
  },
  {
    "text": "assembles a lots of device procures lots of devices from device venders and assembles the PC so you have to trust",
    "start": "322199",
    "end": "329400"
  },
  {
    "text": "all those device Benders that they didn't include back doors inside their orams to say that the Oram doesn't",
    "start": "329400",
    "end": "336720"
  },
  {
    "text": "contain a back door the second case is when a third party attackers writes backos inside the",
    "start": "336720",
    "end": "343639"
  },
  {
    "text": "devices or ROM and sell the device through online marketplaces such as",
    "start": "343639",
    "end": "349199"
  },
  {
    "text": "Amazon and the rest of the cases are common scenarios it can be installed",
    "start": "349199",
    "end": "354840"
  },
  {
    "text": "from the user mode installer through multiple stages of infection and it can be",
    "start": "354840",
    "end": "360479"
  },
  {
    "text": "um infected from the physical axis evil made",
    "start": "360479",
    "end": "365000"
  },
  {
    "text": "attacks there are existing research that puts mware inside option ROMs however",
    "start": "366319",
    "end": "372000"
  },
  {
    "text": "there are only few and none of them focuses only on or RS in any study Oram is used for",
    "start": "372000",
    "end": "379599"
  },
  {
    "text": "auxiliary purposes by ufi Mo for ensuring persistance or for a temporary",
    "start": "379599",
    "end": "386280"
  },
  {
    "text": "buffer for Lal movement therefore existing research has not focused on the infection routs",
    "start": "386280",
    "end": "393360"
  },
  {
    "text": "specific to the oron bors or the advantages of infecting ufal ler",
    "start": "393360",
    "end": "398800"
  },
  {
    "text": "directly without touching user land so taking these factors into account this",
    "start": "398800",
    "end": "404240"
  },
  {
    "text": "research is Noble in the sense that we only focus on the oron",
    "start": "404240",
    "end": "410039"
  },
  {
    "text": "vors while oron bors can infect ufi layer directly depending on the tasks",
    "start": "412080",
    "end": "418199"
  },
  {
    "text": "attackers want to achieve it may be difficult to implement only in the ufi layer so depending on the functions you",
    "start": "418199",
    "end": "426039"
  },
  {
    "text": "want the factors to have there are three ways to infect up to which layer from",
    "start": "426039",
    "end": "432400"
  },
  {
    "text": "ufi so if you only infect ufi you can do such things as reading and writing files",
    "start": "432400",
    "end": "438680"
  },
  {
    "text": "and do some simple network communications however we cannot perform time consuming tasks because it will",
    "start": "438680",
    "end": "446039"
  },
  {
    "text": "make the boot time longer which is suspicious therefore you cannot also make",
    "start": "446039",
    "end": "451599"
  },
  {
    "text": "persistent network connections you can only communicate during boot now if you infect up to the kernel",
    "start": "451599",
    "end": "459520"
  },
  {
    "text": "you can perform persistent network conect network communications but you cannot use complex functions such as",
    "start": "459520",
    "end": "467440"
  },
  {
    "text": "shells finally if you infect all the way up to the user land you can basically do anything and all of the existing ufi M",
    "start": "467440",
    "end": "475080"
  },
  {
    "text": "are in this form but the higher Del layer you reach the more you can do but",
    "start": "475080",
    "end": "480919"
  },
  {
    "text": "stealthiness is sacrificed in this study we implemented",
    "start": "480919",
    "end": "487000"
  },
  {
    "text": "a proof of Concepts or run backr for each of these three",
    "start": "487000",
    "end": "492080"
  },
  {
    "text": "cases okay so in the green slides I will explain about the ufi only oron factors",
    "start": "493440",
    "end": "500199"
  },
  {
    "text": "a factor implemented using only ufi functions I think the most important",
    "start": "500199",
    "end": "506800"
  },
  {
    "text": "functions for a back door is to be in able to communicate with an attacker and",
    "start": "506800",
    "end": "512240"
  },
  {
    "text": "this can be realized Bas HTTP protocol for example and as for what data to send an",
    "start": "512240",
    "end": "519880"
  },
  {
    "text": "example will be a file which is confidential and reading and writing files can be achieved by this simple",
    "start": "519880",
    "end": "526920"
  },
  {
    "text": "file system protocol and file protocol so we can see that ufi protocol",
    "start": "526920",
    "end": "533920"
  },
  {
    "text": "is the key for implementing ufi only back doors however ufi protocols cannot be",
    "start": "533920",
    "end": "541000"
  },
  {
    "text": "used after the always SPS up it is unloaded from memory so for example uh",
    "start": "541000",
    "end": "546360"
  },
  {
    "text": "network communications using HTTP protocol cannot be achieved after the over builds up so ufi only factors can",
    "start": "546360",
    "end": "555600"
  },
  {
    "text": "only do simple and fast",
    "start": "555600",
    "end": "559639"
  },
  {
    "text": "tasks just to give you an image of what ufi protocol is like here is the",
    "start": "561519",
    "end": "566640"
  },
  {
    "text": "definition and usage of htdp prot protocol UI protocol is actually a",
    "start": "566640",
    "end": "573320"
  },
  {
    "text": "structure containing multiple functions so for example you can use this request functions to send the HTTP request and",
    "start": "573320",
    "end": "580760"
  },
  {
    "text": "you can use this configure functions to set an IP",
    "start": "580760",
    "end": "585560"
  },
  {
    "text": "address and one thing to noce that HD htdp protocol is not enabled by default",
    "start": "587040",
    "end": "594200"
  },
  {
    "text": "so you have to modify some ufi variables to enable it like this",
    "start": "594200",
    "end": "600920"
  },
  {
    "text": "also when reading files using protocols the protocols for NTFS may not be",
    "start": "602160",
    "end": "607959"
  },
  {
    "text": "installed by default so if not you will also need to add dexi modules for",
    "start": "607959",
    "end": "613320"
  },
  {
    "text": "writing and reading NTFS inside the Oram",
    "start": "613320",
    "end": "618320"
  },
  {
    "text": "image okay so I'm going to show you the demo of ufi only factors",
    "start": "618519",
    "end": "625160"
  },
  {
    "text": "uh this laptop is this command and control server",
    "start": "654519",
    "end": "659839"
  },
  {
    "text": "and we can see that the file content is sent to this command and control server during",
    "start": "663200",
    "end": "668560"
  },
  {
    "text": "boot before the starts uh this is the lock of the Biers",
    "start": "668560",
    "end": "676880"
  },
  {
    "text": "and osbs here so lastly I will introduce some use",
    "start": "676880",
    "end": "684880"
  },
  {
    "text": "cases of ufi only back doors the first is a same as the demo",
    "start": "684880",
    "end": "690240"
  },
  {
    "text": "stealing files but it can also steal application data orom can contain",
    "start": "690240",
    "end": "696000"
  },
  {
    "text": "onetime dexi drivers that can execute after the over SPS up so it can search",
    "start": "696000",
    "end": "701040"
  },
  {
    "text": "for the virtual memory and steal application data and send it via hcdp protocol on the next",
    "start": "701040",
    "end": "708519"
  },
  {
    "text": "boot the third is that it can not just only send data but it can also receive",
    "start": "708519",
    "end": "713680"
  },
  {
    "text": "data so for example if the oron VOR is a ransomware it can encrypt files during",
    "start": "713680",
    "end": "720399"
  },
  {
    "text": "booth at the time specified by an attacker so there's quite lots of things",
    "start": "720399",
    "end": "726720"
  },
  {
    "text": "we can do with is just the ufi so next in the rested slides I will",
    "start": "726720",
    "end": "733800"
  },
  {
    "text": "talk about the second back doors infecting up to the kernel layer if you want persistent connections",
    "start": "733800",
    "end": "740760"
  },
  {
    "text": "during run time you want to at least use the kernel of course it is not",
    "start": "740760",
    "end": "746199"
  },
  {
    "text": "impossible to do this only with ufi but um you can find network cards from",
    "start": "746199",
    "end": "752760"
  },
  {
    "text": "the PC tree and communicate using IO without using ufi",
    "start": "752760",
    "end": "758040"
  },
  {
    "text": "protocal however doing so will make it make the implementations really Hardware",
    "start": "758040",
    "end": "763480"
  },
  {
    "text": "specific and it is UN unpractical",
    "start": "763480",
    "end": "770440"
  },
  {
    "text": "okay as for communication methods at the kernel level there are interfaces such",
    "start": "770680",
    "end": "775920"
  },
  {
    "text": "as wsk and TDI but both are ultimately iio controls to the kernel driver called",
    "start": "775920",
    "end": "782720"
  },
  {
    "text": "afd.sys so before going to the command and",
    "start": "782720",
    "end": "789639"
  },
  {
    "text": "control Communications here we will summarize the methods of how to execute code in the kernel",
    "start": "789639",
    "end": "795519"
  },
  {
    "text": "layer installing a kernel driver is the simplest way but it is also easy to be",
    "start": "795519",
    "end": "800880"
  },
  {
    "text": "prevented by such security mechanisms like driver signature enforcement and even if DSC is disabled",
    "start": "800880",
    "end": "808639"
  },
  {
    "text": "we can still detected by enumerating driver objects using shell code is a method",
    "start": "808639",
    "end": "816399"
  },
  {
    "text": "often used by ufi Mo they hook the windows initi initialization process",
    "start": "816399",
    "end": "822360"
  },
  {
    "text": "allocate the kernel buffer and lose the Shell Code there and executed this method is more difficult",
    "start": "822360",
    "end": "828959"
  },
  {
    "text": "to detect but hooking the windows initialization process requires multiple",
    "start": "828959",
    "end": "834040"
  },
  {
    "text": "pattern matches which is unstable therefore we use the new",
    "start": "834040",
    "end": "839600"
  },
  {
    "text": "methods which is to use kernel exports directly from the runtime Lex",
    "start": "839600",
    "end": "845000"
  },
  {
    "text": "driver the advantages of this is that while ordinary kernel drivers can be",
    "start": "845000",
    "end": "851199"
  },
  {
    "text": "recognized by well-known monitoring tools or debuggers runtime dexi modules cannot be recognized by such",
    "start": "851199",
    "end": "859160"
  },
  {
    "text": "Tools in addition uh when using kernel Shell Code",
    "start": "859160",
    "end": "864800"
  },
  {
    "text": "it requires the kernel IO manager to allocate a buffer for that",
    "start": "864800",
    "end": "870440"
  },
  {
    "text": "however for run and dexi drivers uh runs on a memory area where kernel is not",
    "start": "870440",
    "end": "876720"
  },
  {
    "text": "managing so it is less likely to be detected however there are one",
    "start": "876720",
    "end": "883519"
  },
  {
    "text": "disadvantages advantages to this unlike kernel drivers runtime dexi drivers",
    "start": "883519",
    "end": "888759"
  },
  {
    "text": "cannot be assigned to driver objects therefore some kernel exports that requires driver objects or device",
    "start": "888759",
    "end": "895639"
  },
  {
    "text": "objects cannot be used",
    "start": "895639",
    "end": "899639"
  },
  {
    "text": "now we know how to use kernel functions from the dexi modules next I'll explain",
    "start": "901600",
    "end": "906800"
  },
  {
    "text": "how to perform persistent command and control Communications socket Communications",
    "start": "906800",
    "end": "912279"
  },
  {
    "text": "including windstock is actually an iio control to the afd.sys",
    "start": "912279",
    "end": "917920"
  },
  {
    "text": "so we can hook the major function of the FD doy to e Robson Communications temper",
    "start": "917920",
    "end": "924800"
  },
  {
    "text": "with it and add new Communications",
    "start": "924800",
    "end": "928880"
  },
  {
    "text": "specifically in the proof of concept code when receiving afd received by your control code it searches for magic",
    "start": "930040",
    "end": "938000"
  },
  {
    "text": "bites and if found it adds additional Communications to the socket this allows",
    "start": "938000",
    "end": "943959"
  },
  {
    "text": "Communications to be sent and received with the infected device even after the OS has",
    "start": "943959",
    "end": "951240"
  },
  {
    "text": "started so we now know that we can hook afd do cist from runtime dexi driver",
    "start": "952800",
    "end": "958399"
  },
  {
    "text": "using interal Expos directly but when can we hook this this comes down to the question of",
    "start": "958399",
    "end": "965680"
  },
  {
    "text": "how to trigger onetime dexi driver after the over boots up now runtime Services provided by ufi",
    "start": "965680",
    "end": "974440"
  },
  {
    "text": "is often called during run time so we can hook get variable ufi runtime",
    "start": "974440",
    "end": "980720"
  },
  {
    "text": "services to obtain periodic code execution so we can hook afd sis in the",
    "start": "980720",
    "end": "988199"
  },
  {
    "text": "get variable hook hook there are two hooks so here's the demo of ufi plus",
    "start": "988199",
    "end": "995120"
  },
  {
    "text": "kernel back",
    "start": "995120",
    "end": "997759"
  },
  {
    "text": "door again the laptop is the command and control server",
    "start": "1003600",
    "end": "1009440"
  },
  {
    "text": "this ufi bkdr is the magic fight and if we send that request we receive",
    "start": "1046360",
    "end": "1052280"
  },
  {
    "text": "additional request from the back",
    "start": "1052280",
    "end": "1055720"
  },
  {
    "text": "door okay so lastly I want to show you the comparison between ufi plus kernel",
    "start": "1057440",
    "end": "1062720"
  },
  {
    "text": "back doors and full kernel mware full kernel mare also does bad",
    "start": "1062720",
    "end": "1068120"
  },
  {
    "text": "things only in the kernel layer without touching userland and the these came out a little about 15 years ago but they're",
    "start": "1068120",
    "end": "1076159"
  },
  {
    "text": "not popular at all recently one reason why it's not popular recently is that the Kel security has",
    "start": "1076159",
    "end": "1083120"
  },
  {
    "text": "improved with driver signatures patchers and so on making it very difficult to",
    "start": "1083120",
    "end": "1088400"
  },
  {
    "text": "install kernel drivers",
    "start": "1088400",
    "end": "1096039"
  },
  {
    "text": "and another reason is that fork modware actually requires user land installer to",
    "start": "1096080",
    "end": "1102080"
  },
  {
    "text": "install the K uh kernel driver anyway so it is not actually a full kernel modware",
    "start": "1102080",
    "end": "1109480"
  },
  {
    "text": "however oron backdor does not require user land installer and soci security",
    "start": "1109480",
    "end": "1115440"
  },
  {
    "text": "mechanisms like driver signature enforcement are not affected therefore we can easily achieve",
    "start": "1115440",
    "end": "1123120"
  },
  {
    "text": "what for no mware wanted to achieve with oron back",
    "start": "1123120",
    "end": "1128320"
  },
  {
    "text": "doors okay so in the blue St I will explain about third back doors that will infect all the way up to the user",
    "start": "1128320",
    "end": "1135600"
  },
  {
    "text": "lamp in this case it is basically the same as existing ufi moas but by taking",
    "start": "1135600",
    "end": "1141960"
  },
  {
    "text": "advantages of the characteristics of runtime dexi modules we can make it even more difficult to",
    "start": "1141960",
    "end": "1149600"
  },
  {
    "text": "detect one big feature of a runtime dexi driver is that it can execute both in",
    "start": "1152159",
    "end": "1157919"
  },
  {
    "text": "boot phase and the runtime phase so using this feature attacker can move the",
    "start": "1157919",
    "end": "1163919"
  },
  {
    "text": "suspicious process to the Boost phase where antivirus or EDR cannot see",
    "start": "1163919",
    "end": "1169720"
  },
  {
    "text": "so for example think about the case when you want to allocate a read fite executable buffer and placing a Shell",
    "start": "1169720",
    "end": "1175600"
  },
  {
    "text": "Code there if you do this all in the user land it is suspicious but if you",
    "start": "1175600",
    "end": "1181880"
  },
  {
    "text": "use the buffer that is allocated during Booth where antivirus cannot see it will",
    "start": "1181880",
    "end": "1187559"
  },
  {
    "text": "make it less detectable when executing code in user",
    "start": "1187559",
    "end": "1195600"
  },
  {
    "text": "land some process context must be used so what process should we",
    "start": "1195600",
    "end": "1200679"
  },
  {
    "text": "use many existing ufi mod often uses wind loon XA or S SPC host XA but using",
    "start": "1200679",
    "end": "1209200"
  },
  {
    "text": "a PPL will make it more difficult to detect so as sh this figure uh window.",
    "start": "1209200",
    "end": "1217080"
  },
  {
    "text": "XA and SBC host are not ppls so edrs can",
    "start": "1217080",
    "end": "1222799"
  },
  {
    "text": "obtain process handles like this and embed a detection code inside it",
    "start": "1222799",
    "end": "1229280"
  },
  {
    "text": "however it cannot embed detection code into such processes such as this csrss",
    "start": "1229280",
    "end": "1235120"
  },
  {
    "text": "do exit which is signed by a higher PPL level than",
    "start": "1235120",
    "end": "1241520"
  },
  {
    "text": "EDR okay so in the proof of concept factors we use the csrss which is signed with",
    "start": "1241919",
    "end": "1249440"
  },
  {
    "text": "wind DCB light so I'll explain the actual flow of",
    "start": "1249440",
    "end": "1255280"
  },
  {
    "text": "user land shell Cod execution starting from the boot phase so first before the over starts EFI sets",
    "start": "1255280",
    "end": "1262679"
  },
  {
    "text": "up a buffer like this and then after the O OS has started",
    "start": "1262679",
    "end": "1268880"
  },
  {
    "text": "runtime dexi drivers build the Shell Code and ride it to the buffer now the runtime dexi module is",
    "start": "1268880",
    "end": "1276279"
  },
  {
    "text": "mapped to a high canonical address just like the Kel driver so these are shared",
    "start": "1276279",
    "end": "1281320"
  },
  {
    "text": "between every processes next since this memory area",
    "start": "1281320",
    "end": "1288760"
  },
  {
    "text": "cannot be accessed from the user land we have to modify page table of this PPL",
    "start": "1288760",
    "end": "1293919"
  },
  {
    "text": "process to make this buer accessible from userland oh and the Shell Code exists in",
    "start": "1293919",
    "end": "1301559"
  },
  {
    "text": "every processes memory but since the page table exists per process the Shell",
    "start": "1301559",
    "end": "1307600"
  },
  {
    "text": "Code cannot be accessed from the user land in other processes including",
    "start": "1307600",
    "end": "1313200"
  },
  {
    "text": "EDR so next the runtime Dex drivers calls the kernel export function called",
    "start": "1313760",
    "end": "1319480"
  },
  {
    "text": "RL create user threads to create a new thread in the PPL process and execute",
    "start": "1319480",
    "end": "1325400"
  },
  {
    "text": "the Shell Code this cannot be detected by EDR process because the PPL level is not",
    "start": "1325400",
    "end": "1331760"
  },
  {
    "text": "high enough this is the overall flow of Shell Code",
    "start": "1331760",
    "end": "1338759"
  },
  {
    "text": "execution so in the previous flow I explained that we need to modify page table to make the buffer accessible from",
    "start": "1340480",
    "end": "1347400"
  },
  {
    "text": "usland so so let me explain about this in more detail this diagram shows the flow of",
    "start": "1347400",
    "end": "1355159"
  },
  {
    "text": "how virtual address is converted to a um physical address in the full level",
    "start": "1355159",
    "end": "1360760"
  },
  {
    "text": "paging page tables are referred in the order of PML 4 PDP uh PD and Page table",
    "start": "1360760",
    "end": "1368120"
  },
  {
    "text": "and the Base address of the PML 4 table is stored in the cr3",
    "start": "1368120",
    "end": "1374480"
  },
  {
    "text": "register the information of whether a page can be access from user mode or",
    "start": "1374960",
    "end": "1380120"
  },
  {
    "text": "only from the Kel mode is managed by the user supervisor bit in each of these",
    "start": "1380120",
    "end": "1385480"
  },
  {
    "text": "entries so if you set this bit one for each of these entries that points to the",
    "start": "1385480",
    "end": "1391919"
  },
  {
    "text": "physical address of the buffer where the shell Cod is located we can make the",
    "start": "1391919",
    "end": "1397159"
  },
  {
    "text": "buffer accessible from hland however the problem here is that",
    "start": "1397159",
    "end": "1404760"
  },
  {
    "text": "the address in the page tables and in the cr3 are all in physical addresses the runtime dexi modules runs",
    "start": "1404760",
    "end": "1412400"
  },
  {
    "text": "on the virtual address after the OS starts so even if you read the through register you cannot access to the PML",
    "start": "1412400",
    "end": "1419640"
  },
  {
    "text": "for because it is in physical address also there is a kernel export to",
    "start": "1419640",
    "end": "1425000"
  },
  {
    "text": "convert physical address to the virtual address but it doesn't seem to work with the ufi related address because Kel iio",
    "start": "1425000",
    "end": "1433360"
  },
  {
    "text": "manager doesn't manage this area",
    "start": "1433360",
    "end": "1438480"
  },
  {
    "text": "therefore to modify the page table we need some ways to read and write physical",
    "start": "1438919",
    "end": "1444039"
  },
  {
    "text": "addresses a common methods to do this is to use identity page table where",
    "start": "1444039",
    "end": "1449080"
  },
  {
    "text": "physical address is mapped to exact same virtual address however the current instructions",
    "start": "1449080",
    "end": "1457080"
  },
  {
    "text": "on the runtime Dex driver is mapped to a virtual address so if you change the",
    "start": "1457080",
    "end": "1462440"
  },
  {
    "text": "whole page table with cr3 the current instruction will locate to the different",
    "start": "1462440",
    "end": "1467559"
  },
  {
    "text": "address and will crash so you cannot change the R3 register that",
    "start": "1467559",
    "end": "1473960"
  },
  {
    "text": "easily in this study we devis and used the new methods called partial identity",
    "start": "1473960",
    "end": "1481399"
  },
  {
    "text": "mapping so since the runtime dexi module is mapped to a high canonical address it",
    "start": "1481399",
    "end": "1487159"
  },
  {
    "text": "doesn't actually use the first entry of the PML for table PML",
    "start": "1487159",
    "end": "1492399"
  },
  {
    "text": "40 on the other hand identity paging can be realized with just this first entry",
    "start": "1492399",
    "end": "1498440"
  },
  {
    "text": "of the PML for so by replacing this entry of the currently using page table runtime dexi",
    "start": "1498440",
    "end": "1507120"
  },
  {
    "text": "modules can continue to operate on the virtual address and switches through the identity paging only when accessing the",
    "start": "1507120",
    "end": "1513840"
  },
  {
    "text": "physical address okay so now that the Shell Code",
    "start": "1513840",
    "end": "1520960"
  },
  {
    "text": "can be accessed from the user land all it remain is to create a thread and run",
    "start": "1520960",
    "end": "1526279"
  },
  {
    "text": "it however there is still one one problem left control flow guard will",
    "start": "1526279",
    "end": "1531440"
  },
  {
    "text": "prevent our execution well this can be easily bypassed by patching the first few bites",
    "start": "1531440",
    "end": "1538279"
  },
  {
    "text": "of the nddl functions however making the page writable is prohibited by another",
    "start": "1538279",
    "end": "1545000"
  },
  {
    "text": "security mechanisms called arbitrary Cod guard ACG so for this problem we can again",
    "start": "1545000",
    "end": "1553000"
  },
  {
    "text": "utilize partial identi mapping because whether page is writable or not is also",
    "start": "1553000",
    "end": "1559320"
  },
  {
    "text": "determined by the page table so if we use a different page table that has right permissions we can bypass CFC by",
    "start": "1559320",
    "end": "1567240"
  },
  {
    "text": "patching without worrying about",
    "start": "1567240",
    "end": "1571278"
  },
  {
    "text": "ACG okay um this is getting complicated so I'll explain CFG bypass using peral",
    "start": "1573159",
    "end": "1579200"
  },
  {
    "text": "identity mapping with this diagram so to patch the functions in the",
    "start": "1579200",
    "end": "1585520"
  },
  {
    "text": "ndl um you okay so when you write to the",
    "start": "1585520",
    "end": "1590760"
  },
  {
    "text": "virtual address of this function the original page table is referenced and since the read right bit is set to zero",
    "start": "1590760",
    "end": "1597520"
  },
  {
    "text": "here you will get an access violation however if you write to the",
    "start": "1597520",
    "end": "1602799"
  },
  {
    "text": "physical address the page table of the paral identity table is referenced because this is swapped and since the",
    "start": "1602799",
    "end": "1610559"
  },
  {
    "text": "read write bit here is set to one here because we made this page table um the",
    "start": "1610559",
    "end": "1616520"
  },
  {
    "text": "writing will be success so this allows you to bypass CFG with patching without worrying about",
    "start": "1616520",
    "end": "1625039"
  },
  {
    "text": "ACG okay so finally user land Shell Code execution should be successful without",
    "start": "1627720",
    "end": "1633760"
  },
  {
    "text": "any problems however if we go even further there is still a possibility",
    "start": "1633760",
    "end": "1639559"
  },
  {
    "text": "that it may be detected by etw event tracing for Windows etw loging function is",
    "start": "1639559",
    "end": "1646679"
  },
  {
    "text": "implemented in each kernel export so um as long as you use the kernel export",
    "start": "1646679",
    "end": "1653200"
  },
  {
    "text": "there's a possibility of getting detected by edw however this can also easily be",
    "start": "1653200",
    "end": "1661159"
  },
  {
    "text": "bypassed by patching the kernel Expos etw right and ew X to return immediately",
    "start": "1661159",
    "end": "1668919"
  },
  {
    "text": "therefore we again use partial identity mapping to bypass this just like",
    "start": "1668919",
    "end": "1674919"
  },
  {
    "text": "CFG so so here is the summary of the overall flow of ufi plus kernel plus",
    "start": "1676880",
    "end": "1682960"
  },
  {
    "text": "user land backdoors first the buffer and the identity page table is prepared during",
    "start": "1682960",
    "end": "1691360"
  },
  {
    "text": "boot the OS uh starts and enters the runtime",
    "start": "1691360",
    "end": "1697000"
  },
  {
    "text": "phase the execution is transferred to the runtime taxi modules by hooking the",
    "start": "1697000",
    "end": "1702159"
  },
  {
    "text": "runtime Services get variable service next the context proc process",
    "start": "1702159",
    "end": "1708399"
  },
  {
    "text": "context is set to a CSR assess XA a PPL",
    "start": "1708399",
    "end": "1714120"
  },
  {
    "text": "process next the page table is modified to make the Shell Code buffer accessible",
    "start": "1714120",
    "end": "1719159"
  },
  {
    "text": "from userland and the shell code is written to the buffer after patching CFG and etw to",
    "start": "1719159",
    "end": "1727519"
  },
  {
    "text": "bypass this uh the shell code is executed with RTL create user",
    "start": "1727519",
    "end": "1734200"
  },
  {
    "text": "thread when finished the patch contents are restored",
    "start": "1734200",
    "end": "1740039"
  },
  {
    "text": "okay so here's the demo of the final uh ufi plus kernel plus userland back doors",
    "start": "1740760",
    "end": "1748639"
  },
  {
    "text": "oh in this demo the laptop is nothing um it just shows the source",
    "start": "1782039",
    "end": "1787760"
  },
  {
    "text": "code for",
    "start": "1797039",
    "end": "1801039"
  },
  {
    "text": "okay so this userland message is sent from the oron back doors and each DW",
    "start": "1852679",
    "end": "1858440"
  },
  {
    "text": "consumer is not recognizing this event oh and we use the custom edw consumer to",
    "start": "1858440",
    "end": "1864799"
  },
  {
    "text": "only um get the events of the CSR assessed",
    "start": "1864799",
    "end": "1870840"
  },
  {
    "text": "xit okay so lastly I'll explain about how can we defense against these",
    "start": "1874559",
    "end": "1882279"
  },
  {
    "text": "factors in the case of attacks from the third party attackers this can be easily",
    "start": "1882279",
    "end": "1887480"
  },
  {
    "text": "prevented by enabling scoo because they don't have the official SC boo",
    "start": "1887480",
    "end": "1893080"
  },
  {
    "text": "certificate in some bios like MSI Biers secure boot setting is separated for ORS",
    "start": "1893080",
    "end": "1899559"
  },
  {
    "text": "and for Biers so please ensure to set secure boot for or as",
    "start": "1899559",
    "end": "1905240"
  },
  {
    "text": "well conversely there are some products where even the official orom is not",
    "start": "1905240",
    "end": "1911159"
  },
  {
    "text": "signed and in order to use such products we have to disable secur boot to use it",
    "start": "1911159",
    "end": "1918320"
  },
  {
    "text": "so device vendors should attach secur boost certificate to protect customers",
    "start": "1918320",
    "end": "1924159"
  },
  {
    "text": "from getting the overon back door devices or else device venders will be blamed for putting the back",
    "start": "1924159",
    "end": "1931919"
  },
  {
    "text": "doors also there's secur bypass vulnerabilities uh have been found",
    "start": "1934919",
    "end": "1940399"
  },
  {
    "text": "recently there was pkf uh announced by binary so these should be fixed to",
    "start": "1940399",
    "end": "1946880"
  },
  {
    "text": "prevent third party or on factors as well however if the device vender itself",
    "start": "1946880",
    "end": "1954200"
  },
  {
    "text": "is the attacker or the factor is inserted during the supply chain secure boot cannot prevent these kind of",
    "start": "1954200",
    "end": "1961799"
  },
  {
    "text": "attacks so we need a way to extract and investigate the contents of the or Oram",
    "start": "1961799",
    "end": "1968000"
  },
  {
    "text": "but currently there are no tools to do that but in either case um the network",
    "start": "1968000",
    "end": "1975960"
  },
  {
    "text": "communication is essential for factors so the det detection from network communication is important when",
    "start": "1975960",
    "end": "1983159"
  },
  {
    "text": "investigating this kind of factors okay so this is the wrapup Oram",
    "start": "1983159",
    "end": "1991000"
  },
  {
    "text": "is a highly stealthy place to put moare and can directly infect ufi which has",
    "start": "1991000",
    "end": "1996279"
  },
  {
    "text": "high page its infection roots are more than just evil M scenarios and it is",
    "start": "1996279",
    "end": "2004480"
  },
  {
    "text": "wide we implemented three proof of Concepts factors based on the Oram",
    "start": "2004480",
    "end": "2009960"
  },
  {
    "text": "specific feature and considered defense against defense mechanisms against",
    "start": "2009960",
    "end": "2016799"
  },
  {
    "text": "them uh here's some disclaimers and the source code is public on this link but",
    "start": "2017039",
    "end": "2025080"
  },
  {
    "text": "it is stripped for security purposes so please contact this email address for the full source code uh thank you for",
    "start": "2025080",
    "end": "2032440"
  },
  {
    "text": "this think [Applause]",
    "start": "2032440",
    "end": "2042319"
  }
]