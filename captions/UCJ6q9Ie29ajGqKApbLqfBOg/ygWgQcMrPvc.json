[
  {
    "text": "foreign",
    "start": "1979",
    "end": "4159"
  },
  {
    "text": "University and today I'm going to present uh TNT decompiling deep new",
    "start": "13519",
    "end": "19140"
  },
  {
    "text": "network compiled binary uh as you know like uh give new networks",
    "start": "19140",
    "end": "26400"
  },
  {
    "text": "students have been applied in many UC scenarios for example based recognition",
    "start": "26400",
    "end": "31619"
  },
  {
    "text": "waste recognition Healthcare Etc and there's a trend of deploying deep",
    "start": "31619",
    "end": "38160"
  },
  {
    "text": "new networks on each devices and so-called and so there's a term called agai where AI computation is done near",
    "start": "38160",
    "end": "45420"
  },
  {
    "text": "the user near the user at age instead of instead of at a cloud",
    "start": "45420",
    "end": "51059"
  },
  {
    "text": "and there are several benefits of of doing computation at each devices",
    "start": "51059",
    "end": "58199"
  },
  {
    "text": "the first one is it has loaded latency so each AI can analyze the data locally",
    "start": "58199",
    "end": "63420"
  },
  {
    "text": "rather than in a far away Cloud which is delayed by long distance communication so it can respond to users requests in a",
    "start": "63420",
    "end": "71340"
  },
  {
    "text": "real in real time and the second benefit is it provides a hybrid availability because it doesn't",
    "start": "71340",
    "end": "78299"
  },
  {
    "text": "need internet access so either without it results in higher availability and",
    "start": "78299",
    "end": "84840"
  },
  {
    "text": "reliability for some Mission critical and production grid application",
    "start": "84840",
    "end": "90479"
  },
  {
    "text": "and the student benefit is that it provides better privacy because the data",
    "start": "90479",
    "end": "96240"
  },
  {
    "text": "collected by The Edge devices are usually are usually very private for example some medical some medical data",
    "start": "96240",
    "end": "103680"
  },
  {
    "text": "and for the Hai enhances the Privacy by con by containing the data locally",
    "start": "103680",
    "end": "109020"
  },
  {
    "text": "instead of uploading the data onto the cloud there have been some real world cases",
    "start": "109020",
    "end": "116220"
  },
  {
    "text": "where like some products use AGI for instance uh the next p release the iot",
    "start": "116220",
    "end": "121439"
  },
  {
    "text": "solution for secure Facebook coordination with livelisted action it essentially a Facebook recognition",
    "start": "121439",
    "end": "127799"
  },
  {
    "text": "camera that powered by their model and can do some authentication in a",
    "start": "127799",
    "end": "133560"
  },
  {
    "text": "smartphone scenario and also for infrastructure there's a company that deployed the new network",
    "start": "133560",
    "end": "140520"
  },
  {
    "text": "model or cortex on cortex and cheap to achieve remote grid power grid",
    "start": "140520",
    "end": "147180"
  },
  {
    "text": "monitoring and so Healthcare HDL can be used to detect early blindness and diabetic",
    "start": "147180",
    "end": "157160"
  },
  {
    "text": "when deploying deep new networks on each devices dedicated in compilers such as",
    "start": "157200",
    "end": "163319"
  },
  {
    "text": "globe and TBN are usually used to compile the dealer model into a binary",
    "start": "163319",
    "end": "168420"
  },
  {
    "text": "module and this module and this binary module will be linked with the main",
    "start": "168420",
    "end": "173580"
  },
  {
    "text": "problem with the link will be linked with the main program and the Flash onto",
    "start": "173580",
    "end": "178980"
  },
  {
    "text": "the edge devices in this work we explore the possibility",
    "start": "178980",
    "end": "184680"
  },
  {
    "text": "of decompiling those DN binary but in binary we are refer the DNA binary uh",
    "start": "184680",
    "end": "191280"
  },
  {
    "text": "the compilation we are referring to is not just doing the DNA binary into State",
    "start": "191280",
    "end": "196680"
  },
  {
    "text": "uh feature or either Pro and get tons of Studio C code that we have totally no",
    "start": "196680",
    "end": "202140"
  },
  {
    "text": "idea what it is doing instead the different binary compilation is the referred to the process that",
    "start": "202140",
    "end": "210659"
  },
  {
    "text": "automatically reverse engineer the different binary and acquire a high level specification high level",
    "start": "210659",
    "end": "217019"
  },
  {
    "text": "representation of the compiler model including its uh accurate architecture",
    "start": "217019",
    "end": "222959"
  },
  {
    "text": "and its parameters and why why we compiled it why we",
    "start": "222959",
    "end": "230459"
  },
  {
    "text": "decompile the DN binary why it is Meaningful the answer is now ratio has",
    "start": "230459",
    "end": "236400"
  },
  {
    "text": "many security applications for instance like almost obvious one is uh steel model stealing an accurate and",
    "start": "236400",
    "end": "244379"
  },
  {
    "text": "a performance leader model usually cause lots of human efforts and computation and computation power so essentially",
    "start": "244379",
    "end": "251159"
  },
  {
    "text": "lots of money for this reason obtaining it often has high commercial value",
    "start": "251159",
    "end": "257479"
  },
  {
    "text": "and furthermore the stolen dealer model can be the stepstone that turns black",
    "start": "257479",
    "end": "262740"
  },
  {
    "text": "box attacks into a white boss attack for instance a membership inference attacks",
    "start": "262740",
    "end": "268320"
  },
  {
    "text": "and adversal attacks and I will make some examples of adverse attacks",
    "start": "268320",
    "end": "274380"
  },
  {
    "text": "adversal text basically is uh is an adversary maliciously influenced the predictive results of the model by",
    "start": "274380",
    "end": "281400"
  },
  {
    "text": "adding some imperceptible noises to the input",
    "start": "281400",
    "end": "286219"
  },
  {
    "text": "is that after adding some infrastructible noises to an image of a stop sign",
    "start": "288440",
    "end": "294419"
  },
  {
    "text": "idea model will misclassify a stop sign as a teddy bear",
    "start": "294419",
    "end": "299880"
  },
  {
    "text": "and the figure on the right shows that an object detection model cannot",
    "start": "299880",
    "end": "304919"
  },
  {
    "text": "recognize the people who is wearing a carefully designed clothes",
    "start": "304919",
    "end": "311120"
  },
  {
    "text": "and Russo attacked a huge threat to doing for dinner model deployed on each devices",
    "start": "312840",
    "end": "318660"
  },
  {
    "text": "if the attackers can acquire the deal model attackers and know the internal",
    "start": "318660",
    "end": "324060"
  },
  {
    "text": "information of the DM and conduct white box attack which are more efficient and",
    "start": "324060",
    "end": "329520"
  },
  {
    "text": "richer which are more efficient and effective than the black horse counterpart",
    "start": "329520",
    "end": "335240"
  },
  {
    "text": "yeah you might ask can we just use the existing compilers like like either Pro",
    "start": "335660",
    "end": "340860"
  },
  {
    "text": "or Deidre it turns out that uh the general purposely compilers they can only",
    "start": "340860",
    "end": "346860"
  },
  {
    "text": "recover C language levels in tactics from their binaries and but they have several limitations when dealing with",
    "start": "346860",
    "end": "353520"
  },
  {
    "text": "different binaries the first limitation is that there are a lot of vectorized",
    "start": "353520",
    "end": "361039"
  },
  {
    "text": "mathematical computations Indian binary and which essentially it leads to uh in",
    "start": "361039",
    "end": "366419"
  },
  {
    "text": "the capability result there will be a lot of long Loops bodies and excessive device operations",
    "start": "366419",
    "end": "372900"
  },
  {
    "text": "here I saw either probability calculation results of a single convolution operator function",
    "start": "372900",
    "end": "379139"
  },
  {
    "text": "it contains 380 348 life of code with multiple long",
    "start": "379139",
    "end": "386039"
  },
  {
    "text": "loose bodies and many bitwise operations if I were a reverse engineer I have",
    "start": "386039",
    "end": "391860"
  },
  {
    "text": "totally no idea what this operation function do and keep in mind that you",
    "start": "391860",
    "end": "397560"
  },
  {
    "text": "this is just the completion result of a single function and a typical deal in binary contains",
    "start": "397560",
    "end": "403440"
  },
  {
    "text": "hundreds of functions like this foreign",
    "start": "403440",
    "end": "409460"
  },
  {
    "text": "results of different binary varies the complexion results the combination a",
    "start": "411319",
    "end": "417840"
  },
  {
    "text": "result different differs significantly depending on the compiler's analysis and even with the same with even with with",
    "start": "417840",
    "end": "424979"
  },
  {
    "text": "the same setup the same compiler same essays and stem function but with different parameters of the DN",
    "start": "424979",
    "end": "431940"
  },
  {
    "text": "operator the compilation result will will also will also change significantly",
    "start": "431940",
    "end": "437699"
  },
  {
    "text": "because of the compiler organization we will explain it later and for the more",
    "start": "437699",
    "end": "443520"
  },
  {
    "text": "examples you can refer you can you can check the you can check the GitHub link provided below",
    "start": "443520",
    "end": "450740"
  },
  {
    "text": "and the last reason is that the existing General purposely compilers they lack the knowledge of their semantics and",
    "start": "450960",
    "end": "458220"
  },
  {
    "text": "topology so so uh intuitively they cannot generate a",
    "start": "458220",
    "end": "463740"
  },
  {
    "text": "high level representation of the piano therefore we need a new decompiler which",
    "start": "463740",
    "end": "471479"
  },
  {
    "text": "is capable of capturing the mathematical semantics on a binary and convert the",
    "start": "471479",
    "end": "476880"
  },
  {
    "text": "mathematical semantics into a high level different semantics",
    "start": "476880",
    "end": "482240"
  },
  {
    "text": "before we discuss about the details of our technique please let me please please let me briefly introduce some",
    "start": "483000",
    "end": "489840"
  },
  {
    "text": "backgrounds about the ends and how they are deployed on each devices",
    "start": "489840",
    "end": "495060"
  },
  {
    "text": "the figure below shows the snippet of resonate model represented with omx",
    "start": "495060",
    "end": "500280"
  },
  {
    "text": "format in the figure again you can see uh each box is a",
    "start": "500280",
    "end": "505919"
  },
  {
    "text": "different operator and you know later they are the building blocks of the end",
    "start": "505919",
    "end": "511259"
  },
  {
    "text": "I didn't operator take output of a previous operators as its input",
    "start": "511259",
    "end": "516300"
  },
  {
    "text": "and computes the output based on its operator type parameters and attributes",
    "start": "516300",
    "end": "521760"
  },
  {
    "text": "we extend those terms later and there are various types of students",
    "start": "521760",
    "end": "527220"
  },
  {
    "text": "operators with different high-level semantics currently there are 174 different",
    "start": "527220",
    "end": "533880"
  },
  {
    "text": "operators defined in One X and the number is still growing",
    "start": "533880",
    "end": "539160"
  },
  {
    "text": "for example there are convolutional greater average pool operator and value operator it was already very commonly",
    "start": "539160",
    "end": "546480"
  },
  {
    "text": "used operator and dealing model information include operator levels information such as type",
    "start": "546480",
    "end": "554339"
  },
  {
    "text": "attributes and parameters and model level semantics like uh the",
    "start": "554339",
    "end": "561420"
  },
  {
    "text": "topology which determine how The Operators are connected",
    "start": "561420",
    "end": "566540"
  },
  {
    "text": "and there are two uh in case of compilation schemes there are two",
    "start": "568279",
    "end": "573540"
  },
  {
    "text": "combination schemes that compile the model into binaries which are intermediate based approach and ahead of",
    "start": "573540",
    "end": "579540"
  },
  {
    "text": "time AOC approach for the interview for the interpreter-based approach",
    "start": "579540",
    "end": "585420"
  },
  {
    "text": "there's it generates a different configuration file such as tensorflow Lite",
    "start": "585420",
    "end": "591120"
  },
  {
    "text": "and there's a generic uh and this generic real-time Library which implements each every every type of DNA",
    "start": "591120",
    "end": "598620"
  },
  {
    "text": "operator for instance it it has a convolution operator implementation and has a value operational implementation",
    "start": "598620",
    "end": "606120"
  },
  {
    "text": "and they are they are they're generic and during the runtime there's an",
    "start": "606120",
    "end": "611399"
  },
  {
    "text": "interpreter that passes the process configuration file and generate a",
    "start": "611399",
    "end": "616680"
  },
  {
    "text": "complication graph and invoke the generic DN operator implementation in the runtime Library",
    "start": "616680",
    "end": "623100"
  },
  {
    "text": "however it has two disabled it has two disadvantages when deployed on H by 6.",
    "start": "623100",
    "end": "630660"
  },
  {
    "text": "the first is that it introduced it introduces space and time overhead",
    "start": "630660",
    "end": "636300"
  },
  {
    "text": "because of the need to include the runtime library and to financially pass the unconfiguration file",
    "start": "636300",
    "end": "643500"
  },
  {
    "text": "and the second one is that since the since the uh since it use generic Green",
    "start": "643500",
    "end": "649620"
  },
  {
    "text": "Time Library it mixes fun opportunity to optimize the operator function given",
    "start": "649620",
    "end": "655260"
  },
  {
    "text": "specific parameters so there's another approach aot approach",
    "start": "655260",
    "end": "661980"
  },
  {
    "text": "it compiles when the iot compilers it will specialize the operating",
    "start": "661980",
    "end": "667200"
  },
  {
    "text": "implementation according to the attributes and parameters of specific operator instance",
    "start": "667200",
    "end": "672959"
  },
  {
    "text": "for example for the highlighted box boxes you see in the figure below uh there are there are",
    "start": "672959",
    "end": "679500"
  },
  {
    "text": "convolution to n conclusion 3. also they have the they have the same type of operator which is which are conclusion",
    "start": "679500",
    "end": "686700"
  },
  {
    "text": "but because of they have different attributes and parameters they will be compiled into two very different binary",
    "start": "686700",
    "end": "693120"
  },
  {
    "text": "functions with very different control flow and data flow",
    "start": "693120",
    "end": "698360"
  },
  {
    "text": "and uh you know in another dimension uh the accommodation backhands uh they're",
    "start": "699260",
    "end": "705180"
  },
  {
    "text": "basically they are there are two types of backend one is uh the device with with only CPU and second is the device",
    "start": "705180",
    "end": "712320"
  },
  {
    "text": "with with uh the accelerator such as uh mpu GPU or even Asic",
    "start": "712320",
    "end": "719399"
  },
  {
    "text": "and so the CPU only devices uh it does all the computation on the CPU for",
    "start": "719399",
    "end": "725040"
  },
  {
    "text": "example the uh this as we mentioned there's a Facebook recognition camera",
    "start": "725040",
    "end": "730320"
  },
  {
    "text": "released by an XP and it's basically all the computation happen only CPU and",
    "start": "730320",
    "end": "736380"
  },
  {
    "text": "there are also some other embedded systems where it needs a more more",
    "start": "736380",
    "end": "742260"
  },
  {
    "text": "powerful computation power so at and they they will be equipped with sound DN",
    "start": "742260",
    "end": "748440"
  },
  {
    "text": "accelerator such as Google http foreign",
    "start": "748440",
    "end": "755000"
  },
  {
    "text": "our objective is to recover the DNA model in Ox format on the compile binary",
    "start": "755600",
    "end": "762120"
  },
  {
    "text": "when your CPU only devices so this is what we only we only cover the binary on",
    "start": "762120",
    "end": "767160"
  },
  {
    "text": "CPU devices and how to how to read the percent engineer the binaries running on",
    "start": "767160",
    "end": "773160"
  },
  {
    "text": "the devices with ideal accelerator will be left in our future work and yeah and our address is like is our",
    "start": "773160",
    "end": "782160"
  },
  {
    "text": "season should be generic enough to support different compilers and Isis and",
    "start": "782160",
    "end": "787320"
  },
  {
    "text": "it should be it should be issued recovered in models in uh with very high accuracy",
    "start": "787320",
    "end": "794420"
  },
  {
    "text": "let me first give you an overview of our technique",
    "start": "794420",
    "end": "799740"
  },
  {
    "text": "so the first step will be given the DNA binary relocate the function that",
    "start": "799740",
    "end": "805560"
  },
  {
    "text": "implement the DN operators and the second step is for each located",
    "start": "805560",
    "end": "813420"
  },
  {
    "text": "in an operator function we generate our operator summary which is capable to",
    "start": "813420",
    "end": "819300"
  },
  {
    "text": "summarize the to capture the manual semantics of that of that function",
    "start": "819300",
    "end": "825920"
  },
  {
    "text": "and the third step and the last step is uh given the generated over here summary",
    "start": "826339",
    "end": "831959"
  },
  {
    "text": "we recover the high level modal semantics and output the model in Olex format",
    "start": "831959",
    "end": "839360"
  },
  {
    "text": "and let me give some details more details about of each step in the first step we look for the binary",
    "start": "846959",
    "end": "853680"
  },
  {
    "text": "function that have uh in the first app we we locate the DN",
    "start": "853680",
    "end": "859500"
  },
  {
    "text": "uh the function the binary function that implement the Dr operator so essentially uh how we do it is we look for the we",
    "start": "859500",
    "end": "867839"
  },
  {
    "text": "look for the binary function with certain structures so we look for the binary functions that have a Neti loops",
    "start": "867839",
    "end": "873959"
  },
  {
    "text": "and a vector-wise computation and these functions are identified as the function implementing the RDM",
    "start": "873959",
    "end": "880380"
  },
  {
    "text": "operations uh note that I'll work at a binary level but for easy understanding in the",
    "start": "880380",
    "end": "886860"
  },
  {
    "text": "presentation we show our running example in the source code in kind of a different data file source code in the",
    "start": "886860",
    "end": "892380"
  },
  {
    "text": "following slides yeah",
    "start": "892380",
    "end": "897839"
  },
  {
    "text": "in the second step we generate our operator summary of each DN of each",
    "start": "897839",
    "end": "902940"
  },
  {
    "text": "operator function which can summarize the mathematical semantics to do so for each identified operator",
    "start": "902940",
    "end": "910320"
  },
  {
    "text": "function we first conduct Loop analysis to identify induction variables we also we",
    "start": "910320",
    "end": "916620"
  },
  {
    "text": "also usually call the induction variable as Loop indexes so the first step is",
    "start": "916620",
    "end": "922139"
  },
  {
    "text": "Loop analysis to verify the induction variable for instance uh in the in the figure",
    "start": "922139",
    "end": "927779"
  },
  {
    "text": "below the induction variables are the variables i j u v highlighted in the",
    "start": "927779",
    "end": "934740"
  },
  {
    "text": "blue box we also identify the information such as",
    "start": "934740",
    "end": "940019"
  },
  {
    "text": "our initial value step size and loop count yeah and for instance for for the",
    "start": "940019",
    "end": "947519"
  },
  {
    "text": "variable I in the figure for variable I in the figure uh the initial value step",
    "start": "947519",
    "end": "952680"
  },
  {
    "text": "size and loop count are zero one and two respectively and it's a it's an easy",
    "start": "952680",
    "end": "958260"
  },
  {
    "text": "example I think everyone can follow it and to anything to identify these uh",
    "start": "958260",
    "end": "964560"
  },
  {
    "text": "inductor variables we Leverage uh some Ibis properties",
    "start": "964560",
    "end": "969720"
  },
  {
    "text": "which are they are usually initialized as a constant at a Loops entry",
    "start": "969720",
    "end": "975680"
  },
  {
    "text": "and this IV is determine if Loop if a loop continues",
    "start": "975680",
    "end": "982380"
  },
  {
    "text": "and they are incremented by a constant inside a loop so we assume the iris has have these uh",
    "start": "982380",
    "end": "991139"
  },
  {
    "text": "properties and we use these properties to to do a static analysis to identify this",
    "start": "991139",
    "end": "997620"
  },
  {
    "text": "verb to identify those variables in the binary function in a binary function",
    "start": "997620",
    "end": "1004000"
  },
  {
    "text": "and with identified industrial variables we symbolize these identified IVs for",
    "start": "1004040",
    "end": "1010459"
  },
  {
    "text": "instance the ijuv show in the figure and we contact symbolic execution",
    "start": "1010459",
    "end": "1016240"
  },
  {
    "text": "this step is to extract a symbolic expression that can that can capture the",
    "start": "1016240",
    "end": "1022519"
  },
  {
    "text": "semantics of this function and this is and extracted symbolic",
    "start": "1022519",
    "end": "1028520"
  },
  {
    "text": "expression we uh will represent the function's output with its input and parameters the output",
    "start": "1028520",
    "end": "1036380"
  },
  {
    "text": "essentially we Define output as the memory the memory right of this function and inputs is the memory of this",
    "start": "1036380",
    "end": "1043520"
  },
  {
    "text": "function so in this way we can cap we can we can use a we can use the Expression to",
    "start": "1043520",
    "end": "1049940"
  },
  {
    "text": "capture these systematics and for this for this easy example after this step",
    "start": "1049940",
    "end": "1056120"
  },
  {
    "text": "after this symbolic expression extraction step uh we will output a simple expression like this like the",
    "start": "1056120",
    "end": "1063020"
  },
  {
    "text": "like like the one song at the bottom of this slide",
    "start": "1063020",
    "end": "1068620"
  },
  {
    "text": "and then in the first step we leave the extracted expression into an operator",
    "start": "1069280",
    "end": "1075140"
  },
  {
    "text": "summary represented with the intermediate representation the IR redesign",
    "start": "1075140",
    "end": "1080539"
  },
  {
    "text": "for example we lived the exactly Expressions on the left",
    "start": "1080539",
    "end": "1085640"
  },
  {
    "text": "to the operator summary on the right shown on the screen and we are refused",
    "start": "1085640",
    "end": "1091760"
  },
  {
    "text": "would be represent the plus equal on the left to the summation function we're defining",
    "start": "1091760",
    "end": "1098120"
  },
  {
    "text": "r y r in the right and replace the multiplication with the multiplication function in the right",
    "start": "1098120",
    "end": "1105260"
  },
  {
    "text": "and also we attach we attach the induction variables information indicating the",
    "start": "1105260",
    "end": "1112400"
  },
  {
    "text": "possible values of each Loop index for example for the variable uh its possible",
    "start": "1112400",
    "end": "1118220"
  },
  {
    "text": "ranges from 0 to 1 and we increment as well",
    "start": "1118220",
    "end": "1123580"
  },
  {
    "text": "after I operated summary generation we finally recovered the high level DN",
    "start": "1125020",
    "end": "1131480"
  },
  {
    "text": "semantics we first we have the operator type of each operator function with ASD matching",
    "start": "1131480",
    "end": "1140240"
  },
  {
    "text": "specifically at the very beginning we we will generate a reference as the database in advance which Maps each DN",
    "start": "1140240",
    "end": "1148820"
  },
  {
    "text": "operator type to its corresponding AST for example here we show a reference as",
    "start": "1148820",
    "end": "1156500"
  },
  {
    "text": "the model of a convolution operator and after that uh we match the AST",
    "start": "1156500",
    "end": "1164960"
  },
  {
    "text": "included in the operating summary the operation will be previously we previously generated and with the",
    "start": "1164960",
    "end": "1171080"
  },
  {
    "text": "reference as this we consider the operator type as that of a reference entity if the SD are matched",
    "start": "1171080",
    "end": "1178760"
  },
  {
    "text": "with each other for instance here we match the AST included in the",
    "start": "1178760",
    "end": "1185120"
  },
  {
    "text": "operator summary with the convolution of greatest reference entity in our database",
    "start": "1185120",
    "end": "1192200"
  },
  {
    "text": "and it is a match so we will consider the",
    "start": "1192200",
    "end": "1198100"
  },
  {
    "text": "uh this operator is a convolution operator",
    "start": "1198200",
    "end": "1203320"
  },
  {
    "text": "and after we decide the operated type of of a binary function we then recover the",
    "start": "1203900",
    "end": "1210020"
  },
  {
    "text": "DNA's topology by laryngit dependencies Between each DN operator function",
    "start": "1210020",
    "end": "1216220"
  },
  {
    "text": "for instance we can identify we can identify that like for two operators or",
    "start": "1216220",
    "end": "1223460"
  },
  {
    "text": "two operator function we identify the input of convolution three and output of",
    "start": "1223460",
    "end": "1229100"
  },
  {
    "text": "a convolution right they point to the same memory address and so we can know this uh dsh from this H from convolution",
    "start": "1229100",
    "end": "1236360"
  },
  {
    "text": "one M consonant three so we draw H and we recover the connection between these",
    "start": "1236360",
    "end": "1241520"
  },
  {
    "text": "two operators and last we cover the attributes and",
    "start": "1241520",
    "end": "1248660"
  },
  {
    "text": "parameters of each Operator by leveraging the operating summary and the",
    "start": "1248660",
    "end": "1253700"
  },
  {
    "text": "recovered the end topology for instance with the operator summary we can we can recover the values of",
    "start": "1253700",
    "end": "1261020"
  },
  {
    "text": "filter by extracting from their corresponding memory address",
    "start": "1261020",
    "end": "1266440"
  },
  {
    "text": "and our compiler can also correctly handle the idea and binary with some very common with uncommon compiler",
    "start": "1268820",
    "end": "1276200"
  },
  {
    "text": "organizations such as operator fusion and loop and loop rerolling sorry and",
    "start": "1276200",
    "end": "1281900"
  },
  {
    "text": "the loop I'm rolling for the operation Fusion it is uh it is",
    "start": "1281900",
    "end": "1288679"
  },
  {
    "text": "a common uh optimization technique that deployed by",
    "start": "1288679",
    "end": "1294140"
  },
  {
    "text": "a DNA compilers it essentially it combines Loop bodies of two adjacent",
    "start": "1294140",
    "end": "1299299"
  },
  {
    "text": "operators to to improve the say a cash locality",
    "start": "1299299",
    "end": "1305440"
  },
  {
    "text": "and yeah and it typically it combined the active activation operator for",
    "start": "1305440",
    "end": "1310520"
  },
  {
    "text": "example relu with the previous operator for instance uh is it is the most uh typical scenario",
    "start": "1310520",
    "end": "1318440"
  },
  {
    "text": "where the compiler combined a convolutional operator with a value operator and in the code you can see",
    "start": "1318440",
    "end": "1324740"
  },
  {
    "text": "that before this organization there are there two Loop bodies",
    "start": "1324740",
    "end": "1331220"
  },
  {
    "text": "and after urbanization uh they emerge into one and the value is kind of is",
    "start": "1331220",
    "end": "1336980"
  },
  {
    "text": "merged into the previous operator function sorry the previous the previous operator",
    "start": "1336980",
    "end": "1343280"
  },
  {
    "text": "Loop body and uh to handle with the loop operator",
    "start": "1343280",
    "end": "1349280"
  },
  {
    "text": "Fusion we develop we leverage we Leverage The observation that the combined set that",
    "start": "1349280",
    "end": "1356539"
  },
  {
    "text": "when there's two operators combined the second operator is usually an activation",
    "start": "1356539",
    "end": "1361659"
  },
  {
    "text": "operator for instance so uh our 10 is quite yeah it's quite simple we first",
    "start": "1361659",
    "end": "1369260"
  },
  {
    "text": "identifies the activation operator in the extracted in the extracted symbolic expression so here we we use some",
    "start": "1369260",
    "end": "1378140"
  },
  {
    "text": "pattern matching to identify the relu in our you know extracted simple",
    "start": "1378140",
    "end": "1383840"
  },
  {
    "text": "expression and then we just divide and divide the",
    "start": "1383840",
    "end": "1389000"
  },
  {
    "text": "value from the previous expression and so we have we have two operators in our",
    "start": "1389000",
    "end": "1394760"
  },
  {
    "text": "generated operator symbol",
    "start": "1394760",
    "end": "1398140"
  },
  {
    "text": "in case of uh in case of loop I'm rolling for instance it unloads the loop",
    "start": "1403220",
    "end": "1408559"
  },
  {
    "text": "with induction for instance here is on it on rows the loop with induction variable V",
    "start": "1408559",
    "end": "1414980"
  },
  {
    "text": "and yeah I just we just make and this Loop just disappear and it results in uh",
    "start": "1414980",
    "end": "1422780"
  },
  {
    "text": "two two different uh updates so this this Loop has been has been",
    "start": "1422780",
    "end": "1430059"
  },
  {
    "text": "unload so uh in order to handle this we developed a rolling techniques",
    "start": "1430059",
    "end": "1437120"
  },
  {
    "text": "sorry I look really rolling techniques which essentially uh the compiler's organization",
    "start": "1437120",
    "end": "1443740"
  },
  {
    "text": "as a decompiler we we identify some we recognize some pattern and we do some",
    "start": "1444159",
    "end": "1450140"
  },
  {
    "text": "redrawing to uh create and create recreate and do and so we develop a loop uh rerolling",
    "start": "1450140",
    "end": "1459020"
  },
  {
    "text": "analysis which recognize the similar pattern on multiple expressions and motion together",
    "start": "1459020",
    "end": "1465679"
  },
  {
    "text": "for instance uh in the extracting simple Expressions we identify the similar pattern between line one and",
    "start": "1465679",
    "end": "1473539"
  },
  {
    "text": "line two and so we managed to merge them together into One X into one uh extra expression",
    "start": "1473539",
    "end": "1484600"
  },
  {
    "text": "can also handle with uh cancel handle composite operators the compulsive",
    "start": "1488559",
    "end": "1494179"
  },
  {
    "text": "operators they usually they are quite complicated we will use a we will use recurrent operator as as an example",
    "start": "1494179",
    "end": "1502820"
  },
  {
    "text": "uh so for for the recurring operators such as RN or lstn their inputs can",
    "start": "1502820",
    "end": "1510200"
  },
  {
    "text": "affect this subsequent out the output can affect the subsequent input so that",
    "start": "1510200",
    "end": "1516140"
  },
  {
    "text": "they can they can exhibit some temporal Dynamic behavior and this type of",
    "start": "1516140",
    "end": "1521960"
  },
  {
    "text": "operators they are usually used in ILP model so when so when these uh when these",
    "start": "1521960",
    "end": "1529760"
  },
  {
    "text": "title type of operators they're compiled they're using their rollout and decomposed into some basic operators for",
    "start": "1529760",
    "end": "1537080"
  },
  {
    "text": "instance uh for instance the fully connected or or the value of tensions",
    "start": "1537080",
    "end": "1543440"
  },
  {
    "text": "so and these basic operators we are ours already support support those so our",
    "start": "1543440",
    "end": "1551960"
  },
  {
    "text": "approach is we can recover those basic operators first and then we use pattern",
    "start": "1551960",
    "end": "1557240"
  },
  {
    "text": "matching to recover the composite operators",
    "start": "1557240",
    "end": "1562279"
  },
  {
    "text": "foreign",
    "start": "1562279",
    "end": "1565000"
  },
  {
    "text": "operator so if you go out into a sequence of",
    "start": "1569020",
    "end": "1574220"
  },
  {
    "text": "operators and for each for each operations inside is essentially is a composite of fully",
    "start": "1574220",
    "end": "1582080"
  },
  {
    "text": "connected and addition and bitwise addition and attention that we first we",
    "start": "1582080",
    "end": "1587120"
  },
  {
    "text": "identify those basic operators and then we use Statin machine to merge them into a into a into one RN operator",
    "start": "1587120",
    "end": "1598179"
  },
  {
    "text": "and uh yeah and this that's basically our our season design and I've been",
    "start": "1599380",
    "end": "1604820"
  },
  {
    "text": "playing we Implement our system with python on top of anger and we we reused",
    "start": "1604820",
    "end": "1611840"
  },
  {
    "text": "many uh angular components such as CX recovery and loop finder and our system",
    "start": "1611840",
    "end": "1618200"
  },
  {
    "text": "is open source and GitHub",
    "start": "1618200",
    "end": "1621580"
  },
  {
    "text": "uh for evaluation we first evaluated Network the generality by evaluating how",
    "start": "1623740",
    "end": "1630500"
  },
  {
    "text": "many widely used their models we can support",
    "start": "1630500",
    "end": "1634658"
  },
  {
    "text": "we can see the ideal model supported when all of its operators are supported",
    "start": "1635559",
    "end": "1643240"
  },
  {
    "text": "we collect 370 models from from two onto Benchmark versus uh on x2 and",
    "start": "1645020",
    "end": "1654740"
  },
  {
    "text": "the second is ml Perth tiny benchmark and it includes uh includes many widely",
    "start": "1654740",
    "end": "1662539"
  },
  {
    "text": "used and famous models such as a resnet YOLO and GPT tool",
    "start": "1662539",
    "end": "1668600"
  },
  {
    "text": "and it and they cover uh they cover many different types of the operators",
    "start": "1668600",
    "end": "1677620"
  },
  {
    "text": "our evaluation show that our system can support uh 59 different operators so if uh 84 of",
    "start": "1677720",
    "end": "1687020"
  },
  {
    "text": "the 70 or already total 70 and and we can and and in turn it uh",
    "start": "1687020",
    "end": "1696260"
  },
  {
    "text": "support 30-year models which is uh it is 85 of our data set",
    "start": "1696260",
    "end": "1703900"
  },
  {
    "text": "then we evaluate the correctness of our system by checking if our system can",
    "start": "1703960",
    "end": "1710179"
  },
  {
    "text": "decompile RDM binary and generate the model equivalent to the original one",
    "start": "1710179",
    "end": "1716799"
  },
  {
    "text": "we test with 15 DM binaries and they are compiled by two compilers through ntvn 3",
    "start": "1716799",
    "end": "1725059"
  },
  {
    "text": "isas on some uh um architecture X6",
    "start": "1725059",
    "end": "1730100"
  },
  {
    "text": "64 and x36 and it's three models Ms president",
    "start": "1730100",
    "end": "1735500"
  },
  {
    "text": "virtual run and mobile net version one version two and we compare the inference results of",
    "start": "1735500",
    "end": "1742460"
  },
  {
    "text": "the decompiled model and the original model you",
    "start": "1742460",
    "end": "1747740"
  },
  {
    "text": "given 10 given 10 000 test inputs our evaluation shows that",
    "start": "1747740",
    "end": "1753700"
  },
  {
    "text": "our system can decompile all the tested binary without 100 accuracy",
    "start": "1753700",
    "end": "1761179"
  },
  {
    "text": "for example here we show uh at the bottom sorry at the top we show the",
    "start": "1763340",
    "end": "1769100"
  },
  {
    "text": "architecture of the original resnet model and at the bottom we saw the",
    "start": "1769100",
    "end": "1775419"
  },
  {
    "text": "decompiled model by our system and as you can see they have they have the",
    "start": "1775419",
    "end": "1781039"
  },
  {
    "text": "identical architecture and we further evaluate correctly is we further test",
    "start": "1781039",
    "end": "1786200"
  },
  {
    "text": "these two models with 10 10 000 tested inputs and they have the same inverse",
    "start": "1786200",
    "end": "1791960"
  },
  {
    "text": "results",
    "start": "1791960",
    "end": "1794140"
  },
  {
    "text": "in the case study uh we also we also conduct case studies on a real world in",
    "start": "1801799",
    "end": "1806960"
  },
  {
    "text": "a real world microcontroller with a resident model is deployed it's like",
    "start": "1806960",
    "end": "1812480"
  },
  {
    "text": "essentially it's the resnet model deployed on the nxp IMAX RT 1050",
    "start": "1812480",
    "end": "1818539"
  },
  {
    "text": "evaluation board and we saw that our system can be you can use to steal the design model from",
    "start": "1818539",
    "end": "1825500"
  },
  {
    "text": "abroad specifically we thumbed the binary uh redundant binary from the",
    "start": "1825500",
    "end": "1830720"
  },
  {
    "text": "board and they compiled with our season and we verify the correctness of the",
    "start": "1830720",
    "end": "1835820"
  },
  {
    "text": "compile DNA model by comparing the internal results with the original one",
    "start": "1835820",
    "end": "1842960"
  },
  {
    "text": "besides we also showed that the compiler DNA model can be leveraged to boost",
    "start": "1842960",
    "end": "1848840"
  },
  {
    "text": "adversal attack with the decompiled with the decompile model we launched whiteboards at visual",
    "start": "1848840",
    "end": "1855799"
  },
  {
    "text": "attack with uh and which successfully reduced the inference without the inference",
    "start": "1855799",
    "end": "1861799"
  },
  {
    "text": "accuracy from 88 with the original inputs to the 11 with the ribose and reversal",
    "start": "1861799",
    "end": "1867980"
  },
  {
    "text": "input while the white while while the black horse attack can only degrade the",
    "start": "1867980",
    "end": "1873980"
  },
  {
    "text": "inference accuracy to 57.",
    "start": "1873980",
    "end": "1878140"
  },
  {
    "text": "and yeah and in summary uh decompiling the binaries requires custom customized",
    "start": "1880580",
    "end": "1886820"
  },
  {
    "text": "techniques within specific knowledge and in this work we post DND uh the",
    "start": "1886820",
    "end": "1893240"
  },
  {
    "text": "first compiler both compiler models and our system is open source at GitHub",
    "start": "1893240",
    "end": "1901419"
  },
  {
    "text": "yeah and yeah and that's all for my presentation thank you I will now I will now take questions from the audience",
    "start": "1902720",
    "end": "1910960"
  },
  {
    "text": "[Music]",
    "start": "1911440",
    "end": "1914549"
  },
  {
    "text": "[Music]",
    "start": "1918390",
    "end": "1921499"
  }
]