[
  {
    "text": "[Music]",
    "start": "1940",
    "end": "7639"
  },
  {
    "text": "[Music]",
    "start": "19250",
    "end": "22320"
  },
  {
    "text": "[Music]",
    "start": "26170",
    "end": "29229"
  },
  {
    "text": "[Music]",
    "start": "33980",
    "end": "41539"
  },
  {
    "text": "okay sorry for the hold up there um so we'll we'll start off looking at",
    "start": "43239",
    "end": "50320"
  },
  {
    "text": "this new decom vulnerability as most of you have seen by now um export code has",
    "start": "50320",
    "end": "57600"
  },
  {
    "text": "been published to the internet um um Ben jury and a couple of other people maybe",
    "start": "57600",
    "end": "64198"
  },
  {
    "text": "um let's start at the beginning though um LSD um an excellent uh security",
    "start": "64199",
    "end": "71560"
  },
  {
    "text": "research group from Poland discovered a buffer overflow in decom uh they gave",
    "start": "71560",
    "end": "77280"
  },
  {
    "text": "enough details in their advisory to to work out fairly quickly um that it was",
    "start": "77280",
    "end": "83759"
  },
  {
    "text": "going to be a problem with the remote activation method within the IR remote",
    "start": "83759",
    "end": "89159"
  },
  {
    "text": "activation interface um this is accessible um in in many ways typically",
    "start": "89159",
    "end": "96000"
  },
  {
    "text": "uh most exploits are exploiting it on uh 135 now with the remote activation",
    "start": "96000",
    "end": "103600"
  },
  {
    "text": "interface essentially you can pass a a wide character string uh which is a the",
    "start": "103600",
    "end": "111000"
  },
  {
    "text": "path to a document to to as an object to instantiate essentially now if it's a",
    "start": "111000",
    "end": "116399"
  },
  {
    "text": "UNCC based path like back slashback slash um computer name back slash you",
    "start": "116399",
    "end": "121840"
  },
  {
    "text": "know share back SL food. do then there are two problems here one is a stack",
    "start": "121840",
    "end": "129360"
  },
  {
    "text": "based buffer overflow with an overly long host name that's what we'll be you know demonstrating later on the other is",
    "start": "129360",
    "end": "136800"
  },
  {
    "text": "a heat-based overflow with an overly long document name now I'm going to fire this off",
    "start": "136800",
    "end": "144239"
  },
  {
    "text": "quickly I've I'm this is Windows XP over here sorry over here and there um",
    "start": "144239",
    "end": "150680"
  },
  {
    "text": "um I'm going to find this off I've set a break point at a crucial part of the code of RP css. dll so",
    "start": "150680",
    "end": "159360"
  },
  {
    "text": "I execute that okay so we've hit our break point now before we overwrite well",
    "start": "159360",
    "end": "168800"
  },
  {
    "text": "actually after we overwrite the save return address we overflow other stuff on the stack as it happens one of those",
    "start": "168800",
    "end": "177040"
  },
  {
    "text": "things we overwrite is one of the parameters which was passed to the vulnerable function now this is a a um a type of",
    "start": "177040",
    "end": "186599"
  },
  {
    "text": "char star star basically now before the S you know before the the vulnerable",
    "start": "186599",
    "end": "193000"
  },
  {
    "text": "procedure returns we have a in here I'll have to read it out because you guys",
    "start": "193000",
    "end": "198560"
  },
  {
    "text": "won't be able to see it from there we have move dword pointer eax",
    "start": "198560",
    "end": "204080"
  },
  {
    "text": "comma EDI essentially what that's saying is move whatever is in EDI and go to the",
    "start": "204080",
    "end": "211000"
  },
  {
    "text": "eax register the address pointed by the E eax register and you know store",
    "start": "211000",
    "end": "216239"
  },
  {
    "text": "whatever's an EDI there so if we look at",
    "start": "216239",
    "end": "220720"
  },
  {
    "text": "EDI we can see it's for those at the front anyway who can see um this is basically the",
    "start": "221560",
    "end": "228879"
  },
  {
    "text": "beginning of our buffer SL computer name and arbitrary exploit code going",
    "start": "228879",
    "end": "234319"
  },
  {
    "text": "in now what eax points to this is the the ch star actually it will probably be",
    "start": "234319",
    "end": "240959"
  },
  {
    "text": "a w Char star star that's been passed this is the parameter which has been passed to the vulnerable function this",
    "start": "240959",
    "end": "247280"
  },
  {
    "text": "is this parameter is popped into ex and then we're going to set a pointer to our",
    "start": "247280",
    "end": "252439"
  },
  {
    "text": "you know code basically this line of code is going to be crucial in exploiting this on Windows 2003 server",
    "start": "252439",
    "end": "260680"
  },
  {
    "text": "specifically because Windows 2003 has um stack based canaries very much like",
    "start": "260680",
    "end": "267040"
  },
  {
    "text": "chrisen cow and stack guard um supposedly um and I'm I'm quite willing",
    "start": "267040",
    "end": "272639"
  },
  {
    "text": "to believe it an independent invention but on on Microsoft's part um but essentially does the same thing we we'll",
    "start": "272639",
    "end": "278919"
  },
  {
    "text": "get to that stuff later on in terms of exploiting it um on other platforms",
    "start": "278919",
    "end": "284320"
  },
  {
    "text": "however Windows nt4 is vulnerable Windows 2000 is vulnerable Windows XP is",
    "start": "284320",
    "end": "291199"
  },
  {
    "text": "vulnerable um pretty much pretty much everyone's vulnerable so um PCH this by",
    "start": "291199",
    "end": "297759"
  },
  {
    "text": "the way because um I don't know many of you read uh Tim mullen's uh new article",
    "start": "297759",
    "end": "302840"
  },
  {
    "text": "on security focus.com nice read as always um Tim has got dibs on the name",
    "start": "302840",
    "end": "309039"
  },
  {
    "text": "of the one that's going to exploit this called mescaline and I have no doubt there will be a one that exploits this",
    "start": "309039",
    "end": "315440"
  },
  {
    "text": "in this in in in the near future so if you haven't patched this yet patch it if",
    "start": "315440",
    "end": "320680"
  },
  {
    "text": "you can't apply the patch at least disable decom um on on the systems um",
    "start": "320680",
    "end": "327000"
  },
  {
    "text": "you do that by running decom cnfg by the way so anyway here we are we we've launched",
    "start": "327000",
    "end": "333160"
  },
  {
    "text": "our exploit against this XP box here now going back to the move dword pointer",
    "start": "333160",
    "end": "340240"
  },
  {
    "text": "eax EDI we control eax because we've",
    "start": "340240",
    "end": "345840"
  },
  {
    "text": "overflowed the stack basically we've overwritten the save return address now we're continuing on writing you know",
    "start": "345840",
    "end": "351720"
  },
  {
    "text": "stuff that was passed on you know uh stuff on the stack because we we can do that we",
    "start": "351720",
    "end": "358120"
  },
  {
    "text": "overwrite this stuff when if I scroll up here a",
    "start": "358120",
    "end": "363000"
  },
  {
    "text": "bit right the line above is move into eax dwde pointer EBP plus 0 c h standing",
    "start": "366120",
    "end": "376680"
  },
  {
    "text": "for hex obviously so what we're doing here is um",
    "start": "376680",
    "end": "382520"
  },
  {
    "text": "taking um this isn't that secret you know um",
    "start": "384199",
    "end": "390240"
  },
  {
    "text": "okay so we're taking stuff that was passed to to the procedure move it into ex now because we've overflowed that we",
    "start": "390240",
    "end": "396319"
  },
  {
    "text": "control what goes into eax essentially so we can um Set uh or or overwrite the",
    "start": "396319",
    "end": "403840"
  },
  {
    "text": "parameter that will eventually become eax we can overwrite that with any 32-bit value we see fit so we could um",
    "start": "403840",
    "end": "413599"
  },
  {
    "text": "overwrite it with um a function pointer that points to our Shell Code that when",
    "start": "413599",
    "end": "419720"
  },
  {
    "text": "that function point is called it will go and get executed we we'll look at this as another thing in a minute at the",
    "start": "419720",
    "end": "425080"
  },
  {
    "text": "moment with Windows XP and Windows 2000 I'm just using um somewhere within an",
    "start": "425080",
    "end": "431360"
  },
  {
    "text": "unused portion of the PB it's always going to be riable and it can always be found at the same location so you know",
    "start": "431360",
    "end": "437240"
  },
  {
    "text": "we we opt for that on on an XP in 2000 Expo so if I unfortunately you're not",
    "start": "437240",
    "end": "444680"
  },
  {
    "text": "going to be able to see this happening but essentially this this code um",
    "start": "444680",
    "end": "450440"
  },
  {
    "text": "gets a use uses the TB to get a reference to the PEB and then from there we get the um you know the loaded module",
    "start": "450440",
    "end": "458000"
  },
  {
    "text": "list and everything we then get the Base address of kernel32.dll using that we can then find the address of get proc",
    "start": "458000",
    "end": "465240"
  },
  {
    "text": "address we then you know by paing the the P header and so on we then basically get the address of load Library a and",
    "start": "465240",
    "end": "472680"
  },
  {
    "text": "with armed with those two bits of information we can load arbitrary libraries and get arbitrary addresses um",
    "start": "472680",
    "end": "479159"
  },
  {
    "text": "this just basically spawns a reverse shell now it's unfortunate that um we we we can't split the things at the moment",
    "start": "479159",
    "end": "487280"
  },
  {
    "text": "but um the good thing about well the good thing maybe the bad thing about this",
    "start": "487280",
    "end": "493879"
  },
  {
    "text": "particular problem is calling exit thread fine you know we we exit the",
    "start": "493879",
    "end": "499520"
  },
  {
    "text": "thread and we can continue to um exploit this time and time again so if we lose our shell um we just fire off the",
    "start": "499520",
    "end": "506960"
  },
  {
    "text": "exploit again and we get our shell back again so terms of continuation of um execution it's great we don't kill",
    "start": "506960",
    "end": "514120"
  },
  {
    "text": "rpcss if we did you know if rpcss did die um and we couldn't recover the",
    "start": "514120",
    "end": "520880"
  },
  {
    "text": "process then with things like Windows XP and Windows 2003 you've got 60 seconds",
    "start": "520880",
    "end": "526000"
  },
  {
    "text": "to do your nefarious Deeds uh because the system will be shut down automatically okay so if I F5 this",
    "start": "526000",
    "end": "534760"
  },
  {
    "text": "that's just gone we've exited a couple of threads and stuff like that and and",
    "start": "534760",
    "end": "540279"
  },
  {
    "text": "I've got my I would have had my shell had I had netcat listening so let me do that",
    "start": "540279",
    "end": "547360"
  },
  {
    "text": "again execute we hit our break point again",
    "start": "547720",
    "end": "553279"
  },
  {
    "text": "F5 right we're done and I've got a shell which you unfortunately can't",
    "start": "553320",
    "end": "559800"
  },
  {
    "text": "see for those with extreme eagle eyes there you",
    "start": "559800",
    "end": "565200"
  },
  {
    "text": "go uh yeah I suppose it could do that",
    "start": "565480",
    "end": "570480"
  },
  {
    "text": "so every time I speak at black hat something goes terribly wrong last night",
    "start": "574120",
    "end": "579640"
  },
  {
    "text": "I thought it was the event had happened kind of thing I I'd lost my passport and being the numpy I am I would actually",
    "start": "579640",
    "end": "585680"
  },
  {
    "text": "left it on my bed so for all those who actually helped me look for my passport yesterday apologies for wasting your",
    "start": "585680",
    "end": "593720"
  },
  {
    "text": "time it might be a passport one time it might be a brother another time I lose you",
    "start": "594920",
    "end": "601120"
  },
  {
    "text": "for those that remember when my brother went missing in Las",
    "start": "601120",
    "end": "605240"
  },
  {
    "text": "Vegas okay so here's our shell and we're Gladius on this box on",
    "start": "611800",
    "end": "620480"
  },
  {
    "text": "this box",
    "start": "620480",
    "end": "623720"
  },
  {
    "text": "where recovery now this is running rpcss is running with system",
    "start": "629600",
    "end": "637320"
  },
  {
    "text": "privileges so we completely own this box um in terms of exploitation with Windows",
    "start": "637320",
    "end": "642760"
  },
  {
    "text": "2000 and Windows XP we can actually before we launch the exploit look at um",
    "start": "642760",
    "end": "650399"
  },
  {
    "text": "what interfaces are available on the the endpoint mapper so if I actually switch",
    "start": "650399",
    "end": "655839"
  },
  {
    "text": "back to the code before we do anything essentially",
    "start": "655839",
    "end": "661560"
  },
  {
    "text": "um I do a check OS um down here essentially what we're",
    "start": "661560",
    "end": "667480"
  },
  {
    "text": "doing is you know uh creating a a binding to RPC and then dumping all the",
    "start": "667480",
    "end": "675839"
  },
  {
    "text": "interfaces now if um let me uh do this",
    "start": "675839",
    "end": "682000"
  },
  {
    "text": "so you can actually see the bits of text",
    "start": "682000",
    "end": "687600"
  },
  {
    "text": "okay can everybody see that or should I make the font bigger it's good yeah okay Windows",
    "start": "703760",
    "end": "711800"
  },
  {
    "text": "XP and Windows XP alone has this interface 1 d55 b526 blah blah blah blah",
    "start": "711800",
    "end": "720639"
  },
  {
    "text": "so we can accurately determine by you know connecting to 135 and saying give me a list of registered interfaces on",
    "start": "720639",
    "end": "727120"
  },
  {
    "text": "this endpoint we can determine whether it's running XP Windows 2000 and Windows 2000",
    "start": "727120",
    "end": "736480"
  },
  {
    "text": "alone has an interface of",
    "start": "739680",
    "end": "745000"
  },
  {
    "text": "97520 1bo I like that Bo in there um you",
    "start": "745000",
    "end": "750720"
  },
  {
    "text": "know this interface is exclusive to Windows 2000 um so we can begin to",
    "start": "750720",
    "end": "756720"
  },
  {
    "text": "without even having to guess um you know what operating system we're dealing with",
    "start": "756720",
    "end": "762720"
  },
  {
    "text": "actually your arin's got some good stuff with using icmp fingerprinting he can uh work it out to the Service Pack level",
    "start": "762720",
    "end": "771000"
  },
  {
    "text": "and sometimes even the the hot fix label which is quite good stuff he's got going there um is does anyone know if is",
    "start": "771000",
    "end": "778480"
  },
  {
    "text": "speaking this he is he is okay you should uh see o his speech it should be uh quite good I'm",
    "start": "778480",
    "end": "784279"
  },
  {
    "text": "not sure if he's speaking on his icmp stuff this time around but anyway nice plug there um so a worm could do this as",
    "start": "784279",
    "end": "793839"
  },
  {
    "text": "well um so again another reason why this",
    "start": "793839",
    "end": "799120"
  },
  {
    "text": "is a a dangerous thing get get it patched as soon as possible or disable",
    "start": "799120",
    "end": "804880"
  },
  {
    "text": "decom Okay we then",
    "start": "804880",
    "end": "810720"
  },
  {
    "text": "you know once we've ascertained what system we're dealing with Windows XP oh",
    "start": "810720",
    "end": "816360"
  },
  {
    "text": "by the way when we overwrite the save return address there are um two ways we can go about exploiting it one is just",
    "start": "816360",
    "end": "823600"
  },
  {
    "text": "slap all of our Shell Code after the save return of address do a jump PSP overwrite the save return address with a",
    "start": "823600",
    "end": "829959"
  },
  {
    "text": "jump PSP that is so when the rep is called actually it's a rat haate in this",
    "start": "829959",
    "end": "835199"
  },
  {
    "text": "case so in other words we return you know take the the top thing off the stack but then the stack is um added by",
    "start": "835199",
    "end": "841959"
  },
  {
    "text": "eight essentially so when R 8 is called the the address on the top of the the",
    "start": "841959",
    "end": "847639"
  },
  {
    "text": "stack which is what we control is a jump PP you know it points to a jump PSP",
    "start": "847639",
    "end": "853160"
  },
  {
    "text": "instruction so when that executes we then go back to ESP and start executing downwards from there by putting all of",
    "start": "853160",
    "end": "859040"
  },
  {
    "text": "your shell code after the ESP can sometimes be problematic um you you you",
    "start": "859040",
    "end": "865320"
  },
  {
    "text": "know the exploit will work maybe uh four times out of five and and you know that",
    "start": "865320",
    "end": "870519"
  },
  {
    "text": "that fifth time it will crash uh inexplicit well not inexplicably it can be explained but there's no need to go",
    "start": "870519",
    "end": "876519"
  },
  {
    "text": "into it because there is a solution to this problem all we need is a tiny tiny bit of Shell Code after",
    "start": "876519",
    "end": "884399"
  },
  {
    "text": "the um after ESP if we come across here",
    "start": "884399",
    "end": "892000"
  },
  {
    "text": "again remember um we were moving EDI into dword pointer eax well ESI also",
    "start": "892000",
    "end": "901160"
  },
  {
    "text": "points to the Shell Code so um after you know the the vulnerable procedure",
    "start": "901160",
    "end": "907040"
  },
  {
    "text": "returns ESI points to our Shell Code so what we could say is you know just put a tiny bit of",
    "start": "907040",
    "end": "914079"
  },
  {
    "text": "um right stop that there we would not overwrite the Ser return address with a jump ESI the reason being our Shell Code",
    "start": "914079",
    "end": "923279"
  },
  {
    "text": "or our buffer must start in Unicode sl0 sl0 you know it must be that that an",
    "start": "923279",
    "end": "930880"
  },
  {
    "text": "assembly code when you you know you you translate that is pop ESP add bite",
    "start": "930880",
    "end": "937519"
  },
  {
    "text": "pointer eax plus eax plus n comma BL okay so if eax plus E X Plus n n being",
    "start": "937519",
    "end": "945720"
  },
  {
    "text": "the next bite in the buffer if that is not writable the process will crash and we've lost it okay so this is going to",
    "start": "945720",
    "end": "953800"
  },
  {
    "text": "be um one of the annoying things about Windows 23 will in a minute but this is",
    "start": "953800",
    "end": "960720"
  },
  {
    "text": "why we would not do a jump ESI cuz ESI points to that sl0 sl0 eax has never",
    "start": "960720",
    "end": "967160"
  },
  {
    "text": "been writable in my testing so it's the wrong way to go in terms of you know having a 100% effective",
    "start": "967160",
    "end": "974880"
  },
  {
    "text": "exploit so what I will do however is push 44 onto the stack this is after ESP",
    "start": "974880",
    "end": "981440"
  },
  {
    "text": "I've done a jump ESP so I push 44 onto the stack pop it into e then add e to",
    "start": "981440",
    "end": "987639"
  },
  {
    "text": "the ESI so ESI now doesn't point to my slash slash it points somewhere down",
    "start": "987639",
    "end": "993199"
  },
  {
    "text": "below that we then do the jump ESI so we only need a tiny bit this stuff here um",
    "start": "993199",
    "end": "1001399"
  },
  {
    "text": "highlighted seven bytes of Shell Code after ESP that will then jump us back to where our main Shell Code can be",
    "start": "1001399",
    "end": "1008920"
  },
  {
    "text": "found and then we avoid that problem of you know the the crash every uh you know",
    "start": "1010079",
    "end": "1015319"
  },
  {
    "text": "one time out of five and it works 100% reliably",
    "start": "1015319",
    "end": "1020839"
  },
  {
    "text": "okay exploring this on Windows 2000 Windows XP Windows N4 it's dead easy",
    "start": "1022720",
    "end": "1029120"
  },
  {
    "text": "Windows 2003 is another um kettle of fish so what I'm",
    "start": "1029120",
    "end": "1034880"
  },
  {
    "text": "going to do now is basically start",
    "start": "1034880",
    "end": "1040798"
  },
  {
    "text": "debugging uh on this is a a wi 2K3",
    "start": "1040799",
    "end": "1046880"
  },
  {
    "text": "server see",
    "start": "1046880",
    "end": "1050840"
  },
  {
    "text": "where are we rpcss",
    "start": "1055240",
    "end": "1059039"
  },
  {
    "text": "808 right I'm going to switch cables now",
    "start": "1068760",
    "end": "1074120"
  },
  {
    "text": "oh this side yeah",
    "start": "1091440",
    "end": "1098799"
  },
  {
    "text": "no actually wait a minute yeah this",
    "start": "1099919",
    "end": "1105158"
  },
  {
    "text": "side bios are excellent laptop they're just sometimes trying to find things on",
    "start": "1105640",
    "end": "1111960"
  },
  {
    "text": "there you know",
    "start": "1111960",
    "end": "1115880"
  },
  {
    "text": "okay okay if we can't get this coming through I'll just have to explain it",
    "start": "1131880",
    "end": "1138400"
  },
  {
    "text": "okay stack based canaries essentially what we do with",
    "start": "1138400",
    "end": "1143840"
  },
  {
    "text": "those it's a protection mechanism to stop you know classic stack based buffer",
    "start": "1143840",
    "end": "1150000"
  },
  {
    "text": "overflows so we take the save return",
    "start": "1150000",
    "end": "1157720"
  },
  {
    "text": "address exor it with what would one would hope is a a randomly generated",
    "start": "1157720",
    "end": "1165400"
  },
  {
    "text": "value and that becomes our canary",
    "start": "1165400",
    "end": "1170200"
  },
  {
    "text": "now if um we overflow a buffer on the",
    "start": "1171559",
    "end": "1177880"
  },
  {
    "text": "stack all the way down to the save return address we actually overwrite a copy of this Canary now when the do I",
    "start": "1177880",
    "end": "1187360"
  },
  {
    "text": "have rpcss",
    "start": "1187360",
    "end": "1190880"
  },
  {
    "text": "sorry just bear with me two",
    "start": "1206720",
    "end": "1210400"
  },
  {
    "text": "seconds okay I'm I'm just currently looking this is uh the output of Ida uh another excellent",
    "start": "1219039",
    "end": "1225039"
  },
  {
    "text": "tool um and I'm just currently looking for the place that does",
    "start": "1225039",
    "end": "1232000"
  },
  {
    "text": "the canary checking okay I rather than waste time",
    "start": "1232000",
    "end": "1238640"
  },
  {
    "text": "on that okay so what happens is um the canary is compared with an",
    "start": "1238640",
    "end": "1247039"
  },
  {
    "text": "authoritative version that's stored in the data section of rpcss",
    "start": "1247039",
    "end": "1255039"
  },
  {
    "text": "dodl so in terms of exploiting this on Windows 2003 server we could actually",
    "start": "1255039",
    "end": "1260120"
  },
  {
    "text": "attack the canary itself because of that remember that move into dword pointer",
    "start": "1260120",
    "end": "1265799"
  },
  {
    "text": "eax comma EDI if we can predict where",
    "start": "1265799",
    "end": "1270880"
  },
  {
    "text": "our buffer can be found in memory we could um attack the canary we could overwrite the the authoritative version",
    "start": "1270880",
    "end": "1278240"
  },
  {
    "text": "of the canary in the data section of RP css. dll with an address that points to",
    "start": "1278240",
    "end": "1284320"
  },
  {
    "text": "our buffer when we overflow overwrite the canary we also that to the same so",
    "start": "1284320",
    "end": "1289840"
  },
  {
    "text": "when the compare happens they match and we overwrite the every turn address and",
    "start": "1289840",
    "end": "1295200"
  },
  {
    "text": "Bing we're in business problem is we can't predict effectively the location",
    "start": "1295200",
    "end": "1300440"
  },
  {
    "text": "of where our shell code is going to be found so we can't use that as an attack now if the compare fails which it",
    "start": "1300440",
    "end": "1307400"
  },
  {
    "text": "will in this case because we can't attack the authoritative Canary",
    "start": "1307400",
    "end": "1313840"
  },
  {
    "text": "um we check to just do we know what that noise is by the",
    "start": "1313840",
    "end": "1319720"
  },
  {
    "text": "way sorry it's my",
    "start": "1319720",
    "end": "1324799"
  },
  {
    "text": "uh uh",
    "start": "1324799",
    "end": "1328240"
  },
  {
    "text": "cables it's like okay I'll Stand still uh if that's possible for me that okay",
    "start": "1332679",
    "end": "1339520"
  },
  {
    "text": "um what the security code then does you know if if the canaries don't match um",
    "start": "1339520",
    "end": "1348799"
  },
  {
    "text": "we check to see if a function pointer has been set again within the data section of rpcss dll and if it's zero",
    "start": "1348799",
    "end": "1356880"
  },
  {
    "text": "don't call it if it's not zero then call it so again we have another opportunity",
    "start": "1356880",
    "end": "1362799"
  },
  {
    "text": "here we could overwrite this function pointer within the rpcss dod. section",
    "start": "1362799",
    "end": "1367960"
  },
  {
    "text": "with a pointer to our Shell Code problem is it must start with sl0 Z which turns",
    "start": "1367960",
    "end": "1373679"
  },
  {
    "text": "into cruddy assembly code so we crash no joy",
    "start": "1373679",
    "end": "1379640"
  },
  {
    "text": "okay so once that you know does is does does",
    "start": "1379640",
    "end": "1385200"
  },
  {
    "text": "there exist a security Handler if that you know is not called kind of thing what the the code then does is called",
    "start": "1385200",
    "end": "1392840"
  },
  {
    "text": "set un set unhandled exception filter now",
    "start": "1392840",
    "end": "1399760"
  },
  {
    "text": "the on Windows the unhandled exception filter basically is a a last ditch you",
    "start": "1399760",
    "end": "1405799"
  },
  {
    "text": "know everything in terms of exception handlings gone wrong that's the thing that will eventually be",
    "start": "1405799",
    "end": "1413559"
  },
  {
    "text": "called someone hacking me okay um that's the thing that's going",
    "start": "1414159",
    "end": "1422000"
  },
  {
    "text": "to be called however the security code clears it it does set unhandled",
    "start": "1422000",
    "end": "1427559"
  },
  {
    "text": "exception filter zero in other words if we had attacked the um the unhandled",
    "start": "1427559",
    "end": "1434480"
  },
  {
    "text": "exception filter by you know overwriting that with a pointer to our Shell Code which would have been useless anyway",
    "start": "1434480",
    "end": "1439520"
  },
  {
    "text": "because of the sl0 you know sl0 and stuff Microsoft clear it you know they",
    "start": "1439520",
    "end": "1444799"
  },
  {
    "text": "do set onh handled exception filter bracket Z bracket semicon so that's gone",
    "start": "1444799",
    "end": "1451200"
  },
  {
    "text": "okay they then call the unhandled exception filter function so if we're going to find a way",
    "start": "1451200",
    "end": "1459559"
  },
  {
    "text": "of exploiting this on Windows 2003 server we can look at the code of unhandled exception filter to do this",
    "start": "1459559",
    "end": "1467760"
  },
  {
    "text": "now it does a number of things this this this actually I have here's one I made",
    "start": "1467760",
    "end": "1474679"
  },
  {
    "text": "earlier um okay this here is the disassembly of",
    "start": "1474679",
    "end": "1484120"
  },
  {
    "text": "unhandled exception filter now if we scroll",
    "start": "1484120",
    "end": "1490679"
  },
  {
    "text": "down we can see loads of things are being called such as get profile string",
    "start": "1490880",
    "end": "1497840"
  },
  {
    "text": "w get profile string W passes down to get private profile string W um we get get",
    "start": "1497840",
    "end": "1505159"
  },
  {
    "text": "Pro get profile string a um what else is called",
    "start": "1505159",
    "end": "1510679"
  },
  {
    "text": "um we load a library a library called Fort rep. dll that's here I'm sorry we",
    "start": "1510679",
    "end": "1519200"
  },
  {
    "text": "can't increase the font here Fort rep. dll is going to be loaded we then do a",
    "start": "1519200",
    "end": "1524360"
  },
  {
    "text": "get system directory W now here's a POS possible attack method get system",
    "start": "1524360",
    "end": "1530720"
  },
  {
    "text": "directory W references a pointer within the data section of Kel 32.dll that says",
    "start": "1530720",
    "end": "1538200"
  },
  {
    "text": "if you want the Windows system directory look at this address so if we overwrite this pointer again with that you know",
    "start": "1538200",
    "end": "1546320"
  },
  {
    "text": "where we get that opportunity to do the move dword poter eax comma EDI if we overwrite that then we can say the",
    "start": "1546320",
    "end": "1553960"
  },
  {
    "text": "Windows system directory is back slashback slash stuff okay that's a UNCC path if we can",
    "start": "1553960",
    "end": "1562559"
  },
  {
    "text": "trip the Ser you know the the winter K3 server into trying to resolve that name",
    "start": "1562559",
    "end": "1569200"
  },
  {
    "text": "you know as a UNC path it will load our for rep. dll as long as we export the",
    "start": "1569200",
    "end": "1574640"
  },
  {
    "text": "function report fault then we're in business because it will connect to us we put it in a all session share it",
    "start": "1574640",
    "end": "1581200"
  },
  {
    "text": "connects downloads for R.D loads it executes report for and that's where we stuff our nasty code so that's a possib",
    "start": "1581200",
    "end": "1588440"
  },
  {
    "text": "ility the only problem is remember we're we're overflowing the um the the stack",
    "start": "1588440",
    "end": "1595240"
  },
  {
    "text": "with um it's the host name that's that's what we're overflowing so what we need",
    "start": "1595240",
    "end": "1600799"
  },
  {
    "text": "to do is try and put stuff in there which is fairly benign and make it look like a domain name now I mean when it",
    "start": "1600799",
    "end": "1608399"
  },
  {
    "text": "like PS for that you know IP address it's not an existing domain name so we have to reply to it you know we have to",
    "start": "1608399",
    "end": "1614399"
  },
  {
    "text": "just send a number of replies saying if you ever look for this address um it depends on whether it's actually",
    "start": "1614399",
    "end": "1620320"
  },
  {
    "text": "using like a DNS lookup then we have to sniff its ID and respond with that and everything like that but it is a it is a",
    "start": "1620320",
    "end": "1626240"
  },
  {
    "text": "feasible attack but it's not a nice attack I don't like it it's too",
    "start": "1626240",
    "end": "1632799"
  },
  {
    "text": "crummy so what else do we do we",
    "start": "1632799",
    "end": "1638480"
  },
  {
    "text": "call loader unlock loader",
    "start": "1638960",
    "end": "1644000"
  },
  {
    "text": "lock these ldr functions loads of them look to see if a function Point has been",
    "start": "1644000",
    "end": "1650799"
  },
  {
    "text": "set within the DAT uh the data section of ntdll.dll and if you know the",
    "start": "1650799",
    "end": "1657840"
  },
  {
    "text": "function point is not zero it actually calls it now I can't see anywhere in the code of n ntdll.dll that actually sets",
    "start": "1657840",
    "end": "1665120"
  },
  {
    "text": "these pointers so I wonder whether um it's a a leftover from you know whilst",
    "start": "1665120",
    "end": "1671240"
  },
  {
    "text": "Microsoft were developing uh Windows 2003 it was like put debug code in here",
    "start": "1671240",
    "end": "1676519"
  },
  {
    "text": "kind of thing so anyway it references um a pointer which we again",
    "start": "1676519",
    "end": "1682360"
  },
  {
    "text": "could overwrite that's then moved into to eax and ex is C if it's not zero",
    "start": "1682360",
    "end": "1688600"
  },
  {
    "text": "again we're left with the same problem however of sl0",
    "start": "1688600",
    "end": "1693840"
  },
  {
    "text": "sl0 so the thing is when LSD put out their advisory they said they've got a",
    "start": "1693840",
    "end": "1699799"
  },
  {
    "text": "way of exploiting this on Windows 23 bypassing the canary protection stuff so",
    "start": "1699799",
    "end": "1705919"
  },
  {
    "text": "there's two options one they're either using the heat based overflow to exploit",
    "start": "1705919",
    "end": "1711240"
  },
  {
    "text": "it on Windows 2003 which I don't think I actually believe that the LSD have found a way to defeat the um stack protection",
    "start": "1711240",
    "end": "1719399"
  },
  {
    "text": "stuff so the only Theory I've come up with and I unfortunately haven't had",
    "start": "1719399",
    "end": "1724760"
  },
  {
    "text": "time to prove it yet um I actually need to speak to Greg is Greg around by the way Greg hogland he's not in at the",
    "start": "1724760",
    "end": "1731320"
  },
  {
    "text": "moment okay yeah Greg and I are going to work on this later on basically what I'm looking to do is cause a nested overflow",
    "start": "1731320",
    "end": "1739360"
  },
  {
    "text": "a secondary overflow um within the code of unhandled exception filter do",
    "start": "1739360",
    "end": "1745760"
  },
  {
    "text": "unhandled um exception filter now for a moment imagine when we call get system",
    "start": "1745760",
    "end": "1752240"
  },
  {
    "text": "directory up here imagine no length checking was done",
    "start": "1752240",
    "end": "1758200"
  },
  {
    "text": "here this is to explain the theory imagine no length checking was done they they assume well uh a Windows path name",
    "start": "1758200",
    "end": "1764480"
  },
  {
    "text": "is 25 56 bytes long so we'll declare above of 256 bytes on this stack and",
    "start": "1764480",
    "end": "1770919"
  },
  {
    "text": "reference this pointer it's going to be trusted it's only going to be secone back/ Windows back/ system 32 anyway so",
    "start": "1770919",
    "end": "1777760"
  },
  {
    "text": "let's whatever the pointer points do just copy it to that buffer now imagine that went on and we overwrite the",
    "start": "1777760",
    "end": "1783480"
  },
  {
    "text": "pointer to the window system 32 directory with a pointer to our big long buffer well there would be an overflow",
    "start": "1783480",
    "end": "1790200"
  },
  {
    "text": "there and what's more it's an unprotected code there is no Canary checking done in this stuff so if we can",
    "start": "1790200",
    "end": "1796240"
  },
  {
    "text": "find somewhere Within handled exception filter and there's loads of places it could be we could cause a secondary",
    "start": "1796240",
    "end": "1802760"
  },
  {
    "text": "overflow on the stack and Nest our uh you know real exploit within the the you",
    "start": "1802760",
    "end": "1809720"
  },
  {
    "text": "know the bigger exploit now as I said I haven't found it yet but it could be anywhere it could be",
    "start": "1809720",
    "end": "1817519"
  },
  {
    "text": "actually in report fault. dll uh sorry uh fult rep. DL in the report fault",
    "start": "1817519",
    "end": "1824760"
  },
  {
    "text": "function yeah report fault function um that does tons of stuff essentially what that function does is you know when you",
    "start": "1824760",
    "end": "1831080"
  },
  {
    "text": "get that annoying message like do you want to send this bug to Microsoft no don't send kind of thing that's the",
    "start": "1831080",
    "end": "1836480"
  },
  {
    "text": "fault reporting stuff that's what this D does and it does a hell of a lot of things so there's point of opportunity",
    "start": "1836480",
    "end": "1842200"
  },
  {
    "text": "there for us to find a reference to a pointer and possibly cause the secondary overflow if LSD have found a way that",
    "start": "1842200",
    "end": "1849320"
  },
  {
    "text": "might be the way they're doing it I don't know um it will be interesting to see you know when when they published",
    "start": "1849320",
    "end": "1855240"
  },
  {
    "text": "their mechanism uh what it turns out to be um or in the interim hopefully I can find um this secondary overflow kind of",
    "start": "1855240",
    "end": "1863559"
  },
  {
    "text": "technique anyway are there any questions on that",
    "start": "1863559",
    "end": "1868720"
  },
  {
    "text": "stuff at all sure at the back then",
    "start": "1868720",
    "end": "1875639"
  },
  {
    "text": "so okay essentially the question is most of the exploits are currently using TCP",
    "start": "1886679",
    "end": "1892880"
  },
  {
    "text": "is this possible over UDP that's essentially the the question Okay the reason he asked the question as",
    "start": "1892880",
    "end": "1899919"
  },
  {
    "text": "as you pointed out was that Slammer was UDP based and basically with UDP we can",
    "start": "1899919",
    "end": "1905919"
  },
  {
    "text": "just say you know bing bing bing bing bing fire out billions of packets I don't really care whether it gets there or not because it's connectionless I",
    "start": "1905919",
    "end": "1912880"
  },
  {
    "text": "don't have to go through this whole handshake and stuff I haven't actually tried it on UDP",
    "start": "1912880",
    "end": "1917919"
  },
  {
    "text": "to be honest um but I hear other people have successfully managed to do it with UDP",
    "start": "1917919",
    "end": "1924120"
  },
  {
    "text": "which if they're correct which I believe they are then it's going to be as bad as",
    "start": "1924120",
    "end": "1930240"
  },
  {
    "text": "slam if a worm is going to be written for it several variations will will be",
    "start": "1930240",
    "end": "1935440"
  },
  {
    "text": "written I would imagine one that will hit XP one that will hit Windows 2000",
    "start": "1935440",
    "end": "1941000"
  },
  {
    "text": "and you know other operating systems because of the jump ESP required basically",
    "start": "1941000",
    "end": "1946840"
  },
  {
    "text": "it's I mean if you could find actually EI I think posted something saying they've found some way to make it",
    "start": "1946840",
    "end": "1953600"
  },
  {
    "text": "portable across all platforms you know so if if they found that then you know",
    "start": "1953600",
    "end": "1959039"
  },
  {
    "text": "that would be extremely bad indeed but assuming that there is no way to do it on all platforms then um you would",
    "start": "1959039",
    "end": "1965320"
  },
  {
    "text": "probably find various versions going out there some which will Target Windows XP some Windows 2000 and so on now if it",
    "start": "1965320",
    "end": "1972120"
  },
  {
    "text": "hits XP if a Windows 21 hits an XP box well hey you know it shuts down and restarts within 60 seconds seconds kind",
    "start": "1972120",
    "end": "1978240"
  },
  {
    "text": "of thing So eventually you know the law of diminishing return says eventually it will get hit by a wind 2K uh a a Windows",
    "start": "1978240",
    "end": "1983919"
  },
  {
    "text": "XP one with Windows 2000 well it's not quite so clean that way you know rpcss",
    "start": "1983919",
    "end": "1989720"
  },
  {
    "text": "will die and the Box will stay up it won't be shut down but you know someone will boot it up again and stuff like",
    "start": "1989720",
    "end": "1995000"
  },
  {
    "text": "that because something didn't work and eventually it will get hit um",
    "start": "1995000",
    "end": "2002080"
  },
  {
    "text": "so the problem will of course be exacerbated if indeed it is uh",
    "start": "2002080",
    "end": "2007200"
  },
  {
    "text": "vulnerable over UDP has anyone actually confirmed whether it is in here or not anybody anybody bu",
    "start": "2007200",
    "end": "2017519"
  },
  {
    "text": "you no okay oh or was that yes over there no okay sorry it wasn't okay",
    "start": "2017519",
    "end": "2027240"
  },
  {
    "text": "question uh yeah I mean well it depends on what the payload does really",
    "start": "2034000",
    "end": "2039519"
  },
  {
    "text": "um so I mean your arbitrary exploit code",
    "start": "2039519",
    "end": "2044600"
  },
  {
    "text": "you know to do nasty things you could you know make it 200 bytes the Shell Code I'm using there is about 400",
    "start": "2044600",
    "end": "2050118"
  },
  {
    "text": "bytes um and that all that does is spawn a reverse shell you know if you're trying to get a worm going you know then",
    "start": "2050119",
    "end": "2056200"
  },
  {
    "text": "it will be a completely different payload essentially okay any other questions on",
    "start": "2056200",
    "end": "2062358"
  },
  {
    "text": "that sure gentleman here yeah um reference to how would work",
    "start": "2062359",
    "end": "2069720"
  },
  {
    "text": "yep is that no I I would believe that would be",
    "start": "2076919",
    "end": "2083358"
  },
  {
    "text": "required it as as I said I've not tested it over UDP um if it doesn't then well",
    "start": "2083359",
    "end": "2088520"
  },
  {
    "text": "that's going to be even worse then kind of thing um but I would I would imagine",
    "start": "2088520",
    "end": "2094118"
  },
  {
    "text": "it's like a a wee bit of a conversation first um um but the thing is you can",
    "start": "2094119",
    "end": "2099520"
  },
  {
    "text": "still fire those packets out with actually actually you might actually need a binding handle or something like",
    "start": "2099520",
    "end": "2104640"
  },
  {
    "text": "yeah actually I'm going to have to look into this UDP stuff a bit more uh okay",
    "start": "2104640",
    "end": "2110599"
  },
  {
    "text": "sir yeah um my brother has um he yeah if you",
    "start": "2113599",
    "end": "2119839"
  },
  {
    "text": "enable um com internet Based Services um it can be done in fact Todd sabbin had a",
    "start": "2119839",
    "end": "2126440"
  },
  {
    "text": "discussion with Russ about this um on bug track saying Todd Sabin was saying",
    "start": "2126440",
    "end": "2133400"
  },
  {
    "text": "uh I think Todd sabin's with uh bind view Razer is he still there anyone know",
    "start": "2133400",
    "end": "2138960"
  },
  {
    "text": "okay it doesn't matter um essentially he was saying I'm looking at a debugger right now that I've you know got a",
    "start": "2138960",
    "end": "2144839"
  },
  {
    "text": "breakpoint set I've got the exploit going and it's been done over Port 80 um I haven't done it my brother has and I",
    "start": "2144839",
    "end": "2151040"
  },
  {
    "text": "believe Todd saan has so I'm going to trust these guys you",
    "start": "2151040",
    "end": "2156000"
  },
  {
    "text": "know not many people people have you know com internet services enabled anyway um but it's if you are using it",
    "start": "2156119",
    "end": "2162640"
  },
  {
    "text": "in your environment then you're going to have to think of ways to mitigate the risk if you're not applying the",
    "start": "2162640",
    "end": "2168640"
  },
  {
    "text": "patches okay any other questions on this stuff sure",
    "start": "2169160",
    "end": "2175839"
  },
  {
    "text": "right in in terms of bypassing the canary stuff by overwriting the authoritative version right essentially",
    "start": "2190079",
    "end": "2196880"
  },
  {
    "text": "let's say our Shell Code can be found um or our buffer not our Shell Code rather",
    "start": "2196880",
    "end": "2203079"
  },
  {
    "text": "our buffer can be found at address 00 FF FF FF",
    "start": "2203079",
    "end": "2208680"
  },
  {
    "text": "okay if we using the the move dword pointer eax comma EDI EDI will have z0",
    "start": "2208680",
    "end": "2215760"
  },
  {
    "text": "FF FF FF in it okay okay that if we use that then to overwrite the you got it",
    "start": "2215760",
    "end": "2221720"
  },
  {
    "text": "okay sure sorry yeah well I'll I'll explain it perhaps in more detail um yeah the",
    "start": "2221720",
    "end": "2230079"
  },
  {
    "text": "authoritative version of the cookie is stored in the dot data section of RP css. DL with the move dword poter eax",
    "start": "2230079",
    "end": "2237560"
  },
  {
    "text": "comma EDI if we set eax to the address of",
    "start": "2237560",
    "end": "2242920"
  },
  {
    "text": "where we can find you know the authoritative version that",
    "start": "2242920",
    "end": "2248280"
  },
  {
    "text": "EDI being z00 FF FF FF you know the pointer to our buffer basically is then",
    "start": "2248280",
    "end": "2254280"
  },
  {
    "text": "written to that address so we overwrite the authoritative version of the the canary if we then",
    "start": "2254280",
    "end": "2261200"
  },
  {
    "text": "overwrite you know the portion of the stack that turns out to be the canary with 0 FF FF FF when it's moved into ECX",
    "start": "2261200",
    "end": "2270400"
  },
  {
    "text": "and the comparison's done with the you know dword pointer authoritative version the compare will succeed so then we just",
    "start": "2270400",
    "end": "2277960"
  },
  {
    "text": "do a normal stack based overflow kind of thing the only problem is the the",
    "start": "2277960",
    "end": "2283560"
  },
  {
    "text": "pointer to our buffer is not in the same place every time so it's um not not an",
    "start": "2283560",
    "end": "2290839"
  },
  {
    "text": "effective way of exploiting it okay any other",
    "start": "2290839",
    "end": "2297440"
  },
  {
    "text": "questions no I've been looking at exception",
    "start": "2298599",
    "end": "2304280"
  },
  {
    "text": "handling over the past couple of days um with with windows and imagine someone",
    "start": "2304280",
    "end": "2310319"
  },
  {
    "text": "sets up an exception Handler which is completely and utterly dracon it says Nope someone's attacking me exit process",
    "start": "2310319",
    "end": "2316400"
  },
  {
    "text": "that's not safe one would think it would be but it's not on Windows nt4 Windows 2000 and",
    "start": "2316400",
    "end": "2324560"
  },
  {
    "text": "Windows XP exit process does a number of interesting things now within the PEB there are two",
    "start": "2324560",
    "end": "2334720"
  },
  {
    "text": "pointers well there's actually several pointers but two of Interest interest one points to RTL enter critical section",
    "start": "2334720",
    "end": "2341680"
  },
  {
    "text": "the other points to RTL leave critical section now in the process of exiting a",
    "start": "2341680",
    "end": "2347760"
  },
  {
    "text": "process a low-level ntdll function is called RTL acquire PEB",
    "start": "2347760",
    "end": "2354680"
  },
  {
    "text": "lock that uses that pointer within the PEB to call enter critical",
    "start": "2354680",
    "end": "2361880"
  },
  {
    "text": "section that is at a consistent address across windows nt4 Windows XP and",
    "start": "2361880",
    "end": "2368079"
  },
  {
    "text": "Windows 2000 if we overwrite that then you know with a pointer to our",
    "start": "2368079",
    "end": "2373920"
  },
  {
    "text": "Shell Code um this is going on to Heap Heap overflows or or format string",
    "start": "2373920",
    "end": "2379240"
  },
  {
    "text": "vulnerabilities and stuff like that rather than this because of this SL SL stuff",
    "start": "2379240",
    "end": "2384560"
  },
  {
    "text": "um when the process is shutting down basically we can reverse that by you",
    "start": "2384560",
    "end": "2389720"
  },
  {
    "text": "know when RTL sorry yeah RTL acquire PEB lock when that's called it references",
    "start": "2389720",
    "end": "2395720"
  },
  {
    "text": "that point at which we've pointed to our sh code and we can basically stop you know the process from shutting down",
    "start": "2395720",
    "end": "2401040"
  },
  {
    "text": "execute our nasty arbitary code and everything like that and we're in business now the benefit of this is I",
    "start": "2401040",
    "end": "2407160"
  },
  {
    "text": "mean we it's widely been discussed you know attacking the unhandled exception",
    "start": "2407160",
    "end": "2412880"
  },
  {
    "text": "filter um but that moves unfortunately so with with Heap overflows um I think",
    "start": "2412880",
    "end": "2419240"
  },
  {
    "text": "one of the the best approaches to go with now is attacking this PB especially if you can cause an access violation um",
    "start": "2419240",
    "end": "2426880"
  },
  {
    "text": "and have the unhandled exception filter kick in because that's going to do the same kind of things with Windows 2003",
    "start": "2426880",
    "end": "2433240"
  },
  {
    "text": "it's slightly different those pointers within the PB have gone I mean the addresses are still there sorry the",
    "start": "2433240",
    "end": "2439359"
  },
  {
    "text": "addresses aren't there it it's null but the same location is it's just null now but we still have this you know ldr",
    "start": "2439359",
    "end": "2447760"
  },
  {
    "text": "stuff going on these ldr functions that are looking for this hidden um eax thing",
    "start": "2447760",
    "end": "2453079"
  },
  {
    "text": "it's just a new thing that people can start looking at um you know if they're exploiting things",
    "start": "2453079",
    "end": "2459560"
  },
  {
    "text": "like keep overflows and format string vulnerabilities and stuff like that um I just wanted to wrap up with that um",
    "start": "2459560",
    "end": "2466359"
  },
  {
    "text": "we're we're sort of running out of time so I'll tell you what are there any final",
    "start": "2466359",
    "end": "2472520"
  },
  {
    "text": "questions no oh sorry",
    "start": "2474319",
    "end": "2478599"
  },
  {
    "text": "sure well well uh the the question is if someone does write a word I'm using UDP",
    "start": "2486119",
    "end": "2492400"
  },
  {
    "text": "um is there going to be any restrictions on them spoofing the The Source IP address two points on that one is if we",
    "start": "2492400",
    "end": "2499160"
  },
  {
    "text": "need a binding handle you know if we make a the first connection and say give us some information back so we can make",
    "start": "2499160",
    "end": "2504800"
  },
  {
    "text": "a further request then spoofing the IP address well if it's not on our Network segment we don't get to see that",
    "start": "2504800",
    "end": "2510800"
  },
  {
    "text": "response and we lose that information we need so that would be a preventative problem with that um and of course if",
    "start": "2510800",
    "end": "2517960"
  },
  {
    "text": "they didn't need to do that most modern firewalls will look at the if they're",
    "start": "2517960",
    "end": "2523319"
  },
  {
    "text": "trying to do an attack by spoofing the IP address of an inside host then most fir wolves will say well that's come",
    "start": "2523319",
    "end": "2528760"
  },
  {
    "text": "from the outside you know and that's that's you know pretending to be from the inside drop the packet kind of thing",
    "start": "2528760",
    "end": "2533839"
  },
  {
    "text": "but you could if you're not trying to do that kind of attack if you're trying to make it look like the attack is you know",
    "start": "2533839",
    "end": "2539000"
  },
  {
    "text": "over in the Bahamas um when actual fact the attack is like in Alaska you know um",
    "start": "2539000",
    "end": "2547240"
  },
  {
    "text": "then sure possibly you could do that but again I don't know enough about the UDP Vector um because you might need a",
    "start": "2547240",
    "end": "2554720"
  },
  {
    "text": "binding handle kind of thing there sure another question",
    "start": "2554720",
    "end": "2560079"
  },
  {
    "text": "here right I could I could you rrange the question because I'm not UND sure what you're driving at I guess seems to",
    "start": "2570359",
    "end": "2579119"
  },
  {
    "text": "okay right this one essentially the question is what's so amazing about the",
    "start": "2583760",
    "end": "2589480"
  },
  {
    "text": "decom stuff when there's plenty of other Microsoft recent Microsoft vulnerabilities out there",
    "start": "2589480",
    "end": "2595480"
  },
  {
    "text": "well it's a it's a it's a cool bug for a start you know I I'm excited by it",
    "start": "2595480",
    "end": "2601760"
  },
  {
    "text": "um it's unauthenticated no credentials are required I it's a remote route essentially um those are few and far",
    "start": "2601760",
    "end": "2608839"
  },
  {
    "text": "between on Windows um you know you might have an Internet Explorer buffer overflow which requires you to send",
    "start": "2608839",
    "end": "2615640"
  },
  {
    "text": "someone an HTML page and say Britney Spears can be found here in in the nude or whatever kind of thing you know um",
    "start": "2615640",
    "end": "2622599"
  },
  {
    "text": "you know you have to entice people kind of thing those kind of attacks are really lame and boring and cross-site scripting you know it's well",
    "start": "2622599",
    "end": "2628680"
  },
  {
    "text": "whoop-de-doo kind of thing I don't know um the other problem with this is they're all vulnerable all platform all",
    "start": "2628680",
    "end": "2635119"
  },
  {
    "text": "windows modern Windows platforms at least anywh way used in in a business context mind you I bet there's a load of",
    "start": "2635119",
    "end": "2640839"
  },
  {
    "text": "businesses out there that use 98 and 95 still um yeah",
    "start": "2640839",
    "end": "2646079"
  },
  {
    "text": "the these are supposed to be like um a secure operating system and they're all",
    "start": "2646079",
    "end": "2651319"
  },
  {
    "text": "vulnerable and that's that's why it's so exciting as well you know so any other",
    "start": "2651319",
    "end": "2659400"
  },
  {
    "text": "questions no okay well I hope everyone enjoys the the rest of the conference",
    "start": "2659400",
    "end": "2664680"
  },
  {
    "text": "and have fun",
    "start": "2664680",
    "end": "2668838"
  },
  {
    "text": "e",
    "start": "2725960",
    "end": "2728960"
  },
  {
    "text": "e",
    "start": "2755920",
    "end": "2758920"
  },
  {
    "text": "e",
    "start": "2785920",
    "end": "2788920"
  },
  {
    "text": "e",
    "start": "2815839",
    "end": "2818839"
  },
  {
    "text": "e",
    "start": "2845839",
    "end": "2848839"
  },
  {
    "text": "e",
    "start": "2875839",
    "end": "2878839"
  },
  {
    "text": "e",
    "start": "2905760",
    "end": "2908760"
  },
  {
    "text": "e",
    "start": "2935720",
    "end": "2938720"
  },
  {
    "text": "e",
    "start": "2965720",
    "end": "2968720"
  },
  {
    "text": "e",
    "start": "2995640",
    "end": "2998640"
  },
  {
    "text": "e",
    "start": "3025640",
    "end": "3028640"
  },
  {
    "text": "e",
    "start": "3055640",
    "end": "3058640"
  },
  {
    "text": "e",
    "start": "3085559",
    "end": "3088559"
  },
  {
    "text": "e",
    "start": "3115520",
    "end": "3118520"
  },
  {
    "text": "e",
    "start": "3145520",
    "end": "3148520"
  },
  {
    "text": "e",
    "start": "3175440",
    "end": "3178440"
  },
  {
    "text": "e",
    "start": "3205440",
    "end": "3208440"
  },
  {
    "text": "e",
    "start": "3235440",
    "end": "3238440"
  },
  {
    "text": "e",
    "start": "3265359",
    "end": "3268359"
  },
  {
    "text": "e",
    "start": "3295319",
    "end": "3298319"
  },
  {
    "text": "e",
    "start": "3325319",
    "end": "3328319"
  },
  {
    "text": "e",
    "start": "3355240",
    "end": "3358240"
  },
  {
    "text": "e",
    "start": "3385240",
    "end": "3388240"
  },
  {
    "text": "e",
    "start": "3415240",
    "end": "3418240"
  },
  {
    "text": "e",
    "start": "3445160",
    "end": "3448160"
  },
  {
    "text": "e",
    "start": "3475119",
    "end": "3478119"
  },
  {
    "text": "e",
    "start": "3505119",
    "end": "3508119"
  },
  {
    "text": "e",
    "start": "3535039",
    "end": "3538039"
  },
  {
    "text": "e",
    "start": "3565039",
    "end": "3568039"
  },
  {
    "text": "e",
    "start": "3595039",
    "end": "3598039"
  },
  {
    "text": "e",
    "start": "3624960",
    "end": "3627960"
  },
  {
    "text": "e",
    "start": "3654920",
    "end": "3657920"
  },
  {
    "text": "e",
    "start": "3684920",
    "end": "3687920"
  },
  {
    "text": "e",
    "start": "3714839",
    "end": "3717839"
  },
  {
    "text": "e",
    "start": "3744839",
    "end": "3747839"
  },
  {
    "text": "e",
    "start": "3774839",
    "end": "3777839"
  },
  {
    "text": "e",
    "start": "3804760",
    "end": "3807760"
  },
  {
    "text": "e",
    "start": "3834720",
    "end": "3837720"
  },
  {
    "text": "e",
    "start": "3864720",
    "end": "3867720"
  },
  {
    "text": "e",
    "start": "3894640",
    "end": "3897640"
  },
  {
    "text": "e",
    "start": "3924640",
    "end": "3927640"
  },
  {
    "text": "e",
    "start": "3954640",
    "end": "3957640"
  },
  {
    "text": "e",
    "start": "3984559",
    "end": "3987559"
  },
  {
    "text": "e",
    "start": "4014520",
    "end": "4017520"
  },
  {
    "text": "e",
    "start": "4044520",
    "end": "4047520"
  },
  {
    "text": "e",
    "start": "4074440",
    "end": "4077440"
  },
  {
    "text": "e e",
    "start": "4104440",
    "end": "4108480"
  }
]