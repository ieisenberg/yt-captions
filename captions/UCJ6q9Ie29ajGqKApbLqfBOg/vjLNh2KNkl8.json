[
  {
    "start": "0",
    "end": "76000"
  },
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "I'm my name is Arden einar I'm a security researcher at the analysis research labs and Analysis is a company",
    "start": "9080",
    "end": "15780"
  },
  {
    "text": "focused on Enterprise software security and among the different is enterprise",
    "start": "15780",
    "end": "21720"
  },
  {
    "text": "software developers sap is probably the most popular one with over 400 000",
    "start": "21720",
    "end": "27119"
  },
  {
    "text": "customers and that is 400 000 installations and including ninety percent of Fortune 500s and sap develops",
    "start": "27119",
    "end": "36000"
  },
  {
    "text": "enterprise software that is used by different companies to manage their business processes and their most",
    "start": "36000",
    "end": "41280"
  },
  {
    "text": "critical assets that includes their operations their financials their human",
    "start": "41280",
    "end": "46920"
  },
  {
    "text": "capital the customer relationships Supply chains many others and to do so they they",
    "start": "46920",
    "end": "53520"
  },
  {
    "text": "provide different modules that can be included in the in the sap system and they are all based on most of them are",
    "start": "53520",
    "end": "59760"
  },
  {
    "text": "all based on web services that are accessible through HTTP and this is true",
    "start": "59760",
    "end": "64920"
  },
  {
    "text": "for both Java above and even s4hana which is their Flagship product and to expose these Services they use a",
    "start": "64920",
    "end": "72900"
  },
  {
    "text": "proprietary HTTP server called internet communication manager now the internet communication manager",
    "start": "72900",
    "end": "78720"
  },
  {
    "start": "76000",
    "end": "174000"
  },
  {
    "text": "or ICM is used to handle all the communication that is a between the sap",
    "start": "78720",
    "end": "84180"
  },
  {
    "text": "system and the outside world like clients for example customers or employees but also with other SAP",
    "start": "84180",
    "end": "91560"
  },
  {
    "text": "systems and with our system that can consume these services and to communicate with other with our",
    "start": "91560",
    "end": "99540"
  },
  {
    "text": "clients there are different protocols that the ICM can can handle like before which is a proprietary protocol like RMI",
    "start": "99540",
    "end": "107759"
  },
  {
    "text": "from java IOP SMTP and the most important one and the main purpose of",
    "start": "107759",
    "end": "113159"
  },
  {
    "text": "the ICM is to handle HTTP and https and what's really interesting about the",
    "start": "113159",
    "end": "119040"
  },
  {
    "text": "ICM is that it's present in all sap system by default so all installations",
    "start": "119040",
    "end": "124619"
  },
  {
    "text": "all sap installations will have this this component and it will be exposed by default so this is part of the what is",
    "start": "124619",
    "end": "131879"
  },
  {
    "text": "called sap kernel and so any system like Java a web dispatcher which is a load",
    "start": "131879",
    "end": "137940"
  },
  {
    "text": "balancer is for Hana the cloud all are going to use this exact same probability",
    "start": "137940",
    "end": "143300"
  },
  {
    "text": "hdb server of course we don't have the source code of this HTTP server so we have to",
    "start": "143300",
    "end": "151319"
  },
  {
    "text": "reverse engineering I had to and understand how this system worked and this is probably the most important part",
    "start": "151319",
    "end": "157500"
  },
  {
    "text": "of our research to understand how it works because then vulnerabilities are going to come by itself",
    "start": "157500",
    "end": "163200"
  },
  {
    "text": "and so sap does not provide a lot of information they provide this small diagram that we can see in the slide but",
    "start": "163200",
    "end": "169739"
  },
  {
    "text": "we are going to abstract this to make a to understand how this actually works",
    "start": "169739",
    "end": "175379"
  },
  {
    "start": "174000",
    "end": "248000"
  },
  {
    "text": "so to abstract this and I'm going to abstract a lot of the internals of the architecture so that I can I can explain",
    "start": "175379",
    "end": "181140"
  },
  {
    "text": "this in 40 minutes and I'm going to see the ICM as just a system that will",
    "start": "181140",
    "end": "186780"
  },
  {
    "text": "receive clients a requests and responses and first when a client starts a TCP",
    "start": "186780",
    "end": "192480"
  },
  {
    "text": "connection the ICM will create our will start a worker thread which is just a simple thread that will be assigned to",
    "start": "192480",
    "end": "198900"
  },
  {
    "text": "this TCP connection to handle all the requests and responses to do so it will use an HTTP parser and also some",
    "start": "198900",
    "end": "205739"
  },
  {
    "text": "internal handlers to actually try to resolve the request and generate the response and if it's not possible to do",
    "start": "205739",
    "end": "212040"
  },
  {
    "text": "it inside the ICM then a different process which is a job organ or an above process will be used because in there is",
    "start": "212040",
    "end": "218580"
  },
  {
    "text": "the business logic of the of the sap system so when our request arrives from the",
    "start": "218580",
    "end": "223920"
  },
  {
    "text": "client the worker thread will try to parse it will try to resolve it and if it's not",
    "start": "223920",
    "end": "229080"
  },
  {
    "text": "possible which is in most cases that it will happen that way it will send the the request to the Java arrival process",
    "start": "229080",
    "end": "235560"
  },
  {
    "text": "through what is called a memory pipe I'm going to explain why submarine piping a minute then they work a process will",
    "start": "235560",
    "end": "242700"
  },
  {
    "text": "resolve the request generate a response send it back to the ICM and the ICM will send it to the client",
    "start": "242700",
    "end": "249120"
  },
  {
    "start": "248000",
    "end": "376000"
  },
  {
    "text": "so what are memory pipes well MPI is just how they call memory pipes it's a",
    "start": "249120",
    "end": "254819"
  },
  {
    "text": "framework that is used to support the exchange of data between the ICM and the",
    "start": "254819",
    "end": "260280"
  },
  {
    "text": "Java River process which I'm going to call worker process and to do so and to do it efficiently induce the shared",
    "start": "260280",
    "end": "267240"
  },
  {
    "text": "memory to send MPI pointers that are just pointers to the shared memory even",
    "start": "267240",
    "end": "272460"
  },
  {
    "text": "though it's called memory pipes it's using shared memory and when these memory pipes are sent or that when these",
    "start": "272460",
    "end": "279180"
  },
  {
    "text": "MPI pointers are sent between the worker Pros we worker thread and the worker process they are going to be sending a",
    "start": "279180",
    "end": "285720"
  },
  {
    "text": "reference to an API buffer which is just a buffer inside the shared memory that is a fixed site buffer of 65 kilobytes",
    "start": "285720",
    "end": "292500"
  },
  {
    "text": "and they will be reserved and free both by the worker thread and by the worker process using an API Handler",
    "start": "292500",
    "end": "300600"
  },
  {
    "text": "so let's see an example of how this works first a request will arrive to the inputable Handler of the worker thread",
    "start": "300600",
    "end": "307259"
  },
  {
    "text": "which is just a TCP socket with an internal buffer for every day that arrives from the TCP connection and when",
    "start": "307259",
    "end": "314040"
  },
  {
    "text": "the icms or the worker thread in the ICM is ready to handle the request it will read from this inputable Handler",
    "start": "314040",
    "end": "321960"
  },
  {
    "text": "it will Reserve an MPI buffer in the shared memory using the mpa Handler and it will store the request there",
    "start": "321960",
    "end": "329220"
  },
  {
    "text": "now it will try to resolve it it will pass this request it will try to resolve it using the internal handlers which I'm",
    "start": "329220",
    "end": "334860"
  },
  {
    "text": "going to explain also later and if it's not possible to resolve their request inside the ICM it will",
    "start": "334860",
    "end": "341400"
  },
  {
    "text": "forward the request to the worker process and this will be done by sending the mpia pointer",
    "start": "341400",
    "end": "346740"
  },
  {
    "text": "now the Java River process will have a reference to this position of the shared memory and it will generate a response",
    "start": "346740",
    "end": "353160"
  },
  {
    "text": "for this request which again will be placed in the shared memory by reserving",
    "start": "353160",
    "end": "358320"
  },
  {
    "text": "an MPI buffer and the reference will be sent to the worker thread",
    "start": "358320",
    "end": "363419"
  },
  {
    "text": "the worker thread will be able now to send this re this response back to the inputable hanger which will forward it",
    "start": "363419",
    "end": "368820"
  },
  {
    "text": "to the client finally the MPI buffers will be freed and the references will be lost",
    "start": "368820",
    "end": "377240"
  },
  {
    "start": "376000",
    "end": "493000"
  },
  {
    "text": "he also said that jicm will try to resolve the request using internal handlers so what are they",
    "start": "377820",
    "end": "383580"
  },
  {
    "text": "well when the request is parsed the the parser will actually choose which handles should be included in a list of",
    "start": "383580",
    "end": "390419"
  },
  {
    "text": "of handles that should try to be used to resolve the request and this is going to be done by looking at the URL so",
    "start": "390419",
    "end": "396780"
  },
  {
    "text": "depending on this URL some of these handles will be included and some don't and what's important is that when a",
    "start": "396780",
    "end": "402900"
  },
  {
    "text": "Handler is able to resolve our request it will just send a response back to the client and all the other handles will be",
    "start": "402900",
    "end": "409199"
  },
  {
    "text": "deleted from this list and there is request response cycle will be completed so first we have the cache Handler is",
    "start": "409199",
    "end": "416340"
  },
  {
    "text": "the first hander that will be used and it's always going to be included in the list and the Chicago will just do what",
    "start": "416340",
    "end": "422639"
  },
  {
    "text": "is expected it will look in the cache for a store object for the URL that is was requested and if it fails it will",
    "start": "422639",
    "end": "429120"
  },
  {
    "text": "continue if it's able to to generate a response out of that it will send it to the client",
    "start": "429120",
    "end": "434639"
  },
  {
    "text": "then we have the admin Handler and the authentication Handler they are both present by default but they are only",
    "start": "434639",
    "end": "439680"
  },
  {
    "text": "going to be included in list depending on the pattern in the URL so for the admin Handler is if they if the URL",
    "start": "439680",
    "end": "446099"
  },
  {
    "text": "starts with the prefix a slash sap slash admin and for the authentication Handler there are some hard-coded values in the",
    "start": "446099",
    "end": "452520"
  },
  {
    "text": "ICM that will be compared to and depending on that it will include it or not",
    "start": "452520",
    "end": "457740"
  },
  {
    "text": "next we have the modification the file axis and the redirect Handler which are not really interesting because they are",
    "start": "457740",
    "end": "463259"
  },
  {
    "text": "not present by default they need to be set before the sap system starts in a specific configuration file",
    "start": "463259",
    "end": "469620"
  },
  {
    "text": "and finally we have the Java navab handle with just just handles that will be used to forward the MPI pointers to",
    "start": "469620",
    "end": "475680"
  },
  {
    "text": "the specific process as you can see there is a specific function for each of the handlers there",
    "start": "475680",
    "end": "481740"
  },
  {
    "text": "are also some 100 this is these are functions inside the ICM and there are also some other handles like the low",
    "start": "481740",
    "end": "487319"
  },
  {
    "text": "Handler which is not quite interesting because it cannot generate a response so we are not going to see that",
    "start": "487319",
    "end": "494400"
  },
  {
    "start": "493000",
    "end": "695000"
  },
  {
    "text": "so let's see an example of how the ICM will resolve our request using internal handlers",
    "start": "494400",
    "end": "500819"
  },
  {
    "text": "first the request will arrive and in this case it's a request it's a get request to slash sap slash admin so when",
    "start": "500819",
    "end": "508500"
  },
  {
    "text": "the ICM is ready to to handle this request it will Reserve an API buffer store the",
    "start": "508500",
    "end": "514320"
  },
  {
    "text": "request there and then it will use the parser to select the handles that should be",
    "start": "514320",
    "end": "519479"
  },
  {
    "text": "included of course the cache handle will be included in this case the admin Handler because of the URL prefix",
    "start": "519479",
    "end": "527519"
  },
  {
    "text": "and finally the Java rebuff Handler which is also always included at the end",
    "start": "527519",
    "end": "532860"
  },
  {
    "text": "now it will call the Cache Handler and in this case let's say it fails",
    "start": "532860",
    "end": "538380"
  },
  {
    "text": "so now the admin handle will be called and again in this case let's say it's able to resolve the request so it will",
    "start": "538380",
    "end": "544680"
  },
  {
    "text": "generate a response it will not place it in the short memory because it's not necessary to do it and the other handles will be deleted",
    "start": "544680",
    "end": "552720"
  },
  {
    "text": "and the response will be forwarded to the client finally again the MPI buffer will be",
    "start": "552720",
    "end": "557940"
  },
  {
    "text": "freed and the request response cycle will be completed but what happens when we have a request",
    "start": "557940",
    "end": "565500"
  },
  {
    "text": "that is longer than that 65 kilobytes so as long as it's bigger than the mpie size the MPI buffer size sorry so again",
    "start": "565500",
    "end": "573600"
  },
  {
    "text": "we are going to have some problems because we are going to need more than one buffer for this and I'm going to call this kind of request a long request",
    "start": "573600",
    "end": "580620"
  },
  {
    "text": "even though it's not that long it's just like 65 kilobytes but what is going to",
    "start": "580620",
    "end": "585660"
  },
  {
    "text": "happen is that when this request arrives for example a rigors containing in 66",
    "start": "585660",
    "end": "591420"
  },
  {
    "text": "000 bytes in the body the worker thread will Reserve an API buffer and it will store the first 65",
    "start": "591420",
    "end": "598260"
  },
  {
    "text": "kilobytes and this is because the internet handlers only need the healers of our request to resolve or to generate",
    "start": "598260",
    "end": "604500"
  },
  {
    "text": "a response so it's the ICM expects that if an internal Handler is able to resolve the request then there is no",
    "start": "604500",
    "end": "610980"
  },
  {
    "text": "body and in in sap they have the headers cannot be longer than 65 kilobytes",
    "start": "610980",
    "end": "617040"
  },
  {
    "text": "therefore it's not necessary to store more than one or to reserve more than one MPI buffer",
    "start": "617040",
    "end": "622800"
  },
  {
    "text": "now the handles will be called and in this case only the cache and the Java or above Handler",
    "start": "622800",
    "end": "629060"
  },
  {
    "text": "in this case will fail and so now when the cash when the worker process a",
    "start": "629060",
    "end": "634800"
  },
  {
    "text": "Handler is called the rest of the request is going to be placed in the share memory because the business logic",
    "start": "634800",
    "end": "640260"
  },
  {
    "text": "or the the actual Java River process will need the body of the request so the ICM will reserve a new MPI buffer",
    "start": "640260",
    "end": "648300"
  },
  {
    "text": "or as many as needed it will place the request there the rest of the request and it will send both references to the",
    "start": "648300",
    "end": "654959"
  },
  {
    "text": "Java River process now the gallery or process will be able to generate a response again",
    "start": "654959",
    "end": "660240"
  },
  {
    "text": "it will store their response in an MPI buffer it will send a reference back to the",
    "start": "660240",
    "end": "665579"
  },
  {
    "text": "worker thread and the worker thread will now be able to forward the response back to the",
    "start": "665579",
    "end": "671820"
  },
  {
    "text": "inputable handle which will forward it to the client and now as there were more than one",
    "start": "671820",
    "end": "677399"
  },
  {
    "text": "buffer used for this request instead of erasing or freeing each of these buffer One By One The MPI free or buffer",
    "start": "677399",
    "end": "684720"
  },
  {
    "text": "function is going to be called so that all buffers are freed and that is all buffers associated with the worker",
    "start": "684720",
    "end": "690240"
  },
  {
    "text": "thread and now the references will be lost again",
    "start": "690240",
    "end": "695880"
  },
  {
    "start": "695000",
    "end": "771000"
  },
  {
    "text": "so let's see at the first vulnerability so as I said the ICM is not expecting",
    "start": "695880",
    "end": "702120"
  },
  {
    "text": "that an internal Handler is able to resolve a request with a body but what if we send a long request that is a",
    "start": "702120",
    "end": "707880"
  },
  {
    "text": "result by an internet Handler again we see a request which is a get to",
    "start": "707880",
    "end": "713399"
  },
  {
    "text": "slash sap slash admin and with a body of 65 66 kilobytes",
    "start": "713399",
    "end": "720600"
  },
  {
    "text": "um and so this was what it would happen is that the worker 3 will again reserve a buffer place the first 65 kilobytes in",
    "start": "720600",
    "end": "727680"
  },
  {
    "text": "this buffer and it will call all the handlers the cache counter will fail",
    "start": "727680",
    "end": "733200"
  },
  {
    "text": "but now the admin handle will resolve the request and that is something that the icing was not expecting to happen",
    "start": "733200",
    "end": "739079"
  },
  {
    "text": "so the response will be created it will be forwarded to the client",
    "start": "739079",
    "end": "744899"
  },
  {
    "text": "and the the counter will be will be deleted under of course the MPI buffer",
    "start": "744899",
    "end": "750720"
  },
  {
    "text": "will be free and the request response cycle will be completed but we have more data from the previous",
    "start": "750720",
    "end": "756000"
  },
  {
    "text": "request in the inputable Handler so what will happen is that the worker thread will read more because it's really",
    "start": "756000",
    "end": "761880"
  },
  {
    "text": "waiting for a new request and it will place this request or the rest of the requested body in this MPI",
    "start": "761880",
    "end": "769200"
  },
  {
    "text": "buffer and it will consider it as a new request so if you know something about https",
    "start": "769200",
    "end": "774480"
  },
  {
    "text": "synchronization then you will know that this is a big vulnerability because we are going to be able to desynchronize",
    "start": "774480",
    "end": "779880"
  },
  {
    "text": "any ICM or the communication between a proxy and an ICM in any case and that is",
    "start": "779880",
    "end": "785160"
  },
  {
    "text": "because this request that we can see in the slide has nothing strange it's completely RFC compliant and so any",
    "start": "785160",
    "end": "791940"
  },
  {
    "text": "proxy that sees this request will think that this is an isolated an isolated HD message because it's a get request to a",
    "start": "791940",
    "end": "799620"
  },
  {
    "text": "normal URL and it contains a body of 65 in this case of 65",
    "start": "799620",
    "end": "805579"
  },
  {
    "text": "546 and 17 bytes which includes the entire body and that is also the get a",
    "start": "805579",
    "end": "811200"
  },
  {
    "text": "smuggle request and when this reaches the ICM",
    "start": "811200",
    "end": "816480"
  },
  {
    "text": "and the ICM will actually split this and it will consider that the last part of the of the body is a new request so this",
    "start": "816480",
    "end": "823620"
  },
  {
    "text": "will allow us to split the request and actually cause a desynchronization",
    "start": "823620",
    "end": "828959"
  },
  {
    "text": "now you might think that this is not such a critical vulnerability but remember we found our limited that is",
    "start": "828959",
    "end": "834060"
  },
  {
    "text": "without them to get without authentication and that is in a component that is completely exposed to",
    "start": "834060",
    "end": "839639"
  },
  {
    "text": "the internet in all sap by default and you are going to see how we can use this",
    "start": "839639",
    "end": "845100"
  },
  {
    "text": "and how why this synchronization is so critical because I'm going to explain how we can use this to either still a",
    "start": "845100",
    "end": "852720"
  },
  {
    "text": "user's credentials it is still session cookies and also modify the behavior of",
    "start": "852720",
    "end": "858300"
  },
  {
    "text": "the application I'm going to show actually one example there are others I'm not able to show",
    "start": "858300",
    "end": "864480"
  },
  {
    "text": "this in in this presentation you can read it in the white paper but what I'm going to show is how to",
    "start": "864480",
    "end": "870180"
  },
  {
    "text": "hijack a session from a from a user and to do so I'm going to use the NWA",
    "start": "870180",
    "end": "875220"
  },
  {
    "text": "endpoint which is also present by default in all saps and it's an endpoint that is used to redirect users to the",
    "start": "875220",
    "end": "881579"
  },
  {
    "text": "login URL and this provides two interesting features the first one is an open redirect that",
    "start": "881579",
    "end": "888720"
  },
  {
    "text": "will allow us to inject something in the in the array reg or in the URL actually",
    "start": "888720",
    "end": "894000"
  },
  {
    "text": "in the host so we will be able to change anything we want by placing something in the host",
    "start": "894000",
    "end": "900420"
  },
  {
    "text": "header of the request of course this is not actually a vulnerability this is a feature because in some normal cases we",
    "start": "900420",
    "end": "907019"
  },
  {
    "text": "are not going to be able to modify this in addictive and also the other important feature is",
    "start": "907019",
    "end": "913800"
  },
  {
    "text": "that we will be able to reflect parameters we will be able to reflect anything we place in the body of the request and in a post request and the",
    "start": "913800",
    "end": "920279"
  },
  {
    "text": "query string of a get request in the query string of the redirect URL",
    "start": "920279",
    "end": "925920"
  },
  {
    "text": "okay the as you can see the line breaks will be replaced with spaces",
    "start": "925920",
    "end": "931380"
  },
  {
    "text": "so let's combine this NWA features and the the synchronization to hijack a",
    "start": "931380",
    "end": "937260"
  },
  {
    "text": "victims request and a victim session to do so the attacker will send a payload which is just available to uh to",
    "start": "937260",
    "end": "945240"
  },
  {
    "text": "an internal Handler or a request to an internet Handler that will we can that it will contain a smuggle request",
    "start": "945240",
    "end": "952680"
  },
  {
    "text": "when this reads the ICM it will be splitted as we already said so and the first part will be resolved by",
    "start": "952680",
    "end": "960360"
  },
  {
    "text": "the internal Handler and the response will be sent back to the attacker but the rest will be stored in the ICM",
    "start": "960360",
    "end": "965760"
  },
  {
    "text": "because in this case the content length states that there should be 100 bytes in the body but we can choose any amount of",
    "start": "965760",
    "end": "972480"
  },
  {
    "text": "light we want but as you can see there is no body so it will wait for more data also you can see this is a post request",
    "start": "972480",
    "end": "978839"
  },
  {
    "text": "to NWA and with the host hitter being evil.com which is a host controlled by",
    "start": "978839",
    "end": "984060"
  },
  {
    "text": "the attacker so when a victim issues a request to the proxy the proxy will forward this request and",
    "start": "984060",
    "end": "990839"
  },
  {
    "text": "it will concatenate it with the with the previous smuggle request and it will use the first hundred bytes of this request",
    "start": "990839",
    "end": "996959"
  },
  {
    "text": "as part of the body so the response that will be generated by the ICM will be a redirect to",
    "start": "996959",
    "end": "1004279"
  },
  {
    "text": "evil.com and this this redirect will also contain in the in the query string",
    "start": "1004279",
    "end": "1010519"
  },
  {
    "text": "the first hundred bytes or as many as we want of the original request of the victim and this also includes the",
    "start": "1010519",
    "end": "1016940"
  },
  {
    "text": "cookies so when the browser of the victim receives this request it will send a new",
    "start": "1016940",
    "end": "1023899"
  },
  {
    "text": "request sorry when the victim drops will receive this response it will send a new request but in this case to evil.com",
    "start": "1023899",
    "end": "1029480"
  },
  {
    "text": "which is a host controlled by the attacker so this request will not only contain",
    "start": "1029480",
    "end": "1034880"
  },
  {
    "text": "what was expected from the redirect but also the query string will contain the",
    "start": "1034880",
    "end": "1039980"
  },
  {
    "text": "original request of the victim including the cookies so that way we will be able to hijack",
    "start": "1039980",
    "end": "1047298"
  },
  {
    "text": "any any victims session and the cookies and we will be able to actually take",
    "start": "1047299",
    "end": "1052820"
  },
  {
    "text": "control of an application if we hijack for example an admin user but for each",
    "start": "1052820",
    "end": "1058940"
  },
  {
    "text": "request that we are able to hijack we will be needing to we will need to send a new attack",
    "start": "1058940",
    "end": "1064460"
  },
  {
    "text": "and we don't want to do it or we want to just send one attack and to make this persistent",
    "start": "1064460",
    "end": "1070880"
  },
  {
    "text": "and what's interesting about the vulnerability and why it's so critical is that we are not using any HTTP",
    "start": "1070880",
    "end": "1076280"
  },
  {
    "text": "headers to attack this so we actually don't need to inject any special or",
    "start": "1076280",
    "end": "1081500"
  },
  {
    "text": "strange header to cause the synchronization uh so what is going to happen is we are",
    "start": "1081500",
    "end": "1087559"
  },
  {
    "text": "going to be able to exploit this by using HTML forms or JavaScript as you can see in the slide I can create a form",
    "start": "1087559",
    "end": "1094640"
  },
  {
    "text": "that is going to send a request to an sap system with a URL being starting with Slash sap slash admin so it will be",
    "start": "1094640",
    "end": "1101539"
  },
  {
    "text": "handled by your internet Handler uh it will contain a padding that will make this a long request",
    "start": "1101539",
    "end": "1108020"
  },
  {
    "text": "and at the end will contain the smuggle a message of course it's the the smartest message",
    "start": "1108020",
    "end": "1113059"
  },
  {
    "text": "is the post request to NWA as we already saw so when a victim receives this what is",
    "start": "1113059",
    "end": "1119360"
  },
  {
    "text": "going to happen is that the JavaScript that is found at the end will submit this this form and the attack will be",
    "start": "1119360",
    "end": "1125480"
  },
  {
    "text": "created but in this case from the victims browser and we can also use this kind of attacks",
    "start": "1125480",
    "end": "1131480"
  },
  {
    "text": "to uh in other in other vulnerabilities like the one found last year in hi proxy which again did not require any exchange",
    "start": "1131480",
    "end": "1138799"
  },
  {
    "text": "or invalid HTTP header and or in any case a forbidden here like a host or a",
    "start": "1138799",
    "end": "1145100"
  },
  {
    "text": "Content line heater so we will be able to use the same technique but in this case using DNS rebinding to allow the",
    "start": "1145100",
    "end": "1152419"
  },
  {
    "text": "browser on the JavaScript to send the extra the extra headers",
    "start": "1152419",
    "end": "1157520"
  },
  {
    "start": "1156000",
    "end": "1268000"
  },
  {
    "text": "I'm going to show now an example of this",
    "start": "1157520",
    "end": "1162039"
  },
  {
    "text": "so in this tab we are going to see the victim and the victim is going to send a normal",
    "start": "1171380",
    "end": "1177440"
  },
  {
    "text": "request to start page and we can see that the response is 200 and in this request it's also included the cookies",
    "start": "1177440",
    "end": "1183559"
  },
  {
    "text": "of the victim and nothing strange is going on until here okay you can see the cookies",
    "start": "1183559",
    "end": "1189620"
  },
  {
    "text": "but in this tab we are going to see the attacker which is going to send the payload we already saw",
    "start": "1189620",
    "end": "1194900"
  },
  {
    "text": "this is again to slash sap slash admin I'm going to use slash sap slash admin because it's always present and he sees",
    "start": "1194900",
    "end": "1200960"
  },
  {
    "text": "it and at the end it's going to contain the smuggle request",
    "start": "1200960",
    "end": "1206440"
  },
  {
    "text": "so when this is sent to the to the ICM it will place the smuggle request in the",
    "start": "1207980",
    "end": "1214039"
  },
  {
    "text": "eyes in the back end and it will wait for more data so when a victim sends her request he will receive a redirect as we",
    "start": "1214039",
    "end": "1221179"
  },
  {
    "text": "erase off that will send him to the malicious domain which is controlled by the attacker and it will send also the",
    "start": "1221179",
    "end": "1229400"
  },
  {
    "text": "the session cookies and everything at the first in this case 200 bytes of the request",
    "start": "1229400",
    "end": "1236080"
  },
  {
    "text": "if we follow the erection what we are going to see is that the",
    "start": "1238039",
    "end": "1244460"
  },
  {
    "text": "evil server actually received this this data so we already have the cookies of the victim but also it responded with a",
    "start": "1244460",
    "end": "1251120"
  },
  {
    "text": "form that will continue the attack so now the big thing will become the attacker and this will create a botnet",
    "start": "1251120",
    "end": "1257000"
  },
  {
    "text": "that will persist the attack as long as we want",
    "start": "1257000",
    "end": "1261400"
  },
  {
    "start": "1268000",
    "end": "1502000"
  },
  {
    "text": "but after seeing this vulnerability I wanted to know more about the ICM so I started looking at the different",
    "start": "1269260",
    "end": "1275240"
  },
  {
    "text": "features that it offers and what's interesting is that the ICM when it's configured for Java for a Java process",
    "start": "1275240",
    "end": "1281900"
  },
  {
    "text": "will accept pipeline requests this is something expected from the RFC but in I",
    "start": "1281900",
    "end": "1287480"
  },
  {
    "text": "enable this is not by default so this means that the ICM will allow to",
    "start": "1287480",
    "end": "1293360"
  },
  {
    "text": "receive a concatenated request in the same payload and when this happens the",
    "start": "1293360",
    "end": "1298700"
  },
  {
    "text": "worker thread will actually store both requests in the same API buffer but when the HTTP parts were recognized",
    "start": "1298700",
    "end": "1305780"
  },
  {
    "text": "that there is an extra request it will reserve a new MPI buffer and it will place the request there so now the",
    "start": "1305780",
    "end": "1312140"
  },
  {
    "text": "worker process will continue processing the the first the worker thread will continue processing the first request it",
    "start": "1312140",
    "end": "1318080"
  },
  {
    "text": "will send it to a Java process the Java process will generate the response it will place it in the MPI buffer",
    "start": "1318080",
    "end": "1325340"
  },
  {
    "text": "send it to the worker thread and the worker thread will forward this response back to the victim or to the client",
    "start": "1325340",
    "end": "1330679"
  },
  {
    "text": "actually now the MPI buffers will be freed one by one the references will be lost and the",
    "start": "1330679",
    "end": "1337100"
  },
  {
    "text": "request response cycle will be completed and now the worker third will start processing the next request that was",
    "start": "1337100",
    "end": "1343520"
  },
  {
    "text": "stored in the in another MPI buffer because this was a pipeline request",
    "start": "1343520",
    "end": "1349000"
  },
  {
    "text": "but what about sending uh a long request with a pipeline request at the end",
    "start": "1350059",
    "end": "1357140"
  },
  {
    "text": "so let's say we send a request with this longer than 65 kilobytes and at the end",
    "start": "1357140",
    "end": "1362720"
  },
  {
    "text": "we send another pipeline request now the worker thread will reserve a",
    "start": "1362720",
    "end": "1368000"
  },
  {
    "text": "buffer again it will place the first 65 kilobytes there the when it's ready to send it to the",
    "start": "1368000",
    "end": "1373820"
  },
  {
    "text": "Java process we'll store the other part in another MPI buffer and the HTTP",
    "start": "1373820",
    "end": "1378980"
  },
  {
    "text": "parser will recognize that there is an extra request so again it will reserve a new API buffer and it",
    "start": "1378980",
    "end": "1384679"
  },
  {
    "text": "will place the pipeline request there now of course the worker thread will send it to the Java process the first",
    "start": "1384679",
    "end": "1391280"
  },
  {
    "text": "two buffers it will generate a response place it in natural memory send it to the worker thread again",
    "start": "1391280",
    "end": "1397820"
  },
  {
    "text": "and the response will be forwarded to the client but remember one thing when we send a long request the buffers are",
    "start": "1397820",
    "end": "1404659"
  },
  {
    "text": "not free one by one instead they are going to be the MPI Freel buffers is going to be used and so all the buffers",
    "start": "1404659",
    "end": "1411620"
  },
  {
    "text": "associated with this worker thread will be freed and that includes the the MPI",
    "start": "1411620",
    "end": "1416960"
  },
  {
    "text": "buffer that was used for the pipeline request so now we have a reference to a free MPI",
    "start": "1416960",
    "end": "1422780"
  },
  {
    "text": "buffer and when we try to of course the the reference is not lost when the MPI",
    "start": "1422780",
    "end": "1428480"
  },
  {
    "text": "buffers are free and so when the worker thread sends this to the Java process we will see a narrow",
    "start": "1428480",
    "end": "1435620"
  },
  {
    "text": "race because the the worker threat thinks that there is no buffer being",
    "start": "1435620",
    "end": "1440900"
  },
  {
    "text": "used so what can we do with this well of course we can have a reference to our",
    "start": "1440900",
    "end": "1447679"
  },
  {
    "text": "free MPA buffer and if another TCP connection another worker thread tries to store a request in the shared memory",
    "start": "1447679",
    "end": "1456020"
  },
  {
    "text": "if we are lucky enough it will reserve the same MPI buffer that we were using and actually this is going to happen a",
    "start": "1456020",
    "end": "1462860"
  },
  {
    "text": "lot because the mpa Handler actually allocates the free buffers in a list that is actually a stack even though sap",
    "start": "1462860",
    "end": "1470480"
  },
  {
    "text": "states that this is a queue we are when after reverse engineering the the ICM I",
    "start": "1470480",
    "end": "1475760"
  },
  {
    "text": "noticed that this is not a good stack so a free buffers are going to be used a lot again once over and over again so",
    "start": "1475760",
    "end": "1484640"
  },
  {
    "text": "so the worker 32 will place the request there and it will modify the the buffer",
    "start": "1484640",
    "end": "1491000"
  },
  {
    "text": "and of course we will have a different value inside the MPI buffer but if we try to get the response from this we",
    "start": "1491000",
    "end": "1498080"
  },
  {
    "text": "will still have an error because the worker 31 believes that there are no buffers used",
    "start": "1498080",
    "end": "1503120"
  },
  {
    "text": "so what we want is to write in in the same position after a big team plays his",
    "start": "1503120",
    "end": "1509120"
  },
  {
    "text": "request and we are going to do it by sending an incomplete pipeline request so when we",
    "start": "1509120",
    "end": "1514760"
  },
  {
    "text": "send incomplete requests the the worker thread waits for more data and incomplete requests are going to be any",
    "start": "1514760",
    "end": "1519980"
  },
  {
    "text": "request that does not contain two line breaks after the heaters or that contains a body shorter than the message",
    "start": "1519980",
    "end": "1527120"
  },
  {
    "text": "length healer was stated so when the worker thread reads A tries",
    "start": "1527120",
    "end": "1532400"
  },
  {
    "text": "to read this this request it will it will parse it and it will set again will be said again to read mode because more",
    "start": "1532400",
    "end": "1540080"
  },
  {
    "text": "data is required so when this data arrives then it will be written at the end of the API of the MPI buffer and it",
    "start": "1540080",
    "end": "1548240"
  },
  {
    "text": "will be written at the position that is stored in the offset so each worker",
    "start": "1548240",
    "end": "1554240"
  },
  {
    "text": "thread has an offset for each MBI buffer as you can see if we send first some",
    "start": "1554240",
    "end": "1559340"
  },
  {
    "text": "data and then we send more data it will be placed in the same memory address",
    "start": "1559340",
    "end": "1564760"
  },
  {
    "text": "and the offset of this buffer will be modified",
    "start": "1564760",
    "end": "1570799"
  },
  {
    "start": "1570000",
    "end": "1668000"
  },
  {
    "text": "so again let's see an example we will send a request a long request with an extra byte which is the pipeline",
    "start": "1570799",
    "end": "1578120"
  },
  {
    "text": "request it will be stored the first part it will be storing the MPI buffers and then the",
    "start": "1578120",
    "end": "1583940"
  },
  {
    "text": "HTTP parser will recognize this and it will place the extra byte in",
    "start": "1583940",
    "end": "1589940"
  },
  {
    "text": "another MPI buffer because it will believe that this is a pipeline request again the first part will be result",
    "start": "1589940",
    "end": "1596559"
  },
  {
    "text": "request response will be generated will be placed in the shared memory forwarded to the worker thread and the worker",
    "start": "1596559",
    "end": "1602900"
  },
  {
    "text": "thread will forward it to the client now all the buffers will be free and we will have the reference to this place",
    "start": "1602900",
    "end": "1609200"
  },
  {
    "text": "but when the workers will try to parse this pipeline request it will stop and",
    "start": "1609200",
    "end": "1614480"
  },
  {
    "text": "it will be set into read mode now if we are lucky enough a worker thread 2 or a client a victim will send",
    "start": "1614480",
    "end": "1622039"
  },
  {
    "text": "his request and the worker thread will reserve the same MPI buffer",
    "start": "1622039",
    "end": "1627260"
  },
  {
    "text": "and when this happens you can see the MPI buffer at the top the workers need 2",
    "start": "1627260",
    "end": "1632419"
  },
  {
    "text": "will have the offset 55 because it has written 55 bytes the request will be",
    "start": "1632419",
    "end": "1637700"
  },
  {
    "text": "placed there and if the attacker then sends a request or the rest of the request you will be",
    "start": "1637700",
    "end": "1643940"
  },
  {
    "text": "able to Tamper the request that the victim issued so now when the worker 32 sends the MPI",
    "start": "1643940",
    "end": "1650120"
  },
  {
    "text": "pointer to the Java process the job process will actually use the new the",
    "start": "1650120",
    "end": "1655159"
  },
  {
    "text": "new request that was modified by the attacker so this will generate for example a malicious response will be",
    "start": "1655159",
    "end": "1661640"
  },
  {
    "text": "placed in the MPI buffer and the worker thread will forward this back to the client",
    "start": "1661640",
    "end": "1668120"
  },
  {
    "start": "1668000",
    "end": "1732000"
  },
  {
    "text": "okay so again the steps to reproduce this attack is the attacker needs to hijack an API buffer the victim will",
    "start": "1668120",
    "end": "1675260"
  },
  {
    "text": "send a request that will be placed in the same MPI buffer the attacker will then tamper this data",
    "start": "1675260",
    "end": "1680779"
  },
  {
    "text": "and the victim will receive the malicious response which in this case for example if we send again to start",
    "start": "1680779",
    "end": "1686360"
  },
  {
    "text": "page as a victim in some cases we will receive the redirect to evil.com and we can use the exact same attacks in",
    "start": "1686360",
    "end": "1693799"
  },
  {
    "text": "that in the previous example in the previous vulnerability and any attack of smuggling exploitation will be will be",
    "start": "1693799",
    "end": "1699919"
  },
  {
    "text": "successful and also the we will not need a proxy because we're actually tampering",
    "start": "1699919",
    "end": "1705440"
  },
  {
    "text": "different TCP connections so we connect we can make this attack even without a proxy but it is less reliable",
    "start": "1705440",
    "end": "1713059"
  },
  {
    "text": "but if you see that the image you will notice that some of the responses does not contain a stethoscope and that is",
    "start": "1713059",
    "end": "1719120"
  },
  {
    "text": "because in some cases we are not tampering the request a buffer but instead we are tampering a response",
    "start": "1719120",
    "end": "1725419"
  },
  {
    "text": "buffer because MPI buffers are multi-purpose so we can use the same API buffer for a request and a response",
    "start": "1725419",
    "end": "1733039"
  },
  {
    "start": "1732000",
    "end": "1857000"
  },
  {
    "text": "so again let's say we already have an API buffer hijacked and a request arrives from the victim",
    "start": "1733039",
    "end": "1741020"
  },
  {
    "text": "and in this case let's say that the victim does not reserve the same MPI",
    "start": "1741020",
    "end": "1746179"
  },
  {
    "text": "buffer but another one this is just a timing scenario depending on the time when we send one request and the other",
    "start": "1746179",
    "end": "1751820"
  },
  {
    "text": "in some cases one buffer will be used and in some cases another so in this case another MPA buffer will",
    "start": "1751820",
    "end": "1758840"
  },
  {
    "text": "use for the request it will be sent to the Java process and the job process will generate the response that will be placed in this",
    "start": "1758840",
    "end": "1765140"
  },
  {
    "text": "case in the MPI buffer we have a hijacked so now the response will be placed there",
    "start": "1765140",
    "end": "1772159"
  },
  {
    "text": "and if at any of this and if sorry and if at this point we are able to send",
    "start": "1772159",
    "end": "1777500"
  },
  {
    "text": "more data we are going to be able to Tamper not the risk the request but the response",
    "start": "1777500",
    "end": "1783679"
  },
  {
    "text": "so we will be able to place anything we want we will be able to write an arbitrary response that will be sent to",
    "start": "1783679",
    "end": "1789980"
  },
  {
    "text": "the client so when the worker thread to uh sends",
    "start": "1789980",
    "end": "1795919"
  },
  {
    "text": "before sending the request is going to pass the response itself sorry the response is going to be parsed",
    "start": "1795919",
    "end": "1801080"
  },
  {
    "text": "it will send it to the client and if you notice the the MPI the API buffer you will see that there is an",
    "start": "1801080",
    "end": "1807500"
  },
  {
    "text": "extra header that I included there and that is sap cache control here which is",
    "start": "1807500",
    "end": "1812779"
  },
  {
    "text": "an internet healer used to to select which responses should be stored in the cachet",
    "start": "1812779",
    "end": "1819799"
  },
  {
    "text": "so what's going to happen is that the cache Handler will think that this response should be stored in negative",
    "start": "1819799",
    "end": "1825980"
  },
  {
    "text": "therefore is going to say to see what was the request URL and it will store the",
    "start": "1825980",
    "end": "1832279"
  },
  {
    "text": "response for that resource and we can even play the role of the big",
    "start": "1832279",
    "end": "1837860"
  },
  {
    "text": "team if we instead of sending just the attack we can also send a lot of requests to actually modify any URL we",
    "start": "1837860",
    "end": "1845360"
  },
  {
    "text": "want so we will be able to poison any URL and to to create a response I will",
    "start": "1845360",
    "end": "1851059"
  },
  {
    "text": "completely arbitrary so we can place a script we can place anything we want by using the sap cache control",
    "start": "1851059",
    "end": "1858340"
  },
  {
    "start": "1857000",
    "end": "2003000"
  },
  {
    "text": "so we are going to see a demo of this attack and remember one thing if we are",
    "start": "1864020",
    "end": "1869179"
  },
  {
    "text": "able to this is not reliable this is not really reliable we will need some some attempts not a lot of attempts but it's",
    "start": "1869179",
    "end": "1876260"
  },
  {
    "text": "not going to happen in one attack but if we are successful for only one attack then this response will be stored so it",
    "start": "1876260",
    "end": "1883399"
  },
  {
    "text": "will be persisted forever if we set a big sap cache control max age value",
    "start": "1883399",
    "end": "1891500"
  },
  {
    "text": "so as you can see we send a request to start page and nothing strange happens",
    "start": "1891500",
    "end": "1896840"
  },
  {
    "text": "okay we just get a normal response",
    "start": "1896840",
    "end": "1901360"
  },
  {
    "text": "but we are going to try to focus on this start page URL",
    "start": "1902539",
    "end": "1909640"
  },
  {
    "text": "so I'm going to use a small script I wrote in Python that is going to first try to hijack different API buffers",
    "start": "1909740",
    "end": "1918140"
  },
  {
    "text": "then it will send a lot of requests to start page so that we are able to modify",
    "start": "1918140",
    "end": "1924380"
  },
  {
    "text": "those responses and then it will try to add to Tamper",
    "start": "1924380",
    "end": "1929600"
  },
  {
    "text": "the data of these responses so it will try to place the sap cache control in",
    "start": "1929600",
    "end": "1934700"
  },
  {
    "text": "this response and also a malicious script of course we are not going to be able to",
    "start": "1934700",
    "end": "1940279"
  },
  {
    "text": "hijack this buffer and modify the response in just one attempt we are going to need to send a lot of attacks",
    "start": "1940279",
    "end": "1947299"
  },
  {
    "text": "actually not a lot some a few a few of them",
    "start": "1947299",
    "end": "1952120"
  },
  {
    "text": "so as I said after one of these attacks is successful the money the start page will",
    "start": "1953779",
    "end": "1960440"
  },
  {
    "text": "be modified and the the script will recognize this it will change the times to try to be",
    "start": "1960440",
    "end": "1966980"
  },
  {
    "text": "able to do it and again as you can see after a few times where we were able to",
    "start": "1966980",
    "end": "1972679"
  },
  {
    "text": "modify the start page so now when a big team or any client requests for the surprise he will",
    "start": "1972679",
    "end": "1979399"
  },
  {
    "text": "actually receive a different response which is which contains a script and an",
    "start": "1979399",
    "end": "1984679"
  },
  {
    "text": "arbitrary HTML [Applause]",
    "start": "1984679",
    "end": "1997409"
  },
  {
    "text": "okay so with this we are able to modify anything we want from the application but still there is something else we can",
    "start": "2000220",
    "end": "2006940"
  },
  {
    "start": "2003000",
    "end": "2144000"
  },
  {
    "text": "do and that is to try to modify or to try to Tamper the memory of a of the",
    "start": "2006940",
    "end": "2013659"
  },
  {
    "text": "cache of another file and I'm going to show you how so I said that we we were",
    "start": "2013659",
    "end": "2019539"
  },
  {
    "text": "going to try to modify the response just before the response parser is called but",
    "start": "2019539",
    "end": "2024940"
  },
  {
    "text": "what if we try to do it after that and that is just a matter of lag of course but after sending a lot of requests and",
    "start": "2024940",
    "end": "2031360"
  },
  {
    "text": "attacks we might be able to do it so if the response is not modified and",
    "start": "2031360",
    "end": "2037779"
  },
  {
    "text": "actually the response for the request that the victim issued had a sap cache control the response of course will be",
    "start": "2037779",
    "end": "2044980"
  },
  {
    "text": "parsed will be sent to the to the client will be called at this point we had we",
    "start": "2044980",
    "end": "2052240"
  },
  {
    "text": "hadn't modified day or we hadn't tampered the response so the cache Handler will actually create a file",
    "start": "2052240",
    "end": "2057520"
  },
  {
    "text": "because a cachet objects will be stored in a file and in this file it will place some",
    "start": "2057520",
    "end": "2063099"
  },
  {
    "text": "special healers these headers will tell information about the response such as the length of the entire response the",
    "start": "2063099",
    "end": "2068980"
  },
  {
    "text": "length of the body and some other information that is not quite important and if we are able to modify or to",
    "start": "2068980",
    "end": "2075398"
  },
  {
    "text": "temper the response at this specific point then the cache Handler will place the response in this file and it will",
    "start": "2075399",
    "end": "2082240"
  },
  {
    "text": "not match the headers that it created so when another client sends a request",
    "start": "2082240",
    "end": "2089020"
  },
  {
    "text": "to the ICM and to this specific resource which is corrupted the request cash will be called it will",
    "start": "2089020",
    "end": "2096638"
  },
  {
    "text": "find a reference in the cache and it will use this file to generate a response and this response will not be",
    "start": "2096639",
    "end": "2103119"
  },
  {
    "text": "placed in the shared memory as we already saw but it will be placed in a hip in a hip buffer",
    "start": "2103119",
    "end": "2109480"
  },
  {
    "text": "and the length of this buffer will be set using the healers so in this case it",
    "start": "2109480",
    "end": "2114820"
  },
  {
    "text": "will be 85 kilo 85 bytes but the actual response was longer than x85 so we are",
    "start": "2114820",
    "end": "2122020"
  },
  {
    "text": "going to be able to write in this buffer and actually obtain a heat buffer",
    "start": "2122020",
    "end": "2127119"
  },
  {
    "text": "overflow okay and we have proven that it is possible to modify other data structures that were in the hip so that",
    "start": "2127119",
    "end": "2134320"
  },
  {
    "text": "we can override different address pointers and eventually obtain remote",
    "start": "2134320",
    "end": "2139359"
  },
  {
    "text": "execution if we are able to defeat a memory randomization",
    "start": "2139359",
    "end": "2145078"
  },
  {
    "start": "2144000",
    "end": "2211000"
  },
  {
    "text": "so sap created two CVS for these vulnerabilities actually I reported some",
    "start": "2145140",
    "end": "2151599"
  },
  {
    "text": "other vulnerabilities but these were the most interesting ones and the first one was a CBS S10",
    "start": "2151599",
    "end": "2157300"
  },
  {
    "text": "as Ira approved it's possible to hijack all clients and the second one was an 8.1 because",
    "start": "2157300",
    "end": "2164560"
  },
  {
    "text": "they stated that the attack complexity was high and the scope was unchanged we do not agree with that part that is what",
    "start": "2164560",
    "end": "2171880"
  },
  {
    "text": "sap stated um and also this is quite critical",
    "start": "2171880",
    "end": "2176980"
  },
  {
    "text": "because it affects all the saps in the world we can choose any sap and it will",
    "start": "2176980",
    "end": "2182020"
  },
  {
    "text": "be vulnerable to both of these attacks and this includes Java above S4 Hana",
    "start": "2182020",
    "end": "2187900"
  },
  {
    "text": "which is in the cloud a web dispatcher which is the load balancer used for most saps and all any any sap product",
    "start": "2187900",
    "end": "2196180"
  },
  {
    "text": "they also released two security nodes and a manual workaround that can be implemented in both the netweaver and",
    "start": "2196180",
    "end": "2202599"
  },
  {
    "text": "the web dispatcher and finally we are navsys created a detection tool that will allow clients to know if they are",
    "start": "2202599",
    "end": "2209440"
  },
  {
    "text": "vulnerable to this or not so finally some conclusions",
    "start": "2209440",
    "end": "2215760"
  },
  {
    "start": "2211000",
    "end": "2339000"
  },
  {
    "text": "um it was interesting to see that HTTP servers are great targets for attackers because not only they are exposed as we",
    "start": "2215920",
    "end": "2223720"
  },
  {
    "text": "already know but reverse engineering one of these components is quite easier than",
    "start": "2223720",
    "end": "2229480"
  },
  {
    "text": "one might think because remember the HTTP server must be compliant with the RFC so we know what the HTTP server is",
    "start": "2229480",
    "end": "2236560"
  },
  {
    "text": "going to do we can predict what is its functionality and most HCB servers has",
    "start": "2236560",
    "end": "2242020"
  },
  {
    "text": "same same functionalities and workflow even though the internals might be different and also it's really important",
    "start": "2242020",
    "end": "2248800"
  },
  {
    "text": "to be able to recognize where the requests and responses are stored in the memory so that we know what are we what",
    "start": "2248800",
    "end": "2254200"
  },
  {
    "text": "are we going to be able to modify and not also it was really interesting to see",
    "start": "2254200",
    "end": "2259660"
  },
  {
    "text": "that it is possible to escalate low level vulnerabilities that in the past were not exploitable okay because for",
    "start": "2259660",
    "end": "2265900"
  },
  {
    "text": "example in the past we were not being able to we are not going to be able to split or we are not able to exploit use",
    "start": "2265900",
    "end": "2271420"
  },
  {
    "text": "after freeze in uh in an HTTP server but using this Advanced ATP techniques we",
    "start": "2271420",
    "end": "2279160"
  },
  {
    "text": "are going to be able to of course modify a invalid cylinder we're going to be able to modify the application by using",
    "start": "2279160",
    "end": "2286300"
  },
  {
    "text": "a attack that don't do not rely on HTTP headers or we are going to be able to",
    "start": "2286300",
    "end": "2291400"
  },
  {
    "text": "bypass vpns by using DNS rebinding and create botnets",
    "start": "2291400",
    "end": "2297280"
  },
  {
    "text": "and finally uh we can see that the isimar which was the code name for these",
    "start": "2297280",
    "end": "2302859"
  },
  {
    "text": "vulnerabilities was really important what they were considered to be really critical they were addressed by the",
    "start": "2302859",
    "end": "2308020"
  },
  {
    "text": "cyber security infrastructure Security Agency of the US and sap stated that",
    "start": "2308020",
    "end": "2313960"
  },
  {
    "text": "these were probably the worst vulnerabilities in years and because it affected all sap",
    "start": "2313960",
    "end": "2320320"
  },
  {
    "text": "installations and they were accessible through a really exposed service that",
    "start": "2320320",
    "end": "2325359"
  },
  {
    "text": "was actually exposed in the internet in a lot of different companies",
    "start": "2325359",
    "end": "2331390"
  },
  {
    "text": "[Music] foreign",
    "start": "2331390",
    "end": "2336460"
  },
  {
    "text": "[Music]",
    "start": "2338340",
    "end": "2341449"
  }
]