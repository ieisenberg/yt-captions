[
  {
    "start": "0",
    "end": "42000"
  },
  {
    "text": "[Music]",
    "start": "4350",
    "end": "14149"
  },
  {
    "text": "hi my name is paul grubs and today i'll be presenting my talk hunting invisible salamanders cryptographic insecurity with",
    "start": "15200",
    "end": "21520"
  },
  {
    "text": "attacker-controlled keys before i start let me tell you a little bit about myself for another month or so",
    "start": "21520",
    "end": "28800"
  },
  {
    "text": "i'll be a phd student in computer science at cornell's new york city campus after that i'll be joining nyu for a",
    "start": "28800",
    "end": "34800"
  },
  {
    "text": "year-long postdoc and next fall i'll be joining the university of michigan as an assistant professor",
    "start": "34800",
    "end": "40000"
  },
  {
    "text": "of computer science my research is an applied cryptography",
    "start": "40000",
    "end": "45280"
  },
  {
    "start": "42000",
    "end": "42000"
  },
  {
    "text": "i do some work on the security of outsourced encrypted databases in storage but the work i'll be talking about today",
    "start": "45280",
    "end": "51039"
  },
  {
    "text": "is all about the security of a core cryptographic primitive called authenticated encryption specifically i'll be talking about the",
    "start": "51039",
    "end": "57520"
  },
  {
    "text": "ways in which the security of authenticated encryption can fail when it's used in new settings this talk will probably",
    "start": "57520",
    "end": "64080"
  },
  {
    "text": "be most interesting to people whose day-to-day work involves designing implementing and applying cryptography",
    "start": "64080",
    "end": "69840"
  },
  {
    "text": "but all security practitioners will be able to follow along and take away some interesting new knowledge about cryptography",
    "start": "69840",
    "end": "76479"
  },
  {
    "text": "i'll also be delving into a few mathematical details during my talk but i'll mark these slides with the symbol to let you know that it's okay if",
    "start": "76479",
    "end": "82960"
  },
  {
    "text": "you don't understand everything and at the end i'll give a high level summary of the takeaways of those slides",
    "start": "82960",
    "end": "89280"
  },
  {
    "start": "89000",
    "end": "89000"
  },
  {
    "text": "so as i said before my talk is all about authenticated encryption or ae for short a is probably along with key exchange",
    "start": "89280",
    "end": "96159"
  },
  {
    "text": "and signatures one of the most widely used cryptographic primitives on the internet the way ae is often used is for two",
    "start": "96159",
    "end": "102240"
  },
  {
    "text": "parties who want to communicate securely to first agree on a random symmetric key perhaps pre-distributing it or",
    "start": "102240",
    "end": "107920"
  },
  {
    "text": "establishing it via key exchange and then encrypting all their traffic uh for example their cat pictures with an",
    "start": "107920",
    "end": "114640"
  },
  {
    "text": "ae scheme like galwa counter mode or cha-cha 20 poly 1305 this basic blueprint is the core of a",
    "start": "114640",
    "end": "122159"
  },
  {
    "text": "huge number of security protocols on the internet like tls ipsec ssh and others that protect end users",
    "start": "122159",
    "end": "129119"
  },
  {
    "text": "sensitive business data and financial transactions every day decades of research in cryptography has",
    "start": "129119",
    "end": "134800"
  },
  {
    "text": "given us ways to prove formally that as long as this key that the two parties share is random",
    "start": "134800",
    "end": "140080"
  },
  {
    "text": "enough and hidden from the attacker using authenticated encryption hides the contents of the traffic and prevents an",
    "start": "140080",
    "end": "146000"
  },
  {
    "text": "adversary from modifying the contents ae",
    "start": "146000",
    "end": "151040"
  },
  {
    "start": "149000",
    "end": "149000"
  },
  {
    "text": "though is increasingly used in settings that don't look like this one i just described for example in some threat models it",
    "start": "151040",
    "end": "156720"
  },
  {
    "text": "makes sense for the attacker to be able to choose the key used for authenticated encryption examples of this include password",
    "start": "156720",
    "end": "163920"
  },
  {
    "text": "authenticated key exchange password-based encryption encrypted messaging for groups and content moderation or abuse reporting",
    "start": "163920",
    "end": "170000"
  },
  {
    "text": "for encrypted messaging and these attacker-controlled key settings we can't argue any security",
    "start": "170000",
    "end": "175840"
  },
  {
    "text": "based on the fact that the key is random and hidden from the adversary after all the adversary chose it",
    "start": "175840",
    "end": "182080"
  },
  {
    "text": "so we're left with a bunch of important questions like what security properties does ae need to",
    "start": "182080",
    "end": "187440"
  },
  {
    "text": "have in the face of such an attack what properties might we expect it to have and do modern widely used",
    "start": "187440",
    "end": "194080"
  },
  {
    "text": "authenticated encryption schemes have the properties we expect my talk based on these research papers",
    "start": "194080",
    "end": "200560"
  },
  {
    "start": "198000",
    "end": "198000"
  },
  {
    "text": "here at the bottom will seek to answer these questions first i'll describe our attack controlled key setting in more detail",
    "start": "200560",
    "end": "206879"
  },
  {
    "text": "convince you it's not just something i made up by giving a few examples explain the committing security property ae",
    "start": "206879",
    "end": "212159"
  },
  {
    "text": "should have here next i'll show that most modern authenticated encryption schemes are not committing",
    "start": "212159",
    "end": "217440"
  },
  {
    "text": "i'll explain the gcm algorithm briefly walk through the process of creating a gcm ciphertext that decrypts under two different",
    "start": "217440",
    "end": "223760"
  },
  {
    "text": "attacker controlled keys and finally i'll show how to use polynomial interpolation to go from two",
    "start": "223760",
    "end": "228879"
  },
  {
    "text": "to hundreds of thousands of keys with gcm and then after that i'll give some attacks resulting from non-committing",
    "start": "228879",
    "end": "234720"
  },
  {
    "text": "authenticated encryption i'll describe how in multi-receiver encryption you can send different messages to different people when",
    "start": "234720",
    "end": "240640"
  },
  {
    "text": "encryption is not committing and then we'll meet the original invisible salamander in an attack on facebook's message ranking protocol",
    "start": "240640",
    "end": "247680"
  },
  {
    "text": "and finally i'll describe partitioning oracles which recover low or medium entropy cryptographic keys",
    "start": "247680",
    "end": "253120"
  },
  {
    "text": "via adaptive uh chosen cyber text attacks but we'll start with explaining the",
    "start": "253120",
    "end": "259440"
  },
  {
    "text": "setting in a little bit more detail and explaining committing security so first i'll say a little bit more",
    "start": "259440",
    "end": "265520"
  },
  {
    "start": "263000",
    "end": "263000"
  },
  {
    "text": "about the setting that we started to talk with and then contrast it to the attacker control keys setting",
    "start": "265520",
    "end": "271520"
  },
  {
    "text": "in secure transport settings the encryption key here is unknown to the adversary and has lots of randomness",
    "start": "271520",
    "end": "276880"
  },
  {
    "text": "the kinds of things an attacker can try to do in this setting is to learn something about the message or to",
    "start": "276880",
    "end": "282400"
  },
  {
    "text": "change the output of decryption to cause the decryption to output something other than what the",
    "start": "282400",
    "end": "287680"
  },
  {
    "text": "encrypter put put into the encryption algorithm in contrast neither of these goals",
    "start": "287680",
    "end": "293040"
  },
  {
    "text": "really makes sense when the attacker controls the key the adversary already knows the message that's using for encryption so nothing",
    "start": "293040",
    "end": "299759"
  },
  {
    "text": "is hidden from the adversary and the adversary can try to make decryption output whatever it wants because it chooses the input",
    "start": "299759",
    "end": "306320"
  },
  {
    "text": "so what might an attacker want to do in this attack setting so it really depends on whether or not",
    "start": "306320",
    "end": "312479"
  },
  {
    "text": "the adversary already knows the key used for decryption as well as encryption",
    "start": "312479",
    "end": "318400"
  },
  {
    "start": "318000",
    "end": "318000"
  },
  {
    "text": "if the adversary doesn't control the key used in decryption one thing you could try to do is to",
    "start": "318400",
    "end": "323600"
  },
  {
    "text": "learn information about the key itself the classical example of this is a brute force attack on for example",
    "start": "323600",
    "end": "329440"
  },
  {
    "text": "password-based authenticated encryption if the receiver is decrypting ciphertext using a key that's easy to guess",
    "start": "329440",
    "end": "335759"
  },
  {
    "text": "and the receiver somehow lets the sender know whether decryption succeeded with its key an attacker can try to encrypt a message",
    "start": "335759",
    "end": "342560"
  },
  {
    "text": "with every possible password in popularity order and send them to the receiver if the",
    "start": "342560",
    "end": "347680"
  },
  {
    "text": "keys don't match decryption will fail and the receiver will say i can't decrypt this but if the keys match decryption will",
    "start": "347680",
    "end": "353919"
  },
  {
    "text": "succeed and the attacker will know the receiver's password",
    "start": "353919",
    "end": "359120"
  },
  {
    "text": "an attack like this is always possible in any protocol but in settings like tls and another",
    "start": "359120",
    "end": "364960"
  },
  {
    "text": "transport protocols the key is random enough uh to prove to make uh an",
    "start": "364960",
    "end": "370080"
  },
  {
    "text": "online brute force attack like this infeasible so key recovery attacks like this are usually only a problem when",
    "start": "370080",
    "end": "375919"
  },
  {
    "text": "the key used for authenticated encryption is a password or a short pin or if some key beats",
    "start": "375919",
    "end": "381440"
  },
  {
    "text": "key bits rather are leaked via side channel so even if the sender and the receiver",
    "start": "381440",
    "end": "387759"
  },
  {
    "start": "385000",
    "end": "385000"
  },
  {
    "text": "share a key attacker controlled keys can still be a problem take for example a setting where two parties are say trying to",
    "start": "387759",
    "end": "394080"
  },
  {
    "text": "embezzle money and communicating ae encrypted traffic uh that contains fraudulent records like",
    "start": "394080",
    "end": "400720"
  },
  {
    "text": "evidence of their crimes if the encrypted traffic has been stored for audit purposes and the auditor needs to decrypt to",
    "start": "400720",
    "end": "407199"
  },
  {
    "text": "check what they've been doing the attackers could try to give a different key than the one they've been using so here",
    "start": "407199",
    "end": "413360"
  },
  {
    "text": "their goal is not to learn something about what the decrypter is using or what the auditor will see in",
    "start": "413360",
    "end": "419520"
  },
  {
    "text": "decryption it's rather to ensure that the auditor recovers something from decryption other than the fraudulent records that they've",
    "start": "419520",
    "end": "425360"
  },
  {
    "text": "been communicating so now that we understand the setting and have some examples i'll explain what",
    "start": "425360",
    "end": "431919"
  },
  {
    "start": "427000",
    "end": "427000"
  },
  {
    "text": "this committing security property is to explain this i like to use a very simple physical intuition of",
    "start": "431919",
    "end": "437520"
  },
  {
    "text": "authenticated encryption as a lock box we can we can take ae in like a lockbox",
    "start": "437520",
    "end": "442560"
  },
  {
    "text": "we can put a message inside of a box close it and lock it up and give it to an adversary and like a",
    "start": "442560",
    "end": "447840"
  },
  {
    "text": "physical lock box ae should hide the contents of the of of what's inside confidentiality and prevent someone with",
    "start": "447840",
    "end": "455360"
  },
  {
    "text": "that box from changing what's inside so integrity another property that a physical lock box has",
    "start": "455360",
    "end": "461599"
  },
  {
    "text": "is more similar to committing security for ae which is that when you try to unlock the",
    "start": "461599",
    "end": "466879"
  },
  {
    "text": "box no matter what key you use you either fail to open it or you open it and you",
    "start": "466879",
    "end": "471919"
  },
  {
    "text": "see what the person who locked the box put in there this guarantee is a meaningful one in",
    "start": "471919",
    "end": "477919"
  },
  {
    "text": "our attacker-controlled key setting because it restricts what the what the attacker can what what the encrypter can",
    "start": "477919",
    "end": "483680"
  },
  {
    "text": "do when they lock them when they lock the box so this is in in in put simply the",
    "start": "483680",
    "end": "490319"
  },
  {
    "text": "committing security guarantee that ae needs and if ae didn't have this it might be able to",
    "start": "490319",
    "end": "495599"
  },
  {
    "text": "create an attacker or rather might be able to create lock boxes that had different things in them depending on",
    "start": "495599",
    "end": "500800"
  },
  {
    "text": "which key was used to unlock them which defies our physical lock box uh for example an adversary",
    "start": "500800",
    "end": "506720"
  },
  {
    "text": "could craft a single ae ciphertext that had in addition to this real cap picture decryption from before a second",
    "start": "506720",
    "end": "512560"
  },
  {
    "text": "decryption with a different key to the salamander the invisible salamander of the title so committing security for",
    "start": "512560",
    "end": "519760"
  },
  {
    "text": "ae as i said prevents this by binding the attacker in some sense to a single ae",
    "start": "519760",
    "end": "524959"
  },
  {
    "text": "decryption and uh requiring that if the attacker",
    "start": "524959",
    "end": "530160"
  },
  {
    "text": "unless the attacker solves some computationally intractable problem any ae ciphertext that they create only",
    "start": "530160",
    "end": "536080"
  },
  {
    "text": "has one correct decryption this prevents them from crafting a ciphertext with these hidden secondary",
    "start": "536080",
    "end": "541519"
  },
  {
    "text": "decryptions or these invisible southmanders from the title to see why committing uh prevents the",
    "start": "541519",
    "end": "548399"
  },
  {
    "start": "546000",
    "end": "546000"
  },
  {
    "text": "attacks i described before uh recalled the our train our plain text reporting example from before",
    "start": "548399",
    "end": "554080"
  },
  {
    "text": "if the malicious accountants uh that were communicating these fraudulent records used committing authenticated",
    "start": "554080",
    "end": "559680"
  },
  {
    "text": "encryption uh no matter what key they report to the auditor they won't be able to hide their fraud the committing property guarantees",
    "start": "559680",
    "end": "566640"
  },
  {
    "text": "that either the auditor will fail to decrypt those ciphertexts or it will decrypt and see the fraudulent records out",
    "start": "566640",
    "end": "574320"
  },
  {
    "text": "so next i'll explain that surprisingly uh many widely used modern authenticated",
    "start": "574640",
    "end": "580000"
  },
  {
    "text": "encryptions they're not committing so i promised you an attack on gcm uh",
    "start": "580000",
    "end": "585200"
  },
  {
    "start": "582000",
    "end": "582000"
  },
  {
    "text": "but because gcm is fairly complicated i'll start with reasoning just about the encryption part",
    "start": "585200",
    "end": "590240"
  },
  {
    "text": "of gcf which is counter mode so counter mode encryption if you're not familiar is pretty simple if we want to",
    "start": "590240",
    "end": "595760"
  },
  {
    "text": "encrypt for example this plain text with this this orange key here we just sample a random initialization vector and derive",
    "start": "595760",
    "end": "602320"
  },
  {
    "text": "a pad using that key in that iv then we take this pad that we derived an exclusive or",
    "start": "602320",
    "end": "608399"
  },
  {
    "text": "with the plain text to output the ciphertext but now imagine that we have a different",
    "start": "608399",
    "end": "614079"
  },
  {
    "text": "key this red key here we can still derive the pad for this other key with the same iv",
    "start": "614079",
    "end": "620480"
  },
  {
    "text": "and try to decrypt the ciphertext with this other pad which will result in a different plain text than the one we",
    "start": "620480",
    "end": "627120"
  },
  {
    "text": "kind of use for encryption so counter mode as you can see has this",
    "start": "627120",
    "end": "632160"
  },
  {
    "text": "somewhat intuitive counter-intuitive property rather that ciphertext can be decrypted by any key",
    "start": "632160",
    "end": "638560"
  },
  {
    "start": "637000",
    "end": "637000"
  },
  {
    "text": "so before showing the attack on full gcm i'll briefly explain how it works so gcm is ubiquitous and standardized by",
    "start": "638560",
    "end": "645519"
  },
  {
    "text": "basically every standards body that standardizes encryption schemes so gcm in addition to",
    "start": "645519",
    "end": "651279"
  },
  {
    "text": "using counter mode to encrypt things uh by sampling a random iv uh and encrypting the message with",
    "start": "651279",
    "end": "657839"
  },
  {
    "text": "counter mode uses a message authentication code or mac to prevent tampering this is this mac is what provides the",
    "start": "657839",
    "end": "663839"
  },
  {
    "text": "authenticated and authenticated encryption so to encrypt uh the gcm first computes",
    "start": "663839",
    "end": "670800"
  },
  {
    "text": "counter mode on the plain text and then applies this this authentication message authentication code on the result of",
    "start": "670800",
    "end": "677040"
  },
  {
    "text": "counter mode uh to compute a tag decryption then takes this this cipher",
    "start": "677040",
    "end": "683760"
  },
  {
    "text": "this counter mode ciphertext and tag as input and recomputes the tag using this mac algorithm and compares it",
    "start": "683760",
    "end": "690000"
  },
  {
    "text": "to the tag that was input if they match gcm outputs the counter decryption of that part of the cipher text",
    "start": "690000",
    "end": "695839"
  },
  {
    "text": "and if if they don't uh decryption fails so if you didn't follow that that's fine",
    "start": "695839",
    "end": "701360"
  },
  {
    "text": "all that's really important is that we we don't have to worry about any of the properties of counter mode",
    "start": "701360",
    "end": "707120"
  },
  {
    "text": "to craft an invisible salamander for a cipher text or a cipher text that decrypts under multiple keys all we need to do is",
    "start": "707120",
    "end": "714240"
  },
  {
    "text": "come up with a counter mode ciphertext uh that collides under this tag function that has the same",
    "start": "714240",
    "end": "719920"
  },
  {
    "text": "the same tag output under these two different keys so we'll next see how to do that and",
    "start": "719920",
    "end": "726399"
  },
  {
    "text": "recall that our process here is going to take as input these two encryption keys and it's going to output",
    "start": "726399",
    "end": "731440"
  },
  {
    "text": "a counter mode cipher text iv and message so to do this",
    "start": "731440",
    "end": "736880"
  },
  {
    "start": "735000",
    "end": "735000"
  },
  {
    "text": "we need to review how the mac works and fortunately for us gcm's mac is not a complicated collision resistant hash",
    "start": "736880",
    "end": "743120"
  },
  {
    "text": "function like shot 56 instead it's a very fast polynomial evaluation combined with",
    "start": "743120",
    "end": "748720"
  },
  {
    "text": "exclusive or as follows first uh the algorithm takes the the counter mode cipher text",
    "start": "748720",
    "end": "754000"
  },
  {
    "text": "and splits it into 128 bit blocks which form the coefficients of the polynomial well so here we'll just stick to the",
    "start": "754000",
    "end": "760000"
  },
  {
    "text": "case where the ciphertext is a single block for now then it computes the hash point and the",
    "start": "760000",
    "end": "766240"
  },
  {
    "text": "and the pad the hash point by encrypting the zero string with aes in the key and the pad by encrypting the iv",
    "start": "766240",
    "end": "772399"
  },
  {
    "text": "with aes and the key finally it treats this hash point as a number",
    "start": "772399",
    "end": "777519"
  },
  {
    "text": "and evaluates the polynomial defined by our coefficient c1 and a blocked into the ciphertext length at the number h",
    "start": "777519",
    "end": "785680"
  },
  {
    "text": "then exclusive or is the pad with the result and how it puts it as the tag",
    "start": "785680",
    "end": "790800"
  },
  {
    "text": "all this arithmetic is actually not done over the real numbers it's done in what's called a gawa field of order 2",
    "start": "790800",
    "end": "796160"
  },
  {
    "text": "to the 128 and the details of that aren't too important the only thing that's important or",
    "start": "796160",
    "end": "801279"
  },
  {
    "text": "know about that that algebraic structure is that in in that in that in that field addition",
    "start": "801279",
    "end": "808000"
  },
  {
    "text": "and exclusive or the same operation so recall we're trying to work out an",
    "start": "808000",
    "end": "814639"
  },
  {
    "text": "input iv in ciphertext that makes the mac function output the same thing for our red and orange keys here",
    "start": "814639",
    "end": "822000"
  },
  {
    "text": "so to do this we're gonna we're gonna use the following process uh so we're gonna choose an arbitrary iv",
    "start": "822000",
    "end": "827920"
  },
  {
    "text": "it doesn't matter which one and then we're going to derive the hash points and the pads for the two",
    "start": "827920",
    "end": "834399"
  },
  {
    "text": "keys then we're going to take the tag equations for the for the for the two keys treating the ciphertext",
    "start": "834399",
    "end": "841360"
  },
  {
    "text": "block as a variable and just set them equal to each other this gives an equation in one variable",
    "start": "841360",
    "end": "847440"
  },
  {
    "text": "namely the single block c1 so we can simply solve it and i'll come back to how we do this to find the",
    "start": "847440",
    "end": "852639"
  },
  {
    "text": "block now we can let our message be that single block that we computed and recompute the tag which by construction",
    "start": "852639",
    "end": "858959"
  },
  {
    "text": "collides under both keys and then output this iv messaging tag that we computed",
    "start": "858959",
    "end": "866079"
  },
  {
    "text": "now to solve this equation we simply have to rearrange it a little bit so that we get this the",
    "start": "866639",
    "end": "872720"
  },
  {
    "text": "ciphertext block times the sum of the two uh squared hash points and on the right side we get some",
    "start": "872720",
    "end": "878880"
  },
  {
    "text": "constants so we can rearrange this by multiplying the left-hand side by the inverse of",
    "start": "878880",
    "end": "884959"
  },
  {
    "text": "that constant term and just define the ciphertext block c1 as the the terms on the right",
    "start": "884959",
    "end": "893279"
  },
  {
    "text": "now this equation here on the left looks very hairy because it has a lot of terms but it's really very simple",
    "start": "893279",
    "end": "899360"
  },
  {
    "text": "so just imagine a much simpler equation like 2x equals 6. um like 2x equals 6 our equation here on",
    "start": "899360",
    "end": "905600"
  },
  {
    "text": "the right-hand side is all constant and on the left-hand side is a variable times a constant so if you remember from from algebra all",
    "start": "905600",
    "end": "912000"
  },
  {
    "text": "you need to do is kind of uh divide both sides by the the constant term here on the left",
    "start": "912000",
    "end": "917680"
  },
  {
    "text": "to solve for to solve for the variable which on the right hand side is x equals three or on the left-hand side is our",
    "start": "917680",
    "end": "922800"
  },
  {
    "text": "ciphertext block so it's worth reflecting on why this",
    "start": "922800",
    "end": "928720"
  },
  {
    "text": "attack doesn't work for other um collision resistant hash functions like",
    "start": "928720",
    "end": "933759"
  },
  {
    "text": "shot 56 uh why this attack can't work for any mac um or based on like a collision resistant",
    "start": "933759",
    "end": "939600"
  },
  {
    "text": "function and it's because this this mac is not a complicated function of the cipher text in in it's a very",
    "start": "939600",
    "end": "946480"
  },
  {
    "text": "simple to describe algebraic function of the cipher text so you could write down an equation like",
    "start": "946480",
    "end": "952959"
  },
  {
    "text": "this for a more complicated collision resistant hash like shot to 56 but the reason why",
    "start": "952959",
    "end": "958959"
  },
  {
    "text": "that function is collision resistant is because no one knows how to solve that system of equations with time less than just a simple",
    "start": "958959",
    "end": "966000"
  },
  {
    "text": "generic collision finding search so this this attack works for a single",
    "start": "966000",
    "end": "972800"
  },
  {
    "start": "969000",
    "end": "969000"
  },
  {
    "text": "ciphertext block and it's not too hard to adapt it to multiple ciphertext blocks",
    "start": "972800",
    "end": "978240"
  },
  {
    "text": "one just needs to add a a constant contribution from the other ciphertext blocks that aren't fixed by the choice",
    "start": "978240",
    "end": "984720"
  },
  {
    "text": "of the two keys uh to the to the mac equation so here on the right hand side i've adapted the mac algorithm",
    "start": "984720",
    "end": "990560"
  },
  {
    "text": "uh two arbitrary numbers of blocks and the with the changes here in white",
    "start": "990560",
    "end": "996000"
  },
  {
    "text": "but i also promised you that i would describe how to do more than two keys um and you can do this by observing that",
    "start": "996000",
    "end": "1004079"
  },
  {
    "text": "this this simple one equation problem for one block that we had before is a very simple instance of linear algebra",
    "start": "1004079",
    "end": "1010639"
  },
  {
    "text": "or it has to do with solving systems of linear equations so we can recast the question of",
    "start": "1010639",
    "end": "1017440"
  },
  {
    "text": "constructing a gcm collision to a single matrix vector equation",
    "start": "1017440",
    "end": "1023519"
  },
  {
    "text": "where there's an equation for each key that we want to collide on and as many variables",
    "start": "1023519",
    "end": "1028640"
  },
  {
    "text": "as there are ciphertext blocks in in the in the desired ciphertext so we know from linear algebra that as",
    "start": "1028640",
    "end": "1035280"
  },
  {
    "text": "long as there are more ciphertex blocks than keys",
    "start": "1035280",
    "end": "1040400"
  },
  {
    "text": "this this system can be solved where we're here on the left hand side this this matrix is the basically the",
    "start": "1040400",
    "end": "1046079"
  },
  {
    "text": "exponentiation of each of the hash points for each of the keys",
    "start": "1046079",
    "end": "1051280"
  },
  {
    "text": "and this this this equation as long as the number of the number of variables is more than a",
    "start": "1051280",
    "end": "1056640"
  },
  {
    "text": "number of constraints can be solved in quadratic time in the number of keys",
    "start": "1056640",
    "end": "1062000"
  },
  {
    "text": "uh so finally this this basic template for colliding on multiple keys applies to other um authenticated encryption",
    "start": "1063120",
    "end": "1070720"
  },
  {
    "text": "schemes with polynomial max so for example schemes that use poly1305 that can be found in lib sodium and knackle",
    "start": "1070720",
    "end": "1077280"
  },
  {
    "text": "can be attacked like this and gcm siv as well um but for technical reasons i won't go",
    "start": "1077280",
    "end": "1083440"
  },
  {
    "text": "into scaling these attacks up to many keys is more is more complicated than with plain gcm",
    "start": "1083440",
    "end": "1089200"
  },
  {
    "text": "but but it can be done so here we're at the end of the the",
    "start": "1089200",
    "end": "1094799"
  },
  {
    "text": "heavy math stuff so if my dulcet tones have put you to sleep uh it's time to wake up to get the",
    "start": "1094799",
    "end": "1100000"
  },
  {
    "text": "summary uh first widely used authenticated encryption schemes like gcm are not committing",
    "start": "1100000",
    "end": "1105280"
  },
  {
    "text": "though importantly this doesn't invalidate their use in settings where attacker-controlled keys aren't a problem it's very simple to",
    "start": "1105280",
    "end": "1112240"
  },
  {
    "text": "craft ciphertext with invisible salamanders or secondary hidden decryptions and finally using linear algebra it's",
    "start": "1112240",
    "end": "1118720"
  },
  {
    "text": "not too hard to produce a single ciphertext with hundreds of thousands of correct decryptions or even more for example my colleague generated a gcm",
    "start": "1118720",
    "end": "1125840"
  },
  {
    "text": "ciphertext that decrypts correctly under over 131 000 different keys",
    "start": "1125840",
    "end": "1132159"
  },
  {
    "text": "finally i'll give you some some attacks that result from incorrect use of non-committing authenticated encryption",
    "start": "1132559",
    "end": "1138240"
  },
  {
    "text": "in attacker-controlled key settings so the first uh i'll start with the",
    "start": "1138240",
    "end": "1143280"
  },
  {
    "start": "1141000",
    "end": "1141000"
  },
  {
    "text": "simplest one which has to do with group messaging in group messaging a single sender sends a message to a group",
    "start": "1143280",
    "end": "1149360"
  },
  {
    "text": "of recipients instead of just one receiver and actually the sender will use ae to encrypt the message",
    "start": "1149360",
    "end": "1155120"
  },
  {
    "text": "and they'll do so with a key that's shared pairwise with each recipient perhaps done using a public key",
    "start": "1155120",
    "end": "1160240"
  },
  {
    "text": "encryption of the key in in the ciphertext itself and",
    "start": "1160240",
    "end": "1165600"
  },
  {
    "text": "importantly we're going to assume a setup where there's only one ae encryption sent to all to all users fanned out by",
    "start": "1165600",
    "end": "1172559"
  },
  {
    "text": "the server so once the keys are shared pairwise it",
    "start": "1172559",
    "end": "1177919"
  },
  {
    "text": "can the the sender can send a single ciphertext to the server that fans it out to each recipient who just got a key",
    "start": "1177919",
    "end": "1184480"
  },
  {
    "text": "so this basic pattern of fanning out these single ciphertexts after pairwise sharing keys is pretty",
    "start": "1184480",
    "end": "1189679"
  },
  {
    "text": "common in group messaging and is used by whatsapp and key base and a few others",
    "start": "1189679",
    "end": "1194880"
  },
  {
    "text": "so the attack here is is pretty simple if the sender is malicious it can simply share different keys with different recipients",
    "start": "1194880",
    "end": "1201840"
  },
  {
    "text": "and then send a ciphertext with an invisible salamander and enforcing different receivers to see different decryptions",
    "start": "1201840",
    "end": "1208480"
  },
  {
    "text": "uh this attack is is is a nice demonstration of what unintuitive things can happen",
    "start": "1208480",
    "end": "1214400"
  },
  {
    "text": "when encryption is not committing but as far as i know it's only theoretical and it's not clear that these protocols that use this",
    "start": "1214400",
    "end": "1221120"
  },
  {
    "text": "pattern are are vulnerable although if you want to do some homework you can go look at these",
    "start": "1221120",
    "end": "1226320"
  },
  {
    "text": "these protocols yourself and if you find uh find a vulnerability like this and email me i'll i'll give you uh",
    "start": "1226320",
    "end": "1232480"
  },
  {
    "text": "i'll give you a gold star so uh attacks like this have been",
    "start": "1232480",
    "end": "1239039"
  },
  {
    "start": "1235000",
    "end": "1235000"
  },
  {
    "text": "demonstrated in in in some protocols although the the many of the details are different in way",
    "start": "1239039",
    "end": "1244400"
  },
  {
    "text": "i'll explain before so a a an attack similar to this one that's been demonstrated",
    "start": "1244400",
    "end": "1250400"
  },
  {
    "text": "is on an abuse reporting system for encrypted messaging so just to give you some background on",
    "start": "1250400",
    "end": "1255679"
  },
  {
    "text": "abuse reporting this is a problem that's faced by all people but by all people who run platforms that",
    "start": "1255679",
    "end": "1262240"
  },
  {
    "text": "provide ending encryption where if a sender is malicious and sends something abusive to a receiver",
    "start": "1262240",
    "end": "1268159"
  },
  {
    "text": "uh encryption makes it hard to report that message to the platform uh because if the platform doesn't ask",
    "start": "1268159",
    "end": "1274480"
  },
  {
    "text": "for additional verification that the reports are are genuine then a malicious receiver could themselves report",
    "start": "1274480",
    "end": "1280880"
  },
  {
    "text": "whatever they want and abuse the abuse reporting system so what what is needed here in this",
    "start": "1280880",
    "end": "1287840"
  },
  {
    "text": "abuse reporting for encrypted messaging setting is some kind of secure reporting protocol for the contents of an",
    "start": "1287840",
    "end": "1293600"
  },
  {
    "text": "encrypted message and facebook were the first to notice the need for this in in applications",
    "start": "1293600",
    "end": "1299840"
  },
  {
    "text": "and they developed an ad hoc protocol for cryptographically proving the contents of a message called message",
    "start": "1299840",
    "end": "1305520"
  },
  {
    "text": "franking and the attack will break this message ranking protocol basically the attack",
    "start": "1305520",
    "end": "1310960"
  },
  {
    "text": "works because facebook used non-committing encryption for part of their protocol",
    "start": "1310960",
    "end": "1316000"
  },
  {
    "text": "which meant that an attacker a malicious sender to be precise can uh choose the keys and craft a",
    "start": "1316000",
    "end": "1323440"
  },
  {
    "text": "ciphertext that lets them evade abuse reporting so let's take a look briefly at the",
    "start": "1323440",
    "end": "1330000"
  },
  {
    "start": "1327000",
    "end": "1327000"
  },
  {
    "text": "message ranking protocol note that for time reasons this isn't the exact protocol it's actually a",
    "start": "1330000",
    "end": "1335200"
  },
  {
    "text": "vastly simplified version but this protocol has the same problem as the real one and i invite you to look at my academic papers",
    "start": "1335200",
    "end": "1341919"
  },
  {
    "text": "on the subject or facebook's white paper if you have questions about the real protocol so first the protocol",
    "start": "1341919",
    "end": "1348080"
  },
  {
    "text": "uh encrypts the the plain text with the sender chosen uh per message key and then the sender",
    "start": "1348080",
    "end": "1354400"
  },
  {
    "text": "sends this cipher text to facebook facebook stores a copy of it and then forwards the ciphertext onto",
    "start": "1354400",
    "end": "1359440"
  },
  {
    "text": "the receiver who decrypts it with that key when the when the receiver judges the",
    "start": "1359440",
    "end": "1365360"
  },
  {
    "text": "content that they decrypted to be abusive they send the keys for all recent",
    "start": "1365360",
    "end": "1370559"
  },
  {
    "text": "messages to facebook and facebook decrypts those ciphertexts that it's stored",
    "start": "1370559",
    "end": "1375760"
  },
  {
    "text": "and uh it deduplicates the their their contents and places them into an abuse report that a human can see",
    "start": "1375760",
    "end": "1382799"
  },
  {
    "text": "thus if we if we send uh if we if we send a single",
    "start": "1382799",
    "end": "1388240"
  },
  {
    "text": "if we send a single ciphertext twice under two different keys because the keys are sent or chosen we",
    "start": "1388240",
    "end": "1394000"
  },
  {
    "text": "might imagine that we can use a ciphertext with an invisible salamander to kind of send a message that facebook won't see",
    "start": "1394000",
    "end": "1400159"
  },
  {
    "text": "because of this deduplication and so this is exactly what we're going to do more specifically we're going to",
    "start": "1400159",
    "end": "1405280"
  },
  {
    "start": "1402000",
    "end": "1402000"
  },
  {
    "text": "craft a cipher text with an invisible salamander that's some induced abusive image that we want to",
    "start": "1405280",
    "end": "1410720"
  },
  {
    "text": "send and another decryption to an innocuous image then the attacker the the malicious",
    "start": "1410720",
    "end": "1415840"
  },
  {
    "text": "center will send this ciphertext twice with two different keys to the receiver",
    "start": "1415840",
    "end": "1421840"
  },
  {
    "text": "the receiver will decrypt both will decrypt the ciphertext under both keys and they'll see the abusive image",
    "start": "1421840",
    "end": "1428320"
  },
  {
    "text": "and the innocuous one but then when the receiver reports that that conversation to facebook the",
    "start": "1428320",
    "end": "1434159"
  },
  {
    "text": "deduplication will ensure that despite both uh encryption both decryptions",
    "start": "1434159",
    "end": "1439679"
  },
  {
    "text": "being uh decrypted by facebook the human moderator will only actually see one of those",
    "start": "1439679",
    "end": "1445120"
  },
  {
    "text": "decryptions namely the innocuous one so this protocol allows the sender to",
    "start": "1445120",
    "end": "1452080"
  },
  {
    "text": "evade abuse reporting but i i told you that the to do this the",
    "start": "1452080",
    "end": "1457600"
  },
  {
    "text": "sender has to craft a gcm cipher text that decrypts the two different valid images and before i didn't actually tell you",
    "start": "1457600",
    "end": "1463919"
  },
  {
    "text": "how to do that in fact without additional work the invisible salamanders crafted using the",
    "start": "1463919",
    "end": "1469840"
  },
  {
    "text": "method i described before won't have any particular structure at all it'll just be kind of random junk bits",
    "start": "1469840",
    "end": "1476320"
  },
  {
    "start": "1476000",
    "end": "1476000"
  },
  {
    "text": "so to give facebook a proof of concept we actually crafted a single gcm ciphertext where both decryptions are valid images",
    "start": "1476320",
    "end": "1483440"
  },
  {
    "text": "namely this bitmap of a kitten and this jpeg of a salamander that we've been using throughout this talk",
    "start": "1483440",
    "end": "1488960"
  },
  {
    "text": "and i actually did import the decryptions of that single ciphertext into this powerpoint so these are the real images",
    "start": "1488960",
    "end": "1495600"
  },
  {
    "text": "doing this doing this collision was tricky because in addition to crafting the tag to be colliding we need",
    "start": "1495600",
    "end": "1501600"
  },
  {
    "text": "to have to to have the right bytes at certain offsets of these files um for example the the initial two bytes",
    "start": "1501600",
    "end": "1509120"
  },
  {
    "text": "of the file need to be the correct um magic bytes for the image files respectively the jpeg and the bitmap",
    "start": "1509120",
    "end": "1515919"
  },
  {
    "text": "magic bytes and the third and fourth bytes in the jpeg need to be a comment character and the bitmap need to be the length",
    "start": "1515919",
    "end": "1522799"
  },
  {
    "text": "and then the fifth and sixth bytes in the jpeg need to be a comment length and in the bitmap they need to be",
    "start": "1522799",
    "end": "1528400"
  },
  {
    "text": "the zero the two zero bytes so what we ended up doing is colliding the gcm key stream of",
    "start": "1528400",
    "end": "1534720"
  },
  {
    "text": "the first four bytes and then allowing the comment length to vary randomly based on the decryption of those bitmap bytes um",
    "start": "1534720",
    "end": "1542080"
  },
  {
    "text": "under the jpeg keystream the counter mode keystream then because the what's that whatever is at",
    "start": "1542080",
    "end": "1549039"
  },
  {
    "text": "the the the suffix of this bitmap file will be ignored by the bitmap parser as long",
    "start": "1549039",
    "end": "1554240"
  },
  {
    "text": "as the length is correct we can construct the rest of the ciphertext very simply by starting with the bitmap",
    "start": "1554240",
    "end": "1559760"
  },
  {
    "text": "ciphertext and then putting some padding and then ending with the jpeg ciphertext ensuring that the jpeg ends with the",
    "start": "1559760",
    "end": "1565360"
  },
  {
    "text": "correct ffd9 byte indicator so the last attack i'll tell you about",
    "start": "1565360",
    "end": "1572320"
  },
  {
    "start": "1569000",
    "end": "1569000"
  },
  {
    "text": "that results from the use of non-committing uh ae is partitioning oracles uh",
    "start": "1572320",
    "end": "1577600"
  },
  {
    "text": "partitioning oracles occur when non-committing ae is used with low entropy keys like passwords and",
    "start": "1577600",
    "end": "1582960"
  },
  {
    "text": "give a speed up in uh online brute force key recovery attacks for on password-based ae",
    "start": "1582960",
    "end": "1588480"
  },
  {
    "text": "so recall our example before of an online key recovery attack the adversary chooses the key and then",
    "start": "1588480",
    "end": "1594799"
  },
  {
    "text": "encrypts a kind of guess plaintext with it and sends it to the the receiver and the receiver either responds with a",
    "start": "1594799",
    "end": "1601679"
  },
  {
    "text": "decryption failed i can't decrypt this or decryption succeeded and based on these responses the the",
    "start": "1601679",
    "end": "1607679"
  },
  {
    "text": "attacker will be able to learn the the receiver's key",
    "start": "1607679",
    "end": "1613840"
  },
  {
    "text": "so using non-committing ae here lets the adversary check more than one guess for",
    "start": "1613919",
    "end": "1619120"
  },
  {
    "text": "each cipher text it sends effectively the use of non-committing ae lets the adversary partition the space",
    "start": "1619120",
    "end": "1624720"
  },
  {
    "text": "of possible keys into sets that are bigger than bigger than one so there's nothing actually special",
    "start": "1624720",
    "end": "1630559"
  },
  {
    "text": "about these these two guesses here the fact that this sender has sent a cipher text that decrypts under both these keys it could",
    "start": "1630559",
    "end": "1636240"
  },
  {
    "text": "be more than two keys um it could even be the cipher text that my colleague crafted that has 131",
    "start": "1636240",
    "end": "1642159"
  },
  {
    "text": "000 correct decryptions if the adversary sent a ciphertext like this they'd be able to check more than 131 000 password guesses",
    "start": "1642159",
    "end": "1649600"
  },
  {
    "text": "with a single ciphertext in fact if there are no restrictions on the length of the cipher text the",
    "start": "1649600",
    "end": "1655520"
  },
  {
    "text": "adversary can actually get an exponential improvement in the number of guesses required for key recovery by using a partitioning oracle",
    "start": "1655520",
    "end": "1661919"
  },
  {
    "text": "by using binary search for example if there are a million possible passwords that could be the receiver's key over",
    "start": "1661919",
    "end": "1668080"
  },
  {
    "text": "here a naive brute force attack needs to send a million ciphertext to guess the key in the worst case",
    "start": "1668080",
    "end": "1673200"
  },
  {
    "text": "but a partitioning oracle only needs to send 20 ciphertexts or the log base 2 of 1 million passwords by",
    "start": "1673200",
    "end": "1679360"
  },
  {
    "text": "using binary search so in some forthcoming work my authors",
    "start": "1679360",
    "end": "1686000"
  },
  {
    "text": "my co-authors and i demonstrated concrete partitioning oracle attacks on the shadow sox protocol for practicing",
    "start": "1686000",
    "end": "1691200"
  },
  {
    "text": "udp connections and also on incorrect prototype implementations of the opaque protocol",
    "start": "1691200",
    "end": "1697200"
  },
  {
    "text": "which is a standards track protocol for password authenticated key exchange we also found latent password or latent",
    "start": "1697200",
    "end": "1705279"
  },
  {
    "text": "partitioning oracle vulnerabilities elsewhere so finally i'd like to end on some",
    "start": "1705279",
    "end": "1711039"
  },
  {
    "start": "1708000",
    "end": "1708000"
  },
  {
    "text": "optimism i've spent a lot of time talking about attacks and these attacks seem quite scary but uh i'll just briefly describe how to",
    "start": "1711039",
    "end": "1718000"
  },
  {
    "text": "prevent them so we do know of committing authenticated encryption schemes and they're not that hard to build in theory",
    "start": "1718000",
    "end": "1724240"
  },
  {
    "text": "for example counter mode than hmac if done correctly uh provides this committing security",
    "start": "1724240",
    "end": "1730559"
  },
  {
    "text": "guarantee that we need unfortunately um committing ae schemes can can be hard to use because",
    "start": "1730559",
    "end": "1736640"
  },
  {
    "text": "there aren't really standardized committing ae schemes and and schemes that have this security",
    "start": "1736640",
    "end": "1742080"
  },
  {
    "text": "guarantee aren't widely available in photography libraries that offer ae interfaces though they can be built using the",
    "start": "1742080",
    "end": "1748559"
  },
  {
    "text": "primitives from common libraries like openssl a committing ae can also be less",
    "start": "1748559",
    "end": "1754399"
  },
  {
    "text": "efficient than non-committing ae because of the for technical reasons committing",
    "start": "1754399",
    "end": "1759600"
  },
  {
    "text": "achieving this committing guarantee necessitates the use of collision-resistant hash functions which can be slower than",
    "start": "1759600",
    "end": "1765360"
  },
  {
    "text": "fast polynomial max um finally uh let me just conclude this",
    "start": "1765360",
    "end": "1771760"
  },
  {
    "text": "this this section on preventing these attacks by saying that you don't need committing ae unless",
    "start": "1771760",
    "end": "1778799"
  },
  {
    "text": "attacker-controlled keys are part of your threat model so i don't want anybody to rush home after",
    "start": "1778799",
    "end": "1784000"
  },
  {
    "text": "after seeing this talk and immediately change your tls cipher suites to remove these fast ae schemes",
    "start": "1784000",
    "end": "1789440"
  },
  {
    "text": "like gcm or chat 20 poly 1305 they are perfectly safe for use when",
    "start": "1789440",
    "end": "1794960"
  },
  {
    "text": "keys are hidden and random enough they simply need to be used with care or not used at all in settings where",
    "start": "1794960",
    "end": "1801039"
  },
  {
    "text": "attacker-controlled keys are a problem so i'd like to end by thanking all my",
    "start": "1801039",
    "end": "1806480"
  },
  {
    "text": "co-authors on on these papers and also by thanking hugo crotchik who helped us understand the opaque protocol",
    "start": "1806480",
    "end": "1812000"
  },
  {
    "text": "and develop an early version of the partitioning oracle attack and catriol cone gordon for making the observation about multi-receiver",
    "start": "1812000",
    "end": "1818399"
  },
  {
    "text": "encryption that i that i discussed in a previous slide i'd also like to thank the black hat",
    "start": "1818399",
    "end": "1824159"
  },
  {
    "text": "organizers for inviting me to speak and i'd like to thank you for listening and take any questions",
    "start": "1824159",
    "end": "1831200"
  }
]