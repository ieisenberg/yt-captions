[
  {
    "start": "0",
    "end": "420000"
  },
  {
    "text": "good morning everybody and thank you all",
    "start": "0",
    "end": "1979"
  },
  {
    "text": "for coming",
    "start": "1979",
    "end": "3060"
  },
  {
    "text": "my name is Mark blanchew I'm a security",
    "start": "3060",
    "end": "5339"
  },
  {
    "text": "consultant for isec partners which is",
    "start": "5339",
    "end": "7980"
  },
  {
    "text": "part of the NCC group",
    "start": "7980",
    "end": "9960"
  },
  {
    "text": "so I'm here to talk to you about race",
    "start": "9960",
    "end": "12120"
  },
  {
    "text": "conditions introduced by the compiler",
    "start": "12120",
    "end": "14219"
  },
  {
    "text": "and the hardware in log free code which",
    "start": "14219",
    "end": "16800"
  },
  {
    "text": "is which can be observed in parts of",
    "start": "16800",
    "end": "18539"
  },
  {
    "text": "osc's and VMS among other applications",
    "start": "18539",
    "end": "22320"
  },
  {
    "text": "so you don't have too much time so I'm",
    "start": "22320",
    "end": "24359"
  },
  {
    "text": "going to start the thing off with the",
    "start": "24359",
    "end": "26100"
  },
  {
    "text": "problem",
    "start": "26100",
    "end": "28439"
  },
  {
    "text": "the problem is and it's probably known",
    "start": "28439",
    "end": "30779"
  },
  {
    "text": "by most of you but the compiler does not",
    "start": "30779",
    "end": "33300"
  },
  {
    "text": "create a binary that will execute the",
    "start": "33300",
    "end": "35280"
  },
  {
    "text": "code you write",
    "start": "35280",
    "end": "36540"
  },
  {
    "text": "what you write is expensive and not",
    "start": "36540",
    "end": "38700"
  },
  {
    "text": "optimized so a different program is",
    "start": "38700",
    "end": "41219"
  },
  {
    "text": "usually compiled instead",
    "start": "41219",
    "end": "43320"
  },
  {
    "text": "it is the same at runtime your Hardware",
    "start": "43320",
    "end": "45660"
  },
  {
    "text": "your Hardware can do optimizations such",
    "start": "45660",
    "end": "48239"
  },
  {
    "text": "as instruction reordering which should",
    "start": "48239",
    "end": "50460"
  },
  {
    "text": "not be visible to a single thread but",
    "start": "50460",
    "end": "52739"
  },
  {
    "text": "can create issues with not properly",
    "start": "52739",
    "end": "54480"
  },
  {
    "text": "synchronized code running on more than",
    "start": "54480",
    "end": "56879"
  },
  {
    "text": "two cores",
    "start": "56879",
    "end": "59480"
  },
  {
    "text": "so where should you care",
    "start": "60420",
    "end": "62460"
  },
  {
    "text": "look free code is used for parts of",
    "start": "62460",
    "end": "64680"
  },
  {
    "text": "several types of applications and we",
    "start": "64680",
    "end": "66840"
  },
  {
    "text": "will see why but writing that type of",
    "start": "66840",
    "end": "69299"
  },
  {
    "text": "code is hard",
    "start": "69299",
    "end": "70680"
  },
  {
    "text": "and since finish these types of bugs",
    "start": "70680",
    "end": "72900"
  },
  {
    "text": "have not been touched told too much into",
    "start": "72900",
    "end": "75659"
  },
  {
    "text": "the in the security industry they are",
    "start": "75659",
    "end": "78060"
  },
  {
    "text": "still allowed to be found",
    "start": "78060",
    "end": "79500"
  },
  {
    "text": "and this applies to several layers from",
    "start": "79500",
    "end": "82200"
  },
  {
    "text": "compiler to Hardware introduced bugs as",
    "start": "82200",
    "end": "85500"
  },
  {
    "text": "well as long assumptions they will make",
    "start": "85500",
    "end": "87720"
  },
  {
    "text": "about memory models in various languages",
    "start": "87720",
    "end": "90180"
  },
  {
    "text": "and platforms",
    "start": "90180",
    "end": "91979"
  },
  {
    "text": "these bugs are relatively tricky to find",
    "start": "91979",
    "end": "94439"
  },
  {
    "text": "and easy to miss because they can be",
    "start": "94439",
    "end": "96479"
  },
  {
    "text": "introduced in code that could be assumed",
    "start": "96479",
    "end": "98939"
  },
  {
    "text": "to be correct and not show at all during",
    "start": "98939",
    "end": "101159"
  },
  {
    "text": "testing",
    "start": "101159",
    "end": "103700"
  },
  {
    "text": "but they can appear when certain",
    "start": "105119",
    "end": "107280"
  },
  {
    "text": "conditions are met when the code runs on",
    "start": "107280",
    "end": "110100"
  },
  {
    "text": "a different Hardware or even when the",
    "start": "110100",
    "end": "112020"
  },
  {
    "text": "compiler or when it's compiled with a",
    "start": "112020",
    "end": "113880"
  },
  {
    "text": "more recent version of a compiler",
    "start": "113880",
    "end": "116280"
  },
  {
    "text": "so I'm not going to disclose any bugs",
    "start": "116280",
    "end": "118439"
  },
  {
    "text": "during this talk but I will give you",
    "start": "118439",
    "end": "120659"
  },
  {
    "text": "some of the information you need to be",
    "start": "120659",
    "end": "123060"
  },
  {
    "text": "able to find bugs that can potentially",
    "start": "123060",
    "end": "124740"
  },
  {
    "text": "have severe consequences since some of",
    "start": "124740",
    "end": "127439"
  },
  {
    "text": "them can potentially lead to or help",
    "start": "127439",
    "end": "129720"
  },
  {
    "text": "into finding privileged escalation",
    "start": "129720",
    "end": "131400"
  },
  {
    "text": "vulnerabilities",
    "start": "131400",
    "end": "134180"
  },
  {
    "text": "so I'm not going to go into too much",
    "start": "136440",
    "end": "138180"
  },
  {
    "text": "details the details in regards to",
    "start": "138180",
    "end": "140220"
  },
  {
    "text": "definitions related to the hardware or",
    "start": "140220",
    "end": "142379"
  },
  {
    "text": "the compiler but I'll try to cover",
    "start": "142379",
    "end": "144480"
  },
  {
    "text": "information that would help you better",
    "start": "144480",
    "end": "146819"
  },
  {
    "text": "understand the problem",
    "start": "146819",
    "end": "148560"
  },
  {
    "text": "I will then discuss various issues that",
    "start": "148560",
    "end": "151140"
  },
  {
    "text": "could be introduced by the hardware and",
    "start": "151140",
    "end": "153060"
  },
  {
    "text": "the compiler in log free code I will",
    "start": "153060",
    "end": "155400"
  },
  {
    "text": "later on explain some techniques that",
    "start": "155400",
    "end": "157319"
  },
  {
    "text": "can be used to find these bugs",
    "start": "157319",
    "end": "161120"
  },
  {
    "text": "so what are locks when you share data",
    "start": "161580",
    "end": "164519"
  },
  {
    "text": "between threads usually see the user",
    "start": "164519",
    "end": "166560"
  },
  {
    "text": "Vlogs they were first created because of",
    "start": "166560",
    "end": "169379"
  },
  {
    "text": "the difficulty in writing multi-threaded",
    "start": "169379",
    "end": "171780"
  },
  {
    "text": "programs",
    "start": "171780",
    "end": "172980"
  },
  {
    "text": "with them you don't have to worry about",
    "start": "172980",
    "end": "174720"
  },
  {
    "text": "reordering or some optimizations and",
    "start": "174720",
    "end": "177360"
  },
  {
    "text": "they are getting faster than they used",
    "start": "177360",
    "end": "179220"
  },
  {
    "text": "to be",
    "start": "179220",
    "end": "181260"
  },
  {
    "text": "okay so this picture is kind of intense",
    "start": "181260",
    "end": "183300"
  },
  {
    "text": "don't get me wrong here locks are good",
    "start": "183300",
    "end": "186540"
  },
  {
    "text": "but they are kind of like this tank",
    "start": "186540",
    "end": "188360"
  },
  {
    "text": "pretty strong relatively slow safe but",
    "start": "188360",
    "end": "192000"
  },
  {
    "text": "can also get your program stuck",
    "start": "192000",
    "end": "195560"
  },
  {
    "text": "okay so what is log free programming by",
    "start": "196500",
    "end": "199319"
  },
  {
    "text": "definition it is impossible for the",
    "start": "199319",
    "end": "201420"
  },
  {
    "text": "system to lock up when you're using log",
    "start": "201420",
    "end": "203760"
  },
  {
    "text": "free code",
    "start": "203760",
    "end": "204900"
  },
  {
    "text": "so no more Deadlocks when your program",
    "start": "204900",
    "end": "207120"
  },
  {
    "text": "gets stuck or live locks and cases of",
    "start": "207120",
    "end": "209459"
  },
  {
    "text": "resource starvation",
    "start": "209459",
    "end": "211080"
  },
  {
    "text": "so suspending a threat for instance",
    "start": "211080",
    "end": "213000"
  },
  {
    "text": "we're not block the entire program",
    "start": "213000",
    "end": "215819"
  },
  {
    "text": "we use it for real-time operations",
    "start": "215819",
    "end": "217940"
  },
  {
    "text": "multimedia financial apps Oasis VMS we",
    "start": "217940",
    "end": "221819"
  },
  {
    "text": "use it for interrupt handlers in",
    "start": "221819",
    "end": "223920"
  },
  {
    "text": "real-time system or when tasks have to",
    "start": "223920",
    "end": "226620"
  },
  {
    "text": "complete within a certain time limit",
    "start": "226620",
    "end": "229200"
  },
  {
    "text": "it also has credibility benefits on",
    "start": "229200",
    "end": "231599"
  },
  {
    "text": "multi-processor machines and it's",
    "start": "231599",
    "end": "233700"
  },
  {
    "text": "usually faster than logs when written",
    "start": "233700",
    "end": "235980"
  },
  {
    "text": "correctly",
    "start": "235980",
    "end": "238459"
  },
  {
    "text": "so let's start with the very obvious",
    "start": "239159",
    "end": "242700"
  },
  {
    "text": "what does the compiler and Hardware know",
    "start": "242700",
    "end": "244860"
  },
  {
    "text": "when compiling or executing code",
    "start": "244860",
    "end": "248599"
  },
  {
    "text": "they just know what's going on within a",
    "start": "248760",
    "end": "250560"
  },
  {
    "text": "single thread and I obviously don't know",
    "start": "250560",
    "end": "252720"
  },
  {
    "text": "about any memory location that could be",
    "start": "252720",
    "end": "255120"
  },
  {
    "text": "shared across threads",
    "start": "255120",
    "end": "257220"
  },
  {
    "text": "so the same thing it is the same thing",
    "start": "257220",
    "end": "259560"
  },
  {
    "text": "then when writing looks you have to let",
    "start": "259560",
    "end": "262199"
  },
  {
    "text": "the compiler and the hardware know",
    "start": "262199",
    "end": "264540"
  },
  {
    "text": "but you can't make assumptions about",
    "start": "264540",
    "end": "266280"
  },
  {
    "text": "memory models anymore like thinking the",
    "start": "266280",
    "end": "268800"
  },
  {
    "text": "CPU doesn't do anything that can break",
    "start": "268800",
    "end": "270840"
  },
  {
    "text": "this so it's okay",
    "start": "270840",
    "end": "272460"
  },
  {
    "text": "now you have to use the appropriate",
    "start": "272460",
    "end": "274620"
  },
  {
    "text": "barriers and understand memory models of",
    "start": "274620",
    "end": "277320"
  },
  {
    "text": "the compiler on the hardware",
    "start": "277320",
    "end": "280460"
  },
  {
    "text": "so two of the main Concepts to",
    "start": "281639",
    "end": "283680"
  },
  {
    "text": "understand here are cash coherence and",
    "start": "283680",
    "end": "286259"
  },
  {
    "text": "sequential consistency",
    "start": "286259",
    "end": "289280"
  },
  {
    "text": "means that rice made by a processor are",
    "start": "289280",
    "end": "292320"
  },
  {
    "text": "eventually seen by other processors",
    "start": "292320",
    "end": "294060"
  },
  {
    "text": "without being lost or overwritten",
    "start": "294060",
    "end": "296940"
  },
  {
    "text": "but you should not really have to care",
    "start": "296940",
    "end": "298800"
  },
  {
    "text": "too much about this since the OS the",
    "start": "298800",
    "end": "301500"
  },
  {
    "text": "compiler and the hardware should make",
    "start": "301500",
    "end": "303120"
  },
  {
    "text": "sure it is true",
    "start": "303120",
    "end": "304680"
  },
  {
    "text": "but sequential consistency is really",
    "start": "304680",
    "end": "306780"
  },
  {
    "text": "important it is language and Hardware",
    "start": "306780",
    "end": "308820"
  },
  {
    "text": "dependent it basically means that in a",
    "start": "308820",
    "end": "312000"
  },
  {
    "text": "perfect sequentially consistent world",
    "start": "312000",
    "end": "313979"
  },
  {
    "text": "the program you write is executed as you",
    "start": "313979",
    "end": "317100"
  },
  {
    "text": "wrote it so it means that they should",
    "start": "317100",
    "end": "319259"
  },
  {
    "text": "not be other instructions all over the",
    "start": "319259",
    "end": "321240"
  },
  {
    "text": "place which they do anyway but they this",
    "start": "321240",
    "end": "325139"
  },
  {
    "text": "reordering should not be visible",
    "start": "325139",
    "end": "328020"
  },
  {
    "text": "so sequential consistency in current",
    "start": "328020",
    "end": "330300"
  },
  {
    "text": "hardware and language is is kind of an",
    "start": "330300",
    "end": "333360"
  },
  {
    "text": "illusion even though you should be able",
    "start": "333360",
    "end": "335580"
  },
  {
    "text": "to force it to some extent but it would",
    "start": "335580",
    "end": "338100"
  },
  {
    "text": "be very slow",
    "start": "338100",
    "end": "340699"
  },
  {
    "text": "so let's talk about compiler specifics",
    "start": "341520",
    "end": "345840"
  },
  {
    "text": "in addition to potentially reordering",
    "start": "345840",
    "end": "348000"
  },
  {
    "text": "what you write it can do a lot of other",
    "start": "348000",
    "end": "350280"
  },
  {
    "text": "optimizations and it does that assuming",
    "start": "350280",
    "end": "352979"
  },
  {
    "text": "the code you write runs on the single",
    "start": "352979",
    "end": "354960"
  },
  {
    "text": "thread if you don't tell it otherwise",
    "start": "354960",
    "end": "357960"
  },
  {
    "text": "in addition there are things that",
    "start": "357960",
    "end": "359520"
  },
  {
    "text": "profite",
    "start": "359520",
    "end": "360500"
  },
  {
    "text": "optimizations or even add-ons to",
    "start": "360500",
    "end": "363240"
  },
  {
    "text": "compiler to first case the generated",
    "start": "363240",
    "end": "365280"
  },
  {
    "text": "code you write that can potentially",
    "start": "365280",
    "end": "367139"
  },
  {
    "text": "create other issues I'm not going to to",
    "start": "367139",
    "end": "369960"
  },
  {
    "text": "talk about them today",
    "start": "369960",
    "end": "372919"
  },
  {
    "text": "so memory models tell you types of",
    "start": "374340",
    "end": "377039"
  },
  {
    "text": "reordering that can occur depending on",
    "start": "377039",
    "end": "378960"
  },
  {
    "text": "the code for the compiler and the",
    "start": "378960",
    "end": "381180"
  },
  {
    "text": "generated binary for the hardware",
    "start": "381180",
    "end": "383880"
  },
  {
    "text": "again this is specifically important for",
    "start": "383880",
    "end": "386100"
  },
  {
    "text": "log free programming",
    "start": "386100",
    "end": "387660"
  },
  {
    "text": "they are basically weak and strong",
    "start": "387660",
    "end": "389400"
  },
  {
    "text": "memory models weaker memory models are",
    "start": "389400",
    "end": "392400"
  },
  {
    "text": "further away from sequential consistency",
    "start": "392400",
    "end": "394259"
  },
  {
    "text": "and allow for the most aggressive",
    "start": "394259",
    "end": "396479"
  },
  {
    "text": "reordering",
    "start": "396479",
    "end": "397979"
  },
  {
    "text": "in the Loosely ordered category we have",
    "start": "397979",
    "end": "400740"
  },
  {
    "text": "arm which is used for mobile and tablets",
    "start": "400740",
    "end": "404400"
  },
  {
    "text": "we also have titanium which is used by",
    "start": "404400",
    "end": "407280"
  },
  {
    "text": "Enterprises",
    "start": "407280",
    "end": "408720"
  },
  {
    "text": "and which is a bit scary uh and we have",
    "start": "408720",
    "end": "412560"
  },
  {
    "text": "all of the software memory models",
    "start": "412560",
    "end": "414120"
  },
  {
    "text": "depending on different types and",
    "start": "414120",
    "end": "417080"
  },
  {
    "text": "functions you can use for for your",
    "start": "417080",
    "end": "419940"
  },
  {
    "text": "programming language",
    "start": "419940",
    "end": "422780"
  },
  {
    "start": "420000",
    "end": "680000"
  },
  {
    "text": "so let's start with the reordering",
    "start": "425819",
    "end": "427979"
  },
  {
    "text": "issues so real doing catapella at",
    "start": "427979",
    "end": "430680"
  },
  {
    "text": "runtime and compile time",
    "start": "430680",
    "end": "434460"
  },
  {
    "text": "let's see uh",
    "start": "434460",
    "end": "437280"
  },
  {
    "text": "all right so alitation of the potential",
    "start": "437280",
    "end": "439740"
  },
  {
    "text": "issues that can be very existive",
    "start": "439740",
    "end": "444060"
  },
  {
    "text": "so I'm not going to be very exhaustive",
    "start": "444060",
    "end": "446039"
  },
  {
    "text": "due to a short time frame for this",
    "start": "446039",
    "end": "448020"
  },
  {
    "text": "presentation but I will mention some of",
    "start": "448020",
    "end": "449880"
  },
  {
    "text": "them within this this part",
    "start": "449880",
    "end": "454220"
  },
  {
    "text": "so I already mentioned uh this is not a",
    "start": "456240",
    "end": "459419"
  },
  {
    "text": "problem when you use locks but that can",
    "start": "459419",
    "end": "461520"
  },
  {
    "text": "only mostly appear when you use log free",
    "start": "461520",
    "end": "463440"
  },
  {
    "text": "programming I'm going to start with",
    "start": "463440",
    "end": "465960"
  },
  {
    "text": "atomicity so one critical component for",
    "start": "465960",
    "end": "468599"
  },
  {
    "text": "multi-threaded programs is atomicity",
    "start": "468599",
    "end": "471660"
  },
  {
    "text": "an atomic operation means it occur",
    "start": "471660",
    "end": "474060"
  },
  {
    "text": "instantaneously and it basically",
    "start": "474060",
    "end": "476039"
  },
  {
    "text": "prevents other threads from interfering",
    "start": "476039",
    "end": "478560"
  },
  {
    "text": "when modifying a memory location",
    "start": "478560",
    "end": "481080"
  },
  {
    "text": "CNC plus plus operations are not",
    "start": "481080",
    "end": "483360"
  },
  {
    "text": "presumed atomic even though some Native",
    "start": "483360",
    "end": "486240"
  },
  {
    "text": "Native types can be if they are not",
    "start": "486240",
    "end": "488340"
  },
  {
    "text": "wider than the memory bus and if they",
    "start": "488340",
    "end": "490740"
  },
  {
    "text": "are aligned",
    "start": "490740",
    "end": "491900"
  },
  {
    "text": "so for instance non-ride read or write",
    "start": "491900",
    "end": "495240"
  },
  {
    "text": "like the example at the bottom here or",
    "start": "495240",
    "end": "497759"
  },
  {
    "text": "an operation that read or writes more",
    "start": "497759",
    "end": "500039"
  },
  {
    "text": "than eight bytes on a 64 bits white bus",
    "start": "500039",
    "end": "502740"
  },
  {
    "text": "for instance are probably not going to",
    "start": "502740",
    "end": "505259"
  },
  {
    "text": "be atomic",
    "start": "505259",
    "end": "507060"
  },
  {
    "text": "another example of non-atomic operation",
    "start": "507060",
    "end": "509520"
  },
  {
    "text": "is a simple incrementation which is",
    "start": "509520",
    "end": "512159"
  },
  {
    "text": "actually three instructions a load and",
    "start": "512159",
    "end": "514979"
  },
  {
    "text": "increments and the store so this cannot",
    "start": "514979",
    "end": "517500"
  },
  {
    "text": "be atomic",
    "start": "517500",
    "end": "518700"
  },
  {
    "text": "to be Atomic you need to either use the",
    "start": "518700",
    "end": "520919"
  },
  {
    "text": "atomic keyword or the atomic keyword C",
    "start": "520919",
    "end": "522899"
  },
  {
    "text": "plus plus 11 uh uh and use a read modify",
    "start": "522899",
    "end": "526920"
  },
  {
    "text": "write operations that usually allow",
    "start": "526920",
    "end": "529320"
  },
  {
    "text": "performing several basic operations that",
    "start": "529320",
    "end": "531360"
  },
  {
    "text": "will appear as atomic",
    "start": "531360",
    "end": "534680"
  },
  {
    "text": "so let's take an example of compiler",
    "start": "536160",
    "end": "538380"
  },
  {
    "text": "reordering",
    "start": "538380",
    "end": "539940"
  },
  {
    "text": "the code at the top generates mashing",
    "start": "539940",
    "end": "542220"
  },
  {
    "text": "code as its right this is compiled",
    "start": "542220",
    "end": "544500"
  },
  {
    "text": "without any optimization flags on G plus",
    "start": "544500",
    "end": "546660"
  },
  {
    "text": "plus",
    "start": "546660",
    "end": "547980"
  },
  {
    "text": "so I basically set a value to a global",
    "start": "547980",
    "end": "550200"
  },
  {
    "text": "variable in the first thread and use",
    "start": "550200",
    "end": "552660"
  },
  {
    "text": "another Global to tell the second thread",
    "start": "552660",
    "end": "554760"
  },
  {
    "text": "that the variable is updated",
    "start": "554760",
    "end": "556740"
  },
  {
    "text": "so as you can see this compiled more or",
    "start": "556740",
    "end": "558839"
  },
  {
    "text": "less as I wrote it",
    "start": "558839",
    "end": "561120"
  },
  {
    "text": "in the code at the bottom of the slide I",
    "start": "561120",
    "end": "563640"
  },
  {
    "text": "use the dash 03 compiler flag with G",
    "start": "563640",
    "end": "565920"
  },
  {
    "text": "plus stress which tells the compiler to",
    "start": "565920",
    "end": "568080"
  },
  {
    "text": "optimize the code and you can see",
    "start": "568080",
    "end": "570600"
  },
  {
    "text": "optimizations and reordering in that",
    "start": "570600",
    "end": "572760"
  },
  {
    "text": "case",
    "start": "572760",
    "end": "575000"
  },
  {
    "text": "you can get a better picture of the",
    "start": "575100",
    "end": "576959"
  },
  {
    "text": "problem here",
    "start": "576959",
    "end": "578399"
  },
  {
    "text": "the second thread uses the global easy",
    "start": "578399",
    "end": "581040"
  },
  {
    "text": "updated variable to retrieve the content",
    "start": "581040",
    "end": "583380"
  },
  {
    "text": "of the global value variable set by the",
    "start": "583380",
    "end": "586260"
  },
  {
    "text": "first thread by reordering the",
    "start": "586260",
    "end": "588660"
  },
  {
    "text": "instruction in the code of the first",
    "start": "588660",
    "end": "590160"
  },
  {
    "text": "thread the second thread can get an",
    "start": "590160",
    "end": "592620"
  },
  {
    "text": "incorrect value for the global value",
    "start": "592620",
    "end": "594660"
  },
  {
    "text": "variable",
    "start": "594660",
    "end": "597199"
  },
  {
    "text": "now I'm using a compiler directive to",
    "start": "598860",
    "end": "601260"
  },
  {
    "text": "prevent reordering",
    "start": "601260",
    "end": "602820"
  },
  {
    "text": "and as you can see she's not real",
    "start": "602820",
    "end": "604860"
  },
  {
    "text": "anymore by the compiler",
    "start": "604860",
    "end": "607440"
  },
  {
    "text": "but it doesn't mean the CPU is not going",
    "start": "607440",
    "end": "609360"
  },
  {
    "text": "to reorder this as I use the compiler",
    "start": "609360",
    "end": "611880"
  },
  {
    "text": "only barrier but I will talk about that",
    "start": "611880",
    "end": "614279"
  },
  {
    "text": "later",
    "start": "614279",
    "end": "616519"
  },
  {
    "text": "so I listed here buyers that should be",
    "start": "616680",
    "end": "618779"
  },
  {
    "text": "used to prevent compile time reordering",
    "start": "618779",
    "end": "621360"
  },
  {
    "text": "some of them are specifics such as the",
    "start": "621360",
    "end": "623519"
  },
  {
    "text": "interlocked variation or C plus plus",
    "start": "623519",
    "end": "626160"
  },
  {
    "text": "Atomic types which should be the best",
    "start": "626160",
    "end": "628260"
  },
  {
    "text": "things to use here",
    "start": "628260",
    "end": "630000"
  },
  {
    "text": "some of them are also implied to be",
    "start": "630000",
    "end": "632160"
  },
  {
    "text": "compiler buyers such as most of the",
    "start": "632160",
    "end": "634440"
  },
  {
    "text": "hardware barriers as well as some",
    "start": "634440",
    "end": "636839"
  },
  {
    "text": "function codes even though some some of",
    "start": "636839",
    "end": "639660"
  },
  {
    "text": "them are oftentimes in lines so you",
    "start": "639660",
    "end": "641580"
  },
  {
    "text": "can't really effectively rely on that",
    "start": "641580",
    "end": "643380"
  },
  {
    "text": "and may need to use a compiler directive",
    "start": "643380",
    "end": "645360"
  },
  {
    "text": "for forcing it",
    "start": "645360",
    "end": "647700"
  },
  {
    "text": "so it is a",
    "start": "647700",
    "end": "650040"
  },
  {
    "text": "okay so developers often time use the",
    "start": "650040",
    "end": "653820"
  },
  {
    "text": "volatile keyword as a compiler barrier",
    "start": "653820",
    "end": "656760"
  },
  {
    "text": "but this is not Atomic and this kind of",
    "start": "656760",
    "end": "659339"
  },
  {
    "text": "implementation dependent as well so it's",
    "start": "659339",
    "end": "661680"
  },
  {
    "text": "not recommended to use it for",
    "start": "661680",
    "end": "663360"
  },
  {
    "text": "synchronization purposes",
    "start": "663360",
    "end": "665760"
  },
  {
    "text": "so this volatile keyword is completely",
    "start": "665760",
    "end": "668220"
  },
  {
    "text": "different from the one used in java.net",
    "start": "668220",
    "end": "671000"
  },
  {
    "text": "as it is the one used in Java acts as",
    "start": "671000",
    "end": "674459"
  },
  {
    "text": "the C plus 11 Atomic type which is a",
    "start": "674459",
    "end": "677220"
  },
  {
    "text": "full memory barrier",
    "start": "677220",
    "end": "680180"
  },
  {
    "start": "680000",
    "end": "1139000"
  },
  {
    "text": "so let's talk about how are we ordering",
    "start": "682019",
    "end": "684720"
  },
  {
    "text": "the number of guarantees when CPU has to",
    "start": "684720",
    "end": "688079"
  },
  {
    "text": "provide for a single strand to appear",
    "start": "688079",
    "end": "690120"
  },
  {
    "text": "sequentially consistent the main one is",
    "start": "690120",
    "end": "692820"
  },
  {
    "text": "that dependent memory accesses are done",
    "start": "692820",
    "end": "694920"
  },
  {
    "text": "in order",
    "start": "694920",
    "end": "696300"
  },
  {
    "text": "which which makes sense",
    "start": "696300",
    "end": "698459"
  },
  {
    "text": "but it is not guaranteed that",
    "start": "698459",
    "end": "701279"
  },
  {
    "text": "independent loads and store",
    "start": "701279",
    "end": "703399"
  },
  {
    "text": "are done in order which again is fine",
    "start": "703399",
    "end": "706200"
  },
  {
    "text": "for finger threaded code but can create",
    "start": "706200",
    "end": "708540"
  },
  {
    "text": "issues if more than one core is involved",
    "start": "708540",
    "end": "711600"
  },
  {
    "text": "this we are doing is also dependent on",
    "start": "711600",
    "end": "713880"
  },
  {
    "text": "the architecture and will be more as",
    "start": "713880",
    "end": "715980"
  },
  {
    "text": "aggressive depending on its memory model",
    "start": "715980",
    "end": "718980"
  },
  {
    "text": "for example even an x664 CPUs which have",
    "start": "718980",
    "end": "722940"
  },
  {
    "text": "a strong memory model it is allowed to",
    "start": "722940",
    "end": "725459"
  },
  {
    "text": "delay a store past any loads from a",
    "start": "725459",
    "end": "727680"
  },
  {
    "text": "different location",
    "start": "727680",
    "end": "729120"
  },
  {
    "text": "which can create various issues so the",
    "start": "729120",
    "end": "731820"
  },
  {
    "text": "compiler need to use the action",
    "start": "731820",
    "end": "733620"
  },
  {
    "text": "instruction for our store instead of a",
    "start": "733620",
    "end": "736380"
  },
  {
    "text": "move which is then a full memory barrier",
    "start": "736380",
    "end": "739260"
  },
  {
    "text": "and is needed to prevent reordering",
    "start": "739260",
    "end": "743600"
  },
  {
    "text": "so I listed here some Hardware barriers",
    "start": "744360",
    "end": "746579"
  },
  {
    "text": "that would prevent runtime reordering",
    "start": "746579",
    "end": "748860"
  },
  {
    "text": "most of them also acts as compiler",
    "start": "748860",
    "end": "751019"
  },
  {
    "text": "barriers",
    "start": "751019",
    "end": "752220"
  },
  {
    "text": "so there are actually a lot of different",
    "start": "752220",
    "end": "754260"
  },
  {
    "text": "types of buyers depending on the CPU and",
    "start": "754260",
    "end": "756660"
  },
  {
    "text": "its memory model but compilers usually",
    "start": "756660",
    "end": "759300"
  },
  {
    "text": "agree on instructions they use to for",
    "start": "759300",
    "end": "762180"
  },
  {
    "text": "the different barriers",
    "start": "762180",
    "end": "765440"
  },
  {
    "text": "on x86 for instance the sequential",
    "start": "765660",
    "end": "768420"
  },
  {
    "text": "consistent store I talked about earlier",
    "start": "768420",
    "end": "770760"
  },
  {
    "text": "is almost always an exchange another",
    "start": "770760",
    "end": "772800"
  },
  {
    "text": "infant plus move as you can see on this",
    "start": "772800",
    "end": "775200"
  },
  {
    "text": "documentation which could work too but",
    "start": "775200",
    "end": "778139"
  },
  {
    "text": "the action is actually cheaper",
    "start": "778139",
    "end": "781079"
  },
  {
    "text": "as you can see for arm on the right",
    "start": "781079",
    "end": "783060"
  },
  {
    "text": "there are a lot of different",
    "start": "783060",
    "end": "784440"
  },
  {
    "text": "instructions depending on the operation",
    "start": "784440",
    "end": "786180"
  },
  {
    "text": "because it really has way more",
    "start": "786180",
    "end": "788040"
  },
  {
    "text": "aggressively than x86",
    "start": "788040",
    "end": "791720"
  },
  {
    "text": "now I'm going to talk about some",
    "start": "792660",
    "end": "794519"
  },
  {
    "text": "optimizations compiler can do and that",
    "start": "794519",
    "end": "797100"
  },
  {
    "text": "can create issues in log free code",
    "start": "797100",
    "end": "799680"
  },
  {
    "text": "the slide list some optimization that",
    "start": "799680",
    "end": "802019"
  },
  {
    "text": "can be bad",
    "start": "802019",
    "end": "803100"
  },
  {
    "text": "I won't talk about them in details but I",
    "start": "803100",
    "end": "805800"
  },
  {
    "text": "will show some examples",
    "start": "805800",
    "end": "808880"
  },
  {
    "text": "so what can go wrong here any idea",
    "start": "809399",
    "end": "813920"
  },
  {
    "text": "all right so in the first thread you",
    "start": "821100",
    "end": "823440"
  },
  {
    "text": "could get a potential compiler and CPU",
    "start": "823440",
    "end": "825600"
  },
  {
    "text": "reordering as discussed in the previous",
    "start": "825600",
    "end": "827579"
  },
  {
    "text": "slide",
    "start": "827579",
    "end": "828540"
  },
  {
    "text": "in the second thread the compiler is",
    "start": "828540",
    "end": "831120"
  },
  {
    "text": "likely to do a register promotion which",
    "start": "831120",
    "end": "833519"
  },
  {
    "text": "means it is likely to load the global",
    "start": "833519",
    "end": "835560"
  },
  {
    "text": "done into a register which is a",
    "start": "835560",
    "end": "838139"
  },
  {
    "text": "completely valid optimization but won't",
    "start": "838139",
    "end": "840540"
  },
  {
    "text": "work in a multi-threaded environment",
    "start": "840540",
    "end": "843240"
  },
  {
    "text": "and this is a relatively obvious",
    "start": "843240",
    "end": "844920"
  },
  {
    "text": "optimization and a developer will see",
    "start": "844920",
    "end": "847320"
  },
  {
    "text": "the problem pretty quickly if that",
    "start": "847320",
    "end": "849899"
  },
  {
    "text": "happened",
    "start": "849899",
    "end": "850920"
  },
  {
    "text": "so let's use another example in in the",
    "start": "850920",
    "end": "853440"
  },
  {
    "text": "context of the kernel",
    "start": "853440",
    "end": "856579"
  },
  {
    "text": "it's a double fish or time of check to",
    "start": "856800",
    "end": "859320"
  },
  {
    "text": "time of use type of issue it's kind of a",
    "start": "859320",
    "end": "861959"
  },
  {
    "text": "classic race condition that can",
    "start": "861959",
    "end": "863880"
  },
  {
    "text": "potentially lead to privileged",
    "start": "863880",
    "end": "865440"
  },
  {
    "text": "escalation issues in Canada code or in",
    "start": "865440",
    "end": "868019"
  },
  {
    "text": "VMS for instance",
    "start": "868019",
    "end": "870980"
  },
  {
    "text": "so it basically happens when there are",
    "start": "871079",
    "end": "873540"
  },
  {
    "text": "two memory reads in Canada space from a",
    "start": "873540",
    "end": "876360"
  },
  {
    "text": "user writable address",
    "start": "876360",
    "end": "878100"
  },
  {
    "text": "you can see that in I octal Handler code",
    "start": "878100",
    "end": "881100"
  },
  {
    "text": "for instance",
    "start": "881100",
    "end": "882899"
  },
  {
    "text": "the first time the memory is fetched the",
    "start": "882899",
    "end": "884940"
  },
  {
    "text": "kernel code validates the value and then",
    "start": "884940",
    "end": "887160"
  },
  {
    "text": "uses it but when it is used it fetched a",
    "start": "887160",
    "end": "890760"
  },
  {
    "text": "second time from user's base memory",
    "start": "890760",
    "end": "893220"
  },
  {
    "text": "which can be controlled by low",
    "start": "893220",
    "end": "894959"
  },
  {
    "text": "privileged user at that point and can",
    "start": "894959",
    "end": "897060"
  },
  {
    "text": "then effectively lead to memory",
    "start": "897060",
    "end": "898920"
  },
  {
    "text": "Corruptions or other various issues",
    "start": "898920",
    "end": "902839"
  },
  {
    "text": "so this is a very raw example",
    "start": "903060",
    "end": "905279"
  },
  {
    "text": "this could be the code in a i octol",
    "start": "905279",
    "end": "907440"
  },
  {
    "text": "under for instance",
    "start": "907440",
    "end": "909600"
  },
  {
    "text": "the users the P user space memory",
    "start": "909600",
    "end": "912480"
  },
  {
    "text": "pointer points to attack your controlled",
    "start": "912480",
    "end": "914639"
  },
  {
    "text": "memory in user space",
    "start": "914639",
    "end": "916560"
  },
  {
    "text": "probe for a right validates the memory",
    "start": "916560",
    "end": "918720"
  },
  {
    "text": "to make sure it is in user space",
    "start": "918720",
    "end": "922560"
  },
  {
    "text": "and the same pointer is unused to copy",
    "start": "922560",
    "end": "925199"
  },
  {
    "text": "data from Canon space for instance",
    "start": "925199",
    "end": "927779"
  },
  {
    "text": "in this case the attacker can modify the",
    "start": "927779",
    "end": "930240"
  },
  {
    "text": "memory containing the address of the",
    "start": "930240",
    "end": "932699"
  },
  {
    "text": "buffer on its length and this can be",
    "start": "932699",
    "end": "934980"
  },
  {
    "text": "done after the profile write check which",
    "start": "934980",
    "end": "937560"
  },
  {
    "text": "can then lead to writing into kernel",
    "start": "937560",
    "end": "939480"
  },
  {
    "text": "memory",
    "start": "939480",
    "end": "941839"
  },
  {
    "text": "so as a mitigation",
    "start": "942600",
    "end": "944880"
  },
  {
    "text": "we could capture the data structure",
    "start": "944880",
    "end": "947220"
  },
  {
    "text": "containing the buffer information and we",
    "start": "947220",
    "end": "949620"
  },
  {
    "text": "could be finding Theory and that what",
    "start": "949620",
    "end": "951540"
  },
  {
    "text": "you can see in a lot of Canon curves",
    "start": "951540",
    "end": "953820"
  },
  {
    "text": "sometimes or drivers",
    "start": "953820",
    "end": "957380"
  },
  {
    "text": "however in this example the compiler",
    "start": "958199",
    "end": "961139"
  },
  {
    "text": "could potentially optimize the code",
    "start": "961139",
    "end": "962820"
  },
  {
    "text": "capturing the data it is always legal to",
    "start": "962820",
    "end": "965519"
  },
  {
    "text": "reduce the status possible instructions",
    "start": "965519",
    "end": "968100"
  },
  {
    "text": "and we could get the same double fetch",
    "start": "968100",
    "end": "969899"
  },
  {
    "text": "issue that could easily go unnoticed",
    "start": "969899",
    "end": "973940"
  },
  {
    "text": "now if you apply a compiler-specific",
    "start": "976800",
    "end": "979199"
  },
  {
    "text": "mitigation here to further capture of",
    "start": "979199",
    "end": "982860"
  },
  {
    "text": "the variable with a cast into a volatile",
    "start": "982860",
    "end": "985139"
  },
  {
    "text": "type",
    "start": "985139",
    "end": "986040"
  },
  {
    "text": "we can potentially do that because we",
    "start": "986040",
    "end": "988500"
  },
  {
    "text": "don't need atomicity and memory accesses",
    "start": "988500",
    "end": "990959"
  },
  {
    "text": "are performed in order here",
    "start": "990959",
    "end": "993600"
  },
  {
    "text": "well in the case of the compiler bag",
    "start": "993600",
    "end": "995459"
  },
  {
    "text": "which can happen the data will still be",
    "start": "995459",
    "end": "997980"
  },
  {
    "text": "captured twice",
    "start": "997980",
    "end": "1000759"
  },
  {
    "text": "so again look free code is hard and not",
    "start": "1002060",
    "end": "1004579"
  },
  {
    "text": "only to application developers but also",
    "start": "1004579",
    "end": "1006860"
  },
  {
    "text": "to people writing compilers",
    "start": "1006860",
    "end": "1008959"
  },
  {
    "text": "compilerberg exists and they are more",
    "start": "1008959",
    "end": "1011360"
  },
  {
    "text": "frequent than you may think and this can",
    "start": "1011360",
    "end": "1013759"
  },
  {
    "text": "potentially impact a lot of code that",
    "start": "1013759",
    "end": "1015680"
  },
  {
    "text": "will probably never be recompiled again",
    "start": "1015680",
    "end": "1019420"
  },
  {
    "text": "so it is relatively tricky to find these",
    "start": "1020720",
    "end": "1023000"
  },
  {
    "text": "bugs but finding out which version of",
    "start": "1023000",
    "end": "1025160"
  },
  {
    "text": "the compiler was used as well as knowing",
    "start": "1025160",
    "end": "1027319"
  },
  {
    "text": "bugs a specific compiler can introduce",
    "start": "1027319",
    "end": "1029418"
  },
  {
    "text": "could be a start",
    "start": "1029419",
    "end": "1031400"
  },
  {
    "text": "looking for Specific Instructions would",
    "start": "1031400",
    "end": "1033500"
  },
  {
    "text": "allow you to find code sections that",
    "start": "1033500",
    "end": "1035480"
  },
  {
    "text": "should be protected then you need to",
    "start": "1035480",
    "end": "1038000"
  },
  {
    "text": "determine if the right Hardware buyer",
    "start": "1038000",
    "end": "1040339"
  },
  {
    "text": "was used everywhere and this mostly",
    "start": "1040339",
    "end": "1042438"
  },
  {
    "text": "worked for weaker memory models",
    "start": "1042439",
    "end": "1044660"
  },
  {
    "text": "you could use a thread sanitizer or",
    "start": "1044660",
    "end": "1046938"
  },
  {
    "text": "t-san which is based on wiregrind for",
    "start": "1046939",
    "end": "1049700"
  },
  {
    "text": "Linux and Mac OS and pin for Windows",
    "start": "1049700",
    "end": "1052280"
  },
  {
    "text": "which is a dynamic binary",
    "start": "1052280",
    "end": "1053780"
  },
  {
    "text": "instrumentation tool",
    "start": "1053780",
    "end": "1055580"
  },
  {
    "text": "also if any double fetch has been",
    "start": "1055580",
    "end": "1057559"
  },
  {
    "text": "introduced Drew and gin Vale are going",
    "start": "1057559",
    "end": "1060140"
  },
  {
    "text": "to talk about a tool to find that kind",
    "start": "1060140",
    "end": "1062299"
  },
  {
    "text": "of issues more easily tomorrow",
    "start": "1062299",
    "end": "1065559"
  },
  {
    "text": "so if you have the code",
    "start": "1067220",
    "end": "1069080"
  },
  {
    "text": "you should make sure you understand well",
    "start": "1069080",
    "end": "1070640"
  },
  {
    "text": "all of the various memory models and",
    "start": "1070640",
    "end": "1072740"
  },
  {
    "text": "thoroughly test code that should not be",
    "start": "1072740",
    "end": "1075020"
  },
  {
    "text": "optimized in any way if you are a",
    "start": "1075020",
    "end": "1077660"
  },
  {
    "text": "developer you should consider using Lux",
    "start": "1077660",
    "end": "1079580"
  },
  {
    "text": "where where you can if you're unsure",
    "start": "1079580",
    "end": "1081860"
  },
  {
    "text": "about some of the memory models of the",
    "start": "1081860",
    "end": "1083720"
  },
  {
    "text": "language",
    "start": "1083720",
    "end": "1084980"
  },
  {
    "text": "in term of testing with the code you",
    "start": "1084980",
    "end": "1087140"
  },
  {
    "text": "should probably write as many test cases",
    "start": "1087140",
    "end": "1088940"
  },
  {
    "text": "as you can and use a thread sanitizer",
    "start": "1088940",
    "end": "1092059"
  },
  {
    "text": "you could also do equivalence checking",
    "start": "1092059",
    "end": "1093919"
  },
  {
    "text": "using different compilers but this could",
    "start": "1093919",
    "end": "1096679"
  },
  {
    "text": "be pretty difficult as you need to write",
    "start": "1096679",
    "end": "1099140"
  },
  {
    "text": "you need to know which generated code is",
    "start": "1099140",
    "end": "1102260"
  },
  {
    "text": "supposed to be correct",
    "start": "1102260",
    "end": "1104120"
  },
  {
    "text": "testing with CPUs with weaker memory",
    "start": "1104120",
    "end": "1106760"
  },
  {
    "text": "models can be good as well you could",
    "start": "1106760",
    "end": "1109100"
  },
  {
    "text": "cross compile for titanium for instance",
    "start": "1109100",
    "end": "1111020"
  },
  {
    "text": "which is a weekly order CPUs and see if",
    "start": "1111020",
    "end": "1113840"
  },
  {
    "text": "the code still work fine",
    "start": "1113840",
    "end": "1116980"
  },
  {
    "text": "so already know electric programming is",
    "start": "1117919",
    "end": "1120620"
  },
  {
    "text": "hard",
    "start": "1120620",
    "end": "1121400"
  },
  {
    "text": "it can introduce tons of issues in the",
    "start": "1121400",
    "end": "1123500"
  },
  {
    "text": "applications you are testing even in",
    "start": "1123500",
    "end": "1125840"
  },
  {
    "text": "otherwise correct code due to potential",
    "start": "1125840",
    "end": "1127940"
  },
  {
    "text": "compiler issues",
    "start": "1127940",
    "end": "1130960"
  },
  {
    "text": "all right thank you",
    "start": "1131960",
    "end": "1133880"
  },
  {
    "text": "foreign",
    "start": "1133880",
    "end": "1136880"
  }
]