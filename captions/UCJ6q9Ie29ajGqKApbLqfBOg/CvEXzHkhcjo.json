[
  {
    "text": "hi everybody so my name is Greg Dodds I'm one of the chief architects responsible for security at juniper and",
    "start": "0",
    "end": "6089"
  },
  {
    "text": "today we're going to be talking about combining office 365 and PowerShell for con covert",
    "start": "6089",
    "end": "12599"
  },
  {
    "text": "command control within office enterprises I should say in the interest",
    "start": "12599",
    "end": "17850"
  },
  {
    "text": "of time I cut out my biography slide but the Cliff's Notes version is I've been at juniper for a little bit over a year",
    "start": "17850",
    "end": "24029"
  },
  {
    "text": "at this point prior to that I spent about five years at IBM security and",
    "start": "24029",
    "end": "29400"
  },
  {
    "text": "before that I spent many years at checkpoint software and Nokia so moving",
    "start": "29400",
    "end": "36390"
  },
  {
    "text": "on first and foremost our agenda we need to discuss why office 365 makes for ideal",
    "start": "36390",
    "end": "42590"
  },
  {
    "text": "c2 infrastructure after that we're going to discuss how PowerShell fits into this",
    "start": "42590",
    "end": "49190"
  },
  {
    "text": "specifically around the new PS Drive commands and if you're not familiar with",
    "start": "49190",
    "end": "54390"
  },
  {
    "text": "that you can make a pretty quick guess what it's responsible for mounting local",
    "start": "54390",
    "end": "59609"
  },
  {
    "text": "and remote file systems within PowerShell after that we're going to go",
    "start": "59609",
    "end": "64619"
  },
  {
    "text": "through a simple four stage proof of concept I've tried to keep all the",
    "start": "64619",
    "end": "70020"
  },
  {
    "text": "examples as simple as possible so even those of you who are not familiar with PowerShell necessarily should be able to",
    "start": "70020",
    "end": "75900"
  },
  {
    "text": "follow along after that we will talk about some mitigation strategies and",
    "start": "75900",
    "end": "80990"
  },
  {
    "text": "after that of course we're going to come at it from a Red Team perspective and discuss evading detection primarily",
    "start": "80990",
    "end": "86790"
  },
  {
    "text": "focused on sandbox evasion as well as our final demo all right so first and",
    "start": "86790",
    "end": "93210"
  },
  {
    "text": "foremost it's important to talk about office 365 adoption rates first and foremost of course credit goes to sky",
    "start": "93210",
    "end": "99659"
  },
  {
    "text": "high for the data that they collected last year but as you can see for any enterprise it's got more than 100 users",
    "start": "99659",
    "end": "106049"
  },
  {
    "text": "adoption rates are quite high up to 80% in some cases for certain services such",
    "start": "106049",
    "end": "112470"
  },
  {
    "text": "as onedrive and in the case of our specific talk here we're focusing on",
    "start": "112470",
    "end": "117750"
  },
  {
    "text": "those enterprises who have adopted both onedrive as well as share points",
    "start": "117750",
    "end": "124100"
  },
  {
    "text": "so getting into it why it's actually interesting for commanding control as you saw in the last slide the vast",
    "start": "124750",
    "end": "131290"
  },
  {
    "text": "majority of enterprises are alright are already permitting traffic to office 365 hopefully it's all TLS at this point but",
    "start": "131290",
    "end": "139630"
  },
  {
    "text": "if you're going to be using the service you can make a really easy assumption that the network infrastructure and security infrastructure that's in place",
    "start": "139630",
    "end": "145360"
  },
  {
    "text": "today has access to this already and of course we can take advantage of this but",
    "start": "145360",
    "end": "151900"
  },
  {
    "text": "larger enterprises do the volume of their traffic have enrolled in a service called Express route that microsoft",
    "start": "151900",
    "end": "157450"
  },
  {
    "text": "offers and with that service you actually enter into a direct peering agreement with microsoft's between your",
    "start": "157450",
    "end": "163510"
  },
  {
    "text": "premise such as a data center and Azure and you can buy these pipes sorry you",
    "start": "163510",
    "end": "171340"
  },
  {
    "text": "can buy these pipes in significantly large quantities so most fortune 100 s",
    "start": "171340",
    "end": "177130"
  },
  {
    "text": "if you look at it they've at least got a single 10 gig link in to assure at this point if not multiple ones so due to the",
    "start": "177130",
    "end": "185560"
  },
  {
    "text": "aforementioned volume of traffic and generally associated level of trust most enterprises today are not decrypting any",
    "start": "185560",
    "end": "191560"
  },
  {
    "text": "traffic at least from a TLS perspective going to office 365 they may be looking",
    "start": "191560",
    "end": "196660"
  },
  {
    "text": "at email but generally not web traffic's so we can of course take advantage of this another minor advantage of course",
    "start": "196660",
    "end": "203739"
  },
  {
    "text": "of using office 365 is it can be considered an out-of-band method of attack so when you're interacting with your target your target is communicating",
    "start": "203739",
    "end": "210970"
  },
  {
    "text": "with microsoft's IP ranges and not necessarily your own not to say Microsoft isn't monitoring what you're",
    "start": "210970",
    "end": "216340"
  },
  {
    "text": "doing on their service but your target generally will not see what IP are coming from and this is really one of",
    "start": "216340",
    "end": "223390"
  },
  {
    "text": "the focuses of the attack of the the talk rather but when you are mounting as an example a SharePoint drive on a",
    "start": "223390",
    "end": "230739"
  },
  {
    "text": "target which is something you can do and we will get into it on this talk you can do it in a way that's invisible to",
    "start": "230739",
    "end": "237070"
  },
  {
    "text": "almost any service that the user or the admin is running so when you mount one of these drives you can have a remote",
    "start": "237070",
    "end": "242560"
  },
  {
    "text": "filesystem point on your target but it's invisible to File Explorer WMI",
    "start": "242560",
    "end": "248209"
  },
  {
    "text": "and anything built on dotnet frameworks like net use as an example so it's",
    "start": "248209",
    "end": "253340"
  },
  {
    "text": "extremely difficult to even track the usage of these things let alone for a typical end user to identify that hey",
    "start": "253340",
    "end": "259699"
  },
  {
    "text": "I've got this remote drive on my system and of course if you are subscribed to to do B solutions assuming they're even",
    "start": "259699",
    "end": "266360"
  },
  {
    "text": "able to identify that a PowerShell drive has been mounted generally speaking they",
    "start": "266360",
    "end": "271970"
  },
  {
    "text": "don't view network storage as being outside of the enterprise so you're able to transfer things assuming your coming",
    "start": "271970",
    "end": "277490"
  },
  {
    "text": "at this from a data exfiltration use case they generally don't see it as",
    "start": "277490",
    "end": "282710"
  },
  {
    "text": "being an issue whatsoever of course because whom else drives outside of their enterprise that sounds like a bad idea so Microsoft of course saw this",
    "start": "282710",
    "end": "291110"
  },
  {
    "text": "coming so even if you're able to figure out how to mount a remote sharepoint",
    "start": "291110",
    "end": "298099"
  },
  {
    "text": "drive as an example you don't actually get read or write access to that drive so if you want to actually be able to",
    "start": "298099",
    "end": "305240"
  },
  {
    "text": "use that drive you need to figure out a way to fetch a sam'l token from office 365 before mounting that drive and as an",
    "start": "305240",
    "end": "313639"
  },
  {
    "text": "example I've mounted a drive here and I'm simply trying to echo test into a",
    "start": "313639",
    "end": "318740"
  },
  {
    "text": "test file and are presented with an error so I'll read this for the guys in the back but basically all it says is",
    "start": "318740",
    "end": "324349"
  },
  {
    "text": "when you try to write a file you get access denied before opening files in this location you must first add the",
    "start": "324349",
    "end": "329810"
  },
  {
    "text": "website to your trusted sites list browse to the web site and select the option to log in automatically sounds",
    "start": "329810",
    "end": "336560"
  },
  {
    "text": "easy right so this is where PowerShell comes in so fortunately or unfortunately for us",
    "start": "336560",
    "end": "342289"
  },
  {
    "text": "Microsoft has spent a lot of time developing the libraries in PowerShell so that it can interact with and control",
    "start": "342289",
    "end": "348050"
  },
  {
    "text": "Internet Explorer and we can use this of course to load up portal dot office comm",
    "start": "348050",
    "end": "353659"
  },
  {
    "text": "we can avoid any single sign-on technologies of course if a target is already using office 365 generally",
    "start": "353659",
    "end": "360830"
  },
  {
    "text": "speaking when you navigate there you'll be automatically logged into their account which will of course defeat our purpose and then we can enter",
    "start": "360830",
    "end": "367490"
  },
  {
    "text": "credentials click on a few buttons and we can do all of this without launching Internet explorer in a way that the user can see it so if they're staring at",
    "start": "367490",
    "end": "373639"
  },
  {
    "text": "their desktop and you do this nothing pops up so an important part of the talk of course but if anyone can come up with",
    "start": "373639",
    "end": "380090"
  },
  {
    "text": "a legitimate reason for being able to set ie visible to false I will buy them a cookie you can find me after",
    "start": "380090",
    "end": "386470"
  },
  {
    "text": "so face one of course for our first proof of concept is being able to get that sample token since we can't do",
    "start": "386470",
    "end": "392510"
  },
  {
    "text": "anything without its and this is just the site that you are the page that you see when you actually navigate to portal",
    "start": "392510",
    "end": "397610"
  },
  {
    "text": "dot office com you actually get redirected to log in Microsoft online comm and then a very important check box",
    "start": "397610",
    "end": "404420"
  },
  {
    "text": "this was actually what triggers that sam'l token to be pushed is the keep me signed in button of course and we're",
    "start": "404420",
    "end": "410030"
  },
  {
    "text": "using bad guy as our user so it's gonna",
    "start": "410030",
    "end": "415940"
  },
  {
    "text": "take a quick drink this is some again very simple PowerShell we've got clear text credentials of course since again",
    "start": "415940",
    "end": "421460"
  },
  {
    "text": "we're trying to keep things simple we go through initially killing internet explorer so we can manipulate what we",
    "start": "421460",
    "end": "427010"
  },
  {
    "text": "need to online five lines seven through ten is using run DLL thirty-two to simply clean up forms passwords and",
    "start": "427010",
    "end": "434390"
  },
  {
    "text": "cookies which is generally where SSO lives twelve will instantiate ie",
    "start": "434390",
    "end": "439490"
  },
  {
    "text": "thirteen as our lovely set a evil to false which means it's not going to pop",
    "start": "439490",
    "end": "444620"
  },
  {
    "text": "up for the user to see the next couple lines actually navigate to the URL and we sleep while Internet Explorer is",
    "start": "444620",
    "end": "451790"
  },
  {
    "text": "loading it to deal with latency but then thankfully for us we've got the ability to search for specific element IDs",
    "start": "451790",
    "end": "459050"
  },
  {
    "text": "within powershell so we look for specifically our user ID input text our",
    "start": "459050",
    "end": "464150"
  },
  {
    "text": "passwords and then the most important one is keep me signed in as a checkbox we set it to checked and true and then",
    "start": "464150",
    "end": "470840"
  },
  {
    "text": "we actually have to go in and click on the buttons of course so there are is some filler text that you will see",
    "start": "470840",
    "end": "476080"
  },
  {
    "text": "basically sample usernames that you actually have to click on to delete and then we click and click on sign in so",
    "start": "476080",
    "end": "483230"
  },
  {
    "text": "this is our first demo it's a very simple of course and we've set I equal so you guys can follow along with what's",
    "start": "483230",
    "end": "490280"
  },
  {
    "text": "going on but we load things up you can see the sample text here so someone an example you do have to click on that",
    "start": "490280",
    "end": "496670"
  },
  {
    "text": "unfortunately for it to go away but we're just gonna copy paste in the powershell that we were looking at",
    "start": "496670",
    "end": "501770"
  },
  {
    "text": "before we can see IE pops up we delete our cookies and it takes about one to",
    "start": "501770",
    "end": "506900"
  },
  {
    "text": "two seconds for this to happen and we're presented with bad guys sharepoint dr easy enough",
    "start": "506900",
    "end": "513060"
  },
  {
    "text": "so Phase two of what we're trying to do here of course we need to then add",
    "start": "513060",
    "end": "518390"
  },
  {
    "text": "SharePoint into our trusted sites so we can mount the drive and then of course most interestingly is actually matching",
    "start": "518390",
    "end": "524700"
  },
  {
    "text": "the drive itself so again we have to define some credentials to use for our SharePoint Drive and they do need to be",
    "start": "524700",
    "end": "530640"
  },
  {
    "text": "stored as a secure string which is why you see that up there but generic domains are generic credentials I should",
    "start": "530640",
    "end": "536490"
  },
  {
    "text": "say then we actually have to go and add some registry keys so that I recognizes",
    "start": "536490",
    "end": "542040"
  },
  {
    "text": "the place as a trusted site I'm assuming most of you guys know how to do this at this point but basically all it is is",
    "start": "542040",
    "end": "548280"
  },
  {
    "text": "doing you're setting a location you're creating a key and then depending on the OS version so in Windows 10 you'll see",
    "start": "548280",
    "end": "554400"
  },
  {
    "text": "this pop up as red text but you may have to hard-code your sub domain in there in this case bad domain Windows 10 you",
    "start": "554400",
    "end": "561060"
  },
  {
    "text": "don't have to do that of course and then we just add some D words so generally speaking you still only need to add",
    "start": "561060",
    "end": "566220"
  },
  {
    "text": "HTTPS here but we've added HTTP and a wild-card just in case there is some",
    "start": "566220",
    "end": "571380"
  },
  {
    "text": "strange web peroxy downgrading or something else is going on the wire and then of course 16 and 17 are the root of",
    "start": "571380",
    "end": "578640"
  },
  {
    "text": "what we're trying to do here but mounting the drive itself so new PS drive is pretty simple to use and by",
    "start": "578640",
    "end": "583770"
  },
  {
    "text": "default it will mount a temporary drive which disappears after the shell has been closed but it's also harder to",
    "start": "583770",
    "end": "589680"
  },
  {
    "text": "detect of course so for our purposes that's what we're gonna do we specify the name so we've gone with J Drive we",
    "start": "589680",
    "end": "595680"
  },
  {
    "text": "set the provider to be the filesystem of course and we specify the root directory now it's a long string of course but",
    "start": "595680",
    "end": "602160"
  },
  {
    "text": "we've specified eviler - my SharePoint comm and the most important one is SSL of course so it gets encrypted excuse me",
    "start": "602160",
    "end": "609090"
  },
  {
    "text": "and then we specify root personal and then the the full username and domain and we specified documents as the root",
    "start": "609090",
    "end": "615030"
  },
  {
    "text": "directory and then we feed in the credentials it's not too difficult but",
    "start": "615030",
    "end": "620130"
  },
  {
    "text": "we're gonna have another demo here of just going through this quickly and as we mentioned before of course in File",
    "start": "620130",
    "end": "625980"
  },
  {
    "text": "Explorer most users are going to interact just simply by clicking on my computer or my PC depending on the version and they're gonna see devices",
    "start": "625980",
    "end": "632550"
  },
  {
    "text": "and drives pop up first and of course you're gonna see that this is not present so we're just looking to zone map obviously nothing is there right now",
    "start": "632550",
    "end": "640070"
  },
  {
    "text": "I'm gonna show get PS Drive which is a way to actually display PowerShell drives but of course we can see nothing",
    "start": "640070",
    "end": "645540"
  },
  {
    "text": "is mounted at all other than C and D at this point so we're gonna paste in the",
    "start": "645540",
    "end": "651540"
  },
  {
    "text": "powershell that we were looking at before there's the red text e what expects but now we can see that g has",
    "start": "651540",
    "end": "657000"
  },
  {
    "text": "actually been added and we can see the full path there as it's on SharePoint at SSL so we're gonna see D into the drive",
    "start": "657000",
    "end": "664320"
  },
  {
    "text": "and we're gonna validate that we now have write and read access to the directory so nothing's present right now",
    "start": "664320",
    "end": "670339"
  },
  {
    "text": "but we're gonna echo in this is a text into a test file and we're gonna see",
    "start": "670339",
    "end": "676529"
  },
  {
    "text": "that it works so we can see we now have",
    "start": "676529",
    "end": "682680"
  },
  {
    "text": "a a usable Drive thankfully and we can see the full path there if you'd like to look at it and we'll validate that we've",
    "start": "682680",
    "end": "688500"
  },
  {
    "text": "also got read access which isn't necessarily implied but we can just you get content on the file and we see that",
    "start": "688500",
    "end": "693959"
  },
  {
    "text": "this is a test so checking out file explorer again we can see again refreshing it the user sees nothing they",
    "start": "693959",
    "end": "700200"
  },
  {
    "text": "are completely unaware that there's a drive now mounted on their system and of course going back and refreshing we now",
    "start": "700200",
    "end": "705959"
  },
  {
    "text": "see sharepoint with all of our d words that we would expect alright moving on",
    "start": "705959",
    "end": "713490"
  },
  {
    "text": "so phase 3 is actually doing something interesting of course again in the spirit of keeping things simple we're",
    "start": "713490",
    "end": "720180"
  },
  {
    "text": "just simply going through were identifying all files in the users directory where quote-unquote stealing",
    "start": "720180",
    "end": "725220"
  },
  {
    "text": "all of their PDFs recursively within their users directory and then for the c2 portion of things we're going to go",
    "start": "725220",
    "end": "731519"
  },
  {
    "text": "and run some commands so today's commands not txt and most of",
    "start": "731519",
    "end": "736829"
  },
  {
    "text": "you are probably aware this are any of a powershell by default prevents you from",
    "start": "736829",
    "end": "741899"
  },
  {
    "text": "running powershell scripts on a default install of Windows so there's many ways around that specific execution policy",
    "start": "741899",
    "end": "748050"
  },
  {
    "text": "restriction but the simplest and probably my favorite is simply reading in those commands from say a text file",
    "start": "748050",
    "end": "753660"
  },
  {
    "text": "and piping them into PowerShell that's good enough to get around that restriction so I'm gonna have another",
    "start": "753660",
    "end": "760290"
  },
  {
    "text": "simple demo here we can see that we're currently in our sharepoint drive we're",
    "start": "760290",
    "end": "768149"
  },
  {
    "text": "gonna paste in the commands we were talking about earlier and we can see it slowly go through and identify all the",
    "start": "768149",
    "end": "774420"
  },
  {
    "text": "files and identify and upload all PDFs into that sheriff so this is coming at it from the data",
    "start": "774420",
    "end": "780329"
  },
  {
    "text": "exfiltration perspective of course which is most concerning to enterprise customers of course it's not the only",
    "start": "780329",
    "end": "786870"
  },
  {
    "text": "thing you can do but it's an example so we can see we've got current files we've got financial statements etc etc just a",
    "start": "786870",
    "end": "793889"
  },
  {
    "text": "demo and we can see that we've now popped calc and we've loaded up blackhat calm nice and simple so I guess for the",
    "start": "793889",
    "end": "803070"
  },
  {
    "text": "purposes of the talk obviously that's nice but we need to look at it weaponizing it a little bit so we've",
    "start": "803070",
    "end": "810240"
  },
  {
    "text": "gone with something simple again and just gone with a macro enabled Word documents and doing this just using",
    "start": "810240",
    "end": "817649"
  },
  {
    "text": "unicorn so one of my favorite tools of course written by trusted SEC but it's probably the easiest way to take some",
    "start": "817649",
    "end": "823350"
  },
  {
    "text": "raw powershell that you've developed and instantly convert it into something you can paste into vb editor and use as a",
    "start": "823350",
    "end": "829050"
  },
  {
    "text": "macro it's very simple and i'll show you how to do that as you'll see on the next slide at least using this method most",
    "start": "829050",
    "end": "836010"
  },
  {
    "text": "detections for endpoints tools are relatively non-existent and unicorn although it's not overly affected with",
    "start": "836010",
    "end": "842130"
  },
  {
    "text": "sandboxes it does try to evade them by delaying detonation until after the documents been closed so you can try to",
    "start": "842130",
    "end": "849300"
  },
  {
    "text": "remember this hash for later but it starts with C 10 and in F 83 but at the",
    "start": "849300",
    "end": "855180"
  },
  {
    "text": "time of submission our quote unquote totally legitimate document was only detected by 4 out of 58 vendors and it's",
    "start": "855180",
    "end": "862769"
  },
  {
    "text": "likely that the four that did detect it identified a generic string that unicorn",
    "start": "862769",
    "end": "869640"
  },
  {
    "text": "uses as an error message so if they look for that they can usually find unicorn quite easily and again for those who",
    "start": "869640",
    "end": "877320"
  },
  {
    "text": "haven't actually seen the output of what unicorn creates when you generate some powershell or feed a powershell i should",
    "start": "877320",
    "end": "883620"
  },
  {
    "text": "say this is just what it looks like inside of vb editor and you see that generic string down here hopefully yeah",
    "start": "883620",
    "end": "888990"
  },
  {
    "text": "you can see my mouse you've got the document appears to be made on an older version of microsoft please have the creator save to a newer and supported",
    "start": "888990",
    "end": "895350"
  },
  {
    "text": "format so frankly that works on a lot of users of course but you can write easy signatures to look for that string so if",
    "start": "895350",
    "end": "900899"
  },
  {
    "text": "you're going to do this in a real pen test of course probably change it",
    "start": "900899",
    "end": "906980"
  },
  {
    "text": "so this is the final demo for the first proof of concepts we're looking at the",
    "start": "907420",
    "end": "914330"
  },
  {
    "text": "attackers machine of course so this is on share points and we're simply we were",
    "start": "914330",
    "end": "920029"
  },
  {
    "text": "just refreshed it and we're gonna look at today's commands of course this is completely arbitrary we're just poppin calc in this case and",
    "start": "920029",
    "end": "925520"
  },
  {
    "text": "loading up ie but if you're doing this for real you probably look at adding some type of persistence mechanism or",
    "start": "925520",
    "end": "932270"
  },
  {
    "text": "something else that allow you to do this on a recurring basis so looking at our",
    "start": "932270",
    "end": "937339"
  },
  {
    "text": "powershell you'll notice that it's it's called compressed instead of having",
    "start": "937339",
    "end": "942740"
  },
  {
    "text": "every line generator carriage return VBA derp is very particular about how",
    "start": "942740",
    "end": "948320"
  },
  {
    "text": "many carriage returns are present in the file so you can actually compress say a hundred lines of PowerShell like what you see here down into one line simply",
    "start": "948320",
    "end": "955670"
  },
  {
    "text": "by deleting the carriage returns and replacing them with semicolons there is a very low limit when it comes to",
    "start": "955670",
    "end": "962000"
  },
  {
    "text": "carriage returns in most macros so we can see what it looks like and we're just feeding this in a unicorn it's very",
    "start": "962000",
    "end": "968360"
  },
  {
    "text": "simple so basically you just specify that what powershell you'd like to use",
    "start": "968360",
    "end": "973460"
  },
  {
    "text": "you specify that you want to generate a macro and you create your character limit of 500 and that is all you have to",
    "start": "973460",
    "end": "979970"
  },
  {
    "text": "do - now get powershell attack that txt and that is a fully working macro with",
    "start": "979970",
    "end": "986089"
  },
  {
    "text": "whatever powershell you've given it so that's what it looks like it's important to note depending on what application",
    "start": "986089",
    "end": "993290"
  },
  {
    "text": "you're targeting you may have to change the sub-game so in this case by default unicorn adds an underscore between auto",
    "start": "993290",
    "end": "999770"
  },
  {
    "text": "and open this works for excel but it does not work on word you actually have to delete the underscore and make sure",
    "start": "999770",
    "end": "1006130"
  },
  {
    "text": "the macro is named correctly as well it's a little finicky but just so that you're aware alright so moving on so",
    "start": "1006130",
    "end": "1013870"
  },
  {
    "text": "we're we're now looking at corporate drones workstation and we're gonna need to use a bit of our imagination and",
    "start": "1013870",
    "end": "1019750"
  },
  {
    "text": "assume that he's been the target of some type of phishing attack but totally legitimate document has now ended up on",
    "start": "1019750",
    "end": "1025569"
  },
  {
    "text": "his desktop as we can see there and unlike most users more for the purposes",
    "start": "1025569",
    "end": "1031270"
  },
  {
    "text": "of the demo we've got Wireshark running here with a search query specifically looking for SSL handshake extensions",
    "start": "1031270",
    "end": "1037380"
  },
  {
    "text": "for the SNI of portal office.com and this is just a display what your",
    "start": "1037380",
    "end": "1043290"
  },
  {
    "text": "security infrastructure is going to identify on the wire when these attempts are made assuming",
    "start": "1043290",
    "end": "1049170"
  },
  {
    "text": "you're not doing SSL decryption so we'll come back to that in a minute and we're just going to show the hash",
    "start": "1049170",
    "end": "1054780"
  },
  {
    "text": "here so you guys can try to remember or recall what it was in the last slide but it's C 10 F 83 and yes you can do this",
    "start": "1054780",
    "end": "1063180"
  },
  {
    "text": "through PowerShell but this is easier to read at the back anyways moving on so",
    "start": "1063180",
    "end": "1069390"
  },
  {
    "text": "we're gonna actually execute the document and as you would expect word has built-in macro protections so I actually before it goes I lifted this",
    "start": "1069390",
    "end": "1076200"
  },
  {
    "text": "from an actual sample of malware which I guess is the credit to Norton but end-users find this very trustworthy and",
    "start": "1076200",
    "end": "1082500"
  },
  {
    "text": "for those of the back it simply says the documents been secured by Norton to view this protected document click enable",
    "start": "1082500",
    "end": "1087930"
  },
  {
    "text": "content and this type of message works on a very large percentage of end-users unfortunately so just clicking it we see",
    "start": "1087930",
    "end": "1095010"
  },
  {
    "text": "that generic message pop up saying older version of words try to get a new one from your from your sender and pressing",
    "start": "1095010",
    "end": "1105000"
  },
  {
    "text": "ok of course from the users perspective nothing happens it goes blank as you would probably expect but jumping on",
    "start": "1105000",
    "end": "1112230"
  },
  {
    "text": "Wireshark and looking at the wire we see multiple requests to portal office comm and that's all you see so if you are not",
    "start": "1112230",
    "end": "1120960"
  },
  {
    "text": "looking at doing SSL decryption between your enterprise and office that's what you see it's very difficult to identify",
    "start": "1120960",
    "end": "1128820"
  },
  {
    "text": "this as being any type of malicious behavior whatsoever especially if it's being run once moving on of course calc",
    "start": "1128820",
    "end": "1137970"
  },
  {
    "text": "eventually pops as well as blackhat coming up that we can see you moving",
    "start": "1137970",
    "end": "1143070"
  },
  {
    "text": "back to the attackers machine as you would probably expect the files that we looked at before have now been uploaded into SharePoint we can click on the",
    "start": "1143070",
    "end": "1150540"
  },
  {
    "text": "desktop we've got it named appropriately for that specific user going to uploads and we can see once it loads that all of",
    "start": "1150540",
    "end": "1157050"
  },
  {
    "text": "the files that we would expect to be there are now there",
    "start": "1157050",
    "end": "1161210"
  },
  {
    "text": "and it's um it's surprisingly easy to do this as you guys have seen",
    "start": "1163350",
    "end": "1169280"
  },
  {
    "text": "all right so as you would expect just a list but again it's a demo it's a proof-of-concept you guys can use your",
    "start": "1172950",
    "end": "1179220"
  },
  {
    "text": "imagination and think of what an actual pen test or something worse might be conducting here so for the blue teams in",
    "start": "1179220",
    "end": "1188280"
  },
  {
    "text": "the room of course the easiest way of course the CIM at this is from the network side but it",
    "start": "1188280",
    "end": "1193800"
  },
  {
    "text": "does require you to decrypt TLS on the wire which can be of course expensive if",
    "start": "1193800",
    "end": "1200250"
  },
  {
    "text": "you want to look at actually blocking this inline instead of dealing it with it as kind of an incident forensic",
    "start": "1200250",
    "end": "1205770"
  },
  {
    "text": "perspective after the fact you can create custom signatures with most products that identify either your",
    "start": "1205770",
    "end": "1211920"
  },
  {
    "text": "office domain or negate that so that any other domain other than yours gets dropped immediately you can do of course",
    "start": "1211920",
    "end": "1219650"
  },
  {
    "text": "endpoint log forwarding you can pick your product or choice obviously Windows has built-in utilities to do this as well by just creating alert every time",
    "start": "1219650",
    "end": "1226740"
  },
  {
    "text": "new PS drive is used or doing bulk analysis you can reach out through WMI or whatever you'd like and just run get",
    "start": "1226740",
    "end": "1233400"
  },
  {
    "text": "PS drive and look at the outputs of course and see if the sharepoint tries that are mounted and if there are is",
    "start": "1233400",
    "end": "1239370"
  },
  {
    "text": "that ok this is more suggestion for forensics of course but network devices not just",
    "start": "1239370",
    "end": "1245700"
  },
  {
    "text": "firewalls but anything with NetFlow or something that's keeping track of the bike counters on the flow stemcells coin",
    "start": "1245700",
    "end": "1250920"
  },
  {
    "text": "can identify extraneous external uploads of course so in a normal connection you'll see a disproportionate amount of",
    "start": "1250920",
    "end": "1257640"
  },
  {
    "text": "bytes allocated to the server side of course since the client is requesting data but in an external upload of course",
    "start": "1257640",
    "end": "1263790"
  },
  {
    "text": "your client maybe has a ten to one or twenty to one ratio with the amount of traffic it's generating versus the",
    "start": "1263790",
    "end": "1268830"
  },
  {
    "text": "server so they do stand out quite well again for data exfiltration and of",
    "start": "1268830",
    "end": "1274350"
  },
  {
    "text": "course depending on how you're coming into the network itself you can defend against a lot of this using some type of",
    "start": "1274350",
    "end": "1281010"
  },
  {
    "text": "sandbox of course behavioral analysis does work sometimes and of course email is the primary factor that were",
    "start": "1281010",
    "end": "1286710"
  },
  {
    "text": "concerned about here so what about sandbox is we've kind of already touched",
    "start": "1286710",
    "end": "1293190"
  },
  {
    "text": "on this of course but this specific techniques insisted just generic PowerShell detection rates are pretty",
    "start": "1293190",
    "end": "1299310"
  },
  {
    "text": "low especially for static analysis engines and obviously signature-based",
    "start": "1299310",
    "end": "1304340"
  },
  {
    "text": "again we've kind of touched on this as well but sandboxes do not like when you're modifying the registry and interacting",
    "start": "1304340",
    "end": "1309920"
  },
  {
    "text": "with the browser in some way shape or form so what can we do about sandboxes",
    "start": "1309920",
    "end": "1315040"
  },
  {
    "text": "and before we get into this I'll just give you a really quick primer on sandbox evasion at guess so initially it",
    "start": "1315040",
    "end": "1322190"
  },
  {
    "text": "started out there were a couple different camps on how to do this but primarily folks function focused rather",
    "start": "1322190",
    "end": "1328400"
  },
  {
    "text": "on sleep functions so if they're able to out sleep the sandbox of course given",
    "start": "1328400",
    "end": "1333950"
  },
  {
    "text": "that most sand boxes have a hard-coded timer set whether it's 5 minutes 10 minutes they have a limit amount of time to determine that a file is actually",
    "start": "1333950",
    "end": "1340520"
  },
  {
    "text": "malicious or not and of course using sleep is a very simple way to sleep",
    "start": "1340520",
    "end": "1345530"
  },
  {
    "text": "longer than the same box looking at VM detection just generic VM detection",
    "start": "1345530",
    "end": "1350660"
  },
  {
    "text": "system properties how many CPUs you have how much RAM if you're using say paravirtualized storage drivers anything",
    "start": "1350660",
    "end": "1355970"
  },
  {
    "text": "like that that gives away that are the VMS there VMware tools VirtualBox add-ons etc there's many many ways to",
    "start": "1355970",
    "end": "1361970"
  },
  {
    "text": "determine that you're in a VM but as an industry we've overcome almost all of",
    "start": "1361970",
    "end": "1367100"
  },
  {
    "text": "these of course then we get into more complex attackers of course that have",
    "start": "1367100",
    "end": "1372380"
  },
  {
    "text": "started fingerprinting vendor or individual vendor sandboxes of course so it should come as no surprise but if you",
    "start": "1372380",
    "end": "1379790"
  },
  {
    "text": "are building a custom sandbox there is going to be some sort of artifacts from your technology on that OS whether it's",
    "start": "1379790",
    "end": "1386090"
  },
  {
    "text": "dll's kernel hooks specific drivers there's something there that probably",
    "start": "1386090",
    "end": "1391580"
  },
  {
    "text": "gives it away that it's the sandbox but again we can do pretty well especially if we've gone to something like bare",
    "start": "1391580",
    "end": "1397010"
  },
  {
    "text": "metal when we're we're detonating these payloads after that of course this one's",
    "start": "1397010",
    "end": "1404930"
  },
  {
    "text": "still a little hard to overcome from a sandbox perspective but doing generic human behavior analysis within the VM",
    "start": "1404930",
    "end": "1411110"
  },
  {
    "text": "itself is still quite effective just looking for say ensure the user has scrolled through say 50 pages or check",
    "start": "1411110",
    "end": "1419210"
  },
  {
    "text": "the browsing history make sure it goes back 6 months and that they've bookmarked website X is still a pretty",
    "start": "1419210",
    "end": "1424730"
  },
  {
    "text": "effective way to get around sandboxes the last two are more concerning of course what a lot of vendors technology",
    "start": "1424730",
    "end": "1430880"
  },
  {
    "text": "requires a sandbox to be vulnerable to that specific exploit for them to be able to TechEd it's been executed",
    "start": "1430880",
    "end": "1438480"
  },
  {
    "text": "so an intelligent attacker can make an assumption about their target saying hey I know this enterprise this patch",
    "start": "1438480",
    "end": "1443820"
  },
  {
    "text": "management schedule usually takes a 12 months to catch up if I pick an exploit that's 18 months out 18 months old I",
    "start": "1443820",
    "end": "1450210"
  },
  {
    "text": "should say and detonate it or check its vulnerability status rather I can make a",
    "start": "1450210",
    "end": "1456900"
  },
  {
    "text": "reasonable assumption that if it's vulnerable I shouldn't be detonating my payload because I'm probably in a sandbox or some type of honeypot that one's",
    "start": "1456900",
    "end": "1464130"
  },
  {
    "text": "problematic to deal with and arguably the most problematic would to deal with at least as far as I guess a global",
    "start": "1464130",
    "end": "1470040"
  },
  {
    "text": "sandbox issue is just delaying execution through generic routines so the best",
    "start": "1470040",
    "end": "1476400"
  },
  {
    "text": "example here is computing PI to 10 million digits on a slow sandbox that can take days and the sandbox doesn't",
    "start": "1476400",
    "end": "1484380"
  },
  {
    "text": "necessarily view that as malicious especially if you say apply some type of nice level where it's not consuming much",
    "start": "1484380",
    "end": "1490350"
  },
  {
    "text": "CPU if it doesn't detonate until it's computed PI it's very very difficult for sandboxes to identify this type of thing",
    "start": "1490350",
    "end": "1498260"
  },
  {
    "text": "but we're working on it so what else can we do on the probably most effective",
    "start": "1498260",
    "end": "1505140"
  },
  {
    "text": "method that I'm aware of right now is designing malware that places malicious payloads and interesting locations that",
    "start": "1505140",
    "end": "1511020"
  },
  {
    "text": "are likely to be detonated by the end user but they lack the ability to detonate themselves completely so I know",
    "start": "1511020",
    "end": "1518910"
  },
  {
    "text": "that's kind of nebulous but as a specific example as a malware author you can look for recently accessed files",
    "start": "1518910",
    "end": "1524610"
  },
  {
    "text": "such as say the last 10 modified documents and make a reasonable assumption that a user will come back at",
    "start": "1524610",
    "end": "1530400"
  },
  {
    "text": "some points and try to model and whether it's a grocery list the presentation doesn't matter if you embed something",
    "start": "1530400",
    "end": "1536460"
  },
  {
    "text": "into those files you can make us an assumption that it will get triggered eventually and of course the sandbox has",
    "start": "1536460",
    "end": "1542190"
  },
  {
    "text": "a very hard time dealing with this so this is just a quick example on how to find your last top 10 modified documents",
    "start": "1542190",
    "end": "1548370"
  },
  {
    "text": "and then sort them and then of course most usually provide the full path to them so we've got a couple options if",
    "start": "1548370",
    "end": "1557040"
  },
  {
    "text": "we're going to try to do this through a sandbox easy mode is simply outright replacing those files with malware same",
    "start": "1557040",
    "end": "1562230"
  },
  {
    "text": "name same extensions same icon sometimes works but honestly it's it's not that effective hard mode which works quite",
    "start": "1562230",
    "end": "1568950"
  },
  {
    "text": "well but it does require some permissions or at least making some sumption 'he's about the environment before you launched it but it does you",
    "start": "1568950",
    "end": "1575580"
  },
  {
    "text": "are able to inject macros into existing Word documents and then exits and of course the sandbox will not follow up",
    "start": "1575580",
    "end": "1581309"
  },
  {
    "text": "and then detonate that word document it just sees that hey you ended vbscript somewhere that's not really a problem",
    "start": "1581309",
    "end": "1587520"
  },
  {
    "text": "from my perspective or my personal favorite at the moment replacing those files with shortcuts that then point to",
    "start": "1587520",
    "end": "1593940"
  },
  {
    "text": "a malicious second stage in a whitelist of location such as offices trusted",
    "start": "1593940",
    "end": "1599100"
  },
  {
    "text": "locations which override a lot of the generic protections such as macro before",
    "start": "1599100",
    "end": "1605159"
  },
  {
    "text": "your files so instead of getting that and able content pop up it just automatically detonates once it's",
    "start": "1605159",
    "end": "1610230"
  },
  {
    "text": "launched and this is surprisingly easy to do so as you can assume since you're",
    "start": "1610230",
    "end": "1616919"
  },
  {
    "text": "not distributing malicious payloads in your first stage you do have to have some way of downloading that's malicious",
    "start": "1616919",
    "end": "1622590"
  },
  {
    "text": "second stage to the endpoint and the easiest way of course is web clients",
    "start": "1622590",
    "end": "1629370"
  },
  {
    "text": "although as many of you may be aware you'll generally get flagged by an AV vendor because it's just a generic",
    "start": "1629370",
    "end": "1635429"
  },
  {
    "text": "trojan.downloader this is pretty common of course so there are lots of other methods but if you're",
    "start": "1635429",
    "end": "1642059"
  },
  {
    "text": "just if your sole purpose is getting that office 365 Drive mounted because frankly once you have a local mount on a",
    "start": "1642059",
    "end": "1648240"
  },
  {
    "text": "file system your job as a pen tester becomes immediately easier almost infinitely easier because even interact",
    "start": "1648240",
    "end": "1654480"
  },
  {
    "text": "with it using normal user commands instead of fetching and doing other nefarious things but if you need to get",
    "start": "1654480",
    "end": "1661230"
  },
  {
    "text": "that and you don't want to use web client you can use reverse shells and paste it in manually you can do",
    "start": "1661230",
    "end": "1666270"
  },
  {
    "text": "tunneling through ICMP DNS take your pick just get it there somewhere somehow rather and again that's kind of alluded",
    "start": "1666270",
    "end": "1673320"
  },
  {
    "text": "to in the last slide the most effective place to put this assuming or sticking with Microsoft Office documents is to",
    "start": "1673320",
    "end": "1678390"
  },
  {
    "text": "put it into one of the trusted locations they are not protected locations but they are white listed so when again the",
    "start": "1678390",
    "end": "1684360"
  },
  {
    "text": "user opens up that shortcut it's going to link to the malicious file which no longer has any of the traditional",
    "start": "1684360",
    "end": "1689460"
  },
  {
    "text": "protections that work provides you so I know sorry I know I said I would keep it",
    "start": "1689460",
    "end": "1696539"
  },
  {
    "text": "simple and this is a lot of PowerShell on the screen but it's still quite simple so again we're looking at our our",
    "start": "1696539",
    "end": "1702419"
  },
  {
    "text": "top files on the top and we create two arrays one was originally the the normal file so",
    "start": "1702419",
    "end": "1708089"
  },
  {
    "text": "the top ten documents and then we create another array that simply replaces our doc X's with shortcuts so LM case and",
    "start": "1708089",
    "end": "1715259"
  },
  {
    "text": "then we have a simple for loop so for every file in that LNK array we create a",
    "start": "1715259",
    "end": "1720839"
  },
  {
    "text": "new object which is a shortcut of course and we point that to our again totally legitimate document keeping things",
    "start": "1720839",
    "end": "1726899"
  },
  {
    "text": "consistent and that resides in that trusted location which is app data roaming microsoft word startup etc saves",
    "start": "1726899",
    "end": "1734339"
  },
  {
    "text": "it and then it sleeps for one second to ensure that all of the files don't have by I guess similar or identical",
    "start": "1734339",
    "end": "1740219"
  },
  {
    "text": "timestamps and after that on so line 18 down basically it's just fetching the",
    "start": "1740219",
    "end": "1746460"
  },
  {
    "text": "file it is using a web client just to show you a different way of fetching the file but it's still hosted on SharePoint",
    "start": "1746460",
    "end": "1752460"
  },
  {
    "text": "and you excuse me sorry still good I",
    "start": "1752460",
    "end": "1757950"
  },
  {
    "text": "think all right the URL is all there so you can actually generate that URL by doing get link or",
    "start": "1757950",
    "end": "1763889"
  },
  {
    "text": "copy or share through one of the gooeys that you have the only minor modification you have to do is replace",
    "start": "1763889",
    "end": "1770070"
  },
  {
    "text": "guest access with download ASP so generically if you use the normal link it's gonna open up a browser and it's",
    "start": "1770070",
    "end": "1776519"
  },
  {
    "text": "going to navigate to the online portal forward and let you maybe have read access or right depending on where you",
    "start": "1776519",
    "end": "1782369"
  },
  {
    "text": "generates so that's the full link of course web client downloads it and then we make an assumption of course that",
    "start": "1782369",
    "end": "1788429"
  },
  {
    "text": "7-zip is present on the endpoints but we're doing that so that we can have an encrypted payload leas frankly most",
    "start": "1788429",
    "end": "1793950"
  },
  {
    "text": "tools even if they're able to intercept that web client request they don't necessarily alert you if they're unable",
    "start": "1793950",
    "end": "1799589"
  },
  {
    "text": "to extract an encrypted payload so in this case we've got latest forms dot",
    "start": "1799589",
    "end": "1804899"
  },
  {
    "text": "7-zip innocuous sounding and then we basically feed in the password of blackhat 2017 password one two three",
    "start": "1804899",
    "end": "1810929"
  },
  {
    "text": "four five on the line 30 down here and then we extract that into our trusted",
    "start": "1810929",
    "end": "1816570"
  },
  {
    "text": "location and then we clean up and delete the the original files",
    "start": "1816570",
    "end": "1821809"
  },
  {
    "text": "excuse me all right so this is a bit of a prettier demo but this is corporate",
    "start": "1822240",
    "end": "1827889"
  },
  {
    "text": "drone again and he's the subject of a phishing attempt which simply reads hello corporate drone as discussed",
    "start": "1827889",
    "end": "1833740"
  },
  {
    "text": "please find my cover letter attached to the email thank you for your consideration very generic attempt of",
    "start": "1833740",
    "end": "1839289"
  },
  {
    "text": "course and then we've got our original documents on the right hand side we can",
    "start": "1839289",
    "end": "1848590"
  },
  {
    "text": "see the path of course to just see user name documents where you would expect it so corporate Jones maybe learned a few",
    "start": "1848590",
    "end": "1855309"
  },
  {
    "text": "lessons over the last couple months and thanks hey this is pretty suspicious maybe I shouldn't open it so he's gonna run it through defender and then he's",
    "start": "1855309",
    "end": "1861820"
  },
  {
    "text": "gonna try a sandbox did you extract it to his desktop which arguably is kind of",
    "start": "1861820",
    "end": "1867100"
  },
  {
    "text": "dangerous anyways but he's gonna run it through defender and we're assuming lis",
    "start": "1867100",
    "end": "1872590"
  },
  {
    "text": "going to go around it just fine scanning the whole desktop to be certain and",
    "start": "1872590",
    "end": "1878169"
  },
  {
    "text": "defenders not flagging it so he's going to try something else and we're gonna",
    "start": "1878169",
    "end": "1884710"
  },
  {
    "text": "use kuku here and just an immediate shout-out to the cuckoo guys it's a fantastic product really recommend",
    "start": "1884710",
    "end": "1891250"
  },
  {
    "text": "checking it out and if you aren't aware most major commercial sandboxes are actually leveraging cuckoo as well for",
    "start": "1891250",
    "end": "1896620"
  },
  {
    "text": "at least part of their infrastructure it's a very nice easy-to-use tool so here he's saying I'm gonna specify that",
    "start": "1896620",
    "end": "1902980"
  },
  {
    "text": "it's a document and see what happens and for the I guess save one time we've sped",
    "start": "1902980",
    "end": "1909879"
  },
  {
    "text": "this up of course but the report comes out and immediately you can see that the threat level of the file is not",
    "start": "1909879",
    "end": "1915940"
  },
  {
    "text": "considered threatening it's one point eight out of ten it's not a perfect analysis of course but generally",
    "start": "1915940",
    "end": "1922539"
  },
  {
    "text": "speaking anything under four depending on the product you're looking at seven or eight will usually get through anyway",
    "start": "1922539",
    "end": "1929679"
  },
  {
    "text": "so he's gonna go and look you can see screenshots you got a full behavior breakdown but he sees that oh hey it",
    "start": "1929679",
    "end": "1935769"
  },
  {
    "text": "looks like there's a version issue it's the same error we saw with the unicorn from before of course but he's gonna",
    "start": "1935769",
    "end": "1942279"
  },
  {
    "text": "keep looking and he clearly knows enough to be dangerous but he hasn't really learned that launching tower shell I",
    "start": "1942279",
    "end": "1947590"
  },
  {
    "text": "would have word is probably a bad thing but um it's there of course it dropped",
    "start": "1947590",
    "end": "1952600"
  },
  {
    "text": "some files as you would expect but frankly it's not doing anything bad from the sandboxes perspective so he",
    "start": "1952600",
    "end": "1958700"
  },
  {
    "text": "thinks it's okay so he's gonna go and open it and we're gonna see what we probably expect here",
    "start": "1958700",
    "end": "1964700"
  },
  {
    "text": "we enable content it's a macro right it's not interesting and then we press ok and then",
    "start": "1964700",
    "end": "1970340"
  },
  {
    "text": "immediately we see our documents have suddenly transformed from documents into shortcuts and of course they look like",
    "start": "1970340",
    "end": "1976220"
  },
  {
    "text": "doc ends you can change that if you'd like but now they are only a shortcut pointing to that malicious file so you",
    "start": "1976220",
    "end": "1983659"
  },
  {
    "text": "can see when you open the path specifically it's sitting in that app",
    "start": "1983659",
    "end": "1989659"
  },
  {
    "text": "data trusted location so when you go and click on and of course he wants to work on its grocery list you don't actually open a grocery list",
    "start": "1989659",
    "end": "1998150"
  },
  {
    "text": "you go to your malicious file and in this case you've noticed you did not have to click enable contents so it is a",
    "start": "1998150",
    "end": "2003159"
  },
  {
    "text": "very effective way of getting a malicious payload detonated without obviously worrying about the user",
    "start": "2003159",
    "end": "2008559"
  },
  {
    "text": "cooking on things so what is next so",
    "start": "2008559",
    "end": "2013570"
  },
  {
    "text": "this is a lovely proof of concept of course but you can't necessarily take it home obviously if you have a reverse shell you can copy/paste this in or just",
    "start": "2013570",
    "end": "2020200"
  },
  {
    "text": "copy from github that I'll give you links for but having a tool that does this for you would be nice so specifically working with Empire",
    "start": "2020200",
    "end": "2027250"
  },
  {
    "text": "rather excited about it frankly on a office 365 listener module very similar",
    "start": "2027250",
    "end": "2032470"
  },
  {
    "text": "to the module that was just released for Dropbox excited about it we can talk",
    "start": "2032470",
    "end": "2038559"
  },
  {
    "text": "about that after if you'd like after that of course logically Metasploit makes the most sense I'm taking feedback",
    "start": "2038559",
    "end": "2046150"
  },
  {
    "text": "right now on what you guys would think is useful in this case but it's gonna be a generic kind of proof of concept",
    "start": "2046150",
    "end": "2051810"
  },
  {
    "text": "initially and then most importantly just due to the time constraint that we had here we didn't really have time to talk",
    "start": "2051810",
    "end": "2058030"
  },
  {
    "text": "about the api's within office 365 but being able to leverage those within the tools would obviously make a lot of",
    "start": "2058030",
    "end": "2064510"
  },
  {
    "text": "sense right now the api's are somewhat limited when it comes to sharepoint they're almost non-existent but a",
    "start": "2064510",
    "end": "2070750"
  },
  {
    "text": "onedrive does allow you to interact with the file system as well as add and remove files so that that can of course",
    "start": "2070750",
    "end": "2076210"
  },
  {
    "text": "have a lot of value so closing remarks I think I've kind of beat this to death at",
    "start": "2076210",
    "end": "2082960"
  },
  {
    "text": "this point but you need to decrypt your TLS traffic it's unfortunate but it's a real",
    "start": "2082960",
    "end": "2088060"
  },
  {
    "text": "especially if you want to intercept this communication on the wire it's fine to",
    "start": "2088060",
    "end": "2093070"
  },
  {
    "text": "do incident response after but this will actually prevent these types of attacks before they occur so again you can",
    "start": "2093070",
    "end": "2099550"
  },
  {
    "text": "monitor for PS Drive usage or you can deploy signatures if you're decrypting the signatures are quite effective at",
    "start": "2099550",
    "end": "2106240"
  },
  {
    "text": "stopping this of course but it does come with a resource penalty on your network",
    "start": "2106240",
    "end": "2111970"
  },
  {
    "text": "appliances so this is more of a an industry-wide problem I suppose but Sam",
    "start": "2111970",
    "end": "2117520"
  },
  {
    "text": "boxes need to get better only basing your analysis on the first file in the chain not necessarily looking at all",
    "start": "2117520",
    "end": "2124060"
  },
  {
    "text": "files and how they behave is kind of a flawed approach frankly you do need to do secondary or tertiary file analysis",
    "start": "2124060",
    "end": "2130930"
  },
  {
    "text": "to detect this stuff and of course inspiration none of us really work in a",
    "start": "2130930",
    "end": "2136630"
  },
  {
    "text": "bubble here of course but the initial inspiration came out of a talk that George and Dmitriy were doing from",
    "start": "2136630",
    "end": "2141730"
  },
  {
    "text": "CrowdStrike back at RSA in February and they were talking specifically about techniques that bears and pandas were",
    "start": "2141730",
    "end": "2147490"
  },
  {
    "text": "using but for this talk of course this came out of their cozy bear analysis that was using net use and the public",
    "start": "2147490",
    "end": "2154720"
  },
  {
    "text": "version of onedrive so it's a little different of course and it's it's much more easy to block in an enterprise than",
    "start": "2154720",
    "end": "2161710"
  },
  {
    "text": "office 365 but it's a similar approach of course and then of course Kaspersky Labs has a very similar write-up on cozy",
    "start": "2161710",
    "end": "2168220"
  },
  {
    "text": "Duke so as far as references go you guys",
    "start": "2168220",
    "end": "2175510"
  },
  {
    "text": "don't have to write this down the slides will be up later of course but all of the PowerShell that we used here is available and that's it thank you",
    "start": "2175510",
    "end": "2185640"
  },
  {
    "text": "[Applause] [Music]",
    "start": "2185640",
    "end": "2189839"
  }
]