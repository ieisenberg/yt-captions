[
  {
    "text": "hello everyone uh good to see uh so many of you today attending our talk uh we",
    "start": "1920",
    "end": "7759"
  },
  {
    "text": "are very excited to be here at Blackhead and uh to present our research on how we",
    "start": "7759",
    "end": "12800"
  },
  {
    "text": "attacked the boot chain of the uh some Samsung devices from the Galaxy A family",
    "start": "12800",
    "end": "18320"
  },
  {
    "text": "so today we will show you a chain of bugs that allow us to take control over",
    "start": "18320",
    "end": "23519"
  },
  {
    "text": "the device through the USB ports and ultimately to leak uh secrets that are stored in the secure world on the device",
    "start": "23519",
    "end": "30640"
  },
  {
    "text": "and this research started last year at Quarks Lab uh and so yeah today on stage",
    "start": "30640",
    "end": "35680"
  },
  {
    "text": "you have Rafael and myself Maxim but uh we would we want also to thank our colleagues Damian and Gabrielle who",
    "start": "35680",
    "end": "42399"
  },
  {
    "text": "helped us on this project so um last year at recon we presented",
    "start": "42399",
    "end": "48719"
  },
  {
    "text": "this uh research uh we asked ourselves how Android protects the user data through its encryption scheming and uh",
    "start": "48719",
    "end": "56719"
  },
  {
    "text": "for that we built a device called uh the the one you see here Samsung Galaxy A22",
    "start": "56719",
    "end": "62399"
  },
  {
    "text": "and um this device is known to have a boot vulnerability that can be exploited with",
    "start": "62399",
    "end": "68400"
  },
  {
    "text": "an open source tool called MTK client so uh using this tool we were able to bypass the first stage of the seco boots",
    "start": "68400",
    "end": "74720"
  },
  {
    "text": "and from there we patched the the rest of the system so that we could extract all the ingredients required to brute",
    "start": "74720",
    "end": "81200"
  },
  {
    "text": "force the credentials of the user so this is the device I'm talking about as you can see it's a rather cheap",
    "start": "81200",
    "end": "87600"
  },
  {
    "text": "device and uh it is based on a media tech system and chip so it runs Android",
    "start": "87600",
    "end": "92960"
  },
  {
    "text": "but you will also find a mix of uh close closed source components uh from MediaTek and Samsung for example the",
    "start": "92960",
    "end": "99520"
  },
  {
    "text": "Trzon OS here is Stigris which is designed by Samsung and as I said we have this boot vulnerability that we can",
    "start": "99520",
    "end": "106240"
  },
  {
    "text": "exploit using NTK clients and it was quite um quite nice to have it uh in",
    "start": "106240",
    "end": "111840"
  },
  {
    "text": "order to debug the the exploits that we will present today so we we focused on",
    "start": "111840",
    "end": "116960"
  },
  {
    "text": "this device because we had it so all the bugs we will present today works on this device but they also apply to other",
    "start": "116960",
    "end": "122719"
  },
  {
    "text": "devices from the same family of device even some of them for which the the vulnerability in the boot room has been",
    "start": "122719",
    "end": "129720"
  },
  {
    "text": "fixed so before we get to the actual bugs we need a bit of background on how the the secure boot works on MediaTek",
    "start": "129720",
    "end": "136560"
  },
  {
    "text": "system and chips so when the CPU starts it will run a readonly piece of code that is called the boot ROM and it will",
    "start": "136560",
    "end": "143360"
  },
  {
    "text": "run with the highest privileges in the secure world with the EL3 privilege level then the boot will start a second",
    "start": "143360",
    "end": "150720"
  },
  {
    "text": "state bootloader called the preloader uh and the pre-loader will then start the",
    "start": "150720",
    "end": "155840"
  },
  {
    "text": "ARM trusted firmware that is also called the the secure monitor and it is the",
    "start": "155840",
    "end": "161200"
  },
  {
    "text": "piece of software uh that will run with the highest privileges on the device once it's fully booted the preloader",
    "start": "161200",
    "end": "167760"
  },
  {
    "text": "will then stop the uh trzone environment which is Tigris and finally a third stage bootloader called little kernel",
    "start": "167760",
    "end": "174800"
  },
  {
    "text": "here we call it LK so this uh bootloader is in charge of booting Android and it's",
    "start": "174800",
    "end": "180400"
  },
  {
    "text": "actually the component we will look into right now so little K is open source originally",
    "start": "180400",
    "end": "186480"
  },
  {
    "text": "and it's very common in the Android ecosystem as a bootloader and as I said it will um start Android and for that it",
    "start": "186480",
    "end": "193200"
  },
  {
    "text": "will verify the Android images using a feature called Android verified boots which is a standard that you will find",
    "start": "193200",
    "end": "199280"
  },
  {
    "text": "implemented in a similar way in other devices now the little kernel bootloader",
    "start": "199280",
    "end": "204640"
  },
  {
    "text": "we have here is a clusters version that was modified by uh Samsung they added a",
    "start": "204640",
    "end": "209680"
  },
  {
    "text": "couple of features such as Odin which is a recovery protocol that allows to flash partitions through USB uh we also have",
    "start": "209680",
    "end": "216879"
  },
  {
    "text": "the NOx security bit uh it's a way to void the warranty of the device when the bootloader is unlocked so it's security",
    "start": "216879",
    "end": "223280"
  },
  {
    "text": "for Samsung rather than for the the actual user and yeah you have a a bunch of little features like this and one",
    "start": "223280",
    "end": "229280"
  },
  {
    "text": "that was particularly interesting for us is a JPEG parser that is used to show logos on screen uh of the device and",
    "start": "229280",
    "end": "235680"
  },
  {
    "text": "error messages as the one you see here and uh it raised our interest because these JPEGs are placed into a tar",
    "start": "235680",
    "end": "242720"
  },
  {
    "text": "archive that you will find in the upper arm partition and this archive is signed but is never checked at boot so anyone",
    "start": "242720",
    "end": "249280"
  },
  {
    "text": "capable of modifying the uh internal memory of the device can actually change these JPEGs and as we all know passing",
    "start": "249280",
    "end": "255760"
  },
  {
    "text": "JPEGs can be a difficult task here we are citing logo fail research by Banerly they presented it last year uh and they",
    "start": "255760",
    "end": "263199"
  },
  {
    "text": "basically found many vulnerabilities impacting various image parsers and in in many boot chains so it's a good",
    "start": "263199",
    "end": "269280"
  },
  {
    "text": "reminder of that so to target this uh JPEG loader we first need to understand how it is",
    "start": "269280",
    "end": "274960"
  },
  {
    "text": "loaded in little kernel and this is the code responsible for",
    "start": "274960",
    "end": "280120"
  },
  {
    "text": "that so the first part of the code actually allocates a constant size buffer on the hip then we have a",
    "start": "280120",
    "end": "287040"
  },
  {
    "text": "function that we call read JPEG file it's the name we gave but you get the idea this function takes a file name as",
    "start": "287040",
    "end": "293199"
  },
  {
    "text": "a first argument it will look in the archived using this file name and it will read the JPEG and place the content",
    "start": "293199",
    "end": "299199"
  },
  {
    "text": "in the buffer we previously allocated and finally we have this P image function that will pass and render",
    "start": "299199",
    "end": "305520"
  },
  {
    "text": "the JPEG on screen now some of you might wonder why do we have a zero as a third",
    "start": "305520",
    "end": "310600"
  },
  {
    "text": "argument this function and uh the third argument here is supposed to be a",
    "start": "310600",
    "end": "315759"
  },
  {
    "text": "maximum size so when the system before it reads the the file it will look in the tar header for the the size of the",
    "start": "315759",
    "end": "323520"
  },
  {
    "text": "file and it will compare it to the size provided so if it's bigger it will trigger an error and it will stop uh",
    "start": "323520",
    "end": "328800"
  },
  {
    "text": "reading the file unless the size provided is zero which uh in this case",
    "start": "328800",
    "end": "335280"
  },
  {
    "text": "the test is ignored and the file is read anyway so we have a first vulnerability a heap overflow here it was rather quick",
    "start": "335280",
    "end": "342400"
  },
  {
    "text": "and the question we ask ourselves now is is it exploitable so to answer that question",
    "start": "342400",
    "end": "348000"
  },
  {
    "text": "we need to understand a bit how the heap algorithm works in this case it is called mini heap and it relies on a",
    "start": "348000",
    "end": "354479"
  },
  {
    "text": "double link list uh you have three chunks that's all members of this list they all placed in the same memory pool",
    "start": "354479",
    "end": "360960"
  },
  {
    "text": "and they all start with the same header as that you see on the right so uh you have a first pointer pointing to the",
    "start": "360960",
    "end": "366560"
  },
  {
    "text": "next uh the pre the previous uh chunk followed by another pointer pointing to the next chunk followed by the size and",
    "start": "366560",
    "end": "373039"
  },
  {
    "text": "followed by the the actual content of the chunk so if another flow happens we",
    "start": "373039",
    "end": "378160"
  },
  {
    "text": "may overwrite the metadata of uh the header of the next chunk and there is a way to turn another flow into an",
    "start": "378160",
    "end": "384479"
  },
  {
    "text": "arbitrary right and this is uh because how the allocation algorithm works so um",
    "start": "384479",
    "end": "391520"
  },
  {
    "text": "after an allocation a chunk is removed from the free list and to do so the system will dreference the next and pref",
    "start": "391520",
    "end": "397919"
  },
  {
    "text": "pointers of the chunk being allocated in order to access the next and previous",
    "start": "397919",
    "end": "403039"
  },
  {
    "text": "chunks and in turn modify the next and pref pointer so that they point to each other and not to the chunk being",
    "start": "403039",
    "end": "409000"
  },
  {
    "text": "allocated so long story short uh if we control the header of a chunk that is",
    "start": "409000",
    "end": "414240"
  },
  {
    "text": "being allocated we have a write whatware primitive with the only constraint that's both values must be writable",
    "start": "414240",
    "end": "422360"
  },
  {
    "text": "addresses now a few words about the mitigations in kernel as you can see there are not many uh none to we can say",
    "start": "422360",
    "end": "431080"
  },
  {
    "text": "no canaries and more importantly the hip is executable which makes the exploit",
    "start": "431080",
    "end": "436880"
  },
  {
    "text": "strategy rather simple uh we use a primitive to overwrite a pointer that the code will jump to in this case it's",
    "start": "436880",
    "end": "443280"
  },
  {
    "text": "the return address of uh in the stack and we will make it point to um a shell",
    "start": "443280",
    "end": "449280"
  },
  {
    "text": "code that we place in our JPEG buffer so here is a representation of the free",
    "start": "449280",
    "end": "454479"
  },
  {
    "text": "list and in purple you see the JPEG buffer that was just allocated so the system will read the file and it will",
    "start": "454479",
    "end": "460960"
  },
  {
    "text": "fill the buffer with it until it overflows and overwrites the next free chunk and we will replace this next free",
    "start": "460960",
    "end": "468080"
  },
  {
    "text": "chunk with a fake chunk where the next pointer points to the return address in the stack and the pro pointer points to",
    "start": "468080",
    "end": "474080"
  },
  {
    "text": "the shell code uh inside our JPEG buffer and uh so that when the next allocation",
    "start": "474080",
    "end": "479680"
  },
  {
    "text": "happens the system will reference the next pointer of the fake chunk and we'll replace the return address uh with the",
    "start": "479680",
    "end": "486639"
  },
  {
    "text": "one of the shell code so the one that was present in the next in the prev um pointer and when the function returns we",
    "start": "486639",
    "end": "494319"
  },
  {
    "text": "have a shell code being executed so uh we have a first vulnerability here that leads to a code",
    "start": "494319",
    "end": "501280"
  },
  {
    "text": "execution in little kernel uh it's persistent uh it will survive both",
    "start": "501280",
    "end": "506960"
  },
  {
    "text": "reboots and factory reset and this is because uh the the partition containing the JPEGs on is never wiped uh even when",
    "start": "506960",
    "end": "514640"
  },
  {
    "text": "you factory reset the device so uh we we have code execution in little kernel but since little canel",
    "start": "514640",
    "end": "520959"
  },
  {
    "text": "loads Android and with a little bit of work and patching the system the the firmware the cut of the little canel we",
    "start": "520959",
    "end": "528240"
  },
  {
    "text": "can take control over Android so basically we control the full normal world both year one and year",
    "start": "528240",
    "end": "534200"
  },
  {
    "text": "zero regarding the impacts um all the Samsung devices based on MediaTek system",
    "start": "534200",
    "end": "539760"
  },
  {
    "text": "and chips or at least all of those we looked into are vulnerable and which includes the the ones where uh the boot",
    "start": "539760",
    "end": "546720"
  },
  {
    "text": "vulnerability I presented at the beginning has been fixed so that's that's nice we have a code execution in",
    "start": "546720",
    "end": "553120"
  },
  {
    "text": "little kernel but now we need a way to flash the the malicious JPEGs on the on",
    "start": "553120",
    "end": "558480"
  },
  {
    "text": "the flash memory without being already privileged and that is the question we will try to answer now and for that we",
    "start": "558480",
    "end": "564880"
  },
  {
    "text": "will take a look at Odin the recovery protocol that is um implemented by Samsung that allows to flash partition",
    "start": "564880",
    "end": "571120"
  },
  {
    "text": "through USB and it's also implemented in little kernel and we have two uh clients",
    "start": "571120",
    "end": "576240"
  },
  {
    "text": "that are available one that is the official one not super practical and close source and there is an open source",
    "start": "576240",
    "end": "582080"
  },
  {
    "text": "client called AMDL that uh we actually use in our proof of",
    "start": "582080",
    "end": "587440"
  },
  {
    "text": "concept so internally um Odin before flashing an image it will authenticate",
    "start": "588680",
    "end": "594480"
  },
  {
    "text": "it so you need to have a signature as a footer in every images you have an example of a signature here and for that",
    "start": "594480",
    "end": "601920"
  },
  {
    "text": "it will rely on two internal structures the first one being the partition information table that we will call the",
    "start": "601920",
    "end": "607120"
  },
  {
    "text": "bit and the second one being a global structure that a global array that indicates how the partitions should be",
    "start": "607120",
    "end": "614360"
  },
  {
    "text": "authenticated and the pit is actually stored in a fixed address uh in the eMMC",
    "start": "614360",
    "end": "619680"
  },
  {
    "text": "it indicates uh how I mean it gives information about the the partitions you have an example",
    "start": "619680",
    "end": "625760"
  },
  {
    "text": "of entry on the right so you have a couple of fields such as the block counts the name of the partition and so on and it's interesting to note that a",
    "start": "625760",
    "end": "632640"
  },
  {
    "text": "partition not present in the pits cannot be flashed uh through odi the pit can be",
    "start": "632640",
    "end": "638240"
  },
  {
    "text": "updated though but it requires a signed image now regarding the authentication we have this global array that indicates",
    "start": "638240",
    "end": "644800"
  },
  {
    "text": "how an an image should be authenticated and in this case if an image is not",
    "start": "644800",
    "end": "650240"
  },
  {
    "text": "present in this array it will not be authenticated so if we compare the pits and this global array we get a list of",
    "start": "650240",
    "end": "657040"
  },
  {
    "text": "partitions that can be flashed without authentication and this is the list you see here the first thing we we can say",
    "start": "657040",
    "end": "663519"
  },
  {
    "text": "is that up param is not part of this of the images we can flash because it is actually authenticated but there are",
    "start": "663519",
    "end": "669200"
  },
  {
    "text": "other interesting partitions that we can play with and it's the case of PGPT and SGPT they both points to the header of",
    "start": "669200",
    "end": "676240"
  },
  {
    "text": "um the GPT so the GYD partition table and this GPT is similar to the pit in a",
    "start": "676240",
    "end": "682240"
  },
  {
    "text": "sense that it describes the partition so we have quite an interesting primitive here uh without authentication through",
    "start": "682240",
    "end": "688240"
  },
  {
    "text": "the USB cable we can reshape the partition table of this device now a few words about GPT and",
    "start": "688240",
    "end": "695360"
  },
  {
    "text": "PITS because they all doing more or less the same things why why do we need these two uh structures so the pit is actually",
    "start": "695360",
    "end": "701200"
  },
  {
    "text": "used for Samsung features such as Odin and such as the JPEG loading so the upper partition containing the JPEGs is",
    "start": "701200",
    "end": "708320"
  },
  {
    "text": "actually retrieved uh from the pit I mean using the pit so we can't simply mess with it uh through the GPT table",
    "start": "708320",
    "end": "716320"
  },
  {
    "text": "and the GPT table on the other hand is is used the rest of the time for example when loading the Android",
    "start": "716320",
    "end": "721800"
  },
  {
    "text": "images so uh we have a nice primitive but what we can what can we do with it and um first let's take a look at how",
    "start": "721800",
    "end": "728160"
  },
  {
    "text": "the pit is loaded so this piece of code is running when uh this the bootloader",
    "start": "728160",
    "end": "733480"
  },
  {
    "text": "starts and as I said already um the the system will try to retrieve the pit when",
    "start": "733480",
    "end": "739680"
  },
  {
    "text": "it starts from a default address but we also have this routine that is quite interesting um the system will look for",
    "start": "739680",
    "end": "745920"
  },
  {
    "text": "a partition called pit in a partition table and if it exists it will load it from there and what is good for us is",
    "start": "745920",
    "end": "752639"
  },
  {
    "text": "that these two functions relies on the GPT table and we can change the GPT table so uh basically we can add an",
    "start": "752639",
    "end": "758959"
  },
  {
    "text": "entry called PIT and the system should load the pit not from the original location but from the new one so we came",
    "start": "758959",
    "end": "764560"
  },
  {
    "text": "up with the following strategy here you have a representation of the flash memory and you have the GPG and the pits",
    "start": "764560",
    "end": "771440"
  },
  {
    "text": "pointing to more or less the same partitions and the first partition here is called MD5 HDN HDR i'm not sure if",
    "start": "771440",
    "end": "778079"
  },
  {
    "text": "you recall but it's one of those we can flash without authentication so we will replace it with a new apparition that",
    "start": "778079",
    "end": "784399"
  },
  {
    "text": "contains the malicious GPEX the next partition is called VB meta vendor it's also one that we can flash without",
    "start": "784399",
    "end": "790639"
  },
  {
    "text": "authentication and here we will replace it with a new pit that is a copy of the original",
    "start": "790639",
    "end": "796920"
  },
  {
    "text": "one sorry except that we will rename FD5 HDR into a param and we do the other way",
    "start": "796920",
    "end": "803279"
  },
  {
    "text": "around with app param and the final step is uh that we modify the GPT table and",
    "start": "803279",
    "end": "808800"
  },
  {
    "text": "we will rename the pit uh the VBMA vendor partition into",
    "start": "808800",
    "end": "813959"
  },
  {
    "text": "pit such that uh at next boot the new pit is uh taken into account and not the",
    "start": "813959",
    "end": "819839"
  },
  {
    "text": "original one and when the system is asked to load a JPEG it will load it from the new upper partition and it",
    "start": "819839",
    "end": "826000"
  },
  {
    "text": "actually works uh as you see here we we see on the screen dodge showing up it means the exploit worked so yeah so we",
    "start": "826000",
    "end": "832399"
  },
  {
    "text": "have a second vulnerability that is a authentication bypasses Odin that we",
    "start": "832399",
    "end": "838160"
  },
  {
    "text": "allows us to from the USB to flash anything on the eMMC including the JPEGs in the upper partition and similarly to",
    "start": "838160",
    "end": "845440"
  },
  {
    "text": "the previous one this um this vulnerability impacts Samsung devices based on MediaTek system and chips so we",
    "start": "845440",
    "end": "852720"
  },
  {
    "text": "have a little demo um let's try it so we have here a device",
    "start": "852720",
    "end": "861120"
  },
  {
    "text": "that is a Samsung A225F and what I want to show you first",
    "start": "861120",
    "end": "866720"
  },
  {
    "text": "is that I'm connecting to 38B to the device and SU the S2 binary is not there",
    "start": "866720",
    "end": "872639"
  },
  {
    "text": "that's the expected behavior for a standard Android device all",
    "start": "872639",
    "end": "879600"
  },
  {
    "text": "right so what I'm going to do now is that I will shut down the device",
    "start": "881320",
    "end": "887440"
  },
  {
    "text": "uh here I'm unlocking the the the interface but it can be shut down by pressing all the buttons altogether for",
    "start": "887440",
    "end": "893920"
  },
  {
    "text": "a couple of seconds so then I'm booting the device in the Odin",
    "start": "893920",
    "end": "900920"
  },
  {
    "text": "mode and once it's done we are ready",
    "start": "900920",
    "end": "905600"
  },
  {
    "text": "to launch the exploit so basically uh we are going to flash the partitions as I",
    "start": "909399",
    "end": "916519"
  },
  {
    "text": "explained there is a little trick happening right now the device is rebooting again in the download mode and",
    "start": "916519",
    "end": "922000"
  },
  {
    "text": "it's because we want to take control over Android so we are flashing another partition the boot partition that we",
    "start": "922000",
    "end": "927839"
  },
  {
    "text": "modified with magist to get root",
    "start": "927839",
    "end": "931680"
  },
  {
    "text": "privileges so the image quality is a bit poor but I'm not sure if you can recognize the dodge that is showing up",
    "start": "933160",
    "end": "939680"
  },
  {
    "text": "on screen so it's a a good sign it means that probably the exploit worked now we have to wait for the",
    "start": "939680",
    "end": "945920"
  },
  {
    "text": "device to boot to to get the proof and um that's one of the things uh Samsung can improve of this on this device is",
    "start": "945920",
    "end": "952320"
  },
  {
    "text": "the the boot",
    "start": "952320",
    "end": "955120"
  },
  {
    "text": "time okay so normally Rafael is going to uh",
    "start": "958120",
    "end": "964000"
  },
  {
    "text": "tell a joke okay so the device seems to have",
    "start": "964000",
    "end": "970519"
  },
  {
    "text": "booted and I'm connected to ADB can we see yes let's try",
    "start": "970519",
    "end": "977399"
  },
  {
    "text": "oh it works we are [Applause]",
    "start": "977399",
    "end": "986519"
  },
  {
    "text": "root okay so",
    "start": "986519",
    "end": "993639"
  },
  {
    "text": "uh yes okay so to conclude on the first part of this uh presentation we have",
    "start": "993880",
    "end": "999360"
  },
  {
    "text": "shown a chain of two bugs that leads to code execution in little kernel it is persistent and um and yeah it's impacts",
    "start": "999360",
    "end": "1007759"
  },
  {
    "text": "many Samsung devices based on media tech system chips and we can trigger this",
    "start": "1007759",
    "end": "1012880"
  },
  {
    "text": "minerality through USB uh and it will give full control over the normal world so we have full control over Android we",
    "start": "1012880",
    "end": "1019839"
  },
  {
    "text": "are root we can do we can already do many things uh we can read the messages look at the pictures and so on but there",
    "start": "1019839",
    "end": "1025839"
  },
  {
    "text": "are some some secrets that are protected um by Android by design they stored in",
    "start": "1025839",
    "end": "1031120"
  },
  {
    "text": "the secure world and we still don't have access to these uh secrets so I'm going to let Rafael tell you how to retrieve",
    "start": "1031120",
    "end": "1037520"
  },
  {
    "text": "the secrets that are suff thank you",
    "start": "1037520",
    "end": "1043039"
  },
  {
    "text": "Max all right so now that we have full control over the normal world with both",
    "start": "1043400",
    "end": "1049440"
  },
  {
    "text": "uh little kernel and Android being compromised we are ready to step into the secure world and our next target to",
    "start": "1049440",
    "end": "1056799"
  },
  {
    "text": "do that will be the arm trust in firmware or ATF so what is ATF atf is the secure",
    "start": "1056799",
    "end": "1065039"
  },
  {
    "text": "monitor used to comm um to reach the secure world from the normal world so as you can see on this picture it stands",
    "start": "1065039",
    "end": "1071360"
  },
  {
    "text": "right in the middle um when you are in a let's say a regular Android application",
    "start": "1071360",
    "end": "1077520"
  },
  {
    "text": "and that you want to use um the secure world to perform maybe crypto uh",
    "start": "1077520",
    "end": "1083280"
  },
  {
    "text": "operations uh you ask for ATF to um transfer your request to the secure",
    "start": "1083280",
    "end": "1089840"
  },
  {
    "text": "world and to do that we use a special ARM instruction called SMC um which",
    "start": "1089840",
    "end": "1096880"
  },
  {
    "text": "stands for secure monitor call and what this instruction does is that it",
    "start": "1096880",
    "end": "1103080"
  },
  {
    "text": "triggers an what this instruction does is that it triggers an exception handled by the EL3 monitor which is ATF in our",
    "start": "1103080",
    "end": "1110640"
  },
  {
    "text": "case then the monitor decides what to do based on the ID of the SMC and also the",
    "start": "1110640",
    "end": "1116640"
  },
  {
    "text": "parameters that are passed um through the registers so why do vulnerability",
    "start": "1116640",
    "end": "1124320"
  },
  {
    "text": "research on ATF well as you have seen before it runs in EL3 which is the",
    "start": "1124320",
    "end": "1130400"
  },
  {
    "text": "highest privilege level on the device so finding a bug here can definitely be",
    "start": "1130400",
    "end": "1135559"
  },
  {
    "text": "devastating we can reach it from normal world through the SMC's we need to have kernel access but we were roots on the",
    "start": "1135559",
    "end": "1142559"
  },
  {
    "text": "device so that's not a problem the code is fairly simple so reversing u is going",
    "start": "1142559",
    "end": "1148400"
  },
  {
    "text": "to be simple yes uh however it interacts a lot with hardware through um unknown",
    "start": "1148400",
    "end": "1154799"
  },
  {
    "text": "registers so maybe doing fuzzing might not be the right idea as we won't be",
    "start": "1154799",
    "end": "1160799"
  },
  {
    "text": "able to properly emulate uh these behaviors so we will just focus on",
    "start": "1160799",
    "end": "1166720"
  },
  {
    "text": "static analysis for now so the first step is extracting ATF",
    "start": "1166720",
    "end": "1173360"
  },
  {
    "text": "so inside a regular Android ROM image you have several partitions and one of",
    "start": "1173360",
    "end": "1179200"
  },
  {
    "text": "them is named TE verified.g it contains a lot of interesting things such as the chigris",
    "start": "1179200",
    "end": "1185760"
  },
  {
    "text": "kernel but also the ATF which is what we want so if we open this file using an",
    "start": "1185760",
    "end": "1191600"
  },
  {
    "text": "hex editor this is what we get so the way this file is structured it is uh it",
    "start": "1191600",
    "end": "1197520"
  },
  {
    "text": "has um several entries and each entry has its own header so at offset zero you",
    "start": "1197520",
    "end": "1204480"
  },
  {
    "text": "have the first header of the first entry in red you have a magic bite in green",
    "start": "1204480",
    "end": "1209760"
  },
  {
    "text": "you have the size of the entry and in blue you have the name of the entry and as you can see the first entry uh at",
    "start": "1209760",
    "end": "1217440"
  },
  {
    "text": "offset zero is ATF so we are lucky we won't have to search for it um the",
    "start": "1217440",
    "end": "1222640"
  },
  {
    "text": "header is 0x 200 byt long so we just skip to this offset and highlighted in",
    "start": "1222640",
    "end": "1228480"
  },
  {
    "text": "purple you can see the magic string mtk but in reverse this is the start of ATF",
    "start": "1228480",
    "end": "1234880"
  },
  {
    "text": "so we have the offset and we have the size we can extract it and load it into our favorite",
    "start": "1234880",
    "end": "1241600"
  },
  {
    "text": "disassembler or in this case the compiler and look for the different SMC",
    "start": "1241600",
    "end": "1247360"
  },
  {
    "text": "handlers so here we have two handlers one for the secure world and one for the",
    "start": "1247360",
    "end": "1253280"
  },
  {
    "text": "normal world the second one um this is uh what we are going to dive",
    "start": "1253280",
    "end": "1258840"
  },
  {
    "text": "into as you can see here are the arguments of the SMC they directly come",
    "start": "1258840",
    "end": "1264799"
  },
  {
    "text": "from the normal world so we control them the first one is the SMC ID and uh then",
    "start": "1264799",
    "end": "1271039"
  },
  {
    "text": "the rest is uh depending on the SMC um one interesting SMC that we found",
    "start": "1271039",
    "end": "1279280"
  },
  {
    "text": "was this one as you can see uh it uses a global array which is initialized uh to",
    "start": "1279280",
    "end": "1285919"
  },
  {
    "text": "a hard-coded memory address and then uh we retrieve um in the out value uh",
    "start": "1285919",
    "end": "1293960"
  },
  {
    "text": "variable uh a value from this global array using the first argument that we",
    "start": "1293960",
    "end": "1299840"
  },
  {
    "text": "control because it comes from the normal world the problem here is that we never check this argument so it can be",
    "start": "1299840",
    "end": "1307600"
  },
  {
    "text": "whatever index that we want so basically this is an out of bound read bug and we",
    "start": "1307600",
    "end": "1312799"
  },
  {
    "text": "are able to read any address uh that we want in ATF",
    "start": "1312799",
    "end": "1318799"
  },
  {
    "text": "so we are able to leak four bytes from the ATF virtual address space uh which",
    "start": "1318799",
    "end": "1324480"
  },
  {
    "text": "means that we can dump all ATF data but we can't leak anything from uh other",
    "start": "1324480",
    "end": "1330400"
  },
  {
    "text": "software components such as um chris for example ored applications so at this",
    "start": "1330400",
    "end": "1336080"
  },
  {
    "text": "point uh it could be really great if we could map any address we want",
    "start": "1336080",
    "end": "1341240"
  },
  {
    "text": "right so let's for let's search for a mean to do that a second SMC that we",
    "start": "1341240",
    "end": "1347840"
  },
  {
    "text": "found interesting is this one it calls a function that we named SPM actions we don't really know what it does but as",
    "start": "1347840",
    "end": "1354559"
  },
  {
    "text": "you can see eventually we reach an M map function so this looks interesting right",
    "start": "1354559",
    "end": "1361280"
  },
  {
    "text": "we could maybe use it to map uh a memory range from the secure world um so to",
    "start": "1361280",
    "end": "1369280"
  },
  {
    "text": "reach this uh function we need to set um the command id to one which is not",
    "start": "1369280",
    "end": "1375120"
  },
  {
    "text": "difficult we need to have a size less than 1 megabytes we can do that and the",
    "start": "1375120",
    "end": "1381520"
  },
  {
    "text": "last parameter uh is the address and once again we have no checks whatsoever",
    "start": "1381520",
    "end": "1387600"
  },
  {
    "text": "on this parameter so this means that we are able to m map any address that we",
    "start": "1387600",
    "end": "1392799"
  },
  {
    "text": "want and if we further dive in the m map wrap function we discover that it is",
    "start": "1392799",
    "end": "1400000"
  },
  {
    "text": "actually a physical address so thanks to this bug we are now a able to",
    "start": "1400000",
    "end": "1407679"
  },
  {
    "text": "uh map any physical address into the ATF virtual virtual address space and if we",
    "start": "1407679",
    "end": "1414240"
  },
  {
    "text": "combine this to our bug um the leak bug we are um able to leak anything from the",
    "start": "1414240",
    "end": "1421679"
  },
  {
    "text": "secure world including the chris kernel including um trusted applications the",
    "start": "1421679",
    "end": "1428240"
  },
  {
    "text": "only limit to this is that we are um limited to eight consecutive end maps if",
    "start": "1428240",
    "end": "1433280"
  },
  {
    "text": "we do let's say nine uh the device crashes so this means that because one m",
    "start": "1433280",
    "end": "1438720"
  },
  {
    "text": "map is one megabyte um of uh one megaby",
    "start": "1438720",
    "end": "1444320"
  },
  {
    "text": "of memory we are able to leak up to 8 megabytes of data but we will see that",
    "start": "1444320",
    "end": "1449520"
  },
  {
    "text": "it's more than enough for what we are going to do so the important question here is can",
    "start": "1449520",
    "end": "1456320"
  },
  {
    "text": "we use this vulnerability to leak key store keys for example um first we need to understand",
    "start": "1456320",
    "end": "1462080"
  },
  {
    "text": "what is the Android key store system uh this system is used is used for key",
    "start": "1462080",
    "end": "1468000"
  },
  {
    "text": "storage and provide crypto services to the normal world the keys are stored um",
    "start": "1468000",
    "end": "1473120"
  },
  {
    "text": "as encrypted key blobs inside the Android file system uh so Android has no",
    "start": "1473120",
    "end": "1479760"
  },
  {
    "text": "mean to um uh process the raw key material only the secure world is able",
    "start": "1479760",
    "end": "1485520"
  },
  {
    "text": "to decrypt this um there are three protection levels and the one that is",
    "start": "1485520",
    "end": "1490960"
  },
  {
    "text": "interesting for us is the TE one which is also the default one and yeah raw key",
    "start": "1490960",
    "end": "1496480"
  },
  {
    "text": "material should never leave the protected environment provided by uh the trust",
    "start": "1496480",
    "end": "1501640"
  },
  {
    "text": "zone so those are the different steps that are performed under the hood um",
    "start": "1501640",
    "end": "1507360"
  },
  {
    "text": "first from the normal world we send a begin operation request um including our",
    "start": "1507360",
    "end": "1513600"
  },
  {
    "text": "key blob then uh in the secure world uh here it's the key master trusted",
    "start": "1513600",
    "end": "1519120"
  },
  {
    "text": "application in charge it will be able to decrypt this key blob and extract the",
    "start": "1519120",
    "end": "1524159"
  },
  {
    "text": "raw key into secure memory and then we are able um to send several update",
    "start": "1524159",
    "end": "1531159"
  },
  {
    "text": "operation so let's say um for example choose the algorithm um the different",
    "start": "1531159",
    "end": "1537600"
  },
  {
    "text": "options and so on um here we need the key to be in memory",
    "start": "1537600",
    "end": "1544559"
  },
  {
    "text": "so um this is very important because if we are to use our bugs we need to to use",
    "start": "1544559",
    "end": "1552960"
  },
  {
    "text": "them only after the beginning operation to be sure that the key is still in memory after that uh the trust",
    "start": "1552960",
    "end": "1560159"
  },
  {
    "text": "application returns the output and then the key is flushed from memory so our proof of concept will be",
    "start": "1560159",
    "end": "1567279"
  },
  {
    "text": "simple we will uh import a key into the Android key store then we will encrypt",
    "start": "1567279",
    "end": "1572640"
  },
  {
    "text": "something using using that key then we stop the execution after the begin",
    "start": "1572640",
    "end": "1578159"
  },
  {
    "text": "operation is called and the key is uh in secure memory and we use our bugs our",
    "start": "1578159",
    "end": "1584320"
  },
  {
    "text": "two bugs to uh lick the uh right region of memory then because we will have a 8",
    "start": "1584320",
    "end": "1591440"
  },
  {
    "text": "megabytes uh dump of data we try all possible keys to um decrypt the cipher",
    "start": "1591440",
    "end": "1598120"
  },
  {
    "text": "text so here is a little demo so to do um this demo we are going to use a tool",
    "start": "1598120",
    "end": "1605760"
  },
  {
    "text": "called Freda uh Freda will uh allow us to hook functions into the normal world",
    "start": "1605760",
    "end": "1613120"
  },
  {
    "text": "to halt the execution and when the execution is halt",
    "start": "1613120",
    "end": "1618559"
  },
  {
    "text": "is stopped after the begin operation um we will have a script that will trigger",
    "start": "1618559",
    "end": "1624240"
  },
  {
    "text": "our bugs to leak the secure world memory and hopefully the key will be in our",
    "start": "1624240",
    "end": "1632960"
  },
  {
    "text": "dump of data we also watch for the lo cut logs because our demo applications",
    "start": "1632960",
    "end": "1639760"
  },
  {
    "text": "will send us um the encrypted cipher text inside",
    "start": "1639760",
    "end": "1645600"
  },
  {
    "text": "it all right so we will uh send the quarks lab string",
    "start": "1647880",
    "end": "1654720"
  },
  {
    "text": "to be encrypted into the secure world as you can see our script on the on the left",
    "start": "1654720",
    "end": "1660919"
  },
  {
    "text": "oh has uh is dumping the secure world memory because uh it uh the begin",
    "start": "1660919",
    "end": "1668080"
  },
  {
    "text": "operation function has been triggered in Freda so this can take a bit of time",
    "start": "1668080",
    "end": "1673840"
  },
  {
    "text": "because we are only able to leak four bytes of data so basically what we're",
    "start": "1673840",
    "end": "1679200"
  },
  {
    "text": "doing here is uh we are um dumping four bytes at a time by",
    "start": "1679200",
    "end": "1685360"
  },
  {
    "text": "sending multiple SMC all right so as you can see in the",
    "start": "1685360",
    "end": "1692480"
  },
  {
    "text": "lab we have our cipher text which is the quark slab string encrypted and we have the dump of data",
    "start": "1692480",
    "end": "1699760"
  },
  {
    "text": "in the file named leak key one so now we are uh going to be able to try every",
    "start": "1699760",
    "end": "1708159"
  },
  {
    "text": "possible key inside the lick one leak key1 file dump and hopefully we will",
    "start": "1708159",
    "end": "1714159"
  },
  {
    "text": "find the key that is able to decipher uh our encrypted",
    "start": "1714159",
    "end": "1720240"
  },
  {
    "text": "text so of course we could we could have um packed every um steps into one",
    "start": "1720360",
    "end": "1728880"
  },
  {
    "text": "application or one script but for the purpose of this demo um it is better to",
    "start": "1728880",
    "end": "1735360"
  },
  {
    "text": "do um um the different steps to to be able to to see how it",
    "start": "1735360",
    "end": "1746799"
  },
  {
    "text": "works so we we will try to find the key now it can take a a bit of",
    "start": "1747480",
    "end": "1754919"
  },
  {
    "text": "time and we found the key so here for demonstration purpose this uh we",
    "start": "1754919",
    "end": "1761440"
  },
  {
    "text": "imported the key only made of A's but uh if we generated a key uh it would have",
    "start": "1761440",
    "end": "1768159"
  },
  {
    "text": "worked also",
    "start": "1768159",
    "end": "1771640"
  },
  {
    "text": "thank you all right um so what's next um actually",
    "start": "1776799",
    "end": "1784080"
  },
  {
    "text": "it could be the end of this presentation and it was the end of what we presented at uh Offensive Con a couple of months",
    "start": "1784080",
    "end": "1791120"
  },
  {
    "text": "ago uh but we received interesting questions and one of them was what about the key test station so the key test",
    "start": "1791120",
    "end": "1798240"
  },
  {
    "text": "stationation in Android relies on the Android key store and it proves that a keeper is stored in the secure hardware",
    "start": "1798240",
    "end": "1804880"
  },
  {
    "text": "either the trust zone or a security chip and along with that proof comes a bunch of informations regarding the device",
    "start": "1804880",
    "end": "1811120"
  },
  {
    "text": "such as uh the status of the bootloader is it locked or not uh the status of the",
    "start": "1811120",
    "end": "1816159"
  },
  {
    "text": "the boot state is it verified correctly uh you have a bunch of ids such as the EMEI and so on and the this key",
    "start": "1816159",
    "end": "1823840"
  },
  {
    "text": "attestation is used by safety net uh and other frameworks that are similar to safety net so safety net is the one made",
    "start": "1823840",
    "end": "1830240"
  },
  {
    "text": "by Google uh and it's used to tell if a device has been compromised for example if you have a",
    "start": "1830240",
    "end": "1836720"
  },
  {
    "text": "bank application uh the developers of this application may not want it to run on rooted device because it can be",
    "start": "1836720",
    "end": "1843200"
  },
  {
    "text": "debugged instrumented or whatever so they may use this mechanism for detecting uh if the the environment is",
    "start": "1843200",
    "end": "1849919"
  },
  {
    "text": "compromised and decide not to run if it's the case so we didn't know much about the key attestation and uh for the",
    "start": "1849919",
    "end": "1857440"
  },
  {
    "text": "sake of this research we took an open source application that will generate the attestation on the device and will",
    "start": "1857440",
    "end": "1864320"
  },
  {
    "text": "pass the results to make sure it's done correctly and the first thing we notice is that everything seems fine the",
    "start": "1864320",
    "end": "1870960"
  },
  {
    "text": "exploit seems not to be detected so we tried again with another app that is also open source and can be found on",
    "start": "1870960",
    "end": "1877039"
  },
  {
    "text": "GitHub uh this time it relies on safety net and here what we see is that it",
    "start": "1877039",
    "end": "1882559"
  },
  {
    "text": "fails basically detects that the environment is compromised so safety net is a research topic on its own there are",
    "start": "1882559",
    "end": "1888960"
  },
  {
    "text": "too many things to to say regarding safety net so it's not something we will cover today uh but it is known that it",
    "start": "1888960",
    "end": "1895520"
  },
  {
    "text": "has uristics uh to detect uh some famous rooting frameworks such as magisk which",
    "start": "1895520",
    "end": "1901919"
  },
  {
    "text": "we used in our exploits so it's maybe the things that were detected here but it's still unclear precisely what was",
    "start": "1901919",
    "end": "1908799"
  },
  {
    "text": "detected so if we come back to the K station uh under the hood it relies on um a",
    "start": "1908799",
    "end": "1916320"
  },
  {
    "text": "certificate chain and at the bottom you see there is a root certificate that is self-signed and this uh the private key",
    "start": "1916320",
    "end": "1922640"
  },
  {
    "text": "corresponding to this root certificate is owned by Google and the other certificates part of this chain uh have",
    "start": "1922640",
    "end": "1928640"
  },
  {
    "text": "their private key stored on the device inside the key store now we have uh the first key here is the",
    "start": "1928640",
    "end": "1935760"
  },
  {
    "text": "GAK for Google authenticated key and it's actually the same across many different devices at least all the",
    "start": "1935760",
    "end": "1941600"
  },
  {
    "text": "Samsung A225F uh we looked in two devices but uh we believe that it's",
    "start": "1941600",
    "end": "1947360"
  },
  {
    "text": "going to be the same or across all these devices um so they're sharing the same key basically then in in orange you have",
    "start": "1947360",
    "end": "1954159"
  },
  {
    "text": "the Android key which is unique per device and finally the application key that is generated uh along with the",
    "start": "1954159",
    "end": "1961480"
  },
  {
    "text": "attestation and as I said that you have a bunch of um um information that comes",
    "start": "1961480",
    "end": "1967840"
  },
  {
    "text": "with uh this this satistation um that indic basically um uh unique per device",
    "start": "1967840",
    "end": "1976000"
  },
  {
    "text": "i mean they represent the device for example you have the the version of the OS and you have couple of fields i'm not",
    "start": "1976000",
    "end": "1981919"
  },
  {
    "text": "sure you can read from here but you have the hash of the boot partition this might be one of the things safety net",
    "start": "1981919",
    "end": "1988399"
  },
  {
    "text": "detected uh because we modified the boot partition so the hash may have sh may have changed so the one thing that could",
    "start": "1988399",
    "end": "1997600"
  },
  {
    "text": "be nice is to be able to generate attestations but decide I mean from the attacker point of view uh but decide",
    "start": "1997600",
    "end": "2003760"
  },
  {
    "text": "what to put inside these fields and we if we were able to leak one of the private keys involved in this",
    "start": "2003760",
    "end": "2009679"
  },
  {
    "text": "certificate chain we might be able to generate validations and decide what to put inside uh and the key that makes",
    "start": "2009679",
    "end": "2016960"
  },
  {
    "text": "most sense for that is the GAK because it is the same key shared across different devices so if you leak it once",
    "start": "2016960",
    "end": "2024320"
  },
  {
    "text": "you can produce validated stations for many different devices so so we looked into uh this key and uh",
    "start": "2024320",
    "end": "2032240"
  },
  {
    "text": "we discovered that it is stored in the Android file system uh in the e key format so it's basically the standard",
    "start": "2032240",
    "end": "2038799"
  },
  {
    "text": "format for keys that are stored in the key store and it's the same format as any other keys and same as the the keys",
    "start": "2038799",
    "end": "2044960"
  },
  {
    "text": "that uh we leaked with uh the proof of concept that Rafael showed you so we came up with a strategy that is more or",
    "start": "2044960",
    "end": "2052000"
  },
  {
    "text": "less the same as the previous one the idea is to forge a valid beginning request with this key uh then we send it",
    "start": "2052000",
    "end": "2057760"
  },
  {
    "text": "to the secure world we stop the execution and from there we use the vulnerabilities to leak the memory and",
    "start": "2057760",
    "end": "2063679"
  },
  {
    "text": "finally uh from the dump we try all the possible private keys uh and this time",
    "start": "2063679",
    "end": "2069679"
  },
  {
    "text": "we don't use encryption or or signature we try to generate the public key out of it simply because it's faster it's a",
    "start": "2069679",
    "end": "2076358"
  },
  {
    "text": "multiplication but this is a theory and it's still work in progress sadly",
    "start": "2076359",
    "end": "2081919"
  },
  {
    "text": "because we are still stuck in step one it requires more uh revers engineering at the moment to better understand how",
    "start": "2081919",
    "end": "2088158"
  },
  {
    "text": "to forge this uh begin request that is at least a begin request that is valid so it's not a failure it's the",
    "start": "2088159",
    "end": "2094398"
  },
  {
    "text": "unfinished business right all right so um that was the last",
    "start": "2094399",
    "end": "2100560"
  },
  {
    "text": "thing uh we wanted to share with you uh regarding this presentation so now a few takeaways uh so we presented a chain of",
    "start": "2100560",
    "end": "2107280"
  },
  {
    "text": "four vulnerabilities that led to authentication bypass in Odin thanks to that we can from the USB uh cable",
    "start": "2107280",
    "end": "2114079"
  },
  {
    "text": "trigger another vulnerability a code execution uh in little kernel with",
    "start": "2114079",
    "end": "2119160"
  },
  {
    "text": "persistency and we have shown that uh using the other vulnerabilities we can leak the memory from the secure world",
    "start": "2119160",
    "end": "2125359"
  },
  {
    "text": "which include the key store keys and yes it's still unclear if we can leak the attestation keys at the moment now",
    "start": "2125359",
    "end": "2131520"
  },
  {
    "text": "regarding the impact all the Samsung devices based on Mediateex so seems to be vulnerable um so mainly low and",
    "start": "2131520",
    "end": "2137680"
  },
  {
    "text": "middleand devices and we have seen the vulnerability quite simple they could have been easily spotted uh through code",
    "start": "2137680",
    "end": "2144480"
  },
  {
    "text": "reviews and maybe fuzzing uh for some of them uh but yet they are very impactful and this is also probably because of the",
    "start": "2144480",
    "end": "2151680"
  },
  {
    "text": "lack of mitigation in little kernel and ATF so we reported all these vulnerabilities to Samsung and they all",
    "start": "2151680",
    "end": "2158320"
  },
  {
    "text": "fixed today and we would like to thanks uh to thank Samsung security team for how they handled the the reports we sent",
    "start": "2158320",
    "end": "2166160"
  },
  {
    "text": "and they they made it so they worked quickly so that we could disclose the vulnerabilities in conferences such as",
    "start": "2166160",
    "end": "2172640"
  },
  {
    "text": "this one so thanks to them and thanks to you for listening to our presentation",
    "start": "2172640",
    "end": "2177680"
  },
  {
    "text": "and um I'm not sure we have two minutes for questions so if you have some please step",
    "start": "2177680",
    "end": "2184800"
  },
  {
    "text": "forward yeah there should be a microphones",
    "start": "2188359",
    "end": "2193880"
  },
  {
    "text": "just over there yeah",
    "start": "2197359",
    "end": "2201078"
  },
  {
    "text": "can you hear me yeah hi yes yeah thanks for your presentation uh I saw the conclusion is uh only affect the low and",
    "start": "2204079",
    "end": "2211520"
  },
  {
    "text": "middle level of the uh phone how about the premium",
    "start": "2211520",
    "end": "2218119"
  },
  {
    "text": "um well these bugs only applies to phones based on MediaTek system on chips",
    "start": "2218280",
    "end": "2224000"
  },
  {
    "text": "so I'm not sure they premium phones based on this system and chips so maybe that's a topic for another research i",
    "start": "2224000",
    "end": "2231839"
  },
  {
    "text": "would be happy to show more bugs on premium phones next time maybe okay so",
    "start": "2231839",
    "end": "2237200"
  },
  {
    "text": "the due to this only happened to the middle tech uh say right the problem",
    "start": "2237200",
    "end": "2244160"
  },
  {
    "text": "yeah yeah and they also patched fixed the problem and they all fixed yeah you",
    "start": "2244160",
    "end": "2250720"
  },
  {
    "text": "should update the the firmware thank you hi all thanks for the",
    "start": "2250720",
    "end": "2255839"
  },
  {
    "text": "presentation was a blast uh does Media Tech planning on releasing uh like",
    "start": "2255839",
    "end": "2260880"
  },
  {
    "text": "mitigations you said like there weren't any mitigation active and so will they",
    "start": "2260880",
    "end": "2266240"
  },
  {
    "text": "install any mitigations at all on all of those sorry I didn't get it maybe can",
    "start": "2266240",
    "end": "2271839"
  },
  {
    "text": "you step a bit can you speak closer to the mic yeah okay can you hear me now okay uh are media attack planning on",
    "start": "2271839",
    "end": "2278960"
  },
  {
    "text": "releasing mitigations like ACLR then all kind of stuff that's something they will",
    "start": "2278960",
    "end": "2284079"
  },
  {
    "text": "do in the future so it's hard to speak in their names uh I think it's that's",
    "start": "2284079",
    "end": "2290400"
  },
  {
    "text": "something I would expect maybe but I don't know for this this device i think it's already implemented in some highend",
    "start": "2290400",
    "end": "2296960"
  },
  {
    "text": "devices for example so",
    "start": "2296960",
    "end": "2300560"
  },
  {
    "text": "yeah okay well I think uh that's it thank you everyone [Applause]",
    "start": "2303640",
    "end": "2313289"
  }
]