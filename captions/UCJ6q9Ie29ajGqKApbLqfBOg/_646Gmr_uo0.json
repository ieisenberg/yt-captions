[
  {
    "start": "0",
    "end": "105000"
  },
  {
    "text": "good morning everyone I'm here to introduce Rafal vek he's given the talk",
    "start": "120",
    "end": "5400"
  },
  {
    "text": "on analysis of the attack surface of Windows 10 virtualization based security you are in uh which room is this I",
    "start": "5400",
    "end": "13000"
  },
  {
    "text": "forgot anyway um stop by the business Hall located in Bayside AB the blackhead",
    "start": "13000",
    "end": "19400"
  },
  {
    "text": "Arsenal is on the pal foyer on level three that's the same as uh that's the one upstairs uh the course of Arsenal",
    "start": "19400",
    "end": "25640"
  },
  {
    "text": "reception at 1,700 if you haven't picked up your merchandise today is the last day for the store visit the Cali Linux",
    "start": "25640",
    "end": "31960"
  },
  {
    "text": "lab in manderlay Bay 8 and thanks as always for putting your phone on vibrate",
    "start": "31960",
    "end": "37160"
  },
  {
    "text": "good luck thank you my guardian angel good morning everyone uh so what shall we talk about",
    "start": "37160",
    "end": "44960"
  },
  {
    "text": "today so we'll start with a short introduction to VBS architecture then we'll talk about credential guard and",
    "start": "44960",
    "end": "51559"
  },
  {
    "text": "hypervisor enforced code Integrity about their properties and internals and these",
    "start": "51559",
    "end": "56879"
  },
  {
    "text": "two topics will be covered under assumption that an underlying hypervisor has not been breed and we'll cover the",
    "start": "56879",
    "end": "63640"
  },
  {
    "text": "topic of hyperv security later again we are mostly interested in the complexity",
    "start": "63640",
    "end": "69600"
  },
  {
    "text": "of the solution and the attack surface so I will be talking about attacks that work that potentially work and that do",
    "start": "69600",
    "end": "76840"
  },
  {
    "text": "not work as well because each teaches you something right and generally more details are in the white paper so if you",
    "start": "76840",
    "end": "83400"
  },
  {
    "text": "are interested in in more details have a look as scope most of this research was",
    "start": "83400",
    "end": "89920"
  },
  {
    "text": "was done with Windows 10511 so no it's not about anniversary update sorry uh",
    "start": "89920",
    "end": "95240"
  },
  {
    "text": "it's about Intel's Hardware when relevant and there is mixed origin little know and for completeness",
    "start": "95240",
    "end": "101360"
  },
  {
    "text": "well-known content okay so VBS architecture I",
    "start": "101360",
    "end": "106920"
  },
  {
    "start": "105000",
    "end": "105000"
  },
  {
    "text": "sincerely hope that most of you are familiar with the concept because if you don't it will be probably difficult to",
    "start": "106920",
    "end": "112399"
  },
  {
    "text": "follow the presentation but as an introduction so when hyperv is installed",
    "start": "112399",
    "end": "118039"
  },
  {
    "text": "and virtualization based security and enabled uh Windows 10 operating system no longer has full control over the",
    "start": "118039",
    "end": "125159"
  },
  {
    "text": "whole machine instead it is running within a VM with a virtual machine it's",
    "start": "125159",
    "end": "130759"
  },
  {
    "text": "named root partition or vtl Z and as any uh virtual machine it is subject to a",
    "start": "130759",
    "end": "137360"
  },
  {
    "text": "number of restrictions for instance it is the EP table uh which is structure",
    "start": "137360",
    "end": "143640"
  },
  {
    "text": "maintained by the hypervisor uh that dictates whether a given physical memory is readable writable or executable it's",
    "start": "143640",
    "end": "151720"
  },
  {
    "text": "no longer under control of the Kel there is another VM created automatically it's",
    "start": "151720",
    "end": "158000"
  },
  {
    "text": "Nam vl1 and it has its own kernel it has its own user mode and its purpose is to",
    "start": "158000",
    "end": "165440"
  },
  {
    "text": "enforce policies security policies as well as to provide set of services to the root",
    "start": "165440",
    "end": "171560"
  },
  {
    "text": "partition and why all this trouble um because the threat model is that uh",
    "start": "171560",
    "end": "179080"
  },
  {
    "text": "Windows operating system is has been compromised up to the point of malware possessing kernel privileges so you no",
    "start": "179080",
    "end": "186280"
  },
  {
    "text": "longer can expect uh the windows kernel to enforce security policies because it",
    "start": "186280",
    "end": "191599"
  },
  {
    "text": "has been compromised you need something external more privileged and finally uh Beware that",
    "start": "191599",
    "end": "199560"
  },
  {
    "text": "all the zbs is about preventing or limiting very specific set of attacks",
    "start": "199560",
    "end": "206760"
  },
  {
    "text": "right um many actions typical form Mal where like exfiltrating sensitive data",
    "start": "206760",
    "end": "213080"
  },
  {
    "text": "or run somewhere or connecting to internal Network are not abstracted in any way right so this this is solution",
    "start": "213080",
    "end": "220080"
  },
  {
    "text": "just for a couple of selected attacks okay so the",
    "start": "220080",
    "end": "226239"
  },
  {
    "start": "224000",
    "end": "224000"
  },
  {
    "text": "first item is credential guard so the idea is that uh credential",
    "start": "226239",
    "end": "233000"
  },
  {
    "text": "guard is supposed to prevent pass the hash attacks so without credential guard",
    "start": "233000",
    "end": "238400"
  },
  {
    "text": "uh in lsas process in the Windows operating system in its memory the",
    "start": "238400",
    "end": "245040"
  },
  {
    "text": "hashes of the passwords are kept at least for the duration of the log on session uh so that the single sign on",
    "start": "245040",
    "end": "251159"
  },
  {
    "text": "can work right and the problem is that uh attacker can steal this hashes right",
    "start": "251159",
    "end": "258199"
  },
  {
    "text": "extract them from lsas memory and then uh use them to authenticate remote",
    "start": "258199",
    "end": "264040"
  },
  {
    "text": "servers so the idea behind credential guard is that uh this time this clear",
    "start": "264040",
    "end": "270000"
  },
  {
    "text": "secrets authenticators are stored not in lsas but uh elsewhere within this",
    "start": "270000",
    "end": "275720"
  },
  {
    "text": "protected vl1 virtual machine and lsss only holds encrypted",
    "start": "275720",
    "end": "281919"
  },
  {
    "text": "version right so let's see how how it works um particularly if you run mimik",
    "start": "281919",
    "end": "288880"
  },
  {
    "text": "cats on uh credential guard protected box you no longer can see nlm hases",
    "start": "288880",
    "end": "294080"
  },
  {
    "text": "right you can see that all it can get is some large binary blob and it says it's LSA isolated data yeah so that's",
    "start": "294080",
    "end": "303639"
  },
  {
    "text": "nice okay so let's let's have a look at details so there are different possible",
    "start": "303639",
    "end": "308919"
  },
  {
    "text": "configurations related to credential guard and the first one is that what happens if admins just enable credential",
    "start": "308919",
    "end": "315440"
  },
  {
    "text": "guard in the group policy so just stick a single box in the dialogue no F hardening right it's nice easy to deploy",
    "start": "315440",
    "end": "323400"
  },
  {
    "text": "so let's see what are the properties of that scenario so uh credential",
    "start": "323400",
    "end": "330479"
  },
  {
    "start": "328000",
    "end": "328000"
  },
  {
    "text": "main process is named LSA ISO it Trans in this protected vl1 machine and it exposes RPC interface over some alpc",
    "start": "330479",
    "end": "338800"
  },
  {
    "text": "port and this is the list of all the methods available to lsas and lsas talks",
    "start": "338800",
    "end": "345720"
  },
  {
    "text": "over this RPC interface extensively and we the most interesting",
    "start": "345720",
    "end": "351199"
  },
  {
    "text": "methods are these two protect credentials so this is used during the logon so when lsas SS receives uh",
    "start": "351199",
    "end": "359199"
  },
  {
    "text": "credential during the log on it passes it to LSA ISO over RPC and LSA ISO",
    "start": "359199",
    "end": "365160"
  },
  {
    "text": "responds with encrypted credentials and at this from this moment on lsas can",
    "start": "365160",
    "end": "370919"
  },
  {
    "text": "just discard all the pl Tex authenticators and just keep the encrypted",
    "start": "370919",
    "end": "377000"
  },
  {
    "text": "version uh so how how to use it another example is get mm3 challenge response so",
    "start": "377000",
    "end": "384000"
  },
  {
    "text": "whenever uh authenticators are actually needed right for instance to compute NM",
    "start": "384000",
    "end": "389240"
  },
  {
    "text": "respon again LSS must talk over RPC to LSA ISO",
    "start": "389240",
    "end": "394319"
  },
  {
    "text": "and in this case it passes uh The Blob with encrypted credentials received in the previous step plus nlm challenge",
    "start": "394319",
    "end": "401319"
  },
  {
    "text": "username etc etc anything that's needed to compute ntlm response and let's say",
    "start": "401319",
    "end": "406759"
  },
  {
    "text": "ISO is capable of decrypting the credentials right because it has the key",
    "start": "406759",
    "end": "412080"
  },
  {
    "text": "and then use it to compute uh nlm response and then it passes back U ntlm response to lsas so it can um responded",
    "start": "412080",
    "end": "420199"
  },
  {
    "text": "send it to the server so that is how it essentially",
    "start": "420199",
    "end": "425960"
  },
  {
    "text": "works so what are the properties again after log on no clear text credentials in in LS ass that's that's",
    "start": "425960",
    "end": "433280"
  },
  {
    "text": "good still uh while user is logged in lsas will authenticate remote servers",
    "start": "433280",
    "end": "440120"
  },
  {
    "text": "automatically by using this RPC mechanism but the problem is for attacker as well right if someone has",
    "start": "440120",
    "end": "446560"
  },
  {
    "text": "compromised the machine and trans code as the user attacker will be authenticated as",
    "start": "446560",
    "end": "452199"
  },
  {
    "text": "well even more interesting is that if attacker collects encrypted blob then he",
    "start": "452199",
    "end": "458680"
  },
  {
    "text": "can still use directly RPC interface um to credential guard and still",
    "start": "458680",
    "end": "463879"
  },
  {
    "text": "authenticate as the user even after the user has looked out this is more",
    "start": "463879",
    "end": "470319"
  },
  {
    "text": "interesting and let's let's have a look at demonstration maybe it",
    "start": "470319",
    "end": "475759"
  },
  {
    "text": "will make it clear okay so what we see here is the victim point of view so it",
    "start": "475759",
    "end": "482319"
  },
  {
    "text": "has logged to some Windows machine it is logged as domain admin and this is attacker point of",
    "start": "482319",
    "end": "489000"
  },
  {
    "text": "view um so attacker already has compromised this machine and uh received",
    "start": "489000",
    "end": "494759"
  },
  {
    "text": "connect back shell and it runs with privileges of U System",
    "start": "494759",
    "end": "500199"
  },
  {
    "text": "user so uh as we can see from task list uh LSA ISO is running so credential",
    "start": "500199",
    "end": "507080"
  },
  {
    "text": "guard is enabled uh so what we will do we will inject dll",
    "start": "507080",
    "end": "512919"
  },
  {
    "text": "into lsas process in order to monitor the RPC traffic to credential guard to",
    "start": "512919",
    "end": "520599"
  },
  {
    "text": "monitor it and also to mess with it to some extent so we can just inject a",
    "start": "520599",
    "end": "528519"
  },
  {
    "text": "d okay so now let's see the user some user is still logged on so what we can",
    "start": "528519",
    "end": "535360"
  },
  {
    "text": "do we can just steal a token right so retrieve a token from an existing",
    "start": "535360",
    "end": "540600"
  },
  {
    "text": "process for instance from Explorer igy and once we do it uh we run our process",
    "start": "540600",
    "end": "548560"
  },
  {
    "text": "as logged in user right from the point of view of the operating system we are the logged in user right and because",
    "start": "548560",
    "end": "556079"
  },
  {
    "text": "this user is still logged in uh we can just use his credentials to authenticate",
    "start": "556079",
    "end": "561480"
  },
  {
    "text": "to any remote server right again operating system thinks we are the login",
    "start": "561480",
    "end": "567200"
  },
  {
    "text": "user okay so that that was expected so now let's try to do something more",
    "start": "567200",
    "end": "572560"
  },
  {
    "text": "complicated okay let's have a look at the logs our injected code has produced uh so we will see that it's",
    "start": "572560",
    "end": "580560"
  },
  {
    "text": "capable of collecting uh the binary blob this encrypted credentials we can see",
    "start": "580560",
    "end": "586880"
  },
  {
    "text": "this encrypted credentials has been written to this particular file and we",
    "start": "586880",
    "end": "592040"
  },
  {
    "text": "can see that different uh RPC methods had been invoked okay so now let's see",
    "start": "592040",
    "end": "597839"
  },
  {
    "text": "what happens once the logged in user logs out right once the user logs out",
    "start": "597839",
    "end": "603120"
  },
  {
    "text": "then uh log on session in lsas is destroyed so no longer you can steal a token from an existing process because",
    "start": "603120",
    "end": "609600"
  },
  {
    "text": "there is none so instead uh what we will do we will run run as",
    "start": "609600",
    "end": "617120"
  },
  {
    "text": "utility uh in a particular Network only mode so that's that's little known that",
    "start": "617120",
    "end": "623200"
  },
  {
    "text": "you can run this utility and uh say what username and what password should be be",
    "start": "623200",
    "end": "629440"
  },
  {
    "text": "used when authenticating to remote servers right so we will still run as system user but for the purpose of",
    "start": "629440",
    "end": "636000"
  },
  {
    "text": "network authentication we will use some fake password and username of course it's the fake password we don't know the",
    "start": "636000",
    "end": "642600"
  },
  {
    "text": "real password of of the user and we have this run as session on",
    "start": "642600",
    "end": "647639"
  },
  {
    "text": "a separate uh TCP Port so obviously if we just try to authenticate to any",
    "start": "647639",
    "end": "654160"
  },
  {
    "text": "domain server it's not going to work right we don't know the password we gave it some fake password so obviously",
    "start": "654160",
    "end": "662440"
  },
  {
    "text": "that's not going to work now what we'll do we will use uh",
    "start": "662440",
    "end": "667680"
  },
  {
    "text": "the credential the encrypted credentials that we have collected",
    "start": "667680",
    "end": "672800"
  },
  {
    "text": "previously and tell uh our injected dll to actually use them for any",
    "start": "672800",
    "end": "679040"
  },
  {
    "text": "authentication attempt so uh it works by copying this captured encrypted",
    "start": "679040",
    "end": "686360"
  },
  {
    "text": "secret um to this particular magic name so now we",
    "start": "686360",
    "end": "692720"
  },
  {
    "text": "tell lsas use this captured encrypted credentials and now if you try it",
    "start": "692720",
    "end": "699240"
  },
  {
    "text": "again then it works right despite the user has already logged out uh we can",
    "start": "699240",
    "end": "705279"
  },
  {
    "text": "still use the captured uh encrypted credentials to authenticate so again we",
    "start": "705279",
    "end": "710480"
  },
  {
    "text": "don't know the password we don't have password hashes but still we can authenticate to remote servers as this",
    "start": "710480",
    "end": "716800"
  },
  {
    "text": "user even after the user has locked down",
    "start": "716800",
    "end": "721240"
  },
  {
    "text": "okay there is one more problem which I have left purpose purposefully for later",
    "start": "724680",
    "end": "730720"
  },
  {
    "text": "uh about credentials during login right because there is a problem",
    "start": "730720",
    "end": "735880"
  },
  {
    "text": "that somehow uh these unencrypted credentials must be somehow initially delivered to credential guard right via",
    "start": "735880",
    "end": "743000"
  },
  {
    "text": "this protect credential uh RPC so it means if an attacker is",
    "start": "743000",
    "end": "748399"
  },
  {
    "text": "present uh when the user is logging in U and the user uses password based",
    "start": "748399",
    "end": "753639"
  },
  {
    "text": "authentication it's enough to just run key logger right and you will capture the clear text user password right and",
    "start": "753639",
    "end": "761079"
  },
  {
    "text": "again all this uh setup does not prevent it if we use smart card based authentication then still uh the key",
    "start": "761079",
    "end": "768399"
  },
  {
    "text": "distribution center sends uh password hashes during the log on and again they can be captured before they are",
    "start": "768399",
    "end": "774959"
  },
  {
    "text": "deposited to credential guard and encrypted and this particular problem about uh clear text credentials being",
    "start": "774959",
    "end": "782279"
  },
  {
    "start": "779000",
    "end": "779000"
  },
  {
    "text": "available in run partition during the login can be taken care of with the help of more complicated configuration so",
    "start": "782279",
    "end": "789279"
  },
  {
    "text": "what you need for that is credential guard with armor key protection and smart card based authentication and it's",
    "start": "789279",
    "end": "795320"
  },
  {
    "text": "more difficult to deploy and in fact it requires DPM because without DPM it",
    "start": "795320",
    "end": "800800"
  },
  {
    "text": "doesn't make much sense so how it's supposed to work uh in this configuration there's another key named",
    "start": "800800",
    "end": "807720"
  },
  {
    "text": "machine key right this machine is this key is specific for a given machine and",
    "start": "807720",
    "end": "813600"
  },
  {
    "text": "it's available only to credential guard only to this vl1 protected",
    "start": "813600",
    "end": "819440"
  },
  {
    "text": "VM and uh the responses from KDC that uh carry authentication material like",
    "start": "819440",
    "end": "825519"
  },
  {
    "text": "hashes or or or tickets are encrypted with this machine key so because of that",
    "start": "825519",
    "end": "832199"
  },
  {
    "text": "uh even during the log on the pl Tech authenticators never show up never show",
    "start": "832199",
    "end": "837600"
  },
  {
    "text": "up in the clear in the root partition Road partition can see uh them encrypted with machine key and",
    "start": "837600",
    "end": "845160"
  },
  {
    "text": "it's only credential guard that can actually have access to them so that's nice that resolves this problem about",
    "start": "845160",
    "end": "852360"
  },
  {
    "text": "credential dring logon but even in this configuration uh the same problem",
    "start": "852360",
    "end": "858360"
  },
  {
    "text": "remains that uh attacker can still interact with credential guard and have it perform all single sign on support",
    "start": "858360",
    "end": "864480"
  },
  {
    "text": "authentication for remote resources right again the problem is that uh",
    "start": "864480",
    "end": "869839"
  },
  {
    "text": "it's difficult or impossible to tell that differentiate from the legal process of a legal user and process",
    "start": "869839",
    "end": "876839"
  },
  {
    "text": "started by an attacker right and also there is no reliable way to deliver user has logged out so forget all the",
    "start": "876839",
    "end": "883759"
  },
  {
    "text": "credentials refuse future single sign on message to credential guard it's it's",
    "start": "883759",
    "end": "888959"
  },
  {
    "text": "simply not doable okay so short summary uh in two",
    "start": "888959",
    "end": "894560"
  },
  {
    "text": "words without credential guard attacker can collect password hashes and use them",
    "start": "894560",
    "end": "900880"
  },
  {
    "text": "later to authenticate to remote servers anytime from any machine if credential",
    "start": "900880",
    "end": "906880"
  },
  {
    "text": "guard is deployed in its Harden configuration then still an attacker can collect encrypted password hashes and",
    "start": "906880",
    "end": "914920"
  },
  {
    "text": "then again use them to authenticate to remote servers just as before but he has",
    "start": "914920",
    "end": "920519"
  },
  {
    "text": "to do it from the same machine that uh this credential were collected right so",
    "start": "920519",
    "end": "926199"
  },
  {
    "text": "he's restricted to the same infection point uh whether it's easy for an attacker to",
    "start": "926199",
    "end": "932920"
  },
  {
    "text": "adapt to this new condition and like start all the lateral movement from the same machine it might depend on the",
    "start": "932920",
    "end": "940120"
  },
  {
    "text": "precise scenario but anyway it's good to be aware that again credential guard does not prevent using the credentials",
    "start": "940120",
    "end": "947319"
  },
  {
    "text": "on the same machine and again uh we didn't need any sort of hypervisor compromise right it's still it's all how",
    "start": "947319",
    "end": "955120"
  },
  {
    "text": "credential guard is supposed to work how it's designed to work",
    "start": "955120",
    "end": "960199"
  },
  {
    "start": "960000",
    "end": "960000"
  },
  {
    "text": "okay so now topic number two uh hypervisor enforced code",
    "start": "960199",
    "end": "967680"
  },
  {
    "text": "Integrity so Windows 10 can enforce code Integrity of user mode binaries user mode scripts and Kel mode code and the",
    "start": "967680",
    "end": "974600"
  },
  {
    "text": "latter is done with the help of DBS and we focus on on K case and the goal is ambitious uh we we try not to allow",
    "start": "974600",
    "end": "984800"
  },
  {
    "text": "execution of any unsigned code in kernel context in the root partition even if the kernel has been compromised already",
    "start": "984800",
    "end": "992279"
  },
  {
    "text": "right so that's interesting and the basic idea is that again uh root",
    "start": "992279",
    "end": "998319"
  },
  {
    "text": "partition scner no longer can decide which page is exe executable or not it",
    "start": "998319",
    "end": "1004319"
  },
  {
    "text": "has ask vl1 for approval and this code running in vl1",
    "start": "1004319",
    "end": "1010800"
  },
  {
    "text": "will agree to Grant execute rights in EP tables of the root partition only for pages that store signed code right so it",
    "start": "1010800",
    "end": "1018480"
  },
  {
    "text": "it won't assign execute permission for anything else and there's another",
    "start": "1018480",
    "end": "1023519"
  },
  {
    "text": "requirement uh no such page can be both writable and executable because if uh",
    "start": "1023519",
    "end": "1029600"
  },
  {
    "text": "you allow signed code to run and it is in a writable page then an attacker could",
    "start": "1029600",
    "end": "1036520"
  },
  {
    "text": "just overwrite it with something unsigned arbitrary right and it would still run so that's the basic idea and there",
    "start": "1036520",
    "end": "1044959"
  },
  {
    "text": "is a problem with this basic Approach at least in the case when we Mix signed and unsigned code so the common",
    "start": "1044959",
    "end": "1050919"
  },
  {
    "text": "configuration is that unsigned user mode code is allowed but unsigned color mode is denied right that's it's pretty",
    "start": "1050919",
    "end": "1058480"
  },
  {
    "text": "pretty common so now let's see what happens in this scenario user mode wants to execute some unsigned code at some",
    "start": "1058480",
    "end": "1065160"
  },
  {
    "text": "location C so because of the policy it's allowed so vt1 must Grant execute right",
    "start": "1065160",
    "end": "1071480"
  },
  {
    "text": "for this location in the EP table now user mode switches to Kernel mode and",
    "start": "1071480",
    "end": "1077240"
  },
  {
    "text": "jumps to C and we have a problem because again execute rights have been just",
    "start": "1077240",
    "end": "1082880"
  },
  {
    "text": "granted right in in EP in EP so it looks like C will be executed in Kel mode and",
    "start": "1082880",
    "end": "1088720"
  },
  {
    "text": "it's unsigned code so that looks like polic is broken and this problem uh has",
    "start": "1088720",
    "end": "1094480"
  },
  {
    "text": "been discussed in the seg visor paper academic project the basic idea is that",
    "start": "1094480",
    "end": "1100280"
  },
  {
    "text": "you need two separate EP tables one for code originating from signed and the other from unsigned",
    "start": "1100280",
    "end": "1106799"
  },
  {
    "text": "Pages additionally root part must be configured so that any attempt to by",
    "start": "1106799",
    "end": "1112600"
  },
  {
    "text": "unsigned code user mode to enter kernel mode results in VM exit so U hypervisor",
    "start": "1112600",
    "end": "1119320"
  },
  {
    "text": "is invoked and it has a chance to change the current EP table and that",
    "start": "1119320",
    "end": "1124760"
  },
  {
    "text": "essentially takes care of this problem so let's see what what happens uh user",
    "start": "1124760",
    "end": "1130200"
  },
  {
    "text": "mode wants to ex and sign code at C great it's approved uh C is marked as",
    "start": "1130200",
    "end": "1135600"
  },
  {
    "text": "executable in EPT now user mode switches to K mode and now something new happens",
    "start": "1135600",
    "end": "1140799"
  },
  {
    "text": "because it's prevented from happening automatically instead hypervisor is invoked and it changes the current epd",
    "start": "1140799",
    "end": "1148520"
  },
  {
    "text": "table so now code tries to jump to C and",
    "start": "1148520",
    "end": "1153559"
  },
  {
    "text": "now it won't work right because we have changed EP table to the another version and execute right was given was granted",
    "start": "1153559",
    "end": "1161480"
  },
  {
    "text": "only in this previous one right so at this moment we are running with a different EP tables without execute",
    "start": "1161480",
    "end": "1168039"
  },
  {
    "text": "right for C right so this problem is is taken care of and it's essentially it's",
    "start": "1168039",
    "end": "1173360"
  },
  {
    "text": "not stated anywhere in documentation but essentially uh Microsoft reused segv",
    "start": "1173360",
    "end": "1178799"
  },
  {
    "text": "visor ideas there's interesting side effects uh that uh all this has on Kel exploits",
    "start": "1178799",
    "end": "1187320"
  },
  {
    "text": "so attackers love arbitrary code running in we zero right because it's the most flexible thing SMP was a problem but",
    "start": "1187320",
    "end": "1193520"
  },
  {
    "text": "there are natural bypasses because essentially once you have compromised the Kel you can turn off from within the",
    "start": "1193520",
    "end": "1199440"
  },
  {
    "text": "r payload this way or another but it's not going to work with kernel hypervisor enforced code",
    "start": "1199440",
    "end": "1206360"
  },
  {
    "text": "Integrity there is no way uh to turn off or turn on executable rights from within",
    "start": "1206360",
    "end": "1212200"
  },
  {
    "text": "the Kel right so that's pretty nice also uh there's another thing you cannot hook",
    "start": "1212200",
    "end": "1217440"
  },
  {
    "text": "kernel code at least directly by means of overwriting the kernel code with some with some hooks right again kernel",
    "start": "1217440",
    "end": "1224360"
  },
  {
    "text": "cannot itself override its own body right it has no",
    "start": "1224360",
    "end": "1229880"
  },
  {
    "text": "no power to do that it doesn't mean that no exploits are possible quite the",
    "start": "1229880",
    "end": "1234960"
  },
  {
    "text": "opposite data only exploits of Rob only exploit are still fine but nevertheless",
    "start": "1234960",
    "end": "1240600"
  },
  {
    "text": "that's annoying um I wonder is there any way around",
    "start": "1240600",
    "end": "1246320"
  },
  {
    "text": "it uh again there is no way in which we can get a page which is both executable",
    "start": "1246320",
    "end": "1253200"
  },
  {
    "text": "and writeable right and we cannot use it to store uh our content there we cannot",
    "start": "1253200",
    "end": "1258679"
  },
  {
    "text": "create such new page but perhaps there are some such pages left from you know",
    "start": "1258679",
    "end": "1264320"
  },
  {
    "text": "the primordial Big Bang or Boot phas and it looks like it so again if you just",
    "start": "1264320",
    "end": "1270880"
  },
  {
    "start": "1268000",
    "end": "1268000"
  },
  {
    "text": "scan the whole EP table for the RO root partition you can find some pages with rwx permission in it I don't have a good",
    "start": "1270880",
    "end": "1279240"
  },
  {
    "text": "explanation why they are here for what purpose my best hypothesis is they were needed for some early boot phase for",
    "start": "1279240",
    "end": "1286039"
  },
  {
    "text": "running some uifi code and for whatever reason they needed this rwx permission but still you can still use them um and",
    "start": "1286039",
    "end": "1293880"
  },
  {
    "text": "you an attacker can find them by probing each physical page for write and execute in ring zero that's easier said than",
    "start": "1293880",
    "end": "1300520"
  },
  {
    "text": "done it's quite nontrivial anyway I I was able to run the utility that does",
    "start": "1300520",
    "end": "1306720"
  },
  {
    "text": "exactly that probes each physical page for being writable and",
    "start": "1306720",
    "end": "1312640"
  },
  {
    "text": "executable and as you can see in the output most of the pages are indeed not",
    "start": "1312640",
    "end": "1319240"
  },
  {
    "text": "both writable and executable but there is at least one large contiguous",
    "start": "1319240",
    "end": "1324640"
  },
  {
    "text": "physical address range which is writable and executable this utility precisely",
    "start": "1324640",
    "end": "1330000"
  },
  {
    "text": "tested by writing to this page and then executing that so I reported that problem in",
    "start": "1330000",
    "end": "1335600"
  },
  {
    "text": "Microsoft like at the beginning of this year and they fixed it in in in this Microsoft bulletin in",
    "start": "1335600",
    "end": "1342919"
  },
  {
    "text": "May uh okay so that's let start another topic hyper",
    "start": "1343240",
    "end": "1350519"
  },
  {
    "text": "security one important thing to be aware of that uh we have a very unusual threat",
    "start": "1350600",
    "end": "1356559"
  },
  {
    "text": "model here because there are a lot of you know Publications and literature about uh hypervisor security but almost",
    "start": "1356559",
    "end": "1365840"
  },
  {
    "text": "all the time the threat model is that there is some VM usual worker VM without",
    "start": "1365840",
    "end": "1371360"
  },
  {
    "text": "for instance direct access to hardware and we try to protect hypervisor against attacks originating from this",
    "start": "1371360",
    "end": "1377520"
  },
  {
    "text": "unprivileged worker VMS particularly without DBS enabled",
    "start": "1377520",
    "end": "1383159"
  },
  {
    "text": "root partition is kind of trusted right for instance it can compromise hyperv in number of ways and it's not a big deal",
    "start": "1383159",
    "end": "1389919"
  },
  {
    "text": "right because usually you don't think that you know this",
    "start": "1389919",
    "end": "1395080"
  },
  {
    "text": "management domain is uh where the attacks can originate from and with the",
    "start": "1395080",
    "end": "1401120"
  },
  {
    "text": "BS it's different right this time the threat model is precisely that the root partition has been compromised so as you",
    "start": "1401120",
    "end": "1407600"
  },
  {
    "text": "can imagine again it's totally different from any other hypervisor security topic",
    "start": "1407600",
    "end": "1413279"
  },
  {
    "start": "1413000",
    "end": "1413000"
  },
  {
    "text": "and much more difficult so even to start thinking about security hypervisor",
    "start": "1413279",
    "end": "1418840"
  },
  {
    "text": "against root partition you need three things you need secure boot because without it uh root partition can",
    "start": "1418840",
    "end": "1427520"
  },
  {
    "text": "just use a Trant version of the bootloader and Trant version of the hypervisor reboot and then it will run",
    "start": "1427520",
    "end": "1434440"
  },
  {
    "text": "with a custom hypervisor right again it's because root partition can mess with boot process right by specifying",
    "start": "1434440",
    "end": "1441559"
  },
  {
    "text": "boot order Etc no normal VM U Can can achieve it still be aware that there",
    "start": "1441559",
    "end": "1448080"
  },
  {
    "text": "were many vulnerabilities in the past allowing secure boot bypass so you have to be aware of that you need vtd because",
    "start": "1448080",
    "end": "1455279"
  },
  {
    "text": "without it uh vtd must be supported by the hardware and enabled by the",
    "start": "1455279",
    "end": "1460760"
  },
  {
    "text": "firmware exposed by the firmer because without it uh even with CPU protection",
    "start": "1460760",
    "end": "1466480"
  },
  {
    "text": "still the root partition can over hypervisor via dma transaction so use Hardware to to override hypervisor",
    "start": "1466480",
    "end": "1473600"
  },
  {
    "text": "memory and finally you really need TPM because it's needed to secure S4 process as we see",
    "start": "1473600",
    "end": "1480919"
  },
  {
    "text": "below okay so assuming we have it let's see again what are the root partition",
    "start": "1480919",
    "end": "1486080"
  },
  {
    "start": "1483000",
    "end": "1483000"
  },
  {
    "text": "privileges that are unusual like in a sense they don't exist in normal VMS and",
    "start": "1486080",
    "end": "1492720"
  },
  {
    "text": "these privileges might be dangerous and they potentially can be used to attack the hypervisor so obviously the first",
    "start": "1492720",
    "end": "1499919"
  },
  {
    "text": "thing is access to privilege hyper cods so is document named hypervisor top level functional",
    "start": "1499919",
    "end": "1505760"
  },
  {
    "text": "specification and in there there are 14 hyper cods uh usable by non-privileged",
    "start": "1505760",
    "end": "1511480"
  },
  {
    "text": "VMS and 67 used from the root partition right so obviously much more code is",
    "start": "1511480",
    "end": "1517679"
  },
  {
    "text": "exposed to the root partition and more hyper codes exist entirely undocumented even more",
    "start": "1517679",
    "end": "1523480"
  },
  {
    "text": "interesting part is that previously all these privileged hyper calls are were",
    "start": "1523480",
    "end": "1528600"
  },
  {
    "text": "not considered to be an attack surface right again they were usable only by the root partition which used to be trusted",
    "start": "1528600",
    "end": "1534640"
  },
  {
    "text": "but now the situation changes right so Microsoft had to essentially Harden all the usage of this privileged hyper so uh",
    "start": "1534640",
    "end": "1541840"
  },
  {
    "text": "no harm can be done against the hypervisor and there exist at least some potential possibility that they missed",
    "start": "1541840",
    "end": "1547559"
  },
  {
    "text": "something right so definitely that counts as attack service what else root partition has",
    "start": "1547559",
    "end": "1553480"
  },
  {
    "text": "access to almost all physical memory range so obviously it cannot access the pages which are allocated for hypervisor",
    "start": "1553480",
    "end": "1559640"
  },
  {
    "text": "and vl1 because that would be direct bypass also local AP and vtd bars are",
    "start": "1559640",
    "end": "1564720"
  },
  {
    "text": "not accessible again if they were that would constitute easy bypass but other things are accessible so particularly",
    "start": "1564720",
    "end": "1571279"
  },
  {
    "text": "chipset and PCI devices memory mapped IO is available and that's that will be useful as well as XP nvs memory region",
    "start": "1571279",
    "end": "1579080"
  },
  {
    "text": "so some memory region reserve for the usage of uifi is still available from",
    "start": "1579080",
    "end": "1584559"
  },
  {
    "text": "the RO partition IO ports so again no normal VM has ever access to physical",
    "start": "1584559",
    "end": "1591600"
  },
  {
    "text": "IO ports right and in case of root partition is different all are available with some exception that are known to",
    "start": "1591600",
    "end": "1598120"
  },
  {
    "text": "cause problems so like Port 32 and 33 can be used to disable interrupts so we",
    "start": "1598120",
    "end": "1603159"
  },
  {
    "text": "don't want root partition to be able to do that Port hex 64 can control a20 gate",
    "start": "1603159",
    "end": "1609360"
  },
  {
    "text": "a20 gate setting and again that's not that's dangerous ports cf8 CFC are used to",
    "start": "1609360",
    "end": "1616880"
  },
  {
    "text": "access PCI con space and obviously hyperv does not like to Grant root partition direct access to mess with the",
    "start": "1616880",
    "end": "1624000"
  },
  {
    "text": "PCI config space the most bizarre one is Port 1804 it is an IO Port that is used",
    "start": "1624000",
    "end": "1631640"
  },
  {
    "text": "uh to trigger S3 sleep so if it was exposed to the root",
    "start": "1631640",
    "end": "1637080"
  },
  {
    "text": "partition it could enter S3 sleep by its own and that that would be very",
    "start": "1637080",
    "end": "1642240"
  },
  {
    "text": "dangerous so the these are the known ports that that cause problems and they needed to be removed from access by root",
    "start": "1642240",
    "end": "1649799"
  },
  {
    "text": "partition model specific registers are also relevant because some of them have interesting semantics right it with",
    "start": "1649799",
    "end": "1657000"
  },
  {
    "text": "Hardware but essentially uh all none none of msrs are directly usable by root",
    "start": "1657000",
    "end": "1662120"
  },
  {
    "text": "partition so it's not very useful okay so by using this privileges that I have",
    "start": "1662120",
    "end": "1668279"
  },
  {
    "start": "1664000",
    "end": "1664000"
  },
  {
    "text": "described already what Mischief can be done right and the first problem is that uh",
    "start": "1668279",
    "end": "1675640"
  },
  {
    "text": "the region to mm CFG region is is not denied right so mm CFG",
    "start": "1675640",
    "end": "1682200"
  },
  {
    "text": "is region of physical memory address space and it's configured by the chipset so that uh whenever CPU accesses that it",
    "start": "1682200",
    "end": "1690000"
  },
  {
    "text": "is translated into PCI config space accesses right so there is one method to",
    "start": "1690000",
    "end": "1697399"
  },
  {
    "text": "access PCI config Space by this IO ports and this is you know protected by hyperv",
    "start": "1697399",
    "end": "1702440"
  },
  {
    "text": "but this method by using memory mapped access is not restricted in any way",
    "start": "1702440",
    "end": "1708880"
  },
  {
    "text": "and what what Mischief can be done with it obviously you by accessing PCI config",
    "start": "1708880",
    "end": "1713919"
  },
  {
    "text": "space you can access and change device specific register including the",
    "start": "1713919",
    "end": "1719559"
  },
  {
    "text": "chipset and there are very interesting registers in there for instance remap limit and remat base register which are",
    "start": "1719559",
    "end": "1726360"
  },
  {
    "text": "again in PCI config space can be used to create physical memory alliances so you",
    "start": "1726360",
    "end": "1731399"
  },
  {
    "text": "can configure them so that two different physical addresses actually refer to the same location in dram and that's",
    "start": "1731399",
    "end": "1737679"
  },
  {
    "text": "essentially allows you to break any hypervisor security fortunately it's a well-known attack and these registers",
    "start": "1737679",
    "end": "1743279"
  },
  {
    "text": "are locked right so even though they are accessible they are locked by uh by the",
    "start": "1743279",
    "end": "1749200"
  },
  {
    "text": "chipset there are it's possible that there are other interesting ones which I am not aware of uh what else can be done",
    "start": "1749200",
    "end": "1756279"
  },
  {
    "text": "with this config space access you can change memory bars location right so you can configure a PCI device to claim uh",
    "start": "1756279",
    "end": "1764960"
  },
  {
    "text": "the memory access cycles that are uh are targeted to a particular address and the",
    "start": "1764960",
    "end": "1771880"
  },
  {
    "text": "idea is that you can kind of overlap for instance Ram normal memory with pcie",
    "start": "1771880",
    "end": "1777360"
  },
  {
    "text": "memory right and you hope that this Ram is somehow important for the hypervisor",
    "start": "1777360",
    "end": "1782440"
  },
  {
    "text": "and if uh instead of accessing this Ram you access PCI memory then some",
    "start": "1782440",
    "end": "1787720"
  },
  {
    "text": "malfunction can happen but as far as I know that's not going to work it is kind",
    "start": "1787720",
    "end": "1793360"
  },
  {
    "text": "of explicitly stated Intel documentation that you cannot uh be PCI device cannot",
    "start": "1793360",
    "end": "1799360"
  },
  {
    "text": "claim Cycles which are targeted to Ram range which is a shame but is there",
    "start": "1799360",
    "end": "1806720"
  },
  {
    "text": "anything else that we can try to overlap or cover with memory range assigned for PCI devices and there is one namely vtd",
    "start": "1806720",
    "end": "1815279"
  },
  {
    "start": "1813000",
    "end": "1813000"
  },
  {
    "text": "bars so again vtd bars are is the memory range which you use to configure vtd",
    "start": "1815279",
    "end": "1822000"
  },
  {
    "text": "engine that uh is used to control dma accesses and this screenshot is from",
    "start": "1822000",
    "end": "1827600"
  },
  {
    "text": "Leno because it's easier to explain but again it's less independent so what we",
    "start": "1827600",
    "end": "1833519"
  },
  {
    "text": "see here is okay we can figure out what is the address of the vtd bar and if you",
    "start": "1833519",
    "end": "1839039"
  },
  {
    "text": "try to read from this physical address you get some output particularly this location uh is the capability register",
    "start": "1839039",
    "end": "1845919"
  },
  {
    "text": "of BTD engine and originally uh VGA device",
    "start": "1845919",
    "end": "1852039"
  },
  {
    "text": "integrated Graphics has memory mapped at at this address but we are going to",
    "start": "1852039",
    "end": "1858320"
  },
  {
    "text": "change it we will assign this memory address originally used by BTD bars and",
    "start": "1858320",
    "end": "1864120"
  },
  {
    "text": "we will assign it to the memory bar exposed by integrated graphics and what",
    "start": "1864120",
    "end": "1870639"
  },
  {
    "text": "happens afterwards if you try to read physical memory of this the same address you get plain zeros right so by by doing",
    "start": "1870639",
    "end": "1879279"
  },
  {
    "text": "this uh you deny all entities on the system including the hypervisor you deny it access to vtd",
    "start": "1879279",
    "end": "1886679"
  },
  {
    "text": "configuration and that's very interesting same can be done with the second bar and I got pretty excited when",
    "start": "1886679",
    "end": "1892840"
  },
  {
    "text": "I saw this and I even start writing exploits for that uh but it didn't work",
    "start": "1892840",
    "end": "1898240"
  },
  {
    "text": "unfortunately the reason is that despite apparently you can create this overlap situation and apparently read accesses",
    "start": "1898240",
    "end": "1905840"
  },
  {
    "text": "are directed no longer to vtd but to this PCI memory when you try to do write access it results in hanging the",
    "start": "1905840",
    "end": "1913080"
  },
  {
    "text": "platform I do not understand precisely what's happening right but that's at least on two different boxes that was",
    "start": "1913080",
    "end": "1919760"
  },
  {
    "text": "the behavior observed maybe it can be somehow you know improved to actually",
    "start": "1919760",
    "end": "1925039"
  },
  {
    "text": "work and do not hang the platform okay problem number two other",
    "start": "1925039",
    "end": "1930360"
  },
  {
    "text": "chipset registers so still uh there are other memory mapped regions like in MCH",
    "start": "1930360",
    "end": "1936159"
  },
  {
    "text": "bar region and there are literally thousands of register in in them and",
    "start": "1936159",
    "end": "1941600"
  },
  {
    "text": "these these are very fragile register that for instance uh are related to",
    "start": "1941600",
    "end": "1946639"
  },
  {
    "text": "handling of physical memory or controlling dram and again most of them are entirely",
    "start": "1946639",
    "end": "1952960"
  },
  {
    "text": "undocumented at all so that a question arises are all of them locked properly are all un lockable at all and does",
    "start": "1952960",
    "end": "1960039"
  },
  {
    "text": "firmware actually locks them right and if not anything can be done with that I",
    "start": "1960039",
    "end": "1965679"
  },
  {
    "text": "don't know answer to this question again the problem is that uh there is some undocumented functionality that we don't",
    "start": "1965679",
    "end": "1973000"
  },
  {
    "text": "know the full semantics of it right and still the root partition is granted full control over it so that's again at least",
    "start": "1973000",
    "end": "1978960"
  },
  {
    "text": "a potential problem another problem is S3 sleep",
    "start": "1978960",
    "end": "1984000"
  },
  {
    "text": "right so generally S3 is very fragile from security point of view because what happens is that hypervisor loses control",
    "start": "1984000",
    "end": "1990880"
  },
  {
    "text": "right uh CPU is powered down and then you have to kind of trust that the firware does the right thing so first of",
    "start": "1990880",
    "end": "1997480"
  },
  {
    "text": "all it maintains its all in own integrity and then uh hands of control to hypervisor during the resume in an",
    "start": "1997480",
    "end": "2004279"
  },
  {
    "text": "expected Manner and there was a ability found in 2014 by me and Cory kenberg as well as",
    "start": "2004279",
    "end": "2011799"
  },
  {
    "text": "uh simultaneously by Intel guys that are perfect for the purpose of taking",
    "start": "2011799",
    "end": "2017679"
  },
  {
    "text": "control over the hypervisor right uh you could corrupt the resume process so that",
    "start": "2017679",
    "end": "2023039"
  },
  {
    "start": "2020000",
    "end": "2020000"
  },
  {
    "text": "arbitrary code has been run before uh hypervisor was resumed right so this is",
    "start": "2023039",
    "end": "2029600"
  },
  {
    "text": "all patched by now so assuming you have old pater farmer since 2014 that's",
    "start": "2029600",
    "end": "2035960"
  },
  {
    "text": "that's not an issue but more potential attacks against S3 thinkable right again",
    "start": "2035960",
    "end": "2041320"
  },
  {
    "text": "see the white paper and again it's not entirely not a concern in normal",
    "start": "2041320",
    "end": "2046480"
  },
  {
    "text": "hypervisor scenario when you have unprivileged VMS unprivileged VMS have no way to Tinker with S3 process anyhow",
    "start": "2046480",
    "end": "2053679"
  },
  {
    "text": "right it's only a problem with the root partition S4 slip is even more fragile",
    "start": "2053679",
    "end": "2059000"
  },
  {
    "text": "because now what what's happening the state of the system is stored in a file in a hiber file and this hyber file is",
    "start": "2059000",
    "end": "2065599"
  },
  {
    "text": "written by the root partition whom we do not trust right so uh how it's handled",
    "start": "2065599",
    "end": "2072599"
  },
  {
    "text": "under VBS is hyber file is encrypted uh it's generated this content is generated",
    "start": "2072599",
    "end": "2079000"
  },
  {
    "text": "again in vtl one in the secure environment and it's encrypted in memory and only the encrypted version is passed",
    "start": "2079000",
    "end": "2085520"
  },
  {
    "text": "to the root partition uh to be written out to dis but then you need to keep the key secret right this encryption key for",
    "start": "2085520",
    "end": "2093040"
  },
  {
    "text": "the hyper file and it still needs to be available for the hypervisor",
    "start": "2093040",
    "end": "2098640"
  },
  {
    "text": "and for the win resume EFI application so if TPM is available it's",
    "start": "2098640",
    "end": "2103880"
  },
  {
    "text": "doable the key is sealed to DPM so only if the platform is in expected State",
    "start": "2103880",
    "end": "2109560"
  },
  {
    "text": "meaning when resume EFI is running only then this key can be ready from TPM and",
    "start": "2109560",
    "end": "2115359"
  },
  {
    "text": "that's good but if there is no TPM then we have a problem right so Microsoft",
    "start": "2115359",
    "end": "2120680"
  },
  {
    "text": "tried to do the best they could so uh without TPM the key is in clear text in",
    "start": "2120680",
    "end": "2127280"
  },
  {
    "text": "u variable and this UI variable is marked as boot only so after the boot is",
    "start": "2127280",
    "end": "2132960"
  },
  {
    "text": "completed and you try to use legal exposed interfaces by the firmware this",
    "start": "2132960",
    "end": "2139960"
  },
  {
    "text": "variable is not visible right not even readable but the problem is that uh the",
    "start": "2139960",
    "end": "2145480"
  },
  {
    "text": "storage for the uifi variables so SPI flash is inherently readable by the root",
    "start": "2145480",
    "end": "2151800"
  },
  {
    "text": "partition it's memory mapped just below 4 gab boundary so all you need to get",
    "start": "2151800",
    "end": "2158040"
  },
  {
    "text": "the key is just scan the memory under 4 GB search for this particular uifi",
    "start": "2158040",
    "end": "2164200"
  },
  {
    "text": "variable name or even better for this magic constant that is the beginning of",
    "start": "2164200",
    "end": "2169880"
  },
  {
    "text": "the contents of this variable and what follows is the clear text key package",
    "start": "2169880",
    "end": "2175480"
  },
  {
    "text": "used to encrypt the hyper file right so it means without tpms4 is insecure and",
    "start": "2175480",
    "end": "2180800"
  },
  {
    "text": "can be used to take control over a hypervisor so again it's not I haven't seen that remark in documentation about",
    "start": "2180800",
    "end": "2187760"
  },
  {
    "text": "credential guard and VBS at all okay and finally the topic that",
    "start": "2187760",
    "end": "2193640"
  },
  {
    "text": "everyone was expecting so smm uh again it's mostly well-known",
    "start": "2193640",
    "end": "2199280"
  },
  {
    "text": "content just for completeness and for some nice",
    "start": "2199280",
    "end": "2204839"
  },
  {
    "text": "screenshot so again smm is highly privileged mode of CPU totally unstructured by",
    "start": "2204839",
    "end": "2212078"
  },
  {
    "text": "hypervisor the problem is nowadays firware vendors pack quite a lot of",
    "start": "2212400",
    "end": "2218000"
  },
  {
    "text": "functionality in smm and these Services can be invoked by right to iort",
    "start": "2218000",
    "end": "2224480"
  },
  {
    "text": "BTO again the problem is that a lot of bugs in smm has been found both recently and some time ago but recently some of",
    "start": "2224480",
    "end": "2231800"
  },
  {
    "text": "these problems are got more attention even by by more Mainline media so might",
    "start": "2231800",
    "end": "2238280"
  },
  {
    "text": "have heard about this think pone vulnerability found by dimitro leuk really some spectacular",
    "start": "2238280",
    "end": "2244960"
  },
  {
    "text": "findings so we have to live with that we have to uh assume that smm code can be",
    "start": "2244960",
    "end": "2251760"
  },
  {
    "text": "buggy and again it's well known that smm vulnerability can be used to compro",
    "start": "2251760",
    "end": "2256800"
  },
  {
    "text": "compromise a hypervisor in runtime right again smm code is not restricted anyhow",
    "start": "2256800",
    "end": "2262400"
  },
  {
    "text": "by the hypervisor unless use STM but nobody uses STM and it's not going to happen in time soon uh so anyway smm",
    "start": "2262400",
    "end": "2270560"
  },
  {
    "text": "vulnerabilities are fatal also you can bypass secure boot as well if you have smm vulnerability but it's optional",
    "start": "2270560",
    "end": "2279079"
  },
  {
    "text": "and now what it turns out that DBS allows direct access to iort B2 for the",
    "start": "2279079",
    "end": "2284400"
  },
  {
    "text": "root partition so the root partition can invoke uh smm Services",
    "start": "2284400",
    "end": "2289640"
  },
  {
    "text": "directly as well as VBS grants access to xpn vs memory region and it's important",
    "start": "2289640",
    "end": "2296240"
  },
  {
    "text": "because quite a few smm vulnerabilities were exploitable by corrupting this nvs",
    "start": "2296240",
    "end": "2302440"
  },
  {
    "text": "memory region and then invoking some smm service so again what it means that it's",
    "start": "2302440",
    "end": "2309079"
  },
  {
    "text": "expected that almost all SMN vulnerabilities are freely exploitable from the root partition right and it has",
    "start": "2309079",
    "end": "2317640"
  },
  {
    "text": "been already demonstrated a couple of times like inter researchers have made a",
    "start": "2317640",
    "end": "2323079"
  },
  {
    "text": "video in which they search by using power of smm they are able to search all",
    "start": "2323079",
    "end": "2328520"
  },
  {
    "text": "the memory and and and just pattern match looking for password hashes right",
    "start": "2328520",
    "end": "2335520"
  },
  {
    "text": "so despite vtl one memory is not reachable from the root partition right because hypervisor protects that still",
    "start": "2335520",
    "end": "2342119"
  },
  {
    "text": "smm is all powerful and it can read this memory directly and particularly extract clear text password",
    "start": "2342119",
    "end": "2348119"
  },
  {
    "text": "hashes so I tried to show something more delicate or subtle or more uh VBS",
    "start": "2348119",
    "end": "2356440"
  },
  {
    "start": "2349000",
    "end": "2349000"
  },
  {
    "text": "specific I will show you the screenshots that show uh hooking the hypervisor in",
    "start": "2356440",
    "end": "2363040"
  },
  {
    "text": "runtime injecting code within it so uh",
    "start": "2363040",
    "end": "2368680"
  },
  {
    "text": "what's there again we see LSA ISO is running on this test box so credential guard has been",
    "start": "2368680",
    "end": "2375040"
  },
  {
    "text": "enabled and uh I wrote this utility that exploits some old and patched uh SMN",
    "start": "2375040",
    "end": "2381240"
  },
  {
    "text": "vulnerability it's not very important what's the nature of its vulnerability again it allowed me to run arbitrary",
    "start": "2381240",
    "end": "2387359"
  },
  {
    "text": "code in smm repeatly as many times as I wanted so if I pass this scan command to",
    "start": "2387359",
    "end": "2394359"
  },
  {
    "text": "this utility it searches all physical memory for vmcs Regions so vmcs page is the",
    "start": "2394359",
    "end": "2402520"
  },
  {
    "text": "page used by the hypervisor to store information about both the hypervisor and um",
    "start": "2402520",
    "end": "2408240"
  },
  {
    "text": "VMS so uh you can see this scan found 32 lines meaning 16",
    "start": "2408240",
    "end": "2415880"
  },
  {
    "text": "vmcs and again what we can read from this vmcs page is we can read the",
    "start": "2415880",
    "end": "2421720"
  },
  {
    "text": "virtual address of the VM exit Handler right it's within the hypervisor body we",
    "start": "2421720",
    "end": "2426960"
  },
  {
    "text": "can find mind what is the cr3 used by the hypervisor and other things like EP",
    "start": "2426960",
    "end": "2433160"
  },
  {
    "text": "pointer you can see that uh there are two different vmcs displayed here and in",
    "start": "2433160",
    "end": "2439119"
  },
  {
    "text": "fact they are for two different VMS you can tell it because EP is different right and one of these VMS is for the",
    "start": "2439119",
    "end": "2446720"
  },
  {
    "text": "root partition one of them is for vtl one if you can tell by this number which one which one is which just grab me",
    "start": "2446720",
    "end": "2453839"
  },
  {
    "text": "after the presentation okay so what code we will try to inject just this I made some",
    "start": "2453839",
    "end": "2461240"
  },
  {
    "text": "framework in which you can compile C code into dll and then uh my code will",
    "start": "2461240",
    "end": "2466400"
  },
  {
    "text": "take care about relocating that and creating hooks Etc so what this what",
    "start": "2466400",
    "end": "2472960"
  },
  {
    "text": "does this code do it reads the VM exit reason and if we are running because CPU",
    "start": "2472960",
    "end": "2480119"
  },
  {
    "text": "ID instruction has been invoked and if some register has some magic value we",
    "start": "2480119",
    "end": "2487040"
  },
  {
    "text": "just change this register right just as a proof of concept that that it works so",
    "start": "2487040",
    "end": "2492119"
  },
  {
    "text": "if you still remember what BP KN utility was doing on Blue System that's",
    "start": "2492119",
    "end": "2497319"
  },
  {
    "text": "essentially the same idea right and again does it work so again uh",
    "start": "2497319",
    "end": "2503680"
  },
  {
    "text": "in order to hook we need to know the physical address of the VM exit",
    "start": "2503680",
    "end": "2510078"
  },
  {
    "text": "Handler uh so again we take two pieces of information from vmcs uh the virtual",
    "start": "2510119",
    "end": "2515880"
  },
  {
    "text": "address of the vmx exit Handler and the CRF uh register and again by using the",
    "start": "2515880",
    "end": "2522119"
  },
  {
    "text": "ability to read any physical memory you can walk the page tables of uh the hypervisor and figure out that uh the",
    "start": "2522119",
    "end": "2529960"
  },
  {
    "text": "physical address storing uh the DM exit hander is there right and you can read",
    "start": "2529960",
    "end": "2536920"
  },
  {
    "text": "the beginning of it you can see that looks like x64 assembly so what what do we do next uh",
    "start": "2536920",
    "end": "2544960"
  },
  {
    "text": "we run this magic CID EX utility it just executes CPU ID instruction with the",
    "start": "2544960",
    "end": "2551040"
  },
  {
    "text": "proper value in r13 register and what does it say that before cpid R14 has",
    "start": "2551040",
    "end": "2556800"
  },
  {
    "text": "this magic value and after cpid instruction it still has this magic value right it's expected because uh",
    "start": "2556800",
    "end": "2563680"
  },
  {
    "text": "hyperv doesn't change r13 register when emulating",
    "start": "2563680",
    "end": "2568960"
  },
  {
    "text": "CP okay and finally uh we use this hyper hook command to actually override the",
    "start": "2568960",
    "end": "2574559"
  },
  {
    "text": "hypervisor body with uh the DL with hooks and also Place DL in an expected",
    "start": "2574559",
    "end": "2581160"
  },
  {
    "text": "location and afterwards uh if you run this magic CP ID utility so again it",
    "start": "2581160",
    "end": "2587559"
  },
  {
    "text": "says before r13 was this magic value but afterwards it was changed right so that",
    "start": "2587559",
    "end": "2594359"
  },
  {
    "text": "shows that indeed uh we are able to alter the behavior of the hypervisor",
    "start": "2594359",
    "end": "2600400"
  },
  {
    "text": "right we run arbitrary code in the context of it and we can change any aspect of hypervisor functionality and",
    "start": "2600400",
    "end": "2606920"
  },
  {
    "text": "this this is all in runtime right so that's it's very powerful and again if you control the",
    "start": "2606920",
    "end": "2613760"
  },
  {
    "text": "hypervisor you can do many interesting things you can for instance monitor the behavior of uh credential guard you can",
    "start": "2613760",
    "end": "2621000"
  },
  {
    "text": "see what uh what vmx that it generates etc etc again that that shows that SMN",
    "start": "2621000",
    "end": "2628760"
  },
  {
    "text": "vulnerability can be used to totally subvert all hypervisor",
    "start": "2628760",
    "end": "2634280"
  },
  {
    "text": "security and that's that's pretty much it so summary despite its limited scope VBS",
    "start": "2634280",
    "end": "2640800"
  },
  {
    "text": "is obviously useful right so uh it blocks some attacks which are",
    "start": "2640800",
    "end": "2646839"
  },
  {
    "text": "straightforward without it right so it's useful but again Beware of the",
    "start": "2646839",
    "end": "2651960"
  },
  {
    "text": "limitation right beware about the design again obviously a lot of effort by Microsoft",
    "start": "2651960",
    "end": "2659359"
  },
  {
    "text": "has been devoted to make it as secure as possible Right but still they needed to make some trade-off to maintain",
    "start": "2659359",
    "end": "2665839"
  },
  {
    "text": "compatibility and still there is some very unusual attack surface particularly the exposure of a lot of Hardware access",
    "start": "2665839",
    "end": "2673000"
  },
  {
    "text": "to root partition is worrying right there might be problems with that definitely you strictly need vtd",
    "start": "2673000",
    "end": "2680200"
  },
  {
    "text": "and TPM uh in order to secure hyperv again you may infer from Microsoft",
    "start": "2680200",
    "end": "2686280"
  },
  {
    "text": "documentation that vtd and TPM are kind of optional right nice to have but optional and",
    "start": "2686280",
    "end": "2692200"
  },
  {
    "text": "it's the other way it's strictly necessary to maintain security of of VBS",
    "start": "2692200",
    "end": "2697319"
  },
  {
    "text": "along with secure boot of course and still uh SMN vulnerabilities are the",
    "start": "2697319",
    "end": "2703240"
  },
  {
    "text": "greatest threat to this setup again they are not very uncommon",
    "start": "2703240",
    "end": "2709760"
  },
  {
    "text": "they happen all the time it's true that it's potentially more challenging to exploit SMN vulnerability and they are",
    "start": "2709760",
    "end": "2716440"
  },
  {
    "text": "specific to a given firmware make right but for instance in case of this stin",
    "start": "2716440",
    "end": "2721640"
  },
  {
    "text": "pone vulnerability all the line of all the laptops by the single vendor was",
    "start": "2721640",
    "end": "2727079"
  },
  {
    "text": "affected right so it's also happen so again this is a problem and uh again",
    "start": "2727079",
    "end": "2732559"
  },
  {
    "text": "there are known examples to use smm vulnerabilities to totally break any VBS",
    "start": "2732559",
    "end": "2738720"
  },
  {
    "text": "security promise okay that's about it uh we have",
    "start": "2738720",
    "end": "2744760"
  },
  {
    "start": "2742000",
    "end": "2742000"
  },
  {
    "text": "some time for questions anyone",
    "start": "2744760",
    "end": "2749200"
  },
  {
    "text": "um hybrid file access",
    "start": "2757240",
    "end": "2764640"
  },
  {
    "text": "thep it's interesting question so the question is does root partition has",
    "start": "2766160",
    "end": "2771400"
  },
  {
    "text": "access to TPM uh I'm not sure because when I",
    "start": "2771400",
    "end": "2776680"
  },
  {
    "text": "tested it initially on Windows 10 initial release so threshold",
    "start": "2776680",
    "end": "2784559"
  },
  {
    "text": "one I could see that uh in indeed root partition was given Direct Control of the DPM right but I'm not sure if it's",
    "start": "2784559",
    "end": "2791680"
  },
  {
    "text": "true in in in in the letter releases but still even if it does what what would be",
    "start": "2791680",
    "end": "2797359"
  },
  {
    "text": "the possible impact how how how would you use it to actually compromise the hypervisor just ability to access",
    "start": "2797359",
    "end": "2804319"
  },
  {
    "text": "TPM I am not aware of any direct attack that could be used to compromise the Hy",
    "start": "2804319",
    "end": "2811839"
  },
  {
    "text": "provisor say it again",
    "start": "2812119",
    "end": "2816440"
  },
  {
    "text": "partion that encrypts what en yes but it's it's assuming Microsoft",
    "start": "2821839",
    "end": "2829599"
  },
  {
    "text": "did it properly so after reading the key it changes the PCR values right it's no",
    "start": "2829599",
    "end": "2836400"
  },
  {
    "text": "longer possible right if if the encryption key is sealed to particular PCR values meaning particular state of",
    "start": "2836400",
    "end": "2843640"
  },
  {
    "text": "the platform then it's not possible I haven't checked that I assume they did the right thing because it's it's more",
    "start": "2843640",
    "end": "2849599"
  },
  {
    "text": "or less obvious right that you need to do",
    "start": "2849599",
    "end": "2855880"
  },
  {
    "text": "that",
    "start": "2857960",
    "end": "2860960"
  },
  {
    "text": "resar say it again",
    "start": "2864440",
    "end": "2869078"
  },
  {
    "text": "resarch res said Windows what windows2 ah to",
    "start": "2872599",
    "end": "2878440"
  },
  {
    "text": "12 uh no I I didn't I just focus on Windows 10 because again it's I'm most",
    "start": "2878440",
    "end": "2885280"
  },
  {
    "text": "interested in client side uh security solution so that's my main field of",
    "start": "2885280",
    "end": "2892400"
  },
  {
    "text": "Interest okay thanks are you familiar with sgx and can you hear",
    "start": "2893640",
    "end": "2901119"
  },
  {
    "text": "me oh oh if you're familiar with sgx",
    "start": "2901119",
    "end": "2907000"
  },
  {
    "text": "s complimentary architecture or a contestant say it again uh is sgx a con",
    "start": "2907000",
    "end": "2914760"
  },
  {
    "text": "complimentary architecture or contestants to this complimentary and",
    "start": "2914760",
    "end": "2920359"
  },
  {
    "text": "contestant uh I don't think you could Implement",
    "start": "2920359",
    "end": "2926280"
  },
  {
    "text": "same things with sgx maybe credential guard could be used",
    "start": "2926280",
    "end": "2933319"
  },
  {
    "text": "for that and you have some sort of trusted code right and only release",
    "start": "2933319",
    "end": "2938880"
  },
  {
    "text": "Secrets uh that's interesting question lgx looks much more reliable right",
    "start": "2938880",
    "end": "2944960"
  },
  {
    "text": "because uh again it just carves some memory and runs code protected from",
    "start": "2944960",
    "end": "2950640"
  },
  {
    "text": "everything else in it and you have some guarantees that it cannot be tempered with so at least at least credential",
    "start": "2950640",
    "end": "2957160"
  },
  {
    "text": "guard I think potentially could be reimplemented using sgx but for instance other things like um code Integrity I",
    "start": "2957160",
    "end": "2964760"
  },
  {
    "text": "don't see how it could be done right because it requires some external control over the kernel which can only",
    "start": "2964760",
    "end": "2970960"
  },
  {
    "text": "be done by a virtualization and EP table so yeah I think credential guard could be implemented with sgx other features",
    "start": "2970960",
    "end": "2977480"
  },
  {
    "text": "likely not thank you very",
    "start": "2977480",
    "end": "2981880"
  },
  {
    "text": "much hello um in your first example on the um",
    "start": "2986720",
    "end": "2992119"
  },
  {
    "text": "encrypted token for the single signon there's absolutely no TTL on that at all",
    "start": "2992119",
    "end": "2997720"
  },
  {
    "text": "is that something can be configured with absolute no what um on the session",
    "start": "2997720",
    "end": "3004319"
  },
  {
    "text": "token for the encrypted um token that you get the session token right when you do theay I",
    "start": "3004319",
    "end": "3011000"
  },
  {
    "text": "haven't I haven't seen it expire any time yeah that's a good question they could add it uh but then if they added",
    "start": "3011000",
    "end": "3018040"
  },
  {
    "text": "any TTL or expiry time it would mean that in case of legal user right using",
    "start": "3018040",
    "end": "3023200"
  },
  {
    "text": "it he would get he would be prompted to relog in right yeah that kind of impacts",
    "start": "3023200",
    "end": "3028640"
  },
  {
    "text": "per usability uh same is about uh car sticket right TGT has expired time I",
    "start": "3028640",
    "end": "3035240"
  },
  {
    "text": "think default 7 days so after that user needs to relog and again implementing",
    "start": "3035240",
    "end": "3041599"
  },
  {
    "text": "this shorten lifespan of of credentials might help but again it impacts",
    "start": "3041599",
    "end": "3047200"
  },
  {
    "text": "usability and doesn't entirely solve the problem right because if you have like you know two days uh to start lateral",
    "start": "3047200",
    "end": "3053480"
  },
  {
    "text": "movement possibly it's enough you know to compromise the whole network right I'm thinking not 3 to six hours but yeah",
    "start": "3053480",
    "end": "3062240"
  },
  {
    "text": "thanks okay I guess that's it thank you",
    "start": "3063160",
    "end": "3070559"
  }
]