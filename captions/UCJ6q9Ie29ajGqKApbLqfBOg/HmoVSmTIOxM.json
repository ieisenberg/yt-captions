[
  {
    "start": "0",
    "end": "46000"
  },
  {
    "text": "good afternoon welcome to the past last child abusing kubernetes default in",
    "start": "30",
    "end": "5299"
  },
  {
    "text": "Mandalay Bay Lagoon from jkl with Ian Coldwater and Davi before we",
    "start": "5299",
    "end": "14309"
  },
  {
    "text": "begin I have a few brief notes stop stop by the business hole located in Mandalay Bay Oceanside and shoreline",
    "start": "14309",
    "end": "20460"
  },
  {
    "text": "ballrooms on level 2 during the day in for the Welcome Reception at 5:30 p.m. the blackhat Arsenal is in a business",
    "start": "20460",
    "end": "27150"
  },
  {
    "text": "hall on level 2 and join us for the pony Awards in Laguna Niguel at 6:30 p.m.",
    "start": "27150",
    "end": "32340"
  },
  {
    "text": "it's in this room thank you for putting your phones on vibrate as well it makes this easier for the rest of us to ignore",
    "start": "32340",
    "end": "38430"
  },
  {
    "text": "the ringing in while you wait for your voicemail to pick it up in Rocky it's all yours thank you thank you everybody",
    "start": "38430",
    "end": "46230"
  },
  {
    "start": "46000",
    "end": "66000"
  },
  {
    "text": "hear me okay awesome before we started I wanted to just thank blackhat and all of",
    "start": "46230",
    "end": "54030"
  },
  {
    "text": "the organizers and all of therapy board the people who put in the work for all of us to be here today that's awesome",
    "start": "54030",
    "end": "59730"
  },
  {
    "text": "and thank all of you for being here and taking time out of your day to be here with us my name is Ian Coldwater and",
    "start": "59730",
    "end": "68510"
  },
  {
    "start": "66000",
    "end": "116000"
  },
  {
    "text": "this talk is called the path less traveled of using kubernetes defaults if you are here to hear about something",
    "start": "68510",
    "end": "74939"
  },
  {
    "text": "other than kubernetes you're in the wrong room and that's all right we can hang out anyway I'm a lead platform",
    "start": "74939",
    "end": "80430"
  },
  {
    "text": "security engineer at Heroku and I specialized in hacking and hardening kubernetes containers and cloud",
    "start": "80430",
    "end": "85500"
  },
  {
    "text": "infrastructure before that I was an independent penetration testing consultant I'm focusing on the same",
    "start": "85500",
    "end": "91079"
  },
  {
    "text": "my name is Duffy Cooley I'm a staff cloud native architect at VMware and I focus on helping enterprises find",
    "start": "91079",
    "end": "97650"
  },
  {
    "text": "success with VMware and this kind of include new cloud native regime I'm a part of a weekly video blog",
    "start": "97650",
    "end": "104610"
  },
  {
    "text": "that's called TGI K you can find it online at TGA TDI K dot IO and if you're interested in the kubernetes pace I",
    "start": "104610",
    "end": "110850"
  },
  {
    "text": "highly recommend that you review what's there we're really excited to be here talking with you today so the first",
    "start": "110850",
    "end": "117960"
  },
  {
    "start": "116000",
    "end": "139000"
  },
  {
    "text": "thing we want to say is check your assumptions if you have assumed that kubernetes is secure by default or that",
    "start": "117960",
    "end": "124320"
  },
  {
    "text": "applications deployed on kubernetes are secure by default we recommend that you don't because they aren't and",
    "start": "124320",
    "end": "132420"
  },
  {
    "text": "when kubernetes gets left on out of the box you can do all kinds of wild things with it which is what we're going to",
    "start": "132420",
    "end": "138000"
  },
  {
    "text": "show you today so but before that let's talk about kubernetes defaults because it's a little bit of a misnomer like the",
    "start": "138000",
    "end": "144420"
  },
  {
    "start": "139000",
    "end": "208000"
  },
  {
    "text": "cake is a lie here there is no singular set of kubernetes defaults it varies",
    "start": "144420",
    "end": "150390"
  },
  {
    "text": "widely depending on public clouds distributions just out of the box and",
    "start": "150390",
    "end": "156180"
  },
  {
    "text": "every single cluster is probably going to be a little bit different according to how it gets configured so that attack",
    "start": "156180",
    "end": "162330"
  },
  {
    "text": "surface doesn't always look the same but generally speaking we can speak to kubernetes as a system how it works and",
    "start": "162330",
    "end": "168569"
  },
  {
    "text": "how to attack that so that's what we're going to do so I work on a project called cube ATM which is actually trying to rationalize some of those defaults",
    "start": "168569",
    "end": "174930"
  },
  {
    "text": "and provide reasonable defaults for bringing you to the place where you have infrastructure or machines and networks",
    "start": "174930",
    "end": "180000"
  },
  {
    "text": "already stood up and you're trying to get to a fully configured kubernetes cluster cube EDM does actually provide a",
    "start": "180000",
    "end": "186510"
  },
  {
    "text": "reasonable set of default security options and we're probably gonna talk through a little bit of that but all of",
    "start": "186510",
    "end": "192959"
  },
  {
    "text": "the demonstration environments that we're gonna be showing off today in this talk are actually brought up using a project called kind which stands for",
    "start": "192959",
    "end": "199530"
  },
  {
    "text": "kubernetes and docker and it leverages cube ATM to stand up the cluster so in our resources lens you can find a lot",
    "start": "199530",
    "end": "205859"
  },
  {
    "text": "more information about what we're doing here it's worth noting that we're attacking this cluster that has been set",
    "start": "205859",
    "end": "212040"
  },
  {
    "start": "208000",
    "end": "261000"
  },
  {
    "text": "up with the same reasonable and relatively secure set of defaults actual defaults that are not defined by coab",
    "start": "212040",
    "end": "218040"
  },
  {
    "text": "Adium are usually worse so keep that in mind so what is super days so kubernetes",
    "start": "218040",
    "end": "224130"
  },
  {
    "text": "is a container orchestration system it described a class of system that helps us manage the lifecycle and and in the",
    "start": "224130",
    "end": "231390"
  },
  {
    "text": "complex architectures of some of these new cloud native applications as a cloud as a container Orchestrator it's",
    "start": "231390",
    "end": "238109"
  },
  {
    "text": "actually pretty successful most people who are actually looking at kubernetes are looking for two things the first is",
    "start": "238109",
    "end": "244260"
  },
  {
    "text": "actually a better efficiency through like API models so you can actually deploy some of these complex applications and and figure out how they",
    "start": "244260",
    "end": "250799"
  },
  {
    "text": "will connect and secure them and that sort of stuff through a single API and the second is actually bin packing or better efficiency of those machines that",
    "start": "250799",
    "end": "258000"
  },
  {
    "text": "they deploy in some of the more expensive clouds that we see out there when we're talking about kubernetes as",
    "start": "258000",
    "end": "263010"
  },
  {
    "start": "261000",
    "end": "281000"
  },
  {
    "text": "an attack surface kerbin really means two things it means it's an application with its associated set of",
    "start": "263010",
    "end": "269849"
  },
  {
    "text": "binaries that can be end the application can be configured and it's also an API",
    "start": "269849",
    "end": "274860"
  },
  {
    "text": "based platform defined by yellow so both of those things can be attached in different ways and we're going to cover",
    "start": "274860",
    "end": "280379"
  },
  {
    "text": "them both so how does kubernetes work let's talk about what's in there and how",
    "start": "280379",
    "end": "286379"
  },
  {
    "start": "281000",
    "end": "403000"
  },
  {
    "text": "those parts move so this diagram you can actually see all of the the actual parts",
    "start": "286379",
    "end": "293129"
  },
  {
    "text": "that make up the application that is coop right in the left hand side box you see the you see Etsy D and se D",
    "start": "293129",
    "end": "300150"
  },
  {
    "text": "represents a key value store where all of the state for the cluster is kept this is where we would hold things like",
    "start": "300150",
    "end": "305610"
  },
  {
    "text": "config maps or configuration files that will be associated with pods when they're brought up in the middle just to",
    "start": "305610",
    "end": "311580"
  },
  {
    "text": "the left of the Etsy D pod or e at the ED CD image we have the API server and you can see by the plethora of error",
    "start": "311580",
    "end": "317879"
  },
  {
    "text": "arrows that everything talks to the API server the people on the outside the services on the inside everything talks",
    "start": "317879",
    "end": "324750"
  },
  {
    "text": "to that API server and that the API server is the only thing that talks to the - Etsy D the API server does kind of",
    "start": "324750",
    "end": "331919"
  },
  {
    "text": "what you would expect an API server to do it's going to handle authentication and authorization it's going to take",
    "start": "331919",
    "end": "337169"
  },
  {
    "text": "care of invalidating all of the manifests or objects that get submitted to the API and it's gonna handle that",
    "start": "337169",
    "end": "343740"
  },
  {
    "text": "sort of stuff if we look below the API server we see the controller manager and the scheduler the scheduler does kind of",
    "start": "343740",
    "end": "350849"
  },
  {
    "text": "like what you would expect it to do its job is literally to associate a pod or a pod manifest somewhere to get more into",
    "start": "350849",
    "end": "357750"
  },
  {
    "text": "like what that is and see some examples with a specific node or cubelet and the controller managers a bit more complex",
    "start": "357750",
    "end": "363750"
  },
  {
    "text": "the controller managers responsibility is actually to run a number of different control loops that are each responsible",
    "start": "363750",
    "end": "369509"
  },
  {
    "text": "for breaking down the higher level of abstractions inside of kubernetes down to the lower level ones so if you've",
    "start": "369509",
    "end": "375419"
  },
  {
    "text": "played with kubernetes at all you would have made a deployment the controller manager is partly responsible for turning that into pods on the right we",
    "start": "375419",
    "end": "382439"
  },
  {
    "text": "see two cubelets or two worker nodes and the worker node is running that agent the cubelet and",
    "start": "382439",
    "end": "387750"
  },
  {
    "text": "that cubelet is responsible for keeping track of all of the work associated with that particular node and starting up and",
    "start": "387750",
    "end": "394289"
  },
  {
    "text": "managing the lifecycle of containers directly so the cubelet when it posed Manifest it's actually going to interact",
    "start": "394289",
    "end": "399880"
  },
  {
    "text": "with docker to create those containers that make up that workflow as an attacker let's take another look at this",
    "start": "399880",
    "end": "406300"
  },
  {
    "start": "403000",
    "end": "543000"
  },
  {
    "text": "series of kubernetes components because we're gonna be talking a lot about how kubernetes works today because it's",
    "start": "406300",
    "end": "411310"
  },
  {
    "text": "really important to be able to understand how it works on a deep system level to be able to understand how attack it well so at CD we have this key",
    "start": "411310",
    "end": "420130"
  },
  {
    "text": "value store that contains all of the state and all of the information about what's happening in the cluster as an",
    "start": "420130",
    "end": "425380"
  },
  {
    "text": "attacker at CD is a high value target because it contains interesting",
    "start": "425380",
    "end": "430810"
  },
  {
    "text": "information that I might want to exit rate or steal such as cloud metadata and",
    "start": "430810",
    "end": "436140"
  },
  {
    "text": "credentials things like that potentially it also is worth noting that Etsy D because Corinna DS is a loosely coupled",
    "start": "436140",
    "end": "442870"
  },
  {
    "text": "distributed system at CD is writable it's not just read-only it works both ways and so because Etsy D is the final word",
    "start": "442870",
    "end": "450610"
  },
  {
    "text": "on like what is happening the state in the cluster you can write to it and then you can modify State which can give you",
    "start": "450610",
    "end": "457660"
  },
  {
    "text": "all kinds of options as an attacker the API server is the highest value target as an attacker because the API server as",
    "start": "457660",
    "end": "464440"
  },
  {
    "text": "you can see either touches everything where everything touches it if you can get control over the API server which is",
    "start": "464440",
    "end": "471630"
  },
  {
    "text": "you know what's going to dictate what is allowed to be you know what kind of",
    "start": "471630",
    "end": "478150"
  },
  {
    "text": "traffic is allowed what's happening is going to be like making the orders for what's going on there then you can get",
    "start": "478150",
    "end": "483460"
  },
  {
    "text": "access to pretty much all of the components and you're able to get a fair",
    "start": "483460",
    "end": "488830"
  },
  {
    "text": "amount of control like a lot of it over the cluster so going over to the worker",
    "start": "488830",
    "end": "494020"
  },
  {
    "text": "nodes the cubelet is incredibly valuable as an exploit target because the cubelet",
    "start": "494020",
    "end": "500410"
  },
  {
    "text": "is what executes all of the decisions that are being made with your configuration and and is able to control",
    "start": "500410",
    "end": "508540"
  },
  {
    "text": "the state of the cluster and what's in it the cubelet has its own separate API that interacts with the API server if",
    "start": "508540",
    "end": "515380"
  },
  {
    "text": "you can get access to the cubelet you can do things like create users you can create service account roles and you can",
    "start": "515380",
    "end": "522190"
  },
  {
    "text": "change around authorization stuff so that you can get that you could also affect what's in the cluster and you",
    "start": "522190",
    "end": "527980"
  },
  {
    "text": "have a lot of administrative access if you can get access to the queue but the cubelet has Doralee is the subject of a lot of the",
    "start": "527980",
    "end": "535400"
  },
  {
    "text": "more high-profile attacks that have happened historically with kubernetes like Tesla and ones that it happened",
    "start": "535400",
    "end": "541310"
  },
  {
    "text": "over time so now we're going to move on",
    "start": "541310",
    "end": "546680"
  },
  {
    "start": "543000",
    "end": "563000"
  },
  {
    "text": "to the kubernetes api part of it alright before we do that I want to just touch on the fact that like there is a lot of",
    "start": "546680",
    "end": "552140"
  },
  {
    "text": "configuration in between all those pieces securing the communications with TLS and all about stuff we don't have",
    "start": "552140",
    "end": "557480"
  },
  {
    "text": "time for that in this talk but suffice to say that diagram is very high level compared to what's actually out there",
    "start": "557480",
    "end": "563150"
  },
  {
    "start": "563000",
    "end": "594000"
  },
  {
    "text": "there's also a lot of misconfigurations yes all of those components all of which can be valuable for attackers so the",
    "start": "563150",
    "end": "569030"
  },
  {
    "text": "kubernetes api is generally accessed through a number of different means it's a restful api you can interact with it",
    "start": "569030",
    "end": "574220"
  },
  {
    "text": "directly with curl if you want there is actually a cube cube kettle is a binary that you can download as part of a",
    "start": "574220",
    "end": "580310"
  },
  {
    "text": "distribution of kubernetes and that cube kettle binary track acts as a local command-line tool that you can use to",
    "start": "580310",
    "end": "587570"
  },
  {
    "text": "interact with that kubernetes api directly and it'll take care of your authorization and authentication using",
    "start": "587570",
    "end": "592910"
  },
  {
    "text": "your config kettle is also known as to control coop CTL and crew cuddle and",
    "start": "592910",
    "end": "599030"
  },
  {
    "start": "594000",
    "end": "633000"
  },
  {
    "text": "when I talk about coop CTL I'm talking about the same thing and that's important to note because otherwise it's confusing think about it like given",
    "start": "599030",
    "end": "605450"
  },
  {
    "text": "there are other so there are some other superpowers that cube kettle has one of the ones I like to tell people about as few Kittel explain coop it will explain",
    "start": "605450",
    "end": "612440"
  },
  {
    "text": "enables you to actually explore the entire API so if you want to know what all of the fields that are defined",
    "start": "612440",
    "end": "618710"
  },
  {
    "text": "within a particular pod or deployment manifest are or what that default so for those things are you can use cube kettle",
    "start": "618710",
    "end": "624950"
  },
  {
    "text": "explained to interact with that API and look at it finally the last command here is basically just showing off queue",
    "start": "624950",
    "end": "630830"
  },
  {
    "text": "petal apply which is how most people interact with it as an attacker if you can socially engineer somebody to coop",
    "start": "630830",
    "end": "636500"
  },
  {
    "start": "633000",
    "end": "652000"
  },
  {
    "text": "CTL apply your lovely helpful yellow file that will show them how to use things or whatever it is that you can",
    "start": "636500",
    "end": "642500"
  },
  {
    "text": "convince them to do they run it they don't look at it it's yours and you can do whatever you want with it",
    "start": "642500",
    "end": "648380"
  },
  {
    "text": "so configuration this code can be a pretty powerful thing on all ends so how do those moving parts fit together like",
    "start": "648380",
    "end": "655130"
  },
  {
    "text": "what exactly is happening there end of a hood so you talk about kubernetes being a loosely coupled system and in this",
    "start": "655130",
    "end": "661070"
  },
  {
    "text": "diagram we're going to show kind of like the life cycle of a pod being created so in the beginning here we have a",
    "start": "661070",
    "end": "666360"
  },
  {
    "text": "person probably making use of cube kettles applying a pod manifest to the API server the API server is going to",
    "start": "666360",
    "end": "672090"
  },
  {
    "text": "introspect that and understand is this person who is authenticating do they have a reasonable credential are they do",
    "start": "672090",
    "end": "678150"
  },
  {
    "text": "they have authorization to create this resource within the cluster according to the namespace that it's being put in all",
    "start": "678150",
    "end": "683850"
  },
  {
    "text": "that other stuff it's also going to validate that you have all the fields necessary to define what a pod is once",
    "start": "683850",
    "end": "689760"
  },
  {
    "text": "it gets through that entire process it's actually going to persist that object in the key value store in SU D and then",
    "start": "689760",
    "end": "695190"
  },
  {
    "text": "it's gonna report back pod created you're done the API server is now finished with its work the next part",
    "start": "695190",
    "end": "701190"
  },
  {
    "text": "that happens is that the scheduler who is also watching the API server gets informed that there is now a new pod but",
    "start": "701190",
    "end": "707220"
  },
  {
    "text": "it is not associated with an underlying node and so it does its scheduling thing it just figures out which node it wants",
    "start": "707220",
    "end": "713160"
  },
  {
    "text": "to schedule that pod on based on some hints and things inside of the pot spec and it will actually schedule that on a",
    "start": "713160",
    "end": "719700"
  },
  {
    "text": "node and persist basically another field into that pod spec called node name back",
    "start": "719700",
    "end": "725580"
  },
  {
    "text": "to that object and the key value stored at sea in in the API server and then back to a CD the next thing we have is",
    "start": "725580",
    "end": "732180"
  },
  {
    "text": "the cubelet this is the one that's actually doing the heavy lifting I call this out because it's interesting we think about a pod as two different",
    "start": "732180",
    "end": "738000"
  },
  {
    "text": "things one is a manifest basically just metadata describing what we want to deploy and the other is a set of running",
    "start": "738000",
    "end": "744000"
  },
  {
    "text": "containers or processes sitting on a node somewhere so in this case we're talking about the cubelet pulling down",
    "start": "744000",
    "end": "749160"
  },
  {
    "text": "that manifest and setting about the work of creating those containers it does that by calling out to your container",
    "start": "749160",
    "end": "754770"
  },
  {
    "text": "runtime could be docker container d there are a bunch of them out there it also will connect a network and do a",
    "start": "754770",
    "end": "759960"
  },
  {
    "text": "lot of the other stuff necessary for the lifecycle of that pod once it and it will report back to the api server",
    "start": "759960",
    "end": "765960"
  },
  {
    "text": "status you know i'm downloading the image i've started the container all these things are happening and it will",
    "start": "765960",
    "end": "771150"
  },
  {
    "text": "continue to inform you where it as where it is in that process so as an attacker let's take another look at this moving",
    "start": "771150",
    "end": "777480"
  },
  {
    "start": "774000",
    "end": "848000"
  },
  {
    "text": "parts diagram and let's figure out what's happening there that it could be potentially interesting to us so the API",
    "start": "777480",
    "end": "784200"
  },
  {
    "text": "server as you can see does a lot of the kind of moving back and forth here and",
    "start": "784200",
    "end": "789540"
  },
  {
    "text": "the API server is responsible for things like authorization and authentication and routing CVE 2018 one zero zero two",
    "start": "789540",
    "end": "796800"
  },
  {
    "text": "one zero five which came out last December was a server-side request",
    "start": "796800",
    "end": "803010"
  },
  {
    "text": "forgery where no else oh my god okay what that was was attackers could send a",
    "start": "803010",
    "end": "808950"
  },
  {
    "text": "specially crafted request and that said connection upgrade and because they",
    "start": "808950",
    "end": "814590"
  },
  {
    "text": "weren't malla dating for error codes it just opened a WebSocket whether or not it was correct and if you",
    "start": "814590",
    "end": "819690"
  },
  {
    "text": "could communicate directly with the people it and the backend while bypassing the API servers authentication",
    "start": "819690",
    "end": "825960"
  },
  {
    "text": "and authorization entirely which was pretty nasty and pretty easily mitigated as it turned out because all you needed",
    "start": "825960",
    "end": "831510"
  },
  {
    "text": "to do is validate for error codes so that's one like way historically if you look at that how at eckers have been",
    "start": "831510",
    "end": "838080"
  },
  {
    "text": "able to attack the API server another thing that we can do is you may have noticed that in our components diagram",
    "start": "838080",
    "end": "843360"
  },
  {
    "text": "as an attacker I didn't actually mention the controller manager or scheduler at all mostly because for the most part",
    "start": "843360",
    "end": "849900"
  },
  {
    "start": "848000",
    "end": "869000"
  },
  {
    "text": "it's irrelevant to me except that you can bypass it by directly scheduling a pod and if you can by pets if you can",
    "start": "849900",
    "end": "856650"
  },
  {
    "text": "directly schedule a pod on a node you might be able to do some interesting things with it especially if for example",
    "start": "856650",
    "end": "862170"
  },
  {
    "text": "your cubelet is scheduled on the same pod as the underlying node which is the default for kubb ATM so we've had a lot",
    "start": "862170",
    "end": "870270"
  },
  {
    "text": "of kubernetes words here anybody want to see how to attack some stuff yeah let's do it all right Felipe so in this",
    "start": "870270",
    "end": "879300"
  },
  {
    "start": "877000",
    "end": "895000"
  },
  {
    "text": "demonstration we're gonna we're gonna deploy an sed client that's pre-configured to access sed running on",
    "start": "879300",
    "end": "885600"
  },
  {
    "text": "a control plane note now as we said cube ATM puts a cubelet on that control plane node and so we can use this direct",
    "start": "885600",
    "end": "891990"
  },
  {
    "text": "scheduling trick to actually attach to that so what we're gonna do here is",
    "start": "891990",
    "end": "897180"
  },
  {
    "start": "895000",
    "end": "961000"
  },
  {
    "text": "we're going to direct schedule our pod on the underlying node we're going to dump at CD get secrets from it and do",
    "start": "897180",
    "end": "903240"
  },
  {
    "text": "some fun stuff so this is a pod manifest and it's pretty verbose it's got a lot of information in it but basically we're",
    "start": "903240",
    "end": "909990"
  },
  {
    "text": "telling that we're gonna create a kind pod and then all the rest of this represents the body of that post we're",
    "start": "909990",
    "end": "915660"
  },
  {
    "text": "describing the image that we want to use for the sit for this we're just going to use the same entity image that is actually being used to run a CD inside",
    "start": "915660",
    "end": "921930"
  },
  {
    "text": "the cluster because it actually also has the Etsy dica CLI command line tool we're providing some environment",
    "start": "921930",
    "end": "928260"
  },
  {
    "text": "variables that are actually going to pre configure a CD for us so we don't actually have to pass a bunch of command command-line arguments",
    "start": "928260",
    "end": "934660"
  },
  {
    "text": "to Etsy DK CTL and then we're also going to mount in the certificates that we",
    "start": "934660",
    "end": "939700"
  },
  {
    "text": "need to be able to authenticate to Etsy D using host paths a very powerful capability of kubernetes and then we",
    "start": "939700",
    "end": "948190"
  },
  {
    "text": "also have host network and the reason we're doing host network is because we need to basically access that local host",
    "start": "948190",
    "end": "953350"
  },
  {
    "text": "address and so we need to be a 16 the host network to be able to achieve that",
    "start": "953350",
    "end": "959790"
  },
  {
    "start": "961000",
    "end": "995000"
  },
  {
    "text": "let's go ahead and deploy that now I've used this tool pretty extensively to",
    "start": "961980",
    "end": "969010"
  },
  {
    "text": "actually interact with to interact with sed in a troubleshooting fashion like finally to remove a member or understand",
    "start": "969010",
    "end": "975610"
  },
  {
    "text": "performance or see what the status of public of the sed cluster is directly",
    "start": "975610",
    "end": "982620"
  },
  {
    "text": "but there's other stuff we could do so other things we might be able to do as I said we could maybe try to see if",
    "start": "983910",
    "end": "990340"
  },
  {
    "text": "there's any kind of interesting secrets or credentials in there that might do anything for us so let's take a look",
    "start": "990340",
    "end": "996000"
  },
  {
    "start": "995000",
    "end": "1035000"
  },
  {
    "text": "well okay we've got all of the secrets in there those are broken down by",
    "start": "996000",
    "end": "1001020"
  },
  {
    "text": "namespace you'll see you know ku public tube system coupe system as it sounds like is the namespace that has system",
    "start": "1001020",
    "end": "1006750"
  },
  {
    "text": "access note that there is one particularly interesting one in here called cluster roll aggregation",
    "start": "1006750",
    "end": "1013050"
  },
  {
    "text": "controller cluster roll aggregation controller in kubernetes by default to this day allows complete administrative",
    "start": "1013050",
    "end": "1020640"
  },
  {
    "text": "access to the cluster to default or by default so if we can get access to the token for example for cluster roll",
    "start": "1020640",
    "end": "1026670"
  },
  {
    "text": "aggregation controller we can authenticate with that token and have complete control over the cluster so",
    "start": "1026670",
    "end": "1032100"
  },
  {
    "text": "let's do that let's grab that token there's your token if we use a tool called this came out in",
    "start": "1032100",
    "end": "1040470"
  },
  {
    "start": "1035000",
    "end": "1070000"
  },
  {
    "text": "kubernetes 1.13 poop CTL can't I - - list this was the best thing as a pen",
    "start": "1040470",
    "end": "1048209"
  },
  {
    "text": "tester because before that happened we would have to manually list out like do every single call to say if we had",
    "start": "1048209",
    "end": "1054600"
  },
  {
    "text": "permissions to do it which was as you perhaps imagine really annoying it took forever but kubernetes made it so much",
    "start": "1054600",
    "end": "1061050"
  },
  {
    "text": "easier for us by just automating our enumeration process for so now we can just do that and see all of the permissions that we have on my",
    "start": "1061050",
    "end": "1067080"
  },
  {
    "text": "cluster just like that so let's try that with this Nokia fuel we got oh we have a",
    "start": "1067080",
    "end": "1072270"
  },
  {
    "text": "wild card we have access to everything so we grab that token we can identikit",
    "start": "1072270",
    "end": "1078210"
  },
  {
    "text": "with it it's ours game over you'll find that a lot of kubernetes clusters or maybe not using TLS between the",
    "start": "1078210",
    "end": "1084330"
  },
  {
    "text": "components or that you can actually get a hold of if they run cubelet directly on a control point note that you have",
    "start": "1084330",
    "end": "1090570"
  },
  {
    "text": "that access to be able to do this stuff so some time on takeaways here users can",
    "start": "1090570",
    "end": "1098700"
  },
  {
    "start": "1095000",
    "end": "1155000"
  },
  {
    "text": "create pods that have wild permissions by default tube ADM schedules the",
    "start": "1098700",
    "end": "1105480"
  },
  {
    "text": "couplet directly on the underlying node which you ought not to be runs it on that node which you shouldn't do and as",
    "start": "1105480",
    "end": "1112500"
  },
  {
    "text": "an attacker if you can grab that token for that particular role you can take it over really easily and the other two",
    "start": "1112500",
    "end": "1119309"
  },
  {
    "text": "pieces of takeaway here I think they're important is that people frequently think that when you start exploring kubernetes that you know being able to",
    "start": "1119309",
    "end": "1126020"
  },
  {
    "text": "to isolate nodes with labels or that sort of thing can be thought of as a security boundary and that's clearly not the case right in",
    "start": "1126020",
    "end": "1133169"
  },
  {
    "text": "this case what we're doing is directly scheduling a pod and that means if the scheduler never sees it and because of",
    "start": "1133169",
    "end": "1138630"
  },
  {
    "text": "that you can't assume that the schedulers ever are going to be a security boundary the last one is that namespace isolation is not enough if I",
    "start": "1138630",
    "end": "1145530"
  },
  {
    "text": "have access to the underlying host and have access to that underlying host regardless of what pods associated with",
    "start": "1145530",
    "end": "1151500"
  },
  {
    "text": "what namespaces are in to mitigate them so we mentioned host path and we're",
    "start": "1151500",
    "end": "1158309"
  },
  {
    "start": "1155000",
    "end": "1246000"
  },
  {
    "text": "gonna go into host path a little farther because host path is wild house path is so wild that we named this talk after it",
    "start": "1158309",
    "end": "1164390"
  },
  {
    "text": "the kubernetes documentation describes host path as there is a screenshot that is from that site a powerful escape",
    "start": "1164390",
    "end": "1171510"
  },
  {
    "text": "hatch they're not kidding it is an incredibly powerful escape hatch you can escape all kinds of things with it and",
    "start": "1171510",
    "end": "1177980"
  },
  {
    "text": "there are so many options for what you can do if you pin volume mount the host",
    "start": "1177980",
    "end": "1183480"
  },
  {
    "text": "and be able to have that kind of control in relation to the host so we're gonna keep exploring that because there's a",
    "start": "1183480",
    "end": "1189299"
  },
  {
    "text": "lot happening here and we had more exploits here than we had space for so you know use your imagination okay so",
    "start": "1189299",
    "end": "1196380"
  },
  {
    "text": "host pass it amounts of file or directory' from the host notes file system into your pod",
    "start": "1196380",
    "end": "1201540"
  },
  {
    "text": "when I first heard about his path I was like what on earth like to me this is an obvious attack tool right like what",
    "start": "1201540",
    "end": "1207610"
  },
  {
    "text": "would you even want that for does it have like legitimate use cases and as it turns out it does there are a few use",
    "start": "1207610",
    "end": "1214090"
  },
  {
    "text": "cases I'm bootstrapping a cluster you know it's path to be able to get to the stuff necessary tip gonna bring the",
    "start": "1214090",
    "end": "1219640"
  },
  {
    "text": "cluster back up and in the case of a power outage another is a docker and docker is a common use case people who",
    "start": "1219640",
    "end": "1225280"
  },
  {
    "text": "want to build containers inside of kubernetes frequently think the cut docker and docker is a good solution for",
    "start": "1225280",
    "end": "1231370"
  },
  {
    "text": "this there are other solutions for that out there today but that's another one of the use cases you're basically",
    "start": "1231370",
    "end": "1237340"
  },
  {
    "text": "mounting in the docker socket underneath saccharin docker is very commonly used and also a very good attack target in",
    "start": "1237340",
    "end": "1243700"
  },
  {
    "text": "and of itself which we'll talk about in a bit so doctor in docker doctor and",
    "start": "1243700",
    "end": "1250810"
  },
  {
    "start": "1246000",
    "end": "1290000"
  },
  {
    "text": "docker I think that people think sometimes that certain kinds of docker attacks can only happen if the contain",
    "start": "1250810",
    "end": "1257350"
  },
  {
    "text": "if the container is privileged and that's not actually the case it is actually possible to via attacks on",
    "start": "1257350",
    "end": "1264730"
  },
  {
    "text": "docker and docker escalate privileges to root on the underlying host from an",
    "start": "1264730",
    "end": "1269770"
  },
  {
    "text": "entirely unprivileged pod with all of the security things on it the docker",
    "start": "1269770",
    "end": "1275410"
  },
  {
    "text": "socket lives at Marv run docker sake it's not unique to docker other container runtimes also have them they'll be differently named and that is",
    "start": "1275410",
    "end": "1281620"
  },
  {
    "text": "a very valid like great target for us especially if we can mount it with something like host path so let's take a",
    "start": "1281620",
    "end": "1288040"
  },
  {
    "text": "look at what we can do so we're gonna",
    "start": "1288040",
    "end": "1295660"
  },
  {
    "start": "1290000",
    "end": "1372000"
  },
  {
    "text": "bring up a pod and we're going to show you the manifest necessary to bring up a pot it has access to the underlying docker socket again this is a pretty",
    "start": "1295660",
    "end": "1302050"
  },
  {
    "text": "common use case inside of kubernetes and I find a lot of people doing it and I shake my head a lot when it happens but",
    "start": "1302050",
    "end": "1308410"
  },
  {
    "text": "we're gonna walk through this manifest this is a little more complex than the previous one up here at the top we have an annotation that describes this asset",
    "start": "1308410",
    "end": "1314230"
  },
  {
    "text": "calm profile that docker will use when it's starting up that this particular container down below in the security",
    "start": "1314230",
    "end": "1320500"
  },
  {
    "text": "context inside of the spec of the pod we are also specifying a user a group and @fs group and this is an interesting",
    "start": "1320500",
    "end": "1327490"
  },
  {
    "text": "detail this is dynamic I can change that you or group ID before actually deploying",
    "start": "1327490",
    "end": "1333370"
  },
  {
    "text": "the pod if I'd made this a deployment I could just edit the deployment and change the UID and GID and all of these",
    "start": "1333370",
    "end": "1339310"
  },
  {
    "text": "pods would be started up with that new UID and GID it's not defined inside the container it's defined at docker at",
    "start": "1339310",
    "end": "1345160"
  },
  {
    "text": "runtime and it's being is basically making use of the user name space in",
    "start": "1345160",
    "end": "1350340"
  },
  {
    "text": "containerization we described the container we want to use and then we actually use this house host path",
    "start": "1350340",
    "end": "1355480"
  },
  {
    "text": "mechanism to mount in the VAR run docker socket we're also making sure that for this specific container we're not",
    "start": "1355480",
    "end": "1361750"
  },
  {
    "text": "allowing privilege escalation Sonos to do capabilities we're also dropping all of the Linux capabilities we're not",
    "start": "1361750",
    "end": "1367480"
  },
  {
    "text": "using any system calls to the Linux kernel that are governed by those capabilities now as a penetration tester",
    "start": "1367480",
    "end": "1373390"
  },
  {
    "text": "if I see context with that like has all of that security stuff on it it drops",
    "start": "1373390",
    "end": "1378400"
  },
  {
    "text": "all capabilities privilege escalation isn't allowed it's not running his room which is relatively rare in docker",
    "start": "1378400",
    "end": "1384180"
  },
  {
    "text": "there's a lot happening there and that probably is going to make my day pretty sad and you know I'm gonna have kind of",
    "start": "1384180",
    "end": "1391360"
  },
  {
    "text": "a hard time except that with the use of host path the powerful escape hatch maybe not maybe I'll have a little bit",
    "start": "1391360",
    "end": "1397090"
  },
  {
    "text": "of easier time let's see what happened so the first thing we didn't deploy at manifesto then we're going to be able to",
    "start": "1397090",
    "end": "1402430"
  },
  {
    "text": "see that the UID and GID are exactly what we set in our security context the second thing we're going to do is attach",
    "start": "1402430",
    "end": "1408310"
  },
  {
    "text": "to that kind of container again and take a look at the definition of the docker socket so when you install docker on a",
    "start": "1408310",
    "end": "1414730"
  },
  {
    "text": "Linux host generally and every install that I've ever seen a docker it will create a duck or group and it",
    "start": "1414730",
    "end": "1420580"
  },
  {
    "text": "will associate permissions with that docker group for the doctor socket so everything about it as long as you have",
    "start": "1420580",
    "end": "1425950"
  },
  {
    "text": "a post path you can actually figure out what group ID that is and just define your pod with that group ID and you have",
    "start": "1425950",
    "end": "1432250"
  },
  {
    "text": "full access to docker without running as without running its route and to the underlying node so",
    "start": "1432250",
    "end": "1438820"
  },
  {
    "text": "people do this because they want to be able to use docker tools there again other options out there for that stuff it's a very common matter so we're gonna",
    "start": "1438820",
    "end": "1446710"
  },
  {
    "text": "go ahead and exec eunuch in and do a docker run command to create an end your next instance and then we can see that",
    "start": "1446710",
    "end": "1453040"
  },
  {
    "text": "in the underlying hosts that are running into the next instance and then if we just wanted to drop that from the",
    "start": "1453040",
    "end": "1459429"
  },
  {
    "text": "underlying host we could actually just do that from that perspective right there so okay",
    "start": "1459429",
    "end": "1464890"
  },
  {
    "text": "I thought cool is an operator nginx alright fine so what can we do with this is an attacker well if you can get if",
    "start": "1464890",
    "end": "1472810"
  },
  {
    "text": "you can mount the docker socket on the underlying node as it turns out a fair amount when I see this as a pen gesture",
    "start": "1472810",
    "end": "1479380"
  },
  {
    "text": "it's the best thing it's like you see you hit the button on the k-cup maker you like walk out of the room you hit",
    "start": "1479380",
    "end": "1484570"
  },
  {
    "text": "enter your route you come back the coffee's done your day is done if it's dim it's great so hostname it's ours and",
    "start": "1484570",
    "end": "1492160"
  },
  {
    "text": "that's it game over so in this example the hostname that I want I want to show that I'm actually on the machine links",
    "start": "1492160",
    "end": "1497800"
  },
  {
    "text": "I'm connected to that house right there and if I touch a file in se in the NC directory yeah on that host I can see it",
    "start": "1497800",
    "end": "1504670"
  },
  {
    "text": "and now I'm gonna exec into the running container again scheduled directly on this host and from there I'm gonna just",
    "start": "1504670",
    "end": "1510400"
  },
  {
    "text": "go ahead and well that was actually",
    "start": "1510400",
    "end": "1518410"
  },
  {
    "text": "supposed to remove the flag right I guess I type with my demo you know Democrats what can you do but",
    "start": "1518410",
    "end": "1523450"
  },
  {
    "text": "yeah I mean you have full access to underlying file system at that point right because I've just mounted in bar the SC directory from the underlying",
    "start": "1523450",
    "end": "1529900"
  },
  {
    "text": "node into the container as host that's D and so I have that full access the thing that's important to remember about",
    "start": "1529900",
    "end": "1535780"
  },
  {
    "text": "docker duck or your big takeaway on docker docker is that when you run the docker command contextually it's being",
    "start": "1535780",
    "end": "1542080"
  },
  {
    "text": "run on the underlying node which means that if you express stocker and docker up to a container",
    "start": "1542080",
    "end": "1547840"
  },
  {
    "text": "you're letting something you're letting that container do anything to the underlying node anything at all",
    "start": "1547840",
    "end": "1555280"
  },
  {
    "text": "kernels all the way up so takeaways",
    "start": "1555280",
    "end": "1561970"
  },
  {
    "start": "1560000",
    "end": "1583000"
  },
  {
    "text": "doctor and doctor very powerful for everybody and perhaps not the most secure option when used this way",
    "start": "1561970",
    "end": "1570310"
  },
  {
    "text": "backers an authenticated API with full access to the kernel we all want full access to the kernel right I think we do and how can you mitigate that we can",
    "start": "1570310",
    "end": "1578320"
  },
  {
    "text": "restrict the use of host path with admission control and we'll show that here in a minute so you may notice that",
    "start": "1578320",
    "end": "1585220"
  },
  {
    "text": "that was all docker there besides host path which we were using a Nakuru Nettie's manifest that was a container",
    "start": "1585220",
    "end": "1591340"
  },
  {
    "text": "attack that could work entirely separately from a kubernetes context it's important to remember that",
    "start": "1591340",
    "end": "1596950"
  },
  {
    "text": "kubernetes a container Orchestrator basically containers are what's happening in there and so container attacks will still work",
    "start": "1596950",
    "end": "1603320"
  },
  {
    "text": "and then further it's important to remember that containers are made of Linux primitives and if you understand",
    "start": "1603320",
    "end": "1609769"
  },
  {
    "text": "Linux primitives and how to attack Linux you understand how to attack containers containers aren't magic they're just",
    "start": "1609769",
    "end": "1615860"
  },
  {
    "text": "made of Linux and so if we understand how Linux works well under the hood we can have really interesting possibilities about how to attack",
    "start": "1615860",
    "end": "1622070"
  },
  {
    "text": "container technology and by extension kubernetes so let's talk a little bit about container parts what is a",
    "start": "1622070",
    "end": "1630080"
  },
  {
    "start": "1625000",
    "end": "1667000"
  },
  {
    "text": "container container is a single process on a shared host and and the thing that's interesting the way that I think",
    "start": "1630080",
    "end": "1636380"
  },
  {
    "text": "about containers when I was really kind of getting into like what they actually do is that if you look at every Linux",
    "start": "1636380",
    "end": "1641779"
  },
  {
    "text": "process in any process analytics kernel you can see that it actually has is associated with a set of these",
    "start": "1641779",
    "end": "1648139"
  },
  {
    "text": "namespaces that's every process on the system all of them right the difference between every process and a",
    "start": "1648139",
    "end": "1654620"
  },
  {
    "text": "containerized process is that those namespaces are mapped to a specific ones specific specific to that set of",
    "start": "1654620",
    "end": "1660139"
  },
  {
    "text": "processes so containerization in a way is it's just a way of actually providing isolation to the Linux process itself",
    "start": "1660139",
    "end": "1666950"
  },
  {
    "text": "but also that means that issues regarding Linux in the way that it Maps",
    "start": "1666950",
    "end": "1672380"
  },
  {
    "text": "things like processes C groups and namespaces can also be applicable to attaining to attack in containers in",
    "start": "1672380",
    "end": "1677720"
  },
  {
    "text": "that context if you can you know attack for example the way that it deals with C",
    "start": "1677720",
    "end": "1686000"
  },
  {
    "text": "groups and namespaces you can potentially be able to break that isolation the way that Linux treats the",
    "start": "1686000",
    "end": "1691159"
  },
  {
    "text": "filesystem is that all processes namespaces all of those things everything is a file",
    "start": "1691159",
    "end": "1696710"
  },
  {
    "text": "so can me maybe do something interesting with that filesystem we'll find out in a",
    "start": "1696710",
    "end": "1702769"
  },
  {
    "text": "sec basically these primitives like there aren't new it's not it's not magic they seem like they're simple and",
    "start": "1702769",
    "end": "1708919"
  },
  {
    "text": "magical and automated but on the back end it's the same old attack surface and we can still do things that apply to",
    "start": "1708919",
    "end": "1715070"
  },
  {
    "text": "that attack surface capabilities system calls you know ways that you can manipulate those totally still apply and",
    "start": "1715070",
    "end": "1721519"
  },
  {
    "text": "the fact that container shares resources with the host other containers and",
    "start": "1721519",
    "end": "1728330"
  },
  {
    "text": "everything else on there means that the attack surface is very wide because it's shared so if you can",
    "start": "1728330",
    "end": "1735559"
  },
  {
    "text": "compromise the kernel in a container you then can compromise the kernel on the underlying node and it works like that",
    "start": "1735559",
    "end": "1742850"
  },
  {
    "text": "and it adds an attacker that's really exciting to me because I have so many options there's so many moving parts in",
    "start": "1742850",
    "end": "1748190"
  },
  {
    "text": "different places that I can go to and I don't know I think it's fun so let's",
    "start": "1748190",
    "end": "1754100"
  },
  {
    "text": "figure out well first let's look at a diagram about that and looks like through that real quick and then one",
    "start": "1754100",
    "end": "1760549"
  },
  {
    "text": "attack it so these containers that we talked about before effectively are just collections of all these individual",
    "start": "1760549",
    "end": "1766639"
  },
  {
    "text": "pieces right so a container might span all of the different see groups or namespaces that are associated with a container and that represents sort of",
    "start": "1766639",
    "end": "1773210"
  },
  {
    "text": "the packaging of that container at runtime when we think about an image of a container that's being shipped around",
    "start": "1773210",
    "end": "1778610"
  },
  {
    "text": "it's really just a tarball it's just a tarball that represents the actual file system underneath but everything is but at runtime just looks",
    "start": "1778610",
    "end": "1784940"
  },
  {
    "text": "exactly like this I know that as an attacker I really leveled up when I started to understand better like the",
    "start": "1784940",
    "end": "1793580"
  },
  {
    "text": "ways that different kinds of attacks against the Linux kernel and userland can can apply in this context the ways",
    "start": "1793580",
    "end": "1800929"
  },
  {
    "text": "that those interact with each other in a container context and outside of it and the way that those interact being able to have a deep understanding",
    "start": "1800929",
    "end": "1807529"
  },
  {
    "text": "of this system really does help in being able to attack it as well as being able to operate it so here's an interesting",
    "start": "1807529",
    "end": "1814940"
  },
  {
    "text": "thing we might be able to do he's a tweet from Duffy a little while ago when we were first working on this talk so this is a tweet I put up after seeing",
    "start": "1814940",
    "end": "1820429"
  },
  {
    "text": "another example of this I thought it was actually pretty smart what's actually happening here is that we're using cue kettle to run a container based on the",
    "start": "1820429",
    "end": "1826940"
  },
  {
    "text": "Alpine image and we're using NS enter inside of that container to enter the amount name space of the first process",
    "start": "1826940",
    "end": "1834230"
  },
  {
    "text": "on the underlying node and we're doing that because you can see in the specification it says host pid' true",
    "start": "1834230",
    "end": "1839630"
  },
  {
    "text": "that means that when I started this container I gave it access to the entire pig name space of the underlying host",
    "start": "1839630",
    "end": "1845559"
  },
  {
    "text": "but you also notice that I'm not giving away a like host path or any of that stuff just host pig and I'm gonna get a",
    "start": "1845559",
    "end": "1851389"
  },
  {
    "text": "privileged context which is also super powerful let's play with it yeah let's",
    "start": "1851389",
    "end": "1857870"
  },
  {
    "start": "1856000",
    "end": "2103000"
  },
  {
    "text": "take a look so first I'm going to show you the",
    "start": "1857870",
    "end": "1864240"
  },
  {
    "text": "manifest that's actually going to be doing this I'm gonna deploy as it manifested it's just described the same way as actually in the tweet right I",
    "start": "1864240",
    "end": "1870210"
  },
  {
    "text": "have my NS enter command I'm what mount filesystem to actually mount into and",
    "start": "1870210",
    "end": "1875520"
  },
  {
    "text": "then I'm running a command inside of that mounted filesystem been sleep for 99 days I'm gonna use the standard bog",
    "start": "1875520",
    "end": "1882690"
  },
  {
    "text": "standard Alpine 3.7 image for this and I have my hosts head set true and",
    "start": "1882690",
    "end": "1888450"
  },
  {
    "text": "privilege set to true as well let's go ahead and apply this manifests and this",
    "start": "1888450",
    "end": "1898890"
  },
  {
    "text": "is to help for NS enter and I kinda want to just point it out that the it's really an interesting thing this is an",
    "start": "1898890",
    "end": "1904170"
  },
  {
    "text": "incredible tool and essentially lets us enter into any of the parts of a",
    "start": "1904170",
    "end": "1909180"
  },
  {
    "text": "container right we're talking about a container being a sum of all of its parts the mountain namespace the pit",
    "start": "1909180",
    "end": "1915300"
  },
  {
    "text": "namespace the network namespace all of those individual pieces of containers just a collection of all those bits and a sensor lets me in to enter into each",
    "start": "1915300",
    "end": "1922230"
  },
  {
    "text": "any any particular part of one so I've used NS enter in my work to actually",
    "start": "1922230",
    "end": "1927930"
  },
  {
    "text": "kind of solve the mystery of how a thing is actually configured in this example I'm gonna grab a pit of our running",
    "start": "1927930",
    "end": "1934770"
  },
  {
    "text": "nginx process on a particular hose so I'm gonna exact into my container where it's been scheduled and take a look at",
    "start": "1934770",
    "end": "1940860"
  },
  {
    "text": "for nginx pits and I can see that I have a few running I'm just gonna grab that pit ID or the process ID and I'm going",
    "start": "1940860",
    "end": "1948480"
  },
  {
    "text": "to enter into the network names face of that process ID now the neat thing about",
    "start": "1948480",
    "end": "1954450"
  },
  {
    "text": "Ana Center is that literally I just have to tell if the target pit - t and then the pit ID and then which namespace or",
    "start": "1954450",
    "end": "1961800"
  },
  {
    "text": "which part of the container I want me to append you in this case it's a networking one and I can see in my case",
    "start": "1961800",
    "end": "1967290"
  },
  {
    "text": "that this particular nginx instances is is bound on port 80 and that's what I was trying to figure out right I was",
    "start": "1967290",
    "end": "1973410"
  },
  {
    "text": "expecting to be bound on 443 which is why it was not working for me you can",
    "start": "1973410",
    "end": "1980280"
  },
  {
    "text": "also do things like mounted to the namespace the the mounting space and take a look at configuration files and that sort of stuff this all works",
    "start": "1980280",
    "end": "1987240"
  },
  {
    "text": "because every process has a proc /p process ID NS directory and that actually describes a map for that",
    "start": "1987240",
    "end": "1994610"
  },
  {
    "text": "their process and this is what we were referring to before so if I look at the process tree for this one I could see that this running inside of a container",
    "start": "1994610",
    "end": "2000880"
  },
  {
    "text": "these are the maps for the C group IPC mount names Network kid and user and UTS",
    "start": "2000880",
    "end": "2006669"
  },
  {
    "text": "namespaces these are mapped to these specific names faces if I SSH in I would see that they be mapped to a different",
    "start": "2006669",
    "end": "2012669"
  },
  {
    "text": "set of namespaces what you're actually identified as a default set for that the Linux kernel is going to use for that",
    "start": "2012669",
    "end": "2017679"
  },
  {
    "text": "user gland but if you're looking for a way to visualize what a container is this is it this is what makes up a",
    "start": "2017679",
    "end": "2024039"
  },
  {
    "text": "container this this LS directory right here I want to emphasize how incredibly powerful it is to be able to interact",
    "start": "2024039",
    "end": "2029950"
  },
  {
    "text": "with the different parts of the container without necessarily having the eggs back into a shell because let me tell you that as a pen tester there is",
    "start": "2029950",
    "end": "2036130"
  },
  {
    "text": "no better way to make my day really annoying than to create a container that has no shell in it really annoying and",
    "start": "2036130",
    "end": "2043440"
  },
  {
    "text": "if you can't interact with that this is that you still can and if you can",
    "start": "2043440",
    "end": "2049480"
  },
  {
    "text": "interact with all of the different individual like you know namespaces and all of these things there's so much",
    "start": "2049480",
    "end": "2055030"
  },
  {
    "text": "control that you can have over it it's pretty sweet but what else could we do",
    "start": "2055030",
    "end": "2060310"
  },
  {
    "text": "could we do anything perhaps to the underlying node could we escalate privileges gain any kind of control I",
    "start": "2060310",
    "end": "2066010"
  },
  {
    "text": "don't know let's find out so we're not",
    "start": "2066010",
    "end": "2071050"
  },
  {
    "text": "even using host PAP here but we can still take over the underlying note of it so again because I have a data center",
    "start": "2071050",
    "end": "2076839"
  },
  {
    "text": "and I have access to that host pin namespace I can just attach to all of the namespaces that make up that",
    "start": "2076839",
    "end": "2082179"
  },
  {
    "text": "particular process and we run a bash shell and so I'm picking pit one because",
    "start": "2082179",
    "end": "2087970"
  },
  {
    "text": "the init system it's always going to be there and I'm running bash and so at this point I have a root on the actual",
    "start": "2087970",
    "end": "2093878"
  },
  {
    "text": "underlying host and the center is incredibly powerful sorry okay",
    "start": "2093879",
    "end": "2109540"
  },
  {
    "start": "2103000",
    "end": "2164000"
  },
  {
    "text": "so some takeaways we can take from this edit Center is pretty amazing both for operators and for attackers",
    "start": "2109540",
    "end": "2116530"
  },
  {
    "text": "host path is not the only kind of thing that you need to watch out for you should also restrict the use of host",
    "start": "2116530",
    "end": "2122050"
  },
  {
    "text": "pit if you're trying to harden your own containers and you should restrict the use of privileged containers because",
    "start": "2122050",
    "end": "2127230"
  },
  {
    "text": "just makes my life way too easy yeah one other part of that is that privilege containers actually have a very very",
    "start": "2127230",
    "end": "2133200"
  },
  {
    "text": "escalated privilege you can do anything with any part of the container you can create new containers you can do all of",
    "start": "2133200",
    "end": "2138720"
  },
  {
    "text": "that stuff with privileged access so when you when you do docker run - - privilege it's super scary there's",
    "start": "2138720",
    "end": "2144869"
  },
  {
    "text": "another one where you can actually limit to Linux capabilities like sysadmin but that one but that one is actually still",
    "start": "2144869",
    "end": "2150030"
  },
  {
    "text": "pretty risky although it still only provides like read-only read-only access to all of those things there are really",
    "start": "2150030",
    "end": "2155280"
  },
  {
    "text": "fun container escapes that involve the Seidman capability though so that's the thing to keep an out for so is there any",
    "start": "2155280",
    "end": "2165990"
  },
  {
    "start": "2164000",
    "end": "2174000"
  },
  {
    "text": "way that we can like MIDI mitigate against attacks like this or anything like that yes we can like admission",
    "start": "2165990",
    "end": "2173730"
  },
  {
    "text": "control is really like the only defensible space within kubernetes and what that does is it represents an",
    "start": "2173730",
    "end": "2179520"
  },
  {
    "start": "2174000",
    "end": "2281000"
  },
  {
    "text": "implementation at the API server just as we discussed when we were talking about all the components admission control",
    "start": "2179520",
    "end": "2185700"
  },
  {
    "text": "gives us the ability to validate or mutate objects and and determine whether",
    "start": "2185700",
    "end": "2191220"
  },
  {
    "text": "or not we will allow them in this is beyond authorization and authentication this is about now that we've seen the",
    "start": "2191220",
    "end": "2196680"
  },
  {
    "text": "manifest we've gotten past all of those things in is that manifest requesting access to host pit or host path or any",
    "start": "2196680",
    "end": "2202950"
  },
  {
    "text": "of those things now there is a first-class implementation of that within kubernetes right now that's called pod security policies and we can",
    "start": "2202950",
    "end": "2210510"
  },
  {
    "text": "show you that so as an attacker a couple of things to note here one this is actually fairly rare in the",
    "start": "2210510",
    "end": "2216450"
  },
  {
    "text": "wild despite the fact that it's the most powerful way that you can harden a kubernetes cluster many people don't use",
    "start": "2216450",
    "end": "2221700"
  },
  {
    "text": "it maybe more commonly than not in a lot of cases because the UX is really hard people don't like it it's sort of",
    "start": "2221700",
    "end": "2228150"
  },
  {
    "text": "difficult and people have a hard time with it that doesn't mean that they shouldn't try because it makes by",
    "start": "2228150",
    "end": "2234810"
  },
  {
    "text": "default if you don't push it put admission control on it all of these attacks are just viable and great for me",
    "start": "2234810",
    "end": "2240119"
  },
  {
    "text": "bad for perhaps the people who are trying to operate them or defend them the other thing I wanted to do as an",
    "start": "2240119",
    "end": "2245430"
  },
  {
    "text": "attacker is mutating admission control is really interesting if anyone is",
    "start": "2245430",
    "end": "2251880"
  },
  {
    "text": "familiar with LD preload and how that can work in a linux context LD preload",
    "start": "2251880",
    "end": "2257430"
  },
  {
    "text": "is very useful for both sysadmin and four attackers because it allows you to turn things into other things and if you",
    "start": "2257430",
    "end": "2264540"
  },
  {
    "text": "have the ability to make any call into any other call or for example just dictate that this is going to be your",
    "start": "2264540",
    "end": "2270420"
  },
  {
    "text": "you ID or your G ID there's all kinds of interesting possibilities there we don't really have time to cover them all and I",
    "start": "2270420",
    "end": "2276180"
  },
  {
    "text": "wish we did and maybe that's a future talk because it's really awesome but worth looking into",
    "start": "2276180",
    "end": "2281210"
  },
  {
    "start": "2281000",
    "end": "2327000"
  },
  {
    "text": "so anyway hide security policies let's take a look we demonstate one of those one thing I",
    "start": "2281210",
    "end": "2286560"
  },
  {
    "text": "do want to say is that we're talking about like mutating objects if we think about it we've already shown an example of that when we specified the UID and",
    "start": "2286560",
    "end": "2293130"
  },
  {
    "text": "GID of that particular part of the security context or was being told we were actually going to mutate that",
    "start": "2293130",
    "end": "2298920"
  },
  {
    "text": "object at runtime to make sure that we're using that username and group ID but admission control can do that to all",
    "start": "2298920",
    "end": "2305880"
  },
  {
    "text": "of the things so I could actually use this tool to do something like inject proxy variables if I'm in a highly",
    "start": "2305880",
    "end": "2311970"
  },
  {
    "text": "regulated environment and I can inject those proxy variables to all of the pods within a given namespace using things",
    "start": "2311970",
    "end": "2317850"
  },
  {
    "text": "like pod preset within cabrini this or other kinds of environment variables that might be interesting to me as an attacker yeah pod security policies when",
    "start": "2317850",
    "end": "2325410"
  },
  {
    "text": "I'm like implemented well can make my life as an attacker really hard like I'll run all the same attacks that we",
    "start": "2325410",
    "end": "2331050"
  },
  {
    "start": "2327000",
    "end": "2532000"
  },
  {
    "text": "were running during this talk and nothing will work and it will be really frustrating let's maybe see that happen",
    "start": "2331050",
    "end": "2337350"
  },
  {
    "text": "so we're gonna run the same ones again against one with a good pipe security policy but we'll look at the mostly",
    "start": "2337350",
    "end": "2343470"
  },
  {
    "text": "first so this cluster I've actually turned up a couple of different pod security policies and we can look at them there's one that's called",
    "start": "2343470",
    "end": "2349140"
  },
  {
    "text": "permissive and the one that's called restrictive probably not super imaginative but you get the idea",
    "start": "2349140",
    "end": "2354710"
  },
  {
    "text": "this permissive one really does actually just give access to everything but the neat thing about looking at the output",
    "start": "2354710",
    "end": "2360570"
  },
  {
    "text": "here is that we can see some of the things that we can actually restrict or constrain with odd security policies so",
    "start": "2360570",
    "end": "2366840"
  },
  {
    "text": "like first class citizen is like whether to allow privileged at all or whether to allow privilege escalation from within a",
    "start": "2366840",
    "end": "2372810"
  },
  {
    "text": "container all of what capabilities to add what Linux capabilities to add or",
    "start": "2372810",
    "end": "2377970"
  },
  {
    "text": "which to drop by default are required to be dropped before the container will be allowed admittance into the cluster you",
    "start": "2377970",
    "end": "2386760"
  },
  {
    "text": "can also limit the number of the types of volumes and that sort of stuff let's go down here to the restrict and we can see that you know some of",
    "start": "2386760",
    "end": "2392640"
  },
  {
    "text": "these fields actually filled out so in our case we're gonna not allow privileged containers again in the restrictive model we're going to allow",
    "start": "2392640",
    "end": "2399180"
  },
  {
    "text": "any capability which we probably should not do we're also going to only allow specific volume types so config map",
    "start": "2399180",
    "end": "2405630"
  },
  {
    "text": "downward API these are all types of volumes that you can use within kubernetes and attach to your running",
    "start": "2405630",
    "end": "2411210"
  },
  {
    "text": "processes we're not going to allow host network we're not going to allow host pit host IPC this isn't the most",
    "start": "2411210",
    "end": "2417090"
  },
  {
    "text": "restrictive paas security policy but you can see kind of the power of what we can do here",
    "start": "2417090",
    "end": "2422750"
  },
  {
    "text": "so running the same attacks against this policy what happens so let's go ahead",
    "start": "2422750",
    "end": "2430410"
  },
  {
    "text": "and rerun the attack I'll get the sed client llamo that we saw we're gonna run this as a different user that doesn't",
    "start": "2430410",
    "end": "2435960"
  },
  {
    "text": "have access to that administer to that permissive policy now we get a pretty",
    "start": "2435960",
    "end": "2441990"
  },
  {
    "text": "useful error message back you know so if you're a developer and operator using kubernetes and you try to and you bounce",
    "start": "2441990",
    "end": "2448890"
  },
  {
    "text": "against a restrictive policy like this it's gonna come back with good information telling you that the pod",
    "start": "2448890",
    "end": "2453960"
  },
  {
    "text": "security policy does not allow host network it does not allow host path and so this it's not just gonna say no and",
    "start": "2453960",
    "end": "2460110"
  },
  {
    "text": "then walk away you're actually gonna get some feedback from it as an attacker the first time I ran across this error message though I did not find it very",
    "start": "2460110",
    "end": "2466080"
  },
  {
    "text": "clear because it was like unable to validate any plot security policy well if it doesn't have a plot security policy what's your problem and it",
    "start": "2466080",
    "end": "2471960"
  },
  {
    "text": "actually means that there is a flood security policy and that it isn't allowing you which is not to me very clearly worded so this one also is",
    "start": "2471960",
    "end": "2480450"
  },
  {
    "text": "denied right there's a darker and darker demonstration that we provided is also denied but in this case is because of",
    "start": "2480450",
    "end": "2485820"
  },
  {
    "text": "host path and also because we didn't specify a SATCOM profile now even though",
    "start": "2485820",
    "end": "2491640"
  },
  {
    "text": "we have a restrictive pod security policy in place it doesn't mean that you can't do anything sometimes it may feel",
    "start": "2491640",
    "end": "2498420"
  },
  {
    "text": "that way as a user and that's part of the user experience kind of problem with pod security policies today I'm making",
    "start": "2498420",
    "end": "2503700"
  },
  {
    "text": "this look really simple but it's actually relatively complex and figuring out how the user experience works but",
    "start": "2503700",
    "end": "2509850"
  },
  {
    "text": "you know get involved if you're curious about it it makes illegitimate use cases harder it makes would you it doesn't",
    "start": "2509850",
    "end": "2515580"
  },
  {
    "text": "necessarily be that too legit use cases so in our case I was just going to redeploy that nginx deployment again",
    "start": "2515580",
    "end": "2521280"
  },
  {
    "text": "using that that a that user that doesn't have access to the permissive and I can do things",
    "start": "2521280",
    "end": "2526429"
  },
  {
    "text": "like scale and create deployments and all about stuff continues to work I can see the sponsoring yeah so I'm not gonna",
    "start": "2526429",
    "end": "2535219"
  },
  {
    "start": "2532000",
    "end": "2543000"
  },
  {
    "text": "do an attack demo here because it actually was just maybe exam so quit 5 security policies on your clusters it",
    "start": "2535219",
    "end": "2541429"
  },
  {
    "text": "can help keep people like me out so takeaways there pipe security policies give you a lot of control over",
    "start": "2541429",
    "end": "2547339"
  },
  {
    "start": "2543000",
    "end": "2566000"
  },
  {
    "text": "what you're allowed to do in a pod and what you're not allowing others to do in your pod it's hard to adopt as I said",
    "start": "2547339",
    "end": "2554599"
  },
  {
    "text": "it's difficult to adopt mainly because of the way that you associate pod security policies with users or controllers there's a lot of regularly",
    "start": "2554599",
    "end": "2561289"
  },
  {
    "text": "great media including on the tgia i/o website to talk about how that works so does admission control like fix",
    "start": "2561289",
    "end": "2567890"
  },
  {
    "start": "2566000",
    "end": "2691000"
  },
  {
    "text": "everything not quite there's actually static pod mechanism and static pods are manifest",
    "start": "2567890",
    "end": "2572989"
  },
  {
    "text": "that sit on disk near the qubit agent itself and the qubit is actually",
    "start": "2572989",
    "end": "2578959"
  },
  {
    "text": "interesting this the static pod mechanism is interesting because it's generally used for things like bootstrapping the cluster itself but",
    "start": "2578959",
    "end": "2584269"
  },
  {
    "text": "that stack static pod manifest that sits on disk will be entirely governed by the cubelet so you would if the qubit never",
    "start": "2584269",
    "end": "2589849"
  },
  {
    "text": "talks to an API server it will bring up the pods to find in those files and it will run them and make sure that they",
    "start": "2589849",
    "end": "2595519"
  },
  {
    "text": "continue to stay a they continue to stay running and then an opponent ever it's not susceptible to admission control at",
    "start": "2595519",
    "end": "2601759"
  },
  {
    "text": "all it's not susceptible to admission control at all because it's the highest priority it it executes before admission",
    "start": "2601759",
    "end": "2609769"
  },
  {
    "text": "control even applies and because it's designed to be you know continually",
    "start": "2609769",
    "end": "2615559"
  },
  {
    "text": "self-healing that also means that as an attacker maybe I could do something like persistence well that actually doesn't",
    "start": "2615559",
    "end": "2622640"
  },
  {
    "text": "actually get affected by admission control I can put my evil pod up there it'll work admission control will never",
    "start": "2622640",
    "end": "2628459"
  },
  {
    "text": "complain and it will keep coming up when things get spun down and if you think",
    "start": "2628459",
    "end": "2633799"
  },
  {
    "text": "about it like direct scheduling that we saw from the beginning can you direct schedule a static pod and completely",
    "start": "2633799",
    "end": "2639499"
  },
  {
    "text": "bypass the scheduler in controller manager you have host pass without admission control you absolutely can so",
    "start": "2639499",
    "end": "2645859"
  },
  {
    "text": "that seems like a pretty powerful attack tool if I can like put something there that's going to be persistent going to",
    "start": "2645859",
    "end": "2652959"
  },
  {
    "text": "bypass thing that are trying to prevent me from doing that and are going to bypass Oh Mission",
    "start": "2652959",
    "end": "2658539"
  },
  {
    "text": "Control - yep and they're the highest priority as you said so if you put a manifest down on disk it will actually",
    "start": "2658539",
    "end": "2663819"
  },
  {
    "text": "make room for that manifest if there's pods already on the node it'll kick them out to make room for that pod manifest",
    "start": "2663819",
    "end": "2669279"
  },
  {
    "text": "fascinating is there any way to stop that so again this is going back to the term default so qubit by default doesn't",
    "start": "2669279",
    "end": "2675969"
  },
  {
    "text": "have that directory defined which means that there's no way to actually exploit this by default with the qubit however",
    "start": "2675969",
    "end": "2681189"
  },
  {
    "text": "in cube ATM for example the default that cube ATM uses for all all nodes is",
    "start": "2681189",
    "end": "2687099"
  },
  {
    "text": "actually to associate a directory with that so if you know what that directory is you could place it there and so it",
    "start": "2687099",
    "end": "2696819"
  },
  {
    "text": "doesn't fix everything what helps so coming full circle we're really not trying to scare you here it isn't that",
    "start": "2696819",
    "end": "2703569"
  },
  {
    "text": "kubernetes is like large and complex and impossible although it is certainly very",
    "start": "2703569",
    "end": "2709089"
  },
  {
    "text": "large and complex it's powerful it allows you to do a lot and as well as being able to allow you to do a lot at",
    "start": "2709089",
    "end": "2715569"
  },
  {
    "text": "scale it allows you to make a lot of mistakes at scale it miss configurations and not putting admission control on",
    "start": "2715569",
    "end": "2723599"
  },
  {
    "text": "assuming that kubernetes is secure by default and developing as such just means that it's easier for me as an",
    "start": "2723599",
    "end": "2730029"
  },
  {
    "text": "attacker to be able to exploit it so it's big it's complex but it is actually",
    "start": "2730029",
    "end": "2736809"
  },
  {
    "text": "possible for the most part to be able to secure it it's possible to secure your clusters via admission control and it's",
    "start": "2736809",
    "end": "2742659"
  },
  {
    "text": "possible to work to make the kubernetes project itself more secure that's right so how can we do that you can get",
    "start": "2742659",
    "end": "2749049"
  },
  {
    "text": "involved career this is an open source project and there are a lot of people who are involved in just working in",
    "start": "2749049",
    "end": "2754269"
  },
  {
    "text": "different special interest groups or groups but with focus on particular areas I'll put a link in here in frere",
    "start": "2754269",
    "end": "2762539"
  },
  {
    "text": "okay so kubernetes is a really wonderful friendly welcoming community that is",
    "start": "2762539",
    "end": "2768489"
  },
  {
    "text": "really good to its contributors and tends to be very full of happy developers who don't think like security",
    "start": "2768489",
    "end": "2773859"
  },
  {
    "text": "people I think some of its design decisions could perhaps you know you could think about it in that light so",
    "start": "2773859",
    "end": "2780669"
  },
  {
    "text": "and what that also means is that kubernetes really needs to have contributors who can think like attackers it really helps a lot because",
    "start": "2780669",
    "end": "2786309"
  },
  {
    "text": "people are open to it they don't necessarily know how to do that so we want to encourage security minded folks to come get involved in the",
    "start": "2786309",
    "end": "2792500"
  },
  {
    "text": "open source project if you do research on kubernetes there is vulnerability disclosure info leaked on the slide a",
    "start": "2792500",
    "end": "2799220"
  },
  {
    "text": "bug bounty program I think is coming down the pike eventually and this week",
    "start": "2799220",
    "end": "2804290"
  },
  {
    "text": "like yesterday anyway there was a third-party code audit and there were a lot of",
    "start": "2804290",
    "end": "2810440"
  },
  {
    "text": "interesting findings coming out of there that are most certainly worth reading that are also linked on this slide I just realized it's - on that slide",
    "start": "2810440",
    "end": "2816349"
  },
  {
    "text": "though if you do want to see the kids audit which is that third party and the result of that audit it's a cage - audit",
    "start": "2816349",
    "end": "2822500"
  },
  {
    "text": "okay it's - and yeah come get involved",
    "start": "2822500",
    "end": "2827960"
  },
  {
    "text": "and get in touch with us I'm on kubernetes lacus cold water I'm miss Amelia Lyon and yeah we'd love to help",
    "start": "2827960",
    "end": "2835420"
  },
  {
    "text": "so just send that here are the black hat soundbites the takeaways that we want you to have from this check your",
    "start": "2835420",
    "end": "2841790"
  },
  {
    "text": "assumptions kubernetes is not secured by default green use is a complex system",
    "start": "2841790",
    "end": "2848750"
  },
  {
    "text": "with lots of moving parts and it's going to take some configuration to action to actually get that thing up and running",
    "start": "2848750",
    "end": "2853819"
  },
  {
    "text": "but go ahead but understanding well how the system works on a deep level can help you both",
    "start": "2853819",
    "end": "2859460"
  },
  {
    "text": "as an operator and as an attacker and it is possible to make cooper days more",
    "start": "2859460",
    "end": "2864470"
  },
  {
    "text": "secure but you do have to put in that work so put admission control on your clusters come get involved in the",
    "start": "2864470",
    "end": "2870170"
  },
  {
    "text": "project with us then we have our resources up in the resources link so if you want to see how I went about doing",
    "start": "2870170",
    "end": "2876140"
  },
  {
    "text": "the demos or explore any of that stuff you can visit that URL for more information we want to thank all of you",
    "start": "2876140",
    "end": "2882380"
  },
  {
    "text": "for coming this has been amazing and yeah thank you very much",
    "start": "2882380",
    "end": "2887920"
  }
]