[
  {
    "text": "[Music]",
    "start": "3650",
    "end": "10529"
  },
  {
    "text": "hi everybody i'm stan skivronic and i'll be talking to you about the techniques",
    "start": "11280",
    "end": "16720"
  },
  {
    "text": "that we're using when we're reverse engineering uh mobile devices for our product at",
    "start": "16720",
    "end": "22800"
  },
  {
    "text": "corellium but really the focus is going to be on how we build the linux for m1 the first one that",
    "start": "22800",
    "end": "30800"
  },
  {
    "text": "worked and um and the techniques themselves that you can apply on the qmu",
    "start": "30800",
    "end": "38000"
  },
  {
    "text": "or any simulator you like and maybe even build your own like we did",
    "start": "38000",
    "end": "43520"
  },
  {
    "text": "so first a few words about myself i actually came to reverse engineering",
    "start": "43520",
    "end": "49039"
  },
  {
    "text": "via a different path than many of you i imagine it didn't go through security research",
    "start": "49039",
    "end": "54960"
  },
  {
    "text": "but instead i actually trained as an electronic engineer i used to be a gpu designer then i built",
    "start": "54960",
    "end": "63120"
  },
  {
    "text": "security hardware and this kind of where this really started getting interesting for me and over the time i've also built a",
    "start": "63120",
    "end": "69360"
  },
  {
    "text": "large portfolio of hobby projects you know linux for octane psp breaks",
    "start": "69360",
    "end": "77118"
  },
  {
    "text": "linux for the iphone and my own motherboard which you know was very exciting but one",
    "start": "77200",
    "end": "82640"
  },
  {
    "text": "thing that i noticed that they all had in common is that they included a fairly hefty dose of reverse engineering",
    "start": "82640",
    "end": "89439"
  },
  {
    "text": "because a lot of vendors don't really think about interpreting their hardware with",
    "start": "89439",
    "end": "95600"
  },
  {
    "text": "anybody else's for instance if you're going with intel you're gonna get an intel blob to operate their cpu's memory",
    "start": "95600",
    "end": "101840"
  },
  {
    "text": "training and i actually wanted to do something novel in that and put and use one of the",
    "start": "101840",
    "end": "107600"
  },
  {
    "text": "memory channels for my own purpose and of course i had to reverse engineer that and this has been kind of a pattern",
    "start": "107600",
    "end": "113360"
  },
  {
    "text": "that to get interoperability between the different components i wanted to use i had to reverse engineer stuff",
    "start": "113360",
    "end": "120399"
  },
  {
    "text": "and you know over 20 years of doing that i kind of have developed a very intuitive methodology that is largely",
    "start": "120399",
    "end": "127280"
  },
  {
    "text": "based on runtime observation is dynamic as opposed to just you know sitting in ida which we also do but you know that's",
    "start": "127280",
    "end": "134239"
  },
  {
    "text": "the last resort but today i'm going to focus on what we",
    "start": "134239",
    "end": "139280"
  },
  {
    "text": "did for the apple cpus this is of course what my company corellium is most famous for",
    "start": "139280",
    "end": "147280"
  },
  {
    "text": "we started fairly early three years ago and our first look was at the a8",
    "start": "148959",
    "end": "154800"
  },
  {
    "text": "the a8 which is found in the iphone 6 is a fairly conventional mobile soc",
    "start": "154800",
    "end": "161440"
  },
  {
    "text": "you know you have your two arm cores you have your gpu on the left which is labeled sgx",
    "start": "161440",
    "end": "167680"
  },
  {
    "text": "you have a number of display blocks and video processing blocks on top and you have your external interfaces at",
    "start": "167680",
    "end": "173360"
  },
  {
    "text": "the bottom and none of that was really non-standard of course apple put their",
    "start": "173360",
    "end": "178640"
  },
  {
    "text": "twist on everything because they like designing their own ip this trip did have some licensed",
    "start": "178640",
    "end": "185120"
  },
  {
    "text": "components the gpu and the video decompression block were imagination technologies which helped us a lot",
    "start": "185120",
    "end": "191440"
  },
  {
    "text": "and the usb is a synopsis product so we got a bit of a start and dose and",
    "start": "191440",
    "end": "198000"
  },
  {
    "text": "of course it's normal arm architecture at the time pretty standard and it made it fairly",
    "start": "198000",
    "end": "203120"
  },
  {
    "text": "approachable but you know as time passed apple started customizing their chips and",
    "start": "203120",
    "end": "208799"
  },
  {
    "text": "extending them and you can see the evolutionary path that they traced on the next few slides",
    "start": "208799",
    "end": "215200"
  },
  {
    "text": "and you will see that there's two main things first one apple is coming up with",
    "start": "215200",
    "end": "220239"
  },
  {
    "text": "new stuff and adding their own ip to the product and the second one is that there's more",
    "start": "220239",
    "end": "225760"
  },
  {
    "text": "and more and more programmable blocks so apple labs co-processors",
    "start": "225760",
    "end": "231920"
  },
  {
    "text": "for instance in the a9 iphone 6s they have introduced the always-on processor the aop",
    "start": "231920",
    "end": "238799"
  },
  {
    "text": "which manages tasks like uh audio output uh you know like switches sensors",
    "start": "238799",
    "end": "246319"
  },
  {
    "text": "and a few other details uh it in a way that replaced an external piece of",
    "start": "246319",
    "end": "251840"
  },
  {
    "text": "hardware the sensor hub that was present in the previous phone",
    "start": "251840",
    "end": "256959"
  },
  {
    "text": "then in 810 apple came up with a new design for their cars they were still arm compatible also a newer version it was",
    "start": "257519",
    "end": "264560"
  },
  {
    "text": "rv 8.1 with well privileged access never",
    "start": "264560",
    "end": "269680"
  },
  {
    "text": "and then they also made a few changes they added yet another co-processor the power management processor",
    "start": "269680",
    "end": "275919"
  },
  {
    "text": "uh they have replaced the built-in co-processor that managed uh nand flash",
    "start": "275919",
    "end": "281199"
  },
  {
    "text": "the apple man sub system with uh with an external nvme flash which i think may",
    "start": "281199",
    "end": "287040"
  },
  {
    "text": "have been the first use of nvme on a mobile device and instead they came up with a very",
    "start": "287040",
    "end": "292639"
  },
  {
    "text": "clever way of managing the memory accesses from the thing about which i'll be telling you later the start",
    "start": "292639",
    "end": "300000"
  },
  {
    "text": "well start an io nvmu then in a11 apple really hit the stride",
    "start": "300000",
    "end": "306080"
  },
  {
    "text": "the a11 is a blueprint for all current products that they have they have significantly improved the",
    "start": "306080",
    "end": "312479"
  },
  {
    "text": "performance of the fast course they have added four little cars which are actually still pretty fast",
    "start": "312479",
    "end": "319440"
  },
  {
    "text": "they have renewed the display block completely so you know for us this means we had to reverse engineer it again",
    "start": "319440",
    "end": "326479"
  },
  {
    "text": "and they have also built their own video decoder and they have significantly enhanced the gpu",
    "start": "326479",
    "end": "333520"
  },
  {
    "text": "the apple nand sub system is back they moved the nvme part of the nvme",
    "start": "333520",
    "end": "338639"
  },
  {
    "text": "management and trip and they of course have moved the secure enclave to 64bit",
    "start": "338639",
    "end": "345600"
  },
  {
    "text": "but you can still see that it's very much an evolutionary path so i kind of the reason why i'm",
    "start": "345600",
    "end": "351440"
  },
  {
    "text": "presenting this is that you can see that it was very easy for us to get started under a8 and the incremental changes",
    "start": "351440",
    "end": "358319"
  },
  {
    "text": "such as adding the pointer authentication to all of the important processors so the main course and the secure enclave and a12 was really an",
    "start": "358319",
    "end": "366560"
  },
  {
    "text": "incremental change for us as well just like it was for apple then in a13 they have added",
    "start": "366560",
    "end": "374240"
  },
  {
    "text": "the special ppl mode which i think that generally the community calls",
    "start": "374240",
    "end": "380680"
  },
  {
    "text": "not sideways well the extra basically privileged levels that they have on the side",
    "start": "381280",
    "end": "386479"
  },
  {
    "text": "and the neural engine which we really haven't looked into too much and then at a14 you can see the growing",
    "start": "386479",
    "end": "391680"
  },
  {
    "text": "complexity by how i had to scale the image to fit uh they have renewed the course again",
    "start": "391680",
    "end": "397440"
  },
  {
    "text": "adding the amx of which i'll be you know dropping a bit of info",
    "start": "397440",
    "end": "403280"
  },
  {
    "text": "audio dma the display control processor yet another co-processor",
    "start": "403280",
    "end": "409599"
  },
  {
    "text": "and you know just general speed apps and finally we get to the m1 the m1 is kind of a sibling of the a14",
    "start": "409599",
    "end": "416720"
  },
  {
    "text": "and the major differences between them as far as our reverse engineering effort goes is that they have more processors they",
    "start": "416720",
    "end": "423199"
  },
  {
    "text": "have two more fast cores than any of their previous chips and they have the converged i o block",
    "start": "423199",
    "end": "428560"
  },
  {
    "text": "converged io means thunderbolt and usb4 which i'll briefly cover because i think",
    "start": "428560",
    "end": "434400"
  },
  {
    "text": "it's of significant interest to those of you that want to look for vulnerabilities",
    "start": "434400",
    "end": "440560"
  },
  {
    "text": "so what do we really do is the first step to a reverse engineering",
    "start": "441680",
    "end": "447599"
  },
  {
    "text": "effort is to make a register level model of as much hardware as we can get information on",
    "start": "447599",
    "end": "453520"
  },
  {
    "text": "without looking into the source code without going into the decompiled code",
    "start": "453520",
    "end": "459039"
  },
  {
    "text": "because you know this is a lot of effort it's a lot easier to just start out",
    "start": "459039",
    "end": "464479"
  },
  {
    "text": "with like a stub model",
    "start": "464479",
    "end": "467599"
  },
  {
    "text": "ah i went to further and then the next step is to validate your",
    "start": "470000",
    "end": "475840"
  },
  {
    "text": "model because it's very easy to come up with a plausible sequence",
    "start": "475840",
    "end": "480879"
  },
  {
    "text": "of events that should have happened without actually confirming it when you're doing reverse engineering you",
    "start": "480879",
    "end": "486720"
  },
  {
    "text": "have an idea that for instance this register causes this action but how do you really check so you have two ways",
    "start": "486720",
    "end": "493120"
  },
  {
    "text": "you can either run the original software on your model and of course that's what we normally do but every now and then we get the",
    "start": "493120",
    "end": "499360"
  },
  {
    "text": "opportunity to do the validation the other way around where we write our own software",
    "start": "499360",
    "end": "506400"
  },
  {
    "text": "and run it under real hardware so with apple this is notoriously difficult",
    "start": "506400",
    "end": "511599"
  },
  {
    "text": "they have locked down bootloaders that will generally not permit you to load your own software",
    "start": "511599",
    "end": "516719"
  },
  {
    "text": "and our first chance to really try this different way of validation was when check green came out two years",
    "start": "516719",
    "end": "522399"
  },
  {
    "text": "ago this was a breakthrough which allowed us to write down",
    "start": "522399",
    "end": "528800"
  },
  {
    "text": "operating system kernel for the through the iphone 7. and we kind of developed it into a linux",
    "start": "528800",
    "end": "535200"
  },
  {
    "text": "port that you could actually load on your cell phone and run it and you know it was a very good validation platform for",
    "start": "535200",
    "end": "541519"
  },
  {
    "text": "us but something that happened last year really transformed",
    "start": "541519",
    "end": "547120"
  },
  {
    "text": "this approach for us which was that the sibling or the newest iphone soc",
    "start": "547120",
    "end": "552880"
  },
  {
    "text": "showed up in laptops and mac minis and those traditionally have a way to unlock their boot loaders",
    "start": "552880",
    "end": "559519"
  },
  {
    "text": "so you can imagine that the day apple released the unlocking bootloader version the developer beta of",
    "start": "559519",
    "end": "565760"
  },
  {
    "text": "mac os 12. i ran out to best buy and came back with a mac mini",
    "start": "565760",
    "end": "572000"
  },
  {
    "text": "and that's basically where our work immediately started on on making the the model for it",
    "start": "572000",
    "end": "578399"
  },
  {
    "text": "so how do you get started on that well there's actually quite a lot of public information about the structure",
    "start": "578399",
    "end": "584160"
  },
  {
    "text": "of those chips first there's a completely unencrypted and readily desired as well readily",
    "start": "584160",
    "end": "591600"
  },
  {
    "text": "decodable device tree every package of firmware contains one of those",
    "start": "591600",
    "end": "597120"
  },
  {
    "text": "in case of the m1 there's for three platforms the macbook the macbook pro and the mac mini",
    "start": "597120",
    "end": "602560"
  },
  {
    "text": "and the device tree will enumerate every single block inside the chip",
    "start": "602560",
    "end": "608560"
  },
  {
    "text": "so you know we take this and we basically build this stub model and the essence of the stub model is to",
    "start": "608560",
    "end": "615920"
  },
  {
    "text": "cover every range that the device memory range that the device tree describes and have something in it that will just",
    "start": "615920",
    "end": "622880"
  },
  {
    "text": "log and access and this sounds obvious but there's something that you really want to do",
    "start": "622880",
    "end": "628640"
  },
  {
    "text": "when you do that you want to log the whole back trace that you can get from that access",
    "start": "628640",
    "end": "635680"
  },
  {
    "text": "and you want to log a thread id we use a shortened thread id it's basically a hash of one of the system",
    "start": "635680",
    "end": "642000"
  },
  {
    "text": "registers in the cpu that holds the pointer to the thread base",
    "start": "642000",
    "end": "647519"
  },
  {
    "text": "because with those two pieces of information you can reconstruct not only the actual accesses that happen but also",
    "start": "647519",
    "end": "653600"
  },
  {
    "text": "exactly what code did it so you can spot a pattern in the access list and then take this take the",
    "start": "653600",
    "end": "661200"
  },
  {
    "text": "addresses in there figure out if they are related because they'll be on the same thread id",
    "start": "661200",
    "end": "666480"
  },
  {
    "text": "and then look it up in your favorite disassembler well ida in this case but",
    "start": "666480",
    "end": "672480"
  },
  {
    "text": "so you can see that for instance on the top right you have an mmi read from a register",
    "start": "672480",
    "end": "678480"
  },
  {
    "text": "inside the uart range this is literally the first access that xnu and m1 will do",
    "start": "678480",
    "end": "685920"
  },
  {
    "text": "and then it is satisfied with what the dread apparently because it executes a write of ox 44 so capital d",
    "start": "685920",
    "end": "693360"
  },
  {
    "text": "standing for darwin that's the first thing that prints out oh look we found the serial port and we",
    "start": "693360",
    "end": "699040"
  },
  {
    "text": "know which register is going to be the the status register the read",
    "start": "699040",
    "end": "704800"
  },
  {
    "text": "and the output register the right and you know by basically following the simple intuitive approach you can save",
    "start": "704800",
    "end": "711440"
  },
  {
    "text": "yourself quite a lot of reading of this assembly",
    "start": "711440",
    "end": "716480"
  },
  {
    "text": "and here's a more complicated example because they kind of all build on each other right like once you have certainty",
    "start": "716480",
    "end": "722240"
  },
  {
    "text": "about how one thing works you can use it as a building block and i'll show that in the next two slides",
    "start": "722240",
    "end": "728399"
  },
  {
    "text": "so here's the piece of hardware that pretty much every single block that can send events to the cpu will contain a",
    "start": "728399",
    "end": "734959"
  },
  {
    "text": "little irq subcontroller and this controller contains two memory elements a mask",
    "start": "734959",
    "end": "741600"
  },
  {
    "text": "and a status bit and of course the event that comes in from the left will set the status bit",
    "start": "741600",
    "end": "748320"
  },
  {
    "text": "and an acknowledge will clear it and this pattern you know when then the events got masked and you have the mask",
    "start": "748320",
    "end": "755040"
  },
  {
    "text": "status which is sometimes available and then you have the you know common irq line that actually interrupts the cpu",
    "start": "755040",
    "end": "760880"
  },
  {
    "text": "that goes to the main interrupt controller and understanding that this is a very common hardware design pattern",
    "start": "760880",
    "end": "768079"
  },
  {
    "text": "means that you don't necessarily have to really get into details of the disassembly because you know that there",
    "start": "768079",
    "end": "774560"
  },
  {
    "text": "will be a few registers there will be the status the mask or enable the acknowledge and optionally mask status",
    "start": "774560",
    "end": "782480"
  },
  {
    "text": "and then you basically on the right bottom right you have a sequence of accesses that show how those registers can be",
    "start": "782480",
    "end": "788079"
  },
  {
    "text": "identified instantly first there is the acknowledge of the root interrupt controller the aic",
    "start": "788079",
    "end": "795360"
  },
  {
    "text": "the aic is fortunately documented in the public open source apple sources so we don't",
    "start": "795360",
    "end": "801600"
  },
  {
    "text": "have to reverse engineer that one but then you can see that immediately after getting an interrupt",
    "start": "801600",
    "end": "808160"
  },
  {
    "text": "the operating system proceeds to read a register and then it immediately writes the same",
    "start": "808160",
    "end": "813519"
  },
  {
    "text": "value at red into the same register well that's an acknowledged sequence you don't even have to look anywhere",
    "start": "813519",
    "end": "819199"
  },
  {
    "text": "else and then you take the register address that you got from it and you look what what nearby registers were set with",
    "start": "819199",
    "end": "825839"
  },
  {
    "text": "things that look like bit masks during the peripheral initialization process well that's gonna be your enable or mask",
    "start": "825839",
    "end": "831600"
  },
  {
    "text": "depending whether it's active high or active lab and in this way i i have successfully",
    "start": "831600",
    "end": "838160"
  },
  {
    "text": "reverse engineered a lot of peripherals uh you know up to the like housekeeping",
    "start": "838160",
    "end": "844079"
  },
  {
    "text": "point without actually having to even look at the disassembly",
    "start": "844079",
    "end": "848720"
  },
  {
    "text": "the next more interesting part is all of those co-processors that i mentioned that apple loves so much",
    "start": "849279",
    "end": "855519"
  },
  {
    "text": "and all of them have a very similar structure you will have the main cpu",
    "start": "855519",
    "end": "860560"
  },
  {
    "text": "the processor it will be an arm core because apple really likes arm",
    "start": "860560",
    "end": "866240"
  },
  {
    "text": "it could be a cortex-m for small peripherals or it could be a cortex a for older chips or their own",
    "start": "866240",
    "end": "872320"
  },
  {
    "text": "cores for the newer chips but fundamentally they all fulfill the same function they run a bit of firmware",
    "start": "872320",
    "end": "877920"
  },
  {
    "text": "which is usually based on something called rtkit",
    "start": "877920",
    "end": "884120"
  },
  {
    "text": "and then they communicate with the host cpu via two mailboxes an inbox and an outbox i draw them as queues i believe",
    "start": "884240",
    "end": "891279"
  },
  {
    "text": "they're actually a single item it's not critical how you model them for any purpose as long as you obey the",
    "start": "891279",
    "end": "898320"
  },
  {
    "text": "status bits and you can see that the mailbox exchange is pretty simple first the cpu gets",
    "start": "898320",
    "end": "904880"
  },
  {
    "text": "started by setting the run bit in the control register you can see that before gets set",
    "start": "904880",
    "end": "912160"
  },
  {
    "text": "then there's uh we sent an irq which is not shown here just sr to the rq line and we",
    "start": "912160",
    "end": "918800"
  },
  {
    "text": "watch what it's going to do well it always reads the status bit first when it gets an iq and so it does",
    "start": "918800",
    "end": "925120"
  },
  {
    "text": "and then after reading a status bit if it's satisfied here you probably want to you know glance at this assembly and see",
    "start": "925120",
    "end": "930240"
  },
  {
    "text": "what bit gets checked but when it's satisfied it's going to read a value from the mailbox which for",
    "start": "930240",
    "end": "935920"
  },
  {
    "text": "newer apple cpus and the bigger coprocessors is kind of 28 bit and then",
    "start": "935920",
    "end": "942399"
  },
  {
    "text": "it will respond by performing a write and so it does the right and reads another status register and here you",
    "start": "942399",
    "end": "947680"
  },
  {
    "text": "again look at this assembly thanks to the thanks to the batteries that you dump",
    "start": "947680",
    "end": "953279"
  },
  {
    "text": "and this is basically how you know how to talk to a coprocessor and they all look more or less like that even so the",
    "start": "953279",
    "end": "958480"
  },
  {
    "text": "addresses will differ between specific processors in the chip",
    "start": "958480",
    "end": "964079"
  },
  {
    "text": "now we have figured out the lowest level the mmio level of the co-processor",
    "start": "964959",
    "end": "970480"
  },
  {
    "text": "but because apple tends to have very regular and clean designs as i mentioned they all use the same articut runtime in",
    "start": "970480",
    "end": "977759"
  },
  {
    "text": "the coprocessors they have they have basically followed exactly the same designs for all of them",
    "start": "977759",
    "end": "984079"
  },
  {
    "text": "except the secure enclave and the modern cpus and",
    "start": "984079",
    "end": "989120"
  },
  {
    "text": "so the co-processor uh contains a number of end points usually it's you know countable on two",
    "start": "989120",
    "end": "995920"
  },
  {
    "text": "hands except for the aop which has like tents uh follows the same exact process for",
    "start": "995920",
    "end": "1001839"
  },
  {
    "text": "discovering those end points and then it has the same request response conventions where you will send",
    "start": "1001839",
    "end": "1008399"
  },
  {
    "text": "an attacked request will will always sends an attack request and we reply with",
    "start": "1008399",
    "end": "1013759"
  },
  {
    "text": "with the same tag and possibly a bit set to signal that it's a reply",
    "start": "1013759",
    "end": "1019279"
  },
  {
    "text": "and here you have an example of such an exchange so at first the processor boots",
    "start": "1019279",
    "end": "1026640"
  },
  {
    "text": "and so you can see that we send out a message containing the version and the endpoint zero",
    "start": "1026640",
    "end": "1033038"
  },
  {
    "text": "right ep0 is rtbuddy which is the operating system side that communicates",
    "start": "1033039",
    "end": "1038798"
  },
  {
    "text": "with the article at runtime and so we say that we are version 11.11",
    "start": "1038799",
    "end": "1045120"
  },
  {
    "text": "and then the cpu uh receives that message from the mailbox and evaluates whether it likes this",
    "start": "1045120",
    "end": "1051200"
  },
  {
    "text": "version fortunately if it doesn't it'll tell you what it wants with a panic message",
    "start": "1051200",
    "end": "1057280"
  },
  {
    "text": "so you can correct your model and so it will reply with the same version saying that yeah i'm also this",
    "start": "1057280",
    "end": "1063039"
  },
  {
    "text": "version then you have to send in an endpoint list and this endpoint list you know comes in",
    "start": "1063039",
    "end": "1070240"
  },
  {
    "text": "modern versions of ios and in mac os and m1 will come in",
    "start": "1070240",
    "end": "1076559"
  },
  {
    "text": "multiple parts 32 endpoints are enumerated per message so you have a little bit masks for",
    "start": "1076559",
    "end": "1082400"
  },
  {
    "text": "endpoint zero and well i declare endpoint zero to seven those are all management kind of",
    "start": "1082400",
    "end": "1088320"
  },
  {
    "text": "built-in article endpoints and then you reply with another message saying well i also",
    "start": "1088320",
    "end": "1094720"
  },
  {
    "text": "support endpoint 32 and by the way that's it the hybrid set it tells you it tells x",
    "start": "1094720",
    "end": "1100720"
  },
  {
    "text": "and you that this is the last endpoint being enumerated 32 is usually the end point that most of",
    "start": "1100720",
    "end": "1106240"
  },
  {
    "text": "the real action you know the stuff that you actually want to model will be happening over but to get there you have",
    "start": "1106240",
    "end": "1111280"
  },
  {
    "text": "to do all of this anyway so how do you figure out what endpoints",
    "start": "1111280",
    "end": "1116480"
  },
  {
    "text": "are there well you use the iot tool if you run i or edge on the live mac",
    "start": "1116480",
    "end": "1122880"
  },
  {
    "text": "you're going to get for every of those co-processors a list of endpoints that will has with names",
    "start": "1122880",
    "end": "1128880"
  },
  {
    "text": "which you know really helps out figure out what you're supposed to do the rtbuddy protocol occasionally",
    "start": "1128880",
    "end": "1135360"
  },
  {
    "text": "changes but this is generally quite stable i think we had one major revision since ios 11.",
    "start": "1135360",
    "end": "1141360"
  },
  {
    "text": "and then of course you dump the traffic like i dumped it on the right side and you see what it responds when you send",
    "start": "1141360",
    "end": "1146400"
  },
  {
    "text": "it messages sometimes it's a panic that's usually the most informative thing it can show",
    "start": "1146400",
    "end": "1153600"
  },
  {
    "text": "now a bit more about those fixed endpoints because this is actually something that will save you a lot of time if you want to mess with this",
    "start": "1154720",
    "end": "1162000"
  },
  {
    "text": "there's the management endpoint that you already saw in action and then there's a few like system ones",
    "start": "1162000",
    "end": "1167600"
  },
  {
    "text": "my personal favorite is the crash log so the crash log end point",
    "start": "1167600",
    "end": "1173039"
  },
  {
    "text": "if you give it a memory address to write the crash logs to will actually give you very detailed",
    "start": "1173039",
    "end": "1178400"
  },
  {
    "text": "information on what the co-processor thinks you did to it it's like a panic but a lot more",
    "start": "1178400",
    "end": "1183520"
  },
  {
    "text": "detailed so it will have a list of threads a text message of course it will have a",
    "start": "1183520",
    "end": "1189679"
  },
  {
    "text": "back trace inside the coprocessor it'll have a list of all messages you exchanged with it so you can validate if",
    "start": "1189679",
    "end": "1195760"
  },
  {
    "text": "your mailbox reverse engineering went well and then it sometimes has a lot of extra text information i really snipped it",
    "start": "1195760",
    "end": "1202320"
  },
  {
    "text": "because that was pages and pages of nvme information you even get details on the flash",
    "start": "1202320",
    "end": "1208400"
  },
  {
    "text": "so this happened when i screwed up sending a comment to nvme i got this",
    "start": "1208400",
    "end": "1214080"
  },
  {
    "text": "wonderful report well you know i said we're sending an",
    "start": "1214080",
    "end": "1221120"
  },
  {
    "text": "address of the crash log it's not just an address",
    "start": "1221120",
    "end": "1226240"
  },
  {
    "text": "apple has been really leading the charge and putting io mmus on every single block capable of dma",
    "start": "1226240",
    "end": "1233440"
  },
  {
    "text": "and iphone 6 the immunes were really used for two things preventing external access from",
    "start": "1233440",
    "end": "1238799"
  },
  {
    "text": "pci express to memory which was not fully successful there were some bugs in that i believe that people",
    "start": "1238799",
    "end": "1245280"
  },
  {
    "text": "managed to get into the iphone 7 via that path and the second thing is they were",
    "start": "1245280",
    "end": "1250320"
  },
  {
    "text": "linearizing their video memory so it could be displayed by the display engine as a single stretch of virtual memory",
    "start": "1250320",
    "end": "1258640"
  },
  {
    "text": "today apple has really gotten the iom religion they call them darts i think dma address",
    "start": "1258640",
    "end": "1265120"
  },
  {
    "text": "translation table or whatever remap table and they are everywhere",
    "start": "1265120",
    "end": "1270880"
  },
  {
    "text": "and you know for security for security exploitation this is someone can drink",
    "start": "1270880",
    "end": "1276720"
  },
  {
    "text": "because they will prevent you even if you take control of one of those numerous co-processors you will not be able to just scribble over kernel memory",
    "start": "1276720",
    "end": "1283200"
  },
  {
    "text": "well initially but for us reverse engineers that just want to make things work together",
    "start": "1283200",
    "end": "1289120"
  },
  {
    "text": "when they were not intended to they are a godsend because one of the things that have",
    "start": "1289120",
    "end": "1295440"
  },
  {
    "text": "always been very difficult for me doing reverse engineering is figuring out how dma works",
    "start": "1295440",
    "end": "1301600"
  },
  {
    "text": "but you know if you can dump the page table from the i o mu it basically tells you exactly where you",
    "start": "1301600",
    "end": "1308559"
  },
  {
    "text": "should be writing or reading from it gives you a complete map of the virtual space",
    "start": "1308559",
    "end": "1314880"
  },
  {
    "text": "this one even tells you what other mmio the co-processor is likely to access addresses that start with zero eight are",
    "start": "1314880",
    "end": "1321440"
  },
  {
    "text": "physical memory and apple platforms addresses that start zero two are mmio there's some high mmi oh this is used",
    "start": "1321440",
    "end": "1328240"
  },
  {
    "text": "for pci express but you know like this is basically free information that you didn't have to work",
    "start": "1328240",
    "end": "1333679"
  },
  {
    "text": "very hard for and to me this is really key to being efficient at reverse engineering hardware",
    "start": "1333679",
    "end": "1340880"
  },
  {
    "text": "so as i said apple has gotten my iomu region they have 24 of them now and the",
    "start": "1341120",
    "end": "1346799"
  },
  {
    "text": "gpu has its own and the nvme has a little special one that i'll be talking about in the next",
    "start": "1346799",
    "end": "1352559"
  },
  {
    "text": "slide no no next max then so another place where you really want",
    "start": "1352559",
    "end": "1358480"
  },
  {
    "text": "to have the ability to dump page tables was unexpectedly at least to us",
    "start": "1358480",
    "end": "1364480"
  },
  {
    "text": "the device memory types so the arm architecture is uncommonly fine grained it will what",
    "start": "1364480",
    "end": "1370880"
  },
  {
    "text": "it lets you specify about memory you know on x86 you have the memory type range registers mtrrs that you can use",
    "start": "1370880",
    "end": "1378400"
  },
  {
    "text": "to say to the cpu that some memory should be you know cached or write back policy but on arm you can actually say",
    "start": "1378400",
    "end": "1386400"
  },
  {
    "text": "much more about device memory too it's not just you know oh i sent an mmio you can for instance request that the",
    "start": "1386400",
    "end": "1393039"
  },
  {
    "text": "target device responds to you with an acknowledge or you can for instance say that there cannot be any reordering of memory",
    "start": "1393039",
    "end": "1399039"
  },
  {
    "text": "requests going to the device and so on and so on and there's two types that are used the most",
    "start": "1399039",
    "end": "1405200"
  },
  {
    "text": "ng and r and e which is the most restrictive you cannot reorder you cannot you cannot",
    "start": "1405200",
    "end": "1411120"
  },
  {
    "text": "send a new request before the previous one completes and so on and so on and so on and the second one is mgnre which allows",
    "start": "1411120",
    "end": "1417039"
  },
  {
    "text": "you to send requests to write without having to acknowledge them so linux of course uses ngnre because",
    "start": "1417039",
    "end": "1423279"
  },
  {
    "text": "it's faster by default and we were wondering why the hell",
    "start": "1423279",
    "end": "1429200"
  },
  {
    "text": "are all of our register rights just going nowhere and having no effect",
    "start": "1429200",
    "end": "1434320"
  },
  {
    "text": "when we are bringing up linux lm1 well as it turns out for them to actually work",
    "start": "1434320",
    "end": "1439760"
  },
  {
    "text": "you have to issue them with the more restrictive memory access type and then about two weeks later when we were",
    "start": "1439760",
    "end": "1446240"
  },
  {
    "text": "working on pci express we had the same exact problem which felt very odd as it",
    "start": "1446240",
    "end": "1452080"
  },
  {
    "text": "turns out for pci express you have to request no right to acknowledge because otherwise your rights got blackholed as",
    "start": "1452080",
    "end": "1458400"
  },
  {
    "text": "well so this actually was quite a find and the only reason we could",
    "start": "1458400",
    "end": "1464240"
  },
  {
    "text": "we could really figure out how it worked is because we have a model we ran the xnu kernel",
    "start": "1464240",
    "end": "1471679"
  },
  {
    "text": "inside the model and we dump the page table and you can see that the ranges that correspond to pci express",
    "start": "1471679",
    "end": "1478400"
  },
  {
    "text": "are posted right in gnre and the ranges that correspond to android pmio have the more restrictive",
    "start": "1478400",
    "end": "1485200"
  },
  {
    "text": "policy so you can see that this is basically something that we'd probably be stuck",
    "start": "1485200",
    "end": "1490400"
  },
  {
    "text": "trying random things for quite a long time before we figured out what to do and having a model made it into a",
    "start": "1490400",
    "end": "1496880"
  },
  {
    "text": "one-day affair and it was one day because we didn't even know we should look for it",
    "start": "1496880",
    "end": "1502000"
  },
  {
    "text": "because this is a very unusual feature so i promised i would give you a little",
    "start": "1502000",
    "end": "1507120"
  },
  {
    "text": "bit of information on amx so amx is a vector extension it's a shared unit used by the course inside",
    "start": "1507120",
    "end": "1514000"
  },
  {
    "text": "the m1 or the a14 or i think a13 may have had it",
    "start": "1514000",
    "end": "1520320"
  },
  {
    "text": "it's actually a really powerful and very cleverly designed vector processor",
    "start": "1520320",
    "end": "1525679"
  },
  {
    "text": "so you know i used to work on gpus which were probably the largest vector processors made after the demise of cray",
    "start": "1525679",
    "end": "1533440"
  },
  {
    "text": "i guess next to make some and the way we did it we were very",
    "start": "1533440",
    "end": "1538720"
  },
  {
    "text": "restrictive about how the vectors have to be aligned in registers so apple actually did something really cute there",
    "start": "1538720",
    "end": "1545039"
  },
  {
    "text": "and they permit the vector to start within a vector register and continue and then wrap to the next register in a",
    "start": "1545039",
    "end": "1551120"
  },
  {
    "text": "ring and this is really brilliant if you're doing things like audio processing which is what they use it for for instance in",
    "start": "1551120",
    "end": "1557360"
  },
  {
    "text": "a14 but figuring it out wasn't really obvious unless you can run the software",
    "start": "1557360",
    "end": "1563360"
  },
  {
    "text": "and see what it's doing and compare the results between your model and real hardware because you know",
    "start": "1563360",
    "end": "1570400"
  },
  {
    "text": "it's not going to cycle because you get it wrong it's just numbers the audio is not going to sound right but what is",
    "start": "1570400",
    "end": "1575520"
  },
  {
    "text": "right anyway plus how do you evaluate it automatically but thanks to having a model you could",
    "start": "1575520",
    "end": "1581440"
  },
  {
    "text": "actually just compare it we did our reverse engineering before m1 was on the market",
    "start": "1581440",
    "end": "1587440"
  },
  {
    "text": "as part of us our iphone 12 models and it was kind of really fun to do we",
    "start": "1587440",
    "end": "1593679"
  },
  {
    "text": "got started by noticing a very characteristic sequence in ffts if you want more information however",
    "start": "1593679",
    "end": "1599840"
  },
  {
    "text": "we're gonna do a talk about that a while ago but there's been an open effort on this",
    "start": "1599840",
    "end": "1605279"
  },
  {
    "text": "by dougal johnson if you google for it there's some very good detail in there and we kind of thought it would be very",
    "start": "1605279",
    "end": "1611760"
  },
  {
    "text": "redundant to get into more on that so this is really about like use a model it will save you so much time just",
    "start": "1611760",
    "end": "1618880"
  },
  {
    "text": "trying to figure it out from this assembly would be hellish because the instruction encodings don't actually",
    "start": "1618880",
    "end": "1623919"
  },
  {
    "text": "contain the whole instruction some of it is passed as data from a register and that is usually generated on the fly",
    "start": "1623919",
    "end": "1630320"
  },
  {
    "text": "by the accelerate framework and here there's this little detail that",
    "start": "1630320",
    "end": "1635520"
  },
  {
    "text": "shows basically that even in something that is ostensibly standard like nvme you know you can just",
    "start": "1635520",
    "end": "1641600"
  },
  {
    "text": "download the specification for it apple manages to surprise us once more",
    "start": "1641600",
    "end": "1646880"
  },
  {
    "text": "so as i have mentioned apple tries to have an iommu in front of every device that can do dma",
    "start": "1646880",
    "end": "1653520"
  },
  {
    "text": "and there is a significant overhead in managing an iomu you have to allocate virtual memory ranges you have to create",
    "start": "1653520",
    "end": "1660000"
  },
  {
    "text": "the mappings you have to flash the tables after you're done doing that especially after nmap",
    "start": "1660000",
    "end": "1665679"
  },
  {
    "text": "so some designers at apple clearly noticed that they can do better than that",
    "start": "1665679",
    "end": "1671360"
  },
  {
    "text": "and they came up with a little sideband i o mmu exclusively for nvme",
    "start": "1671360",
    "end": "1677440"
  },
  {
    "text": "and only for the data transfers too so when you talk to an nvme flash device",
    "start": "1677440",
    "end": "1683600"
  },
  {
    "text": "you send requests that contain a tag and it responds with the same tag so you already have to have allocated tags",
    "start": "1683600",
    "end": "1690320"
  },
  {
    "text": "you can declare an nvme spec a maximum size for a request for instance 256 kilobytes",
    "start": "1690320",
    "end": "1696960"
  },
  {
    "text": "so they looked at it and there and they thought well we already allocate tags let's use the tag as part of the virtual",
    "start": "1696960",
    "end": "1703360"
  },
  {
    "text": "address and then within that tag it's going to be a simple linear access",
    "start": "1703360",
    "end": "1708799"
  },
  {
    "text": "from zero to whatever the maximum size of the request is so this is how the special",
    "start": "1708799",
    "end": "1714559"
  },
  {
    "text": "nvme immunity works and this showed up in uh iphone 7 and",
    "start": "1714559",
    "end": "1719840"
  },
  {
    "text": "was one of the reasons why we had to do pretty unspeakable things to the linux kernel to get nvme to work on that",
    "start": "1719840",
    "end": "1725840"
  },
  {
    "text": "platform because it also uses that classic dart i o mmu for non-data accesses",
    "start": "1725840",
    "end": "1734320"
  },
  {
    "text": "and in a14 and m1 apple surprised us again by introducing what they call linear",
    "start": "1734799",
    "end": "1741120"
  },
  {
    "text": "submission queues which is not standard nvme again it's somewhat more efficient if you only",
    "start": "1741120",
    "end": "1746799"
  },
  {
    "text": "support one queue it simplifies your design quite a bit so this is another reason why we had to",
    "start": "1746799",
    "end": "1752320"
  },
  {
    "text": "stick our fingers into the nvme driver in linux you know their platform is",
    "start": "1752320",
    "end": "1758799"
  },
  {
    "text": "very custom even if they have some standard components and finally i would like to give you a",
    "start": "1758799",
    "end": "1764159"
  },
  {
    "text": "very short overview of the really innovative feature that apple added in",
    "start": "1764159",
    "end": "1770000"
  },
  {
    "text": "the m1 they were it's usb4 so",
    "start": "1770000",
    "end": "1776720"
  },
  {
    "text": "usb4 despite being called usb has very little in common with the usb that you all love to",
    "start": "1776720",
    "end": "1783039"
  },
  {
    "text": "exploit so there's no uh they have basically borrowed the whole",
    "start": "1783039",
    "end": "1788640"
  },
  {
    "text": "design from thunderbolt and i don't know if you have familiarity with thunderbolt i mean",
    "start": "1788640",
    "end": "1794640"
  },
  {
    "text": "it's an it started out at intel called light peak it's a high speed serial bus that can tunnel other protocols inside it",
    "start": "1794640",
    "end": "1802240"
  },
  {
    "text": "it also has a native mode but i haven't seen that used a ton um and the really cool thing about it is",
    "start": "1802240",
    "end": "1809520"
  },
  {
    "text": "that it gives you external pci express or usb and you have those basically very easy way of doing this breakout and you",
    "start": "1809520",
    "end": "1814960"
  },
  {
    "text": "can daisy chain it so thunderbolt unlike usb which is this hub and spoke structure",
    "start": "1814960",
    "end": "1820480"
  },
  {
    "text": "thunderbolt is based on a network of routers that even has a protocol for resolution",
    "start": "1820480",
    "end": "1826720"
  },
  {
    "text": "of of loops that allows you to connect peripherals the host but also hosts to",
    "start": "1826720",
    "end": "1833279"
  },
  {
    "text": "each other possibly through a bunch of peripherals it's extremely flexible",
    "start": "1833279",
    "end": "1838480"
  },
  {
    "text": "and so usb4 is basically this with a somewhat updated physical layer as far as i care",
    "start": "1839039",
    "end": "1845760"
  },
  {
    "text": "and it is really cool to see the thunderbolt technology making it into a standard because i'm really hoping it's going to take off",
    "start": "1846320",
    "end": "1852159"
  },
  {
    "text": "the flexibility of being able to tunnel pci express is worth it by itself",
    "start": "1852159",
    "end": "1857519"
  },
  {
    "text": "the good news is that just before well short time before our linux on m1 port",
    "start": "1857519",
    "end": "1865200"
  },
  {
    "text": "the usb implementers forum released the first version of the usb for spec so at least we didn't have to reverse",
    "start": "1865200",
    "end": "1871519"
  },
  {
    "text": "engineer the higher level protocols intel has in fact contributed support for usb4 to the linux kernel where there",
    "start": "1871519",
    "end": "1879200"
  },
  {
    "text": "was some initial thunderbolt work that actually went pretty far by andres never",
    "start": "1879200",
    "end": "1886080"
  },
  {
    "text": "but of course you know this is apple so it's not going to be completely compatible it's not just a matter of loading the intel driver",
    "start": "1886240",
    "end": "1893120"
  },
  {
    "text": "so of course what they changed was the host interface and this is why linux on m1 actually",
    "start": "1893120",
    "end": "1900000"
  },
  {
    "text": "cuts the linux thunderbolt stack in half and allows you to substitute your own host interface drivers",
    "start": "1900000",
    "end": "1906720"
  },
  {
    "text": "they moved it to mmio instead of instead of pci express based",
    "start": "1906720",
    "end": "1913600"
  },
  {
    "text": "this is basically a ring-based interface thunderbolt has very neat layers that carried over two years before you",
    "start": "1913600",
    "end": "1919600"
  },
  {
    "text": "do not have to understand the higher level protocols such as router discovery to get your own nhi driver working",
    "start": "1919600",
    "end": "1927200"
  },
  {
    "text": "the way they do it is every element in the system has a register space",
    "start": "1927200",
    "end": "1932399"
  },
  {
    "text": "you know like usb classic usb has descriptors and has feature flags that you can set or clear and some control",
    "start": "1932399",
    "end": "1938880"
  },
  {
    "text": "messages that people can customize well thunderbolt and usb4 have register spaces they are fairly complex they",
    "start": "1938880",
    "end": "1946080"
  },
  {
    "text": "allow you to discover the individual sub spaces at runtime",
    "start": "1946080",
    "end": "1951679"
  },
  {
    "text": "and most of the spaces are fairly well defined but as it turns out you know upon closer inspection both intel and apple have",
    "start": "1951919",
    "end": "1959120"
  },
  {
    "text": "their customized register spaces because there's space for vendor extensions and every everybody uses vendor",
    "start": "1959120",
    "end": "1965600"
  },
  {
    "text": "extensions so is the incompatible nhi was the first thing",
    "start": "1965600",
    "end": "1971840"
  },
  {
    "text": "uh then we needed to boot a cortex m3 core processor to even get it working to boot the cortex m3",
    "start": "1971840",
    "end": "1979039"
  },
  {
    "text": "core processor you had to unlock a clock which is different from all other clocks for some reason",
    "start": "1979039",
    "end": "1984640"
  },
  {
    "text": "it's like this magic sequence of things you have to do and to unlock that clock you have to have the physical layer running",
    "start": "1984640",
    "end": "1991679"
  },
  {
    "text": "most physical layers for high speed protocols have two functions first one is actually talking to the wire and",
    "start": "1991679",
    "end": "1997840"
  },
  {
    "text": "receiving and sending the messages but the second function is that they also provide clocks",
    "start": "1997840",
    "end": "2003679"
  },
  {
    "text": "to whatever talks to them some physical layers will have an elastic buffer where the clocks get decoupled but many of them actually clog",
    "start": "2003679",
    "end": "2010320"
  },
  {
    "text": "some hardware and that's what we ran into here you cannot start thunderbolt higher level functions without getting",
    "start": "2010320",
    "end": "2016720"
  },
  {
    "text": "the fight completely operational so this was this file is shared between usb 3 you know super speed",
    "start": "2016720",
    "end": "2024240"
  },
  {
    "text": "between usb4 thunderbolt and between the displayport output",
    "start": "2024240",
    "end": "2029760"
  },
  {
    "text": "and so we had to basically figure out how to switch it between those different modes and so on and so on and all of this was of course done by observing mmi",
    "start": "2029760",
    "end": "2036000"
  },
  {
    "text": "all rights and trying to find common patterns",
    "start": "2036000",
    "end": "2040240"
  },
  {
    "text": "well the final result was that you can generally run gun linux and at",
    "start": "2041120",
    "end": "2047600"
  },
  {
    "text": "least some versions of the m1 i think that",
    "start": "2047600",
    "end": "2052800"
  },
  {
    "text": "uh the best bet is to basically see if you can start you know any native code on it",
    "start": "2052800",
    "end": "2058480"
  },
  {
    "text": "and if you can't it'll probably work this is a native part",
    "start": "2058480",
    "end": "2063839"
  },
  {
    "text": "there's some misconceptions floating around that we are using a hypervisor to provide the translation layer or something like this this is not true",
    "start": "2063839",
    "end": "2071358"
  },
  {
    "text": "we run directly on the physical hardware we have a little preloader",
    "start": "2071359",
    "end": "2077118"
  },
  {
    "text": "but it's role is really limited to translating",
    "start": "2077119",
    "end": "2082240"
  },
  {
    "text": "apple device trees to linux device trees because the device tree on apple isn't static when iboot loads you it patches",
    "start": "2082240",
    "end": "2090480"
  },
  {
    "text": "the device tree in a number of places with information such as the tunables that allow high-speed physical layers to",
    "start": "2090480",
    "end": "2097118"
  },
  {
    "text": "actually work and so we had to carry this over into linux so we could do the same thing",
    "start": "2097119",
    "end": "2103280"
  },
  {
    "text": "the preloader is open source of course just like everything else in this project",
    "start": "2103280",
    "end": "2108640"
  },
  {
    "text": "after that i'm just gonna give you a very short overview of surprises we had with the peripherals",
    "start": "2108640",
    "end": "2113760"
  },
  {
    "text": "you know really old macbooks use pretty standard intel style keyboard and mouse",
    "start": "2113760",
    "end": "2119760"
  },
  {
    "text": "well the last generation of x86 macbooks already moved those to spy",
    "start": "2119760",
    "end": "2125760"
  },
  {
    "text": "bus and they use a custom protocol fortunately that didn't change to the m1",
    "start": "2125760",
    "end": "2131040"
  },
  {
    "text": "lap laptop so keyboard and mouse do work the touch bar is quite complex",
    "start": "2131040",
    "end": "2136480"
  },
  {
    "text": "there's a separate display controller just for the touch bar so i guess technically you can you could",
    "start": "2136480",
    "end": "2142640"
  },
  {
    "text": "treat it as a frame buffer appropriate display controllers this is",
    "start": "2142640",
    "end": "2148480"
  },
  {
    "text": "something that i've seen people wonder about on twitter and i have to dash some hopes because the",
    "start": "2148480",
    "end": "2155440"
  },
  {
    "text": "hopes that i've seen expressed where that by using this display co-processor apple has basically stabilized and",
    "start": "2155440",
    "end": "2161920"
  },
  {
    "text": "regularized the protocol to talk to the display controller well",
    "start": "2161920",
    "end": "2166960"
  },
  {
    "text": "actually it changes every single version it's a major maintenance effort for us every time they issue a new version the",
    "start": "2166960",
    "end": "2173119"
  },
  {
    "text": "protocol is different has different even the same messages just have different id numbers",
    "start": "2173119",
    "end": "2178400"
  },
  {
    "text": "bluetooth is mostly standard it's hci but they wrapped it into a pci express rank protocol so if you want to get",
    "start": "2178400",
    "end": "2184320"
  },
  {
    "text": "bluetooth working you'll basically have to do with pci express rings to submit the messages instead of",
    "start": "2184320",
    "end": "2189839"
  },
  {
    "text": "a serial port and this was kind of sad for us because we are kind of hoping to use the mac",
    "start": "2189839",
    "end": "2195839"
  },
  {
    "text": "mini as a validation and test platform for a hypervisor product but it doesn't support gpus as far as we can tell we're",
    "start": "2195839",
    "end": "2202880"
  },
  {
    "text": "really hoping to demo that but we couldn't get either amd or nvidia gpus to work",
    "start": "2202880",
    "end": "2208880"
  },
  {
    "text": "because the memory types that the pci controller supports are not compatible this was by the way the big reason why",
    "start": "2208880",
    "end": "2214720"
  },
  {
    "text": "we were working on thunderbolt and the second thing is the hypervisor",
    "start": "2214720",
    "end": "2219839"
  },
  {
    "text": "is not fully compliant with the arm specification it only supports one of the modes that linux needs",
    "start": "2219839",
    "end": "2226079"
  },
  {
    "text": "but you know like it's still a very nice little machine um i have one running as a server at",
    "start": "2226079",
    "end": "2231200"
  },
  {
    "text": "home it's pretty much pretty much no trouble",
    "start": "2231200",
    "end": "2237838"
  },
  {
    "text": "so you know i just wanted to give you an overview what we had to do for the apple hardware showed that",
    "start": "2238320",
    "end": "2244240"
  },
  {
    "text": "a company that sets out to design its own hardware has so much freedom if they don't you know just buy ip",
    "start": "2244240",
    "end": "2250000"
  },
  {
    "text": "blocks from somebody else uh that will keep us reverse engineers",
    "start": "2250000",
    "end": "2255040"
  },
  {
    "text": "busy for the next decades and i wanted to give you an overview of the techniques and emphasize the",
    "start": "2255040",
    "end": "2261280"
  },
  {
    "text": "importance of using dynamic tools for reverse engineering because i very often see people just sitting in front of ida",
    "start": "2261280",
    "end": "2268480"
  },
  {
    "text": "and this is a way to do it it's just a very painful way for me personally so i wanted to share some approaches you",
    "start": "2268480",
    "end": "2274720"
  },
  {
    "text": "can use to avoid that thank you very much for attending my talk i hope that some of you will you",
    "start": "2274720",
    "end": "2280560"
  },
  {
    "text": "know stick your fingers into one of the many open source projects aiming to model model hardware for instance qmu for ios",
    "start": "2280560",
    "end": "2288160"
  },
  {
    "text": "there's an open source project that does it and see what you can do",
    "start": "2288160",
    "end": "2294460"
  },
  {
    "text": "[Applause]",
    "start": "2294460",
    "end": "2301150"
  },
  {
    "text": "[Music]",
    "start": "2301510",
    "end": "2308739"
  },
  {
    "text": "you",
    "start": "2309119",
    "end": "2311200"
  }
]