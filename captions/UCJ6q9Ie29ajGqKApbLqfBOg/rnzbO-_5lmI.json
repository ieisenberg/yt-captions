[
  {
    "text": "so Who am I my name is Matty stone I am a reverse engineer on the Google Play protect team under Android security and",
    "start": "30",
    "end": "7350"
  },
  {
    "text": "I've been there for about a year before that I have about five years of experience doing hardware and firmware",
    "start": "7350",
    "end": "14009"
  },
  {
    "text": "reversing and exploit dev so why do we",
    "start": "14009",
    "end": "20340"
  },
  {
    "text": "even care what is the whole point of this where are we coming from so the reason why I'm talking and wanted to",
    "start": "20340",
    "end": "27150"
  },
  {
    "text": "focus on anti analysis techniques was very first off the reason they exist is",
    "start": "27150",
    "end": "32340"
  },
  {
    "text": "this whole sort of dynamic between us as malware analysts and the malware",
    "start": "32340",
    "end": "37410"
  },
  {
    "text": "developers and so we're both striving for asymmetric advantage so they want to",
    "start": "37410",
    "end": "42690"
  },
  {
    "text": "be able to create malware that super quickly that has the most market share",
    "start": "42690",
    "end": "48059"
  },
  {
    "text": "that they're accomplishing their goal while we want to be able to detect it that much faster so that's this mindset",
    "start": "48059",
    "end": "55320"
  },
  {
    "text": "that we're coming from of they can create anti analysis techniques but can we detect them and prevent them and get",
    "start": "55320",
    "end": "62730"
  },
  {
    "text": "around them with less investment than it takes for them to develop them so what",
    "start": "62730",
    "end": "69390"
  },
  {
    "text": "is this anti analysis technique basically just to make it harder for you to figure out what they're trying to",
    "start": "69390",
    "end": "75119"
  },
  {
    "text": "hide so that this is going to encompass all of anti reverse engineering anti",
    "start": "75119",
    "end": "81299"
  },
  {
    "text": "debugging anti emulation all of those things I'm packaging up into anti analysis so",
    "start": "81299",
    "end": "89790"
  },
  {
    "text": "let's take a step back and set the contacts what's the story where are we I on the Google Play protect team we have",
    "start": "89790",
    "end": "96630"
  },
  {
    "text": "so many apps coming in all the time and certain ones are flagged for a human reviewer when that's escalated to me I",
    "start": "96630",
    "end": "102960"
  },
  {
    "text": "want to take a look and decide as quickly as possible is this benign or is it malware and",
    "start": "102960",
    "end": "108600"
  },
  {
    "text": "should be started issuing warnings so this app came up it looked pretty normal",
    "start": "108600",
    "end": "115229"
  },
  {
    "text": "but there was one interesting thing it had an elf file embedded in the apk that",
    "start": "115229",
    "end": "120299"
  },
  {
    "text": "just it didn't look right I couldn't tell if it was actually malware or not",
    "start": "120299",
    "end": "125850"
  },
  {
    "text": "yet but I also noticed that there were at least a hundred their digests or apks out there that",
    "start": "125850",
    "end": "132810"
  },
  {
    "text": "also included this elf library so that got me in this mindset of one I need to",
    "start": "132810",
    "end": "138989"
  },
  {
    "text": "decide very quickly whether this is malware at benign so that we can get",
    "start": "138989",
    "end": "144510"
  },
  {
    "text": "protections out but I also need to figure out why all of these different apks are using it so if you're sort of",
    "start": "144510",
    "end": "154829"
  },
  {
    "text": "new to the Android malware analysis we have our apk that's your Android application and in there you'll usually",
    "start": "154829",
    "end": "161370"
  },
  {
    "text": "see it's mostly running on the Java code which you will find in classes.dex however developers can choose to write",
    "start": "161370",
    "end": "168569"
  },
  {
    "text": "and have functionality that is also in the C or C++ compiled code and that's",
    "start": "168569",
    "end": "173790"
  },
  {
    "text": "what we're talking about today one of these elf libraries a shared object that is embedded in the apk and has the",
    "start": "173790",
    "end": "181590"
  },
  {
    "text": "native functionality so what are we talking about we are going to talk about",
    "start": "181590",
    "end": "188280"
  },
  {
    "text": "the wedding cake anti analysis library which is this native code and why wedding cake is cuz it's got lots of",
    "start": "188280",
    "end": "194940"
  },
  {
    "text": "layers so we're gonna go over all of these different layers why it's so robust what makes it so interesting and",
    "start": "194940",
    "end": "202919"
  },
  {
    "text": "how can you reverse engineer it more quickly and what would I have done instead of falling support each of their",
    "start": "202919",
    "end": "208739"
  },
  {
    "text": "traps along the way so once again why wedding cake why is this interesting",
    "start": "208739",
    "end": "215970"
  },
  {
    "text": "so since doing this research I have found at least 5,000 distinct sip apks",
    "start": "215970",
    "end": "221699"
  },
  {
    "text": "in the wild that contain wedding cake none of these samples are benign all of",
    "start": "221699",
    "end": "228120"
  },
  {
    "text": "them are well malware and one of the most notable aspects is the newer variants of the chinois android botnet",
    "start": "228120",
    "end": "236579"
  },
  {
    "text": "family which this links to when the sides are posted a blog post we did about it before is using this to hide",
    "start": "236579",
    "end": "243209"
  },
  {
    "text": "their functionality so what wedding cake is is it wraps the functionality that",
    "start": "243209",
    "end": "249530"
  },
  {
    "text": "the malware authors are trying to hide so this diagram came from the initial",
    "start": "249530",
    "end": "254939"
  },
  {
    "text": "blog post about Shinhwa in late 2016 so what we're gonna focus on is stage 3",
    "start": "254939",
    "end": "261329"
  },
  {
    "text": "which is the elf so that's what they had studied analyzed back then what's new is now you see this wedding",
    "start": "261329",
    "end": "269520"
  },
  {
    "text": "cake packs jar but once I finally got through all of the anti reversing and",
    "start": "269520",
    "end": "274950"
  },
  {
    "text": "anti analysis techniques the decryption and everything we're gonna talk about today what I found was I had just",
    "start": "274950",
    "end": "281270"
  },
  {
    "text": "unpacked the packed unpacker because that's what stage 3 was so I was",
    "start": "281270",
    "end": "286770"
  },
  {
    "text": "able to then say yes this is a part of this family and I now know that this",
    "start": "286770",
    "end": "292910"
  },
  {
    "text": "these signatures of this elf which I've now called wedding cake just wrap",
    "start": "292910",
    "end": "298380"
  },
  {
    "text": "everything else so what are all these different techniques that were going to",
    "start": "298380",
    "end": "303540"
  },
  {
    "text": "talk about what makes it so interesting first one of the things that's interesting is previously an Android",
    "start": "303540",
    "end": "309410"
  },
  {
    "text": "what we've seen is generally if someone was going to implement anti analysis and",
    "start": "309410",
    "end": "314430"
  },
  {
    "text": "tie a debugging types of techniques they were usually still in job because that's what the malware developers were already",
    "start": "314430",
    "end": "320760"
  },
  {
    "text": "using it's sometimes have a lower point of entry than C or C++ compiled code so",
    "start": "320760",
    "end": "326340"
  },
  {
    "text": "the first notable thing was that all of this is in native code first we're gonna",
    "start": "326340",
    "end": "331710"
  },
  {
    "text": "start about some of the j'ni or Java native interface manipulations then we're gonna go into some places where",
    "start": "331710",
    "end": "338580"
  },
  {
    "text": "they've used anti reversing techniques in place decryption and finally to about 40 different runtime environment checks",
    "start": "338580",
    "end": "345300"
  },
  {
    "text": "that they use so none of these in and of themselves are super novel but the fact",
    "start": "345300",
    "end": "350520"
  },
  {
    "text": "that they embedded each one in each other is what made it so complex and difficult to both signature reverse and",
    "start": "350520",
    "end": "358230"
  },
  {
    "text": "understand what was happening so what's the characteristics how can you notice",
    "start": "358230",
    "end": "364590"
  },
  {
    "text": "if you've seen it or not very first thing is that as we've said it's an L for SL file in the apk usually it is",
    "start": "364590",
    "end": "372960"
  },
  {
    "text": "three to eight random lowercase letters is how they've named it probably not after this talk but you know so the",
    "start": "372960",
    "end": "379890"
  },
  {
    "text": "other thing is that the Java code that has to interact with this native library",
    "start": "379890",
    "end": "384960"
  },
  {
    "text": "it is always random Lennard class names as well so what that also tells us is",
    "start": "384960",
    "end": "390210"
  },
  {
    "text": "that this is distributed as source code or and so it is dynamically generating the class names in the",
    "start": "390210",
    "end": "396289"
  },
  {
    "text": "library names every time they build the application lastly two things you can",
    "start": "396289",
    "end": "402110"
  },
  {
    "text": "look for but probably not in a couple of weeks anymore are these two strings in",
    "start": "402110",
    "end": "407270"
  },
  {
    "text": "the comment section of the elf a few more of the more key characteristics of",
    "start": "407270",
    "end": "414979"
  },
  {
    "text": "wedding-cake is that there is always two native",
    "start": "414979",
    "end": "421189"
  },
  {
    "text": "methods that are declared in the java application so we're gonna go over a bit how the J&I works and how execution is",
    "start": "421189",
    "end": "427639"
  },
  {
    "text": "passed from the java code into the native code but what you'll see is that there are always these two functions and",
    "start": "427639",
    "end": "434509"
  },
  {
    "text": "there's sometimes this third depending on the sort of version and when they",
    "start": "434509",
    "end": "439580"
  },
  {
    "text": "compiled it so the main function that our method that we will talk about that they implement in the native code is",
    "start": "439580",
    "end": "445460"
  },
  {
    "text": "here called VX eg again dynamically generated on at compile time but this is",
    "start": "445460",
    "end": "450620"
  },
  {
    "text": "gonna be the function that performs all of our runtime environment checks and starts that main functionality at the",
    "start": "450620",
    "end": "456560"
  },
  {
    "text": "elf that the malware author was trying to hide in every version though you will",
    "start": "456560",
    "end": "461659"
  },
  {
    "text": "see that they have these same method signatures so for example VX eg returns",
    "start": "461659",
    "end": "466759"
  },
  {
    "text": "an int and takes an object array as the arguments one of the other interesting",
    "start": "466759",
    "end": "473060"
  },
  {
    "text": "things I found is I really tried to understand all of the different variants and how all these different samples were",
    "start": "473060",
    "end": "478129"
  },
  {
    "text": "using it is that there are many different CPU variants of it so the most common is in most of the Android",
    "start": "478129",
    "end": "485089"
  },
  {
    "text": "ecosystem is a 32-bit what they call an Android generic arm so that uses a CPU",
    "start": "485089",
    "end": "491029"
  },
  {
    "text": "keyword army ABI but I've also seen verge 32-bit arm v7 arm 64 as well as",
    "start": "491029",
    "end": "498259"
  },
  {
    "text": "x86 here's a link to virus turtle and a digest for one of the apk samples that",
    "start": "498259",
    "end": "504979"
  },
  {
    "text": "includes three of these different CPU variants in it and what's really interesting and what we can talk about",
    "start": "504979",
    "end": "510889"
  },
  {
    "text": "and keep in mind going through the rest of this talk is that every single one of these different CPU berries has the same",
    "start": "510889",
    "end": "517909"
  },
  {
    "text": "functionality so that's not changing across any of them",
    "start": "517909",
    "end": "523060"
  },
  {
    "text": "so let's start analyzing this is the sample that I have used as sort of walk",
    "start": "523670",
    "end": "529940"
  },
  {
    "text": "through it later on you're interested it's up on virustotal as well so you can look into it and follow along later when",
    "start": "529940",
    "end": "537530"
  },
  {
    "text": "I post the slides if you're interested in that so first what is J and I how do",
    "start": "537530",
    "end": "543680"
  },
  {
    "text": "Android apps even use native code so basically Java native interface in",
    "start": "543680",
    "end": "549170"
  },
  {
    "text": "your java application where execution has to start in the android app you can",
    "start": "549170",
    "end": "554210"
  },
  {
    "text": "declare that you have methods that are implemented in your C or C++ or other",
    "start": "554210",
    "end": "559340"
  },
  {
    "text": "compiled code so you just declare it as you see here native keyword there's",
    "start": "559340",
    "end": "565910"
  },
  {
    "text": "nothing else in that method then you just write it and C or C++ but the j'ni",
    "start": "565910",
    "end": "576080"
  },
  {
    "text": "interface has to actually know how to pair these two things so and it has to",
    "start": "576080",
    "end": "581600"
  },
  {
    "text": "know where to look for these methods and where they might be implemented for this so the very first thing you'll have to",
    "start": "581600",
    "end": "587540"
  },
  {
    "text": "do in the Java side of your or Kotlin of your hand roid application is load into",
    "start": "587540",
    "end": "593960"
  },
  {
    "text": "memory that native library so you have two options both basically perform the",
    "start": "593960",
    "end": "599900"
  },
  {
    "text": "same thing system dot load library or system got load the key thing to remember as we get into the disassembly",
    "start": "599900",
    "end": "607100"
  },
  {
    "text": "of the elf is that when either of these two methods are called in Java that",
    "start": "607100",
    "end": "612830"
  },
  {
    "text": "calls the exported method in the or exported function and the elf called j'ni onload so this is going to become",
    "start": "612830",
    "end": "620480"
  },
  {
    "text": "really important later in our analysis so now you've loaded this into memory",
    "start": "620480",
    "end": "627590"
  },
  {
    "text": "but how still is this J&I going to understand that this Java declared",
    "start": "627590",
    "end": "632930"
  },
  {
    "text": "method is going to match up and run this native method there has to be some way",
    "start": "632930",
    "end": "638780"
  },
  {
    "text": "to pair and know that these two things go together so you have two options one",
    "start": "638780",
    "end": "645890"
  },
  {
    "text": "is discovery where in your compiled code the method",
    "start": "645890",
    "end": "651209"
  },
  {
    "text": "or the implementation of the method so the function there is named Java underscore the mangled class name",
    "start": "651209",
    "end": "657810"
  },
  {
    "text": "underscored the mangled mess and name this is really nice because it's a really easy indicator to look and find",
    "start": "657810",
    "end": "664470"
  },
  {
    "text": "in your elf if you're trying to pair and understand what's being run when that Java native method is called from the",
    "start": "664470",
    "end": "671040"
  },
  {
    "text": "application the second option that developers can use is called is using",
    "start": "671040",
    "end": "676770"
  },
  {
    "text": "the register native function so this you don't have to have any of your functions",
    "start": "676770",
    "end": "682290"
  },
  {
    "text": "named in the elf but what you will still have to use is a string of the both the",
    "start": "682290",
    "end": "688050"
  },
  {
    "text": "method name and the method signature so they know that this function and that is",
    "start": "688050",
    "end": "694649"
  },
  {
    "text": "in the compiled code is what is run when you call the Java native method so this",
    "start": "694649",
    "end": "701399"
  },
  {
    "text": "is what register native signature looks like and what the key we need to",
    "start": "701399",
    "end": "706440"
  },
  {
    "text": "remember is that it requires this string or the car array of name and the",
    "start": "706440",
    "end": "712050"
  },
  {
    "text": "signature and what I mean by signature in this context is here is one of our",
    "start": "712050",
    "end": "717630"
  },
  {
    "text": "Java native declared methods so if it was returning a string and taking a",
    "start": "717630",
    "end": "726120"
  },
  {
    "text": "integer as an argument then you'll have the I in the parenthesis and then the type that's being returned at the end so",
    "start": "726120",
    "end": "734370"
  },
  {
    "text": "these are really easy things to identify when you have your elf but when I opened",
    "start": "734370",
    "end": "741660"
  },
  {
    "text": "up the library that was in my sample to start I didn't see any of this there",
    "start": "741660",
    "end": "746940"
  },
  {
    "text": "were no strings none of the functions were named it didn't even have J&I onload declared in",
    "start": "746940",
    "end": "752730"
  },
  {
    "text": "the function and what this was is that in every disassembler I've opened or",
    "start": "752730",
    "end": "759390"
  },
  {
    "text": "every disassembler I've tried thus far including Ida Pro when you try and look",
    "start": "759390",
    "end": "764850"
  },
  {
    "text": "at the code that is labeled as J and I on mode I know it's not able to define",
    "start": "764850",
    "end": "770970"
  },
  {
    "text": "it as a function due to these two blocks of data so that is another really strong indicator and signature",
    "start": "770970",
    "end": "778010"
  },
  {
    "text": "when I've been able to open it up because this has been true of every different sample that was compiled in",
    "start": "778010",
    "end": "783829"
  },
  {
    "text": "32-bit arm so first thing you gotta do",
    "start": "783829",
    "end": "788870"
  },
  {
    "text": "to figure it out is super easy just declare it as code you have your function but now where do we start",
    "start": "788870",
    "end": "794870"
  },
  {
    "text": "because we wanted to focus our analysis on those Java declared methods they were",
    "start": "794870",
    "end": "800930"
  },
  {
    "text": "declared for a reason we see them called in the Java code yet we can't find what",
    "start": "800930",
    "end": "807500"
  },
  {
    "text": "is actually implemented to be associated with those methods because they should either have a native function here in",
    "start": "807500",
    "end": "815839"
  },
  {
    "text": "the elf with that mangled Java name or they should have the strings of the signature in the name for register",
    "start": "815839",
    "end": "822470"
  },
  {
    "text": "natives to run on it so where I decided to start with J&I onload because before",
    "start": "822470",
    "end": "830269"
  },
  {
    "text": "any of those native methods could run you still had to load the library into",
    "start": "830269",
    "end": "836000"
  },
  {
    "text": "memory and when I started looking at J&I onload it had all of these repetitive",
    "start": "836000",
    "end": "841610"
  },
  {
    "text": "calls to the same function at the end and it was taking in arguments of",
    "start": "841610",
    "end": "848149"
  },
  {
    "text": "different blocks of memory so this isn't a really really strong signal of encryption or decryption because you",
    "start": "848149",
    "end": "856699"
  },
  {
    "text": "have to run the decryption function over different places and then hopefully we'll have more information about how",
    "start": "856699",
    "end": "862699"
  },
  {
    "text": "this works so in this case all of the yellow blocks are the calls to the same",
    "start": "862699",
    "end": "868730"
  },
  {
    "text": "function sub 2 F 3 0 I highlighted one of them and that's gonna be our what we",
    "start": "868730",
    "end": "874910"
  },
  {
    "text": "believe right now is our decryption subroutine so that's the next place to",
    "start": "874910",
    "end": "881209"
  },
  {
    "text": "start because obviously I want to understand and be able to analyze this lab library as it runs in memory so go",
    "start": "881209",
    "end": "888860"
  },
  {
    "text": "ahead figure out put the different arguments in there it takes four arguments each time it's called versus",
    "start": "888860",
    "end": "895699"
  },
  {
    "text": "the pointer to the encrypted bytes the length of those bytes that should be decrypted and then it has two arguments",
    "start": "895699",
    "end": "902690"
  },
  {
    "text": "that stay the same the whole time we have a word see it array which is",
    "start": "902690",
    "end": "908450"
  },
  {
    "text": "an array of four bytes of each about or each byte in each value is four bytes",
    "start": "908450",
    "end": "914410"
  },
  {
    "text": "and then a byte seat array so these are generated before any of the trip ssin calls start and then the same things is",
    "start": "914410",
    "end": "921410"
  },
  {
    "text": "passed each time so this is the eye death generated decompiler which I sort",
    "start": "921410",
    "end": "928220"
  },
  {
    "text": "of cleaned up a little of what the seed arrays functions were I went ahead went",
    "start": "928220",
    "end": "934640"
  },
  {
    "text": "through this tried to understand it coated up a super simple thing in Python to go ahead and generate it so I could",
    "start": "934640",
    "end": "943250"
  },
  {
    "text": "see what those values were and what I found is that they simply were",
    "start": "943250",
    "end": "949330"
  },
  {
    "text": "allocating two arrays from 0 to 255 so they wrote this complex algorithm",
    "start": "949330",
    "end": "957040"
  },
  {
    "text": "instead of two lines to allocate these arrays so this was a first technique in",
    "start": "957040",
    "end": "962840"
  },
  {
    "text": "a really great use of my six hours as I was coding it up and trying to understand what it was doing so what I",
    "start": "962840",
    "end": "970130"
  },
  {
    "text": "would suggest in the future is that in what I would do instead was just run it",
    "start": "970130",
    "end": "976910"
  },
  {
    "text": "dynamically and grab them I already knew the same values were passed each time they weren't being regenerated but",
    "start": "976910",
    "end": "983300"
  },
  {
    "text": "instead I stuck with static reversing and fell for their anti reversing trap so hopefully if you all see this",
    "start": "983300",
    "end": "990770"
  },
  {
    "text": "algorithm in the future too you won't fall for the same things and I took the bullet for all of us so we now have our",
    "start": "990770",
    "end": "1000580"
  },
  {
    "text": "seed arrays we can move on to the decryption the key and the overall",
    "start": "1000580",
    "end": "1006430"
  },
  {
    "text": "framework of how the decryption works since it's in place and it is running during j'ni onload so before the elf is",
    "start": "1006430",
    "end": "1013270"
  },
  {
    "text": "actually there in memory is that the decryption function is called on that",
    "start": "1013270",
    "end": "1019510"
  },
  {
    "text": "encrypted array of bytes it does its decryption and then it actually overrides the byte the encrypted bytes",
    "start": "1019510",
    "end": "1026680"
  },
  {
    "text": "in the same place so this gives us an idea of how to decrypt it in Ida how we",
    "start": "1026680",
    "end": "1032170"
  },
  {
    "text": "can start to analyze it as it would look in memory to I personally was not able to identify it",
    "start": "1032170",
    "end": "1038438"
  },
  {
    "text": "as any known encryption decryption algorithm but hey if you all can find it",
    "start": "1038439",
    "end": "1044319"
  },
  {
    "text": "I would be more than uh I would be very happy to know if you see it as something that you already know and is out there",
    "start": "1044319",
    "end": "1052170"
  },
  {
    "text": "so at this point the key that I need is",
    "start": "1052260",
    "end": "1057340"
  },
  {
    "text": "I needed a solution that was going to work fast and be flexible because again remember I'm still trying to decide and make the",
    "start": "1057340",
    "end": "1064870"
  },
  {
    "text": "decision do we need to start alerting users or is this benign and I can pass and also I knew that there were at least",
    "start": "1064870",
    "end": "1070960"
  },
  {
    "text": "a hundred other samples out there and each of them are compiled differently so",
    "start": "1070960",
    "end": "1077500"
  },
  {
    "text": "my key thoughts when going into this was that one I don't need to fully",
    "start": "1077500",
    "end": "1082809"
  },
  {
    "text": "understand the decryption algorithm I just need something that's going to run over it and decrypt it for me so I can",
    "start": "1082809",
    "end": "1088510"
  },
  {
    "text": "analyze the contents the second thing I needed was I needed it to be flexible because I had so many samples I didn't",
    "start": "1088510",
    "end": "1095440"
  },
  {
    "text": "want to have to copy and paste rewrite it just for different memory addresses different registers that are used in",
    "start": "1095440",
    "end": "1101440"
  },
  {
    "text": "different places to develop my solution so those are the two key things that I keep in mind whenever I'm trying to",
    "start": "1101440",
    "end": "1108070"
  },
  {
    "text": "develop a quick decryption solution for these types of packed things so I did",
    "start": "1108070",
    "end": "1114910"
  },
  {
    "text": "open source my Ida Python script and that is available there you can also",
    "start": "1114910",
    "end": "1120910"
  },
  {
    "text": "just google add a Python embedded toolkit and it's under the Android stuff I chose to use Ida Python because it is",
    "start": "1120910",
    "end": "1127510"
  },
  {
    "text": "one of those well it's one of my favorite tools to use and where I'm super fast and I also focused on",
    "start": "1127510",
    "end": "1134550"
  },
  {
    "text": "translating that the decryption to Python rather than trying to create true",
    "start": "1134550",
    "end": "1141190"
  },
  {
    "text": "pseudo code or a code representation of it what I mean by translating it and",
    "start": "1141190",
    "end": "1146890"
  },
  {
    "text": "this is how I play into the speed and move as quickly as possible and then instead of understanding in the assembly",
    "start": "1146890",
    "end": "1153370"
  },
  {
    "text": "what each of these registers do or what the developers might have called them or what their functions were I just named",
    "start": "1153370",
    "end": "1160570"
  },
  {
    "text": "variables in Python that have the same thing and I run through and say a move",
    "start": "1160570",
    "end": "1165670"
  },
  {
    "text": "is an equal you know you cannot and just go step by step because that just allows you to follow along instead",
    "start": "1165670",
    "end": "1172630"
  },
  {
    "text": "of trying to be like pattern matching and figuring out all the different aspects of it",
    "start": "1172630",
    "end": "1178240"
  },
  {
    "text": "one thing that to keep in mind is that oops one thing to keep in mind is that Python is obviously not a strongly typed",
    "start": "1178240",
    "end": "1185740"
  },
  {
    "text": "language here in assembly the instructions know exactly what size they're operating on whether it's a byte",
    "start": "1185740",
    "end": "1192520"
  },
  {
    "text": "a half word a word so that leads to a lot of bugs if you don't keep it in mind",
    "start": "1192520",
    "end": "1197800"
  },
  {
    "text": "so it's not something's not working the way you're expecting that's generally where I look I also tend to write helper",
    "start": "1197800",
    "end": "1205540"
  },
  {
    "text": "functions which you can find and take in the script for anything else you want to use for a lot of this sign operation",
    "start": "1205540",
    "end": "1212380"
  },
  {
    "text": "since Python won't usually know that okay this is a byte that is operated on",
    "start": "1212380",
    "end": "1218230"
  },
  {
    "text": "a signed or not so let's do some demos",
    "start": "1218230",
    "end": "1223270"
  },
  {
    "text": "and talk through this assembly so this",
    "start": "1223270",
    "end": "1229150"
  },
  {
    "text": "is our sample library oh that's an interesting out of view oops okay well",
    "start": "1229150",
    "end": "1248710"
  },
  {
    "text": "we're not gonna look at it in graph view so the first thing is it's very small on",
    "start": "1248710",
    "end": "1254440"
  },
  {
    "text": "the right but there are nothing named Java as we talked about there's only all of the imported functions so that's",
    "start": "1254440",
    "end": "1261340"
  },
  {
    "text": "where we're pulling into our our j'ni",
    "start": "1261340",
    "end": "1267010"
  },
  {
    "text": "onload function and so that's what I'm scrolling through right here here is that decryption function that I already",
    "start": "1267010",
    "end": "1272920"
  },
  {
    "text": "had showed you all the screenshot of in each of the places that it takes bytes is there all right after each other it's",
    "start": "1272920",
    "end": "1281290"
  },
  {
    "text": "a block of memory and it's just random bytes there's nothing that looks key or anything like that",
    "start": "1281290",
    "end": "1287470"
  },
  {
    "text": "Ida doesn't know so all of them are declared as unknown data as we scroll through it so when we look at our",
    "start": "1287470",
    "end": "1295740"
  },
  {
    "text": "decryption subroutine that one it will let me do",
    "start": "1295740",
    "end": "1301170"
  },
  {
    "text": "here's the overall graph structure so what we have is two while loops there's",
    "start": "1301820",
    "end": "1307680"
  },
  {
    "text": "one at the top and one at the bottom and so when you're doing translation for that of those translation to Python in",
    "start": "1307680",
    "end": "1315510"
  },
  {
    "text": "order to just have a solution that can run over it it's it's I tend to find",
    "start": "1315510",
    "end": "1320640"
  },
  {
    "text": "it's helpful to just that's where you can have a variable that says keep looping true or keep looping at false",
    "start": "1320640",
    "end": "1326970"
  },
  {
    "text": "and you can just set that in the same way as your as the instructions did for",
    "start": "1326970",
    "end": "1333690"
  },
  {
    "text": "like branch less than or not branch greater than and things like that she sort of have that translation so going",
    "start": "1333690",
    "end": "1341850"
  },
  {
    "text": "through that large enough the first",
    "start": "1341850",
    "end": "1349710"
  },
  {
    "text": "thing I did was I coded up my decryption subroutine in Python that translation",
    "start": "1349710",
    "end": "1355080"
  },
  {
    "text": "we've talked about and tested over just one of the by their bytes raised to see",
    "start": "1355080",
    "end": "1360600"
  },
  {
    "text": "does anything come out of it am I doing this right our bugs coming up and followed along once I understood that",
    "start": "1360600",
    "end": "1368160"
  },
  {
    "text": "that decryption subroutine was correct that's when I had to start thinking about the second problem the",
    "start": "1368160",
    "end": "1374580"
  },
  {
    "text": "adaptability I have so many samples coming in and I want to be able to compare them to each other so I don't",
    "start": "1374580",
    "end": "1381420"
  },
  {
    "text": "want to have to recode anything else for each new sample I want something that I can run on anything and then be able to",
    "start": "1381420",
    "end": "1389430"
  },
  {
    "text": "quickly analyze and check does this decrypted library look like these others or does something different stand out so",
    "start": "1389430",
    "end": "1397170"
  },
  {
    "text": "that means that I can't hurt code in where those encrypted array addresses are I can't hard code in what their",
    "start": "1397170",
    "end": "1403290"
  },
  {
    "text": "bites are I can't know for sure where does this decryption subroutine live so",
    "start": "1403290",
    "end": "1408900"
  },
  {
    "text": "in my main script where I start is first even just finding j'ni onload just like",
    "start": "1408900",
    "end": "1414150"
  },
  {
    "text": "as humans that's where we started that's where we can start with the Python script I then went ahead and it first",
    "start": "1414150",
    "end": "1420930"
  },
  {
    "text": "just went ahead and initialized my seed arrays but the next job that the script",
    "start": "1420930",
    "end": "1427500"
  },
  {
    "text": "needed to do for me was tell me where is each array read its contents and what it's it's likes because those",
    "start": "1427500",
    "end": "1434259"
  },
  {
    "text": "are the two dynamically changing arguments to the decryption subroutine",
    "start": "1434259",
    "end": "1439950"
  },
  {
    "text": "so what I did was that I first wrote a subroutine called find a kripp sub",
    "start": "1439950",
    "end": "1446799"
  },
  {
    "text": "really creative and went through J and I on load so it starts about hex 20 or no",
    "start": "1446799",
    "end": "1465669"
  },
  {
    "text": "hex adizero off from the beginning of J and I on load and then begins looking for repetitive calls using BL since that",
    "start": "1465669",
    "end": "1473500"
  },
  {
    "text": "we're in 32-bit arm I knew at the last chunk of the J&I onload function they",
    "start": "1473500",
    "end": "1479470"
  },
  {
    "text": "just repetitive a call to this so once I found a subroutine and used some string processing on Ida's disassembly all I",
    "start": "1479470",
    "end": "1486610"
  },
  {
    "text": "needed to get the disassembly just using get dis azzam from my Ida Python api's I",
    "start": "1486610",
    "end": "1492549"
  },
  {
    "text": "just did some string processing to see the address I then just checked that that same subroutine was called at least",
    "start": "1492549",
    "end": "1499120"
  },
  {
    "text": "file five times to make sure as a safety check that I'd found the right subroutine and then I recorded all of",
    "start": "1499120",
    "end": "1506379"
  },
  {
    "text": "the cross references are the addresses that called that subroutine each place",
    "start": "1506379",
    "end": "1511539"
  },
  {
    "text": "because every time they call the subroutine they had to allocate or assign the arguments earlier they had to",
    "start": "1511539",
    "end": "1518590"
  },
  {
    "text": "say r0 is gonna equal this pointer so if I have those addresses I can now figure",
    "start": "1518590",
    "end": "1523840"
  },
  {
    "text": "out what's the encrypted array so once I did that I then iterated through each of",
    "start": "1523840",
    "end": "1531580"
  },
  {
    "text": "those different cross references and every time I had a cross-reference I",
    "start": "1531580",
    "end": "1537129"
  },
  {
    "text": "would use regular expressions to look for the different types of instructions",
    "start": "1537129",
    "end": "1543460"
  },
  {
    "text": "that could be assigning the encrypted array bytes which are at the top of this",
    "start": "1543460",
    "end": "1549370"
  },
  {
    "text": "thing so you can always change that if you are looking at a different CPU of some sort and then I pass it to this",
    "start": "1549370",
    "end": "1558009"
  },
  {
    "text": "function called get array in length I do pass it pre the previous previously used",
    "start": "1558009",
    "end": "1564580"
  },
  {
    "text": "length as well and the reason for that is that there's a couple of different ways you can assign the lengths if we look back let's",
    "start": "1564580",
    "end": "1572679"
  },
  {
    "text": "see if it's gonna load yes at J&I on mode first we see an example of where",
    "start": "1572679",
    "end": "1578559"
  },
  {
    "text": "they assign the length here to r1 using this immediate assignment cool but later",
    "start": "1578559",
    "end": "1585309"
  },
  {
    "text": "on they start storing that value on the stack as well and also loading the",
    "start": "1585309",
    "end": "1592510"
  },
  {
    "text": "length from the stack or sometimes they're using the same previous length so accounting for all of those different",
    "start": "1592510",
    "end": "1599140"
  },
  {
    "text": "regular expressions in those different cases is what I did within get array and length so finally after that we have a",
    "start": "1599140",
    "end": "1610600"
  },
  {
    "text": "map of here is where the array starts the encrypted array starts and here's",
    "start": "1610600",
    "end": "1615700"
  },
  {
    "text": "what its lengths then we can just thankfully use the Ida Python API s and call to our decryption function which",
    "start": "1615700",
    "end": "1622120"
  },
  {
    "text": "we've already tested and then we get back the results of the decryption and now another reason why I like to use Ida",
    "start": "1622120",
    "end": "1629860"
  },
  {
    "text": "Python instead of API is it allows us to just patch those bytes that previously",
    "start": "1629860",
    "end": "1635679"
  },
  {
    "text": "were encrypted using the patch fight API and write them over that address so now",
    "start": "1635679",
    "end": "1642039"
  },
  {
    "text": "we are able to run or not run analyze our Ida database in the same way as it",
    "start": "1642039",
    "end": "1648309"
  },
  {
    "text": "looks after all of this decryption has run in memory so what this looks like it's obviously here we still have all of",
    "start": "1648309",
    "end": "1655210"
  },
  {
    "text": "these unknowns if we look at our strings there's a lot of jumbled but nothing",
    "start": "1655210",
    "end": "1662110"
  },
  {
    "text": "really more oh this is really small sorry so a lot of jumbled things and",
    "start": "1662110",
    "end": "1673059"
  },
  {
    "text": "then some of the common imports exports in here but nothing that really talks",
    "start": "1673059",
    "end": "1678100"
  },
  {
    "text": "about that signature that we're still looking for or the declared Java method names that we still need to be able to",
    "start": "1678100",
    "end": "1684460"
  },
  {
    "text": "do that peering from the beginning of our apk says I have these native methods",
    "start": "1684460",
    "end": "1690010"
  },
  {
    "text": "what's run in this library so when I run this file script file",
    "start": "1690010",
    "end": "1698770"
  },
  {
    "text": "and then run our wedding cake crypt what",
    "start": "1698770",
    "end": "1707740"
  },
  {
    "text": "we will see now back in our J and ion mode is suddenly we have all these strengths so now we can start our",
    "start": "1707740",
    "end": "1713950"
  },
  {
    "text": "analysis because one of those key things is look we have calls to decks",
    "start": "1713950",
    "end": "1719260"
  },
  {
    "text": "classloader we see an it we see right here was that class name that with all",
    "start": "1719260",
    "end": "1726460"
  },
  {
    "text": "those jumbled letters so now we can really start understanding what is this doing and getting past the decryption",
    "start": "1726460",
    "end": "1732940"
  },
  {
    "text": "and this script is going to run on all of our other samples - oops",
    "start": "1732940",
    "end": "1739300"
  },
  {
    "text": "nice let's go so again focus just on speed and flexibility it's always hard",
    "start": "1739300",
    "end": "1745480"
  },
  {
    "text": "for me because I like to understand everything I'm reversing but sometimes it's not the right choice if you are",
    "start": "1745480",
    "end": "1753090"
  },
  {
    "text": "better at setting up our emulators or debuggers then that MCMAP could probably",
    "start": "1753090",
    "end": "1758770"
  },
  {
    "text": "be a faster route - but that would have taken me longer so yeah Oh",
    "start": "1758770",
    "end": "1764050"
  },
  {
    "text": "in one of the ways that I generally get around hard-coded addresses as well as registers as using regex",
    "start": "1764050",
    "end": "1771990"
  },
  {
    "text": "so just a screenshot the top was all of the encrypted block of memory and then a",
    "start": "1771990",
    "end": "1778059"
  },
  {
    "text": "segment where the same segment decrypted after running our script and the key",
    "start": "1778059",
    "end": "1784000"
  },
  {
    "text": "thing was is now we do have that string of our function name vxe G we have its",
    "start": "1784000",
    "end": "1789760"
  },
  {
    "text": "signature and now we also see in the structure the subroutine that is associated with it so this is now where",
    "start": "1789760",
    "end": "1797110"
  },
  {
    "text": "we can go we can finally get to what we actually wanted to analyze in the beginning the +1 at the end is just",
    "start": "1797110",
    "end": "1803710"
  },
  {
    "text": "because it's running in thumb mode so we have our 3 declared native methods we",
    "start": "1803710",
    "end": "1812350"
  },
  {
    "text": "know their native subroutines that are run each time they're called we have their signatures because each of",
    "start": "1812350",
    "end": "1818980"
  },
  {
    "text": "them are named differently in all the samples I just added a function number",
    "start": "1818980",
    "end": "1825790"
  },
  {
    "text": "in the leftmost column to say that any of the native declared method",
    "start": "1825790",
    "end": "1832100"
  },
  {
    "text": "that have these same signatures would correspond in the same analysis as what I have here for VX eg or two so that",
    "start": "1832100",
    "end": "1840980"
  },
  {
    "text": "leads us into our runtime environment checks which I didn't know at the time I just started my analysis on that",
    "start": "1840980",
    "end": "1846919"
  },
  {
    "text": "function number 1 but what the goal of the malware developers was they wanted",
    "start": "1846919",
    "end": "1853100"
  },
  {
    "text": "to understand if they are being dynamically analyzed debug or emulated someone managed to get through probably",
    "start": "1853100",
    "end": "1860240"
  },
  {
    "text": "the J&I manipulations the anti reversing and the decryption so now where are they",
    "start": "1860240",
    "end": "1866000"
  },
  {
    "text": "and they want to make sure this isn't a debugger that got around those things or it's not some automated pipeline and one",
    "start": "1866000",
    "end": "1872780"
  },
  {
    "text": "of the interesting things that's sort of different and is changing with the evolution of Android and how there's not",
    "start": "1872780",
    "end": "1878330"
  },
  {
    "text": "really the low-hanging fruit anymore is that they're willing to give up some of their market share as malware developers",
    "start": "1878330",
    "end": "1884960"
  },
  {
    "text": "if that means waiting at more heavily towards not being detected which is not",
    "start": "1884960",
    "end": "1892010"
  },
  {
    "text": "one of those things in a malware family such as Shinhwa which is focused on making money through different types of",
    "start": "1892010",
    "end": "1898760"
  },
  {
    "text": "fraud what we saw here is that they're willing to not run on every device as long as they're not being detected so",
    "start": "1898760",
    "end": "1907429"
  },
  {
    "text": "again the xcg perms runtime environment checks and there's 45 different ones of them if any single one of these 45",
    "start": "1907429",
    "end": "1914690"
  },
  {
    "text": "checks fails then we will stop execution of the app so we're gonna go through a",
    "start": "1914690",
    "end": "1922730"
  },
  {
    "text": "couple different groups of these that make up the 45 the first one is going through says all the system properties",
    "start": "1922730",
    "end": "1929200"
  },
  {
    "text": "so if all of them are sort of aimed at being whether or not your hardware",
    "start": "1929200",
    "end": "1935059"
  },
  {
    "text": "you're running on is an emulator or being debugged and the first 37 checks",
    "start": "1935059",
    "end": "1940880"
  },
  {
    "text": "they do are checking to see if the system property has a specific value I obviously could not list them all here",
    "start": "1940880",
    "end": "1946490"
  },
  {
    "text": "so there is a link as well as in that Ida Python embedded toolkit where the decryption is of all 37 of these checks",
    "start": "1946490",
    "end": "1953419"
  },
  {
    "text": "if you're interested in seeing what they're looking for but most of them are based on looking for common emulators",
    "start": "1953419",
    "end": "1959510"
  },
  {
    "text": "debuggers one of the interesting ones too was they will not run if you do not have SELinux",
    "start": "1959510",
    "end": "1965360"
  },
  {
    "text": "in enabling mode so that is one of the places where they're not going to generally run if your device is rooted",
    "start": "1965360",
    "end": "1971920"
  },
  {
    "text": "and things like that the last five that they go through is using is just",
    "start": "1971920",
    "end": "1977360"
  },
  {
    "text": "checking if any of these five on the right exists not even what their value is and it's pretty clear why they're all",
    "start": "1977360",
    "end": "1984170"
  },
  {
    "text": "related to different types of emulators or things that emulators and debugger",
    "start": "1984170",
    "end": "1990140"
  },
  {
    "text": "set up in order to make it look like a real device so the next thing they do is",
    "start": "1990140",
    "end": "1999290"
  },
  {
    "text": "they want to make sure what architecture they're running on they will not run if you are not running on an arm which is",
    "start": "1999290",
    "end": "2004900"
  },
  {
    "text": "really really fascinating since we found x86 versions of this library to those",
    "start": "2004900",
    "end": "2010000"
  },
  {
    "text": "x86 versions also include this check even though they are running because you",
    "start": "2010000",
    "end": "2015280"
  },
  {
    "text": "are on x86 so they don't do this with a clear API call instead what they do is",
    "start": "2015280",
    "end": "2022690"
  },
  {
    "text": "they open up slash system flash LED flash LED CSL and read the first twenty",
    "start": "2022690",
    "end": "2028900"
  },
  {
    "text": "characters or 20 bytes from that file this is still a part of the elf header",
    "start": "2028900",
    "end": "2034600"
  },
  {
    "text": "being the first 20 bytes and then out of those 20 bytes they only read three of them the first that check they do is for",
    "start": "2034600",
    "end": "2042070"
  },
  {
    "text": "the byte that's at the EE identi iCLASS position in the elf header and that",
    "start": "2042070",
    "end": "2048730"
  },
  {
    "text": "determines whether or not you're running as 32-bit or 64-bit the last two bytes",
    "start": "2048730",
    "end": "2054070"
  },
  {
    "text": "they do is what machine our hardware you are on so in this case they're looking for these values of either hex 28 or hex",
    "start": "2054070",
    "end": "2061720"
  },
  {
    "text": "b7 to say your either arm or arc 64 so the only two combinations that are",
    "start": "2061720",
    "end": "2067030"
  },
  {
    "text": "acceptable is 32-bit an arm or 64-bit and art if you are running anything else",
    "start": "2067030",
    "end": "2073120"
  },
  {
    "text": "than you exit and the application stops the next thing they look for is to",
    "start": "2073120",
    "end": "2079570"
  },
  {
    "text": "determine if monkey is running if you don't know what monkey is it is tool that allows developers to emulate",
    "start": "2079570",
    "end": "2087820"
  },
  {
    "text": "or pretend that a user is interacting with their device in their application so you know performing fake touches fake",
    "start": "2087820",
    "end": "2094600"
  },
  {
    "text": "clicks and things like that the way they go about trying to detect if monkey is running is they open up proc they then",
    "start": "2094600",
    "end": "2102430"
  },
  {
    "text": "iterate through every directory here yeah so they after they open up proc",
    "start": "2102430",
    "end": "2110710"
  },
  {
    "text": "they check what each file or notes value is and whether or not it's a directory",
    "start": "2110710",
    "end": "2116770"
  },
  {
    "text": "if it's a directory they check its name to determine whether or not it's an integer and they then construct these",
    "start": "2116770",
    "end": "2122740"
  },
  {
    "text": "two paths of the PIDs directory for calm or I mean file for calm as well as",
    "start": "2122740",
    "end": "2128350"
  },
  {
    "text": "command-line they read then out the max or a max up to seven F bytes and then",
    "start": "2128350",
    "end": "2134860"
  },
  {
    "text": "choose whichever one has more information they then see if that information contains the monkey package",
    "start": "2134860",
    "end": "2141820"
  },
  {
    "text": "name at all if it does it means that monkey is running and they choose to exit so just a note this no longer does",
    "start": "2141820",
    "end": "2150010"
  },
  {
    "text": "this doesn't work on anything Android an hour plus to open up proc and iterate through the pidz so in that case that",
    "start": "2150010",
    "end": "2157300"
  },
  {
    "text": "they are not actually able to open up proc and pit instead of exiting in that case they will still just skip over that",
    "start": "2157300",
    "end": "2164800"
  },
  {
    "text": "check and run it's only if they're able to open do they exit if they see monkey",
    "start": "2164800",
    "end": "2173910"
  },
  {
    "text": "the very last runtime environment check they do is to determine if the xposed",
    "start": "2175800",
    "end": "2181600"
  },
  {
    "text": "framework is running as well so exposed is a framework that allows you to hook",
    "start": "2181600",
    "end": "2187870"
  },
  {
    "text": "or modify system code on your Android device it's used on a lot of different forms for a lot of different reasons but",
    "start": "2187870",
    "end": "2193840"
  },
  {
    "text": "they want to make sure that you haven't hooked their app for analysis so they're going to check if these two files are",
    "start": "2193840",
    "end": "2201430"
  },
  {
    "text": "existing and praça self maps me meaning they have been mapped into memory and then if that one passes they then also",
    "start": "2201430",
    "end": "2207910"
  },
  {
    "text": "check using J and I find class methods if they able to find either of these two exposed",
    "start": "2207910",
    "end": "2214190"
  },
  {
    "text": "class methods are running to because you want to be really sure exposed isn't running but if you make it through all",
    "start": "2214190",
    "end": "2223039"
  },
  {
    "text": "of those different 45 checks as well as to the in-place decryption and anti reversing what I then found was it was",
    "start": "2223039",
    "end": "2230420"
  },
  {
    "text": "code that I'd already analyzed before and that other team members had documented as well and the sample I had",
    "start": "2230420",
    "end": "2237739"
  },
  {
    "text": "been looking at was a new variant of this Shinhwa family and it was just another unpacker so I spent you know a",
    "start": "2237739",
    "end": "2244630"
  },
  {
    "text": "couple of days all my time focused on getting through this to unpack the packed unpacker but what was really",
    "start": "2244630",
    "end": "2254269"
  },
  {
    "text": "interesting about this and what I had been thinking about a lot is one you know they're willing even though there",
    "start": "2254269",
    "end": "2260569"
  },
  {
    "text": "are a large sort of money-making fraud botnet and that's always been their goal is market share because that's how you",
    "start": "2260569",
    "end": "2266989"
  },
  {
    "text": "make money they had evolved to a point now that they were willing to miss out on potential targets if that means not",
    "start": "2266989",
    "end": "2273619"
  },
  {
    "text": "being detected and in addition they were very intelligent in how they layered",
    "start": "2273619",
    "end": "2278959"
  },
  {
    "text": "their ant analysis techniques because they targeted one I'm going to frustrate",
    "start": "2278959",
    "end": "2284539"
  },
  {
    "text": "the human analyst through the decryption and are the encryption and the anti",
    "start": "2284539",
    "end": "2289609"
  },
  {
    "text": "reverse engineering then they're also going to pray and prevent dynamic static",
    "start": "2289609",
    "end": "2296839"
  },
  {
    "text": "analysis tools running over it to find strings or understanding of what was in",
    "start": "2296839",
    "end": "2302959"
  },
  {
    "text": "the elf and lastly you know they also are using techniques to detect if they",
    "start": "2302959",
    "end": "2310729"
  },
  {
    "text": "are being dynamically analyzed so packaging all of these together to try and target each of those different types",
    "start": "2310729",
    "end": "2316579"
  },
  {
    "text": "of analysis that we all have defenders or attackers try to bring to the table",
    "start": "2316579",
    "end": "2322400"
  },
  {
    "text": "here so what I hope and what I was hoping to help or provide to you and why",
    "start": "2322400",
    "end": "2328549"
  },
  {
    "text": "I hope you are I hope to have provided in the sense that you stayed it until 6 p.m. on the last day of blackhat was",
    "start": "2328549",
    "end": "2334819"
  },
  {
    "text": "some ideas of what is the current state of the art in terms of Android anti analysis techniques and how could you",
    "start": "2334819",
    "end": "2340819"
  },
  {
    "text": "possibly get through them faster things that you could look for know that they're being used so you",
    "start": "2340819",
    "end": "2347410"
  },
  {
    "text": "don't spend the same amount of time I did and also how can you write",
    "start": "2347410",
    "end": "2352930"
  },
  {
    "text": "decryption solutions with the goal being fast and sort of agnostic to the exact",
    "start": "2352930",
    "end": "2358060"
  },
  {
    "text": "sample you're looking at and with that thank you and are there any questions",
    "start": "2358060",
    "end": "2363880"
  },
  {
    "text": "[Applause]",
    "start": "2363880",
    "end": "2373509"
  }
]