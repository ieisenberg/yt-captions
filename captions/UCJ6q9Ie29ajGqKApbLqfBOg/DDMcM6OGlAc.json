[
  {
    "start": "0",
    "end": "305000"
  },
  {
    "text": "part of the executable and they might be like might have useful properties for um for comparing but we would like to stay",
    "start": "60",
    "end": "7140"
  },
  {
    "text": "away from the from the actual instruction comparison as as long as possible so",
    "start": "7140",
    "end": "12540"
  },
  {
    "text": "um where you want to start to have something more abstract to work with secondly the compilers tend to",
    "start": "12540",
    "end": "17580"
  },
  {
    "text": "reorganize and rearrange functions in basic blocks about just because of optimization and as I mentioned",
    "start": "17580",
    "end": "23160"
  },
  {
    "text": "beforehand they rearrange basic blocks in an executable like in a function so what we need is we need an algorithm",
    "start": "23160",
    "end": "29760"
  },
  {
    "text": "to well tell us the two sequences of instructions are the same but",
    "start": "29760",
    "end": "35760"
  },
  {
    "text": "um permutated or some instructions have been switched around so basically you want to have an algorithm which tells",
    "start": "35760",
    "end": "41940"
  },
  {
    "text": "you okay this sequence is a permutation of this other other sequence and we want",
    "start": "41940",
    "end": "47040"
  },
  {
    "text": "to have a very short signature that that tells us this um so what we're doing is we're assigning a small prime number to each",
    "start": "47040",
    "end": "53640"
  },
  {
    "text": "monomic in the Assembly Language meaning move gets a small plot Number push gets a small plan number and so on and then",
    "start": "53640",
    "end": "60000"
  },
  {
    "text": "you have the sequence of instructions in a basic basic block you just multiply along that sequence you multiply the",
    "start": "60000",
    "end": "65580"
  },
  {
    "text": "product of it and the interesting part is that since prime",
    "start": "65580",
    "end": "70619"
  },
  {
    "text": "number decompositions of natural numbers are unique you will not have like uh two blocks which have a different number of",
    "start": "70619",
    "end": "78479"
  },
  {
    "text": "um instructions or which have like more instructions on one type than the other one you will not have a collision there",
    "start": "78479",
    "end": "84060"
  },
  {
    "text": "you'll always have like a unique representation of that number and or off of the block secondly multiplication is",
    "start": "84060",
    "end": "90240"
  },
  {
    "text": "commutative meaning a times b equals B times a so the prime number product includes all possible permutations",
    "start": "90240",
    "end": "96780"
  },
  {
    "text": "which means we don't have a signature that encodes all the instructions but does not encode the order",
    "start": "96780",
    "end": "102119"
  },
  {
    "text": "and as such we have a very short signature with which we can start matching basic blocks",
    "start": "102119",
    "end": "107960"
  },
  {
    "text": "all right I think I'll hand over the microphones my colleague or volts we'll speak about",
    "start": "109560",
    "end": "115860"
  },
  {
    "text": "matching basic blocks and you just wrote me that he's scared um it's his first time talking so uh",
    "start": "115860",
    "end": "122100"
  },
  {
    "text": "take it away thanks Alvar good morning everybody so once we have the call graph",
    "start": "122100",
    "end": "128459"
  },
  {
    "text": "isomorphism in place the next question we'd like to answer is how do we compare the contents of two individual functions",
    "start": "128459",
    "end": "135239"
  },
  {
    "text": "in a meaningful way in other words how do we compute the isomorphism between the two control flow graphs",
    "start": "135239",
    "end": "141959"
  },
  {
    "text": "uh the method that we use for control flow graph isomorphism is highly similar to the method we used on the collagraph",
    "start": "141959",
    "end": "148080"
  },
  {
    "text": "scope first we generate a set of initial fixed points and then we propagate these fixed points to adjacent nodes",
    "start": "148080",
    "end": "157220"
  },
  {
    "text": "uh on the control flow graph level most of the fixed points come from",
    "start": "157440",
    "end": "164519"
  },
  {
    "text": "identifying so I'm sorry",
    "start": "164519",
    "end": "170599"
  },
  {
    "text": "so sorry so the trick is basically that um",
    "start": "170599",
    "end": "175700"
  },
  {
    "text": "how do we tell the two basic blocks are associated with each other the big",
    "start": "175700",
    "end": "180959"
  },
  {
    "text": "problem is we now have an isomorphism on the function level so we know this function is the same as this function so this one should still might contain",
    "start": "180959",
    "end": "188519"
  },
  {
    "text": "400 basic blocks and you just know that these two functions are the same but might have changed slightly so you would",
    "start": "188519",
    "end": "195480"
  },
  {
    "text": "have to inspect 400 basic blocks and figure out a change Within These blocks so we need some way of identifying which",
    "start": "195480",
    "end": "200940"
  },
  {
    "text": "boxing like which block in the function a is the same as which block on the function B so in essence we have the",
    "start": "200940",
    "end": "206340"
  },
  {
    "text": "same problem again we have two graphs and we want to button isomorphism gone",
    "start": "206340",
    "end": "212040"
  },
  {
    "text": "come on",
    "start": "212040",
    "end": "214700"
  },
  {
    "text": "fair enough so um well in essence we're using the sound",
    "start": "218720",
    "end": "224519"
  },
  {
    "text": "ago we're building fixed points again and then we're propagating them so we have the two function photographs this",
    "start": "224519",
    "end": "230640"
  },
  {
    "text": "time itself the big application we just have two functions and we start building fixed points by some way and then we try",
    "start": "230640",
    "end": "236940"
  },
  {
    "text": "to propagate these fixed points using exactly the same algorithm it's like the children's sector parents and so on",
    "start": "236940",
    "end": "242040"
  },
  {
    "text": "but this time we have to use a different signature like a function itself a function flow graph has the properties",
    "start": "242040",
    "end": "247500"
  },
  {
    "text": "of number of nodes number of links and number of chords we don't really have that luxury on the basic block level because we just have one piece of",
    "start": "247500",
    "end": "253860"
  },
  {
    "text": "assembly which might be just a jump or whatever so um we need some sort of of signature to",
    "start": "253860",
    "end": "259739"
  },
  {
    "text": "identify these things and what we picked is the shorter distance to the entry point of the function and the shortest distance to the end point of the",
    "start": "259739",
    "end": "265740"
  },
  {
    "text": "function um plus a unique identifying the subfunction calls so the trick is basically that if you",
    "start": "265740",
    "end": "273240"
  },
  {
    "text": "have a function flow graph the normal structure will be that you have a lot of code bypassing the main body of the",
    "start": "273240",
    "end": "279240"
  },
  {
    "text": "function because it's Error checking like when the function starts out it jumps like it checks is argument one valid if not jumped through the end this",
    "start": "279240",
    "end": "285600"
  },
  {
    "text": "argument too well I jump to the end of the code and the trick here is that if you have like if you look at the",
    "start": "285600",
    "end": "291660"
  },
  {
    "text": "shortest distance and the short two to the beginning and the shortest distance to the end then if the change is not",
    "start": "291660",
    "end": "297720"
  },
  {
    "text": "occurring right above you like on a note that is dominating you um well you know I'll get to the",
    "start": "297720",
    "end": "304020"
  },
  {
    "text": "dominating stuff later on um first an example for the signature we have a basic block here",
    "start": "304020",
    "end": "309540"
  },
  {
    "start": "305000",
    "end": "344000"
  },
  {
    "text": "or a function with basic blocks and we want to generate a signature for this function so the first block is the entry",
    "start": "309540",
    "end": "317280"
  },
  {
    "text": "point as such the distance to the entry point is zero and the shortest path to the end is this",
    "start": "317280",
    "end": "323639"
  },
  {
    "text": "path here thus the distance to the end is one that contains one well sorry one sub",
    "start": "323639",
    "end": "329520"
  },
  {
    "text": "function call thus the number of subfunction calls this one the second node has a distance",
    "start": "329520",
    "end": "335039"
  },
  {
    "text": "to the beginning of one and its shortest path to the end of one two and one sub function call so the",
    "start": "335039",
    "end": "341100"
  },
  {
    "text": "signature is one two one and the same for the rest of the nodes now um",
    "start": "341100",
    "end": "346259"
  },
  {
    "start": "344000",
    "end": "404000"
  },
  {
    "text": "there's something compiler Theory or in general in directed graphs and loop 1 which is called domination meaning if",
    "start": "346259",
    "end": "352020"
  },
  {
    "text": "every path to a certain node has to go through another node like if every path to a has to go through b that means that",
    "start": "352020",
    "end": "359460"
  },
  {
    "text": "b is dominating a so what we have here is the situation",
    "start": "359460",
    "end": "364620"
  },
  {
    "text": "where our like if if we add a new node to the beginning of the function which dominates all other nodes we will change",
    "start": "364620",
    "end": "371520"
  },
  {
    "text": "not only the signature of like one note but we'll change the signature of all the nodes which are being dominated so",
    "start": "371520",
    "end": "376740"
  },
  {
    "text": "if we have the alt function here which has a zero distance to the beginning a distance of two to the end",
    "start": "376740",
    "end": "383280"
  },
  {
    "text": "and we add a new function in front of it all of a sudden this signature here will",
    "start": "383280",
    "end": "388380"
  },
  {
    "text": "change to this signature and this signature here will change to this signature so we have the problem of one",
    "start": "388380",
    "end": "393720"
  },
  {
    "text": "change farther the graph or one change far down on the graph on a path that every node must take like every path",
    "start": "393720",
    "end": "398940"
  },
  {
    "text": "must take um then we change all the signatures in the in the flow graph",
    "start": "398940",
    "end": "404819"
  },
  {
    "start": "404000",
    "end": "499000"
  },
  {
    "text": "so we need some way of like propagating the signature while taking into account",
    "start": "404819",
    "end": "410100"
  },
  {
    "text": "the possible displacement from having inserted basic blocks into the function and we do this by",
    "start": "410100",
    "end": "415620"
  },
  {
    "text": "um first of all creating fixed points through string references or sub function chords I mean we already have",
    "start": "415620",
    "end": "420840"
  },
  {
    "text": "the isomorphism for function so if we see a chord somewhere and a call in the other function we can decide whether",
    "start": "420840",
    "end": "426479"
  },
  {
    "text": "these chords call the same sub function both executables so in this diagram if we have a fixed point for the recorded",
    "start": "426479",
    "end": "432300"
  },
  {
    "text": "node so we know the two nodes in the red border are the same what we do is we calculate the differential in the",
    "start": "432300",
    "end": "437940"
  },
  {
    "text": "signature which in this case is one and now since nodes that are dominated",
    "start": "437940",
    "end": "443039"
  },
  {
    "text": "by another node are usually clustered together in the graph of some sort we now know well we now take this",
    "start": "443039",
    "end": "448560"
  },
  {
    "text": "difference and add it to all adjacent nodes to the one that changed so on the",
    "start": "448560",
    "end": "453720"
  },
  {
    "text": "right side we'll take the difference of one zero zero and would add it to the Blue Note and the signature of 110 which",
    "start": "453720",
    "end": "459900"
  },
  {
    "text": "it was before would now be two one one one C which it was before would now be 2 1C after we add the the one to the first",
    "start": "459900",
    "end": "468479"
  },
  {
    "text": "um like the the differential to the first um component so all of a sudden",
    "start": "468479",
    "end": "473520"
  },
  {
    "text": "the two block blue boxes the two blue nodes match and then we can take the same",
    "start": "473520",
    "end": "479520"
  },
  {
    "text": "differential and apply it to the topmost node which has zero to a on the right hand and if",
    "start": "479520",
    "end": "486840"
  },
  {
    "text": "we end the one for the first component it'll match the one on the left hand you can propagate the screw and what you get",
    "start": "486840",
    "end": "492240"
  },
  {
    "text": "is you get the isomorphism for the basic block level so all of a sudden from the two functions you know this basic block is",
    "start": "492240",
    "end": "498419"
  },
  {
    "text": "exactly this basic block now finally um because we're a bunch of mathematicians",
    "start": "498419",
    "end": "503639"
  },
  {
    "start": "499000",
    "end": "559000"
  },
  {
    "text": "or aspiring mathematicians according to our professors are not that good um",
    "start": "503639",
    "end": "509039"
  },
  {
    "text": "we thought we just use the send algorithm again on the instruction level now everybody of you will think why the",
    "start": "509039",
    "end": "514440"
  },
  {
    "text": "heck would you use a graph instruction like a graph matching on something something as simple as a linked list",
    "start": "514440",
    "end": "519479"
  },
  {
    "text": "which instructions are because what we want to do now is after we've identified all the relations",
    "start": "519479",
    "end": "524760"
  },
  {
    "text": "between the basic blocks and the executable we want to identify which instruction in one executable matches to which instructor instruction in the",
    "start": "524760",
    "end": "531180"
  },
  {
    "text": "other executable so we treat the basic block basically as a very very simple graph like a special case of a graph and",
    "start": "531180",
    "end": "538620"
  },
  {
    "text": "then we use the exact same algorithm we generate fixed points from call relations and from from string",
    "start": "538620",
    "end": "545519"
  },
  {
    "text": "references and the signature is distance to the beginning of the node and to the end of the node and then we just do the",
    "start": "545519",
    "end": "551760"
  },
  {
    "text": "same we generate a few big fixed points and we start propagating and then we get an isomorphism down to the instruction level",
    "start": "551760",
    "end": "558060"
  },
  {
    "text": "and we get the great benefit of after having an isomorphism down through Construction",
    "start": "558060",
    "end": "564060"
  },
  {
    "start": "559000",
    "end": "607000"
  },
  {
    "text": "level we can start parting comments from one idea database to the other so if you've disassembled checkpoint firewall",
    "start": "564060",
    "end": "570060"
  },
  {
    "text": "4.0 and you would like to use those results for the newer version you can generate some more physical",
    "start": "570060",
    "end": "575880"
  },
  {
    "text": "between the two and then pull all the the comments you've added to the disassembly or the local labels all the structure names everything you've done",
    "start": "575880",
    "end": "582360"
  },
  {
    "text": "basically over to the new version and you know by the ability to detect",
    "start": "582360",
    "end": "587399"
  },
  {
    "text": "like the changes that you were not able to detect before and as well because you can start comparing the sinus of",
    "start": "587399",
    "end": "593459"
  },
  {
    "text": "branches because you can directly like see which instruction belongs to which so um yeah the other thing is if you",
    "start": "593459",
    "end": "600540"
  },
  {
    "text": "have malware if you have a bagel variant you can very easily get a new Bagel variant if you import all your comments",
    "start": "600540",
    "end": "605580"
  },
  {
    "text": "over to the new one so what we're going to do now is we're going to have a look at a fun little",
    "start": "605580",
    "end": "612180"
  },
  {
    "start": "607000",
    "end": "1059000"
  },
  {
    "text": "example Microsoft published an advisory is sometimes early last year I think on",
    "start": "612180",
    "end": "617220"
  },
  {
    "text": "h33 issues in um Microsoft ice Isa server this firewall thing that they're",
    "start": "617220",
    "end": "623279"
  },
  {
    "text": "building because some guys in the British government apparently fussed the crap out of them and um well they published this advisory and",
    "start": "623279",
    "end": "630779"
  },
  {
    "text": "um we will test our tool on this",
    "start": "630779",
    "end": "635360"
  },
  {
    "text": "so without the patched our year database",
    "start": "636060",
    "end": "640580"
  },
  {
    "text": "okay is this video from the audience or should I change the font I'll change the font",
    "start": "644760",
    "end": "651320"
  },
  {
    "text": "didn't really help whatever um what we're going to do is we're going to load the diff results now um the",
    "start": "654839",
    "end": "660660"
  },
  {
    "text": "reason why I'm loading this results are not like running this on stage is because the different takes about 10-15 minutes on my computer and we don't",
    "start": "660660",
    "end": "666779"
  },
  {
    "text": "really have all that much time I would run out of jokes trying to entertain you while it's running so we'll just",
    "start": "666779",
    "end": "673079"
  },
  {
    "text": "load the results and we get the isomorphism between the the two executables here we get all the",
    "start": "673079",
    "end": "680040"
  },
  {
    "text": "match functions so sub function42b9 a0 is the same as four two B9 4C and the other executable",
    "start": "680040",
    "end": "687959"
  },
  {
    "text": "and then we can pop up the two floor graphs click",
    "start": "687959",
    "end": "694279"
  },
  {
    "text": "example or is it no it's actually the same so we see",
    "start": "696540",
    "end": "703140"
  },
  {
    "text": "but these two floor graphs while being like different layouts are actually the same code because the first the first",
    "start": "703140",
    "end": "709740"
  },
  {
    "text": "piece here I'll zoom in a little bit chords A's and one PR deck bit",
    "start": "709740",
    "end": "715620"
  },
  {
    "text": "okay so if you look sorry if you look at the",
    "start": "715620",
    "end": "721560"
  },
  {
    "text": "graphs just on the screen come on you see that this block is the same as",
    "start": "721560",
    "end": "727200"
  },
  {
    "text": "this block and if there's an error condition it jumps to this block and if there's no Recreation here it jumps to",
    "start": "727200",
    "end": "732720"
  },
  {
    "text": "this book so this block is the same as this block this book is the same as this block this is the same as this this the",
    "start": "732720",
    "end": "737820"
  },
  {
    "text": "same as this this the same as this and this the same as this so basically the the tool tells",
    "start": "737820",
    "end": "745079"
  },
  {
    "text": "us we these two functions haven't changed these are the same in both executables we pop out the two flow graphs and we see well they haven't",
    "start": "745079",
    "end": "751380"
  },
  {
    "text": "changed they've been rearranged a little bit in essence they're the same so we close the two floor graphs and we",
    "start": "751380",
    "end": "757680"
  },
  {
    "text": "scroll down to where it's getting interesting namely where the tool tells us something has changed",
    "start": "757680",
    "end": "764519"
  },
  {
    "text": "so we have a bunch of functions down here oh wait a second I quickly have to do",
    "start": "764519",
    "end": "770220"
  },
  {
    "text": "something I forgot to save some results I I did yesterday evening",
    "start": "770220",
    "end": "775500"
  },
  {
    "text": "oh never mind should be okay so let's just try this so we have a bunch of functions here",
    "start": "775500",
    "end": "781680"
  },
  {
    "text": "which have changed create control e on one of them",
    "start": "781680",
    "end": "788820"
  },
  {
    "text": "we get the flow graph and the highlighting of what changed",
    "start": "788820",
    "end": "793399"
  },
  {
    "text": "so let's have a look at this um these two like this is the old binary",
    "start": "794399",
    "end": "800040"
  },
  {
    "text": "this is the new binary let's zoom in on what changed",
    "start": "800040",
    "end": "805579"
  },
  {
    "text": "Okay so this block here",
    "start": "809579",
    "end": "817279"
  },
  {
    "text": "is the same as this book here the call calling sm1 PR like decode",
    "start": "817440",
    "end": "824399"
  },
  {
    "text": "unsigned 32-bit or unsigned 32 value so the reading a double word from the",
    "start": "824399",
    "end": "829740"
  },
  {
    "text": "package in the new version or in the old version they just read this byte into arc4 or",
    "start": "829740",
    "end": "837120"
  },
  {
    "text": "the read this double work into Arc four another call as in one per deck alignment and then as in one per deck",
    "start": "837120",
    "end": "843720"
  },
  {
    "text": "zero a is the one per deck zero table charge string no alloy ridiculous",
    "start": "843720",
    "end": "848940"
  },
  {
    "text": "function name okay and the new version they decode the value they call a01 per deck alignment and now",
    "start": "848940",
    "end": "856200"
  },
  {
    "text": "there's a check here the checking whether the decoded value is smaller than B1",
    "start": "856200",
    "end": "862260"
  },
  {
    "text": "if it is larger than B1 they push a negative value and cortex set error and return",
    "start": "862260",
    "end": "868940"
  },
  {
    "text": "and then they pass it on like only if it is less than one B they pass it onto s and one product zero cable channel",
    "start": "870240",
    "end": "876959"
  },
  {
    "text": "so um for some reason they are fixing up something that is happening in asm1 PR",
    "start": "876959",
    "end": "882839"
  },
  {
    "text": "deck zero table Channel by checking the input like by taking about like a double word from the",
    "start": "882839",
    "end": "888779"
  },
  {
    "text": "package and making sure it's within certain boundaries now what you might think is this is kind of odd because if",
    "start": "888779",
    "end": "894839"
  },
  {
    "text": "I have a library function that can't take all the all possible values I should be like patching the library",
    "start": "894839",
    "end": "900240"
  },
  {
    "text": "function instead of patching in the the code using the library function right I mean if I have a function that",
    "start": "900240",
    "end": "905519"
  },
  {
    "text": "corrupts my memory when I pass on a large value I should make sure I add some sort of check inside of that function instead of under the",
    "start": "905519",
    "end": "911339"
  },
  {
    "text": "application now this gives you an interesting hint about stuff is organized at Microsoft because apparently the the British guys pause",
    "start": "911339",
    "end": "918000"
  },
  {
    "text": "the the ISA server and that thing crashed so they sent the battery ports to the product group",
    "start": "918000",
    "end": "923399"
  },
  {
    "text": "the product group is responsible for making sure the application doesn't crash so the product group adds a check",
    "start": "923399",
    "end": "929100"
  },
  {
    "text": "and or other product groups which use the same Library don't know about it",
    "start": "929100",
    "end": "934199"
  },
  {
    "text": "which um had the funny property of giving me a free audio a net meeting for the next few months until Microsoft",
    "start": "934199",
    "end": "940320"
  },
  {
    "text": "figured out what they were doing because basically what Microsoft does with this patch is they're telling you hey as one",
    "start": "940320",
    "end": "945720"
  },
  {
    "text": "project sir Hazen one per deck zero table Channel must not take an arbitrary",
    "start": "945720",
    "end": "951240"
  },
  {
    "text": "large input because otherwise it'll start dropping stuff so you just go to your hard disk you grab all executables",
    "start": "951240",
    "end": "956880"
  },
  {
    "text": "for this Library call and then you see hey it's net meeting you and then you start writing the export",
    "start": "956880",
    "end": "962820"
  },
  {
    "text": "um some other things they fixed",
    "start": "962820",
    "end": "966860"
  },
  {
    "text": "um I think this is just another another instance of the same problem yeah this is just another call to Asen one word",
    "start": "969779",
    "end": "975600"
  },
  {
    "text": "EXO turbocharm blah and we have another instance here",
    "start": "975600",
    "end": "982160"
  },
  {
    "text": "now this is a different one so what do we have here uh the Red",
    "start": "984060",
    "end": "989459"
  },
  {
    "text": "Blocks means like red and orange means something changed green means the entry point to a loop and blue means the exit",
    "start": "989459",
    "end": "995220"
  },
  {
    "text": "point of a loop so we zoom in a little bit the new version decodes a value from the",
    "start": "995220",
    "end": "1000440"
  },
  {
    "text": "package Compares whether it's smaller than OE hex like 13 or something and if it is larger than OE hex",
    "start": "1000440",
    "end": "1007279"
  },
  {
    "text": "it does xor ebx ebx and returns zero otherwise it'll enter this Loop and this",
    "start": "1007279",
    "end": "1014899"
  },
  {
    "text": "Loop will decode as many values as specified in the double word as many 16-bit values from the pr square",
    "start": "1014899",
    "end": "1020899"
  },
  {
    "text": "like from the isn-1 stream into memory the old version doesn't have that check so the old version just takes an",
    "start": "1020899",
    "end": "1026900"
  },
  {
    "text": "unsigned like an unsigned long and then starts decoding as many bytes as the attacker specified or as many words as",
    "start": "1026900",
    "end": "1033199"
  },
  {
    "text": "the attacker specified from the sn1 stream intro memory so um yeah you can watch arbitrary bytes",
    "start": "1033199",
    "end": "1040220"
  },
  {
    "text": "from yes and one stream it's a 16-bit values so you can write null bytes and anything you like that's a nice bug",
    "start": "1040220",
    "end": "1047298"
  },
  {
    "text": "fair enough um the other bucks are pretty much like the other four changes down here are",
    "start": "1047299",
    "end": "1052700"
  },
  {
    "text": "pretty much variations of the same same subject there's not much of a difference all right",
    "start": "1052700",
    "end": "1059679"
  },
  {
    "start": "1059000",
    "end": "1245000"
  },
  {
    "text": "so um now right now is this no I think we'll have to switch laptops because uh",
    "start": "1059780",
    "end": "1065840"
  },
  {
    "text": "the malware samples are on the other box the trick is basically that we have more and more malware out there we have all",
    "start": "1065840",
    "end": "1071660"
  },
  {
    "text": "these um both variants I go both fat bot and so on on the distributed source code and you really don't want to go and",
    "start": "1071660",
    "end": "1077120"
  },
  {
    "text": "analyze all these things over and over again so we're going to do now um is we're going to show how you can",
    "start": "1077120",
    "end": "1082640"
  },
  {
    "text": "Port information from one variant of bagel to another variant of bagel like Port all the comments from one database",
    "start": "1082640",
    "end": "1088400"
  },
  {
    "text": "to the next uh in order to do this we'll have to switch the screen",
    "start": "1088400",
    "end": "1095260"
  },
  {
    "text": "don't you have to improve a push a function key or something or should it be on automatically I don't know all right let's see",
    "start": "1110419",
    "end": "1116980"
  },
  {
    "text": "yes that was wrong sorry I just opened the",
    "start": "1116980",
    "end": "1122179"
  },
  {
    "text": "CD drive so",
    "start": "1122179",
    "end": "1125260"
  },
  {
    "text": "ah there we go oh do you want to do it or do I want I",
    "start": "1131620",
    "end": "1138320"
  },
  {
    "text": "think dwarf will just demonstrate it on the screen so rough can you first show a little bit of the the database without",
    "start": "1138320",
    "end": "1143539"
  },
  {
    "text": "comments so this is a bagel database without any comments we have lots of um",
    "start": "1143539",
    "end": "1148880"
  },
  {
    "text": "well lots of library cards from the statically recognized libraries waste like there's already names in the",
    "start": "1148880",
    "end": "1155120"
  },
  {
    "text": "the stria or oh okay yeah so we only have the",
    "start": "1155120",
    "end": "1161360"
  },
  {
    "text": "imported names we don't have any comments on the database itself and we don't have any function names of course and no names for the location and",
    "start": "1161360",
    "end": "1168080"
  },
  {
    "text": "then we have another database and now we'll try to Port information from the database which is heavily",
    "start": "1168080",
    "end": "1173480"
  },
  {
    "text": "commented into the new one and they're not quite the same you can see in the numbers that the offset",
    "start": "1173480",
    "end": "1179240"
  },
  {
    "text": "changed so um this is I think Bagel W and big Lex where we're using",
    "start": "1179240",
    "end": "1184640"
  },
  {
    "text": "so we'll start putting the comments",
    "start": "1184640",
    "end": "1189860"
  },
  {
    "text": "it'll take a few seconds because you have to export all the comments from the old idea database and then rematch them",
    "start": "1189860",
    "end": "1195080"
  },
  {
    "text": "on all the functions",
    "start": "1195080",
    "end": "1197799"
  },
  {
    "text": "I know we see all the names",
    "start": "1200240",
    "end": "1207280"
  },
  {
    "text": "which we've ported and we've ported the local labels and we've parted comments",
    "start": "1207980",
    "end": "1214840"
  },
  {
    "text": "which were from the previous database so this was just pulled over I think",
    "start": "1214940",
    "end": "1220700"
  },
  {
    "text": "that where we're in Vegas now and we pulled over everything basically from Bagel X to Bagel w",
    "start": "1220700",
    "end": "1227000"
  },
  {
    "text": "ow all right so uh something we're working on to take",
    "start": "1227000",
    "end": "1232400"
  },
  {
    "text": "it back or yeah we'll have to flip-flop a bit more later on ah that was a fun way I was in the",
    "start": "1232400",
    "end": "1238580"
  },
  {
    "text": "states at the last election I learned a new word which was flip-flopper it was repeated on the television for like every five minutes",
    "start": "1238580",
    "end": "1245799"
  },
  {
    "start": "1245000",
    "end": "1348000"
  },
  {
    "text": "yeah pretty much all right so um the the something we're working on right",
    "start": "1250820",
    "end": "1257240"
  },
  {
    "text": "now which isn't quite ready for for prime time yet is automatic classification of malware because when you can like measure the similarity of",
    "start": "1257240",
    "end": "1264559"
  },
  {
    "text": "different pieces of code you can automatically like take a malware sample throw it into these sorts of algorithms",
    "start": "1264559",
    "end": "1269660"
  },
  {
    "text": "these algorithms will automatically compare them to a large database of other things transfer them automatically",
    "start": "1269660",
    "end": "1274760"
  },
  {
    "text": "and say well it takes code from this and this and this this very similar to work that uh Carrera and gagliadly have done",
    "start": "1274760",
    "end": "1281600"
  },
  {
    "text": "their two researchers at f-secure and they're doing fairly fantastic work on automatically clustering uh virus family",
    "start": "1281600",
    "end": "1288860"
  },
  {
    "text": "families together well we wanted to try to work our own we'll see whether this works",
    "start": "1288860",
    "end": "1295159"
  },
  {
    "text": "fair enough so enough on the Portland business something else which we are working on",
    "start": "1295159",
    "end": "1302000"
  },
  {
    "text": "which is not quite ready for show yet is importing symbols back into ROMs so oftentimes you this is similar something",
    "start": "1302000",
    "end": "1307820"
  },
  {
    "text": "like a PIX pix ROM image it's x86 it uses Optimus so you know open Messages",
    "start": "1307820",
    "end": "1313159"
  },
  {
    "text": "is in there and you'd like to use all the like even though the version of open SSL but you don't know the exact",
    "start": "1313159",
    "end": "1318500"
  },
  {
    "text": "compiler settings and so on so what we are trying to do right now is we're going to take the pixel database and",
    "start": "1318500",
    "end": "1325940"
  },
  {
    "text": "figure out the version of open SSL recompile Optimus SL with symbols and then diff it against the Pix database",
    "start": "1325940",
    "end": "1331820"
  },
  {
    "text": "thus importing all the symbol names and all the debug information which we have from opensl into our Cisco picks",
    "start": "1331820",
    "end": "1337520"
  },
  {
    "text": "database which should massively save time when we actually uh start to",
    "start": "1337520",
    "end": "1343100"
  },
  {
    "text": "execute code on on epics all right",
    "start": "1343100",
    "end": "1348919"
  },
  {
    "start": "1348000",
    "end": "1388000"
  },
  {
    "text": "so um we've been all over this this entire dipping business what we will have to talk about is navigating",
    "start": "1348919",
    "end": "1354559"
  },
  {
    "text": "binaries um basically when you're dealing with applications they are large they're really large and really complex and your",
    "start": "1354559",
    "end": "1361100"
  },
  {
    "text": "brain is really not built for recognizing like some sort of high levels language structure in a bunch of bytes your brain is recognizing for like",
    "start": "1361100",
    "end": "1367460"
  },
  {
    "text": "built for recognizing food movement and danger and we shouldn't kill ourselves so that we can do everything we want",
    "start": "1367460",
    "end": "1372980"
  },
  {
    "text": "with our brain so visualization is really really important because it will clarify a lot of situations and allow",
    "start": "1372980",
    "end": "1378919"
  },
  {
    "text": "you to work more efficiently so I really like to use the the analogy of roadmaps for programs I'm used this",
    "start": "1378919",
    "end": "1385340"
  },
  {
    "text": "before and when we're talking about the graph isomorphisms because in essence um you oftentimes have the problem with",
    "start": "1385340",
    "end": "1391039"
  },
  {
    "start": "1388000",
    "end": "1568000"
  },
  {
    "text": "a car that you can't find your destination my girlfriend would probably um tell you that I'm really bad at finding destinations in cars like if I",
    "start": "1391039",
    "end": "1397580"
  },
  {
    "text": "have to go anywhere so you have to solve similar problems in security analysis oftentimes you'll find a security",
    "start": "1397580",
    "end": "1403159"
  },
  {
    "text": "vulnerability somewhere in the binary and you have no clue how to reach it and you just know this location is screwed or alternatively your reverse engineer",
    "start": "1403159",
    "end": "1410299"
  },
  {
    "text": "patch and now you know there is a bug in here and you want to write an exponent but how do you get to that point this is",
    "start": "1410299",
    "end": "1415520"
  },
  {
    "text": "essentially a navigation problem this is the problem how do I get to the cosmopolsky from Central Station in",
    "start": "1415520",
    "end": "1420919"
  },
  {
    "text": "Munich so um you basically have to have some sort of",
    "start": "1420919",
    "end": "1426500"
  },
  {
    "text": "of device which helps in navigating through the binaries I mean there's a reason why we invented Maps because if",
    "start": "1426500",
    "end": "1432020"
  },
  {
    "text": "you start describing me the road on the road like on the if I take a car from Germany to Amsterdam and you start",
    "start": "1432020",
    "end": "1438440"
  },
  {
    "text": "telling me okay it's very simple go off your door take a lift after 100 meters take a ride after 200 meters take a left",
    "start": "1438440",
    "end": "1444860"
  },
  {
    "text": "right at the green light and so if you describe a fairly complex path in these terms then people will get lost most of",
    "start": "1444860",
    "end": "1451220"
  },
  {
    "text": "the time so we need something that's kind of like a roadmap or navigation system for binaries in order to reach a",
    "start": "1451220",
    "end": "1456679"
  },
  {
    "text": "certain location um there's no reason why we should be using a textual representation when we're what we're trying to represent is",
    "start": "1456679",
    "end": "1462919"
  },
  {
    "text": "essentially a map um yeah I've mentioned this beforehand",
    "start": "1462919",
    "end": "1469280"
  },
  {
    "text": "our brain is not built for reading code our brain is built for for recognizing things we saw and recognition tasks in",
    "start": "1469280",
    "end": "1476299"
  },
  {
    "text": "in your brain are a lot faster than thinking tastic as long as as if you can recognize like you can recognize a face",
    "start": "1476299",
    "end": "1481700"
  },
  {
    "text": "without thinking about something but you can't necessarily recognize the high level language structure without thinking about it so almost all or many",
    "start": "1481700",
    "end": "1488840"
  },
  {
    "text": "many problems are data visualization problems and if we have a good way of visualizing function dependencies we can",
    "start": "1488840",
    "end": "1495140"
  },
  {
    "text": "get a massively better understanding of what the program is doing and how things interact",
    "start": "1495140",
    "end": "1500260"
  },
  {
    "text": "so we have to be a little bit careful with analogies because the analogy of roadmaps and problems isn't all that",
    "start": "1500419",
    "end": "1506900"
  },
  {
    "text": "great because there's a few things in programs which are very special first of all a road crossing usually has only",
    "start": "1506900",
    "end": "1512780"
  },
  {
    "text": "like four directions in which you're going to go from it and binaries you oftentimes have like 20 directions or",
    "start": "1512780",
    "end": "1518299"
  },
  {
    "text": "you have one location to which like 60 roads or 60 edges go so a few things clustered together a lot more heavily in",
    "start": "1518299",
    "end": "1524720"
  },
  {
    "text": "binaries secondly you don't drive down many dead ends when you try to reach some piece of",
    "start": "1524720",
    "end": "1531260"
  },
  {
    "text": "code West and binaries you oftentimes have to go through one like dead end set the problem state or something go",
    "start": "1531260",
    "end": "1537620"
  },
  {
    "text": "back go down next they didn't say the program state to something different go up again and then go down again because",
    "start": "1537620",
    "end": "1542900"
  },
  {
    "text": "only then there's a clear path to where you want to go so the roadmap thing is useful as an analogy but it has to be",
    "start": "1542900",
    "end": "1549080"
  },
  {
    "text": "used with a certain amount of care all right so yeah I think we'll switch over to the",
    "start": "1549080",
    "end": "1556880"
  },
  {
    "text": "other laptop again because that's faster and we'll have a look at a very large choreograph of an IMAP server and start",
    "start": "1556880",
    "end": "1562460"
  },
  {
    "text": "like restructuring that Caldwell in order to make more sense and be more more easily understood",
    "start": "1562460",
    "end": "1567860"
  },
  {
    "text": "so flip wait I'll open the push myself it's on the back where rods",
    "start": "1567860",
    "end": "1575840"
  },
  {
    "start": "1568000",
    "end": "1756000"
  },
  {
    "text": "I got it okay there we go so we built a small application or a bit",
    "start": "1575840",
    "end": "1583520"
  },
  {
    "text": "larger application to do this sort of stuff",
    "start": "1583520",
    "end": "1587080"
  },
  {
    "text": "um it was an eyemail C colon eye Mario I'm at before or",
    "start": "1590000",
    "end": "1597020"
  },
  {
    "text": "ah sorry",
    "start": "1597020",
    "end": "1599919"
  },
  {
    "text": "okay",
    "start": "1603020",
    "end": "1606020"
  },
  {
    "text": "all right here we go and now we'll visualize a",
    "start": "1608500",
    "end": "1615020"
  },
  {
    "text": "call through representing all the reactions of all functions in that application which is not going to be all that useful",
    "start": "1615020",
    "end": "1621020"
  },
  {
    "text": "initially I'll tell you one second",
    "start": "1621020",
    "end": "1624760"
  },
  {
    "text": "of java",
    "start": "1630260",
    "end": "1632919"
  },
  {
    "text": "situations like this I wish I could bring my desktop computer to demonstrations all right here we go so we have a list",
    "start": "1639140",
    "end": "1645919"
  },
  {
    "text": "of all functions and now we lay it out as a graph and most graph algorithms like layout algorithms are somewhat um either a",
    "start": "1645919",
    "end": "1654080"
  },
  {
    "text": "little bit more than linear in the size of the graph so we'll laid out the cheapest algorithm we have because we don't want to wait 15 minutes for the",
    "start": "1654080",
    "end": "1660080"
  },
  {
    "text": "layout to finish and all we see is a big ball of yarn those are all functions like all the",
    "start": "1660080",
    "end": "1667159"
  },
  {
    "text": "individual functions in the executable linked to each other according to the core relations including multi-agents",
    "start": "1667159",
    "end": "1673279"
  },
  {
    "text": "which means if one function calls Matlock 20 times then malloc will have 20 edges alone from this function coming",
    "start": "1673279",
    "end": "1678980"
  },
  {
    "text": "in so the first step we do is we remove all multi-edges",
    "start": "1678980",
    "end": "1683980"
  },
  {
    "text": "okay so rough is getting slightly clearer",
    "start": "1686200",
    "end": "1691778"
  },
  {
    "text": "the next thing we can do is we can start removing Library functions now Library functions have an interesting property because Library functions like malloc",
    "start": "1691820",
    "end": "1698360"
  },
  {
    "text": "will tie together logically independent parts of the graph with many many edges you have two pieces",
    "start": "1698360",
    "end": "1704299"
  },
  {
    "text": "of the program which have nothing to do with with each other but both called malloc so both will have an edge going to Mellow and you really don't need that",
    "start": "1704299",
    "end": "1711200"
  },
  {
    "text": "Nano call in that graph because it just gutters things up and it'll make sure the graph layout is pretty so first of",
    "start": "1711200",
    "end": "1716299"
  },
  {
    "text": "all you can identify Library functions and you can prioritize your auditing by selecting those with a high in degree",
    "start": "1716299",
    "end": "1722059"
  },
  {
    "text": "first like if if you have a function that's called from 250 locations the odds of this function being reachable if",
    "start": "1722059",
    "end": "1727520"
  },
  {
    "text": "you find about are a lot better than um well a function which is only called from one location",
    "start": "1727520",
    "end": "1732799"
  },
  {
    "text": "so what you do is you select a bunch of functions by in",
    "start": "1732799",
    "end": "1737840"
  },
  {
    "text": "degree this user interface still needs some work and then you remove those functions",
    "start": "1737840",
    "end": "1744740"
  },
  {
    "text": "and because you're removing functions with a high number of edges coming from them you clarify the graph a lot more",
    "start": "1744740",
    "end": "1750500"
  },
  {
    "text": "even though you're removing only a few nodes but this graph isn't quite as as clear",
    "start": "1750500",
    "end": "1755840"
  },
  {
    "text": "as it should be yet so the idea is to continue restructuring but you start like as soon as you",
    "start": "1755840",
    "end": "1761539"
  },
  {
    "text": "detangle parts of the program that are linked together through Library functions you start getting clusters for example down here",
    "start": "1761539",
    "end": "1767840"
  },
  {
    "text": "well this cluster here I'll zoom into it and this cluster is pretty much Zoom is",
    "start": "1767840",
    "end": "1775100"
  },
  {
    "text": "here this seems to be all related to exception handling of some sort so we have frame unwind down to terminate",
    "start": "1775100",
    "end": "1781880"
  },
  {
    "text": "raise find unlinked frame get range of tries and so on this is all basically",
    "start": "1781880",
    "end": "1787460"
  },
  {
    "text": "clustered together and a visibly separate cluster from the rest of the program when you remove the library",
    "start": "1787460",
    "end": "1793100"
  },
  {
    "text": "functions all right so",
    "start": "1793100",
    "end": "1797898"
  },
  {
    "text": "okay what else all right so the next thing you can do",
    "start": "1798320",
    "end": "1803720"
  },
  {
    "text": "is one seconds",
    "start": "1803720",
    "end": "1809419"
  },
  {
    "text": "we take the graph again and we'll try to find our bearings in an unknown binary remaining mainly meaning",
    "start": "1809419",
    "end": "1815659"
  },
  {
    "text": "we're really not interested in like reading Lots about what sort of configuration file this thing is pausing",
    "start": "1815659",
    "end": "1821600"
  },
  {
    "text": "so when's pausing configuration files it might have a ton of overflows but we as the attacker can't Supply the",
    "start": "1821600",
    "end": "1826940"
  },
  {
    "text": "configuration files and such we really don't care so what we want to do is we want to locate normal execution like",
    "start": "1826940",
    "end": "1832279"
  },
  {
    "text": "where is the program running in normal mode like when I use the program which parts of the X will executable are",
    "start": "1832279",
    "end": "1837740"
  },
  {
    "text": "reachable so what we're going to do is for example we could one second",
    "start": "1837740",
    "end": "1846020"
  },
  {
    "text": "while we get a circular layout",
    "start": "1846020",
    "end": "1849820"
  },
  {
    "text": "this Dell is not a it doesn't have a fan but a blow dryer",
    "start": "1857000",
    "end": "1861880"
  },
  {
    "text": "hello hmm",
    "start": "1864020",
    "end": "1869919"
  },
  {
    "text": "is it working well isn't it",
    "start": "1870500",
    "end": "1874059"
  },
  {
    "text": "um heavy CPU load I guess",
    "start": "1876860",
    "end": "1882320"
  },
  {
    "text": "don't you just love demo effects the demo effect",
    "start": "1882320",
    "end": "1887260"
  },
  {
    "text": "hmm all right I think we'll restart the",
    "start": "1887840",
    "end": "1892880"
  },
  {
    "text": "application for now don't we have the patience of waiting",
    "start": "1892880",
    "end": "1898120"
  },
  {
    "text": "okay let's start again what directory was it in",
    "start": "1902240",
    "end": "1906158"
  },
  {
    "text": "all right",
    "start": "1941179",
    "end": "1943960"
  },
  {
    "text": "so what we're going to do now is we're going to select something like the string copy node and remove everything",
    "start": "1950620",
    "end": "1956659"
  },
  {
    "text": "from the graph that never called string copy but can never reach for this and then we're going to set a breakpoint on every function which is left in that",
    "start": "1956659",
    "end": "1962539"
  },
  {
    "text": "graph and see which one ones of these like which of these functions can actually be hit during runtime so what",
    "start": "1962539",
    "end": "1968000"
  },
  {
    "text": "we're doing is we're searching for the graph for a string copy and here we are let me quickly remove",
    "start": "1968000",
    "end": "1974720"
  },
  {
    "text": "all the the Superfluous edges sorry oh",
    "start": "1974720",
    "end": "1981559"
  },
  {
    "text": "we demoed like we tested the lstr copies all stay with water tested so we got an lsdr",
    "start": "1981559",
    "end": "1988279"
  },
  {
    "text": "copy here and um we had a comment",
    "start": "1988279",
    "end": "1994960"
  },
  {
    "text": "this is dangerous and we select all predecessors to this",
    "start": "1995000",
    "end": "2000760"
  },
  {
    "text": "node then we inverted the selection and remove everything else and then we get a graph that is a lot",
    "start": "2000760",
    "end": "2008260"
  },
  {
    "text": "more manageable and what we'll do now is we'll attach a debugger",
    "start": "2008260",
    "end": "2014140"
  },
  {
    "start": "2012000",
    "end": "2095000"
  },
  {
    "text": "to the actual IMAP server um the debugger is in",
    "start": "2014140",
    "end": "2021220"
  },
  {
    "text": "sorry and where oh you go ahead",
    "start": "2021220",
    "end": "2026880"
  },
  {
    "text": "all right cool thanks so we start the IMF thing demon",
    "start": "2034600",
    "end": "2043919"
  },
  {
    "text": "foreign six",
    "start": "2046620",
    "end": "2051339"
  },
  {
    "text": "and attached the debugger what we'll do now is we just hit on record like on a video recorder",
    "start": "2059500",
    "end": "2065800"
  },
  {
    "text": "and then we run a small IMF script which starts communicating with the server",
    "start": "2065800",
    "end": "2072760"
  },
  {
    "text": "oh we have to permit to actually do this get a few events back",
    "start": "2072760",
    "end": "2078760"
  },
  {
    "text": "we click on stop and now we can see which parts of the executable were hit",
    "start": "2078760",
    "end": "2085060"
  },
  {
    "text": "so we know these ones oh sorry these three functions here were actually hit during the execution",
    "start": "2085060",
    "end": "2090580"
  },
  {
    "text": "and what we can do then is we can open the flow graph of this function",
    "start": "2090580",
    "end": "2096118"
  },
  {
    "start": "2095000",
    "end": "2145000"
  },
  {
    "text": "Ah that's not too much of an interesting function I guess let's take something more interesting",
    "start": "2096339",
    "end": "2101880"
  },
  {
    "text": "damn it is there nothing interesting here",
    "start": "2103359",
    "end": "2106980"
  },
  {
    "text": "ah this sounds like it's going to be interesting",
    "start": "2110339",
    "end": "2114720"
  },
  {
    "text": "foreign maybe a little too interesting and there we go so there's some function",
    "start": "2117400",
    "end": "2124119"
  },
  {
    "text": "here which looks like the main like judging from the rest of the programming style this might be the main user Handler for",
    "start": "2124119",
    "end": "2130359"
  },
  {
    "text": "the IMAP input so what we do now is well what we have here is all these",
    "start": "2130359",
    "end": "2135700"
  },
  {
    "text": "assembly level blocks which do some sort of parsing or do some sort of execution",
    "start": "2135700",
    "end": "2141300"
  },
  {
    "text": "and what we'll do now is we'll set a breakpoint on each one of these basic blocks and then run the IMAP script again",
    "start": "2141880",
    "end": "2150359"
  },
  {
    "text": "yes and see what sort of events are",
    "start": "2150579",
    "end": "2156460"
  },
  {
    "text": "generated we see the trace of the execution",
    "start": "2156460",
    "end": "2164619"
  },
  {
    "text": "through the file this is the path that was taken by the execution of the command",
    "start": "2164619",
    "end": "2171760"
  },
  {
    "text": "all right and then for example if we do have like let's assume we do find a bug",
    "start": "2171760",
    "end": "2179020"
  },
  {
    "text": "in this node let's just blindly assume there's a string copper here which might be useful or something else we could select all the predecessors of",
    "start": "2179020",
    "end": "2185800"
  },
  {
    "text": "this node oh this is inside of a loop so that's going to be everything so what we have to do is now we have to",
    "start": "2185800",
    "end": "2192220"
  },
  {
    "text": "navigate so we decide this one here there's the note that's going to be interesting",
    "start": "2192220",
    "end": "2198280"
  },
  {
    "text": "and we zoom in and then we try to figure out where did we take the last wrong turn",
    "start": "2198280",
    "end": "2204299"
  },
  {
    "text": "so if this is where the bug is we must have come from here",
    "start": "2204760",
    "end": "2211780"
  },
  {
    "text": "we and we must have come from here and we must have come from here and apparently we should have made sure",
    "start": "2211780",
    "end": "2219579"
  },
  {
    "text": "that's the command we want to issue equals rename because here we see an SDR",
    "start": "2219579",
    "end": "2226480"
  },
  {
    "text": "come to rename like to the string rename so apparently you're sending a command in and in order for you to take the right",
    "start": "2226480",
    "end": "2232839"
  },
  {
    "text": "branch which leads to the path that you want to execute you have to send the rename keyword",
    "start": "2232839",
    "end": "2238180"
  },
  {
    "text": "all right um so basically the thing is is usable or is going to be used for input profit",
    "start": "2238180",
    "end": "2243220"
  },
  {
    "text": "you find about how do you craft the proper input to reach a certain location",
    "start": "2243220",
    "end": "2248220"
  },
  {
    "text": "um okay any questions concerning this so far",
    "start": "2248380",
    "end": "2253799"
  },
  {
    "text": "I guess I talked too quickly because I'm pretty much at the end of my talk so um",
    "start": "2256960",
    "end": "2263020"
  },
  {
    "text": "seriously there's no question at all yes",
    "start": "2263020",
    "end": "2268920"
  },
  {
    "text": "yes",
    "start": "2269380",
    "end": "2272380"
  },
  {
    "text": "of course when you're the question is whether I can get us like a some sort of measure on the complexity of a program",
    "start": "2279720",
    "end": "2286420"
  },
  {
    "text": "when I'm generating the graph yes you can it's basically the number of nodes on the graph will of course measure",
    "start": "2286420",
    "end": "2291760"
  },
  {
    "text": "complexities to a certain extent from the number of edges on the graph will encode the other part and basically the",
    "start": "2291760",
    "end": "2297880"
  },
  {
    "text": "signature use for for the dipping meaning the number of nodes and the number of edges in the in the entire Pro",
    "start": "2297880",
    "end": "2303760"
  },
  {
    "text": "like in that sub function we'll measure the complexity of the individual function",
    "start": "2303760",
    "end": "2308859"
  },
  {
    "text": "for example um in general it's good advice to never have a c function which is a lot larger",
    "start": "2308859",
    "end": "2314980"
  },
  {
    "text": "than your screen so um like that's at least a programming guideline so if you see a big input",
    "start": "2314980",
    "end": "2320980"
  },
  {
    "text": "Handler for for email or for IMAP like this which is like huge you know that nobody is going to read the entire input",
    "start": "2320980",
    "end": "2326560"
  },
  {
    "text": "handle and you know that somebody has um not compartmentalized properly at that point so you can measure the complexity",
    "start": "2326560",
    "end": "2331900"
  },
  {
    "text": "to an extent there profit complexity would relate on different processors that's a very very",
    "start": "2331900",
    "end": "2338920"
  },
  {
    "text": "good question how does the complexity relate on different processors now the generation of flow graphs is very easy",
    "start": "2338920",
    "end": "2344800"
  },
  {
    "text": "for for x86 and it's very easy for power PC and so on because you don't really have all that much conditional execution",
    "start": "2344800",
    "end": "2350380"
  },
  {
    "text": "if you look at something like IA 64 or arm your entire basic blocks which are not really branched over with",
    "start": "2350380",
    "end": "2356859"
  },
  {
    "text": "conditionals like with a bunch which which are conditionally executed so they basically set the CPU flag and only if",
    "start": "2356859",
    "end": "2363040"
  },
  {
    "text": "that CPU flag has said these instructions will actually update the registers so um you would have like I",
    "start": "2363040",
    "end": "2369460"
  },
  {
    "text": "think at some point we'll have to build flow graphs from conditional execution platforms because right now if you do",
    "start": "2369460",
    "end": "2375400"
  },
  {
    "text": "average condition execution platform your you oftentimes have functions which are actually like on an x86 would have",
    "start": "2375400",
    "end": "2381040"
  },
  {
    "text": "10 or 15 different nodes because of all the conditionals whereas on arm they have just one chunk with a lot of",
    "start": "2381040",
    "end": "2386320"
  },
  {
    "text": "conditional instructions in between so the CPU architecture do impact the the measurement of complexity at that point",
    "start": "2386320",
    "end": "2391420"
  },
  {
    "text": "unless of course you build the flow graphing tool that is able to sort out",
    "start": "2391420",
    "end": "2396820"
  },
  {
    "text": "okay this instruction here the conditional instruction so we insert a fake fake separation in there in the",
    "start": "2396820",
    "end": "2402640"
  },
  {
    "text": "graph multi-threading um with a with a with a debugging then",
    "start": "2402640",
    "end": "2409599"
  },
  {
    "text": "yes all the well all the break points you're setting um are being recorded and they recall",
    "start": "2409599",
    "end": "2414640"
  },
  {
    "text": "the thread ID which was well which hit the breakpoint because what we're doing is we're not tracing",
    "start": "2414640",
    "end": "2419859"
  },
  {
    "text": "the application we're actually actually just putting breakpoints everywhere and whenever one is hit it gets echoed over",
    "start": "2419859",
    "end": "2425980"
  },
  {
    "text": "the network according with like um along with the thread ID that was triggering this breakpoint so in theory you should",
    "start": "2425980",
    "end": "2431619"
  },
  {
    "text": "be able to see thread interactions at some point meaning if this thread here is like running around in this part of",
    "start": "2431619",
    "end": "2438099"
  },
  {
    "text": "program this thread here is running around the other part of the program um the big thing of course it's very very limited use for for debugging",
    "start": "2438099",
    "end": "2444940"
  },
  {
    "text": "multi-threading issues if it's timing related because the debugging will screw all the time in multiplayering which is a um something I have like I don't think",
    "start": "2444940",
    "end": "2451660"
  },
  {
    "text": "anybody has a solution for that all right um any other questions",
    "start": "2451660",
    "end": "2458338"
  },
  {
    "text": "well then um thanks oh yeah well we went over this",
    "start": "2458980",
    "end": "2464680"
  },
  {
    "text": "you've seen the ball of yarn uh so there's no more questions thanks and um",
    "start": "2464680",
    "end": "2471460"
  },
  {
    "text": "well if you want to have some more information we'll put the slides online on cybersecurity.com and there's a paper",
    "start": "2471460",
    "end": "2477160"
  },
  {
    "text": "describing the algorithms in bindiff as it was like in the the comparison between as it was last year",
    "start": "2477160",
    "end": "2483640"
  },
  {
    "text": "um on that side and once we get some more research results we'll put them on there and um well thanks and have a good",
    "start": "2483640",
    "end": "2489820"
  },
  {
    "text": "conference",
    "start": "2489820",
    "end": "2492119"
  },
  {
    "text": "the beginning of your presentation yeah the super security I mean is it",
    "start": "2502200",
    "end": "2508800"
  },
  {
    "text": "yes",
    "start": "2508960",
    "end": "2511960"
  }
]