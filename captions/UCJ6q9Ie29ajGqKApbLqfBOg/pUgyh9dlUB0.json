[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "so hi everyone I'm Pietro and today Erica and I were going to present our",
    "start": "7519",
    "end": "13200"
  },
  {
    "text": "latest work on bypass inspector how to defenses to the kernel data",
    "start": "13200",
    "end": "18480"
  },
  {
    "text": "so first of all the sun credits to the people behind this project as you can see here it's me and Enrico and we does",
    "start": "18480",
    "end": "24779"
  },
  {
    "text": "Mario's Herbert and Cristiano that are part of the our booster group in Amsterdam actors a lot in this project",
    "start": "24779",
    "end": "32160"
  },
  {
    "start": "32000",
    "end": "107000"
  },
  {
    "text": "so what is this project about this project is about Spectra which is a vulnerability that affects most modern",
    "start": "32160",
    "end": "37680"
  },
  {
    "text": "CPUs and one of the reasons why Specter was considered interesting from the beginning was that it allowed attackers",
    "start": "37680",
    "end": "44579"
  },
  {
    "text": "to leak data even across privileged levels so for instance you could build exploits leaking data from the kernel to",
    "start": "44579",
    "end": "50579"
  },
  {
    "text": "user space and this was completely disregard the concept of the supervisor domains",
    "start": "50579",
    "end": "56820"
  },
  {
    "text": "so what should people vendors did when this uh Bon Appetit was discovered was to release all sorts of software and",
    "start": "56820",
    "end": "63059"
  },
  {
    "text": "other defenses and uh for the purpose of this worker we mostly focus on the defenses trying to",
    "start": "63059",
    "end": "68640"
  },
  {
    "text": "toward these kind of cross privilege exploits and the question we asked ourselves was do this mitigation",
    "start": "68640",
    "end": "74100"
  },
  {
    "text": "actually work and legal spoiler no they don't quite work as intended but we're gonna get",
    "start": "74100",
    "end": "80340"
  },
  {
    "text": "there in a bit so how do we speak this work um I'm going to start with a presentation talking about the Spectra",
    "start": "80340",
    "end": "86939"
  },
  {
    "text": "and a bit of background on how it works and I will talk about these defenses that they released and also how to",
    "start": "86939",
    "end": "92939"
  },
  {
    "text": "bypass them and afterwards Erika will pick it up and we'll talk about our new primitive which is a branch history",
    "start": "92939",
    "end": "99360"
  },
  {
    "text": "injection and then it will talk about how we can exploit this and we'll give also a live demo so hopefully that's",
    "start": "99360",
    "end": "105420"
  },
  {
    "text": "gonna go well so start with Spectrum what is Spectrum Spectra as I said it's vulnerability",
    "start": "105420",
    "end": "111780"
  },
  {
    "start": "107000",
    "end": "547000"
  },
  {
    "text": "that affects most modern CPUs and in particular it affects specific components at the CPU which is the",
    "start": "111780",
    "end": "117360"
  },
  {
    "text": "branch prediction unit and the best picture unit as the name suggests is simply trying to predict the",
    "start": "117360",
    "end": "123360"
  },
  {
    "text": "execution of different branches so for instance in this case here we have an example of a conditional branch that is",
    "start": "123360",
    "end": "129000"
  },
  {
    "text": "trying to perform a bound check for an array and what happens here is based on",
    "start": "129000",
    "end": "134940"
  },
  {
    "text": "the value you provide of the index of the array you will figure out you will start building confidence at the BPU",
    "start": "134940",
    "end": "141720"
  },
  {
    "text": "level to know if the branch is usually taken or not so if the if usually the x value is within the boundaries so for",
    "start": "141720",
    "end": "147239"
  },
  {
    "text": "instance in this case if you provide zero as a value the BPU will start building confidence okay this is a",
    "start": "147239",
    "end": "152640"
  },
  {
    "text": "valued in the boundaries so I should take this Branch same with one and two as well",
    "start": "152640",
    "end": "157680"
  },
  {
    "text": "now what happened is if you provide a value uh outside the boundaries of this array and the BPU built enough",
    "start": "157680",
    "end": "164099"
  },
  {
    "text": "confidence that this branch is usually taken it won't care that this really shouldn't happen it will do it anyway",
    "start": "164099",
    "end": "169739"
  },
  {
    "text": "speculatively so specifically you can perform an autobound read now clearly",
    "start": "169739",
    "end": "174780"
  },
  {
    "text": "this is not a big deal in the architectural domain because eventually you will figure out okay this shouldn't",
    "start": "174780",
    "end": "180000"
  },
  {
    "text": "have happened so I will just squash this read never happen I'm going to move on to whatever I need to do when the when",
    "start": "180000",
    "end": "186900"
  },
  {
    "text": "the result of bound but specifically you still perform the Rhythm and what happens when you combine it",
    "start": "186900",
    "end": "193019"
  },
  {
    "text": "with another sort of a micro retraction attack like a flash reload which is a cache attacking so what you can do is",
    "start": "193019",
    "end": "198959"
  },
  {
    "text": "for instance combine this uh Autobahn read with a dependent Auto Body reader",
    "start": "198959",
    "end": "204659"
  },
  {
    "text": "so what we'll do is for instance if in the location 256 you have the value 3",
    "start": "204659",
    "end": "210000"
  },
  {
    "text": "what you can do is perform a second read based on this value on a second array which is your flashy little buffer",
    "start": "210000",
    "end": "216659"
  },
  {
    "text": "and this value this reader will catch the value of this real buffer so that",
    "start": "216659",
    "end": "223379"
  },
  {
    "text": "the entry of the real buffer will be cached now so afterwards what you can do is to leak a secret data you simply time",
    "start": "223379",
    "end": "230700"
  },
  {
    "text": "the memory access of this array and eventually you will time the whole array and you figure out that the first",
    "start": "230700",
    "end": "237299"
  },
  {
    "text": "one was the one you actually leaked and this allows you to lick these uh data that was out of bound before",
    "start": "237299",
    "end": "244440"
  },
  {
    "text": "and this doesn't only work in the case of uh conditional branches but also in the case of in dark branches so for",
    "start": "244440",
    "end": "251099"
  },
  {
    "text": "instance here we're going to use an example of a polymorphism to explain how indirect Branch prediction Works in this",
    "start": "251099",
    "end": "257040"
  },
  {
    "text": "case here you have two classes a cat class and a DOT class and both of them implement the speak method",
    "start": "257040",
    "end": "263460"
  },
  {
    "text": "and when you call the speak method from the cat cluster you would expect the function to execute the meow function",
    "start": "263460",
    "end": "269220"
  },
  {
    "text": "and when you come from the dot class you would expect the wolf function and",
    "start": "269220",
    "end": "275040"
  },
  {
    "text": "what happens here is that you can the BPU can also help in predicting the next section of these branches so when you",
    "start": "275040",
    "end": "282360"
  },
  {
    "text": "call the function uh from the cat class in this case the BPU needs to figure out where to jump and to do so instead of a",
    "start": "282360",
    "end": "288780"
  },
  {
    "text": "few you have another uh you have a table like you have a specific cache called the branch Target buffer or btdb which",
    "start": "288780",
    "end": "295199"
  },
  {
    "text": "contains a different Target for all the possible function that you recently executed",
    "start": "295199",
    "end": "301560"
  },
  {
    "text": "and in this case you have two options clearly for this function you have two Targets one is a meow and one wolf and",
    "start": "301560",
    "end": "307380"
  },
  {
    "text": "if you're coming from the cat class in this case Mia will be a correct prediction so you will you will speed up",
    "start": "307380",
    "end": "314280"
  },
  {
    "text": "the execution and move for BMS prediction which means you will execute that function speculatively revert back",
    "start": "314280",
    "end": "320220"
  },
  {
    "text": "and then execute the mail function afterwards what's the problem with this the problem",
    "start": "320220",
    "end": "325740"
  },
  {
    "text": "is you can exploit Spectra you can build a different variant prospector which is known as a specter V2",
    "start": "325740",
    "end": "331979"
  },
  {
    "text": "that attack this kind of uh in dark branches and the reason why you can exploit this is because the branch",
    "start": "331979",
    "end": "338039"
  },
  {
    "text": "Target buffer is a shared resource across different contexts on the CPU and what an attacker can do is simply",
    "start": "338039",
    "end": "343979"
  },
  {
    "text": "override the entries in the branch Target buffer with more interesting interesting targets like a function like",
    "start": "343979",
    "end": "350220"
  },
  {
    "text": "League secret and leak secret would be something like we the one we discla we discussed earlier of a flashy load",
    "start": "350220",
    "end": "356220"
  },
  {
    "text": "attack so now what happened is when the cat class will call again the speak function",
    "start": "356220",
    "end": "362639"
  },
  {
    "text": "at this point for that uh a specific class you would expect to execute the",
    "start": "362639",
    "end": "367680"
  },
  {
    "text": "Mia function but now you overwrote it with the leak secret function which means that you will execute the league",
    "start": "367680",
    "end": "372780"
  },
  {
    "text": "secret function instead of the the meow function and uh and as we said this uh this works",
    "start": "372780",
    "end": "380100"
  },
  {
    "text": "across uh different privileged levels so you can build across privilege attacks and these are this you can do it across",
    "start": "380100",
    "end": "385800"
  },
  {
    "text": "a different application running on the same core you can do it between user and kernel and even guest and host because",
    "start": "385800",
    "end": "391440"
  },
  {
    "text": "the CPU has no idea that there are different contexts so you can imagine this is quite scary",
    "start": "391440",
    "end": "396900"
  },
  {
    "text": "right because this allows you to build attack across all different previous levels so what do we do next then",
    "start": "396900",
    "end": "402180"
  },
  {
    "text": "what the CPU vendors did uh when this was discovered was a come up with all sorts of defenses and they started with",
    "start": "402180",
    "end": "408600"
  },
  {
    "text": "the initially with the software defenses because it's faster to implement and the first one was uh known as red Pauline",
    "start": "408600",
    "end": "414180"
  },
  {
    "text": "and rappling what simply does is uh convert all the indirect codes that like",
    "start": "414180",
    "end": "419880"
  },
  {
    "text": "this called reacts we have here with the this is a Big Blob of instructions that",
    "start": "419880",
    "end": "425520"
  },
  {
    "text": "the general idea behind is just trying to stop speculation altogether so instead of performing a dark jump you",
    "start": "425520",
    "end": "432000"
  },
  {
    "text": "will convert this to this chunk of code which will not allow you to perform any speculation on this so you cannot",
    "start": "432000",
    "end": "438539"
  },
  {
    "text": "exploit Spectra anymore on this AMD is something very similar it's called the mdright Pauline or elfense",
    "start": "438539",
    "end": "444960"
  },
  {
    "text": "jump and this is basically the same exact concept just a very different implementation for a different micro",
    "start": "444960",
    "end": "450120"
  },
  {
    "text": "architecture whereas Arma because of the fragmented ecosystem of different architecture they have they do very",
    "start": "450120",
    "end": "456660"
  },
  {
    "text": "weird things depending on their different systems and in other uh both Intel normal worked",
    "start": "456660",
    "end": "465240"
  },
  {
    "text": "on two different mitigation known as ER BRS and csv2 and this mitigation even",
    "start": "465240",
    "end": "470699"
  },
  {
    "text": "though they're very different in implementation with us they're actually very similar in concept and the idea behind them is that you want to enforce",
    "start": "470699",
    "end": "477300"
  },
  {
    "text": "predictor mode isolation directly in order and what do we mean by that the general",
    "start": "477300",
    "end": "482819"
  },
  {
    "text": "idea is that we want to Target the B2B entries by security domain so the way you can visualize this is a",
    "start": "482819",
    "end": "489900"
  },
  {
    "text": "you can simply extend the the btb with an extra column where you tag the entry",
    "start": "489900",
    "end": "495300"
  },
  {
    "text": "with the other user or kernel contacts or guest or host or whatever and afterwards what happens is when you",
    "start": "495300",
    "end": "501539"
  },
  {
    "text": "perform a jump from the current context for instance at this point the PPU will allow you only to speculate two Targets",
    "start": "501539",
    "end": "508379"
  },
  {
    "text": "that belong to the kernel context then and as a result you can look at this as basically uh implement this method but",
    "start": "508379",
    "end": "514440"
  },
  {
    "text": "in the speculative domain so here you cannot Implement any more attacks that jump back to user defined functions",
    "start": "514440",
    "end": "522899"
  },
  {
    "text": "so the question we asked when we start with this project was is this isolation completed and the first thing we did was uh going",
    "start": "522899",
    "end": "528600"
  },
  {
    "text": "to look at the the their manuals and this is a Dr manual for the csv2 function",
    "start": "528600",
    "end": "534300"
  },
  {
    "text": "and in their mind already they suggest that an attacker can exploitly control speculative execution only in order to",
    "start": "534300",
    "end": "541200"
  },
  {
    "text": "determine ways so clearly we're kind of confused when we started working on this because what does this even mean",
    "start": "541200",
    "end": "547620"
  },
  {
    "start": "547000",
    "end": "879000"
  },
  {
    "text": "so we start looking at how we can bypass this uh mitigations and now I'm going to explain to you how",
    "start": "547620",
    "end": "553560"
  },
  {
    "text": "we did this then and to do so I'm going to start again with our example of the cat and dog I'm going to explain a bit",
    "start": "553560",
    "end": "559260"
  },
  {
    "text": "more about how indirect Branch prediction works on the CPU so as we said here we expect the cat",
    "start": "559260",
    "end": "565740"
  },
  {
    "text": "class to execute the meow function and the dog class to execute the wolf function right but from the previous",
    "start": "565740",
    "end": "571800"
  },
  {
    "text": "review side both functions come from the same method so the speaker method will",
    "start": "571800",
    "end": "577140"
  },
  {
    "text": "need to execute both of them so here you have one single function call right so how does the BPU",
    "start": "577140",
    "end": "582899"
  },
  {
    "text": "distinguish the two different uh contexts then and the answer is exactly this the",
    "start": "582899",
    "end": "588060"
  },
  {
    "text": "prediction needs to depend on the context of the of the function call and what do we mean by that with context",
    "start": "588060",
    "end": "594000"
  },
  {
    "text": "we simply mean the history of previously executed functions so for instance in",
    "start": "594000",
    "end": "599700"
  },
  {
    "text": "this case if you're coming from the cat class you can expect that the previously executive functions or if condition will",
    "start": "599700",
    "end": "605640"
  },
  {
    "text": "be something like a brickad class function that follows with a new cat and kitten for sword and this basically the",
    "start": "605640",
    "end": "612240"
  },
  {
    "text": "context that allows you to distinguish which element of two is uh uh is the one you're coming from",
    "start": "612240",
    "end": "618600"
  },
  {
    "text": "to this point you can use this context to generate the tag for the btb and here you will have a you can see that since",
    "start": "618600",
    "end": "625320"
  },
  {
    "text": "the context is very cat related you will suppose you're supposed to speculate then to the meow function",
    "start": "625320",
    "end": "631440"
  },
  {
    "text": "and how does this work in algor in order you can implement this uh in very different ways but uh one of the many",
    "start": "631440",
    "end": "638880"
  },
  {
    "text": "variants that was discussed in the past is uh to use to use both the call side",
    "start": "638880",
    "end": "645180"
  },
  {
    "text": "and the context set to compute the tag and what the they suggest is that they",
    "start": "645180",
    "end": "650640"
  },
  {
    "text": "hash together all the different jump addresses of the the context into a",
    "start": "650640",
    "end": "656519"
  },
  {
    "text": "shift register so you can just like squash all this information inside a single shift register and afterwards you",
    "start": "656519",
    "end": "663420"
  },
  {
    "text": "combine this value with the actual cosight of the speak function you what you do is again like you get",
    "start": "663420",
    "end": "669240"
  },
  {
    "text": "the value of the shift register the call side another hash function and you compute the tag now as you can see here",
    "start": "669240",
    "end": "674579"
  },
  {
    "text": "we have our breed cat context and as a result since the context is very cap dependent you will need to speculate to",
    "start": "674579",
    "end": "681240"
  },
  {
    "text": "the meow function so this you can see that like a digital",
    "start": "681240",
    "end": "686399"
  },
  {
    "text": "usually depends on the context but how does it work when you perform a mode switch so a mode switch between",
    "start": "686399",
    "end": "692760"
  },
  {
    "text": "user and the encounter space and our intuition is that the user history is",
    "start": "692760",
    "end": "698100"
  },
  {
    "text": "necessary for accurate kernel prediction right and I'm going to use this example of a Cisco to uh to explain why this is the",
    "start": "698100",
    "end": "704640"
  },
  {
    "text": "case so for instance in this case to perform a printf and when you perform a",
    "start": "704640",
    "end": "710040"
  },
  {
    "text": "printf what you want to do is assist call and you want to execute a Cisco right to write out the the context at",
    "start": "710040",
    "end": "715680"
  },
  {
    "text": "the con the the data to standard out and and what we'll do is generate attack based on uh this old history shared and",
    "start": "715680",
    "end": "724800"
  },
  {
    "text": "this will store a new entry in the btb for a Cisco writing afterwards when you perform a different",
    "start": "724800",
    "end": "731220"
  },
  {
    "text": "function for instance get Char at this point you want to perform a second Cisco which is Cisco read and this is supposed",
    "start": "731220",
    "end": "736680"
  },
  {
    "text": "to store another entry in the btb right but in this case it would be for the Cisco read and the original intuition was exactly",
    "start": "736680",
    "end": "743700"
  },
  {
    "text": "this that like if the Easter doesn't depend on the user space context it would be very difficult to understand",
    "start": "743700",
    "end": "749100"
  },
  {
    "text": "that to which Cisco you need to jump to because the Cisco the kernel entry point",
    "start": "749100",
    "end": "754260"
  },
  {
    "text": "is always exactly the same and you simply have a dispatcher to different Cisco handlers so this means that if",
    "start": "754260",
    "end": "760200"
  },
  {
    "text": "this mitigation don't take into account also the history of the user space all the mispredictions would be vegetable so",
    "start": "760200",
    "end": "765600"
  },
  {
    "text": "in our case we expect that the next time you call a printf the BPU will think okay I already seen this is a history so",
    "start": "765600",
    "end": "771120"
  },
  {
    "text": "I need to speculators is called right and we tested this from with an attacker",
    "start": "771120",
    "end": "776579"
  },
  {
    "text": "mindset and we thought then can we control kind of Branch prediction using only user space history so we went back to our example of the",
    "start": "776579",
    "end": "783899"
  },
  {
    "text": "Cisco identity score right in this case with the two generic ciscals and two generic contexts so what we did was we",
    "start": "783899",
    "end": "790079"
  },
  {
    "text": "generated the jump chain in user space that we call context a and we followed this with the Cisco that is called Cisco",
    "start": "790079",
    "end": "796740"
  },
  {
    "text": "a and this will generate the the entry in the btb to speculate The Cisco a and",
    "start": "796740",
    "end": "803519"
  },
  {
    "text": "afterwards we do the same for Content experiences could be so two entries in the btb for Cisco a and Cisco B and",
    "start": "803519",
    "end": "809579"
  },
  {
    "text": "finally we just mix and match two so we would have a context a but then we follow this with Cisco B so as you can",
    "start": "809579",
    "end": "815220"
  },
  {
    "text": "see here the history is Cisco a but then eventually you actually want to perform Cisco d and this experiment can tell you",
    "start": "815220",
    "end": "820800"
  },
  {
    "text": "if uh if orientation was correct and indeed we tested this and uh when you",
    "start": "820800",
    "end": "826079"
  },
  {
    "text": "perform this uh history of context a followed by Cisco B What You observe is that it speculates the Cisco a so these",
    "start": "826079",
    "end": "832860"
  },
  {
    "text": "the speculation is based on the context and the reason is again because the people think already seen this user",
    "start": "832860",
    "end": "838980"
  },
  {
    "text": "history so I should speculate Cisco a now this is wrong clearly because you want to speculate The Cisco d",
    "start": "838980",
    "end": "845700"
  },
  {
    "text": "but that's not a problem because eventually you execute against Cisco B so that's no big deal",
    "start": "845700",
    "end": "851519"
  },
  {
    "text": "and we tested this on most modern Intel arm and disappears on MD uh clearly",
    "start": "851519",
    "end": "857279"
  },
  {
    "text": "didn't work because uh they still rely on uh software defenses like Red Bull in the completely stop speculation but on",
    "start": "857279",
    "end": "863880"
  },
  {
    "text": "all the internet CPUs will test that we tested we could observe perfect misprediction in this experiment",
    "start": "863880",
    "end": "868920"
  },
  {
    "text": "so let's just try to understand what this means with this experiment we basically show that the user context can be used to Mr",
    "start": "868920",
    "end": "874860"
  },
  {
    "text": "in calendar branches even the presence of these new hardware defenses and this is our new primitive that we",
    "start": "874860",
    "end": "881160"
  },
  {
    "start": "879000",
    "end": "909000"
  },
  {
    "text": "call Branch history injection I know Rick is going to explain to you how we can use this to build a newer exploit",
    "start": "881160",
    "end": "888600"
  },
  {
    "text": "all yours okay thanks Pedro so as Jasper said we",
    "start": "888600",
    "end": "894120"
  },
  {
    "text": "have a very simple primitive right now we can control the branch prediction process of the kernel from user space",
    "start": "894120",
    "end": "902339"
  },
  {
    "text": "injecting some history but as you can imagine we are still far away from",
    "start": "902339",
    "end": "907500"
  },
  {
    "text": "building a full exploit and to reach that point we need to answer two questions",
    "start": "907500",
    "end": "913500"
  },
  {
    "start": "909000",
    "end": "1005000"
  },
  {
    "text": "the first one is which Target we can specifically be execute and by that I",
    "start": "913500",
    "end": "919199"
  },
  {
    "text": "mean okay we can mispredict this in that branch in the kernel but where we can speculatively execute",
    "start": "919199",
    "end": "926760"
  },
  {
    "text": "and similarly we need to answer the opposite question okay there are many data branches in the",
    "start": "926760",
    "end": "932519"
  },
  {
    "text": "kernel which one we can mispredict and for doing so you have to perform the",
    "start": "932519",
    "end": "940620"
  },
  {
    "text": "reverse engineering of the branch prediction unit so the Silicon inside of the CPU and usually a first step",
    "start": "940620",
    "end": "948360"
  },
  {
    "text": "is to have a look at the patents that you can find online however we were quite unlucky on these aspects so we",
    "start": "948360",
    "end": "956399"
  },
  {
    "text": "didn't find anything useful so we started doing the let's say",
    "start": "956399",
    "end": "961440"
  },
  {
    "text": "classical reverse engineering of the hardware and you can do this by simply performing",
    "start": "961440",
    "end": "966899"
  },
  {
    "text": "some Specific Instructions some experiment and observing the performance of the CPU depending on your input of",
    "start": "966899",
    "end": "973860"
  },
  {
    "text": "the experiment we started very well finding some nice pattern in the in the hardware but",
    "start": "973860",
    "end": "980399"
  },
  {
    "text": "eventually we failed mainly because the other is becoming so complex that",
    "start": "980399",
    "end": "985680"
  },
  {
    "text": "reversing them is very difficult so after two months we decided to stop",
    "start": "985680",
    "end": "991920"
  },
  {
    "text": "this approach because it was very hard to understand the details of the branch prediction unit",
    "start": "991920",
    "end": "999180"
  },
  {
    "text": "and we fight with these two approach what is left our good old friend good Force",
    "start": "999180",
    "end": "1005199"
  },
  {
    "text": "let's make a small step back to understand why the Brute Force approach here works",
    "start": "1005199",
    "end": "1010639"
  },
  {
    "text": "so again as an attacker we only control the history okay this is the only uh",
    "start": "1010639",
    "end": "1015860"
  },
  {
    "text": "let's say injection point we have and if you if you look back at the",
    "start": "1015860",
    "end": "1021740"
  },
  {
    "text": "possible implementation of a branch prediction unit uh we only control the parts that are",
    "start": "1021740",
    "end": "1027020"
  },
  {
    "text": "lighted in the red so the history or basically the content of the registry buffer it is this register containing a",
    "start": "1027020",
    "end": "1034339"
  },
  {
    "text": "snapshot of the recent execution so what if we randomize these bits and",
    "start": "1034339",
    "end": "1041418"
  },
  {
    "text": "let's see what happens to do so we can build a very simple experiment",
    "start": "1041419",
    "end": "1046760"
  },
  {
    "text": "so as you can see here on the left we have a jump chain that is a simple trick",
    "start": "1046760",
    "end": "1053780"
  },
  {
    "text": "for us to generate an history so you can see from the address lead Cafe we are",
    "start": "1053780",
    "end": "1059059"
  },
  {
    "text": "jumping to the beef from the beef to the lukak and so on here the idea is that we are generating generating a specific",
    "start": "1059059",
    "end": "1065480"
  },
  {
    "text": "history and after this we are going to an indirect Branch it will always land to",
    "start": "1065480",
    "end": "1071480"
  },
  {
    "text": "Target a the idea here is to associate history a with Target a so every time",
    "start": "1071480",
    "end": "1077539"
  },
  {
    "text": "the branch prediction unit will see history a it will say ha it's a good idea to jump to Target a",
    "start": "1077539",
    "end": "1084080"
  },
  {
    "text": "so then we generate a random history that is history B",
    "start": "1084080",
    "end": "1089480"
  },
  {
    "text": "and again this history should always jump to Target B so as you can see here our goal was to associate Target a with",
    "start": "1089480",
    "end": "1097160"
  },
  {
    "text": "history a and target b with history B and if we execute these two called path",
    "start": "1097160",
    "end": "1103340"
  },
  {
    "text": "in an alternate fashion we observe a Norway's code prediction from the BPO",
    "start": "1103340",
    "end": "1109160"
  },
  {
    "text": "and this is expected because we are giving let's see the golden scenario to the trans prediction need to perform",
    "start": "1109160",
    "end": "1114860"
  },
  {
    "text": "accurate prediction but what if we keep the left call part constant and we randomize the right one",
    "start": "1114860",
    "end": "1122419"
  },
  {
    "text": "eventually what you serve was a 100 misprediction rate so in other words in",
    "start": "1122419",
    "end": "1129559"
  },
  {
    "text": "the Silicon CPU uh the Press prediction prediction unit wasn't unable to distinguish history",
    "start": "1129559",
    "end": "1135799"
  },
  {
    "text": "from history B so you can clearly see the values are different but since they are harsh in a single",
    "start": "1135799",
    "end": "1142340"
  },
  {
    "text": "register they will collide to the same value and from the perspective of the CPU they are identical so that's why is",
    "start": "1142340",
    "end": "1149539"
  },
  {
    "text": "always performing its prediction and for us as an attacker this is perfect because just by controlling",
    "start": "1149539",
    "end": "1157039"
  },
  {
    "text": "history B we can accurately perform this prediction to the Target we want",
    "start": "1157039",
    "end": "1163419"
  },
  {
    "text": "and let's do a small last experiment let's completely separately two called",
    "start": "1163820",
    "end": "1170299"
  },
  {
    "text": "paths so we don't have any more uh single in the other Branch we have two of them",
    "start": "1170299",
    "end": "1175340"
  },
  {
    "text": "and as you can see from yesterday we always jump to Target a history B Target B",
    "start": "1175340",
    "end": "1181039"
  },
  {
    "text": "and here also surprisingly by randomizing the history B we even",
    "start": "1181039",
    "end": "1186200"
  },
  {
    "text": "managed to find a case of speculation from the entire Branch b to Target a if",
    "start": "1186200",
    "end": "1192559"
  },
  {
    "text": "you think about this is very weird because that code path never execute never jumped to Target a so this probe",
    "start": "1192559",
    "end": "1199940"
  },
  {
    "text": "actually that the bench prediction unit wasn't enabled not only to distinguish history from history B but wasn't even able to",
    "start": "1199940",
    "end": "1206840"
  },
  {
    "text": "distinguish the different call side and this as an attacker is an amazing primitive because now you can mispredict",
    "start": "1206840",
    "end": "1214640"
  },
  {
    "text": "any other branch and speculate whenever you want is like total freedom to do",
    "start": "1214640",
    "end": "1219799"
  },
  {
    "text": "whatever you want and now you may ask okay Brute Force approach easy but probably is going to",
    "start": "1219799",
    "end": "1226700"
  },
  {
    "text": "be super slow right well not for not not really for us was",
    "start": "1226700",
    "end": "1233200"
  },
  {
    "text": "we're very lucky it was very fast to perform the good Force approach maybe just to give you some number",
    "start": "1233200",
    "end": "1240620"
  },
  {
    "text": "so you can see here this is for the Intel 10 gen if you have if you try 40",
    "start": "1240620",
    "end": "1245900"
  },
  {
    "text": "000 times you are almost sure to find this colliding history to do the",
    "start": "1245900",
    "end": "1251419"
  },
  {
    "text": "misprediction if you want and we tried also many other architectures and as you can see the",
    "start": "1251419",
    "end": "1257059"
  },
  {
    "text": "entropy is very small I mean the maximum was 17 bits that you can break in less",
    "start": "1257059",
    "end": "1262220"
  },
  {
    "text": "than one minute and a few seconds are enough usually okay let's make a smaller recap to",
    "start": "1262220",
    "end": "1268640"
  },
  {
    "start": "1265000",
    "end": "1350000"
  },
  {
    "text": "understand what is our primitive now so our goal is to mispredict an entire",
    "start": "1268640",
    "end": "1274640"
  },
  {
    "text": "branch in the kernel and let's say this entire branch in the kernel architecturally can only jump to",
    "start": "1274640",
    "end": "1281660"
  },
  {
    "text": "True Value Targets target a and target b and again we are considering system without your defenses so we can no",
    "start": "1281660",
    "end": "1288919"
  },
  {
    "text": "longer speculate on user provided function as an attacker we have very limited",
    "start": "1288919",
    "end": "1294799"
  },
  {
    "text": "control just the previous instruction before the Cisco instruction so we control only the history before",
    "start": "1294799",
    "end": "1301100"
  },
  {
    "text": "performing the most rich from user to current space and as we demonstrated on Intel and arm",
    "start": "1301100",
    "end": "1308600"
  },
  {
    "text": "CPUs you can speculated to the valid Targets in a very precise way again just by",
    "start": "1308600",
    "end": "1315620"
  },
  {
    "text": "controlling the history but the best comes for intra processor where you can actually speculate",
    "start": "1315620",
    "end": "1321159"
  },
  {
    "text": "whatever you want and this was quite powerful because you",
    "start": "1321159",
    "end": "1328460"
  },
  {
    "text": "really enlarge your attack surface and to give you some numbers in the Intel 11 gen for example the context of",
    "start": "1328460",
    "end": "1336440"
  },
  {
    "text": "the history is composed by the latest 67 taken branches and as an attacker we only need to",
    "start": "1336440",
    "end": "1342919"
  },
  {
    "text": "control eight of them so we can even attack very deep nested in that branch",
    "start": "1342919",
    "end": "1348799"
  },
  {
    "text": "in the kernel okay let's switch to exploitation so we",
    "start": "1348799",
    "end": "1354320"
  },
  {
    "text": "have our nice primitive how can we do something interesting with it to show the main idea let's have a look",
    "start": "1354320",
    "end": "1360740"
  },
  {
    "text": "and attack plan so the first step is to ensure that our Gadget or our code we want to execute",
    "start": "1360740",
    "end": "1367220"
  },
  {
    "text": "in the transient domain is present in the branch Target buffer and for doing so you just need to you know execute",
    "start": "1367220",
    "end": "1374840"
  },
  {
    "text": "that function code and ensure WTB is is filled with the value we want to to",
    "start": "1374840",
    "end": "1380120"
  },
  {
    "text": "speculate on then later we do what we saw before simply we generate a random mystery we",
    "start": "1380120",
    "end": "1386360"
  },
  {
    "text": "perform a Cisco any Cisco will be will be fine and then what happens as soon as we",
    "start": "1386360",
    "end": "1392960"
  },
  {
    "text": "enter the counter space the balance prediction unit will say oh I don't know where it should jump let's",
    "start": "1392960",
    "end": "1398539"
  },
  {
    "text": "have a look at the recent execution so the history from the user space will generate a tag",
    "start": "1398539",
    "end": "1404780"
  },
  {
    "text": "and let's say the first time we are unlucky the tag is not the one we want no problem we are going to jump to get",
    "start": "1404780",
    "end": "1411620"
  },
  {
    "text": "paid no problem we can repeat the process until we win so we ensure again the",
    "start": "1411620",
    "end": "1417799"
  },
  {
    "text": "league Gadget is in the vtb we randomize the history again another attack will be computed and so on until eventually we",
    "start": "1417799",
    "end": "1425059"
  },
  {
    "text": "are lucky we break the let's say the entropy and we generate this exact same",
    "start": "1425059",
    "end": "1431740"
  },
  {
    "text": "btb tag and this will basically allow us to speculate on the function we wanted",
    "start": "1431740",
    "end": "1437240"
  },
  {
    "text": "to okay now you may ask but why we are always talking about this Cisco table",
    "start": "1437240",
    "end": "1443600"
  },
  {
    "start": "1439000",
    "end": "1478000"
  },
  {
    "text": "land I mean there are many data branches in the canal why we are so focused on that one well the main reason is that",
    "start": "1443600",
    "end": "1450320"
  },
  {
    "text": "you can very easily execute that entire Branch any c-school will trigger it but actually the best part of it is that the",
    "start": "1450320",
    "end": "1458360"
  },
  {
    "text": "the first argument of data of this is called table Handler is that is pointing to all the user",
    "start": "1458360",
    "end": "1465860"
  },
  {
    "text": "space save the register so as an attacker we have a lot of control of the the memory and the register that",
    "start": "1465860",
    "end": "1473240"
  },
  {
    "text": "we we we can use for finding a specter Gadget",
    "start": "1473240",
    "end": "1479320"
  },
  {
    "start": "1478000",
    "end": "1555000"
  },
  {
    "text": "then the biggest challenge is to find a gadget so as you can",
    "start": "1480100",
    "end": "1485960"
  },
  {
    "text": "imagine the kernel binary is huge so finding the few instructions we need to leave address in the cache is uh you",
    "start": "1485960",
    "end": "1493700"
  },
  {
    "text": "should be able to find it uh it's a very tedious work it requires a lot of time",
    "start": "1493700",
    "end": "1498740"
  },
  {
    "text": "so since we use a Brute Force approach why it's not why we should also here",
    "start": "1498740",
    "end": "1504140"
  },
  {
    "text": "choose the lazy way you know so at the time where we were doing the",
    "start": "1504140",
    "end": "1510740"
  },
  {
    "text": "project there was this nice feature named and privileged dbpf that International for us is a Jitter",
    "start": "1510740",
    "end": "1517159"
  },
  {
    "text": "engine in the kernel that I'm privileged user can can use yeah it's a bit strange I mean you can literally com cheat code",
    "start": "1517159",
    "end": "1524480"
  },
  {
    "text": "in the Canon from an employee's user so and for us this is amazing because you just need to find the correct uh BPF BPF",
    "start": "1524480",
    "end": "1532400"
  },
  {
    "text": "call opcode to jit in a kernel the perfect leak Gadget directly in the kernel so this was very helpful for us",
    "start": "1532400",
    "end": "1542419"
  },
  {
    "text": "but now you may ask but wait a second so the Canon developer allowed you to inject spectral Gadget in the canon in",
    "start": "1542419",
    "end": "1549919"
  },
  {
    "text": "this sounds unsafe I mean for sure the proposal mitigation against this",
    "start": "1549919",
    "end": "1555440"
  },
  {
    "start": "1555000",
    "end": "1639000"
  },
  {
    "text": "that's correct UPF is full of mitigation against Spectra but on variant one and",
    "start": "1555440",
    "end": "1561080"
  },
  {
    "text": "now you'll see why so ebpf again is just a tool where you can",
    "start": "1561080",
    "end": "1568340"
  },
  {
    "text": "write some it's a packet filter for incoming packets and architecturally is doing something",
    "start": "1568340",
    "end": "1575000"
  },
  {
    "text": "very uh safe so whenever we receive a packet we are accessing for example the",
    "start": "1575000",
    "end": "1581000"
  },
  {
    "text": "mark attribute and depending on data attribute we are accessing another array everything is inbound and",
    "start": "1581000",
    "end": "1588740"
  },
  {
    "text": "even in the speculative domain there is no exploitation possible",
    "start": "1588740",
    "end": "1594380"
  },
  {
    "text": "over here thanks to the variant 2 of Spectra we are no more coming from the",
    "start": "1594380",
    "end": "1599720"
  },
  {
    "text": "ebpf dispatcher we are coming from the Cisco Handler so now there is no more pocket literally",
    "start": "1599720",
    "end": "1606980"
  },
  {
    "text": "there is a Transit type confusion going on and we are not accessing the mark",
    "start": "1606980",
    "end": "1612080"
  },
  {
    "text": "attribute but but we are referencing the register 12 so literally",
    "start": "1612080",
    "end": "1617900"
  },
  {
    "text": "we are referencing arbitrary memory others in the kernel and then leaving address in the cache that later we can",
    "start": "1617900",
    "end": "1624520"
  },
  {
    "text": "use to recover the liquid data and here inside is that translated",
    "start": "1624520",
    "end": "1631820"
  },
  {
    "text": "confusion or basically Spectra variant two really helps you to bypass Spectrum",
    "start": "1631820",
    "end": "1637820"
  },
  {
    "text": "mitigation one last missing component is that we",
    "start": "1637820",
    "end": "1643100"
  },
  {
    "start": "1639000",
    "end": "1755000"
  },
  {
    "text": "need a precise timer to distinguish cachit or kashmirs and again our beloved",
    "start": "1643100",
    "end": "1649279"
  },
  {
    "text": "friendly DPF is so kind to provide it to us uh uh so yeah we have everything to",
    "start": "1649279",
    "end": "1655580"
  },
  {
    "text": "to build our exploit now and let's try a live demo",
    "start": "1655580",
    "end": "1661340"
  },
  {
    "text": "so you can imagine running a micro catalog tax life is not a good",
    "start": "1661340",
    "end": "1666559"
  },
  {
    "text": "idea but we are going to try anyway so here I'm connected to a machine that is vulnerable it is an Intel",
    "start": "1666559",
    "end": "1673220"
  },
  {
    "text": "the engine CPU and as you can see we have a updated kernel and if you check the mitigation",
    "start": "1673220",
    "end": "1680360"
  },
  {
    "text": "we can see is vulnerable because we have available the system they are aware of",
    "start": "1680360",
    "end": "1685580"
  },
  {
    "text": "this attack so we start by building an eviction set to ensure that the branch prediction",
    "start": "1685580",
    "end": "1691159"
  },
  {
    "text": "unit will give us a larger speculative window and after this is complete Oh wow was",
    "start": "1691159",
    "end": "1698059"
  },
  {
    "text": "very fast so we are trying to find the colliding history you see zero seconds required",
    "start": "1698059",
    "end": "1703179"
  },
  {
    "text": "and now we are already looking current memory so the first step is to break SLR",
    "start": "1703179",
    "end": "1708620"
  },
  {
    "text": "because we need to you know read only a meaningful part of the kernel and now we",
    "start": "1708620",
    "end": "1714080"
  },
  {
    "text": "already linearly sweeping the kernel memory looking for something interesting and here we decided to look for the ATC",
    "start": "1714080",
    "end": "1723020"
  },
  {
    "text": "Shadow root password usually take a moment and let's see",
    "start": "1723020",
    "end": "1731620"
  },
  {
    "text": "okay here we are so you can see in 30 second knife",
    "start": "1731779",
    "end": "1738700"
  },
  {
    "text": "and to prove is actually the correct password as root let's print it and it",
    "start": "1742400",
    "end": "1748460"
  },
  {
    "text": "matches perfectly nice okay nice first time",
    "start": "1748460",
    "end": "1756500"
  },
  {
    "start": "1755000",
    "end": "1873000"
  },
  {
    "text": "okay let's quickly conclude with the vendor response and mitigation uh there are many fatal CPUs but uh to",
    "start": "1756500",
    "end": "1764360"
  },
  {
    "text": "summarize every Intel CPU starting from the tangent is affected so any new CPU",
    "start": "1764360",
    "end": "1769940"
  },
  {
    "text": "parameter is uh is affected and regarding Arma is a bit more complicated but in a nutshell",
    "start": "1769940",
    "end": "1776059"
  },
  {
    "text": "every let's say CPU from the latest two years with a branch prediction unit should be affected",
    "start": "1776059",
    "end": "1783860"
  },
  {
    "text": "what about the mitigation proposed proposed by the vendors so Intel proposed mainly one single",
    "start": "1783860",
    "end": "1790640"
  },
  {
    "text": "defense that is to disable and privileged eppf that is this jet engine in the kernel if you think about is not",
    "start": "1790640",
    "end": "1798500"
  },
  {
    "text": "an ideal solution because you are removing a nice tool for his exploitation but the bug is still there",
    "start": "1798500",
    "end": "1803960"
  },
  {
    "text": "and it's not going to disappear soon they are promising also some software and Hardware mitigation that are mainly",
    "start": "1803960",
    "end": "1810620"
  },
  {
    "text": "doing the same thing on a mod switch for example from user to Kernel they are",
    "start": "1810620",
    "end": "1816440"
  },
  {
    "text": "clearing this Branch history buffer so that during the prediction process the user history is no more used in the",
    "start": "1816440",
    "end": "1823880"
  },
  {
    "text": "prediction process and harm did exactly the same slightly different again softer and",
    "start": "1823880",
    "end": "1830899"
  },
  {
    "text": "other mitigation with the goal of clearing this Branch history buffer",
    "start": "1830899",
    "end": "1836120"
  },
  {
    "text": "and MD as we said from the beginning is not affected because they are still",
    "start": "1836120",
    "end": "1841159"
  },
  {
    "text": "relying on a software mitigation so uh they say by keeping a software",
    "start": "1841159",
    "end": "1846860"
  },
  {
    "text": "mitigation they are safe by not you know choosing a faster than Hardware mitigation",
    "start": "1846860",
    "end": "1853159"
  },
  {
    "text": "well actually the same day we released our paper Intel proved that the AMD",
    "start": "1853159",
    "end": "1859220"
  },
  {
    "text": "defense was broken so few months ago at the same time Intel arm and MD were still affected by",
    "start": "1859220",
    "end": "1866120"
  },
  {
    "text": "specter valentio three years later the discovery of it and yeah was not that",
    "start": "1866120",
    "end": "1871399"
  },
  {
    "text": "great to conclude together we saw that the attack surface",
    "start": "1871399",
    "end": "1877580"
  },
  {
    "start": "1873000",
    "end": "1958000"
  },
  {
    "text": "of these attacks is too wide to Define it's very difficult even for us and the CPU manufacturer to",
    "start": "1877580",
    "end": "1884000"
  },
  {
    "text": "guarantee you are safe against this this threat and we do believe that we need more",
    "start": "1884000",
    "end": "1890299"
  },
  {
    "text": "principal defenses because even after our attack they release top Gap defenses like you know disabling a",
    "start": "1890299",
    "end": "1897799"
  },
  {
    "text": "BPF yeah it's a good idea but you know the bug is still there maybe someday another research will find",
    "start": "1897799",
    "end": "1905179"
  },
  {
    "text": "another Gadget and you know we are starting from zero again but to conclude on a positive note uh",
    "start": "1905179",
    "end": "1911960"
  },
  {
    "text": "positive note uh during this project we really noticed or is becoming harder to build such",
    "start": "1911960",
    "end": "1917840"
  },
  {
    "text": "exploit and we can make a comparison with software exploitation",
    "start": "1917840",
    "end": "1923240"
  },
  {
    "text": "20 years ago writing a buffer overflow exploit I guess was much easier today is",
    "start": "1923240",
    "end": "1929840"
  },
  {
    "text": "with SLR canaries and so on you know it's becoming way harder",
    "start": "1929840",
    "end": "1935539"
  },
  {
    "text": "that was a that was our talk a little dirt history",
    "start": "1935539",
    "end": "1940760"
  },
  {
    "text": "here you can find our project page if you want more details with the paper and also the source code for the exploit you",
    "start": "1940760",
    "end": "1947600"
  },
  {
    "text": "just saw [Music]",
    "start": "1947600",
    "end": "1952950"
  },
  {
    "text": "[Music]",
    "start": "1956810",
    "end": "1959900"
  }
]