[
  {
    "text": "we have Teo here uh he'll be presenting on Dynamic flash instrumentation for fun",
    "start": "80",
    "end": "6160"
  },
  {
    "text": "and for profit so please join me and welcoming teimo take it away thank",
    "start": "6160",
    "end": "12960"
  },
  {
    "text": "you thank you can everyone hear me okay can you still see me if I stand",
    "start": "12960",
    "end": "20160"
  },
  {
    "text": "here okay we're all good um welcome all it's it's great to have you here thank",
    "start": "20160",
    "end": "26679"
  },
  {
    "text": "you thank you for coming this is actually my first time",
    "start": "26679",
    "end": "32119"
  },
  {
    "text": "attending black hat so I'm I'm extremely honored and humbled to present you",
    "start": "32119",
    "end": "38760"
  },
  {
    "text": "Dynamic flash instrumentation for Fun and Profit today we are releasing a new",
    "start": "38760",
    "end": "47120"
  },
  {
    "text": "open-source tool called suo as far as I know suo is the first",
    "start": "47120",
    "end": "53800"
  },
  {
    "text": "publicly available tool that you can use for dynamic analysis of flash files",
    "start": "53800",
    "end": "61199"
  },
  {
    "text": "and the goal of this presentation is to share the things that I learned while I",
    "start": "61199",
    "end": "66360"
  },
  {
    "text": "was building that tool and the structure of the presentation is quite",
    "start": "66360",
    "end": "72280"
  },
  {
    "text": "straightforward first I'll explain you why I strongly feel that there is a need for such",
    "start": "72280",
    "end": "78240"
  },
  {
    "text": "tool um then I'll show you some of the previous research that was extremely",
    "start": "78240",
    "end": "83360"
  },
  {
    "text": "helpful in building this tool then we'll briefly discuss internals of The Flash",
    "start": "83360",
    "end": "89119"
  },
  {
    "text": "Player and then finally I'll show you some demos with the tool so I'll be analyzing",
    "start": "89119",
    "end": "95759"
  },
  {
    "text": "four different malicious flash files using the tool so the",
    "start": "95759",
    "end": "102840"
  },
  {
    "text": "motivation why do I think we really need such tool typically when I analyze flash",
    "start": "102840",
    "end": "110600"
  },
  {
    "text": "files that are potentially malicious I I use a de compiler if the decompilation",
    "start": "110600",
    "end": "115920"
  },
  {
    "text": "is successful the analysis is pretty easy because you get the action script source",
    "start": "115920",
    "end": "121640"
  },
  {
    "text": "code however if the flash file is or fusc or if there's some sort of",
    "start": "121640",
    "end": "128080"
  },
  {
    "text": "encryption or if it uses some commercial protector uh things get",
    "start": "128080",
    "end": "134560"
  },
  {
    "text": "tricky um static analysis isn't impossible but it's going to take a lot of",
    "start": "134560",
    "end": "140400"
  },
  {
    "text": "time let me show you some examples I'll start with the most basic ofus and",
    "start": "140400",
    "end": "147680"
  },
  {
    "text": "encodings and encryptions moving on to more difficult and complex ones and the",
    "start": "147680",
    "end": "153200"
  },
  {
    "text": "first two examples that I have are from",
    "start": "153200",
    "end": "158200"
  },
  {
    "text": "APS here's the first one um this is a snippet from The Flash exploit that was",
    "start": "158640",
    "end": "164879"
  },
  {
    "text": "used in the RSA attack this was zero day at the time and as you can see it's it's pretty",
    "start": "164879",
    "end": "171480"
  },
  {
    "text": "straightforward there's not that much ofus those are the first three bytes",
    "start": "171480",
    "end": "177720"
  },
  {
    "text": "that's CWS marker for the compressed flash format so there's really no",
    "start": "177720",
    "end": "184599"
  },
  {
    "text": "ofation just um hex representation of the embedded flash",
    "start": "184599",
    "end": "190920"
  },
  {
    "text": "object and like with the majority of flash exploits the embedded flash object",
    "start": "190920",
    "end": "198120"
  },
  {
    "text": "is loaded using this load bites method to call there are other ways of loading",
    "start": "198120",
    "end": "203799"
  },
  {
    "text": "embedded flash object but this is by far the most common so if you consider this an AP at",
    "start": "203799",
    "end": "211400"
  },
  {
    "text": "least from The Flash officiation perspective there isn't really anything",
    "start": "211400",
    "end": "216840"
  },
  {
    "text": "Advanced another similar example this is from cosmic Duke the attacks connected",
    "start": "216840",
    "end": "222200"
  },
  {
    "text": "to the mini Duke group um I I have to say that I I find",
    "start": "222200",
    "end": "227680"
  },
  {
    "text": "this funny these these guys really use some imagination again no encryption",
    "start": "227680",
    "end": "233439"
  },
  {
    "text": "just a really exotic encoding scheme you have the string win and the number of of",
    "start": "233439",
    "end": "239840"
  },
  {
    "text": "letter eyes varies from zero to 15 so that encodes one nibble and then that's",
    "start": "239840",
    "end": "246360"
  },
  {
    "text": "turned into binary and then again loaded using load bites it's it's a really weird encoding",
    "start": "246360",
    "end": "253439"
  },
  {
    "text": "scheme but hey it might actually work against some antiviruses I don't I don't",
    "start": "253439",
    "end": "261160"
  },
  {
    "text": "know this one I wanted to include as a reminder that when I talk about malicious flash files I'm not talking",
    "start": "261240",
    "end": "269320"
  },
  {
    "text": "not talking only about Flash exploit but also about malicious redirectors this one was found on",
    "start": "269320",
    "end": "276120"
  },
  {
    "text": "YouTube this is from a malicious YouTube ad that redirected IE and opra users to",
    "start": "276120",
    "end": "282280"
  },
  {
    "text": "scks exploit kit and this is the interesting part um the",
    "start": "282280",
    "end": "290919"
  },
  {
    "text": "call method in external interface you can use this one to execute JavaScript",
    "start": "290919",
    "end": "296400"
  },
  {
    "text": "in the browser and again the parameter that's just the JavaScript string and in",
    "start": "296400",
    "end": "302840"
  },
  {
    "text": "this case it's um it's both encoded and encrypted normal s key hex first then",
    "start": "302840",
    "end": "310560"
  },
  {
    "text": "converion to Binary and xor with single by Sor key nothing too complicated but",
    "start": "310560",
    "end": "316479"
  },
  {
    "text": "as you can see it it keeps on getting more complicated if you do all this manually",
    "start": "316479",
    "end": "322319"
  },
  {
    "text": "it takes more time now there's already two steps the encoding and the encryption still quick with static",
    "start": "322319",
    "end": "328440"
  },
  {
    "text": "analysis but not that fun this one is from Fiesta exploit kit in this case the",
    "start": "328440",
    "end": "336360"
  },
  {
    "text": "flash object is constructed from an array of integers again if you copy those values",
    "start": "336360",
    "end": "343960"
  },
  {
    "text": "you you need to do some formatting it's slower and there's also simple chory",
    "start": "343960",
    "end": "350840"
  },
  {
    "text": "encryption the other things that thing that think that's really interesting about this one is the way it calls load",
    "start": "350840",
    "end": "359000"
  },
  {
    "text": "bites and this is a good reminder of how how Adobe Flash Player works so let's",
    "start": "359000",
    "end": "365199"
  },
  {
    "text": "say you decompile this file you open the action script in some text editor you do",
    "start": "365199",
    "end": "370560"
  },
  {
    "text": "contrl F load bytes no",
    "start": "370560",
    "end": "375440"
  },
  {
    "text": "hits another reason why it's important to realize that the method name can be",
    "start": "375880",
    "end": "381520"
  },
  {
    "text": "generated um while the flash is running is that that's probably the most simple",
    "start": "381520",
    "end": "387639"
  },
  {
    "text": "way of offis skating the method name just splitting the string but I mean you could do encryption you can do",
    "start": "387639",
    "end": "395440"
  },
  {
    "text": "anything so this is what makes static analysis",
    "start": "395440",
    "end": "401080"
  },
  {
    "text": "challenging finally by far the most challenging thing to deal with static analysis are",
    "start": "401080",
    "end": "407840"
  },
  {
    "text": "these commercial protectors and one of them is do Swift this example is from",
    "start": "407840",
    "end": "414120"
  },
  {
    "text": "flashback exploit kit in this case the embedded object is defined in in the",
    "start": "414120",
    "end": "419759"
  },
  {
    "text": "defined binary data tag so it's inside the flash file and it's loaded and",
    "start": "419759",
    "end": "425960"
  },
  {
    "text": "decrypted and this same protector has been also used by the elderwood group in",
    "start": "425960",
    "end": "431680"
  },
  {
    "text": "some AP attacks they didn't use Flash exploits but the flash that was responsible for the Heap spray used this",
    "start": "431680",
    "end": "439080"
  },
  {
    "text": "du Swift protection the Holy",
    "start": "439080",
    "end": "445800"
  },
  {
    "text": "Grail of flash protection in my personal opinion",
    "start": "445800",
    "end": "451199"
  },
  {
    "text": "is secure Swift let me demonstrate this is an this is a file",
    "start": "451199",
    "end": "457360"
  },
  {
    "text": "from angler exploit kit and let's start with the class",
    "start": "457360",
    "end": "463599"
  },
  {
    "text": "names the class names are obus skated so you can imagine the headache when you",
    "start": "463599",
    "end": "468879"
  },
  {
    "text": "start reverse engineering this analyzing this statically it's a",
    "start": "468879",
    "end": "475240"
  },
  {
    "text": "pain again the embedded flash object is encrypted",
    "start": "475240",
    "end": "480360"
  },
  {
    "text": "there's at least two possibilities AES and rc4 if you need to decrypt something you",
    "start": "480360",
    "end": "486520"
  },
  {
    "text": "need to get the input data and also the key in this case the algorithm is",
    "start": "486520",
    "end": "491720"
  },
  {
    "text": "rc4 and the key is generated on the Fly obviously it's always the same but it's",
    "start": "491720",
    "end": "497720"
  },
  {
    "text": "generated on the fly so you cannot find the key as a string or bite sequence anywhere in the flash object and this is",
    "start": "497720",
    "end": "505840"
  },
  {
    "text": "how the key is generated so that's one and that's another one and these are not",
    "start": "505840",
    "end": "511479"
  },
  {
    "text": "even in order so if you want to know the right order of the bites you need to also evaluate the express there so",
    "start": "511479",
    "end": "520479"
  },
  {
    "text": "imagine doing this manually if you compare this to let's",
    "start": "520479",
    "end": "527839"
  },
  {
    "text": "say windows malware PE malware if you see something that's",
    "start": "527839",
    "end": "533519"
  },
  {
    "text": "that's clearly packed what do you do you're not going to stare it in Ida Pro",
    "start": "533519",
    "end": "538800"
  },
  {
    "text": "you're going to run it so obviously that makes sense with flash Tu but if there's",
    "start": "538800",
    "end": "543880"
  },
  {
    "text": "no tools for dynamic analysis you cannot really do it so that's the reason why I strongly",
    "start": "543880",
    "end": "550680"
  },
  {
    "text": "felt that it's worth building this tool and I had two goals originally for the",
    "start": "550680",
    "end": "557240"
  },
  {
    "text": "tool first one was to be able to intercept these uh external interface calls so the ones used by The Flash",
    "start": "557240",
    "end": "564079"
  },
  {
    "text": "redirectors so you can get access to the JavaScript but clearly the more",
    "start": "564079",
    "end": "570120"
  },
  {
    "text": "important goal was to be able to get those flash objects that are loaded with",
    "start": "570120",
    "end": "576160"
  },
  {
    "text": "load bites and dump those to dis because if you can do that with for example do",
    "start": "576160",
    "end": "581240"
  },
  {
    "text": "Swift or secq Swift your job is a lot easier and I will demonstrate that",
    "start": "581240",
    "end": "588640"
  },
  {
    "text": "later when I started building this tool I can honestly tell you that I didn't",
    "start": "588640",
    "end": "594560"
  },
  {
    "text": "know anything about the internals of Flash Player I had analyzed many",
    "start": "594560",
    "end": "600000"
  },
  {
    "text": "malicious flash files so I was familiar with that stuff but I didn't really know",
    "start": "600000",
    "end": "605240"
  },
  {
    "text": "that well how Flash Player works so for that reason I really",
    "start": "605240",
    "end": "611600"
  },
  {
    "text": "strongly feel that with this research and this project I'm I'm standing on the shoulders of giants and I want to take",
    "start": "611600",
    "end": "619120"
  },
  {
    "text": "this opportunity to both thank these researchers and also promote the",
    "start": "619120",
    "end": "624760"
  },
  {
    "text": "research that they've done because if you're interested in this kind of stuff and you haven't seen seen these presentations yet that I'm about to",
    "start": "624760",
    "end": "631480"
  },
  {
    "text": "mention you should really check those out really cool stuff and I'll start",
    "start": "631480",
    "end": "637079"
  },
  {
    "text": "with Matt o is Matt in the audience yeah can you stand up",
    "start": "637079",
    "end": "643079"
  },
  {
    "text": "please let's give a big round of applause to",
    "start": "643079",
    "end": "647720"
  },
  {
    "text": "Matt Matt is an impressive guy he has done at least Java exploit analysis and",
    "start": "649680",
    "end": "656240"
  },
  {
    "text": "presented that in black hat um Flash expert analysis he's the father of the",
    "start": "656240",
    "end": "661480"
  },
  {
    "text": "Daron Grim um diffing tool and this year he presented about analyzing flash",
    "start": "661480",
    "end": "668240"
  },
  {
    "text": "memory so the flash physical flash memory not Adobe Flash so impressive skill set um here's one of Matt's",
    "start": "668240",
    "end": "676279"
  },
  {
    "text": "presentation this is from schmon 2012 um Matt can later correct me if I",
    "start": "676279",
    "end": "681600"
  },
  {
    "text": "get this wrong but I think he presented two different methods um for instrumenting flash files the first one",
    "start": "681600",
    "end": "688160"
  },
  {
    "text": "was about um modifying The Flash object Itself by adding new stuff new code that",
    "start": "688160",
    "end": "694440"
  },
  {
    "text": "essentially hooks the flash file the second one the approach was called class hooking and the idea there was that all",
    "start": "694440",
    "end": "702720"
  },
  {
    "text": "classes are resolved by name during runtime and there's an array for that so",
    "start": "702720",
    "end": "708279"
  },
  {
    "text": "if you modify that array instead of loading the original class you can make the Flash Player load your own",
    "start": "708279",
    "end": "714519"
  },
  {
    "text": "instrumented class that's a brilliant approach and when I saw these slides I",
    "start": "714519",
    "end": "721079"
  },
  {
    "text": "was like yeah it seems that Matt already solved this problem so I sent him a",
    "start": "721079",
    "end": "727680"
  },
  {
    "text": "direct message on Twitter and asked that hey that did you did you ever release the tool and unfortunately he wasn't",
    "start": "727680",
    "end": "734600"
  },
  {
    "text": "allowed to release it back then so I thought that okay there's there's still need for such",
    "start": "734600",
    "end": "740959"
  },
  {
    "text": "tool I also want to thank the Adobe action script 3 team because the engine that flash",
    "start": "740959",
    "end": "747839"
  },
  {
    "text": "player uses for executing action script called Tamarind has been released as",
    "start": "747839",
    "end": "753959"
  },
  {
    "text": "open source so you can imagine how much easier my work was because I didn't have to reverse engineer everything I was I I",
    "start": "753959",
    "end": "761240"
  },
  {
    "text": "had at least some source code available which was very",
    "start": "761240",
    "end": "766639"
  },
  {
    "text": "helpful when I started doing this when I started building the first prototype",
    "start": "767040",
    "end": "772720"
  },
  {
    "text": "there was two key questions that I had to be able to answer in order to build something meaningful and the first one",
    "start": "772720",
    "end": "779560"
  },
  {
    "text": "is really obvious where are the action script methods called from if I want to",
    "start": "779560",
    "end": "785199"
  },
  {
    "text": "intercept the method call I need to know where it's called from and Jun Fang um he's a researcher",
    "start": "785199",
    "end": "794839"
  },
  {
    "text": "with Microsoft he was extremely helpful when I mentioned him that I'm about to build tool like this he was like yeah",
    "start": "794839",
    "end": "801519"
  },
  {
    "text": "that sounds cool and he kept on sending me emails and links to all great flash presentations and he even shared dbg",
    "start": "801519",
    "end": "809480"
  },
  {
    "text": "script that he had written for a specific flash version for dumping the",
    "start": "809480",
    "end": "815399"
  },
  {
    "text": "um embedded or dumping the flash to dis that slowed it with load bites but that",
    "start": "815399",
    "end": "820519"
  },
  {
    "text": "worked only with a specific Flash version but in any case that was a great starting point so yeah I'm I'm really",
    "start": "820519",
    "end": "826600"
  },
  {
    "text": "thankful for for his help he has given multiple presentations",
    "start": "826600",
    "end": "831680"
  },
  {
    "text": "about um analyzing flash stuff and this is from Caro Conference",
    "start": "831680",
    "end": "837759"
  },
  {
    "text": "2011 and I found two really interesting things there's a lot of good stuff but",
    "start": "837759",
    "end": "843199"
  },
  {
    "text": "these are my favorites how many of you are familiar with this configuration file hands",
    "start": "843199",
    "end": "850720"
  },
  {
    "text": "up one I think okay this is a configuration file for Adobe Flash",
    "start": "850720",
    "end": "857440"
  },
  {
    "text": "Player it has all sorts of U flags that you can set the most useful for me was this as3",
    "start": "857440",
    "end": "865600"
  },
  {
    "text": "trace and this is a screenshot from a blog post by Shan Paul Clair the URL is",
    "start": "865600",
    "end": "871199"
  },
  {
    "text": "there on the upper right hand corner you can check it later from the slides if you are running a debug build",
    "start": "871199",
    "end": "879959"
  },
  {
    "text": "of Flash Player those are publicly available and if you set this flag in that configuration file you can see all",
    "start": "879959",
    "end": "886519"
  },
  {
    "text": "the action script methods that are called and that by itself is already",
    "start": "886519",
    "end": "893160"
  },
  {
    "text": "very helpful if you're analyzing something you haven't seen before for me this was helpful because I",
    "start": "893160",
    "end": "899519"
  },
  {
    "text": "knew that okay flash prer is able to do that if I figure out how it does that",
    "start": "899519",
    "end": "905399"
  },
  {
    "text": "I'll probably figure out where the methods are called this was also a great Benchmark when I I built different",
    "start": "905399",
    "end": "911920"
  },
  {
    "text": "prototypes if I wanted to see that okay do I now see all the method calls I just",
    "start": "911920",
    "end": "917079"
  },
  {
    "text": "um calculated that how many lines are there in in this log produced by The Flash Player and then compare to my own",
    "start": "917079",
    "end": "923279"
  },
  {
    "text": "count and if it matched then I knew that okay we're good and",
    "start": "923279",
    "end": "929240"
  },
  {
    "text": "and from this I I got already pretty far especially with the",
    "start": "929240",
    "end": "936160"
  },
  {
    "text": "help of this thing this is the other other um thing from from Jun Frank's",
    "start": "936160",
    "end": "941959"
  },
  {
    "text": "slides he mentions that all the action script methods that are generated by the",
    "start": "941959",
    "end": "948639"
  },
  {
    "text": "just in time compiler are called the same way all those action SCP methods",
    "start": "948639",
    "end": "954319"
  },
  {
    "text": "are called the same way and that's how they are called just three parameters really",
    "start": "954319",
    "end": "959959"
  },
  {
    "text": "straightforward and with this information I was able to build the first prototype and I I saw all the",
    "start": "959959",
    "end": "966560"
  },
  {
    "text": "method calls that were visible in adobe's own logs the challenge was that I had some",
    "start": "966560",
    "end": "973199"
  },
  {
    "text": "duplicates and I couldn't figure out which one was the right one that I should be logging and which one was the",
    "start": "973199",
    "end": "979360"
  },
  {
    "text": "extra one that I should get rid of I tried to come up with some sort of filtering logic and I thought of um",
    "start": "979360",
    "end": "986600"
  },
  {
    "text": "different places where I could instrument the code to solve the problem but to be honest with you I I mean I I",
    "start": "986600",
    "end": "992560"
  },
  {
    "text": "hit a brick wall I was like I don't know what to do so I went",
    "start": "992560",
    "end": "998519"
  },
  {
    "text": "to the U source code of chamar and I Googled some values and I ran into one",
    "start": "998519",
    "end": "1005600"
  },
  {
    "text": "of high fa's presentation you've probably heard of high I will introduce him and this is the presentation from",
    "start": "1005600",
    "end": "1011560"
  },
  {
    "text": "Recon 2012 inside AVM action script virtual",
    "start": "1011560",
    "end": "1016800"
  },
  {
    "text": "machine and in this slides this is a direct quote hook at the end of verify",
    "start": "1016800",
    "end": "1023680"
  },
  {
    "text": "on call and that's what I did and spoiler alert doing this solved",
    "start": "1023680",
    "end": "1032319"
  },
  {
    "text": "my problem I got rid of the duplicates and after that it has been really robust so big thank you to high fa let's go",
    "start": "1032319",
    "end": "1039438"
  },
  {
    "text": "into details if you want to see the Aon script method calls you are probably",
    "start": "1039439",
    "end": "1045760"
  },
  {
    "text": "interested in the values of two different functions pointers for each method call so two",
    "start": "1045760",
    "end": "1051720"
  },
  {
    "text": "function pointers for each method first one is the highlighted one",
    "start": "1051720",
    "end": "1057280"
  },
  {
    "text": "in Walker that's used for the methods that are executed by The",
    "start": "1057280",
    "end": "1062760"
  },
  {
    "text": "Interpreter and the one the other one in the union",
    "start": "1062760",
    "end": "1068039"
  },
  {
    "text": "that's the one used for those methods generated by the Justus in time",
    "start": "1068039",
    "end": "1073559"
  },
  {
    "text": "compiler so if you can somehow figure out the values of these two function function pointers for each action script",
    "start": "1073559",
    "end": "1081240"
  },
  {
    "text": "method then you're good to go and what high fa said in the slides",
    "start": "1081240",
    "end": "1088640"
  },
  {
    "text": "hook at the end of verify on call let's look at the details this is verify on call can you see this at the back is the",
    "start": "1088640",
    "end": "1096320"
  },
  {
    "text": "font large enough okay it's good enough here's the first one right at the",
    "start": "1096320",
    "end": "1102880"
  },
  {
    "text": "end of the function the function pointer to digited code is set for the interpreted function you need to follow",
    "start": "1102880",
    "end": "1109240"
  },
  {
    "text": "the verify method call which leads to verify interp again leads to set interp",
    "start": "1109240",
    "end": "1115480"
  },
  {
    "text": "and that finally sets the other function pointer in other words by the time you",
    "start": "1115480",
    "end": "1122240"
  },
  {
    "text": "get to the end of verify on call both of those function pointers have been set so",
    "start": "1122240",
    "end": "1128640"
  },
  {
    "text": "if you instrument there you can check the values of those function pointers and you're good to",
    "start": "1128640",
    "end": "1135400"
  },
  {
    "text": "go now now the challenge is that we know how this works on the source code level but how about the binary how do you find",
    "start": "1137120",
    "end": "1143679"
  },
  {
    "text": "the right spot in the binary or in the memory well the good news is that with the debu build of Flash Player you have",
    "start": "1143679",
    "end": "1150440"
  },
  {
    "text": "some extra code and some extra strings so if we go back to the uh verify interrup function there's this exact",
    "start": "1150440",
    "end": "1156960"
  },
  {
    "text": "policy interrup string so if you just go to Ida Pro open the debu build list the strings you can find the string and",
    "start": "1156960",
    "end": "1163440"
  },
  {
    "text": "after that it's easy you you can find all these methods that I just showed you",
    "start": "1163440",
    "end": "1170240"
  },
  {
    "text": "and yeah there's the verify on call method and then then you just hook at the",
    "start": "1170600",
    "end": "1176960"
  },
  {
    "text": "end now some of you might have realized that I didn't actually answer my",
    "start": "1176960",
    "end": "1182000"
  },
  {
    "text": "original question which was that where are the acction script methods called",
    "start": "1182000",
    "end": "1187640"
  },
  {
    "text": "from we know where those methods are but we don't know where they I are called",
    "start": "1187640",
    "end": "1193360"
  },
  {
    "text": "from well is this relevant it depends if you want to know the the return value of",
    "start": "1193360",
    "end": "1200080"
  },
  {
    "text": "those methods and you probably will you have basically two options either you need to know where's the end of the",
    "start": "1200080",
    "end": "1205880"
  },
  {
    "text": "function or then you know where the need to know where the call is made so you can then check the return",
    "start": "1205880",
    "end": "1212840"
  },
  {
    "text": "value um the first version of my tool is built using Insel pin and at least I",
    "start": "1212840",
    "end": "1220360"
  },
  {
    "text": "don't have the skills to use Insel pin so that you would find the function end I'm not sure is it possible might be so",
    "start": "1220360",
    "end": "1227880"
  },
  {
    "text": "the only realistic option was to find where the call is made from that's easy",
    "start": "1227880",
    "end": "1233520"
  },
  {
    "text": "on on runtime you just check the stack on top of the stack you will have the return address so you know where you",
    "start": "1233520",
    "end": "1239600"
  },
  {
    "text": "should instrument however uh with Insel pin it's not that straightforward there is",
    "start": "1239600",
    "end": "1245360"
  },
  {
    "text": "something there's a method called rtn unor create at and you can use that to",
    "start": "1245360",
    "end": "1251559"
  },
  {
    "text": "say that I have this address instrument at this address the downside is that that",
    "start": "1251559",
    "end": "1259400"
  },
  {
    "text": "function Works only for code that's part of an executable image and the code that",
    "start": "1259400",
    "end": "1266880"
  },
  {
    "text": "gets generated by the Justin J compiler obviously isn't the part of any executable image so you cannot really",
    "start": "1266880",
    "end": "1273360"
  },
  {
    "text": "use that so what I ended up doing was instrumenting all potential method calls",
    "start": "1273360",
    "end": "1279720"
  },
  {
    "text": "and then at run time when the call happens I check the target of the call and if the target matches the values to",
    "start": "1279720",
    "end": "1286440"
  },
  {
    "text": "one of those two function pointers per method then I know that okay this is an interesting call and we should also",
    "start": "1286440",
    "end": "1292159"
  },
  {
    "text": "instrument the return address that was the solution and that was just to um",
    "start": "1292159",
    "end": "1297760"
  },
  {
    "text": "overcome limitations of Intel pin I mean if you use traditional hooking it wouldn't be a",
    "start": "1297760",
    "end": "1303240"
  },
  {
    "text": "problem the second key question now I see all the method calls but I have no",
    "start": "1303240",
    "end": "1309520"
  },
  {
    "text": "clue about the name of the method call doesn't really help much yeah I got 600 method calls I don't know what those are",
    "start": "1309520",
    "end": "1316600"
  },
  {
    "text": "H doesn't doesn't help much so how to get the method",
    "start": "1316600",
    "end": "1321799"
  },
  {
    "text": "name again we come back to this one the first parameter pointer to",
    "start": "1321799",
    "end": "1327640"
  },
  {
    "text": "Method en object and Method en has a member called method info now if you're",
    "start": "1327640",
    "end": "1334559"
  },
  {
    "text": "interested in this kind of stuff and if you want to start researching this start",
    "start": "1334559",
    "end": "1339600"
  },
  {
    "text": "from the method info class because it all it's all built around that in some",
    "start": "1339600",
    "end": "1345039"
  },
  {
    "text": "way or or another so that's a good place to start in method info there's a method called",
    "start": "1345039",
    "end": "1351880"
  },
  {
    "text": "get method name looks promising right probably gives you the method name um",
    "start": "1351880",
    "end": "1357919"
  },
  {
    "text": "that's that's the whole function not that much code the bad news is that there's another method called to",
    "start": "1357919",
    "end": "1365200"
  },
  {
    "text": "get method name with traits and that one is a nightmare I still have nightmares",
    "start": "1365200",
    "end": "1370799"
  },
  {
    "text": "about that well no not not really but it's it's pretty bad let let me explain",
    "start": "1370799",
    "end": "1376480"
  },
  {
    "text": "you when you want want to know the name of the method you you already know two things",
    "start": "1376480",
    "end": "1384440"
  },
  {
    "text": "you know the ID of the method that's that's simply an integer you have the ID of the method and then you have an array",
    "start": "1384440",
    "end": "1391520"
  },
  {
    "text": "of pre-computed names and in that array are all the method names so now you just",
    "start": "1391520",
    "end": "1398960"
  },
  {
    "text": "need to map the method ID to an index to that array somehow that's what you need to",
    "start": "1398960",
    "end": "1405880"
  },
  {
    "text": "do with debu build of The Flash Player it's really easy because in in the um",
    "start": "1405880",
    "end": "1413200"
  },
  {
    "text": "pool object you have you have an array called method name indices and from that",
    "start": "1413200",
    "end": "1418960"
  },
  {
    "text": "array you directly get the mapping so you you get the missing link unfortunately with the non debug",
    "start": "1418960",
    "end": "1426200"
  },
  {
    "text": "build that's the one that all the normal people are running on their machines there is no such",
    "start": "1426200",
    "end": "1433519"
  },
  {
    "text": "array and the explanation is in the comment I mean it's not always popular at so with the normal non debu build",
    "start": "1433760",
    "end": "1441919"
  },
  {
    "text": "what I had to do was manually build that array and it wasn't really as easy as I",
    "start": "1441919",
    "end": "1448440"
  },
  {
    "text": "would have hoped for um what I had to do is is par the code of the of the flash",
    "start": "1448440",
    "end": "1455760"
  },
  {
    "text": "object because you get that information from the flash object um the good news",
    "start": "1455760",
    "end": "1460960"
  },
  {
    "text": "was that jarin has already implementation for that it wasn't really",
    "start": "1460960",
    "end": "1466240"
  },
  {
    "text": "just copy paste because there so many special conditions and all that stuff but if you need to do something similar",
    "start": "1466240",
    "end": "1472120"
  },
  {
    "text": "check the source code of parse method infos and and you can you can find it that's",
    "start": "1472120",
    "end": "1477760"
  },
  {
    "text": "where that's where the magic",
    "start": "1477760",
    "end": "1481840"
  },
  {
    "text": "happens I'm from Finland and in Finnish we have a",
    "start": "1484559",
    "end": "1490159"
  },
  {
    "text": "saying the direct translation would be something like the more you eat the",
    "start": "1490600",
    "end": "1496159"
  },
  {
    "text": "hungrier you get and what I mean by that is that when you",
    "start": "1496159",
    "end": "1502080"
  },
  {
    "text": "are building a new tool and when you add a couple of features you want to add some more and that's exactly what",
    "start": "1502080",
    "end": "1508440"
  },
  {
    "text": "happened so when the original goals were already met I started thinking that okay",
    "start": "1508440",
    "end": "1513880"
  },
  {
    "text": "it would be nice to look all the arguments of the method calls and also the return values which is pretty",
    "start": "1513880",
    "end": "1521360"
  },
  {
    "text": "obvious because if you can do that you already have a lot of in information you have a full call Trace you might",
    "start": "1521360",
    "end": "1527000"
  },
  {
    "text": "remember from the log that Adobe Flash Player generates is that there's only the method name no parameters no return",
    "start": "1527000",
    "end": "1535120"
  },
  {
    "text": "values this is easy in a way again we get back to the way all action script",
    "start": "1535120",
    "end": "1540880"
  },
  {
    "text": "methods are called there's three parameters the middle one is the argument count and the last one is is",
    "start": "1540880",
    "end": "1547159"
  },
  {
    "text": "the argument pointers the first element in that array is is the this pointer",
    "start": "1547159",
    "end": "1552559"
  },
  {
    "text": "pointed to that object itself and the rest are are the arguments the the return value well it",
    "start": "1552559",
    "end": "1559799"
  },
  {
    "text": "it's the return value of the Native function call so you will find that in the eax",
    "start": "1559799",
    "end": "1565799"
  },
  {
    "text": "register quite straightforward thus far the the only challenge is that if",
    "start": "1565799",
    "end": "1573279"
  },
  {
    "text": "you want to have some meaningful logging of these values let's say that you have a function and it takes one parameter",
    "start": "1573279",
    "end": "1580039"
  },
  {
    "text": "and that parameter is a string if you just log the values from from that array",
    "start": "1580039",
    "end": "1586440"
  },
  {
    "text": "all you have in the logs is a pointer and you would probably want to have the actual string in your logs for that you",
    "start": "1586440",
    "end": "1593919"
  },
  {
    "text": "need to know the types of the parameters and the type of the return value and",
    "start": "1593919",
    "end": "1599480"
  },
  {
    "text": "again I have to say that this wasn't as easy I as I wish it would have been the good news is that chamar has",
    "start": "1599480",
    "end": "1607159"
  },
  {
    "text": "the source code it's the same parse method infos method I I mentioned",
    "start": "1607159",
    "end": "1613279"
  },
  {
    "text": "earlier that one at that point it reads the type of the return value and then",
    "start": "1613279",
    "end": "1618559"
  },
  {
    "text": "there's a loop for reading types of the parameters if you do that you eventually",
    "start": "1618559",
    "end": "1625039"
  },
  {
    "text": "get get all the type information a couple of words about the",
    "start": "1625039",
    "end": "1631640"
  },
  {
    "text": "design of this tool this one I'll keep really brief open source for the win it was obvious that if I'm able to",
    "start": "1631640",
    "end": "1639159"
  },
  {
    "text": "build this I will release this as open source because at least I think I'm not the only one who has to deal with the",
    "start": "1639159",
    "end": "1646159"
  },
  {
    "text": "problem of anal ing do Swift protected stuff or secure Swift protected stuff so",
    "start": "1646159",
    "end": "1651720"
  },
  {
    "text": "yes today this has been released as open source like I mentioned this is built on",
    "start": "1651720",
    "end": "1657760"
  },
  {
    "text": "ins pin Dynamic instrumentation framework now for those asking why pin",
    "start": "1657760",
    "end": "1663240"
  },
  {
    "text": "why not something else pin has a nice API and it was",
    "start": "1663240",
    "end": "1668919"
  },
  {
    "text": "really really helpful and Easy in the beginning in the research phase for",
    "start": "1668919",
    "end": "1674159"
  },
  {
    "text": "example if you want to instrument all C all eax instructions that's trivial with",
    "start": "1674159",
    "end": "1681080"
  },
  {
    "text": "pin it's it's really easy later I found out that okay there's",
    "start": "1681080",
    "end": "1686880"
  },
  {
    "text": "some limitations in the API and now that I have the first prototype I I probably",
    "start": "1686880",
    "end": "1693640"
  },
  {
    "text": "want to go with normal hooking with the next version because there is some performance impact with ins soing but I",
    "start": "1693640",
    "end": "1699480"
  },
  {
    "text": "want you to keep in mind that when I started building this Tool uh it it was designed to help manual analysis and it",
    "start": "1699480",
    "end": "1706679"
  },
  {
    "text": "can already be used for automatic analysis in the back end there is a performance impact but if you have time",
    "start": "1706679",
    "end": "1714320"
  },
  {
    "text": "for analysis it doesn't really matter the only place where it matters is if you would need to do real-time analysis",
    "start": "1714320",
    "end": "1719799"
  },
  {
    "text": "on the client that you cannot do yet but perhaps with the next version and finally I have something",
    "start": "1719799",
    "end": "1727320"
  },
  {
    "text": "called plugins in this tool now if somebody is a software architect or software",
    "start": "1727320",
    "end": "1733440"
  },
  {
    "text": "designer they they would surely say that that's far from a plug-in architecture",
    "start": "1733440",
    "end": "1739039"
  },
  {
    "text": "and yeah I agree it's really far from that this is this is Poor Man's plugins as simple as it can be if you want to",
    "start": "1739039",
    "end": "1746640"
  },
  {
    "text": "write your own plug-in you just need to do two two things um you need to overwrite two virtual",
    "start": "1746640",
    "end": "1752600"
  },
  {
    "text": "methods the first one is called before each action script method call and with",
    "start": "1752600",
    "end": "1759440"
  },
  {
    "text": "that method you get the full method name you get the argument count the arguments",
    "start": "1759440",
    "end": "1765760"
  },
  {
    "text": "and also pointer to the method info object that should be more than enough information and the second virtual",
    "start": "1765760",
    "end": "1772200"
  },
  {
    "text": "method you need to override is the one that's called after the action script method call and that one gives you the",
    "start": "1772200",
    "end": "1778640"
  },
  {
    "text": "return value so you as you can imagine if you get all this data you can do all",
    "start": "1778640",
    "end": "1783960"
  },
  {
    "text": "sorts of things and with the first release there are two oh no sorry three",
    "start": "1783960",
    "end": "1789000"
  },
  {
    "text": "um plugins first one generates the call Trace where you can see all the method calls parameters return values the",
    "start": "1789000",
    "end": "1796519"
  },
  {
    "text": "second plugin is responsible for dumping all the flash objects that are loaded",
    "start": "1796519",
    "end": "1801600"
  },
  {
    "text": "with load bites and the third one is something you can use to decrypt the",
    "start": "1801600",
    "end": "1807840"
  },
  {
    "text": "strings that the secur Swift commercial protector uses and I'll demonstrate all these",
    "start": "1807840",
    "end": "1814399"
  },
  {
    "text": "plugins in a minute which is",
    "start": "1814399",
    "end": "1819159"
  },
  {
    "text": "now and since we're in Vegas I decided to take a walk on the wild side and use",
    "start": "1821200",
    "end": "1827960"
  },
  {
    "text": "Windows XP and ie6 for my demo I like to live",
    "start": "1827960",
    "end": "1836398"
  },
  {
    "text": "dangerously",
    "start": "1836519",
    "end": "1839519"
  },
  {
    "text": "okay I'll start IE with the instrumentation",
    "start": "1842519",
    "end": "1849080"
  },
  {
    "text": "on so technically IE isn't instrumented in in any way it's the it's the ActiveX",
    "start": "1851360",
    "end": "1858840"
  },
  {
    "text": "flash player that's instrumented and I'll start with the redirector sample that I showed earlier",
    "start": "1858840",
    "end": "1866200"
  },
  {
    "text": "the one that was found on YouTube redirecting people to Sticks exploit",
    "start": "1866200",
    "end": "1872919"
  },
  {
    "text": "kit this is a really simple example but I I want to use this to show you um the",
    "start": "1872919",
    "end": "1880320"
  },
  {
    "text": "kind of information that you can get from the call Trace okay it's loaded all good",
    "start": "1880320",
    "end": "1889158"
  },
  {
    "text": "and that's the normal log there's nothing interesting but here's the call",
    "start": "1890519",
    "end": "1895760"
  },
  {
    "text": "Trace so here you can see that you can also see what method called which method",
    "start": "1895760",
    "end": "1902760"
  },
  {
    "text": "so there's this kind of call tree now if you're interested in",
    "start": "1902760",
    "end": "1908679"
  },
  {
    "text": "knowing that what was the JavaScript that was injected to the browser you",
    "start": "1908679",
    "end": "1914159"
  },
  {
    "text": "want to find these external internal interface calls um the first one here it simply um",
    "start": "1914159",
    "end": "1923000"
  },
  {
    "text": "for some reason uses JavaScript to check the user agent you could do that directly from flash but yeah it uses",
    "start": "1923000",
    "end": "1929799"
  },
  {
    "text": "JavaScript and the second one then injects the malicious JavaScript doing",
    "start": "1929799",
    "end": "1935559"
  },
  {
    "text": "doing the redirection to Sticks exploit kit so let me get that list",
    "start": "1935559",
    "end": "1943799"
  },
  {
    "text": "again and I'll enable word wrapping and here we have",
    "start": "1944240",
    "end": "1949639"
  },
  {
    "text": "it it creates an i frame and that's the",
    "start": "1949639",
    "end": "1955559"
  },
  {
    "text": "URL so now imagine that you're a researcher like me",
    "start": "1955559",
    "end": "1962080"
  },
  {
    "text": "and your task is to First figure out that is this flash file malicious and if",
    "start": "1962080",
    "end": "1967480"
  },
  {
    "text": "it's a redirector what's the target of the redirection well there you have your",
    "start": "1967480",
    "end": "1972679"
  },
  {
    "text": "answer all you needed to do is just run the flash file if you did this with static analysis you had to decode and",
    "start": "1972679",
    "end": "1980559"
  },
  {
    "text": "decrypt okay that takes 3 minutes but this takes only two so this is still",
    "start": "1980559",
    "end": "1986559"
  },
  {
    "text": "better okay for the next demo I'll I'll disable",
    "start": "1986559",
    "end": "1992159"
  },
  {
    "text": "the call tracing I'll run it in something I call fast mode it's a stupid",
    "start": "1992159",
    "end": "1997720"
  },
  {
    "text": "name but that's what it is it's it's a fast mode it's it's faster so the only",
    "start": "1997720",
    "end": "2003440"
  },
  {
    "text": "thing that now changes is one command line parameter to my tool that's the only change",
    "start": "2003440",
    "end": "2010039"
  },
  {
    "text": "now and the next Nemo is is with an exploit if you use the call tracing with",
    "start": "2010039",
    "end": "2017840"
  },
  {
    "text": "exploits especially if you have Heap spraying with lots of Loops you you end",
    "start": "2017840",
    "end": "2023000"
  },
  {
    "text": "up with some pretty large call Trace files one was 500 megabytes so yeah",
    "start": "2023000",
    "end": "2028840"
  },
  {
    "text": "don't do that and I'll start with the one from Fiesta exploit",
    "start": "2028840",
    "end": "2035360"
  },
  {
    "text": "kit so now it's in the fast mode call tracing is disabled but the flash",
    "start": "2035360",
    "end": "2040760"
  },
  {
    "text": "dumping um is still enabled and also all all other plugins except the call",
    "start": "2040760",
    "end": "2048520"
  },
  {
    "text": "tracing okay",
    "start": "2048520",
    "end": "2053398"
  },
  {
    "text": "loading and here we have something that's",
    "start": "2055079",
    "end": "2060800"
  },
  {
    "text": "the this is The Flash object that was you um loaded using load byes call",
    "start": "2060800",
    "end": "2068878"
  },
  {
    "text": "we can scroll down a bit or better yet let's take a copy of the source code open it in",
    "start": "2071200",
    "end": "2080878"
  },
  {
    "text": "notepad and we can search for something like this",
    "start": "2080879",
    "end": "2085960"
  },
  {
    "text": "yeah and there you have it if you want to know what was the vulnerability exploited there you have it CV",
    "start": "2085960",
    "end": "2093919"
  },
  {
    "text": "2014 0497 and remember that this embedded flash",
    "start": "2093919",
    "end": "2100079"
  },
  {
    "text": "object was constructed from an array of integers that was then sored and then loaded so again I would argue that yeah",
    "start": "2100079",
    "end": "2107599"
  },
  {
    "text": "faster than static analysis moving on to the ones protected",
    "start": "2107599",
    "end": "2115599"
  },
  {
    "text": "with commercial protectors and when I say commercial protectors I don't mean",
    "start": "2115599",
    "end": "2121440"
  },
  {
    "text": "that the attacker actually paid any money uh I've seen the demo version of",
    "start": "2121440",
    "end": "2127119"
  },
  {
    "text": "dowi used quite quite commonly so let's try one of the dowi",
    "start": "2127119",
    "end": "2133839"
  },
  {
    "text": "protected samples next it's this",
    "start": "2133839",
    "end": "2139880"
  },
  {
    "text": "one and if all goes well this time we should get two flash object and we",
    "start": "2147000",
    "end": "2153800"
  },
  {
    "text": "did I'll open the first one",
    "start": "2153800",
    "end": "2158800"
  },
  {
    "text": "okay here's the good stuff it has a Shader",
    "start": "2167079",
    "end": "2172880"
  },
  {
    "text": "object and it clearly has sh code so now we already know that yeah this is",
    "start": "2172880",
    "end": "2178079"
  },
  {
    "text": "clearly malicious um if you see a Shader object most likely it's exploiting CV",
    "start": "2178079",
    "end": "2185720"
  },
  {
    "text": "20140515 um if you want to confirm that you",
    "start": "2185720",
    "end": "2192800"
  },
  {
    "text": "probably check the Define binary data tag but in the",
    "start": "2192800",
    "end": "2199280"
  },
  {
    "text": "first file there's no defined binary data tag but the Shader needs to come",
    "start": "2199280",
    "end": "2204680"
  },
  {
    "text": "from somewhere and that's the purpose of the second",
    "start": "2204680",
    "end": "2211640"
  },
  {
    "text": "flash file and the way these two flash objects are loaded is that they have the same loader cont context so for the",
    "start": "2211640",
    "end": "2218119"
  },
  {
    "text": "Flash Player it looks like it's one flash file just simply split into two so",
    "start": "2218119",
    "end": "2223520"
  },
  {
    "text": "it looks like one flash object and now if we check the",
    "start": "2223520",
    "end": "2229599"
  },
  {
    "text": "content of that defined binary data tag we can see that yeah it's a Shader object and if you look at it closely you",
    "start": "2229800",
    "end": "2236440"
  },
  {
    "text": "can see that yeah it's it's one that triggers the vulnerability so yeah I like to remind",
    "start": "2236440",
    "end": "2243760"
  },
  {
    "text": "you that this was a new Swift protected file also the same protector used by the",
    "start": "2243760",
    "end": "2249520"
  },
  {
    "text": "elderwood group so yeah much much easier with static analysis I'll delete the",
    "start": "2249520",
    "end": "2257359"
  },
  {
    "text": "dumped files and now we'll now we'll go after the Holy Grail of flash protectors",
    "start": "2257359",
    "end": "2264640"
  },
  {
    "text": "and that was the secure Swift I'll use the same sample from",
    "start": "2264640",
    "end": "2271040"
  },
  {
    "text": "angler exploit kit that I quickly showed you earlier this is the same",
    "start": "2271040",
    "end": "2279160"
  },
  {
    "text": "file with this one I will crash because it would like to get a parameter that",
    "start": "2281800",
    "end": "2288160"
  },
  {
    "text": "defines the URL of the payload and I didn't specify anything meaningful",
    "start": "2288160",
    "end": "2293640"
  },
  {
    "text": "so at some at some point IE will",
    "start": "2293640",
    "end": "2298200"
  },
  {
    "text": "crash and and once it crashes the analysis is done",
    "start": "2300000",
    "end": "2307920"
  },
  {
    "text": "here on the desktop again we have the dumped flash file",
    "start": "2307920",
    "end": "2313280"
  },
  {
    "text": "and as you can see also the embedded flash file is protected with secure",
    "start": "2313280",
    "end": "2320520"
  },
  {
    "text": "Swift and that kind of sucks but what can you do I'll copy the source",
    "start": "2320520",
    "end": "2327280"
  },
  {
    "text": "code paste it here if we want to know the vulnerability again we'll do",
    "start": "2327280",
    "end": "2332720"
  },
  {
    "text": "something like this yeah it's the same same vulnerability that we saw",
    "start": "2332720",
    "end": "2338560"
  },
  {
    "text": "earlier but I happen to know that this one exploits two different",
    "start": "2338560",
    "end": "2344000"
  },
  {
    "text": "vulnerabilities and to identify the other I want to be able to decrypt the",
    "start": "2344000",
    "end": "2350920"
  },
  {
    "text": "strings that the secur with protector has encrypted and to do and to do that I",
    "start": "2350920",
    "end": "2357400"
  },
  {
    "text": "need to find the string decryption routine and what flash experts typically",
    "start": "2357400",
    "end": "2362480"
  },
  {
    "text": "do is they check the version of The Flash Player so let's try that",
    "start": "2362480",
    "end": "2367800"
  },
  {
    "text": "one yeah okay here we have the version check and",
    "start": "2367800",
    "end": "2375359"
  },
  {
    "text": "the version string is saved to this that version I'll search with",
    "start": "2375359",
    "end": "2382119"
  },
  {
    "text": "that and here's the good stuff along if comparing the version",
    "start": "2382119",
    "end": "2391760"
  },
  {
    "text": "string something coming from a function that takes an",
    "start": "2391760",
    "end": "2396960"
  },
  {
    "text": "integer as a parameter and I bet that the function that we see there that's the one that",
    "start": "2396960",
    "end": "2403839"
  },
  {
    "text": "decrypts the strings protected by secure Swift so what you can do with the secure",
    "start": "2403839",
    "end": "2410079"
  },
  {
    "text": "Swift plugin is you can take the method name and then you just change the",
    "start": "2410079",
    "end": "2417280"
  },
  {
    "text": "command line parameters so this is the patch file I I Ed to load",
    "start": "2417280",
    "end": "2424520"
  },
  {
    "text": "IE and there's the fast switch I'll add another switch secure Swift and then you",
    "start": "2424520",
    "end": "2431680"
  },
  {
    "text": "just give it the name of the string decryption function in the same format",
    "start": "2431680",
    "end": "2436880"
  },
  {
    "text": "that flash player uses inter internally and",
    "start": "2436880",
    "end": "2442359"
  },
  {
    "text": "yeah then you analyze the same file again let's see what we",
    "start": "2442359",
    "end": "2449640"
  },
  {
    "text": "get it would probably be possible to build that same plugin so that it logs",
    "start": "2455319",
    "end": "2461680"
  },
  {
    "text": "the return values from all functions that take one parameter which is a which",
    "start": "2461680",
    "end": "2468119"
  },
  {
    "text": "is an integer and the function returns a string that would probably give you more",
    "start": "2468119",
    "end": "2474400"
  },
  {
    "text": "stuff some false positives but that might work as well then you wouldn't need to do this in two",
    "start": "2474400",
    "end": "2481839"
  },
  {
    "text": "steps I have written some Python scripts for statically decrypting these strings",
    "start": "2484599",
    "end": "2491160"
  },
  {
    "text": "and I can tell you that creating those scripts wasn't wasn't quick so I'm I'm",
    "start": "2491160",
    "end": "2497359"
  },
  {
    "text": "happy that at least I have tool for dynamic analysis now yeah here we can",
    "start": "2497359",
    "end": "2502520"
  },
  {
    "text": "see the decrypted strings look at this for",
    "start": "2502520",
    "end": "2508000"
  },
  {
    "text": "example flash Bayer versions used for the version checking that we just saw uh",
    "start": "2508000",
    "end": "2513200"
  },
  {
    "text": "it also checks the windows version but how about",
    "start": "2513200",
    "end": "2518319"
  },
  {
    "text": "this this is the interactive part of my presentation what is",
    "start": "2518319",
    "end": "2523760"
  },
  {
    "text": "that yeah regular expression that's correct and what's special about this",
    "start": "2523760",
    "end": "2529760"
  },
  {
    "text": "particular regular expression",
    "start": "2529760",
    "end": "2536200"
  },
  {
    "text": "H it's exploiting a certain vulnerability if we go back do",
    "start": "2536280",
    "end": "2544359"
  },
  {
    "text": "the action script s course search for the integer integer that was given as a",
    "start": "2544359",
    "end": "2550520"
  },
  {
    "text": "parameter we can really confirm that yes it is a regular expression and that's",
    "start": "2550520",
    "end": "2556480"
  },
  {
    "text": "the one that triggers the CV 2013 0634 vulnerability also known as the",
    "start": "2556480",
    "end": "2563079"
  },
  {
    "text": "lady boil exploit yeah so now we know the two",
    "start": "2563079",
    "end": "2568680"
  },
  {
    "text": "vulnerabilties exploited by this secure Swift protected flash file and in my",
    "start": "2568680",
    "end": "2574359"
  },
  {
    "text": "opinion that's the that's probably the the best flash protector out there at least the best I've seen used with",
    "start": "2574359",
    "end": "2581079"
  },
  {
    "text": "malicious flash files",
    "start": "2581079",
    "end": "2587359"
  },
  {
    "text": "okay if you need to deal with analysis of malicious flash files I I think you",
    "start": "2592160",
    "end": "2598200"
  },
  {
    "text": "agree about the problem that yeah static analysis isn't enough and hopefully you",
    "start": "2598200",
    "end": "2603720"
  },
  {
    "text": "you find this tool useful um if you're interested in in how The Flash Player",
    "start": "2603720",
    "end": "2609680"
  },
  {
    "text": "works if you want to know about more about the internals you might be interested in the source code I wasn't",
    "start": "2609680",
    "end": "2615040"
  },
  {
    "text": "able to cover all the details in this presentation or better yet if you want to contribute to the tool here's where",
    "start": "2615040",
    "end": "2622000"
  },
  {
    "text": "you can find it so I I must say that I'm I'm really grateful to fcq because they",
    "start": "2622000",
    "end": "2628640"
  },
  {
    "text": "they let me uh release this and the way it actually happened was that I first submitted to black hat then I told that",
    "start": "2628640",
    "end": "2635280"
  },
  {
    "text": "yeah I got accept to black hat and I promis to release something as open source and they were like yeah sure",
    "start": "2635280",
    "end": "2640440"
  },
  {
    "text": "that's a great idea so they were actually happy to see someone wanting to release open source tools so I mean yeah",
    "start": "2640440",
    "end": "2648599"
  },
  {
    "text": "I'm I'm proud to work for fcq that's all any",
    "start": "2648599",
    "end": "2656040"
  },
  {
    "text": "questions we should have time okay thank you thank",
    "start": "2656040",
    "end": "2663520"
  },
  {
    "text": "you do you speak English you do okay any any questions about the tool the process",
    "start": "2665000",
    "end": "2673480"
  },
  {
    "text": "uh Flash Player anything yes",
    "start": "2673480",
    "end": "2679119"
  },
  {
    "text": "please your very good question so the question",
    "start": "2679559",
    "end": "2686040"
  },
  {
    "text": "was that is my tool flash uh Player version specific that's a great question",
    "start": "2686040",
    "end": "2692880"
  },
  {
    "text": "yes and no it was from the beginning it was designed so that it can support any",
    "start": "2692880",
    "end": "2699440"
  },
  {
    "text": "Flash Player version currently there are five or six different configurations",
    "start": "2699440",
    "end": "2705599"
  },
  {
    "text": "supported 10. x and 11. x can't recall the exact version numbers if you want to",
    "start": "2705599",
    "end": "2712359"
  },
  {
    "text": "add support for a new version or different configuration of flash um you",
    "start": "2712359",
    "end": "2717480"
  },
  {
    "text": "need to specify a couple of offsets and related virtual addresses and stuff like",
    "start": "2717480",
    "end": "2723480"
  },
  {
    "text": "that so it's should be straightforward",
    "start": "2723480",
    "end": "2729160"
  },
  {
    "text": "yeah please thank you talk thanks so I notic that uh currently you're using",
    "start": "2729160",
    "end": "2735480"
  },
  {
    "text": "pain pain yeah for capturing the API C right so U noce that the the the",
    "start": "2735480",
    "end": "2745040"
  },
  {
    "text": "execution is a bit slow so is it possible to use other evolation tools like Mach to implement a faster one yeah",
    "start": "2745040",
    "end": "2754800"
  },
  {
    "text": "very good questions so the question was about the use of insult pin and the impact on performance so like most of",
    "start": "2754800",
    "end": "2762079"
  },
  {
    "text": "you probably noticed there there's a noticeable performance penalty and like I mentioned earlier in the presentation",
    "start": "2762079",
    "end": "2768440"
  },
  {
    "text": "this was this first version was never designed to be used for realtime",
    "start": "2768440",
    "end": "2773559"
  },
  {
    "text": "analysis on the client um you could run that in the back end or use it for",
    "start": "2773559",
    "end": "2778760"
  },
  {
    "text": "manual analysis um partly because of the performance impact but also also because",
    "start": "2778760",
    "end": "2786359"
  },
  {
    "text": "of the limitations in the insul pin API most likely the next version will be",
    "start": "2786359",
    "end": "2792240"
  },
  {
    "text": "based on hooking so the performance impact should be smaller I don't know",
    "start": "2792240",
    "end": "2797599"
  },
  {
    "text": "will it be good enough to use it actually so that you can run it on the client on in the background or is it",
    "start": "2797599",
    "end": "2804359"
  },
  {
    "text": "still too slow I don't know but we'll learn let's see please would it be possible to maybe",
    "start": "2804359",
    "end": "2812400"
  },
  {
    "text": "modify the APM s you know using instumentation just create Aug",
    "start": "2812400",
    "end": "2819000"
  },
  {
    "text": "verion FL that exactly thats everything yeah the question was that um",
    "start": "2819000",
    "end": "2825720"
  },
  {
    "text": "would it be possible to modify the source code of of of The Flash Player um",
    "start": "2825720",
    "end": "2832000"
  },
  {
    "text": "pardon legal yeah the challenge is that um for the",
    "start": "2832000",
    "end": "2839960"
  },
  {
    "text": "actual Flash Player you don't have the source code available so it's it's not really an option you could probably do",
    "start": "2839960",
    "end": "2846160"
  },
  {
    "text": "something if you just took the tamarine engine and used that um I didn't want to modify the flash",
    "start": "2846160",
    "end": "2854319"
  },
  {
    "text": "file that's loaded in any way I didn't want to touch that at all I I don't I",
    "start": "2854319",
    "end": "2859480"
  },
  {
    "text": "don't want to modify the flash binary either because my goal was that exploits should",
    "start": "2859480",
    "end": "2867319"
  },
  {
    "text": "be able to run successfully in this environment that's one of the reasons why I wanted to support the non debu",
    "start": "2867319",
    "end": "2874520"
  },
  {
    "text": "version of Flash Player instead of the debug version even though that was easier to work with but it might be that",
    "start": "2874520",
    "end": "2880119"
  },
  {
    "text": "the exploit wouldn't work or the Shell Code wouldn't run or something like that so that's that's the reason why I chose",
    "start": "2880119",
    "end": "2886760"
  },
  {
    "text": "to go with Dynamic instrumentation any other questions very",
    "start": "2886760",
    "end": "2892800"
  },
  {
    "text": "good questions please is there a possibility that would detect that is running and then like stop",
    "start": "2892800",
    "end": "2900480"
  },
  {
    "text": "ex the question was that um would it be possible for malware or",
    "start": "2900480",
    "end": "2906280"
  },
  {
    "text": "the malicious flash object to detect that suo this this tool is running um I",
    "start": "2906280",
    "end": "2911559"
  },
  {
    "text": "believe there there was another talk about um detecting the presence of insul",
    "start": "2911559",
    "end": "2917000"
  },
  {
    "text": "pin in the process but I think that was that was about um Native code Windows",
    "start": "2917000",
    "end": "2923319"
  },
  {
    "text": "malware doing that doing that from Flash from action",
    "start": "2923319",
    "end": "2929559"
  },
  {
    "text": "script if there's a bug in the tool and most likely there is many bugs in the",
    "start": "2929559",
    "end": "2935400"
  },
  {
    "text": "tool tool um by by exploiting one of those box it it's probably possible but",
    "start": "2935400",
    "end": "2942599"
  },
  {
    "text": "if we talk about on on the architectural level or philosophical level it shouldn't be possible in my opinion yeah",
    "start": "2942599",
    "end": "2950440"
  },
  {
    "text": "very very good point but I I have to say that if I see malware that tries to bypass my tool that's a huge win for me",
    "start": "2950440",
    "end": "2957960"
  },
  {
    "text": "so yeah I would be happy to see them any any other questions great great",
    "start": "2957960",
    "end": "2964520"
  },
  {
    "text": "questions one",
    "start": "2964520",
    "end": "2969920"
  },
  {
    "text": "more speed of the analysis be recognized by like",
    "start": "2974480",
    "end": "2982359"
  },
  {
    "text": "a yeah very good idea that's a really good point so the comment was",
    "start": "2982359",
    "end": "2988119"
  },
  {
    "text": "that um the malicious flash object could use some sort of a timing attack to see",
    "start": "2988119",
    "end": "2993839"
  },
  {
    "text": "how long the execution takes and that way detect the presence of suo excellent point that's absolutely true yet another",
    "start": "2993839",
    "end": "3001480"
  },
  {
    "text": "good reason to use hooking instead of inel pin or something similar okay thank you very much for",
    "start": "3001480",
    "end": "3008799"
  },
  {
    "text": "your time thanks",
    "start": "3008799",
    "end": "3015200"
  }
]