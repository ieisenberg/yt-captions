[
  {
    "start": "0",
    "end": "66000"
  },
  {
    "text": "good morning thanks for joining that's Joe standing next to me and I'm Nico and we work for Microsoft at the Security",
    "start": "30",
    "end": "8099"
  },
  {
    "text": "Response Team VM SRC and we're here today to talk about hyper-v and some of",
    "start": "8099",
    "end": "13530"
  },
  {
    "text": "the outstanding vulnerabilities we've seen so you guys you might be wondering why we are doing that why we are talking",
    "start": "13530",
    "end": "22320"
  },
  {
    "text": "about vulnerabilities in your own product um there are various reasons for that one of the reasons is that we've",
    "start": "22320",
    "end": "30449"
  },
  {
    "text": "got an outstanding bug bounty so you know before joining Microsoft I used to",
    "start": "30449",
    "end": "36630"
  },
  {
    "text": "be bounty hunter and in my own opinion right now this is one of the best that",
    "start": "36630",
    "end": "41910"
  },
  {
    "text": "we have look at death there's these figures for energy in a colonel we will",
    "start": "41910",
    "end": "48360"
  },
  {
    "text": "give you $200,000 and if you manage to exploit that that will be another 50,000",
    "start": "48360",
    "end": "54600"
  },
  {
    "text": "more so why why this payout well because",
    "start": "54600",
    "end": "59809"
  },
  {
    "text": "exploiting finding bugs in hyper-v is not failure it's hard it's complicated",
    "start": "59809",
    "end": "65580"
  },
  {
    "text": "it's it takes a lot of time to ramp up and besides they are not that many blog",
    "start": "65580",
    "end": "71820"
  },
  {
    "start": "66000",
    "end": "314000"
  },
  {
    "text": "posts available there around there not many vulnerabilities publicly described",
    "start": "71820",
    "end": "77009"
  },
  {
    "text": "and for all of this we thought that it would be great for us to stand here before you today and talk about the",
    "start": "77009",
    "end": "84000"
  },
  {
    "text": "internals of hyper-v which is what Joe is going to do in a second and I come",
    "start": "84000",
    "end": "90060"
  },
  {
    "text": "back later and I will show you some great bugs that we've seen in Highbury",
    "start": "90060",
    "end": "95780"
  },
  {
    "text": "alright Joe thanks so one thing I'd like to note is we get questions sometimes",
    "start": "95780",
    "end": "101490"
  },
  {
    "text": "from people who look at our bounties and they say hey your bounty says that you'll pay up to 200,000 or up to",
    "start": "101490",
    "end": "106970"
  },
  {
    "text": "250,000 but how much am I really gonna get and just to provide some clarity for you guys unless we have a really good",
    "start": "106970",
    "end": "113610"
  },
  {
    "text": "reason not to offer that maximum bounty payout we pay the maximum if you find a",
    "start": "113610",
    "end": "118950"
  },
  {
    "text": "good bug and you exploit it in hyper-v that's in the the kernel of the hypervisor you're probably gonna get two hundred and fifty thousand dollars so",
    "start": "118950",
    "end": "127770"
  },
  {
    "text": "the first thing we'd like to do is Nico mentioned is we would like to give you a little bit of an overview of hyper-v architecture",
    "start": "127770",
    "end": "133230"
  },
  {
    "text": "from the perspective of a security researcher that is just interested in going and trying to find guests to host",
    "start": "133230",
    "end": "139080"
  },
  {
    "text": "escape bugs so if we look at hyper-v from a really high level you can see",
    "start": "139080",
    "end": "145319"
  },
  {
    "text": "that at the top here we have the hypervisor and down below we have a number of what we call partitions in",
    "start": "145319",
    "end": "151310"
  },
  {
    "text": "hyper-v a partition is how we describe the logical unit of isolation that we",
    "start": "151310",
    "end": "157440"
  },
  {
    "text": "use to isolate different virtual machines from each other now partitions get isolated in a few",
    "start": "157440",
    "end": "163019"
  },
  {
    "text": "ways the first way if they're isolated is the hypervisor uses the extended page tables to control what physical memory each",
    "start": "163019",
    "end": "170190"
  },
  {
    "text": "partition actually has access to and another way that isolation is provided is the hypervisor is able to receive",
    "start": "170190",
    "end": "177420"
  },
  {
    "text": "intercepts or traps whenever certain instructions are executed by a partition",
    "start": "177420",
    "end": "183420"
  },
  {
    "text": "so for example the hypervisor can intercept any attempt by a partition to",
    "start": "183420",
    "end": "188700"
  },
  {
    "text": "execute in or out instructions which are used to communicate with i/o ports so by",
    "start": "188700",
    "end": "194340"
  },
  {
    "text": "doing this the hypervisor can really effectively prevent a partition from having any access to Hardware whatsoever",
    "start": "194340",
    "end": "200040"
  },
  {
    "text": "and also from having any access to other partitions on the system so you can see we have these dotted purple lines on",
    "start": "200040",
    "end": "206700"
  },
  {
    "text": "this slide and this is just kind of to illustrate that none of these partitions have access to each other's physical",
    "start": "206700",
    "end": "211980"
  },
  {
    "text": "memory and they also don't have access to the physical memory of the hypervisor itself and that brings me to my next",
    "start": "211980",
    "end": "217859"
  },
  {
    "text": "point some of y'all might be familiar with other virtualization stacks like KBM for example and in some other",
    "start": "217859",
    "end": "224730"
  },
  {
    "text": "virtualization stacks the hypervisor is a component that it lives inside of the",
    "start": "224730",
    "end": "230370"
  },
  {
    "text": "kernel of the host operating system and that is not how hyper-v is designed in hyper-v the hypervisor is a standalone",
    "start": "230370",
    "end": "238349"
  },
  {
    "text": "binary that lives in its own physical and virtual address space so none of the partitions have the ability to mess with",
    "start": "238349",
    "end": "244530"
  },
  {
    "text": "its memory the hypervisor and hyper-v is not really responsible for a lot of",
    "start": "244530",
    "end": "249599"
  },
  {
    "text": "interesting functionality from a guest to hosts attack surface perspective it's",
    "start": "249599",
    "end": "254669"
  },
  {
    "text": "responsible for configuring the extended page tables it's responsible for some other hardware specific or",
    "start": "254669",
    "end": "260190"
  },
  {
    "text": "virtualization specific hardware configuration and it will end up handling things like",
    "start": "260190",
    "end": "265909"
  },
  {
    "text": "intercepts or traps or things like a hyper call being made which is the system call of the hypervisor world or",
    "start": "265909",
    "end": "272460"
  },
  {
    "text": "it will handle traps if certain privileged instructions are attempted to be executed but most of the really",
    "start": "272460",
    "end": "278939"
  },
  {
    "text": "interesting attack surface isn't in the hypervisor so I wouldn't recommend that you spend a whole lot of time there",
    "start": "278939",
    "end": "284870"
  },
  {
    "text": "let's move on to the root partition now I mentioned previously that all of the",
    "start": "284870",
    "end": "290669"
  },
  {
    "text": "partitions are isolated from each other the physical address space is isolated",
    "start": "290669",
    "end": "295979"
  },
  {
    "text": "from each other and that's actually not quite completely true there's one special partition in hyper-v which we",
    "start": "295979",
    "end": "301830"
  },
  {
    "text": "call the root partition and this is where the host operating system runs the root partition has access to the",
    "start": "301830",
    "end": "308009"
  },
  {
    "text": "physical memory of all of the other partitions on the system and that's because the root partition is ultimately",
    "start": "308009",
    "end": "313500"
  },
  {
    "text": "responsible for managing all of the virtual machines that run on the system it also has access to all of the",
    "start": "313500",
    "end": "319650"
  },
  {
    "text": "hardware so it can talk to the network card the video card etc and because it has this special access it's ultimately",
    "start": "319650",
    "end": "326430"
  },
  {
    "text": "responsible for providing a number of services to all of the other partitions or virtual machines that run on the",
    "start": "326430",
    "end": "332729"
  },
  {
    "text": "system most of the interesting guests to host attack surface in hyper-v lives",
    "start": "332729",
    "end": "338550"
  },
  {
    "text": "inside of the root partition so that's where you should really spend your time if you want to try to find these kind of",
    "start": "338550",
    "end": "344520"
  },
  {
    "text": "bugs and last we'll just mention the guest partitions which is a knee",
    "start": "344520",
    "end": "349919"
  },
  {
    "text": "partition that is not the root these partitions really do not have access to the physical memory of any other",
    "start": "349919",
    "end": "355500"
  },
  {
    "text": "partition they only can access their own physical memory they have no access to any of the hardware on the system they",
    "start": "355500",
    "end": "362430"
  },
  {
    "text": "can interact directly with the hypervisor by making hyper calls but there's a very limited set of hyper",
    "start": "362430",
    "end": "367949"
  },
  {
    "text": "calls that guests can make and they have no ability to communicate with any other",
    "start": "367949",
    "end": "373229"
  },
  {
    "text": "partition except for the root partition so in hyper-v there really is no direct",
    "start": "373229",
    "end": "379439"
  },
  {
    "text": "guest to guest attack surface all of the attack surface is either guest -",
    "start": "379439",
    "end": "384479"
  },
  {
    "text": "hypervisor or guest - host alright so",
    "start": "384479",
    "end": "390870"
  },
  {
    "start": "389000",
    "end": "468000"
  },
  {
    "text": "before we move on I want to give you guys a little bit of terminology when we're talking about physical memory",
    "start": "390870",
    "end": "396449"
  },
  {
    "text": "in virtualization it can always be a little bit tricky because the hypervisor uses the extended page tables to control",
    "start": "396449",
    "end": "405749"
  },
  {
    "text": "what physical memory all of the guest partitions can see so in hyper-v we use the term system",
    "start": "405749",
    "end": "412319"
  },
  {
    "text": "physical address to refer to the real physical address of memory and we use",
    "start": "412319",
    "end": "417809"
  },
  {
    "text": "guest physical address to refer to the physical addresses that the guests are",
    "start": "417809",
    "end": "422939"
  },
  {
    "text": "seeing and the hypervisor uses the extended page tables to map guest physical addresses to system physical",
    "start": "422939",
    "end": "429900"
  },
  {
    "text": "addresses we also have a concept in hyper-v called a guest physical address",
    "start": "429900",
    "end": "435779"
  },
  {
    "text": "descriptor list or GPA DL if any of you are familiar with Windows kernel",
    "start": "435779",
    "end": "441240"
  },
  {
    "text": "programming this is conceptually identical to an MDL or a memory descriptor list all that a GPA dl is is",
    "start": "441240",
    "end": "449339"
  },
  {
    "text": "it's a small header and then it's followed by a list of guest physical",
    "start": "449339",
    "end": "454830"
  },
  {
    "text": "addresses and guests can use a GPA dl to describe a range of physical memory that",
    "start": "454830",
    "end": "461969"
  },
  {
    "text": "they want the host to do you know certain operations on and when we're",
    "start": "461969",
    "end": "470460"
  },
  {
    "start": "468000",
    "end": "528000"
  },
  {
    "text": "looking at hyper-v and we're trying to look at different components that the guests can attack those components",
    "start": "470460",
    "end": "476669"
  },
  {
    "text": "primarily fall into three categories the first is a virtual device or what we call AV dev this is either an emulated",
    "start": "476669",
    "end": "485159"
  },
  {
    "text": "device or a para virtualized device and it lives inside of user mode in the host",
    "start": "485159",
    "end": "490439"
  },
  {
    "text": "operating system next we have a virtualization service provider or VSP",
    "start": "490439",
    "end": "496339"
  },
  {
    "text": "DSPs our para virtualized devices that live inside of the kernel of the host",
    "start": "496339",
    "end": "501689"
  },
  {
    "text": "operating system and finally we have integration components and from the",
    "start": "501689",
    "end": "506969"
  },
  {
    "text": "perspective of someone who's just trying to find guest to host bugs an integration component is basically",
    "start": "506969",
    "end": "512010"
  },
  {
    "text": "identical to a vida it is a component that is hosted in user mode on the root partition and the the guests can",
    "start": "512010",
    "end": "519779"
  },
  {
    "text": "communicate with it over specific communication channels so there's really not any difference between these and B",
    "start": "519779",
    "end": "525569"
  },
  {
    "text": "dos now I had mentioned before the root partition is responsible for",
    "start": "525569",
    "end": "531960"
  },
  {
    "start": "528000",
    "end": "714000"
  },
  {
    "text": "providing a number of services to the guests partitions and as you can probably imagine this is necessary",
    "start": "531960",
    "end": "537930"
  },
  {
    "text": "because the guest partitions have zero access to Hardware so unless someone provides them with storage and",
    "start": "537930",
    "end": "544530"
  },
  {
    "text": "networking and other stuff like that a guest partition wouldn't even be able to boot the different types of we have a",
    "start": "544530",
    "end": "552060"
  },
  {
    "text": "few different types of devices that end up being exposed to guest partitions",
    "start": "552060",
    "end": "557280"
  },
  {
    "text": "first we have emulated devices so we have an emulated network card video card",
    "start": "557280",
    "end": "563250"
  },
  {
    "text": "motherboards serial port etc there's a whole list of these things and the emulated devices literally emulate super",
    "start": "563250",
    "end": "570420"
  },
  {
    "text": "old hardware that basically every operating system in existence knows how to use so the network card is like a 25",
    "start": "570420",
    "end": "576810"
  },
  {
    "text": "year old network card that operates using i/o ports as you can imagine doing",
    "start": "576810",
    "end": "583680"
  },
  {
    "text": "Hardware emulation is really slow and for certain things like networking or",
    "start": "583680",
    "end": "588690"
  },
  {
    "text": "storage you need super super good performance and so that's where the paravirtualized device has come into",
    "start": "588690",
    "end": "594510"
  },
  {
    "text": "play we have a pair virtualized network stack storage stack video stack and para",
    "start": "594510",
    "end": "600900"
  },
  {
    "text": "virtualized PCI device and finally we have sort of a grab-bag of other",
    "start": "600900",
    "end": "606540"
  },
  {
    "text": "functionality that the hypervisor root partition needs to provide to guests",
    "start": "606540",
    "end": "612660"
  },
  {
    "text": "this is things like you need to provide the BIOS firmware that the VM is going to boot off of you need to provide live",
    "start": "612660",
    "end": "618540"
  },
  {
    "text": "migration support you need to provide the ability to commit and D commit",
    "start": "618540",
    "end": "623850"
  },
  {
    "text": "physical memory from the virtual machine while it's running if you want to have dynamic memory we have a number of",
    "start": "623850",
    "end": "629850"
  },
  {
    "text": "integration components these typically do things such as provide the hosts time",
    "start": "629850",
    "end": "635730"
  },
  {
    "text": "to the guest so that the guest knows what time it is or there's an integration component that allows you to",
    "start": "635730",
    "end": "641580"
  },
  {
    "text": "gracefully shutdown the virtual machine from the hyper-v interface without having to go and actually log into the",
    "start": "641580",
    "end": "649110"
  },
  {
    "text": "virtual machine and do a shutdown from the virtual machine itself and then we",
    "start": "649110",
    "end": "654180"
  },
  {
    "text": "have hyper-v containers which we're not going to talk about much in this talk but it's worth noting that there's also some specific functionality that's",
    "start": "654180",
    "end": "660900"
  },
  {
    "text": "provided if you're running a contain so if you're running a Windows container we have an SMB server that ends up being",
    "start": "660900",
    "end": "666970"
  },
  {
    "text": "exposed to that hyper-v container or for a Linux container we have a plan nine file server that's exposed it's also",
    "start": "666970",
    "end": "673660"
  },
  {
    "text": "worth noting that hyper-v has two generations of virtual machines and you select what generation you want when you",
    "start": "673660",
    "end": "680590"
  },
  {
    "text": "create the virtual machine generation one VMs have a significant amount of",
    "start": "680590",
    "end": "685600"
  },
  {
    "text": "emulated devices exposed to them whereas generation two VMs have almost no emulated devices exposed to them and",
    "start": "685600",
    "end": "692140"
  },
  {
    "text": "pretty much exclusively use para virtualized devices some of these services are also not mandatory under",
    "start": "692140",
    "end": "699370"
  },
  {
    "text": "any hyper-v configuration so live migration is an example of a service that hyper-v can provide to a guest but",
    "start": "699370",
    "end": "706690"
  },
  {
    "text": "doesn't necessarily mean to if you're never gonna live migrate the guest then that is just not attack surface so",
    "start": "706690",
    "end": "716650"
  },
  {
    "start": "714000",
    "end": "748000"
  },
  {
    "text": "hyper-v really is designed with the principle of least privilege in mind as I noted before the hypervisor itself",
    "start": "716650",
    "end": "723010"
  },
  {
    "text": "doesn't really have a whole lot of functionality in it especially from the guest to host perspective we put all of",
    "start": "723010",
    "end": "729160"
  },
  {
    "text": "that functionality into the root partition where possible and when we're looking at where we put it in the root",
    "start": "729160",
    "end": "734530"
  },
  {
    "text": "partition we prefer to put functionality in user mode unless we can't for either performance or just architectural",
    "start": "734530",
    "end": "741220"
  },
  {
    "text": "reasons but as a guiding principle we always try to put code in user mode I",
    "start": "741220",
    "end": "747000"
  },
  {
    "text": "thought it would be useful to give you a more componentized view of where some of this attack surface lives in hyper-v",
    "start": "747000",
    "end": "754080"
  },
  {
    "start": "748000",
    "end": "1059000"
  },
  {
    "text": "hyper-v is split but on the the root partition is split between kernel mode and user mode components in the kernel",
    "start": "754080",
    "end": "760990"
  },
  {
    "text": "we have the VM switch which provides paravirtualized high speed networking and we have the store of ESP and there's",
    "start": "760990",
    "end": "767440"
  },
  {
    "text": "a couple other drivers but they all chained up to store VSP that end up providing para virtualized",
    "start": "767440",
    "end": "772720"
  },
  {
    "text": "high speed storage we also have our para virtualized PCI stack in the kernel",
    "start": "772720",
    "end": "777940"
  },
  {
    "text": "which is there mainly for architectural reasons the pci stack is actually not",
    "start": "777940",
    "end": "782950"
  },
  {
    "text": "usually used for virtual machines it's it's mainly there to support scenarios",
    "start": "782950",
    "end": "787990"
  },
  {
    "text": "such as SR IO V where you might have a piece of hardware is virtualization aware and you want to",
    "start": "787990",
    "end": "795079"
  },
  {
    "text": "attach a virtual function from that hardware directly into a virtual machine that's the kind of functionality that VP",
    "start": "795079",
    "end": "803119"
  },
  {
    "text": "CI supports then we have the VM bus and we're going to talk more about the VMS a",
    "start": "803119",
    "end": "808459"
  },
  {
    "text": "little bit later but VMs is the high speed communication channel that paravirtualized devices use to",
    "start": "808459",
    "end": "814429"
  },
  {
    "text": "communicate between the guests and the hosts we have Wynn HD r dot sis which is",
    "start": "814429",
    "end": "820249"
  },
  {
    "text": "the kernel hypervisor interface and this is effectively the kernel 32 of the",
    "start": "820249",
    "end": "825709"
  },
  {
    "text": "hypervisor world it just contains functions that wrap hyper calls so that it's more convenient to do hyper calls",
    "start": "825709",
    "end": "832789"
  },
  {
    "text": "and last but certainly not least we have the virtualization infrastructure driver or the vid the vid is a pretty important",
    "start": "832789",
    "end": "840979"
  },
  {
    "text": "component for hyper-v but it doesn't actually contain an incredible amount of direct attack surface the vid is the",
    "start": "840979",
    "end": "847789"
  },
  {
    "text": "primary driver in hyper-v that communicates with the hypervisor itself so if you need to create a new virtual",
    "start": "847789",
    "end": "854660"
  },
  {
    "text": "machine it's ultimately going to be the vid that makes the hyper calls to the hypervisor to tell it to make that",
    "start": "854660",
    "end": "860869"
  },
  {
    "text": "virtualmin that that new virtual machine the vid will be responsible for depositing physical memory into those",
    "start": "860869",
    "end": "867799"
  },
  {
    "text": "partitions so that the virtual machines have physical memory they can use to run the vid is also responsible for doing",
    "start": "867799",
    "end": "873919"
  },
  {
    "text": "things like registering with the hypervisor that some user mode component wants to receive notifications when a",
    "start": "873919",
    "end": "880249"
  },
  {
    "text": "particular i/o port is accessed so all of this state keeping is really done in",
    "start": "880249",
    "end": "885410"
  },
  {
    "text": "the vid even though the vid isn't really direct attack surface now on the user",
    "start": "885410",
    "end": "890869"
  },
  {
    "text": "mode side of things hyper-v has a number of processes that run but from the guest a host attack surface perspective",
    "start": "890869",
    "end": "897350"
  },
  {
    "text": "there's only one process that's super super important and that is the VM worker process or VM wp1 really cool",
    "start": "897350",
    "end": "906519"
  },
  {
    "text": "characteristic of the VM worker process is that there is one worker process per",
    "start": "906519",
    "end": "911929"
  },
  {
    "text": "virtual machine running on the system and what this means is that if you manage to find a denial of service bug",
    "start": "911929",
    "end": "918739"
  },
  {
    "text": "in code that's in the VM worker process you'll be able to crash the VM worker process but you won't be able to crash",
    "start": "918739",
    "end": "926870"
  },
  {
    "text": "the entire host operating system which means that that denial-of-service bug will only denial-of-service your VM it's",
    "start": "926870",
    "end": "934970"
  },
  {
    "text": "effectively a self boss it doesn't affect anyone else running on the system so that's one great reason that we",
    "start": "934970",
    "end": "940160"
  },
  {
    "text": "really like to put code in the VM worker process it makes the whole system more robust now inside of the VM worker",
    "start": "940160",
    "end": "946550"
  },
  {
    "text": "process is where basically everything lives that hasn't been explicitly called out as either being a hypervisor or",
    "start": "946550",
    "end": "953360"
  },
  {
    "text": "kernel mode component this is where all of the virtual devices live this is",
    "start": "953360",
    "end": "958460"
  },
  {
    "text": "where all of the integration components live this is where if you're running from container this is where the SMB",
    "start": "958460",
    "end": "963890"
  },
  {
    "text": "server or plan nine file server lives and then there's also a bunch of what I would just characterize as general",
    "start": "963890",
    "end": "970010"
  },
  {
    "text": "machinery that runs inside of the worker process this is stuff that maybe makes a",
    "start": "970010",
    "end": "975740"
  },
  {
    "text": "V devs life easier for example if a virtual device wants to register for",
    "start": "975740",
    "end": "981440"
  },
  {
    "text": "notifications when a particular IO port is hit that virtual device will call into this sub component in the worker",
    "start": "981440",
    "end": "988820"
  },
  {
    "text": "process called the VND and the VM D will ultimately communicate with the vid in",
    "start": "988820",
    "end": "994520"
  },
  {
    "text": "the draw in the kernel and tell the vid that it wants to have this notification made so by doing this the virtual",
    "start": "994520",
    "end": "1003339"
  },
  {
    "text": "devices don't need to all individually talk directly to kernel components directly to the vid they can just talk",
    "start": "1003339",
    "end": "1009580"
  },
  {
    "text": "to the central component in the worker process and it will do things for them now some of you might be wondering this",
    "start": "1009580",
    "end": "1015700"
  },
  {
    "text": "is all great but how do I actually talk to these various components how do I talk to the VM switch how do I know how",
    "start": "1015700",
    "end": "1022360"
  },
  {
    "text": "to speak the VM bus protocol and I've got awesome news for you since Linux the",
    "start": "1022360",
    "end": "1027610"
  },
  {
    "text": "Linux operating system can run as an enlightened hyper-v guest all of the",
    "start": "1027610",
    "end": "1033970"
  },
  {
    "text": "source code for this stuff the client-side source code is checked into the Linux source tree so if you want to know what a VM bus",
    "start": "1033970",
    "end": "1040900"
  },
  {
    "text": "client looks like and you want to know how that protocol works you can just go and look in the Linux source tree and",
    "start": "1040900",
    "end": "1046060"
  },
  {
    "text": "the VM bus protocol is implemented there if you want to know how to talk to the VM switch you can just go and look in",
    "start": "1046060",
    "end": "1051490"
  },
  {
    "text": "the Linux source tree and we have a VM switch client that's into Linux so it's all there waiting for",
    "start": "1051490",
    "end": "1056889"
  },
  {
    "text": "you all right now as much as I would",
    "start": "1056889",
    "end": "1062380"
  },
  {
    "start": "1059000",
    "end": "1233000"
  },
  {
    "text": "love to just describe every single different component that hyper-v has that the tax surface we don't have time",
    "start": "1062380",
    "end": "1067990"
  },
  {
    "text": "to do that and so I thought it would be more useful to walk everyone through what some of these communication",
    "start": "1067990",
    "end": "1073870"
  },
  {
    "text": "channels look like between the guest and the host so that you can use this information to go and find all of the",
    "start": "1073870",
    "end": "1080320"
  },
  {
    "text": "different pieces of attack surface in hyper-v so we'll start with the hypervisor but we're not going to spend too much time here because as I've said",
    "start": "1080320",
    "end": "1086769"
  },
  {
    "text": "before this is not where most of the interesting attack surfaces the hypervisors most direct communication",
    "start": "1086769",
    "end": "1094000"
  },
  {
    "text": "method with the guests are hyper calls there are two ways really that hyper calls can have parameters pass to them",
    "start": "1094000",
    "end": "1101080"
  },
  {
    "text": "you can either put the parameters directly in registers or you can pass a address a guest physical address to some",
    "start": "1101080",
    "end": "1109480"
  },
  {
    "text": "fifth guess physical memory and the hypervisor will go and do processing on that physical memory there's a very",
    "start": "1109480",
    "end": "1117399"
  },
  {
    "text": "limited set of hyper calls that are exposed to guests it's mainly to do things like faster enlightened TLB flush",
    "start": "1117399",
    "end": "1125789"
  },
  {
    "text": "but there's no hyper calls that would do like device emulation for example you",
    "start": "1125789",
    "end": "1131620"
  },
  {
    "text": "can also communicate with the hypervisor somewhat indirectly through faults so if your virtual machine has a triple fault",
    "start": "1131620",
    "end": "1137830"
  },
  {
    "text": "that will end up being handled by the hypervisor if there is an extended page",
    "start": "1137830",
    "end": "1142899"
  },
  {
    "text": "table fault you try to access some physical memory that is not mapped in the EPT that will trigger an apt fault",
    "start": "1142899",
    "end": "1149919"
  },
  {
    "text": "and this is actually how mm IO can be implemented in the hypervisor the hypervisor can see that you're",
    "start": "1149919",
    "end": "1155169"
  },
  {
    "text": "attempting to access some physical memory page that is marked as being an MMA o emulated range and so when it",
    "start": "1155169",
    "end": "1162639"
  },
  {
    "text": "handles that fault it knows oh I actually just need to pass this on to the vid to do processing you can also",
    "start": "1162639",
    "end": "1168639"
  },
  {
    "text": "indirectly communicate with the hypervisor by trying to execute certain instructions like CPU ID or as mentioned",
    "start": "1168639",
    "end": "1175210"
  },
  {
    "text": "before the in out instruction for doing io port reads and writes the hypervisor will intercept attempts to execute those",
    "start": "1175210",
    "end": "1181149"
  },
  {
    "text": "instructions and will end up emulating them either directly in the hypervisor or it will pass it to the hosts do emulation similarly you",
    "start": "1181149",
    "end": "1189340"
  },
  {
    "text": "can do the same thing for certain privilege register accesses so you can intercept guest attempts to write to the",
    "start": "1189340",
    "end": "1195940"
  },
  {
    "text": "cr4 register for example or to MSRs and the last one I'm going to mention just because you might run into this and",
    "start": "1195940",
    "end": "1202510"
  },
  {
    "text": "end up wondering what the heck you're looking at our overlay pages an overlay page is not really guest a host attack",
    "start": "1202510",
    "end": "1209380"
  },
  {
    "text": "surface it's just a way that the the host or the hypervisor can forcibly map",
    "start": "1209380",
    "end": "1214960"
  },
  {
    "text": "some page of memory into the host or in to the guests physical address space one",
    "start": "1214960",
    "end": "1220780"
  },
  {
    "text": "reason that hyper-v does this is it will map in a page into all of the guests",
    "start": "1220780",
    "end": "1225910"
  },
  {
    "text": "which contains the instructions that you need to execute to make a hyper call",
    "start": "1225910",
    "end": "1232860"
  },
  {
    "start": "1233000",
    "end": "1319000"
  },
  {
    "text": "alright let's move on and talk about kernel-mode communication channels by",
    "start": "1233580",
    "end": "1239590"
  },
  {
    "text": "far the most important communication channel for kernel mode is the VM bus and once again we're going to talk about",
    "start": "1239590",
    "end": "1245950"
  },
  {
    "text": "this in just a couple of slides in more detail but suffice to say this is a high-speed communication channel and",
    "start": "1245950",
    "end": "1252070"
  },
  {
    "text": "this is used by all of the virtualization service providers that live in the kernel",
    "start": "1252070",
    "end": "1257490"
  },
  {
    "text": "there are also extended hyper calls an extended hyper call is simply a hyper",
    "start": "1257490",
    "end": "1262990"
  },
  {
    "text": "call that the hypervisor forwards directly down to the vid to handle there's very few of these and they don't",
    "start": "1262990",
    "end": "1269680"
  },
  {
    "text": "do things that are super interesting but you might run into these you might want to look at them so I'm noting them here we also have apertures and these are",
    "start": "1269680",
    "end": "1277540"
  },
  {
    "text": "used primarily by user modes so I'm going to talk about them more on the next slide but it's also possible to use them in the kernel and the kernel can",
    "start": "1277540",
    "end": "1285760"
  },
  {
    "text": "also be communicated with somewhat indirectly once again through intercept handling so if the hypervisor receives",
    "start": "1285760",
    "end": "1292870"
  },
  {
    "text": "an intercept for some instruction that it needs to emulate for example like an i/o port right it will forward that on",
    "start": "1292870",
    "end": "1299290"
  },
  {
    "text": "down to the vid in the kernel and the vid will look at that and decide where",
    "start": "1299290",
    "end": "1304660"
  },
  {
    "text": "it needs to be forwarded to or if it just just be rejected it's a decision maker so it's not really direct attack",
    "start": "1304660",
    "end": "1310990"
  },
  {
    "text": "surface but you will end up triggering code paths in the and so it ends up being somewhat of a",
    "start": "1310990",
    "end": "1316630"
  },
  {
    "text": "communication channel and lastly we have user mode now user mode is where all of",
    "start": "1316630",
    "end": "1323980"
  },
  {
    "start": "1319000",
    "end": "1498000"
  },
  {
    "text": "the device simulation happens so we end up having a lot more direct communication channels in user mode",
    "start": "1323980",
    "end": "1329590"
  },
  {
    "text": "components the first one is IO quartz user mode components can register that",
    "start": "1329590",
    "end": "1335890"
  },
  {
    "text": "they want to receive notifications when particular IO ports are read or written and they can then use that to do",
    "start": "1335890",
    "end": "1343390"
  },
  {
    "text": "Hardware emulation and similarly components can register for",
    "start": "1343390",
    "end": "1348580"
  },
  {
    "text": "notifications when particular physical addresses guest physical addresses are read or written to and they can use that",
    "start": "1348580",
    "end": "1355539"
  },
  {
    "text": "to emulate mm IO access then we have the VM bus the VM bus is also used by user",
    "start": "1355539",
    "end": "1362860"
  },
  {
    "text": "mode components although it had the access happens to either VM bus pipes or VM bus sockets which we'll talk about in",
    "start": "1362860",
    "end": "1369280"
  },
  {
    "text": "a second then we have apertures in user mode now an aperture is how we describe",
    "start": "1369280",
    "end": "1376289"
  },
  {
    "text": "mapping a guest physical address into the virtual address space of the host so",
    "start": "1376289",
    "end": "1383020"
  },
  {
    "text": "in the case of user mode you map some guest physical address into the VM worker processes virtual address space",
    "start": "1383020",
    "end": "1389260"
  },
  {
    "text": "and this allows you to read and write that guest data now you need to be super",
    "start": "1389260",
    "end": "1394570"
  },
  {
    "text": "careful when you do this because the memory is still mapped inside of the",
    "start": "1394570",
    "end": "1399789"
  },
  {
    "text": "guest which means that while you're doing processing on that memory in the host the guest can be going and",
    "start": "1399789",
    "end": "1405580"
  },
  {
    "text": "modifying that memory from underneath you so this is an area where if you're not careful you can end up with dangerous double fetch conditions and",
    "start": "1405580",
    "end": "1412809"
  },
  {
    "text": "the last one we have here are read and write notifications now when I first saw",
    "start": "1412809",
    "end": "1418960"
  },
  {
    "text": "these I was fairly confused as to what the difference was between a read and write notification and just doing MMI oh",
    "start": "1418960",
    "end": "1426000"
  },
  {
    "text": "there's one key difference here and that is that while read and write notifications do allow you to get",
    "start": "1426000",
    "end": "1431919"
  },
  {
    "text": "notified when memory is read or written to just like MMI oh it does not advance",
    "start": "1431919",
    "end": "1437200"
  },
  {
    "text": "the instruction pointer which means that you cannot do emulation you cannot provide the guest with some value that",
    "start": "1437200",
    "end": "1444669"
  },
  {
    "text": "they are trying to read you just simply notified that the guest is indeed reading from this page of memory",
    "start": "1444669",
    "end": "1449830"
  },
  {
    "text": "and one reason why you might want to use functionality like this is if you're doing live migration you're copying all",
    "start": "1449830",
    "end": "1456370"
  },
  {
    "text": "of the guests physical memory over the wire to another server and at some point you just fully treat you just transfer",
    "start": "1456370",
    "end": "1462550"
  },
  {
    "text": "execution over to that host but the virtual machine is running while you're copying this memory over and so hyper-v",
    "start": "1462550",
    "end": "1469120"
  },
  {
    "text": "needs to be aware if some page of memory changes in between that copy operation",
    "start": "1469120",
    "end": "1474370"
  },
  {
    "text": "and execution being transferred over to the new host and so hyper-v can place a",
    "start": "1474370",
    "end": "1479740"
  },
  {
    "text": "write notification on a block of memory after it's been copied and then hyper-v can mark that memory as dirty if it gets",
    "start": "1479740",
    "end": "1487600"
  },
  {
    "text": "written to and then hyper-v knows oh before I transfer execution over I need to recopy these pages of memory",
    "start": "1487600",
    "end": "1493780"
  },
  {
    "text": "so that's why we have read and write notifications all right now I promised",
    "start": "1493780",
    "end": "1499870"
  },
  {
    "start": "1498000",
    "end": "1691000"
  },
  {
    "text": "that we would talk about VM bus and that's what we're gonna do now VM bus is a communication channel that is built",
    "start": "1499870",
    "end": "1506080"
  },
  {
    "text": "around shared memory it all starts with the host making a channel offer to the",
    "start": "1506080",
    "end": "1511840"
  },
  {
    "text": "guest when the guest accepts that channel offer the guest will indicate to the host a set of guest physical",
    "start": "1511840",
    "end": "1518980"
  },
  {
    "text": "addresses that the guest would like to use to establish that VM bus channel the",
    "start": "1518980",
    "end": "1524920"
  },
  {
    "text": "host will take those guest physical addresses and map them into its virtual address space and so now the situation",
    "start": "1524920",
    "end": "1531640"
  },
  {
    "text": "you're in is one where both the guest and the host have a virtual address",
    "start": "1531640",
    "end": "1537160"
  },
  {
    "text": "range that map's the exact same physical memory so the guest can write some data",
    "start": "1537160",
    "end": "1542620"
  },
  {
    "text": "into this memory and then signal to the host that there's a packet waiting and the host can go and directly access that",
    "start": "1542620",
    "end": "1548860"
  },
  {
    "text": "packet once again the Linux integration drivers fully implement the VM bus so if",
    "start": "1548860",
    "end": "1554650"
  },
  {
    "text": "you want the nitty-gritty details of how the protocol works you can go check it out there however you don't actually",
    "start": "1554650",
    "end": "1560080"
  },
  {
    "text": "need to know how the protocol works to attack components that use VM bus because you can just go and modify the",
    "start": "1560080",
    "end": "1567190"
  },
  {
    "text": "client implementation for the components like for virtual storage you can modify",
    "start": "1567190",
    "end": "1572650"
  },
  {
    "text": "the virtual storage client and the virtual storage client in Linux will just use VM bus automatically for you",
    "start": "1572650",
    "end": "1578050"
  },
  {
    "text": "you can just ignore the implementation details of it now no components in",
    "start": "1578050",
    "end": "1583720"
  },
  {
    "text": "hyper-v actually directly use VM bus they all go through abstraction layers in the case of the kernel they go",
    "start": "1583720",
    "end": "1590169"
  },
  {
    "text": "through the kernel mode client library or km CL and in the case of user mode they go through either the embassy i p--",
    "start": "1590169",
    "end": "1596889"
  },
  {
    "text": "Saur vm bus sockets km CL which is what",
    "start": "1596889",
    "end": "1603100"
  },
  {
    "text": "all of the virtualization service providers use is really built around callbacks when you establish a PM bus",
    "start": "1603100",
    "end": "1610269"
  },
  {
    "text": "channel you provide it with a number of function pointers to call when certain events happen and predictably one of",
    "start": "1610269",
    "end": "1617229"
  },
  {
    "text": "those events that can happen is you've just received a message from the other end of the KMC l p-- pipe now when that message is received",
    "start": "1617229",
    "end": "1626229"
  },
  {
    "text": "even though the message came in over the vm bus inside of this shared memory region we actually copy that data",
    "start": "1626229",
    "end": "1633639"
  },
  {
    "text": "outside of the shared memory region and into the kernel pool before delivering it to the KMC l client the reason we do",
    "start": "1633639",
    "end": "1641229"
  },
  {
    "text": "this is because we want to avoid double fetch conditions so we make a safe copy of the data before passing it along",
    "start": "1641229",
    "end": "1647609"
  },
  {
    "text": "however there is one way that this can be done unsafely and that is with the external data mechanism guests when they",
    "start": "1647609",
    "end": "1657399"
  },
  {
    "text": "send a vm bus packet over the wire can attach a GPA dl which is that guest",
    "start": "1657399",
    "end": "1662830"
  },
  {
    "text": "physical address descriptor list to the packet that they're sending this is just it contains a list of additional guest",
    "start": "1662830",
    "end": "1669849"
  },
  {
    "text": "physical addresses that contain additional data for processing the host has to map this GPA L explicitly but",
    "start": "1669849",
    "end": "1677830"
  },
  {
    "text": "once it Maps it and starts accessing it the host needs to be very careful to avoid double fetch situations because",
    "start": "1677830",
    "end": "1684429"
  },
  {
    "text": "that memory is mapped in both the guest and the host at the same time now at the",
    "start": "1684429",
    "end": "1692559"
  },
  {
    "start": "1691000",
    "end": "1741000"
  },
  {
    "text": "end of this slide deck in the appendix and I'm going to publish the slides we have gone and documented a whole bunch",
    "start": "1692559",
    "end": "1698649"
  },
  {
    "text": "of the different interfaces that hyper-v components use to do things like make channel offers do i/o port reads and",
    "start": "1698649",
    "end": "1704830"
  },
  {
    "text": "writes etc so that you know what sort of symbols to go and look for if you want to find this attack surface this right",
    "start": "1704830",
    "end": "1711580"
  },
  {
    "text": "here is one example of how can CL is established this",
    "start": "1711580",
    "end": "1717400"
  },
  {
    "text": "function highlighted in yellow is the function signature for a km CL message",
    "start": "1717400",
    "end": "1722950"
  },
  {
    "text": "received callback and there's two really important parameters here there is the buffer and the buffer length and",
    "start": "1722950",
    "end": "1729400"
  },
  {
    "text": "predictably the buffer is a pointer to guests supplied data so this is fully",
    "start": "1729400",
    "end": "1735160"
  },
  {
    "text": "attacker control and buffer length is the length of that data all right so the",
    "start": "1735160",
    "end": "1745240"
  },
  {
    "start": "1741000",
    "end": "1793000"
  },
  {
    "text": "next channel we're going to talk about are VM bus pipes this is the primary way that user mode components use VM bus VMs",
    "start": "1745240",
    "end": "1753760"
  },
  {
    "text": "pipes once again start with the channel offer there are two functions which I've documented here that are used to make",
    "start": "1753760",
    "end": "1761140"
  },
  {
    "text": "that channel offer and they return a handle to a named to a VM bus pipe the",
    "start": "1761140",
    "end": "1766900"
  },
  {
    "text": "way you interact with the mbus pipes is exactly the same as with normal named pipes on Windows you call a read file",
    "start": "1766900",
    "end": "1773530"
  },
  {
    "text": "and write file or you can use IO completion if you want to do asynchronous operations and that when",
    "start": "1773530",
    "end": "1779410"
  },
  {
    "text": "you're doing the asynchronous operations hyper-v has some helper classes that they tend to use which I've noted here",
    "start": "1779410",
    "end": "1784690"
  },
  {
    "text": "so you'll want to check that out if you're trying to look for components that are using asynchronous VM bus pipes",
    "start": "1784690",
    "end": "1792090"
  },
  {
    "text": "and finally I'm going to talk briefly about IO quartz mm mm IO entry points IO",
    "start": "1792090",
    "end": "1801040"
  },
  {
    "start": "1793000",
    "end": "1901000"
  },
  {
    "text": "ports and mm IO ports once again start with a registration event so the",
    "start": "1801040",
    "end": "1806560"
  },
  {
    "text": "component will either say I want to receive a port notifications for these particular IO ports or I want to receive",
    "start": "1806560",
    "end": "1813340"
  },
  {
    "text": "mmm IO notifications for these particular guest physical address ranges in the case of i/o ports whenever that",
    "start": "1813340",
    "end": "1819970"
  },
  {
    "text": "IO port is read or written to one of these two functions noted here will be called it contains the IO port address",
    "start": "1819970",
    "end": "1825730"
  },
  {
    "text": "the size of the access and a buffer either containing the data being written or a buffer that you need to populate",
    "start": "1825730",
    "end": "1832120"
  },
  {
    "text": "with the data being read and accordingly for MMI oh there's notify functions there notify MMI Oh",
    "start": "1832120",
    "end": "1839550"
  },
  {
    "text": "read notify MMR right which do similar things now every V dev that uses IO",
    "start": "1839550",
    "end": "1845760"
  },
  {
    "text": "courts or mm IO ends up implementing these functions so if you want to find these entry points you can just open up",
    "start": "1845760",
    "end": "1852330"
  },
  {
    "text": "your debugger attach it to VM worker process and do a simple search for any component that has notify IO port read",
    "start": "1852330",
    "end": "1859680"
  },
  {
    "text": "in you know in its symbols and you'll be able to find all of the V devs that",
    "start": "1859680",
    "end": "1864990"
  },
  {
    "text": "implement io port read emulation as an example alright so this wraps up my",
    "start": "1864990",
    "end": "1872130"
  },
  {
    "text": "portion of the talk what I'm hoping that you got from this is that hyper-v has a number of services that it needs to",
    "start": "1872130",
    "end": "1877470"
  },
  {
    "text": "provide to the guest VMs and there's a number of entry points which a guest VM",
    "start": "1877470",
    "end": "1883710"
  },
  {
    "text": "can use to trigger code different code paths in the hyper-v hosts now Nico is",
    "start": "1883710",
    "end": "1889230"
  },
  {
    "text": "going to show us how to apply this knowledge to some real hyper-v bugs that both we and external people have found",
    "start": "1889230",
    "end": "1896390"
  },
  {
    "text": "just to give you examples of how to actually use this information yeah thank",
    "start": "1896390",
    "end": "1902040"
  },
  {
    "text": "you Joe that was just super interesting sorry let's see if we can be a bit more",
    "start": "1902040",
    "end": "1907860"
  },
  {
    "text": "practical No so you know before even we thought about doing that oh we were asking around us",
    "start": "1907860",
    "end": "1913620"
  },
  {
    "text": "why it was so hard to find bugs in hyper-v and one of the most common",
    "start": "1913620",
    "end": "1919710"
  },
  {
    "text": "replies that we have was Nico you don't realize you've got access to your bug",
    "start": "1919710",
    "end": "1925320"
  },
  {
    "text": "database you've got access to our source code we don't even have access to symbols and that's a very good point so",
    "start": "1925320",
    "end": "1931590"
  },
  {
    "text": "I can't tell you today that this is sorted since April this year there are",
    "start": "1931590",
    "end": "1936870"
  },
  {
    "text": "around 40 pdbs available for several 2016 and Windows 10 they don't cover the",
    "start": "1936870",
    "end": "1943890"
  },
  {
    "text": "entire set of components but there's definitely enough for you to start reverse engineering so yes let's do that",
    "start": "1943890",
    "end": "1951660"
  },
  {
    "text": "let's start reverse engineering and let's find bugs so we've selected there's five vulnerabilities",
    "start": "1951660",
    "end": "1958680"
  },
  {
    "text": "why does in part care well first of all there are fixed yeah no I absolutely",
    "start": "1958680",
    "end": "1964890"
  },
  {
    "text": "know talk about something that is unfixed here second as I just talked about the",
    "start": "1964890",
    "end": "1971610"
  },
  {
    "text": "symbols or the affected components here are a piddly so you can actually reverse",
    "start": "1971610",
    "end": "1979679"
  },
  {
    "text": "engineer that that component and figure out what was the initial run ret third",
    "start": "1979679",
    "end": "1985980"
  },
  {
    "text": "some of these bugs have been externally reported and this is great because we",
    "start": "1985980",
    "end": "1991110"
  },
  {
    "text": "can explain you what was the metallurgy of the finder how he managed to find",
    "start": "1991110",
    "end": "1996150"
  },
  {
    "text": "that buggy so you can actually do the same and try to find over issues on last point cursory death bugs are easy to",
    "start": "1996150",
    "end": "2004100"
  },
  {
    "text": "explain we've seen incredibly complicated bugs bed bugs we can't just",
    "start": "2004100",
    "end": "2010670"
  },
  {
    "text": "talk about them here we are too complicated but still if you found them send them to Joe he loved em",
    "start": "2010670",
    "end": "2017320"
  },
  {
    "start": "2017000",
    "end": "2030000"
  },
  {
    "text": "so just to talk about just to take back Joe slides so this is what I'm going to",
    "start": "2017320",
    "end": "2024050"
  },
  {
    "text": "talk about here so two issues in the car and a couple of other issues in in the",
    "start": "2024050",
    "end": "2029540"
  },
  {
    "text": "video the first issues I'm going to present affect a VM switch so Joe",
    "start": "2029540",
    "end": "2035510"
  },
  {
    "start": "2030000",
    "end": "2202000"
  },
  {
    "text": "quickly managed quickly talked about the VM switch before so what is this well it",
    "start": "2035510",
    "end": "2040730"
  },
  {
    "text": "does a lot of thing but in a very few words this is what provide network connectivity to the guest this first",
    "start": "2040730",
    "end": "2047510"
  },
  {
    "text": "issue was found by Peter lavake from Tencent and it's unfortunate for us",
    "start": "2047510",
    "end": "2055760"
  },
  {
    "text": "amazingly simple there is a function in a VM switch that takes string taken from",
    "start": "2055760",
    "end": "2063378"
  },
  {
    "text": "a packet sent by August and this function just assumes that the strings is null terminated so what happens if",
    "start": "2063379",
    "end": "2071320"
  },
  {
    "text": "you just sent a special packet with a string without any inner character well",
    "start": "2071320",
    "end": "2078648"
  },
  {
    "text": "if you put the special flags on VM switch then as a function we just run",
    "start": "2078649",
    "end": "2084980"
  },
  {
    "text": "out of bounds while processing that string and it will just crash the Turner that's a great bird and for that like",
    "start": "2084980",
    "end": "2092330"
  },
  {
    "text": "this we would pay right now $15,000 however we would pay this if you can",
    "start": "2092330",
    "end": "2098570"
  },
  {
    "text": "give us proof of concept so what did Peter do at that moment where he as you mentioned he",
    "start": "2098570",
    "end": "2105690"
  },
  {
    "text": "used limit line of drivers so he first figure out how things worked there and",
    "start": "2105690",
    "end": "2113100"
  },
  {
    "text": "then he quickly put together a phasor and since as I just told you this issue",
    "start": "2113100",
    "end": "2119580"
  },
  {
    "text": "was so simple he after a few iterations he managed to hit the code and quickly",
    "start": "2119580",
    "end": "2125010"
  },
  {
    "text": "figure out what was going on so what he provided us was a function that we could",
    "start": "2125010",
    "end": "2130560"
  },
  {
    "text": "just put inside VMs which code sorry the Linux drivers and just run if",
    "start": "2130560",
    "end": "2137490"
  },
  {
    "text": "config from a Linux VM and that would send a malicious packet and crash that",
    "start": "2137490",
    "end": "2143310"
  },
  {
    "text": "was a bread box so thanks Peter for submitting that to us if you try to reverse engineer that",
    "start": "2143310",
    "end": "2150150"
  },
  {
    "text": "bug and for example extra nab function",
    "start": "2150150",
    "end": "2156120"
  },
  {
    "text": "you won't see a direct relationship with the VM bus this is because the packet is process is processed a synchronously so",
    "start": "2156120",
    "end": "2163860"
  },
  {
    "text": "VMs which takes that are on this packet it put it into a tooth and then only",
    "start": "2163860",
    "end": "2168960"
  },
  {
    "text": "when it have times it will process it so look at the stack trace and if you want",
    "start": "2168960",
    "end": "2174720"
  },
  {
    "text": "to debug it put the breakpoints there and you will see what's going on just to conclude on VM switch there were three",
    "start": "2174720",
    "end": "2182280"
  },
  {
    "text": "of our bugs from by costia coaching ski from Google two years and a half ago they are described the source code so",
    "start": "2182280",
    "end": "2189810"
  },
  {
    "text": "proof-of-concept sorry is there it's available on the internet and also go",
    "start": "2189810",
    "end": "2195900"
  },
  {
    "text": "check out Jordans talk tomorrow it's on VN switch and it's great let's move on",
    "start": "2195900",
    "end": "2203730"
  },
  {
    "start": "2202000",
    "end": "2394000"
  },
  {
    "text": "to another kernel component V PCI what's that thing Joe quickly talked",
    "start": "2203730",
    "end": "2208770"
  },
  {
    "text": "about it so basically you've got your guest and you want the guests to talk and to serve the PCI components it's",
    "start": "2208770",
    "end": "2215670"
  },
  {
    "text": "going to use that component so for example you want the guests to use the earth there's your very latest",
    "start": "2215670",
    "end": "2223220"
  },
  {
    "text": "graphic card this is a component that is going to be used so the rabbit child I'm",
    "start": "2223220",
    "end": "2228900"
  },
  {
    "text": "going to talk about now was founded by or the virtualization security team it's an",
    "start": "2228900",
    "end": "2235810"
  },
  {
    "text": "internal team at Microsoft so we are hackers so the V PCI the PCI thing is",
    "start": "2235810",
    "end": "2245500"
  },
  {
    "text": "handled by the PCI via speed Otzi's but we are interested by on three points",
    "start": "2245500",
    "end": "2250810"
  },
  {
    "text": "we're interested to know how the guest and the host communicates in this case we are using a function called channel",
    "start": "2250810",
    "end": "2258880"
  },
  {
    "text": "process packet which is a big switch so suggest send a packet to host the packet",
    "start": "2258880",
    "end": "2266740"
  },
  {
    "text": "is processed and a response is returned to the guest for sarin packets and especially here the interrupt message",
    "start": "2266740",
    "end": "2274630"
  },
  {
    "text": "packet you could enter a certain code path where the guest was supposed to",
    "start": "2274630",
    "end": "2279790"
  },
  {
    "text": "return to the host was suppose return an object back to the guest if you look at",
    "start": "2279790",
    "end": "2285910"
  },
  {
    "text": "that code the first thing that you might notice is that the return packets the",
    "start": "2285910",
    "end": "2291850"
  },
  {
    "text": "return buffer seems to be correctly initialized however what is not what is",
    "start": "2291850",
    "end": "2297460"
  },
  {
    "text": "not done here is this translate this translated message object which is a",
    "start": "2297460",
    "end": "2304330"
  },
  {
    "text": "stack buffer this one is not correctly initialized as you can see if you",
    "start": "2304330",
    "end": "2309430"
  },
  {
    "text": "quickly reverse engineer the function that is supposed to engine to initialize it you will see that this function only",
    "start": "2309430",
    "end": "2316060"
  },
  {
    "text": "initialize it if no errors upon so here the idea is to cause an error to during",
    "start": "2316060",
    "end": "2324010"
  },
  {
    "text": "that function which we return status and the function won't initialize this",
    "start": "2324010",
    "end": "2329560"
  },
  {
    "text": "buffer so in VL this results in making 10 bytes 16 bytes in decimal of stack",
    "start": "2329560",
    "end": "2336610"
  },
  {
    "text": "data from the kernel to the guest for a bug like this we would pay $25,000 but",
    "start": "2336610",
    "end": "2344110"
  },
  {
    "text": "you need to provide us with a proof of concept this is very important so here",
    "start": "2344110",
    "end": "2349720"
  },
  {
    "text": "what I suggest you you can you can always use a rhino's drivers this is a",
    "start": "2349720",
    "end": "2354940"
  },
  {
    "text": "this is perfectly documented you can click if you're out how they work and",
    "start": "2354940",
    "end": "2360210"
  },
  {
    "text": "and yeah and try to repair your own packet however what I adjust you here is",
    "start": "2360210",
    "end": "2365400"
  },
  {
    "text": "just to put some breakpoint in fgo communicate protocol in a in the inner",
    "start": "2365400",
    "end": "2371820"
  },
  {
    "text": "guest VM this is where the handshake happen with V PCI so what you can do is",
    "start": "2371820",
    "end": "2377880"
  },
  {
    "text": "just look at this function and see how the packet is exchanged and then you can",
    "start": "2377880",
    "end": "2383280"
  },
  {
    "text": "just put your phaser and Anya and try to get some bugs oh this is this was a good",
    "start": "2383280",
    "end": "2391290"
  },
  {
    "text": "bug so thanks for that team for finding it we stay with VM bus but this time",
    "start": "2391290",
    "end": "2397020"
  },
  {
    "start": "2394000",
    "end": "2425000"
  },
  {
    "text": "we've moved to the worker process it's important to notice that the VM bus doesn't only give data to the kernel it",
    "start": "2397020",
    "end": "2405150"
  },
  {
    "text": "also provide data to the worker process so this bug I'm going to talk about was",
    "start": "2405150",
    "end": "2410970"
  },
  {
    "text": "found in the synthetic video driver so the synthetic video component sorry so",
    "start": "2410970",
    "end": "2417990"
  },
  {
    "text": "what is that thing about it's basically what is handling the screen resolutions to to to the guest in so this component",
    "start": "2417990",
    "end": "2427800"
  },
  {
    "start": "2425000",
    "end": "2558000"
  },
  {
    "text": "this particular component is under envy VM UI devices that BLM as well as other",
    "start": "2427800",
    "end": "2434400"
  },
  {
    "text": "components so good check this out symbols are there and again we are hacker were interested by communication",
    "start": "2434400",
    "end": "2441210"
  },
  {
    "text": "so here it's very easy to add it it really varies a function which is called on mrs. received it's as its name",
    "start": "2441210",
    "end": "2447510"
  },
  {
    "text": "indicates it received a message from the guest processing it and then return a",
    "start": "2447510",
    "end": "2453270"
  },
  {
    "text": "response to to the guest the bug here",
    "start": "2453270",
    "end": "2458400"
  },
  {
    "text": "was happening under certain condition it was possible to reach a certain code",
    "start": "2458400",
    "end": "2464940"
  },
  {
    "text": "path with specific Borean sent to files where an object will be initialized on",
    "start": "2464940",
    "end": "2470550"
  },
  {
    "text": "the hip but only part of its field would be would be initialized so in the end as",
    "start": "2470550",
    "end": "2476400"
  },
  {
    "text": "you can see here you locate almost 90 bytes in X on on the heap and only",
    "start": "2476400",
    "end": "2483190"
  },
  {
    "text": "initialize nine of them which would lead to a massive memory leak for Berg like",
    "start": "2483190",
    "end": "2488920"
  },
  {
    "text": "this but like this if you can find repro we would give you 15,000 USD and if you retry to",
    "start": "2488920",
    "end": "2497590"
  },
  {
    "text": "reverse-engineer a patch you'll see that there was another variant from that variability in another function and so",
    "start": "2497590",
    "end": "2505390"
  },
  {
    "text": "if you had done this River at this this research you could have easily knitted 30,000 how to to write a part for that",
    "start": "2505390",
    "end": "2514330"
  },
  {
    "text": "again it's easy also communication is done in hyper-v do lattice so the best",
    "start": "2514330",
    "end": "2520240"
  },
  {
    "text": "way for you would be just put a break point where the handshake happens and",
    "start": "2520240",
    "end": "2525450"
  },
  {
    "text": "just try to replay your own packets one thing I haven't said is that we don't",
    "start": "2525450",
    "end": "2530710"
  },
  {
    "text": "only need we don't necessary need a driver you could you can always send us",
    "start": "2530710",
    "end": "2537900"
  },
  {
    "text": "windy bugs for example for example this variability was very simple to trigger",
    "start": "2537900",
    "end": "2542920"
  },
  {
    "text": "so you could for example provide us with a script that would just alter some fields in memory and that would be",
    "start": "2542920",
    "end": "2549610"
  },
  {
    "text": "enough for us we just need something that is easy to reproduce as long as it works as long as it can save time you'll",
    "start": "2549610",
    "end": "2556840"
  },
  {
    "text": "get the bounty so now let's move to the",
    "start": "2556840",
    "end": "2562120"
  },
  {
    "start": "2558000",
    "end": "2660000"
  },
  {
    "text": "intercepted IO run our abilities Joe I believe you want to talk about this one",
    "start": "2562120",
    "end": "2567160"
  },
  {
    "text": "that's raw baby yeah so this was an interesting vulnerability in handling mm IO amulet emulation now as we talked",
    "start": "2567160",
    "end": "2574630"
  },
  {
    "text": "about before when a function receives a anime o read request that virtual device",
    "start": "2574630",
    "end": "2581050"
  },
  {
    "text": "is responsible for providing data back to the guest in response to that read",
    "start": "2581050",
    "end": "2586180"
  },
  {
    "text": "request and while this function if you look at the definition of prep that I",
    "start": "2586180",
    "end": "2591370"
  },
  {
    "text": "provided earlier has a return code indicating if it succeeded or failed it turns out that that return code is",
    "start": "2591370",
    "end": "2598030"
  },
  {
    "text": "ignored you always must populate the read buffer because no matter what the",
    "start": "2598030",
    "end": "2604330"
  },
  {
    "text": "contents of that read buffer get copied back to the virtual machine and so this vulnerability actually manifested itself",
    "start": "2604330",
    "end": "2611260"
  },
  {
    "text": "in a couple of different virtual devices where they would have air conditions this air-conditioned here which is",
    "start": "2611260",
    "end": "2617320"
  },
  {
    "text": "difficult to read but effectively what happens is the virtual device says if the number of bytes being read is not",
    "start": "2617320",
    "end": "2624850"
  },
  {
    "text": "four bytes then return and it doesn't populate that buffer so if you issued an",
    "start": "2624850",
    "end": "2631060"
  },
  {
    "text": "8 byte mm IO read request to this virtual device then you would get 8",
    "start": "2631060",
    "end": "2636370"
  },
  {
    "text": "uninitialized bytes of stack memory returned to you and it was actually kind of nice it turned out that in this case",
    "start": "2636370",
    "end": "2642160"
  },
  {
    "text": "the memory that would be returned was very consistently a pointer to an object on the heap so that'd be pretty useful",
    "start": "2642160",
    "end": "2648610"
  },
  {
    "text": "if you were trying to use this to break a SLR and once again a bug like this if",
    "start": "2648610",
    "end": "2654880"
  },
  {
    "text": "you find it and report it to us will net you $15,000 yeah great bug",
    "start": "2654880",
    "end": "2661600"
  },
  {
    "text": "so let's book we're going to talk about is actually your favorite so this one happened in the storage component the",
    "start": "2661600",
    "end": "2667360"
  },
  {
    "text": "storage component is used by for examples of floppy or any ID any ID",
    "start": "2667360",
    "end": "2674170"
  },
  {
    "text": "device so this component specific reasons on the reports one of 0 to 1 F 7",
    "start": "2674170",
    "end": "2683050"
  },
  {
    "text": "and frame 0 2 and 2/3 of 0 F 7 I'm staying I stick with the first ranch",
    "start": "2683050",
    "end": "2688090"
  },
  {
    "text": "here so supports 1 F 1 to 1 F 7 are",
    "start": "2688090",
    "end": "2694440"
  },
  {
    "text": "explicitly used to to change the internal states of a component but",
    "start": "2694440",
    "end": "2699850"
  },
  {
    "text": "support 1 F 0 is doing something completely different it's actually writing data to a buffer under but here",
    "start": "2699850",
    "end": "2707590"
  },
  {
    "text": "was in this this this data function it was possible to manipulate the internal",
    "start": "2707590",
    "end": "2714340"
  },
  {
    "text": "state to use an internal offset that could be arbitrary control until in VN",
    "start": "2714340",
    "end": "2721000"
  },
  {
    "text": "that would give you almost an arbitrarily read and write primitive on the hip this is this is a critical bug",
    "start": "2721000",
    "end": "2728080"
  },
  {
    "text": "this is actually one of the best books we've seen this bug has been anonymously",
    "start": "2728080",
    "end": "2734080"
  },
  {
    "text": "submitted to us and I've got a pleasure to tell you that so far this is the book",
    "start": "2734080",
    "end": "2739810"
  },
  {
    "text": "that has netted the most actually 1,050 $150,000",
    "start": "2739810",
    "end": "2746060"
  },
  {
    "text": "the puck is a finder originally find it found it",
    "start": "2746060",
    "end": "2751650"
  },
  {
    "text": "just by fuzzing but it turned out that once you've reduced as he is a",
    "start": "2751650",
    "end": "2757800"
  },
  {
    "text": "proof-of-concept it's just a series of out instructions sent to to this part it's simple it's",
    "start": "2757800",
    "end": "2765600"
  },
  {
    "text": "efficient and we want Bob like this books like this so please send us more",
    "start": "2765600",
    "end": "2771560"
  },
  {
    "start": "2771000",
    "end": "2825000"
  },
  {
    "text": "Jo any closing thoughts all right thanks for that Nico so we don't have many",
    "start": "2771560",
    "end": "2777780"
  },
  {
    "text": "closing thoughts for you here we hope that this has been a super informative presentation for you we hope that you",
    "start": "2777780",
    "end": "2783270"
  },
  {
    "text": "guys can take this information and use it to find bugs and hyper-v and of course we really hope that you send us",
    "start": "2783270",
    "end": "2789540"
  },
  {
    "text": "those hyper-v bugs that you find because we'll pay you a bunch of money for them and get them fixed as we noted earlier",
    "start": "2789540",
    "end": "2796620"
  },
  {
    "text": "Jordan from Microsoft is giving a talk tomorrow on hyper-v exploitation so if",
    "start": "2796620",
    "end": "2802020"
  },
  {
    "text": "you are interested in hyper-v and want to get more information about it you should definitely go and check his talk",
    "start": "2802020",
    "end": "2807450"
  },
  {
    "text": "out tomorrow it's at 350 in Lagoon GHI so that's all we got for you and let us",
    "start": "2807450",
    "end": "2814230"
  },
  {
    "text": "know if you have any questions we can answer questions here and you can also just shoot us emails or talk to us on",
    "start": "2814230",
    "end": "2819690"
  },
  {
    "text": "Twitter if you have questions after the presentation so thanks for your time",
    "start": "2819690",
    "end": "2827330"
  }
]