[
  {
    "text": "good afternoon everyone hello hello all right let's get this started thank you m uh so yes this",
    "start": "2600",
    "end": "9360"
  },
  {
    "text": "is maptive diving deep into ldap obfuscation deobfuscation and detection",
    "start": "9360",
    "end": "14400"
  },
  {
    "text": "my name is Daniel Bohanan you can call me Debo for short uh I'm a principal threat researcher at per Social Security",
    "start": "14400",
    "end": "20039"
  },
  {
    "text": "uh a cloud and identity startup uh doing detection and response uh I spent about seven or eight years doing inpoint",
    "start": "20039",
    "end": "25320"
  },
  {
    "text": "research at mandiant and um Microsoft I have an obsession some people call it a problem with aisc uh but I've done a lot",
    "start": "25320",
    "end": "32040"
  },
  {
    "text": "of projects in the past around this topic um and a more well-known problem of mine is I love coffee and books and",
    "start": "32040",
    "end": "38320"
  },
  {
    "text": "all the great conversations that happen around those two things hi everyone I sabaya you can call me Sabi for short I",
    "start": "38320",
    "end": "46160"
  },
  {
    "text": "am originally from Albania and recently moved to Berlin to work for Solaris as a senior cyber security engineer uh I'm",
    "start": "46160",
    "end": "54280"
  },
  {
    "text": "mostly focused on Cyber defense and doing a little of detection engineering and eent respons and when time allows",
    "start": "54280",
    "end": "61320"
  },
  {
    "text": "threat hunting so I do have a little experience on Consulting and governmental also love a nice Mountain",
    "start": "61320",
    "end": "68680"
  },
  {
    "text": "View good movies and a nice Espress off all right so to get started we're",
    "start": "68680",
    "end": "74600"
  },
  {
    "text": "going to talk about uh elap and active directory at high level and then we're going to dive in pretty quickly into some of the components that make up ldap",
    "start": "74600",
    "end": "80400"
  },
  {
    "text": "as a protocol and then the majority of this talk is going to be on the fun stuff on the obfuscation and for all the",
    "start": "80400",
    "end": "85640"
  },
  {
    "text": "other defenders in the room uh the last part is for you and we hope you really like it so with that uh we're going to",
    "start": "85640",
    "end": "90840"
  },
  {
    "text": "start back in time to disco balls and Deloreans the 1980s you have the directory access protocol or D ldap",
    "start": "90840",
    "end": "96880"
  },
  {
    "text": "comes onto the scene in the90s It's the lightweight version of dap um in 1998 open ldap released open ldap and then",
    "start": "96880",
    "end": "103600"
  },
  {
    "text": "for uh this presentation that's important to know in 2000 Microsoft released active directory which is the",
    "start": "103600",
    "end": "109560"
  },
  {
    "text": "world's largest active directory service which think of this as the server side component um that that has all the uh",
    "start": "109560",
    "end": "115240"
  },
  {
    "text": "information and then ldap has the protocol that client side applications can issue to get that information out of",
    "start": "115240",
    "end": "120439"
  },
  {
    "text": "that application um in the last decade we've seen plenty of Open Source tools using active directory issuing ldap",
    "start": "120439",
    "end": "127159"
  },
  {
    "text": "search requests um Power view Blood Hound pink castle Etc and these are really great for offensive and defensive",
    "start": "127159",
    "end": "132760"
  },
  {
    "text": "purposes so as Defenders we should ask these tools are here now what do we do about it um and this is kind of where",
    "start": "132760",
    "end": "138160"
  },
  {
    "text": "it's a bit frustrating like there are opportunities to get this Telemetry in lab environments we use silk etw from",
    "start": "138160",
    "end": "143200"
  },
  {
    "text": "Ruben boan um but if you want it in a production environment your choices are kind of limited U Microsoft Defender is",
    "start": "143200",
    "end": "149360"
  },
  {
    "text": "the most well an example um for uh client side and server side visibility into those L app search requests uh an",
    "start": "149360",
    "end": "155879"
  },
  {
    "text": "important distinction here is there are differences between client and server side um client side is an attacker's",
    "start": "155879",
    "end": "161800"
  },
  {
    "text": "Heaven it's pretty much wizzywig any officiation you have that input into that filter and that query is going to",
    "start": "161800",
    "end": "167519"
  },
  {
    "text": "look that way in the client side logs um and a very important distinction here is that uh that is uh true if you're using",
    "start": "167519",
    "end": "174760"
  },
  {
    "text": "a mechanism that uses wld 32. uh so our friends over at Falcon for",
    "start": "174760",
    "end": "179840"
  },
  {
    "text": "Force discovered this and release something called soap Hound which says hey let's do blood hound stuff but let's just do soap requests to bypass all",
    "start": "179840",
    "end": "186200"
  },
  {
    "text": "these client side logs um so there are those opportunities so as Defenders it's important to also recognize serers side",
    "start": "186200",
    "end": "191560"
  },
  {
    "text": "logs there's a lot of normalization some weird undocumented expansions sometimes even producing technically invalid",
    "start": "191560",
    "end": "197040"
  },
  {
    "text": "search filters um but both uh both data sources are really important so this is",
    "start": "197040",
    "end": "202239"
  },
  {
    "text": "going to be a 40-minute maniacal speedrun through all things L app search request parsing opusc deop fisc",
    "start": "202239",
    "end": "208319"
  },
  {
    "text": "detection we've spent over 2,000 hours of R&D on this which is too much R&D to spend on one thing we don't recommend it",
    "start": "208319",
    "end": "215239"
  },
  {
    "text": "um and then at the end of this we're going to demo and release Mal adaptive which is our open source framework for all things ldap um the name comes from",
    "start": "215239",
    "end": "221599"
  },
  {
    "text": "Mal adaptive which most people will think ldap is pretty rigid and not that flexible not that adaptive and we hope",
    "start": "221599",
    "end": "227400"
  },
  {
    "text": "to convince you otherwise very quickly in this talk so with that um let's talk a little more about elap itself let's",
    "start": "227400",
    "end": "235000"
  },
  {
    "text": "dive into an anatomy of an elab search request so there are going to be looking",
    "start": "235000",
    "end": "240519"
  },
  {
    "text": "at RFC 4511 there are different components to anal up search request but we're going to focus on four main ones",
    "start": "240519",
    "end": "247560"
  },
  {
    "text": "which is the B base object uh where in the active directory we want to start",
    "start": "247560",
    "end": "253159"
  },
  {
    "text": "the search the scope that says how far to let the search run the filter itself",
    "start": "253159",
    "end": "258239"
  },
  {
    "text": "which is what we want to get from the the the filter from the query and the",
    "start": "258239",
    "end": "263680"
  },
  {
    "text": "attribute selection which are the properties they want to get so we've noticed that actually uh filter is",
    "start": "263680",
    "end": "270440"
  },
  {
    "text": "mostly used by Defenders uh even for detection capabilities for this reason",
    "start": "270440",
    "end": "275560"
  },
  {
    "text": "is going to be our primary aisc focus but we're not going to overlook also the",
    "start": "275560",
    "end": "281440"
  },
  {
    "text": "base object and attribute selection which are our secondary and tertiary infuscation Focus moving on to the",
    "start": "281440",
    "end": "288240"
  },
  {
    "text": "filter itself so since it's mostly used let's see what what it's made of it's",
    "start": "288240",
    "end": "293400"
  },
  {
    "text": "made of five required tokens which is group start and group end they hold in the middle the attribute and it's value",
    "start": "293400",
    "end": "300160"
  },
  {
    "text": "and the comparison operator so there are two more operational tokens which is BU",
    "start": "300160",
    "end": "306560"
  },
  {
    "text": "operator and extensible match filter dbo is going to talk more thoroughly about these in the upcoming slides uh but just",
    "start": "306560",
    "end": "313919"
  },
  {
    "text": "know that these are bitwise bitwise values that have different meanings",
    "start": "313919",
    "end": "318960"
  },
  {
    "text": "based on the attribute and Microsoft documents these very well so in this case for example we are looking for an",
    "start": "318960",
    "end": "326000"
  },
  {
    "text": "object which is not disabled most people actually don't want to do",
    "start": "326000",
    "end": "331840"
  },
  {
    "text": "just the simple filters they want to combine and buy multiple filters and they do this by adding a bullan operator",
    "start": "331840",
    "end": "339319"
  },
  {
    "text": "and we call it a filter list so what is actually just like a simple row search",
    "start": "339319",
    "end": "345919"
  },
  {
    "text": "filter it is composed of two filters who together they make a filter list and the",
    "start": "345919",
    "end": "352120"
  },
  {
    "text": "fil then the whole string actually it is a search",
    "start": "352120",
    "end": "357440"
  },
  {
    "text": "filter uhoh sorry sorry about that sorry uh no we don't need help with PowerPoint",
    "start": "357440",
    "end": "362960"
  },
  {
    "text": "transition sorry about that go ahead moving on oh God okay uh looks like you could",
    "start": "362960",
    "end": "368840"
  },
  {
    "text": "use some help with crowd work ha hilarious uh I don't know trivan jokes",
    "start": "368840",
    "end": "374160"
  },
  {
    "text": "what do you think should we go for it let's see what is what do you call the biggest ldap search request in",
    "start": "374160",
    "end": "380199"
  },
  {
    "text": "history 10 and a half Megs because that is technically the maximum size uh now",
    "start": "380199",
    "end": "386240"
  },
  {
    "text": "clippy comes with sources don't worry he's not making things up uh as Defender I would encourage you to issue anything",
    "start": "386240",
    "end": "391319"
  },
  {
    "text": "even remotely close to 10 Megs and see just how much of it actually shows up in those uh data sources oh man thanks clippy cool so now",
    "start": "391319",
    "end": "400039"
  },
  {
    "text": "that we've looked at uh kind of the ldap tokens itself um let's now dissect them from an officiation perspective for the",
    "start": "400039",
    "end": "407120"
  },
  {
    "text": "Defenders it's going to get dark for a little bit uh hang in there I promise you there's a light at the end of the tunnel uh so as Sai said our main focus",
    "start": "407120",
    "end": "414120"
  },
  {
    "text": "is going to be on the filter itself um we're going to enumerate a ton of opis opportunities there and then we're going",
    "start": "414120",
    "end": "419240"
  },
  {
    "text": "to see which of those opportunities apply to the base object and the attribute selection as well there are a lot of undocumented things that we found",
    "start": "419240",
    "end": "425759"
  },
  {
    "text": "so we will try to call attention to that but if we forget then just look for this little icon in the upper right um and uh we're going to start by",
    "start": "425759",
    "end": "432960"
  },
  {
    "text": "looking at these five tokens um beginning with the attribute so let's see what we can do to",
    "start": "432960",
    "end": "440360"
  },
  {
    "text": "upate a little the attribute well we can do casing actually it's case and sensitive so we can play with it a",
    "start": "440360",
    "end": "446240"
  },
  {
    "text": "little uh we can do object identifier notation so the Microsoft defines it as",
    "start": "446240",
    "end": "453160"
  },
  {
    "text": "a dotted string of numbers which actually isn't quite true we notice that if you actually add the oid do string at",
    "start": "453160",
    "end": "460240"
  },
  {
    "text": "the beginning of it it's still going to work which is also case insensitive so",
    "start": "460240",
    "end": "465280"
  },
  {
    "text": "another thing that's really fascinating and we noticed is that um UND it is also",
    "start": "465280",
    "end": "471960"
  },
  {
    "text": "undocumented if it's you add prefixes of zeros to each octet uh it's it's uh it's",
    "start": "471960",
    "end": "479159"
  },
  {
    "text": "actually going to execute just fine oh man that was",
    "start": "479159",
    "end": "486960"
  },
  {
    "text": "undocumented uh okay there we go let's go back just a",
    "start": "487520",
    "end": "493960"
  },
  {
    "text": "couple clippy come on uh so an anr an anr ambiguous name",
    "start": "493960",
    "end": "501599"
  },
  {
    "text": "resolution we can also do with an anr the same thing so also the ID notation",
    "start": "501599",
    "end": "507080"
  },
  {
    "text": "and insensitive casing and it's also pretty it's depending a little also on",
    "start": "507080",
    "end": "512880"
  },
  {
    "text": "the active directory version uh what is actually anr anr is in case you uh don't",
    "start": "512880",
    "end": "519560"
  },
  {
    "text": "you know what you're looking for but you don't actually know where it's residing uh you can use enr and the whole your",
    "start": "519560",
    "end": "526360"
  },
  {
    "text": "search query is going to turn it into this query so basically it's going to add wild cards all over and if you had",
    "start": "526360",
    "end": "533920"
  },
  {
    "text": "for example in this case we're searching for domain admins and if you have a wi space on your search query actually it's",
    "start": "533920",
    "end": "539920"
  },
  {
    "text": "going to add these four queries too because it will treat it as a first name last name last name first name so some",
    "start": "539920",
    "end": "547399"
  },
  {
    "text": "nice sophistication tricks we saw so we already know for example if we're looking for curb TGT we can use an anr",
    "start": "547399",
    "end": "554320"
  },
  {
    "text": "uh the second option is even even the second option is going to uh work kind",
    "start": "554320",
    "end": "559920"
  },
  {
    "text": "of the same way so it's going to retrieve the same results because in this case it's an implicit wild card and",
    "start": "559920",
    "end": "566640"
  },
  {
    "text": "the third undocumented thing that we found is if if you actually put a wild card after your search everything after",
    "start": "566640",
    "end": "573560"
  },
  {
    "text": "wild card is going to be discarded so you can play and add everything you want and it's still going to have the same",
    "start": "573560",
    "end": "580680"
  },
  {
    "text": "results uh and these all three cases are actually covered in our detection",
    "start": "580680",
    "end": "586440"
  },
  {
    "text": "framework uh and if you don't care for the anr and all the crazy stuff with the qu queries uh you can just search with a",
    "start": "586440",
    "end": "593959"
  },
  {
    "text": "A you can just add um an equal sign and it's actually the a documented way to",
    "start": "593959",
    "end": "600560"
  },
  {
    "text": "search in an ELD up qu so in review to obate the attribute",
    "start": "600560",
    "end": "606079"
  },
  {
    "text": "we can do casing object identify notation and ambiguous name",
    "start": "606079",
    "end": "611800"
  },
  {
    "text": "resolution uh oh Cliffy again do you know where else ambiguous name resolution against exists I don't know",
    "start": "611800",
    "end": "619640"
  },
  {
    "text": "clippy where Microsoft what is more ambiguous than resolving to rename your products every six months oh I I didn't",
    "start": "619640",
    "end": "628360"
  },
  {
    "text": "know clipy is allowed to make Microsoft Burns but okay uh thanks Savi so one token type down we've talked about",
    "start": "628360",
    "end": "633920"
  },
  {
    "text": "attributes let's keep going the second one is the comparison operator most of the time this is an equal sign um but uh",
    "start": "633920",
    "end": "640120"
  },
  {
    "text": "ldap in active directory does allow you to have an approximately equal to um case still doesn't matter but things",
    "start": "640120",
    "end": "645279"
  },
  {
    "text": "like wild cards and hex which we'll talk about in a little bit uh aren't working we're going to focus pretty heavily on these two range comparison operators um",
    "start": "645279",
    "end": "651959"
  },
  {
    "text": "and let's take a specific example um let's say that you wanted to do a logical equivalent of a presence filter this is a presence filter a precursor of",
    "start": "651959",
    "end": "658320"
  },
  {
    "text": "curbo roasting saying give the objects that have a service principle name uh property that is defined to be any value",
    "start": "658320",
    "end": "663600"
  },
  {
    "text": "I don't care what well technically we could change that to be greater than equal to a string starting with the equal sign or starting with the",
    "start": "663600",
    "end": "670120"
  },
  {
    "text": "exclamation point or less than zzz again this is doing the same thing saying give me objects with this property with a name that evaluates to the logic that's",
    "start": "670120",
    "end": "676519"
  },
  {
    "text": "here um one really really bizarre thing that we found is so this is uh what the",
    "start": "676519",
    "end": "682800"
  },
  {
    "text": "the the correct order the standard order of characters in um the the printable ASI range we found that strings and",
    "start": "682800",
    "end": "689639"
  },
  {
    "text": "active directory ldap just don't give a crap about this um so they don't care about casing you have digits and Alpha",
    "start": "689639",
    "end": "695320"
  },
  {
    "text": "at the end you have this weird grouping of these special characters as book ends and then all the other special characters fall in between this is the",
    "start": "695320",
    "end": "701680"
  },
  {
    "text": "ordering in active directory ldap we don't know why this was a real frustrating bug to find but our tool basically handles that so if you're",
    "start": "701680",
    "end": "708160"
  },
  {
    "text": "adding in any particular uh ranges it takes that into account um another thing we can do is uh logically equivalent",
    "start": "708160",
    "end": "714600"
  },
  {
    "text": "range filters so this is an example of a bitwise attribute um and let's say we want to write this but detections we",
    "start": "714600",
    "end": "720120"
  },
  {
    "text": "looking for this so instead of saying the number ending with 368 we could say the number ending greater than equal to",
    "start": "720120",
    "end": "725760"
  },
  {
    "text": "7 less than equal to 9 and those things together and then it's also explicitly exclude seven and N so logically this",
    "start": "725760",
    "end": "731560"
  },
  {
    "text": "gives you the exact same value now if you're a more visual person like me I think about this as a timeline um so",
    "start": "731560",
    "end": "737040"
  },
  {
    "text": "greater than equal to seven less than equal to 9 and then our specific exclusions to get us right down to eight",
    "start": "737040",
    "end": "742199"
  },
  {
    "text": "um in the officiation module We Built For This we have a couple different recipes um one of my favorite ones is doing exclusions of ranges um my really",
    "start": "742199",
    "end": "749720"
  },
  {
    "text": "favorite one is doing two opposing exclusions so start with a search uh with a presence filter and then exclude",
    "start": "749720",
    "end": "754800"
  },
  {
    "text": "both directions out and all four of these are going to give you that exact same logical equivalent for that number",
    "start": "754800",
    "end": "760240"
  },
  {
    "text": "you can also do this with strings um but keep in mind the suffix has become a little tricky to deal with so we kind of",
    "start": "760240",
    "end": "765320"
  },
  {
    "text": "consider this like a lossy off fisc function but it's still quite a great a great way to get around a lot of",
    "start": "765320",
    "end": "770639"
  },
  {
    "text": "detections so in rview for that second token type we have approximately equal to but a lot of the fun comes with those",
    "start": "770639",
    "end": "775839"
  },
  {
    "text": "range uh filters for um presence uh and range filters those last two examples should look pretty familiar to you um",
    "start": "775839",
    "end": "781560"
  },
  {
    "text": "they're actually uh uh found in blood hound in their SPN Target enumeration um so for those of you who are defenders in",
    "start": "781560",
    "end": "786920"
  },
  {
    "text": "the room these are actually really relevant examples of how you can basically get that logical equivalence in a way that would likely evade a lot",
    "start": "786920",
    "end": "792720"
  },
  {
    "text": "of detections expecting it to look something like this the third token type is the Boolean operator most of the",
    "start": "792720",
    "end": "798680"
  },
  {
    "text": "times we just think of this as ANS and ores the knot is what really spices things up in elap um so let's take an",
    "start": "798680",
    "end": "805199"
  },
  {
    "text": "example let's say that you're looking for countries equal Albania this is the objects you're looking for well one thing you can do is just throw in a",
    "start": "805199",
    "end": "810880"
  },
  {
    "text": "bunch of group start group ends and a lot of and or and it's still going to evaluate to the same thing you can also",
    "start": "810880",
    "end": "816639"
  },
  {
    "text": "add double negation so noting a knot is the same as nothing at all and so this is still going to evaluate correctly um",
    "start": "816639",
    "end": "823199"
  },
  {
    "text": "if you another kind of note here is you can actually Place Boolean operators directly inside the uh the filter itself",
    "start": "823199",
    "end": "829279"
  },
  {
    "text": "Microsoft acknowledges this and says it's not really recommended and actually if you look at the server side logs the server will insert additional",
    "start": "829279",
    "end": "835360"
  },
  {
    "text": "parentheses uh to kind of make it correct but on the input this is totally valid and these are all scenarios that",
    "start": "835360",
    "end": "841639"
  },
  {
    "text": "we built into our parser to basically handle so that we can know the difference between these um so let's take a little more interesting example",
    "start": "841639",
    "end": "848040"
  },
  {
    "text": "country equals Albania and either of these two other things location equals ccus or Toronto which are two cities in",
    "start": "848040",
    "end": "853759"
  },
  {
    "text": "Albania um so the important thing to note here is each Boolean operator has kind of like we're going to call a sphere or a box of influence um so these",
    "start": "853759",
    "end": "860440"
  },
  {
    "text": "are these two colored boxes that we see up here and actually make it even a little more complicated when we have three boxes so when we're parsing this",
    "start": "860440",
    "end": "867079"
  },
  {
    "text": "we have to track all these Boolean operators and assign the group it's basically a stack to say these are the orderings of bulls that apply to each",
    "start": "867079",
    "end": "874120"
  },
  {
    "text": "filter this is really important to know is this logically anded or ored when you have two 3 4 20 30 40 bulling operators",
    "start": "874120",
    "end": "882160"
  },
  {
    "text": "affecting one filter uh and if you have a not Boolean operator knots are different they don't affect everything",
    "start": "882160",
    "end": "888360"
  },
  {
    "text": "inside of that filter list they only affect the first Boolean operator or filter they come into contact with so",
    "start": "888360",
    "end": "894120"
  },
  {
    "text": "you can see this knot is affecting location equals cucus but does not affect name equals Hobby or anything",
    "start": "894120",
    "end": "899560"
  },
  {
    "text": "else past that and again we track all this and there's some really interesting features of the KN um that are really",
    "start": "899560",
    "end": "905199"
  },
  {
    "text": "frustrating to deal with but put it in the parure so we didn't have to think about it going forward um logical",
    "start": "905199",
    "end": "910320"
  },
  {
    "text": "inversion is probably the coolest thing you can do with buling operators for any math nerds in here this is called de Morgan's law so not a or b is the same",
    "start": "910320",
    "end": "917519"
  },
  {
    "text": "as not a and not B the inverse is also true so we can apply this uh to any ldap",
    "start": "917519",
    "end": "922600"
  },
  {
    "text": "filter by choosing a spot to put a knot in this case we'll select the whole filter that's step number one then",
    "start": "922600",
    "end": "927839"
  },
  {
    "text": "everything else ends wrapped in inside that is now in scope so step number two says let's find all the ANS or ores and",
    "start": "927839",
    "end": "933519"
  },
  {
    "text": "invert them ands become ores ores become ANS and lastly let's find all the filters and invert those from a negation",
    "start": "933519",
    "end": "938880"
  },
  {
    "text": "perspective so none of these are negated so we're going to add the not bulling operator if not was present we would",
    "start": "938880",
    "end": "944160"
  },
  {
    "text": "have to remove that this is logically equivalent to the what we started with um and again this makes it really",
    "start": "944160",
    "end": "949680"
  },
  {
    "text": "complicated when you're trying to figure out uh in a par entry if something is actually being included or excluded so",
    "start": "949680",
    "end": "955560"
  },
  {
    "text": "interview for bulling operators we have the additive nature double negation and de Morgan's laws for The Logical",
    "start": "955560",
    "end": "961600"
  },
  {
    "text": "inversion um all right what is my least favorite ldap token type I'm guessing",
    "start": "961600",
    "end": "967199"
  },
  {
    "text": "bulling operator since we're already here yep because I'm afraid of getting tied up in knots that was cringe clippy o we",
    "start": "967199",
    "end": "975480"
  },
  {
    "text": "started High we're going down very fast so let's get that out of get that off the slide all right the fourth token",
    "start": "975480",
    "end": "980839"
  },
  {
    "text": "type is the extensible match filter um the we talked about this example earlier this is how you can have Andor logic um",
    "start": "980839",
    "end": "986759"
  },
  {
    "text": "for bitwise values um active directory ldap supports four different values ANS and ores ref first and then later",
    "start": "986759",
    "end": "992720"
  },
  {
    "text": "versions have these other ones we're going to focus exclusively on the ANS and ores for an opis",
    "start": "992720",
    "end": "997759"
  },
  {
    "text": "perspective um so for example if you had this filter uh you are anding these bitwise flags to come up to the value",
    "start": "997759",
    "end": "1004399"
  },
  {
    "text": "515 what you can actually do is break those out into smaller subgroupings as long as you're dealing with base two uh",
    "start": "1004399",
    "end": "1010440"
  },
  {
    "text": "addin values then 1 and 514 anded together is the same as 515 you could break it out even further now you have 1",
    "start": "1010440",
    "end": "1016319"
  },
  {
    "text": "2 and 512 um and if the starting point was an extensible match filter for or that's fine it works just the same you",
    "start": "1016319",
    "end": "1022560"
  },
  {
    "text": "just make sure you're bringing in an or bulling operator instead of an and um another thing uh this can actually get",
    "start": "1022560",
    "end": "1028760"
  },
  {
    "text": "pretty complicated in real life here's an example from get domain user from powerview where it has a quite large",
    "start": "1028760",
    "end": "1034120"
  },
  {
    "text": "number and so think of all the random groupings you could do to break this logic out into multiple filters um so in the officiation module we built this is",
    "start": "1034120",
    "end": "1040438"
  },
  {
    "text": "exactly what we did and it definitely complicates detections because you're now moving all that logic across multiple filters throughout the entire",
    "start": "1040439",
    "end": "1046240"
  },
  {
    "text": "search filter um another thing we can do is we can take a precise filter like this this",
    "start": "1046240",
    "end": "1051520"
  },
  {
    "text": "says give me the object that has precisely this value these exact ones and zeros in the bitwise flags um and we",
    "start": "1051520",
    "end": "1057080"
  },
  {
    "text": "can convert this uh by using this formula into a a broken out version so we can and all the one bits we can not",
    "start": "1057080",
    "end": "1064480"
  },
  {
    "text": "or all the one the zero bits and then we can and those things together so this is logically the same as what we started",
    "start": "1064480",
    "end": "1069679"
  },
  {
    "text": "with that precise value but if you'll notice now we have filters that have extensible match filters so we can go",
    "start": "1069679",
    "end": "1075799"
  },
  {
    "text": "back to the first bitwise breakout and break these out even further so again we're really moving the logic into a lot",
    "start": "1075799",
    "end": "1080840"
  },
  {
    "text": "of places to make it quite tricky from a detection perspective um so in conclusion bit wies breakout and bitwise",
    "start": "1080840",
    "end": "1087159"
  },
  {
    "text": "breakout of precise values are some of the methods that we can use to offis um uh these values that have bitwise and",
    "start": "1087159",
    "end": "1093280"
  },
  {
    "text": "the the parser handles all this for you as we'll see in the demo towards the end thanks Zeo so moving on to the filter",
    "start": "1093280",
    "end": "1100880"
  },
  {
    "text": "for the value itself let's see what we can do uh offer skating we can still do the casing as in previous examples",
    "start": "1100880",
    "end": "1107760"
  },
  {
    "text": "exclude the some attributes with value formats and yeah so it's going we can",
    "start": "1107760",
    "end": "1113320"
  },
  {
    "text": "also do prepended zeros on all the values that it's bitwise digits or",
    "start": "1113320",
    "end": "1118440"
  },
  {
    "text": "numbers we can we also got some undocumented featured time stamps we noticed that sometimes milliseconds were",
    "start": "1118440",
    "end": "1125440"
  },
  {
    "text": "present but it didn't seem to matter uh if you change the millisecond values or",
    "start": "1125440",
    "end": "1130840"
  },
  {
    "text": "remove them it turns out that you can add literally anything you want as long as you add a capital z in there so still",
    "start": "1130840",
    "end": "1139039"
  },
  {
    "text": "this one is going to be a a time stamp uh fun fact is actually you don't even",
    "start": "1139039",
    "end": "1146320"
  },
  {
    "text": "need to use just the upper Z case you can also write the hex representation of",
    "start": "1146320",
    "end": "1151440"
  },
  {
    "text": "it of it and it's going to work so uh which leads us to our next point which",
    "start": "1151440",
    "end": "1156720"
  },
  {
    "text": "is hex and coding this is our favorite thing to do infuscation wise uh so it",
    "start": "1156720",
    "end": "1162760"
  },
  {
    "text": "exists the hex en coding itself it actually exists to escape certain special characters which Microsoft has",
    "start": "1162760",
    "end": "1168919"
  },
  {
    "text": "detailed here but uh you can also Escape any printable characters you that you",
    "start": "1168919",
    "end": "1174600"
  },
  {
    "text": "want as well so you can swap these with their hex representation and it's still",
    "start": "1174600",
    "end": "1179679"
  },
  {
    "text": "going to work and return the same result our parcel parses codes and de codes all",
    "start": "1179679",
    "end": "1185080"
  },
  {
    "text": "the values on the hex uh hex representation of it so you don't need to another thing undocumented is that",
    "start": "1185080",
    "end": "1193080"
  },
  {
    "text": "doc Microsoft said that the hex representation should be followed by two characters presented of their SK",
    "start": "1193080",
    "end": "1200360"
  },
  {
    "text": "character but that's actually not true we we discovered that for the first 16",
    "start": "1200360",
    "end": "1205960"
  },
  {
    "text": "characters you can actually drop the leading zero and it's still going to work wild cards so we also saw a little",
    "start": "1205960",
    "end": "1214520"
  },
  {
    "text": "the wild cards for example instead of looking for curb TGT you can also look for just RBG here and you're going to",
    "start": "1214520",
    "end": "1222679"
  },
  {
    "text": "get still the same results uh ausc ausc from the uh for the evasion purposes",
    "start": "1222679",
    "end": "1229760"
  },
  {
    "text": "actually we not the only ones that we're looking uh at the wild cards pop Walker",
    "start": "1229760",
    "end": "1234880"
  },
  {
    "text": "a researcher from Spectre op also has detailed in these two articles how and",
    "start": "1234880",
    "end": "1240960"
  },
  {
    "text": "at Lear how using wild cards for evasion purposes a quick review before value",
    "start": "1240960",
    "end": "1248280"
  },
  {
    "text": "aisc we have casing prepended zeros time steps hex coding and wild cards the good",
    "start": "1248280",
    "end": "1255400"
  },
  {
    "text": "news is that's all you can do with obic nah I'm kidding you guys we got a lot",
    "start": "1255400",
    "end": "1261919"
  },
  {
    "text": "more so until now we actually saw only the tokos let's see what we can do with",
    "start": "1261919",
    "end": "1267240"
  },
  {
    "text": "outside of it so filter wide ofation you can actually add group start and group",
    "start": "1267240",
    "end": "1273159"
  },
  {
    "text": "end as much as you want as long as you kep keep a depth of 99 wide space you",
    "start": "1273159",
    "end": "1279440"
  },
  {
    "text": "can also add it and remove it all over uh new line be tab whatever so garbage",
    "start": "1279440",
    "end": "1286799"
  },
  {
    "text": "filters also uh in this case you just need to be careful if you're if you're",
    "start": "1286799",
    "end": "1293200"
  },
  {
    "text": "using logical or or logical and because if you're using logical end actually you",
    "start": "1293200",
    "end": "1298559"
  },
  {
    "text": "need to make sure that the value the attribute exists but with or you can actually go crazy and just add whatever",
    "start": "1298559",
    "end": "1305120"
  },
  {
    "text": "you want filter and filter list reordering also so as a recap until now",
    "start": "1305120",
    "end": "1311640"
  },
  {
    "text": "we've seen the filter let's see for the base object itself quick reminder the",
    "start": "1311640",
    "end": "1317039"
  },
  {
    "text": "base object is where in the directory structure we want to start our search so",
    "start": "1317039",
    "end": "1322080"
  },
  {
    "text": "we've seen that there are some good detection POS opportunities that we feel are not as much discussed uh for example",
    "start": "1322080",
    "end": "1329679"
  },
  {
    "text": "the this this tool offensive uh uh offensive tool certify in this example",
    "start": "1329679",
    "end": "1335760"
  },
  {
    "text": "actually uses a super common search filter so the base object in this case",
    "start": "1335760",
    "end": "1341360"
  },
  {
    "text": "is very specific so it's looking for public key services and we are going to",
    "start": "1341360",
    "end": "1346760"
  },
  {
    "text": "be focusing on the synx perspective how we can ofus skate a little uh a simple",
    "start": "1346760",
    "end": "1352159"
  },
  {
    "text": "base object like this the same trick as as we already discuss so we can do",
    "start": "1352159",
    "end": "1357320"
  },
  {
    "text": "casing for the value portion you can also he do Hex and holding uh for the",
    "start": "1357320",
    "end": "1362760"
  },
  {
    "text": "value portion at of the relative distinguishing name uh object identifier",
    "start": "1362760",
    "end": "1368840"
  },
  {
    "text": "notation for the attributes also uh supports the added dot prefix and the prepended",
    "start": "1368840",
    "end": "1376960"
  },
  {
    "text": "zeros and why space can be added at the end as well as in between the sash of uh",
    "start": "1376960",
    "end": "1382960"
  },
  {
    "text": "Lup prefix something is interesting that is value that is uh true only for the base",
    "start": "1382960",
    "end": "1390960"
  },
  {
    "text": "subject but not for the value itself uh is that as long as the hex is not",
    "start": "1390960",
    "end": "1396159"
  },
  {
    "text": "present then you can actually encapsulate it with a double cause and it shows this way also on client side",
    "start": "1396159",
    "end": "1402720"
  },
  {
    "text": "logs but it's not going to look like this on server s side logs lastly the",
    "start": "1402720",
    "end": "1408640"
  },
  {
    "text": "attribute selection which is basically which attribute properties do we want to be returned in our search",
    "start": "1408640",
    "end": "1415039"
  },
  {
    "text": "results um and for attributes selection we also have casing we uh have the",
    "start": "1415039",
    "end": "1422000"
  },
  {
    "text": "object identifier notation and it also uh supports uh oid prefix and prepended",
    "start": "1422000",
    "end": "1428640"
  },
  {
    "text": "zeros we can add wi space only after attributes that are on the oid syntax",
    "start": "1428640",
    "end": "1434919"
  },
  {
    "text": "not sure why but yeah we learned after uh some trial error a lot of it uh and",
    "start": "1434919",
    "end": "1441600"
  },
  {
    "text": "we have also the option to add double attributes or Garbage attributes you can",
    "start": "1441600",
    "end": "1447799"
  },
  {
    "text": "literally add whatever you want and the person who is going to answer for this is no one else than",
    "start": "1447799",
    "end": "1456039"
  },
  {
    "text": "clippy what do you call this character Daniel esteric wild card or split uh",
    "start": "1456039",
    "end": "1461600"
  },
  {
    "text": "well I think older people in the room would have different answers than me perhaps but I'm guessing with all that space down there clippy has some extra",
    "start": "1461600",
    "end": "1468039"
  },
  {
    "text": "yes all of the above including two more answers um from an input perspective for attribute selection if the only thing",
    "start": "1468039",
    "end": "1473520"
  },
  {
    "text": "you define is a wild card then it will return all the properties but it's actually the same as if you don't define attribute selection at all they're",
    "start": "1473520",
    "end": "1479320"
  },
  {
    "text": "logged slightly differently in server side logs that asterisk will be logged as square bracket the word all lowercase",
    "start": "1479320",
    "end": "1486080"
  },
  {
    "text": "now the really interesting scenario is if you define many attributes like Sai was showing and one of those attributes is a wild card um or at least one wild",
    "start": "1486080",
    "end": "1493279"
  },
  {
    "text": "card is present then what it will do is it will actually turn that wild card into this string all with list but",
    "start": "1493279",
    "end": "1498520"
  },
  {
    "text": "weirdly it actually prep pins it to the very first attribute in that delimited list so if you are parsing attributes",
    "start": "1498520",
    "end": "1504240"
  },
  {
    "text": "which you should be uh then definitely keep that in mind and make sure you break that out otherwise the first attribute is going to be uh joined with",
    "start": "1504240",
    "end": "1510480"
  },
  {
    "text": "this one um from a defensive perspective a lot of people don't really think about attribute selection they're logged",
    "start": "1510480",
    "end": "1515559"
  },
  {
    "text": "exactly how they're put in so the ordering is very uh precise so a lot of people don't change their tools to",
    "start": "1515559",
    "end": "1521640"
  },
  {
    "text": "anyways I don't need to go into that but yeah there's options there so that's actually the end of the aisc uh portion",
    "start": "1521640",
    "end": "1527279"
  },
  {
    "text": "that we're going to be discussing uh so now for all the defenders in the room let's talk about where do we go from here and we're kind of uh going to",
    "start": "1527279",
    "end": "1533520"
  },
  {
    "text": "outline it in three pieces which is parsing enriching and detecting um so parsing when we started this research",
    "start": "1533520",
    "end": "1539679"
  },
  {
    "text": "there there wasn't a parser for for ldap search filters that we could find so we built one and that was no joke probably",
    "start": "1539679",
    "end": "1545919"
  },
  {
    "text": "half this research was building a parser the hardest but most fun thing we've ever done uh we built a state machine parser in C for performance the rest of",
    "start": "1545919",
    "end": "1552440"
  },
  {
    "text": "the project is the Powershell wrapper to have all the cool pipeline ability um and flexibility and randomization that",
    "start": "1552440",
    "end": "1557760"
  },
  {
    "text": "power shells really good at in alisation Frameworks um so think of parsing as this first we needed to have a tokenizer",
    "start": "1557760",
    "end": "1563120"
  },
  {
    "text": "which says take all the input string just this massive string of an L search filter and break it up into little tokens here's an attribute here's a",
    "start": "1563120",
    "end": "1569200"
  },
  {
    "text": "value blah blah blah next we want to organize those tokens into something that has a little more meaning and so we",
    "start": "1569200",
    "end": "1574480"
  },
  {
    "text": "chose to do it as a syntax tree or a par tree this is not an abstract syntax tree it's on the journey there but abstract",
    "start": "1574480",
    "end": "1580679"
  },
  {
    "text": "drops things it is abstract so it drops things that it considers in significant but we still consider um significant so",
    "start": "1580679",
    "end": "1586880"
  },
  {
    "text": "step number two is enriching so you can see here actually using the tool to parse from a string to the tokens um all",
    "start": "1586880",
    "end": "1592320"
  },
  {
    "text": "along the way we are also adding additional uh decoding so whatever hex characters are present we decode that",
    "start": "1592320",
    "end": "1597480"
  },
  {
    "text": "for you or bitwise characters are present then we enumerate those uh those flags and then we group those things into filters and branches and trees for",
    "start": "1597480",
    "end": "1603559"
  },
  {
    "text": "different kinds of officiation and dehiscing uh this is the whole reason",
    "start": "1603559",
    "end": "1608720"
  },
  {
    "text": "that we did this research in the first place was how can we detect all the stuff that we are kind of uh discovering or inventing or putting together so find",
    "start": "1608720",
    "end": "1615720"
  },
  {
    "text": "evil is the function we created that does all this give it any search filters you want and it will parse enrich detect",
    "start": "1615720",
    "end": "1621559"
  },
  {
    "text": "and all the detections carry with it scores explanations even pulling out specific values from the search filter",
    "start": "1621559",
    "end": "1626720"
  },
  {
    "text": "that flag on that rule and we want to give a really big shout out and thank you to Olaf Hartong uh over at Falcon",
    "start": "1626720",
    "end": "1631919"
  },
  {
    "text": "force uh he was so kind to basically take all our rules for us many times and run them against his client data set and",
    "start": "1631919",
    "end": "1637159"
  },
  {
    "text": "provide us kind of stats of which rules sucked and needed to be tuned a little bit but uh so thank you Olaf for that uh",
    "start": "1637159",
    "end": "1642480"
  },
  {
    "text": "definitely helped us tremendously in the rule set that we are releasing as part of this research uh and lastly if you look at the bottom uh because we spent",
    "start": "1642480",
    "end": "1648840"
  },
  {
    "text": "so much time on this parure we did it to make it as blazing fast as we possibly could we wrote and rewrote probably",
    "start": "1648840",
    "end": "1654399"
  },
  {
    "text": "everything in this parer two or three times just for our own learning experience so here's an example of us parsing this search filter 100,000 times",
    "start": "1654399",
    "end": "1660960"
  },
  {
    "text": "running it against all of our 65 and Counting rules clocking in a just under 4.4 seconds uh very very consistently so",
    "start": "1660960",
    "end": "1668640"
  },
  {
    "text": "um with that instead of talking more about the solution let's just show people uh if you haven't picked up by",
    "start": "1668640",
    "end": "1673799"
  },
  {
    "text": "now we really like to have fun and so in this tool we put as many colors as we could think of but there actually is a",
    "start": "1673799",
    "end": "1678880"
  },
  {
    "text": "method to the madness it is there to help quickly figure out what part of a search filter is attribute value all",
    "start": "1678880",
    "end": "1684200"
  },
  {
    "text": "that kind of stuff this is the aski art for the tool this is a valid ldap query it will return anything with a name uh",
    "start": "1684200",
    "end": "1690919"
  },
  {
    "text": "and there's a couple couple Easter eggs in there if you have time for it um so the first example is going to be taking",
    "start": "1690919",
    "end": "1696080"
  },
  {
    "text": "uh a pretty simple search filter this is that Albania ccas Tana example and we added some hex and coding and some oid",
    "start": "1696080",
    "end": "1701519"
  },
  {
    "text": "syntax so we can see we can tokenize it and we can say hey which pieces are an attribute versus a value that enrich",
    "start": "1701519",
    "end": "1707080"
  },
  {
    "text": "token is now going to say hey here here's an attribute and it's defined and it actually resolves to uh this attribute name and we have these context",
    "start": "1707080",
    "end": "1713080"
  },
  {
    "text": "objects context objects have all the great things would like Boolean operators will'll see in a moment we can group all these things together into",
    "start": "1713080",
    "end": "1718960"
  },
  {
    "text": "ldap filters so we can evaluate Logic on the whole filter we have immediate access to all the tokens in that filter",
    "start": "1718960",
    "end": "1724559"
  },
  {
    "text": "the values as well as the full token dictionary and token list so any way you need to access that data uh you have all",
    "start": "1724559",
    "end": "1729840"
  },
  {
    "text": "that at your fingertips now if we look at the context object we can see all the Boolean operator this is that stacking of Boolean operators as we pars to say",
    "start": "1729840",
    "end": "1736360"
  },
  {
    "text": "hey this is logically inclusive this is an and or an or and we have full access to all the tokens of the booleans and",
    "start": "1736360",
    "end": "1741519"
  },
  {
    "text": "then for every uh value we do full parsing so we parse the hex uh if we run it through um the find evil function we",
    "start": "1741519",
    "end": "1747120"
  },
  {
    "text": "can see all these rules uh that flagged on different components uh in this search filter um the next example is",
    "start": "1747120",
    "end": "1753039"
  },
  {
    "text": "going to be looking at a bitwise uh value so in this case this is our search filter um that middle one's going to be",
    "start": "1753039",
    "end": "1758679"
  },
  {
    "text": "a little interesting if we pipe this into find evil it matches on a very specific rule that we wrote looking for the user account control attribute with",
    "start": "1758679",
    "end": "1765000"
  },
  {
    "text": "a flag of 128 set um and as we're going to show you uh in the parsing of this filter uh in the value we automatically",
    "start": "1765000",
    "end": "1772360"
  },
  {
    "text": "figured out it was a bitwise value based on the attribute and then we parsed all the zeros and ones both in a dictionary format as well as in a list format so",
    "start": "1772360",
    "end": "1779799"
  },
  {
    "text": "whatever format makes sense for you you can go and then write detections very specifically against those without needing to care about what the the",
    "start": "1779799",
    "end": "1785559"
  },
  {
    "text": "actual integer number is you can go right to the flags and get to the source of Truth um the last example is having",
    "start": "1785559",
    "end": "1791519"
  },
  {
    "text": "fun with some of the wild cards um so hex decoding that's easy sauce like we already do that out of the gate so trust",
    "start": "1791519",
    "end": "1796600"
  },
  {
    "text": "the domain for that first example that's that's simple what about all these wild cards you're actually dropping characters out so uh in our detection",
    "start": "1796600",
    "end": "1803000"
  },
  {
    "text": "module uh we have the ability to Define high value strings as values and then the parser will go through and it will",
    "start": "1803000",
    "end": "1809200"
  },
  {
    "text": "basically expand those wild cards and say hey does this match against any of these High um sensitive values um this",
    "start": "1809200",
    "end": "1814320"
  },
  {
    "text": "also handles the two anr scenarios that Sai mentioned of the implied wild card and the explicit wild card so again we",
    "start": "1814320",
    "end": "1819720"
  },
  {
    "text": "try to think of as much of this as we could and bake it right into the detection framework so it's as easy to use uh right out of the gate for all",
    "start": "1819720",
    "end": "1825399"
  },
  {
    "text": "these techniques and finally we've uh we've put all this",
    "start": "1825399",
    "end": "1832519"
  },
  {
    "text": "together into a colorful interactive menu to make it fun to explore we can test our input the elab search filter",
    "start": "1832519",
    "end": "1840039"
  },
  {
    "text": "and we can explore the infuscation menus for all the techniques we covered in this present presentation while cards",
    "start": "1840039",
    "end": "1847080"
  },
  {
    "text": "are also supported we can add ausc layer by layer also remove it and if you're",
    "start": "1847080",
    "end": "1854120"
  },
  {
    "text": "lazy you can also use all wild cards to run randomly apply all the option",
    "start": "1854120",
    "end": "1860320"
  },
  {
    "text": "testing again the filter the search filter will show that it still works and",
    "start": "1860320",
    "end": "1867000"
  },
  {
    "text": "the detection module is built in and find evil shows a full summary of",
    "start": "1867000",
    "end": "1872159"
  },
  {
    "text": "detections scores explanations and more colors of course lastly if you don't",
    "start": "1872159",
    "end": "1878080"
  },
  {
    "text": "like the interactive menus we have full CLI support so the interactive menu lets you randomly choose ingredients and you",
    "start": "1878080",
    "end": "1885600"
  },
  {
    "text": "can copy the recipe for a non- interative active user all the fa are Prett for prin Printing and detection",
    "start": "1885600",
    "end": "1892679"
  },
  {
    "text": "summaries are also available via CLI all right now before I go to this",
    "start": "1892679",
    "end": "1899440"
  },
  {
    "text": "next slide I would just like to remind everyone that Sai and I are both Defenders always have been and that was",
    "start": "1899440",
    "end": "1905080"
  },
  {
    "text": "our initial intention of This research so the next slide was our own valtion no one strong armed us today we were",
    "start": "1905080",
    "end": "1911960"
  },
  {
    "text": "releasing everything you saw except the officiation module that was our decision because attackers don't really need this",
    "start": "1911960",
    "end": "1918480"
  },
  {
    "text": "machine gun right now um Defenders need ammunition we just talked about how many",
    "start": "1918480",
    "end": "1923559"
  },
  {
    "text": "people don't even have visibility into this data source to begin with um so we made this very clear in our cfp",
    "start": "1923559",
    "end": "1928760"
  },
  {
    "text": "submission four bullet points red text we want to release everything except for this thing and our goal is by the end of",
    "start": "1928760",
    "end": "1934039"
  },
  {
    "text": "this year pending uh cfp acceptance or rejection uh our goal is to release the aisc module by the end of this year it's",
    "start": "1934039",
    "end": "1941399"
  },
  {
    "text": "done it's been done for months it's what we used to develop all the detections uh and it really people ask us why do you",
    "start": "1941399",
    "end": "1947039"
  },
  {
    "text": "do officiation stuff that's so freaking weird well it actually is a way of like orchestrating chaos so you know where the boundaries of things are so that you",
    "start": "1947039",
    "end": "1953080"
  },
  {
    "text": "can write those detections and writing the officiation module literally taught us undocumented things about ldap uh so",
    "start": "1953080",
    "end": "1958519"
  },
  {
    "text": "that's why we do it because otherwise we would have written half these detections and thought we were done but this really helps us um kind of maximize that uh",
    "start": "1958519",
    "end": "1965000"
  },
  {
    "text": "that energy and those efforts so uh right before this talk uh we pushed at the last slide we'll have the the GitHub",
    "start": "1965000",
    "end": "1970600"
  },
  {
    "text": "URL uh this code is live and again it's the entire parser framework uh it is the",
    "start": "1970600",
    "end": "1975679"
  },
  {
    "text": "deop fisc modules the det the detection modules with a complete detection rule set um and it also is an aisc Corpus so",
    "start": "1975679",
    "end": "1983000"
  },
  {
    "text": "we have 1,337 off fiscated examples of benign uh search filters that you can",
    "start": "1983000",
    "end": "1988159"
  },
  {
    "text": "use to test your detections or to test our detections and see uh just how it works um so with that being said our",
    "start": "1988159",
    "end": "1994399"
  },
  {
    "text": "three main takeaways elap still being used by attackers and search request is the mechanism in which we can kind of",
    "start": "1994399",
    "end": "1999840"
  },
  {
    "text": "see uh what they are querying um out of active directory defensive awareness and the",
    "start": "1999840",
    "end": "2006080"
  },
  {
    "text": "the like from a visibility perspective even just from a detection perspective we feel like it's just still kind of immature and so we hope that this",
    "start": "2006080",
    "end": "2011880"
  },
  {
    "text": "research will bring light to that um and we really hope that a net benefit of this is more people will find creative ways of getting that Telemetry um in",
    "start": "2011880",
    "end": "2018440"
  },
  {
    "text": "their organizations we love to see more options to get this Telemetry um but uh that that's our second point and lastly",
    "start": "2018440",
    "end": "2024880"
  },
  {
    "text": "we released Mal adaptive as an open source tool to hopefully make all this easy so you don't have to spend nearly as much time as we did um looking at all",
    "start": "2024880",
    "end": "2031000"
  },
  {
    "text": "this stuff um we have one more thing we like to show this is our unofficial takeaway um we've had a lot of fun",
    "start": "2031000",
    "end": "2036320"
  },
  {
    "text": "working on this together and so we wanted to leave you with our two favorite Albanian Proverbs uh I'm not a",
    "start": "2036320",
    "end": "2042480"
  },
  {
    "text": "native speaker so forgive my uh my pronunciation my favorite one is roet and literally this translates to",
    "start": "2042480",
    "end": "2048839"
  },
  {
    "text": "live long like a mountain uh and it's kind of a a greeting or a blessing of prosperity and well-being and so I feel",
    "start": "2048839",
    "end": "2055200"
  },
  {
    "text": "like together we all climbed a pretty big mountain so I'm a little winded from it uh but what I want you to take away",
    "start": "2055200",
    "end": "2060560"
  },
  {
    "text": "from this is help other people up that mountain show them the path that you took so they can get to the other side and see the next Peak to go climb as a",
    "start": "2060560",
    "end": "2066638"
  },
  {
    "text": "security Community we really have to be there for each other to build on the shoulders of those that went before us uh and to not use it to beat someone",
    "start": "2066639",
    "end": "2072480"
  },
  {
    "text": "over the head with a stick but to really help all of us make progress together and my favorite one and I think",
    "start": "2072480",
    "end": "2079560"
  },
  {
    "text": "the audience will also agree is to which it means please no more paper",
    "start": "2079560",
    "end": "2087520"
  },
  {
    "text": "clips Daniel I won't say who I whose idea the paper clips were but okay okay very",
    "start": "2087520",
    "end": "2093839"
  },
  {
    "text": "authentic Albanian proverb so that thank youall so much we had so much fun doing this research this has been a blast to",
    "start": "2093839",
    "end": "2100160"
  },
  {
    "text": "come together and present this we've really been thinking about this for too long I'm really happy to get it out there today and with that here's our",
    "start": "2100160",
    "end": "2105680"
  },
  {
    "text": "contact information here is the link to the code uh and thank you all so much for your",
    "start": "2105680",
    "end": "2112160"
  },
  {
    "text": "time any brave souls for questions otherwise we'll be in the Overflow room for Less brave souls that want to ask",
    "start": "2116400",
    "end": "2122280"
  },
  {
    "text": "questions any questions so far yes right here in the middle thank you um maybe one question um you set detect uh not",
    "start": "2122280",
    "end": "2130000"
  },
  {
    "text": "just in the aftermath but how do you want to use the tool as an active detection to see that somebody is",
    "start": "2130000",
    "end": "2137000"
  },
  {
    "text": "actually doing it right now like what would the setup look like yeah that's a great question so the way in which we",
    "start": "2137000",
    "end": "2143000"
  },
  {
    "text": "would actively use this would be whatever data source you have of your ldap search filters distinc those and",
    "start": "2143000",
    "end": "2149240"
  },
  {
    "text": "then piping them into this feval function and consuming those results so at least tell you hey these are the search filters that have a a high high",
    "start": "2149240",
    "end": "2155359"
  },
  {
    "text": "score now in the grand scheme of things if you have something like uh Defender Telemetry there's a lot more than just",
    "start": "2155359",
    "end": "2160640"
  },
  {
    "text": "the search filter you know Sai explained the base object the attribute selection even the process making that network",
    "start": "2160640",
    "end": "2166000"
  },
  {
    "text": "connection now you don't have you don't have the process element in server side logs that's why we focused everything just on the search filter and isolation",
    "start": "2166000",
    "end": "2172319"
  },
  {
    "text": "because that server that's all it's going to give us um but but yeah all those things together are really really important um did that sort of answer the",
    "start": "2172319",
    "end": "2180400"
  },
  {
    "text": "question yeah awesome uh I have a second question yeah you talked about aisc techniques for example adding leading",
    "start": "2180400",
    "end": "2187119"
  },
  {
    "text": "zero or adding the set in a time stamp which sounds really funny isn't that",
    "start": "2187119",
    "end": "2192280"
  },
  {
    "text": "already like a key giveaway for you as a Defender that's if somebody uses leading zeros or is that also that could",
    "start": "2192280",
    "end": "2199280"
  },
  {
    "text": "naturally happen in a in that environment yeah we've seen naturally",
    "start": "2199280",
    "end": "2204480"
  },
  {
    "text": "occurring um single zeros uh leading values uh like uh bitwise values",
    "start": "2204480",
    "end": "2210160"
  },
  {
    "text": "integers but no for the IDS uh we do not know of that occurring in the wild anywhere um so it it's a great question",
    "start": "2210160",
    "end": "2218200"
  },
  {
    "text": "like aisc like when you look at these examples they look pretty unhealthy like that is kind of the point but if there",
    "start": "2218200",
    "end": "2223880"
  },
  {
    "text": "are millions and millions and millions of these things flying around if a human eyeball doesn't see it then there's",
    "start": "2223880",
    "end": "2229079"
  },
  {
    "text": "never the opportunity to ascertain that it is unhealthy so that's why I think so I'm not a red teamer I'd love the inside",
    "start": "2229079",
    "end": "2234960"
  },
  {
    "text": "of red teamer in here but like I'm sure there's a trade-off like if you know you're going to get up against some really good defenses then maybe a very",
    "start": "2234960",
    "end": "2241200"
  },
  {
    "text": "specially crafted what I'd call like Tastefully off fiscated example might be enough just to bypass honestly just",
    "start": "2241200",
    "end": "2246680"
  },
  {
    "text": "instead of saying service principal name equals Wild Card using the oid might be enough the oid of the attribute mixed",
    "start": "2246680",
    "end": "2252640"
  },
  {
    "text": "with greater than equal to equal like that might be enough to to get around it so um so yeah the the the I assume the",
    "start": "2252640",
    "end": "2259520"
  },
  {
    "text": "objective for a red teamer is don't draw attention to this enough for eyeballs to look at it because if you got there then then you're burned yeah thanks a lot",
    "start": "2259520",
    "end": "2267040"
  },
  {
    "text": "yeah great questions thank you yes right over here do you reckon do you reckon it",
    "start": "2267040",
    "end": "2273760"
  },
  {
    "text": "would be possible to create um a KQ query with the upep search event that",
    "start": "2273760",
    "end": "2279480"
  },
  {
    "text": "would kind of score whether something was up fiscated in an LP search that might indicate um malicious",
    "start": "2279480",
    "end": "2288920"
  },
  {
    "text": "activity there there are certainly some things that you could do uh I mean so we built the parure to get to Crazy depths",
    "start": "2288920",
    "end": "2295480"
  },
  {
    "text": "of stuff like like counts of bulling operators in scope we have this concept of scope application versus scope syntax",
    "start": "2295480",
    "end": "2300920"
  },
  {
    "text": "there's a lot of weird stuff that probably no one will ever get to unless they built this tool so like uh what I",
    "start": "2300920",
    "end": "2306040"
  },
  {
    "text": "would say so uh first of all k freaking awesome language so there's a lot that you can do there um for example",
    "start": "2306040",
    "end": "2311720"
  },
  {
    "text": "if you have Defender Telemetry I'm assuming maybe that's the reason you're asking the question there's a lot you can do with kql for like the attribute",
    "start": "2311720",
    "end": "2317760"
  },
  {
    "text": "selection and the bass object stuff um like uh should base objects as Savi was talking about uh hex and coding should",
    "start": "2317760",
    "end": "2323839"
  },
  {
    "text": "you ever have hex in base object should you ever have more than two adjacent white spaces um probably not that that's",
    "start": "2323839",
    "end": "2330079"
  },
  {
    "text": "a very simple query whether you're using kql or Splunk or anything else um attribute selection as well like do you ever see dots anywhere in attributes",
    "start": "2330079",
    "end": "2336640"
  },
  {
    "text": "that's a dead giveaway for you're dealing with an oid uh notation do you ever see leading Whit space after one of those like um so there's a lot that you",
    "start": "2336640",
    "end": "2343160"
  },
  {
    "text": "can do there with those two elements um and there's a lot you can do with the search filter but just know that there's uh you use whatever tools you have at",
    "start": "2343160",
    "end": "2349680"
  },
  {
    "text": "your disposal uh there's some deeper insights we try to glean out with the parser but uh definitely using kql Straight against it would be a great",
    "start": "2349680",
    "end": "2356079"
  },
  {
    "text": "approach and we hope people will go and do that so okay so if I get it right you",
    "start": "2356079",
    "end": "2361119"
  },
  {
    "text": "haven't really looked at big data sets to see what kind of aisc happens in benign situations",
    "start": "2361119",
    "end": "2367839"
  },
  {
    "text": "we have never seen aisc in large data sets we do not have access to large data",
    "start": "2367839",
    "end": "2373200"
  },
  {
    "text": "sets directly we have friends who have run these things in large data sets and have not found anything all right thank you thank you",
    "start": "2373200",
    "end": "2380200"
  },
  {
    "text": "great question we have 20 seconds so I assume that means we're done with the questions",
    "start": "2380200",
    "end": "2385240"
  },
  {
    "text": "thank you again everyone so much we really had a lot of fun we'll be down here at the front afterwards thanks y'all",
    "start": "2385240",
    "end": "2392160"
  }
]