[
  {
    "text": "hi uh I'm Josh weedem and today I'll be",
    "start": "2679",
    "end": "5000"
  },
  {
    "text": "presenting py lingual a python",
    "start": "5000",
    "end": "6279"
  },
  {
    "text": "decompilation framework for evolving",
    "start": "6279",
    "end": "7799"
  },
  {
    "text": "python versions I'm a sec I'm going into",
    "start": "7799",
    "end": "11120"
  },
  {
    "text": "my third year as a mcdermit fellow at",
    "start": "11120",
    "end": "12679"
  },
  {
    "text": "the University of Texas at Dallas and if",
    "start": "12679",
    "end": "14200"
  },
  {
    "text": "you'll forgive me for a second to",
    "start": "14200",
    "end": "16000"
  },
  {
    "text": "shamelessly bat my eyes at recruiters uh",
    "start": "16000",
    "end": "17960"
  },
  {
    "text": "a lot of our team is students that are",
    "start": "17960",
    "end": "19960"
  },
  {
    "text": "graduating in the upcoming spring so",
    "start": "19960",
    "end": "22119"
  },
  {
    "text": "find us after in the rap rooms if you're",
    "start": "22119",
    "end": "23560"
  },
  {
    "text": "interested in Opportunities like that",
    "start": "23560",
    "end": "26000"
  },
  {
    "text": "let me get this",
    "start": "26000",
    "end": "28320"
  },
  {
    "text": "back am I in D right thing perfect okay",
    "start": "28320",
    "end": "32279"
  },
  {
    "text": "so how many of you guys use",
    "start": "32279",
    "end": "34040"
  },
  {
    "text": "Python a good number of you and for good",
    "start": "34040",
    "end": "36840"
  },
  {
    "text": "reason python is the most popular",
    "start": "36840",
    "end": "39480"
  },
  {
    "text": "programming language in the world making",
    "start": "39480",
    "end": "41920"
  },
  {
    "text": "up over or nearly 30% of programming",
    "start": "41920",
    "end": "44559"
  },
  {
    "text": "tutorial searches as of last month and",
    "start": "44559",
    "end": "47120"
  },
  {
    "text": "lots of let me get this actually working",
    "start": "47120",
    "end": "50600"
  },
  {
    "text": "if I",
    "start": "50600",
    "end": "52199"
  },
  {
    "text": "can there we go lots of python",
    "start": "52199",
    "end": "54920"
  },
  {
    "text": "programmers means lots of python malware",
    "start": "54920",
    "end": "57399"
  },
  {
    "text": "so from baby's first Discord scam to",
    "start": "57399",
    "end": "59559"
  },
  {
    "text": "sophis at thre vectors python malware",
    "start": "59559",
    "end": "61559"
  },
  {
    "text": "samples are popping up more and more",
    "start": "61559",
    "end": "63079"
  },
  {
    "text": "these days here's one it's just a simple",
    "start": "63079",
    "end": "66680"
  },
  {
    "text": "dropper it disables some local defenses",
    "start": "66680",
    "end": "69040"
  },
  {
    "text": "downloads some code from the internet",
    "start": "69040",
    "end": "70280"
  },
  {
    "text": "and runs it the details aren't too",
    "start": "70280",
    "end": "72159"
  },
  {
    "text": "important but we're going to use its",
    "start": "72159",
    "end": "74080"
  },
  {
    "text": "simpler functions to illustrate python",
    "start": "74080",
    "end": "75600"
  },
  {
    "text": "decompilation",
    "start": "75600",
    "end": "76920"
  },
  {
    "text": "techniques let's start by zooming out to",
    "start": "76920",
    "end": "79200"
  },
  {
    "text": "the code object hierarchy in Python B",
    "start": "79200",
    "end": "81920"
  },
  {
    "text": "code every single class function",
    "start": "81920",
    "end": "85240"
  },
  {
    "text": "comprehension and so on is a code object",
    "start": "85240",
    "end": "88159"
  },
  {
    "text": "by looking at where these code objects",
    "start": "88159",
    "end": "89640"
  },
  {
    "text": "are find you get a treat the code object",
    "start": "89640",
    "end": "91680"
  },
  {
    "text": "hierarchy fortunately all the structure",
    "start": "91680",
    "end": "94119"
  },
  {
    "text": "is given to us for free by the uh by a",
    "start": "94119",
    "end": "97320"
  },
  {
    "text": "cpython so we get to live in a nicer",
    "start": "97320",
    "end": "99880"
  },
  {
    "text": "world than the r folks this",
    "start": "99880",
    "end": "102360"
  },
  {
    "text": "morning also importantly code object can",
    "start": "102360",
    "end": "104759"
  },
  {
    "text": "be considered independently when",
    "start": "104759",
    "end": "106840"
  },
  {
    "text": "decompiling let's zoom in on the extract",
    "start": "106840",
    "end": "109119"
  },
  {
    "text": "zip function since it's the simplest",
    "start": "109119",
    "end": "110680"
  },
  {
    "text": "function here it only has two lines of",
    "start": "110680",
    "end": "112360"
  },
  {
    "text": "code so we're going to walk through it",
    "start": "112360",
    "end": "113840"
  },
  {
    "text": "manually to build some intuition and",
    "start": "113840",
    "end": "116759"
  },
  {
    "text": "fluency as we get started two things to",
    "start": "116759",
    "end": "119119"
  },
  {
    "text": "keep in mind the python interpreter is a",
    "start": "119119",
    "end": "121600"
  },
  {
    "text": "stack machine and it's helpful to",
    "start": "121600",
    "end": "123680"
  },
  {
    "text": "decompile statement fragments and put",
    "start": "123680",
    "end": "125240"
  },
  {
    "text": "them together as you go so the first",
    "start": "125240",
    "end": "127479"
  },
  {
    "text": "thing we see is we're loading a global",
    "start": "127479",
    "end": "129200"
  },
  {
    "text": "zip file symbol and the capital zip file",
    "start": "129200",
    "end": "132959"
  },
  {
    "text": "method then we're loading another zip",
    "start": "132959",
    "end": "135879"
  },
  {
    "text": "file attribute why do they keep naming",
    "start": "135879",
    "end": "137959"
  },
  {
    "text": "these things the same thing uh it's",
    "start": "137959",
    "end": "140480"
  },
  {
    "text": "their problem not mine the and we get a",
    "start": "140480",
    "end": "143160"
  },
  {
    "text": "string R and we're going to call a",
    "start": "143160",
    "end": "144760"
  },
  {
    "text": "method off the top of the stack putting",
    "start": "144760",
    "end": "146800"
  },
  {
    "text": "that together and this is starting to",
    "start": "146800",
    "end": "148040"
  },
  {
    "text": "look like python",
    "start": "148040",
    "end": "150040"
  },
  {
    "text": "the next thing we see is the setup width",
    "start": "150040",
    "end": "151640"
  },
  {
    "text": "op code which unsurprisingly is related",
    "start": "151640",
    "end": "153400"
  },
  {
    "text": "to Wi blocks we'll get to the real",
    "start": "153400",
    "end": "155440"
  },
  {
    "text": "implementation later so put a pin in",
    "start": "155440",
    "end": "157360"
  },
  {
    "text": "that and that's our first statement",
    "start": "157360",
    "end": "159760"
  },
  {
    "text": "decompiled or first yeah that's our",
    "start": "159760",
    "end": "161800"
  },
  {
    "text": "first statement we'll go through the",
    "start": "161800",
    "end": "163360"
  },
  {
    "text": "next one a little bit",
    "start": "163360",
    "end": "164599"
  },
  {
    "text": "faster we start by loading the zi.",
    "start": "164599",
    "end": "167440"
  },
  {
    "text": "extract all a standalone extract two",
    "start": "167440",
    "end": "169840"
  },
  {
    "text": "value and a quick function call and that",
    "start": "169840",
    "end": "172680"
  },
  {
    "text": "gets all wrapped up in a nested function",
    "start": "172680",
    "end": "175239"
  },
  {
    "text": "call it's going a little bit quickly and",
    "start": "175239",
    "end": "178280"
  },
  {
    "text": "the rest of this bite code is is all",
    "start": "178280",
    "end": "180200"
  },
  {
    "text": "implicit that's to implement the cleanup",
    "start": "180200",
    "end": "181920"
  },
  {
    "text": "Logic for the wh statement we saw",
    "start": "181920",
    "end": "184080"
  },
  {
    "text": "earlier so now we have completed the",
    "start": "184080",
    "end": "186720"
  },
  {
    "text": "decompiling of one simple python",
    "start": "186720",
    "end": "189560"
  },
  {
    "text": "function in just 10 slides we've",
    "start": "189560",
    "end": "192000"
  },
  {
    "text": "decompiled two lines of python code so",
    "start": "192000",
    "end": "194040"
  },
  {
    "text": "if you'll bear with me for the next 500",
    "start": "194040",
    "end": "195599"
  },
  {
    "text": "slides uh we are going to walk through",
    "start": "195599",
    "end": "198280"
  },
  {
    "text": "the rest of this simple dropper mware uh",
    "start": "198280",
    "end": "201280"
  },
  {
    "text": "unfortunately the timer that the",
    "start": "201280",
    "end": "202680"
  },
  {
    "text": "production crew is showing me uh says we",
    "start": "202680",
    "end": "204760"
  },
  {
    "text": "don't have time for that so let's use a",
    "start": "204760",
    "end": "207000"
  },
  {
    "text": "decompiler uncomp 6 and decompile 3 are",
    "start": "207000",
    "end": "210200"
  },
  {
    "text": "the most well-known and well respected",
    "start": "210200",
    "end": "211760"
  },
  {
    "text": "names in Python B code decompilation but",
    "start": "211760",
    "end": "214799"
  },
  {
    "text": "un unfortunately they don't support",
    "start": "214799",
    "end": "216439"
  },
  {
    "text": "python 3.10 yet Rocky is working on it",
    "start": "216439",
    "end": "219120"
  },
  {
    "text": "and he's always looking for helpful",
    "start": "219120",
    "end": "220680"
  },
  {
    "text": "hands so if you're interested in",
    "start": "220680",
    "end": "221760"
  },
  {
    "text": "contributing go ahead and give him a",
    "start": "221760",
    "end": "225239"
  },
  {
    "text": "shout pcdc is another python decompiler",
    "start": "225239",
    "end": "228519"
  },
  {
    "text": "that aims to support every python",
    "start": "228519",
    "end": "229920"
  },
  {
    "text": "version but here the coverage of",
    "start": "229920",
    "end": "232319"
  },
  {
    "text": "language features suffers and it doesn't",
    "start": "232319",
    "end": "234799"
  },
  {
    "text": "know all the op codes so we're still",
    "start": "234799",
    "end": "237200"
  },
  {
    "text": "left unable to decompile our simple",
    "start": "237200",
    "end": "238760"
  },
  {
    "text": "dropper malware",
    "start": "238760",
    "end": "241400"
  },
  {
    "text": "so what's the problem we just did this",
    "start": "241400",
    "end": "243400"
  },
  {
    "text": "with our hands it can't be that",
    "start": "243400",
    "end": "245360"
  },
  {
    "text": "hard python B code changes a lot every",
    "start": "245360",
    "end": "249680"
  },
  {
    "text": "version just the op codes the",
    "start": "249680",
    "end": "251799"
  },
  {
    "text": "instructions available not even talking",
    "start": "251799",
    "end": "253360"
  },
  {
    "text": "about code generation changes or new",
    "start": "253360",
    "end": "254760"
  },
  {
    "text": "language features uh those OP codes are",
    "start": "254760",
    "end": "256880"
  },
  {
    "text": "changing every version historically it's",
    "start": "256880",
    "end": "258880"
  },
  {
    "text": "been about 10% of the specification",
    "start": "258880",
    "end": "260400"
  },
  {
    "text": "that's changing but especially in the",
    "start": "260400",
    "end": "261799"
  },
  {
    "text": "past couple of years we've seen dramatic",
    "start": "261799",
    "end": "264000"
  },
  {
    "text": "changes uh to the B code specification",
    "start": "264000",
    "end": "266080"
  },
  {
    "text": "which has really hindered the",
    "start": "266080",
    "end": "267960"
  },
  {
    "text": "scalability of Python",
    "start": "267960",
    "end": "271240"
  },
  {
    "text": "decompilers and not only are those",
    "start": "271240",
    "end": "273520"
  },
  {
    "text": "versions changing the python bite code",
    "start": "273520",
    "end": "275400"
  },
  {
    "text": "dramatically they're coming out every",
    "start": "275400",
    "end": "276680"
  },
  {
    "text": "year so it's really hard to keep up",
    "start": "276680",
    "end": "278759"
  },
  {
    "text": "maybe if you can afford a full-time",
    "start": "278759",
    "end": "280240"
  },
  {
    "text": "python reverse engineer and if you can",
    "start": "280240",
    "end": "283000"
  },
  {
    "text": "come find me after I'll give you a",
    "start": "283000",
    "end": "284280"
  },
  {
    "text": "business",
    "start": "284280",
    "end": "285360"
  },
  {
    "text": "card but anyway faced with this problem",
    "start": "285360",
    "end": "288520"
  },
  {
    "text": "I did what any scrapping young",
    "start": "288520",
    "end": "289840"
  },
  {
    "text": "programmer does I sat down rolled up my",
    "start": "289840",
    "end": "292360"
  },
  {
    "text": "sleeves and ask chat GPT and",
    "start": "292360",
    "end": "296400"
  },
  {
    "text": "surprisingly that looks exactly like the",
    "start": "296400",
    "end": "299039"
  },
  {
    "text": "code that we just decompiled and if you",
    "start": "299039",
    "end": "300800"
  },
  {
    "text": "read through it it's it is the exact",
    "start": "300800",
    "end": "302160"
  },
  {
    "text": "same it's correct in this case so are we",
    "start": "302160",
    "end": "305199"
  },
  {
    "text": "done can we just throw all the",
    "start": "305199",
    "end": "306199"
  },
  {
    "text": "decompilation jobs to chap",
    "start": "306199",
    "end": "308039"
  },
  {
    "text": "GPT unfortunately no we're uh we're not",
    "start": "308039",
    "end": "311039"
  },
  {
    "text": "quite there yet on this toy example and",
    "start": "311039",
    "end": "315039"
  },
  {
    "text": "most code that doesn't fit on a slide",
    "start": "315039",
    "end": "317479"
  },
  {
    "text": "generic large language models start",
    "start": "317479",
    "end": "318840"
  },
  {
    "text": "making significant mistakes they're not",
    "start": "318840",
    "end": "321080"
  },
  {
    "text": "built for this but they're trying their",
    "start": "321080",
    "end": "323400"
  },
  {
    "text": "best but just because AI is not a silver",
    "start": "323400",
    "end": "326720"
  },
  {
    "text": "bullet doesn't mean there's nothing here",
    "start": "326720",
    "end": "329080"
  },
  {
    "text": "language model are really good at",
    "start": "329080",
    "end": "330520"
  },
  {
    "text": "pattern recognition and filling in the",
    "start": "330520",
    "end": "332080"
  },
  {
    "text": "gaps they're",
    "start": "332080",
    "end": "334199"
  },
  {
    "text": "flexible decompiler programs are great",
    "start": "334199",
    "end": "337000"
  },
  {
    "text": "at consistent data Transformations at",
    "start": "337000",
    "end": "338840"
  },
  {
    "text": "scale they're rigid and they're precise",
    "start": "338840",
    "end": "341600"
  },
  {
    "text": "combining these ideas we can make an",
    "start": "341600",
    "end": "343919"
  },
  {
    "text": "alter and decompiler that naturally",
    "start": "343919",
    "end": "346600"
  },
  {
    "text": "adapts to superficial or Surface level",
    "start": "346600",
    "end": "348960"
  },
  {
    "text": "changes in the bite code",
    "start": "348960",
    "end": "350919"
  },
  {
    "text": "specification and so I introduced",
    "start": "350919",
    "end": "352600"
  },
  {
    "text": "bilingual a neural decompilation",
    "start": "352600",
    "end": "354440"
  },
  {
    "text": "framework for python bite code that",
    "start": "354440",
    "end": "356080"
  },
  {
    "text": "breaks the breaks the decompilation task",
    "start": "356080",
    "end": "358759"
  },
  {
    "text": "into three components",
    "start": "358759",
    "end": "360199"
  },
  {
    "text": "by code segmentation statement",
    "start": "360199",
    "end": "361840"
  },
  {
    "text": "translation and control flow",
    "start": "361840",
    "end": "363800"
  },
  {
    "text": "reconstruction let's start with",
    "start": "363800",
    "end": "366000"
  },
  {
    "text": "segmentation simplification is the name",
    "start": "366000",
    "end": "368120"
  },
  {
    "text": "of the game we want to cut up the bite",
    "start": "368120",
    "end": "371000"
  },
  {
    "text": "code into chunks that correspond roughly",
    "start": "371000",
    "end": "374199"
  },
  {
    "text": "with Source level",
    "start": "374199",
    "end": "376520"
  },
  {
    "text": "statements the best way for us to learn",
    "start": "376520",
    "end": "379440"
  },
  {
    "text": "that Association is to let the compiler",
    "start": "379440",
    "end": "381840"
  },
  {
    "text": "tell",
    "start": "381840",
    "end": "382840"
  },
  {
    "text": "us the line number table is a debug",
    "start": "382840",
    "end": "385560"
  },
  {
    "text": "symbol that many of you may be familiar",
    "start": "385560",
    "end": "387160"
  },
  {
    "text": "with uh it's used for localizing",
    "start": "387160",
    "end": "389599"
  },
  {
    "text": "exceptions so if you've ever seen error",
    "start": "389599",
    "end": "391400"
  },
  {
    "text": "on line 23 the line number table is",
    "start": "391400",
    "end": "393240"
  },
  {
    "text": "where that's coming",
    "start": "393240",
    "end": "394759"
  },
  {
    "text": "from so unfortunately lines aren't",
    "start": "394759",
    "end": "398120"
  },
  {
    "text": "statements uh you can have multiple",
    "start": "398120",
    "end": "400080"
  },
  {
    "text": "statements on one line or more commonly",
    "start": "400080",
    "end": "403199"
  },
  {
    "text": "your linter probably does this for you",
    "start": "403199",
    "end": "405039"
  },
  {
    "text": "uh you can have one line or one",
    "start": "405039",
    "end": "406639"
  },
  {
    "text": "statement spread across multiple lines",
    "start": "406639",
    "end": "408080"
  },
  {
    "text": "if you have a large dictionary or a",
    "start": "408080",
    "end": "409680"
  },
  {
    "text": "large function",
    "start": "409680",
    "end": "411240"
  },
  {
    "text": "call and also in the in the wild the",
    "start": "411240",
    "end": "414160"
  },
  {
    "text": "line number table could be arbitrarily",
    "start": "414160",
    "end": "415560"
  },
  {
    "text": "manipulated so we can't we can't trust",
    "start": "415560",
    "end": "417639"
  },
  {
    "text": "it in a controlled environment though",
    "start": "417639",
    "end": "420160"
  },
  {
    "text": "statements can be lines using some",
    "start": "420160",
    "end": "422280"
  },
  {
    "text": "syntaxe Transformations we can put every",
    "start": "422280",
    "end": "424520"
  },
  {
    "text": "single statement on its own line and get",
    "start": "424520",
    "end": "426599"
  },
  {
    "text": "a consistent and reliable mapping",
    "start": "426599",
    "end": "428400"
  },
  {
    "text": "between bite code instructions and",
    "start": "428400",
    "end": "431000"
  },
  {
    "text": "source code statements using that",
    "start": "431000",
    "end": "433520"
  },
  {
    "text": "Association we can build a data set to",
    "start": "433520",
    "end": "436240"
  },
  {
    "text": "train a small language model to predict",
    "start": "436240",
    "end": "438639"
  },
  {
    "text": "these statement boundaries uh ber is a",
    "start": "438639",
    "end": "441639"
  },
  {
    "text": "older architecture that's been around",
    "start": "441639",
    "end": "443440"
  },
  {
    "text": "for a while it's only about 110 million",
    "start": "443440",
    "end": "445680"
  },
  {
    "text": "parameters compare that to 1 two three",
    "start": "445680",
    "end": "449960"
  },
  {
    "text": "billion parameters for the small end of",
    "start": "449960",
    "end": "451560"
  },
  {
    "text": "large language models these days uh but",
    "start": "451560",
    "end": "454120"
  },
  {
    "text": "it's helpful for us so now that we have",
    "start": "454120",
    "end": "456479"
  },
  {
    "text": "these statement level chunks we can",
    "start": "456479",
    "end": "459440"
  },
  {
    "text": "translate them into source code to do",
    "start": "459440",
    "end": "462599"
  },
  {
    "text": "this we're going to borrow out of the",
    "start": "462599",
    "end": "464720"
  },
  {
    "text": "box uh techniques from natural language",
    "start": "464720",
    "end": "466879"
  },
  {
    "text": "processing since translation has been",
    "start": "466879",
    "end": "468639"
  },
  {
    "text": "studied there as a core problem for many",
    "start": "468639",
    "end": "470680"
  },
  {
    "text": "years and there's a lot of subtasks that",
    "start": "470680",
    "end": "473120"
  },
  {
    "text": "are shared between code translation and",
    "start": "473120",
    "end": "475440"
  },
  {
    "text": "natural language",
    "start": "475440",
    "end": "476960"
  },
  {
    "text": "translation you have simple translation",
    "start": "476960",
    "end": "479199"
  },
  {
    "text": "where words are directly translated one",
    "start": "479199",
    "end": "480960"
  },
  {
    "text": "for",
    "start": "480960",
    "end": "482840"
  },
  {
    "text": "one proper nouns or in our case strings",
    "start": "482840",
    "end": "486680"
  },
  {
    "text": "variable names and so on can be",
    "start": "486680",
    "end": "488639"
  },
  {
    "text": "reordered copied moved",
    "start": "488639",
    "end": "491720"
  },
  {
    "text": "around and you can also have semantics",
    "start": "491720",
    "end": "494599"
  },
  {
    "text": "that are implied purely from",
    "start": "494599",
    "end": "497400"
  },
  {
    "text": "Context taking advantage of these",
    "start": "497400",
    "end": "499599"
  },
  {
    "text": "capabilities and using the bite code",
    "start": "499599",
    "end": "502680"
  },
  {
    "text": "source code data set that we produced",
    "start": "502680",
    "end": "504560"
  },
  {
    "text": "earlier we can simply train a statement",
    "start": "504560",
    "end": "506840"
  },
  {
    "text": "translation model out of the box to",
    "start": "506840",
    "end": "509000"
  },
  {
    "text": "translate python B code unfortunately",
    "start": "509000",
    "end": "512080"
  },
  {
    "text": "the performance is never great out of",
    "start": "512080",
    "end": "514159"
  },
  {
    "text": "the box so we play some tricks I can't",
    "start": "514159",
    "end": "516518"
  },
  {
    "text": "go into full detail of all of these",
    "start": "516519",
    "end": "518599"
  },
  {
    "text": "things right now but the details are",
    "start": "518599",
    "end": "520518"
  },
  {
    "text": "available in the white paper we",
    "start": "520519",
    "end": "522440"
  },
  {
    "text": "normalize the bite code to hide some",
    "start": "522440",
    "end": "525080"
  },
  {
    "text": "distracting details and reduce the",
    "start": "525080",
    "end": "526640"
  },
  {
    "text": "variance that we show to the models we",
    "start": "526640",
    "end": "528560"
  },
  {
    "text": "try several candidate segmentations to",
    "start": "528560",
    "end": "530399"
  },
  {
    "text": "see if we can find one that works and we",
    "start": "530399",
    "end": "532880"
  },
  {
    "text": "also include a statement corrector model",
    "start": "532880",
    "end": "534600"
  },
  {
    "text": "to spend additional compute on harder",
    "start": "534600",
    "end": "536279"
  },
  {
    "text": "problems",
    "start": "536279",
    "end": "539279"
  },
  {
    "text": "now that we have that flat list of",
    "start": "540240",
    "end": "542560"
  },
  {
    "text": "source code statements and their",
    "start": "542560",
    "end": "543959"
  },
  {
    "text": "association with the B code we can piece",
    "start": "543959",
    "end": "546360"
  },
  {
    "text": "together a complete Python",
    "start": "546360",
    "end": "548920"
  },
  {
    "text": "program so from this flat list we're",
    "start": "548920",
    "end": "551800"
  },
  {
    "text": "trying to get here flat list right here",
    "start": "551800",
    "end": "555200"
  },
  {
    "text": "the first thing to do in this process is",
    "start": "555200",
    "end": "557160"
  },
  {
    "text": "to understand the control flow in the",
    "start": "557160",
    "end": "558360"
  },
  {
    "text": "bite code we're going to ignore all of",
    "start": "558360",
    "end": "561160"
  },
  {
    "text": "the non-control flow instructions here",
    "start": "561160",
    "end": "563600"
  },
  {
    "text": "coming up to the setup with it's going",
    "start": "563600",
    "end": "565120"
  },
  {
    "text": "to prepare an exception Handler an",
    "start": "565120",
    "end": "567120"
  },
  {
    "text": "exception Handler block which",
    "start": "567120",
    "end": "570040"
  },
  {
    "text": "will continue until we see this pop",
    "start": "570040",
    "end": "571519"
  },
  {
    "text": "block instruction and as long as there's",
    "start": "571519",
    "end": "573760"
  },
  {
    "text": "no exceptions we can continue on to the",
    "start": "573760",
    "end": "575360"
  },
  {
    "text": "end of the function and return when",
    "start": "575360",
    "end": "577680"
  },
  {
    "text": "there is an exception we have to perform",
    "start": "577680",
    "end": "579560"
  },
  {
    "text": "the actual width the manual width",
    "start": "579560",
    "end": "581880"
  },
  {
    "text": "cleanup and depending on the return",
    "start": "581880",
    "end": "583839"
  },
  {
    "text": "value of that Dunder exit which",
    "start": "583839",
    "end": "586600"
  },
  {
    "text": "implements the withd cleanup will either",
    "start": "586600",
    "end": "588760"
  },
  {
    "text": "rease the exception or continue to the",
    "start": "588760",
    "end": "591680"
  },
  {
    "text": "end of the function and this return",
    "start": "591680",
    "end": "593279"
  },
  {
    "text": "value is actually duplicated because",
    "start": "593279",
    "end": "594839"
  },
  {
    "text": "it's a short enough code segment and the",
    "start": "594839",
    "end": "596560"
  },
  {
    "text": "ex function exits immediately anyway",
    "start": "596560",
    "end": "600440"
  },
  {
    "text": "so when we're trying to reconstruct",
    "start": "600440",
    "end": "602560"
  },
  {
    "text": "those control Scopes the important",
    "start": "602560",
    "end": "604760"
  },
  {
    "text": "question to ask is who decides when each",
    "start": "604760",
    "end": "607480"
  },
  {
    "text": "node",
    "start": "607480",
    "end": "609079"
  },
  {
    "text": "executes starting from the bottom this",
    "start": "609079",
    "end": "612240"
  },
  {
    "text": "the reays and the return value are",
    "start": "612240",
    "end": "614040"
  },
  {
    "text": "decided by the return value of the withd",
    "start": "614040",
    "end": "616959"
  },
  {
    "text": "cleanup it's either going to go and re",
    "start": "616959",
    "end": "619200"
  },
  {
    "text": "raise the exception or it's going to go",
    "start": "619200",
    "end": "620720"
  },
  {
    "text": "to the return",
    "start": "620720",
    "end": "621920"
  },
  {
    "text": "value the rest of these blocks are",
    "start": "621920",
    "end": "624240"
  },
  {
    "text": "actually decided by the set of width",
    "start": "624240",
    "end": "625720"
  },
  {
    "text": "because that's that's the node that's",
    "start": "625720",
    "end": "627519"
  },
  {
    "text": "preparing the exception Handler that",
    "start": "627519",
    "end": "628920"
  },
  {
    "text": "could CA them not to",
    "start": "628920",
    "end": "630600"
  },
  {
    "text": "execute now let's play a little bit of",
    "start": "630600",
    "end": "632720"
  },
  {
    "text": "dress up uh I'm going to change the",
    "start": "632720",
    "end": "635200"
  },
  {
    "text": "shape of this graph but it's going to be",
    "start": "635200",
    "end": "636639"
  },
  {
    "text": "the same I promise and we're going to",
    "start": "636639",
    "end": "639519"
  },
  {
    "text": "annotate each node with the source code",
    "start": "639519",
    "end": "641680"
  },
  {
    "text": "that is associated with that with that",
    "start": "641680",
    "end": "645079"
  },
  {
    "text": "node and this is starting to look a lot",
    "start": "645079",
    "end": "647279"
  },
  {
    "text": "more like what we saw originally and",
    "start": "647279",
    "end": "649600"
  },
  {
    "text": "you'll notice that some of these nodes",
    "start": "649600",
    "end": "650760"
  },
  {
    "text": "are even implicit with no source code",
    "start": "650760",
    "end": "652360"
  },
  {
    "text": "directly associated with",
    "start": "652360",
    "end": "653800"
  },
  {
    "text": "them the important thing to note here is",
    "start": "653800",
    "end": "656240"
  },
  {
    "text": "that when nothing crazy is going on the",
    "start": "656240",
    "end": "659760"
  },
  {
    "text": "indentation level at the source code is",
    "start": "659760",
    "end": "663079"
  },
  {
    "text": "pretty tightly coupled with the depth in",
    "start": "663079",
    "end": "665760"
  },
  {
    "text": "the control dependence graph so we can",
    "start": "665760",
    "end": "667680"
  },
  {
    "text": "see at level one we have the withd",
    "start": "667680",
    "end": "669959"
  },
  {
    "text": "header and at level two we have the with",
    "start": "669959",
    "end": "672639"
  },
  {
    "text": "body reconstructing that control flow",
    "start": "672639",
    "end": "675120"
  },
  {
    "text": "and we we get that one indexation level",
    "start": "675120",
    "end": "677839"
  },
  {
    "text": "so all that for this uh it's",
    "start": "677839",
    "end": "681040"
  },
  {
    "text": "helpful and it gets us to where we're",
    "start": "681040",
    "end": "683360"
  },
  {
    "text": "going so to summarize we've segmented",
    "start": "683360",
    "end": "686279"
  },
  {
    "text": "the bite code into statement level",
    "start": "686279",
    "end": "687680"
  },
  {
    "text": "chunks translated each of those",
    "start": "687680",
    "end": "689800"
  },
  {
    "text": "statements one by one into source code",
    "start": "689800",
    "end": "692360"
  },
  {
    "text": "and then stitch together those source",
    "start": "692360",
    "end": "694240"
  },
  {
    "text": "code statements to form a complete",
    "start": "694240",
    "end": "695600"
  },
  {
    "text": "Python",
    "start": "695600",
    "end": "696760"
  },
  {
    "text": "program now equipped with a flexible",
    "start": "696760",
    "end": "699279"
  },
  {
    "text": "python decompiler we're ready for the",
    "start": "699279",
    "end": "700800"
  },
  {
    "text": "rest of the example and so I'll give a",
    "start": "700800",
    "end": "702959"
  },
  {
    "text": "quick demo of the web service So",
    "start": "702959",
    "end": "706000"
  },
  {
    "text": "currently py lingual is available freely",
    "start": "706000",
    "end": "707800"
  },
  {
    "text": "as a public web service at ping.io and",
    "start": "707800",
    "end": "710200"
  },
  {
    "text": "we're committed to open sourcing by the",
    "start": "710200",
    "end": "711680"
  },
  {
    "text": "end of the year so keep your keep tabs",
    "start": "711680",
    "end": "714200"
  },
  {
    "text": "on that we'll get back to you we detect",
    "start": "714200",
    "end": "717120"
  },
  {
    "text": "the version of the Python B code by",
    "start": "717120",
    "end": "719040"
  },
  {
    "text": "using using the magic number magic",
    "start": "719040",
    "end": "720880"
  },
  {
    "text": "number at the start of the file load the",
    "start": "720880",
    "end": "723120"
  },
  {
    "text": "appropriate models process it send it",
    "start": "723120",
    "end": "726279"
  },
  {
    "text": "through the pipeline that we just",
    "start": "726279",
    "end": "727600"
  },
  {
    "text": "discussed and now we have some some",
    "start": "727600",
    "end": "730480"
  },
  {
    "text": "python source code",
    "start": "730480",
    "end": "732720"
  },
  {
    "text": "perfect hooray",
    "start": "732720",
    "end": "735040"
  },
  {
    "text": "automation so we've now fully decompiled",
    "start": "735040",
    "end": "738399"
  },
  {
    "text": "this uh this file but we're still left",
    "start": "738399",
    "end": "740920"
  },
  {
    "text": "with one big question does it",
    "start": "740920",
    "end": "745480"
  },
  {
    "text": "work the more skeptical more skeptical",
    "start": "745959",
    "end": "748680"
  },
  {
    "text": "people among you might be uh doubtful of",
    "start": "748680",
    "end": "750800"
  },
  {
    "text": "the use of language models and",
    "start": "750800",
    "end": "751920"
  },
  {
    "text": "statistical approximation in Z",
    "start": "751920",
    "end": "754160"
  },
  {
    "text": "compilers and rightly so you shouldn't",
    "start": "754160",
    "end": "756480"
  },
  {
    "text": "trust the outputs of language models so",
    "start": "756480",
    "end": "758720"
  },
  {
    "text": "we need to verify the outputs of the",
    "start": "758720",
    "end": "760639"
  },
  {
    "text": "decompiler not just in our lab not just",
    "start": "760639",
    "end": "762760"
  },
  {
    "text": "for our evaluation for the papers but",
    "start": "762760",
    "end": "765320"
  },
  {
    "text": "for you for your",
    "start": "765320",
    "end": "767000"
  },
  {
    "text": "files we could do manual verification uh",
    "start": "767000",
    "end": "770199"
  },
  {
    "text": "but unfortunately that's labor intensive",
    "start": "770199",
    "end": "772600"
  },
  {
    "text": "error prone it doesn't scale I can't go",
    "start": "772600",
    "end": "775079"
  },
  {
    "text": "and look through every single file that",
    "start": "775079",
    "end": "776519"
  },
  {
    "text": "someone wants to decompile eventually I",
    "start": "776519",
    "end": "778600"
  },
  {
    "text": "will grow old and die um and if you",
    "start": "778600",
    "end": "782760"
  },
  {
    "text": "could look through the B code and",
    "start": "782760",
    "end": "784160"
  },
  {
    "text": "manually verify it efficiently why do",
    "start": "784160",
    "end": "786160"
  },
  {
    "text": "you need a",
    "start": "786160",
    "end": "788519"
  },
  {
    "text": "decompiler another popular method of",
    "start": "788720",
    "end": "790720"
  },
  {
    "text": "verifying decompiler outputs is",
    "start": "790720",
    "end": "792560"
  },
  {
    "text": "equivalence module inputs basically",
    "start": "792560",
    "end": "794839"
  },
  {
    "text": "running the original program and the",
    "start": "794839",
    "end": "797040"
  },
  {
    "text": "decompiled program with the same inputs",
    "start": "797040",
    "end": "799160"
  },
  {
    "text": "and making sure that you get the same",
    "start": "799160",
    "end": "801639"
  },
  {
    "text": "outputs there are some limitations here",
    "start": "801639",
    "end": "804320"
  },
  {
    "text": "one it's it's expensive to",
    "start": "804320",
    "end": "806240"
  },
  {
    "text": "run it requires me to actually run the",
    "start": "806240",
    "end": "809600"
  },
  {
    "text": "code that you guys are uploading and I'm",
    "start": "809600",
    "end": "812320"
  },
  {
    "text": "ready to host a decompiler service but",
    "start": "812320",
    "end": "814079"
  },
  {
    "text": "I'm not ready to host remote ex remote",
    "start": "814079",
    "end": "816000"
  },
  {
    "text": "code execution as a service",
    "start": "816000",
    "end": "817959"
  },
  {
    "text": "yet and the equivalence guarantees that",
    "start": "817959",
    "end": "820320"
  },
  {
    "text": "you get are limited to the inputs that",
    "start": "820320",
    "end": "822079"
  },
  {
    "text": "you test in the environment that you",
    "start": "822079",
    "end": "823440"
  },
  {
    "text": "test them so you get weak guarantees",
    "start": "823440",
    "end": "827079"
  },
  {
    "text": "it's expensive it's not what we're",
    "start": "827079",
    "end": "828680"
  },
  {
    "text": "looking for so let's shoot for the moon",
    "start": "828680",
    "end": "831399"
  },
  {
    "text": "let's shoot for perfect decompilation",
    "start": "831399",
    "end": "833120"
  },
  {
    "text": "it's an old idea that's gone by many",
    "start": "833120",
    "end": "834680"
  },
  {
    "text": "names exact decompilation absolute",
    "start": "834680",
    "end": "836519"
  },
  {
    "text": "decompilation bwise equivalents the main",
    "start": "836519",
    "end": "839440"
  },
  {
    "text": "idea is that a decompiler undoes a",
    "start": "839440",
    "end": "842959"
  },
  {
    "text": "compiler's work so a compiler should be",
    "start": "842959",
    "end": "845000"
  },
  {
    "text": "able to redo it and get the same result",
    "start": "845000",
    "end": "847440"
  },
  {
    "text": "so we recompile the decompiled source",
    "start": "847440",
    "end": "849560"
  },
  {
    "text": "code and compare it with the original",
    "start": "849560",
    "end": "851720"
  },
  {
    "text": "instruction by instruction and making",
    "start": "851720",
    "end": "853680"
  },
  {
    "text": "sure we have an exact",
    "start": "853680",
    "end": "855639"
  },
  {
    "text": "match using this perfect decompilation",
    "start": "855639",
    "end": "858000"
  },
  {
    "text": "metric we can we can finally verify that",
    "start": "858000",
    "end": "860680"
  },
  {
    "text": "we did decompile the original code",
    "start": "860680",
    "end": "863519"
  },
  {
    "text": "correctly and also using that perfect",
    "start": "863519",
    "end": "865600"
  },
  {
    "text": "decompilation metric we are able to",
    "start": "865600",
    "end": "867800"
  },
  {
    "text": "evaluate the pingal decompiler alongside",
    "start": "867800",
    "end": "870560"
  },
  {
    "text": "the existing decompilers on a sample of",
    "start": "870560",
    "end": "872680"
  },
  {
    "text": "3,000 brandom files from the python",
    "start": "872680",
    "end": "874519"
  },
  {
    "text": "package index it's where you go when you",
    "start": "874519",
    "end": "876160"
  },
  {
    "text": "pip install",
    "start": "876160",
    "end": "878160"
  },
  {
    "text": "anything we see that pil lingual is able",
    "start": "878160",
    "end": "880279"
  },
  {
    "text": "to consistently provide best-in-class",
    "start": "880279",
    "end": "881880"
  },
  {
    "text": "performance across versions 3.6 through",
    "start": "881880",
    "end": "884000"
  },
  {
    "text": "3.12 which is the versions that we cover",
    "start": "884000",
    "end": "885959"
  },
  {
    "text": "right now uh but to put a little bit of",
    "start": "885959",
    "end": "888440"
  },
  {
    "text": "context on these numbers uncomp 6 still",
    "start": "888440",
    "end": "890720"
  },
  {
    "text": "has great historical version coverage",
    "start": "890720",
    "end": "892800"
  },
  {
    "text": "going all the way back to python 1.0 so",
    "start": "892800",
    "end": "895480"
  },
  {
    "text": "if you have one of those older python by",
    "start": "895480",
    "end": "897680"
  },
  {
    "text": "code samples please use on compile",
    "start": "897680",
    "end": "900839"
  },
  {
    "text": "6 but none of these decompilers are at",
    "start": "900839",
    "end": "903759"
  },
  {
    "text": "100% accuracy even the best decompilers",
    "start": "903759",
    "end": "906160"
  },
  {
    "text": "are barely cresting 80 so what happens",
    "start": "906160",
    "end": "908399"
  },
  {
    "text": "when they",
    "start": "908399",
    "end": "909320"
  },
  {
    "text": "fail since we are testing each",
    "start": "909320",
    "end": "912240"
  },
  {
    "text": "instruction one by one we can identify",
    "start": "912240",
    "end": "915240"
  },
  {
    "text": "exactly where the disagreements start",
    "start": "915240",
    "end": "917560"
  },
  {
    "text": "and we can use that to localize",
    "start": "917560",
    "end": "919040"
  },
  {
    "text": "decompilation errors to the right to a",
    "start": "919040",
    "end": "922279"
  },
  {
    "text": "small region of bite code and even",
    "start": "922279",
    "end": "924399"
  },
  {
    "text": "independent lines of source code in this",
    "start": "924399",
    "end": "927160"
  },
  {
    "text": "case there's only one line that's wrong",
    "start": "927160",
    "end": "929639"
  },
  {
    "text": "looking at the bite code diff we can",
    "start": "929639",
    "end": "931120"
  },
  {
    "text": "play a little game Spot the Difference",
    "start": "931120",
    "end": "933000"
  },
  {
    "text": "and see what actually changed why is",
    "start": "933000",
    "end": "935519"
  },
  {
    "text": "this line why was this line de compiled",
    "start": "935519",
    "end": "938279"
  },
  {
    "text": "incorrectly and the only difference here",
    "start": "938279",
    "end": "940639"
  },
  {
    "text": "is this binary subscript instruction",
    "start": "940639",
    "end": "942720"
  },
  {
    "text": "that got moved up into a different part",
    "start": "942720",
    "end": "944600"
  },
  {
    "text": "of the statement at the source level",
    "start": "944600",
    "end": "946959"
  },
  {
    "text": "that just means that the slicing was",
    "start": "946959",
    "end": "948880"
  },
  {
    "text": "done in the wrong",
    "start": "948880",
    "end": "950480"
  },
  {
    "text": "order we can patch that at the source",
    "start": "950480",
    "end": "952720"
  },
  {
    "text": "level by hand as an end user and run the",
    "start": "952720",
    "end": "956160"
  },
  {
    "text": "same perfect decompilation test so",
    "start": "956160",
    "end": "957880"
  },
  {
    "text": "recompiling again checking the",
    "start": "957880",
    "end": "959839"
  },
  {
    "text": "instructions one by one getting another",
    "start": "959839",
    "end": "961800"
  },
  {
    "text": "piece of feedback if it's still wrong",
    "start": "961800",
    "end": "963839"
  },
  {
    "text": "we'll get another localized error",
    "start": "963839",
    "end": "965759"
  },
  {
    "text": "message and we can keep going or if it's",
    "start": "965759",
    "end": "968199"
  },
  {
    "text": "right we can get a success message",
    "start": "968199",
    "end": "970360"
  },
  {
    "text": "hooray we get a solid done state which",
    "start": "970360",
    "end": "973399"
  },
  {
    "text": "supports a feedback loop with end users",
    "start": "973399",
    "end": "975720"
  },
  {
    "text": "to turn almost correct DEC compilation",
    "start": "975720",
    "end": "977759"
  },
  {
    "text": "into fully correct DEC",
    "start": "977759",
    "end": "980639"
  },
  {
    "text": "compilation for future directions we're",
    "start": "980639",
    "end": "983240"
  },
  {
    "text": "looking at applying graph learning",
    "start": "983240",
    "end": "984800"
  },
  {
    "text": "techniques to the control flow",
    "start": "984800",
    "end": "985920"
  },
  {
    "text": "reconstruction since control flow is",
    "start": "985920",
    "end": "988199"
  },
  {
    "text": "still the major major source of manual",
    "start": "988199",
    "end": "991440"
  },
  {
    "text": "effort in scaling our",
    "start": "991440",
    "end": "994120"
  },
  {
    "text": "decompiler we're also looking at",
    "start": "994120",
    "end": "996199"
  },
  {
    "text": "incorporating large language models into",
    "start": "996199",
    "end": "998199"
  },
  {
    "text": "that patching feedback loop we just",
    "start": "998199",
    "end": "999519"
  },
  {
    "text": "discussed because following the uh",
    "start": "999519",
    "end": "1002079"
  },
  {
    "text": "success of guess and check architectures",
    "start": "1002079",
    "end": "1004319"
  },
  {
    "text": "like Alpha code and Alpha geometry as",
    "start": "1004319",
    "end": "1006639"
  },
  {
    "text": "long as we have a strict mechanical",
    "start": "1006639",
    "end": "1008399"
  },
  {
    "text": "verifier we can throw language models at",
    "start": "1008399",
    "end": "1011000"
  },
  {
    "text": "the problem and make a little bit of",
    "start": "1011000",
    "end": "1013040"
  },
  {
    "text": "progress and reduce some of the workload",
    "start": "1013040",
    "end": "1014800"
  },
  {
    "text": "for",
    "start": "1014800",
    "end": "1015519"
  },
  {
    "text": "you and",
    "start": "1015519",
    "end": "1017279"
  },
  {
    "text": "lastly we are setting our sites on other",
    "start": "1017279",
    "end": "1020639"
  },
  {
    "text": "languages with Sim properties similar to",
    "start": "1020639",
    "end": "1022440"
  },
  {
    "text": "python because so much of our pipeline",
    "start": "1022440",
    "end": "1024000"
  },
  {
    "text": "is already driven by data uh we have our",
    "start": "1024000",
    "end": "1026400"
  },
  {
    "text": "site set on Lua for",
    "start": "1026400",
    "end": "1028000"
  },
  {
    "text": "now if you're a python product owner you",
    "start": "1028000",
    "end": "1030600"
  },
  {
    "text": "might be feeling a little bit nervous uh",
    "start": "1030600",
    "end": "1032520"
  },
  {
    "text": "we've already had a couple of of",
    "start": "1032520",
    "end": "1034120"
  },
  {
    "text": "instances where high-profile products",
    "start": "1034120",
    "end": "1036280"
  },
  {
    "text": "written in Python have been uploaded to",
    "start": "1036280",
    "end": "1037558"
  },
  {
    "text": "our service for decompilation uh so I",
    "start": "1037559",
    "end": "1039678"
  },
  {
    "text": "wanted to call attention to a couple of",
    "start": "1039679",
    "end": "1040918"
  },
  {
    "text": "obis tools that you can use to help",
    "start": "1040919",
    "end": "1042360"
  },
  {
    "text": "protect yourself py armor is a bite code",
    "start": "1042360",
    "end": "1045079"
  },
  {
    "text": "level officiation tool that partially",
    "start": "1045079",
    "end": "1047038"
  },
  {
    "text": "compiles your python code to see uh and",
    "start": "1047039",
    "end": "1050080"
  },
  {
    "text": "apply some other fancy techniques it's",
    "start": "1050080",
    "end": "1052080"
  },
  {
    "text": "premium so its basic features are",
    "start": "1052080",
    "end": "1054160"
  },
  {
    "text": "available but it requires a license for",
    "start": "1054160",
    "end": "1055679"
  },
  {
    "text": "its best stuff uh and then oxy is a",
    "start": "1055679",
    "end": "1058039"
  },
  {
    "text": "source code level OB fisat that scrubs",
    "start": "1058039",
    "end": "1060039"
  },
  {
    "text": "all your variable names it free uh it",
    "start": "1060039",
    "end": "1063000"
  },
  {
    "text": "doesn't stop decompilers but it makes",
    "start": "1063000",
    "end": "1064760"
  },
  {
    "text": "the decompiled source code much harder",
    "start": "1064760",
    "end": "1066440"
  },
  {
    "text": "to use none of these are going to stop a",
    "start": "1066440",
    "end": "1068960"
  },
  {
    "text": "dedicated expert but they will make it a",
    "start": "1068960",
    "end": "1071120"
  },
  {
    "text": "pain in the ass to get through your",
    "start": "1071120",
    "end": "1074880"
  },
  {
    "text": "code so the key takeaways",
    "start": "1075480",
    "end": "1079120"
  },
  {
    "text": "are that for python python no py lingual",
    "start": "1079120",
    "end": "1082320"
  },
  {
    "text": "is the best available python decompiler",
    "start": "1082320",
    "end": "1084440"
  },
  {
    "text": "for python versions 3.6 and above for",
    "start": "1084440",
    "end": "1087039"
  },
  {
    "text": "older python versions uncomp 6 is still",
    "start": "1087039",
    "end": "1090000"
  },
  {
    "text": "great perfect decompilation provides",
    "start": "1090000",
    "end": "1092559"
  },
  {
    "text": "caseby casee correctness guarantees and",
    "start": "1092559",
    "end": "1094440"
  },
  {
    "text": "supports post Hawk error correction and",
    "start": "1094440",
    "end": "1097120"
  },
  {
    "text": "finally bite code officiation tools are",
    "start": "1097120",
    "end": "1099080"
  },
  {
    "text": "currently effective against automatic",
    "start": "1099080",
    "end": "1100400"
  },
  {
    "text": "python decompilers please deploy",
    "start": "1100400",
    "end": "1103200"
  },
  {
    "text": "responsibly uh I've got a lot of extra",
    "start": "1103200",
    "end": "1105200"
  },
  {
    "text": "time here so we have plenty of time to",
    "start": "1105200",
    "end": "1106919"
  },
  {
    "text": "sit back relax have Q&A",
    "start": "1106919",
    "end": "1110039"
  },
  {
    "text": "so I guess the floor is open for",
    "start": "1110039",
    "end": "1113799"
  },
  {
    "text": "[Applause]",
    "start": "1113880",
    "end": "1122149"
  },
  {
    "text": "questions hi is your tool open source uh",
    "start": "1129720",
    "end": "1133720"
  },
  {
    "text": "it is not currently open source it is",
    "start": "1133720",
    "end": "1135159"
  },
  {
    "text": "available as a free web service uh but",
    "start": "1135159",
    "end": "1137200"
  },
  {
    "text": "we are committed to open sourcing by the",
    "start": "1137200",
    "end": "1138520"
  },
  {
    "text": "end of the year so keep tabes on that",
    "start": "1138520",
    "end": "1141240"
  },
  {
    "text": "thank",
    "start": "1141240",
    "end": "1143440"
  },
  {
    "text": "you of course followups are",
    "start": "1144159",
    "end": "1146520"
  },
  {
    "text": "welcome I wondered if you were looking",
    "start": "1146520",
    "end": "1150760"
  },
  {
    "text": "at",
    "start": "1150760",
    "end": "1152320"
  },
  {
    "text": "classifying patterns in code using your",
    "start": "1152320",
    "end": "1156159"
  },
  {
    "text": "framework in sort in some way to um",
    "start": "1156159",
    "end": "1161400"
  },
  {
    "text": "maybe find definitions of behavior in",
    "start": "1161400",
    "end": "1165320"
  },
  {
    "text": "code patterns you see maybe um could you",
    "start": "1165320",
    "end": "1169320"
  },
  {
    "text": "rephrase the question please your",
    "start": "1169320",
    "end": "1171960"
  },
  {
    "text": "Frameworks uh allows",
    "start": "1171960",
    "end": "1175240"
  },
  {
    "text": "for a a wide range of code patterns to",
    "start": "1175240",
    "end": "1178640"
  },
  {
    "text": "come up right uh yeah you can upload any",
    "start": "1178640",
    "end": "1182280"
  },
  {
    "text": "bite code uh although it's primarily for",
    "start": "1182280",
    "end": "1185360"
  },
  {
    "text": "uh is primarily for code that's been",
    "start": "1185360",
    "end": "1187159"
  },
  {
    "text": "compiled with the cpython compiler which",
    "start": "1187159",
    "end": "1189600"
  },
  {
    "text": "is the dominant python compiler I think",
    "start": "1189600",
    "end": "1192520"
  },
  {
    "text": "that my question uh this direction is at",
    "start": "1192520",
    "end": "1196440"
  },
  {
    "text": "can there be maybe a functionality of",
    "start": "1196440",
    "end": "1200520"
  },
  {
    "text": "security U measurement for code that is",
    "start": "1200520",
    "end": "1204559"
  },
  {
    "text": "inputed into your",
    "start": "1204559",
    "end": "1207480"
  },
  {
    "text": "framework it's always possible to run",
    "start": "1207480",
    "end": "1209720"
  },
  {
    "text": "the to run that study um we have we do",
    "start": "1209720",
    "end": "1212960"
  },
  {
    "text": "collect the the pyc files to support",
    "start": "1212960",
    "end": "1215080"
  },
  {
    "text": "future research uh we don't have that",
    "start": "1215080",
    "end": "1217760"
  },
  {
    "text": "analysis capability right now but if",
    "start": "1217760",
    "end": "1221039"
  },
  {
    "text": "there is a metric that comes up that",
    "start": "1221039",
    "end": "1223919"
  },
  {
    "text": "helps us",
    "start": "1223919",
    "end": "1225559"
  },
  {
    "text": "quantify the security Worth or security",
    "start": "1225559",
    "end": "1229000"
  },
  {
    "text": "value of each of those bik code samples",
    "start": "1229000",
    "end": "1231200"
  },
  {
    "text": "then that's certainly a study that we'd",
    "start": "1231200",
    "end": "1232720"
  },
  {
    "text": "be happy to run okay thank",
    "start": "1232720",
    "end": "1236640"
  },
  {
    "text": "you how are you dealing with uh heavily",
    "start": "1237480",
    "end": "1240200"
  },
  {
    "text": "offis skated",
    "start": "1240200",
    "end": "1243000"
  },
  {
    "text": "binaries let's see we've received a a",
    "start": "1243320",
    "end": "1245640"
  },
  {
    "text": "few obfuscated binaries uh I think the",
    "start": "1245640",
    "end": "1249280"
  },
  {
    "text": "most of the obfuscation tools are still",
    "start": "1249280",
    "end": "1251320"
  },
  {
    "text": "very effective against the python",
    "start": "1251320",
    "end": "1253039"
  },
  {
    "text": "decompilation tools and as far as I know",
    "start": "1253039",
    "end": "1256520"
  },
  {
    "text": "the options for python deop off Gators",
    "start": "1256520",
    "end": "1259080"
  },
  {
    "text": "are fairly limited uh that is something",
    "start": "1259080",
    "end": "1261000"
  },
  {
    "text": "that's going to be open for future work",
    "start": "1261000",
    "end": "1263000"
  },
  {
    "text": "and maybe the the P armor devs will have",
    "start": "1263000",
    "end": "1265280"
  },
  {
    "text": "to watch out all right thank",
    "start": "1265280",
    "end": "1269559"
  },
  {
    "text": "you hi uh I have a question regarding Pi",
    "start": "1269760",
    "end": "1273240"
  },
  {
    "text": "installer so if a source code goes",
    "start": "1273240",
    "end": "1276279"
  },
  {
    "text": "through a pi installer method uh which",
    "start": "1276279",
    "end": "1279600"
  },
  {
    "text": "kind of compiles the Python code into an",
    "start": "1279600",
    "end": "1281840"
  },
  {
    "text": "exe or or uh binary is there a way that",
    "start": "1281840",
    "end": "1286120"
  },
  {
    "text": "bilingual can reverse decompile",
    "start": "1286120",
    "end": "1289720"
  },
  {
    "text": "that have you I'm sorry could you repeat",
    "start": "1289720",
    "end": "1292000"
  },
  {
    "text": "the question a little bit louder please",
    "start": "1292000",
    "end": "1293480"
  },
  {
    "text": "sorry have you used P",
    "start": "1293480",
    "end": "1296880"
  },
  {
    "text": "install so P python server oh P",
    "start": "1296880",
    "end": "1300480"
  },
  {
    "text": "installer uh yeah so what P installer",
    "start": "1300480",
    "end": "1302799"
  },
  {
    "text": "does is it packages the pyc B code in",
    "start": "1302799",
    "end": "1307159"
  },
  {
    "text": "with a in with The Interpreter to make a",
    "start": "1307159",
    "end": "1309520"
  },
  {
    "text": "standalone executable uh py linguals",
    "start": "1309520",
    "end": "1312720"
  },
  {
    "text": "place in the pipeline is after using a",
    "start": "1312720",
    "end": "1315080"
  },
  {
    "text": "tool like Pi inst extractor to or P",
    "start": "1315080",
    "end": "1318760"
  },
  {
    "text": "uninstaller to get the um the pyc bite",
    "start": "1318760",
    "end": "1321799"
  },
  {
    "text": "code out and then you use uh py lingual",
    "start": "1321799",
    "end": "1324880"
  },
  {
    "text": "to ultimately recover the source code",
    "start": "1324880",
    "end": "1327400"
  },
  {
    "text": "got it thank you hi I like your",
    "start": "1327400",
    "end": "1331039"
  },
  {
    "text": "methodology I think it's very clever do",
    "start": "1331039",
    "end": "1333440"
  },
  {
    "text": "you think it the similar methodology",
    "start": "1333440",
    "end": "1335679"
  },
  {
    "text": "also works for other languages like",
    "start": "1335679",
    "end": "1338039"
  },
  {
    "text": "those uh static type",
    "start": "1338039",
    "end": "1341279"
  },
  {
    "text": "languages let's see I think the main",
    "start": "1341279",
    "end": "1344039"
  },
  {
    "text": "challenges you might face when expanding",
    "start": "1344039",
    "end": "1346159"
  },
  {
    "text": "or extending this methodology to lower",
    "start": "1346159",
    "end": "1348600"
  },
  {
    "text": "level languages is going to be how",
    "start": "1348600",
    "end": "1351520"
  },
  {
    "text": "comprehensive the compiler optimizations",
    "start": "1351520",
    "end": "1353600"
  },
  {
    "text": "are uh one of the core steps that you",
    "start": "1353600",
    "end": "1355640"
  },
  {
    "text": "would need to look at is the",
    "start": "1355640",
    "end": "1356679"
  },
  {
    "text": "segmentation step where we cut up the",
    "start": "1356679",
    "end": "1358960"
  },
  {
    "text": "bite code into statement level chunks if",
    "start": "1358960",
    "end": "1360960"
  },
  {
    "text": "you have a higher level higher level of",
    "start": "1360960",
    "end": "1363080"
  },
  {
    "text": "optimization like you might see in a c",
    "start": "1363080",
    "end": "1364720"
  },
  {
    "text": "compiler uh maybe that level of",
    "start": "1364720",
    "end": "1367279"
  },
  {
    "text": "segmentation would no longer be valid",
    "start": "1367279",
    "end": "1369200"
  },
  {
    "text": "and you would have to use larger units",
    "start": "1369200",
    "end": "1370760"
  },
  {
    "text": "of segmentation uh the other roadblock",
    "start": "1370760",
    "end": "1373880"
  },
  {
    "text": "you might run into especially if you're",
    "start": "1373880",
    "end": "1375520"
  },
  {
    "text": "going into languages that compile down",
    "start": "1375520",
    "end": "1377799"
  },
  {
    "text": "into machine code or x86 assembly is",
    "start": "1377799",
    "end": "1380960"
  },
  {
    "text": "that for the perfect decompilation test",
    "start": "1380960",
    "end": "1383159"
  },
  {
    "text": "you need to know the compiler that was",
    "start": "1383159",
    "end": "1385159"
  },
  {
    "text": "used to produce the original input",
    "start": "1385159",
    "end": "1387159"
  },
  {
    "text": "binary uh that is easy information to",
    "start": "1387159",
    "end": "1390080"
  },
  {
    "text": "get in Python where almost everybody",
    "start": "1390080",
    "end": "1391840"
  },
  {
    "text": "uses the cpython compiler but that may",
    "start": "1391840",
    "end": "1394960"
  },
  {
    "text": "be more challenging uh if identifying",
    "start": "1394960",
    "end": "1397240"
  },
  {
    "text": "the compiler and its configuration is",
    "start": "1397240",
    "end": "1400000"
  },
  {
    "text": "itself challenging okay thank you",
    "start": "1400000",
    "end": "1405000"
  },
  {
    "text": "hi um have",
    "start": "1411000",
    "end": "1413000"
  },
  {
    "text": "you used your tool against large",
    "start": "1413000",
    "end": "1415880"
  },
  {
    "text": "collections of uh malw written in python",
    "start": "1415880",
    "end": "1419559"
  },
  {
    "text": "or other collections of",
    "start": "1419559",
    "end": "1422720"
  },
  {
    "text": "Representative interesting pie of python",
    "start": "1422720",
    "end": "1425679"
  },
  {
    "text": "code to look",
    "start": "1425679",
    "end": "1427360"
  },
  {
    "text": "at see uh so we haven't done independent",
    "start": "1427360",
    "end": "1430799"
  },
  {
    "text": "investigations",
    "start": "1430799",
    "end": "1433519"
  },
  {
    "text": "into python malare repositories uh but",
    "start": "1434480",
    "end": "1437919"
  },
  {
    "text": "the tool is open so we have received uh",
    "start": "1437919",
    "end": "1441960"
  },
  {
    "text": "people uploading python malware and we",
    "start": "1441960",
    "end": "1444760"
  },
  {
    "text": "do some of that um if you have a",
    "start": "1444760",
    "end": "1447159"
  },
  {
    "text": "particular set of python malare that",
    "start": "1447159",
    "end": "1449320"
  },
  {
    "text": "you're interested in reverse engineering",
    "start": "1449320",
    "end": "1451480"
  },
  {
    "text": "uh we'd be happy to help even if the the",
    "start": "1451480",
    "end": "1453679"
  },
  {
    "text": "tool is giving you some problems where",
    "start": "1453679",
    "end": "1455240"
  },
  {
    "text": "we our lines are always open is is a",
    "start": "1455240",
    "end": "1457840"
  },
  {
    "text": "service also open as an API or just a",
    "start": "1457840",
    "end": "1460960"
  },
  {
    "text": "upload uh it's currently primarily",
    "start": "1460960",
    "end": "1463720"
  },
  {
    "text": "through the web service but you could",
    "start": "1463720",
    "end": "1466320"
  },
  {
    "text": "call you could make calls to the API",
    "start": "1466320",
    "end": "1467840"
  },
  {
    "text": "directly uh we don't have any special",
    "start": "1467840",
    "end": "1471080"
  },
  {
    "text": "key safeguards on that it's it's open",
    "start": "1471080",
    "end": "1473360"
  },
  {
    "text": "it's public so you're welcome to use it",
    "start": "1473360",
    "end": "1475600"
  },
  {
    "text": "and again I'll reiterate that we're",
    "start": "1475600",
    "end": "1477200"
  },
  {
    "text": "planning to open source it by the end of",
    "start": "1477200",
    "end": "1478559"
  },
  {
    "text": "the year okay great",
    "start": "1478559",
    "end": "1482158"
  },
  {
    "text": "thanks all right seeing no questions it",
    "start": "1494080",
    "end": "1497640"
  },
  {
    "text": "sounds like we're good to take an extra",
    "start": "1497640",
    "end": "1499640"
  },
  {
    "text": "5 minutes to kick back and relax thank",
    "start": "1499640",
    "end": "1502080"
  },
  {
    "text": "you so much and enjoy your black hat",
    "start": "1502080",
    "end": "1506519"
  }
]