[
  {
    "start": "0",
    "end": "191000"
  },
  {
    "text": "hi and welcome to what the fuss we are Cornelius asaman that's me and uh I'm",
    "start": "120",
    "end": "7160"
  },
  {
    "text": "currently a research at W University bom and I'm mostly focusing on program analysis and automated Buck finding and",
    "start": "7160",
    "end": "14200"
  },
  {
    "text": "I also occasionally work as a security consultant and with me here is s shumo",
    "start": "14200",
    "end": "19279"
  },
  {
    "text": "who is also a researcher at University B and who likewise focuses on Buck finding",
    "start": "19279",
    "end": "25840"
  },
  {
    "text": "and in particular he's very interested in everything low level um um so what do",
    "start": "25840",
    "end": "31640"
  },
  {
    "text": "we care about we care about finding bucks and we believe that manual analysis doesn't scale too well so we",
    "start": "31640",
    "end": "37719"
  },
  {
    "text": "would like to have some kind of automated tooling and there's a whole bunch of fields that try to build all",
    "start": "37719",
    "end": "42879"
  },
  {
    "text": "kinds of tools for example the verification field but yeah so no just",
    "start": "42879",
    "end": "49480"
  },
  {
    "text": "no so we do fuzzing because fuzzing actually works and um what's a fuzzer typically",
    "start": "49480",
    "end": "56199"
  },
  {
    "text": "we consider like a whole bunch of people consider fuzzers black boxes with some kind of magic content where you put in a",
    "start": "56199",
    "end": "62559"
  },
  {
    "text": "program and you obtain bucks for free so um there's a whole bunch of other people",
    "start": "62559",
    "end": "68040"
  },
  {
    "text": "that are basically like but fuz is pretty dumb we tried this in the ' 80s it didn't work and um I would like to",
    "start": "68040",
    "end": "75119"
  },
  {
    "text": "disagree with that and we would like to show a very short demo where we modified",
    "start": "75119",
    "end": "80360"
  },
  {
    "text": "a Super Mario game in such a way that a modern fuzer can play Super Mario and what you get if you do that is",
    "start": "80360",
    "end": "86920"
  },
  {
    "text": "actually pretty impressive I think so here we go",
    "start": "86920",
    "end": "94840"
  },
  {
    "text": "so I don't know if you can hear that but like that thing plays Super Mario a",
    "start": "96159",
    "end": "103079"
  },
  {
    "text": "lot better than I do and we even made this game Harder by killing Mario every",
    "start": "103079",
    "end": "109320"
  },
  {
    "text": "time he gets stuck so he's basically forced to run the whole time and he must",
    "start": "109320",
    "end": "114399"
  },
  {
    "text": "never get stuck anywhere or we kill him immediately um",
    "start": "114399",
    "end": "121840"
  },
  {
    "text": "right so I don't know you can come here and play Super Mario if you want later but",
    "start": "122680",
    "end": "128640"
  },
  {
    "text": "I'd vager there's not that many people that can play Super Mario at this level",
    "start": "128640",
    "end": "134640"
  },
  {
    "text": "uh okay so that said fuzes are still dumb so if you think fuzes are dumb",
    "start": "134640",
    "end": "141680"
  },
  {
    "text": "you're not wrong in particular if we like this is a plot of all the different things the fuzer tried when solving such",
    "start": "141680",
    "end": "148239"
  },
  {
    "text": "a level in particular in the beginning we see that the fuzzer tries a lot of very dumb stuff he's mostly dying in the",
    "start": "148239",
    "end": "155280"
  },
  {
    "text": "first Tren he can fall into um however modern fuzzers are learning how to",
    "start": "155280",
    "end": "161879"
  },
  {
    "text": "trigger interesting behavior in the Target application and as the fuzer",
    "start": "161879",
    "end": "167440"
  },
  {
    "text": "progresses there's really no way in jumping into the ditch over and over again because it does not yield",
    "start": "167440",
    "end": "172680"
  },
  {
    "text": "interesting Behavior so the only option the fuzzer has to expand forward uh is to expand forward and eventually towards",
    "start": "172680",
    "end": "180120"
  },
  {
    "text": "the end of the level the only real thing the fuzzer can do is progress in the level and in this case the level took us",
    "start": "180120",
    "end": "186720"
  },
  {
    "text": "our fuzzer something like 8 minutes to to solve all right so how does the fuzzer",
    "start": "186720",
    "end": "192920"
  },
  {
    "start": "191000",
    "end": "191000"
  },
  {
    "text": "actually learn what's interesting behavior and what's not uh so we have a Target application and usually we assume",
    "start": "192920",
    "end": "200239"
  },
  {
    "text": "we have some kind of seat input in these examples we typically just Ed an empty seat input you can use empty or set of",
    "start": "200239",
    "end": "206879"
  },
  {
    "text": "A's or you might just use actually reasonable seat input whatever you have available and the fuzzer creates some",
    "start": "206879",
    "end": "212720"
  },
  {
    "text": "mutations of the seat inputs puts them into the target program so the target program can run and",
    "start": "212720",
    "end": "219280"
  },
  {
    "text": "observes the coverage that is created by these inputs and if there was a new coverage triggered then this input is",
    "start": "219280",
    "end": "226920"
  },
  {
    "text": "stored in the queue and will be used for future mutations um and if there's no new coverage triggered such as in this case",
    "start": "226920",
    "end": "233840"
  },
  {
    "text": "then the input is immediately discarded and using this the fuzzer can iteratively build a corpus of better and",
    "start": "233840",
    "end": "240280"
  },
  {
    "text": "better test cases that trigger new interesting Behavior so basically the",
    "start": "240280",
    "end": "245400"
  },
  {
    "text": "current thought on fuzzers is that fuzzes artificial intelligences for test",
    "start": "245400",
    "end": "250720"
  },
  {
    "text": "case generation and in this talk we'd like to challenge that believe a bit so",
    "start": "250720",
    "end": "255959"
  },
  {
    "text": "the key takeway so far is like if you have seen the Google talk or any other of the results fuzzles are amazingly at",
    "start": "255959",
    "end": "262320"
  },
  {
    "text": "smashing bucks like they are Buck killing machines unlike anything else and if you're not using them someone",
    "start": "262320",
    "end": "268080"
  },
  {
    "text": "else will be using them on your software so and they might not have your best interest in mind when they do that so",
    "start": "268080",
    "end": "275360"
  },
  {
    "text": "the rest of this oh yeah um thank you so um well the rest of this talk basically",
    "start": "275360",
    "end": "280479"
  },
  {
    "text": "um we'll talk about um our past research and later on conos will continue with",
    "start": "280479",
    "end": "285680"
  },
  {
    "text": "the basically the future of fuzzing and um well two years ago um when we started",
    "start": "285680",
    "end": "292240"
  },
  {
    "text": "our fuzzing journey our research well um yeah let me der a bit",
    "start": "292240",
    "end": "299000"
  },
  {
    "text": "so B basically um what we wanted to build is something like so during the",
    "start": "299000",
    "end": "304800"
  },
  {
    "text": "Cold War some engineers in the Eastern block thought it would be a good idea to",
    "start": "304800",
    "end": "310800"
  },
  {
    "text": "put um mjet engines on top of a t 34 um tank chassis and well the there's just",
    "start": "310800",
    "end": "318520"
  },
  {
    "text": "one purpose for this monstrosity is just to um blow out um fires like um burning",
    "start": "318520",
    "end": "326000"
  },
  {
    "text": "Olive Fields so serious stuff and we want to build something which has the same",
    "start": "326000",
    "end": "331800"
  },
  {
    "text": "characteristics but as a father okay so um since a f or or since",
    "start": "331800",
    "end": "339520"
  },
  {
    "text": "this monstrosity does not care um whether an application is um compiled or",
    "start": "339520",
    "end": "346960"
  },
  {
    "text": "or written in a in a specific um programming language um we um don't care",
    "start": "346960",
    "end": "353560"
  },
  {
    "text": "uh either so um basically um we will focus on binary only fuzzing so um um we",
    "start": "353560",
    "end": "360720"
  },
  {
    "text": "just care at the executable itself if it is x86 we can just fuzz it and we're",
    "start": "360720",
    "end": "366039"
  },
  {
    "text": "good to go and next basically there are different platforms so um different W",
    "start": "366039",
    "end": "373080"
  },
  {
    "text": "specific interfaces and different ways to obtain runtime information so coverage basically on different",
    "start": "373080",
    "end": "380240"
  },
  {
    "text": "operating systems and yeah same we just don't care we want to fast them all and",
    "start": "380240",
    "end": "386960"
  },
  {
    "text": "yeah the same goes for the different privilege levels so we want to F ring",
    "start": "386960",
    "end": "392440"
  },
  {
    "text": "three applications so uh user space applications um we want to uh yeah fuss",
    "start": "392440",
    "end": "399000"
  },
  {
    "text": "uh Targets in kernel land in ring zero and even um in ring minus one so we want",
    "start": "399000",
    "end": "405560"
  },
  {
    "text": "to test hypervisors and ufi so they're cool stuff basically and yeah actually",
    "start": "405560",
    "end": "411759"
  },
  {
    "text": "we just want to steamroll over all privilege levels with our approach and",
    "start": "411759",
    "end": "418000"
  },
  {
    "text": "yeah this is basically the reason why we started to uh build our own fuzzing framework three years ago um well it is",
    "start": "418000",
    "end": "425440"
  },
  {
    "text": "known under the name n and um basically the name is based on Greek mythology and",
    "start": "425440",
    "end": "433000"
  },
  {
    "text": "um yeah it's referring to the um daughter of chaos and um the goddess of",
    "start": "433000",
    "end": "438479"
  },
  {
    "text": "the night so um some parts of our fuzzing framework are already available",
    "start": "438479",
    "end": "444919"
  },
  {
    "text": "and released on GitHub um under the name of KFL Red Queen between groa and naos",
    "start": "444919",
    "end": "451840"
  },
  {
    "text": "so at the last slide we will um uh yeah there there are multiple links to our",
    "start": "451840",
    "end": "457240"
  },
  {
    "text": "guub rapos but um let us talk a little bit about the architecture of a yeah um",
    "start": "457240",
    "end": "465120"
  },
  {
    "text": "common coverage guided fuzzer like AFL for instance so basically there's a Target and a fuzzer and the fuzzer has",
    "start": "465120",
    "end": "472199"
  },
  {
    "text": "multiple modules so a coverage measurement coverage measuring uh module",
    "start": "472199",
    "end": "477319"
  },
  {
    "text": "so that we can um measure runtime information and an input generator which",
    "start": "477319",
    "end": "484120"
  },
  {
    "text": "generates inputs and provides the inputs to the Target and later on the targ the input is consumed by the Target and the",
    "start": "484120",
    "end": "491120"
  },
  {
    "text": "target provides the coverage information to the fuzzer easy right but what if we",
    "start": "491120",
    "end": "497199"
  },
  {
    "text": "apply this approach to uh Target in kernel land well yeah um it's not as",
    "start": "497199",
    "end": "504520"
  },
  {
    "text": "easy as it might seem so um it really depends on operating systems but sometimes it just tell to get runtime",
    "start": "504520",
    "end": "511039"
  },
  {
    "text": "information from the from a kernel Target and there's another issue so",
    "start": "511039",
    "end": "517240"
  },
  {
    "text": "fuzzers are really good at finding bucks and in kernal Land There are bucks right so what will happen if this fuzzer will",
    "start": "517240",
    "end": "524519"
  },
  {
    "text": "um yeah uh find a bug so basically we will the fuzzer will basically kill its",
    "start": "524519",
    "end": "530839"
  },
  {
    "text": "own hosting operating system so you can fix this issue basically by put uh",
    "start": "530839",
    "end": "536839"
  },
  {
    "text": "putting everything into a virtual machine and and in case of crashes and",
    "start": "536839",
    "end": "542440"
  },
  {
    "text": "blue screens you can just reset everything and you are good to go simple right so um if you run your Target in a",
    "start": "542440",
    "end": "549680"
  },
  {
    "text": "virtual machine there are there are just multiple benefits so for instance fall tolerance for free then uh you can also",
    "start": "549680",
    "end": "557720"
  },
  {
    "text": "scale you can just launch multiple um operating systems and run them on one",
    "start": "557720",
    "end": "563880"
  },
  {
    "text": "single machine so um in theory it's simple we",
    "start": "563880",
    "end": "568920"
  },
  {
    "start": "566000",
    "end": "566000"
  },
  {
    "text": "got our Target which runs in a virtual machine and we scale but um in practice well there's",
    "start": "568920",
    "end": "576839"
  },
  {
    "text": "another kind of architecture so in between we use a software component",
    "start": "576839",
    "end": "582360"
  },
  {
    "text": "called agent and the agent communicates somehow with our fuzzer which runs at",
    "start": "582360",
    "end": "587560"
  },
  {
    "text": "hypervisor level and expects data from the fuzzer and then provides it to the",
    "start": "587560",
    "end": "592959"
  },
  {
    "text": "Target and somehow we will um obtain runtime information and by using this",
    "start": "592959",
    "end": "598480"
  },
  {
    "text": "modular architecture you can just write agent for basically anything so you can",
    "start": "598480",
    "end": "603640"
  },
  {
    "text": "write agents for kernel targets user space targets or even hypervisors just",
    "start": "603640",
    "end": "609839"
  },
  {
    "text": "think about it so um if you just put agent code into a custom operating",
    "start": "609839",
    "end": "616760"
  },
  {
    "text": "system oh I'm sorry um custom operating system you can basically run a custom uh",
    "start": "616760",
    "end": "623399"
  },
  {
    "text": "agent OS inside of your target uh hypervisor you want to test in our",
    "start": "623399",
    "end": "628519"
  },
  {
    "text": "hypervisor so by using yeah actually let me interrupt there for a second because before we go over to coverage fuzzing",
    "start": "628519",
    "end": "635279"
  },
  {
    "text": "this we actually built this agent and um so we build a custom operating system",
    "start": "635279",
    "end": "640600"
  },
  {
    "text": "that runs inside of a hypervisor and tries to misbehave as much as possible and since we didn't have coverage uh in",
    "start": "640600",
    "end": "647200"
  },
  {
    "text": "this test setup we actually ran it without any coverage so back to the 80s dump fuzzing right so just generating",
    "start": "647200",
    "end": "654240"
  },
  {
    "text": "random interactions and running them and to our big surprise it turns out this crashes pretty much all of the",
    "start": "654240",
    "end": "660760"
  },
  {
    "text": "hypervisors so um yeah we were able to uncover up to 50 different bucks and I",
    "start": "660760",
    "end": "666519"
  },
  {
    "text": "guess 40 CVS assigned something like that so yeah um but do we have demo or",
    "start": "666519",
    "end": "673600"
  },
  {
    "text": "yeah yeah actually I think we can demo that okay um yeah so since this is 80s",
    "start": "673600",
    "end": "678880"
  },
  {
    "text": "technology we actually brought some 80s technology where this is stored yeah and I guess it's the same Superior",
    "start": "678880",
    "end": "684839"
  },
  {
    "text": "technology as this guy shows us right yeah so uh we we actually have this USB",
    "start": "684839",
    "end": "691200"
  },
  {
    "text": "uh floppy disc drive here I actually I'm I'm the kind of generation that hardly ever use floppy discs so um we try to",
    "start": "691200",
    "end": "698519"
  },
  {
    "text": "put this in here all right",
    "start": "698519",
    "end": "704200"
  },
  {
    "text": "so now we have to make the floppy disc available because we don't want to run qmu in root mode for this demo for",
    "start": "704200",
    "end": "712399"
  },
  {
    "text": "obvious reasons and then we can run qmu and make it boot from the floppy dis",
    "start": "712399",
    "end": "719920"
  },
  {
    "text": "so this floppy disc like the boot process is pretty slow but that's because of the floppy disc if you run",
    "start": "719920",
    "end": "725279"
  },
  {
    "text": "this operating system from somewhere it just takes a couple of milliseconds yes so um so it's still copying all the",
    "start": "725279",
    "end": "731639"
  },
  {
    "text": "stuff from the floppy dis and this qmu is actually the latest checkout we checked out the nightly build",
    "start": "731639",
    "end": "738040"
  },
  {
    "text": "yesterday and um so you can see the operating system",
    "start": "738040",
    "end": "744320"
  },
  {
    "text": "booting and then we'll start fuzzing very soon and you can see W that went quick like fuzzing is supposed to take",
    "start": "744320",
    "end": "750720"
  },
  {
    "text": "longer right like fuzzing is supposed to take a day or two or something like that but it's really more like a few seconds",
    "start": "750720",
    "end": "758000"
  },
  {
    "text": "and if you actually like this fuzzer was limited to the VGA stuff if you fuzz the",
    "start": "758000",
    "end": "763079"
  },
  {
    "text": "whole system it will even go faster so yes that's um how far you can",
    "start": "763079",
    "end": "768560"
  },
  {
    "text": "get with not even coverage fuzzing and we don't really know why that's the case apparently no one really ever made the",
    "start": "768560",
    "end": "774800"
  },
  {
    "text": "effort yeah so do we need this copy or no actually I don't think we need this anymore okay so maybe does anyone want",
    "start": "774800",
    "end": "782120"
  },
  {
    "text": "this all right so the rest of you sorry will have to wait until mid next year so",
    "start": "782120",
    "end": "789600"
  },
  {
    "text": "then we'll release all of that okay so sorry for the interruption",
    "start": "789600",
    "end": "796959"
  },
  {
    "text": "and yeah yeah sure um so um yeah as I already mentioned it um you can",
    "start": "796959",
    "end": "802399"
  },
  {
    "text": "basically put everything into a virtual machine to yeah trace a virtual machine",
    "start": "802399",
    "end": "808600"
  },
  {
    "text": "and basically by using this approach we are to the best of our knowledge the",
    "start": "808600",
    "end": "814240"
  },
  {
    "text": "first who try to build a coverage guided hypervisor fuzzer so this was dump",
    "start": "814240",
    "end": "819440"
  },
  {
    "text": "fuzzing and later next year we expecting even more results using coverage guided",
    "start": "819440",
    "end": "824680"
  },
  {
    "text": "hyper Wiis of fuzzing so um yeah I talked a lot about",
    "start": "824680",
    "end": "830279"
  },
  {
    "text": "the architecture the agents and well the interesting part is how do uh how we",
    "start": "830279",
    "end": "836160"
  },
  {
    "text": "obtain coverage information and and well for this purpose um we rely on a",
    "start": "836160",
    "end": "841920"
  },
  {
    "text": "technology called Intel PT and I'm pretty sure that some of you have already heard about it um it's basically",
    "start": "841920",
    "end": "848800"
  },
  {
    "start": "848000",
    "end": "848000"
  },
  {
    "text": "it stands for Intel processor trays and Intel PT um basically provides the",
    "start": "848800",
    "end": "854839"
  },
  {
    "text": "ability um to the CPU to to yeah basically um Trace itself and write",
    "start": "854839",
    "end": "862240"
  },
  {
    "text": "Trace data directly to physical memory and if you can also provide the program",
    "start": "862240",
    "end": "868920"
  },
  {
    "text": "which was um which has been traced it um which sorry which has been executed",
    "start": "868920",
    "end": "875480"
  },
  {
    "text": "during runtime um we can just put both into an Intel PT decoder and you will",
    "start": "875480",
    "end": "881199"
  },
  {
    "text": "get a list of addresses executed and since we are at hypervisor level it's",
    "start": "881199",
    "end": "888040"
  },
  {
    "text": "actually pretty easy to just dump memory so it's not a big task so and yeah later",
    "start": "888040",
    "end": "893759"
  },
  {
    "text": "on we can just translate traces to Transitions and then we will get",
    "start": "893759",
    "end": "899440"
  },
  {
    "text": "something like a bit map representation it's basically the same as AFL",
    "start": "899440",
    "end": "905839"
  },
  {
    "text": "does so um yeah just let us uh take a look at um all the different components",
    "start": "905839",
    "end": "913240"
  },
  {
    "start": "907000",
    "end": "907000"
  },
  {
    "text": "and the communication for one iteration so we got our F our fer has um access to",
    "start": "913240",
    "end": "919759"
  },
  {
    "text": "our modified hypervisor so Q qmu in ring zero uh ring three and KVM in ring zero",
    "start": "919759",
    "end": "927040"
  },
  {
    "text": "and in the virtual machine an agent in the user space and a Target in the kernel and well um at some point the",
    "start": "927040",
    "end": "936399"
  },
  {
    "text": "agent will signal that um it's ready to receive data and we then just generate a",
    "start": "936399",
    "end": "944480"
  },
  {
    "text": "new payload and write the payload directly to the guest's physical memory",
    "start": "944480",
    "end": "951680"
  },
  {
    "text": "and then continue the execution and the data is in the physical memory so the",
    "start": "951680",
    "end": "957199"
  },
  {
    "text": "agent can just uh pass the payload to the Target at the same time we will",
    "start": "957199",
    "end": "962600"
  },
  {
    "text": "trace the target using Intel PT and that's basically it so this is uh how an",
    "start": "962600",
    "end": "969959"
  },
  {
    "text": "iteration in our framework works and by doing so we can trace everything at",
    "start": "969959",
    "end": "975319"
  },
  {
    "text": "least so it has to be x86 but that's it so um and using this uh approach um",
    "start": "975319",
    "end": "984639"
  },
  {
    "start": "980000",
    "end": "980000"
  },
  {
    "text": "yeah so we've benchmarked um our framework against uh AFL and as you can",
    "start": "984639",
    "end": "989920"
  },
  {
    "text": "see sometimes our approach is faster sometimes AFL is but you have to",
    "start": "989920",
    "end": "995440"
  },
  {
    "text": "consider that AFL is a fuzzer which needs um or which relies on compile time",
    "start": "995440",
    "end": "1002519"
  },
  {
    "text": "instrumentation so you need the source code and our approach is binary only we",
    "start": "1002519",
    "end": "1008040"
  },
  {
    "text": "don't care and as you can see um by so to the best of our knowledge this is by",
    "start": "1008040",
    "end": "1013839"
  },
  {
    "text": "far the fastest binary only fuzzer out there",
    "start": "1013839",
    "end": "1019440"
  },
  {
    "text": "so actually fast binary fuzzing is awesome and um yeah we will we basically",
    "start": "1019440",
    "end": "1026480"
  },
  {
    "text": "want to improve it and there's one more thing so you can go even",
    "start": "1026480",
    "end": "1033678"
  },
  {
    "text": "faster and to do so we've implemented a technique or a mechanism in our",
    "start": "1033679",
    "end": "1040520"
  },
  {
    "text": "hypervisor um called Fast VM reloads and those fast VM reloads in",
    "start": "1040520",
    "end": "1047079"
  },
  {
    "text": "theory you're able to reload not a virtual machine up to 6,000 times per second on a single",
    "start": "1047079",
    "end": "1053080"
  },
  {
    "text": "core and well by doing so I will come uh to this in a minute there are multiple",
    "start": "1053080",
    "end": "1058559"
  },
  {
    "text": "advant advantages but first of all um to implement this uh mechanism first of all",
    "start": "1058559",
    "end": "1066840"
  },
  {
    "start": "1066000",
    "end": "1066000"
  },
  {
    "text": "you have to deal with the internal state of qmu and qmu on each um VM snapshot",
    "start": "1066840",
    "end": "1073280"
  },
  {
    "text": "reload yeah um just does multiple very expensive",
    "start": "1073280",
    "end": "1079360"
  },
  {
    "text": "um calls to expensive methods to restore state and instead of just walking over a",
    "start": "1079360",
    "end": "1085799"
  },
  {
    "text": "tree and calling um expensive methods we just put everything into a list of",
    "start": "1085799",
    "end": "1091120"
  },
  {
    "text": "addresses and just m copy it and we're good to go it's super fast and yeah um",
    "start": "1091120",
    "end": "1097480"
  },
  {
    "start": "1095000",
    "end": "1095000"
  },
  {
    "text": "instead of just reloading the entire guest memory we just keep uh track of",
    "start": "1097480",
    "end": "1104440"
  },
  {
    "text": "all dirty addresses during one iteration and then we can just iterate over the St",
    "start": "1104440",
    "end": "1110200"
  },
  {
    "text": "and just fix the dirty pages easy right and how do we deal with emulated hard",
    "start": "1110200",
    "end": "1117520"
  },
  {
    "start": "1114000",
    "end": "1114000"
  },
  {
    "text": "diss basically we implemented our own layer on top of it so during each",
    "start": "1117520",
    "end": "1123840"
  },
  {
    "text": "iteration when the guest tries to access the hard disk we just intercept and put",
    "start": "1123840",
    "end": "1130120"
  },
  {
    "text": "everything in our copy on write cache and well to reset everything we just have to forget the cache and that's it",
    "start": "1130120",
    "end": "1138840"
  },
  {
    "text": "and well by doing so let me show you some performance numbers so we picked",
    "start": "1138840",
    "end": "1143919"
  },
  {
    "text": "the um GDI plus uh test XI from win AFL",
    "start": "1143919",
    "end": "1149520"
  },
  {
    "text": "and well the raw numbers to just execute this um executable in a loop well you're",
    "start": "1149520",
    "end": "1157919"
  },
  {
    "text": "able to achieve up to 80 executions per second Windows is quite slow so that's",
    "start": "1157919",
    "end": "1163320"
  },
  {
    "text": "without any kind of fuzzer or instrumentation or anything right it's just starting the progress program and",
    "start": "1163320",
    "end": "1169919"
  },
  {
    "text": "waiting for it yeah so this is basically the upper limit and then you want to",
    "start": "1169919",
    "end": "1175200"
  },
  {
    "text": "write files right you need to provide payloads then the execution will",
    "start": "1175200",
    "end": "1180760"
  },
  {
    "text": "drop but uh fortunately we got um VM reloads and we don't care about process",
    "start": "1180760",
    "end": "1187640"
  },
  {
    "text": "creation and as you can see you can improve performance up to 145 executions",
    "start": "1187640",
    "end": "1192919"
  },
  {
    "text": "per second combining Intel PT tracing full Trace decoding five writes and so",
    "start": "1192919",
    "end": "1198480"
  },
  {
    "text": "on so to summarize um yeah we can reset an",
    "start": "1198480",
    "end": "1205559"
  },
  {
    "text": "entire virtual machine and Trace Our Guest faster than Windows is able to",
    "start": "1205559",
    "end": "1211640"
  },
  {
    "text": "create one process so snapshots um if you use them",
    "start": "1211640",
    "end": "1218760"
  },
  {
    "text": "you can avoid startup time and you don't have to suffer from noise bus and and",
    "start": "1218760",
    "end": "1225120"
  },
  {
    "text": "other um yeah uh non-determinism is issues",
    "start": "1225120",
    "end": "1230799"
  },
  {
    "text": "and there is no statefulness so basically if you try to fuss something like bash um bash actually will up",
    "start": "1230799",
    "end": "1238600"
  },
  {
    "text": "your entire so the the the entire um file system by just writing and deleting",
    "start": "1238600",
    "end": "1243760"
  },
  {
    "text": "files if you fuss bash right by using full snap uh full VM reloads um it's",
    "start": "1243760",
    "end": "1249559"
  },
  {
    "text": "just gone and um of course um we found",
    "start": "1249559",
    "end": "1256280"
  },
  {
    "text": "multiple bucks using our approach so here's our trophy case we found bucks in",
    "start": "1256280",
    "end": "1261760"
  },
  {
    "text": "Mac OS and qmu and well in Counter Strike Source and different programming",
    "start": "1261760",
    "end": "1267919"
  },
  {
    "text": "languages and so on so not a big task right if you combine",
    "start": "1267919",
    "end": "1275400"
  },
  {
    "text": "just the latest uh tag and um use it for your fuzzing",
    "start": "1275400",
    "end": "1282240"
  },
  {
    "text": "purposes so all right so thanks for uh all the technical details and I think we",
    "start": "1282240",
    "end": "1289480"
  },
  {
    "text": "really can uh see that it's basically possible to build a fuzzer that is able to fuss pretty much",
    "start": "1289480",
    "end": "1295200"
  },
  {
    "text": "everything um for the rest of this talk we will talk about what we think so basically we're like we will be",
    "start": "1295200",
    "end": "1301559"
  },
  {
    "text": "finishing our PhD within the next few months and we spend a lot of time researching I think with our colleagues",
    "start": "1301559",
    "end": "1307080"
  },
  {
    "text": "it's about 10 person years or something like that of of fuzzing research and we",
    "start": "1307080",
    "end": "1312200"
  },
  {
    "text": "would like to to share some ideas on how the future of fing re research might",
    "start": "1312200",
    "end": "1317520"
  },
  {
    "text": "look like and of course we're going to look into a crystal ball here a bit but I hope we can draw a map on on future on",
    "start": "1317520",
    "end": "1325240"
  },
  {
    "text": "interesting areas for future research because um every new colleague that starts has this tendency trying to",
    "start": "1325240",
    "end": "1332120"
  },
  {
    "text": "optimize the mutator or trying to optimize the scheduling algorithm of fuzzers and I've been there too like when I started I did that too and turns",
    "start": "1332120",
    "end": "1338400"
  },
  {
    "text": "out that's not very good idea so um the most important thing that we need is",
    "start": "1338400",
    "end": "1343440"
  },
  {
    "text": "harnessing so harnessing is basically the process of making your software compatible with the fuzzer which in many",
    "start": "1343440",
    "end": "1350400"
  },
  {
    "start": "1346000",
    "end": "1346000"
  },
  {
    "text": "cases is quite painful the current state is that if your software consumes a single file then that's exactly the",
    "start": "1350400",
    "end": "1357559"
  },
  {
    "text": "model all the current fuzzers are really good at if it doesn't it's a lot harder to give you an example when we were",
    "start": "1357559",
    "end": "1363600"
  },
  {
    "text": "fuzzing counter- Strike Source we needed to combine our fuzzer with counter- Strike Source and to create an agent",
    "start": "1363600",
    "end": "1369159"
  },
  {
    "text": "that talks to counter- Strike Source and what we wanted to do was to fuz the map loader now we didn't care about the map",
    "start": "1369159",
    "end": "1375240"
  },
  {
    "text": "loader of the server we cared about the map loader of the client that receives the map from the server because that",
    "start": "1375240",
    "end": "1381400"
  },
  {
    "text": "would be interesting to exploit all the clients from the server and we did that and we were able to write such an",
    "start": "1381400",
    "end": "1387120"
  },
  {
    "text": "interface and that was the code for this interface uh and that was about two",
    "start": "1387120",
    "end": "1393919"
  },
  {
    "text": "2,000 lines of code I think yes and I mean that works so we spent three days",
    "start": "1393919",
    "end": "1399039"
  },
  {
    "text": "writing the interface code and then the fuzzer found a crash within the first few seconds now that did not feel",
    "start": "1399039",
    "end": "1405600"
  },
  {
    "text": "particularly satisfying that that that ratio we might as well have tried to look at the code",
    "start": "1405600",
    "end": "1411600"
  },
  {
    "text": "ourselves um so I think there's ways to really increase the usability of fuzzers",
    "start": "1411600",
    "end": "1417360"
  },
  {
    "text": "for example imagine a system where you have this ability to create a snapshot and you run GDB so you run GDB you run",
    "start": "1417360",
    "end": "1425720"
  },
  {
    "text": "the target you set a break point wherever and you run the Target and it",
    "start": "1425720",
    "end": "1432080"
  },
  {
    "text": "hits the breakpoint and in that case it's um on calling receive on the network buffer that we care about and um",
    "start": "1432080",
    "end": "1440279"
  },
  {
    "text": "then we just have all the information that we need to create or to spawn the fuzzer we can tell the fuzzer hey this",
    "start": "1440279",
    "end": "1445480"
  },
  {
    "text": "is where you need to store the size of the data that was produced by the fuzzer this is what the maximum amount of data",
    "start": "1445480",
    "end": "1451840"
  },
  {
    "text": "you can produce and this is where you should store the data and no go fuss my",
    "start": "1451840",
    "end": "1458120"
  },
  {
    "text": "Target and that's something that should exist but currently does not even though technically it's quite easily doable and",
    "start": "1458120",
    "end": "1464440"
  },
  {
    "text": "I think there's lots of more of this these interface hacks that make f is more accessible to projects that are",
    "start": "1464440",
    "end": "1469919"
  },
  {
    "text": "currently not fuss um a similar issue is there's many scenarios where you have",
    "start": "1469919",
    "end": "1475840"
  },
  {
    "text": "multiple interacting modules for example in an sshd you have a privileged server",
    "start": "1475840",
    "end": "1482120"
  },
  {
    "text": "and then underprivileged processes that are communicating with a network uh you might have a browser where you have a",
    "start": "1482120",
    "end": "1488640"
  },
  {
    "text": "browser process and underprivileged render process or you might have a web",
    "start": "1488640",
    "end": "1493799"
  },
  {
    "text": "server where you have a web server and a database and eventually some subprocesses for or some heavy computation tasks and in all those cases",
    "start": "1493799",
    "end": "1500840"
  },
  {
    "text": "we have all those clearly defined IPC interfaces or network interfaces and it would be really neat if there was a tool",
    "start": "1500840",
    "end": "1506960"
  },
  {
    "text": "that allowed you to basically hook into a full system and look at all the interfaces that are being used and then",
    "start": "1506960",
    "end": "1512279"
  },
  {
    "text": "attack each component via the given interface and there's been some research",
    "start": "1512279",
    "end": "1517559"
  },
  {
    "text": "on that in particular for example on libraries there's been some pretty cool research where people were looking at",
    "start": "1517559",
    "end": "1523600"
  },
  {
    "text": "how libraries are used by programs and then automatically create test harnesses based on existing Library usage um so",
    "start": "1523600",
    "end": "1531640"
  },
  {
    "text": "generally I think the most important thing here is to improve the usability of fuzzers to make it easier to use",
    "start": "1531640",
    "end": "1538320"
  },
  {
    "text": "fuzzers on software that you cannot currently fuzz with the uh standard fuzzing um standard fuzzing approaches",
    "start": "1538320",
    "end": "1545520"
  },
  {
    "text": "such as AFL as we said for example binary fuzzing is usually a lot easier to use",
    "start": "1545520",
    "end": "1551000"
  },
  {
    "text": "than source code fuzzing because there might be some really weird build systems and I don't know who has de dealt with",
    "start": "1551000",
    "end": "1556880"
  },
  {
    "text": "like really weird build systems I think that's yeah right that's not fun not fun",
    "start": "1556880",
    "end": "1562279"
  },
  {
    "text": "at all trying to get like a clang into this old code base that just doesn't compile with anything newer than GCC 2",
    "start": "1562279",
    "end": "1568600"
  },
  {
    "text": "or something not fun um so the next thing is we've been talking about these",
    "start": "1568600",
    "end": "1575120"
  },
  {
    "text": "communicating systems right a lot of the fs are currently just producing a single file and if we're having interactive",
    "start": "1575120",
    "end": "1582240"
  },
  {
    "text": "systems that consume data over time we could profit heavily from having fuzzers",
    "start": "1582240",
    "end": "1588120"
  },
  {
    "text": "that acknowledge this and that are able to create test scenarios that are more like a test book or test script or",
    "start": "1588120",
    "end": "1594840"
  },
  {
    "start": "1591000",
    "end": "1591000"
  },
  {
    "text": "whatever where for example to fuzer Kernel system um you create a whole",
    "start": "1594840",
    "end": "1601000"
  },
  {
    "text": "series of interactions and the fuzzer is aware of when each interaction in like",
    "start": "1601000",
    "end": "1608120"
  },
  {
    "text": "actually triggers something in the kernel there's something like that um for for file systems but nothing General",
    "start": "1608120",
    "end": "1614240"
  },
  {
    "text": "it would be really cool to have a more General way to express this kind of test scenarios so you could use grammar",
    "start": "1614240",
    "end": "1620120"
  },
  {
    "text": "fuzzing for this which we did but there's some downsides uh you want to have binary data in there um you want to",
    "start": "1620120",
    "end": "1627360"
  },
  {
    "text": "also have structured data in there and you want to probably Express certain types uh certain type information such",
    "start": "1627360",
    "end": "1634440"
  },
  {
    "text": "as you can't use a file system after unmounting it because if you do the fuzzer will create an large amount of",
    "start": "1634440",
    "end": "1641559"
  },
  {
    "text": "false positive inputs that are just crashing for the reason that you abuse the Target and not that you misused like",
    "start": "1641559",
    "end": "1648440"
  },
  {
    "text": "the target wasn't Bucky you just didn't stick to the invariance that the target expects um if we have such a system so",
    "start": "1648440",
    "end": "1655960"
  },
  {
    "start": "1653000",
    "end": "1653000"
  },
  {
    "text": "you remember the Super Mario demo I assume so when we start fuzzing a Super Mario level we get like 200 300",
    "start": "1655960",
    "end": "1662159"
  },
  {
    "text": "executions per second but as Super Mario goes through the level the input size",
    "start": "1662159",
    "end": "1667799"
  },
  {
    "text": "Grows Right like there's more interactions that Super Mario has to perform to get further into the",
    "start": "1667799",
    "end": "1673679"
  },
  {
    "text": "level as the input size grows the fuzzer does not know where to meet mutate so",
    "start": "1673679",
    "end": "1678840"
  },
  {
    "text": "the deeper we get into the level the less likely it is that the fuzzer actually mutates the part that we care about which is the last few interactions",
    "start": "1678840",
    "end": "1685760"
  },
  {
    "text": "if we have explicit knowledge of the fact that certain parts of the input are",
    "start": "1685760",
    "end": "1691080"
  },
  {
    "text": "not relevant or they they should not be changed because if we change this message then all of the rest of the",
    "start": "1691080",
    "end": "1697440"
  },
  {
    "text": "messages is most likely not going to do anything useful so we can really focus our mutations on the last few",
    "start": "1697440",
    "end": "1704120"
  },
  {
    "text": "interactions now if we combine this with the fast VM reloads St we talked about we can make the Super Mario de Mo much",
    "start": "1704120",
    "end": "1710279"
  },
  {
    "text": "faster because as we um get into fuzzing Super Mario as the as as Mario gets like",
    "start": "1710279",
    "end": "1717000"
  },
  {
    "text": "deeper and deeper into the level each individual run also takes more time right first of all it's less likely that we mutate the right bites but secondly",
    "start": "1717000",
    "end": "1724200"
  },
  {
    "text": "each individual ex execution gets a lot slower um and in our case that was like",
    "start": "1724200",
    "end": "1731480"
  },
  {
    "text": "we started out with 200 executions and like after half the level we're down to 10 executions per second if we have a",
    "start": "1731480",
    "end": "1738159"
  },
  {
    "text": "snapshot somewhere in the middle and we know we'll only mutate the last few interactions then we can cut away all",
    "start": "1738159",
    "end": "1744880"
  },
  {
    "text": "the bootup time which is also what gave us the big performance advantage over windows and create new fuzzing runs from",
    "start": "1744880",
    "end": "1752039"
  },
  {
    "text": "this snapshot now the snapshotting process is about as fast as the reloading process so this is very cheap",
    "start": "1752039",
    "end": "1758440"
  },
  {
    "text": "and we can just do that for every input that we want to mutate um and that can actually save a",
    "start": "1758440",
    "end": "1765080"
  },
  {
    "text": "lot of time yes so basically a good example is Counter-Strike Source it takes minutes to start a game but we",
    "start": "1765080",
    "end": "1771039"
  },
  {
    "text": "don't care we don't just want to set up the memory and start at an particular point during execution and yeah we don't",
    "start": "1771039",
    "end": "1777399"
  },
  {
    "text": "want to wait for all the graphics libraries to load and and all the files and all the assets being loaded that",
    "start": "1777399",
    "end": "1783360"
  },
  {
    "text": "that's not something we want to do for each fuzzing iteration um and this would be massively",
    "start": "1783360",
    "end": "1789399"
  },
  {
    "text": "helpful in a lot of different scenarios for example kernel testing there's actually tool that does this limited subset of this it's called CS caller and",
    "start": "1789399",
    "end": "1796320"
  },
  {
    "text": "it's if you haven't seen the output statist statistics of cisola the link is",
    "start": "1796320",
    "end": "1801640"
  },
  {
    "text": "down there I'm not sure if you can read it on the presenter but um it's in the slides if you haven't had a look at the",
    "start": "1801640",
    "end": "1806960"
  },
  {
    "text": "output of Cs caller I can re heavily recommend it there was a page where all the open issues that CIS caller",
    "start": "1806960",
    "end": "1813039"
  },
  {
    "text": "automatically filed were available and it was like 30 use after free vulnerabilities at every given day in",
    "start": "1813039",
    "end": "1818600"
  },
  {
    "text": "the Linux kernel or something like that um then you can use this for Network protocol fuzzing which is quite painful",
    "start": "1818600",
    "end": "1825240"
  },
  {
    "text": "right now um you can use this to build much better web crawlers imagine you have a web crawler for your standard web",
    "start": "1825240",
    "end": "1832159"
  },
  {
    "text": "application security issues that is combined with the feedback fuzer and now all of the sudden complex forms and and",
    "start": "1832159",
    "end": "1838679"
  },
  {
    "text": "all those kind of issues like authentication lock in lock out they're not really issues anymore because the feedback fer generates test scenarios in",
    "start": "1838679",
    "end": "1845799"
  },
  {
    "text": "which all these issues are solved um so what we need is well not",
    "start": "1845799",
    "end": "1851120"
  },
  {
    "text": "actually bigger guns but a better way to express specifications for how the",
    "start": "1851120",
    "end": "1856760"
  },
  {
    "text": "target should be used and that brings us to the next point when you're using a fuzzer you",
    "start": "1856760",
    "end": "1863880"
  },
  {
    "text": "need to kind of understand what the target application is doing because the model where you have a magic box where",
    "start": "1863880",
    "end": "1869240"
  },
  {
    "text": "put in a program and get out box where that works if your target has not gotten a lot of attention recently as with our",
    "start": "1869240",
    "end": "1875880"
  },
  {
    "text": "hypervisors but in reality it usually works more like you fuss your target for a while then you manually inspect the",
    "start": "1875880",
    "end": "1882120"
  },
  {
    "text": "code coverage produced and then you fix something on your fuzzing setup and then",
    "start": "1882120",
    "end": "1887240"
  },
  {
    "text": "then you inspect the code coverage again and eventually after a few iterations you will get a buck and we're very dissa",
    "start": "1887240",
    "end": "1895880"
  },
  {
    "text": "dissatisfied um with the current state of the tools available to inspect the",
    "start": "1895880",
    "end": "1901960"
  },
  {
    "text": "process the fuzzer makes so we built something and I think this is an interesting area uh of further research",
    "start": "1901960",
    "end": "1909279"
  },
  {
    "text": "and I would like to demo this so we have a small web interface don't don't try to",
    "start": "1909279",
    "end": "1914480"
  },
  {
    "text": "hack me I'm not online uh even though this is listening to uh every connection",
    "start": "1914480",
    "end": "1920960"
  },
  {
    "text": "so we have this um this interface this is basically just your average um you can't really see the",
    "start": "1920960",
    "end": "1928320"
  },
  {
    "text": "colors I guess but this is basically just your average code coverage tool that you already know however there's a",
    "start": "1928320",
    "end": "1935159"
  },
  {
    "text": "few tricks to it so first of all we can add a fuzzing cue like usually you would",
    "start": "1935159",
    "end": "1942159"
  },
  {
    "text": "watch a fuzzing directory to interactively add this but as you can see the cover which was computed very",
    "start": "1942159",
    "end": "1948120"
  },
  {
    "text": "quickly so I don't know who has used K cover and the like but it's painfully slow um and this uses the same",
    "start": "1948120",
    "end": "1955240"
  },
  {
    "text": "technology fuzzers use like Fox Serv and all that to to calculate the coverage with a few thousand tests per second or",
    "start": "1955240",
    "end": "1961919"
  },
  {
    "text": "at least a few hundred tests per second um so you can use this interactively and actually watch your fuzzer progress",
    "start": "1961919",
    "end": "1968519"
  },
  {
    "text": "through the program um there's also a whole bunch of other really neat issues or neat things you can do um first of",
    "start": "1968519",
    "end": "1975799"
  },
  {
    "text": "all you get uh the disassembly side by side with your code coverage which is",
    "start": "1975799",
    "end": "1981960"
  },
  {
    "text": "sometimes very relevant but also we have all those Trace information right we can use this Trace information so this tool",
    "start": "1981960",
    "end": "1988799"
  },
  {
    "text": "is not aware of any programming language this tool solemnly operates on binary data so this this code here is just",
    "start": "1988799",
    "end": "1996960"
  },
  {
    "text": "passing dwarf data and reading the file and inferring which code was covered and we actually get this whole set of IDE",
    "start": "1996960",
    "end": "2003880"
  },
  {
    "text": "like features so for example we have a call here and we can see that this call went to",
    "start": "2003880",
    "end": "2010960"
  },
  {
    "text": "this line because we have the trace data so we can do go to or X refs based on",
    "start": "2010960",
    "end": "2017639"
  },
  {
    "text": "the life Trace data and similarly if we're in some function and we don't know how we got there we can just say hey",
    "start": "2017639",
    "end": "2023200"
  },
  {
    "text": "where did the returns go to so we see all the instances where M Copy was",
    "start": "2023200",
    "end": "2030639"
  },
  {
    "text": "used um you can also for example inspect the individual test cases that got you",
    "start": "2030639",
    "end": "2036639"
  },
  {
    "text": "to this this point and there will be quite a few more features uh that help",
    "start": "2036639",
    "end": "2042279"
  },
  {
    "text": "you understand what's going on with your fuzzing campaign yeah so we are going to",
    "start": "2042279",
    "end": "2048280"
  },
  {
    "start": "2047000",
    "end": "2047000"
  },
  {
    "text": "release all this stuff later yes so uh this will also be released uh in the next few days there's a link to the",
    "start": "2048280",
    "end": "2054560"
  },
  {
    "text": "GitHub rapo already at the last slide um and since we're already at the",
    "start": "2054560",
    "end": "2059679"
  },
  {
    "text": "topic of creating tools um yeah so I think fuz is a really",
    "start": "2059679",
    "end": "2065480"
  },
  {
    "text": "really great building block to build even better tools so there's a really really great talk by Brett Victor it's",
    "start": "2065480",
    "end": "2071839"
  },
  {
    "text": "called up and down the letter of abstraction and it talks about understanding systems and the example",
    "start": "2071839",
    "end": "2077079"
  },
  {
    "text": "system that they have is a little car that's going along a road and this little car has a very simple root set if",
    "start": "2077079",
    "end": "2082800"
  },
  {
    "text": "it's already on the road it's just going straight ahead if it's on the right side of the road it's steering to the left",
    "start": "2082800",
    "end": "2088280"
  },
  {
    "text": "and if it's on the left side of the road there's also a link down here which unfortunately it's really hard to read but it's in the slides so you can look",
    "start": "2088280",
    "end": "2094638"
  },
  {
    "text": "up the original blog post which I heavily recommend if it's to the right of the road it steers left and the other way around this car has a SIM single",
    "start": "2094639",
    "end": "2101839"
  },
  {
    "text": "input parameter and that's how strongly will the steering act and usually if we",
    "start": "2101839",
    "end": "2107720"
  },
  {
    "text": "want to interact with such a system I mean in our case we don't care about cars we care about complex software but",
    "start": "2107720",
    "end": "2114760"
  },
  {
    "text": "um just to keep the analogy going we can use a debugger and the debugger allows us to set a breakpoint and actually",
    "start": "2114760",
    "end": "2121640"
  },
  {
    "text": "inspect the state of a software whenever a breakpoint is hit and we can inspect",
    "start": "2121640",
    "end": "2126920"
  },
  {
    "text": "individual concrete snapshots at given time and restarting is really expensive",
    "start": "2126920",
    "end": "2132599"
  },
  {
    "text": "so the first thing you can do is you can abstract away time and in that case you can see all of the time steps of the",
    "start": "2132599",
    "end": "2139240"
  },
  {
    "text": "program at the same time in the real world of program analysis that would be debuggers time",
    "start": "2139240",
    "end": "2146359"
  },
  {
    "text": "traveling debuggers such as R RR does anyone know RR that's nice I can heavily recommend",
    "start": "2146359",
    "end": "2153359"
  },
  {
    "text": "trying out RR and if you have I don't know how much that costs but more than I can afford you can also probably try Ren",
    "start": "2153359",
    "end": "2160560"
  },
  {
    "text": "which seems a pretty cool tool but I can't afford it so the next step is abstracting away the",
    "start": "2160560",
    "end": "2166480"
  },
  {
    "text": "inputs and what what does that mean so in the car example that means we generate runs for all kinds of",
    "start": "2166480",
    "end": "2172920"
  },
  {
    "text": "parameters so for all different strengths of steering we get a bunch of",
    "start": "2172920",
    "end": "2178119"
  },
  {
    "text": "different uh yeah so this is really hard to see these these lines actually continue here so I envy the people in",
    "start": "2178119",
    "end": "2183960"
  },
  {
    "text": "the later RS that can actually look at the monitors I'm sorry about that um so",
    "start": "2183960",
    "end": "2189880"
  },
  {
    "text": "in this case we have a bunch of lines that represent all different kinds of car Behavior depending on the inputs and",
    "start": "2189880",
    "end": "2195880"
  },
  {
    "text": "having this this data set available we cannot answer a whole bunch of questions very easily for example we can say which",
    "start": "2195880",
    "end": "2201680"
  },
  {
    "text": "is the fastest connection or which is the one that takes the most time to reach the end of the road or which is",
    "start": "2201680",
    "end": "2207920"
  },
  {
    "text": "the one that actually stays on the damn road um and so what would that look like",
    "start": "2207920",
    "end": "2213839"
  },
  {
    "text": "for real world software right this that's not trivial but um I wish I would",
    "start": "2213839",
    "end": "2219000"
  },
  {
    "start": "2217000",
    "end": "2217000"
  },
  {
    "text": "have managed to finish this demo with my tool but I didn't because I I got ill the last week and um so we will have to",
    "start": "2219000",
    "end": "2226280"
  },
  {
    "text": "fake it so this is not available just yet but basically we have a tool here",
    "start": "2226280",
    "end": "2231400"
  },
  {
    "text": "where some kind of packages are pared and we have the input that actually got us there and we want to understand this",
    "start": "2231400",
    "end": "2238599"
  },
  {
    "text": "input now this is this is hard to read I don't know what this does right um but what we know",
    "start": "2238599",
    "end": "2244800"
  },
  {
    "text": "is the op code of the package is currently stored in uh a given register",
    "start": "2244800",
    "end": "2251480"
  },
  {
    "text": "and what we can do is we can add a watch point that evaluates the value of this register at this time and then we can",
    "start": "2251480",
    "end": "2259119"
  },
  {
    "text": "rerun experiments like we can ask the fuzer hey let's see how flipping bits in this input affects the value of those",
    "start": "2259119",
    "end": "2266839"
  },
  {
    "text": "watch points and since we can flip a few hundred bits per second we can perform a",
    "start": "2266839",
    "end": "2272160"
  },
  {
    "text": "completely automatic analysis and in that case I Envision something thing um",
    "start": "2272160",
    "end": "2279440"
  },
  {
    "text": "where we get an colorcoded output so this means if we change this bites then",
    "start": "2279440",
    "end": "2285599"
  },
  {
    "text": "we don't even reach the watch point so don't touch this then we got this one",
    "start": "2285599",
    "end": "2290839"
  },
  {
    "text": "which means if we change this this directly affects the value of the watch point then we have gray ones which",
    "start": "2290839",
    "end": "2297960"
  },
  {
    "text": "means well this doesn't matter at all changing this won't change anything in relation to the watch points and we have",
    "start": "2297960",
    "end": "2304400"
  },
  {
    "text": "the green ones that affect the number of break points that were actually hit and",
    "start": "2304400",
    "end": "2309960"
  },
  {
    "text": "um using this we can already see a lot clearer that there is some strong structure to the input format where we",
    "start": "2309960",
    "end": "2316000"
  },
  {
    "text": "have the uh op code Type in in these header fields and then some length fields and then some data that we don't",
    "start": "2316000",
    "end": "2322960"
  },
  {
    "text": "care about from the view of point point of view as concerning the headers so I",
    "start": "2322960",
    "end": "2329920"
  },
  {
    "text": "said this is fake but there's already a tool like that out there um AFL actually ships with AFL Analyze That does",
    "start": "2329920",
    "end": "2336040"
  },
  {
    "text": "performs some automatic format reverse engineering it does not allow you to specify exactly which values you're",
    "start": "2336040",
    "end": "2342079"
  },
  {
    "text": "interested in so it is a lot less precise um but it already does a surprising amount it can already infer a",
    "start": "2342079",
    "end": "2348640"
  },
  {
    "text": "surprising amount from a file format of about about a form file format from just",
    "start": "2348640",
    "end": "2355480"
  },
  {
    "text": "looking at the bit map another thing is root course analysis which is a research project",
    "start": "2355480",
    "end": "2360960"
  },
  {
    "start": "2358000",
    "end": "2358000"
  },
  {
    "text": "that we will publish soon where you find a buck and then you use your fuzzer to abstract away the exact path of the buck",
    "start": "2360960",
    "end": "2367520"
  },
  {
    "text": "taken so you fuzz the crash and save all the other crashes that you find and",
    "start": "2367520",
    "end": "2372599"
  },
  {
    "text": "throw away all the non- crashing inputs and that gives you a large set of non- crashing inputs and a large set of",
    "start": "2372599",
    "end": "2378520"
  },
  {
    "text": "crashing inputs but you only keep fuzzing the crashing ones and then you can create you can come up with",
    "start": "2378520",
    "end": "2384640"
  },
  {
    "text": "hypothesis automatically that try to predict whether the input will lead to a crash or not uh you just generate a",
    "start": "2384640",
    "end": "2392319"
  },
  {
    "text": "large amount of these hypothesis and look at the correlation between the outcome of these hypothesis and whether",
    "start": "2392319",
    "end": "2398240"
  },
  {
    "text": "the thing actually crashed or not um",
    "start": "2398240",
    "end": "2404599"
  },
  {
    "text": "so the best one will hopefully separate all the crashes from all the non-",
    "start": "2404599",
    "end": "2409640"
  },
  {
    "text": "crashes and all of those are really good indicators of what the actual problem with the uh with the buck was and we",
    "start": "2409640",
    "end": "2416920"
  },
  {
    "text": "used that to to identify pretty complex bucks with involved type confusions and just in time compilation issues where",
    "start": "2416920",
    "end": "2423839"
  },
  {
    "text": "the justtin time compiler miscomi stuff um there's also some pretty cool research by Sean Helen uh where the goal",
    "start": "2423839",
    "end": "2431560"
  },
  {
    "start": "2427000",
    "end": "2427000"
  },
  {
    "text": "is to abstract away different kinds of interaction with the Heap so if you want to build a heap exploit then you can ask",
    "start": "2431560",
    "end": "2438359"
  },
  {
    "text": "the fuzzer hey can you groom the Heap for me I want it to be in this particular shape try to make the Heap",
    "start": "2438359",
    "end": "2444160"
  },
  {
    "text": "that you actually see look more like the Heap that I actually want to have and",
    "start": "2444160",
    "end": "2449240"
  },
  {
    "text": "that way we can for example ask like the fuzzer figures out hey I can avoid this allocation or make it go to another",
    "start": "2449240",
    "end": "2454960"
  },
  {
    "text": "position and then we can actually get our allocation in place so that an overflow will actually do something",
    "start": "2454960",
    "end": "2460920"
  },
  {
    "text": "useful so I think the key takeaways here really are um using fuzzers I think",
    "start": "2460920",
    "end": "2466480"
  },
  {
    "text": "there's it's it's quite possible to build a whole bunch of tools that go far beyond just uncovering bucks they they",
    "start": "2466480",
    "end": "2473480"
  },
  {
    "text": "will be able to help you understand what's actually going inside of the program in in ways that are really hard",
    "start": "2473480",
    "end": "2479680"
  },
  {
    "text": "to imagine right now um and the last topic I want to talk about is unusable",
    "start": "2479680",
    "end": "2485079"
  },
  {
    "text": "code so how are you into fuss code that doesn't even run so there's some pretty cool research on that and the idea is",
    "start": "2485079",
    "end": "2491680"
  },
  {
    "start": "2487000",
    "end": "2487000"
  },
  {
    "text": "basically for example in firmware you have IO interactions with real Hardware you don't have access to the hardware",
    "start": "2491680",
    "end": "2497760"
  },
  {
    "text": "you have too little of the hardware so you can't really run a fuzzer because the hardware is slow you don't know it you just reverse engineer the firmware",
    "start": "2497760",
    "end": "2504960"
  },
  {
    "text": "um for whatever reasons you're not able to use the software and run it natively so what you can do with a lot of tricks",
    "start": "2504960",
    "end": "2511720"
  },
  {
    "text": "and a lot of smart engineering is you can actually make the fuzzer interface the firmware and act as the real",
    "start": "2511720",
    "end": "2517640"
  },
  {
    "text": "Hardware so whenever the firmware tries to access some IO values the fuzer is",
    "start": "2517640",
    "end": "2523839"
  },
  {
    "text": "tasked with producing a value and the fuzer will try to uh incrementally make",
    "start": "2523839",
    "end": "2529319"
  },
  {
    "text": "the firmware show more and more interesting behavior and if you do that you can actually get a firmware image to",
    "start": "2529319",
    "end": "2536280"
  },
  {
    "text": "boot and to run a https server and you can actually run F https uh HTTP servers",
    "start": "2536280",
    "end": "2542119"
  },
  {
    "text": "inside of the firmware without being able to access the real Hardware that would be needed to actually perform",
    "start": "2542119",
    "end": "2547559"
  },
  {
    "text": "Network request for example so there's some pretty cool research out there that was recently published and one of the",
    "start": "2547559",
    "end": "2554040"
  },
  {
    "text": "authors actually is sitting right there so go talk to him if that sounds cool to you um key takeaway fuzzes are really",
    "start": "2554040",
    "end": "2561839"
  },
  {
    "text": "really powerful if you use them well and the last thing I want to talk about because that kind of um yeah that was",
    "start": "2561839",
    "end": "2568960"
  },
  {
    "text": "the kind of research that caused some controversy um we we thought may maybe you don't want your software to be fuss",
    "start": "2568960",
    "end": "2575880"
  },
  {
    "start": "2572000",
    "end": "2572000"
  },
  {
    "text": "so how can we prevent software from being fussed with modern fuzzers and there's a whole bunch of things you can",
    "start": "2575880",
    "end": "2580960"
  },
  {
    "text": "do for example you can build additional code that uh basically allows you to",
    "start": "2580960",
    "end": "2586960"
  },
  {
    "text": "take many different paths and whenever the hash of the input changes you pick a different path so maybe it's this one",
    "start": "2586960",
    "end": "2593800"
  },
  {
    "text": "maybe it's this one every time the fuzzer flips a bit in the input the fuzzer observes A New Path and thus the",
    "start": "2593800",
    "end": "2600480"
  },
  {
    "text": "ability to learn what's actually interesting input and what is not is greatly diminished next thing you can do",
    "start": "2600480",
    "end": "2606960"
  },
  {
    "text": "is you make your targets slower in the cases that the fer cares about but not your users so for example your users",
    "start": "2606960",
    "end": "2613559"
  },
  {
    "text": "will probably not generate lots and lots of syntactically invalid inputs and if you do uh you can just make the program",
    "start": "2613559",
    "end": "2620800"
  },
  {
    "text": "waight for I don't know like a tenth of a second or something like that and that already pretty much kills fuzzing",
    "start": "2620800",
    "end": "2626440"
  },
  {
    "text": "because fuzzing will generate mostly syntactically invalid inputs and now the",
    "start": "2626440",
    "end": "2632280"
  },
  {
    "text": "assumption that underlines all of fuzzing that you can get lots and El of execution iions per second is basically",
    "start": "2632280",
    "end": "2637760"
  },
  {
    "text": "gone by adding some delay you can do something very similar with the signal Handler so if your",
    "start": "2637760",
    "end": "2644720"
  },
  {
    "text": "application crashes you can just delay the crash for a second because if your application sefs in many scenarios you",
    "start": "2644720",
    "end": "2651119"
  },
  {
    "text": "don't care if it SEC Falls now or a second later but the fuzer will then have to wait for a whole second to",
    "start": "2651119",
    "end": "2656480"
  },
  {
    "text": "observe the actual crash um if you care about like all this this",
    "start": "2656480",
    "end": "2662240"
  },
  {
    "text": "fancy stuff that's even easier to beat you can just encrypt and decrypt the put once and all of those symbolic",
    "start": "2662240",
    "end": "2668040"
  },
  {
    "text": "techniques are out of the window immediately they can't do anything about this um so we build something like this",
    "start": "2668040",
    "end": "2674240"
  },
  {
    "text": "and it pretty much means so the Baseline here is running the first input and pretty much all of those fuzes barely",
    "start": "2674240",
    "end": "2680920"
  },
  {
    "text": "beat running the input within 12 hours there is some issues with",
    "start": "2680920",
    "end": "2686800"
  },
  {
    "start": "2685000",
    "end": "2685000"
  },
  {
    "text": "this so um I said it was causing a bit of a controversy um and the issue here is",
    "start": "2686800",
    "end": "2695319"
  },
  {
    "text": "basically if you do this you will lose access to all Whitehead attention and Whitehead will not spend the week",
    "start": "2695319",
    "end": "2701640"
  },
  {
    "text": "removing this anti fuzzing stuff a blackhead on the other hand might very",
    "start": "2701640",
    "end": "2707079"
  },
  {
    "text": "well be interested in spending a few days to remove your anti fuzzing and then get the fuzzing results so you",
    "start": "2707079",
    "end": "2712280"
  },
  {
    "text": "basically trade off all Whitehead bug reports ever against delaying your",
    "start": "2712280",
    "end": "2718119"
  },
  {
    "text": "opponent for a few weeks a few days even so um that might be a valuable trade-off",
    "start": "2718119",
    "end": "2724200"
  },
  {
    "text": "if you're doing software where uh you do hand heavy anti-reverse engineering",
    "start": "2724200",
    "end": "2729880"
  },
  {
    "text": "anyway and an opponent that is manually analyzing your software is a problem in",
    "start": "2729880",
    "end": "2736000"
  },
  {
    "text": "itself but someone actually did this for an open source project because he was so annoyed by buck that some fuzzing people",
    "start": "2736000",
    "end": "2741640"
  },
  {
    "text": "filed that he actually hooked the signal Handler and that did not end well um so that was my idea of a road",
    "start": "2741640",
    "end": "2750800"
  },
  {
    "text": "map for future fuzzing research and I really think that fuzzers are building blocks like we still don't really",
    "start": "2750800",
    "end": "2757440"
  },
  {
    "text": "understand fuzzes that well but I think they're building blocks for a new generation of tools that we can use to understand software to to validate",
    "start": "2757440",
    "end": "2764440"
  },
  {
    "text": "software to find bucks in software and to understand the buck and exploit the buck too so uh as a conclusion I would",
    "start": "2764440",
    "end": "2772559"
  },
  {
    "text": "ask you to join me build better tools join us build better tools uh for future",
    "start": "2772559",
    "end": "2778240"
  },
  {
    "text": "generations of buck uh triage or uh in",
    "start": "2778240",
    "end": "2783680"
  },
  {
    "text": "that case unearthing bucks if you want um this is the whole set of GitHub",
    "start": "2783680",
    "end": "2790960"
  },
  {
    "text": "links and uh this is oh sorry so this will be available obviously on the blackhead",
    "start": "2791160",
    "end": "2798680"
  },
  {
    "text": "slides uh and this is our information and particular I would like to thank our",
    "start": "2798680",
    "end": "2806319"
  },
  {
    "text": "collaborators that made all this research possible that we're not here today but that still did a lot of work",
    "start": "2806319",
    "end": "2812599"
  },
  {
    "text": "in in all the papers that we published and uh so that's it do you yeah that's it so if",
    "start": "2812599",
    "end": "2820040"
  },
  {
    "text": "you have any questions I think we have like two or three minutes left if you can ask quick questions then that would",
    "start": "2820040",
    "end": "2826440"
  },
  {
    "text": "work otherwise we'll be around here and happily answer your questions after the",
    "start": "2826440",
    "end": "2833119"
  },
  {
    "text": "[Applause]",
    "start": "2834560",
    "end": "2842599"
  },
  {
    "text": "talk so any questions no okay then",
    "start": "2842599",
    "end": "2849079"
  },
  {
    "text": "there microphone is coming uh hi thank you for the talk so I",
    "start": "2849079",
    "end": "2856680"
  },
  {
    "text": "want to ask that what's the difference between the memory snapshot you just propos against the consistent mode in",
    "start": "2856680",
    "end": "2863640"
  },
  {
    "text": "the current AFL well um if you run something in consistent mode um so you just run the",
    "start": "2863640",
    "end": "2872280"
  },
  {
    "text": "code in a loop the process does not terminate right and just think about it",
    "start": "2872280",
    "end": "2877839"
  },
  {
    "text": "um if there is some kind of statefulness in the process um yeah then you might",
    "start": "2877839",
    "end": "2884559"
  },
  {
    "text": "not found all bucks or there are other issues and by using our approach it's",
    "start": "2884559",
    "end": "2889760"
  },
  {
    "text": "basically we don't care so we will always have a new Fresh process basically a new Fresh virtual machine",
    "start": "2889760",
    "end": "2896720"
  },
  {
    "text": "and um yeah so there are no stateful issues uh no non-determinism stuff like",
    "start": "2896720",
    "end": "2902800"
  },
  {
    "text": "that so if you run something with AFL in persistent mode as yeah in most cases",
    "start": "2902800",
    "end": "2908520"
  },
  {
    "text": "the stability will just drop yeah so for example you might actually trigger a buck but it doesn't crash it just",
    "start": "2908520",
    "end": "2914000"
  },
  {
    "text": "corrupts some values and now few thousand inputs later these changes actually caused the buck and know you're",
    "start": "2914000",
    "end": "2919119"
  },
  {
    "text": "in a hard time to actually figure out what was the buck right because AFL threw away the input that actually caused the the buck but saves the input",
    "start": "2919119",
    "end": "2927359"
  },
  {
    "text": "that stumbles over the this the broken State yeah and so what we do is a lot",
    "start": "2927359",
    "end": "2933119"
  },
  {
    "text": "more like a fork server than like uh the persistent mode so it's basically the complete opposite of the persistent mode",
    "start": "2933119",
    "end": "2938599"
  },
  {
    "text": "it's Fork server for whole VMS so in terms of the fork server so my next",
    "start": "2938599",
    "end": "2944040"
  },
  {
    "text": "question is have you ever think about like can we rather than just be like",
    "start": "2944040",
    "end": "2949640"
  },
  {
    "text": "start the FK Ser at the beginning is that possible that we can like choose multiple plays yeah actually I think you",
    "start": "2949640",
    "end": "2955440"
  },
  {
    "text": "can and lots of this interactive stuff you can probably build using a normal Fox server without our technology too so",
    "start": "2955440",
    "end": "2962960"
  },
  {
    "text": "like do you have any like kind of opinion willistic for like where can we start",
    "start": "2962960",
    "end": "2969799"
  },
  {
    "text": "another FK server in the program uh for example you could use iio interactions yeah um so basically Network um so uh if",
    "start": "2969799",
    "end": "2978720"
  },
  {
    "text": "you don't fuss something like a file um then you can so in terms of network",
    "start": "2978720",
    "end": "2984319"
  },
  {
    "text": "communication you don't know um when the communication will terminate therefore you can just create a new Fork snapshot",
    "start": "2984319",
    "end": "2991520"
  },
  {
    "text": "after each new package and this way increase performance and find even more box it really depends on the target so",
    "start": "2991520",
    "end": "2998480"
  },
  {
    "text": "um yeah I'm not sure if you can give a general answer to this question but but you like read for example like if your",
    "start": "2998480",
    "end": "3005599"
  },
  {
    "text": "application does not read the whole file in one chunk you might uh just took read",
    "start": "3005599",
    "end": "3010799"
  },
  {
    "text": "okay and this is the time so if you have any more questions please come to us we'll stay here for the next few minutes",
    "start": "3010799",
    "end": "3017040"
  },
  {
    "text": "and then we probably can meet us over tea or coffee",
    "start": "3017040",
    "end": "3021400"
  },
  {
    "text": "outside",
    "start": "3022680",
    "end": "3025680"
  }
]