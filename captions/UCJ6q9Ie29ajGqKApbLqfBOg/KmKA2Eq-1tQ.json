[
  {
    "start": "0",
    "end": "52000"
  },
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14519"
  },
  {
    "text": "good afternoon and welcome to http2 the sequel is always worse have you ever seen something that",
    "start": "14519",
    "end": "21320"
  },
  {
    "text": "was so complex it had to be hackable if only you had time to",
    "start": "21320",
    "end": "27240"
  },
  {
    "text": "understand http2 is a Beautiful Beast but it is complex and where there's",
    "start": "27240",
    "end": "32758"
  },
  {
    "text": "complexity people take shortcuts and things go wrong in this session I'm",
    "start": "32759",
    "end": "38160"
  },
  {
    "text": "going to show you how you can use new features in H2 for a range of high impact attacks and also how these shed",
    "start": "38160",
    "end": "45480"
  },
  {
    "text": "light on a type of request smuggling that has always existed but nobody ever really",
    "start": "45480",
    "end": "51879"
  },
  {
    "text": "noticed complexity causes trouble for me too I first looked at the H2 spec way",
    "start": "51879",
    "end": "58079"
  },
  {
    "start": "52000",
    "end": "276000"
  },
  {
    "text": "back in 2019 when I was doing the research search for HTTP decn attacks and I loaded up the spec I looked at the",
    "start": "58079",
    "end": "65119"
  },
  {
    "text": "size of the browser scroll bar and then I proceeded to skim read it so fast that",
    "start": "65119",
    "end": "70159"
  },
  {
    "text": "I didn't even read the security considerations my next encounter with H2",
    "start": "70159",
    "end": "75600"
  },
  {
    "text": "was after I delivered that presentation in 2019 an audience member asked me did",
    "start": "75600",
    "end": "80960"
  },
  {
    "text": "those techniques work on H2 and my answer was no it was completely secure",
    "start": "80960",
    "end": "86680"
  },
  {
    "text": "against these types of attacks and that was that until my third encounter which",
    "start": "86680",
    "end": "91880"
  },
  {
    "text": "was that same day at a party in Vegas after a few drinks someone asked me the same question and I gave them the same",
    "start": "91880",
    "end": "98920"
  },
  {
    "text": "answer and then they proceeded to explain to me exactly how you could exploit systems using request smuggling",
    "start": "98920",
    "end": "106280"
  },
  {
    "text": "over http2 this next bit is tricky to explain",
    "start": "106280",
    "end": "111920"
  },
  {
    "text": "without coming off badly but at this point in time i' just been handed an amazing lead yes but on the other hand",
    "start": "111920",
    "end": "119039"
  },
  {
    "text": "I'd just spent 9 months exploiting request smuggling so the prospect of",
    "start": "119039",
    "end": "124560"
  },
  {
    "text": "doing more request smuggling exploitation didn't exactly fil me with joy and I just went off and spent a year",
    "start": "124560",
    "end": "131239"
  },
  {
    "text": "researching cash poisoning instead when I came back one year later I tried this idea out and found yeah it",
    "start": "131239",
    "end": "138560"
  },
  {
    "text": "really worked I could hack loads of interesting systems in exciting new ways and there was just one fly in the",
    "start": "138560",
    "end": "145360"
  },
  {
    "text": "ointment and that was bit bucket every horis that I tried said that bit bucket",
    "start": "145360",
    "end": "151879"
  },
  {
    "text": "should be vulnerable but every actual exploit I tried reliably",
    "start": "151879",
    "end": "158120"
  },
  {
    "text": "failed and normally when I encounter something like this dur research I would spend a bit of time on it and then just",
    "start": "158120",
    "end": "164640"
  },
  {
    "text": "give up and move on but I'd already encountered a scenario much like this",
    "start": "164640",
    "end": "170440"
  },
  {
    "text": "during my original htb decent CS research and I was determined not to let it Escape me a second time so I did",
    "start": "170440",
    "end": "178959"
  },
  {
    "text": "continue with EXP exploiting other sites and refining the techniques and I also kept coming back to bit bucket",
    "start": "178959",
    "end": "184680"
  },
  {
    "text": "repeatedly trying to crack it and getting nowhere until January when thanks to an incredibly lucky accident I",
    "start": "184680",
    "end": "192480"
  },
  {
    "text": "got iron proof that this system was really vulnerable to request",
    "start": "192480",
    "end": "198560"
  },
  {
    "text": "smuggling however I still couldn't actually exploit it and after spending a bunch more time on it I just gave up and",
    "start": "198560",
    "end": "204599"
  },
  {
    "text": "told atlassian hey there you've got this suspicious behavior on your site technically it's vulnerable but",
    "start": "204599",
    "end": "210480"
  },
  {
    "text": "practically I think this is probably harmless you might want to patch it you might not it's up to",
    "start": "210480",
    "end": "216840"
  },
  {
    "text": "you aside from that though everything was going really well with this research",
    "start": "216840",
    "end": "221959"
  },
  {
    "text": "until around March when Emil published a bunch of research that he'd been doing",
    "start": "221959",
    "end": "227560"
  },
  {
    "text": "at the same time as me on the same topic this meant that my presentation would",
    "start": "227560",
    "end": "233120"
  },
  {
    "text": "lack anything truly groundbreaking because it was all in his presentation which was published beforehand unless",
    "start": "233120",
    "end": "240280"
  },
  {
    "text": "I could find something entirely new and so naturally I went back to bit",
    "start": "240280",
    "end": "246720"
  },
  {
    "text": "bucket and this time I finally cracked it and this led to a sequence of events",
    "start": "246720",
    "end": "254040"
  },
  {
    "text": "I found a new more powerful type of desynchronization attack an entire class",
    "start": "254040",
    "end": "260040"
  },
  {
    "text": "of issue that was previously basically useless became practically exploitable at lassan had to log everybody out of J",
    "start": "260040",
    "end": "267680"
  },
  {
    "text": "worldwide and got the computer Emergency Response Team involved and awarded me with triple their maximum",
    "start": "267680",
    "end": "275120"
  },
  {
    "text": "Bounty so out of that mess I've managed to extract some information that I hope you'll find really quite useful uh",
    "start": "275120",
    "end": "282280"
  },
  {
    "start": "276000",
    "end": "329000"
  },
  {
    "text": "regardless of whether you've seen Em's presentation already or not I'm not going to tackle this topic",
    "start": "282280",
    "end": "288720"
  },
  {
    "text": "in chronological order because uh it doesn't make sense even to me looking at it in retrospect instead first I'm going",
    "start": "288720",
    "end": "296680"
  },
  {
    "text": "to show how you can use hb2 for request smuggling then I'll focus on request",
    "start": "296680",
    "end": "303080"
  },
  {
    "text": "tunneling and show practical techniques to confirm and exploit it then I'll take a look at five new H2 exploit Primitives",
    "start": "303080",
    "end": "312160"
  },
  {
    "text": "and then cover some miscellaneous odds and ends and how to defend against these attacks and then take five minutes of",
    "start": "312160",
    "end": "318160"
  },
  {
    "text": "questions also if you're watching this live you may be able to ask questions using a chat box on the V uh if not just",
    "start": "318160",
    "end": "324840"
  },
  {
    "text": "tag me on Twitter and I'll answer there instead",
    "start": "324840",
    "end": "330319"
  },
  {
    "start": "329000",
    "end": "522000"
  },
  {
    "text": "so although htb2 is complex there's only actually four key things that you need",
    "start": "330319",
    "end": "336080"
  },
  {
    "text": "to understand in order to effectively wield it as a weapon here you can see an",
    "start": "336080",
    "end": "341759"
  },
  {
    "text": "identical request represented in http1 and hb2 the first key difference is pretty",
    "start": "341759",
    "end": "349360"
  },
  {
    "text": "obvious it's that where H1 has the request line containing the method in the path H2 has done away with this",
    "start": "349360",
    "end": "356680"
  },
  {
    "text": "concept and they've replaced it with pseudo headers these look like headers but they start",
    "start": "356680",
    "end": "362440"
  },
  {
    "text": "with a colon and they can and and they convey the information in the request",
    "start": "362440",
    "end": "367599"
  },
  {
    "text": "line and also there's the colon Authority header which replaces the host header the second key difference is that",
    "start": "367599",
    "end": "375280"
  },
  {
    "text": "hb1 is a plain text protocol so that means the server passing of requests is",
    "start": "375280",
    "end": "381720"
  },
  {
    "text": "done using string operations for example servers have to look for new lines to know when one header ends and the next",
    "start": "381720",
    "end": "388599"
  },
  {
    "text": "header starts on the other hand hb2 is a binary protocol mostly using key value pairs so",
    "start": "388599",
    "end": "396880"
  },
  {
    "text": "what I'm showing you on these slides whenever I represent a hb2 request is an",
    "start": "396880",
    "end": "402080"
  },
  {
    "text": "abstraction it's not the actual bytes on the wire and specifically the pseudo the",
    "start": "402080",
    "end": "407599"
  },
  {
    "text": "pseudo headers like conon method aren't headers that are literally called conon",
    "start": "407599",
    "end": "413160"
  },
  {
    "text": "method they actually map to a number like the B one this approach of having a binary",
    "start": "413160",
    "end": "420560"
  },
  {
    "text": "protocol uh with no string paing involved of course means there's a lot less potential for ambiguity in htb2",
    "start": "420560",
    "end": "428240"
  },
  {
    "text": "messages the third key difference is that in order to specify the length of the message htp1 is relying on the",
    "start": "428240",
    "end": "434960"
  },
  {
    "text": "content length header or the transfer encoding chunk header hb2 meanwhile has",
    "start": "434960",
    "end": "440479"
  },
  {
    "text": "this built-in frame length concept that makes those headers redundant and once again means it's not really possible to",
    "start": "440479",
    "end": "447960"
  },
  {
    "text": "send a http2 message that is ambiguous about its length and that's the reason",
    "start": "447960",
    "end": "453720"
  },
  {
    "text": "that I thought that request smuggling against http2 wasn't possible the final key difference is to",
    "start": "453720",
    "end": "460120"
  },
  {
    "text": "do with with the way that the two protocols handle multiple requests being sent over a single connection with http1",
    "start": "460120",
    "end": "468720"
  },
  {
    "text": "uh it's super simple you send your request down your socket you read the response back and you just stick another",
    "start": "468720",
    "end": "474120"
  },
  {
    "text": "root request straight down that same socket so this is exactly what it looks like on the wire and you just feedb back",
    "start": "474120",
    "end": "480159"
  },
  {
    "text": "the response in the same way so you're ring on the responses coming back in the",
    "start": "480159",
    "end": "485879"
  },
  {
    "text": "order that you sent the requests in hb2 they've replaced this",
    "start": "485879",
    "end": "492440"
  },
  {
    "text": "concept with the concept of streams as stream is simply a request response pair",
    "start": "492440",
    "end": "499479"
  },
  {
    "text": "and every frame which is the underlying hp2 data type that we mostly don't care",
    "start": "499479",
    "end": "504680"
  },
  {
    "text": "about has a stream ID and that's how the browser knows which respond es should be",
    "start": "504680",
    "end": "510680"
  },
  {
    "text": "associated with which requests and uh yeah that's pretty much it that's all you need to know to do all",
    "start": "510680",
    "end": "517640"
  },
  {
    "text": "the exploits coming up so now that we understand hb2 let's",
    "start": "517640",
    "end": "526040"
  },
  {
    "start": "522000",
    "end": "569000"
  },
  {
    "text": "see what damage we can do uh as usual in this section I've only targeted real",
    "start": "526040",
    "end": "532200"
  },
  {
    "text": "systems with bug Bounty programs all of these findings were detected with an",
    "start": "532200",
    "end": "537279"
  },
  {
    "text": "automated open- Source tool that I'll be releas releasing at the end of this presentation and of any bounties earned",
    "start": "537279",
    "end": "544120"
  },
  {
    "text": "half have been donated to local charities and the other half has been spent on",
    "start": "544120",
    "end": "549399"
  },
  {
    "text": "beer if at any point you find the covering of exploitation in this section",
    "start": "549399",
    "end": "554880"
  },
  {
    "text": "is going too fast and you haven't already seen my hdp decn attacks presentation you might want to pause it",
    "start": "554880",
    "end": "561240"
  },
  {
    "text": "and check out that because it covers similar exploitation techniques at a",
    "start": "561240",
    "end": "566560"
  },
  {
    "text": "much more sedate pace so why is hb2 request smuggling possible",
    "start": "566560",
    "end": "573880"
  },
  {
    "start": "569000",
    "end": "674000"
  },
  {
    "text": "well it's because the vast majority of servers that speak http2 actually speak",
    "start": "573880",
    "end": "579839"
  },
  {
    "text": "htp1 to the back end they speak H2 with the client and H1 with the back end",
    "start": "579839",
    "end": "585120"
  },
  {
    "text": "they're rewriting requests on their way in and I'm going to refer to this Behavior as hb2 downgrade it this setup",
    "start": "585120",
    "end": "594640"
  },
  {
    "text": "is ridiculously common for example in Amazon's application load B answer you",
    "start": "594640",
    "end": "600800"
  },
  {
    "text": "literally can't disable this if you turn on hp2 yes it will speak hb2 with a",
    "start": "600800",
    "end": "606000"
  },
  {
    "text": "client but it there's no way to make it speak hb2 to the backend system you're going to land up in this configuration",
    "start": "606000",
    "end": "613000"
  },
  {
    "text": "which effectively Dodges all the security benefits that hv2 is supposed to bring you in fact it kind of makes",
    "start": "613000",
    "end": "621519"
  },
  {
    "text": "things worse because H1 based request request smuggling occurs when the front",
    "start": "621519",
    "end": "627399"
  },
  {
    "text": "end and the back end disagree about about whether to use the content length or the transfer encoding chunked header",
    "start": "627399",
    "end": "633160"
  },
  {
    "text": "to determine the length of a message meanwhile if you turn on hb2 on the",
    "start": "633160",
    "end": "639279"
  },
  {
    "text": "front end but do downgrading well the two systems can't agree because they don't have access to the same data the",
    "start": "639279",
    "end": "645279"
  },
  {
    "text": "front end is guaranteed to use the built-in HP http2 message length and",
    "start": "645279",
    "end": "651160"
  },
  {
    "text": "then the back end doesn't have access to that message length because it's not speaking http2 and it's forced to use",
    "start": "651160",
    "end": "657160"
  },
  {
    "text": "the content length or the transfer code in chunk tether if this sounds like a mess that's because it is uh effectively",
    "start": "657160",
    "end": "665160"
  },
  {
    "text": "if you take your front end and you turn on hb2 support you've just doubled the number of ways that you may be",
    "start": "665160",
    "end": "671120"
  },
  {
    "text": "vulnerable to request M congrats so uh let's begin with an",
    "start": "671120",
    "end": "677720"
  },
  {
    "start": "674000",
    "end": "754000"
  },
  {
    "text": "extremely simple case study the hb2 RFC says that you're allowed to send a",
    "start": "677720",
    "end": "684800"
  },
  {
    "text": "Content length header over hp2 even though it's not required and is almost",
    "start": "684800",
    "end": "692680"
  },
  {
    "text": "pointless they say you're allowed to send it provided that it's correct so",
    "start": "692680",
    "end": "698560"
  },
  {
    "text": "what could possibly go wrong with this well Netflix used the netti Java library",
    "start": "698560",
    "end": "704399"
  },
  {
    "text": "and they forgot to verify that the content length was correct so if I sent",
    "start": "704399",
    "end": "709760"
  },
  {
    "text": "a hb2 request like this then when downgraded it would look like this and",
    "start": "709760",
    "end": "715320"
  },
  {
    "text": "the data shown in Orange would be prepended to to the start of the next",
    "start": "715320",
    "end": "720560"
  },
  {
    "text": "request coming from someone else to hit the back end and will thereby redirect them to my server I could just run this",
    "start": "720560",
    "end": "728720"
  },
  {
    "text": "in a in a in a loop in real time and effectively redirect everyone browsing",
    "start": "728720",
    "end": "734440"
  },
  {
    "text": "their site and potentially hijack script script Imports thereby getting persistent control over their account",
    "start": "734440",
    "end": "740720"
  },
  {
    "text": "and being able to do stuff like maybe steal PL Tex passwords and credit card numbers uh for this I got a $20,000",
    "start": "740720",
    "end": "747600"
  },
  {
    "text": "Bounty off nflix and a patch has been applied to Upstream",
    "start": "747600",
    "end": "753600"
  },
  {
    "text": "netting after that motivating start let's move on to something slightly more complex the hb2 RFC says any message",
    "start": "753600",
    "end": "761959"
  },
  {
    "start": "754000",
    "end": "859000"
  },
  {
    "text": "containing connection specific headed Fields must be treated as mouth formed but it's kind of vague about what",
    "start": "761959",
    "end": "769040"
  },
  {
    "text": "happens if you don't do this so I'm going to fill in the blanks quite a few servers don't do this",
    "start": "769040",
    "end": "777360"
  },
  {
    "text": "one of such server is Amazon's app application load balancer uh it's it's it's now been patched but at the time",
    "start": "777360",
    "end": "783399"
  },
  {
    "text": "you could exploit tons of servers like this and one such server was Oaths law",
    "start": "783399",
    "end": "788839"
  },
  {
    "text": "enforcement portal here I've sent a request using transfer encoding chunk",
    "start": "788839",
    "end": "794480"
  },
  {
    "text": "which is a connection specific header field that should lead to the message being rejected and it's just been",
    "start": "794480",
    "end": "799920"
  },
  {
    "text": "forwarded onto the back end so the back end is PRI prioritize the chunks encoding over the correct content length",
    "start": "799920",
    "end": "806720"
  },
  {
    "text": "and once again I've gained the ability to redirect arbitrary live users to my",
    "start": "806720",
    "end": "813040"
  },
  {
    "text": "website what I found was that I kept redirecting people who were in the middle of oor login flows and thereby",
    "start": "813040",
    "end": "819600"
  },
  {
    "text": "they ended up leaking their oor authentication codes to me via the referral header uh as well as affecting",
    "start": "819600",
    "end": "827079"
  },
  {
    "text": "everything behind Amazon's application load balancer this also affected everything behind encapsula web",
    "start": "827079",
    "end": "832920"
  },
  {
    "text": "application firewall which is ironically meant to make your website more secure",
    "start": "832920",
    "end": "838440"
  },
  {
    "text": "uh I reported this and got a $7,000 Bounty off oath for it notably I",
    "start": "838440",
    "end": "845320"
  },
  {
    "text": "reported this to both Amazon and incapsula uh and didn't get a bounty off either the people that write the",
    "start": "845320",
    "end": "852040"
  },
  {
    "text": "vulnerable code are not necessarily the people who have to take responsibility for the",
    "start": "852040",
    "end": "858079"
  },
  {
    "text": "result on another Target also using Amazon's application load uh load",
    "start": "858079",
    "end": "864120"
  },
  {
    "text": "balancer I found the same exploit technique worked uh but when I triggered redirect",
    "start": "864120",
    "end": "869959"
  },
  {
    "text": "I got an even more interesting request landing on my server it said hello there",
    "start": "869959",
    "end": "875199"
  },
  {
    "text": "I'd like to have permission to send you my credentials so I reconfigured my server so it said yeah absolutely sure",
    "start": "875199",
    "end": "881839"
  },
  {
    "text": "send me your credentials and sure enough they did I have a fantastic video from",
    "start": "881839",
    "end": "887959"
  },
  {
    "text": "TCP dump showing credentials streaming onto my server in real time but",
    "start": "887959",
    "end": "893600"
  },
  {
    "text": "unfortunately it was nearly impossible to to redact so I gave up and I can't share it",
    "start": "893600",
    "end": "899800"
  },
  {
    "text": "there's an interesting side point here which is if this website had been using cookies for authentication this exploit",
    "start": "899800",
    "end": "906680"
  },
  {
    "text": "would not have worked because the browser wouldn't have sent the cookies for one host to a to a different host uh",
    "start": "906680",
    "end": "913720"
  },
  {
    "text": "that's not to say cookies are better for authentication they're terrible just in different ways for that I got a $10,000 Bounty",
    "start": "913720",
    "end": "921079"
  },
  {
    "text": "taking the total to 37k so that was the basic stuff now",
    "start": "921079",
    "end": "927360"
  },
  {
    "text": "things are going to get a bit more interesting one cool thing about hb2 is that because it's a binary protocol it",
    "start": "927360",
    "end": "934160"
  },
  {
    "text": "lets you put arbitary characters wherever you like and it relies on an extra layer of server logic saying",
    "start": "934160",
    "end": "940920"
  },
  {
    "text": "things like nope you shouldn't be putting new lines in headers firefox's start page was powered",
    "start": "940920",
    "end": "948839"
  },
  {
    "text": "by the netfi CDN and they forgot to enforce this requirement so as shown",
    "start": "948839",
    "end": "954680"
  },
  {
    "text": "here this led to a request header injection V vulnerability which I could",
    "start": "954680",
    "end": "960160"
  },
  {
    "text": "use to inject a transfer en coding chunk header and Trigger request smuggling and",
    "start": "960160",
    "end": "965360"
  },
  {
    "text": "serve up content from other sites on the netlify CDN such as one that I control",
    "start": "965360",
    "end": "971560"
  },
  {
    "text": "and they had a cache so that effectively let me do cash poisoning and take persistent control over every page of",
    "start": "971560",
    "end": "978399"
  },
  {
    "text": "every site on the N CDM for this I got 2K off netfi and 2K",
    "start": "978399",
    "end": "984560"
  },
  {
    "text": "off Mozilla when I tried the same technique on alassia in Jura something really",
    "start": "984560",
    "end": "991759"
  },
  {
    "text": "quite interesting happened I expected to see two responses coming back and normal one and a poisoned one but I actually",
    "start": "991759",
    "end": "999000"
  },
  {
    "text": "got a huge range of responses clearly coming from different jro deployments",
    "start": "999000",
    "end": "1005360"
  },
  {
    "text": "intended for different people and containing a huge amount of sensitive",
    "start": "1005360",
    "end": "1011880"
  },
  {
    "text": "information as you can see here Al hopefully I redacted all the properly sensitive stuff this left me wondering what",
    "start": "1011880",
    "end": "1019519"
  },
  {
    "start": "1017000",
    "end": "1146000"
  },
  {
    "text": "exactly had happened I did not expect that and eventually I was able to figure it out and the problem was I realized",
    "start": "1019519",
    "end": "1026880"
  },
  {
    "text": "that using this new lines and headers technique I could place my my malicious",
    "start": "1026880",
    "end": "1032280"
  },
  {
    "text": "prefix inside the value of the Foo header and thereby avoid the need for a body or using transfer encoding chunked",
    "start": "1032280",
    "end": "1039558"
  },
  {
    "text": "or even needing to use the post method so I smuggled a request that",
    "start": "1039559",
    "end": "1045160"
  },
  {
    "text": "looks like this and I thought I was doing the normal technique of sending 1.5 requests to the back end thereby",
    "start": "1045160",
    "end": "1052520"
  },
  {
    "text": "poisoning the next request to hit the end point but I'd failed to account for the",
    "start": "1052520",
    "end": "1058280"
  },
  {
    "text": "fact that the front end because it viewed this injection as happening in the head headers it was just going to",
    "start": "1058280",
    "end": "1063799"
  },
  {
    "text": "terminate the headers normally so when they put their extra two black lines on",
    "start": "1063799",
    "end": "1068919"
  },
  {
    "text": "the end as per RFC spec the end result was I smuggled exactly two requests to",
    "start": "1068919",
    "end": "1075480"
  },
  {
    "text": "the back end so I got the response to the first request and the second",
    "start": "1075480",
    "end": "1081919"
  },
  {
    "text": "response just kind of sat there on the back end waiting until someone else sent a request to the server then they got",
    "start": "1081919",
    "end": "1088240"
  },
  {
    "text": "the response intended for me and what about the response in in intended for them well that sat on the server and",
    "start": "1088240",
    "end": "1094480"
  },
  {
    "text": "waited for the next person and somewh basically J lost track of which",
    "start": "1094480",
    "end": "1100640"
  },
  {
    "text": "responses should be going to to which people and ended up serving incorrect responses not just to me but to",
    "start": "1100640",
    "end": "1108159"
  },
  {
    "text": "everybody everyone was getting random responses intended for other people and",
    "start": "1108159",
    "end": "1113280"
  },
  {
    "text": "thanks to the set cookie header some of those would be persistently logging random users into random accounts which",
    "start": "1113280",
    "end": "1119720"
  },
  {
    "text": "is why after doing some hot fixes atline expired every J session worldwide",
    "start": "1119720",
    "end": "1125000"
  },
  {
    "text": "logging everybody out the root cause of this vulnerability was the pulse secure",
    "start": "1125000",
    "end": "1131320"
  },
  {
    "text": "virtual traffic manager front end which should not be confused with pulse secures",
    "start": "1131320",
    "end": "1136799"
  },
  {
    "text": "VPN we also saw the technique worked on netfi and as usual it worked on imper",
    "start": "1136799",
    "end": "1143520"
  },
  {
    "text": "Waf as well while waiting for the pulse secure",
    "start": "1143520",
    "end": "1149200"
  },
  {
    "start": "1146000",
    "end": "1228000"
  },
  {
    "text": "uh proper fix uh at last tried out a few hot fixes and a couple of things went wrong here so the first issue was they",
    "start": "1149200",
    "end": "1156919"
  },
  {
    "text": "filtered new lines in header names but not in sorry in header values but not in header names and direct exploitation of",
    "start": "1156919",
    "end": "1165799"
  },
  {
    "text": "that didn't work because it results in an invalid request as you can see but",
    "start": "1165799",
    "end": "1171919"
  },
  {
    "text": "you can put colons in header names in hp2 and using that you could get the xite once again",
    "start": "1171919",
    "end": "1177440"
  },
  {
    "text": "working another issue was that they filtered header names and header values",
    "start": "1177440",
    "end": "1182760"
  },
  {
    "text": "but failed to filter pseudo headers so you could inject new lines in the request line so here I've put the entire",
    "start": "1182760",
    "end": "1189200"
  },
  {
    "text": "payload in the method uh when you're doing this just think about what the resulting request",
    "start": "1189200",
    "end": "1195000"
  },
  {
    "text": "is going to look like when it gets downgraded or otherwise you'll end up with an valid request and the attack",
    "start": "1195000",
    "end": "1200400"
  },
  {
    "text": "will fail and finally this is a classic one uh they in the path they only block the",
    "start": "1200400",
    "end": "1207360"
  },
  {
    "text": "SLR sln sequence they didn't block sln by itself and typically sln is all you",
    "start": "1207360",
    "end": "1213520"
  },
  {
    "text": "need for successful export so in summary in this section we've seen a whole range of techniques",
    "start": "1213520",
    "end": "1219799"
  },
  {
    "text": "that you can use to exploit hb2 downgrades and Achieve request smuggling",
    "start": "1219799",
    "end": "1226600"
  },
  {
    "text": "now I'm going to take a look at something less flashy less obvious but still really quite",
    "start": "1228760",
    "end": "1234880"
  },
  {
    "text": "dangerous and in case you're wondering Yep this is the vulnerability that I found on bit",
    "start": "1234880",
    "end": "1241000"
  },
  {
    "text": "bucket when you find a request smuggling vulnerability the possible attacks your",
    "start": "1241000",
    "end": "1246120"
  },
  {
    "text": "options are affected by how the front end reuses the connection with the back end in a",
    "start": "1246120",
    "end": "1252679"
  },
  {
    "text": "typical scenario they just reuse connections more or less randomly and there's no real restrictions on your",
    "start": "1252679",
    "end": "1259480"
  },
  {
    "text": "attacks but sometimes they will only reuse a given connection for requests",
    "start": "1259480",
    "end": "1265120"
  },
  {
    "text": "coming from the same client IP or even worse only for",
    "start": "1265120",
    "end": "1271440"
  },
  {
    "text": "requests coming over the same uh client connection which makes exploitation of other users directly",
    "start": "1271440",
    "end": "1278760"
  },
  {
    "text": "very difficult but the worst case of all the most challenging one is when they just",
    "start": "1278760",
    "end": "1284799"
  },
  {
    "text": "don't ever reuse connections to the back end this creates a range of different",
    "start": "1284799",
    "end": "1290840"
  },
  {
    "text": "problems and challenges and this is the scenario that we had on bit bucket and that I'm going to be exploring in detail",
    "start": "1290840",
    "end": "1298080"
  },
  {
    "text": "today in particular I'm going to show you how to prove this vulnerability even exists and share some new exploit parts",
    "start": "1298080",
    "end": "1306360"
  },
  {
    "start": "1306000",
    "end": "1369000"
  },
  {
    "text": "for so let's visualize what's happening here as usual the orange data uh is",
    "start": "1306360",
    "end": "1313880"
  },
  {
    "text": "being treated as a separate request by the backet but because this socket is",
    "start": "1313880",
    "end": "1319679"
  },
  {
    "text": "being discarded by the front end after what it thinks is one request has been sent down it any follow-up requests",
    "start": "1319679",
    "end": "1328360"
  },
  {
    "text": "regardless of whether they're coming from the attacker or from a potential victim are going down a different socket",
    "start": "1328360",
    "end": "1334960"
  },
  {
    "text": "and are being completely unaffected this configuration happens naturally in the wild and it's also",
    "start": "1334960",
    "end": "1342279"
  },
  {
    "text": "deliberately triggered by Amazon's HTTP desync Guardian uh as a way of when it",
    "start": "1342279",
    "end": "1349200"
  },
  {
    "text": "sees suspicious uh request as a way of mitigating any harm that might be done",
    "start": "1349200",
    "end": "1355360"
  },
  {
    "text": "it's worth noting that their decent Guardian didn't have any effect on any of the hb2 attacks shown",
    "start": "1355360",
    "end": "1361520"
  },
  {
    "text": "earlier so this Behavior causes a bunch of practical problems let's have a look",
    "start": "1361520",
    "end": "1367080"
  },
  {
    "text": "at what they are and how to deal with them the first problem is that although the classic timeout based request",
    "start": "1367080",
    "end": "1374159"
  },
  {
    "start": "1369000",
    "end": "1438000"
  },
  {
    "text": "smuggling detection technique works even in this scenario the normal conf information technique will always fail",
    "start": "1374159",
    "end": "1380919"
  },
  {
    "text": "so it's easy to mistake this vulnerability for a time for a false positive caused by",
    "start": "1380919",
    "end": "1387400"
  },
  {
    "text": "timeouts you might think it's quite easy to recognize the scenario just smuggle a request like so and see if you get two",
    "start": "1387400",
    "end": "1395320"
  },
  {
    "text": "responses as you can see here but unfortunately this response doesn't show",
    "start": "1395320",
    "end": "1401440"
  },
  {
    "text": "that this target is actually vulnerable because this is how htb 1.1 is supposed",
    "start": "1401440",
    "end": "1407080"
  },
  {
    "text": "to work and unless we're able to answer the question does the front end think it's sending us one response or two this",
    "start": "1407080",
    "end": "1414880"
  },
  {
    "text": "doesn't tell us whether they're vulnerable or not hb2 however answers this question",
    "start": "1414880",
    "end": "1422000"
  },
  {
    "text": "extremely cleanly for us because if you see HP 1.1 headers and a HP 1.1 response",
    "start": "1422000",
    "end": "1430039"
  },
  {
    "text": "nested inside the body of a hp2 response well yeah that proves that they are in",
    "start": "1430039",
    "end": "1435400"
  },
  {
    "text": "fact definitely vulnerable the second problem is that request",
    "start": "1435400",
    "end": "1441720"
  },
  {
    "start": "1438000",
    "end": "1550000"
  },
  {
    "text": "tunneling vulnerabilities like this are often blind because the front end will",
    "start": "1441720",
    "end": "1447360"
  },
  {
    "text": "look at the content length coming back from the from the response and only read that many bytes so we have a common",
    "start": "1447360",
    "end": "1454919"
  },
  {
    "text": "scenario where we can smuggle a second request we can trigger two responses",
    "start": "1454919",
    "end": "1460039"
  },
  {
    "text": "from the back end but the second response is never read in by the front end and it's never passed onto us as the",
    "start": "1460039",
    "end": "1467799"
  },
  {
    "text": "as the ha and this makes detection and exploitation extremely difficult and",
    "start": "1467799",
    "end": "1473279"
  },
  {
    "text": "this Behavior was present on bit bucket fortunately for me uh I had an",
    "start": "1473279",
    "end": "1479720"
  },
  {
    "text": "extremely fluky breakthrough here the response that I happened to be testing on bit bucket was some binary file",
    "start": "1479720",
    "end": "1486679"
  },
  {
    "text": "download and it was huge it was so huge that it made bur's UI lag every time it",
    "start": "1486679",
    "end": "1492679"
  },
  {
    "text": "loaded in the repeater and aside from trying to get the team to fix the performance issues",
    "start": "1492679",
    "end": "1498840"
  },
  {
    "text": "in B I thought you know what I don't even care about the size of this",
    "start": "1498840",
    "end": "1504080"
  },
  {
    "text": "response I don't care about the body at all all I'm really looking at is the response headers so instead of using a",
    "start": "1504080",
    "end": "1511240"
  },
  {
    "text": "post why don't I just use a head and only ask for the response headers so I sent ah head and what I got",
    "start": "1511240",
    "end": "1518679"
  },
  {
    "text": "back in included a nested second http1",
    "start": "1518679",
    "end": "1524039"
  },
  {
    "text": "response that's because when you send a head it it Mak makes the back it makes",
    "start": "1524039",
    "end": "1529480"
  },
  {
    "text": "the back end send a response that has no body but it may still contain a Content length so it may still trigger the front",
    "start": "1529480",
    "end": "1535760"
  },
  {
    "text": "end to try and read some extra bites off the socket and effectively you can use head to make request tunneling",
    "start": "1535760",
    "end": "1543480"
  },
  {
    "text": "vulnerabilities non-blind maybe 50% of the",
    "start": "1543480",
    "end": "1549600"
  },
  {
    "text": "time so let's say you've confirm your tunneling hopefully made it non- blind",
    "start": "1549600",
    "end": "1555399"
  },
  {
    "text": "how do you exploit it well you can't attack other users so you've got two",
    "start": "1555399",
    "end": "1560520"
  },
  {
    "text": "main options you can bypass Front End security VES like attempts to block you from certain paths and stuff which is",
    "start": "1560520",
    "end": "1566399"
  },
  {
    "text": "straightforward and boring or you can try and tunnel internal heads often",
    "start": "1566399",
    "end": "1571840"
  },
  {
    "text": "frontend servers put on internal headers that say things like who the user is authenticated as and is it implicitly",
    "start": "1571840",
    "end": "1579720"
  },
  {
    "text": "trusted by the back end but there's a catch with exploiting internal headers which is that to",
    "start": "1579720",
    "end": "1586240"
  },
  {
    "text": "exploit one you need to know what they are you need to know what internal headers the front end is putting onto",
    "start": "1586240",
    "end": "1591840"
  },
  {
    "text": "the putting onto the request in the first place and with request tunneling",
    "start": "1591840",
    "end": "1597480"
  },
  {
    "text": "it's impossible to use normal known techniques to directly discover",
    "start": "1597480",
    "end": "1603760"
  },
  {
    "text": "them but if you can in inject new lines",
    "start": "1603760",
    "end": "1608799"
  },
  {
    "text": "into header values or header names or anywhere in the headers really you can trigger a different new",
    "start": "1608799",
    "end": "1616159"
  },
  {
    "text": "kind of desynchronization instead instead of causing a disagreement about where the body ends between the front",
    "start": "1616159",
    "end": "1622880"
  },
  {
    "text": "end and the and the back end you can cause a disagreement about where the body starts if effectively you're doing",
    "start": "1622880",
    "end": "1629799"
  },
  {
    "text": "a desynchronization in the headers directly rather than the bodies and that leads to us being able to do what I'm",
    "start": "1629799",
    "end": "1635880"
  },
  {
    "text": "showing here where I'm I'm sending what the front end and the back end both regard as one request but the back end",
    "start": "1635880",
    "end": "1644200"
  },
  {
    "text": "thinks the body starts where it says s C and thereby they think I'm searching for",
    "start": "1644200",
    "end": "1650720"
  },
  {
    "text": "the values of the internal headers that the front end put on and they will helpfully reflect them back to me",
    "start": "1650720",
    "end": "1656000"
  },
  {
    "text": "leaking them so I can try to exploit them I also found different paths on bit",
    "start": "1656000",
    "end": "1663399"
  },
  {
    "text": "bucket would get rooted to different back ends with different internal headers including some that had some",
    "start": "1663399",
    "end": "1668960"
  },
  {
    "text": "secret keys in the headers uh which was pretty cool if you want to see a full",
    "start": "1668960",
    "end": "1674519"
  },
  {
    "text": "exploitation work through uh using internal headers check out my new",
    "start": "1674519",
    "end": "1680279"
  },
  {
    "text": "Relic case study from the HP desent attx presentation",
    "start": "1680279",
    "end": "1686880"
  },
  {
    "text": "so there's one last possibility when the when the scenario is",
    "start": "1686880",
    "end": "1693760"
  },
  {
    "text": "Right sometimes if you've got requests if if you've got request tunneling and",
    "start": "1693760",
    "end": "1699840"
  },
  {
    "text": "you can inject and you can cause a header base desync and they're using a",
    "start": "1699840",
    "end": "1705960"
  },
  {
    "text": "cache and the head technique works then you can do cash poisoning cash",
    "start": "1705960",
    "end": "1712039"
  },
  {
    "text": "poisoning is already one of the highest severity attacks possible with with request smuggling and the head technique",
    "start": "1712039",
    "end": "1719080"
  },
  {
    "text": "enables a unique and extra powerful variety whereby you can effectively mix and match response headers and response",
    "start": "1719080",
    "end": "1727679"
  },
  {
    "text": "bodies so here I I've smuggled a a head and thereby triggered the headers from a",
    "start": "1727679",
    "end": "1734159"
  },
  {
    "text": "normal 44 page with a content type of text h out and then thanks to their head",
    "start": "1734159",
    "end": "1740440"
  },
  {
    "text": "overread Behavior I've used a nested get to trigger a different response that",
    "start": "1740440",
    "end": "1745519"
  },
  {
    "text": "reflects my input unencoded in the location header normally that location",
    "start": "1745519",
    "end": "1750760"
  },
  {
    "text": "header behavior is completely safe there's nothing wrong with that really but by combining these two responses",
    "start": "1750760",
    "end": "1757000"
  },
  {
    "text": "I've got arbitary JavaScript execution and because it's cash poisoning that gives me full control over every page on",
    "start": "1757000",
    "end": "1763640"
  },
  {
    "text": "the site for this exploit plus the stuff on at lassi and J seen earlier I got 15K",
    "start": "1763640",
    "end": "1770919"
  },
  {
    "text": "triple their Max Bounty taking the total earn during this research to",
    "start": "1770919",
    "end": "1776519"
  },
  {
    "start": "1776000",
    "end": "1888000"
  },
  {
    "text": "56k now I'm going to take you on a tour of hb2 exploit Primitives uh each of",
    "start": "1776720",
    "end": "1782000"
  },
  {
    "text": "these uses a H2 feature to get some kind of foothold on the Target and they're all based on real behaviors observed on",
    "start": "1782000",
    "end": "1788840"
  },
  {
    "text": "real systems in H1 duplicate headers cause all kinds of",
    "start": "1788840",
    "end": "1794600"
  },
  {
    "text": "issues but there's no way to specify a duplicate path or duplicate method but",
    "start": "1794600",
    "end": "1799640"
  },
  {
    "text": "thanks to the design of pseudo headers sometimes on some servers you can and servers do treat requests with multiple",
    "start": "1799640",
    "end": "1806159"
  },
  {
    "text": "paths inconsistently so there's definitely going to be some interesting exploits coming up using that",
    "start": "1806159",
    "end": "1812679"
  },
  {
    "text": "technique also in hb2 they've introduced The Authority Studio header which kind",
    "start": "1812679",
    "end": "1818519"
  },
  {
    "text": "of replaces the host but both of them are allowed and I believe both of them are optional so this creates ample ways",
    "start": "1818519",
    "end": "1825799"
  },
  {
    "text": "that you can have ambiguity of about your request and ensures that host headit attacks will live",
    "start": "1825799",
    "end": "1833640"
  },
  {
    "text": "on they also introduce the colon scheme pseudo header and this is pretty much",
    "start": "1835039",
    "end": "1840840"
  },
  {
    "text": "novel attack surface and as such a whole bunch of people do no validation on this",
    "start": "1840840",
    "end": "1846640"
  },
  {
    "text": "value it's supposed to just be HTTP or htps but a bunch of targets use it to",
    "start": "1846640",
    "end": "1852559"
  },
  {
    "text": "build URLs uh it's worth mentioning both the techniques here work on targets even if",
    "start": "1852559",
    "end": "1858159"
  },
  {
    "text": "they aren't doing hb2 downgrading even if they're speaking hey hb2 end to end",
    "start": "1858159",
    "end": "1863279"
  },
  {
    "text": "this one's still worth a shot first of all on netlify you could put a full URL",
    "start": "1863279",
    "end": "1869000"
  },
  {
    "text": "in the scheme and thereby confuse them about what about what was the host",
    "start": "1869000",
    "end": "1874080"
  },
  {
    "text": "what's the path and so on and on a different Target they were using it to construct a URL that they would then",
    "start": "1874080",
    "end": "1880799"
  },
  {
    "text": "send the request to so you can make them try to send their request to the wrong destination just using the skin",
    "start": "1880799",
    "end": "1889799"
  },
  {
    "start": "1888000",
    "end": "2024000"
  },
  {
    "text": "another cool thing you can do in htb1 that sometimes leads to request",
    "start": "1889799",
    "end": "1895000"
  },
  {
    "text": "smuggling is just using a colon sometimes you'll find you can put a colon in a head and name but you can't",
    "start": "1895000",
    "end": "1900679"
  },
  {
    "text": "use new lines and you'll only occasionally get request smuggling with this because the server is going to put",
    "start": "1900679",
    "end": "1906919"
  },
  {
    "text": "this annoying extra colon on the end that's supposed to Signal the start of",
    "start": "1906919",
    "end": "1912039"
  },
  {
    "text": "the value this behavior is often going to be more suited to posted attacks where",
    "start": "1912039",
    "end": "1919559"
  },
  {
    "text": "servers expect a colon in in the value and they often ignore everything after",
    "start": "1919559",
    "end": "1924960"
  },
  {
    "text": "the colon that said I did use this to get request smuggling on one Target and",
    "start": "1924960",
    "end": "1930519"
  },
  {
    "text": "I got halfway through exploitation and then the vulnerability disappeared somewhat annoyingly and the",
    "start": "1930519",
    "end": "1937320"
  },
  {
    "text": "server Banner reported that they'd updated their installation of a Pachi so",
    "start": "1937320",
    "end": "1943360"
  },
  {
    "text": "I went looking for an advisory in Apache security releases and I couldn't find anything think so I thought okay I'll",
    "start": "1943360",
    "end": "1949480"
  },
  {
    "text": "install the vulnerable version of Apache locally I'll get an advisory issued even",
    "start": "1949480",
    "end": "1954880"
  },
  {
    "text": "though technically there's already a patch available might as well and maybe I'll use it for a",
    "start": "1954880",
    "end": "1960679"
  },
  {
    "text": "demo so I installed it locally and I couldn't replicate the vulnerability I",
    "start": "1960679",
    "end": "1965720"
  },
  {
    "text": "still don't know why maybe it's vulnerable maybe it isn't but what I did do was find a different vulnerability in",
    "start": "1965720",
    "end": "1972559"
  },
  {
    "text": "Apache what I found was when mod proxy is used for hb2 downgrading they let you",
    "start": "1972559",
    "end": "1979120"
  },
  {
    "text": "put a space or as many spaces as you like in the request method so that",
    "start": "1979120",
    "end": "1984799"
  },
  {
    "text": "triggers a request line injection vulner uh vulner vulnerability on some servers",
    "start": "1984799",
    "end": "1991840"
  },
  {
    "text": "the fact that you'll end up with traing junk in the request line will make this useless but on a bunch of them",
    "start": "1991840",
    "end": "1997559"
  },
  {
    "text": "everything after the HP 1.1 the first HP 1.1 will be ignored and you'll be able to exploit",
    "start": "1997559",
    "end": "2005240"
  },
  {
    "text": "this to do things like bypass attempts to block access to certain folders and also to escape from certain folders on",
    "start": "2005240",
    "end": "2011760"
  },
  {
    "text": "the back end that they're trying to trap you in sight at the time of this being recorded there's no patch available for",
    "start": "2011760",
    "end": "2018799"
  },
  {
    "text": "this but I'm cautiously optimistic that one will be available by the time that you're watching",
    "start": "2018799",
    "end": "2024639"
  },
  {
    "start": "2024000",
    "end": "2293000"
  },
  {
    "text": "this finally a few practicalities hb2 and hb1 are spoken",
    "start": "2024639",
    "end": "2031399"
  },
  {
    "text": "over the same port so in order for a client like a browser to know which",
    "start": "2031399",
    "end": "2036600"
  },
  {
    "text": "protocol to speak it's reliant on the server advertising the fact that it supports hb2 during the SSL",
    "start": "2036600",
    "end": "2044480"
  },
  {
    "text": "handshake and some servers do support hp2 but they forget to advertise this",
    "start": "2044480",
    "end": "2049560"
  },
  {
    "text": "which means no clients will speak http2 with them by default this can lead to",
    "start": "2049560",
    "end": "2055679"
  },
  {
    "text": "you missing some extremely valuable and juicy attack office but fortunately it's",
    "start": "2055679",
    "end": "2061358"
  },
  {
    "text": "extremely easy to detect this in a number of ways and take advantage of it",
    "start": "2061359",
    "end": "2067919"
  },
  {
    "text": "I even found a real example where they had this Behavior and the hp2 setup was",
    "start": "2067919",
    "end": "2074079"
  },
  {
    "text": "exploitable but somewhat amusingly it only let me exploit other people using htb2 which was nobody so it was",
    "start": "2074079",
    "end": "2082919"
  },
  {
    "text": "useless another potential pit for is that although hb2 is supposed to be",
    "start": "2082919",
    "end": "2088398"
  },
  {
    "text": "great about separating requests into streams and so on sometimes a stream",
    "start": "2088399",
    "end": "2094440"
  },
  {
    "text": "will break all subsequent streams on that connection and and other times the first stream on",
    "start": "2094440",
    "end": "2101599"
  },
  {
    "text": "any on any connection will be treated slightly differently by the front end uh so there are approaches you can use to",
    "start": "2101599",
    "end": "2108520"
  },
  {
    "text": "manage this Behavior but it's also something that seems quite interesting as a target for further research so I'll",
    "start": "2108520",
    "end": "2115160"
  },
  {
    "text": "be looking into this shortly finally the toiling situation",
    "start": "2115160",
    "end": "2120240"
  },
  {
    "text": "like everything else is a bit of a mess because it's a binary protocol you can't",
    "start": "2120240",
    "end": "2125359"
  },
  {
    "text": "use things like netcat and open SSL for hb2 testing and because we're sending M",
    "start": "2125359",
    "end": "2131800"
  },
  {
    "text": "formed requests you can't use normal libraries uh like lip curl because they",
    "start": "2131800",
    "end": "2137000"
  },
  {
    "text": "will refuse to send these hb2 requests so what are your options well",
    "start": "2137000",
    "end": "2142320"
  },
  {
    "text": "there's a hb2 stack built into burp Suite which was designed with this stuff in mind and supports it all uh there's",
    "start": "2142320",
    "end": "2149400"
  },
  {
    "text": "also the hp2 stack that I coded from scratch and it's open source in Turbo",
    "start": "2149400",
    "end": "2154880"
  },
  {
    "text": "Intruder which is extremely powerful you can code you can make tweaks to it easily uh it's not the most reliable in",
    "start": "2154880",
    "end": "2161480"
  },
  {
    "text": "the world but it does mostly work uh and there's also Ms to hb2 smuggle which was",
    "start": "2161480",
    "end": "2167359"
  },
  {
    "text": "made by hacking up the go hb2 stack uh and may be more reliable so that might",
    "start": "2167359",
    "end": "2172839"
  },
  {
    "text": "be worth a shot too as far as detection goes I'm releasing a major update to the HD",
    "start": "2172839",
    "end": "2180160"
  },
  {
    "text": "request Smuggler bug extension uh which will support all the techniques found in",
    "start": "2180160",
    "end": "2185880"
  },
  {
    "text": "this presentation so defense well of first and foremost",
    "start": "2185880",
    "end": "2193359"
  },
  {
    "text": "please just avoid hdp2 downgrading just speak hb2 end to",
    "start": "2193359",
    "end": "2199280"
  },
  {
    "text": "end if you do that about 80% of the attacks from this presentation simply",
    "start": "2199280",
    "end": "2205119"
  },
  {
    "text": "won't work also if you're implementing a server please make sure you don't let",
    "start": "2205119",
    "end": "2210640"
  },
  {
    "text": "people do things like put new lines in headers or put colons in header names and so on just pretend it's htb1 and do",
    "start": "2210640",
    "end": "2217680"
  },
  {
    "text": "that level of strict validation and finally if you're a developer assume",
    "start": "2217680",
    "end": "2223359"
  },
  {
    "text": "that none of that was done and that headers may have new lines in them and that means that things that it used to",
    "start": "2223359",
    "end": "2228760"
  },
  {
    "text": "be safe to do like taking a HTP header and putting it in an SMTP header could",
    "start": "2228760",
    "end": "2234680"
  },
  {
    "text": "lead to SMTP injection and critical vulnerability such as unauthenticated",
    "start": "2234680",
    "end": "2240240"
  },
  {
    "text": "takeover of Wordpress accounts with no user interaction and also finally don't trust",
    "start": "2240240",
    "end": "2246760"
  },
  {
    "text": "the scheme you header please just look at the actual scheme that they're using there's a whole bunch of further",
    "start": "2246760",
    "end": "2253359"
  },
  {
    "text": "reading available uh the main thing I'd like to draw your attention to is that we're releasing online interactive Labs",
    "start": "2253359",
    "end": "2260440"
  },
  {
    "text": "these will have either just launched or be launching very soon and will let you try out techniques from this",
    "start": "2260440",
    "end": "2265839"
  },
  {
    "text": "presentation for yourself in a safe and legal environment and the three key things to",
    "start": "2265839",
    "end": "2272040"
  },
  {
    "text": "take away are the HD2 breaks assumptions at multiple layers h to downgrades are",
    "start": "2272040",
    "end": "2278960"
  },
  {
    "text": "extremely hazardous and request tunneling is a real threat I'm going to",
    "start": "2278960",
    "end": "2284400"
  },
  {
    "text": "take 5 minutes of questions now if you have any more after that feel free to just Chuck me an email uh don't forget",
    "start": "2284400",
    "end": "2290520"
  },
  {
    "text": "to follow me on Twitter thank you for listening",
    "start": "2290520",
    "end": "2295640"
  }
]