[
  {
    "start": "0",
    "end": "128000"
  },
  {
    "text": "morning everybody welcome to the Linux kernel hidden inside Windows 10 this is",
    "start": "0",
    "end": "5279"
  },
  {
    "text": "Mandalay Bay EF in case you're in the wrong room as has the pleasure of introducing Alex UNESCO",
    "start": "5279",
    "end": "11630"
  },
  {
    "text": "before we begin a little housekeeping please stop by the business hall located in Bayside a B during the day and for",
    "start": "11630",
    "end": "18990"
  },
  {
    "text": "the Welcome Reception from 1730 to 1900 tonight the Black Hall Arsenal is on the",
    "start": "18990",
    "end": "24390"
  },
  {
    "text": "palm foyer on level 3 join us for the pony Awards as well in Mandalay Bay BCD",
    "start": "24390",
    "end": "29789"
  },
  {
    "text": "at 18:30 also as usual please put your phones on vibrate we don't like to hear",
    "start": "29789",
    "end": "34980"
  },
  {
    "text": "your phone ringing thanks out good luck thank you alright thanks everyone so welcome to",
    "start": "34980",
    "end": "43500"
  },
  {
    "text": "the Linux kernel hidden inside Windows 10 a little brief by myself currently VP",
    "start": "43500",
    "end": "50430"
  },
  {
    "text": "EDR strategy crash strike secure you startups probably some of you know worked at Apple before that on the core",
    "start": "50430",
    "end": "57120"
  },
  {
    "text": "platform team helping get iOS ported basically for most n and most of you probably know me as is the",
    "start": "57120",
    "end": "64500"
  },
  {
    "text": "co-author of the windows internals book series which I'm happy to say by the way finally has a 7th edition that's someone",
    "start": "64500",
    "end": "71100"
  },
  {
    "text": "we'll be publishing so for those who are waiting for that apparently it's going to happen so most of my knowledge and",
    "start": "71100",
    "end": "77189"
  },
  {
    "text": "windows comes from what I've been doing for the last 15 years just reversing Windows with you know Ida and other",
    "start": "77189",
    "end": "84540"
  },
  {
    "text": "tools before that those main developer of react OS so an open source implementation of Windows and this is",
    "start": "84540",
    "end": "90689"
  },
  {
    "text": "pretty much been my passion ever since taking apart windows and looking at what's inside it and what's what's",
    "start": "90689",
    "end": "96810"
  },
  {
    "text": "hiding under the hood and this every new version of Windows comes out what other new things are hiding under the hood and",
    "start": "96810",
    "end": "103619"
  },
  {
    "text": "obviously it's the top title suggest there's a pretty interesting thing hiding under hood this time so we'll see",
    "start": "103619",
    "end": "109829"
  },
  {
    "text": "kind of how all that works one little caveat I guess someone posted",
    "start": "109829",
    "end": "116040"
  },
  {
    "text": "out there they're actually spoiler alert there isn't any windows linux kernel in the windows and the windows kernel so I",
    "start": "116040",
    "end": "121740"
  },
  {
    "text": "guess I was wrong all my research was a incorrect so you can go apparently there's there's nothing there but if you",
    "start": "121740",
    "end": "127590"
  },
  {
    "text": "think there is I maybe want to stick around and we'll see what's actually in there so",
    "start": "127590",
    "end": "133060"
  },
  {
    "start": "128000",
    "end": "128000"
  },
  {
    "text": "basically we're going to talk about some anti kernel concepts minimal and pìkô processes quickly talk about what",
    "start": "133060",
    "end": "138730"
  },
  {
    "text": "exactly is a minimal process and what's a pico process and then how do you become a pico provider for a pico",
    "start": "138730",
    "end": "144520"
  },
  {
    "text": "process very quick kind of intro with some NT there and then we'll actually talk about the Linux subsystem little",
    "start": "144520",
    "end": "151000"
  },
  {
    "text": "exception has a few components which I'll talk about one of which is FX core which is going to be the kernel mode",
    "start": "151000",
    "end": "156070"
  },
  {
    "text": "driver and the other ones LX SS manager which is the actual service so we'll talk about some of the functionalities",
    "start": "156070",
    "end": "161980"
  },
  {
    "text": "some of the interface is that the driver and a service has as well as some attack surfaces that exist inside of it LX SS",
    "start": "161980",
    "end": "169270"
  },
  {
    "text": "the Linux subsystem also has an interesting IPC mechanism it's not exposed I mean none of this is really",
    "start": "169270",
    "end": "174459"
  },
  {
    "text": "exposed but we'll talk about kind of how whoops windows processes and Linux processes can actually talk to each",
    "start": "174459",
    "end": "179980"
  },
  {
    "text": "others that's a good whining try that on all right so see how Windows and Linux",
    "start": "179980",
    "end": "186070"
  },
  {
    "text": "processes can talk to each others and how Microsoft kind of implemented that functionality and then we'll actually",
    "start": "186070",
    "end": "191380"
  },
  {
    "text": "talk about probably what most of you are here for the security design considerations of all this so first of",
    "start": "191380",
    "end": "196600"
  },
  {
    "text": "all when I first encountered the Linux subsystem many many months ago almost more than a year going out there are a",
    "start": "196600",
    "end": "202750"
  },
  {
    "text": "number of things that are very scary about it and I got a chance to approach Microsoft about it and kind of work with",
    "start": "202750",
    "end": "208870"
  },
  {
    "text": "them giving us some ideas on how they can improve things and happy to report most of the issues have been fixed by",
    "start": "208870",
    "end": "213910"
  },
  {
    "text": "now but there are some important kind of environmental things you need to be aware of as a sysadmin asked the",
    "start": "213910",
    "end": "220269"
  },
  {
    "text": "developer of endpoint security product we're going to see there's some very interesting things about these processes",
    "start": "220269",
    "end": "225400"
  },
  {
    "text": "and kind of how they exist in the environment that they run in if we have time I'll talk about some very brief",
    "start": "225400",
    "end": "230680"
  },
  {
    "text": "forensics you can do like for example how you can use the debug viewer to see some of the internals how you can use",
    "start": "230680",
    "end": "235959"
  },
  {
    "text": "win back to see some of the internals and hopefully we'll get a chance to show you a few demos I've got a demo of just",
    "start": "235959",
    "end": "241630"
  },
  {
    "text": "kind of a nice thing just how you can build Linux apps with Visual Studio with the subsystem which is just kind of for",
    "start": "241630",
    "end": "247180"
  },
  {
    "text": "fun but a more kind of interesting demos I've actually built a Linux application",
    "start": "247180",
    "end": "252430"
  },
  {
    "text": "and the Windows client that talked to each other's using undocumented C mechanisms so you can kind of just see how that works and also how you can",
    "start": "252430",
    "end": "259000"
  },
  {
    "text": "launch a Linux app without using the bash environment that it give you which obviously is interesting because you",
    "start": "259000",
    "end": "264760"
  },
  {
    "text": "know it means that if we have an O'Day to in Windows 10th anniversary update you could instead of popping calc you",
    "start": "264760",
    "end": "270670"
  },
  {
    "text": "might be able to you know pop a bash prompt and that'd be pretty funny right so we'll do a few demos there and then",
    "start": "270670",
    "end": "276280"
  },
  {
    "text": "I'll conclude and have time for questions if there isn't a time for questions could run over like I almost",
    "start": "276280",
    "end": "281500"
  },
  {
    "text": "always do since there's a coffee break I'll be I'll be around and you can ask me questions throughout the conference",
    "start": "281500",
    "end": "286810"
  },
  {
    "text": "and you can just wrangle me when you find me all right so let's get started talk a little bit about this idea of a",
    "start": "286810",
    "end": "292840"
  },
  {
    "text": "picot process and of a minimal process so the idea of a minimal process actually showed up in Windows 8.1 it",
    "start": "292840",
    "end": "299740"
  },
  {
    "start": "295000",
    "end": "295000"
  },
  {
    "text": "wasn't clear what it was going to be used for at that time you have to remember that a lot of this stuff we're",
    "start": "299740",
    "end": "305080"
  },
  {
    "text": "seeing obviously was built over years and little pieces of it kind of leaked out over time but a minimal process",
    "start": "305080",
    "end": "311440"
  },
  {
    "text": "essentially a Windows process that has no address space created by default so there's no peb which is standard thing",
    "start": "311440",
    "end": "318130"
  },
  {
    "text": "all Windows apps have there's no anti DLL which is a standard DLL all Windows applications must have there's no key",
    "start": "318130",
    "end": "324850"
  },
  {
    "text": "user shared data which is another structure everyone has to have there's no handle table either so they're very",
    "start": "324850",
    "end": "330640"
  },
  {
    "text": "kind of bizarre processes I think implies minimal they don't have the things you would expect to find and the",
    "start": "330640",
    "end": "336340"
  },
  {
    "text": "only way you can kind of tell that a process is minimal obviously other than everything's missing is there's a flag in the process called minimal etcetera",
    "start": "336340",
    "end": "343420"
  },
  {
    "text": "that's you create thread inside these minimal processes the threads have no tab they have no staff that gets created",
    "start": "343420",
    "end": "349600"
  },
  {
    "text": "and they don't have the standard user move context that gets created either and again there's no real way to tell",
    "start": "349600",
    "end": "354820"
  },
  {
    "text": "them apart other than again they have a flag called minimal set to true themselves so how do you get to minimal",
    "start": "354820",
    "end": "360100"
  },
  {
    "text": "processes well in rest on one which is was the codename for the anniversary build of Windows that came out yesterday",
    "start": "360100",
    "end": "365580"
  },
  {
    "text": "there's the antique reprocess e^x function lets you pass the flag to create minimal processes but it's only",
    "start": "365580",
    "end": "372220"
  },
  {
    "text": "exposed for Carl about so from user mode you can't create more processes at least not today but in the new Windows 10",
    "start": "372220",
    "end": "378040"
  },
  {
    "text": "build if you look at task manager for example you're going to see a process called memory compression which implements them the new memory",
    "start": "378040",
    "end": "383350"
  },
  {
    "text": "compression technology they haven't want to stand that's a minimal process you're going to see something called secure system if you naval virtualization based",
    "start": "383350",
    "end": "390160"
  },
  {
    "text": "security which I talked about a black head last year that again is a minimal process so they're basically these empty",
    "start": "390160",
    "end": "396010"
  },
  {
    "text": "processes with nothing in them but they still have threads that get scheduled they still have memory and they can",
    "start": "396010",
    "end": "401410"
  },
  {
    "text": "still execute stuff inside but just kind of not your usual user mode environment on top of these minimal processes you",
    "start": "401410",
    "end": "407980"
  },
  {
    "start": "406000",
    "end": "406000"
  },
  {
    "text": "then have Pico processes and when a Pico processes is a minimal process as a Pico provider and essentially what makes them",
    "start": "407980",
    "end": "415030"
  },
  {
    "text": "Pico processes versus just minimal processes this is a flag or a pointer called Pico context and pica context not",
    "start": "415030",
    "end": "422170"
  },
  {
    "text": "being null implies this is a Pico process and then threads inside of Pico process become Pico threads so what does",
    "start": "422170",
    "end": "429280"
  },
  {
    "text": "it need to be a Pico process or a Pico threat well for example if you make a system call you're going to be rerouted",
    "start": "429280",
    "end": "434320"
  },
  {
    "text": "the Pico provider if someone wants a stack trace it gets rerouted to the Pico provider if you get an exception or page",
    "start": "434320",
    "end": "440620"
  },
  {
    "text": "fault it gets rerouted to a peak of provider if someone wants their with the name of the processes you guessed it",
    "start": "440620",
    "end": "445930"
  },
  {
    "text": "reroute it to Pico provider if someone tries to open a handle to this process to the thread Pico provider says yes or",
    "start": "445930",
    "end": "453130"
  },
  {
    "text": "no and finally when a process a Pico process dies or Pico thread dies once again the Pico provider is notified so",
    "start": "453130",
    "end": "459820"
  },
  {
    "text": "basically these kind of essential execution aspects of a thread gets subsumed by a Pico provider instead of",
    "start": "459820",
    "end": "466300"
  },
  {
    "text": "by the normal native functionality of the pointers kernel provides so you're not doing an T system calls you're not",
    "start": "466300",
    "end": "471910"
  },
  {
    "text": "having NT exceptions anymore you're not having an T stacks whatever the Pico provider is providing is what these",
    "start": "471910",
    "end": "478870"
  },
  {
    "text": "processes end up seeing so basically Pico providers are custom kernel mode drivers that are allow you to implement",
    "start": "478870",
    "end": "485320"
  },
  {
    "start": "480000",
    "end": "480000"
  },
  {
    "text": "callbacks so that you can then kind of host a Pico process and provide all the",
    "start": "485320",
    "end": "490510"
  },
  {
    "text": "functionality that's going to need and this is basically the implementation of a microsoft research project that went",
    "start": "490510",
    "end": "496210"
  },
  {
    "text": "on for many many years called drawbridge and so that project you know matured from a research project to a productize",
    "start": "496210",
    "end": "501820"
  },
  {
    "text": "implementation in the anniversary update and so the kernel exposes a function PS register Pico provider and now you can",
    "start": "501820",
    "end": "508510"
  },
  {
    "text": "register Pico provider by providing the callbacks that are the kernels going to call and then you get some callbacks as",
    "start": "508510",
    "end": "514090"
  },
  {
    "text": "well so that you can now go processes create Pico threads etc however the key",
    "start": "514090",
    "end": "519550"
  },
  {
    "text": "is this API will only work if this flag pspp core registration disabled is set",
    "start": "519550",
    "end": "526180"
  },
  {
    "text": "to false so if it's set to true then you cannot register a Pico provider and before loading any third-party drivers",
    "start": "526180",
    "end": "532930"
  },
  {
    "text": "whatsoever where you're an e Lam driver or a boot star driver that variable is",
    "start": "532930",
    "end": "538060"
  },
  {
    "text": "already set to true so the only thing that can call the API early enough is a Microsoft built-in driver and so right",
    "start": "538060",
    "end": "545380"
  },
  {
    "text": "now there's only one of those and there's only one Pico provider and of course you guess that it's going to be the Linux driver that actually uses this",
    "start": "545380",
    "end": "551800"
  },
  {
    "text": "functionality now once your Pico provider you get access some API so there's some things you can do on a",
    "start": "551800",
    "end": "557110"
  },
  {
    "text": "system for example you can create Pico proxies and threads you can get associate and get a Pico context",
    "start": "557110",
    "end": "563440"
  },
  {
    "text": "associated with these things you can define the starting CPU context of these things you can suspend them and resume",
    "start": "563440",
    "end": "569320"
  },
  {
    "text": "them you can kill them obviously and you can also configure their FS and GS segments so basically this lets you",
    "start": "569320",
    "end": "575050"
  },
  {
    "text": "create and control these types of processes which you then essentially manage so this is a very nice diagram",
    "start": "575050",
    "end": "582670"
  },
  {
    "text": "that actually Microsoft published on their blog so you know copyright and kudos to them basically what you see here is an anti process is just a normal",
    "start": "582670",
    "end": "589330"
  },
  {
    "text": "Windows process with all the anti things you're probably familiar with a minimal process has none of that inside it and",
    "start": "589330",
    "end": "595260"
  },
  {
    "text": "then a Pico process is basically a minimal process which has nothing inside it either but has a Pico provider taking",
    "start": "595260",
    "end": "603460"
  },
  {
    "text": "care of all its exceptions all the system calls and everything else so it's an extension of the idea of a minimal",
    "start": "603460",
    "end": "608800"
  },
  {
    "text": "process so that's basically the internal kind of functionality that makes all this work now you might be wondering can",
    "start": "608800",
    "end": "615970"
  },
  {
    "start": "611000",
    "end": "611000"
  },
  {
    "text": "someone to register their own Pico provider can someone hook Pico providers because obviously these things can hook",
    "start": "615970",
    "end": "621040"
  },
  {
    "text": "all the system calls and do everything they want what prevents a bad back from doing that as well so people providers",
    "start": "621040",
    "end": "626560"
  },
  {
    "text": "actually register with patch guard which is a Microsoft anti hooking technology in the kernel so Patrick R will actually",
    "start": "626560",
    "end": "631720"
  },
  {
    "text": "protect the Pico provider will actually protect the system calls inside a Pico provider as well so in the Linux case I",
    "start": "631720",
    "end": "637120"
  },
  {
    "text": "knew that all of the Linux system calls are actually going to be protected by patch guard which is pretty cool now if",
    "start": "637120",
    "end": "642459"
  },
  {
    "text": "you try to rest or fake provider patch that will catch you if you try to patch that boolean that says oh no no",
    "start": "642459",
    "end": "648160"
  },
  {
    "text": "registrations are enabled now patch below crash you if you turn the boolean on and then turn it off Vasko will crash",
    "start": "648160",
    "end": "653740"
  },
  {
    "text": "you and if you try to actually hook the Pico provider callbacks to the kernel saves those are protect my patch guard",
    "start": "653740",
    "end": "658990"
  },
  {
    "text": "as well so there's a lot of kind of security Mac's I put here to make sure no one is showing up with their own Pico",
    "start": "658990",
    "end": "664300"
  },
  {
    "text": "provider to basically you know hook your applications and do bad so people have to find ways around the",
    "start": "664300",
    "end": "670730"
  },
  {
    "text": "patch ground implementation if they want to do that so how does this fit into the kind of the windows substance or linux the ws",
    "start": "670730",
    "end": "677570"
  },
  {
    "start": "674000",
    "end": "674000"
  },
  {
    "text": "cell component or I select the call the link subsystem well basically have a Pico provider driver its instantiated by",
    "start": "677570",
    "end": "683450"
  },
  {
    "text": "LX SS dot sis but it's actual the actual provider is LX cord opposite so Linux",
    "start": "683450",
    "end": "688580"
  },
  {
    "text": "core dot says meth really would provides the kernel mode implementation of a Linux compatible kernel ABI and API so",
    "start": "688580",
    "end": "695510"
  },
  {
    "text": "there is no Linux there isn't the Linux kernel there's no GPL code here there's all it's basically a Linux compatible",
    "start": "695510",
    "end": "702620"
  },
  {
    "text": "ABI and API so all the system calls are there the environment is there but there's no code that was shared with a",
    "start": "702620",
    "end": "707870"
  },
  {
    "text": "new Linux Foundation or you know the GPL or anything like that it's completely clean and it also provides the Windows",
    "start": "707870",
    "end": "713930"
  },
  {
    "text": "interface to manage these windows subsystem Linux instances so it has a device object device LX SS and that",
    "start": "713930",
    "end": "721310"
  },
  {
    "text": "allows basically command and control the driver and there's things you can you can do to it it also provides a bus idea",
    "start": "721310",
    "end": "727520"
  },
  {
    "text": "and the bus is basically what allows the windows subsystem for Linux instances to communicate with the NT world the driver",
    "start": "727520",
    "end": "735050"
  },
  {
    "text": "also implements bffs so you get the full virtual file system implementation at linux has you get inodes and there's",
    "start": "735050",
    "end": "741350"
  },
  {
    "text": "even a device I know analytic side to talk this so the window side can open slash device lash LX SS which is the NT",
    "start": "741350",
    "end": "747620"
  },
  {
    "text": "name and then there's a we're going to see later there's a slash dev I know to which Linux can use which is a Linux",
    "start": "747620",
    "end": "753080"
  },
  {
    "text": "name in user mode you don't have a management service LX SS manager and this that provides a comm interface",
    "start": "753080",
    "end": "759170"
  },
  {
    "text": "around the driver so you don't talk to the driver directly you use comm over",
    "start": "759170",
    "end": "764600"
  },
  {
    "text": "RPC to top it olymic substant manager and then it uses iocked holes and herbs to talk to the driver now what is this",
    "start": "764600",
    "end": "772310"
  },
  {
    "text": "running in user mode and in the Linux environment obvious if you have Linux you need all your Linux binaries you need bash you need you know grep you",
    "start": "772310",
    "end": "778430"
  },
  {
    "text": "need W get where all those coming from you essentially get a user mode Ubuntu 14 environment so when you first install",
    "start": "778430",
    "end": "784820"
  },
  {
    "text": "this you get the ISO from Oban to directly and it just lays down a file system with all the standard bindings",
    "start": "784820",
    "end": "791240"
  },
  {
    "text": "you can have and a bunch of 14 distribution the key thing is that Ubuntu though has an upstart or systemd",
    "start": "791240",
    "end": "797270"
  },
  {
    "text": "process right that's your init daemon on most Linux systems well Microsoft had to",
    "start": "797270",
    "end": "802650"
  },
  {
    "text": "write one custom piece of code here which is their own inner demon so everything else on this file system is",
    "start": "802650",
    "end": "808320"
  },
  {
    "text": "basically directly from Ubuntu on modified but there's a custom any daemon which you're going to see actually kind",
    "start": "808320",
    "end": "813570"
  },
  {
    "text": "of makes it all work because that inner demon needs to know it's not really running on the Linux kernel but it's running under kind of a wrapper or",
    "start": "813570",
    "end": "820440"
  },
  {
    "text": "compatible windows implementation of that current you then have two simple processes LX run XE which is how you",
    "start": "820440",
    "end": "826860"
  },
  {
    "text": "install uninstall update and service the subsystem and you have a launcher service which is essentially mash C and",
    "start": "826860",
    "end": "834540"
  },
  {
    "text": "then bash that XE spawns instances of mash or other things as we're going to see by talking to the LX SS manager and",
    "start": "834540",
    "end": "841110"
  },
  {
    "text": "LX run we'll also talk about how it kind of provides all that management and installation so we're going to go over",
    "start": "841110",
    "end": "847410"
  },
  {
    "text": "these components a little bit more detail that being said that's kind of a big scary picture which no one will be able",
    "start": "847410",
    "end": "853830"
  },
  {
    "text": "to read right now on the slides which will be posted online obviously so that's kind of how the whole system",
    "start": "853830",
    "end": "859860"
  },
  {
    "text": "works and we'll go and talk about some of these components again it's this tiny I know when you get the slides it'll",
    "start": "859860",
    "end": "865530"
  },
  {
    "text": "it'll look a bit better but you know just architects will show off all right",
    "start": "865530",
    "end": "870570"
  },
  {
    "text": "so let's talk about the LX core side and then kind of go a little bit deeper into how it out functions so first of all",
    "start": "870570",
    "end": "877110"
  },
  {
    "text": "it's a driver right it runs and kernel mode so the ring 0 it's about 800 kilobytes so it's a very large piece of",
    "start": "877110",
    "end": "882240"
  },
  {
    "text": "ring 0 code obviously re-implementing the entire kernel ABI here now in some cases the implementation is the Linux",
    "start": "882240",
    "end": "889350"
  },
  {
    "text": "API are written from scratch so for example the pipe implementation is a from scratch implementation of Linux",
    "start": "889350",
    "end": "895500"
  },
  {
    "text": "pipes in other cases we're just kind of wrapping something that the NT kernel already provides for example scheduling",
    "start": "895500",
    "end": "902220"
  },
  {
    "text": "I'll there isn't a custom scheduler that's like a Linux Pacific schedule in any way you basically just wrap all",
    "start": "902220",
    "end": "908430"
  },
  {
    "text": "scheduled AP is the anti scheduler and the NT scheduler takes care of all all that's work in other cases you get a mix",
    "start": "908430",
    "end": "914940"
  },
  {
    "text": "for example in the file system well the file system is fill NTFS this still",
    "start": "914940",
    "end": "920160"
  },
  {
    "text": "installs an NTFS kind of directory and lays out the files on a machine but on",
    "start": "920160",
    "end": "926100"
  },
  {
    "text": "top of NTFS they build VFS they've built the idea of inodes they build the VFS style caching of inodes and directory",
    "start": "926100",
    "end": "932640"
  },
  {
    "text": "entries and they've built you know ten and other emulated things and so sometimes you get a mix just like in a",
    "start": "932640",
    "end": "939250"
  },
  {
    "text": "networking scenario as well where ultimately networking is done by the Windows tcp/ip stack but there's a whole",
    "start": "939250",
    "end": "944800"
  },
  {
    "text": "B as the socket emulation layer or a wrapper layer on top of that and basically when they did one or the other",
    "start": "944800",
    "end": "950500"
  },
  {
    "text": "essentially had to do the compatibility for example any pipes you know empty has the name pipe file system and PFS NT",
    "start": "950500",
    "end": "957910"
  },
  {
    "text": "pipes have slight differences from linux pipes so if you just took linux pipes and implement in the mon top of n PFS",
    "start": "957910",
    "end": "964750"
  },
  {
    "text": "things going to be that compatible so they have to do that from scratch meanwhile scheduling well the scheduling",
    "start": "964750",
    "end": "969880"
  },
  {
    "text": "algorithms are highly internal to OSS anyway Linux changes there's you know every every major build so things aren't",
    "start": "969880",
    "end": "976630"
  },
  {
    "text": "that dependent on the scheduler in other cases they have to do things that were close enough like they didn't want to",
    "start": "976630",
    "end": "982060"
  },
  {
    "text": "write you know full support for real XFS you know with rely nodes on top of that",
    "start": "982060",
    "end": "987519"
  },
  {
    "text": "so instead II took NTFS they kind of put VFS on top of it I'm using things like alternate direct data streams or",
    "start": "987519",
    "end": "994300"
  },
  {
    "text": "extended attributes and it works close enough like there's some issues with like case sensitivity and siblings",
    "start": "994300",
    "end": "999519"
  },
  {
    "text": "pointing to the wrong partition and weird things like that but it's close enough for now and they'll keep kind of improving on it and it's also important",
    "start": "999519",
    "end": "1006449"
  },
  {
    "text": "to remember that n key originally had a POSIX subsystem so the idea of case sensitivity the idea of",
    "start": "1006449",
    "end": "1012560"
  },
  {
    "text": "devices that aren't just Drive letters the the fact that it works that it attributes an 80s NTFS a lot of the",
    "start": "1012560",
    "end": "1019290"
  },
  {
    "text": "original design decisions done by you know Dave Cutler and his team back in the 80s and 90s paid off the big is",
    "start": "1019290",
    "end": "1025380"
  },
  {
    "text": "going to make this work because if Windows the Windows kernel was not case sensitive it would have been a lot harder to kind of bring this bring this",
    "start": "1025380",
    "end": "1032040"
  },
  {
    "text": "into light today you can also customize the driver a little bit so there's some rusty keys this is a mostly for",
    "start": "1032040",
    "end": "1037860"
  },
  {
    "text": "reference that allow you to set up some tracing and some additional features the subsystem this is probably intended for",
    "start": "1037860",
    "end": "1043678"
  },
  {
    "text": "testing but it's useful for forensics as well so you'll have this on the slide once these are released so",
    "start": "1043679",
    "end": "1050690"
  },
  {
    "start": "1050000",
    "end": "1050000"
  },
  {
    "text": "obviously one of the most important things that the subsystem can do is provide the system call interface that",
    "start": "1050690",
    "end": "1056460"
  },
  {
    "text": "Linux applications are going to need now my except actually has the full official list on the release notes page I'm still",
    "start": "1056460",
    "end": "1062070"
  },
  {
    "text": "actually listed in every build what substance what system calls they added which is pretty nice of them to do so",
    "start": "1062070",
    "end": "1067650"
  },
  {
    "text": "today ass of the release village came out yesterday there's 216 system calls Linux",
    "start": "1067650",
    "end": "1072750"
  },
  {
    "text": "system calls they're implemented by lxb cysts dispatch their support for P trace which is really nice you can enable",
    "start": "1072750",
    "end": "1079410"
  },
  {
    "text": "certainly buggy features like have a break point of a system called failure fails and you can also enable system",
    "start": "1079410",
    "end": "1085200"
  },
  {
    "text": "called tracing and if we have time I'll show you that where you basically set up a few variables in the kernel or in the",
    "start": "1085200",
    "end": "1090330"
  },
  {
    "text": "registry and then in debug view you can see every single system call that's being made which is you know really good",
    "start": "1090330",
    "end": "1095850"
  },
  {
    "text": "it's kind of like having a proc mod for the Linux world is just races but it's better than nothing so it's kind of one",
    "start": "1095850",
    "end": "1101880"
  },
  {
    "text": "interface that it has the other interface that has of course is the file system or VFS so there's two main kind",
    "start": "1101880",
    "end": "1108150"
  },
  {
    "text": "of file system groups that they implement one of them is called volley fess and this is bathe your linux facing",
    "start": "1108150",
    "end": "1113910"
  },
  {
    "text": "partition this is where you have support for unix rights you can chmod CH own and",
    "start": "1113910",
    "end": "1119610"
  },
  {
    "text": "this uses a lot of the NTFS alternate data stream support and accept attribute support to basically emulate or rap some",
    "start": "1119610",
    "end": "1126960"
  },
  {
    "text": "of the Linux files and specific things on top of NTFS and so because of that this file system or this directory on",
    "start": "1126960",
    "end": "1134070"
  },
  {
    "text": "your FOSDEM isn't compatible with win 30 - if you drag a win 30 to file in there from Explorer it's not going to have the",
    "start": "1134070",
    "end": "1140400"
  },
  {
    "text": "right attributes it's not going to have the right data streams so the Linux system is not going to understand what to do with this so there's a second file",
    "start": "1140400",
    "end": "1146670"
  },
  {
    "text": "system model called Drive FS or DRV FS and this actually is the Linux facing system that implements or Maps your",
    "start": "1146670",
    "end": "1153330"
  },
  {
    "text": "win32 drives so by using Linux mount points they actually mount your C Drive your D Drive whatever external USB",
    "start": "1153330",
    "end": "1159210"
  },
  {
    "text": "drives you have they mount them in a Linux world and then you can actually interoperate with the files you have",
    "start": "1159210",
    "end": "1164490"
  },
  {
    "text": "there so you're not supposed to connive touch the Linux side of things but if you got your own files the Linux ups then can read from them and vice-versa",
    "start": "1164490",
    "end": "1171210"
  },
  {
    "text": "so this is a real you know one of the things that often get asked is this is you know all running on your host it all",
    "start": "1171210",
    "end": "1176250"
  },
  {
    "text": "has access to your file system so there's no kind of emulation or VM around here it's real fast that it can",
    "start": "1176250",
    "end": "1182850"
  },
  {
    "text": "access and then on top of this they also implement things like a proc efest obviously so you actually can go in you",
    "start": "1182850",
    "end": "1189000"
  },
  {
    "text": "know cat slash proc / the pig and this will call the appropriate kernel api's there's tampa fests of course which",
    "start": "1189000",
    "end": "1195240"
  },
  {
    "text": "provides like the /dev so you have actual devices that they implement now they don't implement real device drivers",
    "start": "1195240",
    "end": "1201870"
  },
  {
    "text": "in this in right so you don't have access to your webcam for example you don't have access to your your printer",
    "start": "1201870",
    "end": "1207210"
  },
  {
    "text": "you don't have access to USB your PCI devices other than the network obviously",
    "start": "1207210",
    "end": "1212280"
  },
  {
    "text": "mouse and the keyboard you know so you have your input and output but you don't have custom device drivers that you can talk to it that are mapped in any way",
    "start": "1212280",
    "end": "1218520"
  },
  {
    "text": "which is a good thing because the last thing you want is you know windows drivers suddenly talking to Linux processes and there's Sisyphus as their",
    "start": "1218520",
    "end": "1225600"
  },
  {
    "text": "of course so the filesystem obviously the big piece and another kind of attack surfaces behind this and Mac stuff again",
    "start": "1225600",
    "end": "1231690"
  },
  {
    "text": "on their blog has a really good picture that he put up with your basic kind of shows you you know there's your Linux",
    "start": "1231690",
    "end": "1237539"
  },
  {
    "text": "application there's LX core all the system calls that are implemented by the system called layer go down to the FS",
    "start": "1237539",
    "end": "1243360"
  },
  {
    "text": "and then the use your voila fess which is again your Linux environment your DRV",
    "start": "1243360",
    "end": "1248370"
  },
  {
    "text": "FS which is your windows mount points and then tampa fest praça fest sisyphus etc all this then built on top of the",
    "start": "1248370",
    "end": "1255270"
  },
  {
    "text": "anti kernels object manager IO manager and NTFS so ultimately the the reason",
    "start": "1255270",
    "end": "1260490"
  },
  {
    "text": "rights are still done by the empty kernel when all this is set it up so when this thing basically starts up",
    "start": "1260490",
    "end": "1266340"
  },
  {
    "text": "it's got a little LX core initialize function and basically registers itself as a pico provider sets up some event",
    "start": "1266340",
    "end": "1272760"
  },
  {
    "text": "log tracing so actually this is fully kind of plug it into my blog and if you're familiar with EPW can enable it",
    "start": "1272760",
    "end": "1278340"
  },
  {
    "text": "and see everything that it's doing and then it just basically waits for herbs so it waits for i/o request packets from",
    "start": "1278340",
    "end": "1285360"
  },
  {
    "text": "user mode so someone can come in and request the create close and clean up the basically create instances or",
    "start": "1285360",
    "end": "1291150"
  },
  {
    "text": "entities of the subsystem there's iocked fills device control to actually configure and set state and talk to the",
    "start": "1291150",
    "end": "1297720"
  },
  {
    "text": "subsystem and then there's read and write social use by the IPC mechanism so when this thing starts up it creates",
    "start": "1297720",
    "end": "1303809"
  },
  {
    "start": "1302000",
    "end": "1302000"
  },
  {
    "text": "this slash device Alexis s device object now on top of this device savage GAF i",
    "start": "1303809",
    "end": "1309210"
  },
  {
    "text": "ofyn interfaces you have a route bus interface and this is how the linux manager service creates new instances",
    "start": "1309210",
    "end": "1315809"
  },
  {
    "text": "once you have an instance you then get a device out or file object for the bus instance interface and every instance",
    "start": "1315809",
    "end": "1321900"
  },
  {
    "text": "has a good and so you now have a file object inside of this namespace to talk to specifically to that instance and",
    "start": "1321900",
    "end": "1328080"
  },
  {
    "text": "what's an instance is basically just a session Linux session so it's you're in a daemon and then anything you create",
    "start": "1328080",
    "end": "1333480"
  },
  {
    "text": "under that under your kind of account then you can obtain a client interface to the instance so the instance can have",
    "start": "1333480",
    "end": "1340179"
  },
  {
    "text": "multiple clients talking to it in these clients can then basically set up IPC among themselves so as the client set up",
    "start": "1340179",
    "end": "1347289"
  },
  {
    "text": "IPC they're creating IPC server ports and IPC message ports the model is very",
    "start": "1347289",
    "end": "1353019"
  },
  {
    "text": "similar to a LPC if you're familiar with that or RPC in user mode it's all custom and internal but the basically how",
    "start": "1353019",
    "end": "1359049"
  },
  {
    "text": "instances can talk to win32 and we'll see how the subsystem actually uses that in turtling so the route bus basically",
    "start": "1359049",
    "end": "1366370"
  },
  {
    "text": "has a single apple the linux manager calls i octal a DSS control whatever and",
    "start": "1366370",
    "end": "1371649"
  },
  {
    "text": "this basically sets up an instance and it creates the gooood it mounts the file",
    "start": "1371649",
    "end": "1377409"
  },
  {
    "text": "systems it creates a job object but it passes the token tells us what to map inside the mount points and basically",
    "start": "1377409",
    "end": "1384190"
  },
  {
    "text": "just defines what the instance is going to look like nothing starts yet once the instance is actually being created then",
    "start": "1384190",
    "end": "1390519"
  },
  {
    "start": "1390000",
    "end": "1390000"
  },
  {
    "text": "you get a handle to the instance and then there's an octal they're set instant state and the alexis test",
    "start": "1390519",
    "end": "1396519"
  },
  {
    "text": "manager service starts the instance obviously can then update network path update network cards or map any paths",
    "start": "1396519",
    "end": "1403120"
  },
  {
    "text": "that it needs but once it starts the instance then the inner demon actually starts up so then you get in it and",
    "start": "1403120",
    "end": "1408490"
  },
  {
    "text": "you're going to see in it and you know process hack or task manager and then whatever is the process you want to",
    "start": "1408490",
    "end": "1414730"
  },
  {
    "text": "launch after that we're going to see it gets launched so initially an instance is just an instance of in it and then",
    "start": "1414730",
    "end": "1421659"
  },
  {
    "text": "some things gonna have to go and talk to that now once innocence is created can have",
    "start": "1421659",
    "end": "1426879"
  },
  {
    "text": "bus clients so clients again are things that are talking to the instance and a client can register server a client can",
    "start": "1426879",
    "end": "1433629"
  },
  {
    "text": "also connect to a service so the server side of a client a client at the server will basically register server a client",
    "start": "1433629",
    "end": "1439360"
  },
  {
    "text": "that's a client of that server will connect to it there's some other things which I did not look at I don't know if",
    "start": "1439360",
    "end": "1444399"
  },
  {
    "text": "they actually used enlightened forks and fasting callbacks so I don't actually I",
    "start": "1444399",
    "end": "1449830"
  },
  {
    "text": "have no idea what these things are actually used for I spent a long time reversing this but I couldn't really see",
    "start": "1449830",
    "end": "1454899"
  },
  {
    "text": "anything using those so they may be things for the future now once a instance is created in Linux world you",
    "start": "1454899",
    "end": "1461860"
  },
  {
    "text": "get a /dev LX SS so this is something actually in bash and this is basically",
    "start": "1461860",
    "end": "1466869"
  },
  {
    "text": "how a Linux process can talk to the instance and become a client of it and the idea here is on the window side",
    "start": "1466869",
    "end": "1472850"
  },
  {
    "text": "someone can use the windows optical interface through register service on the picot side on Linux side someone can",
    "start": "1472850",
    "end": "1478789"
  },
  {
    "text": "use the Linux device instance to connect to that service and as we're going to see the APC section now you can have a",
    "start": "1478789",
    "end": "1484220"
  },
  {
    "text": "Pico processor or Linux process any witness process talking to each other's the key thing is that only the NIT",
    "start": "1484220",
    "end": "1490220"
  },
  {
    "text": "daemon is actually allowed to talk to that now there's a rich key I'm going to show you later which lets you bypass that but by default only in it can",
    "start": "1490220",
    "end": "1497419"
  },
  {
    "text": "actually talk to this instance and talk to the windows world but there's there are ways around that so then the server",
    "start": "1497419",
    "end": "1503809"
  },
  {
    "text": "is a mess the server and message ports are basically how a Pico or Linux process and a Windows process can talk",
    "start": "1503809",
    "end": "1509210"
  },
  {
    "text": "to each others and it allows two things allows raw data to be sent through read and write calls and allows marshalling",
    "start": "1509210",
    "end": "1515720"
  },
  {
    "text": "and D marshalling as well so there's some things you can marshal there's some things you can deem are shil and I'll show you what those are and then you can",
    "start": "1515720",
    "end": "1522530"
  },
  {
    "text": "also associate events and you can map memory as well so once I can map memory and the other side you can map that",
    "start": "1522530",
    "end": "1528559"
  },
  {
    "text": "other process memory so you can have memory mappings between the Linux world and the windows world and we're going to",
    "start": "1528559",
    "end": "1534500"
  },
  {
    "text": "talk a little bit more about that in the IPC section so that's kind of what the kernel driver",
    "start": "1534500",
    "end": "1540500"
  },
  {
    "text": "provides now take a look at some of the user side behind all that's so LX SS",
    "start": "1540500",
    "end": "1546140"
  },
  {
    "text": "manager is the thing that provides a user mode service and LX SS manager is essentially a service that is in a",
    "start": "1546140",
    "end": "1552679"
  },
  {
    "text": "service host so it's going to be one of those svchost.exe processes and inside of it is going to have a DLL which is",
    "start": "1552679",
    "end": "1558919"
  },
  {
    "text": "going to be LX SS manager now it runs as a protected process light or ppl at the",
    "start": "1558919",
    "end": "1564470"
  },
  {
    "text": "windows level so if you're not familiar with EPL's I've given talks on this or you can read the blog or MSDN but",
    "start": "1564470",
    "end": "1569870"
  },
  {
    "text": "essentially it's a very protected as the name suggests process that no one can really touch and we're going to see in the security section why they made of",
    "start": "1569870",
    "end": "1575870"
  },
  {
    "text": "the ppl it then registers a comm class LX SS user session which then implements",
    "start": "1575870",
    "end": "1582110"
  },
  {
    "text": "an interface called a LX SS session so overcome things can now talk to the LX",
    "start": "1582110",
    "end": "1588200"
  },
  {
    "text": "SS manager now it has one single interface which is LX SS session and",
    "start": "1588200",
    "end": "1593919"
  },
  {
    "text": "with that interface you can ask it to start a new instance to get at the",
    "start": "1593919",
    "end": "1599149"
  },
  {
    "text": "current instance ID to change the state of an instance to get the state of innocence or to initialize the fast and",
    "start": "1599149",
    "end": "1605419"
  },
  {
    "text": "for the first time when we first kind of installed a thing and laid it down once you either get an instance or start an",
    "start": "1605419",
    "end": "1611720"
  },
  {
    "text": "instance you think it and il X I LX SS instance comm object which you can then",
    "start": "1611720",
    "end": "1618140"
  },
  {
    "text": "use to configure the instance query in send information on the instance register a server that is going to use",
    "start": "1618140",
    "end": "1625460"
  },
  {
    "text": "the APC mechanism we're going to see or connect to a server so the Linux I can actually have a server of its own that you connect to and most importantly",
    "start": "1625460",
    "end": "1633169"
  },
  {
    "text": "perhaps the ability to create a Linux process inside of this instance so you can request the instance to actually create a process and we're going to see",
    "start": "1633169",
    "end": "1639950"
  },
  {
    "text": "what what's actually going to that work now some of these comics and requests can be done from anyone like for example",
    "start": "1639950",
    "end": "1645860"
  },
  {
    "text": "if you call create LX process you don't have to be adding to do that what's going to happen is you're going to get a Linux process that it's going to have",
    "start": "1645860",
    "end": "1651950"
  },
  {
    "text": "the same token as your user account so if you're Alex and you create a Linux process you're going to get an Alex",
    "start": "1651950",
    "end": "1657919"
  },
  {
    "text": "picot process from the from the Carlos point of view the other things like for example registering a bus server that",
    "start": "1657919",
    "end": "1664730"
  },
  {
    "text": "you have to have to be admin for so the comm calls are going to check your token and where they're not allowed do that who actually talks to this manager",
    "start": "1664730",
    "end": "1671809"
  },
  {
    "text": "officially it's not documented so you shouldn't be just grabbing comm objects that it's like I have two things LX runs",
    "start": "1671809",
    "end": "1678500"
  },
  {
    "text": "out XE and bash that X C so these are the two windows binary that you get on the machine which allow you to talk the",
    "start": "1678500",
    "end": "1684470"
  },
  {
    "text": "Linux manager and then the Linux manager will then pop to the driver so what do LX run and bash do LX run is essentially",
    "start": "1684470",
    "end": "1692270"
  },
  {
    "text": "what lets you create users in the Linux environment lets you install and uninstall the Linux environment and it",
    "start": "1692270",
    "end": "1697669"
  },
  {
    "text": "lets you service it and update it all this is done through command-line options so you can run LX run slash",
    "start": "1697669",
    "end": "1703130"
  },
  {
    "text": "install LX run slash uninstall LX run slash side default user etc and",
    "start": "1703130",
    "end": "1708140"
  },
  {
    "text": "internally this basically has some classes that help it do that the ironic thing here I think that makes sense I",
    "start": "1708140",
    "end": "1714830"
  },
  {
    "text": "guess maybe not a running but I thought was cute is that all these actions ultimately then launch Linux processes so like if you call LX run set default",
    "start": "1714830",
    "end": "1722809"
  },
  {
    "text": "user this basically launches user mod ID passed passed DW ad group del user and",
    "start": "1722809",
    "end": "1730010"
  },
  {
    "text": "add user so it actually calls the Linux picot binaries launches them in an invisible instance to actually do that",
    "start": "1730010",
    "end": "1737400"
  },
  {
    "text": "similarly if you actually do an update well what update actually does is it",
    "start": "1737400",
    "end": "1742620"
  },
  {
    "text": "spins up an instance and just cause act and then it doesn't apt-get updates for you so this actually just launches the",
    "start": "1742620",
    "end": "1749190"
  },
  {
    "text": "Linux apps behind your back so you could actually have just yourself launched bash and done app you know I'm not an",
    "start": "1749190",
    "end": "1755250"
  },
  {
    "text": "app update if you wanted to but you know Windows user might not know how to update an Ubuntu environment so Elex run",
    "start": "1755250",
    "end": "1761490"
  },
  {
    "text": "basically access bridge between what you know windows Ivan might know how to do and what might what they might not know",
    "start": "1761490",
    "end": "1767550"
  },
  {
    "text": "a Linux process requires and then finally bash that's essentially your launcher it has a single kind of",
    "start": "1767550",
    "end": "1774300"
  },
  {
    "text": "function inside of it and it uses that create LX process to let you launch anything you want now normally we launch",
    "start": "1774300",
    "end": "1780780"
  },
  {
    "text": "bash it looks like all it does is launch the bash prompt but if you actually do bash - C for example and type another",
    "start": "1780780",
    "end": "1788610"
  },
  {
    "text": "command in quotes it's actually going to run that command just like in the real Linux system if using bash - C it",
    "start": "1788610",
    "end": "1795150"
  },
  {
    "text": "launches that other binary what's interesting here those that you're not going to get bash which then will",
    "start": "1795150",
    "end": "1800760"
  },
  {
    "text": "process the argument and then launch man the bash dot X C itself will understand what this means and it'll just launch",
    "start": "1800760",
    "end": "1807600"
  },
  {
    "text": "man directly so if you use bash dot X C - C it creates the instance and launches",
    "start": "1807600",
    "end": "1813900"
  },
  {
    "text": "whatever the kind of binary you put in there so it isn't actually it's not going to be routed through bash versus",
    "start": "1813900",
    "end": "1819870"
  },
  {
    "text": "in a real Linux system choose bash - she you know bash is actually a thing that processes that and then it launches the",
    "start": "1819870",
    "end": "1825720"
  },
  {
    "text": "the sub process so very simple thing here is just a",
    "start": "1825720",
    "end": "1830850"
  },
  {
    "text": "launcher and it just reads through registry to basically figure out what token should it not so now what token but what what Linux user it should use",
    "start": "1830850",
    "end": "1837270"
  },
  {
    "text": "so if I'm Alex and I've defined a Linux user called Bob when I launch bash it's",
    "start": "1837270",
    "end": "1842700"
  },
  {
    "text": "going to say Bob in the Linux environment because that's what I've configured it to so basically there's a UID and GID that at installation time I",
    "start": "1842700",
    "end": "1849780"
  },
  {
    "text": "configured and then I can use LX run to configure additional users and you know use standard commands in Linux to switch",
    "start": "1849780",
    "end": "1856140"
  },
  {
    "text": "between users and so on and so forth so those are the windows facing side of",
    "start": "1856140",
    "end": "1861900"
  },
  {
    "text": "things that's how you can kind of launch a prompt pop to it and that's how it talks to you and that's the driver that",
    "start": "1861900",
    "end": "1868110"
  },
  {
    "text": "it talks to but the key missing PC is that there's something needed on the linux site too because if I send a",
    "start": "1868110",
    "end": "1873749"
  },
  {
    "text": "create mash request to the LX SS manager how does the linux manager in the windows world know how to",
    "start": "1873749",
    "end": "1881579"
  },
  {
    "text": "create a bash process in the linux world so what you then need is the inner demon",
    "start": "1881579",
    "end": "1888269"
  },
  {
    "text": "so in a daemon starts up whenever the instance gets started and basically has a very simple initialization function",
    "start": "1888269",
    "end": "1894629"
  },
  {
    "text": "called init entry it closes every handle from 0 to 2048 kind of a weird defense",
    "start": "1894629",
    "end": "1899759"
  },
  {
    "text": "mechanism it opens slash dev slash key message so if your Linux person or almost any OS person that's not Windows",
    "start": "1899759",
    "end": "1907619"
  },
  {
    "text": "you probably know that is so that's your kernel log and it duplicates that as in standard error so any errors are it's",
    "start": "1907619",
    "end": "1912839"
  },
  {
    "text": "going to go and K message and then it makes standard in a standard ad be slash dev null so it doesn't have any standard",
    "start": "1912839",
    "end": "1918899"
  },
  {
    "text": "inner standard out and it opens a have the slash dev slash LX SS so it becomes a bust client of its own instance then",
    "start": "1918899",
    "end": "1926429"
  },
  {
    "text": "creates a symlink for resolve comp and then tries to connect to a server and tries to connect an IPC server called LX",
    "start": "1926429",
    "end": "1933690"
  },
  {
    "text": "SS manager and that's what the LX SS manager and the window side has created",
    "start": "1933690",
    "end": "1939029"
  },
  {
    "text": "as an IPC server on the Linux side using the bus driver the Linux driver that exists it basically creates a listening",
    "start": "1939029",
    "end": "1945779"
  },
  {
    "text": "server that can now receive that can off send commands sorry to the init process",
    "start": "1945779",
    "end": "1951179"
  },
  {
    "text": "and also receive responses from the init process and then basically sets up some signal handlers and then it sits in a",
    "start": "1951179",
    "end": "1957029"
  },
  {
    "text": "loop and it just calls read message from server so just waiting for messages from",
    "start": "1957029",
    "end": "1962329"
  },
  {
    "text": "success manager now what can I let this manage manager ask it to do very simple",
    "start": "1962329",
    "end": "1967649"
  },
  {
    "text": "things it can ask it to update the network information so there's any I in it update network info and essentially",
    "start": "1967649",
    "end": "1974429"
  },
  {
    "text": "this will update et Cie resolve kampf you can update it times and information",
    "start": "1974429",
    "end": "1979889"
  },
  {
    "text": "and basically this creates a symlink and sets up user shares own info microsoft local time if you update your hostname",
    "start": "1979889",
    "end": "1986969"
  },
  {
    "text": "this then will call set hostname it will call set domain name and it's going to update etc' hostname and create a TT",
    "start": "1986969",
    "end": "1994199"
  },
  {
    "text": "host file for you so kind of these first three things make sure that the instance is up-to-date to Windows changes so if",
    "start": "1994199",
    "end": "2000259"
  },
  {
    "text": "you change the timezone the windows it changes in Linux if you add a host name or change the host immune windows it",
    "start": "2000259",
    "end": "2006030"
  },
  {
    "text": "happens on a Linux side as well so this kind of keeps state synchronization between a windows world and the Linux",
    "start": "2006030",
    "end": "2011580"
  },
  {
    "text": "world and then perhaps the most important thing it does is provide an API to create a process so basically",
    "start": "2011580",
    "end": "2017970"
  },
  {
    "text": "over that IPC channel LX SS manager can talk to the Linux process and ask it",
    "start": "2017970",
    "end": "2023250"
  },
  {
    "text": "please create a new process and it's going to pass with the environment variables it's going to pass it a command line at the working directory",
    "start": "2023250",
    "end": "2028770"
  },
  {
    "text": "the standard handles and then init will call fork after fork returns you get app",
    "start": "2028770",
    "end": "2034710"
  },
  {
    "text": "it back and then it's going to set up the UID to GID the environment variables for the home in the path set up the the",
    "start": "2034710",
    "end": "2040770"
  },
  {
    "text": "session the console session duplicate any handles that it needs and then call exec vpe and actually exit right so it's",
    "start": "2040770",
    "end": "2047130"
  },
  {
    "text": "a standard Fork exec just like you would do analytics process and in it now Forks execs bash usually unless you've told it",
    "start": "2047130",
    "end": "2053970"
  },
  {
    "text": "to launch something else instead and there's also support for what's called creating a session leader so and",
    "start": "2053970",
    "end": "2059340"
  },
  {
    "text": "it can also fork more in it if you have kind of multiple users logged in at the same time and they all have their own",
    "start": "2059340",
    "end": "2064409"
  },
  {
    "text": "bash environments obviously we want to separate them so discuss the minute process is what actually is going to be the proxy in a way that's going to",
    "start": "2064410",
    "end": "2071370"
  },
  {
    "text": "create all the processes that you're going to launch with bash taxi or with LX run as needed so",
    "start": "2071370",
    "end": "2078350"
  },
  {
    "text": "let's talk a little bit deeper about that IPC mechanism how exactly a Windows app can talk to a Linux app or vice",
    "start": "2078350",
    "end": "2085889"
  },
  {
    "text": "versa now of course you've got sockets and files in this environment this is kind of a standard documented way you",
    "start": "2085890",
    "end": "2092550"
  },
  {
    "start": "2087000",
    "end": "2087000"
  },
  {
    "text": "can use UNIX sockets to have UNIX applications talk to each others but if you want to talk to windows very simply",
    "start": "2092550",
    "end": "2097770"
  },
  {
    "text": "you have sockets you can set up a server on localhost on the windows side you connect at a local so service and then",
    "start": "2097770",
    "end": "2103530"
  },
  {
    "text": "these things can actually talk to each others similarly since the filesystem is mapped and mounted you can create a file",
    "start": "2103530",
    "end": "2109590"
  },
  {
    "text": "on the windows side read it on the Linux side right back into it on the Linux side and read the answer on the windows",
    "start": "2109590",
    "end": "2115890"
  },
  {
    "text": "side so sockets and files work but that's not the internal IPC mechanism they use now this is kind of the",
    "start": "2115890",
    "end": "2121740"
  },
  {
    "text": "external model that exists and next to the developer this is what you're supposed to use internally though the",
    "start": "2121740",
    "end": "2127590"
  },
  {
    "text": "more interesting IPC is this bus IPC model which for legacy reasons is still called a DSS IPC which came from the",
    "start": "2127590",
    "end": "2135420"
  },
  {
    "text": "name Android subsystem and I'll share a little a or kind of where that name came from and why it says Android in there so",
    "start": "2135420",
    "end": "2142079"
  },
  {
    "text": "basically this allows you to create a name server register it have someone connect that name server and then",
    "start": "2142079",
    "end": "2147720"
  },
  {
    "text": "basically use read and write calls on the Linux side or on the window side to basically send or receive messages or",
    "start": "2147720",
    "end": "2153930"
  },
  {
    "text": "you can use IAP tiles on the window side or on the Linux side to Marshall and on Marshalls certain kinds of data now on",
    "start": "2153930",
    "end": "2160650"
  },
  {
    "text": "the windows side register server you need to send an octal and only the linux",
    "start": "2160650",
    "end": "2165720"
  },
  {
    "text": "manager service can send this out though so it's normally lockdown however the comm interface that it creates has a",
    "start": "2165720",
    "end": "2171750"
  },
  {
    "text": "method called register a DSS bus server and if your admin you can register bus server once you register the bus server",
    "start": "2171750",
    "end": "2178470"
  },
  {
    "text": "you actually get back in your process a handle to the server port and you can start sending articles on the server",
    "start": "2178470",
    "end": "2183750"
  },
  {
    "text": "port so for example you can send wait for connection and now you're going to block waiting for Linux process to",
    "start": "2183750",
    "end": "2189089"
  },
  {
    "text": "connect to you the Linux side would then open slash dev LX SS they have to be",
    "start": "2189089",
    "end": "2194430"
  },
  {
    "text": "route in order to be able to do that then it can send Apple to connect to you and now by using read and writes the",
    "start": "2194430",
    "end": "2199740"
  },
  {
    "text": "Linux side has a file descriptor on the windows side you have a file handle and you can talk to each other's the key is",
    "start": "2199740",
    "end": "2205559"
  },
  {
    "text": "that right now by default only the NIT daemon can actually talk to a witness process so opening slash dev LX SS is",
    "start": "2205559",
    "end": "2213450"
  },
  {
    "text": "only allowed if you're in it if your pit is one however if you go into registry there's a parameter ski called root a",
    "start": "2213450",
    "end": "2220799"
  },
  {
    "text": "DSS bus access and if you set that to one that anyone who's root in the Linux environment can use this IPC mechanism",
    "start": "2220799",
    "end": "2227789"
  },
  {
    "text": "as well and of course then it gets interesting because you can have custom Linux apps which once this change has",
    "start": "2227789",
    "end": "2233279"
  },
  {
    "text": "been done in your registry can talk to custom Windows apps so there's also marshalling so what can you marshal in",
    "start": "2233279",
    "end": "2239220"
  },
  {
    "start": "2235000",
    "end": "2235000"
  },
  {
    "text": "on a marshal you can take a pit on the Linux side marshal it and the window side will get a process handle right",
    "start": "2239220",
    "end": "2245220"
  },
  {
    "text": "because ultimately Linux pid' is going to be a Pico process so the window side wants to have a handle to the Pico process it can be marshaled as a pit you",
    "start": "2245220",
    "end": "2253500"
  },
  {
    "text": "can marshal console handles so console handles are have when you launch Bosch Nexxt see you get a Windows console but",
    "start": "2253500",
    "end": "2259020"
  },
  {
    "text": "then the actual bash Linux app has a standard and standard out that's the Marshall console handle you can marshal",
    "start": "2259020",
    "end": "2264839"
  },
  {
    "text": "pipe handles as well and it's actually really interesting I've tried it out basically lets you create a pipe on the",
    "start": "2264839",
    "end": "2270059"
  },
  {
    "text": "window side that shows up as a file scripture on the Linux side and then by using pipe api's on Windows and using a",
    "start": "2270059",
    "end": "2276309"
  },
  {
    "text": "read and write on Linux you can actually just do standard pipes so it's actually us piping from Windows to Linux but they",
    "start": "2276309",
    "end": "2283720"
  },
  {
    "text": "don't actually expose this like today if you run bash and you pipe it with something else it won't actually pipe but obviously the implementation is is",
    "start": "2283720",
    "end": "2290470"
  },
  {
    "text": "in there and finally can also marshal tokens so Windows app can create a token",
    "start": "2290470",
    "end": "2295510"
  },
  {
    "text": "or get an anonymous token and then send it to the other side and when it gets unmarshal when that process then Forks",
    "start": "2295510",
    "end": "2303069"
  },
  {
    "text": "it's going to fork with the new token and there's some interesting things there data James for shells Andy honest",
    "start": "2303069",
    "end": "2308799"
  },
  {
    "text": "I'm sure he'll he'll look at he look into that so this is my op those kind of do that kind of Marshall and non",
    "start": "2308799",
    "end": "2314440"
  },
  {
    "text": "marshaling you also get some data exchange api's so the data exchange API is one side I can create or register a",
    "start": "2314440",
    "end": "2322210"
  },
  {
    "start": "2315000",
    "end": "2315000"
  },
  {
    "text": "shared memory section and the other side can see it one side the windows I can creating the event object that the other",
    "start": "2322210",
    "end": "2328420"
  },
  {
    "text": "side can signal or the Linux I can have an event object that gets signaled and in the window side wakes up so you can",
    "start": "2328420",
    "end": "2334690"
  },
  {
    "text": "use a poll or select or wait for a single object to then kind of do data exchange beyond",
    "start": "2334690",
    "end": "2340930"
  },
  {
    "text": "just messages and a Linux app can actually share part of its address space with an",
    "start": "2340930",
    "end": "2347799"
  },
  {
    "text": "NT app and then the NT app can map it so you can't do vice-versa yet I'm sure they kind of thought about why that",
    "start": "2347799",
    "end": "2353589"
  },
  {
    "text": "might be a bad idea but the Linux app can essentially make the whole address space that it has visible to Windows app",
    "start": "2353589",
    "end": "2359020"
  },
  {
    "text": "and the Windows app can map it and and modify it for readwrite access only so thankfully there's no way to do that",
    "start": "2359020",
    "end": "2364990"
  },
  {
    "text": "with execute access unless you notice there's a flaw or vulnerability",
    "start": "2364990",
    "end": "2370170"
  },
  {
    "text": "so that's kind of the interfaces that exists we have this IPC mechanism you have the system calls and then you have",
    "start": "2370170",
    "end": "2376299"
  },
  {
    "text": "the file system so talk a little bit about some of the security issues that kind of arose as I was looking through",
    "start": "2376299",
    "end": "2382030"
  },
  {
    "text": "through all this so initially this whole idea of a picot process actually came from something called Project Astoria",
    "start": "2382030",
    "end": "2387880"
  },
  {
    "start": "2383000",
    "end": "2383000"
  },
  {
    "text": "and actually it was something for more than a year ago and it's supposed to be an Android runtime that lets you run",
    "start": "2387880",
    "end": "2393130"
  },
  {
    "text": "Android applications on Windows 10 mobile and so all of this was not for bash so you can run you know Angry Birds",
    "start": "2393130",
    "end": "2399130"
  },
  {
    "text": "whatever wind Android app doesn't exist I witnessed wrong when this was in",
    "start": "2399130",
    "end": "2404470"
  },
  {
    "text": "preview builds the only we can kind of play with this was actually I have to have a Windows Phone so the five people in the world will have that or have the",
    "start": "2404470",
    "end": "2412030"
  },
  {
    "text": "Windows Mobile emulator so when I did my initial research it was against the Windows Mobile emulator however when the",
    "start": "2412030",
    "end": "2417849"
  },
  {
    "text": "final version came out they just completely got rid of all this code so I",
    "start": "2417849",
    "end": "2422859"
  },
  {
    "text": "just disappeared there's no more project historia no more Android support so that was kind of disappointing in the anniversary of the previous",
    "start": "2422859",
    "end": "2429849"
  },
  {
    "text": "though which you know final build came out yesterday they replace this a DSS driver with an LX SS driver and so",
    "start": "2429849",
    "end": "2436510"
  },
  {
    "text": "Project Astoria was gone and now they basically rere rere implemented the original POSIX subsystem right because",
    "start": "2436510",
    "end": "2442599"
  },
  {
    "text": "Windows from the beginning could run Linux applications just to have the week we compile this PE and then they got rid",
    "start": "2442599",
    "end": "2449050"
  },
  {
    "text": "of it and brought it back and got rid of it and brought it back so now it's back again except it runs elf files and instead of running the Android AOSP now",
    "start": "2449050",
    "end": "2456369"
  },
  {
    "text": "runs ubuntu 14 and then they added a lot more support for desktop apps instead of just mobile apps and they got rid of",
    "start": "2456369",
    "end": "2462310"
  },
  {
    "text": "things / things like with frame buffer or things like the Android debugging bus ADB and they made it a Linux subsystem",
    "start": "2462310",
    "end": "2468760"
  },
  {
    "text": "instead of an Android subsystem and so when I first saw this on the insider preview one of the interesting things is",
    "start": "2468760",
    "end": "2475780"
  },
  {
    "text": "for example Frosty's were invisible task manager so you spawn up a bash prompt and you know man or pail or less and you",
    "start": "2475780",
    "end": "2482890"
  },
  {
    "text": "wouldn't see nothing in task manager in process hacker and rest Mon you would see them but not task map the document",
    "start": "2482890",
    "end": "2489369"
  },
  {
    "text": "the current API the security vendors have which gives them notifications that process we being created you didn't get",
    "start": "2489369",
    "end": "2494829"
  },
  {
    "text": "notification for pico processing Pico threats they're based invisible to you the libraries and the processes that are",
    "start": "2494829",
    "end": "2500470"
  },
  {
    "text": "being created and mapped they not map the sec image they're not map this image section objects so you don't actually",
    "start": "2500470",
    "end": "2506530"
  },
  {
    "text": "get image load notification callbacks so this bypasses a blocker when you launch Linux afterwards I'm Petula is bosch",
    "start": "2506530",
    "end": "2512470"
  },
  {
    "text": "nexxt a if you or if you wide list a bash launcher you automatically wide list any elf binary and then any file",
    "start": "2512470",
    "end": "2519310"
  },
  {
    "text": "access finding network access appears like it's coming from the kernel right because LX core is actually doing the",
    "start": "2519310",
    "end": "2525280"
  },
  {
    "text": "access it will be pointing to the pit in the tit and user mode that's actually doing this the actual Pico process but",
    "start": "2525280",
    "end": "2531579"
  },
  {
    "text": "the previous mode will be set the kernel so you might trust this IO because it looks like it's coming from the kernel a",
    "start": "2531579",
    "end": "2537010"
  },
  {
    "text": "nice to look deeper and you see that's coming from user mount and there's an API that you know vendors can use to get",
    "start": "2537010",
    "end": "2542900"
  },
  {
    "text": "the name of a peak of a process for a picot process this return null so if you want if you somehow saw some malware",
    "start": "2542900",
    "end": "2550220"
  },
  {
    "text": "doing something in the Linux environment you want to get its name you got back null and then all this was hidden behind",
    "start": "2550220",
    "end": "2555859"
  },
  {
    "text": "his developer mode and future installation that basically said if you want to use any of these features you",
    "start": "2555859",
    "end": "2561619"
  },
  {
    "text": "have to be in developer mode but the truth was that LX core was installed by default the Alexis - Alexis s manager",
    "start": "2561619",
    "end": "2568729"
  },
  {
    "text": "which did the actual checks well it provided a comm interface yes which went",
    "start": "2568729",
    "end": "2575089"
  },
  {
    "text": "through the checks but the driver itself allowed any admin to talk to it so basically because alex core is there by",
    "start": "2575089",
    "end": "2581329"
  },
  {
    "text": "default regardless of where the developer mode was on or not anyone could just talk to the driver and create",
    "start": "2581329",
    "end": "2587420"
  },
  {
    "text": "instances so back in February before this was even announced I tweeted out this picture where IDUs thing called",
    "start": "2587420",
    "end": "2592940"
  },
  {
    "text": "picot me a random Windows executable without actually even having install WSL because it didn't even exist and there's",
    "start": "2592940",
    "end": "2599569"
  },
  {
    "text": "there was LX core going ahead and launching a process and validating an elf header and that's where my excel",
    "start": "2599569",
    "end": "2606319"
  },
  {
    "text": "reached out to me and said stop tweeting about this so because they even won the first",
    "start": "2606319",
    "end": "2612109"
  },
  {
    "text": "announcement for wsl to be here some random elf malar few other problems is that all the",
    "start": "2612109",
    "end": "2618710"
  },
  {
    "text": "handles these Pico proxies create end up being kernel handles so if you look at the handle table any tools you don't see",
    "start": "2618710",
    "end": "2624229"
  },
  {
    "text": "anything you could also inject win32 threads in these speaker processes you",
    "start": "2624229",
    "end": "2629599"
  },
  {
    "text": "could change the context of the Figo process you can modify the memory of a Pico process so basically there was no layer protection between a Windows app",
    "start": "2629599",
    "end": "2636739"
  },
  {
    "text": "running as Alex and a Pico app running as Alex even though there are very different things and the weirdest thing",
    "start": "2636739",
    "end": "2642499"
  },
  {
    "text": "was the ability to inject an empty thread instead of a Pico process so the Pico threads are talking to the Linux",
    "start": "2642499",
    "end": "2648109"
  },
  {
    "text": "kernel the Windows threads are talking to Windows kernel and then you have fun stuff where the Windows kernel allows",
    "start": "2648109",
    "end": "2653839"
  },
  {
    "text": "you to map addresses below 64k if your Linux app for compatibility the Windows",
    "start": "2653839",
    "end": "2659210"
  },
  {
    "text": "kernel doesn't let you do that if your Windows app because that's often used for null pointer exploitation so I could use the Linux thread to map the memory I",
    "start": "2659210",
    "end": "2665869"
  },
  {
    "text": "normally don't have access to us a Windows thread then use the Windows threat to them launch an exploit that normally would be mitigated against so",
    "start": "2665869",
    "end": "2672769"
  },
  {
    "text": "that was an issue as well they finally the Fagor there's no peb no tab the",
    "start": "2672769",
    "end": "2677880"
  },
  {
    "text": "whole thing is elf how much security software today is ready to light cache an elf file and understand what an elf",
    "start": "2677880",
    "end": "2684809"
  },
  {
    "text": "file is an extract feature vectors from an elf file and run indicators of compromise from elf file now if you have",
    "start": "2684809",
    "end": "2690089"
  },
  {
    "text": "a Linux product sure but on Windows most products kind of don't don't bring them with them so this really made me think",
    "start": "2690089",
    "end": "2695369"
  },
  {
    "text": "that you know this is this is really dangerous of this ships out in this state sorry start to Microsoft and",
    "start": "2695369",
    "end": "2700410"
  },
  {
    "text": "basically decided to help address some of these issues given some suggestions bring them up ahead of time so hopefully",
    "start": "2700410",
    "end": "2705690"
  },
  {
    "text": "by today these issues would be path issues and not enough current issues so",
    "start": "2705690",
    "end": "2711930"
  },
  {
    "text": "let's see it it today so today all these processes show up in task manager se locate process image name sorry returns",
    "start": "2711930",
    "end": "2719190"
  },
  {
    "text": "the name so doesn't return all anymore the driver has a special Akal which only allows protected processes to touch it",
    "start": "2719190",
    "end": "2724980"
  },
  {
    "text": "so you need to be signed by Microsoft to be able to talk to it developer mode is not correctly enforced you see all the",
    "start": "2724980",
    "end": "2730349"
  },
  {
    "text": "network i/o and that's that you see all the file i/o and resource monitor and you can no longer open a handle topeka",
    "start": "2730349",
    "end": "2736529"
  },
  {
    "text": "process from a windows process except for very limited rights i can't inject memory inject the thread mess with the",
    "start": "2736529",
    "end": "2743130"
  },
  {
    "text": "picot process from a windows process in any way so pretty much everything that kind of went out that's the big issues",
    "start": "2743130",
    "end": "2748680"
  },
  {
    "text": "they fix those yet there are some things that remain by design right the first thing that's that's there to realize is",
    "start": "2748680",
    "end": "2755160"
  },
  {
    "text": "that file handles are still going to be kernel handles so if you have a Linux",
    "start": "2755160",
    "end": "2760529"
  },
  {
    "text": "process that actually opens a Windows file you're going to you're not going to",
    "start": "2760529",
    "end": "2765750"
  },
  {
    "text": "see that in the handle table of the actual process if you look at the handle tables of you know in process hacker",
    "start": "2765750",
    "end": "2771240"
  },
  {
    "text": "absolutely any Pico process at all just to show you one here it's completely empty right but this isn't really empty",
    "start": "2771240",
    "end": "2778740"
  },
  {
    "text": "it's actually accessing things unfortunately it's accessing them as part of the kernel process so I've got",
    "start": "2778740",
    "end": "2784589"
  },
  {
    "text": "teal here which has an index.html file opened and Luke who apparently has",
    "start": "2784589",
    "end": "2790490"
  },
  {
    "text": "index.html opened it's the system process right because it's actually kernel handle not a user mode handle now",
    "start": "2790490",
    "end": "2797910"
  },
  {
    "text": "the i/o you would see that as being associated to the user mode process but obviously the handle would be owned by",
    "start": "2797910",
    "end": "2804359"
  },
  {
    "text": "someone else there is no symbols for any of this stuff and again it's all elf right so if you have an AV software on Windows how does",
    "start": "2804359",
    "end": "2811860"
  },
  {
    "start": "2811000",
    "end": "2811000"
  },
  {
    "text": "it know about elf files you also have a big attack surface issue right 200 system 216 more system calls 800",
    "start": "2811860",
    "end": "2819570"
  },
  {
    "text": "kilobytes of additional tax surface things that have full network access now within firewall rules yes things that",
    "start": "2819570",
    "end": "2825600"
  },
  {
    "text": "have full disk access within token rules yes but basically you know you could write ran ransom elf ware which",
    "start": "2825600",
    "end": "2832530"
  },
  {
    "text": "basically runs us the user account encrypts all your files and then runs an environment that most you know endpoint",
    "start": "2832530",
    "end": "2837960"
  },
  {
    "text": "software is not going to be able to to react it and then VSO these have been found I mean think this thing crashed",
    "start": "2837960",
    "end": "2843810"
  },
  {
    "text": "there were there was a null point of view reference those in a valid pointed reference at some point and these things are not found by fuzzers or by security",
    "start": "2843810",
    "end": "2850050"
  },
  {
    "text": "researchers they're found by users trying to use the environment during a preview so this thing you are scratching during a preview builds by people trying",
    "start": "2850050",
    "end": "2856470"
  },
  {
    "text": "to use it who knows with people to actually try to fuzz it and look at it so thankfully the IPC interfaces are",
    "start": "2856470",
    "end": "2862350"
  },
  {
    "text": "logged down but you know that might change in the future so if you're writing endpoint software if you're just",
    "start": "2862350",
    "end": "2868380"
  },
  {
    "text": "a sysadmin I'll finish the kind of some key things here which is first of all you don't get any notifications for",
    "start": "2868380",
    "end": "2874080"
  },
  {
    "start": "2870000",
    "end": "2870000"
  },
  {
    "text": "these threads or these processes now there's a nun document a PI that does give you those notifications but it's",
    "start": "2874080",
    "end": "2880560"
  },
  {
    "text": "not documented so you're not supposed to use it if you do use it then you're going to know about the Pico processes but they have no ntdll no peb no tab no",
    "start": "2880560",
    "end": "2888420"
  },
  {
    "text": "shared user data no api set no PE file so easier soft are going to be able to handle a process that has none of those",
    "start": "2888420",
    "end": "2894360"
  },
  {
    "text": "things especially because there's no API to tell you if something is or isn't a people process so if you try to touch",
    "start": "2894360",
    "end": "2899580"
  },
  {
    "text": "the pet you'll just crash unless you check if it's no or not because these things aren't dll's your image loading",
    "start": "2899580",
    "end": "2905700"
  },
  {
    "text": "occations don't get any callbacks so you don't get any callback for ntdll you don't get a callback and executable because these things are not portable",
    "start": "2905700",
    "end": "2911880"
  },
  {
    "text": "executables they're elf files so you can see in process hacker and forensic ly like if I look at man in the modules I",
    "start": "2911880",
    "end": "2919260"
  },
  {
    "text": "can actually see all the ESO files and the man executable itself but they're not mapped as images they're mapped as",
    "start": "2919260",
    "end": "2925710"
  },
  {
    "text": "data so forensic ly you can see them as elf files basically as memory map files but you won't get any call backs and",
    "start": "2925710",
    "end": "2932130"
  },
  {
    "text": "your load image notification to tell you that they've been loaded and if you have a file system in e filter a network main",
    "start": "2932130",
    "end": "2937560"
  },
  {
    "text": "filter you will get the notifications for any file IO it will correctly point you to the picot process as doing this",
    "start": "2937560",
    "end": "2943890"
  },
  {
    "text": "but because you don't know it's a picot process because there's no API to know that you might crash you try to read",
    "start": "2943890",
    "end": "2949289"
  },
  {
    "text": "it's PAP or try patching TTLs you kinda have to guard yourself and now realize there's these processes that don't have the normal data that it normally have",
    "start": "2949289",
    "end": "2955950"
  },
  {
    "text": "and on top of that if you've been basically using like a correlation of",
    "start": "2955950",
    "end": "2961829"
  },
  {
    "text": "knowing what pids you've created and what what pits have been created and what tits have been created because you never got a notification that this",
    "start": "2961829",
    "end": "2967619"
  },
  {
    "text": "process is created you're not actually going to know what this process is right you're going to look up is this real",
    "start": "2967619",
    "end": "2972749"
  },
  {
    "text": "process or not and the few track alterations you would have never seen this process so you don't actually know",
    "start": "2972749",
    "end": "2977969"
  },
  {
    "text": "that a creation happened and I have a quick screenshot here from process monitor here's process monitor seeing me",
    "start": "2977969",
    "end": "2984329"
  },
  {
    "text": "read the index dot HTML file so you can see it's very useful information about this process and if I look at a stack of",
    "start": "2984329",
    "end": "2991950"
  },
  {
    "text": "this index.html file it's just showing me linux opening the file right there's nothing in use them out here whatsoever",
    "start": "2991950",
    "end": "2998279"
  },
  {
    "text": "and even in the main process monitor UI here's who created the file an empty",
    "start": "2998279",
    "end": "3004190"
  },
  {
    "text": "process with no wind up with nothing associated with it so this is not really great right this is pretty scary if the",
    "start": "3004190",
    "end": "3009859"
  },
  {
    "text": "bad guys started using some of this some of this stuff so I'll skip all these and",
    "start": "3009859",
    "end": "3015469"
  },
  {
    "start": "3015000",
    "end": "3015000"
  },
  {
    "text": "just conclude the basically saying that you know Microsoft you have to appreciate they took the time to basically fix all the issues I brought",
    "start": "3015469",
    "end": "3021799"
  },
  {
    "text": "up they addressed every single one of the main issues that were not kind of things that they were done by",
    "start": "3021799",
    "end": "3026839"
  },
  {
    "text": "implementation design at the same time maybe they maybe addressed all the user requests from people that wanted more more features they start a blog post",
    "start": "3026839",
    "end": "3033680"
  },
  {
    "text": "they started videos so then a lot of good work that kind of demonstrated the system is all about but there's nothing",
    "start": "3033680",
    "end": "3039170"
  },
  {
    "text": "for you vendors there's nothing for security vendors try the API to know about people process is undocumented there's no API to know if you have a",
    "start": "3039170",
    "end": "3045469"
  },
  {
    "text": "Pico process that you're touching and most security software probably is not aware that things can have a notepad",
    "start": "3045469",
    "end": "3051799"
  },
  {
    "text": "that there might not be assured user data that there won't be a notification for ntdll so they might deadlock it might assert they might crash as they",
    "start": "3051799",
    "end": "3058400"
  },
  {
    "text": "start encountering these Pico processes and more importantly how many vendors today have an elf parser and their",
    "start": "3058400",
    "end": "3063859"
  },
  {
    "text": "windows miner right who parses elf files on windows some AV companies do but a lot of them push a lot of new startups",
    "start": "3063859",
    "end": "3069799"
  },
  {
    "text": "and cyber stirrups they probably never assumed they'd have to worry about elf files on a win machine so my worry is",
    "start": "3069799",
    "end": "3075849"
  },
  {
    "text": "that they're gonna you know hack their way around use on document structures basically figure out a way to protect systems because there's no official",
    "start": "3075849",
    "end": "3082180"
  },
  {
    "text": "guidance from anyone so that that really has to change otherwise things things will be pretty dangerous and in balloon",
    "start": "3082180",
    "end": "3088239"
  },
  {
    "text": "in the linux world so with that being said i want to thank a bunch of people especially on shell",
    "start": "3088239",
    "end": "3094930"
  },
  {
    "text": "Bertini he actually he's the one who actually created this the really cool picture of the beginning so with a",
    "start": "3094930",
    "end": "3101109"
  },
  {
    "text": "little evil linux thing hiding inside so thanks to origin thanks for everyone else to help with this",
    "start": "3101109",
    "end": "3107069"
  },
  {
    "text": "microsoft blogs on the wsl talked about some of this stuff as well there's a github page where you can see all the",
    "start": "3107069",
    "end": "3113259"
  },
  {
    "text": "issues that people have been submitting and i will post on github videos of the demos as well as a source code that i",
    "start": "3113259",
    "end": "3119019"
  },
  {
    "text": "used so you don't actually miss out on that so you have my presentation slides and a video i will publish it on my",
    "start": "3119019",
    "end": "3125079"
  },
  {
    "text": "there UNESCO's ears or seven github you can email me pretty easy to find online so that's that so thanks a lot sorry",
    "start": "3125079",
    "end": "3132160"
  },
  {
    "text": "around a little bit late hope you liked it if you have any questions again there's a coffee break so you can probably reach out to me after since i'm",
    "start": "3132160",
    "end": "3138549"
  },
  {
    "text": "over time thank you very very much and enjoy black hat thank you",
    "start": "3138549",
    "end": "3144130"
  },
  {
    "text": "[Applause]",
    "start": "3144130",
    "end": "3150369"
  }
]