[
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14000"
  },
  {
    "text": "hello everyone and welcome to my talk i am mun chang chen and today i am going to talk about my recent research on gpu",
    "start": "14000",
    "end": "21920"
  },
  {
    "text": "virtualization named another road leads to the host from a message to vm escape on nvidia 3",
    "start": "21920",
    "end": "28240"
  },
  {
    "text": "gpu and first a little introduce myself",
    "start": "28240",
    "end": "34559"
  },
  {
    "text": "i'm now doing security research in many fields including virtualization web",
    "start": "34559",
    "end": "40000"
  },
  {
    "text": "browser iot and well as you can see i almost changed my research directions every year to learn",
    "start": "40000",
    "end": "46480"
  },
  {
    "text": "from different fields and i am now interested in and also studying further developing and machine learning",
    "start": "46480",
    "end": "54718"
  },
  {
    "text": "and here introduced to my team i am now working in tencent red team and which is",
    "start": "55199",
    "end": "60800"
  },
  {
    "text": "funded by tencent security platform department and we have researchers in many fields like aiot",
    "start": "60800",
    "end": "67439"
  },
  {
    "text": "mobile devices and cloud virtualization and now i also listed our homepage here",
    "start": "67439",
    "end": "76000"
  },
  {
    "text": "um okay and here's the agenda of my talk today first i will introduce the",
    "start": "76479",
    "end": "81520"
  },
  {
    "text": "backgrounds of my research and then the structures of their installers and following the most important part the",
    "start": "81520",
    "end": "88640"
  },
  {
    "text": "vrpc message and its handling in the end i will sum up some security best",
    "start": "88640",
    "end": "93759"
  },
  {
    "text": "practices and my devices on using vgpu okay here we go",
    "start": "93759",
    "end": "100720"
  },
  {
    "text": "and let's start from introducing the gpu virtualization gpu virtualization technique allow users to share a gpu",
    "start": "100720",
    "end": "108079"
  },
  {
    "text": "card in their own vms it is used in virus applications such as desktop virtualization",
    "start": "108079",
    "end": "114560"
  },
  {
    "text": "cloud gaming and compute computational science it is",
    "start": "114560",
    "end": "120159"
  },
  {
    "text": "generally involve one or more techniques such as device emulation api remoting",
    "start": "120159",
    "end": "125680"
  },
  {
    "text": "fixed pass-through and the mediated pass-through in fixed pass-through a gpu",
    "start": "125680",
    "end": "130720"
  },
  {
    "text": "is accessed directly by a single virtual machine exclusively and permanently",
    "start": "130720",
    "end": "136560"
  },
  {
    "text": "and this achieves almost native performance in mediated",
    "start": "136560",
    "end": "142080"
  },
  {
    "text": "device pass-through the hypervisor sends java visual commands from guests directly to the gpu",
    "start": "142080",
    "end": "148480"
  },
  {
    "text": "this is a form of hardware assisted virtualization and achieves near nature performance",
    "start": "148480",
    "end": "154080"
  },
  {
    "text": "and as you can see a media amd intel they all support the vgpu",
    "start": "154080",
    "end": "160799"
  },
  {
    "text": "now let's move to the specific product the nvidia vgpu and it can be used in a data center",
    "start": "161840",
    "end": "169360"
  },
  {
    "text": "allowed gpus to be shared across multiple virtual machines and according to nvidia many famous cloud service",
    "start": "169360",
    "end": "176400"
  },
  {
    "text": "providers are providing the gpu service and some are in pass remote some are using full vtpu functionalities",
    "start": "176400",
    "end": "184159"
  },
  {
    "text": "the vgpu is restricted to certain data center and high-end cards like tesla and",
    "start": "184159",
    "end": "189760"
  },
  {
    "text": "google and after you have registered an nvidia",
    "start": "189760",
    "end": "195280"
  },
  {
    "text": "enterprise account you can download the installer from its application hub and you should choose suitable installer",
    "start": "195280",
    "end": "202319"
  },
  {
    "text": "for your environment our test environment is a server with a tesla t4 and operating system is sent to osh",
    "start": "202319",
    "end": "210560"
  },
  {
    "text": "after you downloaded the installers you can find two different installers with extension.run the vgpu kvm.run should be",
    "start": "210560",
    "end": "218400"
  },
  {
    "text": "installed in the host machine and the great grid.run should be installed in the",
    "start": "218400",
    "end": "223599"
  },
  {
    "text": "guest machine after it's installed they will have a",
    "start": "223599",
    "end": "228840"
  },
  {
    "text": "nvidia.ko in both guest machine and host machine the installer can be extracted",
    "start": "228840",
    "end": "234720"
  },
  {
    "text": "again and you can find some open source files in both installers",
    "start": "234720",
    "end": "241239"
  },
  {
    "text": "it's same as other nvidia gear visual drivers the nvidia dot ko has some open",
    "start": "241280",
    "end": "247280"
  },
  {
    "text": "source files but critical code logics are close to us and you can search for",
    "start": "247280",
    "end": "252720"
  },
  {
    "text": "dodge all binary files for its closed source part and other components such as",
    "start": "252720",
    "end": "258320"
  },
  {
    "text": "nvidia vgpu manager and live nvidia vgpu.so which which is also called as",
    "start": "258320",
    "end": "264240"
  },
  {
    "text": "the vgpu plugin they are both close to size",
    "start": "264240",
    "end": "269840"
  },
  {
    "text": "and the demon nvidia vgpu manager will run in the background in the host and it",
    "start": "271360",
    "end": "277280"
  },
  {
    "text": "will spawn itself when a guest is starting the guest must use uh",
    "start": "277280",
    "end": "283320"
  },
  {
    "text": "gpu-mediated device pass-through mode the right center figure shows the loop",
    "start": "283320",
    "end": "288960"
  },
  {
    "text": "which view manager will fork itself when there's a guest is started",
    "start": "288960",
    "end": "294639"
  },
  {
    "text": "the vgpu plugin is loaded by nvidia vgvu manager and the plugin plays the main",
    "start": "294639",
    "end": "300240"
  },
  {
    "text": "role which is responsible with communicating with the guests",
    "start": "300240",
    "end": "305440"
  },
  {
    "text": "the guests use a mechanism called vrpc to send requests within the hypervisor",
    "start": "305440",
    "end": "311039"
  },
  {
    "text": "and processed by the lib nvidia vgpu.so and as you can see the main logic stays",
    "start": "311039",
    "end": "318320"
  },
  {
    "text": "in the plugin so here we will take a closer look at the plugin",
    "start": "318320",
    "end": "324880"
  },
  {
    "text": "the vgpu plugin receives and processes vgpu requests whenever there are some",
    "start": "324880",
    "end": "330639"
  },
  {
    "text": "new data in the rim buffer it will take the data out and check if it's a legal vrpc message",
    "start": "330639",
    "end": "336639"
  },
  {
    "text": "the vrpc message is limited to a maximum 4 kilobytes and the vrpc message can be",
    "start": "336639",
    "end": "342160"
  },
  {
    "text": "very frequently sent so it is using a global area to",
    "start": "342160",
    "end": "347520"
  },
  {
    "text": "store the vrpc message if the vrpc message is legal it will call the handler for vrpc message",
    "start": "347520",
    "end": "354560"
  },
  {
    "text": "and the function names are all obfuscated and shows in six digit",
    "start": "354560",
    "end": "359680"
  },
  {
    "text": "numbers between mv and vgpu and you can find the log stream which view message",
    "start": "359680",
    "end": "364720"
  },
  {
    "text": "signature mismatch to locators to locate the color of the message handler function",
    "start": "364720",
    "end": "372479"
  },
  {
    "text": "and here we have a simplified model and honestly you don't need to focus on most",
    "start": "372560",
    "end": "378240"
  },
  {
    "text": "part of this picture all we need to know is the nvidia dot ko in the guest sends",
    "start": "378240",
    "end": "383759"
  },
  {
    "text": "the vrvc message the vlp message is processed by the plugin in the daemon",
    "start": "383759",
    "end": "389039"
  },
  {
    "text": "process nvidia vgpu manager and the nvidia vgv manager will communicate with",
    "start": "389039",
    "end": "394880"
  },
  {
    "text": "the nvidia dot ko on host and all of this is enough",
    "start": "394880",
    "end": "400800"
  },
  {
    "text": "here's also a table listed the structure of vrpc message the vrpc message is",
    "start": "401520",
    "end": "407680"
  },
  {
    "text": "consisted with a 32 bytes header and the rest is the message body you can treat",
    "start": "407680",
    "end": "412960"
  },
  {
    "text": "the message as an array of little ending unsigned integer normally you will only care about the",
    "start": "412960",
    "end": "419840"
  },
  {
    "text": "package size and vrpc command number sections in the header",
    "start": "419840",
    "end": "425280"
  },
  {
    "text": "first let's put the vrpc message sender aside i will introduce later after",
    "start": "426720",
    "end": "432240"
  },
  {
    "text": "receiving the message the vgpu manager running on host machine will try to check whether the message is legal",
    "start": "432240",
    "end": "439039"
  },
  {
    "text": "because vgpu manager uses messages in this way on both windows and linux and",
    "start": "439039",
    "end": "444880"
  },
  {
    "text": "some messages are system specific it will block some wrong messages at this",
    "start": "444880",
    "end": "450080"
  },
  {
    "text": "step the wrong messages is such as some unsupported message sent by the windows",
    "start": "450080",
    "end": "457759"
  },
  {
    "text": "windows client from the guest to the linux host and after the check is over it will call the",
    "start": "457759",
    "end": "465599"
  },
  {
    "text": "corresponding handler according to the message number if any error occurs in the handler an error reporting function",
    "start": "465599",
    "end": "472240"
  },
  {
    "text": "will generate an error message if no error occurs it will copy the vrpc",
    "start": "472240",
    "end": "477759"
  },
  {
    "text": "message body which is stored in the host before back to the guest machine and during the",
    "start": "477759",
    "end": "485199"
  },
  {
    "text": "message processing the content of the rpc message body stored in the host may change",
    "start": "485199",
    "end": "492360"
  },
  {
    "text": "and do you remember the error handling we have mentioned earlier and it will",
    "start": "492720",
    "end": "497840"
  },
  {
    "text": "generate different error messages for different for for each rpc message before the",
    "start": "497840",
    "end": "503759"
  },
  {
    "text": "function returns and this is an interesting step you can see there's also a big switch case",
    "start": "503759",
    "end": "511199"
  },
  {
    "text": "in the error handler so as a security researcher we may also want to test this function",
    "start": "511199",
    "end": "519680"
  },
  {
    "text": "until the mystery of this function is discovered uh the",
    "start": "519760",
    "end": "524800"
  },
  {
    "text": "meaning of the vrpc messages has never been known by myself so after carefully",
    "start": "524800",
    "end": "530880"
  },
  {
    "text": "analyzing its code we were surprised to find a lot of information this error",
    "start": "530880",
    "end": "536000"
  },
  {
    "text": "handling function saves the meaning of each message and each field in in this way we can more easily find from",
    "start": "536000",
    "end": "543519"
  },
  {
    "text": "the message name which the rpc message name which operations look more dangerous and",
    "start": "543519",
    "end": "550160"
  },
  {
    "text": "more likely to have vulnerabilities for example the top center figure shows o x 17 rbc message is named rbc unlock",
    "start": "550160",
    "end": "558320"
  },
  {
    "text": "event and we know it is allocating something and it has three members each",
    "start": "558320",
    "end": "563440"
  },
  {
    "text": "kind for body offset zero h object for for body index one and notifying this for body uh",
    "start": "563440",
    "end": "571839"
  },
  {
    "text": "index two and in addition to get a lot of information from this function we are",
    "start": "571839",
    "end": "577120"
  },
  {
    "text": "also very interested in the switch case that comes with it from the perspective of developers",
    "start": "577120",
    "end": "583600"
  },
  {
    "text": "because the complexity of search case even if the company has a code review",
    "start": "583600",
    "end": "588720"
  },
  {
    "text": "experts may not be able to review the all the details of all branches so after",
    "start": "588720",
    "end": "595279"
  },
  {
    "text": "we have marked the pseudo code generated by ada we copied it into the ide and the",
    "start": "595279",
    "end": "601680"
  },
  {
    "text": "meta meta father so in short our father skips the message",
    "start": "601680",
    "end": "606720"
  },
  {
    "text": "processing parts but directly calls the error handling function the input sample",
    "start": "606720",
    "end": "611920"
  },
  {
    "text": "of father is the vrpc message generated by file engine so we use further to",
    "start": "611920",
    "end": "617440"
  },
  {
    "text": "check whether the error handling function can handle various errors correctly",
    "start": "617440",
    "end": "622560"
  },
  {
    "text": "and further did find a signature v but this problem has been fixed in a newer",
    "start": "622560",
    "end": "628160"
  },
  {
    "text": "version but anyway it brings a lot of communism for the follow up an analysis",
    "start": "628160",
    "end": "633680"
  },
  {
    "text": "in this obfuscated binary and here i have listed six important",
    "start": "633680",
    "end": "640000"
  },
  {
    "text": "vrpc messages they will be introduced later as you can see there are many messages except each client and edge",
    "start": "640000",
    "end": "647440"
  },
  {
    "text": "device these two handles are very important among the cores although they are called handles the values are not as",
    "start": "647440",
    "end": "654800"
  },
  {
    "text": "random as you might think on the contrary we can specify almost any integer as a handle so let's start from",
    "start": "654800",
    "end": "662079"
  },
  {
    "text": "reading the rbc message handler we have mentioned how to locate its",
    "start": "662079",
    "end": "668959"
  },
  {
    "text": "outer function earlier so here's another string you can use to locate in the middle of the handler you can see here",
    "start": "668959",
    "end": "675839"
  },
  {
    "text": "also many things to ensure that the handler and the message is correct",
    "start": "675839",
    "end": "683040"
  },
  {
    "text": "and some lines below the check you can see there's a big switch case the variable it is switching case is vgpu",
    "start": "683120",
    "end": "689839"
  },
  {
    "text": "message which is a message number from the vrpc header you can see the function table is a big array stores the pointers",
    "start": "689839",
    "end": "697040"
  },
  {
    "text": "to different handlers the easiest way to get the function table is of course",
    "start": "697040",
    "end": "703600"
  },
  {
    "text": "set a breakpoint here and grab them all the handlers are fixed and so once you",
    "start": "703600",
    "end": "709120"
  },
  {
    "text": "calculated all the handlers you are okay to do the further static analysis for each handler",
    "start": "709120",
    "end": "715600"
  },
  {
    "text": "the second argument to the handler is the vrpc message buffer let's remember this information and start to find our",
    "start": "715600",
    "end": "724320"
  },
  {
    "text": "box so we already know how messages are stored in the host",
    "start": "724320",
    "end": "730399"
  },
  {
    "text": "and now how do we send vrpc message from the guest since the detail of how the",
    "start": "730399",
    "end": "735680"
  },
  {
    "text": "guests will send a message are not what we care about in our earlier stage of reverse engineering in order to avoid",
    "start": "735680",
    "end": "742959"
  },
  {
    "text": "the complexity we decided to patch nvidia.ko of the guest machine and this",
    "start": "742959",
    "end": "749120"
  },
  {
    "text": "means we will reuse its code but with a patched value to send a custom vrpc message but how to find a function that",
    "start": "749120",
    "end": "756959"
  },
  {
    "text": "is sending a message we already know that the vrpc message consists of a signature vrpc in this header plus other",
    "start": "756959",
    "end": "764720"
  },
  {
    "text": "fields by analyzing the nvidia manager on the host machine but if you search for screen vrpc in the guest driver you",
    "start": "764720",
    "end": "772320"
  },
  {
    "text": "may not get any useful information however if you if we search for integer",
    "start": "772320",
    "end": "777519"
  },
  {
    "text": "cprv which is a little ending byte order we can locate a function whose content matches",
    "start": "777519",
    "end": "784000"
  },
  {
    "text": "our known information very well by checking its reference we can confirm that this function is initializing our",
    "start": "784000",
    "end": "790880"
  },
  {
    "text": "vrbc message header and the second parameter is used to control the rbc message number the third parameter is",
    "start": "790880",
    "end": "797680"
  },
  {
    "text": "used to indicate the required size as you can see this size will be added",
    "start": "797680",
    "end": "804079"
  },
  {
    "text": "with header size which is 32 bytes to fill in the message so remember don't",
    "start": "804079",
    "end": "810000"
  },
  {
    "text": "set it too close to four kilobytes the size the size section so",
    "start": "810000",
    "end": "815760"
  },
  {
    "text": "that is to prevent the message uh from failing the immediate managers uh check",
    "start": "815760",
    "end": "823920"
  },
  {
    "text": "and uh interestingly we found that there are two functions that always appear in",
    "start": "824800",
    "end": "829839"
  },
  {
    "text": "peers and so based on intuition we can also guess that the second function is",
    "start": "829839",
    "end": "835360"
  },
  {
    "text": "used to send a vrpc message the picture on the right shows the renamed functions",
    "start": "835360",
    "end": "840399"
  },
  {
    "text": "the code in between two functions is obviously filling the vrpc body with specific values",
    "start": "840399",
    "end": "846800"
  },
  {
    "text": "and here a2 plus 608 plus 32 represents data field of vrpc body with index 0 and",
    "start": "846800",
    "end": "854880"
  },
  {
    "text": "36 means data field of body in this one and so on",
    "start": "854880",
    "end": "860880"
  },
  {
    "text": "after sending the message send the vrpc message will wait for the host to return the result so",
    "start": "861040",
    "end": "867920"
  },
  {
    "text": "after doing that we can also use this code logic to obtain its return value the reading of the return value is the",
    "start": "867920",
    "end": "874399"
  },
  {
    "text": "same as we are writing the vrpc message body so you can just read the data from",
    "start": "874399",
    "end": "880240"
  },
  {
    "text": "the a3 plus 608 cluster offsets the question is",
    "start": "880240",
    "end": "885360"
  },
  {
    "text": "which function should we choose to patch to find the answer we set a breakpoint on the vrpc initialization function and",
    "start": "885360",
    "end": "892320"
  },
  {
    "text": "then we found a function called mv0777rm",
    "start": "892320",
    "end": "897240"
  },
  {
    "text": "which is very lucky number and it will be called every time the guest driver is",
    "start": "897440",
    "end": "902480"
  },
  {
    "text": "loaded and however it should be noticed that while nvidia is updating the driver",
    "start": "902480",
    "end": "907920"
  },
  {
    "text": "the standards of skated name may change from our observation this number may",
    "start": "907920",
    "end": "914399"
  },
  {
    "text": "become larger in the newer versions so when we wrote this slide it has already",
    "start": "914399",
    "end": "920000"
  },
  {
    "text": "gone increased to 779",
    "start": "920000",
    "end": "924800"
  },
  {
    "text": "and on the other side there's also a file named nvidia.ko in the house kernel",
    "start": "925279",
    "end": "930480"
  },
  {
    "text": "which confuses us at first and fortunately we quickly figured out its",
    "start": "930480",
    "end": "936160"
  },
  {
    "text": "relationship with nvidia.ko in the guest machine and in addition because part of",
    "start": "936160",
    "end": "942240"
  },
  {
    "text": "its code is open source so it can also help us understand an important process",
    "start": "942240",
    "end": "947360"
  },
  {
    "text": "either which is the meaning of parameters when is entering rmio control",
    "start": "947360",
    "end": "953040"
  },
  {
    "text": "if you have audited nvidia vgpu manager you may find that the",
    "start": "953040",
    "end": "958399"
  },
  {
    "text": "the almost every io control sent by vgpu manager will get into io control so this",
    "start": "958399",
    "end": "965040"
  },
  {
    "text": "also explains why rmi control is not open sourced by nvidia because it is",
    "start": "965040",
    "end": "971120"
  },
  {
    "text": "strongly related with the vgpu logic according to the code comments we can",
    "start": "971120",
    "end": "977120"
  },
  {
    "text": "also know that rm stands for resource manager the figure on the right is a",
    "start": "977120",
    "end": "983440"
  },
  {
    "text": "function that you will often see when auditing the vgp plugin i named it",
    "start": "983440",
    "end": "989040"
  },
  {
    "text": "according to its log as mvrm control which is the main entry point for sending",
    "start": "989040",
    "end": "994560"
  },
  {
    "text": "rmi control from host user space the data used to send is usually a structure",
    "start": "994560",
    "end": "1000240"
  },
  {
    "text": "allocated on the stack its last three parameters are usually command data and",
    "start": "1000240",
    "end": "1006160"
  },
  {
    "text": "size and you can use the ioc size or iocnr macro to pass them as here shown",
    "start": "1006160",
    "end": "1011440"
  },
  {
    "text": "in the bottom left to get their original definitions however the size used in the manager may",
    "start": "1011440",
    "end": "1018160"
  },
  {
    "text": "be different from actual definition so it's just for your references only",
    "start": "1018160",
    "end": "1025038"
  },
  {
    "text": "and next when we're trying to exploit some vulnerabilities so we are also very",
    "start": "1025039",
    "end": "1031120"
  },
  {
    "text": "surprised to find that its main program did not enable the aslr i guess it is",
    "start": "1031120",
    "end": "1037280"
  },
  {
    "text": "because um that it needs to be compatible with other logic in some drivers at the same time it is not",
    "start": "1037280",
    "end": "1044240"
  },
  {
    "text": "protected by stat cannery two so therefore uh except for the address of",
    "start": "1044240",
    "end": "1050000"
  },
  {
    "text": "dot s or libraries it loads which have a certain degree of randomnesses but the",
    "start": "1050000",
    "end": "1055120"
  },
  {
    "text": "vgp manager itself does not enable the slr so this make it easier to exploit uh",
    "start": "1055120",
    "end": "1062000"
  },
  {
    "text": "those vulnerabilities and let's take a look at its startup process",
    "start": "1062000",
    "end": "1067760"
  },
  {
    "text": "the main program runs in the form of a daemon and the child process is spawned by the main process through fork when",
    "start": "1067760",
    "end": "1074640"
  },
  {
    "text": "the hypervisor is started so every time the child process starts the memory layout of child process is",
    "start": "1074640",
    "end": "1081360"
  },
  {
    "text": "the same as main process and the crash of child process will not affect the",
    "start": "1081360",
    "end": "1086480"
  },
  {
    "text": "main process at all if the hypervisor process restarts the child process will",
    "start": "1086480",
    "end": "1091840"
  },
  {
    "text": "also restart and although immediately gpu manager is multi-threaded if we use a guest in the",
    "start": "1091840",
    "end": "1099039"
  },
  {
    "text": "simplest text mode it will behave like a single threaded process",
    "start": "1099039",
    "end": "1105200"
  },
  {
    "text": "that is because the text mode guest sends almost no requests to the vgp plugin so no matter how many times the",
    "start": "1105200",
    "end": "1112240"
  },
  {
    "text": "client's vgp manager is restarted its memory layout will almost stay the same every time which also",
    "start": "1112240",
    "end": "1119200"
  },
  {
    "text": "provides communities for us to make multiple attempts",
    "start": "1119200",
    "end": "1123840"
  },
  {
    "text": "and although the main process does not have slr the main process also has only a few",
    "start": "1124320",
    "end": "1131280"
  },
  {
    "text": "functions therefore we still need to pay attention to the more feature-rich and more concentrated vgp plug-in",
    "start": "1131280",
    "end": "1139280"
  },
  {
    "text": "by the plug-in it is address randomized so we also need to find a way to bypass",
    "start": "1139280",
    "end": "1144480"
  },
  {
    "text": "the slr the vulnerability of information disclosure will be our first choice but",
    "start": "1144480",
    "end": "1150000"
  },
  {
    "text": "it is obvious that the amount of reverse engineering is too much for us and",
    "start": "1150000",
    "end": "1156160"
  },
  {
    "text": "at this point my analysis has been going for some time and i have marked almost",
    "start": "1156160",
    "end": "1161360"
  },
  {
    "text": "70 percent of key functions of the vgpu plugin in ada and centered",
    "start": "1161360",
    "end": "1167440"
  },
  {
    "text": "on the message handler function therefore it is better to directly",
    "start": "1167440",
    "end": "1172559"
  },
  {
    "text": "generate dossier files through eda pretending to audit an open source software we first tried to use static",
    "start": "1172559",
    "end": "1180160"
  },
  {
    "text": "code analysis tool to do this work but the result was not very good",
    "start": "1180160",
    "end": "1185440"
  },
  {
    "text": "so let's rethink about it if we want to get the leak data we needed to put the",
    "start": "1185440",
    "end": "1191280"
  },
  {
    "text": "liquid value in our vrpc message and then return to the guest this writing process requires",
    "start": "1191280",
    "end": "1197919"
  },
  {
    "text": "is to operate on a keyword operation because the address of a 64-bit program",
    "start": "1197919",
    "end": "1205120"
  },
  {
    "text": "is equivalent to a keyword so i try to search the code where the vrpc body is",
    "start": "1205120",
    "end": "1210400"
  },
  {
    "text": "on the left side of the assignment which is the equal mark and they're operating",
    "start": "1210400",
    "end": "1215760"
  },
  {
    "text": "on keyword or keyword as the risk or void as risk",
    "start": "1215760",
    "end": "1221120"
  },
  {
    "text": "and soon we located three places but only this one in the figure below miss",
    "start": "1221120",
    "end": "1226480"
  },
  {
    "text": "our requirement and let's take a look here in detail and this code belongs to message ox35 rbc",
    "start": "1226480",
    "end": "1235360"
  },
  {
    "text": "updated pd2 and at the top if the vrpc body data we passed in has a value it",
    "start": "1235360",
    "end": "1241840"
  },
  {
    "text": "will write the address of its own local variable into the corresponding position of vrpc message body",
    "start": "1241840",
    "end": "1248559"
  },
  {
    "text": "then if it passes nvm control successfully that is io control does not",
    "start": "1248559",
    "end": "1253679"
  },
  {
    "text": "written an error the message handler will return successfully as afterwards",
    "start": "1253679",
    "end": "1259200"
  },
  {
    "text": "and this stack pointer will remain in the vrpc body and return to the guest this is a perfect information leak",
    "start": "1259200",
    "end": "1266320"
  },
  {
    "text": "because assuming that the client's vgpu manager is like a single thread it means that the stack pointer it",
    "start": "1266320",
    "end": "1273360"
  },
  {
    "text": "returns here will always have same offset relatively to the start of the",
    "start": "1273360",
    "end": "1278559"
  },
  {
    "text": "stack area but we have some trouble when we are debugging it the out control fails every",
    "start": "1278559",
    "end": "1284960"
  },
  {
    "text": "time and this structure is as big as 16 by its data obviously uh brute",
    "start": "1284960",
    "end": "1291760"
  },
  {
    "text": "forcing is pretty sorry obviously uh brute forcing it is unreasonable so we use that gdp",
    "start": "1291760",
    "end": "1298720"
  },
  {
    "text": "script to fuse it and finally we made it return successfully",
    "start": "1298720",
    "end": "1305280"
  },
  {
    "text": "and compares to brutal forcing of 164 bytes it's better to use a little",
    "start": "1305280",
    "end": "1310960"
  },
  {
    "text": "randomization during the funding and through the messages ox2 and aux turning we can create to",
    "start": "1310960",
    "end": "1318559"
  },
  {
    "text": "handle the value is manually specified by us and we know that these two handles",
    "start": "1318559",
    "end": "1323760"
  },
  {
    "text": "is often used by message handlers so after we created these two handles we",
    "start": "1323760",
    "end": "1328799"
  },
  {
    "text": "wrote a huge loop in the gdp script the loop script the loop will randomly set the value of",
    "start": "1328799",
    "end": "1335840"
  },
  {
    "text": "each field from a set of fixed values such as 0 1 o x 1 0 0 and",
    "start": "1335840",
    "end": "1344240"
  },
  {
    "text": "o f 7 f ffffs like this and including those two handle",
    "start": "1344240",
    "end": "1350720"
  },
  {
    "text": "values and the loop modifies the value of some of the variables randomly if there's no",
    "start": "1350720",
    "end": "1357440"
  },
  {
    "text": "findings after a period of time the variables are randomized again we use a fixed pseudo random number",
    "start": "1357440",
    "end": "1364240"
  },
  {
    "text": "generator so it can be easily reproduced if we run into any problems and we finally pass the check",
    "start": "1364240",
    "end": "1372640"
  },
  {
    "text": "in addition to aslr we also need some memory corruption to complete the entire",
    "start": "1373520",
    "end": "1378640"
  },
  {
    "text": "exploit chain when i was auditing the handler i found several very large functions each of which has many",
    "start": "1378640",
    "end": "1385120"
  },
  {
    "text": "thousand lines of code i've always liked to audit those super large functions superlative functions always means super",
    "start": "1385120",
    "end": "1392159"
  },
  {
    "text": "large super big complexity the code may be good and safe in the first but after a period of time",
    "start": "1392159",
    "end": "1399919"
  },
  {
    "text": "the code will change more or less and maybe is uh to improve code efficiency",
    "start": "1399919",
    "end": "1405520"
  },
  {
    "text": "or add some features the problem of large logical blocks is then exposed",
    "start": "1405520",
    "end": "1412799"
  },
  {
    "text": "even with code reviews unit test is still very difficult for technical experts or software engineers to analyze",
    "start": "1412799",
    "end": "1418720"
  },
  {
    "text": "the sample changes in the code to each branch of this huge function and the message name of ox1a is dma",
    "start": "1418720",
    "end": "1426400"
  },
  {
    "text": "control dma has always been a hot spot for security researchers this is an",
    "start": "1426400",
    "end": "1432159"
  },
  {
    "text": "operation that crosses the boundary between the software and hardware it is",
    "start": "1432159",
    "end": "1437679"
  },
  {
    "text": "definitely an important logic to analysis even other software such as qmu",
    "start": "1437679",
    "end": "1444080"
  },
  {
    "text": "and here is dma plus rpc this is as conspicuous as a warning sign on the",
    "start": "1444080",
    "end": "1450400"
  },
  {
    "text": "side of the road there are two very long callback functions which are used",
    "start": "1450400",
    "end": "1455600"
  },
  {
    "text": "for data industrialization and finalization before and after dma and",
    "start": "1455600",
    "end": "1460720"
  },
  {
    "text": "there is very long if then and send io control expression in the middle of this handler you can easily spot it and it's",
    "start": "1460720",
    "end": "1468320"
  },
  {
    "text": "sending the io control that excuse the dma request this handler will call dma control get",
    "start": "1468320",
    "end": "1475440"
  },
  {
    "text": "parameter size with the dma number memory lock to allocate a buffer for dma",
    "start": "1475440",
    "end": "1481600"
  },
  {
    "text": "sizer vary from different dma numbers it should be mentioned that idea may have",
    "start": "1481600",
    "end": "1487600"
  },
  {
    "text": "bugs when generating the pseudo code for this function the return value looks well looks smaller than correct value",
    "start": "1487600",
    "end": "1494720"
  },
  {
    "text": "than in in the error so i will i recommend you to refer to the assembly",
    "start": "1494720",
    "end": "1499919"
  },
  {
    "text": "code to get the real allocation size i named the initialization function as",
    "start": "1499919",
    "end": "1504960"
  },
  {
    "text": "first half processor it will fill the data according to the dma command and we have found two vulnerabilities in this",
    "start": "1504960",
    "end": "1511279"
  },
  {
    "text": "function let's let's take a look in the first",
    "start": "1511279",
    "end": "1516480"
  },
  {
    "text": "half processor when the dma commands we send our osc6370102",
    "start": "1516480",
    "end": "1523080"
  },
  {
    "text": "i will call them one and o2 for short the function logic in the first half processor seem a bit wrong especially",
    "start": "1523679",
    "end": "1531360"
  },
  {
    "text": "o2 o2's while loop is equivalent to the memory copy also the o1 is",
    "start": "1531360",
    "end": "1538480"
  },
  {
    "text": "is is also very similar to memory copy but it will skip some bytes",
    "start": "1538480",
    "end": "1543760"
  },
  {
    "text": "and you can see neither of these two cases limited how many bytes to copy because in the pseudo code edda didn't",
    "start": "1543760",
    "end": "1551120"
  },
  {
    "text": "put 0 2 into switch case but instead using a go 2 to jump to his handler so we didn't saw 02 at our first glance",
    "start": "1551120",
    "end": "1559200"
  },
  {
    "text": "and so our exploit will use the branch of c63701",
    "start": "1559200",
    "end": "1566120"
  },
  {
    "text": "the branch of o1 will copy data with host please look at this code",
    "start": "1566640",
    "end": "1572320"
  },
  {
    "text": "in the bottom left figure it will copy data to the dma buffer with index 9 multiplies i and then plus 3 to 10. for",
    "start": "1572320",
    "end": "1580159"
  },
  {
    "text": "example when i is equal to 0 the buffs in digs 3 to 10 will be filled with",
    "start": "1580159",
    "end": "1585840"
  },
  {
    "text": "values in the next iteration when i equals 1 buffs index",
    "start": "1585840",
    "end": "1591679"
  },
  {
    "text": "12 to 19 will be filled with values in other words every time each is",
    "start": "1591679",
    "end": "1597200"
  },
  {
    "text": "turning 4 bytes it will skip 4 bytes i will call those 4 bytes as host later",
    "start": "1597200",
    "end": "1605520"
  },
  {
    "text": "and since it is a heap overflow we should be interested in the data after",
    "start": "1606320",
    "end": "1611360"
  },
  {
    "text": "the overflowed heap after a flow after a few hundred bytes we found an interesting hip trunk the content seems",
    "start": "1611360",
    "end": "1619039"
  },
  {
    "text": "to be a structure with several points started let's attach the vgp manager set an",
    "start": "1619039",
    "end": "1624960"
  },
  {
    "text": "access breakpoint on this memory trunk and then resume the program as soon as the vrpc returned the excess breakpoint",
    "start": "1624960",
    "end": "1632159"
  },
  {
    "text": "was triggered we found that the caller is a function located in the main program but but not a vgb plugin as",
    "start": "1632159",
    "end": "1638880"
  },
  {
    "text": "shown in the figure blog this function is comparing an address to the value stored in this memory trunk",
    "start": "1638880",
    "end": "1646639"
  },
  {
    "text": "the memory trunk where we set the breakpoint is a node in a linked list the code is testing whether the pointer",
    "start": "1647039",
    "end": "1654159"
  },
  {
    "text": "is the same as the first item in the linked list if they are the same it will remove the item",
    "start": "1654159",
    "end": "1660960"
  },
  {
    "text": "from the linked list after some attempts we found that in the picture on the right if v16 is set to zero",
    "start": "1660960",
    "end": "1668799"
  },
  {
    "text": "then you can pass subroutine 404 beo and then enter the function set item value i",
    "start": "1668799",
    "end": "1675520"
  },
  {
    "text": "named this function but the name somewhat is somewhat ambitious from the perspective of the attacker",
    "start": "1675520",
    "end": "1682559"
  },
  {
    "text": "this function is setting the value of a certain memory block and from the developer's point of view this function",
    "start": "1682559",
    "end": "1689520"
  },
  {
    "text": "is used to remove nodes from the linked list let's take a close look at the code",
    "start": "1689520",
    "end": "1696240"
  },
  {
    "text": "logic and this function and you can see such a text book like chain removal operation",
    "start": "1696240",
    "end": "1702799"
  },
  {
    "text": "and as you know the work of removing the chain will inevitably modify the proof and the next",
    "start": "1702799",
    "end": "1709120"
  },
  {
    "text": "value of nodes before and after it does this operation remind you of the",
    "start": "1709120",
    "end": "1714399"
  },
  {
    "text": "unlinked operation of mlok in the older version of labc we will also use this opportunity to set",
    "start": "1714399",
    "end": "1721200"
  },
  {
    "text": "the previous and next values in vulnerability exploitation",
    "start": "1721200",
    "end": "1727200"
  },
  {
    "text": "okay let's read the code again the variable p is the memory trunk of load by us so its value is totally",
    "start": "1727279",
    "end": "1734240"
  },
  {
    "text": "controllable and moreover this function will call and map or am on",
    "start": "1734240",
    "end": "1739520"
  },
  {
    "text": "map according to the value of memory trunk p after finishing the link linked list operation",
    "start": "1739520",
    "end": "1746159"
  },
  {
    "text": "so we can set p pref to map dot got minus the offset of next field relative",
    "start": "1746159",
    "end": "1753520"
  },
  {
    "text": "to the beginning of the structure then set p next to the address of our",
    "start": "1753520",
    "end": "1758960"
  },
  {
    "text": "first row gadget when we write p next to p prep next the god of map will be",
    "start": "1758960",
    "end": "1765919"
  },
  {
    "text": "overwritten with the address of the first love gadget but there's a problem here you can see",
    "start": "1765919",
    "end": "1772559"
  },
  {
    "text": "it will also set p next prev to p prep p next is now the address of the first",
    "start": "1772559",
    "end": "1780399"
  },
  {
    "text": "row gadget p next to previous just a few bytes behind the rope gadget this means",
    "start": "1780399",
    "end": "1786240"
  },
  {
    "text": "if you want to exploit it in this way we also need the memory trunk of first row",
    "start": "1786240",
    "end": "1791760"
  },
  {
    "text": "gadget to be readable of course it's also to be executable but the rwx memory is rarely seen now so",
    "start": "1791760",
    "end": "1799679"
  },
  {
    "text": "here it is it leaves us a big question mark",
    "start": "1799679",
    "end": "1804799"
  },
  {
    "text": "and to my surprise the program have many rwx pages and they are all used as",
    "start": "1805360",
    "end": "1811760"
  },
  {
    "text": "a stack this means that we can put shell code on the stack and then use a stack address as the first rope get its",
    "start": "1811760",
    "end": "1818880"
  },
  {
    "text": "address the first thing came into my mind was some functions like main they",
    "start": "1818880",
    "end": "1824559"
  },
  {
    "text": "are called earlier and their stack frames will remain in the program and almost don't change therefore i dump the",
    "start": "1824559",
    "end": "1831200"
  },
  {
    "text": "stack memory and search for the rope gadgets there are some gadgets but i did not find any rope gadgets that met my",
    "start": "1831200",
    "end": "1838240"
  },
  {
    "text": "needs so now there's only one way that is i need to find a way to put the rope gadget on",
    "start": "1838240",
    "end": "1844240"
  },
  {
    "text": "the stack manually um one japanese find a function and that",
    "start": "1844240",
    "end": "1850480"
  },
  {
    "text": "function will use a very super and unusually large amount of stack space and it will modify the memory area that",
    "start": "1850480",
    "end": "1858000"
  },
  {
    "text": "is located very deep in the stack and when that function x is the stack memory",
    "start": "1858000",
    "end": "1863279"
  },
  {
    "text": "it applies so for sorry the stack memory it applies for will rarely have a chance to be reused",
    "start": "1863279",
    "end": "1869440"
  },
  {
    "text": "by other functions so my gadget can leave the leave in the stack in this way",
    "start": "1869440",
    "end": "1875760"
  },
  {
    "text": "now i only need to search for the dot c file supported by adapt i used a regular",
    "start": "1875840",
    "end": "1881840"
  },
  {
    "text": "expression to search who is using a lot of stack memory i've got some candidates",
    "start": "1881840",
    "end": "1887279"
  },
  {
    "text": "and after i compare the function among them i'm sure that the processor of the message of 3c will be my choice",
    "start": "1887279",
    "end": "1895679"
  },
  {
    "text": "it takes up about 47 kilobytes of stack memory please check the snapshot in the top and also the function is quite",
    "start": "1895679",
    "end": "1902480"
  },
  {
    "text": "simple after entering it it will copy the value from vrpc message body index 6 to stack",
    "start": "1902480",
    "end": "1909600"
  },
  {
    "text": "variable v55 and v5 is located at rsp plus ox",
    "start": "1909600",
    "end": "1916360"
  },
  {
    "text": "b88 then it is used to send an our control if error happens in the out",
    "start": "1916360",
    "end": "1922720"
  },
  {
    "text": "control it will report an error and adds it directly this can be a primitive for placing shell code on a stack it only",
    "start": "1922720",
    "end": "1929279"
  },
  {
    "text": "does necessary operations and exits with minimal influence to the overall memory",
    "start": "1929279",
    "end": "1935039"
  },
  {
    "text": "layout now we have this primitive to put a gadget on the stack so how do we combine",
    "start": "1935039",
    "end": "1942240"
  },
  {
    "text": "this with unlink process first we write a 4 byte row gadget to the stack and thanks to the fork you can",
    "start": "1942240",
    "end": "1949039"
  },
  {
    "text": "treat it as a single threaded program waiting for external input to do the task",
    "start": "1949039",
    "end": "1954880"
  },
  {
    "text": "therefore as long as order of each vrp's message is not changed the relative",
    "start": "1954880",
    "end": "1960159"
  },
  {
    "text": "offset of the rope gadget to the beginning of the stack memory is also unchanged",
    "start": "1960159",
    "end": "1965600"
  },
  {
    "text": "and furthermore all objects relative offset that we will use later our",
    "start": "1965600",
    "end": "1971120"
  },
  {
    "text": "exploit chain won't change either so now we can finish the last step which",
    "start": "1971120",
    "end": "1977200"
  },
  {
    "text": "is assign p pref to p next prep the rope gadget we used is move r s p rsi then",
    "start": "1977200",
    "end": "1983760"
  },
  {
    "text": "return the figure in the right talk explains the reason why i choose to",
    "start": "1983760",
    "end": "1989600"
  },
  {
    "text": "set the rsi the rbx in the figure is memory",
    "start": "1989600",
    "end": "1995519"
  },
  {
    "text": "is pointing to the memory trunk p so rsi is got from controllable memory area the",
    "start": "1995519",
    "end": "2001600"
  },
  {
    "text": "lens parameter of map has type of side key which is always the same length of a pointer so we can move a pointer into",
    "start": "2001600",
    "end": "2009120"
  },
  {
    "text": "the into this rsi register from p plus h the pointer points to our fake stack which",
    "start": "2009120",
    "end": "2016799"
  },
  {
    "text": "are the memory trunks before variable p and don't forget we already set the map",
    "start": "2016799",
    "end": "2023679"
  },
  {
    "text": "to this row of gadget one so when mf is called actually our rope gave it to a",
    "start": "2023679",
    "end": "2029200"
  },
  {
    "text": "rung so we can complete the stack private through our roof gadget so",
    "start": "2029200",
    "end": "2034960"
  },
  {
    "text": "everything now looks fine but because c63701 will have holes when coping the",
    "start": "2034960",
    "end": "2041039"
  },
  {
    "text": "data the stack will also carry four bytes of zeros in many places but",
    "start": "2041039",
    "end": "2046399"
  },
  {
    "text": "this can be avoided by choosing rubber gadgets carefully now let's deal with these holes",
    "start": "2046399",
    "end": "2053280"
  },
  {
    "text": "regarding this memory hose we can use those hose clearly when we adjust the memory layout for example we can treat",
    "start": "2053280",
    "end": "2060720"
  },
  {
    "text": "them as the number zero or use four bytes as a higher 32 bits of address",
    "start": "2060720",
    "end": "2066638"
  },
  {
    "text": "the main pro that the main manager process is loaded on address",
    "start": "2066639",
    "end": "2072000"
  },
  {
    "text": "four with 5 0's but this is a 64-bit program so using the four bytes of zeros as part",
    "start": "2072000",
    "end": "2079919"
  },
  {
    "text": "of memory and address is visible also we can choose a suitable rope",
    "start": "2079919",
    "end": "2085040"
  },
  {
    "text": "gadget to either pop it out or skip it adjusting memory layout with those holes",
    "start": "2085040",
    "end": "2092320"
  },
  {
    "text": "is a very time consuming step in the debugging so it needs some patience",
    "start": "2092320",
    "end": "2098560"
  },
  {
    "text": "and after i figured out the memory layout and wrote the whole poc now we",
    "start": "2098560",
    "end": "2103839"
  },
  {
    "text": "need to patch guest kernel driver to send messages i manually patched a large area in the",
    "start": "2103839",
    "end": "2111040"
  },
  {
    "text": "guest driver in advance so basically all we need to do now is to split the",
    "start": "2111040",
    "end": "2116640"
  },
  {
    "text": "bytecode of the plc into many assemblies to write data into vrpc message buffer",
    "start": "2116640",
    "end": "2124320"
  },
  {
    "text": "the rax in the figure represents represents the start address of the vrpc",
    "start": "2124320",
    "end": "2130320"
  },
  {
    "text": "buffer as you can see this is very painful i have made a program to help me",
    "start": "2130320",
    "end": "2135680"
  },
  {
    "text": "to do the most of work and it can help me to calculate the offset the value and the barcodes and",
    "start": "2135680",
    "end": "2142720"
  },
  {
    "text": "generate a patched guest nvidia.ko file",
    "start": "2142720",
    "end": "2147760"
  },
  {
    "text": "when the patched guest driver is prepared now it's time to trigger the vulnerability i have found two different",
    "start": "2147760",
    "end": "2154480"
  },
  {
    "text": "styles of hypervisors during the test one is that the hypervisor does not exit when",
    "start": "2154480",
    "end": "2161200"
  },
  {
    "text": "the clients restart the system restarts and the type",
    "start": "2161200",
    "end": "2166480"
  },
  {
    "text": "two is when the client restarts the hypervisor also exists because retrieval manager will also exit",
    "start": "2166480",
    "end": "2173760"
  },
  {
    "text": "when the hypervisor process answers therefore i have listed two methods for trigging the vulnerability",
    "start": "2173760",
    "end": "2180640"
  },
  {
    "text": "the the method too does not require you to reboot the guest",
    "start": "2180640",
    "end": "2185839"
  },
  {
    "text": "machine you can choose one of them according to your environment they are equivalent",
    "start": "2185839",
    "end": "2192000"
  },
  {
    "text": "to myself i prefer to use the method one because it takes less steps",
    "start": "2192000",
    "end": "2198560"
  },
  {
    "text": "and finally we can trigger this vulnerability from the guest and wrong archery program in the host machine with",
    "start": "2199119",
    "end": "2206960"
  },
  {
    "text": "with root privilege the overall success rate is about 40 to 50",
    "start": "2206960",
    "end": "2213760"
  },
  {
    "text": "and that's because sometimes the stack address can move forward or afterwards a little bit when",
    "start": "2213760",
    "end": "2221040"
  },
  {
    "text": "vgpu plugin is loaded but you can restart your guest machine",
    "start": "2221040",
    "end": "2226320"
  },
  {
    "text": "as many times as you want in a cloud environment so i think that",
    "start": "2226320",
    "end": "2231599"
  },
  {
    "text": "doesn't matter because the time is limited so instead",
    "start": "2231599",
    "end": "2237040"
  },
  {
    "text": "of a long video here i only put a snapshot and which is showing the moment",
    "start": "2237040",
    "end": "2242640"
  },
  {
    "text": "of calculator is popped up in our host machine",
    "start": "2242640",
    "end": "2249200"
  },
  {
    "text": "and in the end is some security practice in using the gpu and most important thing",
    "start": "2250800",
    "end": "2258079"
  },
  {
    "text": "is update your software regularly and because the nvidia vgpu manager is",
    "start": "2258079",
    "end": "2263200"
  },
  {
    "text": "running in root so maybe you can use your firewall to restrict what it can do",
    "start": "2263200",
    "end": "2268560"
  },
  {
    "text": "or use a host intrusion preparation system to monitor the process activities",
    "start": "2268560",
    "end": "2275520"
  },
  {
    "text": "and also administrators should monitor strange crashes on the host machine and report report them to nvidia when you",
    "start": "2275520",
    "end": "2284160"
  },
  {
    "text": "think it is a dangerous crash and when there's zero day and some hot fix patches",
    "start": "2284160",
    "end": "2292800"
  },
  {
    "text": "which you can also call them as workarounds they could also be applied for example you can loop some vulnerable",
    "start": "2292880",
    "end": "2299920"
  },
  {
    "text": "message handlers or functions that are not frequently used",
    "start": "2299920",
    "end": "2305838"
  },
  {
    "text": "and here are some cves that are involved in this talk and some vulnerabilities are",
    "start": "2307280",
    "end": "2314160"
  },
  {
    "text": "scheduled to some other vulnerabilities are scheduled to be fixed in the end of july and",
    "start": "2314160",
    "end": "2321440"
  },
  {
    "text": "this talk is recorded earlier so they are not listed here and due to the",
    "start": "2321440",
    "end": "2327040"
  },
  {
    "text": "responsible vulnerability disclosure program so we have removed some contents from this slide",
    "start": "2327040",
    "end": "2334800"
  },
  {
    "text": "the deleted contents does not affect the completeness of the speech and so",
    "start": "2334800",
    "end": "2341200"
  },
  {
    "text": "please follow the official security uh bulletin and updating your",
    "start": "2341200",
    "end": "2346480"
  },
  {
    "text": "product in time if you think your products are affected",
    "start": "2346480",
    "end": "2353480"
  },
  {
    "text": "and that's all and thank you very much for your listening thank you",
    "start": "2354160",
    "end": "2361640"
  }
]