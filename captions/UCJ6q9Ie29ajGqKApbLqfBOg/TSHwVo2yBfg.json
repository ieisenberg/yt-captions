[
  {
    "text": "ladies and gentlemen I'm delighted to be here with you today we are here to Del into a topic that is both profound and",
    "start": "5200",
    "end": "13400"
  },
  {
    "text": "challenging the hat trick exploit gr twice from runtime to",
    "start": "13400",
    "end": "18840"
  },
  {
    "text": "jit before we Del into our main topic let's start with introductions first I'm",
    "start": "18840",
    "end": "24960"
  },
  {
    "text": "n one n it's respected security research as 3 sity Research Institute in the past",
    "start": "24960",
    "end": "33360"
  },
  {
    "text": "two years I'm ranked among the top 10 crew we research and I was named the",
    "start": "33360",
    "end": "40039"
  },
  {
    "text": "second ranked Facebook white hat in 2023 next we have Jun hell as an independent",
    "start": "40039",
    "end": "47800"
  },
  {
    "text": "security research he primarily focus on brother security and will be pursuing",
    "start": "47800",
    "end": "53960"
  },
  {
    "text": "their master degree in their field next this is the organization with",
    "start": "53960",
    "end": "60160"
  },
  {
    "text": "represent sir 360 viability Research Institute we are here to share our",
    "start": "60160",
    "end": "66439"
  },
  {
    "text": "insights and discour hoping to make their Digital World safer uh hello I'm Jan to ensure",
    "start": "66439",
    "end": "75159"
  },
  {
    "text": "everyone has a clear understanding of the talk let's talk let's take a look at our",
    "start": "75159",
    "end": "80799"
  },
  {
    "text": "agenda we will start with a brief introduction providing an overview of our research Gates our research targets",
    "start": "80799",
    "end": "89119"
  },
  {
    "text": "then we will proceed to share the details of two remote code execution abilities that we have discovered and",
    "start": "89119",
    "end": "96320"
  },
  {
    "text": "finally we will conclude this talk with a live demonstration now let's kick off with",
    "start": "96320",
    "end": "101840"
  },
  {
    "text": "the introduction the Chrome browser adopts a multiple a multiprocess architecture",
    "start": "101840",
    "end": "109159"
  },
  {
    "text": "this design Dives the browser tasks into different processes that run",
    "start": "109159",
    "end": "115200"
  },
  {
    "text": "independently key components include the browser process and the render process proc the Brower process is responsible",
    "start": "115200",
    "end": "122880"
  },
  {
    "text": "for handling the US the user interface interacting with the operating system",
    "start": "122880",
    "end": "128160"
  },
  {
    "text": "and managing other processes on the other hand each render process operates",
    "start": "128160",
    "end": "134080"
  },
  {
    "text": "within a setbox environment to ensure security and the manages individual web",
    "start": "134080",
    "end": "139440"
  },
  {
    "text": "pages in our research we primarily focus on the render process this is the",
    "start": "139440",
    "end": "145599"
  },
  {
    "text": "component that directory handles external inputs and is for and important",
    "start": "145599",
    "end": "151840"
  },
  {
    "text": "Target for potential security viabilities the we8 JavaScript engine as a crucial",
    "start": "151840",
    "end": "158920"
  },
  {
    "text": "component of the render process possesses a complex and intricate",
    "start": "158920",
    "end": "165319"
  },
  {
    "text": "architecture this has guard extensive security attention and due to the",
    "start": "165319",
    "end": "171000"
  },
  {
    "text": "flexibility of the scraft engine it is it is p to exploitation by attackers our",
    "start": "171000",
    "end": "178319"
  },
  {
    "text": "research primarily Focus Fus on the runtime component and the mlav optimization within the we8 engine these",
    "start": "178319",
    "end": "186280"
  },
  {
    "text": "two areas provide abundance opportunities for varability Discovery and form the record content of our",
    "start": "186280",
    "end": "193760"
  },
  {
    "text": "presentation today in the next section we are going to share our first remote code execution",
    "start": "193760",
    "end": "200640"
  },
  {
    "text": "relability which is the focal point of our discussion today this variability is",
    "start": "200640",
    "end": "206760"
  },
  {
    "text": "associated with an incorrect implementation of the new JavaScript engine in the we8 runtime",
    "start": "206760",
    "end": "215159"
  },
  {
    "text": "environment uh JavaScript promise is a mechanis used in JavaScript to handle",
    "start": "215159",
    "end": "222080"
  },
  {
    "text": "operations a promise object can be seen as a commitment to perform an essential",
    "start": "222080",
    "end": "228840"
  },
  {
    "text": "R operation indicating that it will be completed and return result at some",
    "start": "228840",
    "end": "234920"
  },
  {
    "text": "point in the future it can have three states pending for fed and rejected once",
    "start": "234920",
    "end": "242720"
  },
  {
    "text": "a promise enters the fulfilled or rejected state it is considered",
    "start": "242720",
    "end": "248200"
  },
  {
    "text": "settled when working with promises to handle estos operations we can register",
    "start": "248200",
    "end": "254079"
  },
  {
    "text": "callback functions using the promis L function and the promised catch function to handle both successful and failed",
    "start": "254079",
    "end": "261440"
  },
  {
    "text": "operations the promised L vors is used to register a callback function to",
    "start": "261440",
    "end": "266680"
  },
  {
    "text": "handle the changes of promised States it takes two CC functions as",
    "start": "266680",
    "end": "272600"
  },
  {
    "text": "parameters these functions will be called when the promise is settled and",
    "start": "272600",
    "end": "278240"
  },
  {
    "text": "they will receive a promis result as an argument this",
    "start": "278240",
    "end": "285280"
  },
  {
    "text": "slide presents a JavaScript example that utilizes promise in this example we",
    "start": "285280",
    "end": "292039"
  },
  {
    "text": "first call a fesh data function which creates a promise object with an Essen",
    "start": "292039",
    "end": "298680"
  },
  {
    "text": "operation then we use the L function to register callback functions that will be",
    "start": "298680",
    "end": "304919"
  },
  {
    "text": "invoked when the promises States changes to either resolve or reject in this way",
    "start": "304919",
    "end": "312840"
  },
  {
    "text": "when the a operation completes the code inside the uh the auros operos function",
    "start": "312840",
    "end": "321240"
  },
  {
    "text": "will call either the resolve or reject function uh based on the execution",
    "start": "321240",
    "end": "328160"
  },
  {
    "text": "results Le updating the state of the promise object accordingly once the promise object",
    "start": "328160",
    "end": "335520"
  },
  {
    "text": "State changes the only resolve operation callback the only resolve callback function is called to Output the value",
    "start": "335520",
    "end": "343199"
  },
  {
    "text": "returned by the S operation promise N is a static method",
    "start": "343199",
    "end": "350120"
  },
  {
    "text": "of promise it accepts an iterable object usually like an array of promises as an",
    "start": "350120",
    "end": "357759"
  },
  {
    "text": "argument and the returns a new promise this return promise is immediately",
    "start": "357759",
    "end": "363759"
  },
  {
    "text": "resolved as soon as any one of the promises in theal is",
    "start": "363759",
    "end": "369080"
  },
  {
    "text": "fulfilled if all the promises are rejected then the return promise is also",
    "start": "369080",
    "end": "374520"
  },
  {
    "text": "rejected and it includes an aate arrrow object that contains the arrrows from",
    "start": "374520",
    "end": "380440"
  },
  {
    "text": "all promises the whole is a internal",
    "start": "380440",
    "end": "386000"
  },
  {
    "text": "Sentinal element within V8 it in from undefined or none as it represents an",
    "start": "386000",
    "end": "393400"
  },
  {
    "text": "absence of value meaning no value at all let's consider a JavaScript example here",
    "start": "393400",
    "end": "399880"
  },
  {
    "text": "we first create an array where the second element is left without any value",
    "start": "399880",
    "end": "406039"
  },
  {
    "text": "aside well we can what we call debac print on this array you can see that the",
    "start": "406039",
    "end": "412240"
  },
  {
    "text": "elements array contains a value referred to as the whole now let's dive into our first rc",
    "start": "412240",
    "end": "421160"
  },
  {
    "text": "relability that we have discovered on the left part we have the standard",
    "start": "421160",
    "end": "426919"
  },
  {
    "text": "definition on promis ending in es6 and on the right we have a proof of concept",
    "start": "426919",
    "end": "433680"
  },
  {
    "text": "of varability let's first try to understand the standard exclusion flaw",
    "start": "433680",
    "end": "439039"
  },
  {
    "text": "defined on the left initially the promise any function dective three",
    "start": "439039",
    "end": "444680"
  },
  {
    "text": "variables the arrow variable is an array used to store reject values parameters",
    "start": "444680",
    "end": "450840"
  },
  {
    "text": "where all input promises have been rejected the Remain the remaining",
    "start": "450840",
    "end": "456039"
  },
  {
    "text": "elements count represent the number of input promises still in pending States",
    "start": "456039",
    "end": "462280"
  },
  {
    "text": "the last variable index represents the index of the input promise being",
    "start": "462280",
    "end": "467360"
  },
  {
    "text": "currently iterated over then comes the loop step a to d the perise send",
    "start": "467360",
    "end": "474120"
  },
  {
    "text": "function repeatedly fetch the next input argument for the iterator if if the next",
    "start": "474120",
    "end": "480000"
  },
  {
    "text": "input if the next element is not n and undefined value is added to the arrow",
    "start": "480000",
    "end": "485759"
  },
  {
    "text": "array as a placeholder in Step e it attempts to call a promised resolve",
    "start": "485759",
    "end": "492639"
  },
  {
    "text": "function to rle a promis object currently being iterated over ensuring that the return return result is a real",
    "start": "492639",
    "end": "500199"
  },
  {
    "text": "promise object this is because the argument pass might not be a valid promise object but",
    "start": "500199",
    "end": "507400"
  },
  {
    "text": "could be a constant like a number or string literal is Step f and g the",
    "start": "507400",
    "end": "513839"
  },
  {
    "text": "promise any function dynamically creates a builing reject elements and stores it",
    "start": "513839",
    "end": "519640"
  },
  {
    "text": "in the own reject variable while also setting some property values in Step Ed since the promise any",
    "start": "519640",
    "end": "527640"
  },
  {
    "text": "function has success has successfully obtained the next input promise object",
    "start": "527640",
    "end": "533440"
  },
  {
    "text": "the value of the remaining elements count is increased by one finally in",
    "start": "533440",
    "end": "538880"
  },
  {
    "text": "step I and J the L function is called on the input promise setting a callback",
    "start": "538880",
    "end": "544320"
  },
  {
    "text": "functions that need to be C after its state changes and the index value is updated the entire FL can be mapped to",
    "start": "544320",
    "end": "552920"
  },
  {
    "text": "the sequence number of the proof of concept on the right one two three four",
    "start": "552920",
    "end": "559240"
  },
  {
    "text": "and five one important thing to note is that the proof of concept C the core",
    "start": "559240",
    "end": "566800"
  },
  {
    "text": "function on the promise any fun function course in promise any function to be",
    "start": "566800",
    "end": "572480"
  },
  {
    "text": "cord within the context of craft promise function let is p and the type of the",
    "start": "572480",
    "end": "579600"
  },
  {
    "text": "value return by promise any is craft promise the craft promise function",
    "start": "579600",
    "end": "585399"
  },
  {
    "text": "itself is called even before the first step of Promise Ed to obtain the",
    "start": "585399",
    "end": "591160"
  },
  {
    "text": "functions to be C when this craft promise in instance is resolved or",
    "start": "591160",
    "end": "596920"
  },
  {
    "text": "rejected uh such as the result capability resolve or reject in promise",
    "start": "596920",
    "end": "602240"
  },
  {
    "text": "any standard now let's Del deeper into promise ending when any input promise is",
    "start": "602240",
    "end": "610600"
  },
  {
    "text": "resolved the that promise will immediately call the resol of the final",
    "start": "610600",
    "end": "616240"
  },
  {
    "text": "returned craft promise and the whole process ends however when an input",
    "start": "616240",
    "end": "623320"
  },
  {
    "text": "promise is set to reject promise any it does not wish to interrupt a like Fusion fla of remaining promises because there",
    "start": "623320",
    "end": "631399"
  },
  {
    "text": "is still a possibility for the remaining input promises to be resolved therefore",
    "start": "631399",
    "end": "636800"
  },
  {
    "text": "will an input promise is set to reject the Callback function it will call is",
    "start": "636800",
    "end": "642200"
  },
  {
    "text": "the dynamically created on reject function not the reject function of the",
    "start": "642200",
    "end": "647320"
  },
  {
    "text": "final returned craft promise the standard of long reject function is sh",
    "start": "647320",
    "end": "652839"
  },
  {
    "text": "on the right half of the slide it first Ru the attributes previous defined on",
    "start": "652839",
    "end": "660000"
  },
  {
    "text": "the on on on the own reject including the index of current promise the errors",
    "start": "660000",
    "end": "667360"
  },
  {
    "text": "array of the current promise and the value of remaining enim count and so on",
    "start": "667360",
    "end": "674920"
  },
  {
    "text": "next the own reject function stores the value of the current promise that it has",
    "start": "674920",
    "end": "680639"
  },
  {
    "text": "been set to reject in the arrows array finally it substract one from remaining",
    "start": "680639",
    "end": "687639"
  },
  {
    "text": "element count updating the current number of promises still in pending",
    "start": "687639",
    "end": "692800"
  },
  {
    "text": "States one thing to note is that when executing promise any remaining en",
    "start": "692800",
    "end": "698639"
  },
  {
    "text": "account is initially set to one and only after the entire promise any function",
    "start": "698639",
    "end": "703800"
  },
  {
    "text": "has iterated through all inputs does it substract the initial value of one in",
    "start": "703800",
    "end": "709360"
  },
  {
    "text": "Step 4bi this start to inure that during the fusion of Promise any well some inputed",
    "start": "709360",
    "end": "716800"
  },
  {
    "text": "promises are set to reject is one trigger the condition in the reject",
    "start": "716800",
    "end": "721880"
  },
  {
    "text": "element function where remaining element count is compared with zero and return",
    "start": "721880",
    "end": "727480"
  },
  {
    "text": "and aggregate arrrow this means that promise any does not prematurely set",
    "start": "727480",
    "end": "733240"
  },
  {
    "text": "stages of a return promise to reject only after the entire promise and",
    "start": "733240",
    "end": "738839"
  },
  {
    "text": "function has been executed does it become possible for step eight in reject",
    "start": "738839",
    "end": "744399"
  },
  {
    "text": "element function to be triggered now let's briefly focus on the",
    "start": "744399",
    "end": "750279"
  },
  {
    "text": "Arrow array for our standard we can see that the for each input itated by the",
    "start": "750279",
    "end": "756040"
  },
  {
    "text": "promise any function and undefined value is added to the arrow surray as a",
    "start": "756040",
    "end": "761839"
  },
  {
    "text": "placeholder then when an input promise is set to reject the corresponding",
    "start": "761839",
    "end": "767880"
  },
  {
    "text": "reject value will be stored in lrow Array so how does we8 handle the Aros we",
    "start": "767880",
    "end": "775079"
  },
  {
    "text": "can see that in the implementation of the promise any function we it does not",
    "start": "775079",
    "end": "780240"
  },
  {
    "text": "use undefined as press holder when iterating or new inputs instead it uses",
    "start": "780240",
    "end": "786320"
  },
  {
    "text": "a lazy initialization approach leaveing the initialization of Errors until the",
    "start": "786320",
    "end": "792240"
  },
  {
    "text": "first rejected input promise calls the all reject function in the",
    "start": "792240",
    "end": "797760"
  },
  {
    "text": "implementation of Promise any reject in element closure we can see that the",
    "start": "797760",
    "end": "803399"
  },
  {
    "text": "capacity of the arrows array is influenced by two variables remaining El",
    "start": "803399",
    "end": "809279"
  },
  {
    "text": "account and the index however as we explained before through the execution",
    "start": "809279",
    "end": "815000"
  },
  {
    "text": "of Promise any function the remaining anim accounts will be one larger than",
    "start": "815000",
    "end": "820120"
  },
  {
    "text": "actual number of inputs that has been erated this means that if an input",
    "start": "820120",
    "end": "825320"
  },
  {
    "text": "promise course only reject during the execution of a promise any function by",
    "start": "825320",
    "end": "830519"
  },
  {
    "text": "we the newly created arrrow array will be one size larger than the actual",
    "start": "830519",
    "end": "835800"
  },
  {
    "text": "number of the input promises and the extra empty spot holds the initial",
    "start": "835800",
    "end": "842560"
  },
  {
    "text": "Sentinel value the whole this enables us to extract the whole value from this",
    "start": "842560",
    "end": "849160"
  },
  {
    "text": "extra space for some sequence varability exploitation exploiting theole for",
    "start": "849160",
    "end": "856639"
  },
  {
    "text": "remote code execution is not uncommon several wild zero viability take",
    "start": "856639",
    "end": "862240"
  },
  {
    "text": "advantage of the whole for their exploits so how can we achieve renderer",
    "start": "862240",
    "end": "868199"
  },
  {
    "text": "RC from the obtained the whole value this BR us to the structure of for JS",
    "start": "868199",
    "end": "874920"
  },
  {
    "text": "map let's dive deeper into how JS map handles the whole value when the map",
    "start": "874920",
    "end": "881199"
  },
  {
    "text": "delete function is called in the JS code to attempt the to attempt to delete a",
    "start": "881199",
    "end": "887040"
  },
  {
    "text": "key value pair from the map instance we at first search for the key to be",
    "start": "887040",
    "end": "892920"
  },
  {
    "text": "deleted on the map and marks the F elements key and value as the whole value then then it updates the number of",
    "start": "892920",
    "end": "900240"
  },
  {
    "text": "current elements and the number of deleted elements lastly it checks whether the number of remaining elements",
    "start": "900240",
    "end": "907399"
  },
  {
    "text": "is less than half of the number of hash brackets if so a memory strink",
    "start": "907399",
    "end": "914720"
  },
  {
    "text": "operation is performed so how can we take advantage of this feure the left slide shows parts",
    "start": "914720",
    "end": "923440"
  },
  {
    "text": "of exploit called snits that can construct a map object with a size of of",
    "start": "923440",
    "end": "928959"
  },
  {
    "text": "negative one the right side shows the data changes in the internal MTH",
    "start": "928959",
    "end": "934639"
  },
  {
    "text": "structure after each step of JavaScript code execution each element is composed",
    "start": "934639",
    "end": "941160"
  },
  {
    "text": "of three four B data representing the key the value and index pointing to the",
    "start": "941160",
    "end": "948959"
  },
  {
    "text": "next element in the element link list after calling map set one and one the",
    "start": "948959",
    "end": "954480"
  },
  {
    "text": "total number of elements will change from one to for Z to one due to the",
    "start": "954480",
    "end": "959880"
  },
  {
    "text": "increase of elements and and elements will also be placed in the space behind",
    "start": "959880",
    "end": "965440"
  },
  {
    "text": "for storing elements next we call the map set function try to store the whole",
    "start": "965440",
    "end": "972480"
  },
  {
    "text": "fun the whole value in the map and then we try to call the map delete whole to",
    "start": "972480",
    "end": "978839"
  },
  {
    "text": "delete a list whole value since the the whole value is indeed on the element",
    "start": "978839",
    "end": "983959"
  },
  {
    "text": "chain the number of elements in the M will decrease by one and the key value",
    "start": "983959",
    "end": "989279"
  },
  {
    "text": "pair of the deleted element will be set to to the whole values but not let the deleted element",
    "start": "989279",
    "end": "997079"
  },
  {
    "text": "will not be immediately removed from the map but will still exist in the map next",
    "start": "997079",
    "end": "1003800"
  },
  {
    "text": "we can try to delete the whole value again the operation executed internally",
    "start": "1003800",
    "end": "1009279"
  },
  {
    "text": "by the map is the same as above it will update the total number of element to",
    "start": "1009279",
    "end": "1015199"
  },
  {
    "text": "zero and trigger a shrink operation to completely delete the deleted elements",
    "start": "1015199",
    "end": "1020519"
  },
  {
    "text": "on the link list but what we need to do but what we need to be noted here is",
    "start": "1020519",
    "end": "1027079"
  },
  {
    "text": "that at this point the total number of elements is zero but the element pair",
    "start": "1027079",
    "end": "1033038"
  },
  {
    "text": "one and one still exist in the element array therefore we can continue to try",
    "start": "1033039",
    "end": "1038438"
  },
  {
    "text": "to delete one and one elements next which will change the total number of elements to negative one and Trigger the",
    "start": "1038439",
    "end": "1046160"
  },
  {
    "text": "elements shrink again to release the the whole key value pair set when deleting",
    "start": "1046160",
    "end": "1051480"
  },
  {
    "text": "the elements so how can we use AJ map with a size of conected what to achieve out of",
    "start": "1051480",
    "end": "1058320"
  },
  {
    "text": "B operations because JS access the index of elements where setting and new",
    "start": "1058320",
    "end": "1063799"
  },
  {
    "text": "elements is by adding the element account and the deleted account and at",
    "start": "1063799",
    "end": "1069000"
  },
  {
    "text": "the least time the result is negative one this makes that when we try to call",
    "start": "1069000",
    "end": "1075640"
  },
  {
    "text": "map set to set a new key value pair jmap will rise the data out of BS forward",
    "start": "1075640",
    "end": "1083880"
  },
  {
    "text": "this will allows that to modify the bucket count attribute at wheel when we",
    "start": "1083880",
    "end": "1089799"
  },
  {
    "text": "can control a backet count it becomes easier to write out of Bounce because the element based address when JS map",
    "start": "1089799",
    "end": "1096919"
  },
  {
    "text": "set a new element is obtained by adding the start address of the bucket array to",
    "start": "1096919",
    "end": "1103679"
  },
  {
    "text": "the bucket c as soon as we modify the bucket C to be larger enough the next",
    "start": "1103679",
    "end": "1110600"
  },
  {
    "text": "time we exud the map set function we can uh rise out of BS in the far distance to",
    "start": "1110600",
    "end": "1117760"
  },
  {
    "text": "the back modify the carefully arrange the GS R structure behind the GS MTH",
    "start": "1117760",
    "end": "1123559"
  },
  {
    "text": "structure so that the length of this JS array becomes super large which is",
    "start": "1123559",
    "end": "1128799"
  },
  {
    "text": "convenient for the subsequent construction of arbitrary address read R primitive and the then achieves the",
    "start": "1128799",
    "end": "1135799"
  },
  {
    "text": "purpose of remote code execution next we share our second remote code",
    "start": "1135799",
    "end": "1142280"
  },
  {
    "text": "exclusion modability this modability involves the new compiler M left being",
    "start": "1142280",
    "end": "1147520"
  },
  {
    "text": "implemented in wi in we8 as well as the classic garbage correction viability",
    "start": "1147520",
    "end": "1154520"
  },
  {
    "text": "pattern there are several well-known compilation mechanis in V8 including the",
    "start": "1154520",
    "end": "1161120"
  },
  {
    "text": "ignition interpreter the spark plug compiler and the widely know TR van",
    "start": "1161120",
    "end": "1166679"
  },
  {
    "text": "compiler M left is a newly implemented mid Tire compiler between spark plug and",
    "start": "1166679",
    "end": "1172360"
  },
  {
    "text": "tuban which aims to compile code as fast as possible while allowing for some",
    "start": "1172360",
    "end": "1178360"
  },
  {
    "text": "level of optimization in JavaScript many objects have short lifetimes and quickly become",
    "start": "1178360",
    "end": "1185080"
  },
  {
    "text": "garbag by dividing the Heap memory into the Young Generation and the older",
    "start": "1185080",
    "end": "1190640"
  },
  {
    "text": "generation it is possible to focus L collection process on the short life",
    "start": "1190640",
    "end": "1196080"
  },
  {
    "text": "objects in the Young Generation without globally scanning the entire Heap this",
    "start": "1196080",
    "end": "1202280"
  },
  {
    "text": "significantly improves the efficiency of garbage collection and is known as the generational garbage",
    "start": "1202280",
    "end": "1208919"
  },
  {
    "text": "collection the Young Generation is where newly created objects are stored its",
    "start": "1208919",
    "end": "1214679"
  },
  {
    "text": "Char characteristic is that the objects have a short lifespan and most objects",
    "start": "1214679",
    "end": "1220840"
  },
  {
    "text": "quickly become garbage to enhance efficiency we8 employs a garbage",
    "start": "1220840",
    "end": "1226360"
  },
  {
    "text": "collector called a scammer to re Rec memory occupied by object in the Young",
    "start": "1226360",
    "end": "1233000"
  },
  {
    "text": "Generation the scavenger utilize a copy algorithm and divid the Y generation",
    "start": "1233000",
    "end": "1239600"
  },
  {
    "text": "Heap into two space first space and the two space during the garbage collection",
    "start": "1239600",
    "end": "1245080"
  },
  {
    "text": "process the surviving object in the front space are copied to the two space and then the front space is cleared this",
    "start": "1245080",
    "end": "1254000"
  },
  {
    "text": "enables the rapid correction of a large amount of garage correct of a large",
    "start": "1254000",
    "end": "1259159"
  },
  {
    "text": "amount of garbage objects the old generation stored objects with longer",
    "start": "1259159",
    "end": "1264600"
  },
  {
    "text": "life times when an object survives multiple Young Generation garbage",
    "start": "1264600",
    "end": "1269720"
  },
  {
    "text": "Collections and remas life it is promoted to the older generation this",
    "start": "1269720",
    "end": "1275880"
  },
  {
    "text": "projects this objects have longer life spans and are less likely to become",
    "start": "1275880",
    "end": "1281200"
  },
  {
    "text": "garbage when discussing generational gar collection there is a specific scenario",
    "start": "1281200",
    "end": "1286880"
  },
  {
    "text": "that requires special tension it occurs when the garbage collector decides to",
    "start": "1286880",
    "end": "1292400"
  },
  {
    "text": "Bree content in the Young Generation and is an object within it that is refer",
    "start": "1292400",
    "end": "1298640"
  },
  {
    "text": "that is referred by an object in the old generation if we",
    "start": "1298640",
    "end": "1304400"
  },
  {
    "text": "attempt to free this object it would require traversing the entire older",
    "start": "1304400",
    "end": "1309559"
  },
  {
    "text": "generation resulting as significant performance overhead to address this issue generational garbage collection",
    "start": "1309559",
    "end": "1316559"
  },
  {
    "text": "introduce the concept of a remembered set each time an object is updated a",
    "start": "1316559",
    "end": "1323559"
  },
  {
    "text": "remember set is used to keep track of of references from old generation to the",
    "start": "1323559",
    "end": "1330200"
  },
  {
    "text": "Young Generation objects in other words the remember set actually stores pointers to the old generation objects",
    "start": "1330200",
    "end": "1338400"
  },
  {
    "text": "to correctly record the remember set G character introduce the concept of a r",
    "start": "1338400",
    "end": "1344919"
  },
  {
    "text": "Barrel the r Barrel is a set of special code thems that handle the updates",
    "start": "1344919",
    "end": "1350559"
  },
  {
    "text": "remember the set however if the execution of the right Barrel is omitted during the process of updating pointers",
    "start": "1350559",
    "end": "1358600"
  },
  {
    "text": "the garage character may not be able to find the reference from the old generation object to the Young",
    "start": "1358600",
    "end": "1364480"
  },
  {
    "text": "Generation object during round time this can lead to incorrect free of the object",
    "start": "1364480",
    "end": "1371440"
  },
  {
    "text": "and result in a use after free viability next we will share the",
    "start": "1371440",
    "end": "1377559"
  },
  {
    "text": "relevant information about theability we discovered the code snip above",
    "start": "1377559",
    "end": "1382600"
  },
  {
    "text": "represents part of the proof of concept code in the function f a parameter a is",
    "start": "1382600",
    "end": "1389240"
  },
  {
    "text": "defined and based on the value of a the variable f is assigned a specific value",
    "start": "1389240",
    "end": "1396480"
  },
  {
    "text": "then a bitwise or operation is the temp and the resulting value is set to the",
    "start": "1396480",
    "end": "1402840"
  },
  {
    "text": "propery of that parameter the me left graph is really is relatively easy to",
    "start": "1402840",
    "end": "1409880"
  },
  {
    "text": "understand the number at the beginning of each instruction represents its ID",
    "start": "1409880",
    "end": "1416080"
  },
  {
    "text": "and arrow and the letter X following the instruction indicates the output value",
    "start": "1416080",
    "end": "1421640"
  },
  {
    "text": "of letter instruction for example 13x represents the output value of the",
    "start": "1421640",
    "end": "1427840"
  },
  {
    "text": "instruction with 13 which is the which is a constant object during the process",
    "start": "1427840",
    "end": "1434279"
  },
  {
    "text": "of generating the ma graph from B code ma pass the bitwise or SMI op code and",
    "start": "1434279",
    "end": "1442960"
  },
  {
    "text": "generates a checked SMI tack node to ensure that the output value is a SMI",
    "start": "1442960",
    "end": "1449240"
  },
  {
    "text": "value which represents a small eer therefore when M continues to pass the",
    "start": "1449240",
    "end": "1456279"
  },
  {
    "text": "set name property op code the previously generated checked SMI and Tech node",
    "start": "1456279",
    "end": "1462919"
  },
  {
    "text": "restrict the value to be stored as an SMI therefore M generates a store Tech",
    "start": "1462919",
    "end": "1470080"
  },
  {
    "text": "field no right Barrel instruction which omits the right Barrel to speed out up",
    "start": "1470080",
    "end": "1475679"
  },
  {
    "text": "play execution when saving the value to a variable property once the initial M graph",
    "start": "1475679",
    "end": "1484200"
  },
  {
    "text": "construction is complete meab attempts to perform an optimization machism",
    "start": "1484200",
    "end": "1490000"
  },
  {
    "text": "called f attacking to be conservative during the initial graph construction",
    "start": "1490000",
    "end": "1495919"
  },
  {
    "text": "meala Ure that every f note is a tech F meaning that all inputs are required to",
    "start": "1495919",
    "end": "1503320"
  },
  {
    "text": "be Tech and the output value is also TCH however in certain case having F noes as",
    "start": "1503320",
    "end": "1510480"
  },
  {
    "text": "TCH of types may result in additional Tech and un Tech operation which can lead to uh performance overhead L maav",
    "start": "1510480",
    "end": "1519360"
  },
  {
    "text": "considers optimizing some tech by noes to un by noes based on their",
    "start": "1519360",
    "end": "1526320"
  },
  {
    "text": "inputs rain into the mag L graph related to the variability F Tech involves",
    "start": "1526320",
    "end": "1532640"
  },
  {
    "text": "handling the input and output noes of f notes for slides we can observe that the",
    "start": "1532640",
    "end": "1538840"
  },
  {
    "text": "F no under go changes before and after the F attacking operation it inputs",
    "start": "1538840",
    "end": "1544840"
  },
  {
    "text": "originally coming from Tech no such as constant and SMI constants are",
    "start": "1544840",
    "end": "1550559"
  },
  {
    "text": "transformed into an Tech node such as Thro constant additionally the type of F",
    "start": "1550559",
    "end": "1557399"
  },
  {
    "text": "Chang from T representing techy to F representing an uni with input and",
    "start": "1557399",
    "end": "1564760"
  },
  {
    "text": "output types as flod next F untag handles output related",
    "start": "1564760",
    "end": "1570880"
  },
  {
    "text": "node of f node in this scass the output of the F node is used by two node check",
    "start": "1570880",
    "end": "1578120"
  },
  {
    "text": "SMI on Tech and the store Tech field no R Barrel node say check the SMI and node",
    "start": "1578120",
    "end": "1584440"
  },
  {
    "text": "andex the input value the unex operation here becomes reductant after the",
    "start": "1584440",
    "end": "1590440"
  },
  {
    "text": "execution of f on taging therefore let check SMI and Tech no is updated to",
    "start": "1590440",
    "end": "1597120"
  },
  {
    "text": "check the trunet flo to in node that Tes and untag the value as",
    "start": "1597120",
    "end": "1604080"
  },
  {
    "text": "input however the other output using node of the F node has a slightly",
    "start": "1604080",
    "end": "1609720"
  },
  {
    "text": "difference we can observe that the stored Tech field no R Barrel requires a",
    "start": "1609720",
    "end": "1615640"
  },
  {
    "text": "text value as input therefore of tery and taking the store Tech field no R",
    "start": "1615640",
    "end": "1621520"
  },
  {
    "text": "Barrel node cannot directly use the output of the F node because the output",
    "start": "1621520",
    "end": "1627039"
  },
  {
    "text": "of the F node has now become an untack value to maintain compatibility between",
    "start": "1627039",
    "end": "1633320"
  },
  {
    "text": "input and output values of the no ml insert a tech operation between a fin",
    "start": "1633320",
    "end": "1639640"
  },
  {
    "text": "not and Stor Tech field nor right barel no let's T operation Ure that the value",
    "start": "1639640",
    "end": "1646640"
  },
  {
    "text": "after B Tex meches the input type expected by the stored Tech field R Bar",
    "start": "1646640",
    "end": "1654279"
  },
  {
    "text": "in gra L TCH operation corresponding to the fro box Lo mentioned in the",
    "start": "1654279",
    "end": "1663279"
  },
  {
    "text": "slide however this issue arises with the flo box node which creates a hi number",
    "start": "1664480",
    "end": "1671120"
  },
  {
    "text": "object to wrap the float value as a memory object this problem lies in the",
    "start": "1671120",
    "end": "1677760"
  },
  {
    "text": "fact that this memory object is saved into a variable property without a right",
    "start": "1677760",
    "end": "1682840"
  },
  {
    "text": "Barrel as a result the right Barrel is responsible for checking this hi number",
    "start": "1682840",
    "end": "1687880"
  },
  {
    "text": "object is missing during garbage collection the hi number object may be relocated to a new memory relocation uh",
    "start": "1687880",
    "end": "1695720"
  },
  {
    "text": "during due to the absess of the right Barrel the pointer pointing to list he",
    "start": "1695720",
    "end": "1701200"
  },
  {
    "text": "number object will not be updated during the G corlection phase resulting a d",
    "start": "1701200",
    "end": "1708559"
  },
  {
    "text": "poter this is the complete proof of concept code provided before triggering",
    "start": "1708559",
    "end": "1715000"
  },
  {
    "text": "the varability codee we create a GS object to in the old generation and",
    "start": "1715000",
    "end": "1721440"
  },
  {
    "text": "exploit the ability to store a point to a y generation object without a r Barrel",
    "start": "1721440",
    "end": "1728000"
  },
  {
    "text": "next by involving the garbage correction we move the Young Generation object to a",
    "start": "1728000",
    "end": "1733919"
  },
  {
    "text": "different memory location crossing the point on the a generation object to become a ding state state finally we use",
    "start": "1733919",
    "end": "1742519"
  },
  {
    "text": "list ding pointer to trigger a crash abilities that enable remote code",
    "start": "1742519",
    "end": "1749320"
  },
  {
    "text": "execution through right Barrel missing are not uncommon and there are several viabilities related to this Pattern Bar",
    "start": "1749320",
    "end": "1757200"
  },
  {
    "text": "missing viability allows us to create an object that holds a pointer to Y",
    "start": "1757200",
    "end": "1763159"
  },
  {
    "text": "generation memory and an object has not yet been recorded in the remember",
    "start": "1763159",
    "end": "1769559"
  },
  {
    "text": "set one of the classic M methods for exploiting such use of three viabilities",
    "start": "1769559",
    "end": "1775240"
  },
  {
    "text": "is hip spray here is the code snip of exploit",
    "start": "1775240",
    "end": "1780600"
  },
  {
    "text": "after creating the ding pointer we attempt to use a float array to occupy",
    "start": "1780600",
    "end": "1786399"
  },
  {
    "text": "the memory region pointed to by the dang pointer and perform memory layout on it",
    "start": "1786399",
    "end": "1793159"
  },
  {
    "text": "afterwards we can utilize list dang poter to fake AJ array with controlled",
    "start": "1793159",
    "end": "1798960"
  },
  {
    "text": "lens and controlled element pointers when carefully manipulating",
    "start": "1798960",
    "end": "1804360"
  },
  {
    "text": "Heap layouts it is crucial to understand how to use the garbage collection mechanism to manipulate the Heap space",
    "start": "1804360",
    "end": "1812279"
  },
  {
    "text": "efficiently Min GC moves object in the Y generation to different locations which",
    "start": "1812279",
    "end": "1819200"
  },
  {
    "text": "can free up the memory reg pointed to byang pointer allowing us to allocate an",
    "start": "1819200",
    "end": "1825480"
  },
  {
    "text": "array in that region measure DC performs a Max sweep garbage correction on the",
    "start": "1825480",
    "end": "1831480"
  },
  {
    "text": "entire h space to compact the object layout in memory on the right side is a",
    "start": "1831480",
    "end": "1838760"
  },
  {
    "text": "ill illustration of the of the effect when exting the exploit you can see that",
    "start": "1838760",
    "end": "1845919"
  },
  {
    "text": "before and after Gage correction the memory address pointed to by the dang",
    "start": "1845919",
    "end": "1852440"
  },
  {
    "text": "pointer is Remains the Same but the object type Chang changes from hi number",
    "start": "1852440",
    "end": "1858760"
  },
  {
    "text": "to JS array this way we can obtain a JS array object with controlled lens and",
    "start": "1858760",
    "end": "1864919"
  },
  {
    "text": "control element addresses through the dangr pointure enableing arbitr read and right",
    "start": "1864919",
    "end": "1871960"
  },
  {
    "text": "operations to arit address it in subsequent steps before performing",
    "start": "1871960",
    "end": "1878320"
  },
  {
    "text": "arbitrary read and write operations we need to know what address should be read for or recen through this involves the",
    "start": "1878320",
    "end": "1886480"
  },
  {
    "text": "construction of address of primitive which aims to Leal address of an",
    "start": "1886480",
    "end": "1891679"
  },
  {
    "text": "arbitary object the construction of this primitive is based on how we8 handles",
    "start": "1891679",
    "end": "1898279"
  },
  {
    "text": "larger objects when we create a very large GS object it is not stored in the",
    "start": "1898279",
    "end": "1904960"
  },
  {
    "text": "generational memory but in a dedicated memory region specifically for larg",
    "start": "1904960",
    "end": "1910639"
  },
  {
    "text": "objects interestingly the address of this memory region is fixed therefore we",
    "start": "1910639",
    "end": "1916080"
  },
  {
    "text": "can modify the element address of the faked JS array to list static address",
    "start": "1916080",
    "end": "1922039"
  },
  {
    "text": "and store the target address to be leaked in the large size array as a",
    "start": "1922039",
    "end": "1927200"
  },
  {
    "text": "result the larg size array will contain a pointer to the Target object and we",
    "start": "1927200",
    "end": "1932760"
  },
  {
    "text": "can delete we can directly read the original value which is the address of",
    "start": "1932760",
    "end": "1937919"
  },
  {
    "text": "the target object from the large array through the fix",
    "start": "1937919",
    "end": "1944320"
  },
  {
    "text": "jray once arit memory read right capabilities to leak arbitr object",
    "start": "1944320",
    "end": "1950120"
  },
  {
    "text": "addresses within a v box are achieved a for exploitation becomes possible in the",
    "start": "1950120",
    "end": "1956320"
  },
  {
    "text": "slides the structure of we8 s box is presented objects within the s box",
    "start": "1956320",
    "end": "1964720"
  },
  {
    "text": "are referred using fixed size of set R than raw pointers moreover this point",
    "start": "1964720",
    "end": "1972000"
  },
  {
    "text": "this object can be accessed where in the size and in an external point table",
    "start": "1972000",
    "end": "1977840"
  },
  {
    "text": "located outside the L box the external pointer Table stores pointers to",
    "start": "1977840",
    "end": "1983279"
  },
  {
    "text": "external object along with the type information to prevent type confusion",
    "start": "1983279",
    "end": "1988919"
  },
  {
    "text": "attacks it is is important to note that the set box feature in V8 is still under",
    "start": "1988919",
    "end": "1994960"
  },
  {
    "text": "development and not considered a security boundy as a result there exist",
    "start": "1994960",
    "end": "2001159"
  },
  {
    "text": "multiple bypass vulnerabilities that can be exploited to under to undermine l",
    "start": "2001159",
    "end": "2008240"
  },
  {
    "text": "security as the we8 s box is De under development not all pointers are",
    "start": "2008240",
    "end": "2014240"
  },
  {
    "text": "currently s booxed for example code object May contains unset booxed",
    "start": "2014240",
    "end": "2020720"
  },
  {
    "text": "pointers that are called during jet code execution or writing this pointers can",
    "start": "2020720",
    "end": "2027039"
  },
  {
    "text": "be a straightforward method to gain control of the rip and Achieve code",
    "start": "2027039",
    "end": "2032440"
  },
  {
    "text": "execution control by simply modifying the entry",
    "start": "2032440",
    "end": "2037960"
  },
  {
    "text": "address of j code it become possible to execute the Shell Code that is concealed",
    "start": "2037960",
    "end": "2043960"
  },
  {
    "text": "within the immediate values of git next we will demonstrate our",
    "start": "2043960",
    "end": "2050158"
  },
  {
    "text": "vulnerability exploitation demo okay first we try to compile the V8",
    "start": "2050159",
    "end": "2059480"
  },
  {
    "text": "and then simply run the",
    "start": "2059480",
    "end": "2063520"
  },
  {
    "text": "exploit after that a share pops up and we can",
    "start": "2065879",
    "end": "2071480"
  },
  {
    "text": "exclud arbitrary",
    "start": "2071480",
    "end": "2074598"
  },
  {
    "text": "commands in conclusion firstly there may have more change to hunt viabilities in",
    "start": "2077159",
    "end": "2085638"
  },
  {
    "text": "new implemented JavaScript standard uh secondly as a compiler that is still",
    "start": "2085639",
    "end": "2091919"
  },
  {
    "text": "under active development m still has a lot of codes that is not yet richly",
    "start": "2091919",
    "end": "2097800"
  },
  {
    "text": "tested and has many interesting features and the Box lastly understanding GC and",
    "start": "2097800",
    "end": "2104720"
  },
  {
    "text": "git mechanisms can help us to better handun AV abilities and write more",
    "start": "2104720",
    "end": "2110040"
  },
  {
    "text": "powerful exploits uh and that's all thank you for your",
    "start": "2110040",
    "end": "2116599"
  },
  {
    "text": "listening",
    "start": "2120000",
    "end": "2123000"
  }
]