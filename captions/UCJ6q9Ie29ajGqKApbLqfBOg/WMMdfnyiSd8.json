[
  {
    "text": "[Music]",
    "start": "1130",
    "end": "13599"
  },
  {
    "text": "hello everyone and today we are presenting safeguarding uefi ecosystem a firmware supply chain is card coded i'm",
    "start": "13599",
    "end": "21119"
  },
  {
    "text": "alex matrossov and i'm presenting today with alex tyrioskin and adam zabrowski we are offensive security research at",
    "start": "21119",
    "end": "27599"
  },
  {
    "text": "nvidia part of nvidia product security team i will be save time on uh discussing our videos and focus on our",
    "start": "27599",
    "end": "35280"
  },
  {
    "text": "today agenda actually i will be touch our motivation of this research also",
    "start": "35280",
    "end": "42239"
  },
  {
    "text": "my part is uh about complexity of ufi ecosystem and at the end i will be",
    "start": "42239",
    "end": "47360"
  },
  {
    "text": "discussing uh two bugs we discovered with alex tyroshkin at dell power h systems",
    "start": "47360",
    "end": "54160"
  },
  {
    "text": "alex will be discussing uh intel reference code vulnerabilities and print",
    "start": "54160",
    "end": "59359"
  },
  {
    "text": "utilization stage and you will be see the sweet demo where our payload it",
    "start": "59359",
    "end": "64559"
  },
  {
    "text": "survived from platform initialization phase through dxe smm and attacking operating system",
    "start": "64559",
    "end": "72320"
  },
  {
    "text": "level adam will be focused on mitigations or mostly lack of mitigations at system firmware runtime",
    "start": "72320",
    "end": "79600"
  },
  {
    "text": "and also we'll be discussing very interesting bug in edk 2 platform and of course",
    "start": "79600",
    "end": "85920"
  },
  {
    "text": "summarize our research today so what is the motivation of our research actually",
    "start": "85920",
    "end": "91439"
  },
  {
    "text": "uh we found all the bugs during our internal assessment and honestly",
    "start": "91439",
    "end": "96479"
  },
  {
    "text": "complexity of modern farmers it's just uh going uh this every release and numbers",
    "start": "96479",
    "end": "105119"
  },
  {
    "text": "of code it's just increasing actually if you think about uh about",
    "start": "105119",
    "end": "112640"
  },
  {
    "text": "about modern uh security solutions it's just mostly focusing on operating system",
    "start": "112640",
    "end": "118479"
  },
  {
    "text": "level and not much technologies exist to track the threats uh below the operating",
    "start": "118479",
    "end": "125119"
  },
  {
    "text": "system right so and it looks like an iceberg and most of the security solution just sees the tip of the",
    "start": "125119",
    "end": "131599"
  },
  {
    "text": "iceberg but this underwater layer which is very complex and dangerous it's",
    "start": "131599",
    "end": "137360"
  },
  {
    "text": "behind the rudders of security solutions and actually it was very interesting presentation done by dhs sisa uh in the",
    "start": "137360",
    "end": "145920"
  },
  {
    "text": "recent rsa conference where they've been discussing the complexity of ecosystem and a lot of other things but most",
    "start": "145920",
    "end": "152560"
  },
  {
    "text": "important thing it's need to be regulated and of course vendors need to",
    "start": "152560",
    "end": "157599"
  },
  {
    "text": "be adopt more uh mitigations and security practices of developing the firmware store",
    "start": "157599",
    "end": "164959"
  },
  {
    "text": "uh if you think about the mitigations actually microsoft and intel doing a good job on",
    "start": "165280",
    "end": "171280"
  },
  {
    "text": "it and but not all the vendors actually following the best practices and some of",
    "start": "171280",
    "end": "177599"
  },
  {
    "text": "the vendors actually claiming their use mitigations like on this screenshot discovered by assaf",
    "start": "177599",
    "end": "184959"
  },
  {
    "text": "but windows xml security mitigation table which is actually",
    "start": "184959",
    "end": "190400"
  },
  {
    "text": "filling up during runtime boot phase sometimes having the true value on the",
    "start": "190400",
    "end": "197920"
  },
  {
    "text": "mitigations but vendor doesn't use it so basically without enforcement and control that",
    "start": "197920",
    "end": "205920"
  },
  {
    "text": "doesn't work also remember good old days of attacking",
    "start": "205920",
    "end": "211519"
  },
  {
    "text": "bias uh alex and rafael in 2009 been presenting very interesting bug in",
    "start": "211519",
    "end": "218000"
  },
  {
    "text": "decompression during the platform initialization phase with a complementary unprotected metadata it's",
    "start": "218000",
    "end": "224959"
  },
  {
    "text": "been in in the bios image it's been laid code execution controllable code execution and the payload been survived",
    "start": "224959",
    "end": "232400"
  },
  {
    "text": "uh to the smm uh we found very not similar but we also targeted",
    "start": "232400",
    "end": "239840"
  },
  {
    "text": "platform and utilization stage on alex part and you can see very sweet demo as",
    "start": "239840",
    "end": "246400"
  },
  {
    "text": "we did in 2021 so it's a lot of year past but we still having these problems",
    "start": "246400",
    "end": "254720"
  },
  {
    "text": "let's talk about uefi ecosystem and complexity of it actually tremol",
    "start": "254720",
    "end": "260959"
  },
  {
    "text": "hudson did a very good job of describing this complexity of ecosystem during his knot",
    "start": "260959",
    "end": "269759"
  },
  {
    "text": "in 2019 but look on this picture where we have intel amd which is",
    "start": "269759",
    "end": "276240"
  },
  {
    "text": "basically designing the reference code and this reference code get adopted by",
    "start": "276240",
    "end": "282400"
  },
  {
    "text": "frameworks like phoenix inside an american megatrends and used by device manufacturers and honestly",
    "start": "282400",
    "end": "290479"
  },
  {
    "text": "it's not much code developed by uh device manufacturers usually just five",
    "start": "290479",
    "end": "296240"
  },
  {
    "text": "to seven percent of uh from all the code base and",
    "start": "296240",
    "end": "301680"
  },
  {
    "text": "the vulnerabilities which is can be found in intel or amd reference code if this code get used so it's basically the",
    "start": "301680",
    "end": "308800"
  },
  {
    "text": "impact mostly uh always on the cool ecosystem right uh same thing about",
    "start": "308800",
    "end": "314639"
  },
  {
    "text": "phoenix insight or a mega mega trends frameworks if the bug found in their code it's impacting their",
    "start": "314639",
    "end": "322240"
  },
  {
    "text": "full ecosystems and this is very dangerous but apple and actually microsoft with surfaces uh",
    "start": "322240",
    "end": "330400"
  },
  {
    "text": "pick the different ways they try to develop their firmwares and they just adopt an intel and amd reference code",
    "start": "330400",
    "end": "337120"
  },
  {
    "text": "which is good and apple switching from the x86 to arms which is very",
    "start": "337120",
    "end": "343199"
  },
  {
    "text": "interesting way of [Music] developing the firmwares and not cover",
    "start": "343199",
    "end": "348479"
  },
  {
    "text": "it in our today's presentation so um environment variables are accessed",
    "start": "348479",
    "end": "354240"
  },
  {
    "text": "during boot flow because we'll be discussing how it's can be dangerous uh",
    "start": "354240",
    "end": "359840"
  },
  {
    "text": "on on the following slides with the vulnerabilities so basically uh let's talk about environment persistent",
    "start": "359840",
    "end": "366800"
  },
  {
    "text": "storage right so this storage it is uh when the ram part exists on spy flash",
    "start": "366800",
    "end": "373360"
  },
  {
    "text": "and can be atta can be potentially accessed by the attacker",
    "start": "373360",
    "end": "378880"
  },
  {
    "text": "with the physical access right so this environment variables can be used by platform initialization phase and dixie",
    "start": "378880",
    "end": "385759"
  },
  {
    "text": "phase and actually if we have uh in the ram runtime variables it can be changed",
    "start": "385759",
    "end": "391919"
  },
  {
    "text": "during the boot but in vram persistent storage it's actually persist on the spy",
    "start": "391919",
    "end": "396960"
  },
  {
    "text": "flash and vulnerabilities lead by this data can be very dangerous because it can be",
    "start": "396960",
    "end": "403680"
  },
  {
    "text": "gain persistence for the attacker right so but also let's touch a bit our",
    "start": "403680",
    "end": "409199"
  },
  {
    "text": "attacker model so we are not talking about remote vulnerabilities it is local",
    "start": "409199",
    "end": "414479"
  },
  {
    "text": "attacker but um all these vulnerabilities can be combined with remote uh",
    "start": "414479",
    "end": "420880"
  },
  {
    "text": "chain uh of exploitation and attacker can gain privileged access to the",
    "start": "420880",
    "end": "426240"
  },
  {
    "text": "operating system triggers a vulnerability uh in system firmware and",
    "start": "426240",
    "end": "431360"
  },
  {
    "text": "gain access to the system management mode and impact uh virtual machines guests too and bare metal clouds",
    "start": "431360",
    "end": "438400"
  },
  {
    "text": "deployments so uh what is nvram persistent storage and",
    "start": "438400",
    "end": "445919"
  },
  {
    "text": "actually this scan shot from ufi tool uh it's demonstrating uh this region actually",
    "start": "445919",
    "end": "452800"
  },
  {
    "text": "doesn't cover it by boot guard that's mean uh secure boot doesn't protect",
    "start": "452800",
    "end": "460400"
  },
  {
    "text": "this region and also it can be abused by the attacker with the physical access",
    "start": "460880",
    "end": "466479"
  },
  {
    "text": "right so basically if the attacker can modify the storage and uh",
    "start": "466479",
    "end": "472240"
  },
  {
    "text": "th this data can lead code execution during the pi or dixie phase it can be very",
    "start": "472240",
    "end": "478879"
  },
  {
    "text": "dangerous vulnerability which is allows that tighter to gain persistence right so and arbitrary code execution the get",
    "start": "478879",
    "end": "485360"
  },
  {
    "text": "variable unfortunately not rare and it's uh",
    "start": "485360",
    "end": "490400"
  },
  {
    "text": "we will be discussing some of them today uh during the next uh part of our presentation and uh uh if",
    "start": "490400",
    "end": "498400"
  },
  {
    "text": "the attacker can modify environment persistent storage also it can lead some fileless uh dixie some mpa implant shell",
    "start": "498400",
    "end": "506160"
  },
  {
    "text": "code which is doesn't exist on the dc volume or pay volume it's just led by",
    "start": "506160",
    "end": "512560"
  },
  {
    "text": "nvram uh persistent storage shellcode or like uh some more format data in it",
    "start": "512560",
    "end": "521039"
  },
  {
    "text": "what is our methodology we heavily use either you during our reverse engineering as well as the efi code",
    "start": "521039",
    "end": "527760"
  },
  {
    "text": "explorer plugin and actually efi explorer plugin",
    "start": "527760",
    "end": "532880"
  },
  {
    "text": "can help you to navigate on efi code because it's",
    "start": "532880",
    "end": "538959"
  },
  {
    "text": "reconstruct a lot of data and actually this plugin we already presented on black hat",
    "start": "538959",
    "end": "544240"
  },
  {
    "text": "europe last year but most interesting thing we add functionality for finding uh the get",
    "start": "544240",
    "end": "551200"
  },
  {
    "text": "variable bugs during zpi and and dixie phase automatically of course",
    "start": "551200",
    "end": "557600"
  },
  {
    "text": "we don't guarantee hundred percent of the coverage but it's good to for validate your firmwares",
    "start": "557600",
    "end": "564560"
  },
  {
    "text": "let's discuss uh two sweet bugs we found on the dell power age systems one of them uh",
    "start": "564560",
    "end": "570880"
  },
  {
    "text": "it is a classical hip overflow and another it's classical stack overflow so",
    "start": "570880",
    "end": "577519"
  },
  {
    "text": "that's two the story of two buffer or flows and",
    "start": "577519",
    "end": "582800"
  },
  {
    "text": "first one is very interesting because uh a mistake in variable parsing leads a",
    "start": "582800",
    "end": "588320"
  },
  {
    "text": "hip overflow and as a result the code execution cannot allow the attacker to",
    "start": "588320",
    "end": "594480"
  },
  {
    "text": "execute controllable payload so basically we have ep variable",
    "start": "594480",
    "end": "600800"
  },
  {
    "text": "and nvram controlled by attacker and buffer for a race record share allocated",
    "start": "600800",
    "end": "607519"
  },
  {
    "text": "at the hill so basically during the execution uh this",
    "start": "607519",
    "end": "614079"
  },
  {
    "text": "cycle after the second try can lead the uh",
    "start": "614079",
    "end": "619760"
  },
  {
    "text": "hip corruption because if the length uh bigger than 96",
    "start": "619760",
    "end": "624920"
  },
  {
    "text": "964 bytes so this buck we found in the crystal reach and it's been part of a",
    "start": "624920",
    "end": "631440"
  },
  {
    "text": "dell advisory dc 2021-103",
    "start": "631440",
    "end": "636720"
  },
  {
    "text": "we found with alex tyroshkin it's already public but also interesting detail the payload is not measured by",
    "start": "636720",
    "end": "643200"
  },
  {
    "text": "tpm pcrs and remote health of the station will not detect the exploitation",
    "start": "643200",
    "end": "649519"
  },
  {
    "text": "so another block it's in a mirror request in the variable and this bug is",
    "start": "649519",
    "end": "655519"
  },
  {
    "text": "actually very interesting because we have a two advisories for it one on intel and because it's targeting intel",
    "start": "655519",
    "end": "662480"
  },
  {
    "text": "code and second it is on the dell and where",
    "start": "662480",
    "end": "667600"
  },
  {
    "text": "we found this during internal assessment on power h server so",
    "start": "667600",
    "end": "672839"
  },
  {
    "text": "basically uh this block uh it is a classical stack overflow because",
    "start": "672839",
    "end": "679839"
  },
  {
    "text": "subsequent memsat will override platform utilization stage with zeros during the bi phase and mirror request length",
    "start": "679839",
    "end": "687839"
  },
  {
    "text": "if it is bigger than five as you can see the data size is hardcore that",
    "start": "687839",
    "end": "693360"
  },
  {
    "text": "so the attacker can control the length override the buffer can modify the parts of the save at return address and",
    "start": "693360",
    "end": "699920"
  },
  {
    "text": "control execution flow which is may lead arbitrary code execution on the platform analyzation stage",
    "start": "699920",
    "end": "706880"
  },
  {
    "text": "and this block we found in uh encore pain platform initialization driver and model",
    "start": "706880",
    "end": "714079"
  },
  {
    "text": "and this exactly model actually uh",
    "start": "714079",
    "end": "719279"
  },
  {
    "text": "point us to different to in two different other blocks which will be alex discussing in the next part and",
    "start": "719279",
    "end": "727200"
  },
  {
    "text": "actually this payload also not measured by tpm pcrs and the mod health",
    "start": "727200",
    "end": "732320"
  },
  {
    "text": "attestation will not detect this exploitation but microsoft did very good job with windows",
    "start": "732320",
    "end": "739279"
  },
  {
    "text": "11 to push the industry of used tpm and of course it's actually very good",
    "start": "739279",
    "end": "744800"
  },
  {
    "text": "initiative to increase the assurance for secure boot and drtm",
    "start": "744800",
    "end": "751200"
  },
  {
    "text": "wood flows okay i will be passing uh the stage to the alex and he will be discussing very",
    "start": "751200",
    "end": "758160"
  },
  {
    "text": "interesting blocks and intel reference code thanks alex now",
    "start": "758160",
    "end": "763600"
  },
  {
    "text": "let's talk about bi initialization phase which is pre fine initialization phase",
    "start": "763600",
    "end": "769360"
  },
  {
    "text": "and the way it accesses and handles environment variables of course pi code heavily relies on and",
    "start": "769360",
    "end": "775120"
  },
  {
    "text": "gram variables because the all the configuration data for bios is stored there",
    "start": "775120",
    "end": "781279"
  },
  {
    "text": "and this is why and efi variables are good attack surface for pi code as well",
    "start": "781279",
    "end": "788320"
  },
  {
    "text": "the way these variables are read from the nvram is similar to dxe phase",
    "start": "788320",
    "end": "794079"
  },
  {
    "text": "there is an interface for that which is called get variable and the prototype is",
    "start": "794079",
    "end": "799200"
  },
  {
    "text": "very similar to get variable code for dxc code",
    "start": "799200",
    "end": "804399"
  },
  {
    "text": "so the same mistakes can be made for pi code as the s4 dxc code for example",
    "start": "804399",
    "end": "812000"
  },
  {
    "text": "let's see at this code which runs in encore initpay module",
    "start": "812000",
    "end": "817680"
  },
  {
    "text": "for bi phase it runs on gruntly and pearly systems",
    "start": "817680",
    "end": "823040"
  },
  {
    "text": "so let's see what is wrong here so first of all get variable call",
    "start": "823040",
    "end": "830079"
  },
  {
    "text": "return status so it may fail but there is no status check in this code so for example the code may return",
    "start": "830079",
    "end": "836639"
  },
  {
    "text": "status buffer too small and that would",
    "start": "836639",
    "end": "842399"
  },
  {
    "text": "that happens if the data size provided to the get variable uh",
    "start": "842399",
    "end": "848480"
  },
  {
    "text": "is not enough to contain all the data which is read from nvram",
    "start": "848480",
    "end": "853680"
  },
  {
    "text": "so in this case git variable fails and data size will return the actual",
    "start": "853680",
    "end": "860399"
  },
  {
    "text": "size of the variable that is going to be read but anyways the code continues and",
    "start": "860399",
    "end": "866720"
  },
  {
    "text": "allocates this number of bytes which can be large up to the size of nvram for example and",
    "start": "866720",
    "end": "872639"
  },
  {
    "text": "allocates a pool of that size again there is no check if this allocate pool succeeds or not",
    "start": "872639",
    "end": "878880"
  },
  {
    "text": "so it may fail and return zero but after that mem copy operation will continue and",
    "start": "878880",
    "end": "885440"
  },
  {
    "text": "just copy the some stacked data to this new freshly allocated buffer",
    "start": "885440",
    "end": "891360"
  },
  {
    "text": "so when you see code like this that means that [Music] the",
    "start": "891360",
    "end": "897040"
  },
  {
    "text": "developer may may have made some more mistakes",
    "start": "897040",
    "end": "902320"
  },
  {
    "text": "and let's see what comes next so continuing with the same encore",
    "start": "902320",
    "end": "908240"
  },
  {
    "text": "module and the same currently in pearly systems we will see that",
    "start": "908240",
    "end": "913839"
  },
  {
    "text": "there are multiple problems uh besides the one that that we talked about",
    "start": "913839",
    "end": "919199"
  },
  {
    "text": "for example it's very it's very dangerous to call get variable code in a api in a loop because if you don't set",
    "start": "919199",
    "end": "926560"
  },
  {
    "text": "data size uh immediately before get variable it may reuse the old very",
    "start": "926560",
    "end": "933120"
  },
  {
    "text": "old value from the previous get variable call and which this may be controlled by attacker",
    "start": "933120",
    "end": "941600"
  },
  {
    "text": "so this code shown in the picture uh it reads a chain of e5 variables",
    "start": "941600",
    "end": "948160"
  },
  {
    "text": "so that each next variable contains the name of the next variable in the chain in the",
    "start": "948160",
    "end": "954639"
  },
  {
    "text": "beginning of the data so this code parses this chain",
    "start": "954639",
    "end": "961199"
  },
  {
    "text": "but it does not set data size value to immediately before running get variable",
    "start": "961199",
    "end": "967920"
  },
  {
    "text": "api so data size on the second iteration of the loop may",
    "start": "967920",
    "end": "973440"
  },
  {
    "text": "be large and controlled by attacker actually and next time get variable executes",
    "start": "973440",
    "end": "981519"
  },
  {
    "text": "this api will assume that the past buffer which is next chunk name and data",
    "start": "981519",
    "end": "988320"
  },
  {
    "text": "in the slide the size of this buffer is large",
    "start": "988320",
    "end": "994160"
  },
  {
    "text": "and it actually may be set here that it is larger than the its",
    "start": "994160",
    "end": "1001279"
  },
  {
    "text": "actual size on the stack because again data size is controlled by an attacker",
    "start": "1001279",
    "end": "1006720"
  },
  {
    "text": "and this api will just overwrite the stack",
    "start": "1006720",
    "end": "1013040"
  },
  {
    "text": "uh because chunk name buffer is allocated on stack",
    "start": "1013040",
    "end": "1019600"
  },
  {
    "text": "and [Music] there you have it this is a stack buffer overflow",
    "start": "1019600",
    "end": "1025438"
  },
  {
    "text": "so there is no aslr or cookies in the bi code and",
    "start": "1025439",
    "end": "1030640"
  },
  {
    "text": "it's just very easy to exploit this kind of vulnerability here",
    "start": "1030640",
    "end": "1036240"
  },
  {
    "text": "so but what is interesting is that we don't even need to exploit",
    "start": "1036880",
    "end": "1042640"
  },
  {
    "text": "this vulnerability that we found just now in this pi code",
    "start": "1042640",
    "end": "1049039"
  },
  {
    "text": "because there is a feature that that is implemented in this code",
    "start": "1049039",
    "end": "1054559"
  },
  {
    "text": "that actually is designed to run arbitrary unsigned code",
    "start": "1054559",
    "end": "1059679"
  },
  {
    "text": "read from these efi variables let's see how it is",
    "start": "1059679",
    "end": "1064840"
  },
  {
    "text": "implemented and yes this is reference code from intel for pearly and gruntley",
    "start": "1064840",
    "end": "1069919"
  },
  {
    "text": "systems so this is the snippet of the code that",
    "start": "1069919",
    "end": "1077919"
  },
  {
    "text": "reads this chain of variables starting from variable tool h and builds a contiguous",
    "start": "1077919",
    "end": "1086000"
  },
  {
    "text": "32-bit portable executable image so here this is the ev law tool is a",
    "start": "1086000",
    "end": "1092960"
  },
  {
    "text": "function that parses this chain of variables red directory from nvram and just reads",
    "start": "1092960",
    "end": "1100000"
  },
  {
    "text": "the data from there builds a buffer fixes relocation and executes its",
    "start": "1100000",
    "end": "1107200"
  },
  {
    "text": "entry point entry point for a portable executable module so",
    "start": "1107200",
    "end": "1112320"
  },
  {
    "text": "as you see here there is no uh extension of any pcrs and tpm so",
    "start": "1112320",
    "end": "1118480"
  },
  {
    "text": "there is no validation of any signature it's just some unsigned code that is loaded from",
    "start": "1118480",
    "end": "1124240"
  },
  {
    "text": "efi variables and executed so of course remote attestation also will not detect this exploitation",
    "start": "1124240",
    "end": "1131200"
  },
  {
    "text": "because again pcr is not not extended to this code",
    "start": "1131200",
    "end": "1137120"
  },
  {
    "text": "so you may think what is the purpose of this feature",
    "start": "1137120",
    "end": "1143280"
  },
  {
    "text": "this was actually intended for manufacturing debugging or testing purposes",
    "start": "1143280",
    "end": "1149120"
  },
  {
    "text": "and there is an intel guidance for this feature um",
    "start": "1149120",
    "end": "1155679"
  },
  {
    "text": "which which they tell to ibvs to that this feature is not supposed to be enabled on uh",
    "start": "1155679",
    "end": "1162640"
  },
  {
    "text": "if physical presence has not been established so bios vendors are supposed",
    "start": "1162640",
    "end": "1167919"
  },
  {
    "text": "to implement this code that would check if if there is a physical presence at the",
    "start": "1167919",
    "end": "1174960"
  },
  {
    "text": "actual box before launching this unsigned code",
    "start": "1174960",
    "end": "1180000"
  },
  {
    "text": "but um not many oems obviously know about",
    "start": "1180000",
    "end": "1185919"
  },
  {
    "text": "that this feature exists and",
    "start": "1185919",
    "end": "1190000"
  },
  {
    "text": "it may be enabled anyways so if this feature actually is not used by",
    "start": "1191280",
    "end": "1197440"
  },
  {
    "text": "oems it should be disabled that was the guideline guidelines from intel",
    "start": "1197440",
    "end": "1203039"
  },
  {
    "text": "but this is what implementation looks like in their intel reference code so they",
    "start": "1203039",
    "end": "1208720"
  },
  {
    "text": "intel left this function for the establishing physical presence as an example to ibvs how how",
    "start": "1208720",
    "end": "1216960"
  },
  {
    "text": "they can implement it and this is just the ballon function that returns true",
    "start": "1216960",
    "end": "1222080"
  },
  {
    "text": "all the time so there is no any checks ibvs should implement these checks but again this",
    "start": "1222080",
    "end": "1229600"
  },
  {
    "text": "is an example from reference code and it returns true",
    "start": "1229600",
    "end": "1235360"
  },
  {
    "text": "no matter is there any presence or not",
    "start": "1235360",
    "end": "1241360"
  },
  {
    "text": "so uh not all bias vendors are oblivious to guidelines and",
    "start": "1241600",
    "end": "1247440"
  },
  {
    "text": "for example dell fixed this vulnerability in this in their own",
    "start": "1247440",
    "end": "1252720"
  },
  {
    "text": "code and just remove the setup knob feature so that",
    "start": "1252720",
    "end": "1258320"
  },
  {
    "text": "it this feature could not be enabled and the code just could not be reached because",
    "start": "1258320",
    "end": "1264880"
  },
  {
    "text": "there is no status node setup node that controls this feature",
    "start": "1264880",
    "end": "1272480"
  },
  {
    "text": "but there are many other vendors that ignored the guidelines and",
    "start": "1272480",
    "end": "1278559"
  },
  {
    "text": "reused the original reference implementation code",
    "start": "1278559",
    "end": "1283679"
  },
  {
    "text": "without any introducing any changes to it so",
    "start": "1283679",
    "end": "1290440"
  },
  {
    "text": "it's clear that uh intel should have put a return files in",
    "start": "1291280",
    "end": "1296320"
  },
  {
    "text": "this default implementation so that this this implementation could be reused by",
    "start": "1296320",
    "end": "1302240"
  },
  {
    "text": "every vendors but instead they returned true so this code that reads the",
    "start": "1302240",
    "end": "1308960"
  },
  {
    "text": "unsigned data and executes it as a code is available to",
    "start": "1308960",
    "end": "1314000"
  },
  {
    "text": "any of actually any state of the machine whether physical presence is established",
    "start": "1314000",
    "end": "1319440"
  },
  {
    "text": "or not so",
    "start": "1319440",
    "end": "1325280"
  },
  {
    "text": "yeah again reference implementation can be actually de facto implementations",
    "start": "1325280",
    "end": "1330480"
  },
  {
    "text": "uh so this is why proper care should be taken and",
    "start": "1330480",
    "end": "1335679"
  },
  {
    "text": "the defaults should be very secure otherwise",
    "start": "1335679",
    "end": "1342240"
  },
  {
    "text": "the code may be reused without even taking care about what it is in this code",
    "start": "1342240",
    "end": "1350880"
  },
  {
    "text": "this is the official intel's response that was provided to us so they uh they say that uh",
    "start": "1350880",
    "end": "1358240"
  },
  {
    "text": "bssa the this is the name of the feature uh is the design for manufacturing",
    "start": "1358240",
    "end": "1364559"
  },
  {
    "text": "feature and uh is it is only intended to be used in manufacturing lines",
    "start": "1364559",
    "end": "1370400"
  },
  {
    "text": "so intel has provided the guidelines to",
    "start": "1370400",
    "end": "1376720"
  },
  {
    "text": "ibvs uh above this feature but again not every vendor follow the guidelines",
    "start": "1376720",
    "end": "1384960"
  },
  {
    "text": "uh let's look up the let's look up the details about this feature",
    "start": "1385280",
    "end": "1390400"
  },
  {
    "text": "for example how can you get the name of this picture because",
    "start": "1390400",
    "end": "1395520"
  },
  {
    "text": "there is no reference to the name of it in the code so there is a guid which is used to read",
    "start": "1395520",
    "end": "1403440"
  },
  {
    "text": "the nvram variables that contain this code in efi variables so when you google this",
    "start": "1403440",
    "end": "1410640"
  },
  {
    "text": "geo id you get a link to this edk2 discussion page so you can know the",
    "start": "1410640",
    "end": "1418799"
  },
  {
    "text": "guid name from that page and when you continue",
    "start": "1418799",
    "end": "1425120"
  },
  {
    "text": "investigation you can find that certain details to this feature is called system",
    "start": "1425120",
    "end": "1432000"
  },
  {
    "text": "agent that's probably the sa the first two letters from this feature",
    "start": "1432000",
    "end": "1438960"
  },
  {
    "text": "name and this is how the payload is probably called",
    "start": "1438960",
    "end": "1445360"
  },
  {
    "text": "when you dig the details a bit more you you can find the references to bssa feature",
    "start": "1445360",
    "end": "1453360"
  },
  {
    "text": "all over the place for example this is a screenshot which can be found on the internet a screenshot of some",
    "start": "1453360",
    "end": "1459760"
  },
  {
    "text": "bios settings and you see that there some biosis implement this",
    "start": "1459760",
    "end": "1465360"
  },
  {
    "text": "knob for disabling or enable this feature which can be manipulated by an attacker",
    "start": "1465360",
    "end": "1471360"
  },
  {
    "text": "also but what is interesting here is the timestamp on the top and you see that this feature",
    "start": "1471360",
    "end": "1478240"
  },
  {
    "text": "was available since at least 2016. and",
    "start": "1478240",
    "end": "1483279"
  },
  {
    "text": "there are certain implementation details that can that you can also find on the internet for",
    "start": "1483279",
    "end": "1489679"
  },
  {
    "text": "example the number of postcode which is related to this feature which",
    "start": "1489679",
    "end": "1494880"
  },
  {
    "text": "is also used in the code this is a",
    "start": "1494880",
    "end": "1502080"
  },
  {
    "text": "let's uh let's discuss uh a bit the payload that you can implement",
    "start": "1502080",
    "end": "1507200"
  },
  {
    "text": "and which can be run using this vulnerability so you get the execution in pei phase so what can you do",
    "start": "1507200",
    "end": "1514720"
  },
  {
    "text": "you must survive the transition between pi and dx phase which is a transition between 32-bit and 64-bit code and then",
    "start": "1514720",
    "end": "1522000"
  },
  {
    "text": "you will [Music] you will have to jump to smm mode",
    "start": "1522000",
    "end": "1527440"
  },
  {
    "text": "and you can do this by hooking certain um apis from dxe core for example you can",
    "start": "1527440",
    "end": "1533360"
  },
  {
    "text": "jump from pei to dxe using hooks for dxe core locate protocol then you",
    "start": "1533360",
    "end": "1538799"
  },
  {
    "text": "can [Music] wait for smm core to be loaded and then",
    "start": "1538799",
    "end": "1545760"
  },
  {
    "text": "uh hook smm locate protocol there and just install software so my handler",
    "start": "1545760",
    "end": "1551840"
  },
  {
    "text": "at the end so this is how you can gain this",
    "start": "1551840",
    "end": "1558480"
  },
  {
    "text": "execution in smm code when the system is already booted",
    "start": "1558480",
    "end": "1565840"
  },
  {
    "text": "let me show you the demo of the real attack that we implemented",
    "start": "1566240",
    "end": "1571600"
  },
  {
    "text": "this is an output of our payload you see here that it survived the transition",
    "start": "1571600",
    "end": "1577200"
  },
  {
    "text": "between pei and dxe then it",
    "start": "1577200",
    "end": "1582720"
  },
  {
    "text": "hooked smm locate protocol function and the survived transition between dxe",
    "start": "1582720",
    "end": "1588880"
  },
  {
    "text": "exit boot services and operating system load and then it",
    "start": "1588880",
    "end": "1594080"
  },
  {
    "text": "establishes its software smi hook",
    "start": "1594080",
    "end": "1600240"
  },
  {
    "text": "and on each software smi that it catches it scans the memory for",
    "start": "1600240",
    "end": "1605840"
  },
  {
    "text": "let's say secrets for example keys",
    "start": "1605840",
    "end": "1611799"
  },
  {
    "text": "and uh this is how you can uh scan the memory you just",
    "start": "1613360",
    "end": "1619200"
  },
  {
    "text": "on unleashes mi you just scan a certain portion of the memory",
    "start": "1619200",
    "end": "1625360"
  },
  {
    "text": "and and just to iterate through physical memory",
    "start": "1625360",
    "end": "1630960"
  },
  {
    "text": "and for example here it you can see that the code located some private key in the memory",
    "start": "1630960",
    "end": "1639880"
  },
  {
    "text": "then it's up to the code to to actually exfoliate this data",
    "start": "1641840",
    "end": "1649600"
  },
  {
    "text": "okay i pass the control to adam who will talk about safeguarding a5 ecosystem thank you",
    "start": "1651600",
    "end": "1658240"
  },
  {
    "text": "thanks alex my name is adam and in this part of the presentation i would like to speak more about safeguarding ufi",
    "start": "1658240",
    "end": "1664320"
  },
  {
    "text": "ecosystem however before we moved there i would want to briefly talk about fe development kit known as",
    "start": "1664320",
    "end": "1671279"
  },
  {
    "text": "edk2 and by edk2 i mean i would like to spend some time and to describe one of the",
    "start": "1671279",
    "end": "1677520"
  },
  {
    "text": "vulnerability which we found during our research which has assigned cv number 2021 to a216",
    "start": "1677520",
    "end": "1684480"
  },
  {
    "text": "however what is edk2 mf development kit it's an open source implementation of the unified extensible firmware",
    "start": "1684480",
    "end": "1691039"
  },
  {
    "text": "interface known as ufi which is supported by the community and especially backed by the tiana core and",
    "start": "1691039",
    "end": "1696880"
  },
  {
    "text": "indicator is advertised as a modern feature rich cross-platform firmware development environment for the ufi and",
    "start": "1696880",
    "end": "1702320"
  },
  {
    "text": "ufi platform utilization a specification known as pi and what is cool eddie k2",
    "start": "1702320",
    "end": "1707600"
  },
  {
    "text": "supports tons of the platform including intel amd rm ampere high silicon billboard marvel raspberry pi risk v and",
    "start": "1707600",
    "end": "1714399"
  },
  {
    "text": "many more which is very interesting because it's open source and everybody can go take it recompile it and just run",
    "start": "1714399",
    "end": "1720640"
  },
  {
    "text": "under your own platform but there's cost for that because it runs on so many platforms support so",
    "start": "1720640",
    "end": "1726720"
  },
  {
    "text": "many interesting environment essentially any bug which could define them could affect",
    "start": "1726720",
    "end": "1732000"
  },
  {
    "text": "all of them which means that one bug to rule them all to room all of the platforms so it's very interesting and portable",
    "start": "1732000",
    "end": "1738880"
  },
  {
    "text": "but at the same time very interesting and dangerous from the attackers perspective because it's a very juicy portion",
    "start": "1738880",
    "end": "1744320"
  },
  {
    "text": "of the software which could be attacked by by the attacker and affects multiple platforms and an example of such",
    "start": "1744320",
    "end": "1750240"
  },
  {
    "text": "vulnerability could be exactly the one which we found during our research with the cve number 2021 2016",
    "start": "1750240",
    "end": "1757679"
  },
  {
    "text": "so that's the code of this vulnerability function where the vulnerability exists i know it doesn't look pretty and i will",
    "start": "1757679",
    "end": "1764320"
  },
  {
    "text": "try to make it much more digestible and work step by step what we can see here this",
    "start": "1764320",
    "end": "1770240"
  },
  {
    "text": "is called essentially in the portion of the ufi responsible for the s3",
    "start": "1770240",
    "end": "1775360"
  },
  {
    "text": "at first i mark on the green the performance variable which is read from the nvram and nvram could be modified by",
    "start": "1775360",
    "end": "1782320"
  },
  {
    "text": "the attacker during the run time and this variable is being read using",
    "start": "1782320",
    "end": "1787679"
  },
  {
    "text": "api get variable so it's fully controllable by the attacker and next a performance variable is extracted it's",
    "start": "1787679",
    "end": "1794799"
  },
  {
    "text": "cast as a structure and some value from the structure is extracted and is being assigned to the new temporary variable",
    "start": "1794799",
    "end": "1801440"
  },
  {
    "text": "marked here on the blue boot performance table next the boot performance table is used to calculate a pointer thermal",
    "start": "1801440",
    "end": "1807679"
  },
  {
    "text": "performance table pointer which is marked on the orange so essentially firmware performance table",
    "start": "1807679",
    "end": "1813279"
  },
  {
    "text": "pointer is also fully controllable by the attacker and on the right we see the while loop while loop runs until the",
    "start": "1813279",
    "end": "1820320"
  },
  {
    "text": "guid is not null so it can run multiple times and essentially what we can see in this loop on the right",
    "start": "1820320",
    "end": "1826559"
  },
  {
    "text": "we could have the arbitrary override vulnerability because female performance table pointer is never validated and is",
    "start": "1826559",
    "end": "1833520"
  },
  {
    "text": "fully controllable by the attacker and the copy mem try to store some data their firmware performance data",
    "start": "1833520",
    "end": "1839360"
  },
  {
    "text": "essentially and we can overwrite any portion of the memory which attacker fully controls and however the story",
    "start": "1839360",
    "end": "1845840"
  },
  {
    "text": "doesn't end here because next on the bottom of the loop we can see that firmware performance table pointer is",
    "start": "1845840",
    "end": "1851360"
  },
  {
    "text": "modified and some elements is added to the value of that so essentially",
    "start": "1851360",
    "end": "1856559"
  },
  {
    "text": "firmware performance table pointer can change w every time when the while loop runs",
    "start": "1856559",
    "end": "1861600"
  },
  {
    "text": "and on the bottom on the right portion of the slide we see that the blue middle variable which is also fully",
    "start": "1861600",
    "end": "1867200"
  },
  {
    "text": "controllable by the attacker but performance table is extracted some structure from there and",
    "start": "1867200",
    "end": "1874320"
  },
  {
    "text": "it's modified the volume of the length header using the exactly previously modified firmware performance table",
    "start": "1874320",
    "end": "1880480"
  },
  {
    "text": "pointer which is subtracted from the boot performance table essentially we can see here a semi controllable right or 12",
    "start": "1880480",
    "end": "1887760"
  },
  {
    "text": "vulnerability because boot performance table is fully controllable by the attacker and funeral performing table",
    "start": "1887760",
    "end": "1893600"
  },
  {
    "text": "pointer is also semi-controllable by the attacker so we have semi controllable right what were vulnerability which is",
    "start": "1893600",
    "end": "1899840"
  },
  {
    "text": "one of the most dangerous types of the bugs in the swot software which you can get",
    "start": "1899840",
    "end": "1905440"
  },
  {
    "text": "which is very very interesting from the tiger perspective and even more the exploit when you try to expect such",
    "start": "1905440",
    "end": "1912640"
  },
  {
    "text": "vulnerability the payload which you inject will not be measured by any tpm and none of the tpmps are will be",
    "start": "1912640",
    "end": "1918720"
  },
  {
    "text": "extended by this payload so essentially a remote health attack station will not detect the exploitation of that specific",
    "start": "1918720",
    "end": "1926240"
  },
  {
    "text": "bug which is very interesting and attracted from the attacker's perspective however",
    "start": "1926240",
    "end": "1932399"
  },
  {
    "text": "vulnerabilities which we discuss like during this research this presentation is one thing and another thing is how",
    "start": "1932399",
    "end": "1938640"
  },
  {
    "text": "easy to exploit them so let's briefly talk about mitigation hardening below deaths what the current state of the",
    "start": "1938640",
    "end": "1944960"
  },
  {
    "text": "mitigation and hardening are there any technologies who makes the cost of exploitation",
    "start": "1944960",
    "end": "1950080"
  },
  {
    "text": "higher is it even possible tax with such kind of vulnerabilities and i think this is the great slides which is taken from",
    "start": "1950080",
    "end": "1957600"
  },
  {
    "text": "the to this year's presentation from rsa 2021 made by the boyden thomas which",
    "start": "1957600",
    "end": "1963200"
  },
  {
    "text": "they essentially also focus on that problem and i think this slide is great and",
    "start": "1963200",
    "end": "1968880"
  },
  {
    "text": "that's why we caught it here so what you can read here that the popularity of the ufi and lack of various memory",
    "start": "1968880",
    "end": "1974640"
  },
  {
    "text": "protection enforcement attracts exploitation essentially there is a few bad news here like for one there is no",
    "start": "1974640",
    "end": "1981120"
  },
  {
    "text": "way to apply some of the mitigation in the below the os and the example could be slr it's kind of standard mitigation",
    "start": "1981120",
    "end": "1988320"
  },
  {
    "text": "in the os world since around 2005 however 2005 however there is no even",
    "start": "1988320",
    "end": "1994000"
  },
  {
    "text": "target date when such kind of mitigation could be adopted in the ufi ecosystem we don't even know if it's even possible in",
    "start": "1994000",
    "end": "2000799"
  },
  {
    "text": "the current states to adopt such mitigation in the ufi and because of that we can",
    "start": "2000799",
    "end": "2006399"
  },
  {
    "text": "see that there are some more criminal and advanced threat actors starting to exploit vulnerabilities below the s that",
    "start": "2006399",
    "end": "2012880"
  },
  {
    "text": "affects ufi ecosystem because it's just easier than do some kind of exploitability in the os and also as you",
    "start": "2012880",
    "end": "2019360"
  },
  {
    "text": "know one bug through them all uh it's also much more beneficial to exploit bugs um in the",
    "start": "2019360",
    "end": "2024960"
  },
  {
    "text": "ufi and there is also lack of various existing memory protection like non-executable memory from various",
    "start": "2024960",
    "end": "2031919"
  },
  {
    "text": "reasons which is pretty bad state so we went one step forward and starting to",
    "start": "2031919",
    "end": "2038399"
  },
  {
    "text": "read about um edk2 documentation what they have any kind of information about the",
    "start": "2038399",
    "end": "2044640"
  },
  {
    "text": "current mitigation technologies which could be enabled there and essentially we found this interesting table here",
    "start": "2044640",
    "end": "2050560"
  },
  {
    "text": "which essentially summarized various technologies which could be enabled or not enabled in the indicates here in the",
    "start": "2050560",
    "end": "2057520"
  },
  {
    "text": "blue we have all of the mitigation which could be enabled in the production so they are designed",
    "start": "2057520",
    "end": "2062960"
  },
  {
    "text": "to work in the production in the yellow we have this feature which are not uh targeted in the production image they",
    "start": "2062960",
    "end": "2069118"
  },
  {
    "text": "are mostly developed for the the back vs at the back feature and could be used in the development phase but they are not",
    "start": "2069119",
    "end": "2074480"
  },
  {
    "text": "recommended and we should never enable them in the production however some of the mitigation are not compatible to",
    "start": "2074480",
    "end": "2080398"
  },
  {
    "text": "each other for example smm static paging are not compatible with the hip guard",
    "start": "2080399",
    "end": "2085440"
  },
  {
    "text": "and also smm profile mitigation are not compatible with the static paging as",
    "start": "2085440",
    "end": "2091358"
  },
  {
    "text": "well so essentially when some of the mitigation exists we need to very carefully uh analyze which of the",
    "start": "2091359",
    "end": "2096720"
  },
  {
    "text": "mitigation could be enabled and are compatible to each other however uh what is the trick here that all of",
    "start": "2096720",
    "end": "2104160"
  },
  {
    "text": "this mitigation are not mandatory this is the description that they might be enabled but they are not mandatory to be",
    "start": "2104160",
    "end": "2110880"
  },
  {
    "text": "enabled and moreover if you go forward and starting to read about the various technologies mitigation technologies in",
    "start": "2110880",
    "end": "2117280"
  },
  {
    "text": "the documentation you find pretty interesting information for example when you read about the",
    "start": "2117280",
    "end": "2122400"
  },
  {
    "text": "stack canary mitigation it says it could be enabled however it is disabled by default so it's very unlikely that any",
    "start": "2122400",
    "end": "2129440"
  },
  {
    "text": "vendor will go and change the default behavior of the stack canary mitigation and most likely it's going to be left in",
    "start": "2129440",
    "end": "2135280"
  },
  {
    "text": "the default value which is disabled if you read about non-executable memory it also says it might be enabled to mark",
    "start": "2135280",
    "end": "2142240"
  },
  {
    "text": "some portion of the memory like stack to be non-executable however it might it's not mandatory and it's not like that by",
    "start": "2142240",
    "end": "2149680"
  },
  {
    "text": "default so by default the non-executable memory mitigation are not enabled slr",
    "start": "2149680",
    "end": "2155119"
  },
  {
    "text": "indicate2 does not support slr at all and some of the pretty easy bugs like null point and reference could be easily",
    "start": "2155119",
    "end": "2161760"
  },
  {
    "text": "mitigated however if you read about the documentation about that we re we read",
    "start": "2161760",
    "end": "2166880"
  },
  {
    "text": "that the current efi firmware always map the zero page so essentially this mitigation is not enabled as well",
    "start": "2166880",
    "end": "2173920"
  },
  {
    "text": "so the state of the current mitigation doesn't look great because all of them are not enabled by d4 or just does not",
    "start": "2173920",
    "end": "2180240"
  },
  {
    "text": "exist or are not supported however there is also additionally to that a limitation to this mitigation and if you",
    "start": "2180240",
    "end": "2187280"
  },
  {
    "text": "poke more about the documentation this would what you can find that for example the pre-efficient phase known as pay",
    "start": "2187280",
    "end": "2194160"
  },
  {
    "text": "does not support any kind of the mitigation based on the on the guard paging there is also interesting that they in",
    "start": "2194160",
    "end": "2200800"
  },
  {
    "text": "the same time in the same chapter they they write that there is no technical reason to not enable them so technically",
    "start": "2200800",
    "end": "2206800"
  },
  {
    "text": "they could be enabled like stack guard or hip guard or pointer detection however they do not support such",
    "start": "2206800",
    "end": "2213760"
  },
  {
    "text": "mitigation in the pay phase even there is no technical reason to not do so",
    "start": "2213760",
    "end": "2219119"
  },
  {
    "text": "also some of the mitigation uphip guard feature could increase the memory consumption",
    "start": "2219119",
    "end": "2224800"
  },
  {
    "text": "and may cause memory out of the resources especially in the smm mode and because of that many vendors just don't",
    "start": "2224800",
    "end": "2231839"
  },
  {
    "text": "want to have such problem and never enable mitigation like that because it's problematic for them even more these",
    "start": "2231839",
    "end": "2238320"
  },
  {
    "text": "vendors who try to enable some of the various mitigation technologies they they test and they see significant",
    "start": "2238320",
    "end": "2244480"
  },
  {
    "text": "performance downgrade this is what they observe and because of that they don't want to enable them and also some of the",
    "start": "2244480",
    "end": "2250720"
  },
  {
    "text": "mitigation are not compatible to each other example if you enable the pull key pull overhaul detection you",
    "start": "2250720",
    "end": "2257680"
  },
  {
    "text": "cannot enable at the same time under fall detection and overflow detection into one image you must choose or under",
    "start": "2257680",
    "end": "2263680"
  },
  {
    "text": "fall detection or overflow you cannot enable binding both so essentially not even that most of the mitigation are",
    "start": "2263680",
    "end": "2270079"
  },
  {
    "text": "disabled or not enabled and by default or not even available there there is a",
    "start": "2270079",
    "end": "2275280"
  },
  {
    "text": "lot of problems with them even if you do enable them like performance downgrade or some of them are not supported in for",
    "start": "2275280",
    "end": "2281040"
  },
  {
    "text": "example pay phase at all or they're not compatible to each other so it's not great essentially however we will still",
    "start": "2281040",
    "end": "2288000"
  },
  {
    "text": "encourage every vendor to carefully wait and analyze if specific mitigation",
    "start": "2288000",
    "end": "2293680"
  },
  {
    "text": "couldn't be enabled in their specific software stack and their image because",
    "start": "2293680",
    "end": "2298720"
  },
  {
    "text": "it significantly can improve the state of the security software and",
    "start": "2298720",
    "end": "2303839"
  },
  {
    "text": "can increase the cost of exploitability however for now in practice many of the mitigation and hardening",
    "start": "2303839",
    "end": "2310320"
  },
  {
    "text": "technologies are rarely or if ever unable at all so if you know that mitigation",
    "start": "2310320",
    "end": "2316640"
  },
  {
    "text": "technologies are not really enforced there what about the text detection technologies do you have any software um",
    "start": "2316640",
    "end": "2323359"
  },
  {
    "text": "stack like edi or xdr or advanced data protection software there is dramatically limited comparing to the",
    "start": "2323359",
    "end": "2330079"
  },
  {
    "text": "available solution to the operation system so it's not great however it's slowly and very slowly changing and",
    "start": "2330079",
    "end": "2336320"
  },
  {
    "text": "recently we have a new startup who trying exactly to address that cup who will brings the visibility of the",
    "start": "2336320",
    "end": "2342560"
  },
  {
    "text": "detection on in the ufi however are we completely lost and",
    "start": "2342560",
    "end": "2347680"
  },
  {
    "text": "because listening about all of these problems with the mitigations and and vulnerabilities which we found it",
    "start": "2347680",
    "end": "2352800"
  },
  {
    "text": "doesn't looks great and some of them hope gives us the new movements to bring memory safe language",
    "start": "2352800",
    "end": "2359280"
  },
  {
    "text": "to develop a critical code like rust to develop a ufi and a payload for example",
    "start": "2359280",
    "end": "2365280"
  },
  {
    "text": "and this is a very great movement and also it's worth to mention that nvidia together with other core they use",
    "start": "2365280",
    "end": "2372480"
  },
  {
    "text": "spark language to bring some of the benefits of memory safe language and type safe languages",
    "start": "2372480",
    "end": "2379359"
  },
  {
    "text": "into this firmware microcode as well and nvidia is rewriting menu of their microphone code in the spark language",
    "start": "2379359",
    "end": "2385760"
  },
  {
    "text": "and spark is kind of like a rust it's a memory safe language but it's also much more strict so you don't have also arithmetic overflow problems like that",
    "start": "2385760",
    "end": "2392880"
  },
  {
    "text": "and additionally they give you selfie certification for free so this is something which is very good and there",
    "start": "2392880",
    "end": "2399280"
  },
  {
    "text": "is some hope there and this is also a good time that we would like to warmly thanks multiple",
    "start": "2399280",
    "end": "2405359"
  },
  {
    "text": "entities who help us doing this research especially nvidia for supporting this research and assistant",
    "start": "2405359",
    "end": "2410720"
  },
  {
    "text": "uh in the coordinating this disclosure and also intel red hat and dell",
    "start": "2410720",
    "end": "2415760"
  },
  {
    "text": "who helps us to address multiple problems during this research and also discover at scale potential vulnerable",
    "start": "2415760",
    "end": "2422319"
  },
  {
    "text": "vendors so thank you very much and that's all do you have any questions which you can answer",
    "start": "2422319",
    "end": "2429200"
  },
  {
    "text": "thanks",
    "start": "2429200",
    "end": "2432000"
  }
]