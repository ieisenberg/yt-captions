[
  {
    "text": "hello everyone uh my name is Luca Tesco and I'm an independent vulnerability researcher from Venice Italy and I've",
    "start": "80",
    "end": "7000"
  },
  {
    "text": "been focusing on apples products and uh I'm very attracted by jailbreaking techniques and I'm the author of several",
    "start": "7000",
    "end": "14240"
  },
  {
    "text": "SN caral uh CV and exploits which is which I've been open sourcing um on giab",
    "start": "14240",
    "end": "21279"
  },
  {
    "text": "and Twitter um and the caral is a quite big Target",
    "start": "21279",
    "end": "29599"
  },
  {
    "text": "um for jailbreakers but in yosmite um Apple has started enforcing car caral",
    "start": "29599",
    "end": "37040"
  },
  {
    "text": "extension signatures uh but um in Al capan They also introduced uh system Integrity",
    "start": "37040",
    "end": "44160"
  },
  {
    "text": "protection which is a systemwide caral enforced sandbox profile that prevents",
    "start": "44160",
    "end": "49480"
  },
  {
    "text": "access to system resources and there are several ways to bypass this but um attacking the carel",
    "start": "49480",
    "end": "56440"
  },
  {
    "text": "is a viable way to disable it and uh byass the",
    "start": "56440",
    "end": "61559"
  },
  {
    "text": "sandbox so I'll be uh starting with um a very brief um introduction on the",
    "start": "61559",
    "end": "68920"
  },
  {
    "text": "caramel Hep and in particular um I will be talking about zoc which is um The",
    "start": "68920",
    "end": "75320"
  },
  {
    "text": "Zone allocator um most other allocators rely on zoc um",
    "start": "75320",
    "end": "81880"
  },
  {
    "text": "there are three functions which you can call uh zanet which can create a Zone um",
    "start": "81880",
    "end": "87040"
  },
  {
    "text": "and zoc which allocates an allocation of a Zone and the free which free some location",
    "start": "87040",
    "end": "92840"
  },
  {
    "text": "back into the free list um and each Zone has a last in first out",
    "start": "92840",
    "end": "99720"
  },
  {
    "text": "linked list uh containing free chunks and allocations in a zone are same sized",
    "start": "99720",
    "end": "105479"
  },
  {
    "text": "when you allocate uh from a Zone without any free chunks a available a new page is mapped in and the page is split in",
    "start": "105479",
    "end": "111280"
  },
  {
    "text": "chunks and the chunk is added to the free list um this allocator has been discussed very much by Stefan aser um so",
    "start": "111280",
    "end": "119280"
  },
  {
    "text": "if you want to detail more about it you can just read his papers but for exploitation what we care",
    "start": "119280",
    "end": "126079"
  },
  {
    "text": "about is that there is n line metadata for located chunks and there is free list metadata on free chunks um but the",
    "start": "126079",
    "end": "133319"
  },
  {
    "text": "free list metadata has been hardened uh since I have six uh so these days application",
    "start": "133319",
    "end": "140440"
  },
  {
    "text": "metadata is the most common Target uh and I said the only one because after",
    "start": "140440",
    "end": "145840"
  },
  {
    "text": "all you can do pretty much everything by corrupting application metadata",
    "start": "145840",
    "end": "151280"
  },
  {
    "text": "and different zones use different areas of memory so you can't uh do a hep",
    "start": "151280",
    "end": "156319"
  },
  {
    "text": "buffer overflow in a Zone and corrupt another Zone uh but this does not apply to large",
    "start": "156319",
    "end": "163319"
  },
  {
    "text": "allocations so if you have an location which is larger than the page size you can pretty easily uh get an adjacent",
    "start": "163319",
    "end": "170560"
  },
  {
    "text": "allocation from another Zone and then there is cak which is a",
    "start": "170560",
    "end": "176159"
  },
  {
    "text": "more Malik like interface to Zak uh which Reg several zones with the verious",
    "start": "176159",
    "end": "182080"
  },
  {
    "text": "sizes um the only difference between kak and Malo is that when you use free to",
    "start": "182080",
    "end": "188879"
  },
  {
    "text": "free a block you also have to pass in the size uh because as I said there is no uh inine metadata in allocated chunks",
    "start": "188879",
    "end": "196519"
  },
  {
    "text": "and so free has to pick the right Zone to free the allocation back",
    "start": "196519",
    "end": "202519"
  },
  {
    "text": "on um this is the output uh of the print cak which shows you uh all the zones",
    "start": "202519",
    "end": "211000"
  },
  {
    "text": "registered by cak uh this does not work in Al capan for some reason but just running the",
    "start": "211000",
    "end": "218120"
  },
  {
    "text": "print grap cak should work so I don't know why but it",
    "start": "218120",
    "end": "224560"
  },
  {
    "text": "is um for application metadata uh there are several targets the most common one",
    "start": "224560",
    "end": "231360"
  },
  {
    "text": "uh is VM map copy which has been introduced by TJ man and Mark D uh in",
    "start": "231360",
    "end": "238480"
  },
  {
    "text": "their I 6 sec presentation uh back uh like 3 years ago",
    "start": "238480",
    "end": "245760"
  },
  {
    "text": "and it's just a structure that is used to represent a copy of some data and if",
    "start": "245760",
    "end": "251200"
  },
  {
    "text": "this data is smaller than a page um the the the caral hip is used um many",
    "start": "251200",
    "end": "257799"
  },
  {
    "text": "jailbreaks have targeted this structure in the past um for various reasons uh the",
    "start": "257799",
    "end": "264919"
  },
  {
    "text": "biggest reason why this structure is very good is because you can control the size which is is pass to C when you",
    "start": "264919",
    "end": "271080"
  },
  {
    "text": "create it from userland uh and so you can just put it in any Zone and you can",
    "start": "271080",
    "end": "277120"
  },
  {
    "text": "do pretty much anything with it uh without being affected by sandboxing uh but just using Mac",
    "start": "277120",
    "end": "282360"
  },
  {
    "text": "messages uh by using out ofline data so this is the structure in uh before a",
    "start": "282360",
    "end": "289560"
  },
  {
    "text": "Capitan and as you can see uh there is a size um there is a pointer to the data",
    "start": "289560",
    "end": "296080"
  },
  {
    "text": "and there is also the C size which is used to free this structure um so if you want say you have",
    "start": "296080",
    "end": "304320"
  },
  {
    "text": "a hi buffer overflow you can just corrupt the size uh or corrupt the data",
    "start": "304320",
    "end": "309800"
  },
  {
    "text": "pointer to do arbitrary infx so here's uh the anatomy",
    "start": "309800",
    "end": "317440"
  },
  {
    "text": "of a pre capan caral exploit um tone which I've been uh working on and I've",
    "start": "317440",
    "end": "324600"
  },
  {
    "text": "released in August this year um it used to be zero day at Di and the core issue",
    "start": "324600",
    "end": "330880"
  },
  {
    "text": "was a type confusion in handling Mac Parts in an IIT",
    "start": "330880",
    "end": "336120"
  },
  {
    "text": "function uh I'll explain more about this later but first uh I have to explain uh",
    "start": "336120",
    "end": "342800"
  },
  {
    "text": "page zero page zero is essentially um the first page in another space on a ma",
    "start": "342800",
    "end": "348919"
  },
  {
    "text": "hope process and essentially it's used to trap all new pointer the references",
    "start": "348919",
    "end": "355600"
  },
  {
    "text": "um Linux does this as well uh I'm not sure about Windows but probably window Windows as",
    "start": "355600",
    "end": "360639"
  },
  {
    "text": "well uh and apple enforces this in kernel but not for 32bit binaries so if",
    "start": "360639",
    "end": "366560"
  },
  {
    "text": "you have a 32-bit binary you can just skip the page zero and you can allocate whatever you want uh at",
    "start": "366560",
    "end": "373120"
  },
  {
    "text": "null um this is important because as you will see uh iio Service open",
    "start": "373120",
    "end": "380560"
  },
  {
    "text": "extended uh accepts various arguments and these are converted from userland to",
    "start": "380560",
    "end": "386319"
  },
  {
    "text": "kland by essentially uh which is an automated inter interface",
    "start": "386319",
    "end": "392919"
  },
  {
    "text": "generator between a Mac client and a Mac server um when you pass uh arguments to",
    "start": "392919",
    "end": "401520"
  },
  {
    "text": "a function that travels Mig essentially Mig itself uh serializes",
    "start": "401520",
    "end": "408520"
  },
  {
    "text": "and un serializes all the arguments it pass in but um in this particular",
    "start": "408520",
    "end": "414440"
  },
  {
    "text": "function uh you can't see much but there is no check on the task you pass pass in",
    "start": "414440",
    "end": "421280"
  },
  {
    "text": "and so if you pass in a task which is not actually a task um it will pass it down as null to",
    "start": "421280",
    "end": "430680"
  },
  {
    "text": "the user client user clients are essentially uh a driver uh object which",
    "start": "430680",
    "end": "437400"
  },
  {
    "text": "can be used in userland uh code runs in kland but you can call every function",
    "start": "437400",
    "end": "443160"
  },
  {
    "text": "you want from userland and when you create one uh you essentially pass in",
    "start": "443160",
    "end": "449280"
  },
  {
    "text": "the task and um a particular user client which is the",
    "start": "449280",
    "end": "455240"
  },
  {
    "text": "dis image one uh uses this task structure to read uh a pointer and it",
    "start": "455240",
    "end": "461039"
  },
  {
    "text": "will uh do an or on the pointer which if you do the type confusion is read from",
    "start": "461039",
    "end": "468520"
  },
  {
    "text": "page zero and so we can essentially corrupt memory in kernal uh as we wish to",
    "start": "468520",
    "end": "476599"
  },
  {
    "text": "anything we want so first of all we need to locate something",
    "start": "476599",
    "end": "483479"
  },
  {
    "text": "and for this I use a holik to locate an object in a",
    "start": "483479",
    "end": "489720"
  },
  {
    "text": "c and but we need to locate a VM map copy uh to be able to do arbitrary",
    "start": "489720",
    "end": "496400"
  },
  {
    "text": "inflix and then we have to correct the VM map copy um from there we can derive",
    "start": "496400",
    "end": "502919"
  },
  {
    "text": "the ks L slide and from there we can just run drop in kernel so this is the",
    "start": "502919",
    "end": "510080"
  },
  {
    "text": "caramel Hep but it's fragmented so I locate uh",
    "start": "510080",
    "end": "515760"
  },
  {
    "text": "two objects uh leak the pointers they are not adjacent so I free the first one",
    "start": "515760",
    "end": "521760"
  },
  {
    "text": "and then allocate a VM map copy in and allocate a new object from this new",
    "start": "521760",
    "end": "527240"
  },
  {
    "text": "object uh we lick the pointer and we see it's not adjacent so we free the first",
    "start": "527240",
    "end": "532880"
  },
  {
    "text": "object and allocate a V map copy in as placeholder so we allocate another",
    "start": "532880",
    "end": "539959"
  },
  {
    "text": "object and leak again uh these two objects are Adent so we can just free",
    "start": "539959",
    "end": "545000"
  },
  {
    "text": "the first one allocate the VAP copy in and then we have this memory",
    "start": "545000",
    "end": "550200"
  },
  {
    "text": "layout and we know the pointers to both these structures so we use our memory",
    "start": "550200",
    "end": "557680"
  },
  {
    "text": "corruption primitive to do this essentially and once we do",
    "start": "557680",
    "end": "562959"
  },
  {
    "text": "this we can read past hip boundaries and have um read access to the V table pointer of uh plus object which points",
    "start": "562959",
    "end": "571399"
  },
  {
    "text": "to the carel data and carel data is lead by the ks slide and by just doing a",
    "start": "571399",
    "end": "578320"
  },
  {
    "text": "subtraction you can find the a random value and this is the result local",
    "start": "578320",
    "end": "585120"
  },
  {
    "text": "privileg escalation uh it can also be implemented in a sandbox escaping way",
    "start": "585120",
    "end": "591880"
  },
  {
    "text": "but yeah this was before L capan uh however in L capan the",
    "start": "591880",
    "end": "598720"
  },
  {
    "text": "structure has been changed a lot um essentially what they did was to remove",
    "start": "598720",
    "end": "605320"
  },
  {
    "text": "the size uh to free and remove the key data pointer uh so now we just have a",
    "start": "605320",
    "end": "611920"
  },
  {
    "text": "structure which contains um type and offset and size and we can't do much",
    "start": "611920",
    "end": "617800"
  },
  {
    "text": "with this because if you if you change the size uh past Heap allocation",
    "start": "617800",
    "end": "623440"
  },
  {
    "text": "boundaries you will cause a wrong free in the wrong Zone and it will corrupt the addent location",
    "start": "623440",
    "end": "631320"
  },
  {
    "text": "um and the pointer to the data has been removed this prevents us from Reading uh",
    "start": "631760",
    "end": "638880"
  },
  {
    "text": "a pointer to the adjacent vmap copy by putting two vmap copy uh one after the",
    "start": "638880",
    "end": "645000"
  },
  {
    "text": "other and you can't write into this pointer to Le arbitrary caral memory uh",
    "start": "645000",
    "end": "651040"
  },
  {
    "text": "for this you need new techniques but forent data we can just",
    "start": "651040",
    "end": "656760"
  },
  {
    "text": "corrupt and then rewrite the leak the data um so it it doesn't actually look",
    "start": "656760",
    "end": "664480"
  },
  {
    "text": "corrupted but the internal hip state is corrupted so you have to clean up later",
    "start": "664480",
    "end": "669959"
  },
  {
    "text": "and it's also not very reliable because it involves a relocation and if you get",
    "start": "669959",
    "end": "676200"
  },
  {
    "text": "SED out another task might create another location which falls into the place where you freed the wrong Zone and",
    "start": "676200",
    "end": "684800"
  },
  {
    "text": "that will crush the caramel very likely but we can do",
    "start": "684800",
    "end": "690639"
  },
  {
    "text": "this and since you can't read the data pointer of another structure like this",
    "start": "690639",
    "end": "696320"
  },
  {
    "text": "you have to find another structure um to an hip INF fik and the fre list is an",
    "start": "696320",
    "end": "701639"
  },
  {
    "text": "easy target so you can just allocate to add and V map copy structures free the",
    "start": "701639",
    "end": "708079"
  },
  {
    "text": "second and corrupt the first to increase size past Hep location boundaries by reading the first um VAP",
    "start": "708079",
    "end": "717160"
  },
  {
    "text": "copy out um you correct the memory but you also lick the the free chunk and by",
    "start": "717160",
    "end": "723200"
  },
  {
    "text": "licking the free chunk you can um allocate a new VM map copy with the free",
    "start": "723200",
    "end": "728480"
  },
  {
    "text": "Chunk in and the car won't crash if you do this but you will be able to know a",
    "start": "728480",
    "end": "735120"
  },
  {
    "text": "pointer to the next uh free allocation so if you create two new VM map copy",
    "start": "735120",
    "end": "740320"
  },
  {
    "text": "structures you will know the pointer to the second one you you've",
    "start": "740320",
    "end": "745360"
  },
  {
    "text": "created but a big issue with this is is that you can't do arbitrary memory in",
    "start": "745639",
    "end": "751320"
  },
  {
    "text": "fix you can't read say the colal text to find the gadgets for your up chain um",
    "start": "751320",
    "end": "758639"
  },
  {
    "text": "so you can use another object um in this case uh I used OS data which is an",
    "start": "758639",
    "end": "765320"
  },
  {
    "text": "object uh which is used by IIT uh implemented by libar and you can use IO",
    "start": "765320",
    "end": "772040"
  },
  {
    "text": "Service open extended um to create them at will from userland and Stefan hasser",
    "start": "772040",
    "end": "779199"
  },
  {
    "text": "had a very nice talk about this uh High Kel He magon it's a bit dated because",
    "start": "779199",
    "end": "785000"
  },
  {
    "text": "his techniques don't work anymore but uh it explains how lib Curr objects work",
    "start": "785000",
    "end": "790680"
  },
  {
    "text": "and that's very useful so you just have to allocate two addent M Copy structures",
    "start": "790680",
    "end": "796120"
  },
  {
    "text": "crap the first one size readout the data change the second structure size to 24",
    "start": "796120",
    "end": "802279"
  },
  {
    "text": "which is the difference between the size of vmf copy and data object in memory",
    "start": "802279",
    "end": "808040"
  },
  {
    "text": "write it back read the second VM copy out causing a r free into the C 48 Zone",
    "start": "808040",
    "end": "814040"
  },
  {
    "text": "which is the Zone where OS data leaves and now you have an no data overlapping a copies data and you can",
    "start": "814040",
    "end": "821360"
  },
  {
    "text": "read right to it in new zerland and the V table pointer leaks the ks",
    "start": "821360",
    "end": "826800"
  },
  {
    "text": "slide and the data pointer leaks a pointer to arbitrary user control data",
    "start": "826800",
    "end": "832519"
  },
  {
    "text": "so if you change the data pointer and set the capacity to a very high value so",
    "start": "832519",
    "end": "837800"
  },
  {
    "text": "when you free those data doesn't actually corrupt the data you've just read um you can just use IIT functions",
    "start": "837800",
    "end": "845440"
  },
  {
    "text": "to read out the OS data forly easily um here's the memory layout of two addent",
    "start": "845440",
    "end": "851680"
  },
  {
    "text": "VM map copies and then we have some Heap corruption and when we free the",
    "start": "851680",
    "end": "857639"
  },
  {
    "text": "corrupted structure this will happen and as you can see uh this two objects are",
    "start": "857639",
    "end": "864279"
  },
  {
    "text": "essentially overlapping in memory and so when you create a new VM map copy",
    "start": "864279",
    "end": "870199"
  },
  {
    "text": "uh you can't read much but okay when you create another vmap copy uh the data of",
    "start": "870199",
    "end": "875560"
  },
  {
    "text": "the VM map copy overlaps the data of the second one the header of the second one so you can just control um the size and",
    "start": "875560",
    "end": "883360"
  },
  {
    "text": "shrink it and when you free the second one uh it will be in a smaller Zone uh in the O",
    "start": "883360",
    "end": "891639"
  },
  {
    "text": "data zone so when you create another OS data this is what happens and you have read R access to pretty much everything",
    "start": "891639",
    "end": "899480"
  },
  {
    "text": "and you can also Drive the ks alert light because data is a C++ object and",
    "start": "899480",
    "end": "904519"
  },
  {
    "text": "so you can find out a v table pointer very easily okay this is something new uh",
    "start": "904519",
    "end": "911519"
  },
  {
    "text": "because for this we have to use addent allocations um but creating addent",
    "start": "911519",
    "end": "918519"
  },
  {
    "text": "allocations is not easy most attacks require them but uh",
    "start": "918519",
    "end": "925120"
  },
  {
    "text": "the best way right now is to try randomly but trying randomly uh you",
    "start": "925120",
    "end": "930639"
  },
  {
    "text": "introduce essentially um a probabilistic uh part of the exploit because you can",
    "start": "930639",
    "end": "937680"
  },
  {
    "text": "try to guess by picking a very high number of allocations to run out the freelist up in a new page which is then",
    "start": "937680",
    "end": "944440"
  },
  {
    "text": "deterministic but if you don't get it right you can run out of the page when",
    "start": "944440",
    "end": "950720"
  },
  {
    "text": "you do your hip overflow and that will crash the Kel so you have probabilistic explits um",
    "start": "950720",
    "end": "958440"
  },
  {
    "text": "but as I said the layout of newly mapped in pages is deterministic um but mapping",
    "start": "958440",
    "end": "965720"
  },
  {
    "text": "pages is expensive but is it expensive enough to detect it to detect it in newzland and the answer is yes if you",
    "start": "965720",
    "end": "974440"
  },
  {
    "text": "can see here um this is in cak 1024 um which has four allocations per",
    "start": "974440",
    "end": "980560"
  },
  {
    "text": "page and you can see that every four locations I create um the time it takes",
    "start": "980560",
    "end": "986240"
  },
  {
    "text": "to create the location essentially rockets and I use a hipping flick over",
    "start": "986240",
    "end": "993000"
  },
  {
    "text": "there so you can see that every time the time spikes a new page has been mapped",
    "start": "993000",
    "end": "999800"
  },
  {
    "text": "in and all subsequent allocations are Adent in",
    "start": "999800",
    "end": "1004800"
  },
  {
    "text": "memory so yes it is expensive enough to detect it in userland um a good Target to time is VM",
    "start": "1004839",
    "end": "1012000"
  },
  {
    "text": "map copy in which is the function which creates our VM map copy structure",
    "start": "1012000",
    "end": "1019880"
  },
  {
    "text": "so the general idea is to create a bunch of VM map copy structures uh V Mac",
    "start": "1019880",
    "end": "1025199"
  },
  {
    "text": "messages and then read them out so we allocate a lot of chunks put them in the",
    "start": "1025199",
    "end": "1031760"
  },
  {
    "text": "free list and then when you recreate those allocations um they will be straight from the free list so you don't",
    "start": "1031760",
    "end": "1037720"
  },
  {
    "text": "have to allocate any new page so if you keep an average that will represent an average of the time it takes for the",
    "start": "1037720",
    "end": "1044760"
  },
  {
    "text": "free list to returnal allocation not for a new page to be mapped in memory",
    "start": "1044760",
    "end": "1050360"
  },
  {
    "text": "um and so you just keep those allocated in and keep timing M Mac",
    "start": "1050360",
    "end": "1056320"
  },
  {
    "text": "messages and once in a while you will have a mac message which will take much more than normal to create um the VM map",
    "start": "1056320",
    "end": "1064039"
  },
  {
    "text": "copy structure and when this happens uh you have it's very likely that a new",
    "start": "1064039",
    "end": "1069799"
  },
  {
    "text": "page has been just mapped in and we already know the number of allocations which should have been added to the free",
    "start": "1069799",
    "end": "1077240"
  },
  {
    "text": "list as such we can just keep timing ma messages expecting a number which is",
    "start": "1077240",
    "end": "1083400"
  },
  {
    "text": "close to the average uh when a Time Spike uh is expected to",
    "start": "1083400",
    "end": "1088480"
  },
  {
    "text": "happen uh if it happens we have a full page of aent allocations if it doesn't",
    "start": "1088480",
    "end": "1093840"
  },
  {
    "text": "we have just failed and we can just retry uh you can do this uh for multiple",
    "start": "1093840",
    "end": "1100159"
  },
  {
    "text": "multiple Pages because if you know if you run out of a page you create a new page and if you create the same number",
    "start": "1100159",
    "end": "1106960"
  },
  {
    "text": "of locations uh the page will run out so you will allocate a new page you can do this over and over to have additional",
    "start": "1106960",
    "end": "1114440"
  },
  {
    "text": "relability on your exploit uh you can easily craft the Heap layout by poking holes in the allocated",
    "start": "1114440",
    "end": "1123559"
  },
  {
    "text": "page and you can just reallocate any object you wish and there is just one catch you",
    "start": "1123559",
    "end": "1129880"
  },
  {
    "text": "have to limit the number of allocations you create because if you create too manyy the caramel will crash but on",
    "start": "1129880",
    "end": "1136120"
  },
  {
    "text": "failure you can just F back to a probabilistic approach so this one hard relability of your xlite this can only",
    "start": "1136120",
    "end": "1142080"
  },
  {
    "text": "increase it and in some rare cases uh precis like H layout control is required to have any",
    "start": "1142080",
    "end": "1149440"
  },
  {
    "text": "form of relability an example is ioh families cve uh well this cve is an user free I",
    "start": "1149440",
    "end": "1158400"
  },
  {
    "text": "found which has been fixed in the latest version of el capan it's been found independently by multiple parties and",
    "start": "1158400",
    "end": "1165240"
  },
  {
    "text": "it's been used by pangu as well as my own none exploit on meos 10 it required a root to achieve",
    "start": "1165240",
    "end": "1173280"
  },
  {
    "text": "um the exploit but on iOS you only actually needed a Sandbox",
    "start": "1173280",
    "end": "1178679"
  },
  {
    "text": "Escape um essentially the bug was a textbook used after free you would",
    "start": "1178679",
    "end": "1184000"
  },
  {
    "text": "create a device and then you would terminate it but when you terminated this device you can just keep carrying",
    "start": "1184000",
    "end": "1189960"
  },
  {
    "text": "on operations on it and this will cause use after",
    "start": "1189960",
    "end": "1195559"
  },
  {
    "text": "threee and the core issue is because Apple in the use the wrong function in the terminate",
    "start": "1195559",
    "end": "1201400"
  },
  {
    "text": "device function essentially what they did was to use OS safe release which is",
    "start": "1201400",
    "end": "1206840"
  },
  {
    "text": "not safe uh to release the object uh instead what they wanted to do was to",
    "start": "1206840",
    "end": "1212320"
  },
  {
    "text": "use OS safe release null which is safe and which doesn't cause any use after",
    "start": "1212320",
    "end": "1218600"
  },
  {
    "text": "free um this was not an issue before uh yasite but for some reason they decided",
    "start": "1218600",
    "end": "1225559"
  },
  {
    "text": "to change the release code into OS safe is which doesn't do anything particular",
    "start": "1225559",
    "end": "1231480"
  },
  {
    "text": "so I'm not sure why they did it why they did it but they've done it so",
    "start": "1231480",
    "end": "1237919"
  },
  {
    "text": "yeah so uh here is the virtual call we can do on our use after fre",
    "start": "1237919",
    "end": "1244559"
  },
  {
    "text": "object um as you can see uh you can control uh time stamp which is the first",
    "start": "1244559",
    "end": "1250440"
  },
  {
    "text": "argument and you can see this here controlled",
    "start": "1250440",
    "end": "1255919"
  },
  {
    "text": "register and the second argument uh well the second argument the first argument",
    "start": "1255919",
    "end": "1261159"
  },
  {
    "text": "of uh since this is C++ it's a pointer to the object which is fre and we have",
    "start": "1261159",
    "end": "1266720"
  },
  {
    "text": "full control on this object so we control the data we control we can reallocate another object and just cause",
    "start": "1266720",
    "end": "1272679"
  },
  {
    "text": "a virtual call to corrupt the object itself uh we can do this on nons mmap uh",
    "start": "1272679",
    "end": "1279919"
  },
  {
    "text": "OS 10 very easily by just pointing the table pointer in userland and jumping to",
    "start": "1279919",
    "end": "1285840"
  },
  {
    "text": "userland memory but newer Maxs have some new mitigations",
    "start": "1285840",
    "end": "1292360"
  },
  {
    "text": "map and map um not many maps not many Macs have map many have",
    "start": "1292360",
    "end": "1298760"
  },
  {
    "text": "map um on no map Mac Max you can just point the table in userland and Europe",
    "start": "1298760",
    "end": "1305840"
  },
  {
    "text": "up with a KS inik on iOS which has both smap and map but the arm implementation",
    "start": "1305840",
    "end": "1313679"
  },
  {
    "text": "of it uh you need to use both hipping folik as well as the k in",
    "start": "1313679",
    "end": "1319799"
  },
  {
    "text": "folik but there is an alternate technique to pull this off without",
    "start": "1319799",
    "end": "1326120"
  },
  {
    "text": "having any Heap INF folic and this requires a tially controlled Heap",
    "start": "1326120",
    "end": "1331440"
  },
  {
    "text": "layout essentially the trick is that the object which is freed resides in the",
    "start": "1331440",
    "end": "1337279"
  },
  {
    "text": "calak 256 Zone and the V table coal index is at a",
    "start": "1337279",
    "end": "1345039"
  },
  {
    "text": "very high number so if you abuse the the free list you can do this essentially",
    "start": "1345039",
    "end": "1352159"
  },
  {
    "text": "you poke and hole to in the first allocation on a chunk of a cental",
    "start": "1352159",
    "end": "1357559"
  },
  {
    "text": "locations you control and then you free the use after free the",
    "start": "1357559",
    "end": "1363640"
  },
  {
    "text": "object and when you do this uh memory layout uh of the free chunk will look",
    "start": "1363640",
    "end": "1371000"
  },
  {
    "text": "very similar to the C++ objects memory layout because essentially a free chunk",
    "start": "1371000",
    "end": "1379080"
  },
  {
    "text": "first eight bytes are pointer to the next free chunk and the first eight",
    "start": "1379080",
    "end": "1384240"
  },
  {
    "text": "bytes of a C++ object are pointer to the V table and as such they're but pointers",
    "start": "1384240",
    "end": "1391760"
  },
  {
    "text": "and when you do the use after free the first eight bytes of the free chunk will",
    "start": "1391760",
    "end": "1398520"
  },
  {
    "text": "be used as a v table but it points to our control memory so we can just",
    "start": "1398520",
    "end": "1405520"
  },
  {
    "text": "control the particular chunk of memory which will be which will um be the",
    "start": "1405520",
    "end": "1412200"
  },
  {
    "text": "target of your virtual call and as you can see the virtual call",
    "start": "1412200",
    "end": "1417480"
  },
  {
    "text": "thinks it's accessing um C++ object which has a v table pointer that",
    "start": "1417480",
    "end": "1424480"
  },
  {
    "text": "points to Kernel data but in reality this is what",
    "start": "1424480",
    "end": "1430520"
  },
  {
    "text": "happens um we can now control the instruction pointer and the second argument the first argument is a pointer",
    "start": "1432360",
    "end": "1439640"
  },
  {
    "text": "to the use after fre allocation but um C slide is not leaked yet in neone I used",
    "start": "1439640",
    "end": "1447360"
  },
  {
    "text": "the cast info which could be considered cheating but it's allowed on SE protected",
    "start": "1447360",
    "end": "1454159"
  },
  {
    "text": "capan and there are also alternative kler leaking strategies uh you can just",
    "start": "1454159",
    "end": "1460799"
  },
  {
    "text": "abuse the U the use after free like a type confusion to further disable system",
    "start": "1460799",
    "end": "1467480"
  },
  {
    "text": "Integrity protection we can just use a function called CSR set all",
    "start": "1467480",
    "end": "1473399"
  },
  {
    "text": "all uh Paha or six reverser discussed this for this root full kernel",
    "start": "1473399",
    "end": "1480120"
  },
  {
    "text": "extension and we can just R redirect the virtual call to this function and as",
    "start": "1480120",
    "end": "1485520"
  },
  {
    "text": "long as the first argument is not null it will disable sip for good and R is not needed needed for this at",
    "start": "1485520",
    "end": "1493679"
  },
  {
    "text": "all so I'm a bit early here so we'll show you demo",
    "start": "1494039",
    "end": "1499480"
  },
  {
    "text": "it's actually a video because uh this particular Mac has been",
    "start": "1499480",
    "end": "1506320"
  },
  {
    "text": "patched so here we go this is the carel version and I try",
    "start": "1511120",
    "end": "1517960"
  },
  {
    "text": "to create a file in a system Integrity protection protected directory and it",
    "start": "1517960",
    "end": "1524679"
  },
  {
    "text": "fails as you can see but if I run my boundary",
    "start": "1524679",
    "end": "1530320"
  },
  {
    "text": "it will succeed very very easily um I'm actually a bit early on",
    "start": "1530480",
    "end": "1536960"
  },
  {
    "text": "this so I will explain better how the kernel exploit itself",
    "start": "1536960",
    "end": "1542158"
  },
  {
    "text": "worked uh what",
    "start": "1542559",
    "end": "1550039"
  },
  {
    "text": "sorry okay um essentially the kernel exploit um",
    "start": "1554000",
    "end": "1559440"
  },
  {
    "text": "just use the user after free in the technique I showed earlier to disable um",
    "start": "1559440",
    "end": "1566320"
  },
  {
    "text": "sip by using the jump um well I've already explained this",
    "start": "1566320",
    "end": "1573799"
  },
  {
    "text": "okay okay so the rapid growth in use of sandboxing technology is Ping many",
    "start": "1574360",
    "end": "1579559"
  },
  {
    "text": "attackers to Kernel attacks Apple has been trying to harden the caral Hep for a very long time and the zoc timing",
    "start": "1579559",
    "end": "1586960"
  },
  {
    "text": "attack can be very useful for attackers for to essentially determine they play out",
    "start": "1586960",
    "end": "1593200"
  },
  {
    "text": "very easily so I will talk about mitigations for this a bit uh because I've finished",
    "start": "1593200",
    "end": "1601919"
  },
  {
    "text": "this very early I'm very uh I I don't know I'm",
    "start": "1601919",
    "end": "1607919"
  },
  {
    "text": "very i' I've rushed this so I will talk a bit about it okay so for mitigations",
    "start": "1608039",
    "end": "1615320"
  },
  {
    "text": "uh SN carel does not have man them Apple has been trying to improve them but it",
    "start": "1615320",
    "end": "1622440"
  },
  {
    "text": "hasn't been working much attackers keep trying to find new data structures to corrupt to byass all of their uh",
    "start": "1622440",
    "end": "1630559"
  },
  {
    "text": "mitigations so recently Apple uh has been changing VM map copy but it's not enough as I showed uh a better technique",
    "start": "1630559",
    "end": "1637679"
  },
  {
    "text": "for them could have been to just introduce Randomness by using SAR in",
    "start": "1637679",
    "end": "1643320"
  },
  {
    "text": "size of all objects that point to data uh use SAR in most pointers I would",
    "start": "1643320",
    "end": "1650000"
  },
  {
    "text": "advise to use Sor for C++ vable pointers as well as fre list using different",
    "start": "1650000",
    "end": "1656480"
  },
  {
    "text": "random numbers and um yeah uh SAR uh with the",
    "start": "1656480",
    "end": "1663120"
  },
  {
    "text": "random numbers for pretty much anything related to The Hip uh uh which they have",
    "start": "1663120",
    "end": "1669480"
  },
  {
    "text": "been trying to do I believe that in the newest uh beta version of L capan they've been changing the the Heap",
    "start": "1669480",
    "end": "1675720"
  },
  {
    "text": "layout of the free list uh I haven't done much research on this but it's",
    "start": "1675720",
    "end": "1682080"
  },
  {
    "text": "breaking my exploit so I believe this is what's happening uh but it's not still",
    "start": "1682080",
    "end": "1687799"
  },
  {
    "text": "not enough because they keep living in objects which can be used for the same",
    "start": "1687799",
    "end": "1694159"
  },
  {
    "text": "technique um yeah it's not uh enough what apple is doing right",
    "start": "1694159",
    "end": "1700919"
  },
  {
    "text": "now um so yeah um",
    "start": "1700919",
    "end": "1708278"
  },
  {
    "text": "if you have uh any question about the exploit uh I will answer you",
    "start": "1708600",
    "end": "1716519"
  },
  {
    "text": "uh well I'm I'm so sorry about this but uh",
    "start": "1719480",
    "end": "1725640"
  },
  {
    "text": "that I finished so early but I've been rushing and I'm pretty uh it's first",
    "start": "1725640",
    "end": "1732559"
  },
  {
    "text": "time speaking so I'm not uh really uh you know confident about this and",
    "start": "1732559",
    "end": "1738559"
  },
  {
    "text": "yeah I'm very sorry about it uh if you want me to explain anything to you just",
    "start": "1738559",
    "end": "1743960"
  },
  {
    "text": "ask and I will do my",
    "start": "1743960",
    "end": "1747919"
  },
  {
    "text": "best I I don't know what to do actually right",
    "start": "1765159",
    "end": "1770559"
  },
  {
    "text": "now uh where oh",
    "start": "1772039",
    "end": "1777600"
  },
  {
    "text": "okay",
    "start": "1778360",
    "end": "1781360"
  },
  {
    "text": "okay yeah yeah essentially uh macro binaries",
    "start": "1783679",
    "end": "1790120"
  },
  {
    "text": "uh have uh segments each segment describes a part of the other space and",
    "start": "1790120",
    "end": "1796960"
  },
  {
    "text": "most Maco binaries have this page zero segment which essentially Maps a page",
    "start": "1796960",
    "end": "1803559"
  },
  {
    "text": "which you can't unmap and you can't do anything on so if the konel tries to",
    "start": "1803559",
    "end": "1808760"
  },
  {
    "text": "access this page it will fail because it won't be readable it won't be rable it",
    "start": "1808760",
    "end": "1814120"
  },
  {
    "text": "one be ex table so you can't do anything with it but uh essentially what Apple",
    "start": "1814120",
    "end": "1819679"
  },
  {
    "text": "did was to add a check in the kernel to make sure that this page does indeed",
    "start": "1819679",
    "end": "1825440"
  },
  {
    "text": "exist but there are some some very very old uh files which do not have the page",
    "start": "1825440",
    "end": "1832200"
  },
  {
    "text": "zero segment and I've asked Apple about it and they told me that it's software",
    "start": "1832200",
    "end": "1839200"
  },
  {
    "text": "that is on a very important uh donut break list so they cannot uh enforce",
    "start": "1839200",
    "end": "1845039"
  },
  {
    "text": "page zero on 32-bit binaries because of compatibility reasons so essentially if",
    "start": "1845039",
    "end": "1850240"
  },
  {
    "text": "you have a Maco binary which lacks page zero uh the kernel doesn't do anything",
    "start": "1850240",
    "end": "1856200"
  },
  {
    "text": "about it and you can just map anything you want as null and so you can just call VM map VM allocate to allocate a",
    "start": "1856200",
    "end": "1863880"
  },
  {
    "text": "page at zero and you can write read and ex execute anything you want of",
    "start": "1863880",
    "end": "1871638"
  },
  {
    "text": "it okay uh can you deallocate the page zero of a binary with that page zero um",
    "start": "1880639",
    "end": "1887039"
  },
  {
    "text": "you used to be able to but um since yosmite uh Apple has found out that",
    "start": "1887039",
    "end": "1893480"
  },
  {
    "text": "there are many caral bugs involving nul um I mean it's not uh 10 years ago",
    "start": "1893480",
    "end": "1900399"
  },
  {
    "text": "we had this on Linux um today we have this on meos S 10 people are discovering",
    "start": "1900399",
    "end": "1905760"
  },
  {
    "text": "zero day which involves the new page and so essentially what they did was to prevent um all access to the page zero",
    "start": "1905760",
    "end": "1914120"
  },
  {
    "text": "if a page zero has been mapped in but uh uh on 64bit binaries uh you just they",
    "start": "1914120",
    "end": "1921600"
  },
  {
    "text": "just kill your process if you don't have a page zero on 32bit ones they don't so",
    "start": "1921600",
    "end": "1927240"
  },
  {
    "text": "you can't just un map it uh you have to lock it to do anything for for with the",
    "start": "1927240",
    "end": "1932799"
  },
  {
    "text": "null page essentially",
    "start": "1932799",
    "end": "1938559"
  },
  {
    "text": "yeah um okay I repeat the question so uh what you ask is um if there are any",
    "start": "1943679",
    "end": "1950960"
  },
  {
    "text": "technical qu reasons for this uh and my answer is no there are there are not any",
    "start": "1950960",
    "end": "1957919"
  },
  {
    "text": "technical reasons for this apple does not use the page zero at all uh but um",
    "start": "1957919",
    "end": "1964279"
  },
  {
    "text": "there is a list of donut break software and they really care about it for some",
    "start": "1964279",
    "end": "1970080"
  },
  {
    "text": "reason I don't know why but I mean uh just blocking it would kill an entire",
    "start": "1970080",
    "end": "1975679"
  },
  {
    "text": "class of caral vulnerabilities and there are a lots there are lots of lots of lots of them in the carel",
    "start": "1975679",
    "end": "1984360"
  },
  {
    "text": "so what uh you could have a white list but",
    "start": "1989159",
    "end": "1996200"
  },
  {
    "text": "what exactly do you white list yeah but I mean do you do a hash of",
    "start": "1996200",
    "end": "2003120"
  },
  {
    "text": "the binary Yeah It's Tricky but um Apple",
    "start": "2003120",
    "end": "2008320"
  },
  {
    "text": "uh generally speaking uh is not good at fixing tricky problems I believe um they've done awful lot of",
    "start": "2008320",
    "end": "2016360"
  },
  {
    "text": "mistakes over the years uh for example uh gatekeeper is a bit of a joke in my",
    "start": "2016360",
    "end": "2022120"
  },
  {
    "text": "opinion because if you have any signed binary which links to an unsigned Library uh you can just run it and it",
    "start": "2022120",
    "end": "2029440"
  },
  {
    "text": "won't complain uh you can just change the library and you have full code execution",
    "start": "2029440",
    "end": "2034600"
  },
  {
    "text": "out of gatekeeper and the reason why the didn't fix this is the same one why they",
    "start": "2034600",
    "end": "2039799"
  },
  {
    "text": "didn't fix page zero because there is a compatibility list and they don't want to break it and I believe that this is a",
    "start": "2039799",
    "end": "2047200"
  },
  {
    "text": "very very bad technical um security point of view uh for Apple",
    "start": "2047200",
    "end": "2053000"
  },
  {
    "text": "to have I mean in iOS they've been able to achieve great security because they",
    "start": "2053000",
    "end": "2058839"
  },
  {
    "text": "could break the rules but they don't want to on o 10 and it's a very big",
    "start": "2058839",
    "end": "2064520"
  },
  {
    "text": "problem because many many many bugs stem from for this from this",
    "start": "2064520",
    "end": "2070760"
  },
  {
    "text": "reason um any more questions about anything exploitation Apple",
    "start": "2070760",
    "end": "2077720"
  },
  {
    "text": "okay uh where can you find the code for it uh essentially they they scan the",
    "start": "2082280",
    "end": "2090599"
  },
  {
    "text": "Maco uh for when you run an executable they scan for all the segments of memory",
    "start": "2090599",
    "end": "2097960"
  },
  {
    "text": "you describe in your executable and if there is no segment that describes the",
    "start": "2097960",
    "end": "2103119"
  },
  {
    "text": "page zero and there is no segment for the page zero which is essentially not",
    "start": "2103119",
    "end": "2109400"
  },
  {
    "text": "readable writable or executable um they kill you so this is not as I said in for",
    "start": "2109400",
    "end": "2116400"
  },
  {
    "text": "it on 32bit but on 64bit uh any modification of the the segment which",
    "start": "2116400",
    "end": "2123560"
  },
  {
    "text": "involves page zero will get you killed",
    "start": "2123560",
    "end": "2128839"
  },
  {
    "text": "yeah something that prevents somebody to an thatfor thech Z there's well there",
    "start": "2130520",
    "end": "2140480"
  },
  {
    "text": "is something uh that has been introduced in capan that prevents this from happening and it's system Integrity",
    "start": "2140480",
    "end": "2146359"
  },
  {
    "text": "protection uh with it you can't actually load an kernal extension without a signature",
    "start": "2146359",
    "end": "2153079"
  },
  {
    "text": "uh essentially U I've made a Kel extension myself it's on my tab called",
    "start": "2153079",
    "end": "2158240"
  },
  {
    "text": "nard which essentially disables all access to the page to all binaries which",
    "start": "2158240",
    "end": "2163920"
  },
  {
    "text": "lack a page zero stefaner has introduced in his set yd guard uh text the same um",
    "start": "2163920",
    "end": "2173119"
  },
  {
    "text": "kind of protection so you can just install his set swi guard or my guard uh",
    "start": "2173119",
    "end": "2180400"
  },
  {
    "text": "but in newer versions you have to disable system Integrity protection for it so it's not really a good uh a good",
    "start": "2180400",
    "end": "2188720"
  },
  {
    "text": "way in my opinion to fix it um but yeah in ym you could I'm not",
    "start": "2188720",
    "end": "2195800"
  },
  {
    "text": "sure why Apple doesn't do something like if uh system Integrity protection is enabled uh block page",
    "start": "2195800",
    "end": "2202240"
  },
  {
    "text": "zero I I have an idea why they don't do it but it's how they doing it so",
    "start": "2202240",
    "end": "2208240"
  },
  {
    "text": "technically they could they could very very easily it's just like one line of code change uh",
    "start": "2208240",
    "end": "2215599"
  },
  {
    "text": "but I'm not Apple so I don't know they they're thinking about it I'm sorry",
    "start": "2215599",
    "end": "2221800"
  },
  {
    "text": "about it okay uh if you have any more question",
    "start": "2221800",
    "end": "2227839"
  },
  {
    "text": "questions about iOS or os6 caral exploitation",
    "start": "2227839",
    "end": "2233760"
  },
  {
    "text": "[Applause]",
    "start": "2242500",
    "end": "2245190"
  }
]