[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "hi everyone thanks so much for coming to",
    "start": "0",
    "end": "3030"
  },
  {
    "text": "this very early morning presentation",
    "start": "3030",
    "end": "5810"
  },
  {
    "text": "today I gonna give a talk entitled the",
    "start": "5810",
    "end": "8580"
  },
  {
    "text": "problems and promise of web assembly I'm",
    "start": "8580",
    "end": "11400"
  },
  {
    "text": "madly silvana I'm on project zero",
    "start": "11400",
    "end": "13830"
  },
  {
    "text": "at Google and you might remember me from",
    "start": "13830",
    "end": "16080"
  },
  {
    "text": "previous presentations about JavaScript",
    "start": "16080",
    "end": "18740"
  },
  {
    "text": "well I've been taking a bit of a break",
    "start": "18740",
    "end": "21600"
  },
  {
    "text": "from JavaScript and looking at the other",
    "start": "21600",
    "end": "23490"
  },
  {
    "text": "features of the browser and one thing I",
    "start": "23490",
    "end": "25980"
  },
  {
    "text": "looked at that I thought was really",
    "start": "25980",
    "end": "27599"
  },
  {
    "text": "interesting was web assembly so today",
    "start": "27599",
    "end": "30570"
  },
  {
    "text": "I'm gonna share with you a bit of what I",
    "start": "30570",
    "end": "32610"
  },
  {
    "text": "learned about web assembly and the sort",
    "start": "32610",
    "end": "34620"
  },
  {
    "text": "of bugs I found so what is web assembly",
    "start": "34620",
    "end": "37980"
  },
  {
    "start": "36000",
    "end": "136000"
  },
  {
    "text": "well it's a format for writing it was",
    "start": "37980",
    "end": "41160"
  },
  {
    "text": "assembly code for the web basically if",
    "start": "41160",
    "end": "44070"
  },
  {
    "text": "you have JavaScript and you have",
    "start": "44070",
    "end": "46020"
  },
  {
    "text": "something that is really masse in that",
    "start": "46020",
    "end": "48300"
  },
  {
    "text": "JavaScript you can abstract that out and",
    "start": "48300",
    "end": "50789"
  },
  {
    "text": "put it into web assembly and it'll run",
    "start": "50789",
    "end": "53219"
  },
  {
    "text": "in an interpreter or a JIT that is",
    "start": "53219",
    "end": "55379"
  },
  {
    "text": "typically much faster than javascript",
    "start": "55379",
    "end": "57239"
  },
  {
    "text": "because it doesn't do things like type",
    "start": "57239",
    "end": "59579"
  },
  {
    "text": "checking and that sort of thing because",
    "start": "59579",
    "end": "61890"
  },
  {
    "text": "it has more limited features it was",
    "start": "61890",
    "end": "64920"
  },
  {
    "text": "motivated for by two reasons one was a",
    "start": "64920",
    "end": "67740"
  },
  {
    "text": "need for greater efficiency in the",
    "start": "67740",
    "end": "69540"
  },
  {
    "text": "browser and the other was a need for a",
    "start": "69540",
    "end": "71939"
  },
  {
    "text": "greater safety some people hope that web",
    "start": "71939",
    "end": "75270"
  },
  {
    "text": "assembly will become a good alternative",
    "start": "75270",
    "end": "77250"
  },
  {
    "text": "to running a native application on your",
    "start": "77250",
    "end": "79200"
  },
  {
    "text": "desktop there's a few ways you can write",
    "start": "79200",
    "end": "82560"
  },
  {
    "text": "code and web assembly what is that there",
    "start": "82560",
    "end": "85200"
  },
  {
    "text": "is a web assembly assembler so you can",
    "start": "85200",
    "end": "87090"
  },
  {
    "text": "just write instruction by instruction",
    "start": "87090",
    "end": "88310"
  },
  {
    "text": "and then assemble it but the main way",
    "start": "88310",
    "end": "91140"
  },
  {
    "text": "it's meant to be used is by writing",
    "start": "91140",
    "end": "93270"
  },
  {
    "text": "native code and compiling it there's a",
    "start": "93270",
    "end": "96479"
  },
  {
    "text": "limitations to compile ability though",
    "start": "96479",
    "end": "98460"
  },
  {
    "text": "it's getting better every day",
    "start": "98460",
    "end": "99689"
  },
  {
    "text": "C and C++ compile pretty well and so do",
    "start": "99689",
    "end": "102990"
  },
  {
    "text": "some other languages and then some like",
    "start": "102990",
    "end": "105600"
  },
  {
    "text": "Java which have garbage collection are",
    "start": "105600",
    "end": "107939"
  },
  {
    "text": "quite far away from being able to",
    "start": "107939",
    "end": "109890"
  },
  {
    "text": "compile well in web assembly but the",
    "start": "109890",
    "end": "112590"
  },
  {
    "text": "long term goal for a web assembly is to",
    "start": "112590",
    "end": "115049"
  },
  {
    "text": "be able to basically compile any code",
    "start": "115049",
    "end": "117329"
  },
  {
    "text": "written in any language to run on the",
    "start": "117329",
    "end": "119399"
  },
  {
    "text": "web it's wc3 standard and I'd actually",
    "start": "119399",
    "end": "123750"
  },
  {
    "text": "say it's quite an ambitious standard not",
    "start": "123750",
    "end": "125969"
  },
  {
    "text": "only do they want to make the web you",
    "start": "125969",
    "end": "128190"
  },
  {
    "text": "know safer and faster they also want to",
    "start": "128190",
    "end": "130679"
  },
  {
    "text": "compile every language",
    "start": "130679",
    "end": "132550"
  },
  {
    "text": "are also thinking about applications off",
    "start": "132550",
    "end": "134830"
  },
  {
    "text": "of the web to get one example of this",
    "start": "134830",
    "end": "137530"
  },
  {
    "start": "136000",
    "end": "148000"
  },
  {
    "text": "and they're thinking of moving the",
    "start": "137530",
    "end": "139030"
  },
  {
    "text": "etherium interpreter to web assembly and",
    "start": "139030",
    "end": "141100"
  },
  {
    "text": "that's just one of the one example of",
    "start": "141100",
    "end": "143860"
  },
  {
    "text": "the sort of applications that web",
    "start": "143860",
    "end": "145270"
  },
  {
    "text": "assembly could have in the future so",
    "start": "145270",
    "end": "149140"
  },
  {
    "start": "148000",
    "end": "193000"
  },
  {
    "text": "when you think about something like web",
    "start": "149140",
    "end": "150400"
  },
  {
    "text": "assembly a language that is written to",
    "start": "150400",
    "end": "152890"
  },
  {
    "text": "implement stuff on the web there is kind",
    "start": "152890",
    "end": "155140"
  },
  {
    "text": "of two possible problems one is that web",
    "start": "155140",
    "end": "158290"
  },
  {
    "text": "assembly engines aren't implemented",
    "start": "158290",
    "end": "159850"
  },
  {
    "text": "securely that a malicious developer can",
    "start": "159850",
    "end": "162580"
  },
  {
    "text": "write web assembly that violates the",
    "start": "162580",
    "end": "164500"
  },
  {
    "text": "security properties of the browser and",
    "start": "164500",
    "end": "166270"
  },
  {
    "text": "can compromise the browser and then",
    "start": "166270",
    "end": "168520"
  },
  {
    "text": "there's a second problem where web",
    "start": "168520",
    "end": "171280"
  },
  {
    "text": "assembly itself web assembly application",
    "start": "171280",
    "end": "173560"
  },
  {
    "text": "isn't written securely and that",
    "start": "173560",
    "end": "175150"
  },
  {
    "text": "application can be compromised I am",
    "start": "175150",
    "end": "177550"
  },
  {
    "text": "talking about this problem today the",
    "start": "177550",
    "end": "180010"
  },
  {
    "text": "first one and I'm not talking about the",
    "start": "180010",
    "end": "181750"
  },
  {
    "text": "second one there is actually a talk",
    "start": "181750",
    "end": "184000"
  },
  {
    "text": "today at 12:10 about the second issue",
    "start": "184000",
    "end": "186400"
  },
  {
    "text": "which I recommend you attend if you're",
    "start": "186400",
    "end": "189100"
  },
  {
    "text": "interested in learning how to write",
    "start": "189100",
    "end": "190690"
  },
  {
    "text": "actual web assembly securely so to start",
    "start": "190690",
    "end": "195130"
  },
  {
    "start": "193000",
    "end": "214000"
  },
  {
    "text": "off from a technical perspective what is",
    "start": "195130",
    "end": "197050"
  },
  {
    "text": "web assembly well it's a binary format",
    "start": "197050",
    "end": "199750"
  },
  {
    "text": "and since right now it mostly gets",
    "start": "199750",
    "end": "201760"
  },
  {
    "text": "loaded in JavaScript you create a binary",
    "start": "201760",
    "end": "204459"
  },
  {
    "text": "and there's a keyword fetch you can use",
    "start": "204459",
    "end": "206350"
  },
  {
    "text": "to put it into an array buffer or a",
    "start": "206350",
    "end": "208150"
  },
  {
    "text": "typed array in JavaScript or you can",
    "start": "208150",
    "end": "210370"
  },
  {
    "text": "just put it in byte by byte like I did",
    "start": "210370",
    "end": "212350"
  },
  {
    "text": "here and what does this format actually",
    "start": "212350",
    "end": "216010"
  },
  {
    "start": "214000",
    "end": "241000"
  },
  {
    "text": "look like well like all good binary",
    "start": "216010",
    "end": "218530"
  },
  {
    "text": "formats it starts with a magic number",
    "start": "218530",
    "end": "220300"
  },
  {
    "text": "and a version and then there's a series",
    "start": "220300",
    "end": "223390"
  },
  {
    "text": "of sections that have an IDE and",
    "start": "223390",
    "end": "225640"
  },
  {
    "text": "depending what on what the idea is that",
    "start": "225640",
    "end": "227440"
  },
  {
    "text": "determines what the payload of the",
    "start": "227440",
    "end": "229209"
  },
  {
    "text": "section does and there's actually tons",
    "start": "229209",
    "end": "232060"
  },
  {
    "text": "of rules for these sections they have to",
    "start": "232060",
    "end": "235090"
  },
  {
    "text": "be in a certain order some of them are",
    "start": "235090",
    "end": "237130"
  },
  {
    "text": "mandatory some of them can't have",
    "start": "237130",
    "end": "238930"
  },
  {
    "text": "duplicates that sort of thing and what",
    "start": "238930",
    "end": "242890"
  },
  {
    "start": "241000",
    "end": "260000"
  },
  {
    "text": "do all these sections do well they",
    "start": "242890",
    "end": "244900"
  },
  {
    "text": "contain basically everything you need to",
    "start": "244900",
    "end": "247630"
  },
  {
    "text": "execute this code so there is type",
    "start": "247630",
    "end": "250540"
  },
  {
    "text": "information there's imports there's",
    "start": "250540",
    "end": "252730"
  },
  {
    "text": "memory there's code there's that sort of",
    "start": "252730",
    "end": "255070"
  },
  {
    "text": "thing and I'll go through what each of",
    "start": "255070",
    "end": "257079"
  },
  {
    "text": "these do in much more detail later and",
    "start": "257080",
    "end": "260310"
  },
  {
    "start": "260000",
    "end": "278000"
  },
  {
    "text": "then how is this format actually get",
    "start": "260310",
    "end": "263200"
  },
  {
    "text": "parsed well your first step is you",
    "start": "263200",
    "end": "265810"
  },
  {
    "text": "have this typed array or array buffer",
    "start": "265810",
    "end": "267970"
  },
  {
    "text": "which is the variable wasm here and then",
    "start": "267970",
    "end": "270639"
  },
  {
    "text": "you create what's called a web assembly",
    "start": "270639",
    "end": "272020"
  },
  {
    "text": "module and this is the thing that parses",
    "start": "272020",
    "end": "274780"
  },
  {
    "text": "your binary and loads it into memory and",
    "start": "274780",
    "end": "278830"
  },
  {
    "start": "278000",
    "end": "345000"
  },
  {
    "text": "at this point they're already started to",
    "start": "278830",
    "end": "280750"
  },
  {
    "text": "be a few bugs so this is a vulnerability",
    "start": "280750",
    "end": "283480"
  },
  {
    "text": "I found in WebKit and this is an",
    "start": "283480",
    "end": "285970"
  },
  {
    "text": "ordering problem so as I said some",
    "start": "285970",
    "end": "288760"
  },
  {
    "text": "sections are mandatory some of them have",
    "start": "288760",
    "end": "290440"
  },
  {
    "text": "to be in certain orders and there's also",
    "start": "290440",
    "end": "292570"
  },
  {
    "text": "something called a custom section which",
    "start": "292570",
    "end": "294790"
  },
  {
    "text": "pretty much means that if the web",
    "start": "294790",
    "end": "297760"
  },
  {
    "text": "assembly engine doesn't know the ID of",
    "start": "297760",
    "end": "300400"
  },
  {
    "text": "your section it'll just skip over it and",
    "start": "300400",
    "end": "303130"
  },
  {
    "text": "assume it's something it doesn't support",
    "start": "303130",
    "end": "304270"
  },
  {
    "text": "yet but and every engine has a way that",
    "start": "304270",
    "end": "307990"
  },
  {
    "text": "it validates these sections are in the",
    "start": "307990",
    "end": "309700"
  },
  {
    "text": "right order taking into account custom",
    "start": "309700",
    "end": "311680"
  },
  {
    "text": "sections but the WebKit one was",
    "start": "311680",
    "end": "313300"
  },
  {
    "text": "defective so in this case you'll notice",
    "start": "313300",
    "end": "315639"
  },
  {
    "text": "if there was a custom section it just",
    "start": "315639",
    "end": "317350"
  },
  {
    "text": "returns true which means that you're",
    "start": "317350",
    "end": "319150"
  },
  {
    "text": "ordering resets every time you have a",
    "start": "319150",
    "end": "320800"
  },
  {
    "text": "custom section and you could do out of",
    "start": "320800",
    "end": "322540"
  },
  {
    "text": "order sections and violate all the rules",
    "start": "322540",
    "end": "324700"
  },
  {
    "text": "and there's lots of reasons why this",
    "start": "324700",
    "end": "326710"
  },
  {
    "text": "could cause problems but I think the",
    "start": "326710",
    "end": "328870"
  },
  {
    "text": "most interesting one and the one that",
    "start": "328870",
    "end": "330010"
  },
  {
    "text": "ended up being exploited is that there",
    "start": "330010",
    "end": "333460"
  },
  {
    "text": "are some sections that they're supposed",
    "start": "333460",
    "end": "335260"
  },
  {
    "text": "to only be one of but if you could put",
    "start": "335260",
    "end": "337060"
  },
  {
    "text": "more than one of them in then it would",
    "start": "337060",
    "end": "338800"
  },
  {
    "text": "start putting things into a vector pass",
    "start": "338800",
    "end": "341020"
  },
  {
    "text": "the bounds of the vector and it turned",
    "start": "341020",
    "end": "342460"
  },
  {
    "text": "out to be a buffer overflow so here's",
    "start": "342460",
    "end": "347050"
  },
  {
    "start": "345000",
    "end": "378000"
  },
  {
    "text": "another issue that turned up just in the",
    "start": "347050",
    "end": "348789"
  },
  {
    "text": "parsing of this format this is an issue",
    "start": "348789",
    "end": "351010"
  },
  {
    "text": "that was in v8 and this is an integer",
    "start": "351010",
    "end": "353080"
  },
  {
    "text": "overflow issue and it only works on a",
    "start": "353080",
    "end": "355120"
  },
  {
    "text": "32-bit platform so basically there's one",
    "start": "355120",
    "end": "358750"
  },
  {
    "text": "of the things that is in this format is",
    "start": "358750",
    "end": "360700"
  },
  {
    "text": "the number of locals that each function",
    "start": "360700",
    "end": "362560"
  },
  {
    "text": "has and if you had a very large number",
    "start": "362560",
    "end": "364930"
  },
  {
    "text": "of locals in VA it would just overflow",
    "start": "364930",
    "end": "367419"
  },
  {
    "text": "the allocation and then you overflow the",
    "start": "367419",
    "end": "370450"
  },
  {
    "text": "integer of the allocation and then you",
    "start": "370450",
    "end": "372490"
  },
  {
    "text": "would have a very small piece of memory",
    "start": "372490",
    "end": "373990"
  },
  {
    "text": "with a very large array copied into it",
    "start": "373990",
    "end": "378450"
  },
  {
    "start": "378000",
    "end": "475000"
  },
  {
    "text": "so here's another issue that happens",
    "start": "378450",
    "end": "381550"
  },
  {
    "text": "once again just in parsing this isn't",
    "start": "381550",
    "end": "384880"
  },
  {
    "text": "WebKit and this is kind of silly issue",
    "start": "384880",
    "end": "387100"
  },
  {
    "text": "in that it's clearly just a developer",
    "start": "387100",
    "end": "389050"
  },
  {
    "text": "error not any misunderstanding of the",
    "start": "389050",
    "end": "391270"
  },
  {
    "text": "specification so in JavaScript when you",
    "start": "391270",
    "end": "394780"
  },
  {
    "text": "have an array buffer you can create",
    "start": "394780",
    "end": "397700"
  },
  {
    "text": "I typed array buffer around it and this",
    "start": "397700",
    "end": "400250"
  },
  {
    "text": "is basically just a view into that",
    "start": "400250",
    "end": "402050"
  },
  {
    "text": "buffer so for example the variable view",
    "start": "402050",
    "end": "405290"
  },
  {
    "text": "that is offset 700 of this array buffer",
    "start": "405290",
    "end": "409190"
  },
  {
    "text": "so if you access sub 0 of that view you",
    "start": "409190",
    "end": "414050"
  },
  {
    "text": "would get sub 700 of the variable B 2",
    "start": "414050",
    "end": "417580"
  },
  {
    "text": "but the error they made in developing",
    "start": "417580",
    "end": "420110"
  },
  {
    "text": "this was that they accidentally added",
    "start": "420110",
    "end": "422900"
  },
  {
    "text": "this offset in twice they call the",
    "start": "422900",
    "end": "425660"
  },
  {
    "text": "function that gets the array buffer with",
    "start": "425660",
    "end": "427940"
  },
  {
    "text": "the offset and they forgot that it did",
    "start": "427940",
    "end": "429590"
  },
  {
    "text": "that and they had to be offset again so",
    "start": "429590",
    "end": "431660"
  },
  {
    "text": "this is kind of an interesting bug just",
    "start": "431660",
    "end": "433250"
  },
  {
    "text": "cuz also prevented this from working it",
    "start": "433250",
    "end": "435140"
  },
  {
    "text": "meant that if you ever had a typed array",
    "start": "435140",
    "end": "437140"
  },
  {
    "text": "with an offset that wasn't 0 webassembly",
    "start": "437140",
    "end": "439970"
  },
  {
    "text": "would just never work so this is a bug",
    "start": "439970",
    "end": "441920"
  },
  {
    "text": "that was probably not long for this",
    "start": "441920",
    "end": "443360"
  },
  {
    "text": "world but it did show up and actually",
    "start": "443360",
    "end": "445910"
  },
  {
    "text": "there was sort of a similar bug in BA",
    "start": "445910",
    "end": "447920"
  },
  {
    "text": "that came up at the pony's last night",
    "start": "447920",
    "end": "450020"
  },
  {
    "text": "which is found by crying dog and it's",
    "start": "450020",
    "end": "452570"
  },
  {
    "text": "another issue where they didn't quite",
    "start": "452570",
    "end": "454370"
  },
  {
    "text": "get the JavaScript properties of the",
    "start": "454370",
    "end": "457280"
  },
  {
    "text": "typed array and you're actually able to",
    "start": "457280",
    "end": "459170"
  },
  {
    "text": "change the tapered array in the middle",
    "start": "459170",
    "end": "461270"
  },
  {
    "text": "of execution which caused problems so",
    "start": "461270",
    "end": "464000"
  },
  {
    "text": "there's actually been quite a few issues",
    "start": "464000",
    "end": "465740"
  },
  {
    "text": "and webassembly just with what I call",
    "start": "465740",
    "end": "467570"
  },
  {
    "text": "JavaScript bindings making sure the",
    "start": "467570",
    "end": "470300"
  },
  {
    "text": "JavaScript properties of the objects",
    "start": "470300",
    "end": "472400"
  },
  {
    "text": "that get webassembly started work",
    "start": "472400",
    "end": "474080"
  },
  {
    "text": "correctly so what happens what now that",
    "start": "474080",
    "end": "477830"
  },
  {
    "start": "475000",
    "end": "490000"
  },
  {
    "text": "you've got this binary format loaded",
    "start": "477830",
    "end": "482570"
  },
  {
    "text": "into the module",
    "start": "482570",
    "end": "483530"
  },
  {
    "text": "well now you actually have to run it and",
    "start": "483530",
    "end": "485630"
  },
  {
    "text": "you need certain properties to run it so",
    "start": "485630",
    "end": "487970"
  },
  {
    "text": "you do this using an instance so what",
    "start": "487970",
    "end": "491780"
  },
  {
    "start": "490000",
    "end": "501000"
  },
  {
    "text": "does this instance object actually do",
    "start": "491780",
    "end": "493670"
  },
  {
    "text": "well it starts off by doing imports and",
    "start": "493670",
    "end": "496550"
  },
  {
    "text": "then it I'm gonna slices the imports and",
    "start": "496550",
    "end": "499220"
  },
  {
    "text": "then it creates the exports so there's",
    "start": "499220",
    "end": "502450"
  },
  {
    "start": "501000",
    "end": "591000"
  },
  {
    "text": "but there's actually more than three",
    "start": "502450",
    "end": "504290"
  },
  {
    "text": "import types but I think there's three",
    "start": "504290",
    "end": "505790"
  },
  {
    "text": "that are actually interesting there are",
    "start": "505790",
    "end": "508550"
  },
  {
    "text": "functions so you can import Java Script",
    "start": "508550",
    "end": "510890"
  },
  {
    "text": "or web assembly functions into web",
    "start": "510890",
    "end": "512840"
  },
  {
    "text": "assembly and then you can call them from",
    "start": "512840",
    "end": "514969"
  },
  {
    "text": "web assembly you can also import memory",
    "start": "514970",
    "end": "518620"
  },
  {
    "text": "fundamentally web assembly is a set of",
    "start": "518620",
    "end": "520909"
  },
  {
    "text": "instructions like loads and stores and",
    "start": "520910",
    "end": "523340"
  },
  {
    "text": "they need memory they can access",
    "start": "523340",
    "end": "525020"
  },
  {
    "text": "and you need to import the single memory",
    "start": "525020",
    "end": "527089"
  },
  {
    "text": "page that it uses before you run",
    "start": "527089",
    "end": "529910"
  },
  {
    "text": "webassembly",
    "start": "529910",
    "end": "530690"
  },
  {
    "text": "and there's also a function table object",
    "start": "530690",
    "end": "533690"
  },
  {
    "text": "which is literally just a table of",
    "start": "533690",
    "end": "535640"
  },
  {
    "text": "functions and this is used to implement",
    "start": "535640",
    "end": "537770"
  },
  {
    "text": "things like V tables where you need the",
    "start": "537770",
    "end": "539600"
  },
  {
    "text": "ability to dynamically call a function",
    "start": "539600",
    "end": "542080"
  },
  {
    "text": "so here's some web assembly terminology",
    "start": "542080",
    "end": "544880"
  },
  {
    "text": "you can totally use to impress all your",
    "start": "544880",
    "end": "546740"
  },
  {
    "text": "web assembly friends so there's these",
    "start": "546740",
    "end": "549320"
  },
  {
    "text": "two imports the memory and the table and",
    "start": "549320",
    "end": "552620"
  },
  {
    "text": "of course you can have many instances of",
    "start": "552620",
    "end": "554930"
  },
  {
    "text": "the same module or different modules and",
    "start": "554930",
    "end": "557149"
  },
  {
    "text": "web assembly so if two instances or more",
    "start": "557149",
    "end": "560120"
  },
  {
    "text": "instances have the same memory in the",
    "start": "560120",
    "end": "561770"
  },
  {
    "text": "same table they are called in the same",
    "start": "561770",
    "end": "563990"
  },
  {
    "text": "compartment now the question you might",
    "start": "563990",
    "end": "566750"
  },
  {
    "text": "have is well can an instance share the",
    "start": "566750",
    "end": "569750"
  },
  {
    "text": "memory but not the table or share the",
    "start": "569750",
    "end": "571820"
  },
  {
    "text": "table but not the memory and the answer",
    "start": "571820",
    "end": "574250"
  },
  {
    "text": "is sure you can totally have web",
    "start": "574250",
    "end": "575600"
  },
  {
    "text": "assembly that's in like half of the same",
    "start": "575600",
    "end": "577610"
  },
  {
    "text": "compartment but there's no reason you",
    "start": "577610",
    "end": "579860"
  },
  {
    "text": "would ever practically do this in",
    "start": "579860",
    "end": "581839"
  },
  {
    "text": "writing web assembly and no compiler",
    "start": "581839",
    "end": "584149"
  },
  {
    "text": "will ever generate this code but you",
    "start": "584149",
    "end": "586310"
  },
  {
    "text": "know if you want to do it to reach the",
    "start": "586310",
    "end": "587390"
  },
  {
    "text": "vulnerability it's totally an option so",
    "start": "587390",
    "end": "592010"
  },
  {
    "start": "591000",
    "end": "622000"
  },
  {
    "text": "let's talk a bit more about this memory",
    "start": "592010",
    "end": "593589"
  },
  {
    "text": "it's a memory page for the web assembly",
    "start": "593589",
    "end": "596089"
  },
  {
    "text": "code and right now that assembly is",
    "start": "596089",
    "end": "598310"
  },
  {
    "text": "limited to a single memory page that",
    "start": "598310",
    "end": "600860"
  },
  {
    "text": "load and store instructions can access",
    "start": "600860",
    "end": "602720"
  },
  {
    "text": "and the way this gets allocated is you",
    "start": "602720",
    "end": "605839"
  },
  {
    "text": "allocate this memory object and it has",
    "start": "605839",
    "end": "608300"
  },
  {
    "text": "an initial size and a maximum size in",
    "start": "608300",
    "end": "611060"
  },
  {
    "text": "pages and then you call grow to increase",
    "start": "611060",
    "end": "614060"
  },
  {
    "text": "the size and this memory then just",
    "start": "614060",
    "end": "619430"
  },
  {
    "text": "becomes available to all the",
    "start": "619430",
    "end": "620839"
  },
  {
    "text": "instructions in web assembly and at this",
    "start": "620839",
    "end": "623630"
  },
  {
    "start": "622000",
    "end": "663000"
  },
  {
    "text": "point there's also been some problems in",
    "start": "623630",
    "end": "626300"
  },
  {
    "text": "this feature and these are kind of",
    "start": "626300",
    "end": "628459"
  },
  {
    "text": "interesting because they're actually",
    "start": "628459",
    "end": "629930"
  },
  {
    "text": "very similar bugs in two different",
    "start": "629930",
    "end": "632120"
  },
  {
    "text": "implementations there's the first bug",
    "start": "632120",
    "end": "634730"
  },
  {
    "text": "which was found in Firefox by their own",
    "start": "634730",
    "end": "637040"
  },
  {
    "text": "internal fuzzing and this was an issue",
    "start": "637040",
    "end": "639290"
  },
  {
    "text": "where there wasn't integer overflow in",
    "start": "639290",
    "end": "642350"
  },
  {
    "text": "growing this memory so eventually you",
    "start": "642350",
    "end": "644870"
  },
  {
    "text": "would grow the memory and then it would",
    "start": "644870",
    "end": "647660"
  },
  {
    "text": "think it was bigger than it was and you",
    "start": "647660",
    "end": "649100"
  },
  {
    "text": "could write out of bounds and the second",
    "start": "649100",
    "end": "651380"
  },
  {
    "text": "one found by using Exuma of qihoo this",
    "start": "651380",
    "end": "656180"
  },
  {
    "text": "is very similar although it ends up",
    "start": "656180",
    "end": "657829"
  },
  {
    "text": "being a use after free where the memory",
    "start": "657829",
    "end": "660260"
  },
  {
    "text": "is freed unexpectedly now one thing I",
    "start": "660260",
    "end": "665150"
  },
  {
    "start": "663000",
    "end": "814000"
  },
  {
    "text": "thought I would see a lot of which I",
    "start": "665150",
    "end": "666680"
  },
  {
    "text": "didn't see a lot of was out of bounds",
    "start": "666680",
    "end": "669110"
  },
  {
    "text": "issues and I thought there was a few",
    "start": "669110",
    "end": "672170"
  },
  {
    "text": "reasons for this one is that there's",
    "start": "672170",
    "end": "674240"
  },
  {
    "text": "actually a fairly limited set of",
    "start": "674240",
    "end": "675620"
  },
  {
    "text": "instructions that can access memory and",
    "start": "675620",
    "end": "677779"
  },
  {
    "text": "webassembly pretty much load in store so",
    "start": "677779",
    "end": "680870"
  },
  {
    "text": "this is a very like small inaudible sets",
    "start": "680870",
    "end": "683270"
  },
  {
    "text": "of instructions that might go out of",
    "start": "683270",
    "end": "685040"
  },
  {
    "text": "bounds I'll say right now a web assembly",
    "start": "685040",
    "end": "687980"
  },
  {
    "text": "supports a very limited threading model",
    "start": "687980",
    "end": "689720"
  },
  {
    "text": "so there's not a lot of fear that you're",
    "start": "689720",
    "end": "692270"
  },
  {
    "text": "going to check the size of something and",
    "start": "692270",
    "end": "693949"
  },
  {
    "text": "then it's gonna change it also helps",
    "start": "693949",
    "end": "695870"
  },
  {
    "text": "that memory buffers you might notice you",
    "start": "695870",
    "end": "697970"
  },
  {
    "text": "can grow them but they can never get any",
    "start": "697970",
    "end": "699800"
  },
  {
    "text": "smaller once they're a certain size they",
    "start": "699800",
    "end": "702230"
  },
  {
    "text": "can only get bigger um but something",
    "start": "702230",
    "end": "704990"
  },
  {
    "text": "else I thought was really cool is how",
    "start": "704990",
    "end": "706699"
  },
  {
    "text": "they actually designed these I memory",
    "start": "706699",
    "end": "708470"
  },
  {
    "text": "buffers on 64-bit platforms and it's",
    "start": "708470",
    "end": "710959"
  },
  {
    "text": "called safe buffer their signal buffers",
    "start": "710959",
    "end": "712579"
  },
  {
    "text": "and it's actually quite cool so what",
    "start": "712579",
    "end": "715880"
  },
  {
    "text": "they'll do is they'll map the memory of",
    "start": "715880",
    "end": "718940"
  },
  {
    "text": "4 gigabytes for the memory buffer and if",
    "start": "718940",
    "end": "722209"
  },
  {
    "text": "you think about it the way the",
    "start": "722209",
    "end": "723410"
  },
  {
    "text": "instructions work when you load in store",
    "start": "723410",
    "end": "725480"
  },
  {
    "text": "there is an int and unsigned integer",
    "start": "725480",
    "end": "727760"
  },
  {
    "text": "offset so it can go from 0 to ffff and",
    "start": "727760",
    "end": "731390"
  },
  {
    "text": "that is 4 gigs in size total so they",
    "start": "731390",
    "end": "734600"
  },
  {
    "text": "have mapped all this memory that the",
    "start": "734600",
    "end": "736430"
  },
  {
    "text": "index of a loader store instruction can",
    "start": "736430",
    "end": "738380"
  },
  {
    "text": "actually access and then the part that's",
    "start": "738380",
    "end": "741350"
  },
  {
    "text": "actually allocated they map to being",
    "start": "741350",
    "end": "743660"
  },
  {
    "text": "readwrite memory and then when you run",
    "start": "743660",
    "end": "746120"
  },
  {
    "text": "webassembly if the memory is mapped it",
    "start": "746120",
    "end": "749420"
  },
  {
    "text": "works properly and if the memory is not",
    "start": "749420",
    "end": "751699"
  },
  {
    "text": "mapped it throws a signal or an",
    "start": "751699",
    "end": "753949"
  },
  {
    "text": "exception depending on platform and then",
    "start": "753949",
    "end": "755810"
  },
  {
    "text": "this gets detected by JavaScript and",
    "start": "755810",
    "end": "758660"
  },
  {
    "text": "then they create a JavaScript exception",
    "start": "758660",
    "end": "760510"
  },
  {
    "text": "so I think this is cool eggs it's very",
    "start": "760510",
    "end": "763579"
  },
  {
    "text": "effective you don't need manual bounds",
    "start": "763579",
    "end": "766910"
  },
  {
    "text": "checks and I think it's very likely",
    "start": "766910",
    "end": "768230"
  },
  {
    "text": "you're unlikely you're gonna have a bug",
    "start": "768230",
    "end": "770360"
  },
  {
    "text": "where something larger than the size of",
    "start": "770360",
    "end": "773750"
  },
  {
    "text": "an integer tries to access this memory",
    "start": "773750",
    "end": "775730"
  },
  {
    "text": "but I also like how",
    "start": "775730",
    "end": "777780"
  },
  {
    "text": "puts all the burden of the type of the",
    "start": "777780",
    "end": "780300"
  },
  {
    "text": "bounds checking on to people who go out",
    "start": "780300",
    "end": "781920"
  },
  {
    "text": "of bounds if you don't go out of bounds",
    "start": "781920",
    "end": "783960"
  },
  {
    "text": "this has no performance impact for",
    "start": "783960",
    "end": "786240"
  },
  {
    "text": "bounds checking it's only if you go out",
    "start": "786240",
    "end": "788430"
  },
  {
    "text": "of bounds then there's a lot of",
    "start": "788430",
    "end": "789690"
  },
  {
    "text": "performance impact for creating that",
    "start": "789690",
    "end": "791160"
  },
  {
    "text": "exception and I think like that's a",
    "start": "791160",
    "end": "793080"
  },
  {
    "text": "pretty cool design and I think it's one",
    "start": "793080",
    "end": "794880"
  },
  {
    "text": "of the reasons that there's been very",
    "start": "794880",
    "end": "796500"
  },
  {
    "text": "few out of bounds issues and webassembly",
    "start": "796500",
    "end": "799010"
  },
  {
    "text": "no look one problem with this is it",
    "start": "799010",
    "end": "801990"
  },
  {
    "text": "doesn't work on 32-bit platforms and",
    "start": "801990",
    "end": "804750"
  },
  {
    "text": "they have to use regular buffers there",
    "start": "804750",
    "end": "806880"
  },
  {
    "text": "but still on 64-bit platforms I think",
    "start": "806880",
    "end": "809520"
  },
  {
    "text": "it's fairly unlikely we'll be out of",
    "start": "809520",
    "end": "811590"
  },
  {
    "text": "bounds issues specifically in the memory",
    "start": "811590",
    "end": "814370"
  },
  {
    "start": "814000",
    "end": "874000"
  },
  {
    "text": "so like the memory the other thing that",
    "start": "814370",
    "end": "816780"
  },
  {
    "text": "gets imported is the table and this is",
    "start": "816780",
    "end": "819630"
  },
  {
    "text": "basically a table of functions and they",
    "start": "819630",
    "end": "822000"
  },
  {
    "text": "have to be webassembly functions so if",
    "start": "822000",
    "end": "825030"
  },
  {
    "text": "you want to call a javascript function",
    "start": "825030",
    "end": "826860"
  },
  {
    "text": "from a table you have to create a web",
    "start": "826860",
    "end": "828360"
  },
  {
    "text": "assembly function that calls that",
    "start": "828360",
    "end": "829740"
  },
  {
    "text": "function and it's similar to the memory",
    "start": "829740",
    "end": "832440"
  },
  {
    "text": "you create one with initial size and",
    "start": "832440",
    "end": "836580"
  },
  {
    "text": "then you can grow it and once again",
    "start": "836580",
    "end": "839990"
  },
  {
    "text": "there were kind of the similar bindings",
    "start": "839990",
    "end": "842190"
  },
  {
    "text": "issues with these the Firefox issue also",
    "start": "842190",
    "end": "846210"
  },
  {
    "text": "occurred with tables where there is the",
    "start": "846210",
    "end": "847830"
  },
  {
    "text": "integer wrapping and then there was this",
    "start": "847830",
    "end": "851250"
  },
  {
    "text": "issue submitted to the chromium Rewards",
    "start": "851250",
    "end": "852870"
  },
  {
    "text": "program where when you grew a table like",
    "start": "852870",
    "end": "857640"
  },
  {
    "text": "all things in JavaScript if there's an",
    "start": "857640",
    "end": "859380"
  },
  {
    "text": "index you have to convert the index by",
    "start": "859380",
    "end": "861990"
  },
  {
    "text": "calling to integer and then that can",
    "start": "861990",
    "end": "864660"
  },
  {
    "text": "make calls that change the property of",
    "start": "864660",
    "end": "866220"
  },
  {
    "text": "the table and this ended up being once",
    "start": "866220",
    "end": "868680"
  },
  {
    "text": "again I use after free similar to the",
    "start": "868680",
    "end": "871410"
  },
  {
    "text": "memory one so what happens after you've",
    "start": "871410",
    "end": "876660"
  },
  {
    "start": "874000",
    "end": "1027000"
  },
  {
    "text": "loaded the imports well now you get to",
    "start": "876660",
    "end": "879770"
  },
  {
    "text": "initialization and this is basically",
    "start": "879770",
    "end": "882390"
  },
  {
    "text": "when you you have an option in the",
    "start": "882390",
    "end": "884750"
  },
  {
    "text": "section to initialize both of your",
    "start": "884750",
    "end": "887490"
  },
  {
    "text": "memory and your tables so if data",
    "start": "887490",
    "end": "889800"
  },
  {
    "text": "segments are used to initialize memory",
    "start": "889800",
    "end": "892350"
  },
  {
    "text": "and element sections are used to",
    "start": "892350",
    "end": "894150"
  },
  {
    "text": "implement the table I thought there were",
    "start": "894150",
    "end": "896760"
  },
  {
    "text": "a few possible bugs here one thing I",
    "start": "896760",
    "end": "899190"
  },
  {
    "text": "thought is you know there's this is",
    "start": "899190",
    "end": "900600"
  },
  {
    "text": "gonna go out of bounds like somewhere on",
    "start": "900600",
    "end": "902370"
  },
  {
    "text": "some platform but I check the",
    "start": "902370",
    "end": "905010"
  },
  {
    "text": "implementations on all four browsers and",
    "start": "905010",
    "end": "906990"
  },
  {
    "text": "I do",
    "start": "906990",
    "end": "907430"
  },
  {
    "text": "see any issues like this and I think and",
    "start": "907430",
    "end": "909529"
  },
  {
    "text": "one of the things that led to that is",
    "start": "909529",
    "end": "910850"
  },
  {
    "text": "this is very well specified there are",
    "start": "910850",
    "end": "913520"
  },
  {
    "text": "very specific checks that are supposed",
    "start": "913520",
    "end": "914930"
  },
  {
    "text": "to be made and they were all consistent",
    "start": "914930",
    "end": "917089"
  },
  {
    "text": "on all the platforms however there was",
    "start": "917089",
    "end": "920149"
  },
  {
    "text": "this one fairly interesting issue in v8",
    "start": "920149",
    "end": "923810"
  },
  {
    "text": "and it kind of came up twice and I don't",
    "start": "923810",
    "end": "926420"
  },
  {
    "text": "have a CV for it because the chrome team",
    "start": "926420",
    "end": "929180"
  },
  {
    "text": "actually found it before I found it so",
    "start": "929180",
    "end": "932529"
  },
  {
    "text": "here's what the issue was if you think",
    "start": "932529",
    "end": "934850"
  },
  {
    "text": "about how tables work there is an",
    "start": "934850",
    "end": "937040"
  },
  {
    "text": "instruction calling directly you can use",
    "start": "937040",
    "end": "938720"
  },
  {
    "text": "a web assembly that will call into a",
    "start": "938720",
    "end": "940279"
  },
  {
    "text": "table and then that table can call in to",
    "start": "940279",
    "end": "943010"
  },
  {
    "text": "JavaScript and then that JavaScript can",
    "start": "943010",
    "end": "945470"
  },
  {
    "text": "change the table so the original issue",
    "start": "945470",
    "end": "947570"
  },
  {
    "text": "was if that JavaScript changed the table",
    "start": "947570",
    "end": "950209"
  },
  {
    "text": "to remove the function that it was",
    "start": "950209",
    "end": "951740"
  },
  {
    "text": "calling right now",
    "start": "951740",
    "end": "952610"
  },
  {
    "text": "that would be the last handle to that",
    "start": "952610",
    "end": "954380"
  },
  {
    "text": "function and then that function would go",
    "start": "954380",
    "end": "955820"
  },
  {
    "text": "away and that would be a use after free",
    "start": "955820",
    "end": "957700"
  },
  {
    "text": "so they fixed this at least for the",
    "start": "957700",
    "end": "959810"
  },
  {
    "text": "short term by detecting this situation",
    "start": "959810",
    "end": "961880"
  },
  {
    "text": "if you're already in it was Azzam call",
    "start": "961880",
    "end": "963620"
  },
  {
    "text": "you can't change a table and this is",
    "start": "963620",
    "end": "966050"
  },
  {
    "text": "actually okay I forgot to mention but",
    "start": "966050",
    "end": "968380"
  },
  {
    "text": "tables are one of those things that you",
    "start": "968380",
    "end": "971540"
  },
  {
    "text": "can do a lot more with them than is",
    "start": "971540",
    "end": "974480"
  },
  {
    "text": "necessary in code so any compiled code",
    "start": "974480",
    "end": "977390"
  },
  {
    "text": "will only ever change their tables that",
    "start": "977390",
    "end": "979250"
  },
  {
    "text": "start up and there's pretty much no",
    "start": "979250",
    "end": "982520"
  },
  {
    "text": "reasonable reason to change them",
    "start": "982520",
    "end": "984050"
  },
  {
    "text": "dynamically during execution but of",
    "start": "984050",
    "end": "986839"
  },
  {
    "text": "course it's still possible so they just",
    "start": "986839",
    "end": "988700"
  },
  {
    "text": "made it so that you can change them",
    "start": "988700",
    "end": "989870"
  },
  {
    "text": "during execution but not actually during",
    "start": "989870",
    "end": "991850"
  },
  {
    "text": "a zone call which is fairly reasonable",
    "start": "991850",
    "end": "993950"
  },
  {
    "text": "considering what compilers generate but",
    "start": "993950",
    "end": "996620"
  },
  {
    "text": "then I found another way to actually",
    "start": "996620",
    "end": "998890"
  },
  {
    "text": "reach this issue which is let's say you",
    "start": "998890",
    "end": "1001270"
  },
  {
    "text": "do the same thing you call the function",
    "start": "1001270",
    "end": "1003390"
  },
  {
    "text": "that but instead of removing it from the",
    "start": "1003390",
    "end": "1005980"
  },
  {
    "text": "table directly you load another was an",
    "start": "1005980",
    "end": "1009550"
  },
  {
    "text": "instance into the same compartment and",
    "start": "1009550",
    "end": "1011680"
  },
  {
    "text": "that one has initialization then that",
    "start": "1011680",
    "end": "1014050"
  },
  {
    "text": "initialization will initialize the table",
    "start": "1014050",
    "end": "1016180"
  },
  {
    "text": "and then that will once again wipe out",
    "start": "1016180",
    "end": "1017950"
  },
  {
    "text": "the last reference to the function so",
    "start": "1017950",
    "end": "1020380"
  },
  {
    "text": "now this is has been fixed in a way that",
    "start": "1020380",
    "end": "1022450"
  },
  {
    "text": "they just keep a reference to that",
    "start": "1022450",
    "end": "1023980"
  },
  {
    "text": "function much longer than the table so",
    "start": "1023980",
    "end": "1028270"
  },
  {
    "text": "what happens now well we've finished all",
    "start": "1028270",
    "end": "1031150"
  },
  {
    "text": "the steps of loading our web assembly",
    "start": "1031150",
    "end": "1032829"
  },
  {
    "text": "we've created the module we've created",
    "start": "1032829",
    "end": "1034720"
  },
  {
    "text": "the instance with all the imports and",
    "start": "1034720",
    "end": "1037660"
  },
  {
    "text": "we get exports back and yay finally we",
    "start": "1037660",
    "end": "1040780"
  },
  {
    "text": "can call these exports and webassembly",
    "start": "1040780",
    "end": "1042939"
  },
  {
    "text": "happens so what happens next",
    "start": "1042940",
    "end": "1047650"
  },
  {
    "start": "1044000",
    "end": "1135000"
  },
  {
    "text": "are there such thing as webassembly run",
    "start": "1047650",
    "end": "1050020"
  },
  {
    "text": "time issues and the answer is yes though",
    "start": "1050020",
    "end": "1052720"
  },
  {
    "text": "I didn't find that many I guess there's",
    "start": "1052720",
    "end": "1055450"
  },
  {
    "text": "a couple of reasons for this one is that",
    "start": "1055450",
    "end": "1057730"
  },
  {
    "text": "I think at every stage of webassembly",
    "start": "1057730",
    "end": "1059380"
  },
  {
    "text": "finding bugs becomes more difficult and",
    "start": "1059380",
    "end": "1061630"
  },
  {
    "text": "if you look at kind of the amounts that",
    "start": "1061630",
    "end": "1063340"
  },
  {
    "text": "have been found",
    "start": "1063340",
    "end": "1064210"
  },
  {
    "text": "you know the parsing and module issues",
    "start": "1064210",
    "end": "1067450"
  },
  {
    "text": "there's a lot of them and then there's",
    "start": "1067450",
    "end": "1069010"
  },
  {
    "text": "kind of fewer instance issues and then",
    "start": "1069010",
    "end": "1070930"
  },
  {
    "text": "there's very little runtime issues and I",
    "start": "1070930",
    "end": "1073600"
  },
  {
    "text": "think it may be just because as people",
    "start": "1073600",
    "end": "1075100"
  },
  {
    "text": "find bugs you know you tend to go deeper",
    "start": "1075100",
    "end": "1077320"
  },
  {
    "text": "and deeper each time so it's possible",
    "start": "1077320",
    "end": "1078610"
  },
  {
    "text": "there'll be some in the future but also",
    "start": "1078610",
    "end": "1081430"
  },
  {
    "text": "I think the way that I web assembly is",
    "start": "1081430",
    "end": "1084580"
  },
  {
    "text": "specified and the limited number of",
    "start": "1084580",
    "end": "1085780"
  },
  {
    "text": "features and really does reduce the",
    "start": "1085780",
    "end": "1088180"
  },
  {
    "text": "likelihood that these types of issues",
    "start": "1088180",
    "end": "1090670"
  },
  {
    "text": "occur so one possibility is that",
    "start": "1090670",
    "end": "1093520"
  },
  {
    "text": "instructions do the wrong thing and",
    "start": "1093520",
    "end": "1095590"
  },
  {
    "text": "they're actually having a few issues",
    "start": "1095590",
    "end": "1097990"
  },
  {
    "text": "like this especially if you go through",
    "start": "1097990",
    "end": "1099400"
  },
  {
    "text": "the bug tracker of webassembly",
    "start": "1099400",
    "end": "1101400"
  },
  {
    "text": "implementations really early on if you",
    "start": "1101400",
    "end": "1104080"
  },
  {
    "text": "look at like it you know the first",
    "start": "1104080",
    "end": "1104890"
  },
  {
    "text": "months or even before they actually put",
    "start": "1104890",
    "end": "1106900"
  },
  {
    "text": "it into stable browser there's like a",
    "start": "1106900",
    "end": "1108940"
  },
  {
    "text": "lot of issues like this that cause",
    "start": "1108940",
    "end": "1110170"
  },
  {
    "text": "crashes but a lot of them were removed",
    "start": "1110170",
    "end": "1112000"
  },
  {
    "text": "by fuzzing before they were even",
    "start": "1112000",
    "end": "1113230"
  },
  {
    "text": "released there was incorrect bounds",
    "start": "1113230",
    "end": "1115780"
  },
  {
    "text": "checking and I discussed this earlier I",
    "start": "1115780",
    "end": "1119740"
  },
  {
    "text": "think because of safe buffers and signal",
    "start": "1119740",
    "end": "1121450"
  },
  {
    "text": "buffers this one will probably not come",
    "start": "1121450",
    "end": "1123280"
  },
  {
    "text": "up except on 32 bits and then incorrect",
    "start": "1123280",
    "end": "1126520"
  },
  {
    "text": "handles news after freeze there's been a",
    "start": "1126520",
    "end": "1128830"
  },
  {
    "text": "couple of these though most of them seem",
    "start": "1128830",
    "end": "1130900"
  },
  {
    "text": "to have been in loading and not an",
    "start": "1130900",
    "end": "1133030"
  },
  {
    "text": "actual execution so things are fairly",
    "start": "1133030",
    "end": "1137800"
  },
  {
    "start": "1135000",
    "end": "1205000"
  },
  {
    "text": "good right now but there are two future",
    "start": "1137800",
    "end": "1139480"
  },
  {
    "text": "features of web assembly that I think",
    "start": "1139480",
    "end": "1141340"
  },
  {
    "text": "will change the security landscape of it",
    "start": "1141340",
    "end": "1143530"
  },
  {
    "text": "a lot if they go in one is concurrency",
    "start": "1143530",
    "end": "1146650"
  },
  {
    "text": "I'm right now there's not a lot of",
    "start": "1146650",
    "end": "1148330"
  },
  {
    "text": "threading supported in web assembly it's",
    "start": "1148330",
    "end": "1151150"
  },
  {
    "text": "just JavaScript threading but a lot of",
    "start": "1151150",
    "end": "1152800"
  },
  {
    "text": "people want there to be threading within",
    "start": "1152800",
    "end": "1154570"
  },
  {
    "text": "web assembly and I think this will",
    "start": "1154570",
    "end": "1156340"
  },
  {
    "text": "completely change the security",
    "start": "1156340",
    "end": "1157300"
  },
  {
    "text": "properties of all the code that exists",
    "start": "1157300",
    "end": "1159550"
  },
  {
    "text": "and this will make it much more likely",
    "start": "1159550",
    "end": "1161560"
  },
  {
    "text": "that there are balance issues the",
    "start": "1161560",
    "end": "1163840"
  },
  {
    "text": "there are certain types to use after",
    "start": "1163840",
    "end": "1166210"
  },
  {
    "text": "free issues that sort of thing and we'll",
    "start": "1166210",
    "end": "1168100"
  },
  {
    "text": "also make it a lot more difficult to",
    "start": "1168100",
    "end": "1169570"
  },
  {
    "text": "write secure web assembly code itself",
    "start": "1169570",
    "end": "1171400"
  },
  {
    "text": "there's also a web assembly GC which",
    "start": "1171400",
    "end": "1174520"
  },
  {
    "text": "will probably come in in the future and",
    "start": "1174520",
    "end": "1176260"
  },
  {
    "text": "this is basically to solve the problem",
    "start": "1176260",
    "end": "1178090"
  },
  {
    "text": "where you can't compile Java because I'm",
    "start": "1178090",
    "end": "1180429"
  },
  {
    "text": "cutting up that one slab of memory",
    "start": "1180429",
    "end": "1181960"
  },
  {
    "text": "you're allowed to have is do performance",
    "start": "1181960",
    "end": "1183940"
  },
  {
    "text": "intensive so they think in the future",
    "start": "1183940",
    "end": "1186370"
  },
  {
    "text": "there's going to be a way to request",
    "start": "1186370",
    "end": "1187720"
  },
  {
    "text": "memory a small piece and use it in web",
    "start": "1187720",
    "end": "1190210"
  },
  {
    "text": "assembly and then have it managed by the",
    "start": "1190210",
    "end": "1192039"
  },
  {
    "text": "interpreter and once again I think this",
    "start": "1192039",
    "end": "1194230"
  },
  {
    "text": "will make all the good things about how",
    "start": "1194230",
    "end": "1197169"
  },
  {
    "text": "memory works right now a lot less",
    "start": "1197169",
    "end": "1199779"
  },
  {
    "text": "certain and I think they'll be more",
    "start": "1199779",
    "end": "1200980"
  },
  {
    "text": "balanced issues and that sort of thing",
    "start": "1200980",
    "end": "1202539"
  },
  {
    "text": "if a specific feature goes in um so to",
    "start": "1202539",
    "end": "1206679"
  },
  {
    "start": "1205000",
    "end": "1283000"
  },
  {
    "text": "end off I found several owner abilities",
    "start": "1206679",
    "end": "1209620"
  },
  {
    "text": "in web assembly implementations but",
    "start": "1209620",
    "end": "1212440"
  },
  {
    "text": "funnily enough I actually thought it was",
    "start": "1212440",
    "end": "1214570"
  },
  {
    "text": "pretty good there were definitely some",
    "start": "1214570",
    "end": "1216190"
  },
  {
    "text": "implementations I didn't find any bugs",
    "start": "1216190",
    "end": "1218140"
  },
  {
    "text": "in and considering we're coming from a",
    "start": "1218140",
    "end": "1220210"
  },
  {
    "text": "place we want to run web assembly",
    "start": "1220210",
    "end": "1222309"
  },
  {
    "text": "securely on the web I found there",
    "start": "1222309",
    "end": "1225520"
  },
  {
    "text": "weren't actually that many bugs compared",
    "start": "1225520",
    "end": "1227649"
  },
  {
    "text": "to what I was expecting and I think it's",
    "start": "1227649",
    "end": "1230409"
  },
  {
    "text": "I do know a few things I think it's",
    "start": "1230409",
    "end": "1231789"
  },
  {
    "text": "because web assembly has a limited",
    "start": "1231789",
    "end": "1234279"
  },
  {
    "text": "number of features that are necessary",
    "start": "1234279",
    "end": "1236460"
  },
  {
    "text": "it's because the way they designed the",
    "start": "1236460",
    "end": "1238779"
  },
  {
    "text": "feature is especially things like signal",
    "start": "1238779",
    "end": "1240460"
  },
  {
    "text": "buffers I made it less likely for",
    "start": "1240460",
    "end": "1242080"
  },
  {
    "text": "specific problems to occur and all the",
    "start": "1242080",
    "end": "1244809"
  },
  {
    "text": "features are very well specified and and",
    "start": "1244809",
    "end": "1248049"
  },
  {
    "text": "it's very clear so what will happen to",
    "start": "1248049",
    "end": "1251559"
  },
  {
    "text": "have assembly in the future I don't know",
    "start": "1251559",
    "end": "1253630"
  },
  {
    "text": "I think it's very possible though that",
    "start": "1253630",
    "end": "1255610"
  },
  {
    "text": "it becomes the next flash or JavaScript",
    "start": "1255610",
    "end": "1258309"
  },
  {
    "text": "or Java and I think whether it's secure",
    "start": "1258309",
    "end": "1261130"
  },
  {
    "text": "in the future will depend on which of",
    "start": "1261130",
    "end": "1263289"
  },
  {
    "text": "these features go in and how they're",
    "start": "1263289",
    "end": "1265029"
  },
  {
    "text": "implemented so I hope that job I hope",
    "start": "1265029",
    "end": "1269470"
  },
  {
    "text": "that web assembly does go with the",
    "start": "1269470",
    "end": "1271870"
  },
  {
    "text": "direction of security in the future",
    "start": "1271870",
    "end": "1273659"
  },
  {
    "text": "thanks a lot",
    "start": "1273659",
    "end": "1276570"
  },
  {
    "text": "[Applause]",
    "start": "1276570",
    "end": "1285769"
  }
]