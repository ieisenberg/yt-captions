[
  {
    "text": "yeah good afternoon everybody well thanks for being here despite the very strong competition of the other talks",
    "start": "0",
    "end": "5520"
  },
  {
    "text": "and we're so sorry to keep you away from the pool but this will be shortened easy hopefully so my name is Daniela",
    "start": "5520",
    "end": "12630"
  },
  {
    "text": "I'm in 280 G ETH Zurich but I was formerly at University of Padua where my",
    "start": "12630",
    "end": "18029"
  },
  {
    "text": "co-presenter and res from and my former advisor professor Monroe County and",
    "start": "18029",
    "end": "23240"
  },
  {
    "text": "today we analyze how some small and minor issues that were somehow observed",
    "start": "23240",
    "end": "29189"
  },
  {
    "text": "by the system designers and by many pen testers but never really taken into",
    "start": "29189",
    "end": "34590"
  },
  {
    "text": "account can lead to big problems let's say in particular here complete bypass zones of this mechanism called control",
    "start": "34590",
    "end": "41399"
  },
  {
    "text": "flow card control flow integrity mechanism used by Microsoft Windows",
    "start": "41399",
    "end": "46890"
  },
  {
    "text": "since quite a few years and in place since quite a lot of machines so today",
    "start": "46890",
    "end": "52410"
  },
  {
    "text": "we will give some introduction on control integrity as a general mechanism and control flow guard",
    "start": "52410",
    "end": "58859"
  },
  {
    "text": "as a real world in instantiation of this mitigation and then under I will explain",
    "start": "58859",
    "end": "64530"
  },
  {
    "text": "our attack and we will show it in a demo so let's start as you know our code is",
    "start": "64530",
    "end": "72659"
  },
  {
    "text": "an order the series of statements and they are executed the one after the other however since we all like our software",
    "start": "72659",
    "end": "79020"
  },
  {
    "text": "to do different stuff at from time to time and not always the same thing sometimes there are choices to be made",
    "start": "79020",
    "end": "84869"
  },
  {
    "text": "on what instruction to be executed next because it might be the next one or it",
    "start": "84869",
    "end": "90060"
  },
  {
    "text": "might be very far away or even a previous one and we call these runs of instructions up to a choice blocks as we",
    "start": "90060",
    "end": "97079"
  },
  {
    "text": "depicted here in the white block that you can see it's actually a block and that we depict with a node that will",
    "start": "97079",
    "end": "103920"
  },
  {
    "text": "come useful later and as I said when some instructions such as the call that",
    "start": "103920",
    "end": "109320"
  },
  {
    "text": "I highlighted there modifies this linear control flow the execution goes to",
    "start": "109320",
    "end": "114810"
  },
  {
    "text": "another block and we also depicted this other block with the node and the transition between the two between the",
    "start": "114810",
    "end": "121380"
  },
  {
    "text": "two blocks with an answer and this is because if we eventually do this operation for the whole program we end",
    "start": "121380",
    "end": "128520"
  },
  {
    "text": "up forming a graphic called the control flow graph of course the situation is not always",
    "start": "128520",
    "end": "134510"
  },
  {
    "text": "linear as we show here because sometimes the target of a call is obvious it might be a very simple choice for example with",
    "start": "134510",
    "end": "143360"
  },
  {
    "text": "ifs or switches or iteration it's always a straightforward to understand or sort",
    "start": "143360",
    "end": "148910"
  },
  {
    "text": "of straightforward to understand to where we will go to but sometimes the target isn't clear for example with",
    "start": "148910",
    "end": "155239"
  },
  {
    "text": "indirect calls because the target is a variable whose value we cannot know until run time and this is for example",
    "start": "155239",
    "end": "162800"
  },
  {
    "text": "with function pointers and virtual calls and the very fact that such calls exist",
    "start": "162800",
    "end": "169120"
  },
  {
    "text": "and they come on clear target these two vulnerability because since we cannot just fetch the target from memory and it",
    "start": "169120",
    "end": "178459"
  },
  {
    "text": "needs to be a runtime value then this means that if an attacker is able to control such memory he can divert",
    "start": "178459",
    "end": "184430"
  },
  {
    "text": "control flow to an arbitrary location of his liking and then maybe you know break our software and of course we call this",
    "start": "184430",
    "end": "192860"
  },
  {
    "text": "as we shall hear control flow hijacking and it is common for example in attacks assets of memory corruption attacks and",
    "start": "192860",
    "end": "199269"
  },
  {
    "text": "control flow integrity is the mechanism of saying no well the first node should just go to this set of intended targets",
    "start": "199269",
    "end": "206570"
  },
  {
    "text": "that we marked in green and ensuring that control flow only continues to these locations and when a tackle",
    "start": "206570",
    "end": "213200"
  },
  {
    "text": "diverts con flow control flow as we show here then we say this is a control flow integrity violation and of course",
    "start": "213200",
    "end": "219500"
  },
  {
    "text": "ideally we would like to precisely define all the valid targets and then tightly monitor control flow and in this",
    "start": "219500",
    "end": "227540"
  },
  {
    "text": "way the attacker would be at least limited to perform some set of sort of intended actions and I'm not saying this",
    "start": "227540",
    "end": "234350"
  },
  {
    "text": "will make it secure but of course his life would be at least a bit more difficult however the analysis of this",
    "start": "234350",
    "end": "242750"
  },
  {
    "text": "valid calls a valid target set is undecidable in the general case because pointer aliasing is a thing",
    "start": "242750",
    "end": "248390"
  },
  {
    "text": "fundamentally so we need to resort to approximations and there are many",
    "start": "248390",
    "end": "253700"
  },
  {
    "text": "possible types of approximation one is called the fine grained approximation and let's say this orange block here is",
    "start": "253700",
    "end": "261079"
  },
  {
    "text": "the call set and then we can decide maybe all intended or possible coal sites for coal",
    "start": "261080",
    "end": "269330"
  },
  {
    "text": "targets for disco site and then we mark them as a set and then we can do the same for these other purple block here",
    "start": "269330",
    "end": "275750"
  },
  {
    "text": "and then eventually we can do that for the whole call set of the program ended up ending up with some kind of precise",
    "start": "275750",
    "end": "281750"
  },
  {
    "text": "approximations so they are firing fine-grained in that sense because at least we remember who is calling what or",
    "start": "281750",
    "end": "288560"
  },
  {
    "text": "probably calling what but sometimes of course this is not feasible maybe for performance reasons",
    "start": "288560",
    "end": "293740"
  },
  {
    "text": "so we need to resort to having a coarse-grained set where maybe we",
    "start": "293740",
    "end": "299450"
  },
  {
    "text": "construct a single set for all the possible cosines of the program and then",
    "start": "299450",
    "end": "305150"
  },
  {
    "text": "we say well at least we know that this program in general will just call to these locations or plus anything in the",
    "start": "305150",
    "end": "311780"
  },
  {
    "text": "middle is possible for example we can construct different groups based by the prototype of the functions or by number",
    "start": "311780",
    "end": "318170"
  },
  {
    "text": "of arguments so we have more or less coarse grained control flow mechanisms so this is control flow as a very",
    "start": "318170",
    "end": "325640"
  },
  {
    "text": "high-level overview and one of the most famous control flow integrity mechanisms",
    "start": "325640",
    "end": "332360"
  },
  {
    "text": "for sure is control flow guard by Microsoft it is deployed since Windows",
    "start": "332360",
    "end": "337820"
  },
  {
    "text": "8.1 so this means at least five hundred million machines worldwide probably more it's very difficult to find this precise",
    "start": "337820",
    "end": "346030"
  },
  {
    "text": "datum you know and it is a coarse-grained implementation this means that if there is a single valid target",
    "start": "346030",
    "end": "352370"
  },
  {
    "text": "set for the whole program plus it only protects the forward that is so calls it",
    "start": "352370",
    "end": "358370"
  },
  {
    "text": "doesn't protect the return address system and just to see some internals of",
    "start": "358370",
    "end": "364070"
  },
  {
    "text": "it before I'd want to understand how it works so to enable the operations of",
    "start": "364070",
    "end": "369740"
  },
  {
    "text": "control flow guard we must act in different points of the program so first of course second row",
    "start": "369740",
    "end": "375830"
  },
  {
    "text": "flow guard needs to be activated by the programmer when he writes the code and then specifies some compile time options",
    "start": "375830",
    "end": "381680"
  },
  {
    "text": "and then at compile time there's the main pre-processing needed by control flow guard so it's call is intrument",
    "start": "381680",
    "end": "388190"
  },
  {
    "text": "instrumented to pass the through control flow guard and this means that first we control if the target is valid somehow",
    "start": "388190",
    "end": "395090"
  },
  {
    "text": "and then after this control function does the actual coal however the check is done by",
    "start": "395090",
    "end": "400360"
  },
  {
    "text": "calling a function pointer that it is only populated at runtime and then of",
    "start": "400360",
    "end": "405770"
  },
  {
    "text": "course we need to build these a four dimension the set of valid labelled valid target and we recall that it is a",
    "start": "405770",
    "end": "412910"
  },
  {
    "text": "single set for the whole program this means that we will they will try to see all the possible targets and then they",
    "start": "412910",
    "end": "419600"
  },
  {
    "text": "will be this single target set for the whole program we see here in particular",
    "start": "419600",
    "end": "425740"
  },
  {
    "text": "this is an example of a call instrumented by a control flow guard so",
    "start": "425740",
    "end": "430849"
  },
  {
    "text": "let me let me use the pointer so here we see the function pointer that we want to",
    "start": "430849",
    "end": "437870"
  },
  {
    "text": "call basically and this is moved to us some registers and then this is the checkup method the pointer to the check",
    "start": "437870",
    "end": "443900"
  },
  {
    "text": "function that it is called as with the previous pointer as the first argument so if these check function returns then",
    "start": "443900",
    "end": "451430"
  },
  {
    "text": "you see here we load that read that address into array X and then we jump to",
    "start": "451430",
    "end": "458509"
  },
  {
    "text": "it oops otherwise the check function just faced",
    "start": "458509",
    "end": "463520"
  },
  {
    "text": "faster and basically program abort then at load time we build the a bitmap",
    "start": "463520",
    "end": "472669"
  },
  {
    "text": "from the valid target set and this is for performance reasons so as we saw as",
    "start": "472669",
    "end": "480440"
  },
  {
    "text": "we will see later you can't actually map every single memory location with the",
    "start": "480440",
    "end": "486320"
  },
  {
    "text": "precise information of course because that would be too costly so there's fast text using a bitmap and",
    "start": "486320",
    "end": "492889"
  },
  {
    "text": "then the function pointers for detect functions are populated and then at runtime these function pointers will",
    "start": "492889",
    "end": "498889"
  },
  {
    "text": "point to some check functions in ntdll this is an example of well this is",
    "start": "498889",
    "end": "505580"
  },
  {
    "text": "actually the D check function and we will not go into details but we can just",
    "start": "505580",
    "end": "510800"
  },
  {
    "text": "see that there's some comparisons with this bitmap and then if the function returns it's all good otherwise there's",
    "start": "510800",
    "end": "517969"
  },
  {
    "text": "just fail faster so the internals as I",
    "start": "517969",
    "end": "523219"
  },
  {
    "text": "said you there's a fast attack through a bitmap and this means that two beeps two",
    "start": "523219",
    "end": "528440"
  },
  {
    "text": "beats them up to a 16 align the bite of target address space",
    "start": "528440",
    "end": "534440"
  },
  {
    "text": "and the possible values for these are actually zero zero that means that in",
    "start": "534440",
    "end": "539780"
  },
  {
    "text": "that 16 byte range there's no allowed target for a call for that particular",
    "start": "539780",
    "end": "544790"
  },
  {
    "text": "program so this means is that it that if some some call targets any of those",
    "start": "544790",
    "end": "551270"
  },
  {
    "text": "addresses then the program should not continue and then the other important ones for today's work one zero which",
    "start": "551270",
    "end": "557420"
  },
  {
    "text": "means that there's a single allowed the target and it is the very first instruction because the function the",
    "start": "557420",
    "end": "564740"
  },
  {
    "text": "function represented there is aligned to the first address or one one where all targets are allowed and this means that",
    "start": "564740",
    "end": "572150"
  },
  {
    "text": "that's probably valid the target has a function but it is not aligned as the first instruction so since the precision",
    "start": "572150",
    "end": "579020"
  },
  {
    "text": "of this mechanism is 16 bytes this means that if you need to allow to jump",
    "start": "579020",
    "end": "585110"
  },
  {
    "text": "everywhere in that range because there's no way to specify the middle because that's the granularity of the mechanism",
    "start": "585110",
    "end": "591460"
  },
  {
    "text": "so here are some examples this is zero zero and as you can see there's a",
    "start": "591460",
    "end": "596600"
  },
  {
    "text": "function function 1 and it started as the at the first address of these bite",
    "start": "596600",
    "end": "601730"
  },
  {
    "text": "range but of course it is not allowed so we just mark it in white but when it is 1 0 we marking read the first",
    "start": "601730",
    "end": "608780"
  },
  {
    "text": "instruction because that's that's the only valid address of for the call however in this situation for example we",
    "start": "608780",
    "end": "615050"
  },
  {
    "text": "have 1 1 and this means that the allowed function the intended target is function",
    "start": "615050",
    "end": "621530"
  },
  {
    "text": "2 but it starts in the middle so the whole range has to be valid to enable the call this is a recap of all these",
    "start": "621530",
    "end": "630920"
  },
  {
    "text": "mechanism basically we can see some instrumented code on the left and there's decode to the check function",
    "start": "630920",
    "end": "639470"
  },
  {
    "text": "pointer with the function by the intended function pointer so the code",
    "start": "639470",
    "end": "644480"
  },
  {
    "text": "that the program wants to make as a first argument and I contend the function pointer is followed and then",
    "start": "644480",
    "end": "651140"
  },
  {
    "text": "the actual function is called and it's checking against the bitmap in the top then if these return does the actual",
    "start": "651140",
    "end": "657950"
  },
  {
    "text": "call that actually follows the pointer and then does the call target so I will",
    "start": "657950",
    "end": "663740"
  },
  {
    "text": "now live under to explain the known attacks against control control flow guard and then our",
    "start": "663740",
    "end": "669770"
  },
  {
    "text": "exploit okay so control flow guard actually has been",
    "start": "669770",
    "end": "677120"
  },
  {
    "text": "attacked a lot of times in a lot of different ways I'm going to give an",
    "start": "677120",
    "end": "682910"
  },
  {
    "text": "overview of them not really going to the details one of the first attacks on CFG",
    "start": "682910",
    "end": "690550"
  },
  {
    "text": "was that you had you can have modules that are not built with CFG and any",
    "start": "690550",
    "end": "696770"
  },
  {
    "text": "target inside those modules is allowed for compatibility reasons so you can reuse code from that also and this is so",
    "start": "696770",
    "end": "705590"
  },
  {
    "text": "actually something that we're going to use control flow graph does not check return addresses so it does not check",
    "start": "705590",
    "end": "711800"
  },
  {
    "text": "the integrity of the return addresses just forward calls so if you can't override return addresses you can bypass",
    "start": "711800",
    "end": "717530"
  },
  {
    "text": "it that there are so use with just-in-time compiler code basically the",
    "start": "717530",
    "end": "724640"
  },
  {
    "text": "mappings might not be set up in the proper way or the just-in-time compiler",
    "start": "724640",
    "end": "730850"
  },
  {
    "text": "code might not be instrumented correctly also sometimes some targets are allowed",
    "start": "730850",
    "end": "737870"
  },
  {
    "text": "but they are actually unintended in certain code paths and they're also a",
    "start": "737870",
    "end": "745520"
  },
  {
    "text": "few more specific vulnerabilities about basically the right ability of some",
    "start": "745520",
    "end": "751940"
  },
  {
    "text": "function pointers that are essential for the CFG now most of those attacks have been",
    "start": "751940",
    "end": "757610"
  },
  {
    "text": "fixed or either very very application specific so what we wanted to do was",
    "start": "757610",
    "end": "763280"
  },
  {
    "text": "find something that was more generic right yeah there are a lot so we borrow",
    "start": "763280",
    "end": "772370"
  },
  {
    "text": "a quote here and when the pointer hits the epilogue we're gonna see some real hacks we're presenting back to the",
    "start": "772370",
    "end": "778670"
  },
  {
    "text": "epilogue now what's the idea see that you have a target in a program that is",
    "start": "778670",
    "end": "786740"
  },
  {
    "text": "allowed right it's a valid target but it's not aligned to 16 bytes now what Daniela was seen earlier if you",
    "start": "786740",
    "end": "794180"
  },
  {
    "text": "have a target that's allowed that's aligned to 16 bytes then the bitman can",
    "start": "794180",
    "end": "799750"
  },
  {
    "text": "be set to one zero and that target can be allowed very precisely but if he's",
    "start": "799750",
    "end": "805420"
  },
  {
    "text": "not aligned the only option that windows as in this current implementation is to",
    "start": "805420",
    "end": "811660"
  },
  {
    "text": "actually allow the whole sixteen byte range around it right now this looks",
    "start": "811660",
    "end": "818110"
  },
  {
    "text": "like a small imprecision and it was actually noted back in 2014 but no one",
    "start": "818110",
    "end": "825040"
  },
  {
    "text": "really exploited it but maybe we can find some unintended code inside those",
    "start": "825040",
    "end": "831070"
  },
  {
    "text": "16 bytes right we check and the underlying targets were still present in",
    "start": "831070",
    "end": "836140"
  },
  {
    "text": "a bunch of system libraries now since the bitmap is processed wide if you have",
    "start": "836140",
    "end": "841600"
  },
  {
    "text": "a valid target in a library that's loaded into the process then that target is valid for all code in the process so",
    "start": "841600",
    "end": "850020"
  },
  {
    "text": "this is basically what happens I'm sorry for the call of a bit washout this is",
    "start": "850020",
    "end": "857200"
  },
  {
    "text": "basically what happens when you have an online target function Chui is at",
    "start": "857200",
    "end": "862630"
  },
  {
    "text": "address thousands have X thousand seven for example which is not aligned and so",
    "start": "862630",
    "end": "867970"
  },
  {
    "text": "the whole sixteen byte range around it is allowed that means that some instructions farther into function Xu",
    "start": "867970",
    "end": "876340"
  },
  {
    "text": "are aligned are allowed and also some fast some instructions from the previous",
    "start": "876340",
    "end": "881350"
  },
  {
    "text": "function now to understand our attack we're going to go a bit back to the basics how a function is made up right",
    "start": "881350",
    "end": "888010"
  },
  {
    "text": "you have three parts you have a prologue about the in epilogue the prologue sets up the stack for the function and can",
    "start": "888010",
    "end": "896080"
  },
  {
    "text": "also save some registers then you have a body which does the actual business",
    "start": "896080",
    "end": "901210"
  },
  {
    "text": "logic for the function and finally you have an epilogue which D allocates the stack that was allocated in the prologue",
    "start": "901210",
    "end": "907360"
  },
  {
    "text": "and it also restores some registers now another thing to note is how the",
    "start": "907360",
    "end": "913120"
  },
  {
    "text": "compiler lays out those functions those are laid out one after the other right so in function Chu if function Xu is an",
    "start": "913120",
    "end": "922330"
  },
  {
    "text": "allowed online target then the things that we can reach through this imprecision are basically",
    "start": "922330",
    "end": "928480"
  },
  {
    "text": "some instructions into the prologue of function shoe or the epilogue of the",
    "start": "928480",
    "end": "934299"
  },
  {
    "text": "previous function of function one now prologues are a bit boring I'm sure you",
    "start": "934299",
    "end": "940480"
  },
  {
    "text": "can probably do some stuff with prologues but they're really specific to",
    "start": "940480",
    "end": "945489"
  },
  {
    "text": "the function that you're using but epilogues they are very standard and what they do they basically increment",
    "start": "945489",
    "end": "952449"
  },
  {
    "text": "the stack pointer the delegate space from the stack and then they return and return instruction takes the return just",
    "start": "952449",
    "end": "958989"
  },
  {
    "text": "from the stack pointers from the stack so you are messing with the stack and then doing control flow based on the",
    "start": "958989",
    "end": "965259"
  },
  {
    "text": "stack which is not checked by CFG so that could be interesting right and this",
    "start": "965259",
    "end": "970449"
  },
  {
    "text": "is exactly what we're doing so we give a name actually to those epilogues we call",
    "start": "970449",
    "end": "978399"
  },
  {
    "text": "them PR gadget that's simply stands for pop rat right and this is an example",
    "start": "978399",
    "end": "984429"
  },
  {
    "text": "it's the same figure as before but I've outlined the epilogue of the previous",
    "start": "984429",
    "end": "989859"
  },
  {
    "text": "function and you see that you have an add instruction that increments the stack pointer by 64 bytes then you have",
    "start": "989859",
    "end": "996669"
  },
  {
    "text": "a couple pop instructions and those are eight bytes each and then you have a return right so at the high level what",
    "start": "996669",
    "end": "1003179"
  },
  {
    "text": "that chunk of code is doing it it's increasing the stack pointer by a device",
    "start": "1003179",
    "end": "1009269"
  },
  {
    "text": "and they're returning and we call that a p80 our gadget the r0 just because there's",
    "start": "1009269",
    "end": "1015929"
  },
  {
    "text": "an alternative encoding for rat with an immediate to increment the stack pointer afterwards which we don't care about",
    "start": "1015929",
    "end": "1021269"
  },
  {
    "text": "right now now another thing to note is an epilogue like that can actually",
    "start": "1021269",
    "end": "1027870"
  },
  {
    "text": "generate more than one PR gadget you have the P ad that we just saw but you",
    "start": "1027870",
    "end": "1032970"
  },
  {
    "text": "can also generate that P 16 if you just take the two pops in the rat or a p8 if you just take the last pop and the rat",
    "start": "1032970",
    "end": "1039600"
  },
  {
    "text": "right now how can we use those code sequences to actually hijack execution",
    "start": "1039600",
    "end": "1045029"
  },
  {
    "text": "and free ourselves of control for guard well see and we're going to see that",
    "start": "1045029",
    "end": "1052080"
  },
  {
    "text": "this is actually feasible the attacker has some control data further down the stack now we corrupt some code because",
    "start": "1052080",
    "end": "1060720"
  },
  {
    "text": "we are memory corruption vulnerability we corrupt some call and make it point to appear gadget now that is going to pass",
    "start": "1060720",
    "end": "1066410"
  },
  {
    "text": "CFG checks right and it's going to increment the stack pointer and people that stack pointer into attacker control",
    "start": "1066410",
    "end": "1073280"
  },
  {
    "text": "data before returning so now the returns s is attacker control and C F G is",
    "start": "1073280",
    "end": "1079100"
  },
  {
    "text": "bypassed so it's actually a pretty simple idea so this is a stack frame on",
    "start": "1079100",
    "end": "1085640"
  },
  {
    "text": "32-bit right we're going to look at 32-bit first 64-bit is up next because",
    "start": "1085640",
    "end": "1091220"
  },
  {
    "text": "it's a little bit more difficult at the top of the stack you have your arguments",
    "start": "1091220",
    "end": "1097190"
  },
  {
    "text": "you have your locals further down and when you call the PR gadget the first",
    "start": "1097190",
    "end": "1102680"
  },
  {
    "text": "thing is obviously the return address now the pure gadget is going to increment that stack pointer so maybe",
    "start": "1102680",
    "end": "1108620"
  },
  {
    "text": "before returning it's going to point to say the argument second argument see that you control that argument which is",
    "start": "1108620",
    "end": "1115310"
  },
  {
    "text": "actually pretty common when you especially you know when corrupting stuff like virtual tables in",
    "start": "1115310",
    "end": "1121030"
  },
  {
    "text": "object-oriented code well you just got you just got flow control right because",
    "start": "1121030",
    "end": "1128750"
  },
  {
    "text": "you will return to an tak a control address so instead of pointing the time",
    "start": "1128750",
    "end": "1134090"
  },
  {
    "text": "machine to the future we now set up pointer to an active lock pretty easy right well not exactly",
    "start": "1134090",
    "end": "1140740"
  },
  {
    "text": "so 64-bit has some issues the first four",
    "start": "1140740",
    "end": "1146780"
  },
  {
    "text": "arguments are not on the stack right and honestly finding function with five or",
    "start": "1146780",
    "end": "1153440"
  },
  {
    "text": "more arguments that you don't always have the possibility to do that now we",
    "start": "1153440",
    "end": "1161360"
  },
  {
    "text": "could go further down say into the local variables but the thing is smaller pi",
    "start": "1161360",
    "end": "1169220"
  },
  {
    "text": "gadgets are more common because you have a limited range that you can go backwards from a functions entry point",
    "start": "1169220",
    "end": "1175280"
  },
  {
    "text": "so we want to stay as close to the top of the stack as possible there's also another issue which is called our PA and",
    "start": "1175280",
    "end": "1182330"
  },
  {
    "text": "our PA stands for a register parameter area and it's that area at the top of",
    "start": "1182330",
    "end": "1188510"
  },
  {
    "text": "the stack in the color stack frame we're basically the world were arguments",
    "start": "1188510",
    "end": "1194700"
  },
  {
    "text": "on to a two-bit and what the are PA is from in the microsoft windows calling convention is basically spilling a",
    "start": "1194700",
    "end": "1202170"
  },
  {
    "text": "registers that the called function can spill registers into it now the problem",
    "start": "1202170",
    "end": "1208710"
  },
  {
    "text": "is we cannot really guarantee that that is initialized or contains any attacker",
    "start": "1208710",
    "end": "1214590"
  },
  {
    "text": "control data so the first idea that we had was okay",
    "start": "1214590",
    "end": "1220530"
  },
  {
    "text": "let's find some code that spills some attacker control data into that our PA",
    "start": "1220530",
    "end": "1225690"
  },
  {
    "text": "and then just chain a PR gadget somehow the problem with that is if those are",
    "start": "1225690",
    "end": "1232200"
  },
  {
    "text": "cause you're going to have a spilling that our PA but then the PR gadget will",
    "start": "1232200",
    "end": "1237960"
  },
  {
    "text": "be father will be you will use an RPA further up the stack which won't have your control data in it so that doesn't",
    "start": "1237960",
    "end": "1247200"
  },
  {
    "text": "really work but then we found the way tell jumps so so an optimization that",
    "start": "1247200",
    "end": "1256590"
  },
  {
    "text": "compilers do is if you have a call at the end of the phone of a function and",
    "start": "1256590",
    "end": "1262340"
  },
  {
    "text": "which is immediately followed by return what they can do is actually swap things",
    "start": "1262340",
    "end": "1267630"
  },
  {
    "text": "around and deallocate the stack before making the call and replace the call",
    "start": "1267630",
    "end": "1272970"
  },
  {
    "text": "with the jump so that is totally equivalent you basically we use the return address but what it means to us",
    "start": "1272970",
    "end": "1280530"
  },
  {
    "text": "is that it allows to transfer control from the function say you can corrupt",
    "start": "1280530",
    "end": "1286470"
  },
  {
    "text": "that a jump you can transfer control at the same stack gap and what so what we",
    "start": "1286470",
    "end": "1295770"
  },
  {
    "text": "did was we found some functions that we call a Skagit that spill attack a control data to the our PA and that end",
    "start": "1295770",
    "end": "1303480"
  },
  {
    "text": "with a tail jump and the idea here is that use the tail jump and I know it",
    "start": "1303480",
    "end": "1310260"
  },
  {
    "text": "might sound a bit unclear right now but I will have an example in the next slide and we're going to use that tail jump to",
    "start": "1310260",
    "end": "1316680"
  },
  {
    "text": "connect to change ourselves to a pure gadget which will then use the spill data to highjack control flow",
    "start": "1316680",
    "end": "1325200"
  },
  {
    "text": "so at the top there's a caller right and",
    "start": "1325200",
    "end": "1331620"
  },
  {
    "text": "it calls us some function pointer that we have control over right because of some memory corruption polynomial we",
    "start": "1331620",
    "end": "1338620"
  },
  {
    "text": "also have control of a register like RDX which is the second argument right let let's just keep the hypothesis that we",
    "start": "1338620",
    "end": "1345460"
  },
  {
    "text": "control an argument to a function good so the S gadget or the code sequence",
    "start": "1345460",
    "end": "1351220"
  },
  {
    "text": "that we found that is a CFG valid target is actually a whole function right it's",
    "start": "1351220",
    "end": "1357670"
  },
  {
    "text": "often a virtual function and the first couple instructions they spill registers",
    "start": "1357670",
    "end": "1363880"
  },
  {
    "text": "to the RPA right and then it goes on and you need allocations that does some",
    "start": "1363880",
    "end": "1368920"
  },
  {
    "text": "stuff at the end it makes another call right and say that we can corrupt that",
    "start": "1368920",
    "end": "1377050"
  },
  {
    "text": "call too which is actually a good assumption if you are hijacking objects because it's going through the same",
    "start": "1377050",
    "end": "1382450"
  },
  {
    "text": "virtual table now it will yell locate the stack so when you get to that final",
    "start": "1382450",
    "end": "1388510"
  },
  {
    "text": "jump in yes gadget the stack pointer is going to be exactly at the same position it was at the beginning of the ass",
    "start": "1388510",
    "end": "1395350"
  },
  {
    "text": "gadget so now if we chain up your gadget which increment the stack pointer by 16",
    "start": "1395350",
    "end": "1401920"
  },
  {
    "text": "bytes and you can see that that RDX register that we control was spilled at 16 bytes from the stack pointer then we",
    "start": "1401920",
    "end": "1409360"
  },
  {
    "text": "can apply our the same technique that we had entered to it and get control by",
    "start": "1409360",
    "end": "1415270"
  },
  {
    "text": "basically pivoting the return address so",
    "start": "1415270",
    "end": "1420640"
  },
  {
    "text": "those were there were all the tags and this is the new attack you just need to control an argument to our corrupt",
    "start": "1420640",
    "end": "1426280"
  },
  {
    "text": "indirect call and ever module that's loaded in memory with the SMP our",
    "start": "1426280",
    "end": "1434080"
  },
  {
    "text": "gadgets so the next thing we did was okay let's sorry okay yeah",
    "start": "1434080",
    "end": "1444760"
  },
  {
    "text": "so the next thing we asked ourselves was okay how many gadgets are there in",
    "start": "1444760",
    "end": "1450230"
  },
  {
    "text": "Windows is this actually common so for PA gadgets we basically did some Bama",
    "start": "1450230",
    "end": "1455990"
  },
  {
    "text": "matching they're really standard for s gadget we use some symbolic execution",
    "start": "1455990",
    "end": "1461390"
  },
  {
    "text": "taint tracking which is actually some of the ugliest code we've ever written but it works so what we found was this so on",
    "start": "1461390",
    "end": "1473330"
  },
  {
    "text": "32-bit we got 57 period those are duplicated numbers by the way",
    "start": "1473330",
    "end": "1478960"
  },
  {
    "text": "in libraries such as the C runtime so the C runtime is done in basically every",
    "start": "1478960",
    "end": "1484940"
  },
  {
    "text": "single program on the system and on 32-bit you have PR gadgets in pure gadgets in there which means every",
    "start": "1484940",
    "end": "1491929"
  },
  {
    "text": "single application the system is vulnerable to this on 64-bit you don't",
    "start": "1491929",
    "end": "1498380"
  },
  {
    "text": "have it in the seventh time it that would be nice but but you do have it in like",
    "start": "1498380",
    "end": "1504020"
  },
  {
    "text": "JavaScript engines you do have it in media codecs we actually in the demo that we're going to show later we are",
    "start": "1504020",
    "end": "1509750"
  },
  {
    "text": "using pure gazetteer gadgets from media codec so those are still high value",
    "start": "1509750",
    "end": "1515210"
  },
  {
    "text": "targets like web browsers video players whatnot and like I was saying earlier if",
    "start": "1515210",
    "end": "1521780"
  },
  {
    "text": "you lower the vulnerable library I mean it's not vulnerable itself but if you know if you know the library that has",
    "start": "1521780",
    "end": "1528230"
  },
  {
    "text": "those gadgets then the technique can be applied on a whole program because the bitmap is per process for s gadgets we",
    "start": "1528230",
    "end": "1536480"
  },
  {
    "text": "found a lot of them really standard singleness of instructions they use the",
    "start": "1536480",
    "end": "1544130"
  },
  {
    "text": "spell registers we use symbol execution because they have more variability in",
    "start": "1544130",
    "end": "1549260"
  },
  {
    "text": "them but in the end you know you have JavaScript engines you have HTML parsers",
    "start": "1549260",
    "end": "1554900"
  },
  {
    "text": "you have Skype codecs I think we found some in office yeah also office so to",
    "start": "1554900",
    "end": "1563650"
  },
  {
    "text": "show that this is not just theory we apply this to an edge exploit right now",
    "start": "1563650",
    "end": "1572390"
  },
  {
    "text": "those are not new vulnerabilities those are pretty old vulnerabilities the thing is we want to show that we can",
    "start": "1572390",
    "end": "1578970"
  },
  {
    "text": "use our technique as the control flow guard bypass stage in a complete exploit right and those are good because they",
    "start": "1578970",
    "end": "1587129"
  },
  {
    "text": "have publicly available proof of concept code so it's quicker to write an exploit for them we have an info league which is",
    "start": "1587129",
    "end": "1595740"
  },
  {
    "text": "used to bit memory randomization and we have an arbitrary memory read/write to",
    "start": "1595740",
    "end": "1602610"
  },
  {
    "text": "corrupt things now the first thing that we do is we select the P R and s gadget",
    "start": "1602610",
    "end": "1611340"
  },
  {
    "text": "that we're going to use so Fred for edge we chose a physics thing gadget from the",
    "start": "1611340",
    "end": "1618389"
  },
  {
    "text": "mpeg-2 video codec and the trick here is that you can get edge to load that codec",
    "start": "1618389",
    "end": "1624750"
  },
  {
    "text": "by just embedding an mpeg-4 video to the page right then we use the Ness gadget",
    "start": "1624750",
    "end": "1631889"
  },
  {
    "text": "from chakra the JavaScript engine which we are exploiting which spills the second argument to our SP + 16 so it's a",
    "start": "1631889",
    "end": "1639029"
  },
  {
    "text": "it's actually kind of the same of the example I showed earlier where is Bella",
    "start": "1639029",
    "end": "1644309"
  },
  {
    "text": "+ is thin and then it makes at the end you have a tail jump through the same",
    "start": "1644309",
    "end": "1651750"
  },
  {
    "text": "virtual table that through our bicycle corrupted virtual table so we can control that too and we can change up",
    "start": "1651750",
    "end": "1659190"
  },
  {
    "text": "your gadget to it now this is standard this doesn't really isn't really part of",
    "start": "1659190",
    "end": "1666720"
  },
  {
    "text": "our technique just all the things you need to actually write up an exploit we",
    "start": "1666720",
    "end": "1674190"
  },
  {
    "text": "have an SLR bypass stage so for chakra you just flick cold addresses from",
    "start": "1674190",
    "end": "1679259"
  },
  {
    "text": "virtual tables and you randomize it from for the video codec we find where it is",
    "start": "1679259",
    "end": "1685950"
  },
  {
    "text": "in memory by going back all the way to PI funny ntdll it has a list of loaded",
    "start": "1685950",
    "end": "1691919"
  },
  {
    "text": "modules and you can get the address from there and this is probably the most",
    "start": "1691919",
    "end": "1697440"
  },
  {
    "text": "crucial part so we said we need to have gadgets in memory and we do because we",
    "start": "1697440",
    "end": "1703950"
  },
  {
    "text": "can load that video codec and yes gadgets are plentiful and we need to control arguments so on",
    "start": "1703950",
    "end": "1710929"
  },
  {
    "text": "chakra which is the JavaScript engine of edge that we're exploiting it's not easy",
    "start": "1710929",
    "end": "1718500"
  },
  {
    "text": "to find calls that have full 64-bit or control arguments you can have 32-bit",
    "start": "1718500",
    "end": "1724980"
  },
  {
    "text": "control arguments with things like array indexes for 64-bit arguments you have",
    "start": "1724980",
    "end": "1730529"
  },
  {
    "text": "those VARs which are mixed between a JavaScript number and an object type",
    "start": "1730529",
    "end": "1737399"
  },
  {
    "text": "floats to save memory basically but we can actually use our memory corruption",
    "start": "1737399",
    "end": "1743519"
  },
  {
    "text": "vulnerability to corrupt some VARs into",
    "start": "1743519",
    "end": "1748559"
  },
  {
    "text": "an array and actually get control arguments to a function so now we have all the pieces to the power source we",
    "start": "1748559",
    "end": "1754259"
  },
  {
    "text": "have the gadgets we have control arguments to functions and we can start",
    "start": "1754259",
    "end": "1760980"
  },
  {
    "text": "building our chain and I mean this is",
    "start": "1760980",
    "end": "1766350"
  },
  {
    "text": "pretty confusing at first but basically we hijack a virtual table",
    "start": "1766350",
    "end": "1772110"
  },
  {
    "text": "we're using a memory corruption vulnerability set up our chain where we",
    "start": "1772110",
    "end": "1777330"
  },
  {
    "text": "have an ass gadget fold up by a PR gadget and that way we can hijack",
    "start": "1777330",
    "end": "1783330"
  },
  {
    "text": "control and this is basically a visualization of the whole exploit you",
    "start": "1783330",
    "end": "1790980"
  },
  {
    "text": "have your fake virtual table with addresses of the P R and s gadget so you",
    "start": "1790980",
    "end": "1796529"
  },
  {
    "text": "start that chain and you get control of an instruction pointer another point is",
    "start": "1796529",
    "end": "1802889"
  },
  {
    "text": "just standard exploitation techniques you do a stack pivot you run a rope chain and end up with shell code so what",
    "start": "1802889",
    "end": "1809639"
  },
  {
    "text": "we're actually going to do now is demo so we actually have two demos the first",
    "start": "1809639",
    "end": "1816389"
  },
  {
    "text": "one I'm gonna show how we can get complete control of the instruction pointer even if CFG is enabled on edge edge is",
    "start": "1816389",
    "end": "1825870"
  },
  {
    "text": "just an example but it's better than just some toy application and next I'm",
    "start": "1825870",
    "end": "1832559"
  },
  {
    "text": "actually gonna launch the full exploit which I mean it's fun even though it's",
    "start": "1832559",
    "end": "1837840"
  },
  {
    "text": "nothing it's not really important for us so if I",
    "start": "1837840",
    "end": "1844870"
  },
  {
    "text": "can get this to wake up maybe okay yeah",
    "start": "1844870",
    "end": "1851320"
  },
  {
    "text": "woke up okay so",
    "start": "1851320",
    "end": "1857220"
  },
  {
    "text": "still they yelled on this again okay so",
    "start": "1866670",
    "end": "1873510"
  },
  {
    "text": "what we're going to see is there will be a video that's floating in the background and that's just to load up",
    "start": "1873510",
    "end": "1879600"
  },
  {
    "text": "the codec that we take the PR gadgets for there will be an alert that pops up pops up that is just for me to just",
    "start": "1879600",
    "end": "1887130"
  },
  {
    "text": "pause this just before launching the attack after setting everything up that just for me to attach the debugger to",
    "start": "1887130",
    "end": "1893430"
  },
  {
    "text": "edge and then when I click OK on that it's it's going to launch it so",
    "start": "1893430",
    "end": "1902030"
  },
  {
    "text": "obviously now I can actually see there",
    "start": "1902810",
    "end": "1911180"
  },
  {
    "text": "so",
    "start": "1911180",
    "end": "1914180"
  },
  {
    "text": "okay so now launch it and this is the",
    "start": "1925000",
    "end": "1932770"
  },
  {
    "text": "instruction pointer this is with CFG enabled and this is definitely not",
    "start": "1932770",
    "end": "1938049"
  },
  {
    "text": "something that will be valid we have total control over this instruction pointer completely bypass now yeah",
    "start": "1938049",
    "end": "1947980"
  },
  {
    "text": "we're also going to do the yell full exploit but but I mean this is this is",
    "start": "1947980",
    "end": "1953440"
  },
  {
    "text": "the attack we have we have completely bypass CFG so now wait did I lose my",
    "start": "1953440",
    "end": "1967240"
  },
  {
    "text": "mouse pointer [Music]",
    "start": "1967240",
    "end": "1971018"
  },
  {
    "text": "snapshot",
    "start": "1975529",
    "end": "1978529"
  },
  {
    "text": "okay",
    "start": "1988220",
    "end": "1991220"
  },
  {
    "text": "okay so now so again the what I showed",
    "start": "2004890",
    "end": "2014650"
  },
  {
    "text": "you earlier where a fully controlled instruction pointer that's the actual attack I mean this is not like a new",
    "start": "2014650",
    "end": "2023010"
  },
  {
    "text": "vulnerability for doing complete code execution from a browser no it's just one piece to write exploit basically to",
    "start": "2023010",
    "end": "2031060"
  },
  {
    "text": "bypass the mitigations when writing exploit and we just wrote a small exploit so if I run it I get a fight",
    "start": "2031060",
    "end": "2041410"
  },
  {
    "text": "created on the system because I'm running shuttle okay so I think that the",
    "start": "2041410",
    "end": "2046420"
  },
  {
    "text": "server life flows come on okay whatever",
    "start": "2046420",
    "end": "2052230"
  },
  {
    "text": "my audience yeah well I'm gonna leave it",
    "start": "2052230",
    "end": "2057250"
  },
  {
    "text": "up to you yeah just to summarize so this",
    "start": "2057250",
    "end": "2064600"
  },
  {
    "text": "concludes our talk and the main points so what what is called the sound bytes for this talk which we believe are the",
    "start": "2064600",
    "end": "2071260"
  },
  {
    "text": "main takeaways for for this work so I'm sure the Microsoft really pen test is",
    "start": "2071260",
    "end": "2077560"
  },
  {
    "text": "his control flow guard mechanism but as a general reminder for everybody attack",
    "start": "2077560",
    "end": "2083050"
  },
  {
    "text": "your mitigations because of course they are going to be the first thing to be tried to be attacked by someone and the",
    "start": "2083050",
    "end": "2090669"
  },
  {
    "text": "second and real point is check your assumptions so your mitigation is going to have some assumptions for sure",
    "start": "2090670",
    "end": "2096940"
  },
  {
    "text": "because it's not going to be some magic complete mechanism what was the assumption here the assumption here is",
    "start": "2096940",
    "end": "2102430"
  },
  {
    "text": "that functions should be aligned and if not aligned then what is what can be",
    "start": "2102430",
    "end": "2109510"
  },
  {
    "text": "called by them not being a lighter should aligned should not be vulnerable and this is what didn't happen here",
    "start": "2109510",
    "end": "2116710"
  },
  {
    "text": "because just you know windows libraries were full of alignments let's say and",
    "start": "2116710",
    "end": "2122560"
  },
  {
    "text": "what we say is the third point is that be careful in what you just say well it's not that dangerous it's just a",
    "start": "2122560",
    "end": "2128110"
  },
  {
    "text": "small pointers just a small imprecision because what seemed a small issue at the beginning when we started investigating",
    "start": "2128110",
    "end": "2134830"
  },
  {
    "text": "these and what was actually you know shrugged off as some minor",
    "start": "2134830",
    "end": "2140480"
  },
  {
    "text": "issues not important noted in many talks but never actually exploited might be",
    "start": "2140480",
    "end": "2146030"
  },
  {
    "text": "not so small after all since it led us to complete bypass of the mechanism so",
    "start": "2146030",
    "end": "2152120"
  },
  {
    "text": "well thank you this concludes our movie let's say I'm Daniella he's andrea",
    "start": "2152120",
    "end": "2157610"
  },
  {
    "text": "professor professor Monroe County back home in Padova and these are our email addresses if you have any more questions",
    "start": "2157610",
    "end": "2164300"
  },
  {
    "text": "thank you and we'll be happy to take questions well if no yep so for",
    "start": "2164300",
    "end": "2188570"
  },
  {
    "text": "bypassing CFG I don't know how much it took for like the idea but then you know",
    "start": "2188570",
    "end": "2196190"
  },
  {
    "text": "writing the code for finding the gadgets and all that I it didn't really take long right I think can probably do that",
    "start": "2196190",
    "end": "2203990"
  },
  {
    "text": "in a week or less then writing the edge exploit a few days but but that's not",
    "start": "2203990",
    "end": "2209360"
  },
  {
    "text": "really not really the point but yeah it's in the end it's a very very simple",
    "start": "2209360",
    "end": "2214940"
  },
  {
    "text": "attack it's it's more finding the right combination oh now the other question",
    "start": "2214940",
    "end": "2228040"
  },
  {
    "text": "well if so we'll be happy to take questions offline and thank you again",
    "start": "2228040",
    "end": "2233920"
  }
]