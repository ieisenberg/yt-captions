[
  {
    "text": "[Music]",
    "start": "1180",
    "end": "14730"
  },
  {
    "text": "hi everyone uh thank you for joining our talk uh we are happy today to share our notes on",
    "start": "16640",
    "end": "22640"
  },
  {
    "text": "the exploitation of zero day webkit vulnerabilities on the playstation 4.",
    "start": "22640",
    "end": "28800"
  },
  {
    "text": "uh here is the outline of the talk after a brief introduction we'll present the",
    "start": "29119",
    "end": "34559"
  },
  {
    "text": "ps4 attack surface as well as the previous research in this field then represent our bug and the",
    "start": "34559",
    "end": "42399"
  },
  {
    "text": "exploitation of that particular bug requires a deep understanding of the primary heap allocator so we'll present how fast malloc works",
    "start": "42399",
    "end": "50079"
  },
  {
    "text": "uh then we'll present our exploitation strategy and give a little demo and finally we'll conclude this talk and",
    "start": "50079",
    "end": "56719"
  },
  {
    "text": "present what we planned next uh before we start",
    "start": "56719",
    "end": "62640"
  },
  {
    "text": "let us introduce ourselves a meditating and i will give this talk with contamir",
    "start": "62640",
    "end": "68320"
  },
  {
    "text": "we are both security researcher at syn active an office security company based in france and we are both",
    "start": "68320",
    "end": "75680"
  },
  {
    "text": "part of the reverse engineering team working mainly on vulnerability research",
    "start": "75680",
    "end": "81840"
  },
  {
    "text": "okay this is important please note that we do not this occur that this research",
    "start": "81920",
    "end": "88320"
  },
  {
    "text": "is done purely for educational purpose and we do not help support or endorse by any means to",
    "start": "88320",
    "end": "94320"
  },
  {
    "text": "break the copyright law okay now how all of this started um",
    "start": "94320",
    "end": "101520"
  },
  {
    "text": "our internal fuzzer have reported a webkit bug and we decided to give it a try on a",
    "start": "101520",
    "end": "106960"
  },
  {
    "text": "device like the ps4 why that because despite an active console hacking",
    "start": "106960",
    "end": "112840"
  },
  {
    "text": "community there is only few public exploits and we want to know how hard is it to",
    "start": "112840",
    "end": "118799"
  },
  {
    "text": "exploit such a vulnerability on device like the ps4 so the main goal the main goal of the",
    "start": "118799",
    "end": "125840"
  },
  {
    "text": "tour today is to give a work through on the exploitation of a zero day webkit vulnerability on the",
    "start": "125840",
    "end": "132480"
  },
  {
    "text": "playstation 4. okay now let's move to the attack surface part",
    "start": "132480",
    "end": "139760"
  },
  {
    "text": "here the browser is probably the most common entry point that's what we did we can also attack the ps4 through",
    "start": "139920",
    "end": "147760"
  },
  {
    "text": "game saves or decide to attack directly the camera which is actually freebsd camera",
    "start": "147760",
    "end": "154480"
  },
  {
    "text": "for example one can attack the usb the usb wi-fi or the bluetooth stack",
    "start": "154480",
    "end": "161120"
  },
  {
    "text": "now if we consider attacking a userland process a typical exploit chain combines a",
    "start": "161120",
    "end": "167040"
  },
  {
    "text": "webkit exploit to get code execution in the context of the render process",
    "start": "167040",
    "end": "172560"
  },
  {
    "text": "then find a way to bypass the sandbox and run a kernel exploit",
    "start": "172560",
    "end": "178239"
  },
  {
    "text": "now as well as we say the ps4 browser is based on webkits and the renderer process is",
    "start": "178239",
    "end": "184959"
  },
  {
    "text": "unboxed there is no jit which means that it could be a little bit harder to get",
    "start": "184959",
    "end": "190800"
  },
  {
    "text": "code execution however there is no modern mitigation like giga cage or the randomization of",
    "start": "190800",
    "end": "196800"
  },
  {
    "text": "structure id which means that it could be easier to set up to set up a primitive like the",
    "start": "196800",
    "end": "202239"
  },
  {
    "text": "fake arch primitive slr is enabled however it is either weak",
    "start": "202239",
    "end": "208159"
  },
  {
    "text": "or partial this is at least true on version six",
    "start": "208159",
    "end": "213680"
  },
  {
    "text": "and the most annoying point there is no debug okay now there have been a couple of",
    "start": "213680",
    "end": "221440"
  },
  {
    "text": "webkit vulnerabilities that have been successfully exploited in the past the first one presented here is the last",
    "start": "221440",
    "end": "227920"
  },
  {
    "text": "known public exploit it is also known as the bad hoist exploit",
    "start": "227920",
    "end": "233200"
  },
  {
    "text": "it exploits a vulnerability found by loki heart from project zero and they exploit",
    "start": "233200",
    "end": "240720"
  },
  {
    "text": "and this vulnerability has been exploited by fire 30. the exploit provides read write",
    "start": "240720",
    "end": "247280"
  },
  {
    "text": "primitives and works on firmware up to 672 another vulnerability found by loki",
    "start": "247280",
    "end": "253040"
  },
  {
    "text": "heart have been exploited by spec to dev this one provides also read write",
    "start": "253040",
    "end": "261120"
  },
  {
    "text": "primitives and works on firmware up to 620 and for all the firmware there is a couple",
    "start": "261120",
    "end": "267600"
  },
  {
    "text": "of you know of exploit found by a couple of exploited by qwerty spected advanced",
    "start": "267600",
    "end": "274000"
  },
  {
    "text": "seaters okay now regarding kernel exploit regarding canon exploit",
    "start": "274000",
    "end": "280240"
  },
  {
    "text": "the last released one has been reported by the flow uh uh the bug",
    "start": "280240",
    "end": "287040"
  },
  {
    "text": "the exploit provides street right primitives in the corner one interesting point is that it is",
    "start": "287040",
    "end": "292560"
  },
  {
    "text": "reachable from the webkit sandbox and this bug is present in firmware 702",
    "start": "292560",
    "end": "299759"
  },
  {
    "text": "and also on firmware 6 and recently this bug has been combined",
    "start": "299759",
    "end": "305039"
  },
  {
    "text": "with the batteries exploit to get a full chain on firmware 6 and finally there is",
    "start": "305039",
    "end": "312320"
  },
  {
    "text": "some few vulnerabilities in bpf that have been",
    "start": "312320",
    "end": "317520"
  },
  {
    "text": "discovered and exploited by qwerty they work on firmware this exploits work",
    "start": "317520",
    "end": "323520"
  },
  {
    "text": "on firmware up to 507 and we strongly encourage the audience to read the excellent writer by spectrodev",
    "start": "323520",
    "end": "330800"
  },
  {
    "text": "okay now let's talk about the bug the bug is present in the webkit domain",
    "start": "330800",
    "end": "336240"
  },
  {
    "text": "giant it has been triggered by our internal further",
    "start": "336240",
    "end": "342080"
  },
  {
    "text": "and this bug impacts all ps4 firmware and ps vita as well we have reported",
    "start": "342080",
    "end": "349039"
  },
  {
    "text": "this bug to sony through their bug bounty program and now and now this vulnerability is fixed on version eight",
    "start": "349039",
    "end": "356720"
  },
  {
    "text": "uh this vulnerability is present in the build bible tree method called on",
    "start": "356720",
    "end": "362880"
  },
  {
    "text": "some validation message instance and this function makes at some point a call",
    "start": "362880",
    "end": "369680"
  },
  {
    "text": "to update the layout during which all user registered gs handler are executed",
    "start": "369680",
    "end": "375120"
  },
  {
    "text": "now if we destroy the validation message instance during a gs callback this could lead to",
    "start": "375120",
    "end": "381680"
  },
  {
    "text": "use after free situation when getting back to a brilliant record",
    "start": "381680",
    "end": "387300"
  },
  {
    "text": "[Music] actually the webkit developer have identified that problem may arise while",
    "start": "387300",
    "end": "392720"
  },
  {
    "text": "updating the style or the layout however they failed to fix this bug",
    "start": "392720",
    "end": "397759"
  },
  {
    "text": "properly due to an extra difference while making a weak pointer which means that we can still destroy",
    "start": "397759",
    "end": "405680"
  },
  {
    "text": "the validation message instance during a layout update and here is the actual fix after",
    "start": "405680",
    "end": "412400"
  },
  {
    "text": "reporting the validity after reporting the the bug",
    "start": "412400",
    "end": "417680"
  },
  {
    "text": "now they do not allow anymore to update the layout in the virtual record",
    "start": "417680",
    "end": "424960"
  },
  {
    "text": "okay now let's see the vulnerable path we can instantiate a validation message",
    "start": "425919",
    "end": "431919"
  },
  {
    "text": "object by making a call to report validity on some html input field",
    "start": "431919",
    "end": "436960"
  },
  {
    "text": "we register on that input field some gs some gs handler for example we can",
    "start": "436960",
    "end": "443680"
  },
  {
    "text": "define a gs handler that is executed whenever the focus is set on that input field and then this",
    "start": "443680",
    "end": "452560"
  },
  {
    "text": "function report validity will also fire up a timer to call our vulnerable function the build bible",
    "start": "452560",
    "end": "458160"
  },
  {
    "text": "tree and if we set the focus on our input field before timer expiration",
    "start": "458160",
    "end": "464240"
  },
  {
    "text": "then build bubble 3 will make a call to update the layout and update layout will call our gs callback",
    "start": "464240",
    "end": "473199"
  },
  {
    "text": "now if we destroy in this gs callback the validation message instance then this could lead to use after free",
    "start": "473199",
    "end": "478240"
  },
  {
    "text": "situation when getting back to blueberry now if we manage somehow to survive to",
    "start": "478240",
    "end": "484960"
  },
  {
    "text": "early crashes due to access to unvalid validation message",
    "start": "484960",
    "end": "490639"
  },
  {
    "text": "fields we can end up by calling this function delayed bubble tree after some timer expiration and this",
    "start": "490639",
    "end": "497680"
  },
  {
    "text": "function the label tree will destroy again the validation message nonsense",
    "start": "497680",
    "end": "503919"
  },
  {
    "text": "okay now let's see how we can trigger this bug the first step is to register a gs event",
    "start": "503919",
    "end": "511199"
  },
  {
    "text": "on some input text field then the second step is to call report",
    "start": "511199",
    "end": "517279"
  },
  {
    "text": "validity on to call report validity on our input text field report validity will",
    "start": "517279",
    "end": "524720"
  },
  {
    "text": "instantiate our target object the validation message object and then we in our gs handler we will",
    "start": "524720",
    "end": "531440"
  },
  {
    "text": "simply define uh we'll simply destroy the validation message instance",
    "start": "531440",
    "end": "537440"
  },
  {
    "text": "and then when the breathability will be called it will make a call to update the layout and which in turn will call our gs",
    "start": "537680",
    "end": "544320"
  },
  {
    "text": "callback we run that code but it didn't crash actually",
    "start": "544320",
    "end": "549680"
  },
  {
    "text": "the report validity methods sets the focus on our input field which",
    "start": "549680",
    "end": "554800"
  },
  {
    "text": "triggers our gs callback too early so in our second attempt we decided to",
    "start": "554800",
    "end": "560480"
  },
  {
    "text": "use two input fields input one and input two on the first input we register",
    "start": "560480",
    "end": "566000"
  },
  {
    "text": "a gs handler handler one that will simply set the focus elsewhere",
    "start": "566000",
    "end": "571680"
  },
  {
    "text": "then we make a call to report validity that will instantiate our target object",
    "start": "571680",
    "end": "577040"
  },
  {
    "text": "report validity will set the focus on input one our handler one is executed it will set the folks elsewhere for example",
    "start": "577040",
    "end": "582880"
  },
  {
    "text": "on input two and then before uh timer expiration that is before",
    "start": "582880",
    "end": "589279"
  },
  {
    "text": "google tree build bubble tree code is executed we register a new handler",
    "start": "589279",
    "end": "594720"
  },
  {
    "text": "that uh on input one that will destroy the validation message instance then when then when will builder tree",
    "start": "594720",
    "end": "601360"
  },
  {
    "text": "code then when buildable3 method is called it will make a call to update the layout",
    "start": "601360",
    "end": "606959"
  },
  {
    "text": "and run our js callback and destroy uh our validation message instance and",
    "start": "606959",
    "end": "613040"
  },
  {
    "text": "we run that code and it actually crashes the ps4 browse",
    "start": "613040",
    "end": "619200"
  },
  {
    "text": "and here is what looks like the ps4 when the browser crashes",
    "start": "619200",
    "end": "625199"
  },
  {
    "text": "okay now all we get are crushes and we do not have the building",
    "start": "625519",
    "end": "630880"
  },
  {
    "text": "capabilities on the playstation 4. so to overcome these limitations we have two options",
    "start": "630880",
    "end": "635920"
  },
  {
    "text": "option one is to set up a debugging environment as close as possible to the",
    "start": "635920",
    "end": "641040"
  },
  {
    "text": "free to the ps4 uh environment that is installing a freebsd box",
    "start": "641040",
    "end": "646560"
  },
  {
    "text": "and compile webkit from sources downloaded from playstation website this is helpful but",
    "start": "646560",
    "end": "653600"
  },
  {
    "text": "sometimes working exploit on our environment does not mean that it will work on the ps4 so clearly here we need more",
    "start": "653600",
    "end": "660000"
  },
  {
    "text": "debugging so we decided to use option two and debug our zero day using a one day",
    "start": "660000",
    "end": "667680"
  },
  {
    "text": "and for that purpose we used the bat hoist exploit by fire 30 because it provides useful",
    "start": "667680",
    "end": "673120"
  },
  {
    "text": "primitives like the read write primitives but also the classical added thereof and fake off",
    "start": "673120",
    "end": "678480"
  },
  {
    "text": "primitive however the bad hoist exploits works only on firmware 6",
    "start": "678480",
    "end": "684880"
  },
  {
    "text": "and sometimes running the batteries exploited prior to our exploit adds some noise on",
    "start": "684880",
    "end": "690800"
  },
  {
    "text": "heap shaping and finally by the host exploit is not rearable but all of this is fine",
    "start": "690800",
    "end": "698000"
  },
  {
    "text": "okay now let's see the vulnerable object the validation message object",
    "start": "699040",
    "end": "704640"
  },
  {
    "text": "this object is instantiated by making a call to report validity it is mainly accessed by the vulnerable",
    "start": "704640",
    "end": "711279"
  },
  {
    "text": "function buildable tree and it is finally destroyed by the delayed bible tree",
    "start": "711279",
    "end": "717279"
  },
  {
    "text": "the validation message object is fast mallocked and is made of the following fields the",
    "start": "717279",
    "end": "723440"
  },
  {
    "text": "yellow one are instantiated or gets reinstantiated after a layout update and the rest of",
    "start": "723440",
    "end": "730240"
  },
  {
    "text": "the fields now the green one are accessed after a layout update and they point to some html element",
    "start": "730240",
    "end": "736720"
  },
  {
    "text": "instance now what is the situation",
    "start": "736720",
    "end": "742160"
  },
  {
    "text": "after destroying the validation message instance in our gs callback",
    "start": "742160",
    "end": "747200"
  },
  {
    "text": "we have um when getting back to blue bubble g code after uh after calling our",
    "start": "747200",
    "end": "754320"
  },
  {
    "text": "gs handler we have to use after three this and m element are freed most of the",
    "start": "754320",
    "end": "761120"
  },
  {
    "text": "fields are set to new pointer and m element is deleted but we still",
    "start": "761120",
    "end": "766959"
  },
  {
    "text": "get a reference on it the situation is that we crash on the",
    "start": "766959",
    "end": "772880"
  },
  {
    "text": "first virtual call on am bubble when getting back to blueberry code",
    "start": "772880",
    "end": "777920"
  },
  {
    "text": "and this situation is not really good so to exploit this vulnerability we need either a memory leak or find a",
    "start": "777920",
    "end": "784880"
  },
  {
    "text": "way to bypass slr and it turns out that we can bypass slr uh by just keep",
    "start": "784880",
    "end": "792240"
  },
  {
    "text": "spraying some object if we spray some a couple of objects",
    "start": "792240",
    "end": "797600"
  },
  {
    "text": "they are they end up allocated at some predictable location and here in our tests spraying two",
    "start": "797600",
    "end": "803120"
  },
  {
    "text": "megabyte is enough to predict some heap address however this require a prior knowledge on the memory mapping",
    "start": "803120",
    "end": "809920"
  },
  {
    "text": "and this work that's what we have on firmware uh on",
    "start": "809920",
    "end": "815279"
  },
  {
    "text": "firmware six thanks to the bad voice exploit and this may work on version seven we",
    "start": "815279",
    "end": "821279"
  },
  {
    "text": "will discuss this late okay now how we can survive to uh",
    "start": "821279",
    "end": "828560"
  },
  {
    "text": "to to an early crash the first step is to spray a couple of html elements",
    "start": "828560",
    "end": "835040"
  },
  {
    "text": "uh and by doing that they end up allocated at some predictable location",
    "start": "835040",
    "end": "840160"
  },
  {
    "text": "then we shape the heap so that we can reuse our target object and fix the m bubble and m element value",
    "start": "840160",
    "end": "846079"
  },
  {
    "text": "so that they point to the address that we predicted so this way we can we can survive to",
    "start": "846079",
    "end": "853120"
  },
  {
    "text": "to to the early crash now if we survive to that crash",
    "start": "853120",
    "end": "859040"
  },
  {
    "text": "we end up by calling this function delayed level 3 after some time or expiration and this function will set",
    "start": "859040",
    "end": "867040"
  },
  {
    "text": "to null pointer most of the fields of the valley most of the validation message fields",
    "start": "867040",
    "end": "872320"
  },
  {
    "text": "and the new pointer assignment on drift counted classes is is overloaded and",
    "start": "872320",
    "end": "879199"
  },
  {
    "text": "results in in a rifcount decrement this means that if we can uh if we",
    "start": "879199",
    "end": "885199"
  },
  {
    "text": "manage to reuse our target object properly we end up by we can we we have",
    "start": "885199",
    "end": "891680"
  },
  {
    "text": "uh a rifcount decrement on multiple controlled validation message fields which means",
    "start": "891680",
    "end": "897680"
  },
  {
    "text": "that we can turn our initial use after free into an",
    "start": "897680",
    "end": "902720"
  },
  {
    "text": "arbitrary decrement and this is exploitable now the exploit requires",
    "start": "902720",
    "end": "909440"
  },
  {
    "text": "multiple heap shaping and spraying stages and in order to be able to reuse",
    "start": "909440",
    "end": "914480"
  },
  {
    "text": "our target object we need to know how fast malloc works",
    "start": "914480",
    "end": "919600"
  },
  {
    "text": "now that we know which primitive device gave us we must find a way to reuse the validation research object",
    "start": "920720",
    "end": "927199"
  },
  {
    "text": "this part talk about the first product allocator that is the one used to allocate a",
    "start": "927199",
    "end": "932320"
  },
  {
    "text": "validation research object webkit as many allocator",
    "start": "932320",
    "end": "938160"
  },
  {
    "text": "first monarch is the standard allocator it is used by many webkit components",
    "start": "938160",
    "end": "944320"
  },
  {
    "text": "easily is used by determining its purpose is to sort each allocation using their types to",
    "start": "944320",
    "end": "951440"
  },
  {
    "text": "allocate to mitigate the use autophagy vulnerability the garbage collector is used by the",
    "start": "951440",
    "end": "958800"
  },
  {
    "text": "javascript engine to locate javascript object isosoft space is also",
    "start": "958800",
    "end": "963839"
  },
  {
    "text": "used by the javascript engine it is very similar to",
    "start": "963839",
    "end": "969040"
  },
  {
    "text": "easily but it is used for a few objects and the gkh is used to prevent outbound",
    "start": "969040",
    "end": "977040"
  },
  {
    "text": "read and write and specific object for example the backing buffer of the arrow buffer",
    "start": "977040",
    "end": "984880"
  },
  {
    "text": "used this this allocator but when the gauge is disabled",
    "start": "984880",
    "end": "991040"
  },
  {
    "text": "the allocated object uses first molecule and this garch is disabled on heavy",
    "start": "991040",
    "end": "998800"
  },
  {
    "text": "ps4 systems webkit has four important structure",
    "start": "998800",
    "end": "1005759"
  },
  {
    "text": "the top one is the ipad it is made of chunks chunks is split into pages a page",
    "start": "1005759",
    "end": "1013040"
  },
  {
    "text": "has a size of 4 kilobyte and it is divided into lines and the line is the most important",
    "start": "1013040",
    "end": "1020320"
  },
  {
    "text": "object for us because it is the one that all the objects",
    "start": "1020320",
    "end": "1026000"
  },
  {
    "text": "an important point is that lines are sorted into a page",
    "start": "1026000",
    "end": "1033120"
  },
  {
    "text": "using the object size so this means that um we cannot have",
    "start": "1033120",
    "end": "1040400"
  },
  {
    "text": "two objects that have a different size into the same line and this means that",
    "start": "1040400",
    "end": "1047038"
  },
  {
    "text": "if we want to use our validation message object we must use an object that has",
    "start": "1047039",
    "end": "1054400"
  },
  {
    "text": "the difference the that has the same size and validation message",
    "start": "1054400",
    "end": "1060480"
  },
  {
    "text": "first malloc is a very is a very basic bumper locator it has a fast pass and a slow pass the",
    "start": "1060960",
    "end": "1068080"
  },
  {
    "text": "fastpass just uses a bump to store each object and when an allocation",
    "start": "1068080",
    "end": "1075760"
  },
  {
    "text": "request is made it just pop an object from developer",
    "start": "1075760",
    "end": "1080960"
  },
  {
    "text": "but when the bump is empty then first parallel uses the slow pass this low pass is a",
    "start": "1080960",
    "end": "1088080"
  },
  {
    "text": "bit more complex than the first person its goal is to refill the allocator",
    "start": "1088080",
    "end": "1094720"
  },
  {
    "text": "to do so it will use several methods for example it will this low pass will",
    "start": "1094720",
    "end": "1102000"
  },
  {
    "text": "look in many caches if there are objects available to refill the allocator and if",
    "start": "1102000",
    "end": "1110320"
  },
  {
    "text": "this cache are empty then fast manner can will look on specific in specific pages",
    "start": "1110320",
    "end": "1118559"
  },
  {
    "text": "if some lines are released and if they are first moloch will use this line to",
    "start": "1118559",
    "end": "1123919"
  },
  {
    "text": "refill the allocator at the end of this pass first molokai",
    "start": "1123919",
    "end": "1129280"
  },
  {
    "text": "has a full bomb elevator a full",
    "start": "1129280",
    "end": "1137200"
  },
  {
    "text": "when an object is released it is pushed in a dedicated vector that is named m",
    "start": "1137200",
    "end": "1143440"
  },
  {
    "text": "and square object log this vector is not made immediately available",
    "start": "1143440",
    "end": "1150000"
  },
  {
    "text": "because it is processed only when it's when it reaches its maximum capacity",
    "start": "1150000",
    "end": "1157039"
  },
  {
    "text": "chunks pages and lines are recounted this means that they are released only",
    "start": "1157039",
    "end": "1163919"
  },
  {
    "text": "when uh their account is equal to zero so a very important point is that if we",
    "start": "1163919",
    "end": "1170880"
  },
  {
    "text": "want to reuse our validation message object it must be",
    "start": "1170880",
    "end": "1176400"
  },
  {
    "text": "on a line where each objects are released otherwise the line won't be reduced",
    "start": "1176400",
    "end": "1185679"
  },
  {
    "text": "we can now start the exploitation part [Music]",
    "start": "1186160",
    "end": "1191200"
  },
  {
    "text": "as uh using the previous information we know that we must control the full",
    "start": "1191200",
    "end": "1198480"
  },
  {
    "text": "line where validation message is allocated in order to reuse it to do so",
    "start": "1198480",
    "end": "1207280"
  },
  {
    "text": "we will we will allocate object that has the same size than validation message",
    "start": "1207280",
    "end": "1212720"
  },
  {
    "text": "around data before we will allocate them before and",
    "start": "1212720",
    "end": "1218080"
  },
  {
    "text": "after allocating a validation message we will end up with the following year memory layout",
    "start": "1218080",
    "end": "1225919"
  },
  {
    "text": "then we can we can release that the object that allocated before and after",
    "start": "1225919",
    "end": "1233120"
  },
  {
    "text": "obligation message and the validation message itself this will",
    "start": "1233120",
    "end": "1238320"
  },
  {
    "text": "release the associated line and cached the page",
    "start": "1238320",
    "end": "1243600"
  },
  {
    "text": "at the end we can now spray definer object that will reuse a validation message",
    "start": "1244240",
    "end": "1253039"
  },
  {
    "text": "we chose to use the debugging buffer of the ibfr widely subjected because first",
    "start": "1253280",
    "end": "1261200"
  },
  {
    "text": "it allowed to to do an allocation using an arbitrary size and",
    "start": "1261200",
    "end": "1267600"
  },
  {
    "text": "we can read and write every byte of these objects at the end",
    "start": "1267600",
    "end": "1274320"
  },
  {
    "text": "we have two references that point to the same memory area the first one is the validation",
    "start": "1274320",
    "end": "1281360"
  },
  {
    "text": "message one and the second one is the error buffer contents [Music]",
    "start": "1281360",
    "end": "1287840"
  },
  {
    "text": "as medici said previously a free field of validation message are allocated",
    "start": "1287840",
    "end": "1293919"
  },
  {
    "text": "after using the object so using our buffer we can read their value and get",
    "start": "1293919",
    "end": "1300640"
  },
  {
    "text": "an initial memory look two of these fields are allocated using our pointer",
    "start": "1300640",
    "end": "1308159"
  },
  {
    "text": "allocated using either eep but they are not important for us",
    "start": "1308159",
    "end": "1314320"
  },
  {
    "text": "but the third one the timer one is allocated is a pointer located using",
    "start": "1314320",
    "end": "1320320"
  },
  {
    "text": "fast molecule and this one is interesting and we will reuse it later to guess the address of",
    "start": "1320320",
    "end": "1328000"
  },
  {
    "text": "first monocult we can now trigger the arbitrary",
    "start": "1328000",
    "end": "1333360"
  },
  {
    "text": "recommend primitive we can do it usually using our arbitrary our buffer reference by just",
    "start": "1333360",
    "end": "1342240"
  },
  {
    "text": "writing into uh into the backing buffer for example we can corrupt the pointer",
    "start": "1342240",
    "end": "1349360"
  },
  {
    "text": "of ammon oscar message heading and when this printer will be released",
    "start": "1349360",
    "end": "1356879"
  },
  {
    "text": "the the ref count derive count at this point will be a",
    "start": "1356960",
    "end": "1363679"
  },
  {
    "text": "decrement to our strategy to exploit this",
    "start": "1363679",
    "end": "1368880"
  },
  {
    "text": "primitive is to decrement a length in memory in order to enlarge",
    "start": "1368880",
    "end": "1376080"
  },
  {
    "text": "a data buffer and get a better primitive like relative",
    "start": "1376080",
    "end": "1381919"
  },
  {
    "text": "read and write to summarize our exploit strategy",
    "start": "1381919",
    "end": "1390400"
  },
  {
    "text": "we will first we will figure one first time the vulnerability and",
    "start": "1390400",
    "end": "1396880"
  },
  {
    "text": "use the arbitrary decrement to get a first relatively primitive we will use this",
    "start": "1396880",
    "end": "1403200"
  },
  {
    "text": "primitive to find the address of better objects in memory then we can use one more time our",
    "start": "1403200",
    "end": "1411039"
  },
  {
    "text": "vulnerability and the arbitrary decrement to get a better alternative distinctive",
    "start": "1411039",
    "end": "1416960"
  },
  {
    "text": "is the relatively inviter and with relatively right",
    "start": "1416960",
    "end": "1422720"
  },
  {
    "text": "we can achieve arbitrary read and write and get code execution",
    "start": "1422720",
    "end": "1430880"
  },
  {
    "text": "the goal of the relatively primitive is to leak the address of jesus are",
    "start": "1430880",
    "end": "1437039"
  },
  {
    "text": "before you yesterday for you is an interesting object",
    "start": "1437039",
    "end": "1442840"
  },
  {
    "text": "because first it has a landfill field and it allows to read and write",
    "start": "1442840",
    "end": "1449200"
  },
  {
    "text": "arbitrary data so if we can",
    "start": "1449200",
    "end": "1454080"
  },
  {
    "text": "if we can overwrite the length of field then we can then write arbitrary data",
    "start": "1454400",
    "end": "1461679"
  },
  {
    "text": "beyond the limit of the data buffer",
    "start": "1461679",
    "end": "1466799"
  },
  {
    "text": "to get the relative read primitive we will use another object that is named string",
    "start": "1466799",
    "end": "1472480"
  },
  {
    "text": "importer string import is the string representation",
    "start": "1472480",
    "end": "1477679"
  },
  {
    "text": "is the representation of the string in javascript in just script string are",
    "start": "1477679",
    "end": "1485360"
  },
  {
    "text": "immutable this means that we can read in the data buffer",
    "start": "1485360",
    "end": "1491919"
  },
  {
    "text": "but we cannot write we cannot write data and also string poly is interesting",
    "start": "1491919",
    "end": "1499120"
  },
  {
    "text": "because it has a length filled and it is a fast melody so we can usually find it using",
    "start": "1499120",
    "end": "1506720"
  },
  {
    "text": "our timer leak so to override the length we will spray",
    "start": "1506720",
    "end": "1512640"
  },
  {
    "text": "string impul that are the same size than our timer leak",
    "start": "1512640",
    "end": "1519440"
  },
  {
    "text": "we will spray them around the timer object using our arbitrary decrement we will",
    "start": "1519919",
    "end": "1526320"
  },
  {
    "text": "overwrite the length of the field and thanks to that we can read beyond",
    "start": "1526320",
    "end": "1534000"
  },
  {
    "text": "the limit of the string buffer",
    "start": "1534000",
    "end": "1538080"
  },
  {
    "text": "how to leak here's a viewpoint it is important to know that dom objects",
    "start": "1539760",
    "end": "1546640"
  },
  {
    "text": "and js objects use two different locators so we cannot access",
    "start": "1546640",
    "end": "1553840"
  },
  {
    "text": "to to djs subjects using our relative read in first molecule",
    "start": "1553840",
    "end": "1559200"
  },
  {
    "text": "but a javascript ability in that is named object.define properties allow",
    "start": "1559200",
    "end": "1565840"
  },
  {
    "text": "to allocate two objects a vector and a marked argument before",
    "start": "1565840",
    "end": "1573039"
  },
  {
    "text": "both objects are allocated on first one okay and they allow to push javascript",
    "start": "1573039",
    "end": "1579760"
  },
  {
    "text": "object reference on the first molecule",
    "start": "1579760",
    "end": "1585840"
  },
  {
    "text": "so using our relative reader we can usually find this pointer to do that we will",
    "start": "1586159",
    "end": "1592400"
  },
  {
    "text": "allocate a multiple yes array before you yes review then we will purchase the",
    "start": "1592400",
    "end": "1600000"
  },
  {
    "text": "reference on first molecule if using object.define properties",
    "start": "1600000",
    "end": "1605200"
  },
  {
    "text": "and then we can scan the ip using our relative grid and find this printer",
    "start": "1605200",
    "end": "1613840"
  },
  {
    "text": "to summarize we have an arbitrary command and we have a gsi buffer view",
    "start": "1614320",
    "end": "1621120"
  },
  {
    "text": "leak we can now get a relative read android printer",
    "start": "1621120",
    "end": "1626400"
  },
  {
    "text": "we will just run the exploit again use the arbitrary decrement on the leaked gsi buffer view rs",
    "start": "1626400",
    "end": "1633760"
  },
  {
    "text": "enlarge the length of the field of the gsi buffer view and this allows",
    "start": "1633760",
    "end": "1640159"
  },
  {
    "text": "us to read and write beyond the limit of the data buffer",
    "start": "1640159",
    "end": "1646559"
  },
  {
    "text": "so now using a relatively light we can achieve arbitrary read and write",
    "start": "1649039",
    "end": "1656159"
  },
  {
    "text": "we will use another gsr buffer view gsr buffer view has a vector field",
    "start": "1656159",
    "end": "1664399"
  },
  {
    "text": "that represents a data buffer where we can read and write so using our arbit our",
    "start": "1664399",
    "end": "1671120"
  },
  {
    "text": "relative read and write we will just overwrite the [Music]",
    "start": "1671120",
    "end": "1677120"
  },
  {
    "text": "the the pointer rd vector and using this we can",
    "start": "1677120",
    "end": "1683360"
  },
  {
    "text": "read and write at arbitrary arbitrary address",
    "start": "1683360",
    "end": "1689919"
  },
  {
    "text": "and on ps4 we cannot allocate rwx memory pages",
    "start": "1691360",
    "end": "1697200"
  },
  {
    "text": "but we can control the instruction pointer for example we can just leak an html",
    "start": "1697200",
    "end": "1704720"
  },
  {
    "text": "element object override its available pointer and call the associated dgs method",
    "start": "1704720",
    "end": "1712559"
  },
  {
    "text": "that will trigger the other return pointer and then we can implement the next",
    "start": "1712559",
    "end": "1718640"
  },
  {
    "text": "stages using color user most of the previous ps4 jabra i can use this",
    "start": "1718640",
    "end": "1725039"
  },
  {
    "text": "method [Music] so this is time for a demo",
    "start": "1725039",
    "end": "1739840"
  },
  {
    "text": "so the exploit took about 11 seconds to reach arbitrary read and write",
    "start": "1746720",
    "end": "1755520"
  },
  {
    "text": "and at this moment we reach arbitrarily read and write and we can start",
    "start": "1762240",
    "end": "1767440"
  },
  {
    "text": "to implement the next stages",
    "start": "1767440",
    "end": "1772080"
  },
  {
    "text": "so to conclude the exploit works on version of version",
    "start": "1777279",
    "end": "1783840"
  },
  {
    "text": "6 of place for firmware the exploit code is available on this",
    "start": "1783840",
    "end": "1789760"
  },
  {
    "text": "inactive github the exploit is not really stable and it took",
    "start": "1789760",
    "end": "1795039"
  },
  {
    "text": "about 11 seconds to reach arbitrary device but the reliability could be improved by",
    "start": "1795039",
    "end": "1802240"
  },
  {
    "text": "for example improving the asl brute force step and we can also find a bit",
    "start": "1802240",
    "end": "1809520"
  },
  {
    "text": "a better exploitation path that avoid triggering two times the vulnerability",
    "start": "1809520",
    "end": "1816080"
  },
  {
    "text": "we tried uh parting this exploit on version 7 of the ps4",
    "start": "1816080",
    "end": "1823200"
  },
  {
    "text": "firmwares but we did not succeed the asl bypass did not work",
    "start": "1823200",
    "end": "1829440"
  },
  {
    "text": "on this firmware version and we only get questions but we tried",
    "start": "1829440",
    "end": "1837840"
  },
  {
    "text": "to to breakfast the asl using a raspberry pi the goal was to",
    "start": "1837840",
    "end": "1844640"
  },
  {
    "text": "guess the address of a spread html element and the raspberry p was used to emulate to",
    "start": "1844640",
    "end": "1852320"
  },
  {
    "text": "emulate a keyboard and we load the page every five seconds",
    "start": "1852320",
    "end": "1857360"
  },
  {
    "text": "after a crash but we did not get any results so far [Music]",
    "start": "1857360",
    "end": "1862720"
  },
  {
    "text": "thanks to senective for letting us do the research thanks to our colleague for all the help",
    "start": "1862720",
    "end": "1868799"
  },
  {
    "text": "while developing the exploit thanks to black hat for the great event and thank you for your attention",
    "start": "1868799",
    "end": "1875679"
  },
  {
    "text": "do you have any questions",
    "start": "1875679",
    "end": "1879840"
  }
]