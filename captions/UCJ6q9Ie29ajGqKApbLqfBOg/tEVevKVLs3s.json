[
  {
    "text": "good morning this talk is about our VMI a tool that allows you to perform full system analysis before we get into the",
    "start": "30",
    "end": "6270"
  },
  {
    "text": "details of our VMI let me provide you with an overview of the top today so first of all we're going to introduce",
    "start": "6270",
    "end": "11460"
  },
  {
    "text": "ourself next we want to talk about the motivation behind our VMI so what does our vm i actually why is it interesting",
    "start": "11460",
    "end": "18150"
  },
  {
    "text": "why should you care about it this will lead us to a moderated discussion of REM i itself in particular we want to",
    "start": "18150",
    "end": "24150"
  },
  {
    "text": "present the architecture behind REM i and also discussed the corn open-source implementation of REM i that will make",
    "start": "24150",
    "end": "30510"
  },
  {
    "text": "available to the community after the presentation having described our vmin",
    "start": "30510",
    "end": "35579"
  },
  {
    "text": "theory we of course also want to show you the tool in action for this purpose we prepared a live demonstration that",
    "start": "35579",
    "end": "41129"
  },
  {
    "text": "gives you a good overview over the features that are VMI provides and finally we will conclude the talk with a short summary so who are we essentially",
    "start": "41129",
    "end": "49110"
  },
  {
    "text": "the RVM i project start as many other german projects with a couple of german engineers in a beer cellar",
    "start": "49110",
    "end": "55579"
  },
  {
    "text": "so I'm Jonas this is sebastian in addition to being german engineers were",
    "start": "55579",
    "end": "61620"
  },
  {
    "text": "also engineers at fireEye we've been working on malware detection there for about the past three years but even",
    "start": "61620",
    "end": "68640"
  },
  {
    "text": "before our time with fire I Sebastian and I have been working together for quite some time for research interests",
    "start": "68640",
    "end": "74570"
  },
  {
    "text": "align quite a bit we both have a very strong background in virtualization and virtual machine introspection or VM I",
    "start": "74570",
    "end": "81380"
  },
  {
    "text": "also on the security side of things malware analysis novel exploitation",
    "start": "81380",
    "end": "87299"
  },
  {
    "text": "techniques things of that nature and while it is certainly true that German engineers are generally motivated by one",
    "start": "87299",
    "end": "93750"
  },
  {
    "text": "thing in this case there are four things that motivated us with respect to our VM I before we get into those though I want",
    "start": "93750",
    "end": "101490"
  },
  {
    "text": "to give you the quick sort of tagline the quick elevator pitch with respect to what our BMI is so our BMI is really a",
    "start": "101490",
    "end": "109229"
  },
  {
    "text": "debugger on steroids if you think about how it behaves how you interact with it the kind of features you would expect it",
    "start": "109229",
    "end": "116549"
  },
  {
    "text": "really is a debugger for an entire operating system with a focus on malware",
    "start": "116549",
    "end": "123420"
  },
  {
    "text": "analysis so what's this tagline in mind let's take a closer look at the four points of motivation at Jonas just",
    "start": "123420",
    "end": "129000"
  },
  {
    "text": "mentioned first and foremost our BMI runs completely isolated from target system in contrast to traditional",
    "start": "129000",
    "end": "135450"
  },
  {
    "text": "debugger and we achieved this through visualization in spite of this isolation the analyst has so full control over a",
    "start": "135450",
    "end": "142350"
  },
  {
    "text": "little machine through a machine introspection allowing her to pause and resume the little machine at any point",
    "start": "142350",
    "end": "147480"
  },
  {
    "text": "in time and to use traditional debugging functionality such as breakpoints in watch points in addition the analyst can",
    "start": "147480",
    "end": "153390"
  },
  {
    "text": "access the entire state of the whittled machine while performing her analysis and can even access kernel data",
    "start": "153390",
    "end": "158760"
  },
  {
    "text": "structures which we achieved by combining memory forensics with virtual machine introspection and last but not",
    "start": "158760",
    "end": "164430"
  },
  {
    "text": "least we provide an interactive in scriptable interface that really makes it easy to analyze the Maori and to automate tasks",
    "start": "164430",
    "end": "170760"
  },
  {
    "text": "so with this points of motivation in mind we hope that you get a little bit excited about our VMI but you may still",
    "start": "170760",
    "end": "176730"
  },
  {
    "text": "ponder the question why did you actually do it why is it interesting Jonassen I firmly believe that mal dynamic analysis",
    "start": "176730",
    "end": "183000"
  },
  {
    "text": "is an important technique it essentially allows you to execute a sophisticated model sample or a sophisticated exploit",
    "start": "183000",
    "end": "188790"
  },
  {
    "text": "in a controlled environment and to observe its behavior and it's really very important when you try to gain a",
    "start": "188790",
    "end": "194070"
  },
  {
    "text": "full understanding of a sample if you want to perform manual dynamic analysis today there are essentially two tools",
    "start": "194070",
    "end": "199890"
  },
  {
    "text": "that you can use debuggers and sandboxes and what both of them are really well you will they have certain drawbacks",
    "start": "199890",
    "end": "205739"
  },
  {
    "text": "when it comes to interactive dynamic analysis that we want to discuss so if we start with debuggers especially if we",
    "start": "205739",
    "end": "212670"
  },
  {
    "text": "consider sort of the de facto standard debuggers things like gdb and win debug they certainly are very sophisticated",
    "start": "212670",
    "end": "219680"
  },
  {
    "text": "pieces of software and they do very well what they were designed to do the problem is they weren't designed for",
    "start": "219680",
    "end": "226530"
  },
  {
    "text": "malware analysis and we see that for example they share the same environment as the sample being analyzed they use",
    "start": "226530",
    "end": "234810"
  },
  {
    "text": "operating systems api's to perform their functionality and there's even api's and",
    "start": "234810",
    "end": "241320"
  },
  {
    "text": "mechanisms that allow a process to determine whether it's being debugged so all of that make it very difficult",
    "start": "241320",
    "end": "247470"
  },
  {
    "text": "for a debugger to hide its presence in addition to that if we sort of consider",
    "start": "247470",
    "end": "253500"
  },
  {
    "text": "more sophisticated malware or more sophisticated exploitation flows we generally aren't talking about a single",
    "start": "253500",
    "end": "259890"
  },
  {
    "text": "process we're talking about a process that spawns another process or injects code into another process or in some",
    "start": "259890",
    "end": "266310"
  },
  {
    "text": "cases even managed to get code running inside of the kernel and in a situation like that it becomes",
    "start": "266310",
    "end": "272009"
  },
  {
    "text": "a little bit cumbersome to use standard debuggers you have to maintain multiple sessions it's difficult to share state",
    "start": "272009",
    "end": "278009"
  },
  {
    "text": "between those sessions things of that nature on the other hand if we look at",
    "start": "278009",
    "end": "283830"
  },
  {
    "text": "sandboxes in sandboxes we really trade this interactive nature for isolation and invasion resistance so sandbox is",
    "start": "283830",
    "end": "291300"
  },
  {
    "text": "really focused on providing an environment in which it's difficult for the sample to determine that it's being",
    "start": "291300",
    "end": "296699"
  },
  {
    "text": "analyzed however if you consider the way you use or interact with the sandbox you",
    "start": "296699",
    "end": "302759"
  },
  {
    "text": "generally submit a sample you let it run you get some kind of report you can parse or analyze and there might be some",
    "start": "302759",
    "end": "310319"
  },
  {
    "text": "limited configuration the type of events are interested in the amount of data",
    "start": "310319",
    "end": "315389"
  },
  {
    "text": "you're in you're interested in but it's certainly not something we would call an interactive experience so if you take",
    "start": "315389",
    "end": "323219"
  },
  {
    "text": "into consideration with Jonas just described it should become quite clear that neither debuggers nor sandboxes",
    "start": "323219",
    "end": "328259"
  },
  {
    "text": "were designed for interactive dynamic analysis essentially we face a trade-off between visibility and flexibility the",
    "start": "328259",
    "end": "334440"
  },
  {
    "text": "debuggers provides and the isolation and the variant resistance that sandbox is provided as an analyst however I would",
    "start": "334440",
    "end": "340529"
  },
  {
    "text": "like to have a tool that combines all of these properties and since John is an Ivor not aware of any such tool we",
    "start": "340529",
    "end": "345960"
  },
  {
    "text": "created our VMI which was particularly designed for the purpose of interactive dynamic analysis so with this motivation",
    "start": "345960",
    "end": "353130"
  },
  {
    "text": "in mind let's take a closer look at the architecture behind our VM I because if you want to brew up something fresh and",
    "start": "353130",
    "end": "358229"
  },
  {
    "text": "cool the architecture is really crucial and this is where I like to mention that while we're gonna go over sort of the",
    "start": "358229",
    "end": "363930"
  },
  {
    "text": "formal architecture here this wasn't a project that was born out of architecture or born out of the",
    "start": "363930",
    "end": "369479"
  },
  {
    "text": "architecture it was something that was really sort of a evolution so both",
    "start": "369479",
    "end": "374849"
  },
  {
    "text": "Sebastian and I were engineers were hackers when the tools that we use don't do what we want them to do we fix it so",
    "start": "374849",
    "end": "384330"
  },
  {
    "text": "while Sebastian will go over sort of the formal architecture I'm gonna try to tell the story a bit of how our vmi came",
    "start": "384330",
    "end": "392879"
  },
  {
    "text": "to be let's begin by taking a look at the goals that we actually tried to address with this architecture and these",
    "start": "392879",
    "end": "399149"
  },
  {
    "text": "goals are essentially directly the right from the motivation that we just presented to you so first of all we want",
    "start": "399149",
    "end": "404349"
  },
  {
    "text": "to have a better evasion resistance compared to a traditional debugger the Maori shouldn't be able to attack the debugger directly in fact it shouldn't",
    "start": "404349",
    "end": "411309"
  },
  {
    "text": "even be able to see that it's being debugged in addition we want to have the ability to perform full system analysis this",
    "start": "411309",
    "end": "417849"
  },
  {
    "text": "means we want to be able to analyze users based processes kernel driver or even pre boot environments all in a",
    "start": "417849",
    "end": "424059"
  },
  {
    "text": "single tool last but not least we want to keep the interactive in scriptable nature of",
    "start": "424059",
    "end": "429069"
  },
  {
    "text": "debuggers such that we can steer the analysis easily as an analyst and automate tasks while performing analysis",
    "start": "429069",
    "end": "435990"
  },
  {
    "text": "with this goals in mind let's take a closer look at the architecture how we address each of these goals starting",
    "start": "435990",
    "end": "442389"
  },
  {
    "text": "with our first core resistant to evasion so we started probably where most",
    "start": "442389",
    "end": "448569"
  },
  {
    "text": "analysts start we have our analysis VM we have a bunch of tools pre-loaded in",
    "start": "448569",
    "end": "454059"
  },
  {
    "text": "the analysis VM we load our sample we let it run and we start our our dynamic",
    "start": "454059",
    "end": "461379"
  },
  {
    "text": "analysis so this grants us some isolation we are sure that our hosts",
    "start": "461379",
    "end": "466449"
  },
  {
    "text": "won't get infected we can also take advantage of things like snapshotting that most hypervisors provide and this",
    "start": "466449",
    "end": "474339"
  },
  {
    "text": "was really very much the starting point so the first building block in the",
    "start": "474339",
    "end": "479349"
  },
  {
    "text": "architecture is brutalization as Jonas just a Twitter ization is generally used to isolate the host system from the",
    "start": "479349",
    "end": "485709"
  },
  {
    "text": "Marga running within the virtual machine in the case of our VM I we take this concept a step further and pull the",
    "start": "485709",
    "end": "491169"
  },
  {
    "text": "debugger out of the Whittle machine onto the hypervisor level such that the malware is no longer able to attack the",
    "start": "491169",
    "end": "497259"
  },
  {
    "text": "debugger directly and isn't even able to see the debugger and this really increases the evasion resistance of the",
    "start": "497259",
    "end": "502539"
  },
  {
    "text": "entire approach with this in mind let's take a look at our second goal full system analysis so eventually we started",
    "start": "502539",
    "end": "510009"
  },
  {
    "text": "to see some of the limitations that we talked about during our motivation and",
    "start": "510009",
    "end": "515409"
  },
  {
    "text": "we kind of fell back or leveraged our background and virtualization and VM I and effectively what we started doing",
    "start": "515409",
    "end": "522518"
  },
  {
    "text": "was we started hacking the hypervisor to augment our analysis as some of the things that were a little bit more difficult to do within the guest we just",
    "start": "522519",
    "end": "529930"
  },
  {
    "text": "started doing outside of the guest and in the beginning it was very basic was very rudimentary we would do things",
    "start": "529930",
    "end": "535800"
  },
  {
    "text": "like hard-code offsets the output came out through syslog so it was really very",
    "start": "535800",
    "end": "542460"
  },
  {
    "text": "basic very rudimentary but this is really the beginnings of our VMI if you",
    "start": "542460",
    "end": "548220"
  },
  {
    "text": "pull the debugger out of the bottle machine we still need some means to actually control the bottle machine from",
    "start": "548220",
    "end": "553440"
  },
  {
    "text": "the outside and to inspect the vertical machine from the outside and these are exactly the two capabilities that our",
    "start": "553440",
    "end": "558600"
  },
  {
    "text": "second building block the VMI lair or virtual machine introspection layer provides the lost control of a ttle",
    "start": "558600",
    "end": "565020"
  },
  {
    "text": "machine meaning to pause and resume the Whittle machine at any point in time and to inspect the Bertil machine so take a",
    "start": "565020",
    "end": "570330"
  },
  {
    "text": "closer look at the registers of the virtual CPU or a physical memory of the vertol machine and this functionality is",
    "start": "570330",
    "end": "576870"
  },
  {
    "text": "exported through an interface such that we can actually leverage it as an analyst well this already seems to address our",
    "start": "576870",
    "end": "582930"
  },
  {
    "text": "goal of full system analysis there's a problem that's closely related to VMI that we haven't discussed yet and this",
    "start": "582930",
    "end": "588930"
  },
  {
    "text": "is the so called semantic gap problem so essentially while BMI allows us to see the entire state of the brutal machine",
    "start": "588930",
    "end": "594990"
  },
  {
    "text": "or view of the state is very different than the view that the guest operating system has as an analyst essentially we",
    "start": "594990",
    "end": "600870"
  },
  {
    "text": "just see the bits and bytes in memory from the hypervisor but we don't have to semantic knowledge that the guest",
    "start": "600870",
    "end": "605910"
  },
  {
    "text": "operating system has that would allow us to interpret this view so we don't know where the guest operating system placed",
    "start": "605910",
    "end": "612330"
  },
  {
    "text": "its structures in memory and how these structures actually look like so while this example here looks random to us the",
    "start": "612330",
    "end": "618990"
  },
  {
    "text": "guest operating system might know I placed an e process structure at this particular location and I also know the",
    "start": "618990",
    "end": "624120"
  },
  {
    "text": "fields in this ypres structure so I can interpret this view and interpret these bits and bytes if you want to create a",
    "start": "624120",
    "end": "630150"
  },
  {
    "text": "tool it's really helpful for full system analysis we also need to provide a similar view than the guest operating",
    "start": "630150",
    "end": "635460"
  },
  {
    "text": "system has in our debugger such that we can leverage the kernel data structures while performing our",
    "start": "635460",
    "end": "640560"
  },
  {
    "text": "analysis and this is why we introduced a third layer into our architecture the semantic layer so at some point we got",
    "start": "640560",
    "end": "647700"
  },
  {
    "text": "kind of sick of constantly hacking the hypervisor updating the offsets and we",
    "start": "647700",
    "end": "652830"
  },
  {
    "text": "also realized that memory forensics tools that are out there they really solve this semantic gap issue that",
    "start": "652830",
    "end": "658740"
  },
  {
    "text": "Sebastian just talked about very nicely so we decided to leverage them and we",
    "start": "658740",
    "end": "663870"
  },
  {
    "text": "started by instrumenting the virtual machine to generate guest physical memory dumps at the point in",
    "start": "663870",
    "end": "672040"
  },
  {
    "text": "time that we were interested in and we would feed those into the memory forensics tools and this would give us a",
    "start": "672040",
    "end": "677859"
  },
  {
    "text": "nice holistic view of the operating system at that point in time so we could look at any process any kernel data",
    "start": "677859",
    "end": "683980"
  },
  {
    "text": "structures things of that nature however we still had to instrument the hypervisor with respect to exactly when",
    "start": "683980",
    "end": "691779"
  },
  {
    "text": "and for which events we wanted to generate these guest physical memory dumps the third building block in the",
    "start": "691779",
    "end": "698859"
  },
  {
    "text": "architectures a semantic layer and as the name suggests the purpose of the semantic layer is to bridge the semantic",
    "start": "698859",
    "end": "703899"
  },
  {
    "text": "gap and to reconstruct the knowledge that the guest operating system has on the hypervisor level in addition it",
    "start": "703899",
    "end": "709749"
  },
  {
    "text": "needs to export a semantic knowledge similar to the VM I layer through an interface such that we can actually use",
    "start": "709749",
    "end": "714970"
  },
  {
    "text": "it as an analyst while performing the analysis this leads us to our last goal an interactive and scriptable interface",
    "start": "714970",
    "end": "722339"
  },
  {
    "text": "so finally we realized we actually didn't need to generate an entire guest physical memory dump each time and we",
    "start": "722339",
    "end": "729629"
  },
  {
    "text": "simply plugged the two components together and we did that by exposing the guest physical memory directly through",
    "start": "729629",
    "end": "737319"
  },
  {
    "text": "the VM and then analyzed it directly with the memory forensics tool so this",
    "start": "737319",
    "end": "744429"
  },
  {
    "text": "allowed us to simply start and stop the VM and then directly perform our analysis without having to generate a",
    "start": "744429",
    "end": "752079"
  },
  {
    "text": "guest physical memory dump and over time we added control commands that enabled",
    "start": "752079",
    "end": "758709"
  },
  {
    "text": "our interactive interface and also at this point we effectively stopped using",
    "start": "758709",
    "end": "764589"
  },
  {
    "text": "any of the tools inside the guest so all of our analysis really was done outside of the guest the last building block in",
    "start": "764589",
    "end": "772360"
  },
  {
    "text": "our iectures interactive interface and this is really where everything comes together it is the environment in which",
    "start": "772360",
    "end": "778299"
  },
  {
    "text": "the actual analysis is performed and to accomplish this the interactive interface makes the capabilities that",
    "start": "778299",
    "end": "784089"
  },
  {
    "text": "the VM a layer provides and the semantic layer provides available to the analysts through a single interface such that we",
    "start": "784089",
    "end": "789879"
  },
  {
    "text": "can actually use them in addition it provides port for scripting such that we can automate tasks while performing the",
    "start": "789879",
    "end": "795730"
  },
  {
    "text": "actual analysis having described the architecture behind our my in theory we want to take a closer",
    "start": "795730",
    "end": "801489"
  },
  {
    "text": "look what we can actually get out of this architecture for this purpose we want to discuss the corn open-source",
    "start": "801489",
    "end": "806949"
  },
  {
    "text": "implementation of our VMI and describe how we implemented these building blocks that we just described in theory in",
    "start": "806949",
    "end": "812860"
  },
  {
    "text": "practice starting with our first building block the virtualization layer so for virtualization component we went",
    "start": "812860",
    "end": "820839"
  },
  {
    "text": "with qm ok BM it's actively developed it's well maintained it's also easy to install and use so for us it was really",
    "start": "820839",
    "end": "827980"
  },
  {
    "text": "the natural choice but that said there's really no dependency per se on Kamino kb",
    "start": "827980",
    "end": "834429"
  },
  {
    "text": "m all the changes that we made you could apply to any other hypervisor that",
    "start": "834429",
    "end": "839439"
  },
  {
    "text": "supports hardware virtualization and then simply plug the rest of the system into that so in the next slide we'll",
    "start": "839439",
    "end": "846939"
  },
  {
    "text": "look at some of those changes in the form of the VMI component to implement a",
    "start": "846939",
    "end": "852699"
  },
  {
    "text": "VMI component we essentially extended KVM and qmo to provide emi functionality",
    "start": "852699",
    "end": "857709"
  },
  {
    "text": "and we try to keep this via maile as simple as possible to make our v my portable to other hypervisors as well",
    "start": "857709",
    "end": "863429"
  },
  {
    "text": "essentially the vm ila exports the functionality that modern intel cpus provides to an analyst such that she can",
    "start": "863429",
    "end": "870639"
  },
  {
    "text": "use it to perform EMI and this function this functionality is ported through an interface referred to as Q and P Q MP",
    "start": "870639",
    "end": "877899"
  },
  {
    "text": "stands for cuomo mission protocol it's essentially a JSON based protocol that was designed to control to email",
    "start": "877899",
    "end": "883869"
  },
  {
    "text": "instances through a socket connection and it just seemed like a natural place to also implement our via my commands so",
    "start": "883869",
    "end": "889959"
  },
  {
    "text": "this means an analyst can now essentially send JSON based be my commands to or be my layer which will",
    "start": "889959",
    "end": "895209"
  },
  {
    "text": "interpret them and execute them at this point also then a word of warning since",
    "start": "895209",
    "end": "900249"
  },
  {
    "text": "we rely heavily on the features that modern intro cpus provide the current implementation is restricted to intro",
    "start": "900249",
    "end": "906429"
  },
  {
    "text": "cpus only we will see some of these features that we use later on in the live demonstration but for now let's",
    "start": "906429",
    "end": "912910"
  },
  {
    "text": "move on and take a look at assert building block the semantic layer so in the last section I talked about a memory",
    "start": "912910",
    "end": "918999"
  },
  {
    "text": "forensics tool specifically we rely very heavily on recall recall is a very",
    "start": "918999",
    "end": "924699"
  },
  {
    "text": "powerful memory forensics tool it's written completely in Python then it has a very pluggable architecture so through that",
    "start": "924699",
    "end": "932070"
  },
  {
    "text": "it really supports all of the major operating systems one might expect Windows OSX in in Linux and also has all",
    "start": "932070",
    "end": "940830"
  },
  {
    "text": "the features one would expect from a memory forensics tool enumerated processes listing loaded drivers",
    "start": "940830",
    "end": "948740"
  },
  {
    "text": "inspecting data structures things of that nature and effectively what we did was we leverage this pluggable natrum",
    "start": "948740",
    "end": "955500"
  },
  {
    "text": "began writing plugin so the first plug-in we wrote was the interface with",
    "start": "955500",
    "end": "960630"
  },
  {
    "text": "the guest physical memory so that the recall could directly access the guest physical memory and then over time we",
    "start": "960630",
    "end": "969000"
  },
  {
    "text": "added these control commands that then fed into the interface component we'll",
    "start": "969000",
    "end": "974970"
  },
  {
    "text": "have a look at now Riko already provides an interactive interface in the form of an i pricing",
    "start": "974970",
    "end": "980790"
  },
  {
    "text": "shell and we decided to extend a shell with vmi commands to make the vmi functionality and to recover",
    "start": "980790",
    "end": "987270"
  },
  {
    "text": "functionality available through a single interface so essentially we implemented recall plug-ins for all of the my",
    "start": "987270",
    "end": "993810"
  },
  {
    "text": "commands that we support and made this available through the ipython shell and also created a pison api data what allow",
    "start": "993810",
    "end": "999630"
  },
  {
    "text": "scripting and using these commands within scripts in addition we added VMI",
    "start": "999630",
    "end": "1004850"
  },
  {
    "text": "events so essentially whenever something interesting happens within the virtual machine for instance of breakpoints it's",
    "start": "1004850",
    "end": "1010190"
  },
  {
    "text": "a BMI event will be generated and will we send an adjacent format through the qnp socket through the our VM I recall",
    "start": "1010190",
    "end": "1017540"
  },
  {
    "text": "layer and this reco layer will then make the event available through the I pricing shell for manual analysis or",
    "start": "1017540",
    "end": "1023300"
  },
  {
    "text": "through the Pisan API in case you want to perform scripts based on certain events having described the architecture",
    "start": "1023300",
    "end": "1031069"
  },
  {
    "text": "and implementation of our EMI we hope we got you a little bit excited about the system and we of course also want to",
    "start": "1031070",
    "end": "1036140"
  },
  {
    "text": "give you a taste of the whole tool for this purpose we prepared a live demonstration that will give you an",
    "start": "1036140",
    "end": "1041180"
  },
  {
    "text": "overview of some of the features that are VMI provides and then the following we'll move into this live demonstration",
    "start": "1041180",
    "end": "1047050"
  },
  {
    "text": "so while Sebastian is switching over I'll give you a little bit of an",
    "start": "1047050",
    "end": "1052730"
  },
  {
    "text": "overview of what you're going to see so we have a wanna cry sample you guys are probably familiar if not in detail at",
    "start": "1052730",
    "end": "1059480"
  },
  {
    "text": "least by reputation I mean specifically we're going to look at the prop Asian mechanism it's sort of one of the",
    "start": "1059480",
    "end": "1064950"
  },
  {
    "text": "more interesting parts of wanna cry so for that we actually have two VMs set up",
    "start": "1064950",
    "end": "1070500"
  },
  {
    "text": "a host VM and a target VM the host VM will infect the target VM so most of the",
    "start": "1070500",
    "end": "1076169"
  },
  {
    "text": "interesting analysis that you're going to see will happen on the target VM so",
    "start": "1076169",
    "end": "1081720"
  },
  {
    "text": "what you see here is the our VM my interface it's essentially an interactive shell that we can use to analyze the system please let me know if",
    "start": "1081720",
    "end": "1088320"
  },
  {
    "text": "you cannot read this I can enlarge the font a little bit so essentially this interface is where we perform the actual",
    "start": "1088320",
    "end": "1096210"
  },
  {
    "text": "analysis and every time we see the shell prompt that means the voting machine is paused because we're performing our",
    "start": "1096210",
    "end": "1101250"
  },
  {
    "text": "analysis if it would go to the target machine now you see I cannot move the mouse I cannot interact with the little",
    "start": "1101250",
    "end": "1106950"
  },
  {
    "text": "machine because it's currently paused of course we can also resume the little machine and for this purpose we want to",
    "start": "1106950",
    "end": "1113100"
  },
  {
    "text": "take a look at our first command today the first our VM I command essentially the shell support step completion and",
    "start": "1113100",
    "end": "1118770"
  },
  {
    "text": "the first command that we want to use this continue command which will resume the execution of the virtual machine you",
    "start": "1118770",
    "end": "1124710"
  },
  {
    "text": "see the prompt goes away and now if you go back to the target machine we can actually interact are already open to",
    "start": "1124710",
    "end": "1130890"
  },
  {
    "text": "start menu here I can close windows and etc if I go back to the interface now of",
    "start": "1130890",
    "end": "1137039"
  },
  {
    "text": "course can also pause the video machine at any point in time I can do it by simply pressing ctrl C and then we get",
    "start": "1137039",
    "end": "1142620"
  },
  {
    "text": "our prompt back and can analyze again so you see there's some information printed to the screen first of all the event",
    "start": "1142620",
    "end": "1149010"
  },
  {
    "text": "that a court is printed these are the VM events that I just referred to in the implementation and we see on which CPU",
    "start": "1149010",
    "end": "1155159"
  },
  {
    "text": "this event occurred and since this was a user triggered event I press control C the CPU set to none so it didn't occur",
    "start": "1155159",
    "end": "1161580"
  },
  {
    "text": "on any of the CPUs we also see the current context so essentially this little machine that we're looking at has",
    "start": "1161580",
    "end": "1167730"
  },
  {
    "text": "two little CPUs we see the current instruction pointer on each of those CPUs we see the PID in context that here",
    "start": "1167730",
    "end": "1174030"
  },
  {
    "text": "the in context and the dtb of the process in context so with the short",
    "start": "1174030",
    "end": "1179070"
  },
  {
    "text": "introduction to the our VMI interface we will now take a closer look at one a crime how we can analyze it using our",
    "start": "1179070",
    "end": "1184980"
  },
  {
    "text": "VMI so the first thing that Sebastian is gonna do is he's gonna enable the lbr",
    "start": "1184980",
    "end": "1190110"
  },
  {
    "text": "and I'll talk to that in just a moment he's also going to set our first",
    "start": "1190110",
    "end": "1196060"
  },
  {
    "text": "breakpoint on e^x allocate pool and he's going to do so using the symbol name so",
    "start": "1196060",
    "end": "1202300"
  },
  {
    "text": "recall will resolve that for us of course if you want to set a breakpoint",
    "start": "1202300",
    "end": "1208360"
  },
  {
    "text": "on a virtual address directly you can do that as well um will give Sebastian just a moment",
    "start": "1208360",
    "end": "1215680"
  },
  {
    "text": "here to get all the VMS started and want to cry started so we can have a look at",
    "start": "1215680",
    "end": "1221500"
  },
  {
    "text": "the propagation and while we wait for the breakpoint to hit I'll talk a little",
    "start": "1221500",
    "end": "1228130"
  },
  {
    "text": "bit more to the breakpoint command so he set this breakpoint globally and you see he said the globally flag to true so",
    "start": "1228130",
    "end": "1234970"
  },
  {
    "text": "that is he set the breakpoint not specific to a particular process we want",
    "start": "1234970",
    "end": "1241630"
  },
  {
    "text": "to see all execution flows that hit this breakpoint it makes sense because it's it's a kernel function that we want to",
    "start": "1241630",
    "end": "1249520"
  },
  {
    "text": "see here so the the breakpoint has hit we see the breakpoint a software",
    "start": "1249520",
    "end": "1254800"
  },
  {
    "text": "breakpoint came in on CPU zero and the first thing that Sebastian's gonna do is go ahead and query the lbr excuse me",
    "start": "1254800",
    "end": "1263910"
  },
  {
    "text": "now the lbr is the last branch record on this is a feature of the hardware that",
    "start": "1263910",
    "end": "1271330"
  },
  {
    "text": "effectively will show you the control flow leading up to the current point in execution this particular CPU here has",
    "start": "1271330",
    "end": "1279760"
  },
  {
    "text": "16 such records each record is comprised of a from and a to address and then we",
    "start": "1279760",
    "end": "1287710"
  },
  {
    "text": "have a little bit more information so recall will try to resolve any symbols at that address if you can't resolve the",
    "start": "1287710",
    "end": "1293560"
  },
  {
    "text": "symbol we get these question marks that you see here and of course the instruction at that address so if we",
    "start": "1293560",
    "end": "1302080"
  },
  {
    "text": "consider the first pair here that's the most recent is always at the at the top",
    "start": "1302080",
    "end": "1308140"
  },
  {
    "text": "of the stack we see that it's a call to e X allocate pool which makes sense",
    "start": "1308140",
    "end": "1313810"
  },
  {
    "text": "that's where we set our breakpoint but it's actually coming from a region in memory for which recall can't resolve",
    "start": "1313810",
    "end": "1320200"
  },
  {
    "text": "any symbols so that's especially in the kernel it's somewhat unusual at least",
    "start": "1320200",
    "end": "1325300"
  },
  {
    "text": "makes sense to have a closer look at this code in memory and see what it's",
    "start": "1325300",
    "end": "1333020"
  },
  {
    "text": "doing so a common functionality that we know from traditional debuggers is to disassemble instructions and of course",
    "start": "1333020",
    "end": "1339590"
  },
  {
    "text": "we can also do that in our VM I and for this purpose we use the recalled disassemble plugin essentially just gets",
    "start": "1339590",
    "end": "1345530"
  },
  {
    "text": "the address that you want to disassemble and the number of instructions that you want to disassemble so 10 in that",
    "start": "1345530",
    "end": "1351320"
  },
  {
    "text": "particular example and then it will display the instructions at that memory location of course you could not also",
    "start": "1351320",
    "end": "1357230"
  },
  {
    "text": "take a closer look at the instructs before the call or even dump the entire page to disk and load it up in Ida to",
    "start": "1357230",
    "end": "1363140"
  },
  {
    "text": "analyze these instructions further but for the purpose of this demonstration we want to move on a little bit and take a",
    "start": "1363140",
    "end": "1368660"
  },
  {
    "text": "closer look what else is going on on this little machine so let me continue here and we see that the breakpoint is",
    "start": "1368660",
    "end": "1377540"
  },
  {
    "text": "hit again so let's get the AVR and see where we actually are and this picture",
    "start": "1377540",
    "end": "1383030"
  },
  {
    "text": "looks very different now if you take a closer look at these function names it seems a little bit like we are in some",
    "start": "1383030",
    "end": "1388100"
  },
  {
    "text": "form of interrupt Handler and it's just something to keep in mind that when you analyze malware and you place a",
    "start": "1388100",
    "end": "1393170"
  },
  {
    "text": "breakpoint globally in the kernel it might very well be that you get a benign call to the function as it seems to be",
    "start": "1393170",
    "end": "1399170"
  },
  {
    "text": "in that case so that's not that interesting let's continue again we hit the breakpoint again let's take another",
    "start": "1399170",
    "end": "1404840"
  },
  {
    "text": "look at the LPR and now the picture looks very different again so in this particular case we were back on the page",
    "start": "1404840",
    "end": "1410540"
  },
  {
    "text": "that Jonas found at the very beginning and we want to take a closer look what's going on at this particular point in",
    "start": "1410540",
    "end": "1415700"
  },
  {
    "text": "time so we'll have a look at the disassembly and the first thing you'll",
    "start": "1415700",
    "end": "1421760"
  },
  {
    "text": "see is the actual call to e^x allocate pool there at the very top no X allocate pool effectively returns a pointer to a",
    "start": "1421760",
    "end": "1428270"
  },
  {
    "text": "newly allocated buffer so if we sort of follow that return value a little bit we",
    "start": "1428270",
    "end": "1434360"
  },
  {
    "text": "see that it's copied around a bit first into our 9 then into already.i",
    "start": "1434360",
    "end": "1441070"
  },
  {
    "text": "we also see a few instructions later that he actually loads a rip relative",
    "start": "1441070",
    "end": "1446720"
  },
  {
    "text": "address into RSI since it's a rip relative address and it's still on the",
    "start": "1446720",
    "end": "1451910"
  },
  {
    "text": "same page we might make the assumption that it's some code and even further",
    "start": "1451910",
    "end": "1457460"
  },
  {
    "text": "down you see he actually starts copying so he starts copying from this reparative address into the",
    "start": "1457460",
    "end": "1464549"
  },
  {
    "text": "newly allocated buffer so at this point our theory essentially is that he's",
    "start": "1464549",
    "end": "1469559"
  },
  {
    "text": "copying instructions introduced newly allocated buffer and to verify the theory we want to place a breakpoint on",
    "start": "1469559",
    "end": "1475409"
  },
  {
    "text": "the actual copy instruction and take a closer look at what is happening at this particular point again because we're in",
    "start": "1475409",
    "end": "1481860"
  },
  {
    "text": "a kernel I will send a set this breakpoint globally and this time we use an address to set this break to an instead of a",
    "start": "1481860",
    "end": "1487770"
  },
  {
    "text": "symbol we can also list the breakpoints that we have currently except with this",
    "start": "1487770",
    "end": "1493080"
  },
  {
    "text": "VM debug list command and of course we can also remove breakpoints so for this example we want to remove the first",
    "start": "1493080",
    "end": "1498779"
  },
  {
    "text": "breakpoint which was an X allocate pool since we don't need it any more and we can simply do that by specifying the",
    "start": "1498779",
    "end": "1505049"
  },
  {
    "text": "index of the breakpoint that we want to remove now let's continue this execution we hit the breakpoint instantly and at",
    "start": "1505049",
    "end": "1511679"
  },
  {
    "text": "this point in time we might want to take a closer look at the actual register state of the CPU and to do that we can",
    "start": "1511679",
    "end": "1517409"
  },
  {
    "text": "use the VM CPU state commands so this will show us all the registers of CPU zero and you see ours is indeed pointing",
    "start": "1517409",
    "end": "1524970"
  },
  {
    "text": "to the page that we have been analyzing so far as Jonas argued and RDI now points to the newly allocated buffer so",
    "start": "1524970",
    "end": "1531960"
  },
  {
    "text": "an interesting question that we may have now is to take a closer look how these instructions are copied so for this",
    "start": "1531960",
    "end": "1537990"
  },
  {
    "text": "purpose I can first verify that ours is actually pointing to instructions and to do that I can use to disassemble plug-in",
    "start": "1537990",
    "end": "1544559"
  },
  {
    "text": "again and I can use this dollar syntax to refer to the current value of ours I that you might know from gdb for",
    "start": "1544559",
    "end": "1549960"
  },
  {
    "text": "instance and if you take a look here it really seems like these are valid instructions even seems like a function",
    "start": "1549960",
    "end": "1555240"
  },
  {
    "text": "prologue of some sort so at this point we want to use the scripting functionality to observe the copying a",
    "start": "1555240",
    "end": "1561840"
  },
  {
    "text": "little bit so the first thing we're going to do is we're going to save the value of RTI in this variable here this",
    "start": "1561840",
    "end": "1569669"
  },
  {
    "text": "is essentially an eye pison shell so can use arbitrary pricing commands and for the purpose of this demonstration we",
    "start": "1569669",
    "end": "1575220"
  },
  {
    "text": "just want to write a small group that will essentially perform a single step",
    "start": "1575220",
    "end": "1580679"
  },
  {
    "text": "operation in each loop iteration which means exactly one instruction will be",
    "start": "1580679",
    "end": "1585870"
  },
  {
    "text": "executed in a guest system we then we'll use the dump plugin of recall to show",
    "start": "1585870",
    "end": "1591179"
  },
  {
    "text": "the contents of the buffer and that will show us how the buffers changing we also have to give it the",
    "start": "1591179",
    "end": "1597600"
  },
  {
    "text": "number of points that we want to display similar to the disassembled plug-in and we'll add a new line just to make it",
    "start": "1597600",
    "end": "1603090"
  },
  {
    "text": "output a little bit more pretty so if you execute this you nicely see how byte by byte is copied into the buffer so",
    "start": "1603090",
    "end": "1610049"
  },
  {
    "text": "exactly what you're seeing is first of all this single step event is submitted every time the single step comes back",
    "start": "1610049",
    "end": "1616640"
  },
  {
    "text": "afterwards we see the current context like for any other event and here is the",
    "start": "1616640",
    "end": "1622049"
  },
  {
    "text": "output finally of our dump command that we had in the loop and a newline at the very end so if you take a look at these",
    "start": "1622049",
    "end": "1628799"
  },
  {
    "text": "fights you see that pipe by byte is copied into this buffer and we can really see that these instructions are",
    "start": "1628799",
    "end": "1634830"
  },
  {
    "text": "now located in the buffer so while this was a toy example we hope you get an idea what you can use the scripting",
    "start": "1634830",
    "end": "1640740"
  },
  {
    "text": "feature for and the possibilities that it provides at this point we may have the question when is this newly",
    "start": "1640740",
    "end": "1646799"
  },
  {
    "text": "allocated buffer that seems to contain its instructions now actually going to be called and to figure that I will",
    "start": "1646799",
    "end": "1652980"
  },
  {
    "text": "place a breakpoint on this buffer and we'll then continue the execution so",
    "start": "1652980",
    "end": "1661669"
  },
  {
    "text": "sorry I'm tight yeah so at this point a",
    "start": "1661669",
    "end": "1669179"
  },
  {
    "text": "little bit of background so at this point a backdoor has been installed or is being installed and in order for us",
    "start": "1669179",
    "end": "1677159"
  },
  {
    "text": "to now see the breakpoints of essence gonna go ahead and start the host as well you see that as he starts the host",
    "start": "1677159",
    "end": "1682620"
  },
  {
    "text": "we get that break point and at this point now if we check the lbr we'll see",
    "start": "1682620",
    "end": "1690120"
  },
  {
    "text": "that the control flow comes through this srvs",
    "start": "1690120",
    "end": "1696169"
  },
  {
    "text": "driver so this is the SMB driver for those of you that are familiar with wanna cry it's probably not a surprise",
    "start": "1696169",
    "end": "1703279"
  },
  {
    "text": "so if we were doing a full analysis obviously we would try to understand this back door and and take a closer",
    "start": "1703279",
    "end": "1710399"
  },
  {
    "text": "look at it but for the purposes of of our demonstration here we're just going",
    "start": "1710399",
    "end": "1716159"
  },
  {
    "text": "to yeah observe that the control flow is coming through the SMB driver and just point",
    "start": "1716159",
    "end": "1723659"
  },
  {
    "text": "out another feature of recall or another plug in the modules plug in we can at",
    "start": "1723659",
    "end": "1728960"
  },
  {
    "text": "least verify that this SRV driver is in fact loaded at the address that's",
    "start": "1728960",
    "end": "1736730"
  },
  {
    "text": "indicated by the lbr so with that we're",
    "start": "1736730",
    "end": "1742490"
  },
  {
    "text": "actually going to move out of kernel space a little bit and move into user space and watch the propagation as it",
    "start": "1742490",
    "end": "1751190"
  },
  {
    "text": "enters user space so one of the nice features of our VM is that you can",
    "start": "1751190",
    "end": "1757280"
  },
  {
    "text": "perform full system analysis meaning you can watch the kernel and you can also watch user space processes and at this",
    "start": "1757280",
    "end": "1762980"
  },
  {
    "text": "point in time we want to take a closer look at the actions that the Mau is performing in user space and for this",
    "start": "1762980",
    "end": "1768530"
  },
  {
    "text": "purpose I just placed a breakpoint on anti create user process which is essentially the function on Windows",
    "start": "1768530",
    "end": "1773840"
  },
  {
    "text": "seven that's called when a new process is created and since we don't interact with the little machine process",
    "start": "1773840",
    "end": "1778910"
  },
  {
    "text": "creations that are interesting because there's a high chance that these are actually caused by the malware so let's",
    "start": "1778910",
    "end": "1784250"
  },
  {
    "text": "remove the breakpoints that we don't need anymore at this point in time this is the breakpoint that we placed on the",
    "start": "1784250",
    "end": "1791300"
  },
  {
    "text": "buffer the pectoral John is just described and let's continue the",
    "start": "1791300",
    "end": "1796550"
  },
  {
    "text": "execution will also continue the host at this point and we will see that the",
    "start": "1796550",
    "end": "1803780"
  },
  {
    "text": "breakpoint is coming back and at this point we might be interested which process is actually calling anti create",
    "start": "1803780",
    "end": "1810410"
  },
  {
    "text": "user process and to figure this out we can again use the CPU State but as you may have noticed this is the first time",
    "start": "1810410",
    "end": "1816770"
  },
  {
    "text": "actually that we get an event back on CPU one rather than CPU zero so so far we always operate on CPU zero and if you",
    "start": "1816770",
    "end": "1824180"
  },
  {
    "text": "want to have the CPU set of CPU 1 we can simply pass this one argument here and we will get the CPU state of CP 1",
    "start": "1824180",
    "end": "1830660"
  },
  {
    "text": "displayed at the very bottom of the CPU state we always print the processes in context and the name of the processes",
    "start": "1830660",
    "end": "1837470"
  },
  {
    "text": "core in context and it seems like that the alphas process is trying to create a new process before we look at what",
    "start": "1837470",
    "end": "1844580"
  },
  {
    "text": "process is actually being created here we'll have a closer look at LS s so if",
    "start": "1844580",
    "end": "1850910"
  },
  {
    "text": "else s is in fact I'm creating malicious processes and we don't know that it is yet but it's it's worth checking we want",
    "start": "1850910",
    "end": "1859310"
  },
  {
    "text": "to take a closer look at the LSS address space so we're gonna do that by querying the VAT table for",
    "start": "1859310",
    "end": "1866840"
  },
  {
    "text": "the Alsace process and this is effectively a table that will show you all the allocated memory sections for",
    "start": "1866840",
    "end": "1873740"
  },
  {
    "text": "given address space in this case it's the LSS process so you see all of the DLLs that are loaded you also see the",
    "start": "1873740",
    "end": "1881750"
  },
  {
    "text": "LSS binary image itself and what jumps out a little bit are these two sections",
    "start": "1881750",
    "end": "1887600"
  },
  {
    "text": "in memory the reason these are interesting is because they are both allocated read/write/execute",
    "start": "1887600",
    "end": "1892730"
  },
  {
    "text": "and they don't have a file on the file system backing them so it might be a",
    "start": "1892730",
    "end": "1899000"
  },
  {
    "text": "good place to start for our analysis we'll have a closer look at one of those",
    "start": "1899000",
    "end": "1905179"
  },
  {
    "text": "memory sections so we'll see it's just zeroed out buffer in fact we have to be",
    "start": "1905179",
    "end": "1910970"
  },
  {
    "text": "a little bit careful now that we're in user space we actually have to specify the the address space that we're",
    "start": "1910970",
    "end": "1918320"
  },
  {
    "text": "interested in so with the CC command Sebastian is effectively instructing",
    "start": "1918320",
    "end": "1923900"
  },
  {
    "text": "recall to change context to a process with pit 496 and if he dumps the same",
    "start": "1923900",
    "end": "1930320"
  },
  {
    "text": "buffer again hopefully we'll see some data this time in fact we do and what",
    "start": "1930320",
    "end": "1936679"
  },
  {
    "text": "probably jumps out here is this MZ header so we might make the assumption",
    "start": "1936679",
    "end": "1941990"
  },
  {
    "text": "this is a PE image at least we want to verify it we can try to verify that with",
    "start": "1941990",
    "end": "1947450"
  },
  {
    "text": "the PE info um plugins see if recall can actually parse a valid PE header here and in fact",
    "start": "1947450",
    "end": "1953780"
  },
  {
    "text": "it seems like he's able to so we have some interesting information here we see it's it's a library image it's a dll it",
    "start": "1953780",
    "end": "1960710"
  },
  {
    "text": "has an entry point it has a text section so there's probably some code here now",
    "start": "1960710",
    "end": "1967520"
  },
  {
    "text": "if we're again if we were doing a full analysis this would clearly be a very interesting candidate for further",
    "start": "1967520",
    "end": "1974150"
  },
  {
    "text": "analysis as would the other section that we found in the VAD table but at this",
    "start": "1974150",
    "end": "1984110"
  },
  {
    "text": "point we will simply continue before we move on I want to show you just another",
    "start": "1984110",
    "end": "1990140"
  },
  {
    "text": "plugin essentially you can use top completion for any common here in the shell and an interesting command as PE dump which allows you to",
    "start": "1990140",
    "end": "1997210"
  },
  {
    "text": "save a file that you found in memory to disk and then load it up in hire for instance recall also provides an",
    "start": "1997210",
    "end": "2003120"
  },
  {
    "text": "interactive help so you can essentially add a question mark after any command that you're interested in you will get",
    "start": "2003120",
    "end": "2008760"
  },
  {
    "text": "an interactive help that will allow you take a close look at the arguments for the various plugins and how to use it at",
    "start": "2008760",
    "end": "2015299"
  },
  {
    "text": "this point we may actually be interested in getting to know which process is about to be created by this anti create",
    "start": "2015299",
    "end": "2022169"
  },
  {
    "text": "user process call and to do that we can take a closer look at the arguments that have been passed to the anti create user",
    "start": "2022169",
    "end": "2028740"
  },
  {
    "text": "process function so I will just get a couple of bytes from the stack pointer here I can use this area syntax to refer",
    "start": "2028740",
    "end": "2035190"
  },
  {
    "text": "to the sec pointer of the first CPU since the breakpoint come back on that CPU and you see at the top is the return",
    "start": "2035190",
    "end": "2041669"
  },
  {
    "text": "address and down here we see another pointer and this pointers interesting so the anti create user process function",
    "start": "2041669",
    "end": "2047940"
  },
  {
    "text": "gets a pointer to an RTO user process parameters structure and the structure amongst other things contains the name",
    "start": "2047940",
    "end": "2054720"
  },
  {
    "text": "of the process that's about to be created so to take a closer look at the",
    "start": "2054720",
    "end": "2060148"
  },
  {
    "text": "structure we can use one of the really cool features of recall so essentially recall has a profile object and we",
    "start": "2060149",
    "end": "2066868"
  },
  {
    "text": "talked a lot about the semantic gap during presentation and this profile object essentially bridges the semantic",
    "start": "2066869",
    "end": "2072658"
  },
  {
    "text": "gap for us it contains a lot of information about the guest operating system amongst other thing it contains a",
    "start": "2072659",
    "end": "2077970"
  },
  {
    "text": "lot of the structures that the guest operating system is using and recall the Texas profile automatically so I didn't",
    "start": "2077970",
    "end": "2084060"
  },
  {
    "text": "have to tell him we were using Windows 7 64 bit here he figured this all out by himself and you can now essentially use",
    "start": "2084060",
    "end": "2091470"
  },
  {
    "text": "tab completion to access the various structures to the guest operating systems using and you can just cast an",
    "start": "2091470",
    "end": "2097410"
  },
  {
    "text": "arbitrary memory area into that structure so if I print this nearly",
    "start": "2097410",
    "end": "2103020"
  },
  {
    "text": "create variable now we will get a list of all the fields in that structure and all the values in that structure",
    "start": "2103020",
    "end": "2108119"
  },
  {
    "text": "I can even access specific fields in a structure using tab completion and the simple dot syntax and we see down here",
    "start": "2108119",
    "end": "2114270"
  },
  {
    "text": "is the path of the image that's about to be created so it's a really helpful feature when",
    "start": "2114270",
    "end": "2120450"
  },
  {
    "text": "you perform kernel analysis or even if you're in user space because it essentially allows you to navigate through the kernel data structures and",
    "start": "2120450",
    "end": "2126570"
  },
  {
    "text": "take a look then in pison and interact with them and pison also in scripts for instance",
    "start": "2126570",
    "end": "2131730"
  },
  {
    "text": "enrico will go as far as even to try to resolve pointers for you so if a structure points to another structure he",
    "start": "2131730",
    "end": "2138760"
  },
  {
    "text": "will automatically try to resolve that structure and give you the correct structure back such that you can use it",
    "start": "2138760",
    "end": "2143819"
  },
  {
    "text": "so our theory at this point is that this process is about to be created",
    "start": "2143819",
    "end": "2149020"
  },
  {
    "text": "to verify this we can take a look at the currently existing processes using the PS list command so this will list all",
    "start": "2149020",
    "end": "2155109"
  },
  {
    "text": "the processes that currently exist on the working machine and as we can see this image path is not in the process",
    "start": "2155109",
    "end": "2160569"
  },
  {
    "text": "list yet that's because the process is about to be created which has called the anti create user process function but it hasn't been",
    "start": "2160569",
    "end": "2166990"
  },
  {
    "text": "created yet so to figure out when this process is created we can intercept the",
    "start": "2166990",
    "end": "2172420"
  },
  {
    "text": "return of the anti create user process function and to do that we will take a look at another feature watch' points so",
    "start": "2172420",
    "end": "2179950"
  },
  {
    "text": "at this point we'll place a watch point at the current stack pointer to figure out when the return address is moved",
    "start": "2179950",
    "end": "2185079"
  },
  {
    "text": "from the stack since this will then signify the function returned in addition we will place as watch point",
    "start": "2185079",
    "end": "2191230"
  },
  {
    "text": "just for a single process not globally as we did for the breakpoints before even though we could we have to give a",
    "start": "2191230",
    "end": "2197260"
  },
  {
    "text": "length of this watch point which will just set one byte here and the type so",
    "start": "2197260",
    "end": "2202780"
  },
  {
    "text": "whether this is a read access watch point the right access watch point or if any access should trigger it as we are",
    "start": "2202780",
    "end": "2209619"
  },
  {
    "text": "setting it right here let's also remove this breakpoint on the anti create user",
    "start": "2209619",
    "end": "2215740"
  },
  {
    "text": "process function since we don't need it anymore in this demonstration stream sorry and",
    "start": "2215740",
    "end": "2221020"
  },
  {
    "text": "let's continue and we see this what point comes back and if you take a look at the PS list now after this watch",
    "start": "2221020",
    "end": "2227559"
  },
  {
    "text": "point returns we see that this process just has been created and now the images",
    "start": "2227559",
    "end": "2233319"
  },
  {
    "text": "within the PS list and we could now go ahead take a look at the vat table of this process and keep analyzing for",
    "start": "2233319",
    "end": "2239109"
  },
  {
    "text": "instance so we have one final reveal for you guys we're going to show you wanna",
    "start": "2239109",
    "end": "2244750"
  },
  {
    "text": "cry decryptor sebastian's gonna go ahead and decrypt all of the files on our host",
    "start": "2244750",
    "end": "2250119"
  },
  {
    "text": "machine and as he's typing you'll see were cheating here a little bit he's",
    "start": "2250119",
    "end": "2255819"
  },
  {
    "text": "simply reverting the snapshot back to the state that we started the demo in",
    "start": "2255819",
    "end": "2262010"
  },
  {
    "text": "but with that we just wanted to show you that snapshotting saving and restoring",
    "start": "2262010",
    "end": "2268530"
  },
  {
    "text": "snapshots on the fly through the recoil interface is something that we implement it and support as well so with that our",
    "start": "2268530",
    "end": "2277650"
  },
  {
    "text": "demo is complete and I want to leave you with just a very short summary hopefully",
    "start": "2277650",
    "end": "2286260"
  },
  {
    "text": "we have been able to convince you the full system analysis is something that is useful and worthwhile to that end we",
    "start": "2286260",
    "end": "2294810"
  },
  {
    "text": "showed you our VMI our debugger on steroids",
    "start": "2294810",
    "end": "2299910"
  },
  {
    "text": "it is fully isolated from the guest so we don't rely on any components within",
    "start": "2299910",
    "end": "2305849"
  },
  {
    "text": "the guest to do our analysis provides full control and access to the guest VM",
    "start": "2305849",
    "end": "2312450"
  },
  {
    "text": "and it's completely interactive in scriptable as we showed you in the demo as far as we are aware there's no other",
    "start": "2312450",
    "end": "2319589"
  },
  {
    "text": "tools that fill this niche with the features that we showed you so we offer",
    "start": "2319589",
    "end": "2325530"
  },
  {
    "text": "this as a open source tool for you to use we're open for feedback really like",
    "start": "2325530",
    "end": "2334619"
  },
  {
    "text": "this to gain some traction the I'll just",
    "start": "2334619",
    "end": "2339900"
  },
  {
    "text": "say a couple of things to the implementation so we support all the profiles on the recall supports we also",
    "start": "2339900",
    "end": "2348359"
  },
  {
    "text": "have a pre boot profile that we created not all of those profiles are as tested",
    "start": "2348359",
    "end": "2354990"
  },
  {
    "text": "and as vetted as the Windows profiles that we generally use so if you find any bugs let us know so that we can that we",
    "start": "2354990",
    "end": "2362640"
  },
  {
    "text": "can fix those also Sebastian said it during the presentation Belle simply",
    "start": "2362640",
    "end": "2368460"
  },
  {
    "text": "reiterate Intel only so the implementation requires an intel cpu",
    "start": "2368460",
    "end": "2374099"
  },
  {
    "text": "with vmx extensions finally as it exists",
    "start": "2374099",
    "end": "2379440"
  },
  {
    "text": "in the repository right now it's all source code so if you're comfortable compiling it yourself",
    "start": "2379440",
    "end": "2385710"
  },
  {
    "text": "you're clearly welcome to do that if not hang tight it's sort of the",
    "start": "2385710",
    "end": "2391470"
  },
  {
    "text": "the first thing on our to-do list within the next week the latest we hope to get",
    "start": "2391470",
    "end": "2397650"
  },
  {
    "text": "some kind of installer or package up there to make the installation a little",
    "start": "2397650",
    "end": "2404099"
  },
  {
    "text": "bit easier so with that the talk is concluded and take any questions if",
    "start": "2404099",
    "end": "2412950"
  },
  {
    "text": "there are any yes",
    "start": "2412950",
    "end": "2419359"
  },
  {
    "text": "the the it's recall so recall supports a whole bunch of formats crash dumps among",
    "start": "2422070",
    "end": "2430810"
  },
  {
    "text": "them in various formats raw I mean recall as a memory forensics tool",
    "start": "2430810",
    "end": "2435970"
  },
  {
    "text": "have a look at it like I said it's really powerful and you can do sort of",
    "start": "2435970",
    "end": "2441880"
  },
  {
    "text": "static memory forensics on all kinds of formats alright thank you yes about",
    "start": "2441880",
    "end": "2456760"
  },
  {
    "text": "missing our BMI sorry they have a blog about using our BMI a block not yet",
    "start": "2456760",
    "end": "2462099"
  },
  {
    "text": "we're preparing of like a lot post that hopefully comes out next week thank you",
    "start": "2462099",
    "end": "2467790"
  }
]