[
  {
    "start": "0",
    "end": "46000"
  },
  {
    "text": "I'd like to welcome our last speaker on the new page of injection book uh mem",
    "start": "240",
    "end": "6080"
  },
  {
    "text": "casted injections um Ivan novakov please welcome",
    "start": "6080",
    "end": "13320"
  },
  {
    "text": "him hi all hi blackhead and thank you for coming I want to Super prise the",
    "start": "17000",
    "end": "22920"
  },
  {
    "text": "last talk so um does anyone know what is m c",
    "start": "22920",
    "end": "31960"
  },
  {
    "text": "right I am too so uh my short buyer I'm a c and security researcher since last 5",
    "start": "32880",
    "end": "41399"
  },
  {
    "text": "years and also back Hunter just just funny and uh also we",
    "start": "41399",
    "end": "48879"
  },
  {
    "start": "46000",
    "end": "46000"
  },
  {
    "text": "must um try to understand what is mkast mkast is a very popular technology it's",
    "start": "48879",
    "end": "55760"
  },
  {
    "text": "a memory and cach it like as modem is a modulator and Dem modulator it's really",
    "start": "55760",
    "end": "63039"
  },
  {
    "text": "easiest nowadays to find anyone who knows what M cach than anyone who",
    "start": "63039",
    "end": "69479"
  },
  {
    "text": "remember what is mod right m is key value in memory database and um very",
    "start": "69479",
    "end": "77080"
  },
  {
    "text": "popular for session storages and it's a viously but for cing different objects",
    "start": "77080",
    "end": "83040"
  },
  {
    "text": "such as templates uh for c classic SQL responses and others um uh it's also",
    "start": "83040",
    "end": "90720"
  },
  {
    "text": "supports um by all popular platforms and Frameworks um and uh it's not so hard to",
    "start": "90720",
    "end": "99320"
  },
  {
    "text": "find MC driver for example for airan for Ruby for PHP and um much uh other",
    "start": "99320",
    "end": "107640"
  },
  {
    "text": "Frameworks and platforms um short shorton starts about mcash um I use Shan",
    "start": "107640",
    "end": "114000"
  },
  {
    "start": "109000",
    "end": "109000"
  },
  {
    "text": "I think you know what is it uh to um to understand how",
    "start": "114000",
    "end": "120960"
  },
  {
    "text": "um how M are popular um and I think",
    "start": "120960",
    "end": "127679"
  },
  {
    "text": "you you can understand on this slide that in Wild internet you can find by",
    "start": "127679",
    "end": "133640"
  },
  {
    "text": "Shodan uh uh 118,000 of opened mcash ports it's",
    "start": "133640",
    "end": "140480"
  },
  {
    "text": "really bad because mcash have no any authentification typically uh in modern",
    "start": "140480",
    "end": "146280"
  },
  {
    "text": "version M uh has sassle I was but I",
    "start": "146280",
    "end": "153280"
  },
  {
    "text": "think 90% of this um open f c un protected it's um most popular than",
    "start": "153280",
    "end": "160879"
  },
  {
    "text": "radius and mongodb as sh and setas so and short protocol overview uh mcash use",
    "start": "160879",
    "end": "169400"
  },
  {
    "start": "164000",
    "end": "164000"
  },
  {
    "text": "um a transport layer TCP and UDP both if you run um MC Diamond uh this diamond",
    "start": "169400",
    "end": "176280"
  },
  {
    "text": "opened TCP and UDP ports 112 2 one one both two BS with different protocols and",
    "start": "176280",
    "end": "184720"
  },
  {
    "text": "basically U has host based authentification uh but in modern",
    "start": "184720",
    "end": "189840"
  },
  {
    "text": "version also supports c um PL text and binary protocol exists",
    "start": "189840",
    "end": "196120"
  },
  {
    "text": "in MK diamond both a client can uh communicate with server at by a Centex",
    "start": "196120",
    "end": "203799"
  },
  {
    "text": "protocol if client wants and also by binary protocol um at this",
    "start": "203799",
    "end": "210319"
  },
  {
    "text": "um I research on PL text protocol uh for main for for different",
    "start": "210319",
    "end": "216239"
  },
  {
    "text": "reasons and in a real V applications uh PL Tex protocol is uh is more popular um",
    "start": "216239",
    "end": "223799"
  },
  {
    "text": "plain Tex protocol it's obviously use classic CRF delimit it's 10 and 30 byes",
    "start": "223799",
    "end": "232439"
  },
  {
    "text": "and uh lens of data of data filed uh must be put in a",
    "start": "232439",
    "end": "238560"
  },
  {
    "text": "argument uh and storage command it's a really typical case for example HTP do",
    "start": "238560",
    "end": "245560"
  },
  {
    "text": "the same uh three different types of Commons present in mcash it's data",
    "start": "245560",
    "end": "251159"
  },
  {
    "start": "246000",
    "end": "246000"
  },
  {
    "text": "operations and slaps and maintain operations data operations typically",
    "start": "251159",
    "end": "256600"
  },
  {
    "text": "storage operations uh command like I said and um uh retrieval operation com",
    "start": "256600",
    "end": "264800"
  },
  {
    "text": "like get deletion operation increment decrement and operation to touch uh",
    "start": "264800",
    "end": "270440"
  },
  {
    "text": "empty empty values Keys uh also slabs um slabs operations is um",
    "start": "270440",
    "end": "280120"
  },
  {
    "text": "um techniques that provide us to reduce uh memory",
    "start": "282880",
    "end": "288320"
  },
  {
    "text": "fragmentation problem and also different maintain operations such as statistics",
    "start": "288320",
    "end": "293720"
  },
  {
    "text": "operation information um um services and version checks just easy and I think you",
    "start": "293720",
    "end": "299919"
  },
  {
    "text": "know about that but uh for future slides we need uh this uh",
    "start": "299919",
    "end": "307120"
  },
  {
    "start": "300000",
    "end": "300000"
  },
  {
    "text": "applications different applications use mcash differently um typical case as I",
    "start": "307120",
    "end": "313840"
  },
  {
    "text": "said before is session storages and session typically serialized data uh but",
    "start": "313840",
    "end": "320960"
  },
  {
    "text": "um not in any in each case of course and C uh different data such as uh plain",
    "start": "320960",
    "end": "326880"
  },
  {
    "text": "strings or serialized data uh for example objects and commonly used it to",
    "start": "326880",
    "end": "332039"
  },
  {
    "text": "store different codes such as templates and mes and other VAR other kinds of",
    "start": "332039",
    "end": "340960"
  },
  {
    "text": "executable code um for that it's really interesting to inject arbitary arbitary",
    "start": "340960",
    "end": "347720"
  },
  {
    "text": "code into M cached uh values how data stored uh at application",
    "start": "347720",
    "end": "355199"
  },
  {
    "text": "layer basically key typically contains prefixes uh it's a application logic",
    "start": "355199",
    "end": "362280"
  },
  {
    "text": "under main M Cas protocol um namespace um in key it's uh just",
    "start": "362280",
    "end": "372880"
  },
  {
    "text": "delimited by any bytes for example by slash name space it's a string shots",
    "start": "372880",
    "end": "380840"
  },
  {
    "text": "which uh provide application to use different application logic and the KY after prefix uh",
    "start": "380840",
    "end": "388479"
  },
  {
    "text": "commonly depends on users data for example from user login for example from user session ID or other user data and",
    "start": "388479",
    "end": "396919"
  },
  {
    "text": "uh for that AIT K wri and gain authentification byp pass and bypass",
    "start": "396919",
    "end": "402599"
  },
  {
    "text": "namespace restrictions by Design because it's not so good idea to inject",
    "start": "402599",
    "end": "409240"
  },
  {
    "text": "arbitary data in any database and mcash is one of them right uh so last is about",
    "start": "409240",
    "end": "416120"
  },
  {
    "start": "414000",
    "end": "414000"
  },
  {
    "text": "mcash droppers mcash droppers is a glue between application logic and mimc uh",
    "start": "416120",
    "end": "422080"
  },
  {
    "text": "Diamond mcash protocol Roberts is um if you want a mcash driver",
    "start": "422080",
    "end": "429160"
  },
  {
    "text": "for uh for framework for your environment it's um used for format",
    "start": "429160",
    "end": "437000"
  },
  {
    "text": "protocol packet and do input validation do lens calculation and others and for that uh robers is our tget um",
    "start": "437000",
    "end": "445800"
  },
  {
    "text": "application logic also but if uh Rober have has a really good input validation",
    "start": "445800",
    "end": "452199"
  },
  {
    "text": "there is no way to um to make vulner vulnerability in code",
    "start": "452199",
    "end": "458800"
  },
  {
    "text": "and for that um Roberts MC Roberts for different platforms uh is studed of my",
    "start": "458800",
    "end": "464159"
  },
  {
    "text": "research um robers also send and retrive uh result results of and open sockets",
    "start": "464159",
    "end": "470800"
  },
  {
    "text": "also and control the sockets and uh write data um to them and read data from",
    "start": "470800",
    "end": "476639"
  },
  {
    "text": "them right and also process data so example do operations like data casts uh and",
    "start": "476639",
    "end": "483199"
  },
  {
    "text": "operations like analization data and other um and the last slide",
    "start": "483199",
    "end": "490319"
  },
  {
    "start": "488000",
    "end": "488000"
  },
  {
    "text": "about uh the the introduction part is a scope of",
    "start": "490319",
    "end": "495840"
  },
  {
    "text": "research I researched the python laa go PHP uh net uh also Java and Ruby uh",
    "start": "495840",
    "end": "506479"
  },
  {
    "text": "robbers that's all I'm really happy like this because introductory part of my uh",
    "start": "506479",
    "end": "512039"
  },
  {
    "text": "research completed it's not so um good idea to to talk more about M so that's time",
    "start": "512039",
    "end": "520479"
  },
  {
    "text": "to practice and time to do something need with a protocol and",
    "start": "520479",
    "end": "528160"
  },
  {
    "start": "528000",
    "end": "528000"
  },
  {
    "text": "injections uh all injections in C can be classified by four types it's a common",
    "start": "528160",
    "end": "535240"
  },
  {
    "text": "injection classic um classic way to inject",
    "start": "535240",
    "end": "540360"
  },
  {
    "text": "arbitary uh commands in protocol stream um for M Cas",
    "start": "540360",
    "end": "547240"
  },
  {
    "text": "um common delimiter is a plain typical plain text delimiter um as I said before",
    "start": "547240",
    "end": "554079"
  },
  {
    "text": "uh this only about plain text version of mcash protocol not not about binary and",
    "start": "554079",
    "end": "561200"
  },
  {
    "text": "um reason of this kind types of type of vulnerability is improper validation of",
    "start": "561200",
    "end": "567880"
  },
  {
    "text": "Commons delimiter it's a CRF bytes and it's really easy uh second",
    "start": "567880",
    "end": "574560"
  },
  {
    "text": "type is State break it's more um more complicated type and uh not so easy to",
    "start": "574560",
    "end": "581519"
  },
  {
    "text": "understand this for first time I think um it's not so easy right uh it's",
    "start": "581519",
    "end": "587120"
  },
  {
    "text": "inv valid command um invalid command feature because uh in",
    "start": "587120",
    "end": "592760"
  },
  {
    "text": "plain text protocol uh all planex Protocols are State dependent uh if you",
    "start": "592760",
    "end": "599600"
  },
  {
    "text": "send invalid command U protocol perer uh in a server site uh returns um process",
    "start": "599600",
    "end": "607959"
  },
  {
    "text": "State on a phase of expecting command not and if",
    "start": "607959",
    "end": "614720"
  },
  {
    "text": "you rer send data after invalid command this data uh will be interpret as a new",
    "start": "614720",
    "end": "621480"
  },
  {
    "text": "command uh third type of uh injection types is argument injections argument uh",
    "start": "621480",
    "end": "628200"
  },
  {
    "text": "Del limit is uh the limit in M cach PL text version is space bite",
    "start": "628200",
    "end": "635760"
  },
  {
    "text": "and also Zer byte um may end any line of commment and um",
    "start": "635760",
    "end": "644720"
  },
  {
    "text": "last type is a lens break just only theoretical type because",
    "start": "644720",
    "end": "649959"
  },
  {
    "text": "I uh I can't uh show any example vulnerable for the types of attacks and",
    "start": "649959",
    "end": "656720"
  },
  {
    "text": "this theoretical um idea that n bite in data can break data calculation um data",
    "start": "656720",
    "end": "663800"
  },
  {
    "text": "lens calculation function in robber but all analyzed roer are not vulnerable for",
    "start": "663800",
    "end": "671560"
  },
  {
    "text": "that so uh now about each type of uh",
    "start": "671560",
    "end": "677360"
  },
  {
    "start": "673000",
    "end": "673000"
  },
  {
    "text": "injections uh in deeply right uh first is comment injection comment injection",
    "start": "677360",
    "end": "682839"
  },
  {
    "text": "is uh driver um um any any rer vulnerability uh consist of mist uh",
    "start": "682839",
    "end": "689560"
  },
  {
    "text": "validation of common uh delimiters it's uh a bytes and D bytes and hex um and",
    "start": "689560",
    "end": "697279"
  },
  {
    "text": "hex view this feature provides attacker to",
    "start": "697279",
    "end": "703519"
  },
  {
    "text": "inject arbitrary command after application command and uh no other restrictions um",
    "start": "703519",
    "end": "711200"
  },
  {
    "text": "there because you have no control uh this thing at application layer application uh all only can read uh any",
    "start": "711200",
    "end": "720240"
  },
  {
    "text": "keys and uh um do any protocol operation",
    "start": "720240",
    "end": "726040"
  },
  {
    "text": "it's not uh so easy to validate um a",
    "start": "726040",
    "end": "732040"
  },
  {
    "text": "case by application site uh simple vulnerable PHP code listed at this slide",
    "start": "732040",
    "end": "737720"
  },
  {
    "text": "as you can see MC class for PHP are vulnerable for this type of attacks and",
    "start": "737720",
    "end": "745199"
  },
  {
    "text": "U second line is constru from M cach object and then",
    "start": "745199",
    "end": "751320"
  },
  {
    "text": "we said uh any key and the key index um depends from user data from Euro uh EUR",
    "start": "751320",
    "end": "759760"
  },
  {
    "text": "key parameter and then exploit looks uh like this um we inject CRF",
    "start": "759760",
    "end": "770160"
  },
  {
    "text": "bytes into key key roll parameter and after after",
    "start": "770160",
    "end": "776800"
  },
  {
    "text": "CRF puts a new uh new command it's a set command uh highlighted dark color and we",
    "start": "776800",
    "end": "784720"
  },
  {
    "text": "inject new key uh with name injected and U Set uh flug zero and time to Life 1",
    "start": "784720",
    "end": "793160"
  },
  {
    "text": "hour and lens 10 bytes and then put 10 bytes from 1 to zero in injected key",
    "start": "793160",
    "end": "802720"
  },
  {
    "text": "value how it works in protocol level and in at protocol level uh Rober",
    "start": "802720",
    "end": "813000"
  },
  {
    "text": "um concatenated together uh our commment uh in one TCP packet and send it to",
    "start": "813000",
    "end": "819680"
  },
  {
    "text": "server and then server interprets uh this packet as different Commons because",
    "start": "819680",
    "end": "826079"
  },
  {
    "text": "um because server uh find a serf delimit",
    "start": "826079",
    "end": "831440"
  },
  {
    "text": "in state it's really obviously for any PL text",
    "start": "831440",
    "end": "837000"
  },
  {
    "text": "protocol uh who's vulnerable for this type of attack it's",
    "start": "837000",
    "end": "842399"
  },
  {
    "text": "python uh python P lib MC is vulnerable",
    "start": "842399",
    "end": "847959"
  },
  {
    "text": "and python mcash um roer is not vulnerable uh for PHP mcash D is",
    "start": "847959",
    "end": "855079"
  },
  {
    "text": "vulnerable and mcash without de and class is not vulnerable um and",
    "start": "855079",
    "end": "861360"
  },
  {
    "text": "also Custom Custom mc.net project is vulnerable for this um I think",
    "start": "861360",
    "end": "870839"
  },
  {
    "text": "time to show short demo about",
    "start": "870839",
    "end": "875199"
  },
  {
    "text": "this one",
    "start": "884920",
    "end": "888160"
  },
  {
    "text": "moment no nice um my first",
    "start": "894480",
    "end": "900440"
  },
  {
    "text": "demo yeah right",
    "start": "900440",
    "end": "904360"
  },
  {
    "text": "um this slide uh yeah this Loop you can see simple vulnerable PHP code uh",
    "start": "905639",
    "end": "913839"
  },
  {
    "text": "consist of simple MC um class uh",
    "start": "913839",
    "end": "919680"
  },
  {
    "text": "construction and then uh set operation set command depends from user data in uh first",
    "start": "919680",
    "end": "927519"
  },
  {
    "text": "argument it's a key and um static data u 10 bytes uh there",
    "start": "927519",
    "end": "934959"
  },
  {
    "text": "then uh our application read uh red read uh key with name of config and then uh",
    "start": "934959",
    "end": "942360"
  },
  {
    "text": "read key with name U key one and then put this information into HTML output",
    "start": "942360",
    "end": "949279"
  },
  {
    "text": "for user that's time to exploit",
    "start": "949279",
    "end": "954759"
  },
  {
    "text": "it t what we doing what you",
    "start": "956319",
    "end": "963480"
  },
  {
    "text": "doing nice got highlighter",
    "start": "963480",
    "end": "969680"
  },
  {
    "text": "yeah yeah um it's a ugly web interface",
    "start": "974440",
    "end": "979959"
  },
  {
    "text": "but it's really nice to demonstrate uh basic ofex and there is no uh there is",
    "start": "979959",
    "end": "985839"
  },
  {
    "text": "no anything more um it's uh this is text area",
    "start": "985839",
    "end": "992040"
  },
  {
    "text": "uh data from this text area puts into first argument of M set um",
    "start": "992040",
    "end": "1000480"
  },
  {
    "text": "function uh teer uh can use this to over",
    "start": "1000480",
    "end": "1006600"
  },
  {
    "text": "write a bit cach Case",
    "start": "1006600",
    "end": "1010800"
  },
  {
    "text": "Case so easy right up h",
    "start": "1012880",
    "end": "1020079"
  },
  {
    "text": "where is my no video more no",
    "start": "1020079",
    "end": "1029558"
  },
  {
    "text": "sorry time to swipe",
    "start": "1037880",
    "end": "1043600"
  },
  {
    "text": "mirror display it's more easy for me right",
    "start": "1059919",
    "end": "1065799"
  },
  {
    "text": "nice yeah it's nice so um this again",
    "start": "1072120",
    "end": "1077960"
  },
  {
    "text": "vulnerable Beach P",
    "start": "1077960",
    "end": "1081158"
  },
  {
    "text": "code my really ugly web application and this text area data from this text area",
    "start": "1084000",
    "end": "1090559"
  },
  {
    "text": "puts into mcash um commment and U now uh we put",
    "start": "1090559",
    "end": "1098919"
  },
  {
    "text": "different data from this uh from this file and data files and try to overwrite",
    "start": "1098919",
    "end": "1107080"
  },
  {
    "text": "our static value for 10 bytes from 1 to Zero by IIT string BH us 14s I can bring",
    "start": "1107080",
    "end": "1115320"
  },
  {
    "text": "the lights down so they can see the black screen easier if you want to right screen here but they'll see that better",
    "start": "1115320",
    "end": "1121760"
  },
  {
    "text": "yeah right I just that's nice thank you so",
    "start": "1121760",
    "end": "1126840"
  },
  {
    "text": "and uh now uh it's you yeah my mouse",
    "start": "1126840",
    "end": "1132799"
  },
  {
    "text": "nice a take her put uh only one bite and",
    "start": "1132799",
    "end": "1138000"
  },
  {
    "text": "then uh are Arguments for set Commons it's a zero flag and then one hour time to life",
    "start": "1138000",
    "end": "1145799"
  },
  {
    "text": "and then six byte because 6 by is length of string bhus 14 and then put it uh",
    "start": "1145799",
    "end": "1152480"
  },
  {
    "text": "into driver and you can see that key value uh Chang it from from from 10",
    "start": "1152480",
    "end": "1158480"
  },
  {
    "text": "bytes to 6 bytes BHS 14 so um also taker May inject other Commons",
    "start": "1158480",
    "end": "1166799"
  },
  {
    "text": "such as such as other such as flash all now try to run a TCP dump",
    "start": "1166799",
    "end": "1173280"
  },
  {
    "text": "to to view at net flow and understand what happens in this case um s takech",
    "start": "1173280",
    "end": "1180520"
  },
  {
    "text": "Vector again it's our first bite and then new common delimiter and then put",
    "start": "1180520",
    "end": "1185640"
  },
  {
    "text": "new command uh for example a storage command set and try to overwrite uh b k",
    "start": "1185640",
    "end": "1191840"
  },
  {
    "text": "config and um also um set set again uh",
    "start": "1191840",
    "end": "1197720"
  },
  {
    "text": "flag zero and then one how time to life and six bytes I'm sorry 10 bytes because",
    "start": "1197720",
    "end": "1205720"
  },
  {
    "text": "BHS 18 o string has 10 bytes length and then",
    "start": "1205720",
    "end": "1212200"
  },
  {
    "text": "sent it to application and try to understand what",
    "start": "1212200",
    "end": "1217679"
  },
  {
    "text": "happens yeah okay right and sucessful and then try to find the TCP damp",
    "start": "1217679",
    "end": "1224080"
  },
  {
    "text": "it's it's protocol communication dump and",
    "start": "1224080",
    "end": "1230640"
  },
  {
    "text": "um where is my where is my set command yeah right right",
    "start": "1230799",
    "end": "1239520"
  },
  {
    "text": "um I think you know that it's only one TCP packet and then in this packet um",
    "start": "1239520",
    "end": "1247600"
  },
  {
    "text": "two different um protocol commments first commment is invalid it said key",
    "start": "1247600",
    "end": "1254559"
  },
  {
    "text": "without any data without any arguments and for that mcash can uh pass that",
    "start": "1254559",
    "end": "1260080"
  },
  {
    "text": "commment and produce an error and after that uh our roer set second comment uh",
    "start": "1260080",
    "end": "1265960"
  },
  {
    "text": "because we inject this commment in text area filed and uh after that of course um",
    "start": "1265960",
    "end": "1274600"
  },
  {
    "text": "mcash dropper must send data prefix from uh from other data",
    "start": "1274600",
    "end": "1281200"
  },
  {
    "text": "um now we can looks at U mcash Diamond responses for our packet with our",
    "start": "1281200",
    "end": "1288760"
  },
  {
    "text": "injected data scroll down please scroll",
    "start": "1288760",
    "end": "1296039"
  },
  {
    "text": "scroll no just",
    "start": "1298320",
    "end": "1302919"
  },
  {
    "text": "highlighted something really useful yeah this injection I think you",
    "start": "1303360",
    "end": "1310279"
  },
  {
    "text": "know scroll please scroll yeah right",
    "start": "1310279",
    "end": "1315360"
  },
  {
    "text": "um this a response from first first",
    "start": "1315360",
    "end": "1321200"
  },
  {
    "text": "logic command from our one packet only one packet and from uh our application",
    "start": "1321200",
    "end": "1327039"
  },
  {
    "text": "to M cach first response is error because first uh command uh has no any",
    "start": "1327039",
    "end": "1332960"
  },
  {
    "text": "arguments and for that it's in valid commment right uh response for second commment our injected comment",
    "start": "1332960",
    "end": "1342400"
  },
  {
    "text": "is is valid response and server said store it one moment",
    "start": "1342400",
    "end": "1349120"
  },
  {
    "text": "scroll please scroll",
    "start": "1349120",
    "end": "1354840"
  },
  {
    "text": "scroll and start it nice our injection done we we inject arbitary K config with",
    "start": "1354840",
    "end": "1364279"
  },
  {
    "text": "a bory data without any restrictions it's really really",
    "start": "1364279",
    "end": "1369960"
  },
  {
    "text": "nice and then uh our Rober sent last chunk of data of course it's inv valid",
    "start": "1369960",
    "end": "1375480"
  },
  {
    "text": "command and for that M Cas Diamond Produce an error again but but all works we inject we",
    "start": "1375480",
    "end": "1385080"
  },
  {
    "text": "inject command it's pretty nice um I think time to time to run my my favorite",
    "start": "1385080",
    "end": "1392240"
  },
  {
    "text": "comment from m is Flash all uh as you as you know this commment",
    "start": "1392240",
    "end": "1398960"
  },
  {
    "text": "uh flash all uh meash memory and uh and",
    "start": "1398960",
    "end": "1405159"
  },
  {
    "text": "produce application error for that application but we have now any Keys",
    "start": "1405159",
    "end": "1410880"
  },
  {
    "text": "more nice um this is the first demo and first injection",
    "start": "1410880",
    "end": "1418600"
  },
  {
    "text": "type moment yeah so um not so easier uh",
    "start": "1418600",
    "end": "1426520"
  },
  {
    "start": "1421000",
    "end": "1421000"
  },
  {
    "text": "not so easier type of injection is State breaking um as I said before mcash",
    "start": "1426520",
    "end": "1432520"
  },
  {
    "text": "Diamond uh provide us to PL Tex protocol and each PL Tex prot protocol um depends",
    "start": "1432520",
    "end": "1441240"
  },
  {
    "text": "from uh depends from common state state and for that M validation of commment uh",
    "start": "1441240",
    "end": "1448080"
  },
  {
    "text": "format for example key name or attributes count or Zer bytes um",
    "start": "1448080",
    "end": "1454559"
  },
  {
    "text": "validation provide us to break this commment and uh return State uh of uh",
    "start": "1454559",
    "end": "1462240"
  },
  {
    "text": "mcash common parer again to the face of uh interprets command and um for that",
    "start": "1462240",
    "end": "1471440"
  },
  {
    "text": "reason any data puts in a data filed will be interpreted as a commment it's a",
    "start": "1471440",
    "end": "1477440"
  },
  {
    "text": "new commment and uh this really nice uh to exploit it",
    "start": "1477440",
    "end": "1483399"
  },
  {
    "text": "because there are no any filtrations in data files um just just only database",
    "start": "1483399",
    "end": "1490399"
  },
  {
    "text": "and you can store in U in in this database any data um which you want",
    "start": "1490399",
    "end": "1496760"
  },
  {
    "text": "without any restrictions without any in coding and others",
    "start": "1496760",
    "end": "1502520"
  },
  {
    "text": "um this exploited again uh for PHP I'm sorry sorry sorry sorry",
    "start": "1503200",
    "end": "1511840"
  },
  {
    "text": "yes yes ugly animation um this exploit",
    "start": "1511840",
    "end": "1517679"
  },
  {
    "text": "again for PHP uh we use um",
    "start": "1517679",
    "end": "1523240"
  },
  {
    "text": "251 bytes in key uh to break uh to break",
    "start": "1523240",
    "end": "1528640"
  },
  {
    "text": "State because uh a laan key produce a mcash error there is um there is no",
    "start": "1528640",
    "end": "1536360"
  },
  {
    "text": "mcash are not allowed to uh use uh loan keys and for that second U second",
    "start": "1536360",
    "end": "1543120"
  },
  {
    "text": "argument V puts into Data fil will be interprets as a command just easy it's a not uh net flow",
    "start": "1543120",
    "end": "1552279"
  },
  {
    "text": "but uh logic uh protocol uh response uh request dump uh at first command it puts",
    "start": "1552279",
    "end": "1559360"
  },
  {
    "text": "uh loan key uh and uh transmit um and received uh error from mcash and then",
    "start": "1559360",
    "end": "1567320"
  },
  {
    "text": "sent uh in our data but our mcash server",
    "start": "1567320",
    "end": "1572679"
  },
  {
    "text": "interpret this data as a new command uh because command before uh is",
    "start": "1572679",
    "end": "1579000"
  },
  {
    "text": "invalid and then then puts data um I",
    "start": "1579000",
    "end": "1584320"
  },
  {
    "text": "think much more interesting to see not for PHP time to time to exploit Ruby",
    "start": "1584320",
    "end": "1591120"
  },
  {
    "text": "code um Ruby Jem um mcash is really popular and vulnerable for",
    "start": "1591120",
    "end": "1597880"
  },
  {
    "text": "this uh simple code uh through b",
    "start": "1597880",
    "end": "1602960"
  },
  {
    "text": "language and second line is initialization of uh MC rer and then",
    "start": "1602960",
    "end": "1609480"
  },
  {
    "text": "set data and get data um back is key",
    "start": "1609480",
    "end": "1615520"
  },
  {
    "text": "stuff this example shows that Z bytes also can braid paral State uh Ruby",
    "start": "1615520",
    "end": "1623679"
  },
  {
    "text": "drivers uh Ruby rer driver it's not matter it's very interesting because",
    "start": "1623679",
    "end": "1631919"
  },
  {
    "text": "um developers of the driver uh do um valid input validation for space bites",
    "start": "1631919",
    "end": "1639960"
  },
  {
    "text": "for um new line bites but not for zero byes and for that you can exploit",
    "start": "1639960",
    "end": "1646679"
  },
  {
    "text": "it as TCP dump of aex presented this slide you",
    "start": "1646679",
    "end": "1653320"
  },
  {
    "text": "can see our Zer byte which um provide us to break First Command and then any data",
    "start": "1653320",
    "end": "1661080"
  },
  {
    "text": "and then uh and then new command in data filed you can see uh I prefix uh it's a",
    "start": "1661080",
    "end": "1668200"
  },
  {
    "text": "serialization prefix uh because uh Ruby driver and rub rubyer uh always use",
    "start": "1668200",
    "end": "1675880"
  },
  {
    "text": "marshaled objects uh to store even if you want to store uh integer or um",
    "start": "1675880",
    "end": "1683600"
  },
  {
    "text": "string value not not only for objects Ruby driver um always will uh Marshall",
    "start": "1683600",
    "end": "1692760"
  },
  {
    "text": "your object to sterilize it string it's uh not matter for our kind of attacks",
    "start": "1692760",
    "end": "1698760"
  },
  {
    "text": "it's a protocol",
    "start": "1698760",
    "end": "1702559"
  },
  {
    "text": "uh protocol damp logic protocol damp and uh of course uh sl0 it's a one Z bytes",
    "start": "1703799",
    "end": "1712159"
  },
  {
    "text": "uh replace it to escaping for for only for presentation",
    "start": "1712159",
    "end": "1718960"
  },
  {
    "text": "uh reasons uh this common produce error because um mekash read uh first line",
    "start": "1718960",
    "end": "1725519"
  },
  {
    "text": "first line first comment line uh only before first zero byte and for that uh",
    "start": "1725519",
    "end": "1730840"
  },
  {
    "text": "it is common without arguments it's invalid comment of course M Cas produce an error then try to interpret uh",
    "start": "1730840",
    "end": "1738480"
  },
  {
    "text": "serialization prefix it's invalid also invalid comments and produce second",
    "start": "1738480",
    "end": "1743880"
  },
  {
    "text": "error and then read and try to interpret our data as a command and",
    "start": "1743880",
    "end": "1749960"
  },
  {
    "text": "uh and because it is a valid injected injected string um M successfully",
    "start": "1749960",
    "end": "1755679"
  },
  {
    "text": "interprets this that as an as a new command and returns store it and uh last",
    "start": "1755679",
    "end": "1763600"
  },
  {
    "text": "last comment um was also invalid because",
    "start": "1763600",
    "end": "1768760"
  },
  {
    "text": "because it's a MC Ruby Jam serial serialized post fix and it's not looks",
    "start": "1768760",
    "end": "1776240"
  },
  {
    "text": "valid M common but anyway uh we do injection we set AIT key stuff with AIT",
    "start": "1776240",
    "end": "1784320"
  },
  {
    "text": "data to 10 uh B zeros it's it's nice who",
    "start": "1784320",
    "end": "1789799"
  },
  {
    "start": "1789000",
    "end": "1789000"
  },
  {
    "text": "is vulnerable I think coverage uh larger than",
    "start": "1789799",
    "end": "1795080"
  },
  {
    "text": "um than first type of injection it's Java Java Meetup mcash class uh but not",
    "start": "1795080",
    "end": "1802279"
  },
  {
    "text": "Java spy mcash uh also jav also lower Ry",
    "start": "1802279",
    "end": "1807519"
  },
  {
    "text": "mcash is vulnerable and rabby jam mcash but not rabby mcash client and no daily",
    "start": "1807519",
    "end": "1815320"
  },
  {
    "text": "uh daily used um by for example by Ruby rails and it's",
    "start": "1815320",
    "end": "1823640"
  },
  {
    "text": "popular m uh MK DCL class for phps vulnerable also mcash uh without D on",
    "start": "1823640",
    "end": "1831519"
  },
  {
    "text": "End plus is not again and U mc.net project is vulnerable",
    "start": "1831519",
    "end": "1837679"
  },
  {
    "text": "again time to Second",
    "start": "1837679",
    "end": "1841600"
  },
  {
    "text": "demo this example again ugly we application write",
    "start": "1847200",
    "end": "1853919"
  },
  {
    "text": "on law on Ruby and CGI it's it's more easy for me to run any anything in",
    "start": "1853919",
    "end": "1861080"
  },
  {
    "text": "CGI um filed item no is uh filed for keys and file data is",
    "start": "1861080",
    "end": "1868559"
  },
  {
    "text": "filed for protocol data we can put anything in uh in data and sort it by item one",
    "start": "1868559",
    "end": "1877080"
  },
  {
    "text": "and look at look this test rink on HTTP",
    "start": "1877080",
    "end": "1883039"
  },
  {
    "text": "response um application really simple uh first",
    "start": "1883039",
    "end": "1888320"
  },
  {
    "text": "line is driver initialization again then uh this application setory key uh with",
    "start": "1888320",
    "end": "1894720"
  },
  {
    "text": "prefix item and uh postfix depends from user data from item no URL parameter and",
    "start": "1894720",
    "end": "1902200"
  },
  {
    "text": "then uh put uh put out data from mcash to http",
    "start": "1902200",
    "end": "1911240"
  },
  {
    "text": "output yeah time to time to inject uh Zer byte to break syntax to break uh",
    "start": "1916639",
    "end": "1922919"
  },
  {
    "text": "parcel State and we do that um Ruby Rober produced um error for us",
    "start": "1922919",
    "end": "1931679"
  },
  {
    "text": "and then contains very sentences information",
    "start": "1931679",
    "end": "1938799"
  },
  {
    "text": "but this senten information not for yeah",
    "start": "1938799",
    "end": "1944200"
  },
  {
    "text": "um as I said before um Ruby",
    "start": "1944200",
    "end": "1949880"
  },
  {
    "text": "MIM rer always use serialized value and for that to store our Abit data we first",
    "start": "1949880",
    "end": "1958080"
  },
  {
    "text": "need needs to serialize it by Marshall I use",
    "start": "1958080",
    "end": "1963639"
  },
  {
    "text": "Simple Ruby script in one line to serialize any",
    "start": "1963919",
    "end": "1970440"
  },
  {
    "text": "data for example one to three string into valid valid object to store and",
    "start": "1970440",
    "end": "1975519"
  },
  {
    "text": "then simple copy it and put into",
    "start": "1975519",
    "end": "1980200"
  },
  {
    "text": "Data after of course Cal left delimiter and set commment and key stuff zero flag",
    "start": "1988679",
    "end": "1996840"
  },
  {
    "text": "and one hour uh time to life uh byes",
    "start": "1996840",
    "end": "2002720"
  },
  {
    "text": "again again the limiter and set it into my application and ref page to VI",
    "start": "2002720",
    "end": "2009080"
  },
  {
    "text": "results yes we successfully inject AIT data into into um key",
    "start": "2009080",
    "end": "2017600"
  },
  {
    "text": "stuff time to look at TCP dump I think no no time to time to set",
    "start": "2017600",
    "end": "2025639"
  },
  {
    "text": "bhus on you string into m c of course it's 24 bytes length and the",
    "start": "2025639",
    "end": "2036600"
  },
  {
    "text": "commons look same just easy really easy to inject a b",
    "start": "2036600",
    "end": "2044480"
  },
  {
    "text": "case in",
    "start": "2044480",
    "end": "2047120"
  },
  {
    "text": "MK yeah so say",
    "start": "2049879",
    "end": "2055040"
  },
  {
    "text": "nice now key stuff has data be us",
    "start": "2055040",
    "end": "2060560"
  },
  {
    "text": "4 on you so time to run TCP dump again",
    "start": "2060560",
    "end": "2069000"
  },
  {
    "text": "and repeat our Tech vector and look at DCP damp where is our",
    "start": "2074639",
    "end": "2082440"
  },
  {
    "text": "packet here it is",
    "start": "2082440",
    "end": "2087480"
  },
  {
    "text": "nice where is our null bite null bite where are",
    "start": "2087919",
    "end": "2093398"
  },
  {
    "text": "you I find it yeah it's",
    "start": "2093399",
    "end": "2099520"
  },
  {
    "text": "new line uh command in data filed and this is a z byte which which break par",
    "start": "2099520",
    "end": "2105560"
  },
  {
    "text": "the state and the list of several responses first error and the second",
    "start": "2105560",
    "end": "2113000"
  },
  {
    "text": "error and so store it it's response for our valid comment and that error again because last prefix from serialized data",
    "start": "2113000",
    "end": "2120000"
  },
  {
    "text": "isn't valid comment for in cached but anything all works as we expected",
    "start": "2120000",
    "end": "2127880"
  },
  {
    "text": "and then flush all it's really nice nice",
    "start": "2136680",
    "end": "2142920"
  },
  {
    "text": "comment not for production environment but really nice to to check to check",
    "start": "2143800",
    "end": "2152560"
  },
  {
    "text": "Flash oh",
    "start": "2161640",
    "end": "2165000"
  },
  {
    "text": "no flush all",
    "start": "2168119",
    "end": "2171720"
  },
  {
    "text": "again yeah now we have empty data by index stuff by index item one also no",
    "start": "2178640",
    "end": "2185599"
  },
  {
    "text": "data no problems injection here all",
    "start": "2185599",
    "end": "2191440"
  },
  {
    "text": "right time to returns again to different injection types and uh thir types is",
    "start": "2193040",
    "end": "2200240"
  },
  {
    "start": "2196000",
    "end": "2196000"
  },
  {
    "text": "agement injection uh agement injection uh is really same as first type",
    "start": "2200240",
    "end": "2209319"
  },
  {
    "text": "but but reason of this vulnerability is improper input validation improper",
    "start": "2209319",
    "end": "2215480"
  },
  {
    "text": "validation of argument delimiter is is space delimiter and for that attacker can uh do something like argument shift",
    "start": "2215480",
    "end": "2223280"
  },
  {
    "text": "because for example set command uh has a",
    "start": "2223280",
    "end": "2228760"
  },
  {
    "text": "optional last argument and uh if you can inject your data um as new argument last",
    "start": "2228760",
    "end": "2237319"
  },
  {
    "text": "argument uh and the arguments before shifted on one position right so how it",
    "start": "2237319",
    "end": "2244319"
  },
  {
    "text": "works it's a tech Vector we inject only one only one bite it's a zero zero not",
    "start": "2244319",
    "end": "2252960"
  },
  {
    "text": "zero B but zero CER and then put it into into M and now it's really really neat",
    "start": "2252960",
    "end": "2260640"
  },
  {
    "text": "because uh now we inject zero as a zero flag and uh",
    "start": "2260640",
    "end": "2268800"
  },
  {
    "text": "zero flag becomes now at time to life and the",
    "start": "2268800",
    "end": "2274720"
  },
  {
    "text": "length of data becomes uh uh time to life and",
    "start": "2274720",
    "end": "2282800"
  },
  {
    "text": "uh time to life becomes length and lens become in to life becomes optional",
    "start": "2282960",
    "end": "2289280"
  },
  {
    "text": "argument and for that reason we",
    "start": "2289280",
    "end": "2296599"
  },
  {
    "text": "can yes yeah we can inject uh data",
    "start": "2296599",
    "end": "2302280"
  },
  {
    "text": "to to to make packet valid it's a flat data and then in new command in protocol",
    "start": "2302280",
    "end": "2309720"
  },
  {
    "text": "protocol stream it's it's one way to exploit it and U",
    "start": "2309720",
    "end": "2314920"
  },
  {
    "text": "the same as first type of injections uh python uh is vulnerable mcash for PHP",
    "start": "2314920",
    "end": "2320720"
  },
  {
    "text": "vulnerable and uh net vulnerable it's not it's not interesting I think but I",
    "start": "2320720",
    "end": "2326640"
  },
  {
    "text": "have something interesting at last it's it's it is not lens breaking",
    "start": "2326640",
    "end": "2333440"
  },
  {
    "start": "2329000",
    "end": "2329000"
  },
  {
    "text": "because lens breaking just only theoretical issue theoretical issue it just concept and never found uh",
    "start": "2333440",
    "end": "2340599"
  },
  {
    "text": "but I suggest uh then n bites in data fil can break in different cases and",
    "start": "2340599",
    "end": "2347800"
  },
  {
    "text": "maybe it's not often cases but anyway it's possible to break calculation lens of data and for",
    "start": "2347800",
    "end": "2355000"
  },
  {
    "text": "that part of data filed can be interpret as new command so it's a my concept but",
    "start": "2355000",
    "end": "2362680"
  },
  {
    "text": "never find and no platforms vulnerable for that so um",
    "start": "2362680",
    "end": "2369200"
  },
  {
    "text": "it's potential exploit but never works I exploit",
    "start": "2369200",
    "end": "2376240"
  },
  {
    "text": "yeah so last idea last idea is post",
    "start": "2376240",
    "end": "2381359"
  },
  {
    "start": "2379000",
    "end": "2379000"
  },
  {
    "text": "exploitation um as I said before uh MC drers provides us uh no not only for",
    "start": "2381359",
    "end": "2388960"
  },
  {
    "text": "socket communication not only for data receiving and data transmission but also",
    "start": "2388960",
    "end": "2394839"
  },
  {
    "text": "uh data um data manipulations and for example cast",
    "start": "2394839",
    "end": "2401839"
  },
  {
    "text": "data and then seral data and other and the deserialization process uh arbitary",
    "start": "2401839",
    "end": "2407480"
  },
  {
    "text": "data is also not so good idea and uh it's a cve 500 um to uh number and",
    "start": "2407480",
    "end": "2416200"
  },
  {
    "text": "common weakness numeration database um so that we try to exploit it um",
    "start": "2416200",
    "end": "2422400"
  },
  {
    "start": "2421000",
    "end": "2421000"
  },
  {
    "text": "application layer um application layer plays this because",
    "start": "2422400",
    "end": "2427680"
  },
  {
    "text": "um we can execute aary M command and can read AIT data from application layer and",
    "start": "2427680",
    "end": "2435640"
  },
  {
    "text": "for for this reason we can try to inject serialized data uh which must be",
    "start": "2435640",
    "end": "2441680"
  },
  {
    "text": "deserialized U by application um at uh reading data process right uh",
    "start": "2441680",
    "end": "2451599"
  },
  {
    "start": "2451000",
    "end": "2451000"
  },
  {
    "text": "there are two types of distalization exploits first type it's affects um",
    "start": "2451599",
    "end": "2457319"
  },
  {
    "text": "where effect depends from application code it is Java case and PHP case rubby",
    "start": "2457319",
    "end": "2462440"
  },
  {
    "text": "rubby case and the custom Frameworks like a symphony rails and others but",
    "start": "2462440",
    "end": "2467599"
  },
  {
    "text": "python it's really nice because python provide us to uh independed code",
    "start": "2467599",
    "end": "2473880"
  },
  {
    "text": "execution in pickle uh distalization process a few years ago at blackhead",
    "start": "2473880",
    "end": "2479200"
  },
  {
    "text": "somebody uh described a pickle uh formats in deeps so um",
    "start": "2479200",
    "end": "2488440"
  },
  {
    "start": "2487000",
    "end": "2487000"
  },
  {
    "text": "time to my last demo it's remote code execution demo in",
    "start": "2488440",
    "end": "2495720"
  },
  {
    "text": "Python we have again ugly web application python web application this",
    "start": "2495720",
    "end": "2501000"
  },
  {
    "text": "code simple code content type setting and",
    "start": "2501000",
    "end": "2506920"
  },
  {
    "text": "U manipulation with two uh I'm sorry with only one user data from store",
    "start": "2506920",
    "end": "2515119"
  },
  {
    "text": "ID uh URL parameter construct again a interface um",
    "start": "2515119",
    "end": "2524640"
  },
  {
    "text": "Lo back interface M driver and then put any data there we can put in item no one",
    "start": "2524640",
    "end": "2534200"
  },
  {
    "text": "this is um yes this is view on mcash um",
    "start": "2534200",
    "end": "2541520"
  },
  {
    "text": "serialized data uh pickle format with with uh with back shell in inside uh",
    "start": "2541520",
    "end": "2549319"
  },
  {
    "text": "process it's really easy to execute this and only I",
    "start": "2549319",
    "end": "2555920"
  },
  {
    "text": "think 100 bytes needed to do that um just just a pickle it's provide us this",
    "start": "2556640",
    "end": "2565319"
  },
  {
    "text": "function and for execute code we needs to inject any key which be readed by",
    "start": "2565319",
    "end": "2571480"
  },
  {
    "text": "application uh for example config key or something other",
    "start": "2571480",
    "end": "2578200"
  },
  {
    "text": "uh something as often readed",
    "start": "2578200",
    "end": "2583318"
  },
  {
    "text": "key we open the back shell on the L loop back interface and on Port 1 2 3 4 5 and",
    "start": "2584000",
    "end": "2593640"
  },
  {
    "text": "run run shell for this and uh uh redirect descriptors to to make",
    "start": "2593640",
    "end": "2603440"
  },
  {
    "text": "our shell interactive right compile this and and put",
    "start": "2603440",
    "end": "2609000"
  },
  {
    "text": "into put into our M cach vulnerable",
    "start": "2609000",
    "end": "2615280"
  },
  {
    "text": "fil this is my last demo this is my last minutes of my",
    "start": "2620079",
    "end": "2626319"
  },
  {
    "text": "talk what happens I need a",
    "start": "2627359",
    "end": "2632318"
  },
  {
    "text": "shell please oh h",
    "start": "2632880",
    "end": "2639040"
  },
  {
    "text": "I need to listen this port before right run it cut on Port one 12 3 4 5",
    "start": "2639319",
    "end": "2646839"
  },
  {
    "text": "send sent again and yes we have a shell it's easiest easier way to to exploit M",
    "start": "2646839",
    "end": "2656000"
  },
  {
    "text": "Cas drer as remote code execution for python case yeah we www user www data",
    "start": "2656000",
    "end": "2665640"
  },
  {
    "text": "user all as we expected pickle the best and python",
    "start": "2665640",
    "end": "2673558"
  },
  {
    "text": "not and there are no TCP dump for this video I think you you can",
    "start": "2677079",
    "end": "2684119"
  },
  {
    "text": "suggest what this looks like for so what's the what's the conclusion what's",
    "start": "2684119",
    "end": "2689599"
  },
  {
    "text": "the reason of my talk and this exploits please use binary protocol don't use",
    "start": "2689599",
    "end": "2695119"
  },
  {
    "text": "plain Tex protocol from mcash it's not so not so good idea to to communicate",
    "start": "2695119",
    "end": "2701400"
  },
  {
    "text": "with any any server by plx protocol and for that reason HTTP I think also Must",
    "start": "2701400",
    "end": "2709520"
  },
  {
    "text": "Die our starts",
    "start": "2709520",
    "end": "2714160"
  },
  {
    "text": "um yes I like I I like",
    "start": "2714640",
    "end": "2719720"
  },
  {
    "text": "uh spdi so uh starts and uh research the two",
    "start": "2719720",
    "end": "2727319"
  },
  {
    "text": "drivers for Python and one of them are vulnerable One driver for Python and vulnerable and zero of one uh rers for",
    "start": "2727319",
    "end": "2737359"
  },
  {
    "text": "go vulnerable one of two uh robers for PHP vulnerable one of one for net one of",
    "start": "2737359",
    "end": "2745079"
  },
  {
    "text": "two for Java one of three for Ruby and what's the reason hamster win go go set",
    "start": "2745079",
    "end": "2753319"
  },
  {
    "text": "us that it's Champion so M uh I talk only about only about um M",
    "start": "2753319",
    "end": "2763440"
  },
  {
    "text": "cached robers not about application because uh coverage of",
    "start": "2763440",
    "end": "2769960"
  },
  {
    "text": "applications uh are really huge and uh most of them are not fixed yet and uh I",
    "start": "2769960",
    "end": "2777920"
  },
  {
    "text": "still waiting for that so I'm I'm finished thank you and uh if you have",
    "start": "2777920",
    "end": "2785920"
  },
  {
    "text": "questions I have a time for that thank you",
    "start": "2785920",
    "end": "2792080"
  },
  {
    "text": "[Applause]",
    "start": "2792080",
    "end": "2796699"
  },
  {
    "text": "gra yes GRS g r a i l s no uh no I um there is",
    "start": "2819040",
    "end": "2832200"
  },
  {
    "text": "no Reon there's no matter uh which framework you use um because uh",
    "start": "2832200",
    "end": "2838400"
  },
  {
    "text": "Frameworks uh just use any any rocker for Abby I found on three rockers and uh",
    "start": "2838400",
    "end": "2845800"
  },
  {
    "text": "I have no ideas which of them use it in dril okay you can you can check it it's",
    "start": "2845800",
    "end": "2851520"
  },
  {
    "text": "really",
    "start": "2851520",
    "end": "2853839"
  },
  {
    "text": "easy yes I just want to make sure that uh I understood that all of those attacks were based upon uh injecting",
    "start": "2860440",
    "end": "2866480"
  },
  {
    "text": "values into the key and that there are no successful",
    "start": "2866480",
    "end": "2873240"
  },
  {
    "text": "attacks that you found so far that are value only based",
    "start": "2873240",
    "end": "2878000"
  },
  {
    "text": "um right thank you uh so uh all all uh all working atex uh",
    "start": "2883440",
    "end": "2894839"
  },
  {
    "text": "required and injections in key but not um it's really required con uh really",
    "start": "2894839",
    "end": "2901960"
  },
  {
    "text": "required uh but you can put you pay load in data if you can break something in",
    "start": "2901960",
    "end": "2907119"
  },
  {
    "text": "key fil right yeah not not for Pad but for breaking",
    "start": "2907119",
    "end": "2913760"
  },
  {
    "text": "State always okay thank you yeah",
    "start": "2913760",
    "end": "2919160"
  },
  {
    "text": "[Applause]",
    "start": "2929840",
    "end": "2935679"
  }
]