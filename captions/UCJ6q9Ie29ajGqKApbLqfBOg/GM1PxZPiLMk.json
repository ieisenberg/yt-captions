[
  {
    "text": "[Music] foreign",
    "start": "1730",
    "end": "6720"
  },
  {
    "text": "black hat it's been a long time since I've been here and it's even longer since I was actually presenting at black",
    "start": "8360",
    "end": "13799"
  },
  {
    "text": "hat so it's good to be back so yeah we're going to be talking about Kerberos the clues in the title",
    "start": "13799",
    "end": "19920"
  },
  {
    "text": "um just a very quick overview of who we are if you don't know I'm James I work in Google in Project zero specialized",
    "start": "19920",
    "end": "26100"
  },
  {
    "text": "again finding interesting bugs in Windows yeah my name is Nick and I work an adversarial r d at netspy I also love",
    "start": "26100",
    "end": "33180"
  },
  {
    "text": "fighting bugs in Windows so so of course this is only a 40 minute",
    "start": "33180",
    "end": "39719"
  },
  {
    "text": "presentation it's quite short in in the grand scheme of things so we have to make some assumptions about UV audience",
    "start": "39719",
    "end": "47520"
  },
  {
    "text": "first that you have a reasonable grasp of how Kerberos works or what Kerberos is because unfortunately we just don't",
    "start": "47520",
    "end": "54000"
  },
  {
    "text": "have the time to actually go through that and tell you all the nitty-gritty details",
    "start": "54000",
    "end": "60180"
  },
  {
    "text": "we're also going to be doing some stuff which sort of is related to existing remote attacks in Kerberos so having",
    "start": "60180",
    "end": "66840"
  },
  {
    "text": "familiarity with those sort of parts of Kerberos is quite useful as well and this is not a talk about attacking",
    "start": "66840",
    "end": "74100"
  },
  {
    "text": "Kerberos remotely this is all about privilege escalation on the local machine so if that's not really your",
    "start": "74100",
    "end": "79740"
  },
  {
    "text": "thing then unfortunately it may not be the talk for you so let's actually start with a bit of a",
    "start": "79740",
    "end": "87060"
  },
  {
    "text": "background on where we're going to go with this presentation",
    "start": "87060",
    "end": "91700"
  },
  {
    "text": "remote clients to remote servers however in Windows at least there's nothing actually stopping you using",
    "start": "94740",
    "end": "101700"
  },
  {
    "text": "Kerberos to authenticate to the same machine so when you log on to your Windows",
    "start": "101700",
    "end": "107939"
  },
  {
    "text": "machine joint domain join Windows machine you make a request out to the the key distribution center with your",
    "start": "107939",
    "end": "115560"
  },
  {
    "text": "with knowledge of your password and that generates something called a ticket granting ticket and this is then used to",
    "start": "115560",
    "end": "121439"
  },
  {
    "text": "make authentication requests to other services inside that ticket granting ticket is",
    "start": "121439",
    "end": "128160"
  },
  {
    "text": "something called a privileged attribute certificate or pack and this contains basically your user identity it contains",
    "start": "128160",
    "end": "133980"
  },
  {
    "text": "who you are what groups you're a member member of so when we want to actually do Kerberos",
    "start": "133980",
    "end": "140099"
  },
  {
    "text": "authentication we wouldn't actually just physically go out and use TCP sockets to talk to the KDC instead we'd use",
    "start": "140099",
    "end": "146640"
  },
  {
    "text": "something called the sspi interface which is a way of communicating between user mode and lsas which will be LSA",
    "start": "146640",
    "end": "154080"
  },
  {
    "text": "which is our local security Authority which is where basically authentication happens on Windows",
    "start": "154080",
    "end": "159599"
  },
  {
    "text": "so what we usually usually do is call which an initialized security context",
    "start": "159599",
    "end": "164640"
  },
  {
    "text": "and this would make a request to to the LSA and call into the Kerberos dll which",
    "start": "164640",
    "end": "170519"
  },
  {
    "text": "is running inside the LSA process it takes your TGT and you say Okay I",
    "start": "170519",
    "end": "176040"
  },
  {
    "text": "want to make a service authentication request to a local service please so for that you need something called a service",
    "start": "176040",
    "end": "182099"
  },
  {
    "text": "principal name and this is like a descriptor of which service you want to talk to so in this case we're going to",
    "start": "182099",
    "end": "188040"
  },
  {
    "text": "host slash ABC which is a service principal name which is owned by the",
    "start": "188040",
    "end": "193500"
  },
  {
    "text": "current system and Kerberos packages up this request into a ticket granting server request",
    "start": "193500",
    "end": "200159"
  },
  {
    "text": "packet sends it to the KDC KDC takes that service principal name and uses it",
    "start": "200159",
    "end": "205800"
  },
  {
    "text": "to look up a long-term key and this key is actually a derivation of the computer",
    "start": "205800",
    "end": "211920"
  },
  {
    "text": "account password for your local system so every every domain join system has a computer account which has a password",
    "start": "211920",
    "end": "218099"
  },
  {
    "text": "and from that a key is derived now this key is then used to encrypt your service",
    "start": "218099",
    "end": "224700"
  },
  {
    "text": "ticket and what the KDC also does is it can verify that that pack that it receives it can decrypt its tdt and it",
    "start": "224700",
    "end": "232739"
  },
  {
    "text": "copies that pack that group information out of there into your service ticket",
    "start": "232739",
    "end": "238200"
  },
  {
    "text": "so when you send it to the service with a different type of Kerberos packet the",
    "start": "238200",
    "end": "243299"
  },
  {
    "text": "AP request the server can call another LSA function",
    "start": "243299",
    "end": "248580"
  },
  {
    "text": "accept security context which will take the computer key it knows about because this is the local system decrypt the",
    "start": "248580",
    "end": "255659"
  },
  {
    "text": "ticket extract the pack and then use that pack to generate a Windows access token and this can then",
    "start": "255659",
    "end": "262139"
  },
  {
    "text": "be used to impersonate the user on the local system and perform operations on their behalf",
    "start": "262139",
    "end": "267240"
  },
  {
    "text": "however the problem here is we've not gained anything like that pack which we authenticated with is just our pack so",
    "start": "267240",
    "end": "274740"
  },
  {
    "text": "it has only the groups that we were granted by the KDC in the first place we've gained no privileges by doing this",
    "start": "274740",
    "end": "281520"
  },
  {
    "text": "however there is an existing attack uh remote attack which allows you to",
    "start": "281520",
    "end": "286620"
  },
  {
    "text": "basically specify an arbitrary pack and that's called the silver ticket attack so let's see how that would apply",
    "start": "286620",
    "end": "291660"
  },
  {
    "text": "locally well first we need a key of some kind but we don't know the computer accounts key but it turns out we do know a key we",
    "start": "291660",
    "end": "299340"
  },
  {
    "text": "know our user's key because every user in Kerberos has its own key derived from",
    "start": "299340",
    "end": "304440"
  },
  {
    "text": "their password so we take our password we authenticate to LSA we can then in our own process",
    "start": "304440",
    "end": "311699"
  },
  {
    "text": "generate that same key it requires nothing other than the password and we can just completely build a fake",
    "start": "311699",
    "end": "318419"
  },
  {
    "text": "ticket for an arbitrary service and this has a pack which can contain",
    "start": "318419",
    "end": "323820"
  },
  {
    "text": "anything we like and then we put we ourselves call accept security context",
    "start": "323820",
    "end": "330000"
  },
  {
    "text": "and we get privilege escalation because we can say we're we're an admin so please give this",
    "start": "330000",
    "end": "336000"
  },
  {
    "text": "admin on the on the machine we impersonate that token and that's it job done simple",
    "start": "336000",
    "end": "341820"
  },
  {
    "text": "so let's see that actually in action so I've got a Windows 10 machine here",
    "start": "341820",
    "end": "348800"
  },
  {
    "text": "and I've written a lot of dot net code I'll give you a link to",
    "start": "348800",
    "end": "355800"
  },
  {
    "text": "where a lot of this code lives later on but we're just using Powershell here to interact with that and it's very it's",
    "start": "355800",
    "end": "361680"
  },
  {
    "text": "relatively simple we build some basic configuration we then derive the key",
    "start": "361680",
    "end": "367199"
  },
  {
    "text": "based on the password we've passed in and then I've written a function new Kerberos silver ticket which will take",
    "start": "367199",
    "end": "374400"
  },
  {
    "text": "that key take what groups you want to be what user said you want to be and just build one of these fake tickets so we'll",
    "start": "374400",
    "end": "380160"
  },
  {
    "text": "never talk to the KDC at all um next we then build an AP request",
    "start": "380160",
    "end": "386479"
  },
  {
    "text": "which will allow us to Bend Court accept security context and then there's just",
    "start": "386479",
    "end": "392280"
  },
  {
    "text": "some code here which passes that AP request with the silver ticket uh to LSA",
    "start": "392280",
    "end": "397940"
  },
  {
    "text": "and hopefully we get back from here we can just ask the server context for hey",
    "start": "397940",
    "end": "404100"
  },
  {
    "text": "can you give me that access token back please so we can just run that we do need to",
    "start": "404100",
    "end": "411479"
  },
  {
    "text": "know the user's password but in this particular case we know the user's password is password to we can we",
    "start": "411479",
    "end": "417600"
  },
  {
    "text": "actually uh are unclear on that we can do get NT token",
    "start": "417600",
    "end": "423660"
  },
  {
    "text": "so I'm the Bob user and his password two oops",
    "start": "423660",
    "end": "430440"
  },
  {
    "text": "oops gotta make sure it's uh the Correct capitalization so that that has worked and we can",
    "start": "430440",
    "end": "435660"
  },
  {
    "text": "actually uh I've got a nice little GUI you can just bring up uh the token information and this is Bob and his",
    "start": "435660",
    "end": "442380"
  },
  {
    "text": "groups so if you run silver ticket our silver ticket script",
    "start": "442380",
    "end": "448740"
  },
  {
    "text": "uh we put in the password of password too and it doesn't work",
    "start": "448740",
    "end": "455160"
  },
  {
    "text": "uh but that's that's not a good start to the presentation fortunately this is",
    "start": "455160",
    "end": "460440"
  },
  {
    "text": "expected so I will pass you now on to Nick who's actually going to explain why it's expected yeah so if we look at the",
    "start": "460440",
    "end": "467880"
  },
  {
    "text": "error message it's pretty generic obviously we could make some guesses about maybe our code being incorrect or",
    "start": "467880",
    "end": "473220"
  },
  {
    "text": "the ticket we're ultimately building being invalid in some way but actually where we have to go is into the",
    "start": "473220",
    "end": "479280"
  },
  {
    "text": "internals of LSA specifically this Kerberos Security package to understand where it's failing and we'll give you a",
    "start": "479280",
    "end": "485160"
  },
  {
    "text": "head start on this one the issue stems from a thing called Pac signature validation obviously James uh discussed",
    "start": "485160",
    "end": "491699"
  },
  {
    "text": "what a pack is and it effectively contains user information like privileged groups well that information",
    "start": "491699",
    "end": "496860"
  },
  {
    "text": "is pretty sensitive so tickets secure this in an additional Way by signing the",
    "start": "496860",
    "end": "502919"
  },
  {
    "text": "pack with technically it includes three signatures we're only going to focus on Two And when a machine wants to validate",
    "start": "502919",
    "end": "508979"
  },
  {
    "text": "a pack it can take the same key that was used to issue the service ticket calculate a local checksum value and to",
    "start": "508979",
    "end": "515520"
  },
  {
    "text": "Simply do a comparison against the server signature now we have control over that key because the key is derived",
    "start": "515520",
    "end": "521039"
  },
  {
    "text": "from the user's password so that's not where it's failing where it's failing is in this curb verify pack request where",
    "start": "521039",
    "end": "526080"
  },
  {
    "text": "effectively the KDC signature and The Logical checksum value get shipped off via net logon over to the KDC where it",
    "start": "526080",
    "end": "532620"
  },
  {
    "text": "can use its curb TGT key to validate that the KDC signature which is actually a checksum of a checksum is valid and it",
    "start": "532620",
    "end": "540180"
  },
  {
    "text": "can return that result back to the machine so this leaves you with an interesting question which is why do",
    "start": "540180",
    "end": "545640"
  },
  {
    "text": "silver tickets ever work what are the requirements for getting silver tickets to work because we're always forging packs in those the answer is pack",
    "start": "545640",
    "end": "553380"
  },
  {
    "text": "validation isn't always enabled and we've categorized three rough buckets where this pack validation does get",
    "start": "553380",
    "end": "558839"
  },
  {
    "text": "disabled the first one derives from your logon session so if you're in a quilt system equivalent logged on session you",
    "start": "558839",
    "end": "564839"
  },
  {
    "text": "have TCB privileges you're running as local or network service there's one that stems from your credential handle",
    "start": "564839",
    "end": "570720"
  },
  {
    "text": "specifically a flag on the credentials handle this cred attribute pack bypass glass flag it can be applied manually to",
    "start": "570720",
    "end": "577860"
  },
  {
    "text": "a credentials handle if you have TCB Privileges and it's also applied automatically in some specific instances",
    "start": "577860",
    "end": "583200"
  },
  {
    "text": "that has to do with the service Sid so you know we're talking again about service accounts is Apple users things",
    "start": "583200",
    "end": "588480"
  },
  {
    "text": "like that and there's a strange bucket at the very bottom that stems from a flag on the context that says ASC ret",
    "start": "588480",
    "end": "594899"
  },
  {
    "text": "use session key now if you go into msdn you get a really generic answer for what this flag",
    "start": "594899",
    "end": "600060"
  },
  {
    "text": "ultimately does and it has something to do with keys derived from keys but we certainly want to start digging into",
    "start": "600060",
    "end": "605580"
  },
  {
    "text": "this because it seems like something we might be able to control luckily if we jump over into 4120 the Kerberos RFC we",
    "start": "605580",
    "end": "612420"
  },
  {
    "text": "can find references to a flag use session key that's applied in AP Rec messages and it effectively says that",
    "start": "612420",
    "end": "618180"
  },
  {
    "text": "when this flag is in use the ticket is encrypted with session key from the service TGT rather than the server",
    "start": "618180",
    "end": "624120"
  },
  {
    "text": "secret key or its long-term key they refer to this as user to user authentication so for the remainder of",
    "start": "624120",
    "end": "629459"
  },
  {
    "text": "the presentation you'll hear us say user to user or Udu it effectively refers to this process where you have the curb TGT",
    "start": "629459",
    "end": "636360"
  },
  {
    "text": "key which is used to issue a ticket granting ticket with a pack and instead of another service ticket or the the",
    "start": "636360",
    "end": "643019"
  },
  {
    "text": "service ticket that gets issued on behalf of that TGT being signed with the server's long-term key the session key",
    "start": "643019",
    "end": "648720"
  },
  {
    "text": "is instead extracted from the ticket granting ticket and used instead now both of these are information that you",
    "start": "648720",
    "end": "654600"
  },
  {
    "text": "know are pretty lined up like if you have the session key for a TGT you would generally expect to have the user's password but",
    "start": "654600",
    "end": "661640"
  },
  {
    "text": "we want to get the session T and it's not necessarily as easy as we might hope so we're doing all of this because we",
    "start": "661640",
    "end": "667740"
  },
  {
    "text": "want to disable pack validation but if we're logged in as a user and we actually go and ask LSA to give us a TGT",
    "start": "667740",
    "end": "672959"
  },
  {
    "text": "with a session key we'll unfortunately be left with a bunch of null bytes and this is a security protection that LSA",
    "start": "672959",
    "end": "678360"
  },
  {
    "text": "puts in place because a TGT is functionally like a password right like having to take a granting ticket lets you authenticate to services on behalf",
    "start": "678360",
    "end": "684899"
  },
  {
    "text": "of a user so it would be like querying LSA for a short-term password or the user's long-term key lucky for us this",
    "start": "684899",
    "end": "692100"
  },
  {
    "text": "problem has already been solved in some form by a trick called TGT delegate or",
    "start": "692100",
    "end": "697320"
  },
  {
    "text": "unconstrained delegation TGT extraction and we won't belabor this particular",
    "start": "697320",
    "end": "702360"
  },
  {
    "text": "layout too much or exactly what's going on here but functionally what we're abusing is the fact that LSA protects",
    "start": "702360",
    "end": "708480"
  },
  {
    "text": "the ticket granting ticket very well but it doesn't protect service tickets quite as well and there are particular",
    "start": "708480",
    "end": "714120"
  },
  {
    "text": "instances where a service ticket is marked for effectively a delegatable",
    "start": "714120",
    "end": "719160"
  },
  {
    "text": "ticket and it will embed the entire TGT and session key of the target user into that ticket so we can effectively ask",
    "start": "719160",
    "end": "726240"
  },
  {
    "text": "initialized security context to build us a service ticket for any service on the KDC that host is marked with",
    "start": "726240",
    "end": "733079"
  },
  {
    "text": "unconstrained delegation the outgoing service ticket will effectively have the",
    "start": "733079",
    "end": "738480"
  },
  {
    "text": "TGs as well as an authenticator value that's encrypted with the session key from the ticket itself and we can get",
    "start": "738480",
    "end": "745200"
  },
  {
    "text": "that session key fine because it's a service ticket and inside of that authenticator is a checksum value which is actually not a checksum it's a GSS",
    "start": "745200",
    "end": "751440"
  },
  {
    "text": "checksum structure which contains a curb cred structure so this is great we now have a way to get an active TGT and its",
    "start": "751440",
    "end": "758880"
  },
  {
    "text": "session key from LSA and we also believe that the use of this session key when",
    "start": "758880",
    "end": "764579"
  },
  {
    "text": "we're signing our silver ticket should result in arbitrary pack data bypassing validation so the last question we have",
    "start": "764579",
    "end": "770399"
  },
  {
    "text": "to ask is what are we actually going to do to the pack to get admin we know the pack is critical we know it contains critical information the substructure",
    "start": "770399",
    "end": "777000"
  },
  {
    "text": "we're going to focus on is this logon infrastructure it effectively contains all of the information For What rids and",
    "start": "777000",
    "end": "783600"
  },
  {
    "text": "the domain said effectively all the IDS that locate or identify user privileges",
    "start": "783600",
    "end": "788639"
  },
  {
    "text": "so the ones up top are pretty self-explanatory you also have extra SIDS and resource domain SIDS Sid",
    "start": "788639",
    "end": "794040"
  },
  {
    "text": "filtering if you've heard of that before applies to all of this and there's a lot of nuances there which James has a beautifully documented out there but for",
    "start": "794040",
    "end": "801240"
  },
  {
    "text": "the most part we're actually just going to focus on adding arbitrary group rids so we can add things like the 500 and",
    "start": "801240",
    "end": "806700"
  },
  {
    "text": "512 rid which apply to the domain said that the user is in and functionally becoming domain administrator on most",
    "start": "806700",
    "end": "813600"
  },
  {
    "text": "local machines would also make you regular admin so I'll pass things back over to James and he's going to see if",
    "start": "813600",
    "end": "818760"
  },
  {
    "text": "we can get pack validation disabled properly this time so yes we can um",
    "start": "818760",
    "end": "826260"
  },
  {
    "text": "go to another demo so in this particular case it's uses the user",
    "start": "826260",
    "end": "832620"
  },
  {
    "text": "okay so it's pretty much exactly the same code as we we've just seen",
    "start": "832620",
    "end": "838079"
  },
  {
    "text": "the main crucial difference is we call a function I wrote get user TGT and that",
    "start": "838079",
    "end": "844079"
  },
  {
    "text": "performs basically that exact attack that Nick has just described where you get a delegation AP request",
    "start": "844079",
    "end": "851959"
  },
  {
    "text": "decrypt it and return the TGT with its own session key we can then extract the",
    "start": "851959",
    "end": "858300"
  },
  {
    "text": "session key from that and this will of course be now non-zero and then instead of our long-term key so",
    "start": "858300",
    "end": "864839"
  },
  {
    "text": "of course at this point we no longer need a password so that's kind of a useful benefit as well of doing this that you no longer need that user's",
    "start": "864839",
    "end": "871320"
  },
  {
    "text": "password to perform this attack you can call the new Cobra silver ticket",
    "start": "871320",
    "end": "876600"
  },
  {
    "text": "function with the session key instead of the TGT instead of the password key",
    "start": "876600",
    "end": "881820"
  },
  {
    "text": "derived key and then basically almost everything else is exactly the same we make sure",
    "start": "881820",
    "end": "887160"
  },
  {
    "text": "that the local Kerberos ticket cache has our TGT just to make sure that it's definitely going to use our TGT rather",
    "start": "887160",
    "end": "893820"
  },
  {
    "text": "than one of the other tgts the user has and then we just call accept security",
    "start": "893820",
    "end": "899760"
  },
  {
    "text": "context with our silver ticket and hopefully it all just works magically",
    "start": "899760",
    "end": "905660"
  },
  {
    "text": "so we come back to here and as I say we don't need to pass a password the script",
    "start": "905699",
    "end": "913139"
  },
  {
    "text": "itself will always set by default we want to add domain admin groups the main",
    "start": "913139",
    "end": "919199"
  },
  {
    "text": "number groups is useful because we can't admin due to Sid filtering we can't add the local admin group but if we add the",
    "start": "919199",
    "end": "925920"
  },
  {
    "text": "domain admin group then by default all domain join machines have local administrator the local administrative",
    "start": "925920",
    "end": "932579"
  },
  {
    "text": "group contains the domain admin group so that will give us domain admin we also make sure that we set the integral level",
    "start": "932579",
    "end": "937620"
  },
  {
    "text": "to medium um close that down and we run that and",
    "start": "937620",
    "end": "944160"
  },
  {
    "text": "no errors Hallelujah right I think we're done um",
    "start": "944160",
    "end": "950339"
  },
  {
    "text": "so yeah I think that's the end of our presentation thank you very much for coming so uh we can see possibly in here",
    "start": "950339",
    "end": "957779"
  },
  {
    "text": "um or I can just show it here I can do and get NT token groups and from token and we can see that we",
    "start": "957779",
    "end": "965820"
  },
  {
    "text": "are now built-in administrators so what's not to like",
    "start": "965820",
    "end": "971880"
  },
  {
    "text": "um so my tooling has an invoke NT token function",
    "start": "971880",
    "end": "977779"
  },
  {
    "text": "which takes an access token and will impersonate it for you and run a",
    "start": "977779",
    "end": "983760"
  },
  {
    "text": "Powershell script while impersonating that that script so we can go",
    "start": "983760",
    "end": "988860"
  },
  {
    "text": "and try and write to save the windows folder is that content",
    "start": "988860",
    "end": "993959"
  },
  {
    "text": "windows test.txt and so this should have now given us",
    "start": "993959",
    "end": "1000139"
  },
  {
    "text": "privilege escalation however we've now got another error and again",
    "start": "1000139",
    "end": "1005300"
  },
  {
    "text": "unfortunately this is this is not intended but is unfortunately a byproduct of what we've done and it's",
    "start": "1005300",
    "end": "1011660"
  },
  {
    "text": "all talking about impersonation levels and that's that's not usually a good sign so let's pass it back to Nick Ferreira to continue the discussion all",
    "start": "1011660",
    "end": "1019160"
  },
  {
    "text": "right we're getting closer here um and I'm actually going to pull out an old diagram it's one of my favorites of James where uh he's meticulously laid",
    "start": "1019160",
    "end": "1027140"
  },
  {
    "text": "out all of the flows for checking whether or not one particular entity can",
    "start": "1027140",
    "end": "1032480"
  },
  {
    "text": "impersonate a token um now this is a long list and they sort of feed into each other but we can",
    "start": "1032480",
    "end": "1037579"
  },
  {
    "text": "certainly start going through it and thinking about where we might start running into issues with this token that we've built well up first the token",
    "start": "1037579",
    "end": "1044660"
  },
  {
    "text": "level being under impersonate doesn't imply here we also don't have SC impersonate privileges so we wouldn't get the immediate bypass the token IL",
    "start": "1044660",
    "end": "1051919"
  },
  {
    "text": "and the token user can both be controlled by the pack and when James was looking at it everything looked fine like it said we were domain Bob the",
    "start": "1051919",
    "end": "1059059"
  },
  {
    "text": "token Integrity level was medium we just had domain admin groups on it the elevation check beyond that is a Nord if",
    "start": "1059059",
    "end": "1065360"
  },
  {
    "text": "the user is not a UAC admin which we're not and there's this last interesting check which we can also all thank James",
    "start": "1065360",
    "end": "1071179"
  },
  {
    "text": "for and it's one final check on the token that looks to see if the target token attempting to be impersonated",
    "start": "1071179",
    "end": "1077059"
  },
  {
    "text": "exists in session zero and the users session who's attempting to impersonate the token is not session zero this is",
    "start": "1077059",
    "end": "1084020"
  },
  {
    "text": "actually a really common thing using loopback authentication to manipulate tokens on Windows is a known attack and",
    "start": "1084020",
    "end": "1091160"
  },
  {
    "text": "in response Microsoft has blocked session zero tokens from being impersonated anywhere else and if you",
    "start": "1091160",
    "end": "1096260"
  },
  {
    "text": "didn't know Network authentication tokens go into session Zero by default so we have an issue and we're persistent",
    "start": "1096260",
    "end": "1102860"
  },
  {
    "text": "now we're looking for instances where a token would be moved from one session to another there are probably a lot of",
    "start": "1102860",
    "end": "1108440"
  },
  {
    "text": "places we could look for this information we're going to start just in the lsas server and we're going to look for instances where it calls NT set",
    "start": "1108440",
    "end": "1114740"
  },
  {
    "text": "information token or the token session ID info class it's probably a good first start now granted there could be a",
    "start": "1114740",
    "end": "1120140"
  },
  {
    "text": "million security packages or weird dynamically loaded code that does this but we end up with a nice little flow chart we can start going through it and",
    "start": "1120140",
    "end": "1126260"
  },
  {
    "text": "investigating well the bottom function that looks super juicy the update user token session ID is unfortunately locked",
    "start": "1126260",
    "end": "1132740"
  },
  {
    "text": "behind TCB as you would imagine the lsap session token isn't particularly useful here it doesn't really migrate tokens",
    "start": "1132740",
    "end": "1138980"
  },
  {
    "text": "between sessions it's just for duplicating a token and applying it to a logon session the LSAT build and create",
    "start": "1138980",
    "end": "1144919"
  },
  {
    "text": "token and filter elevated token full both tend to deal with elevated and linked tokens so things that would be",
    "start": "1144919",
    "end": "1150919"
  },
  {
    "text": "related to UAC split tokens we could maybe get something useful going on here but we'd really like to ignore UAC it's",
    "start": "1150919",
    "end": "1156860"
  },
  {
    "text": "just a pain for this whole thing so we're left with this really interesting flow from lsap create token ex into a",
    "start": "1156860",
    "end": "1162980"
  },
  {
    "text": "really unique function called lsap applied loopback session ID now what's particularly unique about this flow is",
    "start": "1162980",
    "end": "1169400"
  },
  {
    "text": "the lsap create token ex is exactly where our call Flow already goes that's what accepts security context and the",
    "start": "1169400",
    "end": "1176000"
  },
  {
    "text": "Kerberos package calls underneath when the token is finally ready to get built so James and I started wondering what is",
    "start": "1176000",
    "end": "1181280"
  },
  {
    "text": "this function and what does it do well lucky for you we've effectively reversed it and understood its implementation to",
    "start": "1181280",
    "end": "1187340"
  },
  {
    "text": "some regard essentially the tracking mechanism to identify instances just like ours it's to identify instances",
    "start": "1187340",
    "end": "1193400"
  },
  {
    "text": "where a client and a server are talking to each other on the same machine and for some reason the protocol hasn't",
    "start": "1193400",
    "end": "1199640"
  },
  {
    "text": "identified that it's what we would call loopback authentication and this is probably in response to maybe some sort",
    "start": "1199640",
    "end": "1205760"
  },
  {
    "text": "of token session ID refactoring code but regardless it's really unique when a user calls into",
    "start": "1205760",
    "end": "1212900"
  },
  {
    "text": "initialize Security Contracts a begin tracking function gets called and effectively a entry gets added to this",
    "start": "1212900",
    "end": "1218179"
  },
  {
    "text": "table with the session ID of the user and when the buffer is being returned back out of initialized security context",
    "start": "1218179",
    "end": "1224299"
  },
  {
    "text": "and remember the buffer we know is an AP rack but depending on the protocol this could be any you know Network protocol",
    "start": "1224299",
    "end": "1229940"
  },
  {
    "text": "buffer that buffer also gets fed into update tracking and a hash value gets rolling and this is a pretty solid",
    "start": "1229940",
    "end": "1236539"
  },
  {
    "text": "hashing it uses like random goods directionally and it's built on AES C-Max so we're probably not going to",
    "start": "1236539",
    "end": "1241580"
  },
  {
    "text": "attack the hashing function itself and when the except security context function gets called that AP rack that",
    "start": "1241580",
    "end": "1247640"
  },
  {
    "text": "was passed out of lsas is passed back in begin tracking gets executed and then when a token is being built the code",
    "start": "1247640",
    "end": "1254600"
  },
  {
    "text": "will effectively reference this table to find instances where the hashes match and in that case it is identified an",
    "start": "1254600",
    "end": "1259640"
  },
  {
    "text": "instance where buffers were passed out of lsas to a client and then passed immediately back into lsas from a server",
    "start": "1259640",
    "end": "1265700"
  },
  {
    "text": "somewhere on the host so this is looking really promising to us we now have a primitive where we can get a token moved",
    "start": "1265700",
    "end": "1271820"
  },
  {
    "text": "between sessions and it applies to our situation nicely but we have a few caveats one is we need to start calling",
    "start": "1271820",
    "end": "1277880"
  },
  {
    "text": "initialized security context which James has pointed out we don't do thus far we've just been building the AP Rex",
    "start": "1277880",
    "end": "1283220"
  },
  {
    "text": "manually in Powershell and submitting them via accept security context but we need to get that hash value rolling so",
    "start": "1283220",
    "end": "1289400"
  },
  {
    "text": "that the function can actually line them up later on and we're kind of left with a conundrum where we need to modify the",
    "start": "1289400",
    "end": "1294679"
  },
  {
    "text": "pack inside of the AP rack which would imply that we're modifying the buffers but if we touch the buffers the hash",
    "start": "1294679",
    "end": "1300080"
  },
  {
    "text": "lookup will break and our token will be locked away from us so we kind of have this no-fly zone around our code and the",
    "start": "1300080",
    "end": "1305900"
  },
  {
    "text": "security context functions well we had Curiosities about how exactly this",
    "start": "1305900",
    "end": "1311000"
  },
  {
    "text": "tracking mechanism worked and if you dig into it you find that for every security buffer descriptor transiting in and out",
    "start": "1311000",
    "end": "1316700"
  },
  {
    "text": "of lsas the hashing code will only be interested in buffers where the buffer type matches exactly SEC buffer token in",
    "start": "1316700",
    "end": "1323120"
  },
  {
    "text": "other words it's a token type and that's for those who aren't familiar with those apis what would hold your AP Rack or",
    "start": "1323120",
    "end": "1328400"
  },
  {
    "text": "your ntlm challenge response luckily for us there's actually a high attribute bite in this SEC buffer type",
    "start": "1328400",
    "end": "1335900"
  },
  {
    "text": "and it can hold things like whether or not the buffer is read only or read only with a checksum so we have the token",
    "start": "1335900",
    "end": "1341360"
  },
  {
    "text": "value yes but we can also bitwise or it with say a sec buffer read-only flag and",
    "start": "1341360",
    "end": "1347059"
  },
  {
    "text": "maybe break some assumptions about whether or not the hashing code would use our buffer and we've done exactly",
    "start": "1347059",
    "end": "1352100"
  },
  {
    "text": "that's effectively type confusion and accept security context where you have a buffer descriptor that contains two buffers in it both are marked with token",
    "start": "1352100",
    "end": "1359539"
  },
  {
    "text": "but the former buffer is bitwise or with this read-only flag so we can put our",
    "start": "1359539",
    "end": "1364820"
  },
  {
    "text": "modified AP rack data in there our malicious data and the benign data that we got out of lsas in the second a",
    "start": "1364820",
    "end": "1372320"
  },
  {
    "text": "buffer and the loopback library will refer to the second buffer when it's doing the hash lookup and hashing code and Kerberos will actually use the first",
    "start": "1372320",
    "end": "1378980"
  },
  {
    "text": "buffer because it masks away the upper attribute byte when trying to find a token so third time's the charm we have",
    "start": "1378980",
    "end": "1384980"
  },
  {
    "text": "a primitive for getting the tokens moved I'll pass it to James to see if we can finally get this working",
    "start": "1384980",
    "end": "1390679"
  },
  {
    "text": "Okay so we can now see um there's a fake buffer script",
    "start": "1390679",
    "end": "1397760"
  },
  {
    "text": "and again we get the two users TGT but uh The crucial thing here is instead of",
    "start": "1397760",
    "end": "1404299"
  },
  {
    "text": "using um we're not going to use our modified AP request directly so we create this",
    "start": "1404299",
    "end": "1410179"
  },
  {
    "text": "fake client for our AP request and then we actually have to call as Nick said",
    "start": "1410179",
    "end": "1415280"
  },
  {
    "text": "initialize security context so we both set up a client and a server authentication context to talk to lsas",
    "start": "1415280",
    "end": "1421760"
  },
  {
    "text": "but the crucial thing is we have to do a few updates because users to user actually has like a few ancillary tokens",
    "start": "1421760",
    "end": "1427039"
  },
  {
    "text": "that we need to make sure are negotiated but once that's over and done with uh we can actually then build two",
    "start": "1427039",
    "end": "1433520"
  },
  {
    "text": "security buffers the first one which we want Kerberos to see is type token but",
    "start": "1433520",
    "end": "1438679"
  },
  {
    "text": "it's read only and contains our fake AP request with our silver ticket and then we build an LSA buffer which we",
    "start": "1438679",
    "end": "1444980"
  },
  {
    "text": "want the LSA hashing algorithm to what uh to see and because the LSA code doesn't know anything really about the",
    "start": "1444980",
    "end": "1452000"
  },
  {
    "text": "package it's talking to it just goes oh okay I'll just I'll just hash that one it gets mistaken and only hashes the one",
    "start": "1452000",
    "end": "1458600"
  },
  {
    "text": "we give it and so hopefully this should then actually allow us to get a token in",
    "start": "1458600",
    "end": "1464539"
  },
  {
    "text": "our own session ID so we do token",
    "start": "1464539",
    "end": "1470960"
  },
  {
    "text": "a fake buffer and again we don't need to pass a password we got no errors no errors are good uh",
    "start": "1470960",
    "end": "1477980"
  },
  {
    "text": "if we actually look at the session ID it's now the previous one was zero and",
    "start": "1477980",
    "end": "1483080"
  },
  {
    "text": "now it's two and it doesn't have to be strictly speaking our own session ID just has to be non-zero that's all",
    "start": "1483080",
    "end": "1488900"
  },
  {
    "text": "that's the only criteria so if we scroll back and go back to that uh fingers crossed",
    "start": "1488900",
    "end": "1496760"
  },
  {
    "text": "it should not work hey we got no errors and we can then just read that back just to make sure",
    "start": "1496760",
    "end": "1503240"
  },
  {
    "text": "that we actually wrote something test.text hello world and there we go",
    "start": "1503240",
    "end": "1510940"
  },
  {
    "text": "[Applause] all right this is well and good but",
    "start": "1511820",
    "end": "1517760"
  },
  {
    "text": "James and I aren't ones for uh uh leaving it there when we discovered in",
    "start": "1517760",
    "end": "1523760"
  },
  {
    "text": "Windows 11 that in the loopback hashing code they actually mask out that upper attribute byte so they're doing things",
    "start": "1523760",
    "end": "1530059"
  },
  {
    "text": "properly uh we're not entirely sure why we have our suspicions this was due to some refactoring code we actually think",
    "start": "1530059",
    "end": "1536659"
  },
  {
    "text": "that it was maybe fixed in Windows 11 as a response to other refactoring and not actually a security fix which is why it hasn't been backboarded but either way",
    "start": "1536659",
    "end": "1543320"
  },
  {
    "text": "our double buffer trick is not going to work in Windows 11. and you know James and I James in particular is a huge fan",
    "start": "1543320",
    "end": "1549140"
  },
  {
    "text": "of Windows 11 he wants to make sure all of his tools work there and we return to this diagram where we",
    "start": "1549140",
    "end": "1555320"
  },
  {
    "text": "have this sort of no-fly zone we have to sit here and think well all right if we're not allowed to modify the buffers when they transit in and out of lsas",
    "start": "1555320",
    "end": "1562100"
  },
  {
    "text": "maybe we can modify some something about the ticket or the token as it transits to the KDC in fact we have all the key",
    "start": "1562100",
    "end": "1568760"
  },
  {
    "text": "material necessary to do a man in the middle attack here right like we're the ones who have the session key to the user to user ticket we could decrypt it",
    "start": "1568760",
    "end": "1574940"
  },
  {
    "text": "in transit so we could have a KDC shipping back a valid pack inside of a TGs rep if we could get in the middle",
    "start": "1574940",
    "end": "1580640"
  },
  {
    "text": "somehow we could use our session key unlock the pack modify the the group rids and then package it all back up and",
    "start": "1580640",
    "end": "1587000"
  },
  {
    "text": "ship it off to the machine the machine would then cache that ticket and when it was used for the AP rack and we could",
    "start": "1587000",
    "end": "1592100"
  },
  {
    "text": "just self-negotiate we're not actually needing to modify the ticket at that point because as it stands in LSA as",
    "start": "1592100",
    "end": "1597799"
  },
  {
    "text": "it's stored in LSA it's malicious but we're left with another problem here especially when we think about Windows 11 which is that credential guard is on",
    "start": "1597799",
    "end": "1604640"
  },
  {
    "text": "by default and also we like thinking about how to break a credential guard and related things so this affects our",
    "start": "1604640",
    "end": "1611779"
  },
  {
    "text": "kill chain thus far because it prevents unconstrained delegation in Kerberos which was the trick we were using to get",
    "start": "1611779",
    "end": "1617059"
  },
  {
    "text": "the session key with our TGT so now we're kind of back to square one a little bit we need the key material for",
    "start": "1617059",
    "end": "1622820"
  },
  {
    "text": "the user to user ticket but we can't access the session key for the TGT and James had the great idea of maybe just",
    "start": "1622820",
    "end": "1629179"
  },
  {
    "text": "bringing your entire own KDC it's worth questioning whether or not we even need to talk to a real KDC there certainly",
    "start": "1629179",
    "end": "1637039"
  },
  {
    "text": "seems to be a lot of flexibility in the way packs are processed and if we want to make this work extra nicely rather",
    "start": "1637039",
    "end": "1643700"
  },
  {
    "text": "than using it on an external host or resolving Kerberos via DNS to an external host we can instead use a nice",
    "start": "1643700",
    "end": "1650480"
  },
  {
    "text": "feature called KDC pinning which is effectively a request that we send into lsas and we can Bond a particular realm",
    "start": "1650480",
    "end": "1656539"
  },
  {
    "text": "and bind it to a hostname in this case case we're probably interested in doing localhost because we want to run a KDC",
    "start": "1656539",
    "end": "1662840"
  },
  {
    "text": "locally now if you were crazy enough to write an entire KDC in.net and then expose that KDC in Powershell",
    "start": "1662840",
    "end": "1670900"
  },
  {
    "text": "you could have an attack where the entire ticket key material from start to finish is controlled by you and when we",
    "start": "1670900",
    "end": "1678320"
  },
  {
    "text": "call into LSA we can pin this KDC or this fake realm to localhost and then",
    "start": "1678320",
    "end": "1684320"
  },
  {
    "text": "when we Supply credentials and start issuing tickets when Kerberos goes to make a socket call it will instead talk back to the local machine on Port 88 and",
    "start": "1684320",
    "end": "1691100"
  },
  {
    "text": "because we're binding on localhost the firewall is not an issue typically here and we now own all of the key material",
    "start": "1691100",
    "end": "1696860"
  },
  {
    "text": "from the curb TGT to the user password long-term keys to the session keys and the tgts and we can start issuing packs",
    "start": "1696860",
    "end": "1703340"
  },
  {
    "text": "with arbitrary data and what's even more interesting is those packs or the information in it don't even have to",
    "start": "1703340",
    "end": "1708440"
  },
  {
    "text": "match or doesn't even have to match the service ticket the domain was actually issued for so let's see if we can take",
    "start": "1708440",
    "end": "1714559"
  },
  {
    "text": "this attack one step further so yeah so now we're on Windows 11.",
    "start": "1714559",
    "end": "1722600"
  },
  {
    "text": "um so the script is somewhat different now because of course we're no longer just",
    "start": "1722600",
    "end": "1728539"
  },
  {
    "text": "building a silver ticket in in user space we are actually like constructing",
    "start": "1728539",
    "end": "1733880"
  },
  {
    "text": "an entire KDC but I have tried to write uh the the net classes in the Powershell",
    "start": "1733880",
    "end": "1739460"
  },
  {
    "text": "module in a relatively easy to use way as the relative as a KDC can be because",
    "start": "1739460",
    "end": "1745700"
  },
  {
    "text": "I did initially look at things like uh using sambas KDC but it doesn't really support users",
    "start": "1745700",
    "end": "1752779"
  },
  {
    "text": "to use it properly so that would that was I wasn't going to start writing Samba code so I'm sorry about that",
    "start": "1752779",
    "end": "1759320"
  },
  {
    "text": "um so all we do here we specify our fake realm uh we have a password of password",
    "start": "1759320",
    "end": "1766039"
  },
  {
    "text": "because it can be anything that we don't need to honor the current password complexity requirements for it for your",
    "start": "1766039",
    "end": "1771799"
  },
  {
    "text": "domain this is a useful feature um and just be we build a user",
    "start": "1771799",
    "end": "1777440"
  },
  {
    "text": "and then literally with that user he's called new Kerberos KDC server and give",
    "start": "1777440",
    "end": "1782539"
  },
  {
    "text": "it the realm give it the domain said and your list of users and you just start it and it just sits",
    "start": "1782539",
    "end": "1788419"
  },
  {
    "text": "there running on localhost we can then add the PIN",
    "start": "1788419",
    "end": "1793640"
  },
  {
    "text": "so we pin that realm so any request by LSA in our current from our current",
    "start": "1793640",
    "end": "1798740"
  },
  {
    "text": "thread and process for that realm we'll go to actually localhost so we'll go to",
    "start": "1798740",
    "end": "1804919"
  },
  {
    "text": "our local KDC and then we pretty much just do a standard loopback authentication request",
    "start": "1804919",
    "end": "1812140"
  },
  {
    "text": "we have to pass our fake credentials to LSA but it will quite happily like",
    "start": "1812140",
    "end": "1819080"
  },
  {
    "text": "use those and go oh the pin I can just talk to the KDC on localhost no problems",
    "start": "1819080",
    "end": "1824539"
  },
  {
    "text": "and then we get the access token at the end and hopefully everything's good so",
    "start": "1824539",
    "end": "1830960"
  },
  {
    "text": "just to prove that I'm not cheating um we call get computer info and one of",
    "start": "1830960",
    "end": "1836960"
  },
  {
    "text": "the properties and that is device guard uh where is it so security service is",
    "start": "1836960",
    "end": "1843200"
  },
  {
    "text": "running so we're running credential guard and if we actually run our previous one",
    "start": "1843200",
    "end": "1848360"
  },
  {
    "text": "um so because we got that we can't actually uh get the users TGT so there is a a",
    "start": "1848360",
    "end": "1856100"
  },
  {
    "text": "simple get user TGT script I've written just to do that attack and we can't get",
    "start": "1856100",
    "end": "1861260"
  },
  {
    "text": "the delegation TGT okay so our current attack Vector is is at is a problem so",
    "start": "1861260",
    "end": "1870020"
  },
  {
    "text": "instead we run our KDC attack we run that no errors always a good sign uh",
    "start": "1870020",
    "end": "1878840"
  },
  {
    "text": "we have such an idea of two we can see our groups",
    "start": "1878840",
    "end": "1883940"
  },
  {
    "text": "we are a main member of the built-in administrators awesome",
    "start": "1883940",
    "end": "1889399"
  },
  {
    "text": "and so we can obviously impersonate this to verify that we've actually got",
    "start": "1889399",
    "end": "1896539"
  },
  {
    "text": "privilege escalation bye bye credit card",
    "start": "1896539",
    "end": "1901720"
  },
  {
    "text": "content Windows cred dot text",
    "start": "1902620",
    "end": "1909140"
  },
  {
    "text": "and no errors so just to check that again I'm not",
    "start": "1909140",
    "end": "1915740"
  },
  {
    "text": "no sleight of hand bye bye Craig guard and we've basically done it even with Craig got enabled without ever knowing",
    "start": "1915740",
    "end": "1921500"
  },
  {
    "text": "the user's password [Applause]",
    "start": "1921500",
    "end": "1928469"
  },
  {
    "text": "so let me just wrap this up unfortunately if you go and try this",
    "start": "1931039",
    "end": "1936140"
  },
  {
    "text": "today it won't work and that's because Microsoft actually fixed the issue yesterday",
    "start": "1936140",
    "end": "1941419"
  },
  {
    "text": "basically yes I may have been slightly cheating with the VMS they weren't up to date",
    "start": "1941419",
    "end": "1948980"
  },
  {
    "text": "um so they basically what they've done is they've effectively removed that use the",
    "start": "1948980",
    "end": "1954740"
  },
  {
    "text": "user flag check and it's not even in clear why this even existed in the first place but it's one of those things that",
    "start": "1954740",
    "end": "1961520"
  },
  {
    "text": "it's been there because some customer at some point needed this feature it can be",
    "start": "1961520",
    "end": "1967340"
  },
  {
    "text": "re-enabled by changing one of the configuration knobs in Kerberos",
    "start": "1967340",
    "end": "1972559"
  },
  {
    "text": "um you can just go into the Kerberos dll and find out what the name of that is as far as I know it's undocumented at the",
    "start": "1972559",
    "end": "1977659"
  },
  {
    "text": "moment uh because it's probably one of these things that Microsoft will only tell you about if you have this particular problem in a in an Enterprise",
    "start": "1977659",
    "end": "1983960"
  },
  {
    "text": "environment um so effectively are um attack has gone which is a bit of a",
    "start": "1983960",
    "end": "1989840"
  },
  {
    "text": "shame but this is the whole point of security research is to get things fixed",
    "start": "1989840",
    "end": "1995980"
  },
  {
    "text": "but of course there's possibilities that these types of bugs will happen again and",
    "start": "1996080",
    "end": "2001600"
  },
  {
    "text": "we sort of thought about okay what sort of mitigations can we kind of think of here and none of them are perfect but",
    "start": "2001600",
    "end": "2007899"
  },
  {
    "text": "you can you can apply some of them in an Enterprise environment so the first one is there's a there's a flag if you look",
    "start": "2007899",
    "end": "2013600"
  },
  {
    "text": "back at that previous slide you can if you're a a non-system service so you're",
    "start": "2013600",
    "end": "2018880"
  },
  {
    "text": "like a sort of an IIs pool user or you're a virtual service account you can",
    "start": "2018880",
    "end": "2024700"
  },
  {
    "text": "still bypass pack validation by having the service Sid as one of your groups",
    "start": "2024700",
    "end": "2030580"
  },
  {
    "text": "um but you can actually disable that feature so there is a configuration knob for Kerberos which says actually no turn",
    "start": "2030580",
    "end": "2036760"
  },
  {
    "text": "this off because it's it's bad for me however it really doesn't prevent local",
    "start": "2036760",
    "end": "2042220"
  },
  {
    "text": "service and network service or system from accepting packs with modify uh for accepting tickets from modified packs so",
    "start": "2042220",
    "end": "2049240"
  },
  {
    "text": "it's not a perfect solution necessarily certainly won't prevent uh silver ticket attacks generally",
    "start": "2049240",
    "end": "2055980"
  },
  {
    "text": "um you can also turn on you've got to force Kerberos armoring or sometimes called fast uh this would make it harder",
    "start": "2056440",
    "end": "2062679"
  },
  {
    "text": "to tamper with network traffic between the clients and the KDC because it's sort of signed by the computer account's",
    "start": "2062679",
    "end": "2067780"
  },
  {
    "text": "password so obviously we didn't really need it in this they wouldn't have really affected",
    "start": "2067780",
    "end": "2073658"
  },
  {
    "text": "us directly but if you force it on a client so that it can't talk to a KDC which doesn't have Kerberos armoring",
    "start": "2073659",
    "end": "2079780"
  },
  {
    "text": "enabled then our KDC attack would fail because it just can't it would just reject our KDC as being invalid",
    "start": "2079780",
    "end": "2088618"
  },
  {
    "text": "um now we obviously demonstrated a way of around credential guard but I we",
    "start": "2089139",
    "end": "2094480"
  },
  {
    "text": "still think it has value like there's plenty of things that you can do with that TGT session key that are probably",
    "start": "2094480",
    "end": "2100420"
  },
  {
    "text": "perhaps not even realized at the moment and there's already some attacks so just turning that on has obviously a benefit",
    "start": "2100420",
    "end": "2107140"
  },
  {
    "text": "that it makes it harder to extract key material generally and also blocking this unconstrained delegation attack is",
    "start": "2107140",
    "end": "2113200"
  },
  {
    "text": "also quite useful uh and then finally like uh even if they remove say the pinning attack uh the",
    "start": "2113200",
    "end": "2119500"
  },
  {
    "text": "pinning trick uh you can still use like DNS records to configure your your fake",
    "start": "2119500",
    "end": "2124900"
  },
  {
    "text": "KDC somewhere out on the internet internet so having like Enterprise file rules which say only allow this client",
    "start": "2124900",
    "end": "2131560"
  },
  {
    "text": "to talk to known kdc's is probably a good idea so under the tech side of things that",
    "start": "2131560",
    "end": "2138220"
  },
  {
    "text": "was mitigation so how can you detect these attacks uh occurring and there's",
    "start": "2138220",
    "end": "2143619"
  },
  {
    "text": "not great options like probably the best we found is in the security log there's this event 4672 which basically says",
    "start": "2143619",
    "end": "2151300"
  },
  {
    "text": "this user has been effectively granted administrators style privileges and of course if a domain user who isn't",
    "start": "2151300",
    "end": "2159880"
  },
  {
    "text": "a local admin on that machine suddenly is getting local admin groups or local admin privileges there's probably a",
    "start": "2159880",
    "end": "2166900"
  },
  {
    "text": "problem that you might want to look at so I'm sure probably if you if you go",
    "start": "2166900",
    "end": "2172480"
  },
  {
    "text": "looking there's probably something else interesting you can find but that's the best we could come up with and of course this is only a 40 minute presentation we",
    "start": "2172480",
    "end": "2179020"
  },
  {
    "text": "had lots of uh things we we couldn't talk about um there's a link to my my tooling but",
    "start": "2179020",
    "end": "2184660"
  },
  {
    "text": "also various links to things like UAC bypasses using Kerberos ticket manipulation remote credential guard",
    "start": "2184660",
    "end": "2191020"
  },
  {
    "text": "code execution like arbitrary code execution and lsas because why not um actina escapes Etc so obviously the",
    "start": "2191020",
    "end": "2199420"
  },
  {
    "text": "slides will be out and you can you can find those links directly acknowledgments there's plenty of people",
    "start": "2199420",
    "end": "2205420"
  },
  {
    "text": "who work in the Kerberos space and has found many of the things that we build up our our own work upon so these are of",
    "start": "2205420",
    "end": "2212920"
  },
  {
    "text": "course people we are we are grateful for and I'm sure there's plenty of people we forgot on this slide",
    "start": "2212920",
    "end": "2219099"
  },
  {
    "text": "but it would be rude of me to leave without showing one more thing",
    "start": "2219099",
    "end": "2224740"
  },
  {
    "text": "um as is tradition um so let me just go back to Windows 11.",
    "start": "2224740",
    "end": "2232320"
  },
  {
    "text": "um I do have a snapshot updated to yesterday",
    "start": "2232599",
    "end": "2240119"
  },
  {
    "text": "and hypervis thinking about it",
    "start": "2240579",
    "end": "2245619"
  },
  {
    "text": "um so it's kind of like okay",
    "start": "2245619",
    "end": "2250720"
  },
  {
    "text": "they've blocked our way of bypassing pack validation right well is there any other interesting way",
    "start": "2250720",
    "end": "2256720"
  },
  {
    "text": "we can we can get around this so",
    "start": "2256720",
    "end": "2262599"
  },
  {
    "text": "let's connect to here",
    "start": "2262599",
    "end": "2265800"
  },
  {
    "text": "let's go on hyper-v oh there we go",
    "start": "2267820",
    "end": "2274200"
  },
  {
    "text": "um so obviously we log in as Bob because Bob is our non-admin user because again",
    "start": "2274300",
    "end": "2280720"
  },
  {
    "text": "we can't have them as USC admin because that ironically we can't impersonate an admin token if we're in a UAC user",
    "start": "2280720",
    "end": "2286780"
  },
  {
    "text": "because you can bypass UIC or out of it very strange",
    "start": "2286780",
    "end": "2292140"
  },
  {
    "text": "right okie dokie so",
    "start": "2292660",
    "end": "2299760"
  },
  {
    "text": "we go to oops we go to our Parks directory and as I",
    "start": "2300700",
    "end": "2307240"
  },
  {
    "text": "say this is updating so if we run our KDC attack um it fails as you'd expect so it's",
    "start": "2307240",
    "end": "2314079"
  },
  {
    "text": "removed our silver ticket attack however if we do uh one last thing and it's kind",
    "start": "2314079",
    "end": "2323200"
  },
  {
    "text": "of giving giving away that this is still a silver ticket attack of sorts because we still need to use this",
    "start": "2323200",
    "end": "2328240"
  },
  {
    "text": "password um huh interesting",
    "start": "2328240",
    "end": "2333940"
  },
  {
    "text": "so we have a look at the session ID we get his token groups",
    "start": "2333940",
    "end": "2339720"
  },
  {
    "text": "oh he's an administrator that's a shame [Applause]",
    "start": "2340300",
    "end": "2346299"
  },
  {
    "text": "and just to prove a point um",
    "start": "2348460",
    "end": "2353880"
  },
  {
    "text": "third content windows test.text",
    "start": "2356339",
    "end": "2362640"
  },
  {
    "text": "and there we go [Applause]",
    "start": "2365020",
    "end": "2374949"
  },
  {
    "text": "so before anyone asked I did report out to Microsoft yesterday um unfortunately it's one of those things that I couldn't really report it",
    "start": "2375579",
    "end": "2381640"
  },
  {
    "text": "because I didn't know whether it was a bug until they fixed the bug that we were bypassing to fix anyway needless to",
    "start": "2381640",
    "end": "2387160"
  },
  {
    "text": "say um it was a bit of a last run thing um so that is the end of our presentation thanks very much for uh for",
    "start": "2387160",
    "end": "2393700"
  },
  {
    "text": "attending I really appreciate and I sure Nick appreciate it yeah thanks everyone I really really appreciate everyone",
    "start": "2393700",
    "end": "2399040"
  },
  {
    "text": "coming and we had a lot of fun with us and definitely check out all the material we skipped out on so we had so much we wanted to put in this",
    "start": "2399040",
    "end": "2404740"
  },
  {
    "text": "presentation and we couldn't get to it yeah and I'll try and uh put up the uh the example scripts sometime later next",
    "start": "2404740",
    "end": "2412240"
  },
  {
    "text": "week so thank you very much and have a good rest of your day [Applause]",
    "start": "2412240",
    "end": "2418870"
  },
  {
    "text": "[Music]",
    "start": "2418870",
    "end": "2421980"
  },
  {
    "text": "[Music]",
    "start": "2425820",
    "end": "2428919"
  }
]