[
  {
    "text": "[Music]",
    "start": "1130",
    "end": "10939"
  },
  {
    "text": "oh hi everyone i'm ruben bassard i'm a security researcher for microsoft section 52 and i'm tamia viehl also from",
    "start": "11440",
    "end": "19119"
  },
  {
    "text": "microsoft section 52 and today we're here to talk with you about bedaloc",
    "start": "19119",
    "end": "25119"
  },
  {
    "text": "betalog is our code name for a pretty long list of vulnerabilities affecting memory allocators",
    "start": "25119",
    "end": "31840"
  },
  {
    "text": "mostly in real-time oss and other ellipses used in embedded devices",
    "start": "31840",
    "end": "38800"
  },
  {
    "text": "so just to make make things clearer what do i mean by vulnerabilities in memory",
    "start": "38800",
    "end": "45120"
  },
  {
    "text": "allocators think about it like that let's say that you have a small iot device with not a lot of ram",
    "start": "45120",
    "end": "52399"
  },
  {
    "text": "and on that device you call the malloc function for example which is one of the functions to allocate memory",
    "start": "52399",
    "end": "58879"
  },
  {
    "text": "and you ask it for a very very loud size of memory so let's say",
    "start": "58879",
    "end": "64239"
  },
  {
    "text": "four gigabytes and then what would you expect to get back null",
    "start": "64239",
    "end": "70240"
  },
  {
    "text": "pointer right because it would probably fail but the thing is that in our research we",
    "start": "70240",
    "end": "76240"
  },
  {
    "text": "actually found out that in most cases in most of those real-time voices it won't",
    "start": "76240",
    "end": "82560"
  },
  {
    "text": "it would actually return you a valid pointer to a valid buffer but for a very very small size",
    "start": "82560",
    "end": "89200"
  },
  {
    "text": "which leads us to security issues such as hip overflows obviously",
    "start": "89200",
    "end": "94720"
  },
  {
    "text": "and in this talk we're going to explain everything we're going to talk about how it happens",
    "start": "94720",
    "end": "100799"
  },
  {
    "text": "why well what's the scope of the problem and we'll see some examples",
    "start": "100799",
    "end": "105920"
  },
  {
    "text": "we start off with some two quick reminders one regarding",
    "start": "105920",
    "end": "111200"
  },
  {
    "text": "integer integer overflows which is super important to this topic and the other one is about how memory allocators work",
    "start": "111200",
    "end": "119439"
  },
  {
    "text": "in a high level so don't worry about it afterwards we're gonna see some affected products to really understand",
    "start": "119439",
    "end": "126399"
  },
  {
    "text": "the scale and the scope of this problem and and then we will go and do a",
    "start": "126399",
    "end": "131440"
  },
  {
    "text": "technical dive in and see a working poc and explain everything and how these kind of vulnerabilities could be",
    "start": "131440",
    "end": "137440"
  },
  {
    "text": "exploited to achieve remote code execution on those devices",
    "start": "137440",
    "end": "142480"
  },
  {
    "text": "we'll we'll see a quick demo and end up with some mitigation techniques uh and few minutes of their q a",
    "start": "142480",
    "end": "151280"
  },
  {
    "text": "okay hey everyone as so as only said i will do a quick reminder about integer",
    "start": "152239",
    "end": "159599"
  },
  {
    "text": "overflow and so let's start with simple question",
    "start": "159599",
    "end": "164640"
  },
  {
    "text": "and so eight plus eight everyone knows it they can calculate it",
    "start": "164640",
    "end": "170640"
  },
  {
    "text": "in the red it's 88 oh sorry not the right format",
    "start": "170640",
    "end": "178400"
  },
  {
    "text": "let's check this out and here she fixed it and",
    "start": "178400",
    "end": "185760"
  },
  {
    "text": "so 8 plus 8 it's 16 but let's take a little more complex device",
    "start": "185760",
    "end": "192959"
  },
  {
    "text": "example so 2 to the power of 32 minus 1 this is the",
    "start": "192959",
    "end": "200239"
  },
  {
    "text": "very important number this is the max end for 32 bits why it's important because if you will",
    "start": "200239",
    "end": "207280"
  },
  {
    "text": "take this number and you will edit the number 8 the actual",
    "start": "207280",
    "end": "213040"
  },
  {
    "text": "the computer will think it's seven most important thing it's on 32-bit",
    "start": "213040",
    "end": "218640"
  },
  {
    "text": "systems and you would think it will be another big number but",
    "start": "218640",
    "end": "224840"
  },
  {
    "text": "no the conclusion it's a really small number",
    "start": "224840",
    "end": "229920"
  },
  {
    "text": "and again with multiplication two times two it's four but",
    "start": "229920",
    "end": "235360"
  },
  {
    "text": "if we will take again the max end divide by 2 plus 1",
    "start": "235360",
    "end": "242560"
  },
  {
    "text": "and times 2 it will be 2 and not another big number",
    "start": "242560",
    "end": "248239"
  },
  {
    "text": "and and that's really important thing to remember in this presentation",
    "start": "248239",
    "end": "254879"
  },
  {
    "text": "and so keep this in mind again on 32-bit systems",
    "start": "254879",
    "end": "261840"
  },
  {
    "text": "thank you so memory allocators",
    "start": "261840",
    "end": "269160"
  },
  {
    "text": "essentially on every device that we have any kind of memory or linear memory would want we would want some kind of an",
    "start": "269840",
    "end": "275919"
  },
  {
    "text": "allocator to manage it so on that device we would have three blocks and allocated blocks",
    "start": "275919",
    "end": "281520"
  },
  {
    "text": "in red and green in this generic scenario and essentially it could be implemented",
    "start": "281520",
    "end": "287360"
  },
  {
    "text": "in really really high level uh in two ways as either a single or a doubling list of",
    "start": "287360",
    "end": "293360"
  },
  {
    "text": "three blocks and once we're allocating a block we get it we're getting it out of the free list",
    "start": "293360",
    "end": "301120"
  },
  {
    "text": "and it becomes red in the slide and only holds",
    "start": "301120",
    "end": "306720"
  },
  {
    "text": "a certain size property in most cases and the the thing is",
    "start": "306720",
    "end": "313759"
  },
  {
    "text": "the thing that is important to this topic is just to understand that there is a certain calculation that happens so when",
    "start": "313759",
    "end": "321039"
  },
  {
    "text": "when we're allocating block will not allocating the exact amount of a",
    "start": "321039",
    "end": "326560"
  },
  {
    "text": "memory area that was required requested but some extra space for the size property for example and",
    "start": "326560",
    "end": "333759"
  },
  {
    "text": "might be other properties so in that example you can see that if we'll ask malloc",
    "start": "333759",
    "end": "338880"
  },
  {
    "text": "for 1k bytes it would need to do a certain calculation behind the scenes adding",
    "start": "338880",
    "end": "345280"
  },
  {
    "text": "the extra size of the header of the size property and we will end up allocating let's say",
    "start": "345280",
    "end": "350680"
  },
  {
    "text": "1032 bytes eight bytes small then was originally requested",
    "start": "350680",
    "end": "356639"
  },
  {
    "text": "why is that important because if we're understanding the idea that the integer might wrap around",
    "start": "356639",
    "end": "362240"
  },
  {
    "text": "on those mostly 32-bit systems then there is a potential integer",
    "start": "362240",
    "end": "368639"
  },
  {
    "text": "wrapping around in here when requesting really really loud sizes almost integer maximum or near it",
    "start": "368639",
    "end": "375600"
  },
  {
    "text": "there is a chance that malloc there is not a chance malloc would actually the calculation would actually wrap around",
    "start": "375600",
    "end": "381520"
  },
  {
    "text": "the only question is either this malloc is safe did he check for it",
    "start": "381520",
    "end": "388160"
  },
  {
    "text": "oh it's a bad implementation dead malloc they didn't check for it and now it would uh look at the the number of bytes",
    "start": "388160",
    "end": "395280"
  },
  {
    "text": "requested and would say ah okay seven no problem let's continue",
    "start": "395280",
    "end": "401600"
  },
  {
    "text": "the other example is uh with calc which is essentially a wrapper around malloc in most",
    "start": "401600",
    "end": "408319"
  },
  {
    "text": "implementations again and it works by multiplying the number of items requested and the size of each",
    "start": "408319",
    "end": "414800"
  },
  {
    "text": "item so in that example we would ask two items each one approximately half of",
    "start": "414800",
    "end": "422319"
  },
  {
    "text": "the maximum size and we would end up again trying to allocate four gigabytes",
    "start": "422319",
    "end": "428400"
  },
  {
    "text": "and would successfully allocate only two bytes which is a pretty unexpected expected",
    "start": "428400",
    "end": "434000"
  },
  {
    "text": "behavior that the developer afterwards that use kalo can use malloc",
    "start": "434000",
    "end": "439199"
  },
  {
    "text": "he's not aware of okay so",
    "start": "439199",
    "end": "446000"
  },
  {
    "text": "we talked a little about integer overflow we talked about memory allocation",
    "start": "446240",
    "end": "451680"
  },
  {
    "text": "so we will do a little example so we have the server the server is safe",
    "start": "451680",
    "end": "458000"
  },
  {
    "text": "i write it i wrote it safe i'm good programmer and so we look at this specific function",
    "start": "458000",
    "end": "466639"
  },
  {
    "text": "it's called the reducer data it's get the user data and the size from the user",
    "start": "466639",
    "end": "472240"
  },
  {
    "text": "and the function as you can see we'll try to allocate the size to a buffer and if",
    "start": "472240",
    "end": "478960"
  },
  {
    "text": "the allocation will succeed uh the function will try to copy and then",
    "start": "478960",
    "end": "485199"
  },
  {
    "text": "return the okay thank you message if it's not succeed it will return sorry",
    "start": "485199",
    "end": "490960"
  },
  {
    "text": "um and we have alice alice is a good user i just want to talk to the server",
    "start": "490960",
    "end": "496240"
  },
  {
    "text": "so i'll send the imessage height to chunk two characters size two",
    "start": "496240",
    "end": "503039"
  },
  {
    "text": "and so what will happen inside the server it will try to allocate",
    "start": "503039",
    "end": "509599"
  },
  {
    "text": "if it will succeed because she asked only for two bytes",
    "start": "509599",
    "end": "514880"
  },
  {
    "text": "and and then the main copy will try to copy the user data to the buffer",
    "start": "514880",
    "end": "520880"
  },
  {
    "text": "and return the okay thank you message now we also have",
    "start": "520880",
    "end": "526560"
  },
  {
    "text": "if is a bad user and if we'll try to send a lot of eye really big message to the",
    "start": "526560",
    "end": "533040"
  },
  {
    "text": "server and we'll check she wants to check what happened and so the server will try to allocate",
    "start": "533040",
    "end": "540320"
  },
  {
    "text": "it it will fail and return and return the sorry too much data message to",
    "start": "540320",
    "end": "547600"
  },
  {
    "text": "if we said right because the server is secure and",
    "start": "547600",
    "end": "553440"
  },
  {
    "text": "and we have another example we will change the allocation function to a bed malloc function",
    "start": "553440",
    "end": "560480"
  },
  {
    "text": "and with all this everything will be the same and she will send the hey message",
    "start": "560480",
    "end": "567200"
  },
  {
    "text": "the server will return okay thank you but if is the one that important to us",
    "start": "567200",
    "end": "575120"
  },
  {
    "text": "if we send the really big big message and the server",
    "start": "575120",
    "end": "580880"
  },
  {
    "text": "will try to allocate the this size that you send",
    "start": "580880",
    "end": "586080"
  },
  {
    "text": "we can see inside the malloc function we took a random malloc function from github",
    "start": "586080",
    "end": "592080"
  },
  {
    "text": "it's from free autos if you know this system if not uh ben bassat will talk about it",
    "start": "592080",
    "end": "598480"
  },
  {
    "text": "in a few minutes and and as you can see there is some calculation there and",
    "start": "598480",
    "end": "604880"
  },
  {
    "text": "without even checking the result without even checking anything and",
    "start": "604880",
    "end": "610079"
  },
  {
    "text": "so the allocation will succeed",
    "start": "610079",
    "end": "616160"
  },
  {
    "text": "the main copy will copy the data from alice from eve sorry from eve to to the",
    "start": "616160",
    "end": "622480"
  },
  {
    "text": "buffer and by the size from eve that we remember it was very big size",
    "start": "622480",
    "end": "628560"
  },
  {
    "text": "and will return okay thank you that's not good scenario because",
    "start": "628560",
    "end": "634000"
  },
  {
    "text": "it causes hip overflow and we don't want that",
    "start": "634000",
    "end": "640320"
  },
  {
    "text": "okay so we understand that",
    "start": "642160",
    "end": "647839"
  },
  {
    "text": "once malloc is called there is a certain calculation that might wrap around and in some certain scenarios like in the",
    "start": "647839",
    "end": "654800"
  },
  {
    "text": "fictional server that we saw that might lead to an unexpected hip overflow which",
    "start": "654800",
    "end": "661360"
  },
  {
    "text": "is obviously a vulnerability uh but at this point you must be wondering okay",
    "start": "661360",
    "end": "667839"
  },
  {
    "text": "how many affected devices there are that are actually affected by this",
    "start": "667839",
    "end": "673040"
  },
  {
    "text": "kind of vulnerability that we explained to you about so let's see",
    "start": "673040",
    "end": "678959"
  },
  {
    "text": "a short list of device of operating system real-time operating system devices and ellipses that we",
    "start": "678959",
    "end": "685760"
  },
  {
    "text": "actually found affected by this specific issue and you might notice some some big big",
    "start": "685760",
    "end": "691120"
  },
  {
    "text": "names in here like vxbox which is probably the most popular real-time os in ot industry",
    "start": "691120",
    "end": "697200"
  },
  {
    "text": "and is estimated to run on something like two billion devices",
    "start": "697200",
    "end": "703040"
  },
  {
    "text": "then we got nxp's mqx which is the second most popular real-time os in the same industry and it also runs on tons",
    "start": "703040",
    "end": "710399"
  },
  {
    "text": "of devices we have three autos which is extremely popular with iot devices",
    "start": "710399",
    "end": "718480"
  },
  {
    "text": "it's actually backed by amazon and it's the official real-time os for the aws services for iot",
    "start": "718480",
    "end": "725120"
  },
  {
    "text": "there's google device sdk the device iot device sdk in here",
    "start": "725120",
    "end": "730720"
  },
  {
    "text": "sorry there's mediatek chips in here there's arm chips in you there's reddit new libsy which is an",
    "start": "730720",
    "end": "737680"
  },
  {
    "text": "extremely popular ellipse for embedded devices there's micro cos in here and there's texas instruments uh sdks and",
    "start": "737680",
    "end": "745120"
  },
  {
    "text": "devices nil and and and some more and that's really a partial list",
    "start": "745120",
    "end": "752240"
  },
  {
    "text": "and in every one of those there is some function some memorable memory allocation function",
    "start": "752240",
    "end": "758399"
  },
  {
    "text": "that was actually found vulnerable to this specific data log vulnerability",
    "start": "758399",
    "end": "765040"
  },
  {
    "text": "and it's not only the scope like how many os's are affected by this vulnerability",
    "start": "765839",
    "end": "772480"
  },
  {
    "text": "but what i also want you to understand that there is a specific nature to this kind",
    "start": "772480",
    "end": "779279"
  },
  {
    "text": "of vulnerabilities well the effect the most basic the most bare metal",
    "start": "779279",
    "end": "785279"
  },
  {
    "text": "functions in those products and those functions malloc",
    "start": "785279",
    "end": "791519"
  },
  {
    "text": "and carlock and similar allocation functions in most cases were there for the",
    "start": "791519",
    "end": "797760"
  },
  {
    "text": "earliest days of the project and no one ever gets back and takes a look at the",
    "start": "797760",
    "end": "802800"
  },
  {
    "text": "malloc and says oh wait a minute i wrote this thing 20 years ago and maybe i should check it for this new kind of",
    "start": "802800",
    "end": "809040"
  },
  {
    "text": "abilities that i just learned about no it doesn't happen and and in the far end of the scale you",
    "start": "809040",
    "end": "815680"
  },
  {
    "text": "can see that vxworks actually started from 85 mqx early 90s caleb sinatex three out of",
    "start": "815680",
    "end": "822639"
  },
  {
    "text": "all of these are from early 2000s and no one ever got back and checked",
    "start": "822639",
    "end": "828399"
  },
  {
    "text": "for issues in those functions up until this research and and up up until the",
    "start": "828399",
    "end": "833600"
  },
  {
    "text": "disclosure that we did last year okay so",
    "start": "833600",
    "end": "839760"
  },
  {
    "text": "remember show you some of the most big names that we found and i will",
    "start": "839760",
    "end": "846639"
  },
  {
    "text": "show you some example that we think that are important to really understand what are you talking",
    "start": "846639",
    "end": "853199"
  },
  {
    "text": "about and so we will start with vxworks",
    "start": "853199",
    "end": "858240"
  },
  {
    "text": "um well this is from version 5.1 uh from 93. this is the earliest version",
    "start": "858240",
    "end": "865199"
  },
  {
    "text": "that we could found online um and as you can see in this line",
    "start": "865199",
    "end": "871600"
  },
  {
    "text": "um we have some calculation that is trying to understand what is the",
    "start": "871600",
    "end": "877680"
  },
  {
    "text": "size that the catalog the catalog function need to allocate and",
    "start": "877680",
    "end": "884000"
  },
  {
    "text": "right after it it use it for the amount for the malloc function",
    "start": "884000",
    "end": "889040"
  },
  {
    "text": "so this is the calculation right after it uses it what's the problem it doesn't",
    "start": "889040",
    "end": "894560"
  },
  {
    "text": "check the result and as we said before there is a scenario of integer overflow",
    "start": "894560",
    "end": "900720"
  },
  {
    "text": "so there might be some attack here that can just",
    "start": "900720",
    "end": "906639"
  },
  {
    "text": "allocate a really small size because because they ask for a really big size and everything will be fine",
    "start": "906639",
    "end": "913199"
  },
  {
    "text": "okay so let's continue to calipsey calebc is",
    "start": "913199",
    "end": "918720"
  },
  {
    "text": "some kind of lipsy it's a library from the linux foundation it's used",
    "start": "918720",
    "end": "924079"
  },
  {
    "text": "mainly in the early use in the early stage user space and",
    "start": "924079",
    "end": "929440"
  },
  {
    "text": "and again this line this is the hollow function this line is the problematic airline",
    "start": "929440",
    "end": "935600"
  },
  {
    "text": "after it it just used the size that it calculate but the important",
    "start": "935600",
    "end": "942240"
  },
  {
    "text": "the interesting thing is it's this date this date is",
    "start": "942240",
    "end": "947600"
  },
  {
    "text": "day or two after the the project started and it's really important to understand",
    "start": "947600",
    "end": "954800"
  },
  {
    "text": "that the auto write a lot of function a lot of code in a really short time and",
    "start": "954800",
    "end": "960639"
  },
  {
    "text": "he probably didn't check it right but you remember one important thing this",
    "start": "960639",
    "end": "968160"
  },
  {
    "text": "line fix me this you looked for a multiplication overflow",
    "start": "968160",
    "end": "973600"
  },
  {
    "text": "so he knew about the problem in you know that there is an integer",
    "start": "973600",
    "end": "979360"
  },
  {
    "text": "overflow problem it was in his head but because he wrote a lot of line because",
    "start": "979360",
    "end": "985519"
  },
  {
    "text": "he write a lot of code he didn't ask himself how he can preserve it",
    "start": "985519",
    "end": "992000"
  },
  {
    "text": "everything prevent it and just forgot about about it just forgot about 19 years ago",
    "start": "992000",
    "end": "998720"
  },
  {
    "text": "he fought for a minute oh wait maybe i should fix it after lunch and just forgot about it just forgot",
    "start": "998720",
    "end": "1005680"
  },
  {
    "text": "um you remember it when we asked about this",
    "start": "1005680",
    "end": "1011440"
  },
  {
    "text": "function until 2020 2020",
    "start": "1011440",
    "end": "1018399"
  },
  {
    "text": "and so this problem was there for 18 years give or take and",
    "start": "1018399",
    "end": "1025038"
  },
  {
    "text": "that's what you need to remember about it okay so let's talk about uh some technicalities",
    "start": "1025039",
    "end": "1031038"
  },
  {
    "text": "uh we prepared the poc around this little chip in here it's a it's called",
    "start": "1031039",
    "end": "1037918"
  },
  {
    "text": "simple link it's a it's actually a line of chips from texas instruments the targeting",
    "start": "1037919",
    "end": "1044480"
  },
  {
    "text": "uh the low-cost iot devices devices market it's a really nice chip it comes",
    "start": "1044480",
    "end": "1050880"
  },
  {
    "text": "with a really big software stack so on the bottom layer you can see that",
    "start": "1050880",
    "end": "1057200"
  },
  {
    "text": "the developer can choose either to use ti's home developed autos or friatos which is",
    "start": "1057200",
    "end": "1063120"
  },
  {
    "text": "again the most popular by far in this market then it gets the driver's layers and posix layer for combat compatibility",
    "start": "1063120",
    "end": "1070400"
  },
  {
    "text": "and ease of use afterwards we get the communication stacks so bluetooth",
    "start": "1070400",
    "end": "1076240"
  },
  {
    "text": "zigbee wi-fi everything every communication protocol is supported directly on the chip",
    "start": "1076240",
    "end": "1082000"
  },
  {
    "text": "um and then we have the different plugins so for example cloud connectors uh to pretty much every vendor aws azure",
    "start": "1082000",
    "end": "1089919"
  },
  {
    "text": "google's a cloud really everything really nice chip and pretty low cost",
    "start": "1089919",
    "end": "1096880"
  },
  {
    "text": "and for the sake for the of this poc uh we'll be focusing obviously on the posix layer uh where actually all of the",
    "start": "1096880",
    "end": "1103120"
  },
  {
    "text": "memory allocation functions are implemented the lapel is imp the lapels are implemented for malloc and kaloc",
    "start": "1103120",
    "end": "1110559"
  },
  {
    "text": "and will be running on top of riatos for compatibility",
    "start": "1110559",
    "end": "1116080"
  },
  {
    "text": "so that's how the sdk's code files looks like",
    "start": "1116080",
    "end": "1121679"
  },
  {
    "text": "on top we get the hip dash 4 which is one of the memory allocator implementations",
    "start": "1121679",
    "end": "1127840"
  },
  {
    "text": "offered by friatos the one that ti's people actually chose",
    "start": "1127840",
    "end": "1133440"
  },
  {
    "text": "for their system and then we have at the bottom the memory.c file which is well",
    "start": "1133440",
    "end": "1139679"
  },
  {
    "text": "the memory allocation functions are implemented and that's a callout from the same",
    "start": "1139679",
    "end": "1145120"
  },
  {
    "text": "memory.c file and if you notice there's the n bytes",
    "start": "1145120",
    "end": "1150720"
  },
  {
    "text": "calculation there's some multiplication but the real stuff is uh",
    "start": "1150720",
    "end": "1155919"
  },
  {
    "text": "that line which actually implements a good check a check for uh integer",
    "start": "1155919",
    "end": "1161200"
  },
  {
    "text": "overflow so ti's people actually figured out that if they'll multiply pretty big",
    "start": "1161200",
    "end": "1166320"
  },
  {
    "text": "numbers it might overflow so they need to check that uh they didn't get any null so they want",
    "start": "1166320",
    "end": "1172480"
  },
  {
    "text": "a any zero sorry so they won't divide by it and then there's the opposite function they use",
    "start": "1172480",
    "end": "1179840"
  },
  {
    "text": "division to verify the multiplication so that's that's pretty good job from ti's",
    "start": "1179840",
    "end": "1185200"
  },
  {
    "text": "side but on the other hand that's malloc same file same memory.c file on a few",
    "start": "1185200",
    "end": "1192400"
  },
  {
    "text": "lines below and if you notice here is the vulnerability that that's",
    "start": "1192400",
    "end": "1198799"
  },
  {
    "text": "beta that's what we're talking about simple calculation just one plus sign",
    "start": "1198799",
    "end": "1204320"
  },
  {
    "text": "but no check uh the the value that was calculated is just directly passed on to",
    "start": "1204320",
    "end": "1210000"
  },
  {
    "text": "pv port malloc which is the a memory allocator form three altos",
    "start": "1210000",
    "end": "1215280"
  },
  {
    "text": "uh and and that's not a good implementation there's obviously a vulnerability in here",
    "start": "1215280",
    "end": "1220720"
  },
  {
    "text": "and if we'll give it if we'll ask for large enough size",
    "start": "1220720",
    "end": "1226320"
  },
  {
    "text": "uh the calculation would overflow and then this malloc implementation would call",
    "start": "1226320",
    "end": "1231840"
  },
  {
    "text": "the internal one with a very very small size",
    "start": "1231840",
    "end": "1237440"
  },
  {
    "text": "so let's talk about exploitation we know we understand that to trigger the vulnerability we need to give it",
    "start": "1237600",
    "end": "1244559"
  },
  {
    "text": "to to pass on to malloc some very very large size and then we'll get",
    "start": "1244559",
    "end": "1249600"
  },
  {
    "text": "some very very small memory allocation but we really wanted to demonstrate how this",
    "start": "1249600",
    "end": "1255919"
  },
  {
    "text": "could be leveraging to a full-blown remote code execution so in this scenario we picked up the",
    "start": "1255919",
    "end": "1262240"
  },
  {
    "text": "over over the update mechanism also built in in ti's",
    "start": "1262240",
    "end": "1267520"
  },
  {
    "text": "sdk they give the developers uh their clients essentially the capability",
    "start": "1267520",
    "end": "1274480"
  },
  {
    "text": "to update those chip to update the firmware of the internal chip and the firmware of the application remotely",
    "start": "1274480",
    "end": "1282000"
  },
  {
    "text": "directly from some cdn server that the client needs to have and then it deploys on the chip",
    "start": "1282000",
    "end": "1289360"
  },
  {
    "text": "uh and everything is packed nicely with uh inside the single tar file with that file system structure uh you can see",
    "start": "1289360",
    "end": "1296159"
  },
  {
    "text": "there's like web pages in there and there's the service pack and there's the mcu flash image which which is the",
    "start": "1296159",
    "end": "1301919"
  },
  {
    "text": "actual application femwell but for the sake of this poc the important stuff is ill ota.cmd",
    "start": "1301919",
    "end": "1309440"
  },
  {
    "text": "and that's how this file looks like you can figure out from taking a look at it that it's a pretty simple file that",
    "start": "1309440",
    "end": "1316000"
  },
  {
    "text": "holds the digital signatures for the other internal files so that",
    "start": "1316000",
    "end": "1321679"
  },
  {
    "text": "they could verify the other internal files in the same update tar file",
    "start": "1321679",
    "end": "1329919"
  },
  {
    "text": "and why is that important to us because of the fact that this is the only file in the process that is actually required",
    "start": "1330320",
    "end": "1337760"
  },
  {
    "text": "to be read fully into memory from the network so you can see in this function",
    "start": "1337760",
    "end": "1343840"
  },
  {
    "text": "that the file is actually read using some other get entire file function",
    "start": "1343840",
    "end": "1349120"
  },
  {
    "text": "so later on they could verify the digital signatures of the other files taken from the",
    "start": "1349120",
    "end": "1354400"
  },
  {
    "text": "ota.cmd file so let's take a look at the internal getting entitle find file function",
    "start": "1354400",
    "end": "1361679"
  },
  {
    "text": "uh it's not how to figure out that it's a pretty simple function there's essentially malloc in here there's a",
    "start": "1361679",
    "end": "1368320"
  },
  {
    "text": "check that malloc actually succeeded and returned the valid pointer and then there is an m copy",
    "start": "1368320",
    "end": "1375360"
  },
  {
    "text": "appleton until this point if i wouldn't know that malok is vulnerable",
    "start": "1375360",
    "end": "1380880"
  },
  {
    "text": "there's no issue at all with that function if we allocated enough memory we can copy the buffer to that memo it's",
    "start": "1380880",
    "end": "1387840"
  },
  {
    "text": "it's simple but this malloc specifically from ti is vulnerable",
    "start": "1387840",
    "end": "1393600"
  },
  {
    "text": "and the the thing is that in the context of this plc if you took if you take a look",
    "start": "1393600",
    "end": "1400159"
  },
  {
    "text": "uh there's the file size in there that property is taken directly off the tao file so we as the attacker",
    "start": "1400159",
    "end": "1407520"
  },
  {
    "text": "in this scenario have full control of the size that would be requested from",
    "start": "1407520",
    "end": "1412799"
  },
  {
    "text": "malloc and we can specify uh the integer maximum in such a way or",
    "start": "1412799",
    "end": "1418080"
  },
  {
    "text": "nil in such a way that would trigger the beta log vulnerability in here and would lead",
    "start": "1418080",
    "end": "1423600"
  },
  {
    "text": "sorry and would lead to a overflow afterwards a control one with the mm copy",
    "start": "1423600",
    "end": "1431080"
  },
  {
    "text": "so how we can leverage this control deep overflow into a full remote code execution essentially the idea is to",
    "start": "1432480",
    "end": "1439200"
  },
  {
    "text": "find some kind of a function pointer that we can trigger a call to in memory",
    "start": "1439200",
    "end": "1444320"
  },
  {
    "text": "and then we'll mess with the heap from the free autoseek we'll mess with it in such a way so the next allocation",
    "start": "1444320",
    "end": "1452080"
  },
  {
    "text": "would be outside of the hip would be on in the area where that function pointer lays",
    "start": "1452080",
    "end": "1457679"
  },
  {
    "text": "we'll overlight it to point to our shell code and then we would trigger a call to it",
    "start": "1457679",
    "end": "1464000"
  },
  {
    "text": "that's how the hip specifically in free autos looks like it's if you know hip hip exploitation",
    "start": "1464080",
    "end": "1470799"
  },
  {
    "text": "techniques uh from gilead see for example they use the double link",
    "start": "1470799",
    "end": "1476000"
  },
  {
    "text": "list but in free alto specifically there's a single linked list which is",
    "start": "1476000",
    "end": "1481520"
  },
  {
    "text": "kind of a problem for us but the idea in here is that we can create",
    "start": "1481520",
    "end": "1487360"
  },
  {
    "text": "this redirection of the hip by overflowing and overriding",
    "start": "1487360",
    "end": "1494240"
  },
  {
    "text": "the next free cell pointer in the next free block",
    "start": "1494240",
    "end": "1499440"
  },
  {
    "text": "so in this slide we will override and change it to that address so in the next",
    "start": "1499440",
    "end": "1506240"
  },
  {
    "text": "allocation the allocator would figure out okay that's where i need to go that's where the free block the next",
    "start": "1506240",
    "end": "1512799"
  },
  {
    "text": "three block is so once we'll allocate something it would be allocated on that",
    "start": "1512799",
    "end": "1518880"
  },
  {
    "text": "memory area and what is this function pointer that i'm talking about",
    "start": "1518880",
    "end": "1527039"
  },
  {
    "text": "so in ti's sdk there's another component of a web server uh",
    "start": "1527039",
    "end": "1532480"
  },
  {
    "text": "which could handle uh serving web pages in two ways the first one would be static pages and",
    "start": "1532480",
    "end": "1538720"
  },
  {
    "text": "the other one would be dynamic function handler so it's pretty similar to cgi",
    "start": "1538720",
    "end": "1545440"
  },
  {
    "text": "in a way you just write a function in c that would handle",
    "start": "1545440",
    "end": "1551919"
  },
  {
    "text": "some page so for example it could handle ota.html for example so one once i'll go to the web server and",
    "start": "1551919",
    "end": "1559120"
  },
  {
    "text": "ask for ota.html it would go and search for the proper function pointer to",
    "start": "1559120",
    "end": "1564480"
  },
  {
    "text": "handle it and that's the function pointer that we want to override um",
    "start": "1564480",
    "end": "1570480"
  },
  {
    "text": "because obviously we can trigger a call to it by asking a certain a specific web page",
    "start": "1570480",
    "end": "1576720"
  },
  {
    "text": "that how it looks like in memory so we get the http request",
    "start": "1576720",
    "end": "1582559"
  },
  {
    "text": "array of structures in here and the marked ones are the pointers there's a bunch of them and we just",
    "start": "1582559",
    "end": "1589200"
  },
  {
    "text": "chose the specific one for the poc",
    "start": "1589200",
    "end": "1594240"
  },
  {
    "text": "um so first sorry",
    "start": "1595440",
    "end": "1601600"
  },
  {
    "text": "let's take a look at the exploit code",
    "start": "1602400",
    "end": "1606480"
  },
  {
    "text": "that's how it looks like it's just a simple python file",
    "start": "1609039",
    "end": "1614320"
  },
  {
    "text": "it's not even that big and it starts off by creating",
    "start": "1615279",
    "end": "1621200"
  },
  {
    "text": "the malformed tile update file so in here you can see that we're",
    "start": "1621200",
    "end": "1626880"
  },
  {
    "text": "actually hooking the built-in tau library from python so",
    "start": "1626880",
    "end": "1633039"
  },
  {
    "text": "we could mess with the internal file size of the internal files",
    "start": "1633039",
    "end": "1638640"
  },
  {
    "text": "so in this code actually every file that we would create will create in only one but every one",
    "start": "1638640",
    "end": "1645440"
  },
  {
    "text": "of those files would be created with a fake file size of almost",
    "start": "1645440",
    "end": "1650720"
  },
  {
    "text": "the maximum for 32 bits then we're gonna upload this file so the",
    "start": "1650720",
    "end": "1657520"
  },
  {
    "text": "heap would be corrupted and then we're gonna create another request",
    "start": "1657520",
    "end": "1663919"
  },
  {
    "text": "with the new pointer that would be allocated on the old pointer and the shell code itself that we",
    "start": "1663919",
    "end": "1669760"
  },
  {
    "text": "uh that we are using and that request would be a simple cheap request with um everything in the user agent field",
    "start": "1669760",
    "end": "1676880"
  },
  {
    "text": "because the system actually allocates a specific buffer for the user user agent",
    "start": "1676880",
    "end": "1682159"
  },
  {
    "text": "and that's the shell code that would be compiled because everything goes on http http",
    "start": "1682159",
    "end": "1688320"
  },
  {
    "text": "request we need to have it in all free and space free so the shell code is xod",
    "start": "1688320",
    "end": "1694480"
  },
  {
    "text": "encoded simple excel cipher just you know simple key uh it",
    "start": "1694480",
    "end": "1700799"
  },
  {
    "text": "doesn't mean to hide anything just to avoid any nulls and spaces uh so we got the xo decoding stub in",
    "start": "1700799",
    "end": "1707919"
  },
  {
    "text": "here that would execute on the device and then we have our payload",
    "start": "1707919",
    "end": "1713360"
  },
  {
    "text": "so the idea in the plc is uh just to override the default",
    "start": "1713360",
    "end": "1718679"
  },
  {
    "text": "html.index.html file so it would refer the user to our own",
    "start": "1718679",
    "end": "1724640"
  },
  {
    "text": "control domain so we start off uh by stopping those the the sl dash",
    "start": "1724640",
    "end": "1731440"
  },
  {
    "text": "just a ti's api so we'll stop in then iphone stack starting it",
    "start": "1731440",
    "end": "1737120"
  },
  {
    "text": "again essentially restarting it to avoid any problems from the previous exploitation effort",
    "start": "1737120",
    "end": "1743760"
  },
  {
    "text": "uh and then we're just opening a file the html index.html file",
    "start": "1743760",
    "end": "1749679"
  },
  {
    "text": "in here we're opening it with write permissions uh and overwrite in it with our own html",
    "start": "1749679",
    "end": "1757360"
  },
  {
    "text": "payload uh which is pretty straightforward uh it would send just",
    "start": "1757360",
    "end": "1764159"
  },
  {
    "text": "for every user uh to our own controlled bed.com domain",
    "start": "1764159",
    "end": "1770640"
  },
  {
    "text": "uh and that's pretty much it we're closing the file and rebooting the system",
    "start": "1770640",
    "end": "1775840"
  },
  {
    "text": "um and that's the the poc script itself so",
    "start": "1775840",
    "end": "1781760"
  },
  {
    "text": "let's take a look at the execution",
    "start": "1781760",
    "end": "1787080"
  },
  {
    "text": "well",
    "start": "1802559",
    "end": "1805559"
  },
  {
    "text": "come on mac",
    "start": "1812960",
    "end": "1815600"
  },
  {
    "text": "okay okay great technical effort",
    "start": "1821440",
    "end": "1827840"
  },
  {
    "text": "okay so in that side you can see our fake poc system",
    "start": "1827919",
    "end": "1833760"
  },
  {
    "text": "it's just a web server that we modified on the device on the device that you saw",
    "start": "1833760",
    "end": "1840320"
  },
  {
    "text": "the actual evaluation board with the sampling chip so that's",
    "start": "1840320",
    "end": "1845760"
  },
  {
    "text": "the web server on the local network and that's the script that we saw earlier",
    "start": "1845760",
    "end": "1852158"
  },
  {
    "text": "targeted to a",
    "start": "1852240",
    "end": "1857360"
  },
  {
    "text": "to the device",
    "start": "1857360",
    "end": "1860158"
  },
  {
    "text": "so let's execute it and let's take a look at what we're",
    "start": "1863279",
    "end": "1868880"
  },
  {
    "text": "seeing in here so first there is the crafting of the ota file with the",
    "start": "1868880",
    "end": "1873919"
  },
  {
    "text": "hooked a tower library it was created uh so that the next chunk",
    "start": "1873919",
    "end": "1879919"
  },
  {
    "text": "in the memory in the heap would be created at that address of the http request",
    "start": "1879919",
    "end": "1885200"
  },
  {
    "text": "a structure that we talked about earlier with the function pointers",
    "start": "1885200",
    "end": "1890158"
  },
  {
    "text": "afterwards um after it was created",
    "start": "1890880",
    "end": "1895919"
  },
  {
    "text": "uh we're going on to compiling the shell code so every every time the script would",
    "start": "1895919",
    "end": "1901519"
  },
  {
    "text": "compile the shellcode from scratch so it's easily modified you can see the actual shellcode email you might notice",
    "start": "1901519",
    "end": "1909440"
  },
  {
    "text": "the string is in there it's before the excel encoding",
    "start": "1909440",
    "end": "1915518"
  },
  {
    "text": "and that's actually a molecule so we know where to start to encode form to encrypt form",
    "start": "1917120",
    "end": "1924000"
  },
  {
    "text": "then we're packing everything tightly into a user-agent string and uploading",
    "start": "1924000",
    "end": "1930720"
  },
  {
    "text": "the tao file which messes with the heap and that's the shell code and everything",
    "start": "1930720",
    "end": "1936480"
  },
  {
    "text": "after uh encryption and decoding and preparing the fake addresses and stuff",
    "start": "1936480",
    "end": "1941760"
  },
  {
    "text": "um that's where the payload starts and before that we get the address and some other things that we have to to have",
    "start": "1941760",
    "end": "1949519"
  },
  {
    "text": "uh so let's refresh our web page uh and here you can see that we are",
    "start": "1949519",
    "end": "1954720"
  },
  {
    "text": "actually we've already failed directly to bed.com domain which is again our own maliciously controlled domain",
    "start": "1954720",
    "end": "1962399"
  },
  {
    "text": "it says that someone that you have been hacked but you don't need to worry about it there's no money required or anything",
    "start": "1962399",
    "end": "1969200"
  },
  {
    "text": "uh and you can you probably can't see the the writing in the blue but there is the",
    "start": "1969200",
    "end": "1975840"
  },
  {
    "text": "blog post in there don't worry about it it will be back in the the link would be back in a second",
    "start": "1975840",
    "end": "1983519"
  },
  {
    "text": "okay so let's go back to the slides",
    "start": "1984960",
    "end": "1990518"
  },
  {
    "text": "and talk about some mitigation techniques success great success",
    "start": "1990880",
    "end": "1996640"
  },
  {
    "text": "thank you um okay so when was that",
    "start": "1998720",
    "end": "2003760"
  },
  {
    "text": "showed you that he broke the device and but it's not finished here because we",
    "start": "2003760",
    "end": "2009440"
  },
  {
    "text": "want to show you how you can fix the your systems and",
    "start": "2009440",
    "end": "2014799"
  },
  {
    "text": "so oh fine some other oh fine some others one of our systems",
    "start": "2014799",
    "end": "2020159"
  },
  {
    "text": "and so the first thing is to understand your functions and this just a small list",
    "start": "2020159",
    "end": "2028720"
  },
  {
    "text": "of the most common name for the allocation function that we found there are a lot of names and every",
    "start": "2028720",
    "end": "2036159"
  },
  {
    "text": "vendor uses own maybe they do maybe they just use them alloca",
    "start": "2036159",
    "end": "2041279"
  },
  {
    "text": "and dialogue and this list but",
    "start": "2041279",
    "end": "2047039"
  },
  {
    "text": "you need to check the application that you need to understand what's the name of the",
    "start": "2047039",
    "end": "2052560"
  },
  {
    "text": "functions in your applications so how to start",
    "start": "2052560",
    "end": "2058560"
  },
  {
    "text": "start by checking out the advisory that you will get the link in the next few slides",
    "start": "2058560",
    "end": "2065200"
  },
  {
    "text": "and second just reverse engineer the binaries it's always the best approach",
    "start": "2065200",
    "end": "2070240"
  },
  {
    "text": "in life not only in this scenario always we get a project we reversed it",
    "start": "2070240",
    "end": "2077200"
  },
  {
    "text": "and if you don't want to reverse and you have the source code check it if it's",
    "start": "2077200",
    "end": "2083118"
  },
  {
    "text": "public if you have it for the weak ones for the weak ones",
    "start": "2083119",
    "end": "2089358"
  },
  {
    "text": "you can review the code most of the research that we done was from code from github",
    "start": "2089359",
    "end": "2096079"
  },
  {
    "text": "and so if you have the code fantastic and and to do some kind of little unit",
    "start": "2096079",
    "end": "2103440"
  },
  {
    "text": "test try to allocate the big chunks of data try to allocate a small size of data",
    "start": "2103440",
    "end": "2109520"
  },
  {
    "text": "see what happened if there is a hip overflow if not if you got an error if not i don't know what",
    "start": "2109520",
    "end": "2116640"
  },
  {
    "text": "you can get but if it's good it's good and if you check the source code it's",
    "start": "2116640",
    "end": "2122800"
  },
  {
    "text": "also really recommend to check also the macros if you reverse you don't have the",
    "start": "2122800",
    "end": "2128000"
  },
  {
    "text": "macros problem a problem but if you check the source code check the macros",
    "start": "2128000",
    "end": "2133200"
  },
  {
    "text": "we found a lot of macros that had a problem with alignment mostly",
    "start": "2133200",
    "end": "2138400"
  },
  {
    "text": "and inside the macros there was the integer overflow problem",
    "start": "2138400",
    "end": "2145350"
  },
  {
    "text": "[Music] so this is couple of ellipses that we found that are good",
    "start": "2145350",
    "end": "2151920"
  },
  {
    "text": "ellipses that mitigate this technique in a good way",
    "start": "2151920",
    "end": "2157520"
  },
  {
    "text": "so gellipsi i believe that most of you know it and check the size the bytes",
    "start": "2157520",
    "end": "2165520"
  },
  {
    "text": "and check if the size is it's logical correct they just divide it",
    "start": "2165520",
    "end": "2170960"
  },
  {
    "text": "after it to check if you get the n from previous if you got it great if not not so good",
    "start": "2170960",
    "end": "2178400"
  },
  {
    "text": "and the next example is the embedded art history",
    "start": "2178400",
    "end": "2183440"
  },
  {
    "text": "and they do some kind of check",
    "start": "2183440",
    "end": "2188560"
  },
  {
    "text": "they decided that the amount of overflow is the biggest size that will someone",
    "start": "2188560",
    "end": "2193680"
  },
  {
    "text": "will need embedded or this three use you do ellipsis for iot mostly so in iot you",
    "start": "2193680",
    "end": "2202880"
  },
  {
    "text": "have little ram so you probably won't need malloc two of big sizes",
    "start": "2202880",
    "end": "2208960"
  },
  {
    "text": "and you do another checks there another good",
    "start": "2208960",
    "end": "2214400"
  },
  {
    "text": "thing to do and the last one is muscle there's another catalog function",
    "start": "2214400",
    "end": "2220560"
  },
  {
    "text": "and they check that the end size is not zero and",
    "start": "2220560",
    "end": "2226240"
  },
  {
    "text": "they check if it's logical correct again if you can get",
    "start": "2226240",
    "end": "2231680"
  },
  {
    "text": "if it's in the right size",
    "start": "2231680",
    "end": "2236240"
  },
  {
    "text": "okay so um some final words if you want to learn more about it",
    "start": "2237200",
    "end": "2243119"
  },
  {
    "text": "please go out and check out that the advisory on ics earth's website sisa's website uh all of the technical details",
    "start": "2243119",
    "end": "2250400"
  },
  {
    "text": "are in there uh there's the full list of affected devices or affected products sorry",
    "start": "2250400",
    "end": "2256640"
  },
  {
    "text": "there's approximately 30 affected products in there so that's a lot",
    "start": "2256640",
    "end": "2262240"
  },
  {
    "text": "and almost twice as much as cves for each of the functions",
    "start": "2262240",
    "end": "2268000"
  },
  {
    "text": "you can find it in this qr code you can also go and check out the our blog post in mslc's blog",
    "start": "2268720",
    "end": "2275440"
  },
  {
    "text": "um just search for all just out for the id in your favorite search engine you can't",
    "start": "2275440",
    "end": "2282320"
  },
  {
    "text": "the qr code is not a virus we swear and also i want to thank",
    "start": "2282320",
    "end": "2289359"
  },
  {
    "text": "cesar and mslc which did amazing job with the disclosure so 30 vendors is not",
    "start": "2289359",
    "end": "2295680"
  },
  {
    "text": "easy and they really put effort on it and for months they went after each and every one",
    "start": "2295680",
    "end": "2301440"
  },
  {
    "text": "of the vendors and made sure that everyone's everyone is aware and that they know about it",
    "start": "2301440",
    "end": "2307520"
  },
  {
    "text": "that they will fix it uh and really amazing job lots of work",
    "start": "2307520",
    "end": "2312960"
  },
  {
    "text": "and i really want to thank them and i also want to thank you for listening",
    "start": "2312960",
    "end": "2318000"
  },
  {
    "text": "and i hope that you enjoyed it and you find it useful",
    "start": "2318000",
    "end": "2323920"
  },
  {
    "text": "and that's it so thank you and now we have a very very short window",
    "start": "2325280",
    "end": "2332800"
  },
  {
    "text": "for q a but we'll be in the rap room on the other side of the hall so",
    "start": "2332800",
    "end": "2338640"
  },
  {
    "text": "please if you have any questions you're more more than welcome to come visit and ask them",
    "start": "2338640",
    "end": "2345680"
  },
  {
    "text": "thank you [Applause]",
    "start": "2345680",
    "end": "2352500"
  },
  {
    "text": "[Music]",
    "start": "2352500",
    "end": "2361409"
  },
  {
    "text": "you",
    "start": "2361760",
    "end": "2363839"
  }
]