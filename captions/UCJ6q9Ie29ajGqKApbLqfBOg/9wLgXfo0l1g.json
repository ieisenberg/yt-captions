[
  {
    "text": "good morning we're about a minute early here but we can get started and see who trickles in my name is Eric Evan chick",
    "start": "0",
    "end": "6779"
  },
  {
    "text": "today I'll be giving a talk called rust zone writing trust applications and rust will be going through sort of how trust",
    "start": "6779",
    "end": "12929"
  },
  {
    "text": "sewn works on arm and how it gets used in the real world where it breaks down and then look at sort of a proof of",
    "start": "12929",
    "end": "19170"
  },
  {
    "text": "concept of how we can use the rust programming language to write trust applications for trusts in so a little",
    "start": "19170",
    "end": "26099"
  },
  {
    "text": "bit about me I mean my real job is I'm a principal research consultant at at Redis partners we do penetration testing",
    "start": "26099",
    "end": "32758"
  },
  {
    "text": "and other security services risk advisory things like that I'm based up",
    "start": "32759",
    "end": "38670"
  },
  {
    "text": "in Canada in Toronto Toronto area we have folks in the US and Canada and we're just sort of all over remote my",
    "start": "38670",
    "end": "46559"
  },
  {
    "text": "boss likes to say we're post geography so you know we just have folks wherever and I also build some random open-source",
    "start": "46559",
    "end": "52620"
  },
  {
    "text": "hardware with this company I have Kelton link layer labs we you know just build things and put them on the Internet and",
    "start": "52620",
    "end": "58820"
  },
  {
    "text": "some CANbus tools actually a hardware implant if you saw the hardware implant",
    "start": "58820",
    "end": "63840"
  },
  {
    "text": "talk and some things like that but today we're talking about not hardware really we're talking about well arm and little",
    "start": "63840",
    "end": "72240"
  },
  {
    "text": "outline of what we're gonna do we're gonna cover so we'll start off just by talking about trust execution",
    "start": "72240",
    "end": "77400"
  },
  {
    "text": "environments in general and what they are whether you used some examples of them and then I'll go through trust zone",
    "start": "77400",
    "end": "83159"
  },
  {
    "text": "and you know trust owns a word that gets thrown around a lot but will show kind of how it actually works and how it gets",
    "start": "83159",
    "end": "89939"
  },
  {
    "text": "used in the real world then talk about some of the issues with the code that's running in these things introduce trust",
    "start": "89939",
    "end": "96479"
  },
  {
    "text": "a little bit click but rust and then we'll put it all together talk about how you can you know use them to you know",
    "start": "96479",
    "end": "102990"
  },
  {
    "text": "make a trust application in rust demo a pretty basic one that we can show sort of on a slide and take any questions you",
    "start": "102990",
    "end": "110250"
  },
  {
    "text": "folks have so starting with just trusted execution environments a topic that's",
    "start": "110250",
    "end": "115979"
  },
  {
    "text": "actually made the news quite a bit due to some of the Intel and AMD problems with trusted execution environments but",
    "start": "115979",
    "end": "122100"
  },
  {
    "text": "what are they so the general definition would be an isolated environment within a processor where you're going to do",
    "start": "122100",
    "end": "128220"
  },
  {
    "text": "some sort of secure operations so this is a place where you're going to get some",
    "start": "128220",
    "end": "133240"
  },
  {
    "text": "segmentation of your code and your data so that you can do things and not be",
    "start": "133240",
    "end": "138550"
  },
  {
    "text": "observed by other parts of the system in some cases it will also segment hardware",
    "start": "138550",
    "end": "143590"
  },
  {
    "text": "access so you'll be able to access certain maybe i/o pins pieces of memory",
    "start": "143590",
    "end": "148930"
  },
  {
    "text": "whatever it is that can't be accessed otherwise unless you're in this trusted",
    "start": "148930",
    "end": "154210"
  },
  {
    "text": "execution world so it allows you to provide that separation and draw trust",
    "start": "154210",
    "end": "159610"
  },
  {
    "text": "boundaries around your application and this is done with a combination of some",
    "start": "159610",
    "end": "164980"
  },
  {
    "text": "hardware features that are actually in the chips that your stuffs running on and a bunch of software that makes it",
    "start": "164980",
    "end": "171160"
  },
  {
    "text": "all work so when you look at today what's out there what people are using",
    "start": "171160",
    "end": "176650"
  },
  {
    "text": "some examples on the hardware side AMD has their PSP platform security",
    "start": "176650",
    "end": "182470"
  },
  {
    "text": "processor this made the news a lot because it has a lot of issues that have",
    "start": "182470",
    "end": "187630"
  },
  {
    "text": "come up in the last year one interesting issue with some of the stress and stuff is when it breaks it's really bad",
    "start": "187630",
    "end": "194530"
  },
  {
    "text": "because all of the high security things that you really care about are living in this world and when they fall apart it's",
    "start": "194530",
    "end": "201220"
  },
  {
    "text": "really critical in the case of PSP and some of the Intel staff it provides very",
    "start": "201220",
    "end": "207430"
  },
  {
    "text": "privileged access to the processor so if you manage to get code execution inside of there you're bypassing a lot of the",
    "start": "207430",
    "end": "213370"
  },
  {
    "text": "security features of the chip intel has their txt trusted execution technology",
    "start": "213370",
    "end": "218620"
  },
  {
    "text": "and also software guard extensions that they use you might have seen some of that stuff marketed an arm of course has",
    "start": "218620",
    "end": "225070"
  },
  {
    "text": "trustzone which is one of the more well-known well more talked about systems and the reason for that is it's",
    "start": "225070",
    "end": "231790"
  },
  {
    "text": "very common if you have an Android phone that's recently modern it is running trustzone and it is running a trust zone",
    "start": "231790",
    "end": "237880"
  },
  {
    "text": "trust --let which is an application and trust zone every time you log in you enter your pin code it's going off to",
    "start": "237880",
    "end": "244420"
  },
  {
    "text": "the trusted land doing some verification coming back on the software side there's a few different things depending on what",
    "start": "244420",
    "end": "251290"
  },
  {
    "text": "you're using so AMD and Intel have their own magic software that runs on there it's all proprietary they won't show it",
    "start": "251290",
    "end": "256750"
  },
  {
    "text": "to you and that's also been a bit of an issue but on the on the arm side we have",
    "start": "256750",
    "end": "262419"
  },
  {
    "text": "a range of trust operating systems Tristana k-- can is one of the ones used by Samsung now",
    "start": "262419",
    "end": "270240"
  },
  {
    "text": "Qualcomm has QC this is used on most of the phones not all the phones that use",
    "start": "270240",
    "end": "277300"
  },
  {
    "text": "Qualcomm chipsets Google also now it's not on this slide but Google has their own open-source trusted Bo s called",
    "start": "277300",
    "end": "284470"
  },
  {
    "text": "trusty and that's used also on some Qualcomm chipsets it's used in the pixel three and then you have opti which is",
    "start": "284470",
    "end": "291820"
  },
  {
    "text": "the one we'll talk about the most today mostly because love this stuff is not open source it's not its proprietary you",
    "start": "291820",
    "end": "298570"
  },
  {
    "text": "can't they won't show you what's inside opti is an open-source implementation of a trusted operating system so you can",
    "start": "298570",
    "end": "304690"
  },
  {
    "text": "you know actually one you can build it yourself and two you can talk about it at a conference cuz you didn't have to sign a",
    "start": "304690",
    "end": "310930"
  },
  {
    "text": "bunch of NDA is to get access to it unlike TC so that's just the reality of some of these things while opti isn't",
    "start": "310930",
    "end": "317680"
  },
  {
    "text": "actually that common in practice you don't see it in too many devices you don't see it in mobile phones it is",
    "start": "317680",
    "end": "324910"
  },
  {
    "text": "something that you can talk about if you want access to the source for something like QC you're definitely getting into a",
    "start": "324910",
    "end": "331240"
  },
  {
    "text": "lot of MDS and qualcomm has a lot more lawyers than I do so the use cases of",
    "start": "331240",
    "end": "338050"
  },
  {
    "text": "this stuff authentication is when I talked about Android has the gatekeeper functionality and this is actually shown",
    "start": "338050",
    "end": "344410"
  },
  {
    "text": "on the side here on the right side so you have this lock setting service it's",
    "start": "344410",
    "end": "349660"
  },
  {
    "text": "gonna talk through binder which is the the user land eyepiece inter-process communications that's used by Android",
    "start": "349660",
    "end": "357220"
  },
  {
    "text": "and it talked to the gatekeeper service which is a little service sort of running there that ends up talking to",
    "start": "357220",
    "end": "362530"
  },
  {
    "text": "gatekeeper D there's a lot of layers to this sandwich it goes down through gatekeeper D talk to the gatekeeper",
    "start": "362530",
    "end": "368080"
  },
  {
    "text": "hardware abstraction layer which talks to finally the gatekeeper hardware attraction module and then that has a",
    "start": "368080",
    "end": "375310"
  },
  {
    "text": "bridge that goes into the trusted execution environment where there's a gatekeeper trusted application running",
    "start": "375310",
    "end": "381190"
  },
  {
    "text": "so you enter your PIN number it makes it through all this stuff eventually gets sent over to the trusted world where the",
    "start": "381190",
    "end": "388480"
  },
  {
    "text": "valid number is stored and the comparison happens over there and if it's correct it will send back your good",
    "start": "388480",
    "end": "395200"
  },
  {
    "text": "this way if someone compromises your system they can't get that type of data because it's located",
    "start": "395200",
    "end": "400860"
  },
  {
    "text": "a trusted environment that's one example financial applications make some use of",
    "start": "400860",
    "end": "405990"
  },
  {
    "text": "this and some systems will expose the ability to access that one example of",
    "start": "405990",
    "end": "411210"
  },
  {
    "text": "this that gets used is in the Bitcoin wallets which vary wildly in their",
    "start": "411210",
    "end": "418050"
  },
  {
    "text": "implementations but some of those will use trustzone to actually store the key material so",
    "start": "418050",
    "end": "423930"
  },
  {
    "text": "you'll have a Bitcoin wallet that's got a USB or it's got a screen on it whatever type it is and it will make",
    "start": "423930",
    "end": "431490"
  },
  {
    "text": "signing requests into the trusted world where the key material is stored and it will get out a signed transaction and so",
    "start": "431490",
    "end": "437639"
  },
  {
    "text": "that way that actual you know private data of your private key for your wallet",
    "start": "437639",
    "end": "443099"
  },
  {
    "text": "is always sitting in this trusted environment it never leaves the trusted environment and it's just being used to",
    "start": "443099",
    "end": "448469"
  },
  {
    "text": "do signing operations secure boots another place this comes in because you can have this separate world that's",
    "start": "448469",
    "end": "455009"
  },
  {
    "text": "doing validation of things and even if like your kernel is malicious it can actually validate that separately and in",
    "start": "455009",
    "end": "463740"
  },
  {
    "text": "some cases do stuff like reset the system immediately if it doesn't like what's happening it's also used for DRM",
    "start": "463740",
    "end": "470310"
  },
  {
    "text": "which is an interesting application Widevine is one of the main applications for one of the ones you'll see on",
    "start": "470310",
    "end": "476490"
  },
  {
    "text": "android it's a product for android we'll talk about that in detail a bit later so",
    "start": "476490",
    "end": "481560"
  },
  {
    "text": "the main thing here is you're getting this extra layer protection from the host OS and the normal user land so you",
    "start": "481560",
    "end": "487860"
  },
  {
    "text": "have user land you have the kernel space that's all separate it's talking over a bridge to this other trusted world and",
    "start": "487860",
    "end": "493680"
  },
  {
    "text": "it is sometimes used to protect the system from the user which is a nice way of saying stopping you from doing things",
    "start": "493680",
    "end": "499919"
  },
  {
    "text": "that you might want to do to your device for example there are mobile carriers",
    "start": "499919",
    "end": "505229"
  },
  {
    "text": "that have applications that run in trust zone that are used to do SIM card locking to prevent you from unlocking",
    "start": "505229",
    "end": "510900"
  },
  {
    "text": "the phone and using any any SIM card with it at least in the u.s. might be different here but that is one",
    "start": "510900",
    "end": "518070"
  },
  {
    "text": "application where are you as a user might not like this whole trust zone thing but let's talk about trust owned",
    "start": "518070",
    "end": "524130"
  },
  {
    "text": "how it works what it actually is in practice this is sort of the the arm",
    "start": "524130",
    "end": "529310"
  },
  {
    "text": "marketing speak of it the trusted and non trusted world and it's the arm trust and execution",
    "start": "529310",
    "end": "536730"
  },
  {
    "text": "environment and has the normal they cult the normal world and the secure world which is a bit of a misnomer but the",
    "start": "536730",
    "end": "544980"
  },
  {
    "text": "normal world is going to run typically you're rich OS so your Android your Linux York UNIX whatever normal OS your",
    "start": "544980",
    "end": "552240"
  },
  {
    "text": "normal applications run on the secure world is going to be some limited operating system like opti in this case",
    "start": "552240",
    "end": "559160"
  },
  {
    "text": "that is only going to be able to do certain things and we'll also have trusted applications which are things",
    "start": "559160",
    "end": "565710"
  },
  {
    "text": "like the gatekeeper daemon other examples on android Widevine things like that the processor has the ability to",
    "start": "565710",
    "end": "572880"
  },
  {
    "text": "switch between these two worlds and it can also use this to restrict access to",
    "start": "572880",
    "end": "578280"
  },
  {
    "text": "different peripherals so really a useful example this is taken from the G node",
    "start": "578280",
    "end": "583910"
  },
  {
    "text": "documentation but this sort of shows how the flipping works and what actually happens so you got your normal world on",
    "start": "583910",
    "end": "590490"
  },
  {
    "text": "the left and the big thing you notice here is that there's a secure configuration register with the NS bit I",
    "start": "590490",
    "end": "597840"
  },
  {
    "text": "kid you not NS stands for not secure so when not secure is one your system isn't secure",
    "start": "597840",
    "end": "605270"
  },
  {
    "text": "you're you're in the normal world and you're operating you know on the peripherals as they're configured for",
    "start": "605270",
    "end": "611640"
  },
  {
    "text": "the normal world so in this case we have our CPU core we have some instruction cache and data cache and you see red",
    "start": "611640",
    "end": "618210"
  },
  {
    "text": "bands of regions that are enabled in the normal world we have a certain amount of RAM that's enabled we have some l2 cache",
    "start": "618210",
    "end": "624210"
  },
  {
    "text": "that's enabled and we have a set of peripherals that are enabled so we have Ethernet USB MMC all the ones that",
    "start": "624210",
    "end": "630090"
  },
  {
    "text": "aren't grayed out so we're going to be living in this world most the time until the processor decides to unset the not",
    "start": "630090",
    "end": "637500"
  },
  {
    "text": "secure bit which brings you over to secure land and what ends up happening here is we still have a CPU that is",
    "start": "637500",
    "end": "644730"
  },
  {
    "text": "still running but we have different instruction cache and data cache we have a different Bank of RAM we have a",
    "start": "644730",
    "end": "649800"
  },
  {
    "text": "different Bank of l2 cache and really critically we have different peripherals so things like the GPIO pins can only be",
    "start": "649800",
    "end": "659310"
  },
  {
    "text": "controlled from that secure world so let's say you have I don't know some industrial robot that's got some",
    "start": "659310",
    "end": "666300"
  },
  {
    "text": "actuator that's really day Driss and it's controlled by a single GPIO pin hopefully it's not but it's",
    "start": "666300",
    "end": "671880"
  },
  {
    "text": "controlled by this one pin and you only want that to be able to be done in certain conditions you could have it so",
    "start": "671880",
    "end": "677399"
  },
  {
    "text": "it's only possible to set that bit whenever you're in the secure world also critically there's a security controller",
    "start": "677399",
    "end": "683670"
  },
  {
    "text": "at the very bottom and that's only enabled in the secure world typically those security controllers will have",
    "start": "683670",
    "end": "688890"
  },
  {
    "text": "things like crypto acceleration functions sometimes they'll have key storage modern ones all will have key",
    "start": "688890",
    "end": "695700"
  },
  {
    "text": "storage and on-board key generation so the ability to do things like signing of",
    "start": "695700",
    "end": "701870"
  },
  {
    "text": "arbitrary data will be available to you only in the secure world so that if",
    "start": "701870",
    "end": "707100"
  },
  {
    "text": "somebody gets root on your Linux system they still can't actually make requests to it so this sounds really nice we have",
    "start": "707100",
    "end": "714420"
  },
  {
    "text": "this this nice segmentation we have these two worlds they're separate but kind of equal a lot of this will depend",
    "start": "714420",
    "end": "720750"
  },
  {
    "text": "on how you configure the processor and a really important note is if you screw up configuring the secure world in the",
    "start": "720750",
    "end": "727920"
  },
  {
    "text": "normal world you can end up on certain processors just completely negating the whole point of trust own if you want on",
    "start": "727920",
    "end": "734640"
  },
  {
    "text": "some processors you can actually have memory that's shared between the two and you can have as much memory as you want",
    "start": "734640",
    "end": "739709"
  },
  {
    "text": "shared between the two so if you can figure it wrong you may end up just totally defeating the purpose of it and",
    "start": "739709",
    "end": "745410"
  },
  {
    "text": "that has come up in some applications but it's just been configured incorrectly and it just totally breaks",
    "start": "745410",
    "end": "751709"
  },
  {
    "text": "the whole purpose so on that note what are some problems that we run into with these trucks at execution environments",
    "start": "751709",
    "end": "757680"
  },
  {
    "text": "and well the first one is really the sort of theme for this talk which is",
    "start": "757680",
    "end": "763550"
  },
  {
    "text": "there's a lot of protections that aren't there so address space layout",
    "start": "763550",
    "end": "768899"
  },
  {
    "text": "randomization is starting to become more common but is still quite rare there's",
    "start": "768899",
    "end": "774690"
  },
  {
    "text": "also this problem that these limited os's because they want more memory for the main system they have a very limited",
    "start": "774690",
    "end": "781589"
  },
  {
    "text": "memory range so there are attacks on some of these these trust applications where even if there is layout",
    "start": "781589",
    "end": "788670"
  },
  {
    "text": "randomization there's so little memory that you can just try it a whole bunch and eventually it will land where you want it to that's",
    "start": "788670",
    "end": "796110"
  },
  {
    "text": "happened for a few different we seemed a few times so there's no stack Canaries",
    "start": "796110",
    "end": "801390"
  },
  {
    "text": "card pages on a lot of these which would be nice some of the more modern Oasis",
    "start": "801390",
    "end": "806430"
  },
  {
    "text": "are starting to actually add that but also some people don't compile it with those flags enabled there the secure",
    "start": "806430",
    "end": "813360"
  },
  {
    "text": "world will actually in most cases have fewer protections than the normal world which is weird because this is your you",
    "start": "813360",
    "end": "820260"
  },
  {
    "text": "know secure really lockdown system why doesn't it have a SLR when your Android",
    "start": "820260",
    "end": "825630"
  },
  {
    "text": "system definitely does why doesn't have secondary guard pages all those types of things wouldn't you know we've been",
    "start": "825630",
    "end": "830850"
  },
  {
    "text": "using those for years and in the normal world but the secure oil just really hasn't caught up and one of the biggest",
    "start": "830850",
    "end": "838260"
  },
  {
    "text": "things is we don't have high level language support so there's there's no java you're not writing this stuff in",
    "start": "838260",
    "end": "843300"
  },
  {
    "text": "you know Python or anything like that you're writing it all in C or arm assembly and that brings up all the",
    "start": "843300",
    "end": "852270"
  },
  {
    "text": "usual problems of writing C yeah so",
    "start": "852270",
    "end": "857670"
  },
  {
    "text": "writing good C is really hard maybe impossible if you've given a certain",
    "start": "857670",
    "end": "862920"
  },
  {
    "text": "number of lines of code you will probably not be able to write secure C it's is unfortunate so you have all the",
    "start": "862920",
    "end": "869580"
  },
  {
    "text": "typical stuff that we've been seeing for years there's the common memory problems the buffer overflows you have to free",
    "start": "869580",
    "end": "874950"
  },
  {
    "text": "all that sort of sort of stuff you have the typing issues so there's lots of places where when you interact with",
    "start": "874950",
    "end": "880980"
  },
  {
    "text": "these secure os's you're providing void pointers to things and length values and those are really",
    "start": "880980",
    "end": "887130"
  },
  {
    "text": "easy to mess up the compiler of course gives you very limited help if you're",
    "start": "887130",
    "end": "892590"
  },
  {
    "text": "smart you'll turn on things like W all and get warnings errors and things like that but people don't necessarily do",
    "start": "892590",
    "end": "900300"
  },
  {
    "text": "that and when developers run into these types of problems and their stuff doesn't compile it's sometimes if you",
    "start": "900300",
    "end": "906630"
  },
  {
    "text": "don't stop them it's sometimes more tempting to disable the error than it is to actually fix it and C will happily",
    "start": "906630",
    "end": "913260"
  },
  {
    "text": "let you disabled whatever errors you would like and programmers do silly things this is no surprise to anyone in",
    "start": "913260",
    "end": "919380"
  },
  {
    "text": "security they do their mem copies and their store copies and all those other functions that we're not supposed to use",
    "start": "919380",
    "end": "924780"
  },
  {
    "text": "anymore this is a nice poster from one",
    "start": "924780",
    "end": "930600"
  },
  {
    "text": "folks at projects here on Natalie basically she took this she fellow Canadian took this campaign",
    "start": "930600",
    "end": "937910"
  },
  {
    "text": "that Canada had a while ago about you know being safe about different things and made them about being safe about",
    "start": "937910",
    "end": "944870"
  },
  {
    "text": "calling different functions this one is all my friends are using STR copy but I'm not because I understand how",
    "start": "944870",
    "end": "950690"
  },
  {
    "text": "dangerous it is they say I could protect myself but I know that only avoiding stare copy is 100% effective and that's",
    "start": "950690",
    "end": "957800"
  },
  {
    "text": "true if you're calling this type of stuff and devout you have a bunch of developers eventually someone's probably",
    "start": "957800",
    "end": "963110"
  },
  {
    "text": "going to end up with a buffer overflow it's it's just the world we live in when",
    "start": "963110",
    "end": "968240"
  },
  {
    "text": "you come to developing see so let's talk about examples of how people have screwed it up wide vine is a DRM",
    "start": "968240",
    "end": "975260"
  },
  {
    "text": "application that probably a lot of the phones in this room have again if you have an Android device it's likely",
    "start": "975260",
    "end": "980720"
  },
  {
    "text": "running it and it's used so protected content can be delivered and decrypted",
    "start": "980720",
    "end": "986480"
  },
  {
    "text": "by this application the keys live inside a trust zone so you can't get the decryption keys for the content kind of",
    "start": "986480",
    "end": "993350"
  },
  {
    "text": "overview explanation but that's more or less what it does so there was an undocumented command actually a whole",
    "start": "993350",
    "end": "999680"
  },
  {
    "text": "set of undocumented diagnostic commands that Widevine had somebody grabbed the",
    "start": "999680",
    "end": "1005200"
  },
  {
    "text": "binary for this which is actually quite easy typically these are not encrypted applications and they're actually",
    "start": "1005200",
    "end": "1011410"
  },
  {
    "text": "available from the file system from the normal world so you can if you have root",
    "start": "1011410",
    "end": "1016839"
  },
  {
    "text": "on your phone you can go into the right block device and just dump it and you'll end up with all the trusted applications",
    "start": "1016839",
    "end": "1023069"
  },
  {
    "text": "so they went through this they found some command dispatcher and found out that there was a command that ended up",
    "start": "1023069",
    "end": "1031928"
  },
  {
    "text": "you know it was being used for Diagnostics when being used anymore but it ended up having a buffer overflow inside of it you could provide it with",
    "start": "1031929",
    "end": "1038230"
  },
  {
    "text": "something way out of range and it would happily end up smashing a buffer and the end result was that these folks got code",
    "start": "1038230",
    "end": "1045520"
  },
  {
    "text": "execution that's the bits please blog which is tons of great information on breaking trusts and but they got",
    "start": "1045520",
    "end": "1051700"
  },
  {
    "text": "arbitrary code execution in the secure world this is highly problematic because all those protections against different",
    "start": "1051700",
    "end": "1058120"
  },
  {
    "text": "types of peripherals in memory they kind of go away once you have code execution in that world there are still some",
    "start": "1058120",
    "end": "1064960"
  },
  {
    "text": "protections that the OS has but you know you you kind of have gotten through the gates so in this case they are able to",
    "start": "1064960",
    "end": "1072639"
  },
  {
    "text": "run code in there and undermine the whole purpose of trust zone because of a DRM application that you probably didn't",
    "start": "1072639",
    "end": "1078700"
  },
  {
    "text": "want on your phone anyway so that's that's life there's more info of this on that bits please blog if you're",
    "start": "1078700",
    "end": "1084849"
  },
  {
    "text": "interested in the sort of stuff I highly recommend that blog in general they have a ton of great examples of breaking",
    "start": "1084849",
    "end": "1090609"
  },
  {
    "text": "different trusts and stuff another example that came up another real-world one was Samsung yes they had this one",
    "start": "1090609",
    "end": "1100419"
  },
  {
    "text": "time password generation thing that was part of Samsung's Knox security package",
    "start": "1100419",
    "end": "1106149"
  },
  {
    "text": "and this was implemented the whole Knox thing was implemented as a I believe",
    "start": "1106149",
    "end": "1113559"
  },
  {
    "text": "actually a couple different trusted applications running in trust zone and then services on the Android side to call into them so they had one of these",
    "start": "1113559",
    "end": "1121570"
  },
  {
    "text": "I generated one-time passwords and what was very interesting about this one is the Widevine one to actually pull that",
    "start": "1121570",
    "end": "1127690"
  },
  {
    "text": "off you would need to have root on the phone but because Samsung wanted to provide access for any user to be able",
    "start": "1127690",
    "end": "1133960"
  },
  {
    "text": "to generate these one-time passwords any user was able to make this call so now",
    "start": "1133960",
    "end": "1139570"
  },
  {
    "text": "you go from meeting privileges to basically just needing to be on the phone so any application could call over",
    "start": "1139570",
    "end": "1145450"
  },
  {
    "text": "binder the service and then make the request so that's much worse and what",
    "start": "1145450",
    "end": "1151059"
  },
  {
    "text": "ended up happening again another silly buffer overflow thing he could provide it a value for the one-time password",
    "start": "1151059",
    "end": "1158559"
  },
  {
    "text": "that was too long and it would end up causing a buffer overflow and you can go from there to getting code execution",
    "start": "1158559",
    "end": "1164289"
  },
  {
    "text": "interesting so these things happen there's these are two real-world examples that are public there's",
    "start": "1164289",
    "end": "1170529"
  },
  {
    "text": "probably many I know there arm and a few more that are not and I'm sure there's many many that I don't know about it's",
    "start": "1170529",
    "end": "1176080"
  },
  {
    "text": "it's a real problem when you're writing C on your most secure platform so why do",
    "start": "1176080",
    "end": "1182109"
  },
  {
    "text": "we want to talk about rust well yeah if people are screwing up writing this code maybe we should look at languages that",
    "start": "1182109",
    "end": "1188409"
  },
  {
    "text": "give us a little bit more protection so has anyone here written any rust in their life a few folks it's yeah it's a",
    "start": "1188409",
    "end": "1196119"
  },
  {
    "text": "bit new spin development since 2010 so it's new for a programming which I mean I'm always amazed like how",
    "start": "1196119",
    "end": "1203990"
  },
  {
    "text": "old C is right like that goes back to the PDP well pdp-11",
    "start": "1203990",
    "end": "1211400"
  },
  {
    "text": "before that and i mean the standard that most people are still using is either 89",
    "start": "1211400",
    "end": "1217010"
  },
  {
    "text": "or 99 a lot of stuff is still 89 on embedded systems so 2010 is like you",
    "start": "1217010",
    "end": "1224150"
  },
  {
    "text": "know yesterday in terms of the age of language systems languages and one of the big things about rust as it is a",
    "start": "1224150",
    "end": "1230210"
  },
  {
    "text": "systems programming language is designed for doing low-level stuff and this is quite nice for us because it's going to",
    "start": "1230210",
    "end": "1236870"
  },
  {
    "text": "not need access to a whole bunch of things that most programming languages will want in order to run so for example",
    "start": "1236870",
    "end": "1244430"
  },
  {
    "text": "reason it works with embedded it does not need Lib C which is a big limitation when you're dealing with you know most",
    "start": "1244430",
    "end": "1251060"
  },
  {
    "text": "programming languages it compiles down to actual system byte code so we don't need to run a VM we don't need to run an",
    "start": "1251060",
    "end": "1256880"
  },
  {
    "text": "interpreter or anything like that it has no garbage collection or runtime this is one issue is something like go is you",
    "start": "1256880",
    "end": "1264740"
  },
  {
    "text": "know go will compile down to a binary but it still has this runtime and the runtime depends on a lot of OS features",
    "start": "1264740",
    "end": "1270170"
  },
  {
    "text": "so you can't really run it without the operating system and then lastly it's going to allow raw memory access and",
    "start": "1270170",
    "end": "1276980"
  },
  {
    "text": "this is something that we want to avoid as much as possible but we need the",
    "start": "1276980",
    "end": "1282860"
  },
  {
    "text": "reason being if you're dealing with these embedded systems these these micro processors you know you want to set a",
    "start": "1282860",
    "end": "1288320"
  },
  {
    "text": "GPIO pin to one the way you do it is there's some memory address that you write to and you write a bit to the",
    "start": "1288320",
    "end": "1294710"
  },
  {
    "text": "right bit field and that sets the pin high that's just how it works so you",
    "start": "1294710",
    "end": "1300200"
  },
  {
    "text": "can't really abstract that away when you're dealing with this stuff at a very low level it's just just not really",
    "start": "1300200",
    "end": "1305780"
  },
  {
    "text": "possible so you do need access to the raw memory just to set stuff up and set",
    "start": "1305780",
    "end": "1310790"
  },
  {
    "text": "values so why is rust maybe good for this situation well it has a ton of",
    "start": "1310790",
    "end": "1317540"
  },
  {
    "text": "compile time checks so rust has this whole model of memory ownership and",
    "start": "1317540",
    "end": "1322970"
  },
  {
    "text": "borrowing which is I mean you could have a whole talk on how that works and there",
    "start": "1322970",
    "end": "1328820"
  },
  {
    "text": "are actual whole talks on how that works but one way to think of it is that rust",
    "start": "1328820",
    "end": "1333990"
  },
  {
    "text": "is kind of taking care of watching what you're doing with memory and making sure",
    "start": "1333990",
    "end": "1339000"
  },
  {
    "text": "that you're not doing anything that could result in common errors so whenever you pass a pointer to something",
    "start": "1339000",
    "end": "1345059"
  },
  {
    "text": "if it's not marked as mutable it will not let it be mutated and if it is marked as mutable after its return you",
    "start": "1345059",
    "end": "1352380"
  },
  {
    "text": "can't actually access that anymore unless you've specifically said that you want to there's there's a bunch of",
    "start": "1352380",
    "end": "1359700"
  },
  {
    "text": "different implementations that that make this work but in general it's watching your memory and it's doing it at compile",
    "start": "1359700",
    "end": "1366780"
  },
  {
    "text": "time if you write code that has memory problems it just won't compile and there's no",
    "start": "1366780",
    "end": "1373440"
  },
  {
    "text": "like - - disable memory protection flag that you can enable that will just let",
    "start": "1373440",
    "end": "1379080"
  },
  {
    "text": "it build it'll fail it'll give you nice errors for the most part rust has been working a lot on making their errors",
    "start": "1379080",
    "end": "1385350"
  },
  {
    "text": "better because they were really bad originally and it will tell you hey you know on this line this is not mutable",
    "start": "1385350",
    "end": "1392160"
  },
  {
    "text": "and it should be or you should make it you need me it's not mutable because of what you're doing things like that it is",
    "start": "1392160",
    "end": "1400020"
  },
  {
    "text": "generally good at finding bugs at compile time instead of run time and part of this is the memory stuff just",
    "start": "1400020",
    "end": "1406050"
  },
  {
    "text": "the general memory protections but another was the one is things like the match so you're written C imagine a few",
    "start": "1406050",
    "end": "1413220"
  },
  {
    "text": "people here have you've probably written a switch case statement once in your life and you've probably missed a break",
    "start": "1413220",
    "end": "1419730"
  },
  {
    "text": "statement once in your life stuff like that doesn't happen in rust rust has matched instead of a switch case every",
    "start": "1419730",
    "end": "1426480"
  },
  {
    "text": "single case has to be in a block that terminates and you must match every",
    "start": "1426480",
    "end": "1432330"
  },
  {
    "text": "possible value so you don't have default well you have a default but you don't have this generic pass-through where if",
    "start": "1432330",
    "end": "1439920"
  },
  {
    "text": "it didn't match anything it keeps executing so silly logic bugs that come out of those types of errors that get",
    "start": "1439920",
    "end": "1445860"
  },
  {
    "text": "made all the time just go away because it's it's harder to make those types of errors and this is just sort of the some",
    "start": "1445860",
    "end": "1452220"
  },
  {
    "text": "of the insight that you get when you start writing a programming language 40 or 50 years after C was developed right",
    "start": "1452220",
    "end": "1459530"
  },
  {
    "text": "the tools are pretty good and getting better like I said the error handling has gotten a lot better there is a tool",
    "start": "1459530",
    "end": "1466410"
  },
  {
    "text": "called cargo that you used to set up a package and install dependencies and build your",
    "start": "1466410",
    "end": "1472050"
  },
  {
    "text": "project so unlike with C where you got to do a lot of Hoops to get like a tool chain set up and you know if you're",
    "start": "1472050",
    "end": "1478530"
  },
  {
    "text": "relying on some dependency you probably have to go out to the internet and download the source for it and put it in",
    "start": "1478530",
    "end": "1483990"
  },
  {
    "text": "something figure out how to build it build some library and so on with rust it's it's kind unfor you there's some",
    "start": "1483990",
    "end": "1491130"
  },
  {
    "text": "repository of all these packages it's called crates and you can use the cargo application to pull down different",
    "start": "1491130",
    "end": "1497610"
  },
  {
    "text": "crates much like pythons pip or and things like that of course there are a lot of security issues with those types",
    "start": "1497610",
    "end": "1503850"
  },
  {
    "text": "of systems but it is available to you and it has a really nice C foreign",
    "start": "1503850",
    "end": "1509940"
  },
  {
    "text": "function interface and this is really critical for doing any type of work like this and we'll talk about it in a bit",
    "start": "1509940",
    "end": "1516000"
  },
  {
    "text": "detail so in general we're going to need the building to both call C from rust",
    "start": "1516000",
    "end": "1521760"
  },
  {
    "text": "and and this one's a little harder call rust from C and the way that we do this",
    "start": "1521760",
    "end": "1527550"
  },
  {
    "text": "with FFI foreign function interface and whenever you're writing rust you know we",
    "start": "1527550",
    "end": "1533760"
  },
  {
    "text": "have all these memory protections in place there is one way to get around them and it's called unsafe and it's",
    "start": "1533760",
    "end": "1540450"
  },
  {
    "text": "actually the same keyword you see in c-sharp and what it will do is you can say this code is unsafe it's gonna",
    "start": "1540450",
    "end": "1546540"
  },
  {
    "text": "access raw memory it's gonna call a function that accesses raw memory something like that and you'll use that",
    "start": "1546540",
    "end": "1552870"
  },
  {
    "text": "keyword so you do need unsafe blocks for dereferencing raw pointers so if you",
    "start": "1552870",
    "end": "1558870"
  },
  {
    "text": "want to access raw memory calling an unsafe function or method which you",
    "start": "1558870",
    "end": "1564030"
  },
  {
    "text": "could make a rust function as unsafe or if you're calling a C function it's",
    "start": "1564030",
    "end": "1569250"
  },
  {
    "text": "assumed to be unsafe because he doesn't have the safety so I'm safe always accessing or modifying a static middle",
    "start": "1569250",
    "end": "1575910"
  },
  {
    "text": "mutable variable which is something rust really doesn't want you to do is use these you static variables and lastly",
    "start": "1575910",
    "end": "1583160"
  },
  {
    "text": "implementing an unsafe trait so the rust has this trait system that's used to sort of describe different functions",
    "start": "1583160",
    "end": "1590610"
  },
  {
    "text": "that the object can do and you can have one that is completely unsafe and implement that trait so that's it's just",
    "start": "1590610",
    "end": "1596850"
  },
  {
    "text": "a language feature to stop you from having to write unsafe a bunch but your goal is always gonna be to limit this unsafe code and in fact if",
    "start": "1596850",
    "end": "1603789"
  },
  {
    "text": "you compile something in rust and you have an unsafe block if any statements in that block are not actually unsafe it",
    "start": "1603789",
    "end": "1610570"
  },
  {
    "text": "will warn you and it will say like hey this isn't unsafe I don't know why you are calling it as unsafe so you can take",
    "start": "1610570",
    "end": "1617379"
  },
  {
    "text": "it out of your unsafe block so it gives you a nice picture of what code you're running is memory safe and memory unsafe",
    "start": "1617379",
    "end": "1624419"
  },
  {
    "text": "unfortunately again when we're dealing with these embedded systems and acts we need access for all memory there's no",
    "start": "1624419",
    "end": "1630549"
  },
  {
    "text": "way around this today it's just it's how computers work unfortunately we're stuck",
    "start": "1630549",
    "end": "1635860"
  },
  {
    "text": "with it in terms of learning rust I can yeah this is not a whole talk on rust so",
    "start": "1635860",
    "end": "1642279"
  },
  {
    "text": "what are some resources you might like the rust book is sort of the Bible I'd",
    "start": "1642279",
    "end": "1647500"
  },
  {
    "text": "say and it's available online in full its works you all the way from hello",
    "start": "1647500",
    "end": "1654340"
  },
  {
    "text": "world through to basically all the language features probably best for people who have already done a bit of programming like it's probably not the",
    "start": "1654340",
    "end": "1660970"
  },
  {
    "text": "greatest idea to say oh I'm totally new to programming let's pick up rust but the books pretty good you give it a try",
    "start": "1660970",
    "end": "1668580"
  },
  {
    "text": "the paper version this says soon the paper version is actually now no starch has it you can buy it as a dead tree is",
    "start": "1668580",
    "end": "1675820"
  },
  {
    "text": "with the little crab on the cover rust by example is a really great website",
    "start": "1675820",
    "end": "1681850"
  },
  {
    "text": "where you can go through and they have something for basically every language feature and they'll show you an example and explain how it works",
    "start": "1681850",
    "end": "1688240"
  },
  {
    "text": "it also has a run sandbox thing where you can and should like modify it and hit play and it will run the code in",
    "start": "1688240",
    "end": "1694299"
  },
  {
    "text": "your browser so it's nice way to play around with it I always end up there when it's like oh yeah how do you",
    "start": "1694299",
    "end": "1700480"
  },
  {
    "text": "actually use this particular feature well just rust by example it's got a",
    "start": "1700480",
    "end": "1705669"
  },
  {
    "text": "page on it and then there's julia Evans's blog and she has a great blog on",
    "start": "1705669",
    "end": "1711659"
  },
  {
    "text": "lots of stuff but she did a lot of work on sort of doing low-level stuff with rust and a lot of it is illustrated and",
    "start": "1711659",
    "end": "1718690"
  },
  {
    "text": "quite entertaining actually so I I generally recommend her blog for all sorts of topics but it has a lot of rust",
    "start": "1718690",
    "end": "1725889"
  },
  {
    "text": "specific content as well so if you want to learn rust that's some of the resources you can go out and do it so",
    "start": "1725889",
    "end": "1733539"
  },
  {
    "text": "guess the last part here we talked about trust and we talked about rust and now we got to put them all together and",
    "start": "1733539",
    "end": "1738869"
  },
  {
    "text": "there's sort of a playbook to this that I came up with there's a few steps so the first one is we need a trusted OS",
    "start": "1738869",
    "end": "1745029"
  },
  {
    "text": "and work a bit limited right because if",
    "start": "1745029",
    "end": "1750129"
  },
  {
    "text": "I if I used QC well first off Qualcomm is not going to give me access to QC but even if they did then I'd be stuck up",
    "start": "1750129",
    "end": "1756190"
  },
  {
    "text": "here with like a redacted slide so we're gonna use opti it's free it's open source it's pretty well documented and",
    "start": "1756190",
    "end": "1763149"
  },
  {
    "text": "it also works with QEMU so I don't have to have like a BeagleBone black up here plugged into a projector to make it work",
    "start": "1763149",
    "end": "1769899"
  },
  {
    "text": "this is nice you can also run it at home without buying any hardware which is which is great another option that's a",
    "start": "1769899",
    "end": "1776739"
  },
  {
    "text": "bit newer the documentation for it was sketchy at the time but now it's a lot better is Google's trusty you can go out",
    "start": "1776739",
    "end": "1782830"
  },
  {
    "text": "and look at that Google provides that all open source and it's probably going",
    "start": "1782830",
    "end": "1789070"
  },
  {
    "text": "forward a better thing to look at just because it's going to be on a lot of Android phones and opti they have a",
    "start": "1789070",
    "end": "1796119"
  },
  {
    "text": "website part of Linares sort of so they they provide all the source and everything so we have our OS and we can",
    "start": "1796119",
    "end": "1801789"
  },
  {
    "text": "run our trusted OS and also we end up with a normal world OS which is just Linux so the next step here is to",
    "start": "1801789",
    "end": "1809200"
  },
  {
    "text": "generate rust bindings opti exposes this pretty big API that lets you do",
    "start": "1809200",
    "end": "1814720"
  },
  {
    "text": "everything from println to you know H max and signing and all the crypto",
    "start": "1814720",
    "end": "1821529"
  },
  {
    "text": "functions so we need bindings to that and it's all C headers this would be",
    "start": "1821529",
    "end": "1827200"
  },
  {
    "text": "hugely painful if we had to do it manually so there is a very magical tool called bind gen for rust the way that",
    "start": "1827200",
    "end": "1834309"
  },
  {
    "text": "this thing works you point it at AC header file and it takes the function",
    "start": "1834309",
    "end": "1839739"
  },
  {
    "text": "prototypes from C like this T machinate function the top one is a C normal you",
    "start": "1839739",
    "end": "1845349"
  },
  {
    "text": "know C function prototype as C types and it will convert it into a rust function",
    "start": "1845349",
    "end": "1851440"
  },
  {
    "text": "it looks pretty similar there's a little bit more verbose you'll notice there's an extern C block around it that's",
    "start": "1851440",
    "end": "1857409"
  },
  {
    "text": "telling us that it is external function that is written in C and we'll also make the FFI calls work rust does stuff like",
    "start": "1857409",
    "end": "1865299"
  },
  {
    "text": "mangle function names and whenever you're doing extern see it knows not to mangle things because",
    "start": "1865299",
    "end": "1871070"
  },
  {
    "text": "otherwise he won't be able to find it so it does this all automatically that doesn't look that hard but whenever",
    "start": "1871070",
    "end": "1877009"
  },
  {
    "text": "you're talking about thousands of functions and enums and type deaths and all that stuff yeah this tool is really",
    "start": "1877009",
    "end": "1882350"
  },
  {
    "text": "nice and it works quite quite well I've had no real issues with it on a variety",
    "start": "1882350",
    "end": "1889759"
  },
  {
    "text": "of different C libraries so once we have our bindings and our LS in place we need",
    "start": "1889759",
    "end": "1896179"
  },
  {
    "text": "to write a rust library and this is sort of backwards because you figure we'd ride an application but we're gonna",
    "start": "1896179",
    "end": "1901220"
  },
  {
    "text": "write a library the reason for this is the calling convention for opti it's it's not your normal like we have an elf",
    "start": "1901220",
    "end": "1908720"
  },
  {
    "text": "and we're gonna call mane instead it looks for these five functions and it",
    "start": "1908720",
    "end": "1914389"
  },
  {
    "text": "calls them at specific times so this rest library will end up getting loaded into to the Optio s and it'll give it's",
    "start": "1914389",
    "end": "1924649"
  },
  {
    "text": "actually given a grid and what will end up happening is whenever you call into that from the normal world it will make",
    "start": "1924649",
    "end": "1931519"
  },
  {
    "text": "a request to first the it's the entry point is the first thing that hits to",
    "start": "1931519",
    "end": "1937909"
  },
  {
    "text": "actually create the or set up the trust application and then every time you access it it's going to open a session",
    "start": "1937909",
    "end": "1944509"
  },
  {
    "text": "so it'll call the open session entry point you can allocate stuff there or whatever then it will invoke however",
    "start": "1944509",
    "end": "1951139"
  },
  {
    "text": "many commands that would like to and these are where you would implement your handlers to actually sign stuff or",
    "start": "1951139",
    "end": "1956749"
  },
  {
    "text": "validate stuff whatever you want to do it'll so it'll call the TI invoke",
    "start": "1956749",
    "end": "1962090"
  },
  {
    "text": "command entry point they call it once and call it multiple times and it can close the session can open another",
    "start": "1962090",
    "end": "1967549"
  },
  {
    "text": "session keep going and whatever it's completely done with the application it can destroy it with the destroy entry point so just five functions we need to",
    "start": "1967549",
    "end": "1975230"
  },
  {
    "text": "expose those we need to expose them in a way that they can be seen by opti and that's that's about it",
    "start": "1975230",
    "end": "1982429"
  },
  {
    "text": "so there's some magic rapper code that I've written and all the source for this is available at this and I'll give you",
    "start": "1982429",
    "end": "1987980"
  },
  {
    "text": "the github link but there's a bit of wrapper magic that maps all the up T stuff to the rest stuff but what you end",
    "start": "1987980",
    "end": "1995869"
  },
  {
    "text": "up with is the ability to just write a rust function like this and we'll walk through this in a bit of detail so this is the invoke",
    "start": "1995869",
    "end": "2003910"
  },
  {
    "text": "command entry point for a very simple example because I wanted to fit on a",
    "start": "2003910",
    "end": "2009160"
  },
  {
    "text": "slide and this also happens to be the opti hello world example so it's you",
    "start": "2009160",
    "end": "2014620"
  },
  {
    "text": "know it actually works with with their normal world applications kinda nice so",
    "start": "2014620",
    "end": "2020910"
  },
  {
    "text": "just like and see we got our parameters here it gets passed a session context this is one of those cases where we have",
    "start": "2020910",
    "end": "2027010"
  },
  {
    "text": "a void type because we're dealing with C but we have a command ID which is gonna be some number pram types which is gonna",
    "start": "2027010",
    "end": "2033880"
  },
  {
    "text": "be the types that end up mapped to the parameter array and then an array of parameters now this is a very simple",
    "start": "2033880",
    "end": "2040960"
  },
  {
    "text": "function that just increments and decrements values but the first parameter is that's passed has a value",
    "start": "2040960",
    "end": "2046930"
  },
  {
    "text": "that we want to increment or decrement so now the the arrow here is telling",
    "start": "2046930",
    "end": "2052780"
  },
  {
    "text": "ahrefs our return type and that's an OP t-t result that's a enum that was actually defined in the API and then",
    "start": "2052780",
    "end": "2060460"
  },
  {
    "text": "bind Jen made us this this type so we can just do opt e : : and gets access to",
    "start": "2060460",
    "end": "2066550"
  },
  {
    "text": "the whole API the next line here is a rust macro the reason you know it's",
    "start": "2066550",
    "end": "2071830"
  },
  {
    "text": "arrest macro is because of the exclamation point and this is a macro that's going to end up doing a little",
    "start": "2071830",
    "end": "2078010"
  },
  {
    "text": "bit of massaging and then calling one of the functions in the API to do printf",
    "start": "2078010",
    "end": "2084879"
  },
  {
    "text": "basically it was just kind of annoying to print a string you had to do some buffer conversion things and I've blend",
    "start": "2084880",
    "end": "2091510"
  },
  {
    "text": "it to be easy so I wrote a macro one benefit of rest that I didn't mention over C is it has a macro system that",
    "start": "2091510",
    "end": "2097390"
  },
  {
    "text": "won't make you go insane it has a lot of nice macro features if you've written C",
    "start": "2097390",
    "end": "2103780"
  },
  {
    "text": "macros and done like do-while zeros and things like that you probably yeah you'd",
    "start": "2103780",
    "end": "2109330"
  },
  {
    "text": "like rusts so this is just printing yeah we're gonna in we're in the invoke",
    "start": "2109330",
    "end": "2114820"
  },
  {
    "text": "command entry point and then we're doing a match statement so this is like a switch case we're matching on the",
    "start": "2114820",
    "end": "2120190"
  },
  {
    "text": "command ID value and so sort of a functional programming kind of thing",
    "start": "2120190",
    "end": "2125620"
  },
  {
    "text": "because we're matching zero this is where we need to call and unsafe because we're modifying essentially raw memory",
    "start": "2125620",
    "end": "2132790"
  },
  {
    "text": "here and we're taking params zero value a and incrementing it by one so in this case",
    "start": "2132790",
    "end": "2139480"
  },
  {
    "text": "command with command value zero is increment and then it will print incremented value just so we know then",
    "start": "2139480",
    "end": "2146650"
  },
  {
    "text": "we have command value 1 which is also just a different match value and it's gonna do the same thing except decrement",
    "start": "2146650",
    "end": "2151930"
  },
  {
    "text": "the value and print decrement dime and then we have this underscore if you do",
    "start": "2151930",
    "end": "2157570"
  },
  {
    "text": "not include this underscore match this will not compile it'll say you did not",
    "start": "2157570",
    "end": "2163270"
  },
  {
    "text": "match all the possible values and this is really nice cuz I know I've written a lot of dumb code and done the things",
    "start": "2163270",
    "end": "2169750"
  },
  {
    "text": "like oh I don't need to return an error here I'll go back later and put in the default case that's fine and this won't",
    "start": "2169750",
    "end": "2176620"
  },
  {
    "text": "let you do that you have to write the case to match everything and in this case opti defines this error",
    "start": "2176620",
    "end": "2182260"
  },
  {
    "text": "bad parameters which is the perfect return type for that so if i see something that's not 1 or 0 i'm just",
    "start": "2182260",
    "end": "2187570"
  },
  {
    "text": "gonna return error bad parameters otherwise we finished the match and returned up t success so again probably",
    "start": "2187570",
    "end": "2195370"
  },
  {
    "text": "the most complicated demo I can fit on one slide but it does something and the",
    "start": "2195370",
    "end": "2202720"
  },
  {
    "text": "last step is to get this whole thing built and if you dealt with with the joy",
    "start": "2202720",
    "end": "2207910"
  },
  {
    "text": "of linkers you yeah this is a little bit of a challenge to get working the first time and then once it works",
    "start": "2207910",
    "end": "2214090"
  },
  {
    "text": "you never want to touch it again but what we end up with is a compiled rust library and then there's some other",
    "start": "2214090",
    "end": "2221500"
  },
  {
    "text": "pieces to this so there's a trusted application header ta header that is",
    "start": "2221500",
    "end": "2227380"
  },
  {
    "text": "provided well it's built by the opti api and what that is is it has the Geo ID of",
    "start": "2227380",
    "end": "2235630"
  },
  {
    "text": "the application some other information about the application that part is written in C because it defines some",
    "start": "2235630",
    "end": "2242380"
  },
  {
    "text": "magic constants and you just let it do it and gets compiled down to an object",
    "start": "2242380",
    "end": "2247500"
  },
  {
    "text": "so the other thing is this Lib UT Live MPA and Lib util this is the actual live",
    "start": "2247500",
    "end": "2254410"
  },
  {
    "text": "dynamic libraries for we're going to be calling into and if the linker doesn't get those it'll say I don't see this",
    "start": "2254410",
    "end": "2261130"
  },
  {
    "text": "symbol I won't compile so we need to take all three of those things and toss them into the linker so once we have",
    "start": "2261130",
    "end": "2267670"
  },
  {
    "text": "that we have symbols all the symbols that we need we need a linker script opti provides one of these that",
    "start": "2267670",
    "end": "2273339"
  },
  {
    "text": "fortunately works just just works with it so that part's pretty easy and we",
    "start": "2273339",
    "end": "2280059"
  },
  {
    "text": "toss that into the linker we end up getting an elf out just like any other elf the only little caveat here is my",
    "start": "2280059",
    "end": "2288130"
  },
  {
    "text": "system is x86 64 most of the trustzone is going to be armed because all of its",
    "start": "2288130",
    "end": "2295210"
  },
  {
    "text": "gonna be armed because its arms copyright so we're doing cross compiling here rust has a very nice cross",
    "start": "2295210",
    "end": "2302410"
  },
  {
    "text": "compiling system you can use rust up to install the various targets you need a cross cross compiling GCC to build the",
    "start": "2302410",
    "end": "2309220"
  },
  {
    "text": "header and the libraries you need a cross compiling linker to do the linking when we have all that done we end up",
    "start": "2309220",
    "end": "2314740"
  },
  {
    "text": "with an arm elf for the trusted application the last step is to call this little function that's provide a",
    "start": "2314740",
    "end": "2320380"
  },
  {
    "text": "little script that's provided by opti to do the signature so it will take a binary and sign it and that way whenever",
    "start": "2320380",
    "end": "2326980"
  },
  {
    "text": "we actually try to run it it will check the signature and make sure it's valid up T will only run signed code so this",
    "start": "2326980",
    "end": "2334900"
  },
  {
    "text": "is a pretty nice protection and what that ends up doing is just tossing a signature on the thing and it gives us a",
    "start": "2334900",
    "end": "2340690"
  },
  {
    "text": "sign to trusted application and finally we have something that we can actually run and we'll do a little demo now I",
    "start": "2340690",
    "end": "2348369"
  },
  {
    "text": "apologize qemu bit of a pain in terms of font size oh that's lovely",
    "start": "2348369",
    "end": "2355619"
  },
  {
    "text": "internal error we'll just hope that that wasn't bad they don't pay in terms of font size and",
    "start": "2355619",
    "end": "2361299"
  },
  {
    "text": "in terms of lighting I hope this is somewhat visible I'm not sure if the lights can can go down to wash out less",
    "start": "2361299",
    "end": "2368170"
  },
  {
    "text": "but the way this ends up working here when you build this it will build you a",
    "start": "2368170",
    "end": "2375970"
  },
  {
    "text": "qmu image so it builds you both a build root image for linux and it builds you",
    "start": "2375970",
    "end": "2381190"
  },
  {
    "text": "the trusted world so we're sitting over here at qmu and we're gonna hit C to start it lots of junk flies by just as a",
    "start": "2381190",
    "end": "2390130"
  },
  {
    "text": "boots top is our normal Linux system that was you boot and now the nice kernels booting the bottom we're looking",
    "start": "2390130",
    "end": "2396520"
  },
  {
    "text": "at the secure world which is just printing out some debug messages if you were on real Hardware this",
    "start": "2396520",
    "end": "2401530"
  },
  {
    "text": "would be set up as probably two serial terminals interesting note if you happen to be pen testing any of these systems",
    "start": "2401530",
    "end": "2407850"
  },
  {
    "text": "sometimes the trusted world's debug serial terminal is left enabled and can",
    "start": "2407850",
    "end": "2414400"
  },
  {
    "text": "provide all sorts of juicy info yeah so we're gonna log in with the super secure",
    "start": "2414400",
    "end": "2419680"
  },
  {
    "text": "login of route and no password and now we're sitting at your normal like Linux",
    "start": "2419680",
    "end": "2426730"
  },
  {
    "text": "like hey this is less slash yeah it's a Selina Kista MIT was built by build root",
    "start": "2426730",
    "end": "2432310"
  },
  {
    "text": "it's a 32-bit arm system so what opti provides as they're examples is a bunch",
    "start": "2432310",
    "end": "2438940"
  },
  {
    "text": "of normal world applications so you're gonna call a normal world application",
    "start": "2438940",
    "end": "2444610"
  },
  {
    "text": "and then it's going to end up doing the actual IPC that happens over to the",
    "start": "2444610",
    "end": "2450070"
  },
  {
    "text": "trusted world it'll do some stuff send back the result their hello world was a",
    "start": "2450070",
    "end": "2455290"
  },
  {
    "text": "great example because it was that nice simple example so we call hello world hurry run hello world what we see happen",
    "start": "2455290",
    "end": "2462490"
  },
  {
    "text": "is a value gets incremented really simple but what happened there it was actually loaded up you can see the the",
    "start": "2462490",
    "end": "2469210"
  },
  {
    "text": "grid starting with 8a AF it's real tiny but it called it and it was printing the",
    "start": "2469210",
    "end": "2475270"
  },
  {
    "text": "rusty a create entry point all the things that happened so it create entry point it did a open session it didn't",
    "start": "2475270",
    "end": "2481600"
  },
  {
    "text": "invoke command hit printed incremented value from rust then it closes the session closed session entry point and",
    "start": "2481600",
    "end": "2488410"
  },
  {
    "text": "then it actually destroys the application doesn't keep it open so does destroy entry point and and then it's",
    "start": "2488410",
    "end": "2493930"
  },
  {
    "text": "done so that's what it ends up looking like with both the worlds interacting with each other and and how stuff gets",
    "start": "2493930",
    "end": "2499510"
  },
  {
    "text": "passed together in practice when you called that application that not secure bit ended up getting set to zero which",
    "start": "2499510",
    "end": "2506080"
  },
  {
    "text": "passed execution over to the secure world which invoked the thing got the parameter incremented it printed out",
    "start": "2506080",
    "end": "2511990"
  },
  {
    "text": "some stuff and then through the purple the value back into the secure the normal world and the big god switch back",
    "start": "2511990",
    "end": "2518230"
  },
  {
    "text": "when that happened so just quick demo to",
    "start": "2518230",
    "end": "2523840"
  },
  {
    "text": "show you it actually works but the codes all provided if you want to download it try it yourself or look at it in more",
    "start": "2523840",
    "end": "2529900"
  },
  {
    "text": "detail but a few little conclusions and takeaways maybe is well this trusted execution",
    "start": "2529900",
    "end": "2537350"
  },
  {
    "text": "environment thing it's useful but it's not magic you have all the usual problems right people can miss configure",
    "start": "2537350",
    "end": "2544190"
  },
  {
    "text": "it people can write vulnerable code all the normal things that could happen anywhere else except there's actually",
    "start": "2544190",
    "end": "2550040"
  },
  {
    "text": "some things that are against you right you're writing see you have bare-metal access to all this stuff like there are",
    "start": "2550040",
    "end": "2556730"
  },
  {
    "text": "some reasons that you could it makes it even easier to screw up so if you see",
    "start": "2556730",
    "end": "2562130"
  },
  {
    "text": "well if you come across these don't think that oh well it's it's it's a trust execution environment there's nothing that can be done it's just it's",
    "start": "2562130",
    "end": "2569750"
  },
  {
    "text": "the same as any other application at the end of the day rust is a potential replacement for C in a lot of these",
    "start": "2569750",
    "end": "2576290"
  },
  {
    "text": "applications and what I mean by that is it it can do a lot of these things the",
    "start": "2576290",
    "end": "2581630"
  },
  {
    "text": "reason being it doesn't have any dependencies it needs like mem copy and it also has some of these benefits",
    "start": "2581630",
    "end": "2588050"
  },
  {
    "text": "things like you know some more sane semantics around macros and match things",
    "start": "2588050",
    "end": "2593180"
  },
  {
    "text": "like that the memory protection so on and so forth so there's some reasons that you might want to use it probably",
    "start": "2593180",
    "end": "2598640"
  },
  {
    "text": "the biggest disadvantage is that very few people in the world right now know how to write rest compared to C you're",
    "start": "2598640",
    "end": "2605600"
  },
  {
    "text": "unlikely to just find a rust developer that is gonna write this stuff I as far",
    "start": "2605600",
    "end": "2611180"
  },
  {
    "text": "as I can tell no one else has tried to write a trust home application in rust so like there's no how many people that",
    "start": "2611180",
    "end": "2616730"
  },
  {
    "text": "are gonna do that that that's a problem also some of the stuff is gonna be more work and more verbose because of the",
    "start": "2616730",
    "end": "2623000"
  },
  {
    "text": "memory protection things like that and then I guess the last is sort of like a question which is should you do this",
    "start": "2623000",
    "end": "2628510"
  },
  {
    "text": "which is always a good thing to ask when people give talks about who I have this nice thing in proof of concept you can",
    "start": "2628510",
    "end": "2634460"
  },
  {
    "text": "always be like yeah but is it really a good idea and I think maybe not yet the",
    "start": "2634460",
    "end": "2640430"
  },
  {
    "text": "ideal thing here would be if somebody wrote an operating system for trust zone that was sort of more rust focused and",
    "start": "2640430",
    "end": "2647720"
  },
  {
    "text": "and had better support for it I'm stuck with not having the rest standard library for instance because it has a",
    "start": "2647720",
    "end": "2653210"
  },
  {
    "text": "lot of dependencies things like that but it is something you can start looking at if you're if you have places",
    "start": "2653210",
    "end": "2659210"
  },
  {
    "text": "anywhere not necessarily just trust zone where you're saying well we're using C for this because we need two for one or",
    "start": "2659210",
    "end": "2665690"
  },
  {
    "text": "two things maybe it's time to saying and well you could rust replace it and is that a good idea",
    "start": "2665690",
    "end": "2671220"
  },
  {
    "text": "and in some cases I think the answer is yes but it'll depend anyway that's what I have for you today you can send me",
    "start": "2671220",
    "end": "2677670"
  },
  {
    "text": "emails or find me on twitter x' all the code and slides are on github there and",
    "start": "2677670",
    "end": "2683100"
  },
  {
    "text": "i think we have about five minutes if you folks would like to ask questions but thank you very much for coming out thanks to the black hat folks for avenue",
    "start": "2683100",
    "end": "2689130"
  },
  {
    "text": "and people who put this on it's always fun to jump in front of folks and talk about what you're working on so thanks I",
    "start": "2689130",
    "end": "2696410"
  },
  {
    "text": "don't know how we're doing questions but oh there's a microphone hi all right",
    "start": "2700550",
    "end": "2714030"
  },
  {
    "text": "thank you for to talk Thanks it was very nice I've a question about like you are",
    "start": "2714030",
    "end": "2720360"
  },
  {
    "text": "saying that people they I mean the restaurants they would be more secure if",
    "start": "2720360",
    "end": "2726600"
  },
  {
    "text": "they go for example to rest right so what about for example like a box that",
    "start": "2726600",
    "end": "2732000"
  },
  {
    "text": "they are not memory corruptions like like a betrayal right like a receipt of owner ability where you can basically",
    "start": "2732000",
    "end": "2737940"
  },
  {
    "text": "know all the things it could be possible in in rats as well oh yeah so it's it's",
    "start": "2737940",
    "end": "2744480"
  },
  {
    "text": "not none of this stuff is a fancy right like nothing that's gonna solve all your problems that's any anyone who's selling you a",
    "start": "2744480",
    "end": "2751770"
  },
  {
    "text": "security product that tells all your problems is lassies only one back I know it doesn't matter if you see your ass",
    "start": "2751770",
    "end": "2757440"
  },
  {
    "text": "and you are yeah it's gone it's game over and that's actually a problem with trusted execution environments one thing",
    "start": "2757440",
    "end": "2764190"
  },
  {
    "text": "about this this talk is if you're someone who tests these for a living and maybe gives you some ideas but again if",
    "start": "2764190",
    "end": "2770850"
  },
  {
    "text": "you run into these all those bug classes totally valid the only difference is you have some weird IPC mechanism to talk",
    "start": "2770850",
    "end": "2777900"
  },
  {
    "text": "between the two worlds right and you can't do certain things but look at it",
    "start": "2777900",
    "end": "2783210"
  },
  {
    "text": "as another level of you know you got user you got root and it's just another level of privilege if you wrote a rest",
    "start": "2783210",
    "end": "2789990"
  },
  {
    "text": "application that was vulnerable that was running as root and that was set UID root you'd have the same problem but",
    "start": "2789990",
    "end": "2796500"
  },
  {
    "text": "there's certain bug classes that will help you prevent against and in certain reasons that it wasn't my so again none of its no no that's a",
    "start": "2796500",
    "end": "2803920"
  },
  {
    "text": "magic magic bullet I I wish there was a language that stopped all security problems but it's it's unfortunately not",
    "start": "2803920",
    "end": "2811060"
  },
  {
    "text": "the case for example rest I think",
    "start": "2811060",
    "end": "2816550"
  },
  {
    "text": "pieces of it might start doing that so folks that are doing some embedded things and sort of higher-level embedded",
    "start": "2816550",
    "end": "2824470"
  },
  {
    "text": "so you know you have the really low level you're writing code for like an 8-bit microcontroller and whatever ASM",
    "start": "2824470",
    "end": "2830380"
  },
  {
    "text": "it uses like that's des ya know yeah you got the stack and you have things where",
    "start": "2830380",
    "end": "2835990"
  },
  {
    "text": "you're running a full Linux system and you have you don't need to access Hardware directly that you can also use",
    "start": "2835990",
    "end": "2841210"
  },
  {
    "text": "things like go or Python or whatever where you know don't get all the benefits but you get a lot of them the",
    "start": "2841210",
    "end": "2847720"
  },
  {
    "text": "stuff that sits in the middle where you have something that's embedded but needs Hardware access is one place where I can",
    "start": "2847720",
    "end": "2852790"
  },
  {
    "text": "see people who really care about security starting to look towards it and also places where you need that type of",
    "start": "2852790",
    "end": "2859240"
  },
  {
    "text": "those types of I guess security benefits but also real time that's another benefit compared to something like go is",
    "start": "2859240",
    "end": "2865869"
  },
  {
    "text": "because there's no garbage collection you can actually do hard real-time stuff and you can't do like other than C and",
    "start": "2865869",
    "end": "2873010"
  },
  {
    "text": "assembly doing hard real-time is it's not easy so that's yeah another reason",
    "start": "2873010",
    "end": "2878440"
  },
  {
    "text": "it might help you out thanks anyone else",
    "start": "2878440",
    "end": "2885720"
  },
  {
    "text": "that'll let you go two minutes early for lunch I'll be around here if you want to ask me a question privately or",
    "start": "2885720",
    "end": "2891609"
  },
  {
    "text": "one-on-one but thanks again and have a good day enjoy the rest of the conference",
    "start": "2891609",
    "end": "2897750"
  }
]