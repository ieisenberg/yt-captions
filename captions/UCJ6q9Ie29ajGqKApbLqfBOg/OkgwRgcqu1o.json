[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "so hi everyone uh my name is Rich and I have contact information I started",
    "start": "80",
    "end": "5640"
  },
  {
    "text": "having a a Twitter account last year and now I have like over 100 followers so",
    "start": "5640",
    "end": "11639"
  },
  {
    "text": "I'm kind of a big deal on the internet um this talk is about csrf attacks",
    "start": "11639",
    "end": "20400"
  },
  {
    "text": "mostly and the outline is first I'm going to talk about some give some background uh talk about framework",
    "start": "20400",
    "end": "26560"
  },
  {
    "text": "weaknesses ooth practical csrf ticks uh tips and xss and csrf Rel uh protected",
    "start": "26560",
    "end": "34079"
  },
  {
    "text": "posts some interesting cases of that in the white paper but not necessarily uh in this talk is some clickjacking and",
    "start": "34079",
    "end": "40800"
  },
  {
    "text": "nlm stuff so first background um it's",
    "start": "40800",
    "end": "46160"
  },
  {
    "start": "42000",
    "end": "42000"
  },
  {
    "text": "kind of hard to make a csrf talk sexy uh if I G if I gave out a summary and said",
    "start": "46160",
    "end": "54239"
  },
  {
    "text": "okay here's a talk about csrf at black hat I'm not sure I would necessarily be interested because it's a problem that",
    "start": "54239",
    "end": "60320"
  },
  {
    "text": "most of us probably think we understand pretty well and uh this is a picture",
    "start": "60320",
    "end": "65960"
  },
  {
    "text": "from oasp and it says detectability easy and when most of us think about what a",
    "start": "65960",
    "end": "71159"
  },
  {
    "text": "csrf attack is we kind of think okay so there's this is a solved problem maybe",
    "start": "71159",
    "end": "77280"
  },
  {
    "text": "and csrf happens when we forget to apply that solved problem um and that's not what this talk is about this talk is",
    "start": "77280",
    "end": "83560"
  },
  {
    "text": "more about Okay so we've applied the real solution that we we think mitigate csrf and these are holes around uh when",
    "start": "83560",
    "end": "90799"
  },
  {
    "text": "we've done everything right when we followed oosp and followed the sdl but um the the areas where we can still go",
    "start": "90799",
    "end": "100119"
  },
  {
    "start": "100000",
    "end": "100000"
  },
  {
    "text": "wrong so first off um what is the same origin policy this is a question I love to ask when when people call in and do",
    "start": "100119",
    "end": "107040"
  },
  {
    "text": "phone screens because it's a simple question again that a lot of us think that we understand but it turns out the",
    "start": "107040",
    "end": "112759"
  },
  {
    "text": "deeper and the deeper you go it can turn out to be actually really complex the",
    "start": "112759",
    "end": "118560"
  },
  {
    "text": "simple answer though is that content from one website it shouldn't usually be able to access or modify content on",
    "start": "118560",
    "end": "124759"
  },
  {
    "text": "another website so this means like if we're logged into Google on one website",
    "start": "124759",
    "end": "129840"
  },
  {
    "text": "Microsoft and the other uh they shouldn't be able to interact but if we open a new tab and want to look at our",
    "start": "129840",
    "end": "135920"
  },
  {
    "text": "Gmail content we still want to be logged in and that includes like frames tabs and sometimes flash unless we tell flash",
    "start": "135920",
    "end": "143160"
  },
  {
    "text": "we want to be able to access other stuff and a lot of web vulnerabilities happen when websites inadvertently allow",
    "start": "143160",
    "end": "150560"
  },
  {
    "text": "cross-site access so some sa origin uh policy quirks that are useful for this talk one",
    "start": "150560",
    "end": "158360"
  },
  {
    "start": "152000",
    "end": "152000"
  },
  {
    "text": "is it's possible to get or post to any domain it's the basis for traditional csrf a lesser known thing but still",
    "start": "158360",
    "end": "165879"
  },
  {
    "text": "known is that it's often uh it's it's often possible to write cookies uh from",
    "start": "165879",
    "end": "172239"
  },
  {
    "text": "one domain to another domain and so writing cookies is a lot easier than reading",
    "start": "172239",
    "end": "177720"
  },
  {
    "text": "them to recap writing cookies uh here are some attributes that are interesting",
    "start": "177720",
    "end": "182920"
  },
  {
    "text": "so what happens when we write cookies is we make a request web server sends a response a set cookie header is in that",
    "start": "182920",
    "end": "190080"
  },
  {
    "text": "response and there are a couple attributes we can set one of them is path one of them is domain these are",
    "start": "190080",
    "end": "195400"
  },
  {
    "text": "useful when we get want to get our cookie first I was talking about the same",
    "start": "195400",
    "end": "200760"
  },
  {
    "start": "199000",
    "end": "199000"
  },
  {
    "text": "origin policy like two slides ago um which same origin policy are we talking about so if we're talking about Dom",
    "start": "200760",
    "end": "207879"
  },
  {
    "text": "access like uh can one Dom access another Dom uh let's let's look at these two domains there's pr. Woodgrove",
    "start": "207879",
    "end": "214480"
  },
  {
    "text": "bank.com over HTTP P 8880 and then there's a second domain that's https",
    "start": "214480",
    "end": "220400"
  },
  {
    "text": "secure. Woodrow bank.com so for most intents and purposes these are completely separate",
    "start": "220400",
    "end": "225760"
  },
  {
    "text": "domains right one is HTTP one is https uh that means like one Dom can't access",
    "start": "225760",
    "end": "231319"
  },
  {
    "text": "the other Dom another thing is that one is pr. Woodgrove bank.com one is secure.",
    "start": "231319",
    "end": "237280"
  },
  {
    "text": "Woodgrove bank.com so sorry about",
    "start": "237280",
    "end": "244239"
  },
  {
    "text": "that that's what happens when you do a mic",
    "start": "244640",
    "end": "248920"
  },
  {
    "text": "handoff um so one is pr. Woodrow bank.com one is",
    "start": "250560",
    "end": "255920"
  },
  {
    "text": "secure. Woodgrove bank.com so again in for most cases this is a completely different origin so with default flash",
    "start": "255920",
    "end": "263240"
  },
  {
    "text": "with default Dom that's that's a separate origin another thing is one is Port 880 one is Port 443 again that's",
    "start": "263240",
    "end": "270240"
  },
  {
    "text": "separate but one way that they're the same is that they can both write cookies to this top level domain or not top",
    "start": "270240",
    "end": "276600"
  },
  {
    "text": "level I guess it's second level but they can both write cookies to Woodgrove bank.com if they",
    "start": "276600",
    "end": "282199"
  },
  {
    "text": "want so cookie scope one interesting thing is can https secure. wgr bank.com",
    "start": "282199",
    "end": "288360"
  },
  {
    "start": "283000",
    "end": "283000"
  },
  {
    "text": "can it differentiate between cookies that it sets versus cookies that this HTTP PR website sets and the answer to",
    "start": "288360",
    "end": "296280"
  },
  {
    "text": "that is no there's nothing in the cookie that's that's sent that that you can you can tell who set the",
    "start": "296280",
    "end": "302400"
  },
  {
    "text": "cookie so here are some useful cookie facts uh so these two websites the pr",
    "start": "302400",
    "end": "308440"
  },
  {
    "start": "303000",
    "end": "303000"
  },
  {
    "text": "Woodgrove bank.com and secure Woodgrove bank.com they can both write cookies to each other and so if they both set",
    "start": "308440",
    "end": "314240"
  },
  {
    "text": "cookies then uh there are two cookies sent but they're indistinguishable you can't tell which domain set",
    "start": "314240",
    "end": "320600"
  },
  {
    "text": "it another interesting fact is that all browsers have a limit to the number of cookies in the cookie jar and so this is",
    "start": "320600",
    "end": "327400"
  },
  {
    "text": "very useful uh so I maybe almost a year ago John Willer",
    "start": "327400",
    "end": "333479"
  },
  {
    "text": "presented something like he called it triple submit cookies okay and it was attempting to mitigate this problem he",
    "start": "333479",
    "end": "338520"
  },
  {
    "text": "said and it kind of relies on the fact that if there are two cookies sent then maybe there's a problem and it does some",
    "start": "338520",
    "end": "344479"
  },
  {
    "text": "does some stuff based on that um but one bypass to that is that you can just send",
    "start": "344479",
    "end": "349840"
  },
  {
    "text": "so many cookies that you overflow the number of cookies and just send your attacker cookie in fact like just last week uh GitHub they had a they had a",
    "start": "349840",
    "end": "357479"
  },
  {
    "text": "cookie uh cookie tossing thing where because if you have your own GitHub site you can execute JavaScript and write",
    "start": "357479",
    "end": "363160"
  },
  {
    "text": "cookies so they tried to mitigate this also by uh um let's try to detect if there's two cookies but uh often we can",
    "start": "363160",
    "end": "370800"
  },
  {
    "text": "just overflow that so another thing is the HTTP",
    "start": "370800",
    "end": "376360"
  },
  {
    "text": "Woodgrove bank.com can overwrite cookies from https Woodgrove bank.com so again even though these are different domains",
    "start": "376360",
    "end": "383039"
  },
  {
    "text": "if you're HTTP you can just completely overwrite them there's there's not two cookie scent in that case it's also super common to add or",
    "start": "383039",
    "end": "390319"
  },
  {
    "text": "modify cookies based on the Dom so this is similar to Dom cross site scripting not as severe but it's uh it's pretty",
    "start": "390319",
    "end": "397400"
  },
  {
    "text": "common especially with analytic type engines and another thing is so we have",
    "start": "397400",
    "end": "403759"
  },
  {
    "text": "these websites a lot of the time we protect against csrf on the post request we want",
    "start": "403759",
    "end": "408800"
  },
  {
    "text": "to protect against csrf when we're modifying state but if you make a get",
    "start": "408800",
    "end": "414840"
  },
  {
    "text": "request to a certain domain or maybe the login request or there's all these requests you can do that aren't CSR",
    "start": "414840",
    "end": "420039"
  },
  {
    "text": "protected by Design they don't change the state but sometimes these these requests like to random parts of the",
    "start": "420039",
    "end": "425400"
  },
  {
    "text": "site uh which we can make by Design they can set the cookies we want so sometimes we can just make these requests and then",
    "start": "425400",
    "end": "431759"
  },
  {
    "text": "have the application set our set our cookies for us so to recap uh writing cookies is",
    "start": "431759",
    "end": "438440"
  },
  {
    "start": "435000",
    "end": "435000"
  },
  {
    "text": "easy and so that's this is kind of the background piece but I want everyone to understand that we can write cookies a",
    "start": "438440",
    "end": "444720"
  },
  {
    "text": "lot of a lot of the time common questions are or I guess",
    "start": "444720",
    "end": "450080"
  },
  {
    "text": "common misconceptions what does http only do it uh yeah it um so if we set a",
    "start": "450080",
    "end": "459919"
  },
  {
    "text": "cookie with this HTP only attribute it means that JavaScript cannot access that cookie so HTTP only has to do with",
    "start": "459919",
    "end": "466800"
  },
  {
    "text": "reading cookies okay has nothing at all to do with this has nothing to do with writing cookies so if we set a cookie",
    "start": "466800",
    "end": "473000"
  },
  {
    "text": "with HTTP only we can still overwrite that cookie with JavaScript okay what",
    "start": "473000",
    "end": "478120"
  },
  {
    "text": "does secure do it means if we have a secure website https uh in the when we",
    "start": "478120",
    "end": "483479"
  },
  {
    "text": "set the cookie in the response we can set this secure attribute and then when there's an HTTP request that cookie",
    "start": "483479",
    "end": "489199"
  },
  {
    "text": "isn't sent but again this has has nothing at all to do with reading cookies or sorry it does have to do with",
    "start": "489199",
    "end": "494879"
  },
  {
    "text": "reading cookies but has nothing to do with writing cookies so if we set our cookie was Secure we can still overwrite",
    "start": "494879",
    "end": "500120"
  },
  {
    "text": "that cookie with HTTP okay so one of the first problems we we",
    "start": "500120",
    "end": "506520"
  },
  {
    "start": "505000",
    "end": "505000"
  },
  {
    "text": "found in this this was uh we presented this at CC and black hat Abu Dhabi in",
    "start": "506520",
    "end": "513760"
  },
  {
    "text": "2011 uh one of the the most obvious things is this this was super common it's still super common but it's called",
    "start": "513760",
    "end": "520440"
  },
  {
    "text": "I'll call it for this talk naive double submit cookies and so what it does is if there's a cookie in the in the query",
    "start": "520440",
    "end": "527000"
  },
  {
    "text": "string um sorry I that doesn't make sense if there's a cookie and a value in",
    "start": "527000",
    "end": "532120"
  },
  {
    "text": "the query string all it does is check if they're equal and the assumption is here okay so we're in the same origin and",
    "start": "532120",
    "end": "538959"
  },
  {
    "text": "only the same same domain can write cookies so if they're equal then we're probably good and we let this request go through that's how we protect against",
    "start": "538959",
    "end": "545440"
  },
  {
    "text": "csrf obviously um since I've talked for like uh 10 minutes about why it's we",
    "start": "545440",
    "end": "552600"
  },
  {
    "text": "should assume that writing cookies is easy this this this protection is pretty easy to bypass if we can write cookies",
    "start": "552600",
    "end": "558399"
  },
  {
    "text": "right um so an example of this we showed this at at",
    "start": "558399",
    "end": "565480"
  },
  {
    "text": "CCC so what What's Happening Here is this is AA when it was fixed um or",
    "start": "567040",
    "end": "572920"
  },
  {
    "text": "before it was fixed so here is my signature and I get a mail from an",
    "start": "572920",
    "end": "580200"
  },
  {
    "text": "attacker so OA used to do this naive double submit cookie thing and so this this attacker email it's kind of hard to",
    "start": "581320",
    "end": "587320"
  },
  {
    "text": "read but one thing you'll notice is that they have the same top level domain it's uh this thing but they have different",
    "start": "587320",
    "end": "594560"
  },
  {
    "text": "subdomains and so this one this one link when you click on it it has a crossy scripting in it it's not it's not the",
    "start": "594560",
    "end": "600640"
  },
  {
    "text": "same domain but it's a neighbor domain and that cross site scripting executes it sets my cookie it sets them to be",
    "start": "600640",
    "end": "606560"
  },
  {
    "text": "equal and then we can bypass the csrf protection from MOA and so now we've",
    "start": "606560",
    "end": "611800"
  },
  {
    "text": "updated it our signature which is not a super severe attack but it it's a generic",
    "start": "611800",
    "end": "617120"
  },
  {
    "text": "Bypass or it was before it was",
    "start": "617120",
    "end": "621880"
  },
  {
    "text": "fixed so now uh some some new stuff that",
    "start": "623079",
    "end": "629839"
  },
  {
    "start": "628000",
    "end": "628000"
  },
  {
    "text": "the one thing I wanted you get from the old stuff is it's easy to write cookies and there there's been some work there but one thing I started thinking about",
    "start": "629839",
    "end": "636079"
  },
  {
    "start": "634000",
    "end": "634000"
  },
  {
    "text": "um is that what other things do these cookies apply to related to",
    "start": "636079",
    "end": "641680"
  },
  {
    "text": "csrf uh so what is the csrf token tied to it needs to be tied to something related to the user right so this can be",
    "start": "641680",
    "end": "648639"
  },
  {
    "text": "a session ID that and that's fine if it's a session ID that's that's actually pretty good but if it's not tied to the",
    "start": "648639",
    "end": "654839"
  },
  {
    "text": "session what happens if we have two users and uh we overwrite one users cookies with another",
    "start": "654839",
    "end": "662200"
  },
  {
    "text": "users so uh let's see uh the one one of the questions I",
    "start": "662200",
    "end": "668480"
  },
  {
    "text": "asked was what if the framework um what if the what if you use a framework like uhet or I mean there's",
    "start": "668480",
    "end": "676639"
  },
  {
    "text": "there's obviously tons of Frameworks and I'll talk about some of them in more depth uh but what if it uses the default",
    "start": "676639",
    "end": "681760"
  },
  {
    "text": "session ID but then in your web application you use this custom off what happens then it seems like a a recipe",
    "start": "681760",
    "end": "689079"
  },
  {
    "text": "for trouble and it is so net MVC csrf protection this is my favorite csrf",
    "start": "689079",
    "end": "695000"
  },
  {
    "text": "protection uh so I'm covering it in the most depth so I have this web",
    "start": "695000",
    "end": "702600"
  },
  {
    "text": "application and hopefully you can this first thing I before the talk I was trying to increase the font and I",
    "start": "702600",
    "end": "708360"
  },
  {
    "text": "couldn't figure it out so but that's okay this is the only small font um when you read most things about",
    "start": "708360",
    "end": "716639"
  },
  {
    "text": "like okay how do you prevent csrf with a NVC app a net NBC app and they tell you",
    "start": "716639",
    "end": "722760"
  },
  {
    "text": "okay so you add this validate forgery token to the controllers and that's usually the extent of the guidance okay",
    "start": "722760",
    "end": "728880"
  },
  {
    "text": "so I've done this in a web application and if I go to that web app it looks something like",
    "start": "728880",
    "end": "736199"
  },
  {
    "text": "this so by the way uh for this demo every browser is a different user so that's hopefully makes it less jring so",
    "start": "736680",
    "end": "743079"
  },
  {
    "text": "this is Firefox user so Firefox user says best test",
    "start": "743079",
    "end": "748160"
  },
  {
    "text": "44 if we intercept this in",
    "start": "748160",
    "end": "752199"
  },
  {
    "text": "burp it looks something like this let's call this Firefox",
    "start": "754000",
    "end": "762680"
  },
  {
    "text": "user so there's some there's some interesting things going on here so this fed off",
    "start": "764440",
    "end": "770440"
  },
  {
    "text": "cookie in this web application I have my own custom authentication okay and so the FED off cookie is what's used for",
    "start": "770440",
    "end": "776120"
  },
  {
    "text": "off but then I have these other things that are added and these are the csrf when I do a post it adds this",
    "start": "776120",
    "end": "783199"
  },
  {
    "text": "request verification token cookie and it adds this request verification token post value and they're they're not the",
    "start": "783199",
    "end": "791120"
  },
  {
    "text": "same but they're tied together and so if you modify even one bite of one it will throw an exception and so if you look at",
    "start": "791120",
    "end": "797320"
  },
  {
    "text": "what that except where that exception is thrown you can look at the stack trace and if you drop this into IL spy it",
    "start": "797320",
    "end": "802880"
  },
  {
    "text": "looks like this so you can see there's some information passed to this uh some of that information is",
    "start": "802880",
    "end": "810480"
  },
  {
    "text": "a session token and a field token so the session token is the cookie the field token is the post value and so it's",
    "start": "810480",
    "end": "816760"
  },
  {
    "text": "tying them together somehow and one of the things it does really early that you can see is it just Compares that they're",
    "start": "816760",
    "end": "822399"
  },
  {
    "text": "equal it says if object. equals the cookie and the and the post value so that's pretty much the same as the naive",
    "start": "822399",
    "end": "828519"
  },
  {
    "text": "double submit solution that that AA had right but there's some more information here with MVC they're also passing this",
    "start": "828519",
    "end": "835639"
  },
  {
    "text": "identity field and that's really what I'm concerned about uh if I'm looking to bypass this this csrf",
    "start": "835639",
    "end": "842160"
  },
  {
    "text": "protection I really want to see how does it how does this application know who I am uh because if it's not tied to the",
    "start": "842160",
    "end": "848480"
  },
  {
    "text": "session then I can just replay different users so what I did was I attached windbg to IAS and I set a",
    "start": "848480",
    "end": "856880"
  },
  {
    "text": "breakpoint so when I make this request let's turn off our",
    "start": "856880",
    "end": "863839"
  },
  {
    "text": "interception we hit this breakpoint hopefully oh",
    "start": "863839",
    "end": "869880"
  },
  {
    "text": "I'm",
    "start": "869880",
    "end": "872040"
  },
  {
    "text": "unauthenticated so when I make this request with best test",
    "start": "877440",
    "end": "883759"
  },
  {
    "text": "44 I hit this breakpoint and right off it answers my",
    "start": "883759",
    "end": "889880"
  },
  {
    "text": "question uh where does it get the identity from well uh we can see it right here it says uh this the identity",
    "start": "889880",
    "end": "896480"
  },
  {
    "text": "that's passed in is got from is is retrieved from system. or",
    "start": "896480",
    "end": "901680"
  },
  {
    "text": "sorry if we click on this we can see that it's got from system. web. HTTP",
    "start": "901680",
    "end": "906880"
  },
  {
    "text": "context so this is an important fact that maybe isn't documented so much uh and it's kind of a tough thing to",
    "start": "906880",
    "end": "912680"
  },
  {
    "text": "document but when we have our MVC protection we need to make sure that this um that our system do uh web. HTTP",
    "start": "912680",
    "end": "920639"
  },
  {
    "text": "context is unique and if it's not then it's replayed per user so let me clear",
    "start": "920639",
    "end": "925920"
  },
  {
    "text": "this breako and actually set another",
    "start": "925920",
    "end": "931519"
  },
  {
    "text": "one so let me go back to Wy",
    "start": "934639",
    "end": "941680"
  },
  {
    "text": "BG so what I want to also see uh if if we go back to Il spy we want to see what this binary blob",
    "start": "941959",
    "end": "950040"
  },
  {
    "text": "is it because what it's doing is it EXT so now who now now that it knows who we are we want to extract extract this",
    "start": "950040",
    "end": "956319"
  },
  {
    "text": "binary blob and it sees okay who is our user this is their unique value and so",
    "start": "956319",
    "end": "961680"
  },
  {
    "text": "let's if we go back to wind dbg we can",
    "start": "961680",
    "end": "967279"
  },
  {
    "text": "go and we hit this hit this break point right off because it's later in the code",
    "start": "968560",
    "end": "974360"
  },
  {
    "text": "uh so we can see this binary blob expand it expand it and it's actually pretty meaningless uh it well it's not",
    "start": "974360",
    "end": "981399"
  },
  {
    "text": "meaningless but it looks random because it's it's our claim uid so it's Unique per user let's copy this to notepad",
    "start": "981399",
    "end": "989880"
  },
  {
    "text": "so really quickly what happens if we change users so that was Firefox user and if we",
    "start": "990480",
    "end": "995720"
  },
  {
    "text": "go over to Chrome user our breakpoint is still set um but we might need to make sure",
    "start": "995720",
    "end": "1001480"
  },
  {
    "text": "we're authenticated I'm glad they had internet in this room so I could show",
    "start": "1001480",
    "end": "1008959"
  },
  {
    "text": "this and remember this is custom authentication there's nothing wrong with our authentication the problem is",
    "start": "1008959",
    "end": "1014000"
  },
  {
    "text": "maybe that our application doesn't know how we're authenticated and so so now we're best",
    "start": "1014000",
    "end": "1019759"
  },
  {
    "text": "test 46 Chrome user if we do this and hit our",
    "start": "1019759",
    "end": "1026199"
  },
  {
    "text": "breakpoint one thing we can see is if we look at this binary",
    "start": "1027039",
    "end": "1034160"
  },
  {
    "text": "blob for Chrome user and ie user even though the values are completely different I can show that in a second",
    "start": "1034160",
    "end": "1039438"
  },
  {
    "text": "but these binary blobs are exactly the same so if we crack open these tokens and look at the binary blobs they're the",
    "start": "1039439",
    "end": "1044520"
  },
  {
    "text": "same so what does this mean let's let's actually remove the break point",
    "start": "1044520",
    "end": "1050520"
  },
  {
    "text": "now PC star okay so if we if we make this",
    "start": "1050520",
    "end": "1056880"
  },
  {
    "text": "request again because I forgot to intercept it and actually intercept it this",
    "start": "1056880",
    "end": "1064640"
  },
  {
    "text": "time one thing that we can notice we have these two requests one",
    "start": "1067039",
    "end": "1073799"
  },
  {
    "text": "for oh oops I sent it to sequencer send a repeater",
    "start": "1073799",
    "end": "1079039"
  },
  {
    "text": "so we have these two requests one for Chrome user and one for Firefox user well if you look at request verification",
    "start": "1079039",
    "end": "1085159"
  },
  {
    "text": "token like they're completely different this one is GBL P something something something this is Chrome user and if we",
    "start": "1085159",
    "end": "1092120"
  },
  {
    "text": "look at that for Firefox User it's like lrh so they look completely random but we looked at that binary blob and",
    "start": "1092120",
    "end": "1097559"
  },
  {
    "text": "they're exactly the same and it turns out if we replace one so if replace Firefox firefox's cookie with Chrome's",
    "start": "1097559",
    "end": "1106000"
  },
  {
    "text": "cookie uh well if we made this request right now what would happen we' get an exception because they don't match it does that naive double submit thing",
    "start": "1106000",
    "end": "1112320"
  },
  {
    "text": "first so we made that request yep we get an exception but if we replace both of",
    "start": "1112320",
    "end": "1117520"
  },
  {
    "text": "them so we replace the cookie and the post value then everything is",
    "start": "1117520",
    "end": "1125559"
  },
  {
    "text": "happy and it goes through so we got a 200 the the first",
    "start": "1128320",
    "end": "1133600"
  },
  {
    "text": "one through an exception and second one is a 200 so what is this",
    "start": "1133600",
    "end": "1141000"
  },
  {
    "start": "1142000",
    "end": "1142000"
  },
  {
    "text": "mean or to back up so how how would you exploit this um we've learned that if",
    "start": "1143840",
    "end": "1149880"
  },
  {
    "text": "you can write cookies and we know the post value then we can uh then we can buypass this this uh this csrf",
    "start": "1149880",
    "end": "1157520"
  },
  {
    "text": "protection so in the same app so I don't have spend more time copying cookies around I made a demo so here I am logged",
    "start": "1157520",
    "end": "1163880"
  },
  {
    "text": "in as Firefox user I visit a malicious site on the same top level domain",
    "start": "1163880",
    "end": "1169200"
  },
  {
    "text": "and it sets the cookies for me to the attacker cookies uh using cookie tossing and then we've bypassed the csrf",
    "start": "1169200",
    "end": "1175320"
  },
  {
    "text": "protection okay same is not double submit so MVC csrf the protection works",
    "start": "1175320",
    "end": "1182799"
  },
  {
    "text": "fine by default but the information is derived from the session ID cookie automatically",
    "start": "1182799",
    "end": "1189480"
  },
  {
    "text": "okay uh or sorry it's not well we just actually went went over this it's not it's not from the session ID cookie",
    "start": "1189480",
    "end": "1195360"
  },
  {
    "text": "necessarily but it's got from system. web. HTTP content so if your HTTP context isn't unique",
    "start": "1195360",
    "end": "1201480"
  },
  {
    "text": "then you're in trouble what if you off another way sometimes that's fine as long as it sets",
    "start": "1201480",
    "end": "1208240"
  },
  {
    "text": "htttp context. user to something unique so ACS does this like so if you use ACS that's fine or Visual Studio comes with",
    "start": "1208240",
    "end": "1215520"
  },
  {
    "text": "some uh oo templates and those work fine but what if in your application use",
    "start": "1215520",
    "end": "1220640"
  },
  {
    "text": "something like Facebook connect or if you use something like the Live ID SDK or there's tons of things that don't set",
    "start": "1220640",
    "end": "1227320"
  },
  {
    "text": "http context. to something unique okay and so if you don't do that manually then uh your your application is might",
    "start": "1227320",
    "end": "1234159"
  },
  {
    "text": "be vulnerable to this attack and worse a lot of these apis like um they will force you to set HTTP",
    "start": "1234159",
    "end": "1241720"
  },
  {
    "text": "context. user to a specific value and so that you can even use that API and so",
    "start": "1241720",
    "end": "1247240"
  },
  {
    "text": "that makes it difficult you kind of have to write your own CSR protection in that case and add that and add that",
    "start": "1247240",
    "end": "1252760"
  },
  {
    "text": "controller so this is super common obviously it's not just NVC",
    "start": "1252760",
    "end": "1258400"
  },
  {
    "text": "though MVC is my favorite protection but one of the more more popular ones and common ones is like forms.net so what",
    "start": "1258400",
    "end": "1265080"
  },
  {
    "text": "did they tell you to do with view state if you have a view State like an asp.net forms app how do they tell you to protect against",
    "start": "1265080",
    "end": "1271200"
  },
  {
    "text": "csrf uh they give you something like this that says okay make sure the view State user key is set to the session ID",
    "start": "1271200",
    "end": "1278880"
  },
  {
    "text": "and uh I have another smaller demo with this one um but if you look at it you you set",
    "start": "1278880",
    "end": "1286039"
  },
  {
    "text": "that on a base page so every page gets his view State user key set to the session ID where do you think the session ID",
    "start": "1286039",
    "end": "1292360"
  },
  {
    "text": "comes from well how does this this look in real",
    "start": "1292360",
    "end": "1298320"
  },
  {
    "text": "life here's I user if we visit this example.com page unfortunately my oth expires too",
    "start": "1299039",
    "end": "1306760"
  },
  {
    "text": "fast so it might ask me to",
    "start": "1306760",
    "end": "1309679"
  },
  {
    "text": "REO so reign",
    "start": "1317200",
    "end": "1321039"
  },
  {
    "text": "in if we make a post request remember our view State user key is set to a",
    "start": "1326400",
    "end": "1331880"
  },
  {
    "text": "unique value let's intercept this one so if we make this request we'll see",
    "start": "1331880",
    "end": "1339000"
  },
  {
    "text": "some things first of",
    "start": "1339000",
    "end": "1344278"
  },
  {
    "text": "all we have this session ID cookie okay and we we're using custom off we're",
    "start": "1345039",
    "end": "1350960"
  },
  {
    "text": "using the same custom off for this for this web app that we were before so this session ID cookie actually is not used",
    "start": "1350960",
    "end": "1356520"
  },
  {
    "text": "for authentication uh this fed off cookie is okay so so if we omitted the session ID",
    "start": "1356520",
    "end": "1363120"
  },
  {
    "text": "cookie and did like a get request anywhere in the app it would it would be fine but um so the the protection relies on",
    "start": "1363120",
    "end": "1371400"
  },
  {
    "text": "sending view State user key to session ID what is that doing well there's these view state things down here and we're",
    "start": "1371400",
    "end": "1377320"
  },
  {
    "text": "relying on this to prevent srf okay but the the reason why they make this recommendation if we go back",
    "start": "1377320",
    "end": "1383520"
  },
  {
    "text": "to the slide they say uh I mean that's that's super small but they say okay set",
    "start": "1383520",
    "end": "1389440"
  },
  {
    "text": "um a view State user key to session. session ID and they say that so you can't just grab this value down here",
    "start": "1389440",
    "end": "1395799"
  },
  {
    "text": "this view State repl get grab it from user one and replace that for user two okay so that's why they say that um but",
    "start": "1395799",
    "end": "1405640"
  },
  {
    "text": "where is the session ID coming from and it it's nothing magic it's coming from this cookie right",
    "start": "1405640",
    "end": "1411279"
  },
  {
    "text": "here so if we're able to write this cookie this session ID cookie across users then we can still bypass this this",
    "start": "1411279",
    "end": "1418039"
  },
  {
    "text": "protection if we're not using session ID for o does that make sense so we're not",
    "start": "1418039",
    "end": "1423360"
  },
  {
    "text": "using the session ID cookie for off so it's a problem um if we modify this it's bad but if we copy The View State user",
    "start": "1423360",
    "end": "1429840"
  },
  {
    "text": "key and the session ID and remember we can write cookies a lot of the time so if we can write those cookies then we can bypass",
    "start": "1429840",
    "end": "1436960"
  },
  {
    "text": "this okay",
    "start": "1436960",
    "end": "1440440"
  },
  {
    "start": "1442000",
    "end": "1442000"
  },
  {
    "text": "other Frameworks obviously have the same problem because these Frameworks can't know of they can't always know about",
    "start": "1442159",
    "end": "1447279"
  },
  {
    "text": "where the user is coming from so Jango Ruby on Rails sometimes it's worse um",
    "start": "1447279",
    "end": "1453200"
  },
  {
    "text": "and it can be a problem with any framework that tries to mitigate csrf across the board because a lot of the times they don't know how we're",
    "start": "1453200",
    "end": "1459520"
  },
  {
    "text": "authenticating single sign on apps this is also super common uh if if you think about it you have a ceros app or like an",
    "start": "1459520",
    "end": "1465880"
  },
  {
    "start": "1460000",
    "end": "1460000"
  },
  {
    "text": "ntlm app it should be obvious that this is so easy to get wrong because we're",
    "start": "1465880",
    "end": "1470919"
  },
  {
    "text": "authenticating not the I level or the Apache level and so these Frameworks are",
    "start": "1470919",
    "end": "1477240"
  },
  {
    "text": "preventing csrf at the cookie level right they're tying they're tying our or not at the cookie but they're tying a",
    "start": "1477240",
    "end": "1483440"
  },
  {
    "text": "cookie to this post value so if we assume we can write cookies and we can write these post values then a lot of",
    "start": "1483440",
    "end": "1489240"
  },
  {
    "text": "the time we can bypass this so generically what can we learn",
    "start": "1489240",
    "end": "1494360"
  },
  {
    "text": "from this if we use custom off with a standard web framework this is a really really common bug the test methodology",
    "start": "1494360",
    "end": "1501080"
  },
  {
    "text": "is easy uh what we can do is we can have one user grab their information and replace it with another user and uh",
    "start": "1501080",
    "end": "1508919"
  },
  {
    "text": "except for the session ID but replace the csrf values and if that works you're probably",
    "start": "1508919",
    "end": "1514840"
  },
  {
    "text": "vulnerable um the hard part is figuring out what cookie is used for what uh the exploit is a little harder",
    "start": "1514840",
    "end": "1520720"
  },
  {
    "text": "but again we're assuming we can write cookies so if you have man in the middle cookie injection neighbor xss or anything like that you can usually craft",
    "start": "1520720",
    "end": "1527520"
  },
  {
    "text": "a real exploit how do we mitigate csrf this is another",
    "start": "1527520",
    "end": "1533760"
  },
  {
    "start": "1530000",
    "end": "1530000"
  },
  {
    "text": "question I ask a lot of people like on on phone screens and things uh and the most common answer is okay we need a",
    "start": "1533760",
    "end": "1540039"
  },
  {
    "text": "nons all right that's that's true what is a nons it needs to be unique per user",
    "start": "1540039",
    "end": "1545360"
  },
  {
    "text": "needs to be not guessable and uh so this this is usually what people say they needs they say it",
    "start": "1545360",
    "end": "1550640"
  },
  {
    "text": "needs to be unique and not guessable uh what they usually don't say is that it needs to be cryptographically tied to",
    "start": "1550640",
    "end": "1556720"
  },
  {
    "text": "the session and so you don't see a lot of people answering like this but it's actually probably the most common uh",
    "start": "1556720",
    "end": "1564080"
  },
  {
    "text": "common problem at least the most common problem I see it's a tough problem to completely",
    "start": "1564080",
    "end": "1569679"
  },
  {
    "text": "automate uh because we don't know how our how users are going to off uh",
    "start": "1569679",
    "end": "1575240"
  },
  {
    "text": "they're always going to if you have a big website you're probably going to want to off your own way so Frameworks have tried and they've you know they get",
    "start": "1575240",
    "end": "1581200"
  },
  {
    "text": "all the solutions they can but they don't know if you're going to use this own your own SDK or something and static",
    "start": "1581200",
    "end": "1587320"
  },
  {
    "text": "analysis it's also a hard problem um because you can never incorporate how",
    "start": "1587320",
    "end": "1592760"
  },
  {
    "text": "how someone's going to write code in every case oops so moving on to",
    "start": "1592760",
    "end": "1600600"
  },
  {
    "text": "ooth ooth I thought was an interesting Target right let's",
    "start": "1600600",
    "end": "1606279"
  },
  {
    "text": "see how I'm doing on time so ooth I thought was a a super",
    "start": "1606279",
    "end": "1611520"
  },
  {
    "text": "interesting problem um or Target because so what is a doing it's you have one",
    "start": "1611520",
    "end": "1616799"
  },
  {
    "text": "user and you have another completely different user we trying to Grant access to the application some way with these",
    "start": "1616799",
    "end": "1622240"
  },
  {
    "text": "two different users um that's that's kind of an oversimplification but if you have these",
    "start": "1622240",
    "end": "1627640"
  },
  {
    "text": "two users how do you know which sessions which and mitigating csrf actually gets really",
    "start": "1627640",
    "end": "1634080"
  },
  {
    "text": "hard uh what is the impact of csrf here there's has been some work um and csrf",
    "start": "1634240",
    "end": "1640159"
  },
  {
    "text": "mitigations are actually covered in the spec so there's a state parameter that should be used and like in in a spec",
    "start": "1640159",
    "end": "1646120"
  },
  {
    "text": "they say okay the state parameter needs to be a non ible value it's user agents authenticated State kept in a location",
    "start": "1646120",
    "end": "1652279"
  },
  {
    "text": "accessible only on the client and so they they say okay we need to make um uh",
    "start": "1652279",
    "end": "1658919"
  },
  {
    "text": "this state value is passed all the way through uh through the entire flow and you can use it to uh to theoretically",
    "start": "1658919",
    "end": "1665120"
  },
  {
    "text": "prevent csrf one common use of aaf is tying accounts together so here's an example",
    "start": "1665120",
    "end": "1672000"
  },
  {
    "start": "1667000",
    "end": "1667000"
  },
  {
    "text": "uh say I have a stock exchange account from you know 1982 when Stock Exchange was founded or whatever",
    "start": "1672000",
    "end": "1678640"
  },
  {
    "text": "uh you have this old kogy account and uh you want to tie it uh so Stock Exchange",
    "start": "1678640",
    "end": "1684840"
  },
  {
    "text": "knows this and they want you to keep that account but they also want you to authenticate other ways so that's the add more logins thing at the bottom so",
    "start": "1684840",
    "end": "1691279"
  },
  {
    "text": "maybe you want to log in with Facebook or log in with your Gmail or log in with whatever okay and that's that that's",
    "start": "1691279",
    "end": "1696640"
  },
  {
    "text": "fine and a lot of times they use ooth or open ID uh type things to do that so the first attack ideas I thought",
    "start": "1696640",
    "end": "1703880"
  },
  {
    "start": "1702000",
    "end": "1702000"
  },
  {
    "text": "of were like okay what if we toss cookies into the victim like so we toss cookies in a stack Overflow like we were",
    "start": "1703880",
    "end": "1709600"
  },
  {
    "text": "just talking about with MVC and then the cookies used for off may not be used um may not be tied to uh",
    "start": "1709600",
    "end": "1717919"
  },
  {
    "text": "to the to the identifier because they need to know exactly what the session ID cookie is and they need to make sure",
    "start": "1717919",
    "end": "1723600"
  },
  {
    "text": "they tie the state parameter to that so it's an easy problem to get wrong so then you associate the",
    "start": "1723600",
    "end": "1728880"
  },
  {
    "text": "attacker's account with the victim's account and you completely own their account so that that was my idea but",
    "start": "1728880",
    "end": "1734440"
  },
  {
    "text": "there are a lot of cookies for each site so I was looking at stack exchange and there's a bunch of cookies set and I was trying to figure out which cookies are",
    "start": "1734440",
    "end": "1740240"
  },
  {
    "text": "used for the nons and which cookies are used for the Post value and it was you know it's not not an impossible problem",
    "start": "1740240",
    "end": "1746159"
  },
  {
    "text": "but it it took some time but there's a usually usually an easier way to to own",
    "start": "1746159",
    "end": "1751240"
  },
  {
    "text": "these these types of accounts but the above like so this this flow will probably be a problem for a very long",
    "start": "1751240",
    "end": "1757399"
  },
  {
    "text": "time so my second attack idea was uh the one that worked for so many sites was so",
    "start": "1757399",
    "end": "1763480"
  },
  {
    "start": "1758000",
    "end": "1758000"
  },
  {
    "text": "one you create an attacker Facebook account two you grant the accessing",
    "start": "1763480",
    "end": "1769320"
  },
  {
    "text": "application so in this case it's stack Overflow you grant grant all the permissions in the world you say okay you can off to me um you can look at all",
    "start": "1769320",
    "end": "1776440"
  },
  {
    "text": "my all my friends I don't care because you're the attacker's account so we're assuming that the",
    "start": "1776440",
    "end": "1782480"
  },
  {
    "text": "victim is logged into stack Overflow and the militia site does the following so the victim visits a militia",
    "start": "1782480",
    "end": "1788559"
  },
  {
    "text": "site they log the victim in to the attacker's Facebook account and I I was planning on using",
    "start": "1788559",
    "end": "1795000"
  },
  {
    "text": "cookie tossing for this but it turned out not to be necessary because Facebook has had a csrf in the",
    "start": "1795000",
    "end": "1800039"
  },
  {
    "text": "login um then we post to the account Association request and uh there's the",
    "start": "1800039",
    "end": "1806200"
  },
  {
    "text": "state parameter isn't uh sent in the flow until later and so then the attacker logs out into the other of the",
    "start": "1806200",
    "end": "1812399"
  },
  {
    "text": "other session so now we have successfully tied our attacker account to this victim stack exchange",
    "start": "1812399",
    "end": "1817679"
  },
  {
    "start": "1817000",
    "end": "1817000"
  },
  {
    "text": "account here's a video of that um so we log into stack",
    "start": "1817679",
    "end": "1822760"
  },
  {
    "text": "exchange with my one account which is victim victim live.com",
    "start": "1822760",
    "end": "1829960"
  },
  {
    "text": "and uh this account actually does not this is the only account on this um this",
    "start": "1830840",
    "end": "1835880"
  },
  {
    "text": "stack exchange website so I at this point I haven't you know tied any Facebook things to it or",
    "start": "1835880",
    "end": "1842080"
  },
  {
    "text": "anything then I visit this malicious",
    "start": "1842080",
    "end": "1848039"
  },
  {
    "text": "site which is sneakily named stack exchange pone and um so I log into I'm",
    "start": "1849039",
    "end": "1856080"
  },
  {
    "text": "logged into stack exchange I click this pone thing there's this popup and what this popup is doing is logging me into the attacker's Facebook account okay so",
    "start": "1856080",
    "end": "1862960"
  },
  {
    "text": "I'm the victim right now but I'm logging into the attacker's Facebook account oops it's fast",
    "start": "1862960",
    "end": "1871039"
  },
  {
    "text": "forward and so now now we post a stack exchange and we can see that our um our",
    "start": "1872760",
    "end": "1880000"
  },
  {
    "text": "victim account or our attacker account is now associated with our uh our Facebook or sorry our attack account is",
    "start": "1880000",
    "end": "1885960"
  },
  {
    "text": "associated with the victim account does that attack flow make sense it's a very cool attack and this it's bad right",
    "start": "1885960",
    "end": "1892440"
  },
  {
    "text": "because we if if you think about it we've we've completely owned their account and with stack exchange uh the",
    "start": "1892440",
    "end": "1897720"
  },
  {
    "text": "the engineers later told me that um you actually could disassociate their accounts but I couldn't figure out how",
    "start": "1897720",
    "end": "1902799"
  },
  {
    "text": "to disassociate my account so I owned it like forever which is cool but it's also",
    "start": "1902799",
    "end": "1908120"
  },
  {
    "text": "kind of hard to test because you own it once and you need to create a bunch of new accounts",
    "start": "1908120",
    "end": "1913519"
  },
  {
    "start": "1913000",
    "end": "1913000"
  },
  {
    "text": "um there's some there's some details that I that I kind of skirted over so to log into Facebook uh they don't really",
    "start": "1913519",
    "end": "1919720"
  },
  {
    "text": "have csrf protection but they don't let you set the refer so the refer can't be set so this is a kind of an interesting",
    "start": "1919720",
    "end": "1925279"
  },
  {
    "text": "problem that took a few hours to to think about um so there are a couple",
    "start": "1925279",
    "end": "1930320"
  },
  {
    "text": "ways we can post cross domain and strip the refer the easiest way and the first thing I always try is there's like an",
    "start": "1930320",
    "end": "1935519"
  },
  {
    "text": "https to http post right so if that happens then no refer is sent and we win",
    "start": "1935519",
    "end": "1943760"
  },
  {
    "text": "but uh if it's https to https then there is a refer scent even cross the main so",
    "start": "1943760",
    "end": "1950399"
  },
  {
    "text": "we we can't do that because Facebook only lets us log in with https another one of the first things I",
    "start": "1950399",
    "end": "1957080"
  },
  {
    "text": "thought of was okay what about Kors post like what if I what if I make a post request with por Kors and this actually",
    "start": "1957080",
    "end": "1963919"
  },
  {
    "text": "probably should have worked there's this Maz an non flag that according to the spec it looks like it almost would work",
    "start": "1963919",
    "end": "1969480"
  },
  {
    "text": "uh there might be some problems but it turns out with all the browsers the refer is sent so that didn't work then I",
    "start": "1969480",
    "end": "1975120"
  },
  {
    "text": "actually like started Googling has anyone else solved this and uh ktz has I'm sure I mispronounce his name because",
    "start": "1975120",
    "end": "1981120"
  },
  {
    "text": "I just have ever read it um but he has a blog post about this and it's a good blog post he talks about how to use the",
    "start": "1981120",
    "end": "1987720"
  },
  {
    "text": "data um protocol Handler uh and and you can you can do",
    "start": "1987720",
    "end": "1993480"
  },
  {
    "text": "that and it won't send the refer but I thought about okay so why does chors why why does data work why does chors post",
    "start": "1993480",
    "end": "2000919"
  },
  {
    "text": "should have worked and the problem with data is it only works with chrome and Firefox it doesn't work with iie because",
    "start": "2000919",
    "end": "2006679"
  },
  {
    "text": "iie doesn't support data but the reason why they work is because it executes in this about blank",
    "start": "2006679",
    "end": "2013080"
  },
  {
    "text": "context so what we can do if we're an attacker is we can just okay let's open up an iframe let's open it up in the",
    "start": "2013080",
    "end": "2019200"
  },
  {
    "text": "about blank context then we can write to that uh and that works in everything so we can do that and make our post and not",
    "start": "2019200",
    "end": "2025960"
  },
  {
    "text": "send a refer and log into Facebook",
    "start": "2025960",
    "end": "2031960"
  },
  {
    "text": "so is this just stack exchange have you have you seen other other websites that",
    "start": "2031960",
    "end": "2037039"
  },
  {
    "text": "do this account association thing no of course not um so some other examples are uh and",
    "start": "2037039",
    "end": "2044799"
  },
  {
    "text": "these I think for the most part are I think they should be fixed uh woot.com",
    "start": "2044799",
    "end": "2050760"
  },
  {
    "text": "imdb.com goodreads.com soundcloud.com so Myspace yes it new",
    "start": "2050760",
    "end": "2056358"
  },
  {
    "text": "Myspace lets you log in with Facebook now uh 10 years ago I would have been Sammy uh and cool but no one well I",
    "start": "2056359",
    "end": "2064000"
  },
  {
    "text": "shouldn't say no one uses Myspace but um but yeah you could do this against against",
    "start": "2064000",
    "end": "2069878"
  },
  {
    "text": "Myspace Myspace is coming back um what else Fox News",
    "start": "2070320",
    "end": "2076638"
  },
  {
    "text": "Pinterest okay so th those ones are all kind of the same exact attack where you do this post and it Associates accounts",
    "start": "2076639",
    "end": "2082839"
  },
  {
    "text": "Groupon is a little different um there there's a couple ways you can do this",
    "start": "2082839",
    "end": "2088040"
  },
  {
    "text": "Facebook connect thing uh and one way is you do that full flow where you do a post request it sends a code back",
    "start": "2088040",
    "end": "2093599"
  },
  {
    "text": "Groupon uses this different thing it uses a what a post message a JavaScript post message message has two windows or",
    "start": "2093599",
    "end": "2099160"
  },
  {
    "text": "two iframes and they talk to each other and this is also another common problem or sorry common way to connect",
    "start": "2099160",
    "end": "2106280"
  },
  {
    "text": "accounts um so the problem is that Groupon and a",
    "start": "2106280",
    "end": "2112160"
  },
  {
    "text": "lot of these sites don't have x-frame options so what you can do is almost the same attack but in for that last piece",
    "start": "2112160",
    "end": "2117240"
  },
  {
    "text": "instead of a csrf we use clickjacking so we do the same thing at first we just right now we're logging",
    "start": "2117240",
    "end": "2123000"
  },
  {
    "text": "into our attacker's Facebook account",
    "start": "2123000",
    "end": "2127480"
  },
  {
    "text": "and then instead of doing our csrf attack now we just this is actually a",
    "start": "2130480",
    "end": "2135520"
  },
  {
    "text": "clickjacking module I wrote it's part of beef right now um so we and actually",
    "start": "2135520",
    "end": "2141280"
  },
  {
    "text": "this demo isn't that good because uh because I'm screen capturing at the same time I'm doing the csrf and for some",
    "start": "2141280",
    "end": "2146920"
  },
  {
    "text": "reason it stopped working as good but it still works so right now behind the scenes",
    "start": "2146920",
    "end": "2152240"
  },
  {
    "text": "obviously this could really be hidden um but it's saying is this really you you say yes that's me associate mik accounts",
    "start": "2152240",
    "end": "2158880"
  },
  {
    "text": "and now uh I've tied my attacker Facebook account to Groupon and I can log in with that of",
    "start": "2158880",
    "end": "2166880"
  },
  {
    "text": "course so yeah the rest of this video is just log in yep I can log in with my",
    "start": "2167119",
    "end": "2172839"
  },
  {
    "text": "attackers Facebook uh this is this is my favorite",
    "start": "2172839",
    "end": "2178400"
  },
  {
    "text": "picture in the whole slide deck by the way and the reason why is because so look at this we have this email change",
    "start": "2178400",
    "end": "2184400"
  },
  {
    "text": "request and you enter in your email you confirm your password and that makes a lot of sense because if you can just",
    "start": "2184400",
    "end": "2190200"
  },
  {
    "text": "change the email you pretty much have owned their Groupon account right and that's very common right if we want to",
    "start": "2190200",
    "end": "2195680"
  },
  {
    "text": "change our password most sites make you enter in your old password but one thing that most sites don't do in fact every",
    "start": "2195680",
    "end": "2202119"
  },
  {
    "text": "single site I checked did not do this was if you want to connect with your Facebook account just click that button",
    "start": "2202119",
    "end": "2208440"
  },
  {
    "text": "all right so what does that mean that means if we find cross site scripting in any of these sites then you don't need to reenter your password you just can",
    "start": "2208440",
    "end": "2214040"
  },
  {
    "text": "associate it with Facebook and own it like that um so yeah that's super I shouldn't say all the sides I test every",
    "start": "2214040",
    "end": "2220280"
  },
  {
    "text": "single site I tested except for Flickr so flicker makes you enter in your password good job flicker",
    "start": "2220280",
    "end": "2227800"
  },
  {
    "text": "um Huffington Post did this same thing as Facebook uh they they have the post",
    "start": "2227800",
    "end": "2233079"
  },
  {
    "text": "message thing no and no x-frame option so they have the clickjacking thing for square does this SlideShare does this",
    "start": "2233079",
    "end": "2238800"
  },
  {
    "text": "Kickstarter does this Vimeo is a little different um Vimeo was one of the best",
    "start": "2238800",
    "end": "2243920"
  },
  {
    "text": "ones I tested they they do the state parameter right so so they do they do",
    "start": "2243920",
    "end": "2249280"
  },
  {
    "text": "something similar to the um to stack exchange and woot where they where they",
    "start": "2249280",
    "end": "2254400"
  },
  {
    "text": "do this Association request except for they have the state parameter and as far as I can tell you",
    "start": "2254400",
    "end": "2260920"
  },
  {
    "text": "can't get around that but an interesting thing about Vimeo is when I was looking",
    "start": "2260920",
    "end": "2266599"
  },
  {
    "text": "at it and intercepted it I noticed this there's an xsrf cookie and a token and",
    "start": "2266599",
    "end": "2272560"
  },
  {
    "text": "they're equal so what happens if you just send them both to a oh yeah this is the first",
    "start": "2272560",
    "end": "2278119"
  },
  {
    "text": "bug we were talking about right it's the double double submit cookie bug so uh yeah you can one way to explo",
    "start": "2278119",
    "end": "2286599"
  },
  {
    "text": "this is if you find cross site scripting somewhere in Vimeo like my site. vimeo.com but another way that's not",
    "start": "2286599",
    "end": "2292280"
  },
  {
    "text": "really talked about so much and I don't really talk about it that much but it's the man in the middle and that doesn't require me to look for another cross",
    "start": "2292280",
    "end": "2297960"
  },
  {
    "text": "site scripting so I showed oops so I show that",
    "start": "2297960",
    "end": "2303359"
  },
  {
    "text": "here so here I'm poisoning the art tables and I wrote a burping extension that I will uh release as part of this",
    "start": "2303359",
    "end": "2311079"
  },
  {
    "text": "uh as part of the white paper and so if you make a request to Vimeo ASDF or sorry Vimeo",
    "start": "2311079",
    "end": "2317599"
  },
  {
    "text": "asdfasdf ASDF then this burp extension will as a response to that request",
    "start": "2317599",
    "end": "2323680"
  },
  {
    "text": "that's random um or not really random but you know determined then it will send back a",
    "start": "2323680",
    "end": "2330359"
  },
  {
    "text": "Javas my own JavaScript and that JavaScript will set the cookie for Vimeo and overwrite the Vimeo csrf cookie so",
    "start": "2330359",
    "end": "2337480"
  },
  {
    "text": "When I visit this website my malicious attacker website or you know I can force a visit to the website because I'm in",
    "start": "2337480",
    "end": "2342839"
  },
  {
    "text": "the middle all I do is I write that cookie so here I am writing the cookie in",
    "start": "2342839",
    "end": "2348280"
  },
  {
    "text": "vimeo.com context and by the way it's all over https so um I'm only intercepting HTTP",
    "start": "2348280",
    "end": "2356440"
  },
  {
    "text": "requests uh so like if they make a request to google.com I can just force them to request uh a Vimeo a HTTP Vimeo",
    "start": "2356440",
    "end": "2364280"
  },
  {
    "text": "and then I can set the cookies with that so I'm setting the Vimeo",
    "start": "2364280",
    "end": "2369760"
  },
  {
    "text": "cookies and I make that now I now the attack for the rest of the attack is exactly the same I just log them into my",
    "start": "2369760",
    "end": "2376000"
  },
  {
    "text": "attacker's Facebook and now my Vimeo account is associated with my attacker",
    "start": "2376000",
    "end": "2383280"
  },
  {
    "text": "account okay good reads is similar to the it has similar",
    "start": "2383280",
    "end": "2390839"
  },
  {
    "text": "problems to um you know wo.com stack exchange but one thing I wanted to show",
    "start": "2390839",
    "end": "2396200"
  },
  {
    "text": "is all these these face and why do they all use Facebook because Facebook had a csrf in the login so it was the easiest",
    "start": "2396200",
    "end": "2403359"
  },
  {
    "text": "but remember we're assuming we can write cookies and so we can really log into whatever we want if we can write cookies",
    "start": "2403359",
    "end": "2409040"
  },
  {
    "text": "we can log into Twitter or Google or live because that's how that's how uh",
    "start": "2409040",
    "end": "2414119"
  },
  {
    "text": "cookies work so in this example even even though it's all over HTTP so it's not that",
    "start": "2414119",
    "end": "2420520"
  },
  {
    "text": "interesting um I just show that yeah you can log into Twitter and do the same thing uh so first I I'm not logged into",
    "start": "2420520",
    "end": "2429240"
  },
  {
    "text": "Twitter I don't even have I don't have a Twitter account for this example but then I visit a malicious",
    "start": "2429240",
    "end": "2436440"
  },
  {
    "text": "page and I'm in the middle and so because I'm in the middle I can write cookies to Twitter log the victim into",
    "start": "2436440",
    "end": "2441960"
  },
  {
    "text": "my attacker Twitter account and Associate these requests and time my attacker Twitter account to to",
    "start": "2441960",
    "end": "2449359"
  },
  {
    "text": "the victim's Goodreads account okay so it's the same attack um",
    "start": "2449359",
    "end": "2459240"
  },
  {
    "start": "2457000",
    "end": "2457000"
  },
  {
    "text": "the risk is large compared to a classic xss and a in a regular page you can steal sessions you can do a lot of",
    "start": "2459680",
    "end": "2465160"
  },
  {
    "text": "things with that and that's bad and with xss you can even do this attack but this",
    "start": "2465160",
    "end": "2470280"
  },
  {
    "text": "is worse because you usually own their account forever right you've completely owned their account you can can uh you",
    "start": "2470280",
    "end": "2477040"
  },
  {
    "text": "can once you've Associated their account you can usually disassociate all their other accounts so you can you can make sure you're the only owner of of it if",
    "start": "2477040",
    "end": "2483800"
  },
  {
    "text": "you want I've talked a lot about well let's check",
    "start": "2483800",
    "end": "2490119"
  },
  {
    "start": "2485000",
    "end": "2485000"
  },
  {
    "text": "time 15 minutes don't worry you guys can go soon uh there's a lot of custom logic",
    "start": "2490720",
    "end": "2496319"
  },
  {
    "text": "too uh so I've talked about this account association thing and that's like the",
    "start": "2496319",
    "end": "2501440"
  },
  {
    "text": "worst thing you can do right if I want to own an account the worst thing you can do is take over their account but there's tons of custom logic that we use",
    "start": "2501440",
    "end": "2508040"
  },
  {
    "text": "ooth for one thing and actually these aren't vulnerabilities uh they're just",
    "start": "2508040",
    "end": "2513280"
  },
  {
    "text": "because I didn't really focus on looking for these but these this just functionality I stumbled across so if",
    "start": "2513280",
    "end": "2519079"
  },
  {
    "text": "you have a live Journal account they use oo to if if you look at it it says like when I post an entry automatically post",
    "start": "2519079",
    "end": "2525520"
  },
  {
    "text": "it to Facebook so if I associate my attacker Facebook with that then maybe",
    "start": "2525520",
    "end": "2530560"
  },
  {
    "text": "if it's a private life journal it posts all the stuff to me and so that's still bad it's not as bad as completely taking",
    "start": "2530560",
    "end": "2536880"
  },
  {
    "text": "over someone's account but um but it's still a bug if if it's if it has um csrf",
    "start": "2536880",
    "end": "2543960"
  },
  {
    "text": "in it so this is Microsoft again no bug but they they have ooth here and so if you",
    "start": "2543960",
    "end": "2550640"
  },
  {
    "text": "can you can associate your attacker Facebook account with your hot mail account then that's bad because it says",
    "start": "2550640",
    "end": "2558000"
  },
  {
    "text": "chat with your Facebook friends right so maybe associate our attacker Facebook account we can all of a sudden have all our attacker friends be able to chat",
    "start": "2558000",
    "end": "2564520"
  },
  {
    "text": "with you um how do we fix this so it can be fixed",
    "start": "2564520",
    "end": "2570119"
  },
  {
    "start": "2567000",
    "end": "2567000"
  },
  {
    "text": "on the consumer side and it's been fixed a lot of places what we can do is the state parameter properly tied to a",
    "start": "2570119",
    "end": "2575520"
  },
  {
    "text": "session ID and and it's it's we're kind of asking every consumer website so",
    "start": "2575520",
    "end": "2580599"
  },
  {
    "text": "we're asking Goodreads all these other sites we're kind of asking them to fix it on their own because it's and it's a",
    "start": "2580599",
    "end": "2586119"
  },
  {
    "text": "hard problem right we need to make sure that we've we've tied it to the session cookie and not another cookie um but it",
    "start": "2586119",
    "end": "2593160"
  },
  {
    "text": "can be definitely be solved like this it just maybe uh maybe not ideal because every every single person needs to solve",
    "start": "2593160",
    "end": "2598640"
  },
  {
    "text": "it can it be fixed on the identity provider side maybe um so Facebook again",
    "start": "2598640",
    "end": "2604880"
  },
  {
    "text": "was the was was the easiest because they had csrf in their login and and uh they",
    "start": "2604880",
    "end": "2610920"
  },
  {
    "text": "they know about it they said they've they've known about it forever um",
    "start": "2610920",
    "end": "2617119"
  },
  {
    "text": "and that's that's okay you know I I can understand their position that it's kind of it's kind of a consumer side bug",
    "start": "2617119",
    "end": "2623559"
  },
  {
    "text": "because it is uh but you could also make it more difficult to exploit by like not having not having not being able to log",
    "start": "2623559",
    "end": "2629599"
  },
  {
    "text": "in quite as easily as an ATT if you're an attacker but it but you can still write cookies so it's still Pro probably a",
    "start": "2629599",
    "end": "2636240"
  },
  {
    "text": "problem I gave them some other suggestions I gave identity providers other suggestions that might work like",
    "start": "2636240",
    "end": "2642280"
  },
  {
    "text": "maybe we could separate the flow for login versus this Associated cter thing",
    "start": "2642280",
    "end": "2647400"
  },
  {
    "text": "um but uh but there's not a a firm way to Sol I mean we can do things to",
    "start": "2647400",
    "end": "2653200"
  },
  {
    "text": "mitigate it with identity providers but remember there's only a handful of those usually so identity providers are usually Google Microsoft Facebook Yahoo",
    "start": "2653200",
    "end": "2661839"
  },
  {
    "text": "Twitter uh there there's only a handful of them but maybe more I don't mean to",
    "start": "2661839",
    "end": "2667319"
  },
  {
    "start": "2666000",
    "end": "2666000"
  },
  {
    "text": "leave anyone out but uh when we we're talking about the victims or the um the",
    "start": "2667319",
    "end": "2672960"
  },
  {
    "text": "people consuming the identities that's that's definitely a lot more so the last section",
    "start": "2672960",
    "end": "2680760"
  },
  {
    "text": "um one thing that I kind of skipped over these attacks are really obvious right like I pop up a window I'm logging into",
    "start": "2680760",
    "end": "2687520"
  },
  {
    "text": "Facebook with this window and why do I do that it's because I all these sites have x-frame options on them and the",
    "start": "2687520",
    "end": "2693880"
  },
  {
    "text": "identity providers do because like I said there's only a handful of them so if we want to do csrf against someone",
    "start": "2693880",
    "end": "2700400"
  },
  {
    "text": "with x-frame options it kind of gets a little tricky because we need to pop up this new window and it's kind of obvious",
    "start": "2700400",
    "end": "2705880"
  },
  {
    "text": "so how do we how do we hide that I was kind of looking at so I was looking at some shady SES and they like popped",
    "start": "2705880",
    "end": "2712119"
  },
  {
    "text": "under um popped under my my browser so I'm like okay people do that and so I started looking how do we do this pop",
    "start": "2712119",
    "end": "2718920"
  },
  {
    "text": "under I.E it's pretty easy but Facebook and chrome they explicitly deny that it",
    "start": "2718920",
    "end": "2724280"
  },
  {
    "text": "was a bug and it said like blur results in window being lowered is possible so they tried to fix well you know they",
    "start": "2724280",
    "end": "2730680"
  },
  {
    "text": "kind of fixed it but it was still possible you know like I'd visit the Pirate Bay and it pops under and and I",
    "start": "2730680",
    "end": "2736839"
  },
  {
    "text": "uh you know I noticed like a lot of a lot of other Shady sites did it so I started debugging the JavaScript and I spent like four hours debugging it my",
    "start": "2736839",
    "end": "2744079"
  },
  {
    "text": "wife would walk by and I was scared she's like you know I'm at some porn website debugging JavaScript and she's",
    "start": "2744079",
    "end": "2749880"
  },
  {
    "text": "like still you know but but I managed to get it finally uh",
    "start": "2749880",
    "end": "2757280"
  },
  {
    "text": "she not not that not that she she cares but the four hours",
    "start": "2757280",
    "end": "2762480"
  },
  {
    "text": "was you said you were working uh so here's SoundCloud it kind",
    "start": "2762480",
    "end": "2769240"
  },
  {
    "text": "of had the same problem but uh here I tried to make it sneaky so the only difference here is",
    "start": "2769240",
    "end": "2774720"
  },
  {
    "text": "it's it's a sack exchange problem but I'm whistling inconspicuously there's a pop under",
    "start": "2774720",
    "end": "2780000"
  },
  {
    "text": "right now that's logging me into Facebook then I close that and we you're now owned so that that video is maybe",
    "start": "2780000",
    "end": "2785720"
  },
  {
    "text": "not as exciting cuz it's it's fun to show things but uh but yeah you can do it",
    "start": "2785720",
    "end": "2791359"
  },
  {
    "text": "sneakily and yes you can log into your Facebook with the attacker account another thing uh so I went to",
    "start": "2791359",
    "end": "2799480"
  },
  {
    "text": "black hat in J August over the summer in Vegas and they did they had this",
    "start": "2799480",
    "end": "2805839"
  },
  {
    "text": "firmware csrf that was pretty cool um but you needed to stay stay at a site for 60 seconds or something and and a",
    "start": "2805839",
    "end": "2813160"
  },
  {
    "text": "lot of people get around this like okay we'll just they're watching a video and that's that's kind of that's cool um and",
    "start": "2813160",
    "end": "2820920"
  },
  {
    "text": "and it really is fine it's it's how else do you get someone to stay a site for 60 minutes but I thought you know like I'm",
    "start": "2820920",
    "end": "2826640"
  },
  {
    "text": "not really super sneaky what if I just like uh there's these functions like move to move by what can we do with",
    "start": "2826640",
    "end": "2832359"
  },
  {
    "text": "those so one thing you can do it's like if you look at a normal",
    "start": "2832359",
    "end": "2837440"
  },
  {
    "text": "browser session like maybe we go to Google Google may we have a lot of Google windows",
    "start": "2837440",
    "end": "2845039"
  },
  {
    "text": "open but then we also visit this",
    "start": "2845280",
    "end": "2850680"
  },
  {
    "text": "one so one thing we can do if it will go",
    "start": "2851640",
    "end": "2858960"
  },
  {
    "text": "there oh am I intercepting stuff",
    "start": "2861520",
    "end": "2866480"
  },
  {
    "text": "yep okay so we can use these move by uh window attributes and it say we click on",
    "start": "2871800",
    "end": "2877800"
  },
  {
    "text": "this it visits our malicious site and rather than trying to be sneaky you just",
    "start": "2877800",
    "end": "2882960"
  },
  {
    "text": "kind of move it all over the place and it makes it really hard to click on you didn't even say like I'm owning",
    "start": "2882960",
    "end": "2888240"
  },
  {
    "text": "you and Flash it okay um so I I thought that one was kind of fun and you can't even really close it like if you click",
    "start": "2888240",
    "end": "2894520"
  },
  {
    "text": "here it just goes goes in the background uh you can open more than one",
    "start": "2894520",
    "end": "2899880"
  },
  {
    "text": "sometimes and which window is it they all look the same I think it's is it this one yeah",
    "start": "2899880",
    "end": "2905920"
  },
  {
    "text": "okay so we can close it that way but for this Facebook attack we only need like 4 seconds so that we can that'll take someone 4 seconds right um so that's in",
    "start": "2905920",
    "end": "2914760"
  },
  {
    "text": "yourface csrf I expect all csfs to be like that now crashing browsers this is another",
    "start": "2914760",
    "end": "2922079"
  },
  {
    "start": "2920000",
    "end": "2920000"
  },
  {
    "text": "interesting thing because a lot of browser Defenders they spent a lot of money on like trying to mitigate",
    "start": "2922079",
    "end": "2927520"
  },
  {
    "text": "exploits and that's good I think that that those are more severe what happens when you crash a browser what happens to",
    "start": "2927520",
    "end": "2933359"
  },
  {
    "text": "your cookies right so we want to log a user out or something sometimes if you crash the browser then",
    "start": "2933359",
    "end": "2938799"
  },
  {
    "text": "your cookies all go away usually that's configurable and that's how a lot of browsers do it by default um so here are",
    "start": "2938799",
    "end": "2945960"
  },
  {
    "text": "ways to crash browsers that are like known and um but there but there's tons of ways to crash browsers you can",
    "start": "2945960",
    "end": "2951079"
  },
  {
    "text": "probably fuzz one for not very long it's the exploit there's still exploitable bugs there",
    "start": "2951079",
    "end": "2956720"
  },
  {
    "text": "um another interesting thing is I love features like this this is a Facebook feature and it's a it's a good feature",
    "start": "2956720",
    "end": "2963799"
  },
  {
    "start": "2957000",
    "end": "2957000"
  },
  {
    "text": "right so if you're logged into a bunch of accounts it tells you where you're logged in in on and you can log out of certain accounts so that's a good",
    "start": "2963799",
    "end": "2970160"
  },
  {
    "text": "security feature but I like it because so I loged them in with my attacker's Facebook account I can use this to just",
    "start": "2970160",
    "end": "2975839"
  },
  {
    "text": "log them off again if I want so they don't they don't actually own my attacker's Facebook account so I like it",
    "start": "2975839",
    "end": "2982200"
  },
  {
    "text": "because it's a good feature and it's a legitimate security feature but you can use it for",
    "start": "2982200",
    "end": "2987480"
  },
  {
    "text": "evil I'll skip that xss and csrf protected posts",
    "start": "2988119",
    "end": "2994480"
  },
  {
    "start": "2993000",
    "end": "2993000"
  },
  {
    "text": "um I'll I'll go over this quickly I don't have much time but this there's I think there's some interesting stuff",
    "start": "2994480",
    "end": "3000359"
  },
  {
    "text": "here um when I was actually making this slide I saw a lot of people say another lame self accss found on a website owned",
    "start": "3000359",
    "end": "3007079"
  },
  {
    "text": "by someone 61 I found got to stop finding these um so he could have been talking about",
    "start": "3007079",
    "end": "3013319"
  },
  {
    "text": "anything but uh I hear people say that a lot so they find like a post value and it has a good csrf protection how do I",
    "start": "3013319",
    "end": "3019520"
  },
  {
    "text": "exploit this crosslite scripting um if we can write cookies a lot of times we",
    "start": "3019520",
    "end": "3024960"
  },
  {
    "text": "we can exploit it so billing.microsoft.com that's uh that's where I work and they were nice enough",
    "start": "3024960",
    "end": "3031000"
  },
  {
    "text": "to let me talk about one I found at work so say a postex assess exists in csrf",
    "start": "3031000",
    "end": "3036359"
  },
  {
    "text": "protected page how do we exploit this and there's been some work here but uh I think these are always interesting cases",
    "start": "3036359",
    "end": "3042520"
  },
  {
    "text": "and everyone's a little unique so here's uh here's victim Dave",
    "start": "3042520",
    "end": "3049240"
  },
  {
    "text": "he's clueless he's sitting back there too um he goes to billing.microsoft.com",
    "start": "3049240",
    "end": "3054280"
  },
  {
    "text": "and he's logged in but but then microsoft.com is a big domain and a lot",
    "start": "3054280",
    "end": "3059319"
  },
  {
    "text": "of the subdomains of microsoft.com maybe maybe they're not quite as secure as something like billing right so he",
    "start": "3059319",
    "end": "3065319"
  },
  {
    "text": "visits bug page. microsoft.com there's an xss there that's easy to",
    "start": "3065319",
    "end": "3070799"
  },
  {
    "text": "exploit uh so maybe that xss can set cookies as an attacker to microsoft.com",
    "start": "3070799",
    "end": "3077280"
  },
  {
    "text": "which is over it's the domain over everything and set the path to be more specific so it's slom section vulnerable",
    "start": "3077280",
    "end": "3083960"
  },
  {
    "text": "page. aspx that's where the xss might and then you log in as the attacker so",
    "start": "3083960",
    "end": "3089760"
  },
  {
    "text": "the cookies you set are you're logging in as the attacker and you grab these csrf token values that are legiate",
    "start": "3089760",
    "end": "3095280"
  },
  {
    "text": "because you know those for your attacker so then you make this post request to /um section vulnerable page.",
    "start": "3095280",
    "end": "3101480"
  },
  {
    "text": "aspx as the attacker so now ex now you have script and it's executing in",
    "start": "3101480",
    "end": "3107119"
  },
  {
    "text": "billing.microsoft.com so it's not executing in bug page. microsoft.com anymore but we so because we have the",
    "start": "3107119",
    "end": "3115240"
  },
  {
    "text": "script executing we can actually make request to sl/ payment info.",
    "start": "3115240",
    "end": "3120400"
  },
  {
    "text": "aspx okay but who's this user logged in as now well with this path he's logged",
    "start": "3120400",
    "end": "3126760"
  },
  {
    "text": "in as the victim because we set the path very specifically to this um vulnerable",
    "start": "3126760",
    "end": "3131880"
  },
  {
    "text": "page right so we're only logged in as the attacker for that one page but we can still access content from the victim",
    "start": "3131880",
    "end": "3137480"
  },
  {
    "text": "if we want so here is some of how I did that",
    "start": "3137480",
    "end": "3146520"
  },
  {
    "start": "3139000",
    "end": "3139000"
  },
  {
    "text": "this this kind of shows how it works in this case uh bug page was a fixed bug in",
    "start": "3147319",
    "end": "3153760"
  },
  {
    "text": "social. tet. microsoft.com and it's able to execute script in that",
    "start": "3153760",
    "end": "3159920"
  },
  {
    "text": "subdomain uh this actually isn't very exploitable because it asks if you want to actually leave the domain says are you sure you want to leave and so a real",
    "start": "3159920",
    "end": "3167400"
  },
  {
    "text": "victim would have to click through this then it's now it did the CSR",
    "start": "3167400",
    "end": "3174000"
  },
  {
    "text": "protected post and now we're executing in billing.microsoft.com and we can extract",
    "start": "3174000",
    "end": "3179799"
  },
  {
    "text": "content so the takeaway from that is that if there's xss and a CSF protective",
    "start": "3180280",
    "end": "3185799"
  },
  {
    "text": "value it's probably still exploitable especially on a big site at least in some at least in some scenarios because",
    "start": "3185799",
    "end": "3191880"
  },
  {
    "text": "if you're in the middle it's always almost always exploitable um more generically it's",
    "start": "3191880",
    "end": "3196960"
  },
  {
    "text": "almost always possible to log in as a victim that's what we did with or sorry it's almost always possible to log in a",
    "start": "3196960",
    "end": "3202240"
  },
  {
    "text": "victim as the attacker and so that's kind of what we showed on the ooth examples it's kind of an underlying",
    "start": "3202240",
    "end": "3207359"
  },
  {
    "text": "lining theme we can have our attacker account log the victim",
    "start": "3207359",
    "end": "3212119"
  },
  {
    "text": "in so generic takeways for this talk writing cookies is easy only use post",
    "start": "3212799",
    "end": "3218359"
  },
  {
    "start": "3213000",
    "end": "3213000"
  },
  {
    "text": "request to change State and all post requests require an unguessable csrf value uh csrf tokens are cryptograph",
    "start": "3218359",
    "end": "3225240"
  },
  {
    "text": "cryptographically tied to the session ID cookie and it needs to be tied to oth and if it's not that's a problem this",
    "start": "3225240",
    "end": "3230640"
  },
  {
    "text": "goes for cross domain requests like o 2 where we maybe have to resolve the problem a bit and also csrf protected",
    "start": "3230640",
    "end": "3237440"
  },
  {
    "text": "post xss is usually exploitable there's some more content in the white paper that I couldn't fit here",
    "start": "3237440",
    "end": "3242720"
  },
  {
    "start": "3240000",
    "end": "3240000"
  },
  {
    "text": "it's clickjacking and NL relaying stuff actually it's not it's not complete in a black hat CD but I'll I'll we'll post",
    "start": "3242720",
    "end": "3249000"
  },
  {
    "text": "that soon and that's it so let me know if you have any questions",
    "start": "3249000",
    "end": "3256558"
  },
  {
    "text": "[Applause]",
    "start": "3266080",
    "end": "3269489"
  }
]