[
  {
    "start": "0",
    "end": "189000"
  },
  {
    "text": "thank you for coming to our talk so my name is Gert carofoley and we're going to explain to the cache side-channel",
    "start": "0",
    "end": "6120"
  },
  {
    "text": "attacks we're going to explain how to exploit them where can they be applied and then how you can prevent them so",
    "start": "6120",
    "end": "13530"
  },
  {
    "text": "before starting to speak about them let's let us introduce ourselves so assure myself I'm a PhD candidate in",
    "start": "13530",
    "end": "20160"
  },
  {
    "text": "Worcester Polytechnic Institute in Massachusetts my PhD has mostly been focused on on microarchitecture attacks",
    "start": "20160",
    "end": "27180"
  },
  {
    "text": "in general but we mostly focusing the cloud and well but and lately known as",
    "start": "27180",
    "end": "32700"
  },
  {
    "text": "scenarios and yeah I was also an intern at Intel during that summer and that's",
    "start": "32700",
    "end": "38550"
  },
  {
    "text": "where I met chef a who is gonna present himself now hello everyone my name is",
    "start": "38550",
    "end": "46530"
  },
  {
    "text": "Sofia I am currently working as a technical lead as system Cisco titration",
    "start": "46530",
    "end": "51780"
  },
  {
    "text": "analytics so for those of you who are not familiar with titration we do product that provide full visibility of",
    "start": "51780",
    "end": "58739"
  },
  {
    "text": "the data center in real-time and we also provide automatic automated and dynamic policy generation and enforcement so",
    "start": "58739",
    "end": "65939"
  },
  {
    "text": "before that I used to work at Intel Security Center for Excellence and also Khan's product security group where I",
    "start": "65939",
    "end": "72150"
  },
  {
    "text": "used to work on Io TM mobile platform security infrastructure security and",
    "start": "72150",
    "end": "77549"
  },
  {
    "text": "also application security and before that I was a PhD student my you and",
    "start": "77549",
    "end": "83100"
  },
  {
    "text": "where I used to spend most of my time analyzing system behaviors so before we",
    "start": "83100",
    "end": "89820"
  },
  {
    "text": "start a talk just a quick disclaimer we don't speak for our employer all the opinions and information here are our",
    "start": "89820",
    "end": "96030"
  },
  {
    "text": "responsibility including the mistakes and bad jokes cool so let's start",
    "start": "96030",
    "end": "104759"
  },
  {
    "text": "speaking out - attacks right and right and water cash attacks for me the way I see them is just the approach that an",
    "start": "104759",
    "end": "110130"
  },
  {
    "text": "attacker would take to actually attack the log that we see in the screen well an attacker has many chance with many",
    "start": "110130",
    "end": "115259"
  },
  {
    "text": "options to attack this right you can either internet a brute force attack you can try different passwords like stupid",
    "start": "115259",
    "end": "120750"
  },
  {
    "text": "passwords if he's very sophisticated if you can even insert Hardware trillion inside that and try to see what kind of",
    "start": "120750",
    "end": "126840"
  },
  {
    "text": "keys have been pressed as a general attacker would implement another approach right so basically what you try",
    "start": "126840",
    "end": "133020"
  },
  {
    "text": "to do is he would try to find some other traces that the this dated accession of this security solution leaves and try to take",
    "start": "133020",
    "end": "139740"
  },
  {
    "text": "advantage of those right so gas attacks are kind of the same but instead of our fingerprints what we utilize is the",
    "start": "139740",
    "end": "145560"
  },
  {
    "text": "caches realization so but this is hardly believable right so the fact that just",
    "start": "145560",
    "end": "152040"
  },
  {
    "text": "by knowing the caches is the utilization you are able to recover cryptographic keys and this kind of stuff it's and",
    "start": "152040",
    "end": "157590"
  },
  {
    "text": "this a bit unrealistic or it wasn't realistic but since we have been doing many working in realistic scenarios like",
    "start": "157590",
    "end": "166530"
  },
  {
    "text": "clouds smart phones and you know trust the exhibition environment etcetera these are these attacks are becoming",
    "start": "166530",
    "end": "172380"
  },
  {
    "text": "more and more realistic and also getting the are being echoed by by the news I'm further a security software is threaded",
    "start": "172380",
    "end": "179370"
  },
  {
    "text": "to update their the security features as well in response so we're seeing that finally this kind of attacks are getting",
    "start": "179370",
    "end": "185040"
  },
  {
    "text": "the patient the attention to they deserve but it hasn't been like that a forum since since they exist right so in",
    "start": "185040",
    "end": "191010"
  },
  {
    "start": "189000",
    "end": "189000"
  },
  {
    "text": "fact attacks existed since 2005 where these two beautiful attacks were",
    "start": "191010",
    "end": "196470"
  },
  {
    "text": "implemented right recovering AES and RSA keys but the issues that they were",
    "start": "196470",
    "end": "201720"
  },
  {
    "text": "attacking actually called private resources I'm farther they lacked of kind of an engine area in which they",
    "start": "201720",
    "end": "207570"
  },
  {
    "text": "could be applied practically but luckily in 2013 we started seeing you know",
    "start": "207570",
    "end": "213150"
  },
  {
    "text": "attacks that were applicable across scores right first within application then without the application then across",
    "start": "213150",
    "end": "219959"
  },
  {
    "text": "CPUs across CPU sockets and finally in mobile devices right so we see the amount of work that has been done in the",
    "start": "219959",
    "end": "227459"
  },
  {
    "text": "last in the last three years in the last three four years and also how we increase the practicality in this and actually if we see the dream I am",
    "start": "227459",
    "end": "234360"
  },
  {
    "text": "expecting this to even grow more in the next years so I'm expecting these attacks to be applied also in more",
    "start": "234360",
    "end": "239730"
  },
  {
    "text": "immemorial sticker scenarios um but let's see how they work right so um the",
    "start": "239730",
    "end": "245760"
  },
  {
    "text": "first thing to define here is for the cache is right the cache is just mainly a fast memory that you put a fast and",
    "start": "245760",
    "end": "251570"
  },
  {
    "text": "small memory that you put between the CPU and the main memory such that you don't have to access any memory all the",
    "start": "251570",
    "end": "257310"
  },
  {
    "text": "time which would be really a slow but instead you access this cache which actually holds data that is likely to be",
    "start": "257310",
    "end": "265020"
  },
  {
    "text": "accessed in an antioxidant but you know we have systems nowadays",
    "start": "265020",
    "end": "270879"
  },
  {
    "text": "that have several levels of cash right that's missing in the picture the question is which one do we pick for",
    "start": "270879",
    "end": "276759"
  },
  {
    "text": "tech right and and indeed um what we see what the main difference between between the level one and level two questions",
    "start": "276759",
    "end": "283539"
  },
  {
    "text": "absolute cash is actually that - is usually shared occur score so that's that's a good it's a good thing because",
    "start": "283539",
    "end": "289930"
  },
  {
    "text": "we can attack across course I'm not only if we are Korca located farther the data",
    "start": "289930",
    "end": "295900"
  },
  {
    "text": "cache is also usually exhibit inclusiveness the inclusiveness property usually so this means that any data",
    "start": "295900",
    "end": "302289"
  },
  {
    "text": "exists in the upper level caches will exist in the last of the cache and also we have a high resolution in the last",
    "start": "302289",
    "end": "308199"
  },
  {
    "text": "solar cache so basically we don't we want to distinguish a lateral cache access and a main memory access it will",
    "start": "308199",
    "end": "313479"
  },
  {
    "text": "be much easier to distinguish in a level one and level two access so having",
    "start": "313479",
    "end": "319719"
  },
  {
    "start": "319000",
    "end": "319000"
  },
  {
    "text": "identified our target um so let's try to see how it works right so how do cache",
    "start": "319719",
    "end": "325180"
  },
  {
    "text": "attacks work nowadays haloo caches work nowadays sorry um so mainly they we have set associative caches that means that caches are",
    "start": "325180",
    "end": "331419"
  },
  {
    "text": "divided into equally sized partitions called set and the location of a",
    "start": "331419",
    "end": "336729"
  },
  {
    "text": "particular memory block in the cache is going to be defi decided by the physical address right so basically the us a you",
    "start": "336729",
    "end": "343150"
  },
  {
    "text": "should see the virtual address but this would get translated into a physical address that will be divided into three main fields the cache tag the set on the",
    "start": "343150",
    "end": "350440"
  },
  {
    "text": "byte field and the byte field actually selects the binding which you're going to be position in the in the same cache",
    "start": "350440",
    "end": "356650"
  },
  {
    "text": "line the set field will select the set to occupy in the cache and the cache tag will be used to compare so for us the",
    "start": "356650",
    "end": "363400"
  },
  {
    "text": "important one is going to be the set number because that's the one we're going to utilize to to create contention",
    "start": "363400",
    "end": "370050"
  },
  {
    "text": "so now that we know how more or less they work and let's try to see what can we do how can we attack them right and",
    "start": "370050",
    "end": "375819"
  },
  {
    "start": "372000",
    "end": "372000"
  },
  {
    "text": "the first attack that that showed up right in the rascal cache was the flash and reload back which actually spree I",
    "start": "375819",
    "end": "381669"
  },
  {
    "text": "mean requires two main things to work the first one that we have memory notification so that we have some kind",
    "start": "381669",
    "end": "386710"
  },
  {
    "text": "of mechanisms mechanism in the system that is such that allows us to or that allows users to share memory pages on",
    "start": "386710",
    "end": "393159"
  },
  {
    "text": "identical and read-only memory pages so instead of having a wasted copies of",
    "start": "393159",
    "end": "398589"
  },
  {
    "text": "read-only memory pages the system will share them such that both parties access access the",
    "start": "398589",
    "end": "404229"
  },
  {
    "text": "same our physical memory page and although this might seem threatening and might seem unrealistic the truth is is",
    "start": "404229",
    "end": "410710"
  },
  {
    "text": "implemented actually by default in in Linux in Kim in KBM of course in VMware it was implemented by default but we",
    "start": "410710",
    "end": "418270"
  },
  {
    "text": "actually notify them about our findings about how can we utilize this to actually do damage and they actually",
    "start": "418270",
    "end": "424870"
  },
  {
    "text": "gave us this CV number and we disable it and now it's not implemented by default and lastly we see it in Android as well",
    "start": "424870",
    "end": "431710"
  },
  {
    "text": "with the C code mechanism and the second requirement is actually that you have a flash instruction in the instruction set",
    "start": "431710",
    "end": "437800"
  },
  {
    "text": "architecture so meaning that you actually need an instruction instruction set architecture that allows you to",
    "start": "437800",
    "end": "443169"
  },
  {
    "text": "evict something from the from it from the from the cache so if you meet these",
    "start": "443169",
    "end": "450160"
  },
  {
    "text": "two requirements the way you can attack this is the in following way so basically let's say you have a read memory block that you share with a big",
    "start": "450160",
    "end": "456490"
  },
  {
    "text": "team and that you want to know how it's been utilized right so mainly what the attacker first does is just flash this",
    "start": "456490",
    "end": "461590"
  },
  {
    "text": "memory block from the cache meaning that he will utilize the set instruction I",
    "start": "461590",
    "end": "466720"
  },
  {
    "text": "from the instruction set architecture to actually flash the memory block from the cache next is going to wait until a",
    "start": "466720",
    "end": "472630"
  },
  {
    "text": "victim for some cycles until the victim or to see whether the victim makes or doesn't make an access if she does make",
    "start": "472630",
    "end": "478570"
  },
  {
    "text": "an accessory will put it back she will put the memory block back in the cache and now that actually accesses the flash",
    "start": "478570",
    "end": "484090"
  },
  {
    "text": "memory block if he sees a fast access time he it means that um you know the",
    "start": "484090",
    "end": "489520"
  },
  {
    "text": "victim access the memory block because he is returning from the cache if not he will actually you know figure out that",
    "start": "489520",
    "end": "496210"
  },
  {
    "text": "the victim even use the memory block while he was wait so um this is a quite",
    "start": "496210",
    "end": "503139"
  },
  {
    "text": "restrictive attack right but what did what do we gain of course it has many advantages right the first one is that",
    "start": "503139",
    "end": "508349"
  },
  {
    "text": "it's low noise so basically it's very resistant to no injuries meaning that we're only dealing with one memory block",
    "start": "508349",
    "end": "514320"
  },
  {
    "text": "we're actually only flashing and building one memory block and that means that if some noisy process in the system",
    "start": "514320",
    "end": "519789"
  },
  {
    "text": "wants to create or is willing to create noise you will have to fill an entire set to create the noisy access and",
    "start": "519789",
    "end": "525070"
  },
  {
    "text": "that's quite a lot the second advantage is that surprisingly it's applicable across the use of it why because the",
    "start": "525070",
    "end": "531520"
  },
  {
    "text": "flash instruction doesn't only flash from the lasso we're also invalidate the memory block and that will provoke that other CPU",
    "start": "531520",
    "end": "538279"
  },
  {
    "text": "sockets also invalid them will block from the cashier I'm further since we have some fast links between CPUs to",
    "start": "538279",
    "end": "544850"
  },
  {
    "text": "retrieve data faster from another CPU circuits cache these abacus is fully",
    "start": "544850",
    "end": "549860"
  },
  {
    "text": "applicable in across the use of it and also for the same reason it does we don't require the inclusiveness property",
    "start": "549860",
    "end": "555709"
  },
  {
    "text": "in this one because the invalidate will invalidate the evaluation will invalidate the block even in non-inclusive cache so um in the",
    "start": "555709",
    "end": "564410"
  },
  {
    "text": "disadvantages side the requirements might be hard to achieve in some Islamic scenarios so um for example in in",
    "start": "564410",
    "end": "571399"
  },
  {
    "text": "commercial clouds usually memory duplication is not implemented or for example in most our mobile devices the",
    "start": "571399",
    "end": "578149"
  },
  {
    "text": "flash instruction is not available from usual space and also you cannot recover statically allocated data what do we",
    "start": "578149",
    "end": "584240"
  },
  {
    "text": "mean by this it we can only recover that statically allocated data unquote so basically",
    "start": "584240",
    "end": "590120"
  },
  {
    "text": "things like dynamically allocated data goes to the heap we cannot record information from them with this attack",
    "start": "590120",
    "end": "596149"
  },
  {
    "text": "mainly because um it depends on memory application so now that we see the most",
    "start": "596149",
    "end": "603380"
  },
  {
    "text": "receipt we have seen the most restrictive attack let's see you know what happens if we start relaxing assumption right what happens if we",
    "start": "603380",
    "end": "609680"
  },
  {
    "text": "don't have such a flash instruction in instruction set architecture well can we still attack probably yes right the only thing we just need is to",
    "start": "609680",
    "end": "616220"
  },
  {
    "text": "actually fill the set in which the memory doctor sites right and how can we do that remember that the location of a",
    "start": "616220",
    "end": "623480"
  },
  {
    "text": "memory block in the cache will depend actually in the physical address and it turns out that um this offset part of",
    "start": "623480",
    "end": "629690"
  },
  {
    "text": "the virtual to physical address translation does not get translated the issue is that they offset with the",
    "start": "629690",
    "end": "636709"
  },
  {
    "text": "number of bits in the offset it's actually quite low for regular pages and therefore we don't gain enough",
    "start": "636709",
    "end": "641899"
  },
  {
    "text": "information about the location of our memory block in the last other cache however we can actually increase the",
    "start": "641899",
    "end": "648410"
  },
  {
    "text": "offset how utilize the huge pages right so this will give us enough information about where our our the movie look that",
    "start": "648410",
    "end": "656300"
  },
  {
    "text": "we want to utilize to fill the set up are gonna go into the cache so once we",
    "start": "656300",
    "end": "663110"
  },
  {
    "text": "have that the only thing we have to do is just you know if the memory block here we just create additional memory",
    "start": "663110",
    "end": "669980"
  },
  {
    "text": "blocks that will actually feel fill the set and actually they will edit the read my blog now we're going to wait as a",
    "start": "669980",
    "end": "678530"
  },
  {
    "text": "digress again to see whether the big theme access or doesn't make an access to the rhythm would look if she does she",
    "start": "678530",
    "end": "683570"
  },
  {
    "text": "will put it back in the cachet and as before we again reload right I'm videos",
    "start": "683570",
    "end": "689420"
  },
  {
    "text": "only the read memory block remember and actually if it has been utilized back the victim we will get access to it",
    "start": "689420",
    "end": "695510"
  },
  {
    "text": "quite fast if not we will see that it takes a slow time so what did we gain",
    "start": "695510",
    "end": "704210"
  },
  {
    "start": "701000",
    "end": "701000"
  },
  {
    "text": "with this right so mostly we gain the fact that you know with applicable in most processors in the processors",
    "start": "704210",
    "end": "710720"
  },
  {
    "text": "without the flash instruction for example ARM processors right we only know one one one smartphone that",
    "start": "710720",
    "end": "717080"
  },
  {
    "text": "actually has this class instruction implemented from user space and the coincide with you can only target",
    "start": "717080",
    "end": "723230"
  },
  {
    "text": "statically allocated memory we're still dealing with those few slices will sorry",
    "start": "723230",
    "end": "728390"
  },
  {
    "text": "we are dealing with LLC as Isis this means that in Intel for example the cache is actually not only divided into",
    "start": "728390",
    "end": "733970"
  },
  {
    "text": "sets but also into a slices that are selected with an undocumented function but luckily there are many words that",
    "start": "733970",
    "end": "740180"
  },
  {
    "text": "have reverse engineer this function and we can actually predict whatever the data will go also it only works with",
    "start": "740180",
    "end": "748100"
  },
  {
    "text": "inclusive caches as we don't have any flash instruction now to to the invalidate data but we just rely on",
    "start": "748100",
    "end": "753140"
  },
  {
    "text": "evictions and for the same reason in only working in the same CPU socket",
    "start": "753140",
    "end": "758920"
  },
  {
    "text": "alright what it would relax is the second assumption right what if we don't want to rely on shared memory pages",
    "start": "759880",
    "end": "765860"
  },
  {
    "text": "right we can what can we still do we we certainly cannot just predict now the the utilization of a particular memory",
    "start": "765860",
    "end": "771710"
  },
  {
    "text": "block but we can do is predict the utilization of a particular set in the cache how do we do is we mainly are",
    "start": "771710",
    "end": "778850"
  },
  {
    "text": "going to fill the caches before with our own memory blocks we pick a set in the cache and we feel it then again we wait",
    "start": "778850",
    "end": "785960"
  },
  {
    "text": "until the victim does or doesn't make an access to that set if she does she will have to put a on memory block for which",
    "start": "785960",
    "end": "791780"
  },
  {
    "text": "we don't have access into the cache and she will have to pick one of our memory blocks and now weary access our twelve",
    "start": "791780",
    "end": "799520"
  },
  {
    "text": "memory blocks again and what we will see is that the eleven of the I'm from the cache and the last one can't function in memory right so",
    "start": "799520",
    "end": "806389"
  },
  {
    "text": "meaning that someone utilize the settler priming so this is actually called the prime number of attack and the",
    "start": "806389",
    "end": "812989"
  },
  {
    "text": "advantages of it it's basically that first of all it doesn't need a shared",
    "start": "812989",
    "end": "817999"
  },
  {
    "start": "813000",
    "end": "813000"
  },
  {
    "text": "memory and that actually you can have a broader impact for example you can",
    "start": "817999",
    "end": "823850"
  },
  {
    "text": "attack things like like a commercial cloud and so on so we saw yesterday a talk in which utilized this attack to",
    "start": "823850",
    "end": "830799"
  },
  {
    "text": "perform a color channel and also it can target both the static and dynamically",
    "start": "830799",
    "end": "837079"
  },
  {
    "text": "allocated memory this is important this is very important because now we can get information out memory that actually is",
    "start": "837079",
    "end": "844489"
  },
  {
    "text": "allocating the heat on the con side actually it's nicer than flash in real time the I'm a bit and reload why",
    "start": "844489",
    "end": "850790"
  },
  {
    "text": "because we're dealing with the probe of 12 memory blocks or 60 mm 860 more",
    "start": "850790",
    "end": "856939"
  },
  {
    "text": "blocks instead of one we're dealing with LC slices again uh for the same reason",
    "start": "856939",
    "end": "861949"
  },
  {
    "text": "as before it only works with inclusive caches it only works in the same CPU socket on further we need to identify the target set that we want to probe",
    "start": "861949",
    "end": "868579"
  },
  {
    "text": "which is actually coming tricky but coming on with an app trainer right we",
    "start": "868579",
    "end": "875269"
  },
  {
    "start": "874000",
    "end": "874000"
  },
  {
    "text": "have seen three attacks that work in many different there many different requirements and what we would like to see also is how come these attacks",
    "start": "875269",
    "end": "881059"
  },
  {
    "text": "retrieve information right so what you see in the in the slide is a Montgomery is a decryption",
    "start": "881059",
    "end": "886480"
  },
  {
    "text": "so the typical decryption that you would do with an NSA operation right and so",
    "start": "886480",
    "end": "891499"
  },
  {
    "text": "mainly the key is in this case and this process bit by bit alright so if the bit is a 0 what we",
    "start": "891499",
    "end": "898160"
  },
  {
    "text": "will execute is the first two instruction in the branch if the bit is a 1 we will execute the other the other",
    "start": "898160",
    "end": "903649"
  },
  {
    "text": "two instructions so this doesn't look very good right so mainly because it's a has key dependent branches right so we",
    "start": "903649",
    "end": "909679"
  },
  {
    "text": "should avoid this how how would an attack this is put Prakash attacks actually so how would a Akashi attack",
    "start": "909679",
    "end": "915350"
  },
  {
    "text": "attack this so for example let's pick the second instruction in the first branch and yeah let's so since this is",
    "start": "915350",
    "end": "922999"
  },
  {
    "text": "code and we the attacker and the victim if we're in a system that uses memory duplication we will share this with a",
    "start": "922999",
    "end": "929389"
  },
  {
    "text": "with a with a victim so something we can do is basically pick that instruction flash it beforehand",
    "start": "929389",
    "end": "935540"
  },
  {
    "text": "then let the victim perform one iteration in this loop if she actually",
    "start": "935540",
    "end": "941120"
  },
  {
    "text": "is processing a 1-bit or sudo bit she will actually have to utilize this",
    "start": "941120",
    "end": "947149"
  },
  {
    "text": "instruction that we flashed I shall have to put it back in the cache if not this will not happen and again the attacker just reloads",
    "start": "947149",
    "end": "952940"
  },
  {
    "text": "there and what he will see is that again if the victim process is zero read he",
    "start": "952940",
    "end": "958279"
  },
  {
    "text": "will see this instruction coming from the cache if not he will see the instruction coming from memory and therefore she can actually reverse the",
    "start": "958279",
    "end": "964370"
  },
  {
    "text": "series and was previously this was with flash and real but what happens if we",
    "start": "964370",
    "end": "970759"
  },
  {
    "text": "actually don't have an replication we're kind of the same thing the only the only the only period that we have to do is",
    "start": "970759",
    "end": "977209"
  },
  {
    "text": "identify to which set that instruction goes but if we have identified that the only thing we have to do is just fill",
    "start": "977209",
    "end": "983149"
  },
  {
    "text": "the set in which that instruction resides again let the victim perform one iteration of this loop if the victim",
    "start": "983149",
    "end": "989029"
  },
  {
    "text": "uses the data instructions you will have to put it back in the cache and evict one of our memory blocks and when we",
    "start": "989029",
    "end": "995690"
  },
  {
    "text": "reload our own memory blocks again what we would see is that if the victim utilized the instruction that we are",
    "start": "995690",
    "end": "1001420"
  },
  {
    "text": "priming or that we're trying to get information from we will see that um one",
    "start": "1001420",
    "end": "1006430"
  },
  {
    "text": "block comes from the memory instead of all from the cache so that's how we can utilize these two attacks to actually get the full arrest a team in two",
    "start": "1006430",
    "end": "1014079"
  },
  {
    "text": "separate the scenario so this is kind of the summary of the cons and pros of each",
    "start": "1014079",
    "end": "1021130"
  },
  {
    "start": "1017000",
    "end": "1017000"
  },
  {
    "text": "of the attacks so basically the first two are requirement of the application of flash hundreds and victims of the",
    "start": "1021130",
    "end": "1026530"
  },
  {
    "text": "required application the last one doesn't the first the flash area requires the flash instruction as well",
    "start": "1026530",
    "end": "1032620"
  },
  {
    "text": "that we can reload and Prem improved on the first one we can target the",
    "start": "1032620",
    "end": "1037990"
  },
  {
    "text": "statically allocated memory on primer proof can actually target statically and",
    "start": "1037990",
    "end": "1043000"
  },
  {
    "text": "dynamically allocated memory and the first two are very resistant to noise while premium proof is not the material",
    "start": "1043000",
    "end": "1048428"
  },
  {
    "text": "does not that resistant cool so let's",
    "start": "1048429",
    "end": "1054010"
  },
  {
    "text": "see where can we apply this so basically this is our well and can be executed",
    "start": "1054010",
    "end": "1060190"
  },
  {
    "text": "under the assumption of hardcore resiliency right so what can we welcome",
    "start": "1060190",
    "end": "1065260"
  },
  {
    "text": "with this the first a scenario that comes to my mind for hydropower seems to use the cloud right so pretty much in the cloud is",
    "start": "1065260",
    "end": "1071580"
  },
  {
    "text": "quite ECD it's like it's quite easy to actually I get to share power with another person you just rent the VM and",
    "start": "1071580",
    "end": "1077249"
  },
  {
    "text": "you know you'll get to share however with another person right you know who but we'll talk about that later so um",
    "start": "1077249",
    "end": "1083970"
  },
  {
    "text": "and although the isolation is pretty well provided at the software level at the hardware level is not that that will",
    "start": "1083970",
    "end": "1089279"
  },
  {
    "text": "provide it right an example of such an exact it's the RSA key retrieval that we did in Amazon ec2 so we were able to",
    "start": "1089279",
    "end": "1096350"
  },
  {
    "text": "record RSA decryption key or secret key in across virtual machine cinemas",
    "start": "1096350",
    "end": "1103229"
  },
  {
    "text": "versatile so some advantages of this scenario you get actually to own a",
    "start": "1103229",
    "end": "1108779"
  },
  {
    "text": "bitwise operating system so you get access to everything that virtualized operating system provides right for",
    "start": "1108779",
    "end": "1113940"
  },
  {
    "text": "example timers Fang green timers and huge pages if the duplication is enabled",
    "start": "1113940",
    "end": "1118979"
  },
  {
    "text": "also all the attacks that we have seen are applicable if not only prime probes difficult and they coincide um so the",
    "start": "1118979",
    "end": "1127889"
  },
  {
    "text": "main one for me is that I'd request for residency or at least it requires co-recipients identification and we will",
    "start": "1127889",
    "end": "1133259"
  },
  {
    "text": "see how can we do this later and also the high amount of noise that is in the cloud because mainly they work",
    "start": "1133259",
    "end": "1138809"
  },
  {
    "text": "load that you execute in the color match have it and then in other scenarios so",
    "start": "1138809",
    "end": "1144929"
  },
  {
    "text": "how do we find for regimes right are this how do we do it for our attack right for our RSA attack so the main",
    "start": "1144929",
    "end": "1150749"
  },
  {
    "text": "thing that we did is you know utilize the same information we again utilize the last level cache for this right so",
    "start": "1150749",
    "end": "1156289"
  },
  {
    "text": "the way we did this is we had the decryption server RSA decryption surveilling one VM and we stir the spin",
    "start": "1156289",
    "end": "1163169"
  },
  {
    "text": "in other BMS right and basically what we did is just issue a request to the decryption server and try to see whether",
    "start": "1163169",
    "end": "1169979"
  },
  {
    "text": "the information that we got from the cache much what we expect for the RSA",
    "start": "1169979",
    "end": "1175499"
  },
  {
    "text": "decryption server if it does then we have four resiliency achieved if not we have to open more vm so we have to",
    "start": "1175499",
    "end": "1181349"
  },
  {
    "text": "actually spend quite a quite a bit of money on this and time actually but we finally with with a DBMS we were able to",
    "start": "1181349",
    "end": "1188429"
  },
  {
    "text": "find a Korean one with with the target and after that well I put what you see",
    "start": "1188429",
    "end": "1195479"
  },
  {
    "text": "there is an example of how is a trace looks like so basically the exponentiations are quite distinguishable from the rest of the",
    "start": "1195479",
    "end": "1201840"
  },
  {
    "text": "trace and other works actually utilize for example a memory bus login the tax code",
    "start": "1201840",
    "end": "1207220"
  },
  {
    "text": "is cool so uh unfortunately I don't have",
    "start": "1207220",
    "end": "1212260"
  },
  {
    "text": "the time and you know to go to a motions to and retrieve is thank you but I'm going to show you like how cache attacks",
    "start": "1212260",
    "end": "1219130"
  },
  {
    "text": "can actually bypass the isolation and in kayvyun for example right so what we",
    "start": "1219130",
    "end": "1225160"
  },
  {
    "text": "have here is basically a as decryption server that is you know issuing",
    "start": "1225160",
    "end": "1231280"
  },
  {
    "text": "decryptions with our encryption story with with Anunnaki basically what you",
    "start": "1231280",
    "end": "1236710"
  },
  {
    "text": "see in the screen is just the so do you say AES 128 so we see the ten run kiss",
    "start": "1236710",
    "end": "1242700"
  },
  {
    "text": "byte by byte um and yeah it doesn't matter which round key you recover as long as you recover one you can reverse",
    "start": "1242700",
    "end": "1248560"
  },
  {
    "text": "it and recover the others so that's actually what we are going to try to do right so we're going to with",
    "start": "1248560",
    "end": "1254320"
  },
  {
    "text": "from the other virtual machine we're trying to see well issue in we're telling the decryption for encryption",
    "start": "1254320",
    "end": "1260350"
  },
  {
    "text": "server to encrypt packages for us and then we're going to try to see what the",
    "start": "1260350",
    "end": "1265660"
  },
  {
    "text": "cache organization is and we're trying to recover the key from there yeah I'm",
    "start": "1265660",
    "end": "1272530"
  },
  {
    "text": "basically so um yeah we'll see we're going to see results either let me first show you up what that tag consistent",
    "start": "1272530",
    "end": "1279550"
  },
  {
    "text": "right so um many what we're doing is what you see in the in the upper slide right so um a yes let me just you know",
    "start": "1279550",
    "end": "1288750"
  },
  {
    "text": "AES is utilized t-tables or what we call a substitution tables that are key",
    "start": "1288750",
    "end": "1295300"
  },
  {
    "start": "1290000",
    "end": "1290000"
  },
  {
    "text": "dependant alright so basically those the entries that you access in the substitution tables are dependent on the",
    "start": "1295300",
    "end": "1300640"
  },
  {
    "text": "key that you access that you have in this case that's what we are actually exploiting these tables are shared if",
    "start": "1300640",
    "end": "1307000"
  },
  {
    "text": "you are under the memory allocation systems um so yeah what the problem is that each kassing holds more than one",
    "start": "1307000",
    "end": "1313720"
  },
  {
    "text": "table entry so basically you cannot recover find that much of a fine grained information but still if you run in",
    "start": "1313720",
    "end": "1318730"
  },
  {
    "text": "statistics what you will see is that you know for certain bytes the key will be",
    "start": "1318730",
    "end": "1325210"
  },
  {
    "text": "always well for certain ciphertext byte values some table",
    "start": "1325210",
    "end": "1331360"
  },
  {
    "text": "entries will be always used or will be substantially are more frequently use and then for the year and that's what we actually do that's",
    "start": "1331360",
    "end": "1337810"
  },
  {
    "text": "what we exploit for for the attack and if we see this is the key that we got and if we compare to the actual visa",
    "start": "1337810",
    "end": "1346270"
  },
  {
    "text": "will be drank with roofies the last the last string of bit of bytes that you see it that's the latter on key and that's",
    "start": "1346270",
    "end": "1352240"
  },
  {
    "text": "what we are trying to recover so we see that the first bytes are 1 for a 1 B 4 a",
    "start": "1352240",
    "end": "1357370"
  },
  {
    "text": "0 and in this case I'm printing the 3 most likely candidates for each byte so",
    "start": "1357370",
    "end": "1363040"
  },
  {
    "text": "we see that the most likely candidate for the first bite is 1 4 so we got that correctly the second most likely time we",
    "start": "1363040",
    "end": "1368830"
  },
  {
    "text": "can lead is a 1 which we got that correctly the third one is default which we got that correctly as well and a for",
    "start": "1368830",
    "end": "1374800"
  },
  {
    "text": "the same thing so for example the fifth",
    "start": "1374800",
    "end": "1380380"
  },
  {
    "text": "the fourth byte we didn't recover it correctly actually but the others the other 3 5 7 & 8 we recover correctly",
    "start": "1380380",
    "end": "1388480"
  },
  {
    "text": "actually 848 3f and we see they're 848 3f so you see with a better purpose",
    "start": "1388480",
    "end": "1394060"
  },
  {
    "text": "person of course all the qit will be reliably and God would have gotten",
    "start": "1394060",
    "end": "1399700"
  },
  {
    "text": "really all of the kid bytes but we got the substantially high number of key bites correctly actually so so that that",
    "start": "1399700",
    "end": "1406390"
  },
  {
    "text": "was quite good umm so yeah we were able to actually record a es key that should be a",
    "start": "1406390",
    "end": "1414250"
  },
  {
    "text": "computationally infeasible with the additional power that we have today we just utilizing the or just checking how",
    "start": "1414250",
    "end": "1421330"
  },
  {
    "text": "the higher utilization was we were able to recover to recover the key right so that's that's how powerful crash attacks",
    "start": "1421330",
    "end": "1428920"
  },
  {
    "start": "1427000",
    "end": "1427000"
  },
  {
    "text": "can be and actually we did that in less than a minute right so that was quite good umm so yeah what else can we can",
    "start": "1428920",
    "end": "1435520"
  },
  {
    "text": "you apply Casa that's right so you can actually apply them as us as a malicious JavaScript execution um so if you embed",
    "start": "1435520",
    "end": "1443470"
  },
  {
    "text": "that into a JavaScript execution basically what you will get to do is you will get your target to access a your",
    "start": "1443470",
    "end": "1449140"
  },
  {
    "text": "targeted website or your victim to access the targeted website and the local browser will actually execute the",
    "start": "1449140",
    "end": "1456210"
  },
  {
    "text": "the JavaScript code in his local machine yeah even some box and so on but still",
    "start": "1456210",
    "end": "1462700"
  },
  {
    "text": "you will get to use the same color as the victim right so and that's what we are trying to split",
    "start": "1462700",
    "end": "1469059"
  },
  {
    "text": "I'm an example of this is the incognito browsing profile in that oriental perform so they were able to actually",
    "start": "1469059",
    "end": "1474730"
  },
  {
    "text": "retrieve websites that were accessing incognito mode right so that's again how",
    "start": "1474730",
    "end": "1479919"
  },
  {
    "text": "powerful these things can be so what some things that some pros that we see",
    "start": "1479919",
    "end": "1486820"
  },
  {
    "text": "in this scenario where they previous one so first of all we don't need to refine the precision target anymore since the",
    "start": "1486820",
    "end": "1492070"
  },
  {
    "text": "target will actually access our website so we don't need to bother about that and also the attack is executed in the",
    "start": "1492070",
    "end": "1498010"
  },
  {
    "text": "local machine which is actually for which the workloads are going to be much less saving and in the cloud also are",
    "start": "1498010",
    "end": "1505660"
  },
  {
    "text": "well in the in the disadvantages sites the servlet cannot be applied as Java",
    "start": "1505660",
    "end": "1510700"
  },
  {
    "text": "Script is a very high level language and actually a flash and reload requires very low-level instructions that are not",
    "start": "1510700",
    "end": "1517120"
  },
  {
    "text": "available in JavaScript and further fine grains are fine fine grained timers are actually getting harder and harder to",
    "start": "1517120",
    "end": "1523030"
  },
  {
    "text": "achieve but still they're there ways to trick this but they are not you know as simple as utilizing a timing country",
    "start": "1523030",
    "end": "1532320"
  },
  {
    "start": "1532000",
    "end": "1532000"
  },
  {
    "text": "what is come with like cache attacks right so where else can we get to to execute things in the same hardware well",
    "start": "1532320",
    "end": "1538510"
  },
  {
    "text": "for example as a smartphone applications right so which are supposed to be isolated pretty well by date by the you",
    "start": "1538510",
    "end": "1546070"
  },
  {
    "text": "know executing in isolate environment etc but again both both applications",
    "start": "1546070",
    "end": "1552340"
  },
  {
    "text": "will execute in the same hardware and therefore you can get advantage of this to perform a cache attacks more than",
    "start": "1552340",
    "end": "1557380"
  },
  {
    "text": "that the main advantage that I see in this scenario is that is the fact that you can embed an attack into an",
    "start": "1557380",
    "end": "1562990"
  },
  {
    "text": "innocent-looking binary and basically just get like online repositories to not",
    "start": "1562990",
    "end": "1569530"
  },
  {
    "text": "to detected some as malicious right so as cache attacks actually done or microarchitecture detection children in",
    "start": "1569530",
    "end": "1575679"
  },
  {
    "text": "general don't look that malicious so yeah we have seen actually AES here still across applications in this",
    "start": "1575679",
    "end": "1582669"
  },
  {
    "text": "in this kind of a scenario and what we've seen this kind in smartphones is",
    "start": "1582669",
    "end": "1587919"
  },
  {
    "text": "that usually duplication is used for example in Android I mean we're dealing with low ram devices right so it's",
    "start": "1587919",
    "end": "1593590"
  },
  {
    "text": "actually understandable that we want to optimize optimize the memory as much as possible so we saw it we see it in",
    "start": "1593590",
    "end": "1600309"
  },
  {
    "text": "android with zero and although we get to share my memory",
    "start": "1600309",
    "end": "1605379"
  },
  {
    "text": "with with a potential victim actually we only share new core libraries right what see God currently understands by core",
    "start": "1605379",
    "end": "1611919"
  },
  {
    "text": "libraries so that means that all the rest of the libraries will actually be private which application so we're the",
    "start": "1611919",
    "end": "1618159"
  },
  {
    "text": "application is enabled yes but we have a limited targets on that and also you",
    "start": "1618159",
    "end": "1624429"
  },
  {
    "text": "know for me it has a nice deployment as I said before we get to a reach out of people just by putting a an apparently",
    "start": "1624429",
    "end": "1632019"
  },
  {
    "text": "innocent binary that contains a cache attack in an online repository and get",
    "start": "1632019",
    "end": "1637989"
  },
  {
    "text": "you know convince people to download it in the con side as I said before the",
    "start": "1637989",
    "end": "1643179"
  },
  {
    "text": "flash instruction is actually difficult to find in smartphones so only Samsung is six for now that we know has enabled",
    "start": "1643179",
    "end": "1649869"
  },
  {
    "text": "by user space also we see two random replacement policies in caches which",
    "start": "1649869",
    "end": "1655899"
  },
  {
    "text": "actually make things difficult to perform right so although they have been reverse engineer but still are they are",
    "start": "1655899",
    "end": "1662409"
  },
  {
    "text": "not as tricky as as with Intel devices for x86 devices and also the scalability",
    "start": "1662409",
    "end": "1668859"
  },
  {
    "text": "program right so it's very likely as an attack that works in one smartphone will not work in the other one why because they are very very dependent on on",
    "start": "1668859",
    "end": "1675220"
  },
  {
    "text": "several algorithms that are different across devices right for example we see smartphones that are non-inclusive",
    "start": "1675220",
    "end": "1681820"
  },
  {
    "text": "some some of them that are inclusive some of the some of them that implement weird features like lockdown which means",
    "start": "1681820",
    "end": "1687429"
  },
  {
    "text": "that actually you cannot anything from any other phone from any other app or etc right so on these kind of things",
    "start": "1687429",
    "end": "1695019"
  },
  {
    "text": "make actually this scenario a little bit harder to to attack and the last one",
    "start": "1695019",
    "end": "1700509"
  },
  {
    "start": "1700000",
    "end": "1700000"
  },
  {
    "text": "that for me the most promising one is actually uh the trusted execution environments right so they're becoming very popular with the release of HDX",
    "start": "1700509",
    "end": "1707230"
  },
  {
    "text": "right and with the wide adoption of a trust zone and basically again we're supposed to be isolated from any other",
    "start": "1707230",
    "end": "1714220"
  },
  {
    "text": "in the trust electrocution in clip we're supposed to be isolated from any other software running in the same hardware",
    "start": "1714220",
    "end": "1719730"
  },
  {
    "text": "but still you know both and trusted and trusted wars utilize the same hardware",
    "start": "1719730",
    "end": "1724809"
  },
  {
    "text": "and that means that um we still get to to actually execute the attacks that we",
    "start": "1724809",
    "end": "1730990"
  },
  {
    "text": "said before right or at least some of them and in this case we is we can consider that the operating",
    "start": "1730990",
    "end": "1736600"
  },
  {
    "text": "system is malicious we can actually do either increasingly that actual host winglet attacks right so we have seen",
    "start": "1736600",
    "end": "1743140"
  },
  {
    "text": "actually attacks that perform AES and I see two recoveries right occurs in these two scenarios so and I said that this is",
    "start": "1743140",
    "end": "1751840"
  },
  {
    "text": "the most promising scenario for me because we have several advantages I obviously want this advantage that I",
    "start": "1751840",
    "end": "1756909"
  },
  {
    "text": "miss the fact that a high-resolution attack like fresh Android is not applicable because education is actually you should disable between our hardware",
    "start": "1756909",
    "end": "1764140"
  },
  {
    "text": "and sorry--but interested in untrusted world but in the ended Vantage side I think many right so for example you get",
    "start": "1764140",
    "end": "1770140"
  },
  {
    "text": "to you get access to resources will the oils can be malicious and therefore you get access to resources that actually",
    "start": "1770140",
    "end": "1776500"
  },
  {
    "text": "are not present in other scenarios also we don't need to find a policy on target we just attack whatever is been running",
    "start": "1776500",
    "end": "1782669"
  },
  {
    "text": "in the in the main cliff and also further so you get a limited amount of",
    "start": "1782669",
    "end": "1788950"
  },
  {
    "text": "noise and of noise right because you can actually be really stop the N cliff to",
    "start": "1788950",
    "end": "1794440"
  },
  {
    "text": "utter every memory access so the way it would work is you have a malicious operating system that just Prime's the",
    "start": "1794440",
    "end": "1800260"
  },
  {
    "text": "cache at the beginning then we actually let the victim execute one and only or",
    "start": "1800260",
    "end": "1806890"
  },
  {
    "text": "hopefully one or two memory access and then we stop the victim right as the operating system can do that he can stop",
    "start": "1806890",
    "end": "1813909"
  },
  {
    "text": "the big t matter very few memory accesses and now probe the cache again and therefore he gets a very high timer",
    "start": "1813909",
    "end": "1820210"
  },
  {
    "text": "solution which is actually something that you don't get in the other scenarios yeah now next we will talk",
    "start": "1820210",
    "end": "1826990"
  },
  {
    "text": "about how can we stop this attacks so I",
    "start": "1826990",
    "end": "1832840"
  },
  {
    "text": "hope you guys enjoyed the contents and comprehensive introduction on the cache attack and now we're going to switch",
    "start": "1832840",
    "end": "1839350"
  },
  {
    "text": "gears I'm going to talk about countermeasures so in my previous role we've received",
    "start": "1839350",
    "end": "1844809"
  },
  {
    "text": "numerous requests from both internal and external people asking us how to defend",
    "start": "1844809",
    "end": "1850120"
  },
  {
    "text": "against these attacks especially in the data center segment so today we're going to talk about four countermeasures that",
    "start": "1850120",
    "end": "1857200"
  },
  {
    "text": "you can actually deploy in your environment but and we'll talk about the constraint and also the security",
    "start": "1857200",
    "end": "1864010"
  },
  {
    "text": "coverage for different countermeasures okay so the first one the first",
    "start": "1864010",
    "end": "1870590"
  },
  {
    "start": "1868000",
    "end": "1868000"
  },
  {
    "text": "countermeasure is design leakage free code what I mean by leakage free is that",
    "start": "1870590",
    "end": "1876950"
  },
  {
    "text": "you should have secret independent instruction SS and also if you have",
    "start": "1876950",
    "end": "1882880"
  },
  {
    "text": "secret independent data access so if an application designer want to improve",
    "start": "1882880",
    "end": "1889220"
  },
  {
    "text": "their code in such a way that they don't have a cache side-channel leakage the",
    "start": "1889220",
    "end": "1894650"
  },
  {
    "text": "first thing they have to do is first they have to identify the secret that they want to protect from these attacks",
    "start": "1894650",
    "end": "1899810"
  },
  {
    "text": "right and then they have to figure out what are the variables that can have",
    "start": "1899810",
    "end": "1906200"
  },
  {
    "text": "relationship with this the secret so to identify that right now the the people",
    "start": "1906200",
    "end": "1914930"
  },
  {
    "text": "go through a very manual process of course you can try more automatic methods such as paint analysis and after",
    "start": "1914930",
    "end": "1923480"
  },
  {
    "text": "you obtain you identify the code regions that you want to protect the next thing",
    "start": "1923480",
    "end": "1929570"
  },
  {
    "text": "we want to do is to evaluate how big the leakage is and after you get a",
    "start": "1929570",
    "end": "1935170"
  },
  {
    "text": "confidence about how big the leakage is in your design then you want to redesign your code and go through an iterative",
    "start": "1935170",
    "end": "1941690"
  },
  {
    "text": "process but for today unfortunately there is no automated way of doing all",
    "start": "1941690",
    "end": "1949340"
  },
  {
    "text": "these flows and if you're interested we have some future work that will come up soon and we're happy to talk to you",
    "start": "1949340",
    "end": "1955130"
  },
  {
    "text": "offline about this but today we're going to explain how to manually inspect which",
    "start": "1955130",
    "end": "1962510"
  },
  {
    "text": "part of your Co have has cache side-channel leakage and how do you fix those code so we used a real example",
    "start": "1962510",
    "end": "1970820"
  },
  {
    "text": "this is the the same algorithm that Gorka was showing this is the RSA",
    "start": "1970820",
    "end": "1976910"
  },
  {
    "text": "modular exponentiation in the woof SSL crypto library and this is a real CVE so",
    "start": "1976910",
    "end": "1983990"
  },
  {
    "text": "actually we find a whole bunch of CVS in different cryptographic libraries but we want to pick the specific CVE to explain",
    "start": "1983990",
    "end": "1990590"
  },
  {
    "text": "the cache side-channel vulnerability and also how to fix it because this example",
    "start": "1990590",
    "end": "1995600"
  },
  {
    "text": "contains a lot of it is already hardened remote timing attack but they are pretty",
    "start": "1995600",
    "end": "2003650"
  },
  {
    "text": "surprised that it's a vulnerable to cache timing so let's get a quick recap",
    "start": "2003650",
    "end": "2009350"
  },
  {
    "text": "about what this algorithm does the algorithm takes in base value B and the",
    "start": "2009350",
    "end": "2015530"
  },
  {
    "text": "modulars end and also secret e what it does is it will compute B to the e",
    "start": "2015530",
    "end": "2020659"
  },
  {
    "text": "modular n okay and it initializes the two variables R 0 equal to 1 and R 1",
    "start": "2020659",
    "end": "2027860"
  },
  {
    "text": "equal to B after that it will scan through each kid bit for each key bit",
    "start": "2027860",
    "end": "2033520"
  },
  {
    "text": "dependent or keep it you will compute different modulo multiplications so now",
    "start": "2033520",
    "end": "2044510"
  },
  {
    "text": "I want to test if anybody really listened to the attack part can anybody remember why is this Co vulnerable to",
    "start": "2044510",
    "end": "2052669"
  },
  {
    "text": "cache timing attack anyone okay I'm not",
    "start": "2052669",
    "end": "2061099"
  },
  {
    "text": "going to give you a hard time so the the problem is that as you can",
    "start": "2061099",
    "end": "2067908"
  },
  {
    "text": "see there is a else condition here okay although the the the well there's a III",
    "start": "2067909",
    "end": "2074030"
  },
  {
    "text": "else condition here what that means is that when you map this Co into the cache the Coe region in the East condition and",
    "start": "2074030",
    "end": "2081618"
  },
  {
    "text": "the else condition will be mapping to different cache stats now if the attacker is able to probe different",
    "start": "2081619",
    "end": "2086990"
  },
  {
    "text": "cache sets then you will know which co region you are actively accessing so the",
    "start": "2086990",
    "end": "2098060"
  },
  {
    "text": "solution to this type of a Coast style is to merge the ELS condition into a",
    "start": "2098060",
    "end": "2103400"
  },
  {
    "text": "single core region so as you can see in line 4 & 5 now regardless of what the key value is",
    "start": "2103400",
    "end": "2109730"
  },
  {
    "text": "we always execute the same instructions right the way we're solving this is by expanding the our variable now based on",
    "start": "2109730",
    "end": "2118339"
  },
  {
    "text": "the our variable will index observe based on the key bits value will index",
    "start": "2118339",
    "end": "2123950"
  },
  {
    "text": "back in the our variable so the next question is is this code a leakage free",
    "start": "2123950",
    "end": "2134320"
  },
  {
    "text": "but if I ask apparently is not so there",
    "start": "2135430",
    "end": "2141140"
  },
  {
    "text": "is still a secret dependent data access and the reason is this as you can see in",
    "start": "2141140",
    "end": "2146540"
  },
  {
    "text": "line five based on the secret busy I we're going to index different location",
    "start": "2146540",
    "end": "2151790"
  },
  {
    "text": "in the our variable now if the key bit is let's say e I equal to zero right",
    "start": "2151790",
    "end": "2158210"
  },
  {
    "text": "then when we execute line five we're going to load our zero and if the key",
    "start": "2158210",
    "end": "2164780"
  },
  {
    "text": "bit is one that we're going to assess our one now if the attacker is able to",
    "start": "2164780",
    "end": "2172010"
  },
  {
    "text": "access is able to measure the time to to",
    "start": "2172010",
    "end": "2177560"
  },
  {
    "text": "the cache set that our zero is mapping to then you can figure out whether the",
    "start": "2177560",
    "end": "2183320"
  },
  {
    "text": "victim program is actively accessing our zero or r1 so similar to the previous",
    "start": "2183320",
    "end": "2189260"
  },
  {
    "text": "case the attacker can do this iteratively to extract every bit of the RSA key ok then we come up with another",
    "start": "2189260",
    "end": "2199220"
  },
  {
    "text": "improvement now now we achieve secret independent data SS the way we do it is",
    "start": "2199220",
    "end": "2206800"
  },
  {
    "text": "regardless of the key bit we're going to load the whole our variable into the cache ok so just a recap the the two",
    "start": "2206800",
    "end": "2219710"
  },
  {
    "text": "things to keep in mind to achieve to design casually cage-free code is first",
    "start": "2219710",
    "end": "2225710"
  },
  {
    "text": "we want to achieve secret independent instruction SS and the way we do it is by merging the different control flows",
    "start": "2225710",
    "end": "2231950"
  },
  {
    "text": "into a single code region okay and the second thing we want to achieve the secret independent data access and the",
    "start": "2231950",
    "end": "2238580"
  },
  {
    "text": "way we achieve it is regardless of what the secret value is we always load the whole data into the cache so that the",
    "start": "2238580",
    "end": "2245600"
  },
  {
    "text": "attacker has no way to figure out which data region were actually accessing so",
    "start": "2245600",
    "end": "2252800"
  },
  {
    "text": "the next idea is a page coloring what page coloring means is that the",
    "start": "2252800",
    "end": "2258080"
  },
  {
    "start": "2253000",
    "end": "2253000"
  },
  {
    "text": "operating system when you assign pages to processes it can actually look at the",
    "start": "2258080",
    "end": "2263930"
  },
  {
    "text": "physical address and then certain physical address bits determine what this page is going to map",
    "start": "2263930",
    "end": "2271239"
  },
  {
    "text": "to in the cache set now then if the operating system can carefully select",
    "start": "2271239",
    "end": "2277289"
  },
  {
    "text": "physical page address in such a way that it can isolate the protected process",
    "start": "2277289",
    "end": "2284279"
  },
  {
    "text": "from the unprotected process what I mean by that is you can assign page physical",
    "start": "2284279",
    "end": "2291639"
  },
  {
    "text": "addresses to the protected protected process such a way that always page map",
    "start": "2291639",
    "end": "2298209"
  },
  {
    "text": "to certain cache set and so the third",
    "start": "2298209",
    "end": "2305559"
  },
  {
    "start": "2304000",
    "end": "2304000"
  },
  {
    "text": "idea is or cache allocation technology this is a fairly new hardware feature",
    "start": "2305559",
    "end": "2311219"
  },
  {
    "text": "after 2015 Intel announced a new feature called the Intel cap it provides a",
    "start": "2311219",
    "end": "2318189"
  },
  {
    "text": "hardware framework to lock the cache so",
    "start": "2318189",
    "end": "2323409"
  },
  {
    "text": "what that means is the offering system or the hypervisor can lock the cache",
    "start": "2323409",
    "end": "2329289"
  },
  {
    "text": "ways for particular processes so what will happen is let's say the operating",
    "start": "2329289",
    "end": "2336579"
  },
  {
    "text": "system lock a certain cache way as showing the diagram and then the",
    "start": "2336579",
    "end": "2341739"
  },
  {
    "text": "attacker process comes in and try to say hey I'm going to do a prime improve attack so he Prime's the cache but then",
    "start": "2341739",
    "end": "2348459"
  },
  {
    "text": "the cache way that is protected is already locked so there's no way the attack process can use it that cache way",
    "start": "2348459",
    "end": "2356999"
  },
  {
    "text": "so you will do it yourself you do prime Emperor or flashin reloj or any attack",
    "start": "2356999",
    "end": "2362019"
  },
  {
    "text": "that we explained previously but it will get absolutely no information about the",
    "start": "2362019",
    "end": "2368259"
  },
  {
    "text": "site channel because you cannot even influence the cache activity for the",
    "start": "2368259",
    "end": "2374259"
  },
  {
    "text": "protected ways now the street for implementation of the intel cat has",
    "start": "2374259",
    "end": "2382319"
  },
  {
    "text": "limitation because the hardware itself only provides isolation for for cache",
    "start": "2382319",
    "end": "2388509"
  },
  {
    "text": "sections which means that you can only protect for processes a way to improve",
    "start": "2388509",
    "end": "2396279"
  },
  {
    "text": "it is to combine page coloring with the intel",
    "start": "2396279",
    "end": "2401440"
  },
  {
    "text": "cat technology so on top of the intel cat you can have the hypervisor to",
    "start": "2401440",
    "end": "2407920"
  },
  {
    "text": "provide a page coloring so within your each hardware partition you can create",
    "start": "2407920",
    "end": "2413560"
  },
  {
    "text": "more software partitions so the last",
    "start": "2413560",
    "end": "2420430"
  },
  {
    "start": "2419000",
    "end": "2419000"
  },
  {
    "text": "countermeasure i'm going to talk about is behavior detection using hardware performance counters for those of you",
    "start": "2420430",
    "end": "2427450"
  },
  {
    "text": "who are not familiar with hardware performance counters these are cpu registers that exist in",
    "start": "2427450",
    "end": "2434080"
  },
  {
    "text": "all the major cpu vendors and they can track microarchitecture events that",
    "start": "2434080",
    "end": "2440020"
  },
  {
    "text": "happen on your system so one important thing to keep in mind",
    "start": "2440020",
    "end": "2445810"
  },
  {
    "text": "about these CPU register is that you can program a certain threshold for these",
    "start": "2445810",
    "end": "2450970"
  },
  {
    "text": "registers and then once the register counting reach a certain threshold that",
    "start": "2450970",
    "end": "2457120"
  },
  {
    "text": "you program you can trigger interrupt back to the operating system so how do we use to detect cache attack here's the",
    "start": "2457120",
    "end": "2465310"
  },
  {
    "text": "example there is one Hardware event that performance counter can keep track of which is last level cache miss okay now",
    "start": "2465310",
    "end": "2473890"
  },
  {
    "text": "if you look at the last level cache attack trees you will find a very",
    "start": "2473890",
    "end": "2479740"
  },
  {
    "text": "obvious or very distinguished will behavior which is you will see a continuous and burst amount of last",
    "start": "2479740",
    "end": "2487390"
  },
  {
    "text": "level cache miss so one simple way of applying this performance counter based",
    "start": "2487390",
    "end": "2495450"
  },
  {
    "text": "detection approach is that the in the case of hyper hypervisor the hypervisor",
    "start": "2495450",
    "end": "2501460"
  },
  {
    "text": "can first program the performance counters with a certain threshold that",
    "start": "2501460",
    "end": "2508690"
  },
  {
    "text": "depends on the environment of the the system and the the once the performance",
    "start": "2508690",
    "end": "2520030"
  },
  {
    "text": "counter reaches this threshold it will trigger into our back to the operating system and once the operating system",
    "start": "2520030",
    "end": "2525640"
  },
  {
    "text": "sees that interrupt it can analyze for example during a certain amount of peer",
    "start": "2525640",
    "end": "2531880"
  },
  {
    "text": "certain time interval how many last level cache miss happen and then it can",
    "start": "2531880",
    "end": "2540759"
  },
  {
    "text": "be notify about this kind of activity but of course you may you know people may say this heuristic is too simple",
    "start": "2540759",
    "end": "2546789"
  },
  {
    "text": "maybe there's some legitimate program or some legitimate system that has this",
    "start": "2546789",
    "end": "2551890"
  },
  {
    "text": "kind of behavior as some certain you know special time so you can actually",
    "start": "2551890",
    "end": "2557559"
  },
  {
    "text": "improve this by designing a second level detector so once the performance counter",
    "start": "2557559",
    "end": "2562779"
  },
  {
    "text": "triggers is the operating system interrupt the operating system can come up and actually inspect the memory",
    "start": "2562779",
    "end": "2570279"
  },
  {
    "text": "accesses come from the processor now by examining the memory access then you can",
    "start": "2570279",
    "end": "2576730"
  },
  {
    "text": "identify whether these kind of assets is actually attack attacker actively",
    "start": "2576730",
    "end": "2583569"
  },
  {
    "text": "flashing the same addresses or it's a regular program loading or some other kind of regular system behavior okay so",
    "start": "2583569",
    "end": "2594880"
  },
  {
    "start": "2593000",
    "end": "2593000"
  },
  {
    "text": "we talked about for countermeasures and I want to compare those countermeasures from about two perspectives the first",
    "start": "2594880",
    "end": "2602170"
  },
  {
    "text": "one is from a real production deployment perspective what are the things that are",
    "start": "2602170",
    "end": "2607930"
  },
  {
    "text": "required by these countermeasures so if we do the countermeasure at the co level",
    "start": "2607930",
    "end": "2613529"
  },
  {
    "text": "the only thing that we require is source code but first sometimes source code is now available if we use page coloring",
    "start": "2613529",
    "end": "2621700"
  },
  {
    "text": "that will require modification to the operating system or the hypervisor depends on which level you are implementing it if we go into Intel use",
    "start": "2621700",
    "end": "2631539"
  },
  {
    "text": "the Intel Kat the first constraint will be you will need to have a pretty new",
    "start": "2631539",
    "end": "2637839"
  },
  {
    "text": "hardware that has the feature and also it will require some operating system update such that you can leverage the",
    "start": "2637839",
    "end": "2644980"
  },
  {
    "text": "Intel caps feature to provide this kind of isolation now so for behavior",
    "start": "2644980",
    "end": "2651160"
  },
  {
    "text": "detection whether you require operating system change depends on the scenario",
    "start": "2651160",
    "end": "2657509"
  },
  {
    "text": "for example if you are implementing this in the Linux operating system there's no",
    "start": "2657509",
    "end": "2663970"
  },
  {
    "text": "need to change the operating system you can just program a kernel module that can interface with the performance",
    "start": "2663970",
    "end": "2670180"
  },
  {
    "text": "counter and you can also handle the detection after the performance counter",
    "start": "2670180",
    "end": "2676120"
  },
  {
    "text": "trigger to interrupt but of course if you're implementing a hypervisor level they will require a coach engine",
    "start": "2676120",
    "end": "2682360"
  },
  {
    "text": "hypervisor now let's see how does this",
    "start": "2682360",
    "end": "2689530"
  },
  {
    "start": "2686000",
    "end": "2686000"
  },
  {
    "text": "how effective are these techniques against for attack scenarios that Oracle",
    "start": "2689530",
    "end": "2694840"
  },
  {
    "text": "is describing so if we have leakage free code then you",
    "start": "2694840",
    "end": "2701680"
  },
  {
    "text": "will work against all the foreign environment now if we're using page",
    "start": "2701680",
    "end": "2707980"
  },
  {
    "text": "coloring it will work in the cloud environment the IAS snps Clow",
    "start": "2707980",
    "end": "2713290"
  },
  {
    "text": "environment you will work in a smartphone environment but whether you worked in the javascript in the browser really depends on what the javascript is",
    "start": "2713290",
    "end": "2720280"
  },
  {
    "text": "attacking so for example if the javascript is attacking an application outside the browser yes then the page",
    "start": "2720280",
    "end": "2727900"
  },
  {
    "text": "coloring will work because it will be able to distinguish between the browser process and the victim process but if",
    "start": "2727900",
    "end": "2736030"
  },
  {
    "text": "the javascript is actually attacking things within the browser then the page",
    "start": "2736030",
    "end": "2741910"
  },
  {
    "text": "coloring algorithm will not be able to know which page belongs to attacker",
    "start": "2741910",
    "end": "2747790"
  },
  {
    "text": "which page belongs to victim since there are in the same process so similarly",
    "start": "2747790",
    "end": "2756660"
  },
  {
    "text": "whether intel cat will be effective in this environment is based on one",
    "start": "2756660",
    "end": "2762790"
  },
  {
    "text": "assumption that the memory DT publication needs to be disabled then",
    "start": "2762790",
    "end": "2770380"
  },
  {
    "text": "Intel cat will work for both the cloud and also smartphone environment and so",
    "start": "2770380",
    "end": "2779890"
  },
  {
    "text": "one thing for the trust execution environment page coloring an intel cat",
    "start": "2779890",
    "end": "2787090"
  },
  {
    "text": "both will not work in the trust exit environment because it relies on the operating system to provide security and",
    "start": "2787090",
    "end": "2793290"
  },
  {
    "text": "trust execution environment don't trust the operating system so it cannot protect the trust exit",
    "start": "2793290",
    "end": "2799910"
  },
  {
    "text": "in the case of behavior detection it can be applied to the first scenario first",
    "start": "2799910",
    "end": "2805050"
  },
  {
    "text": "three scenario but you won't apply to the trust execution environment either because again you relies on trust",
    "start": "2805050",
    "end": "2812430"
  },
  {
    "text": "assumptions on the operating system and hypervisor ok now we come to the",
    "start": "2812430",
    "end": "2819870"
  },
  {
    "start": "2818000",
    "end": "2818000"
  },
  {
    "text": "conclusion we talk about all the major cache attacks and we also talk about all",
    "start": "2819870",
    "end": "2826500"
  },
  {
    "text": "the major computing environments that you can actually use cache attacks so",
    "start": "2826500",
    "end": "2832200"
  },
  {
    "text": "cache attack may look slightly complicated than some traditional exploitation method but there certainly",
    "start": "2832200",
    "end": "2837900"
  },
  {
    "text": "in real threats now if your organization really consider cache attack in your",
    "start": "2837900",
    "end": "2844320"
  },
  {
    "text": "threat model you should consider implementing these countermeasures depends on your requirement and",
    "start": "2844320",
    "end": "2850170"
  },
  {
    "text": "constraint so the just to recap the countermeasure that we talked about is",
    "start": "2850170",
    "end": "2855930"
  },
  {
    "text": "at the application level you can introduce leakage free code design and",
    "start": "2855930",
    "end": "2861060"
  },
  {
    "text": "you can also do page coloring for cache isolation at the operating system or hypervisor level and at the system level",
    "start": "2861060",
    "end": "2868380"
  },
  {
    "text": "you can use the operating system of hypervisor to leverage these new",
    "start": "2868380",
    "end": "2874020"
  },
  {
    "text": "hardware features such as Intel CAD or the performance counter and with that I",
    "start": "2874020",
    "end": "2881580"
  },
  {
    "text": "think thank you thank everybody for attending our talk and we're ready for questions",
    "start": "2881580",
    "end": "2887839"
  },
  {
    "text": "[Applause]",
    "start": "2888550",
    "end": "2895769"
  },
  {
    "text": "so I think that's definitely case-by-case but for this specific",
    "start": "2909540",
    "end": "2914760"
  },
  {
    "text": "scenario that specific example that we talked about it doesn't affect because we have a way",
    "start": "2914760",
    "end": "2920190"
  },
  {
    "text": "to measure the leakage after the modification yeah does that answer your",
    "start": "2920190",
    "end": "2926670"
  },
  {
    "text": "question yes that's actually a good",
    "start": "2926670",
    "end": "2960359"
  },
  {
    "text": "question so the issues that you more or less know what you want to attack that's actually kind of an assumption that that",
    "start": "2960359",
    "end": "2967619"
  },
  {
    "text": "is given right so for example if you want attack I don't know I say decryptions you kind of know more this or you kind of know what to expect in",
    "start": "2967619",
    "end": "2974550"
  },
  {
    "text": "the set that you want to attack all right so yeah",
    "start": "2974550",
    "end": "2988550"
  },
  {
    "text": "yeah so for example the cryptography cooperation going on in that in that you know credential checking right so",
    "start": "2990700",
    "end": "2997520"
  },
  {
    "text": "basically we leave a trace that you kind of so you can train your your attack in",
    "start": "2997520",
    "end": "3003220"
  },
  {
    "text": "a lab environment for example to actually know or how that that that",
    "start": "3003220",
    "end": "3008920"
  },
  {
    "text": "process behaves more or less in terms of cache so for example you can trade with machine learning and so on you can do",
    "start": "3008920",
    "end": "3014260"
  },
  {
    "text": "things like well when I log in I see certain cache sets that have accesses",
    "start": "3014260",
    "end": "3019720"
  },
  {
    "text": "that look like this right so basically you kind of do that right so pretty much just can all the sets looking for those",
    "start": "3019720",
    "end": "3026830"
  },
  {
    "text": "sets that you know that they should behave in a certain way yes yes yes",
    "start": "3026830",
    "end": "3048690"
  },
  {
    "text": "usually that that's a threshold again that you can train your application to so like depends again this is not the",
    "start": "3053970",
    "end": "3059770"
  },
  {
    "text": "yes or no answer so it's not like you have to look you have to look after every 100 cycles right so it kind of",
    "start": "3059770",
    "end": "3065530"
  },
  {
    "text": "depends on what you want to attack so but you can train that so basically you can train you can train your attack to",
    "start": "3065530",
    "end": "3070810"
  },
  {
    "text": "actually know when to look or how frequently to look to actually see the",
    "start": "3070810",
    "end": "3076720"
  },
  {
    "text": "pattern that you expect once you do that you go to the cloud to your IAS for",
    "start": "3076720",
    "end": "3082390"
  },
  {
    "text": "example to a motion is two for example and you just scan all the sets with your frequency that the frequency that you",
    "start": "3082390",
    "end": "3087580"
  },
  {
    "text": "that you that you train it they'll go with the algorithm for and then you just decide which sets to attack so let me",
    "start": "3087580",
    "end": "3093220"
  },
  {
    "text": "let me add something really quick the the frequent granularity that the",
    "start": "3093220",
    "end": "3100930"
  },
  {
    "text": "attacker access the cache and measure the feedback is normally much smaller than the algorithm that they're trying",
    "start": "3100930",
    "end": "3107710"
  },
  {
    "text": "to attack so you have a lot of wiggle room about tuning your attack of course",
    "start": "3107710",
    "end": "3112869"
  },
  {
    "text": "if you are really trying to attack really really small KO region then the attacks granularity for the feedback may",
    "start": "3112869",
    "end": "3119710"
  },
  {
    "text": "be smaller than how fast the co computes but we see that's pretty rare at least from the",
    "start": "3119710",
    "end": "3125430"
  },
  {
    "text": "crypto library perspective does that sound to a question yes yes so yeah",
    "start": "3125430",
    "end": "3156869"
  },
  {
    "text": "there's definitely a certain depends on scenario there's definitely up security",
    "start": "3156869",
    "end": "3162180"
  },
  {
    "text": "when we're trying to attack things but one good example will be SSL like",
    "start": "3162180",
    "end": "3167369"
  },
  {
    "text": "everybody use SSL now we profile all the popular SSL libraries and we get about the most",
    "start": "3167369",
    "end": "3173280"
  },
  {
    "text": "up-to-date versions then we can get a good you know how does it a signature",
    "start": "3173280",
    "end": "3178740"
  },
  {
    "text": "list and then when we probe the katarina ok you're doing this you're doing this",
    "start": "3178740",
    "end": "3184160"
  },
  {
    "text": "it is what you're saying is true but you usually also have access to so we also",
    "start": "3204140",
    "end": "3210870"
  },
  {
    "text": "usually assume that you have access to the binary that more or less you know that so I'm a taking this binary right",
    "start": "3210870",
    "end": "3216390"
  },
  {
    "text": "so so there are some things that don't change so basically the alignment with respect to a page offset all the",
    "start": "3216390",
    "end": "3222180"
  },
  {
    "text": "instructions don't don't don't don't change so that means that you don't have to come for all the sets but you just",
    "start": "3222180",
    "end": "3227730"
  },
  {
    "text": "know a subset of sets that you know your instruction will or the instruction",
    "start": "3227730",
    "end": "3233250"
  },
  {
    "text": "you're looking for will Lake will lie in the lay in those sets how frequent seek",
    "start": "3233250",
    "end": "3256500"
  },
  {
    "text": "just like a few hundred rounds we can extract it right yeah yeah so what we",
    "start": "3256500",
    "end": "3268800"
  },
  {
    "text": "have been observing is that so for for RSA is just warm wrong right or maybe",
    "start": "3268800",
    "end": "3276300"
  },
  {
    "text": "two wrongs but for AES we don't need a few thousand two hundred round wrongs",
    "start": "3276300",
    "end": "3281700"
  },
  {
    "text": "but that takes pretty short amount of time - yeah and I will say that's not",
    "start": "3281700",
    "end": "3287640"
  },
  {
    "text": "really you know good defense against the",
    "start": "3287640",
    "end": "3292650"
  },
  {
    "text": "type of attack a good defense for example might be to use exponent blinding blinding USA so that ensures",
    "start": "3292650",
    "end": "3298830"
  },
  {
    "text": "that you know after so you get or let's",
    "start": "3298830",
    "end": "3304260"
  },
  {
    "text": "say you use a different secret every time you run the algorithm and that would prevent an attacker firmly but",
    "start": "3304260",
    "end": "3309330"
  },
  {
    "text": "practically we haven't seen any crypto library using this so far so there must be a reason behind it there are no if",
    "start": "3309330",
    "end": "3314550"
  },
  {
    "text": "performance or any other issues but yeah we haven't seen such an such a confirmation influence",
    "start": "3314550",
    "end": "3321079"
  },
  {
    "text": "there are papers that have done there's an academic paper that actually broke the isolation that I provide so I hardly",
    "start": "3335500",
    "end": "3342710"
  },
  {
    "text": "referred to you after we talk in terms of attacking other stuff not that is not a SLR but other as we said crypto things",
    "start": "3342710",
    "end": "3349940"
  },
  {
    "text": "for example a user doesn't play a role so we deal only with physical addresses right so a slur doesn't really play a",
    "start": "3349940",
    "end": "3356660"
  },
  {
    "text": "role in our kind of attack scenario",
    "start": "3356660",
    "end": "3362500"
  },
  {
    "text": "right thank you so much for attending and yeah if you have further questions you can reach us offline thank you",
    "start": "3366850",
    "end": "3373170"
  },
  {
    "text": "[Applause]",
    "start": "3373170",
    "end": "3376139"
  }
]